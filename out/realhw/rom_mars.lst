 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 09/14/2024 05:32:19 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$7                  SET_INITMODE	equ 7		; Starting screen mode number on boot, for debugging.
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)USER 2024.???"  HTAG_DATEINFO	equ "(C)USER 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SEGA CD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name (if SET_SAMECDINFO is False)
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MOMPASS>2
(1)  231/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  232/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  233/       0 :                     		endif
(1)  234/       0 :                     	endif
(1)  235/       0 :                     
(1)  236/       0 :                     	if MARS
(1)  237/       0 :                     		if * >= $900000+$100000
(1)  238/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  239/       0 :                     		endif
(1)  240/       0 :                     
(1)  241/       0 :                     		dephase
(1)  242/       0 :                     	elseif MCD|MARSCD
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     
(1)  245/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  246/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  247/       0 :                     		rompad mpadlbl
(1)  248/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  249/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	endm
(1)  252/       0 :                     
(1)  253/       0 :                     ; --------------------------------------------
(1)  254/       0 :                     
(1)  255/       0 :                     binclude_dma	macro lblstart,file
(1)  256/       0 :                     	if MARS
(1)  257/       0 :                     GLBL_LASTPHDMA	set *
(1)  258/       0 :                     	dephase
(1)  259/       0 :                     GLBL_PHASEDMA	set *
(1)  260/       0 :                     		endif
(1)  261/       0 :                     
(1)  262/       0 :                     		align 2
(1)  263/       0 :                     lblstart	label *
(1)  264/       0 :                     		binclude file
(1)  265/       0 :                     		align 2
(1)  266/       0 :                     
(1)  267/       0 :                     	if MARS
(1)  268/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  269/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  270/       0 :                     	endif
(1)  271/       0 :                     		endm
(1)  272/       0 :                     
(1)  273/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  274/       0 :                     	if MARS
(1)  275/       0 :                     GLBL_LASTPHDMA	set *
(1)  276/       0 :                     	dephase
(1)  277/       0 :                     GLBL_PHASEDMA	set *
(1)  278/       0 :                     		endif
(1)  279/       0 :                     
(1)  280/       0 :                     		align 2
(1)  281/       0 :                     lblstart	label *
(1)  282/       0 :                     		binclude file
(1)  283/       0 :                     lblend		label *
(1)  284/       0 :                     		align 2
(1)  285/       0 :                     
(1)  286/       0 :                     	if MARS
(1)  287/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  288/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  289/       0 :                     	endif
(1)  290/       0 :                     		endm
(1)  291/       0 :                     
(1)  292/       0 :                     ; --------------------------------------------
(1)  293/       0 :                     ; 32X graphics pack Enter/Exit
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     
(1)  296/       0 :                     mars_VramStart	macro thelabel
(1)  297/       0 :                     thelabel label *
(1)  298/       0 :                     		phase 0
(1)  299/       0 :                     		endm
(1)  300/       0 :                     
(1)  301/       0 :                     mars_VramEnd	macro thelabel
(1)  302/       0 :                     		align 8
(1)  303/       0 :                     .end:
(1)  304/       0 :                     ; 		if MOMPASS == 1
(1)  305/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  306/       0 :                     ; 		endif
(1)  307/       0 :                     		dephase
(1)  308/       0 :                     thelabel label *
(1)  309/       0 :                     		endm
(1)  310/       0 :                     
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     ; Fill CD sectors
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     
(1)  315/       0 :                     fillSectors macro num
(1)  316/       0 :                     	rept num
(1)  317/       0 :                     		align $800-1
(1)  318/       0 :                     		dc.b 0
(1)  319/       0 :                     	endm
(1)  320/       0 :                     	endm
(1)  321/       0 :                     
(1)  322/       0 :                     ; ====================================================================
(1)  323/       0 :                     ; ------------------------------------------------------------
(1)  324/       0 :                     ; Nikona CODE macros
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     
(1)  327/       0 :                     ; --------------------------------------------
(1)  328/       0 :                     ; VDP color debug
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     
(1)  331/       0 :                     vdp_showme	macro color
(1)  332/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  333/       0 :                     		move.w	#color,(vdp_data).l
(1)  334/       0 :                     		endm
(1)  335/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)   57/       0 :                     
(1)   58/       0 :                     ; --------------------------------------------------------
(1)   59/       0 :                     ; Settings
(1)   60/       0 :                     ; --------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$20                 MAX_MARSSPR	equ 32		; !! Maximum 2D-mode Sprites
(1)   63/       0 : =$20                 MAX_MARSMSPR	equ 32		; !! Maximum 3D-mode Sprites
(1)   64/       0 : =$18                 MAX_MARSOBJ	equ 24		; !! Maximum 3D-mode Objects (models)
(1)   65/       0 :                     
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     ; Structs
(1)   68/       0 :                     ; --------------------------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     ; ----------------------------------------
(1)   71/       0 :                     ; RAM_MdMars_ScrlSett
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; Maximum size: $20 bytes
(1)   74/       0 :                     ; ----------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     sscrl		struct
(1)   77/       0 :                     x_pos		ds.l 1		; $xxxx.0000
(1)   78/       4 :                     y_pos		ds.l 1		; $yyyy.0000
(1)   79/       8 :                     vram		ds.l 1		; VRAM
(1)   80/       0 : =$C                  		endstruct
(1)   81/       0 :                     
(1)   82/       0 :                     ; ----------------------------------------
(1)   83/       0 :                     ; RAM_MdMars_SuperSpr
(1)   84/       0 :                     ;
(1)   85/       0 :                     ; sspr_Flags: %ET0000yx
(1)   86/       0 :                     ;	| E - Enabled sprite
(1)   87/       0 :                     ;	| T - Delete on next frame (68k clears bit)
(1)   88/       0 :                     ; 	| x - Flip X
(1)   89/       0 :                     ; 	| y - Flip Y
(1)   90/       0 :                     ; sspr_Size: $xxyy
(1)   91/       0 :                     ; 	| xx - Width/8
(1)   92/       0 :                     ; 	| yy - Height/8
(1)   93/       0 :                     ;
(1)   94/       0 :                     ; Maximum size: $10 bytes
(1)   95/       0 :                     ; ----------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     sspr		struct
(1)   98/       0 :                     flags		ds.b 1		; %ET0000yx
(1)   99/       1 :                     		ds.b 1
(1)  100/       2 :                     frame		ds.w 1		; Current frame
(1)  101/       4 :                     size		ds.w 1		; Size in cells $XXYY
(1)  102/       6 :                     indx		ds.w 1		; 256-index color
(1)  103/       8 :                     x_pos		ds.w 1		; X position
(1)  104/       A :                     y_pos		ds.w 1		; Y position
(1)  105/       C :                     vram		ds.l 1		; Graphics VRAM position (in RAM_Mars_VramData)
(1)  106/      10 :                     ; len		ds.l 0
(1)  107/       0 : =$10                 		endstruct
(1)  108/       0 :                     
(1)  109/       0 :                     ; ----------------------------------------
(1)  110/       0 :                     ; RAM_MdMars_Models
(1)  111/       0 :                     ;
(1)  112/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  113/       0 :                     ;
(1)  114/       0 :                     ; Maximum size: $20 bytes
(1)  115/       0 :                     ; ----------------------------------------
(1)  116/       0 :                     
(1)  117/       0 :                     mmdl		struct
(1)  118/       0 :                     frame		ds.w 1
(1)  119/       2 :                     		ds.w 1
(1)  120/       4 :                     data		ds.l 1		; Model data pointer, 0: No model
(1)  121/       8 :                     x_pos		ds.l 1		; X position
(1)  122/       C :                     y_pos		ds.l 1		; Y position
(1)  123/      10 :                     z_pos		ds.l 1		; Z position
(1)  124/      14 :                     x_rot		ds.l 1		; X rotation
(1)  125/      18 :                     z_rot		ds.l 1		; Y rotation
(1)  126/      1C :                     y_rot		ds.l 1		; Z rotation
(1)  127/      20 :                     ; len		ds.l 0
(1)  128/       0 : =$20                 		endstruct
(1)  129/       0 :                     
(1)  130/       0 :                     ; ----------------------------------------
(1)  131/       0 :                     ; RAM_MdMars_MSprites
(1)  132/       0 :                     ;
(1)  133/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  134/       0 :                     ;
(1)  135/       0 :                     ; Maximum size: $20 bytes
(1)  136/       0 :                     ; ----------------------------------------
(1)  137/       0 :                     
(1)  138/       0 :                     mspr		struct
(1)  139/       0 :                     flags		ds.b 1		; %EIF00000 E-enable | I-Normal/3D-field | F-Face to the camera
(1)  140/       1 :                     indx		ds.b 1		; Palette starting index
(1)  141/       2 :                     size_w		ds.b 1		; Size width
(1)  142/       3 :                     size_h		ds.b 1		; Size height
(1)  143/       4 :                     src_w		ds.b 1		; Texture frame width
(1)  144/       5 :                     src_h		ds.b 1		; Texture frame height
(1)  145/       6 :                     srcwdth		ds.b 1		; Texture width
(1)  146/       7 :                     frame_x		ds.b 1		; X frame
(1)  147/       8 :                     frame_y		ds.b 1		; Y frame
(1)  148/       9 :                     		ds.b 1
(1)  149/       A :                     		ds.b 1
(1)  150/       B :                     		ds.b 1
(1)  151/       C :                     		ds.b 1
(1)  152/       D :                     		ds.b 1
(1)  153/       E :                     		ds.b 1
(1)  154/       F :                     		ds.b 1
(1)  155/      10 :                     x_pos		ds.w 1		; X position
(1)  156/      12 :                     y_pos		ds.w 1		; Y position
(1)  157/      14 :                     z_pos		ds.w 1		; Z position
(1)  158/      16 :                     x_rot		ds.w 1		; X rotation
(1)  159/      18 :                     z_rot		ds.w 1		; Y rotation
(1)  160/      1A :                     y_rot		ds.w 1		; Z rotation
(1)  161/      1C :                     vram		ds.l 1		; VRAM texture location
(1)  162/      20 :                     ; len		ds.l 0
(1)  163/       0 : =$20                 		endstruct
(1)  164/       0 :                     
(1)  165/       0 :                     ; ----------------------------------------
(1)  166/       0 :                     ; RAM_MdMars_MdlCamera
(1)  167/       0 :                     ;
(1)  168/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  169/       0 :                     ;
(1)  170/       0 :                     ; Maximum size: $20 bytes
(1)  171/       0 :                     ; ----------------------------------------
(1)  172/       0 :                     
(1)  173/       0 :                     mcam		struct
(1)  174/       0 :                     x_pos		ds.l 1		; X position
(1)  175/       4 :                     y_pos		ds.l 1		; Y position
(1)  176/       8 :                     z_pos		ds.l 1		; Z position
(1)  177/       C :                     x_rot		ds.l 1		; X rotation
(1)  178/      10 :                     y_rot		ds.l 1		; Y rotation
(1)  179/      14 :                     z_rot		ds.l 1		; Z rotation
(1)  180/      18 :                     ; len		ds.l 0
(1)  181/       0 : =$18                 		endstruct
(1)  182/       0 :                     
(1)  183/       0 :                     ; ----------------------------------------------------------------
(1)  184/       0 :                     ; DREQ RAM section
(1)  185/       0 :                     ;
(1)  186/       0 :                     ; To read these labels:
(1)  187/       0 :                     ;
(1)  188/       0 :                     ; On the Genesis:
(1)  189/       0 :                     ; 	lea	(RAM_MdMars_Comm+DREQ_LABEL).w,aX
(1)  190/       0 :                     ; On the 32X:
(1)  191/       0 :                     ; 	mov	#DREQ_LABEL,rX
(1)  192/       0 :                     ; 	mov	@(marsGbl_DreqRead,gbr),r0
(1)  193/       0 :                     ;	add	r0,rX
(1)  194/       0 :                     ;
(1)  195/       0 :                     ; List MUST be aligned by 8bytes.
(1)  196/       0 :                     ; ----------------------------------------------------------------
(1)  197/       0 :                     
(1)  198/       0 :                     Dreq		struct
(1)  199/       0 :                     Palette		ds.w 256				; 256-color palette *DON'T MOVE THIS*
(1)  200/     200 :                     Buff0		ds.b $20				; Buffer 0 | $020 bytes
(1)  201/     220 :                     Buff1		ds.b $400				; Buffer 1 | $400 bytes
(1)  202/     620 :                     Buff2		ds.b $400				; Buffer 2 | $400 bytes
(1)  203/     A20 :                     ; len		ds.l 0
(1)  204/       0 : =$A20                		endstruct
(1)  208/       0 :                     
(1)  209/       0 :                     ; ====================================================================
(1)  210/       0 :                     ; ----------------------------------------------------------------
(1)  211/       0 :                     ; Mode 1: 2D scrolling with sprites
(1)  212/       0 :                     ; ----------------------------------------------------------------
(1)  213/       0 :                     
(1)  214/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  214/       0 : =$0                  GLBL_LASTPC     := *
(1)  214/       0 :                                     dephase
(1)  214/FFFFFFFFFFFFCA42 :                                     phase RAM_MDMARS_COMMBUFF
(1)  214/FFFFFFFFFFFFCA42 : =$FFFFFFFFFFFFCA42   GLBL_LASTORG    := *
(1)  215/FFFFFFFFFFFFCA42 :                     			ds.w 256			; pallete skip
(1)  216/FFFFFFFFFFFFCC42 :                     RAM_MdMars_ScrlSett	ds.b $20
(1)  217/FFFFFFFFFFFFCC62 :                     RAM_MdMars_ScrlData	ds.w (512/16)*(256/16)
(1)  218/FFFFFFFFFFFFD062 :                     RAM_MdMars_SuperSpr	ds.b sspr_len*MAX_MARSSPR
(1)  219/FFFFFFFFFFFFD262 :                     .sizeof_this		ds.l 0
(1)  220/FFFFFFFFFFFFD268 : (MACRO)              			endmemory
(1)  220/     826 :                     .here:          dephase
(1)  220/     826 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  220/       0 :                                     phase GLBL_LASTPC
(1)  221/       0 : (MACRO)              			erreport "This DREQ MEMORY: 2D",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  222/       0 :                     
(1)  223/       0 :                     ; ====================================================================
(1)  224/       0 :                     ; ----------------------------------------------------------------
(1)  225/       0 :                     ; Mode 2: 3D polygons mode
(1)  226/       0 :                     ; ----------------------------------------------------------------
(1)  227/       0 :                     
(1)  228/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  228/       0 : =$0                  GLBL_LASTPC     := *
(1)  228/       0 :                                     dephase
(1)  228/FFFFFFFFFFFFCA42 :                                     phase RAM_MDMARS_COMMBUFF
(1)  228/FFFFFFFFFFFFCA42 : =$FFFFFFFFFFFFCA42   GLBL_LASTORG    := *
(1)  229/FFFFFFFFFFFFCA42 :                     			ds.w 256			; pallete skip
(1)  230/FFFFFFFFFFFFCC42 :                     RAM_MdMars_MdlCamera	ds.b $20
(1)  231/FFFFFFFFFFFFCC62 :                     RAM_MdMars_MSprites	ds.b mspr_len*MAX_MARSMSPR	; $400
(1)  232/FFFFFFFFFFFFD062 :                     RAM_MdMars_Models	ds.b mmdl_len*MAX_MARSOBJ	; $400
(1)  233/FFFFFFFFFFFFD362 :                     .sizeof_this		ds.l 0
(1)  234/FFFFFFFFFFFFD368 : (MACRO)              			endmemory
(1)  234/     926 :                     .here:          dephase
(1)  234/     926 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  234/       0 :                                     phase GLBL_LASTPC
(1)  235/       0 : (MACRO)              			erreport "This DREQ MEMORY: 3D",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  236/       0 :                     
(1)  237/       0 :                     ; ============================================================
(1)  238/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   53/FFFFFFFFFFFFC800 :                     RAM_MdMisc		ds.b sizeof_mdmisc-RAM_MdMisc
(1)   55/FFFFFFFFFFFFD462 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFE45C :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFF5FE :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFF604 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFF604 : (MACRO)              			endmemory
(1)   60/    4604 :                     .here:          dephase
(1)   60/    4604 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   70/       0 : (MACRO)              			memory RAM_MdMisc
(1)   70/       0 : =$0                  GLBL_LASTPC     := *
(1)   70/       0 :                                     dephase
(1)   70/FFFFFFFFFFFFC800 :                                     phase RAM_MDMISC
(1)   70/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)   71/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   72/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   81/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   82/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   88/FFFFFFFFFFFFC800 :                     RAM_MdMars_IndxPalFd	ds.w 1				; ''
(1)   89/FFFFFFFFFFFFC802 :                     RAM_MdMars_PalFd	ds.w 256			; Target 32X palette for FadeIn/Out
(1)   90/FFFFFFFFFFFFCA02 :                     RAM_MdMars_MPalFdList	ds.b palfd_len*MAX_PALFDREQ	; '' same but for 32X
(1)   91/FFFFFFFFFFFFCA42 :                     RAM_MdMars_CommBuff	ds.b Dreq_len			; 32X DREQ-RAM size
(1)   93/FFFFFFFFFFFFD462 :                     sizeof_mdmisc		ds.l 0
(1)   94/FFFFFFFFFFFFD468 :                     ; ----------------------------------------
(1)   96/FFFFFFFFFFFFD468 : (MACRO)              			endmemory
(1)   96/     C68 :                     .here:          dephase
(1)   96/     C68 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   96/       0 :                                     phase GLBL_LASTPC
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFE45C :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFE45C : =$FFFFFFFFFFFFE45C   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFE45C :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFE45C :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFE45C :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFE45C :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFE45C :                     ; Save file struct
(1)    4/FFFFFFFFFFFFE45C :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFE45C :                     
(1)    6/FFFFFFFFFFFFE45C :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFE460 :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFE464 :                     
      80/FFFFFFFFFFFFE464 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFE464 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFE468 : (MACRO)              		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFE468 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
      99/       0 :                     		include	"system/head_mars.asm"			; 32X header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA 32X header
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 03F0           		dc.l $3F0		; Entry point: MUST point to $3F0
(1)    8/       8 : 0000 0824           		dc.l MD_ErrBus		; Bus error
(1)    9/       C : 0000 0824           		dc.l MD_ErrAddr		; Address error
(1)   10/      10 : 0000 0824           		dc.l MD_ErrIll		; ILLEGAL Instruction
(1)   11/      14 : 0000 0824           		dc.l MD_ErrZDiv		; Divide by 0
(1)   12/      18 : 0000 0824           		dc.l MD_ErrChk		; CHK Instruction
(1)   13/      1C : 0000 0824           		dc.l MD_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0824           		dc.l MD_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0824           		dc.l MD_Trace		; Trace
(1)   16/      28 : 0000 0824           		dc.l MD_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0824           		dc.l MD_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0824           		dc.l MD_ErrorEx		; Error exception
(1)   19/      34 : 0000 0824           		dc.l MD_ErrorEx
(1)   20/      38 : 0000 0824           		dc.l MD_ErrorEx
(1)   21/      3C : 0000 0824           		dc.l MD_ErrorEx
(1)   22/      40 : 0000 0824           		dc.l MD_ErrorEx
(1)   23/      44 : 0000 0824           		dc.l MD_ErrorEx
(1)   24/      48 : 0000 0824           		dc.l MD_ErrorEx
(1)   25/      4C : 0000 0824           		dc.l MD_ErrorEx
(1)   26/      50 : 0000 0824           		dc.l MD_ErrorEx
(1)   27/      54 : 0000 0824           		dc.l MD_ErrorEx
(1)   28/      58 : 0000 0824           		dc.l MD_ErrorEx
(1)   29/      5C : 0000 0824           		dc.l MD_ErrorEx
(1)   30/      60 : 0000 0824           		dc.l MD_ErrorEx
(1)   31/      64 : 0000 0824           		dc.l MD_ErrorTrap
(1)   32/      68 : FFFF F5F0           		dc.l RAM_ExternalJump	; RAM jump for External (JMP xxxx xxxx)
(1)   33/      6C : 0000 0824           		dc.l MD_ErrorTrap
(1)   34/      70 : FFFF F5EA           		dc.l RAM_HBlankJump	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0824           		dc.l MD_ErrorTrap
(1)   36/      78 : FFFF F5E4           		dc.l RAM_VBlankJump	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0824           		dc.l MD_ErrorTrap
(1)   38/      80 : 0000 0824           		dc.l MD_ErrorTrap
(1)   39/      84 : 0000 0824           		dc.l MD_ErrorTrap
(1)   40/      88 : 0000 0824           		dc.l MD_ErrorTrap
(1)   41/      8C : 0000 0824           		dc.l MD_ErrorTrap
(1)   42/      90 : 0000 0824           		dc.l MD_ErrorTrap
(1)   43/      94 : 0000 0824           		dc.l MD_ErrorTrap
(1)   44/      98 : 0000 0824           		dc.l MD_ErrorTrap
(1)   45/      9C : 0000 0824           		dc.l MD_ErrorTrap
(1)   46/      A0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   47/      A4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   48/      A8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   49/      AC : 0000 0824           		dc.l MD_ErrorTrap
(1)   50/      B0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   51/      B4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   52/      B8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   53/      BC : 0000 0824           		dc.l MD_ErrorTrap
(1)   54/      C0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   55/      C4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   56/      C8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   57/      CC : 0000 0824           		dc.l MD_ErrorTrap
(1)   58/      D0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   59/      D4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   60/      D8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   61/      DC : 0000 0824           		dc.l MD_ErrorTrap
(1)   62/      E0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   63/      E4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   64/      E8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   65/      EC : 0000 0824           		dc.l MD_ErrorTrap
(1)   66/      F0 : 0000 0824           		dc.l MD_ErrorTrap
(1)   67/      F4 : 0000 0824           		dc.l MD_ErrorTrap
(1)   68/      F8 : 0000 0824           		dc.l MD_ErrorTrap
(1)   69/      FC : 0000 0824           		dc.l MD_ErrorTrap
(1)   70/     100 : 5345 4741 2033      		dc.b HTAG_SYS_MARS;"SEGA 32X        "
              106 : 3258 2020 2020 
              10C : 2020 2020          
(1)   71/     110 : 2843 2955 5345      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 5220 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_MARS;"Nikona MARS                                     "
              126 : 2053 5550 4552 
              12C : 3332 5820 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b HTAG_NOV_MARS;"Nikona MARS                                     "
              156 : 2033 3258 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 4A36 4D20 2020      		dc.b "J6M             "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 000B 6994           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 5241 F820           		dc.b "RA",$F8,$20
(1)   82/     1B4 : 0020 0001           		dc.l $200001
(1)   83/     1B8 : 0020 01FF           		dc.l $200001+((SET_SRAMSIZE*2)-2)	;$203FFF
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; 32X-cartidge jumps
(1)   90/     200 :                     ; ----------------------------------------------------------------
(1)   91/     200 :                     
(1)   92/     200 : 4EF9 00FF FD00      		jmp	($FFFD00).l			; Hotstart
(1)   93/     206 : 4EF9 0088 0824      		jmp	($880000|MD_ErrBus).l		; Bus error
(1)   94/     20C : 4EF9 0088 0824      		jmp	($880000|MD_ErrAddr).l		; Address error
(1)   95/     212 : 4EF9 0088 0824      		jmp	($880000|MD_ErrIll).l		; ILLEGAL Instruction
(1)   96/     218 : 4EF9 0088 0824      		jmp	($880000|MD_ErrZDiv).l		; Divide by 0
(1)   97/     21E : 4EF9 0088 0824      		jmp	($880000|MD_ErrChk).l		; CHK Instruction
(1)   98/     224 : 4EF9 0088 0824      		jmp	($880000|MD_ErrTrapV).l		; TRAPV Instruction
(1)   99/     22A : 4EF9 0088 0824      		jmp	($880000|MD_ErrPrivl).l		; Privilege violation
(1)  100/     230 : 4EF9 0088 0824      		jmp	($880000|MD_Trace).l		; Trace
(1)  101/     236 : 4EF9 0088 0824      		jmp	($880000|MD_Line1010).l		; Line 1010 Emulator
(1)  102/     23C : 4EF9 0088 0824      		jmp	($880000|MD_Line1111).l		; Line 1111 Emulator
(1)  103/     242 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l		; Error exception
(1)  104/     248 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  105/     24E : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  106/     254 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  107/     25A : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  108/     260 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  109/     266 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  110/     26C : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  111/     272 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  112/     278 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  113/     27E : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  114/     284 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  115/     28A : 4EF9 0088 0824      		jmp	($880000|MD_ErrorEx).l
(1)  116/     290 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  117/     296 : 4EF9 FFFF F5F0      		jmp	(RAM_ExternalJump).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  118/     29C : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  119/     2A2 : 4EF9 FFFF F5EA      		jmp	(RAM_HBlankJump).l		; RAM jump for HBlank (JMP xxxx xxxx)
(1)  120/     2A8 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  121/     2AE : 4EF9 FFFF F5E4      		jmp	(RAM_VBlankJump).l		; RAM jump for VBlank (JMP xxxx xxxx)
(1)  122/     2B4 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  123/     2BA : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  124/     2C0 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  125/     2C6 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  126/     2CC : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  127/     2D2 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  128/     2D8 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  129/     2DE : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  130/     2E4 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  131/     2EA : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  132/     2F0 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  133/     2F6 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  134/     2FC : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  135/     302 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  136/     308 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  137/     30E : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  138/     314 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  139/     31A : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  140/     320 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  141/     326 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  142/     32C : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  143/     332 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  144/     338 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  145/     33E : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  146/     344 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  147/     34A : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  148/     350 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  149/     356 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  150/     35C : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  151/     362 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  152/     368 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  153/     36E : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  154/     374 : 4EF9 0088 0824      		jmp	($880000|MD_ErrorTrap).l
(1)  155/     37A :                     
(1)  156/     37A :                     ; ----------------------------------------------------------------
(1)  157/     37A :                     
(1)  158/     37A :                     		align $3C0
(1)  159/     3C0 : 4D41 5253 204E      		dc.b "MARS NIKONA-SDK "			; Module name
              3C6 : 494B 4F4E 412D 
              3CC : 5344 4B20          
(1)  160/     3D0 : 0000 0000           		dc.l 0					; Version (always 0)
(1)  161/     3D4 : 0000 4C84           		dc.l MARS_RAMCODE			; SH2 RAM-code location (Genesis map) | Set to 0 if using ROM
(1)  162/     3D8 : 0000 0000           		dc.l 0					; Zero again.
(1)  163/     3DC : 0003 6690           		dc.l MARS_RAMCODE_e-MARS_RAMCODE	; RAM-code size (END-START) | Set to 4 if SH2 code points to ROM
(1)  164/     3E0 : 0600 07CC           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 map)
(1)  165/     3E4 : 0600 0E74           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 map)
(1)  166/     3E8 : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR (SH2 map)
(1)  167/     3EC : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR (SH2 map)
(1)  168/     3F0 :                     		binclude "system/mars/data/security.bin"; Securty/Boot code
(1)  169/     800 :                     
(1)  170/     800 :                     ; ====================================================================
(1)  171/     800 :                     ; ----------------------------------------------------------------
(1)  172/     800 :                     ; Entry point, This MUST be located at $800
(1)  173/     800 :                     ;
(1)  174/     800 :                     ; Register setup:
(1)  175/     800 :                     ;
(1)  176/     800 :                     ; d0: %h0000000 rsc000ti
(1)  177/     800 :                     ; 	| h - Cold start / Hot Start (SETS RV=1)
(1)  178/     800 :                     ; 	| r - SDRAM self check pass or error
(1)  179/     800 :                     ; 	| s - Security check pass or error
(1)  180/     800 :                     ; 	| c - Checksum pass or error
(1)  181/     800 :                     ; 	| t - TV mode pass or error
(1)  182/     800 :                     ; 	| i - MARS ID pass or error
(1)  183/     800 :                     ;
(1)  184/     800 :                     ; d1: %m0000000 jdk0vvv
(1)  185/     800 :                     ; 	| m - MARS TV mode
(1)  186/     800 :                     ; 	| j - Country: Japan / Overseas
(1)  187/     800 :                     ; 	| d - MD TV mode
(1)  188/     800 :                     ; 	| k - DISK connected: Yes / No
(1)  189/     800 :                     ; 	| v - Version
(1)  190/     800 :                     ;
(1)  191/     800 :                     ; Carry: "MARS ID" and Self Check result
(1)  192/     800 :                     ; 	| bcc: Test passed
(1)  193/     800 :                     ; 	| bcs: Test failed**
(1)  194/     800 :                     ; ----------------------------------------------------------------
(1)  195/     800 :                     
(1)  196/     800 :                     MARS_Entry:
(1)  197/     800 : 6504                		bcs	MD_MarsError
(1)  198/     802 : 6000 0084           		bra	MD_Init
(1)  199/     806 :                     
(1)  200/     806 :                     ; ====================================================================
(1)  201/     806 :                     ; ----------------------------------------------------------------
(1)  202/     806 :                     ; If 32X is not detected
(1)  203/     806 :                     ;
(1)  204/     806 :                     ; We MIGHT here if no error happened.
(1)  205/     806 :                     ; ----------------------------------------------------------------
(1)  206/     806 :                     
(1)  207/     806 :                     MD_MarsError:
(1)  208/     806 : 0800 0005           		btst	#5,d0			; Checksum is already good?
(1)  209/     80A : 677C                		beq	MD_Init			; the get out of here.
(1)  210/     80C : 46FC 2700           		move.w	#$2700,sr		; Disable interrupts
(1)  211/     810 : 23FC C000 0000      		move.l	#$C0000000,(vdp_ctrl).l	; VDP: Point to Color 0
              816 : 00C0 0004          
(1)  212/     81A : 33FC 0E00 00C0      		move.w	#$0E00,(vdp_data).l	; BLUE screen
              820 : 0000             
(1)  213/     822 : 60FE                		bra.s	*			; Infinite loop.
(1)  214/     824 :                     
(1)  215/     824 :                     ; ====================================================================
(1)  216/     824 :                     ; ----------------------------------------------------------------
(1)  217/     824 :                     ; 68k's Error handlers
(1)  218/     824 :                     ;
(1)  219/     824 :                     ; HBlank and VBlank jump to RAM
(1)  220/     824 :                     ; ----------------------------------------------------------------
(1)  221/     824 :                     
(1)  222/     824 :                     MD_ErrBus:		; Bus error
(1)  223/     824 :                     MD_ErrAddr:		; Address error
(1)  224/     824 :                     MD_ErrIll:		; ILLEGAL Instruction
(1)  225/     824 :                     MD_ErrZDiv:		; Divide by 0
(1)  226/     824 :                     MD_ErrChk:		; CHK Instruction
(1)  227/     824 :                     MD_ErrTrapV:		; TRAPV Instruction
(1)  228/     824 :                     MD_ErrPrivl:		; Privilege violation
(1)  229/     824 :                     MD_Trace:		; Trace
(1)  230/     824 :                     MD_Line1010:		; Line 1010 Emulator
(1)  231/     824 :                     MD_Line1111:		; Line 1111 Emulator
(1)  232/     824 :                     MD_ErrorEx:		; Error exception
(1)  233/     824 :                     MD_ErrorTrap:
(1)  234/     824 : 46FC 2700           		move.w	#$2700,sr			; Disable interrupts
(1)  235/     828 : 23FC C000 0000      		move.l	#$C0000000,(vdp_ctrl).l		; RED screen
              82E : 00C0 0004          
(1)  236/     832 : 33FC 000E 00C0      		move.w	#$000E,(vdp_data).l
              838 : 0000             
(1)  237/     83A : 60FE                		bra.s	*
(1)  238/     83C :                     
(1)  239/     83C :                     ; ====================================================================
(1)  240/     83C :                     ; ----------------------------------------------------------------
(1)  241/     83C :                     ; HOT START RAM-CODE
(1)  242/     83C :                     ; ----------------------------------------------------------------
(1)  243/     83C :                     
(1)  244/     83C :                     MD_HotStRam:
(1)  245/     83C : 46FC 2700           		move.w	#$2700,sr
(1)  246/     840 : 4FF8 FD00           		lea	(RAM_Stack),sp		; HW: Set STACK manually, Pressing RESET moves it to 0
(1)  247/     844 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)  248/     84A : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  249/     850 :                     	; ------------------------------------------------
(1)  250/     850 :                     	; If the 32X get overloaded with interrupts
(1)  251/     850 :                     	; it shuts itself OFF on reset, The SVDP will
(1)  252/     850 :                     	; remain visible though.
(1)  253/     850 :                     	; ------------------------------------------------
(1)  254/     850 : 082D 0000 0001      		btst	#0,adapter+1(a5)	; 32X STILL enabled?
(1)  255/     856 : 661E                		bne.s	MD_MarsStartOk
(1)  256/     858 : 1B7C 0001 0001      		move.b	#%01,adapter+1(a5)	; Re-enable and Reset SH2
(1)  257/     85E :                     MD_MarsRestart:
(1)  258/     85E : 4BF9 00A1 0000      		lea	($A10000).l,a5
(1)  259/     864 : 287C FFFF FFC0      		move.l	#-64,a4
(1)  260/     86A : 3E3C 0F3C           		move.w	#3900,d7
(1)  261/     86E : 43F9 0088 06E4      		lea	($880000+$6E4).l,a1	; Do the boot sequence again
(1)  262/     874 : 4ED1                		jmp	(a1)			; starting from ?res_wait (icd_mars.prg)
(1)  263/     876 :                     MD_MarsStartOk:
(1)  264/     876 : 3B7C 0000 0006      		move.w	#%000,dreqctl(a5)	; Reset RV
(1)  265/     87C : 3B7C 0000 0004      		move.w	#0,bankset(a5)		; Set $900000 block Bank 0
(1)  266/     882 :                     ; .wait_mstr:	cmp.l	#"M_OK",comm0(a5)
(1)  267/     882 :                     ; 		bne.s	.wait_mstr
(1)  268/     882 :                     ; .wait_slv:	cmp.l	#"S_OK",comm4(a5)
(1)  269/     882 :                     ; 		bne.s	.wait_slv
(1)  270/     882 : 4EF9 0088 08B4      		jmp	($880000|MD_HotStart).l	; Jump to Hot start as normal
(1)  271/     888 :                     MD_HotStRam_e:
(1)  272/     888 :                     		align 2
(1)  273/     888 :                     
(1)  274/     888 :                     ; ====================================================================
(1)  275/     888 :                     ; ----------------------------------------------------------------
(1)  276/     888 :                     ; COLD START
(1)  277/     888 :                     ; ----------------------------------------------------------------
(1)  278/     888 :                     
(1)  279/     888 :                     MD_Init:
(1)  280/     888 : 46FC 2700           		move.w	#$2700,sr
(1)  281/     88C : 41FA FFAE           		lea	MD_HotStRam(pc),a0		; Copy HotStart RAM jump
(1)  282/     890 : 43F8 FD00           		lea	($FFFFFD00).w,a1		; <-- RAM section used in SegaCD
(1)  283/     894 : 303C 0025           		move.w	#((MD_HotStRam_e-MD_HotStRam)/2)-1,d0
(1)  284/     898 :                     .copy_code:
(1)  285/     898 : 32D8                		move.w	(a0)+,(a1)+
(1)  286/     89A : 51C8 FFFC           		dbf	d0,.copy_code
(1)  287/     89E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)  288/     8A4 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)  289/     8AA : 3E2E 0004           .wait_dma:	move.w	4(a6),d7			; Check if DMA is active.
(1)  290/     8AE : 0807 0001           		btst	#1,d7
(1)  291/     8B2 : 66F6                		bne.s	.wait_dma
(1)  292/     8B4 :                     
(1)  293/     8B4 :                     ; ====================================================================
(1)  294/     8B4 :                     ; ----------------------------------------------------------------
(1)  295/     8B4 :                     ; COLD Init
(1)  296/     8B4 :                     ; ----------------------------------------------------------------
(1)  297/     8B4 :                     
(1)  298/     8B4 :                     MD_HotStart:
(1)  299/     8B4 : 41F9 FFFF 0000      		lea	($FFFF0000).l,a0		; Clean our "work" RAM
(1)  300/     8BA : 223C FFFF F5FE      		move.l	#sizeof_mdram,d1
(1)  301/     8C0 : 7000                		moveq	#0,d0
(1)  302/     8C2 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  303/     8C4 : B1C1                		cmp.l	d1,a0
(1)  304/     8C6 : 65FA                		bcs.s	.loop_ram
(1)  305/     8C8 : 2D7C 8004 8104      		move.l	#$80048104,4(a6)		; Reset these VDP registers
              8CE : 0004             
(1)  306/     8D0 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)		; Clear palette
              8D6 : 0004             
(1)  307/     8D8 : 7E3F                		moveq	#64-1,d7
(1)  308/     8DA : 7C00                		moveq	#0,d6
(1)  309/     8DC : 3C86                .palclear:	move.w	d6,(a6)
(1)  310/     8DE : 51CF FFFC           		dbf	d7,.palclear
(1)  311/     8E2 : 7000                		moveq	#0,d0				; Clear both Master and Slave comm's
(1)  312/     8E4 : 2B40 002C           		move.l	d0,comm12(a5)
(1)  313/     8E8 :                     ; 	if EMU=0
(1)  314/     8E8 : 3E3C 01FF           		move.w	#$1FF,d7			; Delay until SH2 gets first.
(1)  315/     8EC :                     .wait_sh2:
(1)  316/     8EC : 3C3C 00FF           		move.w	#$FF,d6
(1)  317/     8F0 : 51CE FFFE           		dbf	d6,*
(1)  318/     8F4 : 51CF FFF6           		dbf	d7,.wait_sh2
(1)  319/     8F8 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              8FE : 1100             
(1)  320/     900 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              906 : 1200             
(1)  321/     908 :                     .wait:
(1)  322/     908 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              90E : 1100             
(1)  323/     910 : 66F6                		bne.s	.wait
(1)  324/     912 : 4CF9 7FFF 00FF      		movem.l	($FF0000).l,d0-a6		; Clear all registers using zeros from RAM
              918 : 0000             
(1)  325/     91A :                     
     100/     91A : 41F9 0088 094E      		lea	($880000|Md_SysCode),a0			; Copy SYSTEM routines
     101/     920 : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     102/     926 : 303C 23AD           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     103/     92A :                     .copy_code:
     104/     92A : 12D8                		move.b	(a0)+,(a1)+
     105/     92C : 51C8 FFFC           		dbf	d0,.copy_code
     106/     930 : 4EB9 FFFF 19D2      		jsr	(Sound_init).l				; Init Sound driver (FIRST)
     107/     936 : 4EB9 FFFF 0270      		jsr	(Video_init).l				;  ''  Video
     108/     93C : 4EB9 FFFF 185C      		jsr	(System_Init).l				;  ''  System
     109/     942 : 31FC 0007 F5F8      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     110/     948 : 4EF9 FFFF 22FA      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     111/     94E :                     
     112/     94E :                     ; ---------------------------------------------
     113/     94E :                     ; SEGA CD and CD32X
     114/     94E :                     ; ---------------------------------------------
     115/     94E :                     
     176/     94E :                     
     177/     94E :                     ; ====================================================================
     178/     94E :                     ; --------------------------------------------------------
     179/     94E :                     ; SYSTEM routines
     180/     94E :                     ;
     181/     94E :                     ; MD/PICO:  Normal ROM locations
     182/     94E :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     183/     94E :                     ;           with the SH2's view of ROM
     184/     94E :                     ; CD/CD32X: Loaded into RAM for safe access.
     185/     94E :                     ; --------------------------------------------------------
     186/     94E :                     
     188/     94E :                     Md_SysCode:
     189/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     191/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     192/FFFFFFFFFFFF0000 :                     
     193/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - WAVE playback at 16000hz (base) for
(1)   16/FFFFFFFFFFFF0000 :                     ;   | all sample-based channels:
(1)   17/FFFFFFFFFFFF0000 :                     ;   | DAC, PCM and PWM
(1)   18/FFFFFFFFFFFF0000 :                     ;
(1)   19/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection for DAC
(1)   20/FFFFFFFFFFFF0000 :                     ;   | This keeps the wave playback in a
(1)   21/FFFFFFFFFFFF0000 :                     ;   | decent quality while doing any DMA
(1)   22/FFFFFFFFFFFF0000 :                     ;   | task in the 68k side.
(1)   23/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   24/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   25/FFFFFFFFFFFF0000 :                     ;
(1)   26/FFFFFFFFFFFF0000 :                     ; * Notes:
(1)   27/FFFFFFFFFFFF0000 :                     ; This driver uses the area $FFFF00-$FFFFFF
(1)   28/FFFFFFFFFFFF0000 :                     ; The Z80 writes a flag directly to RAM for
(1)   29/FFFFFFFFFFFF0000 :                     ; a workaround to bypass a data-reading
(1)   30/FFFFFFFFFFFF0000 :                     ; hardware limitation. (see Sound_Update)
(1)   31/FFFFFFFFFFFF0000 :                     ;
(1)   32/FFFFFFFFFFFF0000 :                     ; CURRENTLY THIS CAN ONLY BE USED HERE IN NikonaSDK
(1)   33/FFFFFFFFFFFF0000 :                     ; BECAUSE OF CROSS-REFERENCING LABELS BETWEEN THE
(1)   34/FFFFFFFFFFFF0000 :                     ; Z80 and 68K.
(1)   35/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   38/FFFFFFFFFFFF0000 :                     ; MACROS
(1)   39/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   40/FFFFFFFFFFFF0000 :                     
(1)   41/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   42/FFFFFFFFFFFF0000 :                     ; gSmplData - Include .WAV sample data, applies to
(1)   43/FFFFFFFFFFFF0000 :                     ;             DAC, PCM* and PWM
(1)   44/FFFFFFFFFFFF0000 :                     ;
(1)   45/FFFFFFFFFFFF0000 :                     ;             * No need to convert data, Sub-CPU
(1)   46/FFFFFFFFFFFF0000 :                     ;             converts the data manually.
(1)   47/FFFFFFFFFFFF0000 :                     ;
(1)   48/FFFFFFFFFFFF0000 :                     ; labl | 24-bit Pointer, depending of the
(1)   49/FFFFFFFFFFFF0000 :                     ;        current CPU
(1)   50/FFFFFFFFFFFF0000 :                     ; file | File path for the WAV sample file
(1)   51/FFFFFFFFFFFF0000 :                     ; loop | Loop start point if sample loop is enabled
(1)   52/FFFFFFFFFFFF0000 :                     ;        Set to 0 if not using loop.
(1)   53/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   56/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   57/FFFFFFFFFFFF0000 :                     		align 4
(1)   58/FFFFFFFFFFFF0000 :                     	endif
(1)   59/FFFFFFFFFFFF0000 :                     labl	label *
(1)   60/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   61/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   62/FFFFFFFFFFFF0000 :                     labl_s:
(1)   63/FFFFFFFFFFFF0000 :                     	binclude file,$2C
(1)   64/FFFFFFFFFFFF0000 :                     labl_e:
(1)   65/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   66/FFFFFFFFFFFF0000 :                     		align 4
(1)   67/FFFFFFFFFFFF0000 :                     	endif
(1)   68/FFFFFFFFFFFF0000 :                     	endm
(1)   69/FFFFFFFFFFFF0000 :                     
(1)   70/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   71/FFFFFFFFFFFF0000 :                     ; gemaList - Make a tracklist label
(1)   72/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   73/FFFFFFFFFFFF0000 :                     
(1)   74/FFFFFFFFFFFF0000 :                     gemaList macro thislbl
(1)   75/FFFFFFFFFFFF0000 :                     	align 2
(1)   76/FFFFFFFFFFFF0000 :                     thislbl	label *
(1)   77/FFFFFFFFFFFF0000 :                     GLBL_GEMABASE := *
(1)   78/FFFFFFFFFFFF0000 :                     	endm
(1)   79/FFFFFFFFFFFF0000 :                     
(1)   80/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   81/FFFFFFFFFFFF0000 :                     ; gemaTrk - Sequence entry on Gema_MasterList
(1)   82/FFFFFFFFFFFF0000 :                     ;
(1)   83/FFFFFFFFFFFF0000 :                     ; enblt | Disable/Enable global beats on this Sequence
(1)   84/FFFFFFFFFFFF0000 :                     ;         0 - Don't Use beats, 1 - Use beats
(1)   85/FFFFFFFFFFFF0000 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   86/FFFFFFFFFFFF0000 :                     ;   loc | Direct location of the sequence data
(1)   87/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   88/FFFFFFFFFFFF0000 :                     
(1)   89/FFFFFFFFFFFF0000 :                     gemaTrk macro enbltp,ticks,loc
(1)   90/FFFFFFFFFFFF0000 :                     	dc.l ((enbltp&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   91/FFFFFFFFFFFF0000 :                     	endm
(1)   92/FFFFFFFFFFFF0000 :                     
(1)   93/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   94/FFFFFFFFFFFF0000 :                     ; gemaHead - Track pointers to their respective data
(1)   95/FFFFFFFFFFFF0000 :                     ;
(1)   96/FFFFFFFFFFFF0000 :                     ; blk_data  | Block data pointer
(1)   97/FFFFFFFFFFFF0000 :                     ; patt_data | Pattern data pointer
(1)   98/FFFFFFFFFFFF0000 :                     ; ins_list  | instrument list pointer
(1)   99/FFFFFFFFFFFF0000 :                     ; num_chnls | Number of channels used in the track
(1)  100/FFFFFFFFFFFF0000 :                     ;             If 0: Read ALL channels
(1)  101/FFFFFFFFFFFF0000 :                     ;                   (NOT recommended, UNSTABLE)
(1)  102/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  103/FFFFFFFFFFFF0000 :                     
(1)  104/FFFFFFFFFFFF0000 :                     gemaHead macro blk,pat,ins,num
(1)  105/FFFFFFFFFFFF0000 :                     	dc.w num
(1)  106/FFFFFFFFFFFF0000 :                     	dc.l blk
(1)  107/FFFFFFFFFFFF0000 :                     	dc.l pat
(1)  108/FFFFFFFFFFFF0000 :                     	dc.l ins
(1)  109/FFFFFFFFFFFF0000 :                     	endm
(1)  110/FFFFFFFFFFFF0000 :                     
(1)  111/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)  112/FFFFFFFFFFFF0000 :                     ; Instrument macros, instrument_num-1
(1)  113/FFFFFFFFFFFF0000 :                     ; (ex. Instrument 1 is 0 here)
(1)  114/FFFFFFFFFFFF0000 :                     ;
(1)  115/FFFFFFFFFFFF0000 :                     ; NOTE: UNUSED instruments MUST use gInsNull or
(1)  116/FFFFFFFFFFFF0000 :                     ; the Z80 gets unexpected results and probably crash.
(1)  117/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)  118/FFFFFFFFFFFF0000 :                     
(1)  119/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  120/FFFFFFFFFFFF0000 :                     ; gInsNull - Null instrument
(1)  121/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  122/FFFFFFFFFFFF0000 :                     
(1)  123/FFFFFFFFFFFF0000 :                     gInsNull macro
(1)  124/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  125/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  126/FFFFFFFFFFFF0000 :                     	endm
(1)  127/FFFFFFFFFFFF0000 :                     
(1)  128/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  129/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG tone
(1)  130/FFFFFFFFFFFF0000 :                     ;
(1)  131/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  132/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  133/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  134/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  135/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  136/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  137/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  138/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  139/FFFFFFFFFFFF0000 :                     
(1)  140/FFFFFFFFFFFF0000 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  141/FFFFFFFFFFFF0000 :                     	dc.b $80,pitch,alv,atk
(1)  142/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  143/FFFFFFFFFFFF0000 :                     	endm
(1)  144/FFFFFFFFFFFF0000 :                     
(1)  145/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  146/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG noise
(1)  147/FFFFFFFFFFFF0000 :                     ;
(1)  148/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  149/FFFFFFFFFFFF0000 :                     ;         If using Tone3: set to 47 for a full noise
(1)  150/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  151/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  152/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  153/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  154/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  155/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  156/FFFFFFFFFFFF0000 :                     ; mode  | Noise mode: %tmm
(1)  157/FFFFFFFFFFFF0000 :                     ;        t - Bass(0)|Noise(1)
(1)  158/FFFFFFFFFFFF0000 :                     ;        m - Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)  159/FFFFFFFFFFFF0000 :                     ;        Using Tone3 will disable PSG Channel 3.
(1)  160/FFFFFFFFFFFF0000 :                     ;
(1)  161/FFFFFFFFFFFF0000 :                     ; Note:
(1)  162/FFFFFFFFFFFF0000 :                     ; Tone3 WILL silence PSG3 as it steals the
(1)  163/FFFFFFFFFFFF0000 :                     ; frequency from it, chip limitation.
(1)  164/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  165/FFFFFFFFFFFF0000 :                     
(1)  166/FFFFFFFFFFFF0000 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  167/FFFFFFFFFFFF0000 :                     	dc.b $90|mode,pitch,alv,atk
(1)  168/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  169/FFFFFFFFFFFF0000 :                     	endm
(1)  170/FFFFFFFFFFFF0000 :                     
(1)  171/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  172/FFFFFFFFFFFF0000 :                     ; gInsFm - FM Normal instrument/patch
(1)  173/FFFFFFFFFFFF0000 :                     ;
(1)  174/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  175/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  176/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  177/FFFFFFFFFFFF0000 :                     
(1)  178/FFFFFFFFFFFF0000 :                     gInsFm macro pitch,fmins
(1)  179/FFFFFFFFFFFF0000 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  180/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  181/FFFFFFFFFFFF0000 :                     	endm
(1)  182/FFFFFFFFFFFF0000 :                     
(1)  183/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  184/FFFFFFFFFFFF0000 :                     ; gInsFm - FM3 Special instrument/patch
(1)  185/FFFFFFFFFFFF0000 :                     ;
(1)  186/FFFFFFFFFFFF0000 :                     ; pitch | UNUSED, set to 0
(1)  187/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  188/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  189/FFFFFFFFFFFF0000 :                     
(1)  190/FFFFFFFFFFFF0000 :                     gInsFm3	macro pitch,fmins
(1)  191/FFFFFFFFFFFF0000 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  192/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  193/FFFFFFFFFFFF0000 :                     	endm
(1)  194/FFFFFFFFFFFF0000 :                     
(1)  195/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  196/FFFFFFFFFFFF0000 :                     ; gInsDac - DAC instrument
(1)  197/FFFFFFFFFFFF0000 :                     ;
(1)  198/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  199/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  200/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  201/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  202/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  203/FFFFFFFFFFFF0000 :                     
(1)  204/FFFFFFFFFFFF0000 :                     gInsDac	macro pitch,start,flags
(1)  205/FFFFFFFFFFFF0000 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  206/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  207/FFFFFFFFFFFF0000 :                     	endm
(1)  208/FFFFFFFFFFFF0000 :                     
(1)  209/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  210/FFFFFFFFFFFF0000 :                     ; gInsPcm - Sega CD PCM Sample
(1)  211/FFFFFFFFFFFF0000 :                     ;
(1)  212/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  213/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  214/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  215/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  216/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  217/FFFFFFFFFFFF0000 :                     
(1)  218/FFFFFFFFFFFF0000 :                     gInsPcm	macro pitch,start,flags
(1)  219/FFFFFFFFFFFF0000 :                      if MCD|MARSCD
(1)  220/FFFFFFFFFFFF0000 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  221/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  222/FFFFFFFFFFFF0000 :                      else
(1)  223/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  224/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  225/FFFFFFFFFFFF0000 :                      endif
(1)  226/FFFFFFFFFFFF0000 :                     	endm
(1)  227/FFFFFFFFFFFF0000 :                     
(1)  228/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  229/FFFFFFFFFFFF0000 :                     ; gInsPwm - Sega 32X PWM Sample
(1)  230/FFFFFFFFFFFF0000 :                     ;
(1)  231/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  232/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  233/FFFFFFFFFFFF0000 :                     ; flags | Flags: %000000sl
(1)  234/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  235/FFFFFFFFFFFF0000 :                     ;         s - Sample data is in Stereo
(1)  236/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  237/FFFFFFFFFFFF0000 :                     
(1)  238/FFFFFFFFFFFF0000 :                     gInsPwm	macro pitch,start,flags
(1)  239/FFFFFFFFFFFF0000 :                      if MARS|MARSCD
(1)  240/FFFFFFFFFFFF0000 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  241/FFFFFFFFFFFF0000 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  242/FFFFFFFFFFFF0000 :                      else
(1)  243/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  244/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  245/FFFFFFFFFFFF0000 :                      endif
(1)  246/FFFFFFFFFFFF0000 :                     	endm
(1)  247/FFFFFFFFFFFF0000 :                     
(1)  248/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)  249/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  250/FFFFFFFFFFFF0000 :                     ; Variables
(1)  251/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  252/FFFFFFFFFFFF0000 :                     
(1)  253/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)  254/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)  255/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)  256/FFFFFFFFFFFF0000 :                     
(1)  257/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)  258/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)  259/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)  260/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)  261/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)  262/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)  263/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)  264/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)  265/FFFFFFFFFFFF0000 :                     
(1)  266/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)  267/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  268/FFFFFFFFFFFF0000 :                     ; Labels
(1)  269/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  270/FFFFFFFFFFFF0000 :                     
(1)  271/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_SoundBuff	; transferRom flag (ALSO for Z80)
(1)  272/FFFFFFFFFFFF0000 :                     
(1)  273/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)  274/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  275/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)  276/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)  277/FFFFFFFFFFFF0000 :                     
(1)  278/FFFFFFFFFFFF0000 :                     gemaInit:
(1)  279/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)  283/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)  284/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)  285/FFFFFFFFFFFF0014 :                     .wait:
(1)  286/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)  287/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)  288/FFFFFFFFFFFF001E : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)  289/FFFFFFFFFFFF0024 : 2049                		move.l	a1,a0
(1)  290/FFFFFFFFFFFF0026 : 323C 1FFF           		move.w	#$1FFF,d1
(1)  291/FFFFFFFFFFFF002A : 7000                		moveq	#0,d0
(1)  292/FFFFFFFFFFFF002C :                     .cleanup:
(1)  293/FFFFFFFFFFFF002C : 10C0                		move.b	d0,(a0)+
(1)  294/FFFFFFFFFFFF002E : 51C9 FFFC           		dbf	d1,.cleanup
(1)  295/FFFFFFFFFFFF0032 : 41F9 0088 2CFC      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)  296/FFFFFFFFFFFF0038 : 303C 1F85           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)  297/FFFFFFFFFFFF003C :                     .copy:
(1)  298/FFFFFFFFFFFF003C : 12D8                		move.b	(a0)+,(a1)+
(1)  299/FFFFFFFFFFFF003E : 51C8 FFFC           		dbf	d0,.copy
(1)  300/FFFFFFFFFFFF0042 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset
         FFFFFFFFFFFF0048 : 1200             
(1)  301/FFFFFFFFFFFF004A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)  302/FFFFFFFFFFFF004E : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Write PAL mode flag from here
(1)  303/FFFFFFFFFFFF0054 : 0800 0006           		btst	#6,d0
(1)  304/FFFFFFFFFFFF0058 : 6708                		beq.s	.not_pal
(1)  305/FFFFFFFFFFFF005A : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
         FFFFFFFFFFFF0060 : 003E             
(1)  306/FFFFFFFFFFFF0062 :                     .not_pal:
(1)  307/FFFFFFFFFFFF0062 : 4E71                		nop
(1)  308/FFFFFFFFFFFF0064 : 4E71                		nop
(1)  309/FFFFFFFFFFFF0066 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF006C : 1200             
(1)  310/FFFFFFFFFFFF006E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0074 : 1100             
(1)  312/FFFFFFFFFFFF0076 :                     
(1)  313/FFFFFFFFFFFF0076 :                     ; ====================================================================
(1)  314/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  315/FFFFFFFFFFFF0076 :                     ; gemaReset
(1)  316/FFFFFFFFFFFF0076 :                     ;
(1)  317/FFFFFFFFFFFF0076 :                     ; Reset sound to default sequence list
(1)  318/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  319/FFFFFFFFFFFF0076 :                     
(1)  320/FFFFFFFFFFFF0076 :                     gemaReset:
(1)  321/FFFFFFFFFFFF0076 : 41F9 0093 E054      		lea	(MainGemaSeqList),a0
(1)  322/FFFFFFFFFFFF007C : 6100 013C           		bsr	gemaSetMasterList
(1)  323/FFFFFFFFFFFF0080 : 7E05                		moveq	#6-1,d7				; Make sure it finishes.
(1)  324/FFFFFFFFFFFF0082 : 51CF FFFE           		dbf	d7,*
(1)  325/FFFFFFFFFFFF0086 : 4E75                		rts
(1)  326/FFFFFFFFFFFF0088 :                     
(1)  327/FFFFFFFFFFFF0088 :                     ; ====================================================================
(1)  328/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  329/FFFFFFFFFFFF0088 :                     ; gemaUpdate
(1)  330/FFFFFFFFFFFF0088 :                     ;
(1)  331/FFFFFFFFFFFF0088 :                     ; Call this during DISPLAY ONLY and during your VBlank wait
(1)  332/FFFFFFFFFFFF0088 :                     ; (already called by System_Render)
(1)  333/FFFFFFFFFFFF0088 :                     ;
(1)  334/FFFFFFFFFFFF0088 :                     ; RAM-to-Z80 transferRom workaround:
(1)  335/FFFFFFFFFFFF0088 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  336/FFFFFFFFFFFF0088 :                     ; see it), The 68k CPU manually writes the RAM bytes from
(1)  337/FFFFFFFFFFFF0088 :                     ; here to the Z80's RAM
(1)  338/FFFFFFFFFFFF0088 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  339/FFFFFFFFFFFF0088 :                     ; (and instruments) in case you use the ASIC-Stamp scaling/
(1)  340/FFFFFFFFFFFF0088 :                     ; rotation.
(1)  341/FFFFFFFFFFFF0088 :                     ;
(1)  342/FFFFFFFFFFFF0088 :                     ; SCD/CD32X:
(1)  343/FFFFFFFFFFFF0088 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  344/FFFFFFFFFFFF0088 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  345/FFFFFFFFFFFF0088 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  346/FFFFFFFFFFFF0088 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set for
(1)  347/FFFFFFFFFFFF0088 :                     ;   reading from there
(1)  348/FFFFFFFFFFFF0088 :                     ;
(1)  349/FFFFFFFFFFFF0088 :                     ; Sega Pico:
(1)  350/FFFFFFFFFFFF0088 :                     ; - TODO The entire Sound Driver will be here, translated from
(1)  351/FFFFFFFFFFFF0088 :                     ;   Z80 to 68k.
(1)  352/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  353/FFFFFFFFFFFF0088 :                     
(1)  354/FFFFFFFFFFFF0088 :                     gemaUpdate:
(1)  358/FFFFFFFFFFFF0088 :                     	; ------------------------------------------------
(1)  359/FFFFFFFFFFFF0088 :                     	; If transferRom wants to read from 68k RAM
(1)  360/FFFFFFFFFFFF0088 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w		; Z80 WROTE the flag?
(1)  361/FFFFFFFFFFFF008C : 674C                		beq.s	.no_task
(1)  362/FFFFFFFFFFFF008E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Clear here
(1)  363/FFFFFFFFFFFF0092 : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  364/FFFFFFFFFFFF0096 : 7E00                		moveq	#0,d7
(1)  365/FFFFFFFFFFFF0098 : 6142                		bsr	sndLockZ80
(1)  366/FFFFFFFFFFFF009A : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Size != 0?
(1)  367/FFFFFFFFFFFF00A0 : 6732                		beq.s	.no_size
(1)  368/FFFFFFFFFFFF00A2 : 5347                		subq.w	#1,d7
(1)  369/FFFFFFFFFFFF00A4 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  370/FFFFFFFFFFFF00AA : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  371/FFFFFFFFFFFF00B0 : 1C26                		move.b	-(a6),d6			; d6 - Source
(1)  372/FFFFFFFFFFFF00B2 : 4846                		swap	d6
(1)  373/FFFFFFFFFFFF00B4 : 1C26                		move.b	-(a6),d6
(1)  374/FFFFFFFFFFFF00B6 : E14E                		lsl.w	#8,d6
(1)  375/FFFFFFFFFFFF00B8 : 1C26                		move.b	-(a6),d6
(1)  376/FFFFFFFFFFFF00BA : 7A00                		moveq	#0,d5
(1)  377/FFFFFFFFFFFF00BC : 1A26                		move.b	-(a6),d5			; d5 - Dest
(1)  378/FFFFFFFFFFFF00BE : E14D                		lsl.w	#8,d5
(1)  379/FFFFFFFFFFFF00C0 : 1A26                		move.b	-(a6),d5
(1)  380/FFFFFFFFFFFF00C2 : DBC5                		add.l	d5,a5
(1)  381/FFFFFFFFFFFF00C4 : 2846                		move.l	d6,a4
(1)  382/FFFFFFFFFFFF00C6 :                     .copy_bytes:
(1)  383/FFFFFFFFFFFF00C6 : 1ADC                		move.b	(a4)+,(a5)+
(1)  384/FFFFFFFFFFFF00C8 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  385/FFFFFFFFFFFF00CC : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; Clear LEN, breaks Z80 loop
         FFFFFFFFFFFF00D2 : 0030             
(1)  386/FFFFFFFFFFFF00D4 :                     .no_size:
(1)  387/FFFFFFFFFFFF00D4 : 611A                		bsr	sndUnlockZ80
(1)  388/FFFFFFFFFFFF00D6 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  389/FFFFFFFFFFFF00DA :                     .no_task:
(1)  391/FFFFFFFFFFFF00DA : 4E75                		rts
(1)  392/FFFFFFFFFFFF00DC :                     
(1)  393/FFFFFFFFFFFF00DC :                     ; ====================================================================
(1)  394/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  395/FFFFFFFFFFFF00DC :                     ; sndLockZ80
(1)  396/FFFFFFFFFFFF00DC :                     ;
(1)  397/FFFFFFFFFFFF00DC :                     ; Locks Z80, unlocks bus.
(1)  398/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  399/FFFFFFFFFFFF00DC :                     
(1)  400/FFFFFFFFFFFF00DC :                     sndLockZ80:
(1)  402/FFFFFFFFFFFF00DC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00E2 : 1100             
(1)  403/FFFFFFFFFFFF00E4 :                     .wait:
(1)  404/FFFFFFFFFFFF00E4 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00EA : 1100             
(1)  405/FFFFFFFFFFFF00EC : 66F6                		bne.s	.wait
(1)  407/FFFFFFFFFFFF00EE : 4E75                		rts
(1)  408/FFFFFFFFFFFF00F0 :                     
(1)  409/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  410/FFFFFFFFFFFF00F0 :                     ; sndUnlockZ80
(1)  411/FFFFFFFFFFFF00F0 :                     ;
(1)  412/FFFFFFFFFFFF00F0 :                     ; Unlocks Z80, locks bus.
(1)  413/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  414/FFFFFFFFFFFF00F0 :                     
(1)  415/FFFFFFFFFFFF00F0 :                     sndUnlockZ80:
(1)  417/FFFFFFFFFFFF00F0 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00F6 : 1100             
(1)  419/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  420/FFFFFFFFFFFF00FA :                     
(1)  421/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  422/FFFFFFFFFFFF00FA :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  423/FFFFFFFFFFFF00FA :                     ;
(1)  424/FFFFFFFFFFFF00FA :                     ; d6 - commFifo index
(1)  425/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  426/FFFFFFFFFFFF00FA :                     
(1)  427/FFFFFFFFFFFF00FA :                     sndReq_Enter:
(1)  428/FFFFFFFFFFFF00FA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  430/FFFFFFFFFFFF00FE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF0104 : 1100             
(1)  432/FFFFFFFFFFFF0106 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  433/FFFFFFFFFFFF010A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  434/FFFFFFFFFFFF010E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  435/FFFFFFFFFFFF0112 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  436/FFFFFFFFFFFF0118 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  437/FFFFFFFFFFFF011E :                     .wait:
(1)  439/FFFFFFFFFFFF011E : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0124 : 1100             
(1)  440/FFFFFFFFFFFF0126 : 66F6                		bne.s	.wait
(1)  442/FFFFFFFFFFFF0128 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  443/FFFFFFFFFFFF012A : 4886                		ext.w	d6				; extend to 16 bits
(1)  444/FFFFFFFFFFFF012C : 4E75                		rts
(1)  445/FFFFFFFFFFFF012E :                     ; JUMP ONLY
(1)  446/FFFFFFFFFFFF012E :                     sndReq_Exit:
(1)  448/FFFFFFFFFFFF012E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0134 : 1100             
(1)  450/FFFFFFFFFFFF0136 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  451/FFFFFFFFFFFF013A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  452/FFFFFFFFFFFF013E : DEFC 0008           		adda	#8,sp
(1)  453/FFFFFFFFFFFF0142 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  454/FFFFFFFFFFFF0146 : 4E75                		rts
(1)  455/FFFFFFFFFFFF0148 :                     
(1)  456/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  457/FFFFFFFFFFFF0148 :                     ; Send request id and arguments
(1)  458/FFFFFFFFFFFF0148 :                     ;
(1)  459/FFFFFFFFFFFF0148 :                     ; Input:
(1)  460/FFFFFFFFFFFF0148 :                     ; d7 - byte to write
(1)  461/FFFFFFFFFFFF0148 :                     ; d6 - index pointer
(1)  462/FFFFFFFFFFFF0148 :                     ; a5 - commZWrite, update index
(1)  463/FFFFFFFFFFFF0148 :                     ; a6 - commZfifo command list
(1)  464/FFFFFFFFFFFF0148 :                     ;
(1)  465/FFFFFFFFFFFF0148 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  466/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  467/FFFFFFFFFFFF0148 :                     
(1)  468/FFFFFFFFFFFF0148 :                     sndReq_scmd:
(1)  469/FFFFFFFFFFFF0148 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  470/FFFFFFFFFFFF014E : 5206                		addq.b	#1,d6				; next fifo pos
(1)  471/FFFFFFFFFFFF0150 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  472/FFFFFFFFFFFF0154 : 600C                		bra.s	sndReq_sbyte
(1)  473/FFFFFFFFFFFF0156 :                     sndReq_slong:
(1)  474/FFFFFFFFFFFF0156 : 610A                		bsr	sndReq_sbyte
(1)  475/FFFFFFFFFFFF0158 : E09F                		ror.l	#8,d7
(1)  476/FFFFFFFFFFFF015A :                     sndReq_saddr:	; 24-bit address
(1)  477/FFFFFFFFFFFF015A : 6106                		bsr	sndReq_sbyte
(1)  478/FFFFFFFFFFFF015C : E09F                		ror.l	#8,d7
(1)  479/FFFFFFFFFFFF015E :                     sndReq_sword:
(1)  480/FFFFFFFFFFFF015E : 6102                		bsr	sndReq_sbyte
(1)  481/FFFFFFFFFFFF0160 : E09F                		ror.l	#8,d7
(1)  482/FFFFFFFFFFFF0162 :                     sndReq_sbyte:
(1)  483/FFFFFFFFFFFF0162 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  484/FFFFFFFFFFFF0166 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  485/FFFFFFFFFFFF0168 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  486/FFFFFFFFFFFF016C : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  487/FFFFFFFFFFFF016E : 4E75                		rts
(1)  488/FFFFFFFFFFFF0170 :                     
(1)  489/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  490/FFFFFFFFFFFF0170 :                     ; gemaDmaPause
(1)  491/FFFFFFFFFFFF0170 :                     ;
(1)  492/FFFFFFFFFFFF0170 :                     ; Call this BEFORE doing any DMA transfer
(1)  493/FFFFFFFFFFFF0170 :                     ;
(1)  494/FFFFFFFFFFFF0170 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  495/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  496/FFFFFFFFFFFF0170 :                     
(1)  497/FFFFFFFFFFFF0170 :                     gemaDmaPause:
(1)  501/FFFFFFFFFFFF0170 : 2F07                		move.l	d7,-(sp)
(1)  502/FFFFFFFFFFFF0172 : 6100 FF68           		bsr	sndLockZ80
(1)  503/FFFFFFFFFFFF0176 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Block flag for Z80
         FFFFFFFFFFFF017C : 002F             
(1)  504/FFFFFFFFFFFF017E : 6100 FF70           		bsr	sndUnlockZ80
(1)  505/FFFFFFFFFFFF0182 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  506/FFFFFFFFFFFF0186 : 51CF FFFE           		dbf	d7,*
(1)  507/FFFFFFFFFFFF018A : 2E1F                		move.l	(sp)+,d7
(1)  508/FFFFFFFFFFFF018C : 4E75                		rts
(1)  510/FFFFFFFFFFFF018E :                     
(1)  511/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  512/FFFFFFFFFFFF018E :                     ; gemaDmaResume
(1)  513/FFFFFFFFFFFF018E :                     ;
(1)  514/FFFFFFFFFFFF018E :                     ; Call this AFTER finishing DMA transfer
(1)  515/FFFFFFFFFFFF018E :                     ;
(1)  516/FFFFFFFFFFFF018E :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  517/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  518/FFFFFFFFFFFF018E :                     
(1)  519/FFFFFFFFFFFF018E :                     gemaDmaResume:
(1)  523/FFFFFFFFFFFF018E : 2F07                		move.l	d7,-(sp)
(1)  524/FFFFFFFFFFFF0190 : 6100 FF4A           		bsr	sndLockZ80
(1)  525/FFFFFFFFFFFF0194 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Unblock flag for Z80
         FFFFFFFFFFFF019A : 002F             
(1)  526/FFFFFFFFFFFF019C : 6100 FF52           		bsr	sndUnlockZ80
(1)  527/FFFFFFFFFFFF01A0 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  528/FFFFFFFFFFFF01A4 : 51CF FFFE           		dbf	d7,*
(1)  529/FFFFFFFFFFFF01A8 : 2E1F                		move.l	(sp)+,d7
(1)  530/FFFFFFFFFFFF01AA : 4E75                		rts
(1)  532/FFFFFFFFFFFF01AC :                     
(1)  533/FFFFFFFFFFFF01AC :                     ; ====================================================================
(1)  534/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  535/FFFFFFFFFFFF01AC :                     ; Subroutines
(1)  536/FFFFFFFFFFFF01AC :                     ;
(1)  537/FFFFFFFFFFFF01AC :                     ; USER Sound calls are here
(1)  538/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  539/FFFFFFFFFFFF01AC :                     
(1)  540/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  541/FFFFFFFFFFFF01AC :                     ; gemaTest
(1)  542/FFFFFFFFFFFF01AC :                     ;
(1)  543/FFFFFFFFFFFF01AC :                     ; For TESTING only.
(1)  544/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  545/FFFFFFFFFFFF01AC :                     
(1)  546/FFFFFFFFFFFF01AC :                     gemaTest:
(1)  547/FFFFFFFFFFFF01AC : 6100 FF4C           		bsr	sndReq_Enter
(1)  548/FFFFFFFFFFFF01B0 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  549/FFFFFFFFFFFF01B4 : 6192                		bsr	sndReq_scmd
(1)  550/FFFFFFFFFFFF01B6 : 6000 FF76           		bra 	sndReq_Exit
(1)  551/FFFFFFFFFFFF01BA :                     
(1)  552/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  553/FFFFFFFFFFFF01BA :                     ; gemaSetMasterList
(1)  554/FFFFFFFFFFFF01BA :                     ;
(1)  555/FFFFFFFFFFFF01BA :                     ; Sets the Master tracklist location, data can be stored
(1)  556/FFFFFFFFFFFF01BA :                     ; on ROM, RAM* and Word-RAM*
(1)  557/FFFFFFFFFFFF01BA :                     ;
(1)  558/FFFFFFFFFFFF01BA :                     ; Input:
(1)  559/FFFFFFFFFFFF01BA :                     ; a0 | 68k pointer
(1)  560/FFFFFFFFFFFF01BA :                     ;
(1)  561/FFFFFFFFFFFF01BA :                     ; Notes:
(1)  562/FFFFFFFFFFFF01BA :                     ; - STOP ALL TRACKS WITH gemaStopAll BEFORE
(1)  563/FFFFFFFFFFFF01BA :                     ;   CALLING THIS.
(1)  564/FFFFFFFFFFFF01BA :                     ;
(1)  565/FFFFFFFFFFFF01BA :                     ; * RAM data (SCD/CD32X when using Stamps):
(1)  566/FFFFFFFFFFFF01BA :                     ;   Requires calling Sound_Update manually as a
(1)  567/FFFFFFFFFFFF01BA :                     ;   workaround for the Z80's limitation of not being
(1)  568/FFFFFFFFFFFF01BA :                     ;   able to read from RAM
(1)  569/FFFFFFFFFFFF01BA :                     ;   (BUT it can WRITE into as normal)
(1)  570/FFFFFFFFFFFF01BA :                     ; * Word-RAM (SCD/CD32X):
(1)  571/FFFFFFFFFFFF01BA :                     ;   Make sure the Word-RAM permission is set to MAIN-CPU.
(1)  572/FFFFFFFFFFFF01BA :                     ;
(1)  573/FFFFFFFFFFFF01BA :                     ; MUST USE THE MACROS TO PROPERLY SETUP THE TRACK LIST:
(1)  574/FFFFFFFFFFFF01BA :                     ; 	gemaList Tracklist_Pointer
(1)  575/FFFFFFFFFFFF01BA :                     ; 	gemaTrk 0,2,gtrk_Test
(1)  576/FFFFFFFFFFFF01BA :                     ; 	; other tracks go here
(1)  577/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  578/FFFFFFFFFFFF01BA :                     
(1)  579/FFFFFFFFFFFF01BA :                     gemaSetMasterList:
(1)  580/FFFFFFFFFFFF01BA : 6100 FF3E           		bsr	sndReq_Enter
(1)  581/FFFFFFFFFFFF01BE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  582/FFFFFFFFFFFF01C2 : 6184                		bsr	sndReq_scmd
(1)  583/FFFFFFFFFFFF01C4 : 2E08                		move.l	a0,d7
(1)  584/FFFFFFFFFFFF01C6 : 618E                		bsr	sndReq_slong
(1)  585/FFFFFFFFFFFF01C8 : 6000 FF64           		bra 	sndReq_Exit
(1)  586/FFFFFFFFFFFF01CC :                     
(1)  587/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  588/FFFFFFFFFFFF01CC :                     ; gemaPlaySeq
(1)  589/FFFFFFFFFFFF01CC :                     ;
(1)  590/FFFFFFFFFFFF01CC :                     ; Play a sequence with arguments
(1)  591/FFFFFFFFFFFF01CC :                     ;
(1)  592/FFFFFFFFFFFF01CC :                     ; Input:
(1)  593/FFFFFFFFFFFF01CC :                     ; d0.b | Playback slot number
(1)  594/FFFFFFFFFFFF01CC :                     ;        If -1: Auto-search free slot
(1)  595/FFFFFFFFFFFF01CC :                     ; d1.b | Sequence number
(1)  596/FFFFFFFFFFFF01CC :                     ; d2.b | Starting block
(1)  597/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  598/FFFFFFFFFFFF01CC :                     
(1)  599/FFFFFFFFFFFF01CC :                     gemaPlaySeq:
(1)  600/FFFFFFFFFFFF01CC : 6100 FF2C           		bsr	sndReq_Enter
(1)  601/FFFFFFFFFFFF01D0 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  602/FFFFFFFFFFFF01D4 : 6100 FF72           		bsr	sndReq_scmd
(1)  603/FFFFFFFFFFFF01D8 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  604/FFFFFFFFFFFF01DA : 6186                		bsr	sndReq_sbyte
(1)  605/FFFFFFFFFFFF01DC : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  606/FFFFFFFFFFFF01DE : 6182                		bsr	sndReq_sbyte
(1)  607/FFFFFFFFFFFF01E0 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  608/FFFFFFFFFFFF01E2 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  609/FFFFFFFFFFFF01E6 : 6000 FF46           		bra 	sndReq_Exit
(1)  610/FFFFFFFFFFFF01EA :                     
(1)  611/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  612/FFFFFFFFFFFF01EA :                     ; gemaStopSeq
(1)  613/FFFFFFFFFFFF01EA :                     ;
(1)  614/FFFFFFFFFFFF01EA :                     ; Stops tracks with the same sequence number
(1)  615/FFFFFFFFFFFF01EA :                     ;
(1)  616/FFFFFFFFFFFF01EA :                     ; Input:
(1)  617/FFFFFFFFFFFF01EA :                     ; d0.b | Playback slot number
(1)  618/FFFFFFFFFFFF01EA :                     ;        If -1: Stop all slots
(1)  619/FFFFFFFFFFFF01EA :                     ; d1.b | Sequence number to search for
(1)  620/FFFFFFFFFFFF01EA :                     ;        If -1: Stop tracks with any sequence
(1)  621/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  622/FFFFFFFFFFFF01EA :                     
(1)  623/FFFFFFFFFFFF01EA :                     gemaStopSeq:
(1)  624/FFFFFFFFFFFF01EA : 6100 FF0E           		bsr	sndReq_Enter
(1)  625/FFFFFFFFFFFF01EE : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  626/FFFFFFFFFFFF01F2 : 6100 FF54           		bsr	sndReq_scmd
(1)  627/FFFFFFFFFFFF01F6 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  628/FFFFFFFFFFFF01F8 : 6100 FF68           		bsr	sndReq_sbyte
(1)  629/FFFFFFFFFFFF01FC : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  630/FFFFFFFFFFFF01FE : 6100 FF62           		bsr	sndReq_sbyte
(1)  631/FFFFFFFFFFFF0202 : 6000 FF2A           		bra 	sndReq_Exit
(1)  632/FFFFFFFFFFFF0206 :                     
(1)  633/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  634/FFFFFFFFFFFF0206 :                     ; gemaStopAll
(1)  635/FFFFFFFFFFFF0206 :                     ;
(1)  636/FFFFFFFFFFFF0206 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  637/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  638/FFFFFFFFFFFF0206 :                     
(1)  639/FFFFFFFFFFFF0206 :                     gemaStopAll:
(1)  640/FFFFFFFFFFFF0206 : 6100 FEF2           		bsr	sndReq_Enter
(1)  641/FFFFFFFFFFFF020A : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  642/FFFFFFFFFFFF020E : 6100 FF38           		bsr	sndReq_scmd
(1)  643/FFFFFFFFFFFF0212 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  644/FFFFFFFFFFFF0214 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  645/FFFFFFFFFFFF0218 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  646/FFFFFFFFFFFF021A : 6100 FF46           		bsr	sndReq_sbyte
(1)  647/FFFFFFFFFFFF021E : 6000 FF0E           		bra 	sndReq_Exit
(1)  648/FFFFFFFFFFFF0222 :                     
(1)  649/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  650/FFFFFFFFFFFF0222 :                     ; gemaFadeSeq
(1)  651/FFFFFFFFFFFF0222 :                     ;
(1)  652/FFFFFFFFFFFF0222 :                     ; Set Master volume to a track slot.
(1)  653/FFFFFFFFFFFF0222 :                     ;
(1)  654/FFFFFFFFFFFF0222 :                     ; Input:
(1)  655/FFFFFFFFFFFF0222 :                     ; d0.b | Playback slot number
(1)  656/FFFFFFFFFFFF0222 :                     ;        If -1: Apply to all slots
(1)  657/FFFFFFFFFFFF0222 :                     ; d1.b | Target volume
(1)  658/FFFFFFFFFFFF0222 :                     ;
(1)  659/FFFFFFFFFFFF0222 :                     ; Notes:
(1)  660/FFFFFFFFFFFF0222 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  661/FFFFFFFFFFFF0222 :                     ; - In v1.0 this only works during new notes on playback.
(1)  662/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  663/FFFFFFFFFFFF0222 :                     
(1)  664/FFFFFFFFFFFF0222 :                     gemaFadeSeq:
(1)  665/FFFFFFFFFFFF0222 : 6100 FED6           		bsr	sndReq_Enter
(1)  666/FFFFFFFFFFFF0226 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  667/FFFFFFFFFFFF022A : 6100 FF1C           		bsr	sndReq_scmd
(1)  668/FFFFFFFFFFFF022E : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  669/FFFFFFFFFFFF0230 : 6100 FF30           		bsr	sndReq_sbyte
(1)  670/FFFFFFFFFFFF0234 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  671/FFFFFFFFFFFF0236 : 6100 FF2A           		bsr	sndReq_sbyte
(1)  672/FFFFFFFFFFFF023A : 6000 FEF2           		bra 	sndReq_Exit
(1)  673/FFFFFFFFFFFF023E :                     
(1)  674/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  675/FFFFFFFFFFFF023E :                     ; gemaSetSeqVol
(1)  676/FFFFFFFFFFFF023E :                     ;
(1)  677/FFFFFFFFFFFF023E :                     ; Set Master volume to a Seq slot.
(1)  678/FFFFFFFFFFFF023E :                     ;
(1)  679/FFFFFFFFFFFF023E :                     ; Input:
(1)  680/FFFFFFFFFFFF023E :                     ; d0.b | Playback slot number
(1)  681/FFFFFFFFFFFF023E :                     ;        If -1: Set to all slots
(1)  682/FFFFFFFFFFFF023E :                     ; d1.b | Master volume:
(1)  683/FFFFFFFFFFFF023E :                     ;        $00-max $40-min
(1)  684/FFFFFFFFFFFF023E :                     ;
(1)  685/FFFFFFFFFFFF023E :                     ; Notes:
(1)  686/FFFFFFFFFFFF023E :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  687/FFFFFFFFFFFF023E :                     ; - In v1.0 this only works on (re)start
(1)  688/FFFFFFFFFFFF023E :                     ;   or during new notes on playback.
(1)  689/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  690/FFFFFFFFFFFF023E :                     
(1)  691/FFFFFFFFFFFF023E :                     gemaSetSeqVol:
(1)  692/FFFFFFFFFFFF023E : 6100 FEBA           		bsr	sndReq_Enter
(1)  693/FFFFFFFFFFFF0242 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  694/FFFFFFFFFFFF0246 : 6100 FF00           		bsr	sndReq_scmd
(1)  695/FFFFFFFFFFFF024A : 1E01                		move.b	d1,d7		; d1.b Volume data <--
(1)  696/FFFFFFFFFFFF024C : 6100 FF14           		bsr	sndReq_sbyte
(1)  697/FFFFFFFFFFFF0250 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  698/FFFFFFFFFFFF0252 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  699/FFFFFFFFFFFF0256 : 6000 FED6           		bra 	sndReq_Exit
(1)  700/FFFFFFFFFFFF025A :                     
(1)  701/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  702/FFFFFFFFFFFF025A :                     ; gemaSetBeats
(1)  703/FFFFFFFFFFFF025A :                     ;
(1)  704/FFFFFFFFFFFF025A :                     ; Sets global sub-beats, affects ALL tracks.
(1)  705/FFFFFFFFFFFF025A :                     ;
(1)  706/FFFFFFFFFFFF025A :                     ; Input:
(1)  707/FFFFFFFFFFFF025A :                     ; d0.w | sub-beats
(1)  708/FFFFFFFFFFFF025A :                     ;
(1)  709/FFFFFFFFFFFF025A :                     ; Note:
(1)  710/FFFFFFFFFFFF025A :                     ; This gets auto-converted if Z80 is in PAL-speed
(1)  711/FFFFFFFFFFFF025A :                     ; mode.
(1)  712/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  713/FFFFFFFFFFFF025A :                     
(1)  714/FFFFFFFFFFFF025A :                     ; Ex. sub-beats 215 is tempo 125 on NTSC speed
(1)  715/FFFFFFFFFFFF025A :                     
(1)  716/FFFFFFFFFFFF025A :                     gemaSetBeats:
(1)  717/FFFFFFFFFFFF025A : 6100 FE9E           		bsr	sndReq_Enter
(1)  718/FFFFFFFFFFFF025E : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  719/FFFFFFFFFFFF0262 : 6100 FEE4           		bsr	sndReq_scmd
(1)  720/FFFFFFFFFFFF0266 : 3E00                		move.w	d0,d7
(1)  721/FFFFFFFFFFFF0268 : 6100 FEF4           		bsr	sndReq_sword
(1)  722/FFFFFFFFFFFF026C : 6000 FEC0           		bra 	sndReq_Exit
(1)  723/FFFFFFFFFFFF0270 :                     
     194/FFFFFFFFFFFF0270 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0270 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0270 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0270 :                     
(1)    6/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0270 :                     ; Settings
(1)    9/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0270 :                     
(1)   11/FFFFFFFFFFFF0270 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/FFFFFFFFFFFF0270 : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/FFFFFFFFFFFF0270 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/FFFFFFFFFFFF0270 :                     
(1)   15/FFFFFFFFFFFF0270 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/FFFFFFFFFFFF0270 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/FFFFFFFFFFFF0270 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/FFFFFFFFFFFF0270 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/FFFFFFFFFFFF0270 : =$6000               DEF_PrintPal		equ $6000
(1)   20/FFFFFFFFFFFF0270 :                     
(1)   21/FFFFFFFFFFFF0270 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/FFFFFFFFFFFF0270 :                     
(1)   23/FFFFFFFFFFFF0270 :                     ; ===================================================================
(1)   24/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   25/FFFFFFFFFFFF0270 :                     ; Variables
(1)   26/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0270 :                     
(1)   28/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   29/FFFFFFFFFFFF0270 :                     ; Use these if you are not planning changing
(1)   30/FFFFFFFFFFFF0270 :                     ; the VRAM locations of the scrolling area(s)
(1)   31/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFF0270 : =$C000               DEF_VRAM_FG		equ $C000
(1)   33/FFFFFFFFFFFF0270 : =$E000               DEF_VRAM_BG		equ $E000
(1)   34/FFFFFFFFFFFF0270 : =$D000               DEF_VRAM_WD		equ $D000
(1)   35/FFFFFFFFFFFF0270 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   36/FFFFFFFFFFFF0270 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   37/FFFFFFFFFFFF0270 :                     
(1)   38/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   39/FFFFFFFFFFFF0270 :                     ; H sizes for the current layer
(1)   40/FFFFFFFFFFFF0270 :                     ;
(1)   41/FFFFFFFFFFFF0270 :                     ; Note:
(1)   42/FFFFFFFFFFFF0270 :                     ; WINDOW's width changes between H32 and H40
(1)   43/FFFFFFFFFFFF0270 :                     ; resolution modes.
(1)   44/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   45/FFFFFFFFFFFF0270 : =$40                 DEF_HSIZE_32		equ $040
(1)   46/FFFFFFFFFFFF0270 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   47/FFFFFFFFFFFF0270 : =$100                DEF_HSIZE_128		equ $100
(1)   48/FFFFFFFFFFFF0270 :                     
(1)   49/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   50/FFFFFFFFFFFF0270 :                     ; VDP registers
(1)   51/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   52/FFFFFFFFFFFF0270 :                     ; $80
(1)   53/FFFFFFFFFFFF0270 : =$2                  HVStop			equ $02
(1)   54/FFFFFFFFFFFF0270 : =$10                 HintEnbl		equ $10
(1)   55/FFFFFFFFFFFF0270 : =$1                  bitHVStop		equ 1
(1)   56/FFFFFFFFFFFF0270 : =$4                  bitHintEnbl		equ 4
(1)   57/FFFFFFFFFFFF0270 :                     ; $81
(1)   58/FFFFFFFFFFFF0270 : =$40                 DispEnbl 		equ $40
(1)   59/FFFFFFFFFFFF0270 : =$20                 VintEnbl 		equ $20
(1)   60/FFFFFFFFFFFF0270 : =$10                 DmaEnbl			equ $10
(1)   61/FFFFFFFFFFFF0270 : =$6                  bitDispEnbl		equ 6
(1)   62/FFFFFFFFFFFF0270 : =$5                  bitVintEnbl		equ 5
(1)   63/FFFFFFFFFFFF0270 : =$4                  bitDmaEnbl		equ 4
(1)   64/FFFFFFFFFFFF0270 : =$3                  bitV30			equ 3
(1)   65/FFFFFFFFFFFF0270 :                     
(1)   66/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   67/FFFFFFFFFFFF0270 :                     ; VDP VRAM bits
(1)   68/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   69/FFFFFFFFFFFF0270 :                     ; BYTE read:
(1)   70/FFFFFFFFFFFF0270 : =$7                  bitAttrPrio		equ 7
(1)   71/FFFFFFFFFFFF0270 : =$4                  bitAttrV		equ 4
(1)   72/FFFFFFFFFFFF0270 : =$3                  bitAttrH		equ 3
(1)   73/FFFFFFFFFFFF0270 :                     ; WORD read:
(1)   74/FFFFFFFFFFFF0270 : =$8000               AttrPrio		equ $8000
(1)   75/FFFFFFFFFFFF0270 : =$1000               AttrV			equ $1000
(1)   76/FFFFFFFFFFFF0270 : =$800                AttrH			equ $0800
(1)   77/FFFFFFFFFFFF0270 :                     
(1)   78/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   79/FFFFFFFFFFFF0270 :                     ; vdp_ctrl READ bits
(1)   80/FFFFFFFFFFFF0270 :                     ; Read as WORD
(1)   81/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   82/FFFFFFFFFFFF0270 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   83/FFFFFFFFFFFF0270 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   84/FFFFFFFFFFFF0270 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   85/FFFFFFFFFFFF0270 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   86/FFFFFFFFFFFF0270 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   87/FFFFFFFFFFFF0270 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   88/FFFFFFFFFFFF0270 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   89/FFFFFFFFFFFF0270 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   90/FFFFFFFFFFFF0270 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   91/FFFFFFFFFFFF0270 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   92/FFFFFFFFFFFF0270 :                     
(1)   93/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)   94/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)   95/FFFFFFFFFFFF0270 :                     ; Structs
(1)   96/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)   97/FFFFFFFFFFFF0270 :                     
(1)   98/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   99/FFFFFFFFFFFF0270 :                     ; RAM_PalFadeList
(1)  100/       0 :                     palfd			struct
(1)  101/       0 :                     req			ds.b 1
(1)  102/       1 :                     delay			ds.b 1
(1)  103/       2 :                     start			ds.b 1
(1)  104/       3 :                     incr			ds.b 1
(1)  105/       4 :                     target			ds.b 1
(1)  106/       5 :                     timer			ds.b 1
(1)  107/       6 :                     num			ds.w 1
(1)  108/       8 :                     ; len		ds.l 0
(1)  109/FFFFFFFFFFFF0270 : =$8                  			endstruct
(1)  110/FFFFFFFFFFFF0270 :                     
(1)  111/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)  112/FFFFFFFFFFFF0270 :                     ; RAM_MdMcd_Stamps
(1)  113/FFFFFFFFFFFF0270 :                     
(1)  114/       0 :                     mdstmp		struct
(1)  115/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  116/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  117/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  118/       6 :                     vramSize	ds.w 1
(1)  119/       8 :                     vramLen		ds.w 1		; temporals
(1)  120/       A :                     vramIncr	ds.w 1		; ''
(1)  121/       C :                     stmpoutb	ds.w 1
(1)  122/       E :                     currOutFlip	ds.w 1
(1)  123/      10 :                     fdrop		ds.w 1
(1)  124/      12 :                     cellstorage	ds.l 1
(1)  125/      16 :                     dotIncr		ds.l 1
(1)  126/      1A :                     buffIncr	ds.l 1
(1)  127/      1E :                     ; len		ds.l 0
(1)  128/FFFFFFFFFFFF0270 : =$1E                 		endstruct
(1)  129/FFFFFFFFFFFF0270 :                     
(1)  130/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  131/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  132/FFFFFFFFFFFF0270 :                     ; RAM section
(1)  133/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  134/FFFFFFFFFFFF0270 :                     
(1)  135/FFFFFFFFFFFF0270 : (MACRO)              			memory RAM_MdVideo
(1)  135/FFFFFFFFFFFF0270 : =$FFFFFFFFFFFF0270   GLBL_LASTPC     := *
(1)  135/     BBE :                                     dephase
(1)  135/FFFFFFFFFFFFD462 :                                     phase RAM_MDVIDEO
(1)  135/FFFFFFFFFFFFD462 : =$FFFFFFFFFFFFD462   GLBL_LASTORG    := *
(1)  136/FFFFFFFFFFFFD462 :                     	; Some 32X labels are in system/shared.asm
(1)  137/FFFFFFFFFFFFD462 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  138/FFFFFFFFFFFFD4A2 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  139/FFFFFFFFFFFFD622 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  140/FFFFFFFFFFFFD8A2 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  141/FFFFFFFFFFFFDC62 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  142/FFFFFFFFFFFFDCB2 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  143/FFFFFFFFFFFFE1B2 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  144/FFFFFFFFFFFFE232 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  145/FFFFFFFFFFFFE2B2 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  146/FFFFFFFFFFFFE2B2 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  147/FFFFFFFFFFFFE2B4 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  148/FFFFFFFFFFFFE2B6 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  149/FFFFFFFFFFFFE2BC :                     
(1)  150/FFFFFFFFFFFFE2BC :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  151/FFFFFFFFFFFFE2BC :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  152/FFFFFFFFFFFFE43C :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  153/FFFFFFFFFFFFE440 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  154/FFFFFFFFFFFFE442 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  155/FFFFFFFFFFFFE444 :                     RAM_SetPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  156/FFFFFFFFFFFFE446 :                     RAM_SetPrntVramW	ds.w 1				; '' but for wider text
(1)  157/FFFFFFFFFFFFE448 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  158/FFFFFFFFFFFFE44A :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  159/FFFFFFFFFFFFE44C :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  160/FFFFFFFFFFFFE44E :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  161/FFFFFFFFFFFFE450 :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  162/FFFFFFFFFFFFE452 :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  163/FFFFFFFFFFFFE454 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  164/FFFFFFFFFFFFE456 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  165/FFFFFFFFFFFFE458 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  166/FFFFFFFFFFFFE45A :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  167/FFFFFFFFFFFFE45C :                     sizeof_mdvid		ds.l 0
(1)  168/FFFFFFFFFFFFE460 : (MACRO)              			endmemory
(1)  168/    1BBC :                     .here:          dephase
(1)  168/    1BBC :                                     ds.b -(.here-GLBL_LASTORG)
(1)  168/FFFFFFFFFFFF0270 :                                     phase GLBL_LASTPC
(1)  169/FFFFFFFFFFFF0270 :                     
(1)  170/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  171/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  172/FFFFFFFFFFFF0270 :                     ; Initialize Genesis video
(1)  173/FFFFFFFFFFFF0270 :                     ;
(1)  174/FFFFFFFFFFFF0270 :                     ; Uses:
(1)  175/FFFFFFFFFFFF0270 :                     ; d5-d7/a5-a6
(1)  176/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  177/FFFFFFFFFFFF0270 :                     
(1)  178/FFFFFFFFFFFF0270 :                     Video_Init:
(1)  179/FFFFFFFFFFFF0270 : 4DF8 D462           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  180/FFFFFFFFFFFF0274 : 7C00                		moveq	#0,d6
(1)  181/FFFFFFFFFFFF0276 : 3E3C 0FF9           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  182/FFFFFFFFFFFF027A :                     .clr_ram:
(1)  183/FFFFFFFFFFFF027A : 1CC6                		move.b	d6,(a6)+
(1)  184/FFFFFFFFFFFF027C : 51CF FFFC           		dbf	d7,.clr_ram
(1)  185/FFFFFFFFFFFF0280 : 4DF8 E2BC           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  186/FFFFFFFFFFFF0284 : 4BFA 0072           		lea	.dma_entry(pc),a5
(1)  187/FFFFFFFFFFFF0288 : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  188/FFFFFFFFFFFF028C :                     .copy_dma:
(1)  189/FFFFFFFFFFFF028C : 2CD5                		move.l	(a5),(a6)+
(1)  190/FFFFFFFFFFFF028E : 2CED 0004           		move.l	4(a5),(a6)+
(1)  191/FFFFFFFFFFFF0292 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  192/FFFFFFFFFFFF0296 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  193/FFFFFFFFFFFF029A : 51CF FFF0           		dbf	d7,.copy_dma
(1)  194/FFFFFFFFFFFF029E : 4DF8 D4A2           		lea	(RAM_SprMapList).w,a6
(1)  195/FFFFFFFFFFFF02A2 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  196/FFFFFFFFFFFF02A6 :                     .clr_d:
(1)  197/FFFFFFFFFFFF02A6 : 429E                		clr.l	(a6)+
(1)  198/FFFFFFFFFFFF02A8 : 429E                		clr.l	(a6)+
(1)  199/FFFFFFFFFFFF02AA : 429E                		clr.l	(a6)+
(1)  200/FFFFFFFFFFFF02AC : 429E                		clr.l	(a6)+
(1)  201/FFFFFFFFFFFF02AE : 51CF FFF6           		dbf	d7,.clr_d
(1)  202/FFFFFFFFFFFF02B2 :                     
(1)  203/FFFFFFFFFFFF02B2 : 4278 E440           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  204/FFFFFFFFFFFF02B6 : 4DF8 D462           		lea	(RAM_PalFadeList).w,a6
(1)  205/FFFFFFFFFFFF02BA : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  206/FFFFFFFFFFFF02BE :                     .clr_preq:
(1)  207/FFFFFFFFFFFF02BE : 429E                		clr.l	(a6)+
(1)  208/FFFFFFFFFFFF02C0 : 429E                		clr.l	(a6)+
(1)  209/FFFFFFFFFFFF02C2 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  211/FFFFFFFFFFFF02C6 : 4278 C800           		clr.w	(RAM_MdMars_IndxPalFd).w
(1)  212/FFFFFFFFFFFF02CA : 4DF8 CA02           		lea	(RAM_MdMars_MPalFdList).w,a6
(1)  213/FFFFFFFFFFFF02CE : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  214/FFFFFFFFFFFF02D2 :                     .clr_mreq:
(1)  215/FFFFFFFFFFFF02D2 : 429E                		clr.l	(a6)+
(1)  216/FFFFFFFFFFFF02D4 : 429E                		clr.l	(a6)+
(1)  217/FFFFFFFFFFFF02D6 : 51CF FFFA           		dbf	d7,.clr_mreq
(1)  219/FFFFFFFFFFFF02DA : 4CBA 000F 002C      		movem.w	.def_regset(pc),d0-d3
(1)  220/FFFFFFFFFFFF02E0 : 48B8 000F E454      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  221/FFFFFFFFFFFF02E6 : 23F8 E454 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
         FFFFFFFFFFFF02EC : 0004             
(1)  222/FFFFFFFFFFFF02EE : 23F8 E458 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
         FFFFFFFFFFFF02F4 : 0004             
(1)  223/FFFFFFFFFFFF02F6 : 601C                		bra	Video_Default
(1)  224/FFFFFFFFFFFF02F8 :                     
(1)  225/FFFFFFFFFFFF02F8 :                     ; --------------------------------------------------------
(1)  226/FFFFFFFFFFFF02F8 :                     ; DMA blast base entry
(1)  227/FFFFFFFFFFFF02F8 :                     .dma_entry:
(1)  228/FFFFFFFFFFFF02F8 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  229/FFFFFFFFFFFF02FC : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  230/FFFFFFFFFFFF0302 : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  231/FFFFFFFFFFFF0306 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  232/FFFFFFFFFFFF0308 :                     		align 2
(1)  233/FFFFFFFFFFFF030A :                     .def_regset:
(1)  234/FFFFFFFFFFFF030A : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
         FFFFFFFFFFFF0310 : 8C00             
(1)  235/FFFFFFFFFFFF0312 :                     		align 2
(1)  236/FFFFFFFFFFFF0314 :                     
(1)  237/FFFFFFFFFFFF0314 :                     ; --------------------------------------------------------
(1)  238/FFFFFFFFFFFF0314 :                     ; Video_Default
(1)  239/FFFFFFFFFFFF0314 :                     ; --------------------------------------------------------
(1)  240/FFFFFFFFFFFF0314 :                     
(1)  241/FFFFFFFFFFFF0314 :                     Video_Default:
(1)  251/FFFFFFFFFFFF0314 : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
         FFFFFFFFFFFF031A : 00C0 0004          
(1)  252/FFFFFFFFFFFF031E : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
         FFFFFFFFFFFF0324 : 0004             
(1)  253/FFFFFFFFFFFF0326 : 31FC C000 E448      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  254/FFFFFFFFFFFF032C : 31FC E000 E44A      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  255/FFFFFFFFFFFF0332 : 31FC D000 E44C      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  256/FFFFFFFFFFFF0338 : 31FC F800 E44E      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  257/FFFFFFFFFFFF033E : 31FC FC00 E450      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  258/FFFFFFFFFFFF0344 : 31FC 1000 E452      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  259/FFFFFFFFFFFF034A : 6100 044C           		bsr	Video_UpdMapVram
(1)  260/FFFFFFFFFFFF034E : 6100 049A           		bsr	Video_UpdSprHVram
(1)  261/FFFFFFFFFFFF0352 : 7001                		moveq	#1,d0					; Size H64 V32
(1)  262/FFFFFFFFFFFF0354 : 7200                		moveq	#0,d1
(1)  263/FFFFFFFFFFFF0356 : 6100 04CC           		bsr	Video_SetMapSize
(1)  264/FFFFFFFFFFFF035A : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  265/FFFFFFFFFFFF035C : 7200                		moveq	#0,d1
(1)  266/FFFFFFFFFFFF035E : 6000 03E4           		bra	Video_Resolution
(1)  267/FFFFFFFFFFFF0362 :                     
(1)  268/FFFFFFFFFFFF0362 :                     ; ====================================================================
(1)  269/FFFFFFFFFFFF0362 :                     ; --------------------------------------------------------
(1)  270/FFFFFFFFFFFF0362 :                     ; Video_Render
(1)  271/FFFFFFFFFFFF0362 :                     ;
(1)  272/FFFFFFFFFFFF0362 :                     ; Call this during VBlank to update the VDP visuals
(1)  273/FFFFFFFFFFFF0362 :                     ; and process the DMA BLAST list, also resets a
(1)  274/FFFFFFFFFFFF0362 :                     ; few variables.
(1)  275/FFFFFFFFFFFF0362 :                     ; (This is already called on System_Render)
(1)  276/FFFFFFFFFFFF0362 :                     ;
(1)  277/FFFFFFFFFFFF0362 :                     ; Uses:
(1)  278/FFFFFFFFFFFF0362 :                     ; ALL
(1)  279/FFFFFFFFFFFF0362 :                     ; --------------------------------------------------------
(1)  280/FFFFFFFFFFFF0362 :                     
(1)  281/FFFFFFFFFFFF0362 :                     Video_Render:
(1)  282/FFFFFFFFFFFF0362 : 6100 036A           		bsr	Video_DmaOn
(1)  283/FFFFFFFFFFFF0366 : 6100 165E           		bsr	System_DmaEnter_RAM
(1)  284/FFFFFFFFFFFF036A : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  285/FFFFFFFFFFFF0370 : 3E38 E44E           		move.w	(RAM_VdpVramSpr).w,d7
(1)  286/FFFFFFFFFFFF0374 : 3A38 E450           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  287/FFFFFFFFFFFF0378 : 3C07                		move.w	d7,d6
(1)  288/FFFFFFFFFFFF037A : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  289/FFFFFFFFFFFF037E : 0047 4000           		ori.w	#$4000,d7
(1)  290/FFFFFFFFFFFF0382 : E55E                		rol.w	#2,d6
(1)  291/FFFFFFFFFFFF0384 : 0246 0003           		andi.w	#%11,d6
(1)  292/FFFFFFFFFFFF0388 : 8C7C 0080           		or.w	#$80,d6
(1)  293/FFFFFFFFFFFF038C : 3805                		move.w	d5,d4
(1)  294/FFFFFFFFFFFF038E : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  295/FFFFFFFFFFFF0392 : 0045 4000           		ori.w	#$4000,d5
(1)  296/FFFFFFFFFFFF0396 : E55C                		rol.w	#2,d4
(1)  297/FFFFFFFFFFFF0398 : 0244 0003           		andi.w	#%11,d4
(1)  298/FFFFFFFFFFFF039C : 887C 0080           		or.w	#$80,d4
(1)  299/FFFFFFFFFFFF03A0 : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  300/FFFFFFFFFFFF03A6 : 2CBC 96EE 9559      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  301/FFFFFFFFFFFF03AC : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  302/FFFFFFFFFFFF03B0 : 3C87                		move.w	d7,(a6)
(1)  303/FFFFFFFFFFFF03B2 : 3F06                		move.w	d6,-(sp)
(1)  304/FFFFFFFFFFFF03B4 : 3C9F                		move.w	(sp)+,(a6)
(1)  305/FFFFFFFFFFFF03B6 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  306/FFFFFFFFFFFF03BC : 2CBC 96EC 9551      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  307/FFFFFFFFFFFF03C2 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  308/FFFFFFFFFFFF03C6 : 3C85                		move.w	d5,(a6)
(1)  309/FFFFFFFFFFFF03C8 : 3F04                		move.w	d4,-(sp)
(1)  310/FFFFFFFFFFFF03CA : 3C9F                		move.w	(sp)+,(a6)
(1)  311/FFFFFFFFFFFF03CC : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  312/FFFFFFFFFFFF03D2 : 2CBC 96EE 9531      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  313/FFFFFFFFFFFF03D8 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  314/FFFFFFFFFFFF03DC : 3CBC 4000           		move.w	#$4000,(a6)
(1)  315/FFFFFFFFFFFF03E0 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  316/FFFFFFFFFFFF03E4 : 3C9F                		move.w	(sp)+,(a6)
(1)  317/FFFFFFFFFFFF03E6 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  318/FFFFFFFFFFFF03EC : 2CBC 96F0 95D9      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  319/FFFFFFFFFFFF03F2 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  320/FFFFFFFFFFFF03F6 : 3CBC C000           		move.w	#$C000,(a6)
(1)  321/FFFFFFFFFFFF03FA : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  322/FFFFFFFFFFFF03FE : 3C9F                		move.w	(sp)+,(a6)
(1)  323/FFFFFFFFFFFF0400 : 6100 15C8           		bsr	System_DmaExit_RAM
(1)  324/FFFFFFFFFFFF0404 : 6100 02D4           		bsr	Video_DmaOff
(1)  325/FFFFFFFFFFFF0408 :                     
(1)  326/FFFFFFFFFFFF0408 :                     ; --------------------------------------------------------
(1)  327/FFFFFFFFFFFF0408 :                     ; Struct:
(1)  328/FFFFFFFFFFFF0408 :                     ; dc.w $94xx,$93xx		; Size
(1)  329/FFFFFFFFFFFF0408 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  330/FFFFFFFFFFFF0408 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  331/FFFFFFFFFFFF0408 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  332/FFFFFFFFFFFF0408 : 4A78 E2B4           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  333/FFFFFFFFFFFF040C : 6642                		bne.s	.exit
(1)  334/FFFFFFFFFFFF040E : 4A78 E2B2           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  335/FFFFFFFFFFFF0412 : 673C                		beq.s	.exit
(1)  336/FFFFFFFFFFFF0414 : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  337/FFFFFFFFFFFF041A : 47F8 E2BC           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  338/FFFFFFFFFFFF041E : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  339/FFFFFFFFFFFF0422 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  340/FFFFFFFFFFFF0426 : 3887                		move.w	d7,(a4)
(1)  341/FFFFFFFFFFFF0428 : 6100 1536           		bsr	System_DmaEnter_ROM
(1)  342/FFFFFFFFFFFF042C : 4A78 E2B2           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  343/FFFFFFFFFFFF0430 : 6714                		beq.s	.end
(1)  344/FFFFFFFFFFFF0432 : 289B                		move.l	(a3)+,(a4)			; Size
(1)  345/FFFFFFFFFFFF0434 : 289B                		move.l	(a3)+,(a4)			; Source
(1)  346/FFFFFFFFFFFF0436 : 389B                		move.w	(a3)+,(a4)
(1)  347/FFFFFFFFFFFF0438 :                     	; CD/CD32X
(1)  360/FFFFFFFFFFFF0438 : 389B                		move.w	(a3)+,(a4)			; Normal VDP control write
(1)  361/FFFFFFFFFFFF043A : 389B                		move.w	(a3)+,(a4)			; *** CPU freezes ***
(1)  362/FFFFFFFFFFFF043C : D6FC 0002           		adda	#2,a3
(1)  364/FFFFFFFFFFFF0440 : 5378 E2B2           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  365/FFFFFFFFFFFF0444 : 60E6                		bra.s	.next
(1)  366/FFFFFFFFFFFF0446 :                     .end:
(1)  367/FFFFFFFFFFFF0446 : 6100 1532           		bsr	System_DmaExit_ROM
(1)  368/FFFFFFFFFFFF044A : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  369/FFFFFFFFFFFF044E : 3887                		move.w	d7,(a4)
(1)  370/FFFFFFFFFFFF0450 :                     .exit:
(1)  371/FFFFFFFFFFFF0450 : 4E75                		rts
(1)  372/FFFFFFFFFFFF0452 :                     
(1)  373/FFFFFFFFFFFF0452 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF0452 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF0452 :                     ; Video_BuildSprites
(1)  376/FFFFFFFFFFFF0452 :                     ;
(1)  377/FFFFFFFFFFFF0452 :                     ; Build VDP Sprite pieces and maps
(1)  378/FFFFFFFFFFFF0452 :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF0452 :                     
(1)  380/FFFFFFFFFFFF0452 :                     Video_BuildSprites:
(1)  381/FFFFFFFFFFFF0452 : 31FC 0001 E442      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  382/FFFFFFFFFFFF0458 : 4DF8 DCB2           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  383/FFFFFFFFFFFF045C : 3C38 E442           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  384/FFFFFFFFFFFF0460 : BC7C 0050           		cmp.w	#80,d6
(1)  385/FFFFFFFFFFFF0464 : 6C00 0174           		bge	.stop_all
(1)  386/FFFFFFFFFFFF0468 : 3A06                		move.w	d6,d5
(1)  387/FFFFFFFFFFFF046A : 5345                		subq.w	#1,d5
(1)  388/FFFFFFFFFFFF046C : 6B04                		bmi	.first_spr
(1)  389/FFFFFFFFFFFF046E : E74D                		lsl.w	#3,d5
(1)  390/FFFFFFFFFFFF0470 : DCC5                		adda	d5,a6
(1)  391/FFFFFFFFFFFF0472 :                     .first_spr:
(1)  392/FFFFFFFFFFFF0472 : 4BF8 D622           		lea	(RAM_SprPzList).w,a5
(1)  393/FFFFFFFFFFFF0476 : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  394/FFFFFFFFFFFF047A :                     .next_pz:
(1)  395/FFFFFFFFFFFF047A : 0C46 0050           		cmpi.w	#80,d6
(1)  396/FFFFFFFFFFFF047E : 6E00 015A           		bgt	.stop_all
(1)  397/FFFFFFFFFFFF0482 : 0815 0007           		btst	#7,(a5)
(1)  398/FFFFFFFFFFFF0486 : 6722                		beq	.no_slot_s
(1)  399/FFFFFFFFFFFF0488 : 3015                		move.w	(a5),d0				; This slot is used?
(1)  400/FFFFFFFFFFFF048A : 3200                		move.w	d0,d1
(1)  401/FFFFFFFFFFFF048C : 0241 3C00           		andi.w	#$3C00,d1
(1)  402/FFFFFFFFFFFF0490 : E449                		lsr.w	#2,d1
(1)  403/FFFFFFFFFFFF0492 : D246                		add.w	d6,d1
(1)  404/FFFFFFFFFFFF0494 : 342D 0004           		move.w	4(a5),d2
(1)  405/FFFFFFFFFFFF0498 : 362D 0002           		move.w	2(a5),d3
(1)  406/FFFFFFFFFFFF049C : 0240 03FF           		andi.w	#$03FF,d0
(1)  407/FFFFFFFFFFFF04A0 : 3CC0                		move.w	d0,(a6)+
(1)  408/FFFFFFFFFFFF04A2 : 3CC1                		move.w	d1,(a6)+
(1)  409/FFFFFFFFFFFF04A4 : 3CC2                		move.w	d2,(a6)+
(1)  410/FFFFFFFFFFFF04A6 : 3CC3                		move.w	d3,(a6)+
(1)  411/FFFFFFFFFFFF04A8 : 5246                		addq.w	#1,d6
(1)  412/FFFFFFFFFFFF04AA :                     .no_slot_s:
(1)  413/FFFFFFFFFFFF04AA : DAFC 0008           		adda	#$08,a5
(1)  414/FFFFFFFFFFFF04AE : 51CF FFCA           		dbf	d7,.next_pz
(1)  415/FFFFFFFFFFFF04B2 : 4BF8 D4A2           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  416/FFFFFFFFFFFF04B6 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  417/FFFFFFFFFFFF04BA :                     .next:
(1)  418/FFFFFFFFFFFF04BA : 0815 0007           		btst	#7,(a5)
(1)  419/FFFFFFFFFFFF04BE : 6700 0110           		beq	.no_map
(1)  420/FFFFFFFFFFFF04C2 : 2055                		move.l	(a5),a0
(1)  421/FFFFFFFFFFFF04C4 : 4847                		swap	d7
(1)  422/FFFFFFFFFFFF04C6 : 7000                		moveq	#0,d0
(1)  423/FFFFFFFFFFFF04C8 : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  424/FFFFFFFFFFFF04CC : D040                		add.w	d0,d0
(1)  425/FFFFFFFFFFFF04CE : 3030 0000           		move.w	(a0,d0.w),d0
(1)  426/FFFFFFFFFFFF04D2 : 41F0 0000           		lea	(a0,d0.w),a0
(1)  427/FFFFFFFFFFFF04D6 : 3A18                		move.w	(a0)+,d5
(1)  428/FFFFFFFFFFFF04D8 : 6700 00F6           		beq	.no_map
(1)  429/FFFFFFFFFFFF04DC : 5345                		subq.w	#1,d5
(1)  430/FFFFFFFFFFFF04DE :                     .mk_pz:
(1)  431/FFFFFFFFFFFF04DE : 0C46 0050           		cmpi.w	#80,d6
(1)  432/FFFFFFFFFFFF04E2 : 6E00 00F6           		bgt	.stop_all
(1)  433/FFFFFFFFFFFF04E6 : 4845                		swap	d5
(1)  434/FFFFFFFFFFFF04E8 : 4846                		swap	d6
(1)  435/FFFFFFFFFFFF04EA : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  436/FFFFFFFFFFFF04EC : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  437/FFFFFFFFFFFF04EE : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  438/FFFFFFFFFFFF04F0 : 0838 0002 E45B      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  439/FFFFFFFFFFFF04F6 : 6710                		beq.s	.ex_vram
(1)  440/FFFFFFFFFFFF04F8 : 3801                		move.w	d1,d4
(1)  441/FFFFFFFFFFFF04FA : 0241 000C           		andi.w	#%1100,d1
(1)  442/FFFFFFFFFFFF04FE : 0244 0003           		andi.w	#%0011,d4
(1)  443/FFFFFFFFFFFF0502 : E24C                		lsr.w	#1,d4
(1)  444/FFFFFFFFFFFF0504 : 8244                		or.w	d4,d1
(1)  445/FFFFFFFFFFFF0506 : E24A                		lsr.w	#1,d2
(1)  446/FFFFFFFFFFFF0508 :                     .ex_vram:
(1)  447/FFFFFFFFFFFF0508 : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  448/FFFFFFFFFFFF050C : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  449/FFFFFFFFFFFF050E : 4880                		ext.w	d0
(1)  450/FFFFFFFFFFFF0510 : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  451/FFFFFFFFFFFF0514 : 3805                		move.w	d5,d4
(1)  452/FFFFFFFFFFFF0516 : 0838 0002 E45B      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  453/FFFFFFFFFFFF051C : 670E                		beq.s	.ex_vrams
(1)  454/FFFFFFFFFFFF051E : 3805                		move.w	d5,d4
(1)  455/FFFFFFFFFFFF0520 : 0244 F800           		andi.w	#$F800,d4
(1)  456/FFFFFFFFFFFF0524 : 0245 07FF           		andi.w	#$07FF,d5
(1)  457/FFFFFFFFFFFF0528 : E24D                		lsr.w	#1,d5
(1)  458/FFFFFFFFFFFF052A : 8A44                		or.w	d4,d5
(1)  459/FFFFFFFFFFFF052C :                     .ex_vrams:
(1)  460/FFFFFFFFFFFF052C : 3805                		move.w	d5,d4
(1)  461/FFFFFFFFFFFF052E : 0244 1000           		andi.w	#$1000,d4
(1)  462/FFFFFFFFFFFF0532 : 6710                		beq.s	.vram_v
(1)  463/FFFFFFFFFFFF0534 : 4440                		neg.w	d0
(1)  464/FFFFFFFFFFFF0536 : 0440 0008           		subi.w	#8,d0
(1)  465/FFFFFFFFFFFF053A : 3C01                		move.w	d1,d6
(1)  466/FFFFFFFFFFFF053C : 0246 0003           		andi.w	#%0011,d6
(1)  467/FFFFFFFFFFFF0540 : E74E                		lsl.w	#3,d6
(1)  468/FFFFFFFFFFFF0542 : 9046                		sub.w	d6,d0
(1)  469/FFFFFFFFFFFF0544 :                     .vram_v:
(1)  470/FFFFFFFFFFFF0544 : 3805                		move.w	d5,d4
(1)  471/FFFFFFFFFFFF0546 : 0244 0800           		andi.w	#$0800,d4
(1)  472/FFFFFFFFFFFF054A : 6710                		beq.s	.vram_h
(1)  473/FFFFFFFFFFFF054C : 4443                		neg.w	d3
(1)  474/FFFFFFFFFFFF054E : 0443 0008           		subi.w	#8,d3
(1)  475/FFFFFFFFFFFF0552 : 3C01                		move.w	d1,d6
(1)  476/FFFFFFFFFFFF0554 : 0246 000C           		andi.w	#%1100,d6
(1)  477/FFFFFFFFFFFF0558 : DC46                		add.w	d6,d6
(1)  478/FFFFFFFFFFFF055A : 9646                		sub.w	d6,d3
(1)  479/FFFFFFFFFFFF055C :                     .vram_h:
(1)  480/FFFFFFFFFFFF055C : D445                		add.w	d5,d2
(1)  481/FFFFFFFFFFFF055E : 4845                		swap	d5
(1)  482/FFFFFFFFFFFF0560 : 4846                		swap	d6
(1)  483/FFFFFFFFFFFF0562 : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  484/FFFFFFFFFFFF0566 : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  485/FFFFFFFFFFFF056A : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  486/FFFFFFFFFFFF056E : 6C5C                		bge.s	.no_pz
(1)  487/FFFFFFFFFFFF0570 : 3801                		move.w	d1,d4
(1)  488/FFFFFFFFFFFF0572 : 0244 000C           		andi.w	#%1100,d4
(1)  489/FFFFFFFFFFFF0576 : D844                		add.w	d4,d4
(1)  490/FFFFFFFFFFFF0578 : D87C 0008           		add.w	#8,d4
(1)  491/FFFFFFFFFFFF057C : 3E03                		move.w	d3,d7
(1)  492/FFFFFFFFFFFF057E : DE44                		add.w	d4,d7
(1)  493/FFFFFFFFFFFF0580 : 6B4A                		bmi.s	.no_pz
(1)  494/FFFFFFFFFFFF0582 : 383C 00F0           		move.w	#240,d4
(1)  495/FFFFFFFFFFFF0586 : 0838 0002 E45B      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  496/FFFFFFFFFFFF058C : 6702                		beq.s	.ex_yext
(1)  497/FFFFFFFFFFFF058E : D844                		add.w	d4,d4
(1)  498/FFFFFFFFFFFF0590 :                     .ex_yext:
(1)  499/FFFFFFFFFFFF0590 : B044                		cmp.w	d4,d0
(1)  500/FFFFFFFFFFFF0592 : 6C38                		bge.s	.no_pz
(1)  501/FFFFFFFFFFFF0594 : 3801                		move.w	d1,d4
(1)  502/FFFFFFFFFFFF0596 : 0244 0003           		andi.w	#%0011,d4
(1)  503/FFFFFFFFFFFF059A : E74C                		lsl.w	#3,d4
(1)  504/FFFFFFFFFFFF059C : D87C 0008           		add.w	#8,d4
(1)  505/FFFFFFFFFFFF05A0 : 3E00                		move.w	d0,d7
(1)  506/FFFFFFFFFFFF05A2 : DE44                		add.w	d4,d7
(1)  507/FFFFFFFFFFFF05A4 : 6B26                		bmi.s	.no_pz
(1)  508/FFFFFFFFFFFF05A6 : E149                		lsl.w	#8,d1			; Size + Link
(1)  509/FFFFFFFFFFFF05A8 : 8246                		or.w	d6,d1
(1)  510/FFFFFFFFFFFF05AA : 0640 0080           		addi.w	#$80,d0
(1)  511/FFFFFFFFFFFF05AE : 3838 E45A           		move.w	(RAM_VdpRegSetC).w,d4
(1)  512/FFFFFFFFFFFF05B2 : 0804 0002           		btst	#2,d4
(1)  513/FFFFFFFFFFFF05B6 : 6704                		beq.s	.dont_add
(1)  514/FFFFFFFFFFFF05B8 : 0640 0080           		addi.w	#$80,d0
(1)  515/FFFFFFFFFFFF05BC :                     .dont_add:
(1)  516/FFFFFFFFFFFF05BC : 0643 0080           		addi.w	#$80,d3
(1)  517/FFFFFFFFFFFF05C0 : 3CC0                		move.w	d0,(a6)+
(1)  518/FFFFFFFFFFFF05C2 : 3CC1                		move.w	d1,(a6)+
(1)  519/FFFFFFFFFFFF05C4 : 3CC2                		move.w	d2,(a6)+
(1)  520/FFFFFFFFFFFF05C6 : 3CC3                		move.w	d3,(a6)+
(1)  521/FFFFFFFFFFFF05C8 : DC7C 0001           		add.w	#1,d6
(1)  522/FFFFFFFFFFFF05CC :                     .no_pz:
(1)  523/FFFFFFFFFFFF05CC : 51CD FF10           		dbf	d5,.mk_pz
(1)  524/FFFFFFFFFFFF05D0 :                     .no_map:
(1)  525/FFFFFFFFFFFF05D0 : DAFC 0010           		adda	#$10,a5
(1)  526/FFFFFFFFFFFF05D4 : 4847                		swap	d7
(1)  527/FFFFFFFFFFFF05D6 :                     .no_slot:
(1)  528/FFFFFFFFFFFF05D6 : 51CF FEE2           		dbf	d7,.next
(1)  529/FFFFFFFFFFFF05DA :                     .stop_all:
(1)  530/FFFFFFFFFFFF05DA : 614A                		bsr	vid_CheckLastSpr
(1)  531/FFFFFFFFFFFF05DC : 31C6 E442           		move.w	d6,(RAM_SprLinkNum).w
(1)  532/FFFFFFFFFFFF05E0 :                     
(1)  533/FFFFFFFFFFFF05E0 :                     ; --------------------------------------------------------
(1)  534/FFFFFFFFFFFF05E0 :                     ; Reset slots
(1)  535/FFFFFFFFFFFF05E0 :                     ; --------------------------------------------------------
(1)  536/FFFFFFFFFFFF05E0 :                     
(1)  537/FFFFFFFFFFFF05E0 :                     .freeze:
(1)  538/FFFFFFFFFFFF05E0 : 4DF8 D622           		lea	(RAM_SprPzList).w,a6
(1)  539/FFFFFFFFFFFF05E4 : 7E4F                		moveq	#80-1,d7
(1)  540/FFFFFFFFFFFF05E6 : 7C08                		moveq	#$08,d6
(1)  541/FFFFFFFFFFFF05E8 :                     .chk_spr_r:
(1)  542/FFFFFFFFFFFF05E8 : 1A16                		move.b	(a6),d5
(1)  543/FFFFFFFFFFFF05EA : 0805 0007           		btst	#7,d5
(1)  544/FFFFFFFFFFFF05EE : 670C                		beq.s	.no_slot_r
(1)  545/FFFFFFFFFFFF05F0 : 0805 0006           		btst	#6,d5
(1)  546/FFFFFFFFFFFF05F4 : 6706                		beq.s	.no_slot_r
(1)  547/FFFFFFFFFFFF05F6 : 4296                		clr.l	(a6)
(1)  548/FFFFFFFFFFFF05F8 : 42AE 0004           		clr.l	4(a6)
(1)  549/FFFFFFFFFFFF05FC :                     .no_slot_r:
(1)  550/FFFFFFFFFFFF05FC : DCC6                		adda	d6,a6
(1)  551/FFFFFFFFFFFF05FE : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  552/FFFFFFFFFFFF0602 : 4DF8 D4A2           		lea	(RAM_SprMapList).w,a6
(1)  553/FFFFFFFFFFFF0606 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  554/FFFFFFFFFFFF0608 : 7C10                		moveq	#$10,d6
(1)  555/FFFFFFFFFFFF060A :                     .chk_spr_mr:
(1)  556/FFFFFFFFFFFF060A : 1A16                		move.b	(a6),d5
(1)  557/FFFFFFFFFFFF060C : 0805 0007           		btst	#7,d5
(1)  558/FFFFFFFFFFFF0610 : 670C                		beq.s	.no_slot_mr
(1)  559/FFFFFFFFFFFF0612 : 0805 0006           		btst	#6,d5
(1)  560/FFFFFFFFFFFF0616 : 6706                		beq.s	.no_slot_mr
(1)  561/FFFFFFFFFFFF0618 : 4296                		clr.l	(a6)
(1)  562/FFFFFFFFFFFF061A : 42AE 0004           		clr.l	4(a6)
(1)  563/FFFFFFFFFFFF061E :                     .no_slot_mr:
(1)  564/FFFFFFFFFFFF061E : DCC6                		adda	d6,a6
(1)  565/FFFFFFFFFFFF0620 : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  566/FFFFFFFFFFFF0624 : 4E75                		rts
(1)  567/FFFFFFFFFFFF0626 :                     
(1)  568/FFFFFFFFFFFF0626 :                     ; --------------------------------------------------------
(1)  569/FFFFFFFFFFFF0626 :                     ; d6 - Current link
(1)  570/FFFFFFFFFFFF0626 :                     
(1)  571/FFFFFFFFFFFF0626 :                     vid_CheckLastSpr:
(1)  572/FFFFFFFFFFFF0626 : 4DF8 DCB2           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  573/FFFFFFFFFFFF062A : 0C46 0001           		cmpi.w	#1,d6
(1)  574/FFFFFFFFFFFF062E : 6710                		beq.s	.blnk_first
(1)  575/FFFFFFFFFFFF0630 : 0C46 0050           		cmpi.w	#80,d6
(1)  576/FFFFFFFFFFFF0634 : 6E10                		bgt.s	.last_one
(1)  577/FFFFFFFFFFFF0636 : 3E06                		move.w	d6,d7
(1)  578/FFFFFFFFFFFF0638 : 0447 0001           		subi.w	#1,d7
(1)  579/FFFFFFFFFFFF063C : E74F                		lsl.w	#3,d7
(1)  580/FFFFFFFFFFFF063E : DCC7                		adda	d7,a6
(1)  581/FFFFFFFFFFFF0640 :                     .blnk_first:
(1)  582/FFFFFFFFFFFF0640 : 429E                		clr.l	(a6)+
(1)  583/FFFFFFFFFFFF0642 : 429E                		clr.l	(a6)+
(1)  584/FFFFFFFFFFFF0644 : 6010                		bra.s	.spr_exit
(1)  585/FFFFFFFFFFFF0646 :                     .last_one:
(1)  586/FFFFFFFFFFFF0646 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  587/FFFFFFFFFFFF064A : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  588/FFFFFFFFFFFF064E : 0247 0F00           		andi.w	#$0F00,d7
(1)  589/FFFFFFFFFFFF0652 : 3D47 0002           		move.w	d7,2(a6)
(1)  590/FFFFFFFFFFFF0656 :                     .spr_exit:
(1)  591/FFFFFFFFFFFF0656 : 4E75                		rts
(1)  592/FFFFFFFFFFFF0658 :                     
(1)  593/FFFFFFFFFFFF0658 :                     ; ====================================================================
(1)  594/FFFFFFFFFFFF0658 :                     ; --------------------------------------------------------
(1)  595/FFFFFFFFFFFF0658 :                     ; Subroutines
(1)  596/FFFFFFFFFFFF0658 :                     ; --------------------------------------------------------
(1)  597/FFFFFFFFFFFF0658 :                     
(1)  598/FFFFFFFFFFFF0658 :                     ; --------------------------------------------------------
(1)  599/FFFFFFFFFFFF0658 :                     ; Video_Clear
(1)  600/FFFFFFFFFFFF0658 :                     ;
(1)  601/FFFFFFFFFFFF0658 :                     ; Clears VDP VRAM and other RAM sections
(1)  602/FFFFFFFFFFFF0658 :                     ;
(1)  603/FFFFFFFFFFFF0658 :                     ; Breaks:
(1)  604/FFFFFFFFFFFF0658 :                     ; ALL
(1)  605/FFFFFFFFFFFF0658 :                     ; --------------------------------------------------------
(1)  606/FFFFFFFFFFFF0658 :                     
(1)  607/FFFFFFFFFFFF0658 :                     Video_Clear:
(1)  609/FFFFFFFFFFFF0658 : 4DF8 CA42           		lea	(RAM_MdMars_CommBuff).w,a6		; ****
(1)  610/FFFFFFFFFFFF065C : 3E3C 050F           		move.w	#(Dreq_len/2)-1,d7
(1)  611/FFFFFFFFFFFF0660 : 7C00                		moveq	#0,d6
(1)  612/FFFFFFFFFFFF0662 :                     .pmnext:
(1)  613/FFFFFFFFFFFF0662 : 3CC6                		move.w	d6,(a6)+
(1)  614/FFFFFFFFFFFF0664 : 51CF FFFC           		dbf	d7,.pmnext
(1)  616/FFFFFFFFFFFF0668 : 7C00                		moveq	#0,d6
(1)  617/FFFFFFFFFFFF066A : 4DF8 D462           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  618/FFFFFFFFFFFF066E : 3E3C 0E53           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  619/FFFFFFFFFFFF0672 :                     .clr_me:
(1)  620/FFFFFFFFFFFF0672 : 1CC6                		move.b	d6,(a6)+
(1)  621/FFFFFFFFFFFF0674 : 51CF FFFC           		dbf	d7,.clr_me
(1)  622/FFFFFFFFFFFF0678 : 303C 0000           		move.w	#0,d0
(1)  623/FFFFFFFFFFFF067C : 323C 0000           		move.w	#0,d1
(1)  624/FFFFFFFFFFFF0680 : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  625/FFFFFFFFFFFF0684 : 6100 02D6           		bsr	Video_Fill
(1)  626/FFFFFFFFFFFF0688 :                     
(1)  627/FFFFFFFFFFFF0688 :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF0688 :                     ; Video_ClearScreen
(1)  629/FFFFFFFFFFFF0688 :                     ;
(1)  630/FFFFFFFFFFFF0688 :                     ; Clears ALL 3 map layers.
(1)  631/FFFFFFFFFFFF0688 :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF0688 :                     
(1)  633/FFFFFFFFFFFF0688 :                     Video_ClearScreen:
(1)  634/FFFFFFFFFFFF0688 : 7000                		moveq	#0,d0
(1)  635/FFFFFFFFFFFF068A : 3238 E448           		move.w	(RAM_VdpVramFG).w,d1
(1)  636/FFFFFFFFFFFF068E : 3438 E452           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  637/FFFFFFFFFFFF0692 : 6100 02C8           		bsr	Video_Fill
(1)  638/FFFFFFFFFFFF0696 : 3238 E44A           		move.w	(RAM_VdpVramBG).w,d1
(1)  639/FFFFFFFFFFFF069A : 6100 02C0           		bsr	Video_Fill
(1)  640/FFFFFFFFFFFF069E : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  641/FFFFFFFFFFFF06A2 : 3E38 E45A           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  642/FFFFFFFFFFFF06A6 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  643/FFFFFFFFFFFF06AA : 6702                		beq.s	.not_small
(1)  644/FFFFFFFFFFFF06AC : D442                		add.w	d2,d2			; Size $1000
(1)  645/FFFFFFFFFFFF06AE :                     .not_small:
(1)  646/FFFFFFFFFFFF06AE : 3238 E44C           		move.w	(RAM_VdpVramWD).w,d1
(1)  647/FFFFFFFFFFFF06B2 : 6000 02A8           		bra	Video_Fill
(1)  648/FFFFFFFFFFFF06B6 :                     
(1)  649/FFFFFFFFFFFF06B6 :                     ; --------------------------------------------------------
(1)  650/FFFFFFFFFFFF06B6 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  651/FFFFFFFFFFFF06B6 :                     ;
(1)  652/FFFFFFFFFFFF06B6 :                     ; Enable/Disable VDP Display
(1)  653/FFFFFFFFFFFF06B6 :                     ; --------------------------------------------------------
(1)  654/FFFFFFFFFFFF06B6 :                     
(1)  655/FFFFFFFFFFFF06B6 :                     Video_DisplayOn:
(1)  656/FFFFFFFFFFFF06B6 : 3F07                		move.w	d7,-(sp)
(1)  657/FFFFFFFFFFFF06B8 : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  658/FFFFFFFFFFFF06BC : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  659/FFFFFFFFFFFF06C0 : 6022                		bra.s	vid_WrtReg01
(1)  660/FFFFFFFFFFFF06C2 :                     Video_DisplayOff:
(1)  661/FFFFFFFFFFFF06C2 : 3F07                		move.w	d7,-(sp)
(1)  662/FFFFFFFFFFFF06C4 : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  663/FFFFFFFFFFFF06C8 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  664/FFFFFFFFFFFF06CC : 6016                		bra.s	vid_WrtReg01
(1)  665/FFFFFFFFFFFF06CE :                     
(1)  666/FFFFFFFFFFFF06CE :                     ; --------------------------------------------------------
(1)  667/FFFFFFFFFFFF06CE :                     ; Video_DmaOn, Video_DmaOff
(1)  668/FFFFFFFFFFFF06CE :                     ;
(1)  669/FFFFFFFFFFFF06CE :                     ; Enable/Disable DMA
(1)  670/FFFFFFFFFFFF06CE :                     ; --------------------------------------------------------
(1)  671/FFFFFFFFFFFF06CE :                     
(1)  672/FFFFFFFFFFFF06CE :                     Video_DmaOn:
(1)  673/FFFFFFFFFFFF06CE : 3F07                		move.w	d7,-(sp)
(1)  674/FFFFFFFFFFFF06D0 : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  675/FFFFFFFFFFFF06D4 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  676/FFFFFFFFFFFF06D8 : 600A                		bra.s	vid_WrtReg01
(1)  677/FFFFFFFFFFFF06DA :                     Video_DmaOff:
(1)  678/FFFFFFFFFFFF06DA : 3F07                		move.w	d7,-(sp)
(1)  679/FFFFFFFFFFFF06DC : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  680/FFFFFFFFFFFF06E0 : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  681/FFFFFFFFFFFF06E4 :                     
(1)  682/FFFFFFFFFFFF06E4 :                     ; ------------------------------------------------
(1)  683/FFFFFFFFFFFF06E4 :                     
(1)  684/FFFFFFFFFFFF06E4 :                     vid_WrtReg01:
(1)  685/FFFFFFFFFFFF06E4 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  686/FFFFFFFFFFFF06EA : 31C7 E456           		move.w	d7,(RAM_VdpRegSet1).w
(1)  687/FFFFFFFFFFFF06EE : 3E1F                		move.w	(sp)+,d7
(1)  688/FFFFFFFFFFFF06F0 : 4E75                		rts
(1)  689/FFFFFFFFFFFF06F2 :                     
(1)  690/FFFFFFFFFFFF06F2 :                     ; --------------------------------------------------------
(1)  691/FFFFFFFFFFFF06F2 :                     ; Video_IntEnable
(1)  692/FFFFFFFFFFFF06F2 :                     ;
(1)  693/FFFFFFFFFFFF06F2 :                     ; Enable or Disable VBlank, HBlank and External
(1)  694/FFFFFFFFFFFF06F2 :                     ; interrupts
(1)  695/FFFFFFFFFFFF06F2 :                     ;
(1)  696/FFFFFFFFFFFF06F2 :                     ; Input:
(1)  697/FFFFFFFFFFFF06F2 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  698/FFFFFFFFFFFF06F2 :                     ;      | %00000EHV
(1)  699/FFFFFFFFFFFF06F2 :                     ;      | E - External
(1)  700/FFFFFFFFFFFF06F2 :                     ;      | H - HBlank
(1)  701/FFFFFFFFFFFF06F2 :                     ;      | V - VBlank
(1)  702/FFFFFFFFFFFF06F2 :                     ;
(1)  703/FFFFFFFFFFFF06F2 :                     ; Notes:
(1)  704/FFFFFFFFFFFF06F2 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  705/FFFFFFFFFFFF06F2 :                     ; --------------------------------------------------------
(1)  706/FFFFFFFFFFFF06F2 :                     
(1)  707/FFFFFFFFFFFF06F2 :                     Video_IntEnable:
(1)  708/FFFFFFFFFFFF06F2 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  709/FFFFFFFFFFFF06F6 : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  710/FFFFFFFFFFFF06FA : 3C00                		move.w	d0,d6
(1)  711/FFFFFFFFFFFF06FC : 0246 0001           		andi.w	#1,d6			; %--V
(1)  712/FFFFFFFFFFFF0700 : EB4E                		lsl.w	#5,d6
(1)  713/FFFFFFFFFFFF0702 : 8E46                		or.w	d6,d7
(1)  714/FFFFFFFFFFFF0704 : 31C7 E456           		move.w	d7,(RAM_VdpRegSet1).w
(1)  715/FFFFFFFFFFFF0708 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  716/FFFFFFFFFFFF070E : 3E38 E454           		move.w	(RAM_VdpRegSet0).w,d7
(1)  717/FFFFFFFFFFFF0712 : 3C00                		move.w	d0,d6
(1)  718/FFFFFFFFFFFF0714 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  719/FFFFFFFFFFFF0718 : E74E                		lsl.w	#3,d6
(1)  720/FFFFFFFFFFFF071A : 8E46                		or.w	d6,d7
(1)  721/FFFFFFFFFFFF071C : 31C7 E454           		move.w	d7,(RAM_VdpRegSet0).w
(1)  722/FFFFFFFFFFFF0720 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  723/FFFFFFFFFFFF0726 : 3E38 E458           		move.w	(RAM_VdpRegSetB).w,d7
(1)  724/FFFFFFFFFFFF072A : 3C00                		move.w	d0,d6			; %E--
(1)  725/FFFFFFFFFFFF072C : 0246 0004           		andi.w	#%100,d6
(1)  726/FFFFFFFFFFFF0730 : DC46                		add.w	d6,d6
(1)  727/FFFFFFFFFFFF0732 : 8E46                		or.w	d6,d7
(1)  728/FFFFFFFFFFFF0734 : 31C7 E458           		move.w	d7,(RAM_VdpRegSetB).w
(1)  729/FFFFFFFFFFFF0738 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  730/FFFFFFFFFFFF073E : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  731/FFFFFFFFFFFF0742 : 4E75                		rts
(1)  732/FFFFFFFFFFFF0744 :                     
(1)  733/FFFFFFFFFFFF0744 :                     ; --------------------------------------------------------
(1)  734/FFFFFFFFFFFF0744 :                     ; Video_Resolution
(1)  735/FFFFFFFFFFFF0744 :                     ;
(1)  736/FFFFFFFFFFFF0744 :                     ; Set video resolution
(1)  737/FFFFFFFFFFFF0744 :                     ;
(1)  738/FFFFFFFFFFFF0744 :                     ; Input:
(1)  739/FFFFFFFFFFFF0744 :                     ; d0.w | $00 - Horizontal 256
(1)  740/FFFFFFFFFFFF0744 :                     ;      | $01 - Horizontal 320
(1)  741/FFFFFFFFFFFF0744 :                     ;
(1)  742/FFFFFFFFFFFF0744 :                     ; d1.w | $00 - Vertical 224
(1)  743/FFFFFFFFFFFF0744 :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  744/FFFFFFFFFFFF0744 :                     ;      | $02 - Double resolution mode
(1)  745/FFFFFFFFFFFF0744 :                     ;      | $03 - INVALID
(1)  746/FFFFFFFFFFFF0744 :                     ; --------------------------------------------------------
(1)  747/FFFFFFFFFFFF0744 :                     
(1)  748/FFFFFFFFFFFF0744 :                     Video_Resolution:
(1)  749/FFFFFFFFFFFF0744 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  750/FFFFFFFFFFFF0748 : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  751/FFFFFFFFFFFF074C : 0207 00F7           		andi.b	#%11110111,d7
(1)  752/FFFFFFFFFFFF0750 : 3C01                		move.w	d1,d6
(1)  753/FFFFFFFFFFFF0752 : CC7C 0001           		and.w	#1,d6
(1)  754/FFFFFFFFFFFF0756 : E74E                		lsl.w	#3,d6
(1)  755/FFFFFFFFFFFF0758 : 8E46                		or.w	d6,d7
(1)  756/FFFFFFFFFFFF075A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  757/FFFFFFFFFFFF0760 : 31C7 E456           		move.w	d7,(RAM_VdpRegSet1).w
(1)  758/FFFFFFFFFFFF0764 : 3E38 E45A           		move.w	(RAM_VdpRegSetC).w,d7
(1)  759/FFFFFFFFFFFF0768 : 0207 0078           		andi.b	#%01111000,d7
(1)  760/FFFFFFFFFFFF076C : 3C00                		move.w	d0,d6
(1)  761/FFFFFFFFFFFF076E : CC7C 0001           		and.w	#$01,d6
(1)  762/FFFFFFFFFFFF0772 : 6704                		beq.s	.ex_bit
(1)  763/FFFFFFFFFFFF0774 : 8C7C 0081           		or.w	#$81,d6
(1)  764/FFFFFFFFFFFF0778 :                     .ex_bit:
(1)  765/FFFFFFFFFFFF0778 : 8E46                		or.w	d6,d7
(1)  766/FFFFFFFFFFFF077A : 3C01                		move.w	d1,d6
(1)  767/FFFFFFFFFFFF077C : CC7C 0002           		and.w	#%010,d6
(1)  768/FFFFFFFFFFFF0780 : 6704                		beq.s	.double
(1)  769/FFFFFFFFFFFF0782 : 8C7C 0004           		or.w	#%100,d6
(1)  770/FFFFFFFFFFFF0786 :                     .double:
(1)  771/FFFFFFFFFFFF0786 : 8E46                		or.w	d6,d7
(1)  772/FFFFFFFFFFFF0788 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  773/FFFFFFFFFFFF078E : 31C7 E45A           		move.w	d7,(RAM_VdpRegSetC).w
(1)  774/FFFFFFFFFFFF0792 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  775/FFFFFFFFFFFF0796 : 4E75                		rts
(1)  776/FFFFFFFFFFFF0798 :                     
(1)  777/FFFFFFFFFFFF0798 :                     ; --------------------------------------------------------
(1)  778/FFFFFFFFFFFF0798 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  779/FFFFFFFFFFFF0798 :                     ;
(1)  780/FFFFFFFFFFFF0798 :                     ; Update VRAM locations for FG, BG, Window and
(1)  781/FFFFFFFFFFFF0798 :                     ; the Horizontal scroll
(1)  782/FFFFFFFFFFFF0798 :                     ; --------------------------------------------------------
(1)  783/FFFFFFFFFFFF0798 :                     
(1)  784/FFFFFFFFFFFF0798 :                     Video_UpdMapVram:
(1)  785/FFFFFFFFFFFF0798 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  786/FFFFFFFFFFFF079C : 3E3C 8200           		move.w	#$8200,d7
(1)  787/FFFFFFFFFFFF07A0 : 3C38 E448           		move.w	(RAM_VdpVramFG).w,d6
(1)  788/FFFFFFFFFFFF07A4 : E04E                		lsr.w	#8,d6
(1)  789/FFFFFFFFFFFF07A6 : E44E                		lsr.w	#2,d6
(1)  790/FFFFFFFFFFFF07A8 : 0246 0038           		andi.w	#%00111000,d6
(1)  791/FFFFFFFFFFFF07AC : 8E46                		or.w	d6,d7
(1)  792/FFFFFFFFFFFF07AE : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  793/FFFFFFFFFFFF07B4 : 3E3C 8300           		move.w	#$8300,d7
(1)  794/FFFFFFFFFFFF07B8 : 3C38 E44C           		move.w	(RAM_VdpVramWD).w,d6
(1)  795/FFFFFFFFFFFF07BC : E04E                		lsr.w	#8,d6
(1)  796/FFFFFFFFFFFF07BE : E44E                		lsr.w	#2,d6
(1)  797/FFFFFFFFFFFF07C0 : 0246 003E           		andi.w	#%00111110,d6
(1)  798/FFFFFFFFFFFF07C4 : 8E46                		or.w	d6,d7
(1)  799/FFFFFFFFFFFF07C6 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  800/FFFFFFFFFFFF07CC : 3E3C 8400           		move.w	#$8400,d7
(1)  801/FFFFFFFFFFFF07D0 : 3C38 E44A           		move.w	(RAM_VdpVramBG).w,d6
(1)  802/FFFFFFFFFFFF07D4 : E04E                		lsr.w	#8,d6
(1)  803/FFFFFFFFFFFF07D6 : EA4E                		lsr.w	#5,d6
(1)  804/FFFFFFFFFFFF07D8 : 0246 0007           		andi.w	#%00000111,d6
(1)  805/FFFFFFFFFFFF07DC : 8E46                		or.w	d6,d7
(1)  806/FFFFFFFFFFFF07DE : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  807/FFFFFFFFFFFF07E4 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  808/FFFFFFFFFFFF07E8 : 4E75                		rts
(1)  809/FFFFFFFFFFFF07EA :                     
(1)  810/FFFFFFFFFFFF07EA :                     Video_UpdSprHVram:
(1)  811/FFFFFFFFFFFF07EA : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  812/FFFFFFFFFFFF07EE : 3E3C 8500           		move.w	#$8500,d7
(1)  813/FFFFFFFFFFFF07F2 : 3C38 E44E           		move.w	(RAM_VdpVramSpr).w,d6
(1)  814/FFFFFFFFFFFF07F6 : E04E                		lsr.w	#8,d6
(1)  815/FFFFFFFFFFFF07F8 : E24E                		lsr.w	#1,d6
(1)  816/FFFFFFFFFFFF07FA : 0246 007F           		andi.w	#%01111111,d6
(1)  817/FFFFFFFFFFFF07FE : 8E46                		or.w	d6,d7
(1)  818/FFFFFFFFFFFF0800 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  819/FFFFFFFFFFFF0806 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  820/FFFFFFFFFFFF080A : 3C38 E450           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  821/FFFFFFFFFFFF080E : E04E                		lsr.w	#8,d6
(1)  822/FFFFFFFFFFFF0810 : E44E                		lsr.w	#2,d6
(1)  823/FFFFFFFFFFFF0812 : 0246 003F           		andi.w	#%00111111,d6
(1)  824/FFFFFFFFFFFF0816 : 8E46                		or.w	d6,d7
(1)  825/FFFFFFFFFFFF0818 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  826/FFFFFFFFFFFF081E : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  827/FFFFFFFFFFFF0822 : 4E75                		rts
(1)  828/FFFFFFFFFFFF0824 :                     
(1)  829/FFFFFFFFFFFF0824 :                     ; --------------------------------------------------------
(1)  830/FFFFFFFFFFFF0824 :                     ; Video_SetMapSize
(1)  831/FFFFFFFFFFFF0824 :                     ;
(1)  832/FFFFFFFFFFFF0824 :                     ; Set MAP size(s) to FG and BG
(1)  833/FFFFFFFFFFFF0824 :                     ;
(1)  834/FFFFFFFFFFFF0824 :                     ; Input:
(1)  835/FFFFFFFFFFFF0824 :                     ; d0.w | Width: %00 - H32
(1)  836/FFFFFFFFFFFF0824 :                     ;      |        %01 - H40
(1)  837/FFFFFFFFFFFF0824 :                     ;      |        %11 - H128
(1)  838/FFFFFFFFFFFF0824 :                     ;
(1)  839/FFFFFFFFFFFF0824 :                     ; d1.w | Height: %00 - V32
(1)  840/FFFFFFFFFFFF0824 :                     ;      |         %01 - V40
(1)  841/FFFFFFFFFFFF0824 :                     ;      |         %11 - V128
(1)  842/FFFFFFFFFFFF0824 :                     ;
(1)  843/FFFFFFFFFFFF0824 :                     ; Notes:
(1)  844/FFFFFFFFFFFF0824 :                     ; Maximum size for a single layer size
(1)  845/FFFFFFFFFFFF0824 :                     ; is $1000
(1)  846/FFFFFFFFFFFF0824 :                     ; --------------------------------------------------------
(1)  847/FFFFFFFFFFFF0824 :                     
(1)  848/FFFFFFFFFFFF0824 :                     Video_SetMapSize:
(1)  849/FFFFFFFFFFFF0824 : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  850/FFFFFFFFFFFF0828 : 3E3C 9000           		move.w	#$9000,d7
(1)  851/FFFFFFFFFFFF082C : 3C00                		move.w	d0,d6
(1)  852/FFFFFFFFFFFF082E : 3A01                		move.w	d1,d5
(1)  853/FFFFFFFFFFFF0830 : 0246 0003           		andi.w	#%11,d6
(1)  854/FFFFFFFFFFFF0834 : 0245 0003           		andi.w	#%11,d5
(1)  855/FFFFFFFFFFFF0838 : E94D                		lsl.w	#4,d5
(1)  856/FFFFFFFFFFFF083A : 8C45                		or.w	d5,d6
(1)  857/FFFFFFFFFFFF083C : 8E46                		or.w	d6,d7
(1)  858/FFFFFFFFFFFF083E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  859/FFFFFFFFFFFF0844 : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  860/FFFFFFFFFFFF0848 : 4E75                		rts
(1)  861/FFFFFFFFFFFF084A :                     
(1)  862/FFFFFFFFFFFF084A :                     ; --------------------------------------------------------
(1)  863/FFFFFFFFFFFF084A :                     ; Video_LoadArt
(1)  864/FFFFFFFFFFFF084A :                     ;
(1)  865/FFFFFFFFFFFF084A :                     ; Loads VDP graphics using DMA
(1)  866/FFFFFFFFFFFF084A :                     ;
(1)  867/FFFFFFFFFFFF084A :                     ; Input:
(1)  868/FFFFFFFFFFFF084A :                     ; d0.l | Graphics data (NOT a0)
(1)  869/FFFFFFFFFFFF084A :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  870/FFFFFFFFFFFF084A :                     ; d2.w | Size:          cell_vram(size)
(1)  871/FFFFFFFFFFFF084A :                     ;
(1)  872/FFFFFFFFFFFF084A :                     ; Notes:
(1)  873/FFFFFFFFFFFF084A :                     ; - For a faster load: call this during VBlank or
(1)  874/FFFFFFFFFFFF084A :                     ;   disable VDP Display temporally.
(1)  875/FFFFFFFFFFFF084A :                     ;
(1)  876/FFFFFFFFFFFF084A :                     ; * 32X Cartridge ONLY:
(1)  877/FFFFFFFFFFFF084A :                     ; - This sets RV bit, make sure your code is
(1)  878/FFFFFFFFFFFF084A :                     ;   running on RAM (already doing here) and the
(1)  879/FFFFFFFFFFFF084A :                     ;   SH2 is not reading from it's ROM area CS1
(1)  880/FFFFFFFFFFFF084A :                     ; --------------------------------------------------------
(1)  881/FFFFFFFFFFFF084A :                     
(1)  882/FFFFFFFFFFFF084A :                     Video_LoadArt:
(1)  883/FFFFFFFFFFFF084A : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  884/FFFFFFFFFFFF084E : 2E00                		move.l	d0,d7
(1)  885/FFFFFFFFFFFF0850 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  886/FFFFFFFFFFFF0856 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  887/FFFFFFFFFFFF085C : 6736                		beq.s	.normal
(1)  888/FFFFFFFFFFFF085E : 2A00                		move.l	d0,d5
(1)  889/FFFFFFFFFFFF0860 : DA42                		add.w	d2,d5
(1)  890/FFFFFFFFFFFF0862 : 6430                		bcc.s	.normal
(1)  891/FFFFFFFFFFFF0864 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  892/FFFFFFFFFFFF0866 : 3C01                		move.w	d1,d6
(1)  893/FFFFFFFFFFFF0868 : 2E05                		move.l	d5,d7		; Top
(1)  894/FFFFFFFFFFFF086A : 0687 0001 0000      		addi.l	#$010000,d7
(1)  895/FFFFFFFFFFFF0870 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  896/FFFFFFFFFFFF0876 : 9E80                		sub.l	d0,d7
(1)  897/FFFFFFFFFFFF0878 : 6128                		bsr.s	.mk_set
(1)  898/FFFFFFFFFFFF087A : 2A00                		move.l	d0,d5		; Bottom
(1)  899/FFFFFFFFFFFF087C : 0685 0001 0000      		addi.l	#$010000,d5
(1)  900/FFFFFFFFFFFF0882 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  901/FFFFFFFFFFFF0888 : 2C05                		move.l	d5,d6
(1)  902/FFFFFFFFFFFF088A : 9C80                		sub.l	d0,d6
(1)  903/FFFFFFFFFFFF088C : 3E02                		move.w	d2,d7
(1)  904/FFFFFFFFFFFF088E : 9E46                		sub.w	d6,d7
(1)  905/FFFFFFFFFFFF0890 : DC41                		add.w	d1,d6
(1)  906/FFFFFFFFFFFF0892 : 6006                		bra.s	.last_set
(1)  907/FFFFFFFFFFFF0894 :                     .normal:
(1)  908/FFFFFFFFFFFF0894 : 2A00                		move.l	d0,d5
(1)  909/FFFFFFFFFFFF0896 : 3C01                		move.w	d1,d6
(1)  910/FFFFFFFFFFFF0898 : 3E02                		move.w	d2,d7
(1)  911/FFFFFFFFFFFF089A :                     .last_set:
(1)  912/FFFFFFFFFFFF089A : 6106                		bsr.s	.mk_set
(1)  913/FFFFFFFFFFFF089C : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  914/FFFFFFFFFFFF08A0 : 4E75                		rts
(1)  915/FFFFFFFFFFFF08A2 :                     
(1)  916/FFFFFFFFFFFF08A2 :                     ; d7 - size
(1)  917/FFFFFFFFFFFF08A2 :                     ; d6 - vram
(1)  918/FFFFFFFFFFFF08A2 :                     ; d5 - data
(1)  919/FFFFFFFFFFFF08A2 :                     .mk_set:
(1)  920/FFFFFFFFFFFF08A2 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  921/FFFFFFFFFFFF08A8 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  922/FFFFFFFFFFFF08AE : 6734                		beq.s	.bad_size
(1)  923/FFFFFFFFFFFF08B0 : 4846                		swap	d6
(1)  924/FFFFFFFFFFFF08B2 : 4845                		swap	d5
(1)  925/FFFFFFFFFFFF08B4 : 3C05                		move.w	d5,d6
(1)  926/FFFFFFFFFFFF08B6 : 4845                		swap	d5
(1)  935/FFFFFFFFFFFF08B8 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  936/FFFFFFFFFFFF08BE : 2F07                		move.l	d7,-(sp)		; <--
(1)  937/FFFFFFFFFFFF08C0 : 6100 FE0C           		bsr	Video_DmaOn
(1)  938/FFFFFFFFFFFF08C4 : 2E1F                		move.l	(sp)+,d7
(1)  939/FFFFFFFFFFFF08C6 : 0246 00FF           		andi.w	#$FF,d6
(1)  940/FFFFFFFFFFFF08CA : BC3C 00FF           		cmp.b	#$FF,d6
(1)  941/FFFFFFFFFFFF08CE : 6716                		beq.s	.ram_write
(1)  942/FFFFFFFFFFFF08D0 : 4846                		swap	d6
(1)  943/FFFFFFFFFFFF08D2 : 6126                		bsr.s	.shared_setup
(1)  944/FFFFFFFFFFFF08D4 : 6100 108A           		bsr	System_DmaEnter_ROM
(1)  945/FFFFFFFFFFFF08D8 : 3C86                		move.w	d6,(a6)			; First write
(1)  946/FFFFFFFFFFFF08DA : 3C87                		move.w	d7,(a6)			; Second write
(1)  947/FFFFFFFFFFFF08DC : 6100 109C           		bsr	System_DmaExit_ROM
(1)  948/FFFFFFFFFFFF08E0 : 6100 FDF8           		bsr	Video_DmaOff
(1)  949/FFFFFFFFFFFF08E4 :                     	; Word-RAM patch
(1)  970/FFFFFFFFFFFF08E4 :                     .bad_size:
(1)  971/FFFFFFFFFFFF08E4 : 4E75                		rts
(1)  972/FFFFFFFFFFFF08E6 :                     
(1)  973/FFFFFFFFFFFF08E6 :                     ; --------------------------------------------------------
(1)  974/FFFFFFFFFFFF08E6 :                     
(1)  975/FFFFFFFFFFFF08E6 :                     .ram_write:
(1)  976/FFFFFFFFFFFF08E6 : 4846                		swap	d6
(1)  977/FFFFFFFFFFFF08E8 : 6110                		bsr.s	.shared_setup
(1)  978/FFFFFFFFFFFF08EA : 6100 10DA           		bsr	System_DmaEnter_RAM
(1)  979/FFFFFFFFFFFF08EE : 3C86                		move.w	d6,(a6)			; First write
(1)  980/FFFFFFFFFFFF08F0 : 3C87                		move.w	d7,(a6)			; Second write
(1)  981/FFFFFFFFFFFF08F2 : 6100 10D6           		bsr	System_DmaExit_RAM
(1)  982/FFFFFFFFFFFF08F6 : 6000 FDE2           		bra	Video_DmaOff
(1)  983/FFFFFFFFFFFF08FA :                     
(1)  984/FFFFFFFFFFFF08FA :                     ; --------------------------------------------------------
(1)  985/FFFFFFFFFFFF08FA :                     
(1)  986/FFFFFFFFFFFF08FA :                     .shared_setup:
(1)  987/FFFFFFFFFFFF08FA : EF8F                		lsl.l	#7,d7
(1)  988/FFFFFFFFFFFF08FC : E04F                		lsr.w	#8,d7
(1)  989/FFFFFFFFFFFF08FE : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  990/FFFFFFFFFFFF0904 : 2C87                		move.l	d7,(a6)
(1)  991/FFFFFFFFFFFF0906 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  992/FFFFFFFFFFFF0908 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  993/FFFFFFFFFFFF090E : 1E05                 		move.b	d5,d7
(1)  994/FFFFFFFFFFFF0910 : E08D                 		lsr.l	#8,d5
(1)  995/FFFFFFFFFFFF0912 : 4847                 		swap	d7
(1)  996/FFFFFFFFFFFF0914 : 1E05                 		move.b	d5,d7
(1)  997/FFFFFFFFFFFF0916 : 2C87                 		move.l	d7,(a6)
(1)  998/FFFFFFFFFFFF0918 : 3E3C 9700            		move.w	#$9700,d7
(1)  999/FFFFFFFFFFFF091C : E08D                 		lsr.l	#8,d5
(1) 1000/FFFFFFFFFFFF091E : 1E05                 		move.b	d5,d7
(1) 1001/FFFFFFFFFFFF0920 : 3C87                 		move.w	d7,(a6)
(1) 1002/FFFFFFFFFFFF0922 : 3E06                		move.w	d6,d7			; Destination
(1) 1003/FFFFFFFFFFFF0924 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1004/FFFFFFFFFFFF092A : 0046 4000           		ori.w	#$4000,d6
(1) 1005/FFFFFFFFFFFF092E : E04F                		lsr.w	#8,d7
(1) 1006/FFFFFFFFFFFF0930 : EC4F                		lsr.w	#6,d7
(1) 1007/FFFFFFFFFFFF0932 : 0247 0003           		andi.w	#%11,d7
(1) 1008/FFFFFFFFFFFF0936 : 0047 0080           		ori.w	#$80,d7
(1) 1009/FFFFFFFFFFFF093A : 4E75                		rts
(1) 1010/FFFFFFFFFFFF093C :                     
(1) 1011/FFFFFFFFFFFF093C :                     ; --------------------------------------------------------
(1) 1012/FFFFFFFFFFFF093C :                     ; Video_LoadArt_List
(1) 1013/FFFFFFFFFFFF093C :                     ;
(1) 1014/FFFFFFFFFFFF093C :                     ; Loads VDP graphics on bulk
(1) 1015/FFFFFFFFFFFF093C :                     ;
(1) 1016/FFFFFFFFFFFF093C :                     ; Input:
(1) 1017/FFFFFFFFFFFF093C :                     ; a0 | List of graphics to load:
(1) 1018/FFFFFFFFFFFF093C :                     ;        dc.w numof_entries
(1) 1019/FFFFFFFFFFFF093C :                     ;        dc.l ART_DATA
(1) 1020/FFFFFFFFFFFF093C :                     ;        dc.w cell_vram(vram_pos)
(1) 1021/FFFFFFFFFFFF093C :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1022/FFFFFFFFFFFF093C :                     ;        ; ...more entries
(1) 1023/FFFFFFFFFFFF093C :                     ;
(1) 1024/FFFFFFFFFFFF093C :                     ; Note:
(1) 1025/FFFFFFFFFFFF093C :                     ; CPU heavy.
(1) 1026/FFFFFFFFFFFF093C :                     ; --------------------------------------------------------
(1) 1027/FFFFFFFFFFFF093C :                     
(1) 1028/FFFFFFFFFFFF093C :                     Video_LoadArt_List:
(1) 1029/FFFFFFFFFFFF093C : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1030/FFFFFFFFFFFF0940 : 3E18                		move.w	(a0)+,d7
(1) 1031/FFFFFFFFFFFF0942 : 6712                		beq.s	.invalid
(1) 1032/FFFFFFFFFFFF0944 : 6B10                		bmi.s	.invalid
(1) 1033/FFFFFFFFFFFF0946 : 5347                		subq.w	#1,d7
(1) 1034/FFFFFFFFFFFF0948 :                     .next_one:
(1) 1035/FFFFFFFFFFFF0948 : 2018                		move.l	(a0)+,d0
(1) 1036/FFFFFFFFFFFF094A : 3218                		move.w	(a0)+,d1
(1) 1037/FFFFFFFFFFFF094C : 3418                		move.w	(a0)+,d2
(1) 1038/FFFFFFFFFFFF094E : 6100 FEFA           		bsr	Video_LoadArt
(1) 1039/FFFFFFFFFFFF0952 : 51CF FFF4           		dbf	d7,.next_one
(1) 1040/FFFFFFFFFFFF0956 :                     .invalid:
(1) 1041/FFFFFFFFFFFF0956 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1042/FFFFFFFFFFFF095A : 4E75                		rts
(1) 1043/FFFFFFFFFFFF095C :                     
(1) 1044/FFFFFFFFFFFF095C :                     ; --------------------------------------------------------
(1) 1045/FFFFFFFFFFFF095C :                     ; Video_Fill
(1) 1046/FFFFFFFFFFFF095C :                     ;
(1) 1047/FFFFFFFFFFFF095C :                     ; Fill data to VRAM
(1) 1048/FFFFFFFFFFFF095C :                     ;
(1) 1049/FFFFFFFFFFFF095C :                     ; Input:
(1) 1050/FFFFFFFFFFFF095C :                     ; d0.b | BYTE to fill
(1) 1051/FFFFFFFFFFFF095C :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1052/FFFFFFFFFFFF095C :                     ; d2.w | Size:             cell_vram(size)
(1) 1053/FFFFFFFFFFFF095C :                     ;
(1) 1054/FFFFFFFFFFFF095C :                     ; Notes:
(1) 1055/FFFFFFFFFFFF095C :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1056/FFFFFFFFFFFF095C :                     ;   invalid.
(1) 1057/FFFFFFFFFFFF095C :                     ; --------------------------------------------------------
(1) 1058/FFFFFFFFFFFF095C :                     
(1) 1059/FFFFFFFFFFFF095C :                     ; Video_Fill_Incr:
(1) 1060/FFFFFFFFFFFF095C :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1061/FFFFFFFFFFFF095C :                     ; 		move.w	d3,d6
(1) 1062/FFFFFFFFFFFF095C :                     ; 		bra.s	vid_FillGo
(1) 1063/FFFFFFFFFFFF095C :                     Video_Fill:
(1) 1064/FFFFFFFFFFFF095C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1065/FFFFFFFFFFFF0960 : 3C3C 0001           		move.w	#1,d6
(1) 1066/FFFFFFFFFFFF0964 :                     vid_FillGo:
(1) 1067/FFFFFFFFFFFF0964 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1068/FFFFFFFFFFFF096A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1069/FFFFFFFFFFFF096C : 0807 0001           		btst	#bitDma,d7
(1) 1070/FFFFFFFFFFFF0970 : 66F8                		bne.s	.dmaw
(1) 1071/FFFFFFFFFFFF0972 : 6100 FD5A           		bsr	Video_DmaOn
(1) 1072/FFFFFFFFFFFF0976 : 0246 00FF           		andi.w	#$FF,d6
(1) 1073/FFFFFFFFFFFF097A : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1074/FFFFFFFFFFFF097E : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1075/FFFFFFFFFFFF0980 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1076/FFFFFFFFFFFF0982 : 0447 0001           		subi.w	#1,d7
(1) 1077/FFFFFFFFFFFF0986 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1078/FFFFFFFFFFFF098C : 1C07                		move.b	d7,d6
(1) 1079/FFFFFFFFFFFF098E : 4846                		swap	d6
(1) 1080/FFFFFFFFFFFF0990 : E04F                		lsr.w	#8,d7
(1) 1081/FFFFFFFFFFFF0992 : 1C07                		move.b	d7,d6
(1) 1082/FFFFFFFFFFFF0994 : 4846                		swap	d6
(1) 1083/FFFFFFFFFFFF0996 : 2C86                		move.l	d6,(a6)
(1) 1084/FFFFFFFFFFFF0998 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1085/FFFFFFFFFFFF099C : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1086/FFFFFFFFFFFF099E : 3C01                		move.w	d1,d6
(1) 1087/FFFFFFFFFFFF09A0 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1088/FFFFFFFFFFFF09A4 : 0046 4000           		ori.w	#$4000,d6
(1) 1089/FFFFFFFFFFFF09A8 : 4846                		swap	d6
(1) 1090/FFFFFFFFFFFF09AA : 3C07                		move.w	d7,d6
(1) 1091/FFFFFFFFFFFF09AC : E04E                		lsr.w	#8,d6
(1) 1092/FFFFFFFFFFFF09AE : EC4E                		lsr.w	#6,d6
(1) 1093/FFFFFFFFFFFF09B0 : 0246 0003           		andi.w	#%11,d6
(1) 1094/FFFFFFFFFFFF09B4 : 0046 0080           		ori.w	#$80,d6
(1) 1095/FFFFFFFFFFFF09B8 : 2C86                		move.l	d6,(a6)
(1) 1096/FFFFFFFFFFFF09BA : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1097/FFFFFFFFFFFF09BE : 3E16                .dma_w:		move.w	(a6),d7
(1) 1098/FFFFFFFFFFFF09C0 : 0807 0001           		btst	#bitDma,d7
(1) 1099/FFFFFFFFFFFF09C4 : 66F8                		bne.s	.dma_w
(1) 1100/FFFFFFFFFFFF09C6 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1101/FFFFFFFFFFFF09CA : 6100 FD0E           		bsr	Video_DmaOff
(1) 1102/FFFFFFFFFFFF09CE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1103/FFFFFFFFFFFF09D2 : 4E75                		rts
(1) 1104/FFFFFFFFFFFF09D4 :                     
(1) 1105/FFFFFFFFFFFF09D4 :                     ; --------------------------------------------------------
(1) 1106/FFFFFFFFFFFF09D4 :                     ; Video_Copy
(1) 1107/FFFFFFFFFFFF09D4 :                     ;
(1) 1108/FFFFFFFFFFFF09D4 :                     ; Copy VRAM data to another location inside VRAM
(1) 1109/FFFFFFFFFFFF09D4 :                     ;
(1) 1110/FFFFFFFFFFFF09D4 :                     ; Input:
(1) 1111/FFFFFFFFFFFF09D4 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1112/FFFFFFFFFFFF09D4 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1113/FFFFFFFFFFFF09D4 :                     ; d2.w | Size
(1) 1114/FFFFFFFFFFFF09D4 :                     ; --------------------------------------------------------
(1) 1115/FFFFFFFFFFFF09D4 :                     
(1) 1116/FFFFFFFFFFFF09D4 :                     Video_Copy:
(1) 1117/FFFFFFFFFFFF09D4 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1118/FFFFFFFFFFFF09D8 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1119/FFFFFFFFFFFF09DE : 3E16                .dmaw:		move.w	(a6),d7
(1) 1120/FFFFFFFFFFFF09E0 : 0807 0001           		btst	#bitDma,d7
(1) 1121/FFFFFFFFFFFF09E4 : 66F8                		bne.s	.dmaw
(1) 1122/FFFFFFFFFFFF09E6 : 6100 FCE6           		bsr	Video_DmaOn
(1) 1123/FFFFFFFFFFFF09EA : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1124/FFFFFFFFFFFF09EE : 3E02                		move.w	d2,d7			; SIZE
(1) 1125/FFFFFFFFFFFF09F0 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1126/FFFFFFFFFFFF09F6 : 1C07                		move.b	d7,d6
(1) 1127/FFFFFFFFFFFF09F8 : 4846                		swap	d6
(1) 1128/FFFFFFFFFFFF09FA : E04F                		lsr.w	#8,d7
(1) 1129/FFFFFFFFFFFF09FC : 1C07                		move.b	d7,d6
(1) 1130/FFFFFFFFFFFF09FE : 4846                		swap	d6
(1) 1131/FFFFFFFFFFFF0A00 : 2C86                		move.l	d6,(a6)
(1) 1132/FFFFFFFFFFFF0A02 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1133/FFFFFFFFFFFF0A08 : 3E00                		move.w	d0,d7
(1) 1134/FFFFFFFFFFFF0A0A : 1C07                		move.b	d7,d6
(1) 1135/FFFFFFFFFFFF0A0C : 4846                		swap	d6
(1) 1136/FFFFFFFFFFFF0A0E : E04F                		lsr.w	#8,d7
(1) 1137/FFFFFFFFFFFF0A10 : 1C07                		move.b	d7,d6
(1) 1138/FFFFFFFFFFFF0A12 : 2C86                		move.l	d6,(a6)
(1) 1139/FFFFFFFFFFFF0A14 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1140/FFFFFFFFFFFF0A18 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1141/FFFFFFFFFFFF0A1A : 3C07                		move.w	d7,d6
(1) 1142/FFFFFFFFFFFF0A1C : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1143/FFFFFFFFFFFF0A20 : 0046 4000           		ori.w	#$4000,d6
(1) 1144/FFFFFFFFFFFF0A24 : 4846                		swap	d6
(1) 1145/FFFFFFFFFFFF0A26 : 3C07                		move.w	d7,d6
(1) 1146/FFFFFFFFFFFF0A28 : E04E                		lsr.w	#8,d6
(1) 1147/FFFFFFFFFFFF0A2A : EC4E                		lsr.w	#6,d6
(1) 1148/FFFFFFFFFFFF0A2C : 0246 0003           		andi.w	#%11,d6
(1) 1149/FFFFFFFFFFFF0A30 : 0046 00C0           		ori.w	#$C0,d6
(1) 1150/FFFFFFFFFFFF0A34 : 2C86                		move.l	d6,(a6)
(1) 1151/FFFFFFFFFFFF0A36 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1152/FFFFFFFFFFFF0A3A : 3E16                .dma_w:		move.w	(a6),d7
(1) 1153/FFFFFFFFFFFF0A3C : 0807 0001           		btst	#bitDma,d7
(1) 1154/FFFFFFFFFFFF0A40 : 66F8                		bne.s	.dma_w
(1) 1155/FFFFFFFFFFFF0A42 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1156/FFFFFFFFFFFF0A46 : 6100 FC92           		bsr	Video_DmaOff
(1) 1157/FFFFFFFFFFFF0A4A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1158/FFFFFFFFFFFF0A4E : 4E75                		rts
(1) 1159/FFFFFFFFFFFF0A50 :                     
(1) 1160/FFFFFFFFFFFF0A50 :                     ; --------------------------------------------------------
(1) 1161/FFFFFFFFFFFF0A50 :                     ; Video_MakeDmaEntry
(1) 1162/FFFFFFFFFFFF0A50 :                     ;
(1) 1163/FFFFFFFFFFFF0A50 :                     ; Makes a new entry to the DMA BLAST list
(1) 1164/FFFFFFFFFFFF0A50 :                     ; to be processed on the next VBlank
(1) 1165/FFFFFFFFFFFF0A50 :                     ;
(1) 1166/FFFFFFFFFFFF0A50 :                     ; Input:
(1) 1167/FFFFFFFFFFFF0A50 :                     ; d0.l | Graphics data location
(1) 1168/FFFFFFFFFFFF0A50 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1169/FFFFFFFFFFFF0A50 :                     ; d2.w | Size
(1) 1170/FFFFFFFFFFFF0A50 :                     ;
(1) 1171/FFFFFFFFFFFF0A50 :                     ; Notes:
(1) 1172/FFFFFFFFFFFF0A50 :                     ; - Call this during DISPLAY only
(1) 1173/FFFFFFFFFFFF0A50 :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1174/FFFFFFFFFFFF0A50 :                     ;
(1) 1175/FFFFFFFFFFFF0A50 :                     ; * SCD/CD32X ONLY:
(1) 1176/FFFFFFFFFFFF0A50 :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1177/FFFFFFFFFFFF0A50 :                     ;   if not reading from WORD-RAM
(1) 1178/FFFFFFFFFFFF0A50 :                     ; --------------------------------------------------------
(1) 1179/FFFFFFFFFFFF0A50 :                     
(1) 1180/FFFFFFFFFFFF0A50 :                     Video_MakeDmaEntry:
(1) 1181/FFFFFFFFFFFF0A50 : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1182/FFFFFFFFFFFF0A54 : 2E00                		move.l	d0,d7
(1) 1183/FFFFFFFFFFFF0A56 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1184/FFFFFFFFFFFF0A5C : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1185/FFFFFFFFFFFF0A62 : 6736                		beq.s	.normal
(1) 1186/FFFFFFFFFFFF0A64 : 2A00                		move.l	d0,d5
(1) 1187/FFFFFFFFFFFF0A66 : DA42                		add.w	d2,d5
(1) 1188/FFFFFFFFFFFF0A68 : 6430                		bcc.s	.normal
(1) 1189/FFFFFFFFFFFF0A6A : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1190/FFFFFFFFFFFF0A6C : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1191/FFFFFFFFFFFF0A6E : 2E05                		move.l	d5,d7
(1) 1192/FFFFFFFFFFFF0A70 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1193/FFFFFFFFFFFF0A76 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1194/FFFFFFFFFFFF0A7C : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1195/FFFFFFFFFFFF0A7E : 6128                		bsr.s	.mk_set
(1) 1196/FFFFFFFFFFFF0A80 : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1197/FFFFFFFFFFFF0A82 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1198/FFFFFFFFFFFF0A88 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1199/FFFFFFFFFFFF0A8E : 2C05                		move.l	d5,d6
(1) 1200/FFFFFFFFFFFF0A90 : 9C80                		sub.l	d0,d6
(1) 1201/FFFFFFFFFFFF0A92 : 3E02                		move.w	d2,d7
(1) 1202/FFFFFFFFFFFF0A94 : 9E46                		sub.w	d6,d7
(1) 1203/FFFFFFFFFFFF0A96 : DC41                		add.w	d1,d6
(1) 1204/FFFFFFFFFFFF0A98 : 6006                		bra.s	.last_set
(1) 1205/FFFFFFFFFFFF0A9A :                     .normal:
(1) 1206/FFFFFFFFFFFF0A9A : 2A00                		move.l	d0,d5
(1) 1207/FFFFFFFFFFFF0A9C : 3C01                		move.w	d1,d6
(1) 1208/FFFFFFFFFFFF0A9E : 3E02                		move.w	d2,d7
(1) 1209/FFFFFFFFFFFF0AA0 :                     .last_set:
(1) 1210/FFFFFFFFFFFF0AA0 : 6106                		bsr.s	.mk_set
(1) 1211/FFFFFFFFFFFF0AA2 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1212/FFFFFFFFFFFF0AA6 : 4E75                		rts
(1) 1213/FFFFFFFFFFFF0AA8 :                     
(1) 1214/FFFFFFFFFFFF0AA8 :                     ; d7 - size
(1) 1215/FFFFFFFFFFFF0AA8 :                     ; d6 - vram
(1) 1216/FFFFFFFFFFFF0AA8 :                     ; d5 - data
(1) 1217/FFFFFFFFFFFF0AA8 :                     .mk_set:
(1) 1218/FFFFFFFFFFFF0AA8 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1219/FFFFFFFFFFFF0AAE : 4847                		swap	d7
(1) 1220/FFFFFFFFFFFF0AB0 : 3E38 E2B2           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1221/FFFFFFFFFFFF0AB4 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1222/FFFFFFFFFFFF0AB8 : 6C5A                		bge	.ran_out
(1) 1223/FFFFFFFFFFFF0ABA : E94F                		lsl.w	#4,d7			; Size $10
(1) 1224/FFFFFFFFFFFF0ABC : 4DF8 E2BC           		lea	(RAM_VdpDmaList).w,a6
(1) 1225/FFFFFFFFFFFF0AC0 : DCC7                		adda	d7,a6
(1) 1226/FFFFFFFFFFFF0AC2 : 4847                		swap	d7
(1) 1227/FFFFFFFFFFFF0AC4 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1228/FFFFFFFFFFFF0ACA : 6748                		beq.s	.ran_out		; If == 0, bad
(1) 1229/FFFFFFFFFFFF0ACC : 4A47                		tst.w	d7
(1) 1230/FFFFFFFFFFFF0ACE : 6B44                		bmi.s	.ran_out		; If negative, bad
(1) 1231/FFFFFFFFFFFF0AD0 : 31FC 0001 E2B4      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1232/FFFFFFFFFFFF0AD6 : 5278 E2B2           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1233/FFFFFFFFFFFF0ADA : E24F                		lsr.w	#1,d7
(1) 1234/FFFFFFFFFFFF0ADC : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1244/FFFFFFFFFFFF0AE0 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1245/FFFFFFFFFFFF0AE2 : 2E05                  		move.l	d5,d7
(1) 1246/FFFFFFFFFFFF0AE4 : 4847                  		swap	d7
(1) 1247/FFFFFFFFFFFF0AE6 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1248/FFFFFFFFFFFF0AEA : 1D47 0009            		move.b	d7,9(a6)
(1) 1249/FFFFFFFFFFFF0AEE : 3E06                		move.w	d6,d7			; Destination
(1) 1250/FFFFFFFFFFFF0AF0 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1251/FFFFFFFFFFFF0AF6 : 0046 4000           		ori.w	#$4000,d6
(1) 1252/FFFFFFFFFFFF0AFA : E04F                		lsr.w	#8,d7
(1) 1253/FFFFFFFFFFFF0AFC : EC4F                		lsr.w	#6,d7
(1) 1254/FFFFFFFFFFFF0AFE : 0247 0003           		andi.w	#%11,d7
(1) 1255/FFFFFFFFFFFF0B02 : 0047 0080           		ori.w	#$80,d7
(1) 1256/FFFFFFFFFFFF0B06 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1257/FFFFFFFFFFFF0B0A : 3D47 000C           		move.w	d7,$C(a6)
(1) 1265/FFFFFFFFFFFF0B0E : 31FC 0000 E2B4      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1266/FFFFFFFFFFFF0B14 :                     .ran_out:
(1) 1267/FFFFFFFFFFFF0B14 : 4E75                		rts
(1) 1268/FFFFFFFFFFFF0B16 :                     
(1) 1269/FFFFFFFFFFFF0B16 :                     ; ====================================================================
(1) 1270/FFFFFFFFFFFF0B16 :                     ; --------------------------------------------------------
(1) 1271/FFFFFFFFFFFF0B16 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1272/FFFFFFFFFFFF0B16 :                     ;
(1) 1273/FFFFFFFFFFFF0B16 :                     ; Write map data to VDP
(1) 1274/FFFFFFFFFFFF0B16 :                     ;
(1) 1275/FFFFFFFFFFFF0B16 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1276/FFFFFFFFFFFF0B16 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1277/FFFFFFFFFFFF0B16 :                     ;
(1) 1278/FFFFFFFFFFFF0B16 :                     ; Input:
(1) 1279/FFFFFFFFFFFF0B16 :                     ; a0   | Map data
(1) 1280/FFFFFFFFFFFF0B16 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1281/FFFFFFFFFFFF0B16 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1282/FFFFFFFFFFFF0B16 :                     ; d2.l | Screen Width/VRAM location:
(1) 1283/FFFFFFFFFFFF0B16 :                     ;        splitw(sw_size,vram_loc)
(1) 1284/FFFFFFFFFFFF0B16 :                     ; d3.w | VRAM-cell increment
(1) 1285/FFFFFFFFFFFF0B16 :                     ;
(1) 1286/FFFFFFFFFFFF0B16 :                     ; Notes:
(1) 1287/FFFFFFFFFFFF0B16 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1288/FFFFFFFFFFFF0B16 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1289/FFFFFFFFFFFF0B16 :                     ; * SCD/CD32X ONLY:
(1) 1290/FFFFFFFFFFFF0B16 :                     ; - For making the dot-screen map see
(1) 1291/FFFFFFFFFFFF0B16 :                     ;   Video_MdMcd_StampDotMap
(1) 1292/FFFFFFFFFFFF0B16 :                     ; --------------------------------------------------------
(1) 1293/FFFFFFFFFFFF0B16 :                     
(1) 1294/FFFFFFFFFFFF0B16 :                     Video_LoadMap:
(1) 1295/FFFFFFFFFFFF0B16 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1296/FFFFFFFFFFFF0B1A : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1297/FFFFFFFFFFFF0B20 :                     
(1) 1298/FFFFFFFFFFFF0B20 : 2C02                		move.l	d2,d6
(1) 1299/FFFFFFFFFFFF0B22 : 4846                		swap	d6
(1) 1300/FFFFFFFFFFFF0B24 : 3A00                		move.w	d0,d5
(1) 1301/FFFFFFFFFFFF0B26 : CAC6                		mulu.w	d6,d5
(1) 1302/FFFFFFFFFFFF0B28 : 2800                		move.l	d0,d4
(1) 1303/FFFFFFFFFFFF0B2A : 4844                		swap	d4
(1) 1304/FFFFFFFFFFFF0B2C : D844                		add.w	d4,d4
(1) 1305/FFFFFFFFFFFF0B2E : DA44                		add.w	d4,d5
(1) 1306/FFFFFFFFFFFF0B30 : 3E02                		move.w	d2,d7
(1) 1307/FFFFFFFFFFFF0B32 : DE45                		add.w	d5,d7
(1) 1308/FFFFFFFFFFFF0B34 : 7A00                		moveq	#0,d5
(1) 1309/FFFFFFFFFFFF0B36 : 3A07                		move.w	d7,d5
(1) 1310/FFFFFFFFFFFF0B38 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1311/FFFFFFFFFFFF0B3C : 8E7C 4000           		or.w	#$4000,d7
(1) 1312/FFFFFFFFFFFF0B40 : E55D                		rol.w	#2,d5
(1) 1313/FFFFFFFFFFFF0B42 : 0245 0003           		andi.w	#%11,d5
(1) 1314/FFFFFFFFFFFF0B46 : 4845                		swap	d5
(1) 1315/FFFFFFFFFFFF0B48 : 2A48                		move.l	a0,a5
(1) 1316/FFFFFFFFFFFF0B4A : 3801                		move.w	d1,d4
(1) 1317/FFFFFFFFFFFF0B4C : 5344                		subq.w	#1,d4
(1) 1318/FFFFFFFFFFFF0B4E : 6B36                		bmi.s	.bad_size
(1) 1319/FFFFFFFFFFFF0B50 :                     .y_loop:
(1) 1320/FFFFFFFFFFFF0B50 : 2844                		move.l	d4,a4
(1) 1321/FFFFFFFFFFFF0B52 : 4845                		swap	d5
(1) 1322/FFFFFFFFFFFF0B54 : 3D47 0004           		move.w	d7,4(a6)
(1) 1323/FFFFFFFFFFFF0B58 : 3D45 0004           		move.w	d5,4(a6)
(1) 1324/FFFFFFFFFFFF0B5C : 4845                		swap	d5
(1) 1325/FFFFFFFFFFFF0B5E : 2801                		move.l	d1,d4
(1) 1326/FFFFFFFFFFFF0B60 : 4844                		swap	d4
(1) 1327/FFFFFFFFFFFF0B62 : 5344                		subq.w	#1,d4
(1) 1328/FFFFFFFFFFFF0B64 :                     .x_loop:
(1) 1329/FFFFFFFFFFFF0B64 : 4844                		swap	d4
(1) 1330/FFFFFFFFFFFF0B66 : 381D                		move.w	(a5)+,d4
(1) 1331/FFFFFFFFFFFF0B68 : B87C FFFF           		cmp.w	#-1,d4
(1) 1332/FFFFFFFFFFFF0B6C : 6606                		bne.s	.non_blank
(1) 1333/FFFFFFFFFFFF0B6E : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1334/FFFFFFFFFFFF0B72 : 6002                		bra.s	.mk_cell
(1) 1335/FFFFFFFFFFFF0B74 :                     .non_blank:
(1) 1336/FFFFFFFFFFFF0B74 : D843                		add.w	d3,d4
(1) 1337/FFFFFFFFFFFF0B76 :                     .mk_cell:
(1) 1338/FFFFFFFFFFFF0B76 : 3C84                		move.w	d4,(a6)
(1) 1339/FFFFFFFFFFFF0B78 : 4844                		swap	d4
(1) 1340/FFFFFFFFFFFF0B7A : 51CC FFE8           		dbf	d4,.x_loop
(1) 1341/FFFFFFFFFFFF0B7E : DE46                		add.w	d6,d7
(1) 1342/FFFFFFFFFFFF0B80 : 280C                		move.l	a4,d4
(1) 1343/FFFFFFFFFFFF0B82 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1344/FFFFFFFFFFFF0B86 :                     .bad_size:
(1) 1345/FFFFFFFFFFFF0B86 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1346/FFFFFFFFFFFF0B8A : 4E75                		rts
(1) 1347/FFFFFFFFFFFF0B8C :                     ; ------------------------------------------------
(1) 1348/FFFFFFFFFFFF0B8C :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1349/FFFFFFFFFFFF0B8C :                     ; d2.l | Screen Width/VRAM location:
(1) 1350/FFFFFFFFFFFF0B8C :                     ; d3.w | VRAM-cell increment
(1) 1351/FFFFFFFFFFFF0B8C :                     
(1) 1352/FFFFFFFFFFFF0B8C :                     Video_LoadMapV:
(1) 1353/FFFFFFFFFFFF0B8C : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1354/FFFFFFFFFFFF0B90 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1355/FFFFFFFFFFFF0B96 : 2C02                		move.l	d2,d6
(1) 1356/FFFFFFFFFFFF0B98 : 4846                		swap	d6
(1) 1357/FFFFFFFFFFFF0B9A : 3A00                		move.w	d0,d5
(1) 1358/FFFFFFFFFFFF0B9C : CAC6                		mulu.w	d6,d5
(1) 1359/FFFFFFFFFFFF0B9E : 2800                		move.l	d0,d4
(1) 1360/FFFFFFFFFFFF0BA0 : 4844                		swap	d4
(1) 1361/FFFFFFFFFFFF0BA2 : D844                		add.w	d4,d4
(1) 1362/FFFFFFFFFFFF0BA4 : DA44                		add.w	d4,d5
(1) 1363/FFFFFFFFFFFF0BA6 : 3E02                		move.w	d2,d7
(1) 1364/FFFFFFFFFFFF0BA8 : DE45                		add.w	d5,d7
(1) 1365/FFFFFFFFFFFF0BAA : 7A00                		moveq	#0,d5
(1) 1366/FFFFFFFFFFFF0BAC : 3A07                		move.w	d7,d5
(1) 1367/FFFFFFFFFFFF0BAE : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1368/FFFFFFFFFFFF0BB2 : 8E7C 4000           		or.w	#$4000,d7
(1) 1369/FFFFFFFFFFFF0BB6 : E55D                		rol.w	#2,d5
(1) 1370/FFFFFFFFFFFF0BB8 : 0245 0003           		andi.w	#%11,d5
(1) 1371/FFFFFFFFFFFF0BBC : 4845                		swap	d5
(1) 1372/FFFFFFFFFFFF0BBE : 2A48                		move.l	a0,a5
(1) 1373/FFFFFFFFFFFF0BC0 : 0838 0002 E45B      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1374/FFFFFFFFFFFF0BC6 : 664C                		bne.s	.dble_mode
(1) 1375/FFFFFFFFFFFF0BC8 : 2801                		move.l	d1,d4
(1) 1376/FFFFFFFFFFFF0BCA : 4844                		swap	d4
(1) 1377/FFFFFFFFFFFF0BCC : 5344                		subq.w	#1,d4
(1) 1378/FFFFFFFFFFFF0BCE : 6B3E                		bmi.s	.bad_size
(1) 1379/FFFFFFFFFFFF0BD0 :                     .x_loop:
(1) 1380/FFFFFFFFFFFF0BD0 : 2844                		move.l	d4,a4
(1) 1381/FFFFFFFFFFFF0BD2 : 3801                		move.w	d1,d4
(1) 1382/FFFFFFFFFFFF0BD4 : 5344                		subq.w	#1,d4
(1) 1383/FFFFFFFFFFFF0BD6 :                     .y_loop:
(1) 1384/FFFFFFFFFFFF0BD6 : 4844                		swap	d4
(1) 1385/FFFFFFFFFFFF0BD8 : 3807                		move.w	d7,d4
(1) 1386/FFFFFFFFFFFF0BDA : D845                		add.w	d5,d4
(1) 1387/FFFFFFFFFFFF0BDC : 4845                		swap	d5
(1) 1388/FFFFFFFFFFFF0BDE : 3D44 0004           		move.w	d4,4(a6)
(1) 1389/FFFFFFFFFFFF0BE2 : 3D45 0004           		move.w	d5,4(a6)
(1) 1390/FFFFFFFFFFFF0BE6 : 4845                		swap	d5
(1) 1391/FFFFFFFFFFFF0BE8 : 381D                		move.w	(a5)+,d4
(1) 1392/FFFFFFFFFFFF0BEA : B87C FFFF           		cmp.w	#-1,d4
(1) 1393/FFFFFFFFFFFF0BEE : 6606                		bne.s	.non_blank
(1) 1394/FFFFFFFFFFFF0BF0 : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1395/FFFFFFFFFFFF0BF4 : 6002                		bra.s	.mk_cell
(1) 1396/FFFFFFFFFFFF0BF6 :                     .non_blank:
(1) 1397/FFFFFFFFFFFF0BF6 : D843                		add.w	d3,d4
(1) 1398/FFFFFFFFFFFF0BF8 :                     .mk_cell:
(1) 1399/FFFFFFFFFFFF0BF8 : 3C84                		move.w	d4,(a6)
(1) 1400/FFFFFFFFFFFF0BFA : DA46                		add.w	d6,d5
(1) 1401/FFFFFFFFFFFF0BFC : 4844                		swap	d4
(1) 1402/FFFFFFFFFFFF0BFE : 51CC FFD6           		dbf	d4,.y_loop
(1) 1403/FFFFFFFFFFFF0C02 : DE7C 0002           		add.w	#2,d7
(1) 1404/FFFFFFFFFFFF0C06 : 4245                		clr.w	d5
(1) 1405/FFFFFFFFFFFF0C08 : 280C                		move.l	a4,d4
(1) 1406/FFFFFFFFFFFF0C0A : 51CC FFC4           		dbf	d4,.x_loop
(1) 1407/FFFFFFFFFFFF0C0E :                     .bad_size:
(1) 1408/FFFFFFFFFFFF0C0E : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1409/FFFFFFFFFFFF0C12 : 4E75                		rts
(1) 1410/FFFFFFFFFFFF0C14 :                     
(1) 1411/FFFFFFFFFFFF0C14 :                     ; ------------------------------------------------
(1) 1412/FFFFFFFFFFFF0C14 :                     
(1) 1413/FFFFFFFFFFFF0C14 :                     .dble_mode:
(1) 1414/FFFFFFFFFFFF0C14 : 2F01                		move.l	d1,-(sp)
(1) 1415/FFFFFFFFFFFF0C16 :                     
(1) 1416/FFFFFFFFFFFF0C16 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1417/FFFFFFFFFFFF0C18 : 3803                		move.w	d3,d4
(1) 1418/FFFFFFFFFFFF0C1A : 0244 F800           		andi.w	#$F800,d4
(1) 1419/FFFFFFFFFFFF0C1E : 0243 07FF           		andi.w	#$7FF,d3
(1) 1420/FFFFFFFFFFFF0C22 : E24B                		lsr.w	#1,d3
(1) 1421/FFFFFFFFFFFF0C24 : 8644                		or.w	d4,d3
(1) 1422/FFFFFFFFFFFF0C26 :                     
(1) 1423/FFFFFFFFFFFF0C26 : 2801                		move.l	d1,d4
(1) 1424/FFFFFFFFFFFF0C28 : 4844                		swap	d4
(1) 1425/FFFFFFFFFFFF0C2A : 5344                		subq.w	#1,d4
(1) 1426/FFFFFFFFFFFF0C2C : 6B48                		bmi.s	.bad_size_d
(1) 1427/FFFFFFFFFFFF0C2E :                     .x_loop_d:
(1) 1428/FFFFFFFFFFFF0C2E : 2844                		move.l	d4,a4
(1) 1429/FFFFFFFFFFFF0C30 : 3801                		move.w	d1,d4
(1) 1430/FFFFFFFFFFFF0C32 : 5344                		subq.w	#1,d4
(1) 1431/FFFFFFFFFFFF0C34 :                     .y_loop_d:
(1) 1432/FFFFFFFFFFFF0C34 : 4844                		swap	d4
(1) 1433/FFFFFFFFFFFF0C36 : 3807                		move.w	d7,d4
(1) 1434/FFFFFFFFFFFF0C38 : D845                		add.w	d5,d4
(1) 1435/FFFFFFFFFFFF0C3A : 4845                		swap	d5
(1) 1436/FFFFFFFFFFFF0C3C : 3D44 0004           		move.w	d4,4(a6)
(1) 1437/FFFFFFFFFFFF0C40 : 3D45 0004           		move.w	d5,4(a6)
(1) 1438/FFFFFFFFFFFF0C44 : 4845                		swap	d5
(1) 1439/FFFFFFFFFFFF0C46 : 381D                		move.w	(a5)+,d4
(1) 1440/FFFFFFFFFFFF0C48 : DAFC 0002           		adda	#2,a5
(1) 1441/FFFFFFFFFFFF0C4C : B87C FFFF           		cmp.w	#-1,d4
(1) 1442/FFFFFFFFFFFF0C50 : 6606                		bne.s	.non_blank_d
(1) 1443/FFFFFFFFFFFF0C52 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1444/FFFFFFFFFFFF0C56 : 6008                		bra.s	.mk_cell_d
(1) 1445/FFFFFFFFFFFF0C58 :                     .non_blank_d:
(1) 1446/FFFFFFFFFFFF0C58 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1447/FFFFFFFFFFFF0C5C : E24C                		lsr.w	#1,d4
(1) 1448/FFFFFFFFFFFF0C5E : D843                		add.w	d3,d4
(1) 1449/FFFFFFFFFFFF0C60 :                     .mk_cell_d:
(1) 1450/FFFFFFFFFFFF0C60 : 3C84                		move.w	d4,(a6)
(1) 1451/FFFFFFFFFFFF0C62 : DA46                		add.w	d6,d5
(1) 1452/FFFFFFFFFFFF0C64 : 4844                		swap	d4
(1) 1453/FFFFFFFFFFFF0C66 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1454/FFFFFFFFFFFF0C6A : DE7C 0002           		add.w	#2,d7
(1) 1455/FFFFFFFFFFFF0C6E : 4245                		clr.w	d5
(1) 1456/FFFFFFFFFFFF0C70 : 280C                		move.l	a4,d4
(1) 1457/FFFFFFFFFFFF0C72 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1458/FFFFFFFFFFFF0C76 :                     .bad_size_d:
(1) 1459/FFFFFFFFFFFF0C76 : 221F                		move.l	(sp)+,d1
(1) 1460/FFFFFFFFFFFF0C78 : 6094                		bra	.bad_size
(1) 1461/FFFFFFFFFFFF0C7A :                     
(1) 1462/FFFFFFFFFFFF0C7A :                     ; ====================================================================
(1) 1463/FFFFFFFFFFFF0C7A :                     ; ----------------------------------------------------------------
(1) 1464/FFFFFFFFFFFF0C7A :                     ; Palette fading section
(1) 1465/FFFFFFFFFFFF0C7A :                     ; ----------------------------------------------------------------
(1) 1466/FFFFFFFFFFFF0C7A :                     
(1) 1467/FFFFFFFFFFFF0C7A :                     ; --------------------------------------------------------
(1) 1468/FFFFFFFFFFFF0C7A :                     ; Video_RunFade
(1) 1469/FFFFFFFFFFFF0C7A :                     ;
(1) 1470/FFFFFFFFFFFF0C7A :                     ; Process Palette changes (fade and effects)
(1) 1471/FFFFFFFFFFFF0C7A :                     ; --------------------------------------------------------
(1) 1472/FFFFFFFFFFFF0C7A :                     
(1) 1473/FFFFFFFFFFFF0C7A :                     Video_RunFade:
(1) 1474/FFFFFFFFFFFF0C7A : 4DF8 D462           		lea	(RAM_PalFadeList).w,a6
(1) 1475/FFFFFFFFFFFF0C7E :                     .next_req:
(1) 1476/FFFFFFFFFFFF0C7E : 1016                		move.b	palfd_req(a6),d0
(1) 1477/FFFFFFFFFFFF0C80 : 6744                		beq.s	.no_req
(1) 1478/FFFFFFFFFFFF0C82 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1479/FFFFFFFFFFFF0C86 : 6A38                		bpl.s	.busy_timer
(1) 1480/FFFFFFFFFFFF0C88 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1481/FFFFFFFFFFFF0C8E : 4BF8 E1B2           		lea	(RAM_Palette).w,a5
(1) 1482/FFFFFFFFFFFF0C92 : 49F8 E232           		lea	(RAM_PaletteFade).w,a4
(1) 1483/FFFFFFFFFFFF0C96 : 7E00                		moveq	#0,d7
(1) 1484/FFFFFFFFFFFF0C98 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1485/FFFFFFFFFFFF0C9C : DE47                		add.w	d7,d7
(1) 1486/FFFFFFFFFFFF0C9E : DAC7                		adda	d7,a5
(1) 1487/FFFFFFFFFFFF0CA0 : D8C7                		adda	d7,a4
(1) 1488/FFFFFFFFFFFF0CA2 : 7C00                		moveq	#0,d6
(1) 1489/FFFFFFFFFFFF0CA4 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1490/FFFFFFFFFFFF0CA8 : 6716                		beq.s	.busy_timer
(1) 1491/FFFFFFFFFFFF0CAA : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1492/FFFFFFFFFFFF0CAE : DC46                		add.w	d6,d6		; * 2
(1) 1493/FFFFFFFFFFFF0CB0 : 5347                		subq.w	#1,d7
(1) 1494/FFFFFFFFFFFF0CB2 : 0240 00FF           		andi.w	#$FF,d0
(1) 1495/FFFFFFFFFFFF0CB6 : D040                		add.w	d0,d0
(1) 1496/FFFFFFFFFFFF0CB8 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1497/FFFFFFFFFFFF0CBC : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1498/FFFFFFFFFFFF0CC0 :                     .busy_timer:
(1) 1499/FFFFFFFFFFFF0CC0 : DCFC 0008           		adda	#palfd_len,a6
(1) 1500/FFFFFFFFFFFF0CC4 : 60B8                		bra.s	.next_req
(1) 1501/FFFFFFFFFFFF0CC6 :                     .no_req:
(1) 1502/FFFFFFFFFFFF0CC6 : 4278 E440           		clr.w	(RAM_IndxPalFade).w
(1) 1503/FFFFFFFFFFFF0CCA : 4E75                		rts
(1) 1504/FFFFFFFFFFFF0CCC :                     
(1) 1505/FFFFFFFFFFFF0CCC :                     ; ------------------------------------------------
(1) 1506/FFFFFFFFFFFF0CCC :                     
(1) 1507/FFFFFFFFFFFF0CCC :                     .fade_list:
(1) 1508/FFFFFFFFFFFF0CCC : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1509/FFFFFFFFFFFF0CCE : 0018                		dc.w .fade_out-.fade_list
(1) 1510/FFFFFFFFFFFF0CD0 : 0088                		dc.w .fade_in-.fade_list
(1) 1511/FFFFFFFFFFFF0CD2 : 0010                		dc.w .nothing-.fade_list
(1) 1512/FFFFFFFFFFFF0CD4 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1513/FFFFFFFFFFFF0CD6 : 0010                		dc.w .nothing-.fade_list
(1) 1514/FFFFFFFFFFFF0CD8 : 0010                		dc.w .nothing-.fade_list
(1) 1515/FFFFFFFFFFFF0CDA : 0010                		dc.w .nothing-.fade_list
(1) 1516/FFFFFFFFFFFF0CDC :                     
(1) 1517/FFFFFFFFFFFF0CDC :                     ; ----------------------------------------------------
(1) 1518/FFFFFFFFFFFF0CDC :                     ; Fade request $00: Null/exit.
(1) 1519/FFFFFFFFFFFF0CDC :                     ; ----------------------------------------------------
(1) 1520/FFFFFFFFFFFF0CDC :                     
(1) 1521/FFFFFFFFFFFF0CDC :                     .nothing:
(1) 1522/FFFFFFFFFFFF0CDC :                     .pfade_del:
(1) 1523/FFFFFFFFFFFF0CDC : 4216                		clr.b	palfd_req(a6)
(1) 1524/FFFFFFFFFFFF0CDE : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1525/FFFFFFFFFFFF0CE2 : 4E75                		rts
(1) 1526/FFFFFFFFFFFF0CE4 :                     
(1) 1527/FFFFFFFFFFFF0CE4 :                     ; ----------------------------------------------------
(1) 1528/FFFFFFFFFFFF0CE4 :                     ; Fade request $01: fade-out to black
(1) 1529/FFFFFFFFFFFF0CE4 :                     ; Quick.
(1) 1530/FFFFFFFFFFFF0CE4 :                     ;
(1) 1531/FFFFFFFFFFFF0CE4 :                     ; d7 - Num colors
(1) 1532/FFFFFFFFFFFF0CE4 :                     ; d6 - Increment*2
(1) 1533/FFFFFFFFFFFF0CE4 :                     ; ----------------------------------------------------
(1) 1534/FFFFFFFFFFFF0CE4 :                     
(1) 1535/FFFFFFFFFFFF0CE4 :                     .fade_out:
(1) 1536/FFFFFFFFFFFF0CE4 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1537/FFFFFFFFFFFF0CE8 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1538/FFFFFFFFFFFF0CEC : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1539/FFFFFFFFFFFF0CF0 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1540/FFFFFFFFFFFF0CF2 :                     .next_color:
(1) 1541/FFFFFFFFFFFF0CF2 : 3015                		move.w	(a5),d0
(1) 1542/FFFFFFFFFFFF0CF4 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1543/FFFFFFFFFFFF0CF6 :                     	rept 3
(1) 1544/FFFFFFFFFFFF0CF6 :                     		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0CF6 :                     		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0CF6 :                     		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0CF6 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0CF6 :                     		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0CF6 :                     		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0CF6 :                     		clr.w	d1
(1) 1551/FFFFFFFFFFFF0CF6 :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0CF6 :                     		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0CF6 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0CF6 :                     		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0CF6 :                     		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0CF6 :                     		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0CF6 :                     		rol.w	#4,d4
(1) 1558/FFFFFFFFFFFF0CF6 :                     	endm
(1) 1544/FFFFFFFFFFFF0CF6 : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0CF8 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0CFA : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0CFC : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0CFE : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D00 : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D02 : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D04 :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D04 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D06 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D06 : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D08 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D0A : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D0C : E95C                		rol.w	#4,d4
(1) 1544/FFFFFFFFFFFF0D0E : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D10 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D12 : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D14 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D16 : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D18 : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D1A : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D1C :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D1C : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D1E :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D1E : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D20 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D22 : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D24 : E95C                		rol.w	#4,d4
(1) 1544/FFFFFFFFFFFF0D26 : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D28 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D2A : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D2C : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D2E : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D30 : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D32 : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D34 :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D34 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D36 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D36 : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D38 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D3A : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D3C : E95C                		rol.w	#4,d4
(1) 1559/FFFFFFFFFFFF0D3E :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1560/FFFFFFFFFFFF0D3E : E95E                		rol.w	#4,d6
(1) 1561/FFFFFFFFFFFF0D40 : E95D                		rol.w	#4,d5
(1) 1562/FFFFFFFFFFFF0D42 : E95C                		rol.w	#4,d4
(1) 1563/FFFFFFFFFFFF0D44 : 3A80                		move.w	d0,(a5)
(1) 1564/FFFFFFFFFFFF0D46 :                     .all_black:
(1) 1565/FFFFFFFFFFFF0D46 : DAFC 0002           		adda	#2,a5
(1) 1566/FFFFFFFFFFFF0D4A : 51CF FFA6           		dbf	d7,.next_color
(1) 1567/FFFFFFFFFFFF0D4E : 4A43                		tst.w	d3
(1) 1568/FFFFFFFFFFFF0D50 : 678A                		beq	.pfade_del
(1) 1569/FFFFFFFFFFFF0D52 :                     .fdout_nend:
(1) 1570/FFFFFFFFFFFF0D52 : 4E75                		rts
(1) 1571/FFFFFFFFFFFF0D54 :                     
(1) 1572/FFFFFFFFFFFF0D54 :                     ; ----------------------------------------------------
(1) 1573/FFFFFFFFFFFF0D54 :                     ; Fade request $02
(1) 1574/FFFFFFFFFFFF0D54 :                     ; Fade-in
(1) 1575/FFFFFFFFFFFF0D54 :                     ; ----------------------------------------------------
(1) 1576/FFFFFFFFFFFF0D54 :                     
(1) 1577/FFFFFFFFFFFF0D54 :                     .fade_in:
(1) 1578/FFFFFFFFFFFF0D54 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1579/FFFFFFFFFFFF0D58 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1580/FFFFFFFFFFFF0D5C : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1581/FFFFFFFFFFFF0D60 :                     .next_in:
(1) 1582/FFFFFFFFFFFF0D60 : 4847                		swap	d7
(1) 1583/FFFFFFFFFFFF0D62 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1584/FFFFFFFFFFFF0D64 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1585/FFFFFFFFFFFF0D66 : C044                		and.w	d4,d0
(1) 1586/FFFFFFFFFFFF0D68 : C444                		and.w	d4,d2
(1) 1587/FFFFFFFFFFFF0D6A : B042                		cmp.w	d2,d0
(1) 1588/FFFFFFFFFFFF0D6C : 6766                		beq.s	.same_in
(1) 1589/FFFFFFFFFFFF0D6E :                     	rept 3
(1) 1590/FFFFFFFFFFFF0D6E :                     		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0D6E :                     		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0D6E :                     		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0D6E :                     		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0D6E :                     		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0D6E :                     		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0D6E :                     		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0D6E :                     
(1) 1598/FFFFFFFFFFFF0D6E :                     		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0D6E :                     		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0D6E :                     		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0D6E :                     		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0D6E :                     		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0D6E :                     .max_out:
(1) 1604/FFFFFFFFFFFF0D6E :                     		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0D6E :                     		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0D6E :                     		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0D6E :                     		rol.w	#4,d5
(1) 1608/FFFFFFFFFFFF0D6E :                     	endm
(1) 1590/FFFFFFFFFFFF0D6E : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0D70 : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0D72 : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0D74 : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0D76 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0D78 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0D7A : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0D7C :                     
(1) 1598/FFFFFFFFFFFF0D7C : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0D7E : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0D80 : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0D82 : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0D84 : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0D86 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0D86 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0D88 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0D8A : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0D8C : E95D                		rol.w	#4,d5
(1) 1590/FFFFFFFFFFFF0D8E : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0D90 : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0D92 : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0D94 : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0D96 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0D98 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0D9A : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0D9C :                     
(1) 1598/FFFFFFFFFFFF0D9C : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0D9E : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0DA0 : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0DA2 : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0DA4 : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0DA6 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0DA6 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0DA8 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0DAA : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0DAC : E95D                		rol.w	#4,d5
(1) 1590/FFFFFFFFFFFF0DAE : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0DB0 : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0DB2 : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0DB4 : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0DB6 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0DB8 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0DBA : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0DBC :                     
(1) 1598/FFFFFFFFFFFF0DBC : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0DBE : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0DC0 : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0DC2 : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0DC4 : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0DC6 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0DC6 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0DC8 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0DCA : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0DCC : E95D                		rol.w	#4,d5
(1) 1609/FFFFFFFFFFFF0DCE : E95E                		rol.w	#4,d6
(1) 1610/FFFFFFFFFFFF0DD0 : E95D                		rol.w	#4,d5
(1) 1611/FFFFFFFFFFFF0DD2 : 3A80                		move.w	d0,(a5)
(1) 1612/FFFFFFFFFFFF0DD4 :                     .same_in:
(1) 1613/FFFFFFFFFFFF0DD4 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1614/FFFFFFFFFFFF0DD8 : D8FC 0002           		adda	#2,a4
(1) 1615/FFFFFFFFFFFF0DDC : 4847                		swap	d7
(1) 1616/FFFFFFFFFFFF0DDE : 51CF FF80           		dbf	d7,.next_in
(1) 1617/FFFFFFFFFFFF0DE2 : 4847                		swap	d7
(1) 1618/FFFFFFFFFFFF0DE4 : 4A47                		tst.w	d7
(1) 1619/FFFFFFFFFFFF0DE6 : 6700 FEF4           		beq	.pfade_del
(1) 1620/FFFFFFFFFFFF0DEA :                     .fdin_nend:
(1) 1621/FFFFFFFFFFFF0DEA : 4E75                		rts
(1) 1622/FFFFFFFFFFFF0DEC :                     
(1) 1623/FFFFFFFFFFFF0DEC :                     ; --------------------------------------------------------
(1) 1624/FFFFFFFFFFFF0DEC :                     ; Video_WaitFade
(1) 1625/FFFFFFFFFFFF0DEC :                     ;
(1) 1626/FFFFFFFFFFFF0DEC :                     ; CPU-saving version of System_Render when
(1) 1627/FFFFFFFFFFFF0DEC :                     ; waiting for a fade-in/fade-out
(1) 1628/FFFFFFFFFFFF0DEC :                     ;
(1) 1629/FFFFFFFFFFFF0DEC :                     ; THIS IS REQUIRED FOR 32X as
(1) 1630/FFFFFFFFFFFF0DEC :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1631/FFFFFFFFFFFF0DEC :                     ; --------------------------------------------------------
(1) 1632/FFFFFFFFFFFF0DEC :                     
(1) 1633/FFFFFFFFFFFF0DEC :                     Video_WaitFade:
(1) 1634/FFFFFFFFFFFF0DEC :                     .loop:
(1) 1635/FFFFFFFFFFFF0DEC : 6100 0ADC           		bsr	System_Render
(1) 1636/FFFFFFFFFFFF0DF0 : 4DF8 D462           		lea	(RAM_PalFadeList).w,a6
(1) 1638/FFFFFFFFFFFF0DF4 : 4BF8 CA02           		lea	(RAM_MdMars_MPalFdList).w,a5
(1) 1640/FFFFFFFFFFFF0DF8 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1641/FFFFFFFFFFFF0DFC : 7C00                		moveq	#0,d6
(1) 1642/FFFFFFFFFFFF0DFE :                     .next_one:
(1) 1643/FFFFFFFFFFFF0DFE : 8C16                		or.b	palfd_req(a6),d6
(1) 1644/FFFFFFFFFFFF0E00 : DCFC 0008           		adda	#palfd_len,a6
(1) 1646/FFFFFFFFFFFF0E04 : 8C15                		or.b	palfd_req(a5),d6
(1) 1647/FFFFFFFFFFFF0E06 : DAFC 0008           		adda	#palfd_len,a5
(1) 1649/FFFFFFFFFFFF0E0A : 51CF FFF2           		dbf	d7,.next_one
(1) 1650/FFFFFFFFFFFF0E0E : 4A06                		tst.b	d6
(1) 1651/FFFFFFFFFFFF0E10 : 66DA                		bne.s	.loop
(1) 1652/FFFFFFFFFFFF0E12 : 4E75                		rts
(1) 1653/FFFFFFFFFFFF0E14 :                     
(1) 1654/FFFFFFFFFFFF0E14 :                     ; --------------------------------------------------------
(1) 1655/FFFFFFFFFFFF0E14 :                     ; Video_FadeIn_Full
(1) 1656/FFFFFFFFFFFF0E14 :                     ;
(1) 1657/FFFFFFFFFFFF0E14 :                     ; Overwrites first entry on each's PalFadeList
(1) 1658/FFFFFFFFFFFF0E14 :                     ; --------------------------------------------------------
(1) 1659/FFFFFFFFFFFF0E14 :                     
(1) 1660/FFFFFFFFFFFF0E14 :                     Video_FadeIn_Full:
(1) 1662/FFFFFFFFFFFF0E14 : 7002                		moveq	#2,d0
(1) 1663/FFFFFFFFFFFF0E16 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1664/FFFFFFFFFFFF0E1C : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1665/FFFFFFFFFFFF0E22 : 6134                		bsr	Video_MdMars_MakeFade
(1) 1667/FFFFFFFFFFFF0E24 : 7002                		moveq	#2,d0
(1) 1668/FFFFFFFFFFFF0E26 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1669/FFFFFFFFFFFF0E2C : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1670/FFFFFFFFFFFF0E32 : 613C                		bsr	Video_MakeFade
(1) 1671/FFFFFFFFFFFF0E34 : 60B6                		bra	Video_WaitFade
(1) 1672/FFFFFFFFFFFF0E36 :                     
(1) 1673/FFFFFFFFFFFF0E36 :                     ; --------------------------------------------------------
(1) 1674/FFFFFFFFFFFF0E36 :                     ; Video_FadeIn_Full
(1) 1675/FFFFFFFFFFFF0E36 :                     ;
(1) 1676/FFFFFFFFFFFF0E36 :                     ; Overwrites first entry on each's PalFadeList
(1) 1677/FFFFFFFFFFFF0E36 :                     ; --------------------------------------------------------
(1) 1678/FFFFFFFFFFFF0E36 :                     
(1) 1679/FFFFFFFFFFFF0E36 :                     Video_FadeOut_Full:
(1) 1681/FFFFFFFFFFFF0E36 : 7001                		moveq	#1,d0
(1) 1682/FFFFFFFFFFFF0E38 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1683/FFFFFFFFFFFF0E3E : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1684/FFFFFFFFFFFF0E44 : 6112                		bsr	Video_MdMars_MakeFade
(1) 1686/FFFFFFFFFFFF0E46 : 7001                		moveq	#1,d0
(1) 1687/FFFFFFFFFFFF0E48 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1688/FFFFFFFFFFFF0E4E : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1689/FFFFFFFFFFFF0E54 : 611A                		bsr	Video_MakeFade
(1) 1690/FFFFFFFFFFFF0E56 : 6094                		bra	Video_WaitFade
(1) 1691/FFFFFFFFFFFF0E58 :                     
(1) 1692/FFFFFFFFFFFF0E58 :                     ; ============================================================
(1) 1693/FFFFFFFFFFFF0E58 :                     ; --------------------------------------------------------
(1) 1694/FFFFFFFFFFFF0E58 :                     ; Subroutines
(1) 1695/FFFFFFFFFFFF0E58 :                     ; --------------------------------------------------------
(1) 1696/FFFFFFFFFFFF0E58 :                     
(1) 1697/FFFFFFFFFFFF0E58 :                     ; --------------------------------------------------------
(1) 1698/FFFFFFFFFFFF0E58 :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1699/FFFFFFFFFFFF0E58 :                     ;
(1) 1700/FFFFFFFFFFFF0E58 :                     ; Make palette Fading (or other) request, for
(1) 1701/FFFFFFFFFFFF0E58 :                     ; both VDP and SVDP
(1) 1702/FFFFFFFFFFFF0E58 :                     ;
(1) 1703/FFFFFFFFFFFF0E58 :                     ; Input:
(1) 1704/FFFFFFFFFFFF0E58 :                     ; d0.w | Task number:
(1) 1705/FFFFFFFFFFFF0E58 :                     ;        0 - Fade-out
(1) 1706/FFFFFFFFFFFF0E58 :                     ;        1 - Fade-in
(1) 1707/FFFFFFFFFFFF0E58 :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1708/FFFFFFFFFFFF0E58 :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1709/FFFFFFFFFFFF0E58 :                     ; --------------------------------------------------------
(1) 1710/FFFFFFFFFFFF0E58 :                     
(1) 1711/FFFFFFFFFFFF0E58 :                     Video_MdMars_MakeFade:
(1) 1713/FFFFFFFFFFFF0E58 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1714/FFFFFFFFFFFF0E5C : 4DF8 CA02           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 1715/FFFFFFFFFFFF0E60 : 3E38 C800           		move.w	(RAM_MdMars_IndxPalFd).w,d7
(1) 1716/FFFFFFFFFFFF0E64 : 5278 C800           		addq.w	#1,(RAM_MdMars_IndxPalFd).w
(1) 1717/FFFFFFFFFFFF0E68 : 611E                		bsr	vidMkFade_Go
(1) 1718/FFFFFFFFFFFF0E6A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1720/FFFFFFFFFFFF0E6E : 4E75                		rts
(1) 1721/FFFFFFFFFFFF0E70 :                     Video_MakeFade:
(1) 1722/FFFFFFFFFFFF0E70 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1723/FFFFFFFFFFFF0E74 : 4DF8 D462           		lea	(RAM_PalFadeList).w,a6
(1) 1724/FFFFFFFFFFFF0E78 : 3E38 E440           		move.w	(RAM_IndxPalFade).w,d7
(1) 1725/FFFFFFFFFFFF0E7C : 5278 E440           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1726/FFFFFFFFFFFF0E80 : 6106                		bsr	vidMkFade_Go
(1) 1727/FFFFFFFFFFFF0E82 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1728/FFFFFFFFFFFF0E86 : 4E75                		rts
(1) 1729/FFFFFFFFFFFF0E88 :                     vidMkFade_Go:
(1) 1730/FFFFFFFFFFFF0E88 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1731/FFFFFFFFFFFF0E8E : E74F                		lsl.w	#3,d7			; index * 8
(1) 1732/FFFFFFFFFFFF0E90 : DCC7                		adda	d7,a6
(1) 1733/FFFFFFFFFFFF0E92 : 2E01                		move.l	d1,d7
(1) 1734/FFFFFFFFFFFF0E94 : 2C02                		move.l	d2,d6
(1) 1735/FFFFFFFFFFFF0E96 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1736/FFFFFFFFFFFF0E98 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1737/FFFFFFFFFFFF0E9C : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1738/FFFFFFFFFFFF0EA0 : 4846                		swap	d6
(1) 1739/FFFFFFFFFFFF0EA2 : 4847                		swap	d7
(1) 1740/FFFFFFFFFFFF0EA4 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1741/FFFFFFFFFFFF0EA8 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1742/FFFFFFFFFFFF0EAC : 4E75                		rts
(1) 1743/FFFFFFFFFFFF0EAE :                     
(1) 1744/FFFFFFFFFFFF0EAE :                     ; --------------------------------------------------------
(1) 1745/FFFFFFFFFFFF0EAE :                     ; Video_LoadPal, Video_FadePal
(1) 1746/FFFFFFFFFFFF0EAE :                     ;
(1) 1747/FFFFFFFFFFFF0EAE :                     ; Load VDP palette data, either current or for fading.
(1) 1748/FFFFFFFFFFFF0EAE :                     ;
(1) 1749/FFFFFFFFFFFF0EAE :                     ; Input:
(1) 1750/FFFFFFFFFFFF0EAE :                     ; a0   | Palette data
(1) 1751/FFFFFFFFFFFF0EAE :                     ; d0.w | Starting color index
(1) 1752/FFFFFFFFFFFF0EAE :                     ; d1.w | Number of colors
(1) 1753/FFFFFFFFFFFF0EAE :                     ; --------------------------------------------------------
(1) 1754/FFFFFFFFFFFF0EAE :                     
(1) 1755/FFFFFFFFFFFF0EAE :                     Video_FadePal:
(1) 1756/FFFFFFFFFFFF0EAE : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1757/FFFFFFFFFFFF0EB2 : 4DF8 E232           		lea	(RAM_PaletteFade).w,a6
(1) 1758/FFFFFFFFFFFF0EB6 : 6008                		bra.s	vidMd_Pal
(1) 1759/FFFFFFFFFFFF0EB8 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1760/FFFFFFFFFFFF0EB8 :                     ; 		rts
(1) 1761/FFFFFFFFFFFF0EB8 :                     Video_LoadPal:
(1) 1762/FFFFFFFFFFFF0EB8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1763/FFFFFFFFFFFF0EBC : 4DF8 E1B2           		lea	(RAM_Palette).w,a6
(1) 1764/FFFFFFFFFFFF0EC0 :                     ; 		bsr.s	vidMd_Pal
(1) 1765/FFFFFFFFFFFF0EC0 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1766/FFFFFFFFFFFF0EC0 :                     ; 		rts
(1) 1767/FFFFFFFFFFFF0EC0 :                     
(1) 1768/FFFFFFFFFFFF0EC0 :                     ; --------------------------------------------------------
(1) 1769/FFFFFFFFFFFF0EC0 :                     vidMd_Pal:
(1) 1770/FFFFFFFFFFFF0EC0 : 2A48                		move.l	a0,a5
(1) 1771/FFFFFFFFFFFF0EC2 : 7E00                		moveq	#0,d7
(1) 1772/FFFFFFFFFFFF0EC4 : 3E00                		move.w	d0,d7
(1) 1773/FFFFFFFFFFFF0EC6 : DE47                		add.w	d7,d7
(1) 1774/FFFFFFFFFFFF0EC8 : DCC7                		adda	d7,a6
(1) 1775/FFFFFFFFFFFF0ECA : 3E01                		move.w	d1,d7
(1) 1776/FFFFFFFFFFFF0ECC : 5347                		subq.w	#1,d7
(1) 1777/FFFFFFFFFFFF0ECE : 6B0E                		bmi.s	.bad
(1) 1778/FFFFFFFFFFFF0ED0 : 3C02                		move.w	d2,d6
(1) 1779/FFFFFFFFFFFF0ED2 : 0246 0001           		andi.w	#1,d6
(1) 1780/FFFFFFFFFFFF0ED6 : E25E                		ror.w	#1,d6
(1) 1781/FFFFFFFFFFFF0ED8 :                     .loop:
(1) 1782/FFFFFFFFFFFF0ED8 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1783/FFFFFFFFFFFF0EDA : 51CF FFFC           		dbf	d7,.loop
(1) 1784/FFFFFFFFFFFF0EDE :                     .bad:
(1) 1785/FFFFFFFFFFFF0EDE : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1786/FFFFFFFFFFFF0EE2 : 4E75                		rts
(1) 1787/FFFFFFFFFFFF0EE4 :                     
(1) 1788/FFFFFFFFFFFF0EE4 :                     ; --------------------------------------------------------
(1) 1789/FFFFFFFFFFFF0EE4 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1790/FFFFFFFFFFFF0EE4 :                     ;
(1) 1791/FFFFFFFFFFFF0EE4 :                     ; Loads palettes on bulk with a list
(1) 1792/FFFFFFFFFFFF0EE4 :                     ;
(1) 1793/FFFFFFFFFFFF0EE4 :                     ; Input:
(1) 1794/FFFFFFFFFFFF0EE4 :                     ; a0 | List of graphics to load:
(1) 1795/FFFFFFFFFFFF0EE4 :                     ;        dc.w numof_entries
(1) 1796/FFFFFFFFFFFF0EE4 :                     ;        dc.l palette_data
(1) 1797/FFFFFFFFFFFF0EE4 :                     ;        dc.w start_at
(1) 1798/FFFFFFFFFFFF0EE4 :                     ;        dc.w numof_colors
(1) 1799/FFFFFFFFFFFF0EE4 :                     ;        ; ...more entries
(1) 1800/FFFFFFFFFFFF0EE4 :                     ; --------------------------------------------------------
(1) 1801/FFFFFFFFFFFF0EE4 :                     
(1) 1802/FFFFFFFFFFFF0EE4 :                     Video_LoadPal_List:
(1) 1803/FFFFFFFFFFFF0EE4 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1804/FFFFFFFFFFFF0EE8 : 2A48                		move.l	a0,a5
(1) 1805/FFFFFFFFFFFF0EEA : 3E1D                		move.w	(a5)+,d7
(1) 1806/FFFFFFFFFFFF0EEC : 6710                		beq.s	.invalid
(1) 1807/FFFFFFFFFFFF0EEE : 6B0E                		bmi.s	.invalid
(1) 1808/FFFFFFFFFFFF0EF0 : 5347                		subq.w	#1,d7
(1) 1809/FFFFFFFFFFFF0EF2 :                     .next_one:
(1) 1810/FFFFFFFFFFFF0EF2 : 205D                		move.l	(a5)+,a0
(1) 1811/FFFFFFFFFFFF0EF4 : 301D                		move.w	(a5)+,d0
(1) 1812/FFFFFFFFFFFF0EF6 : 321D                		move.w	(a5)+,d1
(1) 1813/FFFFFFFFFFFF0EF8 : 61BE                		bsr	Video_LoadPal
(1) 1814/FFFFFFFFFFFF0EFA : 51CF FFF6           		dbf	d7,.next_one
(1) 1815/FFFFFFFFFFFF0EFE :                     .invalid:
(1) 1816/FFFFFFFFFFFF0EFE : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1817/FFFFFFFFFFFF0F02 : 4E75                		rts
(1) 1818/FFFFFFFFFFFF0F04 :                     
(1) 1819/FFFFFFFFFFFF0F04 :                     Video_FadePal_List:
(1) 1820/FFFFFFFFFFFF0F04 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1821/FFFFFFFFFFFF0F08 : 2A48                		move.l	a0,a5
(1) 1822/FFFFFFFFFFFF0F0A : 3E1D                		move.w	(a5)+,d7
(1) 1823/FFFFFFFFFFFF0F0C : 6710                		beq.s	.invalid
(1) 1824/FFFFFFFFFFFF0F0E : 6B0E                		bmi.s	.invalid
(1) 1825/FFFFFFFFFFFF0F10 : 5347                		subq.w	#1,d7
(1) 1826/FFFFFFFFFFFF0F12 :                     .next_one:
(1) 1827/FFFFFFFFFFFF0F12 : 205D                		move.l	(a5)+,a0
(1) 1828/FFFFFFFFFFFF0F14 : 301D                		move.w	(a5)+,d0
(1) 1829/FFFFFFFFFFFF0F16 : 321D                		move.w	(a5)+,d1
(1) 1830/FFFFFFFFFFFF0F18 : 6194                		bsr	Video_FadePal
(1) 1831/FFFFFFFFFFFF0F1A : 51CF FFF6           		dbf	d7,.next_one
(1) 1832/FFFFFFFFFFFF0F1E :                     .invalid:
(1) 1833/FFFFFFFFFFFF0F1E : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1834/FFFFFFFFFFFF0F22 : 4E75                		rts
(1) 1835/FFFFFFFFFFFF0F24 :                     
(1) 1836/FFFFFFFFFFFF0F24 :                     ; ====================================================================
(1) 1837/FFFFFFFFFFFF0F24 :                     ; ----------------------------------------------------------------
(1) 1838/FFFFFFFFFFFF0F24 :                     ; Text PRINT system.
(1) 1839/FFFFFFFFFFFF0F24 :                     ; ----------------------------------------------------------------
(1) 1840/FFFFFFFFFFFF0F24 :                     
(1) 1841/FFFFFFFFFFFF0F24 :                     ; --------------------------------------------------------
(1) 1842/FFFFFFFFFFFF0F24 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1843/FFFFFFFFFFFF0F24 :                     ;
(1) 1844/FFFFFFFFFFFF0F24 :                     ; Initializes the default Graphics and Palette
(1) 1845/FFFFFFFFFFFF0F24 :                     ; for the font.
(1) 1846/FFFFFFFFFFFF0F24 :                     ;
(1) 1847/FFFFFFFFFFFF0F24 :                     ; Input:
(1) 1848/FFFFFFFFFFFF0F24 :                     ; d0.l | Graphics data
(1) 1849/FFFFFFFFFFFF0F24 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1850/FFFFFFFFFFFF0F24 :                     ; d1.w | VRAM output location to load and use
(1) 1851/FFFFFFFFFFFF0F24 :                     ;        the ASCII text including attribute
(1) 1852/FFFFFFFFFFFF0F24 :                     ;        settings (Palette and Priority)
(1) 1853/FFFFFFFFFFFF0F24 :                     ;        Defualt values are:
(1) 1854/FFFFFFFFFFFF0F24 :                     ;        DEF_PrintVram for 8x8 and
(1) 1855/FFFFFFFFFFFF0F24 :                     ;        DEF_PrintVramW for 8x16
(1) 1856/FFFFFFFFFFFF0F24 :                     ;
(1) 1857/FFFFFFFFFFFF0F24 :                     ; Breaks:
(1) 1858/FFFFFFFFFFFF0F24 :                     ; d0-d3
(1) 1859/FFFFFFFFFFFF0F24 :                     ;
(1) 1860/FFFFFFFFFFFF0F24 :                     ; Notes:
(1) 1861/FFFFFFFFFFFF0F24 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1862/FFFFFFFFFFFF0F24 :                     ; - Write your palette manually after this
(1) 1863/FFFFFFFFFFFF0F24 :                     ; --------------------------------------------------------
(1) 1864/FFFFFFFFFFFF0F24 :                     
(1) 1865/FFFFFFFFFFFF0F24 :                     Video_PrintInitW:
(1) 1866/FFFFFFFFFFFF0F24 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1867/FFFFFFFFFFFF0F28 : 3601                		move.w	d1,d3
(1) 1868/FFFFFFFFFFFF0F2A : 0443 0040           		subi.w	#$20*2,d3
(1) 1869/FFFFFFFFFFFF0F2E : 31C3 E446           		move.w	d3,(RAM_SetPrntVramW).w
(1) 1870/FFFFFFFFFFFF0F32 : 600E                		bra.s	vidPrint_Init
(1) 1871/FFFFFFFFFFFF0F34 :                     Video_PrintInit:
(1) 1872/FFFFFFFFFFFF0F34 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1873/FFFFFFFFFFFF0F38 : 3601                		move.w	d1,d3
(1) 1874/FFFFFFFFFFFF0F3A : 0443 0020           		subi.w	#$20,d3
(1) 1875/FFFFFFFFFFFF0F3E : 31C3 E444           		move.w	d3,(RAM_SetPrntVram).w
(1) 1876/FFFFFFFFFFFF0F42 :                     vidPrint_Init:
(1) 1877/FFFFFFFFFFFF0F42 : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1878/FFFFFFFFFFFF0F44 : 6000 F904           		bra	Video_LoadArt
(1) 1879/FFFFFFFFFFFF0F48 :                     
(1) 1880/FFFFFFFFFFFF0F48 :                     ; --------------------------------------------------------
(1) 1881/FFFFFFFFFFFF0F48 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1882/FFFFFFFFFFFF0F48 :                     ;
(1) 1883/FFFFFFFFFFFF0F48 :                     ; Loads default palette for the font
(1) 1884/FFFFFFFFFFFF0F48 :                     ; --------------------------------------------------------
(1) 1885/FFFFFFFFFFFF0F48 :                     
(1) 1886/FFFFFFFFFFFF0F48 :                     Video_PrintDefPal_Fade:
(1) 1887/FFFFFFFFFFFF0F48 : 2F0E                		move.l	a6,-(sp)
(1) 1888/FFFFFFFFFFFF0F4A : 4DF8 E292           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1889/FFFFFFFFFFFF0F4E : 6006                		bra.s	vid_FontDefPal
(1) 1890/FFFFFFFFFFFF0F50 :                     Video_PrintDefPal:
(1) 1891/FFFFFFFFFFFF0F50 : 2F0E                		move.l	a6,-(sp)
(1) 1892/FFFFFFFFFFFF0F52 : 4DF8 E212           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1893/FFFFFFFFFFFF0F56 :                     vid_FontDefPal:
(1) 1894/FFFFFFFFFFFF0F56 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1895/FFFFFFFFFFFF0F5A : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1896/FFFFFFFFFFFF0F5E : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1897/FFFFFFFFFFFF0F62 : 2C5F                		move.l	(sp)+,a6
(1) 1898/FFFFFFFFFFFF0F64 : 4E75                		rts
(1) 1899/FFFFFFFFFFFF0F66 :                     
(1) 1900/FFFFFFFFFFFF0F66 :                     ; --------------------------------------------------------
(1) 1901/FFFFFFFFFFFF0F66 :                     ; Video_Print, Video_PrintW
(1) 1902/FFFFFFFFFFFF0F66 :                     ;
(1) 1903/FFFFFFFFFFFF0F66 :                     ; Prints a text string, VDP side.
(1) 1904/FFFFFFFFFFFF0F66 :                     ;
(1) 1905/FFFFFFFFFFFF0F66 :                     ; Input:
(1) 1906/FFFFFFFFFFFF0F66 :                     ; a0   | String data
(1) 1907/FFFFFFFFFFFF0F66 :                     ; d0.w | X position
(1) 1908/FFFFFFFFFFFF0F66 :                     ; d1.w | Y position
(1) 1909/FFFFFFFFFFFF0F66 :                     ; d2.w | Screen VRAM location
(1) 1910/FFFFFFFFFFFF0F66 :                     ;        Foreground: DEF_VRAM_FG
(1) 1911/FFFFFFFFFFFF0F66 :                     ;        Background: DEF_VRAM_BG
(1) 1912/FFFFFFFFFFFF0F66 :                     ;        Window:     DEF_VRAM_WD
(1) 1913/FFFFFFFFFFFF0F66 :                     ;
(1) 1914/FFFFFFFFFFFF0F66 :                     ; d3.w | Screen width
(1) 1915/FFFFFFFFFFFF0F66 :                     ;        - $040 (DEF_HSIZE_32)
(1) 1916/FFFFFFFFFFFF0F66 :                     ;        - $080 (DEF_HSIZE_64)
(1) 1917/FFFFFFFFFFFF0F66 :                     ;        - $100 (DEF_HSIZE_128)
(1) 1918/FFFFFFFFFFFF0F66 :                     ;
(1) 1919/FFFFFFFFFFFF0F66 :                     ; Notes:
(1) 1920/FFFFFFFFFFFF0F66 :                     ; - Initialize your graphics and VRAM location
(1) 1921/FFFFFFFFFFFF0F66 :                     ;   with Video_PrintInit
(1) 1922/FFFFFFFFFFFF0F66 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1923/FFFFFFFFFFFF0F66 :                     ;   mode.
(1) 1924/FFFFFFFFFFFF0F66 :                     ; --------------------------------------------------------
(1) 1925/FFFFFFFFFFFF0F66 :                     
(1) 1926/FFFFFFFFFFFF0F66 :                     ; dc.l pstr(type,ram_location)
(1) 1927/FFFFFFFFFFFF0F66 :                     ;
(1) 1928/FFFFFFFFFFFF0F66 :                     ; type:
(1) 1929/FFFFFFFFFFFF0F66 :                     ; 0 - Byte
(1) 1930/FFFFFFFFFFFF0F66 :                     ; 1 - Word
(1) 1931/FFFFFFFFFFFF0F66 :                     ; 2 - 24-bit
(1) 1932/FFFFFFFFFFFF0F66 :                     ; 3 - Long
(1) 1933/FFFFFFFFFFFF0F66 :                     
(1) 1934/FFFFFFFFFFFF0F66 :                     Video_Print:
(1) 1935/FFFFFFFFFFFF0F66 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1936/FFFFFFFFFFFF0F6A : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1937/FFFFFFFFFFFF0F70 : 3E02                		move.w	d2,d7
(1) 1938/FFFFFFFFFFFF0F72 : 3A00                		move.w	d0,d5
(1) 1939/FFFFFFFFFFFF0F74 : DA45                		add.w	d5,d5
(1) 1940/FFFFFFFFFFFF0F76 : 3801                		move.w	d1,d4
(1) 1941/FFFFFFFFFFFF0F78 : C8C3                		mulu.w	d3,d4
(1) 1942/FFFFFFFFFFFF0F7A : DA44                		add.w	d4,d5
(1) 1943/FFFFFFFFFFFF0F7C : DE45                		add.w	d5,d7
(1) 1944/FFFFFFFFFFFF0F7E : 3C03                		move.w	d3,d6
(1) 1945/FFFFFFFFFFFF0F80 :                     
(1) 1946/FFFFFFFFFFFF0F80 : 7A00                		moveq	#0,d5
(1) 1947/FFFFFFFFFFFF0F82 : 3A07                		move.w	d7,d5
(1) 1948/FFFFFFFFFFFF0F84 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1949/FFFFFFFFFFFF0F88 : 8E7C 4000           		or.w	#$4000,d7
(1) 1950/FFFFFFFFFFFF0F8C : E55D                		rol.w	#2,d5
(1) 1951/FFFFFFFFFFFF0F8E : 0245 0003           		andi.w	#%11,d5
(1) 1952/FFFFFFFFFFFF0F92 : 4845                		swap	d5
(1) 1953/FFFFFFFFFFFF0F94 : 2A48                		move.l	a0,a5
(1) 1954/FFFFFFFFFFFF0F96 :                     .loop:
(1) 1955/FFFFFFFFFFFF0F96 : 3806                		move.w	d6,d4
(1) 1956/FFFFFFFFFFFF0F98 : 5344                		subq.w	#1,d4
(1) 1957/FFFFFFFFFFFF0F9A : CA44                		and.w	d4,d5
(1) 1958/FFFFFFFFFFFF0F9C :                     
(1) 1959/FFFFFFFFFFFF0F9C : 3807                		move.w	d7,d4
(1) 1960/FFFFFFFFFFFF0F9E : D845                		add.w	d5,d4
(1) 1961/FFFFFFFFFFFF0FA0 : 4845                		swap	d5
(1) 1962/FFFFFFFFFFFF0FA2 : 3D44 0004           		move.w	d4,4(a6)
(1) 1963/FFFFFFFFFFFF0FA6 : 3D45 0004           		move.w	d5,4(a6)
(1) 1964/FFFFFFFFFFFF0FAA : 4845                		swap	d5
(1) 1965/FFFFFFFFFFFF0FAC :                     .q_loop:
(1) 1966/FFFFFFFFFFFF0FAC : 181D                		move.b	(a5)+,d4
(1) 1967/FFFFFFFFFFFF0FAE : 671C                		beq.s	.exit
(1) 1968/FFFFFFFFFFFF0FB0 : 6B20                		bmi.s	.special
(1) 1969/FFFFFFFFFFFF0FB2 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1970/FFFFFFFFFFFF0FB6 : 670E                		beq.s	.next
(1) 1971/FFFFFFFFFFFF0FB8 :                     ; ------------------------------------------------
(1) 1972/FFFFFFFFFFFF0FB8 :                     ; Normal text
(1) 1973/FFFFFFFFFFFF0FB8 : 0244 00FF           		andi.w	#$FF,d4
(1) 1974/FFFFFFFFFFFF0FBC : D878 E444           		add.w	(RAM_SetPrntVram).w,d4
(1) 1975/FFFFFFFFFFFF0FC0 : 3C84                		move.w	d4,(a6)
(1) 1976/FFFFFFFFFFFF0FC2 : 5445                		addq.w	#2,d5
(1) 1977/FFFFFFFFFFFF0FC4 : 60E6                		bra.s	.q_loop
(1) 1978/FFFFFFFFFFFF0FC6 :                     .next:
(1) 1979/FFFFFFFFFFFF0FC6 : 4245                		clr.w	d5
(1) 1980/FFFFFFFFFFFF0FC8 : DE46                		add.w	d6,d7			; Next line
(1) 1981/FFFFFFFFFFFF0FCA : 60CA                		bra.s	.loop
(1) 1982/FFFFFFFFFFFF0FCC :                     .exit:
(1) 1983/FFFFFFFFFFFF0FCC : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1984/FFFFFFFFFFFF0FD0 : 4E75                		rts
(1) 1985/FFFFFFFFFFFF0FD2 :                     ; ------------------------------------------------
(1) 1986/FFFFFFFFFFFF0FD2 :                     ; Show value
(1) 1987/FFFFFFFFFFFF0FD2 :                     ; d4 - $80|flags
(1) 1988/FFFFFFFFFFFF0FD2 :                     .special:
(1) 1989/FFFFFFFFFFFF0FD2 : 4846                		swap	d6
(1) 1990/FFFFFFFFFFFF0FD4 : 1C04                		move.b	d4,d6
(1) 1991/FFFFFFFFFFFF0FD6 : E19C                		rol.l	#8,d4
(1) 1992/FFFFFFFFFFFF0FD8 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 1993/FFFFFFFFFFFF0FDA : E19C                		rol.l	#8,d4
(1) 1994/FFFFFFFFFFFF0FDC : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 1995/FFFFFFFFFFFF0FDE : E19C                		rol.l	#8,d4
(1) 1996/FFFFFFFFFFFF0FE0 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 1997/FFFFFFFFFFFF0FE2 : 2844                		move.l	d4,a4
(1) 1998/FFFFFFFFFFFF0FE4 : 0246 0003           		andi.w	#%11,d6
(1) 1999/FFFFFFFFFFFF0FE8 : 4847                		swap	d7
(1) 2000/FFFFFFFFFFFF0FEA : 3E3C 0000           		move.w	#1-1,d7
(1) 2001/FFFFFFFFFFFF0FEE : BC3C 0003           		cmp.b	#$03,d6
(1) 2002/FFFFFFFFFFFF0FF2 : 6724                		beq.s	.show_long
(1) 2003/FFFFFFFFFFFF0FF4 : BC3C 0002           		cmp.b	#$02,d6
(1) 2004/FFFFFFFFFFFF0FF8 : 6716                		beq.s	.show_24
(1) 2005/FFFFFFFFFFFF0FFA : BC3C 0001           		cmp.b	#$01,d6
(1) 2006/FFFFFFFFFFFF0FFE : 6708                		beq.s	.show_word
(1) 2007/FFFFFFFFFFFF1000 :                     .show_byte:
(1) 2008/FFFFFFFFFFFF1000 : 1814                		move.b	(a4),d4
(1) 2009/FFFFFFFFFFFF1002 : 4844                		swap	d4
(1) 2010/FFFFFFFFFFFF1004 : E19C                		rol.l	#8,d4
(1) 2011/FFFFFFFFFFFF1006 : 6014                		bra.s	.mk_value
(1) 2012/FFFFFFFFFFFF1008 :                     .show_word:
(1) 2013/FFFFFFFFFFFF1008 : 3814                		move.w	(a4),d4
(1) 2014/FFFFFFFFFFFF100A : 4844                		swap	d4
(1) 2015/FFFFFFFFFFFF100C : 5247                		addq.w	#1,d7
(1) 2016/FFFFFFFFFFFF100E : 600C                		bra.s	.mk_value
(1) 2017/FFFFFFFFFFFF1010 :                     .show_24:
(1) 2018/FFFFFFFFFFFF1010 : 2814                		move.l	(a4),d4
(1) 2019/FFFFFFFFFFFF1012 : E19C                		rol.l	#8,d4
(1) 2020/FFFFFFFFFFFF1014 : 5447                		addq.w	#2,d7
(1) 2021/FFFFFFFFFFFF1016 : 6004                		bra.s	.mk_value
(1) 2022/FFFFFFFFFFFF1018 :                     .show_long:
(1) 2023/FFFFFFFFFFFF1018 : 2814                		move.l	(a4),d4
(1) 2024/FFFFFFFFFFFF101A : 5647                		addq.w	#3,d7
(1) 2025/FFFFFFFFFFFF101C :                     .mk_value:
(1) 2026/FFFFFFFFFFFF101C : E99C                		rol.l	#4,d4
(1) 2027/FFFFFFFFFFFF101E : 6110                		bsr.s	.show_nibbl
(1) 2028/FFFFFFFFFFFF1020 : E99C                		rol.l	#4,d4
(1) 2029/FFFFFFFFFFFF1022 : 610C                		bsr.s	.show_nibbl
(1) 2030/FFFFFFFFFFFF1024 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2031/FFFFFFFFFFFF1028 : 4846                		swap	d6
(1) 2032/FFFFFFFFFFFF102A : 4847                		swap	d7
(1) 2033/FFFFFFFFFFFF102C : 6000 FF68           		bra	.loop
(1) 2034/FFFFFFFFFFFF1030 :                     .show_nibbl:
(1) 2035/FFFFFFFFFFFF1030 : 2846                		move.l	d6,a4
(1) 2036/FFFFFFFFFFFF1032 : 1C04                		move.b	d4,d6
(1) 2037/FFFFFFFFFFFF1034 : 0246 000F           		andi.w	#$0F,d6
(1) 2038/FFFFFFFFFFFF1038 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2039/FFFFFFFFFFFF103C : 6502                		bcs.s	.hex_incr
(1) 2040/FFFFFFFFFFFF103E : 5E46                		addq.w	#7,d6
(1) 2041/FFFFFFFFFFFF1040 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2042/FFFFFFFFFFFF1044 : DC78 E444           		add.w	(RAM_SetPrntVram).w,d6
(1) 2043/FFFFFFFFFFFF1048 : 3C86                		move.w	d6,(a6)
(1) 2044/FFFFFFFFFFFF104A : 5445                		addq.w	#2,d5
(1) 2045/FFFFFFFFFFFF104C : 2C0C                		move.l	a4,d6
(1) 2046/FFFFFFFFFFFF104E : 4E75                		rts
(1) 2047/FFFFFFFFFFFF1050 :                     
(1) 2048/FFFFFFFFFFFF1050 :                     ; --------------------------------------------------------
(1) 2049/FFFFFFFFFFFF1050 :                     ; 8x16 version
(1) 2050/FFFFFFFFFFFF1050 :                     ; --------------------------------------------------------
(1) 2051/FFFFFFFFFFFF1050 :                     
(1) 2052/FFFFFFFFFFFF1050 :                     Video_PrintW:
(1) 2053/FFFFFFFFFFFF1050 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2054/FFFFFFFFFFFF1054 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2055/FFFFFFFFFFFF105A :                     
(1) 2056/FFFFFFFFFFFF105A : 3C38 E446           		move.w	(RAM_SetPrntVramW).w,d6
(1) 2057/FFFFFFFFFFFF105E : 3A38 E45A           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2058/FFFFFFFFFFFF1062 : 0805 0002           		btst	#2,d5
(1) 2059/FFFFFFFFFFFF1066 : 670E                		beq.s	.no_dble_y
(1) 2060/FFFFFFFFFFFF1068 : 3E06                		move.w	d6,d7
(1) 2061/FFFFFFFFFFFF106A : 0247 F800           		andi.w	#$F800,d7
(1) 2062/FFFFFFFFFFFF106E : 0246 07FF           		andi.w	#$7FF,d6
(1) 2063/FFFFFFFFFFFF1072 : E24E                		lsr.w	#1,d6
(1) 2064/FFFFFFFFFFFF1074 : 8C47                		or.w	d7,d6
(1) 2065/FFFFFFFFFFFF1076 :                     .no_dble_y:
(1) 2066/FFFFFFFFFFFF1076 : 4846                		swap	d6
(1) 2067/FFFFFFFFFFFF1078 : 3E02                		move.w	d2,d7
(1) 2068/FFFFFFFFFFFF107A : 3A00                		move.w	d0,d5
(1) 2069/FFFFFFFFFFFF107C : DA45                		add.w	d5,d5
(1) 2070/FFFFFFFFFFFF107E : 3801                		move.w	d1,d4
(1) 2071/FFFFFFFFFFFF1080 : C8C3                		mulu.w	d3,d4
(1) 2072/FFFFFFFFFFFF1082 : DA44                		add.w	d4,d5
(1) 2073/FFFFFFFFFFFF1084 : DE45                		add.w	d5,d7
(1) 2074/FFFFFFFFFFFF1086 : 3C03                		move.w	d3,d6
(1) 2075/FFFFFFFFFFFF1088 :                     
(1) 2076/FFFFFFFFFFFF1088 : 7A00                		moveq	#0,d5
(1) 2077/FFFFFFFFFFFF108A : 3A07                		move.w	d7,d5
(1) 2078/FFFFFFFFFFFF108C : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2079/FFFFFFFFFFFF1090 : 8E7C 4000           		or.w	#$4000,d7
(1) 2080/FFFFFFFFFFFF1094 : E55D                		rol.w	#2,d5
(1) 2081/FFFFFFFFFFFF1096 : 0245 0003           		andi.w	#%11,d5
(1) 2082/FFFFFFFFFFFF109A : 4845                		swap	d5
(1) 2083/FFFFFFFFFFFF109C : 2A48                		move.l	a0,a5
(1) 2084/FFFFFFFFFFFF109E :                     	; d7 -      TEMP       | VDP write left
(1) 2085/FFFFFFFFFFFF109E :                     	; d6 -      TEMP       | Y next-line size
(1) 2086/FFFFFFFFFFFF109E :                     	; d5 - VDP write right | X current pos
(1) 2087/FFFFFFFFFFFF109E :                     	; d4 -                 | TEMP
(1) 2088/FFFFFFFFFFFF109E :                     .loop:
(1) 2089/FFFFFFFFFFFF109E : 3806                		move.w	d6,d4
(1) 2090/FFFFFFFFFFFF10A0 : 5344                		subq.w	#1,d4
(1) 2091/FFFFFFFFFFFF10A2 : CA44                		and.w	d4,d5
(1) 2092/FFFFFFFFFFFF10A4 : 181D                		move.b	(a5)+,d4
(1) 2093/FFFFFFFFFFFF10A6 : 6776                		beq.s	.exit
(1) 2094/FFFFFFFFFFFF10A8 : 6B7A                		bmi.s	.special
(1) 2095/FFFFFFFFFFFF10AA : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2096/FFFFFFFFFFFF10AE : 6766                		beq.s	.next
(1) 2097/FFFFFFFFFFFF10B0 :                     ; ------------------------------------------------
(1) 2098/FFFFFFFFFFFF10B0 :                     ; Normal text
(1) 2099/FFFFFFFFFFFF10B0 : 0244 00FF           		andi.w	#$FF,d4
(1) 2100/FFFFFFFFFFFF10B4 : 4847                		swap	d7
(1) 2101/FFFFFFFFFFFF10B6 : 3E38 E45A           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2102/FFFFFFFFFFFF10BA : 0807 0002           		btst	#2,d7
(1) 2103/FFFFFFFFFFFF10BE : 671E                		beq.s	.ver_normal
(1) 2104/FFFFFFFFFFFF10C0 : 4846                		swap	d6
(1) 2105/FFFFFFFFFFFF10C2 : D846                		add.w	d6,d4
(1) 2106/FFFFFFFFFFFF10C4 : 4846                		swap	d6
(1) 2107/FFFFFFFFFFFF10C6 : 4844                		swap	d4
(1) 2108/FFFFFFFFFFFF10C8 : 4847                		swap	d7
(1) 2109/FFFFFFFFFFFF10CA : 3807                		move.w	d7,d4
(1) 2110/FFFFFFFFFFFF10CC : D845                		add.w	d5,d4
(1) 2111/FFFFFFFFFFFF10CE : 4845                		swap	d5
(1) 2112/FFFFFFFFFFFF10D0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2113/FFFFFFFFFFFF10D4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2114/FFFFFFFFFFFF10D8 : 4844                		swap	d4
(1) 2115/FFFFFFFFFFFF10DA : 3C84                		move.w	d4,(a6)
(1) 2116/FFFFFFFFFFFF10DC : 6032                		bra.s	.ver_cont
(1) 2117/FFFFFFFFFFFF10DE :                     .ver_normal:
(1) 2118/FFFFFFFFFFFF10DE : D844                		add.w	d4,d4
(1) 2119/FFFFFFFFFFFF10E0 : 4846                		swap	d6
(1) 2120/FFFFFFFFFFFF10E2 : D846                		add.w	d6,d4
(1) 2121/FFFFFFFFFFFF10E4 : 4846                		swap	d6
(1) 2122/FFFFFFFFFFFF10E6 : 4844                		swap	d4
(1) 2123/FFFFFFFFFFFF10E8 : 4847                		swap	d7
(1) 2124/FFFFFFFFFFFF10EA : 3807                		move.w	d7,d4
(1) 2125/FFFFFFFFFFFF10EC : D845                		add.w	d5,d4
(1) 2126/FFFFFFFFFFFF10EE : 4845                		swap	d5
(1) 2127/FFFFFFFFFFFF10F0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2128/FFFFFFFFFFFF10F4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2129/FFFFFFFFFFFF10F8 : 4844                		swap	d4
(1) 2130/FFFFFFFFFFFF10FA : 3C84                		move.w	d4,(a6)
(1) 2131/FFFFFFFFFFFF10FC : 5244                		addq.w	#1,d4
(1) 2132/FFFFFFFFFFFF10FE : 4844                		swap	d4
(1) 2133/FFFFFFFFFFFF1100 : D846                		add.w	d6,d4
(1) 2134/FFFFFFFFFFFF1102 : 3D44 0004           		move.w	d4,4(a6)
(1) 2135/FFFFFFFFFFFF1106 : 3D45 0004           		move.w	d5,4(a6)
(1) 2136/FFFFFFFFFFFF110A : 4844                		swap	d4
(1) 2137/FFFFFFFFFFFF110C : 3C84                		move.w	d4,(a6)
(1) 2138/FFFFFFFFFFFF110E : 4844                		swap	d4
(1) 2139/FFFFFFFFFFFF1110 :                     
(1) 2140/FFFFFFFFFFFF1110 :                     .ver_cont:
(1) 2141/FFFFFFFFFFFF1110 : 4845                		swap	d5
(1) 2142/FFFFFFFFFFFF1112 : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2143/FFFFFFFFFFFF1114 : 6088                		bra.s	.loop
(1) 2144/FFFFFFFFFFFF1116 :                     .next:
(1) 2145/FFFFFFFFFFFF1116 : 4245                		clr.w	d5		; Clear X pos
(1) 2146/FFFFFFFFFFFF1118 : DE46                		add.w	d6,d7		; Next Y line
(1) 2147/FFFFFFFFFFFF111A : DE46                		add.w	d6,d7		; twice
(1) 2148/FFFFFFFFFFFF111C : 6080                		bra	.loop
(1) 2149/FFFFFFFFFFFF111E :                     .exit:
(1) 2150/FFFFFFFFFFFF111E : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2151/FFFFFFFFFFFF1122 : 4E75                		rts
(1) 2152/FFFFFFFFFFFF1124 :                     ; ------------------------------------------------
(1) 2153/FFFFFFFFFFFF1124 :                     ; Show value
(1) 2154/FFFFFFFFFFFF1124 :                     ; d4 - $80|flags
(1) 2155/FFFFFFFFFFFF1124 :                     .special:
(1) 2156/FFFFFFFFFFFF1124 : 2646                		move.l	d6,a3
(1) 2157/FFFFFFFFFFFF1126 : 1C04                		move.b	d4,d6
(1) 2158/FFFFFFFFFFFF1128 : E19C                		rol.l	#8,d4
(1) 2159/FFFFFFFFFFFF112A : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2160/FFFFFFFFFFFF112C : E19C                		rol.l	#8,d4
(1) 2161/FFFFFFFFFFFF112E : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2162/FFFFFFFFFFFF1130 : E19C                		rol.l	#8,d4
(1) 2163/FFFFFFFFFFFF1132 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2164/FFFFFFFFFFFF1134 : 2844                		move.l	d4,a4
(1) 2165/FFFFFFFFFFFF1136 : 0246 0003           		andi.w	#%11,d6
(1) 2166/FFFFFFFFFFFF113A : 4847                		swap	d7
(1) 2167/FFFFFFFFFFFF113C : 3E3C 0000           		move.w	#1-1,d7
(1) 2168/FFFFFFFFFFFF1140 : BC3C 0003           		cmp.b	#$03,d6
(1) 2169/FFFFFFFFFFFF1144 : 6724                		beq.s	.show_long
(1) 2170/FFFFFFFFFFFF1146 : BC3C 0002           		cmp.b	#$02,d6
(1) 2171/FFFFFFFFFFFF114A : 6716                		beq.s	.show_24
(1) 2172/FFFFFFFFFFFF114C : BC3C 0001           		cmp.b	#$01,d6
(1) 2173/FFFFFFFFFFFF1150 : 6708                		beq.s	.show_word
(1) 2174/FFFFFFFFFFFF1152 :                     .show_byte:
(1) 2175/FFFFFFFFFFFF1152 : 1814                		move.b	(a4),d4
(1) 2176/FFFFFFFFFFFF1154 : 4844                		swap	d4
(1) 2177/FFFFFFFFFFFF1156 : E19C                		rol.l	#8,d4
(1) 2178/FFFFFFFFFFFF1158 : 6014                		bra.s	.mk_value_in
(1) 2179/FFFFFFFFFFFF115A :                     .show_word:
(1) 2180/FFFFFFFFFFFF115A : 3814                		move.w	(a4),d4
(1) 2181/FFFFFFFFFFFF115C : 4844                		swap	d4
(1) 2182/FFFFFFFFFFFF115E : 5247                		addq.w	#1,d7
(1) 2183/FFFFFFFFFFFF1160 : 600C                		bra.s	.mk_value_in
(1) 2184/FFFFFFFFFFFF1162 :                     .show_24:
(1) 2185/FFFFFFFFFFFF1162 : 2814                		move.l	(a4),d4
(1) 2186/FFFFFFFFFFFF1164 : E19C                		rol.l	#8,d4
(1) 2187/FFFFFFFFFFFF1166 : 5447                		addq.w	#2,d7
(1) 2188/FFFFFFFFFFFF1168 : 6004                		bra.s	.mk_value_in
(1) 2189/FFFFFFFFFFFF116A :                     .show_long:
(1) 2190/FFFFFFFFFFFF116A : 2814                		move.l	(a4),d4
(1) 2191/FFFFFFFFFFFF116C : 5647                		addq.w	#3,d7
(1) 2192/FFFFFFFFFFFF116E :                     .mk_value_in:
(1) 2193/FFFFFFFFFFFF116E : 2C0B                		move.l	a3,d6
(1) 2194/FFFFFFFFFFFF1170 :                     
(1) 2195/FFFFFFFFFFFF1170 :                     
(1) 2196/FFFFFFFFFFFF1170 :                     	; d4 - value
(1) 2197/FFFFFFFFFFFF1170 : 4846                		swap	d6
(1) 2198/FFFFFFFFFFFF1172 :                     .mk_value:
(1) 2199/FFFFFFFFFFFF1172 : E99C                		rol.l	#4,d4
(1) 2200/FFFFFFFFFFFF1174 : 6110                		bsr.s	.show_nibbl
(1) 2201/FFFFFFFFFFFF1176 : E99C                		rol.l	#4,d4
(1) 2202/FFFFFFFFFFFF1178 : 610C                		bsr.s	.show_nibbl
(1) 2203/FFFFFFFFFFFF117A : 51CF FFF6           		dbf	d7,.mk_value
(1) 2204/FFFFFFFFFFFF117E : 4846                		swap	d6
(1) 2205/FFFFFFFFFFFF1180 : 4847                		swap	d7
(1) 2206/FFFFFFFFFFFF1182 : 6000 FF1A           		bra	.loop
(1) 2207/FFFFFFFFFFFF1186 :                     
(1) 2208/FFFFFFFFFFFF1186 :                     	; d6 - Y next-line size | TEMP
(1) 2209/FFFFFFFFFFFF1186 :                     .show_nibbl:
(1) 2210/FFFFFFFFFFFF1186 : 2846                		move.l	d6,a4
(1) 2211/FFFFFFFFFFFF1188 : 2644                		move.l	d4,a3
(1) 2212/FFFFFFFFFFFF118A : 3C38 E45A           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2213/FFFFFFFFFFFF118E : 0806 0002           		btst	#2,d6
(1) 2214/FFFFFFFFFFFF1192 : 6730                		beq.s	.nibbl_norm
(1) 2215/FFFFFFFFFFFF1194 :                     
(1) 2216/FFFFFFFFFFFF1194 : 616A                		bsr.s	.get_preval
(1) 2217/FFFFFFFFFFFF1196 : 4847                		swap	d7
(1) 2218/FFFFFFFFFFFF1198 : 3838 E446           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2219/FFFFFFFFFFFF119C : 0244 07FF           		andi.w	#$7FF,d4
(1) 2220/FFFFFFFFFFFF11A0 : E24C                		lsr.w	#1,d4
(1) 2221/FFFFFFFFFFFF11A2 : DC44                		add.w	d4,d6
(1) 2222/FFFFFFFFFFFF11A4 : 3838 E446           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2223/FFFFFFFFFFFF11A8 : 0244 F800           		andi.w	#$F800,d4
(1) 2224/FFFFFFFFFFFF11AC : 8C44                		or.w	d4,d6
(1) 2225/FFFFFFFFFFFF11AE : 3807                		move.w	d7,d4
(1) 2226/FFFFFFFFFFFF11B0 : 4847                		swap	d7
(1) 2227/FFFFFFFFFFFF11B2 : D845                		add.w	d5,d4
(1) 2228/FFFFFFFFFFFF11B4 : 4845                		swap	d5
(1) 2229/FFFFFFFFFFFF11B6 : 3D44 0004           		move.w	d4,4(a6)
(1) 2230/FFFFFFFFFFFF11BA : 3D45 0004           		move.w	d5,4(a6)
(1) 2231/FFFFFFFFFFFF11BE : 4845                		swap	d5
(1) 2232/FFFFFFFFFFFF11C0 : 3C86                		move.w	d6,(a6)
(1) 2233/FFFFFFFFFFFF11C2 : 6034                		bra.s	.nibbl_cont
(1) 2234/FFFFFFFFFFFF11C4 :                     
(1) 2235/FFFFFFFFFFFF11C4 :                     .nibbl_norm:
(1) 2236/FFFFFFFFFFFF11C4 : 613A                		bsr.s	.get_preval
(1) 2237/FFFFFFFFFFFF11C6 : DC46                		add.w	d6,d6
(1) 2238/FFFFFFFFFFFF11C8 : DC78 E446           		add.w	(RAM_SetPrntVramW).w,d6
(1) 2239/FFFFFFFFFFFF11CC : 4847                		swap	d7
(1) 2240/FFFFFFFFFFFF11CE : 3807                		move.w	d7,d4
(1) 2241/FFFFFFFFFFFF11D0 : 4847                		swap	d7
(1) 2242/FFFFFFFFFFFF11D2 : D845                		add.w	d5,d4
(1) 2243/FFFFFFFFFFFF11D4 : 4845                		swap	d5
(1) 2244/FFFFFFFFFFFF11D6 : 3D44 0004           		move.w	d4,4(a6)
(1) 2245/FFFFFFFFFFFF11DA : 3D45 0004           		move.w	d5,4(a6)
(1) 2246/FFFFFFFFFFFF11DE : 4845                		swap	d5
(1) 2247/FFFFFFFFFFFF11E0 : 3C86                		move.w	d6,(a6)
(1) 2248/FFFFFFFFFFFF11E2 : 5246                		addq.w	#1,d6
(1) 2249/FFFFFFFFFFFF11E4 : 4846                		swap	d6
(1) 2250/FFFFFFFFFFFF11E6 : D846                		add.w	d6,d4
(1) 2251/FFFFFFFFFFFF11E8 : 4846                		swap	d6
(1) 2252/FFFFFFFFFFFF11EA : 4845                		swap	d5
(1) 2253/FFFFFFFFFFFF11EC : 3D44 0004           		move.w	d4,4(a6)
(1) 2254/FFFFFFFFFFFF11F0 : 3D45 0004           		move.w	d5,4(a6)
(1) 2255/FFFFFFFFFFFF11F4 : 4845                		swap	d5
(1) 2256/FFFFFFFFFFFF11F6 : 3C86                		move.w	d6,(a6)
(1) 2257/FFFFFFFFFFFF11F8 :                     .nibbl_cont:
(1) 2258/FFFFFFFFFFFF11F8 : 5445                		addq.w	#2,d5
(1) 2259/FFFFFFFFFFFF11FA : 2C0C                		move.l	a4,d6
(1) 2260/FFFFFFFFFFFF11FC : 280B                		move.l	a3,d4
(1) 2261/FFFFFFFFFFFF11FE : 4E75                		rts
(1) 2262/FFFFFFFFFFFF1200 :                     
(1) 2263/FFFFFFFFFFFF1200 :                     .get_preval:
(1) 2264/FFFFFFFFFFFF1200 : 1C04                		move.b	d4,d6
(1) 2265/FFFFFFFFFFFF1202 : 0246 000F           		andi.w	#$0F,d6
(1) 2266/FFFFFFFFFFFF1206 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2267/FFFFFFFFFFFF120A : 6502                		bcs.s	.hex_incr
(1) 2268/FFFFFFFFFFFF120C : 5E46                		addq.w	#7,d6
(1) 2269/FFFFFFFFFFFF120E :                     .hex_incr:
(1) 2270/FFFFFFFFFFFF120E : DC7C 0030           		add.w	#"0",d6
(1) 2271/FFFFFFFFFFFF1212 : 4E75                		rts
(1) 2272/FFFFFFFFFFFF1214 :                     
(1) 2273/FFFFFFFFFFFF1214 :                     ; ------------------------------------------------
(1) 2274/FFFFFFFFFFFF1214 :                     ; Input:
(1) 2275/FFFFFFFFFFFF1214 :                     ; d2.w | Layer:
(1) 2276/FFFFFFFFFFFF1214 :                     ;        0 - Foreground
(1) 2277/FFFFFFFFFFFF1214 :                     ;        1 - Background
(1) 2278/FFFFFFFFFFFF1214 :                     ;        2 - WINDOW
(1) 2279/FFFFFFFFFFFF1214 :                     ;
(1) 2280/FFFFFFFFFFFF1214 :                     ; Returns:
(1) 2281/FFFFFFFFFFFF1214 :                     ; d7 - VRAM location
(1) 2282/FFFFFFFFFFFF1214 :                     ; d6 - Y jump size
(1) 2283/FFFFFFFFFFFF1214 :                     ; ------------------------------------------------
(1) 2284/FFFFFFFFFFFF1214 :                     
(1) 2285/FFFFFFFFFFFF1214 :                     ; vidSub_PickLayer:
(1) 2286/FFFFFFFFFFFF1214 :                     ; 		move.w	d2,d7
(1) 2287/FFFFFFFFFFFF1214 :                     ; 		lsl.w	#2,d7
(1) 2288/FFFFFFFFFFFF1214 :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2289/FFFFFFFFFFFF1214 :                     ; 		lea	.filter_data(pc),a4
(1) 2290/FFFFFFFFFFFF1214 :                     ; 		adda	d7,a4
(1) 2291/FFFFFFFFFFFF1214 :                     ; 		moveq	#0,d7
(1) 2292/FFFFFFFFFFFF1214 :                     ; 		moveq	#0,d5
(1) 2293/FFFFFFFFFFFF1214 :                     ; 		move.b	(a4),d7
(1) 2294/FFFFFFFFFFFF1214 :                     ; 		adda	d7,a5
(1) 2295/FFFFFFFFFFFF1214 :                     ; 		move.b	1(a4),d6
(1) 2296/FFFFFFFFFFFF1214 :                     ; 		move.b	2(a4),d5
(1) 2297/FFFFFFFFFFFF1214 :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2298/FFFFFFFFFFFF1214 :                     ; 		and.b	d6,d7		; filter
(1) 2299/FFFFFFFFFFFF1214 :                     ; 		lsl.w	d5,d7		; shift left
(1) 2300/FFFFFFFFFFFF1214 :                     ; 		move.w	#$40,d6
(1) 2301/FFFFFFFFFFFF1214 :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2302/FFFFFFFFFFFF1214 :                     ; 		andi.w	#%00000011,d6
(1) 2303/FFFFFFFFFFFF1214 :                     ; 		add.w	d6,d6
(1) 2304/FFFFFFFFFFFF1214 :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2305/FFFFFFFFFFFF1214 :                     ; 		rts
(1) 2306/FFFFFFFFFFFF1214 :                     ; .filter_data:
(1) 2307/FFFFFFFFFFFF1214 :                     ; 		dc.b $00		; Reg slot
(1) 2308/FFFFFFFFFFFF1214 :                     ; 		dc.b %00111000		; Filter bits
(1) 2309/FFFFFFFFFFFF1214 :                     ; 		dc.b 10,0		; shift left, 0
(1) 2310/FFFFFFFFFFFF1214 :                     ; 		dc.b $02
(1) 2311/FFFFFFFFFFFF1214 :                     ; 		dc.b %00000111
(1) 2312/FFFFFFFFFFFF1214 :                     ; 		dc.b 13,0
(1) 2313/FFFFFFFFFFFF1214 :                     ; 		dc.b $01
(1) 2314/FFFFFFFFFFFF1214 :                     ; 		dc.b %00111110
(1) 2315/FFFFFFFFFFFF1214 :                     ; 		dc.b 10,0
(1) 2316/FFFFFFFFFFFF1214 :                     ; .jump_sizes:	dc.w $040
(1) 2317/FFFFFFFFFFFF1214 :                     ; 		dc.w $080
(1) 2318/FFFFFFFFFFFF1214 :                     ; 		dc.w $080
(1) 2319/FFFFFFFFFFFF1214 :                     ; 		dc.w $100
(1) 2320/FFFFFFFFFFFF1214 :                     
(1) 2321/FFFFFFFFFFFF1214 :                     ; ====================================================================
(1) 2322/FFFFFFFFFFFF1214 :                     ; ----------------------------------------------------------------
(1) 2323/FFFFFFFFFFFF1214 :                     ; VDP Sprites
(1) 2324/FFFFFFFFFFFF1214 :                     ; ----------------------------------------------------------------
(1) 2325/FFFFFFFFFFFF1214 :                     
(1) 2326/FFFFFFFFFFFF1214 :                     ; --------------------------------------------------------
(1) 2327/FFFFFFFFFFFF1214 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2328/FFFFFFFFFFFF1214 :                     ;
(1) 2329/FFFFFFFFFFFF1214 :                     ; Sets or Makes a VDP Sprite piece
(1) 2330/FFFFFFFFFFFF1214 :                     ;
(1) 2331/FFFFFFFFFFFF1214 :                     ; Input:
(1) 2332/FFFFFFFFFFFF1214 :                     ; a0   | Slot (0-80)
(1) 2333/FFFFFFFFFFFF1214 :                     ; d0.w | X pos
(1) 2334/FFFFFFFFFFFF1214 :                     ; d1.w | Y pos
(1) 2335/FFFFFFFFFFFF1214 :                     ; d2.w | VRAM
(1) 2336/FFFFFFFFFFFF1214 :                     ; d3.w | Size
(1) 2337/FFFFFFFFFFFF1214 :                     ;
(1) 2338/FFFFFFFFFFFF1214 :                     ; Returns:
(1) 2339/FFFFFFFFFFFF1214 :                     ; bcc | OK
(1) 2340/FFFFFFFFFFFF1214 :                     ; bcs | Ran out of slots (not sprites)
(1) 2341/FFFFFFFFFFFF1214 :                     ; --------------------------------------------------------
(1) 2342/FFFFFFFFFFFF1214 :                     
(1) 2343/FFFFFFFFFFFF1214 :                     Video_SetSpr:
(1) 2344/FFFFFFFFFFFF1214 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2345/FFFFFFFFFFFF1218 : 2E08                		move.l	a0,d7
(1) 2346/FFFFFFFFFFFF121A : 7C00                		moveq	#0,d6
(1) 2347/FFFFFFFFFFFF121C : 6020                		bra	vidMdSpr_MkSpr
(1) 2348/FFFFFFFFFFFF121E :                     Video_MakeSpr:
(1) 2349/FFFFFFFFFFFF121E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2350/FFFFFFFFFFFF1222 : 7E00                		moveq	#0,d7
(1) 2351/FFFFFFFFFFFF1224 : 4DF8 D622           		lea	(RAM_SprPzList).w,a6
(1) 2352/FFFFFFFFFFFF1228 : 7C4F                		moveq	#80-1,d6
(1) 2353/FFFFFFFFFFFF122A :                     .chk_free:
(1) 2354/FFFFFFFFFFFF122A : 0816 0007           		btst	#7,(a6)
(1) 2355/FFFFFFFFFFFF122E : 670C                		beq.s	.mk_spr
(1) 2356/FFFFFFFFFFFF1230 : 5247                		addq.w	#1,d7
(1) 2357/FFFFFFFFFFFF1232 : DCFC 0008           		adda	#8,a6
(1) 2358/FFFFFFFFFFFF1236 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2359/FFFFFFFFFFFF123A : 605C                		bra.s	vidMd_CError
(1) 2360/FFFFFFFFFFFF123C :                     .mk_spr:
(1) 2361/FFFFFFFFFFFF123C : 7C40                		moveq	#$40,d6
(1) 2362/FFFFFFFFFFFF123E :                     vidMdSpr_MkSpr:
(1) 2363/FFFFFFFFFFFF123E : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2364/FFFFFFFFFFFF1244 : BE7C 0050           		cmp.w	#80,d7
(1) 2365/FFFFFFFFFFFF1248 : 6C4E                		bge.s	vidMd_CError
(1) 2366/FFFFFFFFFFFF124A : E74F                		lsl.w	#3,d7
(1) 2367/FFFFFFFFFFFF124C : 0687 FFFF D622      		addi.l	#RAM_SprPzList,d7
(1) 2368/FFFFFFFFFFFF1252 : 2C47                		move.l	d7,a6
(1) 2369/FFFFFFFFFFFF1254 : 4846                		swap	d6
(1) 2370/FFFFFFFFFFFF1256 : 3E01                		move.w	d1,d7			; Y pos
(1) 2371/FFFFFFFFFFFF1258 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2372/FFFFFFFFFFFF125C : 0838 0002 E45B      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2373/FFFFFFFFFFFF1262 : 6704                		beq.s	.dont_add
(1) 2374/FFFFFFFFFFFF1264 : 0647 0080           		addi.w	#$80,d7
(1) 2375/FFFFFFFFFFFF1268 :                     .dont_add:
(1) 2376/FFFFFFFFFFFF1268 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2377/FFFFFFFFFFFF126C : 3C03                		move.w	d3,d6
(1) 2378/FFFFFFFFFFFF126E : 0246 000F           		andi.w	#%1111,d6
(1) 2379/FFFFFFFFFFFF1272 : E14E                		lsl.w	#8,d6
(1) 2380/FFFFFFFFFFFF1274 : E54E                		lsl.w	#2,d6
(1) 2381/FFFFFFFFFFFF1276 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2382/FFFFFFFFFFFF1278 : 4846                		swap	d6
(1) 2383/FFFFFFFFFFFF127A : E14E                		lsl.w	#8,d6
(1) 2384/FFFFFFFFFFFF127C : 8E7C 8000           		or.w	#$8000,d7
(1) 2385/FFFFFFFFFFFF1280 : 8E46                		or.w	d6,d7
(1) 2386/FFFFFFFFFFFF1282 : 3CC7                		move.w	d7,(a6)+
(1) 2387/FFFFFFFFFFFF1284 : 3E00                		move.w	d0,d7
(1) 2388/FFFFFFFFFFFF1286 : 0647 0080           		addi.w	#$80,d7
(1) 2389/FFFFFFFFFFFF128A : 3CC7                		move.w	d7,(a6)+
(1) 2390/FFFFFFFFFFFF128C : 3CC2                		move.w	d2,(a6)+
(1) 2391/FFFFFFFFFFFF128E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2392/FFFFFFFFFFFF1292 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2393/FFFFFFFFFFFF1296 : 4E75                		rts
(1) 2394/FFFFFFFFFFFF1298 :                     ; Carry error
(1) 2395/FFFFFFFFFFFF1298 :                     vidMd_CError:
(1) 2396/FFFFFFFFFFFF1298 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2397/FFFFFFFFFFFF129C : 003C 0001           		or	#1,ccr			; Return Error
(1) 2398/FFFFFFFFFFFF12A0 :                     vidMd_CFreeze:
(1) 2399/FFFFFFFFFFFF12A0 : 4E75                		rts
(1) 2400/FFFFFFFFFFFF12A2 :                     
(1) 2401/FFFFFFFFFFFF12A2 :                     ; --------------------------------------------------------
(1) 2402/FFFFFFFFFFFF12A2 :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2403/FFFFFFFFFFFF12A2 :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2404/FFFFFFFFFFFF12A2 :                     ;
(1) 2405/FFFFFFFFFFFF12A2 :                     ; Sets or Makes a VDP Sprite with map data
(1) 2406/FFFFFFFFFFFF12A2 :                     ;
(1) 2407/FFFFFFFFFFFF12A2 :                     ; Input:
(1) 2408/FFFFFFFFFFFF12A2 :                     ; a0   | Slot (0-80)
(1) 2409/FFFFFFFFFFFF12A2 :                     ; a1   | Map data
(1) 2410/FFFFFFFFFFFF12A2 :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2411/FFFFFFFFFFFF12A2 :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2412/FFFFFFFFFFFF12A2 :                     ; d0.w | X position
(1) 2413/FFFFFFFFFFFF12A2 :                     ; d1.w | Y position
(1) 2414/FFFFFFFFFFFF12A2 :                     ; d2.w | VRAM output location
(1) 2415/FFFFFFFFFFFF12A2 :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2416/FFFFFFFFFFFF12A2 :                     ;        cell vram is ignored.
(1) 2417/FFFFFFFFFFFF12A2 :                     ; d3.w | Frame number
(1) 2418/FFFFFFFFFFFF12A2 :                     ;
(1) 2419/FFFFFFFFFFFF12A2 :                     ; Returns:
(1) 2420/FFFFFFFFFFFF12A2 :                     ; bcc | OK
(1) 2421/FFFFFFFFFFFF12A2 :                     ; bcs | Ran out of slots (not sprites)
(1) 2422/FFFFFFFFFFFF12A2 :                     ; --------------------------------------------------------
(1) 2423/FFFFFFFFFFFF12A2 :                     
(1) 2424/FFFFFFFFFFFF12A2 :                     Video_SetSprMap_DMA:
(1) 2425/FFFFFFFFFFFF12A2 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2426/FFFFFFFFFFFF12A6 : 6104                		bsr	Video_SetSprMap
(1) 2427/FFFFFFFFFFFF12A8 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2428/FFFFFFFFFFFF12AA : 6012                		bra	vid_MkDmaNext
(1) 2429/FFFFFFFFFFFF12AC :                     Video_SetSprMap:
(1) 2430/FFFFFFFFFFFF12AC : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2431/FFFFFFFFFFFF12B0 : 2E08                		move.l	a0,d7
(1) 2432/FFFFFFFFFFFF12B2 : 7C00                		moveq	#0,d6
(1) 2433/FFFFFFFFFFFF12B4 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2434/FFFFFFFFFFFF12B6 :                     Video_MakeSprMap_DMA:
(1) 2435/FFFFFFFFFFFF12B6 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2436/FFFFFFFFFFFF12BA : 6112                		bsr	Video_MakeSprMap
(1) 2437/FFFFFFFFFFFF12BC : 650A                		bcs.s	vid_MkDmaCarry
(1) 2438/FFFFFFFFFFFF12BE :                     vid_MkDmaNext:
(1) 2439/FFFFFFFFFFFF12BE : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2440/FFFFFFFFFFFF12C0 : 224B                		move.l	a3,a1
(1) 2441/FFFFFFFFFFFF12C2 : 3003                		move.w	d3,d0
(1) 2442/FFFFFFFFFFFF12C4 : 3202                		move.w	d2,d1
(1) 2443/FFFFFFFFFFFF12C6 : 6160                		bsr	vid_MkMapDma
(1) 2444/FFFFFFFFFFFF12C8 :                     vid_MkDmaCarry:
(1) 2445/FFFFFFFFFFFF12C8 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2446/FFFFFFFFFFFF12CC : 4E75                		rts
(1) 2447/FFFFFFFFFFFF12CE :                     
(1) 2448/FFFFFFFFFFFF12CE :                     Video_MakeSprMap:
(1) 2449/FFFFFFFFFFFF12CE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2450/FFFFFFFFFFFF12D2 : 7E00                		moveq	#0,d7
(1) 2451/FFFFFFFFFFFF12D4 : 4DF8 D4A2           		lea	(RAM_SprMapList).w,a6
(1) 2452/FFFFFFFFFFFF12D8 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2453/FFFFFFFFFFFF12DA :                     .chk_free:
(1) 2454/FFFFFFFFFFFF12DA : 4A16                		tst.b	(a6)
(1) 2455/FFFFFFFFFFFF12DC : 670C                		beq.s	.mk_spr
(1) 2456/FFFFFFFFFFFF12DE : 5247                		addq.w	#1,d7
(1) 2457/FFFFFFFFFFFF12E0 : DCFC 0010           		adda	#$10,a6
(1) 2458/FFFFFFFFFFFF12E4 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2459/FFFFFFFFFFFF12E8 : 60AE                		bra	vidMd_CError
(1) 2460/FFFFFFFFFFFF12EA :                     .mk_spr:
(1) 2461/FFFFFFFFFFFF12EA : 7C40                		moveq	#$40,d6
(1) 2462/FFFFFFFFFFFF12EC :                     vidMdSpr_MkSprMap:
(1) 2463/FFFFFFFFFFFF12EC : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2464/FFFFFFFFFFFF12F2 : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2465/FFFFFFFFFFFF12F6 : 6CA0                		bge	vidMd_CError
(1) 2466/FFFFFFFFFFFF12F8 : E98F                		lsl.l	#4,d7
(1) 2467/FFFFFFFFFFFF12FA : 0687 FFFF D4A2      		addi.l	#RAM_SprMapList,d7
(1) 2468/FFFFFFFFFFFF1300 : 2C47                		move.l	d7,a6
(1) 2469/FFFFFFFFFFFF1302 : 2E09                		move.l	a1,d7
(1) 2470/FFFFFFFFFFFF1304 : 8C7C 0080           		or.w	#$80,d6
(1) 2471/FFFFFFFFFFFF1308 : 4846                		swap	d6
(1) 2472/FFFFFFFFFFFF130A : E18E                		lsl.l	#8,d6
(1) 2473/FFFFFFFFFFFF130C : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2474/FFFFFFFFFFFF1312 : 8E86                		or.l	d6,d7
(1) 2475/FFFFFFFFFFFF1314 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2476/FFFFFFFFFFFF1316 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2477/FFFFFFFFFFFF1318 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2478/FFFFFFFFFFFF131A : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2479/FFFFFFFFFFFF131C : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2480/FFFFFFFFFFFF131E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2481/FFFFFFFFFFFF1322 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2482/FFFFFFFFFFFF1326 : 4E75                		rts
(1) 2483/FFFFFFFFFFFF1328 :                     
(1) 2484/FFFFFFFFFFFF1328 :                     ; --------------------------------------------------------
(1) 2485/FFFFFFFFFFFF1328 :                     ; Input:
(1) 2486/FFFFFFFFFFFF1328 :                     ; a0   | DMA map data
(1) 2487/FFFFFFFFFFFF1328 :                     ; a1   | Graphics data
(1) 2488/FFFFFFFFFFFF1328 :                     ; d0.w | Current frame in DMA list
(1) 2489/FFFFFFFFFFFF1328 :                     ; d1.w | VRAM position
(1) 2490/FFFFFFFFFFFF1328 :                     ;
(1) 2491/FFFFFFFFFFFF1328 :                     ; USES:
(1) 2492/FFFFFFFFFFFF1328 :                     ; a6
(1) 2493/FFFFFFFFFFFF1328 :                     vid_MkMapDma:
(1) 2494/FFFFFFFFFFFF1328 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2495/FFFFFFFFFFFF132C : 7800                		moveq	#0,d4
(1) 2496/FFFFFFFFFFFF132E : 0240 00FF           		andi.w	#$FF,d0
(1) 2497/FFFFFFFFFFFF1332 : D040                 		add.w	d0,d0
(1) 2498/FFFFFFFFFFFF1334 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2499/FFFFFFFFFFFF1338 : D0C4                 		adda	d4,a0
(1) 2500/FFFFFFFFFFFF133A : 3818                 		move.w	(a0)+,d4
(1) 2501/FFFFFFFFFFFF133C : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2502/FFFFFFFFFFFF133E : 6B32                 		bmi.s	.no_dma
(1) 2503/FFFFFFFFFFFF1340 : 5344                 		subq.w	#1,d4
(1) 2504/FFFFFFFFFFFF1342 : 0241 07FF           		andi.w	#$07FF,d1
(1) 2505/FFFFFFFFFFFF1346 : EB49                		lsl.w	#5,d1
(1) 2506/FFFFFFFFFFFF1348 :                     .next_pz:
(1) 2507/FFFFFFFFFFFF1348 : 4844                		swap	d4
(1) 2508/FFFFFFFFFFFF134A : 3818                		move.w	(a0)+,d4
(1) 2509/FFFFFFFFFFFF134C : 3404                		move.w	d4,d2
(1) 2510/FFFFFFFFFFFF134E : EE4A                		lsr.w	#7,d2
(1) 2511/FFFFFFFFFFFF1350 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2512/FFFFFFFFFFFF1354 : D47C 0020           		add.w	#$20,d2
(1) 2513/FFFFFFFFFFFF1358 : 7000                		moveq	#0,d0
(1) 2514/FFFFFFFFFFFF135A : 3004                		move.w	d4,d0
(1) 2515/FFFFFFFFFFFF135C : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2516/FFFFFFFFFFFF1360 : EB48                		lsl.w	#5,d0
(1) 2517/FFFFFFFFFFFF1362 : D089                		add.l	a1,d0
(1) 2518/FFFFFFFFFFFF1364 : 6100 F6EA           		bsr	Video_MakeDmaEntry
(1) 2519/FFFFFFFFFFFF1368 : D242                		add.w	d2,d1
(1) 2520/FFFFFFFFFFFF136A : 4844                		swap	d4
(1) 2521/FFFFFFFFFFFF136C : 51CC FFDA           		dbf	d4,.next_pz
(1) 2522/FFFFFFFFFFFF1370 : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2523/FFFFFFFFFFFF1372 :                     .no_dma:
(1) 2524/FFFFFFFFFFFF1372 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2525/FFFFFFFFFFFF1376 : 4E75                		rts
(1) 2526/FFFFFFFFFFFF1378 :                     
(1) 2527/FFFFFFFFFFFF1378 :                     ; ====================================================================
(1) 2528/FFFFFFFFFFFF1378 :                     ; ----------------------------------------------------------------
(1) 2529/FFFFFFFFFFFF1378 :                     ; Video routines for SEGA CD
(1) 2530/FFFFFFFFFFFF1378 :                     ; ----------------------------------------------------------------
(1) 2531/FFFFFFFFFFFF1378 :                     
(1) 3047/FFFFFFFFFFFF1378 :                     
(1) 3048/FFFFFFFFFFFF1378 :                     ; ====================================================================
(1) 3049/FFFFFFFFFFFF1378 :                     ; ----------------------------------------------------------------
(1) 3050/FFFFFFFFFFFF1378 :                     ; Video routines for 32X
(1) 3051/FFFFFFFFFFFF1378 :                     ; ----------------------------------------------------------------
(1) 3052/FFFFFFFFFFFF1378 :                     
(1) 3054/FFFFFFFFFFFF1378 :                     
(1) 3055/FFFFFFFFFFFF1378 :                     ; --------------------------------------------------------
(1) 3056/FFFFFFFFFFFF1378 :                     ; Video_MdMars_SetSync
(1) 3057/FFFFFFFFFFFF1378 :                     ;
(1) 3058/FFFFFFFFFFFF1378 :                     ; Set a bit to wait for DREQ-RAM swap
(1) 3059/FFFFFFFFFFFF1378 :                     ; --------------------------------------------------------
(1) 3060/FFFFFFFFFFFF1378 :                     
(1) 3061/FFFFFFFFFFFF1378 :                     Video_MdMars_SetSync:
(1) 3062/FFFFFFFFFFFF1378 : 08F9 0004 00A1      		bset	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF137E : 512D             
(1) 3063/FFFFFFFFFFFF1380 : 4E75                		rts
(1) 3064/FFFFFFFFFFFF1382 :                     
(1) 3065/FFFFFFFFFFFF1382 :                     ; --------------------------------------------------------
(1) 3066/FFFFFFFFFFFF1382 :                     ; Video_MdMars_WaitSync
(1) 3067/FFFFFFFFFFFF1382 :                     ;
(1) 3068/FFFFFFFFFFFF1382 :                     ; Wait if the DREQ-RAM buffer is ready to be
(1) 3069/FFFFFFFFFFFF1382 :                     ; rewritten.
(1) 3070/FFFFFFFFFFFF1382 :                     ; --------------------------------------------------------
(1) 3071/FFFFFFFFFFFF1382 :                     
(1) 3072/FFFFFFFFFFFF1382 :                     Video_MdMars_WaitSync:
(1) 3073/FFFFFFFFFFFF1382 : 0839 0004 00A1      		btst	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF1388 : 512D             
(1) 3074/FFFFFFFFFFFF138A : 66F6                		bne.s	Video_MdMars_WaitSync
(1) 3075/FFFFFFFFFFFF138C : 4E75                		rts
(1) 3076/FFFFFFFFFFFF138E :                     
(1) 3077/FFFFFFFFFFFF138E :                     ; --------------------------------------------------------
(1) 3078/FFFFFFFFFFFF138E :                     ; Video_MdMars_WaitFrame
(1) 3079/FFFFFFFFFFFF138E :                     ; --------------------------------------------------------
(1) 3080/FFFFFFFFFFFF138E :                     
(1) 3081/FFFFFFFFFFFF138E :                     Video_MdMars_WaitFrame:
(1) 3082/FFFFFFFFFFFF138E : 61F2                		bsr	Video_MdMars_WaitSync
(1) 3083/FFFFFFFFFFFF1390 : 60E6                		bra	Video_MdMars_SetSync
(1) 3084/FFFFFFFFFFFF1392 :                     
(1) 3085/FFFFFFFFFFFF1392 :                     ; --------------------------------------------------------
(1) 3086/FFFFFFFFFFFF1392 :                     ; Video_MdMars_Cleanup
(1) 3087/FFFFFFFFFFFF1392 :                     ;
(1) 3088/FFFFFFFFFFFF1392 :                     ; Manual cleanup after sending current data to 32X
(1) 3089/FFFFFFFFFFFF1392 :                     ; --------------------------------------------------------
(1) 3090/FFFFFFFFFFFF1392 :                     
(1) 3091/FFFFFFFFFFFF1392 :                     Video_MdMars_Cleanup:
(1) 3093/FFFFFFFFFFFF1392 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Check current 32X video mode
(1) 3094/FFFFFFFFFFFF1398 : 0247 0007           		andi.w	#%00000111,d7
(1) 3095/FFFFFFFFFFFF139C : DE47                		add.w	d7,d7
(1) 3096/FFFFFFFFFFFF139E : 3E3B 7006           		move.w	.cleanlist(pc,d7.w),d7
(1) 3097/FFFFFFFFFFFF13A2 : 4EFB 7002           		jmp	.cleanlist(pc,d7.w)
(1) 3098/FFFFFFFFFFFF13A6 :                     ; --------------------------------------------------------
(1) 3099/FFFFFFFFFFFF13A6 :                     .cleanlist:
(1) 3100/FFFFFFFFFFFF13A6 : 0010                		dc.w .none-.cleanlist
(1) 3101/FFFFFFFFFFFF13A8 : 0012                		dc.w .mode_2D-.cleanlist
(1) 3102/FFFFFFFFFFFF13AA : 0046                		dc.w .mode_3D-.cleanlist
(1) 3103/FFFFFFFFFFFF13AC : 0010                		dc.w .none-.cleanlist
(1) 3104/FFFFFFFFFFFF13AE : 0010                		dc.w .none-.cleanlist
(1) 3105/FFFFFFFFFFFF13B0 : 0010                		dc.w .none-.cleanlist
(1) 3106/FFFFFFFFFFFF13B2 : 0010                		dc.w .none-.cleanlist
(1) 3107/FFFFFFFFFFFF13B4 : 0010                		dc.w .none-.cleanlist
(1) 3108/FFFFFFFFFFFF13B6 :                     ; --------------------------------------------------------
(1) 3109/FFFFFFFFFFFF13B6 :                     .none:
(1) 3110/FFFFFFFFFFFF13B6 : 4E75                		rts
(1) 3111/FFFFFFFFFFFF13B8 :                     ; --------------------------------------------------------
(1) 3112/FFFFFFFFFFFF13B8 :                     .mode_2D:
(1) 3113/FFFFFFFFFFFF13B8 : 4DF8 CC62           		lea	(RAM_MdMars_ScrlData).w,a6	; Clear the redraw bit here
(1) 3114/FFFFFFFFFFFF13BC : 3E3C 01FF           		move.w	#((512/16)*(256/16))-1,d7
(1) 3115/FFFFFFFFFFFF13C0 :                     .check_bit:
(1) 3116/FFFFFFFFFFFF13C0 : 3C16                		move.w	(a6),d6
(1) 3117/FFFFFFFFFFFF13C2 : 6A06                		bpl.s	.no_redraw
(1) 3118/FFFFFFFFFFFF13C4 : 0246 7FFF           		andi.w	#$7FFF,d6
(1) 3119/FFFFFFFFFFFF13C8 : 3C86                		move.w	d6,(a6)
(1) 3120/FFFFFFFFFFFF13CA :                     .no_redraw:
(1) 3121/FFFFFFFFFFFF13CA : DCFC 0002           		adda	#2,a6
(1) 3122/FFFFFFFFFFFF13CE : 51CF FFF0           		dbf	d7,.check_bit
(1) 3123/FFFFFFFFFFFF13D2 : 4DF8 D062           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3124/FFFFFFFFFFFF13D6 : 7E1F                		moveq	#MAX_MARSSPR-1,d7
(1) 3125/FFFFFFFFFFFF13D8 : 3C3C 0010           		move.w	#sspr_len,d6
(1) 3126/FFFFFFFFFFFF13DC :                     .chk_spr:
(1) 3127/FFFFFFFFFFFF13DC : 0816 0006           		btst	#6,sspr_flags(a6)
(1) 3128/FFFFFFFFFFFF13E0 : 6702                		beq.s	.not_sprtemp
(1) 3129/FFFFFFFFFFFF13E2 : 4216                		clr.b	sspr_flags(a6)
(1) 3130/FFFFFFFFFFFF13E4 :                     .not_sprtemp:
(1) 3131/FFFFFFFFFFFF13E4 : DCC6                		adda	d6,a6
(1) 3132/FFFFFFFFFFFF13E6 : 51CF FFF4           		dbf	d7,.chk_spr
(1) 3133/FFFFFFFFFFFF13EA :                     .no_freeze:
(1) 3134/FFFFFFFFFFFF13EA : 4E75                		rts
(1) 3135/FFFFFFFFFFFF13EC :                     
(1) 3136/FFFFFFFFFFFF13EC :                     ; --------------------------------------------------------
(1) 3137/FFFFFFFFFFFF13EC :                     
(1) 3138/FFFFFFFFFFFF13EC :                     .mode_3D:
(1) 3139/FFFFFFFFFFFF13EC : 4DF8 CC62           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3140/FFFFFFFFFFFF13F0 : 7E1F                		moveq	#MAX_MARSMSPR-1,d7
(1) 3141/FFFFFFFFFFFF13F2 : 3C3C 0020           		move.w	#mspr_len,d6
(1) 3142/FFFFFFFFFFFF13F6 :                     .chk_temp:
(1) 3143/FFFFFFFFFFFF13F6 : 0816 0006           		btst	#6,mspr_flags(a6)
(1) 3144/FFFFFFFFFFFF13FA : 6702                		beq.s	.not_temp
(1) 3145/FFFFFFFFFFFF13FC : 4216                		clr.b	mspr_flags(a6)
(1) 3146/FFFFFFFFFFFF13FE :                     .not_temp:
(1) 3147/FFFFFFFFFFFF13FE : DCC6                		adda	d6,a6
(1) 3148/FFFFFFFFFFFF1400 : 51CF FFF4           		dbf	d7,.chk_temp
(1) 3149/FFFFFFFFFFFF1404 :                     .no_mfreeze:
(1) 3151/FFFFFFFFFFFF1404 : 4E75                		rts
(1) 3152/FFFFFFFFFFFF1406 :                     
(1) 3153/FFFFFFFFFFFF1406 :                     ; --------------------------------------------------------
(1) 3154/FFFFFFFFFFFF1406 :                     ; Video_MdMars_PalBackup
(1) 3155/FFFFFFFFFFFF1406 :                     ;
(1) 3156/FFFFFFFFFFFF1406 :                     ; Backup routine to load 256-color palette to SVDP
(1) 3157/FFFFFFFFFFFF1406 :                     ; when the SVDP permission is set to Genesis.
(1) 3158/FFFFFFFFFFFF1406 :                     ;
(1) 3159/FFFFFFFFFFFF1406 :                     ; Call this during VBlank ONLY.
(1) 3160/FFFFFFFFFFFF1406 :                     ; --------------------------------------------------------
(1) 3161/FFFFFFFFFFFF1406 :                     
(1) 3162/FFFFFFFFFFFF1406 :                     Video_MdMars_PalBackup:
(1) 3164/FFFFFFFFFFFF1406 : 1E39 00A1 5100      		move.b	(sysmars_reg).l,d7
(1) 3165/FFFFFFFFFFFF140C : 0807 0007           		btst	#7,d7
(1) 3166/FFFFFFFFFFFF1410 : 6624                		bne.s	.svdp_locked
(1) 3167/FFFFFFFFFFFF1412 : 4DF9 FFFF CA42      		lea	(RAM_MdMars_CommBuff+Dreq_Palette).l,a6
(1) 3168/FFFFFFFFFFFF1418 : 4BF9 00A1 5200      		lea	(sysmars_reg+$100).l,a5
(1) 3169/FFFFFFFFFFFF141E : 3E3C 001F           		move.w	#((256/2)/4)-1,d7
(1) 3170/FFFFFFFFFFFF1422 :                     .copy_it:
(1) 3171/FFFFFFFFFFFF1422 :                     	rept 4
(1) 3172/FFFFFFFFFFFF1422 :                     		move.l	(a6)+,d6
(1) 3173/FFFFFFFFFFFF1422 :                     		move.l	d6,(a5)+
(1) 3174/FFFFFFFFFFFF1422 :                     	endm
(1) 3172/FFFFFFFFFFFF1422 : 2C1E                		move.l	(a6)+,d6
(1) 3173/FFFFFFFFFFFF1424 : 2AC6                		move.l	d6,(a5)+
(1) 3172/FFFFFFFFFFFF1426 : 2C1E                		move.l	(a6)+,d6
(1) 3173/FFFFFFFFFFFF1428 : 2AC6                		move.l	d6,(a5)+
(1) 3172/FFFFFFFFFFFF142A : 2C1E                		move.l	(a6)+,d6
(1) 3173/FFFFFFFFFFFF142C : 2AC6                		move.l	d6,(a5)+
(1) 3172/FFFFFFFFFFFF142E : 2C1E                		move.l	(a6)+,d6
(1) 3173/FFFFFFFFFFFF1430 : 2AC6                		move.l	d6,(a5)+
(1) 3175/FFFFFFFFFFFF1432 : 51CF FFEE           		dbf	d7,.copy_it
(1) 3176/FFFFFFFFFFFF1436 :                     .svdp_locked:
(1) 3178/FFFFFFFFFFFF1436 : 4E75                		rts
(1) 3179/FFFFFFFFFFFF1438 :                     
(1) 3180/FFFFFFFFFFFF1438 :                     ; ====================================================================
(1) 3181/FFFFFFFFFFFF1438 :                     ; --------------------------------------------------------
(1) 3182/FFFFFFFFFFFF1438 :                     ; Subroutines
(1) 3183/FFFFFFFFFFFF1438 :                     ; --------------------------------------------------------
(1) 3184/FFFFFFFFFFFF1438 :                     
(1) 3185/FFFFFFFFFFFF1438 :                     ; --------------------------------------------------------
(1) 3186/FFFFFFFFFFFF1438 :                     ; Video_MdMars_VideoMode
(1) 3187/FFFFFFFFFFFF1438 :                     ;
(1) 3188/FFFFFFFFFFFF1438 :                     ; Set the graphics mode on the 32X.
(1) 3189/FFFFFFFFFFFF1438 :                     ;
(1) 3190/FFFFFFFFFFFF1438 :                     ; Input:
(1) 3191/FFFFFFFFFFFF1438 :                     ; d0.w | Mode number $00-$02
(1) 3192/FFFFFFFFFFFF1438 :                     ;        - Write $00 to disable 32X visuals and
(1) 3193/FFFFFFFFFFFF1438 :                     ;          get SVDP control.
(1) 3194/FFFFFFFFFFFF1438 :                     ;
(1) 3195/FFFFFFFFFFFF1438 :                     ; Notes:
(1) 3196/FFFFFFFFFFFF1438 :                     ; - Setting mode to 0 (blank) does not clear the
(1) 3197/FFFFFFFFFFFF1438 :                     ;   FRAMEBUFFER(s)
(1) 3198/FFFFFFFFFFFF1438 :                     ;
(1) 3199/FFFFFFFFFFFF1438 :                     ; Uses:
(1) 3200/FFFFFFFFFFFF1438 :                     ; d0
(1) 3201/FFFFFFFFFFFF1438 :                     ; --------------------------------------------------------
(1) 3202/FFFFFFFFFFFF1438 :                     
(1) 3203/FFFFFFFFFFFF1438 :                     Video_MdMars_VideoOff:
(1) 3204/FFFFFFFFFFFF1438 : 7000                		moveq	#0,d0
(1) 3205/FFFFFFFFFFFF143A :                     
(1) 3206/FFFFFFFFFFFF143A :                     Video_MdMars_VideoMode:
(1) 3207/FFFFFFFFFFFF143A : 3F07                		move.w	d7,-(sp)
(1) 3209/FFFFFFFFFFFF143C : 6100 FF3A           		bsr	Video_MdMars_SetSync
(1) 3210/FFFFFFFFFFFF1440 :                     ; 		bsr	Video_MdMars_WaitSync
(1) 3211/FFFFFFFFFFFF1440 :                     ; 		bsr	System_MdMars_Update
(1) 3212/FFFFFFFFFFFF1440 :                     ; 		bsr	Video_MdMars_SetSync
(1) 3215/FFFFFFFFFFFF1440 : 6100 FF40           		bsr	Video_MdMars_WaitSync
(1) 3216/FFFFFFFFFFFF1444 : 6100 0B68           		bsr	System_MdMars_Update
(1) 3217/FFFFFFFFFFFF1448 : 6100 FF2E           		bsr	Video_MdMars_SetSync
(1) 3215/FFFFFFFFFFFF144C : 6100 FF34           		bsr	Video_MdMars_WaitSync
(1) 3216/FFFFFFFFFFFF1450 : 6100 0B5C           		bsr	System_MdMars_Update
(1) 3217/FFFFFFFFFFFF1454 : 6100 FF22           		bsr	Video_MdMars_SetSync
(1) 3219/FFFFFFFFFFFF1458 : 3E00                		move.w	d0,d7
(1) 3220/FFFFFFFFFFFF145A : 0247 0007           		andi.w	#%00000111,d7			; Bits allowed
(1) 3221/FFFFFFFFFFFF145E : 0047 00C0           		ori.w	#%11000000,d7			; Mode + Init bits
(1) 3222/FFFFFFFFFFFF1462 : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+(comm12+1)).l
(1) 3223/FFFFFFFFFFFF1468 : 1E39 00A1 512D      .wait_finish:	move.b	(sysmars_reg+(comm12+1)).l,d7
(1) 3224/FFFFFFFFFFFF146E : 0247 00C0           		andi.w	#%11000000,d7
(1) 3225/FFFFFFFFFFFF1472 : 66F4                		bne.s	.wait_finish
(1) 3226/FFFFFFFFFFFF1474 :                     	rept 2
(1) 3227/FFFFFFFFFFFF1474 :                     		bsr	Video_MdMars_WaitSync
(1) 3228/FFFFFFFFFFFF1474 :                     		bsr	Video_MdMars_SetSync
(1) 3229/FFFFFFFFFFFF1474 :                     	endm
(1) 3227/FFFFFFFFFFFF1474 : 6100 FF0C           		bsr	Video_MdMars_WaitSync
(1) 3228/FFFFFFFFFFFF1478 : 6100 FEFE           		bsr	Video_MdMars_SetSync
(1) 3227/FFFFFFFFFFFF147C : 6100 FF04           		bsr	Video_MdMars_WaitSync
(1) 3228/FFFFFFFFFFFF1480 : 6100 FEF6           		bsr	Video_MdMars_SetSync
(1) 3230/FFFFFFFFFFFF1484 : 3E1F                		move.w	(sp)+,d7
(1) 3231/FFFFFFFFFFFF1486 : 4E75                		rts
(1) 3232/FFFFFFFFFFFF1488 :                     
(1) 3233/FFFFFFFFFFFF1488 :                     ; --------------------------------------------------------
(1) 3234/FFFFFFFFFFFF1488 :                     ; Video_MdMars_LoadVram
(1) 3235/FFFFFFFFFFFF1488 :                     ;
(1) 3236/FFFFFFFFFFFF1488 :                     ; Loads graphics data into a special section
(1) 3237/FFFFFFFFFFFF1488 :                     ; on the SDRAM area for the 2D and 3D modes.
(1) 3238/FFFFFFFFFFFF1488 :                     ;
(1) 3239/FFFFFFFFFFFF1488 :                     ; Input:
(1) 3240/FFFFFFFFFFFF1488 :                     ; a0   | Graphics data
(1) 3241/FFFFFFFFFFFF1488 :                     ; a1   | Output position
(1) 3242/FFFFFFFFFFFF1488 :                     ; d0.l | Size, 8-byte aligned
(1) 3243/FFFFFFFFFFFF1488 :                     ;
(1) 3244/FFFFFFFFFFFF1488 :                     ; Uses:
(1) 3245/FFFFFFFFFFFF1488 :                     ; ALL
(1) 3246/FFFFFFFFFFFF1488 :                     ;
(1) 3247/FFFFFFFFFFFF1488 :                     ; Notes:
(1) 3248/FFFFFFFFFFFF1488 :                     ; - Careful using this if the SH2 side is in the
(1) 3249/FFFFFFFFFFFF1488 :                     ;   middle of reading the graphics data.
(1) 3250/FFFFFFFFFFFF1488 :                     ; --------------------------------------------------------
(1) 3251/FFFFFFFFFFFF1488 :                     
(1) 3252/FFFFFFFFFFFF1488 :                     Video_MdMars_LoadVram:
(1) 3253/FFFFFFFFFFFF1488 : 48E7 81C0           		movem.l	d0/d7/a0-a1,-(sp)
(1) 3254/FFFFFFFFFFFF148C : 2E09                		move.l	a1,d7
(1) 3255/FFFFFFFFFFFF148E : DE80                		add.l	d0,d7
(1) 3256/FFFFFFFFFFFF1490 : BEBC 0001 8000      		cmp.l	#MAX_MarsVram,d7
(1) 3257/FFFFFFFFFFFF1496 : 6F0A                		ble.s	.good_sz
(1) 3258/FFFFFFFFFFFF1498 : 9EBC 0001 8000      		sub.l	#MAX_MarsVram,d7
(1) 3259/FFFFFFFFFFFF149E : 6B0C                		bmi.s	.got_zero
(1) 3260/FFFFFFFFFFFF14A0 : 2007                		move.l	d7,d0
(1) 3261/FFFFFFFFFFFF14A2 :                     .good_sz:
(1) 3262/FFFFFFFFFFFF14A2 : D3FC 0600 FAA0      		addi.l	#RAM_Mars_VramData,a1	; *** EXTERNAL LABEL ***
(1) 3263/FFFFFFFFFFFF14A8 : 6100 0AC4           		bsr	System_MdMars_SendData
(1) 3264/FFFFFFFFFFFF14AC :                     .got_zero:
(1) 3265/FFFFFFFFFFFF14AC : 4CDF 0381           		movem.l	(sp)+,d0/d7/a0-a1
(1) 3266/FFFFFFFFFFFF14B0 : 4E75                		rts
(1) 3267/FFFFFFFFFFFF14B2 :                     
(1) 3268/FFFFFFFFFFFF14B2 :                     ; --------------------------------------------------------
(1) 3269/FFFFFFFFFFFF14B2 :                     ; Video_MdMars_LoadMap
(1) 3270/FFFFFFFFFFFF14B2 :                     ;
(1) 3271/FFFFFFFFFFFF14B2 :                     ; Loads map data for 32X's 2D-mode
(1) 3272/FFFFFFFFFFFF14B2 :                     ;
(1) 3273/FFFFFFFFFFFF14B2 :                     ; Input:
(1) 3274/FFFFFFFFFFFF14B2 :                     ; a0   | Map data
(1) 3275/FFFFFFFFFFFF14B2 :                     ; a1   | Graphics start location
(1) 3276/FFFFFFFFFFFF14B2 :                     ; d0.w | X start position
(1) 3277/FFFFFFFFFFFF14B2 :                     ; d1.w | Y start position
(1) 3278/FFFFFFFFFFFF14B2 :                     ; d2.w | Map width in blocks (width/16)
(1) 3279/FFFFFFFFFFFF14B2 :                     ; d3.w | Map height in blocks (height/16)
(1) 3280/FFFFFFFFFFFF14B2 :                     ; d4.w | Starting color index *LIMITED*
(1) 3281/FFFFFFFFFFFF14B2 :                     ;
(1) 3282/FFFFFFFFFFFF14B2 :                     ; Notes:
(1) 3283/FFFFFFFFFFFF14B2 :                     ; - To load the Graphics use Video_MdMars_LoadVram
(1) 3284/FFFFFFFFFFFF14B2 :                     ;   a1 only sets the location in SDRAM
(1) 3285/FFFFFFFFFFFF14B2 :                     ; --------------------------------------------------------
(1) 3286/FFFFFFFFFFFF14B2 :                     
(1) 3287/FFFFFFFFFFFF14B2 :                     ; CURRENT TILE FORMAT:
(1) 3288/FFFFFFFFFFFF14B2 :                     ; %Rppp pppt tttt tttt
(1) 3289/FFFFFFFFFFFF14B2 :                     ;
(1) 3290/FFFFFFFFFFFF14B2 :                     ; R - Reload block, cleared here later.
(1) 3291/FFFFFFFFFFFF14B2 :                     ; p - Palette index, limited by 4 color-sizes
(1) 3292/FFFFFFFFFFFF14B2 :                     ; t - 16x16 block number, 0 is blank
(1) 3293/FFFFFFFFFFFF14B2 :                     
(1) 3294/FFFFFFFFFFFF14B2 :                     Video_MdMars_LoadMap:
(1) 3295/FFFFFFFFFFFF14B2 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 3296/FFFFFFFFFFFF14B6 : 4DF8 CC42           		lea	(RAM_MdMars_ScrlSett).w,a6
(1) 3297/FFFFFFFFFFFF14BA : 4BF8 CC62           		lea	(RAM_MdMars_ScrlData).w,a5
(1) 3298/FFFFFFFFFFFF14BE : 2D49 0008           		move.l	a1,sscrl_vram(a6)
(1) 3299/FFFFFFFFFFFF14C2 : 7A00                		moveq	#0,d5
(1) 3300/FFFFFFFFFFFF14C4 :                     
(1) 3301/FFFFFFFFFFFF14C4 :                     	; d4 - $7Exx
(1) 3302/FFFFFFFFFFFF14C4 :                     	; d5 - USED
(1) 3303/FFFFFFFFFFFF14C4 :                     	; d6 - free | Y pos copy
(1) 3304/FFFFFFFFFFFF14C4 :                     	; d7 - Y loop
(1) 3305/FFFFFFFFFFFF14C4 : 0244 00FC           		andi.w	#$FC,d4		; <-- d4
(1) 3306/FFFFFFFFFFFF14C8 : EF4C                		lsl.w	#7,d4
(1) 3307/FFFFFFFFFFFF14CA : 2648                		move.l	a0,a3
(1) 3308/FFFFFFFFFFFF14CC : 3C01                		move.w	d1,d6
(1) 3309/FFFFFFFFFFFF14CE : 3E03                		move.w	d3,d7
(1) 3310/FFFFFFFFFFFF14D0 : 5347                		subq.w	#1,d7
(1) 3311/FFFFFFFFFFFF14D2 :                     .copy_y:
(1) 3312/FFFFFFFFFFFF14D2 : 284D                		move.l	a5,a4
(1) 3313/FFFFFFFFFFFF14D4 : 7A00                		moveq	#0,d5
(1) 3314/FFFFFFFFFFFF14D6 : 3A06                		move.w	d6,d5
(1) 3315/FFFFFFFFFFFF14D8 : ED4D                		lsl.w	#6,d5
(1) 3316/FFFFFFFFFFFF14DA : D9C5                		add.l	d5,a4
(1) 3317/FFFFFFFFFFFF14DC : 3A00                		move.w	d0,d5
(1) 3318/FFFFFFFFFFFF14DE : DA45                		add.w	d5,d5
(1) 3319/FFFFFFFFFFFF14E0 : 4847                		swap	d7
(1) 3320/FFFFFFFFFFFF14E2 : 4846                		swap	d6
(1) 3321/FFFFFFFFFFFF14E4 : 3E02                		move.w	d2,d7
(1) 3322/FFFFFFFFFFFF14E6 : 5347                		subq.w	#1,d7
(1) 3323/FFFFFFFFFFFF14E8 :                     .copy_x:
(1) 3324/FFFFFFFFFFFF14E8 : 3C1B                		move.w	(a3)+,d6
(1) 3325/FFFFFFFFFFFF14EA : DC44                		add.w	d4,d6
(1) 3326/FFFFFFFFFFFF14EC : 8C7C 8000           		or.w	#$8000,d6
(1) 3327/FFFFFFFFFFFF14F0 : 3986 5000           		move.w	d6,(a4,d5.w)
(1) 3328/FFFFFFFFFFFF14F4 : 5445                		addq.w	#1*2,d5
(1) 3329/FFFFFFFFFFFF14F6 : 0245 003E           		andi.w	#((512/16)-1)*2,d5
(1) 3330/FFFFFFFFFFFF14FA : 51CF FFEC           		dbf	d7,.copy_x
(1) 3331/FFFFFFFFFFFF14FE : 4846                		swap	d6
(1) 3332/FFFFFFFFFFFF1500 : 4847                		swap	d7
(1) 3333/FFFFFFFFFFFF1502 : 5246                		addq.w	#1,d6
(1) 3334/FFFFFFFFFFFF1504 : 0246 000F           		andi.w	#((256/16)-1),d6
(1) 3335/FFFFFFFFFFFF1508 : 51CF FFC8           		dbf	d7,.copy_y
(1) 3336/FFFFFFFFFFFF150C : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 3337/FFFFFFFFFFFF1510 : 4E75                		rts
(1) 3338/FFFFFFFFFFFF1512 :                     
(1) 3339/FFFFFFFFFFFF1512 :                     ; ====================================================================
(1) 3340/FFFFFFFFFFFF1512 :                     ; --------------------------------------------------------
(1) 3341/FFFFFFFFFFFF1512 :                     ; Video_MdMars_SetSpr2D, Video_MdMars_MakeSpr2D
(1) 3342/FFFFFFFFFFFF1512 :                     ;
(1) 3343/FFFFFFFFFFFF1512 :                     ; Set or Make a Super Sprite
(1) 3344/FFFFFFFFFFFF1512 :                     ;
(1) 3345/FFFFFFFFFFFF1512 :                     ; Input:
(1) 3346/FFFFFFFFFFFF1512 :                     ; a0   | Index slot (_SetSpr2D ONLY)
(1) 3347/FFFFFFFFFFFF1512 :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3348/FFFFFFFFFFFF1512 :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3349/FFFFFFFFFFFF1512 :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3350/FFFFFFFFFFFF1512 :                     ; d2.l | Width/Height: splitw(width,height)
(1) 3351/FFFFFFFFFFFF1512 :                     ; d3.l | Texture full_width+index: splitw(width,index)
(1) 3352/FFFFFFFFFFFF1512 :                     ; d4.l | Frame X/Y: splitw(x_frame,y_frame)
(1) 3353/FFFFFFFFFFFF1512 :                     ;
(1) 3354/FFFFFFFFFFFF1512 :                     ; Returns:
(1) 3355/FFFFFFFFFFFF1512 :                     ; bcc | OK
(1) 3356/FFFFFFFFFFFF1512 :                     ; bcs | Ran out of Super Sprites
(1) 3357/FFFFFFFFFFFF1512 :                     ; --------------------------------------------------------
(1) 3358/FFFFFFFFFFFF1512 :                     
(1) 3359/FFFFFFFFFFFF1512 :                     Video_MdMars_SetSpr2D:
(1) 3360/FFFFFFFFFFFF1512 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3361/FFFFFFFFFFFF1516 : 2E08                		move.l	a0,d7
(1) 3362/FFFFFFFFFFFF1518 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3363/FFFFFFFFFFFF151A : 601E                		bra	vidMdMars_MkSpr2D
(1) 3364/FFFFFFFFFFFF151C :                     
(1) 3365/FFFFFFFFFFFF151C :                     Video_MdMars_MakeSpr2D:
(1) 3366/FFFFFFFFFFFF151C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3367/FFFFFFFFFFFF1520 : 7E00                		moveq	#0,d7
(1) 3368/FFFFFFFFFFFF1522 : 4DF8 D062           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3369/FFFFFFFFFFFF1526 : 7C1F                		moveq	#MAX_MARSSPR-1,d6
(1) 3370/FFFFFFFFFFFF1528 :                     .chk_free:
(1) 3371/FFFFFFFFFFFF1528 : 4A16                		tst.b	sspr_flags(a6)
(1) 3372/FFFFFFFFFFFF152A : 670C                		beq.s	.mk_spr
(1) 3373/FFFFFFFFFFFF152C : 5247                		addq.w	#1,d7
(1) 3374/FFFFFFFFFFFF152E : DCFC 0010           		adda	#sspr_len,a6
(1) 3375/FFFFFFFFFFFF1532 : 51CE FFF4           		dbf	d6,.chk_free
(1) 3376/FFFFFFFFFFFF1536 : 606C                		bra.s	vidMdMars_CError
(1) 3377/FFFFFFFFFFFF1538 :                     .mk_spr:
(1) 3378/FFFFFFFFFFFF1538 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3379/FFFFFFFFFFFF153A :                     
(1) 3380/FFFFFFFFFFFF153A :                     vidMdMars_MkSpr2D:
(1) 3381/FFFFFFFFFFFF153A : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3382/FFFFFFFFFFFF1540 : BE7C 0020           		cmp.w	#MAX_MARSSPR,d7
(1) 3383/FFFFFFFFFFFF1544 : 6C5E                		bge.s	vidMdMars_CError
(1) 3384/FFFFFFFFFFFF1546 :                     ; 		mulu.w	#sspr_len,d7
(1) 3385/FFFFFFFFFFFF1546 : E98F                		lsl.l	#4,d7			; FIXED SIZE
(1) 3386/FFFFFFFFFFFF1548 : 0687 FFFF D062      		addi.l	#RAM_MdMars_SuperSpr,d7
(1) 3387/FFFFFFFFFFFF154E : 2C47                		move.l	d7,a6
(1) 3388/FFFFFFFFFFFF1550 : 2D49 000C           		move.l	a1,sspr_vram(a6)
(1) 3389/FFFFFFFFFFFF1554 : 2E00                		move.l	d0,d7
(1) 3390/FFFFFFFFFFFF1556 : 4847                		swap	d7
(1) 3391/FFFFFFFFFFFF1558 : 3D47 0008           		move.w	d7,sspr_x_pos(a6)
(1) 3392/FFFFFFFFFFFF155C : 3D40 000A           		move.w	d0,sspr_y_pos(a6)
(1) 3393/FFFFFFFFFFFF1560 : 2E02                		move.l	d2,d7
(1) 3394/FFFFFFFFFFFF1562 : E64F                		lsr.w	#3,d7
(1) 3395/FFFFFFFFFFFF1564 : 5347                		subq.w	#1,d7
(1) 3396/FFFFFFFFFFFF1566 : 1D47 0005           		move.b	d7,sspr_size+1(a6)
(1) 3397/FFFFFFFFFFFF156A : 4847                		swap	d7
(1) 3398/FFFFFFFFFFFF156C : E64F                		lsr.w	#3,d7
(1) 3399/FFFFFFFFFFFF156E : 5347                		subq.w	#1,d7
(1) 3400/FFFFFFFFFFFF1570 : 1D47 0004           		move.b	d7,sspr_size(a6)
(1) 3401/FFFFFFFFFFFF1574 : 3E03                		move.w	d3,d7
(1) 3402/FFFFFFFFFFFF1576 : 0247 00FF           		andi.w	#$FF,d7
(1) 3403/FFFFFFFFFFFF157A : 3D47 0006           		move.w	d7,sspr_indx(a6)
(1) 3404/FFFFFFFFFFFF157E : 2E01                		move.l	d1,d7
(1) 3405/FFFFFFFFFFFF1580 : 4847                		swap	d7
(1) 3406/FFFFFFFFFFFF1582 : 4A47                		tst.w	d7
(1) 3407/FFFFFFFFFFFF1584 : 0247 0003           		andi.w	#%00000011,d7
(1) 3408/FFFFFFFFFFFF1588 : 8E3C 0080           		or.b	#$80,d7
(1) 3409/FFFFFFFFFFFF158C : 8E06                		or.b	d6,d7
(1) 3410/FFFFFFFFFFFF158E : 1C87                		move.b	d7,sspr_flags(a6)
(1) 3411/FFFFFFFFFFFF1590 : 3E04                		move.w	d4,d7
(1) 3412/FFFFFFFFFFFF1592 : 0247 00FF           		andi.w	#$FF,d7
(1) 3413/FFFFFFFFFFFF1596 : 3D47 0002           		move.w	d7,sspr_frame(a6)
(1) 3414/FFFFFFFFFFFF159A :                     .on_freeze:
(1) 3415/FFFFFFFFFFFF159A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3416/FFFFFFFFFFFF159E : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3417/FFFFFFFFFFFF15A2 : 4E75                		rts
(1) 3418/FFFFFFFFFFFF15A4 :                     ; Carry error
(1) 3419/FFFFFFFFFFFF15A4 :                     vidMdMars_CError:
(1) 3420/FFFFFFFFFFFF15A4 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3421/FFFFFFFFFFFF15A8 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3422/FFFFFFFFFFFF15AC : 4E75                		rts
(1) 3423/FFFFFFFFFFFF15AE :                     
(1) 3424/FFFFFFFFFFFF15AE :                     ; --------------------------------------------------------
(1) 3425/FFFFFFFFFFFF15AE :                     ; Video_MdMars_SetSpr3D, Video_MdMars_MakeSpr3D
(1) 3426/FFFFFFFFFFFF15AE :                     ;
(1) 3427/FFFFFFFFFFFF15AE :                     ; Set or Make a 3D Sprite
(1) 3428/FFFFFFFFFFFF15AE :                     ;
(1) 3429/FFFFFFFFFFFF15AE :                     ; Input:
(1) 3430/FFFFFFFFFFFF15AE :                     ; a0   | Index slot (_SetSpr3D ONLY)
(1) 3431/FFFFFFFFFFFF15AE :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3432/FFFFFFFFFFFF15AE :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3433/FFFFFFFFFFFF15AE :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3434/FFFFFFFFFFFF15AE :                     ; d2.l | Width/Height: splitw(width,height)
(1) 3435/FFFFFFFFFFFF15AE :                     ; d3.l | Texture full_width+index: splitw(width,index)
(1) 3436/FFFFFFFFFFFF15AE :                     ; d4.l | Frame X/Y: splitw(x_frame,y_frame)
(1) 3437/FFFFFFFFFFFF15AE :                     ;
(1) 3438/FFFFFFFFFFFF15AE :                     ;        flags: %000000ff
(1) 3439/FFFFFFFFFFFF15AE :                     ;        %00 - Normal 3D screen sprite
(1) 3440/FFFFFFFFFFFF15AE :                     ;        %01 - Sprite is inside the 3D Field
(1) 3441/FFFFFFFFFFFF15AE :                     ;        %11 - Same as %01, always face to the front
(1) 3442/FFFFFFFFFFFF15AE :                     ;              of the camera
(1) 3443/FFFFFFFFFFFF15AE :                     ;
(1) 3444/FFFFFFFFFFFF15AE :                     ; Returns:
(1) 3445/FFFFFFFFFFFF15AE :                     ; bcc | OK
(1) 3446/FFFFFFFFFFFF15AE :                     ; bcs | Ran out of slots
(1) 3447/FFFFFFFFFFFF15AE :                     ; --------------------------------------------------------
(1) 3448/FFFFFFFFFFFF15AE :                     
(1) 3449/FFFFFFFFFFFF15AE :                     Video_MdMars_SetSpr3D:
(1) 3450/FFFFFFFFFFFF15AE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3451/FFFFFFFFFFFF15B2 : 2E08                		move.l	a0,d7
(1) 3452/FFFFFFFFFFFF15B4 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3453/FFFFFFFFFFFF15B6 : 601E                		bra	vidMdMars_MkSpr3D
(1) 3454/FFFFFFFFFFFF15B8 :                     
(1) 3455/FFFFFFFFFFFF15B8 :                     Video_MdMars_MakeSpr3D:
(1) 3456/FFFFFFFFFFFF15B8 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3457/FFFFFFFFFFFF15BC :                     
(1) 3458/FFFFFFFFFFFF15BC : 7E00                		moveq	#0,d7
(1) 3459/FFFFFFFFFFFF15BE : 4DF8 CC62           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3460/FFFFFFFFFFFF15C2 : 7C1F                		moveq	#MAX_MARSMSPR-1,d6
(1) 3461/FFFFFFFFFFFF15C4 :                     .chk_free:
(1) 3462/FFFFFFFFFFFF15C4 : 4A16                		tst.b	mspr_flags(a6)
(1) 3463/FFFFFFFFFFFF15C6 : 670C                		beq.s	.mk_spr
(1) 3464/FFFFFFFFFFFF15C8 : 5247                		addq.w	#1,d7
(1) 3465/FFFFFFFFFFFF15CA : DCFC 0020           		adda	#mspr_len,a6
(1) 3466/FFFFFFFFFFFF15CE : 51CE FFF4           		dbf	d6,.chk_free
(1) 3467/FFFFFFFFFFFF15D2 : 60D0                		bra.s	vidMdMars_CError
(1) 3468/FFFFFFFFFFFF15D4 :                     .mk_spr:
(1) 3469/FFFFFFFFFFFF15D4 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3470/FFFFFFFFFFFF15D6 :                     
(1) 3471/FFFFFFFFFFFF15D6 :                     vidMdMars_MkSpr3D:
(1) 3472/FFFFFFFFFFFF15D6 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3473/FFFFFFFFFFFF15DC : BE7C 0020           		cmp.w	#MAX_MARSMSPR,d7
(1) 3474/FFFFFFFFFFFF15E0 : 6CC2                		bge.s	vidMdMars_CError
(1) 3475/FFFFFFFFFFFF15E2 :                     ; 		mulu.w	#mspr_len,d7
(1) 3476/FFFFFFFFFFFF15E2 : EB8F                		lsl.l	#5,d7			; FIXED SIZE
(1) 3477/FFFFFFFFFFFF15E4 : 0687 FFFF CC62      		addi.l	#RAM_MdMars_MSprites,d7
(1) 3478/FFFFFFFFFFFF15EA : 2C47                		move.l	d7,a6
(1) 3479/FFFFFFFFFFFF15EC : 2D49 001C           		move.l	a1,mspr_vram(a6)	; a1
(1) 3480/FFFFFFFFFFFF15F0 : 2E00                		move.l	d0,d7
(1) 3481/FFFFFFFFFFFF15F2 : 4847                		swap	d7
(1) 3482/FFFFFFFFFFFF15F4 : 3D47 0010           		move.w	d7,mspr_x_pos(a6)
(1) 3483/FFFFFFFFFFFF15F8 : 3D40 0012           		move.w	d0,mspr_y_pos(a6)
(1) 3484/FFFFFFFFFFFF15FC : 2E01                		move.l	d1,d7
(1) 3485/FFFFFFFFFFFF15FE : 4847                		swap	d7
(1) 3486/FFFFFFFFFFFF1600 : 0247 0003           		andi.w	#%11,d7
(1) 3487/FFFFFFFFFFFF1604 : 8E7C 0080           		or.w	#$80,d7
(1) 3488/FFFFFFFFFFFF1608 : 8E46                		or.w	d6,d7
(1) 3489/FFFFFFFFFFFF160A : 1C87                		move.b	d7,mspr_flags(a6)
(1) 3490/FFFFFFFFFFFF160C : 3D41 0014           		move.w	d1,mspr_z_pos(a6)
(1) 3491/FFFFFFFFFFFF1610 : 2E02                		move.l	d2,d7
(1) 3492/FFFFFFFFFFFF1612 : 4847                		swap	d7
(1) 3493/FFFFFFFFFFFF1614 : 1D47 0002           		move.b	d7,mspr_size_w(a6)
(1) 3494/FFFFFFFFFFFF1618 : 1D42 0003           		move.b	d2,mspr_size_h(a6)
(1) 3495/FFFFFFFFFFFF161C : 1D47 0004           		move.b	d7,mspr_src_w(a6)
(1) 3496/FFFFFFFFFFFF1620 : 1D42 0005           		move.b	d2,mspr_src_h(a6)
(1) 3497/FFFFFFFFFFFF1624 : 2E03                		move.l	d3,d7
(1) 3498/FFFFFFFFFFFF1626 : 4847                		swap	d7
(1) 3499/FFFFFFFFFFFF1628 : 1D47 0006           		move.b	d7,mspr_srcwdth(a6)
(1) 3500/FFFFFFFFFFFF162C : 1D43 0001           		move.b	d3,mspr_indx(a6)
(1) 3501/FFFFFFFFFFFF1630 : 2E04                		move.l	d4,d7
(1) 3502/FFFFFFFFFFFF1632 : 4847                		swap	d7
(1) 3503/FFFFFFFFFFFF1634 : 1D47 0007           		move.b	d7,mspr_frame_x(a6)
(1) 3504/FFFFFFFFFFFF1638 : 1D44 0008           		move.b	d4,mspr_frame_y(a6)
(1) 3505/FFFFFFFFFFFF163C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3506/FFFFFFFFFFFF1640 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3507/FFFFFFFFFFFF1644 : 4E75                		rts
(1) 3508/FFFFFFFFFFFF1646 :                     
(1) 3509/FFFFFFFFFFFF1646 :                     ; ====================================================================
(1) 3510/FFFFFFFFFFFF1646 :                     ; ----------------------------------------------------------------
(1) 3511/FFFFFFFFFFFF1646 :                     ; SVDP Palette
(1) 3512/FFFFFFFFFFFF1646 :                     ; ----------------------------------------------------------------
(1) 3513/FFFFFFFFFFFF1646 :                     
(1) 3514/FFFFFFFFFFFF1646 :                     ; --------------------------------------------------------
(1) 3515/FFFFFFFFFFFF1646 :                     ; Video_MdMars_RunFade
(1) 3516/FFFFFFFFFFFF1646 :                     ;
(1) 3517/FFFFFFFFFFFF1646 :                     ; Process 1 step of palette fading, SVDP Palette.
(1) 3518/FFFFFFFFFFFF1646 :                     ;
(1) 3519/FFFFFFFFFFFF1646 :                     ; Use Video_WaitFade to wait for changes.
(1) 3520/FFFFFFFFFFFF1646 :                     ; --------------------------------------------------------
(1) 3521/FFFFFFFFFFFF1646 :                     
(1) 3522/FFFFFFFFFFFF1646 :                     Video_MdMars_RunFade:
(1) 3524/FFFFFFFFFFFF1646 : 4DF8 CA02           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 3525/FFFFFFFFFFFF164A :                     .next_req:
(1) 3526/FFFFFFFFFFFF164A : 1016                		move.b	palfd_req(a6),d0
(1) 3527/FFFFFFFFFFFF164C : 6744                		beq.s	.no_req
(1) 3528/FFFFFFFFFFFF164E : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 3529/FFFFFFFFFFFF1652 : 6A38                		bpl.s	.busy_timer
(1) 3530/FFFFFFFFFFFF1654 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 3531/FFFFFFFFFFFF165A : 4BF8 CA42           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a5
(1) 3532/FFFFFFFFFFFF165E : 49F8 C802           		lea	(RAM_MdMars_PalFd).w,a4
(1) 3533/FFFFFFFFFFFF1662 : 7E00                		moveq	#0,d7
(1) 3534/FFFFFFFFFFFF1664 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 3535/FFFFFFFFFFFF1668 : DE47                		add.w	d7,d7
(1) 3536/FFFFFFFFFFFF166A : DAC7                		adda	d7,a5
(1) 3537/FFFFFFFFFFFF166C : D8C7                		adda	d7,a4
(1) 3538/FFFFFFFFFFFF166E : 7E00                		moveq	#0,d7
(1) 3539/FFFFFFFFFFFF1670 : 7C00                		moveq	#0,d6
(1) 3540/FFFFFFFFFFFF1672 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 3541/FFFFFFFFFFFF1676 : 6714                		beq.s	.busy_timer
(1) 3542/FFFFFFFFFFFF1678 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 3543/FFFFFFFFFFFF167C : 5347                		subq.w	#1,d7
(1) 3544/FFFFFFFFFFFF167E : 0240 00FF           		andi.w	#$FF,d0
(1) 3545/FFFFFFFFFFFF1682 : D040                		add.w	d0,d0
(1) 3546/FFFFFFFFFFFF1684 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 3547/FFFFFFFFFFFF1688 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 3548/FFFFFFFFFFFF168C :                     .busy_timer:
(1) 3549/FFFFFFFFFFFF168C : DCFC 0008           		adda	#palfd_len,a6
(1) 3550/FFFFFFFFFFFF1690 : 60B8                		bra.s	.next_req
(1) 3551/FFFFFFFFFFFF1692 :                     .no_req:
(1) 3552/FFFFFFFFFFFF1692 : 4278 C800           		clr.w	(RAM_MdMars_IndxPalFd).w
(1) 3554/FFFFFFFFFFFF1696 : 4E75                		rts
(1) 3555/FFFFFFFFFFFF1698 :                     
(1) 3556/FFFFFFFFFFFF1698 :                     ; ------------------------------------------------
(1) 3557/FFFFFFFFFFFF1698 :                     
(1) 3558/FFFFFFFFFFFF1698 :                     .fade_list:
(1) 3559/FFFFFFFFFFFF1698 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 3560/FFFFFFFFFFFF169A : 0014                		dc.w .fade_out-.fade_list
(1) 3561/FFFFFFFFFFFF169C : 0080                		dc.w .fade_in-.fade_list
(1) 3562/FFFFFFFFFFFF169E : 0010                		dc.w .nothing-.fade_list
(1) 3563/FFFFFFFFFFFF16A0 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 3564/FFFFFFFFFFFF16A2 : 0010                		dc.w .nothing-.fade_list
(1) 3565/FFFFFFFFFFFF16A4 : 0010                		dc.w .nothing-.fade_list
(1) 3566/FFFFFFFFFFFF16A6 : 0010                		dc.w .nothing-.fade_list
(1) 3567/FFFFFFFFFFFF16A8 :                     
(1) 3568/FFFFFFFFFFFF16A8 :                     ; ----------------------------------------------------
(1) 3569/FFFFFFFFFFFF16A8 :                     ; Fade request $00: Null/exit.
(1) 3570/FFFFFFFFFFFF16A8 :                     ; ----------------------------------------------------
(1) 3571/FFFFFFFFFFFF16A8 :                     
(1) 3572/FFFFFFFFFFFF16A8 :                     .nothing:
(1) 3573/FFFFFFFFFFFF16A8 : 4216                		clr.b	palfd_req(a6)
(1) 3574/FFFFFFFFFFFF16AA : 4E75                		rts
(1) 3575/FFFFFFFFFFFF16AC :                     
(1) 3576/FFFFFFFFFFFF16AC :                     ; ----------------------------------------------------
(1) 3577/FFFFFFFFFFFF16AC :                     ; Fade request $01: fade-out to black
(1) 3578/FFFFFFFFFFFF16AC :                     ; Quick.
(1) 3579/FFFFFFFFFFFF16AC :                     ;
(1) 3580/FFFFFFFFFFFF16AC :                     ; d7 - Num colors
(1) 3581/FFFFFFFFFFFF16AC :                     ; d6 - Increment*2
(1) 3582/FFFFFFFFFFFF16AC :                     ; ----------------------------------------------------
(1) 3583/FFFFFFFFFFFF16AC :                     
(1) 3584/FFFFFFFFFFFF16AC :                     .fade_out:
(1) 3585/FFFFFFFFFFFF16AC : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3586/FFFFFFFFFFFF16B0 : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3587/FFFFFFFFFFFF16B4 : 383C FFE0           		move.w	#%1111111111100000,d4	; d4 - Others filter + extra
(1) 3588/FFFFFFFFFFFF16B8 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 3589/FFFFFFFFFFFF16BA :                     .next_color:
(1) 3590/FFFFFFFFFFFF16BA : 3015                		move.w	(a5),d0
(1) 3591/FFFFFFFFFFFF16BC :                     	rept 3
(1) 3592/FFFFFFFFFFFF16BC :                     		move.w	d0,d1
(1) 3593/FFFFFFFFFFFF16BC :                     		and.w	d5,d1		; Filter TARGET
(1) 3594/FFFFFFFFFFFF16BC :                     		beq.s	.no_chng
(1) 3595/FFFFFFFFFFFF16BC :                     		and.w	d4,d0		; Filter OTHERS
(1) 3596/FFFFFFFFFFFF16BC :                     		sub.w	d6,d1
(1) 3597/FFFFFFFFFFFF16BC :                     		bpl.s	.too_blck
(1) 3598/FFFFFFFFFFFF16BC :                     		clr.w	d1
(1) 3599/FFFFFFFFFFFF16BC :                     .too_blck:
(1) 3600/FFFFFFFFFFFF16BC :                     		addq.w	#1,d3		; Color changed
(1) 3601/FFFFFFFFFFFF16BC :                     .no_chng:
(1) 3602/FFFFFFFFFFFF16BC :                     		or.w	d1,d0
(1) 3603/FFFFFFFFFFFF16BC :                     		rol.w	#5,d6		; next << color
(1) 3604/FFFFFFFFFFFF16BC :                     		rol.w	#5,d5
(1) 3605/FFFFFFFFFFFF16BC :                     		rol.w	#5,d4
(1) 3606/FFFFFFFFFFFF16BC :                     	endm
(1) 3592/FFFFFFFFFFFF16BC : 3200                		move.w	d0,d1
(1) 3593/FFFFFFFFFFFF16BE : C245                		and.w	d5,d1		; Filter TARGET
(1) 3594/FFFFFFFFFFFF16C0 : 670A                		beq.s	.no_chng
(1) 3595/FFFFFFFFFFFF16C2 : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3596/FFFFFFFFFFFF16C4 : 9246                		sub.w	d6,d1
(1) 3597/FFFFFFFFFFFF16C6 : 6A02                		bpl.s	.too_blck
(1) 3598/FFFFFFFFFFFF16C8 : 4241                		clr.w	d1
(1) 3599/FFFFFFFFFFFF16CA :                     .too_blck:
(1) 3600/FFFFFFFFFFFF16CA : 5243                		addq.w	#1,d3		; Color changed
(1) 3601/FFFFFFFFFFFF16CC :                     .no_chng:
(1) 3602/FFFFFFFFFFFF16CC : 8041                		or.w	d1,d0
(1) 3603/FFFFFFFFFFFF16CE : EB5E                		rol.w	#5,d6		; next << color
(1) 3604/FFFFFFFFFFFF16D0 : EB5D                		rol.w	#5,d5
(1) 3605/FFFFFFFFFFFF16D2 : EB5C                		rol.w	#5,d4
(1) 3592/FFFFFFFFFFFF16D4 : 3200                		move.w	d0,d1
(1) 3593/FFFFFFFFFFFF16D6 : C245                		and.w	d5,d1		; Filter TARGET
(1) 3594/FFFFFFFFFFFF16D8 : 670A                		beq.s	.no_chng
(1) 3595/FFFFFFFFFFFF16DA : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3596/FFFFFFFFFFFF16DC : 9246                		sub.w	d6,d1
(1) 3597/FFFFFFFFFFFF16DE : 6A02                		bpl.s	.too_blck
(1) 3598/FFFFFFFFFFFF16E0 : 4241                		clr.w	d1
(1) 3599/FFFFFFFFFFFF16E2 :                     .too_blck:
(1) 3600/FFFFFFFFFFFF16E2 : 5243                		addq.w	#1,d3		; Color changed
(1) 3601/FFFFFFFFFFFF16E4 :                     .no_chng:
(1) 3602/FFFFFFFFFFFF16E4 : 8041                		or.w	d1,d0
(1) 3603/FFFFFFFFFFFF16E6 : EB5E                		rol.w	#5,d6		; next << color
(1) 3604/FFFFFFFFFFFF16E8 : EB5D                		rol.w	#5,d5
(1) 3605/FFFFFFFFFFFF16EA : EB5C                		rol.w	#5,d4
(1) 3592/FFFFFFFFFFFF16EC : 3200                		move.w	d0,d1
(1) 3593/FFFFFFFFFFFF16EE : C245                		and.w	d5,d1		; Filter TARGET
(1) 3594/FFFFFFFFFFFF16F0 : 670A                		beq.s	.no_chng
(1) 3595/FFFFFFFFFFFF16F2 : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3596/FFFFFFFFFFFF16F4 : 9246                		sub.w	d6,d1
(1) 3597/FFFFFFFFFFFF16F6 : 6A02                		bpl.s	.too_blck
(1) 3598/FFFFFFFFFFFF16F8 : 4241                		clr.w	d1
(1) 3599/FFFFFFFFFFFF16FA :                     .too_blck:
(1) 3600/FFFFFFFFFFFF16FA : 5243                		addq.w	#1,d3		; Color changed
(1) 3601/FFFFFFFFFFFF16FC :                     .no_chng:
(1) 3602/FFFFFFFFFFFF16FC : 8041                		or.w	d1,d0
(1) 3603/FFFFFFFFFFFF16FE : EB5E                		rol.w	#5,d6		; next << color
(1) 3604/FFFFFFFFFFFF1700 : EB5D                		rol.w	#5,d5
(1) 3605/FFFFFFFFFFFF1702 : EB5C                		rol.w	#5,d4
(1) 3607/FFFFFFFFFFFF1704 :                     	; returns to $Exxx, rotate to $xxxE:
(1) 3608/FFFFFFFFFFFF1704 : E35E                		rol.w	#1,d6
(1) 3609/FFFFFFFFFFFF1706 : E35D                		rol.w	#1,d5
(1) 3610/FFFFFFFFFFFF1708 : E35C                		rol.w	#1,d4
(1) 3611/FFFFFFFFFFFF170A : 3AC0                		move.w	d0,(a5)+
(1) 3612/FFFFFFFFFFFF170C :                     .all_black:
(1) 3613/FFFFFFFFFFFF170C : 51CF FFAC           		dbf	d7,.next_color
(1) 3614/FFFFFFFFFFFF1710 : 4A43                		tst.w	d3
(1) 3615/FFFFFFFFFFFF1712 : 6602                		bne.s	.fdout_nend
(1) 3616/FFFFFFFFFFFF1714 : 4216                		clr.b	palfd_req(a6)
(1) 3617/FFFFFFFFFFFF1716 :                     .fdout_nend:
(1) 3618/FFFFFFFFFFFF1716 : 4E75                		rts
(1) 3619/FFFFFFFFFFFF1718 :                     
(1) 3620/FFFFFFFFFFFF1718 :                     ; ----------------------------------------------------
(1) 3621/FFFFFFFFFFFF1718 :                     ; Fade request $02
(1) 3622/FFFFFFFFFFFF1718 :                     ; Fade-in
(1) 3623/FFFFFFFFFFFF1718 :                     ; ----------------------------------------------------
(1) 3624/FFFFFFFFFFFF1718 :                     
(1) 3625/FFFFFFFFFFFF1718 :                     .fade_in:
(1) 3626/FFFFFFFFFFFF1718 : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3627/FFFFFFFFFFFF171C : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3628/FFFFFFFFFFFF1720 : 383C 7FFF           		move.w	#$7FFF,d4		; d4 - Filter bits
(1) 3629/FFFFFFFFFFFF1724 :                     .next_in:
(1) 3630/FFFFFFFFFFFF1724 : 4847                		swap	d7
(1) 3631/FFFFFFFFFFFF1726 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 3632/FFFFFFFFFFFF1728 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 3633/FFFFFFFFFFFF172A : 3602                		move.w	d2,d3
(1) 3634/FFFFFFFFFFFF172C : 0243 8000           		andi.w	#$8000,d3
(1) 3635/FFFFFFFFFFFF1730 : 4843                		swap	d3
(1) 3636/FFFFFFFFFFFF1732 : C044                		and.w	d4,d0
(1) 3637/FFFFFFFFFFFF1734 : C444                		and.w	d4,d2
(1) 3638/FFFFFFFFFFFF1736 : B042                		cmp.w	d2,d0
(1) 3639/FFFFFFFFFFFF1738 : 6770                		beq.s	.set_prio
(1) 3640/FFFFFFFFFFFF173A :                     	rept 3
(1) 3641/FFFFFFFFFFFF173A :                     		move.w	d0,d1
(1) 3642/FFFFFFFFFFFF173A :                     		move.w	d4,d3
(1) 3643/FFFFFFFFFFFF173A :                     		eor.w	d5,d3
(1) 3644/FFFFFFFFFFFF173A :                     		and.w	d3,d0
(1) 3645/FFFFFFFFFFFF173A :                     		move.w	d2,d3
(1) 3646/FFFFFFFFFFFF173A :                     		and.w	d5,d1		; filter CURRENT color
(1) 3647/FFFFFFFFFFFF173A :                     		and.w	d5,d3		; filter TARGET color
(1) 3648/FFFFFFFFFFFF173A :                     
(1) 3649/FFFFFFFFFFFF173A :                     		add.w	d6,d1		; ADD to current
(1) 3650/FFFFFFFFFFFF173A :                     		cmp.w	d3,d1
(1) 3651/FFFFFFFFFFFF173A :                     		bcs.s	.max_out
(1) 3652/FFFFFFFFFFFF173A :                     		move.w	d2,d1
(1) 3653/FFFFFFFFFFFF173A :                     		andi.w	#$7FFF,d1
(1) 3654/FFFFFFFFFFFF173A :                     		and.w	d5,d1
(1) 3655/FFFFFFFFFFFF173A :                     .max_out:
(1) 3656/FFFFFFFFFFFF173A :                     		addq.w	#1,d7
(1) 3657/FFFFFFFFFFFF173A :                     		or.w	d1,d0
(1) 3658/FFFFFFFFFFFF173A :                     		rol.w	#5,d6		; next << color
(1) 3659/FFFFFFFFFFFF173A :                     		rol.w	#5,d5
(1) 3660/FFFFFFFFFFFF173A :                     	endm
(1) 3641/FFFFFFFFFFFF173A : 3200                		move.w	d0,d1
(1) 3642/FFFFFFFFFFFF173C : 3604                		move.w	d4,d3
(1) 3643/FFFFFFFFFFFF173E : BB43                		eor.w	d5,d3
(1) 3644/FFFFFFFFFFFF1740 : C043                		and.w	d3,d0
(1) 3645/FFFFFFFFFFFF1742 : 3602                		move.w	d2,d3
(1) 3646/FFFFFFFFFFFF1744 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3647/FFFFFFFFFFFF1746 : C645                		and.w	d5,d3		; filter TARGET color
(1) 3648/FFFFFFFFFFFF1748 :                     
(1) 3649/FFFFFFFFFFFF1748 : D246                		add.w	d6,d1		; ADD to current
(1) 3650/FFFFFFFFFFFF174A : B243                		cmp.w	d3,d1
(1) 3651/FFFFFFFFFFFF174C : 6508                		bcs.s	.max_out
(1) 3652/FFFFFFFFFFFF174E : 3202                		move.w	d2,d1
(1) 3653/FFFFFFFFFFFF1750 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3654/FFFFFFFFFFFF1754 : C245                		and.w	d5,d1
(1) 3655/FFFFFFFFFFFF1756 :                     .max_out:
(1) 3656/FFFFFFFFFFFF1756 : 5247                		addq.w	#1,d7
(1) 3657/FFFFFFFFFFFF1758 : 8041                		or.w	d1,d0
(1) 3658/FFFFFFFFFFFF175A : EB5E                		rol.w	#5,d6		; next << color
(1) 3659/FFFFFFFFFFFF175C : EB5D                		rol.w	#5,d5
(1) 3641/FFFFFFFFFFFF175E : 3200                		move.w	d0,d1
(1) 3642/FFFFFFFFFFFF1760 : 3604                		move.w	d4,d3
(1) 3643/FFFFFFFFFFFF1762 : BB43                		eor.w	d5,d3
(1) 3644/FFFFFFFFFFFF1764 : C043                		and.w	d3,d0
(1) 3645/FFFFFFFFFFFF1766 : 3602                		move.w	d2,d3
(1) 3646/FFFFFFFFFFFF1768 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3647/FFFFFFFFFFFF176A : C645                		and.w	d5,d3		; filter TARGET color
(1) 3648/FFFFFFFFFFFF176C :                     
(1) 3649/FFFFFFFFFFFF176C : D246                		add.w	d6,d1		; ADD to current
(1) 3650/FFFFFFFFFFFF176E : B243                		cmp.w	d3,d1
(1) 3651/FFFFFFFFFFFF1770 : 6508                		bcs.s	.max_out
(1) 3652/FFFFFFFFFFFF1772 : 3202                		move.w	d2,d1
(1) 3653/FFFFFFFFFFFF1774 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3654/FFFFFFFFFFFF1778 : C245                		and.w	d5,d1
(1) 3655/FFFFFFFFFFFF177A :                     .max_out:
(1) 3656/FFFFFFFFFFFF177A : 5247                		addq.w	#1,d7
(1) 3657/FFFFFFFFFFFF177C : 8041                		or.w	d1,d0
(1) 3658/FFFFFFFFFFFF177E : EB5E                		rol.w	#5,d6		; next << color
(1) 3659/FFFFFFFFFFFF1780 : EB5D                		rol.w	#5,d5
(1) 3641/FFFFFFFFFFFF1782 : 3200                		move.w	d0,d1
(1) 3642/FFFFFFFFFFFF1784 : 3604                		move.w	d4,d3
(1) 3643/FFFFFFFFFFFF1786 : BB43                		eor.w	d5,d3
(1) 3644/FFFFFFFFFFFF1788 : C043                		and.w	d3,d0
(1) 3645/FFFFFFFFFFFF178A : 3602                		move.w	d2,d3
(1) 3646/FFFFFFFFFFFF178C : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3647/FFFFFFFFFFFF178E : C645                		and.w	d5,d3		; filter TARGET color
(1) 3648/FFFFFFFFFFFF1790 :                     
(1) 3649/FFFFFFFFFFFF1790 : D246                		add.w	d6,d1		; ADD to current
(1) 3650/FFFFFFFFFFFF1792 : B243                		cmp.w	d3,d1
(1) 3651/FFFFFFFFFFFF1794 : 6508                		bcs.s	.max_out
(1) 3652/FFFFFFFFFFFF1796 : 3202                		move.w	d2,d1
(1) 3653/FFFFFFFFFFFF1798 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3654/FFFFFFFFFFFF179C : C245                		and.w	d5,d1
(1) 3655/FFFFFFFFFFFF179E :                     .max_out:
(1) 3656/FFFFFFFFFFFF179E : 5247                		addq.w	#1,d7
(1) 3657/FFFFFFFFFFFF17A0 : 8041                		or.w	d1,d0
(1) 3658/FFFFFFFFFFFF17A2 : EB5E                		rol.w	#5,d6		; next << color
(1) 3659/FFFFFFFFFFFF17A4 : EB5D                		rol.w	#5,d5
(1) 3661/FFFFFFFFFFFF17A6 : E35E                		rol.w	#1,d6
(1) 3662/FFFFFFFFFFFF17A8 : E35D                		rol.w	#1,d5
(1) 3663/FFFFFFFFFFFF17AA :                     .set_prio:
(1) 3664/FFFFFFFFFFFF17AA : 4843                		swap	d3
(1) 3665/FFFFFFFFFFFF17AC : 8043                		or.w	d3,d0
(1) 3666/FFFFFFFFFFFF17AE : 3A80                		move.w	d0,(a5)
(1) 3667/FFFFFFFFFFFF17B0 :                     .same_in:
(1) 3668/FFFFFFFFFFFF17B0 : DAFC 0002           		adda	#2,a5		; Next color
(1) 3669/FFFFFFFFFFFF17B4 : D8FC 0002           		adda	#2,a4
(1) 3670/FFFFFFFFFFFF17B8 : 4847                		swap	d7
(1) 3671/FFFFFFFFFFFF17BA : 51CF FF68           		dbf	d7,.next_in
(1) 3672/FFFFFFFFFFFF17BE : 4847                		swap	d7
(1) 3673/FFFFFFFFFFFF17C0 : 4A47                		tst.w	d7
(1) 3674/FFFFFFFFFFFF17C2 : 6602                		bne.s	.fdin_nend
(1) 3675/FFFFFFFFFFFF17C4 : 4216                		clr.b	palfd_req(a6)
(1) 3676/FFFFFFFFFFFF17C6 :                     .fdin_nend:
(1) 3677/FFFFFFFFFFFF17C6 : 4E75                		rts
(1) 3678/FFFFFFFFFFFF17C8 :                     
(1) 3679/FFFFFFFFFFFF17C8 :                     ; --------------------------------------------------------
(1) 3680/FFFFFFFFFFFF17C8 :                     ; Video_MdMars_LoadPal, Video_MdMars_FadePal
(1) 3681/FFFFFFFFFFFF17C8 :                     ;
(1) 3682/FFFFFFFFFFFF17C8 :                     ; Loads SVDP 256-color palette data,
(1) 3683/FFFFFFFFFFFF17C8 :                     ; either current or for fading.
(1) 3684/FFFFFFFFFFFF17C8 :                     ;
(1) 3685/FFFFFFFFFFFF17C8 :                     ; Input:
(1) 3686/FFFFFFFFFFFF17C8 :                     ; a0   | 256-color Palette data
(1) 3687/FFFFFFFFFFFF17C8 :                     ; d0.w | Starting index
(1) 3688/FFFFFFFFFFFF17C8 :                     ; d1.w | Number of colors
(1) 3689/FFFFFFFFFFFF17C8 :                     ; d2.w | Priority bit 0 or 1
(1) 3690/FFFFFFFFFFFF17C8 :                     ;
(1) 3691/FFFFFFFFFFFF17C8 :                     ; Notes:
(1) 3692/FFFFFFFFFFFF17C8 :                     ; - Priority bit is skipped on the first color index
(1) 3693/FFFFFFFFFFFF17C8 :                     ; --------------------------------------------------------
(1) 3694/FFFFFFFFFFFF17C8 :                     
(1) 3695/FFFFFFFFFFFF17C8 :                     Video_MdMars_FadePal:
(1) 3696/FFFFFFFFFFFF17C8 : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3697/FFFFFFFFFFFF17CC : 4DF8 C802           		lea	(RAM_MdMars_PalFd).w,a6
(1) 3698/FFFFFFFFFFFF17D0 : 6008                		bra.s	vidMars_Pal
(1) 3699/FFFFFFFFFFFF17D2 :                     Video_MdMars_LoadPal:
(1) 3700/FFFFFFFFFFFF17D2 : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3701/FFFFFFFFFFFF17D6 : 4DF8 CA42           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a6
(1) 3702/FFFFFFFFFFFF17DA :                     ; 		bra.s	vidMars_Pal
(1) 3703/FFFFFFFFFFFF17DA :                     vidMars_Pal:
(1) 3704/FFFFFFFFFFFF17DA : 2A48                		move.l	a0,a5
(1) 3705/FFFFFFFFFFFF17DC : 7E00                		moveq	#0,d7
(1) 3706/FFFFFFFFFFFF17DE : 3E00                		move.w	d0,d7
(1) 3707/FFFFFFFFFFFF17E0 : 3A00                		move.w	d0,d5
(1) 3708/FFFFFFFFFFFF17E2 : DE47                		add.w	d7,d7
(1) 3709/FFFFFFFFFFFF17E4 : DCC7                		adda	d7,a6
(1) 3710/FFFFFFFFFFFF17E6 : 3E01                		move.w	d1,d7
(1) 3711/FFFFFFFFFFFF17E8 : 0447 0001           		subi.w	#1,d7
(1) 3712/FFFFFFFFFFFF17EC : 3C02                		move.w	d2,d6
(1) 3713/FFFFFFFFFFFF17EE : 0246 0001           		andi.w	#1,d6
(1) 3714/FFFFFFFFFFFF17F2 : E25E                		ror.w	#1,d6
(1) 3715/FFFFFFFFFFFF17F4 :                     .loop:
(1) 3716/FFFFFFFFFFFF17F4 : 4847                		swap	d7
(1) 3717/FFFFFFFFFFFF17F6 : 3E1D                		move.w	(a5)+,d7
(1) 3718/FFFFFFFFFFFF17F8 : 4A45                		tst.w	d5
(1) 3719/FFFFFFFFFFFF17FA : 670A                		beq.s	.trnspr
(1) 3720/FFFFFFFFFFFF17FC : BBFC FFFF CA42      		cmpa.l	#RAM_MdMars_CommBuff+Dreq_Palette,a5	; Skip first index
(1) 3721/FFFFFFFFFFFF1802 : 6702                		beq.s	.trnspr
(1) 3722/FFFFFFFFFFFF1804 : 8E46                		or.w	d6,d7
(1) 3723/FFFFFFFFFFFF1806 :                     .trnspr:
(1) 3724/FFFFFFFFFFFF1806 : 3CC7                		move.w	d7,(a6)+
(1) 3725/FFFFFFFFFFFF1808 : 4847                		swap	d7
(1) 3726/FFFFFFFFFFFF180A : 5245                		addq.w	#1,d5
(1) 3727/FFFFFFFFFFFF180C : 51CF FFE6           		dbf	d7,.loop
(1) 3728/FFFFFFFFFFFF1810 : 4CDF 60E0           		movem.l	(sp)+,d5-d7/a5-a6
(1) 3729/FFFFFFFFFFFF1814 : 4E75                		rts
(1) 3730/FFFFFFFFFFFF1816 :                     
(1) 3731/FFFFFFFFFFFF1816 :                     ; --------------------------------------------------------
(1) 3732/FFFFFFFFFFFF1816 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 3733/FFFFFFFFFFFF1816 :                     ;
(1) 3734/FFFFFFFFFFFF1816 :                     ; Loads palettes on bulk with a list
(1) 3735/FFFFFFFFFFFF1816 :                     ;
(1) 3736/FFFFFFFFFFFF1816 :                     ; Input:
(1) 3737/FFFFFFFFFFFF1816 :                     ; a0 | List of graphics to load:
(1) 3738/FFFFFFFFFFFF1816 :                     ;        dc.w numof_entries
(1) 3739/FFFFFFFFFFFF1816 :                     ;        dc.l palette_data
(1) 3740/FFFFFFFFFFFF1816 :                     ;        dc.w start_at
(1) 3741/FFFFFFFFFFFF1816 :                     ;        dc.w numof_colors
(1) 3742/FFFFFFFFFFFF1816 :                     ;        dc.w priority (0 or 1)
(1) 3743/FFFFFFFFFFFF1816 :                     ;        ; ...more entries
(1) 3744/FFFFFFFFFFFF1816 :                     ; --------------------------------------------------------
(1) 3745/FFFFFFFFFFFF1816 :                     
(1) 3746/FFFFFFFFFFFF1816 :                     Video_MdMars_LoadPal_List:
(1) 3747/FFFFFFFFFFFF1816 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3748/FFFFFFFFFFFF181A : 2A48                		move.l	a0,a5
(1) 3749/FFFFFFFFFFFF181C : 3E1D                		move.w	(a5)+,d7
(1) 3750/FFFFFFFFFFFF181E : 6712                		beq.s	.invalid
(1) 3751/FFFFFFFFFFFF1820 : 6B10                		bmi.s	.invalid
(1) 3752/FFFFFFFFFFFF1822 : 5347                		subq.w	#1,d7
(1) 3753/FFFFFFFFFFFF1824 :                     .next_one:
(1) 3754/FFFFFFFFFFFF1824 : 205D                		move.l	(a5)+,a0
(1) 3755/FFFFFFFFFFFF1826 : 301D                		move.w	(a5)+,d0
(1) 3756/FFFFFFFFFFFF1828 : 321D                		move.w	(a5)+,d1
(1) 3757/FFFFFFFFFFFF182A : 341D                		move.w	(a5)+,d2
(1) 3758/FFFFFFFFFFFF182C : 61A4                		bsr	Video_MdMars_LoadPal
(1) 3759/FFFFFFFFFFFF182E : 51CF FFF4           		dbf	d7,.next_one
(1) 3760/FFFFFFFFFFFF1832 :                     .invalid:
(1) 3761/FFFFFFFFFFFF1832 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3762/FFFFFFFFFFFF1836 : 4E75                		rts
(1) 3763/FFFFFFFFFFFF1838 :                     
(1) 3764/FFFFFFFFFFFF1838 :                     Video_MdMars_FadePal_List:
(1) 3765/FFFFFFFFFFFF1838 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3766/FFFFFFFFFFFF183C : 2A48                		move.l	a0,a5
(1) 3767/FFFFFFFFFFFF183E : 3E1D                		move.w	(a5)+,d7
(1) 3768/FFFFFFFFFFFF1840 : 6714                		beq.s	.invalid
(1) 3769/FFFFFFFFFFFF1842 : 6B12                		bmi.s	.invalid
(1) 3770/FFFFFFFFFFFF1844 : 5347                		subq.w	#1,d7
(1) 3771/FFFFFFFFFFFF1846 :                     .next_one:
(1) 3772/FFFFFFFFFFFF1846 : 205D                		move.l	(a5)+,a0
(1) 3773/FFFFFFFFFFFF1848 : 301D                		move.w	(a5)+,d0
(1) 3774/FFFFFFFFFFFF184A : 321D                		move.w	(a5)+,d1
(1) 3775/FFFFFFFFFFFF184C : 341D                		move.w	(a5)+,d2
(1) 3776/FFFFFFFFFFFF184E : 6100 FF78           		bsr	Video_MdMars_FadePal
(1) 3777/FFFFFFFFFFFF1852 : 51CF FFF2           		dbf	d7,.next_one
(1) 3778/FFFFFFFFFFFF1856 :                     .invalid:
(1) 3779/FFFFFFFFFFFF1856 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3780/FFFFFFFFFFFF185A : 4E75                		rts
(1) 3781/FFFFFFFFFFFF185C :                     
(1) 3782/FFFFFFFFFFFF185C :                     ; ====================================================================
(1) 3783/FFFFFFFFFFFF185C :                     
(1) 3785/FFFFFFFFFFFF185C :                     
     195/FFFFFFFFFFFF185C :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF185C :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF185C :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF185C :                     ;
(1)    5/FFFFFFFFFFFF185C :                     ; including SCD, 32X and PICO.
(1)    6/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFF185C :                     
(1)    8/FFFFFFFFFFFF185C :                     ; ====================================================================
(1)    9/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF185C :                     ; Settings
(1)   11/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF185C :                     
(1)   13/FFFFFFFFFFFF185C : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/FFFFFFFFFFFF185C : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/FFFFFFFFFFFF185C :                     
(1)   16/FFFFFFFFFFFF185C :                     ; ===================================================================
(1)   17/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF185C :                     ; Variables
(1)   19/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF185C :                     
(1)   21/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   22/FFFFFFFFFFFF185C :                     ; Controller buffer data
(1)   23/FFFFFFFFFFFF185C :                     ;
(1)   24/FFFFFFFFFFFF185C :                     ; MUST call System_Input during VBlank
(1)   25/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   26/FFFFFFFFFFFF185C :                     
(1)   27/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   28/FFFFFFFFFFFF185C :                     ; pad_id
(1)   29/FFFFFFFFFFFF185C :                     ;
(1)   30/FFFFFFFFFFFF185C :                     ; JoyID_MD:
(1)   31/FFFFFFFFFFFF185C :                     ; Read pad_ver separately to check if controller
(1)   32/FFFFFFFFFFFF185C :                     ; is 3button(0) or 6button(1)
(1)   33/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF185C :                     
(1)   35/FFFFFFFFFFFF185C : =$3                  JoyID_Mouse	equ $03
(1)   36/FFFFFFFFFFFF185C : =$D                  JoyID_MD	equ $0D
(1)   37/FFFFFFFFFFFF185C : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/FFFFFFFFFFFF185C :                     
(1)   39/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF185C :                     ; Genesis controller
(1)   41/FFFFFFFFFFFF185C :                     ;
(1)   42/FFFFFFFFFFFF185C :                     ; Read these as WORD
(1)   43/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF185C :                     
(1)   45/FFFFFFFFFFFF185C :                     ; on_hold, on_press
(1)   46/FFFFFFFFFFFF185C : =$1                  JoyUp		equ $0001
(1)   47/FFFFFFFFFFFF185C : =$2                  JoyDown		equ $0002
(1)   48/FFFFFFFFFFFF185C : =$4                  JoyLeft		equ $0004
(1)   49/FFFFFFFFFFFF185C : =$8                  JoyRight	equ $0008
(1)   50/FFFFFFFFFFFF185C : =$10                 JoyB		equ $0010
(1)   51/FFFFFFFFFFFF185C : =$20                 JoyC		equ $0020
(1)   52/FFFFFFFFFFFF185C : =$40                 JoyA		equ $0040
(1)   53/FFFFFFFFFFFF185C : =$80                 JoyStart	equ $0080
(1)   54/FFFFFFFFFFFF185C : =$100                JoyZ		equ $0100
(1)   55/FFFFFFFFFFFF185C : =$200                JoyY		equ $0200
(1)   56/FFFFFFFFFFFF185C : =$400                JoyX		equ $0400
(1)   57/FFFFFFFFFFFF185C : =$800                JoyMode		equ $0800
(1)   58/FFFFFFFFFFFF185C : =$0                  bitJoyUp	equ 0
(1)   59/FFFFFFFFFFFF185C : =$1                  bitJoyDown	equ 1
(1)   60/FFFFFFFFFFFF185C : =$2                  bitJoyLeft	equ 2
(1)   61/FFFFFFFFFFFF185C : =$3                  bitJoyRight	equ 3
(1)   62/FFFFFFFFFFFF185C : =$4                  bitJoyB		equ 4
(1)   63/FFFFFFFFFFFF185C : =$5                  bitJoyC		equ 5
(1)   64/FFFFFFFFFFFF185C : =$6                  bitJoyA		equ 6
(1)   65/FFFFFFFFFFFF185C : =$7                  bitJoyStart	equ 7
(1)   66/FFFFFFFFFFFF185C : =$8                  bitJoyZ		equ 8
(1)   67/FFFFFFFFFFFF185C : =$9                  bitJoyY		equ 9
(1)   68/FFFFFFFFFFFF185C : =$A                  bitJoyX		equ 10
(1)   69/FFFFFFFFFFFF185C : =$B                  bitJoyMode	equ 11
(1)   70/FFFFFFFFFFFF185C :                     
(1)   71/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   72/FFFFFFFFFFFF185C :                     ; Mega Mouse ONLY
(1)   73/FFFFFFFFFFFF185C :                     ;
(1)   74/FFFFFFFFFFFF185C :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/FFFFFFFFFFFF185C :                     ; NOT screen position.
(1)   76/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF185C :                     
(1)   78/FFFFFFFFFFFF185C : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF185C : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF185C : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF185C : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/FFFFFFFFFFFF185C : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF185C : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF185C : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF185C : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF185C :                     
(1)   87/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF185C :                     ; Sega PICO
(1)   89/FFFFFFFFFFFF185C :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/FFFFFFFFFFFF185C :                     ; For reading the pen position use
(1)   91/FFFFFFFFFFFF185C :                     ; mouse_x and mouse_y
(1)   92/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)   93/FFFFFFFFFFFF185C :                     
(1)   94/FFFFFFFFFFFF185C : =$10                 JoyRED		equ $0010
(1)   95/FFFFFFFFFFFF185C : =$80                 JoyPEN		equ $0080
(1)   96/FFFFFFFFFFFF185C : =$4                  bitJoyRED	equ 4
(1)   97/FFFFFFFFFFFF185C : =$7                  bitJoyPEN	equ 7
(1)   98/FFFFFFFFFFFF185C :                     
(1)   99/FFFFFFFFFFFF185C :                     ; ====================================================================
(1)  100/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF185C :                     ; Structs
(1)  102/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF185C :                     
(1)  104/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF185C :                     ; RAM_InputData
(1)  106/FFFFFFFFFFFF185C :                     
(1)  107/FFFFFFFFFFFF185C :                     ; *** MANUAL VARIABLES ***
(1)  108/FFFFFFFFFFFF185C : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/FFFFFFFFFFFF185C : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/FFFFFFFFFFFF185C : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/FFFFFFFFFFFF185C : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/FFFFFFFFFFFF185C : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/FFFFFFFFFFFF185C : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/FFFFFFFFFFFF185C : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/FFFFFFFFFFFF185C : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/FFFFFFFFFFFF185C : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/FFFFFFFFFFFF185C : =$10                 sizeof_input		equ $10
(1)  118/FFFFFFFFFFFF185C :                     
(1)  119/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)  120/FFFFFFFFFFFF185C :                     ; RAM_Objects
(1)  121/FFFFFFFFFFFF185C :                     ;
(1)  122/FFFFFFFFFFFF185C :                     ; Size must end as even
(1)  123/FFFFFFFFFFFF185C :                     ; ------------------------------------------------
(1)  124/FFFFFFFFFFFF185C :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; len			ds.l 0
(1)  148/FFFFFFFFFFFF185C : =$68                 			endstruct
(1)  149/FFFFFFFFFFFF185C :                     
(1)  150/FFFFFFFFFFFF185C :                     ; ====================================================================
(1)  151/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  152/FFFFFFFFFFFF185C :                     ; RAM section
(1)  153/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  154/FFFFFFFFFFFF185C :                     
(1)  155/FFFFFFFFFFFF185C : (MACRO)              			memory RAM_MdSystem
(1)  155/FFFFFFFFFFFF185C : =$FFFFFFFFFFFF185C   GLBL_LASTPC     := *
(1)  155/    21AA :                                     dephase
(1)  155/FFFFFFFFFFFFE45C :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFE45C : =$FFFFFFFFFFFFE45C   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFE45C :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFE55C :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFE59C :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFF5DC :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFF5E0 :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFF5E4 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFF5EA :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFF5F0 :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFF5F6 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFF5F8 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFF5FA :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFF5FC :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFF5FE :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFF604 : (MACRO)              			endmemory
(1)  169/    3352 :                     .here:          dephase
(1)  169/    3352 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/FFFFFFFFFFFF185C :                                     phase GLBL_LASTPC
(1)  170/FFFFFFFFFFFF185C :                     
(1)  171/FFFFFFFFFFFF185C :                     ; ====================================================================
(1)  172/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  173/FFFFFFFFFFFF185C :                     ; Label aliases
(1)  174/FFFFFFFFFFFF185C :                     ; ----------------------------------------------------------------
(1)  175/FFFFFFFFFFFF185C :                     
(1)  176/FFFFFFFFFFFF185C : =$FFFFFFFFFFFFE55C   Controller_1		equ RAM_InputData
(1)  177/FFFFFFFFFFFF185C : =$FFFFFFFFFFFFE56C   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/FFFFFFFFFFFF185C :                     
(1)  179/FFFFFFFFFFFF185C :                     ; ====================================================================
(1)  180/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)  181/FFFFFFFFFFFF185C :                     ; Init System
(1)  182/FFFFFFFFFFFF185C :                     ; 
(1)  183/FFFFFFFFFFFF185C :                     ; Uses:
(1)  184/FFFFFFFFFFFF185C :                     ; a0-a2,d0-d1
(1)  185/FFFFFFFFFFFF185C :                     ; --------------------------------------------------------
(1)  186/FFFFFFFFFFFF185C :                     
(1)  187/FFFFFFFFFFFF185C :                     System_Init:
(1)  188/FFFFFFFFFFFF185C : 007C 0700           		or.w	#$0700,sr
(1)  190/FFFFFFFFFFFF1860 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF1866 : 1100             
(1)  191/FFFFFFFFFFFF1868 :                     .wait:
(1)  192/FFFFFFFFFFFF1868 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF186E : 1100             
(1)  193/FFFFFFFFFFFF1870 : 66F6                		bne.s	.wait
(1)  194/FFFFFFFFFFFF1872 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  195/FFFFFFFFFFFF1874 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  196/FFFFFFFFFFFF187A : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  197/FFFFFFFFFFFF1880 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  198/FFFFFFFFFFFF1886 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF188C : 1100             
(1)  200/FFFFFFFFFFFF188E : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/FFFFFFFFFFFF1892 : 31C0 F5E4            		move.w	d0,(RAM_VBlankJump).w
(1)  202/FFFFFFFFFFFF1896 : 31C0 F5EA           		move.w	d0,(RAM_HBlankJump).w
(1)  203/FFFFFFFFFFFF189A : 31C0 F5F0           		move.w	d0,(RAM_ExternalJump).w
(1)  204/FFFFFFFFFFFF189E : 203C FFFF 1C8C      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/FFFFFFFFFFFF18A4 : 223C FFFF 1C8E      		move.l	#HInt_Default,d1
(1)  206/FFFFFFFFFFFF18AA : 243C FFFF 1C90      		move.l	#ExtInt_Default,d2
(1)  207/FFFFFFFFFFFF18B0 : 6100 05FC           		bsr	System_SetIntJumps
(1)  208/FFFFFFFFFFFF18B4 : 41F8 E55C           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/FFFFFFFFFFFF18B8 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/FFFFFFFFFFFF18BC : 7000                		moveq	#0,d0
(1)  211/FFFFFFFFFFFF18BE :                     .clrinput:
(1)  212/FFFFFFFFFFFF18BE : 30C0                		move.w	d0,(a0)+
(1)  213/FFFFFFFFFFFF18C0 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/FFFFFFFFFFFF18C4 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/FFFFFFFFFFFF18C8 : 4E75                		rts
(1)  216/FFFFFFFFFFFF18CA :                     
(1)  217/FFFFFFFFFFFF18CA :                     ; ====================================================================
(1)  218/FFFFFFFFFFFF18CA :                     ; --------------------------------------------------------
(1)  219/FFFFFFFFFFFF18CA :                     ; System_Render
(1)  220/FFFFFFFFFFFF18CA :                     ;
(1)  221/FFFFFFFFFFFF18CA :                     ; This will:
(1)  222/FFFFFFFFFFFF18CA :                     ; - Drop a frame if we got late on VBlank
(1)  223/FFFFFFFFFFFF18CA :                     ; - Process Palette fading buffers
(1)  224/FFFFFFFFFFFF18CA :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/FFFFFFFFFFFF18CA :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/FFFFFFFFFFFF18CA :                     ; - Check the sound driver for any changes/requests
(1)  227/FFFFFFFFFFFF18CA :                     ;   from Z80 (Sound_Update, several times)
(1)  228/FFFFFFFFFFFF18CA :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/FFFFFFFFFFFF18CA :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/FFFFFFFFFFFF18CA :                     ;
(1)  231/FFFFFFFFFFFF18CA :                     ; During VBlank:
(1)  232/FFFFFFFFFFFF18CA :                     ; - Read the Input data, (System_Input)
(1)  233/FFFFFFFFFFFF18CA :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/FFFFFFFFFFFF18CA :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/FFFFFFFFFFFF18CA :                     ;   (Video_Render)
(1)  236/FFFFFFFFFFFF18CA :                     ;
(1)  237/FFFFFFFFFFFF18CA :                     ; Notes:
(1)  238/FFFFFFFFFFFF18CA :                     ; - If VDP Display is disabled all of this
(1)  239/FFFFFFFFFFFF18CA :                     ;   will be skipped.
(1)  240/FFFFFFFFFFFF18CA :                     ; --------------------------------------------------------
(1)  241/FFFFFFFFFFFF18CA :                     
(1)  242/FFFFFFFFFFFF18CA :                     System_Render:
(1)  243/FFFFFFFFFFFF18CA : 3E38 E456           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/FFFFFFFFFFFF18CE : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/FFFFFFFFFFFF18D2 : 6774                		beq	.forgot_disp
(1)  246/FFFFFFFFFFFF18D4 : 6100 F3A4           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/FFFFFFFFFFFF18D8 :                     .wait_early:
(1)  248/FFFFFFFFFFFF18D8 : 6100 00F4           		bsr	Sound_Update			; Update sound on wait
(1)  249/FFFFFFFFFFFF18DC : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/FFFFFFFFFFFF18E2 : 0807 0003           		btst	#bitVBlk,d7
(1)  251/FFFFFFFFFFFF18E6 : 66F0                		bne.s	.wait_early
(1)  252/FFFFFFFFFFFF18E8 :                     	; ----------------------------------------
(1)  253/FFFFFFFFFFFF18E8 :                     	; 32X/CD32X
(1)  255/FFFFFFFFFFFF18E8 : 6100 FD5C           		bsr	Video_MdMars_RunFade		; Process SVDP palette fade
(1)  256/FFFFFFFFFFFF18EC : 4BF9 00A1 512C      		lea	(sysmars_reg+comm12).l,a5	; %SW00
(1)  257/FFFFFFFFFFFF18F2 : 3E15                		move.w	(a5),d7				; SH2 allows framedropping?
(1)  258/FFFFFFFFFFFF18F4 : 0807 0003           		btst	#3,d7
(1)  259/FFFFFFFFFFFF18F8 : 6724                		beq.s	.mars_sync
(1)  260/FFFFFFFFFFFF18FA :                     ; ----------------------------------------
(1)  261/FFFFFFFFFFFF18FA :                     ; w/32X Framedrop
(1)  262/FFFFFFFFFFFF18FA :                     ; ----------------------------------------
(1)  263/FFFFFFFFFFFF18FA :                     
(1)  264/FFFFFFFFFFFF18FA :                     .mars_wait:
(1)  265/FFFFFFFFFFFF18FA : 6100 00D2           		bsr	Sound_Update			; Update sound on wait
(1)  266/FFFFFFFFFFFF18FE : 3E15                		move.w	(a5),d7				; Sync bit cleared?
(1)  267/FFFFFFFFFFFF1900 : 0807 0004           		btst	#4,d7
(1)  268/FFFFFFFFFFFF1904 : 6720                		beq.s	.mars_free
(1)  269/FFFFFFFFFFFF1906 :                     .got_late:
(1)  270/FFFFFFFFFFFF1906 : 6100 00C6           		bsr	Sound_Update			; Update sound on wait
(1)  271/FFFFFFFFFFFF190A : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  272/FFFFFFFFFFFF1910 : 0807 0003           		btst	#bitVBlk,d7
(1)  273/FFFFFFFFFFFF1914 : 66F0                		bne.s	.got_late
(1)  274/FFFFFFFFFFFF1916 : 6100 00B6           		bsr	Sound_Update
(1)  275/FFFFFFFFFFFF191A : 612E                		bsr	.wait_vblank
(1)  276/FFFFFFFFFFFF191C : 601A                		bra.s	.from_late
(1)  277/FFFFFFFFFFFF191E :                     ; ----------------------------------------
(1)  278/FFFFFFFFFFFF191E :                     ; w/32X Sync
(1)  279/FFFFFFFFFFFF191E :                     ; ----------------------------------------
(1)  280/FFFFFFFFFFFF191E :                     .mars_sync:
(1)  281/FFFFFFFFFFFF191E : 6100 FA62           		bsr	Video_MdMars_WaitSync		; Wait DREQ-RAM normally
(1)  282/FFFFFFFFFFFF1922 : 6100 00AA           		bsr	Sound_Update
(1)  283/FFFFFFFFFFFF1926 :                     .mars_free:
(1)  284/FFFFFFFFFFFF1926 : 6100 0686           		bsr	System_MdMars_Update		; Send DREQ changes
(1)  286/FFFFFFFFFFFF192A :                     ; ----------------------------------------
(1)  287/FFFFFFFFFFFF192A : 611E                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/FFFFFFFFFFFF192C :                     ; ----------------------------------------
(1)  290/FFFFFFFFFFFF192C : 6100 00A0           		bsr	Sound_Update
(1)  291/FFFFFFFFFFFF1930 : 6100 FAD4           		bsr	Video_MdMars_PalBackup		; backup SVDP palette transfer if set to us.
(1)  292/FFFFFFFFFFFF1934 : 6100 FA42           		bsr	Video_MdMars_SetSync		; Set bit to wait for DREQ-RAM swap
(1)  294/FFFFFFFFFFFF1938 :                     .from_late:
(1)  299/FFFFFFFFFFFF1938 : 6100 0094           		bsr	Sound_Update
(1)  300/FFFFFFFFFFFF193C : 6100 FA54           		bsr	Video_MdMars_Cleanup
(1)  302/FFFFFFFFFFFF1940 : 52B8 E43C           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/FFFFFFFFFFFF1944 : 6100 0088           		bsr	Sound_Update
(1)  304/FFFFFFFFFFFF1948 :                     .forgot_disp:
(1)  305/FFFFFFFFFFFF1948 : 4E75                		rts
(1)  306/FFFFFFFFFFFF194A :                     ; ----------------------------------------
(1)  307/FFFFFFFFFFFF194A :                     ; Wait until beam reaches VBlank
(1)  308/FFFFFFFFFFFF194A :                     ; ----------------------------------------
(1)  309/FFFFFFFFFFFF194A :                     
(1)  310/FFFFFFFFFFFF194A : 6100 0082           .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/FFFFFFFFFFFF194E : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/FFFFFFFFFFFF1954 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/FFFFFFFFFFFF1958 : 67F0                		beq.s	.wait_vblank
(1)  314/FFFFFFFFFFFF195A : 617A                		bsr	System_Input			; Read input data **FIRST**
(1)  315/FFFFFFFFFFFF195C : 6000 EA04           		bra	Video_Render			; Render VDP Visuals
(1)  316/FFFFFFFFFFFF1960 :                     
(1)  317/FFFFFFFFFFFF1960 :                     ; ====================================================================
(1)  318/FFFFFFFFFFFF1960 :                     ; --------------------------------------------------------
(1)  319/FFFFFFFFFFFF1960 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/FFFFFFFFFFFF1960 :                     ; from ROM or RAM
(1)  321/FFFFFFFFFFFF1960 :                     ;
(1)  322/FFFFFFFFFFFF1960 :                     ; Call these labels BEFORE and AFTER your
(1)  323/FFFFFFFFFFFF1960 :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/FFFFFFFFFFFF1960 :                     ; FILL or COPY.
(1)  325/FFFFFFFFFFFF1960 :                     ;
(1)  326/FFFFFFFFFFFF1960 :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/FFFFFFFFFFFF1960 :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/FFFFFFFFFFFF1960 :                     ; GONNA USE TO STACK.
(1)  329/FFFFFFFFFFFF1960 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF1960 :                     
(1)  331/FFFFFFFFFFFF1960 :                     ; --------------------------------------------------------
(1)  332/FFFFFFFFFFFF1960 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/FFFFFFFFFFFF1960 :                     System_DmaEnter_ROM:
(1)  334/FFFFFFFFFFFF1960 : 6164                		bsr	System_DmaEnter_RAM
(1)  336/FFFFFFFFFFFF1962 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  337/FFFFFFFFFFFF1966 : 3C3C 0002           		move.w	#$02,d6				; PWM data backup request
(1)  338/FFFFFFFFFFFF196A : 6126                		bsr	sys_MarsSlvCmd
(1)  339/FFFFFFFFFFFF196C : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
         FFFFFFFFFFFF1972 : 5107             
(1)  340/FFFFFFFFFFFF1974 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  342/FFFFFFFFFFFF1978 : 4E75                		rts
(1)  343/FFFFFFFFFFFF197A :                     
(1)  344/FFFFFFFFFFFF197A :                     System_DmaExit_ROM:
(1)  346/FFFFFFFFFFFF197A : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  347/FFFFFFFFFFFF197E : 3C3C 0003           		move.w	#$03,d6				; PWM restore playback
(1)  348/FFFFFFFFFFFF1982 : 610E                		bsr	sys_MarsSlvCmd
(1)  349/FFFFFFFFFFFF1984 : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
         FFFFFFFFFFFF198A : 5107             
(1)  350/FFFFFFFFFFFF198C : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  352/FFFFFFFFFFFF1990 : 6038                		bra	System_DmaExit_RAM
(1)  353/FFFFFFFFFFFF1992 :                     
(1)  354/FFFFFFFFFFFF1992 :                     ; ------------------------------------------------
(1)  355/FFFFFFFFFFFF1992 :                     
(1)  356/FFFFFFFFFFFF1992 :                     sys_MarsSlvCmd:
(1)  357/FFFFFFFFFFFF1992 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/FFFFFFFFFFFF1998 : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/FFFFFFFFFFFF199A : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/FFFFFFFFFFFF19A0 : 8E06                		or.b	d6,d7
(1)  361/FFFFFFFFFFFF19A2 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/FFFFFFFFFFFF19A6 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/FFFFFFFFFFFF19AC : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
         FFFFFFFFFFFF19B2 : 5103             
(1)  364/FFFFFFFFFFFF19B4 : 4E71                		nop
(1)  365/FFFFFFFFFFFF19B6 : 4E71                		nop
(1)  366/FFFFFFFFFFFF19B8 :                     .wait_exit:
(1)  367/FFFFFFFFFFFF19B8 : 4E71                		nop
(1)  368/FFFFFFFFFFFF19BA : 4E71                		nop
(1)  369/FFFFFFFFFFFF19BC : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/FFFFFFFFFFFF19C2 : 66F4                		bne.s	.wait_exit
(1)  371/FFFFFFFFFFFF19C4 : 4E75                		rts
(1)  372/FFFFFFFFFFFF19C6 :                     
(1)  373/FFFFFFFFFFFF19C6 :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF19C6 :                     ; *** EXTERNAL JUMPS ***
(1)  375/FFFFFFFFFFFF19C6 :                     ; --------------------------------------------------------
(1)  376/FFFFFFFFFFFF19C6 :                     
(1)  377/FFFFFFFFFFFF19C6 :                     System_DmaEnter_RAM:
(1)  378/FFFFFFFFFFFF19C6 : 6000 E7A8           		bra	gemaDmaPause
(1)  379/FFFFFFFFFFFF19CA :                     System_DmaExit_RAM:
(1)  380/FFFFFFFFFFFF19CA : 6000 E7C2           		bra	gemaDmaResume
(1)  381/FFFFFFFFFFFF19CE :                     
(1)  382/FFFFFFFFFFFF19CE :                     ; ====================================================================
(1)  383/FFFFFFFFFFFF19CE :                     ; --------------------------------------------------------
(1)  384/FFFFFFFFFFFF19CE :                     ; Update sound/sycronize with the Z80
(1)  385/FFFFFFFFFFFF19CE :                     ; --------------------------------------------------------
(1)  386/FFFFFFFFFFFF19CE :                     
(1)  387/FFFFFFFFFFFF19CE :                     Sound_Update:
(1)  388/FFFFFFFFFFFF19CE : 6000 E6B8           		bra	gemaUpdate
(1)  389/FFFFFFFFFFFF19D2 :                     
(1)  390/FFFFFFFFFFFF19D2 :                     ; ====================================================================
(1)  391/FFFFFFFFFFFF19D2 :                     ; --------------------------------------------------------
(1)  392/FFFFFFFFFFFF19D2 :                     ; Init sound driver
(1)  393/FFFFFFFFFFFF19D2 :                     ; --------------------------------------------------------
(1)  394/FFFFFFFFFFFF19D2 :                     
(1)  395/FFFFFFFFFFFF19D2 :                     Sound_Init:
(1)  396/FFFFFFFFFFFF19D2 : 6000 E62C           		bra	gemaInit
(1)  397/FFFFFFFFFFFF19D6 :                     
(1)  398/FFFFFFFFFFFF19D6 :                     ; ====================================================================
(1)  399/FFFFFFFFFFFF19D6 :                     ; --------------------------------------------------------
(1)  400/FFFFFFFFFFFF19D6 :                     ; System_Input
(1)  401/FFFFFFFFFFFF19D6 :                     ;
(1)  402/FFFFFFFFFFFF19D6 :                     ; Reads data from the Controller ports
(1)  403/FFFFFFFFFFFF19D6 :                     ;
(1)  404/FFFFFFFFFFFF19D6 :                     ; Call this during VBlank only once per frame,
(1)  405/FFFFFFFFFFFF19D6 :                     ; System_Render already calls this.
(1)  406/FFFFFFFFFFFF19D6 :                     ;
(1)  407/FFFFFFFFFFFF19D6 :                     ; Uses:
(1)  408/FFFFFFFFFFFF19D6 :                     ; d5-d7,a5-a6
(1)  409/FFFFFFFFFFFF19D6 :                     ; --------------------------------------------------------
(1)  410/FFFFFFFFFFFF19D6 :                     
(1)  411/FFFFFFFFFFFF19D6 :                     ; ----------------------------------------
(1)  412/FFFFFFFFFFFF19D6 :                     ; PICO input is hard-coded to
(1)  413/FFFFFFFFFFFF19D6 :                     ; Controller_1
(1)  414/FFFFFFFFFFFF19D6 :                     ;
(1)  415/FFFFFFFFFFFF19D6 :                     ; on_hold/on_press:
(1)  416/FFFFFFFFFFFF19D6 :                     ; %P00BRLDU
(1)  417/FFFFFFFFFFFF19D6 :                     ; UDLR - Arrows
(1)  418/FFFFFFFFFFFF19D6 :                     ;    B - BIG button red (JoyB)
(1)  419/FFFFFFFFFFFF19D6 :                     ;    P - Pen press/click (JoyStart)
(1)  420/FFFFFFFFFFFF19D6 :                     ;
(1)  421/FFFFFFFFFFFF19D6 :                     ; mouse_x/mouse_y:
(1)  422/FFFFFFFFFFFF19D6 :                     ; Pen X/Y position
(1)  423/FFFFFFFFFFFF19D6 :                     ; ----------------------------------------
(1)  424/FFFFFFFFFFFF19D6 :                     
(1)  425/FFFFFFFFFFFF19D6 :                     System_Input:
(1)  472/FFFFFFFFFFFF19D6 :                     
(1)  473/FFFFFFFFFFFF19D6 :                     	; ----------------------------------------
(1)  474/FFFFFFFFFFFF19D6 :                     	; Normal Genesis controls
(1)  475/FFFFFFFFFFFF19D6 : 4DF8 E55C           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  476/FFFFFFFFFFFF19DA : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  477/FFFFFFFFFFFF19E0 : 6108                		bsr.s	.this_one
(1)  478/FFFFFFFFFFFF19E2 : DAFC 0002           		adda	#2,a5
(1)  479/FFFFFFFFFFFF19E6 : DCFC 0010           		adda	#sizeof_input,a6
(1)  480/FFFFFFFFFFFF19EA :                     
(1)  481/FFFFFFFFFFFF19EA :                     ; ----------------------------------------
(1)  482/FFFFFFFFFFFF19EA :                     ; Read port
(1)  483/FFFFFFFFFFFF19EA :                     ;
(1)  484/FFFFFFFFFFFF19EA :                     ; a5 - Current port
(1)  485/FFFFFFFFFFFF19EA :                     ; a6 - Output data
(1)  486/FFFFFFFFFFFF19EA :                     ; ----------------------------------------
(1)  487/FFFFFFFFFFFF19EA :                     
(1)  488/FFFFFFFFFFFF19EA :                     .this_one:
(1)  489/FFFFFFFFFFFF19EA : 611C                		bsr	.pick_id
(1)  490/FFFFFFFFFFFF19EC : 1C87                		move.b	d7,pad_id(a6)
(1)  491/FFFFFFFFFFFF19EE : 0C47 000F           		cmpi.w	#$0F,d7
(1)  492/FFFFFFFFFFFF19F2 : 670E                		beq.s	.exit
(1)  493/FFFFFFFFFFFF19F4 : 0247 000F           		andi.w	#$0F,d7
(1)  494/FFFFFFFFFFFF19F8 : DE47                		add.w	d7,d7
(1)  495/FFFFFFFFFFFF19FA : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  496/FFFFFFFFFFFF19FE : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  497/FFFFFFFFFFFF1A02 :                     .exit:
(1)  498/FFFFFFFFFFFF1A02 : 422E 0001           		clr.b	pad_ver(a6)
(1)  499/FFFFFFFFFFFF1A06 : 4E75                		rts
(1)  500/FFFFFFFFFFFF1A08 :                     
(1)  501/FFFFFFFFFFFF1A08 :                     ; ----------------------------------------
(1)  502/FFFFFFFFFFFF1A08 :                     ; Grab ID
(1)  503/FFFFFFFFFFFF1A08 :                     ; ----------------------------------------
(1)  504/FFFFFFFFFFFF1A08 :                     
(1)  505/FFFFFFFFFFFF1A08 :                     .pick_id:
(1)  506/FFFFFFFFFFFF1A08 : 7E00                		moveq	#0,d7
(1)  507/FFFFFFFFFFFF1A0A : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  508/FFFFFFFFFFFF1A0E : 4E71                		nop
(1)  509/FFFFFFFFFFFF1A10 : 4E71                		nop
(1)  510/FFFFFFFFFFFF1A12 : 610A                		bsr	.read
(1)  511/FFFFFFFFFFFF1A14 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  512/FFFFFFFFFFFF1A18 : 4E71                		nop
(1)  513/FFFFFFFFFFFF1A1A : 4E71                		nop
(1)  514/FFFFFFFFFFFF1A1C : DE47                		add.w	d7,d7
(1)  515/FFFFFFFFFFFF1A1E :                     .read:
(1)  516/FFFFFFFFFFFF1A1E : 1A15                		move.b	(a5),d5
(1)  517/FFFFFFFFFFFF1A20 : 1C05                		move.b	d5,d6
(1)  518/FFFFFFFFFFFF1A22 : 0206 000C           		andi.b	#%1100,d6
(1)  519/FFFFFFFFFFFF1A26 : 6702                		beq.s	.step_1
(1)  520/FFFFFFFFFFFF1A28 : 5247                		addq.w	#1,d7
(1)  521/FFFFFFFFFFFF1A2A :                     .step_1:
(1)  522/FFFFFFFFFFFF1A2A : DE47                		add.w	d7,d7
(1)  523/FFFFFFFFFFFF1A2C : 1C05                		move.b	d5,d6
(1)  524/FFFFFFFFFFFF1A2E : 0246 0003           		andi.w	#%0011,d6
(1)  525/FFFFFFFFFFFF1A32 : 6702                		beq.s	.step_2
(1)  526/FFFFFFFFFFFF1A34 : 5247                		addq.w	#1,d7
(1)  527/FFFFFFFFFFFF1A36 :                     .step_2:
(1)  528/FFFFFFFFFFFF1A36 : 4E75                		rts
(1)  529/FFFFFFFFFFFF1A38 :                     
(1)  530/FFFFFFFFFFFF1A38 :                     ; ----------------------------------------
(1)  531/FFFFFFFFFFFF1A38 :                     ; Grab ID
(1)  532/FFFFFFFFFFFF1A38 :                     ; ----------------------------------------
(1)  533/FFFFFFFFFFFF1A38 :                     
(1)  534/FFFFFFFFFFFF1A38 :                     .list:
(1)  535/FFFFFFFFFFFF1A38 : FFCA                		dc.w .exit-.list	; $00
(1)  536/FFFFFFFFFFFF1A3A : FFCA                		dc.w .exit-.list
(1)  537/FFFFFFFFFFFF1A3C : FFCA                		dc.w .exit-.list
(1)  538/FFFFFFFFFFFF1A3E : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  539/FFFFFFFFFFFF1A40 : FFCA                		dc.w .exit-.list	; $04
(1)  540/FFFFFFFFFFFF1A42 : FFCA                		dc.w .exit-.list
(1)  541/FFFFFFFFFFFF1A44 : FFCA                		dc.w .exit-.list
(1)  542/FFFFFFFFFFFF1A46 : FFCA                		dc.w .exit-.list
(1)  543/FFFFFFFFFFFF1A48 : FFCA                		dc.w .exit-.list	; $08
(1)  544/FFFFFFFFFFFF1A4A : FFCA                		dc.w .exit-.list
(1)  545/FFFFFFFFFFFF1A4C : FFCA                		dc.w .exit-.list
(1)  546/FFFFFFFFFFFF1A4E : FFCA                		dc.w .exit-.list
(1)  547/FFFFFFFFFFFF1A50 : FFCA                		dc.w .exit-.list	; $0C
(1)  548/FFFFFFFFFFFF1A52 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  549/FFFFFFFFFFFF1A54 : FFCA                		dc.w .exit-.list
(1)  550/FFFFFFFFFFFF1A56 : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  551/FFFFFFFFFFFF1A58 :                     
(1)  552/FFFFFFFFFFFF1A58 :                     ; ----------------------------------------
(1)  553/FFFFFFFFFFFF1A58 :                     ; ID $03
(1)  554/FFFFFFFFFFFF1A58 :                     ;
(1)  555/FFFFFFFFFFFF1A58 :                     ; Mega Mouse
(1)  556/FFFFFFFFFFFF1A58 :                     ; ----------------------------------------
(1)  557/FFFFFFFFFFFF1A58 :                     
(1)  558/FFFFFFFFFFFF1A58 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  559/FFFFFFFFFFFF1A58 :                     ; *** NO RELEASED BITS ***
(1)  560/FFFFFFFFFFFF1A58 :                     
(1)  561/FFFFFFFFFFFF1A58 :                     .id_03:
(1)  562/FFFFFFFFFFFF1A58 : 1ABC 0020           		move.b	#$20,(a5)
(1)  563/FFFFFFFFFFFF1A5C : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  564/FFFFFFFFFFFF1A62 : 0815 0004           		btst	#4,(a5)
(1)  565/FFFFFFFFFFFF1A66 : 6700 0094           		beq.w	.invalid
(1)  566/FFFFFFFFFFFF1A6A : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  567/FFFFFFFFFFFF1A6E : 4E71                		nop
(1)  568/FFFFFFFFFFFF1A70 : 4E71                		nop
(1)  569/FFFFFFFFFFFF1A72 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  570/FFFFFFFFFFFF1A76 : 4E71                		nop
(1)  571/FFFFFFFFFFFF1A78 : 4E71                		nop
(1)  572/FFFFFFFFFFFF1A7A : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  573/FFFFFFFFFFFF1A7E : 4E71                		nop
(1)  574/FFFFFFFFFFFF1A80 : 4E71                		nop
(1)  575/FFFFFFFFFFFF1A82 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  576/FFFFFFFFFFFF1A84 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  577/FFFFFFFFFFFF1A88 : 4E71                		nop
(1)  578/FFFFFFFFFFFF1A8A : 4E71                		nop
(1)  579/FFFFFFFFFFFF1A8C : 1E15                		move.b	(a5),d7
(1)  580/FFFFFFFFFFFF1A8E : 0247 000F            		andi.w	#%1111,d7
(1)  581/FFFFFFFFFFFF1A92 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  582/FFFFFFFFFFFF1A96 : BF46                		eor.w	d7,d6
(1)  583/FFFFFFFFFFFF1A98 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  584/FFFFFFFFFFFF1A9C : CC47                		and.w	d7,d6
(1)  585/FFFFFFFFFFFF1A9E : 3D46 0004           		move.w	d6,on_press(a6)
(1)  586/FFFFFFFFFFFF1AA2 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  587/FFFFFFFFFFFF1AA6 : 4E71                		nop
(1)  588/FFFFFFFFFFFF1AA8 : 4E71                		nop
(1)  589/FFFFFFFFFFFF1AAA : 1E15                		move.b	(a5),d7
(1)  590/FFFFFFFFFFFF1AAC : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  591/FFFFFFFFFFFF1AB0 : 0247 000F           		andi.w	#%1111,d7
(1)  592/FFFFFFFFFFFF1AB4 : E94F                		lsl.w	#4,d7
(1)  593/FFFFFFFFFFFF1AB6 : 4E71                		nop
(1)  594/FFFFFFFFFFFF1AB8 : 1C15                		move.b	(a5),d6
(1)  595/FFFFFFFFFFFF1ABA : 0246 000F           		andi.w	#%1111,d6
(1)  596/FFFFFFFFFFFF1ABE : 8E46                		or.w	d6,d7
(1)  597/FFFFFFFFFFFF1AC0 : 0805 0000           		btst    #0,d5
(1)  598/FFFFFFFFFFFF1AC4 : 6704                		beq.s	.x_neg
(1)  599/FFFFFFFFFFFF1AC6 : 4407                		neg.b	d7
(1)  600/FFFFFFFFFFFF1AC8 : 4447                		neg.w	d7
(1)  601/FFFFFFFFFFFF1ACA :                     .x_neg:
(1)  602/FFFFFFFFFFFF1ACA : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  603/FFFFFFFFFFFF1ACE : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  604/FFFFFFFFFFFF1AD2 : 4E71                		nop
(1)  605/FFFFFFFFFFFF1AD4 : 4E71                		nop
(1)  606/FFFFFFFFFFFF1AD6 : 1E15                		move.b	(a5),d7
(1)  607/FFFFFFFFFFFF1AD8 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  608/FFFFFFFFFFFF1ADC : 0247 000F           		andi.w	#%1111,d7
(1)  609/FFFFFFFFFFFF1AE0 : E94F                		lsl.w	#4,d7
(1)  610/FFFFFFFFFFFF1AE2 : 4E71                		nop
(1)  611/FFFFFFFFFFFF1AE4 : 1C15                		move.b	(a5),d6
(1)  612/FFFFFFFFFFFF1AE6 : 0246 000F           		andi.w	#%1111,d6
(1)  613/FFFFFFFFFFFF1AEA : 8E46                		or.w	d6,d7
(1)  614/FFFFFFFFFFFF1AEC : 0805 0001           		btst    #1,d5
(1)  615/FFFFFFFFFFFF1AF0 : 6704                		beq.s	.y_neg
(1)  616/FFFFFFFFFFFF1AF2 : 4407                		neg.b	d7
(1)  617/FFFFFFFFFFFF1AF4 : 4447                		neg.w	d7
(1)  618/FFFFFFFFFFFF1AF6 :                     .y_neg:
(1)  619/FFFFFFFFFFFF1AF6 : 4447                		neg.w	d7		; Reverse Y
(1)  620/FFFFFFFFFFFF1AF8 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  621/FFFFFFFFFFFF1AFC :                     
(1)  622/FFFFFFFFFFFF1AFC :                     .invalid:
(1)  623/FFFFFFFFFFFF1AFC : 1ABC 0060           		move.b	#$60,(a5)
(1)  624/FFFFFFFFFFFF1B00 : 4E75                		rts
(1)  625/FFFFFFFFFFFF1B02 :                     
(1)  626/FFFFFFFFFFFF1B02 :                     ; ----------------------------------------
(1)  627/FFFFFFFFFFFF1B02 :                     ; ID $0D
(1)  628/FFFFFFFFFFFF1B02 :                     ;
(1)  629/FFFFFFFFFFFF1B02 :                     ; Normal controller: 3 button or 6 button.
(1)  630/FFFFFFFFFFFF1B02 :                     ; ----------------------------------------
(1)  631/FFFFFFFFFFFF1B02 :                     
(1)  632/FFFFFFFFFFFF1B02 :                     .id_0D:
(1)  633/FFFFFFFFFFFF1B02 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  634/FFFFFFFFFFFF1B06 : 4E71                		nop
(1)  635/FFFFFFFFFFFF1B08 : 4E71                		nop
(1)  636/FFFFFFFFFFFF1B0A : 1A15                		move.b	(a5),d5
(1)  637/FFFFFFFFFFFF1B0C : 0245 003F           		andi.w	#%00111111,d5
(1)  638/FFFFFFFFFFFF1B10 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  639/FFFFFFFFFFFF1B14 : 4E71                		nop
(1)  640/FFFFFFFFFFFF1B16 : 4E71                		nop
(1)  641/FFFFFFFFFFFF1B18 : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  642/FFFFFFFFFFFF1B1A : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  643/FFFFFFFFFFFF1B1C : 0247 00C0           		andi.w	#%11000000,d7
(1)  644/FFFFFFFFFFFF1B20 : 8E45                		or.w	d5,d7
(1)  645/FFFFFFFFFFFF1B22 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  646/FFFFFFFFFFFF1B26 : 4647                		not.w	d7
(1)  647/FFFFFFFFFFFF1B28 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  648/FFFFFFFFFFFF1B2C : 1805                		move.b	d5,d4
(1)  649/FFFFFFFFFFFF1B2E : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  650/FFFFFFFFFFFF1B32 : BF05                		eor.b	d7,d5
(1)  651/FFFFFFFFFFFF1B34 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  652/FFFFFFFFFFFF1B38 : CA07                		and.b	d7,d5
(1)  653/FFFFFFFFFFFF1B3A : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  654/FFFFFFFFFFFF1B3E : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  655/FFFFFFFFFFFF1B42 : 1A07                		move.b	d7,d5
(1)  656/FFFFFFFFFFFF1B44 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  657/FFFFFFFFFFFF1B46 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  658/FFFFFFFFFFFF1B4A : B905                		eor.b	d4,d5
(1)  659/FFFFFFFFFFFF1B4C : CA04                		and.b	d4,d5
(1)  660/FFFFFFFFFFFF1B4E : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  661/FFFFFFFFFFFF1B50 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  662/FFFFFFFFFFFF1B54 : 1D45 0007           		move.b	d5,on_release+1(a6)
(1)  663/FFFFFFFFFFFF1B58 : 0246 000F           		andi.w	#$F,d6
(1)  664/FFFFFFFFFFFF1B5C : E44E                		lsr.w	#2,d6
(1)  665/FFFFFFFFFFFF1B5E : 0246 0001           		andi.w	#1,d6
(1)  666/FFFFFFFFFFFF1B62 : 6724                		beq.s	.oldpad
(1)  667/FFFFFFFFFFFF1B64 : 4607                		not.b	d7
(1)  668/FFFFFFFFFFFF1B66 : 0247 000F            		andi.w	#%1111,d7
(1)  669/FFFFFFFFFFFF1B6A : 1C07                 		move.b	d7,d6
(1)  670/FFFFFFFFFFFF1B6C : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  671/FFFFFFFFFFFF1B70 : BB06                		eor.b	d5,d6
(1)  672/FFFFFFFFFFFF1B72 : CC05                		and.b	d5,d6
(1)  673/FFFFFFFFFFFF1B74 : 1D46 0006           		move.b	d6,on_release(a6)
(1)  674/FFFFFFFFFFFF1B78 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  675/FFFFFFFFFFFF1B7C : BF05                		eor.b	d7,d5
(1)  676/FFFFFFFFFFFF1B7E : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  677/FFFFFFFFFFFF1B82 : CA07                		and.b	d7,d5
(1)  678/FFFFFFFFFFFF1B84 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  679/FFFFFFFFFFFF1B88 :                     .oldpad:
(1)  680/FFFFFFFFFFFF1B88 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  681/FFFFFFFFFFFF1B8C : 4E75                		rts
(1)  683/FFFFFFFFFFFF1B8E :                     
(1)  684/FFFFFFFFFFFF1B8E :                     ; ============================================================
(1)  685/FFFFFFFFFFFF1B8E :                     ; --------------------------------------------------------
(1)  686/FFFFFFFFFFFF1B8E :                     ; System_SramInit
(1)  687/FFFFFFFFFFFF1B8E :                     ;
(1)  688/FFFFFFFFFFFF1B8E :                     ; Enable SRAM/BRAM support
(1)  689/FFFFFFFFFFFF1B8E :                     ;
(1)  690/FFFFFFFFFFFF1B8E :                     ; Input:
(1)  691/FFFFFFFFFFFF1B8E :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/FFFFFFFFFFFF1B8E :                     ;      dc.b "SAVE_NAME__",0
(1)  693/FFFFFFFFFFFF1B8E :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/FFFFFFFFFFFF1B8E :                     ;                            ; protection)
(1)  695/FFFFFFFFFFFF1B8E :                     ;      dc.w flags:
(1)  696/FFFFFFFFFFFF1B8E :                     ;            0 | Normal
(1)  697/FFFFFFFFFFFF1B8E :                     ;           -1 | Save protection
(1)  698/FFFFFFFFFFFF1B8E :                     ;
(1)  699/FFFFFFFFFFFF1B8E :                     ;
(1)  700/FFFFFFFFFFFF1B8E :                     ; Notes:
(1)  701/FFFFFFFFFFFF1B8E :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/FFFFFFFFFFFF1B8E :                     ;   your changes, then call System_SramSave to
(1)  703/FFFFFFFFFFFF1B8E :                     ;   save it into SRAM/BRAM.
(1)  704/FFFFFFFFFFFF1B8E :                     ;
(1)  705/FFFFFFFFFFFF1B8E :                     ; CD/CD32X ONLY:
(1)  706/FFFFFFFFFFFF1B8E :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/FFFFFFFFFFFF1B8E :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/FFFFFFFFFFFF1B8E :                     ;   OVERWRITE without warning any other save.
(1)  709/FFFFFFFFFFFF1B8E :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/FFFFFFFFFFFF1B8E :                     ;   PCM samples
(1)  711/FFFFFFFFFFFF1B8E :                     ; --------------------------------------------------------
(1)  712/FFFFFFFFFFFF1B8E :                     
(1)  713/FFFFFFFFFFFF1B8E :                     System_SramInit:
(1)  760/FFFFFFFFFFFF1B8E :                     
(1)  761/FFFFFFFFFFFF1B8E :                     	; ------------------------------------------------
(1)  762/FFFFFFFFFFFF1B8E :                     	; Cartridge SRAM
(1)  763/FFFFFFFFFFFF1B8E :                     	; ------------------------------------------------
(1)  764/FFFFFFFFFFFF1B8E : 4A78 F5F6           		tst.w	(RAM_SaveEnable).w
(1)  765/FFFFFFFFFFFF1B92 : 6634                		bne.s	.cant_use
(1)  766/FFFFFFFFFFFF1B94 : 31FC 0001 F5F6      		move.w	#1,(RAM_SaveEnable).w
(1)  767/FFFFFFFFFFFF1B9A :                     	; Make SAVE template
(1)  768/FFFFFFFFFFFF1B9A : 617E                		bsr	System_SramLoad
(1)  769/FFFFFFFFFFFF1B9C : 0CB8 5341 5645      		cmpi.l	#TAG_SRAMDATA,(RAM_SaveData).w
         FFFFFFFFFFFF1BA2 : E45C             
(1)  770/FFFFFFFFFFFF1BA4 : 6722                		beq.s	.cant_use
(1)  771/FFFFFFFFFFFF1BA6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  772/FFFFFFFFFFFF1BAA : 4DF8 E45C           		lea	(RAM_SaveData).w,a6
(1)  773/FFFFFFFFFFFF1BAE : 7C00                		moveq	#0,d6
(1)  774/FFFFFFFFFFFF1BB0 : 3E3C 00FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  775/FFFFFFFFFFFF1BB4 :                     .clr_sram:
(1)  776/FFFFFFFFFFFF1BB4 : 1CC6                		move.b	d6,(a6)+
(1)  777/FFFFFFFFFFFF1BB6 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  778/FFFFFFFFFFFF1BBA : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  779/FFFFFFFFFFFF1BBE : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE signature
         FFFFFFFFFFFF1BC4 : E45C             
(1)  780/FFFFFFFFFFFF1BC6 : 6104                		bsr	System_SramSave
(1)  782/FFFFFFFFFFFF1BC8 :                     .cant_use:
(1)  783/FFFFFFFFFFFF1BC8 : 6050                		bra	System_SramLoad
(1)  784/FFFFFFFFFFFF1BCA :                     .already_set:
(1)  785/FFFFFFFFFFFF1BCA : 4E75                		rts
(1)  786/FFFFFFFFFFFF1BCC :                     
(1)  787/FFFFFFFFFFFF1BCC :                     ; --------------------------------------------------------
(1)  788/FFFFFFFFFFFF1BCC :                     ; System_SramSave
(1)  789/FFFFFFFFFFFF1BCC :                     ;
(1)  790/FFFFFFFFFFFF1BCC :                     ; Returns:
(1)  791/FFFFFFFFFFFF1BCC :                     ; bcc | Save OK
(1)  792/FFFFFFFFFFFF1BCC :                     ; bcs | Save failed
(1)  793/FFFFFFFFFFFF1BCC :                     ; --------------------------------------------------------
(1)  794/FFFFFFFFFFFF1BCC :                     
(1)  795/FFFFFFFFFFFF1BCC :                     System_SramSave:
(1)  833/FFFFFFFFFFFF1BCC :                     
(1)  834/FFFFFFFFFFFF1BCC :                     	; ------------------------------------------------
(1)  835/FFFFFFFFFFFF1BCC :                     	; Cartridge SRAM
(1)  836/FFFFFFFFFFFF1BCC :                     	; ------------------------------------------------
(1)  837/FFFFFFFFFFFF1BCC : 4A78 F5F6           		tst.w	(RAM_SaveEnable).w
(1)  838/FFFFFFFFFFFF1BD0 : 6746                		beq.s	.cant_use_c
(1)  839/FFFFFFFFFFFF1BD2 : 40E7                		move.w	sr,-(sp)
(1)  840/FFFFFFFFFFFF1BD4 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  842/FFFFFFFFFFFF1BD8 : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
         FFFFFFFFFFFF1BDE : 5107             
(1)  844/FFFFFFFFFFFF1BE0 : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
         FFFFFFFFFFFF1BE6 : 30F1             
(1)  845/FFFFFFFFFFFF1BE8 : 4DF8 E45C           		lea	(RAM_SaveData).w,a6
(1)  846/FFFFFFFFFFFF1BEC : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  847/FFFFFFFFFFFF1BF2 : 3E3C 00FE           		move.w	#((SET_SRAMSIZE-1))-1,d7
(1)  848/FFFFFFFFFFFF1BF6 : 1C1E                .save:		move.b	(a6)+,d6
(1)  849/FFFFFFFFFFFF1BF8 : 1A86                		move.b	d6,(a5)
(1)  850/FFFFFFFFFFFF1BFA : DAFC 0002           		adda	#2,a5
(1)  851/FFFFFFFFFFFF1BFE : 51CF FFF6           		dbf	d7,.save
(1)  852/FFFFFFFFFFFF1C02 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
         FFFFFFFFFFFF1C08 : 30F1             
(1)  854/FFFFFFFFFFFF1C0A : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
         FFFFFFFFFFFF1C10 : 5107             
(1)  856/FFFFFFFFFFFF1C12 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  857/FFFFFFFFFFFF1C16 : 46DF                		move.w	(sp)+,sr
(1)  858/FFFFFFFFFFFF1C18 :                     .cant_use_c:
(1)  859/FFFFFFFFFFFF1C18 :                     	; ------------------------------------------------
(1)  861/FFFFFFFFFFFF1C18 : 4E75                		rts
(1)  862/FFFFFFFFFFFF1C1A :                     
(1)  863/FFFFFFFFFFFF1C1A :                     ; --------------------------------------------------------
(1)  864/FFFFFFFFFFFF1C1A :                     ; System_SramLoad
(1)  865/FFFFFFFFFFFF1C1A :                     ;
(1)  866/FFFFFFFFFFFF1C1A :                     ; Returns:
(1)  867/FFFFFFFFFFFF1C1A :                     ; bcc | Save OK
(1)  868/FFFFFFFFFFFF1C1A :                     ; bcs | Save not found
(1)  869/FFFFFFFFFFFF1C1A :                     ; --------------------------------------------------------
(1)  870/FFFFFFFFFFFF1C1A :                     
(1)  871/FFFFFFFFFFFF1C1A :                     System_SramLoad:
(1)  903/FFFFFFFFFFFF1C1A :                     
(1)  904/FFFFFFFFFFFF1C1A :                     	; ------------------------------------------------
(1)  905/FFFFFFFFFFFF1C1A :                     	; Cartridge SRAM
(1)  906/FFFFFFFFFFFF1C1A :                     	; ------------------------------------------------
(1)  907/FFFFFFFFFFFF1C1A : 4A78 F5F6           		tst.w	(RAM_SaveEnable).w
(1)  908/FFFFFFFFFFFF1C1E : 674A                		beq.s	.cant_use_c
(1)  909/FFFFFFFFFFFF1C20 : 40E7                		move.w	sr,-(sp)
(1)  910/FFFFFFFFFFFF1C22 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  911/FFFFFFFFFFFF1C26 : 007C 0700           		ori.w	#$0700,sr
(1)  913/FFFFFFFFFFFF1C2A : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
         FFFFFFFFFFFF1C30 : 5107             
(1)  915/FFFFFFFFFFFF1C32 : 13FC 0001 00A1      		move.b	#1,(md_bank_sram).l
         FFFFFFFFFFFF1C38 : 30F1             
(1)  916/FFFFFFFFFFFF1C3A : 4DF8 E45C           		lea	(RAM_SaveData).w,a6
(1)  917/FFFFFFFFFFFF1C3E : 4BF9 0020 0003      		lea	($200003).l,a5
(1)  918/FFFFFFFFFFFF1C44 : 3E3C 00FE           		move.w	#((SET_SRAMSIZE-1))-1,d7
(1)  919/FFFFFFFFFFFF1C48 :                     .load:
(1)  920/FFFFFFFFFFFF1C48 : 1C15                		move.b	(a5),d6
(1)  921/FFFFFFFFFFFF1C4A : 1CC6                		move.b	d6,(a6)+
(1)  922/FFFFFFFFFFFF1C4C : DAFC 0002           		adda	#2,a5
(1)  923/FFFFFFFFFFFF1C50 : 51CF FFF6           		dbf	d7,.load
(1)  924/FFFFFFFFFFFF1C54 :                     .dont_reset:
(1)  925/FFFFFFFFFFFF1C54 : 13FC 0000 00A1      		move.b	#0,(md_bank_sram).l
         FFFFFFFFFFFF1C5A : 30F1             
(1)  927/FFFFFFFFFFFF1C5C : 08B9 0000 00A1      		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
         FFFFFFFFFFFF1C62 : 5107             
(1)  929/FFFFFFFFFFFF1C64 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  930/FFFFFFFFFFFF1C68 : 46DF                		move.w	(sp)+,sr
(1)  931/FFFFFFFFFFFF1C6A :                     .cant_use_c:
(1)  932/FFFFFFFFFFFF1C6A :                     	; ------------------------------------------------
(1)  934/FFFFFFFFFFFF1C6A : 4E75                		rts
(1)  935/FFFFFFFFFFFF1C6C :                     
(1)  936/FFFFFFFFFFFF1C6C :                     ; ============================================================
(1)  937/FFFFFFFFFFFF1C6C :                     ; --------------------------------------------------------
(1)  938/FFFFFFFFFFFF1C6C :                     ; System_Default
(1)  939/FFFFFFFFFFFF1C6C :                     ;
(1)  940/FFFFFFFFFFFF1C6C :                     ; Initializes current screen mode
(1)  941/FFFFFFFFFFFF1C6C :                     ;
(1)  942/FFFFFFFFFFFF1C6C :                     ; Uses:
(1)  943/FFFFFFFFFFFF1C6C :                     ; ALL
(1)  944/FFFFFFFFFFFF1C6C :                     ; --------------------------------------------------------
(1)  945/FFFFFFFFFFFF1C6C :                     
(1)  946/FFFFFFFFFFFF1C6C :                     System_Default:
(1)  947/FFFFFFFFFFFF1C6C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/FFFFFFFFFFFF1C70 : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/FFFFFFFFFFFF1C74 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/FFFFFFFFFFFF1C78 : 7C00                		moveq	#0,d6
(1)  951/FFFFFFFFFFFF1C7A :                     .clr_loop:
(1)  952/FFFFFFFFFFFF1C7A : 1CC6                		move.b	d6,(a6)+
(1)  953/FFFFFFFFFFFF1C7C : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/FFFFFFFFFFFF1C80 : 6100 E9D6           		bsr	Video_Clear
(1)  955/FFFFFFFFFFFF1C84 : 6100 E68E           		bsr	Video_Default
(1)  956/FFFFFFFFFFFF1C88 : 6000 03E2           		bra	Object_Init			; Reset all objects
(1)  957/FFFFFFFFFFFF1C8C :                     
(1)  958/FFFFFFFFFFFF1C8C :                     ; ====================================================================
(1)  959/FFFFFFFFFFFF1C8C :                     ; ----------------------------------------------------------------
(1)  960/FFFFFFFFFFFF1C8C :                     ; Default interrupts
(1)  961/FFFFFFFFFFFF1C8C :                     ; ----------------------------------------------------------------
(1)  962/FFFFFFFFFFFF1C8C :                     
(1)  963/FFFFFFFFFFFF1C8C :                     ; --------------------------------------------------------
(1)  964/FFFFFFFFFFFF1C8C :                     ; VBlank
(1)  965/FFFFFFFFFFFF1C8C :                     ; --------------------------------------------------------
(1)  966/FFFFFFFFFFFF1C8C :                     
(1)  967/FFFFFFFFFFFF1C8C :                     VInt_Default:
(1)  968/FFFFFFFFFFFF1C8C :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/FFFFFFFFFFFF1C8C :                     ; 		bsr	System_Input
(1)  970/FFFFFFFFFFFF1C8C :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/FFFFFFFFFFFF1C8C :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/FFFFFFFFFFFF1C8C : 4E73                		rte
(1)  973/FFFFFFFFFFFF1C8E :                     
(1)  974/FFFFFFFFFFFF1C8E :                     ; --------------------------------------------------------
(1)  975/FFFFFFFFFFFF1C8E :                     ; HBlank
(1)  976/FFFFFFFFFFFF1C8E :                     ; --------------------------------------------------------
(1)  977/FFFFFFFFFFFF1C8E :                     
(1)  978/FFFFFFFFFFFF1C8E :                     HInt_Default:
(1)  979/FFFFFFFFFFFF1C8E : 4E73                		rte
(1)  980/FFFFFFFFFFFF1C90 :                     
(1)  981/FFFFFFFFFFFF1C90 :                     ; --------------------------------------------------------
(1)  982/FFFFFFFFFFFF1C90 :                     ; External interrupt
(1)  983/FFFFFFFFFFFF1C90 :                     ; --------------------------------------------------------
(1)  984/FFFFFFFFFFFF1C90 :                     
(1)  985/FFFFFFFFFFFF1C90 :                     ExtInt_Default:
(1)  986/FFFFFFFFFFFF1C90 : 4E73                		rte
(1)  987/FFFFFFFFFFFF1C92 :                     
(1)  988/FFFFFFFFFFFF1C92 :                     ; ====================================================================
(1)  989/FFFFFFFFFFFF1C92 :                     ; ------------------------------------------------------------
(1)  990/FFFFFFFFFFFF1C92 :                     ; Subroutines
(1)  991/FFFFFFFFFFFF1C92 :                     ; ------------------------------------------------------------
(1)  992/FFFFFFFFFFFF1C92 :                     
(1)  993/FFFFFFFFFFFF1C92 :                     ; --------------------------------------------------------
(1)  994/FFFFFFFFFFFF1C92 :                     ; System_Random, System_Random_Seed
(1)  995/FFFFFFFFFFFF1C92 :                     ;
(1)  996/FFFFFFFFFFFF1C92 :                     ; Generate random value
(1)  997/FFFFFFFFFFFF1C92 :                     ;
(1)  998/FFFFFFFFFFFF1C92 :                     ; Input:
(1)  999/FFFFFFFFFFFF1C92 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/FFFFFFFFFFFF1C92 :                     ;
(1) 1001/FFFFFFFFFFFF1C92 :                     ; Returns:
(1) 1002/FFFFFFFFFFFF1C92 :                     ; d0.l | Result value
(1) 1003/FFFFFFFFFFFF1C92 :                     ; --------------------------------------------------------
(1) 1004/FFFFFFFFFFFF1C92 :                     
(1) 1005/FFFFFFFFFFFF1C92 :                     System_Random_Seed:
(1) 1006/FFFFFFFFFFFF1C92 : 2F04                		move.l	d4,-(sp)
(1) 1007/FFFFFFFFFFFF1C94 : 2800                		move.l	d0,d4
(1) 1008/FFFFFFFFFFFF1C96 : 6114                		bsr	sysRnd_MkValue
(1) 1009/FFFFFFFFFFFF1C98 : 281F                		move.l	(sp)+,d4
(1) 1010/FFFFFFFFFFFF1C9A : 4E75                		rts
(1) 1011/FFFFFFFFFFFF1C9C :                     System_Random:
(1) 1012/FFFFFFFFFFFF1C9C : 2F04                		move.l	d4,-(sp)
(1) 1013/FFFFFFFFFFFF1C9E : 2838 F5E0           		move.l	(RAM_SysRandom).w,d4
(1) 1014/FFFFFFFFFFFF1CA2 : 6108                		bsr	sysRnd_MkValue
(1) 1015/FFFFFFFFFFFF1CA4 : 21C4 F5E0           		move.l	d4,(RAM_SysRandom).w
(1) 1016/FFFFFFFFFFFF1CA8 : 281F                		move.l	(sp)+,d4
(1) 1017/FFFFFFFFFFFF1CAA : 4E75                		rts
(1) 1018/FFFFFFFFFFFF1CAC :                     sysRnd_MkValue:
(1) 1019/FFFFFFFFFFFF1CAC : 4A84                		tst.l	d4
(1) 1020/FFFFFFFFFFFF1CAE : 660E                		bne.s	.has_seed
(1) 1021/FFFFFFFFFFFF1CB0 : 2838 E43C           		move.l	(RAM_FrameCount).w,d4
(1) 1022/FFFFFFFFFFFF1CB4 : E1BC                		rol.l	d0,d4
(1) 1023/FFFFFFFFFFFF1CB6 : E2BC                		ror.l	d1,d4
(1) 1024/FFFFFFFFFFFF1CB8 : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/FFFFFFFFFFFF1CBE :                     .has_seed:
(1) 1026/FFFFFFFFFFFF1CBE : 2004                		move.l	d4,d0
(1) 1027/FFFFFFFFFFFF1CC0 : E484                		asr.l	#2,d4
(1) 1028/FFFFFFFFFFFF1CC2 : D880                		add.l	d0,d4
(1) 1029/FFFFFFFFFFFF1CC4 : E79C                		rol.l	#3,d4
(1) 1030/FFFFFFFFFFFF1CC6 : D880                		add.l	d0,d4
(1) 1031/FFFFFFFFFFFF1CC8 : 3004                		move.w	d4,d0
(1) 1032/FFFFFFFFFFFF1CCA : 4844                		swap	d4
(1) 1033/FFFFFFFFFFFF1CCC : D044                		add.w	d4,d0
(1) 1034/FFFFFFFFFFFF1CCE : 3800                		move.w	d0,d4
(1) 1035/FFFFFFFFFFFF1CD0 : E0BC                		ror.l	d0,d4
(1) 1036/FFFFFFFFFFFF1CD2 : 4844                		swap	d4
(1) 1037/FFFFFFFFFFFF1CD4 : 4E75                		rts
(1) 1038/FFFFFFFFFFFF1CD6 :                     
(1) 1039/FFFFFFFFFFFF1CD6 :                     ; --------------------------------------------------------
(1) 1040/FFFFFFFFFFFF1CD6 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/FFFFFFFFFFFF1CD6 :                     ;
(1) 1042/FFFFFFFFFFFF1CD6 :                     ; Pick a random number using a maximum value,
(1) 1043/FFFFFFFFFFFF1CD6 :                     ; uses System_Random
(1) 1044/FFFFFFFFFFFF1CD6 :                     ;
(1) 1045/FFFFFFFFFFFF1CD6 :                     ; Input:
(1) 1046/FFFFFFFFFFFF1CD6 :                     ; d0.l | Maximum number to use + 1
(1) 1047/FFFFFFFFFFFF1CD6 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/FFFFFFFFFFFF1CD6 :                     ;
(1) 1049/FFFFFFFFFFFF1CD6 :                     ; Returns:
(1) 1050/FFFFFFFFFFFF1CD6 :                     ; d0.w | Output value
(1) 1051/FFFFFFFFFFFF1CD6 :                     ; --------------------------------------------------------
(1) 1052/FFFFFFFFFFFF1CD6 :                     
(1) 1053/FFFFFFFFFFFF1CD6 :                     System_DiceRoll_Seed:
(1) 1054/FFFFFFFFFFFF1CD6 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/FFFFFFFFFFFF1CDA : 2A00                		move.l	d0,d5
(1) 1056/FFFFFFFFFFFF1CDC : 2801                		move.l	d1,d4
(1) 1057/FFFFFFFFFFFF1CDE : 61B2                		bsr	System_Random_Seed
(1) 1058/FFFFFFFFFFFF1CE0 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/FFFFFFFFFFFF1CE6 : C0C5                		mulu.w	d5,d0
(1) 1060/FFFFFFFFFFFF1CE8 : 4840                		swap	d0
(1) 1061/FFFFFFFFFFFF1CEA : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/FFFFFFFFFFFF1CF0 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/FFFFFFFFFFFF1CF4 : 4E75                		rts
(1) 1064/FFFFFFFFFFFF1CF6 :                     
(1) 1065/FFFFFFFFFFFF1CF6 :                     System_DiceRoll:
(1) 1066/FFFFFFFFFFFF1CF6 : 2F04                		move.l	d4,-(sp)
(1) 1067/FFFFFFFFFFFF1CF8 : 2800                		move.l	d0,d4
(1) 1068/FFFFFFFFFFFF1CFA : 61A0                		bsr	System_Random
(1) 1069/FFFFFFFFFFFF1CFC : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/FFFFFFFFFFFF1D02 : C0C4                		mulu.w	d4,d0
(1) 1071/FFFFFFFFFFFF1D04 : 4840                		swap	d0
(1) 1072/FFFFFFFFFFFF1D06 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/FFFFFFFFFFFF1D0C : 281F                		move.l	(sp)+,d4
(1) 1074/FFFFFFFFFFFF1D0E : 4E75                		rts
(1) 1075/FFFFFFFFFFFF1D10 :                     
(1) 1076/FFFFFFFFFFFF1D10 :                     ; --------------------------------------------------------
(1) 1077/FFFFFFFFFFFF1D10 :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/FFFFFFFFFFFF1D10 :                     ;
(1) 1079/FFFFFFFFFFFF1D10 :                     ; Get Sine or Cosine value
(1) 1080/FFFFFFFFFFFF1D10 :                     ;
(1) 1081/FFFFFFFFFFFF1D10 :                     ; Input:
(1) 1082/FFFFFFFFFFFF1D10 :                     ; d0.w | Tan value: 0-511
(1) 1083/FFFFFFFFFFFF1D10 :                     ;
(1) 1084/FFFFFFFFFFFF1D10 :                     ; Returns:
(1) 1085/FFFFFFFFFFFF1D10 :                     ; d1.w | Result
(1) 1086/FFFFFFFFFFFF1D10 :                     ; --------------------------------------------------------
(1) 1087/FFFFFFFFFFFF1D10 :                     
(1) 1088/FFFFFFFFFFFF1D10 :                     System_SineWave_Cos:
(1) 1089/FFFFFFFFFFFF1D10 : 2F07                		move.l	d7,-(sp)
(1) 1090/FFFFFFFFFFFF1D12 : 3E00                		move.w	d0,d7
(1) 1091/FFFFFFFFFFFF1D14 : 0647 0080           		addi.w  #$80,d7
(1) 1092/FFFFFFFFFFFF1D18 : 6004                		bra	sys_SineWave
(1) 1093/FFFFFFFFFFFF1D1A :                     System_SineWave:
(1) 1094/FFFFFFFFFFFF1D1A : 2F07                		move.l	d7,-(sp)
(1) 1095/FFFFFFFFFFFF1D1C : 3E00                		move.w	d0,d7
(1) 1096/FFFFFFFFFFFF1D1E :                     sys_SineWave:
(1) 1097/FFFFFFFFFFFF1D1E : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/FFFFFFFFFFFF1D22 : 3207                		move.w	d7,d1
(1) 1099/FFFFFFFFFFFF1D24 : 0807 0007           		btst	#7,d7
(1) 1100/FFFFFFFFFFFF1D28 : 6702                		beq.s	.loc_7EFA
(1) 1101/FFFFFFFFFFFF1D2A : 4641                		not.w	d1
(1) 1102/FFFFFFFFFFFF1D2C :                     .loc_7EFA:
(1) 1103/FFFFFFFFFFFF1D2C : 0241 007F           		andi.w  #$7F,d1
(1) 1104/FFFFFFFFFFFF1D30 : D241                		add.w	d1,d1
(1) 1105/FFFFFFFFFFFF1D32 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/FFFFFFFFFFFF1D36 : 0807 0008           		btst    #8,d7
(1) 1107/FFFFFFFFFFFF1D3A : 6702                		beq.s   .loc_7F0C
(1) 1108/FFFFFFFFFFFF1D3C : 4441                		neg.w   d1
(1) 1109/FFFFFFFFFFFF1D3E :                     .loc_7F0C:
(1) 1110/FFFFFFFFFFFF1D3E : 48C1                		ext.l	d1
(1) 1111/FFFFFFFFFFFF1D40 : 2E1F                		move.l (sp)+,d7
(1) 1112/FFFFFFFFFFFF1D42 : 4E75                		rts
(1) 1113/FFFFFFFFFFFF1D44 :                     
(1) 1114/FFFFFFFFFFFF1D44 :                     .sine_data:
(1) 1115/FFFFFFFFFFFF1D44 :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/FFFFFFFFFFFF1E44 :                     		align 2
(1) 1117/FFFFFFFFFFFF1E46 :                     
(1) 1118/FFFFFFFFFFFF1E46 :                     ; --------------------------------------------------------
(1) 1119/FFFFFFFFFFFF1E46 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/FFFFFFFFFFFF1E46 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/FFFFFFFFFFFF1E46 :                     ;
(1) 1122/FFFFFFFFFFFF1E46 :                     ; Increment/Decrement BCD value
(1) 1123/FFFFFFFFFFFF1E46 :                     ; for Scores, Lives, and such.
(1) 1124/FFFFFFFFFFFF1E46 :                     ;
(1) 1125/FFFFFFFFFFFF1E46 :                     ; Input:
(1) 1126/FFFFFFFFFFFF1E46 :                     ; d0.? | BCD value input
(1) 1127/FFFFFFFFFFFF1E46 :                     ; d1.l | Increment/Decrement by
(1) 1128/FFFFFFFFFFFF1E46 :                     ;
(1) 1129/FFFFFFFFFFFF1E46 :                     ; Returns:
(1) 1130/FFFFFFFFFFFF1E46 :                     ; d0.? | BCD value output
(1) 1131/FFFFFFFFFFFF1E46 :                     ; --------------------------------------------------------
(1) 1132/FFFFFFFFFFFF1E46 :                     
(1) 1133/FFFFFFFFFFFF1E46 :                     ; TODO: An overflow check
(1) 1134/FFFFFFFFFFFF1E46 :                     
(1) 1135/FFFFFFFFFFFF1E46 :                     System_BCD_SubB:
(1) 1136/FFFFFFFFFFFF1E46 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/FFFFFFFFFFFF1E4C : 6006                		bra.s	System_BCD_SubL
(1) 1138/FFFFFFFFFFFF1E4E :                     System_BCD_SubW:
(1) 1139/FFFFFFFFFFFF1E4E : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/FFFFFFFFFFFF1E54 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/FFFFFFFFFFFF1E54 :                     System_BCD_SubL:
(1) 1142/FFFFFFFFFFFF1E54 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/FFFFFFFFFFFF1E58 : 613C                		bsr	sysBCD_SpOut
(1) 1144/FFFFFFFFFFFF1E5A : 023C 0000           		and	#0,ccr
(1) 1145/FFFFFFFFFFFF1E5E : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/FFFFFFFFFFFF1E60 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/FFFFFFFFFFFF1E62 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/FFFFFFFFFFFF1E64 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/FFFFFFFFFFFF1E66 : 2016                		move.l	(a6),d0
(1) 1150/FFFFFFFFFFFF1E68 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/FFFFFFFFFFFF1E6C : 4E75                		rts
(1) 1152/FFFFFFFFFFFF1E6E :                     System_BCD_AddB:
(1) 1153/FFFFFFFFFFFF1E6E : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/FFFFFFFFFFFF1E74 : 6006                		bra.s	System_BCD_AddL
(1) 1155/FFFFFFFFFFFF1E76 :                     System_BCD_AddW:
(1) 1156/FFFFFFFFFFFF1E76 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/FFFFFFFFFFFF1E7C :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/FFFFFFFFFFFF1E7C :                     System_BCD_AddL:
(1) 1159/FFFFFFFFFFFF1E7C : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/FFFFFFFFFFFF1E80 : 6114                		bsr	sysBCD_SpOut
(1) 1161/FFFFFFFFFFFF1E82 : 023C 0000           		and	#0,ccr
(1) 1162/FFFFFFFFFFFF1E86 : CD0D                		abcd	-(a5),-(a6)
(1) 1163/FFFFFFFFFFFF1E88 : CD0D                		abcd	-(a5),-(a6)
(1) 1164/FFFFFFFFFFFF1E8A : CD0D                		abcd	-(a5),-(a6)
(1) 1165/FFFFFFFFFFFF1E8C : CD0D                		abcd	-(a5),-(a6)
(1) 1166/FFFFFFFFFFFF1E8E : 2016                		move.l	(a6),d0
(1) 1167/FFFFFFFFFFFF1E90 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/FFFFFFFFFFFF1E94 : 4E75                		rts
(1) 1169/FFFFFFFFFFFF1E96 :                     sysBCD_SpOut:
(1) 1170/FFFFFFFFFFFF1E96 : 598F                		subq.l	#4,sp
(1) 1171/FFFFFFFFFFFF1E98 : 2C4F                		move.l	sp,a6
(1) 1172/FFFFFFFFFFFF1E9A : 598F                		subq.l	#4,sp
(1) 1173/FFFFFFFFFFFF1E9C : 2A4F                		move.l	sp,a5
(1) 1174/FFFFFFFFFFFF1E9E : 2C80                		move.l	d0,(a6)
(1) 1175/FFFFFFFFFFFF1EA0 : 2A81                		move.l	d1,(a5)
(1) 1176/FFFFFFFFFFFF1EA2 : DCFC 0004           		adda	#4,a6
(1) 1177/FFFFFFFFFFFF1EA6 : DAFC 0004           		adda	#4,a5
(1) 1178/FFFFFFFFFFFF1EAA : 508F                		addq.l	#8,sp
(1) 1179/FFFFFFFFFFFF1EAC : 4E75                		rts
(1) 1180/FFFFFFFFFFFF1EAE :                     
(1) 1181/FFFFFFFFFFFF1EAE :                     ; --------------------------------------------------------
(1) 1182/FFFFFFFFFFFF1EAE :                     ; System_SetIntJumps
(1) 1183/FFFFFFFFFFFF1EAE :                     ;
(1) 1184/FFFFFFFFFFFF1EAE :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/FFFFFFFFFFFF1EAE :                     ; generated by VDP
(1) 1186/FFFFFFFFFFFF1EAE :                     ;
(1) 1187/FFFFFFFFFFFF1EAE :                     ; Input:
(1) 1188/FFFFFFFFFFFF1EAE :                     ; d0.l | New VBlank location
(1) 1189/FFFFFFFFFFFF1EAE :                     ; d1.l | New HBlank location
(1) 1190/FFFFFFFFFFFF1EAE :                     ; d2.l | New External location
(1) 1191/FFFFFFFFFFFF1EAE :                     ;
(1) 1192/FFFFFFFFFFFF1EAE :                     ; Notes:
(1) 1193/FFFFFFFFFFFF1EAE :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/FFFFFFFFFFFF1EAE :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/FFFFFFFFFFFF1EAE :                     ; --------------------------------------------------------
(1) 1196/FFFFFFFFFFFF1EAE :                     
(1) 1197/FFFFFFFFFFFF1EAE :                     System_SetIntJumps:
(1) 1198/FFFFFFFFFFFF1EAE : 4A80                		tst.l	d0
(1) 1199/FFFFFFFFFFFF1EB0 : 6704                		beq.s	.no_vint
(1) 1203/FFFFFFFFFFFF1EB2 : 21C0 F5E6            		move.l	d0,(RAM_VBlankJump+2).w
(1) 1205/FFFFFFFFFFFF1EB6 :                     .no_vint:
(1) 1206/FFFFFFFFFFFF1EB6 : 4A81                		tst.l	d1
(1) 1207/FFFFFFFFFFFF1EB8 : 6704                		beq.s	.no_hint
(1) 1211/FFFFFFFFFFFF1EBA : 21C1 F5EC            		move.l	d1,(RAM_HBlankJump+2).w
(1) 1213/FFFFFFFFFFFF1EBE :                     .no_hint:
(1) 1214/FFFFFFFFFFFF1EBE : 4A82                		tst.l	d2
(1) 1215/FFFFFFFFFFFF1EC0 : 6704                		beq.s	.no_exint
(1) 1219/FFFFFFFFFFFF1EC2 : 21C2 F5F2            		move.l	d2,(RAM_ExternalJump+2).w
(1) 1221/FFFFFFFFFFFF1EC6 :                     .no_exint:
(1) 1222/FFFFFFFFFFFF1EC6 : 4E75                		rts
(1) 1223/FFFFFFFFFFFF1EC8 :                     
(1) 1224/FFFFFFFFFFFF1EC8 :                     ; ====================================================================
(1) 1225/FFFFFFFFFFFF1EC8 :                     ; ----------------------------------------------------------------
(1) 1226/FFFFFFFFFFFF1EC8 :                     ; SEGA CD / CD32X ONLY
(1) 1227/FFFFFFFFFFFF1EC8 :                     ; ----------------------------------------------------------------
(1) 1228/FFFFFFFFFFFF1EC8 :                     
(1) 1229/FFFFFFFFFFFF1EC8 :                     ; --------------------------------------------------------
(1) 1230/FFFFFFFFFFFF1EC8 :                     ; System_MdMcd_Interrupt
(1) 1231/FFFFFFFFFFFF1EC8 :                     ;
(1) 1232/FFFFFFFFFFFF1EC8 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/FFFFFFFFFFFF1EC8 :                     ; VBlank.
(1) 1234/FFFFFFFFFFFF1EC8 :                     ; --------------------------------------------------------
(1) 1235/FFFFFFFFFFFF1EC8 :                     
(1) 1236/FFFFFFFFFFFF1EC8 :                     System_MdMcd_Interrupt:
(1) 1237/FFFFFFFFFFFF1EC8 : 2F07                		move.l	d7,-(sp)
(1) 1238/FFFFFFFFFFFF1ECA :                     ; .wait_first:
(1) 1239/FFFFFFFFFFFF1ECA :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/FFFFFFFFFFFF1ECA :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/FFFFFFFFFFFF1ECA :                     ; 		andi.w	#$C0,d7
(1) 1242/FFFFFFFFFFFF1ECA :                     ; 		cmpi.w	#$C0,d7
(1) 1243/FFFFFFFFFFFF1ECA :                     ; 		beq.s	.wait_first
(1) 1244/FFFFFFFFFFFF1ECA :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/FFFFFFFFFFFF1ECA : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
         FFFFFFFFFFFF1ED0 : 2000             
(1) 1246/FFFFFFFFFFFF1ED2 : 2E1F                		move.l	(sp)+,d7
(1) 1247/FFFFFFFFFFFF1ED4 : 4E75                		rts
(1) 1248/FFFFFFFFFFFF1ED6 :                     
(1) 1249/FFFFFFFFFFFF1ED6 :                     ; --------------------------------------------------------
(1) 1250/FFFFFFFFFFFF1ED6 :                     ; System_MdMcd_SubWait
(1) 1251/FFFFFFFFFFFF1ED6 :                     ;
(1) 1252/FFFFFFFFFFFF1ED6 :                     ; Waits until Sub-CPU finishes.
(1) 1253/FFFFFFFFFFFF1ED6 :                     ;
(1) 1254/FFFFFFFFFFFF1ED6 :                     ; Uses:
(1) 1255/FFFFFFFFFFFF1ED6 :                     ; d7
(1) 1256/FFFFFFFFFFFF1ED6 :                     ; --------------------------------------------------------
(1) 1257/FFFFFFFFFFFF1ED6 :                     
(1) 1258/FFFFFFFFFFFF1ED6 :                     System_MdMcd_SubWait:
(1) 1263/FFFFFFFFFFFF1ED6 : 4E75                		rts
(1) 1264/FFFFFFFFFFFF1ED8 :                     
(1) 1265/FFFFFFFFFFFF1ED8 :                     ; --------------------------------------------------------
(1) 1266/FFFFFFFFFFFF1ED8 :                     ; System_MdMcd_SubEnter
(1) 1267/FFFFFFFFFFFF1ED8 :                     ;
(1) 1268/FFFFFFFFFFFF1ED8 :                     ; Waits until Sub-CPU starts.
(1) 1269/FFFFFFFFFFFF1ED8 :                     ;
(1) 1270/FFFFFFFFFFFF1ED8 :                     ; Uses:
(1) 1271/FFFFFFFFFFFF1ED8 :                     ; d7
(1) 1272/FFFFFFFFFFFF1ED8 :                     ; --------------------------------------------------------
(1) 1273/FFFFFFFFFFFF1ED8 :                     
(1) 1274/FFFFFFFFFFFF1ED8 :                     System_MdMcd_SubEnter:
(1) 1279/FFFFFFFFFFFF1ED8 : 4E75                		rts
(1) 1280/FFFFFFFFFFFF1EDA :                     
(1) 1281/FFFFFFFFFFFF1EDA :                     ; --------------------------------------------------------
(1) 1282/FFFFFFFFFFFF1EDA :                     ; System_MdMcd_SubTask
(1) 1283/FFFFFFFFFFFF1EDA :                     ;
(1) 1284/FFFFFFFFFFFF1EDA :                     ; Request task to Sub-CPU
(1) 1285/FFFFFFFFFFFF1EDA :                     ;
(1) 1286/FFFFFFFFFFFF1EDA :                     ; Input:
(1) 1287/FFFFFFFFFFFF1EDA :                     ; d0.b | Task number
(1) 1288/FFFFFFFFFFFF1EDA :                     ;
(1) 1289/FFFFFFFFFFFF1EDA :                     ; Uses:
(1) 1290/FFFFFFFFFFFF1EDA :                     ; d7/a6
(1) 1291/FFFFFFFFFFFF1EDA :                     ;
(1) 1292/FFFFFFFFFFFF1EDA :                     ; Notes:
(1) 1293/FFFFFFFFFFFF1EDA :                     ; This exits without waiting SUB to finish,
(1) 1294/FFFFFFFFFFFF1EDA :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/FFFFFFFFFFFF1EDA :                     ; --------------------------------------------------------
(1) 1296/FFFFFFFFFFFF1EDA :                     
(1) 1297/FFFFFFFFFFFF1EDA :                     System_MdMcd_SubTask:
(1) 1322/FFFFFFFFFFFF1EDA : 4E75                		rts
(1) 1323/FFFFFFFFFFFF1EDC :                     
(1) 1324/FFFFFFFFFFFF1EDC :                     ; --------------------------------------------------------
(1) 1325/FFFFFFFFFFFF1EDC :                     ; System_MdMcd_WaitWRAM
(1) 1326/FFFFFFFFFFFF1EDC :                     ;
(1) 1327/FFFFFFFFFFFF1EDC :                     ; Wait for Word-RAM permission.
(1) 1328/FFFFFFFFFFFF1EDC :                     ; --------------------------------------------------------
(1) 1329/FFFFFFFFFFFF1EDC :                     
(1) 1330/FFFFFFFFFFFF1EDC :                     System_MdMcd_WaitWRAM:
(1) 1331/FFFFFFFFFFFF1EDC : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1EE2 : 2003             
(1) 1332/FFFFFFFFFFFF1EE4 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/FFFFFFFFFFFF1EE6 : 4E75                		rts
(1) 1334/FFFFFFFFFFFF1EE8 :                     
(1) 1335/FFFFFFFFFFFF1EE8 :                     ; --------------------------------------------------------
(1) 1336/FFFFFFFFFFFF1EE8 :                     ; System_MdMcd_CheckWRAM
(1) 1337/FFFFFFFFFFFF1EE8 :                     ;
(1) 1338/FFFFFFFFFFFF1EE8 :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/FFFFFFFFFFFF1EE8 :                     ;
(1) 1340/FFFFFFFFFFFF1EE8 :                     ; Returns:
(1) 1341/FFFFFFFFFFFF1EE8 :                     ; beq | Word-RAM is available
(1) 1342/FFFFFFFFFFFF1EE8 :                     ; bne | Word-RAM is locked
(1) 1343/FFFFFFFFFFFF1EE8 :                     ; --------------------------------------------------------
(1) 1344/FFFFFFFFFFFF1EE8 :                     
(1) 1345/FFFFFFFFFFFF1EE8 :                     System_MdMcd_CheckWRAM:
(1) 1346/FFFFFFFFFFFF1EE8 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1EEE : 2003             
(1) 1347/FFFFFFFFFFFF1EF0 : 6706                		beq.s	.no_ret
(1) 1348/FFFFFFFFFFFF1EF2 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/FFFFFFFFFFFF1EF6 : 4E75                		rts
(1) 1350/FFFFFFFFFFFF1EF8 :                     .no_ret:
(1) 1351/FFFFFFFFFFFF1EF8 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/FFFFFFFFFFFF1EFC : 4E75                		rts
(1) 1353/FFFFFFFFFFFF1EFE :                     
(1) 1354/FFFFFFFFFFFF1EFE :                     ; --------------------------------------------------------
(1) 1355/FFFFFFFFFFFF1EFE :                     ; System_MdMcd_GiveWRAM
(1) 1356/FFFFFFFFFFFF1EFE :                     ;
(1) 1357/FFFFFFFFFFFF1EFE :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/FFFFFFFFFFFF1EFE :                     ; --------------------------------------------------------
(1) 1359/FFFFFFFFFFFF1EFE :                     
(1) 1360/FFFFFFFFFFFF1EFE :                     System_MdMcd_GiveWRAM:
(1) 1361/FFFFFFFFFFFF1EFE : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1F04 : 2003             
(1) 1362/FFFFFFFFFFFF1F06 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/FFFFFFFFFFFF1F08 : 4E75                		rts
(1) 1364/FFFFFFFFFFFF1F0A :                     
(1) 1365/FFFFFFFFFFFF1F0A :                     ; --------------------------------------------------------
(1) 1366/FFFFFFFFFFFF1F0A :                     ; System_MdMcd_ReadFileRAM
(1) 1367/FFFFFFFFFFFF1F0A :                     ;
(1) 1368/FFFFFFFFFFFF1F0A :                     ; Read file from disc and transfer output the
(1) 1369/FFFFFFFFFFFF1F0A :                     ; data to a1, uses communication ports.
(1) 1370/FFFFFFFFFFFF1F0A :                     ;
(1) 1371/FFFFFFFFFFFF1F0A :                     ; Input:
(1) 1372/FFFFFFFFFFFF1F0A :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/FFFFFFFFFFFF1F0A :                     ; a1   | Output location in RAM
(1) 1374/FFFFFFFFFFFF1F0A :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/FFFFFFFFFFFF1F0A :                     ;
(1) 1376/FFFFFFFFFFFF1F0A :                     ; Uses:
(1) 1377/FFFFFFFFFFFF1F0A :                     ; d7,a0-a1,a5-a6
(1) 1378/FFFFFFFFFFFF1F0A :                     ;
(1) 1379/FFFFFFFFFFFF1F0A :                     ; Notes:
(1) 1380/FFFFFFFFFFFF1F0A :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/FFFFFFFFFFFF1F0A :                     ; --------------------------------------------------------
(1) 1382/FFFFFFFFFFFF1F0A :                     
(1) 1383/FFFFFFFFFFFF1F0A :                     System_MdMcd_RdFile_RAM:
(1) 1433/FFFFFFFFFFFF1F0A : 4E75                		rts
(1) 1434/FFFFFFFFFFFF1F0C :                     
(1) 1435/FFFFFFFFFFFF1F0C :                     ; --------------------------------------------------------
(1) 1436/FFFFFFFFFFFF1F0C :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/FFFFFFFFFFFF1F0C :                     ;
(1) 1438/FFFFFFFFFFFF1F0C :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/FFFFFFFFFFFF1F0C :                     ; waits on finish.
(1) 1440/FFFFFFFFFFFF1F0C :                     ;
(1) 1441/FFFFFFFFFFFF1F0C :                     ; Input:
(1) 1442/FFFFFFFFFFFF1F0C :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/FFFFFFFFFFFF1F0C :                     ; a1   | Output location
(1) 1444/FFFFFFFFFFFF1F0C :                     ;
(1) 1445/FFFFFFFFFFFF1F0C :                     ; Notes:
(1) 1446/FFFFFFFFFFFF1F0C :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/FFFFFFFFFFFF1F0C :                     ; --------------------------------------------------------
(1) 1448/FFFFFFFFFFFF1F0C :                     
(1) 1449/FFFFFFFFFFFF1F0C :                     System_MdMcd_RdFile_WRAM:
(1) 1473/FFFFFFFFFFFF1F0C : 4E75                		rts
(1) 1474/FFFFFFFFFFFF1F0E :                     
(1) 1475/FFFFFFFFFFFF1F0E :                     ; --------------------------------------------------------
(1) 1476/FFFFFFFFFFFF1F0E :                     ; System_MdMcd_CheckHome
(1) 1477/FFFFFFFFFFFF1F0E :                     ;
(1) 1478/FFFFFFFFFFFF1F0E :                     ; Checks if the player is holding A, B, C and
(1) 1479/FFFFFFFFFFFF1F0E :                     ; then presses the START button.
(1) 1480/FFFFFFFFFFFF1F0E :                     ;
(1) 1481/FFFFFFFFFFFF1F0E :                     ; Returns:
(1) 1482/FFFFFFFFFFFF1F0E :                     ; bcc | Combo input not pressed
(1) 1483/FFFFFFFFFFFF1F0E :                     ; bcs | User did the combo presses
(1) 1484/FFFFFFFFFFFF1F0E :                     ;
(1) 1485/FFFFFFFFFFFF1F0E :                     ; Notes:
(1) 1486/FFFFFFFFFFFF1F0E :                     ; If you call this from your Title Screen, carry
(1) 1487/FFFFFFFFFFFF1F0E :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/FFFFFFFFFFFF1F0E :                     ; for other modes change your Screen number to the
(1) 1489/FFFFFFFFFFFF1F0E :                     ; Title Screen and return.
(1) 1490/FFFFFFFFFFFF1F0E :                     ; --------------------------------------------------------
(1) 1491/FFFFFFFFFFFF1F0E :                     
(1) 1492/FFFFFFFFFFFF1F0E :                     System_MdMcd_CheckHome:
(1) 1493/FFFFFFFFFFFF1F0E : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/FFFFFFFFFFFF1F12 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(1) 1495/FFFFFFFFFFFF1F16 : 3C38 E55E           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/FFFFFFFFFFFF1F1A : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/FFFFFFFFFFFF1F1E : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/FFFFFFFFFFFF1F22 : 6610                		bne.s	.not_press
(1) 1499/FFFFFFFFFFFF1F24 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/FFFFFFFFFFFF1F28 : 670A                		beq.s	.not_press
(1) 1501/FFFFFFFFFFFF1F2A : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/FFFFFFFFFFFF1F2E : 003C 0001           		or	#1,ccr
(1) 1503/FFFFFFFFFFFF1F32 : 4E75                		rts
(1) 1504/FFFFFFFFFFFF1F34 :                     .not_press:
(1) 1505/FFFFFFFFFFFF1F34 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/FFFFFFFFFFFF1F38 : 023C 001E           		and	#%11110,ccr
(1) 1507/FFFFFFFFFFFF1F3C : 4E75                		rts
(1) 1508/FFFFFFFFFFFF1F3E :                     
(1) 1509/FFFFFFFFFFFF1F3E :                     ; --------------------------------------------------------
(1) 1510/FFFFFFFFFFFF1F3E :                     ; System_MdMcd_ExitShell
(1) 1511/FFFFFFFFFFFF1F3E :                     ;
(1) 1512/FFFFFFFFFFFF1F3E :                     ; Exits the entire program and goes to
(1) 1513/FFFFFFFFFFFF1F3E :                     ; the BIOS/Shell.
(1) 1514/FFFFFFFFFFFF1F3E :                     ;
(1) 1515/FFFFFFFFFFFF1F3E :                     ; *** JUMP ONLY ***
(1) 1516/FFFFFFFFFFFF1F3E :                     ; --------------------------------------------------------
(1) 1517/FFFFFFFFFFFF1F3E :                     
(1) 1518/FFFFFFFFFFFF1F3E :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/FFFFFFFFFFFF1F3E :                     ; jmp $0284: Entry point
(1) 1520/FFFFFFFFFFFF1F3E :                     ; jmp $0288: CD player
(1) 1521/FFFFFFFFFFFF1F3E :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/FFFFFFFFFFFF1F3E :                     
(1) 1523/FFFFFFFFFFFF1F3E :                     System_MdMcd_ExitShell:
(1) 1532/FFFFFFFFFFFF1F3E : 4E75                		rts
(1) 1534/FFFFFFFFFFFF1F40 :                     
(1) 1535/FFFFFFFFFFFF1F40 :                     ; ------------------------------------------------------------
(1) 1536/FFFFFFFFFFFF1F40 :                     ; CDDA PLAYBACK
(1) 1537/FFFFFFFFFFFF1F40 :                     ; ------------------------------------------------------------
(1) 1538/FFFFFFFFFFFF1F40 :                     
(1) 1539/FFFFFFFFFFFF1F40 :                     ; --------------------------------------------------------
(1) 1540/FFFFFFFFFFFF1F40 :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/FFFFFFFFFFFF1F40 :                     ;
(1) 1542/FFFFFFFFFFFF1F40 :                     ; Play CDDA track, normal or looped.
(1) 1543/FFFFFFFFFFFF1F40 :                     ;
(1) 1544/FFFFFFFFFFFF1F40 :                     ; Input:
(1) 1545/FFFFFFFFFFFF1F40 :                     ; d0.w | CD track number
(1) 1546/FFFFFFFFFFFF1F40 :                     ;
(1) 1547/FFFFFFFFFFFF1F40 :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/FFFFFFFFFFFF1F40 :                     ; and $11 for looped
(1) 1549/FFFFFFFFFFFF1F40 :                     ;
(1) 1550/FFFFFFFFFFFF1F40 :                     ; Uses:
(1) 1551/FFFFFFFFFFFF1F40 :                     ; d4
(1) 1552/FFFFFFFFFFFF1F40 :                     ;
(1) 1553/FFFFFFFFFFFF1F40 :                     ; Notes:
(1) 1554/FFFFFFFFFFFF1F40 :                     ; Tracks $00, $01 and any negative values are
(1) 1555/FFFFFFFFFFFF1F40 :                     ; ignored.
(1) 1556/FFFFFFFFFFFF1F40 :                     ; --------------------------------------------------------
(1) 1557/FFFFFFFFFFFF1F40 :                     
(1) 1558/FFFFFFFFFFFF1F40 :                     System_MdMcd_CddaPlay:
(1) 1559/FFFFFFFFFFFF1F40 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/FFFFFFFFFFFF1F44 : 383C 0010           		move.w	#$0010,d4
(1) 1561/FFFFFFFFFFFF1F48 : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/FFFFFFFFFFFF1F4A :                     System_MdMcd_CddaPlayL:
(1) 1563/FFFFFFFFFFFF1F4A : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/FFFFFFFFFFFF1F4E : 383C 0011           		move.w	#$0011,d4
(1) 1565/FFFFFFFFFFFF1F52 :                     sysMdMcd_SetCdda:
(1) 1577/FFFFFFFFFFFF1F52 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/FFFFFFFFFFFF1F56 : 4E75                		rts
(1) 1579/FFFFFFFFFFFF1F58 :                     
(1) 1580/FFFFFFFFFFFF1F58 :                     ; --------------------------------------------------------
(1) 1581/FFFFFFFFFFFF1F58 :                     ; System_MdMcd_CdStop
(1) 1582/FFFFFFFFFFFF1F58 :                     ;
(1) 1583/FFFFFFFFFFFF1F58 :                     ; Stop CDDA track
(1) 1584/FFFFFFFFFFFF1F58 :                     ; --------------------------------------------------------
(1) 1585/FFFFFFFFFFFF1F58 :                     
(1) 1586/FFFFFFFFFFFF1F58 :                     System_MdMcd_CddaStop:
(1) 1593/FFFFFFFFFFFF1F58 : 4E75                		rts
(1) 1594/FFFFFFFFFFFF1F5A :                     
(1) 1595/FFFFFFFFFFFF1F5A :                     ; --------------------------------------------------------
(1) 1596/FFFFFFFFFFFF1F5A :                     ; System_MdMcd_CdFade
(1) 1597/FFFFFFFFFFFF1F5A :                     ;
(1) 1598/FFFFFFFFFFFF1F5A :                     ; Fade the CDDA Volume
(1) 1599/FFFFFFFFFFFF1F5A :                     ;
(1) 1600/FFFFFFFFFFFF1F5A :                     ; Input:
(1) 1601/FFFFFFFFFFFF1F5A :                     ; d0.w | Target volume:
(1) 1602/FFFFFFFFFFFF1F5A :                     ;        $000-$400 - Min to Max
(1) 1603/FFFFFFFFFFFF1F5A :                     ; d1.w | Fading speed:
(1) 1604/FFFFFFFFFFFF1F5A :                     ;        $001-$200 - Slow to Fast
(1) 1605/FFFFFFFFFFFF1F5A :                     ;             $400 - Set quick
(1) 1606/FFFFFFFFFFFF1F5A :                     ;
(1) 1607/FFFFFFFFFFFF1F5A :                     ; This calls Sub-Task $16
(1) 1608/FFFFFFFFFFFF1F5A :                     ; --------------------------------------------------------
(1) 1609/FFFFFFFFFFFF1F5A :                     
(1) 1610/FFFFFFFFFFFF1F5A :                     System_MdMcd_CddaFade:
(1) 1619/FFFFFFFFFFFF1F5A : 4E75                		rts
(1) 1620/FFFFFFFFFFFF1F5C :                     
(1) 1621/FFFFFFFFFFFF1F5C :                     ; --------------------------------------------------------
(1) 1622/FFFFFFFFFFFF1F5C :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/FFFFFFFFFFFF1F5C :                     ; --------------------------------------------------------
(1) 1624/FFFFFFFFFFFF1F5C :                     
(1) 1625/FFFFFFFFFFFF1F5C :                     def_SaveInfo:
(1) 1629/FFFFFFFFFFFF1F5C : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
         FFFFFFFFFFFF1F62 : 4344 5F5F 5F00    
(1) 1631/FFFFFFFFFFFF1F68 : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/FFFFFFFFFFFF1F6A : 0000                		dc.w 0
(1) 1633/FFFFFFFFFFFF1F6C :                     		align 2
(1) 1634/FFFFFFFFFFFF1F6E :                     
(1) 1635/FFFFFFFFFFFF1F6E :                     ; ====================================================================
(1) 1636/FFFFFFFFFFFF1F6E :                     ; ----------------------------------------------------------------
(1) 1637/FFFFFFFFFFFF1F6E :                     ; 32X and CD32X ONLY
(1) 1638/FFFFFFFFFFFF1F6E :                     ; ----------------------------------------------------------------
(1) 1639/FFFFFFFFFFFF1F6E :                     
(1) 1640/FFFFFFFFFFFF1F6E :                     ; --------------------------------------------------------
(1) 1641/FFFFFFFFFFFF1F6E :                     ; System_MdMars_SendData
(1) 1642/FFFFFFFFFFFF1F6E :                     ;
(1) 1643/FFFFFFFFFFFF1F6E :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/FFFFFFFFFFFF1F6E :                     ; using DREQ
(1) 1645/FFFFFFFFFFFF1F6E :                     ;
(1) 1646/FFFFFFFFFFFF1F6E :                     ; Input:
(1) 1647/FFFFFFFFFFFF1F6E :                     ; a0   | Source data
(1) 1648/FFFFFFFFFFFF1F6E :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/FFFFFFFFFFFF1F6E :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/FFFFFFFFFFFF1F6E :                     ;
(1) 1651/FFFFFFFFFFFF1F6E :                     ; Returns:
(1) 1652/FFFFFFFFFFFF1F6E :                     ; a1   | New output SDRAM location
(1) 1653/FFFFFFFFFFFF1F6E :                     ;
(1) 1654/FFFFFFFFFFFF1F6E :                     ; Uses:
(1) 1655/FFFFFFFFFFFF1F6E :                     ; d0/a4-a5,d5-d7
(1) 1656/FFFFFFFFFFFF1F6E :                     ;
(1) 1657/FFFFFFFFFFFF1F6E :                     ; Notes:
(1) 1658/FFFFFFFFFFFF1F6E :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/FFFFFFFFFFFF1F6E :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/FFFFFFFFFFFF1F6E :                     ; --------------------------------------------------------
(1) 1661/FFFFFFFFFFFF1F6E :                     
(1) 1662/FFFFFFFFFFFF1F6E :                     System_MdMars_SendData:
(1) 1664/FFFFFFFFFFFF1F6E : 48E7 1800           		movem.l	d3-d4,-(sp)
(1) 1665/FFFFFFFFFFFF1F72 : 263C 0000 FFF8      		move.l	#$00FFF8,d3	; Maximum packet sizes
(1) 1666/FFFFFFFFFFFF1F78 : 78F8                		moveq	#-8,d4
(1) 1667/FFFFFFFFFFFF1F7A : C084                		and.l	d4,d0
(1) 1668/FFFFFFFFFFFF1F7C : 2800                		move.l	d0,d4
(1) 1669/FFFFFFFFFFFF1F7E : B883                		cmp.l	d3,d4
(1) 1670/FFFFFFFFFFFF1F80 : 6E04                		bgt.s	.large_pack
(1) 1671/FFFFFFFFFFFF1F82 : 611C                		bsr	sys_MSendData_0	; Small packet
(1) 1672/FFFFFFFFFFFF1F84 : 6014                		bra.s	.exit_now
(1) 1673/FFFFFFFFFFFF1F86 :                     .large_pack:
(1) 1674/FFFFFFFFFFFF1F86 : 3003                		move.w	d3,d0
(1) 1675/FFFFFFFFFFFF1F88 : 6116                		bsr	sys_MSendData_0
(1) 1676/FFFFFFFFFFFF1F8A : 9883                		sub.l	d3,d4
(1) 1677/FFFFFFFFFFFF1F8C : B883                		cmp.l	d3,d4
(1) 1678/FFFFFFFFFFFF1F8E : 6CF6                		bge.s	.large_pack
(1) 1679/FFFFFFFFFFFF1F90 : 4A84                		tst.l	d4
(1) 1680/FFFFFFFFFFFF1F92 : 6706                		beq.s	.exit_now
(1) 1681/FFFFFFFFFFFF1F94 : 6B04                		bmi.s	.exit_now
(1) 1682/FFFFFFFFFFFF1F96 : 3004                		move.w	d4,d0
(1) 1683/FFFFFFFFFFFF1F98 : 6106                		bsr	sys_MSendData_0
(1) 1684/FFFFFFFFFFFF1F9A :                     .exit_now:
(1) 1685/FFFFFFFFFFFF1F9A : 4CDF 0018           		movem.l	(sp)+,d3-d4
(1) 1687/FFFFFFFFFFFF1F9E : 4E75                		rts
(1) 1688/FFFFFFFFFFFF1FA0 :                     
(1) 1689/FFFFFFFFFFFF1FA0 :                     ; ------------------------------------------------------------
(1) 1690/FFFFFFFFFFFF1FA0 :                     ; DREQ Genesis-to-32X code
(1) 1691/FFFFFFFFFFFF1FA0 :                     ; ------------------------------------------------------------
(1) 1692/FFFFFFFFFFFF1FA0 :                     
(1) 1694/FFFFFFFFFFFF1FA0 :                     
(1) 1695/FFFFFFFFFFFF1FA0 :                     sys_MSendData_0:
(1) 1696/FFFFFFFFFFFF1FA0 : 48E7 0706           		movem.l	a5-a6/d5-d7,-(sp)
(1) 1697/FFFFFFFFFFFF1FA4 : 7C00                		moveq	#0,d6				; Mode 0: Normal data transfer
(1) 1698/FFFFFFFFFFFF1FA6 : 6128                		bsr.s	sys_MSendData
(1) 1699/FFFFFFFFFFFF1FA8 : 4CDF 60E0           		movem.l	(sp)+,a5-a6/d5-d7
(1) 1700/FFFFFFFFFFFF1FAC : 4E75                		rts
(1) 1701/FFFFFFFFFFFF1FAE :                     
(1) 1702/FFFFFFFFFFFF1FAE :                     ; --------------------------------------------------------
(1) 1703/FFFFFFFFFFFF1FAE :                     ; System_MdMars_Update
(1) 1704/FFFFFFFFFFFF1FAE :                     ;
(1) 1705/FFFFFFFFFFFF1FAE :                     ; Send a section of MD RAM to 32X's SDRAM
(1) 1706/FFFFFFFFFFFF1FAE :                     ;
(1) 1707/FFFFFFFFFFFF1FAE :                     ; Notes:
(1) 1708/FFFFFFFFFFFF1FAE :                     ; Call this during DISPLAY ONLY
(1) 1709/FFFFFFFFFFFF1FAE :                     ; --------------------------------------------------------
(1) 1710/FFFFFFFFFFFF1FAE :                     
(1) 1711/FFFFFFFFFFFF1FAE :                     System_MdMars_Update:
(1) 1712/FFFFFFFFFFFF1FAE : 48E7 0786           		movem.l	d5-d7/a0/a5-a6,-(sp)
(1) 1713/FFFFFFFFFFFF1FB2 : 3F00                		move.w	d0,-(sp)
(1) 1714/FFFFFFFFFFFF1FB4 : 41F8 CA42           		lea	(RAM_MdMars_CommBuff).w,a0
(1) 1715/FFFFFFFFFFFF1FB8 : 303C 0A20           		move.w	#Dreq_len,d0
(1) 1716/FFFFFFFFFFFF1FBC : 7C01                		moveq	#1,d6				; Mode 1: Per-frame RAM send
(1) 1717/FFFFFFFFFFFF1FBE : 6110                		bsr.s	sys_MSendData
(1) 1718/FFFFFFFFFFFF1FC0 : 301F                		move.w	(sp)+,d0
(1) 1719/FFFFFFFFFFFF1FC2 : 4CDF 61E0           		movem.l	(sp)+,d5-d7/a0/a5-a6
(1) 1720/FFFFFFFFFFFF1FC6 : 08F9 0005 00A1      		bset	#5,(sysmars_reg+comm12+1).l	; Swap DREQ-RAM buffer on SH2
         FFFFFFFFFFFF1FCC : 512D             
(1) 1721/FFFFFFFFFFFF1FCE : 4E75                		rts
(1) 1722/FFFFFFFFFFFF1FD0 :                     ; --------------------------------------------------------
(1) 1723/FFFFFFFFFFFF1FD0 :                     
(1) 1724/FFFFFFFFFFFF1FD0 :                     ; updates a1
(1) 1725/FFFFFFFFFFFF1FD0 :                     sys_MSendData:
(1) 1726/FFFFFFFFFFFF1FD0 : 40C5                		move.w	sr,d5
(1) 1727/FFFFFFFFFFFF1FD2 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1) 1728/FFFFFFFFFFFF1FD6 : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6		; a6 - sysmars_reg
(1) 1729/FFFFFFFFFFFF1FDC : 4BEE 0012           		lea	dreqfifo(a6),a5			; a5 - FIFO port
(1) 1730/FFFFFFFFFFFF1FE0 : 7E00                		moveq	#0,d7
(1) 1731/FFFFFFFFFFFF1FE2 : 3E00                		move.w	d0,d7				; d7.l - Size
(1) 1732/FFFFFFFFFFFF1FE4 : 4A46                		tst.w	d6				; CMD mode 0?
(1) 1733/FFFFFFFFFFFF1FE6 : 6606                		bne.s	.no_src
(1) 1734/FFFFFFFFFFFF1FE8 : 2D49 000C           		move.l	a1,dreqdest(a6)
(1) 1735/FFFFFFFFFFFF1FEC : D3C7                		add.l	d7,a1				; Update a1
(1) 1736/FFFFFFFFFFFF1FEE :                     .no_src:
(1) 1737/FFFFFFFFFFFF1FEE : 1D46 002C           		move.b	d6,comm12(a6)			; d6 - Set CMD mode (target output)
(1) 1738/FFFFFFFFFFFF1FF2 : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Reset 68S, RV off
(1) 1739/FFFFFFFFFFFF1FF8 : E24F                		lsr.w	#1,d7				; length >> 2
(1) 1740/FFFFFFFFFFFF1FFA : 3D47 0010           		move.w	d7,dreqlen(a6)			; Set transfer lenght
(1) 1741/FFFFFFFFFFFF1FFE : E44F                		lsr.w	#2,d7				; lenght/2 >> 4
(1) 1742/FFFFFFFFFFFF2000 : 0447 0001           		subi.w	#1,d7
(1) 1743/FFFFFFFFFFFF2004 : 08EE 0000 0003      		bset	#0,standby(a6)			; Call CMD interrupt to MASTER
(1) 1744/FFFFFFFFFFFF200A : 082E 0006 002C      .wait_bit:	btst	#6,comm12(a6)			; Wait ENTRANCE signal
(1) 1745/FFFFFFFFFFFF2010 : 67F8                		beq.s	.wait_bit
(1) 1746/FFFFFFFFFFFF2012 : 3D7C 0004 0006      		move.w	#%100,dreqctl(a6)		; Enable 68S, RV off
(1) 1747/FFFFFFFFFFFF2018 :                     	; *** CRITICAL PART ***
(1) 1748/FFFFFFFFFFFF2018 :                     .loop_fifo:
(1) 1749/FFFFFFFFFFFF2018 : 082E 0007 0006      		btst	#7,dreqctl(a6)			; FIFO full?
(1) 1750/FFFFFFFFFFFF201E : 66F8                		bne.s	.loop_fifo
(1) 1751/FFFFFFFFFFFF2020 : 3A98                		move.w  (a0)+,(a5)
(1) 1752/FFFFFFFFFFFF2022 : 3A98                		move.w  (a0)+,(a5)
(1) 1753/FFFFFFFFFFFF2024 : 3A98                		move.w  (a0)+,(a5)
(1) 1754/FFFFFFFFFFFF2026 : 3A98                		move.w  (a0)+,(a5)
(1) 1755/FFFFFFFFFFFF2028 : 51CF FFEE           		dbf	d7,.loop_fifo
(1) 1757/FFFFFFFFFFFF202C : 082E 0006 002C      .wait_bit_e:	btst	#6,comm12(a6)			; Wait EXIT signal
(1) 1758/FFFFFFFFFFFF2032 : 66F8                		bne.s	.wait_bit_e
(1) 1760/FFFFFFFFFFFF2034 : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Disable 68S, RV off
(1) 1761/FFFFFFFFFFFF203A : 46C5                		move.w	d5,sr				; Restore interrupts
(1) 1763/FFFFFFFFFFFF203C : 4E75                		rts
(1) 1764/FFFFFFFFFFFF203E :                     
(1) 1765/FFFFFFFFFFFF203E :                     ; ====================================================================
(1) 1766/FFFFFFFFFFFF203E :                     ; ----------------------------------------------------------------
(1) 1767/FFFFFFFFFFFF203E :                     ; SHARED for all
(1) 1768/FFFFFFFFFFFF203E :                     ; ----------------------------------------------------------------
(1) 1769/FFFFFFFFFFFF203E :                     
(1) 1770/FFFFFFFFFFFF203E :                     ; --------------------------------------------------------
(1) 1771/FFFFFFFFFFFF203E :                     ; System_SetDataBank
(1) 1772/FFFFFFFFFFFF203E :                     ;
(1) 1773/FFFFFFFFFFFF203E :                     ; Sets the data bank depending of the system
(1) 1774/FFFFFFFFFFFF203E :                     ;
(1) 1775/FFFFFFFFFFFF203E :                     ; Input:
(1) 1776/FFFFFFFFFFFF203E :                     ; a0   | Pointer and filename:
(1) 1777/FFFFFFFFFFFF203E :                     ;        dc.l bank_pointer
(1) 1778/FFFFFFFFFFFF203E :                     ;        dc.b "FILENAME.BIN"
(1) 1779/FFFFFFFFFFFF203E :                     ;
(1) 1780/FFFFFFFFFFFF203E :                     ; Uses:
(1) 1781/FFFFFFFFFFFF203E :                     ; a4-a5,d5-d7
(1) 1782/FFFFFFFFFFFF203E :                     ;
(1) 1783/FFFFFFFFFFFF203E :                     ; Notes:
(1) 1784/FFFFFFFFFFFF203E :                     ; - ONLY call this if you have the opportunity to
(1) 1785/FFFFFFFFFFFF203E :                     ;   do it.
(1) 1786/FFFFFFFFFFFF203E :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/FFFFFFFFFFFF203E :                     ;   to load from disc
(1) 1788/FFFFFFFFFFFF203E :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/FFFFFFFFFFFF203E :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/FFFFFFFFFFFF203E :                     ; --------------------------------------------------------
(1) 1791/FFFFFFFFFFFF203E :                     
(1) 1792/FFFFFFFFFFFF203E :                     System_SetDataBank:
(1) 1797/FFFFFFFFFFFF203E : 2F07                		move.l	d7,-(sp)
(1) 1798/FFFFFFFFFFFF2040 :                     	rept 3
(1) 1799/FFFFFFFFFFFF2040 :                     		bsr	Video_MdMars_WaitSync
(1) 1800/FFFFFFFFFFFF2040 :                     		bsr	Video_MdMars_SetSync
(1) 1801/FFFFFFFFFFFF2040 :                     	endm
(1) 1799/FFFFFFFFFFFF2040 : 6100 F340           		bsr	Video_MdMars_WaitSync
(1) 1800/FFFFFFFFFFFF2044 : 6100 F332           		bsr	Video_MdMars_SetSync
(1) 1799/FFFFFFFFFFFF2048 : 6100 F338           		bsr	Video_MdMars_WaitSync
(1) 1800/FFFFFFFFFFFF204C : 6100 F32A           		bsr	Video_MdMars_SetSync
(1) 1799/FFFFFFFFFFFF2050 : 6100 F330           		bsr	Video_MdMars_WaitSync
(1) 1800/FFFFFFFFFFFF2054 : 6100 F322           		bsr	Video_MdMars_SetSync
(1) 1802/FFFFFFFFFFFF2058 : 2E10                		move.l	(a0),d7
(1) 1803/FFFFFFFFFFFF205A : 4847                		swap	d7
(1) 1804/FFFFFFFFFFFF205C : E84F                		lsr.w	#4,d7
(1) 1805/FFFFFFFFFFFF205E : 0247 0003           		andi.w	#%11,d7
(1) 1806/FFFFFFFFFFFF2062 : 33C7 00A1 5104      		move.w	d7,(sysmars_reg+bankset).l
(1) 1807/FFFFFFFFFFFF2068 : 2E1F                		move.l	(sp)+,d7
(1) 1809/FFFFFFFFFFFF206A : 4E75                		rts
(1) 1810/FFFFFFFFFFFF206C :                     
(1) 1811/FFFFFFFFFFFF206C :                     ; ====================================================================
(1) 1812/FFFFFFFFFFFF206C :                     ; ----------------------------------------------------------------
(1) 1813/FFFFFFFFFFFF206C :                     ; Objects system
(1) 1814/FFFFFFFFFFFF206C :                     ; ----------------------------------------------------------------
(1) 1815/FFFFFFFFFFFF206C :                     
(1) 1816/FFFFFFFFFFFF206C :                     ; --------------------------------------------------------
(1) 1817/FFFFFFFFFFFF206C :                     ; Init/Clear Objects system
(1) 1818/FFFFFFFFFFFF206C :                     ; --------------------------------------------------------
(1) 1819/FFFFFFFFFFFF206C :                     
(1) 1820/FFFFFFFFFFFF206C :                     Object_Init:
(1) 1821/FFFFFFFFFFFF206C : 4DF8 E59C           		lea	(RAM_Objects).w,a6
(1) 1822/FFFFFFFFFFFF2070 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/FFFFFFFFFFFF2074 :                     .clr:
(1) 1824/FFFFFFFFFFFF2074 : 421E                		clr.b	(a6)+
(1) 1825/FFFFFFFFFFFF2076 : 51CF FFFC           		dbf	d7,.clr
(1) 1826/FFFFFFFFFFFF207A : 4E75                		rts
(1) 1827/FFFFFFFFFFFF207C :                     
(1) 1828/FFFFFFFFFFFF207C :                     ; --------------------------------------------------------
(1) 1829/FFFFFFFFFFFF207C :                     ; Process objects
(1) 1830/FFFFFFFFFFFF207C :                     ;
(1) 1831/FFFFFFFFFFFF207C :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/FFFFFFFFFFFF207C :                     ; --------------------------------------------------------
(1) 1833/FFFFFFFFFFFF207C :                     
(1) 1834/FFFFFFFFFFFF207C :                     Object_Run:
(1) 1835/FFFFFFFFFFFF207C : 4DF8 E59C           		lea	(RAM_Objects).w,a6
(1) 1836/FFFFFFFFFFFF2080 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/FFFFFFFFFFFF2084 :                     .next_one:
(1) 1838/FFFFFFFFFFFF2084 : 2C16                		move.l	obj_code(a6),d6
(1) 1839/FFFFFFFFFFFF2086 : 6708                		beq.s	.no_code	; Free slot
(1) 1840/FFFFFFFFFFFF2088 : 2F07                		move.l	d7,-(sp)
(1) 1841/FFFFFFFFFFFF208A : 2A46                		move.l	d6,a5
(1) 1842/FFFFFFFFFFFF208C : 4E95                		jsr	(a5)
(1) 1843/FFFFFFFFFFFF208E : 2E1F                		move.l	(sp)+,d7
(1) 1844/FFFFFFFFFFFF2090 :                     .no_code:
(1) 1845/FFFFFFFFFFFF2090 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/FFFFFFFFFFFF2094 : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/FFFFFFFFFFFF2098 : 4E75                		rts
(1) 1848/FFFFFFFFFFFF209A :                     
(1) 1849/FFFFFFFFFFFF209A :                     ; --------------------------------------------------------
(1) 1850/FFFFFFFFFFFF209A :                     ; Object_Set, Object_Make
(1) 1851/FFFFFFFFFFFF209A :                     ;
(1) 1852/FFFFFFFFFFFF209A :                     ; Set a new object into a specific slot.
(1) 1853/FFFFFFFFFFFF209A :                     ;
(1) 1854/FFFFFFFFFFFF209A :                     ; Input:
(1) 1855/FFFFFFFFFFFF209A :                     ; d0.l | Object code pointer
(1) 1856/FFFFFFFFFFFF209A :                     ;        If 0: DELETE the object including it's memory
(1) 1857/FFFFFFFFFFFF209A :                     ; d1.w | Object slot
(1) 1858/FFFFFFFFFFFF209A :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1859/FFFFFFFFFFFF209A :                     ; d2.b | Object sub-type (obj_subid)
(1) 1860/FFFFFFFFFFFF209A :                     ;
(1) 1861/FFFFFFFFFFFF209A :                     ; Returns:
(1) 1862/FFFFFFFFFFFF209A :                     ; bcc | Found free slot
(1) 1863/FFFFFFFFFFFF209A :                     ; bcs | Ran-out of object slots
(1) 1864/FFFFFFFFFFFF209A :                     ;
(1) 1865/FFFFFFFFFFFF209A :                     ; Notes:
(1) 1866/FFFFFFFFFFFF209A :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/FFFFFFFFFFFF209A :                     ; but it will contain the remains of d2 when you
(1) 1868/FFFFFFFFFFFF209A :                     ; called this.
(1) 1869/FFFFFFFFFFFF209A :                     ; --------------------------------------------------------
(1) 1870/FFFFFFFFFFFF209A :                     
(1) 1871/FFFFFFFFFFFF209A :                     Object_Set:
(1) 1872/FFFFFFFFFFFF209A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/FFFFFFFFFFFF209E : 4DF8 E59C           		lea	(RAM_Objects).w,a6
(1) 1874/FFFFFFFFFFFF20A2 : 7E00                		moveq	#0,d7
(1) 1875/FFFFFFFFFFFF20A4 : 3E01                		move.w	d1,d7
(1) 1876/FFFFFFFFFFFF20A6 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/FFFFFFFFFFFF20AA : DCC7                		adda	d7,a6
(1) 1878/FFFFFFFFFFFF20AC : 602C                		bra.s	objSet_Go
(1) 1879/FFFFFFFFFFFF20AE :                     
(1) 1880/FFFFFFFFFFFF20AE :                     Object_Make:
(1) 1881/FFFFFFFFFFFF20AE : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/FFFFFFFFFFFF20B2 : 4DF8 E59C           		lea	(RAM_Objects).w,a6
(1) 1883/FFFFFFFFFFFF20B6 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/FFFFFFFFFFFF20BA : 7C00                		moveq	#0,d6
(1) 1885/FFFFFFFFFFFF20BC :                     .search:
(1) 1886/FFFFFFFFFFFF20BC : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/FFFFFFFFFFFF20C0 : 6C0E                		bge.s	objSet_Error
(1) 1888/FFFFFFFFFFFF20C2 : 4A96                		tst.l	obj_code(a6)
(1) 1889/FFFFFFFFFFFF20C4 : 6714                		beq.s	objSet_Go
(1) 1890/FFFFFFFFFFFF20C6 : DCFC 0068           		adda	#obj_len,a6
(1) 1891/FFFFFFFFFFFF20CA : 5246                		addq.w	#1,d6
(1) 1892/FFFFFFFFFFFF20CC : 51CF FFEE           		dbf	d7,.search
(1) 1893/FFFFFFFFFFFF20D0 :                     objSet_Error:
(1) 1894/FFFFFFFFFFFF20D0 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/FFFFFFFFFFFF20D4 : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/FFFFFFFFFFFF20D8 : 4E75                		rts
(1) 1897/FFFFFFFFFFFF20DA :                     
(1) 1898/FFFFFFFFFFFF20DA :                     objSet_Go:
(1) 1899/FFFFFFFFFFFF20DA : 4A80                		tst.l	d0
(1) 1900/FFFFFFFFFFFF20DC : 670A                		beq.s	.from_del
(1) 1901/FFFFFFFFFFFF20DE : 2E00                		move.l	d0,d7
(1) 1902/FFFFFFFFFFFF20E0 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/FFFFFFFFFFFF20E2 : 1D42 001D           		move.b	d2,obj_subid(a6)
(1) 1904/FFFFFFFFFFFF20E6 : 600C                		bra.s	.exit_this
(1) 1905/FFFFFFFFFFFF20E8 :                     .from_del:
(1) 1906/FFFFFFFFFFFF20E8 : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/FFFFFFFFFFFF20EA : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/FFFFFFFFFFFF20EE : 421D                .clr:		clr.b	(a5)+
(1) 1909/FFFFFFFFFFFF20F0 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/FFFFFFFFFFFF20F4 :                     .exit_this:
(1) 1911/FFFFFFFFFFFF20F4 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/FFFFFFFFFFFF20F8 : 003C 0001           		or	#1,ccr
(1) 1913/FFFFFFFFFFFF20FC : 4E75                		rts
(1) 1914/FFFFFFFFFFFF20FE :                     
(1) 1915/FFFFFFFFFFFF20FE :                     ; ====================================================================
(1) 1916/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1) 1917/FFFFFFFFFFFF20FE :                     ; Object subroutines
(1) 1918/FFFFFFFFFFFF20FE :                     ;
(1) 1919/FFFFFFFFFFFF20FE :                     ; These can ONLY be called on the current object's code
(1) 1920/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1) 1921/FFFFFFFFFFFF20FE :                     
(1) 1922/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1) 1923/FFFFFFFFFFFF20FE :                     ; object_ResetVars
(1) 1924/FFFFFFFFFFFF20FE :                     ;
(1) 1925/FFFFFFFFFFFF20FE :                     ; Resets the current object's memory, call this
(1) 1926/FFFFFFFFFFFF20FE :                     ; at very beginning of your object's init code
(1) 1927/FFFFFFFFFFFF20FE :                     ;
(1) 1928/FFFFFFFFFFFF20FE :                     ; Input:
(1) 1929/FFFFFFFFFFFF20FE :                     ; a6 | This object
(1) 1930/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1) 1931/FFFFFFFFFFFF20FE :                     
(1) 1932/FFFFFFFFFFFF20FE :                     object_ResetVars:
(1) 1933/FFFFFFFFFFFF20FE : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/FFFFFFFFFFFF2102 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/FFFFFFFFFFFF2106 : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/FFFFFFFFFFFF210A : 7E00                		moveq	#0,d7
(1) 1937/FFFFFFFFFFFF210C : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/FFFFFFFFFFFF210E : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/FFFFFFFFFFFF2112 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/FFFFFFFFFFFF2116 : 4E75                		rts
(1) 1941/FFFFFFFFFFFF2118 :                     
(1) 1942/FFFFFFFFFFFF2118 :                     ; --------------------------------------------------------
(1) 1943/FFFFFFFFFFFF2118 :                     ; object_ResetAnim
(1) 1944/FFFFFFFFFFFF2118 :                     ;
(1) 1945/FFFFFFFFFFFF2118 :                     ; Reset animation variables, call this BEFORE using
(1) 1946/FFFFFFFFFFFF2118 :                     ; object_Animate.
(1) 1947/FFFFFFFFFFFF2118 :                     ;
(1) 1948/FFFFFFFFFFFF2118 :                     ; Input:
(1) 1949/FFFFFFFFFFFF2118 :                     ; a6 | This object
(1) 1950/FFFFFFFFFFFF2118 :                     ; --------------------------------------------------------
(1) 1951/FFFFFFFFFFFF2118 :                     
(1) 1952/FFFFFFFFFFFF2118 :                     object_ResetAnim:
(1) 1953/FFFFFFFFFFFF2118 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/FFFFFFFFFFFF2118 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/FFFFFFFFFFFF2118 : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/FFFFFFFFFFFF211E : 4E75                		rts
(1) 1957/FFFFFFFFFFFF2120 :                     
(1) 1958/FFFFFFFFFFFF2120 :                     ; --------------------------------------------------------
(1) 1959/FFFFFFFFFFFF2120 :                     ; object_Speed
(1) 1960/FFFFFFFFFFFF2120 :                     ;
(1) 1961/FFFFFFFFFFFF2120 :                     ; Moves the object using speed values set on
(1) 1962/FFFFFFFFFFFF2120 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/FFFFFFFFFFFF2120 :                     ;
(1) 1964/FFFFFFFFFFFF2120 :                     ; Input:
(1) 1965/FFFFFFFFFFFF2120 :                     ; a6 | This object
(1) 1966/FFFFFFFFFFFF2120 :                     ; --------------------------------------------------------
(1) 1967/FFFFFFFFFFFF2120 :                     
(1) 1968/FFFFFFFFFFFF2120 :                     object_Speed:
(1) 1969/FFFFFFFFFFFF2120 : 2F07                		move.l	d7,-(sp)
(1) 1970/FFFFFFFFFFFF2122 : 7E00                		moveq	#0,d7
(1) 1971/FFFFFFFFFFFF2124 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/FFFFFFFFFFFF2128 : 48C7                		ext.l	d7
(1) 1973/FFFFFFFFFFFF212A : E187                		asl.l	#8,d7
(1) 1974/FFFFFFFFFFFF212C : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/FFFFFFFFFFFF2130 : 7E00                		moveq	#0,d7
(1) 1976/FFFFFFFFFFFF2132 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/FFFFFFFFFFFF2136 : 48C7                		ext.l	d7
(1) 1978/FFFFFFFFFFFF2138 : E187                		asl.l	#8,d7
(1) 1979/FFFFFFFFFFFF213A : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/FFFFFFFFFFFF213E : 7E00                		moveq	#0,d7
(1) 1981/FFFFFFFFFFFF2140 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/FFFFFFFFFFFF2144 : 48C7                		ext.l	d7
(1) 1983/FFFFFFFFFFFF2146 : E187                		asl.l	#8,d7
(1) 1984/FFFFFFFFFFFF2148 : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/FFFFFFFFFFFF214C : 2E1F                		move.l	(sp)+,d7
(1) 1986/FFFFFFFFFFFF214E : 4E75                		rts
(1) 1987/FFFFFFFFFFFF2150 :                     
(1) 1988/FFFFFFFFFFFF2150 :                     ; --------------------------------------------------------
(1) 1989/FFFFFFFFFFFF2150 :                     ; object_Animate
(1) 1990/FFFFFFFFFFFF2150 :                     ;
(1) 1991/FFFFFFFFFFFF2150 :                     ; Animates the sprite with a animation script,
(1) 1992/FFFFFFFFFFFF2150 :                     ; modifies obj_frame with the frame to use.
(1) 1993/FFFFFFFFFFFF2150 :                     ;
(1) 1994/FFFFFFFFFFFF2150 :                     ; Input:
(1) 1995/FFFFFFFFFFFF2150 :                     ; a6 | This object
(1) 1996/FFFFFFFFFFFF2150 :                     ; a0 | Animation data
(1) 1997/FFFFFFFFFFFF2150 :                     ; --------------------------------------------------------
(1) 1998/FFFFFFFFFFFF2150 :                     
(1) 1999/FFFFFFFFFFFF2150 :                     ; anim_data:
(1) 2000/FFFFFFFFFFFF2150 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/FFFFFFFFFFFF2150 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/FFFFFFFFFFFF2150 :                     ; 	;...
(1) 2003/FFFFFFFFFFFF2150 :                     ;
(1) 2004/FFFFFFFFFFFF2150 :                     ; .frame_num:
(1) 2005/FFFFFFFFFFFF2150 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/FFFFFFFFFFFF2150 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/FFFFFFFFFFFF2150 :                     ; 	dc.w command			; End-of-data command
(1) 2008/FFFFFFFFFFFF2150 :                     ;
(1) 2009/FFFFFFFFFFFF2150 :                     ; commands:
(1) 2010/FFFFFFFFFFFF2150 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/FFFFFFFFFFFF2150 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/FFFFFFFFFFFF2150 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/FFFFFFFFFFFF2150 :                     
(1) 2014/FFFFFFFFFFFF2150 :                     object_Animate:
(1) 2015/FFFFFFFFFFFF2150 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/FFFFFFFFFFFF2154 : 7E00                		moveq	#0,d7
(1) 2017/FFFFFFFFFFFF2156 : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/FFFFFFFFFFFF215A : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/FFFFFFFFFFFF215E : 670E                 		beq.s	.sameThing
(1) 2020/FFFFFFFFFFFF2160 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/FFFFFFFFFFFF2166 : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/FFFFFFFFFFFF216A : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/FFFFFFFFFFFF216E :                     .sameThing:
(1) 2024/FFFFFFFFFFFF216E : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/FFFFFFFFFFFF2172 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/FFFFFFFFFFFF2176 : 6748                 		beq.s	.return
(1) 2027/FFFFFFFFFFFF2178 : DE47                 		add.w	d7,d7
(1) 2028/FFFFFFFFFFFF217A : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/FFFFFFFFFFFF217E : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/FFFFFFFFFFFF2182 : 3E18                 		move.w	(a0)+,d7
(1) 2031/FFFFFFFFFFFF2184 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/FFFFFFFFFFFF2188 : 670C                 		beq.s	.keepspd
(1) 2033/FFFFFFFFFFFF218A : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/FFFFFFFFFFFF2190 : 6A2E                 		bpl.s	.return
(1) 2035/FFFFFFFFFFFF2192 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/FFFFFFFFFFFF2196 :                     .keepspd:
(1) 2037/FFFFFFFFFFFF2196 : 7C00                 		moveq	#0,d6
(1) 2038/FFFFFFFFFFFF2198 : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/FFFFFFFFFFFF219C : DE47                 		add.w	d7,d7
(1) 2040/FFFFFFFFFFFF219E : 3C10                 		move.w	(a0),d6
(1) 2041/FFFFFFFFFFFF21A0 : D0C7                 		adda	d7,a0
(1) 2042/FFFFFFFFFFFF21A2 : 3A10                 		move.w	(a0),d5
(1) 2043/FFFFFFFFFFFF21A4 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/FFFFFFFFFFFF21A8 : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/FFFFFFFFFFFF21AA : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/FFFFFFFFFFFF21AE : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/FFFFFFFFFFFF21B0 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/FFFFFFFFFFFF21B4 : 671A                 		beq.s	.goToFrame
(1) 2049/FFFFFFFFFFFF21B6 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/FFFFFFFFFFFF21BA : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/FFFFFFFFFFFF21C0 :                     .return:
(1) 2052/FFFFFFFFFFFF21C0 : 601C                 		bra.s	.exit_anim
(1) 2053/FFFFFFFFFFFF21C2 :                     .noAnim:
(1) 2054/FFFFFFFFFFFF21C2 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/FFFFFFFFFFFF21C8 : 3A06                 		move.w	d6,d5
(1) 2056/FFFFFFFFFFFF21CA : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/FFFFFFFFFFFF21CE : 600E                		bra.s	.exit_anim
(1) 2058/FFFFFFFFFFFF21D0 :                     .goToFrame:
(1) 2059/FFFFFFFFFFFF21D0 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/FFFFFFFFFFFF21D4 : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/FFFFFFFFFFFF21DA :                     .lastFrame:
(1) 2062/FFFFFFFFFFFF21DA : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/FFFFFFFFFFFF21DE :                     .exit_anim:
(1) 2064/FFFFFFFFFFFF21DE : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/FFFFFFFFFFFF21E2 : 4E75                		rts
(1) 2066/FFFFFFFFFFFF21E4 :                     
(1) 2067/FFFFFFFFFFFF21E4 :                     ; --------------------------------------------------------
(1) 2068/FFFFFFFFFFFF21E4 :                     ; object_Touch
(1) 2069/FFFFFFFFFFFF21E4 :                     ;
(1) 2070/FFFFFFFFFFFF21E4 :                     ; Detects collision with another Object
(1) 2071/FFFFFFFFFFFF21E4 :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/FFFFFFFFFFFF21E4 :                     ;
(1) 2073/FFFFFFFFFFFF21E4 :                     ; Input:
(1) 2074/FFFFFFFFFFFF21E4 :                     ; a6   | This object
(1) 2075/FFFFFFFFFFFF21E4 :                     ;
(1) 2076/FFFFFFFFFFFF21E4 :                     ; Returns:
(1) 2077/FFFFFFFFFFFF21E4 :                     ; d0.l | If Nothing: 0
(1) 2078/FFFFFFFFFFFF21E4 :                     ;        If Found:   The target's RAM location
(1) 2079/FFFFFFFFFFFF21E4 :                     ; --------------------------------------------------------
(1) 2080/FFFFFFFFFFFF21E4 :                     
(1) 2081/FFFFFFFFFFFF21E4 :                     object_Touch:
(1) 2082/FFFFFFFFFFFF21E4 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/FFFFFFFFFFFF21E8 : 7000                		moveq	#0,d0
(1) 2084/FFFFFFFFFFFF21EA : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/FFFFFFFFFFFF21EE : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/FFFFFFFFFFFF21F2 : 8C45                		or.w	d5,d6
(1) 2087/FFFFFFFFFFFF21F4 : 671E                		beq	.exit_this
(1) 2088/FFFFFFFFFFFF21F6 : 4BF8 E59C           		lea	(RAM_Objects).w,a5
(1) 2089/FFFFFFFFFFFF21FA : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/FFFFFFFFFFFF21FC :                     .next:
(1) 2091/FFFFFFFFFFFF21FC : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/FFFFFFFFFFFF21FE : 670A                		beq.s	.skip
(1) 2093/FFFFFFFFFFFF2200 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/FFFFFFFFFFFF2202 : 6706                		beq.s	.skip
(1) 2095/FFFFFFFFFFFF2204 : 6114                		bsr.s	.check_this
(1) 2096/FFFFFFFFFFFF2206 : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/FFFFFFFFFFFF2208 : 660A                		bne.s	.exit_this
(1) 2098/FFFFFFFFFFFF220A : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/FFFFFFFFFFFF220E : 51CF FFEC           		dbf	d7,.next
(1) 2100/FFFFFFFFFFFF2212 : 7000                		moveq	#0,d0
(1) 2101/FFFFFFFFFFFF2214 :                     .exit_this:
(1) 2102/FFFFFFFFFFFF2214 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/FFFFFFFFFFFF2218 : 4E75                		rts
(1) 2104/FFFFFFFFFFFF221A :                     
(1) 2105/FFFFFFFFFFFF221A :                     ; main check
(1) 2106/FFFFFFFFFFFF221A :                     .check_this:
(1) 2107/FFFFFFFFFFFF221A : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/FFFFFFFFFFFF221C :                     	; d6 - Y current top
(1) 2109/FFFFFFFFFFFF221C :                     	; d5 - Y current bottom
(1) 2110/FFFFFFFFFFFF221C :                     	; d4 - Y target top
(1) 2111/FFFFFFFFFFFF221C :                     	; d3 - Y target bottom
(1) 2112/FFFFFFFFFFFF221C :                     	; Check X
(1) 2113/FFFFFFFFFFFF221C : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/FFFFFFFFFFFF2220 : 6700 00B4           		beq	.not_ytop
(1) 2115/FFFFFFFFFFFF2224 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/FFFFFFFFFFFF2228 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/FFFFFFFFFFFF222A : 3401                		move.w	d1,d2
(1) 2118/FFFFFFFFFFFF222C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/FFFFFFFFFFFF222E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/FFFFFFFFFFFF2232 :                     ; 		lsl.w	#3,d1
(1) 2121/FFFFFFFFFFFF2232 :                     ; 		lsl.w	#3,d2
(1) 2122/FFFFFFFFFFFF2232 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/FFFFFFFFFFFF2234 : 9C41                		sub.w	d1,d6
(1) 2124/FFFFFFFFFFFF2236 : DA42                		add.w	d2,d5
(1) 2125/FFFFFFFFFFFF2238 : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/FFFFFFFFFFFF223C : 6700 0098           		beq	.not_ytop
(1) 2127/FFFFFFFFFFFF2240 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/FFFFFFFFFFFF2244 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/FFFFFFFFFFFF2246 : 3401                		move.w	d1,d2
(1) 2130/FFFFFFFFFFFF2248 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/FFFFFFFFFFFF224A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/FFFFFFFFFFFF224E :                     ; 		lsl.w	#3,d1
(1) 2133/FFFFFFFFFFFF224E :                     ; 		lsl.w	#3,d2
(1) 2134/FFFFFFFFFFFF224E : 5342                		subq.w	#1,d2
(1) 2135/FFFFFFFFFFFF2250 : 9841                		sub.w	d1,d4
(1) 2136/FFFFFFFFFFFF2252 : D642                		add.w	d2,d3
(1) 2137/FFFFFFFFFFFF2254 : B646                		cmp.w	d6,d3
(1) 2138/FFFFFFFFFFFF2256 : 6D7E                		blt	.not_ytop
(1) 2139/FFFFFFFFFFFF2258 : B845                		cmp.w	d5,d4
(1) 2140/FFFFFFFFFFFF225A : 6C7A                		bge	.not_ytop
(1) 2141/FFFFFFFFFFFF225C :                     
(1) 2142/FFFFFFFFFFFF225C :                     	; Check Y
(1) 2143/FFFFFFFFFFFF225C : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/FFFFFFFFFFFF2260 : 6774                		beq	.not_ytop
(1) 2145/FFFFFFFFFFFF2262 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/FFFFFFFFFFFF2266 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/FFFFFFFFFFFF2268 : 3401                		move.w	d1,d2
(1) 2148/FFFFFFFFFFFF226A : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/FFFFFFFFFFFF226C : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/FFFFFFFFFFFF2270 :                     ; 		lsl.w	#3,d1
(1) 2151/FFFFFFFFFFFF2270 :                     ; 		lsl.w	#3,d2
(1) 2152/FFFFFFFFFFFF2270 : 5342                		subq.w	#1,d2
(1) 2153/FFFFFFFFFFFF2272 : 9C41                		sub.w	d1,d6
(1) 2154/FFFFFFFFFFFF2274 : DA42                		add.w	d2,d5
(1) 2155/FFFFFFFFFFFF2276 : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/FFFFFFFFFFFF227A : 675A                		beq	.not_ytop
(1) 2157/FFFFFFFFFFFF227C : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/FFFFFFFFFFFF2280 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/FFFFFFFFFFFF2282 : 3401                		move.w	d1,d2
(1) 2160/FFFFFFFFFFFF2284 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/FFFFFFFFFFFF2286 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/FFFFFFFFFFFF228A :                     ; 		lsl.w	#3,d1
(1) 2163/FFFFFFFFFFFF228A :                     ; 		lsl.w	#3,d2
(1) 2164/FFFFFFFFFFFF228A : 5342                		subq.w	#1,d2
(1) 2165/FFFFFFFFFFFF228C : 9841                		sub.w	d1,d4
(1) 2166/FFFFFFFFFFFF228E : D642                		add.w	d2,d3
(1) 2167/FFFFFFFFFFFF2290 : B646                		cmp.w	d6,d3
(1) 2168/FFFFFFFFFFFF2292 : 6D42                		blt.s	.not_ytop
(1) 2169/FFFFFFFFFFFF2294 : B845                		cmp.w	d5,d4
(1) 2170/FFFFFFFFFFFF2296 : 6C3E                		bge.s	.not_ytop
(1) 2171/FFFFFFFFFFFF2298 :                     
(1) 2172/FFFFFFFFFFFF2298 :                     	; Special Z check
(1) 2173/FFFFFFFFFFFF2298 : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/FFFFFFFFFFFF229C : 6736                		beq.s	.set_ok
(1) 2175/FFFFFFFFFFFF229E : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/FFFFFFFFFFFF22A2 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/FFFFFFFFFFFF22A4 : 3401                		move.w	d1,d2
(1) 2178/FFFFFFFFFFFF22A6 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/FFFFFFFFFFFF22A8 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/FFFFFFFFFFFF22AC :                     ; 		lsl.w	#3,d1
(1) 2181/FFFFFFFFFFFF22AC :                     ; 		lsl.w	#3,d2
(1) 2182/FFFFFFFFFFFF22AC : 5342                		subq.w	#1,d2
(1) 2183/FFFFFFFFFFFF22AE : 9C41                		sub.w	d1,d6
(1) 2184/FFFFFFFFFFFF22B0 : DA42                		add.w	d2,d5
(1) 2185/FFFFFFFFFFFF22B2 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/FFFFFFFFFFFF22B6 : 671C                		beq.s	.set_ok
(1) 2187/FFFFFFFFFFFF22B8 : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/FFFFFFFFFFFF22BC : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/FFFFFFFFFFFF22BE : 3401                		move.w	d1,d2
(1) 2190/FFFFFFFFFFFF22C0 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/FFFFFFFFFFFF22C2 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/FFFFFFFFFFFF22C6 :                     ; 		lsl.w	#3,d1
(1) 2193/FFFFFFFFFFFF22C6 :                     ; 		lsl.w	#3,d2
(1) 2194/FFFFFFFFFFFF22C6 : 5342                		subq.w	#1,d2
(1) 2195/FFFFFFFFFFFF22C8 : 9841                		sub.w	d1,d4
(1) 2196/FFFFFFFFFFFF22CA : D642                		add.w	d2,d3
(1) 2197/FFFFFFFFFFFF22CC : B646                		cmp.w	d6,d3
(1) 2198/FFFFFFFFFFFF22CE : 6D06                		blt	.not_ytop
(1) 2199/FFFFFFFFFFFF22D0 : B845                		cmp.w	d5,d4
(1) 2200/FFFFFFFFFFFF22D2 : 6C02                		bge	.not_ytop
(1) 2201/FFFFFFFFFFFF22D4 :                     .set_ok:
(1) 2202/FFFFFFFFFFFF22D4 : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/FFFFFFFFFFFF22D6 :                     .not_ytop:
(1) 2204/FFFFFFFFFFFF22D6 : 4E75                		rts
(1) 2205/FFFFFFFFFFFF22D8 :                     
(1) 2206/FFFFFFFFFFFF22D8 :                     ; ============================================================
(1) 2207/FFFFFFFFFFFF22D8 :                     ; --------------------------------------------------------
(1) 2208/FFFFFFFFFFFF22D8 :                     ; object_GetSprInfo
(1) 2209/FFFFFFFFFFFF22D8 :                     ;
(1) 2210/FFFFFFFFFFFF22D8 :                     ; Call this before using
(1) 2211/FFFFFFFFFFFF22D8 :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/FFFFFFFFFFFF22D8 :                     ;
(1) 2213/FFFFFFFFFFFF22D8 :                     ; Input:
(1) 2214/FFFFFFFFFFFF22D8 :                     ; a6   | This object
(1) 2215/FFFFFFFFFFFF22D8 :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/FFFFFFFFFFFF22D8 :                     ;        - Set to 0 for 3D Sprites
(1) 2217/FFFFFFFFFFFF22D8 :                     ; d1.w | Flags
(1) 2218/FFFFFFFFFFFF22D8 :                     ;
(1) 2219/FFFFFFFFFFFF22D8 :                     ; Output:
(1) 2220/FFFFFFFFFFFF22D8 :                     ; d0.l | X and Y position
(1) 2221/FFFFFFFFFFFF22D8 :                     ; d1.l | Flags and Z Position
(1) 2222/FFFFFFFFFFFF22D8 :                     ; d4.w | Current frame
(1) 2223/FFFFFFFFFFFF22D8 :                     ; --------------------------------------------------------
(1) 2224/FFFFFFFFFFFF22D8 :                     
(1) 2225/FFFFFFFFFFFF22D8 :                     object_MdMars_GetSprInfo:
(1) 2227/FFFFFFFFFFFF22D8 : 4841                		swap	d1
(1) 2228/FFFFFFFFFFFF22DA : 322E 000C           		move.w	obj_z(a6),d1
(1) 2229/FFFFFFFFFFFF22DE : 4840                		swap	d0
(1) 2230/FFFFFFFFFFFF22E0 : 382E 0004           		move.w	obj_x(a6),d4
(1) 2231/FFFFFFFFFFFF22E4 : 9840                		sub.w	d0,d4
(1) 2232/FFFFFFFFFFFF22E6 : 4844                		swap	d4
(1) 2233/FFFFFFFFFFFF22E8 : 4840                		swap	d0
(1) 2234/FFFFFFFFFFFF22EA : 382E 0008           		move.w	obj_y(a6),d4		; d0 - Xpos | Ypos
(1) 2235/FFFFFFFFFFFF22EE : 9840                		sub.w	d0,d4
(1) 2236/FFFFFFFFFFFF22F0 : C940                		exg.l	d4,d0
(1) 2237/FFFFFFFFFFFF22F2 : 7800                		moveq	#0,d4
(1) 2238/FFFFFFFFFFFF22F4 : 382E 0020           		move.w	obj_frame(a6),d4
(1) 2240/FFFFFFFFFFFF22F8 : 4E75                		rts
(1) 2241/FFFFFFFFFFFF22FA :                     
     196/FFFFFFFFFFFF22FA :                     
     197/FFFFFFFFFFFF22FA :                     ; --------------------------------------------------------
     198/FFFFFFFFFFFF22FA :                     ; SCREEN MODE MAIN LOOP
     199/FFFFFFFFFFFF22FA :                     ;
     200/FFFFFFFFFFFF22FA :                     ;  MD/Pico: Direct ROM jump
     201/FFFFFFFFFFFF22FA :                     ; CD/CD32X: Reads file from DISC and
     202/FFFFFFFFFFFF22FA :                     ;           transfers code to RAM
     203/FFFFFFFFFFFF22FA :                     ;      32X: Code is stored on ROM but runs in
     204/FFFFFFFFFFFF22FA :                     ;           RAM to prevent bus-conflicts with the
     205/FFFFFFFFFFFF22FA :                     ;           SH2's view of ROM at CS1
     206/FFFFFFFFFFFF22FA :                     ;
     207/FFFFFFFFFFFF22FA :                     ; - Returning in your current screen code loops here
     208/FFFFFFFFFFFF22FA :                     ; - 32X/CD32X:
     209/FFFFFFFFFFFF22FA :                     ;   This will turn OFF the 32X's current video mode
     210/FFFFFFFFFFFF22FA :                     ; --------------------------------------------------------
     211/FFFFFFFFFFFF22FA :                     
     212/FFFFFFFFFFFF22FA :                     Md_ReadModes:
     213/FFFFFFFFFFFF22FA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     219/FFFFFFFFFFFF22FE : 6100 F138           		bsr	Video_MdMars_VideoOff		; Turn OFF all 32X visuals
     221/FFFFFFFFFFFF2302 : 7000                		moveq	#0,d0
     222/FFFFFFFFFFFF2304 : 3038 F5F8           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     223/FFFFFFFFFFFF2308 : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     224/FFFFFFFFFFFF230C : E948                		lsl.w	#4,d0				; number*$10
     225/FFFFFFFFFFFF230E : 41FB 001E           		lea	.pick_mode(pc,d0.w),a0		; Read list
     226/FFFFFFFFFFFF2312 :                     	; SCD/CD32X
     237/FFFFFFFFFFFF2312 : 207B 001A           		movea.l	.pick_mode(pc,d0.w),a0		; a0 - ROM Location(+$880000)
     238/FFFFFFFFFFFF2316 : 43F9 FFFF 2C00      		lea	(RAM_UserCode).l,a1		; a1 - Output location
     239/FFFFFFFFFFFF231C : 3E3C 83FF           		move.w	#(MAX_UserCode)-1,d7		; Copy manually
     240/FFFFFFFFFFFF2320 :                     .copyme2:
     241/FFFFFFFFFFFF2320 : 12D8                		move.b	(a0)+,(a1)+
     242/FFFFFFFFFFFF2322 : 51CF FFFC           		dbf	d7,.copyme2
     243/FFFFFFFFFFFF2326 : 4EB9 FFFF 2C00      		jsr	(RAM_UserCode).l
     244/FFFFFFFFFFFF232C :                     	; Genesis and Pico
     249/FFFFFFFFFFFF232C : 60CC                		bra.s	Md_ReadModes			; Loop on rts
     250/FFFFFFFFFFFF232E :                     
     251/FFFFFFFFFFFF232E :                     ; ====================================================================
     252/FFFFFFFFFFFF232E :                     ; ---------------------------------------------
     253/FFFFFFFFFFFF232E :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     254/FFFFFFFFFFFF232E :                     ; ---------------------------------------------
     255/FFFFFFFFFFFF232E :                     
     256/FFFFFFFFFFFF232E :                     .pick_mode:
     257/FFFFFFFFFFFF232E :                     		include "game/screens.asm"
(1)    1/FFFFFFFFFFFF232E :                     ; ============================================================
(1)    2/FFFFFFFFFFFF232E :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF232E :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/FFFFFFFFFFFF232E :                     ;
(1)    5/FFFFFFFFFFFF232E :                     ; - Screen CODE includes: incl_code.asm
(1)    6/FFFFFFFFFFFF232E :                     ;
(1)    7/FFFFFFFFFFFF232E :                     ; - DATA Bank includes: incl_data.asm
(1)    8/FFFFFFFFFFFF232E :                     ;
(1)    9/FFFFFFFFFFFF232E :                     ; ** For CD/CD32X **
(1)   10/FFFFFFFFFFFF232E :                     ;    Add your ISO file entries for both
(1)   11/FFFFFFFFFFFF232E :                     ;    CODE and DATA in iso_files.asm
(1)   12/FFFFFFFFFFFF232E :                     ; --------------------------------------------------------
(1)   13/FFFFFFFFFFFF232E :                     
(1)   14/FFFFFFFFFFFF232E :                     ; Entry:
(1)   15/FFFFFFFFFFFF232E : 008B B314           		dc.l Md_Screen00	; ****
(1)   16/FFFFFFFFFFFF2332 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2338 : 3030 2E42 494E    
(1)   17/FFFFFFFFFFFF233E : 008B B4C4           		dc.l Md_Screen01	; ****
(1)   18/FFFFFFFFFFFF2342 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
         FFFFFFFFFFFF2348 : 3031 2E42 494E    
(1)   19/FFFFFFFFFFFF234E : 008B B94C           		dc.l Md_Screen02	; ****
(1)   20/FFFFFFFFFFFF2352 : 5343 5245 454E      		dc.b "SCREEN02.BIN"
         FFFFFFFFFFFF2358 : 3032 2E42 494E    
(1)   21/FFFFFFFFFFFF235E : 008B CD50           		dc.l Md_Screen03	; ****
(1)   22/FFFFFFFFFFFF2362 : 5343 5245 454E      		dc.b "SCREEN03.BIN"
         FFFFFFFFFFFF2368 : 3033 2E42 494E    
(1)   23/FFFFFFFFFFFF236E : 008B D3B4           		dc.l Md_Screen04	; ****
(1)   24/FFFFFFFFFFFF2372 : 5343 5245 454E      		dc.b "SCREEN04.BIN"
         FFFFFFFFFFFF2378 : 3034 2E42 494E    
(1)   25/FFFFFFFFFFFF237E : 008B B314           		dc.l Md_Screen00	; ****
(1)   26/FFFFFFFFFFFF2382 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2388 : 3030 2E42 494E    
(1)   27/FFFFFFFFFFFF238E : 008B B314           		dc.l Md_Screen00	; ****
(1)   28/FFFFFFFFFFFF2392 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2398 : 3030 2E42 494E    
(1)   29/FFFFFFFFFFFF239E : 008B D794           		dc.l Md_Screen07	; ****
(1)   30/FFFFFFFFFFFF23A2 : 5343 5245 454E      		dc.b "SCREEN07.BIN"
         FFFFFFFFFFFF23A8 : 3037 2E42 494E    
(1)   31/FFFFFFFFFFFF23AE :                     
     258/FFFFFFFFFFFF23AE :                     
     259/FFFFFFFFFFFF23AE :                     ; ====================================================================
     260/FFFFFFFFFFFF23AE :                     
     262/FFFFFFFFFFFF23AE :                     .end:
     263/FFFFFFFFFFFF23AE : (MACRO)              		erreport "NIKONA RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     264/    2CFC :                     		dephase
     265/    2CFC :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     267/    2CFC :                     
     268/    2CFC :                     Md_SysCode_e:
     269/    2CFC :                     		align 2
     270/    2CFC :                     
     271/    2CFC :                     ; ===========================================================================
     272/    2CFC :                     ; ----------------------------------------------------------------
     273/    2CFC :                     ; DATA section shared on both Cartridge or Disc
     274/    2CFC :                     ; ----------------------------------------------------------------
     275/    2CFC :                     
     276/    2CFC :                     ; --------------------------------------------------------
     277/    2CFC :                     ; CD/CD32X ISO header and files
     278/    2CFC :                     ; --------------------------------------------------------
     279/    2CFC :                     
     295/    2CFC :                     
     296/    2CFC :                     ; ===========================================================================
     297/    2CFC :                     ; --------------------------------------------------------
     298/    2CFC :                     ; Z80 driver include
     299/    2CFC :                     ;
     300/    2CFC :                     ; SCD/CD32X: Stored on DISC
     301/    2CFC :                     ; --------------------------------------------------------
     302/    2CFC :                     
     308/  882CFC :                     		phase $880000+*
     310/  882CFC :                     Z80_CODE:
     312/    2CFC :                     		dephase
     314/    2CFC :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    2CFC :                     ; ===========================================================================
(1)    2/    2CFC :                     ; -------------------------------------------------------------------
(1)    3/    2CFC :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/    2CFC :                     ; -------------------------------------------------------------------
(1)    5/    2CFC :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =10H                 MAX_RCACH	equ 10h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   19/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   20/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   21/       0 : =0H                  DBUG_DAC	equ 0		; *DEBUG* Set to 1 to check the DAC playback quality
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; trk_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   36/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   37/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXES START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 : =0H                  chnl_Flags	equ 0	; Playback flags: %E0LRevin ** MUST STAY AT 0
(1)   70/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   71/       0 : =2H                  chnl_Note	equ 2	; IT Musical note or command
(1)   72/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   73/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   74/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   75/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   76/       0 : =7H                  chnl_Type	equ 7	; Impulse update bits
(1)   77/       0 :                     
(1)   78/       0 :                     
(1)   79/       0 :                     ; Table struct
(1)   80/       0 :                     
(1)   81/       0 : =0H                  ztbl_Link	equ 00h		; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h		; !! 00h-7Fh: Priority level or 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h		; Chip index (YM2612: direct KEY index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h		; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h		; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h		; Pitchbend add/sub
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h		; Current Volume: 00-max
(1)   88/       0 : =9H                  ztbl_EffBuff	equ 09h		; Effect buffer
(1)   89/       0 : =0AH                 ztbl_VarT0	equ 0Ah		; !! FM ins LSB or SCD PCM panning
(1)   90/       0 : =0BH                 ztbl_VarT1	equ 0Bh		; !! FM ins MSB
(1)   91/       0 : =0CH                 ztbl_FM_alfd	equ 0Ch		; !! copy of algorithm and feedback
(1)   92/       0 : =0DH                 ztbl_FM_pmam	equ 0Dh		; !! copy of PMS, AMS (panning ignored)
(1)   93/       0 : =0EH                 ztbl_FM_lfo	equ 0Eh		; !! copy of LFO
(1)   94/       0 : =0FH                 ztbl_FM_keys	equ 0Fh		; !! Current keys
(1)   95/       0 :                     
(1)   96/       0 :                     ; --------------------------------------------------------
(1)   97/       0 :                     ; Variables
(1)   98/       0 :                     ; --------------------------------------------------------
(1)   99/       0 :                     
(1)  100/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)  101/       0 : =0H                  zopcNop		equ 00h
(1)  102/       0 : =8H                  zopcEx		equ 08h
(1)  103/       0 : =0C9H                zopcRet		equ 0C9h
(1)  104/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  105/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  106/       0 :                     
(1)  107/       0 :                     ; PSG external control
(1)  108/       0 : =0H                  COM		equ 0
(1)  109/       0 : =4H                  LEV		equ 4
(1)  110/       0 : =8H                  ATK		equ 8
(1)  111/       0 : =0CH                 DKY		equ 12
(1)  112/       0 : =10H                 SLV		equ 16
(1)  113/       0 : =14H                 RRT		equ 20
(1)  114/       0 : =18H                 MODE		equ 24
(1)  115/       0 : =1CH                 DTL		equ 28
(1)  116/       0 : =20H                 DTH		equ 32
(1)  117/       0 : =24H                 ALV		equ 36
(1)  118/       0 : =28H                 FLG		equ 40
(1)  119/       0 : =2CH                 TMR		equ 44
(1)  120/       0 : =30H                 PVOL		equ 48
(1)  121/       0 : =34H                 PARP		equ 52
(1)  122/       0 : =38H                 PTMR		equ 56
(1)  123/       0 :                     
(1)  124/       0 :                     ; PWM control
(1)  125/       0 :                     ; PWCOM		equ 0
(1)  126/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  127/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  128/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  129/       0 :                     ; PWINSH	equ 32	; **
(1)  130/       0 :                     ; PWINSM	equ 40	; **
(1)  131/       0 :                     ; PWINSL	equ 48	; **
(1)  132/       0 :                     
(1)  133/       0 :                     ; ====================================================================
(1)  134/       0 :                     ; --------------------------------------------------------
(1)  135/       0 :                     ; Code starts here
(1)  136/       0 :                     ; --------------------------------------------------------
(1)  137/       0 :                     
(1)  138/       0 : F3                  		di			; Disable interrupts
(1)  139/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  140/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  141/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  142/       8 :                     
(1)  143/       8 :                     ; --------------------------------------------------------
(1)  144/       8 :                     ; RST 8 (dac_me)
(1)  145/       8 :                     ; *** self-modifiable code ***
(1)  146/       8 :                     ;
(1)  147/       8 :                     ; Writes wave data to DAC using data stored
(1)  148/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  149/       8 :                     ; instructions to keep the samplerate stable.
(1)  150/       8 :                     ;
(1)  151/       8 :                     ; Input (EXX):
(1)  152/       8 :                     ;  c - WAVE buffer MSB
(1)  153/       8 :                     ; de - Pitch (xx.00)
(1)  154/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Uses (EXX):
(1)  157/       8 :                     ; b
(1)  158/       8 :                     ;
(1)  159/       8 :                     ; Notes:
(1)  160/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  161/       8 :                     ; wave playback.
(1)  162/       8 :                     ;
(1)  163/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  164/       8 :                     ; and
(1)  165/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  166/       8 :                     ;
(1)  167/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  168/       8 :                     ; --------------------------------------------------------
(1)  169/       8 :                     
(1)  170/       8 :                     ; EXX set:
(1)  171/       8 :                     ; af - temporal
(1)  172/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  173/       8 :                     ; de - pitch increment
(1)  174/       8 :                     ; hl - wave buffer position 00.00h
(1)  175/       8 :                     ; 		org 8
(1)  176/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  177/       9 : 08                  		ex	af,af'		; Swap af
(1)  178/       A : 45                  		ld	b,l		; Save old hl buff
(1)  179/       B : 6C                  		ld	l,h		;
(1)  180/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  181/       D : 3E 2A               		ld	a,2Ah		;
(1)  182/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  183/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  184/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  185/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  186/      17 : 68                  		ld	l,b		;
(1)  187/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  188/      19 : 08                  		ex	af,af'		; Return af
(1)  189/      1A : D9                  		exx			; * return registers
(1)  190/      1B : C9                  		ret
(1)  191/      1C :                     
(1)  192/      1C :                     ; --------------------------------------------------------
(1)  193/      1C :                     ; 1Ch - Master tracklist pointer
(1)  194/      1C :                     gemaMstrListPos:
(1)  195/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  196/      1D : 00                  		db 0
(1)  197/      1E : 00                  		db 0
(1)  198/      1F : 00                  		db 0
(1)  199/      20 :                     
(1)  200/      20 :                     ; --------------------------------------------------------
(1)  201/      20 :                     ; RST 20h (dac_me)
(1)  202/      20 :                     ; *** self-modifiable code ***
(1)  203/      20 :                     ;
(1)  204/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  205/      20 :                     ; it playing.
(1)  206/      20 :                     ; --------------------------------------------------------
(1)  207/      20 :                     
(1)  208/      20 :                     ; 		org 20h
(1)  209/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  210/      21 : 3A E8 1B            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  211/      24 : D9                  		exx			; * swap regs
(1)  212/      25 : AC                  		xor	h		; Grab LSB.00
(1)  213/      26 : D9                  		exx			; * swap regs
(1)  214/      27 : E6 80               		and	80h		; Check if bit changed
(1)  215/      29 : C4 96 13            		call	nz,dac_refill	; If yes, Call refill and update LSB block
(1)  216/      2C : F1                  		pop	af
(1)  217/      2D : C9                  		ret
(1)  218/      2E :                     
(1)  219/      2E :                     ; --------------------------------------------------------
(1)  220/      2E :                     ; 02Eh - User read/write values
(1)  221/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  222/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  223/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  224/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  225/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  226/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  227/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK PCM transfers.
(1)  228/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  229/      38 :                     
(1)  230/      38 :                     ; --------------------------------------------------------
(1)  231/      38 :                     ; Z80 Interrupt at 0038h
(1)  232/      38 :                     ; --------------------------------------------------------
(1)  233/      38 :                     
(1)  234/      38 :                     ; 		org 38h			; Align 38h
(1)  235/      38 : ED 73 FD 1B         		ld	(tickSpSet),sp	; Write TICK flag using current sp (xx1F, read as tickFlag+1)
(1)  236/      3C : F3                  		di			; Disable interrupt
(1)  237/      3D : C9                  		ret
(1)  238/      3E :                     
(1)  239/      3E :                     ; --------------------------------------------------------
(1)  240/      3E :                     ; 03Eh - More user settings
(1)  241/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  242/      3F : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  243/      40 :                     
(1)  244/      40 :                     ; --------------------------------------------------------
(1)  245/      40 :                     ; 68K Read/Write area at 40h
(1)  246/      40 :                     ; --------------------------------------------------------
(1)  247/      40 :                     
(1)  248/      40 :                     ; 		org 40h
(1)  249/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  250/      50 :                     
(1)  251/      50 :                     ; --------------------------------------------------------
(1)  252/      50 :                     ; Initialize
(1)  253/      50 :                     ; --------------------------------------------------------
(1)  254/      50 :                     
(1)  255/      50 :                     z80_init:
(1)  256/      50 : CD 71 10            		call	gema_init		; Init values
(1)  257/      53 : FB                  		ei
(1)  258/      54 :                     
(1)  259/      54 :                     ; --------------------------------------------------------
(1)  260/      54 :                     ; MAIN LOOP
(1)  261/      54 :                     ; --------------------------------------------------------
(1)  262/      54 :                     
(1)  263/      54 :                     drv_loop:
(1)  264/      54 : CF                  		rst	8
(1)  265/      55 : CD DD 10            		call	get_tick		; Check tick on VBlank
(1)  266/      58 : E7                  		rst	20h			; Refill wave here
(1)  267/      59 : CF                  		rst	8
(1)  268/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  269/      5C : 3A FF 1B            		ld	a,(tickCnt)		; Decrement tick counter
(1)  270/      5F : D6 01               		sub	1
(1)  271/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  272/      63 : 32 FF 1B            		ld	(tickCnt),a
(1)  273/      66 : CD B8 11            		call	chip_env		; Process PSG and YM
(1)  274/      69 : CD DD 10            		call	get_tick		; Check for another tick
(1)  275/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  276/      6E :                     .noticks:
(1)  277/      6E : 3A FA 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  278/      71 : D6 01               		sub	1
(1)  279/      73 : 38 06               		jr	c,.nobeats
(1)  280/      75 : CF                  		rst	8
(1)  281/      76 : 32 FA 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  282/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  283/      7B :                     .nobeats:
(1)  284/      7B : CF                  		rst	8
(1)  285/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  286/      7D : B7                  		or	a
(1)  287/      7E : 28 14               		jr	z,.neither
(1)  288/      80 : 32 F6 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  289/      83 : CF                  		rst	8
(1)  290/      84 : CD DD 10            		call	get_tick
(1)  291/      87 : CD 19 06            		call	set_chips		; Send changes to sound chips
(1)  292/      8A : CD DD 10            		call	get_tick
(1)  293/      8D : CF                  		rst	8
(1)  294/      8E : CD 37 02            		call	upd_track		; Update track data
(1)  295/      91 : CD DD 10            		call	get_tick
(1)  296/      94 :                     .neither:
(1)  297/      94 : CF                  		rst	8
(1)  299/      95 : CD C8 0F            		call	zmars_send		; External communication with CD and 32X
(1)  301/      98 : CD DD 10            		call	get_tick
(1)  302/      9B :                     .next_cmd:
(1)  303/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  304/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  305/      9F : 3A 3F 00            		ld	a,(commZRead)
(1)  306/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  307/      A3 : 28 AF               		jr	z,drv_loop
(1)  308/      A5 : CF                  		rst	8
(1)  309/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  310/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  311/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  312/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  313/      B0 : 87                  		add	a,a			; ID * 2
(1)  314/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  315/      B4 : 16 00               		ld	d,0
(1)  316/      B6 : 5F                  		ld	e,a
(1)  317/      B7 : 19                  		add	hl,de
(1)  318/      B8 : 7E                  		ld	a,(hl)
(1)  319/      B9 : 23                  		inc	hl
(1)  320/      BA : 66                  		ld	h,(hl)
(1)  321/      BB : CF                  		rst	8
(1)  322/      BC : 6F                  		ld	l,a
(1)  323/      BD : E9                  		jp	(hl)
(1)  324/      BE :                     
(1)  325/      BE :                     ; --------------------------------------------------------
(1)  326/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  327/      BE :                     ; --------------------------------------------------------
(1)  328/      BE :                     
(1)  329/      BE :                     .grab_arg:
(1)  330/      BE : D5                  		push	de
(1)  331/      BF : E5                  		push	hl
(1)  332/      C0 :                     .getcbytel:
(1)  333/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  334/      C3 : 57                  		ld	d,a
(1)  335/      C4 : CF                  		rst	8
(1)  336/      C5 : 3A 3F 00            		ld	a,(commZRead)
(1)  337/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  338/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  339/      CB : 16 00               		ld	d,0
(1)  340/      CD : 5F                  		ld	e,a
(1)  341/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  342/      D1 : 19                  		add	hl,de
(1)  343/      D2 : CF                  		rst	8
(1)  344/      D3 : 3C                  		inc	a
(1)  345/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  346/      D6 : 32 3F 00            		ld	(commZRead),a
(1)  347/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  348/      DA : E1                  		pop	hl
(1)  349/      DB : D1                  		pop	de
(1)  350/      DC : C9                  		ret
(1)  351/      DD :                     
(1)  352/      DD :                     ; --------------------------------------------------------
(1)  353/      DD :                     
(1)  354/      DD :                     .list:
(1)  355/      DD : ED 00               		dw .cmnd_0		; 00h - TESTING
(1)  356/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  357/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  358/      E3 : 43 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  359/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  360/      E7 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  361/      E9 : BA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  362/      EB : F3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  363/      ED :                     
(1)  364/      ED :                     ; --------------------------------------------------------
(1)  365/      ED :                     ; Command 00h
(1)  366/      ED :                     ;
(1)  367/      ED :                     ; Reserved for TESTING purposes.
(1)  368/      ED :                     ; --------------------------------------------------------
(1)  369/      ED :                     
(1)  370/      ED :                     .cmnd_0:
(1)  371/      ED : C3 9B 00            		jp	.next_cmd
(1)  372/      F0 :                     
(1)  373/      F0 :                     ; --------------------------------------------------------
(1)  374/      F0 :                     ; Command 01h:
(1)  375/      F0 :                     ;
(1)  376/      F0 :                     ; Set the Track MASTER-list.
(1)  377/      F0 :                     ; --------------------------------------------------------
(1)  378/      F0 :                     
(1)  379/      F0 :                     .cmnd_1:
(1)  380/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  382/      F6 : 77                  		ld	(hl),a
(1)  383/      F7 : 2B                  		dec	hl
(1)  384/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  385/      FB : 77                  		ld	(hl),a
(1)  386/      FC : 2B                  		dec	hl
(1)  387/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  388/     100 : 77                  		ld	(hl),a
(1)  389/     101 : 2B                  		dec	hl
(1)  390/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     105 : 77                  		ld	(hl),a
(1)  392/     106 : C3 9B 00            		jp	.next_cmd
(1)  393/     109 :                     
(1)  394/     109 :                     ; --------------------------------------------------------
(1)  395/     109 :                     ; Command 02h:
(1)  396/     109 :                     ;
(1)  397/     109 :                     ; Make new track by sequence number
(1)  398/     109 :                     ;
(1)  399/     109 :                     ; Arguments:
(1)  400/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     109 :                     ; --------------------------------------------------------
(1)  402/     109 :                     
(1)  403/     109 :                     .cmnd_2:
(1)  404/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     10C : 4F                  		ld	c,a			; copy as c
(1)  406/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  407/     110 : 47                  		ld	b,a			; copy as b
(1)  408/     111 : CF                  		rst	8
(1)  409/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  410/     115 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     119 : B7                  		or	a
(1)  412/     11A : FA 29 01            		jp	m,.srch_mode
(1)  413/     11D :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11D :                     ; 		jr	z,.srch_mode
(1)  415/     11D : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  417/     122 : CF                  		rst	8
(1)  418/     123 : CD 11 02            		call	.cmnd_rdslot
(1)  419/     126 : C3 38 01            		jp	.wrtto_slot
(1)  420/     129 :                     ; -1
(1)  421/     129 :                     .srch_mode:
(1)  422/     129 : CD 24 02            		call	.srch_slot
(1)  423/     12C : FE FF               		cp	-1
(1)  424/     12E : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  425/     131 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  426/     133 : CA 38 01            		jp	z,.wrtto_slot
(1)  427/     136 : 18 F1               		jr	.srch_mode
(1)  428/     138 :                     .wrtto_slot:
(1)  429/     138 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  430/     13A : 23                  		inc	hl
(1)  431/     13B : CF                  		rst	8
(1)  432/     13C : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  433/     13D : 23                  		inc	hl
(1)  434/     13E : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  435/     13F : 79                  		ld	a,c
(1)  436/     140 : C3 9B 00            		jp	.next_cmd
(1)  437/     143 :                     
(1)  438/     143 :                     ; --------------------------------------------------------
(1)  439/     143 :                     ; Command 03h:
(1)  440/     143 :                     ;
(1)  441/     143 :                     ; Stop track with the same sequence number
(1)  442/     143 :                     ;
(1)  443/     143 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  444/     143 :                     ; --------------------------------------------------------
(1)  445/     143 :                     
(1)  446/     143 :                     .cmnd_3:
(1)  447/     143 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  448/     146 : 4F                  		ld	c,a			; copy to c
(1)  449/     147 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  450/     14A : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  451/     14E : B7                  		or	a
(1)  452/     14F : FA 61 01            		jp	m,.srch_del
(1)  453/     152 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  454/     152 :                     ; 		jr	z,.srch_del
(1)  455/     152 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  456/     154 : D2 9B 00            		jp	nc,.next_cmd
(1)  457/     157 : CF                  		rst	8
(1)  458/     158 : CD 11 02            		call	.cmnd_rdslot
(1)  459/     15B : CD 6E 01            		call	.wrtto_del
(1)  460/     15E : C3 9B 00            		jp	.next_cmd
(1)  461/     161 :                     ; -1
(1)  462/     161 :                     .srch_del:
(1)  463/     161 : CD 24 02            		call	.srch_slot
(1)  464/     164 : FE FF               		cp	-1
(1)  465/     166 : CA 9B 00            		jp	z,.next_cmd
(1)  466/     169 : CD 6E 01            		call	.wrtto_del
(1)  467/     16C : 18 F3               		jr	.srch_del
(1)  468/     16E :                     .wrtto_del:
(1)  469/     16E : CB 7E               		bit	7,(hl)
(1)  470/     170 : C8                  		ret	z
(1)  471/     171 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  472/     173 : 20 05               		jr	nz,.del_all
(1)  473/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  474/     178 : B9                  		cp	c
(1)  475/     179 : C0                  		ret	nz
(1)  476/     17A :                     .del_all:
(1)  477/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  478/     17C : 23                  		inc	hl
(1)  479/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  480/     17F : CF                  		rst	8
(1)  481/     180 : C9                  		ret
(1)  482/     181 :                     
(1)  483/     181 :                     ; --------------------------------------------------------
(1)  484/     181 :                     ; Command 05h:
(1)  485/     181 :                     ;
(1)  486/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  487/     181 :                     ;
(1)  488/     181 :                     ; Arguments:
(1)  489/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  490/     181 :                     ; --------------------------------------------------------
(1)  491/     181 :                     
(1)  492/     181 :                     .cmnd_5:
(1)  493/     181 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  494/     184 : 4F                  		ld	c,a			; copy to c
(1)  495/     185 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  496/     188 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  497/     18C : B7                  		or	a
(1)  498/     18D : FA 9F 01            		jp	m,.srch_fvol
(1)  499/     190 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  500/     190 :                     ; 		jr	z,.srch_fvol
(1)  501/     190 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  502/     192 : D2 9B 00            		jp	nc,.next_cmd
(1)  503/     195 : CF                  		rst	8
(1)  504/     196 : CD 11 02            		call	.cmnd_rdslot
(1)  505/     199 : CD AC 01            		call	.wrtto_fvol
(1)  506/     19C : C3 9B 00            		jp	.next_cmd
(1)  507/     19F :                     ; -1
(1)  508/     19F :                     .srch_fvol:
(1)  509/     19F : CD 24 02            		call	.srch_slot
(1)  510/     1A2 : FE FF               		cp	-1
(1)  511/     1A4 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  512/     1A7 : CD AC 01            		call	.wrtto_fvol
(1)  513/     1AA : 18 F3               		jr	.srch_fvol
(1)  514/     1AC :                     .wrtto_fvol:
(1)  515/     1AC : CB 7E               		bit	7,(hl)			; Active?
(1)  516/     1AE : C8                  		ret	z
(1)  517/     1AF : CB DE               		set	3,(hl)			; Volume update flag
(1)  518/     1B1 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  519/     1B4 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  520/     1B8 : CF                  		rst	8
(1)  521/     1B9 : C9                  		ret
(1)  522/     1BA :                     
(1)  523/     1BA :                     ; --------------------------------------------------------
(1)  524/     1BA :                     ; Command 06h:
(1)  525/     1BA :                     ;
(1)  526/     1BA :                     ; Set track's master volume
(1)  527/     1BA :                     ;
(1)  528/     1BA :                     ; Arguments:
(1)  529/     1BA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  530/     1BA :                     ; --------------------------------------------------------
(1)  531/     1BA :                     
(1)  532/     1BA :                     .cmnd_6:
(1)  533/     1BA : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  534/     1BD : 4F                  		ld	c,a			; copy to c
(1)  535/     1BE : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  536/     1C1 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  537/     1C5 : B7                  		or	a
(1)  538/     1C6 : FA D8 01            		jp	m,.srch_vol
(1)  539/     1C9 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  540/     1C9 :                     ; 		jr	z,.srch_vol
(1)  541/     1C9 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  542/     1CB : D2 9B 00            		jp	nc,.next_cmd
(1)  543/     1CE : CF                  		rst	8
(1)  544/     1CF : CD 11 02            		call	.cmnd_rdslot
(1)  545/     1D2 : CD E5 01            		call	.wrtto_vol
(1)  546/     1D5 : C3 9B 00            		jp	.next_cmd
(1)  547/     1D8 :                     ; -1
(1)  548/     1D8 :                     .srch_vol:
(1)  549/     1D8 : CD 24 02            		call	.srch_slot
(1)  550/     1DB : FE FF               		cp	-1
(1)  551/     1DD : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  552/     1E0 : CD E5 01            		call	.wrtto_vol
(1)  553/     1E3 : 18 F3               		jr	.srch_vol
(1)  554/     1E5 :                     .wrtto_vol:
(1)  555/     1E5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  556/     1E7 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  557/     1EA : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  558/     1ED : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  559/     1F1 : CF                  		rst	8
(1)  560/     1F2 : C9                  		ret
(1)  561/     1F3 :                     
(1)  562/     1F3 :                     ; --------------------------------------------------------
(1)  563/     1F3 :                     ; Command 07h:
(1)  564/     1F3 :                     ;
(1)  565/     1F3 :                     ; Set global sub-beats
(1)  566/     1F3 :                     ; --------------------------------------------------------
(1)  567/     1F3 :                     
(1)  568/     1F3 :                     .cmnd_7:
(1)  569/     1F3 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  570/     1F6 : 4F                  		ld	c,a
(1)  571/     1F7 : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  572/     1FA : 67                  		ld	h,a
(1)  573/     1FB : 69                  		ld	l,c
(1)  574/     1FC : 3A 3E 00            		ld	a,(palMode)
(1)  575/     1FF : B7                  		or	a
(1)  576/     200 : 28 04               		jr	z,.not_pal
(1)  577/     202 : 11 28 00            		ld	de,40
(1)  578/     205 : 19                  		add	hl,de
(1)  579/     206 :                     .not_pal:
(1)  580/     206 : 7C                  		ld	a,h
(1)  581/     207 : 32 FC 1C            		ld	(sbeatPtck+1),a
(1)  582/     20A : 7D                  		ld	a,l
(1)  583/     20B : 32 FB 1C            		ld	(sbeatPtck),a
(1)  584/     20E : C3 9B 00            		jp	.next_cmd
(1)  585/     211 :                     
(1)  586/     211 :                     ; --------------------------------------------------------
(1)  587/     211 :                     ; Shared subs
(1)  588/     211 :                     ; --------------------------------------------------------
(1)  589/     211 :                     
(1)  590/     211 :                     .cmnd_rdslot:
(1)  591/     211 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  592/     212 : 87                  		add	a,a			; id*8
(1)  593/     213 : 87                  		add	a,a
(1)  594/     214 : 16 00               		ld	d,0
(1)  595/     216 : 5F                  		ld	e,a
(1)  596/     217 : FD 19               		add	iy,de
(1)  597/     219 : FD 7E 00            		ld	a,(iy)
(1)  598/     21C : FD 66 01            		ld	h,(iy+1)
(1)  599/     21F : 6F                  		ld	l,a
(1)  600/     220 : E5                  		push	hl
(1)  601/     221 : DD E1               		pop	ix
(1)  602/     223 : C9                  		ret
(1)  603/     224 :                     
(1)  604/     224 :                     ; ------------------------------------------------
(1)  605/     224 :                     ; iy - nikona_BuffList
(1)  606/     224 :                     
(1)  607/     224 :                     .srch_slot:
(1)  608/     224 : FD 7E 00            		ld	a,(iy)
(1)  609/     227 : FE FF               		cp	-1			; End of list?
(1)  610/     229 : C8                  		ret	z
(1)  611/     22A : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  612/     22D : 6F                  		ld	l,a
(1)  613/     22E : E5                  		push	hl
(1)  614/     22F : DD E1               		pop	ix
(1)  615/     231 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  616/     234 : FD 19               		add	iy,de			; Next entry for later
(1)  617/     236 : C9                  		ret
(1)  618/     237 :                     
(1)  619/     237 :                     ; ====================================================================
(1)  620/     237 :                     ; ----------------------------------------------------------------
(1)  621/     237 :                     ; MAIN Playback section
(1)  622/     237 :                     ; ----------------------------------------------------------------
(1)  623/     237 :                     
(1)  624/     237 :                     ; --------------------------------------------------------
(1)  625/     237 :                     ; Read mini-impulse-tracker data
(1)  626/     237 :                     ; --------------------------------------------------------
(1)  627/     237 :                     
(1)  628/     237 :                     upd_track:
(1)  629/     237 : E7                  		rst	20h			; Refill wave
(1)  630/     238 : CD DD 10            		call	get_tick		; Check for tick flag
(1)  631/     23B : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  632/     23F :                     .trk_buffrs:
(1)  633/     23F : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  634/     242 : FE FF               		cp	-1
(1)  635/     244 : C8                  		ret	z
(1)  636/     245 : CF                  		rst	8
(1)  637/     246 : FD E5               		push	iy
(1)  638/     248 : CD 54 02            		call	.read_track
(1)  639/     24B : FD E1               		pop	iy
(1)  640/     24D : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  641/     250 : FD 19               		add	iy,de
(1)  642/     252 : 18 EB               		jr	.trk_buffrs
(1)  643/     254 :                     
(1)  644/     254 :                     ; ----------------------------------------
(1)  645/     254 :                     ; iy - Track buffer
(1)  646/     254 :                     ; ----------------------------------------
(1)  647/     254 :                     
(1)  648/     254 :                     .read_track:
(1)  649/     254 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  650/     257 : FD 66 01            		ld	h,(iy+1)
(1)  651/     25A : CF                  		rst	8
(1)  652/     25B : E5                  		push	hl
(1)  653/     25C : FD E1               		pop	iy			; change iy to hl
(1)  654/     25E : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  655/     261 : CB 78               		bit	7,b			; bit7: Track active?
(1)  656/     263 : C8                  		ret	z			; Return if not.
(1)  657/     264 : 78                  		ld	a,b
(1)  658/     265 : FE FF               		cp	-1			; Flag is -1?
(1)  659/     267 : C8                  		ret	z			; Return if mid-flag
(1)  660/     268 : CF                  		rst	8
(1)  661/     269 :                     	; ----------------------------------------
(1)  662/     269 :                     	; Track volume changes
(1)  663/     269 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  664/     26C : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  665/     26F : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  666/     272 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  667/     275 : 79                  		ld	a,c
(1)  668/     276 : BC                  		cp	h
(1)  669/     277 : 28 1E               		jr	z,.keep_vol
(1)  670/     279 : 30 06               		jr	nc,.fade_out
(1)  671/     27B : 11 80 FF            		ld	de,-80h
(1)  672/     27E : 19                  		add	hl,de
(1)  673/     27F : 18 0C               		jr	.too_much
(1)  674/     281 :                     .fade_out:
(1)  675/     281 : 19                  		add	hl,de
(1)  676/     282 : CF                  		rst	8
(1)  677/     283 : 7C                  		ld	a,h
(1)  678/     284 : B9                  		cp	c
(1)  679/     285 : 38 06               		jr	c,.too_much
(1)  680/     287 : 61                  		ld	h,c
(1)  681/     288 : 2E 00               		ld	l,0
(1)  682/     28A : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  683/     28D :                     .too_much:
(1)  684/     28D : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  685/     291 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  686/     294 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  687/     297 :                     .keep_vol:
(1)  688/     297 :                     	; ----------------------------------------
(1)  689/     297 : 3A F6 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  690/     29A : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  691/     29C : 28 03               		jr	z,.sfxmd
(1)  692/     29E : CB 4F               		bit	1,a			; BEAT passed?
(1)  693/     2A0 : C8                  		ret	z			; No BEAT.
(1)  694/     2A1 :                     .sfxmd:
(1)  695/     2A1 : CB 47               		bit	0,a			; TICK passed?
(1)  696/     2A3 : C8                  		ret	z			; No TICK.
(1)  697/     2A4 : CF                  		rst	8
(1)  698/     2A5 :                     	; ----------------------------------------
(1)  699/     2A5 :                     	; Start reading notes
(1)  700/     2A5 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  701/     2A7 : C4 2F 05            		call	nz,.first_fill
(1)  702/     2AA : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  703/     2AC : C4 28 05            		call	nz,.effect_fill
(1)  704/     2AF : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  705/     2B2 : 3D                  		dec	a
(1)  706/     2B3 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  707/     2B6 : B7                  		or	a			; Check a
(1)  708/     2B7 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  709/     2B8 : CF                  		rst	8
(1)  710/     2B9 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  711/     2BC : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  712/     2BF : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  713/     2C2 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  714/     2C5 : 79                  		ld	a,c			; Check rowcount
(1)  715/     2C6 : B0                  		or	b
(1)  716/     2C7 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  717/     2C9 : CF                  		rst	8			; If bc == 0 ...
(1)  718/     2CA : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  719/     2CD : 3C                  		inc	a
(1)  720/     2CE : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  721/     2D1 : CD 40 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  722/     2D4 : FE FF               		cp	-1			; Track finished?
(1)  723/     2D6 : C8                  		ret	z
(1)  724/     2D7 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  725/     2DA : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  726/     2DD :                     .row_active:
(1)  727/     2DD : CF                  		rst	8
(1)  728/     2DE : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  729/     2E1 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  730/     2E4 :                     
(1)  731/     2E4 :                     ; --------------------------------
(1)  732/     2E4 :                     ; Main read-loop
(1)  733/     2E4 :                     ; --------------------------------
(1)  734/     2E4 :                     
(1)  735/     2E4 :                     .next_note:
(1)  736/     2E4 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  737/     2E7 : B7                  		or	a
(1)  738/     2E8 : 20 16               		jr	nz,.decrow
(1)  739/     2EA : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  740/     2EB : B7                  		or	a
(1)  741/     2EC : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  742/     2EE : FA 0B 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  743/     2F1 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  744/     2F4 :                     
(1)  745/     2F4 :                     ; --------------------------------
(1)  746/     2F4 :                     ; Exit
(1)  747/     2F4 :                     ; --------------------------------
(1)  748/     2F4 :                     
(1)  749/     2F4 :                     .exit:
(1)  750/     2F4 : CF                  		rst	8
(1)  751/     2F5 : CD 08 04            		call	.inc_cpatt		; * Increment patt pos
(1)  752/     2F8 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  753/     2FB : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  754/     2FE : 18 03               		jr	.decrow_e
(1)  755/     300 :                     .decrow:
(1)  756/     300 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  757/     303 :                     .decrow_e:
(1)  758/     303 : 0B                  		dec	bc			; Decrement rowcount
(1)  759/     304 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  760/     307 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  761/     30A : C9                  		ret	; Exit.
(1)  762/     30B :                     
(1)  763/     30B :                     ; --------------------------------
(1)  764/     30B :                     ; New note request
(1)  765/     30B :                     ;
(1)  766/     30B :                     ; a - %1tcccccc
(1)  767/     30B :                     ;   | t - next byte has new type
(1)  768/     30B :                     ;   | c - channel
(1)  769/     30B :                     ; --------------------------------
(1)  770/     30B :                     
(1)  771/     30B :                     .has_note:
(1)  772/     30B : CF                  		rst	8
(1)  773/     30C : C5                  		push	bc			; Save rowcount
(1)  774/     30D : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  775/     30E : CD 08 04            		call	.inc_cpatt		; * Increment patt pos
(1)  776/     311 : E5                  		push	hl			; Save hl patt pos
(1)  777/     312 : FD E5               		push	iy
(1)  778/     314 : E1                  		pop	hl
(1)  779/     315 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  780/     319 : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  781/     31C : CF                  		rst	8
(1)  782/     31D : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  783/     31E : 79                  		ld	a,c			; Get patt note position
(1)  784/     31F : E6 1F               		and	00011111b		; Filter index bits
(1)  785/     321 : 5F                  		ld	e,a			; Save as e
(1)  786/     322 : 19                  		add	hl,de			; Increment more by this pos
(1)  787/     323 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  788/     324 : B7                  		or	a
(1)  789/     325 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  790/     327 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  791/     329 : 87                  		add	a,a
(1)  792/     32A : 87                  		add	a,a
(1)  793/     32B : 87                  		add	a,a
(1)  794/     32C : 5F                  		ld	e,a
(1)  795/     32D : DD 19               		add	ix,de
(1)  796/     32F : 18 2B               		jr	.cont_chnl
(1)  797/     331 :                     
(1)  798/     331 :                     ; Make NEW channel
(1)  799/     331 :                     ; ix - channel list start
(1)  800/     331 :                     .srch_new:
(1)  801/     331 : CF                  		rst	8
(1)  802/     332 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  803/     334 : 16 00               		ld	d,0		; Reset out index
(1)  804/     336 :                     .next_chnl:
(1)  805/     336 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  806/     339 : B7                  		or	a		; If plus, track channel is free
(1)  807/     33A : F2 51 03            		jp	p,.chnl_free
(1)  808/     33D : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  809/     33F : DD 23               		inc	ix
(1)  810/     341 : DD 23               		inc	ix
(1)  811/     343 : DD 23               		inc	ix
(1)  812/     345 : CF                  		rst	8
(1)  813/     346 : DD 23               		inc	ix
(1)  814/     348 : DD 23               		inc	ix
(1)  815/     34A : DD 23               		inc	ix
(1)  816/     34C : DD 23               		inc	ix
(1)  817/     34E : 14                  		inc	d		; Increment out index
(1)  818/     34F : 10 E5               		djnz	.next_chnl
(1)  819/     351 :                     .chnl_free:
(1)  820/     351 : CF                  		rst	8
(1)  821/     352 : 7A                  		ld	a,d			; Read index we got
(1)  822/     353 : E6 1F               		and	00011111b		; Filter bits
(1)  823/     355 : F6 80               		or	10000000b		; + set as used
(1)  824/     357 : 77                  		ld	(hl),a			; Write index slot
(1)  825/     358 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  826/     35C :                     .cont_chnl:
(1)  827/     35C :                     
(1)  828/     35C : E1                  		pop	hl			; Recover patt pos
(1)  829/     35D :                     	; ix - current channel
(1)  830/     35D : CF                  		rst	8
(1)  831/     35E : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  832/     361 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  833/     363 : 28 08               		jr	z,.old_type
(1)  834/     365 : 7E                  		ld	a,(hl)
(1)  835/     366 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  836/     369 : 47                  		ld	b,a			; Set to b
(1)  837/     36A : CD 08 04            		call	.inc_cpatt		; Next patt pos
(1)  838/     36D :                     .old_type:
(1)  839/     36D :                     	; b - evinEVIN
(1)  840/     36D :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  841/     36D :                     	;     evin: byte is already stored on track-channel buffer
(1)  842/     36D :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  843/     36D :                     
(1)  844/     36D : CF                  		rst	8
(1)  845/     36E : CB 40               		bit	0,b			; New NOTE?
(1)  846/     370 : 28 07               		jr	z,.no_note
(1)  847/     372 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  848/     373 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  849/     376 : CD 08 04            		call	.inc_cpatt
(1)  850/     379 :                     .no_note:
(1)  851/     379 : CB 48               		bit	1,b			; New INS?
(1)  852/     37B : 28 07               		jr	z,.no_ins
(1)  853/     37D : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  854/     37E : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  855/     381 : CD 08 04            		call	.inc_cpatt
(1)  856/     384 :                     .no_ins:
(1)  857/     384 : CB 50               		bit	2,b			; New VOL?
(1)  858/     386 : 28 07               		jr	z,.no_vol
(1)  859/     388 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  860/     389 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  861/     38C : CD 08 04            		call	.inc_cpatt
(1)  862/     38F :                     .no_vol:
(1)  863/     38F : CB 58               		bit	3,b			; New EFFECT?
(1)  864/     391 : 28 0F               		jr	z,.no_eff
(1)  865/     393 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  866/     394 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  867/     397 : CD 08 04            		call	.inc_cpatt
(1)  868/     39A : CF                  		rst	8
(1)  869/     39B : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  870/     39C : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  871/     39F : CD 08 04            		call	.inc_cpatt
(1)  872/     3A2 :                     .no_eff:
(1)  873/     3A2 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  874/     3A3 : 0F                  		rrca
(1)  875/     3A4 : 0F                  		rrca
(1)  876/     3A5 : 0F                  		rrca
(1)  877/     3A6 : 0F                  		rrca
(1)  878/     3A7 : E6 0F               		and	00001111b		; Filter bits
(1)  879/     3A9 : 4F                  		ld	c,a			; Save as c
(1)  880/     3AA : 78                  		ld	a,b
(1)  881/     3AB : E6 0F               		and	00001111b		; Filter again
(1)  882/     3AD : B1                  		or	c			; Merge c with a
(1)  883/     3AE : CF                  		rst	8
(1)  884/     3AF : 4F                  		ld	c,a			; Save bit flags
(1)  885/     3B0 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  886/     3B3 : B1                  		or	c
(1)  887/     3B4 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  888/     3B7 :                     	; Check for effects that affect
(1)  889/     3B7 :                     	; internal playback:
(1)  890/     3B7 :                     	; Jump, Ticks, etc.
(1)  891/     3B7 : C1                  		pop	bc		; Restore rowcount
(1)  892/     3B8 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  893/     3BB : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  894/     3BD : CA E4 02            		jp	z,.next_note
(1)  895/     3C0 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  896/     3C3 : B7                  		or	a		; 00h = invalid effect
(1)  897/     3C4 : CA E4 02            		jp	z,.next_note
(1)  898/     3C7 : FE 01               		cp	1		; Effect A: Tick set
(1)  899/     3C9 : 28 0B               		jr	z,.eff_A
(1)  900/     3CB : FE 02               		cp	2		; Effect B: Position Jump
(1)  901/     3CD : 28 18               		jr	z,.eff_B
(1)  902/     3CF : FE 03               		cp	3		; Effect C: Pattern break
(1)  903/     3D1 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  904/     3D3 : C3 E4 02            		jp	.next_note
(1)  905/     3D6 :                     
(1)  906/     3D6 :                     ; ----------------------------------------
(1)  907/     3D6 :                     ; Effect A: Set ticks
(1)  908/     3D6 :                     ; ----------------------------------------
(1)  909/     3D6 :                     
(1)  910/     3D6 :                     .eff_A:
(1)  911/     3D6 : CF                  		rst	8
(1)  912/     3D7 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  913/     3DA : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  914/     3DD : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  915/     3E0 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  916/     3E4 : C3 E4 02            		jp	.next_note
(1)  917/     3E7 :                     
(1)  918/     3E7 :                     ; ----------------------------------------
(1)  919/     3E7 :                     ; Effect B: jump to a new block
(1)  920/     3E7 :                     ; ----------------------------------------
(1)  921/     3E7 :                     
(1)  922/     3E7 :                     .eff_B:
(1)  923/     3E7 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  924/     3EA : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  925/     3ED : CF                  		rst	8
(1)  926/     3EE : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  927/     3F2 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  928/     3F6 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  929/     3FA : 3E 80               		ld	a,80h
(1)  930/     3FC : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  931/     3FF : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  932/     402 : C3 E4 02            		jp	.next_note
(1)  933/     405 :                     
(1)  934/     405 :                     ; ----------------------------------------
(1)  935/     405 :                     ; Effect C: Pattern break/exit
(1)  936/     405 :                     ;
(1)  937/     405 :                     ; Only used on SFX, arguments ignored.
(1)  938/     405 :                     ; ----------------------------------------
(1)  939/     405 :                     
(1)  940/     405 :                     .eff_C:
(1)  941/     405 : C3 19 05            		jp	.track_end
(1)  942/     408 :                     
(1)  943/     408 :                     ; ----------------------------------------
(1)  944/     408 :                     ; Increment the current patt position
(1)  945/     408 :                     ; and recieve more data
(1)  946/     408 :                     ;
(1)  947/     408 :                     ; Breaks:
(1)  948/     408 :                     ; a,e
(1)  949/     408 :                     ; ----------------------------------------
(1)  950/     408 :                     
(1)  951/     408 :                     .inc_cpatt:
(1)  952/     408 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  953/     40B : 7D                  		ld	a,l
(1)  954/     40C : 3C                  		inc	a
(1)  955/     40D : E6 0F               		and	MAX_RCACH-1
(1)  956/     40F : FE 0E               		cp	MAX_RCACH-2	; RAN OUT of bytes (almost)?
(1)  957/     411 : 30 03               		jr	nc,.ran_out
(1)  958/     413 : B3                  		or	e
(1)  959/     414 : 6F                  		ld	l,a
(1)  960/     415 : C9                  		ret
(1)  961/     416 :                     .ran_out:
(1)  962/     416 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  963/     419 : E5                  		push	hl
(1)  964/     41A : C5                  		push	bc
(1)  965/     41B : 06 00               		ld	b,0
(1)  966/     41D : 4F                  		ld	c,a
(1)  967/     41E : CF                  		rst	8
(1)  968/     41F : 5D                  		ld	e,l
(1)  969/     420 : 54                  		ld	d,h
(1)  970/     421 : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  971/     424 : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  972/     427 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  973/     42A : 09                  		add	hl,bc
(1)  974/     42B : CE 00               		adc	a,0
(1)  975/     42D : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  976/     430 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  977/     433 : CF                  		rst	8
(1)  978/     434 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  979/     437 : 01 10 00            		ld	bc,MAX_RCACH
(1)  980/     43A : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1)  981/     43D : C1                  		pop	bc
(1)  982/     43E : E1                  		pop	hl
(1)  983/     43F : C9                  		ret
(1)  984/     440 :                     
(1)  985/     440 :                     ; ----------------------------------------
(1)  986/     440 :                     ; Set track pattern by trk_currBlk
(1)  987/     440 :                     ; ----------------------------------------
(1)  988/     440 :                     
(1)  989/     440 :                     .set_track:
(1)  990/     440 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  991/     443 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  992/     446 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  993/     449 : 4F                  		ld	c,a
(1)  994/     44A :                     
(1)  995/     44A : C5                  		push	bc
(1)  996/     44B : D5                  		push	de
(1)  997/     44C : CF                  		rst	8
(1)  998/     44D : 0F                  		rrca
(1)  999/     44E : 0F                  		rrca
(1) 1000/     44F : 0F                  		rrca
(1) 1001/     450 : E6 1F               		and	00011111b
(1) 1002/     452 : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1003/     455 : CB 79               		bit	7,c			; First time?
(1) 1004/     457 : 20 03               		jr	nz,.first_blk
(1) 1005/     459 : B9                  		cp	c			; SAME instrument data?
(1) 1006/     45A : 28 1E               		jr	z,.keep_blk
(1) 1007/     45C :                     .first_blk:
(1) 1008/     45C : CF                  		rst	8
(1) 1009/     45D : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1010/     460 : 07                  		rlca
(1) 1011/     461 : 07                  		rlca
(1) 1012/     462 : 07                  		rlca
(1) 1013/     463 : 06 00               		ld	b,0
(1) 1014/     465 : 4F                  		ld	c,a
(1) 1015/     466 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1) 1016/     469 : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1) 1017/     46C : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1) 1018/     46F : E7                  		rst	20h
(1) 1019/     470 : CF                  		rst	8
(1) 1020/     471 : 09                  		add	hl,bc
(1) 1021/     472 : CE 00               		adc	a,0
(1) 1022/     474 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1023/     477 : CD FE 10            		call	transferRom		; ** ROM ACCESS **
(1) 1024/     47A :                     .keep_blk:
(1) 1025/     47A : E1                  		pop	hl
(1) 1026/     47B : C1                  		pop	bc
(1) 1027/     47C : 79                  		ld	a,c
(1) 1028/     47D : E6 07               		and	00000111b
(1) 1029/     47F : CF                  		rst	8
(1) 1030/     480 : 16 00               		ld	d,0
(1) 1031/     482 : 5F                  		ld	e,a
(1) 1032/     483 : 19                  		add	hl,de
(1) 1033/     484 : 7E                  		ld	a,(hl)			; Read byte
(1) 1034/     485 : FE FF               		cp	-1			; If block == -1, end track
(1) 1035/     487 : CA 19 05            		jp	z,.track_end
(1) 1036/     48A : CF                  		rst	8
(1) 1037/     48B :                     
(1) 1038/     48B : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1039/     48E : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1040/     491 : 4F                  		ld	c,a
(1) 1041/     492 : D5                  		push	de
(1) 1042/     493 : C5                  		push	bc
(1) 1043/     494 : CF                  		rst	8
(1) 1044/     495 : 0F                  		rrca
(1) 1045/     496 : 0F                  		rrca
(1) 1046/     497 : 0F                  		rrca
(1) 1047/     498 : E6 1F               		and	00011111b
(1) 1048/     49A : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1049/     49D : CB 79               		bit	7,c			; First time?
(1) 1050/     49F : 20 03               		jr	nz,.first_head
(1) 1051/     4A1 : B9                  		cp	c			; SAME instrument data?
(1) 1052/     4A2 : 28 26               		jr	z,.keep_it
(1) 1053/     4A4 :                     .first_head:
(1) 1054/     4A4 : CF                  		rst	8
(1) 1055/     4A5 : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1056/     4A8 : 47                  		ld	b,a
(1) 1057/     4A9 : 0F                  		rrca
(1) 1058/     4AA : 0F                  		rrca
(1) 1059/     4AB : 0F                  		rrca
(1) 1060/     4AC : E6 E0               		and	11100000b
(1) 1061/     4AE : 4F                  		ld	c,a
(1) 1062/     4AF : 78                  		ld	a,b
(1) 1063/     4B0 : 0F                  		rrca
(1) 1064/     4B1 : 0F                  		rrca
(1) 1065/     4B2 : 0F                  		rrca
(1) 1066/     4B3 : E6 03               		and	00000011b
(1) 1067/     4B5 : 47                  		ld	b,a
(1) 1068/     4B6 :                     
(1) 1069/     4B6 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1070/     4B9 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1071/     4BC : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1072/     4BF : E7                  		rst	20h
(1) 1073/     4C0 : CF                  		rst	8
(1) 1074/     4C1 : 09                  		add	hl,bc
(1) 1075/     4C2 : CE 00               		adc	a,0
(1) 1076/     4C4 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1077/     4C7 : CD FE 10            		call	transferRom		; ** ROM ACCESS **
(1) 1078/     4CA :                     .keep_it:
(1) 1079/     4CA : C1                  		pop	bc
(1) 1080/     4CB : 79                  		ld	a,c
(1) 1081/     4CC : E6 07               		and	00000111b
(1) 1082/     4CE : 87                  		add	a,a
(1) 1083/     4CF : 87                  		add	a,a
(1) 1084/     4D0 : 57                  		ld	d,a
(1) 1085/     4D1 : CF                  		rst	8
(1) 1086/     4D2 : E6 FC               		and	11111100b
(1) 1087/     4D4 : 5F                  		ld	e,a
(1) 1088/     4D5 : 7A                  		ld	a,d
(1) 1089/     4D6 : E6 03               		and	00000011b
(1) 1090/     4D8 : 57                  		ld	d,a
(1) 1091/     4D9 : E1                  		pop	hl
(1) 1092/     4DA : 19                  		add	hl,de
(1) 1093/     4DB : 5E                  		ld	e,(hl)			; de - Pos
(1) 1094/     4DC : 23                  		inc	hl
(1) 1095/     4DD : CF                  		rst	8
(1) 1096/     4DE : 56                  		ld	d,(hl)
(1) 1097/     4DF : 23                  		inc	hl
(1) 1098/     4E0 : 7E                  		ld	a,(hl)
(1) 1099/     4E1 : 23                  		inc	hl
(1) 1100/     4E2 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1101/     4E5 : 7E                  		ld	a,(hl)
(1) 1102/     4E6 : 23                  		inc	hl
(1) 1103/     4E7 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1104/     4EA : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1105/     4ED : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1106/     4F0 : CF                  		rst	8
(1) 1107/     4F1 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1108/     4F4 : 19                  		add	hl,de
(1) 1109/     4F5 : CE 00               		adc	a,0
(1) 1110/     4F7 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1111/     4FA : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1112/     4FD : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1113/     500 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1114/     503 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1115/     506 :                     
(1) 1116/     506 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1117/     509 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1118/     50C : 0E 10               		ld	c,MAX_RCACH
(1) 1119/     50E : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1120/     512 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1121/     516 : C3 FE 10            		jp	transferRom		; ** ROM access **
(1) 1122/     519 :                     
(1) 1123/     519 :                     ; ----------------------------------------
(1) 1124/     519 :                     ; **JUMP ONLY**
(1) 1125/     519 :                     .track_end:
(1) 1126/     519 : CD D4 05            		call	track_out
(1) 1127/     51C : CF                  		rst	8
(1) 1128/     51D : AF                  		xor	a
(1) 1129/     51E : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1130/     521 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1131/     524 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1132/     527 : C9                  		ret
(1) 1133/     528 :                     
(1) 1134/     528 :                     ; ----------------------------------------
(1) 1135/     528 :                     ; Track refill
(1) 1136/     528 :                     ; ----------------------------------------
(1) 1137/     528 :                     
(1) 1138/     528 :                     .effect_fill:
(1) 1139/     528 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1140/     52C : C3 40 04            		jp	.set_track
(1) 1141/     52F :                     
(1) 1142/     52F :                     ; ----------------------------------------
(1) 1143/     52F :                     ; Track Start/Reset
(1) 1144/     52F :                     ;
(1) 1145/     52F :                     ; iy - Track buffer
(1) 1146/     52F :                     ; ----------------------------------------
(1) 1147/     52F :                     
(1) 1148/     52F :                     .first_fill:
(1) 1149/     52F : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1150/     533 : CD D4 05            		call	track_out
(1) 1151/     536 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1152/     53A : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1153/     53D : CF                  		rst	8
(1) 1154/     53E : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1155/     541 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1156/     544 : FE FF               		cp	-1			; Sequence -1?
(1) 1157/     546 : C8                  		ret	z
(1) 1158/     547 : 87                  		add	a,a
(1) 1159/     548 : 87                  		add	a,a
(1) 1160/     549 : 16 00               		ld	d,0
(1) 1161/     54B : 5F                  		ld	e,a
(1) 1162/     54C : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1163/     54F : 23                  		inc	hl
(1) 1164/     550 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1165/     551 : 23                  		inc	hl
(1) 1166/     552 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1167/     553 : 23                  		inc	hl
(1) 1168/     554 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1169/     555 : CF                  		rst	8
(1) 1170/     556 : 61                  		ld	h,c
(1) 1171/     557 : 19                  		add	hl,de
(1) 1172/     558 : CE 00               		adc	a,0
(1) 1173/     55A : 11 50 1F            		ld	de,trkInfoCach
(1) 1174/     55D : D5                  		push	de
(1) 1175/     55E : 01 04 00            		ld	bc,4
(1) 1176/     561 : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 1177/     564 : E1                  		pop	hl
(1) 1178/     565 : 7E                  		ld	a,(hl)
(1) 1179/     566 : 23                  		inc	hl
(1) 1180/     567 : CB 7F               		bit	7,a
(1) 1181/     569 : 28 04               		jr	z,.no_glbl
(1) 1182/     56B : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1183/     56F :                     .no_glbl:
(1) 1184/     56F : CF                  		rst	8
(1) 1185/     570 : E6 7F               		and	01111111b
(1) 1186/     572 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1187/     575 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1188/     576 : 23                  		inc	hl			; grab it's pointers
(1) 1189/     577 : 4E                  		ld	c,(hl)
(1) 1190/     578 : 23                  		inc	hl
(1) 1191/     579 : 6E                  		ld	l,(hl)
(1) 1192/     57A : 61                  		ld	h,c
(1) 1193/     57B : 11 40 1F            		ld	de,headerOut
(1) 1194/     57E : 0E 0E               		ld	c,0Eh
(1) 1195/     580 : CD FE 10            		call	transferRom		; ** ROM access **
(1) 1196/     583 :                     
(1) 1197/     583 :                     
(1) 1198/     583 :                     	; headerOut:
(1) 1199/     583 :                     	; dc.w numof_chnls
(1) 1200/     583 :                     	; dc.l .blk,.pat,.ins
(1) 1201/     583 :                     	; *** READING BACKWARDS
(1) 1202/     583 : DD 21 4D 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1203/     587 : CF                  		rst	8
(1) 1204/     588 : CD C1 05            		call	.grab_rhead		; Instrument data
(1) 1205/     58B : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1206/     58E : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1207/     591 : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1208/     594 :                     ; 		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1209/     594 : E7                  		rst	20h
(1) 1210/     595 : CF                  		rst	8
(1) 1211/     596 : CD C1 05            		call	.grab_rhead		; Pattern heads
(1) 1212/     599 : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1213/     59C : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1214/     59F : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1215/     5A2 : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1216/     5A6 : CF                  		rst	8
(1) 1217/     5A7 : CD C1 05            		call	.grab_rhead		; Block data
(1) 1218/     5AA : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1219/     5AD : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1220/     5B0 : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1221/     5B3 : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1222/     5B7 : CF                  		rst	8
(1) 1223/     5B8 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1224/     5BB : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1225/     5BE : C3 40 04            		jp	.set_track
(1) 1226/     5C1 :                     
(1) 1227/     5C1 :                     ; Read 68K pointer:
(1) 1228/     5C1 :                     ; hl - 00xxxx
(1) 1229/     5C1 :                     ;  b - xx0000
(1) 1230/     5C1 :                     .grab_rhead:
(1) 1231/     5C1 : DD 6E 00            		ld	l,(ix)
(1) 1232/     5C4 : DD 2B               		dec	ix
(1) 1233/     5C6 : DD 66 00            		ld	h,(ix)
(1) 1234/     5C9 : CF                  		rst	8
(1) 1235/     5CA : DD 2B               		dec	ix
(1) 1236/     5CC : DD 46 00            		ld	b,(ix)
(1) 1237/     5CF : DD 2B               		dec	ix
(1) 1238/     5D1 :                     ; 		ld	c,(ix)
(1) 1239/     5D1 : DD 2B               		dec	ix
(1) 1240/     5D3 : C9                  		ret
(1) 1241/     5D4 :                     
(1) 1242/     5D4 :                     ; ----------------------------------------
(1) 1243/     5D4 :                     ; Reset tracker channels
(1) 1244/     5D4 :                     ;
(1) 1245/     5D4 :                     ; iy - Track buffer
(1) 1246/     5D4 :                     ;
(1) 1247/     5D4 :                     ; Breaks:
(1) 1248/     5D4 :                     ; b ,de,hl,ix
(1) 1249/     5D4 :                     ; ----------------------------------------
(1) 1250/     5D4 :                     
(1) 1251/     5D4 :                     track_out:
(1) 1252/     5D4 : FD E5               		push	iy
(1) 1253/     5D6 : E1                  		pop	hl
(1) 1254/     5D7 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1255/     5DB : CF                  		rst	8
(1) 1256/     5DC : 11 25 00            		ld	de,trk_ChnIndx
(1) 1257/     5DF : 19                  		add	hl,de
(1) 1258/     5E0 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1259/     5E2 :                     .indx_del:
(1) 1260/     5E2 : 7E                  		ld	a,(hl)
(1) 1261/     5E3 : B7                  		or	a
(1) 1262/     5E4 : 28 2A               		jr	z,.nothin
(1) 1263/     5E6 : CF                  		rst	8
(1) 1264/     5E7 : DD E5               		push	ix
(1) 1265/     5E9 : E6 1F               		and	00011111b
(1) 1266/     5EB : 87                  		add	a,a
(1) 1267/     5EC : 87                  		add	a,a
(1) 1268/     5ED : 87                  		add	a,a
(1) 1269/     5EE : 5F                  		ld	e,a
(1) 1270/     5EF : CF                  		rst	8
(1) 1271/     5F0 : DD 19               		add	ix,de
(1) 1272/     5F2 : AF                  		xor	a
(1) 1273/     5F3 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1274/     5F7 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1275/     5FB : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1276/     5FF : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1277/     602 : CF                  		rst	8
(1) 1278/     603 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1279/     606 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1280/     609 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1281/     60C : DD E1               		pop	ix
(1) 1282/     60E : 77                  		ld	(hl),a
(1) 1283/     60F : 00                  		nop
(1) 1284/     610 :                     .nothin:
(1) 1285/     610 : 23                  		inc	hl
(1) 1286/     611 : 10 CF               		djnz	.indx_del
(1) 1287/     613 : 3E 01               		ld	a,1
(1) 1288/     615 : 32 EF 1B            		ld	(marsUpd),a
(1) 1289/     618 : C9                  		ret
(1) 1290/     619 :                     
(1) 1291/     619 :                     ; ============================================================
(1) 1292/     619 :                     ; --------------------------------------------------------
(1) 1293/     619 :                     ; Process track channels to the sound chips
(1) 1294/     619 :                     ; --------------------------------------------------------
(1) 1295/     619 :                     
(1) 1296/     619 :                     set_chips:
(1) 1297/     619 : E7                  		rst	20h			; Refill wave
(1) 1298/     61A : CD DD 10            		call	get_tick
(1) 1299/     61D : FD 21 63 1F         		ld	iy,nikona_BuffList
(1) 1300/     621 :                     .trk_buffrs:
(1) 1301/     621 : FD 7E 00            		ld	a,(iy)
(1) 1302/     624 : FE FF               		cp	-1
(1) 1303/     626 : 28 0F               		jr	z,proc_chips
(1) 1304/     628 : CF                  		rst	8
(1) 1305/     629 : FD E5               		push	iy
(1) 1306/     62B : CD 60 06            		call	tblbuff_read
(1) 1307/     62E : FD E1               		pop	iy
(1) 1308/     630 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1309/     633 : FD 19               		add	iy,de
(1) 1310/     635 : 18 EA               		jr	.trk_buffrs
(1) 1311/     637 :                     proc_chips:
(1) 1312/     637 : E7                  		rst	20h			; Refill wave
(1) 1313/     638 : CF                  		rst	8
(1) 1314/     639 : FD 21 C2 1B         		ld	iy,tblPSGN		; PSG Noise
(1) 1315/     63D : CD 32 08            		call	dtbl_singl
(1) 1316/     640 : CF                  		rst	8
(1) 1317/     641 : FD 21 00 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1318/     645 : CD 1C 08            		call	dtbl_multi
(1) 1319/     648 : CF                  		rst	8
(1) 1320/     649 : FD 21 6E 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1321/     64D : CD 1C 08            		call	dtbl_multi
(1) 1322/     650 : CF                  		rst	8
(1) 1323/     651 : FD 21 00 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1324/     655 : CD 1C 08            		call	dtbl_multi
(1) 1325/     658 : CF                  		rst	8
(1) 1326/     659 : FD 21 4A 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1327/     65D : C3 1C 08            		jp	dtbl_multi
(1) 1328/     660 :                     
(1) 1329/     660 :                     ; ----------------------------------------
(1) 1330/     660 :                     ; Read current track
(1) 1331/     660 :                     ;
(1) 1332/     660 :                     ; iy - Buffer
(1) 1333/     660 :                     tblbuff_read:
(1) 1334/     660 : FD 6E 00            		ld	l,(iy)
(1) 1335/     663 : FD 66 01            		ld	h,(iy+1)
(1) 1336/     666 : CD DD 10            		call	get_tick
(1) 1337/     669 : CF                  		rst	8
(1) 1338/     66A : E5                  		push	hl
(1) 1339/     66B : FD E1               		pop	iy
(1) 1340/     66D : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1341/     670 : CB 78               		bit	7,b
(1) 1342/     672 : C8                  		ret	z
(1) 1343/     673 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1344/     674 : FE FF               		cp	-1
(1) 1345/     676 : C2 80 06            		jp	nz,.track_cont
(1) 1346/     679 : CD D4 05            		call	track_out
(1) 1347/     67C : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1348/     680 :                     .track_cont:
(1) 1349/     680 : E7                  		rst	20h
(1) 1350/     681 : FD E5               		push	iy
(1) 1351/     683 : E1                  		pop	hl
(1) 1352/     684 : CF                  		rst	8
(1) 1353/     685 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1354/     689 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1355/     68C : 19                  		add	hl,de
(1) 1356/     68D : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1357/     690 : B7                  		or	a
(1) 1358/     691 : 20 02               		jr	nz,.valid
(1) 1359/     693 : 3E 1A               		ld	a,MAX_TRKINDX		; LAZY MODE: If zero, Read ALL channels
(1) 1360/     695 :                     .valid:
(1) 1361/     695 : CF                  		rst	8
(1) 1362/     696 : 47                  		ld	b,a
(1) 1363/     697 :                     .next_indx:
(1) 1364/     697 : 7E                  		ld	a,(hl)			; Read index
(1) 1365/     698 : B7                  		or	a
(1) 1366/     699 : 20 09               		jr	nz,.has_indx		; If non-zero: valid
(1) 1367/     69B : C5                  		push	bc			; ** wave sync
(1) 1368/     69C : 06 04               		ld	b,4
(1) 1369/     69E : 10 FE               		djnz	$
(1) 1370/     6A0 : C1                  		pop	bc			; **
(1) 1371/     6A1 : CF                  		rst	8
(1) 1372/     6A2 : 18 1C               		jr	.no_indx
(1) 1373/     6A4 :                     .has_indx:
(1) 1374/     6A4 : E6 1F               		and	00011111b
(1) 1375/     6A6 : 87                  		add	a,a
(1) 1376/     6A7 : 87                  		add	a,a
(1) 1377/     6A8 : 87                  		add	a,a
(1) 1378/     6A9 : CF                  		rst	8
(1) 1379/     6AA : 16 00               		ld	d,0
(1) 1380/     6AC : 5F                  		ld	e,a
(1) 1381/     6AD : C5                  		push	bc
(1) 1382/     6AE : E5                  		push	hl
(1) 1383/     6AF : DD E5               		push	ix
(1) 1384/     6B1 : DD 19               		add	ix,de
(1) 1385/     6B3 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1386/     6B6 : E6 0F               		and	00001111b
(1) 1387/     6B8 : C4 C8 06            		call	nz,.do_chip		; Call if non-zero
(1) 1388/     6BB : CF                  		rst	8
(1) 1389/     6BC : DD E1               		pop	ix
(1) 1390/     6BE : E1                  		pop	hl
(1) 1391/     6BF : C1                  		pop	bc
(1) 1392/     6C0 :                     .no_indx:
(1) 1393/     6C0 : 23                  		inc	hl
(1) 1394/     6C1 : 10 D4               		djnz	.next_indx
(1) 1395/     6C3 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1396/     6C7 : C9                  		ret
(1) 1397/     6C8 :                     
(1) 1398/     6C8 :                     ; ----------------------------------------
(1) 1399/     6C8 :                     ; iy - Track buffer
(1) 1400/     6C8 :                     ; ix - Current channel
(1) 1401/     6C8 :                     
(1) 1402/     6C8 :                     .do_chip:
(1) 1403/     6C8 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1404/     6CB : B7                  		or	a
(1) 1405/     6CC : C8                  		ret	z			; If 0 == stop
(1) 1406/     6CD : CF                  		rst	8
(1) 1407/     6CE : 3D                  		dec	a			; inst-1
(1) 1408/     6CF : E6 7F               		and	01111111b
(1) 1409/     6D1 : 21 5A 1F            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1410/     6D4 : E5                  		push	hl
(1) 1411/     6D5 : 07                  		rlca
(1) 1412/     6D6 : 07                  		rlca
(1) 1413/     6D7 : 07                  		rlca
(1) 1414/     6D8 : 47                  		ld	b,a
(1) 1415/     6D9 : E6 F8               		and	11111000b
(1) 1416/     6DB : 4F                  		ld	c,a
(1) 1417/     6DC : 78                  		ld	a,b
(1) 1418/     6DD : AF                  		xor	a
(1) 1419/     6DE : E6 03               		and	00000011b
(1) 1420/     6E0 : CF                  		rst	8
(1) 1421/     6E1 : 47                  		ld	b,a
(1) 1422/     6E2 : EB                  		ex	hl,de
(1) 1423/     6E3 : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1424/     6E6 : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1425/     6E9 : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1426/     6EC : 09                  		add	hl,bc
(1) 1427/     6ED : CE 00               		adc	a,0
(1) 1428/     6EF : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1429/     6F2 : CD FE 10            		call	transferRom		; ** ROM access **
(1) 1430/     6F5 : E1                  		pop	hl
(1) 1431/     6F6 :                     .keep_it:
(1) 1432/     6F6 : E5                  		push	hl			; <-- save hl
(1) 1433/     6F7 : CD 11 07            		call	.grab_link
(1) 1434/     6FA : D1                  		pop	de			; --> recover as de
(1) 1435/     6FB :                     	; hl - current table
(1) 1436/     6FB :                     	; de - instrument data
(1) 1437/     6FB : FE FF               		cp	-1			; Found any link?
(1) 1438/     6FD : C8                  		ret	z
(1) 1439/     6FE : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1440/     6FF : 23                  		inc	hl
(1) 1441/     700 : 23                  		inc	hl
(1) 1442/     701 : 23                  		inc	hl
(1) 1443/     702 : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1444/     705 : 77                  		ld	(hl),a
(1) 1445/     706 : 01 0C 00            		ld	bc,10h-4		; Move to instr data
(1) 1446/     709 : 09                  		add	hl,bc
(1) 1447/     70A : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1448/     70B : 01 08 00            		ld	bc,8
(1) 1449/     70E : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1450/     710 : C9                  		ret
(1) 1451/     711 :                     
(1) 1452/     711 :                     ; ----------------------------------------
(1) 1453/     711 :                     ; Search for a linked channel on the
(1) 1454/     711 :                     ; chip table
(1) 1455/     711 :                     ;
(1) 1456/     711 :                     ; Input:
(1) 1457/     711 :                     ; iy - Track buffer
(1) 1458/     711 :                     ; ix - Current channel
(1) 1459/     711 :                     ; hl - Intrument data
(1) 1460/     711 :                     ;
(1) 1461/     711 :                     ; Returns:
(1) 1462/     711 :                     ; hl - Channel table to use
(1) 1463/     711 :                     ;  a - Return value:
(1) 1464/     711 :                     ;       0 - Found
(1) 1465/     711 :                     ;      -1 - Not found
(1) 1466/     711 :                     ; ----------------------------------------
(1) 1467/     711 :                     
(1) 1468/     711 :                     .grab_link:
(1) 1469/     711 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1470/     712 : E6 F0               		and	11110000b		; Filter bits
(1) 1471/     714 : 5F                  		ld	e,a			; e - NEW chip
(1) 1472/     715 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1473/     718 : E6 F0               		and	11110000b
(1) 1474/     71A : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1475/     71C : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1476/     71D : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1477/     71F : CF                  		rst	8
(1) 1478/     720 : 57                  		ld	d,a			; d - Chip to silence
(1) 1479/     721 : D5                  		push	de
(1) 1480/     722 : CD 3C 07            		call	.srch_link		; Search OLD link
(1) 1481/     725 : D1                  		pop	de
(1) 1482/     726 : FE FF               		cp	-1
(1) 1483/     728 : 28 03               		jr	z,.dont_res
(1) 1484/     72A : CD B0 0F            		call	tblz_clear
(1) 1485/     72D :                     .dont_res:
(1) 1486/     72D : CF                  		rst	8
(1) 1487/     72E : 18 62               		jr	.new_chip
(1) 1488/     730 :                     .same_link:
(1) 1489/     730 : CD 3C 07            		call	.srch_link		; Search link
(1) 1490/     733 : FE FF               		cp	-1
(1) 1491/     735 : C0                  		ret	nz
(1) 1492/     736 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1493/     739 : CF                  		rst	8
(1) 1494/     73A : 18 56               		jr	.new_chip
(1) 1495/     73C :                     
(1) 1496/     73C :                     ; ----------------------------------------
(1) 1497/     73C :                     ; ** RELINK **
(1) 1498/     73C :                     ; a - Chip to search for
(1) 1499/     73C :                     
(1) 1500/     73C :                     .srch_link:
(1) 1501/     73C : CD 00 08            		call	.pick_tbl	; Pick chip table in hl
(1) 1502/     73F : DD E5               		push	ix		; Copy ix to bc for checking
(1) 1503/     741 : C1                  		pop	bc
(1) 1504/     742 : B7                  		or	a		; Single table?
(1) 1505/     743 : FA 5D 07            		jp	m,.singl_link
(1) 1506/     746 :                     .srch_lloop:
(1) 1507/     746 : 7E                  		ld	a,(hl)		; Read Table's LSB
(1) 1508/     747 : FE FF               		cp	-1		; If -1 (EOL) also return -1
(1) 1509/     749 : 28 43               		jr	z,.refill
(1) 1510/     74B : B9                  		cp	c		; Same link LSB?
(1) 1511/     74C : 20 07               		jr	nz,.invldl
(1) 1512/     74E : 23                  		inc	hl
(1) 1513/     74F : CF                  		rst	8
(1) 1514/     750 : 7E                  		ld	a,(hl)
(1) 1515/     751 : 2B                  		dec	hl
(1) 1516/     752 : B8                  		cp	b		; Same link MSB?
(1) 1517/     753 : 28 16               		jr	z,.reroll
(1) 1518/     755 :                     .invldl:
(1) 1519/     755 : D5                  		push	de
(1) 1520/     756 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1521/     759 : 19                  		add	hl,de
(1) 1522/     75A : D1                  		pop	de
(1) 1523/     75B : 18 E9               		jr	.srch_lloop
(1) 1524/     75D :                     
(1) 1525/     75D :                     ; ----------------------
(1) 1526/     75D :                     ; PSGN/FM3/FM6
(1) 1527/     75D :                     .singl_link:
(1) 1528/     75D : 23                  		inc	hl			; Read MSB first
(1) 1529/     75E : 7E                  		ld	a,(hl)
(1) 1530/     75F : 2B                  		dec	hl
(1) 1531/     760 : CF                  		rst	8
(1) 1532/     761 : B8                  		cp	b			; MSB match?
(1) 1533/     762 : 20 2A               		jr	nz,.refill
(1) 1534/     764 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1535/     765 : B9                  		cp	c
(1) 1536/     766 : 20 26               		jr	nz,.refill
(1) 1537/     768 : C3 90 07            		jp	.rnot_psg
(1) 1538/     76B :                     
(1) 1539/     76B :                     ; ----------------------------------------
(1) 1540/     76B :                     ; *** Special re-roll check for
(1) 1541/     76B :                     ; listed tables ***
(1) 1542/     76B :                     
(1) 1543/     76B :                     .reroll:
(1) 1544/     76B : E5                  		push	hl
(1) 1545/     76C : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1546/     76F : 09                  		add	hl,bc
(1) 1547/     770 : CF                  		rst	8
(1) 1548/     771 : 4E                  		ld	c,(hl)		; c - ID
(1) 1549/     772 : E1                  		pop	hl
(1) 1550/     773 : 7B                  		ld	a,e
(1) 1551/     774 : FE 80               		cp	80h		; PSG?
(1) 1552/     776 : 20 18               		jr	nz,.rnot_psg
(1) 1553/     778 :                     	; Special PSG3/PSGN check
(1) 1554/     778 : 3A F4 1C            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1555/     77B : E6 03               		and	011b
(1) 1556/     77D : FE 03               		cp	011b
(1) 1557/     77F : 20 0F               		jr	nz,.rnot_psg
(1) 1558/     781 : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1559/     782 : FE 02               		cp	2
(1) 1560/     784 : 20 0A               		jr	nz,.rnot_psg
(1) 1561/     786 : CF                  		rst	8
(1) 1562/     787 : D5                  		push	de
(1) 1563/     788 : 16 80               		ld	d,80h		; Force silence
(1) 1564/     78A : CD B0 0F            		call	tblz_clear
(1) 1565/     78D : D1                  		pop	de
(1) 1566/     78E :                     .refill:
(1) 1567/     78E : 18 6D               		jr	.set_asfull
(1) 1568/     790 :                     .rnot_psg:
(1) 1569/     790 : AF                  		xor	a
(1) 1570/     791 : C9                  		ret
(1) 1571/     792 :                     
(1) 1572/     792 :                     ; ----------------------------------------
(1) 1573/     792 :                     ; *** NEW CHIP ***
(1) 1574/     792 :                     ; e - Chip to set
(1) 1575/     792 :                     
(1) 1576/     792 :                     .new_chip:
(1) 1577/     792 : 7B                  		ld	a,e			; Read NEW chip
(1) 1578/     793 : B7                  		or	a			; If non-minus, exit.
(1) 1579/     794 : F2 FD 07            		jp	p,.set_asfull
(1) 1580/     797 : CD 00 08            		call	.pick_tbl
(1) 1581/     79A : CF                  		rst	8
(1) 1582/     79B : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1583/     79E : B7                  		or	a
(1) 1584/     79F : FA ED 07            		jp	m,.singl_free
(1) 1585/     7A2 : E5                  		push	hl			; Backup START table
(1) 1586/     7A3 :                     ; PASS 1
(1) 1587/     7A3 :                     .srch_free:
(1) 1588/     7A3 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1589/     7A4 : FE FF               		cp	-1			; If -1, return -1
(1) 1590/     7A6 : 28 0B               		jr	z,.pass_2
(1) 1591/     7A8 : 23                  		inc	hl
(1) 1592/     7A9 : 46                  		ld	b,(hl)			; Read MSB
(1) 1593/     7AA : 2B                  		dec	hl
(1) 1594/     7AB :                     ; 		nop	; wave sync
(1) 1595/     7AB :                     ; 		nop
(1) 1596/     7AB :                     ; 		rst	8
(1) 1597/     7AB :                     ; 		nop
(1) 1598/     7AB :                     ; 		nop
(1) 1599/     7AB : B0                  		or	b
(1) 1600/     7AC : 28 22               		jr	z,.new_link_z
(1) 1601/     7AE : CD C9 07            		call	.nextsrch_tbl
(1) 1602/     7B1 : 18 F0               		jr	.srch_free
(1) 1603/     7B3 :                     
(1) 1604/     7B3 :                     ; PASS 2
(1) 1605/     7B3 :                     ; Rewrite mode
(1) 1606/     7B3 :                     .pass_2:
(1) 1607/     7B3 : E1                  		pop	hl
(1) 1608/     7B4 :                     .next_prio:
(1) 1609/     7B4 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1610/     7B5 : FE FF               		cp	-1		; If -1, return -1
(1) 1611/     7B7 : C8                  		ret	z
(1) 1612/     7B8 : 23                  		inc	hl
(1) 1613/     7B9 : 23                  		inc	hl
(1) 1614/     7BA : 7E                  		ld	a,(hl)		; Read priority
(1) 1615/     7BB : 2B                  		dec	hl
(1) 1616/     7BC : 2B                  		dec	hl
(1) 1617/     7BD : B7                  		or	a		; Failsafe zero priority overwrite
(1) 1618/     7BE : 28 14               		jr	z,.new_link_o
(1) 1619/     7C0 : B9                  		cp	c
(1) 1620/     7C1 :                     ; 		jr	z,.new_link_o
(1) 1621/     7C1 : 38 11               		jr	c,.new_link_o
(1) 1622/     7C3 : CF                  		rst	8
(1) 1623/     7C4 : CD C9 07            		call	.nextsrch_tbl
(1) 1624/     7C7 : 18 EB               		jr	.next_prio
(1) 1625/     7C9 :                     .nextsrch_tbl:
(1) 1626/     7C9 : D5                  		push	de
(1) 1627/     7CA : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1628/     7CD : 19                  		add	hl,de
(1) 1629/     7CE : D1                  		pop	de
(1) 1630/     7CF :                     ; 		nop	; wave sync
(1) 1631/     7CF :                     ; 		nop
(1) 1632/     7CF :                     ; 		rst	8
(1) 1633/     7CF :                     ; 		nop
(1) 1634/     7CF :                     ; 		nop
(1) 1635/     7CF : C9                  		ret
(1) 1636/     7D0 :                     .new_link_z:
(1) 1637/     7D0 : 33                  		inc	sp		; skip backup
(1) 1638/     7D1 : 33                  		inc	sp
(1) 1639/     7D2 : 18 08               		jr	.new_link
(1) 1640/     7D4 :                     
(1) 1641/     7D4 :                     ; OVERWRITE link
(1) 1642/     7D4 :                     .new_link_o:
(1) 1643/     7D4 : E5                  		push	hl
(1) 1644/     7D5 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1645/     7D8 : CD B0 0F            		call	tblz_clear
(1) 1646/     7DB : E1                  		pop	hl
(1) 1647/     7DC :                     ; NEW link
(1) 1648/     7DC :                     .new_link:
(1) 1649/     7DC : CF                  		rst	8
(1) 1650/     7DD : 23                  		inc	hl
(1) 1651/     7DE : 23                  		inc	hl
(1) 1652/     7DF :                     ; hl+2
(1) 1653/     7DF :                     .l_hiprio:
(1) 1654/     7DF : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1655/     7E2 : DD E5               		push	ix
(1) 1656/     7E4 : D1                  		pop	de
(1) 1657/     7E5 : 71                  		ld	(hl),c		; Write priority
(1) 1658/     7E6 : 2B                  		dec	hl
(1) 1659/     7E7 : CF                  		rst	8
(1) 1660/     7E8 : 72                  		ld 	(hl),d		; MSB
(1) 1661/     7E9 : 2B                  		dec	hl
(1) 1662/     7EA : 73                  		ld	(hl),e		; LSB
(1) 1663/     7EB : AF                  		xor	a		; Return OK
(1) 1664/     7EC : C9                  		ret
(1) 1665/     7ED :                     
(1) 1666/     7ED :                     ; Single slot
(1) 1667/     7ED :                     ; c - priority
(1) 1668/     7ED :                     ; e - chip
(1) 1669/     7ED :                     .singl_free:
(1) 1670/     7ED : 46                  		ld	b,(hl)
(1) 1671/     7EE : 23                  		inc	hl
(1) 1672/     7EF : 7E                  		ld	a,(hl)
(1) 1673/     7F0 : 23                  		inc	hl
(1) 1674/     7F1 : B0                  		or	b
(1) 1675/     7F2 : 28 EB               		jr	z,.l_hiprio
(1) 1676/     7F4 : CF                  		rst	8
(1) 1677/     7F5 : 7E                  		ld	a,(hl)
(1) 1678/     7F6 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1679/     7F7 : 28 E6               		jr	z,.l_hiprio
(1) 1680/     7F9 : B9                  		cp	c
(1) 1681/     7FA :                     ; 		jr	z,.l_hiprio
(1) 1682/     7FA : 38 E3               		jr	c,.l_hiprio		; PRIORITY
(1) 1683/     7FC : CF                  		rst	8
(1) 1684/     7FD :                     .set_asfull:
(1) 1685/     7FD : 3E FF               		ld	a,-1			; Return -1
(1) 1686/     7FF : C9                  		ret
(1) 1687/     800 :                     
(1) 1688/     800 :                     ; Pick chip table
(1) 1689/     800 :                     ; In:
(1) 1690/     800 :                     ;  a - ID
(1) 1691/     800 :                     ;
(1) 1692/     800 :                     ; Out:
(1) 1693/     800 :                     ;  a - Special bit + ID
(1) 1694/     800 :                     ;
(1) 1695/     800 :                     ; hl - Table
(1) 1696/     800 :                     .pick_tbl:
(1) 1697/     800 : D5                  		push	de
(1) 1698/     801 : 0F                  		rrca
(1) 1699/     802 : 0F                  		rrca
(1) 1700/     803 : 0F                  		rrca
(1) 1701/     804 : 0F                  		rrca
(1) 1702/     805 : E6 07               		and	00000111b
(1) 1703/     807 : 87                  		add	a,a
(1) 1704/     808 : 21 60 1A            		ld	hl,tblList
(1) 1705/     80B : E5                  		push	hl
(1) 1706/     80C : 16 00               		ld	d,0
(1) 1707/     80E : 5F                  		ld	e,a
(1) 1708/     80F : 19                  		add	hl,de
(1) 1709/     810 : 5E                  		ld	e,(hl)
(1) 1710/     811 : 23                  		inc	hl
(1) 1711/     812 : 7E                  		ld	a,(hl)
(1) 1712/     813 : 57                  		ld	d,a
(1) 1713/     814 : E6 80               		and	10000000b
(1) 1714/     816 : CB BA               		res	7,d
(1) 1715/     818 : E1                  		pop	hl
(1) 1716/     819 : 19                  		add	hl,de
(1) 1717/     81A : D1                  		pop	de
(1) 1718/     81B : C9                  		ret
(1) 1719/     81C :                     
(1) 1720/     81C :                     ; ============================================
(1) 1721/     81C :                     ; ----------------------------------------
(1) 1722/     81C :                     ; Process chip using it's table
(1) 1723/     81C :                     ;
(1) 1724/     81C :                     ; iy - table to read
(1) 1725/     81C :                     ; ----------------------------------------
(1) 1726/     81C :                     
(1) 1727/     81C :                     dtbl_multi:
(1) 1728/     81C : FD 7E 00            		ld	a,(iy)
(1) 1729/     81F : FE FF               		cp	-1
(1) 1730/     821 : C8                  		ret	z
(1) 1731/     822 : CD 32 08            		call	dtbl_singl
(1) 1732/     825 : CF                  		rst	8
(1) 1733/     826 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1734/     829 : FD 19               		add	iy,de
(1) 1735/     82B : 06 04               		ld	b,4		; ** wave sync ** IMPORTANT
(1) 1736/     82D : 10 FE               		djnz	$
(1) 1737/     82F : CF                  		rst	8
(1) 1738/     830 : 18 EA               		jr	dtbl_multi
(1) 1739/     832 :                     dtbl_singl:
(1) 1740/     832 : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1741/     835 : FD 56 01            		ld	d,(iy+1)
(1) 1742/     838 : 7A                  		ld	a,d		; If no-zero, active
(1) 1743/     839 : B3                  		or	e
(1) 1744/     83A : 20 60               		jr	nz,.linked
(1) 1745/     83C : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1746/     83F : B7                  		or	a
(1) 1747/     840 : F0                  		ret	p		; Return if not.
(1) 1748/     841 : CF                  		rst	8
(1) 1749/     842 : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1750/     846 :                     
(1) 1751/     846 :                     ; ----------------------------------------
(1) 1752/     846 :                     ; chip-silence request
(1) 1753/     846 :                     ; iy - Table
(1) 1754/     846 : E6 F0               		and	11110000b
(1) 1755/     848 : FE 80               		cp	80h
(1) 1756/     84A : 28 1E               		jr	z,.siln_psg
(1) 1757/     84C : FE 90               		cp	90h
(1) 1758/     84E : 28 16               		jr	z,.siln_psg_n
(1) 1759/     850 : FE A0               		cp	0A0h
(1) 1760/     852 : 28 42               		jr	z,.siln_fm
(1) 1761/     854 : FE B0               		cp	0B0h
(1) 1762/     856 : 28 3E               		jr	z,.siln_fm
(1) 1763/     858 : CF                  		rst	8
(1) 1764/     859 : FE C0               		cp	0C0h
(1) 1765/     85B : 28 36               		jr	z,.siln_dac
(1) 1766/     85D : FE D0               		cp	0D0h
(1) 1767/     85F : 28 10               		jr	z,.siln_pcm
(1) 1768/     861 : FE E0               		cp	0E0h
(1) 1769/     863 : 28 18               		jr	z,.siln_pwm
(1) 1770/     865 : C9                  		ret
(1) 1771/     866 :                     .siln_psg_n:
(1) 1772/     866 : AF                  		xor	a
(1) 1773/     867 : 32 F4 1C            		ld	(psgHatMode),a
(1) 1774/     86A :                     .siln_psg:
(1) 1775/     86A : CF                  		rst	8
(1) 1776/     86B : DD 21 5E 16         		ld	ix,psgcom
(1) 1777/     86F : 18 16               		jr	.rcyl_com
(1) 1778/     871 :                     
(1) 1779/     871 :                     ; --------------------------------
(1) 1780/     871 :                     
(1) 1781/     871 :                     .siln_pcm:
(1) 1782/     871 : 3E 01               		ld	a,1
(1) 1783/     873 : 32 F0 1B            		ld	(mcdUpd),a
(1) 1784/     876 : CF                  		rst	8
(1) 1785/     877 : DD 21 E6 15         		ld	ix,pcmcom
(1) 1786/     87B : 18 0A               		jr	.rcyl_com
(1) 1787/     87D :                     .siln_pwm:
(1) 1788/     87D : 3E 01               		ld	a,1
(1) 1789/     87F : 32 EF 1B            		ld	(marsUpd),a
(1) 1790/     882 : CF                  		rst	8
(1) 1791/     883 : DD 21 26 16         		ld	ix,pwmcom
(1) 1792/     887 :                     ; 		jr	.rcyl_com
(1) 1793/     887 :                     
(1) 1794/     887 :                     ; --------------------------------
(1) 1795/     887 :                     
(1) 1796/     887 :                     .rcyl_com:
(1) 1797/     887 : 06 00               		ld	b,0
(1) 1798/     889 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1799/     88C : DD 09               		add	ix,bc
(1) 1800/     88E : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1801/     892 : C9                  		ret
(1) 1802/     893 :                     
(1) 1803/     893 :                     ; --------------------------------
(1) 1804/     893 :                     
(1) 1805/     893 :                     .siln_dac:
(1) 1806/     893 : CD 4D 13            		call	dac_off
(1) 1807/     896 :                     .siln_fm:
(1) 1808/     896 : CD 7B 0A            		call	.fm_keyoff
(1) 1809/     899 : C3 83 0A            		jp	.fm_tloff
(1) 1810/     89C :                     
(1) 1811/     89C :                     ; ----------------------------------------
(1) 1812/     89C :                     ; Process channel now
(1) 1813/     89C :                     ; iy - Table
(1) 1814/     89C :                     ; ix - Tracker channel
(1) 1815/     89C :                     .linked:
(1) 1816/     89C : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1817/     89D : 47                  		ld	b,a		; b - flags to check
(1) 1818/     89E : E6 0F               		and	00001111b	; evin flags?
(1) 1819/     8A0 : C8                  		ret	z
(1) 1820/     8A1 : 78                  		ld	a,b
(1) 1821/     8A2 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1822/     8A4 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1823/     8A5 : FD E5               		push	iy		; table+10h instrment data
(1) 1824/     8A7 : D5                  		push	de
(1) 1825/     8A8 : DD E1               		pop	ix
(1) 1826/     8AA : E1                  		pop	hl
(1) 1827/     8AB : 11 10 00            		ld	de,10h		; Go to stored inst data
(1) 1828/     8AE : 19                  		add	hl,de
(1) 1829/     8AF :                     
(1) 1830/     8AF :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1831/     8AF :                     	; iy - Our chip table
(1) 1832/     8AF :                     	; ix - Track channel
(1) 1833/     8AF :                     	; hl - Intrument data
(1) 1834/     8AF : CB 40               		bit	0,b		; Note
(1) 1835/     8B1 : C4 22 0F            		call	nz,.note
(1) 1836/     8B4 : CB 48               		bit	1,b		; Intrument
(1) 1837/     8B6 : C4 74 0D            		call	nz,.inst
(1) 1838/     8B9 : CF                  		rst	8
(1) 1839/     8BA : CB 50               		bit	2,b		; Volume
(1) 1840/     8BC : C4 6B 0D            		call	nz,.volu
(1) 1841/     8BF : CB 58               		bit	3,b		; Effect
(1) 1842/     8C1 : C4 69 0C            		call	nz,.effc
(1) 1843/     8C4 :                     
(1) 1844/     8C4 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1845/     8C5 : E6 70               		and	01110000b	; Filter bits
(1) 1846/     8C7 : 0F                  		rrca
(1) 1847/     8C8 : 0F                  		rrca
(1) 1848/     8C9 : 0F                  		rrca
(1) 1849/     8CA : CF                  		rst	8
(1) 1850/     8CB : 16 00               		ld	d,0
(1) 1851/     8CD : 5F                  		ld	e,a
(1) 1852/     8CE : 21 D7 08            		ld	hl,.mk_list
(1) 1853/     8D1 : 19                  		add	hl,de
(1) 1854/     8D2 : 7E                  		ld	a,(hl)
(1) 1855/     8D3 : 23                  		inc	hl
(1) 1856/     8D4 : 66                  		ld	h,(hl)
(1) 1857/     8D5 : 6F                  		ld	l,a
(1) 1858/     8D6 : E9                  		jp	(hl)
(1) 1859/     8D7 :                     ; --------------------------------
(1) 1860/     8D7 :                     .mk_list:
(1) 1861/     8D7 : 2D 09               		dw .mk_psg
(1) 1862/     8D9 : E5 08               		dw .mk_psgn
(1) 1863/     8DB : 91 09               		dw .mk_fm
(1) 1864/     8DD : 11 0A               		dw .mk_fmspc
(1) 1865/     8DF : 65 0B               		dw .mk_dac
(1) 1866/     8E1 : BC 0B               		dw .mk_pcm
(1) 1867/     8E3 : BD 0B               		dw .mk_pwm
(1) 1868/     8E5 :                     
(1) 1869/     8E5 :                     ; --------------------------------
(1) 1870/     8E5 :                     ; PSGN
(1) 1871/     8E5 :                     ; --------------------------------
(1) 1872/     8E5 :                     
(1) 1873/     8E5 :                     .mk_psgn:
(1) 1874/     8E5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1875/     8E8 : DD E5               		push	ix
(1) 1876/     8EA : DD 21 61 16         		ld	ix,psgcom+3	; Steal PSG3
(1) 1877/     8EE : CB 40               		bit	0,b
(1) 1878/     8F0 : CA 7C 09            		jp	z,.psg_keyon
(1) 1879/     8F3 : CF                  		rst	8
(1) 1880/     8F4 : FE FE               		cp	-2
(1) 1881/     8F6 : 28 21               		jr	z,.kycut_psgn
(1) 1882/     8F8 : FE FF               		cp	-1
(1) 1883/     8FA : 28 10               		jr	z,.kyoff_psgn
(1) 1884/     8FC : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1885/     900 : 5F                  		ld	e,a
(1) 1886/     901 : 3A F4 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1887/     904 : E6 03               		and	011b
(1) 1888/     906 : FE 03               		cp	011b
(1) 1889/     908 : 20 72               		jr	nz,.psg_keyon	; Normal
(1) 1890/     90A : 18 42               		jr	.from_psgn	; Tone 3
(1) 1891/     90C :                     
(1) 1892/     90C :                     ; --------------------------------
(1) 1893/     90C :                     ; PSG
(1) 1894/     90C :                     ; --------------------------------
(1) 1895/     90C :                     
(1) 1896/     90C :                     ; -1
(1) 1897/     90C :                     .kyoff_psgn:
(1) 1898/     90C : CD 26 09            		call	.kypsgn_hatoff
(1) 1899/     90F :                     .kyoff_psg:
(1) 1900/     90F : 0E 02               		ld	c,010b
(1) 1901/     911 : DD 71 00            		ld	(ix),c
(1) 1902/     914 : DD E1               		pop	ix
(1) 1903/     916 : C3 98 0F            		jp	.chnl_ulnkoff
(1) 1904/     919 :                     ; -2
(1) 1905/     919 :                     .kycut_psgn:
(1) 1906/     919 : CD 26 09            		call	.kypsgn_hatoff
(1) 1907/     91C :                     .kycut_psg:
(1) 1908/     91C : 0E 04               		ld	c,100b
(1) 1909/     91E : DD 71 00            		ld	(ix),c
(1) 1910/     921 : DD E1               		pop	ix
(1) 1911/     923 : C3 92 0F            		jp	.chnl_ulnkcut
(1) 1912/     926 :                     .kypsgn_hatoff:
(1) 1913/     926 : 3E 00               		ld	a,000b
(1) 1914/     928 : 32 F4 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1915/     92B : CF                  		rst	8
(1) 1916/     92C : C9                  		ret
(1) 1917/     92D :                     
(1) 1918/     92D :                     .mk_psg:
(1) 1919/     92D : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1920/     930 : DD E5               		push	ix
(1) 1921/     932 : CF                  		rst	8
(1) 1922/     933 : DD 21 5E 16         		ld	ix,psgcom	; ix - psgcom
(1) 1923/     937 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1924/     93A : 16 00               		ld	d,0
(1) 1925/     93C : DD 19               		add	ix,de
(1) 1926/     93E : CB 40               		bit	0,b
(1) 1927/     940 : 28 3A               		jr	z,.psg_keyon
(1) 1928/     942 : FE FE               		cp	-2
(1) 1929/     944 : 28 D6               		jr	z,.kycut_psg
(1) 1930/     946 : FE FF               		cp	-1
(1) 1931/     948 : 28 C5               		jr	z,.kyoff_psg
(1) 1932/     94A : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1933/     94E :                     .from_psgn:
(1) 1934/     94E : CF                  		rst	8
(1) 1935/     94F : 16 00               		ld	d,0			; de - note*2
(1) 1936/     951 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; Freq index
(1) 1937/     954 : 21 36 14            		ld	hl,psgFreq_List-(36*2)	; <-- 48
(1) 1938/     957 : 19                  		add	hl,de
(1) 1939/     958 : 7E                  		ld	a,(hl)
(1) 1940/     959 : 23                  		inc	hl
(1) 1941/     95A : 66                  		ld	h,(hl)
(1) 1942/     95B : 6F                  		ld	l,a
(1) 1943/     95C : 3A 3E 00            		ld	a,(palMode)
(1) 1944/     95F : B7                  		or	a
(1) 1945/     960 : 28 01               		jr	z,.not_palp
(1) 1946/     962 : 2B                  		dec	hl
(1) 1947/     963 :                     .not_palp:
(1) 1948/     963 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1949/     966 : 07                  		rlca			; << 3
(1) 1950/     967 : 07                  		rlca
(1) 1951/     968 : CF                  		rst	8
(1) 1952/     969 : 07                  		rlca
(1) 1953/     96A : 57                  		ld	d,a
(1) 1954/     96B : E6 F8               		and	11111000b
(1) 1955/     96D : 5F                  		ld	e,a
(1) 1956/     96E : 7A                  		ld	a,d
(1) 1957/     96F : E6 07               		and	00000111b
(1) 1958/     971 : 57                  		ld	d,a
(1) 1959/     972 : 37                  		scf
(1) 1960/     973 : 3F                  		ccf
(1) 1961/     974 : ED 52               		sbc	hl,de
(1) 1962/     976 : DD 75 1C            		ld	(ix+DTL),l
(1) 1963/     979 : DD 74 20            		ld	(ix+DTH),h
(1) 1964/     97C :                     .psg_keyon:
(1) 1965/     97C : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1966/     97F : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1967/     982 : ED 44               		neg	a
(1) 1968/     984 : CF                  		rst	8
(1) 1969/     985 : 87                  		add	a,a
(1) 1970/     986 : 87                  		add	a,a
(1) 1971/     987 : 30 02               		jr	nc,.vmuch
(1) 1972/     989 : 3E FF               		ld	a,-1
(1) 1973/     98B :                     .vmuch:
(1) 1974/     98B : DD 77 30            		ld	(ix+PVOL),a
(1) 1975/     98E : DD E1               		pop	ix
(1) 1976/     990 : C9                  		ret
(1) 1977/     991 :                     
(1) 1978/     991 :                     ; --------------------------------
(1) 1979/     991 :                     ; FM
(1) 1980/     991 :                     ; --------------------------------
(1) 1981/     991 :                     
(1) 1982/     991 :                     .mk_fm:
(1) 1983/     991 : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 1984/     994 : CB 40               		bit	0,b		; NEW note?
(1) 1985/     996 : 28 65               		jr	z,.mkfm_set
(1) 1986/     998 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1987/     99B : FE FE               		cp	-2
(1) 1988/     99D : CA 72 0A            		jp	z,.fm_cut
(1) 1989/     9A0 : FE FF               		cp	-1
(1) 1990/     9A2 : CA 6C 0A            		jp	z,.fm_off
(1) 1991/     9A5 :                     ; 		call	.fm_tloff
(1) 1992/     9A5 : CF                  		rst	8
(1) 1993/     9A6 : 79                  		ld	a,c
(1) 1994/     9A7 : FE 06               		cp	6
(1) 1995/     9A9 : 20 05               		jr	nz,.not_dac
(1) 1996/     9AB : CD 4D 13            		call	dac_off
(1) 1997/     9AE : 18 15               		jr	.not_dspc
(1) 1998/     9B0 :                     .not_dac:
(1) 1999/     9B0 :                     ; 		ld	a,c
(1) 2000/     9B0 : FE 02               		cp	2
(1) 2001/     9B2 : 20 11               		jr	nz,.not_dspc
(1) 2002/     9B4 : 3A F5 1C            		ld	a,(fmSpecial)
(1) 2003/     9B7 : B7                  		or	a
(1) 2004/     9B8 : 28 0B               		jr	z,.not_dspc
(1) 2005/     9BA : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2006/     9BD : CD 22 13            		call	fm_send_1
(1) 2007/     9C0 : 3E 00               		ld	a,0
(1) 2008/     9C2 : 32 F5 1C            		ld	(fmSpecial),a
(1) 2009/     9C5 :                     .not_dspc:
(1) 2010/     9C5 : CD 7B 0A            		call	.fm_keyoff
(1) 2011/     9C8 : C5                  		push	bc
(1) 2012/     9C9 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 2013/     9CC : 47                  		ld	b,a
(1) 2014/     9CD : E6 1F               		and	00011111b
(1) 2015/     9CF : 5F                  		ld	e,a
(1) 2016/     9D0 : 16 00               		ld	d,0
(1) 2017/     9D2 : 21 66 14            		ld	hl,fmFreq_List
(1) 2018/     9D5 : 19                  		add	hl,de
(1) 2019/     9D6 : 7E                  		ld	a,(hl)
(1) 2020/     9D7 : CF                  		rst	8
(1) 2021/     9D8 : 23                  		inc	hl
(1) 2022/     9D9 : 66                  		ld	h,(hl)
(1) 2023/     9DA : 6F                  		ld	l,a
(1) 2024/     9DB : 3A 3E 00            		ld	a,(palMode)
(1) 2025/     9DE : B7                  		or	a
(1) 2026/     9DF : 28 04               		jr	z,.not_pal
(1) 2027/     9E1 : 11 04 00            		ld	de,4
(1) 2028/     9E4 : 19                  		add	hl,de
(1) 2029/     9E5 :                     .not_pal:
(1) 2030/     9E5 : 78                  		ld	a,b
(1) 2031/     9E6 : E6 E0               		and	11100000b
(1) 2032/     9E8 : 0F                  		rrca
(1) 2033/     9E9 : 0F                  		rrca
(1) 2034/     9EA : B4                  		or	h
(1) 2035/     9EB : 67                  		ld	h,a
(1) 2036/     9EC : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2037/     9EF : CF                  		rst	8
(1) 2038/     9F0 : AF                  		xor	a		; Clear high
(1) 2039/     9F1 : 3F                  		ccf			; Clear carry
(1) 2040/     9F2 : CB 23               		sla	e		; << 2
(1) 2041/     9F4 : CB 23               		sla	e
(1) 2042/     9F6 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2043/     9F7 : 57                  		ld	d,a
(1) 2044/     9F8 : 19                  		add	hl,de
(1) 2045/     9F9 : CD 9A 0A            		call	.fm_setfreq
(1) 2046/     9FC : C1                  		pop	bc
(1) 2047/     9FD :                     
(1) 2048/     9FD :                     ; --------------------------------
(1) 2049/     9FD :                     
(1) 2050/     9FD :                     .mkfm_set:
(1) 2054/     9FD : CD 2F 0B            		call	.fm_wrtalpan		; Panning and effects
(1) 2055/     A00 : CD B1 0A            		call	.fm_wrtlvol		; FM volume control
(1) 2056/     A03 : FD 7E 0F            		ld	a,(iy+ztbl_FM_keys)	; 0Fh - keys ***
(1) 2057/     A06 : E6 F0               		and	11110000b
(1) 2058/     A08 : B1                  		or	c			; Merge FM channel
(1) 2059/     A09 : 5F                  		ld	e,a
(1) 2060/     A0A : 16 28               		ld	d,28h
(1) 2061/     A0C : CD 22 13            		call	fm_send_1		; Set keys
(1) 2062/     A0F : CF                  		rst	8
(1) 2063/     A10 :                     .nofm_note:
(1) 2064/     A10 : C9                  		ret
(1) 2066/     A11 :                     
(1) 2067/     A11 :                     ; --------------------------------
(1) 2068/     A11 :                     ; FM3 special
(1) 2069/     A11 :                     ; --------------------------------
(1) 2070/     A11 :                     
(1) 2071/     A11 :                     .mk_fmspc:
(1) 2072/     A11 : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 2073/     A14 : CB 40               		bit	0,b		; NEW Note?
(1) 2074/     A16 : 28 E5               		jr	z,.mkfm_set
(1) 2075/     A18 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2076/     A1B : FE FE               		cp	-2
(1) 2077/     A1D : CA 72 0A            		jp	z,.fm_cut
(1) 2078/     A20 : FE FF               		cp	-1
(1) 2079/     A22 : CA 6C 0A            		jp	z,.fm_off
(1) 2080/     A25 : CD 7B 0A            		call	.fm_keyoff
(1) 2081/     A28 : 21 DA 1B            		ld	hl,fmcach_list	; Read external freqs
(1) 2082/     A2B : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2083/     A2E : E6 07               		and	0111b
(1) 2084/     A30 : 16 00               		ld	d,0
(1) 2085/     A32 : 87                  		add	a,a
(1) 2086/     A33 : 5F                  		ld	e,a
(1) 2087/     A34 : CF                  		rst	8
(1) 2088/     A35 : 19                  		add	hl,de
(1) 2089/     A36 : 7E                  		ld	a,(hl)
(1) 2090/     A37 : 23                  		inc	hl
(1) 2091/     A38 : 66                  		ld	h,(hl)
(1) 2092/     A39 : 6F                  		ld	l,a
(1) 2093/     A3A : CF                  		rst	8
(1) 2094/     A3B : 11 20 00            		ld	de,20h		; point to regs
(1) 2095/     A3E : 19                  		add	hl,de
(1) 2096/     A3F : DD E5               		push	ix
(1) 2097/     A41 : DD 21 64 0A         		ld	ix,.spcreglist
(1) 2098/     A45 : 06 08               		ld	b,8
(1) 2099/     A47 :                     .wr_spc:
(1) 2100/     A47 : DD 56 00            		ld	d,(ix)
(1) 2101/     A4A : 5E                  		ld	e,(hl)
(1) 2102/     A4B : CD 22 13            		call	fm_send_1
(1) 2103/     A4E : CF                  		rst	8
(1) 2104/     A4F : 23                  		inc	hl
(1) 2105/     A50 : DD 23               		inc	ix
(1) 2106/     A52 : 10 F3               		djnz	.wr_spc
(1) 2107/     A54 : DD E1               		pop	ix
(1) 2108/     A56 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2109/     A59 : CD 22 13            		call	fm_send_1
(1) 2110/     A5C : 3E 01               		ld	a,1
(1) 2111/     A5E : 32 F5 1C            		ld	(fmSpecial),a
(1) 2112/     A61 : C3 FD 09            		jp	.mkfm_set
(1) 2113/     A64 :                     .spcreglist:
(1) 2114/     A64 : AD A9               		db 0ADh,0A9h
(1) 2115/     A66 : AC A8               		db 0ACh,0A8h
(1) 2116/     A68 : AE AA               		db 0AEh,0AAh
(1) 2117/     A6A : A6 A2               		db 0A6h,0A2h
(1) 2118/     A6C :                     
(1) 2119/     A6C :                     ; ----------------------------------------
(1) 2120/     A6C :                     
(1) 2121/     A6C :                     .fm_off:
(1) 2122/     A6C : CD 7B 0A            		call	.fm_keyoff
(1) 2123/     A6F : C3 98 0F            		jp	.chnl_ulnkoff
(1) 2124/     A72 :                     .fm_cut:
(1) 2125/     A72 : CD 7B 0A            		call	.fm_keyoff
(1) 2126/     A75 : CD 83 0A            		call	.fm_tloff
(1) 2127/     A78 : C3 92 0F            		jp	.chnl_ulnkcut
(1) 2128/     A7B :                     
(1) 2129/     A7B :                     ; ----------------------------------------
(1) 2130/     A7B :                     
(1) 2131/     A7B :                     .fm_keyoff:
(1) 2132/     A7B : 16 28               		ld	d,28h
(1) 2133/     A7D : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2134/     A80 : C3 22 13            		jp	fm_send_1
(1) 2135/     A83 :                     .fm_tloff:
(1) 2136/     A83 : 06 04               		ld	b,4
(1) 2137/     A85 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2138/     A88 : 79                  		ld	a,c
(1) 2139/     A89 : E6 03               		and	011b
(1) 2140/     A8B : F6 40               		or	40h	; TL regs
(1) 2141/     A8D : 1E 7F               		ld	e,7Fh
(1) 2142/     A8F :                     .tl_down:
(1) 2143/     A8F : 57                  		ld	d,a
(1) 2144/     A90 :                     ; 		ld	e,7Fh
(1) 2145/     A90 : CD 1E 13            		call	fm_autoreg
(1) 2146/     A93 : CF                  		rst	8
(1) 2147/     A94 : 7A                  		ld	a,d
(1) 2148/     A95 : C6 04               		add	a,4
(1) 2149/     A97 : 10 F6               		djnz	.tl_down
(1) 2150/     A99 : C9                  		ret
(1) 2151/     A9A :                     ; c - KeyID
(1) 2152/     A9A :                     .fm_setfreq:
(1) 2153/     A9A : 79                  		ld	a,c
(1) 2154/     A9B : E6 03               		and	011b
(1) 2155/     A9D : F6 A4               		or	0A4h
(1) 2156/     A9F : 57                  		ld	d,a
(1) 2157/     AA0 : 5C                  		ld	e,h
(1) 2158/     AA1 : CF                  		rst	8
(1) 2159/     AA2 : CD 1E 13            		call	fm_autoreg
(1) 2160/     AA5 : 79                  		ld	a,c
(1) 2161/     AA6 : E6 03               		and	011b
(1) 2162/     AA8 : F6 A0               		or	0A0h
(1) 2163/     AAA : 57                  		ld	d,a
(1) 2164/     AAB : 5D                  		ld	e,l
(1) 2165/     AAC : CD 1E 13            		call	fm_autoreg
(1) 2166/     AAF : CF                  		rst	8
(1) 2167/     AB0 : C9                  		ret
(1) 2168/     AB1 :                     
(1) 2169/     AB1 :                     ; --------------------------------
(1) 2170/     AB1 :                     ; WRITE TL volume
(1) 2171/     AB1 :                     
(1) 2172/     AB1 :                     .fm_wrtlvol:
(1) 2173/     AB1 : 21 DA 1B            		ld	hl,fmcach_list
(1) 2174/     AB4 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2175/     AB7 : E6 07               		and	0111b
(1) 2176/     AB9 : 16 00               		ld	d,0
(1) 2177/     ABB : CF                  		rst	8
(1) 2178/     ABC : 87                  		add	a,a
(1) 2179/     ABD : 5F                  		ld	e,a
(1) 2180/     ABE : 19                  		add	hl,de
(1) 2181/     ABF : 7E                  		ld	a,(hl)
(1) 2182/     AC0 : 23                  		inc	hl
(1) 2183/     AC1 : 66                  		ld	h,(hl)
(1) 2184/     AC2 : 6F                  		ld	l,a
(1) 2185/     AC3 : 23                  		inc	hl
(1) 2186/     AC4 : 23                  		inc	hl
(1) 2187/     AC5 : 23                  		inc	hl
(1) 2188/     AC6 : CF                  		rst	8
(1) 2189/     AC7 : 23                  		inc	hl		; Point to TL's
(1) 2190/     AC8 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2191/     ACB : E6 03               		and	011b
(1) 2192/     ACD : F6 40               		or	40h		; TL registers
(1) 2193/     ACF : 57                  		ld	d,a
(1) 2194/     AD0 :                     ; d - 40h+
(1) 2195/     AD0 :                     ; hl - TL data
(1) 2196/     AD0 :                     ; .fm_wrtlvol:
(1) 2197/     AD0 : C5                  		push	bc
(1) 2198/     AD1 : E5                  		push	hl
(1) 2199/     AD2 : 21 27 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2200/     AD5 : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; Read 0B0h copy
(1) 2201/     AD8 : E6 07               		and	0111b
(1) 2202/     ADA : 06 00               		ld	b,0
(1) 2203/     ADC : 4F                  		ld	c,a
(1) 2204/     ADD : 09                  		add	hl,bc
(1) 2205/     ADE : FD 7E 07            		ld	a,(iy+ztbl_Volume)		; Read current Volume
(1) 2206/     AE1 : CF                  		rst	8
(1) 2207/     AE2 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)		; + MASTER vol
(1) 2208/     AE5 : 4F                  		ld	c,a			; c - Current Volume
(1) 2209/     AE6 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2210/     AE7 : E1                  		pop	hl
(1) 2211/     AE8 : CB 08               		rrc	b			; OP1
(1) 2212/     AEA : DC 15 0B            		call	c,.write_tl
(1) 2213/     AED : 23                  		inc	hl
(1) 2214/     AEE : 14                  		inc	d
(1) 2215/     AEF : 14                  		inc	d
(1) 2216/     AF0 : CF                  		rst	8
(1) 2217/     AF1 : 14                  		inc	d
(1) 2218/     AF2 : 14                  		inc	d
(1) 2219/     AF3 : CB 08               		rrc	b			; OP2
(1) 2220/     AF5 : DC 15 0B            		call	c,.write_tl
(1) 2221/     AF8 : 23                  		inc	hl
(1) 2222/     AF9 : 14                  		inc	d
(1) 2223/     AFA : 14                  		inc	d
(1) 2224/     AFB : 14                  		inc	d
(1) 2225/     AFC : 14                  		inc	d
(1) 2226/     AFD : CB 08               		rrc	b			; OP3
(1) 2227/     AFF : DC 15 0B            		call	c,.write_tl
(1) 2228/     B02 : 23                  		inc	hl
(1) 2229/     B03 : CF                  		rst	8
(1) 2230/     B04 : 14                  		inc	d
(1) 2231/     B05 : 14                  		inc	d
(1) 2232/     B06 : 14                  		inc	d
(1) 2233/     B07 : 14                  		inc	d
(1) 2234/     B08 : CB 08               		rrc	b			; OP4
(1) 2235/     B0A : DC 15 0B            		call	c,.write_tl
(1) 2236/     B0D : 23                  		inc	hl
(1) 2237/     B0E : 14                  		inc	d
(1) 2238/     B0F : 14                  		inc	d
(1) 2239/     B10 : 14                  		inc	d
(1) 2240/     B11 : 14                  		inc	d
(1) 2241/     B12 : CF                  		rst	8
(1) 2242/     B13 : C1                  		pop	bc
(1) 2243/     B14 : C9                  		ret
(1) 2244/     B15 :                     .write_tl:
(1) 2245/     B15 : 7E                  		ld	a,(hl)
(1) 2246/     B16 : 91                  		sub	a,c			; reg - volume
(1) 2247/     B17 : F2 1C 0B            		jp	p,.keep_tlmx
(1) 2248/     B1A : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2249/     B1C :                     .keep_tlmx:
(1) 2250/     B1C : C5                  		push	bc
(1) 2251/     B1D : 5F                  		ld	e,a
(1) 2252/     B1E : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2253/     B21 : CD 1E 13            		call	fm_autoreg
(1) 2254/     B24 : CF                  		rst	8
(1) 2255/     B25 : C1                  		pop	bc
(1) 2256/     B26 : C9                  		ret
(1) 2257/     B27 :                     ; Jump carry list
(1) 2258/     B27 :                     .fm_cindx:
(1) 2259/     B27 : 08                  		db 1000b
(1) 2260/     B28 : 08                  		db 1000b
(1) 2261/     B29 : 08                  		db 1000b
(1) 2262/     B2A : 08                  		db 1000b
(1) 2263/     B2B : 0C                  		db 1100b
(1) 2264/     B2C : 0E                  		db 1110b
(1) 2265/     B2D : 0E                  		db 1110b
(1) 2266/     B2E : 0F                  		db 1111b
(1) 2267/     B2F :                     ; c - KeyId
(1) 2268/     B2F :                     .fm_wrtalpan:
(1) 2269/     B2F : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; 0B0h algorithm
(1) 2270/     B32 : 5F                  		ld	e,a
(1) 2271/     B33 : 79                  		ld	a,c
(1) 2272/     B34 : E6 03               		and	011b
(1) 2273/     B36 : F6 B0               		or	0B0h
(1) 2274/     B38 : 57                  		ld	d,a
(1) 2275/     B39 : CD 1E 13            		call	fm_autoreg		; Write algorithm
(1) 2276/     B3C : CF                  		rst	8
(1) 2277/     B3D : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2278/     B40 : 2F                  		cpl				; REVERSE bits
(1) 2279/     B41 : E6 30               		and	00110000b
(1) 2280/     B43 : 07                  		rlca				; << 2
(1) 2281/     B44 : 07                  		rlca
(1) 2282/     B45 : 5F                  		ld	e,a			; save as e
(1) 2283/     B46 : FD 7E 0D            		ld	a,(iy+ztbl_FM_pmam)	; 0B4h %00aa0ppp
(1) 2284/     B49 : E6 3F               		and	00111111b
(1) 2285/     B4B : B3                  		or	e			; Merge panning
(1) 2286/     B4C : 5F                  		ld	e,a
(1) 2287/     B4D : 79                  		ld	a,c
(1) 2288/     B4E : CF                  		rst	8
(1) 2289/     B4F : E6 03               		and	011b
(1) 2290/     B51 : F6 B4               		or	0B4h
(1) 2291/     B53 : 57                  		ld	d,a
(1) 2292/     B54 : CD 1E 13            		call	fm_autoreg
(1) 2293/     B57 : FD 7E 0E            		ld	a,(iy+ztbl_FM_lfo)	; Read LFO
(1) 2294/     B5A : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2295/     B5C : 28 06               		jr	z,.no_lfo
(1) 2296/     B5E : 5F                  		ld	e,a
(1) 2297/     B5F : 16 22               		ld	d,22h
(1) 2298/     B61 : CD 22 13            		call	fm_send_1
(1) 2299/     B64 :                     .no_lfo:
(1) 2300/     B64 : C9                  		ret
(1) 2301/     B65 :                     
(1) 2302/     B65 :                     ; --------------------------------
(1) 2303/     B65 :                     ; DAC
(1) 2304/     B65 :                     ; --------------------------------
(1) 2305/     B65 :                     
(1) 2306/     B65 :                     .mk_dac:
(1) 2307/     B65 : CB 40               		bit	0,b
(1) 2308/     B67 : C8                  		ret	z
(1) 2309/     B68 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2310/     B6B : FE FE               		cp	-2
(1) 2311/     B6D : CA 8D 0B            		jp	z,.dac_cut
(1) 2312/     B70 : FE FF               		cp	-1
(1) 2313/     B72 : CA 93 0B            		jp	z,.dac_off
(1) 2314/     B75 : CD 96 0B            		call	.dac_pitch
(1) 2315/     B78 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2316/     B7B : 2F                  		cpl				; REVERSE bits
(1) 2317/     B7C : E6 30               		and	00110000b
(1) 2318/     B7E : 07                  		rlca
(1) 2319/     B7F : 07                  		rlca
(1) 2320/     B80 : CF                  		rst	8
(1) 2321/     B81 : 5F                  		ld	e,a
(1) 2322/     B82 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2323/     B84 : CD 2D 13            		call	fm_send_2
(1) 2324/     B87 :                     ; 		bit	0,b			; Note update?
(1) 2325/     B87 :                     ; 		ret	z
(1) 2326/     B87 : CD 4D 13            		call	dac_off
(1) 2327/     B8A : C3 62 13            		jp	dac_play
(1) 2328/     B8D :                     .dac_cut:
(1) 2329/     B8D : CD 4D 13            		call	dac_off
(1) 2330/     B90 : C3 98 0F            		jp	.chnl_ulnkoff
(1) 2331/     B93 :                     .dac_off:
(1) 2332/     B93 : C3 92 0F            		jp	.chnl_ulnkcut
(1) 2333/     B96 :                     .dac_pitch:
(1) 2334/     B96 : 16 00               		ld	d,0		; Freq index
(1) 2335/     B98 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2336/     B9B : 21 DE 14            		ld	hl,wavFreq_List-(2*36)
(1) 2337/     B9E : 19                  		add	hl,de
(1) 2338/     B9F : 7E                  		ld	a,(hl)
(1) 2339/     BA0 : 23                  		inc	hl
(1) 2340/     BA1 : 66                  		ld	h,(hl)
(1) 2341/     BA2 : 6F                  		ld	l,a
(1) 2342/     BA3 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2343/     BA6 : CF                  		rst	8
(1) 2344/     BA7 : AF                  		xor	a		; Clear high
(1) 2345/     BA8 : 3F                  		ccf			; Clear carry
(1) 2346/     BA9 : CB 23               		sla	e		; << 3
(1) 2347/     BAB : CB 23               		sla	e
(1) 2348/     BAD : CB 23               		sla	e
(1) 2349/     BAF : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2350/     BB0 : 57                  		ld	d,a
(1) 2351/     BB1 : 19                  		add	hl,de
(1) 2352/     BB2 : 22 FA 1B            		ld	(wave_Pitch),hl
(1) 2353/     BB5 : D9                  		exx			; *
(1) 2354/     BB6 : ED 5B FA 1B         		ld	de,(wave_Pitch)	; *
(1) 2355/     BBA : D9                  		exx			; *
(1) 2356/     BBB : C9                  		ret
(1) 2357/     BBC :                     
(1) 2358/     BBC :                     ; --------------------------------
(1) 2359/     BBC :                     ; PCM
(1) 2360/     BBC :                     ; --------------------------------
(1) 2361/     BBC :                     
(1) 2362/     BBC :                     .mk_pcm:
(1) 2456/     BBC : C9                  		ret
(1) 2458/     BBD :                     
(1) 2459/     BBD :                     ; --------------------------------
(1) 2460/     BBD :                     ; PWM
(1) 2461/     BBD :                     ; --------------------------------
(1) 2462/     BBD :                     
(1) 2463/     BBD :                     .mk_pwm:
(1) 2465/     BBD : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2466/     BC0 : 16 00               		ld	d,0
(1) 2467/     BC2 : FD 5E 03            		ld	e,(iy+ztbl_Chip)		; e - Channel ID
(1) 2468/     BC5 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2469/     BC8 : DD E5               		push	ix
(1) 2470/     BCA : DD 21 26 16         		ld	ix,pwmcom
(1) 2471/     BCE : DD 19               		add	ix,de
(1) 2472/     BD0 : FE FE               		cp	-2
(1) 2473/     BD2 : CA 3A 0C            		jp	z,.pwm_cut
(1) 2474/     BD5 : FE FF               		cp	-1
(1) 2475/     BD7 : CA 33 0C            		jp	z,.pwm_off
(1) 2476/     BDA : CF                  		rst	8
(1) 2477/     BDB : 78                  		ld	a,b
(1) 2478/     BDC : CB 40               		bit	0,b			; Note?
(1) 2479/     BDE : 20 0D               		jr	nz,.pw_note
(1) 2480/     BE0 : CB 58               		bit	3,b			; Effect?
(1) 2481/     BE2 : 20 05               		jr	nz,.pw_effc
(1) 2482/     BE4 : CB 50               		bit	2,b			; Volume?
(1) 2483/     BE6 : 20 01               		jr	nz,.pw_effc
(1) 2484/     BE8 : C9                  		ret
(1) 2485/     BE9 :                     .pw_effc:
(1) 2486/     BE9 : 1E 09               		ld	e,00001001b
(1) 2487/     BEB : 18 02               		jr	.pw_send
(1) 2488/     BED :                     .pw_note:
(1) 2489/     BED : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2490/     BEF :                     .pw_send:
(1) 2491/     BEF : DD 73 00            		ld	(ix),e		; Set command
(1) 2492/     BF2 : CD 4E 0C            		call	.readfreq_pwm
(1) 2493/     BF5 :                     	; hl - current freq
(1) 2494/     BF5 : 79                  		ld	a,c		; Read panning bits
(1) 2495/     BF6 : 2F                  		cpl			; Reverse and filter bits
(1) 2496/     BF7 : E6 30               		and	00110000b
(1) 2497/     BF9 : CF                  		rst	8
(1) 2498/     BFA : 5F                  		ld	e,a		; Save panning to e
(1) 2499/     BFB : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2500/     BFE : FE 40               		cp	40h
(1) 2501/     C00 : 28 09               		jr	z,.vpwm_siln
(1) 2502/     C02 : 30 07               		jr	nc,.vpwm_siln
(1) 2503/     C04 : 4F                  		ld	c,a
(1) 2504/     C05 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current volume
(1) 2505/     C08 : 91                  		sub	a,c		; + MASTER vol
(1) 2506/     C09 : 18 02               		jr	.vpwm_much
(1) 2507/     C0B :                     .vpwm_siln:
(1) 2508/     C0B : 3E C0               		ld	a,-40h
(1) 2509/     C0D :                     .vpwm_much:
(1) 2510/     C0D : ED 44               		neg	a
(1) 2511/     C0F : E6 FC               		and	11111100b
(1) 2512/     C11 : B4                  		or	h		; Merge MSB freq
(1) 2513/     C12 : 01 08 00            		ld	bc,8
(1) 2514/     C15 : DD 09               		add	ix,bc
(1) 2515/     C17 : DD 77 00            		ld	(ix),a
(1) 2516/     C1A : DD 09               		add	ix,bc
(1) 2517/     C1C : DD 75 00            		ld	(ix),l
(1) 2518/     C1F : DD 09               		add	ix,bc
(1) 2519/     C21 : CF                  		rst	8
(1) 2520/     C22 : DD 7E 00            		ld	a,(ix)
(1) 2521/     C25 : E6 CF               		and	11001111b
(1) 2522/     C27 : B3                  		or	e		; Set panning bits
(1) 2523/     C28 : DD 77 00            		ld	(ix),a
(1) 2525/     C2B : 3E 01               		ld	a,1
(1) 2526/     C2D : 32 EF 1B            		ld	(marsUpd),a
(1) 2528/     C30 : DD E1               		pop	ix
(1) 2529/     C32 : C9                  		ret
(1) 2530/     C33 :                     
(1) 2531/     C33 :                     ; --------------------------------
(1) 2532/     C33 :                     ; -1
(1) 2533/     C33 :                     .pwm_off:
(1) 2534/     C33 : CF                  		rst	8
(1) 2535/     C34 : DD 36 00 02         		ld	(ix),010b
(1) 2536/     C38 : 18 05               		jr	.pwm_setcoff
(1) 2537/     C3A :                     ; -2
(1) 2538/     C3A :                     .pwm_cut:
(1) 2539/     C3A : CF                  		rst	8
(1) 2540/     C3B : DD 36 00 04         		ld	(ix),100b
(1) 2541/     C3F :                     .pwm_setcoff:
(1) 2542/     C3F : 3E 01               		ld	a,1
(1) 2543/     C41 : 32 EF 1B            		ld	(marsUpd),a
(1) 2544/     C44 : DD E1               		pop	ix
(1) 2545/     C46 : C3 98 0F            		jp	.chnl_ulnkoff
(1) 2549/     C49 :                     
(1) 2550/     C49 :                     ; --------------------------------
(1) 2551/     C49 :                     ; SHARED routine
(1) 2552/     C49 :                     
(1) 2553/     C49 :                     .readfreq_pcm:
(1) 2554/     C49 : 21 3E 15            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2555/     C4C : 18 03               		jr	.set_wavfreq
(1) 2556/     C4E :                     .readfreq_pwm:
(1) 2557/     C4E : 21 DE 14            		ld	hl,wavFreq_List-(2*36)
(1) 2558/     C51 :                     .set_wavfreq:
(1) 2559/     C51 : 16 00               		ld	d,0		; Freq index
(1) 2560/     C53 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2561/     C56 : 19                  		add	hl,de
(1) 2562/     C57 : 7E                  		ld	a,(hl)
(1) 2563/     C58 : 23                  		inc	hl
(1) 2564/     C59 : 66                  		ld	h,(hl)
(1) 2565/     C5A : 6F                  		ld	l,a
(1) 2566/     C5B : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2567/     C5E : CF                  		rst	8
(1) 2568/     C5F : AF                  		xor	a		; Clear high
(1) 2569/     C60 : 3F                  		ccf			; Clear carry
(1) 2570/     C61 : CB 23               		sla	e		; << 2
(1) 2571/     C63 : CB 23               		sla	e
(1) 2572/     C65 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2573/     C66 : 57                  		ld	d,a
(1) 2574/     C67 : 19                  		add	hl,de
(1) 2575/     C68 : C9                  		ret
(1) 2576/     C69 :                     
(1) 2577/     C69 :                     ; ----------------------------------------
(1) 2578/     C69 :                     ; NEW effect
(1) 2579/     C69 :                     ; ----------------------------------------
(1) 2580/     C69 :                     
(1) 2581/     C69 :                     .effc:
(1) 2582/     C69 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2583/     C6C : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2584/     C6F : 57                  		ld	d,a
(1) 2585/     C70 : CF                  		rst	8
(1) 2586/     C71 : FE 04               		cp	4			; Effect D?
(1) 2587/     C73 : 28 0F               		jr	z,.effc_D
(1) 2588/     C75 : FE 05               		cp	5			; Effect E?
(1) 2589/     C77 : 28 4E               		jr	z,.effc_E
(1) 2590/     C79 : FE 06               		cp	6			; Effect F?
(1) 2591/     C7B : 28 5F               		jr	z,.effc_F
(1) 2592/     C7D : CF                  		rst	8
(1) 2593/     C7E : FE 18               		cp	24			; Effect X?
(1) 2594/     C80 : CA FD 0C            		jp	z,.effc_X
(1) 2595/     C83 : C9                  		ret
(1) 2596/     C84 :                     
(1) 2597/     C84 :                     ; ----------------------------------------
(1) 2598/     C84 :                     ; Effect D
(1) 2599/     C84 :                     ;
(1) 2600/     C84 :                     ; Volume slide down
(1) 2601/     C84 :                     ;
(1) 2602/     C84 :                     ; 0xh-Exh - Normal
(1) 2603/     C84 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2604/     C84 :                     ; ----------------------------------------
(1) 2605/     C84 :                     
(1) 2606/     C84 :                     .effc_D:
(1) 2607/     C84 : CD F1 0C            		call	.save_arg
(1) 2608/     C87 : 79                  		ld	a,c		; Setting == 0?
(1) 2609/     C88 : B7                  		or	a
(1) 2610/     C89 : C8                  		ret	z
(1) 2611/     C8A : E6 F0               		and	0F0h
(1) 2612/     C8C : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2613/     C8E : FE F0               		cp	0F0h
(1) 2614/     C90 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2615/     C92 : CF                  		rst	8
(1) 2616/     C93 : 79                  		ld	a,c
(1) 2617/     C94 : E6 0F               		and	00Fh
(1) 2618/     C96 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2619/     C98 : FE 0F               		cp	00Fh
(1) 2620/     C9A : 28 17               		jr	z,.fine_up	; xFh
(1) 2621/     C9C : C9                  		ret
(1) 2622/     C9D :                     ; Go down
(1) 2623/     C9D :                     .norm_down:
(1) 2624/     C9D : CB 21               		sla	c
(1) 2625/     C9F :                     .fine_down:
(1) 2626/     C9F : CB 21               		sla	c
(1) 2627/     CA1 : 79                  		ld	a,c
(1) 2628/     CA2 : E6 3C               		and	00111100b
(1) 2629/     CA4 : 4F                  		ld	c,a
(1) 2630/     CA5 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2631/     CA8 : CF                  		rst	8
(1) 2632/     CA9 : 91                  		sub	a,c
(1) 2633/     CAA : 1E C0               		ld	e,0C0h
(1) 2634/     CAC : BB                  		cp	e
(1) 2635/     CAD : D2 C3 0C            		jp	nc,.vol_dvld
(1) 2636/     CB0 : 7B                  		ld	a,e
(1) 2637/     CB1 : 18 10               		jr 	.vol_dvld
(1) 2638/     CB3 :                     ; Go up
(1) 2639/     CB3 :                     .fine_up:
(1) 2640/     CB3 : CB 39               		srl	c
(1) 2641/     CB5 :                     .norm_up:
(1) 2642/     CB5 : CB 39               		srl	c
(1) 2643/     CB7 : 79                  		ld	a,c
(1) 2644/     CB8 : E6 3C               		and	00111100b
(1) 2645/     CBA : 4F                  		ld	c,a
(1) 2646/     CBB : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2647/     CBE : CF                  		rst	8
(1) 2648/     CBF : 81                  		add	a,c
(1) 2649/     CC0 : 38 01               		jr	c,.vol_dvld
(1) 2650/     CC2 : AF                  		xor	a
(1) 2651/     CC3 :                     .vol_dvld:
(1) 2652/     CC3 : FD 77 07            		ld	(iy+ztbl_Volume),a
(1) 2653/     CC6 : C9                  		ret
(1) 2654/     CC7 :                     
(1) 2655/     CC7 :                     ; ----------------------------------------
(1) 2656/     CC7 :                     ; Effect E
(1) 2657/     CC7 :                     ; ----------------------------------------
(1) 2658/     CC7 :                     
(1) 2659/     CC7 :                     .effc_E:
(1) 2660/     CC7 : CD F1 0C            		call	.save_arg
(1) 2661/     CCA : 79                  		ld	a,c
(1) 2662/     CCB : E6 F0               		and	0F0h
(1) 2663/     CCD : FE F0               		cp	0F0h
(1) 2664/     CCF : C8                  		ret	z
(1) 2665/     CD0 : FE E0               		cp	0E0h
(1) 2666/     CD2 : C8                  		ret	z
(1) 2667/     CD3 : CF                  		rst	8
(1) 2668/     CD4 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2669/     CD7 : 91                  		sub	a,c
(1) 2670/     CD8 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2671/     CDB : C9                  		ret
(1) 2672/     CDC :                     
(1) 2673/     CDC :                     ; ----------------------------------------
(1) 2674/     CDC :                     ; Effect F
(1) 2675/     CDC :                     ; ----------------------------------------
(1) 2676/     CDC :                     
(1) 2677/     CDC :                     .effc_F:
(1) 2678/     CDC : CD F1 0C            		call	.save_arg
(1) 2679/     CDF : 79                  		ld	a,c
(1) 2680/     CE0 : E6 F0               		and	0F0h
(1) 2681/     CE2 : FE F0               		cp	0F0h
(1) 2682/     CE4 : C8                  		ret	z
(1) 2683/     CE5 : FE E0               		cp	0E0h
(1) 2684/     CE7 : C8                  		ret	z
(1) 2685/     CE8 : CF                  		rst	8
(1) 2686/     CE9 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2687/     CEC : 81                  		add	a,c
(1) 2688/     CED : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2689/     CF0 : C9                  		ret
(1) 2690/     CF1 :                     
(1) 2691/     CF1 :                     ; --------------------------------
(1) 2692/     CF1 :                     ; e - got arg
(1) 2693/     CF1 :                     ; c - new arg
(1) 2694/     CF1 :                     .save_arg:
(1) 2695/     CF1 : FD 4E 09            		ld	c,(iy+ztbl_EffBuff)	; Current slide setting
(1) 2696/     CF4 : 7B                  		ld	a,e			; EffArg is non-zero?
(1) 2697/     CF5 : B7                  		or	a
(1) 2698/     CF6 : 28 04               		jr	z,.D_cont		; 00h = slide continue
(1) 2699/     CF8 : 4F                  		ld	c,a
(1) 2700/     CF9 : FD 71 09            		ld	(iy+ztbl_EffBuff),c	; Store NEW slide setting
(1) 2701/     CFC :                     .D_cont:
(1) 2702/     CFC : C9                  		ret
(1) 2703/     CFD :                     
(1) 2704/     CFD :                     ; ----------------------------------------
(1) 2705/     CFD :                     ; Effect X
(1) 2706/     CFD :                     ;
(1) 2707/     CFD :                     ; Common panning values:
(1) 2708/     CFD :                     ;  00h LEFT
(1) 2709/     CFD :                     ;  80h MIDDLE
(1) 2710/     CFD :                     ; 0FFh RIGHT
(1) 2711/     CFD :                     ; ----------------------------------------
(1) 2712/     CFD :                     
(1) 2713/     CFD :                     .effc_X:
(1) 2714/     CFD : 16 00               		ld	d,0
(1) 2715/     CFF : 7E                  		ld	a,(hl)
(1) 2716/     D00 : E6 F0               		and	11110000b
(1) 2717/     D02 : FE 80               		cp	80h		; PSG?
(1) 2718/     D04 : 28 1D               		jr	z,.res_pan
(1) 2719/     D06 : FE 90               		cp	90h		; PSGN?
(1) 2720/     D08 : 28 19               		jr	z,.res_pan
(1) 2721/     D0A : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2722/     D0C : CC 2D 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2723/     D0F :                     
(1) 2724/     D0F :                     	; ----------------------------------------
(1) 2725/     D0F :                     	; Common panning bits: %00LR0000
(1) 2726/     D0F :                     	; (REVERSE: 0-on 1-off)
(1) 2727/     D0F : FD 36 09 00         		ld	(iy+ztbl_EffBuff),0
(1) 2728/     D13 : CF                  		rst	8
(1) 2729/     D14 : E5                  		push	hl
(1) 2730/     D15 : 21 43 0D            		ld	hl,.comn_panlist
(1) 2731/     D18 : 7B                  		ld	a,e
(1) 2732/     D19 : 07                  		rlca
(1) 2733/     D1A : 07                  		rlca
(1) 2734/     D1B : 07                  		rlca
(1) 2735/     D1C : E6 07               		and	0111b
(1) 2736/     D1E :                     ; 		ld	d,0
(1) 2737/     D1E : 5F                  		ld	e,a
(1) 2738/     D1F : CF                  		rst	8
(1) 2739/     D20 : 19                  		add	hl,de
(1) 2740/     D21 : 56                  		ld	d,(hl)
(1) 2741/     D22 : E1                  		pop	hl
(1) 2742/     D23 :                     .res_pan:
(1) 2743/     D23 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2744/     D26 : E6 CF               		and	11001111b
(1) 2745/     D28 : B2                  		or	d
(1) 2746/     D29 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2747/     D2C : C9                  		ret
(1) 2748/     D2D :                     
(1) 2749/     D2D :                     	; ----------------------------------------
(1) 2750/     D2D :                     	; MCD panning
(1) 2751/     D2D :                     .pan_mcd:
(1) 2752/     D2D : E5                  		push	hl
(1) 2753/     D2E : D5                  		push	de
(1) 2754/     D2F : 16 00               		ld	d,0
(1) 2755/     D31 : 21 4B 0D            		ld	hl,.pcm_panlist
(1) 2756/     D34 : 7B                  		ld	a,e
(1) 2757/     D35 : E6 F8               		and	0F8h
(1) 2758/     D37 : 0F                  		rrca
(1) 2759/     D38 : 0F                  		rrca
(1) 2760/     D39 : 0F                  		rrca
(1) 2761/     D3A : 5F                  		ld	e,a
(1) 2762/     D3B : 19                  		add	hl,de
(1) 2763/     D3C : 7E                  		ld	a,(hl)
(1) 2764/     D3D : FD 77 0A            		ld	(iy+ztbl_VarT0),a
(1) 2765/     D40 : D1                  		pop	de
(1) 2766/     D41 : E1                  		pop	hl
(1) 2767/     D42 : C9                  		ret
(1) 2768/     D43 :                     
(1) 2769/     D43 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2770/     D43 :                     ; 00LR0000b
(1) 2771/     D43 :                     .comn_panlist:
(1) 2772/     D43 : 10                  		db 00010000b
(1) 2773/     D44 : 10                  		db 00010000b
(1) 2774/     D45 : 10                  		db 00010000b
(1) 2775/     D46 : 00                  		db 00000000b
(1) 2776/     D47 : 00                  		db 00000000b
(1) 2777/     D48 : 20                  		db 00100000b
(1) 2778/     D49 : 20                  		db 00100000b
(1) 2779/     D4A : 20                  		db 00100000b
(1) 2780/     D4B :                     
(1) 2781/     D4B :                     ; REVERSE OUTPUT BITS
(1) 2782/     D4B :                     ; RRRR | LLLL
(1) 2783/     D4B :                     .pcm_panlist:
(1) 2784/     D4B : F0                  		db 0F0h	; 00h
(1) 2785/     D4C : E0                  		db 0E0h
(1) 2786/     D4D : D0                  		db 0D0h	; 10h
(1) 2787/     D4E : C0                  		db 0C0h
(1) 2788/     D4F : B0                  		db 0B0h	; 20h
(1) 2789/     D50 : A0                  		db 0A0h
(1) 2790/     D51 : 90                  		db 090h	; 30h
(1) 2791/     D52 : 80                  		db 080h
(1) 2792/     D53 : 70                  		db 070h	; 40h
(1) 2793/     D54 : 60                  		db 060h
(1) 2794/     D55 : 50                  		db 050h	; 50h
(1) 2795/     D56 : 40                  		db 040h
(1) 2796/     D57 : 30                  		db 030h	; 60h
(1) 2797/     D58 : 20                  		db 020h
(1) 2798/     D59 : 10                  		db 010h	; 70h
(1) 2799/     D5A : 00                  		db 000h
(1) 2800/     D5B : 00                  		db 000h ; 80h
(1) 2801/     D5C : 01                  		db 001h
(1) 2802/     D5D : 02                  		db 002h ; 90h
(1) 2803/     D5E : 03                  		db 003h
(1) 2804/     D5F : 04                  		db 004h ; A0h
(1) 2805/     D60 : 05                  		db 005h
(1) 2806/     D61 : 06                  		db 006h ; B0h
(1) 2807/     D62 : 07                  		db 007h
(1) 2808/     D63 : 08                  		db 008h ; C0h
(1) 2809/     D64 : 09                  		db 009h
(1) 2810/     D65 : 0A                  		db 00Ah ; D0h
(1) 2811/     D66 : 0B                  		db 00Bh
(1) 2812/     D67 : 0C                  		db 00Ch ; E0h
(1) 2813/     D68 : 0D                  		db 00Dh
(1) 2814/     D69 : 0E                  		db 00Eh ; F0h
(1) 2815/     D6A : 0F                  		db 00Fh
(1) 2816/     D6B :                     
(1) 2817/     D6B :                     ; ----------------------------------------
(1) 2818/     D6B :                     ; NEW volume
(1) 2819/     D6B :                     ; ----------------------------------------
(1) 2820/     D6B :                     
(1) 2821/     D6B :                     .volu:
(1) 2822/     D6B : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2823/     D6E : D6 40               		sub	a,64
(1) 2824/     D70 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2825/     D73 : C9                  		ret
(1) 2826/     D74 :                     
(1) 2827/     D74 :                     ; ----------------------------------------
(1) 2828/     D74 :                     ; NEW instrument
(1) 2829/     D74 :                     ; ----------------------------------------
(1) 2830/     D74 :                     
(1) 2831/     D74 :                     .inst:
(1) 2832/     D74 : 7E                  		ld	a,(hl)
(1) 2833/     D75 : E6 F0               		and	11110000b
(1) 2834/     D77 : FE 80               		cp	080h
(1) 2835/     D79 : 28 24               		jr	z,.ins_psg
(1) 2836/     D7B : FE 90               		cp	090h
(1) 2837/     D7D : 28 1A               		jr	z,.ins_psgn
(1) 2838/     D7F : FE A0               		cp	0A0h
(1) 2839/     D81 : 28 52               		jr	z,.ins_fm
(1) 2840/     D83 : CF                  		rst	8
(1) 2841/     D84 : FE B0               		cp	0B0h
(1) 2842/     D86 : 28 4D               		jr	z,.ins_fm
(1) 2843/     D88 : FE C0               		cp	0C0h
(1) 2844/     D8A : CA 53 0E            		jp	z,.ins_dac
(1) 2845/     D8D : FE D0               		cp	0D0h
(1) 2846/     D8F : CA A7 0E            		jp	z,.ins_pcm
(1) 2847/     D92 : FE E0               		cp	0E0h
(1) 2848/     D94 : CA DF 0E            		jp	z,.ins_pwm
(1) 2849/     D97 : CF                  		rst	8
(1) 2850/     D98 :                     .invl_ins:
(1) 2851/     D98 : C9                  		ret
(1) 2852/     D99 :                     
(1) 2853/     D99 :                     ; ----------------------------------------
(1) 2854/     D99 :                     ; PSG
(1) 2855/     D99 :                     
(1) 2856/     D99 :                     .ins_psgn:
(1) 2857/     D99 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2858/     D9A : E6 07               		and	0111b
(1) 2859/     D9C : 32 F4 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2860/     D9F :                     .ins_psg:
(1) 2861/     D9F : CF                  		rst	8
(1) 2862/     DA0 : DD E5               		push	ix
(1) 2863/     DA2 : E5                  		push	hl
(1) 2864/     DA3 : 23                  		inc	hl		; Skip ID
(1) 2865/     DA4 : DD 21 5E 16         		ld	ix,psgcom	; Read psg control
(1) 2866/     DA8 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2867/     DAB : 16 00               		ld	d,0
(1) 2868/     DAD : DD 19               		add	ix,de
(1) 2869/     DAF : 7E                  		ld	a,(hl)
(1) 2870/     DB0 : CF                  		rst	8
(1) 2871/     DB1 : 23                  		inc	hl
(1) 2872/     DB2 : 7E                  		ld	a,(hl)
(1) 2873/     DB3 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2874/     DB6 : 23                  		inc	hl
(1) 2875/     DB7 : 7E                  		ld	a,(hl)
(1) 2876/     DB8 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2877/     DBB : 23                  		inc	hl
(1) 2878/     DBC : 7E                  		ld	a,(hl)
(1) 2879/     DBD : CF                  		rst	8
(1) 2880/     DBE : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2881/     DC1 : 23                  		inc	hl
(1) 2882/     DC2 : 7E                  		ld	a,(hl)
(1) 2883/     DC3 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2884/     DC6 : 23                  		inc	hl
(1) 2885/     DC7 : 7E                  		ld	a,(hl)
(1) 2886/     DC8 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2887/     DCB : 23                  		inc	hl
(1) 2888/     DCC : 7E                  		ld	a,(hl)
(1) 2889/     DCD : CF                  		rst	8
(1) 2890/     DCE : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2891/     DD1 : E1                  		pop	hl
(1) 2892/     DD2 : DD E1               		pop	ix
(1) 2893/     DD4 : C9                  		ret
(1) 2894/     DD5 :                     
(1) 2895/     DD5 :                     ; ----------------------------------------
(1) 2896/     DD5 :                     ; FM/FM3
(1) 2897/     DD5 :                     
(1) 2898/     DD5 :                     .ins_fm:
(1) 2899/     DD5 : DD E5               		push	ix
(1) 2900/     DD7 : E5                  		push	hl
(1) 2901/     DD8 : C5                  		push	bc
(1) 2902/     DD9 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2903/     DDC : E6 07               		and	0111b
(1) 2904/     DDE : 16 00               		ld	d,0
(1) 2905/     DE0 : 87                  		add	a,a
(1) 2906/     DE1 : 5F                  		ld	e,a
(1) 2907/     DE2 : DD 21 DA 1B         		ld	ix,fmcach_list
(1) 2908/     DE6 : DD 19               		add	ix,de
(1) 2909/     DE8 : CF                  		rst	8
(1) 2910/     DE9 : DD 5E 00            		ld	e,(ix)
(1) 2911/     DEC : DD 23               		inc	ix
(1) 2912/     DEE : DD 56 00            		ld	d,(ix)
(1) 2913/     DF1 :                     
(1) 2914/     DF1 :                     ; 		ld	a,(iy+ztbl_VarT1)	; 0Bh: DON'T reload flag
(1) 2915/     DF1 :                     ; 		cp	b
(1) 2916/     DF1 :                     ; 		jr	z,.same_patch
(1) 2917/     DF1 :                     ; 		ld	(iy+ztbl_VarT1),b
(1) 2918/     DF1 : 23                  		inc	hl		; Skip id and pitch
(1) 2919/     DF2 : 23                  		inc	hl
(1) 2920/     DF3 : 46                  		ld	b,(hl)
(1) 2921/     DF4 : 23                  		inc	hl
(1) 2922/     DF5 : 4E                  		ld	c,(hl)
(1) 2923/     DF6 : 23                  		inc	hl
(1) 2924/     DF7 : 6E                  		ld	l,(hl)
(1) 2925/     DF8 : 61                  		ld	h,c
(1) 2926/     DF9 :                     
(1) 2927/     DF9 : FD 7E 0A            		ld	a,(iy+ztbl_VarT0)
(1) 2928/     DFC : BC                  		cp	h
(1) 2929/     DFD : 20 07               		jr	nz,.new_romdat
(1) 2930/     DFF : CF                  		rst	8
(1) 2931/     E00 : FD 7E 0B            		ld	a,(iy+ztbl_VarT1)
(1) 2932/     E03 : BD                  		cp	l
(1) 2933/     E04 : 28 38               		jr	z,.same_patch
(1) 2934/     E06 :                     .new_romdat:
(1) 2935/     E06 : FD 74 0A            		ld	(iy+ztbl_VarT0),h
(1) 2936/     E09 : FD 75 0B            		ld	(iy+ztbl_VarT1),l
(1) 2937/     E0C : 78                  		ld	a,b
(1) 2938/     E0D : 01 28 00            		ld	bc,28h		; <- size
(1) 2939/     E10 : D5                  		push	de
(1) 2940/     E11 : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2941/     E14 :                     
(1) 2942/     E14 : E1                  		pop	hl
(1) 2943/     E15 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2944/     E18 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2945/     E19 :                     
(1) 2946/     E19 :                     	; hl - fmcach intrument
(1) 2947/     E19 :                     	; de - FM reg and data: 3000h
(1) 2948/     E19 :                     	;  c - FM keyChannel
(1) 2949/     E19 : 79                  		ld	a,c
(1) 2950/     E1A : E6 03               		and	011b
(1) 2951/     E1C : F6 30               		or	30h		; Start at reg 30h
(1) 2952/     E1E : 57                  		ld	d,a
(1) 2953/     E1F : 1E 00               		ld	e,0
(1) 2954/     E21 : CF                  		rst	8
(1) 2955/     E22 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2956/     E24 : CD 43 0E            		call	.fm_setrlist
(1) 2957/     E27 :                     ; 		ld	b,4
(1) 2958/     E27 :                     ; 		call	.fm_setrlist
(1) 2959/     E27 :                     ; 		ld	b,5*4
(1) 2960/     E27 :                     ; 		call	.fm_setrlist
(1) 2961/     E27 : 7E                  		ld	a,(hl)			; 0B0h
(1) 2962/     E28 : FD 77 0C            		ld	(iy+ztbl_FM_alfd),a	; ** Save 0B0h
(1) 2963/     E2B : 23                  		inc	hl
(1) 2964/     E2C : 7E                  		ld	a,(hl)			; 0B4h
(1) 2965/     E2D : FD 77 0D            		ld	(iy+ztbl_FM_pmam),a	; ** Save 0B4h
(1) 2966/     E30 : 23                  		inc	hl
(1) 2967/     E31 : CF                  		rst	8
(1) 2968/     E32 : 7E                  		ld	a,(hl)
(1) 2969/     E33 : FD 77 0E            		ld	(iy+ztbl_FM_lfo),a	; LFO
(1) 2970/     E36 : 23                  		inc	hl
(1) 2971/     E37 : 7E                  		ld	a,(hl)			; 028h keys
(1) 2972/     E38 : E6 F0               		and	11110000b
(1) 2973/     E3A : CF                  		rst	8
(1) 2974/     E3B : FD 77 0F            		ld	(iy+ztbl_FM_keys),a	; ** Save keys
(1) 2975/     E3E :                     .same_patch:
(1) 2976/     E3E : C1                  		pop	bc
(1) 2977/     E3F : E1                  		pop	hl
(1) 2978/     E40 : DD E1               		pop	ix
(1) 2979/     E42 : C9                  		ret
(1) 2980/     E43 :                     ; b - numof_regs
(1) 2981/     E43 :                     .fm_setrlist:
(1) 2982/     E43 : 5E                  		ld	e,(hl)
(1) 2983/     E44 : 23                  		inc	hl
(1) 2984/     E45 : CD 1E 13            		call	fm_autoreg
(1) 2985/     E48 : 00                  		nop
(1) 2986/     E49 : 00                  		nop
(1) 2987/     E4A : CF                  		rst	8
(1) 2988/     E4B : 00                  		nop
(1) 2989/     E4C : 14                  		inc	d		; +4
(1) 2990/     E4D : 14                  		inc	d
(1) 2991/     E4E : 14                  		inc	d
(1) 2992/     E4F : 14                  		inc	d
(1) 2993/     E50 : 10 F1               		djnz	.fm_setrlist
(1) 2994/     E52 : C9                  		ret
(1) 2995/     E53 :                     
(1) 2996/     E53 :                     ; ----------------------------------------
(1) 2997/     E53 :                     
(1) 2998/     E53 :                     .ins_dac:
(1) 2999/     E53 : E5                  		push	hl
(1) 3000/     E54 : C5                  		push	bc
(1) 3001/     E55 : CD 4D 13            		call	dac_off
(1) 3002/     E58 : 7E                  		ld	a,(hl)
(1) 3003/     E59 : E6 0F               		and	00001111b
(1) 3004/     E5B : 32 FC 1B            		ld	(wave_Flags),a
(1) 3005/     E5E : CF                  		rst	8
(1) 3006/     E5F : 23                  		inc	hl
(1) 3007/     E60 : 23                  		inc	hl
(1) 3008/     E61 : 5E                  		ld	e,(hl)
(1) 3009/     E62 : 23                  		inc	hl
(1) 3010/     E63 : 7E                  		ld	a,(hl)
(1) 3011/     E64 : 23                  		inc	hl
(1) 3012/     E65 : 6E                  		ld	l,(hl)
(1) 3013/     E66 : 67                  		ld	h,a
(1) 3014/     E67 : E5                  		push	hl
(1) 3015/     E68 : 7B                  		ld	a,e
(1) 3016/     E69 : 01 06 00            		ld	bc,6		; Skip head
(1) 3017/     E6C : 09                  		add	hl,bc
(1) 3018/     E6D : CE 00               		adc	a,0
(1) 3019/     E6F : 22 F1 1B            		ld	(wave_Start),hl	; Set START point
(1) 3020/     E72 : 32 F3 1B            		ld	(wave_Start+2),a
(1) 3021/     E75 : E1                  		pop	hl
(1) 3022/     E76 : 7B                  		ld	a,e
(1) 3023/     E77 : 11 54 1F            		ld	de,sampleHead
(1) 3024/     E7A : 01 06 00            		ld	bc,6
(1) 3025/     E7D : D5                  		push	de
(1) 3026/     E7E : CF                  		rst	8
(1) 3027/     E7F : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3028/     E82 : E1                  		pop	hl
(1) 3029/     E83 :                     	; hl - temporal header
(1) 3030/     E83 : 5E                  		ld	e,(hl)
(1) 3031/     E84 : 23                  		inc	hl
(1) 3032/     E85 : 56                  		ld	d,(hl)
(1) 3033/     E86 : 23                  		inc	hl
(1) 3034/     E87 : 7E                  		ld	a,(hl)
(1) 3035/     E88 : 23                  		inc	hl
(1) 3036/     E89 : ED 53 F4 1B         		ld	(wave_Len),de	; LEN
(1) 3037/     E8D : 32 F6 1B            		ld	(wave_Len+2),a
(1) 3038/     E90 : 5E                  		ld	e,(hl)
(1) 3039/     E91 : 23                  		inc	hl
(1) 3040/     E92 : CF                  		rst	8
(1) 3041/     E93 : 56                  		ld	d,(hl)
(1) 3042/     E94 : 23                  		inc	hl
(1) 3043/     E95 : 7E                  		ld	a,(hl)
(1) 3044/     E96 : 23                  		inc	hl
(1) 3045/     E97 : ED 53 F7 1B         		ld	(wave_Loop),de	; LOOP
(1) 3046/     E9B : 32 F9 1B            		ld	(wave_Loop+2),a
(1) 3047/     E9E : 11 06 28            		ld	de,2806h	; keys off
(1) 3048/     EA1 : CD 22 13            		call	fm_send_1
(1) 3049/     EA4 : C1                  		pop	bc
(1) 3050/     EA5 : E1                  		pop	hl
(1) 3051/     EA6 :                     ; .same_dac:
(1) 3052/     EA6 : C9                  		ret
(1) 3053/     EA7 :                     
(1) 3054/     EA7 :                     ; ----------------------------------------
(1) 3055/     EA7 :                     
(1) 3056/     EA7 :                     .ins_pcm:
(1) 3057/     EA7 : DD E5               		push	ix
(1) 3058/     EA9 : E5                  		push	hl
(1) 3059/     EAA : C5                  		push	bc
(1) 3060/     EAB : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3061/     EAC : E6 01               		and	00000001b	; Read loop bit
(1) 3062/     EAE : 0F                  		rrca			; Move to MSB
(1) 3063/     EAF : CF                  		rst	8
(1) 3064/     EB0 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3065/     EB1 : 23                  		inc	hl
(1) 3066/     EB2 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3067/     EB3 : B3                  		or	e
(1) 3068/     EB4 : 5F                  		ld	e,a
(1) 3069/     EB5 : 23                  		inc	hl
(1) 3070/     EB6 : 7E                  		ld	a,(hl)
(1) 3071/     EB7 : 23                  		inc	hl
(1) 3072/     EB8 : 6E                  		ld	l,(hl)
(1) 3073/     EB9 : 67                  		ld	h,a
(1) 3074/     EBA :                     	; d    - Loop enable bit
(1) 3075/     EBA :                     	; e,hl - 24-bit pointer + loop bit
(1) 3076/     EBA : DD 21 E6 15         		ld	ix,pcmcom
(1) 3077/     EBE : 06 00               		ld	b,0
(1) 3078/     EC0 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3079/     EC3 : DD 09               		add	ix,bc
(1) 3080/     EC5 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3081/     EC8 : DD 09               		add	ix,bc
(1) 3082/     ECA : 01 08 00            		ld	bc,8
(1) 3083/     ECD : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3084/     ED0 : DD 09               		add	ix,bc
(1) 3085/     ED2 : DD 74 00            		ld	(ix),h
(1) 3086/     ED5 : DD 09               		add	ix,bc
(1) 3087/     ED7 : DD 75 00            		ld	(ix),l
(1) 3088/     EDA : C1                  		pop	bc
(1) 3089/     EDB : E1                  		pop	hl
(1) 3090/     EDC : DD E1               		pop	ix
(1) 3091/     EDE : C9                  		ret
(1) 3092/     EDF :                     
(1) 3093/     EDF :                     ; ----------------------------------------
(1) 3094/     EDF :                     
(1) 3095/     EDF :                     .ins_pwm:
(1) 3096/     EDF : DD E5               		push	ix
(1) 3097/     EE1 : E5                  		push	hl
(1) 3098/     EE2 : C5                  		push	bc
(1) 3099/     EE3 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3100/     EE4 : E6 03               		and	00000011b
(1) 3101/     EE6 : 0F                  		rrca
(1) 3102/     EE7 : 0F                  		rrca
(1) 3103/     EE8 : 4F                  		ld	c,a
(1) 3104/     EE9 : CF                  		rst	8
(1) 3105/     EEA : 23                  		inc	hl		; Skip ID and Pitch
(1) 3106/     EEB : 23                  		inc	hl
(1) 3107/     EEC : 56                  		ld	d,(hl)
(1) 3108/     EED : 23                  		inc	hl
(1) 3109/     EEE : 5E                  		ld	e,(hl)
(1) 3110/     EEF : 23                  		inc	hl
(1) 3111/     EF0 : 7E                  		ld	a,(hl)
(1) 3112/     EF1 : 23                  		inc	hl
(1) 3113/     EF2 : 6E                  		ld	l,(hl)
(1) 3114/     EF3 : 67                  		ld	h,a
(1) 3115/     EF4 : 79                  		ld	a,c
(1) 3116/     EF5 : B2                  		or	d
(1) 3117/     EF6 : 57                  		ld	d,a
(1) 3118/     EF7 : CF                  		rst	8
(1) 3119/     EF8 :                     	; de,hl - 32-bit PWM pointer
(1) 3120/     EF8 : DD 21 26 16         		ld	ix,pwmcom
(1) 3121/     EFC : 06 00               		ld	b,0
(1) 3122/     EFE : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3123/     F01 : DD 09               		add	ix,bc
(1) 3124/     F03 : 01 18 00            		ld	bc,24
(1) 3125/     F06 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3126/     F08 : 01 08 00            		ld	bc,8
(1) 3127/     F0B : DD 72 00            		ld	(ix),d
(1) 3128/     F0E : DD 09               		add	ix,bc
(1) 3129/     F10 : DD 73 00            		ld	(ix),e
(1) 3130/     F13 : DD 09               		add	ix,bc
(1) 3131/     F15 : DD 74 00            		ld	(ix),h
(1) 3132/     F18 : DD 09               		add	ix,bc
(1) 3133/     F1A : DD 75 00            		ld	(ix),l
(1) 3134/     F1D : C1                  		pop	bc
(1) 3135/     F1E : E1                  		pop	hl
(1) 3136/     F1F : DD E1               		pop	ix
(1) 3137/     F21 : C9                  		ret
(1) 3138/     F22 :                     
(1) 3139/     F22 :                     ; ----------------------------------------
(1) 3140/     F22 :                     ; NEW note
(1) 3141/     F22 :                     ; ----------------------------------------
(1) 3142/     F22 :                     
(1) 3143/     F22 :                     .note:
(1) 3144/     F22 : 78                  		ld	a,b		; Volume bit?
(1) 3145/     F23 : E6 04               		and	0100b
(1) 3146/     F25 : 20 05               		jr	nz,.fm_hasvol
(1) 3147/     F27 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3148/     F2B : CF                  		rst	8
(1) 3149/     F2C :                     .fm_hasvol:
(1) 3150/     F2C : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3151/     F2F : 4F                  		ld	c,a
(1) 3152/     F30 : FE FF               		cp	-1
(1) 3153/     F32 : C8                  		ret	z
(1) 3154/     F33 : FE FE               		cp	-2
(1) 3155/     F35 : C8                  		ret	z
(1) 3156/     F36 : E7                  		rst	20h
(1) 3157/     F37 : 7E                  		ld	a,(hl)
(1) 3158/     F38 : E6 F0               		and	11110000b
(1) 3159/     F3A : FE 80               		cp	80h
(1) 3160/     F3C : 28 16               		jr	z,.n_indx
(1) 3161/     F3E : CF                  		rst	8
(1) 3162/     F3F : FE 90               		cp	90h
(1) 3163/     F41 : 28 20               		jr	z,.n_psgn
(1) 3164/     F43 : FE A0               		cp	0A0h
(1) 3165/     F45 : 28 21               		jr	z,.n_fm
(1) 3166/     F47 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3167/     F47 :                     ; 		jr	z,.n_fm
(1) 3168/     F47 : FE C0               		cp	0C0h
(1) 3169/     F49 : 28 09               		jr	z,.n_indx
(1) 3170/     F4B : FE D0               		cp	0D0h
(1) 3171/     F4D : 28 05               		jr	z,.n_indx
(1) 3172/     F4F : FE E0               		cp	0E0h
(1) 3173/     F51 : 28 01               		jr	z,.n_indx
(1) 3174/     F53 : C9                  		ret
(1) 3175/     F54 :                     
(1) 3176/     F54 :                     ; --------------------------------
(1) 3177/     F54 :                     
(1) 3178/     F54 :                     .n_indx:
(1) 3179/     F54 : 79                  		ld	a,c
(1) 3180/     F55 :                     .n_stfreq:
(1) 3181/     F55 : 23                  		inc	hl		; Skip ID
(1) 3182/     F56 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3183/     F57 : 2B                  		dec	hl
(1) 3184/     F58 : 83                  		add	a,e		; Note + pitch
(1) 3185/     F59 : CF                  		rst	8
(1) 3186/     F5A : 87                  		add	a,a		; * 2
(1) 3187/     F5B : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3188/     F5E : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0	; reset pitchbend
(1) 3189/     F62 : C9                  		ret
(1) 3190/     F63 :                     .n_psgn:
(1) 3191/     F63 : 79                  		ld	a,c
(1) 3192/     F64 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3193/     F66 : 18 ED               		jr	.n_stfreq
(1) 3194/     F68 :                     
(1) 3195/     F68 :                     ; FM freqs
(1) 3196/     F68 :                     .n_fm:
(1) 3197/     F68 : 79                  		ld	a,c
(1) 3198/     F69 : 23                  		inc	hl		; Skip ID
(1) 3199/     F6A : 5E                  		ld	e,(hl)		; Read pitch
(1) 3200/     F6B : 2B                  		dec	hl
(1) 3201/     F6C : CF                  		rst	8
(1) 3202/     F6D : 83                  		add	a,e		; Note + pitch
(1) 3203/     F6E :                     	; Search for octave and note...
(1) 3204/     F6E : 0E 00               		ld	c,0		; c - octave
(1) 3205/     F70 : 16 07               		ld	d,7
(1) 3206/     F72 :                     .get_oct:
(1) 3207/     F72 : 5F                  		ld	e,a		; e - note
(1) 3208/     F73 : D6 0C               		sub	12
(1) 3209/     F75 : B7                  		or	a
(1) 3210/     F76 : FA 7D 0F            		jp	m,.fnd_oct
(1) 3211/     F79 : 0C                  		inc	c
(1) 3212/     F7A :                     ; 		nop
(1) 3213/     F7A :                     ; 		nop
(1) 3214/     F7A :                     ; 		rst	8
(1) 3215/     F7A :                     ; 		nop
(1) 3216/     F7A :                     ; 		nop
(1) 3217/     F7A : 15                  		dec	d
(1) 3218/     F7B : 20 F5               		jr	nz,.get_oct
(1) 3219/     F7D :                     .fnd_oct:
(1) 3220/     F7D : CF                  		rst	8
(1) 3221/     F7E : 7B                  		ld	a,e
(1) 3222/     F7F : 87                  		add	a,a		; Note * 2
(1) 3223/     F80 : E6 1F               		and	00011111b
(1) 3224/     F82 : CB 09               		rrc	c
(1) 3225/     F84 : CB 09               		rrc	c
(1) 3226/     F86 : CB 09               		rrc	c
(1) 3227/     F88 : CF                  		rst	8
(1) 3228/     F89 : B1                  		or	c
(1) 3229/     F8A : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3230/     F8D : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 3231/     F91 : C9                  		ret
(1) 3232/     F92 :                     
(1) 3233/     F92 :                     ; ----------------------------------------
(1) 3234/     F92 :                     
(1) 3235/     F92 :                     .chnl_ulnkcut:
(1) 3236/     F92 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3237/     F95 : C3 98 0F            		jp	.chnl_ulnk
(1) 3238/     F98 :                     .chnl_ulnkoff:
(1) 3239/     F98 :                     ; 		ld	c,0
(1) 3240/     F98 :                     
(1) 3241/     F98 :                     .chnl_ulnk:
(1) 3242/     F98 : AF                  		xor	a
(1) 3243/     F99 : CF                  		rst	8
(1) 3244/     F9A : FD 77 00            		ld	(iy),a				; Delete link, chip and prio
(1) 3245/     F9D : FD 77 01            		ld	(iy+1),a
(1) 3246/     FA0 : FD 77 02            		ld	(iy+2),a
(1) 3247/     FA3 :                     
(1) 3248/     FA3 : FD 77 07            		ld	(iy+ztbl_Volume),a		; <--
(1) 3249/     FA6 : FD 77 09            		ld	(iy+ztbl_EffBuff),a
(1) 3250/     FA9 : FD 77 0A            		ld	(iy+ztbl_VarT0),a
(1) 3251/     FAC : FD 77 0B            		ld	(iy+ztbl_VarT1),a
(1) 3252/     FAF : C9                  		ret
(1) 3253/     FB0 :                     
(1) 3254/     FB0 :                     ; ----------------------------------------
(1) 3255/     FB0 :                     ; Reset all table
(1) 3256/     FB0 :                     ;
(1) 3257/     FB0 :                     ; hl - Current channel table
(1) 3258/     FB0 :                     ; d - Silence chip
(1) 3259/     FB0 :                     ;
(1) 3260/     FB0 :                     ; Uses:
(1) 3261/     FB0 :                     ; b
(1) 3262/     FB0 :                     ; ----------------------------------------
(1) 3263/     FB0 :                     
(1) 3264/     FB0 :                     tblz_clear:
(1) 3265/     FB0 : CF                  		rst	8
(1) 3266/     FB1 : 36 00               		ld	(hl),0			; Delete link
(1) 3267/     FB3 : 23                  		inc	hl
(1) 3268/     FB4 : 36 00               		ld	(hl),0
(1) 3269/     FB6 : 23                  		inc	hl
(1) 3270/     FB7 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3271/     FB8 :                     ; 		inc	hl
(1) 3272/     FB8 :                     ; 		ld	(hl),0			; Clear master volume
(1) 3273/     FB8 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 3274/     FBB : 09                  		add	hl,bc
(1) 3275/     FBC : 06 04               		ld	b,8/2
(1) 3276/     FBE :                     .clrfull:
(1) 3277/     FBE : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 3278/     FC0 : 23                  		inc	hl
(1) 3279/     FC1 : 36 00               		ld	(hl),0
(1) 3280/     FC3 : 23                  		inc	hl
(1) 3281/     FC4 : CF                  		rst	8
(1) 3282/     FC5 : 10 F7               		djnz	.clrfull
(1) 3283/     FC7 : C9                  		ret
(1) 3284/     FC8 :                     
(1) 3285/     FC8 :                     ; ============================================================
(1) 3286/     FC8 :                     ; --------------------------------------------------------
(1) 3287/     FC8 :                     ; Communication with the SCD and 32X
(1) 3288/     FC8 :                     ;
(1) 3289/     FC8 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3290/     FC8 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3291/     FC8 :                     ;
(1) 3292/     FC8 :                     ; *Originally meant for waiting VBlank, that's
(1) 3293/     FC8 :                     ; the only one available for sending the table
(1) 3294/     FC8 :                     ; --------------------------------------------------------
(1) 3295/     FC8 :                     
(1) 3296/     FC8 :                     ; NOTE: careful modifing this
(1) 3297/     FC8 :                     
(1) 3298/     FC8 :                     zmars_send:
(1) 3299/     FC8 :                     	; ----------------------------------------
(1) 3300/     FC8 :                     	; Send PCM table
(1) 3384/     FC8 :                     	; ----------------------------------------
(1) 3385/     FC8 :                     	; Send PWM table
(1) 3387/     FC8 : 3A 37 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 3388/     FCB : B7                  		or	a
(1) 3389/     FCC : C2 48 10            		jp	nz,.blocked_m
(1) 3390/     FCF : CF                  		rst	8
(1) 3391/     FD0 : 00                  		nop
(1) 3392/     FD1 : 00                  		nop
(1) 3393/     FD2 : 00                  		nop
(1) 3394/     FD3 : 3A EF 1B            		ld	a,(marsUpd)	; NEW transfer?
(1) 3395/     FD6 : B7                  		or	a
(1) 3396/     FD7 : 28 79               		jr	z,.pwm_exit
(1) 3397/     FD9 : AF                  		xor	a
(1) 3398/     FDA : 32 EF 1B            		ld	(marsUpd),a
(1) 3399/     FDD : E7                  		rst	20h
(1) 3400/     FDE : CD 5A 10            		call	.set_combank
(1) 3401/     FE1 : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg
(1) 3402/     FE5 : DD 21 26 16         		ld	ix,pwmcom
(1) 3403/     FE9 :                     .wait_enter:
(1) 3404/     FE9 : 00                  		nop
(1) 3405/     FEA : 00                  		nop
(1) 3406/     FEB : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 3407/     FEE : CB 7F               		bit	7,a
(1) 3408/     FF0 : 20 F7               		jr	nz,.wait_enter
(1) 3409/     FF2 : E6 F0               		and	11110000b
(1) 3410/     FF4 : F6 01               		or	1		; Set CMD task mode $01
(1) 3411/     FF6 : FD 77 2E            		ld	(iy+comm14),a
(1) 3412/     FF9 : CF                  		rst	8
(1) 3413/     FFA : E6 0F               		and	00001111b	; Did it write?
(1) 3414/     FFC : FE 01               		cp	1
(1) 3415/     FFE : 20 E9               		jr	nz,.wait_enter	; If not, retry
(1) 3416/    1000 : FD CB 2E FE         		set	7,(iy+comm14)	; LOCK bit
(1) 3417/    1004 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 3418/    1008 : 00                  		nop	; ** wave sync AND wait using nops
(1) 3419/    1009 : 00                  		nop
(1) 3420/    100A : 00                  		nop
(1) 3421/    100B : 00                  		nop
(1) 3422/    100C : 00                  		nop
(1) 3423/    100D : CF                  		rst	8
(1) 3424/    100E : 00                  		nop
(1) 3425/    100F : 00                  		nop
(1) 3426/    1010 : 00                  		nop
(1) 3427/    1011 : 00                  		nop
(1) 3428/    1012 : 00                  		nop
(1) 3429/    1013 :                     ; .wait_cmd:
(1) 3430/    1013 :                     ; 		bit	1,(iy+standby)	; <-- unstable on HW
(1) 3431/    1013 :                     ; 		jr	nz,.wait_cmd
(1) 3432/    1013 : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 3433/    1015 :                     .next_packet:
(1) 3434/    1015 : CF                  		rst	8
(1) 3435/    1016 : FD E5               		push	iy
(1) 3436/    1018 : E1                  		pop	hl
(1) 3437/    1019 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 3438/    101C : 19                  		add	hl,de
(1) 3439/    101D : 06 02               		ld	b,2
(1) 3440/    101F : CF                  		rst	8
(1) 3441/    1020 :                     .next_comm:
(1) 3442/    1020 : DD 56 00            		ld	d,(ix)
(1) 3443/    1023 : DD 5E 01            		ld	e,(ix+1)
(1) 3444/    1026 : DD 23               		inc	ix
(1) 3445/    1028 : DD 23               		inc	ix
(1) 3446/    102A : CF                  		rst	8
(1) 3447/    102B : 72                  		ld	(hl),d
(1) 3448/    102C : 23                  		inc	hl
(1) 3449/    102D : 73                  		ld	(hl),e
(1) 3450/    102E : 23                  		inc	hl
(1) 3451/    102F : 10 EF               		djnz	.next_comm
(1) 3452/    1031 : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 3453/    1035 : CF                  		rst	8
(1) 3454/    1036 :                     .w_pass2:
(1) 3455/    1036 : 00                  		nop
(1) 3456/    1037 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 3457/    103B : 20 F9               		jr	nz,.w_pass2
(1) 3458/    103D : 0D                  		dec	c
(1) 3459/    103E : 20 D5               		jr	nz,.next_packet
(1) 3460/    1040 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 3461/    1044 : FD CB 2E B6         		res	6,(iy+comm14)	; Clear PASS
(1) 3462/    1048 :                     ; Reset comm ports
(1) 3463/    1048 :                     .blocked_m:
(1) 3464/    1048 : AF                  		xor	a
(1) 3465/    1049 : 21 26 16            		ld	hl,pwmcom
(1) 3466/    104C : 06 08               		ld	b,8
(1) 3467/    104E :                     .clr_pwm:
(1) 3468/    104E : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 3469/    104F : 23                  		inc	hl
(1) 3470/    1050 : 10 FC               		djnz	.clr_pwm
(1) 3471/    1052 :                     .pwm_exit:
(1) 3479/    1052 :                     
(1) 3481/    1052 : CF                  		rst	8
(1) 3482/    1053 : 06 03               		ld	b,3
(1) 3483/    1055 : 10 FE               		djnz	$
(1) 3484/    1057 : 00                  		nop
(1) 3485/    1058 : 00                  		nop
(1) 3488/    1059 : C9                  		ret
(1) 3489/    105A :                     
(1) 3490/    105A :                     ; --------------------------------------------------------
(1) 3491/    105A :                     ; Set bank to $A10000 area
(1) 3493/    105A :                     .set_combank:
(1) 3494/    105A : 21 00 60            		ld	hl,6000h
(1) 3495/    105D : 36 00               		ld	(hl),0
(1) 3496/    105F : 36 01               		ld	(hl),1
(1) 3497/    1061 : 36 00               		ld	(hl),0
(1) 3498/    1063 : 36 00               		ld	(hl),0
(1) 3499/    1065 : CF                  		rst	8
(1) 3500/    1066 : 36 00               		ld	(hl),0
(1) 3501/    1068 : 36 00               		ld	(hl),0
(1) 3502/    106A : 36 01               		ld	(hl),1
(1) 3503/    106C : 36 00               		ld	(hl),0
(1) 3504/    106E : 36 01               		ld	(hl),1
(1) 3505/    1070 : C9                  		ret
(1) 3507/    1071 :                     
(1) 3508/    1071 :                     ; ====================================================================
(1) 3509/    1071 :                     ; ----------------------------------------------------------------
(1) 3510/    1071 :                     ; Subroutines
(1) 3511/    1071 :                     ; ----------------------------------------------------------------
(1) 3512/    1071 :                     
(1) 3513/    1071 :                     ; --------------------------------------------------------
(1) 3514/    1071 :                     ; Init sound engine
(1) 3515/    1071 :                     ; --------------------------------------------------------
(1) 3516/    1071 :                     
(1) 3517/    1071 :                     gema_init:
(1) 3518/    1071 : CD 5C 14            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3519/    1074 : CD 4D 13            		call	dac_off
(1) 3520/    1077 : AF                  		xor	a
(1) 3521/    1078 :                     ; 		ld	(marsUpd),a
(1) 3522/    1078 :                     ; 		ld	(mcdUpd),a
(1) 3523/    1078 : 32 30 00            		ld	(cdRamLen),a
(1) 3524/    107B : FD 21 63 1F         		ld	iy,nikona_BuffList
(1) 3525/    107F : 0E 01               		ld	c,1			; Start at this priority
(1) 3526/    1081 :                     .setup_list:
(1) 3527/    1081 : FD 7E 00            		ld	a,(iy)
(1) 3528/    1084 : FE FF               		cp	-1
(1) 3529/    1086 : 28 24               		jr	z,.end_setup
(1) 3530/    1088 : FD 23               		inc	iy
(1) 3531/    108A : 6F                  		ld	l,a
(1) 3532/    108B : FD 66 00            		ld	h,(iy)
(1) 3533/    108E : E5                  		push	hl
(1) 3534/    108F : DD E1               		pop	ix
(1) 3535/    1091 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3536/    1094 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3537/    1098 : FD 23               		inc	iy
(1) 3538/    109A :                     	; iy - src
(1) 3539/    109A :                     	; hl - dst
(1) 3540/    109A : 11 04 00            		ld	de,trk_Blocks
(1) 3541/    109D : 19                  		add	hl,de
(1) 3542/    109E : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3543/    10A0 :                     .st_copy:
(1) 3544/    10A0 : FD 7E 00            		ld	a,(iy)
(1) 3545/    10A3 : 77                  		ld	(hl),a
(1) 3546/    10A4 : FD 23               		inc	iy
(1) 3547/    10A6 : 23                  		inc	hl
(1) 3548/    10A7 : 10 F7               		djnz	.st_copy
(1) 3549/    10A9 : 0C                  		inc	c
(1) 3550/    10AA : 18 D5               		jr	.setup_list
(1) 3551/    10AC :                     .end_setup:
(1) 3552/    10AC :                     
(1) 3553/    10AC : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3554/    10AF : CD 22 13            		call	fm_send_1
(1) 3555/    10B2 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3556/    10B5 : CD 22 13            		call	fm_send_1
(1) 3557/    10B8 :                     ; 		ld	de,2800h
(1) 3558/    10B8 : 14                  		inc	d		; FM KEYS off
(1) 3559/    10B9 : CD 22 13            		call	fm_send_1
(1) 3560/    10BC : 1C                  		inc	e
(1) 3561/    10BD : CD 22 13            		call	fm_send_1
(1) 3562/    10C0 : 1C                  		inc	e
(1) 3563/    10C1 : CD 22 13            		call	fm_send_1
(1) 3564/    10C4 : 1C                  		inc	e
(1) 3565/    10C5 : 1C                  		inc	e
(1) 3566/    10C6 : CD 22 13            		call	fm_send_1
(1) 3567/    10C9 : 1C                  		inc	e
(1) 3568/    10CA : CD 22 13            		call	fm_send_1
(1) 3569/    10CD : 1C                  		inc	e
(1) 3570/    10CE : CD 22 13            		call	fm_send_1
(1) 3571/    10D1 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3572/    10D4 : 36 9F               		ld	(hl),09Fh
(1) 3573/    10D6 : 36 BF               		ld	(hl),0BFh
(1) 3574/    10D8 : 36 DF               		ld	(hl),0DFh
(1) 3575/    10DA : 36 FF               		ld	(hl),0FFh
(1) 3576/    10DC : C9                  		ret
(1) 3577/    10DD :                     
(1) 3578/    10DD :                     ; --------------------------------------------------------
(1) 3579/    10DD :                     ; get_tick
(1) 3580/    10DD :                     ;
(1) 3581/    10DD :                     ; Checks if VBlank triggred a TICK
(1) 3582/    10DD :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3583/    10DD :                     ; --------------------------------------------------------
(1) 3584/    10DD :                     
(1) 3585/    10DD :                     get_tick:
(1) 3586/    10DD : F3                  		di				; Disable ints
(1) 3587/    10DE : F5                  		push	af
(1) 3588/    10DF : E5                  		push	hl
(1) 3589/    10E0 : 21 FE 1B            		ld	hl,tickFlag		; read last TICK flag
(1) 3590/    10E3 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3591/    10E4 : B7                  		or 	a
(1) 3592/    10E5 : 28 13               		jr	z,.ctnotick
(1) 3593/    10E7 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3594/    10E9 : 23                  		inc	hl			; Move to tickCnt
(1) 3595/    10EA : 34                  		inc	(hl)			; and increment
(1) 3596/    10EB : CF                  		rst	8
(1) 3597/    10EC : D5                  		push	de
(1) 3598/    10ED : 2A F9 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3599/    10F0 : ED 5B FB 1C         		ld	de,(sbeatPtck)
(1) 3600/    10F4 : CF                  		rst	8
(1) 3601/    10F5 : 19                  		add	hl,de
(1) 3602/    10F6 : 22 F9 1C            		ld	(sbeatAcc),hl
(1) 3603/    10F9 : D1                  		pop	de
(1) 3604/    10FA :                     .ctnotick:
(1) 3605/    10FA : E1                  		pop	hl
(1) 3606/    10FB : F1                  		pop	af
(1) 3607/    10FC : FB                  		ei				; Enable ints again
(1) 3608/    10FD : C9                  		ret
(1) 3609/    10FE :                     
(1) 3610/    10FE :                     ; --------------------------------------------------------
(1) 3611/    10FE :                     ; transferRom
(1) 3612/    10FE :                     ;
(1) 3613/    10FE :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3614/    10FE :                     ; This also tells to 68k that we want to access ROM
(1) 3615/    10FE :                     ;
(1) 3616/    10FE :                     ; Input:
(1) 3617/    10FE :                     ; a  | 68K Address $xx0000
(1) 3618/    10FE :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3619/    10FE :                     ; hl | 68K Address $00xxxx
(1) 3620/    10FE :                     ; de | Destination pointer
(1) 3621/    10FE :                     ;
(1) 3622/    10FE :                     ; Uses:
(1) 3623/    10FE :                     ; b
(1) 3624/    10FE :                     ;
(1) 3625/    10FE :                     ; Notes:
(1) 3626/    10FE :                     ; call RST 20h first, so the currenty playing DAC
(1) 3627/    10FE :                     ; sample has enough data before getting busy here.
(1) 3628/    10FE :                     ; --------------------------------------------------------
(1) 3629/    10FE :                     
(1) 3630/    10FE :                     transferRom:
(1) 3631/    10FE : DD E5               		push	ix
(1) 3632/    1100 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3633/    1104 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3634/    1106 : 28 3D               		jr	z,.from_ram
(1) 3635/    1108 : CF                  		rst	8
(1) 3636/    1109 : 22 F7 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3637/    110C : CB BC               		res	7,h
(1) 3638/    110E : 06 00               		ld	b,0
(1) 3639/    1110 : 0B                  		dec	bc
(1) 3640/    1111 : 09                  		add	hl,bc
(1) 3641/    1112 : CB 7C               		bit	7,h
(1) 3642/    1114 : 20 0B               		jr	nz,.double
(1) 3643/    1116 : 2A F7 1C            		ld	hl,(x68ksrclsb)
(1) 3644/    1119 : 0C                  		inc	c
(1) 3645/    111A : 47                  		ld	b,a
(1) 3646/    111B : CD 65 11            		call	.transfer
(1) 3647/    111E : DD E1               		pop	ix
(1) 3648/    1120 : C9                  		ret
(1) 3649/    1121 :                     .double:
(1) 3650/    1121 : CF                  		rst	8
(1) 3651/    1122 : 47                  		ld	b,a
(1) 3652/    1123 : C5                  		push	bc
(1) 3653/    1124 : E5                  		push	hl
(1) 3654/    1125 : 79                  		ld	a,c
(1) 3655/    1126 : 95                  		sub	a,l
(1) 3656/    1127 : 4F                  		ld	c,a
(1) 3657/    1128 : 2A F7 1C            		ld	hl,(x68ksrclsb)
(1) 3658/    112B : CD 65 11            		call	.transfer
(1) 3659/    112E : E1                  		pop	hl
(1) 3660/    112F : C1                  		pop	bc
(1) 3661/    1130 :                     ; 		rst	8
(1) 3662/    1130 : 4D                  		ld	c,l
(1) 3663/    1131 : 0C                  		inc	c
(1) 3664/    1132 : 3A F8 1C            		ld	a,(x68ksrcmid)
(1) 3665/    1135 : E6 80               		and	80h
(1) 3666/    1137 : C6 80               		add	a,80h
(1) 3667/    1139 : 67                  		ld	h,a
(1) 3668/    113A : 2E 00               		ld	l,0
(1) 3669/    113C : 30 01               		jr	nc,.x68knocarry
(1) 3670/    113E : 04                  		inc	b
(1) 3671/    113F :                     .x68knocarry:
(1) 3672/    113F : CD 65 11            		call	.transfer
(1) 3673/    1142 : DD E1               		pop	ix
(1) 3674/    1144 : C9                  		ret
(1) 3675/    1145 :                     
(1) 3676/    1145 :                     ; ------------------------------------------------
(1) 3677/    1145 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3678/    1145 :                     ;
(1) 3679/    1145 :                     ; On the 68K side YOU MUST CALL
(1) 3680/    1145 :                     ; Sound_Update manually when you have
(1) 3681/    1145 :                     ; the oportunity to do so.
(1) 3682/    1145 :                     ; ------------------------------------------------
(1) 3683/    1145 :                     
(1) 3684/    1145 :                     .from_ram:
(1) 3685/    1145 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3686/    1149 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3687/    114C : 32 35 00            		ld	(cdRamSrcB),a
(1) 3688/    114F : CD 5C 14            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3689/    1152 : CF                  		rst	8
(1) 3690/    1153 : 79                  		ld	a,c
(1) 3691/    1154 : 32 30 00            		ld	(cdRamLen),a
(1) 3692/    1157 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** 68K LABEL **
(1) 3693/    115A : 36 01               		ld	(hl),1				; WRITE flag
(1) 3694/    115C :                     .wait:
(1) 3695/    115C :                     	; Get stuck here until 68K finishes
(1) 3696/    115C : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3697/    115F : B7                  		or	a
(1) 3698/    1160 : 20 FA               		jr	nz,.wait
(1) 3699/    1162 : DD E1               		pop	ix
(1) 3700/    1164 : C9                  		ret
(1) 3701/    1165 :                     
(1) 3702/    1165 :                     ; ------------------------------------------------
(1) 3703/    1165 :                     ; b  - Source ROM bank
(1) 3704/    1165 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3705/    1165 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3706/    1165 :                     ; de - Destination address
(1) 3707/    1165 :                     ; ix - ROM-block flag
(1) 3708/    1165 :                     ; ------------------------------------------------
(1) 3709/    1165 :                     
(1) 3710/    1165 :                     .transfer:
(1) 3711/    1165 : CF                  		rst	8
(1) 3712/    1166 : D5                  		push	de
(1) 3713/    1167 : 11 00 60            		ld	de,6000h
(1) 3714/    116A : 7C                  		ld	a,h
(1) 3715/    116B : 07                  		rlca
(1) 3716/    116C : 12                  		ld	(de),a
(1) 3717/    116D : 78                  		ld	a,b
(1) 3718/    116E : CF                  		rst	8
(1) 3719/    116F : 12                  		ld	(de),a
(1) 3720/    1170 : 0F                  		rrca
(1) 3721/    1171 : 12                  		ld	(de),a
(1) 3722/    1172 : 0F                  		rrca
(1) 3723/    1173 : 12                  		ld	(de),a
(1) 3724/    1174 : 0F                  		rrca
(1) 3725/    1175 : 12                  		ld	(de),a
(1) 3726/    1176 : 0F                  		rrca
(1) 3727/    1177 : CF                  		rst	8
(1) 3728/    1178 : 12                  		ld	(de),a
(1) 3729/    1179 : 0F                  		rrca
(1) 3730/    117A : 12                  		ld	(de),a
(1) 3731/    117B : 0F                  		rrca
(1) 3732/    117C : 12                  		ld	(de),a
(1) 3733/    117D : 0F                  		rrca
(1) 3734/    117E : 12                  		ld	(de),a
(1) 3735/    117F : D1                  		pop	de
(1) 3736/    1180 : CB FC               		set	7,h
(1) 3737/    1182 : CF                  		rst	8
(1) 3738/    1183 :                     
(1) 3739/    1183 :                     	; Transfer ROM data in packets
(1) 3740/    1183 :                     	; while playing the cache'd sample
(1) 3741/    1183 :                     	; *** CRITICAL PROCESS ***
(1) 3742/    1183 :                     	;
(1) 3743/    1183 :                     	; pseudo-ref for ldir:
(1) 3744/    1183 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3745/    1183 :                     	; inc de	; next de
(1) 3746/    1183 :                     	; inc hl	; next hl
(1) 3747/    1183 :                     	; dec bc	; decrement bc
(1) 3748/    1183 : 06 00               		ld	b,0
(1) 3749/    1185 : 79                  		ld	a,c		; a - Size counter
(1) 3750/    1186 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3751/    1188 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3752/    118A :                     .x68kloop:
(1) 3753/    118A : CF                  		rst	8
(1) 3754/    118B : 00                  		nop
(1) 3755/    118C : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3756/    118E : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3757/    1192 : C4 AC 11            		call	nz,.x68klpwt
(1) 3758/    1195 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3759/    1197 : CF                  		rst	8
(1) 3760/    1198 : 00                  		nop
(1) 3761/    1199 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3762/    119B : D2 8A 11            		jp	nc,.x68kloop
(1) 3763/    119E :                     ; last block
(1) 3764/    119E :                     .x68klast:
(1) 3765/    119E : C6 08               		add	a,MAX_TRFRPZ
(1) 3766/    11A0 : 4F                  		ld	c,a
(1) 3767/    11A1 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3768/    11A5 : C4 AC 11            		call	nz,.x68klpwt
(1) 3769/    11A8 : ED B0               		ldir
(1) 3770/    11AA : CF                  		rst	8
(1) 3771/    11AB : C9                  		ret
(1) 3772/    11AC :                     ; Wait here until Genesis unlocks ROM
(1) 3773/    11AC :                     .x68klpwt:
(1) 3774/    11AC : 00                  		nop	; WAVE SYNC
(1) 3775/    11AD : 00                  		nop
(1) 3776/    11AE :                     .x68kpwtlp:
(1) 3777/    11AE : CF                  		rst	8
(1) 3778/    11AF : 00                  		nop	; WAVE SYNC
(1) 3779/    11B0 : 00                  		nop
(1) 3780/    11B1 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3781/    11B5 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3782/    11B7 : C9                  		ret
(1) 3783/    11B8 :                     
(1) 3784/    11B8 :                     ; ====================================================================
(1) 3785/    11B8 :                     ; ----------------------------------------------------------------
(1) 3786/    11B8 :                     ; Sound chip routines
(1) 3787/    11B8 :                     ; ----------------------------------------------------------------
(1) 3788/    11B8 :                     
(1) 3789/    11B8 :                     ; --------------------------------------------------------
(1) 3790/    11B8 :                     ; chip_env
(1) 3791/    11B8 :                     ;
(1) 3792/    11B8 :                     ; Process the PSG
(1) 3793/    11B8 :                     ; --------------------------------------------------------
(1) 3794/    11B8 :                     
(1) 3795/    11B8 :                     chip_env:
(1) 3797/    11B8 : CD 5C 14            		call	gema_lastbank		; Keep bank out of ROM before writing PSG
(1) 3799/    11BB : FD 21 61 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3800/    11BF : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3801/    11C3 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3802/    11C5 : 06 04               		ld	b,4			; b - 4 channels
(1) 3803/    11C7 :                     .vloop:
(1) 3804/    11C7 : CF                  		rst	8
(1) 3805/    11C8 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3806/    11CB : FD 36 00 00         		ld	(iy+COM),0
(1) 3807/    11CF :                     
(1) 3808/    11CF :                     	; ----------------------------
(1) 3809/    11CF :                     	; bit 2 - stop sound
(1) 3810/    11CF : CB 53               		bit	2,e
(1) 3811/    11D1 : 28 0C               		jr	z,.ckof
(1) 3812/    11D3 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3813/    11D7 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3814/    11DB : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3815/    11DF :                     .ckof:
(1) 3816/    11DF :                     	; ----------------------------
(1) 3817/    11DF :                     	; bit 1 - key off
(1) 3818/    11DF : CB 4B               		bit	1,e
(1) 3819/    11E1 : 28 0F               		jr      z,.ckon
(1) 3820/    11E3 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3821/    11E6 : B7                  		or	a
(1) 3822/    11E7 : 28 09               		jr	z,.ckon
(1) 3823/    11E9 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3824/    11ED : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3825/    11F1 : CF                  		rst	8
(1) 3826/    11F2 :                     .ckon:
(1) 3827/    11F2 :                     	; ----------------------------
(1) 3828/    11F2 :                     	; bit 0 - key on
(1) 3829/    11F2 : CB 43               		bit	0,e
(1) 3830/    11F4 : 28 1A               		jr	z,.envproc
(1) 3831/    11F6 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3832/    11FA : 78                  		ld	a,b
(1) 3833/    11FB : FE 04               		cp	4			; NOISE channel?
(1) 3834/    11FD : 20 08               		jr	nz,.nskip
(1) 3835/    11FF : CF                  		rst	8			; Set NOISE mode
(1) 3836/    1200 : 3A F4 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3837/    1203 : B1                  		or	c
(1) 3838/    1204 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3839/    1207 :                     .nskip:
(1) 3840/    1207 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3841/    120B : CF                  		rst	8
(1) 3842/    120C : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3843/    1210 :                     .nblock:
(1) 3844/    1210 :                     
(1) 3845/    1210 :                     	; ----------------------------
(1) 3846/    1210 :                     	; Process effects
(1) 3847/    1210 :                     	; ----------------------------
(1) 3848/    1210 :                     .envproc:
(1) 3849/    1210 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3850/    1213 : B7                  		or	a			; no modes
(1) 3851/    1214 : CA 9A 12            		jp	z,.vedlp
(1) 3852/    1217 : FE 01               		cp 	001b			; Attack mode
(1) 3853/    1219 : 20 2C               		jr	nz,.chk2
(1) 3854/    121B : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3855/    121F : FD 5E 24            		ld	e,(iy+ALV)
(1) 3856/    1222 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3857/    1225 : B7                  		or	a
(1) 3858/    1226 : 28 16               		jr	z,.atkend
(1) 3859/    1228 : 57                  		ld	d,a			; c - attack rate
(1) 3860/    1229 : 7B                  		ld	a,e			; a - attack level
(1) 3861/    122A : CF                  		rst	8
(1) 3862/    122B : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3863/    122E : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3864/    122F : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3865/    1231 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3866/    1233 : BB                  		cp	e			; attack rate == level?
(1) 3867/    1234 : 38 08               		jr	c,.atkend
(1) 3868/    1236 : 28 06               		jr	z,.atkend
(1) 3869/    1238 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3870/    123B : CF                  		rst	8
(1) 3871/    123C : 18 5C               		jr	.vedlp
(1) 3872/    123E :                     .atkend:
(1) 3873/    123E : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3874/    1241 :                     .atkzero:
(1) 3875/    1241 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3876/    1245 : 18 53               		jr	.vedlp
(1) 3877/    1247 :                     .chk2:
(1) 3878/    1247 :                     
(1) 3879/    1247 : FE 02               		cp	010b			; Decay mode
(1) 3880/    1249 : 20 31               		jr	nz,.chk4
(1) 3881/    124B :                     .dectmr:
(1) 3882/    124B : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3883/    124F : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3884/    1252 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3885/    1255 : BB                  		cp	e
(1) 3886/    1256 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3887/    1258 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3888/    125A : CF                  		rst	8
(1) 3889/    125B : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3890/    125E : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3891/    1260 : BB                  		cp	e			; compare level
(1) 3892/    1261 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3893/    1263 : 18 08               		jr	.dksav
(1) 3894/    1265 :                     .dkadd:
(1) 3895/    1265 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3896/    1268 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3897/    126A : BB                  		cp	e			; compare level
(1) 3898/    126B : 30 05               		jr	nc,.dkyend
(1) 3899/    126D :                     .dksav:
(1) 3900/    126D : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3901/    1270 : 18 28               		jr	.vedlp
(1) 3902/    1272 :                     .dkyend:
(1) 3903/    1272 : CF                  		rst	8
(1) 3904/    1273 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3905/    1276 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3906/    127A : 18 1E               		jr	.vedlp
(1) 3907/    127C :                     .chk4:
(1) 3908/    127C : FE 04               		cp	100b			; Sustain phase
(1) 3909/    127E : 20 1A               		jr	nz,.vedlp
(1) 3910/    1280 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3911/    1284 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3912/    1287 : CF                  		rst	8
(1) 3913/    1288 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3914/    128B : 38 05               		jr	c,.killenv		; release done
(1) 3915/    128D : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3916/    1290 : 18 08               		jr	.vedlp
(1) 3917/    1292 :                     .killenv:
(1) 3918/    1292 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3919/    1296 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3920/    129A :                     .vedlp:
(1) 3921/    129A :                     	; ----------------------------
(1) 3922/    129A :                     	; PSG UPDATE
(1) 3923/    129A :                     	; ----------------------------
(1) 3924/    129A : FD 7E 28            		ld	a,(iy+FLG)
(1) 3925/    129D : B7                  		or	a
(1) 3926/    129E : 28 72               		jr	z,.noupd
(1) 3927/    12A0 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3928/    12A4 : 59                  		ld	e,c
(1) 3929/    12A5 : 3A F4 1C            		ld	a,(psgHatMode)
(1) 3930/    12A8 : 57                  		ld	d,a
(1) 3931/    12A9 : E6 03               		and	011b
(1) 3932/    12AB : FE 03               		cp	011b
(1) 3933/    12AD : 20 1D               		jr	nz,.normal
(1) 3934/    12AF : CF                  		rst	8
(1) 3935/    12B0 : 78                  		ld	a,b		; Channel 4?
(1) 3936/    12B1 : FE 03               		cp	3
(1) 3937/    12B3 : 28 13               		jr	z,.silnc_3
(1) 3938/    12B5 : FE 04               		cp	4
(1) 3939/    12B7 : 20 18               		jr	nz,.do_nfreq
(1) 3940/    12B9 : 3A F4 1C            		ld	a,(psgHatMode)
(1) 3941/    12BC : 57                  		ld	d,a
(1) 3942/    12BD : E6 03               		and	011b
(1) 3943/    12BF : CF                  		rst	8
(1) 3944/    12C0 : FE 03               		cp	011b
(1) 3945/    12C2 : 20 30               		jr	nz,.vonly
(1) 3946/    12C4 : 1E C0               		ld	e,0C0h
(1) 3947/    12C6 : 18 09               		jr	.do_nfreq
(1) 3948/    12C8 :                     .silnc_3:
(1) 3949/    12C8 : 3E FF               		ld	a,-1
(1) 3950/    12CA : 18 32               		jr	.vlmuch
(1) 3951/    12CC :                     .normal:
(1) 3952/    12CC : 78                  		ld	a,b
(1) 3953/    12CD : FE 04               		cp	4
(1) 3954/    12CF : 28 23               		jr	z,.vonly
(1) 3955/    12D1 :                     .do_nfreq:
(1) 3956/    12D1 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3957/    12D4 : FD 66 20            		ld	h,(iy+DTH)
(1) 3958/    12D7 :                     	; freq effects go here
(1) 3959/    12D7 :                     	; (save e FIRST.)
(1) 3960/    12D7 :                     	;	push	de
(1) 3961/    12D7 :                     	;	pop	de
(1) 3962/    12D7 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3963/    12D8 : E6 0F               		and	00001111b
(1) 3964/    12DA : B3                  		or	e		; OR with channel set in e
(1) 3965/    12DB : CF                  		rst	8
(1) 3966/    12DC : DD 77 00            		ld	(ix),a		; write it
(1) 3967/    12DF : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3968/    12E0 : 0F                  		rrca
(1) 3969/    12E1 : 0F                  		rrca
(1) 3970/    12E2 : 0F                  		rrca
(1) 3971/    12E3 : 0F                  		rrca
(1) 3972/    12E4 : E6 0F               		and	00001111b
(1) 3973/    12E6 : 5F                  		ld	e,a
(1) 3974/    12E7 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3975/    12E8 : CF                  		rst	8
(1) 3976/    12E9 : 07                  		rlca
(1) 3977/    12EA : 07                  		rlca
(1) 3978/    12EB : 07                  		rlca
(1) 3979/    12EC : 07                  		rlca
(1) 3980/    12ED : E6 30               		and	00110000b
(1) 3981/    12EF : B3                  		or	e
(1) 3982/    12F0 : DD 77 00            		ld	(ix),a
(1) 3983/    12F3 : CF                  		rst	8
(1) 3984/    12F4 :                     .vonly:
(1) 3985/    12F4 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3986/    12F7 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3987/    12FA : 30 02               		jr	nc,.vlmuch
(1) 3988/    12FC : 3E FF               		ld	a,-1
(1) 3989/    12FE :                     .vlmuch:
(1) 3990/    12FE : CB 3F               		srl	a			; (Level >> 4)
(1) 3991/    1300 : CB 3F               		srl	a
(1) 3992/    1302 : CB 3F               		srl	a
(1) 3993/    1304 : CF                  		rst	8
(1) 3994/    1305 : CB 3F               		srl	a
(1) 3995/    1307 : E6 0F               		and	00001111b		; Filter volume value
(1) 3996/    1309 : B1                  		or	c			; and OR with current channel
(1) 3997/    130A : F6 90               		or	90h			; Set volume-set mode
(1) 3999/    130C : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 4001/    130F : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 4002/    1312 :                     .noupd:
(1) 4003/    1312 :                     	; ----------------------------
(1) 4004/    1312 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 4005/    1314 : 79                  		ld	a,c
(1) 4006/    1315 : CF                  		rst	8
(1) 4007/    1316 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 4008/    1318 : 4F                  		ld	c,a
(1) 4009/    1319 : 05                  		dec	b
(1) 4010/    131A : C2 C7 11            		jp	nz,.vloop
(1) 4011/    131D : C9                  		ret
(1) 4012/    131E :                     
(1) 4013/    131E :                     ; ---------------------------------------------
(1) 4014/    131E :                     ; FM register writes
(1) 4015/    131E :                     ;
(1) 4016/    131E :                     ; Input:
(1) 4017/    131E :                     ; d - ctrl
(1) 4018/    131E :                     ; e - data
(1) 4019/    131E :                     ; ---------------------------------------------
(1) 4020/    131E :                     
(1) 4021/    131E :                     ; c - KeyID
(1) 4022/    131E :                     fm_autoreg:
(1) 4023/    131E : CB 51               		bit	2,c
(1) 4024/    1320 : 20 0B               		jr	nz,fm_send_2
(1) 4025/    1322 :                     
(1) 4026/    1322 :                     ; Channels 1-3 and global registers
(1) 4027/    1322 :                     fm_send_1:
(1) 4028/    1322 : 7A                  		ld	a,d
(1) 4029/    1323 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4030/    1326 : 00                  		nop
(1) 4031/    1327 : 7B                  		ld	a,e
(1) 4032/    1328 : 32 01 40            		ld	(Zym_data_1),a
(1) 4033/    132B : 00                  		nop
(1) 4034/    132C : C9                  		ret
(1) 4035/    132D :                     ; Channels 4-6
(1) 4036/    132D :                     fm_send_2:
(1) 4037/    132D : 7A                  		ld	a,d
(1) 4038/    132E : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4039/    1331 : 00                  		nop
(1) 4040/    1332 : 7B                  		ld	a,e
(1) 4041/    1333 : 32 03 40            		ld	(Zym_data_2),a
(1) 4042/    1336 : 00                  		nop
(1) 4043/    1337 : C9                  		ret
(1) 4044/    1338 :                     
(1) 4045/    1338 :                     ; --------------------------------------------------------
(1) 4046/    1338 :                     ; brute-force WAVE ON/OFF playback
(1) 4047/    1338 :                     ; --------------------------------------------------------
(1) 4048/    1338 :                     
(1) 4049/    1338 :                     dac_on:
(1) 4050/    1338 : 3E 2B               		ld	a,2Bh
(1) 4051/    133A : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4052/    133D : 3E 80               		ld	a,80h
(1) 4053/    133F : 32 01 40            		ld	(Zym_data_1),a
(1) 4054/    1342 : 3E D9               		ld 	a,zopcExx
(1) 4055/    1344 : 32 08 00            		ld	(dac_me),a
(1) 4056/    1347 : 3E F5               		ld 	a,zopcPushAf
(1) 4057/    1349 : 32 20 00            		ld	(dac_fill),a
(1) 4058/    134C : C9                  		ret
(1) 4059/    134D :                     dac_off:
(1) 4060/    134D : 3E 2B               		ld	a,2Bh
(1) 4061/    134F : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4062/    1352 : 3E 00               		ld	a,00h
(1) 4063/    1354 : 32 01 40            		ld	(Zym_data_1),a
(1) 4064/    1357 : 3E C9               		ld 	a,zopcRet
(1) 4065/    1359 : 32 08 00            		ld	(dac_me),a
(1) 4066/    135C : 3E C9               		ld 	a,zopcRet
(1) 4067/    135E : 32 20 00            		ld	(dac_fill),a
(1) 4068/    1361 : C9                  		ret
(1) 4069/    1362 :                     
(1) 4070/    1362 :                     ; --------------------------------------------------------
(1) 4071/    1362 :                     ; dac_play
(1) 4072/    1362 :                     ;
(1) 4073/    1362 :                     ; Plays a new sample
(1) 4074/    1362 :                     ;
(1) 4075/    1362 :                     ; NOTE:
(1) 4076/    1362 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4077/    1362 :                     ; getting here.
(1) 4078/    1362 :                     ; --------------------------------------------------------
(1) 4079/    1362 :                     
(1) 4080/    1362 :                     dac_play:
(1) 4081/    1362 : F3                  		di
(1) 4082/    1363 : CD 4D 13            		call	dac_off
(1) 4083/    1366 : D9                  		exx				; flip exx regs
(1) 4084/    1367 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4085/    136A : ED 5B FA 1B         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4086/    136E : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4087/    1371 : D9                  		exx				; move them back
(1) 4088/    1372 : 2A F1 1B            		ld	hl,(wave_Start)		; copy Start and length
(1) 4089/    1375 : 3A F3 1B            		ld 	a,(wave_Start+2)
(1) 4090/    1378 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4091/    137B : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4092/    137E : 2A F4 1B            		ld	hl,(wave_Len)
(1) 4093/    1381 : 3A F6 1B            		ld 	a,(wave_Len+2)
(1) 4094/    1384 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4095/    1387 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4096/    138A : AF                  		xor	a
(1) 4097/    138B : 32 E8 1B            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4098/    138E : CD 96 13            		call	dac_refill
(1) 4099/    1391 : CD 38 13            		call	dac_on
(1) 4100/    1394 : FB                  		ei
(1) 4101/    1395 : C9                  		ret
(1) 4102/    1396 :                     
(1) 4103/    1396 :                     ; --------------------------------------------------------
(1) 4104/    1396 :                     
(1) 4105/    1396 :                     dac_refill:
(1) 4106/    1396 : CF                  		rst	8
(1) 4107/    1397 : C5                  		push	bc
(1) 4108/    1398 : D5                  		push	de
(1) 4109/    1399 : E5                  		push	hl
(1) 4110/    139A : 3A FC 1B            		ld	a,(wave_Flags)	; Already finished?
(1) 4111/    139D : FE 07               		cp	111b
(1) 4112/    139F : D2 55 14            		jp	nc,.dacfill_end
(1) 4113/    13A2 : 3A EE 1B            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4114/    13A5 : 2A EC 1B            		ld	hl,(dDacCntr)
(1) 4115/    13A8 : 01 80 00            		ld	bc,80h
(1) 4116/    13AB : 37                  		scf
(1) 4117/    13AC : 3F                  		ccf
(1) 4118/    13AD : ED 42               		sbc	hl,bc
(1) 4119/    13AF : DE 00               		sbc	a,0
(1) 4120/    13B1 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4121/    13B4 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4122/    13B7 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4123/    13B9 : B7                  		or	a
(1) 4124/    13BA : FA E4 13            		jp	m,.dac_over
(1) 4125/    13BD : 3A E8 1B            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4126/    13C0 : 5F                  		ld	e,a
(1) 4127/    13C1 : C6 80               		add 	a,80h
(1) 4128/    13C3 : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4129/    13C6 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4130/    13C9 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4131/    13CC : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4132/    13CF : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4133/    13D2 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4134/    13D5 : 01 80 00            		ld	bc,80h
(1) 4135/    13D8 : 09                  		add	hl,bc
(1) 4136/    13D9 : CE 00               		adc	a,0
(1) 4137/    13DB : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4138/    13DE : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4139/    13E1 : C3 58 14            		jp	.dacfill_ret
(1) 4140/    13E4 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4141/    13E4 :                     ; but the USER won't notice it.
(1) 4142/    13E4 :                     .dac_over:
(1) 4143/    13E4 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4144/    13E6 : 3A FC 1B            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4145/    13E9 : E6 01               		and	001b
(1) 4146/    13EB : C2 0E 14            		jp	nz,.dacfill_loop
(1) 4147/    13EE : 7D                  		ld	a,l
(1) 4148/    13EF : C6 80               		add	a,80h
(1) 4149/    13F1 : 4F                  		ld	c,a
(1) 4150/    13F2 : 06 00               		ld	b,0
(1) 4151/    13F4 : C5                  		push	bc
(1) 4152/    13F5 : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4153/    13F8 : 5F                  		ld	e,a
(1) 4154/    13F9 : C6 80               		add	a,80h
(1) 4155/    13FB : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4156/    13FE : C1                  		pop	bc
(1) 4157/    13FF : 79                  		ld	a,c
(1) 4158/    1400 : B0                  		or	b
(1) 4159/    1401 : 28 52               		jr	z,.dacfill_end
(1) 4160/    1403 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4161/    1406 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4162/    1409 : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4163/    140C : 18 47               		jr	.dacfill_end
(1) 4164/    140E :                     ; loop sample
(1) 4165/    140E :                     .dacfill_loop:
(1) 4166/    140E : C5                  		push	bc
(1) 4167/    140F : D5                  		push	de
(1) 4168/    1410 : 3A F9 1B            		ld	a,(wave_Loop+2)
(1) 4169/    1413 : 4F                  		ld	c,a
(1) 4170/    1414 : ED 5B F7 1B         		ld	de,(wave_Loop)
(1) 4171/    1418 : 2A F1 1B            		ld	hl,(wave_Start)
(1) 4172/    141B : 3A F3 1B            		ld 	a,(wave_Start+2)
(1) 4173/    141E : 81                  		add	a,c
(1) 4174/    141F : 19                  		add	hl,de
(1) 4175/    1420 : CE 00               		adc	a,0
(1) 4176/    1422 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4177/    1425 : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4178/    1428 : 2A F4 1B            		ld	hl,(wave_Len)
(1) 4179/    142B : 3A F6 1B            		ld 	a,(wave_Len+2)
(1) 4180/    142E : 91                  		sub	a,c
(1) 4181/    142F : 37                  		scf
(1) 4182/    1430 : 3F                  		ccf
(1) 4183/    1431 : ED 52               		sbc	hl,de
(1) 4184/    1433 : DE 00               		sbc	a,0
(1) 4185/    1435 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4186/    1438 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4187/    143B : D1                  		pop	de
(1) 4188/    143C : C1                  		pop	bc
(1) 4189/    143D : 78                  		ld	a,b
(1) 4190/    143E : B1                  		or	c
(1) 4191/    143F : 28 17               		jr	z,.dacfill_ret
(1) 4192/    1441 : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4193/    1444 : 5F                  		ld	e,a
(1) 4194/    1445 : C6 80               		add	a,80h
(1) 4195/    1447 : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4196/    144A : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4197/    144D : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4198/    1450 : CD FE 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4199/    1453 : 18 03               		jr	.dacfill_ret
(1) 4200/    1455 :                     .dacfill_end:
(1) 4201/    1455 : CD 4D 13            		call	dac_off		; DAC finished
(1) 4202/    1458 :                     .dacfill_ret:
(1) 4203/    1458 : E1                  		pop	hl
(1) 4204/    1459 : D1                  		pop	de
(1) 4205/    145A : C1                  		pop	bc
(1) 4206/    145B : C9                  		ret
(1) 4207/    145C :                     
(1) 4208/    145C :                     ; ----------------------------------------------------------------
(1) 4209/    145C :                     ; gema_lastbank
(1) 4210/    145C :                     ;
(1) 4211/    145C :                     ; Two purposes:
(1) 4212/    145C :                     ; - Set the BANK to the very last part of memory for the
(1) 4213/    145C :                     ;   transferRom to read from RAM
(1) 4214/    145C :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4215/    145C :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4216/    145C :                     ;
(1) 4217/    145C :                     ; Uses:
(1) 4218/    145C :                     ; hl,b
(1) 4219/    145C :                     ; ----------------------------------------------------------------
(1) 4220/    145C :                     
(1) 4221/    145C :                     gema_lastbank:
(1) 4222/    145C : 21 00 60            		ld	hl,6000h
(1) 4223/    145F : 06 09               		ld	b,9		; 9 bits
(1) 4224/    1461 :                     .write:
(1) 4225/    1461 : 36 01               		ld	(hl),1
(1) 4226/    1463 : 10 FC               		djnz	.write
(1) 4227/    1465 : C9                  		ret
(1) 4228/    1466 :                     
(1) 4229/    1466 :                     ; ====================================================================
(1) 4230/    1466 :                     ; ----------------------------------------------------------------
(1) 4231/    1466 :                     ; Frequency tables
(1) 4232/    1466 :                     ; ----------------------------------------------------------------
(1) 4233/    1466 :                     
(1) 4234/    1466 : 84 02               fmFreq_List:	dw 644
(1) 4235/    1468 : A9 02               		dw 681
(1) 4236/    146A : D2 02               		dw 722
(1) 4237/    146C : FD 02               		dw 765
(1) 4238/    146E : 2A 03               		dw 810
(1) 4239/    1470 : 5A 03               		dw 858
(1) 4240/    1472 : 8E 03               		dw 910
(1) 4241/    1474 : C4 03               		dw 964
(1) 4242/    1476 : FD 03               		dw 1021
(1) 4243/    1478 : 39 04               		dw 1081
(1) 4244/    147A : 7A 04               		dw 1146
(1) 4245/    147C : BE 04               		dw 1214
(1) 4246/    147E :                     
(1) 4247/    147E :                     ; ----------------------------------------
(1) 4248/    147E :                     ; DAC and PWM
(1) 4249/    147E :                     ; ----------------------------------------
(1) 4250/    147E :                     
(1) 4251/    147E :                     psgFreq_List:
(1) 4252/    147E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4253/    147E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4254/    147E :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4255/    147E : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1484 : FF FF FF FF FF FF 
             148A : FF FF FF FF FF FF 
             1490 : F8 03 BF 03 89 03 
(1) 4256/    1496 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             149C : CE 02 A5 02 80 02 
             14A2 : 5C 02 3A 02 1A 02 
             14A8 : FB 01 DF 01 C4 01 
(1) 4257/    14AE : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             14B4 : 67 01 53 01 40 01 
             14BA : 2E 01 1D 01 0D 01 
             14C0 : FE 00 EF 00 E2 00 
(1) 4258/    14C6 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             14CC : B4 00 A9 00 A0 00 
             14D2 : 97 00 8F 00 87 00 
             14D8 : 7F 00 78 00 71 00 
(1) 4259/    14DE : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             14E4 : 5A 00 55 00 50 00 
             14EA : 4B 00 47 00 43 00 
             14F0 : 40 00 3C 00 39 00 
(1) 4260/    14F6 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             14FC : 2D 00 2B 00 28 00 
             1502 : 26 00 24 00 22 00 
             1508 : 20 00 1F 00 1D 00 
(1) 4261/    150E : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             1514 : 17 00 16 00 15 00 
             151A : 13 00 12 00 11 00 
             1520 : 10 00 09 00 01 00 
(1) 4262/    1526 :                     
(1) 4263/    1526 :                     
(1) 4264/    1526 :                     ; ----------------------------------------
(1) 4265/    1526 :                     ; DAC and PWM shared list
(1) 4266/    1526 :                     ; ----------------------------------------
(1) 4267/    1526 :                     
(1) 4268/    1526 :                     wavFreq_List:
(1) 4269/    1526 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4270/    1526 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4271/    1526 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4272/    1526 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4273/    1526 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0052h,0056h,005Ah,0060h,0066h,006Ch,0071h,0079h	; x-3 4000 ok
             152C : 4C 00 52 00 56 00 
             1532 : 5A 00 60 00 66 00 
             1538 : 6C 00 71 00 79 00 
(1) 4274/    153E : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,009Bh,00A2h,00AEh,00B4h,00C2h,00CCh,00D7h,00E4h,00F0h	; x-4 8000 ok
             1544 : 9B 00 A2 00 AE 00 
             154A : B4 00 C2 00 CC 00 
             1550 : D7 00 E4 00 F0 00 
(1) 4275/    1556 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Bh,016Ch,0181h,0191h,01ACh,01C2h,01E0h	; x-5 16000 ok
             155C : 2E 01 47 01 5B 01 
             1562 : 6C 01 81 01 91 01 
             1568 : AC 01 C2 01 E0 01 
(1) 4276/    156E : 00 02 10 02 40 02   	dw 0200h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6 32000 wip
             1574 : 60 02 80 02 A0 02 
             157A : D0 02 F8 02 20 03 
             1580 : 50 03 80 03 C0 03 
(1) 4277/    1586 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4278/    1586 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4279/    1586 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4280/    1586 :                     
(1) 4281/    1586 :                     ; ----------------------------------------
(1) 4282/    1586 :                     ; SegaCD PCM
(1) 4283/    1586 :                     ; ----------------------------------------
(1) 4284/    1586 :                     wavFreq_CdPcm:
(1) 4285/    1586 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4286/    1586 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4287/    1586 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4288/    1586 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             158C : 28 01 3C 01 4C 01 
             1592 : 60 01 7C 01 88 01 
             1598 : AA 01 BC 01 DC 01 
(1) 4289/    159E : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             15A4 : 58 02 7C 02 A0 02 
             15AA : C8 02 FC 02 1C 03 
             15B0 : 54 03 7C 03 B8 03 
(1) 4290/    15B6 : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             15BC : AC 04 EC 04 40 05 
             15C2 : 90 05 E4 05 3C 06 
             15C8 : 98 06 04 07 60 07 
(1) 4291/    15CE : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             15D4 : 60 09 F0 09 64 0A 
             15DA : 04 0B AA 0B 60 0C 
             15E0 : 18 0D E4 0D B8 0E 
(1) 4292/    15E6 :                     ; 	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
(1) 4293/    15E6 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4294/    15E6 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4295/    15E6 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4296/    15E6 :                     
(1) 4297/    15E6 :                     ; ====================================================================
(1) 4298/    15E6 :                     ; ----------------------------------------------------------------
(1) 4299/    15E6 :                     ; Chip buffers
(1) 4300/    15E6 :                     ; ----------------------------------------------------------------
(1) 4301/    15E6 :                     
(1) 4302/    15E6 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             15EC : 00 00             
(1) 4303/    15EE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             15F4 : 00 00             
(1) 4304/    15F6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             15FC : 00 00             
(1) 4305/    15FE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             1604 : 00 00             
(1) 4306/    1606 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             160C : 00 00             
(1) 4307/    160E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             1614 : 00 00             
(1) 4308/    1616 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             161C : 00 00             
(1) 4309/    161E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1624 : 00 00             
(1) 4310/    1626 :                     
(1) 4311/    1626 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             162C : 00 00             
(1) 4312/    162E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1634 : 00 00             
(1) 4313/    1636 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             163C : 00 00             
(1) 4314/    163E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1644 : 00 00             
(1) 4315/    1646 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             164C : 00 00             
(1) 4316/    164E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1654 : 00 00             
(1) 4317/    1656 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             165C : 00 00             
(1) 4318/    165E :                     
(1) 4319/    165E : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4320/    1662 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4321/    1666 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4322/    166A : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4323/    166E : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4324/    1672 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4325/    1676 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4326/    167A : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4327/    167E : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4328/    1682 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4329/    1686 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4330/    168A : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4331/    168E : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4332/    1692 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4333/    1696 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4334/    169A :                     
(1) 4335/    169A :                     ; --------------------------------------------------------
(1) 4336/    169A :                     ; FM instrument storage
(1) 4337/    169A :                     fmcach_1	ds 28h
(1) 4338/    16C2 :                     fmcach_2	ds 28h
(1) 4339/    16EA :                     fmcach_3	ds 28h
(1) 4340/    1712 :                     fmcach_4	ds 28h
(1) 4341/    173A :                     fmcach_5	ds 28h
(1) 4342/    1762 :                     fmcach_6	ds 28h
(1) 4343/    178A :                     
(1) 4344/    178A :                     ; ====================================================================
(1) 4345/    178A :                     ; ----------------------------------------------------------------
(1) 4346/    178A :                     ; Track buffers
(1) 4347/    178A :                     ; ----------------------------------------------------------------
(1) 4348/    178A :                     
(1) 4349/    178A :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4350/    17AA :                     trkHdrs_1	ds 8*4
(1) 4351/    17CA :                     trkHdrs_2	ds 8*4
(1) 4352/    17EA :                     trkHdrs_3	ds 8*4
(1) 4353/    180A :                     trkBlks_0	ds 8
(1) 4354/    1812 :                     trkBlks_1	ds 8
(1) 4355/    181A :                     trkBlks_2	ds 8
(1) 4356/    1822 :                     trkBlks_3	ds 8
(1) 4357/    182A :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4358/    1869 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4359/    18A8 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4360/    18E7 :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4361/    1926 :                     
(1) 4362/    1926 :                     ; ====================================================================
(1) 4363/    1926 :                     ; --------------------------------------------------------
(1) 4364/    1926 :                     ; Channel tables
(1) 4365/    1926 :                     ;
(1) 4366/    1926 :                     ; PSG   80h
(1) 4367/    1926 :                     ; PSGN  90h
(1) 4368/    1926 :                     ; FM   0A0h
(1) 4369/    1926 :                     ; FM3  0B0h
(1) 4370/    1926 :                     ; DAC  0C0h
(1) 4371/    1926 :                     ; PCM  0D0h
(1) 4372/    1926 :                     ; PWM  0E0h
(1) 4373/    1926 :                     ; --------------------------------------------------------
(1) 4374/    1926 :                     
(1) 4375/    1A60 :                     		org 1A60h			; <-- MUST BE x0h ALIGNED
(1) 4376/    1A60 : A0 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4377/    1A62 : 62 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4378/    1A64 : 0E 00               		dw tblFM-tblList		; 0A0h
(1) 4379/    1A66 : 6E 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4380/    1A68 : 86 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4381/    1A6A : A0 00               		dw tblPCM-tblList		; 0D0h
(1) 4382/    1A6C : EA 01               		dw tblPWM-tblList		; 0E0h
(1) 4383/    1A6E :                     ; 		dw 0				; 0F0h
(1) 4384/    1A6E : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A74 : 00 00             
(1) 4385/    1A76 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7C : 00 00             
(1) 4386/    1A7E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A84 : 00 00             
(1) 4387/    1A86 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1A8C : 00 00             
(1) 4388/    1A8E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A94 : 00 00             
(1) 4389/    1A96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A9C : 00 00             
(1) 4390/    1A9E : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 4 <--
             1AA4 : 00 00             
(1) 4391/    1AA6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAC : 00 00             
(1) 4392/    1AAE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB4 : 00 00             
(1) 4393/    1AB6 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 5
             1ABC : 00 00             
(1) 4394/    1ABE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC4 : 00 00             
(1) 4395/    1AC6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ACC : 00 00             
(1) 4396/    1ACE : 00 00 00 02 02 00   tblFM3:		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3 <--
             1AD4 : 00 00             
(1) 4397/    1AD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ADC : 00 00             
(1) 4398/    1ADE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE4 : 00 00             
(1) 4399/    1AE6 : 00 00 00 06 06 00   tblFM6:		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 6 <--
             1AEC : 00 00             
(1) 4400/    1AEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF4 : 00 00             
(1) 4401/    1AF6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AFC : 00 00             
(1) 4402/    1AFE : FF FF               		dw -1	; end-of-list
(1) 4403/    1B00 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B06 : 00 00             
(1) 4404/    1B08 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B0E : 00 00             
(1) 4405/    1B10 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B16 : 00 00             
(1) 4406/    1B18 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1B1E : 00 00             
(1) 4407/    1B20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B26 : 00 00             
(1) 4408/    1B28 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2E : 00 00             
(1) 4409/    1B30 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1B36 : 00 00             
(1) 4410/    1B38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B3E : 00 00             
(1) 4411/    1B40 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B46 : 00 00             
(1) 4412/    1B48 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1B4E : 00 00             
(1) 4413/    1B50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B56 : 00 00             
(1) 4414/    1B58 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5E : 00 00             
(1) 4415/    1B60 : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1B66 : 00 00             
(1) 4416/    1B68 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B6E : 00 00             
(1) 4417/    1B70 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B76 : 00 00             
(1) 4418/    1B78 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1B7E : 00 00             
(1) 4419/    1B80 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B86 : 00 00             
(1) 4420/    1B88 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8E : 00 00             
(1) 4421/    1B90 : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1B96 : 00 00             
(1) 4422/    1B98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9E : 00 00             
(1) 4423/    1BA0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA6 : 00 00             
(1) 4424/    1BA8 : 00 00 00 07 07 00   		db 00h,00h,00h,07h,07h,00h,00h,00h	; Channel 7
             1BAE : 00 00             
(1) 4425/    1BB0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB6 : 00 00             
(1) 4426/    1BB8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBE : 00 00             
(1) 4427/    1BC0 : FF FF               		dw -1	; end-of-list
(1) 4428/    1BC2 : 00 00 00 03 03 00   tblPSGN:	db 00h,00h,00h,03h,03h,00h,00h,00h	; Noise
             1BC8 : 00 00             
(1) 4429/    1BCA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD0 : 00 00             
(1) 4430/    1BD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD8 : 00 00             
(1) 4431/    1BDA :                     ; --------------------------------------------------------
(1) 4432/    1BDA : 9A 16               fmcach_list:	dw fmcach_1
(1) 4433/    1BDC : C2 16               		dw fmcach_2
(1) 4434/    1BDE : EA 16               		dw fmcach_3
(1) 4435/    1BE0 : 00 00               		dw 0		; <-- skipped
(1) 4436/    1BE2 : 12 17               		dw fmcach_4
(1) 4437/    1BE4 : 3A 17               		dw fmcach_5
(1) 4438/    1BE6 : 62 17               		dw fmcach_6
(1) 4439/    1BE8 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4440/    1BE9 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4441/    1BEC : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4442/    1BEF : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4443/    1BF0 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4444/    1BF1 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4445/    1BF3 : 00                  		db 0
(1) 4446/    1BF4 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4447/    1BF6 : 00                  		db 0
(1) 4448/    1BF7 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4449/    1BF9 : 00                  		db 0
(1) 4450/    1BFA : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4451/    1BFC : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4452/    1BFD : 00                  tickSpSet	db 0		; **
(1) 4453/    1BFE : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4454/    1BFF : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4455/    1C00 :                     ; --------------------------------------------------------
(1) 4456/    1C00 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C06 : 00 00             
(1) 4457/    1C08 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0E : 00 00             
(1) 4458/    1C10 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C16 : 00 00             
(1) 4459/    1C18 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C1E : 00 00             
(1) 4460/    1C20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C26 : 00 00             
(1) 4461/    1C28 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C2E : 00 00             
(1) 4462/    1C30 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C36 : 00 00             
(1) 4463/    1C38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3E : 00 00             
(1) 4464/    1C40 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C46 : 00 00             
(1) 4465/    1C48 : FF FF               		dw -1	; end-of-list
(1) 4466/    1C4A : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C50 : 00 00             
(1) 4467/    1C52 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C58 : 00 00             
(1) 4468/    1C5A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C60 : 00 00             
(1) 4469/    1C62 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C68 : 00 00             
(1) 4470/    1C6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C70 : 00 00             
(1) 4471/    1C72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C78 : 00 00             
(1) 4472/    1C7A : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C80 : 00 00             
(1) 4473/    1C82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C88 : 00 00             
(1) 4474/    1C8A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C90 : 00 00             
(1) 4475/    1C92 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1C98 : 00 00             
(1) 4476/    1C9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CA0 : 00 00             
(1) 4477/    1CA2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CA8 : 00 00             
(1) 4478/    1CAA : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1CB0 : 00 00             
(1) 4479/    1CB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB8 : 00 00             
(1) 4480/    1CBA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC0 : 00 00             
(1) 4481/    1CC2 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1CC8 : 00 00             
(1) 4482/    1CCA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD0 : 00 00             
(1) 4483/    1CD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD8 : 00 00             
(1) 4484/    1CDA : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1CE0 : 00 00             
(1) 4485/    1CE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE8 : 00 00             
(1) 4486/    1CEA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CF0 : 00 00             
(1) 4487/    1CF2 :                     ; 		db 00h,00h,00h,07h,00h,00h,00h,00h	; Channel 8
(1) 4488/    1CF2 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4489/    1CF2 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4490/    1CF2 : FF FF               		dw -1	; end-of-list
(1) 4491/    1CF4 :                     
(1) 4492/    1CF4 :                     ; ----------------------------------------------------------------
(1) 4493/    1CF4 :                     
(1) 4494/    1CF4 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4495/    1CF5 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4496/    1CF6 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4497/    1CF7 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4498/    1CF8 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4499/    1CF9 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4500/    1CFB : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4501/    1CFD :                     		ds 1		; FREE BYTE
(1) 4502/    1CFE :                     
(1) 4503/    1CFE :                     ; ====================================================================
(1) 4504/    1CFE :                     ; ----------------------------------------------------------------
(1) 4505/    1CFE :                     ; Special aligned buffers
(1) 4506/    1CFE :                     ;
(1) 4507/    1CFE :                     ; Located at 1D00h
(1) 4508/    1CFE :                     ; ----------------------------------------------------------------
(1) 4509/    1CFE :                     
(1) 4510/    1D00 :                     		org 1D00h
(1) 4511/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4512/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4513/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4514/    1F10 :                     trkCach_1	ds MAX_RCACH
(1) 4515/    1F20 :                     trkCach_2	ds MAX_RCACH
(1) 4516/    1F30 :                     trkCach_3	ds MAX_RCACH
(1) 4517/    1F40 :                     ; --------------------------------------------------------
(1) 4518/    1F40 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4519/    1F4E :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4520/    1F50 :                     trkInfoCach	ds 4
(1) 4521/    1F54 :                     sampleHead	ds 006h
(1) 4522/    1F5A :                     instListOut	ds 8
(1) 4523/    1F62 :                     		ds 1		; filler
(1) 4524/    1F63 :                     
(1) 4525/    1F63 :                     ; ====================================================================
(1) 4526/    1F63 :                     ; --------------------------------------------------------
(1) 4527/    1F63 :                     ; MASTER buffers list
(1) 4528/    1F63 :                     ;
(1) 4529/    1F63 :                     ; dw track_buffer
(1) 4530/    1F63 :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4531/    1F63 :                     ;
(1) 4532/    1F63 :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4533/    1F63 :                     ; --------------------------------------------------------
(1) 4534/    1F63 :                     
(1) 4535/    1F63 :                     nikona_BuffList:
(1) 4536/    1F63 : 2A 18 0A 18 8A 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1F69 : 00 1F             
(1) 4537/    1F6B : 69 18 12 18 AA 17   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1F71 : 10 1F             
(1) 4538/    1F73 : A8 18 1A 18 CA 17   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1F79 : 20 1F             
(1) 4539/    1F7B : E7 18 22 18 EA 17   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             1F81 : 30 1F             
(1) 4540/    1F83 :                     nikona_BuffList_e:
(1) 4541/    1F83 : FF FF               	dw -1	; ENDOFLIST
(1) 4542/    1F85 :                     
(1) 4543/    1F85 :                     ; --------------------------------------------------------
(1) 4544/    1F85 :                     
(1) 4545/    4C81 :                     		dephase
(1) 4546/    4C81 :                     		cpu 68000		; [AS] Return to 68k
(1) 4547/    4C81 :                     		padding off		; [AS] NO padding
(1) 4548/    4C81 :                     		align 2
(1) 4549/    4C82 :                     
     316/  884C82 :                     		phase $880000+*
     318/  884C82 :                     Z80_CODE_END:
     320/    4C82 :                     		dephase
     325/    4C82 :                     Z80_CODE_FILE_E:
     326/    4C82 :                     
     327/    4C82 :                     ; ====================================================================
     328/    4C82 :                     ; --------------------------------------------------------
     329/    4C82 :                     ; SEGA CD SUB-CPU data
     330/    4C82 :                     ; --------------------------------------------------------
     331/    4C82 :                     
     346/    4C82 :                     
     347/    4C82 :                     ; ====================================================================
     348/    4C82 :                     ; ----------------------------------------------------------------
     349/    4C82 :                     ; SH2 code sent to SDRAM area
     350/    4C82 :                     ; ----------------------------------------------------------------
     351/    4C82 :                     
     355/    4C82 :                     		align 4
     357/    4C84 :                     MARS_RAMCODE:
     359/    4C84 :                     	; ------------------------------------------------
     360/    4C84 :                     		include "system/mars/code.asm"
(1)    1/    4C84 :                     ; ===========================================================================
(1)    2/    4C84 :                     ; -------------------------------------------------------------------
(1)    3/    4C84 :                     ; MARS SH2 SDRAM section, CODE is shared for both SH2 CPUs
(1)    4/    4C84 :                     ;
(1)    5/    4C84 :                     ; comm port setup:
(1)    6/    4C84 :                     ; comm0-comm7  | FREE to USE
(1)    7/    4C84 :                     ;                If any ERROR occurs: the ports comm2 and comm4
(1)    8/    4C84 :                     ;                will return the a error number and the CPU
(1)    9/    4C84 :                     ;                who got the error.
(1)   10/    4C84 :                     ; comm8-comm11 | Reserved to Z80 for reading the PWM table
(1)   11/    4C84 :                     ; comm12       | Master CPU control (see master_loop)
(1)   12/    4C84 :                     ; comm14       | Slave CPU control (see slave_loop)
(1)   13/    4C84 :                     ; -------------------------------------------------------------------
(1)   14/    4C84 :                     
(1)   15/ 6000000 :                     		phase CS3	; We are at SDRAM
(1)   16/ 6000000 :                     		cpu SH7600
(1)   17/ 6000000 :                     
(1)   18/ 6000000 :                     ; ====================================================================
(1)   19/ 6000000 :                     ; --------------------------------------------------------
(1)   20/ 6000000 :                     ; Settings
(1)   21/ 6000000 :                     ; --------------------------------------------------------
(1)   22/ 6000000 :                     
(1)   23/ 6000000 : =$1                  SH2_DEBUG		equ 1			; Set to 1 too see if CPUs are active using comm's 0 and 1
(1)   24/ 6000000 : =$C0000800           STACK_MSTR		equ $C0000800		; !! Master's STACK point (OLD: CS3|$40000)
(1)   25/ 6000000 : =$C0000800           STACK_SLV		equ $C0000800		; !! Slave's STACK point (OLD: CS3|$3F800)
(1)   26/ 6000000 :                     
(1)   27/ 6000000 :                     ; ====================================================================
(1)   28/ 6000000 :                     ; ----------------------------------------------------------------
(1)   29/ 6000000 :                     ; Macros
(1)   30/ 6000000 :                     ; ----------------------------------------------------------------
(1)   31/ 6000000 :                     
(1)   32/ 6000000 :                     cpu_me macro color
(1)   33/ 6000000 :                     	if MARSCD=0	; <-- Doesn't work on FUSION
(1)   34/ 6000000 :                     		mov	#color,r1
(1)   35/ 6000000 :                     		mov	#_vdpreg,r2
(1)   36/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   37/ 6000000 :                     .hblk:		mov.b	@(vdpsts,r2),r0
(1)   38/ 6000000 :                     		tst	#HBLK,r0
(1)   39/ 6000000 :                     		bt	.hblk
(1)   40/ 6000000 :                     		mov.b	r1,@r3
(1)   41/ 6000000 :                     		nop
(1)   42/ 6000000 :                     	endif
(1)   43/ 6000000 :                     	endm
(1)   44/ 6000000 :                     
(1)   45/ 6000000 :                     ; ====================================================================
(1)   46/ 6000000 :                     ; ----------------------------------------------------------------
(1)   47/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   48/ 6000000 :                     ; ----------------------------------------------------------------
(1)   49/ 6000000 :                     
(1)   50/ 6000000 :                     		align 4
(1)   51/ 6000000 :                     SH2_Master:
(1)   52/ 6000000 : 0600 07CC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
          6000006 : 0800             
(1)   53/ 6000008 : 0600 07CC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
          600000E : 0800             
(1)   54/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   55/ 6000014 : 0000 0000           		dc.l 0				; Reserved
(1)   56/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   57/ 600001C : 2010 0400           		dc.l $20100400			; Reserved
(1)   58/ 6000020 : 2010 0420           		dc.l $20100420			; Reserved
(1)   59/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   60/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   61/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   62/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   63/ 6000034 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          600003A : 0000 0000 0000 
          6000040 : 0000 0000 0000 
          6000046 : 0000 0000 0000 
          600004C : 0000 0000 0000 
          6000052 : 0000 0000 0000    
(1)   64/ 6000058 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          600005E : 0000 0000 0000 
          6000064 : 0000 0000 0000 
          600006A : 0000 0000 0000 
          6000070 : 0000 0000 0000 
          6000076 : 0000 0000 0000    
(1)   65/ 600007C : 0000 0000           		dc.l 0
(1)   66/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   67/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   98/ 6000100 : 0600 0250            		dc.l master_irq			; Level 0 & 1 IRQ
(1)   99/ 6000104 : 0600 0250           		dc.l master_irq			; Level 2 & 3 IRQ
(1)  100/ 6000108 : 0600 0250           		dc.l master_irq			; Level 4 & 5 IRQ
(1)  101/ 600010C : 0600 0250           		dc.l master_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  102/ 6000110 : 0600 0250           		dc.l master_irq			; Level 8 & 9 IRQ: Command interupt
(1)  103/ 6000114 : 0600 0250           		dc.l master_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  104/ 6000118 : 0600 0250           		dc.l master_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  105/ 600011C : 0600 0250           		dc.l master_irq			; Level 14 & 15 IRQ: Reset Button
(1)  106/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  107/ 6000120 : 0600 0250           		dc.l master_irq			; Watchdog
(1)  108/ 6000124 : 0600 0250           		dc.l master_irq			; DMA
(1)  109/ 6000128 :                     
(1)  110/ 6000128 :                     ; ====================================================================
(1)  111/ 6000128 :                     ; ----------------------------------------------------------------
(1)  112/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  113/ 6000128 :                     ; ----------------------------------------------------------------
(1)  114/ 6000128 :                     
(1)  115/ 6000128 :                     		align 4
(1)  116/ 6000128 :                     SH2_Slave:
(1)  117/ 6000128 : 0600 0E74 C000      		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
          600012E : 0800             
(1)  118/ 6000130 : 0600 0E74 C000      		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
          6000136 : 0800             
(1)  119/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  120/ 600013C : 0000 0000           		dc.l 0				; Reserved
(1)  121/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  122/ 6000144 : 2010 0400           		dc.l $20100400			; Reserved
(1)  123/ 6000148 : 2010 0420           		dc.l $20100420			; Reserved
(1)  124/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  125/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  126/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  127/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  128/ 600015C : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          6000162 : 0000 0000 0000 
          6000168 : 0000 0000 0000 
          600016E : 0000 0000 0000 
          6000174 : 0000 0000 0000 
          600017A : 0000 0000 0000    
(1)  129/ 6000180 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          6000186 : 0000 0000 0000 
          600018C : 0000 0000 0000 
          6000192 : 0000 0000 0000 
          6000198 : 0000 0000 0000 
          600019E : 0000 0000 0000    
(1)  130/ 60001A4 : 0000 0000           		dc.l 0
(1)  131/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  132/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  163/ 6000228 : 0600 0278            		dc.l slave_irq			; Level 0 & 1 IRQ
(1)  164/ 600022C : 0600 0278           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  165/ 6000230 : 0600 0278           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  166/ 6000234 : 0600 0278           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  167/ 6000238 : 0600 0278           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  168/ 600023C : 0600 0278           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  169/ 6000240 : 0600 0278           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  170/ 6000244 : 0600 0278           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  171/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  172/ 6000248 : 0600 0278           		dc.l slave_irq			; Watchdog
(1)  173/ 600024C : 0600 0278           		dc.l slave_irq			; DMA
(1)  174/ 6000250 :                     
(1)  175/ 6000250 :                     ; ====================================================================
(1)  176/ 6000250 :                     ; ----------------------------------------------------------------
(1)  177/ 6000250 :                     ; IRQ on both SH2's
(1)  178/ 6000250 :                     ;
(1)  179/ 6000250 :                     ; r0-r1 are saved
(1)  180/ 6000250 :                     ; ----------------------------------------------------------------
(1)  181/ 6000250 :                     
(1)  182/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  183/ 6000250 :                     
(1)  184/ 6000250 :                     		align 4
(1)  185/ 6000250 :                     master_irq:
(1)  186/ 6000250 : 2F06                		mov	r0,@-r15
(1)  187/ 6000252 : 2F16                		mov	r1,@-r15
(1)  188/ 6000254 : 4F22                		sts	pr,@-r15
(1)  189/ 6000256 : 0002                		stc	sr,r0
(1)  190/ 6000258 : 4009                		shlr2	r0
(1)  191/ 600025A : C93C                		and	#$3C,r0
(1)  192/ 600025C : 6103                		mov	r0,r1
(1)  193/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  194/ 6000260 : 600C                		extu.b	r0,r0
(1)  195/ 6000262 : 400E                		ldc	r0,sr
(1)  196/ 6000264 : C70E                		mova	int_m_list,r0
(1)  197/ 6000266 : 301C                		add	r1,r0
(1)  198/ 6000268 : 6102                		mov	@r0,r1
(1)  199/ 600026A : 410B                		jsr	@r1
(1)  200/ 600026C : 0009                		nop
(1)  201/ 600026E : 4F26                		lds	@r15+,pr
(1)  202/ 6000270 : 61F6                		mov	@r15+,r1
(1)  203/ 6000272 : 60F6                		mov	@r15+,r0
(1)  204/ 6000274 : 002B                		rte
(1)  205/ 6000276 : 0009                		nop
(1)  206/ 6000278 :                     		align 4
(1)  207/ 6000278 :                     
(1)  208/ 6000278 :                     ; ====================================================================
(1)  209/ 6000278 :                     
(1)  210/ 6000278 :                     slave_irq:
(1)  211/ 6000278 : 2F06                		mov	r0,@-r15
(1)  212/ 600027A : 2F16                		mov	r1,@-r15
(1)  213/ 600027C : 4F22                		sts	pr,@-r15
(1)  214/ 600027E : 0002                		stc	sr,r0
(1)  215/ 6000280 : 4009                		shlr2	r0
(1)  216/ 6000282 : C93C                		and	#$3C,r0
(1)  217/ 6000284 : 6103                		mov	r0,r1
(1)  218/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  219/ 6000288 : 600C                		extu.b	r0,r0
(1)  220/ 600028A : 400E                		ldc	r0,sr
(1)  221/ 600028C : C714                		mova	int_s_list,r0
(1)  222/ 600028E : 301C                		add	r1,r0
(1)  223/ 6000290 : 6102                		mov	@r0,r1
(1)  224/ 6000292 : 410B                		jsr	@r1
(1)  225/ 6000294 : 0009                		nop
(1)  226/ 6000296 : 4F26                		lds	@r15+,pr
(1)  227/ 6000298 : 61F6                		mov	@r15+,r1
(1)  228/ 600029A : 60F6                		mov	@r15+,r0
(1)  229/ 600029C : 002B                		rte
(1)  230/ 600029E : 0009                		nop
(1)  231/ 60002A0 :                     		align 4
(1)  232/ 60002A0 :                     
(1)  233/ 60002A0 :                     ; ====================================================================
(1)  234/ 60002A0 :                     ; ------------------------------------------------
(1)  235/ 60002A0 :                     ; irq list
(1)  236/ 60002A0 :                     ; ------------------------------------------------
(1)  237/ 60002A0 :                     
(1)  238/ 60002A0 :                     		align 4
(1)  239/ 60002A0 :                     ;				  		  IRQ Level:
(1)  240/ 60002A0 :                     int_m_list:
(1)  241/ 60002A0 : 0600 0380           		dc.l m_irq_bad			; 0
(1)  242/ 60002A4 : 0600 0380           		dc.l m_irq_bad			; 1
(1)  243/ 60002A8 : 0600 0380           		dc.l m_irq_bad			; 2
(1)  244/ 60002AC : 0600 19D4           		dc.l m_irq_wdg			; 3 Watchdog
(1)  245/ 60002B0 : 0600 0380           		dc.l m_irq_bad			; 4
(1)  246/ 60002B4 : 0600 0398           		dc.l m_irq_dma			; 5 DMA exit
(1)  247/ 60002B8 : 0600 03D4           		dc.l m_irq_pwm			; 6
(1)  248/ 60002BC : 0600 03D4           		dc.l m_irq_pwm			; 7
(1)  249/ 60002C0 : 0600 03E4           		dc.l m_irq_cmd			; 8
(1)  250/ 60002C4 : 0600 03E4           		dc.l m_irq_cmd			; 9
(1)  251/ 60002C8 : 0600 0444           		dc.l m_irq_h			; A
(1)  252/ 60002CC : 0600 0444           		dc.l m_irq_h			; B
(1)  253/ 60002D0 : 0600 0454           		dc.l m_irq_v			; C
(1)  254/ 60002D4 : 0600 0454           		dc.l m_irq_v			; D
(1)  255/ 60002D8 : 0600 0470           		dc.l m_irq_vres			; E
(1)  256/ 60002DC : 0600 0470           		dc.l m_irq_vres			; F
(1)  257/ 60002E0 :                     int_s_list:
(1)  258/ 60002E0 : 0600 04F4           		dc.l s_irq_bad			; 0
(1)  259/ 60002E4 : 0600 04F4           		dc.l s_irq_bad			; 1
(1)  260/ 60002E8 : 0600 04F4           		dc.l s_irq_bad			; 2
(1)  261/ 60002EC : 0600 04F8           		dc.l s_irq_wdg			; 3 Watchdog
(1)  262/ 60002F0 : 0600 04F4           		dc.l s_irq_bad			; 4
(1)  263/ 60002F4 : 0600 0504           		dc.l s_irq_dma			; 5 DMA exit
(1)  264/ 60002F8 : C000 0000           		dc.l s_irq_pwm|$C0000000	; 6
(1)  265/ 60002FC : C000 0000           		dc.l s_irq_pwm|$C0000000	; 7
(1)  266/ 6000300 : 0600 0514           		dc.l s_irq_cmd			; 8
(1)  267/ 6000304 : 0600 0514           		dc.l s_irq_cmd			; 9
(1)  268/ 6000308 : 0600 074A           		dc.l s_irq_h			; A
(1)  269/ 600030C : 0600 074A           		dc.l s_irq_h			; B
(1)  270/ 6000310 : 0600 075C           		dc.l s_irq_v			; C
(1)  271/ 6000314 : 0600 075C           		dc.l s_irq_v			; D
(1)  272/ 6000318 : 0600 076C           		dc.l s_irq_vres			; E
(1)  273/ 600031C : 0600 076C           		dc.l s_irq_vres			; F
(1)  274/ 6000320 :                     
(1)  275/ 6000320 :                     ; ====================================================================
(1)  276/ 6000320 :                     ; ----------------------------------------------------------------
(1)  277/ 6000320 :                     ; Error handler
(1)  278/ 6000320 :                     ; ----------------------------------------------------------------
(1)  279/ 6000320 :                     
(1)  280/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  281/ 6000320 :                     ;
(1)  282/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  283/ 6000320 :                     ; comm4: PC counter
(1)  284/ 6000320 :                     ;
(1)  285/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  286/ 6000320 :                     ;        $00 - Master
(1)  287/ 6000320 :                     ;        $01 - Slave
(1)  288/ 6000320 :                     ;
(1)  289/ 6000320 :                     ; CODE | Error type:
(1)  290/ 6000320 :                     ;	 $00: Unknown error
(1)  291/ 6000320 :                     ;	 $01: Illegal instruction
(1)  292/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  293/ 6000320 :                     ;	 $03: Address error
(1)  294/ 6000320 :                     ;	 $04: DMA error
(1)  295/ 6000320 :                     ;	 $05: NMI vector
(1)  296/ 6000320 :                     ;	 $06: User break
(1)  297/ 6000320 :                     
(1)  298/ 6000320 :                     SH2_M_Error:
(1)  299/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  300/ 6000322 : E000                		mov	#0,r0
(1)  301/ 6000324 :                     SH2_M_ErrIllg:
(1)  302/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  303/ 6000326 : E001                		mov	#1,r0
(1)  304/ 6000328 :                     SH2_M_ErrInvl:
(1)  305/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  306/ 600032A : E002                		mov	#2,r0
(1)  307/ 600032C :                     SH2_M_ErrAddr:
(1)  308/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  309/ 600032E : E003                		mov	#3,r0
(1)  310/ 6000330 :                     SH2_M_ErrDma:
(1)  311/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  312/ 6000332 : E004                		mov	#4,r0
(1)  313/ 6000334 :                     SH2_M_ErrNmi:
(1)  314/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  315/ 6000336 : E005                		mov	#5,r0
(1)  316/ 6000338 :                     SH2_M_ErrUser:
(1)  317/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  318/ 600033A : E006                		mov	#6,r0
(1)  319/ 600033C :                     ; r0 - value
(1)  320/ 600033C :                     SH2_M_ErrCode:
(1)  321/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  322/ 600033E : 2101                		mov.w	r0,@r1
(1)  323/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  324/ 6000342 : 60F2                		mov	@r15,r0
(1)  325/ 6000344 : 2102                		mov	r0,@r1
(1)  326/ 6000346 : AFFE                		bra	*
(1)  327/ 6000348 : 0009                		nop
(1)  328/ 600034A :                     		align 4
(1)  329/ 600034C :                     
(1)  330/ 600034C :                     ; ----------------------------------------------------
(1)  331/ 600034C :                     
(1)  332/ 600034C :                     SH2_S_Error:
(1)  333/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  334/ 600034E : E000                		mov	#0,r0
(1)  335/ 6000350 :                     SH2_S_ErrIllg:
(1)  336/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  337/ 6000352 : E0FF                		mov	#-1,r0
(1)  338/ 6000354 :                     SH2_S_ErrInvl:
(1)  339/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  340/ 6000356 : E0FE                		mov	#-2,r0
(1)  341/ 6000358 :                     SH2_S_ErrAddr:
(1)  342/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  343/ 600035A : E0FD                		mov	#-3,r0
(1)  344/ 600035C :                     SH2_S_ErrDma:
(1)  345/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  346/ 600035E : E0FC                		mov	#-4,r0
(1)  347/ 6000360 :                     SH2_S_ErrNmi:
(1)  348/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  349/ 6000362 : E0FB                		mov	#-5,r0
(1)  350/ 6000364 :                     SH2_S_ErrUser:
(1)  351/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  352/ 6000366 : E0FA                		mov	#-6,r0
(1)  353/ 6000368 :                     ; r0 - value
(1)  354/ 6000368 :                     SH2_S_ErrCode:
(1)  355/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  356/ 600036A : 2101                		mov.w	r0,@r1
(1)  357/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  358/ 600036E : 60F2                		mov	@r15,r0
(1)  359/ 6000370 : 2102                		mov	r0,@r1
(1)  360/ 6000372 : AFFE                		bra	*
(1)  361/ 6000374 : 0009                		nop
(1)  362/ 6000376 :                     		align 4
(1)  363/ 6000378 : 2000 4022 2000      		ltorg
          600037E : 4024             
(1)  364/ 6000380 :                     
(1)  365/ 6000380 :                     ; ====================================================================
(1)  366/ 6000380 :                     ; ----------------------------------------------------------------
(1)  367/ 6000380 :                     ; Interrupts
(1)  368/ 6000380 :                     ; ----------------------------------------------------------------
(1)  369/ 6000380 :                     
(1)  370/ 6000380 :                     ; =================================================================
(1)  371/ 6000380 :                     ; ------------------------------------------------
(1)  372/ 6000380 :                     ; Master | Unused interrupt
(1)  373/ 6000380 :                     ; ------------------------------------------------
(1)  374/ 6000380 :                     
(1)  375/ 6000380 :                     		align 4
(1)  376/ 6000380 :                     m_irq_bad:
(1)  377/ 6000380 : 91B0                		mov	#_FRT,r1
(1)  378/ 6000382 : 8417                		mov.b	@(7,r1),r0
(1)  379/ 6000384 : CA02                		xor	#2,r0
(1)  380/ 6000386 : 8017                		mov.b	r0,@(7,r1)
(1)  381/ 6000388 : 0009                		nop
(1)  382/ 600038A : 0009                		nop
(1)  383/ 600038C : 0009                		nop
(1)  384/ 600038E : 0009                		nop
(1)  385/ 6000390 : 0009                		nop
(1)  386/ 6000392 : 000B                		rts
(1)  387/ 6000394 : 0009                		nop
(1)  388/ 6000396 :                     		align 4
(1)  389/ 6000398 :                     
(1)  390/ 6000398 :                     ; ; =================================================================
(1)  391/ 6000398 :                     ; ; ------------------------------------------------
(1)  392/ 6000398 :                     ; ; Master | Watchdog
(1)  393/ 6000398 :                     ; ; ------------------------------------------------
(1)  394/ 6000398 :                     ;
(1)  395/ 6000398 :                     ; MOVED TO video.asm
(1)  396/ 6000398 :                     ; m_irq_wdg:
(1)  397/ 6000398 :                     ; 		mov	#_FRT,r1
(1)  398/ 6000398 :                     ; 		mov.b	@(7,r1),r0
(1)  399/ 6000398 :                     ; 		xor	#2,r0
(1)  400/ 6000398 :                     ; 		mov.b	r0,@(7,r1)
(1)  401/ 6000398 :                     ; 		nop
(1)  402/ 6000398 :                     ; 		nop
(1)  403/ 6000398 :                     ; 		nop
(1)  404/ 6000398 :                     ; 		nop
(1)  405/ 6000398 :                     ; 		nop
(1)  406/ 6000398 :                     ; 		rts
(1)  407/ 6000398 :                     ; 		nop
(1)  408/ 6000398 :                     ; 		align 4
(1)  409/ 6000398 :                     
(1)  410/ 6000398 :                     ; =================================================================
(1)  411/ 6000398 :                     ; ------------------------------------------------
(1)  412/ 6000398 :                     ; Master | DMA Exit
(1)  413/ 6000398 :                     ; ------------------------------------------------
(1)  414/ 6000398 :                     
(1)  415/ 6000398 :                     m_irq_dma:
(1)  416/ 6000398 : 91A4                		mov	#_FRT,r1
(1)  417/ 600039A : 8417                		mov.b	@(7,r1),r0
(1)  418/ 600039C : CA02                		xor	#2,r0
(1)  419/ 600039E : 8017                		mov.b	r0,@(7,r1)
(1)  420/ 60003A0 : E18C                		mov	#_DMACHANNEL0,r1
(1)  421/ 60003A2 : 6012                .wait_dma:	mov	@r1,r0				; <-- Fail-safe
(1)  422/ 60003A4 : C802                		tst	#%10,r0
(1)  423/ 60003A6 : 89FC                		bt	.wait_dma
(1)  424/ 60003A8 : 6012                		mov	@r1,r0				; Dummy read
(1)  425/ 60003AA : 909C                		mov	#%0100010011100000,r0
(1)  426/ 60003AC : 2102                		mov	r0,@r1				; Turn this DMA off.
(1)  427/ 60003AE : D141                		mov	#_sysreg+comm12,r1
(1)  428/ 60003B0 : 6010                		mov.b	@r1,r0
(1)  429/ 60003B2 : C9BF                		and	#%10111111,r0			; Report EXIT status
(1)  430/ 60003B4 : 2100                		mov.b	r0,@r1
(1)  432/ 60003B6 : C508                		mov.w	@(marsGbl_WdgActive,gbr),r0
(1)  433/ 60003B8 : 2008                		tst	r0,r0
(1)  434/ 60003BA : 8904                		bt	.not_use
(1)  435/ 60003BC : 9194                		mov.w	#$FE80,r1		; $FFFFFE80
(1)  436/ 60003BE : 9094                		mov.w	#$5A00|$18,r0		; Watchdog timer
(1)  437/ 60003C0 : 2101                		mov.w	r0,@r1
(1)  438/ 60003C2 : 9093                		mov.w	#$A538,r0		; Enable Watchdog
(1)  439/ 60003C4 : 2101                		mov.w	r0,@r1
(1)  440/ 60003C6 :                     .not_use:
(1)  442/ 60003C6 : 0009                		nop
(1)  443/ 60003C8 : 0009                		nop
(1)  444/ 60003CA : 0009                		nop
(1)  445/ 60003CC : 0009                		nop
(1)  446/ 60003CE : 0009                		nop
(1)  447/ 60003D0 : 000B                		rts
(1)  448/ 60003D2 : 0009                		nop
(1)  449/ 60003D4 :                     		align 4
(1)  450/ 60003D4 :                     
(1)  451/ 60003D4 :                     ; =================================================================
(1)  452/ 60003D4 :                     ; ------------------------------------------------
(1)  453/ 60003D4 :                     ; Master | PWM Interrupt
(1)  454/ 60003D4 :                     ; ------------------------------------------------
(1)  455/ 60003D4 :                     
(1)  456/ 60003D4 :                     m_irq_pwm:
(1)  457/ 60003D4 : 9186                		mov	#_FRT,r1
(1)  458/ 60003D6 : 8417                		mov.b	@(7,r1),r0
(1)  459/ 60003D8 : CA02                		xor	#2,r0
(1)  460/ 60003DA : 8017                		mov.b	r0,@(7,r1)
(1)  461/ 60003DC : D136                		mov	#_sysreg+pwmintclr,r1
(1)  462/ 60003DE : 2101                		mov.w	r0,@r1
(1)  463/ 60003E0 : 000B                		rts
(1)  464/ 60003E2 : 0009                		nop
(1)  465/ 60003E4 :                     		align 4
(1)  466/ 60003E4 :                     
(1)  467/ 60003E4 :                     ; =================================================================
(1)  468/ 60003E4 :                     ; ------------------------------------------------
(1)  469/ 60003E4 :                     ; Master | CMD Interrupt
(1)  470/ 60003E4 :                     ; ------------------------------------------------
(1)  471/ 60003E4 :                     
(1)  472/ 60003E4 :                     m_irq_cmd:
(1)  473/ 60003E4 : 917E                		mov	#_FRT,r1
(1)  474/ 60003E6 : 8417                		mov.b	@(7,r1),r0
(1)  475/ 60003E8 : CA02                		xor	#2,r0
(1)  476/ 60003EA : 8017                		mov.b	r0,@(7,r1)
(1)  477/ 60003EC : D133                		mov	#_sysreg+cmdintclr,r1
(1)  478/ 60003EE : 2101                		mov.w	r0,@r1
(1)  479/ 60003F0 : 6011                		mov.w	@r1,r0
(1)  480/ 60003F2 : 2F26                		mov	r2,@-r15
(1)  481/ 60003F4 : 2F36                		mov	r3,@-r15
(1)  482/ 60003F6 : 2F46                		mov	r4,@-r15
(1)  483/ 60003F8 :                     	; --------------------------------
(1)  485/ 60003F8 :                     ; 		mov	#1,r0				; Pause watchdog
(1)  486/ 60003F8 :                     ; 		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1)  487/ 60003F8 : C508                		mov.w	@(marsGbl_WdgActive,gbr),r0
(1)  488/ 60003FA : 2008                		tst	r0,r0
(1)  489/ 60003FC : 8902                		bt	.wdg_inuse
(1)  490/ 60003FE : 9173                		mov.w   #$FE80,r1			; Disable Watchdog
(1)  491/ 6000400 : 9075                		mov.w   #$A518,r0
(1)  492/ 6000402 : 2101                		mov.w   r0,@r1
(1)  493/ 6000404 :                     .wdg_inuse:
(1)  495/ 6000404 :                     	; --------------------------------
(1)  496/ 6000404 : D42E                		mov	#_sysreg,r4			; r4 - sysreg base
(1)  497/ 6000406 : E380                		mov	#_DMASOURCE0,r3			; r3 - DMA base register
(1)  498/ 6000408 : D22A                		mov	#_sysreg+comm12,r2		; r2 - comm to write the signal
(1)  499/ 600040A : 906C                		mov	#%0100010011100000,r0		; Transfer mode + DMA enable OFF
(1)  500/ 600040C : 1303                		mov	r0,@($C,r3)
(1)  501/ 600040E : 6020                		mov.b	@r2,r0
(1)  502/ 6000410 : C90F                		and	#%00001111,r0
(1)  503/ 6000412 : 2008                		tst	r0,r0				; CMD mode $00?
(1)  504/ 6000414 : 8B03                		bf	.dreq_ram
(1)  505/ 6000416 : 5043                		mov	@(dreqdest,r4),r0		; Set destination
(1)  506/ 6000418 : D12A                		mov	#CS3,r1
(1)  507/ 600041A : A001                		bra	.dreq_setdest
(1)  508/ 600041C : 201B                		or	r1,r0
(1)  509/ 600041E :                     .dreq_ram:
(1)  510/ 600041E : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Pick current WRITE buffer
(1)  511/ 6000420 :                     .dreq_setdest:
(1)  512/ 6000420 : D129                		mov	#TH,r1				; as Cache-thru
(1)  513/ 6000422 : 201B                		or	r1,r0
(1)  514/ 6000424 : 1301                		mov	r0,@(4,r3)			; Set Destination
(1)  515/ 6000426 : 8548                		mov.w	@(dreqlen,r4),r0
(1)  516/ 6000428 : 600D                		extu.w	r0,r0
(1)  517/ 600042A : 1302                		mov	r0,@(8,r3)			; Length set by 68k
(1)  518/ 600042C : D127                		mov	#_sysreg+dreqfifo,r1
(1)  519/ 600042E : 2312                		mov	r1,@r3				; Source point: DREQ FIFO
(1)  520/ 6000430 : 905E                		mov	#%0100010011100101,r0		; Transfer mode + DMA enable + Use DMA interrupt
(1)  521/ 6000432 :                     ; 		mov	#%0100010011100001,r0		; Transfer mode + DMA enable
(1)  522/ 6000432 : 1303                		mov	r0,@($C,r3)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  523/ 6000434 : 6020                		mov.b	@r2,r0
(1)  524/ 6000436 : CB40                		or	#%01000000,r0			; Report ENTER status
(1)  525/ 6000438 : 2200                		mov.b	r0,@r2
(1)  526/ 600043A :                     
(1)  527/ 600043A :                     	; ********************************
(1)  528/ 600043A :                     	; Wait here if NOT using
(1)  529/ 600043A :                     	; DMA interrupt
(1)  530/ 600043A :                     	; ********************************
(1)  531/ 600043A :                     ; 		mov	#_DMACHANNEL0,r1
(1)  532/ 600043A :                     ; .wait_dma:
(1)  533/ 600043A :                     ; 		mov	@r1,r0
(1)  534/ 600043A :                     ; 		tst	#%10,r0
(1)  535/ 600043A :                     ; 		bt	.wait_dma
(1)  536/ 600043A :                     ; 		mov	@r1,r0				; Dummy read
(1)  537/ 600043A :                     ; 		mov	#%0100010011100000,r0
(1)  538/ 600043A :                     ; 		mov	r0,@r1
(1)  539/ 600043A :                     ; 		mov	#_sysreg+comm12,r1
(1)  540/ 600043A :                     ; 		mov.b	@r1,r0
(1)  541/ 600043A :                     ; 		and	#%10111111,r0			; Report EXIT status
(1)  542/ 600043A :                     ; 		mov.b	r0,@r1
(1)  543/ 600043A :                     	; ********************************
(1)  544/ 600043A :                     
(1)  545/ 600043A :                     	; --------------------------------
(1)  546/ 600043A : 64F6                		mov	@r15+,r4
(1)  547/ 600043C : 63F6                		mov	@r15+,r3
(1)  548/ 600043E : 62F6                		mov	@r15+,r2
(1)  549/ 6000440 : 000B                		rts
(1)  550/ 6000442 : 0009                		nop
(1)  551/ 6000444 :                     		align 4
(1)  552/ 6000444 :                     
(1)  553/ 6000444 :                     ; =================================================================
(1)  554/ 6000444 :                     ; ------------------------------------------------
(1)  555/ 6000444 :                     ; Master | HBlank
(1)  556/ 6000444 :                     ; ------------------------------------------------
(1)  557/ 6000444 :                     
(1)  558/ 6000444 :                     m_irq_h:
(1)  559/ 6000444 : 914E                		mov	#_FRT,r1
(1)  560/ 6000446 : 8417                		mov.b	@(7,r1),r0
(1)  561/ 6000448 : CA02                		xor	#2,r0
(1)  562/ 600044A : 8017                		mov.b	r0,@(7,r1)
(1)  563/ 600044C : D120                		mov	#_sysreg+hintclr,r1
(1)  564/ 600044E : 2101                		mov.w	r0,@r1
(1)  565/ 6000450 : 000B                		rts
(1)  566/ 6000452 : 0009                		nop
(1)  567/ 6000454 :                     		align 4
(1)  568/ 6000454 :                     
(1)  569/ 6000454 :                     ; =================================================================
(1)  570/ 6000454 :                     ; ------------------------------------------------
(1)  571/ 6000454 :                     ; Master | VBlank
(1)  572/ 6000454 :                     ; ------------------------------------------------
(1)  573/ 6000454 :                     
(1)  574/ 6000454 :                     m_irq_v:
(1)  575/ 6000454 : 9146                		mov	#_FRT,r1
(1)  576/ 6000456 : 8417                		mov.b	@(7,r1),r0
(1)  577/ 6000458 : CA02                		xor	#2,r0
(1)  578/ 600045A : 8017                		mov.b	r0,@(7,r1)
(1)  579/ 600045C : D11D                		mov	#_sysreg+vintclr,r1
(1)  580/ 600045E : 2101                		mov.w	r0,@r1
(1)  581/ 6000460 : 0009                		nop
(1)  582/ 6000462 : 0009                		nop
(1)  583/ 6000464 : 0009                		nop
(1)  584/ 6000466 : 0009                		nop
(1)  585/ 6000468 : 0009                		nop
(1)  586/ 600046A : 000B                		rts
(1)  587/ 600046C : 0009                		nop
(1)  588/ 600046E :                     		align 4
(1)  589/ 6000470 :                     
(1)  590/ 6000470 :                     ; =================================================================
(1)  591/ 6000470 :                     ; ------------------------------------------------
(1)  592/ 6000470 :                     ; Master | VRES Interrupt (RESET button)
(1)  593/ 6000470 :                     ; ------------------------------------------------
(1)  594/ 6000470 :                     
(1)  595/ 6000470 :                     m_irq_vres:
(1)  596/ 6000470 : D113                		mov	#_sysreg,r1
(1)  597/ 6000472 : 60F3                		mov	r15,r0
(1)  598/ 6000474 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  599/ 6000476 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  600/ 6000478 : C801                		tst	#1,r0
(1)  601/ 600047A : 8B15                		bf	.rv_busy
(1)  602/ 600047C : E0F0                		mov.b	#$F0,r0			; ** $F0
(1)  603/ 600047E : 600C                		extu.b	r0,r0
(1)  604/ 6000480 : 400E                		ldc	r0,sr
(1)  605/ 6000482 : E000                		mov	#0,r0
(1)  606/ 6000484 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  607/ 6000486 : 2102                		mov	r0,@r1
(1)  608/ 6000488 : D10A                		mov	#_sysreg+comm12,r1	; Clear our comm
(1)  609/ 600048A : 2101                		mov.w	r0,@r1
(1)  610/ 600048C : 912C                		mov.w	#$FE80,r1		; $FFFFFE80
(1)  611/ 600048E : 902E                		mov.w	#$A518,r0		; Disable Watchdog
(1)  612/ 6000490 : 2101                		mov.w	r0,@r1
(1)  613/ 6000492 : DF11                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  614/ 6000494 : D011                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  615/ 6000496 : 2F02                		mov	r0,@r15
(1)  616/ 6000498 : 902B                		mov.w   #$F0,r0
(1)  617/ 600049A : 1F01                		mov	r0,@(4,r15)
(1)  618/ 600049C : D108                		mov	#_sysreg,r1		; Report Master as OK
(1)  619/ 600049E : D010                		mov	#"M_OK",r0
(1)  620/ 60004A0 : 1108                		mov	r0,@(comm0,r1)
(1)  621/ 60004A2 : 002B                		rte
(1)  622/ 60004A4 : 0009                		nop
(1)  623/ 60004A6 :                     		align 4
(1)  624/ 60004A8 :                     .rv_busy:
(1)  625/ 60004A8 : 911C                		mov	#_FRT,r1		; *** MASTER ONLY _FRT ***
(1)  626/ 60004AA : 8417                		mov.b	@(7,r1),r0
(1)  627/ 60004AC : CB01                		or	#1,r0
(1)  628/ 60004AE : 8017                		mov.b	r0,@(7,r1)
(1)  629/ 60004B0 : AFFE                		bra	*
(1)  630/ 60004B2 : 0009                		nop
(1)  631/ 60004B4 :                     		align 4
(1)  632/ 60004B4 : 2000 402C 2000      		ltorg
          60004BA : 401C 2000 401A 
          60004C0 : 2000 4000 0600 
          60004C6 : 0000 2000 0000 
          60004CC : 2000 4012 2000 
          60004D2 : 4018 2000 4016 
          60004D8 : C000 07F8 0600 
          60004DE : 081A 4D5F 4F4B 
          60004E4 : FE10 44E0 FE80 
          60004EA : 5A18 A538 A518 
          60004F0 : 44E5 00F0          
(1)  633/ 60004F4 :                     
(1)  634/ 60004F4 :                     ; =================================================================
(1)  635/ 60004F4 :                     ; ------------------------------------------------
(1)  636/ 60004F4 :                     ; Slave | Unused Interrupt
(1)  637/ 60004F4 :                     ; ------------------------------------------------
(1)  638/ 60004F4 :                     
(1)  639/ 60004F4 :                     		align 4
(1)  640/ 60004F4 :                     s_irq_bad:
(1)  641/ 60004F4 : 000B                		rts
(1)  642/ 60004F6 : 0009                		nop
(1)  643/ 60004F8 :                     		align 4
(1)  644/ 60004F8 :                     
(1)  645/ 60004F8 :                     ; =================================================================
(1)  646/ 60004F8 :                     ; ------------------------------------------------
(1)  647/ 60004F8 :                     ; Slave | Watchdog
(1)  648/ 60004F8 :                     ; ------------------------------------------------
(1)  649/ 60004F8 :                     
(1)  650/ 60004F8 :                     s_irq_wdg:
(1)  651/ 60004F8 : 910A                		mov	#_FRT,r1
(1)  652/ 60004FA : 8417                		mov.b	@(7,r1),r0
(1)  653/ 60004FC : CA02                		xor	#2,r0
(1)  654/ 60004FE : 8017                		mov.b	r0,@(7,r1)
(1)  655/ 6000500 : 000B                		rts
(1)  656/ 6000502 : 0009                		nop
(1)  657/ 6000504 :                     		align 4
(1)  658/ 6000504 :                     
(1)  659/ 6000504 :                     ; =================================================================
(1)  660/ 6000504 :                     ; ------------------------------------------------
(1)  661/ 6000504 :                     ; Slave | DMA Exit
(1)  662/ 6000504 :                     ; ------------------------------------------------
(1)  663/ 6000504 :                     
(1)  664/ 6000504 :                     		align 4
(1)  665/ 6000504 :                     s_irq_dma:
(1)  666/ 6000504 : 9104                		mov	#_FRT,r1
(1)  667/ 6000506 : 8417                		mov.b	@(7,r1),r0
(1)  668/ 6000508 : CA02                		xor	#2,r0
(1)  669/ 600050A : 8017                		mov.b	r0,@(7,r1)
(1)  670/ 600050C : 000B                		rts
(1)  671/ 600050E : 0009                		nop
(1)  672/ 6000510 :                     		align 4
(1)  673/ 6000510 :                     
(1)  674/ 6000510 :                     ; =================================================================
(1)  675/ 6000510 :                     ; ------------------------------------------------
(1)  676/ 6000510 :                     ; Slave | PWM Interrupt
(1)  677/ 6000510 :                     ; ------------------------------------------------
(1)  678/ 6000510 :                     
(1)  679/ 6000510 :                     ; located on cache/cache_slv.asm
(1)  680/ 6000510 :                     ;
(1)  681/ 6000510 :                     ; s_irq_pwm:
(1)  682/ 6000510 : FE10                		ltorg	; Save literals
(1)  683/ 6000512 :                     
(1)  684/ 6000512 :                     ; =================================================================
(1)  685/ 6000512 :                     ; ------------------------------------------------
(1)  686/ 6000512 :                     ; Slave | CMD Interrupt
(1)  687/ 6000512 :                     ; ------------------------------------------------
(1)  688/ 6000512 :                     
(1)  689/ 6000512 :                     		align 4
(1)  690/ 6000514 :                     s_irq_cmd:
(1)  691/ 6000514 : 911C                		mov	#_FRT,r1
(1)  692/ 6000516 : 8417                		mov.b	@(7,r1),r0
(1)  693/ 6000518 : CA02                		xor	#2,r0
(1)  694/ 600051A : 8017                		mov.b	r0,@(7,r1)
(1)  695/ 600051C : D10A                		mov	#_sysreg+cmdintclr,r1
(1)  696/ 600051E : 2101                		mov.w	r0,@r1
(1)  697/ 6000520 : 6011                		mov.w	@r1,r0
(1)  698/ 6000522 :                     	; --------------------------------
(1)  699/ 6000522 : 2F26                		mov	r2,@-r15
(1)  700/ 6000524 : 2F36                		mov	r3,@-r15
(1)  701/ 6000526 : 2F46                		mov	r4,@-r15
(1)  702/ 6000528 : 2F56                		mov	r5,@-r15
(1)  703/ 600052A : 2F66                		mov	r6,@-r15
(1)  704/ 600052C : 2F76                		mov	r7,@-r15
(1)  705/ 600052E : 2F86                		mov	r8,@-r15
(1)  706/ 6000530 : 4F22                		sts	pr,@-r15
(1)  707/ 6000532 : D106                		mov	#_sysreg+comm14,r1
(1)  708/ 6000534 : 6010                		mov.b	@r1,r0
(1)  709/ 6000536 : C90F                		and	#%00001111,r0
(1)  710/ 6000538 : 4008                		shll2	r0
(1)  711/ 600053A : 6103                		mov	r0,r1
(1)  712/ 600053C : C705                		mova	scmd_tasks,r0
(1)  713/ 600053E : 301C                		add	r1,r0
(1)  714/ 6000540 : 6102                		mov	@r0,r1
(1)  715/ 6000542 : 412B                		jmp	@r1
(1)  716/ 6000544 : 0009                		nop
(1)  717/ 6000546 :                     		align 4
(1)  718/ 6000548 : 2000 401A 2000      		ltorg
          600054E : 402E FE10          
(1)  719/ 6000552 :                     
(1)  720/ 6000552 :                     ; --------------------------------
(1)  721/ 6000552 :                     
(1)  722/ 6000552 :                     		align 4
(1)  723/ 6000554 :                     scmd_tasks:
(1)  724/ 6000554 : 0600 0564           		dc.l .scmd_task00	; NULL
(1)  725/ 6000558 : 0600 05F4           		dc.l .scmd_task01	; PWM table transfer and update
(1)  726/ 600055C : 0600 0568           		dc.l .scmd_task02	; PWM RV backup
(1)  727/ 6000560 : 0600 05D4           		dc.l .scmd_task03	; PWM RV restore
(1)  728/ 6000564 :                     
(1)  729/ 6000564 :                     ; --------------------------------
(1)  730/ 6000564 :                     ; Task $00
(1)  731/ 6000564 :                     ; --------------------------------
(1)  732/ 6000564 :                     
(1)  733/ 6000564 :                     .scmd_task00:
(1)  734/ 6000564 : A0CB                		bra	.exit_scmd
(1)  735/ 6000566 : 0009                		nop
(1)  736/ 6000568 :                     
(1)  737/ 6000568 :                     ; --------------------------------
(1)  738/ 6000568 :                     ; Task $02
(1)  739/ 6000568 :                     ; --------------------------------
(1)  740/ 6000568 :                     
(1)  741/ 6000568 :                     .scmd_task02:
(1)  742/ 6000568 : D46B                		mov	#RAM_Mars_PwmBackup,r4
(1)  743/ 600056A : D86C                		mov	#RAM_Mars_PwmList,r8
(1)  744/ 600056C : 97E6                		mov	#MAX_PWMCHNL,r7
(1)  745/ 600056E : 95E6                		mov	#$200,r5
(1)  746/ 6000570 :                     .next_one:
(1)  747/ 6000570 : 5080                		mov	@(marspwm_enbl,r8),r0	; PWM active?
(1)  748/ 6000572 : C880                		tst	#$80,r0
(1)  749/ 6000574 : 8926                		bt	.no_chnl
(1)  750/ 6000576 :                     
(1)  751/ 6000576 : 5182                		mov	@(marspwm_bank,r8),r1
(1)  752/ 6000578 : D069                		mov	#CS1,r0
(1)  753/ 600057A : 3100                		cmp/eq	r0,r1
(1)  754/ 600057C : 8B22                		bf	.no_chnl
(1)  755/ 600057E : 5081                		mov	@(marspwm_read,r8),r0
(1)  756/ 6000580 : 6603                		mov	r0,r6			; Save last read
(1)  757/ 6000582 : 4019                		shlr8	r0
(1)  758/ 6000584 : 201B                		or	r1,r0
(1)  759/ 6000586 : E1FC                		mov	#-4,r1
(1)  760/ 6000588 : 2019                		and	r1,r0
(1)  761/ 600058A : 6103                		mov	r0,r1
(1)  762/ 600058C : 6243                		mov	r4,r2
(1)  763/ 600058E : 6353                		mov	r5,r3
(1)  764/ 6000590 : 4309                		shlr2	r3			; /4
(1)  765/ 6000592 : 4301                		shlr	r3			; /2
(1)  766/ 6000594 :                     .copy_data:
(1)  767/ 6000594 : 6016                		mov	@r1+,r0
(1)  768/ 6000596 : 2202                		mov	r0,@r2
(1)  769/ 6000598 : 7204                		add	#4,r2
(1)  770/ 600059A : 6016                		mov	@r1+,r0
(1)  771/ 600059C : 2202                		mov	r0,@r2
(1)  772/ 600059E : 4310                		dt	r3
(1)  773/ 60005A0 : 8FF8                		bf/s	.copy_data
(1)  774/ 60005A2 : 7204                		add	#4,r2
(1)  775/ 60005A4 : 5381                		mov	@(marspwm_read,r8),r3
(1)  776/ 60005A6 : 6063                		mov	r6,r0
(1)  777/ 60005A8 : 4019                		shlr8	r0
(1)  778/ 60005AA : C903                		and	#%11,r0
(1)  779/ 60005AC : 4018                		shll8	r0
(1)  780/ 60005AE : E2FC                		mov	#-4,r2
(1)  781/ 60005B0 : 4218                		shll8	r2
(1)  782/ 60005B2 : 3368                		sub	r6,r3
(1)  783/ 60005B4 : 2329                		and	r2,r3
(1)  784/ 60005B6 : 330C                		add	r0,r3
(1)  785/ 60005B8 : 1839                		mov	r3,@(marspwm_cread,r8)
(1)  786/ 60005BA :                     
(1)  787/ 60005BA : 5080                		mov	@(marspwm_enbl,r8),r0	; Playback stopped here?
(1)  788/ 60005BC : C880                		tst	#%10000000,r0
(1)  789/ 60005BE : 8901                		bt	.no_chnl
(1)  790/ 60005C0 : CB40                		or	#%01000000,r0
(1)  791/ 60005C2 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  792/ 60005C4 :                     .no_chnl:
(1)  793/ 60005C4 : 90BC                		mov	#marspwm_len,r0
(1)  794/ 60005C6 : 380C                		add	r0,r8
(1)  795/ 60005C8 : 4710                		dt	r7
(1)  796/ 60005CA : 8FD1                		bf/s	.next_one
(1)  797/ 60005CC : 345C                		add	r5,r4
(1)  798/ 60005CE :                     
(1)  799/ 60005CE : A096                		bra	.exit_scmd
(1)  800/ 60005D0 : 0009                		nop
(1)  801/ 60005D2 :                     		align 4
(1)  802/ 60005D4 :                     
(1)  803/ 60005D4 :                     ; 		mov	#_DMASOURCE0,r7			; r4 - DMA base register
(1)  804/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  805/ 60005D4 :                     ; 		mov	#%0101000011100000,r0		; Transfer mode + DMA enable OFF
(1)  806/ 60005D4 :                     ; 		mov	r0,@($C,r7)
(1)  807/ 60005D4 :                     ; 		mov	r1,@r7				; Source point: DREQ FIFO
(1)  808/ 60005D4 :                     ; 		mov	r2,@(4,r7)			; Set Destination
(1)  809/ 60005D4 :                     ; 		mov	r3,@(8,r7)			; Length set by 68k
(1)  810/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  811/ 60005D4 :                     ; 		mov	#%0101000011100000|1,r0		; Transfer mode + DMA enable
(1)  812/ 60005D4 :                     ; 		mov	r0,@($C,r7)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  813/ 60005D4 :                     ; .wait_dma:
(1)  814/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  815/ 60005D4 :                     ; 		tst	#%10,r0
(1)  816/ 60005D4 :                     ; 		bt	.wait_dma
(1)  817/ 60005D4 :                     ; 		mov	@($C,r7),r0			; Dummy read
(1)  818/ 60005D4 :                     ; 		mov	#%0101000011100000,r0
(1)  819/ 60005D4 :                     ; 		mov	r0,@($C,r7)
(1)  820/ 60005D4 :                     
(1)  821/ 60005D4 :                     ; --------------------------------
(1)  822/ 60005D4 :                     ; Task $03
(1)  823/ 60005D4 :                     ; --------------------------------
(1)  824/ 60005D4 :                     
(1)  825/ 60005D4 :                     .scmd_task03:
(1)  826/ 60005D4 : D853                		mov	#RAM_Mars_PwmList,r8
(1)  827/ 60005D6 : 97B4                		mov	#MAX_PWMCHNL,r7
(1)  828/ 60005D8 : 96B4                		mov	#marspwm_len,r6
(1)  829/ 60005DA :                     .next_out:
(1)  830/ 60005DA : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  831/ 60005DC : C880                		tst	#%10000000,r0
(1)  832/ 60005DE : 8904                		bt	.no_chnlo
(1)  833/ 60005E0 : C840                		tst	#%01000000,r0
(1)  834/ 60005E2 : 8902                		bt	.no_chnlo
(1)  835/ 60005E4 : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  836/ 60005E6 : C9BF                		and	#%10111111,r0
(1)  837/ 60005E8 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  838/ 60005EA :                     .no_chnlo:
(1)  839/ 60005EA : 4710                		dt	r7
(1)  840/ 60005EC : 8FF5                		bf/s	.next_out
(1)  841/ 60005EE : 386C                		add	r6,r8
(1)  842/ 60005F0 : A085                		bra	.exit_scmd
(1)  843/ 60005F2 : 0009                		nop
(1)  844/ 60005F4 :                     		align 4
(1)  845/ 60005F4 :                     
(1)  846/ 60005F4 :                     ; --------------------------------
(1)  847/ 60005F4 :                     ; Task $01
(1)  848/ 60005F4 :                     ; --------------------------------
(1)  849/ 60005F4 :                     
(1)  850/ 60005F4 :                     .scmd_task01:
(1)  851/ 60005F4 : D14C                		mov	#_sysreg+comm8,r1		; Input
(1)  852/ 60005F6 : D24D                		mov	#RAM_Mars_PwmTable,r2		; Output
(1)  853/ 60005F8 : D34D                		mov	#_sysreg+comm14,r3		; comm
(1)  854/ 60005FA : 0009                		nop
(1)  855/ 60005FC :                     .wait_1:
(1)  856/ 60005FC : 6030                		mov.b	@r3,r0
(1)  857/ 60005FE : C9C0                		and	#%11000000,r0
(1)  858/ 6000600 : C880                		tst	#%10000000,r0			; LOCK exit?
(1)  859/ 6000602 : 8908                		bt	.exit_c
(1)  860/ 6000604 : C840                		tst	#%01000000,r0			; Wait PASS
(1)  861/ 6000606 : 89F9                		bt	.wait_1
(1)  862/ 6000608 :                     .copy_1:
(1)  863/ 6000608 : 6012                		mov	@r1,r0				; Copy full longword
(1)  864/ 600060A : 2202                		mov	r0,@r2
(1)  865/ 600060C : 7204                		add	#4,r2				; Increment table pos
(1)  866/ 600060E : 6030                		mov.b	@r3,r0
(1)  867/ 6000610 : C9BF                		and	#%10111111,r0
(1)  868/ 6000612 : AFF3                		bra	.wait_1
(1)  869/ 6000614 : 2300                		mov.b	r0,@r3				; Clear PASS bit, Z80 loops
(1)  870/ 6000616 :                     .exit_c:
(1)  871/ 6000616 :                     
(1)  872/ 6000616 :                     ; --------------------------------
(1)  873/ 6000616 :                     ; Process table changes
(1)  874/ 6000616 :                     ; --------------------------------
(1)  875/ 6000616 :                     
(1)  876/ 6000616 :                     .proc_pwm:
(1)  877/ 6000616 : D847                		mov	#RAM_Mars_PwmTable,r8		; Input
(1)  878/ 6000618 : D747                		mov	#RAM_Mars_PwmList,r7		; Output
(1)  879/ 600061A : 9694                		mov	#MAX_PWMCHNL,r6
(1)  880/ 600061C :                     .next_chnl:
(1)  881/ 600061C : 6383                		mov	r8,r3				; r3 - current table column
(1)  882/ 600061E : 6030                		mov.b	@r3,r0				; r0: %kfo o-on f-off k-cut
(1)  883/ 6000620 : C91F                		and	#%00011111,r0
(1)  884/ 6000622 : 2008                		tst	r0,r0
(1)  885/ 6000624 : 8966                		bt	.no_chng
(1)  886/ 6000626 :                     .no_keycut:
(1)  887/ 6000626 : C802                		tst	#%00000010,r0
(1)  888/ 6000628 : 8B62                		bf	.is_keycut
(1)  889/ 600062A : C804                		tst	#%00000100,r0
(1)  890/ 600062C : 8B60                		bf	.is_keycut
(1)  891/ 600062E : C801                		tst	#%00000001,r0
(1)  892/ 6000630 : 8960                		bt	.no_chng
(1)  893/ 6000632 :                     
(1)  894/ 6000632 : C808                		tst	#%00001000,r0
(1)  895/ 6000634 : 8910                		bt	.no_pitchbnd
(1)  896/ 6000636 : 5070                		mov	@(marspwm_enbl,r7),r0
(1)  897/ 6000638 : C880                		tst	#$80,r0
(1)  898/ 600063A : 895B                		bt	.no_chng
(1)  899/ 600063C :                     ; 		mov	#0,r0
(1)  900/ 600063C :                     ; 		mov	r0,@(marspwm_enbl,r7)
(1)  901/ 600063C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  902/ 600063E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  903/ 6000640 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  904/ 6000642 : C9FC                		and	#%11111100,r0
(1)  905/ 6000644 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  906/ 6000646 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  907/ 6000648 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  908/ 600064A : 611C                		extu.b	r1,r1
(1)  909/ 600064C : 6023                		mov	r2,r0
(1)  910/ 600064E : C903                		and	#%11,r0
(1)  911/ 6000650 : 4018                		shll8	r0
(1)  912/ 6000652 : 201B                		or	r1,r0
(1)  913/ 6000654 : A04E                		bra	.no_chng
(1)  914/ 6000656 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  915/ 6000658 :                     
(1)  916/ 6000658 :                     .no_pitchbnd:
(1)  917/ 6000658 : E000                		mov	#0,r0
(1)  918/ 600065A : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  919/ 600065C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  920/ 600065E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  921/ 6000660 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  922/ 6000662 : C9FC                		and	#%11111100,r0
(1)  923/ 6000664 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  924/ 6000666 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  925/ 6000668 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  926/ 600066A : 611C                		extu.b	r1,r1
(1)  927/ 600066C : 6023                		mov	r2,r0
(1)  928/ 600066E : C903                		and	#%11,r0
(1)  929/ 6000670 : 4018                		shll8	r0
(1)  930/ 6000672 : 201B                		or	r1,r0
(1)  931/ 6000674 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  932/ 6000676 : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  933/ 6000678 : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  934/ 600067A : 6103                		mov	r0,r1			; Save aaaa-address
(1)  935/ 600067C : C9F0                		and	#%11110000,r0
(1)  936/ 600067E : 4009                		shlr2	r0
(1)  937/ 6000680 : 4009                		shlr2	r0
(1)  938/ 6000682 : CB80                		or	#$80,r0			; Set as Enabled
(1)  939/ 6000684 : 6403                		mov	r0,r4
(1)  940/ 6000686 : 6013                		mov	r1,r0
(1)  941/ 6000688 : C90F                		and	#%00001111,r0
(1)  942/ 600068A : 4028                		shll16	r0
(1)  943/ 600068C : 4018                		shll8	r0
(1)  944/ 600068E : 1702                		mov	r0,@(marspwm_bank,r7)
(1)  945/ 6000690 : 6103                		mov	r0,r1			; r1 - BANK
(1)  946/ 6000692 : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  947/ 6000694 : 6030                		mov.b	@r3,r0
(1)  948/ 6000696 : 600C                		extu.b	r0,r0
(1)  949/ 6000698 : 4028                		shll16	r0
(1)  950/ 600069A : 6203                		mov	r0,r2			; r2: $xx0000
(1)  951/ 600069C : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  952/ 600069E : 6030                		mov.b	@r3,r0
(1)  953/ 60006A0 : 600C                		extu.b	r0,r0
(1)  954/ 60006A2 : 4018                		shll8	r0
(1)  955/ 60006A4 : 220B                		or	r0,r2			; r2: $xxxx00
(1)  956/ 60006A6 : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  957/ 60006A8 : 6030                		mov.b	@r3,r0
(1)  958/ 60006AA : 600C                		extu.b	r0,r0
(1)  959/ 60006AC : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  960/ 60006AE : 310C                		add	r0,r1
(1)  961/ 60006B0 :                     	; Read LEN and LOOP
(1)  962/ 60006B0 : 6014                		mov.b	@r1+,r0
(1)  963/ 60006B2 : 630C                		extu.b	r0,r3
(1)  964/ 60006B4 : 6214                		mov.b	@r1+,r2
(1)  965/ 60006B6 : 622C                		extu.b	r2,r2
(1)  966/ 60006B8 : 4218                		shll8	r2
(1)  967/ 60006BA : 232B                		or	r2,r3
(1)  968/ 60006BC : 6214                		mov.b	@r1+,r2
(1)  969/ 60006BE : 622C                		extu.b	r2,r2
(1)  970/ 60006C0 : 4228                		shll16	r2
(1)  971/ 60006C2 : 232B                		or	r2,r3
(1)  972/ 60006C4 : 6014                		mov.b	@r1+,r0
(1)  973/ 60006C6 : 600C                		extu.b	r0,r0
(1)  974/ 60006C8 : 6214                		mov.b	@r1+,r2
(1)  975/ 60006CA : 622C                		extu.b	r2,r2
(1)  976/ 60006CC : 4218                		shll8	r2
(1)  977/ 60006CE : 202B                		or	r2,r0
(1)  978/ 60006D0 : 6214                		mov.b	@r1+,r2
(1)  979/ 60006D2 : 622C                		extu.b	r2,r2
(1)  980/ 60006D4 : 4228                		shll16	r2
(1)  981/ 60006D6 : 202B                		or	r2,r0
(1)  982/ 60006D8 : 4018                		shll8	r0
(1)  983/ 60006DA : 1705                		mov	r0,@(marspwm_loop,r7)
(1)  984/ 60006DC : 6013                		mov	r1,r0
(1)  985/ 60006DE : 4018                		shll8	r0
(1)  986/ 60006E0 : 1703                		mov	r0,@(marspwm_start,r7)
(1)  987/ 60006E2 : 1701                		mov	r0,@(marspwm_read,r7)
(1)  988/ 60006E4 : 6013                		mov	r1,r0
(1)  989/ 60006E6 : 303C                		add	r3,r0
(1)  990/ 60006E8 : 4018                		shll8	r0
(1)  991/ 60006EA : 1704                		mov	r0,@(marspwm_length,r7)
(1)  992/ 60006EC : A002                		bra	.no_chng
(1)  993/ 60006EE : 1740                		mov	r4,@(marspwm_enbl,r7)
(1)  994/ 60006F0 :                     .is_keycut:
(1)  995/ 60006F0 : E000                		mov	#0,r0
(1)  996/ 60006F2 : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  997/ 60006F4 :                     .no_chng:
(1)  998/ 60006F4 : 9028                		mov	#marspwm_len,r0
(1)  999/ 60006F6 : 370C                		add	r0,r7
(1) 1000/ 60006F8 : 4610                		dt	r6
(1) 1001/ 60006FA : 8F8F                		bf/s	.next_chnl
(1) 1002/ 60006FC : 7801                		add	#1,r8
(1) 1003/ 60006FE :                     .exit_scmd:
(1) 1004/ 60006FE :                     	; --------------------------------
(1) 1005/ 60006FE : D10C                		mov	#_sysreg+comm14,r1	; Clear CMD task
(1) 1006/ 6000700 : E000                		mov	#0,r0
(1) 1007/ 6000702 : 2100                		mov.b	r0,@r1
(1) 1008/ 6000704 : 4F26                		lds	@r15+,pr
(1) 1009/ 6000706 : 68F6                		mov	@r15+,r8
(1) 1010/ 6000708 : 67F6                		mov	@r15+,r7
(1) 1011/ 600070A : 66F6                		mov	@r15+,r6
(1) 1012/ 600070C : 65F6                		mov	@r15+,r5
(1) 1013/ 600070E : 64F6                		mov	@r15+,r4
(1) 1014/ 6000710 : 63F6                		mov	@r15+,r3
(1) 1015/ 6000712 : 62F6                		mov	@r15+,r2
(1) 1016/ 6000714 : 000B                		rts
(1) 1017/ 6000716 : 0009                		nop
(1) 1018/ 6000718 :                     		align 4
(1) 1019/ 6000718 : 2600 6290 2600      		ltorg
          600071E : 6150 0200 0000 
          6000724 : 2600 6150 2000 
          600072A : 4028 2600 6110 
          6000730 : 2000 402E 2600 
          6000736 : 6110 2600 6150 
          600073C : 0008 0200 0028 
          6000742 : 0008 0028 0008 
          6000748 : 0028             
(1) 1020/ 600074A :                     
(1) 1021/ 600074A :                     ; =================================================================
(1) 1022/ 600074A :                     ; ------------------------------------------------
(1) 1023/ 600074A :                     ; Slave | HBlank
(1) 1024/ 600074A :                     ; ------------------------------------------------
(1) 1025/ 600074A :                     
(1) 1026/ 600074A :                     s_irq_h:
(1) 1027/ 600074A : 913B                		mov	#_FRT,r1
(1) 1028/ 600074C : 8417                		mov.b	@(7,r1),r0
(1) 1029/ 600074E : CA02                		xor	#2,r0
(1) 1030/ 6000750 : 8017                		mov.b	r0,@(7,r1)
(1) 1031/ 6000752 : D115                		mov	#_sysreg+hintclr,r1
(1) 1032/ 6000754 : 2101                		mov.w	r0,@r1
(1) 1033/ 6000756 : 000B                		rts
(1) 1034/ 6000758 : 0009                		nop
(1) 1035/ 600075A :                     		align 4
(1) 1036/ 600075C :                     
(1) 1037/ 600075C :                     ; =================================================================
(1) 1038/ 600075C :                     ; ------------------------------------------------
(1) 1039/ 600075C :                     ; Slave | VBlank
(1) 1040/ 600075C :                     ; ------------------------------------------------
(1) 1041/ 600075C :                     
(1) 1042/ 600075C :                     s_irq_v:
(1) 1043/ 600075C : 9132                		mov	#_FRT,r1
(1) 1044/ 600075E : 8417                		mov.b	@(7,r1),r0
(1) 1045/ 6000760 : CA02                		xor	#2,r0
(1) 1046/ 6000762 : 8017                		mov.b	r0,@(7,r1)
(1) 1047/ 6000764 : D111                		mov	#_sysreg+vintclr,r1
(1) 1048/ 6000766 : 2101                		mov.w	r0,@r1
(1) 1049/ 6000768 : 000B                		rts
(1) 1050/ 600076A : 0009                		nop
(1) 1051/ 600076C :                     		align 4
(1) 1052/ 600076C :                     
(1) 1053/ 600076C :                     ; =================================================================
(1) 1054/ 600076C :                     ; ------------------------------------------------
(1) 1055/ 600076C :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1) 1056/ 600076C :                     ; ------------------------------------------------
(1) 1057/ 600076C :                     
(1) 1058/ 600076C :                     s_irq_vres:
(1) 1059/ 600076C : D110                		mov	#_sysreg,r1
(1) 1060/ 600076E : 60F3                		mov	r15,r0
(1) 1061/ 6000770 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1062/ 6000772 : 8513                		mov.w	@(dreqctl,r1),r0
(1) 1063/ 6000774 : C801                		tst	#1,r0
(1) 1064/ 6000776 : 8B15                		bf	.rv_busy
(1) 1065/ 6000778 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1066/ 600077A : 600C                		extu.b	r0,r0
(1) 1067/ 600077C : 400E                		ldc	r0,sr
(1) 1068/ 600077E : E000                		mov	#0,r0
(1) 1069/ 6000780 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1) 1070/ 6000782 : 2102                		mov	r0,@r1
(1) 1071/ 6000784 : D10B                		mov	#_sysreg+comm14,r1	; Clear our comm
(1) 1072/ 6000786 : 2101                		mov.w	r0,@r1
(1) 1073/ 6000788 : 911D                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1074/ 600078A : 901D                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1075/ 600078C : 2101                		mov.w	r0,@r1
(1) 1076/ 600078E : DF0A                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1) 1077/ 6000790 : D00A                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1) 1078/ 6000792 : 2F02                		mov	r0,@r15
(1) 1079/ 6000794 : 9019                		mov.w   #$F0,r0
(1) 1080/ 6000796 : 1F01                		mov	r0,@(4,r15)
(1) 1081/ 6000798 : D105                		mov	#_sysreg,r1
(1) 1082/ 600079A : D009                		mov	#"S_OK",r0		; Report Slave as OK
(1) 1083/ 600079C : 1109                		mov	r0,@(comm4,r1)
(1) 1084/ 600079E : 002B                		rte
(1) 1085/ 60007A0 : 0009                		nop
(1) 1086/ 60007A2 :                     		align 4
(1) 1087/ 60007A4 :                     .rv_busy:
(1) 1088/ 60007A4 : AFFE                		bra	*
(1) 1089/ 60007A6 : 0009                		nop
(1) 1090/ 60007A8 :                     		align 4
(1) 1091/ 60007A8 :                     
(1) 1092/ 60007A8 : 2000 4018 2000      		ltorg		; Save literals
          60007AE : 4016 2000 4000 
          60007B4 : 2000 402E C000 
          60007BA : 07F8 0600 0EC6 
          60007C0 : 535F 4F4B FE10 
          60007C6 : FE80 A518 00F0    
(1) 1093/ 60007CC :                     
(1) 1094/ 60007CC :                     ; ====================================================================
(1) 1095/ 60007CC :                     ; ----------------------------------------------------------------
(1) 1096/ 60007CC :                     ; Master entry point
(1) 1097/ 60007CC :                     ; ----------------------------------------------------------------
(1) 1098/ 60007CC :                     
(1) 1099/ 60007CC :                     		align 4
(1) 1100/ 60007CC :                     SH2_M_Entry:
(1) 1101/ 60007CC : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1102/ 60007CE : 600C                		extu.b	r0,r0
(1) 1103/ 60007D0 : 400E                		ldc	r0,sr
(1) 1104/ 60007D2 : DF1E                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1105/ 60007D4 : D01E                		mov	#SH2_Master,r0			; Reset vbr
(1) 1106/ 60007D6 : 402E                		ldc	r0,vbr
(1) 1107/ 60007D8 : 9146                		mov.l	#_FRT,r1
(1) 1108/ 60007DA : E000                		mov	#$00,r0
(1) 1109/ 60007DC : 8010                		mov.b	r0,@(0,r1)
(1) 1110/ 60007DE : E0E2                		mov.b	#$E2,r0
(1) 1111/ 60007E0 : 8017                		mov.b	r0,@(7,r1)
(1) 1112/ 60007E2 : E000                		mov	#$00,r0
(1) 1113/ 60007E4 : 8014                		mov.b	r0,@(4,r1)
(1) 1114/ 60007E6 : E001                		mov	#$01,r0
(1) 1115/ 60007E8 : 8015                		mov.b	r0,@(5,r1)
(1) 1116/ 60007EA : E000                		mov	#$00,r0
(1) 1117/ 60007EC : 8016                		mov.b	r0,@(6,r1)
(1) 1118/ 60007EE : E001                		mov	#$01,r0
(1) 1119/ 60007F0 : 8011                		mov.b	r0,@(1,r1)
(1) 1120/ 60007F2 : E000                		mov	#$00,r0
(1) 1121/ 60007F4 : 8013                		mov.b	r0,@(3,r1)
(1) 1122/ 60007F6 : 8012                		mov.b	r0,@(2,r1)
(1) 1123/ 60007F8 : E0F2                		mov.b	#$F2,r0				; ****
(1) 1124/ 60007FA : 8017                		mov.b	r0,@(7,r1)
(1) 1125/ 60007FC : E000                		mov	#0,r0
(1) 1126/ 60007FE : 8014                		mov.b	r0,@(4,r1)
(1) 1127/ 6000800 : E001                		mov	#1,r0
(1) 1128/ 6000802 : 8015                		mov.b	r0,@(5,r1)
(1) 1129/ 6000804 : E0E2                		mov.b	#$E2,r0
(1) 1130/ 6000806 : 8017                		mov.b	r0,@(7,r1)
(1) 1131/ 6000808 :                     
(1) 1132/ 6000808 :                     	; --------------------------------------------------------
(1) 1133/ 6000808 :                     	; Extra interrupt settings
(1) 1134/ 6000808 : 902F                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1135/ 600080A : 912F                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1136/ 600080C : 2011                		mov.w   r1,@r0
(1) 1137/ 600080E : 902E                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1138/ 6000810 : 912E                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1139/ 6000812 : 2011                		mov.w   r1,@r0
(1) 1140/ 6000814 : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1141/ 6000816 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1142/ 6000818 : 2012                		mov	r1,@r0
(1) 1143/ 600081A :                     	; --------------------------------------------------------
(1) 1144/ 600081A :                     	; CD32X initialization
(1) 1145/ 600081A :                     	;
(1) 1146/ 600081A :                     	; *** FUSION: Framebuffer flipping fails if
(1) 1147/ 600081A :                     	; bitmapmd is 0 ***
(1) 1148/ 600081A :                     	; --------------------------------------------------------
(1) 1203/ 600081A :                     
(1) 1204/ 600081A :                     ; ====================================================================
(1) 1205/ 600081A :                     ; ----------------------------------------------------------------
(1) 1206/ 600081A :                     ; Master MAIN code
(1) 1207/ 600081A :                     ; ----------------------------------------------------------------
(1) 1208/ 600081A :                     
(1) 1209/ 600081A :                     SH2_M_HotStart:
(1) 1210/ 600081A : D00E                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1211/ 600081C : 401E                		ldc	r0,gbr
(1) 1212/ 600081E : D00E                		mov	#RAM_Mars_DreqBuff_0,r0
(1) 1213/ 6000820 : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1214/ 6000822 : D00E                		mov	#RAM_Mars_DreqBuff_1,r0
(1) 1215/ 6000824 : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1216/ 6000826 : B419                		bsr	MarsVideo_Init
(1) 1217/ 6000828 : 0009                		nop
(1) 1218/ 600082A : B3B1                		bsr	Mars_CachePurge
(1) 1219/ 600082C : 0009                		nop
(1) 1220/ 600082E : D10C                		mov	#_sysreg,r1
(1) 1221/ 6000830 : 6011                		mov.w	@r1,r0
(1) 1222/ 6000832 : CB02                		or	#CMDIRQ_ON,r0
(1) 1223/ 6000834 : 2101                		mov.w	r0,@r1
(1) 1224/ 6000836 : D10B                		mov	#_sysreg+comm14,r1
(1) 1225/ 6000838 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1226/ 600083A : 2008                		tst	r0,r0
(1) 1227/ 600083C : 8BFC                		bf	.wait_slv
(1) 1228/ 600083E : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1229/ 6000840 : E001                		mov	#1,r0
(1) 1230/ 6000842 : 2102                		mov	r0,@r1
(1) 1231/ 6000844 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1232/ 6000846 : 400E                		ldc	r0,sr
(1) 1233/ 6000848 : A014                		bra	master_loop
(1) 1234/ 600084A : 0009                		nop
(1) 1235/ 600084C :                     		align 4
(1) 1236/ 600084C : C000 0800 0600      		ltorg
          6000852 : 0000 0600 4C70 
          6000858 : 2600 4CD0 2600 
          600085E : 56F0 2000 4000 
          6000864 : 2000 402E FE10 
          600086A : FEE2 0530 FEE4 
          6000870 : 4800             
(1) 1237/ 6000872 :                     
(1) 1238/ 6000872 :                     ; ----------------------------------------------------------------
(1) 1239/ 6000872 :                     ; MASTER CPU loop
(1) 1240/ 6000872 :                     ;
(1) 1241/ 6000872 :                     ; comm12: %BD00cccc RRdflmmm
(1) 1242/ 6000872 :                     
(1) 1243/ 6000872 :                     ; B | This CPU's BUSY bit
(1) 1244/ 6000872 :                     ; D | DREQ DMA active
(1) 1245/ 6000872 :                     ; c | CMD task number
(1) 1246/ 6000872 :                     ;
(1) 1247/ 6000872 :                     ; R | Graphics mode init bits.
(1) 1248/ 6000872 :                     ; d | DREQ-RAM flip request: Set to 1 after sending your RAM data
(1) 1249/ 6000872 :                     ; f | CPU Syncronize bit, clears if drawing finishes
(1) 1250/ 6000872 :                     ; l | Setting to skip frames (3D rendering)
(1) 1251/ 6000872 :                     ; m | Graphics mode
(1) 1252/ 6000872 :                     ; ----------------------------------------------------------------
(1) 1253/ 6000872 :                     
(1) 1254/ 6000872 :                     		align 4
(1) 1255/ 6000874 :                     master_loop:
(1) 1257/ 6000874 : D119                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1258/ 6000876 : 6010                		mov.b	@r1,r0
(1) 1259/ 6000878 : 7001                		add	#1,r0
(1) 1260/ 600087A : 2100                		mov.b	r0,@r1
(1) 1262/ 600087C :                     	; ---------------------------------------
(1) 1263/ 600087C :                     	; Flip the DREQ Read/Write points
(1) 1264/ 600087C :                     	; ---------------------------------------
(1) 1265/ 600087C :                     
(1) 1267/ 600087C :                     .pending_dreq:
(1) 1268/ 600087C : D118                		mov	#_sysreg+comm12,r1		; Wait pending DREQ DMA transfer
(1) 1269/ 600087E : 6010                		mov.b	@r1,r0
(1) 1270/ 6000880 : C840                		tst	#%01000000,r0
(1) 1271/ 6000882 : 8BFB                		bf	.pending_dreq
(1) 1273/ 6000884 : 4F03                		stc	sr,@-r15
(1) 1274/ 6000886 : E0F0                		mov.b	#$F0,r0				; Disable interrupts
(1) 1275/ 6000888 : 600C                		extu.b	r0,r0				; ** $F0
(1) 1276/ 600088A : 400E                		ldc	r0,sr
(1) 1277/ 600088C : D215                		mov	#_sysreg+comm12+1,r2
(1) 1278/ 600088E : 6020                		mov.b	@r2,r0
(1) 1279/ 6000890 : C820                		tst	#%00100000,r0
(1) 1280/ 6000892 : 8909                		bt	.keep_buff
(1) 1281/ 6000894 : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1282/ 6000896 : 6103                		mov	r0,r1
(1) 1283/ 6000898 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1284/ 600089A : 0009                		nop
(1) 1285/ 600089C : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1286/ 600089E : 6013                		mov	r1,r0
(1) 1287/ 60008A0 : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1288/ 60008A2 : 6020                		mov.b	@r2,r0
(1) 1289/ 60008A4 : C9DF                		and	#%11011111,r0
(1) 1290/ 60008A6 : 2200                		mov.b	r0,@r2
(1) 1291/ 60008A8 :                     .keep_buff:
(1) 1292/ 60008A8 : 4F07                		ldc	@r15+,sr			; Enable interrupts
(1) 1293/ 60008AA : D10E                		mov	#_sysreg+comm12+1,r1
(1) 1294/ 60008AC : 6010                		mov.b	@r1,r0
(1) 1295/ 60008AE : C9EF                		and	#%11101111,r0			; Reset DREQ sync
(1) 1296/ 60008B0 : 2100                		mov.b	r0,@r1
(1) 1297/ 60008B2 : B36D                		bsr	Mars_CachePurge			; Purge cache
(1) 1298/ 60008B4 : 0009                		nop
(1) 1299/ 60008B6 : 0009                		nop	; alignment
(1) 1300/ 60008B8 :                     	; ---------------------------------------
(1) 1301/ 60008B8 :                     	; Update SVDP in VBlank
(1) 1302/ 60008B8 :                     	; ---------------------------------------
(1) 1303/ 60008B8 : B036                		bsr	Mars_WaitVBlank
(1) 1304/ 60008BA : 0009                		nop
(1) 1305/ 60008BC :                     	; ---------------------------------------
(1) 1306/ 60008BC :                     	; Jump into a screen mode
(1) 1307/ 60008BC :                     	; ---------------------------------------
(1) 1308/ 60008BC : C70A                		mova	mstr_list,r0
(1) 1309/ 60008BE : 6103                		mov	r0,r1
(1) 1310/ 60008C0 : D207                		mov	#_sysreg+comm12,r2
(1) 1311/ 60008C2 : 0009                		nop
(1) 1312/ 60008C4 : 6021                		mov.w	@r2,r0
(1) 1313/ 60008C6 : C8C0                		tst	#%11000000,r0
(1) 1314/ 60008C8 : 8900                		bt	.non_init
(1) 1315/ 60008CA : 7104                		add	#4,r1
(1) 1316/ 60008CC :                     .non_init:
(1) 1317/ 60008CC : C907                		and	#%00000111,r0		; <-- Current limit
(1) 1318/ 60008CE : 4008                		shll2	r0
(1) 1319/ 60008D0 : 4000                		shll	r0
(1) 1320/ 60008D2 : 310C                		add	r0,r1
(1) 1321/ 60008D4 : 6012                		mov	@r1,r0
(1) 1322/ 60008D6 : 402B                		jmp	@r0
(1) 1323/ 60008D8 : 0009                		nop
(1) 1324/ 60008DA :                     		align 4
(1) 1325/ 60008DC : 2000 4020 2000      		ltorg
          60008E2 : 402C 2000 402D    
(1) 1326/ 60008E8 :                     
(1) 1327/ 60008E8 :                     ; ====================================================================
(1) 1328/ 60008E8 :                     ; ----------------------------------------------------------------
(1) 1329/ 60008E8 :                     ; MODES LIST, MAXIMUM 7
(1) 1330/ 60008E8 :                     ;
(1) 1331/ 60008E8 :                     ; Mode number $00 sets the SVDP to Genesis.
(1) 1332/ 60008E8 :                     ; ----------------------------------------------------------------
(1) 1333/ 60008E8 :                     
(1) 1334/ 60008E8 :                     		align 4
(1) 1335/ 60008E8 :                     mstr_list:
(1) 1336/ 60008E8 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          60008EE : 0940             
(1) 1337/ 60008F0 : 0600 0A58 0600      		dc.l MstrMode_2D,MstrMode_2D_i
          60008F6 : 09D8             
(1) 1338/ 60008F8 : 0600 0CA8 0600      		dc.l MstrMode_3D,MstrMode_3D_i
          60008FE : 0C20             
(1) 1339/ 6000900 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          6000906 : 0940             
(1) 1340/ 6000908 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          600090E : 0940             
(1) 1341/ 6000910 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          6000916 : 0940             
(1) 1342/ 6000918 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          600091E : 0940             
(1) 1343/ 6000920 : 0600 0940 0600      		dc.l MstrMode_0,MstrMode_0
          6000926 : 0940             
(1) 1344/ 6000928 :                     
(1) 1345/ 6000928 :                     ; ====================================================================
(1) 1346/ 6000928 :                     ; ----------------------------------------------------------------
(1) 1347/ 6000928 :                     ; Wait VBlank
(1) 1348/ 6000928 :                     ; ----------------------------------------------------------------
(1) 1349/ 6000928 :                     
(1) 1350/ 6000928 :                     		align 4
(1) 1351/ 6000928 :                     Mars_WaitVBlank:
(1) 1352/ 6000928 : DE41                		mov	#_sysreg,r14
(1) 1353/ 600092A : DD42                		mov	#_vdpreg,r13
(1) 1354/ 600092C : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1355/ 600092E : C880                  		tst	#FM,r0
(1) 1356/ 6000930 : 8904                  		bt	.svdp_locked
(1) 1357/ 6000932 : 84DA                .wait_v:	mov.b	@(vdpsts,r13),r0
(1) 1358/ 6000934 : C880                		tst	#VBLK,r0
(1) 1359/ 6000936 : 89FC                		bt	.wait_v
(1) 1360/ 6000938 : 000B                		rts
(1) 1361/ 600093A : 0009                		nop
(1) 1362/ 600093C :                     		align 4
(1) 1363/ 600093C :                     .svdp_locked:
(1) 1364/ 600093C : 000B                		rts
(1) 1365/ 600093E : 0009                		nop
(1) 1366/ 6000940 :                     		align 4
(1) 1367/ 6000940 :                     
(1) 1368/ 6000940 :                     ; ====================================================================
(1) 1369/ 6000940 :                     ; ----------------------------------------------------------------
(1) 1370/ 6000940 :                     ; Blank screen mode, NOTHING.
(1) 1371/ 6000940 :                     ;
(1) 1372/ 6000940 :                     ; Setting this mode will also give the SVDP to the Genesis,
(1) 1373/ 6000940 :                     ; CHECK FM BIT AFTER SETTING THIS MODE.
(1) 1374/ 6000940 :                     ; ----------------------------------------------------------------
(1) 1375/ 6000940 :                     
(1) 1376/ 6000940 :                     		align 4
(1) 1377/ 6000940 :                     MstrMode_0:
(1) 1378/ 6000940 : BFF2                		bsr	Mars_WaitVBlank
(1) 1379/ 6000942 : 0009                		nop
(1) 1380/ 6000944 :                     ; ---------------------------------------
(1) 1381/ 6000944 :                     ; Init
(1) 1382/ 6000944 :                     ;
(1) 1383/ 6000944 :                     ; Running from here...
(1) 1384/ 6000944 :                     ; ---------------------------------------
(1) 1385/ 6000944 : D13C                		mov	#_sysreg+comm12+1,r1
(1) 1386/ 6000946 : 6010                		mov.b	@r1,r0
(1) 1387/ 6000948 : C9C0                		and	#%11000000,r0
(1) 1388/ 600094A : 2008                		tst	r0,r0
(1) 1389/ 600094C : 8992                		bt	master_loop
(1) 1390/ 600094E : B31F                		bsr	Mars_CachePurge
(1) 1391/ 6000950 : 0009                		nop
(1) 1392/ 6000952 : 917B                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1393/ 6000954 : 907B                		mov.w   #$A518,r0
(1) 1394/ 6000956 : 2101                		mov.w   r0,@r1
(1) 1395/ 6000958 : D138                		mov	#_sysreg+comm14,r1
(1) 1396/ 600095A :                     .wait_slvn:
(1) 1397/ 600095A : 6011                		mov.w	@r1,r0
(1) 1398/ 600095C : C907                		and	#%00000111,r0			; Slave busy?
(1) 1399/ 600095E : 2008                		tst	r0,r0
(1) 1400/ 6000960 : 8BFB                		bf	.wait_slvn
(1) 1401/ 6000962 : E000                		mov	#0,r0
(1) 1402/ 6000964 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1403/ 6000966 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1404/ 6000968 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1405/ 600096A : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1406/ 600096C : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1407/ 600096E : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1408/ 6000970 : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1409/ 6000972 : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1410/ 6000974 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1411/ 6000976 : DD2F                		mov 	#_vdpreg,r13
(1) 1412/ 6000978 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1413/ 600097A : C880                  		tst	#FM,r0
(1) 1414/ 600097C : 890C                  		bt	.still_locked
(1) 1415/ 600097E : D230                		mov	#_framebuffer,r2
(1) 1416/ 6000980 : 9156                		mov	#(($20000)/4)/4,r1
(1) 1417/ 6000982 : E000                		mov	#0,r0
(1) 1418/ 6000984 :                     .clr_manual:
(1) 1419/ 6000984 :                     	rept 4-1
(1) 1420/ 6000984 :                     		mov	r0,@r2
(1) 1421/ 6000984 :                     		add	#4,r2
(1) 1422/ 6000984 :                     	endm
(1) 1420/ 6000984 : 2202                		mov	r0,@r2
(1) 1421/ 6000986 : 7204                		add	#4,r2
(1) 1420/ 6000988 : 2202                		mov	r0,@r2
(1) 1421/ 600098A : 7204                		add	#4,r2
(1) 1420/ 600098C : 2202                		mov	r0,@r2
(1) 1421/ 600098E : 7204                		add	#4,r2
(1) 1423/ 6000990 : 2202                		mov	r0,@r2
(1) 1424/ 6000992 : 4110                		dt	r1
(1) 1425/ 6000994 : 8FF6                		bf/s	.clr_manual
(1) 1426/ 6000996 : 7204                		add	#4,r2
(1) 1427/ 6000998 :                     .still_locked:
(1) 1428/ 6000998 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1429/ 600099A : CA01                		xor	#1,r0
(1) 1430/ 600099C : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1431/ 600099E : D129                		mov	#_sysreg+comm12,r1
(1) 1432/ 60009A0 : 6011                		mov.w	@r1,r0
(1) 1433/ 60009A2 : C940                		and	#%01000000,r0
(1) 1434/ 60009A4 : 2008                		tst	r0,r0
(1) 1435/ 60009A6 : 8B0A                		bf	.not_yet
(1) 1436/ 60009A8 : DE21                		mov	#_sysreg,r14
(1) 1437/ 60009AA : 9051                		mov	#FM,r0
(1) 1438/ 60009AC : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1439/ 60009AE : 0009                  		nop
(1) 1440/ 60009B0 : 0009                  		nop
(1) 1441/ 60009B2 : 0009                  		nop
(1) 1442/ 60009B4 : 0009                  		nop
(1) 1443/ 60009B6 : E000                		mov	#0,r0
(1) 1444/ 60009B8 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1445/ 60009BA : E000                		mov	#$00,r0
(1) 1446/ 60009BC : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1447/ 60009BE :                     .not_yet:
(1) 1448/ 60009BE :                     
(1) 1449/ 60009BE : A000                		bra	MstrMode_InitExit
(1) 1450/ 60009C0 : 0009                		nop
(1) 1451/ 60009C2 :                     
(1) 1452/ 60009C2 :                     ; ---------------------------------------
(1) 1453/ 60009C2 :                     ; JUMP here at the end of the
(1) 1454/ 60009C2 :                     ; Screen's INIT code.
(1) 1455/ 60009C2 :                     
(1) 1456/ 60009C2 :                     MstrMode_InitExit:
(1) 1457/ 60009C2 : D31D                		mov	#_sysreg+comm12+1,r3
(1) 1458/ 60009C4 : 6030                		mov.b	@r3,r0
(1) 1459/ 60009C6 : 6103                		mov	r0,r1
(1) 1460/ 60009C8 : 9243                		mov	#%11000000,r2
(1) 1461/ 60009CA : C93F                		and	#%00111111,r0
(1) 1462/ 60009CC : 2129                		and	r2,r1
(1) 1463/ 60009CE : 4100                		shll	r1
(1) 1464/ 60009D0 : 201B                		or	r1,r0
(1) 1465/ 60009D2 : AF4F                		bra	master_loop
(1) 1466/ 60009D4 : 2300                		mov.b	r0,@r3
(1) 1467/ 60009D6 :                     
(1) 1468/ 60009D6 :                     ; ====================================================================
(1) 1469/ 60009D6 :                     ; ----------------------------------------------------------------
(1) 1470/ 60009D6 :                     ; 256-color tiled scroll area with "Super" Sprites
(1) 1471/ 60009D6 :                     ;
(1) 1472/ 60009D6 :                     ; NOTES:
(1) 1473/ 60009D6 :                     ; - This will set SVDP permission to here.
(1) 1474/ 60009D6 :                     ; - MAXIMUM scrolling speed is 8 pixels
(1) 1475/ 60009D6 :                     ; ----------------------------------------------------------------
(1) 1476/ 60009D6 :                     
(1) 1477/ 60009D6 :                     ; ---------------------------------------
(1) 1478/ 60009D6 :                     ; Init
(1) 1479/ 60009D6 :                     ; ---------------------------------------
(1) 1480/ 60009D6 :                     
(1) 1481/ 60009D6 :                     		align 4
(1) 1482/ 60009D8 :                     MstrMode_2D_i:
(1) 1483/ 60009D8 : D11A                		mov	#_sysreg+comm12,r1
(1) 1484/ 60009DA : 6011                		mov.w	@r1,r0
(1) 1485/ 60009DC : C940                		and	#%01000000,r0
(1) 1486/ 60009DE : 2008                		tst	r0,r0
(1) 1487/ 60009E0 : 8BEF                		bf	MstrMode_InitExit
(1) 1488/ 60009E2 : B2D5                		bsr	Mars_CachePurge
(1) 1489/ 60009E4 : 0009                		nop
(1) 1490/ 60009E6 : 9131                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1491/ 60009E8 : 9031                		mov.w   #$A518,r0
(1) 1492/ 60009EA : 2101                		mov.w   r0,@r1
(1) 1493/ 60009EC : D113                		mov	#_sysreg+comm14,r1
(1) 1494/ 60009EE :                     .wait_slvn:
(1) 1495/ 60009EE : 6011                		mov.w	@r1,r0
(1) 1496/ 60009F0 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1497/ 60009F2 : 2008                		tst	r0,r0
(1) 1498/ 60009F4 : 8BFB                		bf	.wait_slvn
(1) 1499/ 60009F6 : E000                		mov	#0,r0
(1) 1500/ 60009F8 : D113                		mov 	#$C0000000,r1
(1) 1501/ 60009FA : 922B                		mov	#$600/4,r2
(1) 1502/ 60009FC :                     .clean_up:
(1) 1503/ 60009FC : 2102                		mov	r0,@r1
(1) 1504/ 60009FE : 4210                		dt	r2
(1) 1505/ 6000A00 : 8FFC                		bf/s	.clean_up
(1) 1506/ 6000A02 : 7104                		add	#4,r1
(1) 1507/ 6000A04 : DE0A                		mov	#_sysreg,r14
(1) 1508/ 6000A06 : DD0B                		mov	#_vdpreg,r13
(1) 1509/ 6000A08 : 9022                		mov	#FM,r0
(1) 1510/ 6000A0A : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1511/ 6000A0C : 9E23                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1512/ 6000A0E : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1513/ 6000A10 : 3E0C                		add	r0,r14
(1) 1514/ 6000A12 : 51E0                		mov	@(sscrl_x_pos,r14),r1
(1) 1515/ 6000A14 : 4129                		shlr16	r1
(1) 1516/ 6000A16 : 52E1                		mov	@(sscrl_y_pos,r14),r2
(1) 1517/ 6000A18 : 4229                		shlr16	r2
(1) 1518/ 6000A1A : 50E2                		mov	@(sscrl_vram,r14),r0
(1) 1519/ 6000A1C : DD05                		mov 	#_vdpreg,r13
(1) 1520/ 6000A1E : C213                		mov	r0,@(marsGbl_Scrl_Vram,gbr)
(1) 1521/ 6000A20 : 602F                		exts.w	r2,r0
(1) 1522/ 6000A22 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1523/ 6000A24 : 601F                		exts.w	r1,r0
(1) 1524/ 6000A26 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1525/ 6000A28 : E001                		mov	#1,r0
(1) 1526/ 6000A2A : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1527/ 6000A2C :                     ; 		add	#1,r0
(1) 1528/ 6000A2C :                     ; 		mov.w	r0,@(marsGbl_DrawAll,gbr)
(1) 1529/ 6000A2C : AFC9                		bra	MstrMode_InitExit
(1) 1530/ 6000A2E : 0009                		nop
(1) 1531/ 6000A30 :                     		align 4
(1) 1532/ 6000A30 : 2000 4000 2000      		ltorg
          6000A36 : 4100 2000 402D 
          6000A3C : 2000 402E 2400 
          6000A42 : 0000 2000 402C 
          6000A48 : C000 0000 FE80 
          6000A4E : A518 0080 00C0 
          6000A54 : 0180 0200          
(1) 1533/ 6000A58 :                     
(1) 1534/ 6000A58 :                     ; ---------------------------------------
(1) 1535/ 6000A58 :                     ; Loop
(1) 1536/ 6000A58 :                     ; ---------------------------------------
(1) 1537/ 6000A58 :                     
(1) 1538/ 6000A58 :                     		align 4
(1) 1539/ 6000A58 :                     MstrMode_2D:
(1) 1540/ 6000A58 :                     	; ---------------------------------------
(1) 1541/ 6000A58 :                     	; *** We are in VBLANK ***
(1) 1542/ 6000A58 : DE67                		mov	#_sysreg,r14			; r14 - _sysreg
(1) 1543/ 6000A5A : DD68                		mov	#_vdpreg,r13			; r13 - _vdpreg
(1) 1544/ 6000A5C : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1545/ 6000A5E : C901                		and	#1,r0
(1) 1546/ 6000A60 : 80DB                		mov.b	r0,@(framectl,r13)		; Set current framebuffer
(1) 1547/ 6000A62 : C501                 		mov.w	@(marsGbl_XShift,gbr),r0
(1) 1548/ 6000A64 : C901                		and	#1,r0
(1) 1549/ 6000A66 : 81D1                		mov.w	r0,@(shift,r13)			; Set SHIFT bit (Xpos & 1)
(1) 1550/ 6000A68 : B0D6                		bsr	g_Mstr_CopyPalette		; Copy 256-color palette
(1) 1551/ 6000A6A : 0009                		nop
(1) 1552/ 6000A6C :                     	; ---------------------------------------
(1) 1553/ 6000A6C :                     	; Set scrolling varaibles
(1) 1554/ 6000A6C : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1555/ 6000A6E : 9ECB                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1556/ 6000A70 : 3E0C                		add	r0,r14
(1) 1557/ 6000A72 : E100                		mov	#0,r1				; X increment
(1) 1558/ 6000A74 : E200                		mov	#0,r2				; Y increment
(1) 1559/ 6000A76 : E302                		mov	#2,r3				; Drawflags counter
(1) 1560/ 6000A78 : 56E0                		mov	@(sscrl_x_pos,r14),r6
(1) 1561/ 6000A7A : 94C6                		mov	#SET_MSCRLSIZE/2,r4		; Scroll speed limit
(1) 1562/ 6000A7C : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1563/ 6000A7E : 95C5                		mov	#-SET_MSCRLSIZE,r5		; -block_size
(1) 1564/ 6000A80 : 58E1                		mov	@(sscrl_y_pos,r14),r8
(1) 1565/ 6000A82 : 6703                		mov	r0,r7
(1) 1566/ 6000A84 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1567/ 6000A86 : 6903                		mov	r0,r9
(1) 1568/ 6000A88 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1569/ 6000A8A : 6073                		mov	r7,r0
(1) 1570/ 6000A8C : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1571/ 6000A8E : 4629                		shlr16	r6				; X >> 16
(1) 1572/ 6000A90 : 666F                		exts.w	r6,r6				; extend
(1) 1573/ 6000A92 : 4829                		shlr16	r8				; Y >> 16
(1) 1574/ 6000A94 : 688F                		exts.w	r8,r8				; extend
(1) 1575/ 6000A96 : 6163                		mov	r6,r1				; Make X increment
(1) 1576/ 6000A98 : 3178                		sub	r7,r1
(1) 1577/ 6000A9A : 6283                		mov	r8,r2				; Make Y increment
(1) 1578/ 6000A9C : 3298                		sub	r9,r2
(1) 1579/ 6000A9E : 2118                		tst	r1,r1				; X changed?
(1) 1580/ 6000AA0 : 8BFF                		bf	.x_patch
(1) 1581/ 6000AA2 :                     .x_patch:
(1) 1582/ 6000AA2 : 6083                		mov	r8,r0
(1) 1583/ 6000AA4 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1584/ 6000AA6 : 6063                		mov	r6,r0
(1) 1585/ 6000AA8 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1586/ 6000AAA : 611F                		exts.w	r1,r1
(1) 1587/ 6000AAC : C101                		mov.w	r0,@(marsGbl_XShift,gbr)	; Write Xshift here
(1) 1588/ 6000AAE : 622F                		exts.w	r2,r2
(1) 1589/ 6000AB0 :                     	; ---------------------------------------
(1) 1590/ 6000AB0 :                     	; Increment FB draw TL and Y pos
(1) 1591/ 6000AB0 :                     	; r1 - X increment
(1) 1592/ 6000AB0 :                     	; r2 - Y increment
(1) 1593/ 6000AB0 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(1) 1594/ 6000AB2 : 6803                		mov	r0,r8
(1) 1595/ 6000AB4 : C617                		mov	@(marsGbl_Scrl_FbX,gbr),r0
(1) 1596/ 6000AB6 : 6703                		mov	r0,r7
(1) 1597/ 6000AB8 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1598/ 6000ABA : 6603                		mov	r0,r6
(1) 1599/ 6000ABC : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1600/ 6000ABE : 6503                		mov	r0,r5
(1) 1601/ 6000AC0 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1602/ 6000AC2 : 6403                		mov	r0,r4
(1) 1603/ 6000AC4 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1604/ 6000AC6 : 301C                		add	r1,r0		; Add X
(1) 1605/ 6000AC8 : 4115                		cmp/pl	r1
(1) 1606/ 6000ACA : 8B03                		bf	.yx_negtv
(1) 1607/ 6000ACC : 3043                .yx_toptva:	cmp/ge	r4,r0
(1) 1608/ 6000ACE : 8B01                		bf	.yx_negtv
(1) 1609/ 6000AD0 : AFFC                		bra	.yx_toptva
(1) 1610/ 6000AD2 : 3048                		sub	r4,r0
(1) 1611/ 6000AD4 :                     .yx_negtv:
(1) 1612/ 6000AD4 : 4111                		cmp/pz	r1
(1) 1613/ 6000AD6 : 8903                		bt	.yx_postv
(1) 1614/ 6000AD8 : 4011                .yx_negtva:	cmp/pz	r0
(1) 1615/ 6000ADA : 8901                		bt	.yx_postv
(1) 1616/ 6000ADC : AFFC                		bra	.yx_negtva
(1) 1617/ 6000ADE : 304C                		add	r4,r0
(1) 1618/ 6000AE0 :                     .yx_postv:
(1) 1619/ 6000AE0 :                     
(1) 1620/ 6000AE0 :                     	; Add Y
(1) 1621/ 6000AE0 : 352C                		add	r2,r5
(1) 1622/ 6000AE2 : 4215                		cmp/pl	r2
(1) 1623/ 6000AE4 : 8B03                		bf	.ypu_negtv
(1) 1624/ 6000AE6 : 3563                .yx_postva:	cmp/ge	r6,r5
(1) 1625/ 6000AE8 : 8B01                		bf	.ypu_negtv
(1) 1626/ 6000AEA : AFFC                		bra	.yx_postva
(1) 1627/ 6000AEC : 3568                		sub	r6,r5
(1) 1628/ 6000AEE :                     .ypu_negtv:
(1) 1629/ 6000AEE : 4211                		cmp/pz	r2
(1) 1630/ 6000AF0 : 8903                		bt	.ypu_postv
(1) 1631/ 6000AF2 : 4511                .ypu_negtva:	cmp/pz	r5
(1) 1632/ 6000AF4 : 8901                		bt	.ypu_postv
(1) 1633/ 6000AF6 : AFFC                		bra	.ypu_negtva
(1) 1634/ 6000AF8 : 356C                		add	r6,r5
(1) 1635/ 6000AFA :                     .ypu_postv:
(1) 1636/ 6000AFA :                     
(1) 1637/ 6000AFA :                     	; X special
(1) 1638/ 6000AFA :                     
(1) 1639/ 6000AFA : 371C                		add	r1,r7
(1) 1640/ 6000AFC : 4115                		cmp/pl	r1
(1) 1641/ 6000AFE : 8B03                		bf	.xpu_negtv
(1) 1642/ 6000B00 : 3783                .ypu_postva:	cmp/ge	r8,r7
(1) 1643/ 6000B02 : 8B01                		bf	.xpu_negtv
(1) 1644/ 6000B04 : AFFC                		bra	.ypu_postva
(1) 1645/ 6000B06 : 3788                		sub	r8,r7
(1) 1646/ 6000B08 :                     .xpu_negtv:
(1) 1647/ 6000B08 : 4111                		cmp/pz	r1
(1) 1648/ 6000B0A : 8903                		bt	.xpu_postv
(1) 1649/ 6000B0C : 4711                .xpu_negtva:	cmp/pz	r7
(1) 1650/ 6000B0E : 8901                		bt	.xpu_postv
(1) 1651/ 6000B10 : AFFC                		bra	.xpu_negtva
(1) 1652/ 6000B12 : 378C                		add	r8,r7
(1) 1653/ 6000B14 :                     .xpu_postv:
(1) 1654/ 6000B14 : 0009                		nop
(1) 1655/ 6000B16 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1656/ 6000B18 : 6053                		mov	r5,r0
(1) 1657/ 6000B1A : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1658/ 6000B1C : 6073                		mov	r7,r0
(1) 1659/ 6000B1E : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1660/ 6000B20 :                     
(1) 1661/ 6000B20 :                     	; ---------------------------------------
(1) 1662/ 6000B20 :                     	; Make refill timers on movement
(1) 1663/ 6000B20 :                     	; ---------------------------------------
(1) 1664/ 6000B20 : DE37                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(1) 1665/ 6000B22 : 9D74                		mov	#320,r13
(1) 1666/ 6000B24 : EC03                		mov	#%11,r12
(1) 1667/ 6000B26 : EBF0                		mov	#-16,r11
(1) 1668/ 6000B28 : 0009                		nop
(1) 1669/ 6000B2A : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1670/ 6000B2C : 6903                		mov	r0,r9
(1) 1671/ 6000B2E : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1672/ 6000B30 : 6403                		mov	r0,r4
(1) 1673/ 6000B32 : C60E                		mov	@(marsGbl_Scrl_Xold,gbr),r0
(1) 1674/ 6000B34 : 24B9                		and	r11,r4
(1) 1675/ 6000B36 : 20B9                		and	r11,r0
(1) 1676/ 6000B38 : 3040                		cmp/eq	r4,r0
(1) 1677/ 6000B3A : 891A                		bt	.x_dont_scrl
(1) 1678/ 6000B3C : 2118                		tst	r1,r1
(1) 1679/ 6000B3E : 8918                		bt	.x_dont_scrl
(1) 1680/ 6000B40 : 6AE3                		mov	r14,r10
(1) 1681/ 6000B42 : 4115                		cmp/pl	r1
(1) 1682/ 6000B44 : 8B00                		bf	.x_scrl_l
(1) 1683/ 6000B46 : 34DC                		add	r13,r4
(1) 1684/ 6000B48 :                     .x_scrl_l:
(1) 1685/ 6000B48 : 9062                		mov	#512-1,r0
(1) 1686/ 6000B4A : 2409                		and	r0,r4
(1) 1687/ 6000B4C : 9061                		mov	#256-1,r0
(1) 1688/ 6000B4E : 2909                		and	r0,r9
(1) 1689/ 6000B50 : 4409                		shlr2	r4
(1) 1690/ 6000B52 : 4409                		shlr2	r4
(1) 1691/ 6000B54 : 4909                		shlr2	r9
(1) 1692/ 6000B56 : 4909                		shlr2	r9
(1) 1693/ 6000B58 : 4400                		shll	r4
(1) 1694/ 6000B5A : 3A4C                		add	r4,r10
(1) 1695/ 6000B5C : E710                		mov	#256/16,r7
(1) 1696/ 6000B5E :                     .x_sloop:
(1) 1697/ 6000B5E : 6093                		mov	r9,r0
(1) 1698/ 6000B60 : C90F                		and	#$0F,r0
(1) 1699/ 6000B62 : 4018                		shll8	r0
(1) 1700/ 6000B64 : 4009                		shlr2	r0
(1) 1701/ 6000B66 : 08AD                		mov.w	@(r10,r0),r8
(1) 1702/ 6000B68 : 28CB                		or	r12,r8
(1) 1703/ 6000B6A : 0A85                		mov.w	r8,@(r10,r0)
(1) 1704/ 6000B6C : 4710                		dt	r7
(1) 1705/ 6000B6E : 8FF6                		bf/s	.x_sloop
(1) 1706/ 6000B70 : 7901                		add	#1,r9
(1) 1707/ 6000B72 :                     .x_dont_scrl:
(1) 1708/ 6000B72 :                     ; 		mov	#224,r13
(1) 1709/ 6000B72 : 9D4F                		mov	#SET_MSCRLHGHT,r13			; Y draw
(1) 1710/ 6000B74 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1711/ 6000B76 : 6903                		mov	r0,r9
(1) 1712/ 6000B78 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1713/ 6000B7A : 6403                		mov	r0,r4
(1) 1714/ 6000B7C : C60F                		mov	@(marsGbl_Scrl_Yold,gbr),r0
(1) 1715/ 6000B7E : 24B9                		and	r11,r4
(1) 1716/ 6000B80 : 20B9                		and	r11,r0
(1) 1717/ 6000B82 : 3040                		cmp/eq	r4,r0
(1) 1718/ 6000B84 : 891A                		bt	.y_dont_scrl
(1) 1719/ 6000B86 : 2228                		tst	r2,r2
(1) 1720/ 6000B88 : 8918                		bt	.y_dont_scrl
(1) 1721/ 6000B8A : 6AE3                		mov	r14,r10
(1) 1722/ 6000B8C : 4215                		cmp/pl	r2
(1) 1723/ 6000B8E : 8B00                		bf	.y_scrl_l
(1) 1724/ 6000B90 : 34DC                		add	r13,r4
(1) 1725/ 6000B92 :                     .y_scrl_l:
(1) 1726/ 6000B92 : 903E                		mov	#256-1,r0
(1) 1727/ 6000B94 : 2409                		and	r0,r4
(1) 1728/ 6000B96 : 903B                		mov	#512-1,r0
(1) 1729/ 6000B98 : 2909                		and	r0,r9
(1) 1730/ 6000B9A : 4409                		shlr2	r4
(1) 1731/ 6000B9C : 4409                		shlr2	r4
(1) 1732/ 6000B9E : 4909                		shlr2	r9
(1) 1733/ 6000BA0 : 4909                		shlr2	r9
(1) 1734/ 6000BA2 : 4418                		shll8	r4
(1) 1735/ 6000BA4 : 4409                		shlr2	r4
(1) 1736/ 6000BA6 : 3A4C                		add	r4,r10
(1) 1737/ 6000BA8 : E720                		mov	#512/16,r7
(1) 1738/ 6000BAA :                     .y_sloop:
(1) 1739/ 6000BAA : 6093                		mov	r9,r0
(1) 1740/ 6000BAC : C91F                		and	#$1F,r0
(1) 1741/ 6000BAE : 4000                		shll	r0
(1) 1742/ 6000BB0 : 08AD                		mov.w	@(r10,r0),r8
(1) 1743/ 6000BB2 : 28CB                		or	r12,r8
(1) 1744/ 6000BB4 : 0A85                		mov.w	r8,@(r10,r0)
(1) 1745/ 6000BB6 : 4710                		dt	r7
(1) 1746/ 6000BB8 : 8FF7                		bf/s	.y_sloop
(1) 1747/ 6000BBA : 7901                		add	#1,r9
(1) 1748/ 6000BBC :                     .y_dont_scrl:
(1) 1749/ 6000BBC :                     	; ---------------------------------------
(1) 1750/ 6000BBC :                     	; Start drawing
(1) 1751/ 6000BBC :                     	; ---------------------------------------
(1) 1752/ 6000BBC : B1E8                 		bsr	Mars_CachePurge
(1) 1753/ 6000BBE : 0009                		nop
(1) 1754/ 6000BC0 : B48A                		bsr	MarsVideo_DrawFillBlk		; Redraw changes from Refill boxes
(1) 1755/ 6000BC2 : 0009                		nop
(1) 1756/ 6000BC4 : B2D2                		bsr	MarsVideo_SuperSpr_Make
(1) 1757/ 6000BC6 : 0009                		nop
(1) 1758/ 6000BC8 : B1E2                		bsr	Mars_CachePurge
(1) 1759/ 6000BCA : 0009                		nop
(1) 1760/ 6000BCC : B3FE                		bsr	MarsVideo_MkFillBlk		; Build refill boxes
(1) 1761/ 6000BCE : 0009                		nop
(1) 1762/ 6000BD0 : B32C                		bsr	MarsVideo_SuperSpr_Draw
(1) 1763/ 6000BD2 : 0009                		nop
(1) 1764/ 6000BD4 :                     	; ---------------------------------------
(1) 1765/ 6000BD4 :                     	; Make the scroll area visible and
(1) 1766/ 6000BD4 :                     	; fix the broken lines.
(1) 1767/ 6000BD4 : E100                		mov	#0,r1
(1) 1768/ 6000BD6 : 921E                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1769/ 6000BD8 : B28C                		bsr	MarsVideo_ShowScrlBg
(1) 1770/ 6000BDA : 0009                		nop
(1) 1771/ 6000BDC : B2B2                		bsr	marsScrl_CopyTopBot		; Bottom
(1) 1772/ 6000BDE : 0009                		nop
(1) 1773/ 6000BE0 : 9219                		mov	#240,r2				; $xxFF patcher
(1) 1774/ 6000BE2 : D308                		mov	#SET_FBVRAM_PATCH,r3
(1) 1775/ 6000BE4 : B250                		bsr	MarsVideo_FixTblShift
(1) 1776/ 6000BE6 : E100                		mov	#0,r1
(1) 1777/ 6000BE8 :                     
(1) 1778/ 6000BE8 :                     	; ---------------------------------------
(1) 1779/ 6000BE8 :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(1) 1780/ 6000BE8 :                     ; 		mov	r0,r6
(1) 1781/ 6000BE8 :                     ; .wait_wdg:	mov.w	@(marsGbl_SVdpQRead,gbr),r0
(1) 1782/ 6000BE8 :                     ; 		cmp/ge	r6,r0
(1) 1783/ 6000BE8 :                     ; 		bf	.wait_wdg
(1) 1784/ 6000BE8 :                     ; 		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1785/ 6000BE8 :                     ; 		mov.w   #$A518,r0
(1) 1786/ 6000BE8 :                     ; 		mov.w   r0,@r1
(1) 1787/ 6000BE8 : B1D2                		bsr	Mars_CachePurge
(1) 1788/ 6000BEA : 0009                		nop
(1) 1789/ 6000BEC : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1790/ 6000BEE : CA01                		xor	#1,r0
(1) 1791/ 6000BF0 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1792/ 6000BF2 : AE3F                		bra	master_loop
(1) 1793/ 6000BF4 : 0009                		nop
(1) 1794/ 6000BF6 :                     		align 4
(1) 1795/ 6000BF8 : 2000 4000 2000      		ltorg
          6000BFE : 4100 C000 0200 
          6000C04 : 0001 E000 0200 
          6000C0A : 0008 FFF0 0140 
          6000C10 : 01FF 00FF 00F0 
          6000C16 : 00F0             
(1) 1796/ 6000C18 :                     
(1) 1797/ 6000C18 :                     ; ----------------------------------------------------------------
(1) 1798/ 6000C18 :                     ; Halfway jumps...
(1) 1799/ 6000C18 :                     		align 4
(1) 1800/ 6000C18 :                     g_Mstr_CopyPalette:
(1) 1801/ 6000C18 : A0E4                		bra	Mstr_CopyPalette
(1) 1802/ 6000C1A : 0009                		nop
(1) 1803/ 6000C1C :                     		align 4
(1) 1804/ 6000C1C :                     g_MstrMode_InitExit:
(1) 1805/ 6000C1C : AED1                		bra	MstrMode_InitExit
(1) 1806/ 6000C1E : 0009                		nop
(1) 1807/ 6000C20 :                     
(1) 1808/ 6000C20 :                     ; ====================================================================
(1) 1809/ 6000C20 :                     ; ----------------------------------------------------------------
(1) 1810/ 6000C20 :                     ; 3D polygons mode, CPU INTENSIVE
(1) 1811/ 6000C20 :                     ;
(1) 1812/ 6000C20 :                     ; NOTES:
(1) 1813/ 6000C20 :                     ; - This will set SVDP permission to here.
(1) 1814/ 6000C20 :                     ; - Slave CPU will help a little.
(1) 1815/ 6000C20 :                     ; ----------------------------------------------------------------
(1) 1816/ 6000C20 :                     
(1) 1817/ 6000C20 :                     ; ---------------------------------------
(1) 1818/ 6000C20 :                     ; Init
(1) 1819/ 6000C20 :                     ; ---------------------------------------
(1) 1820/ 6000C20 :                     
(1) 1821/ 6000C20 :                     		align 4
(1) 1822/ 6000C20 :                     MstrMode_3D_i:
(1) 1823/ 6000C20 : D118                		mov	#_sysreg+comm12,r1
(1) 1824/ 6000C22 : 6011                		mov.w	@r1,r0
(1) 1825/ 6000C24 : C940                		and	#%01000000,r0
(1) 1826/ 6000C26 : 2008                		tst	r0,r0
(1) 1827/ 6000C28 : 8BF8                		bf	g_MstrMode_InitExit
(1) 1828/ 6000C2A : B1B1                		bsr	Mars_CachePurge
(1) 1829/ 6000C2C : 0009                		nop
(1) 1830/ 6000C2E : 9137                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1831/ 6000C30 : 9037                		mov.w   #$A518,r0
(1) 1832/ 6000C32 : 2101                		mov.w   r0,@r1
(1) 1833/ 6000C34 : D114                		mov	#_sysreg+comm14,r1
(1) 1834/ 6000C36 :                     .wait_slvn:
(1) 1835/ 6000C36 : 6011                		mov.w	@r1,r0
(1) 1836/ 6000C38 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1837/ 6000C3A : 2008                		tst	r0,r0
(1) 1838/ 6000C3C : 8BFB                		bf	.wait_slvn
(1) 1839/ 6000C3E : D113                		mov	#RAM_Mars_Buff3D_Start,r1
(1) 1840/ 6000C40 : D213                		mov	#RAM_Mars_Buff3D_End,r2
(1) 1841/ 6000C42 : E000                		mov	#0,r0
(1) 1842/ 6000C44 :                     .clr_me2d:
(1) 1843/ 6000C44 : 2102                		mov	r0,@r1
(1) 1844/ 6000C46 : 3123                		cmp/ge	r2,r1
(1) 1845/ 6000C48 : 8FFC                		bf/s	.clr_me2d
(1) 1846/ 6000C4A : 7104                		add	#4,r1
(1) 1847/ 6000C4C : DE11                		mov	#_sysreg,r14
(1) 1848/ 6000C4E : DD12                		mov	#_vdpreg,r13
(1) 1849/ 6000C50 : E000                		mov	#0,r0
(1) 1850/ 6000C52 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1851/ 6000C54 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1852/ 6000C56 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1853/ 6000C58 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1854/ 6000C5A : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1855/ 6000C5C : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1856/ 6000C5E : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1857/ 6000C60 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(1) 1858/ 6000C62 : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1) 1859/ 6000C64 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(1) 1860/ 6000C66 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1861/ 6000C68 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1862/ 6000C6A : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1863/ 6000C6C : CA01                		xor	#1,r0
(1) 1864/ 6000C6E : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1865/ 6000C70 : 9018                		mov	#FM,r0
(1) 1866/ 6000C72 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1867/ 6000C74 : E001                		mov	#1,r0
(1) 1868/ 6000C76 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1869/ 6000C78 :                     	; **** TEMPORAL
(1) 1870/ 6000C78 :                     ; 		mov	#TEST_MODEL,r0
(1) 1871/ 6000C78 :                     ; 		mov	#RAM_Mars_Objects,r1
(1) 1872/ 6000C78 :                     ; 		mov	r0,@(mdl_data,r1)
(1) 1873/ 6000C78 :                     	; ****
(1) 1874/ 6000C78 : D108                		mov	#_sysreg+comm12+1,r1	; Enable frame-dropping
(1) 1875/ 6000C7A : 6010                		mov.b	@r1,r0
(1) 1876/ 6000C7C : CB08                		or	#%00001000,r0
(1) 1877/ 6000C7E : 2100                		mov.b	r0,@r1
(1) 1878/ 6000C80 : AFCC                		bra	g_MstrMode_InitExit
(1) 1879/ 6000C82 : 0009                		nop
(1) 1880/ 6000C84 :                     		align 4
(1) 1881/ 6000C84 : 2000 402C 2000      		ltorg
          6000C8A : 402E 0600 72A0 
          6000C90 : 0600 F9E8 2000 
          6000C96 : 4000 2000 4100 
          6000C9C : 2000 402D FE80 
          6000CA2 : A518 0080          
(1) 1882/ 6000CA6 :                     
(1) 1883/ 6000CA6 :                     ; ---------------------------------------
(1) 1884/ 6000CA6 :                     ; Loop
(1) 1885/ 6000CA6 :                     ; ---------------------------------------
(1) 1886/ 6000CA6 :                     
(1) 1887/ 6000CA6 :                     		align 4
(1) 1888/ 6000CA8 :                     MstrMode_3D:
(1) 1889/ 6000CA8 :                     	; ---------------------------------------
(1) 1890/ 6000CA8 :                     	; *** We are in VBLANK ***
(1) 1891/ 6000CA8 : DE5D                		mov	#_sysreg,r14
(1) 1892/ 6000CAA : DD5E                		mov	#_vdpreg,r13
(1) 1893/ 6000CAC : 85D5                .wait_sv:	mov.w	@(vdpsts,r13),r0			; Check if Framebuffer is locked
(1) 1894/ 6000CAE : C802                		tst	#%10,r0
(1) 1895/ 6000CB0 : 8BFC                		bf	.wait_sv
(1) 1896/ 6000CB2 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0		; Set current Framebuffer
(1) 1897/ 6000CB4 : C901                		and	#1,r0
(1) 1898/ 6000CB6 : 80DB                		mov.b	r0,@(framectl,r13)
(1) 1899/ 6000CB8 : B094                		bsr	Mstr_CopyPalette
(1) 1900/ 6000CBA : 0009                		nop
(1) 1901/ 6000CBC :                     	; ---------------------------------------
(1) 1902/ 6000CBC : D45A                		mov	#_sysreg+comm14,r4
(1) 1903/ 6000CBE :                     .wait_slvi:
(1) 1904/ 6000CBE : 6041                		mov.w	@r4,r0
(1) 1905/ 6000CC0 : C907                		and	#%00000111,r0				; Slave busy?
(1) 1906/ 6000CC2 : 2008                		tst	r0,r0
(1) 1907/ 6000CC4 : 8BFB                		bf	.wait_slvi
(1) 1908/ 6000CC6 : B163                		bsr	Mars_CachePurge				; Purge cache
(1) 1909/ 6000CC8 : 0009                		nop
(1) 1910/ 6000CCA :                     
(1) 1911/ 6000CCA :                     	; Copy CAMERA and OBJECTS for Slave
(1) 1912/ 6000CCA : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1913/ 6000CCC : 6403                		mov	r0,r4
(1) 1914/ 6000CCE : 91C7                		mov	#Dreq_Buff1,r1
(1) 1915/ 6000CD0 : 314C                		add	r4,r1
(1) 1916/ 6000CD2 : D256                		mov	#RAM_Mars_SprPolygn,r2
(1) 1917/ 6000CD4 : 93C5                		mov	#(mspr_len*MAX_MARSMSPR)/4,r3		; $400 bytes
(1) 1918/ 6000CD6 :                     .copy_mspr:
(1) 1919/ 6000CD6 : 6016                		mov	@r1+,r0
(1) 1920/ 6000CD8 : 2202                		mov	r0,@r2
(1) 1921/ 6000CDA : 4310                		dt	r3
(1) 1922/ 6000CDC : 8FFB                		bf/s	.copy_mspr
(1) 1923/ 6000CDE : 7204                		add	#4,r2
(1) 1924/ 6000CE0 : 91C0                		mov	#Dreq_Buff2,r1
(1) 1925/ 6000CE2 : 314C                		add	r4,r1
(1) 1926/ 6000CE4 : D252                		mov	#RAM_Mars_Objects,r2
(1) 1927/ 6000CE6 : 93BE                		mov	#(mmdl_len*MAX_MARSOBJ)/4,r3		; $400 bytes
(1) 1928/ 6000CE8 :                     .copy_obj:
(1) 1929/ 6000CE8 : 6016                		mov	@r1+,r0
(1) 1930/ 6000CEA : 2202                		mov	r0,@r2
(1) 1931/ 6000CEC : 4310                		dt	r3
(1) 1932/ 6000CEE : 8FFB                		bf/s	.copy_obj
(1) 1933/ 6000CF0 : 7204                		add	#4,r2
(1) 1934/ 6000CF2 : 91B9                		mov	#Dreq_Buff0,r1
(1) 1935/ 6000CF4 : 314C                		add	r4,r1
(1) 1936/ 6000CF6 : D24F                		mov	#RAM_Mars_ObjCamera,r2
(1) 1937/ 6000CF8 : E310                		mov	#$40/4,r3				; $40 bytes
(1) 1938/ 6000CFA :                     .copy_cam:
(1) 1939/ 6000CFA : 6016                		mov	@r1+,r0
(1) 1940/ 6000CFC : 2202                		mov	r0,@r2
(1) 1941/ 6000CFE : 4310                		dt	r3
(1) 1942/ 6000D00 : 8FFB                		bf/s	.copy_cam
(1) 1943/ 6000D02 : 7204                		add	#4,r2
(1) 1944/ 6000D04 : D14C                		mov	#RAM_Mars_CurrPlgnPage,r1		; Swap polygon R/W sections
(1) 1945/ 6000D06 : 6012                		mov	@r1,r0
(1) 1946/ 6000D08 : CA01                		xor	#1,r0
(1) 1947/ 6000D0A : 6D03                		mov	r0,r13					; ** Current R/W page
(1) 1948/ 6000D0C : 2102                		mov	r0,@r1
(1) 1949/ 6000D0E : D44B                		mov	#_sysreg+comm14+1,r4			; Request Slave Task $01
(1) 1950/ 6000D10 : E001                		mov	#1,r0
(1) 1951/ 6000D12 : 2400                		mov.b	r0,@r4
(1) 1952/ 6000D14 :                     	; -------------------------------
(1) 1953/ 6000D14 :                     	; Start drawing the polygons
(1) 1954/ 6000D14 : D143                		mov	#_vdpreg,r1
(1) 1955/ 6000D16 : 90A8                		mov	#$A1,r0					; VDPFILL LEN: Pre-start at $A1
(1) 1956/ 6000D18 : 8113                		mov.w	r0,@(6,r1)
(1) 1957/ 6000D1A : D149                		mov	#_framebuffer,r1
(1) 1958/ 6000D1C : 93A6                		mov	#240,r3
(1) 1959/ 6000D1E : E040                		mov	#$100>>2,r0
(1) 1960/ 6000D20 : 4008                		shll2	r0
(1) 1961/ 6000D22 : 6203                		mov	r0,r2
(1) 1962/ 6000D24 :                     .mk_table:
(1) 1963/ 6000D24 : 2101                		mov.w	r0,@r1
(1) 1964/ 6000D26 : 302C                		add	r2,r0
(1) 1965/ 6000D28 : 4310                		dt	r3
(1) 1966/ 6000D2A : 8FFB                		bf/s	.mk_table
(1) 1967/ 6000D2C : 7102                		add	#2,r1
(1) 1968/ 6000D2E :                     	; Prepare watchdog
(1) 1969/ 6000D2E : E000                		mov	#0,r0
(1) 1970/ 6000D30 : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(1) 1971/ 6000D32 : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(1) 1972/ 6000D34 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(1) 1973/ 6000D36 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1974/ 6000D38 : 9098                		mov	#240,r0					; Lines to clear for WdgMode $07
(1) 1975/ 6000D3A : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1976/ 6000D3C : E007                		mov	#7,r0
(1) 1977/ 6000D3E : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Start at the last mode
(1) 1978/ 6000D40 : B126                		bsr	Mars_CachePurge
(1) 1979/ 6000D42 : 0009                		nop
(1) 1980/ 6000D44 : E100                		mov	#0,r1
(1) 1981/ 6000D46 : E220                		mov	#$20,r2
(1) 1982/ 6000D48 : D03E                		mov	#Mars_SetWatchdog,r0
(1) 1983/ 6000D4A : 400B                		jsr	@r0
(1) 1984/ 6000D4C : 0009                		nop
(1) 1985/ 6000D4E :                     
(1) 1986/ 6000D4E :                     	; WATCHDOG IS ACTIVE
(1) 1987/ 6000D4E : 0009                		nop
(1) 1988/ 6000D50 : 60D3                		mov	r13,r0					; GET current page
(1) 1989/ 6000D52 : C801                		tst     #1,r0					; on this frame
(1) 1990/ 6000D54 : 8902                		bt	.page_2
(1) 1997/ 6000D56 : DE3C                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1998/ 6000D58 : A003                		bra	.cont_plgn
(1) 1999/ 6000D5A : DD3A                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 2001/ 6000D5C :                     .page_2:
(1) 2008/ 6000D5C : DE3C                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 2009/ 6000D5E : A000                		bra	.cont_plgn		; <-- syncronizing, i think.
(1) 2010/ 6000D60 : DD3C                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 2012/ 6000D62 :                     .cont_plgn:
(1) 2013/ 6000D62 : 6DD2                		mov	@r13,r13	; Grab number of polygons
(1) 2014/ 6000D64 : 4D15                		cmp/pl	r13		; If < 0: leave
(1) 2015/ 6000D66 : 8B29                		bf	.skip
(1) 2016/ 6000D68 :                     
(1) 2017/ 6000D68 :                     	; ---------------------------------------
(1) 2018/ 6000D68 :                     	; Z sorting
(1) 2019/ 6000D68 : 6CE3                		mov	r14,r12		; r12 - PlgnList copy
(1) 2020/ 6000D6A : 6BD3                		mov	r13,r11		; r11 - PlgnNum copy
(1) 2021/ 6000D6C :                     .roll:
(1) 2022/ 6000D6C : 6AC3                		mov	r12,r10
(1) 2023/ 6000D6E : 67A2                		mov	@r10,r7		; r1 - Start value
(1) 2024/ 6000D70 : 68A3                		mov	r10,r8		; Set Lower pointer
(1) 2025/ 6000D72 : 69B3                		mov	r11,r9
(1) 2026/ 6000D74 : 0009                		nop
(1) 2027/ 6000D76 :                     .srch:
(1) 2028/ 6000D76 : 60A2                		mov	@r10,r0
(1) 2029/ 6000D78 : 3073                		cmp/ge	r7,r0
(1) 2030/ 6000D7A : 8901                		bt	.higher
(1) 2031/ 6000D7C : 6703                		mov	r0,r7		; Update LOW r1 value
(1) 2032/ 6000D7E : 68A3                		mov	r10,r8		; Save NEW Lower pointer
(1) 2033/ 6000D80 :                     .higher:
(1) 2034/ 6000D80 : 4910                		dt	r9
(1) 2035/ 6000D82 : 8FF8                		bf/s	.srch
(1) 2036/ 6000D84 : 7A08                		add	#8,r10
(1) 2037/ 6000D86 : 6186                		mov	@r8+,r1		; Swap Z and pointers
(1) 2038/ 6000D88 : 6286                		mov	@r8+,r2
(1) 2039/ 6000D8A : 63C6                		mov	@r12+,r3
(1) 2040/ 6000D8C : 64C6                		mov	@r12+,r4
(1) 2041/ 6000D8E : 2C26                		mov	r2,@-r12
(1) 2042/ 6000D90 : 2C16                		mov	r1,@-r12
(1) 2043/ 6000D92 : 2846                		mov	r4,@-r8
(1) 2044/ 6000D94 : 2836                		mov	r3,@-r8
(1) 2045/ 6000D96 : 4B10                		dt	r11
(1) 2046/ 6000D98 : 8FE8                		bf/s	.roll
(1) 2047/ 6000D9A : 7C08                		add	#8,r12
(1) 2048/ 6000D9C :                     
(1) 2049/ 6000D9C :                     	; ---------------------------------------
(1) 2050/ 6000D9C :                     	; Slice polygon with the sorted list
(1) 2051/ 6000D9C :                     .loop:
(1) 2052/ 6000D9C : 50E1                		mov	@(4,r14),r0			; Grab current pointer
(1) 2053/ 6000D9E : 4015                		cmp/pl	r0				; Zero?
(1) 2054/ 6000DA0 : 8B09                		bf	.invalid
(1) 2055/ 6000DA2 : 2FE6                		mov	r14,@-r15
(1) 2056/ 6000DA4 : 6E03                		mov	r0,r14
(1) 2057/ 6000DA6 : D02C                		mov	#MarsVideo_SlicePlgn,r0
(1) 2058/ 6000DA8 : 400B                		jsr	@r0
(1) 2059/ 6000DAA :                     ; 		bsr	MarsVideo_SlicePlgn
(1) 2060/ 6000DAA : 2FD6                		mov	r13,@-r15
(1) 2061/ 6000DAC : 6DF6                		mov	@r15+,r13
(1) 2062/ 6000DAE : 6EF6                		mov	@r15+,r14
(1) 2063/ 6000DB0 : E000                		mov	#0,r0
(1) 2064/ 6000DB2 : 2E02                		mov	r0,@r14
(1) 2065/ 6000DB4 : 1E01                		mov	r0,@(4,r14)
(1) 2066/ 6000DB6 :                     .invalid:
(1) 2067/ 6000DB6 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 2068/ 6000DB8 : 8FF0                		bf/s	.loop
(1) 2069/ 6000DBA : 7E08                		add	#8,r14				; Move to next entry
(1) 2070/ 6000DBC :                     .skip:
(1) 2071/ 6000DBC : E001                		mov	#1,r0				; Report to Watchdog that we
(1) 2072/ 6000DBE : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)	; finished slicing.
(1) 2073/ 6000DC0 :                     
(1) 2074/ 6000DC0 :                     	; ---------------------------------------
(1) 2075/ 6000DC0 : C506                .wait_pz: 	mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces remaining?
(1) 2076/ 6000DC2 : 2008                		tst	r0,r0
(1) 2077/ 6000DC4 : 8BFC                		bf	.wait_pz
(1) 2078/ 6000DC6 : C502                .wait_wdg:	mov.w	@(marsGbl_WdgTask,gbr),r0	; Watchdog finished?
(1) 2079/ 6000DC8 : 2008                		tst	r0,r0
(1) 2080/ 6000DCA : 8BFC                		bf	.wait_wdg
(1) 2081/ 6000DCC : E000                		mov	#0,r0
(1) 2082/ 6000DCE : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2083/ 6000DD0 : 914D                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 2084/ 6000DD2 : 904D                		mov.w   #$A518,r0
(1) 2085/ 6000DD4 : 2101                		mov.w   r0,@r1
(1) 2086/ 6000DD6 : B0DB                		bsr	Mars_CachePurge
(1) 2087/ 6000DD8 : 0009                		nop
(1) 2088/ 6000DDA : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 2089/ 6000DDC : CA01                		xor	#1,r0
(1) 2090/ 6000DDE : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 2091/ 6000DE0 : AD48                		bra	master_loop
(1) 2092/ 6000DE2 : 0009                		nop
(1) 2093/ 6000DE4 :                     		align 4
(1) 2094/ 6000DE4 :                     
(1) 2095/ 6000DE4 :                     ; ----------------------------------------------------------------
(1) 2096/ 6000DE4 :                     
(1) 2097/ 6000DE4 :                     		align 4
(1) 2098/ 6000DE4 :                     Mstr_CopyPalette:
(1) 2099/ 6000DE4 : DE0E                		mov	#_sysreg,r14
(1) 2100/ 6000DE6 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 2101/ 6000DE8 : C880                  		tst	#FM,r0
(1) 2102/ 6000DEA : 8916                  		bt	.svdp_locked
(1) 2103/ 6000DEC : D21B                		mov	#_palette,r2
(1) 2104/ 6000DEE : E320                		mov	#(256/2)/4,r3
(1) 2105/ 6000DF0 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 2106/ 6000DF2 : E100                		mov	#Dreq_Palette,r1		; PALETTE MUST BE AT THE TOP OF DREQ DATA,
(1) 2107/ 6000DF4 :                     ; 		add	r0,r1				; so I don't need to add Dreq_Palette...
(1) 2108/ 6000DF4 : 6103                		mov	r0,r1
(1) 2109/ 6000DF6 :                     .copy_pal:
(1) 2110/ 6000DF6 :                     	rept 4
(1) 2111/ 6000DF6 :                     		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000DF6 :                     		nop
(1) 2113/ 6000DF6 :                     		mov	r0,@r2
(1) 2114/ 6000DF6 :                     		add	#4,r2
(1) 2115/ 6000DF6 :                     	endm
(1) 2111/ 6000DF6 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000DF8 : 0009                		nop
(1) 2113/ 6000DFA : 2202                		mov	r0,@r2
(1) 2114/ 6000DFC : 7204                		add	#4,r2
(1) 2111/ 6000DFE : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E00 : 0009                		nop
(1) 2113/ 6000E02 : 2202                		mov	r0,@r2
(1) 2114/ 6000E04 : 7204                		add	#4,r2
(1) 2111/ 6000E06 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E08 : 0009                		nop
(1) 2113/ 6000E0A : 2202                		mov	r0,@r2
(1) 2114/ 6000E0C : 7204                		add	#4,r2
(1) 2111/ 6000E0E : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E10 : 0009                		nop
(1) 2113/ 6000E12 : 2202                		mov	r0,@r2
(1) 2114/ 6000E14 : 7204                		add	#4,r2
(1) 2116/ 6000E16 : 4310                		dt	r3
(1) 2117/ 6000E18 : 8BED                		bf	.copy_pal
(1) 2118/ 6000E1A :                     .svdp_locked:
(1) 2119/ 6000E1A : 000B                		rts
(1) 2120/ 6000E1C : 0009                		nop
(1) 2121/ 6000E1E :                     		align 4
(1) 2122/ 6000E20 : 2000 4000 2000      		ltorg
          6000E26 : 4100 2000 402E 
          6000E2C : 0600 75E0 0600 
          6000E32 : 72E0 0600 72A0 
          6000E38 : 2600 7290 2000 
          6000E3E : 402F 2400 0000 
          6000E44 : 0600 0FE8 0600 
          6000E4A : E9E0 0600 F9E0 
          6000E50 : 0600 F1E0 0600 
          6000E56 : F9E4 0600 16C8 
          6000E5C : 2000 4200 0220 
          6000E62 : 0100 0620 00C0 
          6000E68 : 0200 00A1 00F0 
          6000E6E : FE80 A518          
(1) 2123/ 6000E72 :                     
(1) 2124/ 6000E72 :                     ; ====================================================================
(1) 2125/ 6000E72 :                     ; ----------------------------------------------------------------
(1) 2126/ 6000E72 :                     ; Slave entry point
(1) 2127/ 6000E72 :                     ; ----------------------------------------------------------------
(1) 2128/ 6000E72 :                     
(1) 2129/ 6000E72 :                     		align 4
(1) 2130/ 6000E74 :                     SH2_S_Entry:
(1) 2131/ 6000E74 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2132/ 6000E76 : 600C                		extu.b	r0,r0
(1) 2133/ 6000E78 : 400E                		ldc	r0,sr
(1) 2134/ 6000E7A : DF1F                		mov	#STACK_SLV,r15		; Reset stack
(1) 2135/ 6000E7C : D01F                		mov	#SH2_Slave,r0		; Reset vbr
(1) 2136/ 6000E7E : 402E                		ldc	r0,vbr
(1) 2137/ 6000E80 : 9148                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 2138/ 6000E82 : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 2139/ 6000E84 : 8010                		mov.b	r0,@(0,r1)
(1) 2140/ 6000E86 : E0E2                		mov.b	#$E2,r0
(1) 2141/ 6000E88 : 8017                		mov.b	r0,@(7,r1)
(1) 2142/ 6000E8A : E000                		mov	#0,r0
(1) 2143/ 6000E8C : 8014                		mov.b	r0,@(4,r1)
(1) 2144/ 6000E8E : E001                		mov	#1,r0
(1) 2145/ 6000E90 : 8015                		mov.b	r0,@(5,r1)
(1) 2146/ 6000E92 : E000                		mov	#0,r0
(1) 2147/ 6000E94 : 8016                		mov.b	r0,@(6,r1)
(1) 2148/ 6000E96 : E001                		mov	#1,r0
(1) 2149/ 6000E98 : 8011                		mov.b	r0,@(1,r1)
(1) 2150/ 6000E9A : E000                		mov	#0,r0
(1) 2151/ 6000E9C : 8013                		mov.b	r0,@(3,r1)
(1) 2152/ 6000E9E : 8012                		mov.b	r0,@(2,r1)
(1) 2153/ 6000EA0 : E0F2                		mov.b	#$F2,r0			; ****
(1) 2154/ 6000EA2 : 8017                		mov.b	r0,@(7,r1)
(1) 2155/ 6000EA4 : E000                		mov	#0,r0
(1) 2156/ 6000EA6 : 8014                		mov.b	r0,@(4,r1)
(1) 2157/ 6000EA8 : E001                		mov	#1,r0
(1) 2158/ 6000EAA : 8015                		mov.b	r0,@(5,r1)
(1) 2159/ 6000EAC : E0E2                		mov.b	#$E2,r0
(1) 2160/ 6000EAE : 8017                		mov.b	r0,@(7,r1)
(1) 2161/ 6000EB0 :                     
(1) 2162/ 6000EB0 :                     	; --------------------------------------------------------
(1) 2163/ 6000EB0 :                     	; Extra interrupt settings
(1) 2164/ 6000EB0 : 9031                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 2165/ 6000EB2 : 9131                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 2166/ 6000EB4 : 2011                		mov.w   r1,@r0
(1) 2167/ 6000EB6 : 9030                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 2168/ 6000EB8 : 9130                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 2169/ 6000EBA : 2011                		mov.w   r1,@r0
(1) 2170/ 6000EBC : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 2171/ 6000EBE : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 2172/ 6000EC0 : 2012                		mov	r1,@r0
(1) 2173/ 6000EC2 :                     	; --------------------------------------------------------
(1) 2174/ 6000EC2 :                     	; CD32X only:
(1) 2175/ 6000EC2 :                     	; --------------------------------------------------------
(1) 2185/ 6000EC2 : B0A9                		bsr	MarsSound_Init			; Init sound
(1) 2186/ 6000EC4 : 0009                		nop
(1) 2187/ 6000EC6 :                     
(1) 2188/ 6000EC6 :                     ; ====================================================================
(1) 2189/ 6000EC6 :                     ; ----------------------------------------------------------------
(1) 2190/ 6000EC6 :                     ; Slave MAIN code
(1) 2191/ 6000EC6 :                     ;
(1) 2192/ 6000EC6 :                     ; *** NOTE ***
(1) 2193/ 6000EC6 :                     ; On actual HW this CPU runs slower than MASTER because of
(1) 2194/ 6000EC6 :                     ; priority of the SDRAM.
(1) 2195/ 6000EC6 :                     ; The important code is stored on 2K Cache
(1) 2196/ 6000EC6 :                     ; (see cache/cache_slv.asm)
(1) 2197/ 6000EC6 :                     ; ----------------------------------------------------------------
(1) 2198/ 6000EC6 :                     
(1) 2199/ 6000EC6 :                     SH2_S_HotStart:
(1) 2200/ 6000EC6 : D00E                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 2201/ 6000EC8 : 401E                		ldc	r0,gbr
(1) 2202/ 6000ECA : B061                		bsr	Mars_CachePurge
(1) 2203/ 6000ECC : 0009                		nop
(1) 2204/ 6000ECE : D10D                		mov	#CACHE_SLAVE,r1
(1) 2205/ 6000ED0 : 9225                		mov	#CACHE_SLAVE_E-CACHE_SLAVE,r2
(1) 2206/ 6000ED2 : D00D                		mov	#Mars_CacheRamCode,r0
(1) 2207/ 6000ED4 : 400B                		jsr	@r0
(1) 2208/ 6000ED6 : 0009                		nop
(1) 2209/ 6000ED8 : D10C                		mov	#_sysreg,r1
(1) 2210/ 6000EDA : 6011                		mov.w	@r1,r0
(1) 2211/ 6000EDC : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 2212/ 6000EDE :                     ; 		or	#CMDIRQ_ON,r0
(1) 2213/ 6000EDE : 2101                		mov.w	r0,@r1
(1) 2214/ 6000EE0 : D10B                		mov	#_sysreg+comm12,r1
(1) 2215/ 6000EE2 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 2216/ 6000EE4 : 2008                		tst	r0,r0
(1) 2217/ 6000EE6 : 8BFC                		bf	.wait_mst
(1) 2218/ 6000EE8 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 2219/ 6000EEA : E001                		mov	#1,r0
(1) 2220/ 6000EEC : 2102                		mov	r0,@r1
(1) 2221/ 6000EEE : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 2222/ 6000EF0 : 400E                		ldc	r0,sr
(1) 2223/ 6000EF2 : A015                		bra	slave_loop
(1) 2224/ 6000EF4 : 0009                		nop
(1) 2225/ 6000EF6 :                     		align 4
(1) 2226/ 6000EF8 : C000 0800 0600      		ltorg
          6000EFE : 0128 0600 4C70 
          6000F04 : 0600 1DD8 0600 
          6000F0A : 0FAC 2000 4000 
          6000F10 : 2000 402C FE10 
          6000F16 : FEE2 0530 FEE4 
          6000F1C : 4800 0694          
(1) 2227/ 6000F20 :                     
(1) 2228/ 6000F20 :                     ; ----------------------------------------------------------------
(1) 2229/ 6000F20 :                     ; SLAVE CPU loop
(1) 2230/ 6000F20 :                     ;
(1) 2231/ 6000F20 :                     ; comm14: %Bp00cccc 00000ttt
(1) 2232/ 6000F20 :                     
(1) 2233/ 6000F20 :                     ; B | This CPU's busy bit (CMD lock)
(1) 2234/ 6000F20 :                     ; p | DATA pass bit
(1) 2235/ 6000F20 :                     ; c | CMD task number
(1) 2236/ 6000F20 :                     ;
(1) 2237/ 6000F20 :                     ; t | Task number
(1) 2238/ 6000F20 :                     ; ----------------------------------------------------------------
(1) 2239/ 6000F20 :                     
(1) 2240/ 6000F20 :                     		align 4
(1) 2241/ 6000F20 :                     slave_loop:
(1) 2243/ 6000F20 : D115                		mov	#_sysreg+comm1,r1		; DEBUG counter
(1) 2244/ 6000F22 : 6010                		mov.b	@r1,r0
(1) 2245/ 6000F24 : 7001                		add	#1,r0
(1) 2246/ 6000F26 : 2100                		mov.b	r0,@r1
(1) 2248/ 6000F28 : D114                		mov	#_sysreg+comm14,r1
(1) 2249/ 6000F2A : 6011                		mov.w	@r1,r0
(1) 2250/ 6000F2C : C907                		and	#%00000111,r0
(1) 2251/ 6000F2E : 4008                		shll2	r0
(1) 2252/ 6000F30 : 6103                		mov	r0,r1
(1) 2253/ 6000F32 : C702                		mova	slv_list,r0
(1) 2254/ 6000F34 : 301C                		add	r1,r0
(1) 2255/ 6000F36 : 6102                		mov	@r0,r1
(1) 2256/ 6000F38 : 412B                		jmp	@r1
(1) 2257/ 6000F3A : 0009                		nop
(1) 2258/ 6000F3C :                     		align 4
(1) 2259/ 6000F3C :                     
(1) 2260/ 6000F3C :                     ; ====================================================================
(1) 2261/ 6000F3C :                     
(1) 2262/ 6000F3C :                     		align 4
(1) 2263/ 6000F3C :                     slv_list:
(1) 2264/ 6000F3C : 0600 0F5C           		dc.l SlvMode_00
(1) 2265/ 6000F40 : 0600 0F60           		dc.l SlvMode_01
(1) 2266/ 6000F44 : 0600 0F5C           		dc.l SlvMode_00
(1) 2267/ 6000F48 : 0600 0F5C           		dc.l SlvMode_00
(1) 2268/ 6000F4C : 0600 0F5C           		dc.l SlvMode_00
(1) 2269/ 6000F50 : 0600 0F5C           		dc.l SlvMode_00
(1) 2270/ 6000F54 : 0600 0F5C           		dc.l SlvMode_00
(1) 2271/ 6000F58 : 0600 0F5C           		dc.l SlvMode_00
(1) 2272/ 6000F5C :                     
(1) 2273/ 6000F5C :                     ; ====================================================================
(1) 2274/ 6000F5C :                     ; ----------------------------------------------------------------
(1) 2275/ 6000F5C :                     ; NOTHING
(1) 2276/ 6000F5C :                     ; ----------------------------------------------------------------
(1) 2277/ 6000F5C :                     
(1) 2278/ 6000F5C :                     SlvMode_00:
(1) 2279/ 6000F5C : AFE0                		bra	slave_loop
(1) 2280/ 6000F5E : 0009                		nop
(1) 2281/ 6000F60 :                     
(1) 2282/ 6000F60 :                     ; ====================================================================
(1) 2283/ 6000F60 :                     ; ----------------------------------------------------------------
(1) 2284/ 6000F60 :                     ; Slave task 01
(1) 2285/ 6000F60 :                     ; ----------------------------------------------------------------
(1) 2286/ 6000F60 :                     
(1) 2287/ 6000F60 :                     		align 4
(1) 2288/ 6000F60 :                     SlvMode_01:
(1) 2289/ 6000F60 : D107                		mov	#$C0000000|CachSlv_CurrPage,r1
(1) 2290/ 6000F62 : D008                		mov	#RAM_Mars_CurrPlgnPage,r0
(1) 2291/ 6000F64 : 6002                		mov	@r0,r0
(1) 2292/ 6000F66 : 2102                		mov	r0,@r1
(1) 2293/ 6000F68 : D007                		mov	#$C0000000|MarsMdl_MdlLoop,r0	; Cache jump
(1) 2294/ 6000F6A : 400B                		jsr	@r0
(1) 2295/ 6000F6C : 0009                		nop
(1) 2296/ 6000F6E : D107                		mov	#_sysreg+comm14+1,r1
(1) 2297/ 6000F70 : E000                		mov	#0,r0
(1) 2298/ 6000F72 : AFD5                		bra	slave_loop
(1) 2299/ 6000F74 : 2100                		mov.b	r0,@r1
(1) 2300/ 6000F76 :                     		align 4
(1) 2301/ 6000F78 : 2000 4021 2000      		ltorg
          6000F7E : 402E C000 0690 
          6000F84 : 2600 7290 C000 
          6000F8A : 0158 2000 402F    
(1) 2302/ 6000F90 :                     
(1) 2303/ 6000F90 :                     ; ====================================================================
(1) 2304/ 6000F90 :                     ; ----------------------------------------------------------------
(1) 2305/ 6000F90 :                     ; Shared routines
(1) 2306/ 6000F90 :                     ; ----------------------------------------------------------------
(1) 2307/ 6000F90 :                     
(1) 2308/ 6000F90 :                     ; --------------------------------------------------------
(1) 2309/ 6000F90 :                     ; Mars_CachePurge, Mars_CachePurge_S
(1) 2310/ 6000F90 :                     ;
(1) 2311/ 6000F90 :                     ; Purges the internal cache, call this often.
(1) 2312/ 6000F90 :                     ;
(1) 2313/ 6000F90 :                     ; Breaks:
(1) 2314/ 6000F90 :                     ; r0-r1
(1) 2315/ 6000F90 :                     ; --------------------------------------------------------
(1) 2316/ 6000F90 :                     
(1) 2317/ 6000F90 :                     		align 4
(1) 2318/ 6000F90 :                     Mars_CachePurge:
(1) 2319/ 6000F90 : 9128                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(1) 2320/ 6000F92 : E010                		mov	#%10000,r0
(1) 2321/ 6000F94 : 2100                		mov.b	r0,@r1
(1) 2322/ 6000F96 : 0009                		nop
(1) 2323/ 6000F98 : 0009                		nop
(1) 2324/ 6000F9A : 0009                		nop
(1) 2325/ 6000F9C : 0009                		nop
(1) 2326/ 6000F9E : 0009                		nop
(1) 2327/ 6000FA0 : 0009                		nop
(1) 2328/ 6000FA2 : 0009                		nop
(1) 2329/ 6000FA4 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(1) 2330/ 6000FA6 : 000B                		rts
(1) 2331/ 6000FA8 : 2100                		mov.b	r0,@r1
(1) 2332/ 6000FAA :                     
(1) 2333/ 6000FAA :                     ; ----------------------------------------------------------------
(1) 2334/ 6000FAA :                     ; Mars_CacheRamCode
(1) 2335/ 6000FAA :                     ;
(1) 2336/ 6000FAA :                     ; Loads "fast code" into the SH2's cache, maximum size is
(1) 2337/ 6000FAA :                     ; $700 bytes aprox.
(1) 2338/ 6000FAA :                     ;
(1) 2339/ 6000FAA :                     ; Input:
(1) 2340/ 6000FAA :                     ; r1 | Code to send
(1) 2341/ 6000FAA :                     ; r2 | Size
(1) 2342/ 6000FAA :                     ;
(1) 2343/ 6000FAA :                     ; Breaks:
(1) 2344/ 6000FAA :                     ; r0/r3
(1) 2345/ 6000FAA :                     ; ----------------------------------------------------------------
(1) 2346/ 6000FAA :                     
(1) 2347/ 6000FAA :                     		align 4
(1) 2348/ 6000FAC :                     Mars_CacheRamCode:
(1) 2349/ 6000FAC : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 2350/ 6000FAE : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 2351/ 6000FB0 : 600C                		extu.b	r0,r0
(1) 2352/ 6000FB2 : 400E                		ldc	r0,sr
(1) 2353/ 6000FB4 : 9316                		mov	#_CCR,r3
(1) 2354/ 6000FB6 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 2355/ 6000FB8 : 2301                		mov.w	r0,@r3
(1) 2356/ 6000FBA : 0009                		nop
(1) 2357/ 6000FBC : 0009                		nop
(1) 2358/ 6000FBE : 0009                		nop
(1) 2359/ 6000FC0 : 0009                		nop
(1) 2360/ 6000FC2 : 0009                		nop
(1) 2361/ 6000FC4 : 0009                		nop
(1) 2362/ 6000FC6 : 0009                		nop
(1) 2363/ 6000FC8 : 0009                		nop
(1) 2364/ 6000FCA : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 2365/ 6000FCC : 2301                		mov.w	r0,@r3
(1) 2366/ 6000FCE : D304                		mov 	#$C0000000,r3
(1) 2367/ 6000FD0 : 4209                		shlr2	r2
(1) 2368/ 6000FD2 :                     .copy:
(1) 2369/ 6000FD2 : 6016                		mov 	@r1+,r0
(1) 2370/ 6000FD4 : 2302                		mov 	r0,@r3
(1) 2371/ 6000FD6 : 4210                		dt	r2
(1) 2372/ 6000FD8 : 8FFB                		bf/s	.copy
(1) 2373/ 6000FDA : 7304                		add 	#4,r3
(1) 2374/ 6000FDC : 000B                		rts
(1) 2375/ 6000FDE : 4F07                		ldc	@r15+,sr
(1) 2376/ 6000FE0 :                     		align 4
(1) 2377/ 6000FE0 : C000 0000 FE92      		ltorg
(1) 2378/ 6000FE6 :                     
(1) 2379/ 6000FE6 :                     ; --------------------------------------------------------
(1) 2380/ 6000FE6 :                     ; Mars_SetWatchdog
(1) 2381/ 6000FE6 :                     ;
(1) 2382/ 6000FE6 :                     ; Prepares watchdog interrupt
(1) 2383/ 6000FE6 :                     ;
(1) 2384/ 6000FE6 :                     ; Input:
(1) 2385/ 6000FE6 :                     ; r1 | Watchdog CPU clock divider
(1) 2386/ 6000FE6 :                     ; r2 | Watchdog timer
(1) 2387/ 6000FE6 :                     ; --------------------------------------------------------
(1) 2388/ 6000FE6 :                     
(1) 2389/ 6000FE6 :                     		align 4
(1) 2390/ 6000FE8 :                     Mars_SetWatchdog:
(1) 2391/ 6000FE8 : 0402                		stc	sr,r4
(1) 2392/ 6000FEA : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2393/ 6000FEC : 600C                		extu.b	r0,r0
(1) 2394/ 6000FEE : 400E                		ldc 	r0,sr
(1) 2395/ 6000FF0 : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2396/ 6000FF2 : 930D                		mov.l	#_CCR,r3		; Refresh Cache
(1) 2397/ 6000FF4 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 2398/ 6000FF6 : 2301                		mov.w	r0,@r3
(1) 2399/ 6000FF8 : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 2400/ 6000FFA : 2301                		mov.w	r0,@r3
(1) 2401/ 6000FFC : 9309                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 2402/ 6000FFE : 9009                		mov.w	#$5A00,r0		; Watchdog timer
(1) 2403/ 6001000 : 202B                		or	r2,r0
(1) 2404/ 6001002 : 2301                		mov.w	r0,@r3
(1) 2405/ 6001004 : 9007                		mov.w	#$A538,r0		; Enable Watchdog
(1) 2406/ 6001006 : 201B                		or	r1,r0
(1) 2407/ 6001008 : 2301                		mov.w	r0,@r3
(1) 2408/ 600100A : 440E                		ldc	r4,sr
(1) 2409/ 600100C : 000B                		rts
(1) 2410/ 600100E : 0009                		nop
(1) 2411/ 6001010 :                     		align 4
(1) 2412/ 6001010 : FE92 FE80 5A00      		ltorg
          6001016 : A538             
(1) 2413/ 6001018 :                     
(1) 2414/ 6001018 :                     ; ====================================================================
(1) 2415/ 6001018 :                     ; ----------------------------------------------------------------
(1) 2416/ 6001018 :                     ; Includes
(1) 2417/ 6001018 :                     ; ----------------------------------------------------------------
(1) 2418/ 6001018 :                     
(1) 2419/ 6001018 :                     		align 4
(1) 2420/ 6001018 :                     		include "system/mars/sound.asm"
(2)    1/ 6001018 :                     ; ===========================================================================
(2)    2/ 6001018 :                     ; -------------------------------------------------------------------
(2)    3/ 6001018 :                     ; 32X Sound, Slave CPU side
(2)    4/ 6001018 :                     ; -------------------------------------------------------------------
(2)    5/ 6001018 :                     
(2)    6/ 6001018 :                     ; --------------------------------------------------------
(2)    7/ 6001018 :                     ; Settings
(2)    8/ 6001018 :                     ; --------------------------------------------------------
(2)    9/ 6001018 :                     
(2)   10/ 6001018 : =$8                  MAX_PWMCHNL	equ 8		; Maximum channels to use
(2)   11/ 6001018 : =$3E80               SAMPLE_RATE	equ 16000
(2)   12/ 6001018 :                     
(2)   13/ 6001018 :                     ; --------------------------------------------------------
(2)   14/ 6001018 :                     ; Structs
(2)   15/ 6001018 :                     ; --------------------------------------------------------
(2)   16/ 6001018 :                     
(2)   17/ 6001018 :                     ; 32X sound channel
(2)   18/       0 :                     marspwm		struct
(2)   19/       0 :                     enbl		ds.l 1		; %EB00 SLlr | StereoEnable,Loop,left,right
(2)   20/       4 :                     read		ds.l 1		; READ point
(2)   21/       8 :                     bank		ds.l 1		; CS1 or CS3
(2)   22/       C :                     start		ds.l 1		; Start point $00xxxxxx << 8
(2)   23/      10 :                     length		ds.l 1		; Lenght << 8
(2)   24/      14 :                     loop		ds.l 1		; Loop point << 8
(2)   25/      18 :                     pitch		ds.l 1		; Pitch $xx.xx
(2)   26/      1C :                     vol		ds.l 1		; Volume ($0000-Max)
(2)   27/      20 :                     cbank		ds.l 1
(2)   28/      24 :                     cread		ds.l 1
(2)   29/      28 :                     ; len		ds.l 0
(2)   30/ 6001018 : =$28                 		endstruct
(2)   31/ 6001018 :                     
(2)   32/ 6001018 :                     ; ====================================================================
(2)   33/ 6001018 :                     ; --------------------------------------------------------
(2)   34/ 6001018 :                     ; Init Sound PWM
(2)   35/ 6001018 :                     ;
(2)   36/ 6001018 :                     ; Cycle register formulas:
(2)   37/ 6001018 :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   38/ 6001018 :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   39/ 6001018 :                     ;
(2)   40/ 6001018 :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   41/ 6001018 :                     ; --------------------------------------------------------
(2)   42/ 6001018 :                     
(2)   43/ 6001018 :                     		align 4
(2)   44/ 6001018 :                     MarsSound_Init:
(2)   45/ 6001018 : 4F13                		stc	gbr,@-r15
(2)   46/ 600101A : D00B                		mov	#_sysreg,r0
(2)   47/ 600101C : 401E                		ldc	r0,gbr
(2)   48/ 600101E : 9019                		mov	#$0105,r0					; Timing interval $01, Output L/R
(2)   49/ 6001020 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   50/ 6001022 : 9018                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Sample rate
(2)   51/ 6001024 : C119                		mov.w	r0,@(cycle,gbr)
(2)   52/ 6001026 : E001                		mov	#1,r0
(2)   53/ 6001028 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 600102A : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   55/ 600102C : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   56/ 600102E : D407                		mov	#RAM_Mars_PwmList,r4
(2)   57/ 6001030 : E328                		mov	#marspwm_len,r3
(2)   58/ 6001032 : E208                		mov	#MAX_PWMCHNL,r2
(2)   59/ 6001034 : 9110                		mov	#$200,r1
(2)   60/ 6001036 : D006                		mov	#RAM_Mars_PwmBackup,r0
(2)   61/ 6001038 :                     .next_one:
(2)   62/ 6001038 : 1408                		mov	r0,@(marspwm_cbank,r4)
(2)   63/ 600103A : 343C                		add	r3,r4
(2)   64/ 600103C : 4210                		dt	r2
(2)   65/ 600103E : 8FFB                		bf/s	.next_one
(2)   66/ 6001040 : 301C                		add	r1,r0
(2)   67/ 6001042 :                     
(2)   68/ 6001042 : 4F17                		ldc	@r15+,gbr
(2)   69/ 6001044 : 000B                		rts
(2)   70/ 6001046 : 0009                		nop
(2)   71/ 6001048 :                     		align 4
(2)   72/ 6001048 :                     
(2)   73/ 6001048 :                     ; ====================================================================
(2)   74/ 6001048 :                     
(2)   75/ 6001048 :                     ; PWM playback code is located at cache_slv.asm
(2)   76/ 6001048 :                     
(2)   77/ 6001048 :                     ; ====================================================================
(2)   78/ 6001048 :                     
(2)   79/ 6001048 : 2000 4000 2600      		ltorg			; Save literals
          600104E : 6150 2600 6290 
          6001054 : 0105 059F 0200    
(2)   80/ 600105A :                     
(1) 2421/ 600105A :                     		include "system/mars/video.asm"
(2)    1/ 600105A :                     ; ===========================================================================
(2)    2/ 600105A :                     ; ----------------------------------------------------------------
(2)    3/ 600105A :                     ; 32X Video, Master CPU side.
(2)    4/ 600105A :                     ; ----------------------------------------------------------------
(2)    5/ 600105A :                     
(2)    6/ 600105A :                     ; ====================================================================
(2)    7/ 600105A :                     ; --------------------------------------------------------
(2)    8/ 600105A :                     ; Settings
(2)    9/ 600105A :                     ; --------------------------------------------------------
(2)   10/ 600105A :                     
(2)   11/ 600105A : =$18000              MAX_MarsVram		equ $18000	; !! Maximum 32X graphics data stored on SDRAM for both 2D/3D
(2)   12/ 600105A :                     
(2)   13/ 600105A :                     ; ------------------------------------------------
(2)   14/ 600105A :                     ; 2D scrolling mode
(2)   15/ 600105A : =$10                 SET_MSCRLSIZE		equ 16		; !! Hard-coded, requires code modifications
(2)   16/ 600105A : =$150                SET_MSCRLWDTH		equ 320+16	; !! Affects 2D Scrolling, Super-Sprites and 3D Polygons
(2)   17/ 600105A : =$F0                 SET_MSCRLHGHT		equ 240		; !! ''
(2)   18/ 600105A : =$200                SET_TILEMAX		equ $0200	; Maximum block tiles to use (1-bit SIZES ONLY)
(2)   19/ 600105A : =$1E000              SET_FBVRAM_PATCH	equ $1E000	; Framebuffer location to store the affected XShift lines
(2)   20/ 600105A :                     ; SET_FBVRAM_BLANK	equ $1FD80	; Framebuffer location for the BLANK line
(2)   21/ 600105A :                     
(2)   22/ 600105A :                     ; ------------------------------------------------
(2)   23/ 600105A :                     ; 3D polygons mode
(2)   24/ 600105A :                     ; MAX_MOBJ		equ 64		; see system/shared.asm
(2)   25/ 600105A : =$140                SET_3DFIELD_WDTH	equ 320
(2)   26/ 600105A : =$E0                 SET_3DFIELD_HGHT	equ 224
(2)   27/ 600105A : =$100                MAX_FACES		equ 256		; Maximum 3D polygon faces to read
(2)   28/ 600105A : =$FFFFFFFFFFFFFD80   MAX_ZDIST		equ -$280	; Maximum 3D field distance (-value)
(2)   29/ 600105A :                     
(2)   30/ 600105A :                     ; --------------------------------------------------------
(2)   31/ 600105A :                     ; Variables
(2)   32/ 600105A :                     ; --------------------------------------------------------
(2)   33/ 600105A :                     
(2)   34/ 600105A : =$80                 PLGN_TEXURE		equ %10000000	; plypz_type (MSB)
(2)   35/ 600105A : =$40                 PLGN_TRI		equ %01000000
(2)   36/ 600105A :                     ; ** MORE variables system/shared.asm
(2)   37/ 600105A :                     
(2)   38/ 600105A :                     ; --------------------------------------------------------
(2)   39/ 600105A :                     ; Structs
(2)   40/ 600105A :                     ; --------------------------------------------------------
(2)   41/ 600105A :                     
(2)   42/ 600105A :                     ; FIXED SIZE: $40
(2)   43/       0 :                     plypz		struct
(2)   44/       0 :                     type		ds.l 1		; Type + Material settings (width + index add)
(2)   45/       4 :                     mtrl		ds.l 1		; Material data (ROM or SDRAM)
(2)   46/       8 :                     ytb		ds.l 1		; $YYYYyyyy: Y-Top Y / y-Bottom Y
(2)   47/       C :                     xl		ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   48/      10 :                     src_xl		ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   49/      14 :                     src_yl		ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   50/      18 :                     xl_dx		ds.l 1		; 0000.0000
(2)   51/      1C :                     xr_dx		ds.l 1		; 0000.0000
(2)   52/      20 :                     src_xl_dx	ds.l 1
(2)   53/      24 :                     src_xr_dx	ds.l 1
(2)   54/      28 :                     src_yl_dx	ds.l 1
(2)   55/      2C :                     src_yr_dx	ds.l 1
(2)   56/ 600105A : =$30                 		endstruct
(2)   57/ 600105A :                     
(2)   58/ 600105A :                     ; ** MORE strcts on system/shared.asm
(2)   59/ 600105A :                     
(2)   60/ 600105A :                     ; ------------------------------------------------
(2)   61/ 600105A :                     ; Polygon
(2)   62/       0 :                     plygn		struct
(2)   63/       0 :                     type		ds.l 1		; %MTww wwww aaaa aaaa | m-Solid/Tex t-Triangle
(2)   64/       4 :                     mtrl		ds.l 1		; Material data: Color or VRAM position (RAM_Mars_VramData)
(2)   65/       8 :                     points		ds.l 4*2	; X/Y positions
(2)   66/      28 :                     srcpnts		ds.w 4*2	; X/Y texture points 16-bit, UNUSED on solid color
(2)   67/      38 :                     ; len		ds.l 0
(2)   68/ 600105A : =$38                 		endstruct
(2)   69/ 600105A :                     
(2)   70/ 600105A :                     ; ====================================================================
(2)   71/ 600105A :                     ; --------------------------------------------------------
(2)   72/ 600105A :                     ; Init MARS Video
(2)   73/ 600105A :                     ;
(2)   74/ 600105A :                     ; Breaks:
(2)   75/ 600105A :                     ; r1-r4
(2)   76/ 600105A :                     ; --------------------------------------------------------
(2)   77/ 600105A :                     
(2)   78/ 600105A :                     		align 4
(2)   79/ 600105C :                     MarsVideo_Init:
(2)   80/ 600105C : 9144                		mov	#SET_MSCRLWDTH+SET_MSCRLSIZE,r1	; Set scroll-area settings
(2)   81/ 600105E : 9244                		mov	#SET_MSCRLHGHT+SET_MSCRLSIZE,r2
(2)   82/ 6001060 : 221E                		mulu	r1,r2
(2)   83/ 6001062 : 6013                		mov	r1,r0
(2)   84/ 6001064 : C211                		mov	r0,@(marsGbl_Scrl_Wdth,gbr)
(2)   85/ 6001066 : 6023                		mov	r2,r0
(2)   86/ 6001068 : C212                		mov	r0,@(marsGbl_Scrl_Hght,gbr)
(2)   87/ 600106A : 001A                		sts	macl,r0
(2)   88/ 600106C : C210                		mov	r0,@(marsGbl_Scrl_Size,gbr)
(2)   89/ 600106E : 903D                		mov	#$200,r0
(2)   90/ 6001070 : C214                		mov	r0,@(marsGbl_Scrl_FbOut,gbr)
(2)   91/ 6001072 : E000                		mov	#0,r0
(2)   92/ 6001074 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(2)   93/ 6001076 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(2)   94/ 6001078 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(2)   95/ 600107A : 9038                		mov	#SET_3DFIELD_WDTH,r0
(2)   96/ 600107C : C206                		mov	r0,@(marsGbl_3D_OutWidth,gbr)
(2)   97/ 600107E : 9037                		mov	#SET_3DFIELD_HGHT,r0
(2)   98/ 6001080 : C207                		mov	r0,@(marsGbl_3D_OutHeight,gbr)
(2)   99/ 6001082 : 000B                		rts
(2)  100/ 6001084 : 0009                		nop
(2)  101/ 6001086 :                     		align 4
(2)  102/ 6001088 :                     
(2)  103/ 6001088 :                     ; ====================================================================
(2)  104/ 6001088 :                     ; ----------------------------------------------------------------
(2)  105/ 6001088 :                     ; Subroutines
(2)  106/ 6001088 :                     ; ----------------------------------------------------------------
(2)  107/ 6001088 :                     
(2)  108/ 6001088 :                     ; --------------------------------------------------------
(2)  109/ 6001088 :                     ; MarsVideo_FixTblShift
(2)  110/ 6001088 :                     ;
(2)  111/ 6001088 :                     ; Fix the affected $xxFF lines (solve that HW errata),
(2)  112/ 6001088 :                     ; Call this BEFORE flipping the Framebuffer.
(2)  113/ 6001088 :                     ;
(2)  114/ 6001088 :                     ; Input:
(2)  115/ 6001088 :                     ; r1 | Start line
(2)  116/ 6001088 :                     ; r2 | Number of lines
(2)  117/ 6001088 :                     ; r3 | Location for the fixed lines
(2)  118/ 6001088 :                     ;
(2)  119/ 6001088 :                     ; Breaks:
(2)  120/ 6001088 :                     ; r7-r14
(2)  121/ 6001088 :                     ; --------------------------------------------------------
(2)  122/ 6001088 :                     
(2)  123/ 6001088 :                     		align 4
(2)  124/ 6001088 :                     MarsVideo_FixTblShift:
(2)  125/ 6001088 : DE15                		mov	#_vdpreg,r14
(2)  126/ 600108A : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  127/ 600108C : C903                		and	#%11,r0
(2)  128/ 600108E : 8801                		cmp/eq	#1,r0
(2)  129/ 6001090 : 8B23                		bf	.ptchset
(2)  130/ 6001092 : C501                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set? (EXTERNAL value)
(2)  131/ 6001094 : C901                		and	#1,r0
(2)  132/ 6001096 : 2008                		tst	r0,r0
(2)  133/ 6001098 : 891F                		bt	.ptchset
(2)  134/ 600109A :                     
(2)  135/ 600109A : DE12                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  136/ 600109C : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  137/ 600109E : 3C3C                		add	r3,r12
(2)  138/ 60010A0 : 6013                		mov	r1,r0
(2)  139/ 60010A2 : 4008                		shll2	r0
(2)  140/ 60010A4 : 3E0C                		add	r0,r14
(2)  141/ 60010A6 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  142/ 60010A8 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  143/ 60010AA : E0FF                		mov	#-1,r0
(2)  144/ 60010AC : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  145/ 60010AE : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  146/ 60010B0 :                     .loop:
(2)  147/ 60010B0 : 60D1                		mov.w	@r13,r0
(2)  148/ 60010B2 : 2099                		and	r9,r0
(2)  149/ 60010B4 : 6703                		mov	r0,r7
(2)  150/ 60010B6 : 20A9                		and	r10,r0
(2)  151/ 60010B8 : 30A0                		cmp/eq	r10,r0
(2)  152/ 60010BA : 8B0B                		bf	.tblexit
(2)  153/ 60010BC : 4700                		shll	r7
(2)  154/ 60010BE : 37EC                		add	r14,r7
(2)  155/ 60010C0 : 60C3                		mov	r12,r0
(2)  156/ 60010C2 : 4001                		shlr	r0
(2)  157/ 60010C4 : 2D01                		mov.w	r0,@r13
(2)  158/ 60010C6 : 9314                		mov	#(320+4)/2,r3
(2)  159/ 60010C8 :                     .copy:
(2)  160/ 60010C8 : 6071                		mov.w	@r7,r0
(2)  161/ 60010CA : 2C01                		mov.w	r0,@r12
(2)  162/ 60010CC : 7702                		add	#2,r7
(2)  163/ 60010CE : 4310                		dt	r3
(2)  164/ 60010D0 : 8FFA                		bf/s	.copy
(2)  165/ 60010D2 : 7C02                		add	#2,r12
(2)  166/ 60010D4 :                     .tblexit:
(2)  167/ 60010D4 : 4B10                		dt	r11
(2)  168/ 60010D6 : 8FEB                		bf/s	.loop
(2)  169/ 60010D8 : 7D02                		add	#2,r13
(2)  170/ 60010DA :                     .ptchset:
(2)  171/ 60010DA : 000B                		rts
(2)  172/ 60010DC : 0009                		nop
(2)  173/ 60010DE :                     		align 4
(2)  174/ 60010E0 : 2000 4100 2400      		ltorg
          60010E6 : 0000 0160 0100 
          60010EC : 0200 0140 00E0 
          60010F2 : 00A2             
(2)  175/ 60010F4 :                     
(2)  176/ 60010F4 :                     ; ====================================================================
(2)  177/ 60010F4 :                     ; ----------------------------------------------------------------
(2)  178/ 60010F4 :                     ; 2D scrolling-area section
(2)  179/ 60010F4 :                     ; ----------------------------------------------------------------
(2)  180/ 60010F4 :                     
(2)  181/ 60010F4 :                     ; --------------------------------------------------------
(2)  182/ 60010F4 :                     ; MarsVideo_ShowScrlBg
(2)  183/ 60010F4 :                     ;
(2)  184/ 60010F4 :                     ; Make a visible section of any scrolling area
(2)  185/ 60010F4 :                     ; into the current framebuffer.
(2)  186/ 60010F4 :                     ;
(2)  187/ 60010F4 :                     ; Input:
(2)  188/ 60010F4 :                     ; r1 | Top Y
(2)  189/ 60010F4 :                     ; r2 | Bottom Y
(2)  190/ 60010F4 :                     ;
(2)  191/ 60010F4 :                     ; Breaks:
(2)  192/ 60010F4 :                     ; r4-r14
(2)  193/ 60010F4 :                     ;
(2)  194/ 60010F4 :                     ; NOTE:
(2)  195/ 60010F4 :                     ; After endstrcting all your screens call
(2)  196/ 60010F4 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  197/ 60010F4 :                     ; --------------------------------------------------------
(2)  198/ 60010F4 :                     
(2)  199/ 60010F4 :                     		align 4
(2)  200/ 60010F4 :                     MarsVideo_ShowScrlBg:
(2)  201/ 60010F4 : DE1C                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  202/ 60010F6 : EB00                		mov	#0,r11				; r11 - line counter
(2)  203/ 60010F8 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0	; r13 - Framebuffer pixeldata position
(2)  204/ 60010FA : 6D03                		mov	r0,r13
(2)  205/ 60010FC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0	; r12 - Full size of screen-scroll
(2)  206/ 60010FE : 6C03                		mov	r0,r12
(2)  207/ 6001100 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  208/ 6001102 : 6A03                		mov	r0,r10
(2)  209/ 6001104 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  210/ 6001106 : 6903                		mov	r0,r9
(2)  211/ 6001108 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  212/ 600110A : 6803                		mov	r0,r8
(2)  213/ 600110C : 3120                		cmp/eq	r2,r1
(2)  214/ 600110E : 8916                		bt	.bad_y
(2)  215/ 6001110 : 3123                		cmp/ge	r2,r1
(2)  216/ 6001112 : 8914                		bt	.bad_y
(2)  217/ 6001114 : 6613                		mov	r1,r6
(2)  218/ 6001116 : 6013                		mov	r1,r0
(2)  219/ 6001118 : 4000                		shll	r0
(2)  220/ 600111A : 3E0C                		add	r0,r14
(2)  221/ 600111C : 28AE                		mulu	r10,r8
(2)  222/ 600111E : 001A                		sts	macl,r0
(2)  223/ 6001120 : 390C                		add	r0,r9
(2)  224/ 6001122 :                     .ln_loop:
(2)  225/ 6001122 : 6893                		mov	r9,r8
(2)  226/ 6001124 : 38C3                		cmp/ge	r12,r8
(2)  227/ 6001126 : 8B00                		bf	.xl_r
(2)  228/ 6001128 : 38C8                		sub	r12,r8
(2)  229/ 600112A :                     .xl_r:
(2)  230/ 600112A : 6983                		mov	r8,r9
(2)  231/ 600112C : 39AC                		add	r10,r9			; Add Y
(2)  232/ 600112E : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  233/ 6001130 : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  234/ 6001132 : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  235/ 6001134 : 7E02                		add	#2,r14
(2)  236/ 6001136 : 7601                		add	#1,r6
(2)  237/ 6001138 : 3620                		cmp/eq	r2,r6
(2)  238/ 600113A : 8FF2                		bf/s	.ln_loop
(2)  239/ 600113C : 7B02                		add	#2,r11
(2)  240/ 600113E :                     .bad_y:
(2)  241/ 600113E : 000B                		rts
(2)  242/ 6001140 : 0009                		nop
(2)  243/ 6001142 :                     		align 4
(2)  244/ 6001144 :                     
(2)  245/ 6001144 :                     ; --------------------------------------------------------
(2)  246/ 6001144 :                     ; Call this AFTER after drawing to the scrolling area.
(2)  247/ 6001144 :                     ; --------------------------------------------------------
(2)  248/ 6001144 :                     
(2)  249/ 6001144 :                     		align 4
(2)  250/ 6001144 :                     marsScrl_CopyTopBot:
(2)  251/ 6001144 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  252/ 6001146 : 6103                		mov	r0,r1
(2)  253/ 6001148 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  254/ 600114A : 6303                		mov	r0,r3
(2)  255/ 600114C : D006                		mov	#_framebuffer,r0
(2)  256/ 600114E : 310C                		add	r0,r1
(2)  257/ 6001150 : 6213                		mov	r1,r2
(2)  258/ 6001152 : 323C                		add	r3,r2
(2)  259/ 6001154 : E350                		mov	#320/4,r3
(2)  260/ 6001156 : 0009                		nop
(2)  261/ 6001158 :                     .copy_top:
(2)  262/ 6001158 : 6016                		mov	@r1+,r0
(2)  263/ 600115A : 0009                		nop
(2)  264/ 600115C : 2202                		mov	r0,@r2
(2)  265/ 600115E : 7204                		add	#4,r2
(2)  266/ 6001160 : 4310                		dt	r3
(2)  267/ 6001162 : 8BF9                		bf	.copy_top
(2)  268/ 6001164 : 000B                		rts
(2)  269/ 6001166 : 0009                		nop
(2)  270/ 6001168 :                     		align 4
(2)  271/ 6001168 : 2400 0000           		ltorg
(2)  272/ 600116C :                     
(2)  273/ 600116C :                     ; ====================================================================
(2)  274/ 600116C :                     ; ----------------------------------------------------------------
(2)  275/ 600116C :                     ; Super sprites
(2)  276/ 600116C :                     ; ----------------------------------------------------------------
(2)  277/ 600116C :                     
(2)  278/ 600116C :                     ; --------------------------------------------------------
(2)  279/ 600116C :                     ; MarsVideo_SuperSpr_Make
(2)  280/ 600116C :                     ; --------------------------------------------------------
(2)  281/ 600116C :                     
(2)  282/ 600116C :                     		align 4
(2)  283/ 600116C :                     MarsVideo_SuperSpr_Make:
(2)  284/ 600116C : 4F22                		sts	pr,@-r15
(2)  285/ 600116E : DE2C                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r14
(2)  286/ 6001170 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  287/ 6001172 : 6D03                		mov	r0,r13
(2)  288/ 6001174 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  289/ 6001176 : 6C03                		mov	r0,r12
(2)  290/ 6001178 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  291/ 600117A : 6B03                		mov	r0,r11
(2)  292/ 600117C : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  293/ 600117E : 6A03                		mov	r0,r10
(2)  294/ 6001180 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  295/ 6001182 : 6903                		mov	r0,r9
(2)  296/ 6001184 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  297/ 6001186 : 6203                		mov	r0,r2
(2)  298/ 6001188 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  299/ 600118A : 984D                		mov	#Dreq_Buff2,r8				; ** DREQ READ **
(2)  300/ 600118C : 380C                		add	r0,r8
(2)  301/ 600118E : 904C                		mov	#sspr_len*(MAX_MARSSPR-1),r0	; <-- LAZY REVERSE ORDER
(2)  302/ 6001190 : 380C                		add	r0,r8					; <--
(2)  303/ 6001192 :                     	; ----------------------------------------
(2)  304/ 6001192 :                     	; r14 - Sprite draw list
(2)  305/ 6001192 :                     	; r13 - Scroll size W*H
(2)  306/ 6001192 :                     	; r12 - Scroll height
(2)  307/ 6001192 :                     	; r11 - Scroll width
(2)  308/ 6001192 :                     	; r10 - Scroll TL-pos read *
(2)  309/ 6001192 :                     	;  r9 - Scroll Y-pos read *
(2)  310/ 6001192 :                     	;  r8 - Current SuperSprite
(2)  311/ 6001192 : E720                		mov	#MAX_MARSSPR,r7
(2)  312/ 6001194 :                     .next_sspr:
(2)  313/ 6001194 : 8480                		mov.b	@(sspr_flags,r8),r0
(2)  314/ 6001196 : C880                		tst	#$80,r0
(2)  315/ 6001198 : 893A                		bt	.off_sspr
(2)  316/ 600119A : 660C                		extu.b	r0,r6
(2)  317/ 600119C : 5083                		mov	@(sspr_vram,r8),r0
(2)  318/ 600119E : 400A                		lds	r0,mach
(2)  319/ 60011A0 : 8583                		mov.w	@(sspr_indx,r8),r0
(2)  320/ 60011A2 : 600C                		extu.b	r0,r0
(2)  321/ 60011A4 : 4628                		shll16	r6
(2)  322/ 60011A6 : 260B                		or	r0,r6			; r6 - $000f00ii: f-Flags i-Index
(2)  323/ 60011A8 : 8582                		mov.w	@(sspr_size,r8),r0
(2)  324/ 60011AA : 650C                		extu.b	r0,r5			; Y size
(2)  325/ 60011AC : 4019                		shlr8	r0
(2)  326/ 60011AE : 640C                		extu.b	r0,r4			; X size
(2)  327/ 60011B0 : 8584                		mov.w	@(sspr_x_pos,r8),r0
(2)  328/ 60011B2 : 620F                		exts.w	r0,r2
(2)  329/ 60011B4 : 8585                		mov.w	@(sspr_y_pos,r8),r0
(2)  330/ 60011B6 : 630F                		exts.w	r0,r3
(2)  331/ 60011B8 : 7401                		add	#1,r4
(2)  332/ 60011BA : 7501                		add	#1,r5
(2)  333/ 60011BC : 4408                		shll2	r4			; Expand sizes to 8pixels(cells)
(2)  334/ 60011BE : 4508                		shll2	r5
(2)  335/ 60011C0 : 4400                		shll	r4
(2)  336/ 60011C2 : 4500                		shll	r5
(2)  337/ 60011C4 : 6023                		mov	r2,r0			; Offscreen checks
(2)  338/ 60011C6 : 304C                		add	r4,r0
(2)  339/ 60011C8 : 4015                		cmp/pl	r0
(2)  340/ 60011CA : 8B21                		bf	.off_sspr
(2)  341/ 60011CC : 6033                		mov	r3,r0
(2)  342/ 60011CE : 305C                		add	r5,r0
(2)  343/ 60011D0 : 4015                		cmp/pl	r0
(2)  344/ 60011D2 : 8B1D                		bf	.off_sspr
(2)  345/ 60011D4 : E054                		mov	#SET_MSCRLWDTH>>2,r0
(2)  346/ 60011D6 : 4008                		shll2	r0
(2)  347/ 60011D8 : 3203                		cmp/ge	r0,r2
(2)  348/ 60011DA : 8919                		bt	.off_sspr
(2)  349/ 60011DC : E03C                		mov	#SET_MSCRLHGHT>>2,r0
(2)  350/ 60011DE : 4008                		shll2	r0
(2)  351/ 60011E0 : 3303                		cmp/ge	r0,r3
(2)  352/ 60011E2 : 8915                		bt	.off_sspr
(2)  353/ 60011E4 : 8581                		mov.w	@(sspr_frame,r8),r0
(2)  354/ 60011E6 : 254F                		muls	r4,r5
(2)  355/ 60011E8 : 011A                		sts	macl,r1
(2)  356/ 60011EA : 210F                		muls	r0,r1
(2)  357/ 60011EC : 001A                		sts	macl,r0
(2)  358/ 60011EE : 010A                		sts	mach,r1
(2)  359/ 60011F0 : 310C                		add	r0,r1
(2)  360/ 60011F2 : E002                		mov	#CS1>>24,r0
(2)  361/ 60011F4 : 4028                		shll16	r0
(2)  362/ 60011F6 : 4018                		shll8	r0
(2)  363/ 60011F8 : 3103                		cmp/ge	r0,r1
(2)  364/ 60011FA : 8901                		bt	.from_rom
(2)  365/ 60011FC : D009                		mov	#RAM_Mars_VramData,r0
(2)  366/ 60011FE : 310C                		add	r0,r1
(2)  367/ 6001200 :                     .from_rom:
(2)  368/ 6001200 :                     	; r1 | Graphics data *
(2)  369/ 6001200 :                     	; r2 | Xpos *
(2)  370/ 6001200 :                     	; r3 | Ypos *
(2)  371/ 6001200 :                     	; r4 | Xsize *
(2)  372/ 6001200 :                     	; r5 | Ysize *
(2)  373/ 6001200 :                     	; r6 | Flags + Pixel increment *
(2)  374/ 6001200 : 7E10                		add	#$10,r14
(2)  375/ 6001202 : 60E3                		mov	r14,r0
(2)  376/ 6001204 : 2066                		mov	r6,@-r0
(2)  377/ 6001206 : 2055                		mov.w	r5,@-r0
(2)  378/ 6001208 : 2045                		mov.w	r4,@-r0
(2)  379/ 600120A : 2035                		mov.w	r3,@-r0
(2)  380/ 600120C : 2025                		mov.w	r2,@-r0
(2)  381/ 600120E : 2016                		mov	r1,@-r0
(2)  382/ 6001210 :                     .off_sspr:
(2)  383/ 6001210 : E010                		mov	#sspr_len,r0
(2)  384/ 6001212 : 4710                		dt	r7
(2)  385/ 6001214 : 8FBE                		bf/s	.next_sspr
(2)  386/ 6001216 : 3808                		sub	r0,r8			; <-- LAZY REVERSE ORDER
(2)  387/ 6001218 :                     .exit_sspr:
(2)  388/ 6001218 : 4F26                		lds	@r15+,pr
(2)  389/ 600121A : 000B                		rts
(2)  390/ 600121C : 0009                		nop
(2)  391/ 600121E :                     		align 4
(2)  392/ 6001220 : C000 0000 0600      		ltorg
          6001226 : FAA0 0620 01F0    
(2)  393/ 600122C :                     
(2)  394/ 600122C :                     ; --------------------------------------------------------
(2)  395/ 600122C :                     ; MarsVideo_SuperSpr_Draw
(2)  396/ 600122C :                     ; --------------------------------------------------------
(2)  397/ 600122C :                     
(2)  398/ 600122C :                     		align 4
(2)  399/ 600122C :                     MarsVideo_SuperSpr_Draw:
(2)  400/ 600122C : 4F22                		sts	pr,@-r15
(2)  401/ 600122E : DE65                		mov	#_overwrite,r14			; <--
(2)  402/ 6001230 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  403/ 6001232 : 6D03                		mov	r0,r13
(2)  404/ 6001234 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  405/ 6001236 : 6C03                		mov	r0,r12
(2)  406/ 6001238 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  407/ 600123A : 6B03                		mov	r0,r11
(2)  408/ 600123C : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  409/ 600123E : 6A03                		mov	r0,r10
(2)  410/ 6001240 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  411/ 6001242 : 6903                		mov	r0,r9
(2)  412/ 6001244 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  413/ 6001246 : 6803                		mov	r0,r8
(2)  414/ 6001248 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  415/ 600124A : 3E8C                		add	r8,r14
(2)  416/ 600124C : D85E                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r8
(2)  417/ 600124E : E720                		mov	#MAX_MARSSPR,r7
(2)  418/ 6001250 :                     .next_piece:
(2)  419/ 6001250 : E000                		mov	#0,r0
(2)  420/ 6001252 : 6182                		mov	@r8,r1
(2)  421/ 6001254 : 2802                		mov	r0,@r8
(2)  422/ 6001256 : 2118                		tst	r1,r1
(2)  423/ 6001258 : 8907                		bt	.no_slot
(2)  424/ 600125A : 6083                		mov	r8,r0
(2)  425/ 600125C : 7004                		add	#4,r0
(2)  426/ 600125E : 6205                		mov.w	@r0+,r2
(2)  427/ 6001260 : 6305                		mov.w	@r0+,r3
(2)  428/ 6001262 : 6405                		mov.w	@r0+,r4
(2)  429/ 6001264 : 6505                		mov.w	@r0+,r5
(2)  430/ 6001266 : B007                		bsr	scrlDrw_SSprDraw
(2)  431/ 6001268 : 6606                		mov	@r0+,r6
(2)  432/ 600126A :                     .no_slot:
(2)  433/ 600126A : 4710                		dt	r7
(2)  434/ 600126C : 8FF0                		bf/s	.next_piece
(2)  435/ 600126E : 7810                		add	#$10,r8
(2)  436/ 6001270 : 4F26                		lds	@r15+,pr
(2)  437/ 6001272 : 000B                		rts
(2)  438/ 6001274 : 0009                		nop
(2)  439/ 6001276 :                     		align 4
(2)  440/ 6001278 :                     
(2)  441/ 6001278 :                     ; 		mov	#_DMASOURCE1,r12
(2)  442/ 6001278 :                     ; 		mov	#%0101001011100000,r0
(2)  443/ 6001278 :                     ; 		mov	r0,@($0C,r12)
(2)  444/ 6001278 :                     ; 		mov	#_overwrite+$200,r0
(2)  445/ 6001278 :                     ; 		mov	r0,@($04,r12)
(2)  446/ 6001278 :                     ; 		mov	#CS3,r0
(2)  447/ 6001278 :                     ; 		mov	r0,@r12
(2)  448/ 6001278 :                     ; 		mov	#320*96,r0
(2)  449/ 6001278 :                     ; 		mov	r0,@($08,r12)
(2)  450/ 6001278 :                     ; 		mov	#%0101001011100000|1,r0
(2)  451/ 6001278 :                     ; 		mov	r0,@($0C,r12)
(2)  452/ 6001278 :                     ; .wait_dma:	mov	@($C,r12),r0		; Still on DMA?
(2)  453/ 6001278 :                     ; 		tst	#%10,r0
(2)  454/ 6001278 :                     ; 		bt	.wait_dma
(2)  455/ 6001278 :                     ; 		mov	#%0101001011100000,r0
(2)  456/ 6001278 :                     ; 		mov	r0,@($C,r12)
(2)  457/ 6001278 :                     
(2)  458/ 6001278 :                     ; --------------------------------------------------------
(2)  459/ 6001278 :                     ; scrlDrw_SSprDraw
(2)  460/ 6001278 :                     ;
(2)  461/ 6001278 :                     ; Inputs:
(2)  462/ 6001278 :                     ; r1 | Graphics data *
(2)  463/ 6001278 :                     ; r2 | Xpos *
(2)  464/ 6001278 :                     ; r3 | Ypos *
(2)  465/ 6001278 :                     ; r4 | Xsize *
(2)  466/ 6001278 :                     ; r5 | Ysize *
(2)  467/ 6001278 :                     ; r6 | Flags + Pixel increment *
(2)  468/ 6001278 :                     ;
(2)  469/ 6001278 :                     ; In Loop:
(2)  470/ 6001278 :                     ; r14 - Framebuffer output
(2)  471/ 6001278 :                     ; r13 - Scroll size W*H
(2)  472/ 6001278 :                     ; r12 - Scroll height
(2)  473/ 6001278 :                     ; r11 - Scroll width
(2)  474/ 6001278 :                     ; r10 - Scroll TL-pos read
(2)  475/ 6001278 :                     ;  r9 - Scroll Y-pos read
(2)  476/ 6001278 :                     ;
(2)  477/ 6001278 :                     ; Breaks:
(2)  478/ 6001278 :                     ; r1-r6
(2)  479/ 6001278 :                     ; --------------------------------------------------------
(2)  480/ 6001278 :                     
(2)  481/ 6001278 :                     		align 4
(2)  482/ 6001278 :                     scrlDrw_SSprDraw:
(2)  483/ 6001278 : 2F76                		mov	r7,@-r15
(2)  484/ 600127A : 2F86                		mov	r8,@-r15
(2)  485/ 600127C : 2F96                		mov	r9,@-r15
(2)  486/ 600127E : 2FA6                		mov	r10,@-r15
(2)  487/ 6001280 : 2FC6                		mov	r12,@-r15
(2)  488/ 6001282 :                     	; Y limits
(2)  489/ 6001282 : 6033                		mov	r3,r0
(2)  490/ 6001284 : 4011                .y_low:		cmp/pz	r0
(2)  491/ 6001286 : 8900                		bt	.y_mid
(2)  492/ 6001288 : E000                		mov	#0,r0
(2)  493/ 600128A : 30C3                .y_mid:		cmp/ge	r12,r0
(2)  494/ 600128C : 8B01                		bf	.y_ok
(2)  495/ 600128E : E03C                		mov	#SET_MSCRLHGHT>>2,r0	; 240
(2)  496/ 6001290 : 4008                		shll2	r0
(2)  497/ 6001292 :                     .y_ok:
(2)  498/ 6001292 : 309C                		add	r9,r0
(2)  499/ 6001294 : 20BF                		muls	r11,r0			; macl - Y pos
(2)  500/ 6001296 :                     	; No X limits
(2)  501/ 6001296 : 6C23                		mov	r2,r12			; X-pos
(2)  502/ 6001298 : 3CAC                		add	r10,r12
(2)  503/ 600129A : 001A                		sts	macl,r0
(2)  504/ 600129C : 3C0C                		add	r0,r12
(2)  505/ 600129E : 3CD3                .xy_xwrap:	cmp/ge	r13,r12
(2)  506/ 60012A0 : 8B01                		bf	.xy_flip
(2)  507/ 60012A2 : AFFC                		bra	.xy_xwrap
(2)  508/ 60012A4 : 3CD8                		sub	r13,r12
(2)  509/ 60012A6 :                     .xy_flip:
(2)  510/ 60012A6 : E0FC                		mov	#-4,r0
(2)  511/ 60012A8 : 2C09                		and	r0,r12
(2)  512/ 60012AA :                     	; ---------------------------------------
(2)  513/ 60012AA : 6069                		swap	r6,r0			; Y flip? start
(2)  514/ 60012AC : C802                		tst	#%10,r0
(2)  515/ 60012AE : 8903                		bt	.y_flip
(2)  516/ 60012B0 : 254F                		muls	r4,r5
(2)  517/ 60012B2 : 001A                		sts	macl,r0
(2)  518/ 60012B4 : 310C                		add	r0,r1			; Flip Y src
(2)  519/ 60012B6 : 3148                		sub	r4,r1
(2)  520/ 60012B8 :                     .y_flip:
(2)  521/ 60012B8 : E804                		mov	#4,r8
(2)  522/ 60012BA : 6069                		swap	r6,r0			; X flip?
(2)  523/ 60012BC : C801                		tst	#%01,r0
(2)  524/ 60012BE : 8903                		bt	.x_flip
(2)  525/ 60012C0 : 688B                		neg	r8,r8
(2)  526/ 60012C2 : 6043                		mov	r4,r0
(2)  527/ 60012C4 : 70FC                		add	#-4,r0
(2)  528/ 60012C6 : 310C                		add	r0,r1
(2)  529/ 60012C8 :                     .x_flip:
(2)  530/ 60012C8 : 4311                		cmp/pz	r3
(2)  531/ 60012CA : 8909                		bt	.y_top
(2)  532/ 60012CC : 353C                		add	r3,r5
(2)  533/ 60012CE : 234F                		muls	r4,r3
(2)  534/ 60012D0 : 6069                		swap	r6,r0
(2)  535/ 60012D2 : C802                		tst	#%10,r0
(2)  536/ 60012D4 : 8902                		bt	.y_rflip
(2)  537/ 60012D6 : 001A                		sts	macl,r0
(2)  538/ 60012D8 : A001                		bra	.y_rflipc
(2)  539/ 60012DA : 600B                		neg	r0,r0
(2)  540/ 60012DC :                     .y_rflip:
(2)  541/ 60012DC : 001A                		sts	macl,r0
(2)  542/ 60012DE :                     .y_rflipc:
(2)  543/ 60012DE : 3108                		sub	r0,r1
(2)  544/ 60012E0 :                     .y_top:
(2)  545/ 60012E0 : 6033                		mov	r3,r0
(2)  546/ 60012E2 : 305C                		add	r5,r0
(2)  547/ 60012E4 : E93C                		mov	#SET_MSCRLHGHT>>2,r9	; 240
(2)  548/ 60012E6 : 4908                		shll2	r9
(2)  549/ 60012E8 : 3093                		cmp/ge	r9,r0
(2)  550/ 60012EA : 8B01                		bf	.y_bot
(2)  551/ 60012EC : 3098                		sub	r9,r0
(2)  552/ 60012EE : 3508                		sub	r0,r5
(2)  553/ 60012F0 :                     .y_bot:
(2)  554/ 60012F0 : 0009                		nop
(2)  555/ 60012F2 : 6923                		mov	r2,r9		; r9 - X size
(2)  556/ 60012F4 : 394C                		add	r4,r9
(2)  557/ 60012F6 : 6069                		swap	r6,r0		; Y flip? start
(2)  558/ 60012F8 : C802                		tst	#%10,r0
(2)  559/ 60012FA : 8900                		bt	.y_flipr
(2)  560/ 60012FC : 644B                		neg	r4,r4
(2)  561/ 60012FE :                     .y_flipr:
(2)  562/ 60012FE : E0FC                		mov	#-4,r0
(2)  563/ 6001300 : 2109                		and	r0,r1
(2)  564/ 6001302 :                     
(2)  565/ 6001302 :                     	; ---------------------------------------
(2)  566/ 6001302 :                     	; LOOP
(2)  567/ 6001302 :                     	; ---------------------------------------
(2)  568/ 6001302 :                     	; r1 - Frame data line pos
(2)  569/ 6001302 :                     	; r2 - X pos read
(2)  570/ 6001302 :                     	; r3 -
(2)  571/ 6001302 :                     	; r4 - Y increment f/b
(2)  572/ 6001302 :                     	; r5 - Y lines / X current beam
(2)  573/ 6001302 :                     	; r6 - flags (X flip only) | pixel increment
(2)  574/ 6001302 :                     	; r7 - current TL pos
(2)  575/ 6001302 :                     	; r8 - X increment f/b
(2)  576/ 6001302 :                     	; r9 - X end
(2)  577/ 6001302 :                     	; r10 -
(2)  578/ 6001302 :                     	; r11
(2)  579/ 6001302 :                     	; r12
(2)  580/ 6001302 :                     .y_loop:
(2)  581/ 6001302 : 3CD3                		cmp/ge	r13,r12
(2)  582/ 6001304 : 8B00                		bf	.tl_snap
(2)  583/ 6001306 : 3CD8                		sub	r13,r12
(2)  584/ 6001308 :                     .tl_snap:
(2)  585/ 6001308 : 2F16                		mov	r1,@-r15
(2)  586/ 600130A : 2F26                		mov	r2,@-r15
(2)  587/ 600130C : 2F46                		mov	r4,@-r15
(2)  588/ 600130E : 2F56                		mov	r5,@-r15
(2)  589/ 6001310 : 2FC6                		mov	r12,@-r15
(2)  590/ 6001312 : E551                		mov	#(320+4)>>2,r5
(2)  591/ 6001314 : 4508                		shll2	r5
(2)  592/ 6001316 :                     
(2)  593/ 6001316 :                     ; ---------------------------------------
(2)  594/ 6001316 :                     
(2)  595/ 6001316 :                     .x_loop:
(2)  596/ 6001316 : 3CD3                		cmp/ge	r13,r12
(2)  597/ 6001318 : 8B00                		bf	.tl_x
(2)  598/ 600131A : 3CD8                		sub	r13,r12
(2)  599/ 600131C :                     .tl_x:
(2)  600/ 600131C : 6012                		mov	@r1,r0
(2)  601/ 600131E : 636C                		extu.b	r6,r3
(2)  602/ 6001320 : C8FF                		tst	#$FF,r0
(2)  603/ 6001322 : 8900                		bt	.z_0
(2)  604/ 6001324 : 303C                		add	r3,r0
(2)  605/ 6001326 : 6008                .z_0:		swap.b	r0,r0
(2)  606/ 6001328 : C8FF                		tst	#$FF,r0
(2)  607/ 600132A : 8900                		bt	.z_1
(2)  608/ 600132C : 303C                		add	r3,r0
(2)  609/ 600132E : 6009                .z_1:		swap.w	r0,r0
(2)  610/ 6001330 : C8FF                		tst	#$FF,r0
(2)  611/ 6001332 : 8900                		bt	.z_2
(2)  612/ 6001334 : 303C                		add	r3,r0
(2)  613/ 6001336 : 6008                .z_2:		swap.b	r0,r0
(2)  614/ 6001338 : C8FF                		tst	#$FF,r0
(2)  615/ 600133A : 8900                		bt	.z_3
(2)  616/ 600133C : 303C                		add	r3,r0
(2)  617/ 600133E : 6303                .z_3:		mov	r0,r3
(2)  618/ 6001340 : 6069                		swap	r6,r0
(2)  619/ 6001342 : C801                		tst	#%01,r0
(2)  620/ 6001344 : 8B02                		bf	.x_mswap	; <--
(2)  621/ 6001346 : 6338                		swap.b	r3,r3
(2)  622/ 6001348 : 6339                		swap.w	r3,r3
(2)  623/ 600134A : 6338                		swap.b	r3,r3
(2)  624/ 600134C :                     .x_mswap:
(2)  625/ 600134C : 6433                		mov	r3,r4
(2)  626/ 600134E :                     
(2)  627/ 600134E :                     	; r3 - left copy
(2)  628/ 600134E :                     	; r4 - right copy
(2)  629/ 600134E :                     	; 	1234 ----
(2)  630/ 600134E :                     	; 	-123 4---
(2)  631/ 600134E :                     	; 	--12 34--
(2)  632/ 600134E :                     	; 	---1 234-
(2)  633/ 600134E : 6023                		mov	r2,r0
(2)  634/ 6001350 : 30AC                		add	r10,r0
(2)  635/ 6001352 : C903                		and	#%11,r0
(2)  636/ 6001354 : 2008                		tst	r0,r0
(2)  637/ 6001356 : 8917                		bt	.wrt_0
(2)  638/ 6001358 : 8802                		cmp/eq	#2,r0
(2)  639/ 600135A : 8903                		bt	.half_2
(2)  640/ 600135C : 8803                		cmp/eq	#3,r0
(2)  641/ 600135E : 8903                		bt	.half_3
(2)  642/ 6001360 : A003                		bra	.half_1
(2)  643/ 6001362 : 4428                		shll16	r4
(2)  644/ 6001364 :                     .half_2:
(2)  645/ 6001364 : 4428                		shll16	r4
(2)  646/ 6001366 : A002                		bra	.drw_half
(2)  647/ 6001368 :                     .half_3:
(2)  648/ 6001368 : 4329                		shlr16	r3
(2)  649/ 600136A : 4319                .half_1:	shlr8	r3
(2)  650/ 600136C : 4418                		shll8	r4
(2)  651/ 600136E :                     .drw_half:
(2)  652/ 600136E : 6023                		mov	r2,r0
(2)  653/ 6001370 : 3053                		cmp/ge	r5,r0
(2)  654/ 6001372 : 8909                		bt	.wrt_0
(2)  655/ 6001374 : 7008                		add	#4+4,r0
(2)  656/ 6001376 : 4011                		cmp/pz	r0
(2)  657/ 6001378 : 8B06                		bf	.wrt_0
(2)  658/ 600137A : 60C3                		mov	r12,r0		; Right half
(2)  659/ 600137C : 7004                		add	#4,r0
(2)  660/ 600137E : 30D3                		cmp/ge	r13,r0
(2)  661/ 6001380 : 8B00                		bf	.tl_h
(2)  662/ 6001382 : 30D8                		sub	r13,r0
(2)  663/ 6001384 : 30EC                .tl_h:		add	r14,r0
(2)  664/ 6001386 : 2042                		mov	r4,@r0
(2)  665/ 6001388 :                     .wrt_0:
(2)  666/ 6001388 : 6023                		mov	r2,r0
(2)  667/ 600138A : 3053                		cmp/ge	r5,r0
(2)  668/ 600138C : 890A                		bt	.x_giveup
(2)  669/ 600138E : 7004                		add	#4,r0
(2)  670/ 6001390 : 4011                		cmp/pz	r0
(2)  671/ 6001392 : 8B02                		bf	.xr_left
(2)  672/ 6001394 : 60C3                		mov	r12,r0
(2)  673/ 6001396 : 30EC                		add	r14,r0
(2)  674/ 6001398 : 2032                		mov	r3,@r0
(2)  675/ 600139A :                     .xr_left:
(2)  676/ 600139A : 318C                		add	r8,r1
(2)  677/ 600139C : 7204                		add	#4,r2
(2)  678/ 600139E : 3293                		cmp/ge	r9,r2
(2)  679/ 60013A0 : 8FB9                		bf/s	.x_loop
(2)  680/ 60013A2 : 7C04                		add	#4,r12
(2)  681/ 60013A4 :                     .x_giveup:
(2)  682/ 60013A4 :                     
(2)  683/ 60013A4 :                     ; ---------------------------------------
(2)  684/ 60013A4 : 6CF6                		mov	@r15+,r12
(2)  685/ 60013A6 : 65F6                		mov	@r15+,r5
(2)  686/ 60013A8 : 64F6                		mov	@r15+,r4
(2)  687/ 60013AA : 62F6                		mov	@r15+,r2
(2)  688/ 60013AC : 61F6                		mov	@r15+,r1
(2)  689/ 60013AE : 314C                		add	r4,r1		; Next line FOWARD
(2)  690/ 60013B0 : 4510                		dt	r5
(2)  691/ 60013B2 : 8FA6                		bf/s	.y_loop
(2)  692/ 60013B4 : 3CBC                		add	r11,r12
(2)  693/ 60013B6 :                     .y_last:
(2)  694/ 60013B6 :                     
(2)  695/ 60013B6 :                     .y_end:
(2)  696/ 60013B6 : 6CF6                		mov	@r15+,r12
(2)  697/ 60013B8 : 6AF6                		mov	@r15+,r10
(2)  698/ 60013BA : 69F6                		mov	@r15+,r9
(2)  699/ 60013BC : 68F6                		mov	@r15+,r8
(2)  700/ 60013BE : 67F6                		mov	@r15+,r7
(2)  701/ 60013C0 : 000B                		rts
(2)  702/ 60013C2 : 0009                		nop
(2)  703/ 60013C4 :                     		align 4
(2)  704/ 60013C4 : 2402 0000 C000      		ltorg
          60013CA : 0000             
(2)  705/ 60013CC :                     
(2)  706/ 60013CC :                     ; 		align 4
(2)  707/ 60013CC :                     ; 		ltorg
(2)  708/ 60013CC :                     
(2)  709/ 60013CC :                     ; MarsVideo_DmaDraw:
(2)  710/ 60013CC :                     ; 		mov	#_DMASOURCE1,r4
(2)  711/ 60013CC :                     ; 		mov	#%0101001011100000,r0
(2)  712/ 60013CC :                     ; 		mov	r0,@($0C,r4)
(2)  713/ 60013CC :                     ; 		mov	r1,r0
(2)  714/ 60013CC :                     ; 		mov	r0,@r4
(2)  715/ 60013CC :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  716/ 60013CC :                     ; 		mov	r0,@($04,r4)
(2)  717/ 60013CC :                     ; 		mov	r3,r0
(2)  718/ 60013CC :                     ; 		mov	r0,@($08,r4)
(2)  719/ 60013CC :                     ; 		mov	#%0101001011100000|1,r0
(2)  720/ 60013CC :                     ; 		mov	r0,@($0C,r4)
(2)  721/ 60013CC :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  722/ 60013CC :                     ; 		tst	#%10,r0
(2)  723/ 60013CC :                     ; 		bt	.wait_dma
(2)  724/ 60013CC :                     ; 		mov	#%0101001011100000,r0
(2)  725/ 60013CC :                     ; 		mov	r0,@($C,r4)
(2)  726/ 60013CC :                     ; 		rts
(2)  727/ 60013CC :                     ; 		nop
(2)  728/ 60013CC :                     ; 		align 4
(2)  729/ 60013CC :                     ; 		ltorg
(2)  730/ 60013CC :                     
(2)  731/ 60013CC :                     ; --------------------------------------------------------
(2)  732/ 60013CC :                     ; MarsVideo_MkFillBlk
(2)  733/ 60013CC :                     ;
(2)  734/ 60013CC :                     ; Generate Block-Refill blocks to be processed on
(2)  735/ 60013CC :                     ; the next frame
(2)  736/ 60013CC :                     ;
(2)  737/ 60013CC :                     ; 16x16 blocks.
(2)  738/ 60013CC :                     ; --------------------------------------------------------
(2)  739/ 60013CC :                     
(2)  740/ 60013CC :                     		align 4
(2)  741/ 60013CC :                     MarsVideo_MkFillBlk:
(2)  742/ 60013CC : 4F22                		sts	pr,@-r15
(2)  743/ 60013CE : DE3F                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(2)  744/ 60013D0 :                     
(2)  745/ 60013D0 :                     	; First pass: Redraw bits from DREQ-RAM
(2)  746/ 60013D0 : 62E3                		mov	r14,r2
(2)  747/ 60013D2 : 917D                		mov	#Dreq_Buff1,r1			; ** DREQ READ **
(2)  748/ 60013D4 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  749/ 60013D6 : 310C                		add	r0,r1
(2)  750/ 60013D8 : 947B                		mov	#(512/16)*(256/16),r4
(2)  751/ 60013DA : E303                		mov	#%11,r3			; Write flag
(2)  752/ 60013DC :                     .copy_bit:
(2)  753/ 60013DC : 6015                		mov.w	@r1+,r0
(2)  754/ 60013DE : 600F                		exts.w	r0,r0
(2)  755/ 60013E0 : 4011                		cmp/pz	r0
(2)  756/ 60013E2 : 8902                		bt	.no_flip
(2)  757/ 60013E4 : 6021                		mov.w	@r2,r0
(2)  758/ 60013E6 : 203B                		or	r3,r0
(2)  759/ 60013E8 : 2201                		mov.w	r0,@r2
(2)  760/ 60013EA :                     .no_flip:
(2)  761/ 60013EA : 4410                		dt	r4
(2)  762/ 60013EC : 8FF6                		bf/s	.copy_bit
(2)  763/ 60013EE : 7202                		add	#2,r2
(2)  764/ 60013F0 :                     
(2)  765/ 60013F0 :                     	; Last pass: SuperSprites
(2)  766/ 60013F0 :                     	; r14 is gone here
(2)  767/ 60013F0 : 9D70                		mov	#Dreq_Buff2,r13			; ** DREQ READ **
(2)  768/ 60013F2 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  769/ 60013F4 : 3D0C                		add	r0,r13
(2)  770/ 60013F6 : EC20                		mov	#MAX_MARSSPR,r12
(2)  771/ 60013F8 :                     .next_sspr:
(2)  772/ 60013F8 : 84D0                		mov.b	@(sspr_flags,r13),r0
(2)  773/ 60013FA : C880                		tst	#$80,r0				; Sprite enabled?
(2)  774/ 60013FC :                     ; 		bt	.exit_sspr			; end of list
(2)  775/ 60013FC : 895E                		bt	.off_sspr			; sprite is off, keep checking
(2)  776/ 60013FE : 0009                		nop
(2)  777/ 6001400 : 85D2                		mov.w	@(sspr_size,r13),r0
(2)  778/ 6001402 : 650C                		extu.b	r0,r5				; Y size
(2)  779/ 6001404 : 4019                		shlr8	r0
(2)  780/ 6001406 : 640C                		extu.b	r0,r4				; X size
(2)  781/ 6001408 : 4515                		cmp/pl	r5				; Y size <= 0?
(2)  782/ 600140A : 8B5B                		bf	.exit_sspr
(2)  783/ 600140C : 4415                		cmp/pl	r4				; X size <= 0?
(2)  784/ 600140E : 8B59                		bf	.exit_sspr
(2)  785/ 6001410 : 85D4                		mov.w	@(sspr_x_pos,r13),r0
(2)  786/ 6001412 : 620F                		exts.w	r0,r2
(2)  787/ 6001414 : 85D5                		mov.w	@(sspr_y_pos,r13),r0
(2)  788/ 6001416 : 630F                		exts.w	r0,r3
(2)  789/ 6001418 :                     
(2)  790/ 6001418 :                     	; off-screen checks
(2)  791/ 6001418 :                     ; 		mov	r4,r0
(2)  792/ 6001418 :                     ; 		shll2	r0
(2)  793/ 6001418 :                     ; 		shll2	r0
(2)  794/ 6001418 :                     ; 		add	r2,r0
(2)  795/ 6001418 :                     ; 		cmp/pz	r0
(2)  796/ 6001418 :                     ; 		bf	.exit_sspr
(2)  797/ 6001418 :                     ; 		mov	#SET_MSCRLWDTH>>2,r0
(2)  798/ 6001418 :                     ; 		shll2	r0
(2)  799/ 6001418 :                     ; 		cmp/ge	r0,r2
(2)  800/ 6001418 :                     ; 		bt	.exit_sspr
(2)  801/ 6001418 :                     ; 		mov	r5,r0
(2)  802/ 6001418 :                     ; 		shll2	r0
(2)  803/ 6001418 :                     ; 		shll	r0
(2)  804/ 6001418 :                     ; 		add	r3,r0
(2)  805/ 6001418 :                     ; 		cmp/pz	r0
(2)  806/ 6001418 :                     ; 		bf	.exit_sspr
(2)  807/ 6001418 :                     ; 		mov	#SET_MSCRLHGHT>>2,r0
(2)  808/ 6001418 :                     ; 		shll2	r0
(2)  809/ 6001418 :                     ; 		cmp/ge	r0,r3
(2)  810/ 6001418 :                     ; 		bt	.exit_sspr
(2)  811/ 6001418 :                     
(2)  812/ 6001418 : 4401                		shlr	r4			; /2 for 16x16
(2)  813/ 600141A : 4501                		shlr	r5
(2)  814/ 600141C : 7401                		add	#1,r4
(2)  815/ 600141E : 7501                		add	#1,r5
(2)  816/ 6001420 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  817/ 6001422 : 680F                		exts.w	r0,r8
(2)  818/ 6001424 : E60F                		mov	#16-1,r6		; MANUAL SIZE 16x16
(2)  819/ 6001426 : 0009                		nop
(2)  820/ 6001428 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  821/ 600142A : 690F                		exts.w	r0,r9
(2)  822/ 600142C : 6023                		mov	r2,r0
(2)  823/ 600142E : 308C                		add	r8,r0
(2)  824/ 6001430 : 2069                		and	r6,r0
(2)  825/ 6001432 : 2008                		tst	r0,r0
(2)  826/ 6001434 : 8900                		bt	.x_szex
(2)  827/ 6001436 : 7401                		add	#1,r4
(2)  828/ 6001438 :                     .x_szex:
(2)  829/ 6001438 : 6033                		mov	r3,r0
(2)  830/ 600143A : 309C                		add	r9,r0
(2)  831/ 600143C : 2069                		and	r6,r0
(2)  832/ 600143E : 2008                		tst	r0,r0
(2)  833/ 6001440 : 8900                		bt	.y_szex
(2)  834/ 6001442 : 7501                		add	#1,r5
(2)  835/ 6001444 :                     .y_szex:
(2)  836/ 6001444 : 4408                		shll2	r4		; Expand sizes to 16pixels
(2)  837/ 6001446 : 4408                		shll2	r4
(2)  838/ 6001448 : 4508                		shll2	r5
(2)  839/ 600144A : 4508                		shll2	r5
(2)  840/ 600144C : 342C                		add	r2,r4
(2)  841/ 600144E : 353C                		add	r3,r5
(2)  842/ 6001450 : E654                		mov	#SET_MSCRLWDTH>>2,r6
(2)  843/ 6001452 : E73C                		mov	#SET_MSCRLHGHT>>2,r7
(2)  844/ 6001454 : 4608                		shll2	r6
(2)  845/ 6001456 : 4708                		shll2	r7
(2)  846/ 6001458 :                     	; Off-screen limits
(2)  847/ 6001458 : 4415                		cmp/pl	r4
(2)  848/ 600145A : 8B2F                		bf	.off_sspr
(2)  849/ 600145C : 4515                		cmp/pl	r5
(2)  850/ 600145E : 8B2D                		bf	.off_sspr
(2)  851/ 6001460 : 3263                		cmp/ge	r6,r2		; Xleft < 0?
(2)  852/ 6001462 : 892B                		bt	.off_sspr
(2)  853/ 6001464 : 3373                		cmp/ge	r7,r3		; Yup < 0?
(2)  854/ 6001466 : 8929                		bt	.off_sspr
(2)  855/ 6001468 :                     	; Squeeze screen coords
(2)  856/ 6001468 : E010                		mov	#16,r0
(2)  857/ 600146A : 360C                		add	r0,r6
(2)  858/ 600146C : 370C                		add	r0,r7
(2)  859/ 600146E : 4215                		cmp/pl	r2
(2)  860/ 6001470 : 8900                		bt	.x_sqz
(2)  861/ 6001472 : E200                		mov	#0,r2
(2)  862/ 6001474 : 4315                .x_sqz:		cmp/pl	r3
(2)  863/ 6001476 : 8900                		bt	.y_sqz
(2)  864/ 6001478 : E300                		mov	#0,r3
(2)  865/ 600147A : 3463                .y_sqz:		cmp/ge	r6,r4
(2)  866/ 600147C : 8B00                		bf	.x_sqend
(2)  867/ 600147E : 6463                		mov	r6,r4
(2)  868/ 6001480 : 3573                .x_sqend:	cmp/ge	r7,r5
(2)  869/ 6001482 : 8B00                		bf	.y_sqend
(2)  870/ 6001484 : 6573                		mov	r7,r5
(2)  871/ 6001486 :                     .y_sqend:
(2)  872/ 6001486 :                     
(2)  873/ 6001486 :                     	; r2 - X pos
(2)  874/ 6001486 :                     	; r3 - Y pos
(2)  875/ 6001486 :                     	; r4 - X end
(2)  876/ 6001486 :                     	; r5 - Y end
(2)  877/ 6001486 :                     .y_row:
(2)  878/ 6001486 : 6623                		mov	r2,r6
(2)  879/ 6001488 :                     .x_row:
(2)  880/ 6001488 : 6033                		mov	r3,r0
(2)  881/ 600148A : 309C                		add	r9,r0
(2)  882/ 600148C : 4009                		shlr2	r0
(2)  883/ 600148E : 4009                		shlr2	r0
(2)  884/ 6001490 : C90F                		and	#(256/16)-1,r0
(2)  885/ 6001492 : 4008                		shll2	r0
(2)  886/ 6001494 : 4008                		shll2	r0
(2)  887/ 6001496 : 4008                		shll2	r0
(2)  888/ 6001498 : 6703                		mov	r0,r7
(2)  889/ 600149A : 6063                		mov	r6,r0
(2)  890/ 600149C : 308C                		add	r8,r0
(2)  891/ 600149E : 4009                		shlr2	r0
(2)  892/ 60014A0 : 4009                		shlr2	r0
(2)  893/ 60014A2 : C91F                		and	#(512/16)-1,r0
(2)  894/ 60014A4 : 4000                		shll	r0
(2)  895/ 60014A6 : 370C                		add	r0,r7
(2)  896/ 60014A8 : 37EC                		add	r14,r7
(2)  897/ 60014AA : 6071                		mov.w	@r7,r0
(2)  898/ 60014AC : CB03                		or	#%11,r0
(2)  899/ 60014AE : 2701                		mov.w	r0,@r7
(2)  900/ 60014B0 : 7610                		add	#16,r6
(2)  901/ 60014B2 : 3643                		cmp/ge	r4,r6
(2)  902/ 60014B4 : 8BE8                		bf	.x_row
(2)  903/ 60014B6 : 7310                		add	#16,r3
(2)  904/ 60014B8 : 3353                		cmp/ge	r5,r3
(2)  905/ 60014BA : 8BE4                		bf	.y_row
(2)  906/ 60014BC :                     .off_sspr:
(2)  907/ 60014BC : E010                		mov	#sspr_len,r0
(2)  908/ 60014BE : 4C10                		dt	r12
(2)  909/ 60014C0 : 8F9A                		bf/s	.next_sspr
(2)  910/ 60014C2 : 3D0C                		add	r0,r13
(2)  911/ 60014C4 :                     .exit_sspr:
(2)  912/ 60014C4 : 4F26                		lds	@r15+,pr
(2)  913/ 60014C6 : 000B                		rts
(2)  914/ 60014C8 : 0009                		nop
(2)  915/ 60014CA :                     		align 4
(2)  916/ 60014CC : C000 0200 0220      		ltorg
          60014D2 : 0200 0620          
(2)  917/ 60014D6 :                     
(2)  918/ 60014D6 :                     ; --------------------------------------------------------
(2)  919/ 60014D6 :                     ; MarsVideo_DrawFillBlk
(2)  920/ 60014D6 :                     ;
(2)  921/ 60014D6 :                     ; r14 - Svdp queue base
(2)  922/ 60014D6 :                     ; r13 - Scroll size W*H
(2)  923/ 60014D6 :                     ; r12 - Scroll height
(2)  924/ 60014D6 :                     ; r11 - Scroll width
(2)  925/ 60014D6 :                     ; r10 - Scroll TL-pos read / 16 *
(2)  926/ 60014D6 :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  927/ 60014D6 :                     ;  r8 - Graphics data
(2)  928/ 60014D6 :                     ;  r7 - Map data
(2)  929/ 60014D6 :                     ;  r6 - Map Y read index
(2)  930/ 60014D6 :                     ;  r5 - Map X read index
(2)  931/ 60014D6 :                     ; --------------------------------------------------------
(2)  932/ 60014D6 :                     
(2)  933/ 60014D6 :                     		align 4
(2)  934/ 60014D8 :                     MarsVideo_DrawFillBlk:
(2)  935/ 60014D8 : 4F22                		sts	pr,@-r15
(2)  936/ 60014DA :                     
(2)  937/ 60014DA : DE37                		mov	#_framebuffer,r14
(2)  938/ 60014DC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  939/ 60014DE : 6D03                		mov	r0,r13
(2)  940/ 60014E0 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  941/ 60014E2 : 6C03                		mov	r0,r12
(2)  942/ 60014E4 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  943/ 60014E6 : 6B03                		mov	r0,r11
(2)  944/ 60014E8 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  945/ 60014EA : 6A03                		mov	r0,r10
(2)  946/ 60014EC : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  947/ 60014EE : 6903                		mov	r0,r9
(2)  948/ 60014F0 : C613                		mov	@(marsGbl_Scrl_Vram,gbr),r0
(2)  949/ 60014F2 : 6603                		mov	r0,r6
(2)  950/ 60014F4 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  951/ 60014F6 : 6703                		mov	r0,r7
(2)  952/ 60014F8 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  953/ 60014FA : 6803                		mov	r0,r8
(2)  954/ 60014FC : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  955/ 60014FE : 3E0C                		add	r0,r14
(2)  956/ 6001500 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  957/ 6001502 : 955F                		mov	#Dreq_Buff1,r5			; ** DREQ READ **
(2)  958/ 6001504 : 350C                		add	r0,r5
(2)  959/ 6001506 : D02D                		mov	#RAM_Mars_VramData,r0
(2)  960/ 6001508 : 360C                		add	r0,r6
(2)  961/ 600150A : E0F0                		mov	#-SET_MSCRLSIZE,r0		; -MSCRL_BLKSIZE
(2)  962/ 600150C : 2A09                		and	r0,r10				; Set FB top-left
(2)  963/ 600150E : 2909                		and	r0,r9
(2)  964/ 6001510 : D42B                		mov	#$C0000000|RAM_Mars_ScrlRefill,r4
(2)  965/ 6001512 :                     ; 		mov.w	@(marsGbl_DrawAll,gbr),r0
(2)  966/ 6001512 :                     ; 		tst	r0,r0
(2)  967/ 6001512 :                     ; 		bt	.keep_normal
(2)  968/ 6001512 :                     ; 		mov	#0,r4
(2)  969/ 6001512 :                     ; .keep_normal:
(2)  970/ 6001512 :                     
(2)  971/ 6001512 :                     	; r14 - Svdp queue base
(2)  972/ 6001512 :                     	; r13 - Scroll size W*H
(2)  973/ 6001512 :                     	; r12 - Scroll height
(2)  974/ 6001512 :                     	; r11 - Scroll width
(2)  975/ 6001512 :                     	; r10 - Scroll TL-pos read / 16 *
(2)  976/ 6001512 :                     	;  r9 - Scroll Y-pos read / 16 *
(2)  977/ 6001512 :                     	;  r8 - Map X read index
(2)  978/ 6001512 :                     	;  r7 - Map Y read index
(2)  979/ 6001512 :                     	;  r6 - Graphics data
(2)  980/ 6001512 :                     	;  r5 - Map data
(2)  981/ 6001512 :                     	;  r4 - Refill map
(2)  982/ 6001512 :                     	;  r3 -
(2)  983/ 6001512 : 2B9F                		muls	r9,r11
(2)  984/ 6001514 : 001A                		sts	macl,r0
(2)  985/ 6001516 : 3A0C                		add	r0,r10
(2)  986/ 6001518 : E1FC                		mov	#-4,r1
(2)  987/ 600151A : 2A19                		and	r1,r10
(2)  988/ 600151C : 63B3                		mov	r11,r3
(2)  989/ 600151E : 4309                		shlr2	r3
(2)  990/ 6001520 : 4309                		shlr2	r3
(2)  991/ 6001522 :                     .x_loop:
(2)  992/ 6001522 : 3AD3                		cmp/ge	r13,r10
(2)  993/ 6001524 : 8B00                		bf	.tl_snap_x
(2)  994/ 6001526 : 3AD8                		sub	r13,r10
(2)  995/ 6001528 :                     .tl_snap_x:
(2)  996/ 6001528 : 2F36                		mov	r3,@-r15
(2)  997/ 600152A : 2F76                		mov	r7,@-r15
(2)  998/ 600152C : 2FA6                		mov	r10,@-r15
(2)  999/ 600152E : 2FC6                		mov	r12,@-r15
(2) 1000/ 6001530 : 4C09                		shlr2	r12
(2) 1001/ 6001532 : 4C09                		shlr2	r12
(2) 1002/ 6001534 :                     .y_loop:
(2) 1003/ 6001534 : 3AD3                		cmp/ge	r13,r10
(2) 1004/ 6001536 : 8B00                		bf	.tl_snap_y
(2) 1005/ 6001538 : 3AD8                		sub	r13,r10
(2) 1006/ 600153A :                     .tl_snap_y:
(2) 1007/ 600153A : 62A3                		mov	r10,r2
(2) 1008/ 600153C : E00F                		mov	#(256/16)-1,r0
(2) 1009/ 600153E : 6373                		mov	r7,r3		; Y pos
(2) 1010/ 6001540 : 4309                		shlr2	r3
(2) 1011/ 6001542 : 4309                		shlr2	r3
(2) 1012/ 6001544 : 2309                		and	r0,r3
(2) 1013/ 6001546 : 4308                		shll2	r3
(2) 1014/ 6001548 : 4308                		shll2	r3
(2) 1015/ 600154A : 4300                		shll	r3
(2) 1016/ 600154C : E01F                		mov	#(512/16)-1,r0
(2) 1017/ 600154E : 6183                		mov	r8,r1		; X pos
(2) 1018/ 6001550 : 4109                		shlr2	r1
(2) 1019/ 6001552 : 4109                		shlr2	r1
(2) 1020/ 6001554 : 2109                		and	r0,r1
(2) 1021/ 6001556 : 313C                		add	r3,r1
(2) 1022/ 6001558 : 4100                		shll	r1
(2) 1023/ 600155A : 2448                		tst	r4,r4
(2) 1024/ 600155C : 8908                		bt	.always_on
(2) 1025/ 600155E : 411A                		lds	r1,macl
(2) 1026/ 6001560 : 314C                		add	r4,r1
(2) 1027/ 6001562 : 6011                		mov.w	@r1,r0
(2) 1028/ 6001564 : 2008                		tst	r0,r0
(2) 1029/ 6001566 : 8914                		bt	.no_flag
(2) 1030/ 6001568 : 4001                		shlr	r0
(2) 1031/ 600156A : 2008                		tst	r0,r0
(2) 1032/ 600156C : 2101                		mov.w	r0,@r1
(2) 1033/ 600156E : 011A                		sts	macl,r1
(2) 1034/ 6001570 :                     .always_on:
(2) 1035/ 6001570 : 315C                		add	r5,r1
(2) 1036/ 6001572 : 440A                		lds	r4,mach
(2) 1037/ 6001574 : 6011                		mov.w	@r1,r0
(2) 1038/ 6001576 : 9126                		mov	#SET_TILEMAX-1,r1
(2) 1039/ 6001578 : 6403                		mov	r0,r4
(2) 1040/ 600157A : 2419                		and	r1,r4
(2) 1041/ 600157C : E100                		mov	#0,r1
(2) 1042/ 600157E : 2448                		tst	r4,r4
(2) 1043/ 6001580 : 8903                		bt	.blank_req
(2) 1044/ 6001582 : 4410                		dt	r4
(2) 1045/ 6001584 : 4418                		shll8	r4			; 16x16
(2) 1046/ 6001586 : 6143                		mov	r4,r1
(2) 1047/ 6001588 : 316C                		add	r6,r1
(2) 1048/ 600158A :                     .blank_req:
(2) 1049/ 600158A : 040A                		sts	mach,r4
(2) 1050/ 600158C :                     
(2) 1051/ 600158C :                     ; 		mov	#0,r1			; TEMPORAL
(2) 1052/ 600158C : B01C                		bsr	scrlDrw_DrawBlk
(2) 1053/ 600158E : 2F36                		mov	r3,@-r15
(2) 1054/ 6001590 : 63F6                		mov	@r15+,r3
(2) 1055/ 6001592 :                     .no_flag:
(2) 1056/ 6001592 : E010                		mov	#16,r0
(2) 1057/ 6001594 : 20BE                		mulu	r11,r0
(2) 1058/ 6001596 : 001A                		sts	macl,r0
(2) 1059/ 6001598 : 3A0C                		add	r0,r10
(2) 1060/ 600159A : 7710                		add	#16,r7
(2) 1061/ 600159C : 4C10                		dt	r12
(2) 1062/ 600159E : 8FC9                		bf/s	.y_loop
(2) 1063/ 60015A0 : 7910                		add	#16,r9
(2) 1064/ 60015A2 :                     
(2) 1065/ 60015A2 : 6CF6                		mov	@r15+,r12
(2) 1066/ 60015A4 : 6AF6                		mov	@r15+,r10
(2) 1067/ 60015A6 : 67F6                		mov	@r15+,r7
(2) 1068/ 60015A8 : 63F6                		mov	@r15+,r3
(2) 1069/ 60015AA : 7A10                		add	#16,r10
(2) 1070/ 60015AC : 4310                		dt	r3
(2) 1071/ 60015AE : 8FB8                		bf/s	.x_loop
(2) 1072/ 60015B0 : 7810                		add	#16,r8
(2) 1073/ 60015B2 :                     
(2) 1074/ 60015B2 :                     .exit_lr:
(2) 1075/ 60015B2 : 4F26                		lds	@r15+,pr
(2) 1076/ 60015B4 : 000B                		rts
(2) 1077/ 60015B6 : 0009                		nop
(2) 1078/ 60015B8 :                     		align 4
(2) 1079/ 60015B8 : 2400 0000 0600      		ltorg
          60015BE : FAA0 C000 0200 
          60015C4 : 0220 01FF          
(2) 1080/ 60015C8 :                     
(2) 1081/ 60015C8 :                     ; --------------------------------------------------------
(2) 1082/ 60015C8 :                     ; scrlDrw_DrawBlk
(2) 1083/ 60015C8 :                     ;
(2) 1084/ 60015C8 :                     ; Currents:
(2) 1085/ 60015C8 :                     ; r0 - Block data
(2) 1086/ 60015C8 :                     ; r1 - Graphics data, 0 = blank mode
(2) 1087/ 60015C8 :                     ; r2 - FB TL position
(2) 1088/ 60015C8 :                     ;
(2) 1089/ 60015C8 :                     ; InLoop:
(2) 1090/ 60015C8 :                     ; r14 - Framebuffer BASE
(2) 1091/ 60015C8 :                     ; r13 - Scrl W*H
(2) 1092/ 60015C8 :                     ; r11 - Scrl width
(2) 1093/ 60015C8 :                     ;
(2) 1094/ 60015C8 :                     ; Uses:
(2) 1095/ 60015C8 :                     ; r2,macl,mach
(2) 1096/ 60015C8 :                     ; --------------------------------------------------------
(2) 1097/ 60015C8 :                     
(2) 1098/ 60015C8 :                     		align 4
(2) 1099/ 60015C8 :                     scrlDrw_DrawBlk:
(2) 1100/ 60015C8 : 2118                		tst	r1,r1
(2) 1101/ 60015CA : 8B13                		bf	.normal
(2) 1102/ 60015CC : E310                		mov	#16,r3
(2) 1103/ 60015CE :                     .next_zline:
(2) 1104/ 60015CE : 32D3                		cmp/ge	r13,r2
(2) 1105/ 60015D0 : 8B00                		bf	.tl_snapz
(2) 1106/ 60015D2 : 32D8                		sub	r13,r2
(2) 1107/ 60015D4 :                     .tl_snapz:
(2) 1108/ 60015D4 : 421A                		lds	r2,macl
(2) 1109/ 60015D6 : 32EC                		add	r14,r2
(2) 1110/ 60015D8 :                     	rept 16/4
(2) 1111/ 60015D8 :                     		mov	r1,@r2
(2) 1112/ 60015D8 :                     		add	#4,r2
(2) 1113/ 60015D8 :                     	endm
(2) 1111/ 60015D8 : 2212                		mov	r1,@r2
(2) 1112/ 60015DA : 7204                		add	#4,r2
(2) 1111/ 60015DC : 2212                		mov	r1,@r2
(2) 1112/ 60015DE : 7204                		add	#4,r2
(2) 1111/ 60015E0 : 2212                		mov	r1,@r2
(2) 1112/ 60015E2 : 7204                		add	#4,r2
(2) 1111/ 60015E4 : 2212                		mov	r1,@r2
(2) 1112/ 60015E6 : 7204                		add	#4,r2
(2) 1114/ 60015E8 : 021A                		sts	macl,r2
(2) 1115/ 60015EA : 4310                		dt	r3
(2) 1116/ 60015EC : 8FEF                		bf/s	.next_zline
(2) 1117/ 60015EE : 32BC                		add	r11,r2
(2) 1118/ 60015F0 : 000B                		rts
(2) 1119/ 60015F2 : 0009                		nop
(2) 1120/ 60015F4 :                     		align 4
(2) 1121/ 60015F4 :                     
(2) 1122/ 60015F4 :                     ; ----------------------------------------------------
(2) 1123/ 60015F4 :                     
(2) 1124/ 60015F4 :                     .normal:
(2) 1125/ 60015F4 : 440A                		lds	r4,mach
(2) 1126/ 60015F6 : 4019                		shlr8	r0		; Get index increment
(2) 1127/ 60015F8 : 4000                		shll	r0
(2) 1128/ 60015FA : C9FC                		and	#$FC,r0		; Filter these bits only
(2) 1129/ 60015FC : 6303                		mov	r0,r3
(2) 1130/ 60015FE : E410                		mov	#16,r4
(2) 1131/ 6001600 :                     .next_line:
(2) 1132/ 6001600 : 32D3                		cmp/ge	r13,r2
(2) 1133/ 6001602 : 8B00                		bf	.tl_snap
(2) 1134/ 6001604 : 32D8                		sub	r13,r2
(2) 1135/ 6001606 :                     .tl_snap:
(2) 1136/ 6001606 : 421A                		lds	r2,macl
(2) 1137/ 6001608 : 32EC                		add	r14,r2
(2) 1138/ 600160A :                     	rept 16/4
(2) 1139/ 600160A :                     		mov	@r1,r0
(2) 1140/ 600160A :                     		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600160A :                     		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 600160A :                     		tst	#$FF,r0
(2) 1143/ 600160A :                     		bt	.z_0
(2) 1144/ 600160A :                     		add	r3,r0
(2) 1145/ 600160A :                     .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 600160A :                     		tst	#$FF,r0
(2) 1147/ 600160A :                     		bt	.z_1
(2) 1148/ 600160A :                     		add	r3,r0
(2) 1149/ 600160A :                     .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 600160A :                     		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600160A :                     		tst	#$FF,r0
(2) 1152/ 600160A :                     		bt	.z_2
(2) 1153/ 600160A :                     		add	r3,r0
(2) 1154/ 600160A :                     .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 600160A :                     		tst	#$FF,r0
(2) 1156/ 600160A :                     		bt	.z_3
(2) 1157/ 600160A :                     		add	r3,r0
(2) 1158/ 600160A :                     .z_3:
(2) 1159/ 600160A :                     		add	#4,r1		; <-- src incr
(2) 1160/ 600160A :                     		mov	r0,@r2
(2) 1161/ 600160A :                     		add	#4,r2
(2) 1162/ 600160A :                     	endm
(2) 1139/ 600160A : 6012                		mov	@r1,r0
(2) 1140/ 600160C : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600160E : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001610 : C8FF                		tst	#$FF,r0
(2) 1143/ 6001612 : 8900                		bt	.z_0
(2) 1144/ 6001614 : 303C                		add	r3,r0
(2) 1145/ 6001616 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001618 : C8FF                		tst	#$FF,r0
(2) 1147/ 600161A : 8900                		bt	.z_1
(2) 1148/ 600161C : 303C                		add	r3,r0
(2) 1149/ 600161E : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 6001620 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 6001622 : C8FF                		tst	#$FF,r0
(2) 1152/ 6001624 : 8900                		bt	.z_2
(2) 1153/ 6001626 : 303C                		add	r3,r0
(2) 1154/ 6001628 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 600162A : C8FF                		tst	#$FF,r0
(2) 1156/ 600162C : 8900                		bt	.z_3
(2) 1157/ 600162E : 303C                		add	r3,r0
(2) 1158/ 6001630 :                     .z_3:
(2) 1159/ 6001630 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 6001632 : 2202                		mov	r0,@r2
(2) 1161/ 6001634 : 7204                		add	#4,r2
(2) 1139/ 6001636 : 6012                		mov	@r1,r0
(2) 1140/ 6001638 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600163A : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 600163C : C8FF                		tst	#$FF,r0
(2) 1143/ 600163E : 8900                		bt	.z_0
(2) 1144/ 6001640 : 303C                		add	r3,r0
(2) 1145/ 6001642 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001644 : C8FF                		tst	#$FF,r0
(2) 1147/ 6001646 : 8900                		bt	.z_1
(2) 1148/ 6001648 : 303C                		add	r3,r0
(2) 1149/ 600164A : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 600164C : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600164E : C8FF                		tst	#$FF,r0
(2) 1152/ 6001650 : 8900                		bt	.z_2
(2) 1153/ 6001652 : 303C                		add	r3,r0
(2) 1154/ 6001654 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 6001656 : C8FF                		tst	#$FF,r0
(2) 1156/ 6001658 : 8900                		bt	.z_3
(2) 1157/ 600165A : 303C                		add	r3,r0
(2) 1158/ 600165C :                     .z_3:
(2) 1159/ 600165C : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 600165E : 2202                		mov	r0,@r2
(2) 1161/ 6001660 : 7204                		add	#4,r2
(2) 1139/ 6001662 : 6012                		mov	@r1,r0
(2) 1140/ 6001664 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 6001666 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001668 : C8FF                		tst	#$FF,r0
(2) 1143/ 600166A : 8900                		bt	.z_0
(2) 1144/ 600166C : 303C                		add	r3,r0
(2) 1145/ 600166E : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001670 : C8FF                		tst	#$FF,r0
(2) 1147/ 6001672 : 8900                		bt	.z_1
(2) 1148/ 6001674 : 303C                		add	r3,r0
(2) 1149/ 6001676 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 6001678 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600167A : C8FF                		tst	#$FF,r0
(2) 1152/ 600167C : 8900                		bt	.z_2
(2) 1153/ 600167E : 303C                		add	r3,r0
(2) 1154/ 6001680 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 6001682 : C8FF                		tst	#$FF,r0
(2) 1156/ 6001684 : 8900                		bt	.z_3
(2) 1157/ 6001686 : 303C                		add	r3,r0
(2) 1158/ 6001688 :                     .z_3:
(2) 1159/ 6001688 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 600168A : 2202                		mov	r0,@r2
(2) 1161/ 600168C : 7204                		add	#4,r2
(2) 1139/ 600168E : 6012                		mov	@r1,r0
(2) 1140/ 6001690 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 6001692 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001694 : C8FF                		tst	#$FF,r0
(2) 1143/ 6001696 : 8900                		bt	.z_0
(2) 1144/ 6001698 : 303C                		add	r3,r0
(2) 1145/ 600169A : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 600169C : C8FF                		tst	#$FF,r0
(2) 1147/ 600169E : 8900                		bt	.z_1
(2) 1148/ 60016A0 : 303C                		add	r3,r0
(2) 1149/ 60016A2 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 60016A4 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 60016A6 : C8FF                		tst	#$FF,r0
(2) 1152/ 60016A8 : 8900                		bt	.z_2
(2) 1153/ 60016AA : 303C                		add	r3,r0
(2) 1154/ 60016AC : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 60016AE : C8FF                		tst	#$FF,r0
(2) 1156/ 60016B0 : 8900                		bt	.z_3
(2) 1157/ 60016B2 : 303C                		add	r3,r0
(2) 1158/ 60016B4 :                     .z_3:
(2) 1159/ 60016B4 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 60016B6 : 2202                		mov	r0,@r2
(2) 1161/ 60016B8 : 7204                		add	#4,r2
(2) 1163/ 60016BA : 021A                		sts	macl,r2
(2) 1164/ 60016BC :                     
(2) 1165/ 60016BC : 4410                		dt	r4
(2) 1166/ 60016BE :                     ; 		bt	.end_line
(2) 1167/ 60016BE :                     ; 		bra	.next_line
(2) 1168/ 60016BE :                     ; 		nop
(2) 1169/ 60016BE : 8F9F                		bf/s	.next_line
(2) 1170/ 60016C0 : 32BC                		add	r11,r2
(2) 1171/ 60016C2 :                     .end_line:
(2) 1172/ 60016C2 : 040A                		sts	mach,r4
(2) 1173/ 60016C4 : 000B                		rts
(2) 1174/ 60016C6 : 0009                		nop
(2) 1175/ 60016C8 :                     		align 4
(2) 1176/ 60016C8 :                     		ltorg
(2) 1177/ 60016C8 :                     
(2) 1178/ 60016C8 :                     ; ====================================================================
(2) 1179/ 60016C8 :                     ; ----------------------------------------------------------------
(2) 1180/ 60016C8 :                     ; Polygon rendering subroutines
(2) 1181/ 60016C8 :                     ; ----------------------------------------------------------------
(2) 1182/ 60016C8 :                     
(2) 1183/ 60016C8 :                     ; ------------------------------------------------
(2) 1184/ 60016C8 :                     ; MarsVideo_SlicePlgn
(2) 1185/ 60016C8 :                     ;
(2) 1186/ 60016C8 :                     ; This slices polygons into pieces.
(2) 1187/ 60016C8 :                     ;
(2) 1188/ 60016C8 :                     ; Input:
(2) 1189/ 60016C8 :                     ; r14 | Polygon data to read
(2) 1190/ 60016C8 :                     ; ------------------------------------------------
(2) 1191/ 60016C8 :                     
(2) 1192/ 60016C8 :                     		align 4
(2) 1193/ 60016C8 :                     MarsVideo_SlicePlgn:
(2) 1194/ 60016C8 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1195/ 60016CA : 6203                		mov	r0,r2
(2) 1196/ 60016CC : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1197/ 60016CE : 3023                		cmp/ge	r2,r0
(2) 1198/ 60016D0 : 8BFA                		bf	MarsVideo_SlicePlgn
(2) 1199/ 60016D2 :                     
(2) 1200/ 60016D2 : 4F22                		sts	pr,@-r15
(2) 1201/ 60016D4 : DD3E                		mov	#$C0000000|Cach_DDA_Last,r13		; r13 - DDA last point
(2) 1202/ 60016D6 : DC3F                		mov	#$C0000000|Cach_DDA_Top,r12		; r12 - DDA first point
(2) 1203/ 60016D8 : 50E0                		mov	@(plygn_type,r14),r0			; Read type settings ($F000 0000)
(2) 1204/ 60016DA : 4029                		shlr16	r0					; 0000 F000
(2) 1205/ 60016DC : 4019                		shlr8	r0					; 0000 00F0
(2) 1206/ 60016DE : C840                		tst	#PLGN_TRI,r0				; PLGN_TRI set?
(2) 1207/ 60016E0 : 8B00                		bf	.tringl
(2) 1208/ 60016E2 : 7D08                		add	#8,r13					; If quad: add 8
(2) 1209/ 60016E4 :                     .tringl:
(2) 1210/ 60016E4 : 61E3                		mov	r14,r1
(2) 1211/ 60016E6 : 62C3                		mov	r12,r2
(2) 1212/ 60016E8 : D33B                		mov	#$C0000000|Cach_DDA_Src,r3
(2) 1213/ 60016EA : 7108                		add	#plygn_points,r1
(2) 1214/ 60016EC : 400A                		lds	r0,mach
(2) 1215/ 60016EE : 0009                		nop
(2) 1216/ 60016F0 :                     
(2) 1217/ 60016F0 :                     	; ----------------------------------------
(2) 1218/ 60016F0 :                     	; Polygon points
(2) 1219/ 60016F0 :                     	; ----------------------------------------
(2) 1220/ 60016F0 :                     
(2) 1221/ 60016F0 : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1222/ 60016F2 : 4001                		shlr	r0
(2) 1223/ 60016F4 : 6603                		mov	r0,r6
(2) 1224/ 60016F6 : E804                		mov	#4,r8
(2) 1225/ 60016F8 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1226/ 60016FA : 4001                		shlr	r0
(2) 1227/ 60016FC : 6703                		mov	r0,r7
(2) 1228/ 60016FE : 0009                		nop
(2) 1229/ 6001700 :                     .setpnts:
(2) 1230/ 6001700 : 6416                		mov	@r1+,r4
(2) 1231/ 6001702 : 346C                		add	r6,r4			; X + width
(2) 1232/ 6001704 : 6516                		mov	@r1+,r5
(2) 1233/ 6001706 : 357C                		add	r7,r5			; Y + height
(2) 1234/ 6001708 : 2242                		mov	r4,@r2
(2) 1235/ 600170A : 0009                		nop
(2) 1236/ 600170C : 1251                		mov	r5,@(4,r2)
(2) 1237/ 600170E : 4810                		dt	r8
(2) 1238/ 6001710 : 8FF6                		bf/s	.setpnts
(2) 1239/ 6001712 : 7208                		add	#8,r2
(2) 1240/ 6001714 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2) 1241/ 6001716 :                     .src_pnts:
(2) 1242/ 6001716 : 6416                		mov	@r1+,r4
(2) 1243/ 6001718 : 654D                		extu.w	r4,r5
(2) 1244/ 600171A : 4429                		shlr16	r4
(2) 1245/ 600171C : 644D                		extu.w	r4,r4
(2) 1246/ 600171E :                     ; 		mov.w	@r1+,r4
(2) 1247/ 600171E :                     ; 		mov.w	@r1+,r5
(2) 1248/ 600171E :                     ; 		extu.w	r4,r4
(2) 1249/ 600171E :                     ; 		extu.w	r5,r5
(2) 1250/ 600171E :                     
(2) 1251/ 600171E : 2342                		mov	r4,@r3
(2) 1252/ 6001720 : 1351                		mov	r5,@(4,r3)
(2) 1253/ 6001722 : 4810                		dt	r8
(2) 1254/ 6001724 : 8FF7                		bf/s	.src_pnts
(2) 1255/ 6001726 : 7308                		add	#8,r3
(2) 1256/ 6001728 :                     
(2) 1257/ 6001728 :                     	; Search for the lowest Y and highest Y
(2) 1258/ 6001728 :                     	; r10 - Top Y
(2) 1259/ 6001728 :                     	; r11 - Bottom Y
(2) 1260/ 6001728 : 000A                		sts	mach,r0
(2) 1261/ 600172A :                     .start_math:
(2) 1262/ 600172A : E903                		mov	#3,r9
(2) 1263/ 600172C : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2) 1264/ 600172E : 8B00                		bf	.ytringl
(2) 1265/ 6001730 : 7901                		add	#1,r9
(2) 1266/ 6001732 :                     .ytringl:
(2) 1267/ 6001732 : DA2A                		mov	#$7FFFFFFF,r10
(2) 1268/ 6001734 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2) 1269/ 6001736 : 67C3                		mov 	r12,r7
(2) 1270/ 6001738 : 68C3                		mov	r12,r8
(2) 1271/ 600173A :                     .find_top:
(2) 1272/ 600173A : 5071                		mov	@(4,r7),r0
(2) 1273/ 600173C : 30B7                		cmp/gt	r11,r0
(2) 1274/ 600173E : 8B00                		bf	.is_low
(2) 1275/ 6001740 : 6B03                		mov 	r0,r11
(2) 1276/ 6001742 :                     .is_low:
(2) 1277/ 6001742 : 5081                		mov	@(4,r8),r0
(2) 1278/ 6001744 : 30A7                		cmp/gt	r10,r0
(2) 1279/ 6001746 : 8901                		bt	.is_high
(2) 1280/ 6001748 : 6A03                		mov 	r0,r10
(2) 1281/ 600174A : 6183                		mov	r8,r1
(2) 1282/ 600174C :                     .is_high:
(2) 1283/ 600174C : 7708                		add 	#8,r7
(2) 1284/ 600174E : 4910                		dt	r9
(2) 1285/ 6001750 : 8FF3                		bf/s	.find_top
(2) 1286/ 6001752 : 7808                		add	#8,r8
(2) 1287/ 6001754 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2) 1288/ 6001756 : 8938                		bt	.exit
(2) 1289/ 6001758 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2) 1290/ 600175A : 8B36                		bf	.exit
(2) 1291/ 600175C :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; Top > 224?
(2) 1292/ 600175C :                     ; 		shll2	r0
(2) 1293/ 600175C : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1294/ 600175E : 3A03                		cmp/ge	r0,r10
(2) 1295/ 6001760 : 8933                		bt	.exit
(2) 1296/ 6001762 :                     
(2) 1297/ 6001762 :                     	; r2 - Left DDA READ pointer
(2) 1298/ 6001762 :                     	; r3 - Right DDA READ pointer
(2) 1299/ 6001762 :                     	; r4 - Left X
(2) 1300/ 6001762 :                     	; r5 - Left DX
(2) 1301/ 6001762 :                     	; r6 - Right X
(2) 1302/ 6001762 :                     	; r7 - Right DX
(2) 1303/ 6001762 :                     	; r8 - Left width
(2) 1304/ 6001762 :                     	; r9 - Right width
(2) 1305/ 6001762 :                     	; r10 - Top Y, updates after calling put_piece
(2) 1306/ 6001762 :                     	; r11 - Bottom Y
(2) 1307/ 6001762 :                     	; r12 - First DST point
(2) 1308/ 6001762 :                     	; r13 - Last DST point
(2) 1309/ 6001762 : 6213                		mov	r1,r2				; r2 - X left to process
(2) 1310/ 6001764 : B042                		bsr	set_left
(2) 1311/ 6001766 : 6313                		mov	r1,r3				; r3 - X right to process
(2) 1312/ 6001768 : B084                		bsr	set_right
(2) 1313/ 600176A : 0009                		nop
(2) 1314/ 600176C :                     
(2) 1315/ 600176C :                     .next_pz:
(2) 1316/ 600176C :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Current Y > 224?
(2) 1317/ 600176C :                     ; 		shll2	r0
(2) 1318/ 600176C : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1319/ 600176E : 3A07                		cmp/gt	r0,r10
(2) 1320/ 6001770 : 892B                		bt	.exit
(2) 1321/ 6001772 : 3AB3                		cmp/ge	r11,r10				; Y top >= Y bottom?
(2) 1322/ 6001774 : 8929                		bt	.exit
(2) 1323/ 6001776 :                     
(2) 1324/ 6001776 : D11A                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r1
(2) 1325/ 6001778 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1326/ 600177A : C90F                		and	#16-1,r0
(2) 1327/ 600177C : 4018                		shll8	r0
(2) 1328/ 600177E : 4009                		shlr2	r0
(2) 1329/ 6001780 : 310C                		add	r0,r1
(2) 1330/ 6001782 : 5821                		mov	@(4,r2),r8
(2) 1331/ 6001784 : 5931                		mov	@(4,r3),r9
(2) 1332/ 6001786 : 38A8                		sub	r10,r8
(2) 1333/ 6001788 : 39A8                		sub	r10,r9
(2) 1334/ 600178A : 6083                		mov	r8,r0
(2) 1335/ 600178C : 3983                		cmp/ge	r8,r9
(2) 1336/ 600178E : 8900                		bt	.lefth
(2) 1337/ 6001790 : 6093                		mov	r9,r0
(2) 1338/ 6001792 :                     .lefth:
(2) 1339/ 6001792 : D014                		mov	#$C0000000|Cach_Bkup_SPZ,r0
(2) 1340/ 6001794 : 2026                		mov	r2,@-r0
(2) 1341/ 6001796 : 2036                		mov	r3,@-r0
(2) 1342/ 6001798 : 2056                		mov	r5,@-r0
(2) 1343/ 600179A : 2076                		mov	r7,@-r0
(2) 1344/ 600179C : 2086                		mov	r8,@-r0
(2) 1345/ 600179E : 2096                		mov	r9,@-r0
(2) 1346/ 60017A0 : 20B6                		mov	r11,@-r0
(2) 1347/ 60017A2 : B0AB                		bsr	put_piece
(2) 1348/ 60017A4 : 0009                		nop
(2) 1349/ 60017A6 : D010                		mov	#$C0000000|Cach_Bkup_LPZ,r0
(2) 1350/ 60017A8 : 6B06                		mov	@r0+,r11
(2) 1351/ 60017AA : 6906                		mov	@r0+,r9
(2) 1352/ 60017AC : 6806                		mov	@r0+,r8
(2) 1353/ 60017AE : 6706                		mov	@r0+,r7
(2) 1354/ 60017B0 : 6506                		mov	@r0+,r5
(2) 1355/ 60017B2 : 6306                		mov	@r0+,r3
(2) 1356/ 60017B4 : 6206                		mov	@r0+,r2
(2) 1357/ 60017B6 :                     	; X direction update
(2) 1358/ 60017B6 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2) 1359/ 60017B8 : 8B03                		bf	.lefth2
(2) 1360/ 60017BA : B05B                		bsr	set_right
(2) 1361/ 60017BC : 0009                		nop
(2) 1362/ 60017BE : AFD5                		bra	.next_pz
(2) 1363/ 60017C0 : 0009                		nop
(2) 1364/ 60017C2 :                     .lefth2:
(2) 1365/ 60017C2 : B013                		bsr	set_left
(2) 1366/ 60017C4 : 0009                		nop
(2) 1367/ 60017C6 : AFD1                		bra	.next_pz
(2) 1368/ 60017C8 : 0009                		nop
(2) 1369/ 60017CA :                     .exit:
(2) 1370/ 60017CA : 4F26                		lds	@r15+,pr
(2) 1371/ 60017CC : 000B                		rts
(2) 1372/ 60017CE : 0009                		nop
(2) 1373/ 60017D0 :                     		align 4
(2) 1374/ 60017D0 : C000 0410 C000      		ltorg
          60017D6 : 0400 C000 0420 
          60017DC : 7FFF FFFF C000 
          60017E2 : 0000 C000 04E0 
          60017E8 : C000 04C4          
(2) 1375/ 60017EC :                     
(2) 1376/ 60017EC :                     		align 4
(2) 1377/ 60017EC :                     set_left:
(2) 1378/ 60017EC : 6823                		mov	r2,r8				; Get a copy of Xleft pointer
(2) 1379/ 60017EE : 7820                		add	#$20,r8				; To read Texture SRC points
(2) 1380/ 60017F0 : 6482                		mov	@r8,r4
(2) 1381/ 60017F2 : 5581                		mov	@(4,r8),r5
(2) 1382/ 60017F4 : D86E                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1383/ 60017F6 : 6043                		mov	r4,r0
(2) 1384/ 60017F8 : 4028                		shll16	r0
(2) 1385/ 60017FA : 2802                		mov	r0,@r8
(2) 1386/ 60017FC : 6053                		mov	r5,r0
(2) 1387/ 60017FE : 4028                		shll16	r0
(2) 1388/ 6001800 : 1802                		mov	r0,@(8,r8)
(2) 1389/ 6001802 : 6122                		mov	@r2,r1
(2) 1390/ 6001804 : 5821                		mov	@(4,r2),r8
(2) 1391/ 6001806 : 7208                		add	#8,r2
(2) 1392/ 6001808 : 32D7                		cmp/gt	r13,r2
(2) 1393/ 600180A : 8B00                		bf	.lft_ok
(2) 1394/ 600180C : 62C3                		mov 	r12,r2
(2) 1395/ 600180E :                     .lft_ok:
(2) 1396/ 600180E : 5021                		mov	@(4,r2),r0
(2) 1397/ 6001810 : 3088                		sub	r8,r0
(2) 1398/ 6001812 : 8800                		cmp/eq	#0,r0
(2) 1399/ 6001814 : 89EA                		bt	set_left
(2) 1400/ 6001816 : 4011                		cmp/pz	r0
(2) 1401/ 6001818 : 8B29                		bf	.lft_skip
(2) 1402/ 600181A : 400A                		lds	r0,mach
(2) 1403/ 600181C : 6823                		mov	r2,r8
(2) 1404/ 600181E : 7820                		add	#$20,r8
(2) 1405/ 6001820 : 6082                		mov 	@r8,r0
(2) 1406/ 6001822 : 3048                		sub 	r4,r0
(2) 1407/ 6001824 : 5481                		mov 	@(4,r8),r4
(2) 1408/ 6001826 : 3458                		sub 	r5,r4
(2) 1409/ 6001828 :                     
(2) 1410/ 6001828 : 6503                		mov	r0,r5
(2) 1411/ 600182A : 4418                		shll8	r4
(2) 1412/ 600182C : 4518                		shll8	r5
(2) 1413/ 600182E : E001                		mov	#1,r0
(2) 1414/ 6001830 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1415/ 6001832 : 080A                		sts	mach,r8
(2) 1416/ 6001834 : 90CC                		mov	#_JR,r0
(2) 1417/ 6001836 : 2082                		mov	r8,@r0
(2) 1418/ 6001838 : 1051                		mov	r5,@(4,r0)
(2) 1419/ 600183A : 0009                		nop
(2) 1420/ 600183C :                     ; 		mov	@(4,r0),r5
(2) 1421/ 600183C : 5505                		mov 	@($14,r0),r5
(2) 1422/ 600183E : 90C7                		mov	#_JR,r0
(2) 1423/ 6001840 : 2082                		mov	r8,@r0
(2) 1424/ 6001842 : 1041                		mov	r4,@(4,r0)
(2) 1425/ 6001844 : 0009                		nop
(2) 1426/ 6001846 :                     ; 		mov	@(4,r0),r4
(2) 1427/ 6001846 : 5405                		mov 	@($14,r0),r4
(2) 1428/ 6001848 : 4418                		shll8	r4
(2) 1429/ 600184A : 4518                		shll8	r5
(2) 1430/ 600184C : D059                		mov	#$C0000000|Cach_DDA_Src_L+$C,r0
(2) 1431/ 600184E : 2042                		mov	r4,@r0
(2) 1432/ 6001850 : D059                		mov	#$C0000000|Cach_DDA_Src_L+4,r0
(2) 1433/ 6001852 : 2052                		mov	r5,@r0
(2) 1434/ 6001854 : 6522                		mov	@r2,r5
(2) 1435/ 6001856 : 3518                		sub 	r1,r5
(2) 1436/ 6001858 : 6413                		mov 	r1,r4
(2) 1437/ 600185A : 4518                		shll8	r5
(2) 1438/ 600185C : 4428                		shll16	r4
(2) 1439/ 600185E : 90B7                		mov	#_JR,r0
(2) 1440/ 6001860 : 2082                		mov	r8,@r0
(2) 1441/ 6001862 : 1051                		mov	r5,@(4,r0)
(2) 1442/ 6001864 : 0009                		nop
(2) 1443/ 6001866 :                     ; 		mov	@(4,r0),r5
(2) 1444/ 6001866 : 5505                		mov 	@($14,r0),r5
(2) 1445/ 6001868 : 4518                		shll8	r5
(2) 1446/ 600186A : E000                		mov	#0,r0
(2) 1447/ 600186C : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1448/ 600186E :                     .lft_skip:
(2) 1449/ 600186E : 000B                		rts
(2) 1450/ 6001870 : 0009                		nop
(2) 1451/ 6001872 :                     		align 4
(2) 1452/ 6001874 :                     
(2) 1453/ 6001874 :                     ; --------------------------------------------------------
(2) 1454/ 6001874 :                     
(2) 1455/ 6001874 :                     set_right:
(2) 1456/ 6001874 : 6933                		mov	r3,r9
(2) 1457/ 6001876 : 7920                		add	#$20,r9
(2) 1458/ 6001878 : 6692                		mov	@r9,r6
(2) 1459/ 600187A : 5791                		mov	@(4,r9),r7
(2) 1460/ 600187C : D94F                		mov	#$C0000000|Cach_DDA_Src_R,r9
(2) 1461/ 600187E : 6063                		mov	r6,r0
(2) 1462/ 6001880 : 4028                		shll16	r0
(2) 1463/ 6001882 : 2902                		mov	r0,@r9
(2) 1464/ 6001884 : 6073                		mov	r7,r0
(2) 1465/ 6001886 : 4028                		shll16	r0
(2) 1466/ 6001888 : 1902                		mov	r0,@(8,r9)
(2) 1467/ 600188A :                     
(2) 1468/ 600188A : 6132                		mov	@r3,r1
(2) 1469/ 600188C : 5931                		mov	@(4,r3),r9
(2) 1470/ 600188E : 73F8                		add	#-8,r3
(2) 1471/ 6001890 : 33C3                		cmp/ge	r12,r3
(2) 1472/ 6001892 : 8900                		bt	.rgt_ok
(2) 1473/ 6001894 : 63D3                		mov 	r13,r3
(2) 1474/ 6001896 :                     .rgt_ok:
(2) 1475/ 6001896 : 5031                		mov	@(4,r3),r0
(2) 1476/ 6001898 : 3098                		sub	r9,r0
(2) 1477/ 600189A : 8800                		cmp/eq	#0,r0
(2) 1478/ 600189C : 89EA                		bt	set_right
(2) 1479/ 600189E : 4011                		cmp/pz	r0
(2) 1480/ 60018A0 : 8B29                		bf	.rgt_skip
(2) 1481/ 60018A2 : 400A                		lds	r0,mach
(2) 1482/ 60018A4 : 6933                		mov	r3,r9
(2) 1483/ 60018A6 : 7920                		add	#$20,r9
(2) 1484/ 60018A8 : 6092                		mov 	@r9,r0
(2) 1485/ 60018AA : 3068                		sub 	r6,r0
(2) 1486/ 60018AC : 5691                		mov 	@(4,r9),r6
(2) 1487/ 60018AE : 3678                		sub 	r7,r6
(2) 1488/ 60018B0 : 6703                		mov	r0,r7
(2) 1489/ 60018B2 : 4618                		shll8	r6
(2) 1490/ 60018B4 : 4718                		shll8	r7
(2) 1491/ 60018B6 : E001                		mov	#1,r0
(2) 1492/ 60018B8 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1493/ 60018BA : 090A                		sts	mach,r9
(2) 1494/ 60018BC : 9088                		mov	#_JR,r0
(2) 1495/ 60018BE : 2092                		mov	r9,@r0
(2) 1496/ 60018C0 : 1071                		mov	r7,@(4,r0)
(2) 1497/ 60018C2 : 0009                		nop
(2) 1498/ 60018C4 :                     ; 		mov	@(4,r0),r7
(2) 1499/ 60018C4 : 5705                		mov 	@($14,r0),r7
(2) 1500/ 60018C6 : 9083                		mov	#_JR,r0
(2) 1501/ 60018C8 : 2092                		mov	r9,@r0
(2) 1502/ 60018CA : 1061                		mov	r6,@(4,r0)
(2) 1503/ 60018CC : 0009                		nop
(2) 1504/ 60018CE :                     ; 		mov	@(4,r0),r6
(2) 1505/ 60018CE : 5605                		mov 	@($14,r0),r6
(2) 1506/ 60018D0 : 4618                		shll8	r6
(2) 1507/ 60018D2 : 4718                		shll8	r7
(2) 1508/ 60018D4 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+4,r0
(2) 1509/ 60018D6 : 2072                		mov	r7,@r0
(2) 1510/ 60018D8 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+$C,r0
(2) 1511/ 60018DA : 2062                		mov	r6,@r0
(2) 1512/ 60018DC : 6732                		mov	@r3,r7
(2) 1513/ 60018DE : 3718                		sub 	r1,r7
(2) 1514/ 60018E0 : 6613                		mov 	r1,r6
(2) 1515/ 60018E2 : 4628                		shll16	r6
(2) 1516/ 60018E4 : 4718                		shll8	r7
(2) 1517/ 60018E6 : 9073                		mov	#_JR,r0
(2) 1518/ 60018E8 : 2092                		mov	r9,@r0
(2) 1519/ 60018EA : 1071                		mov	r7,@(4,r0)
(2) 1520/ 60018EC : 0009                		nop
(2) 1521/ 60018EE :                     ; 		mov	@(4,r0),r7
(2) 1522/ 60018EE : 5705                		mov 	@($14,r0),r7
(2) 1523/ 60018F0 : 4718                		shll8	r7
(2) 1524/ 60018F2 : E000                		mov	#0,r0
(2) 1525/ 60018F4 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1526/ 60018F6 :                     .rgt_skip:
(2) 1527/ 60018F6 : 000B                		rts
(2) 1528/ 60018F8 : 0009                		nop
(2) 1529/ 60018FA :                     		align 4
(2) 1530/ 60018FC :                     
(2) 1531/ 60018FC :                     ; --------------------------------------------------------
(2) 1532/ 60018FC :                     
(2) 1533/ 60018FC :                     	; r2
(2) 1534/ 60018FC :                     	; r3
(2) 1535/ 60018FC :                     	; r4 - Left X
(2) 1536/ 60018FC :                     	; r5
(2) 1537/ 60018FC :                     	; r6 - Right X
(2) 1538/ 60018FC :                     	; r7
(2) 1539/ 60018FC :                     	; r8
(2) 1540/ 60018FC :                     	; r9
(2) 1541/ 60018FC :                     	; r10 - Top Y, gets updated after calling put_piece
(2) 1542/ 60018FC :                     
(2) 1543/ 60018FC :                     put_piece:
(2) 1544/ 60018FC : E001                		mov	#1,r0
(2) 1545/ 60018FE : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Tell watchdog we are mid-write
(2) 1546/ 6001900 : 5821                		mov	@(4,r2),r8			; Left DDA's Y
(2) 1547/ 6001902 : 5931                		mov	@(4,r3),r9			; Right DDA's Y
(2) 1548/ 6001904 : 38A8                		sub	r10,r8
(2) 1549/ 6001906 : 39A8                		sub	r10,r9
(2) 1550/ 6001908 : 3897                		cmp/gt	r9,r8
(2) 1551/ 600190A : 8900                		bt	.lefth
(2) 1552/ 600190C : 6983                		mov	r8,r9
(2) 1553/ 600190E :                     .lefth:
(2) 1554/ 600190E : 6843                		mov	r4,r8
(2) 1555/ 6001910 : 6063                		mov	r6,r0
(2) 1556/ 6001912 : 4829                		shlr16	r8
(2) 1557/ 6001914 : 208D                		xtrct	r8,r0
(2) 1558/ 6001916 : 1103                		mov	r0,@(plypz_xl,r1)
(2) 1559/ 6001918 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2) 1560/ 600191A : 0597                		mul	r9,r5
(2) 1561/ 600191C : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2) 1562/ 600191E : 021A                		sts	macl,r2
(2) 1563/ 6001920 : 0797                		mul	r9,r7
(2) 1564/ 6001922 : 031A                		sts	macl,r3
(2) 1565/ 6001924 : 342C                		add 	r2,r4
(2) 1566/ 6001926 : 363C                		add	r3,r6
(2) 1567/ 6001928 : 62A3                		mov	r10,r2
(2) 1568/ 600192A : 3A9C                		add	r9,r10
(2) 1569/ 600192C : 6BA3                		mov	r10,r11
(2) 1570/ 600192E : 4228                		shll16	r2
(2) 1571/ 6001930 : 2B2B                		or	r2,r11
(2) 1572/ 6001932 : 11B2                		mov	r11,@(plypz_ytb,r1)
(2) 1573/ 6001934 :                     
(2) 1574/ 6001934 :                     	; r9 - Y multiply
(2) 1575/ 6001934 :                     	;
(2) 1576/ 6001934 :                     	; free:
(2) 1577/ 6001934 :                     	; r2,r3,r5,r7,r8,r11
(2) 1578/ 6001934 : D824                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1579/ 6001936 : D725                		mov	#$C0000000|Cach_DDA_Src_R,r7
(2) 1580/ 6001938 : 6282                		mov	@r8,r2
(2) 1581/ 600193A : 6372                		mov	@r7,r3
(2) 1582/ 600193C : 6523                		mov	r2,r5
(2) 1583/ 600193E : 6033                		mov	r3,r0
(2) 1584/ 6001940 : 4529                		shlr16	r5
(2) 1585/ 6001942 : 205D                		xtrct	r5,r0
(2) 1586/ 6001944 : 1104                		mov	r0,@(plypz_src_xl,r1)
(2) 1587/ 6001946 :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2) 1588/ 6001946 :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2) 1589/ 6001946 :                     
(2) 1590/ 6001946 : 5081                		mov	@(4,r8),r0
(2) 1591/ 6001948 : 5571                		mov	@(4,r7),r5
(2) 1592/ 600194A : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2) 1593/ 600194C : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2) 1594/ 600194E : 0097                		mul	r9,r0
(2) 1595/ 6001950 : 001A                		sts	macl,r0
(2) 1596/ 6001952 : 0597                		mul	r9,r5
(2) 1597/ 6001954 : 051A                		sts	macl,r5
(2) 1598/ 6001956 : 320C                		add 	r0,r2
(2) 1599/ 6001958 : 335C                		add	r5,r3
(2) 1600/ 600195A : 2822                		mov	r2,@r8
(2) 1601/ 600195C : 2732                		mov	r3,@r7
(2) 1602/ 600195E : 7808                		add	#8,r8	; Go to Y/DY
(2) 1603/ 6001960 : 7708                		add	#8,r7
(2) 1604/ 6001962 : 6282                		mov	@r8,r2
(2) 1605/ 6001964 : 6372                		mov	@r7,r3
(2) 1606/ 6001966 : 6523                		mov	r2,r5
(2) 1607/ 6001968 : 6033                		mov	r3,r0
(2) 1608/ 600196A : 4529                		shlr16	r5
(2) 1609/ 600196C : 205D                		xtrct	r5,r0
(2) 1610/ 600196E : 1105                		mov	r0,@(plypz_src_yl,r1)
(2) 1611/ 6001970 :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2) 1612/ 6001970 :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2) 1613/ 6001970 :                     
(2) 1614/ 6001970 : 5081                		mov	@(4,r8),r0
(2) 1615/ 6001972 : 5571                		mov	@(4,r7),r5
(2) 1616/ 6001974 : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2) 1617/ 6001976 : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2) 1618/ 6001978 : 0097                		mul	r9,r0
(2) 1619/ 600197A : 001A                		sts	macl,r0
(2) 1620/ 600197C : 0597                		mul	r9,r5
(2) 1621/ 600197E : 051A                		sts	macl,r5
(2) 1622/ 6001980 : 320C                		add 	r0,r2
(2) 1623/ 6001982 : 335C                		add	r5,r3
(2) 1624/ 6001984 : 2822                		mov	r2,@r8
(2) 1625/ 6001986 : 2732                		mov	r3,@r7
(2) 1626/ 6001988 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2) 1627/ 600198A : 8902                		bt	.top_neg
(2) 1628/ 600198C : 4B28                		shll16	r11
(2) 1629/ 600198E : 4B15                		cmp/pl	r11
(2) 1630/ 6001990 : 8B09                		bf	.bad_piece
(2) 1631/ 6001992 :                     .top_neg:
(2) 1632/ 6001992 : 50E1                		mov	@(plygn_mtrl,r14),r0
(2) 1633/ 6001994 : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2) 1634/ 6001996 : 50E0                		mov	@(plygn_type,r14),r0
(2) 1635/ 6001998 : 1100                		mov 	r0,@(plypz_type,r1)
(2) 1636/ 600199A : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1637/ 600199C : 7001                		add	#1,r0
(2) 1638/ 600199E : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(2) 1639/ 60019A0 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2) 1640/ 60019A2 : 7001                		add	#1,r0
(2) 1641/ 60019A4 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 1642/ 60019A6 :                     .bad_piece:
(2) 1643/ 60019A6 : E000                		mov	#0,r0
(2) 1644/ 60019A8 : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Unlock.
(2) 1645/ 60019AA : 000B                		rts
(2) 1646/ 60019AC : 0009                		nop
(2) 1647/ 60019AE :                     		align 4
(2) 1648/ 60019B0 : C000 0440 C000      		ltorg
          60019B6 : 044C C000 0444 
          60019BC : C000 0450 C000 
          60019C2 : 0454 C000 045C 
          60019C8 : C000 0440 C000 
          60019CE : 0450 FF00          
(2) 1649/ 60019D2 :                     
(2) 1650/ 60019D2 :                     ; =================================================================
(2) 1651/ 60019D2 :                     ; ------------------------------------------------
(2) 1652/ 60019D2 :                     ; WATCHDOG INTERRUPT
(2) 1653/ 60019D2 :                     ; ------------------------------------------------
(2) 1654/ 60019D2 :                     
(2) 1655/ 60019D2 :                     		align 4
(2) 1656/ 60019D4 :                     m_irq_wdg:
(2) 1657/ 60019D4 : 91A8                		mov	#_FRT,r1
(2) 1658/ 60019D6 : 8417                		mov.b	@(7,r1),r0
(2) 1659/ 60019D8 : CA02                		xor	#2,r0
(2) 1660/ 60019DA : 8017                		mov.b	r0,@(7,r1)
(2) 1661/ 60019DC : C503                		mov.w	@(marsGbl_WdgHold,gbr),r0
(2) 1662/ 60019DE : 2008                		tst	r0,r0
(2) 1663/ 60019E0 : 8B16                		bf	.exit_wdg
(2) 1664/ 60019E2 :                     ; ------------------------------------------------
(2) 1665/ 60019E2 :                     
(2) 1666/ 60019E2 : C502                		mov.w	@(marsGbl_WdgTask,gbr),r0
(2) 1667/ 60019E4 : 8807                		cmp/eq	#7,r0
(2) 1668/ 60019E6 : 8B1B                		bf	.wdg_main
(2) 1669/ 60019E8 :                     
(2) 1670/ 60019E8 :                     ; ------------------------------------------------
(2) 1671/ 60019E8 :                     ; Special...
(2) 1672/ 60019E8 : D14B                		mov	#_vdpreg,r1
(2) 1673/ 60019EA : 8515                .wait_fb:	mov.w   @($0A,r1),r0			; Framebuffer locked?
(2) 1674/ 60019EC : C802                		tst     #%10,r0
(2) 1675/ 60019EE : 8BFC                		bf      .wait_fb
(2) 1676/ 60019F0 : 8513                		mov.w   @(6,r1),r0			; SVDP-fill address
(2) 1677/ 60019F2 : 705F                		add     #$5F,r0				; Pre-increment
(2) 1678/ 60019F4 : 8113                		mov.w   r0,@(6,r1)
(2) 1679/ 60019F6 : 9098                		mov.w   #320/2,r0			; SVDP-fill size (320+ pixels)
(2) 1680/ 60019F8 : 8112                		mov.w   r0,@(4,r1)
(2) 1681/ 60019FA : E000                		mov.w	#$0000,r0			; SVDP-fill pixel data
(2) 1682/ 60019FC :                     ; 		mov.w	#$1000,r0
(2) 1683/ 60019FC : 8114                		mov.w   r0,@(8,r1)			; now SVDP-fill is working.
(2) 1684/ 60019FE : C507                		mov.w	@(marsGbl_WdgClLines,gbr),r0	; Decrement a line to progress
(2) 1685/ 6001A00 : 4010                		dt	r0
(2) 1686/ 6001A02 : 8F05                		bf/s	.exit_wdg
(2) 1687/ 6001A04 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)	; Write new value before branch
(2) 1688/ 6001A06 : E005                		mov	#5,r0				; Set watchdog task $05
(2) 1689/ 6001A08 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1690/ 6001A0A :                     .on_clr:
(2) 1691/ 6001A0A : 000B                		rts
(2) 1692/ 6001A0C : 0009                		nop
(2) 1693/ 6001A0E :                     		align 4
(2) 1694/ 6001A10 :                     .exit_wdg:
(2) 1695/ 6001A10 : 918C                		mov.w   #$FE80,r1
(2) 1696/ 6001A12 : 908C                		mov.w   #$A518,r0		; OFF
(2) 1697/ 6001A14 : 2101                		mov.w   r0,@r1
(2) 1698/ 6001A16 : CB20                		or      #$20,r0			; ON
(2) 1699/ 6001A18 : 2101                		mov.w   r0,@r1
(2) 1700/ 6001A1A : 9089                		mov.w   #$5A20,r0		; Wdg-timer: $20
(2) 1701/ 6001A1C : 000B                		rts
(2) 1702/ 6001A1E : 2101                		mov.w   r0,@r1
(2) 1703/ 6001A20 :                     		align 4
(2) 1704/ 6001A20 :                     
(2) 1705/ 6001A20 :                     ; ------------------------------------------------
(2) 1706/ 6001A20 :                     ; Process drawing now.
(2) 1707/ 6001A20 :                     .wdg_main:
(2) 1708/ 6001A20 : 4008                		shll2	r0
(2) 1709/ 6001A22 : D13E                		mov	#.list,r1
(2) 1710/ 6001A24 : 001E                		mov	@(r1,r0),r0
(2) 1711/ 6001A26 : 402B                		jmp	@r0
(2) 1712/ 6001A28 : 0009                		nop
(2) 1713/ 6001A2A :                     		align 4
(2) 1714/ 6001A2C :                     .list:
(2) 1715/ 6001A2C : 0600 1D8C           		dc.l slvplgn_00		; NULL task, exit.
(2) 1716/ 6001A30 : 0600 1A4C           		dc.l slvplgn_01		; 2D SVDP fast write
(2) 1717/ 6001A34 : 0600 1D8C           		dc.l slvplgn_00
(2) 1718/ 6001A38 : 0600 1D8C           		dc.l slvplgn_00
(2) 1719/ 6001A3C : 0600 1D8C           		dc.l slvplgn_00		; $04 -
(2) 1720/ 6001A40 : 0600 1A94           		dc.l slvplgn_05		; Main drawing routine
(2) 1721/ 6001A44 : 0600 1A52           		dc.l slvplgn_06		; Resume from solid color
(2) 1722/ 6001A48 : 0600 1D8C           		dc.l slvplgn_00		; ***
(2) 1723/ 6001A4C :                     
(2) 1724/ 6001A4C :                     ; ------------------------------------------------
(2) 1725/ 6001A4C :                     ; 2D MODE
(2) 1726/ 6001A4C :                     ; ------------------------------------------------
(2) 1727/ 6001A4C :                     
(2) 1728/ 6001A4C :                     slvplgn_01:
(2) 1729/ 6001A4C : 2F26                		mov	r2,@-r15
(2) 1730/ 6001A4E :                     ; 		mov	r3,@-r15
(2) 1731/ 6001A4E :                     ; 		mov	r4,@-r15
(2) 1732/ 6001A4E :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(2) 1733/ 6001A4E :                     ; 		mov	r0,r1
(2) 1734/ 6001A4E :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1735/ 6001A4E :                     ; 		cmp/eq	r1,r0
(2) 1736/ 6001A4E :                     ; 		bt	.no_finish
(2) 1737/ 6001A4E :                     ; 		and	#%111111,r0
(2) 1738/ 6001A4E :                     ; 		shll2	r0
(2) 1739/ 6001A4E :                     ; 		shll	r0
(2) 1740/ 6001A4E :                     ; 		mov	#$C0000000|RAM_Mars_SVdpDrwList,r4
(2) 1741/ 6001A4E :                     ; 		mov	#_framebuffer,r3
(2) 1742/ 6001A4E :                     ; 		add	r0,r4
(2) 1743/ 6001A4E :                     ; 		mov	@r4+,r1		; Dest
(2) 1744/ 6001A4E :                     ; 		mov	@r4+,r2		; Data
(2) 1745/ 6001A4E :                     ; 		add	r3,r1
(2) 1746/ 6001A4E :                     ; 		mov	r2,@r1		; <--
(2) 1747/ 6001A4E :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1748/ 6001A4E :                     ; 		add	#1,r0
(2) 1749/ 6001A4E :                     ; 		mov.w	r0,@(marsGbl_SVdpQRead,gbr)
(2) 1750/ 6001A4E :                     ; .no_finish:
(2) 1751/ 6001A4E :                     ; 		mov	#CS3+$40,r1
(2) 1752/ 6001A4E :                     ; 		mov	@r1,r0
(2) 1753/ 6001A4E :                     ; 		add	#1,r0
(2) 1754/ 6001A4E :                     ; 		mov	r0,@r1
(2) 1755/ 6001A4E :                     ; .no_queue:
(2) 1756/ 6001A4E :                     ; 		mov	@r15+,r4
(2) 1757/ 6001A4E :                     ; 		mov	@r15+,r3
(2) 1758/ 6001A4E : A1B0                		bra	drwtask_exit
(2) 1759/ 6001A50 : E220                		mov	#$20,r2
(2) 1760/ 6001A52 :                     
(2) 1761/ 6001A52 :                     ; ------------------------------------------------
(2) 1762/ 6001A52 :                     ; Task $06
(2) 1763/ 6001A52 :                     ;
(2) 1764/ 6001A52 :                     ; Resume from solid color
(2) 1765/ 6001A52 :                     ; ------------------------------------------------
(2) 1766/ 6001A52 :                     
(2) 1767/ 6001A52 :                     slvplgn_06:
(2) 1768/ 6001A52 : 2F26                		mov	r2,@-r15
(2) 1769/ 6001A54 : 2F36                		mov	r3,@-r15
(2) 1770/ 6001A56 : 2F46                		mov	r4,@-r15
(2) 1771/ 6001A58 : 2F56                		mov	r5,@-r15
(2) 1772/ 6001A5A : 2F66                		mov	r6,@-r15
(2) 1773/ 6001A5C : 2F76                		mov	r7,@-r15
(2) 1774/ 6001A5E : 2F86                		mov	r8,@-r15
(2) 1775/ 6001A60 : 2F96                		mov	r9,@-r15
(2) 1776/ 6001A62 : 2FA6                		mov	r10,@-r15
(2) 1777/ 6001A64 : 2FB6                		mov	r11,@-r15
(2) 1778/ 6001A66 : 2FC6                		mov	r12,@-r15
(2) 1779/ 6001A68 : 2FD6                		mov	r13,@-r15
(2) 1780/ 6001A6A : 2FE6                		mov	r14,@-r15
(2) 1781/ 6001A6C : 4F12                		sts	macl,@-r15
(2) 1782/ 6001A6E : 4F02                		sts	mach,@-r15
(2) 1783/ 6001A70 : D02B                		mov	#$C0000000|Cach_LnDrw_L,r0
(2) 1784/ 6001A72 : 6E06                		mov	@r0+,r14
(2) 1785/ 6001A74 : 6D06                		mov	@r0+,r13
(2) 1786/ 6001A76 : 6C06                		mov	@r0+,r12
(2) 1787/ 6001A78 : 6B06                		mov	@r0+,r11
(2) 1788/ 6001A7A : 6A06                		mov	@r0+,r10
(2) 1789/ 6001A7C : 6906                		mov	@r0+,r9
(2) 1790/ 6001A7E : 6806                		mov	@r0+,r8
(2) 1791/ 6001A80 : 6706                		mov	@r0+,r7
(2) 1792/ 6001A82 : 6606                		mov	@r0+,r6
(2) 1793/ 6001A84 : 6506                		mov	@r0+,r5
(2) 1794/ 6001A86 : 6406                		mov	@r0+,r4
(2) 1795/ 6001A88 : 6306                		mov	@r0+,r3
(2) 1796/ 6001A8A : 6206                		mov	@r0+,r2
(2) 1797/ 6001A8C : 6106                		mov	@r0+,r1
(2) 1798/ 6001A8E : E005                		mov	#5,r0
(2) 1799/ 6001A90 : A16C                		bra	drwsld_updline
(2) 1800/ 6001A92 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)	; Set task $05
(2) 1801/ 6001A94 :                     
(2) 1802/ 6001A94 :                     ; ------------------------------------------------
(2) 1803/ 6001A94 :                     ; Task $05
(2) 1804/ 6001A94 :                     ;
(2) 1805/ 6001A94 :                     ; Draw polygon piece
(2) 1806/ 6001A94 :                     ; ------------------------------------------------
(2) 1807/ 6001A94 :                     
(2) 1808/ 6001A94 :                     slvplgn_05:
(2) 1809/ 6001A94 : 2F26                		mov	r2,@-r15
(2) 1810/ 6001A96 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces to draw?
(2) 1811/ 6001A98 : 4015                		cmp/pl	r0
(2) 1812/ 6001A9A : 8907                		bt	.has_pz
(2) 1813/ 6001A9C : C505                		mov.w	@(marsGbl_WdgReady,gbr),r0	; Finished slicing?
(2) 1814/ 6001A9E : 2008                		tst	r0,r0
(2) 1815/ 6001AA0 : 8901                		bt	.exit
(2) 1816/ 6001AA2 : E000                		mov	#0,r0				; Watchdog out.
(2) 1817/ 6001AA4 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1818/ 6001AA6 : A184                .exit:		bra	drwtask_exit
(2) 1819/ 6001AA8 : E220                		mov	#$20,r2				; Wdg-timer: $20
(2) 1820/ 6001AAA :                     		align 4
(2) 1821/ 6001AAC :                     .has_pz:
(2) 1822/ 6001AAC : 2F36                		mov	r3,@-r15			; Save all these regs
(2) 1823/ 6001AAE : 2F46                		mov	r4,@-r15
(2) 1824/ 6001AB0 : 2F56                		mov	r5,@-r15
(2) 1825/ 6001AB2 : 2F66                		mov	r6,@-r15
(2) 1826/ 6001AB4 : 2F76                		mov	r7,@-r15
(2) 1827/ 6001AB6 : 2F86                		mov	r8,@-r15
(2) 1828/ 6001AB8 : 2F96                		mov	r9,@-r15
(2) 1829/ 6001ABA : 2FA6                		mov	r10,@-r15
(2) 1830/ 6001ABC : 2FB6                		mov	r11,@-r15
(2) 1831/ 6001ABE : 2FC6                		mov	r12,@-r15
(2) 1832/ 6001AC0 : 2FD6                		mov	r13,@-r15
(2) 1833/ 6001AC2 : 2FE6                		mov	r14,@-r15
(2) 1834/ 6001AC4 : 4F12                		sts	macl,@-r15
(2) 1835/ 6001AC6 : 4F02                		sts	mach,@-r15
(2) 1836/ 6001AC8 :                     drwtsk1_newpz:
(2) 1837/ 6001AC8 : DE16                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r14
(2) 1838/ 6001ACA : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1839/ 6001ACC : C90F                		and	#16-1,r0
(2) 1840/ 6001ACE : 4018                		shll8	r0
(2) 1841/ 6001AD0 : 4009                		shlr2	r0
(2) 1842/ 6001AD2 : 3E0C                		add	r0,r14
(2) 1843/ 6001AD4 : 59E2                		mov	@(plypz_ytb,r14),r9	; Start grabbing StartY/EndY positions
(2) 1844/ 6001AD6 : 6A9F                		exts.w	r9,r10			; r10 - Bottom
(2) 1845/ 6001AD8 : 4929                		shlr16	r9			;  r9 - Top
(2) 1846/ 6001ADA : 699F                		exts.w	r9,r9
(2) 1847/ 6001ADC : 3A90                		cmp/eq	r9,r10			; if Top == Bottom, exit
(2) 1848/ 6001ADE : 8908                		bt	.invld_y
(2) 1849/ 6001AE0 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; if Top > 224, skip
(2) 1850/ 6001AE0 :                     ; 		shll2	r0
(2) 1851/ 6001AE0 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1852/ 6001AE2 : 3903                		cmp/ge	r0,r9
(2) 1853/ 6001AE4 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2) 1854/ 6001AE6 : 3A07                		cmp/gt	r0,r10
(2) 1855/ 6001AE8 : 8B00                		bf	.len_max
(2) 1856/ 6001AEA : 6A03                		mov	r0,r10
(2) 1857/ 6001AEC :                     .len_max:
(2) 1858/ 6001AEC : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2) 1859/ 6001AEE : 4A15                		cmp/pl	r10
(2) 1860/ 6001AF0 : 8904                		bt	.valid_y
(2) 1861/ 6001AF2 :                     .invld_y:
(2) 1862/ 6001AF2 : A140                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2) 1863/ 6001AF4 : 0009                		nop
(2) 1864/ 6001AF6 :                     		align 4
(2) 1865/ 6001AF8 :                     .no_pz:
(2) 1866/ 6001AF8 : A15B                		bra	drwtask_exit
(2) 1867/ 6001AFA : E210                		mov	#$10,r2
(2) 1868/ 6001AFC :                     		align 4
(2) 1869/ 6001AFC :                     .valid_y:
(2) 1870/ 6001AFC : 51E3                		mov	@(plypz_xl,r14),r1
(2) 1871/ 6001AFE : 6313                		mov	r1,r3
(2) 1872/ 6001B00 : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2) 1873/ 6001B02 : 4129                		shlr16	r1
(2) 1874/ 6001B04 : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2) 1875/ 6001B06 : 4128                		shll16	r1
(2) 1876/ 6001B08 : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2) 1877/ 6001B0A : 4328                		shll16	r3
(2) 1878/ 6001B0C : 4029                		shlr16	r0
(2) 1879/ 6001B0E : 4019                		shlr8	r0
(2) 1880/ 6001B10 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2) 1881/ 6001B12 : 8B13                 		bf	drwtsk_texmode
(2) 1882/ 6001B14 : A0D4                		bra	drwtsk_solidmode
(2) 1883/ 6001B16 : 0009                		nop
(2) 1884/ 6001B18 :                     		align 4
(2) 1885/ 6001B18 : 2000 4100 0600      		ltorg
          6001B1E : 1A2C C000 0460 
          6001B24 : C000 0000 FE10 
          6001B2A : 00A0 FE80 A518 
          6001B30 : 5A20             
(2) 1886/ 6001B32 :                     
(2) 1887/ 6001B32 :                     ; ------------------------------------
(2) 1888/ 6001B32 :                     ; Texture mode
(2) 1889/ 6001B32 :                     ;
(2) 1890/ 6001B32 :                     ; r1  - XL
(2) 1891/ 6001B32 :                     ; r2  - XL DX
(2) 1892/ 6001B32 :                     ; r3  - XR
(2) 1893/ 6001B32 :                     ; r4  - XR DX
(2) 1894/ 6001B32 :                     ; r5  - SRC XL
(2) 1895/ 6001B32 :                     ; r6  - SRC XR
(2) 1896/ 6001B32 :                     ; r7  - SRC YL
(2) 1897/ 6001B32 :                     ; r8  - SRC YR
(2) 1898/ 6001B32 :                     ; r9  - Y current
(2) 1899/ 6001B32 :                     ; r10  - Number of lines
(2) 1900/ 6001B32 :                     ; ------------------------------------
(2) 1901/ 6001B32 :                     
(2) 1902/ 6001B32 :                     		align 4
(2) 1903/ 6001B34 :                     go_drwsld_updline_tex:
(2) 1904/ 6001B34 : A0A8                		bra	drwsld_updline_tex
(2) 1905/ 6001B36 : 0009                		nop
(2) 1906/ 6001B38 :                     go_drwtex_gonxtpz:
(2) 1907/ 6001B38 : A11D                		bra	drwsld_nextpz
(2) 1908/ 6001B3A : 0009                		nop
(2) 1909/ 6001B3C :                     		align 4
(2) 1910/ 6001B3C :                     drwtsk_texmode:
(2) 1911/ 6001B3C : C504                		mov.w	@(marsGbl_WdgDivLock,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2) 1912/ 6001B3E : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2) 1913/ 6001B40 : 8B02                		bf	.tex_valid
(2) 1914/ 6001B42 : A128                		bra	drwtask_return
(2) 1915/ 6001B44 : E210                		mov	#$10,r2				; Exit Wdg-timer: $10 (comeback quickly)
(2) 1916/ 6001B46 :                     		align 4
(2) 1917/ 6001B48 :                     .tex_valid:
(2) 1918/ 6001B48 : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2) 1919/ 6001B4A : 6653                		mov	r5,r6
(2) 1920/ 6001B4C : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2) 1921/ 6001B4E : 4529                		shlr16	r5
(2) 1922/ 6001B50 : 6873                		mov	r7,r8
(2) 1923/ 6001B52 : 4729                		shlr16	r7
(2) 1924/ 6001B54 :                     
(2) 1925/ 6001B54 : 4528                		shll16	r5
(2) 1926/ 6001B56 : 4628                		shll16	r6
(2) 1927/ 6001B58 : 4728                		shll16	r7
(2) 1928/ 6001B5A : 4828                		shll16	r8
(2) 1929/ 6001B5C :                     drwsld_nxtline_tex:
(2) 1930/ 6001B5C : 4911                		cmp/pz	r9				; Y Start below 0?
(2) 1931/ 6001B5E : 8BE9                		bf	go_drwsld_updline_tex
(2) 1932/ 6001B60 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Y Start after 224?
(2) 1933/ 6001B60 :                     ; 		shll2	r0
(2) 1934/ 6001B60 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1935/ 6001B62 : 3903                		cmp/ge	r0,r9
(2) 1936/ 6001B64 : 89E8                		bt	go_drwtex_gonxtpz
(2) 1937/ 6001B66 :                     
(2) 1938/ 6001B66 : D050                		mov	#$C0000000|Cach_Bkup_S,r0
(2) 1939/ 6001B68 : 2016                		mov	r1,@-r0
(2) 1940/ 6001B6A : 2026                		mov	r2,@-r0
(2) 1941/ 6001B6C : 2036                		mov	r3,@-r0
(2) 1942/ 6001B6E : 2046                		mov	r4,@-r0
(2) 1943/ 6001B70 : 2056                		mov	r5,@-r0
(2) 1944/ 6001B72 : 2066                		mov	r6,@-r0
(2) 1945/ 6001B74 : 2076                		mov	r7,@-r0
(2) 1946/ 6001B76 : 2086                		mov	r8,@-r0
(2) 1947/ 6001B78 : 2096                		mov	r9,@-r0
(2) 1948/ 6001B7A : 20A6                		mov	r10,@-r0
(2) 1949/ 6001B7C : 20B6                		mov	r11,@-r0
(2) 1950/ 6001B7E :                     	; r10-r11 are usable
(2) 1951/ 6001B7E : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1952/ 6001B80 : 6B03                		mov	r0,r11			; r11 - Width
(2) 1953/ 6001B82 : 4129                		shlr16	r1
(2) 1954/ 6001B84 : 4329                		shlr16	r3
(2) 1955/ 6001B86 : 611F                		exts.w	r1,r1
(2) 1956/ 6001B88 : 633F                		exts.w	r3,r3
(2) 1957/ 6001B8A : 6033                		mov	r3,r0			; r0: X Right - X Left
(2) 1958/ 6001B8C : 3018                		sub	r1,r0
(2) 1959/ 6001B8E : 4015                		cmp/pl	r0			; Line reversed?
(2) 1960/ 6001B90 : 8908                		bt	.txrevers
(2) 1961/ 6001B92 : 6033                		mov	r3,r0			; Swap XL and XR values
(2) 1962/ 6001B94 : 6313                		mov	r1,r3
(2) 1963/ 6001B96 : 6103                		mov	r0,r1
(2) 1964/ 6001B98 : 6053                		mov	r5,r0
(2) 1965/ 6001B9A : 6563                		mov	r6,r5
(2) 1966/ 6001B9C : 6603                		mov	r0,r6
(2) 1967/ 6001B9E : 6073                		mov	r7,r0
(2) 1968/ 6001BA0 : 6783                		mov	r8,r7
(2) 1969/ 6001BA2 : 6803                		mov	r0,r8
(2) 1970/ 6001BA4 :                     .txrevers:
(2) 1971/ 6001BA4 : 3310                		cmp/eq	r1,r3				; Same X position?
(2) 1972/ 6001BA6 : 8962                		bt	.tex_skip_line
(2) 1973/ 6001BA8 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; Y Start after 224?
(2) 1974/ 6001BA8 :                     ; 		shll2	r0
(2) 1975/ 6001BA8 : 4311                		cmp/pz	r3
(2) 1976/ 6001BAA : 8B60                		bf	.tex_skip_line
(2) 1977/ 6001BAC : 31B7                		cmp/gt	r11,r1				; X left > 320?
(2) 1978/ 6001BAE : 895E                		bt	.tex_skip_line
(2) 1979/ 6001BB0 : 6233                		mov	r3,r2
(2) 1980/ 6001BB2 : 6013                		mov 	r1,r0
(2) 1981/ 6001BB4 : 3208                		sub 	r0,r2
(2) 1982/ 6001BB6 : 3658                		sub	r5,r6
(2) 1983/ 6001BB8 : 3878                		sub	r7,r8
(2) 1984/ 6001BBA :                     
(2) 1985/ 6001BBA :                     	; Calculate new DX values
(2) 1986/ 6001BBA :                     	; make sure DIV is not in use
(2) 1987/ 6001BBA :                     	; before getting here.
(2) 1988/ 6001BBA :                     	; (set marsGbl_WdgDivLock to 1)
(2) 1989/ 6001BBA : 907F                		mov	#_JR,r0				; r6 / r2
(2) 1990/ 6001BBC : 2022                		mov	r2,@r0
(2) 1991/ 6001BBE : 1061                		mov	r6,@(4,r0)
(2) 1992/ 6001BC0 : 0009                		nop
(2) 1993/ 6001BC2 :                     ; 		mov	@(4,r0),r6			; r8 / r2
(2) 1994/ 6001BC2 : 5605                		mov 	@($14,r0),r6
(2) 1995/ 6001BC4 : 2022                		mov	r2,@r0
(2) 1996/ 6001BC6 : 1081                		mov	r8,@(4,r0)
(2) 1997/ 6001BC8 : 0009                		nop
(2) 1998/ 6001BCA :                     ; 		mov	@(4,r0),r8
(2) 1999/ 6001BCA : 5805                		mov 	@($14,r0),r8
(2) 2000/ 6001BCC :                     	; Limit X destination points
(2) 2001/ 6001BCC :                     	; and correct the texture's X positions
(2) 2002/ 6001BCC :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; XR point > 320?
(2) 2003/ 6001BCC :                     ; 		shll2	r0
(2) 2004/ 6001BCC : 33B7                		cmp/gt	r11,r3
(2) 2005/ 6001BCE : 8B00                		bf	.tr_fix
(2) 2006/ 6001BD0 : 63B3                		mov	r11,r3				; Force XR to 320
(2) 2007/ 6001BD2 :                     .tr_fix:
(2) 2008/ 6001BD2 : 4111                		cmp/pz	r1				; XL point < 0?
(2) 2009/ 6001BD4 : 8907                		bt	.tl_fix
(2) 2010/ 6001BD6 : 621B                		neg	r1,r2				; Fix texture positions
(2) 2011/ 6001BD8 : 0267                		mul	r6,r2
(2) 2012/ 6001BDA : 001A                		sts	macl,r0
(2) 2013/ 6001BDC : 350C                		add	r0,r5
(2) 2014/ 6001BDE : 0287                		mul	r8,r2
(2) 2015/ 6001BE0 : 001A                		sts	macl,r0
(2) 2016/ 6001BE2 : 370C                		add	r0,r7
(2) 2017/ 6001BE4 : 211A                		xor	r1,r1				; And reset XL to 0
(2) 2018/ 6001BE6 :                     .tl_fix:
(2) 2019/ 6001BE6 :                     
(2) 2020/ 6001BE6 :                     	; Start
(2) 2021/ 6001BE6 : E0FE                		mov	#-2,r0
(2) 2022/ 6001BE8 : 2109                		and	r0,r1
(2) 2023/ 6001BEA : 2309                		and	r0,r3
(2) 2024/ 6001BEC : 7301                		add	#1,r3				; LAZY PATCH
(2) 2025/ 6001BEE : 3318                		sub 	r1,r3
(2) 2026/ 6001BF0 : 4321                		shar	r3
(2) 2027/ 6001BF2 : 4315                		cmp/pl	r3
(2) 2028/ 6001BF4 : 8B3B                		bf	.tex_skip_line
(2) 2029/ 6001BF6 :                     
(2) 2030/ 6001BF6 : DA2D                		mov	#_overwrite+$200,r10
(2) 2031/ 6001BF8 : 54E0                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2) 2032/ 6001BFA : 6D43                		mov	r4,r13
(2) 2033/ 6001BFC : 4429                		shlr16	r4
(2) 2034/ 6001BFE : 6DDC                		extu.b	r13,r13
(2) 2035/ 6001C00 : 925D                		mov	#$3FFF,r2
(2) 2036/ 6001C02 : 2429                		and	r2,r4
(2) 2037/ 6001C04 : 6093                		mov 	r9,r0				; Y position * $200
(2) 2038/ 6001C06 : 4018                		shll8	r0
(2) 2039/ 6001C08 : 4000                		shll	r0
(2) 2040/ 6001C0A : 3A0C                		add 	r0,r10				; Add Y
(2) 2041/ 6001C0C : 3A1C                		add 	r1,r10				; Add X
(2) 2042/ 6001C0E : 51E1                		mov	@(plypz_mtrl,r14),r1
(2) 2043/ 6001C10 : E002                		mov	#CS1>>24,r0
(2) 2044/ 6001C12 : 4028                		shll16	r0
(2) 2045/ 6001C14 : 4018                		shll8	r0
(2) 2046/ 6001C16 : 3103                		cmp/ge	r0,r1
(2) 2047/ 6001C18 : 8901                		bt	.from_rom
(2) 2048/ 6001C1A : D025                		mov	#RAM_Mars_VramData,r0		; <-- TEXTURE BUFFER
(2) 2049/ 6001C1C : 310C                		add	r0,r1
(2) 2050/ 6001C1E :                     .from_rom:
(2) 2051/ 6001C1E :                     
(2) 2052/ 6001C1E : D225                		mov	#_vdpreg,r2		; Any pending SVDP fill?
(2) 2053/ 6001C20 : 8525                .w_fb:		mov.w	@(vdpsts,r2),r0
(2) 2054/ 6001C22 : C802                		tst	#%10,r0
(2) 2055/ 6001C24 : 8BFC                		bf	.w_fb
(2) 2056/ 6001C26 :                     .tex_xloop:
(2) 2057/ 6001C26 : 6273                		mov	r7,r2
(2) 2058/ 6001C28 : 4229                		shlr16	r2
(2) 2059/ 6001C2A : 242F                		muls	r2,r4
(2) 2060/ 6001C2C : 6253                		mov	r5,r2	   		; Build column index
(2) 2061/ 6001C2E : 001A                		sts	macl,r0
(2) 2062/ 6001C30 : 4229                		shlr16	r2
(2) 2063/ 6001C32 : 302C                		add	r2,r0
(2) 2064/ 6001C34 : 001C                		mov.b	@(r0,r1),r0		; Read left pixel
(2) 2065/ 6001C36 : C8FF                		tst	#$FF,r0
(2) 2066/ 6001C38 : 8900                		bt	.trns_1
(2) 2067/ 6001C3A : 30DC                		add	r13,r0			; color-index increment
(2) 2068/ 6001C3C :                     .trns_1:
(2) 2069/ 6001C3C : 600C                		extu.b	r0,r0
(2) 2070/ 6001C3E : 4018                		shll8	r0
(2) 2071/ 6001C40 : 400A                		lds	r0,mach			; Save left pixel
(2) 2072/ 6001C42 : 356C                		add	r6,r5			; Next X
(2) 2073/ 6001C44 : 378C                		add	r8,r7			; Next Y
(2) 2074/ 6001C46 :                     
(2) 2075/ 6001C46 : 6273                		mov	r7,r2
(2) 2076/ 6001C48 : 4229                		shlr16	r2
(2) 2077/ 6001C4A : 242F                		muls	r2,r4
(2) 2078/ 6001C4C : 6253                		mov	r5,r2	   		; Build column index
(2) 2079/ 6001C4E : 001A                		sts	macl,r0
(2) 2080/ 6001C50 : 4229                		shlr16	r2
(2) 2081/ 6001C52 : 302C                		add	r2,r0
(2) 2082/ 6001C54 : 001C                		mov.b	@(r0,r1),r0		; Read right pixel
(2) 2083/ 6001C56 : C8FF                		tst	#$FF,r0
(2) 2084/ 6001C58 : 8900                		bt	.trns2
(2) 2085/ 6001C5A : 30DC                		add	r13,r0			; color-index increment
(2) 2086/ 6001C5C :                     .trns2:
(2) 2087/ 6001C5C : 600C                		extu.b	r0,r0
(2) 2088/ 6001C5E : 020A                		sts	mach,r2
(2) 2089/ 6001C60 : 202B                		or	r2,r0
(2) 2090/ 6001C62 :                     
(2) 2091/ 6001C62 : 2A01                		mov.w	r0,@r10
(2) 2092/ 6001C64 : 7A02                		add	#2,r10
(2) 2093/ 6001C66 : 356C                		add	r6,r5			; Next X
(2) 2094/ 6001C68 : 4310                		dt	r3
(2) 2095/ 6001C6A : 8FDC                		bf/s	.tex_xloop
(2) 2096/ 6001C6C : 378C                		add	r8,r7			; Next Y
(2) 2097/ 6001C6E :                     .tex_skip_line:
(2) 2098/ 6001C6E : D012                		mov	#$C0000000|Cach_Bkup_LB,r0
(2) 2099/ 6001C70 : 6B06                		mov	@r0+,r11
(2) 2100/ 6001C72 : 6A06                		mov	@r0+,r10
(2) 2101/ 6001C74 : 6906                		mov	@r0+,r9
(2) 2102/ 6001C76 : 6806                		mov	@r0+,r8
(2) 2103/ 6001C78 : 6706                		mov	@r0+,r7
(2) 2104/ 6001C7A : 6606                		mov	@r0+,r6
(2) 2105/ 6001C7C : 6506                		mov	@r0+,r5
(2) 2106/ 6001C7E : 6406                		mov	@r0+,r4
(2) 2107/ 6001C80 : 6306                		mov	@r0+,r3
(2) 2108/ 6001C82 : 6206                		mov	@r0+,r2
(2) 2109/ 6001C84 : 6106                		mov	@r0+,r1
(2) 2110/ 6001C86 : 0009                		nop
(2) 2111/ 6001C88 :                     drwsld_updline_tex:
(2) 2112/ 6001C88 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2) 2113/ 6001C8A : 350C                		add	r0,r5
(2) 2114/ 6001C8C : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2) 2115/ 6001C8E : 360C                		add	r0,r6
(2) 2116/ 6001C90 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2) 2117/ 6001C92 : 370C                		add	r0,r7
(2) 2118/ 6001C94 : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2) 2119/ 6001C96 : 380C                		add	r0,r8
(2) 2120/ 6001C98 : 312C                		add	r2,r1				; Update X postions
(2) 2121/ 6001C9A : 4A10                		dt	r10
(2) 2122/ 6001C9C : 8D02                		bt/s	drwtex_nextpz
(2) 2123/ 6001C9E : 334C                		add	r4,r3
(2) 2124/ 6001CA0 : AF5C                		bra	drwsld_nxtline_tex
(2) 2125/ 6001CA2 : 7901                		add	#1,r9
(2) 2126/ 6001CA4 :                     drwtex_nextpz:
(2) 2127/ 6001CA4 : A067                		bra	drwsld_nextpz
(2) 2128/ 6001CA6 : 0009                		nop
(2) 2129/ 6001CA8 :                     		align 4
(2) 2130/ 6001CA8 : C000 04C4 2402      		ltorg
          6001CAE : 0200 0600 FAA0 
          6001CB4 : 2000 4100 C000 
          6001CBA : 0498 FF00 3FFF    
(2) 2131/ 6001CC0 :                     
(2) 2132/ 6001CC0 :                     ; ------------------------------------
(2) 2133/ 6001CC0 :                     ; Solid Color
(2) 2134/ 6001CC0 :                     ;
(2) 2135/ 6001CC0 :                     ; r1  - XL
(2) 2136/ 6001CC0 :                     ; r2  - XL DX
(2) 2137/ 6001CC0 :                     ; r3  - XR
(2) 2138/ 6001CC0 :                     ; r4  - XR DX
(2) 2139/ 6001CC0 :                     ; r9  - Y current
(2) 2140/ 6001CC0 :                     ; r10  - Number of lines
(2) 2141/ 6001CC0 :                     ; ------------------------------------
(2) 2142/ 6001CC0 :                     
(2) 2143/ 6001CC0 :                     drwtsk_solidmode:
(2) 2144/ 6001CC0 :                     ; 		mov	#$FF,r0
(2) 2145/ 6001CC0 : 56E1                		mov	@(plypz_mtrl,r14),r6
(2) 2146/ 6001CC2 : 55E0                		mov	@(plypz_type,r14),r5
(2) 2147/ 6001CC4 : 655C                		extu.b	r5,r5
(2) 2148/ 6001CC6 : 666C                		extu.b	r6,r6
(2) 2149/ 6001CC8 :                     ; 		and	r0,r5
(2) 2150/ 6001CC8 :                     ; 		and	r0,r6
(2) 2151/ 6001CC8 : 365C                		add	r5,r6
(2) 2152/ 6001CCA : DD3F                		mov	#_vdpreg,r13
(2) 2153/ 6001CCC : 85D5                .wait:		mov.w	@(10,r13),r0
(2) 2154/ 6001CCE : C802                		tst	#2,r0
(2) 2155/ 6001CD0 : 8BFC                		bf	.wait
(2) 2156/ 6001CD2 :                     drwsld_nxtline:
(2) 2157/ 6001CD2 : 4911                		cmp/pz	r9			; Y pos < 0?
(2) 2158/ 6001CD4 : 8B4A                		bf	drwsld_updline
(2) 2159/ 6001CD6 :                     ; 		mov	#SET_3DFIELD_HGHT,r0	; Y pos > 224?
(2) 2160/ 6001CD6 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 2161/ 6001CD8 : 3907                		cmp/gt	r0,r9
(2) 2162/ 6001CDA : 894C                		bt	drwsld_nextpz
(2) 2163/ 6001CDC : 6093                		mov	r9,r0			; r10-r9 < 0?
(2) 2164/ 6001CDE : 30AC                		add	r10,r0
(2) 2165/ 6001CE0 : 4015                		cmp/pl	r0
(2) 2166/ 6001CE2 : 8B48                		bf	drwsld_nextpz
(2) 2167/ 6001CE4 :                     
(2) 2168/ 6001CE4 : 6B13                		mov	r1,r11
(2) 2169/ 6001CE6 : 6C33                		mov	r3,r12
(2) 2170/ 6001CE8 : 4B29                		shlr16	r11
(2) 2171/ 6001CEA : 4C29                		shlr16	r12
(2) 2172/ 6001CEC : 6BBF                		exts.w	r11,r11
(2) 2173/ 6001CEE : 6CCF                		exts.w	r12,r12
(2) 2174/ 6001CF0 : E0FE                		mov	#-2,r0		; WORD align
(2) 2175/ 6001CF2 : 2B09                		and	r0,r11
(2) 2176/ 6001CF4 : 2C09                		and	r0,r12
(2) 2177/ 6001CF6 : 60C3                		mov	r12,r0
(2) 2178/ 6001CF8 : 30B8                		sub	r11,r0
(2) 2179/ 6001CFA : 4011                		cmp/pz	r0
(2) 2180/ 6001CFC : 8902                		bt	.revers
(2) 2181/ 6001CFE : 60C3                		mov	r12,r0
(2) 2182/ 6001D00 : 6CB3                		mov	r11,r12
(2) 2183/ 6001D02 : 6B03                		mov	r0,r11
(2) 2184/ 6001D04 :                     .revers:
(2) 2185/ 6001D04 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0
(2) 2186/ 6001D04 :                     ; 		shll2	r0
(2) 2187/ 6001D04 : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 2188/ 6001D06 : 4C15                		cmp/pl	r12		; XR < 0?
(2) 2189/ 6001D08 : 8B30                		bf	drwsld_updline
(2) 2190/ 6001D0A : 3B03                		cmp/ge	r0,r11		; XL > 320?
(2) 2191/ 6001D0C : 892E                		bt	drwsld_updline
(2) 2192/ 6001D0E : 3C03                		cmp/ge	r0,r12		; XR > 320?
(2) 2193/ 6001D10 : 8B00                		bf	.r_fix
(2) 2194/ 6001D12 : 6C03                		mov	r0,r12		; MAX XR
(2) 2195/ 6001D14 :                     .r_fix:
(2) 2196/ 6001D14 : 4B15                		cmp/pl	r11		; XL < 0?
(2) 2197/ 6001D16 : 8900                		bt	.l_fix
(2) 2198/ 6001D18 : 2BBA                		xor	r11,r11		; MIN XL
(2) 2199/ 6001D1A :                     .l_fix:
(2) 2200/ 6001D1A : 85D5                		mov.w	@(10,r13),r0	; Pending SVDP fill?
(2) 2201/ 6001D1C : C802                		tst	#%10,r0
(2) 2202/ 6001D1E : 8BFC                		bf	.l_fix
(2) 2203/ 6001D20 : 60C3                		mov	r12,r0
(2) 2204/ 6001D22 : 30B8                		sub	r11,r0
(2) 2205/ 6001D24 : 6C03                		mov	r0,r12
(2) 2206/ 6001D26 : 4001                		shlr	r0		; Len: (XR-XL)/2
(2) 2207/ 6001D28 : 81D2                		mov.w	r0,@(4,r13)	; Set SVDP-FILL len
(2) 2208/ 6001D2A : 60B3                		mov	r11,r0
(2) 2209/ 6001D2C : 4001                		shlr	r0
(2) 2210/ 6001D2E : 6593                		mov	r9,r5
(2) 2211/ 6001D30 : 7501                		add	#1,r5
(2) 2212/ 6001D32 : 4518                		shll8	r5
(2) 2213/ 6001D34 : 305C                		add	r5,r0		; Address: (XL/2)*((Y+1)*$200)/2
(2) 2214/ 6001D36 : 81D3                		mov.w	r0,@(6,r13)	; Set SVDP-FILL address
(2) 2215/ 6001D38 : 6063                		mov	r6,r0
(2) 2216/ 6001D3A : 4018                		shll8	r0
(2) 2217/ 6001D3C : 206B                		or	r6,r0		; Data: xxxx
(2) 2218/ 6001D3E : 81D4                		mov.w	r0,@(8,r13)	; Set pixels, SVDP-Fill begins
(2) 2219/ 6001D40 :                     ; .wait:	mov.w	@(10,r13),r0
(2) 2220/ 6001D40 :                     ; 		tst	#2,r0
(2) 2221/ 6001D40 :                     ; 		bf	.wait
(2) 2222/ 6001D40 :                     
(2) 2223/ 6001D40 :                     ; 	If the line is too large, leave it to VDP
(2) 2224/ 6001D40 :                     ; 	and exit watchdog, we will come back on
(2) 2225/ 6001D40 :                     ; 	next trigger.
(2) 2226/ 6001D40 : E028                		mov	#$28,r0					; If line > $28, leave the SVDP filling
(2) 2227/ 6001D42 : 3C07                		cmp/gt	r0,r12					; and wait for the next watchdog
(2) 2228/ 6001D44 : 8B12                		bf	drwsld_updline
(2) 2229/ 6001D46 : E006                		mov	#6,r0					; Set next mode on Resume
(2) 2230/ 6001D48 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Task $06
(2) 2231/ 6001D4A : D020                		mov	#$C0000000|Cach_LnDrw_S,r0		; Save ALL these regs for comeback
(2) 2232/ 6001D4C : 2016                		mov	r1,@-r0
(2) 2233/ 6001D4E : 2026                		mov	r2,@-r0
(2) 2234/ 6001D50 : 2036                		mov	r3,@-r0
(2) 2235/ 6001D52 : 2046                		mov	r4,@-r0
(2) 2236/ 6001D54 : 2056                		mov	r5,@-r0
(2) 2237/ 6001D56 : 2066                		mov	r6,@-r0
(2) 2238/ 6001D58 : 2076                		mov	r7,@-r0
(2) 2239/ 6001D5A : 2086                		mov	r8,@-r0
(2) 2240/ 6001D5C : 2096                		mov	r9,@-r0
(2) 2241/ 6001D5E : 20A6                		mov	r10,@-r0
(2) 2242/ 6001D60 : 20B6                		mov	r11,@-r0
(2) 2243/ 6001D62 : 20C6                		mov	r12,@-r0
(2) 2244/ 6001D64 : 20D6                		mov	r13,@-r0
(2) 2245/ 6001D66 : 20E6                		mov	r14,@-r0
(2) 2246/ 6001D68 : A015                		bra	drwtask_return
(2) 2247/ 6001D6A : E228                		mov	#$28,r2			; Exit timer $20
(2) 2248/ 6001D6C :                     ; otherwise...
(2) 2249/ 6001D6C :                     drwsld_updline:
(2) 2250/ 6001D6C : 312C                		add	r2,r1			; Next X dst
(2) 2251/ 6001D6E : 334C                		add	r4,r3			; Next Y dst
(2) 2252/ 6001D70 : 4A10                		dt	r10
(2) 2253/ 6001D72 : 8FAE                		bf/s	drwsld_nxtline
(2) 2254/ 6001D74 : 7901                		add	#1,r9
(2) 2255/ 6001D76 :                     
(2) 2256/ 6001D76 :                     ; ------------------------------------
(2) 2257/ 6001D76 :                     
(2) 2258/ 6001D76 :                     drwsld_nextpz:
(2) 2259/ 6001D76 : 200A                		xor	r0,r0
(2) 2260/ 6001D78 : 1E00                		mov	r0,@(plypz_type,r14)
(2) 2261/ 6001D7A : 0009                		nop
(2) 2262/ 6001D7C : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 2263/ 6001D7E : 7001                		add	#1,r0
(2) 2264/ 6001D80 : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(2) 2265/ 6001D82 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece counter
(2) 2266/ 6001D84 : 70FF                		add	#-1,r0
(2) 2267/ 6001D86 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 2268/ 6001D88 : A005                		bra	drwtask_purge
(2) 2269/ 6001D8A : E218                		mov	#$18,r2				; Exit Wdg-timer: $10
(2) 2270/ 6001D8C :                     
(2) 2271/ 6001D8C :                     ; --------------------------------
(2) 2272/ 6001D8C :                     ; Task $00
(2) 2273/ 6001D8C :                     ; --------------------------------
(2) 2274/ 6001D8C :                     
(2) 2275/ 6001D8C :                     slvplgn_00:
(2) 2276/ 6001D8C : 2F26                		mov	r2,@-r15
(2) 2277/ 6001D8E : E000                		mov	#0,r0
(2) 2278/ 6001D90 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 2279/ 6001D92 : A00E                		bra	drwtask_exit
(2) 2280/ 6001D94 : E228                		mov	#$28,r2
(2) 2281/ 6001D96 :                     drwtask_purge:
(2) 2282/ 6001D96 :                     ; 		stc	sr,r3
(2) 2283/ 6001D96 :                     ; 		mov.b	#$F0,r0			; ** $F0
(2) 2284/ 6001D96 :                     ; 		extu.b	r0,r0
(2) 2285/ 6001D96 :                     ; 		ldc	r0,sr
(2) 2286/ 6001D96 :                     ; 		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2) 2287/ 6001D96 :                     ; 		mov	#%10000,r0
(2) 2288/ 6001D96 :                     ; 		mov.b	r0,@r1
(2) 2289/ 6001D96 :                     ; 		nop
(2) 2290/ 6001D96 :                     ; 		nop
(2) 2291/ 6001D96 :                     ; 		nop
(2) 2292/ 6001D96 :                     ; 		nop
(2) 2293/ 6001D96 :                     ; 		nop
(2) 2294/ 6001D96 :                     ; 		nop
(2) 2295/ 6001D96 :                     ; 		nop
(2) 2296/ 6001D96 :                     ; 		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2) 2297/ 6001D96 :                     ; 		mov.b	r0,@r1
(2) 2298/ 6001D96 :                     ; 		ldc	r3,sr
(2) 2299/ 6001D96 :                     drwtask_return:
(2) 2300/ 6001D96 : 4F06                		lds	@r15+,mach
(2) 2301/ 6001D98 : 4F16                		lds	@r15+,macl
(2) 2302/ 6001D9A : 6EF6                		mov	@r15+,r14
(2) 2303/ 6001D9C : 6DF6                		mov	@r15+,r13
(2) 2304/ 6001D9E : 6CF6                		mov	@r15+,r12
(2) 2305/ 6001DA0 : 6BF6                		mov	@r15+,r11
(2) 2306/ 6001DA2 : 6AF6                		mov	@r15+,r10
(2) 2307/ 6001DA4 : 69F6                		mov	@r15+,r9
(2) 2308/ 6001DA6 : 68F6                		mov	@r15+,r8
(2) 2309/ 6001DA8 : 67F6                		mov	@r15+,r7
(2) 2310/ 6001DAA : 66F6                		mov	@r15+,r6
(2) 2311/ 6001DAC : 65F6                		mov	@r15+,r5
(2) 2312/ 6001DAE : 64F6                		mov	@r15+,r4
(2) 2313/ 6001DB0 : 63F6                		mov	@r15+,r3
(2) 2314/ 6001DB2 :                     drwtask_exit:
(2) 2315/ 6001DB2 : 910D                		mov.w   #$FE80,r1
(2) 2316/ 6001DB4 : 900D                		mov.w   #$A518,r0		; OFF
(2) 2317/ 6001DB6 : 2101                		mov.w   r0,@r1
(2) 2318/ 6001DB8 : CB20                		or      #$20,r0			; ON
(2) 2319/ 6001DBA : 2101                		mov.w   r0,@r1
(2) 2320/ 6001DBC : 900A                		mov.w   #$5A00,r0		; r2 - Timer
(2) 2321/ 6001DBE : 202B                		or	r2,r0
(2) 2322/ 6001DC0 : 2101                		mov.w   r0,@r1
(2) 2323/ 6001DC2 : 62F6                		mov	@r15+,r2
(2) 2324/ 6001DC4 : 000B                		rts
(2) 2325/ 6001DC6 : 0009                		nop
(2) 2326/ 6001DC8 :                     		align 4
(2) 2327/ 6001DC8 :                     
(2) 2328/ 6001DC8 :                     ; ------------------------------------------------
(2) 2329/ 6001DC8 :                     
(2) 2330/ 6001DC8 : 2000 4100 C000      		ltorg
          6001DCE : 0498 FE80 A518 
          6001DD4 : 5A00             
(2) 2331/ 6001DD6 :                     
(1) 2422/ 6001DD6 :                     		include "system/mars/cache/cache_mstr.asm"
(2)    1/ 6001DD6 :                     ; ====================================================================
(2)    2/ 6001DD6 :                     ; ----------------------------------------------------------------
(2)    3/ 6001DD6 :                     ; CACHE code
(2)    4/ 6001DD6 :                     ;
(2)    5/ 6001DD6 :                     ; LIMIT: $600 bytes
(2)    6/ 6001DD6 :                     ; ----------------------------------------------------------------
(2)    7/ 6001DD6 :                     
(2)    8/ 6001DD6 :                     ; WARNING: AS can't phase $C0000000, set the labels like this:
(2)    9/ 6001DD6 :                     ; $C0000000|label
(2)   10/ 6001DD6 :                     
(2)   11/ 6001DD6 :                     		align 4
(2)   12/ 6001DD8 :                     CACHE_MASTER:
(2)   13/ 6001DD8 :                     
(2)   14/ 6001DD8 :                     ; ====================================================================
(2)   15/ 6001DD8 :                     ; ----------------------------------------------------------------
(2)   16/ 6001DD8 :                     
(2)   17/ 6001DD8 : (MACRO)              			memory 0
(2)   17/ 6001DD8 : =$6001DD8            GLBL_LASTPC     := *
(2)   17/    6A5C :                                     dephase
(2)   17/       0 :                                     phase 0
(2)   17/       0 : =$0                  GLBL_LASTORG    := *
(2)   18/       0 :                     RAM_Mars_SVdpSprInfo	ds.b $10*MAX_MARSSPR
(2)   19/     200 :                     RAM_Mars_ScrlRefill	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)
(2)   20/     600 : (MACRO)              			endmemory
(2)   20/    705C :                     .here:          dephase
(2)   20/    705C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   20/ 6001DD8 :                                     phase GLBL_LASTPC
(2)   21/ 6001DD8 :                     
(2)   22/ 6001DD8 : (MACRO)              			memory 0
(2)   22/ 6001DD8 : =$6001DD8            GLBL_LASTPC     := *
(2)   22/    6A5C :                                     dephase
(2)   22/       0 :                                     phase 0
(2)   22/       0 : =$0                  GLBL_LASTORG    := *
(2)   23/       0 :                     RAM_Mars_SVdpDrwList	ds.b $40*16			; Polygon pieces
(2)   24/     400 :                     Cach_DDA_Top		ds.l 2*2			; First 2 points
(2)   25/     410 :                     Cach_DDA_Last		ds.l 2*2			; Triangle or Quad (+8)
(2)   26/     420 :                     Cach_DDA_Src		ds.l 4*2
(2)   27/     440 :                     Cach_DDA_Src_L		ds.l 4				; X/DX/Y/DX result for textures
(2)   28/     450 :                     Cach_DDA_Src_R		ds.l 4
(2)   29/     460 :                     Cach_LnDrw_L		ds.l 14				;
(2)   30/     498 :                     Cach_LnDrw_S		ds.l 0				; <-- Reads backwards
(2)   31/     498 :                     Cach_Bkup_LB		ds.l 11
(2)   32/     4C4 :                     Cach_Bkup_S		ds.l 0				; <-- Reads backwards
(2)   33/     4C4 :                     Cach_Bkup_LPZ		ds.l 7
(2)   34/     4E0 :                     Cach_Bkup_SPZ		ds.l 0				; <-- Reads backwards
(2)   35/     4E0 : (MACRO)              			endmemory
(2)   35/    6F3C :                     .here:          dephase
(2)   35/    6F3C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/ 6001DD8 :                                     phase GLBL_LASTPC
(2)   36/ 6001DD8 :                     
(2)   37/ 6001DD8 :                     ; ----------------------------------------------------------------
(2)   38/ 6001DD8 :                     ; ====================================================================
(2)   39/ 6001DD8 :                     
(2)   40/ 6001DD8 :                     ; 		dephase
(2)   41/ 6001DD8 :                     		align 4
(2)   42/ 6001DD8 :                     CACHE_MASTER_E:
(2)   43/ 6001DD8 : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_MASTER_E-CACHE_MASTER,$800
(2)   44/ 6001DD8 :                     
(1) 2423/ 6001DD8 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6001DD8 :                     ; ====================================================================
(2)    2/ 6001DD8 :                     ; ----------------------------------------------------------------
(2)    3/ 6001DD8 :                     ; CACHE code
(2)    4/ 6001DD8 :                     ;
(2)    5/ 6001DD8 :                     ; LIMIT: $600 bytes
(2)    6/ 6001DD8 :                     ; ----------------------------------------------------------------
(2)    7/ 6001DD8 :                     
(2)    8/ 6001DD8 :                     ; WARNING: AS can't phase $C0000000, set the labels like this
(2)    9/ 6001DD8 :                     ; $C0000000|label
(2)   10/ 6001DD8 :                     
(2)   11/ 6001DD8 :                     		align 4
(2)   12/ 6001DD8 :                     CACHE_SLAVE:
(2)   13/       0 :                     		phase 0		; AS can't phase $C0000000
(2)   14/       0 :                     
(2)   15/       0 :                     ; ====================================================================
(2)   16/       0 :                     ; ----------------------------------------------------------------
(2)   17/       0 :                     ; PWM Interrupt
(2)   18/       0 :                     ; ----------------------------------------------------------------
(2)   19/       0 :                     
(2)   20/       0 :                     ; MarsPwm_Playback:
(2)   21/       0 :                     s_irq_pwm:
(2)   22/       0 : 91A6                		mov	#_FRT,r1
(2)   23/       2 : 8417                		mov.b	@(7,r1),r0
(2)   24/       4 : CA02                		xor	#2,r0
(2)   25/       6 : 8017                		mov.b	r0,@(7,r1)
(2)   26/       8 : D14C                		mov	#_sysreg+pwmintclr,r1
(2)   27/       A : 2101                		mov.w	r0,@r1
(2)   28/       C : 6011                		mov.w	@r1,r0
(2)   29/       E :                     ; 		mov	#_sysreg+comm6,r1	; **** TEMPORAL COUNTER
(2)   30/       E :                     ; 		mov.w	@r1,r0			; ****
(2)   31/       E :                     ; 		add	#1,r0			; ****
(2)   32/       E :                     ; 		mov.w	r0,@r1			; ****
(2)   33/       E :                     	; --------------------------------
(2)   34/       E : D14C                		mov	#_sysreg+monowidth,r1
(2)   35/      10 : 6011                		mov.w	@r1,r0
(2)   36/      12 : 4019                		shlr8	r0
(2)   37/      14 : C880                		tst	#$80,r0
(2)   38/      16 : 8901                		bt	.fifo_free
(2)   39/      18 : A08D                		bra	.pwm_full
(2)   40/      1A : 0009                		nop
(2)   41/      1C :                     
(2)   42/      1C :                     ; ------------------------------------------------
(2)   43/      1C :                     
(2)   44/      1C :                     .fifo_free:
(2)   45/      1C : 2F26                		mov	r2,@-r15
(2)   46/      1E : 2F36                		mov	r3,@-r15
(2)   47/      20 : 2F46                		mov	r4,@-r15
(2)   48/      22 : 2F56                		mov	r5,@-r15
(2)   49/      24 : 2F66                		mov	r6,@-r15
(2)   50/      26 : 2F76                		mov	r7,@-r15
(2)   51/      28 : 2F86                		mov	r8,@-r15
(2)   52/      2A : 2F96                		mov	r9,@-r15
(2)   53/      2C : 2FA6                		mov	r10,@-r15
(2)   54/      2E : 4F12                		sts	macl,@-r15
(2)   55/      30 : 4F02                		sts	mach,@-r15
(2)   56/      32 :                     .fifo_loop:
(2)   57/      32 : DA44                		mov	#RAM_Mars_PwmList,r10
(2)   58/      34 : E908                		mov	#MAX_PWMCHNL,r9
(2)   59/      36 : E600                		mov	#0,r6			; r6 - left
(2)   60/      38 : E700                		mov	#0,r7			; r7 - right
(2)   61/      3A :                     .next_chnl:
(2)   62/      3A : 50A0                		mov	@(marspwm_enbl,r10),r0
(2)   63/      3C : 401A                		lds	r0,macl
(2)   64/      3E : C880                		tst	#$80,r0
(2)   65/      40 : 8B02                		bf	.enabled
(2)   66/      42 : 9186                .chnl_siln:	mov	#$80,r1
(2)   67/      44 : A057                		bra	.chnl_off
(2)   68/      46 : 6213                		mov	r1,r2
(2)   69/      48 :                     .enabled:
(2)   70/      48 : 0009                		nop
(2)   71/      4A : 53A6                		mov	@(marspwm_pitch,r10),r3
(2)   72/      4C : C808                		tst	#%1000,r0
(2)   73/      4E : 8900                		bt	.st_pitch
(2)   74/      50 : 4300                		shll	r3
(2)   75/      52 :                     .st_pitch:
(2)   76/      52 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)   77/      54 : 353C                		add	r3,r5
(2)   78/      56 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)   79/      58 : 55A1                		mov	@(marspwm_read,r10),r5
(2)   80/      5A : 353C                		add	r3,r5
(2)   81/      5C : 50A4                		mov	@(marspwm_length,r10),r0
(2)   82/      5E : 3038                		sub	r3,r0
(2)   83/      60 : 3503                		cmp/ge	r0,r5
(2)   84/      62 : 8B08                		bf	.keep
(2)   85/      64 : 001A                		sts	macl,r0
(2)   86/      66 : C804                		tst	#%00000100,r0
(2)   87/      68 : 8B02                		bf	.loopit
(2)   88/      6A : C940                		and	#%01000000,r0
(2)   89/      6C : AFE9                		bra	.chnl_siln
(2)   90/      6E : 1A00                		mov	r0,@(marspwm_enbl,r10)
(2)   91/      70 :                     .loopit:
(2)   92/      70 : 55A3                		mov	@(marspwm_start,r10),r5
(2)   93/      72 : 54A5                		mov	@(marspwm_loop,r10),r4
(2)   94/      74 : 354C                		add	r4,r5
(2)   95/      76 :                     .keep:
(2)   96/      76 : 1A51                		mov	r5,@(marspwm_read,r10)
(2)   97/      78 :                     
(2)   98/      78 :                     	; Make wave address point
(2)   99/      78 :                     	; r5 - xxxxxx.00
(2)  100/      78 : 54A2                		mov	@(marspwm_bank,r10),r4
(2)  101/      7A : 001A                		sts	macl,r0
(2)  102/      7C : C840                		tst	#%01000000,r0
(2)  103/      7E : 8905                		bt	.not_backup
(2)  104/      80 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)  105/      82 : 353C                		add	r3,r5
(2)  106/      84 : D030                		mov	#($200-1)<<8,r0
(2)  107/      86 : 2509                		and	r0,r5
(2)  108/      88 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)  109/      8A : 54A8                		mov	@(marspwm_cbank,r10),r4
(2)  110/      8C :                     .not_backup:
(2)  111/      8C : 4519                		shlr8	r5
(2)  112/      8E : 254B                		or	r4,r5
(2)  113/      90 :                     .read_wav:
(2)  114/      90 : C808                		tst	#%1000,r0		; Stereo sample?
(2)  115/      92 : 8901                		bt	.stand
(2)  116/      94 : E3FE                		mov	#-2,r3			; Limit to words
(2)  117/      96 : 2539                		and	r3,r5
(2)  118/      98 :                     .stand:
(2)  119/      98 : 6354                		mov.b	@r5+,r3			; Left wave
(2)  120/      9A : 633C                		extu.b	r3,r3
(2)  121/      9C : C808                		tst	#%1000,r0		; Stereo sample?
(2)  122/      9E : 8902                		bt	.do_mono		; Copy Left to Right
(2)  123/      A0 : 6454                		mov.b	@r5+,r4			; Right wave
(2)  124/      A2 : A001                		bra	.go_wave
(2)  125/      A4 : 644C                		extu.b	r4,r4
(2)  126/      A6 :                     .do_mono:
(2)  127/      A6 : 6433                		mov	r3,r4
(2)  128/      A8 :                     
(2)  129/      A8 :                     ; r3 - left byte
(2)  130/      A8 :                     ; r4 - right byte
(2)  131/      A8 :                     .go_wave:
(2)  132/      A8 : 7301                		add	#1,r3
(2)  133/      AA : 7401                		add	#1,r4
(2)  134/      AC : E180                		mov.b	#$80,r1
(2)  135/      AE : 611C                		extu.b	r1,r1
(2)  136/      B0 : 6213                		mov	r1,r2
(2)  137/      B2 : C802                .mnon_z:	tst	#%0010,r0
(2)  138/      B4 : 8900                		bt	.ml_out
(2)  139/      B6 : 6133                		mov	r3,r1
(2)  140/      B8 : C801                .ml_out:	tst	#%0001,r0
(2)  141/      BA : 8900                		bt	.do_vol
(2)  142/      BC : 6243                		mov	r4,r2
(2)  143/      BE :                     ; r1 - left
(2)  144/      BE :                     ; r2 - right
(2)  145/      BE :                     .do_vol:
(2)  146/      BE : 50A7                		mov	@(marspwm_vol,r10),r0
(2)  147/      C0 : 4015                		cmp/pl	r0
(2)  148/      C2 : 8B18                		bf	.chnl_off
(2)  149/      C4 : E440                		mov	#64,r4
(2)  150/      C6 : 3043                		cmp/ge	r4,r0
(2)  151/      C8 : 89BB                		bt	.chnl_siln
(2)  152/      CA : 7001                		add	#1,r0
(2)  153/      CC : 4008                		shll2	r0
(2)  154/      CE : 210E                		mulu	r0,r1
(2)  155/      D0 : 041A                		sts	macl,r4
(2)  156/      D2 : 4419                		shlr8	r4
(2)  157/      D4 : 3148                		sub	r4,r1
(2)  158/      D6 : 220E                		mulu	r0,r2
(2)  159/      D8 : 041A                		sts	macl,r4
(2)  160/      DA : 4419                		shlr8	r4
(2)  161/      DC : 3248                		sub	r4,r2
(2)  162/      DE : 4115                		cmp/pl	r1
(2)  163/      E0 : 8900                		bt	.l_low
(2)  164/      E2 : E100                		mov	#0,r1
(2)  165/      E4 : 4215                .l_low:		cmp/pl	r2
(2)  166/      E6 : 8900                		bt	.r_low
(2)  167/      E8 : E200                		mov	#0,r2
(2)  168/      EA : 9432                .r_low:		mov	#$80,r4		; <-- This prevents a click
(2)  169/      EC : 240E                		mulu	r0,r4
(2)  170/      EE : 001A                		sts	macl,r0
(2)  171/      F0 : 4019                		shlr8	r0
(2)  172/      F2 : 310C                		add	r0,r1
(2)  173/      F4 : 320C                		add	r0,r2
(2)  174/      F6 :                     .chnl_off:
(2)  175/      F6 : 361C                		add	r1,r6
(2)  176/      F8 : 372C                		add	r2,r7
(2)  177/      FA : 4910                		dt	r9
(2)  178/      FC : 8F9D                		bf/s	.next_chnl
(2)  179/      FE : 7A28                		add	#marspwm_len,r10
(2)  180/     100 : 9028                		mov	#$7FF,r0
(2)  181/     102 : 3603                		cmp/ge	r0,r6
(2)  182/     104 : 8B00                		bf	.l_max
(2)  183/     106 : 6603                		mov	r0,r6
(2)  184/     108 :                     .l_max:
(2)  185/     108 : 3703                		cmp/ge	r0,r7
(2)  186/     10A : 8B00                		bf	.r_max
(2)  187/     10C : 6703                		mov	r0,r7
(2)  188/     10E :                     .r_max:
(2)  189/     10E : 4628                		shll16	r6
(2)  190/     110 : 276B                		or	r6,r7
(2)  191/     112 : D00E                		mov	#_sysreg+lchwidth,r0
(2)  192/     114 : 2072                		mov	r7,@r0
(2)  193/     116 : D10A                		mov	#_sysreg+monowidth,r1
(2)  194/     118 : 6011                		mov.w	@r1,r0
(2)  195/     11A : 4019                		shlr8	r0
(2)  196/     11C : C880                		tst	#$80,r0
(2)  197/     11E : 8988                		bt	.fifo_loop
(2)  198/     120 :                     
(2)  199/     120 :                     ; ------------------------------------------------
(2)  200/     120 : 4F06                		lds	@r15+,mach
(2)  201/     122 : 4F16                		lds	@r15+,macl
(2)  202/     124 : 6AF6                		mov	@r15+,r10
(2)  203/     126 : 69F6                		mov	@r15+,r9
(2)  204/     128 : 68F6                		mov	@r15+,r8
(2)  205/     12A : 67F6                		mov	@r15+,r7
(2)  206/     12C : 66F6                		mov	@r15+,r6
(2)  207/     12E : 65F6                		mov	@r15+,r5
(2)  208/     130 : 64F6                		mov	@r15+,r4
(2)  209/     132 : 63F6                		mov	@r15+,r3
(2)  210/     134 : 62F6                		mov	@r15+,r2
(2)  211/     136 :                     .pwm_full:
(2)  212/     136 : 000B                		rts
(2)  213/     138 : 0009                		nop
(2)  214/     13A :                     		align 4
(2)  215/     13C : 2000 401C 2000      		ltorg
              142 : 4038 2600 6150 
              148 : 0001 FF00 2000 
              14E : 4034 FE10 0080 
              154 : 07FF             
(2)  216/     156 :                     
(2)  217/     156 :                     ; ====================================================================
(2)  218/     156 :                     ; ----------------------------------------------------------------
(2)  219/     156 :                     ; 3D Section
(2)  220/     156 :                     ; ----------------------------------------------------------------
(2)  221/     156 :                     
(2)  222/     156 :                     ; --------------------------------------------------------
(2)  223/     156 :                     ; MarsMdl_MdlLoop
(2)  224/     156 :                     ; --------------------------------------------------------
(2)  225/     156 :                     
(2)  226/     156 :                     		align 4
(2)  227/     158 :                     MarsMdl_MdlLoop:
(2)  228/     158 : 4F22                		sts	pr,@-r15
(2)  229/     15A : B27F                		bsr	Mars_CachePurge_S
(2)  230/     15C : 0009                		nop
(2)  231/     15E : EB00                		mov	#0,r11
(2)  232/     160 : DD16                		mov 	#RAM_Mars_Polygons_0,r13
(2)  233/     162 : DC17                		mov	#RAM_Mars_PlgnList_0,r12
(2)  234/     164 : D017                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  235/     166 : 6002                		mov	@r0,r0
(2)  236/     168 : C801                		tst     #1,r0
(2)  237/     16A : 8901                		bt	.go_mdl
(2)  238/     16C : DD16                		mov 	#RAM_Mars_Polygons_1,r13
(2)  239/     16E : DC17                		mov	#RAM_Mars_PlgnList_1,r12
(2)  240/     170 :                     .go_mdl:
(2)  241/     170 :                     
(2)  242/     170 :                     	; ------------------------------------------------
(2)  243/     170 :                     	; 3D Sprites
(2)  244/     170 : DE17                		mov	#RAM_Mars_SprPolygn,r14
(2)  245/     172 : EA20                		mov	#MAX_MARSMSPR,r10
(2)  246/     174 :                     .m_loop:
(2)  247/     174 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  248/     176 : C880                		tst	#$80,r0
(2)  249/     178 : 8905                		bt	.m_invlid
(2)  250/     17A : 9033                		mov	#MAX_FACES,r0
(2)  251/     17C : 3B07                		cmp/gt	r0,r11
(2)  252/     17E : 8910                		bt	.invlid
(2)  253/     180 : B032                		bsr	MarsMdl_MkSpr
(2)  254/     182 : 2FA6                		mov	r10,@-r15
(2)  255/     184 : 6AF6                		mov	@r15+,r10
(2)  256/     186 :                     .m_invlid:
(2)  257/     186 : 4A10                		dt	r10
(2)  258/     188 : 8FF4                		bf/s	.m_loop
(2)  259/     18A : 7E20                		add	#mspr_len,r14
(2)  260/     18C :                     	; ------------------------------------------------
(2)  261/     18C :                     	; 3D Models
(2)  262/     18C : DE11                		mov	#RAM_Mars_Objects,r14
(2)  263/     18E : EA18                		mov	#MAX_MARSOBJ,r10
(2)  264/     190 :                     .loop:
(2)  265/     190 : 50E1                		mov	@(mmdl_data,r14),r0		; Object model data == 0 or -1?
(2)  266/     192 : 4015                		cmp/pl	r0
(2)  267/     194 : 8B05                		bf	.invlid
(2)  268/     196 : 9025                		mov	#MAX_FACES,r0
(2)  269/     198 : 3B07                		cmp/gt	r0,r11
(2)  270/     19A : 8902                		bt	.invlid
(2)  271/     19C : B0FC                		bsr	MarsMdl_ReadModel
(2)  272/     19E : 2FA6                		mov	r10,@-r15
(2)  273/     1A0 : 6AF6                		mov	@r15+,r10
(2)  274/     1A2 :                     .invlid:
(2)  275/     1A2 : 4A10                		dt	r10
(2)  276/     1A4 : 8FF4                		bf/s	.loop
(2)  277/     1A6 : 7E20                		add	#mmdl_len,r14
(2)  278/     1A8 :                     	; ------------------------------------------------
(2)  279/     1A8 :                     .skip:
(2)  280/     1A8 : DC0B                		mov 	#RAM_Mars_PlgnNum_0,r12
(2)  281/     1AA : D00C                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  282/     1AC : 6002                		mov	@r0,r0
(2)  283/     1AE :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(2)  284/     1AE : C801                		tst     #1,r0
(2)  285/     1B0 : 8900                		bt	.page_2
(2)  286/     1B2 : DC0B                		mov 	#RAM_Mars_PlgnNum_1,r12
(2)  287/     1B4 :                     .page_2:
(2)  288/     1B4 : 2CB2                		mov	r11,@r12			; Save faces counter
(2)  289/     1B6 : 4F26                		lds	@r15+,pr
(2)  290/     1B8 : 000B                		rts
(2)  291/     1BA : 0009                		nop
(2)  292/     1BC :                     		align 4
(2)  293/     1BC : 0600 79E0 0600      		ltorg
              1C2 : E9E0 C000 0690 
              1C8 : 0600 B1E0 0600 
              1CE : F1E0 0600 75E0 
              1D4 : 0600 72E0 0600 
              1DA : F9E0 C000 0690 
              1E0 : 0600 F9E4 0100    
(2)  294/     1E6 :                     
(2)  295/     1E6 :                     ; ------------------------------------------------
(2)  296/     1E6 :                     ; Read model
(2)  297/     1E6 :                     ;
(2)  298/     1E6 :                     ; r14 - Current Msprite list
(2)  299/     1E6 :                     ; r13 - Current polygon
(2)  300/     1E6 :                     ; r12 - Z storage
(2)  301/     1E6 :                     ; r11 - Used faces counter
(2)  302/     1E6 :                     ; ------------------------------------------------
(2)  303/     1E6 :                     
(2)  304/     1E6 :                     		align 4
(2)  305/     1E8 :                     MarsMdl_MkSpr:
(2)  306/     1E8 : 4F22                		sts	pr,@-r15
(2)  307/     1EA : 84E1                		mov.b	@(mspr_indx,r14),r0
(2)  308/     1EC : 620C                		extu.b	r0,r2
(2)  309/     1EE : 84E6                		mov.b	@(mspr_srcwdth,r14),r0	; Texture file width
(2)  310/     1F0 : 630C                		extu.b	r0,r3
(2)  311/     1F2 : D046                		mov	#$8000,r0
(2)  312/     1F4 : 303C                		add	r3,r0
(2)  313/     1F6 : 51E7                		mov	@(mspr_vram,r14),r1	; Texture location
(2)  314/     1F8 : 4028                		shll16	r0
(2)  315/     1FA : 202B                		or	r2,r0
(2)  316/     1FC : 1D00                		mov	r0,@(plygn_type,r13)
(2)  317/     1FE : 0009                		nop
(2)  318/     200 : 1D11                		mov	r1,@(plygn_mtrl,r13)
(2)  319/     202 :                     
(2)  320/     202 :                     	; r1 | -X
(2)  321/     202 :                     	; r2 | +X
(2)  322/     202 :                     	; r3 | -Y
(2)  323/     202 :                     	; r4 | +Y
(2)  324/     202 : 84E4                		mov.b	@(mspr_src_w,r14),r0
(2)  325/     204 : 620C                		extu.b	r0,r2
(2)  326/     206 : 84E5                		mov.b	@(mspr_src_h,r14),r0
(2)  327/     208 : 640C                		extu.b	r0,r4
(2)  328/     20A : E100                		mov	#0,r1
(2)  329/     20C : E300                		mov	#0,r3
(2)  330/     20E : 84E7                		mov.b	@(mspr_frame_x,r14),r0
(2)  331/     210 : 650C                		extu.b	r0,r5
(2)  332/     212 : 84E8                		mov.b	@(mspr_frame_y,r14),r0
(2)  333/     214 : 660C                		extu.b	r0,r6
(2)  334/     216 : 264E                		mulu	r4,r6
(2)  335/     218 : 001A                		sts	macl,r0
(2)  336/     21A : 330C                		add	r0,r3
(2)  337/     21C : 340C                		add	r0,r4
(2)  338/     21E : 315C                		add	r5,r1
(2)  339/     220 : 325C                		add	r5,r2
(2)  340/     222 : 65D3                		mov	r13,r5
(2)  341/     224 : 7538                		add	#plygn_srcpnts+((4*2)*2),r5
(2)  342/     226 : 2545                		mov.w	r4,@-r5		;
(2)  343/     228 : 2525                		mov.w	r2,@-r5		; +X +Y
(2)  344/     22A : 2545                		mov.w	r4,@-r5		;
(2)  345/     22C : 2515                		mov.w	r1,@-r5		; -X +Y
(2)  346/     22E : 2535                		mov.w	r3,@-r5		;
(2)  347/     230 : 2515                		mov.w	r1,@-r5		; -X -Y
(2)  348/     232 : 2535                		mov.w	r3,@-r5		;
(2)  349/     234 : 2525                		mov.w	r2,@-r5		; +X -Y
(2)  350/     236 :                     
(2)  351/     236 :                     	; r1 | -X
(2)  352/     236 :                     	; r2 | +X
(2)  353/     236 :                     	; r3 | -Y
(2)  354/     236 :                     	; r4 | +Y
(2)  355/     236 : 84E2                		mov.b	@(mspr_size_w,r14),r0
(2)  356/     238 : 4000                		shll	r0
(2)  357/     23A : 620C                		extu.b	r0,r2
(2)  358/     23C : 612B                		neg	r2,r1
(2)  359/     23E : 84E3                		mov.b	@(mspr_size_h,r14),r0
(2)  360/     240 : 4000                		shll	r0
(2)  361/     242 : 640C                		extu.b	r0,r4
(2)  362/     244 : 634B                		neg	r4,r3
(2)  363/     246 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  364/     248 : C801                		tst	#%00000001,r0			; 3D flag?
(2)  365/     24A : 8B0F                		bf	.not_oldpos
(2)  366/     24C : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  367/     24E :                     ; 		shlr2	r0
(2)  368/     24E : 650F                		exts.w	r0,r5
(2)  369/     250 : 315C                		add	r5,r1
(2)  370/     252 : 325C                		add	r5,r2
(2)  371/     254 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  372/     256 :                     ; 		shlr2	r0
(2)  373/     256 : 660F                		exts.w	r0,r6
(2)  374/     258 : 336C                		add	r6,r3
(2)  375/     25A : 346C                		add	r6,r4
(2)  376/     25C : 4109                		shlr2	r1
(2)  377/     25E : 4209                		shlr2	r2
(2)  378/     260 : 4309                		shlr2	r3
(2)  379/     262 : 4409                		shlr2	r4
(2)  380/     264 : 611F                		exts.w	r1,r1
(2)  381/     266 : 622F                		exts.w	r2,r2
(2)  382/     268 : 633F                		exts.w	r3,r3
(2)  383/     26A : 644F                		exts.w	r4,r4
(2)  384/     26C :                     .not_oldpos:
(2)  385/     26C : 65D3                		mov	r13,r5
(2)  386/     26E : 7528                		add	#plygn_points+((4*2)*4),r5
(2)  387/     270 : 2546                		mov	r4,@-r5		;
(2)  388/     272 : 2526                		mov	r2,@-r5		; +X +Y
(2)  389/     274 : 2546                		mov	r4,@-r5		;
(2)  390/     276 : 2516                		mov	r1,@-r5		; -X +Y
(2)  391/     278 : 2536                		mov	r3,@-r5		;
(2)  392/     27A : 2516                		mov	r1,@-r5		; -X -Y
(2)  393/     27C : 2536                		mov	r3,@-r5		;
(2)  394/     27E : 2526                		mov	r2,@-r5		; +X -Y
(2)  395/     280 :                     
(2)  396/     280 :                     	; Inside 3D
(2)  397/     280 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  398/     282 : C801                		tst	#%00000001,r0		; 3D flag?
(2)  399/     284 : 8938                		bt	.not_plyfld
(2)  400/     286 : 61D3                		mov	r13,r1
(2)  401/     288 : 7108                		add	#plygn_points,r1
(2)  402/     28A : E504                		mov	#4,r5
(2)  403/     28C : E800                		mov	#0,r8
(2)  404/     28E :                     .mk_point:
(2)  405/     28E : 6212                		mov	@r1,r2
(2)  406/     290 : 4209                		shlr2	r2
(2)  407/     292 : 5311                		mov	@(4,r1),r3
(2)  408/     294 : 4309                		shlr2	r3
(2)  409/     296 : 622F                		exts.w	r2,r2
(2)  410/     298 : 633F                		exts.w	r3,r3
(2)  411/     29A : B03D                		bsr	mdlrd_setsppt
(2)  412/     29C : E400                		mov	#0,r4			; TEMPORAL Z
(2)  413/     29E : 2122                		mov	r2,@r1
(2)  414/     2A0 : 1131                		mov	r3,@(4,r1)
(2)  415/     2A2 : 3843                		cmp/ge	r4,r8
(2)  416/     2A4 : 8B00                		bf	.lower_z
(2)  417/     2A6 : 6843                		mov	r4,r8
(2)  418/     2A8 :                     .lower_z:
(2)  419/     2A8 : 4510                		dt	r5
(2)  420/     2AA : 8FF0                		bf/s	.mk_point
(2)  421/     2AC : 7108                		add	#8,r1
(2)  422/     2AE : 4811                		cmp/pz	r8
(2)  423/     2B0 : 8928                		bt	.bad_face
(2)  424/     2B2 : D717                		mov	#RAM_Mars_ObjCamera,r7
(2)  425/     2B4 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  426/     2B6 : 4009                		shlr2	r0
(2)  427/     2B8 : 600F                		exts.w	r0,r0
(2)  428/     2BA : 912B                		mov	#MAX_ZDIST>>2,r1
(2)  429/     2BC : 4108                		shll2	r1
(2)  430/     2BE : 4011                		cmp/pz	r0
(2)  431/     2C0 : 8B00                		bf	.z_plus
(2)  432/     2C2 : 600B                		neg	r0,r0
(2)  433/     2C4 :                     .z_plus:
(2)  434/     2C4 : 310C                		add	r0,r1
(2)  435/     2C6 : 3813                		cmp/ge	r1,r8
(2)  436/     2C8 : 8B1C                		bf	.bad_face
(2)  437/     2CA :                     	; X/Y checks
(2)  438/     2CA : 6AD3                		mov	r13,r10
(2)  439/     2CC : 7A08                		add	#plygn_points,r10
(2)  440/     2CE : 61A3                		mov	r10,r1
(2)  441/     2D0 : E4D6                		mov	#-(SET_MSCRLWDTH/2)>>2,r4
(2)  442/     2D2 : 4408                		shll2	r4
(2)  443/     2D4 : B132                		bsr	mdl_get_hilow
(2)  444/     2D6 : 654B                		neg	r4,r5
(2)  445/     2D8 : 3247                		cmp/gt	r4,r2
(2)  446/     2DA : 8B13                		bf	.bad_face
(2)  447/     2DC : 3353                		cmp/ge	r5,r3
(2)  448/     2DE : 8911                		bt	.bad_face
(2)  449/     2E0 : 61A3                		mov	r10,r1
(2)  450/     2E2 : 7104                		add	#4,r1
(2)  451/     2E4 : E4E4                		mov	#-(224/2)>>2,r4
(2)  452/     2E6 : 4408                		shll2	r4
(2)  453/     2E8 : B128                		bsr	mdl_get_hilow
(2)  454/     2EA : 654B                		neg	r4,r5
(2)  455/     2EC : 3247                		cmp/gt	r4,r2
(2)  456/     2EE : 8B09                		bf	.bad_face
(2)  457/     2F0 : 3353                		cmp/ge	r5,r3
(2)  458/     2F2 : 8907                		bt	.bad_face
(2)  459/     2F4 : A001                		bra	.mk_face
(2)  460/     2F6 : 0009                		nop
(2)  461/     2F8 :                     .not_plyfld:
(2)  462/     2F8 : E800                		mov	#0,r8			; TODO
(2)  463/     2FA :                     .mk_face:
(2)  464/     2FA : 2C82                		mov	r8,@r12			; Z position
(2)  465/     2FC : 1CD1                		mov	r13,@(4,r12)		; Polygon pointer
(2)  466/     2FE : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  467/     300 : 7C08                		add	#8,r12			; Next Z storage
(2)  468/     302 : 7B01                		add	#1,r11			; Mark as a valid face
(2)  469/     304 :                     
(2)  470/     304 :                     .bad_face:
(2)  471/     304 : 4F26                		lds	@r15+,pr
(2)  472/     306 : 000B                		rts
(2)  473/     308 : 0009                		nop
(2)  474/     30A :                     		align 4
(2)  475/     30C :                     
(2)  476/     30C :                     ; ----------------------------------------
(2)  477/     30C :                     
(2)  478/     30C : 0000 8000 0600      		ltorg
              312 : 72A0 FF60          
(2)  479/     316 :                     
(2)  480/     316 :                     ; ----------------------------------------
(2)  481/     316 :                     ; Modify position to current point
(2)  482/     316 :                     ; ----------------------------------------
(2)  483/     316 :                     
(2)  484/     316 :                     ; r2 - X
(2)  485/     316 :                     ; r3 - Y
(2)  486/     316 :                     ; r4 - Z
(2)  487/     316 :                     		align 4
(2)  488/     318 :                     mdlrd_setsppt:
(2)  489/     318 : 4F22                		sts	pr,@-r15
(2)  490/     31A : 2F56                		mov 	r5,@-r15
(2)  491/     31C : 2F66                		mov 	r6,@-r15
(2)  492/     31E : 2F76                		mov 	r7,@-r15
(2)  493/     320 : 2F86                		mov 	r8,@-r15
(2)  494/     322 : 2F96                		mov 	r9,@-r15
(2)  495/     324 : 2FA6                		mov 	r10,@-r15
(2)  496/     326 : 2FB6                		mov 	r11,@-r15
(2)  497/     328 :                     
(2)  498/     328 :                     	; Object rotation
(2)  499/     328 : 6523                		mov	r2,r5			; r5 - X
(2)  500/     32A : 6643                		mov	r4,r6			; r6 - Z
(2)  501/     32C : 85ED                  		mov.w 	@(mspr_y_rot,r14),r0
(2)  502/     32E : B179                		bsr	mdlrd_rotate
(2)  503/     330 : 4008                  		shll2	r0
(2)  504/     332 : 6273                   		mov	r7,r2
(2)  505/     334 : 6533                   		mov	r3,r5			; r5 - Y
(2)  506/     336 : 6683                  		mov	r8,r6
(2)  507/     338 : 85EB                  		mov.w 	@(mspr_x_rot,r14),r0
(2)  508/     33A : B173                		bsr	mdlrd_rotate
(2)  509/     33C : 4008                  		shll2	r0
(2)  510/     33E : 6483                   		mov	r8,r4			; UPDATE Z
(2)  511/     340 : 6523                		mov	r2,r5			; r5 - X
(2)  512/     342 : 6673                   		mov	r7,r6
(2)  513/     344 : 85EC                  		mov.w 	@(mspr_z_rot,r14),r0
(2)  514/     346 : B16D                		bsr	mdlrd_rotate
(2)  515/     348 : 4008                   		shll2	r0
(2)  516/     34A : 6273                   		mov	r7,r2			; UPDATE X
(2)  517/     34C : 6383                   		mov	r8,r3			; UPDATE Y
(2)  518/     34E :                     
(2)  519/     34E : 0009                   		nop
(2)  520/     350 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  521/     352 : C802                		tst	#%00000010,r0
(2)  522/     354 : 8914                		bt	.no_facecam
(2)  523/     356 : DB0F                		mov	#RAM_Mars_ObjCamera,r11
(2)  524/     358 : 6523                		mov	r2,r5			; r5 - X
(2)  525/     35A : 6643                		mov	r4,r6			; r6 - Z
(2)  526/     35C : 50B4                  		mov	@(mcam_y_rot,r11),r0
(2)  527/     35E : 600B                  		neg	r0,r0
(2)  528/     360 : B160                		bsr	mdlrd_rotate
(2)  529/     362 : 4001                  		shlr	r0
(2)  530/     364 : 6273                   		mov	r7,r2
(2)  531/     366 : 6533                   		mov	r3,r5			; r5 - Y
(2)  532/     368 : 6683                  		mov	r8,r6
(2)  533/     36A : 50B3                  		mov	@(mcam_x_rot,r11),r0
(2)  534/     36C : 600B                  		neg	r0,r0
(2)  535/     36E : B159                		bsr	mdlrd_rotate
(2)  536/     370 : 4001                  		shlr	r0
(2)  537/     372 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  538/     374 : 6523                		mov	r2,r5			; r5 - X
(2)  539/     376 : 6673                   		mov	r7,r6
(2)  540/     378 : 50B5                  		mov	@(mcam_z_rot,r11),r0
(2)  541/     37A : 600B                  		neg	r0,r0
(2)  542/     37C : B152                		bsr	mdlrd_rotate
(2)  543/     37E : 4001                   		shlr	r0
(2)  544/     380 :                     .no_facecam:
(2)  545/     380 : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  546/     382 : 650F                		exts.w	r0,r5
(2)  547/     384 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  548/     386 : 660F                		exts.w	r0,r6
(2)  549/     388 : 85EA                		mov.w	@(mspr_z_pos,r14),r0
(2)  550/     38A : 670F                		exts.w	r0,r7
(2)  551/     38C : 325C                		add 	r5,r2
(2)  552/     38E : 336C                		add 	r6,r3
(2)  553/     390 : A106                   		bra	mdlrd_persp
(2)  554/     392 : 347C                		add 	r7,r4
(2)  555/     394 :                        		align 4
(2)  556/     394 : 0600 72A0              		ltorg
(2)  557/     398 :                     
(2)  558/     398 :                     ; ------------------------------------------------
(2)  559/     398 :                     ; Read model
(2)  560/     398 :                     ;
(2)  561/     398 :                     ; r14 - Current model data
(2)  562/     398 :                     ; r13 - Current polygon
(2)  563/     398 :                     ; r12 - Z storage
(2)  564/     398 :                     ; r11 - Used faces counter
(2)  565/     398 :                     ; ------------------------------------------------
(2)  566/     398 :                     
(2)  567/     398 :                     ; Mdl_Object:
(2)  568/     398 :                     ; 		dc.w num_faces,num_vertex_old
(2)  569/     398 :                     ; 		dc.l .vert,.face,.vrtx,.mtrl
(2)  570/     398 :                     ; .vert:	binclude "data/mars/objects/mdl/test/vert.bin"
(2)  571/     398 :                     ; .face:	binclude "data/mars/objects/mdl/test/face.bin"
(2)  572/     398 :                     ; .vrtx:	binclude "data/mars/objects/mdl/test/vrtx.bin"
(2)  573/     398 :                     ; .mtrl:	include "data/mars/objects/mdl/test/mtrl.asm"
(2)  574/     398 :                     ;
(2)  575/     398 :                     		align 4
(2)  576/     398 :                     MarsMdl_ReadModel:
(2)  577/     398 : 4F22                		sts	pr,@-r15
(2)  578/     39A : 0009                		nop
(2)  579/     39C : 5AE1                		mov	@(mmdl_data,r14),r10	; r10 - Model header
(2)  580/     39E : 0009                		nop
(2)  581/     3A0 : 69A1                		mov.w	@r10,r9			;  r9 - Number of polygons of this model
(2)  582/     3A2 : 699D                		extu.w	r9,r9
(2)  583/     3A4 : 58A2                		mov 	@(8,r10),r8		;  r8 - face data
(2)  584/     3A6 : 38AC                		add	r10,r8
(2)  585/     3A8 : 57A1                		mov	@(4,r10),r7		;  r7 - Vertex data
(2)  586/     3AA : 37AC                		add	r10,r7
(2)  587/     3AC :                     .next_face:
(2)  588/     3AC : 90C4                		mov	#MAX_FACES,r0
(2)  589/     3AE : 3B03                		cmp/ge	r0,r11
(2)  590/     3B0 : 8B01                		bf	.valid
(2)  591/     3B2 : A0BB                		bra	.exit
(2)  592/     3B4 : 6B03                		mov	r0,r11
(2)  593/     3B6 :                     .valid:
(2)  594/     3B6 : 6085                		mov.w	@r8+,r0
(2)  595/     3B8 : 6503                		mov	r0,r5			; r5 - Face type
(2)  596/     3BA : E604                		mov	#4,r6			; r6 - number of vertex (quad or tri)
(2)  597/     3BC : 4019                		shlr8	r0			;
(2)  598/     3BE : C840                		tst	#PLGN_TRI,r0
(2)  599/     3C0 : 8900                		bt	.quad			; bit 0 = quad
(2)  600/     3C2 : 4610                		dt	r6
(2)  601/     3C4 :                     .quad:
(2)  602/     3C4 : 64D3                		mov	r13,r4
(2)  603/     3C6 : 4515                		cmp/pl	r5			; Solid or texture? ($8xxx)
(2)  604/     3C8 : 8B0A                		bf	.has_uv
(2)  605/     3CA :                     
(2)  606/     3CA :                     ; --------------------------------
(2)  607/     3CA :                     ; Face is solid color
(2)  608/     3CA : 6053                		mov	r5,r0
(2)  609/     3CC : 600C                		extu.b	r0,r0
(2)  610/     3CE : E360                		mov	#%01100000,r3
(2)  611/     3D0 : 4300                		shll	r3
(2)  612/     3D2 : 4318                		shll8	r3
(2)  613/     3D4 : 2539                		and	r3,r5
(2)  614/     3D6 : 4528                		shll16	r5
(2)  615/     3D8 : 1401                		mov	r0,@(plygn_mtrl,r4)
(2)  616/     3DA : A037                		bra	.mk_face
(2)  617/     3DC : 1450                		mov	r5,@(plygn_type,r4)
(2)  618/     3DE :                     		align 4
(2)  619/     3E0 :                     
(2)  620/     3E0 :                     ; --------------------------------
(2)  621/     3E0 :                     ; Face has UV settings
(2)  622/     3E0 :                     
(2)  623/     3E0 :                     .has_uv:
(2)  624/     3E0 : 51A3                		mov	@($C,r10),r1		; r1 - Grab UV points
(2)  625/     3E2 : 31AC                		add	r10,r1
(2)  626/     3E4 : 6063                		mov	r6,r0
(2)  627/     3E6 : 62D3                		mov	r13,r2			; r2 - Output to polygon
(2)  628/     3E8 : 7228                		add	#plygn_srcpnts,r2
(2)  629/     3EA : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  630/     3EC : 8906                		bt	.uv_tri
(2)  631/     3EE : 0009                		nop
(2)  632/     3F0 : 6085                		mov.w	@r8+,r0			; Do quad point
(2)  633/     3F2 : 600D                		extu.w	r0,r0
(2)  634/     3F4 : 4008                		shll2	r0
(2)  635/     3F6 : 001E                		mov	@(r1,r0),r0
(2)  636/     3F8 : 2202                		mov	r0,@r2
(2)  637/     3FA : 7204                		add	#4,r2
(2)  638/     3FC :                     .uv_tri:
(2)  639/     3FC :                     	rept 3					; Grab UV points 3 times
(2)  640/     3FC :                     		mov.w	@r8+,r0
(2)  641/     3FC :                     		extu.w	r0,r0
(2)  642/     3FC :                     		shll2	r0
(2)  643/     3FC :                     		mov	@(r1,r0),r0
(2)  644/     3FC :                     		mov	r0,@r2
(2)  645/     3FC :                     		add	#4,r2
(2)  646/     3FC :                     	endm
(2)  640/     3FC : 6085                		mov.w	@r8+,r0
(2)  641/     3FE : 600D                		extu.w	r0,r0
(2)  642/     400 : 4008                		shll2	r0
(2)  643/     402 : 001E                		mov	@(r1,r0),r0
(2)  644/     404 : 2202                		mov	r0,@r2
(2)  645/     406 : 7204                		add	#4,r2
(2)  640/     408 : 6085                		mov.w	@r8+,r0
(2)  641/     40A : 600D                		extu.w	r0,r0
(2)  642/     40C : 4008                		shll2	r0
(2)  643/     40E : 001E                		mov	@(r1,r0),r0
(2)  644/     410 : 2202                		mov	r0,@r2
(2)  645/     412 : 7204                		add	#4,r2
(2)  640/     414 : 6085                		mov.w	@r8+,r0
(2)  641/     416 : 600D                		extu.w	r0,r0
(2)  642/     418 : 4008                		shll2	r0
(2)  643/     41A : 001E                		mov	@(r1,r0),r0
(2)  644/     41C : 2202                		mov	r0,@r2
(2)  645/     41E : 7204                		add	#4,r2
(2)  647/     420 : 51A4                		mov	@($10,r10),r1		; r1 - Read material list
(2)  648/     422 : 31AC                		add	r10,r1
(2)  649/     424 : 6053                		mov	r5,r0			; r0 - Material slot
(2)  650/     426 : C9FF                		and	#$FF,r0
(2)  651/     428 : 4008                		shll2	r0			; *8
(2)  652/     42A : 4000                		shll	r0
(2)  653/     42C : 310C                		add	r0,r1			; Increment r1 into mtrl slot
(2)  654/     42E : E360                		mov	#%01100000,r3
(2)  655/     430 : 4300                		shll	r3
(2)  656/     432 : 4318                		shll8	r3			; r3 - $C0
(2)  657/     434 : 2539                		and	r3,r5			; Filter settings bits
(2)  658/     436 :                     
(2)  659/     436 :                     	; dc.l pointer
(2)  660/     436 :                     	; dc.w tex_wdth
(2)  661/     436 :                     	; dc.w indx
(2)  662/     436 : 5011                		mov	@(4,r1),r0		; r0 - Texture width
(2)  663/     438 : 6203                		mov	r0,r2
(2)  664/     43A : 600D                		extu.w	r0,r0
(2)  665/     43C :                     
(2)  666/     43C : 4229                		shlr16	r2
(2)  667/     43E : 252B                		or	r2,r5
(2)  668/     440 :                     ; 		or	r0,r5
(2)  669/     440 : 6312                		mov	@r1,r3			; r3 - Texture ROM pointer
(2)  670/     442 : 4528                		shll16	r5
(2)  671/     444 : 250B                		or	r0,r5
(2)  672/     446 :                     ; 		mov	@(mmdl_option,r14),r0
(2)  673/     446 :                     ; 		extu.b	r0,r0
(2)  674/     446 : 1431                		mov	r3,@(plygn_mtrl,r4)
(2)  675/     448 :                     ; 		or	r0,r5
(2)  676/     448 : 1450                		mov	r5,@(plygn_type,r4)
(2)  677/     44A : 0009                		nop
(2)  678/     44C :                     
(2)  679/     44C :                     .mk_face:
(2)  680/     44C : E500                		mov	#0,r5			; Z last pos
(2)  681/     44E :                     
(2)  682/     44E : 6143                		mov	r4,r1			; r1 - OUTPUT face (X/Y) points
(2)  683/     450 : 7108                		add 	#plygn_points,r1
(2)  684/     452 : 6063                		mov	r6,r0
(2)  685/     454 : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  686/     456 : 890D                		bt	.fc_tri
(2)  687/     458 : 6085                		mov.w 	@r8+,r0			; Do quad point
(2)  688/     45A : 600D                		extu.w	r0,r0
(2)  689/     45C : 6473                		mov	r7,r4
(2)  690/     45E : 340C                		add 	r0,r4
(2)  691/     460 : 6242                		mov	@r4,r2
(2)  692/     462 : 5341                		mov	@(4,r4),r3
(2)  693/     464 : B07A                		bsr	mdlrd_setpoint
(2)  694/     466 : 5442                		mov	@(8,r4),r4
(2)  695/     468 : 2122                		mov	r2,@r1
(2)  696/     46A : 1131                		mov	r3,@(4,r1)
(2)  697/     46C : 7108                		add	#8,r1
(2)  698/     46E : 3453                		cmp/ge	r5,r4			; Save LOWEST Z point
(2)  699/     470 : 8900                		bt	.fc_tri
(2)  700/     472 : 6543                		mov	r4,r5
(2)  701/     474 :                     .fc_tri:
(2)  702/     474 :                     	rept 3
(2)  703/     474 :                     		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     474 :                     		extu.w	r0,r0
(2)  705/     474 :                     		mov	r7,r4			; r2 - vertex data + index
(2)  706/     474 :                     		add 	r0,r4
(2)  707/     474 :                     		mov	@r4,r2
(2)  708/     474 :                     		mov	@(4,r4),r3
(2)  709/     474 :                     		bsr	mdlrd_setpoint
(2)  710/     474 :                     		mov	@(8,r4),r4
(2)  711/     474 :                     		mov	r2,@r1
(2)  712/     474 :                     		mov	r3,@(4,r1)
(2)  713/     474 :                     		add	#8,r1
(2)  714/     474 :                     		cmp/ge	r5,r4
(2)  715/     474 :                     		bt	.higher
(2)  716/     474 :                     		mov	r4,r5
(2)  717/     474 :                     .higher:
(2)  718/     474 :                     	endm
(2)  703/     474 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     476 : 600D                		extu.w	r0,r0
(2)  705/     478 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     47A : 340C                		add 	r0,r4
(2)  707/     47C : 6242                		mov	@r4,r2
(2)  708/     47E : 5341                		mov	@(4,r4),r3
(2)  709/     480 : B06C                		bsr	mdlrd_setpoint
(2)  710/     482 : 5442                		mov	@(8,r4),r4
(2)  711/     484 : 2122                		mov	r2,@r1
(2)  712/     486 : 1131                		mov	r3,@(4,r1)
(2)  713/     488 : 7108                		add	#8,r1
(2)  714/     48A : 3453                		cmp/ge	r5,r4
(2)  715/     48C : 8900                		bt	.higher
(2)  716/     48E : 6543                		mov	r4,r5
(2)  717/     490 :                     .higher:
(2)  703/     490 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     492 : 600D                		extu.w	r0,r0
(2)  705/     494 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     496 : 340C                		add 	r0,r4
(2)  707/     498 : 6242                		mov	@r4,r2
(2)  708/     49A : 5341                		mov	@(4,r4),r3
(2)  709/     49C : B05E                		bsr	mdlrd_setpoint
(2)  710/     49E : 5442                		mov	@(8,r4),r4
(2)  711/     4A0 : 2122                		mov	r2,@r1
(2)  712/     4A2 : 1131                		mov	r3,@(4,r1)
(2)  713/     4A4 : 7108                		add	#8,r1
(2)  714/     4A6 : 3453                		cmp/ge	r5,r4
(2)  715/     4A8 : 8900                		bt	.higher
(2)  716/     4AA : 6543                		mov	r4,r5
(2)  717/     4AC :                     .higher:
(2)  703/     4AC : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     4AE : 600D                		extu.w	r0,r0
(2)  705/     4B0 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     4B2 : 340C                		add 	r0,r4
(2)  707/     4B4 : 6242                		mov	@r4,r2
(2)  708/     4B6 : 5341                		mov	@(4,r4),r3
(2)  709/     4B8 : B050                		bsr	mdlrd_setpoint
(2)  710/     4BA : 5442                		mov	@(8,r4),r4
(2)  711/     4BC : 2122                		mov	r2,@r1
(2)  712/     4BE : 1131                		mov	r3,@(4,r1)
(2)  713/     4C0 : 7108                		add	#8,r1
(2)  714/     4C2 : 3453                		cmp/ge	r5,r4
(2)  715/     4C4 : 8900                		bt	.higher
(2)  716/     4C6 : 6543                		mov	r4,r5
(2)  717/     4C8 :                     .higher:
(2)  719/     4C8 :                     	; *** Z-offscreen check***
(2)  720/     4C8 : 470A                		lds	r7,mach
(2)  721/     4CA : 4511                		cmp/pz	r5
(2)  722/     4CC : 8928                		bt	.bad_face
(2)  723/     4CE : D719                		mov	#RAM_Mars_ObjCamera,r7
(2)  724/     4D0 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  725/     4D2 : 4009                		shlr2	r0
(2)  726/     4D4 : 600F                		exts.w	r0,r0
(2)  727/     4D6 : 9130                		mov	#MAX_ZDIST>>2,r1
(2)  728/     4D8 : 4108                		shll2	r1
(2)  729/     4DA : 4011                		cmp/pz	r0
(2)  730/     4DC : 8B00                		bf	.z_plus
(2)  731/     4DE : 600B                		neg	r0,r0
(2)  732/     4E0 :                     .z_plus:
(2)  733/     4E0 : 310C                		add	r0,r1
(2)  734/     4E2 : 3513                		cmp/ge	r1,r5
(2)  735/     4E4 : 8B1C                		bf	.bad_face
(2)  736/     4E6 : 451A                		lds	r5,macl
(2)  737/     4E8 :                     	; X/Y checks
(2)  738/     4E8 : 67D3                		mov	r13,r7
(2)  739/     4EA : 7708                		add	#plygn_points,r7
(2)  740/     4EC : 6173                		mov	r7,r1
(2)  741/     4EE : E52A                		mov	#(SET_MSCRLWDTH/2)>>2,r5
(2)  742/     4F0 : 4508                		shll2	r5
(2)  743/     4F2 : B023                		bsr	mdl_get_hilow
(2)  744/     4F4 : 645B                		neg	r5,r4
(2)  745/     4F6 : 3243                		cmp/ge	r4,r2
(2)  746/     4F8 : 8B12                		bf	.bad_face
(2)  747/     4FA : 3357                		cmp/gt	r5,r3
(2)  748/     4FC : 8910                		bt	.bad_face
(2)  749/     4FE : 6173                		mov	r7,r1
(2)  750/     500 : 7104                		add	#4,r1
(2)  751/     502 : E51E                		mov	#(SET_MSCRLHGHT/2)>>2,r5
(2)  752/     504 : 4508                		shll2	r5
(2)  753/     506 : B019                		bsr	mdl_get_hilow
(2)  754/     508 : 645B                		neg	r5,r4
(2)  755/     50A : 3243                		cmp/ge	r4,r2
(2)  756/     50C : 8B08                		bf	.bad_face
(2)  757/     50E : 3353                		cmp/ge	r5,r3
(2)  758/     510 : 8906                		bt	.bad_face
(2)  759/     512 :                     	; *** Valid face:
(2)  760/     512 : 001A                		sts	macl,r0
(2)  761/     514 : 2C02                		mov	r0,@r12
(2)  762/     516 : 1CD1                		mov	r13,@(4,r12)
(2)  763/     518 : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  764/     51A : 7C08                		add	#8,r12			; Next Z storage
(2)  765/     51C : 7B01                		add	#1,r11			; Mark as a valid face
(2)  766/     51E : 0009                		nop
(2)  767/     520 :                     .bad_face:
(2)  768/     520 : 070A                		sts	mach,r7
(2)  769/     522 : 4910                		dt	r9
(2)  770/     524 : 8902                		bt	.exit
(2)  771/     526 : AF41                		bra	.next_face
(2)  772/     528 : 0009                		nop
(2)  773/     52A :                     		align 4
(2)  774/     52C :                     .exit:
(2)  775/     52C : 4F26                		lds	@r15+,pr
(2)  776/     52E : 000B                		rts
(2)  777/     530 : 0009                		nop
(2)  778/     532 :                     		align 4
(2)  779/     534 : 0600 72A0 0100      		ltorg
              53A : FF60             
(2)  780/     53C :                     
(2)  781/     53C :                     ; ----------------------------------------
(2)  782/     53C :                     ; X/Y off check
(2)  783/     53C :                     ; ----------------------------------------
(2)  784/     53C :                     
(2)  785/     53C :                     ; r1 - points
(2)  786/     53C :                     ; r4 - left maximum
(2)  787/     53C :                     ; r5 - right maximum
(2)  788/     53C :                     mdl_get_hilow:
(2)  789/     53C : E604                		mov	#4,r6
(2)  790/     53E : 6212                		mov	@r1,r2
(2)  791/     540 : 6323                		mov	r2,r3
(2)  792/     542 :                     .pick_next:
(2)  793/     542 : 6012                		mov	@r1,r0
(2)  794/     544 : 3047                		cmp/gt	r4,r0
(2)  795/     546 : 8B00                		bf	.x_l
(2)  796/     548 : 6203                		mov	r0,r2
(2)  797/     54A :                     .x_l:
(2)  798/     54A : 3053                		cmp/ge	r5,r0
(2)  799/     54C : 8900                		bt	.x_r
(2)  800/     54E : 6303                		mov	r0,r3
(2)  801/     550 :                     .x_r:
(2)  802/     550 : 4610                		dt	r6
(2)  803/     552 : 8FF6                		bf/s	.pick_next
(2)  804/     554 : 7108                		add	#8,r1
(2)  805/     556 : 000B                		rts
(2)  806/     558 : 0009                		nop
(2)  807/     55A :                     		align 4
(2)  808/     55C :                     
(2)  809/     55C :                     ; ----------------------------------------
(2)  810/     55C :                     ; Modify position to current point
(2)  811/     55C :                     ; ----------------------------------------
(2)  812/     55C :                     
(2)  813/     55C :                     ; r2 - X
(2)  814/     55C :                     ; r3 - Y
(2)  815/     55C :                     ; r4 - Z
(2)  816/     55C :                     		align 4
(2)  817/     55C :                     mdlrd_setpoint:
(2)  818/     55C : 4F22                		sts	pr,@-r15
(2)  819/     55E : 2F56                		mov 	r5,@-r15
(2)  820/     560 : 2F66                		mov 	r6,@-r15
(2)  821/     562 : 2F76                		mov 	r7,@-r15
(2)  822/     564 : 2F86                		mov 	r8,@-r15
(2)  823/     566 : 2F96                		mov 	r9,@-r15
(2)  824/     568 : 2FA6                		mov 	r10,@-r15
(2)  825/     56A : 2FB6                		mov 	r11,@-r15
(2)  826/     56C :                     	; Object rotation
(2)  827/     56C : 6523                		mov	r2,r5			; r5 - X
(2)  828/     56E : 6643                		mov	r4,r6			; r6 - Z
(2)  829/     570 : 50E7                  		mov	@(mmdl_y_rot,r14),r0
(2)  830/     572 : B057                  		bsr	mdlrd_rotate
(2)  831/     574 : 4021                  		shar	r0
(2)  832/     576 : 6273                   		mov	r7,r2
(2)  833/     578 : 6533                   		mov	r3,r5			; r5 - Y
(2)  834/     57A : 6683                  		mov	r8,r6
(2)  835/     57C : 50E5                  		mov	@(mmdl_x_rot,r14),r0
(2)  836/     57E : B051                  		bsr	mdlrd_rotate
(2)  837/     580 : 4021                  		shar	r0
(2)  838/     582 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  839/     584 : 6523                		mov	r2,r5			; r5 - X
(2)  840/     586 : 6673                   		mov	r7,r6
(2)  841/     588 : 50E6                   		mov	@(mmdl_z_rot,r14),r0
(2)  842/     58A : B04B                  		bsr	mdlrd_rotate
(2)  843/     58C : 4021                  		shar	r0
(2)  844/     58E : 6273                   		mov	r7,r2			; UPDATE X
(2)  845/     590 : 6383                   		mov	r8,r3			; UPDATE Y
(2)  846/     592 : 0009                   		nop
(2)  847/     594 : 55E2                		mov	@(mmdl_x_pos,r14),r5
(2)  848/     596 : 325C                		add 	r5,r2
(2)  849/     598 : 56E3                		mov	@(mmdl_y_pos,r14),r6
(2)  850/     59A : 336C                		add 	r6,r3
(2)  851/     59C : 57E4                		mov	@(mmdl_z_pos,r14),r7
(2)  852/     59E : 347C                		add 	r7,r4
(2)  853/     5A0 :                     
(2)  854/     5A0 :                     ; 		mov	@(mmdl_x_pos,r14),r0
(2)  855/     5A0 :                     ; 		exts.w	r0,r5
(2)  856/     5A0 :                     ; 		mov	@(mmdl_y_pos,r14),r0
(2)  857/     5A0 :                     ; 		exts.w	r0,r6
(2)  858/     5A0 :                     ; 		mov	@(mmdl_z_pos,r14),r0
(2)  859/     5A0 :                     ; 		exts.w	r0,r7
(2)  860/     5A0 :                     ; 		add 	r5,r2
(2)  861/     5A0 :                     ; 		add 	r6,r3
(2)  862/     5A0 :                     ; 		add 	r7,r4
(2)  863/     5A0 :                     mdlrd_persp:
(2)  864/     5A0 :                     	; Include camera changes
(2)  865/     5A0 : DB35                		mov	#RAM_Mars_ObjCamera,r11
(2)  866/     5A2 : 55B0                		mov	@(mcam_x_pos,r11),r5
(2)  867/     5A4 : 56B1                		mov	@(mcam_y_pos,r11),r6
(2)  868/     5A6 : 57B2                		mov	@(mcam_z_pos,r11),r7
(2)  869/     5A8 : 3258                		sub 	r5,r2
(2)  870/     5AA : 3368                		sub 	r6,r3
(2)  871/     5AC : 3478                		sub 	r7,r4
(2)  872/     5AE : 6523                		mov	r2,r5
(2)  873/     5B0 : 6643                		mov	r4,r6
(2)  874/     5B2 : 50B4                  		mov 	@(mcam_y_rot,r11),r0
(2)  875/     5B4 : B036                  		bsr	mdlrd_rotate
(2)  876/     5B6 : 4001                  		shlr	r0
(2)  877/     5B8 : 6273                   		mov	r7,r2
(2)  878/     5BA : 6483                   		mov	r8,r4
(2)  879/     5BC : 6533                   		mov	r3,r5
(2)  880/     5BE : 6683                  		mov	r8,r6
(2)  881/     5C0 : 50B3                  		mov 	@(mcam_x_rot,r11),r0
(2)  882/     5C2 : B02F                  		bsr	mdlrd_rotate
(2)  883/     5C4 : 4001                  		shlr	r0
(2)  884/     5C6 : 6483                   		mov	r8,r4
(2)  885/     5C8 : 6523                   		mov	r2,r5
(2)  886/     5CA : 6673                   		mov	r7,r6
(2)  887/     5CC : 50B5                   		mov 	@(mcam_z_rot,r11),r0
(2)  888/     5CE : B029                  		bsr	mdlrd_rotate
(2)  889/     5D0 : 4001                  		shlr	r0
(2)  890/     5D2 : 6273                   		mov	r7,r2
(2)  891/     5D4 : 6383                   		mov	r8,r3
(2)  892/     5D6 :                     	; Do perspective
(2)  893/     5D6 : D729                		mov	#320<<15,r7
(2)  894/     5D8 : 684B                		neg	r4,r8		; reverse Z
(2)  895/     5DA : 4815                		cmp/pl	r8
(2)  896/     5DC : 8906                		bt	.inside
(2)  897/     5DE : 6043                		mov	r4,r0
(2)  898/     5E0 :                     .patchme:
(2)  899/     5E0 : 4028                		shll16	r0
(2)  900/     5E2 : 4000                		shll	r0
(2)  901/     5E4 : 370C                		add	r0,r7
(2)  902/     5E6 : 4709                		shlr2	r7
(2)  903/     5E8 : A00A                		bra	.zmulti
(2)  904/     5EA : 4709                		shlr2	r7
(2)  905/     5EC :                     .inside:
(2)  906/     5EC : E918                		mov	#24,r9
(2)  907/     5EE : 3893                		cmp/ge	r9,r8
(2)  908/     5F0 : 8901                		bt	.center
(2)  909/     5F2 : AFF5                		bra	.patchme
(2)  910/     5F4 : 6043                		mov	r4,r0
(2)  911/     5F6 :                     
(2)  912/     5F6 :                     .center:
(2)  913/     5F6 : 9947                		mov 	#_JR,r9
(2)  914/     5F8 : 2982                		mov 	r8,@r9
(2)  915/     5FA : 1971                		mov 	r7,@(4,r9)
(2)  916/     5FC : 0009                		nop
(2)  917/     5FE : 5795                		mov 	@($14,r9),r7
(2)  918/     600 :                     .zmulti:
(2)  919/     600 : 327D                		dmuls	r7,r2
(2)  920/     602 : 000A                		sts	mach,r0
(2)  921/     604 : 021A                		sts	macl,r2
(2)  922/     606 : 220D                		xtrct	r0,r2
(2)  923/     608 : 337D                		dmuls	r7,r3
(2)  924/     60A : 000A                		sts	mach,r0
(2)  925/     60C : 031A                		sts	macl,r3
(2)  926/     60E : 230D                		xtrct	r0,r3
(2)  927/     610 : 6BF6                		mov	@r15+,r11
(2)  928/     612 : 6AF6                		mov	@r15+,r10
(2)  929/     614 : 69F6                		mov	@r15+,r9
(2)  930/     616 : 68F6                		mov	@r15+,r8
(2)  931/     618 : 67F6                		mov	@r15+,r7
(2)  932/     61A : 66F6                		mov	@r15+,r6
(2)  933/     61C : 65F6                		mov	@r15+,r5
(2)  934/     61E : 4F26                		lds	@r15+,pr
(2)  935/     620 : 000B                		rts
(2)  936/     622 : 0009                		nop
(2)  937/     624 :                     		align 4
(2)  938/     624 :                     
(2)  939/     624 :                     ; ------------------------------
(2)  940/     624 :                     ; Rotate point
(2)  941/     624 :                     ;
(2)  942/     624 :                     ; Entry:
(2)  943/     624 :                     ; r5: x
(2)  944/     624 :                     ; r6: y
(2)  945/     624 :                     ; r0: theta
(2)  946/     624 :                     ;
(2)  947/     624 :                     ; Returns:
(2)  948/     624 :                     ; r7: (x  cos @) + (y sin @)
(2)  949/     624 :                     ; r8: (x -sin @) + (y cos @)
(2)  950/     624 :                     ; ------------------------------
(2)  951/     624 :                     
(2)  952/     624 :                     		align 4
(2)  953/     624 :                     mdlrd_rotate:
(2)  954/     624 : 9731                    		mov	#$7FF,r7
(2)  955/     626 : 2079                    		and	r7,r0
(2)  956/     628 : 4008                   		shll2	r0
(2)  957/     62A : D715                		mov	#sin_table,r7
(2)  958/     62C : D815                		mov	#sin_table+$800,r8
(2)  959/     62E : 097E                		mov	@(r0,r7),r9
(2)  960/     630 : 0A8E                		mov	@(r0,r8),r10
(2)  961/     632 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  962/     634 : 071A                		sts	macl,r7
(2)  963/     636 : 000A                		sts	mach,r0
(2)  964/     638 : 270D                		xtrct	r0,r7
(2)  965/     63A : 396D                		dmuls	r6,r9		; y sin @
(2)  966/     63C : 081A                		sts	macl,r8
(2)  967/     63E : 000A                		sts	mach,r0
(2)  968/     640 : 280D                		xtrct	r0,r8
(2)  969/     642 : 378C                		add	r8,r7
(2)  970/     644 : 699B                		neg	r9,r9
(2)  971/     646 : 395D                		dmuls	r5,r9		; x -sin @
(2)  972/     648 : 081A                		sts	macl,r8
(2)  973/     64A : 000A                		sts	mach,r0
(2)  974/     64C : 280D                		xtrct	r0,r8
(2)  975/     64E : 3A6D                		dmuls	r6,r10		; y cos @
(2)  976/     650 : 091A                		sts	macl,r9
(2)  977/     652 : 000A                		sts	mach,r0
(2)  978/     654 : 290D                		xtrct	r0,r9
(2)  979/     656 : 389C                		add	r9,r8
(2)  980/     658 : 000B                 		rts
(2)  981/     65A : 0009                		nop
(2)  982/     65C :                     		align 4
(2)  983/     65C :                     
(2)  984/     65C :                     ; ====================================================================
(2)  985/     65C :                     
(2)  986/     65C :                     		align 4
(2)  987/     65C :                     Mars_CachePurge_S:
(2)  988/     65C : 9116                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2)  989/     65E : E010                		mov	#%10000,r0
(2)  990/     660 : 2100                		mov.b	r0,@r1
(2)  991/     662 : 0009                		nop
(2)  992/     664 : 0009                		nop
(2)  993/     666 : 0009                		nop
(2)  994/     668 : 0009                		nop
(2)  995/     66A : 0009                		nop
(2)  996/     66C : 0009                		nop
(2)  997/     66E : 0009                		nop
(2)  998/     670 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2)  999/     672 : 000B                		rts
(2) 1000/     674 : 2100                		mov.b	r0,@r1
(2) 1001/     676 :                     		align 4
(2) 1002/     678 :                     
(2) 1003/     678 :                     ; ====================================================================
(2) 1004/     678 :                     
(2) 1005/     678 : 0600 72A0 00A0      		ltorg
              67E : 0000 0600 246C 
              684 : 0600 2C6C FF00 
              68A : 07FF FE92          
(2) 1006/     68E :                     
(2) 1007/     68E :                     ; ====================================================================
(2) 1008/     68E :                     
(2) 1009/     68E :                     			align $10
(2) 1010/     690 :                     CachSlv_CurrPage	ds.l 1
(2) 1011/     694 :                     
(2) 1012/     694 :                     ; ------------------------------------------------
(2) 1013/ 600246C :                     		dephase
(2) 1014/ 600246C :                     ; .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1015/ 600246C :                     
(2) 1016/ 600246C :                     		align 4
(2) 1017/ 600246C :                     CACHE_SLAVE_E:
(2) 1018/ 600246C : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_SLAVE_E-CACHE_SLAVE,$800
(2) 1019/ 600246C :                     
(1) 2424/ 600246C :                     
(1) 2425/ 600246C :                     ; ====================================================================
(1) 2426/ 600246C :                     ; ----------------------------------------------------------------
(1) 2427/ 600246C :                     ; Data
(1) 2428/ 600246C :                     ; ----------------------------------------------------------------
(1) 2429/ 600246C :                     
(1) 2430/ 600246C :                     		align 4
(1) 2431/ 600246C :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 2432/ 6004C6C :                     		align 4
(1) 2433/ 6004C6C :                     
(1) 2434/ 6004C6C :                     ; ====================================================================
(1) 2435/ 6004C6C :                     ; ----------------------------------------------------------------
(1) 2436/ 6004C6C :                     ; GLOBAL GBR Variables for MASTER
(1) 2437/ 6004C6C :                     ; ----------------------------------------------------------------
(1) 2438/ 6004C6C :                     
(1) 2439/ 6004C6C :                     		align $10
(1) 2440/ 6004C70 :                     RAM_Mars_Global:
(1) 2441/ 6004C70 :                     
(1) 2442/       0 :                     marsGbl		struct
(1) 2443/       0 :                     ThisFrame	ds.w 1			; Current framebuffer number
(1) 2444/       2 :                     XShift		ds.w 1			; horizontal scroll & 1 bit (2D ONLY)
(1) 2445/       4 :                     WdgTask		ds.w 1			; Current Watchdog task
(1) 2446/       6 :                     WdgHold		ds.w 1			; Watchdog ignore (without turning it off)
(1) 2447/       8 :                     WdgDivLock	ds.w 1			; Watchdog division skip (for Textures only)
(1) 2448/       A :                     WdgReady	ds.w 1			; Flag to report that all polygons are finished slicing
(1) 2449/       C :                     PlyPzCntr	ds.w 1			; Number of polygon pieces to draw
(1) 2450/       E :                     WdgClLines	ds.w 1			; Number of lines to clear for WDG task $07
(1) 2451/      10 :                     WdgActive	ds.w 1
(1) 2452/      12 :                     		ds.w 1
(1) 2453/      14 :                     		ds.w 1
(1) 2454/      16 :                     DrawAll		ds.w 1
(1) 2455/      18 :                     3D_OutWidth	ds.l 1
(1) 2456/      1C :                     3D_OutHeight	ds.l 1
(1) 2457/      20 :                     DreqRead	ds.l 1			; **** RAM_Mars_DreqBuff_0|TH
(1) 2458/      24 :                     DreqWrite	ds.l 1			; RAM_Mars_DreqBuff_1|TH
(1) 2459/      28 :                     PlgnPzIndx_R	ds.l 1			; R/W piece indexes
(1) 2460/      2C :                     PlgnPzIndx_W	ds.l 1			;
(1) 2461/      30 :                     Scrl_Xpos	ds.l 1			; ****
(1) 2462/      34 :                     Scrl_Ypos	ds.l 1
(1) 2463/      38 :                     Scrl_Xold	ds.l 1
(1) 2464/      3C :                     Scrl_Yold	ds.l 1
(1) 2465/      40 :                     Scrl_Size	ds.l 1			; ****
(1) 2466/      44 :                     Scrl_Wdth	ds.l 1
(1) 2467/      48 :                     Scrl_Hght	ds.l 1
(1) 2468/      4C :                     Scrl_Vram	ds.l 1
(1) 2469/      50 :                     Scrl_FbOut	ds.l 1			; ****
(1) 2470/      54 :                     Scrl_FbTL	ds.l 1
(1) 2471/      58 :                     Scrl_FbY	ds.l 1
(1) 2472/      5C :                     Scrl_FbX	ds.l 1
(1) 2473/      60 :                     ; len		ds.l 0
(1) 2474/ 6004C70 : =$60                 		endstruct
(1) 2475/ 6004C70 :                     		ds.b marsGbl_len
(1) 2476/ 6004CD0 :                     
(1) 2477/ 6004CD0 :                     ; ====================================================================
(1) 2478/ 6004CD0 :                     ; ----------------------------------------------------------------
(1) 2479/ 6004CD0 :                     ; NON-CACHED RAM
(1) 2480/ 6004CD0 :                     ; ----------------------------------------------------------------
(1) 2481/ 6004CD0 :                     
(1) 2482/ 6004CD0 :                     			align $10
(1) 2483/ 6004CD0 :                     SH2_RAM_TH:
(1) 2484/26004CD0 :                     			phase SH2_RAM_TH|TH
(1) 2485/26004CD0 :                     RAM_Mars_DreqBuff_0	ds.b Dreq_len				; DREQ data from Genesis
(1) 2486/260056F0 :                     RAM_Mars_DreqBuff_1	ds.b Dreq_len				; ****
(1) 2487/26006110 :                     RAM_Mars_PwmTable	ds.b 8*8				; GEMA Z80 table
(1) 2488/26006150 :                     RAM_Mars_PwmList	ds.b marspwm_len*MAX_PWMCHNL		; PWM list
(1) 2489/26006290 :                     RAM_Mars_PwmBackup	ds.b $200*MAX_PWMCHNL			; RV PWM backup buffer
(1) 2490/26007290 :                     RAM_Mars_CurrPlgnPage	ds.l 1
(1) 2491/ 6007294 :                     			dephase
(1) 2492/ 6007294 :                     
(1) 2493/ 6007294 :                     ; ====================================================================
(1) 2494/ 6007294 :                     ; ----------------------------------------------------------------
(1) 2495/ 6007294 :                     ; CACHED RAM
(1) 2496/ 6007294 :                     ;
(1) 2497/ 6007294 :                     ; Flush the cache often when using this.
(1) 2498/ 6007294 :                     ; ----------------------------------------------------------------
(1) 2499/ 6007294 :                     
(1) 2500/ 6007294 :                     			align $10
(1) 2501/ 60072A0 :                     SH2_RAM:
(1) 2502/ 60072A0 :                     			ds.b $8800				; <-- Maximum RAM for the fake-Video modes
(1) 2503/ 600FAA0 :                     RAM_Mars_VramData	ds.b MAX_MarsVram			; ** SHARED
(1) 2504/ 6027AA0 :                     			align $10
(1) 2505/ 6027AA0 :                     
(1) 2506/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2507/ 6027AA0 :                     ; RAM section for 2D
(1) 2508/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2509/ 6027AA0 :                     
(1) 2510/ 6027AA0 : (MACRO)              			memory SH2_RAM
(1) 2510/ 6027AA0 : =$6027AA0            GLBL_LASTPC     := *
(1) 2510/   2C724 :                                     dephase
(1) 2510/ 60072A0 :                                     phase SH2_RAM
(1) 2510/ 60072A0 : =$60072A0            GLBL_LASTORG    := *
(1) 2511/ 60072A0 :                     RAM_Mars_SprDrwCanvas	ds.b 320*92
(1) 2512/ 600E5A0 :                     sizeof_marsram_0	ds.l 0
(1) 2513/ 600E5A0 : (MACRO)              			endmemory
(1) 2513/   33A24 :                     .here:          dephase
(1) 2513/   33A24 :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2513/ 6027AA0 :                                     phase GLBL_LASTPC
(1) 2514/ 6027AA0 : (MACRO)              			erreport "2D section",sizeof_marsram_0-SH2_RAM,$8800
(1) 2515/ 6027AA0 :                     
(1) 2516/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2517/ 6027AA0 :                     ; RAM section for 3D
(1) 2518/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2519/ 6027AA0 :                     
(1) 2520/ 6027AA0 : (MACRO)              			memory SH2_RAM
(1) 2520/ 6027AA0 : =$6027AA0            GLBL_LASTPC     := *
(1) 2520/   2C724 :                                     dephase
(1) 2520/ 60072A0 :                                     phase SH2_RAM
(1) 2520/ 60072A0 : =$60072A0            GLBL_LASTORG    := *
(1) 2521/ 60072A0 :                     RAM_Mars_Buff3D_Start	ds.l 0				; <-- ****
(1) 2522/ 60072A0 :                     RAM_Mars_ObjCamera	ds.b $40			; Object camera
(1) 2523/ 60072E0 :                     RAM_Mars_Objects	ds.b mmdl_len*MAX_MARSOBJ	; Objects
(1) 2524/ 60075E0 :                     RAM_Mars_SprPolygn	ds.b mspr_len*MAX_MARSMSPR
(1) 2525/ 60079E0 :                     RAM_Mars_Polygons_0	ds.b plygn_len*MAX_FACES	; Read/Write polygon data
(1) 2526/ 600B1E0 :                     RAM_Mars_Polygons_1	ds.b plygn_len*MAX_FACES
(1) 2527/ 600E9E0 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES*2		; Polygon order list: Zpos, pointer
(1) 2528/ 600F1E0 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES*2
(1) 2529/ 600F9E0 :                     RAM_Mars_PlgnNum_0	ds.l 1
(1) 2530/ 600F9E4 :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2531/ 600F9E8 :                     RAM_Mars_Buff3D_End	ds.l 0				; <-- ****
(1) 2532/ 600F9E8 :                     sizeof_marsram_1	ds.l 0
(1) 2533/ 600F9E8 : (MACRO)              			endmemory
(1) 2533/   34E6C :                     .here:          dephase
(1) 2533/   34E6C :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2533/ 6027AA0 :                                     phase GLBL_LASTPC
(1) 2534/ 6027AA0 : (MACRO)              			erreport "3D section",sizeof_marsram_1-SH2_RAM,$8800
(1) 2535/ 6027AA0 :                     
(1) 2536/ 6027AA0 :                     ; ====================================================================
(1) 2537/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2538/ 6027AA0 :                     ; USER DATA GOES HERE
(1) 2539/ 6027AA0 :                     ; ----------------------------------------------------------------
(1) 2540/ 6027AA0 :                     
(1) 2541/ 6027AA0 :                     SH2_USER_DATA:
(1) 2542/ 6027AA0 :                     		include "sound/smpl_pwm.asm"			; GEMA: PWM samples
(2)    1/ 6027AA0 :                     ; ===========================================================================
(2)    2/ 6027AA0 :                     ; -------------------------------------------------------------------
(2)    3/ 6027AA0 :                     ; GEMA/Nikona PWM instruments located at SDRAM
(2)    4/ 6027AA0 :                     ;
(2)    5/ 6027AA0 :                     ; *** VERY LIMITED STORAGE ***
(2)    6/ 6027AA0 :                     ; If you are using CD32X consider using PCM samples instead.
(2)    7/ 6027AA0 :                     ;
(2)    8/ 6027AA0 :                     ; MACRO:
(2)    9/ 6027AA0 :                     ; gSmplData Label,"file_path",loop_start
(2)   10/ 6027AA0 :                     ;
(2)   11/ 6027AA0 :                     ; Set loop_start to 0 if not using it.
(2)   12/ 6027AA0 :                     ;
(2)   13/ 6027AA0 :                     ; BASE C-5 samplerate is 16000hz
(2)   14/ 6027AA0 :                     ; -------------------------------------------------------------------
(2)   15/ 6027AA0 :                     
(2)   16/ 6027AA0 :                     	align 4
(2)   17/ 6027AA0 :                     	;gSmplData Label,"file_path",loop_start
(2)   18/ 6027AA0 :                     ; -----------------------------------------------------------
(2)   19/ 6027AA0 :                     ; 	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(2)   20/ 6027AA0 :                     
(2)   21/ 6027AA0 : (MACRO)              	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(2)   21/ 6027AA0 :                                     align 4
(2)   21/ 6027AA0 : =$6027AA0            PWMINS_TEST    label *
(2)   21/ 6027AA0 : E0D7 00                     dc.b ((PWMINS_TEST_e-PWMINS_TEST_s)&$FF),(((PWMINS_TEST_e-PWMINS_TEST_s)>>8)&$FF),(((PWMINS_TEST_e-PWMINS_TEST_s)>>16)&$FF)
(2)   21/ 6027AA3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   21/ 6027AA6 :                     PWMINS_TEST_s:
(2)   21/ 6027AA6 :                             binclude "sound/instr/smpl/test_st.wav",$2C
(2)   21/ 6035286 :                     PWMINS_TEST_e:
(2)   21/ 6035286 :                                     align 4
(2)   22/ 6035288 :                     
(1) 2543/ 6035288 :                     		include "game/data/mars/objects/list.asm"
(2)    1/ 6035288 :                     ; ===========================================================================
(2)    2/ 6035288 :                     ; ----------------------------------------------------------------
(2)    3/ 6035288 :                     ; Special include for the 3D models
(2)    4/ 6035288 :                     ;
(2)    5/ 6035288 :                     ; Data is available to both 32X Cartridge and CD32X
(2)    6/ 6035288 :                     ; ----------------------------------------------------------------
(2)    7/ 6035288 :                     
(2)    8/ 6035288 :                     		include "game/data/mars/objects/test/head.asm"
(3)    1/ 6035288 :                     MarsObj_test:
(3)    2/ 6035288 : 00D2 00E6           		dc.w 210,230
(3)    3/ 603528C : 0000 0014 0000      		dc.l .vert-MarsObj_test,.face-MarsObj_test,.vrtx-MarsObj_test,.mtrl-MarsObj_test
          6035292 : 0ADC 0000 12EC 
          6035298 : 0000 131C          
(3)    4/ 603529C :                     .vert:		binclude "game/data/mars/objects/test/vert.bin"
(3)    5/ 6035D64 :                     .face:		binclude "game/data/mars/objects/test/face.bin"
(3)    6/ 6036574 :                     .vrtx:		binclude "game/data/mars/objects/test/vrtx.bin"
(3)    7/ 60365A4 :                     .mtrl:		include "game/data/mars/objects/test/mtrl.asm"
(4)    1/ 60365A4 :                     
(3)    8/ 60365A4 :                     		align 4
(2)    9/ 60365A4 :                     		include "game/data/mars/objects/test_2/head.asm"
(3)    1/ 60365A4 :                     MarsObj_test_2:
(3)    2/ 60365A4 : 0004 0009           		dc.w 4,9
(3)    3/ 60365A8 : 0000 0014 0000      		dc.l .vert-MarsObj_test_2,.face-MarsObj_test_2,.vrtx-MarsObj_test_2,.mtrl-MarsObj_test_2
          60365AE : 0080 0000 00B0 
          60365B4 : 0000 00E0          
(3)    4/ 60365B8 :                     .vert:		binclude "game/data/mars/objects/test_2/vert.bin"
(3)    5/ 6036624 :                     .face:		binclude "game/data/mars/objects/test_2/face.bin"
(3)    6/ 6036654 :                     .vrtx:		binclude "game/data/mars/objects/test_2/vrtx.bin"
(3)    7/ 6036684 :                     .mtrl:		include "game/data/mars/objects/test_2/mtrl.asm"
(4)    1/ 6036684 :                     
(3)    8/ 6036684 :                     		align 4
(2)   10/ 6036684 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(2)   11/ 6036684 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(2)   12/ 6036684 :                     
(1) 2544/ 6036684 :                     
(1) 2545/ 6036684 :                     ; ====================================================================
(1) 2546/ 6036684 :                     
(1) 2547/ 6036684 :                     .end:
(1) 2548/ 6036684 : (MACRO)              		erreport "SH2 USER DATA",.end-SH2_USER_DATA,(CS3|$40000)-SH2_USER_DATA
(1) 2549/ 6036684 :                     
(1) 2550/ 6036684 :                     ; ====================================================================
(1) 2551/ 6036684 :                     		align $10
(1) 2552/ 6036690 :                     SH2_END:
(1) 2553/ 6036690 :                     		cpu 68000
(1) 2554/ 6036690 :                     		padding off
(1) 2555/   3B314 :                     		dephase
(1) 2556/   3B314 :                     		phase (SH2_END-SH2_Master)+MARS_RAMCODE
(1) 2557/   3B314 :                     		align 4
(1) 2558/   3B314 :                     
     361/   3B314 :                     	; ------------------------------------------------
     365/   3B314 :                     MARS_RAMCODE_E:
     370/   3B314 :                     
     371/   3B314 :                     ; ====================================================================
     372/   3B314 :                     ; --------------------------------------------------------
     373/   3B314 :                     ; CODE BLOCK (banks)
     374/   3B314 :                     ; --------------------------------------------------------
     375/   3B314 :                     
     376/   3B314 :                     		include "game/incl_code.asm"
(1)    1/   3B314 :                     ; ============================================================
(1)    2/   3B314 :                     ; --------------------------------------------------------
(1)    3/   3B314 :                     ; CODE BANKS section
(1)    4/   3B314 :                     ;
(1)    5/   3B314 :                     ; Usage:
(1)    6/   3B314 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/   3B314 :                     ;
(1)    8/   3B314 :                     ; NOTES:
(1)    9/   3B314 :                     ; - Screen order is at game/screens.asm
(1)   10/   3B314 :                     ; - DATA banks are loaded separately inside the
(1)   11/   3B314 :                     ;   screen's code
(1)   12/   3B314 :                     ; --------------------------------------------------------
(1)   13/   3B314 :                     
(1)   14/   3B314 :                     	;screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/   3B314 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/  8BB314 :                                     phase $880000+*         ; 32X ROM-area
(1)   15/  8BB314 :                                     align 4
(1)   15/  8BB314 : =$8BB314             MD_SCREEN00 label *
(1)   15/   3B314 :                                     dephase
(1)   15/   3B314 :                     
(1)   15/   3B314 :                     mctopscrn:
(1)   15/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   15/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   15/FFFFFFFFFFFF2C00 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   20/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   21/FFFFFFFFFFFF2C00 :                     
(2)   22/FFFFFFFFFFFF2C00 :                     ; 			memory 2		; Cell $0002
(2)   23/FFFFFFFFFFFF2C00 :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/FFFFFFFFFFFF2C00 :                     ; 			endmemory
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   3B314 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/   3B31C :                     .here:          dephase
(2)   35/   3B31C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 0106           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 EF7C           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 E460           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 EFB2           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E30C           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E2EE           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E30E           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41FA 00F0           		lea	str_MenuText(pc),a0			; Print the title string
(2)   62/FFFFFFFFFFFF2C40 : 7001                		moveq	#1,d0					; X/Y positions 1,1
(2)   63/FFFFFFFFFFFF2C42 : 7201                		moveq	#1,d1
(2)   64/FFFFFFFFFFFF2C44 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)   65/FFFFFFFFFFFF2C48 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)   66/FFFFFFFFFFFF2C4C : 6100 E402           		bsr	Video_PrintW
(2)   67/FFFFFFFFFFFF2C50 : 6100 00A2           		bsr	.print_cursor				; Draw counter
(2)   68/FFFFFFFFFFFF2C54 : 6100 DA60           		bsr	Video_DisplayOn
(2)   69/FFFFFFFFFFFF2C58 :                     	; ----------------------------------------------
(2)   70/FFFFFFFFFFFF2C58 : 6100 E1BA           		bsr	Video_FadeIn_Full
(2)   71/FFFFFFFFFFFF2C5C :                     
(2)   72/FFFFFFFFFFFF2C5C :                     ; ====================================================================
(2)   73/FFFFFFFFFFFF2C5C :                     ; ------------------------------------------------------
(2)   74/FFFFFFFFFFFF2C5C :                     ; Loop
(2)   75/FFFFFFFFFFFF2C5C :                     ; ------------------------------------------------------
(2)   76/FFFFFFFFFFFF2C5C :                     
(2)   77/FFFFFFFFFFFF2C5C :                     .loop:
(2)   78/FFFFFFFFFFFF2C5C : 6100 EC6C           		bsr	System_Render
(2)   79/FFFFFFFFFFFF2C60 :                     
(2)   80/FFFFFFFFFFFF2C60 : 383C 0004           		move.w	#MAX_SC0_OPTIONS,d4
(2)   81/FFFFFFFFFFFF2C64 : 4DF8 E55C           		lea	(Controller_1).w,a6
(2)   82/FFFFFFFFFFFF2C68 : 4BF8 B800           		lea	(RAM_SC0_CurrOption).w,a5
(2)   83/FFFFFFFFFFFF2C6C : 3E2E 0004           		move.w	on_press(a6),d7
(2)   84/FFFFFFFFFFFF2C70 : 0807 0001           		btst	#bitJoyDown,d7
(2)   85/FFFFFFFFFFFF2C74 : 670A                		beq.s	.not_down
(2)   86/FFFFFFFFFFFF2C76 : 5255                		addq.w	#1,(a5)
(2)   87/FFFFFFFFFFFF2C78 : 3C15                		move.w	(a5),d6
(2)   88/FFFFFFFFFFFF2C7A : BC44                		cmp.w	d4,d6
(2)   89/FFFFFFFFFFFF2C7C : 6F02                		ble.s	.not_down
(2)   90/FFFFFFFFFFFF2C7E : 4255                		clr.w	(a5)
(2)   91/FFFFFFFFFFFF2C80 :                     .not_down:
(2)   92/FFFFFFFFFFFF2C80 : 3E2E 0004           		move.w	on_press(a6),d7
(2)   93/FFFFFFFFFFFF2C84 : 0807 0000           		btst	#bitJoyUp,d7
(2)   94/FFFFFFFFFFFF2C88 : 6708                		beq.s	.not_up
(2)   95/FFFFFFFFFFFF2C8A : 5355                		subq.w	#1,(a5)
(2)   96/FFFFFFFFFFFF2C8C : 4A55                		tst.w	(a5)
(2)   97/FFFFFFFFFFFF2C8E : 6A02                		bpl.s	.not_up
(2)   98/FFFFFFFFFFFF2C90 : 3A84                		move.w	d4,(a5)
(2)   99/FFFFFFFFFFFF2C92 :                     .not_up:
(2)  100/FFFFFFFFFFFF2C92 : 3015                		move.w	(a5),d0
(2)  101/FFFFFFFFFFFF2C94 : 322D 0002           		move.w	2(a5),d1
(2)  102/FFFFFFFFFFFF2C98 : B041                		cmp.w	d1,d0
(2)  103/FFFFFFFFFFFF2C9A : 6708                		beq.s	.no_change
(2)  104/FFFFFFFFFFFF2C9C : 613A                		bsr	.print_full
(2)  105/FFFFFFFFFFFF2C9E : 31F8 B800 B802      		move.w	(RAM_SC0_CurrOption).w,(RAM_SC0_OldOption).w
(2)  106/FFFFFFFFFFFF2CA4 :                     .no_change:
(2)  111/FFFFFFFFFFFF2CA4 : 4DF8 E55C           		lea	(Controller_1).w,a6
(2)  112/FFFFFFFFFFFF2CA8 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  113/FFFFFFFFFFFF2CAC : 0807 0007           		btst	#bitJoyStart,d7
(2)  114/FFFFFFFFFFFF2CB0 : 67AA                		beq.s	.loop
(2)  115/FFFFFFFFFFFF2CB2 : 6100 E182           		bsr	Video_FadeOut_Full
(2)  116/FFFFFFFFFFFF2CB6 : 7000                		moveq	#0,d0
(2)  117/FFFFFFFFFFFF2CB8 : 3038 B800           		move.w	(RAM_SC0_CurrOption).w,d0
(2)  118/FFFFFFFFFFFF2CBC : D040                		add.w	d0,d0
(2)  119/FFFFFFFFFFFF2CBE : 31FB 0006 F5F8      		move.w	.ex_mode(pc,d0.w),(RAM_ScreenMode).w
(2)  120/FFFFFFFFFFFF2CC4 : 4E75                		rts
(2)  121/FFFFFFFFFFFF2CC6 :                     
(2)  122/FFFFFFFFFFFF2CC6 :                     .ex_mode:
(2)  123/FFFFFFFFFFFF2CC6 : 0001                		dc.w 1
(2)  124/FFFFFFFFFFFF2CC8 : 0002                		dc.w 2
(2)  125/FFFFFFFFFFFF2CCA : 0003                		dc.w 3
(2)  126/FFFFFFFFFFFF2CCC : 0004                		dc.w 4
(2)  127/FFFFFFFFFFFF2CCE : 0007                		dc.w 7
(2)  128/FFFFFFFFFFFF2CD0 :                     
(2)  129/FFFFFFFFFFFF2CD0 :                     ; ------------------------------------------------------
(2)  130/FFFFFFFFFFFF2CD0 :                     
(2)  131/FFFFFFFFFFFF2CD0 :                     .exit_shell:
(2)  132/FFFFFFFFFFFF2CD0 : 6100 E164           		bsr	Video_FadeOut_Full
(2)  133/FFFFFFFFFFFF2CD4 : 6000 F268           		bra	System_MdMcd_ExitShell
(2)  134/FFFFFFFFFFFF2CD8 :                     
(2)  135/FFFFFFFFFFFF2CD8 :                     ; ------------------------------------------------------
(2)  136/FFFFFFFFFFFF2CD8 :                     ; Show framecounter and input
(2)  137/FFFFFFFFFFFF2CD8 :                     ; ------------------------------------------------------
(2)  138/FFFFFFFFFFFF2CD8 :                     
(2)  139/FFFFFFFFFFFF2CD8 :                     .print_full:
(2)  140/FFFFFFFFFFFF2CD8 : 41FA 0048           		lea	str_MenuCursorOff(pc),a0
(2)  141/FFFFFFFFFFFF2CDC : 7001                		moveq	#1,d0
(2)  142/FFFFFFFFFFFF2CDE : 7205                		moveq	#5,d1
(2)  143/FFFFFFFFFFFF2CE0 : 3438 B802           		move.w	(RAM_SC0_OldOption).w,d2
(2)  144/FFFFFFFFFFFF2CE4 : D442                		add.w	d2,d2
(2)  145/FFFFFFFFFFFF2CE6 : D242                		add.w	d2,d1
(2)  146/FFFFFFFFFFFF2CE8 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  147/FFFFFFFFFFFF2CEC : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  148/FFFFFFFFFFFF2CF0 : 6100 E35E           		bsr	Video_PrintW
(2)  149/FFFFFFFFFFFF2CF4 :                     
(2)  150/FFFFFFFFFFFF2CF4 :                     .print_cursor:
(2)  151/FFFFFFFFFFFF2CF4 : 41FA 0032           		lea	str_MenuCursor(pc),a0
(2)  152/FFFFFFFFFFFF2CF8 : 7001                		moveq	#1,d0
(2)  153/FFFFFFFFFFFF2CFA : 7205                		moveq	#5,d1
(2)  154/FFFFFFFFFFFF2CFC : 3438 B800           		move.w	(RAM_SC0_CurrOption).w,d2
(2)  155/FFFFFFFFFFFF2D00 : D442                		add.w	d2,d2
(2)  156/FFFFFFFFFFFF2D02 : D242                		add.w	d2,d1
(2)  157/FFFFFFFFFFFF2D04 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  158/FFFFFFFFFFFF2D08 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  159/FFFFFFFFFFFF2D0C : 6000 E342           		bra	Video_PrintW
(2)  160/FFFFFFFFFFFF2D10 :                     
(2)  161/FFFFFFFFFFFF2D10 :                     ; ====================================================================
(2)  162/FFFFFFFFFFFF2D10 :                     ; ------------------------------------------------------
(2)  163/FFFFFFFFFFFF2D10 :                     ; DATA asset locations
(2)  164/FFFFFFFFFFFF2D10 :                     ; ------------------------------------------------------
(2)  165/FFFFFFFFFFFF2D10 :                     
(2)  166/FFFFFFFFFFFF2D10 :                     file_scrn1_main:
(2)  167/FFFFFFFFFFFF2D10 : 0003 E052           		dc.l DATA_BANK0
(2)  168/FFFFFFFFFFFF2D14 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D1A : 494E 2E42 494E 00 
(2)  169/FFFFFFFFFFFF2D21 :                     		align 2
(2)  170/FFFFFFFFFFFF2D22 :                     ; file_scrn1_mars:
(2)  171/FFFFFFFFFFFF2D22 :                     ; 		dc.l DATA_BANK1
(2)  172/FFFFFFFFFFFF2D22 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  173/FFFFFFFFFFFF2D22 :                     ; 		align 2
(2)  174/FFFFFFFFFFFF2D22 :                     
(2)  175/FFFFFFFFFFFF2D22 :                     ; ====================================================================
(2)  176/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  177/FFFFFFFFFFFF2D22 :                     ; Objects
(2)  178/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  179/FFFFFFFFFFFF2D22 :                     
(2)  180/FFFFFFFFFFFF2D22 :                     ; ====================================================================
(2)  181/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  182/FFFFFFFFFFFF2D22 :                     ; Custom VBlank
(2)  183/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D22 :                     
(2)  185/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D22 :                     ; Custom HBlank
(2)  187/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  188/FFFFFFFFFFFF2D22 :                     
(2)  189/FFFFFFFFFFFF2D22 :                     ; ====================================================================
(2)  190/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  191/FFFFFFFFFFFF2D22 :                     ; Includes for this screen
(2)  192/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  193/FFFFFFFFFFFF2D22 :                     
(2)  194/FFFFFFFFFFFF2D22 :                     ; ====================================================================
(2)  195/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  196/FFFFFFFFFFFF2D22 :                     ; Small data section
(2)  197/FFFFFFFFFFFF2D22 :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2D22 :                     
(2)  199/FFFFFFFFFFFF2D22 :                     str_MenuCursorOff:
(2)  200/FFFFFFFFFFFF2D22 : 2020 2000           		dc.b "   ",0
(2)  201/FFFFFFFFFFFF2D26 :                     		align 2
(2)  202/FFFFFFFFFFFF2D28 :                     str_MenuCursor:
(2)  203/FFFFFFFFFFFF2D28 : 2D2D 3E00           		dc.b "-->",0
(2)  204/FFFFFFFFFFFF2D2C :                     		align 2
(2)  205/FFFFFFFFFFFF2D2E :                     
(2)  206/FFFFFFFFFFFF2D2E :                     str_MenuText:
(2)  207/FFFFFFFFFFFF2D2E : 4E69 6B6F 6E61      		dc.b "Nikona test menu       ROM: \{DATE}",$0A
         FFFFFFFFFFFF2D34 : 2074 6573 7420 
         FFFFFFFFFFFF2D3A : 6D65 6E75 2020 
         FFFFFFFFFFFF2D40 : 2020 2020 2052 
         FFFFFFFFFFFF2D46 : 4F4D 3A20 3039 
         FFFFFFFFFFFF2D4C : 2F31 342F 3230 
         FFFFFFFFFFFF2D52 : 3234 0A          
(2)  208/FFFFFFFFFFFF2D55 : 0A                  		dc.b $0A
(2)  209/FFFFFFFFFFFF2D56 : 2020 2020 4765      		dc.b "    Genesis VDP",$0A
         FFFFFFFFFFFF2D5C : 6E65 7369 7320 
         FFFFFFFFFFFF2D62 : 5644 500A          
(2)  210/FFFFFFFFFFFF2D66 : 2020 2020 5365      		dc.b "    Sega CD stamps",$0A
         FFFFFFFFFFFF2D6C : 6761 2043 4420 
         FFFFFFFFFFFF2D72 : 7374 616D 7073 0A 
(2)  211/FFFFFFFFFFFF2D79 : 2020 2020 3332      		dc.b "    32X 2D mode",$0A
         FFFFFFFFFFFF2D7F : 5820 3244 206D 
         FFFFFFFFFFFF2D85 : 6F64 650A          
(2)  212/FFFFFFFFFFFF2D89 : 2020 2020 3332      		dc.b "    32X 3D mode",$0A
         FFFFFFFFFFFF2D8F : 5820 3344 206D 
         FFFFFFFFFFFF2D95 : 6F64 650A          
(2)  213/FFFFFFFFFFFF2D99 : 2020 2020 4745      		dc.b "    GEMA sound test"
         FFFFFFFFFFFF2D9F : 4D41 2073 6F75 
         FFFFFFFFFFFF2DA5 : 6E64 2074 6573 74 
(2)  214/FFFFFFFFFFFF2DAC : 00                  		dc.b 0
(2)  215/FFFFFFFFFFFF2DAD :                     		align 2
(2)  216/FFFFFFFFFFFF2DAE :                     
(2)  217/FFFFFFFFFFFF2DAE :                     ; str_InputMe:
(2)  218/FFFFFFFFFFFF2DAE :                     ; 	if MARS|MARSCD
(2)  219/FFFFFFFFFFFF2DAE :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  220/FFFFFFFFFFFF2DAE :                     ; 		dc.b " "
(2)  221/FFFFFFFFFFFF2DAE :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  222/FFFFFFFFFFFF2DAE :                     ; 		dc.b " "
(2)  223/FFFFFFFFFFFF2DAE :                     ; 		dc.l pstr_mem(3,RAM_Framecount)
(2)  224/FFFFFFFFFFFF2DAE :                     ; 	else
(2)  225/FFFFFFFFFFFF2DAE :                     ; 		dc.b " "
(2)  226/FFFFFFFFFFFF2DAE :                     ; 	endif
(2)  227/FFFFFFFFFFFF2DAE :                     ; 		dc.b 0
(2)  228/FFFFFFFFFFFF2DAE :                     ; 		align 2
(2)  229/FFFFFFFFFFFF2DAE :                     
(2)  230/FFFFFFFFFFFF2DAE :                     ; ====================================================================
(2)  231/FFFFFFFFFFFF2DAE :                     
(1)   15/FFFFFFFFFFFF2DAE :                     mcscrn_e:
(1)   15/   3B4C2 :                                     dephase ; dephase RAM section
(1)   15/   3B4C2 :                                     dephase ; dephase $880000+ section
(1)   15/   3B4C2 :                     ; Md_Screen00_e:
(1)   15/   3B4C2 : =$3B4C2              MD_SCREEN00_E label *
(1)   15/   3B4C2 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   16/   3B4C2 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/  8BB4C2 :                                     phase $880000+*         ; 32X ROM-area
(1)   16/  8BB4C2 :                                     align 4
(1)   16/  8BB4C4 : =$8BB4C4             MD_SCREEN01 label *
(1)   16/   3B4C4 :                                     dephase
(1)   16/   3B4C4 :                     
(1)   16/   3B4C4 :                     mctopscrn:
(1)   16/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   16/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   16/FFFFFFFFFFFF2C00 :                             include "game/code/screen_1.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   3B4C4 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $4C2
(2)   22/     4C4 :  (MACRO-2)           			endmemory
(2)   22/   3B986 :                     .here:          dephase
(2)   22/   3B986 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   22/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   23/FFFFFFFFFFFF2C00 :                     
(2)   24/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory $5A0
(2)   24/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   24/   3B4C4 :                                     dephase
(2)   24/     5A0 :                                     phase $5A0
(2)   24/     5A0 : =$5A0                GLBL_LASTORG    := *
(2)   25/     5A0 :                     vramLoc_Haruna		ds.b $24
(2)   26/     5C4 :                     vramLoc_Sisi		ds.b $10
(2)   27/     5D4 :  (MACRO-2)           			endmemory
(2)   27/   3B4F8 :                     .here:          dephase
(2)   27/   3B4F8 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   27/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   28/FFFFFFFFFFFF2C00 :                     
(2)   29/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   30/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   31/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   32/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   33/FFFFFFFFFFFF2C00 :                     
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   34/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   34/   3B4C4 :                                     dephase
(2)   34/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   34/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   35/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   36/FFFFFFFFFFFFB802 :                     RAM_SC1_PickDispl	ds.w 1
(2)   37/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   38/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   38/   3B4CC :                     .here:          dephase
(2)   38/   3B4CC :                                     ds.b -(.here-GLBL_LASTORG)
(2)   38/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   39/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   42/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   43/FFFFFFFFFFFF2C00 :                     ; Init
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     
(2)   46/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   47/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   48/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   49/FFFFFFFFFFFF2C08 : 41FA 00FA           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   50/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   51/FFFFFFFFFFFF2C10 : 6100 EF7C           		bsr	System_SramInit
(2)   52/FFFFFFFFFFFF2C14 : 52B8 E460           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   53/FFFFFFFFFFFF2C18 : 6100 EFB2           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   54/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   55/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   56/FFFFFFFFFFFF2C1C : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   57/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C26 : 6100 E30C           		bsr	Video_PrintInit
(2)   59/FFFFFFFFFFFF2C2A : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   60/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   61/FFFFFFFFFFFF2C34 : 6100 E2EE           		bsr	Video_PrintInitW
(2)   62/FFFFFFFFFFFF2C38 : 6100 E30E           		bsr	Video_PrintDefPal_Fade
(2)   63/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   64/FFFFFFFFFFFF2C3C : 41F9 0097 5764      		lea	(Pal_Haruna),a0
(2)   65/FFFFFFFFFFFF2C42 : 7010                		moveq	#16,d0
(2)   66/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   67/FFFFFFFFFFFF2C46 : 6100 E266           		bsr	Video_FadePal
(2)   68/FFFFFFFFFFFF2C4A : 41F9 0097 59C4      		lea	(Pal_Sisi),a0
(2)   69/FFFFFFFFFFFF2C50 : 7020                		moveq	#32,d0
(2)   70/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   71/FFFFFFFFFFFF2C54 : 6100 E258           		bsr	Video_FadePal
(2)   72/FFFFFFFFFFFF2C58 : 203C 0007 51E4      		move.l	#Art_Sisi,d0
(2)   73/FFFFFFFFFFFF2C5E : 323C B880           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   74/FFFFFFFFFFFF2C62 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   75/FFFFFFFFFFFF2C66 : 6100 DBE2           		bsr	Video_LoadArt
(2)   76/FFFFFFFFFFFF2C6A : 203C FFFF 2D16      		move.l	#obj_Player,d0
(2)   77/FFFFFFFFFFFF2C70 : 6100 F43C           		bsr	Object_Make
(2)   78/FFFFFFFFFFFF2C74 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C74 : 6178                		bsr	.show_counter				; Draw counter
(2)   80/FFFFFFFFFFFF2C76 : 6100 DA3E           		bsr	Video_DisplayOn
(2)   81/FFFFFFFFFFFF2C7A : 6100 02D4           		bsr	Screen0_PickBackgrnd
(2)   82/FFFFFFFFFFFF2C7E :                     	; ----------------------------------------------
(2)   83/FFFFFFFFFFFF2C7E : 6100 F3FC           		bsr	Object_Run
(2)   84/FFFFFFFFFFFF2C82 : 6100 D7CE           		bsr	Video_BuildSprites
(2)   85/FFFFFFFFFFFF2C86 : 6100 E18C           		bsr	Video_FadeIn_Full
(2)   86/FFFFFFFFFFFF2C8A :                     
(2)   87/FFFFFFFFFFFF2C8A :                     ; ====================================================================
(2)   88/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   89/FFFFFFFFFFFF2C8A :                     ; Loop
(2)   90/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   91/FFFFFFFFFFFF2C8A :                     
(2)   92/FFFFFFFFFFFF2C8A :                     .loop:
(2)   93/FFFFFFFFFFFF2C8A : 6100 F3F0           		bsr	Object_Run
(2)   94/FFFFFFFFFFFF2C8E : 6100 D7C2           		bsr	Video_BuildSprites
(2)   95/FFFFFFFFFFFF2C92 : 6100 EC36           		bsr	System_Render
(2)   96/FFFFFFFFFFFF2C96 :                     
(2)   97/FFFFFFFFFFFF2C96 : 6156                		bsr	.show_counter				; Draw counter
(2)   98/FFFFFFFFFFFF2C98 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)   99/FFFFFFFFFFFF2C9C : 0247 0010           		andi.w	#JoyB,d7
(2)  100/FFFFFFFFFFFF2CA0 : 670E                		beq.s	.not_apress
(2)  101/FFFFFFFFFFFF2CA2 : 5278 B802           		addq.w	#1,(RAM_SC1_PickDispl).w
(2)  102/FFFFFFFFFFFF2CA6 : 0278 0001 B802      		andi.w	#1,(RAM_SC1_PickDispl).w
(2)  103/FFFFFFFFFFFF2CAC : 6100 02A2           		bsr	Screen0_PickBackgrnd
(2)  104/FFFFFFFFFFFF2CB0 :                     .not_apress:
(2)  105/FFFFFFFFFFFF2CB0 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  106/FFFFFFFFFFFF2CB4 : 0247 0020           		andi.w	#JoyC,d7
(2)  107/FFFFFFFFFFFF2CB8 : 670A                		beq.s	.not_b
(2)  108/FFFFFFFFFFFF2CBA : 203C FFFF 2E26      		move.l	#obj_Ball,d0
(2)  109/FFFFFFFFFFFF2CC0 : 6100 F3EC           		bsr	Object_Make
(2)  110/FFFFFFFFFFFF2CC4 :                     .not_b:
(2)  111/FFFFFFFFFFFF2CC4 :                     
(2)  112/FFFFFFFFFFFF2CC4 :                     	; Check START button
(2)  113/FFFFFFFFFFFF2CC4 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  114/FFFFFFFFFFFF2CC8 : 0247 0080           		andi.w	#JoyStart,d7
(2)  115/FFFFFFFFFFFF2CCC : 67BC                		beq	.loop
(2)  116/FFFFFFFFFFFF2CCE : 6100 E166           		bsr	Video_FadeOut_Full
(2)  117/FFFFFFFFFFFF2CD2 :                     
(2)  118/FFFFFFFFFFFF2CD2 :                     	; Stop ALL sequences
(2)  119/FFFFFFFFFFFF2CD2 : 6100 D532           		bsr	gemaStopAll
(2)  120/FFFFFFFFFFFF2CD6 :                     	rept 4
(2)  121/FFFFFFFFFFFF2CD6 :                     		bsr	System_Render		; Wait 4 frames...
(2)  122/FFFFFFFFFFFF2CD6 :                     	endm
(2)  121/FFFFFFFFFFFF2CD6 : 6100 EBF2           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDA : 6100 EBEE           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDE : 6100 EBEA           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CE2 : 6100 EBE6           		bsr	System_Render		; Wait 4 frames...
(2)  123/FFFFFFFFFFFF2CE6 : 31FC 0000 F5F8      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  124/FFFFFFFFFFFF2CEC : 4E75                		rts				; <-- RTS
(2)  125/FFFFFFFFFFFF2CEE :                     
(2)  126/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  127/FFFFFFFFFFFF2CEE :                     ; Show framecounter and input
(2)  128/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  129/FFFFFFFFFFFF2CEE :                     
(2)  130/FFFFFFFFFFFF2CEE :                     .show_counter:
(2)  131/FFFFFFFFFFFF2CEE : 4E75                		rts
(2)  132/FFFFFFFFFFFF2CF0 : 41FA 0380           		lea	str_NewCountr0(pc),a0
(2)  133/FFFFFFFFFFFF2CF4 : 7001                		moveq	#1,d0
(2)  134/FFFFFFFFFFFF2CF6 : 7203                		moveq	#3,d1
(2)  135/FFFFFFFFFFFF2CF8 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  136/FFFFFFFFFFFF2CFC : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  137/FFFFFFFFFFFF2D00 : 6000 E34E           		bra	Video_PrintW
(2)  138/FFFFFFFFFFFF2D04 :                     
(2)  139/FFFFFFFFFFFF2D04 :                     ; ====================================================================
(2)  140/FFFFFFFFFFFF2D04 :                     ; ------------------------------------------------------
(2)  141/FFFFFFFFFFFF2D04 :                     ; DATA asset locations
(2)  142/FFFFFFFFFFFF2D04 :                     ; ------------------------------------------------------
(2)  143/FFFFFFFFFFFF2D04 :                     
(2)  144/FFFFFFFFFFFF2D04 :                     file_scrn1_main:
(2)  145/FFFFFFFFFFFF2D04 : 0003 E052           		dc.l DATA_BANK0
(2)  146/FFFFFFFFFFFF2D08 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D0E : 494E 2E42 494E 00 
(2)  147/FFFFFFFFFFFF2D15 :                     		align 2
(2)  148/FFFFFFFFFFFF2D16 :                     ; file_scrn1_mars:
(2)  149/FFFFFFFFFFFF2D16 :                     ; 		dc.l DATA_BANK1
(2)  150/FFFFFFFFFFFF2D16 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  151/FFFFFFFFFFFF2D16 :                     ; 		align 2
(2)  152/FFFFFFFFFFFF2D16 :                     
(2)  153/FFFFFFFFFFFF2D16 :                     ; ====================================================================
(2)  154/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  155/FFFFFFFFFFFF2D16 :                     ; Objects
(2)  156/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  157/FFFFFFFFFFFF2D16 :                     
(2)  158/FFFFFFFFFFFF2D16 :                     ; --------------------------------------------------
(2)  159/FFFFFFFFFFFF2D16 :                     ; Test object
(2)  160/FFFFFFFFFFFF2D16 :                     ; --------------------------------------------------
(2)  161/FFFFFFFFFFFF2D16 :                     
(2)  162/FFFFFFFFFFFF2D16 :                     obj_Player:
(2)  163/FFFFFFFFFFFF2D16 : 7000                		moveq	#0,d0
(2)  164/FFFFFFFFFFFF2D18 : 102E 001C           		move.b	obj_index(a6),d0
(2)  165/FFFFFFFFFFFF2D1C : D040                		add.w	d0,d0
(2)  166/FFFFFFFFFFFF2D1E : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  167/FFFFFFFFFFFF2D22 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  168/FFFFFFFFFFFF2D26 :                     ; ----------------------------------------------
(2)  169/FFFFFFFFFFFF2D26 : 0004                .list:		dc.w .init-.list
(2)  170/FFFFFFFFFFFF2D28 : 002A                		dc.w .main-.list
(2)  171/FFFFFFFFFFFF2D2A :                     ; ----------------------------------------------
(2)  172/FFFFFFFFFFFF2D2A :                     .init:
(2)  173/FFFFFFFFFFFF2D2A : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  174/FFFFFFFFFFFF2D2E : 6100 F3E8           		bsr	object_ResetAnim	; Init/Reset animation
(2)  175/FFFFFFFFFFFF2D32 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  176/FFFFFFFFFFFF2D38 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  177/FFFFFFFFFFFF2D3E : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  178/FFFFFFFFFFFF2D44 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  179/FFFFFFFFFFFF2D4A : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  180/FFFFFFFFFFFF2D50 :                     
(2)  181/FFFFFFFFFFFF2D50 :                     ; ----------------------------------------------
(2)  182/FFFFFFFFFFFF2D50 :                     .main:
(2)  183/FFFFFFFFFFFF2D50 : 41F8 E55C           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  184/FFFFFFFFFFFF2D54 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  185/FFFFFFFFFFFF2D58 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  186/FFFFFFFFFFFF2D5A : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  187/FFFFFFFFFFFF2D5C : 7400                		moveq	#0,d2
(2)  188/FFFFFFFFFFFF2D5E : 7600                		moveq	#0,d3
(2)  189/FFFFFFFFFFFF2D60 : 0807 0003           		btst	#bitJoyRight,d7
(2)  190/FFFFFFFFFFFF2D64 : 6706                		beq.s	.not_right
(2)  191/FFFFFFFFFFFF2D66 : 7001                		moveq	#1,d0			; X right
(2)  192/FFFFFFFFFFFF2D68 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  193/FFFFFFFFFFFF2D68 : 7402                		moveq	#2,d2
(2)  194/FFFFFFFFFFFF2D6A : 5243                		addq.w	#1,d3
(2)  195/FFFFFFFFFFFF2D6C :                     .not_right:
(2)  196/FFFFFFFFFFFF2D6C : 0807 0002           		btst	#bitJoyLeft,d7
(2)  197/FFFFFFFFFFFF2D70 : 6706                		beq.s	.not_left
(2)  198/FFFFFFFFFFFF2D72 : 70FF                		moveq	#-1,d0			; X left
(2)  199/FFFFFFFFFFFF2D74 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  200/FFFFFFFFFFFF2D74 : 7403                		moveq	#3,d2
(2)  201/FFFFFFFFFFFF2D76 : 5243                		addq.w	#1,d3
(2)  202/FFFFFFFFFFFF2D78 :                     .not_left:
(2)  203/FFFFFFFFFFFF2D78 : 0807 0001           		btst	#bitJoyDown,d7
(2)  204/FFFFFFFFFFFF2D7C : 6706                		beq.s	.not_down
(2)  205/FFFFFFFFFFFF2D7E : 7201                		moveq	#1,d1			; Y down
(2)  206/FFFFFFFFFFFF2D80 : 7400                		moveq	#0,d2
(2)  207/FFFFFFFFFFFF2D82 : 5243                		addq.w	#1,d3
(2)  208/FFFFFFFFFFFF2D84 :                     .not_down:
(2)  209/FFFFFFFFFFFF2D84 : 0807 0000           		btst	#bitJoyUp,d7
(2)  210/FFFFFFFFFFFF2D88 : 6706                		beq.s	.not_up
(2)  211/FFFFFFFFFFFF2D8A : 72FF                		moveq	#-1,d1			; Y up
(2)  212/FFFFFFFFFFFF2D8C : 7401                		moveq	#1,d2
(2)  213/FFFFFFFFFFFF2D8E : 5243                		addq.w	#1,d3
(2)  214/FFFFFFFFFFFF2D90 :                     .not_up:
(2)  215/FFFFFFFFFFFF2D90 :                     ; 	if MARS|MARSCD
(2)  216/FFFFFFFFFFFF2D90 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  217/FFFFFFFFFFFF2D90 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  218/FFFFFFFFFFFF2D90 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  219/FFFFFFFFFFFF2D90 :                     ; 		add.w	d0,obj_x(a6)
(2)  220/FFFFFFFFFFFF2D90 :                     ; 		add.w	d1,obj_z(a6)
(2)  221/FFFFFFFFFFFF2D90 :                     ; 	else
(2)  222/FFFFFFFFFFFF2D90 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  223/FFFFFFFFFFFF2D90 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  224/FFFFFFFFFFFF2D90 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  225/FFFFFFFFFFFF2D94 : D36E 0008           		add.w	d1,obj_y(a6)
(2)  226/FFFFFFFFFFFF2D98 :                     ; 	endif
(2)  227/FFFFFFFFFFFF2D98 :                     
(2)  228/FFFFFFFFFFFF2D98 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  229/FFFFFFFFFFFF2D9C :                     
(2)  230/FFFFFFFFFFFF2D9C :                     ; ----------------------------------------------
(2)  231/FFFFFFFFFFFF2D9C :                     ; Show the object...
(2)  232/FFFFFFFFFFFF2D9C :                     
(2)  233/FFFFFFFFFFFF2D9C : 4A43                		tst.w	d3
(2)  234/FFFFFFFFFFFF2D9E : 6708                		beq.s	.no_anim
(2)  235/FFFFFFFFFFFF2DA0 : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  236/FFFFFFFFFFFF2DA4 : 6100 F3AA           		bsr	object_Animate
(2)  237/FFFFFFFFFFFF2DA8 :                     .no_anim:
(2)  238/FFFFFFFFFFFF2DA8 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  239/FFFFFFFFFFFF2DA8 :                     ; 		bsr	object_Touch
(2)  240/FFFFFFFFFFFF2DA8 :                     ; 		tst.l	d0
(2)  241/FFFFFFFFFFFF2DA8 :                     ; 		beq.s	.lel
(2)  242/FFFFFFFFFFFF2DA8 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  243/FFFFFFFFFFFF2DA8 :                     ; .lel:
(2)  244/FFFFFFFFFFFF2DA8 :                     
(2)  245/FFFFFFFFFFFF2DA8 : 207C 0000 0000      		move.l	#0,a0
(2)  246/FFFFFFFFFFFF2DAE : 43F9 0097 5784      		lea	(Map_Haruna),a1
(2)  247/FFFFFFFFFFFF2DB4 : 45F9 0097 5934      		lea	(Plc_Haruna),a2
(2)  248/FFFFFFFFFFFF2DBA : 47F9 0007 2364      		lea	(Art_Haruna),a3
(2)  249/FFFFFFFFFFFF2DC0 : 7400                		moveq	#0,d2
(2)  250/FFFFFFFFFFFF2DC2 : 302E 0004           		move.w	obj_x(a6),d0
(2)  251/FFFFFFFFFFFF2DC6 : 322E 0008           		move.w	obj_y(a6),d1
(2)  252/FFFFFFFFFFFF2DCA : D078 D8A4           		add.w	(RAM_HorScroll+2).w,d0
(2)  253/FFFFFFFFFFFF2DCE : 9278 DC64           		sub.w	(RAM_VerScroll+2).w,d1
(2)  254/FFFFFFFFFFFF2DD2 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  255/FFFFFFFFFFFF2DD6 : E14A                		lsl.w	#8,d2
(2)  256/FFFFFFFFFFFF2DD8 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  257/FFFFFFFFFFFF2DDA : D47C 25A0           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  258/FFFFFFFFFFFF2DDE : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  259/FFFFFFFFFFFF2DE2 : 6000 E4D2           		bra	Video_MakeSprMap_DMA
(2)  260/FFFFFFFFFFFF2DE6 :                     
(2)  261/FFFFFFFFFFFF2DE6 :                     ; ----------------------------------------------
(2)  262/FFFFFFFFFFFF2DE6 :                     
(2)  263/FFFFFFFFFFFF2DE6 :                     .anim_data:
(2)  264/FFFFFFFFFFFF2DE6 : 0008                		dc.w .anim_down-.anim_data
(2)  265/FFFFFFFFFFFF2DE8 : 0016                		dc.w .anim_up-.anim_data
(2)  266/FFFFFFFFFFFF2DEA : 0024                		dc.w .anim_right-.anim_data
(2)  267/FFFFFFFFFFFF2DEC : 0032                		dc.w .anim_left-.anim_data
(2)  268/FFFFFFFFFFFF2DEE :                     
(2)  269/FFFFFFFFFFFF2DEE :                     .anim_down:
(2)  270/FFFFFFFFFFFF2DEE : 0008                		dc.w 8
(2)  271/FFFFFFFFFFFF2DF0 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2DF6 : 0002             
(2)  272/FFFFFFFFFFFF2DF8 : FFFE                		dc.w -2
(2)  273/FFFFFFFFFFFF2DFA :                     		align 2
(2)  274/FFFFFFFFFFFF2DFC :                     .anim_up:
(2)  275/FFFFFFFFFFFF2DFC : 0008                		dc.w 8
(2)  276/FFFFFFFFFFFF2DFE : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E04 : 0005             
(2)  277/FFFFFFFFFFFF2E06 : FFFE                		dc.w -2
(2)  278/FFFFFFFFFFFF2E08 :                     		align 2
(2)  279/FFFFFFFFFFFF2E0A :                     .anim_right:
(2)  280/FFFFFFFFFFFF2E0A : 0008                		dc.w 8
(2)  281/FFFFFFFFFFFF2E0C : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2E12 : 0008             
(2)  282/FFFFFFFFFFFF2E14 : FFFE                		dc.w -2
(2)  283/FFFFFFFFFFFF2E16 :                     		align 2
(2)  284/FFFFFFFFFFFF2E18 :                     .anim_left:
(2)  285/FFFFFFFFFFFF2E18 : 0008                		dc.w 8
(2)  286/FFFFFFFFFFFF2E1A : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E20 : 000B             
(2)  287/FFFFFFFFFFFF2E22 : FFFE                		dc.w -2
(2)  288/FFFFFFFFFFFF2E24 :                     		align 2
(2)  289/FFFFFFFFFFFF2E26 :                     
(2)  290/FFFFFFFFFFFF2E26 :                     ; --------------------------------------------------
(2)  291/FFFFFFFFFFFF2E26 :                     ; Test object
(2)  292/FFFFFFFFFFFF2E26 :                     ; --------------------------------------------------
(2)  293/FFFFFFFFFFFF2E26 :                     
(2)  294/FFFFFFFFFFFF2E26 :                     obj_Ball:
(2)  295/FFFFFFFFFFFF2E26 : 7000                		moveq	#0,d0
(2)  296/FFFFFFFFFFFF2E28 : 102E 001C           		move.b	obj_index(a6),d0
(2)  297/FFFFFFFFFFFF2E2C : D040                		add.w	d0,d0
(2)  298/FFFFFFFFFFFF2E2E : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  299/FFFFFFFFFFFF2E32 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  300/FFFFFFFFFFFF2E36 :                     ; ----------------------------------------------
(2)  301/FFFFFFFFFFFF2E36 : 0004                .list:		dc.w .init-.list
(2)  302/FFFFFFFFFFFF2E38 : 0072                		dc.w .main-.list
(2)  303/FFFFFFFFFFFF2E3A :                     ; ----------------------------------------------
(2)  304/FFFFFFFFFFFF2E3A :                     .init:
(2)  305/FFFFFFFFFFFF2E3A : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  306/FFFFFFFFFFFF2E3E : 6100 F2D8           		bsr	object_ResetAnim	; Init/Reset animation
(2)  307/FFFFFFFFFFFF2E42 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  308/FFFFFFFFFFFF2E48 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  309/FFFFFFFFFFFF2E4E : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  310/FFFFFFFFFFFF2E54 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  311/FFFFFFFFFFFF2E5A :                     
(2)  312/FFFFFFFFFFFF2E5A : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  313/FFFFFFFFFFFF2E60 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  314/FFFFFFFFFFFF2E66 : 303C 0049           		move.w	#$48+1,d0
(2)  315/FFFFFFFFFFFF2E6A : 6100 EE8A           		bsr	System_DiceRoll
(2)  316/FFFFFFFFFFFF2E6E : E348                		lsl.w	#1,d0
(2)  317/FFFFFFFFFFFF2E70 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  318/FFFFFFFFFFFF2E74 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  319/FFFFFFFFFFFF2E78 : E748                		lsl.w	#3,d0
(2)  320/FFFFFFFFFFFF2E7A : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  321/FFFFFFFFFFFF2E7E : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  322/FFFFFFFFFFFF2E82 :                     
(2)  323/FFFFFFFFFFFF2E82 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  324/FFFFFFFFFFFF2E88 : 6100 EE12           		bsr	System_Random
(2)  325/FFFFFFFFFFFF2E8C : 2E38 F5E0           		move.l	(RAM_SysRandom).w,d7
(2)  326/FFFFFFFFFFFF2E90 : E24F                		lsr.w	#1,d7
(2)  327/FFFFFFFFFFFF2E92 : 640A                		bcc.s	.x_random
(2)  328/FFFFFFFFFFFF2E94 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  329/FFFFFFFFFFFF2E98 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  330/FFFFFFFFFFFF2E9E :                     .x_random:
(2)  331/FFFFFFFFFFFF2E9E : E24F                		lsr.w	#1,d7
(2)  332/FFFFFFFFFFFF2EA0 : 6404                		bcc.s	.y_random
(2)  333/FFFFFFFFFFFF2EA2 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  334/FFFFFFFFFFFF2EA6 :                     .y_random:
(2)  335/FFFFFFFFFFFF2EA6 : 4E75                		rts
(2)  336/FFFFFFFFFFFF2EA8 :                     
(2)  337/FFFFFFFFFFFF2EA8 :                     ; ----------------------------------------------
(2)  338/FFFFFFFFFFFF2EA8 :                     .main:
(2)  339/FFFFFFFFFFFF2EA8 : 3438 E45A           		move.w	(RAM_VdpRegSetC).w,d2
(2)  340/FFFFFFFFFFFF2EAC : 0802 0002           		btst	#2,d2
(2)  341/FFFFFFFFFFFF2EB0 : 660E                		bne.s	.y_fix
(2)  342/FFFFFFFFFFFF2EB2 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  343/FFFFFFFFFFFF2EB8 : 6D06                		blt.s	.y_fix
(2)  344/FFFFFFFFFFFF2EBA : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  345/FFFFFFFFFFFF2EC0 :                     .y_fix:
(2)  346/FFFFFFFFFFFF2EC0 :                     
(2)  347/FFFFFFFFFFFF2EC0 : 323C 00E0           		move.w	#224,d1
(2)  348/FFFFFFFFFFFF2EC4 : 3438 E45A           		move.w	(RAM_VdpRegSetC).w,d2
(2)  349/FFFFFFFFFFFF2EC8 : 0802 0002           		btst	#2,d2
(2)  350/FFFFFFFFFFFF2ECC : 6702                		beq.s	.y_double
(2)  351/FFFFFFFFFFFF2ECE : D241                		add.w	d1,d1
(2)  352/FFFFFFFFFFFF2ED0 :                     .y_double:
(2)  353/FFFFFFFFFFFF2ED0 : 303C 0140           		move.w	#320,d0
(2)  354/FFFFFFFFFFFF2ED4 : 342E 0004           		move.w	obj_x(a6),d2
(2)  355/FFFFFFFFFFFF2ED8 : 4A42                		tst.w	d2
(2)  356/FFFFFFFFFFFF2EDA : 6A0A                		bpl.s	.x_back
(2)  357/FFFFFFFFFFFF2EDC : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  358/FFFFFFFFFFFF2EE0 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  359/FFFFFFFFFFFF2EE6 :                     .x_back:
(2)  360/FFFFFFFFFFFF2EE6 : B440                		cmp.w	d0,d2
(2)  361/FFFFFFFFFFFF2EE8 : 6D0A                		blt.s	.x_foward
(2)  362/FFFFFFFFFFFF2EEA : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  363/FFFFFFFFFFFF2EEE : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  364/FFFFFFFFFFFF2EF4 :                     .x_foward:
(2)  365/FFFFFFFFFFFF2EF4 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  366/FFFFFFFFFFFF2EF8 :                     
(2)  367/FFFFFFFFFFFF2EF8 : 342E 0008           		move.w	obj_y(a6),d2
(2)  368/FFFFFFFFFFFF2EFC : 4A42                		tst.w	d2
(2)  369/FFFFFFFFFFFF2EFE : 6A04                		bpl.s	.y_back
(2)  370/FFFFFFFFFFFF2F00 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  371/FFFFFFFFFFFF2F04 :                     .y_back:
(2)  372/FFFFFFFFFFFF2F04 : B441                		cmp.w	d1,d2
(2)  373/FFFFFFFFFFFF2F06 : 6D04                		blt.s	.y_foward
(2)  374/FFFFFFFFFFFF2F08 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  375/FFFFFFFFFFFF2F0C :                     .y_foward:
(2)  376/FFFFFFFFFFFF2F0C : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  377/FFFFFFFFFFFF2F10 :                     
(2)  378/FFFFFFFFFFFF2F10 : 6100 F20E           		bsr	object_Speed
(2)  379/FFFFFFFFFFFF2F14 :                     
(2)  380/FFFFFFFFFFFF2F14 :                     ; ----------------------------------------------
(2)  381/FFFFFFFFFFFF2F14 :                     ; Show the object...
(2)  382/FFFFFFFFFFFF2F14 :                     
(2)  383/FFFFFFFFFFFF2F14 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  384/FFFFFFFFFFFF2F18 : 6100 F236           		bsr	object_Animate
(2)  385/FFFFFFFFFFFF2F1C : 43F9 0097 59E4      		lea	(Map_Sisi),a1
(2)  386/FFFFFFFFFFFF2F22 : 7400                		moveq	#0,d2
(2)  387/FFFFFFFFFFFF2F24 : 302E 0004           		move.w	obj_x(a6),d0
(2)  388/FFFFFFFFFFFF2F28 : 322E 0008           		move.w	obj_y(a6),d1
(2)  389/FFFFFFFFFFFF2F2C : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  390/FFFFFFFFFFFF2F30 : E14A                		lsl.w	#8,d2
(2)  391/FFFFFFFFFFFF2F32 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  392/FFFFFFFFFFFF2F34 : D47C 45C4           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  393/FFFFFFFFFFFF2F38 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  394/FFFFFFFFFFFF2F3C : 6000 E390           		bra	Video_MakeSprMap
(2)  395/FFFFFFFFFFFF2F40 :                     
(2)  396/FFFFFFFFFFFF2F40 :                     ; ----------------------------------------------
(2)  397/FFFFFFFFFFFF2F40 :                     
(2)  398/FFFFFFFFFFFF2F40 :                     .anim_data:
(2)  399/FFFFFFFFFFFF2F40 : 0002                		dc.w .maind-.anim_data
(2)  400/FFFFFFFFFFFF2F42 :                     .maind:
(2)  401/FFFFFFFFFFFF2F42 : 0008                		dc.w 8
(2)  402/FFFFFFFFFFFF2F44 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F4A : 0001             
(2)  403/FFFFFFFFFFFF2F4C : FFFE                		dc.w -2
(2)  404/FFFFFFFFFFFF2F4E :                     		align 2
(2)  405/FFFFFFFFFFFF2F50 :                     
(2)  406/FFFFFFFFFFFF2F50 :                     ; ====================================================================
(2)  407/FFFFFFFFFFFF2F50 :                     ; ------------------------------------------------------
(2)  408/FFFFFFFFFFFF2F50 :                     ; Subroutines
(2)  409/FFFFFFFFFFFF2F50 :                     ; ------------------------------------------------------
(2)  410/FFFFFFFFFFFF2F50 :                     
(2)  411/FFFFFFFFFFFF2F50 :                     Screen0_PickBackgrnd:
(2)  412/FFFFFFFFFFFF2F50 : 6100 E978           		bsr	System_Render
(2)  413/FFFFFFFFFFFF2F54 : 6100 D76C           		bsr	Video_DisplayOff
(2)  414/FFFFFFFFFFFF2F58 : 6100 D72E           		bsr	Video_ClearScreen
(2)  415/FFFFFFFFFFFF2F5C : 4A78 B802           		tst.w	(RAM_SC1_PickDispl).w
(2)  416/FFFFFFFFFFFF2F60 : 6600 0082           		bne	.pick_second
(2)  417/FFFFFFFFFFFF2F64 : 7001                		moveq	#1,d0
(2)  418/FFFFFFFFFFFF2F66 : 7200                		moveq	#%00,d1
(2)  419/FFFFFFFFFFFF2F68 : 6100 D7DA           		bsr	Video_Resolution
(2)  420/FFFFFFFFFFFF2F6C : 41FA 00EA           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  421/FFFFFFFFFFFF2F70 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  422/FFFFFFFFFFFF2F72 : 7201                		moveq	#1,d1
(2)  423/FFFFFFFFFFFF2F74 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  424/FFFFFFFFFFFF2F78 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  425/FFFFFFFFFFFF2F7C : 6100 E0D2           		bsr	Video_PrintW				; <-- Print BIG text
(2)  426/FFFFFFFFFFFF2F80 : 41FA 00E2           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  427/FFFFFFFFFFFF2F84 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  428/FFFFFFFFFFFF2F86 : 7219                		moveq	#25,d1
(2)  429/FFFFFFFFFFFF2F88 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  430/FFFFFFFFFFFF2F8C : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  431/FFFFFFFFFFFF2F90 : 6100 E0BE           		bsr	Video_PrintW
(2)  432/FFFFFFFFFFFF2F94 :                     
(2)  433/FFFFFFFFFFFF2F94 : 41F9 0097 5A2A      		lea	(Pal_TESTBG+color_indx(1)),a0		; a0 - Load palette (+2 skips first color)
(2)  434/FFFFFFFFFFFF2F9A : 7001                		moveq	#1,d0					; d0 - Start at $01
(2)  435/FFFFFFFFFFFF2F9C : 720F                		moveq	#15,d1					; d1 - 15 colors
(2)  436/FFFFFFFFFFFF2F9E : 6100 DF0E           		bsr	Video_FadePal				; Load palette to FADE buffer
(2)  437/FFFFFFFFFFFF2FA2 : 6100 DF14           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  438/FFFFFFFFFFFF2FA6 : 4278 E1B2           		clr.w	(RAM_Palette).w
(2)  439/FFFFFFFFFFFF2FAA : 4278 E232           		clr.w	(RAM_PaletteFade).w
(2)  440/FFFFFFFFFFFF2FAE : 203C 0006 04C4      		move.l	#Art_TESTBG,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  441/FFFFFFFFFFFF2FB4 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  442/FFFFFFFFFFFF2FB8 : 343C 8620           		move.w	#Art_TESTBG_e-Art_TESTBG,d2		; d2 - Size: end-start
(2)  443/FFFFFFFFFFFF2FBC : 6100 D88C           		bsr	Video_LoadArt
(2)  444/FFFFFFFFFFFF2FC0 : 41F9 0097 5A48      		lea	(Map_TESTBG),a0				; a0 - Map data
(2)  445/FFFFFFFFFFFF2FC6 : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  446/FFFFFFFFFFFF2FCC : 223C 0028 001C      		move.l	#splitw(320/8,224/8),d1			; d1 - Width and Height
(2)  447/FFFFFFFFFFFF2FD2 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  448/FFFFFFFFFFFF2FD8 : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  449/FFFFFFFFFFFF2FDC : 6100 DB38           		bsr	Video_LoadMap
(2)  450/FFFFFFFFFFFF2FE0 : 6000 D6D4           		bra	Video_DisplayOn
(2)  451/FFFFFFFFFFFF2FE4 :                     
(2)  452/FFFFFFFFFFFF2FE4 :                     .pick_second:
(2)  453/FFFFFFFFFFFF2FE4 : 7001                		moveq	#1,d0
(2)  454/FFFFFFFFFFFF2FE6 : 7202                		moveq	#%10,d1
(2)  455/FFFFFFFFFFFF2FE8 : 6100 D75A           		bsr	Video_Resolution
(2)  456/FFFFFFFFFFFF2FEC : 41FA 006A           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  457/FFFFFFFFFFFF2FF0 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  458/FFFFFFFFFFFF2FF2 : 7201                		moveq	#1,d1
(2)  459/FFFFFFFFFFFF2FF4 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  460/FFFFFFFFFFFF2FF8 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  461/FFFFFFFFFFFF2FFC : 6100 E052           		bsr	Video_PrintW
(2)  462/FFFFFFFFFFFF3000 : 41FA 0062           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  463/FFFFFFFFFFFF3004 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  464/FFFFFFFFFFFF3006 : 721A                		moveq	#26,d1
(2)  465/FFFFFFFFFFFF3008 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  466/FFFFFFFFFFFF300C : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  467/FFFFFFFFFFFF3010 : 6100 E03E           		bsr	Video_PrintW
(2)  468/FFFFFFFFFFFF3014 :                     
(2)  469/FFFFFFFFFFFF3014 : 41F9 0097 6308      		lea	(Pal_TESTBG2),a0			; a0 - Load palette (+2 skips first color)
(2)  470/FFFFFFFFFFFF301A : 7000                		moveq	#0,d0					; d0 - Start at $01
(2)  471/FFFFFFFFFFFF301C : 7210                		moveq	#16,d1					; d1 - 15 colors
(2)  472/FFFFFFFFFFFF301E : 6100 DE98           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  473/FFFFFFFFFFFF3022 : 203C 0006 8AE4      		move.l	#Art_TESTBG2,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  474/FFFFFFFFFFFF3028 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  475/FFFFFFFFFFFF302C : 343C 9880           		move.w	#Art_TESTBG2_e-Art_TESTBG2,d2		; d2 - Size: end-start
(2)  476/FFFFFFFFFFFF3030 : 6100 D818           		bsr	Video_LoadArt
(2)  477/FFFFFFFFFFFF3034 : 41F9 0097 6328      		lea	(Map_TESTBG2),a0			; a0 - Map data
(2)  478/FFFFFFFFFFFF303A : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  479/FFFFFFFFFFFF3040 : 223C 0028 0038      		move.l	#splitw(320/8,448/8),d1			; d1 - Width and Height
(2)  480/FFFFFFFFFFFF3046 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  481/FFFFFFFFFFFF304C : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  482/FFFFFFFFFFFF3050 : 6100 DB3A           		bsr	Video_LoadMapV
(2)  483/FFFFFFFFFFFF3054 : 6000 D660           		bra	Video_DisplayOn
(2)  484/FFFFFFFFFFFF3058 :                     
(2)  485/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  486/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  487/FFFFFFFFFFFF3058 :                     ; Custom VBlank
(2)  488/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  489/FFFFFFFFFFFF3058 :                     
(2)  490/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  491/FFFFFFFFFFFF3058 :                     ; Custom HBlank
(2)  492/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  493/FFFFFFFFFFFF3058 :                     
(2)  494/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  495/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  496/FFFFFFFFFFFF3058 :                     ; Includes for this screen
(2)  497/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  498/FFFFFFFFFFFF3058 :                     
(2)  499/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  500/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  501/FFFFFFFFFFFF3058 :                     ; Small data section
(2)  502/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  503/FFFFFFFFFFFF3058 :                     
(2)  504/FFFFFFFFFFFF3058 :                     str_NikonaTest:
(2)  505/FFFFFFFFFFFF3058 : 2A2A 2054 6F70      		dc.b "** Top **"
         FFFFFFFFFFFF305E : 202A 2A          
(2)  506/FFFFFFFFFFFF3061 : 00                  		dc.b 0
(2)  507/FFFFFFFFFFFF3062 :                     		align 2
(2)  508/FFFFFFFFFFFF3064 :                     str_NikonaTest2:
(2)  509/FFFFFFFFFFFF3064 : 2A2A 2042 6F74      		dc.b "** Bottom **"
         FFFFFFFFFFFF306A : 746F 6D20 2A2A    
(2)  510/FFFFFFFFFFFF3070 : 00                  		dc.b 0
(2)  511/FFFFFFFFFFFF3071 :                     		align 2
(2)  512/FFFFFFFFFFFF3072 :                     str_NewCountr0:
(2)  513/FFFFFFFFFFFF3072 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  514/FFFFFFFFFFFF3076 : 00                  		dc.b 0
(2)  515/FFFFFFFFFFFF3077 :                     		align 2
(2)  516/FFFFFFFFFFFF3078 :                     
(2)  517/FFFFFFFFFFFF3078 :                     str_InputMe:
(2)  519/FFFFFFFFFFFF3078 : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  520/FFFFFFFFFFFF307C : 20                  		dc.b " "
(2)  521/FFFFFFFFFFFF307D : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  522/FFFFFFFFFFFF3081 : 20                  		dc.b " "
(2)  523/FFFFFFFFFFFF3082 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  527/FFFFFFFFFFFF3086 : 00                  		dc.b 0
(2)  528/FFFFFFFFFFFF3087 :                     		align 2
(2)  529/FFFFFFFFFFFF3088 :                     
(2)  530/FFFFFFFFFFFF3088 :                     Pal_TestStamp:
(2)  531/FFFFFFFFFFFF3088 :                     ; 		dc.w 0
(2)  532/FFFFFFFFFFFF3088 :                     ; ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  533/FFFFFFFFFFFF3088 :                     ; 		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  534/FFFFFFFFFFFF3088 :                     ; 		align 2
(2)  535/FFFFFFFFFFFF3088 :                     
(2)  536/FFFFFFFFFFFF3088 :                     ; Object data:
(2)  537/FFFFFFFFFFFF3088 :                     ; objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  538/FFFFFFFFFFFF3088 :                     ; 		align 2
(2)  539/FFFFFFFFFFFF3088 :                     ; objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  540/FFFFFFFFFFFF3088 :                     ; 		align 2
(2)  541/FFFFFFFFFFFF3088 :                     ; objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  542/FFFFFFFFFFFF3088 :                     ; 		align 2
(2)  543/FFFFFFFFFFFF3088 :                     
(2)  544/FFFFFFFFFFFF3088 :                     ; ====================================================================
(2)  545/FFFFFFFFFFFF3088 :                     
(1)   16/FFFFFFFFFFFF3088 :                     mcscrn_e:
(1)   16/   3B94C :                                     dephase ; dephase RAM section
(1)   16/   3B94C :                                     dephase ; dephase $880000+ section
(1)   16/   3B94C :                     ; Md_Screen00_e:
(1)   16/   3B94C : =$3B94C              MD_SCREEN01_E label *
(1)   16/   3B94C :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN01",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   17/   3B94C : (MACRO)              	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/  8BB94C :                                     phase $880000+*         ; 32X ROM-area
(1)   17/  8BB94C :                                     align 4
(1)   17/  8BB94C : =$8BB94C             MD_SCREEN02 label *
(1)   17/   3B94C :                                     dephase
(1)   17/   3B94C :                     
(1)   17/   3B94C :                     mctopscrn:
(1)   17/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   17/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   17/FFFFFFFFFFFF2C00 :                             include "game/code/screen_2.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   3B94C :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $300
(2)   22/     302 :                     vramLoc_Haruna		ds.b $24
(2)   23/     326 :                     vramLoc_Sisi		ds.b $10
(2)   24/     336 :  (MACRO-2)           			endmemory
(2)   24/   3BC80 :                     .here:          dephase
(2)   24/   3BC80 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   3B94C :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_TempStampVars	ds.l 2
(2)   34/FFFFFFFFFFFFB80A :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB810 :  (MACRO-2)           			endmemory
(2)   35/   3B95C :                     .here:          dephase
(2)   35/   3B95C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 00FE           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 EF7C           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 E460           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 EFB2           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E30C           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E2EE           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E30E           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41F9 FFFF 325E      		lea	(Pal_StampTest),a0
(2)   62/FFFFFFFFFFFF2C42 : 7000                		moveq	#0,d0
(2)   63/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   64/FFFFFFFFFFFF2C46 : 6100 E266           		bsr	Video_FadePal
(2)   65/FFFFFFFFFFFF2C4A : 41F9 FFFF 2F90      		lea	(Pal_Haruna),a0
(2)   66/FFFFFFFFFFFF2C50 : 7010                		moveq	#16,d0
(2)   67/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   68/FFFFFFFFFFFF2C54 : 6100 E258           		bsr	Video_FadePal
(2)   69/FFFFFFFFFFFF2C58 : 41F9 FFFF 31F6      		lea	(Pal_Sisi),a0
(2)   70/FFFFFFFFFFFF2C5E : 7020                		moveq	#32,d0
(2)   71/FFFFFFFFFFFF2C60 : 7210                		moveq	#16,d1
(2)   72/FFFFFFFFFFFF2C62 : 6100 E24A           		bsr	Video_FadePal
(2)   73/FFFFFFFFFFFF2C66 : 203C 0007 51E4      		move.l	#Art_Sisi,d0
(2)   74/FFFFFFFFFFFF2C6C : 323C 64C0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   75/FFFFFFFFFFFF2C70 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   76/FFFFFFFFFFFF2C74 : 6100 DBD4           		bsr	Video_LoadArt
(2)   77/FFFFFFFFFFFF2C78 :                     
(2)   78/FFFFFFFFFFFF2C78 : 41FA 02F2           		lea	str_MidemeEsta(pc),a0
(2)   79/FFFFFFFFFFFF2C7C : 7000                		moveq	#0,d0
(2)   80/FFFFFFFFFFFF2C7E : 721A                		moveq	#26,d1
(2)   81/FFFFFFFFFFFF2C80 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   82/FFFFFFFFFFFF2C84 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   83/FFFFFFFFFFFF2C88 : 6100 E2DC           		bsr	Video_Print
(2)   84/FFFFFFFFFFFF2C8C :                     
(2)   85/FFFFFFFFFFFF2C8C :                     	; ----------------------------------------------
(2)  129/FFFFFFFFFFFF2C8C :                     	; ----------------------------------------------
(2)  130/FFFFFFFFFFFF2C8C : 6164                		bsr	.show_counter				; Draw counter
(2)  131/FFFFFFFFFFFF2C8E : 6100 DA26           		bsr	Video_DisplayOn
(2)  132/FFFFFFFFFFFF2C92 :                     	; ----------------------------------------------
(2)  148/FFFFFFFFFFFF2C92 : 6100 F3E8           		bsr	Object_Run
(2)  149/FFFFFFFFFFFF2C96 : 6100 D7BA           		bsr	Video_BuildSprites
(2)  150/FFFFFFFFFFFF2C9A : 6100 E178           		bsr	Video_FadeIn_Full
(2)  151/FFFFFFFFFFFF2C9E :                     
(2)  152/FFFFFFFFFFFF2C9E :                     ; ====================================================================
(2)  153/FFFFFFFFFFFF2C9E :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2C9E :                     ; Loop
(2)  155/FFFFFFFFFFFF2C9E :                     ; ------------------------------------------------------
(2)  156/FFFFFFFFFFFF2C9E :                     
(2)  157/FFFFFFFFFFFF2C9E :                     .loop:
(2)  158/FFFFFFFFFFFF2C9E : 6100 ED2E           		bsr	Sound_Update
(2)  159/FFFFFFFFFFFF2CA2 : 6100 EC26           		bsr	System_Render
(2)  160/FFFFFFFFFFFF2CA6 : 6100 F3D4           		bsr	Object_Run
(2)  161/FFFFFFFFFFFF2CAA : 6100 D7A6           		bsr	Video_BuildSprites
(2)  162/FFFFFFFFFFFF2CAE : 6100 ED1E           		bsr	Sound_Update
(2)  209/FFFFFFFFFFFF2CB2 : 613E                		bsr	.show_counter				; Draw counter
(2)  210/FFFFFFFFFFFF2CB4 :                     
(2)  211/FFFFFFFFFFFF2CB4 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  212/FFFFFFFFFFFF2CB8 : 0247 0020           		andi.w	#JoyC,d7
(2)  213/FFFFFFFFFFFF2CBC : 670A                		beq.s	.not_b
(2)  214/FFFFFFFFFFFF2CBE : 203C FFFF 2E3C      		move.l	#obj_Ball,d0
(2)  215/FFFFFFFFFFFF2CC4 : 6100 F3E8           		bsr	Object_Make
(2)  216/FFFFFFFFFFFF2CC8 :                     .not_b:
(2)  217/FFFFFFFFFFFF2CC8 :                     
(2)  218/FFFFFFFFFFFF2CC8 :                     	; Check START button
(2)  219/FFFFFFFFFFFF2CC8 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  220/FFFFFFFFFFFF2CCC : 0247 0080           		andi.w	#JoyStart,d7
(2)  221/FFFFFFFFFFFF2CD0 : 67CC                		beq	.loop
(2)  222/FFFFFFFFFFFF2CD2 : 6100 E162           		bsr	Video_FadeOut_Full
(2)  223/FFFFFFFFFFFF2CD6 :                     
(2)  224/FFFFFFFFFFFF2CD6 :                     	; Stop ALL sequences
(2)  225/FFFFFFFFFFFF2CD6 : 6100 D52E           		bsr	gemaStopAll
(2)  226/FFFFFFFFFFFF2CDA :                     	rept 4
(2)  227/FFFFFFFFFFFF2CDA :                     		bsr	System_Render		; Wait 4 frames...
(2)  228/FFFFFFFFFFFF2CDA :                     	endm
(2)  227/FFFFFFFFFFFF2CDA : 6100 EBEE           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2CDE : 6100 EBEA           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2CE2 : 6100 EBE6           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2CE6 : 6100 EBE2           		bsr	System_Render		; Wait 4 frames...
(2)  229/FFFFFFFFFFFF2CEA : 31FC 0000 F5F8      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  230/FFFFFFFFFFFF2CF0 : 4E75                		rts				; <-- RTS
(2)  231/FFFFFFFFFFFF2CF2 :                     
(2)  232/FFFFFFFFFFFF2CF2 :                     ; ------------------------------------------------------
(2)  233/FFFFFFFFFFFF2CF2 :                     ; Show framecounter and input
(2)  234/FFFFFFFFFFFF2CF2 :                     ; ------------------------------------------------------
(2)  235/FFFFFFFFFFFF2CF2 :                     
(2)  236/FFFFFFFFFFFF2CF2 :                     .show_counter:
(2)  245/FFFFFFFFFFFF2CF2 : 41FA 0272           		lea	str_NewCountr0(pc),a0
(2)  246/FFFFFFFFFFFF2CF6 : 7017                		moveq	#23,d0
(2)  247/FFFFFFFFFFFF2CF8 : 7201                		moveq	#1,d1
(2)  248/FFFFFFFFFFFF2CFA : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  249/FFFFFFFFFFFF2CFE : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  250/FFFFFFFFFFFF2D02 : 6000 E262           		bra	Video_Print
(2)  251/FFFFFFFFFFFF2D06 :                     
(2)  252/FFFFFFFFFFFF2D06 :                     .make_stamp:
(2)  253/FFFFFFFFFFFF2D06 :                     ;  rts
(2)  268/FFFFFFFFFFFF2D06 : 4E75                		rts
(2)  269/FFFFFFFFFFFF2D08 :                     
(2)  270/FFFFFFFFFFFF2D08 :                     ; ====================================================================
(2)  271/FFFFFFFFFFFF2D08 :                     ; ------------------------------------------------------
(2)  272/FFFFFFFFFFFF2D08 :                     ; DATA asset locations
(2)  273/FFFFFFFFFFFF2D08 :                     ; ------------------------------------------------------
(2)  274/FFFFFFFFFFFF2D08 :                     
(2)  275/FFFFFFFFFFFF2D08 :                     file_scrn1_main:
(2)  276/FFFFFFFFFFFF2D08 : 0003 E052           		dc.l DATA_BANK0
(2)  277/FFFFFFFFFFFF2D0C : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D12 : 494E 2E42 494E 00 
(2)  278/FFFFFFFFFFFF2D19 :                     		align 2
(2)  279/FFFFFFFFFFFF2D1A :                     file_scrn2_stamps:
(2)  280/FFFFFFFFFFFF2D1A : FFFF FFFF           		dc.l -1
(2)  281/FFFFFFFFFFFF2D1E : 5354 414D 5053      		dc.b "STAMPS_0.BIN",0
         FFFFFFFFFFFF2D24 : 5F30 2E42 494E 00 
(2)  282/FFFFFFFFFFFF2D2B :                     		align 2
(2)  283/FFFFFFFFFFFF2D2C :                     
(2)  284/FFFFFFFFFFFF2D2C :                     ; ====================================================================
(2)  285/FFFFFFFFFFFF2D2C :                     ; ------------------------------------------------------
(2)  286/FFFFFFFFFFFF2D2C :                     ; Objects
(2)  287/FFFFFFFFFFFF2D2C :                     ; ------------------------------------------------------
(2)  288/FFFFFFFFFFFF2D2C :                     
(2)  289/FFFFFFFFFFFF2D2C :                     ; --------------------------------------------------
(2)  290/FFFFFFFFFFFF2D2C :                     ; Test object
(2)  291/FFFFFFFFFFFF2D2C :                     ; --------------------------------------------------
(2)  292/FFFFFFFFFFFF2D2C :                     
(2)  293/FFFFFFFFFFFF2D2C :                     obj_Player:
(2)  294/FFFFFFFFFFFF2D2C : 7000                		moveq	#0,d0
(2)  295/FFFFFFFFFFFF2D2E : 102E 001C           		move.b	obj_index(a6),d0
(2)  296/FFFFFFFFFFFF2D32 : D040                		add.w	d0,d0
(2)  297/FFFFFFFFFFFF2D34 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  298/FFFFFFFFFFFF2D38 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  299/FFFFFFFFFFFF2D3C :                     ; ----------------------------------------------
(2)  300/FFFFFFFFFFFF2D3C : 0004                .list:		dc.w .init-.list
(2)  301/FFFFFFFFFFFF2D3E : 002A                		dc.w .main-.list
(2)  302/FFFFFFFFFFFF2D40 :                     ; ----------------------------------------------
(2)  303/FFFFFFFFFFFF2D40 :                     .init:
(2)  304/FFFFFFFFFFFF2D40 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  305/FFFFFFFFFFFF2D44 : 6100 F3D2           		bsr	object_ResetAnim	; Init/Reset animation
(2)  306/FFFFFFFFFFFF2D48 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  307/FFFFFFFFFFFF2D4E : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  308/FFFFFFFFFFFF2D54 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  309/FFFFFFFFFFFF2D5A : 3D7C 0080 0004      		move.w	#256/2,obj_x(a6)	; Set Object's X/Y position
(2)  310/FFFFFFFFFFFF2D60 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  311/FFFFFFFFFFFF2D66 :                     
(2)  312/FFFFFFFFFFFF2D66 :                     ; ----------------------------------------------
(2)  313/FFFFFFFFFFFF2D66 :                     .main:
(2)  314/FFFFFFFFFFFF2D66 : 41F8 E55C           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  315/FFFFFFFFFFFF2D6A : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  316/FFFFFFFFFFFF2D6E : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  317/FFFFFFFFFFFF2D70 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  318/FFFFFFFFFFFF2D72 : 7400                		moveq	#0,d2
(2)  319/FFFFFFFFFFFF2D74 : 7600                		moveq	#0,d3
(2)  320/FFFFFFFFFFFF2D76 : 0807 0003           		btst	#bitJoyRight,d7
(2)  321/FFFFFFFFFFFF2D7A : 6706                		beq.s	.not_right
(2)  322/FFFFFFFFFFFF2D7C : 7001                		moveq	#1,d0			; X right
(2)  323/FFFFFFFFFFFF2D7E :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  324/FFFFFFFFFFFF2D7E : 7402                		moveq	#2,d2
(2)  325/FFFFFFFFFFFF2D80 : 5243                		addq.w	#1,d3
(2)  326/FFFFFFFFFFFF2D82 :                     .not_right:
(2)  327/FFFFFFFFFFFF2D82 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  328/FFFFFFFFFFFF2D86 : 6706                		beq.s	.not_left
(2)  329/FFFFFFFFFFFF2D88 : 70FF                		moveq	#-1,d0			; X left
(2)  330/FFFFFFFFFFFF2D8A :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  331/FFFFFFFFFFFF2D8A : 7403                		moveq	#3,d2
(2)  332/FFFFFFFFFFFF2D8C : 5243                		addq.w	#1,d3
(2)  333/FFFFFFFFFFFF2D8E :                     .not_left:
(2)  334/FFFFFFFFFFFF2D8E : 0807 0001           		btst	#bitJoyDown,d7
(2)  335/FFFFFFFFFFFF2D92 : 6706                		beq.s	.not_down
(2)  336/FFFFFFFFFFFF2D94 : 7201                		moveq	#1,d1			; Y down
(2)  337/FFFFFFFFFFFF2D96 : 7400                		moveq	#0,d2
(2)  338/FFFFFFFFFFFF2D98 : 5243                		addq.w	#1,d3
(2)  339/FFFFFFFFFFFF2D9A :                     .not_down:
(2)  340/FFFFFFFFFFFF2D9A : 0807 0000           		btst	#bitJoyUp,d7
(2)  341/FFFFFFFFFFFF2D9E : 6706                		beq.s	.not_up
(2)  342/FFFFFFFFFFFF2DA0 : 72FF                		moveq	#-1,d1			; Y up
(2)  343/FFFFFFFFFFFF2DA2 : 7401                		moveq	#1,d2
(2)  344/FFFFFFFFFFFF2DA4 : 5243                		addq.w	#1,d3
(2)  345/FFFFFFFFFFFF2DA6 :                     .not_up:
(2)  346/FFFFFFFFFFFF2DA6 :                     ; 	if MARS|MARSCD
(2)  347/FFFFFFFFFFFF2DA6 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  348/FFFFFFFFFFFF2DA6 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  349/FFFFFFFFFFFF2DA6 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  350/FFFFFFFFFFFF2DA6 :                     ; 		add.w	d0,obj_x(a6)
(2)  351/FFFFFFFFFFFF2DA6 :                     ; 		add.w	d1,obj_z(a6)
(2)  352/FFFFFFFFFFFF2DA6 :                     ; 	else
(2)  353/FFFFFFFFFFFF2DA6 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  354/FFFFFFFFFFFF2DA6 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  355/FFFFFFFFFFFF2DA6 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  356/FFFFFFFFFFFF2DAA : D36E 0008           		add.w	d1,obj_y(a6)
(2)  357/FFFFFFFFFFFF2DAE :                     ; 	endif
(2)  358/FFFFFFFFFFFF2DAE :                     
(2)  359/FFFFFFFFFFFF2DAE : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  360/FFFFFFFFFFFF2DB2 :                     
(2)  361/FFFFFFFFFFFF2DB2 :                     ; ----------------------------------------------
(2)  362/FFFFFFFFFFFF2DB2 :                     ; Show the object...
(2)  363/FFFFFFFFFFFF2DB2 :                     
(2)  364/FFFFFFFFFFFF2DB2 : 4A43                		tst.w	d3
(2)  365/FFFFFFFFFFFF2DB4 : 6708                		beq.s	.no_anim
(2)  366/FFFFFFFFFFFF2DB6 : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  367/FFFFFFFFFFFF2DBA : 6100 F394           		bsr	object_Animate
(2)  368/FFFFFFFFFFFF2DBE :                     .no_anim:
(2)  369/FFFFFFFFFFFF2DBE :                     ; 		clr.l	(RAM_TestTouch).w
(2)  370/FFFFFFFFFFFF2DBE :                     ; 		bsr	object_Touch
(2)  371/FFFFFFFFFFFF2DBE :                     ; 		tst.l	d0
(2)  372/FFFFFFFFFFFF2DBE :                     ; 		beq.s	.lel
(2)  373/FFFFFFFFFFFF2DBE :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  374/FFFFFFFFFFFF2DBE :                     ; .lel:
(2)  375/FFFFFFFFFFFF2DBE :                     
(2)  376/FFFFFFFFFFFF2DBE : 207C 0000 0000      		move.l	#0,a0
(2)  377/FFFFFFFFFFFF2DC4 : 43F9 FFFF 2FB2      		lea	(Map_Haruna),a1
(2)  378/FFFFFFFFFFFF2DCA : 45F9 FFFF 3164      		lea	(Plc_Haruna),a2
(2)  379/FFFFFFFFFFFF2DD0 : 47F9 0007 2364      		lea	(Art_Haruna),a3
(2)  380/FFFFFFFFFFFF2DD6 : 7400                		moveq	#0,d2
(2)  381/FFFFFFFFFFFF2DD8 : 302E 0004           		move.w	obj_x(a6),d0
(2)  382/FFFFFFFFFFFF2DDC : 322E 0008           		move.w	obj_y(a6),d1
(2)  383/FFFFFFFFFFFF2DE0 : D078 D8A4           		add.w	(RAM_HorScroll+2).w,d0
(2)  384/FFFFFFFFFFFF2DE4 : 9278 DC64           		sub.w	(RAM_VerScroll+2).w,d1
(2)  385/FFFFFFFFFFFF2DE8 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  386/FFFFFFFFFFFF2DEC : E14A                		lsl.w	#8,d2
(2)  387/FFFFFFFFFFFF2DEE : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  388/FFFFFFFFFFFF2DF0 : D47C 2302           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  389/FFFFFFFFFFFF2DF4 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  390/FFFFFFFFFFFF2DF8 : 6000 E4BC           		bra	Video_MakeSprMap_DMA
(2)  391/FFFFFFFFFFFF2DFC :                     
(2)  392/FFFFFFFFFFFF2DFC :                     ; ----------------------------------------------
(2)  393/FFFFFFFFFFFF2DFC :                     
(2)  394/FFFFFFFFFFFF2DFC :                     .anim_data:
(2)  395/FFFFFFFFFFFF2DFC : 0008                		dc.w .anim_down-.anim_data
(2)  396/FFFFFFFFFFFF2DFE : 0016                		dc.w .anim_up-.anim_data
(2)  397/FFFFFFFFFFFF2E00 : 0024                		dc.w .anim_right-.anim_data
(2)  398/FFFFFFFFFFFF2E02 : 0032                		dc.w .anim_left-.anim_data
(2)  399/FFFFFFFFFFFF2E04 :                     
(2)  400/FFFFFFFFFFFF2E04 :                     .anim_down:
(2)  401/FFFFFFFFFFFF2E04 : 0008                		dc.w 8
(2)  402/FFFFFFFFFFFF2E06 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2E0C : 0002             
(2)  403/FFFFFFFFFFFF2E0E : FFFE                		dc.w -2
(2)  404/FFFFFFFFFFFF2E10 :                     		align 2
(2)  405/FFFFFFFFFFFF2E12 :                     .anim_up:
(2)  406/FFFFFFFFFFFF2E12 : 0008                		dc.w 8
(2)  407/FFFFFFFFFFFF2E14 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E1A : 0005             
(2)  408/FFFFFFFFFFFF2E1C : FFFE                		dc.w -2
(2)  409/FFFFFFFFFFFF2E1E :                     		align 2
(2)  410/FFFFFFFFFFFF2E20 :                     .anim_right:
(2)  411/FFFFFFFFFFFF2E20 : 0008                		dc.w 8
(2)  412/FFFFFFFFFFFF2E22 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2E28 : 0008             
(2)  413/FFFFFFFFFFFF2E2A : FFFE                		dc.w -2
(2)  414/FFFFFFFFFFFF2E2C :                     		align 2
(2)  415/FFFFFFFFFFFF2E2E :                     .anim_left:
(2)  416/FFFFFFFFFFFF2E2E : 0008                		dc.w 8
(2)  417/FFFFFFFFFFFF2E30 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E36 : 000B             
(2)  418/FFFFFFFFFFFF2E38 : FFFE                		dc.w -2
(2)  419/FFFFFFFFFFFF2E3A :                     		align 2
(2)  420/FFFFFFFFFFFF2E3C :                     
(2)  421/FFFFFFFFFFFF2E3C :                     ; --------------------------------------------------
(2)  422/FFFFFFFFFFFF2E3C :                     ; Test object
(2)  423/FFFFFFFFFFFF2E3C :                     ; --------------------------------------------------
(2)  424/FFFFFFFFFFFF2E3C :                     
(2)  425/FFFFFFFFFFFF2E3C :                     obj_Ball:
(2)  426/FFFFFFFFFFFF2E3C : 7000                		moveq	#0,d0
(2)  427/FFFFFFFFFFFF2E3E : 102E 001C           		move.b	obj_index(a6),d0
(2)  428/FFFFFFFFFFFF2E42 : D040                		add.w	d0,d0
(2)  429/FFFFFFFFFFFF2E44 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  430/FFFFFFFFFFFF2E48 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  431/FFFFFFFFFFFF2E4C :                     ; ----------------------------------------------
(2)  432/FFFFFFFFFFFF2E4C : 0004                .list:		dc.w .init-.list
(2)  433/FFFFFFFFFFFF2E4E : 0072                		dc.w .main-.list
(2)  434/FFFFFFFFFFFF2E50 :                     ; ----------------------------------------------
(2)  435/FFFFFFFFFFFF2E50 :                     .init:
(2)  436/FFFFFFFFFFFF2E50 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  437/FFFFFFFFFFFF2E54 : 6100 F2C2           		bsr	object_ResetAnim	; Init/Reset animation
(2)  438/FFFFFFFFFFFF2E58 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  439/FFFFFFFFFFFF2E5E : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  440/FFFFFFFFFFFF2E64 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  441/FFFFFFFFFFFF2E6A : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  442/FFFFFFFFFFFF2E70 :                     
(2)  443/FFFFFFFFFFFF2E70 : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  444/FFFFFFFFFFFF2E76 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  445/FFFFFFFFFFFF2E7C : 303C 0049           		move.w	#$48+1,d0
(2)  446/FFFFFFFFFFFF2E80 : 6100 EE74           		bsr	System_DiceRoll
(2)  447/FFFFFFFFFFFF2E84 : E348                		lsl.w	#1,d0
(2)  448/FFFFFFFFFFFF2E86 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  449/FFFFFFFFFFFF2E8A : D16E 0008           		add.w	d0,obj_y(a6)
(2)  450/FFFFFFFFFFFF2E8E : E748                		lsl.w	#3,d0
(2)  451/FFFFFFFFFFFF2E90 : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  452/FFFFFFFFFFFF2E94 : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  453/FFFFFFFFFFFF2E98 :                     
(2)  454/FFFFFFFFFFFF2E98 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  455/FFFFFFFFFFFF2E9E : 6100 EDFC           		bsr	System_Random
(2)  456/FFFFFFFFFFFF2EA2 : 2E38 F5E0           		move.l	(RAM_SysRandom).w,d7
(2)  457/FFFFFFFFFFFF2EA6 : E24F                		lsr.w	#1,d7
(2)  458/FFFFFFFFFFFF2EA8 : 640A                		bcc.s	.x_random
(2)  459/FFFFFFFFFFFF2EAA : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  460/FFFFFFFFFFFF2EAE : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  461/FFFFFFFFFFFF2EB4 :                     .x_random:
(2)  462/FFFFFFFFFFFF2EB4 : E24F                		lsr.w	#1,d7
(2)  463/FFFFFFFFFFFF2EB6 : 6404                		bcc.s	.y_random
(2)  464/FFFFFFFFFFFF2EB8 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  465/FFFFFFFFFFFF2EBC :                     .y_random:
(2)  466/FFFFFFFFFFFF2EBC : 4E75                		rts
(2)  467/FFFFFFFFFFFF2EBE :                     
(2)  468/FFFFFFFFFFFF2EBE :                     ; ----------------------------------------------
(2)  469/FFFFFFFFFFFF2EBE :                     .main:
(2)  470/FFFFFFFFFFFF2EBE : 3438 E45A           		move.w	(RAM_VdpRegSetC).w,d2
(2)  471/FFFFFFFFFFFF2EC2 : 0802 0002           		btst	#2,d2
(2)  472/FFFFFFFFFFFF2EC6 : 660E                		bne.s	.y_fix
(2)  473/FFFFFFFFFFFF2EC8 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  474/FFFFFFFFFFFF2ECE : 6D06                		blt.s	.y_fix
(2)  475/FFFFFFFFFFFF2ED0 : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  476/FFFFFFFFFFFF2ED6 :                     .y_fix:
(2)  477/FFFFFFFFFFFF2ED6 :                     
(2)  478/FFFFFFFFFFFF2ED6 : 323C 00E0           		move.w	#224,d1
(2)  479/FFFFFFFFFFFF2EDA : 3438 E45A           		move.w	(RAM_VdpRegSetC).w,d2
(2)  480/FFFFFFFFFFFF2EDE : 0802 0002           		btst	#2,d2
(2)  481/FFFFFFFFFFFF2EE2 : 6702                		beq.s	.y_double
(2)  482/FFFFFFFFFFFF2EE4 : D241                		add.w	d1,d1
(2)  483/FFFFFFFFFFFF2EE6 :                     .y_double:
(2)  484/FFFFFFFFFFFF2EE6 : 303C 0100           		move.w	#256,d0
(2)  485/FFFFFFFFFFFF2EEA : 342E 0004           		move.w	obj_x(a6),d2
(2)  486/FFFFFFFFFFFF2EEE : 4A42                		tst.w	d2
(2)  487/FFFFFFFFFFFF2EF0 : 6A0A                		bpl.s	.x_back
(2)  488/FFFFFFFFFFFF2EF2 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  489/FFFFFFFFFFFF2EF6 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  490/FFFFFFFFFFFF2EFC :                     .x_back:
(2)  491/FFFFFFFFFFFF2EFC : B440                		cmp.w	d0,d2
(2)  492/FFFFFFFFFFFF2EFE : 6D0A                		blt.s	.x_foward
(2)  493/FFFFFFFFFFFF2F00 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  494/FFFFFFFFFFFF2F04 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  495/FFFFFFFFFFFF2F0A :                     .x_foward:
(2)  496/FFFFFFFFFFFF2F0A : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  497/FFFFFFFFFFFF2F0E :                     
(2)  498/FFFFFFFFFFFF2F0E : 342E 0008           		move.w	obj_y(a6),d2
(2)  499/FFFFFFFFFFFF2F12 : 4A42                		tst.w	d2
(2)  500/FFFFFFFFFFFF2F14 : 6A04                		bpl.s	.y_back
(2)  501/FFFFFFFFFFFF2F16 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  502/FFFFFFFFFFFF2F1A :                     .y_back:
(2)  503/FFFFFFFFFFFF2F1A : B441                		cmp.w	d1,d2
(2)  504/FFFFFFFFFFFF2F1C : 6D04                		blt.s	.y_foward
(2)  505/FFFFFFFFFFFF2F1E : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  506/FFFFFFFFFFFF2F22 :                     .y_foward:
(2)  507/FFFFFFFFFFFF2F22 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  508/FFFFFFFFFFFF2F26 :                     
(2)  509/FFFFFFFFFFFF2F26 : 6100 F1F8           		bsr	object_Speed
(2)  510/FFFFFFFFFFFF2F2A :                     
(2)  511/FFFFFFFFFFFF2F2A :                     ; ----------------------------------------------
(2)  512/FFFFFFFFFFFF2F2A :                     ; Show the object...
(2)  513/FFFFFFFFFFFF2F2A :                     
(2)  514/FFFFFFFFFFFF2F2A : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  515/FFFFFFFFFFFF2F2E : 6100 F220           		bsr	object_Animate
(2)  516/FFFFFFFFFFFF2F32 : 43F9 FFFF 3218      		lea	(Map_Sisi),a1
(2)  517/FFFFFFFFFFFF2F38 : 7400                		moveq	#0,d2
(2)  518/FFFFFFFFFFFF2F3A : 302E 0004           		move.w	obj_x(a6),d0
(2)  519/FFFFFFFFFFFF2F3E : 322E 0008           		move.w	obj_y(a6),d1
(2)  520/FFFFFFFFFFFF2F42 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  521/FFFFFFFFFFFF2F46 : E14A                		lsl.w	#8,d2
(2)  522/FFFFFFFFFFFF2F48 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  523/FFFFFFFFFFFF2F4A : D47C 4326           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  524/FFFFFFFFFFFF2F4E : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  525/FFFFFFFFFFFF2F52 : 6000 E37A           		bra	Video_MakeSprMap
(2)  526/FFFFFFFFFFFF2F56 :                     
(2)  527/FFFFFFFFFFFF2F56 :                     ; ----------------------------------------------
(2)  528/FFFFFFFFFFFF2F56 :                     
(2)  529/FFFFFFFFFFFF2F56 :                     .anim_data:
(2)  530/FFFFFFFFFFFF2F56 : 0002                		dc.w .maind-.anim_data
(2)  531/FFFFFFFFFFFF2F58 :                     .maind:
(2)  532/FFFFFFFFFFFF2F58 : 0008                		dc.w 8
(2)  533/FFFFFFFFFFFF2F5A : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F60 : 0001             
(2)  534/FFFFFFFFFFFF2F62 : FFFE                		dc.w -2
(2)  535/FFFFFFFFFFFF2F64 :                     		align 2
(2)  536/FFFFFFFFFFFF2F66 :                     
(2)  537/FFFFFFFFFFFF2F66 :                     ; ====================================================================
(2)  538/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  539/FFFFFFFFFFFF2F66 :                     ; Subroutines
(2)  540/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  541/FFFFFFFFFFFF2F66 :                     
(2)  542/FFFFFFFFFFFF2F66 :                     ; ====================================================================
(2)  543/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  544/FFFFFFFFFFFF2F66 :                     ; Custom VBlank
(2)  545/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  546/FFFFFFFFFFFF2F66 :                     
(2)  547/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  548/FFFFFFFFFFFF2F66 :                     ; Custom HBlank
(2)  549/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  550/FFFFFFFFFFFF2F66 :                     
(2)  551/FFFFFFFFFFFF2F66 :                     ; ====================================================================
(2)  552/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  553/FFFFFFFFFFFF2F66 :                     ; Includes for this screen
(2)  554/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  555/FFFFFFFFFFFF2F66 :                     
(2)  556/FFFFFFFFFFFF2F66 :                     ; ====================================================================
(2)  557/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  558/FFFFFFFFFFFF2F66 :                     ; Small data section
(2)  559/FFFFFFFFFFFF2F66 :                     ; ------------------------------------------------------
(2)  560/FFFFFFFFFFFF2F66 :                     
(2)  574/FFFFFFFFFFFF2F66 :                     
(2)  575/FFFFFFFFFFFF2F66 :                     str_NewCountr0:
(2)  576/FFFFFFFFFFFF2F66 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  577/FFFFFFFFFFFF2F6A : 00                  		dc.b 0
(2)  578/FFFFFFFFFFFF2F6B :                     		align 2
(2)  579/FFFFFFFFFFFF2F6C :                     
(2)  580/FFFFFFFFFFFF2F6C :                     str_MidemeEsta:
(2)  581/FFFFFFFFFFFF2F6C : 306F 316F 326F      		dc.b "0o1o2o3o4o5o6o7o8o9oAoBoCoDoEoFo",$0A
         FFFFFFFFFFFF2F72 : 336F 346F 356F 
         FFFFFFFFFFFF2F78 : 366F 376F 386F 
         FFFFFFFFFFFF2F7E : 396F 416F 426F 
         FFFFFFFFFFFF2F84 : 436F 446F 456F 
         FFFFFFFFFFFF2F8A : 466F 0A          
(2)  582/FFFFFFFFFFFF2F8D : 00                  		dc.b 0
(2)  583/FFFFFFFFFFFF2F8E :                     		align 2
(2)  584/FFFFFFFFFFFF2F90 :                     
(2)  585/FFFFFFFFFFFF2F90 :                     ; ----------------------------------------------------------------
(2)  586/FFFFFFFFFFFF2F90 :                     ; Everything else...
(2)  587/FFFFFFFFFFFF2F90 :                     ; ----------------------------------------------------------------
(2)  588/FFFFFFFFFFFF2F90 :                     
(2)  589/FFFFFFFFFFFF2F90 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  590/FFFFFFFFFFFF2FB0 :                     		align 2
(2)  591/FFFFFFFFFFFF2FB2 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  592/FFFFFFFFFFFF3162 :                     		align 2
(2)  593/FFFFFFFFFFFF3164 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  594/FFFFFFFFFFFF31F4 :                     		align 2
(2)  595/FFFFFFFFFFFF31F6 :                     
(2)  596/FFFFFFFFFFFF31F6 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)  597/FFFFFFFFFFFF3216 :                     		align 2
(2)  598/FFFFFFFFFFFF3218 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)  599/FFFFFFFFFFFF325C :                     		align 2
(2)  600/FFFFFFFFFFFF325E :                     
(2)  601/FFFFFFFFFFFF325E :                     Pal_StampTest:
(2)  602/FFFFFFFFFFFF325E :                     		binclude "game/data/mcd/stamps/test/pal.bin"
(2)  603/FFFFFFFFFFFF327E :                     		align 2
(2)  604/FFFFFFFFFFFF3280 :                     
(2)  605/FFFFFFFFFFFF3280 :                     ; ----------------------------------------------------------------
(2)  606/FFFFFFFFFFFF3280 :                     
(2)  607/FFFFFFFFFFFF3280 :                     MapStamp_Test:
(2)  608/FFFFFFFFFFFF3280 :                     		binclude "game/data/mcd/stamps/test/map.bin"
(2)  609/FFFFFFFFFFFF3400 :                     		align 2
(2)  610/FFFFFFFFFFFF3402 :                     
(2)  611/FFFFFFFFFFFF3402 :                     ; ====================================================================
(2)  612/FFFFFFFFFFFF3402 :                     ; ------------------------------------------------------
(2)  613/FFFFFFFFFFFF3402 :                     ; Sound bank
(2)  614/FFFFFFFFFFFF3402 :                     ; ------------------------------------------------------
(2)  615/FFFFFFFFFFFF3402 :                     
(2)  649/FFFFFFFFFFFF3402 :                     
(2)  650/FFFFFFFFFFFF3402 :                     ; ====================================================================
(2)  651/FFFFFFFFFFFF3402 :                     ; ------------------------------------------------------
(2)  652/FFFFFFFFFFFF3402 :                     ; Stamp cell temporal storage
(2)  653/FFFFFFFFFFFF3402 :                     ; ------------------------------------------------------
(2)  654/FFFFFFFFFFFF3402 :                     
(2)  655/FFFFFFFFFFFF3402 :                     		align 2
(2)  656/FFFFFFFFFFFF3404 :                     SC2_OutCells:
(2)  657/FFFFFFFFFFFF3404 :                     		ds.b DEF_MaxStampCOut*$20	; <-- auto-label
(2)  658/FFFFFFFFFFFF4004 :                     
(1)   17/FFFFFFFFFFFF4004 :                     mcscrn_e:
(1)   17/   3CD50 :                                     dephase ; dephase RAM section
(1)   17/   3CD50 :                                     dephase ; dephase $880000+ section
(1)   17/   3CD50 :                     ; Md_Screen00_e:
(1)   17/   3CD50 : =$3CD50              MD_SCREEN02_E label *
(1)   17/   3CD50 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN02",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   18/   3CD50 : (MACRO)              	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/  8BCD50 :                                     phase $880000+*         ; 32X ROM-area
(1)   18/  8BCD50 :                                     align 4
(1)   18/  8BCD50 : =$8BCD50             MD_SCREEN03 label *
(1)   18/   3CD50 :                                     dephase
(1)   18/   3CD50 :                     
(1)   18/   3CD50 :                     mctopscrn:
(1)   18/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   18/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   18/FFFFFFFFFFFF2C00 :                             include "game/code/screen_3.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   3CD50 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Haruna		ds.b $24
(2)   22/      25 :                     vramLoc_Sisi		ds.b $10
(2)   23/      35 :  (MACRO-2)           			endmemory
(2)   23/   3CD84 :                     .here:          dephase
(2)   23/   3CD84 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   24/FFFFFFFFFFFF2C00 :                     
(2)   25/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   28/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   29/FFFFFFFFFFFF2C00 :                     
(2)   30/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   30/   3CD50 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_ThisSpeed		ds.w 1
(2)   32/FFFFFFFFFFFFB802 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   33/   3CD58 :                     .here:          dephase
(2)   33/   3CD58 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/FFFFFFFFFFFF2C00 :                     
(2)   36/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   37/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   38/FFFFFFFFFFFF2C00 :                     ; Init
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   42/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   43/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   44/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   46/FFFFFFFFFFFF2C08 : 41FA 0186           		lea	file_scrn3_mars(pc),a0			; Load DATA BANK for 32X stuff
(2)   47/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 41F9 0097 74AA      		lea	(PalMars_Test+color_indx(1)),a0
(2)   49/FFFFFFFFFFFF2C16 : 7001                		moveq	#1,d0
(2)   50/FFFFFFFFFFFF2C18 : 323C 00C0           		move.w	#192,d1
(2)   51/FFFFFFFFFFFF2C1C : 7400                		moveq	#0,d2
(2)   52/FFFFFFFFFFFF2C1E : 6100 EBA8           		bsr	Video_MdMars_FadePal
(2)   53/FFFFFFFFFFFF2C22 : 41F9 0097 7A28      		lea	(PalMars_Haruna),a0
(2)   54/FFFFFFFFFFFF2C28 : 303C 00C0           		move.w	#192,d0
(2)   55/FFFFFFFFFFFF2C2C : 7210                		moveq	#16,d1
(2)   56/FFFFFFFFFFFF2C2E : 7400                		moveq	#0,d2
(2)   57/FFFFFFFFFFFF2C30 : 6100 EB96           		bsr	Video_MdMars_FadePal
(2)   58/FFFFFFFFFFFF2C34 : 41F9 0097 7A48      		lea	(PalMars_Sisi),a0
(2)   59/FFFFFFFFFFFF2C3A : 303C 00D0           		move.w	#208,d0
(2)   60/FFFFFFFFFFFF2C3E : 7210                		moveq	#16,d1
(2)   61/FFFFFFFFFFFF2C40 : 7400                		moveq	#0,d2
(2)   62/FFFFFFFFFFFF2C42 : 6100 EB84           		bsr	Video_MdMars_FadePal
(2)   63/FFFFFFFFFFFF2C46 : 41F9 0097 7D68      		lea	(ArtMars_Test2D),a0
(2)   64/FFFFFFFFFFFF2C4C : 227C 0000 0000      		move.l	#0,a1
(2)   65/FFFFFFFFFFFF2C52 : 203C 0001 7200      		move.l	#ArtMars_Test2D_e-ArtMars_Test2D,d0
(2)   66/FFFFFFFFFFFF2C58 : 6100 E82E           		bsr	Video_MdMars_LoadVram
(2)   67/FFFFFFFFFFFF2C5C : 41F9 0097 7628      		lea	(MapMars_Test),a0
(2)   68/FFFFFFFFFFFF2C62 : 227C 0000 0000      		move.l	#ArtMars_TestArt,a1
(2)   69/FFFFFFFFFFFF2C68 : 7000                		moveq	#0,d0
(2)   70/FFFFFFFFFFFF2C6A : 7200                		moveq	#0,d1
(2)   71/FFFFFFFFFFFF2C6C : 343C 0020           		move.w	#512/16,d2
(2)   72/FFFFFFFFFFFF2C70 : 363C 0010           		move.w	#256/16,d3
(2)   73/FFFFFFFFFFFF2C74 : 7800                		moveq	#0,d4
(2)   74/FFFFFFFFFFFF2C76 : 6100 E83A           		bsr	Video_MdMars_LoadMap
(2)   75/FFFFFFFFFFFF2C7A : 7001                		moveq	#1,d0					; 32X 3D mode
(2)   76/FFFFFFFFFFFF2C7C : 6100 E7BC           		bsr	Video_MdMars_VideoMode
(2)   78/FFFFFFFFFFFF2C80 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C80 : 41FA 00FC           		lea	file_scrn3_main(pc),a0			; Load MAIN DATA bank
(2)   80/FFFFFFFFFFFF2C84 : 6100 F3B8           		bsr	System_SetDataBank
(2)   81/FFFFFFFFFFFF2C88 : 6100 EF04           		bsr	System_SramInit
(2)   82/FFFFFFFFFFFF2C8C : 52B8 E460           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   83/FFFFFFFFFFFF2C90 : 6100 EF3A           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   84/FFFFFFFFFFFF2C94 :                     	; ----------------------------------------------
(2)   85/FFFFFFFFFFFF2C94 :                     	; Load PRINT
(2)   86/FFFFFFFFFFFF2C94 : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   87/FFFFFFFFFFFF2C9A : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   88/FFFFFFFFFFFF2C9E : 6100 E294           		bsr	Video_PrintInit
(2)   89/FFFFFFFFFFFF2CA2 : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   90/FFFFFFFFFFFF2CA8 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   91/FFFFFFFFFFFF2CAC : 6100 E276           		bsr	Video_PrintInitW
(2)   92/FFFFFFFFFFFF2CB0 : 6100 E296           		bsr	Video_PrintDefPal_Fade
(2)   93/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)   94/FFFFFFFFFFFF2CB4 : 203C FFFF 2DA2      		move.l	#obj_Player,d0
(2)   95/FFFFFFFFFFFF2CBA : 6100 F3F2           		bsr	Object_Make				; Make MD object
(2)   96/FFFFFFFFFFFF2CBE : 41F9 FFFF 2FFC      		lea	(objPal_Haruna),a0
(2)   97/FFFFFFFFFFFF2CC4 : 7010                		moveq	#16,d0					; d0 - Start at color index 16
(2)   98/FFFFFFFFFFFF2CC6 : 7210                		moveq	#16,d1					; d1 - Numof colors 16
(2)   99/FFFFFFFFFFFF2CC8 : 6100 E1E4           		bsr	Video_FadePal
(2)  100/FFFFFFFFFFFF2CCC :                     ; 		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  101/FFFFFFFFFFFF2CCC :                     ; 		moveq	#1,d0					; X/Y positions 1,1
(2)  102/FFFFFFFFFFFF2CCC :                     ; 		moveq	#1,d1
(2)  103/FFFFFFFFFFFF2CCC :                     ; 		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  104/FFFFFFFFFFFF2CCC :                     ; 		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  105/FFFFFFFFFFFF2CCC :                     ; 		bsr	Video_PrintW				; <-- Print BIG text
(2)  106/FFFFFFFFFFFF2CCC : 41F9 0097 59C6      		lea	(Pal_Sisi+color_indx(1)),a0
(2)  107/FFFFFFFFFFFF2CD2 : 7001                		moveq	#1,d0
(2)  108/FFFFFFFFFFFF2CD4 : 720F                		moveq	#15,d1
(2)  109/FFFFFFFFFFFF2CD6 : 6100 E1D6           		bsr	Video_FadePal
(2)  110/FFFFFFFFFFFF2CDA : 203C 0007 51E4      		move.l	#Art_Sisi,d0
(2)  111/FFFFFFFFFFFF2CE0 : 323C 04A0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)  112/FFFFFFFFFFFF2CE4 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)  113/FFFFFFFFFFFF2CE8 : 6100 DB60           		bsr	Video_LoadArt
(2)  114/FFFFFFFFFFFF2CEC :                     	; ----------------------------------------------
(2)  115/FFFFFFFFFFFF2CEC : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  116/FFFFFFFFFFFF2CF2 : 6176                		bsr	.show_counter				; Draw counter
(2)  117/FFFFFFFFFFFF2CF4 : 6100 D9C0           		bsr	Video_DisplayOn
(2)  118/FFFFFFFFFFFF2CF8 :                     	; ----------------------------------------------
(2)  119/FFFFFFFFFFFF2CF8 : 6100 F382           		bsr	Object_Run
(2)  120/FFFFFFFFFFFF2CFC : 6100 E116           		bsr	Video_FadeIn_Full
(2)  121/FFFFFFFFFFFF2D00 :                     
(2)  122/FFFFFFFFFFFF2D00 :                     ; ====================================================================
(2)  123/FFFFFFFFFFFF2D00 :                     ; ------------------------------------------------------
(2)  124/FFFFFFFFFFFF2D00 :                     ; Loop
(2)  125/FFFFFFFFFFFF2D00 :                     ; ------------------------------------------------------
(2)  126/FFFFFFFFFFFF2D00 :                     
(2)  127/FFFFFFFFFFFF2D00 :                     .loop:
(2)  128/FFFFFFFFFFFF2D00 : 6100 F37A           		bsr	Object_Run
(2)  129/FFFFFFFFFFFF2D04 : 6100 D74C           		bsr	Video_BuildSprites
(2)  130/FFFFFFFFFFFF2D08 : 6100 EBC0           		bsr	System_Render
(2)  131/FFFFFFFFFFFF2D0C :                     
(2)  132/FFFFFFFFFFFF2D0C : 615C                		bsr	.show_counter
(2)  133/FFFFFFFFFFFF2D0E : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  134/FFFFFFFFFFFF2D12 : 0247 0010           		andi.w	#JoyB,d7
(2)  135/FFFFFFFFFFFF2D16 : 6714                		beq	.b_update
(2)  136/FFFFFFFFFFFF2D18 : 0678 0001 B800      		add.w	#1,(RAM_ThisSpeed).w
(2)  137/FFFFFFFFFFFF2D1E : 0C78 0010 B800      		cmp.w	#$10,(RAM_ThisSpeed).w
(2)  138/FFFFFFFFFFFF2D24 : 6606                		bne.s	.b_update
(2)  139/FFFFFFFFFFFF2D26 : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  140/FFFFFFFFFFFF2D2C :                     .b_update:
(2)  141/FFFFFFFFFFFF2D2C : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  142/FFFFFFFFFFFF2D30 : 0247 0020           		andi.w	#JoyC,d7
(2)  143/FFFFFFFFFFFF2D34 : 670A                		beq.s	.not_b
(2)  144/FFFFFFFFFFFF2D36 : 203C FFFF 2EB6      		move.l	#obj_Ball,d0
(2)  145/FFFFFFFFFFFF2D3C : 6100 F370           		bsr	Object_Make
(2)  146/FFFFFFFFFFFF2D40 :                     .not_b:
(2)  147/FFFFFFFFFFFF2D40 :                     
(2)  148/FFFFFFFFFFFF2D40 :                     ; 	if MARS|MARSCD
(2)  149/FFFFFFFFFFFF2D40 :                     ; 		move.w	(Controller_1+on_press).w,d7
(2)  150/FFFFFFFFFFFF2D40 :                     ; 		andi.w	#JoyA,d7
(2)  151/FFFFFFFFFFFF2D40 :                     ; 		beq.s	.not_a
(2)  152/FFFFFFFFFFFF2D40 :                     ; 		moveq	#1,d0					; 32X 3D mode
(2)  153/FFFFFFFFFFFF2D40 :                     ; 		bsr	Video_MdMars_VideoMode
(2)  154/FFFFFFFFFFFF2D40 :                     ; .not_a:
(2)  155/FFFFFFFFFFFF2D40 :                     ; 	endif
(2)  156/FFFFFFFFFFFF2D40 :                     
(2)  157/FFFFFFFFFFFF2D40 :                     	; Check START button
(2)  158/FFFFFFFFFFFF2D40 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  159/FFFFFFFFFFFF2D44 : 0247 0080           		andi.w	#JoyStart,d7
(2)  160/FFFFFFFFFFFF2D48 : 67B6                		beq	.loop
(2)  161/FFFFFFFFFFFF2D4A : 6100 E0EA           		bsr	Video_FadeOut_Full
(2)  162/FFFFFFFFFFFF2D4E :                     	; Stop ALL sequences
(2)  163/FFFFFFFFFFFF2D4E : 6100 D4B6           		bsr	gemaStopAll
(2)  164/FFFFFFFFFFFF2D52 :                     	rept 4
(2)  165/FFFFFFFFFFFF2D52 :                     		bsr	System_Render		; Wait 4 frames...
(2)  166/FFFFFFFFFFFF2D52 :                     	endm
(2)  165/FFFFFFFFFFFF2D52 : 6100 EB76           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D56 : 6100 EB72           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D5A : 6100 EB6E           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D5E : 6100 EB6A           		bsr	System_Render		; Wait 4 frames...
(2)  167/FFFFFFFFFFFF2D62 : 31FC 0000 F5F8      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  168/FFFFFFFFFFFF2D68 : 4E75                		rts				; <-- RTS
(2)  169/FFFFFFFFFFFF2D6A :                     
(2)  170/FFFFFFFFFFFF2D6A :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2D6A :                     ; Show framecounter and input
(2)  172/FFFFFFFFFFFF2D6A :                     ; ------------------------------------------------------
(2)  173/FFFFFFFFFFFF2D6A :                     
(2)  174/FFFFFFFFFFFF2D6A :                     .show_counter:
(2)  175/FFFFFFFFFFFF2D6A : 41FA 025C           		lea	str_NewCountr0(pc),a0
(2)  176/FFFFFFFFFFFF2D6E : 7001                		moveq	#1,d0
(2)  177/FFFFFFFFFFFF2D70 : 7218                		moveq	#24,d1
(2)  178/FFFFFFFFFFFF2D72 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  179/FFFFFFFFFFFF2D76 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  180/FFFFFFFFFFFF2D7A : 6000 E1EA           		bra	Video_Print
(2)  181/FFFFFFFFFFFF2D7E :                     
(2)  182/FFFFFFFFFFFF2D7E :                     ; ====================================================================
(2)  183/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D7E :                     ; DATA asset locations
(2)  185/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D7E :                     
(2)  187/FFFFFFFFFFFF2D7E :                     file_scrn3_main:
(2)  188/FFFFFFFFFFFF2D7E : 0003 E052           		dc.l DATA_BANK0
(2)  189/FFFFFFFFFFFF2D82 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D88 : 494E 2E42 494E 00 
(2)  190/FFFFFFFFFFFF2D8F :                     		align 2
(2)  191/FFFFFFFFFFFF2D90 :                     file_scrn3_mars:
(2)  192/FFFFFFFFFFFF2D90 : 0007 74A8           		dc.l DATA_BANK1
(2)  193/FFFFFFFFFFFF2D94 : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2D9A : 5253 2E42 494E 00 
(2)  194/FFFFFFFFFFFF2DA1 :                     		align 2
(2)  195/FFFFFFFFFFFF2DA2 :                     
(2)  196/FFFFFFFFFFFF2DA2 :                     ; ====================================================================
(2)  197/FFFFFFFFFFFF2DA2 :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2DA2 :                     ; Objects
(2)  199/FFFFFFFFFFFF2DA2 :                     ; ------------------------------------------------------
(2)  200/FFFFFFFFFFFF2DA2 :                     
(2)  201/FFFFFFFFFFFF2DA2 :                     ; --------------------------------------------------
(2)  202/FFFFFFFFFFFF2DA2 :                     ; Test object
(2)  203/FFFFFFFFFFFF2DA2 :                     ; --------------------------------------------------
(2)  204/FFFFFFFFFFFF2DA2 :                     
(2)  205/FFFFFFFFFFFF2DA2 :                     obj_Player:
(2)  206/FFFFFFFFFFFF2DA2 : 7000                		moveq	#0,d0
(2)  207/FFFFFFFFFFFF2DA4 : 102E 001C           		move.b	obj_index(a6),d0
(2)  208/FFFFFFFFFFFF2DA8 : D040                		add.w	d0,d0
(2)  209/FFFFFFFFFFFF2DAA : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  210/FFFFFFFFFFFF2DAE : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  211/FFFFFFFFFFFF2DB2 :                     ; ----------------------------------------------
(2)  212/FFFFFFFFFFFF2DB2 : 0004                .list:		dc.w .init-.list
(2)  213/FFFFFFFFFFFF2DB4 : 0030                		dc.w .main-.list
(2)  214/FFFFFFFFFFFF2DB6 :                     ; ----------------------------------------------
(2)  215/FFFFFFFFFFFF2DB6 :                     .init:
(2)  216/FFFFFFFFFFFF2DB6 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  217/FFFFFFFFFFFF2DBA : 6100 F35C           		bsr	object_ResetAnim	; Init/Reset animation
(2)  218/FFFFFFFFFFFF2DBE : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  219/FFFFFFFFFFFF2DC4 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  220/FFFFFFFFFFFF2DCA : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  221/FFFFFFFFFFFF2DD0 :                     
(2)  222/FFFFFFFFFFFF2DD0 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  223/FFFFFFFFFFFF2DD6 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  224/FFFFFFFFFFFF2DDC : 08EE 0000 001F      		bset	#0,obj_attr(a6)		; Set X flip
(2)  225/FFFFFFFFFFFF2DE2 :                     
(2)  226/FFFFFFFFFFFF2DE2 :                     ; ----------------------------------------------
(2)  227/FFFFFFFFFFFF2DE2 :                     .main:
(2)  228/FFFFFFFFFFFF2DE2 : 41F8 E55C           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  229/FFFFFFFFFFFF2DE6 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  230/FFFFFFFFFFFF2DEA : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  231/FFFFFFFFFFFF2DEC : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  232/FFFFFFFFFFFF2DEE : 7400                		moveq	#0,d2
(2)  233/FFFFFFFFFFFF2DF0 : 7600                		moveq	#0,d3
(2)  234/FFFFFFFFFFFF2DF2 :                     
(2)  235/FFFFFFFFFFFF2DF2 :                     
(2)  236/FFFFFFFFFFFF2DF2 : 0807 0003           		btst	#bitJoyRight,d7
(2)  237/FFFFFFFFFFFF2DF6 : 6708                		beq.s	.not_right
(2)  238/FFFFFFFFFFFF2DF8 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  239/FFFFFFFFFFFF2DFC :                     
(2)  240/FFFFFFFFFFFF2DFC : 7402                		moveq	#2,d2
(2)  241/FFFFFFFFFFFF2DFE : 5243                		addq.w	#1,d3
(2)  242/FFFFFFFFFFFF2E00 :                     .not_right:
(2)  243/FFFFFFFFFFFF2E00 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  244/FFFFFFFFFFFF2E04 : 670A                		beq.s	.not_left
(2)  245/FFFFFFFFFFFF2E06 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  246/FFFFFFFFFFFF2E0A : 4440                		neg.w	d0
(2)  247/FFFFFFFFFFFF2E0C :                     ; 		moveq	#-1,d0			; X left
(2)  248/FFFFFFFFFFFF2E0C :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  249/FFFFFFFFFFFF2E0C : 7403                		moveq	#3,d2
(2)  250/FFFFFFFFFFFF2E0E : 5243                		addq.w	#1,d3
(2)  251/FFFFFFFFFFFF2E10 :                     .not_left:
(2)  252/FFFFFFFFFFFF2E10 : 0807 0001           		btst	#bitJoyDown,d7
(2)  253/FFFFFFFFFFFF2E14 : 6708                		beq.s	.not_down
(2)  254/FFFFFFFFFFFF2E16 : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  255/FFFFFFFFFFFF2E1A : 7400                		moveq	#0,d2
(2)  256/FFFFFFFFFFFF2E1C : 5243                		addq.w	#1,d3
(2)  257/FFFFFFFFFFFF2E1E :                     .not_down:
(2)  258/FFFFFFFFFFFF2E1E : 0807 0000           		btst	#bitJoyUp,d7
(2)  259/FFFFFFFFFFFF2E22 : 670A                		beq.s	.not_up
(2)  260/FFFFFFFFFFFF2E24 : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  261/FFFFFFFFFFFF2E28 : 4441                		neg.w	d1
(2)  262/FFFFFFFFFFFF2E2A :                     ; 		moveq	#-1,d1			; Y up
(2)  263/FFFFFFFFFFFF2E2A : 7401                		moveq	#1,d2
(2)  264/FFFFFFFFFFFF2E2C : 5243                		addq.w	#1,d3
(2)  265/FFFFFFFFFFFF2E2E :                     .not_up:
(2)  267/FFFFFFFFFFFF2E2E : 41F8 CC42           		lea	(RAM_MdMars_ScrlSett).w,a0
(2)  268/FFFFFFFFFFFF2E32 : D150                		add.w	d0,sscrl_x_pos(a0)
(2)  269/FFFFFFFFFFFF2E34 : D368 0004           		add.w	d1,sscrl_y_pos(a0)
(2)  270/FFFFFFFFFFFF2E38 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  271/FFFFFFFFFFFF2E38 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  272/FFFFFFFFFFFF2E38 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  273/FFFFFFFFFFFF2E38 :                     ; 		add.w	d0,obj_x(a6)
(2)  274/FFFFFFFFFFFF2E38 :                     ; 		add.w	d1,obj_z(a6)
(2)  275/FFFFFFFFFFFF2E38 :                     ; 	else
(2)  276/FFFFFFFFFFFF2E38 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  277/FFFFFFFFFFFF2E38 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  278/FFFFFFFFFFFF2E38 :                     ; 		add.w	d0,obj_x(a6)
(2)  279/FFFFFFFFFFFF2E38 :                     ; 		add.w	d1,obj_y(a6)
(2)  281/FFFFFFFFFFFF2E38 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  282/FFFFFFFFFFFF2E3C :                     
(2)  283/FFFFFFFFFFFF2E3C :                     ; ----------------------------------------------
(2)  284/FFFFFFFFFFFF2E3C :                     ; Show the object...
(2)  285/FFFFFFFFFFFF2E3C :                     
(2)  286/FFFFFFFFFFFF2E3C : 4A43                		tst.w	d3
(2)  287/FFFFFFFFFFFF2E3E : 6708                		beq.s	.no_anim
(2)  288/FFFFFFFFFFFF2E40 : 41FA 0034           		lea	.anim_data(pc),a0	; Do animation
(2)  289/FFFFFFFFFFFF2E44 : 6100 F30A           		bsr	object_Animate
(2)  290/FFFFFFFFFFFF2E48 :                     .no_anim:
(2)  292/FFFFFFFFFFFF2E48 : 207C 0000 0000      		move.l	#0,a0
(2)  293/FFFFFFFFFFFF2E4E : 43F9 0001 0900      		lea	(Textr_Haruna),a1		; a0 - Texture location
(2)  294/FFFFFFFFFFFF2E54 : 7000                		moveq	#0,d0
(2)  295/FFFFFFFFFFFF2E56 : 303C 0014           		move.w	#40/2,d0
(2)  296/FFFFFFFFFFFF2E5A : 4840                		swap	d0
(2)  297/FFFFFFFFFFFF2E5C : 303C 001C           		move.w	#56/2,d0
(2)  298/FFFFFFFFFFFF2E60 : 7200                		moveq	#%00,d1
(2)  299/FFFFFFFFFFFF2E62 : 6100 F474           		bsr	object_MdMars_GetSprInfo
(2)  300/FFFFFFFFFFFF2E66 : 243C 0028 0038      		move.l	#splitw(40,56),d2		; Size Width / Height
(2)  301/FFFFFFFFFFFF2E6C : 263C 0028 00C0      		move.l	#splitw(40,192),d3		; Texture width / Index
(2)  302/FFFFFFFFFFFF2E72 : 6000 E69E           		bra	Video_MdMars_SetSpr2D
(2)  306/FFFFFFFFFFFF2E76 :                     
(2)  307/FFFFFFFFFFFF2E76 :                     ; ----------------------------------------------
(2)  308/FFFFFFFFFFFF2E76 :                     
(2)  309/FFFFFFFFFFFF2E76 :                     .anim_data:
(2)  310/FFFFFFFFFFFF2E76 : 0008                		dc.w .anim_down-.anim_data
(2)  311/FFFFFFFFFFFF2E78 : 0016                		dc.w .anim_up-.anim_data
(2)  312/FFFFFFFFFFFF2E7A : 0024                		dc.w .anim_right-.anim_data
(2)  313/FFFFFFFFFFFF2E7C : 0032                		dc.w .anim_left-.anim_data
(2)  314/FFFFFFFFFFFF2E7E :                     
(2)  315/FFFFFFFFFFFF2E7E :                     .anim_down:
(2)  316/FFFFFFFFFFFF2E7E : 0008                		dc.w 8
(2)  317/FFFFFFFFFFFF2E80 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2E86 : 0002             
(2)  318/FFFFFFFFFFFF2E88 : FFFE                		dc.w -2
(2)  319/FFFFFFFFFFFF2E8A :                     		align 2
(2)  320/FFFFFFFFFFFF2E8C :                     .anim_up:
(2)  321/FFFFFFFFFFFF2E8C : 0008                		dc.w 8
(2)  322/FFFFFFFFFFFF2E8E : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E94 : 0005             
(2)  323/FFFFFFFFFFFF2E96 : FFFE                		dc.w -2
(2)  324/FFFFFFFFFFFF2E98 :                     		align 2
(2)  325/FFFFFFFFFFFF2E9A :                     .anim_right:
(2)  326/FFFFFFFFFFFF2E9A : 0008                		dc.w 8
(2)  327/FFFFFFFFFFFF2E9C : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2EA2 : 0008             
(2)  328/FFFFFFFFFFFF2EA4 : FFFE                		dc.w -2
(2)  329/FFFFFFFFFFFF2EA6 :                     		align 2
(2)  330/FFFFFFFFFFFF2EA8 :                     .anim_left:
(2)  331/FFFFFFFFFFFF2EA8 : 0008                		dc.w 8
(2)  332/FFFFFFFFFFFF2EAA : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2EB0 : 000B             
(2)  333/FFFFFFFFFFFF2EB2 : FFFE                		dc.w -2
(2)  334/FFFFFFFFFFFF2EB4 :                     		align 2
(2)  335/FFFFFFFFFFFF2EB6 :                     
(2)  336/FFFFFFFFFFFF2EB6 :                     ; --------------------------------------------------
(2)  337/FFFFFFFFFFFF2EB6 :                     ; Test object
(2)  338/FFFFFFFFFFFF2EB6 :                     ; --------------------------------------------------
(2)  339/FFFFFFFFFFFF2EB6 :                     
(2)  340/FFFFFFFFFFFF2EB6 :                     obj_Ball:
(2)  341/FFFFFFFFFFFF2EB6 : 7000                		moveq	#0,d0
(2)  342/FFFFFFFFFFFF2EB8 : 102E 001C           		move.b	obj_index(a6),d0
(2)  343/FFFFFFFFFFFF2EBC : D040                		add.w	d0,d0
(2)  344/FFFFFFFFFFFF2EBE : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  345/FFFFFFFFFFFF2EC2 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  346/FFFFFFFFFFFF2EC6 :                     ; ----------------------------------------------
(2)  347/FFFFFFFFFFFF2EC6 : 0004                .list:		dc.w .init-.list
(2)  348/FFFFFFFFFFFF2EC8 : 0072                		dc.w .main-.list
(2)  349/FFFFFFFFFFFF2ECA :                     ; ----------------------------------------------
(2)  350/FFFFFFFFFFFF2ECA :                     .init:
(2)  351/FFFFFFFFFFFF2ECA : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  352/FFFFFFFFFFFF2ECE : 6100 F248           		bsr	object_ResetAnim	; Init/Reset animation
(2)  353/FFFFFFFFFFFF2ED2 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  354/FFFFFFFFFFFF2ED8 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  355/FFFFFFFFFFFF2EDE : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  356/FFFFFFFFFFFF2EE4 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  357/FFFFFFFFFFFF2EEA :                     
(2)  358/FFFFFFFFFFFF2EEA : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  359/FFFFFFFFFFFF2EF0 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  360/FFFFFFFFFFFF2EF6 : 303C 0049           		move.w	#$48+1,d0
(2)  361/FFFFFFFFFFFF2EFA : 6100 EDFA           		bsr	System_DiceRoll
(2)  362/FFFFFFFFFFFF2EFE : E348                		lsl.w	#1,d0
(2)  363/FFFFFFFFFFFF2F00 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  364/FFFFFFFFFFFF2F04 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  365/FFFFFFFFFFFF2F08 : E748                		lsl.w	#3,d0
(2)  366/FFFFFFFFFFFF2F0A : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  367/FFFFFFFFFFFF2F0E : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  368/FFFFFFFFFFFF2F12 :                     
(2)  369/FFFFFFFFFFFF2F12 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  370/FFFFFFFFFFFF2F18 : 6100 ED82           		bsr	System_Random
(2)  371/FFFFFFFFFFFF2F1C : 2E38 F5E0           		move.l	(RAM_SysRandom).w,d7
(2)  372/FFFFFFFFFFFF2F20 : E24F                		lsr.w	#1,d7
(2)  373/FFFFFFFFFFFF2F22 : 640A                		bcc.s	.x_random
(2)  374/FFFFFFFFFFFF2F24 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  375/FFFFFFFFFFFF2F28 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  376/FFFFFFFFFFFF2F2E :                     .x_random:
(2)  377/FFFFFFFFFFFF2F2E : E24F                		lsr.w	#1,d7
(2)  378/FFFFFFFFFFFF2F30 : 6404                		bcc.s	.y_random
(2)  379/FFFFFFFFFFFF2F32 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  380/FFFFFFFFFFFF2F36 :                     .y_random:
(2)  381/FFFFFFFFFFFF2F36 : 4E75                		rts
(2)  382/FFFFFFFFFFFF2F38 :                     
(2)  383/FFFFFFFFFFFF2F38 :                     ; ----------------------------------------------
(2)  384/FFFFFFFFFFFF2F38 :                     .main:
(2)  385/FFFFFFFFFFFF2F38 : 323C 00E0           		move.w	#224,d1
(2)  386/FFFFFFFFFFFF2F3C : 303C 0140           		move.w	#320,d0
(2)  387/FFFFFFFFFFFF2F40 : 342E 0004           		move.w	obj_x(a6),d2
(2)  388/FFFFFFFFFFFF2F44 : 4A42                		tst.w	d2
(2)  389/FFFFFFFFFFFF2F46 : 6A0A                		bpl.s	.x_back
(2)  390/FFFFFFFFFFFF2F48 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  391/FFFFFFFFFFFF2F4C : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  392/FFFFFFFFFFFF2F52 :                     .x_back:
(2)  393/FFFFFFFFFFFF2F52 : B440                		cmp.w	d0,d2
(2)  394/FFFFFFFFFFFF2F54 : 6D0A                		blt.s	.x_foward
(2)  395/FFFFFFFFFFFF2F56 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  396/FFFFFFFFFFFF2F5A : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  397/FFFFFFFFFFFF2F60 :                     .x_foward:
(2)  398/FFFFFFFFFFFF2F60 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  399/FFFFFFFFFFFF2F64 :                     
(2)  400/FFFFFFFFFFFF2F64 : 342E 0008           		move.w	obj_y(a6),d2
(2)  401/FFFFFFFFFFFF2F68 : 4A42                		tst.w	d2
(2)  402/FFFFFFFFFFFF2F6A : 6A04                		bpl.s	.y_back
(2)  403/FFFFFFFFFFFF2F6C : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  404/FFFFFFFFFFFF2F70 :                     .y_back:
(2)  405/FFFFFFFFFFFF2F70 : B441                		cmp.w	d1,d2
(2)  406/FFFFFFFFFFFF2F72 : 6D04                		blt.s	.y_foward
(2)  407/FFFFFFFFFFFF2F74 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  408/FFFFFFFFFFFF2F78 :                     .y_foward:
(2)  409/FFFFFFFFFFFF2F78 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  410/FFFFFFFFFFFF2F7C :                     
(2)  411/FFFFFFFFFFFF2F7C : 6100 F1A2           		bsr	object_Speed
(2)  412/FFFFFFFFFFFF2F80 :                     
(2)  413/FFFFFFFFFFFF2F80 :                     ; ----------------------------------------------
(2)  414/FFFFFFFFFFFF2F80 :                     ; Show the object...
(2)  415/FFFFFFFFFFFF2F80 : 41FA 0036           		lea	.anim_data(pc),a0	; Do animation
(2)  416/FFFFFFFFFFFF2F84 : 6100 F1CA           		bsr	object_Animate
(2)  417/FFFFFFFFFFFF2F88 :                     
(2)  419/FFFFFFFFFFFF2F88 : 207C 0000 0000      		move.l	#0,a0
(2)  420/FFFFFFFFFFFF2F8E : 43F9 0000 FD00      		lea	(ArtMars_Sisi),a1		; a0 - Texture location
(2)  421/FFFFFFFFFFFF2F94 : 7000                		moveq	#0,d0
(2)  422/FFFFFFFFFFFF2F96 : 303C 0010           		move.w	#32/2,d0
(2)  423/FFFFFFFFFFFF2F9A : 4840                		swap	d0
(2)  424/FFFFFFFFFFFF2F9C : 303C 0018           		move.w	#48/2,d0
(2)  425/FFFFFFFFFFFF2FA0 : 122E 001F           		move.b	obj_attr(a6),d1
(2)  426/FFFFFFFFFFFF2FA4 : 6100 F332           		bsr	object_MdMars_GetSprInfo
(2)  427/FFFFFFFFFFFF2FA8 : 243C 0020 0020      		move.l	#splitw(32,32),d2		; Size Width / Height
(2)  428/FFFFFFFFFFFF2FAE : 263C 0020 00D0      		move.l	#splitw(32,192+16),d3		; Texture width / Index
(2)  429/FFFFFFFFFFFF2FB4 : 6000 E566           		bra	Video_MdMars_MakeSpr2D
(2)  442/FFFFFFFFFFFF2FB8 :                     
(2)  443/FFFFFFFFFFFF2FB8 :                     ; ----------------------------------------------
(2)  444/FFFFFFFFFFFF2FB8 :                     
(2)  445/FFFFFFFFFFFF2FB8 :                     .anim_data:
(2)  446/FFFFFFFFFFFF2FB8 : 0002                		dc.w .maind-.anim_data
(2)  447/FFFFFFFFFFFF2FBA :                     .maind:
(2)  448/FFFFFFFFFFFF2FBA : 0008                		dc.w 8
(2)  449/FFFFFFFFFFFF2FBC : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2FC2 : 0001             
(2)  450/FFFFFFFFFFFF2FC4 : FFFE                		dc.w -2
(2)  451/FFFFFFFFFFFF2FC6 :                     		align 2
(2)  452/FFFFFFFFFFFF2FC8 :                     
(2)  453/FFFFFFFFFFFF2FC8 :                     ; ====================================================================
(2)  454/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  455/FFFFFFFFFFFF2FC8 :                     ; Subroutines
(2)  456/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  457/FFFFFFFFFFFF2FC8 :                     
(2)  458/FFFFFFFFFFFF2FC8 :                     ; ====================================================================
(2)  459/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  460/FFFFFFFFFFFF2FC8 :                     ; Includes for this screen
(2)  461/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  462/FFFFFFFFFFFF2FC8 :                     
(2)  463/FFFFFFFFFFFF2FC8 :                     ; ====================================================================
(2)  464/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  465/FFFFFFFFFFFF2FC8 :                     ; Custom VBlank
(2)  466/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  467/FFFFFFFFFFFF2FC8 :                     
(2)  468/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  469/FFFFFFFFFFFF2FC8 :                     ; Custom HBlank
(2)  470/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  471/FFFFFFFFFFFF2FC8 :                     
(2)  472/FFFFFFFFFFFF2FC8 :                     ; ====================================================================
(2)  473/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  474/FFFFFFFFFFFF2FC8 :                     ; Small data section
(2)  475/FFFFFFFFFFFF2FC8 :                     ; ------------------------------------------------------
(2)  476/FFFFFFFFFFFF2FC8 :                     
(2)  477/FFFFFFFFFFFF2FC8 :                     ; str_NikonaTest:
(2)  478/FFFFFFFFFFFF2FC8 :                     ; 		dc.b "32X 2D test"
(2)  479/FFFFFFFFFFFF2FC8 :                     ; 		dc.b 0
(2)  480/FFFFFFFFFFFF2FC8 :                     ; 		align 2
(2)  481/FFFFFFFFFFFF2FC8 :                     str_NewCountr0:
(2)  483/FFFFFFFFFFFF2FC8 : 81FF CC42           		dc.l pstr_mem(1,RAM_MdMars_ScrlSett+sscrl_x_pos)
(2)  484/FFFFFFFFFFFF2FCC : 20                  		dc.b " "
(2)  485/FFFFFFFFFFFF2FCD : 81FF CC46           		dc.l pstr_mem(1,RAM_MdMars_ScrlSett+sscrl_y_pos)
(2)  486/FFFFFFFFFFFF2FD1 : 0A0A                		dc.b $0A,$0A
(2)  488/FFFFFFFFFFFF2FD3 : 81FF B800           		dc.l pstr_mem(1,RAM_ThisSpeed)
(2)  489/FFFFFFFFFFFF2FD7 : 20                  		dc.b " "
(2)  490/FFFFFFFFFFFF2FD8 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  491/FFFFFFFFFFFF2FDC : 00                  		dc.b 0
(2)  492/FFFFFFFFFFFF2FDD :                     		align 2
(2)  493/FFFFFFFFFFFF2FDE :                     
(2)  494/FFFFFFFFFFFF2FDE :                     str_InputMe:
(2)  496/FFFFFFFFFFFF2FDE : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  497/FFFFFFFFFFFF2FE2 : 20                  		dc.b " "
(2)  498/FFFFFFFFFFFF2FE3 : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  499/FFFFFFFFFFFF2FE7 : 20                  		dc.b " "
(2)  500/FFFFFFFFFFFF2FE8 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  504/FFFFFFFFFFFF2FEC : 00                  		dc.b 0
(2)  505/FFFFFFFFFFFF2FED :                     		align 2
(2)  506/FFFFFFFFFFFF2FEE :                     
(2)  507/FFFFFFFFFFFF2FEE :                     Pal_TestStamp:
(2)  508/FFFFFFFFFFFF2FEE : 0000                		dc.w 0
(2)  509/FFFFFFFFFFFF2FF0 :                     ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  510/FFFFFFFFFFFF2FF0 :                     		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  511/FFFFFFFFFFFF2FFA :                     		align 2
(2)  512/FFFFFFFFFFFF2FFC :                     
(2)  513/FFFFFFFFFFFF2FFC :                     ; Object data:
(2)  514/FFFFFFFFFFFF2FFC :                     objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  515/FFFFFFFFFFFF301C :                     		align 2
(2)  516/FFFFFFFFFFFF301E :                     objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  517/FFFFFFFFFFFF31CE :                     		align 2
(2)  518/FFFFFFFFFFFF31D0 :                     objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  519/FFFFFFFFFFFF3260 :                     		align 2
(2)  520/FFFFFFFFFFFF3262 :                     
(2)  521/FFFFFFFFFFFF3262 :                     ; ====================================================================
(2)  522/FFFFFFFFFFFF3262 :                     
(1)   18/FFFFFFFFFFFF3262 :                     mcscrn_e:
(1)   18/   3D3B2 :                                     dephase ; dephase RAM section
(1)   18/   3D3B2 :                                     dephase ; dephase $880000+ section
(1)   18/   3D3B2 :                     ; Md_Screen00_e:
(1)   18/   3D3B2 : =$3D3B2              MD_SCREEN03_E label *
(1)   18/   3D3B2 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN03",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   19/   3D3B2 : (MACRO)              	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/  8BD3B2 :                                     phase $880000+*         ; 32X ROM-area
(1)   19/  8BD3B2 :                                     align 4
(1)   19/  8BD3B4 : =$8BD3B4             MD_SCREEN04 label *
(1)   19/   3D3B4 :                                     dephase
(1)   19/   3D3B4 :                     
(1)   19/   3D3B4 :                     mctopscrn:
(1)   19/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   19/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   19/FFFFFFFFFFFF2C00 :                             include "game/code/screen_4.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   3D3B4 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Backgrnd	ds.b $32A
(2)   22/     32B :                     vramLoc_Haruna		ds.b $12A
(2)   23/     455 :                     vramLoc_Haruna2		ds.b $12A
(2)   24/     57F :  (MACRO-2)           			endmemory
(2)   24/   3D932 :                     .here:          dephase
(2)   24/   3D932 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   3D3B4 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestTouch		ds.l 1
(2)   33/FFFFFFFFFFFFB804 :                     RAM_Camera_Xpos		ds.l 1
(2)   34/FFFFFFFFFFFFB808 :                     RAM_Camera_Zpos		ds.l 1
(2)   35/FFFFFFFFFFFFB80C :                     RAM_Camera_Rot		ds.w 1
(2)   36/FFFFFFFFFFFFB80E :                     RAM_Camera_TRot		ds.w 1
(2)   37/FFFFFFFFFFFFB810 :                     RAM_Camera_TRotD	ds.w 1
(2)   38/FFFFFFFFFFFFB812 :                     RAM_ModelPick		ds.w 1
(2)   39/FFFFFFFFFFFFB814 :                     .sizeof_this		ds.l 0
(2)   40/FFFFFFFFFFFFB818 :  (MACRO-2)           			endmemory
(2)   40/   3D3CC :                     .here:          dephase
(2)   40/   3D3CC :                                     ds.b -(.here-GLBL_LASTORG)
(2)   40/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   41/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     ; Init
(2)   46/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   47/FFFFFFFFFFFF2C00 :                     
(2)   48/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   49/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   50/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   51/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   53/FFFFFFFFFFFF2C08 : 41FA 016E           		lea	file_scrn4_mars(pc),a0			; Load DATA BANK for 32X stuff
(2)   54/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   55/FFFFFFFFFFFF2C10 : 41F9 0097 74AA      		lea	(PalMars_Test+color_indx(1)),a0
(2)   56/FFFFFFFFFFFF2C16 : 7001                		moveq	#1,d0
(2)   57/FFFFFFFFFFFF2C18 : 323C 00C0           		move.w	#192,d1
(2)   58/FFFFFFFFFFFF2C1C : 7400                		moveq	#0,d2
(2)   59/FFFFFFFFFFFF2C1E : 6100 EBA8           		bsr	Video_MdMars_FadePal
(2)   60/FFFFFFFFFFFF2C22 : 41F9 0097 7A28      		lea	(PalMars_Haruna),a0
(2)   61/FFFFFFFFFFFF2C28 : 303C 00C0           		move.w	#192,d0
(2)   62/FFFFFFFFFFFF2C2C : 7210                		moveq	#16,d1
(2)   63/FFFFFFFFFFFF2C2E : 7400                		moveq	#0,d2
(2)   64/FFFFFFFFFFFF2C30 : 6100 EB96           		bsr	Video_MdMars_FadePal
(2)   65/FFFFFFFFFFFF2C34 : 41F9 0097 7A48      		lea	(PalMars_Sisi),a0
(2)   66/FFFFFFFFFFFF2C3A : 303C 00D0           		move.w	#208,d0
(2)   67/FFFFFFFFFFFF2C3E : 7210                		moveq	#16,d1
(2)   68/FFFFFFFFFFFF2C40 : 7400                		moveq	#0,d2
(2)   69/FFFFFFFFFFFF2C42 : 6100 EB84           		bsr	Video_MdMars_FadePal
(2)   70/FFFFFFFFFFFF2C46 : 41F9 0097 7D68      		lea	(ArtMars_Test2D),a0
(2)   71/FFFFFFFFFFFF2C4C : 227C 0000 0000      		move.l	#0,a1
(2)   72/FFFFFFFFFFFF2C52 : 203C 0001 7200      		move.l	#ArtMars_Test2D_e-ArtMars_Test2D,d0
(2)   73/FFFFFFFFFFFF2C58 : 6100 E82E           		bsr	Video_MdMars_LoadVram
(2)   74/FFFFFFFFFFFF2C5C : 41F8 D062           		lea	(RAM_MdMars_Models).w,a0
(2)   75/FFFFFFFFFFFF2C60 : 6100 00E2           		bsr	.pick_model
(2)   76/FFFFFFFFFFFF2C64 : 6100 02EE           		bsr	Camera_Update
(2)   77/FFFFFFFFFFFF2C68 : 7002                		moveq	#2,d0					; 32X 3D mode
(2)   78/FFFFFFFFFFFF2C6A : 6100 E7CE           		bsr	Video_MdMars_VideoMode
(2)   80/FFFFFFFFFFFF2C6E :                     	; ----------------------------------------------
(2)   81/FFFFFFFFFFFF2C6E : 41FA 00F6           		lea	file_scrn4_main(pc),a0			; Load MAIN DATA bank
(2)   82/FFFFFFFFFFFF2C72 : 6100 F3CA           		bsr	System_SetDataBank
(2)   83/FFFFFFFFFFFF2C76 : 6100 EF16           		bsr	System_SramInit
(2)   84/FFFFFFFFFFFF2C7A : 52B8 E460           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   85/FFFFFFFFFFFF2C7E : 6100 EF4C           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   86/FFFFFFFFFFFF2C82 :                     	; ----------------------------------------------
(2)   87/FFFFFFFFFFFF2C82 :                     	; Load PRINT
(2)   88/FFFFFFFFFFFF2C82 : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   89/FFFFFFFFFFFF2C88 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   90/FFFFFFFFFFFF2C8C : 6100 E2A6           		bsr	Video_PrintInit
(2)   91/FFFFFFFFFFFF2C90 : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   92/FFFFFFFFFFFF2C96 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   93/FFFFFFFFFFFF2C9A : 6100 E288           		bsr	Video_PrintInitW
(2)   94/FFFFFFFFFFFF2C9E : 6100 E2A8           		bsr	Video_PrintDefPal_Fade
(2)   95/FFFFFFFFFFFF2CA2 :                     	; ----------------------------------------------
(2)   96/FFFFFFFFFFFF2CA2 : 203C FFFF 2D8A      		move.l	#obj_Player,d0
(2)   97/FFFFFFFFFFFF2CA8 : 6100 F404           		bsr	Object_Make				; Make MD object
(2)   98/FFFFFFFFFFFF2CAC :                     	; ----------------------------------------------
(2)   99/FFFFFFFFFFFF2CAC : 6100 0082           		bsr	.show_counter				; Draw counter
(2)  100/FFFFFFFFFFFF2CB0 : 6100 DA04           		bsr	Video_DisplayOn
(2)  101/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)  102/FFFFFFFFFFFF2CB4 : 6100 F3C6           		bsr	Object_Run
(2)  103/FFFFFFFFFFFF2CB8 : 6100 E15A           		bsr	Video_FadeIn_Full
(2)  104/FFFFFFFFFFFF2CBC :                     
(2)  105/FFFFFFFFFFFF2CBC :                     ; ====================================================================
(2)  106/FFFFFFFFFFFF2CBC :                     ; ------------------------------------------------------
(2)  107/FFFFFFFFFFFF2CBC :                     ; Loop
(2)  108/FFFFFFFFFFFF2CBC :                     ; ------------------------------------------------------
(2)  109/FFFFFFFFFFFF2CBC :                     
(2)  110/FFFFFFFFFFFF2CBC :                     .loop:
(2)  111/FFFFFFFFFFFF2CBC : 6100 F3BE           		bsr	Object_Run
(2)  112/FFFFFFFFFFFF2CC0 : 6100 D790           		bsr	Video_BuildSprites
(2)  113/FFFFFFFFFFFF2CC4 : 6100 EC04           		bsr	System_Render
(2)  114/FFFFFFFFFFFF2CC8 :                     
(2)  115/FFFFFFFFFFFF2CC8 : 6166                		bsr	.show_counter
(2)  117/FFFFFFFFFFFF2CCA : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  118/FFFFFFFFFFFF2CCE : 0247 0020           		andi.w	#JoyC,d7
(2)  119/FFFFFFFFFFFF2CD2 : 670A                		beq.s	.not_b
(2)  120/FFFFFFFFFFFF2CD4 : 203C FFFF 2EA0      		move.l	#obj_Ball,d0
(2)  121/FFFFFFFFFFFF2CDA : 6100 F3D2           		bsr	Object_Make
(2)  122/FFFFFFFFFFFF2CDE :                     .not_b:
(2)  123/FFFFFFFFFFFF2CDE : 3E38 E55E           		move.w	(Controller_1+on_hold).w,d7
(2)  124/FFFFFFFFFFFF2CE2 : 0247 0040           		andi.w	#JoyA,d7
(2)  125/FFFFFFFFFFFF2CE6 : 670A                		beq	.no_rot_l
(2)  126/FFFFFFFFFFFF2CE8 : 0478 0001 B80C      		sub.w	#1,(RAM_Camera_Rot).w
(2)  127/FFFFFFFFFFFF2CEE : 6100 0264           		bsr	Camera_Update
(2)  128/FFFFFFFFFFFF2CF2 :                     .no_rot_l:
(2)  129/FFFFFFFFFFFF2CF2 : 3E38 E55E           		move.w	(Controller_1+on_hold).w,d7
(2)  130/FFFFFFFFFFFF2CF6 : 0247 0010           		andi.w	#JoyB,d7
(2)  131/FFFFFFFFFFFF2CFA : 670A                		beq	.no_rot_r
(2)  132/FFFFFFFFFFFF2CFC : 0678 0001 B80C      		add.w	#1,(RAM_Camera_Rot).w
(2)  133/FFFFFFFFFFFF2D02 : 6100 0250           		bsr	Camera_Update
(2)  134/FFFFFFFFFFFF2D06 :                     .no_rot_r:
(2)  136/FFFFFFFFFFFF2D06 :                     
(2)  137/FFFFFFFFFFFF2D06 :                     	; Check START button
(2)  138/FFFFFFFFFFFF2D06 : 3E38 E560           		move.w	(Controller_1+on_press).w,d7
(2)  139/FFFFFFFFFFFF2D0A : 0247 0080           		andi.w	#JoyStart,d7
(2)  140/FFFFFFFFFFFF2D0E : 67AC                		beq	.loop
(2)  141/FFFFFFFFFFFF2D10 : 6100 E124           		bsr	Video_FadeOut_Full
(2)  142/FFFFFFFFFFFF2D14 :                     
(2)  143/FFFFFFFFFFFF2D14 :                     	; Stop ALL sequences
(2)  144/FFFFFFFFFFFF2D14 : 6100 D4F0           		bsr	gemaStopAll
(2)  145/FFFFFFFFFFFF2D18 :                     	rept 4
(2)  146/FFFFFFFFFFFF2D18 :                     		bsr	System_Render		; Wait 4 frames...
(2)  147/FFFFFFFFFFFF2D18 :                     	endm
(2)  146/FFFFFFFFFFFF2D18 : 6100 EBB0           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D1C : 6100 EBAC           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D20 : 6100 EBA8           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D24 : 6100 EBA4           		bsr	System_Render		; Wait 4 frames...
(2)  148/FFFFFFFFFFFF2D28 : 31FC 0000 F5F8      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  149/FFFFFFFFFFFF2D2E : 4E75                		rts				; <-- RTS
(2)  150/FFFFFFFFFFFF2D30 :                     
(2)  151/FFFFFFFFFFFF2D30 :                     ; ------------------------------------------------------
(2)  152/FFFFFFFFFFFF2D30 :                     ; Show framecounter and input
(2)  153/FFFFFFFFFFFF2D30 :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2D30 :                     
(2)  155/FFFFFFFFFFFF2D30 :                     .show_counter:
(2)  156/FFFFFFFFFFFF2D30 :                     ; 		lea	str_InputMe(pc),a0
(2)  157/FFFFFFFFFFFF2D30 :                     ; 		moveq	#1,d0
(2)  158/FFFFFFFFFFFF2D30 :                     ; 		moveq	#4,d1
(2)  159/FFFFFFFFFFFF2D30 :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  160/FFFFFFFFFFFF2D30 :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  161/FFFFFFFFFFFF2D30 :                     ; 		bsr	Video_Print
(2)  162/FFFFFFFFFFFF2D30 :                     
(2)  163/FFFFFFFFFFFF2D30 : 41FA 0274           		lea	str_NewCountr0(pc),a0
(2)  164/FFFFFFFFFFFF2D34 : 7001                		moveq	#1,d0
(2)  165/FFFFFFFFFFFF2D36 : 7201                		moveq	#1,d1
(2)  166/FFFFFFFFFFFF2D38 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  167/FFFFFFFFFFFF2D3C : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  168/FFFFFFFFFFFF2D40 : 6000 E224           		bra	Video_Print
(2)  169/FFFFFFFFFFFF2D44 :                     
(2)  170/FFFFFFFFFFFF2D44 :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2D44 :                     
(2)  172/FFFFFFFFFFFF2D44 :                     .pick_model:
(2)  174/FFFFFFFFFFFF2D44 : 3038 B812           		move.w	(RAM_ModelPick).w,d0
(2)  175/FFFFFFFFFFFF2D48 : E548                		lsl.w	#2,d0
(2)  176/FFFFFFFFFFFF2D4A : 41F8 D062           		lea	(RAM_MdMars_Models).w,a0
(2)  177/FFFFFFFFFFFF2D4E : 217B 000E 0004      		move.l	.mdl_list(pc,d0.w),mmdl_data(a0)
(2)  178/FFFFFFFFFFFF2D54 : 217C 0000 000C      		move.l	#12,mmdl_y_pos(a0)
         FFFFFFFFFFFF2D5A : 000C             
(2)  179/FFFFFFFFFFFF2D5C : 4E75                		rts
(2)  180/FFFFFFFFFFFF2D5E :                     .mdl_list:
(2)  181/FFFFFFFFFFFF2D5E : 0603 5288           		dc.l MarsObj_test
(2)  182/FFFFFFFFFFFF2D62 : 0603 65A4           		dc.l MarsObj_test_2
(2)  186/FFFFFFFFFFFF2D66 :                     
(2)  187/FFFFFFFFFFFF2D66 :                     ; ====================================================================
(2)  188/FFFFFFFFFFFF2D66 :                     ; ------------------------------------------------------
(2)  189/FFFFFFFFFFFF2D66 :                     ; DATA asset locations
(2)  190/FFFFFFFFFFFF2D66 :                     ; ------------------------------------------------------
(2)  191/FFFFFFFFFFFF2D66 :                     
(2)  192/FFFFFFFFFFFF2D66 :                     file_scrn4_main:
(2)  193/FFFFFFFFFFFF2D66 : 0003 E052           		dc.l DATA_BANK0
(2)  194/FFFFFFFFFFFF2D6A : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D70 : 494E 2E42 494E 00 
(2)  195/FFFFFFFFFFFF2D77 :                     		align 2
(2)  196/FFFFFFFFFFFF2D78 :                     file_scrn4_mars:
(2)  197/FFFFFFFFFFFF2D78 : 0007 74A8           		dc.l DATA_BANK1
(2)  198/FFFFFFFFFFFF2D7C : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2D82 : 5253 2E42 494E 00 
(2)  199/FFFFFFFFFFFF2D89 :                     		align 2
(2)  200/FFFFFFFFFFFF2D8A :                     
(2)  201/FFFFFFFFFFFF2D8A :                     ; ====================================================================
(2)  202/FFFFFFFFFFFF2D8A :                     ; ------------------------------------------------------
(2)  203/FFFFFFFFFFFF2D8A :                     ; Objects
(2)  204/FFFFFFFFFFFF2D8A :                     ; ------------------------------------------------------
(2)  205/FFFFFFFFFFFF2D8A :                     
(2)  206/FFFFFFFFFFFF2D8A :                     ; --------------------------------------------------
(2)  207/FFFFFFFFFFFF2D8A :                     ; Test object
(2)  208/FFFFFFFFFFFF2D8A :                     ; --------------------------------------------------
(2)  209/FFFFFFFFFFFF2D8A :                     
(2)  210/FFFFFFFFFFFF2D8A :                     obj_Player:
(2)  211/FFFFFFFFFFFF2D8A : 7000                		moveq	#0,d0
(2)  212/FFFFFFFFFFFF2D8C : 102E 001C           		move.b	obj_index(a6),d0
(2)  213/FFFFFFFFFFFF2D90 : D040                		add.w	d0,d0
(2)  214/FFFFFFFFFFFF2D92 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  215/FFFFFFFFFFFF2D96 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  216/FFFFFFFFFFFF2D9A :                     ; ----------------------------------------------
(2)  217/FFFFFFFFFFFF2D9A : 0004                .list:		dc.w .init-.list
(2)  218/FFFFFFFFFFFF2D9C : 0030                		dc.w .main-.list
(2)  219/FFFFFFFFFFFF2D9E :                     ; ----------------------------------------------
(2)  220/FFFFFFFFFFFF2D9E :                     .init:
(2)  221/FFFFFFFFFFFF2D9E : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  222/FFFFFFFFFFFF2DA2 : 6100 F374           		bsr	object_ResetAnim	; Init/Reset animation
(2)  223/FFFFFFFFFFFF2DA6 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  224/FFFFFFFFFFFF2DAC : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  225/FFFFFFFFFFFF2DB2 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  226/FFFFFFFFFFFF2DB8 :                     
(2)  228/FFFFFFFFFFFF2DB8 : 3D7C 0000 0004      		move.w	#0,obj_x(a6)
(2)  229/FFFFFFFFFFFF2DBE : 3D7C 0000 0008      		move.w	#0,obj_y(a6)
(2)  230/FFFFFFFFFFFF2DC4 : 3D7C 0000 000C      		move.w	#0,obj_z(a6)
(2)  235/FFFFFFFFFFFF2DCA :                     
(2)  236/FFFFFFFFFFFF2DCA :                     ; ----------------------------------------------
(2)  237/FFFFFFFFFFFF2DCA :                     .main:
(2)  238/FFFFFFFFFFFF2DCA : 41F8 E55C           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  239/FFFFFFFFFFFF2DCE : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  240/FFFFFFFFFFFF2DD2 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  241/FFFFFFFFFFFF2DD4 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  242/FFFFFFFFFFFF2DD6 : 7400                		moveq	#0,d2
(2)  243/FFFFFFFFFFFF2DD8 : 7600                		moveq	#0,d3
(2)  244/FFFFFFFFFFFF2DDA : 0807 0003           		btst	#bitJoyRight,d7
(2)  245/FFFFFFFFFFFF2DDE : 6706                		beq.s	.not_right
(2)  246/FFFFFFFFFFFF2DE0 : 7001                		moveq	#1,d0			; X right
(2)  247/FFFFFFFFFFFF2DE2 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  248/FFFFFFFFFFFF2DE2 : 7402                		moveq	#2,d2
(2)  249/FFFFFFFFFFFF2DE4 : 5243                		addq.w	#1,d3
(2)  250/FFFFFFFFFFFF2DE6 :                     .not_right:
(2)  251/FFFFFFFFFFFF2DE6 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  252/FFFFFFFFFFFF2DEA : 6706                		beq.s	.not_left
(2)  253/FFFFFFFFFFFF2DEC : 70FF                		moveq	#-1,d0			; X left
(2)  254/FFFFFFFFFFFF2DEE :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  255/FFFFFFFFFFFF2DEE : 7403                		moveq	#3,d2
(2)  256/FFFFFFFFFFFF2DF0 : 5243                		addq.w	#1,d3
(2)  257/FFFFFFFFFFFF2DF2 :                     .not_left:
(2)  258/FFFFFFFFFFFF2DF2 : 0807 0001           		btst	#bitJoyDown,d7
(2)  259/FFFFFFFFFFFF2DF6 : 6706                		beq.s	.not_down
(2)  260/FFFFFFFFFFFF2DF8 : 7201                		moveq	#1,d1			; Y down
(2)  261/FFFFFFFFFFFF2DFA : 7400                		moveq	#0,d2
(2)  262/FFFFFFFFFFFF2DFC : 5243                		addq.w	#1,d3
(2)  263/FFFFFFFFFFFF2DFE :                     .not_down:
(2)  264/FFFFFFFFFFFF2DFE : 0807 0000           		btst	#bitJoyUp,d7
(2)  265/FFFFFFFFFFFF2E02 : 6706                		beq.s	.not_up
(2)  266/FFFFFFFFFFFF2E04 : 72FF                		moveq	#-1,d1			; Y up
(2)  267/FFFFFFFFFFFF2E06 : 7401                		moveq	#1,d2
(2)  268/FFFFFFFFFFFF2E08 : 5243                		addq.w	#1,d3
(2)  269/FFFFFFFFFFFF2E0A :                     .not_up:
(2)  271/FFFFFFFFFFFF2E0A : 41F8 CC42           		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  272/FFFFFFFFFFFF2E0E : D190                		add.l	d0,mcam_x_pos(a0)
(2)  273/FFFFFFFFFFFF2E10 : D3A8 0008           		add.l	d1,mcam_z_pos(a0)
(2)  274/FFFFFFFFFFFF2E14 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  275/FFFFFFFFFFFF2E18 : D36E 000C           		add.w	d1,obj_z(a6)
(2)  282/FFFFFFFFFFFF2E1C :                     
(2)  283/FFFFFFFFFFFF2E1C : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  284/FFFFFFFFFFFF2E20 :                     
(2)  285/FFFFFFFFFFFF2E20 :                     ; ----------------------------------------------
(2)  286/FFFFFFFFFFFF2E20 :                     ; Show the object...
(2)  287/FFFFFFFFFFFF2E20 :                     
(2)  288/FFFFFFFFFFFF2E20 : 4A43                		tst.w	d3
(2)  289/FFFFFFFFFFFF2E22 : 6708                		beq.s	.no_anim
(2)  290/FFFFFFFFFFFF2E24 : 41FA 003A           		lea	.anim_data(pc),a0	; Do animation
(2)  291/FFFFFFFFFFFF2E28 : 6100 F326           		bsr	object_Animate
(2)  292/FFFFFFFFFFFF2E2C :                     .no_anim:
(2)  293/FFFFFFFFFFFF2E2C : 42B8 B800           		clr.l	(RAM_TestTouch).w
(2)  294/FFFFFFFFFFFF2E30 : 6100 F3B2           		bsr	object_Touch
(2)  295/FFFFFFFFFFFF2E34 : 4A80                		tst.l	d0
(2)  296/FFFFFFFFFFFF2E36 : 6704                		beq.s	.lel
(2)  297/FFFFFFFFFFFF2E38 : 21C0 B800           		move.l	d0,(RAM_TestTouch).w
(2)  298/FFFFFFFFFFFF2E3C :                     .lel:
(2)  299/FFFFFFFFFFFF2E3C :                     
(2)  301/FFFFFFFFFFFF2E3C : 43F9 0001 0900      		lea	(Textr_Haruna),a1		; a0 - Texture location
(2)  302/FFFFFFFFFFFF2E42 : 7203                		moveq	#%11,d1
(2)  303/FFFFFFFFFFFF2E44 : 6100 F492           		bsr	object_MdMars_GetSprInfo
(2)  304/FFFFFFFFFFFF2E48 : 243C 0028 0038      		move.l	#splitw(40,56),d2		; Size Width / Height
(2)  305/FFFFFFFFFFFF2E4E : 263C 0028 00C0      		move.l	#splitw(40,192),d3		; Texture width / Index
(2)  306/FFFFFFFFFFFF2E54 :                     ; 		bra	Video_MdMars_MakeSpr3D
(2)  307/FFFFFFFFFFFF2E54 : 207C 0000 0000      		move.l	#0,a0
(2)  308/FFFFFFFFFFFF2E5A : 6000 E752           		bra	Video_MdMars_SetSpr3D
(2)  310/FFFFFFFFFFFF2E5E : 4E75                		rts
(2)  311/FFFFFFFFFFFF2E60 :                     
(2)  312/FFFFFFFFFFFF2E60 :                     ; ----------------------------------------------
(2)  313/FFFFFFFFFFFF2E60 :                     
(2)  314/FFFFFFFFFFFF2E60 :                     .anim_data:
(2)  315/FFFFFFFFFFFF2E60 : 0008                		dc.w .anim_down-.anim_data
(2)  316/FFFFFFFFFFFF2E62 : 0016                		dc.w .anim_up-.anim_data
(2)  317/FFFFFFFFFFFF2E64 : 0024                		dc.w .anim_right-.anim_data
(2)  318/FFFFFFFFFFFF2E66 : 0032                		dc.w .anim_left-.anim_data
(2)  319/FFFFFFFFFFFF2E68 :                     
(2)  320/FFFFFFFFFFFF2E68 :                     .anim_down:
(2)  321/FFFFFFFFFFFF2E68 : 0008                		dc.w 8
(2)  322/FFFFFFFFFFFF2E6A : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2E70 : 0002             
(2)  323/FFFFFFFFFFFF2E72 : FFFE                		dc.w -2
(2)  324/FFFFFFFFFFFF2E74 :                     		align 2
(2)  325/FFFFFFFFFFFF2E76 :                     .anim_up:
(2)  326/FFFFFFFFFFFF2E76 : 0008                		dc.w 8
(2)  327/FFFFFFFFFFFF2E78 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E7E : 0005             
(2)  328/FFFFFFFFFFFF2E80 : FFFE                		dc.w -2
(2)  329/FFFFFFFFFFFF2E82 :                     		align 2
(2)  330/FFFFFFFFFFFF2E84 :                     .anim_right:
(2)  331/FFFFFFFFFFFF2E84 : 0008                		dc.w 8
(2)  332/FFFFFFFFFFFF2E86 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2E8C : 0008             
(2)  333/FFFFFFFFFFFF2E8E : FFFE                		dc.w -2
(2)  334/FFFFFFFFFFFF2E90 :                     		align 2
(2)  335/FFFFFFFFFFFF2E92 :                     .anim_left:
(2)  336/FFFFFFFFFFFF2E92 : 0008                		dc.w 8
(2)  337/FFFFFFFFFFFF2E94 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E9A : 000B             
(2)  338/FFFFFFFFFFFF2E9C : FFFE                		dc.w -2
(2)  339/FFFFFFFFFFFF2E9E :                     		align 2
(2)  340/FFFFFFFFFFFF2EA0 :                     
(2)  341/FFFFFFFFFFFF2EA0 :                     ; --------------------------------------------------
(2)  342/FFFFFFFFFFFF2EA0 :                     ; Test object
(2)  343/FFFFFFFFFFFF2EA0 :                     ; --------------------------------------------------
(2)  344/FFFFFFFFFFFF2EA0 :                     
(2)  345/FFFFFFFFFFFF2EA0 :                     obj_Ball:
(2)  346/FFFFFFFFFFFF2EA0 : 7000                		moveq	#0,d0
(2)  347/FFFFFFFFFFFF2EA2 : 102E 001C           		move.b	obj_index(a6),d0
(2)  348/FFFFFFFFFFFF2EA6 : D040                		add.w	d0,d0
(2)  349/FFFFFFFFFFFF2EA8 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  350/FFFFFFFFFFFF2EAC : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  351/FFFFFFFFFFFF2EB0 :                     ; ----------------------------------------------
(2)  352/FFFFFFFFFFFF2EB0 : 0004                .list:		dc.w .init-.list
(2)  353/FFFFFFFFFFFF2EB2 : 0068                		dc.w .main-.list
(2)  354/FFFFFFFFFFFF2EB4 :                     ; ----------------------------------------------
(2)  355/FFFFFFFFFFFF2EB4 :                     .init:
(2)  356/FFFFFFFFFFFF2EB4 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  357/FFFFFFFFFFFF2EB8 : 6100 F25E           		bsr	object_ResetAnim	; Init/Reset animation
(2)  358/FFFFFFFFFFFF2EBC : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  359/FFFFFFFFFFFF2EC2 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  360/FFFFFFFFFFFF2EC8 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  361/FFFFFFFFFFFF2ECE : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  362/FFFFFFFFFFFF2ED4 :                     
(2)  363/FFFFFFFFFFFF2ED4 : 3D7C FF80 0004      		move.w	#-$80,obj_x(a6)	; Set Object's X/Y position
(2)  364/FFFFFFFFFFFF2EDA : 3D7C FF80 000C      		move.w	#-$80,obj_z(a6)
(2)  365/FFFFFFFFFFFF2EE0 : 303C 0101           		move.w	#$100+1,d0
(2)  366/FFFFFFFFFFFF2EE4 : 6100 EE10           		bsr	System_DiceRoll
(2)  367/FFFFFFFFFFFF2EE8 : 3800                		move.w	d0,d4
(2)  368/FFFFFFFFFFFF2EEA : 303C 0081           		move.w	#$80+1,d0
(2)  369/FFFFFFFFFFFF2EEE : 6100 EE06           		bsr	System_DiceRoll
(2)  370/FFFFFFFFFFFF2EF2 : E348                		lsl.w	#1,d0
(2)  371/FFFFFFFFFFFF2EF4 : E34C                		lsl.w	#1,d4
(2)  372/FFFFFFFFFFFF2EF6 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  373/FFFFFFFFFFFF2EFA : D96E 000C           		add.w	d4,obj_z(a6)
(2)  374/FFFFFFFFFFFF2EFE :                     
(2)  375/FFFFFFFFFFFF2EFE : 6100 ED9C           		bsr	System_Random
(2)  376/FFFFFFFFFFFF2F02 : 2E38 F5E0           		move.l	(RAM_SysRandom).w,d7
(2)  377/FFFFFFFFFFFF2F06 : E24F                		lsr.w	#1,d7
(2)  378/FFFFFFFFFFFF2F08 : 6504                		bcs.s	.x_random
(2)  379/FFFFFFFFFFFF2F0A : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  380/FFFFFFFFFFFF2F0E :                     .x_random:
(2)  381/FFFFFFFFFFFF2F0E : E24F                		lsr.w	#1,d7
(2)  382/FFFFFFFFFFFF2F10 : 6504                		bcs.s	.y_random
(2)  383/FFFFFFFFFFFF2F12 : 446E 001A           		neg.w	obj_z_spd(a6)
(2)  384/FFFFFFFFFFFF2F16 :                     .y_random:
(2)  385/FFFFFFFFFFFF2F16 : 4E75                		rts
(2)  386/FFFFFFFFFFFF2F18 :                     
(2)  387/FFFFFFFFFFFF2F18 :                     ; ----------------------------------------------
(2)  388/FFFFFFFFFFFF2F18 :                     .main:
(2)  389/FFFFFFFFFFFF2F18 :                     ; 		move.w	#224,d1
(2)  390/FFFFFFFFFFFF2F18 :                     ; 		move.w	#320,d0
(2)  391/FFFFFFFFFFFF2F18 :                     ; 		move.w	obj_x(a6),d2
(2)  392/FFFFFFFFFFFF2F18 :                     ; 		tst.w	d2
(2)  393/FFFFFFFFFFFF2F18 :                     ; 		bpl.s	.x_back
(2)  394/FFFFFFFFFFFF2F18 :                     ; 		neg.w	obj_x_spd(a6)
(2)  395/FFFFFFFFFFFF2F18 :                     ; 		bchg	#0,obj_attr(a6)
(2)  396/FFFFFFFFFFFF2F18 :                     ; .x_back:
(2)  397/FFFFFFFFFFFF2F18 :                     ; 		cmp.w	d0,d2
(2)  398/FFFFFFFFFFFF2F18 :                     ; 		blt.s	.x_foward
(2)  399/FFFFFFFFFFFF2F18 :                     ; 		neg.w	obj_x_spd(a6)
(2)  400/FFFFFFFFFFFF2F18 :                     ; 		bchg	#0,obj_attr(a6)
(2)  401/FFFFFFFFFFFF2F18 :                     ; .x_foward:
(2)  402/FFFFFFFFFFFF2F18 :                     ; 		move.w	d2,obj_x(a6)
(2)  403/FFFFFFFFFFFF2F18 :                     ;
(2)  404/FFFFFFFFFFFF2F18 :                     ; 		move.w	obj_y(a6),d2
(2)  405/FFFFFFFFFFFF2F18 :                     ; 		tst.w	d2
(2)  406/FFFFFFFFFFFF2F18 :                     ; 		bpl.s	.y_back
(2)  407/FFFFFFFFFFFF2F18 :                     ; 		neg.w	obj_y_spd(a6)
(2)  408/FFFFFFFFFFFF2F18 :                     ; .y_back:
(2)  409/FFFFFFFFFFFF2F18 :                     ; 		cmp.w	d1,d2
(2)  410/FFFFFFFFFFFF2F18 :                     ; 		blt.s	.y_foward
(2)  411/FFFFFFFFFFFF2F18 :                     ; 		neg.w	obj_y_spd(a6)
(2)  412/FFFFFFFFFFFF2F18 :                     ; .y_foward:
(2)  413/FFFFFFFFFFFF2F18 :                     ; 		move.w	d2,obj_y(a6)
(2)  414/FFFFFFFFFFFF2F18 :                     ;
(2)  415/FFFFFFFFFFFF2F18 :                     ; 		bsr	object_Speed
(2)  416/FFFFFFFFFFFF2F18 :                     
(2)  417/FFFFFFFFFFFF2F18 :                     ; ----------------------------------------------
(2)  418/FFFFFFFFFFFF2F18 :                     ; Show the object...
(2)  419/FFFFFFFFFFFF2F18 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  420/FFFFFFFFFFFF2F1C : 6100 F232           		bsr	object_Animate
(2)  421/FFFFFFFFFFFF2F20 :                     
(2)  423/FFFFFFFFFFFF2F20 : 207C 0000 0000      		move.l	#0,a0
(2)  424/FFFFFFFFFFFF2F26 : 43F9 0000 FD00      		lea	(ArtMars_Sisi),a1		; a0 - Texture location
(2)  425/FFFFFFFFFFFF2F2C : 7000                		moveq	#0,d0
(2)  426/FFFFFFFFFFFF2F2E : 7203                		moveq	#%11,d1
(2)  427/FFFFFFFFFFFF2F30 : 6100 F3A6           		bsr	object_MdMars_GetSprInfo
(2)  428/FFFFFFFFFFFF2F34 : 243C 0020 0020      		move.l	#splitw(32,32),d2		; Size Width / Height
(2)  429/FFFFFFFFFFFF2F3A : 263C 0020 00D0      		move.l	#splitw(32,192+16),d3		; Texture width / Index
(2)  430/FFFFFFFFFFFF2F40 : 6000 E676           		bra	Video_MdMars_MakeSpr3D
(2)  444/FFFFFFFFFFFF2F44 :                     
(2)  445/FFFFFFFFFFFF2F44 :                     ; ----------------------------------------------
(2)  446/FFFFFFFFFFFF2F44 :                     
(2)  447/FFFFFFFFFFFF2F44 :                     .anim_data:
(2)  448/FFFFFFFFFFFF2F44 : 0002                		dc.w .maind-.anim_data
(2)  449/FFFFFFFFFFFF2F46 :                     .maind:
(2)  450/FFFFFFFFFFFF2F46 : 0008                		dc.w 8
(2)  451/FFFFFFFFFFFF2F48 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F4E : 0001             
(2)  452/FFFFFFFFFFFF2F50 : FFFE                		dc.w -2
(2)  453/FFFFFFFFFFFF2F52 :                     		align 2
(2)  454/FFFFFFFFFFFF2F54 :                     
(2)  455/FFFFFFFFFFFF2F54 :                     ; ====================================================================
(2)  456/FFFFFFFFFFFF2F54 :                     ; ------------------------------------------------------
(2)  457/FFFFFFFFFFFF2F54 :                     ; Subroutines
(2)  458/FFFFFFFFFFFF2F54 :                     ; ------------------------------------------------------
(2)  459/FFFFFFFFFFFF2F54 :                     
(2)  460/FFFFFFFFFFFF2F54 :                     Camera_Update:
(2)  462/FFFFFFFFFFFF2F54 : 41F8 CC62           		lea	(RAM_MdMars_MSprites).w,a0
(2)  463/FFFFFFFFFFFF2F58 : 43F8 CC42           		lea	(RAM_MdMars_MdlCamera).w,a1
(2)  464/FFFFFFFFFFFF2F5C : 7600                		moveq	#0,d3
(2)  465/FFFFFFFFFFFF2F5E : 7800                		moveq	#0,d4
(2)  466/FFFFFFFFFFFF2F60 : 3628 0010           		move.w	mspr_x_pos(a0),d3
(2)  467/FFFFFFFFFFFF2F64 : 3828 0014           		move.w	mspr_z_pos(a0),d4
(2)  468/FFFFFFFFFFFF2F68 : 48C3                		ext.l	d3
(2)  469/FFFFFFFFFFFF2F6A : 48C4                		ext.l	d4
(2)  470/FFFFFFFFFFFF2F6C : 3A3C 0090           		move.w	#36*4,d5
(2)  471/FFFFFFFFFFFF2F70 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  472/FFFFFFFFFFFF2F74 : 6100 ED9A           		bsr	System_SineWave_Cos
(2)  473/FFFFFFFFFFFF2F78 : C3C5                		muls.w	d5,d1
(2)  474/FFFFFFFFFFFF2F7A : E081                		asr.l	#8,d1
(2)  475/FFFFFFFFFFFF2F7C : 48C1                		ext.l	d1
(2)  476/FFFFFFFFFFFF2F7E : D881                		add.l	d1,d4
(2)  477/FFFFFFFFFFFF2F80 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  478/FFFFFFFFFFFF2F84 : 6100 ED94           		bsr	System_SineWave
(2)  479/FFFFFFFFFFFF2F88 : C3C5                		muls.w	d5,d1
(2)  480/FFFFFFFFFFFF2F8A : E081                		asr.l	#8,d1
(2)  481/FFFFFFFFFFFF2F8C : 48C1                		ext.l	d1
(2)  482/FFFFFFFFFFFF2F8E : D681                		add.l	d1,d3
(2)  483/FFFFFFFFFFFF2F90 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  484/FFFFFFFFFFFF2F94 : E788                		lsl.l	#3,d0
(2)  485/FFFFFFFFFFFF2F96 : 48C0                		ext.l	d0
(2)  486/FFFFFFFFFFFF2F98 : 4480                		neg.l	d0
(2)  487/FFFFFFFFFFFF2F9A : 2340 0010           		move.l	d0,mcam_y_rot(a1)
(2)  488/FFFFFFFFFFFF2F9E :                     
(2)  489/FFFFFFFFFFFF2F9E : 2283                		move.l	d3,mcam_x_pos(a1)
(2)  490/FFFFFFFFFFFF2FA0 : 2344 0008           		move.l	d4,mcam_z_pos(a1)
(2)  492/FFFFFFFFFFFF2FA4 : 4E75                		rts
(2)  493/FFFFFFFFFFFF2FA6 :                     
(2)  494/FFFFFFFFFFFF2FA6 :                     ; ====================================================================
(2)  495/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  496/FFFFFFFFFFFF2FA6 :                     ; Includes for this screen
(2)  497/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  498/FFFFFFFFFFFF2FA6 :                     
(2)  499/FFFFFFFFFFFF2FA6 :                     ; ====================================================================
(2)  500/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  501/FFFFFFFFFFFF2FA6 :                     ; Custom VBlank
(2)  502/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  503/FFFFFFFFFFFF2FA6 :                     
(2)  504/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  505/FFFFFFFFFFFF2FA6 :                     ; Custom HBlank
(2)  506/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  507/FFFFFFFFFFFF2FA6 :                     
(2)  508/FFFFFFFFFFFF2FA6 :                     ; ====================================================================
(2)  509/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  510/FFFFFFFFFFFF2FA6 :                     ; Small data section
(2)  511/FFFFFFFFFFFF2FA6 :                     ; ------------------------------------------------------
(2)  512/FFFFFFFFFFFF2FA6 :                     
(2)  513/FFFFFFFFFFFF2FA6 :                     str_NewCountr0:
(2)  515/FFFFFFFFFFFF2FA6 : 83FF E5A0           		dc.l pstr_mem(3,RAM_Objects+obj_x)
(2)  516/FFFFFFFFFFFF2FAA : 20                  		dc.b " "
(2)  517/FFFFFFFFFFFF2FAB : 83FF E5A4           		dc.l pstr_mem(3,RAM_Objects+obj_y)
(2)  518/FFFFFFFFFFFF2FAF : 20                  		dc.b " "
(2)  519/FFFFFFFFFFFF2FB0 : 83FF E5A8           		dc.l pstr_mem(3,RAM_Objects+obj_z)
(2)  520/FFFFFFFFFFFF2FB4 : 20                  		dc.b " "
(2)  521/FFFFFFFFFFFF2FB5 : 83FF B800           		dc.l pstr_mem(3,RAM_TestTouch)
(2)  522/FFFFFFFFFFFF2FB9 : 0A                  		dc.b $0A
(2)  523/FFFFFFFFFFFF2FBA : 83FF CC4E           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_x_rot)
(2)  524/FFFFFFFFFFFF2FBE : 20                  		dc.b " "
(2)  525/FFFFFFFFFFFF2FBF : 83FF CC52           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_y_rot)
(2)  526/FFFFFFFFFFFF2FC3 : 20                  		dc.b " "
(2)  527/FFFFFFFFFFFF2FC4 : 83FF CC56           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_z_rot)
(2)  528/FFFFFFFFFFFF2FC8 : 20                  		dc.b " "
(2)  529/FFFFFFFFFFFF2FC9 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  533/FFFFFFFFFFFF2FCD : 00                  		dc.b 0
(2)  534/FFFFFFFFFFFF2FCE :                     		align 2
(2)  535/FFFFFFFFFFFF2FD0 :                     
(2)  536/FFFFFFFFFFFF2FD0 :                     str_InputMe:
(2)  538/FFFFFFFFFFFF2FD0 : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  539/FFFFFFFFFFFF2FD4 : 20                  		dc.b " "
(2)  540/FFFFFFFFFFFF2FD5 : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  541/FFFFFFFFFFFF2FD9 : 20                  		dc.b " "
(2)  542/FFFFFFFFFFFF2FDA : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  546/FFFFFFFFFFFF2FDE : 00                  		dc.b 0
(2)  547/FFFFFFFFFFFF2FDF :                     		align 2
(2)  548/FFFFFFFFFFFF2FE0 :                     
(2)  549/FFFFFFFFFFFF2FE0 :                     ; ====================================================================
(2)  550/FFFFFFFFFFFF2FE0 :                     
(1)   19/FFFFFFFFFFFF2FE0 :                     mcscrn_e:
(1)   19/   3D794 :                                     dephase ; dephase RAM section
(1)   19/   3D794 :                                     dephase ; dephase $880000+ section
(1)   19/   3D794 :                     ; Md_Screen00_e:
(1)   19/   3D794 : =$3D794              MD_SCREEN04_E label *
(1)   19/   3D794 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN04",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/   3D794 : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   20/  8BD794 :                                     phase $880000+*         ; 32X ROM-area
(1)   20/  8BD794 :                                     align 4
(1)   20/  8BD794 : =$8BD794             MD_SCREEN07 label *
(1)   20/   3D794 :                                     dephase
(1)   20/   3D794 :                     
(1)   20/   3D794 :                     mctopscrn:
(1)   20/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   20/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   20/FFFFFFFFFFFF2C00 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; GEMA SOUND TESTER
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$7                  MAX_SNDPICK		equ 7
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; test 			struct
(2)   19/FFFFFFFFFFFF2C00 :                     ; x_pos			ds.w 1
(2)   20/FFFFFFFFFFFF2C00 :                     ; y_pos			ds.w 1
(2)   21/FFFFFFFFFFFF2C00 :                     ; 			endstuct
(2)   22/FFFFFFFFFFFF2C00 :                     
(2)   23/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   24/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   25/FFFFFFFFFFFF2C00 :                     ; This mode's RAM
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     
(2)   28/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   28/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   28/   3D794 :                                     dephase
(2)   28/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   28/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   29/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   30/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   31/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 6
(2)   32/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   33/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   34/FFFFFFFFFFFFB868 :                     
(2)   35/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   36/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   37/FFFFFFFFFFFFB86C :                     RAM_GemaArg0		ds.w 1
(2)   38/FFFFFFFFFFFFB86E :                     RAM_GemaArg1		ds.w 1
(2)   39/FFFFFFFFFFFFB870 :                     RAM_GemaArg2		ds.w 1
(2)   40/FFFFFFFFFFFFB872 :                     RAM_GemaArg3		ds.w 1
(2)   41/FFFFFFFFFFFFB874 :                     RAM_GemaArg4		ds.w 1
(2)   42/FFFFFFFFFFFFB876 :                     RAM_GemaArg5		ds.w 1
(2)   43/FFFFFFFFFFFFB878 :                     RAM_GemaArg6		ds.w 1
(2)   44/FFFFFFFFFFFFB87A :                     RAM_ChnlLinks		ds.w 26
(2)   45/FFFFFFFFFFFFB8AE :                     sizeof_thisbuff		ds.l 0
(2)   46/FFFFFFFFFFFFB8B4 :  (MACRO-2)           			endmemory
(2)   46/   3D848 :                     .here:          dephase
(2)   46/   3D848 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   46/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   47/FFFFFFFFFFFF2C00 :                     
(2)   48/FFFFFFFFFFFF2C00 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   49/FFFFFFFFFFFF2C00 :                     
(2)   50/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   51/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   52/FFFFFFFFFFFF2C00 :                     ; Init
(2)   53/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   54/FFFFFFFFFFFF2C00 :                     
(2)   55/FFFFFFFFFFFF2C00 : 6100 DAC0           		bsr	Video_DisplayOff
(2)   56/FFFFFFFFFFFF2C04 : 6100 F066           		bsr	System_Default
(2)   57/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   58/FFFFFFFFFFFF2C08 :                     	; Load assets
(2)   59/FFFFFFFFFFFF2C08 :                     
(2)   60/FFFFFFFFFFFF2C08 : 41FA 042E           		lea	file_scrn1_main(pc),a0		; ** LOAD BANK **
(2)   61/FFFFFFFFFFFF2C0C : 6100 F430           		bsr	System_SetDataBank
(2)   62/FFFFFFFFFFFF2C10 :                     	; ----------------------------------------------
(2)   63/FFFFFFFFFFFF2C10 : 203C 0005 E0C4      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   64/FFFFFFFFFFFF2C16 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   65/FFFFFFFFFFFF2C1A : 6100 E318           		bsr	Video_PrintInit
(2)   66/FFFFFFFFFFFF2C1E : 203C 0005 ECC4      		move.l	#ASCII_FONT_W,d0
(2)   67/FFFFFFFFFFFF2C24 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   68/FFFFFFFFFFFF2C28 : 6100 E2FA           		bsr	Video_PrintInitW
(2)   69/FFFFFFFFFFFF2C2C : 41F8 E292           		lea	(RAM_PaletteFade+$60).w,a0	; Palette line 4:
(2)   70/FFFFFFFFFFFF2C30 : 30FC 0000           		move.w	#$0000,(a0)+			; black (background)
(2)   71/FFFFFFFFFFFF2C34 : 30FC 0EEE           		move.w	#$0EEE,(a0)+			; white
(2)   72/FFFFFFFFFFFF2C38 : 30FC 0888           		move.w	#$0888,(a0)+			; gray
(2)   73/FFFFFFFFFFFF2C3C :                     
(2)   74/FFFFFFFFFFFF2C3C : 41FA 0418           		lea	str_TesterTitle(pc),a0
(2)   75/FFFFFFFFFFFF2C40 : 7001                		moveq	#1,d0
(2)   76/FFFFFFFFFFFF2C42 : 7201                		moveq	#1,d1
(2)   77/FFFFFFFFFFFF2C44 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   78/FFFFFFFFFFFF2C48 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   79/FFFFFFFFFFFF2C4C : 6100 E402           		bsr	Video_PrintW
(2)   80/FFFFFFFFFFFF2C50 : 41FA 0418           		lea	str_TesterInfo(pc),a0
(2)   81/FFFFFFFFFFFF2C54 : 7001                		moveq	#1,d0
(2)   82/FFFFFFFFFFFF2C56 : 7204                		moveq	#4,d1
(2)   83/FFFFFFFFFFFF2C58 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   84/FFFFFFFFFFFF2C5C : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   85/FFFFFFFFFFFF2C60 : 6100 E304           		bsr	Video_Print
(2)   86/FFFFFFFFFFFF2C64 : 41FA 04AE           		lea	str_VmInfo(pc),a0
(2)   87/FFFFFFFFFFFF2C68 : 7005                		moveq	#5,d0
(2)   88/FFFFFFFFFFFF2C6A : 720D                		moveq	#13,d1
(2)   89/FFFFFFFFFFFF2C6C : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   90/FFFFFFFFFFFF2C70 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   91/FFFFFFFFFFFF2C74 : 6100 E2F0           		bsr	Video_Print
(2)   92/FFFFFFFFFFFF2C78 : 6100 0090           		bsr	.show_cursor
(2)   93/FFFFFFFFFFFF2C7C :                     
(2)   94/FFFFFFFFFFFF2C7C :                     	; ----------------------------------------------
(2)   95/FFFFFFFFFFFF2C7C : 6100 D3F8           		bsr	gemaReset				; Load default GEMA sound data
(2)   96/FFFFFFFFFFFF2C80 : 31FC 00D7 B878      		move.w	#215,(RAM_GemaArg6).w
(2)   97/FFFFFFFFFFFF2C86 : 303C 00D7           		move.w	#215,d0
(2)   98/FFFFFFFFFFFF2C8A : 6100 D5CE           		bsr	gemaSetBeats
(2)   99/FFFFFFFFFFFF2C8E :                     ; 		moveq	#1,d0
(2)  100/FFFFFFFFFFFF2C8E :                     ; 		bsr	gemaPlaySeq
(2)  101/FFFFFFFFFFFF2C8E :                     
(2)  102/FFFFFFFFFFFF2C8E :                     	; ----------------------------------------------
(2)  103/FFFFFFFFFFFF2C8E : 6100 00BA           		bsr	.show_me
(2)  104/FFFFFFFFFFFF2C92 : 6100 026C           		bsr	.gema_view
(2)  105/FFFFFFFFFFFF2C96 :                     ; 		bsr	.steal_vars
(2)  106/FFFFFFFFFFFF2C96 : 6100 F3E4           		bsr	Object_Run
(2)  107/FFFFFFFFFFFF2C9A :                     	; ----------------------------------------------
(2)  108/FFFFFFFFFFFF2C9A : 6100 DA1A           		bsr	Video_DisplayOn
(2)  109/FFFFFFFFFFFF2C9E : 6100 E174           		bsr	Video_FadeIn_Full
(2)  110/FFFFFFFFFFFF2CA2 :                     
(2)  111/FFFFFFFFFFFF2CA2 :                     ; ====================================================================
(2)  112/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  113/FFFFFFFFFFFF2CA2 :                     ; Loop
(2)  114/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  115/FFFFFFFFFFFF2CA2 :                     
(2)  116/FFFFFFFFFFFF2CA2 :                     .loop:
(2)  117/FFFFFFFFFFFF2CA2 : 6100 EC26           		bsr	System_Render
(2)  118/FFFFFFFFFFFF2CA6 : 6162                		bsr	.show_cursor
(2)  119/FFFFFFFFFFFF2CA8 : 6100 0256           		bsr	.gema_view
(2)  120/FFFFFFFFFFFF2CAC :                     
(2)  121/FFFFFFFFFFFF2CAC :                     ; 		bsr	Object_Run
(2)  122/FFFFFFFFFFFF2CAC :                     ; 		lea	str_Info(pc),a0
(2)  123/FFFFFFFFFFFF2CAC :                     ; 		moveq	#31,d0
(2)  124/FFFFFFFFFFFF2CAC :                     ; 		moveq	#2,d1
(2)  125/FFFFFFFFFFFF2CAC :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  126/FFFFFFFFFFFF2CAC :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  127/FFFFFFFFFFFF2CAC :                     ; 		bsr	Video_Print
(2)  128/FFFFFFFFFFFF2CAC :                     
(2)  129/FFFFFFFFFFFF2CAC :                     ; 	; Controls
(2)  130/FFFFFFFFFFFF2CAC :                     
(2)  131/FFFFFFFFFFFF2CAC : 4DF8 E55C           		lea	(Controller_1).w,a6
(2)  132/FFFFFFFFFFFF2CB0 : 4BF8 B868           		lea	(RAM_CurrPick).w,a5
(2)  133/FFFFFFFFFFFF2CB4 :                     	; UP/DOWN
(2)  134/FFFFFFFFFFFF2CB4 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  135/FFFFFFFFFFFF2CB8 : 0247 0070           		andi.w	#JoyA+JoyB+JoyC,d7
(2)  136/FFFFFFFFFFFF2CBC : 662A                		bne.s	.n_up
(2)  137/FFFFFFFFFFFF2CBE : 3E2E 0004           		move.w	on_press(a6),d7
(2)  138/FFFFFFFFFFFF2CC2 : 0807 0001           		btst	#bitJoyDown,d7
(2)  139/FFFFFFFFFFFF2CC6 : 670C                		beq.s	.n_down
(2)  140/FFFFFFFFFFFF2CC8 : 5255                		addq.w	#1,(a5)
(2)  141/FFFFFFFFFFFF2CCA : 0C55 0007           		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  142/FFFFFFFFFFFF2CCE : 6F02                		ble.s	.n_downd
(2)  143/FFFFFFFFFFFF2CD0 : 4255                		clr.w	(a5)
(2)  144/FFFFFFFFFFFF2CD2 :                     .n_downd:
(2)  145/FFFFFFFFFFFF2CD2 : 6176                		bsr.s	.show_me
(2)  146/FFFFFFFFFFFF2CD4 :                     .n_down:
(2)  147/FFFFFFFFFFFF2CD4 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  148/FFFFFFFFFFFF2CD8 : 0807 0000           		btst	#bitJoyUp,d7
(2)  149/FFFFFFFFFFFF2CDC : 670A                		beq.s	.n_up
(2)  150/FFFFFFFFFFFF2CDE : 5355                		subq.w	#1,(a5)
(2)  151/FFFFFFFFFFFF2CE0 : 6A04                		bpl.s	.n_ups
(2)  152/FFFFFFFFFFFF2CE2 : 3ABC 0007           		move.w	#MAX_SNDPICK,(a5)
(2)  153/FFFFFFFFFFFF2CE6 :                     .n_ups:
(2)  154/FFFFFFFFFFFF2CE6 : 6162                		bsr.s	.show_me
(2)  155/FFFFFFFFFFFF2CE8 :                     .n_up:
(2)  156/FFFFFFFFFFFF2CE8 : 3E38 B868           		move.w	(RAM_CurrPick).w,d7
(2)  157/FFFFFFFFFFFF2CEC : E54F                		lsl.w	#2,d7
(2)  158/FFFFFFFFFFFF2CEE : 4EBB 706E           		jsr	.jump_list(pc,d7.w)
(2)  159/FFFFFFFFFFFF2CF2 : 4A78 F5F8           		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  160/FFFFFFFFFFFF2CF6 : 6A10                		bpl.s	.n_cbtn
(2)  161/FFFFFFFFFFFF2CF8 : 6100 D50C           		bsr	gemaStopAll
(2)  162/FFFFFFFFFFFF2CFC : 6100 E138           		bsr	Video_FadeOut_Full
(2)  163/FFFFFFFFFFFF2D00 : 31FC 0000 F5F8      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(2)  164/FFFFFFFFFFFF2D06 : 4E75                		rts				; EXIT
(2)  165/FFFFFFFFFFFF2D08 :                     .n_cbtn:
(2)  166/FFFFFFFFFFFF2D08 : 6098                		bra	.loop
(2)  167/FFFFFFFFFFFF2D0A :                     
(2)  168/FFFFFFFFFFFF2D0A :                     ; ------------------------------------------------------
(2)  169/FFFFFFFFFFFF2D0A :                     
(2)  170/FFFFFFFFFFFF2D0A :                     .show_cursor:
(2)  171/FFFFFFFFFFFF2D0A : 3E38 B86A           		move.w	(RAM_LastPick).w,d7
(2)  172/FFFFFFFFFFFF2D0E : BE78 B868           		cmp.w	(RAM_CurrPick).w,d7
(2)  173/FFFFFFFFFFFF2D12 : 671E                		beq.s	.last_pick
(2)  174/FFFFFFFFFFFF2D14 : 41FA 033A           		lea	str_CursorDel(pc),a0
(2)  175/FFFFFFFFFFFF2D18 : 7001                		moveq	#1,d0
(2)  176/FFFFFFFFFFFF2D1A : 7204                		moveq	#4,d1
(2)  177/FFFFFFFFFFFF2D1C : D278 B86A           		add.w	(RAM_LastPick).w,d1
(2)  178/FFFFFFFFFFFF2D20 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  179/FFFFFFFFFFFF2D24 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  180/FFFFFFFFFFFF2D28 : 6100 E23C           		bsr	Video_Print
(2)  181/FFFFFFFFFFFF2D2C : 31F8 B868 B86A      		move.w	(RAM_CurrPick).w,(RAM_LastPick).w
(2)  182/FFFFFFFFFFFF2D32 :                     .last_pick:
(2)  183/FFFFFFFFFFFF2D32 : 41FA 0316           		lea	str_Cursor(pc),a0
(2)  184/FFFFFFFFFFFF2D36 : 7001                		moveq	#1,d0
(2)  185/FFFFFFFFFFFF2D38 : 7204                		moveq	#4,d1
(2)  186/FFFFFFFFFFFF2D3A : D278 B868           		add.w	(RAM_CurrPick).w,d1
(2)  187/FFFFFFFFFFFF2D3E : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  188/FFFFFFFFFFFF2D42 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  189/FFFFFFFFFFFF2D46 : 6000 E21E           		bra	Video_Print
(2)  190/FFFFFFFFFFFF2D4A :                     
(2)  191/FFFFFFFFFFFF2D4A :                     ; ------------------------------------------------------
(2)  192/FFFFFFFFFFFF2D4A :                     
(2)  193/FFFFFFFFFFFF2D4A :                     .show_me:
(2)  194/FFFFFFFFFFFF2D4A : 41FA 0744           		lea	str_ShowVars(pc),a0
(2)  195/FFFFFFFFFFFF2D4E : 7017                		moveq	#23,d0
(2)  196/FFFFFFFFFFFF2D50 : 7205                		moveq	#5,d1
(2)  197/FFFFFFFFFFFF2D52 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  198/FFFFFFFFFFFF2D56 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  199/FFFFFFFFFFFF2D5A : 6000 E20A           		bra	Video_Print
(2)  200/FFFFFFFFFFFF2D5E :                     
(2)  201/FFFFFFFFFFFF2D5E :                     ; ------------------------------------------------------
(2)  202/FFFFFFFFFFFF2D5E :                     
(2)  203/FFFFFFFFFFFF2D5E :                     .jump_list:
(2)  204/FFFFFFFFFFFF2D5E : 6000 001E           		bra.w	.nothing
(2)  205/FFFFFFFFFFFF2D62 : 6000 002C           		bra.w	.option_1
(2)  206/FFFFFFFFFFFF2D66 : 6000 00AE           		bra.w	.option_2
(2)  207/FFFFFFFFFFFF2D6A : 6000 00C0           		bra.w	.option_3
(2)  208/FFFFFFFFFFFF2D6E : 6000 00D2           		bra.w	.option_4
(2)  209/FFFFFFFFFFFF2D72 : 6000 00E6           		bra.w	.option_5
(2)  210/FFFFFFFFFFFF2D76 : 6000 00F6           		bra.w	.option_6
(2)  211/FFFFFFFFFFFF2D7A : 6000 0144           		bra.w	.option_7
(2)  212/FFFFFFFFFFFF2D7E :                     
(2)  213/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  214/FFFFFFFFFFFF2D7E :                     ; OPTION 0
(2)  215/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  216/FFFFFFFFFFFF2D7E :                     
(2)  217/FFFFFFFFFFFF2D7E :                     .nothing:
(2)  218/FFFFFFFFFFFF2D7E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  219/FFFFFFFFFFFF2D82 : 0807 0007           		btst	#bitJoyStart,d7
(2)  220/FFFFFFFFFFFF2D86 : 6706                		beq.s	.no_press
(2)  221/FFFFFFFFFFFF2D88 : 61C0                		bsr.s	.show_me
(2)  222/FFFFFFFFFFFF2D8A : 6000 D420           		bra	gemaTest
(2)  223/FFFFFFFFFFFF2D8E :                     .no_press:
(2)  224/FFFFFFFFFFFF2D8E : 4E75                		rts
(2)  225/FFFFFFFFFFFF2D90 :                     
(2)  226/FFFFFFFFFFFF2D90 :                     ; ------------------------------------------------------
(2)  227/FFFFFFFFFFFF2D90 :                     ; OPTION 1
(2)  228/FFFFFFFFFFFF2D90 :                     ; ------------------------------------------------------
(2)  229/FFFFFFFFFFFF2D90 :                     
(2)  230/FFFFFFFFFFFF2D90 :                     .option_1:
(2)  231/FFFFFFFFFFFF2D90 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  232/FFFFFFFFFFFF2D94 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  233/FFFFFFFFFFFF2D98 : 0807 0007           		btst	#bitJoyStart,d7
(2)  234/FFFFFFFFFFFF2D9C : 671E                		beq.s	.option1_args
(2)  235/FFFFFFFFFFFF2D9E : 301D                		move.w	(a5)+,d0
(2)  236/FFFFFFFFFFFF2DA0 : 321D                		move.w	(a5)+,d1
(2)  237/FFFFFFFFFFFF2DA2 : 341D                		move.w	(a5)+,d2
(2)  238/FFFFFFFFFFFF2DA4 : 6100 D426           		bsr	gemaPlaySeq
(2)  239/FFFFFFFFFFFF2DA8 : 3038 B86E           		move.w	(RAM_GemaArg1).w,d0
(2)  240/FFFFFFFFFFFF2DAC : 3200                		move.w	d0,d1
(2)  241/FFFFFFFFFFFF2DAE : D241                		add.w	d1,d1
(2)  242/FFFFFFFFFFFF2DB0 : 41FA 0120           		lea	.extnal_beats(pc),a0
(2)  243/FFFFFFFFFFFF2DB4 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  244/FFFFFFFFFFFF2DB8 : 6000 D4A0           		bra	gemaSetBeats
(2)  245/FFFFFFFFFFFF2DBC :                     ; 		bra.s	.show_me
(2)  246/FFFFFFFFFFFF2DBC :                     .option1_args:
(2)  247/FFFFFFFFFFFF2DBC : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  248/FFFFFFFFFFFF2DC0 : 3C07                		move.w	d7,d6
(2)  249/FFFFFFFFFFFF2DC2 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(2)  250/FFFFFFFFFFFF2DC6 : 67C6                		beq.s	.no_press
(2)  251/FFFFFFFFFFFF2DC8 : 0807 0004           		btst	#bitJoyB,d7
(2)  252/FFFFFFFFFFFF2DCC : 6704                		beq.s	.d2_opt
(2)  253/FFFFFFFFFFFF2DCE : DAFC 0002           		adda	#2,a5
(2)  254/FFFFFFFFFFFF2DD2 :                     .d2_opt:
(2)  255/FFFFFFFFFFFF2DD2 : 0807 0005           		btst	#bitJoyC,d7
(2)  256/FFFFFFFFFFFF2DD6 : 6704                		beq.s	.d3_opt
(2)  257/FFFFFFFFFFFF2DD8 : DAFC 0004           		adda	#4,a5
(2)  258/FFFFFFFFFFFF2DDC :                     .d3_opt:
(2)  259/FFFFFFFFFFFF2DDC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  260/FFFFFFFFFFFF2DE0 : 0807 0003           		btst	#bitJoyRight,d7
(2)  261/FFFFFFFFFFFF2DE4 : 6706                		beq.s	.op1_right
(2)  262/FFFFFFFFFFFF2DE6 : 5255                		addq.w	#1,(a5)
(2)  263/FFFFFFFFFFFF2DE8 : 6000 FF60           		bra	.show_me
(2)  264/FFFFFFFFFFFF2DEC :                     .op1_right:
(2)  265/FFFFFFFFFFFF2DEC : 0807 0002           		btst	#bitJoyLeft,d7
(2)  266/FFFFFFFFFFFF2DF0 : 6706                		beq.s	.op1_left
(2)  267/FFFFFFFFFFFF2DF2 : 5355                		subq.w	#1,(a5)
(2)  268/FFFFFFFFFFFF2DF4 : 6000 FF54           		bra	.show_me
(2)  269/FFFFFFFFFFFF2DF8 :                     .op1_left:
(2)  270/FFFFFFFFFFFF2DF8 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  271/FFFFFFFFFFFF2DFC : 0807 0000           		btst	#bitJoyUp,d7
(2)  272/FFFFFFFFFFFF2E00 : 6706                		beq.s	.op1_down
(2)  273/FFFFFFFFFFFF2E02 : 5255                		addq.w	#1,(a5)
(2)  274/FFFFFFFFFFFF2E04 : 6000 FF44           		bra	.show_me
(2)  275/FFFFFFFFFFFF2E08 :                     .op1_down:
(2)  276/FFFFFFFFFFFF2E08 : 0807 0001           		btst	#bitJoyDown,d7
(2)  277/FFFFFFFFFFFF2E0C : 6706                		beq.s	.op1_up
(2)  278/FFFFFFFFFFFF2E0E : 5355                		subq.w	#1,(a5)
(2)  279/FFFFFFFFFFFF2E10 : 6000 FF38           		bra	.show_me
(2)  280/FFFFFFFFFFFF2E14 :                     .op1_up:
(2)  281/FFFFFFFFFFFF2E14 :                     
(2)  282/FFFFFFFFFFFF2E14 : 4E75                		rts
(2)  283/FFFFFFFFFFFF2E16 :                     
(2)  284/FFFFFFFFFFFF2E16 :                     ; ------------------------------------------------------
(2)  285/FFFFFFFFFFFF2E16 :                     ; OPTION 2
(2)  286/FFFFFFFFFFFF2E16 :                     ; ------------------------------------------------------
(2)  287/FFFFFFFFFFFF2E16 :                     
(2)  288/FFFFFFFFFFFF2E16 :                     .option_2:
(2)  289/FFFFFFFFFFFF2E16 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  290/FFFFFFFFFFFF2E1A : 3E2E 0004           		move.w	on_press(a6),d7
(2)  291/FFFFFFFFFFFF2E1E : 0807 0007           		btst	#bitJoyStart,d7
(2)  292/FFFFFFFFFFFF2E22 : 6798                		beq.s	.option1_args
(2)  293/FFFFFFFFFFFF2E24 : 301D                		move.w	(a5)+,d0
(2)  294/FFFFFFFFFFFF2E26 : 321D                		move.w	(a5)+,d1
(2)  295/FFFFFFFFFFFF2E28 : 6000 D3C0           		bra	gemaStopSeq
(2)  296/FFFFFFFFFFFF2E2C :                     
(2)  297/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  298/FFFFFFFFFFFF2E2C :                     ; OPTION 3
(2)  299/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  300/FFFFFFFFFFFF2E2C :                     
(2)  301/FFFFFFFFFFFF2E2C :                     .option_3:
(2)  302/FFFFFFFFFFFF2E2C : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  303/FFFFFFFFFFFF2E30 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  304/FFFFFFFFFFFF2E34 : 0807 0007           		btst	#bitJoyStart,d7
(2)  305/FFFFFFFFFFFF2E38 : 6782                		beq	.option1_args
(2)  306/FFFFFFFFFFFF2E3A : 301D                		move.w	(a5)+,d0
(2)  307/FFFFFFFFFFFF2E3C : 321D                		move.w	(a5)+,d1
(2)  308/FFFFFFFFFFFF2E3E : 6000 D3E2           		bra	gemaFadeSeq
(2)  309/FFFFFFFFFFFF2E42 :                     
(2)  310/FFFFFFFFFFFF2E42 :                     ; ------------------------------------------------------
(2)  311/FFFFFFFFFFFF2E42 :                     ; OPTION 4
(2)  312/FFFFFFFFFFFF2E42 :                     ; ------------------------------------------------------
(2)  313/FFFFFFFFFFFF2E42 :                     
(2)  314/FFFFFFFFFFFF2E42 :                     .option_4:
(2)  315/FFFFFFFFFFFF2E42 : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  316/FFFFFFFFFFFF2E46 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  317/FFFFFFFFFFFF2E4A : 0807 0007           		btst	#bitJoyStart,d7
(2)  318/FFFFFFFFFFFF2E4E : 6700 FF6C           		beq	.option1_args
(2)  319/FFFFFFFFFFFF2E52 : 301D                		move.w	(a5)+,d0
(2)  320/FFFFFFFFFFFF2E54 : 321D                		move.w	(a5)+,d1
(2)  321/FFFFFFFFFFFF2E56 : 6000 D3E6           		bra	gemaSetSeqVol
(2)  322/FFFFFFFFFFFF2E5A :                     
(2)  323/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  324/FFFFFFFFFFFF2E5A :                     ; OPTION 5
(2)  325/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  326/FFFFFFFFFFFF2E5A :                     
(2)  327/FFFFFFFFFFFF2E5A :                     .option_5:
(2)  328/FFFFFFFFFFFF2E5A : 3E2E 0004           		move.w	on_press(a6),d7
(2)  329/FFFFFFFFFFFF2E5E : 0807 0007           		btst	#bitJoyStart,d7
(2)  330/FFFFFFFFFFFF2E62 : 6708                		beq.s	.no_press2
(2)  331/FFFFFFFFFFFF2E64 : 6100 FEE4           		bsr	.show_me
(2)  332/FFFFFFFFFFFF2E68 : 6000 D39C           		bra	gemaStopAll
(2)  333/FFFFFFFFFFFF2E6C :                     .no_press2:
(2)  334/FFFFFFFFFFFF2E6C : 4E75                		rts
(2)  335/FFFFFFFFFFFF2E6E :                     
(2)  336/FFFFFFFFFFFF2E6E :                     ; ------------------------------------------------------
(2)  337/FFFFFFFFFFFF2E6E :                     ; OPTION 6
(2)  338/FFFFFFFFFFFF2E6E :                     ; ------------------------------------------------------
(2)  339/FFFFFFFFFFFF2E6E :                     
(2)  340/FFFFFFFFFFFF2E6E :                     .option_6:
(2)  341/FFFFFFFFFFFF2E6E : 4BF8 B878           		lea	(RAM_GemaArg6).w,a5
(2)  342/FFFFFFFFFFFF2E72 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  343/FFFFFFFFFFFF2E76 : 0247 0040           		andi.w	#JoyA,d7
(2)  344/FFFFFFFFFFFF2E7A : 67F0                		beq.s	.no_press2
(2)  345/FFFFFFFFFFFF2E7C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  346/FFFFFFFFFFFF2E80 : 0807 0003           		btst	#bitJoyRight,d7
(2)  347/FFFFFFFFFFFF2E84 : 6704                		beq.s	.op2_right
(2)  348/FFFFFFFFFFFF2E86 : 5255                		addq.w	#1,(a5)
(2)  349/FFFFFFFFFFFF2E88 : 602C                		bra	.show_me_2
(2)  350/FFFFFFFFFFFF2E8A :                     .op2_right:
(2)  351/FFFFFFFFFFFF2E8A : 0807 0002           		btst	#bitJoyLeft,d7
(2)  352/FFFFFFFFFFFF2E8E : 6704                		beq.s	.op2_left
(2)  353/FFFFFFFFFFFF2E90 : 5355                		subq.w	#1,(a5)
(2)  354/FFFFFFFFFFFF2E92 : 6122                		bsr	.show_me_2
(2)  355/FFFFFFFFFFFF2E94 :                     .op2_left:
(2)  356/FFFFFFFFFFFF2E94 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  357/FFFFFFFFFFFF2E98 : 0807 0001           		btst	#bitJoyDown,d7
(2)  358/FFFFFFFFFFFF2E9C : 6704                		beq.s	.op2_down
(2)  359/FFFFFFFFFFFF2E9E : 5255                		addq.w	#1,(a5)
(2)  360/FFFFFFFFFFFF2EA0 : 6114                		bsr	.show_me_2
(2)  361/FFFFFFFFFFFF2EA2 :                     .op2_down:
(2)  362/FFFFFFFFFFFF2EA2 : 0807 0000           		btst	#bitJoyUp,d7
(2)  363/FFFFFFFFFFFF2EA6 : 6704                		beq.s	.op2_up
(2)  364/FFFFFFFFFFFF2EA8 : 5355                		subq.w	#1,(a5)
(2)  365/FFFFFFFFFFFF2EAA : 610A                		bsr	.show_me_2
(2)  366/FFFFFFFFFFFF2EAC :                     .op2_up:
(2)  367/FFFFFFFFFFFF2EAC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  368/FFFFFFFFFFFF2EB0 : 0807 0007           		btst	#bitJoyStart,d7
(2)  369/FFFFFFFFFFFF2EB4 : 67B6                		beq.s	.no_press2
(2)  370/FFFFFFFFFFFF2EB6 :                     .show_me_2:
(2)  371/FFFFFFFFFFFF2EB6 : 6100 FE92           		bsr	.show_me
(2)  372/FFFFFFFFFFFF2EBA : 3015                		move.w	(a5),d0
(2)  373/FFFFFFFFFFFF2EBC : 6000 D39C           		bra	gemaSetBeats
(2)  374/FFFFFFFFFFFF2EC0 :                     
(2)  375/FFFFFFFFFFFF2EC0 :                     ; ------------------------------------------------------
(2)  376/FFFFFFFFFFFF2EC0 :                     ; OPTION 7
(2)  377/FFFFFFFFFFFF2EC0 :                     ; ------------------------------------------------------
(2)  378/FFFFFFFFFFFF2EC0 :                     
(2)  379/FFFFFFFFFFFF2EC0 :                     .option_7:
(2)  380/FFFFFFFFFFFF2EC0 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  381/FFFFFFFFFFFF2EC4 : 0807 0007           		btst	#bitJoyStart,d7
(2)  382/FFFFFFFFFFFF2EC8 : 67A2                		beq.s	.no_press2
(2)  383/FFFFFFFFFFFF2ECA : 31FC FFFF F5F8      		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  384/FFFFFFFFFFFF2ED0 : 4E75                		rts
(2)  385/FFFFFFFFFFFF2ED2 :                     
(2)  386/FFFFFFFFFFFF2ED2 :                     ; ------------------------------------------------------
(2)  387/FFFFFFFFFFFF2ED2 :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  388/FFFFFFFFFFFF2ED2 :                     ; ------------------------------------------------------
(2)  389/FFFFFFFFFFFF2ED2 :                     
(2)  390/FFFFFFFFFFFF2ED2 :                     .extnal_beats:
(2)  391/FFFFFFFFFFFF2ED2 : 00C0                	dc.w 192
(2)  392/FFFFFFFFFFFF2ED4 : 00C0                	dc.w 192
(2)  393/FFFFFFFFFFFF2ED6 : 00C0                	dc.w 192
(2)  394/FFFFFFFFFFFF2ED8 : 00C0                	dc.w 192
(2)  395/FFFFFFFFFFFF2EDA : 00D7                	dc.w 215
(2)  396/FFFFFFFFFFFF2EDC : 00B8                	dc.w $00B8
(2)  397/FFFFFFFFFFFF2EDE : 00C0                	dc.w 192
(2)  398/FFFFFFFFFFFF2EE0 : 00C0                	dc.w 192
(2)  399/FFFFFFFFFFFF2EE2 : 00D7                	dc.w 215
(2)  400/FFFFFFFFFFFF2EE4 : 00D7                	dc.w 215
(2)  401/FFFFFFFFFFFF2EE6 : 00D7                	dc.w 215
(2)  402/FFFFFFFFFFFF2EE8 : 00D7                	dc.w 215
(2)  403/FFFFFFFFFFFF2EEA : 00D7                	dc.w 215
(2)  404/FFFFFFFFFFFF2EEC : 00D7                	dc.w 215
(2)  405/FFFFFFFFFFFF2EEE : 00D7                	dc.w 215
(2)  406/FFFFFFFFFFFF2EF0 : 00D7                	dc.w 215
(2)  407/FFFFFFFFFFFF2EF2 : 00D7                	dc.w 215
(2)  408/FFFFFFFFFFFF2EF4 : 00D7                	dc.w 215
(2)  409/FFFFFFFFFFFF2EF6 : 00D7                	dc.w 215
(2)  410/FFFFFFFFFFFF2EF8 : 00D7                	dc.w 215
(2)  411/FFFFFFFFFFFF2EFA : 00D7                	dc.w 215
(2)  412/FFFFFFFFFFFF2EFC : 00D7                	dc.w 215
(2)  413/FFFFFFFFFFFF2EFE : 00D7                	dc.w 215
(2)  414/FFFFFFFFFFFF2F00 :                     
(2)  415/FFFFFFFFFFFF2F00 :                     ; ------------------------------------------------------
(2)  416/FFFFFFFFFFFF2F00 :                     
(2)  417/FFFFFFFFFFFF2F00 :                     .gema_view:
(2)  418/FFFFFFFFFFFF2F00 : 41F9 00A0 1C00      		lea	(z80_cpu+tblPSG),a0
(2)  419/FFFFFFFFFFFF2F06 : 43F8 B800           		lea	(RAM_GemaCache_PSG),a1
(2)  420/FFFFFFFFFFFF2F0A : 7E02                		moveq	#3-1,d7
(2)  421/FFFFFFFFFFFF2F0C : 6100 0092           		bsr	.copy_me
(2)  422/FFFFFFFFFFFF2F10 : 41F9 00A0 1BC2      		lea	(z80_cpu+tblPSGN),a0
(2)  423/FFFFFFFFFFFF2F16 : 43F8 B80C           		lea	(RAM_GemaCache_PSGN),a1
(2)  424/FFFFFFFFFFFF2F1A : 7E00                		moveq	#1-1,d7
(2)  425/FFFFFFFFFFFF2F1C : 6100 0082           		bsr	.copy_me
(2)  426/FFFFFFFFFFFF2F20 : 41F9 00A0 1A6E      		lea	(z80_cpu+tblFM),a0
(2)  427/FFFFFFFFFFFF2F26 : 43F8 B810           		lea	(RAM_GemaCache_FM),a1
(2)  428/FFFFFFFFFFFF2F2A : 7E05                		moveq	#6-1,d7
(2)  429/FFFFFFFFFFFF2F2C : 6172                		bsr	.copy_me
(2)  430/FFFFFFFFFFFF2F2E : 41F9 00A0 1B00      		lea	(z80_cpu+tblPCM),a0
(2)  431/FFFFFFFFFFFF2F34 : 43F8 B828           		lea	(RAM_GemaCache_PCM),a1
(2)  432/FFFFFFFFFFFF2F38 : 7E07                		moveq	#8-1,d7
(2)  433/FFFFFFFFFFFF2F3A : 6164                		bsr	.copy_me
(2)  434/FFFFFFFFFFFF2F3C : 41F9 00A0 1C4A      		lea	(z80_cpu+tblPWM),a0
(2)  435/FFFFFFFFFFFF2F42 : 43F8 B848           		lea	(RAM_GemaCache_PWM),a1
(2)  436/FFFFFFFFFFFF2F46 : 7E07                		moveq	#8-1,d7
(2)  437/FFFFFFFFFFFF2F48 : 6156                		bsr	.copy_me
(2)  438/FFFFFFFFFFFF2F4A :                     
(2)  439/FFFFFFFFFFFF2F4A : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  440/FFFFFFFFFFFF2F4E : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  441/FFFFFFFFFFFF2F52 :                     
(2)  442/FFFFFFFFFFFF2F52 : 47F8 B800           		lea	(RAM_GemaCache_PSG),a3
(2)  443/FFFFFFFFFFFF2F56 : 700A                		moveq	#10,d0
(2)  444/FFFFFFFFFFFF2F58 : 720D                		moveq	#13,d1
(2)  445/FFFFFFFFFFFF2F5A : 7E02                		moveq	#3-1,d7
(2)  446/FFFFFFFFFFFF2F5C : 6100 00B6           		bsr	.show_table
(2)  447/FFFFFFFFFFFF2F60 : 47F8 B810           		lea	(RAM_GemaCache_FM),a3
(2)  448/FFFFFFFFFFFF2F64 : 701A                		moveq	#26,d0
(2)  449/FFFFFFFFFFFF2F66 : 720D                		moveq	#13,d1
(2)  450/FFFFFFFFFFFF2F68 : 7E03                		moveq	#4-1,d7
(2)  451/FFFFFFFFFFFF2F6A : 615E                		bsr	.show_table_fm
(2)  452/FFFFFFFFFFFF2F6C : 47F8 B828           		lea	(RAM_GemaCache_PCM),a3
(2)  453/FFFFFFFFFFFF2F70 : 700A                		moveq	#10,d0
(2)  454/FFFFFFFFFFFF2F72 : 7214                		moveq	#13+7,d1
(2)  455/FFFFFFFFFFFF2F74 : 7E07                		moveq	#8-1,d7
(2)  456/FFFFFFFFFFFF2F76 : 6100 009C           		bsr	.show_table
(2)  457/FFFFFFFFFFFF2F7A : 47F8 B848           		lea	(RAM_GemaCache_PWM),a3
(2)  458/FFFFFFFFFFFF2F7E : 701A                		moveq	#26,d0
(2)  459/FFFFFFFFFFFF2F80 : 7214                		moveq	#13+7,d1
(2)  460/FFFFFFFFFFFF2F82 : 7E06                		moveq	#7-1,d7
(2)  461/FFFFFFFFFFFF2F84 : 6100 008E           		bsr	.show_table
(2)  462/FFFFFFFFFFFF2F88 :                     
(2)  463/FFFFFFFFFFFF2F88 : 47F8 B820           		lea	(RAM_GemaCache_FM+(4*4)),a3
(2)  464/FFFFFFFFFFFF2F8C : 701A                		moveq	#26,d0
(2)  465/FFFFFFFFFFFF2F8E : 7211                		moveq	#13+4,d1
(2)  466/FFFFFFFFFFFF2F90 : 7E01                		moveq	#2-1,d7
(2)  467/FFFFFFFFFFFF2F92 : 6136                		bsr	.show_table_fm
(2)  468/FFFFFFFFFFFF2F94 : 47F8 B80C           		lea	(RAM_GemaCache_PSGN),a3
(2)  469/FFFFFFFFFFFF2F98 : 700A                		moveq	#10,d0
(2)  470/FFFFFFFFFFFF2F9A : 7210                		moveq	#13+3,d1
(2)  471/FFFFFFFFFFFF2F9C : 7E00                		moveq	#1-1,d7
(2)  472/FFFFFFFFFFFF2F9E : 6074                		bra	.show_table
(2)  473/FFFFFFFFFFFF2FA0 :                     
(2)  474/FFFFFFFFFFFF2FA0 :                     ; ----------------------------------------------
(2)  475/FFFFFFFFFFFF2FA0 :                     
(2)  476/FFFFFFFFFFFF2FA0 :                     .copy_me:
(2)  477/FFFFFFFFFFFF2FA0 : 7200                		moveq	#0,d1
(2)  478/FFFFFFFFFFFF2FA2 : 6100 D138           		bsr	sndLockZ80
(2)  479/FFFFFFFFFFFF2FA6 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  480/FFFFFFFFFFFF2FAA : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  481/FFFFFFFFFFFF2FAE : 1010                		move.b	ztbl_Link(a0),d0
(2)  482/FFFFFFFFFFFF2FB0 : 6100 D13E           		bsr	sndUnlockZ80
(2)  483/FFFFFFFFFFFF2FB4 : 8002                		or.b	d2,d0
(2)  484/FFFFFFFFFFFF2FB6 : 6602                		bne.s	.link_ok
(2)  485/FFFFFFFFFFFF2FB8 : 72FF                		moveq	#-1,d1
(2)  486/FFFFFFFFFFFF2FBA :                     .link_ok:
(2)  487/FFFFFFFFFFFF2FBA : 3281                		move.w	d1,(a1)
(2)  488/FFFFFFFFFFFF2FBC : D0FC 0018           		adda	#$18,a0
(2)  489/FFFFFFFFFFFF2FC0 : D2FC 0004           		adda	#4,a1
(2)  490/FFFFFFFFFFFF2FC4 : 51CF FFDA           		dbf	d7,.copy_me
(2)  491/FFFFFFFFFFFF2FC8 : 4E75                		rts
(2)  492/FFFFFFFFFFFF2FCA :                     
(2)  493/FFFFFFFFFFFF2FCA :                     ; ----------------------------------------------
(2)  494/FFFFFFFFFFFF2FCA :                     
(2)  495/FFFFFFFFFFFF2FCA :                     .show_table_fm:
(2)  496/FFFFFFFFFFFF2FCA : 41F9 FFFF 3448      		lea	(strL_FmOnly),a0
(2)  497/FFFFFFFFFFFF2FD0 : 7C00                		moveq	#0,d6
(2)  498/FFFFFFFFFFFF2FD2 : 7A00                		moveq	#0,d5
(2)  499/FFFFFFFFFFFF2FD4 : 3C13                		move.w	(a3),d6
(2)  500/FFFFFFFFFFFF2FD6 : 6A06                		bpl.s	.is_fmgood
(2)  501/FFFFFFFFFFFF2FD8 : 6100 DF8C           		bsr	Video_Print
(2)  502/FFFFFFFFFFFF2FDC : 602A                		bra.s	.from_fmbad
(2)  503/FFFFFFFFFFFF2FDE :                     .is_fmgood:
(2)  504/FFFFFFFFFFFF2FDE : 3A06                		move.w	d6,d5
(2)  505/FFFFFFFFFFFF2FE0 : D0FC 0004           		adda	#4,a0
(2)  506/FFFFFFFFFFFF2FE4 : 0246 001F           		andi.w	#%11111,d6
(2)  507/FFFFFFFFFFFF2FE8 : E34E                		lsl.w	#1,d6
(2)  508/FFFFFFFFFFFF2FEA : D0C6                		adda	d6,a0
(2)  509/FFFFFFFFFFFF2FEC : 6100 DF78           		bsr	Video_Print
(2)  510/FFFFFFFFFFFF2FF0 : 3800                		move.w	d0,d4
(2)  511/FFFFFFFFFFFF2FF2 : 5440                		addq.w	#2,d0
(2)  512/FFFFFFFFFFFF2FF4 : 0245 00E0           		andi.w	#%11100000,d5
(2)  513/FFFFFFFFFFFF2FF8 : E84D                		lsr.w	#4,d5
(2)  514/FFFFFFFFFFFF2FFA : 41F9 FFFF 347C      		lea	(strL_LazyVal),a0
(2)  515/FFFFFFFFFFFF3000 : D0C5                		adda	d5,a0
(2)  516/FFFFFFFFFFFF3002 : 6100 DF62           		bsr	Video_Print
(2)  517/FFFFFFFFFFFF3006 : 3004                		move.w	d4,d0
(2)  518/FFFFFFFFFFFF3008 :                     .from_fmbad:
(2)  519/FFFFFFFFFFFF3008 : 5241                		addq.w	#1,d1
(2)  520/FFFFFFFFFFFF300A : D6FC 0004           		adda	#4,a3
(2)  521/FFFFFFFFFFFF300E : 51CF FFBA           		dbf	d7,.show_table_fm
(2)  522/FFFFFFFFFFFF3012 : 4E75                		rts
(2)  523/FFFFFFFFFFFF3014 :                     
(2)  524/FFFFFFFFFFFF3014 :                     .show_table:
(2)  525/FFFFFFFFFFFF3014 : 41F9 FFFF 3264      		lea	(strL_NoteList),a0
(2)  526/FFFFFFFFFFFF301A : 7C00                		moveq	#0,d6
(2)  527/FFFFFFFFFFFF301C : 3C13                		move.w	(a3),d6
(2)  528/FFFFFFFFFFFF301E : 6B08                		bmi.s	.val_bad
(2)  529/FFFFFFFFFFFF3020 : D0FC 0004           		adda	#4,a0
(2)  530/FFFFFFFFFFFF3024 : DC46                		add.w	d6,d6
(2)  531/FFFFFFFFFFFF3026 : D0C6                		adda	d6,a0
(2)  532/FFFFFFFFFFFF3028 :                     .val_bad:
(2)  533/FFFFFFFFFFFF3028 : 6100 DF3C           		bsr	Video_Print
(2)  534/FFFFFFFFFFFF302C : 5241                		addq.w	#1,d1
(2)  535/FFFFFFFFFFFF302E : D6FC 0004           		adda	#4,a3
(2)  536/FFFFFFFFFFFF3032 : 51CF FFE0           		dbf	d7,.show_table
(2)  537/FFFFFFFFFFFF3036 : 4E75                		rts
(2)  538/FFFFFFFFFFFF3038 :                     
(2)  539/FFFFFFFFFFFF3038 :                     ; ====================================================================
(2)  540/FFFFFFFFFFFF3038 :                     ; ------------------------------------------------------
(2)  541/FFFFFFFFFFFF3038 :                     ; DATA asset locations
(2)  542/FFFFFFFFFFFF3038 :                     ; ------------------------------------------------------
(2)  543/FFFFFFFFFFFF3038 :                     
(2)  544/FFFFFFFFFFFF3038 :                     file_scrn1_main:
(2)  545/FFFFFFFFFFFF3038 : 0003 E052           		dc.l DATA_BANK0
(2)  546/FFFFFFFFFFFF303C : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF3042 : 494E 2E42 494E 00 
(2)  547/FFFFFFFFFFFF3049 :                     		align 2
(2)  548/FFFFFFFFFFFF304A :                     
(2)  549/FFFFFFFFFFFF304A :                     ; ====================================================================
(2)  550/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  551/FFFFFFFFFFFF304A :                     ; Objects
(2)  552/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  553/FFFFFFFFFFFF304A :                     
(2)  554/FFFFFFFFFFFF304A :                     ; ; --------------------------------------------------
(2)  555/FFFFFFFFFFFF304A :                     ; ; Sisi
(2)  556/FFFFFFFFFFFF304A :                     ; ; --------------------------------------------------
(2)  557/FFFFFFFFFFFF304A :                     ;
(2)  558/FFFFFFFFFFFF304A :                     ; Object_Sisi:
(2)  559/FFFFFFFFFFFF304A :                     ; 		moveq	#0,d0
(2)  560/FFFFFFFFFFFF304A :                     ; 		move.b	obj_index(a6),d0
(2)  561/FFFFFFFFFFFF304A :                     ; 		add.w	d0,d0
(2)  562/FFFFFFFFFFFF304A :                     ; 		move.w	.list(pc,d0.w),d1
(2)  563/FFFFFFFFFFFF304A :                     ; 		jmp	.list(pc,d1.w)
(2)  564/FFFFFFFFFFFF304A :                     ; ; ----------------------------------------------
(2)  565/FFFFFFFFFFFF304A :                     ; .list:		dc.w .init-.list
(2)  566/FFFFFFFFFFFF304A :                     ; 		dc.w .main-.list
(2)  567/FFFFFFFFFFFF304A :                     ; ; ----------------------------------------------
(2)  568/FFFFFFFFFFFF304A :                     ; .init:
(2)  569/FFFFFFFFFFFF304A :                     ; 		move.b	#1,obj_index(a6)
(2)  570/FFFFFFFFFFFF304A :                     ; 		clr.w	obj_frame(a6)
(2)  571/FFFFFFFFFFFF304A :                     ; 		bsr	object_ResetAnim
(2)  572/FFFFFFFFFFFF304A :                     ;
(2)  573/FFFFFFFFFFFF304A :                     ; ; ----------------------------------------------
(2)  574/FFFFFFFFFFFF304A :                     ; .main:
(2)  575/FFFFFFFFFFFF304A :                     ; 		moveq	#0,d0
(2)  576/FFFFFFFFFFFF304A :                     ; 		move.w	(RAM_CurrPick).w,d1
(2)  577/FFFFFFFFFFFF304A :                     ; 		lsl.w	#3,d1
(2)  578/FFFFFFFFFFFF304A :                     ; 		addi.w	#$18,d0
(2)  579/FFFFFFFFFFFF304A :                     ; 		addi.w	#$20,d1
(2)  580/FFFFFFFFFFFF304A :                     ; 		move.w	d0,obj_x(a6)
(2)  581/FFFFFFFFFFFF304A :                     ; 		move.w	d1,obj_y(a6)
(2)  582/FFFFFFFFFFFF304A :                     ; .dont_link:
(2)  583/FFFFFFFFFFFF304A :                     ; 		lea	.anim_data(pc),a0
(2)  584/FFFFFFFFFFFF304A :                     ; 		bsr	object_Animate
(2)  585/FFFFFFFFFFFF304A :                     ; 		lea	(objMap_Sisi),a0
(2)  586/FFFFFFFFFFFF304A :                     ; 		move.w	obj_x(a6),d0
(2)  587/FFFFFFFFFFFF304A :                     ; 		move.w	obj_y(a6),d1
(2)  588/FFFFFFFFFFFF304A :                     ; 		move.w	#setVramST_Sisi,d2
(2)  589/FFFFFFFFFFFF304A :                     ; 		or.w	#$800,d2
(2)  590/FFFFFFFFFFFF304A :                     ; 		move.w	obj_frame(a6),d3
(2)  591/FFFFFFFFFFFF304A :                     ; 		bra	Video_MkSprMap
(2)  592/FFFFFFFFFFFF304A :                     ;
(2)  593/FFFFFFFFFFFF304A :                     ; ; ----------------------------------------------
(2)  594/FFFFFFFFFFFF304A :                     ;
(2)  595/FFFFFFFFFFFF304A :                     ; .anim_data:
(2)  596/FFFFFFFFFFFF304A :                     ; 		dc.w .anim_00-.anim_data
(2)  597/FFFFFFFFFFFF304A :                     ; 		dc.w .anim_00-.anim_data
(2)  598/FFFFFFFFFFFF304A :                     ; 		dc.w .anim_00-.anim_data
(2)  599/FFFFFFFFFFFF304A :                     ; 		dc.w .anim_00-.anim_data
(2)  600/FFFFFFFFFFFF304A :                     ; .anim_00:
(2)  601/FFFFFFFFFFFF304A :                     ; 		dc.w 8
(2)  602/FFFFFFFFFFFF304A :                     ; 		dc.w 0,1,2,1
(2)  603/FFFFFFFFFFFF304A :                     ; 		dc.w -2
(2)  604/FFFFFFFFFFFF304A :                     ; 		align 2
(2)  605/FFFFFFFFFFFF304A :                     
(2)  606/FFFFFFFFFFFF304A :                     ; ====================================================================
(2)  607/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  608/FFFFFFFFFFFF304A :                     ; Subroutines
(2)  609/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  610/FFFFFFFFFFFF304A :                     
(2)  611/FFFFFFFFFFFF304A :                     ; ====================================================================
(2)  612/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  613/FFFFFFFFFFFF304A :                     ; Includes for this screen
(2)  614/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  615/FFFFFFFFFFFF304A :                     
(2)  616/FFFFFFFFFFFF304A :                     ; ====================================================================
(2)  617/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  618/FFFFFFFFFFFF304A :                     ; Custom VBlank
(2)  619/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  620/FFFFFFFFFFFF304A :                     
(2)  621/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  622/FFFFFFFFFFFF304A :                     ; Custom HBlank
(2)  623/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  624/FFFFFFFFFFFF304A :                     
(2)  625/FFFFFFFFFFFF304A :                     ; ====================================================================
(2)  626/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  627/FFFFFFFFFFFF304A :                     ; Small data section
(2)  628/FFFFFFFFFFFF304A :                     ; ------------------------------------------------------
(2)  629/FFFFFFFFFFFF304A :                     
(2)  630/FFFFFFFFFFFF304A : 2D2D 3E00           str_Cursor:	dc.b "-->",0
(2)  631/FFFFFFFFFFFF304E :                     		align 2
(2)  632/FFFFFFFFFFFF3050 : 2020 2000           str_CursorDel:	dc.b "   ",0
(2)  633/FFFFFFFFFFFF3054 :                     		align 2
(2)  634/FFFFFFFFFFFF3056 :                     
(2)  635/FFFFFFFFFFFF3056 :                     str_TesterTitle:
(2)  636/FFFFFFFFFFFF3056 : 4745 4D41 2053      		dc.b "GEMA Sound driver",0
         FFFFFFFFFFFF305C : 6F75 6E64 2064 
         FFFFFFFFFFFF3062 : 7269 7665 7200    
(2)  637/FFFFFFFFFFFF3068 :                     		align 2
(2)  638/FFFFFFFFFFFF306A :                     str_TesterInfo:
(2)  639/FFFFFFFFFFFF306A : 2020 2020 6765      		dc.b "    gemaTest          Slot Seq  Blk",$0A
         FFFFFFFFFFFF3070 : 6D61 5465 7374 
         FFFFFFFFFFFF3076 : 2020 2020 2020 
         FFFFFFFFFFFF307C : 2020 2020 536C 
         FFFFFFFFFFFF3082 : 6F74 2053 6571 
         FFFFFFFFFFFF3088 : 2020 426C 6B0A    
(2)  640/FFFFFFFFFFFF308E : 2020 2020 6765      		dc.b "    gemaPlaySeq",$0A
         FFFFFFFFFFFF3094 : 6D61 506C 6179 
         FFFFFFFFFFFF309A : 5365 710A          
(2)  641/FFFFFFFFFFFF309E : 2020 2020 6765      		dc.b "    gemaStopSeq",$0A
         FFFFFFFFFFFF30A4 : 6D61 5374 6F70 
         FFFFFFFFFFFF30AA : 5365 710A          
(2)  642/FFFFFFFFFFFF30AE : 2020 2020 6765      		dc.b "    gemaFadeSeq",$0A
         FFFFFFFFFFFF30B4 : 6D61 4661 6465 
         FFFFFFFFFFFF30BA : 5365 710A          
(2)  643/FFFFFFFFFFFF30BE : 2020 2020 6765      		dc.b "    gemaSetSeqVol",$0A
         FFFFFFFFFFFF30C4 : 6D61 5365 7453 
         FFFFFFFFFFFF30CA : 6571 566F 6C0A    
(2)  644/FFFFFFFFFFFF30D0 : 2020 2020 6765      		dc.b "    gemaStopAll       Beat",$0A
         FFFFFFFFFFFF30D6 : 6D61 5374 6F70 
         FFFFFFFFFFFF30DC : 416C 6C20 2020 
         FFFFFFFFFFFF30E2 : 2020 2020 4265 
         FFFFFFFFFFFF30E8 : 6174 0A          
(2)  645/FFFFFFFFFFFF30EB : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
         FFFFFFFFFFFF30F1 : 6D61 5365 7442 
         FFFFFFFFFFFF30F7 : 6561 7473 0A       
(2)  646/FFFFFFFFFFFF30FC : 2020 2020 4558      		dc.b "    EXIT to Screen 00",$0A
         FFFFFFFFFFFF3102 : 4954 2074 6F20 
         FFFFFFFFFFFF3108 : 5363 7265 656E 
         FFFFFFFFFFFF310E : 2030 300A          
(2)  647/FFFFFFFFFFFF3112 : 00                  		dc.b 0
(2)  648/FFFFFFFFFFFF3113 :                     		align 2
(2)  649/FFFFFFFFFFFF3114 :                     str_VmInfo:
(2)  650/FFFFFFFFFFFF3114 : 5053 4731 2030      		dc.b "PSG1 000         FM1 000",$0A
         FFFFFFFFFFFF311A : 3030 2020 2020 
         FFFFFFFFFFFF3120 : 2020 2020 2046 
         FFFFFFFFFFFF3126 : 4D31 2030 3030 0A 
(2)  651/FFFFFFFFFFFF312D : 5053 4732 2030      		dc.b "PSG2 000         FM2 000",$0A
         FFFFFFFFFFFF3133 : 3030 2020 2020 
         FFFFFFFFFFFF3139 : 2020 2020 2046 
         FFFFFFFFFFFF313F : 4D32 2030 3030 0A 
(2)  652/FFFFFFFFFFFF3146 : 5053 4733 2030      		dc.b "PSG3 000         FM4 000",$0A
         FFFFFFFFFFFF314C : 3030 2020 2020 
         FFFFFFFFFFFF3152 : 2020 2020 2046 
         FFFFFFFFFFFF3158 : 4D34 2030 3030 0A 
(2)  653/FFFFFFFFFFFF315F : 5053 474E 2030      		dc.b "PSGN 000         FM5 000",$0A
         FFFFFFFFFFFF3165 : 3030 2020 2020 
         FFFFFFFFFFFF316B : 2020 2020 2046 
         FFFFFFFFFFFF3171 : 4D35 2030 3030 0A 
(2)  654/FFFFFFFFFFFF3178 : 2020 2020 2020      		dc.b "                 FM3 000",$0A
         FFFFFFFFFFFF317E : 2020 2020 2020 
         FFFFFFFFFFFF3184 : 2020 2020 2046 
         FFFFFFFFFFFF318A : 4D33 2030 3030 0A 
(2)  655/FFFFFFFFFFFF3191 : 2020 2020 2020      		dc.b "                 FM6 000",$0A
         FFFFFFFFFFFF3197 : 2020 2020 2020 
         FFFFFFFFFFFF319D : 2020 2020 2046 
         FFFFFFFFFFFF31A3 : 4D36 2030 3030 0A 
(2)  656/FFFFFFFFFFFF31AA : 0A                  		dc.b $0A
(2)  657/FFFFFFFFFFFF31AB : 5043 4D31 2030      		dc.b "PCM1 000        PWM1 000",$0A
         FFFFFFFFFFFF31B1 : 3030 2020 2020 
         FFFFFFFFFFFF31B7 : 2020 2020 5057 
         FFFFFFFFFFFF31BD : 4D31 2030 3030 0A 
(2)  658/FFFFFFFFFFFF31C4 : 5043 4D32 2030      		dc.b "PCM2 000        PWM2 000",$0A
         FFFFFFFFFFFF31CA : 3030 2020 2020 
         FFFFFFFFFFFF31D0 : 2020 2020 5057 
         FFFFFFFFFFFF31D6 : 4D32 2030 3030 0A 
(2)  659/FFFFFFFFFFFF31DD : 5043 4D33 2030      		dc.b "PCM3 000        PWM3 000",$0A
         FFFFFFFFFFFF31E3 : 3030 2020 2020 
         FFFFFFFFFFFF31E9 : 2020 2020 5057 
         FFFFFFFFFFFF31EF : 4D33 2030 3030 0A 
(2)  660/FFFFFFFFFFFF31F6 : 5043 4D34 2030      		dc.b "PCM4 000        PWM4 000",$0A
         FFFFFFFFFFFF31FC : 3030 2020 2020 
         FFFFFFFFFFFF3202 : 2020 2020 5057 
         FFFFFFFFFFFF3208 : 4D34 2030 3030 0A 
(2)  661/FFFFFFFFFFFF320F : 5043 4D35 2030      		dc.b "PCM5 000        PWM5 000",$0A
         FFFFFFFFFFFF3215 : 3030 2020 2020 
         FFFFFFFFFFFF321B : 2020 2020 5057 
         FFFFFFFFFFFF3221 : 4D35 2030 3030 0A 
(2)  662/FFFFFFFFFFFF3228 : 5043 4D36 2030      		dc.b "PCM6 000        PWM6 000",$0A
         FFFFFFFFFFFF322E : 3030 2020 2020 
         FFFFFFFFFFFF3234 : 2020 2020 5057 
         FFFFFFFFFFFF323A : 4D36 2030 3030 0A 
(2)  663/FFFFFFFFFFFF3241 : 5043 4D37 2030      		dc.b "PCM7 000        PWM7 000",$0A
         FFFFFFFFFFFF3247 : 3030 2020 2020 
         FFFFFFFFFFFF324D : 2020 2020 5057 
         FFFFFFFFFFFF3253 : 4D37 2030 3030 0A 
(2)  664/FFFFFFFFFFFF325A : 5043 4D38 2030      		dc.b "PCM8 000";PWM8 000 00 00",$0A
         FFFFFFFFFFFF3260 : 3030             
(2)  665/FFFFFFFFFFFF3262 : 00                  		dc.b 0
(2)  666/FFFFFFFFFFFF3263 :                     		align 2
(2)  667/FFFFFFFFFFFF3264 :                     
(2)  668/FFFFFFFFFFFF3264 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  669/FFFFFFFFFFFF3268 : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
         FFFFFFFFFFFF326E : 3000 442D 3000 
         FFFFFFFFFFFF3274 : 4423 3000 452D 
         FFFFFFFFFFFF327A : 3000 462D 3000 
         FFFFFFFFFFFF3280 : 4623 3000 472D 
         FFFFFFFFFFFF3286 : 3000 4723 3000 
         FFFFFFFFFFFF328C : 412D 3000 4123 
         FFFFFFFFFFFF3292 : 3000 422D 3000    
(2)  670/FFFFFFFFFFFF3298 : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
         FFFFFFFFFFFF329E : 3100 442D 3100 
         FFFFFFFFFFFF32A4 : 4423 3100 452D 
         FFFFFFFFFFFF32AA : 3100 462D 3100 
         FFFFFFFFFFFF32B0 : 4623 3100 472D 
         FFFFFFFFFFFF32B6 : 3100 4723 3100 
         FFFFFFFFFFFF32BC : 412D 3100 4123 
         FFFFFFFFFFFF32C2 : 3100 422D 3100    
(2)  671/FFFFFFFFFFFF32C8 : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
         FFFFFFFFFFFF32CE : 3200 442D 3200 
         FFFFFFFFFFFF32D4 : 4423 3200 452D 
         FFFFFFFFFFFF32DA : 3200 462D 3200 
         FFFFFFFFFFFF32E0 : 4623 3200 472D 
         FFFFFFFFFFFF32E6 : 3200 4723 3200 
         FFFFFFFFFFFF32EC : 412D 3200 4123 
         FFFFFFFFFFFF32F2 : 3200 422D 3200    
(2)  672/FFFFFFFFFFFF32F8 : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
         FFFFFFFFFFFF32FE : 3300 442D 3300 
         FFFFFFFFFFFF3304 : 4423 3300 452D 
         FFFFFFFFFFFF330A : 3300 462D 3300 
         FFFFFFFFFFFF3310 : 4623 3300 472D 
         FFFFFFFFFFFF3316 : 3300 4723 3300 
         FFFFFFFFFFFF331C : 412D 3300 4123 
         FFFFFFFFFFFF3322 : 3300 422D 3300    
(2)  673/FFFFFFFFFFFF3328 : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
         FFFFFFFFFFFF332E : 3400 442D 3400 
         FFFFFFFFFFFF3334 : 4423 3400 452D 
         FFFFFFFFFFFF333A : 3400 462D 3400 
         FFFFFFFFFFFF3340 : 4623 3400 472D 
         FFFFFFFFFFFF3346 : 3400 4723 3400 
         FFFFFFFFFFFF334C : 412D 3400 4123 
         FFFFFFFFFFFF3352 : 3400 422D 3400    
(2)  674/FFFFFFFFFFFF3358 : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
         FFFFFFFFFFFF335E : 3500 442D 3500 
         FFFFFFFFFFFF3364 : 4423 3500 452D 
         FFFFFFFFFFFF336A : 3500 462D 3500 
         FFFFFFFFFFFF3370 : 4623 3500 472D 
         FFFFFFFFFFFF3376 : 3500 4723 3500 
         FFFFFFFFFFFF337C : 412D 3500 4123 
         FFFFFFFFFFFF3382 : 3500 422D 3500    
(2)  675/FFFFFFFFFFFF3388 : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
         FFFFFFFFFFFF338E : 3600 442D 3600 
         FFFFFFFFFFFF3394 : 4423 3600 452D 
         FFFFFFFFFFFF339A : 3600 462D 3600 
         FFFFFFFFFFFF33A0 : 4623 3600 472D 
         FFFFFFFFFFFF33A6 : 3600 4723 3600 
         FFFFFFFFFFFF33AC : 412D 3600 4123 
         FFFFFFFFFFFF33B2 : 3600 422D 3600    
(2)  676/FFFFFFFFFFFF33B8 : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
         FFFFFFFFFFFF33BE : 3700 442D 3700 
         FFFFFFFFFFFF33C4 : 4423 3700 452D 
         FFFFFFFFFFFF33CA : 3700 462D 3700 
         FFFFFFFFFFFF33D0 : 4623 3700 472D 
         FFFFFFFFFFFF33D6 : 3700 4723 3700 
         FFFFFFFFFFFF33DC : 412D 3700 4123 
         FFFFFFFFFFFF33E2 : 3700 422D 3700    
(2)  677/FFFFFFFFFFFF33E8 : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
         FFFFFFFFFFFF33EE : 3800 442D 3800 
         FFFFFFFFFFFF33F4 : 4423 3800 452D 
         FFFFFFFFFFFF33FA : 3800 462D 3800 
         FFFFFFFFFFFF3400 : 4623 3800 472D 
         FFFFFFFFFFFF3406 : 3800 4723 3800 
         FFFFFFFFFFFF340C : 412D 3800 4123 
         FFFFFFFFFFFF3412 : 3800 422D 3800    
(2)  678/FFFFFFFFFFFF3418 : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
         FFFFFFFFFFFF341E : 3900 442D 3900 
         FFFFFFFFFFFF3424 : 4423 3900 452D 
         FFFFFFFFFFFF342A : 3900 462D 3900 
         FFFFFFFFFFFF3430 : 4623 3900 472D 
         FFFFFFFFFFFF3436 : 3900 4723 3900 
         FFFFFFFFFFFF343C : 412D 3900 4123 
         FFFFFFFFFFFF3442 : 3900 422D 3900    
(2)  679/FFFFFFFFFFFF3448 : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  680/FFFFFFFFFFFF344C : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
         FFFFFFFFFFFF3452 : 2000 442D 2000 
         FFFFFFFFFFFF3458 : 4423 2000 452D 
         FFFFFFFFFFFF345E : 2000 462D 2000 
         FFFFFFFFFFFF3464 : 4623 2000 472D 
         FFFFFFFFFFFF346A : 2000 4723 2000 
         FFFFFFFFFFFF3470 : 412D 2000 4123 
         FFFFFFFFFFFF3476 : 2000 422D 2000    
(2)  681/FFFFFFFFFFFF347C : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
         FFFFFFFFFFFF3482 : 3300 3400 3500 
         FFFFFFFFFFFF3488 : 3600 3700 3800 
         FFFFFFFFFFFF348E : 3900             
(2)  682/FFFFFFFFFFFF3490 :                     
(2)  683/FFFFFFFFFFFF3490 :                     str_ShowVars:
(2)  684/FFFFFFFFFFFF3490 : 81FF B86C           		dc.l pstr_mem(1,RAM_GemaArg0)
(2)  685/FFFFFFFFFFFF3494 : 20                  		dc.b " "
(2)  686/FFFFFFFFFFFF3495 : 81FF B86E           		dc.l pstr_mem(1,RAM_GemaArg1)
(2)  687/FFFFFFFFFFFF3499 : 20                  		dc.b " "
(2)  688/FFFFFFFFFFFF349A : 81FF B870           		dc.l pstr_mem(1,RAM_GemaArg2)
(2)  689/FFFFFFFFFFFF349E : 0A0A                		dc.b $0A,$0A
(2)  690/FFFFFFFFFFFF34A0 : 81FF B872           		dc.l pstr_mem(1,RAM_GemaArg3)
(2)  691/FFFFFFFFFFFF34A4 : 20                  		dc.b " "
(2)  692/FFFFFFFFFFFF34A5 : 81FF B874           		dc.l pstr_mem(1,RAM_GemaArg4)
(2)  693/FFFFFFFFFFFF34A9 : 20                  		dc.b " "
(2)  694/FFFFFFFFFFFF34AA : 81FF B876           		dc.l pstr_mem(1,RAM_GemaArg5)
(2)  695/FFFFFFFFFFFF34AE : 0A0A 0A             		dc.b $0A,$0A,$0A
(2)  696/FFFFFFFFFFFF34B1 : 81FF B878           		dc.l pstr_mem(1,RAM_GemaArg6)
(2)  697/FFFFFFFFFFFF34B5 : 00                  		dc.b 0
(2)  698/FFFFFFFFFFFF34B6 :                     		align 2
(2)  699/FFFFFFFFFFFF34B8 :                     str_Info:
(2)  700/FFFFFFFFFFFF34B8 : 83FF E43C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  701/FFFFFFFFFFFF34BC : 00                  		dc.b 0
(2)  702/FFFFFFFFFFFF34BD :                     		align 2
(2)  703/FFFFFFFFFFFF34BE :                     
(1)   20/FFFFFFFFFFFF34BE :                     mcscrn_e:
(1)   20/   3E052 :                                     dephase ; dephase RAM section
(1)   20/   3E052 :                                     dephase ; dephase $880000+ section
(1)   20/   3E052 :                     ; Md_Screen00_e:
(1)   20/   3E052 : =$3E052              MD_SCREEN07_E label *
(1)   20/   3E052 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   21/   3E052 :                     
     377/   3E052 :                     
     378/   3E052 :                     ; ====================================================================
     379/   3E052 :                     ; ----------------------------------------------------------------
     380/   3E052 :                     ; DATA BLOCK (banks)
     381/   3E052 :                     ; ----------------------------------------------------------------
     382/   3E052 :                     
     383/   3E052 :                     		include "game/incl_data.asm"
(1)    1/   3E052 :                     ; ===========================================================================
(1)    2/   3E052 :                     ; ----------------------------------------------------------------
(1)    3/   3E052 :                     ; 68K DATA BANKS
(1)    4/   3E052 :                     ;
(1)    5/   3E052 :                     ; Size limits:
(1)    6/   3E052 :                     ;  $40000 for SegaCD's Word-RAM **compatible to all**
(1)    7/   3E052 :                     ;  $80000 for Sega-Mapper(SSF2) bank
(1)    8/   3E052 :                     ; $100000 for 32X Cartridge
(1)    9/   3E052 :                     ; All 4MB for Genesis/Pico
(1)   10/   3E052 :                     ;
(1)   11/   3E052 :                     ; SCD/CD32:
(1)   12/   3E052 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/   3E052 :                     ;
(1)   14/   3E052 :                     ; MACRO Usage:
(1)   15/   3E052 :                     ;	data_dset LABEL_START
(1)   16/   3E052 :                     ;	; your data
(1)   17/   3E052 :                     ;	data_dend LABEL_END
(1)   18/   3E052 :                     ; ----------------------------------------------------------------
(1)   19/   3E052 :                     ; - For including VDP graphics:
(1)   20/   3E052 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/   3E052 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/   3E052 :                     ;
(1)   23/   3E052 :                     ; - For the SVDP graphics:
(1)   24/   3E052 :                     ;
(1)   25/   3E052 :                     ; 	mars_VramStart Label_test			; Start label
(1)   26/   3E052 :                     ; example_0:
(1)   27/   3E052 :                     ; 	include "your_svdp_graphics.bin"
(1)   28/   3E052 :                     ; 	align 4						; Don't forget align by 4
(1)   29/   3E052 :                     ; example_1:
(1)   30/   3E052 :                     ; 	include "more_svdp.bin"
(1)   31/   3E052 :                     ;	align 4
(1)   32/   3E052 :                     ;	mars_VramEnd Label_end				; End label
(1)   33/   3E052 :                     ; ----------------------------------------------------------------
(1)   34/   3E052 :                     
(1)   35/   3E052 :                     ; --------------------------------------------------------
(1)   36/   3E052 :                     ; EXAMPLE INCLUDE
(1)   37/   3E052 :                     ; --------------------------------------------------------
(1)   38/   3E052 :                     ; 	data_dset DATA_BANKEXMPL
(1)   39/   3E052 :                     ; 	; ------------------------------------------------
(1)   40/   3E052 :                     ; 		include "your_data.asm"		; GEMA: Track data
(1)   41/   3E052 :                     ; 		include "etc_stuff.asm"
(1)   42/   3E052 :                     ; 	; ------------------------------------------------
(1)   43/   3E052 :                     ; 	data_dend DATA_BANKEXMPL_e
(1)   44/   3E052 :                     
(1)   45/   3E052 :                     ; ============================================================
(1)   46/   3E052 :                     ; --------------------------------------------------------
(1)   47/   3E052 :                     ; MAIN bank
(1)   48/   3E052 :                     ; --------------------------------------------------------
(1)   49/   3E052 :                     
(1)   50/   3E052 : (MACRO)              	data_dset DATA_BANK0
(1)   50/   3E052 :                     ; MCD_DBANK0:
(1)   50/   3E052 : =$3E052              DATA_BANK0 label *
(1)   50/  93E052 :                                     phase $900000+(DATA_BANK0&$0FFFFF)
(1)   50/  93E052 :                                     align 4
(1)   50/  93E054 : =$93E054             GLBL_MDATA_ST := *
(1)   51/  93E054 :                     	; ------------------------------------------------
(1)   52/  93E054 :                     		include "sound/tracks.asm"		; GEMA: Track data
(2)    1/  93E054 :                     ; ===========================================================================
(2)    2/  93E054 :                     ; -------------------------------------------------------------------
(2)    3/  93E054 :                     ; GEMA/Nikona DEFAULT sound-track data
(2)    4/  93E054 :                     ;
(2)    5/  93E054 :                     ; Soundtrack data can be stored on ROM, RAM* and Word-RAM**
(2)    6/  93E054 :                     ;
(2)    7/  93E054 :                     ;  * Requires calling Sound_Update manually to send the data
(2)    8/  93E054 :                     ;    as a workaround for the Z80 bankswitch limitation.
(2)    9/  93E054 :                     ; ** Make sure the Word-RAM permission is set to MAIN-CPU.
(2)   10/  93E054 :                     ;
(2)   11/  93E054 :                     ; This tracklist is stored on:
(2)   12/  93E054 :                     ; ROM      on Genesis/32X($880000)
(2)   13/  93E054 :                     ; WORD-RAM on SegaCD/CD32X
(2)   14/  93E054 :                     ;
(2)   15/  93E054 :                     ; This data will be unavilable if using SegaCD's stamps, relocate
(2)   16/  93E054 :                     ; the entire data manually.
(2)   17/  93E054 :                     ; -------------------------------------------------------------------
(2)   18/  93E054 :                     
(2)   19/  93E054 :                     ; ------------------------------------------------------------
(2)   20/  93E054 :                     ; Setup:
(2)   21/  93E054 :                     ; 	gemaList LABEL_TRACKLIST
(2)   22/  93E054 :                     ; 	gemaTrk option,ticks,location
(2)   23/  93E054 :                     ;	; more tracks here
(2)   24/  93E054 :                     ;
(2)   25/  93E054 :                     ; option: 0 - Don't use global subbeats
(2)   26/  93E054 :                     ;         1 - Use global subbeats (SET externally)
(2)   27/  93E054 :                     ; ticks:  Ticks number on a fixed tempo:
(2)   28/  93E054 :                     ;         150 on NTSC or 125 on PAL
(2)   29/  93E054 :                     ;         To change the tempo set "option" to 1,
(2)   30/  93E054 :                     ;         and set your sub-beats externally.
(2)   31/  93E054 :                     ;
(2)   32/  93E054 :                     ; To change your "master list" use:
(2)   33/  93E054 :                     ; 	move.l	#Gema_DefaultList,d0
(2)   34/  93E054 :                     ; 	bsr	gemaSetMasterList
(2)   35/  93E054 :                     ; This will be needed if using the SegaCD's Stamps.
(2)   36/  93E054 :                     ;
(2)   37/  93E054 :                     ; To use sub-beats:
(2)   38/  93E054 :                     ; 	move.w	#beats_num,d0
(2)   39/  93E054 :                     ; 	bsr	gemaSetBeats
(2)   40/  93E054 :                     ; 	move.w  #slot_id,d0
(2)   41/  93E054 :                     ; 	move.w	#sequence_id,d1
(2)   42/  93E054 :                     ; 	move.w  #start_block,d2
(2)   43/  93E054 :                     ;	bsr	gemaPlayTrack
(2)   44/  93E054 :                     ; * This change will affect ALL tracks with the same
(2)   45/  93E054 :                     ;   sub-beats flag enabled *
(2)   46/  93E054 :                     ; ------------------------------------------------------------
(2)   47/  93E054 :                     
(2)   48/  93E054 : (MACRO)              		gemaList MainGemaSeqList
(2)   48/  93E054 :                             align 2
(2)   48/  93E054 : =$93E054             MAINGEMASEQLIST label *
(2)   48/  93E054 : =$93E054             GLBL_GEMABASE := *
(2)   49/  93E054 : (MACRO)              		gemaTrk 0,5,gtrk_Test
(2)   49/  93E054 : 0593 E078                   dc.l ((0&$01)<<31)|((5&$7F)<<24)|(GTRK_TEST&$FFFFFF)
(2)   50/  93E058 : (MACRO)              		gemaTrk 0,3,gtrk_Gigalo
(2)   50/  93E058 : 0393 E2C6                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_GIGALO&$FFFFFF)
(2)   51/  93E05C : (MACRO)              		gemaTrk 0,3,gtrk_Temple
(2)   51/  93E05C : 0394 025D                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_TEMPLE&$FFFFFF)
(2)   52/  93E060 : (MACRO)              		gemaTrk 0,3,gtrk_Brinstr
(2)   52/  93E060 : 0394 177B                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_BRINSTR&$FFFFFF)
(2)   53/  93E064 :                     
(2)   54/  93E064 : (MACRO)              		gemaTrk 1,3,gtrk_wegot
(2)   54/  93E064 : 8394 1FBC                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_WEGOT&$FFFFFF)
(2)   55/  93E068 : (MACRO)              		gemaTrk 1,5,gtrk_MOVEME
(2)   55/  93E068 : 8594 3C52                   dc.l ((1&$01)<<31)|((5&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   56/  93E06C : (MACRO)              		gemaTrk 0,7,gtrk_MOVEME
(2)   56/  93E06C : 0794 3C52                   dc.l ((0&$01)<<31)|((7&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   57/  93E070 : (MACRO)              		gemaTrk 0,7,gtrk_MOVEME
(2)   57/  93E070 : 0794 3C52                   dc.l ((0&$01)<<31)|((7&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   58/  93E074 :                     
(2)   59/  93E074 : (MACRO)              		gemaTrk 1,6,gtrk_sauron
(2)   59/  93E074 : 8694 4BC2                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_SAURON&$FFFFFF)
(2)   60/  93E078 :                     ; 		gemaTrk 1,5,gtrk_NadieMd
(2)   61/  93E078 :                     ; 		gemaTrk 1,5,gtrk_NadieCd
(2)   62/  93E078 :                     ; 		gemaTrk 1,5,gtrk_NadieMars
(2)   63/  93E078 :                     
(2)   64/  93E078 :                     ; ----------------------------------------------------
(2)   65/  93E078 :                     
(2)   66/  93E078 :                     gtrk_Test:
(2)   67/  93E078 : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   67/  93E078 : 0004                        dc.w 4
(2)   67/  93E07A : 0093 E086                   dc.l .BLK
(2)   67/  93E07E : 0093 E08E                   dc.l .PAT
(2)   67/  93E082 : 0093 E28E                   dc.l .INS
(2)   68/  93E086 :                     .blk:		binclude "sound/tracks/test_blk.bin"
(2)   69/  93E08E :                     .pat:		binclude "sound/tracks/test_patt.bin"
(2)   70/  93E28E :                     .ins:
(2)   71/  93E28E : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   71/  93E28E : 8000 0000                   dc.b $80,0,$00,$00
(2)   71/  93E292 : 0000 0400                   dc.b $00,$00,$04,0
(2)   72/  93E296 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$04,0,%111
(2)   72/  93E296 : 9700 0000                   dc.b $90|%111,0,$00,$00
(2)   72/  93E29A : 0000 0400                   dc.b $00,$00,$04,0
(2)   73/  93E29E : (MACRO)              		gInsFm 0,FmIns_Trumpet_1
(2)   73/  93E29E : A000 945C                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   73/  93E2A2 : A000 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   74/  93E2A6 : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)   74/  93E2A6 : B000 945B                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   74/  93E2AA : C800 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   75/  93E2AE : (MACRO)              		gInsDac 0,DacIns_TEST,0
(2)   75/  93E2AE : C000 945D                   dc.b $C0|0,0,((DACINS_TEST>>16)&$FF),((DACINS_TEST>>8)&$FF)
(2)   75/  93E2B2 : 8000 0000                   dc.b DACINS_TEST&$FF,0,0,0
(2)   76/  93E2B6 : (MACRO)              		gInsPcm 0,PcmIns_TEST,0
(2)   76/  93E2B6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/  93E2BA : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/  93E2BE : (MACRO)              		gInsPwm 0,PwmIns_TEST,%10
(2)   77/  93E2BE : E200 0602                   dc.b $E0|%10,0,((PWMINS_TEST>>24)&$FF),((PWMINS_TEST>>16)&$FF)
(2)   77/  93E2C2 : 7AA0 0000                   dc.b ((PWMINS_TEST>>8)&$FF),PWMINS_TEST&$FF,0,0
(2)   78/  93E2C6 :                     
(2)   79/  93E2C6 :                     ; ----------------------------------------------------
(2)   80/  93E2C6 :                     
(2)   81/  93E2C6 :                     gtrk_Gigalo:
(2)   82/  93E2C6 : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   82/  93E2C6 : 0004                        dc.w 4
(2)   82/  93E2C8 : 0093 E2D4                   dc.l .BLK
(2)   82/  93E2CC : 0093 E2E1                   dc.l .PAT
(2)   82/  93E2D0 : 0094 023D                   dc.l .INS
(2)   83/  93E2D4 :                     .blk:		binclude "sound/tracks/gigalo_blk.bin"
(2)   84/  93E2E1 :                     .pat:		binclude "sound/tracks/gigalo_patt.bin"
(2)   85/  94023D :                     .ins:
(2)   86/  94023D : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$09,0
(2)   86/  94023D : 8000 0000                   dc.b $80,0,$00,$00
(2)   86/  940241 : 0000 0900                   dc.b $00,$00,$09,0
(2)   87/  940245 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%100
(2)   87/  940245 : 9400 0000                   dc.b $90|%100,0,$00,$00
(2)   87/  940249 : 0000 0900                   dc.b $00,$00,$09,0
(2)   88/  94024D : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%101
(2)   88/  94024D : 9500 0000                   dc.b $90|%101,0,$00,$00
(2)   88/  940251 : 0000 0900                   dc.b $00,$00,$09,0
(2)   89/  940255 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%110
(2)   89/  940255 : 9600 0000                   dc.b $90|%110,0,$00,$00
(2)   89/  940259 : 0000 0900                   dc.b $00,$00,$09,0
(2)   90/  94025D :                     
(2)   91/  94025D :                     ; ----------------------------------------------------
(2)   92/  94025D :                     
(2)   93/  94025D :                     gtrk_Temple:
(2)   94/  94025D : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   94/  94025D : 0004                        dc.w 4
(2)   94/  94025F : 0094 026B                   dc.l .BLK
(2)   94/  940263 : 0094 027D                   dc.l .PAT
(2)   94/  940267 : 0094 1763                   dc.l .INS
(2)   95/  94026B :                     .blk:		binclude "sound/tracks/temple_blk.bin"
(2)   96/  94027D :                     .pat:		binclude "sound/tracks/temple_patt.bin"
(2)   97/  941763 :                     .ins:
(2)   98/  941763 : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   98/  941763 : 8000 0000                   dc.b $80,0,$00,$00
(2)   98/  941767 : 0000 0400                   dc.b $00,$00,$04,0
(2)   99/  94176B : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   99/  94176B : 8000 0000                   dc.b $80,0,$00,$00
(2)   99/  94176F : 0000 0400                   dc.b $00,$00,$04,0
(2)  100/  941773 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$18,0,%101
(2)  100/  941773 : 9500 0000                   dc.b $90|%101,0,$00,$00
(2)  100/  941777 : 0000 1800                   dc.b $00,$00,$18,0
(2)  101/  94177B :                     
(2)  102/  94177B :                     ; ----------------------------------------------------
(2)  103/  94177B :                     
(2)  104/  94177B :                     gtrk_Brinstr:
(2)  105/  94177B : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)  105/  94177B : 0004                        dc.w 4
(2)  105/  94177D : 0094 1789                   dc.l .BLK
(2)  105/  941781 : 0094 1791                   dc.l .PAT
(2)  105/  941785 : 0094 1FAC                   dc.l .INS
(2)  106/  941789 :                     .blk:		binclude "sound/tracks/brinstr_blk.bin"
(2)  107/  941791 :                     .pat:		binclude "sound/tracks/brinstr_patt.bin"
(2)  108/  941FAC :                     .ins:
(2)  109/  941FAC : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$02,0
(2)  109/  941FAC : 8000 0000                   dc.b $80,0,$00,$00
(2)  109/  941FB0 : 0000 0200                   dc.b $00,$00,$02,0
(2)  110/  941FB4 : (MACRO)              		gInsPsgN -12,$00,$00,$00,$00,$01,0,%011
(2)  110/  941FB4 : 93F4 0000                   dc.b $90|%011,-12,$00,$00
(2)  110/  941FB8 : 0000 0100                   dc.b $00,$00,$01,0
(2)  111/  941FBC :                     
(2)  112/  941FBC :                     ; ----------------------------------------------------
(2)  113/  941FBC :                     
(2)  114/  941FBC :                     gtrk_wegot:
(2)  115/  941FBC : (MACRO)              		gemaHead .blk,.pat,.ins,8
(2)  115/  941FBC : 0008                        dc.w 8
(2)  115/  941FBE : 0094 1FCA                   dc.l .BLK
(2)  115/  941FC2 : 0094 1FE0                   dc.l .PAT
(2)  115/  941FC6 : 0094 3C02                   dc.l .INS
(2)  116/  941FCA :                     .blk:		binclude "sound/tracks/wegot_blk.bin"
(2)  117/  941FDF :                     		align 2
(2)  118/  941FE0 :                     .pat:		binclude "sound/tracks/wegot_patt.bin"
(2)  119/  943C01 :                     		align 2
(2)  120/  943C02 :                     .ins:
(2)  121/  943C02 : (MACRO)              		gInsFm 0,FmIns_PSynth_plus
(2)  121/  943C02 : A000 945D                   dc.b $A0,0,((FMINS_PSYNTH_PLUS>>16)&$FF),((FMINS_PSYNTH_PLUS>>8)&$FF)
(2)  121/  943C06 : 6000 0000                   dc.b FMINS_PSYNTH_PLUS&$FF,$00,$00,$00
(2)  122/  943C0A : (MACRO)              		gInsFm 0,FmIns_Bass_groove_2
(2)  122/  943C0A : A000 945D                   dc.b $A0,0,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(2)  122/  943C0E : 4000 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(2)  123/  943C12 : (MACRO)              		gInsDac 0,DacIns_wegot_kick,0
(2)  123/  943C12 : C000 95AC                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(2)  123/  943C16 : 7C00 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(2)  124/  943C1A : (MACRO)              		gInsFm 0,FmIns_Bass_club
(2)  124/  943C1A : A000 945D                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(2)  124/  943C1E : 2000 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(2)  125/  943C22 : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)  125/  943C22 : B000 945B                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)  125/  943C26 : C800 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)  126/  943C2A : (MACRO)              		gInsPsg 0,$20,$40,$10,$01,$04,0
(2)  126/  943C2A : 8000 2040                   dc.b $80,0,$20,$40
(2)  126/  943C2E : 1001 0400                   dc.b $10,$01,$04,0
(2)  127/  943C32 : (MACRO)              		gInsDac 0,DacIns_wegot_crash,0
(2)  127/  943C32 : C000 95B3                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(2)  127/  943C36 : F800 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(2)  128/  943C3A : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$10,0,%100
(2)  128/  943C3A : 9400 0000                   dc.b $90|%100,0,$00,$00
(2)  128/  943C3E : 0000 1000                   dc.b $00,$00,$10,0
(2)  129/  943C42 : (MACRO)              		gInsNull
(2)  129/  943C42 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  129/  943C46 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/  943C4A : (MACRO)              		gInsNull
(2)  130/  943C4A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/  943C4E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  131/  943C52 :                     
(2)  132/  943C52 :                     ; ----------------------------------------------------
(2)  133/  943C52 :                     
(2)  134/  943C52 :                     gtrk_MOVEME:
(2)  135/  943C52 : (MACRO)              		gemaHead .blk,.pat,.ins,11
(2)  135/  943C52 : 000B                        dc.w 11
(2)  135/  943C54 : 0094 3C60                   dc.l .BLK
(2)  135/  943C58 : 0094 3C78                   dc.l .PAT
(2)  135/  943C5C : 0094 4B5A                   dc.l .INS
(2)  136/  943C60 :                     .blk:
(2)  137/  943C60 :                     		binclude "sound/tracks/moveme_blk.bin"
(2)  138/  943C77 :                     		align 2
(2)  139/  943C78 :                     .pat:
(2)  140/  943C78 :                     		binclude "sound/tracks/moveme_patt.bin"
(2)  141/  944B59 :                     		align 2
(2)  142/  944B5A :                     .ins:
(2)  143/  944B5A : (MACRO)              		gInsPcm 0,PcmIns_MoveMe_Hit,%10
(2)  143/  944B5A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  143/  944B5E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  144/  944B62 : (MACRO)              		gInsFm 0,FmIns_Bass_Duck
(2)  144/  944B62 : A000 945C                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(2)  144/  944B66 : C000 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(2)  145/  944B6A : (MACRO)              		gInsPcm 0,PcmIns_MoveMe_Brass,%11
(2)  145/  944B6A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  145/  944B6E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  146/  944B72 : (MACRO)              		gInsFm 0,FmIns_ClosedHat
(2)  146/  944B72 : A000 945C                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(2)  146/  944B76 : E000 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(2)  147/  944B7A : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(2)  147/  944B7A : 9600 0000                   dc.b $90|%110,0,$00,$00
(2)  147/  944B7E : 0000 0400                   dc.b $00,$00,$04,0
(2)  148/  944B82 : (MACRO)              		gInsFm -12,FmIns_HBeat_tom
(2)  148/  944B82 : A0F4 945C                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(2)  148/  944B86 : 8000 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(2)  149/  944B8A : (MACRO)              		gInsPcm 0,PcmIns_Snare_moveme,%10
(2)  149/  944B8A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  149/  944B8E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  150/  944B92 : (MACRO)              		gInsPcm 0,PcmIns_Kick,%10
(2)  150/  944B92 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  150/  944B96 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  151/  944B9A : (MACRO)              		gInsFm -12,FmIns_Trumpet_carnival
(2)  151/  944B9A : A0F4 945D                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(2)  151/  944B9E : 0000 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(2)  152/  944BA2 : (MACRO)              		gInsPsg 0,$20,$20,$10,$01,$08,0
(2)  152/  944BA2 : 8000 2020                   dc.b $80,0,$20,$20
(2)  152/  944BA6 : 1001 0800                   dc.b $10,$01,$08,0
(2)  153/  944BAA : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)  153/  944BAA : B000 945B                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)  153/  944BAE : C800 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)  154/  944BB2 : (MACRO)              		gInsPsg +12,$20,$10,$10,$0C,$0C,0
(2)  154/  944BB2 : 800C 2010                   dc.b $80,+12,$20,$10
(2)  154/  944BB6 : 100C 0C00                   dc.b $10,$0C,$0C,0
(2)  155/  944BBA : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$06,0
(2)  155/  944BBA : 8000 0000                   dc.b $80,0,$00,$00
(2)  155/  944BBE : 0000 0600                   dc.b $00,$00,$06,0
(2)  156/  944BC2 :                     
(2)  157/  944BC2 :                     ; ----------------------------------------------------
(2)  158/  944BC2 :                     
(2)  159/  944BC2 :                     gtrk_sauron:
(2)  160/  944BC2 : (MACRO)              		gemaHead .blk,.pat,.ins,5
(2)  160/  944BC2 : 0005                        dc.w 5
(2)  160/  944BC4 : 0094 4BD0                   dc.l .BLK
(2)  160/  944BC8 : 0094 4BF6                   dc.l .PAT
(2)  160/  944BCC : 0094 5B68                   dc.l .INS
(2)  161/  944BD0 :                     .blk:
(2)  162/  944BD0 :                     		binclude "sound/tracks/sauron_blk.bin"
(2)  163/  944BF5 :                     		align 2
(2)  164/  944BF6 :                     .pat:
(2)  165/  944BF6 :                     		binclude "sound/tracks/sauron_patt.bin"
(2)  166/  945B67 :                     		align 2
(2)  167/  945B68 :                     .ins:
(2)  168/  945B68 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_01,0
(2)  168/  945B68 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  168/  945B6C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  169/  945B70 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_02,0
(2)  169/  945B70 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  169/  945B74 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  170/  945B78 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_03,0
(2)  170/  945B78 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  170/  945B7C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  171/  945B80 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_04,0
(2)  171/  945B80 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  171/  945B84 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  172/  945B88 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_05,1
(2)  172/  945B88 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  172/  945B8C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  173/  945B90 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_06,0
(2)  173/  945B90 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  173/  945B94 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  174/  945B98 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_07,0
(2)  174/  945B98 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  174/  945B9C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  175/  945BA0 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_08,0
(2)  175/  945BA0 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  175/  945BA4 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  176/  945BA8 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_09,0
(2)  176/  945BA8 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  176/  945BAC : 0000 0000                   dc.b $00,$00,$00,$00
(2)  177/  945BB0 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_10,0
(2)  177/  945BB0 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  177/  945BB4 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  178/  945BB8 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_11,0
(2)  178/  945BB8 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  178/  945BBC : 0000 0000                   dc.b $00,$00,$00,$00
(2)  179/  945BC0 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_12,0
(2)  179/  945BC0 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  179/  945BC4 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  180/  945BC8 :                     
(2)  181/  945BC8 :                     ; ; ----------------------------------------------------
(2)  182/  945BC8 :                     ;
(2)  183/  945BC8 :                     ; gtrk_NadieMars:
(2)  184/  945BC8 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  185/  945BC8 :                     ; .blk:
(2)  186/  945BC8 :                     ; 		binclude "sound/tracks/nadie_blk.bin"
(2)  187/  945BC8 :                     ; .pat:
(2)  188/  945BC8 :                     ; 		binclude "sound/tracks/nadie_patt.bin"
(2)  189/  945BC8 :                     ; .ins:
(2)  190/  945BC8 :                     ; 	if MARS
(2)  191/  945BC8 :                     ; 		gInsPwm 0,PwmIns_Nadie,%10	 ; <-- %10 stereo, no loop
(2)  192/  945BC8 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  193/  945BC8 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  194/  945BC8 :                     ; 		gInsPwm -5,PwmIns_PKick,%00
(2)  195/  945BC8 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  196/  945BC8 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  197/  945BC8 :                     ; 		gInsPwm 0,PwmIns_Piano,%00
(2)  198/  945BC8 :                     ; 		gInsPwm -12,PwmIns_PTom,%00
(2)  199/  945BC8 :                     ; 		gInsNull
(2)  200/  945BC8 :                     ; 	else
(2)  201/  945BC8 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Nadie,%10
(2)  202/  945BC8 :                     ; 		gInsNull;gInsFm -36,FmIns_Piano_Aqua
(2)  203/  945BC8 :                     ; 		gInsNull;gInsFm -12,FmIns_HBeat_tom
(2)  204/  945BC8 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PKick,%00
(2)  205/  945BC8 :                     ; 		gInsNull;gInsPsg 0,$40,$60,$10,$08,$0A,0
(2)  206/  945BC8 :                     ; 		gInsNull;gInsFm 0,FmIns_Trumpet_1
(2)  207/  945BC8 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Piano,%00
(2)  208/  945BC8 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PTom,%00
(2)  209/  945BC8 :                     ; 		gInsNull
(2)  210/  945BC8 :                     ; 	endif
(2)  211/  945BC8 :                     ;
(2)  212/  945BC8 :                     ; ; ----------------------------------------------------
(2)  213/  945BC8 :                     ;
(2)  214/  945BC8 :                     ; gtrk_NadieCd:
(2)  215/  945BC8 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  216/  945BC8 :                     ; .blk:
(2)  217/  945BC8 :                     ; 		binclude "sound/tracks/nadie_cd_blk.bin"
(2)  218/  945BC8 :                     ; .pat:
(2)  219/  945BC8 :                     ; 		binclude "sound/tracks/nadie_cd_patt.bin"
(2)  220/  945BC8 :                     ; .ins:
(2)  221/  945BC8 :                     ; 	if MCD|MARSCD
(2)  222/  945BC8 :                     ; 		gInsPcm 0,PcmIns_Nadie_L,0
(2)  223/  945BC8 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  224/  945BC8 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  225/  945BC8 :                     ; 		gInsPcm -5,PcmIns_PKick,%00
(2)  226/  945BC8 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  227/  945BC8 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  228/  945BC8 :                     ; 		gInsPcm 0,PcmIns_Piano,%00
(2)  229/  945BC8 :                     ; 		gInsPcm -12,PcmIns_PTom,%00
(2)  230/  945BC8 :                     ; 		gInsNull
(2)  231/  945BC8 :                     ; 		gInsPcm 0,PcmIns_Nadie_R,0
(2)  232/  945BC8 :                     ; 	else
(2)  233/  945BC8 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Nadie,%10
(2)  234/  945BC8 :                     ; 		gInsNull;gInsFm -36,FmIns_Piano_Aqua
(2)  235/  945BC8 :                     ; 		gInsNull;gInsFm -12,FmIns_HBeat_tom
(2)  236/  945BC8 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PKick,%00
(2)  237/  945BC8 :                     ; 		gInsNull;gInsPsg 0,$40,$60,$10,$08,$0A,0
(2)  238/  945BC8 :                     ; 		gInsNull;gInsFm 0,FmIns_Trumpet_1
(2)  239/  945BC8 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Piano,%00
(2)  240/  945BC8 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PTom,%00
(2)  241/  945BC8 :                     ; 		gInsNull
(2)  242/  945BC8 :                     ; 	endif
(2)  243/  945BC8 :                     ;
(2)  244/  945BC8 :                     ; ; ----------------------------------------------------
(2)  245/  945BC8 :                     ;
(2)  246/  945BC8 :                     ; gtrk_NadieMd:
(2)  247/  945BC8 :                     ; 		gemaHead .blk,.pat,.ins,7
(2)  248/  945BC8 :                     ; .blk:
(2)  249/  945BC8 :                     ; 		binclude "sound/tracks/nadie_md_blk.bin"
(2)  250/  945BC8 :                     ; .pat:
(2)  251/  945BC8 :                     ; 		binclude "sound/tracks/nadie_md_patt.bin"
(2)  252/  945BC8 :                     ; .ins:
(2)  253/  945BC8 :                     ; 		gInsDac 0,DacIns_Nadie,0
(2)  254/  945BC8 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  255/  945BC8 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  256/  945BC8 :                     ; 		gInsFm -36,FmIns_Drums_Kick1
(2)  257/  945BC8 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  258/  945BC8 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  259/  945BC8 :                     ; 		gInsNull
(2)  260/  945BC8 :                     ; 		gInsNull
(2)  261/  945BC8 :                     ; 		gInsNull
(2)  262/  945BC8 :                     
(1)   53/  945BC8 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(2)    1/  945BC8 :                     ; ===========================================================================
(2)    2/  945BC8 :                     ; -------------------------------------------------------------------
(2)    3/  945BC8 :                     ; GEMA/Nikona FM instruments "patches"
(2)    4/  945BC8 :                     ;
(2)    5/  945BC8 :                     ; PSG, PCM and PWM's are stored separately.
(2)    6/  945BC8 :                     ; -------------------------------------------------------------------
(2)    7/  945BC8 :                     
(2)    8/  945BC8 :                     ; ----------------------------------------------------
(2)    9/  945BC8 :                     ; INTRUMENT/PATCH FORMAT:
(2)   10/  945BC8 :                     ; dc.b $30,$34,$38,$3C	; Your FM registers following this order
(2)   11/  945BC8 :                     ; dc.b $40,$44,$48,$4C	; **
(2)   12/  945BC8 :                     ; dc.b $50,$54,$58,$5C	; **
(2)   13/  945BC8 :                     ; dc.b $60,$64,$68,$6C	; **
(2)   14/  945BC8 :                     ; dc.b $70,$74,$78,$7C	; **
(2)   15/  945BC8 :                     ; dc.b $80,$84,$88,$8C	; **
(2)   16/  945BC8 :                     ; dc.b $90,$94,$98,$9C	; **
(2)   17/  945BC8 :                     ; dc.b $B0,$B4,$22,$28	; **
(2)   18/  945BC8 :                     ; dc.w OP1,OP2,OP3,OP4	; OPTIONAL: Manual FM3 frequencies
(2)   19/  945BC8 :                     ;
(2)   20/  945BC8 :                     ; Notes:
(2)   21/  945BC8 :                     ; SSG-EG CAN be used, but can get problematic on non-genuine systems.
(2)   22/  945BC8 :                     ;
(2)   23/  945BC8 :                     ; $B4 - AMS/PMS: %00aa0ppp
(2)   24/  945BC8 :                     ; a | AMS
(2)   25/  945BC8 :                     ; p | PMS
(2)   26/  945BC8 :                     ; Keep panning bits 0, set the panning manually in your track.
(2)   27/  945BC8 :                     ;
(2)   28/  945BC8 :                     ; $22 - LFO: %0000evvv
(2)   29/  945BC8 :                     ; e | Enable
(2)   30/  945BC8 :                     ; v | Value
(2)   31/  945BC8 :                     ; This is a global setting, this will affect ALL sound.
(2)   32/  945BC8 :                     ;
(2)   33/  945BC8 :                     ; $28 - KEYS: %oooo0000
(2)   34/  945BC8 :                     ; o | Operators 4-1
(2)   35/  945BC8 :                     ;
(2)   36/  945BC8 :                     ; For making your own FM patches:
(2)   37/  945BC8 :                     ; Run FM_EDITOR.bin on an emulator and
(2)   38/  945BC8 :                     ; save your patch as a savestate, include your
(2)   39/  945BC8 :                     ; instrument like this:
(2)   40/  945BC8 :                     ; binclude "sound/instr/fm/organ2.gsx",$2478,SIZE
(2)   41/  945BC8 :                     ;
(2)   42/  945BC8 :                     ; SIZE:
(2)   43/  945BC8 :                     ; Normal FM ins:  $20
(2)   44/  945BC8 :                     ; Special FM ins: $28
(2)   45/  945BC8 :                     ; ----------------------------------------------------
(2)   46/  945BC8 :                     
(2)   47/  945BC8 :                     ; FM3 Special
(2)   48/  945BC8 :                     FmIns_Sp_OpenHat:
(2)   49/  945BC8 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(2)   50/  945BF0 :                     FmIns_Sp_ClosedHat:
(2)   51/  945BF0 :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(2)   52/  945C18 :                     FmIns_Sp_Cowbell:
(2)   53/  945C18 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(2)   54/  945C40 :                     
(2)   55/  945C40 :                     ; ----------------------------------------------------
(2)   56/  945C40 :                     
(2)   57/  945C40 :                     FmIns_Drums_Kick1:
(2)   58/  945C40 :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(2)   59/  945C60 :                     FmIns_Piano_Aqua:
(2)   60/  945C60 :                     		binclude "sound/instr/fm/piano_aqua.gsx",$2478,$20
(2)   61/  945C80 :                     FmIns_HBeat_tom:
(2)   62/  945C80 :                     		binclude "sound/instr/fm/nadia_tom.gsx",$2478,$20
(2)   63/  945CA0 :                     FmIns_Trumpet_1:
(2)   64/  945CA0 :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(2)   65/  945CC0 :                     
(2)   66/  945CC0 :                     ; ----------------------------------------------------
(2)   67/  945CC0 :                     
(2)   68/  945CC0 :                     FmIns_Bass_duck:
(2)   69/  945CC0 :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(2)   70/  945CE0 :                     FmIns_ClosedHat:
(2)   71/  945CE0 :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(2)   72/  945D00 :                     FmIns_Trumpet_carnival:
(2)   73/  945D00 :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(2)   74/  945D20 :                     
(2)   75/  945D20 :                     
(2)   76/  945D20 :                     ; ====================================================================
(2)   77/  945D20 :                     
(2)   78/  945D20 :                     ; FM3 Special
(2)   79/  945D20 :                     ; FmIns_Sp_OpenHat:
(2)   80/  945D20 :                     ; 		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(2)   81/  945D20 :                     ; FmIns_Sp_ClosedHat:
(2)   82/  945D20 :                     ; 		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(2)   83/  945D20 :                     ; FmIns_Sp_Cowbell:
(2)   84/  945D20 :                     ; 		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(2)   85/  945D20 :                     ; FmIns_Bass_4:
(2)   86/  945D20 :                     ; 		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(2)   87/  945D20 :                     ; FmIns_Bass_8:
(2)   88/  945D20 :                     ; 		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(2)   89/  945D20 :                     ; FmIns_Synth_Plus:
(2)   90/  945D20 :                     ; 		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(2)   91/  945D20 :                     FmIns_Bass_club:
(2)   92/  945D20 :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(2)   93/  945D40 :                     ; FmIns_Bass_calm:
(2)   94/  945D40 :                     ; 		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(2)   95/  945D40 :                     ; FmIns_Trumpet_1:
(2)   96/  945D40 :                     ; 		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(2)   97/  945D40 :                     ; FmIns_Trumpet_carnival:
(2)   98/  945D40 :                     ; 		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(2)   99/  945D40 :                     ; FmIns_brass_eur:
(2)  100/  945D40 :                     ; 		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(2)  101/  945D40 :                     ; FmIns_Bass_Oil:
(2)  102/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(2)  103/  945D40 :                     ; FmIns_Organ_Ito:
(2)  104/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(2)  105/  945D40 :                     ; FmIns_Ding_Baseball:
(2)  106/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(2)  107/  945D40 :                     ; FmIns_DrumKick_gem:
(2)  108/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(2)  109/  945D40 :                     ; FmIns_ClosedHat:
(2)  110/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(2)  111/  945D40 :                     ; FmIns_PianoM1:
(2)  112/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(2)  113/  945D40 :                     ; FmIns_Bass_1:
(2)  114/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(2)  115/  945D40 :                     ; FmIns_Bass_2:
(2)  116/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(2)  117/  945D40 :                     ; FmIns_Bass_donna:
(2)  118/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(2)  119/  945D40 :                     ; FmIns_Bass_groove:
(2)  120/  945D40 :                     ; 		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(2)  121/  945D40 :                     FmIns_Bass_groove_2:
(2)  122/  945D40 :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(2)  123/  945D60 :                     ; FmIns_Bass_groove_gem:
(2)  124/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(2)  125/  945D60 :                     ; FmIns_Bass_italo:
(2)  126/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(2)  127/  945D60 :                     ; FmIns_Bass_duck:
(2)  128/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(2)  129/  945D60 :                     ; FmIns_Piano_Aqua:
(2)  130/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(2)  131/  945D60 :                     ; FmIns_Trumpet_2:
(2)  132/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(2)  133/  945D60 :                     ; FmIns_Trumpet_puy:
(2)  134/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(2)  135/  945D60 :                     ; FmIns_Marimba:
(2)  136/  945D60 :                     ; 		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(2)  137/  945D60 :                     ; FmIns_Ambient_dark:
(2)  138/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(2)  139/  945D60 :                     ; FmIns_Ambient_spook:
(2)  140/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(2)  141/  945D60 :                     ; FmIns_Ambient_3:
(2)  142/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(2)  143/  945D60 :                     ; FmIns_Ding_toy:
(2)  144/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(2)  145/  945D60 :                     ; FmIns_Brass_Puy:
(2)  146/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(2)  147/  945D60 :                     ; FmIns_Flaute_cave:
(2)  148/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(2)  149/  945D60 :                     ; FmIns_Banjo_puy:
(2)  150/  945D60 :                     ; 		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(2)  151/  945D60 :                     FmIns_PSynth_plus:
(2)  152/  945D60 :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(2)  153/  945D80 :                     ; FmIns_Ding_1:
(2)  154/  945D80 :                     ; 		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(2)  155/  945D80 :                     ; FmIns_Trombone_gem:
(2)  156/  945D80 :                     ; 		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(2)  157/  945D80 :                     ; FmIns_HBeat_tom:
(2)  158/  945D80 :                     ; 		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(2)  159/  945D80 :                     
(2)  160/  945D80 :                     
(1)   54/  945D80 :                     		include "sound/smpl_dac.asm"		; GEMA: DAC samples
(2)    1/  945D80 :                     ; ===========================================================================
(2)    2/  945D80 :                     ; -------------------------------------------------------------------
(2)    3/  945D80 :                     ; GEMA/Nikona DAC samples
(2)    4/  945D80 :                     ;
(2)    5/  945D80 :                     ; This is located on the Genesis area and can be
(2)    6/  945D80 :                     ; stored in ROM, and WORD-RAM.
(2)    7/  945D80 :                     ; * RAM IS possible with help of Sound_Update but it's
(2)    8/  945D80 :                     ;   not a good idea as samples are too long to fit. *
(2)    9/  945D80 :                     ;
(2)   10/  945D80 :                     ; SCD/CD32X:
(2)   11/  945D80 :                     ; - Stored on WORD-RAM
(2)   12/  945D80 :                     ;   CANNOT be used if Stamps are active/rendering, use
(2)   13/  945D80 :                     ;   PCM instead.
(2)   14/  945D80 :                     ;
(2)   15/  945D80 :                     ; 32X Cartridge:
(2)   16/  945D80 :                     ; - Always stored on the $880000(fixed) area.
(2)   17/  945D80 :                     ; - $900000(banked) is possible but requires the BANK to
(2)   18/  945D80 :                     ;   stay as-is.
(2)   19/  945D80 :                     ;
(2)   20/  945D80 :                     ; MACRO:
(2)   21/  945D80 :                     ; gSmplData Label,"file_path",loop_start
(2)   22/  945D80 :                     ;
(2)   23/  945D80 :                     ; Set loop_start to 0 if not using it.
(2)   24/  945D80 :                     ;
(2)   25/  945D80 :                     ; BASE C-5 samplerate is 16000hz
(2)   26/  945D80 :                     ; -------------------------------------------------------------------
(2)   27/  945D80 :                     
(2)   28/  945D80 :                     ; 	align $100
(2)   29/  945D80 :                     	;gSmplData Label,"file_path",loop_start
(2)   30/  945D80 :                     ; -----------------------------------------------------------
(2)   31/  945D80 : (MACRO)              	gSmplData DacIns_TEST,"sound/instr/smpl/test.wav",0
(2)   31/  945D80 :                                     align 4
(2)   31/  945D80 : =$945D80             DACINS_TEST    label *
(2)   31/  945D80 : 386F 00                     dc.b ((DACINS_TEST_e-DACINS_TEST_s)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>8)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>16)&$FF)
(2)   31/  945D83 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   31/  945D86 :                     DACINS_TEST_s:
(2)   31/  945D86 :                             binclude "sound/instr/smpl/test.wav",$2C
(2)   31/  94CCBE :                     DACINS_TEST_e:
(2)   31/  94CCBE :                                     align 4
(2)   32/  94CCC0 : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(2)   32/  94CCC0 :                                     align 4
(2)   32/  94CCC0 : =$94CCC0             DACINS_NADIE    label *
(2)   32/  94CCC0 : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(2)   32/  94CCC3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   32/  94CCC6 :                     DACINS_NADIE_s:
(2)   32/  94CCC6 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(2)   32/  95AC7A :                     DACINS_NADIE_e:
(2)   32/  95AC7A :                                     align 4
(2)   33/  95AC7C :                     
(2)   34/  95AC7C : (MACRO)              	gSmplData DacIns_wegot_kick,"sound/instr/smpl/wegot_kick.wav",0
(2)   34/  95AC7C :                                     align 4
(2)   34/  95AC7C : =$95AC7C             DACINS_WEGOT_KICK    label *
(2)   34/  95AC7C : 7407 00                     dc.b ((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>8)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>16)&$FF)
(2)   34/  95AC7F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   34/  95AC82 :                     DACINS_WEGOT_KICK_s:
(2)   34/  95AC82 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)   34/  95B3F6 :                     DACINS_WEGOT_KICK_e:
(2)   34/  95B3F6 :                                     align 4
(2)   35/  95B3F8 : (MACRO)              	gSmplData DacIns_wegot_crash,"sound/instr/smpl/wegot_crash.wav",0
(2)   35/  95B3F8 :                                     align 4
(2)   35/  95B3F8 : =$95B3F8             DACINS_WEGOT_CRASH    label *
(2)   35/  95B3F8 : C42C 00                     dc.b ((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>8)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>16)&$FF)
(2)   35/  95B3FB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   35/  95B3FE :                     DACINS_WEGOT_CRASH_s:
(2)   35/  95B3FE :                             binclude "sound/instr/smpl/wegot_crash.wav",$2C
(2)   35/  95E0C2 :                     DACINS_WEGOT_CRASH_e:
(2)   35/  95E0C2 :                                     align 4
(2)   36/  95E0C4 :                     
(1)   55/  95E0C4 :                     		include "game/data/bank_main.asm"
(2)    1/  95E0C4 :                     ; ===========================================================================
(2)    2/  95E0C4 :                     ; ----------------------------------------------------------------
(2)    3/  95E0C4 :                     ; BANK data
(2)    4/  95E0C4 :                     ; ----------------------------------------------------------------
(2)    5/  95E0C4 :                     
(2)    6/  95E0C4 : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/  95E0C4 : =$95E0C4             GLBL_LASTPHDMA  set *
(2)    6/   5E0C4 :                             dephase
(2)    6/   5E0C4 : =$5E0C4              GLBL_PHASEDMA   set *
(2)    6/   5E0C4 :                     
(2)    6/   5E0C4 :                                     align 2
(2)    6/   5E0C4 : =$5E0C4              ASCII_FONT        label *
(2)    6/   5E0C4 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/   5ECC4 :                                     align 2
(2)    6/   5ECC4 :                     
(2)    6/   5ECC4 : =$C00                GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)    6/  95ECC4 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)    7/  95ECC4 : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/  95ECC4 : =$95ECC4             GLBL_LASTPHDMA  set *
(2)    7/   5ECC4 :                             dephase
(2)    7/   5ECC4 : =$5ECC4              GLBL_PHASEDMA   set *
(2)    7/   5ECC4 :                     
(2)    7/   5ECC4 :                                     align 2
(2)    7/   5ECC4 : =$5ECC4              ASCII_FONT_W        label *
(2)    7/   5ECC4 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/   604C4 :                                     align 2
(2)    7/   604C4 :                     
(2)    7/   604C4 : =$1800               GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)    7/  9604C4 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)    8/  9604C4 : (MACRO)              		binclude_dma_e	Art_TESTBG,Art_TESTBG_e,"game/data/md/maps/test/art.bin"
(2)    8/  9604C4 : =$9604C4             GLBL_LASTPHDMA  set *
(2)    8/   604C4 :                             dephase
(2)    8/   604C4 : =$604C4              GLBL_PHASEDMA   set *
(2)    8/   604C4 :                     
(2)    8/   604C4 :                                     align 2
(2)    8/   604C4 : =$604C4              ART_TESTBG        label *
(2)    8/   604C4 :                                     binclude "game/data/md/maps/test/art.bin"
(2)    8/   68AE4 : =$68AE4              ART_TESTBG_E          label *
(2)    8/   68AE4 :                                     align 2
(2)    8/   68AE4 :                     
(2)    8/   68AE4 : =$8620               GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)    8/  968AE4 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)    9/  968AE4 : (MACRO)              		binclude_dma_e	Art_TESTBG2,Art_TESTBG2_e,"game/data/md/maps/test2/art.bin"
(2)    9/  968AE4 : =$968AE4             GLBL_LASTPHDMA  set *
(2)    9/   68AE4 :                             dephase
(2)    9/   68AE4 : =$68AE4              GLBL_PHASEDMA   set *
(2)    9/   68AE4 :                     
(2)    9/   68AE4 :                                     align 2
(2)    9/   68AE4 : =$68AE4              ART_TESTBG2        label *
(2)    9/   68AE4 :                                     binclude "game/data/md/maps/test2/art.bin"
(2)    9/   72364 : =$72364              ART_TESTBG2_E          label *
(2)    9/   72364 :                                     align 2
(2)    9/   72364 :                     
(2)    9/   72364 : =$9880               GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)    9/  972364 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)   10/  972364 :                     
(2)   11/  972364 : (MACRO)              		binclude_dma	Art_Haruna,"game/data/md/sprites/haruna/art.bin"
(2)   11/  972364 : =$972364             GLBL_LASTPHDMA  set *
(2)   11/   72364 :                             dephase
(2)   11/   72364 : =$72364              GLBL_PHASEDMA   set *
(2)   11/   72364 :                     
(2)   11/   72364 :                                     align 2
(2)   11/   72364 : =$72364              ART_HARUNA        label *
(2)   11/   72364 :                                     binclude "game/data/md/sprites/haruna/art.bin"
(2)   11/   751E4 :                                     align 2
(2)   11/   751E4 :                     
(2)   11/   751E4 : =$2E80               GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)   11/  9751E4 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)   12/  9751E4 : (MACRO)              		binclude_dma_e	Art_Sisi,Art_Sisi_e,"game/data/md/sprites/sisi/art.bin"
(2)   12/  9751E4 : =$9751E4             GLBL_LASTPHDMA  set *
(2)   12/   751E4 :                             dephase
(2)   12/   751E4 : =$751E4              GLBL_PHASEDMA   set *
(2)   12/   751E4 :                     
(2)   12/   751E4 :                                     align 2
(2)   12/   751E4 : =$751E4              ART_SISI        label *
(2)   12/   751E4 :                                     binclude "game/data/md/sprites/sisi/art.bin"
(2)   12/   75764 : =$75764              ART_SISI_E          label *
(2)   12/   75764 :                                     align 2
(2)   12/   75764 :                     
(2)   12/   75764 : =$580                GLBL_ENDPHDMA   set *-GLBL_PHASEDMA
(2)   12/  975764 :                                     phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(2)   13/  975764 :                     
(2)   14/  975764 :                     ; ----------------------------------------------------------------
(2)   15/  975764 :                     ; Everything else...
(2)   16/  975764 :                     ; ----------------------------------------------------------------
(2)   17/  975764 :                     
(2)   18/  975764 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)   19/  975784 :                     		align 2
(2)   20/  975784 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)   21/  975934 :                     		align 2
(2)   22/  975934 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)   23/  9759C4 :                     		align 2
(2)   24/  9759C4 :                     
(2)   25/  9759C4 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)   26/  9759E4 :                     		align 2
(2)   27/  9759E4 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)   28/  975A28 :                     		align 2
(2)   29/  975A28 :                     
(2)   30/  975A28 :                     Pal_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   31/  975A48 :                     		align 2
(2)   32/  975A48 :                     Map_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   33/  976308 :                     		align 2
(2)   34/  976308 :                     Pal_TESTBG2:	binclude "game/data/md/maps/test2/pal.bin"
(2)   35/  976328 :                     		align 2
(2)   36/  976328 :                     Map_TESTBG2:	binclude "game/data/md/maps/test2/map.bin"
(2)   37/  9774A8 :                     		align 2
(2)   38/  9774A8 :                     
(1)   56/  9774A8 :                     	; ------------------------------------------------
(1)   57/  9774A8 : (MACRO)              	data_dend DATA_BANK0_e
(1)   57/  9774A8 : =$39454              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   57/  9774A8 :                     
(1)   57/  9774A8 :                     
(1)   57/  9774A8 :                     
(1)   57/   774A8 :                                     dephase
(1)   58/   774A8 :                     
(1)   59/   774A8 :                     ; ============================================================
(1)   60/   774A8 :                     ; --------------------------------------------------------
(1)   61/   774A8 :                     ; 32X stuff only
(1)   62/   774A8 :                     ; --------------------------------------------------------
(1)   63/   774A8 :                     
(1)   64/   774A8 : (MACRO)              	data_dset DATA_BANK1
(1)   64/   774A8 :                     ; MCD_DBANK0:
(1)   64/   774A8 : =$774A8              DATA_BANK1 label *
(1)   64/  9774A8 :                                     phase $900000+(DATA_BANK1&$0FFFFF)
(1)   64/  9774A8 :                                     align 4
(1)   64/  9774A8 : =$9774A8             GLBL_MDATA_ST := *
(1)   65/  9774A8 :                     	; ------------------------------------------------
(1)   66/  9774A8 :                     		include "game/data/bank_mars.asm"
(2)    1/  9774A8 :                     ; ===========================================================================
(2)    2/  9774A8 :                     ; ----------------------------------------------------------------
(2)    3/  9774A8 :                     ; BANK data
(2)    4/  9774A8 :                     ; ----------------------------------------------------------------
(2)    5/  9774A8 :                     
(2)    6/  9774A8 :                     PalMars_Test:
(2)    7/  9774A8 :                     		binclude "game/data/mars/maps/test/pal.bin"
(2)    8/  977628 :                     		align 2
(2)    9/  977628 :                     MapMars_Test:
(2)   10/  977628 :                     		binclude "game/data/mars/maps/test/map.bin"
(2)   11/  977A28 :                     		align 2
(2)   12/  977A28 :                     PalMars_Haruna:
(2)   13/  977A28 :                     		binclude "game/data/mars/textures/haruna_pal.bin"
(2)   14/  977A48 :                     		align 2
(2)   15/  977A48 :                     PalMars_Sisi:
(2)   16/  977A48 :                     		binclude "game/data/mars/sprites/sisi/pal.bin"
(2)   17/  977A68 :                     		align 8
(2)   18/  977A68 :                     
(2)   19/  977A68 :                     ; ----------------------------------------------------
(2)   20/  977A68 :                     
(2)   21/  977A68 :                     PalMars_Test2:
(2)   22/  977A68 :                     		binclude "game/data/mars/objects/test/mtrl/test_pal.bin"
(2)   23/  977B68 :                     		binclude "game/data/mars/textures/doremi/pal.bin"	; FILLER
(2)   24/  977D68 :                     		align 2
(2)   25/  977D68 :                     
(2)   26/  977D68 :                     ; ===========================================================
(2)   27/  977D68 :                     ; ----------------------------------------------------
(2)   28/  977D68 :                     ; 32X GRAPHICS BANKS
(2)   29/  977D68 :                     ; ----------------------------------------------------
(2)   30/  977D68 :                     
(2)   31/  977D68 : (MACRO)              		mars_VramStart ArtMars_Test2D		; Graphics/Texture pack START
(2)   31/  977D68 : =$977D68             ARTMARS_TEST2D label *
(2)   31/       0 :                                     phase 0
(2)   32/       0 :                     ; ----------------------------------------------------
(2)   33/       0 :                     ArtMars_TestArt:
(2)   34/       0 :                     		binclude "game/data/mars/maps/test/art.bin"
(2)   35/    FD00 :                     		align 8
(2)   36/    FD00 :                     ArtMars_Sisi:
(2)   37/    FD00 :                     		binclude "game/data/mars/sprites/sisi/art.bin"
(2)   38/   10900 :                     		align 8
(2)   39/   10900 :                     Textr_Haruna:
(2)   40/   10900 :                     		binclude "game/data/mars/textures/haruna_art.bin"
(2)   41/   17200 :                     		align 8
(2)   42/   17200 :                     ; ----------------------------------------------------
(2)   43/   17200 : (MACRO)              		mars_VramEnd ArtMars_Test2D_e		; Graphics/Texture pack END
(2)   43/   17200 :                                     align 8
(2)   43/   17200 :                     .end:
(2)   43/   17200 :                     ;               if MOMPASS == 1
(2)   43/   17200 :  (MACRO-2)                                   erreport "32X VRAM DATA",.end,$18000
(2)   43/   17200 :                     ;               endif
(2)   43/  98EF68 :                                     dephase
(2)   43/  98EF68 : =$98EF68             ARTMARS_TEST2D_E label *
(2)   44/  98EF68 :                     
(2)   45/  98EF68 :                     
(1)   67/  98EF68 :                     	; ------------------------------------------------
(1)   68/  98EF68 : (MACRO)              	data_dend DATA_BANK1_e
(1)   68/  98EF68 : =$17AC0              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   68/  98EF68 :                     
(1)   68/  98EF68 :                     
(1)   68/  98EF68 :                     
(1)   68/   8EF68 :                                     dephase
(1)   69/   8EF68 :                     
(1)   70/   8EF68 :                     ; ============================================================
(1)   71/   8EF68 :                     ; --------------------------------------------------------
(1)   72/   8EF68 :                     ; STAMP BANK test
(1)   73/   8EF68 :                     ; --------------------------------------------------------
(1)   74/   8EF68 :                     
(1)   75/   8EF68 : (MACRO)              	data_dset DATA_BNKSTAMP
(1)   75/   8EF68 :                     ; MCD_DBANK0:
(1)   75/   8EF68 : =$8EF68              DATA_BNKSTAMP label *
(1)   75/  98EF68 :                                     phase $900000+(DATA_BNKSTAMP&$0FFFFF)
(1)   75/  98EF68 :                                     align 4
(1)   75/  98EF68 : =$98EF68             GLBL_MDATA_ST := *
(1)   76/  98EF68 :                     	; ------------------------------------------------
(1)   77/  98EF68 :                     		include "game/data/stamps_0.asm"
(2)    1/  98EF68 :                     ; ===========================================================================
(2)    2/  98EF68 :                     ; ----------------------------------------------------------------
(2)    3/  98EF68 :                     ; BANK data for STAMPS ONLY
(2)    4/  98EF68 :                     ;
(2)    5/  98EF68 :                     ; GRAPHICS go first, first $80 bytes are blank/free
(2)    6/  98EF68 :                     ; ----------------------------------------------------------------
(2)    7/  98EF68 :                     
(2)    8/       0 :                     		phase 0		; Labels start at 0
(2)    9/       0 :                     ; ===================================================================
(2)   10/       0 :                     ; ----------------------------------------------------------------
(2)   11/       0 :                     ; STAMP GRAPHICS GO FIRST
(2)   12/       0 :                     ; ----------------------------------------------------------------
(2)   13/       0 :                     
(2)   14/       0 : 00                  		dc.b 0
(2)   15/       1 :                     		align $80
(2)   16/      80 :                     		binclude "game/data/mcd/stamps/test/art.bin"
(2)   17/    6080 :                     ; 		binclude "game/data/mcd/stamps/haruna/art.bin"
(2)   18/    6080 :                     
(2)   19/    6080 :                     ; ===================================================================
(2)   20/  994FE8 :                     		dephase
(2)   21/  994FE8 :                     
(2)   22/  994FE8 :                     
(1)   78/  994FE8 :                     	; ------------------------------------------------
(1)   79/  994FE8 : (MACRO)              	data_dend DATA_BNKSTAMP_e
(1)   79/  994FE8 : =$6080               GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   79/  994FE8 :                     
(1)   79/  994FE8 :                     
(1)   79/  994FE8 :                     
(1)   79/   94FE8 :                                     dephase
(1)   80/   94FE8 :                     
     384/   94FE8 :                     
     385/   94FE8 :                     ; ====================================================================
     386/   94FE8 :                     ; ----------------------------------------------------------------
     387/   94FE8 :                     ; Cartridge-ONLY Section, direct label access
     388/   94FE8 :                     ;
     389/   94FE8 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     390/   94FE8 :                     ; ----------------------------------------------------------------
     391/   94FE8 :                     
     393/   94FE8 :                     
     394/   94FE8 :                     ; --------------------------------------------------------
     395/   94FE8 :                     ; ROM only DMA graphics data
     396/   94FE8 :                     ; --------------------------------------------------------
     397/   94FE8 :                     
     398/   94FE8 :                     		include "game/data/ROM_dma_vdp.asm"
(1)    1/   94FE8 :                     ; ===========================================================================
(1)    2/   94FE8 :                     ; ----------------------------------------------------------------
(1)    3/   94FE8 :                     ; DMA Genesis graphics for Cartridge ONLY
(1)    4/   94FE8 :                     ; ----------------------------------------------------------------
(1)    5/   94FE8 :                     		align 2
(1)    6/   94FE8 :                     ; --------------------------------------------------------
(1)    7/   94FE8 :                     
     399/   94FE8 :                     
     400/   94FE8 :                     ; --------------------------------------------------------
     401/   94FE8 :                     ; ROM-only 32X data
     402/   94FE8 :                     ;
     403/   94FE8 :                     ; In the case of RV bit (during DMA):
     404/   94FE8 :                     ; Only the PWM samples are protected, everything else
     405/   94FE8 :                     ; will be trashed.
     406/   94FE8 :                     ; --------------------------------------------------------
     407/   94FE8 :                     
     408/ 2094FE8 :                     		phase CS1+*
     409/ 2094FE8 :                     ; ------------------------------------------------
     410/ 2094FE8 :                     		align 4
     411/ 2094FE8 :                     		include "game/data/mars/objects/list_ROM.asm"	; 3D objects
(1)    1/ 2094FE8 :                     ; ===========================================================================
(1)    2/ 2094FE8 :                     ; ----------------------------------------------------------------
(1)    3/ 2094FE8 :                     ; Special include for the 3D models, ROM-ONLY VERSION
(1)    4/ 2094FE8 :                     ;
(1)    5/ 2094FE8 :                     ; THIS CAN'T BE USED ON SCD/CD32X
(1)    6/ 2094FE8 :                     ; ----------------------------------------------------------------
(1)    7/ 2094FE8 :                     
(1)    8/ 2094FE8 :                     ; 		include "game/data/mars/objects/test/head.asm"
(1)    9/ 2094FE8 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(1)   10/ 2094FE8 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(1)   11/ 2094FE8 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(1)   12/ 2094FE8 :                     
     412/ 2094FE8 :                     		include "sound/ROM_smpl_pwm.asm"		; PWM samples
(1)    1/ 2094FE8 :                     ; ===========================================================================
(1)    2/ 2094FE8 :                     ; -------------------------------------------------------------------
(1)    3/ 2094FE8 :                     ; GEMA/Nikona PWM instruments on Cartridge ONLY
(1)    4/ 2094FE8 :                     ;
(1)    5/ 2094FE8 :                     ; - This CANNOT be used on CD/CD32X
(1)    6/ 2094FE8 :                     ; - This section is protected by the RV bit, quality will decrase
(1)    7/ 2094FE8 :                     ;   during playback.
(1)    8/ 2094FE8 :                     ;
(1)    9/ 2094FE8 :                     ; MACRO:
(1)   10/ 2094FE8 :                     ; gSmplData Label,"file_path",loop_start
(1)   11/ 2094FE8 :                     ;
(1)   12/ 2094FE8 :                     ; Set loop_start to 0 if not using it.
(1)   13/ 2094FE8 :                     ;
(1)   14/ 2094FE8 :                     ; BASE C-5 samplerate is 16000hz
(1)   15/ 2094FE8 :                     ; -------------------------------------------------------------------
(1)   16/ 2094FE8 :                     
(1)   17/ 2094FE8 :                     	align 4
(1)   18/ 2094FE8 :                     	;gSmplData Label,"file_path",loop_start
(1)   19/ 2094FE8 :                     ; -----------------------------------------------------------
(1)   20/ 2094FE8 :                     ; 	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(1)   21/ 2094FE8 : (MACRO)              	gSmplData PwmIns_Nadie,"sound/instr/smpl/nadie_st.wav",0
(1)   21/ 2094FE8 :                                     align 4
(1)   21/ 2094FE8 : =$2094FE8            PWMINS_NADIE    label *
(1)   21/ 2094FE8 : 50BF 01                     dc.b ((PWMINS_NADIE_e-PWMINS_NADIE_s)&$FF),(((PWMINS_NADIE_e-PWMINS_NADIE_s)>>8)&$FF),(((PWMINS_NADIE_e-PWMINS_NADIE_s)>>16)&$FF)
(1)   21/ 2094FEB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/ 2094FEE :                     PWMINS_NADIE_s:
(1)   21/ 2094FEE :                             binclude "sound/instr/smpl/nadie_st.wav",$2C
(1)   21/ 20B0F3E :                     PWMINS_NADIE_e:
(1)   21/ 20B0F3E :                                     align 4
(1)   22/ 20B0F40 : (MACRO)              	gSmplData PwmIns_Piano,"sound/instr/smpl/piano_1.wav",0
(1)   22/ 20B0F40 :                                     align 4
(1)   22/ 20B0F40 : =$20B0F40            PWMINS_PIANO    label *
(1)   22/ 20B0F40 : 1647 00                     dc.b ((PWMINS_PIANO_e-PWMINS_PIANO_s)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>8)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>16)&$FF)
(1)   22/ 20B0F43 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   22/ 20B0F46 :                     PWMINS_PIANO_s:
(1)   22/ 20B0F46 :                             binclude "sound/instr/smpl/piano_1.wav",$2C
(1)   22/ 20B565C :                     PWMINS_PIANO_e:
(1)   22/ 20B565C :                                     align 4
(1)   23/ 20B565C : (MACRO)              	gSmplData PwmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(1)   23/ 20B565C :                                     align 4
(1)   23/ 20B565C : =$20B565C            PWMINS_PKICK    label *
(1)   23/ 20B565C : 7407 00                     dc.b ((PWMINS_PKICK_e-PWMINS_PKICK_s)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>8)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>16)&$FF)
(1)   23/ 20B565F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   23/ 20B5662 :                     PWMINS_PKICK_s:
(1)   23/ 20B5662 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   23/ 20B5DD6 :                     PWMINS_PKICK_e:
(1)   23/ 20B5DD6 :                                     align 4
(1)   24/ 20B5DD8 : (MACRO)              	gSmplData PwmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(1)   24/ 20B5DD8 :                                     align 4
(1)   24/ 20B5DD8 : =$20B5DD8            PWMINS_PTOM    label *
(1)   24/ 20B5DD8 : B40B 00                     dc.b ((PWMINS_PTOM_e-PWMINS_PTOM_s)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>8)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>16)&$FF)
(1)   24/ 20B5DDB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/ 20B5DDE :                     PWMINS_PTOM_s:
(1)   24/ 20B5DDE :                             binclude "sound/instr/smpl/sauron_tom.wav",$2C
(1)   24/ 20B6992 :                     PWMINS_PTOM_e:
(1)   24/ 20B6992 :                                     align 4
(1)   25/ 20B6994 :                     
     413/ 20B6994 :                     ; ------------------------------------------------
     414/   B6994 :                     		dephase
     415/   B6994 :                     
     416/   B6994 :                     ; ----------------------------------------------------------------
     417/   B6994 :                     
     419/   B6994 :                     
     420/   B6994 :                     ; ====================================================================
     421/   B6994 :                     ; ------------------------------------------------
     422/   B6994 :                     ; End
     423/   B6994 :                     ; ------------------------------------------------
     424/   B6994 :                     
     425/   B6994 :                     ROM_END:
     426/   B6994 : 00                  		dc.b 0
     427/   B6995 :                     		align $8000
     428/   B8000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 09/14/2024 05:32:19 AM


  Symbol Table (* = unused):
  --------------------------

 ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARTMARS_SISI :                FD00 C |  ARTMARS_TEST2D :            977D68 C |
 ARTMARS_TEST2D_E :          98EF68 C |  ARTMARS_TESTART :                0 C |
 ART_HARUNA :                 72364 C |  ART_SISI :                   751E4 C |
 ART_SISI_E :                 75764 C |  ART_TESTBG :                 604C4 C |
 ART_TESTBG2 :                68AE4 C |  ART_TESTBG2_E :              72364 C |
 ART_TESTBG_E :               68AE4 C |  ASCII_FONT :                 5E0C4 C |
 ASCII_FONT_W :               5ECC4 C |  ATK :                            8 - |
*ATTRH :                        800 - | *ATTRPRIO :                    8000 - |
*ATTRV :                       1000 - |  BANKSET :                        4 - |
*BIGENDIAN :                      0 - | *BITATTRH :                       3 - |
*BITATTRPRIO :                    7 - | *BITATTRV :                       4 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
*BITJOYPEN :                      7 - | *BITJOYRED :                      4 - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
 BITMAPMD :                       1 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CACHE_MASTER :             6001DD8 C |
*CACHE_MASTER_E :           6001DD8 C |  CACHE_SLAVE :              6001DD8 C |
 CACHE_SLAVE_E :            600246C C |  CACHSLV_CURRPAGE :             690 C |
 CACH_BKUP_LB :                 498 C |  CACH_BKUP_LPZ :                4C4 C |
 CACH_BKUP_S :                  4C4 C |  CACH_BKUP_SPZ :                4E0 C |
 CACH_DDA_LAST :                410 C |  CACH_DDA_SRC :                 420 C |
 CACH_DDA_SRC_L :               440 C |  CACH_DDA_SRC_R :               450 C |
 CACH_DDA_TOP :                 400 C |  CACH_LNDRW_L :                 460 C |
 CACH_LNDRW_S :                 498 C | *CASESENSITIVE :                  0 - |
 CDRAMDST :                      31 C |  CDRAMLEN :                      30 C |
 CDRAMSRC :                      33 C |  CDRAMSRCB :                     35 C |
 CHIP_ENV :                    11B8 C |  CHIP_ENV.ATKEND :             123E C |
*CHIP_ENV.ATKZERO :            1241 C |  CHIP_ENV.CHK2 :               1247 C |
 CHIP_ENV.CHK4 :               127C C |  CHIP_ENV.CKOF :               11DF C |
 CHIP_ENV.CKON :               11F2 C | *CHIP_ENV.DECTMR :             124B C |
 CHIP_ENV.DKADD :              1265 C |  CHIP_ENV.DKSAV :              126D C |
 CHIP_ENV.DKYEND :             1272 C |  CHIP_ENV.DO_NFREQ :           12D1 C |
 CHIP_ENV.ENVPROC :            1210 C |  CHIP_ENV.KILLENV :            1292 C |
*CHIP_ENV.NBLOCK :             1210 C |  CHIP_ENV.NORMAL :             12CC C |
 CHIP_ENV.NOUPD :              1312 C |  CHIP_ENV.NSKIP :              1207 C |
 CHIP_ENV.SILNC_3 :            12C8 C |  CHIP_ENV.VEDLP :              129A C |
 CHIP_ENV.VLMUCH :             12FE C |  CHIP_ENV.VLOOP :              11C7 C |
 CHIP_ENV.VONLY :              12F4 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - |  COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                     3F C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFE55C - | *CONTROLLER_2 :    FFFFFFFFFFFFE56C - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CURRTICKBITS :                1CF6 C | *CUSTOM :                         0 - |
 CYCLE :                         32 - | *DACINS_NADIE :              94CCC0 C |
 DACINS_TEST :               945D80 C |  DACINS_WEGOT_CRASH :        95B3F8 C |
 DACINS_WEGOT_KICK :         95AC7C C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     134D C |
 DAC_ON :                      1338 C |  DAC_PLAY :                    1362 C |
 DAC_REFILL :                  1396 C |  DAC_REFILL.DACFILL_END :      1455 C |
 DAC_REFILL.DACFILL_LOOP :     140E C |  DAC_REFILL.DACFILL_RET :      1458 C |
 DAC_REFILL.DAC_OVER :         13E4 C |  DATA_BANK0 :                 3E052 C |
 DATA_BANK1 :                 774A8 C |  DATA_BNKSTAMP :              8EF68 C |
 DATE :                "09/14/2024" - |  DBUG_DAC :                       0 - |
 DDACCNTR :                    1BEC C |  DDACFIFOMID :                 1BE8 C |
 DDACPNTR :                    1BE9 C | *DEF_HSIZE_128 :                100 - |
*DEF_HSIZE_32 :                  40 - |  DEF_HSIZE_64 :                  80 - |
 DEF_MAXSTAMPCOUT :              60 - |  DEF_PRINTPAL :                6000 - |
 DEF_PRINTVRAM :                5A0 - |  DEF_PRINTVRAMW :               4E0 - |
*DEF_SAVEINFO :    FFFFFFFFFFFF1F5C C |  DEF_VRAM_BG :                 E000 - |
 DEF_VRAM_FG :                 C000 - |  DEF_VRAM_HSCRL :              FC00 - |
 DEF_VRAM_SPR :                F800 - |  DEF_VRAM_WD :                 D000 - |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - |  DREQCTL :                        6 - |
 DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_BUFF0 :                   200 - |  DREQ_BUFF1 :                   220 - |
 DREQ_BUFF2 :                   620 - |  DREQ_LEN :                     A20 - |
 DREQ_PALETTE :                   0 - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               ED C |  DRV_LOOP.CMND_1 :               F0 C |
 DRV_LOOP.CMND_2 :              109 C |  DRV_LOOP.CMND_3 :              143 C |
 DRV_LOOP.CMND_5 :              181 C |  DRV_LOOP.CMND_6 :              1BA C |
 DRV_LOOP.CMND_7 :              1F3 C |  DRV_LOOP.CMND_RDSLOT :         211 C |
 DRV_LOOP.DEL_ALL :             17A C |  DRV_LOOP.GETCBYTEL :            C0 C |
 DRV_LOOP.GRAB_ARG :             BE C |  DRV_LOOP.LIST :                 DD C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.NOT_PAL :             206 C |  DRV_LOOP.SRCH_DEL :            161 C |
 DRV_LOOP.SRCH_FVOL :           19F C |  DRV_LOOP.SRCH_MODE :           129 C |
 DRV_LOOP.SRCH_SLOT :           224 C |  DRV_LOOP.SRCH_VOL :            1D8 C |
 DRV_LOOP.WRTTO_DEL :           16E C |  DRV_LOOP.WRTTO_FVOL :          1AC C |
 DRV_LOOP.WRTTO_SLOT :          138 C |  DRV_LOOP.WRTTO_VOL :           1E5 C |
 DRWSLD_NEXTPZ :            6001D76 C |  DRWSLD_NXTLINE :           6001CD2 C |
 DRWSLD_NXTLINE.L_FIX :     6001D1A C |  DRWSLD_NXTLINE.REVERS :    6001D04 C |
 DRWSLD_NXTLINE.R_FIX :     6001D14 C |  DRWSLD_NXTLINE_TEX :       6001B5C C |
 DRWSLD_NXTLINE_TEX.FROM_ROM :                                      6001C1E C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                                 6001C6E C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                                     6001C26 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                                        6001BE6 C |
 DRWSLD_NXTLINE_TEX.TRNS2 : 6001C5C C |
 DRWSLD_NXTLINE_TEX.TRNS_1 :                                        6001C3C C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                                        6001BD2 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                                      6001BA4 C |
 DRWSLD_NXTLINE_TEX.W_FB :  6001C20 C |  DRWSLD_UPDLINE :           6001D6C C |
 DRWSLD_UPDLINE_TEX :       6001C88 C |  DRWTASK_EXIT :             6001DB2 C |
 DRWTASK_PURGE :            6001D96 C |  DRWTASK_RETURN :           6001D96 C |
 DRWTEX_NEXTPZ :            6001CA4 C | *DRWTSK1_NEWPZ :            6001AC8 C |
 DRWTSK1_NEWPZ.INVLD_Y :    6001AF2 C |  DRWTSK1_NEWPZ.LEN_MAX :    6001AEC C |
*DRWTSK1_NEWPZ.NO_PZ :      6001AF8 C |  DRWTSK1_NEWPZ.VALID_Y :    6001AFC C |
 DRWTSK_SOLIDMODE :         6001CC0 C |  DRWTSK_SOLIDMODE.WAIT :    6001CCC C |
 DRWTSK_TEXMODE :           6001B3C C |  DRWTSK_TEXMODE.TEX_VALID : 6001B48 C |
 DTBL_MULTI :                   81C C |  DTBL_SINGL :                   832 C |
 DTBL_SINGL.CHNL_ULNK :         F98 C |  DTBL_SINGL.CHNL_ULNKCUT :      F92 C |
 DTBL_SINGL.CHNL_ULNKOFF :      F98 C |  DTBL_SINGL.COMN_PANLIST :      D43 C |
 DTBL_SINGL.DAC_CUT :           B8D C |  DTBL_SINGL.DAC_OFF :           B93 C |
 DTBL_SINGL.DAC_PITCH :         B96 C |  DTBL_SINGL.D_CONT :            CFC C |
 DTBL_SINGL.EFFC :              C69 C |  DTBL_SINGL.EFFC_D :            C84 C |
 DTBL_SINGL.EFFC_E :            CC7 C |  DTBL_SINGL.EFFC_F :            CDC C |
 DTBL_SINGL.EFFC_X :            CFD C |  DTBL_SINGL.FINE_DOWN :         C9F C |
 DTBL_SINGL.FINE_UP :           CB3 C |  DTBL_SINGL.FM_CINDX :          B27 C |
 DTBL_SINGL.FM_CUT :            A72 C |  DTBL_SINGL.FM_HASVOL :         F2C C |
 DTBL_SINGL.FM_KEYOFF :         A7B C |  DTBL_SINGL.FM_OFF :            A6C C |
 DTBL_SINGL.FM_SETFREQ :        A9A C |  DTBL_SINGL.FM_SETRLIST :       E43 C |
 DTBL_SINGL.FM_TLOFF :          A83 C |  DTBL_SINGL.FM_WRTALPAN :       B2F C |
 DTBL_SINGL.FM_WRTLVOL :        AB1 C |  DTBL_SINGL.FND_OCT :           F7D C |
 DTBL_SINGL.FROM_PSGN :         94E C |  DTBL_SINGL.GET_OCT :           F72 C |
 DTBL_SINGL.INST :              D74 C |  DTBL_SINGL.INS_DAC :           E53 C |
 DTBL_SINGL.INS_FM :            DD5 C |  DTBL_SINGL.INS_PCM :           EA7 C |
 DTBL_SINGL.INS_PSG :           D9F C |  DTBL_SINGL.INS_PSGN :          D99 C |
 DTBL_SINGL.INS_PWM :           EDF C | *DTBL_SINGL.INVL_INS :          D98 C |
 DTBL_SINGL.KEEP_TLMX :         B1C C |  DTBL_SINGL.KYCUT_PSG :         91C C |
 DTBL_SINGL.KYCUT_PSGN :        919 C |  DTBL_SINGL.KYOFF_PSG :         90F C |
 DTBL_SINGL.KYOFF_PSGN :        90C C |  DTBL_SINGL.KYPSGN_HATOFF :     926 C |
 DTBL_SINGL.LINKED :            89C C |  DTBL_SINGL.MKFM_SET :          9FD C |
 DTBL_SINGL.MK_DAC :            B65 C |  DTBL_SINGL.MK_FM :             991 C |
 DTBL_SINGL.MK_FMSPC :          A11 C |  DTBL_SINGL.MK_LIST :           8D7 C |
 DTBL_SINGL.MK_PCM :            BBC C |  DTBL_SINGL.MK_PSG :            92D C |
 DTBL_SINGL.MK_PSGN :           8E5 C |  DTBL_SINGL.MK_PWM :            BBD C |
 DTBL_SINGL.NEW_ROMDAT :        E06 C | *DTBL_SINGL.NOFM_NOTE :         A10 C |
 DTBL_SINGL.NORM_DOWN :         C9D C |  DTBL_SINGL.NORM_UP :           CB5 C |
 DTBL_SINGL.NOTE :              F22 C |  DTBL_SINGL.NOT_DAC :           9B0 C |
 DTBL_SINGL.NOT_DSPC :          9C5 C |  DTBL_SINGL.NOT_PAL :           9E5 C |
 DTBL_SINGL.NOT_PALP :          963 C |  DTBL_SINGL.NO_LFO :            B64 C |
 DTBL_SINGL.N_FM :              F68 C |  DTBL_SINGL.N_INDX :            F54 C |
 DTBL_SINGL.N_PSGN :            F63 C |  DTBL_SINGL.N_STFREQ :          F55 C |
 DTBL_SINGL.PAN_MCD :           D2D C |  DTBL_SINGL.PCM_PANLIST :       D4B C |
 DTBL_SINGL.PSG_KEYON :         97C C |  DTBL_SINGL.PWM_CUT :           C3A C |
 DTBL_SINGL.PWM_OFF :           C33 C |  DTBL_SINGL.PWM_SETCOFF :       C3F C |
 DTBL_SINGL.PW_EFFC :           BE9 C |  DTBL_SINGL.PW_NOTE :           BED C |
 DTBL_SINGL.PW_SEND :           BEF C |  DTBL_SINGL.RCYL_COM :          887 C |
*DTBL_SINGL.READFREQ_PCM :      C49 C |  DTBL_SINGL.READFREQ_PWM :      C4E C |
 DTBL_SINGL.RES_PAN :           D23 C |  DTBL_SINGL.SAME_PATCH :        E3E C |
 DTBL_SINGL.SAVE_ARG :          CF1 C |  DTBL_SINGL.SET_WAVFREQ :       C51 C |
 DTBL_SINGL.SILN_DAC :          893 C |  DTBL_SINGL.SILN_FM :           896 C |
 DTBL_SINGL.SILN_PCM :          871 C |  DTBL_SINGL.SILN_PSG :          86A C |
 DTBL_SINGL.SILN_PSG_N :        866 C |  DTBL_SINGL.SILN_PWM :          87D C |
 DTBL_SINGL.SPCREGLIST :        A64 C |  DTBL_SINGL.TL_DOWN :           A8F C |
 DTBL_SINGL.VMUCH :             98B C |  DTBL_SINGL.VOLU :              D6B C |
 DTBL_SINGL.VOL_DVLD :          CC3 C |  DTBL_SINGL.VPWM_MUCH :         C0D C |
 DTBL_SINGL.VPWM_SILN :         C0B C |  DTBL_SINGL.WRITE_TL :          B15 C |
 DTBL_SINGL.WR_SPC :            A47 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
 EMU :                            0 - |  EXTINT_DEFAULT :  FFFFFFFFFFFF1C90 C |
*EXT_3 :                          C - | *EXT_4 :                          E - |
 FALSE :                          0 - | *FEN :                            2 - |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
 FM :                            80 - |  FMCACH_1 :                    169A C |
 FMCACH_2 :                    16C2 C |  FMCACH_3 :                    16EA C |
 FMCACH_4 :                    1712 C |  FMCACH_5 :                    173A C |
 FMCACH_6 :                    1762 C |  FMCACH_LIST :                 1BDA C |
 FMFREQ_LIST :                 1466 C |  FMINS_BASS_CLUB :           945D20 C |
 FMINS_BASS_DUCK :           945CC0 C |  FMINS_BASS_GROOVE_2 :       945D40 C |
 FMINS_CLOSEDHAT :           945CE0 C | *FMINS_DRUMS_KICK1 :         945C40 C |
 FMINS_HBEAT_TOM :           945C80 C | *FMINS_PIANO_AQUA :          945C60 C |
 FMINS_PSYNTH_PLUS :         945D60 C | *FMINS_SP_CLOSEDHAT :        945BF0 C |
*FMINS_SP_COWBELL :          945C18 C |  FMINS_SP_OPENHAT :          945BC8 C |
 FMINS_TRUMPET_1 :           945CA0 C |  FMINS_TRUMPET_CARNIVAL :    945D00 C |
 FMSPECIAL :                   1CF5 C |  FM_AUTOREG :                  131E C |
 FM_SEND_1 :                   1322 C |  FM_SEND_2 :                   132D C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF0170 C |
 GEMADMARESUME :   FFFFFFFFFFFF018E C |  GEMAFADESEQ :     FFFFFFFFFFFF0222 C |
 GEMAINIT :        FFFFFFFFFFFF0000 C |
 GEMAINIT.CLEANUP :                                        FFFFFFFFFFFF002C C |
 GEMAINIT.COPY :   FFFFFFFFFFFF003C C |
 GEMAINIT.NOT_PAL :                                        FFFFFFFFFFFF0062 C |
 GEMAINIT.WAIT :   FFFFFFFFFFFF0014 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :     FFFFFFFFFFFF01CC C |  GEMARESET :       FFFFFFFFFFFF0076 C |
 GEMASETBEATS :    FFFFFFFFFFFF025A C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01BA C |
 GEMASETSEQVOL :   FFFFFFFFFFFF023E C |  GEMASTOPALL :     FFFFFFFFFFFF0206 C |
 GEMASTOPSEQ :     FFFFFFFFFFFF01EA C |  GEMATEST :        FFFFFFFFFFFF01AC C |
 GEMAUPDATE :      FFFFFFFFFFFF0088 C |
 GEMAUPDATE.COPY_BYTES :                                   FFFFFFFFFFFF00C6 C |
 GEMAUPDATE.NO_SIZE :                                      FFFFFFFFFFFF00D4 C |
 GEMAUPDATE.NO_TASK :                                      FFFFFFFFFFFF00DA C |
 GEMA_INIT :                   1071 C |  GEMA_INIT.END_SETUP :         10AC C |
 GEMA_INIT.SETUP_LIST :        1081 C |  GEMA_INIT.ST_COPY :           10A0 C |
 GEMA_LASTBANK :               145C C |  GEMA_LASTBANK.WRITE :         1461 C |
 GET_TICK :                    10DD C |  GET_TICK.CTNOTICK :           10FA C |
 GLBL_ENDPHDMA :                580 - | *GLBL_GEMABASE :             93E054 - |
 GLBL_LASTORG :    FFFFFFFFFFFFB800 - |  GLBL_LASTPC :     FFFFFFFFFFFF2C00 - |
 GLBL_LASTPHDMA :            9751E4 - |  GLBL_MDATA_RP :               6080 - |
 GLBL_MDATA_ST :             98EF68 - |  GLBL_PHASEDMA :              751E4 - |
 GO_DRWSLD_UPDLINE_TEX :    6001B34 C |  GO_DRWTEX_GONXTPZ :        6001B38 C |
 GTRK_BRINSTR :              94177B C |  GTRK_BRINSTR.BLK :          941789 C |
 GTRK_BRINSTR.INS :          941FAC C |  GTRK_BRINSTR.PAT :          941791 C |
 GTRK_GIGALO :               93E2C6 C |  GTRK_GIGALO.BLK :           93E2D4 C |
 GTRK_GIGALO.INS :           94023D C |  GTRK_GIGALO.PAT :           93E2E1 C |
 GTRK_MOVEME :               943C52 C |  GTRK_MOVEME.BLK :           943C60 C |
 GTRK_MOVEME.INS :           944B5A C |  GTRK_MOVEME.PAT :           943C78 C |
 GTRK_SAURON :               944BC2 C |  GTRK_SAURON.BLK :           944BD0 C |
 GTRK_SAURON.INS :           945B68 C |  GTRK_SAURON.PAT :           944BF6 C |
 GTRK_TEMPLE :               94025D C |  GTRK_TEMPLE.BLK :           94026B C |
 GTRK_TEMPLE.INS :           941763 C |  GTRK_TEMPLE.PAT :           94027D C |
 GTRK_TEST :                 93E078 C |  GTRK_TEST.BLK :             93E086 C |
 GTRK_TEST.INS :             93E28E C |  GTRK_TEST.PAT :             93E08E C |
 GTRK_WEGOT :                941FBC C |  GTRK_WEGOT.BLK :            941FCA C |
 GTRK_WEGOT.INS :            943C02 C |  GTRK_WEGOT.PAT :            941FE0 C |
 G_MSTRMODE_INITEXIT :      6000C1C C |  G_MSTR_COPYPALETTE :       6000C18 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   1F40 C |
 HEADEROUT_E :                 1F4E C |  HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF1C8E C |
*HIRQ_ON :                        4 - |  HTAG_CDSAVE :        "NIKONACD___" - |
*HTAG_CDVER :                   102 - |  HTAG_DATEINFO : "(C)USER 2024.???" - |
*HTAG_DISCID :        "NIKONACD   " - | *HTAG_DISCID_M :      "NIKONACD32X" - |
*HTAG_MARSCDSAV :     "NIKONACD32X" - |
 HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
*HTAG_NDM_PICO :         "Nikona PICO                                     " - |
 HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
*HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
*HTAG_SYSNAME :       "NIKONA-SDK " - |  HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
*HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1F5A C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  INT_M_LIST :               60002A0 C |
 INT_S_LIST :               60002E0 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
*JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
 LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - |  LITERAL_F_00000000_1 :     60004DC C |
 LITERAL_F_00000001_1 :     6000718 C |  LITERAL_F_00000002_1 :     600071C C |
 LITERAL_F_00000003_1 :     600073C C |  LITERAL_F_00000004_1 :     6000740 C |
 LITERAL_F_00000005_1 :     6000724 C |  LITERAL_F_00000006_1 :     6000742 C |
 LITERAL_F_00000007_1 :     6000744 C |  LITERAL_F_00000008_1 :     600072C C |
 LITERAL_F_00000009_1 :     6000734 C |  LITERAL_F_0000000A_1 :     6000738 C |
 LITERAL_F_0000000B_1 :     6000746 C |  LITERAL_F_0000000C_1 :     6000748 C |
 LITERAL_F_0000000D_1 :     60007BC C |  LITERAL_F_0000000E_1 :     6000854 C |
 LITERAL_F_0000000F_1 :     6000858 C |  LITERAL_F_00000010_1 :     600085C C |
 LITERAL_F_00000011_1 :     6000C0A C |  LITERAL_F_00000012_1 :     6000C0C C |
 LITERAL_F_00000013_1 :     6000C00 C |  LITERAL_F_00000014_1 :     6000C14 C |
 LITERAL_F_00000015_1 :     6000C04 C |  LITERAL_F_00000016_1 :     6000C8C C |
 LITERAL_F_00000017_1 :     6000C90 C |  LITERAL_F_00000018_1 :     6000E2C C |
 LITERAL_F_00000019_1 :     6000E30 C |  LITERAL_F_0000001A_1 :     6000E34 C |
 LITERAL_F_0000001B_1 :     6000E38 C |  LITERAL_F_0000001C_1 :     6000E44 C |
 LITERAL_F_0000001D_1 :     6000E48 C |  LITERAL_F_0000001E_1 :     6000E4C C |
 LITERAL_F_0000001F_1 :     6000E50 C |  LITERAL_F_00000020_1 :     6000E54 C |
 LITERAL_F_00000021_1 :     6000E58 C |  LITERAL_F_00000022_1 :     6000F00 C |
 LITERAL_F_00000023_1 :     6000F04 C |  LITERAL_F_00000024_1 :     6000F1E C |
 LITERAL_F_00000025_1 :     6000F08 C |  LITERAL_F_00000026_1 :     6000F80 C |
 LITERAL_F_00000027_1 :     6000F84 C |  LITERAL_F_00000028_1 :     6000F88 C |
 LITERAL_F_00000029_1 :     600104C C |  LITERAL_F_0000002A_1 :     6001050 C |
 LITERAL_F_0000002B_1 :     6001220 C |  LITERAL_F_0000002C_1 :     6001224 C |
 LITERAL_F_0000002D_1 :     60013C8 C |  LITERAL_F_0000002E_1 :     60014CC C |
 LITERAL_F_0000002F_1 :     60015BC C |  LITERAL_F_00000030_1 :     60015C0 C |
 LITERAL_F_00000031_1 :     60017D0 C |  LITERAL_F_00000032_1 :     60017D4 C |
 LITERAL_F_00000033_1 :     60017D8 C |  LITERAL_F_00000034_1 :     60017E0 C |
 LITERAL_F_00000035_1 :     60017E4 C |  LITERAL_F_00000036_1 :     60017E8 C |
 LITERAL_F_00000037_1 :     60019B0 C |  LITERAL_F_00000038_1 :     60019B4 C |
 LITERAL_F_00000039_1 :     60019B8 C |  LITERAL_F_0000003A_1 :     60019BC C |
 LITERAL_F_0000003B_1 :     60019C0 C |  LITERAL_F_0000003C_1 :     60019C4 C |
 LITERAL_F_0000003D_1 :     60019C8 C |  LITERAL_F_0000003E_1 :     60019CC C |
 LITERAL_F_0000003F_1 :     6001B1C C |  LITERAL_F_00000040_1 :     6001B20 C |
 LITERAL_F_00000041_1 :     6001B24 C |  LITERAL_F_00000042_1 :     6001CA8 C |
 LITERAL_F_00000043_1 :     6001CB0 C |  LITERAL_F_00000044_1 :     6001CB8 C |
 LITERAL_F_00000045_1 :     6001DCC C |  LITERAL_F_00000046_1 :         144 C |
 LITERAL_F_00000047_1 :         1BC C |  LITERAL_F_00000048_1 :         1C0 C |
 LITERAL_F_00000049_1 :         1C4 C |  LITERAL_F_0000004A_1 :         1C8 C |
 LITERAL_F_0000004B_1 :         1CC C |  LITERAL_F_0000004C_1 :         1D0 C |
 LITERAL_F_0000004D_1 :         1D4 C |  LITERAL_F_0000004E_1 :         1D8 C |
 LITERAL_F_0000004F_1 :         1DC C |  LITERAL_F_00000050_1 :         1E0 C |
 LITERAL_F_00000051_1 :         310 C |  LITERAL_F_00000052_1 :         394 C |
 LITERAL_F_00000053_1 :         534 C |  LITERAL_F_00000054_1 :         678 C |
 LITERAL_F_00000055_1 :         680 C |  LITERAL_F_00000056_1 :         684 C |
 LITERAL_L_00008000_1 :         30C C |  LITERAL_L_0001FF00_1 :         148 C |
 LITERAL_L_00A00000_1 :         67C C |  LITERAL_L_02000000_1 :     6000720 C |
 LITERAL_L_06000000_1 :     60004C4 C |  LITERAL_L_06000000_2 :     6000850 C |
 LITERAL_L_06000128_1 :     6000EFC C |  LITERAL_L_20000000_1 :     60004C8 C |
 LITERAL_L_20004000_1 :     60004C0 C |  LITERAL_L_20004000_2 :     60007B0 C |
 LITERAL_L_20004000_3 :     6000860 C |  LITERAL_L_20004000_4 :     6000A30 C |
 LITERAL_L_20004000_5 :     6000BF8 C |  LITERAL_L_20004000_6 :     6000C94 C |
 LITERAL_L_20004000_7 :     6000E20 C |  LITERAL_L_20004000_8 :     6000F0C C |
 LITERAL_L_20004000_9 :     6001048 C |  LITERAL_L_20004012_1 :     60004CC C |
 LITERAL_L_20004016_1 :     60004D4 C |  LITERAL_L_20004016_2 :     60007AC C |
 LITERAL_L_20004018_1 :     60004D0 C |  LITERAL_L_20004018_2 :     60007A8 C |
 LITERAL_L_2000401A_1 :     60004BC C |  LITERAL_L_2000401A_2 :     6000548 C |
 LITERAL_L_2000401C_1 :     60004B8 C |  LITERAL_L_2000401C_2 :         13C C |
 LITERAL_L_20004020_1 :     60008DC C |  LITERAL_L_20004021_1 :     6000F78 C |
 LITERAL_L_20004022_1 :     6000378 C |  LITERAL_L_20004024_1 :     600037C C |
 LITERAL_L_20004028_1 :     6000728 C |  LITERAL_L_2000402C_1 :     60004B4 C |
 LITERAL_L_2000402C_2 :     60008E0 C |  LITERAL_L_2000402C_3 :     6000A44 C |
 LITERAL_L_2000402C_4 :     6000C84 C |  LITERAL_L_2000402C_5 :     6000F10 C |
 LITERAL_L_2000402D_1 :     60008E4 C |  LITERAL_L_2000402D_2 :     6000A38 C |
 LITERAL_L_2000402D_3 :     6000C9C C |  LITERAL_L_2000402E_1 :     600054C C |
 LITERAL_L_2000402E_2 :     6000730 C |  LITERAL_L_2000402E_3 :     60007B4 C |
 LITERAL_L_2000402E_4 :     6000864 C |  LITERAL_L_2000402E_5 :     6000A3C C |
 LITERAL_L_2000402E_6 :     6000C88 C |  LITERAL_L_2000402E_7 :     6000E28 C |
 LITERAL_L_2000402E_8 :     6000F7C C |  LITERAL_L_2000402F_1 :     6000E3C C |
 LITERAL_L_2000402F_2 :     6000F8C C |  LITERAL_L_20004034_1 :         14C C |
 LITERAL_L_20004038_1 :         140 C |  LITERAL_L_20004100_1 :     6000A34 C |
 LITERAL_L_20004100_2 :     6000BFC C |  LITERAL_L_20004100_3 :     6000C98 C |
 LITERAL_L_20004100_4 :     6000E24 C |  LITERAL_L_20004100_5 :     60010E0 C |
 LITERAL_L_20004100_6 :     6001B18 C |  LITERAL_L_20004100_7 :     6001CB4 C |
 LITERAL_L_20004100_8 :     6001DC8 C |  LITERAL_L_20004200_1 :     6000E5C C |
 LITERAL_L_24000000_1 :     6000A40 C |  LITERAL_L_24000000_2 :     6000E40 C |
 LITERAL_L_24000000_3 :     60010E4 C |  LITERAL_L_24000000_4 :     6001168 C |
 LITERAL_L_24000000_5 :     60015B8 C |  LITERAL_L_24020000_1 :     60013C4 C |
 LITERAL_L_24020200_1 :     6001CAC C |  LITERAL_L_4D5F4F4B_1 :     60004E0 C |
 LITERAL_L_535F4F4B_1 :     60007C0 C |  LITERAL_L_7FFFFFFF_1 :     60017DC C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000A48 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     6000FE0 C |
 LITERAL_L_FFFFFFFFC00007F8_1 :                                     60004D8 C |
 LITERAL_L_FFFFFFFFC00007F8_2 :                                     60007B8 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     600084C C |
 LITERAL_L_FFFFFFFFC0000800_2 :                                     6000EF8 C |
 LITERAL_W_0080_1 :         6000A50 C |  LITERAL_W_0080_2 :         6000CA4 C |
 LITERAL_W_0080_3 :             152 C |  LITERAL_W_00A0_1 :         6001B2A C |
 LITERAL_W_00A1_1 :         6000E6A C |  LITERAL_W_00A2_1 :         60010F2 C |
 LITERAL_W_00C0_1 :         6000A52 C |  LITERAL_W_00C0_2 :         6000E66 C |
 LITERAL_W_00E0_1 :         60010F0 C |  LITERAL_W_00F0_1 :         60004F2 C |
 LITERAL_W_00F0_2 :         60007CA C |  LITERAL_W_00F0_3 :         6000C16 C |
 LITERAL_W_00F0_4 :         6000E6C C |  LITERAL_W_00FF_1 :         6000C12 C |
 LITERAL_W_0100_1 :         6000E62 C |  LITERAL_W_0100_2 :         60010EA C |
 LITERAL_W_0100_3 :             1E4 C |  LITERAL_W_0100_4 :             538 C |
 LITERAL_W_0105_1 :         6001054 C |  LITERAL_W_0140_1 :         6000C0E C |
 LITERAL_W_0140_2 :         60010EE C |  LITERAL_W_0160_1 :         60010E8 C |
 LITERAL_W_0180_1 :         6000A54 C |  LITERAL_W_01F0_1 :         600122A C |
 LITERAL_W_01FF_1 :         6000C10 C |  LITERAL_W_01FF_2 :         60015C6 C |
 LITERAL_W_0200_1 :         600073E C |  LITERAL_W_0200_2 :         6000A56 C |
 LITERAL_W_0200_3 :         6000C08 C |  LITERAL_W_0200_4 :         6000E68 C |
 LITERAL_W_0200_5 :         6001058 C |  LITERAL_W_0200_6 :         60010EC C |
 LITERAL_W_0200_7 :         60014D2 C |  LITERAL_W_0220_1 :         6000E60 C |
 LITERAL_W_0220_2 :         60014D0 C |  LITERAL_W_0220_3 :         60015C4 C |
 LITERAL_W_0530_1 :         600086C C |  LITERAL_W_0530_2 :         6000F18 C |
 LITERAL_W_059F_1 :         6001056 C |  LITERAL_W_0620_1 :         6000E64 C |
 LITERAL_W_0620_2 :         6001228 C |  LITERAL_W_0620_3 :         60014D4 C |
 LITERAL_W_07FF_1 :             154 C |  LITERAL_W_07FF_2 :             68A C |
 LITERAL_W_3FFF_1 :         6001CBE C |  LITERAL_W_44E0_1 :         60004E6 C |
 LITERAL_W_44E5_1 :         60004F0 C |  LITERAL_W_4800_1 :         6000870 C |
 LITERAL_W_4800_2 :         6000F1C C |  LITERAL_W_5A00_1 :         6001014 C |
 LITERAL_W_5A00_2 :         6001DD4 C |  LITERAL_W_5A18_1 :         60004EA C |
 LITERAL_W_5A20_1 :         6001B30 C |  LITERAL_W_A518_1 :         60004EE C |
 LITERAL_W_A518_2 :         60007C8 C |  LITERAL_W_A518_3 :         6000A4E C |
 LITERAL_W_A518_4 :         6000CA2 C |  LITERAL_W_A518_5 :         6000E70 C |
 LITERAL_W_A518_6 :         6001B2E C |  LITERAL_W_A518_7 :         6001DD2 C |
 LITERAL_W_A538_1 :         60004EC C |  LITERAL_W_A538_2 :         6001016 C |
 LITERAL_W_FE10_1 :         60004E4 C |  LITERAL_W_FE10_2 :         6000510 C |
 LITERAL_W_FE10_3 :         6000550 C |  LITERAL_W_FE10_4 :         60007C4 C |
 LITERAL_W_FE10_5 :         6000868 C |  LITERAL_W_FE10_6 :         6000F14 C |
 LITERAL_W_FE10_7 :         6001B28 C |  LITERAL_W_FE10_8 :             150 C |
 LITERAL_W_FE80_1 :         60004E8 C |  LITERAL_W_FE80_2 :         60007C6 C |
 LITERAL_W_FE80_3 :         6000A4C C |  LITERAL_W_FE80_4 :         6000CA0 C |
 LITERAL_W_FE80_5 :         6000E6E C |  LITERAL_W_FE80_6 :         6001012 C |
 LITERAL_W_FE80_7 :         6001B2C C |  LITERAL_W_FE80_8 :         6001DD0 C |
 LITERAL_W_FE92_1 :         6000FE4 C |  LITERAL_W_FE92_2 :         6001010 C |
 LITERAL_W_FE92_3 :             68C C |  LITERAL_W_FEE2_1 :         600086A C |
 LITERAL_W_FEE2_2 :         6000F16 C |  LITERAL_W_FEE4_1 :         600086E C |
 LITERAL_W_FEE4_2 :         6000F1A C |  LITERAL_W_FF00_1 :         60019D0 C |
 LITERAL_W_FF00_2 :         6001CBC C |  LITERAL_W_FF00_3 :             688 C |
 LITERAL_W_FF60_1 :             314 C |  LITERAL_W_FF60_2 :             53A C |
*MACEXP :                         7 - |  MAINGEMASEQLIST :           93E054 C |
 MAPMARS_TEST :              977628 C |  MAP_HARUNA :                975784 C |
 MAP_SISI :                  9759E4 C |  MAP_TESTBG :                975A48 C |
 MAP_TESTBG2 :               976328 C |  MARS :                           1 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSGBL_3D_OUTHEIGHT :          1C - |  MARSGBL_3D_OUTWIDTH :           18 - |
*MARSGBL_DRAWALL :               16 - |  MARSGBL_DREQREAD :              20 - |
 MARSGBL_DREQWRITE :             24 - |  MARSGBL_LEN :                   60 - |
 MARSGBL_PLGNPZINDX_R :          28 - |  MARSGBL_PLGNPZINDX_W :          2C - |
 MARSGBL_PLYPZCNTR :              C - |  MARSGBL_SCRL_FBOUT :            50 - |
 MARSGBL_SCRL_FBTL :             54 - |  MARSGBL_SCRL_FBX :              5C - |
 MARSGBL_SCRL_FBY :              58 - |  MARSGBL_SCRL_HGHT :             48 - |
 MARSGBL_SCRL_SIZE :             40 - |  MARSGBL_SCRL_VRAM :             4C - |
 MARSGBL_SCRL_WDTH :             44 - |  MARSGBL_SCRL_XOLD :             38 - |
 MARSGBL_SCRL_XPOS :             30 - |  MARSGBL_SCRL_YOLD :             3C - |
 MARSGBL_SCRL_YPOS :             34 - |  MARSGBL_THISFRAME :              0 - |
 MARSGBL_WDGACTIVE :             10 - |  MARSGBL_WDGCLLINES :             E - |
 MARSGBL_WDGDIVLOCK :             8 - |  MARSGBL_WDGHOLD :                6 - |
 MARSGBL_WDGREADY :               A - |  MARSGBL_WDGTASK :                4 - |
 MARSGBL_XSHIFT :                 2 - |  MARSMDL_MDLLOOP :              158 C |
 MARSMDL_MDLLOOP.GO_MDL :       170 C |  MARSMDL_MDLLOOP.INVLID :       1A2 C |
 MARSMDL_MDLLOOP.LOOP :         190 C |  MARSMDL_MDLLOOP.M_INVLID :     186 C |
 MARSMDL_MDLLOOP.M_LOOP :       174 C |  MARSMDL_MDLLOOP.PAGE_2 :       1B4 C |
*MARSMDL_MDLLOOP.SKIP :         1A8 C |  MARSMDL_MKSPR :                1E8 C |
 MARSMDL_MKSPR.BAD_FACE :       304 C |  MARSMDL_MKSPR.LOWER_Z :        2A8 C |
 MARSMDL_MKSPR.MK_FACE :        2FA C |  MARSMDL_MKSPR.MK_POINT :       28E C |
 MARSMDL_MKSPR.NOT_OLDPOS :     26C C |  MARSMDL_MKSPR.NOT_PLYFLD :     2F8 C |
 MARSMDL_MKSPR.Z_PLUS :         2C4 C |  MARSMDL_READMODEL :            398 C |
 MARSMDL_READMODEL.BAD_FACE :   520 C |  MARSMDL_READMODEL.EXIT :       52C C |
 MARSMDL_READMODEL.FC_TRI :     474 C |  MARSMDL_READMODEL.HAS_UV :     3E0 C |
 MARSMDL_READMODEL.MK_FACE :    44C C |  MARSMDL_READMODEL.NEXT_FACE :  3AC C |
 MARSMDL_READMODEL.QUAD :       3C4 C |  MARSMDL_READMODEL.UV_TRI :     3FC C |
 MARSMDL_READMODEL.VALID :      3B6 C |  MARSMDL_READMODEL.Z_PLUS :     4E0 C |
 MARSOBJ_TEST :             6035288 C |  MARSOBJ_TEST.FACE :        6035D64 C |
 MARSOBJ_TEST.MTRL :        60365A4 C |  MARSOBJ_TEST.VERT :        603529C C |
 MARSOBJ_TEST.VRTX :        6036574 C |  MARSOBJ_TEST_2 :           60365A4 C |
*MARSOBJ_TEST_2.END :       6036684 C |  MARSOBJ_TEST_2.FACE :      6036624 C |
 MARSOBJ_TEST_2.MTRL :      6036684 C |  MARSOBJ_TEST_2.VERT :      60365B8 C |
 MARSOBJ_TEST_2.VRTX :      6036654 C |  MARSPWM_BANK :                   8 - |
 MARSPWM_CBANK :                 20 - |  MARSPWM_CREAD :                 24 - |
 MARSPWM_ENBL :                   0 - |  MARSPWM_LEN :                   28 - |
 MARSPWM_LENGTH :                10 - |  MARSPWM_LOOP :                  14 - |
 MARSPWM_PITCH :                 18 - |  MARSPWM_READ :                   4 - |
 MARSPWM_START :                  C - |  MARSPWM_VOL :                   1C - |
 MARSSCRL_COPYTOPBOT :      6001144 C |
 MARSSCRL_COPYTOPBOT.COPY_TOP :                                     6001158 C |
 MARSSOUND_INIT :           6001018 C |  MARSSOUND_INIT.NEXT_ONE :  6001038 C |
 MARSUPD :                     1BEF C |  MARSVIDEO_DRAWFILLBLK :    60014D8 C |
 MARSVIDEO_DRAWFILLBLK.ALWAYS_ON :                                  6001570 C |
 MARSVIDEO_DRAWFILLBLK.BLANK_REQ :                                  600158A C |
*MARSVIDEO_DRAWFILLBLK.EXIT_LR :                                    60015B2 C |
 MARSVIDEO_DRAWFILLBLK.NO_FLAG :                                    6001592 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_X :                                  6001528 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_Y :                                  600153A C |
 MARSVIDEO_DRAWFILLBLK.X_LOOP :                                     6001522 C |
 MARSVIDEO_DRAWFILLBLK.Y_LOOP :                                     6001534 C |
 MARSVIDEO_FIXTBLSHIFT :    6001088 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       60010C8 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       60010B0 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    60010DA C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    60010D4 C |
 MARSVIDEO_INIT :           600105C C |  MARSVIDEO_MKFILLBLK :      60013CC C |
 MARSVIDEO_MKFILLBLK.COPY_BIT :                                     60013DC C |
 MARSVIDEO_MKFILLBLK.EXIT_SSPR :                                    60014C4 C |
 MARSVIDEO_MKFILLBLK.NEXT_SSPR :                                    60013F8 C |
 MARSVIDEO_MKFILLBLK.NO_FLIP :                                      60013EA C |
 MARSVIDEO_MKFILLBLK.OFF_SSPR :                                     60014BC C |
 MARSVIDEO_MKFILLBLK.X_ROW :                                        6001488 C |
 MARSVIDEO_MKFILLBLK.X_SQEND :                                      6001480 C |
 MARSVIDEO_MKFILLBLK.X_SQZ :                                        6001474 C |
 MARSVIDEO_MKFILLBLK.X_SZEX :                                       6001438 C |
 MARSVIDEO_MKFILLBLK.Y_ROW :                                        6001486 C |
 MARSVIDEO_MKFILLBLK.Y_SQEND :                                      6001486 C |
 MARSVIDEO_MKFILLBLK.Y_SQZ :                                        600147A C |
 MARSVIDEO_MKFILLBLK.Y_SZEX :                                       6001444 C |
 MARSVIDEO_SHOWSCRLBG :     60010F4 C |
 MARSVIDEO_SHOWSCRLBG.BAD_Y :                                       600113E C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6001122 C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        600112A C |
 MARSVIDEO_SLICEPLGN :      60016C8 C |  MARSVIDEO_SLICEPLGN.EXIT : 60017CA C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                                     600173A C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                                      600174C C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                                       6001742 C |
 MARSVIDEO_SLICEPLGN.LEFTH :                                        6001792 C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                                       60017C2 C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                                      600176C C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                                      6001700 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                                     6001716 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                                   600172A C |
 MARSVIDEO_SLICEPLGN.TRINGL :                                       60016E4 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                                      6001732 C |
 MARSVIDEO_SUPERSPR_DRAW :  600122C C |
 MARSVIDEO_SUPERSPR_DRAW.NEXT_PIECE :                               6001250 C |
 MARSVIDEO_SUPERSPR_DRAW.NO_SLOT :                                  600126A C |
 MARSVIDEO_SUPERSPR_MAKE :  600116C C |
*MARSVIDEO_SUPERSPR_MAKE.EXIT_SSPR :                                6001218 C |
 MARSVIDEO_SUPERSPR_MAKE.FROM_ROM :                                 6001200 C |
 MARSVIDEO_SUPERSPR_MAKE.NEXT_SSPR :                                6001194 C |
 MARSVIDEO_SUPERSPR_MAKE.OFF_SSPR :                                 6001210 C |
 MARS_CACHEPURGE :          6000F90 C |  MARS_CACHEPURGE_S :            65C C |
 MARS_CACHERAMCODE :        6000FAC C |  MARS_CACHERAMCODE.COPY :   6000FD2 C |
*MARS_ENTRY :                   800 C |  MARS_RAMCODE :                4C84 C |
 MARS_RAMCODE_E :             3B314 C |  MARS_SETWATCHDOG :         6000FE8 C |
 MARS_WAITVBLANK :          6000928 C |
 MARS_WAITVBLANK.SVDP_LOCKED :                                      600093C C |
 MARS_WAITVBLANK.WAIT_V :   6000932 C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              6000874 C |  MASTER_LOOP.KEEP_BUFF :    60008A8 C |
 MASTER_LOOP.NON_INIT :     60008CC C |  MASTER_LOOP.PENDING_DREQ : 600087C C |
 MAX_BUFFNTRY :                   8 - |  MAX_FACES :                    100 - |
 MAX_GLOBALS :                  800 - |  MAX_MARSMSPR :                  20 - |
 MAX_MARSOBJ :                   18 - |  MAX_MARSSPR :                   20 - |
 MAX_MARSVRAM :               18000 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDMAPSPR :                  18 - |  MAX_MDOBJ :                     28 - |
 MAX_PALFDREQ :                   8 - |  MAX_PWMCHNL :                    8 - |
 MAX_RCACH :                     10 - |  MAX_SC0_OPTIONS :                4 - |
 MAX_SCRNBUFF :                1000 - |  MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     10 - |
 MAX_ZDIST :       FFFFFFFFFFFFFD80 - | *MCAM_LEN :                      18 - |
 MCAM_X_POS :                     0 - |  MCAM_X_ROT :                     C - |
 MCAM_Y_POS :                     4 - |  MCAM_Y_ROT :                    10 - |
 MCAM_Z_POS :                     8 - |  MCAM_Z_ROT :                    14 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1BF0 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MEMORY :                     3 - |
 MDLRD_PERSP :                  5A0 C |  MDLRD_PERSP.CENTER :           5F6 C |
 MDLRD_PERSP.INSIDE :           5EC C |  MDLRD_PERSP.PATCHME :          5E0 C |
 MDLRD_PERSP.ZMULTI :           600 C |  MDLRD_ROTATE :                 624 C |
 MDLRD_SETPOINT :               55C C |  MDLRD_SETSPPT :                318 C |
 MDLRD_SETSPPT.NO_FACECAM :     380 C |  MDL_GET_HILOW :                53C C |
 MDL_GET_HILOW.PICK_NEXT :      542 C |  MDL_GET_HILOW.X_L :            54A C |
 MDL_GET_HILOW.X_R :            550 C | *MDSTMP_BUFFINCR :               1A - |
*MDSTMP_CELLSTORAGE :            12 - | *MDSTMP_CURROUTFLIP :             E - |
*MDSTMP_DOTINCR :                16 - | *MDSTMP_FDROP :                  10 - |
*MDSTMP_FLAGS :                   0 - | *MDSTMP_LEN :                    1E - |
*MDSTMP_STMPOUTB :                C - | *MDSTMP_VRAMINCR :                A - |
*MDSTMP_VRAMLEN :                 8 - | *MDSTMP_VRAMMAIN :                2 - |
*MDSTMP_VRAMSEC :                 4 - | *MDSTMP_VRAMSIZE :                6 - |
 MD_BANK_SRAM :              A130F1 - |  MD_ERRADDR :                   824 C |
 MD_ERRBUS :                    824 C |  MD_ERRCHK :                    824 C |
 MD_ERRILL :                    824 C |  MD_ERROREX :                   824 C |
 MD_ERRORTRAP :                 824 C |  MD_ERRPRIVL :                  824 C |
 MD_ERRTRAPV :                  824 C |  MD_ERRZDIV :                   824 C |
 MD_HOTSTART :                  8B4 C |  MD_HOTSTART.COPY_CODE :        92A C |
 MD_HOTSTART.LOOP_RAM :         8C2 C |  MD_HOTSTART.PALCLEAR :         8DC C |
 MD_HOTSTART.WAIT :             908 C |  MD_HOTSTART.WAIT_SH2 :         8EC C |
 MD_HOTSTRAM :                  83C C |  MD_HOTSTRAM_E :                888 C |
 MD_INIT :                      888 C |  MD_INIT.COPY_CODE :            898 C |
 MD_INIT.WAIT_DMA :             8AA C |  MD_LINE1010 :                  824 C |
 MD_LINE1111 :                  824 C |  MD_MARSERROR :                 806 C |
*MD_MARSRESTART :               85E C |  MD_MARSSTARTOK :               876 C |
 MD_READMODES :    FFFFFFFFFFFF22FA C |
 MD_READMODES.COPYME2 :                                    FFFFFFFFFFFF2320 C |
 MD_READMODES.END :                                        FFFFFFFFFFFF23AE C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF232E C |
 MD_SCREEN00 :               8BB314 C | *MD_SCREEN00_E :              3B4C2 C |
 MD_SCREEN01 :               8BB4C4 C | *MD_SCREEN01_E :              3B94C C |
 MD_SCREEN02 :               8BB94C C | *MD_SCREEN02_E :              3CD50 C |
 MD_SCREEN03 :               8BCD50 C | *MD_SCREEN03_E :              3D3B2 C |
 MD_SCREEN04 :               8BD3B4 C | *MD_SCREEN04_E :              3D794 C |
 MD_SCREEN07 :               8BD794 C | *MD_SCREEN07_E :              3E052 C |
 MD_SYSCODE :                   94E C |  MD_SYSCODE_E :                2CFC C |
 MD_TRACE :                     824 C |  MMDL_DATA :                      4 - |
*MMDL_FRAME :                     0 - |  MMDL_LEN :                      20 - |
 MMDL_X_POS :                     8 - |  MMDL_X_ROT :                    14 - |
 MMDL_Y_POS :                     C - |  MMDL_Y_ROT :                    1C - |
 MMDL_Z_POS :                    10 - |  MMDL_Z_ROT :                    18 - |
 MODE :                          18 - | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - |  MONOWIDTH :                     38 - |
 MOUSE_X :                        8 - |  MOUSE_Y :                        A - |
 MSPR_FLAGS :                     0 - |  MSPR_FRAME_X :                   7 - |
 MSPR_FRAME_Y :                   8 - |  MSPR_INDX :                      1 - |
 MSPR_LEN :                      20 - |  MSPR_SIZE_H :                    3 - |
 MSPR_SIZE_W :                    2 - |  MSPR_SRCWDTH :                   6 - |
 MSPR_SRC_H :                     5 - |  MSPR_SRC_W :                     4 - |
 MSPR_VRAM :                     1C - |  MSPR_X_POS :                    10 - |
 MSPR_X_ROT :                    16 - |  MSPR_Y_POS :                    12 - |
 MSPR_Y_ROT :                    1A - |  MSPR_Z_POS :                    14 - |
 MSPR_Z_ROT :                    18 - |  MSTRMODE_0 :               6000940 C |
 MSTRMODE_0.CLR_MANUAL :    6000984 C |  MSTRMODE_0.NOT_YET :       60009BE C |
 MSTRMODE_0.STILL_LOCKED :  6000998 C |  MSTRMODE_0.WAIT_SLVN :     600095A C |
 MSTRMODE_2D :              6000A58 C |  MSTRMODE_2D.XPU_NEGTV :    6000B08 C |
 MSTRMODE_2D.XPU_NEGTVA :   6000B0C C |  MSTRMODE_2D.XPU_POSTV :    6000B14 C |
 MSTRMODE_2D.X_DONT_SCRL :  6000B72 C |  MSTRMODE_2D.X_PATCH :      6000AA2 C |
 MSTRMODE_2D.X_SCRL_L :     6000B48 C |  MSTRMODE_2D.X_SLOOP :      6000B5E C |
 MSTRMODE_2D.YPU_NEGTV :    6000AEE C |  MSTRMODE_2D.YPU_NEGTVA :   6000AF2 C |
 MSTRMODE_2D.YPU_POSTV :    6000AFA C |  MSTRMODE_2D.YPU_POSTVA :   6000B00 C |
 MSTRMODE_2D.YX_NEGTV :     6000AD4 C |  MSTRMODE_2D.YX_NEGTVA :    6000AD8 C |
 MSTRMODE_2D.YX_POSTV :     6000AE0 C |  MSTRMODE_2D.YX_POSTVA :    6000AE6 C |
 MSTRMODE_2D.YX_TOPTVA :    6000ACC C |  MSTRMODE_2D.Y_DONT_SCRL :  6000BBC C |
 MSTRMODE_2D.Y_SCRL_L :     6000B92 C |  MSTRMODE_2D.Y_SLOOP :      6000BAA C |
 MSTRMODE_2D_I :            60009D8 C |  MSTRMODE_2D_I.CLEAN_UP :   60009FC C |
 MSTRMODE_2D_I.WAIT_SLVN :  60009EE C |  MSTRMODE_3D :              6000CA8 C |
 MSTRMODE_3D.CONT_PLGN :    6000D62 C |  MSTRMODE_3D.COPY_CAM :     6000CFA C |
 MSTRMODE_3D.COPY_MSPR :    6000CD6 C |  MSTRMODE_3D.COPY_OBJ :     6000CE8 C |
 MSTRMODE_3D.HIGHER :       6000D80 C |  MSTRMODE_3D.INVALID :      6000DB6 C |
 MSTRMODE_3D.LOOP :         6000D9C C |  MSTRMODE_3D.MK_TABLE :     6000D24 C |
 MSTRMODE_3D.PAGE_2 :       6000D5C C |  MSTRMODE_3D.ROLL :         6000D6C C |
 MSTRMODE_3D.SKIP :         6000DBC C |  MSTRMODE_3D.SRCH :         6000D76 C |
 MSTRMODE_3D.WAIT_PZ :      6000DC0 C |  MSTRMODE_3D.WAIT_SLVI :    6000CBE C |
 MSTRMODE_3D.WAIT_SV :      6000CAC C |  MSTRMODE_3D.WAIT_WDG :     6000DC6 C |
 MSTRMODE_3D_I :            6000C20 C |  MSTRMODE_3D_I.CLR_ME2D :   6000C44 C |
 MSTRMODE_3D_I.WAIT_SLVN :  6000C36 C |  MSTRMODE_INITEXIT :        60009C2 C |
 MSTR_COPYPALETTE :         6000DE4 C |
 MSTR_COPYPALETTE.COPY_PAL :                                        6000DF6 C |
 MSTR_COPYPALETTE.SVDP_LOCKED :                                     6000E1A C |
 MSTR_LIST :                60008E8 C |  M_IRQ_BAD :                6000380 C |
 M_IRQ_CMD :                60003E4 C |  M_IRQ_CMD.DREQ_RAM :       600041E C |
 M_IRQ_CMD.DREQ_SETDEST :   6000420 C |  M_IRQ_CMD.WDG_INUSE :      6000404 C |
 M_IRQ_DMA :                6000398 C |  M_IRQ_DMA.NOT_USE :        60003C6 C |
 M_IRQ_DMA.WAIT_DMA :       60003A2 C |  M_IRQ_H :                  6000444 C |
 M_IRQ_PWM :                60003D4 C |  M_IRQ_V :                  6000454 C |
 M_IRQ_VRES :               6000470 C |  M_IRQ_VRES.RV_BUSY :       60004A8 C |
 M_IRQ_WDG :                60019D4 C |  M_IRQ_WDG.EXIT_WDG :       6001A10 C |
 M_IRQ_WDG.LIST :           6001A2C C | *M_IRQ_WDG.ON_CLR :         6001A0A C |
 M_IRQ_WDG.WAIT_FB :        60019EA C |  M_IRQ_WDG.WDG_MAIN :       6001A20 C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1F63 C |
 NIKONA_BUFFLIST_E :           1F83 C |  OBJECT_ANIMATE :  FFFFFFFFFFFF2150 C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF21DE C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF21D0 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF2196 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF21DA C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF21C2 C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF21C0 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF216E C |
 OBJECT_INIT :     FFFFFFFFFFFF206C C |  OBJECT_INIT.CLR : FFFFFFFFFFFF2074 C |
 OBJECT_MAKE :     FFFFFFFFFFFF20AE C |
 OBJECT_MAKE.SEARCH :                                      FFFFFFFFFFFF20BC C |
 OBJECT_MDMARS_GETSPRINFO :                                FFFFFFFFFFFF22D8 C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF2118 C |
*OBJECT_RESETVARS :                                        FFFFFFFFFFFF20FE C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF210C C |
 OBJECT_RUN :      FFFFFFFFFFFF207C C |
 OBJECT_RUN.NEXT_ONE :                                     FFFFFFFFFFFF2084 C |
 OBJECT_RUN.NO_CODE :                                      FFFFFFFFFFFF2090 C |
*OBJECT_SET :      FFFFFFFFFFFF209A C |  OBJECT_SPEED :    FFFFFFFFFFFF2120 C |
 OBJECT_TOUCH :    FFFFFFFFFFFF21E4 C |
 OBJECT_TOUCH.CHECK_THIS :                                 FFFFFFFFFFFF221A C |
 OBJECT_TOUCH.EXIT_THIS :                                  FFFFFFFFFFFF2214 C |
 OBJECT_TOUCH.NEXT :                                       FFFFFFFFFFFF21FC C |
 OBJECT_TOUCH.NOT_YTOP :                                   FFFFFFFFFFFF22D6 C |
 OBJECT_TOUCH.SET_OK :                                     FFFFFFFFFFFF22D4 C |
 OBJECT_TOUCH.SKIP :                                       FFFFFFFFFFFF220A C |
 OBJSET_ERROR :    FFFFFFFFFFFF20D0 C |  OBJSET_GO :       FFFFFFFFFFFF20DA C |
 OBJSET_GO.CLR :   FFFFFFFFFFFF20EE C |
 OBJSET_GO.EXIT_THIS :                                     FFFFFFFFFFFF20F4 C |
 OBJSET_GO.FROM_DEL :                                      FFFFFFFFFFFF20E8 C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
 OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ON_HOLD :                        2 - |
 ON_PRESS :                       4 - |  ON_RELEASE :                     6 - |
*PACKING :                        0 - | *PADDING :                        0 - |
 PAD_ID :                         0 - |  PAD_VER :                        1 - |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMARS_HARUNA :            977A28 C |  PALMARS_SISI :              977A48 C |
 PALMARS_TEST :              9774A8 C | *PALMARS_TEST2 :             977A68 C |
 PALMODE :                       3E C |  PAL_HARUNA :                975764 C |
 PAL_SISI :                  9759C4 C |  PAL_TESTBG :                975A28 C |
 PAL_TESTBG2 :               976308 C |  PARP :                          34 - |
 PCMCOM :                      15E6 C | *PEN :                           20 - |
 PICO :                           0 - |  PLC_HARUNA :                975934 C |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYGN_LEN :                     38 - |  PLYGN_MTRL :                     4 - |
 PLYGN_POINTS :                   8 - |  PLYGN_SRCPNTS :                 28 - |
 PLYGN_TYPE :                     0 - | *PLYPZ_LEN :                     30 - |
 PLYPZ_MTRL :                     4 - |  PLYPZ_SRC_XL :                  10 - |
 PLYPZ_SRC_XL_DX :               20 - |  PLYPZ_SRC_XR_DX :               24 - |
 PLYPZ_SRC_YL :                  14 - |  PLYPZ_SRC_YL_DX :               28 - |
 PLYPZ_SRC_YR_DX :               2C - |  PLYPZ_TYPE :                     0 - |
 PLYPZ_XL :                       C - |  PLYPZ_XL_DX :                   18 - |
 PLYPZ_XR_DX :                   1C - |  PLYPZ_YTB :                      8 - |
 PROC_CHIPS :                   637 C |  PSGCOM :                      165E C |
 PSGFREQ_LIST :                147E C |  PSGHATMODE :                  1CF4 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PUT_PIECE :                60018FC C |  PUT_PIECE.BAD_PIECE :      60019A6 C |
 PUT_PIECE.LEFTH :          600190E C |  PUT_PIECE.TOP_NEG :        6001992 C |
 PVOL :                          30 - |  PWMCOM :                      1626 C |
*PWMCTL :                        31 - | *PWMINS_NADIE :             2094FE8 C |
*PWMINS_PIANO :             20B0F40 C | *PWMINS_PKICK :             20B565C C |
*PWMINS_PTOM :              20B5DD8 C |  PWMINS_TEST :              6027AA0 C |
 PWMINTCLR :                     1C - |  PWMIRQ_ON :                      1 - |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFF5F0 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFE43C C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFF5EA C |  RAM_HORSCROLL :   FFFFFFFFFFFFD8A2 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFE440 C |  RAM_INPUTDATA :   FFFFFFFFFFFFE55C C |
 RAM_MARS_BUFF3D_END :      600F9E8 C |  RAM_MARS_BUFF3D_START :    60072A0 C |
 RAM_MARS_CURRPLGNPAGE :   26007290 C |  RAM_MARS_DREQBUFF_0 :     26004CD0 C |
 RAM_MARS_DREQBUFF_1 :     260056F0 C |  RAM_MARS_GLOBAL :          6004C70 C |
 RAM_MARS_OBJCAMERA :       60072A0 C |  RAM_MARS_OBJECTS :         60072E0 C |
 RAM_MARS_PLGNLIST_0 :      600E9E0 C |  RAM_MARS_PLGNLIST_1 :      600F1E0 C |
 RAM_MARS_PLGNNUM_0 :       600F9E0 C |  RAM_MARS_PLGNNUM_1 :       600F9E4 C |
 RAM_MARS_POLYGONS_0 :      60079E0 C |  RAM_MARS_POLYGONS_1 :      600B1E0 C |
 RAM_MARS_PWMBACKUP :      26006290 C |  RAM_MARS_PWMLIST :        26006150 C |
 RAM_MARS_PWMTABLE :       26006110 C |  RAM_MARS_SCRLREFILL :          200 C |
*RAM_MARS_SPRDRWCANVAS :    60072A0 C |  RAM_MARS_SPRPOLYGN :       60075E0 C |
 RAM_MARS_SVDPDRWLIST :           0 C |  RAM_MARS_SVDPSPRINFO :           0 C |
 RAM_MARS_VRAMDATA :        600FAA0 C | *RAM_MCDEXIT :     FFFFFFFFFFFFF5FC C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDMARS_COMMBUFF :                                     FFFFFFFFFFFFCA42 C |
 RAM_MDMARS_INDXPALFD :                                    FFFFFFFFFFFFC800 C |
 RAM_MDMARS_MDLCAMERA :                                    FFFFFFFFFFFFCC42 C |
 RAM_MDMARS_MODELS :                                       FFFFFFFFFFFFD062 C |
*RAM_MDMARS_MODELS.SIZEOF_THIS :                           FFFFFFFFFFFFD362 C |
 RAM_MDMARS_MPALFDLIST :                                   FFFFFFFFFFFFCA02 C |
 RAM_MDMARS_MSPRITES :                                     FFFFFFFFFFFFCC62 C |
 RAM_MDMARS_PALFD :                                        FFFFFFFFFFFFC802 C |
 RAM_MDMARS_SCRLDATA :                                     FFFFFFFFFFFFCC62 C |
 RAM_MDMARS_SCRLSETT :                                     FFFFFFFFFFFFCC42 C |
 RAM_MDMARS_SUPERSPR :                                     FFFFFFFFFFFFD062 C |
*RAM_MDMARS_SUPERSPR.SIZEOF_THIS :                         FFFFFFFFFFFFD262 C |
*RAM_MDMCD_STAMPS :                                        FFFFFFFFFFFFC800 C |
*RAM_MDMCD_STAMPSETT :                                     FFFFFFFFFFFFC804 C |
 RAM_MDMISC :      FFFFFFFFFFFFC800 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFE45C C |
 RAM_MDVIDCLR_E :  FFFFFFFFFFFFE2B6 C |  RAM_MDVIDEO :     FFFFFFFFFFFFD462 C |
 RAM_MEGACD :              FFFFFD00 - |  RAM_OBJECTS :     FFFFFFFFFFFFE59C C |
 RAM_PALETTE :     FFFFFFFFFFFFE1B2 C |  RAM_PALETTEFADE : FFFFFFFFFFFFE232 C |
 RAM_PALFADELIST : FFFFFFFFFFFFD462 C |  RAM_SAVEDATA :    FFFFFFFFFFFFE45C C |
 RAM_SAVEENABLE :  FFFFFFFFFFFFF5F6 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFE460 C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFE45C C |  RAM_SCREENMODE :  FFFFFFFFFFFFF5F8 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFF5FA C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SETPRNTVRAM : FFFFFFFFFFFFE444 C |
 RAM_SETPRNTVRAMW :                                        FFFFFFFFFFFFE446 C |
 RAM_SOUNDBUFF :           FFFFFF00 - |  RAM_SPRITES :     FFFFFFFFFFFFDCB2 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFE442 C |  RAM_SPRMAPLIST :  FFFFFFFFFFFFD4A2 C |
 RAM_SPRPZLIST :   FFFFFFFFFFFFD622 C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDOM :   FFFFFFFFFFFFF5E0 C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFF5DC C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFF5E4 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFE2B2 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFE2BC C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFE2B4 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFE452 C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFE454 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFE456 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFE458 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFE45A C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFE44A C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFE448 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFE450 C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFE44E C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFE44C C |
 RAM_VERSCROLL :   FFFFFFFFFFFFDC62 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
*RES :                            2 - |  ROM_END :                    B6994 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1F54 C |
 SAMPLE_RATE :                 3E80 - |  SBEATACC :                    1CF9 C |
 SBEATPTCK :                   1CFB C |  SCMD_TASKS :               6000554 C |
*SCMD_TASKS.COPY_1 :        6000608 C |  SCMD_TASKS.COPY_DATA :     6000594 C |
 SCMD_TASKS.EXIT_C :        6000616 C |  SCMD_TASKS.EXIT_SCMD :     60006FE C |
 SCMD_TASKS.IS_KEYCUT :     60006F0 C |  SCMD_TASKS.NEXT_CHNL :     600061C C |
 SCMD_TASKS.NEXT_ONE :      6000570 C |  SCMD_TASKS.NEXT_OUT :      60005DA C |
 SCMD_TASKS.NO_CHNG :       60006F4 C |  SCMD_TASKS.NO_CHNL :       60005C4 C |
 SCMD_TASKS.NO_CHNLO :      60005EA C | *SCMD_TASKS.NO_KEYCUT :     6000626 C |
 SCMD_TASKS.NO_PITCHBND :   6000658 C | *SCMD_TASKS.PROC_PWM :      6000616 C |
 SCMD_TASKS.SCMD_TASK00 :   6000564 C |  SCMD_TASKS.SCMD_TASK01 :   60005F4 C |
 SCMD_TASKS.SCMD_TASK02 :   6000568 C |  SCMD_TASKS.SCMD_TASK03 :   60005D4 C |
 SCMD_TASKS.WAIT_1 :        60005FC C |  SCRLDRW_DRAWBLK :          60015C8 C |
*SCRLDRW_DRAWBLK.END_LINE : 60016C2 C |
 SCRLDRW_DRAWBLK.NEXT_LINE :                                        6001600 C |
 SCRLDRW_DRAWBLK.NEXT_ZLINE :                                       60015CE C |
 SCRLDRW_DRAWBLK.NORMAL :   60015F4 C |  SCRLDRW_DRAWBLK.TL_SNAP :  6001606 C |
 SCRLDRW_DRAWBLK.TL_SNAPZ : 60015D4 C |  SCRLDRW_SSPRDRAW :         6001278 C |
 SCRLDRW_SSPRDRAW.DRW_HALF :                                        600136E C |
 SCRLDRW_SSPRDRAW.HALF_1 :  600136A C |  SCRLDRW_SSPRDRAW.HALF_2 :  6001364 C |
 SCRLDRW_SSPRDRAW.HALF_3 :  6001368 C |  SCRLDRW_SSPRDRAW.TL_H :    6001384 C |
 SCRLDRW_SSPRDRAW.TL_SNAP : 6001308 C |  SCRLDRW_SSPRDRAW.TL_X :    600131C C |
 SCRLDRW_SSPRDRAW.WRT_0 :   6001388 C |  SCRLDRW_SSPRDRAW.XR_LEFT : 600139A C |
 SCRLDRW_SSPRDRAW.XY_FLIP : 60012A6 C |
 SCRLDRW_SSPRDRAW.XY_XWRAP :                                        600129E C |
 SCRLDRW_SSPRDRAW.X_FLIP :  60012C8 C |
 SCRLDRW_SSPRDRAW.X_GIVEUP :                                        60013A4 C |
 SCRLDRW_SSPRDRAW.X_LOOP :  6001316 C |  SCRLDRW_SSPRDRAW.X_MSWAP : 600134C C |
 SCRLDRW_SSPRDRAW.Y_BOT :   60012F0 C | *SCRLDRW_SSPRDRAW.Y_END :   60013B6 C |
 SCRLDRW_SSPRDRAW.Y_FLIP :  60012B8 C |  SCRLDRW_SSPRDRAW.Y_FLIPR : 60012FE C |
*SCRLDRW_SSPRDRAW.Y_LAST :  60013B6 C |  SCRLDRW_SSPRDRAW.Y_LOOP :  6001302 C |
*SCRLDRW_SSPRDRAW.Y_LOW :   6001284 C |  SCRLDRW_SSPRDRAW.Y_MID :   600128A C |
 SCRLDRW_SSPRDRAW.Y_OK :    6001292 C |  SCRLDRW_SSPRDRAW.Y_RFLIP : 60012DC C |
 SCRLDRW_SSPRDRAW.Y_RFLIPC :                                        60012DE C |
 SCRLDRW_SSPRDRAW.Y_TOP :   60012E0 C |  SCRLDRW_SSPRDRAW.Z_0 :     6001326 C |
 SCRLDRW_SSPRDRAW.Z_1 :     600132E C |  SCRLDRW_SSPRDRAW.Z_2 :     6001336 C |
 SCRLDRW_SSPRDRAW.Z_3 :     600133E C |  SET_3DFIELD_HGHT :              E0 - |
 SET_3DFIELD_WDTH :             140 - |  SET_CHIPS :                    619 C |
 SET_CHIPS.TRK_BUFFRS :         621 C | *SET_DEBUGMODE :                  0 - |
*SET_DEFAUTODMA :               480 - |  SET_FBVRAM_PATCH :           1E000 - |
 SET_INITMODE :                   7 - |  SET_LEFT :                 60017EC C |
 SET_LEFT.LFT_OK :          600180E C |  SET_LEFT.LFT_SKIP :        600186E C |
 SET_MSCRLHGHT :                 F0 - |  SET_MSCRLSIZE :                 10 - |
 SET_MSCRLWDTH :                150 - |  SET_NULLVRAM :                 7FE - |
 SET_RAMLIMIT :              FFFC00 - |  SET_RIGHT :                6001874 C |
 SET_RIGHT.RGT_OK :         6001896 C |  SET_RIGHT.RGT_SKIP :       60018F6 C |
 SET_SRAMSIZE :                 100 - |  SET_TILEMAX :                  200 - |
 SET_WRAMSIZE :               3C000 - |  SH2_DEBUG :                      1 - |
 SH2_END :                  6036690 C |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              60007CC C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           600081A C |
 SH2_M_HOTSTART.WAIT_SLV :  6000838 C |  SH2_RAM :                  60072A0 C |
 SH2_RAM_TH :               6004CD0 C |  SH2_SLAVE :                6000128 C |
 SH2_S_ENTRY :              6000E74 C |  SH2_S_ERRADDR :            6000358 C |
 SH2_S_ERRCODE :            6000368 C |  SH2_S_ERRDMA :             600035C C |
 SH2_S_ERRILLG :            6000350 C |  SH2_S_ERRINVL :            6000354 C |
 SH2_S_ERRNMI :             6000360 C |  SH2_S_ERROR :              600034C C |
 SH2_S_ERRUSER :            6000364 C |  SH2_S_HOTSTART :           6000EC6 C |
 SH2_S_HOTSTART.WAIT_MST :  6000EE2 C | *SH2_USER_DATA :            6027AA0 C |
 SHIFT :                          2 - |  SIN_TABLE :                600246C C |
 SIZEOF_INPUT :                  10 - | *SIZEOF_MARSRAM_0 :         600E5A0 C |
*SIZEOF_MARSRAM_1 :         600F9E8 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |
 SIZEOF_MDMISC :   FFFFFFFFFFFFD462 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFF5FE C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFF5FE C |  SIZEOF_MDVID :    FFFFFFFFFFFFE45C C |
*SIZEOF_SAVEINFO : FFFFFFFFFFFFE464 C |  SLAVE_IRQ :                6000278 C |
 SLAVE_LOOP :               6000F20 C |  SLV :                           10 - |
 SLVMODE_00 :               6000F5C C |  SLVMODE_01 :               6000F60 C |
 SLVPLGN_00 :               6001D8C C |  SLVPLGN_01 :               6001A4C C |
 SLVPLGN_05 :               6001A94 C |  SLVPLGN_05.EXIT :          6001AA6 C |
 SLVPLGN_05.HAS_PZ :        6001AAC C |  SLVPLGN_06 :               6001A52 C |
 SLV_LIST :                 6000F3C C |  SNDLOCKZ80 :      FFFFFFFFFFFF00DC C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00E4 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00FA C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF011E C |
 SNDREQ_EXIT :     FFFFFFFFFFFF012E C | *SNDREQ_SADDR :    FFFFFFFFFFFF015A C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0162 C |  SNDREQ_SCMD :     FFFFFFFFFFFF0148 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0156 C |  SNDREQ_SWORD :    FFFFFFFFFFFF015E C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00F0 C |  SOUND_INIT :      FFFFFFFFFFFF19D2 C |
 SOUND_UPDATE :    FFFFFFFFFFFF19CE C | *SSCRL_LEN :                      C - |
 SSCRL_VRAM :                     8 - |  SSCRL_X_POS :                    0 - |
 SSCRL_Y_POS :                    4 - |  SSPR_FLAGS :                     0 - |
 SSPR_FRAME :                     2 - |  SSPR_INDX :                      6 - |
 SSPR_LEN :                      10 - |  SSPR_SIZE :                      4 - |
 SSPR_VRAM :                      C - |  SSPR_X_POS :                     8 - |
 SSPR_Y_POS :                     A - |  STACK_MSTR :              C0000800 - |
 STACK_SLV :               C0000800 - |  STANDBY :                        3 - |
 SYSBCD_SPOUT :    FFFFFFFFFFFF1E96 C | *SYSMARS_FRAMEBUFFER :       840000 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_OVERWRITE :         860000 - |
 SYSMARS_REG :               A15100 - | *SYSMARS_SVDP :              A15180 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF1F52 C |
 SYSRND_MKVALUE :  FFFFFFFFFFFF1CAC C |
 SYSRND_MKVALUE.HAS_SEED :                                 FFFFFFFFFFFF1CBE C |
*SYSTEM_BCD_ADDB : FFFFFFFFFFFF1E6E C |  SYSTEM_BCD_ADDL : FFFFFFFFFFFF1E7C C |
*SYSTEM_BCD_ADDW : FFFFFFFFFFFF1E76 C | *SYSTEM_BCD_SUBB : FFFFFFFFFFFF1E46 C |
 SYSTEM_BCD_SUBL : FFFFFFFFFFFF1E54 C | *SYSTEM_BCD_SUBW : FFFFFFFFFFFF1E4E C |
 SYSTEM_DEFAULT :  FFFFFFFFFFFF1C6C C |
 SYSTEM_DEFAULT.CLR_LOOP :                                 FFFFFFFFFFFF1C7A C |
 SYSTEM_DICEROLL : FFFFFFFFFFFF1CF6 C |
*SYSTEM_DICEROLL_SEED :                                    FFFFFFFFFFFF1CD6 C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF19C6 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1960 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF19CA C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF197A C |
 SYSTEM_INIT :     FFFFFFFFFFFF185C C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF18BE C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF1868 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF19D6 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF1A02 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF1A58 C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1B02 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1AFC C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF1A38 C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1B88 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF1A08 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF1A1E C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF1A2A C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1A36 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF19EA C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF1ACA C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF1AF6 C |
 SYSTEM_MDMARS_SENDDATA :                                  FFFFFFFFFFFF1F6E C |
 SYSTEM_MDMARS_SENDDATA.EXIT_NOW :                         FFFFFFFFFFFF1F9A C |
 SYSTEM_MDMARS_SENDDATA.LARGE_PACK :                       FFFFFFFFFFFF1F86 C |
 SYSTEM_MDMARS_UPDATE :                                    FFFFFFFFFFFF1FAE C |
*SYSTEM_MDMCD_CDDAFADE :                                   FFFFFFFFFFFF1F5A C |
*SYSTEM_MDMCD_CDDAPLAY :                                   FFFFFFFFFFFF1F40 C |
*SYSTEM_MDMCD_CDDAPLAYL :                                  FFFFFFFFFFFF1F4A C |
*SYSTEM_MDMCD_CDDASTOP :                                   FFFFFFFFFFFF1F58 C |
*SYSTEM_MDMCD_CHECKHOME :                                  FFFFFFFFFFFF1F0E C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                        FFFFFFFFFFFF1F34 C |
*SYSTEM_MDMCD_CHECKWRAM :                                  FFFFFFFFFFFF1EE8 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                           FFFFFFFFFFFF1EF8 C |
 SYSTEM_MDMCD_EXITSHELL :                                  FFFFFFFFFFFF1F3E C |
 SYSTEM_MDMCD_GIVEWRAM :                                   FFFFFFFFFFFF1EFE C |
*SYSTEM_MDMCD_INTERRUPT :                                  FFFFFFFFFFFF1EC8 C |
*SYSTEM_MDMCD_RDFILE_RAM :                                 FFFFFFFFFFFF1F0A C |
*SYSTEM_MDMCD_RDFILE_WRAM :                                FFFFFFFFFFFF1F0C C |
*SYSTEM_MDMCD_SUBENTER :                                   FFFFFFFFFFFF1ED8 C |
*SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF1EDA C |
*SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF1ED6 C |
 SYSTEM_MDMCD_WAITWRAM :                                   FFFFFFFFFFFF1EDC C |
 SYSTEM_RANDOM :   FFFFFFFFFFFF1C9C C |
 SYSTEM_RANDOM_SEED :                                      FFFFFFFFFFFF1C92 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF18CA C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF1948 C |
 SYSTEM_RENDER.FROM_LATE :                                 FFFFFFFFFFFF1938 C |
 SYSTEM_RENDER.GOT_LATE :                                  FFFFFFFFFFFF1906 C |
 SYSTEM_RENDER.MARS_FREE :                                 FFFFFFFFFFFF1926 C |
 SYSTEM_RENDER.MARS_SYNC :                                 FFFFFFFFFFFF191E C |
*SYSTEM_RENDER.MARS_WAIT :                                 FFFFFFFFFFFF18FA C |
 SYSTEM_RENDER.WAIT_EARLY :                                FFFFFFFFFFFF18D8 C |
 SYSTEM_RENDER.WAIT_VBLANK :                               FFFFFFFFFFFF194A C |
 SYSTEM_SETDATABANK :                                      FFFFFFFFFFFF203E C |
 SYSTEM_SETINTJUMPS :                                      FFFFFFFFFFFF1EAE C |
 SYSTEM_SETINTJUMPS.NO_EXINT :                             FFFFFFFFFFFF1EC6 C |
 SYSTEM_SETINTJUMPS.NO_HINT :                              FFFFFFFFFFFF1EBE C |
 SYSTEM_SETINTJUMPS.NO_VINT :                              FFFFFFFFFFFF1EB6 C |
 SYSTEM_SINEWAVE : FFFFFFFFFFFF1D1A C |
 SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF1D10 C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1B8E C |
*SYSTEM_SRAMINIT.ALREADY_SET :                             FFFFFFFFFFFF1BCA C |
 SYSTEM_SRAMINIT.CANT_USE :                                FFFFFFFFFFFF1BC8 C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF1BB4 C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF1C1A C |
 SYSTEM_SRAMLOAD.CANT_USE_C :                              FFFFFFFFFFFF1C6A C |
*SYSTEM_SRAMLOAD.DONT_RESET :                              FFFFFFFFFFFF1C54 C |
 SYSTEM_SRAMLOAD.LOAD :                                    FFFFFFFFFFFF1C48 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF1BCC C |
 SYSTEM_SRAMSAVE.CANT_USE_C :                              FFFFFFFFFFFF1C18 C |
 SYSTEM_SRAMSAVE.SAVE :                                    FFFFFFFFFFFF1BF6 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :  FFFFFFFFFFFF1992 C |
 SYS_MARSSLVCMD.WAIT_EXIT :                                FFFFFFFFFFFF19B8 C |
 SYS_MSENDDATA :   FFFFFFFFFFFF1FD0 C |
 SYS_MSENDDATA.LOOP_FIFO :                                 FFFFFFFFFFFF2018 C |
 SYS_MSENDDATA.NO_SRC :                                    FFFFFFFFFFFF1FEE C |
 SYS_MSENDDATA.WAIT_BIT :                                  FFFFFFFFFFFF200A C |
 SYS_MSENDDATA.WAIT_BIT_E :                                FFFFFFFFFFFF202C C |
 SYS_MSENDDATA_0 : FFFFFFFFFFFF1FA0 C |  SYS_SINEWAVE :    FFFFFFFFFFFF1D1E C |
 SYS_SINEWAVE.LOC_7EFA :                                   FFFFFFFFFFFF1D2C C |
 SYS_SINEWAVE.LOC_7F0C :                                   FFFFFFFFFFFF1D3E C |
 SYS_SINEWAVE.SINE_DATA :                                  FFFFFFFFFFFF1D44 C |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004F4 C |  S_IRQ_CMD :                6000514 C |
 S_IRQ_DMA :                6000504 C |  S_IRQ_H :                  600074A C |
 S_IRQ_PWM :                      0 C |  S_IRQ_PWM.CHNL_OFF :            F6 C |
 S_IRQ_PWM.CHNL_SILN :           42 C |  S_IRQ_PWM.DO_MONO :             A6 C |
 S_IRQ_PWM.DO_VOL :              BE C |  S_IRQ_PWM.ENABLED :             48 C |
 S_IRQ_PWM.FIFO_FREE :           1C C |  S_IRQ_PWM.FIFO_LOOP :           32 C |
 S_IRQ_PWM.GO_WAVE :             A8 C |  S_IRQ_PWM.KEEP :                76 C |
 S_IRQ_PWM.LOOPIT :              70 C |  S_IRQ_PWM.L_LOW :               E4 C |
 S_IRQ_PWM.L_MAX :              108 C |  S_IRQ_PWM.ML_OUT :              B8 C |
*S_IRQ_PWM.MNON_Z :              B2 C |  S_IRQ_PWM.NEXT_CHNL :           3A C |
 S_IRQ_PWM.NOT_BACKUP :          8C C |  S_IRQ_PWM.PWM_FULL :           136 C |
*S_IRQ_PWM.READ_WAV :            90 C |  S_IRQ_PWM.R_LOW :               EA C |
 S_IRQ_PWM.R_MAX :              10E C |  S_IRQ_PWM.STAND :               98 C |
 S_IRQ_PWM.ST_PITCH :            52 C |  S_IRQ_V :                  600075C C |
 S_IRQ_VRES :               600076C C |  S_IRQ_VRES.RV_BUSY :       60007A4 C |
 S_IRQ_WDG :                60004F8 C |  TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 660 C |  TBLBUFF_READ.DONT_RES :        72D C |
 TBLBUFF_READ.DO_CHIP :         6C8 C |  TBLBUFF_READ.GRAB_LINK :       711 C |
 TBLBUFF_READ.HAS_INDX :        6A4 C |  TBLBUFF_READ.INVLDL :          755 C |
*TBLBUFF_READ.KEEP_IT :         6F6 C |  TBLBUFF_READ.L_HIPRIO :        7DF C |
 TBLBUFF_READ.NEW_CHIP :        792 C |  TBLBUFF_READ.NEW_LINK :        7DC C |
 TBLBUFF_READ.NEW_LINK_O :      7D4 C |  TBLBUFF_READ.NEW_LINK_Z :      7D0 C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |  TBLBUFF_READ.NEXT_INDX :       697 C |
 TBLBUFF_READ.NEXT_PRIO :       7B4 C |  TBLBUFF_READ.NO_INDX :         6C0 C |
 TBLBUFF_READ.PASS_2 :          7B3 C |  TBLBUFF_READ.PICK_TBL :        800 C |
 TBLBUFF_READ.REFILL :          78E C |  TBLBUFF_READ.REROLL :          76B C |
 TBLBUFF_READ.RNOT_PSG :        790 C |  TBLBUFF_READ.SAME_LINK :       730 C |
 TBLBUFF_READ.SET_ASFULL :      7FD C |  TBLBUFF_READ.SINGL_FREE :      7ED C |
 TBLBUFF_READ.SINGL_LINK :      75D C |  TBLBUFF_READ.SRCH_FREE :       7A3 C |
 TBLBUFF_READ.SRCH_LINK :       73C C |  TBLBUFF_READ.SRCH_LLOOP :      746 C |
 TBLBUFF_READ.TRACK_CONT :      680 C |  TBLBUFF_READ.VALID :           695 C |
 TBLFM :                       1A6E C |  TBLFM3 :                      1ACE C |
 TBLFM6 :                      1AE6 C |  TBLLIST :                     1A60 C |
 TBLPCM :                      1B00 C |  TBLPSG :                      1C00 C |
 TBLPSGN :                     1BC2 C |  TBLPWM :                      1C4A C |
 TBLZ_CLEAR :                   FB0 C |  TBLZ_CLEAR.CLRFULL :           FBE C |
 TEXTR_HARUNA :               10900 C |  TH :                      20000000 - |
 TICKCNT :                     1BFF C |  TICKFLAG :                    1BFE C |
 TICKSPSET :                   1BFD C | *TIME :               "05:32:18 AM" - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5D4 C |  TRACK_OUT.INDX_DEL :           5E2 C |
 TRACK_OUT.NOTHIN :             610 C |  TRANSFERROM :                 10FE C |
 TRANSFERROM.DOUBLE :          1121 C |  TRANSFERROM.FROM_RAM :        1145 C |
 TRANSFERROM.TRANSFER :        1165 C |  TRANSFERROM.WAIT :            115C C |
 TRANSFERROM.X68KLAST :        119E C |  TRANSFERROM.X68KLOOP :        118A C |
 TRANSFERROM.X68KLPWT :        11AC C |  TRANSFERROM.X68KNOCARRY :     113F C |
 TRANSFERROM.X68KPWTLP :       11AE C |  TRKBLKS_0 :                   180A C |
 TRKBLKS_1 :                   1812 C |  TRKBLKS_2 :                   181A C |
 TRKBLKS_3 :                   1822 C |  TRKBUFF_0 :                   182A C |
 TRKBUFF_1 :                   1869 C |  TRKBUFF_2 :                   18A8 C |
 TRKBUFF_3 :                   18E7 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F10 C |  TRKCACH_2 :                   1F20 C |
 TRKCACH_3 :                   1F30 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   178A C |  TRKHDRS_1 :                   17AA C |
 TRKHDRS_2 :                   17CA C |  TRKHDRS_3 :                   17EA C |
 TRKINFOCACH :                 1F50 C |  TRK_BANKBLK :                   16 - |
 TRK_BANKHEADS :                 15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   25 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   17 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   22 - |  TRK_ROMINST :                   1F - |
 TRK_ROMPATT :                   1C - |  TRK_ROMPATTREAD :               19 - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               18 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    237 C |
 UPD_TRACK.CHNL_FREE :          351 C |  UPD_TRACK.CONT_CHNL :          35C C |
 UPD_TRACK.DECROW :             300 C |  UPD_TRACK.DECROW_E :           303 C |
 UPD_TRACK.EFFECT_FILL :        528 C |  UPD_TRACK.EFF_A :              3D6 C |
 UPD_TRACK.EFF_B :              3E7 C |  UPD_TRACK.EFF_C :              405 C |
 UPD_TRACK.EXIT :               2F4 C |  UPD_TRACK.FADE_OUT :           281 C |
 UPD_TRACK.FIRST_BLK :          45C C |  UPD_TRACK.FIRST_FILL :         52F C |
 UPD_TRACK.FIRST_HEAD :         4A4 C |  UPD_TRACK.GRAB_RHEAD :         5C1 C |
 UPD_TRACK.HAS_NOTE :           30B C |  UPD_TRACK.INC_CPATT :          408 C |
 UPD_TRACK.KEEP_BLK :           47A C |  UPD_TRACK.KEEP_IT :            4CA C |
 UPD_TRACK.KEEP_VOL :           297 C |  UPD_TRACK.NEXT_CHNL :          336 C |
 UPD_TRACK.NEXT_NOTE :          2E4 C |  UPD_TRACK.NO_EFF :             3A2 C |
 UPD_TRACK.NO_GLBL :            56F C |  UPD_TRACK.NO_INS :             384 C |
 UPD_TRACK.NO_NOTE :            379 C |  UPD_TRACK.NO_VOL :             38F C |
 UPD_TRACK.OLD_TYPE :           36D C |  UPD_TRACK.RAN_OUT :            416 C |
 UPD_TRACK.READ_TRACK :         254 C |  UPD_TRACK.ROW_ACTIVE :         2DD C |
 UPD_TRACK.SET_TRACK :          440 C |  UPD_TRACK.SFXMD :              2A1 C |
 UPD_TRACK.SRCH_NEW :           331 C |  UPD_TRACK.TOO_MUCH :           28D C |
 UPD_TRACK.TRACK_END :          519 C |  UPD_TRACK.TRK_BUFFRS :         23F C |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |
 VIDEO_BUILDSPRITES :                                      FFFFFFFFFFFF0452 C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                           FFFFFFFFFFFF060A C |
 VIDEO_BUILDSPRITES.CHK_SPR_R :                            FFFFFFFFFFFF05E8 C |
 VIDEO_BUILDSPRITES.DONT_ADD :                             FFFFFFFFFFFF05BC C |
 VIDEO_BUILDSPRITES.EX_VRAM :                              FFFFFFFFFFFF0508 C |
 VIDEO_BUILDSPRITES.EX_VRAMS :                             FFFFFFFFFFFF052C C |
 VIDEO_BUILDSPRITES.EX_YEXT :                              FFFFFFFFFFFF0590 C |
 VIDEO_BUILDSPRITES.FIRST_SPR :                            FFFFFFFFFFFF0472 C |
*VIDEO_BUILDSPRITES.FREEZE :                               FFFFFFFFFFFF05E0 C |
 VIDEO_BUILDSPRITES.MK_PZ :                                FFFFFFFFFFFF04DE C |
 VIDEO_BUILDSPRITES.NEXT :                                 FFFFFFFFFFFF04BA C |
 VIDEO_BUILDSPRITES.NEXT_PZ :                              FFFFFFFFFFFF047A C |
 VIDEO_BUILDSPRITES.NO_MAP :                               FFFFFFFFFFFF05D0 C |
 VIDEO_BUILDSPRITES.NO_PZ :                                FFFFFFFFFFFF05CC C |
*VIDEO_BUILDSPRITES.NO_SLOT :                              FFFFFFFFFFFF05D6 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                           FFFFFFFFFFFF061E C |
 VIDEO_BUILDSPRITES.NO_SLOT_R :                            FFFFFFFFFFFF05FC C |
 VIDEO_BUILDSPRITES.NO_SLOT_S :                            FFFFFFFFFFFF04AA C |
 VIDEO_BUILDSPRITES.STOP_ALL :                             FFFFFFFFFFFF05DA C |
 VIDEO_BUILDSPRITES.VRAM_H :                               FFFFFFFFFFFF055C C |
 VIDEO_BUILDSPRITES.VRAM_V :                               FFFFFFFFFFFF0544 C |
 VIDEO_CLEAR :     FFFFFFFFFFFF0658 C |
 VIDEO_CLEAR.CLR_ME :                                      FFFFFFFFFFFF0672 C |
 VIDEO_CLEAR.PMNEXT :                                      FFFFFFFFFFFF0662 C |
 VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF0688 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :                             FFFFFFFFFFFF06AE C |
*VIDEO_COPY :      FFFFFFFFFFFF09D4 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF09DE C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0A3A C |
 VIDEO_DEFAULT :   FFFFFFFFFFFF0314 C |
 VIDEO_DISPLAYOFF :                                        FFFFFFFFFFFF06C2 C |
 VIDEO_DISPLAYON : FFFFFFFFFFFF06B6 C |  VIDEO_DMAOFF :    FFFFFFFFFFFF06DA C |
 VIDEO_DMAON :     FFFFFFFFFFFF06CE C |
 VIDEO_FADEIN_FULL :                                       FFFFFFFFFFFF0E14 C |
 VIDEO_FADEOUT_FULL :                                      FFFFFFFFFFFF0E36 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0EAE C |
*VIDEO_FADEPAL_LIST :                                      FFFFFFFFFFFF0F04 C |
 VIDEO_FADEPAL_LIST.INVALID :                              FFFFFFFFFFFF0F1E C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F12 C |
 VIDEO_FILL :      FFFFFFFFFFFF095C C |  VIDEO_INIT :      FFFFFFFFFFFF0270 C |
 VIDEO_INIT.CLR_D :                                        FFFFFFFFFFFF02A6 C |
 VIDEO_INIT.CLR_MREQ :                                     FFFFFFFFFFFF02D2 C |
 VIDEO_INIT.CLR_PREQ :                                     FFFFFFFFFFFF02BE C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF027A C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF028C C |
 VIDEO_INIT.DEF_REGSET :                                   FFFFFFFFFFFF030A C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF02F8 C |
*VIDEO_INTENABLE : FFFFFFFFFFFF06F2 C |  VIDEO_LOADART :   FFFFFFFFFFFF084A C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF08E4 C |
 VIDEO_LOADART.LAST_SET :                                  FFFFFFFFFFFF089A C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF08A2 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF0894 C |
 VIDEO_LOADART.RAM_WRITE :                                 FFFFFFFFFFFF08E6 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF08FA C |
*VIDEO_LOADART_LIST :                                      FFFFFFFFFFFF093C C |
 VIDEO_LOADART_LIST.INVALID :                              FFFFFFFFFFFF0956 C |
 VIDEO_LOADART_LIST.NEXT_ONE :                             FFFFFFFFFFFF0948 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF0B16 C |
 VIDEO_LOADMAP.BAD_SIZE :                                  FFFFFFFFFFFF0B86 C |
 VIDEO_LOADMAP.MK_CELL :                                   FFFFFFFFFFFF0B76 C |
 VIDEO_LOADMAP.NON_BLANK :                                 FFFFFFFFFFFF0B74 C |
 VIDEO_LOADMAP.X_LOOP :                                    FFFFFFFFFFFF0B64 C |
 VIDEO_LOADMAP.Y_LOOP :                                    FFFFFFFFFFFF0B50 C |
 VIDEO_LOADMAPV :  FFFFFFFFFFFF0B8C C |
 VIDEO_LOADMAPV.BAD_SIZE :                                 FFFFFFFFFFFF0C0E C |
 VIDEO_LOADMAPV.BAD_SIZE_D :                               FFFFFFFFFFFF0C76 C |
 VIDEO_LOADMAPV.DBLE_MODE :                                FFFFFFFFFFFF0C14 C |
 VIDEO_LOADMAPV.MK_CELL :                                  FFFFFFFFFFFF0BF8 C |
 VIDEO_LOADMAPV.MK_CELL_D :                                FFFFFFFFFFFF0C60 C |
 VIDEO_LOADMAPV.NON_BLANK :                                FFFFFFFFFFFF0BF6 C |
 VIDEO_LOADMAPV.NON_BLANK_D :                              FFFFFFFFFFFF0C58 C |
 VIDEO_LOADMAPV.X_LOOP :                                   FFFFFFFFFFFF0BD0 C |
 VIDEO_LOADMAPV.X_LOOP_D :                                 FFFFFFFFFFFF0C2E C |
 VIDEO_LOADMAPV.Y_LOOP :                                   FFFFFFFFFFFF0BD6 C |
 VIDEO_LOADMAPV.Y_LOOP_D :                                 FFFFFFFFFFFF0C34 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0EB8 C |
*VIDEO_LOADPAL_LIST :                                      FFFFFFFFFFFF0EE4 C |
 VIDEO_LOADPAL_LIST.INVALID :                              FFFFFFFFFFFF0EFE C |
 VIDEO_LOADPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0EF2 C |
 VIDEO_MAKEDMAENTRY :                                      FFFFFFFFFFFF0A50 C |
 VIDEO_MAKEDMAENTRY.LAST_SET :                             FFFFFFFFFFFF0AA0 C |
 VIDEO_MAKEDMAENTRY.MK_SET :                               FFFFFFFFFFFF0AA8 C |
 VIDEO_MAKEDMAENTRY.NORMAL :                               FFFFFFFFFFFF0A9A C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :                              FFFFFFFFFFFF0B14 C |
 VIDEO_MAKEFADE :  FFFFFFFFFFFF0E70 C | *VIDEO_MAKESPR :   FFFFFFFFFFFF121E C |
 VIDEO_MAKESPR.CHK_FREE :                                  FFFFFFFFFFFF122A C |
 VIDEO_MAKESPR.MK_SPR :                                    FFFFFFFFFFFF123C C |
 VIDEO_MAKESPRMAP :                                        FFFFFFFFFFFF12CE C |
 VIDEO_MAKESPRMAP.CHK_FREE :                               FFFFFFFFFFFF12DA C |
 VIDEO_MAKESPRMAP.MK_SPR :                                 FFFFFFFFFFFF12EA C |
 VIDEO_MAKESPRMAP_DMA :                                    FFFFFFFFFFFF12B6 C |
 VIDEO_MDMARS_CLEANUP :                                    FFFFFFFFFFFF1392 C |
 VIDEO_MDMARS_CLEANUP.CHECK_BIT :                          FFFFFFFFFFFF13C0 C |
 VIDEO_MDMARS_CLEANUP.CHK_SPR :                            FFFFFFFFFFFF13DC C |
 VIDEO_MDMARS_CLEANUP.CHK_TEMP :                           FFFFFFFFFFFF13F6 C |
 VIDEO_MDMARS_CLEANUP.CLEANLIST :                          FFFFFFFFFFFF13A6 C |
 VIDEO_MDMARS_CLEANUP.MODE_2D :                            FFFFFFFFFFFF13B8 C |
 VIDEO_MDMARS_CLEANUP.MODE_3D :                            FFFFFFFFFFFF13EC C |
 VIDEO_MDMARS_CLEANUP.NONE :                               FFFFFFFFFFFF13B6 C |
 VIDEO_MDMARS_CLEANUP.NOT_SPRTEMP :                        FFFFFFFFFFFF13E4 C |
 VIDEO_MDMARS_CLEANUP.NOT_TEMP :                           FFFFFFFFFFFF13FE C |
*VIDEO_MDMARS_CLEANUP.NO_FREEZE :                          FFFFFFFFFFFF13EA C |
*VIDEO_MDMARS_CLEANUP.NO_MFREEZE :                         FFFFFFFFFFFF1404 C |
 VIDEO_MDMARS_CLEANUP.NO_REDRAW :                          FFFFFFFFFFFF13CA C |
 VIDEO_MDMARS_FADEPAL :                                    FFFFFFFFFFFF17C8 C |
*VIDEO_MDMARS_FADEPAL_LIST :                               FFFFFFFFFFFF1838 C |
 VIDEO_MDMARS_FADEPAL_LIST.INVALID :                       FFFFFFFFFFFF1856 C |
 VIDEO_MDMARS_FADEPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1846 C |
 VIDEO_MDMARS_LOADMAP :                                    FFFFFFFFFFFF14B2 C |
 VIDEO_MDMARS_LOADMAP.COPY_X :                             FFFFFFFFFFFF14E8 C |
 VIDEO_MDMARS_LOADMAP.COPY_Y :                             FFFFFFFFFFFF14D2 C |
 VIDEO_MDMARS_LOADPAL :                                    FFFFFFFFFFFF17D2 C |
*VIDEO_MDMARS_LOADPAL_LIST :                               FFFFFFFFFFFF1816 C |
 VIDEO_MDMARS_LOADPAL_LIST.INVALID :                       FFFFFFFFFFFF1832 C |
 VIDEO_MDMARS_LOADPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1824 C |
 VIDEO_MDMARS_LOADVRAM :                                   FFFFFFFFFFFF1488 C |
 VIDEO_MDMARS_LOADVRAM.GOOD_SZ :                           FFFFFFFFFFFF14A2 C |
 VIDEO_MDMARS_LOADVRAM.GOT_ZERO :                          FFFFFFFFFFFF14AC C |
 VIDEO_MDMARS_MAKEFADE :                                   FFFFFFFFFFFF0E58 C |
 VIDEO_MDMARS_MAKESPR2D :                                  FFFFFFFFFFFF151C C |
 VIDEO_MDMARS_MAKESPR2D.CHK_FREE :                         FFFFFFFFFFFF1528 C |
 VIDEO_MDMARS_MAKESPR2D.MK_SPR :                           FFFFFFFFFFFF1538 C |
 VIDEO_MDMARS_MAKESPR3D :                                  FFFFFFFFFFFF15B8 C |
 VIDEO_MDMARS_MAKESPR3D.CHK_FREE :                         FFFFFFFFFFFF15C4 C |
 VIDEO_MDMARS_MAKESPR3D.MK_SPR :                           FFFFFFFFFFFF15D4 C |
 VIDEO_MDMARS_PALBACKUP :                                  FFFFFFFFFFFF1406 C |
 VIDEO_MDMARS_PALBACKUP.COPY_IT :                          FFFFFFFFFFFF1422 C |
 VIDEO_MDMARS_PALBACKUP.SVDP_LOCKED :                      FFFFFFFFFFFF1436 C |
 VIDEO_MDMARS_RUNFADE :                                    FFFFFFFFFFFF1646 C |
*VIDEO_MDMARS_RUNFADE.ALL_BLACK :                          FFFFFFFFFFFF170C C |
 VIDEO_MDMARS_RUNFADE.BUSY_TIMER :                         FFFFFFFFFFFF168C C |
 VIDEO_MDMARS_RUNFADE.FADE_IN :                            FFFFFFFFFFFF1718 C |
 VIDEO_MDMARS_RUNFADE.FADE_LIST :                          FFFFFFFFFFFF1698 C |
 VIDEO_MDMARS_RUNFADE.FADE_OUT :                           FFFFFFFFFFFF16AC C |
 VIDEO_MDMARS_RUNFADE.FDIN_NEND :                          FFFFFFFFFFFF17C6 C |
 VIDEO_MDMARS_RUNFADE.FDOUT_NEND :                         FFFFFFFFFFFF1716 C |
 VIDEO_MDMARS_RUNFADE.NEXT_COLOR :                         FFFFFFFFFFFF16BA C |
 VIDEO_MDMARS_RUNFADE.NEXT_IN :                            FFFFFFFFFFFF1724 C |
 VIDEO_MDMARS_RUNFADE.NEXT_REQ :                           FFFFFFFFFFFF164A C |
 VIDEO_MDMARS_RUNFADE.NOTHING :                            FFFFFFFFFFFF16A8 C |
 VIDEO_MDMARS_RUNFADE.NO_REQ :                             FFFFFFFFFFFF1692 C |
*VIDEO_MDMARS_RUNFADE.SAME_IN :                            FFFFFFFFFFFF17B0 C |
 VIDEO_MDMARS_RUNFADE.SET_PRIO :                           FFFFFFFFFFFF17AA C |
 VIDEO_MDMARS_SETSPR2D :                                   FFFFFFFFFFFF1512 C |
 VIDEO_MDMARS_SETSPR3D :                                   FFFFFFFFFFFF15AE C |
 VIDEO_MDMARS_SETSYNC :                                    FFFFFFFFFFFF1378 C |
 VIDEO_MDMARS_VIDEOMODE :                                  FFFFFFFFFFFF143A C |
 VIDEO_MDMARS_VIDEOMODE.WAIT_FINISH :                      FFFFFFFFFFFF1468 C |
 VIDEO_MDMARS_VIDEOOFF :                                   FFFFFFFFFFFF1438 C |
*VIDEO_MDMARS_WAITFRAME :                                  FFFFFFFFFFFF138E C |
 VIDEO_MDMARS_WAITSYNC :                                   FFFFFFFFFFFF1382 C |
 VIDEO_PRINT :     FFFFFFFFFFFF0F66 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0FCC C |
 VIDEO_PRINT.HEX_INCR :                                    FFFFFFFFFFFF1040 C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0F96 C |
 VIDEO_PRINT.MK_VALUE :                                    FFFFFFFFFFFF101C C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0FC6 C |
 VIDEO_PRINT.Q_LOOP :                                      FFFFFFFFFFFF0FAC C |
 VIDEO_PRINT.SHOW_24 :                                     FFFFFFFFFFFF1010 C |
*VIDEO_PRINT.SHOW_BYTE :                                   FFFFFFFFFFFF1000 C |
 VIDEO_PRINT.SHOW_LONG :                                   FFFFFFFFFFFF1018 C |
 VIDEO_PRINT.SHOW_NIBBL :                                  FFFFFFFFFFFF1030 C |
 VIDEO_PRINT.SHOW_WORD :                                   FFFFFFFFFFFF1008 C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF0FD2 C |
*VIDEO_PRINTDEFPAL :                                       FFFFFFFFFFFF0F50 C |
 VIDEO_PRINTDEFPAL_FADE :                                  FFFFFFFFFFFF0F48 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0F34 C |
 VIDEO_PRINTINITW :                                        FFFFFFFFFFFF0F24 C |
 VIDEO_PRINTW :    FFFFFFFFFFFF1050 C |
 VIDEO_PRINTW.EXIT :                                       FFFFFFFFFFFF111E C |
 VIDEO_PRINTW.GET_PREVAL :                                 FFFFFFFFFFFF1200 C |
 VIDEO_PRINTW.HEX_INCR :                                   FFFFFFFFFFFF120E C |
 VIDEO_PRINTW.LOOP :                                       FFFFFFFFFFFF109E C |
 VIDEO_PRINTW.MK_VALUE :                                   FFFFFFFFFFFF1172 C |
 VIDEO_PRINTW.MK_VALUE_IN :                                FFFFFFFFFFFF116E C |
 VIDEO_PRINTW.NEXT :                                       FFFFFFFFFFFF1116 C |
 VIDEO_PRINTW.NIBBL_CONT :                                 FFFFFFFFFFFF11F8 C |
 VIDEO_PRINTW.NIBBL_NORM :                                 FFFFFFFFFFFF11C4 C |
 VIDEO_PRINTW.NO_DBLE_Y :                                  FFFFFFFFFFFF1076 C |
 VIDEO_PRINTW.SHOW_24 :                                    FFFFFFFFFFFF1162 C |
*VIDEO_PRINTW.SHOW_BYTE :                                  FFFFFFFFFFFF1152 C |
 VIDEO_PRINTW.SHOW_LONG :                                  FFFFFFFFFFFF116A C |
 VIDEO_PRINTW.SHOW_NIBBL :                                 FFFFFFFFFFFF1186 C |
 VIDEO_PRINTW.SHOW_WORD :                                  FFFFFFFFFFFF115A C |
 VIDEO_PRINTW.SPECIAL :                                    FFFFFFFFFFFF1124 C |
 VIDEO_PRINTW.VER_CONT :                                   FFFFFFFFFFFF1110 C |
 VIDEO_PRINTW.VER_NORMAL :                                 FFFFFFFFFFFF10DE C |
 VIDEO_RENDER :    FFFFFFFFFFFF0362 C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF0446 C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF0450 C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF042C C |
 VIDEO_RESOLUTION :                                        FFFFFFFFFFFF0744 C |
 VIDEO_RESOLUTION.DOUBLE :                                 FFFFFFFFFFFF0786 C |
 VIDEO_RESOLUTION.EX_BIT :                                 FFFFFFFFFFFF0778 C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0C7A C |
 VIDEO_RUNFADE.ALL_BLACK :                                 FFFFFFFFFFFF0D46 C |
 VIDEO_RUNFADE.BUSY_TIMER :                                FFFFFFFFFFFF0CC0 C |
 VIDEO_RUNFADE.FADE_IN :                                   FFFFFFFFFFFF0D54 C |
 VIDEO_RUNFADE.FADE_LIST :                                 FFFFFFFFFFFF0CCC C |
 VIDEO_RUNFADE.FADE_OUT :                                  FFFFFFFFFFFF0CE4 C |
*VIDEO_RUNFADE.FDIN_NEND :                                 FFFFFFFFFFFF0DEA C |
*VIDEO_RUNFADE.FDOUT_NEND :                                FFFFFFFFFFFF0D52 C |
 VIDEO_RUNFADE.NEXT_COLOR :                                FFFFFFFFFFFF0CF2 C |
 VIDEO_RUNFADE.NEXT_IN :                                   FFFFFFFFFFFF0D60 C |
 VIDEO_RUNFADE.NEXT_REQ :                                  FFFFFFFFFFFF0C7E C |
 VIDEO_RUNFADE.NOTHING :                                   FFFFFFFFFFFF0CDC C |
 VIDEO_RUNFADE.NO_REQ :                                    FFFFFFFFFFFF0CC6 C |
 VIDEO_RUNFADE.PFADE_DEL :                                 FFFFFFFFFFFF0CDC C |
 VIDEO_RUNFADE.SAME_IN :                                   FFFFFFFFFFFF0DD4 C |
 VIDEO_SETMAPSIZE :                                        FFFFFFFFFFFF0824 C |
*VIDEO_SETSPR :    FFFFFFFFFFFF1214 C |  VIDEO_SETSPRMAP : FFFFFFFFFFFF12AC C |
*VIDEO_SETSPRMAP_DMA :                                     FFFFFFFFFFFF12A2 C |
 VIDEO_UPDMAPVRAM :                                        FFFFFFFFFFFF0798 C |
 VIDEO_UPDSPRHVRAM :                                       FFFFFFFFFFFF07EA C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF0DEC C |
 VIDEO_WAITFADE.LOOP :                                     FFFFFFFFFFFF0DEC C |
 VIDEO_WAITFADE.NEXT_ONE :                                 FFFFFFFFFFFF0DFE C |
 VIDMARS_PAL :     FFFFFFFFFFFF17DA C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF17F4 C |
 VIDMARS_PAL.TRNSPR :                                      FFFFFFFFFFFF1806 C |
 VIDMDMARS_CERROR :                                        FFFFFFFFFFFF15A4 C |
 VIDMDMARS_MKSPR2D :                                       FFFFFFFFFFFF153A C |
*VIDMDMARS_MKSPR2D.ON_FREEZE :                             FFFFFFFFFFFF159A C |
 VIDMDMARS_MKSPR3D :                                       FFFFFFFFFFFF15D6 C |
 VIDMDSPR_MKSPR :  FFFFFFFFFFFF123E C |
 VIDMDSPR_MKSPR.DONT_ADD :                                 FFFFFFFFFFFF1268 C |
 VIDMDSPR_MKSPRMAP :                                       FFFFFFFFFFFF12EC C |
 VIDMD_CERROR :    FFFFFFFFFFFF1298 C | *VIDMD_CFREEZE :   FFFFFFFFFFFF12A0 C |
 VIDMD_PAL :       FFFFFFFFFFFF0EC0 C |  VIDMD_PAL.BAD :   FFFFFFFFFFFF0EDE C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0ED8 C |  VIDMKFADE_GO :    FFFFFFFFFFFF0E88 C |
 VIDPRINT_INIT :   FFFFFFFFFFFF0F42 C |
 VID_CHECKLASTSPR :                                        FFFFFFFFFFFF0626 C |
 VID_CHECKLASTSPR.BLNK_FIRST :                             FFFFFFFFFFFF0640 C |
 VID_CHECKLASTSPR.LAST_ONE :                               FFFFFFFFFFFF0646 C |
 VID_CHECKLASTSPR.SPR_EXIT :                               FFFFFFFFFFFF0656 C |
*VID_FILLGO :      FFFFFFFFFFFF0964 C |  VID_FILLGO.DMAW : FFFFFFFFFFFF096A C |
 VID_FILLGO.DMA_W :                                        FFFFFFFFFFFF09BE C |
 VID_FONTDEFPAL :  FFFFFFFFFFFF0F56 C |  VID_MKDMACARRY :  FFFFFFFFFFFF12C8 C |
 VID_MKDMANEXT :   FFFFFFFFFFFF12BE C |  VID_MKMAPDMA :    FFFFFFFFFFFF1328 C |
 VID_MKMAPDMA.NEXT_PZ :                                    FFFFFFFFFFFF1348 C |
 VID_MKMAPDMA.NO_DMA :                                     FFFFFFFFFFFF1372 C |
 VID_WRTREG01 :    FFFFFFFFFFFF06E4 C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :    FFFFFFFFFFFF1C8C C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1BFC C |  WAVE_LEN :                    1BF4 C |
 WAVE_LOOP :                   1BF7 C |  WAVE_PITCH :                  1BFA C |
 WAVE_START :                  1BF1 C |  WAVFREQ_CDPCM :               1586 C |
 WAVFREQ_LIST :                1526 C |  X68KSRCLSB :                  1CF7 C |
 X68KSRCMID :                  1CF8 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  882CFC C |
 Z80_CODE_END :              884C82 C | *Z80_CODE_FILE_E :             4C82 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
 ZDRVRAMLEN :                    30 - |  ZDRVRAMSRC :                    35 - |
 ZDRVROMBLK :                    2F - |  ZMARS_SEND :                   FC8 C |
 ZMARS_SEND.BLOCKED_M :        1048 C |  ZMARS_SEND.CLR_PWM :          104E C |
 ZMARS_SEND.NEXT_COMM :        1020 C |  ZMARS_SEND.NEXT_PACKET :      1015 C |
 ZMARS_SEND.PWM_EXIT :         1052 C |  ZMARS_SEND.SET_COMBANK :      105A C |
 ZMARS_SEND.WAIT_ENTER :        FE9 C |  ZMARS_SEND.W_PASS2 :          1036 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_EFFBUFF :                   9 - |
 ZTBL_FM_ALFD :                   C - |  ZTBL_FM_KEYS :                   F - |
 ZTBL_FM_LFO :                    E - |  ZTBL_FM_PMAM :                   D - |
 ZTBL_FREQINDX :                  5 - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
*ZTBL_PRIORITY :                  2 - |  ZTBL_VART0 :                     A - |
 ZTBL_VART1 :                     B - |  ZTBL_VOLUME :                    7 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
 _CCR :                    FFFFFE92 - |  _DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - |  _JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
 _VDPREG :                 20004100 - |

   2202 symbols
    314 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 09/14/2024 05:32:19 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
CPU_ME                                | DATA_DEND                            
DATA_DSET                             | ENDMEMORY                            
ERREPORT                              | FILLSECTORS                          
FS_END                                | FS_FILE                              
FS_MKLIST                             | GEMAHEAD                             
GEMALIST                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | MARS_VRAMEND                         
MARS_VRAMSTART                        | MEMORY                               
REPORT                                | ROMPAD                               
SCREEN_CODE                           | VDP_SHOWME                           

     30 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 09/14/2024 05:32:19 AM


  Defined Structures/Unions:
  --------------------------

DREQ
  0      (I16) PALETTE
200      (I8) BUFF0
220      (I8) BUFF1
620      (I8) BUFF2

MARSGBL
  0      (I16) THISFRAME
  2      (I16) XSHIFT
  4      (I16) WDGTASK
  6      (I16) WDGHOLD
  8      (I16) WDGDIVLOCK
  A      (I16) WDGREADY
  C      (I16) PLYPZCNTR
  E      (I16) WDGCLLINES
 10      (I16) WDGACTIVE
 16      (I16) DRAWALL
 18      (I32) 3D_OUTWIDTH
 1C      (I32) 3D_OUTHEIGHT
 20      (I32) DREQREAD
 24      (I32) DREQWRITE
 28      (I32) PLGNPZINDX_R
 2C      (I32) PLGNPZINDX_W
 30      (I32) SCRL_XPOS
 34      (I32) SCRL_YPOS
 38      (I32) SCRL_XOLD
 3C      (I32) SCRL_YOLD
 40      (I32) SCRL_SIZE
 44      (I32) SCRL_WDTH
 48      (I32) SCRL_HGHT
 4C      (I32) SCRL_VRAM
 50      (I32) SCRL_FBOUT
 54      (I32) SCRL_FBTL
 58      (I32) SCRL_FBY
 5C      (I32) SCRL_FBX

MARSPWM
  0      (I32) ENBL
  4      (I32) READ
  8      (I32) BANK
  C      (I32) START
 10      (I32) LENGTH
 14      (I32) LOOP
 18      (I32) PITCH
 1C      (I32) VOL
 20      (I32) CBANK
 24      (I32) CREAD

MCAM
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) Z_POS
  C      (I32) X_ROT
 10      (I32) Y_ROT
 14      (I32) Z_ROT

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

MMDL
  0      (I16) FRAME
  4      (I32) DATA
  8      (I32) X_POS
  C      (I32) Y_POS
 10      (I32) Z_POS
 14      (I32) X_ROT
 18      (I32) Z_ROT
 1C      (I32) Y_ROT

MSPR
  0      (I8) FLAGS
  1      (I8) INDX
  2      (I8) SIZE_W
  3      (I8) SIZE_H
  4      (I8) SRC_W
  5      (I8) SRC_H
  6      (I8) SRCWDTH
  7      (I8) FRAME_X
  8      (I8) FRAME_Y
 10      (I16) X_POS
 12      (I16) Y_POS
 14      (I16) Z_POS
 16      (I16) X_ROT
 18      (I16) Z_ROT
 1A      (I16) Y_ROT
 1C      (I32) VRAM

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM

PLYGN
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) POINTS
 28      (I16) SRCPNTS

PLYPZ
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) YTB
  C      (I32) XL
 10      (I32) SRC_XL
 14      (I32) SRC_YL
 18      (I32) XL_DX
 1C      (I32) XR_DX
 20      (I32) SRC_XL_DX
 24      (I32) SRC_XR_DX
 28      (I32) SRC_YL_DX
 2C      (I32) SRC_YR_DX

SSCRL
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) VRAM

SSPR
  0      (I8) FLAGS
  2      (I16) FRAME
  4      (I16) SIZE
  6      (I16) INDX
  8      (I16) X_POS
  A      (I16) Y_POS
  C      (I32) VRAM
13 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 09/14/2024 05:32:19 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 09/14/2024 05:32:19 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.38 seconds assembly time

  23146 lines source file
  24570 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
