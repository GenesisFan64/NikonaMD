 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 09/26/2024 03:18:27 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$7                  SET_INITMODE	equ 7		; Starting screen mode number on boot
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)USER 2024.???"  HTAG_DATEINFO	equ "(C)USER 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SEGA CD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name (if SET_SAMECDINFO is False)
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MOMPASS>2
(1)  231/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  232/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  233/       0 :                     		endif
(1)  234/       0 :                     	endif
(1)  235/       0 :                     
(1)  236/       0 :                     	if MARS
(1)  237/       0 :                     		if * >= $900000+$100000
(1)  238/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  239/       0 :                     		endif
(1)  240/       0 :                     
(1)  241/       0 :                     		dephase
(1)  242/       0 :                     	elseif MCD|MARSCD
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     
(1)  245/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  246/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  247/       0 :                     		rompad mpadlbl
(1)  248/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  249/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	endm
(1)  252/       0 :                     
(1)  253/       0 :                     ; --------------------------------------------
(1)  254/       0 :                     
(1)  255/       0 :                     binclude_dma	macro lblstart,file
(1)  256/       0 :                     	if MARS
(1)  257/       0 :                     GLBL_LASTPHDMA	set *
(1)  258/       0 :                     	dephase
(1)  259/       0 :                     GLBL_PHASEDMA	set *
(1)  260/       0 :                     		endif
(1)  261/       0 :                     
(1)  262/       0 :                     		align 2
(1)  263/       0 :                     lblstart	label *
(1)  264/       0 :                     		binclude file
(1)  265/       0 :                     		align 2
(1)  266/       0 :                     
(1)  267/       0 :                     	if MARS
(1)  268/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  269/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  270/       0 :                     	endif
(1)  271/       0 :                     		endm
(1)  272/       0 :                     
(1)  273/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  274/       0 :                     	if MARS
(1)  275/       0 :                     GLBL_LASTPHDMA	set *
(1)  276/       0 :                     	dephase
(1)  277/       0 :                     GLBL_PHASEDMA	set *
(1)  278/       0 :                     		endif
(1)  279/       0 :                     
(1)  280/       0 :                     		align 2
(1)  281/       0 :                     lblstart	label *
(1)  282/       0 :                     		binclude file
(1)  283/       0 :                     lblend		label *
(1)  284/       0 :                     		align 2
(1)  285/       0 :                     
(1)  286/       0 :                     	if MARS
(1)  287/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  288/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  289/       0 :                     	endif
(1)  290/       0 :                     		endm
(1)  291/       0 :                     
(1)  292/       0 :                     ; --------------------------------------------
(1)  293/       0 :                     ; 32X graphics pack Enter/Exit
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     
(1)  296/       0 :                     mars_VramStart	macro thelabel
(1)  297/       0 :                     thelabel label *
(1)  298/       0 :                     		phase 0
(1)  299/       0 :                     		endm
(1)  300/       0 :                     
(1)  301/       0 :                     mars_VramEnd	macro thelabel
(1)  302/       0 :                     		align 8
(1)  303/       0 :                     .end:
(1)  304/       0 :                     ; 		if MOMPASS == 1
(1)  305/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  306/       0 :                     ; 		endif
(1)  307/       0 :                     		dephase
(1)  308/       0 :                     thelabel label *
(1)  309/       0 :                     		endm
(1)  310/       0 :                     
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     ; Fill CD sectors
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     
(1)  315/       0 :                     fillSectors macro num
(1)  316/       0 :                     	rept num
(1)  317/       0 :                     		align $800-1
(1)  318/       0 :                     		dc.b 0
(1)  319/       0 :                     	endm
(1)  320/       0 :                     	endm
(1)  321/       0 :                     
(1)  322/       0 :                     ; ====================================================================
(1)  323/       0 :                     ; ------------------------------------------------------------
(1)  324/       0 :                     ; Nikona CODE macros
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     
(1)  327/       0 :                     ; --------------------------------------------
(1)  328/       0 :                     ; VDP color debug
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     
(1)  331/       0 :                     vdp_showme	macro color
(1)  332/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  333/       0 :                     		move.w	#color,(vdp_data).l
(1)  334/       0 :                     		endm
(1)  335/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$20                 MAX_MCDSTAMPS	equ 32		; !! Maximum SCD Stamps
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; Stamp data buffer
(1)   24/       0 :                     ; Fixed size of $20 bytes
(1)   25/       0 :                     
(1)   26/       0 :                     cdstamp		struct
(1)   27/       0 :                     flags		ds.b 1		; Flags
(1)   28/       1 :                     map		ds.b 1		; Map slot index (in WRAM_MdStampList)
(1)   29/       2 :                     cx		ds.w 1		; Center Texture X
(1)   30/       4 :                     cy		ds.w 1		; Center Texture Y
(1)   31/       6 :                     x		ds.w 1		; Stamp X position
(1)   32/       8 :                     y		ds.w 1		; Stamp Y position
(1)   33/       A :                     wdth		ds.w 1		; Stamp width
(1)   34/       C :                     hght		ds.w 1		; Stamp height
(1)   35/       E :                     scale		ds.w 1
(1)   36/      10 :                     rot		ds.w 1
(1)   37/      12 :                     		ds.w 1
(1)   38/      14 :                     		ds.w 1
(1)   39/      16 :                     		ds.w 1
(1)   40/      18 :                     		ds.w 1
(1)   41/      1A :                     		ds.w 1
(1)   42/      1C :                     		ds.w 1
(1)   43/      1E :                     		ds.w 1
(1)   44/      20 :                     ; len		ds.l 0
(1)   45/       0 : =$20                 		endstruct
(1)   46/       0 :                     
(1)   47/       0 :                     ; ============================================================
(1)   48/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)   57/       0 :                     
(1)   58/       0 :                     ; --------------------------------------------------------
(1)   59/       0 :                     ; Settings
(1)   60/       0 :                     ; --------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$20                 MAX_MARSSPR	equ 32		; !! Maximum 2D-mode Sprites
(1)   63/       0 : =$20                 MAX_MARSMSPR	equ 32		; !! Maximum 3D-mode Sprites
(1)   64/       0 : =$18                 MAX_MARSOBJ	equ 24		; !! Maximum 3D-mode Objects (models)
(1)   65/       0 :                     
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     ; Structs
(1)   68/       0 :                     ; --------------------------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     ; ----------------------------------------
(1)   71/       0 :                     ; RAM_MdMars_ScrlSett
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; Maximum size: $20 bytes
(1)   74/       0 :                     ; ----------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     sscrl		struct
(1)   77/       0 :                     x_pos		ds.l 1		; $xxxx.0000
(1)   78/       4 :                     y_pos		ds.l 1		; $yyyy.0000
(1)   79/       8 :                     vram		ds.l 1		; VRAM
(1)   80/       0 : =$C                  		endstruct
(1)   81/       0 :                     
(1)   82/       0 :                     ; ----------------------------------------
(1)   83/       0 :                     ; RAM_MdMars_SuperSpr
(1)   84/       0 :                     ;
(1)   85/       0 :                     ; sspr_Flags: %ET0000yx
(1)   86/       0 :                     ;	| E - Enabled sprite
(1)   87/       0 :                     ;	| T - Delete on next frame (68k clears bit)
(1)   88/       0 :                     ; 	| x - Flip X
(1)   89/       0 :                     ; 	| y - Flip Y
(1)   90/       0 :                     ; sspr_Size: $xxyy
(1)   91/       0 :                     ; 	| xx - Width/8
(1)   92/       0 :                     ; 	| yy - Height/8
(1)   93/       0 :                     ;
(1)   94/       0 :                     ; Maximum size: $10 bytes
(1)   95/       0 :                     ; ----------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     sspr		struct
(1)   98/       0 :                     flags		ds.b 1		; %ET0000yx
(1)   99/       1 :                     		ds.b 1
(1)  100/       2 :                     frame		ds.w 1		; Current frame
(1)  101/       4 :                     size		ds.w 1		; Size in cells $XXYY
(1)  102/       6 :                     indx		ds.w 1		; 256-index color
(1)  103/       8 :                     x_pos		ds.w 1		; X position
(1)  104/       A :                     y_pos		ds.w 1		; Y position
(1)  105/       C :                     vram		ds.l 1		; Graphics VRAM position (in RAM_Mars_VramData)
(1)  106/      10 :                     ; len		ds.l 0
(1)  107/       0 : =$10                 		endstruct
(1)  108/       0 :                     
(1)  109/       0 :                     ; ----------------------------------------
(1)  110/       0 :                     ; RAM_MdMars_Models
(1)  111/       0 :                     ;
(1)  112/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  113/       0 :                     ;
(1)  114/       0 :                     ; Maximum size: $20 bytes
(1)  115/       0 :                     ; ----------------------------------------
(1)  116/       0 :                     
(1)  117/       0 :                     mmdl		struct
(1)  118/       0 :                     frame		ds.w 1
(1)  119/       2 :                     		ds.w 1
(1)  120/       4 :                     data		ds.l 1		; Model data pointer, 0: No model
(1)  121/       8 :                     x_pos		ds.l 1		; X position
(1)  122/       C :                     y_pos		ds.l 1		; Y position
(1)  123/      10 :                     z_pos		ds.l 1		; Z position
(1)  124/      14 :                     x_rot		ds.l 1		; X rotation
(1)  125/      18 :                     z_rot		ds.l 1		; Y rotation
(1)  126/      1C :                     y_rot		ds.l 1		; Z rotation
(1)  127/      20 :                     ; len		ds.l 0
(1)  128/       0 : =$20                 		endstruct
(1)  129/       0 :                     
(1)  130/       0 :                     ; ----------------------------------------
(1)  131/       0 :                     ; RAM_MdMars_MSprites
(1)  132/       0 :                     ;
(1)  133/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  134/       0 :                     ;
(1)  135/       0 :                     ; Maximum size: $20 bytes
(1)  136/       0 :                     ; ----------------------------------------
(1)  137/       0 :                     
(1)  138/       0 :                     mspr		struct
(1)  139/       0 :                     flags		ds.b 1		; %EIF00000 E-enable | I-Normal/3D-field | F-Face to the camera
(1)  140/       1 :                     indx		ds.b 1		; Palette starting index
(1)  141/       2 :                     size_w		ds.b 1		; Size width
(1)  142/       3 :                     size_h		ds.b 1		; Size height
(1)  143/       4 :                     src_w		ds.b 1		; Texture frame width
(1)  144/       5 :                     src_h		ds.b 1		; Texture frame height
(1)  145/       6 :                     srcwdth		ds.b 1		; Texture width
(1)  146/       7 :                     frame_x		ds.b 1		; X frame
(1)  147/       8 :                     frame_y		ds.b 1		; Y frame
(1)  148/       9 :                     		ds.b 1
(1)  149/       A :                     		ds.b 1
(1)  150/       B :                     		ds.b 1
(1)  151/       C :                     		ds.b 1
(1)  152/       D :                     		ds.b 1
(1)  153/       E :                     		ds.b 1
(1)  154/       F :                     		ds.b 1
(1)  155/      10 :                     x_pos		ds.w 1		; X position
(1)  156/      12 :                     y_pos		ds.w 1		; Y position
(1)  157/      14 :                     z_pos		ds.w 1		; Z position
(1)  158/      16 :                     x_rot		ds.w 1		; X rotation
(1)  159/      18 :                     z_rot		ds.w 1		; Y rotation
(1)  160/      1A :                     y_rot		ds.w 1		; Z rotation
(1)  161/      1C :                     vram		ds.l 1		; VRAM texture location
(1)  162/      20 :                     ; len		ds.l 0
(1)  163/       0 : =$20                 		endstruct
(1)  164/       0 :                     
(1)  165/       0 :                     ; ----------------------------------------
(1)  166/       0 :                     ; RAM_MdMars_MdlCamera
(1)  167/       0 :                     ;
(1)  168/       0 :                     ; X/Y/Z are in 10mm steps (1meter = $100)
(1)  169/       0 :                     ;
(1)  170/       0 :                     ; Maximum size: $20 bytes
(1)  171/       0 :                     ; ----------------------------------------
(1)  172/       0 :                     
(1)  173/       0 :                     mcam		struct
(1)  174/       0 :                     x_pos		ds.l 1		; X position
(1)  175/       4 :                     y_pos		ds.l 1		; Y position
(1)  176/       8 :                     z_pos		ds.l 1		; Z position
(1)  177/       C :                     x_rot		ds.l 1		; X rotation
(1)  178/      10 :                     y_rot		ds.l 1		; Y rotation
(1)  179/      14 :                     z_rot		ds.l 1		; Z rotation
(1)  180/      18 :                     ; len		ds.l 0
(1)  181/       0 : =$18                 		endstruct
(1)  182/       0 :                     
(1)  183/       0 :                     ; ----------------------------------------------------------------
(1)  184/       0 :                     ; DREQ RAM section
(1)  185/       0 :                     ;
(1)  186/       0 :                     ; To read these labels:
(1)  187/       0 :                     ;
(1)  188/       0 :                     ; On the Genesis:
(1)  189/       0 :                     ; 	lea	(RAM_MdMars_Comm+DREQ_LABEL).w,aX
(1)  190/       0 :                     ; On the 32X:
(1)  191/       0 :                     ; 	mov	#DREQ_LABEL,rX
(1)  192/       0 :                     ; 	mov	@(marsGbl_DreqRead,gbr),r0
(1)  193/       0 :                     ;	add	r0,rX
(1)  194/       0 :                     ;
(1)  195/       0 :                     ; List MUST be aligned by 8bytes.
(1)  196/       0 :                     ; ----------------------------------------------------------------
(1)  197/       0 :                     
(1)  198/       0 :                     Dreq		struct
(1)  199/       0 :                     Palette		ds.w 256				; 256-color palette *DON'T MOVE THIS*
(1)  200/     200 :                     Buff0		ds.b $20				; Buffer 0 | $020 bytes
(1)  201/     220 :                     Buff1		ds.b $400				; Buffer 1 | $400 bytes
(1)  202/     620 :                     Buff2		ds.b $400				; Buffer 2 | $400 bytes
(1)  203/     A20 :                     ; len		ds.l 0
(1)  204/       0 : =$A20                		endstruct
(1)  208/       0 :                     
(1)  209/       0 :                     ; ====================================================================
(1)  210/       0 :                     ; ----------------------------------------------------------------
(1)  211/       0 :                     ; Mode 1: 2D scrolling with sprites
(1)  212/       0 :                     ; ----------------------------------------------------------------
(1)  213/       0 :                     
(1)  214/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  214/       0 : =$0                  GLBL_LASTPC     := *
(1)  214/       0 :                                     dephase
(1)  214/FFFFFFFFFFFFCE60 :                                     phase RAM_MDMARS_COMMBUFF
(1)  214/FFFFFFFFFFFFCE60 : =$FFFFFFFFFFFFCE60   GLBL_LASTORG    := *
(1)  215/FFFFFFFFFFFFCE60 :                     			ds.w 256			; pallete skip
(1)  216/FFFFFFFFFFFFD060 :                     RAM_MdMars_ScrlSett	ds.b $20
(1)  217/FFFFFFFFFFFFD080 :                     RAM_MdMars_ScrlData	ds.w (512/16)*(256/16)
(1)  218/FFFFFFFFFFFFD480 :                     RAM_MdMars_SuperSpr	ds.b sspr_len*MAX_MARSSPR
(1)  219/FFFFFFFFFFFFD680 :                     .sizeof_this		ds.l 0
(1)  220/FFFFFFFFFFFFD684 : (MACRO)              			endmemory
(1)  220/     824 :                     .here:          dephase
(1)  220/     824 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  220/       0 :                                     phase GLBL_LASTPC
(1)  221/       0 : (MACRO)              			erreport "This DREQ MEMORY: 2D",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  222/       0 :                     
(1)  223/       0 :                     ; ====================================================================
(1)  224/       0 :                     ; ----------------------------------------------------------------
(1)  225/       0 :                     ; Mode 2: 3D polygons mode
(1)  226/       0 :                     ; ----------------------------------------------------------------
(1)  227/       0 :                     
(1)  228/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  228/       0 : =$0                  GLBL_LASTPC     := *
(1)  228/       0 :                                     dephase
(1)  228/FFFFFFFFFFFFCE60 :                                     phase RAM_MDMARS_COMMBUFF
(1)  228/FFFFFFFFFFFFCE60 : =$FFFFFFFFFFFFCE60   GLBL_LASTORG    := *
(1)  229/FFFFFFFFFFFFCE60 :                     			ds.w 256			; pallete skip
(1)  230/FFFFFFFFFFFFD060 :                     RAM_MdMars_MdlCamera	ds.b $20
(1)  231/FFFFFFFFFFFFD080 :                     RAM_MdMars_MSprites	ds.b mspr_len*MAX_MARSMSPR	; $400
(1)  232/FFFFFFFFFFFFD480 :                     RAM_MdMars_Models	ds.b mmdl_len*MAX_MARSOBJ	; $400
(1)  233/FFFFFFFFFFFFD780 :                     .sizeof_this		ds.l 0
(1)  234/FFFFFFFFFFFFD784 : (MACRO)              			endmemory
(1)  234/     924 :                     .here:          dephase
(1)  234/     924 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  234/       0 :                                     phase GLBL_LASTPC
(1)  235/       0 : (MACRO)              			erreport "This DREQ MEMORY: 3D",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  236/       0 :                     
(1)  237/       0 :                     ; ============================================================
(1)  238/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   53/FFFFFFFFFFFFC800 :                     RAM_MdMisc		ds.b sizeof_mdmisc-RAM_MdMisc
(1)   55/FFFFFFFFFFFFD880 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFE874 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFFA16 :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFFA1C :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFFA1C : (MACRO)              			endmemory
(1)   60/    4A1C :                     .here:          dephase
(1)   60/    4A1C :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   70/       0 : (MACRO)              			memory RAM_MdMisc
(1)   70/       0 : =$0                  GLBL_LASTPC     := *
(1)   70/       0 :                                     dephase
(1)   70/FFFFFFFFFFFFC800 :                                     phase RAM_MDMISC
(1)   70/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)   71/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   72/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   81/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   82/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   84/FFFFFFFFFFFFC800 :                     RAM_MdMcd_Stamps	ds.b $20*MAX_MCDSTAMPS		; SCD Stamps
(1)   85/FFFFFFFFFFFFCC00 :                     RAM_MdMcd_StampSett	ds.b mdstmp_len			; SCD Stamp dot-screen control
(1)   88/FFFFFFFFFFFFCC1E :                     RAM_MdMars_IndxPalFd	ds.w 1				; ''
(1)   89/FFFFFFFFFFFFCC20 :                     RAM_MdMars_PalFd	ds.w 256			; Target 32X palette for FadeIn/Out
(1)   90/FFFFFFFFFFFFCE20 :                     RAM_MdMars_MPalFdList	ds.b palfd_len*MAX_PALFDREQ	; '' same but for 32X
(1)   91/FFFFFFFFFFFFCE60 :                     RAM_MdMars_CommBuff	ds.b Dreq_len			; 32X DREQ-RAM size
(1)   93/FFFFFFFFFFFFD880 :                     sizeof_mdmisc		ds.l 0
(1)   94/FFFFFFFFFFFFD884 :                     ; ----------------------------------------
(1)   96/FFFFFFFFFFFFD884 : (MACRO)              			endmemory
(1)   96/    1084 :                     .here:          dephase
(1)   96/    1084 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   96/       0 :                                     phase GLBL_LASTPC
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFE874 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFE874 : =$FFFFFFFFFFFFE874   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFE874 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFE874 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFE874 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFE874 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFE874 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFE874 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFE874 :                     
(1)    6/FFFFFFFFFFFFE874 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFE878 :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFE87C :                     
      80/FFFFFFFFFFFFE87C :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFE87C :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFE880 : (MACRO)              		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFE880 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     117/       0 :                     		include	"system/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "			; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)   10/      10 : 4E49 4B4F 4E41      		dc.b HTAG_DISCID_M,0			; Volume Name
               16 : 4344 3332 5800    
(1)   14/      1C : 0102                		dc.w HTAG_CDVER				; Volume Version
(1)   15/      1E : 0001                		dc.w $0001				; Volume Type
(1)   16/      20 : 4E49 4B4F 4E41      		dc.b HTAG_SYSNAME,0			; System Name
               26 : 2D53 444B 2000    
(1)   17/      2C : 0000                		dc.w 0					; System Version, Type
(1)   18/      2E : 0000                		dc.w 0
(1)   19/      30 : 0000 0356           		dc.l IP_Start
(1)   20/      34 : 0000 038E           		dc.l IP_End
(1)   21/      38 : 0000 0000           		dc.l 0
(1)   22/      3C : 0000 0000           		dc.l 0
(1)   23/      40 : 0000 0800           		dc.l SP_Start
(1)   24/      44 : 0000 1A00           		dc.l SP_End
(1)   25/      48 : 0000 0000           		dc.l 0
(1)   26/      4C : 0000 0000           		dc.l 0
(1)   27/      50 :                     		align $100
(1)   28/     100 : 5345 4741 2047      		dc.b HTAG_SYS_MCD;"SEGA GENESIS    "			; Stays same as Genesis
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   29/     110 : 2843 2955 5345      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 5220 3230 3234 
              11C : 2E3F 3F3F          
(1)   31/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_MARSCD;"Nikona CD32X                                    "
              126 : 2043 4433 3258 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   32/     150 : 4E69 6B6F 6E61                      dc.b HTAG_NOV_MARSCD;"Nikona CD32X                                    "
              156 : 2043 4433 3258 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   37/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032             
(1)   38/     18E : 4A36 4D20 2020      		dc.b "J6M             "
              194 : 2020 2020 2020 
              19A : 2020 2020          
(1)   39/     19E :                     		align $1F0
(1)   40/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   41/     200 :                     
(1)   43/     200 :                     		binclude "system/mcd/region/jap.bin"
(1)   49/     356 :                     
(1)   50/     356 :                     ; ====================================================================
(1)   51/     356 :                     ; ----------------------------------------------------------------
(1)   52/     356 :                     ; IP
(1)   53/     356 :                     ; ----------------------------------------------------------------
(1)   54/     356 :                     
(1)   55/     356 :                     IP_Start:
(1)   56/     356 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              35C : 1100             
(1)   57/     35E : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              364 : 1200             
(1)   58/     366 :                     .wait:
(1)   59/     366 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              36C : 1100             
(1)   60/     36E : 66F6                		bne.s	.wait
(1)   61/     370 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)   62/     376 : 302E 0004           .wait_vint:	move.w	4(a6),d0
(1)   63/     37A : 0800 0003           		btst	#3,d0
(1)   64/     37E : 67F6                		beq.s	.wait_vint
(1)   65/     380 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              386 : 2006             
(1)   66/     388 : 4EF9 00FF 2E00      		jmp	($FF0600+MCD_Main).l
(1)   67/     38E :                     IP_End:
(1)   68/     38E :                     		align 2
(1)   69/     38E :                     
(1)   70/     38E :                     ; ====================================================================
(1)   71/     38E :                     ; ----------------------------------------------------------------
(1)   72/     38E :                     ; SP
(1)   73/     38E :                     ; ----------------------------------------------------------------
(1)   74/     38E :                     
(1)   75/     38E :                     		align $800
(1)   76/     800 :                     SP_Start:
(1)   77/     800 :                     		include "system/mcd/subcpu.asm"
(2)    1/     800 :                     ; ===========================================================================
(2)    2/     800 :                     ; -------------------------------------------------------------------
(2)    3/     800 :                     ; SegaCD SUB-CPU
(2)    4/     800 :                     ;
(2)    5/     800 :                     ; Loaded on BOOT
(2)    6/     800 :                     ; -------------------------------------------------------------------
(2)    7/     800 :                     
(2)    8/     800 : =$100                SET_STAMPPOV		equ 256
(2)    9/     800 :                     ; MAX_MCDSTAMPS		equ 64		; see shared.asm
(2)   10/     800 :                     
(2)   11/     800 :                     ; Dot output size: (WIDTH/8)*(HEIGHT/8)*$20
(2)   12/     800 :                     ; Map slots: $4000 bytes
(2)   13/     800 :                     ; Trace data: $2000 ($800 bytes * 4)
(2)   14/     800 :                     ; Stamp list: ($20*MAX_MCDSTAMPS)
(2)   15/     800 :                     ; Dot-screen: $9600 320x240 max
(2)   16/     800 :                     
(2)   17/     800 : =$20000              WRAM_DotOutput_0	equ $20000
(2)   18/     800 : =$28000              WRAM_DotOutput_1	equ $28000
(2)   19/     800 : =$30000              WRAM_MdMapTable		equ $30000
(2)   20/     800 : =$3A000              WRAM_MdStampList	equ $3A000
(2)   21/     800 : =$3B000              WRAM_TraceBuff		equ $3B000	; Size $780*2 ($F00)
(2)   22/     800 : =$3BFFC              WRAM_StampsDone		equ $3BFFC
(2)   23/     800 : =$3BFFE              WRAM_StampCurrFlip	equ $3BFFE
(2)   24/     800 : =$3C000              WRAM_SaveDataCopy	equ $3C000	; ** DONT Overwrite THIS **
(2)   25/     800 :                     
(2)   26/     800 :                     ; ====================================================================
(2)   27/     800 :                     ; ----------------------------------------------------------------
(2)   28/     800 :                     ; Variables
(2)   29/     800 :                     ; ----------------------------------------------------------------
(2)   30/     800 :                     
(2)   31/     800 : =$80000              SCPU_wram	equ $00080000
(2)   32/     800 : =$FFFE8000           SCPU_bram	equ $FFFE8000
(2)   33/     800 : =$FFFF0000           SCPU_pcm	equ $FFFF0000
(2)   34/     800 :                     ; SCPU_pcmwave	equ $FFFF2001
(2)   35/     800 : =$FFFF8000           SCPU_reg	equ $FFFF8000
(2)   36/     800 :                     
(2)   37/     800 : =$0                  PCM		equ $00
(2)   38/     800 : =$1                  ENV		equ $01		; Envelope (Volume)
(2)   39/     800 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   40/     800 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   41/     800 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   42/     800 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   43/     800 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   44/     800 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   45/     800 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   46/     800 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   47/     800 :                     
(2)   48/     800 :                     ; ====================================================================
(2)   49/     800 :                     ; ----------------------------------------------------------------
(2)   50/     800 :                     ; Structs
(2)   51/     800 :                     ; ----------------------------------------------------------------
(2)   52/     800 :                     
(2)   53/     800 :                     ; cdpcm_status:
(2)   54/     800 :                     ; %EF-- ---l
(2)   55/     800 :                     ; E-Enabled
(2)   56/     800 :                     ; F-Channel is "floating"
(2)   57/     800 :                     ; l-loop enabled
(2)   58/     800 :                     
(2)   59/       0 :                     cdpcm		struct
(2)   60/       0 :                     status		ds.b 1		; %EFSU ----l
(2)   61/       1 :                     flags		ds.b 1
(2)   62/       2 :                     strmf		ds.b 1
(2)   63/       3 :                     strmhalf	ds.b 1		; Halfway MSB $00/$04/$08/$0C
(2)   64/       4 :                     start		ds.l 1
(2)   65/       8 :                     slast		ds.l 1
(2)   66/       C :                     length		ds.l 1
(2)   67/      10 :                     loop		ds.l 1
(2)   68/      14 :                     clen		ds.l 1
(2)   69/      18 :                     cread		ds.l 1
(2)   70/      1C :                     pitch		ds.w 1
(2)   71/      1E :                     cblock		ds.w 1
(2)   72/      20 :                     pan		ds.b 1
(2)   73/      21 :                     env		ds.b 1
(2)   74/      22 :                     ; len		ds.l 0
(2)   75/     800 : =$22                 		endstruct
(2)   76/     800 :                     
(2)   77/       0 :                     stmpc		struct
(2)   78/       0 :                     XC		ds.w 1
(2)   79/       2 :                     YC		ds.w 1
(2)   80/       4 :                     X		ds.l 1
(2)   81/       8 :                     Y		ds.l 1
(2)   82/       C :                     DX		ds.l 1
(2)   83/      10 :                     DY		ds.l 1
(2)   84/      14 :                     TX		ds.l 1
(2)   85/      18 :                     TY		ds.l 1
(2)   86/      1C :                     xmul		ds.w 1
(2)   87/      1E :                     zmul		ds.w 1
(2)   88/      20 :                     zmul_sin	ds.w 1
(2)   89/      22 :                     zmul_cos	ds.w 1
(2)   90/      24 :                     rot_sin		ds.w 1
(2)   91/      26 :                     rot_cos		ds.w 1
(2)   92/      28 :                     ; len		ds.l 0
(2)   93/     800 : =$28                 		endstruct
(2)   94/     800 :                     
(2)   95/       0 :                     stmpi		struct
(2)   96/       0 :                     map		ds.w 1
(2)   97/       2 :                     x		ds.w 1
(2)   98/       4 :                     y		ds.w 1
(2)   99/       6 :                     xr		ds.w 1
(2)  100/       8 :                     yd		ds.w 1
(2)  101/       A :                     flags		ds.w 1
(2)  102/       C :                     ; len		ds.l 0
(2)  103/     800 : =$C                  		endstruct
(2)  104/     800 :                     
(2)  105/     800 :                     ; ====================================================================
(2)  106/     800 :                     ; ----------------------------------------------------------------
(2)  107/     800 :                     ; Includes
(2)  108/     800 :                     ; ----------------------------------------------------------------
(2)  109/     800 :                     
(2)  110/     800 :                     		include "system/mcd/cdbios.asm"
(3)    1/     800 :                     ; ===========================================================================
(3)    2/     800 :                     ; -------------------------------------------------------------------
(3)    3/     800 :                     ; CD BIOS VARIABLES
(3)    4/     800 :                     ; -------------------------------------------------------------------
(3)    5/     800 :                     
(3)    6/     800 : =$2                  MSCSTOP           equ	$0002
(3)    7/     800 : =$3                  MSCPAUSEON        equ	$0003
(3)    8/     800 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    9/     800 : =$5                  MSCSCANFF         equ	$0005
(3)   10/     800 : =$6                  MSCSCANFR         equ	$0006
(3)   11/     800 : =$7                  MSCSCANOFF        equ	$0007
(3)   12/     800 : =$8                  ROMPAUSEON        equ	$0008
(3)   13/     800 : =$9                  ROMPAUSEOFF       equ	$0009
(3)   14/     800 : =$A                  DRVOPEN           equ	$000A
(3)   15/     800 :                     
(3)   16/     800 : =$10                 DRVINIT           equ	$0010
(3)   17/     800 : =$11                 MSCPLAY           equ	$0011
(3)   18/     800 : =$12                 MSCPLAY1          equ	$0012
(3)   19/     800 : =$13                 MSCPLAYR          equ	$0013
(3)   20/     800 : =$14                 MSCPLAYT          equ	$0014
(3)   21/     800 : =$15                 MSCSEEK           equ	$0015
(3)   22/     800 : =$16                 MSCSEEKT          equ	$0016
(3)   23/     800 : =$17                 ROMREAD           equ	$0017
(3)   24/     800 : =$18                 ROMSEEK           equ	$0018
(3)   25/     800 : =$19                 MSCSEEK1          equ	$0019
(3)   26/     800 :                     
(3)   27/     800 : =$1E                 TESTENTRY         equ	$001E
(3)   28/     800 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   29/     800 : =$20                 ROMREADN          equ	$0020
(3)   30/     800 : =$21                 ROMREADE          equ	$0021
(3)   31/     800 :                     
(3)   32/     800 : =$80                 CDBCHK            equ	$0080
(3)   33/     800 : =$81                 CDBSTAT           equ	$0081
(3)   34/     800 : =$82                 CDBTOCWRITE       equ	$0082
(3)   35/     800 : =$83                 CDBTOCREAD        equ	$0083
(3)   36/     800 : =$84                 CDBPAUSE          equ	$0084
(3)   37/     800 : =$85                 FDRSET            equ	$0085
(3)   38/     800 : =$86                 FDRCHG            equ	$0086
(3)   39/     800 : =$87                 CDCSTART          equ	$0087
(3)   40/     800 : =$88                 CDCSTARTP         equ	$0088
(3)   41/     800 : =$89                 CDCSTOP           equ	$0089
(3)   42/     800 : =$8A                 CDCSTAT           equ	$008A
(3)   43/     800 : =$8B                 CDCREAD           equ	$008B
(3)   44/     800 : =$8C                 CDCTRN            equ	$008C
(3)   45/     800 : =$8D                 CDCACK            equ	$008D
(3)   46/     800 : =$8E                 SCDINIT           equ	$008E
(3)   47/     800 : =$8F                 SCDSTART          equ	$008F
(3)   48/     800 : =$90                 SCDSTOP           equ	$0090
(3)   49/     800 : =$91                 SCDSTAT           equ	$0091
(3)   50/     800 : =$92                 SCDREAD           equ	$0092
(3)   51/     800 : =$93                 SCDPQ             equ	$0093
(3)   52/     800 : =$94                 SCDPQL            equ	$0094
(3)   53/     800 : =$95                 LEDSET            equ	$0095
(3)   54/     800 : =$96                 CDCSETMODE        equ	$0096
(3)   55/     800 : =$97                 WONDERREQ         equ	$0097
(3)   56/     800 : =$98                 WONDERCHK         equ	$0098
(3)   57/     800 :                     
(3)   58/     800 : =$0                  CBTINIT           equ	$0000
(3)   59/     800 : =$1                  CBTINT            equ	$0001
(3)   60/     800 : =$2                  CBTOPENDISC       equ	$0002
(3)   61/     800 : =$3                  CBTOPENSTAT       equ	$0003
(3)   62/     800 : =$4                  CBTCHKDISC        equ	$0004
(3)   63/     800 : =$5                  CBTCHKSTAT        equ	$0005
(3)   64/     800 : =$6                  CBTIPDISC         equ	$0006
(3)   65/     800 : =$7                  CBTIPSTAT         equ	$0007
(3)   66/     800 : =$8                  CBTSPDISC         equ	$0008
(3)   67/     800 : =$9                  CBTSPSTAT         equ	$0009
(3)   68/     800 :                     
(3)   69/     800 : =$0                  BRMINIT           equ	$0000
(3)   70/     800 : =$1                  BRMSTAT           equ	$0001
(3)   71/     800 : =$2                  BRMSERCH          equ	$0002
(3)   72/     800 : =$3                  BRMREAD           equ	$0003
(3)   73/     800 : =$4                  BRMWRITE          equ	$0004
(3)   74/     800 : =$5                  BRMDEL            equ	$0005
(3)   75/     800 : =$6                  BRMFORMAT         equ	$0006
(3)   76/     800 : =$7                  BRMDIR            equ	$0007
(3)   77/     800 : =$8                  BRMVERIFY         equ	$0008
(3)   78/     800 :                     
(3)   79/     800 :                     ;-----------------------------------------------------------------------
(3)   80/     800 :                     ; BIOS ENTRY POINTS
(3)   81/     800 :                     ;-----------------------------------------------------------------------
(3)   82/     800 :                     
(3)   83/     800 : =$5F40               _ADRERR           equ	$00005F40
(3)   84/     800 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   85/     800 : =$5F16               _BURAM            equ	$00005F16
(3)   86/     800 : =$5F22               _CDBIOS           equ	$00005F22
(3)   87/     800 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   88/     800 : =$5E80               _CDSTAT           equ	$00005E80
(3)   89/     800 : =$5F52               _CHKERR           equ	$00005F52
(3)   90/     800 : =$5F46               _CODERR           equ	$00005F46
(3)   91/     800 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   92/     800 : =$5F76               _LEVEL1           equ	$00005F76
(3)   93/     800 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   94/     800 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   95/     800 : =$5F88               _LEVEL4           equ	$00005F88
(3)   96/     800 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   97/     800 : =$5F94               _LEVEL6           equ	$00005F94
(3)   98/     800 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   99/     800 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)  100/     800 : =$5F70               _NOCOD1           equ	$00005F70
(3)  101/     800 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)  102/     800 : =$5F5E               _SPVERR           equ	$00005F5E
(3)  103/     800 : =$5F64               _TRACE            equ	$00005F64
(3)  104/     800 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  105/     800 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  106/     800 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  107/     800 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  108/     800 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  109/     800 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  110/     800 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  111/     800 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  112/     800 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  113/     800 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  114/     800 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  115/     800 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  116/     800 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  117/     800 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  118/     800 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  119/     800 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  120/     800 : =$5F58               _TRPERR           equ	$00005F58
(3)  121/     800 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  122/     800 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  123/     800 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  124/     800 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  125/     800 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  126/     800 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  127/     800 :                     
(2)  111/     800 :                     
(2)  112/     800 :                     ; ====================================================================
(2)  113/     800 :                     ; ----------------------------------------------------------------
(2)  114/     800 :                     ; MAIN CODE
(2)  115/     800 :                     ; ----------------------------------------------------------------
(2)  116/     800 :                     
(2)  117/    6000 :                     		phase $6000
(2)  118/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)  119/    600C : 0100 0000           		dc.w $0100,0
(2)  120/    6010 : 0000 0000           		dc.l 0
(2)  121/    6014 : 0000 0000           		dc.l 0
(2)  122/    6018 : 0000 0020           		dc.l $20
(2)  123/    601C : 0000 0000           		dc.l 0
(2)  124/    6020 :                     .table:
(2)  125/    6020 : 000A                		dc.w SCPU_Init-.table
(2)  126/    6022 : 0092                		dc.w SCPU_Main-.table
(2)  127/    6024 : 0074                		dc.w SCPU_IRQ-.table
(2)  128/    6026 : 0090                		dc.w SCPU_User-.table
(2)  129/    6028 : 0000                		dc.w 0
(2)  130/    602A :                     
(2)  131/    602A :                     ; ====================================================================
(2)  132/    602A :                     ; ----------------------------------------------------------------
(2)  133/    602A :                     ; Init
(2)  134/    602A :                     ; ----------------------------------------------------------------
(2)  135/    602A :                     
(2)  136/    602A :                     SCPU_Init:
(2)  137/    602A : 41FA 0052           		lea	.drv_init(pc),a0
(2)  138/    602E : 303C 0010           		move.w	#DRVINIT,d0
(2)  139/    6032 : 4EB8 5F22           		jsr	_CDBIOS
(2)  140/    6036 :                     ; 		bclr	#3,(SCPU_reg+$33).w		; Disable Timer interrupt
(2)  141/    6036 : 11FC 00FF 8031      		move.b	#$FF,(SCPU_reg+$31).w		; Set timer value
(2)  142/    603C : 23FC 0000 60AE      		move.l	#SCPU_Timer,(_LEVEL3+2).l	; Write LEVEL 3 jump
             6042 : 0000 5F84          
(2)  143/    6046 : 23FC 0000 608E      		move.l	#SCPU_Stamp,(_LEVEL1+2).l	; Write LEVEL 1 jump
             604C : 0000 5F78          
(2)  144/    6050 : 6100 0330           		bsr	spCdda_ResetVolume		; Reset CDDA Volume
(2)  145/    6054 : 6100 0B9C           		bsr	CdSub_PCM_Init			; Init PCM
(2)  146/    6058 : 13FC 0000 FFFF      		move.b	#0,(SCPU_reg+mcd_memory).l	; Reset Memory mode
             605E : 8003             
(2)  147/    6060 : 6100 042E           		bsr	spInitFS			; Init ISO Filesystem
(2)  148/    6064 : 41FA 001A           		lea	file_subdata(pc),a0		; Search and load the PCM samples
(2)  149/    6068 : 6100 0462           		bsr	spSearchFile
(2)  150/    606C : 41F9 0002 0000      		lea	(SCPU_DATA),a0
(2)  151/    6072 : 6100 0394           		bsr	spReadSectorsN
(2)  152/    6076 : 11FC 0000 800F      		move.b	#0,(SCPU_reg+mcd_comm_s).w	; Report we are free.
(2)  153/    607C :                     ; 		bset	#3,(SCPU_reg+$33).w		; Enable Timer interrupt
(2)  154/    607C : 4E75                		rts
(2)  155/    607E :                     
(2)  156/    607E :                     ; --------------------------------------------------------
(2)  157/    607E :                     
(2)  158/    607E :                     .drv_init:
(2)  159/    607E : 01FF                		dc.b $01,$FF
(2)  160/    6080 :                     		align 2
(2)  161/    6080 :                     file_subdata:
(2)  162/    6080 : 4E4B 4E41 5F53      		dc.b "NKNA_SUB.BIN",0
             6086 : 5542 2E42 494E 00 
(2)  163/    608D :                     		align 2
(2)  164/    608E :                     
(2)  165/    608E :                     ; =====================================================================
(2)  166/    608E :                     ; ----------------------------------------------------------------
(2)  167/    608E :                     ; Level 1 IRQ
(2)  168/    608E :                     ; ----------------------------------------------------------------
(2)  169/    608E :                     
(2)  170/    608E :                     SCPU_Stamp:
(2)  171/    608E : 4278 7208           		clr.w	(RAM_CdSub_StampBusy).w
(2)  172/    6092 : 4E73                		rte
(2)  173/    6094 :                     
(2)  174/    6094 :                     ; =====================================================================
(2)  175/    6094 :                     ; ----------------------------------------------------------------
(2)  176/    6094 :                     ; Level 2 IRQ
(2)  177/    6094 :                     ;
(2)  178/    6094 :                     ; WARNING: The SEGA screen before starting calls this on
(2)  179/    6094 :                     ; every frame.
(2)  180/    6094 :                     ; ----------------------------------------------------------------
(2)  181/    6094 :                     
(2)  182/    6094 :                     SCPU_IRQ:
(2)  183/    6094 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Read MAIN comm
(2)  184/    6098 : 0240 00C0           		andi.w	#$C0,d0
(2)  185/    609C : 0C40 00C0           		cmpi.w	#$C0,d0
(2)  186/    60A0 : 6606                		bne	.not_sound
(2)  187/    60A2 : 50F8 7219           		st.b	(RAM_CdSub_PcmReqUpd).w
(2)  188/    60A6 : 4E75                		rts
(2)  189/    60A8 :                     .not_sound:
(2)  190/    60A8 :                     ; 		cmpi.w	#$80,d0
(2)  191/    60A8 :                     ; 		bne.s	.not_req
(2)  192/    60A8 : 50F8 721A           		st.b	(RAM_CdSub_StampReqUpd).w
(2)  193/    60AC :                     ; .not_req:
(2)  194/    60AC : 4E75                		rts
(2)  195/    60AE :                     
(2)  196/    60AE :                     ; =====================================================================
(2)  197/    60AE :                     ; ----------------------------------------------------------------
(2)  198/    60AE :                     ; Level 3 IRQ
(2)  199/    60AE :                     ; ----------------------------------------------------------------
(2)  200/    60AE :                     
(2)  201/    60AE :                     SCPU_Timer:
(2)  202/    60AE :                     ; 		bclr	#3,(SCPU_reg+$33).w
(2)  203/    60AE :                     ; 		movem.l	d0-a6,-(sp)
(2)  204/    60AE :                     ; 		bsr	CdSub_PCM_ProcessIRQ
(2)  205/    60AE :                     ; 		movem.l	(sp)+,d0-a6
(2)  206/    60AE :                     ; 		bset	#3,(SCPU_reg+$33).w
(2)  207/    60AE : 4E73                		rte			; rte
(2)  208/    60B0 :                     
(2)  209/    60B0 :                     ; =====================================================================
(2)  210/    60B0 :                     ; ----------------------------------------------------------------
(2)  211/    60B0 :                     ; User interrupt
(2)  212/    60B0 :                     ; ----------------------------------------------------------------
(2)  213/    60B0 :                     
(2)  214/    60B0 :                     SCPU_User:
(2)  215/    60B0 : 4E75                		rts
(2)  216/    60B2 :                     
(2)  217/    60B2 :                     ; ====================================================================
(2)  218/    60B2 :                     ; ----------------------------------------------------------------
(2)  219/    60B2 :                     ; Main
(2)  220/    60B2 :                     ;
(2)  221/    60B2 :                     ; mcd_comm_m READ ONLY:
(2)  222/    60B2 :                     ; %Bbsiiiii
(2)  223/    60B2 :                     ; B - Busy/Lock bit
(2)  224/    60B2 :                     ; b - Status bit / during IRQ if B=1
(2)  225/    60B2 :                     ;
(2)  226/    60B2 :                     ;
(2)  227/    60B2 :                     ; mcd_comm_s READ/WRITE:
(2)  228/    60B2 :                     ; %Bbssfeee
(2)  229/    60B2 :                     ; B - Busy doing a normal (b=0) or IRQ (b=1)
(2)  230/    60B2 :                     ; b - IRQ flag
(2)  231/    60B2 :                     ; s - Status output bits
(2)  232/    60B2 :                     ; f - Stamp finished drawing
(2)  233/    60B2 :                     ; e - Error flags
(2)  234/    60B2 :                     ;
(2)  235/    60B2 :                     ; Uses:
(2)  236/    60B2 :                     ; ALL
(2)  237/    60B2 :                     ; ----------------------------------------------------------------
(2)  238/    60B2 :                     
(2)  239/    60B2 :                     SCPU_Main:
(2)  240/    60B2 : 6100 046C           		bsr	CdSub_StampRender
(2)  241/    60B6 : 6100 0CCC           		bsr	CdSub_PCM_Process
(2)  242/    60BA : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0	; Read MAIN comm
(2)  243/    60BE : 1200                		move.b	d0,d1
(2)  244/    60C0 : 0241 00C0           		andi.w	#$C0,d1
(2)  245/    60C4 : 0C01 00C0           		cmpi.b	#$C0,d1				; Middle of IRQ task?
(2)  246/    60C8 : 67E8                		beq.s	SCPU_Main
(2)  247/    60CA : 0240 001F           		andi.w	#%00011111,d0			; <-- current limit
(2)  248/    60CE : 67E2                		beq.s	SCPU_Main
(2)  249/    60D0 :                     
(2)  250/    60D0 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  251/    60D4 : 08C7 0007           		bset	#7,d7
(2)  252/    60D8 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w	; Return to MAIN as BUSY/working
(2)  253/    60DC : D040                		add.w	d0,d0				; Task index*2
(2)  254/    60DE : 323B 0014           		move.w	SCPU_cmdlist(pc,d0.w),d1
(2)  255/    60E2 : 4EBB 1010           		jsr	SCPU_cmdlist(pc,d1.w)
(2)  256/    60E6 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  257/    60EA : 0887 0007           		bclr	#7,d7
(2)  258/    60EE : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w	; Report that we finished.
(2)  259/    60F2 : 60BE                		bra	SCPU_Main
(2)  260/    60F4 :                     
(2)  261/    60F4 :                     ; =====================================================================
(2)  262/    60F4 :                     ; ----------------------------------------------------------------
(2)  263/    60F4 :                     ; Commands list
(2)  264/    60F4 :                     ; ----------------------------------------------------------------
(2)  265/    60F4 :                     
(2)  266/    60F4 :                     ; Struct
(2)  267/    60F4 :                     ; $01-$07: Common data tasks
(2)  268/    60F4 :                     ; $08-$0F: BRAM tasks
(2)  269/    60F4 :                     ; $10-$17: CDDA Playback control
(2)  270/    60F4 :                     ; $18-$1F: Stamps
(2)  271/    60F4 :                     
(2)  272/    60F4 :                     SCPU_cmdlist:
(2)  273/    60F4 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $00 | **INVALID**
(2)  274/    60F6 : 0042                		dc.w SubTask_cmnd01-SCPU_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  275/    60F8 : 00B4                		dc.w SubTask_cmnd02-SCPU_cmdlist	; $02 | Read file from disc, outputs to WORD-RAM
(2)  276/    60FA : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $03
(2)  277/    60FC : 00F4                		dc.w SubTask_cmnd04-SCPU_cmdlist	; $04
(2)  278/    60FE : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $05
(2)  279/    6100 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $06
(2)  280/    6102 : 0164                		dc.w SubTask_cmnd07-SCPU_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  281/    6104 :                     
(2)  282/    6104 : 0170                		dc.w SubTask_cmnd08-SCPU_cmdlist	; $08 | BRAM support Initialize (MUST CALL FIRST)
(2)  283/    6106 : 01D2                		dc.w SubTask_cmnd09-SCPU_cmdlist	; $09 | BRAM Read data
(2)  284/    6108 : 01FC                		dc.w SubTask_cmnd0A-SCPU_cmdlist	; $0A | BRAM Save data
(2)  285/    610A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0B
(2)  286/    610C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0C
(2)  287/    610E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0D
(2)  288/    6110 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0E
(2)  289/    6112 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0F
(2)  290/    6114 :                     
(2)  291/    6114 : 024A                		dc.w SubTask_cmnd10-SCPU_cmdlist	; $10 | Play CDDA once
(2)  292/    6116 : 0260                		dc.w SubTask_cmnd11-SCPU_cmdlist	; $11 | Play CDDA and loop
(2)  293/    6118 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $12 |
(2)  294/    611A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $13 |
(2)  295/    611C : 0276                		dc.w SubTask_cmnd14-SCPU_cmdlist	; $14 | Stop CDDA
(2)  296/    611E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $15 |
(2)  297/    6120 : 0280                		dc.w SubTask_cmnd16-SCPU_cmdlist	; $16 | CDDA fade-out
(2)  298/    6122 : 028E                		dc.w SubTask_cmnd17-SCPU_cmdlist	; $17 | CDDA Reset volumes
(2)  299/    6124 :                     
(2)  300/    6124 : 02B0                		dc.w SubTask_cmnd18-SCPU_cmdlist	; $18 | Enable Stamps
(2)  301/    6126 : 02E4                		dc.w SubTask_cmnd19-SCPU_cmdlist	; $19 | Disable Stamps
(2)  302/    6128 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1A |
(2)  303/    612A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1B |
(2)  304/    612C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1C |
(2)  305/    612E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1D |
(2)  306/    6130 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1E |
(2)  307/    6132 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1F |
(2)  308/    6134 :                     
(2)  309/    6134 :                     ; =====================================================================
(2)  310/    6134 :                     ; ----------------------------------------------------------------
(2)  311/    6134 :                     ; Commands $01-$0F
(2)  312/    6134 :                     ;
(2)  313/    6134 :                     ; General purpose data transfering
(2)  314/    6134 :                     ; ----------------------------------------------------------------
(2)  315/    6134 :                     
(2)  316/    6134 :                     ; --------------------------------------------------------
(2)  317/    6134 :                     ; NULL COMMAND
(2)  318/    6134 :                     ; --------------------------------------------------------
(2)  319/    6134 :                     
(2)  320/    6134 :                     SubTask_cmnd00:
(2)  321/    6134 : 4E75                		rts
(2)  322/    6136 :                     
(2)  323/    6136 :                     ; --------------------------------------------------------
(2)  324/    6136 :                     ; Command $01
(2)  325/    6136 :                     ;
(2)  326/    6136 :                     ; Read data from disc and transfer the output data
(2)  327/    6136 :                     ; through mcd_dcomm_s as packets of $10 bytes.
(2)  328/    6136 :                     ;
(2)  329/    6136 :                     ; Input:
(2)  330/    6136 :                     ; mcd_comm_m  | %lp------
(2)  331/    6136 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  332/    6136 :                     ;               p - PASS bit
(2)  333/    6136 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  334/    6136 :                     ;               Filename string 8.3 zero terminated
(2)  335/    6136 :                     ;
(2)  336/    6136 :                     ; Returns:
(2)  337/    6136 :                     ; mcd_comm_s  | %--ep----
(2)  338/    6136 :                     ;               p - SUB-CPU reports that data passed
(2)  339/    6136 :                     ;               e - Flag: 0 - Found file
(2)  340/    6136 :                     ;                         1 - File NOT found
(2)  341/    6136 :                     ; mcd_dcomm_s | $00-$10
(2)  342/    6136 :                     ;               Current data packet.
(2)  343/    6136 :                     ; --------------------------------------------------------
(2)  344/    6136 :                     
(2)  345/    6136 :                     SubTask_cmnd01:
(2)  346/    6136 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - Filename
(2)  347/    613A : 6100 0390           		bsr	spSearchFile
(2)  348/    613E : 6500 01F6           		bcs	SubTask_RetErr_NoFile
(2)  349/    6142 : 4A81                		tst.l	d1
(2)  350/    6144 : 6700 01F0           		beq	SubTask_RetErr_NoFile
(2)  351/    6148 : 41F9 0000 C2FC      		lea	(ISO_Output).l,a0		; Temporal OUTPUT location
(2)  352/    614E : 2F08                		move.l	a0,-(sp)
(2)  353/    6150 : 6100 02B6           		bsr	spReadSectorsN
(2)  354/    6154 : 205F                		move.l	(sp)+,a0			; a0 - Read temporal location
(2)  355/    6156 : 45F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a2	; a1 - Output data packets
(2)  356/    615A :                     .next_packet:
(2)  357/    615A : 224A                		move.l	a2,a1
(2)  358/    615C :                     	rept $10/2
(2)  359/    615C :                     		move.w	(a0)+,(a1)+			; WORD writes
(2)  360/    615C :                     	endm
(2)  359/    615C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    615E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6160 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6162 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6164 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6166 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6168 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    616A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  361/    616C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Sub PASS the data.
(2)  362/    6170 : 08C7 0004           		bset	#4,d7
(2)  363/    6174 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  364/    6178 : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Read MAIN comm
(2)  365/    617C : 0807 0007           		btst	#7,d7				; Locked?
(2)  366/    6180 : 671E                		beq.s	.exit_now
(2)  367/    6182 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  368/    6186 : 67F0                		beq.s	.wait_main
(2)  369/    6188 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Clear Sub PASS bit.
(2)  370/    618C : 0887 0004           		bclr	#4,d7
(2)  371/    6190 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  372/    6194 : 1E38 800E           .wait_main_o:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN response
(2)  373/    6198 : 0807 0006           		btst	#6,d7
(2)  374/    619C : 66F6                		bne.s	.wait_main_o
(2)  375/    619E : 60BA                		bra.s	.next_packet
(2)  376/    61A0 :                     ; Finished:
(2)  377/    61A0 :                     .exit_now:
(2)  378/    61A0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  379/    61A6 : 4E75                		rts
(2)  380/    61A8 :                     
(2)  381/    61A8 :                     ; --------------------------------------------------------
(2)  382/    61A8 :                     ; Command $02
(2)  383/    61A8 :                     ;
(2)  384/    61A8 :                     ; Read data from disc directly to WORD-RAM,
(2)  385/    61A8 :                     ; REQUIRES THE DMNA BIT TO BE SET BY MAIN-CPU
(2)  386/    61A8 :                     ;
(2)  387/    61A8 :                     ; Input:
(2)  388/    61A8 :                     ; mcd_dcomm_m | $00-$0C - "FILENAME.BIN",0
(2)  389/    61A8 :                     ;             |           Filename string 8.3 incl. zero
(2)  390/    61A8 :                     ;             |
(2)  391/    61A8 :                     ;             | $0D - Destination increment * $800
(2)  392/    61A8 :                     ;             | $0E -
(2)  393/    61A8 :                     ;             | $0F -
(2)  394/    61A8 :                     ;
(2)  395/    61A8 :                     ; Note:
(2)  396/    61A8 :                     ; DO NOT CALL THIS IF STAMPS ARE IN THE MIDDLE
(2)  397/    61A8 :                     ; OF RENDERING
(2)  398/    61A8 :                     ; --------------------------------------------------------
(2)  399/    61A8 :                     
(2)  400/    61A8 :                     SubTask_cmnd02:
(2)  401/    61A8 : 1E39 FFFF 8003      		move.b	(SCPU_reg+mcd_memory).l,d7	; Wait until MAIN sets Word-RAM to SUB. (DMNA)
(2)  402/    61AE : 0807 0001           		btst	#1,d7
(2)  403/    61B2 : 67F4                		beq.s	SubTask_cmnd02
(2)  404/    61B4 :                     
(2)  405/    61B4 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  406/    61B8 : 6100 0312           		bsr	spSearchFile
(2)  407/    61BC : 6500 0178           		bcs	SubTask_RetErr_NoFile
(2)  408/    61C0 : 4A81                		tst.l	d1
(2)  409/    61C2 : 6700 0172           		beq	SubTask_RetErr_NoFile
(2)  410/    61C6 : 41F9 0008 0000      		lea	(SCPU_wram),a0
(2)  411/    61CC : 7E00                		moveq	#0,d7
(2)  412/    61CE : 1E38 801D           		move.b	(SCPU_reg+mcd_dcomm_m+$0D).w,d7
(2)  413/    61D2 : E14F                		lsl.w	#8,d7
(2)  414/    61D4 : E74F                		lsl.w	#3,d7
(2)  415/    61D6 : D1C7                		add.l	d7,a0
(2)  416/    61D8 : 6100 022E           		bsr	spReadSectorsN
(2)  417/    61DC : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN (RET=1)
             61E2 : 8003             
(2)  418/    61E4 : 67F6                		beq.s	.wait_ret
(2)  419/    61E6 : 4E75                		rts
(2)  420/    61E8 :                     
(2)  421/    61E8 :                     ; --------------------------------------------------------
(2)  422/    61E8 :                     ; Command $04
(2)  423/    61E8 :                     ;
(2)  424/    61E8 :                     ; Transfer memory from MAIN-CPU to SUB-CPU in
(2)  425/    61E8 :                     ; packets of 10-bytes.
(2)  426/    61E8 :                     ;
(2)  427/    61E8 :                     ; Input:
(2)  428/    61E8 :                     ; mcd_comm_m  | %lp------
(2)  429/    61E8 :                     ;               l - LOCK bit
(2)  430/    61E8 :                     ;               p - PASS bit
(2)  431/    61E8 :                     ; mcd_dcomm_m | BEFORE mcd_comm_s returns first PASS:
(2)  432/    61E8 :                     ;               $00-$03    - Output Destination in Sub-CPU
(2)  433/    61E8 :                     ;                         area
(2)  434/    61E8 :                     ;               AFTER mcd_comm_s returns first PASS:
(2)  435/    61E8 :                     ;               $00-$08 - Data packet
(2)  436/    61E8 :                     ;
(2)  437/    61E8 :                     ; Returns:
(2)  438/    61E8 :                     ; mcd_comm_s  | %-------p
(2)  439/    61E8 :                     ;               p - SUB-CPU got the data packet
(2)  440/    61E8 :                     ; --------------------------------------------------------
(2)  441/    61E8 :                     
(2)  442/    61E8 :                     SubTask_cmnd04:
(2)  443/    61E8 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  444/    61EC : 08C7 0004           		bset	#4,d7
(2)  445/    61F0 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  446/    61F4 :                     .wait_enter:
(2)  447/    61F4 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait for MAIN
(2)  448/    61F8 : 0807 0007           		btst	#7,d7
(2)  449/    61FC : 67F6                		beq.s	.wait_enter
(2)  450/    61FE : 45F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a2
(2)  451/    6202 : 3E12                		move.w	(a2),d7				; a1 - Destination
(2)  452/    6204 : 4847                		swap	d7
(2)  453/    6206 : 3E2A 0002           		move.w	2(a2),d7
(2)  454/    620A : 2247                		move.l	d7,a1
(2)  455/    620C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  456/    6210 : 0887 0004           		bclr	#4,d7
(2)  457/    6214 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  458/    6218 :                     .next_packet:
(2)  459/    6218 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7
(2)  460/    621C : 0807 0007           		btst	#7,d7
(2)  461/    6220 : 6734                		beq.s	.exit_now
(2)  462/    6222 : 0807 0006           		btst	#6,d7
(2)  463/    6226 : 67F0                		beq.s	.next_packet
(2)  464/    6228 : 204A                		move.l	a2,a0
(2)  465/    622A :                     	rept 8/2
(2)  466/    622A :                     		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  467/    622A :                     	endm
(2)  466/    622A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    622C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    622E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    6230 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  468/    6232 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  469/    6236 : 08C7 0004           		bset	#4,d7
(2)  470/    623A : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  471/    623E : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  472/    6242 : 0807 0006           		btst	#6,d7
(2)  473/    6246 : 66F6                		bne.s	.wait_main
(2)  474/    6248 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  475/    624C : 0887 0004           		bclr	#4,d7
(2)  476/    6250 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  477/    6254 : 60C2                		bra	.next_packet
(2)  478/    6256 :                     .exit_now:
(2)  479/    6256 : 4E75                		rts
(2)  480/    6258 :                     
(2)  481/    6258 :                     ; --------------------------------------------------------
(2)  482/    6258 :                     ; Command $07
(2)  483/    6258 :                     ;
(2)  484/    6258 :                     ; Set Word-RAM permission to MAIN-CPU
(2)  485/    6258 :                     ; --------------------------------------------------------
(2)  486/    6258 :                     
(2)  487/    6258 :                     SubTask_cmnd07:
(2)  488/    6258 : 08F9 0000 FFFF      		bset	#0,(SCPU_reg+mcd_memory).l	; Set WORD-RAM to MAIN, RET=1
             625E : 8003             
(2)  489/    6260 : 67F6                		beq.s	SubTask_cmnd07
(2)  490/    6262 : 4E75                		rts
(2)  491/    6264 :                     
(2)  492/    6264 :                     ; =====================================================================
(2)  493/    6264 :                     ; ----------------------------------------------------------------
(2)  494/    6264 :                     ; Commands $08-$0F
(2)  495/    6264 :                     ;
(2)  496/    6264 :                     ; BRAM Management
(2)  497/    6264 :                     ;
(2)  498/    6264 :                     ; IF using CD32X: RV MUST BE ENABLED
(2)  499/    6264 :                     ; ----------------------------------------------------------------
(2)  500/    6264 :                     
(2)  501/    6264 :                     ; --------------------------------------------------------
(2)  502/    6264 :                     ; Command $08
(2)  503/    6264 :                     ;
(2)  504/    6264 :                     ; Init or check if SAVE file exists
(2)  505/    6264 :                     ;
(2)  506/    6264 :                     ; Input:
(2)  507/    6264 :                     ; mcd_dcomm_m | $00-$0B: dc.b "STR_SAVEDAT",0
(2)  508/    6264 :                     ;             |     $0C: Save Size / $40
(2)  509/    6264 :                     ;             |     $0E: Flags
(2)  510/    6264 :                     ;
(2)  511/    6264 :                     ; Returns:
(2)  512/    6264 :                     ; mcd_dcomm_s | $00.w:  0 | OK
(2)  513/    6264 :                     ;             |        -1 | File not found
(2)  514/    6264 :                     ;             |        -2 | Format error /
(2)  515/    6264 :                     ;             |             Not enough space
(2)  516/    6264 :                     ;             |
(2)  517/    6264 :                     ;             | $02.w: Back-up size
(2)  518/    6264 :                     ;             | $04.w: Flags
(2)  519/    6264 :                     ; --------------------------------------------------------
(2)  520/    6264 :                     
(2)  521/    6264 :                     SubTask_cmnd08:
(2)  522/    6264 : 6100 00B4           		bsr	SubTsk_BramCall
(2)  523/    6268 : 654E                		bcs	.big_fail
(2)  524/    626A : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  525/    626E : 43F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a1
(2)  526/    6274 : 7E07                		moveq	#($10/2)-1,d7
(2)  527/    6276 :                     .copy_paste:
(2)  528/    6276 : 32D8                		move.w	(a0)+,(a1)+
(2)  529/    6278 : 51CF FFFC           		dbf	d7,.copy_paste
(2)  530/    627C : 43F9 0000 79A0      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  531/    6282 : 7001                		moveq	#BRMSTAT,d0
(2)  532/    6284 : 4EB8 5F16           		jsr	_BURAM
(2)  533/    6288 : 3E38 801C           		move.w	(SCPU_reg+mcd_dcomm_m+$0C).w,d7
(2)  534/    628C : B047                		cmp.w	d7,d0				; Enough space?
(2)  535/    628E : 6D28                		blt.s	.big_fail
(2)  536/    6290 :                     
(2)  537/    6290 : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  538/    6296 : 303C 0002           		move.w	#BRMSERCH,d0			; "SERCH"
(2)  539/    629A : 4EB8 5F16           		jsr	_BURAM
(2)  540/    629E : 6500 008E           		bcs	SubTsk_ReturnFail
(2)  541/    62A2 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  542/    62A6 : 0241 00FF           		andi.w	#$FF,d1
(2)  543/    62AA : 3CBC 0000           		move.w	#0,(a6)				; Report OK
(2)  544/    62AE : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  545/    62B2 : 3D41 0004           		move.w	d1,4(a6)			; Mode: 0=normal -1=Protected
(2)  546/    62B6 : 4E75                		rts
(2)  547/    62B8 :                     
(2)  548/    62B8 :                     ; No RAM / No Format
(2)  549/    62B8 :                     .big_fail:
(2)  550/    62B8 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  551/    62BC : 3CBC FFFE           		move.w	#-2,(a6)			; Report FAIL
(2)  552/    62C0 : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  553/    62C4 : 4E75                		rts
(2)  554/    62C6 :                     
(2)  555/    62C6 :                     ; --------------------------------------------------------
(2)  556/    62C6 :                     ; Command $09
(2)  557/    62C6 :                     ;
(2)  558/    62C6 :                     ; READ Save data, requires Word-RAM permission.
(2)  559/    62C6 :                     ;
(2)  560/    62C6 :                     ; Returns:
(2)  561/    62C6 :                     ; mcd_dcomm_s | $00.w:
(2)  562/    62C6 :                     ;             |  0 - OK
(2)  563/    62C6 :                     ;             | -1 - Not found / Fatal error
(2)  564/    62C6 :                     ; --------------------------------------------------------
(2)  565/    62C6 :                     
(2)  566/    62C6 :                     SubTask_cmnd09:
(2)  567/    62C6 : 6152                		bsr	SubTsk_BramCall
(2)  568/    62C8 : 6564                		bcs	SubTsk_ReturnFail
(2)  569/    62CA : 0839 0001 FFFF      .wait_dmna:	btst	#1,(SCPU_reg+mcd_memory).l		; Word-RAM Allowed (DMNA)?
             62D0 : 8003             
(2)  570/    62D2 : 67F6                		beq	.wait_dmna
(2)  571/    62D4 : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  572/    62DA : 43F9 000B C000      		lea	(SCPU_wram+WRAM_SaveDataCopy).l,a1
(2)  573/    62E0 : 7200                		moveq	#0,d1
(2)  574/    62E2 : 303C 0003           		move.w	#BRMREAD,d0
(2)  575/    62E6 : 4EB8 5F16           		jsr	_BURAM
(2)  576/    62EA : 6542                		bcs	SubTsk_ReturnFail
(2)  577/    62EC : 6000 FF6A           		bra	SubTask_cmnd07
(2)  578/    62F0 :                     
(2)  579/    62F0 :                     ; --------------------------------------------------------
(2)  580/    62F0 :                     ; Command $0A
(2)  581/    62F0 :                     ;
(2)  582/    62F0 :                     ; WRITE Save data, requires Word-RAM permission.
(2)  583/    62F0 :                     ;
(2)  584/    62F0 :                     ; Returns:
(2)  585/    62F0 :                     ; mcd_dcomm_s | $00.w:
(2)  586/    62F0 :                     ;             |  0 - OK
(2)  587/    62F0 :                     ;             | -1 - Not found
(2)  588/    62F0 :                     ; --------------------------------------------------------
(2)  589/    62F0 :                     
(2)  590/    62F0 :                     SubTask_cmnd0A:
(2)  591/    62F0 : 6128                		bsr	SubTsk_BramCall
(2)  592/    62F2 : 653A                		bcs	SubTsk_ReturnFail
(2)  593/    62F4 : 0839 0001 FFFF      .wait_dmna:	btst	#1,(SCPU_reg+mcd_memory).l		; Word-RAM Allowed (DMNA)?
             62FA : 8003             
(2)  594/    62FC : 67F6                		beq	.wait_dmna
(2)  595/    62FE : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  596/    6304 : 43F9 000B C000      		lea	(SCPU_wram+WRAM_SaveDataCopy).l,a1
(2)  597/    630A : 7200                		moveq	#0,d1
(2)  598/    630C : 303C 0004           		move.w	#BRMWRITE,d0
(2)  599/    6310 : 4EB8 5F16           		jsr	_BURAM
(2)  600/    6314 : 6518                		bcs	SubTsk_ReturnFail
(2)  601/    6316 : 6000 FF40           		bra	SubTask_cmnd07
(2)  602/    631A :                     
(2)  603/    631A :                     ; --------------------------------------------------------
(2)  604/    631A :                     
(2)  605/    631A :                     SubTsk_BramCall:
(2)  606/    631A : 41F9 0000 7360      		lea	(RAM_CdSub_BramWork).l,a0
(2)  607/    6320 : 43F9 0000 79A0      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  608/    6326 : 7000                		moveq	#BRMINIT,d0
(2)  609/    6328 : 4EB8 5F16           		jsr	_BURAM
(2)  610/    632C : 4E75                		rts
(2)  611/    632E :                     SubTsk_ReturnFail:
(2)  612/    632E : 31FC FFFF 8020      		move.w	#-1,(SCPU_reg+mcd_dcomm_s).w
(2)  613/    6334 : 4E75                		rts
(2)  614/    6336 :                     ; SubTsk_ReturnOk:
(2)  615/    6336 :                     ; 		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  616/    6336 :                     ; 		rts
(2)  617/    6336 :                     
(2)  618/    6336 :                     SubTask_RetErr_NoFile:
(2)  619/    6336 : 11FC 0001 800F      		move.b	#%00000001,(SCPU_reg+mcd_comm_s).w	; SET ERROR %0001
(2)  620/    633C :                     
(2)  621/    633C :                     ; 	; *** REMOVE THIS ON RELEASE ***
(2)  622/    633C :                     ; 		move.w	#4,d1					; READY off | ACCESS blink
(2)  623/    633C :                     ; 		move.w	#LEDSET,d0
(2)  624/    633C :                     ; 		jmp	(_CDBIOS).w
(2)  625/    633C :                     ; 	; ***
(2)  626/    633C : 4E75                		rts
(2)  627/    633E :                     
(2)  628/    633E :                     ; =====================================================================
(2)  629/    633E :                     ; ----------------------------------------------------------------
(2)  630/    633E :                     ; Commands $10-$17
(2)  631/    633E :                     ;
(2)  632/    633E :                     ; CDDA
(2)  633/    633E :                     ; ----------------------------------------------------------------
(2)  634/    633E :                     
(2)  635/    633E :                     ; --------------------------------------------------------
(2)  636/    633E :                     ; Command $10
(2)  637/    633E :                     ;
(2)  638/    633E :                     ; Play CDDA Track, stops on finish.
(2)  639/    633E :                     ;
(2)  640/    633E :                     ; Input:
(2)  641/    633E :                     ; mcd_dcomm_m | dc.w track_num
(2)  642/    633E :                     ;               - DO NOT USE TRACK 1
(2)  643/    633E :                     ;               - TRACK 0 IS INVALID
(2)  644/    633E :                     ; --------------------------------------------------------
(2)  645/    633E :                     
(2)  646/    633E :                     SubTask_cmnd10:
(2)  647/    633E : 303C 0002           		move.w	#MSCSTOP,d0
(2)  648/    6342 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  649/    6346 : 613A                		bsr	spCdda_ResetVolume
(2)  650/    6348 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  651/    634C : 303C 0012           		move.w	#MSCPLAY1,d0
(2)  652/    6350 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  653/    6354 :                     
(2)  654/    6354 :                     ; --------------------------------------------------------
(2)  655/    6354 :                     ; Command $11
(2)  656/    6354 :                     ;
(2)  657/    6354 :                     ; Play CDDA Track, loops indefiniely.
(2)  658/    6354 :                     ;
(2)  659/    6354 :                     ; Input:
(2)  660/    6354 :                     ; mcd_dcomm_m | dc.w track_num
(2)  661/    6354 :                     ;               - DO NOT USE TRACK 1
(2)  662/    6354 :                     ;               - TRACK 0 IS INVALID
(2)  663/    6354 :                     ; --------------------------------------------------------
(2)  664/    6354 :                     
(2)  665/    6354 :                     SubTask_cmnd11:
(2)  666/    6354 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  667/    6358 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  668/    635C : 6124                		bsr	spCdda_ResetVolume
(2)  669/    635E : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  670/    6362 : 303C 0013           		move.w	#MSCPLAYR,d0
(2)  671/    6366 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  672/    636A :                     
(2)  673/    636A :                     ; --------------------------------------------------------
(2)  674/    636A :                     ; Command $14
(2)  675/    636A :                     ;
(2)  676/    636A :                     ; Stop CDDA Track
(2)  677/    636A :                     ; --------------------------------------------------------
(2)  678/    636A :                     
(2)  679/    636A :                     SubTask_cmnd14:
(2)  680/    636A : 303C 0002           		move.w	#MSCSTOP,d0
(2)  681/    636E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  682/    6372 : 600E                		bra	spCdda_ResetVolume
(2)  683/    6374 :                     
(2)  684/    6374 :                     ; --------------------------------------------------------
(2)  685/    6374 :                     ; Command $16
(2)  686/    6374 :                     ;
(2)  687/    6374 :                     ; Fade-out/Fade-in CD Volume
(2)  688/    6374 :                     ;
(2)  689/    6374 :                     ; Input:
(2)  690/    6374 :                     ; mcd_dcomm_m | dc.w target_vol,fade_speed
(2)  691/    6374 :                     ;               - Target volume: $000-$400 Max-Min
(2)  692/    6374 :                     ;               - Fade Speed:    $001-$200 Slow-Fast
(2)  693/    6374 :                     ;                                     $400 Set once
(2)  694/    6374 :                     ; --------------------------------------------------------
(2)  695/    6374 :                     
(2)  696/    6374 :                     SubTask_cmnd16:
(2)  697/    6374 : 2238 8010           		move.l	(SCPU_reg+mcd_dcomm_m).w,d1
(2)  698/    6378 : 303C 0086           		move.w	#FDRCHG,d0
(2)  699/    637C : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  700/    6380 : 4E75                		rts
(2)  701/    6382 :                     
(2)  702/    6382 :                     ; --------------------------------------------------------
(2)  703/    6382 :                     ; Command $17
(2)  704/    6382 :                     ;
(2)  705/    6382 :                     ; CDDA Fade-out
(2)  706/    6382 :                     ; --------------------------------------------------------
(2)  707/    6382 :                     
(2)  708/    6382 :                     SubTask_cmnd17:
(2)  709/    6382 :                     ; 		move.l	#$0380,d1
(2)  710/    6382 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  711/    6382 :                     ; 		jsr	(_CDBIOS).w
(2)  712/    6382 :                     ; 		move.l	#$0380|$8000,d1
(2)  713/    6382 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  714/    6382 :                     ; 		jsr	(_CDBIOS).w
(2)  715/    6382 :                     ; 		rts
(2)  716/    6382 :                     
(2)  717/    6382 :                     ; --------------------------------------------------------
(2)  718/    6382 :                     ; CDDA subroutines:
(2)  719/    6382 :                     
(2)  720/    6382 :                     spCdda_ResetVolume:
(2)  721/    6382 : 48E7 C0C0           		movem.l	d0-d1/a0-a1,-(sp)
(2)  722/    6386 : 323C 0400           		move.w	#$0400,d1
(2)  723/    638A : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  724/    638E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  725/    6392 : 323C 8400           		move.w	#$0400|$8000,d1
(2)  726/    6396 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  727/    639A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  728/    639E : 4CDF 0303           		movem.l	(sp)+,d0-d1/a0-a1
(2)  729/    63A2 : 4E75                		rts
(2)  730/    63A4 :                     
(2)  731/    63A4 :                     ; =====================================================================
(2)  732/    63A4 :                     ; ----------------------------------------------------------------
(2)  733/    63A4 :                     ; Commands $18-$1F
(2)  734/    63A4 :                     ;
(2)  735/    63A4 :                     ; Stamp rendering
(2)  736/    63A4 :                     ; ----------------------------------------------------------------
(2)  737/    63A4 :                     
(2)  738/    63A4 :                     ; --------------------------------------------------------
(2)  739/    63A4 :                     ; Command $18
(2)  740/    63A4 :                     ;
(2)  741/    63A4 :                     ; Init/Enable Stamps
(2)  742/    63A4 :                     ;
(2)  743/    63A4 :                     ; Input:
(2)  744/    63A4 :                     ; mcd_dcomm_m | dc.w width,height
(2)  745/    63A4 :                     ;               - Stamp Dot-Screen Width
(2)  746/    63A4 :                     ;               - Stamp Dot-Screen Height
(2)  747/    63A4 :                     ; --------------------------------------------------------
(2)  748/    63A4 :                     
(2)  749/    63A4 :                     SubTask_cmnd18:
(2)  750/    63A4 : 43F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a1
(2)  751/    63A8 : 3011                		move.w	(a1),d0
(2)  752/    63AA : 3229 0002           		move.w	2(a1),d1
(2)  753/    63AE : 31C0 7202           		move.w	d0,(RAM_CdSub_StampW).w
(2)  754/    63B2 : 31C1 7204           		move.w	d1,(RAM_CdSub_StampH).w
(2)  755/    63B6 : 31FC 0000 720A      		move.w	#%000,(RAM_CdSub_StampSize).w	; Stamp type/size: 1x1 screen | 16x16 dot | RPT
(2)  756/    63BC : 6100 0802           		bsr	CdSub_StampInitStuff
(2)  757/    63C0 : 6100 080A           		bsr	CdSub_StampDefaults
(2)  758/    63C4 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  759/    63CA : 31FC 0001 7206      		move.w	#1,(RAM_CdSub_StampEnbl).w	; Enable Stamp rendering
(2)  760/    63D0 : 08F8 0001 8033      		bset	#1,(SCPU_reg+$33).w
(2)  761/    63D6 : 4E75                		rts
(2)  762/    63D8 :                     
(2)  763/    63D8 :                     ; --------------------------------------------------------
(2)  764/    63D8 :                     ; Command $19
(2)  765/    63D8 :                     ;
(2)  766/    63D8 :                     ; Disable Stamps, DMNA must bet set.
(2)  767/    63D8 :                     ; --------------------------------------------------------
(2)  768/    63D8 :                     
(2)  769/    63D8 :                     SubTask_cmnd19:
(2)  770/    63D8 : 08B8 0001 8033      		bclr	#1,(SCPU_reg+$33).w
(2)  771/    63DE : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2)  772/    63E2 : 0207 0007            		andi.b	#%00111,d7
(2)  773/    63E6 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w		; Restore WRAM write mode
(2)  774/    63EA : 33FC 0000 000B      		move.w	#0,(SCPU_wram+WRAM_StampCurrFlip).l
             63F0 : BFFE             
(2)  775/    63F2 : 31FC 0000 7206      		move.w	#0,(RAM_CdSub_StampEnbl).w		; Disable Stamp rendering
(2)  776/    63F8 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  777/    63FE : 08F8 0000 8003      .set_ret:	bset	#0,(SCPU_reg+mcd_memory).w
(2)  778/    6404 : 67F8                		beq.s	.set_ret
(2)  779/    6406 : 4E75                		rts
(2)  780/    6408 :                     
(2)  781/    6408 :                     ; =====================================================================
(2)  782/    6408 :                     ; ----------------------------------------------------------------
(2)  783/    6408 :                     ; Subroutines
(2)  784/    6408 :                     ; ----------------------------------------------------------------
(2)  785/    6408 :                     
(2)  786/    6408 :                     ; --------------------------------------------------------
(2)  787/    6408 :                     ; CD-ROM data
(2)  788/    6408 :                     ; --------------------------------------------------------
(2)  789/    6408 :                     
(2)  790/    6408 :                     ; ------------------------------------------------
(2)  791/    6408 :                     ; spReadSectorsN
(2)  792/    6408 :                     ;
(2)  793/    6408 :                     ; Input:
(2)  794/    6408 :                     ; a0 - Destination
(2)  795/    6408 :                     ; d0 - Sector start
(2)  796/    6408 :                     ; d1 - Number of sectors
(2)  797/    6408 :                     ; ------------------------------------------------
(2)  798/    6408 :                     
(2)  799/    6408 :                     spReadSectorsN:
(2)  800/    6408 : 4BF9 0001 4AFC      		lea	(RAM_CdSub_FsBuff).l,a5
(2)  801/    640E : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  802/    6414 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  803/    641A : 2A80                		move.l	d0,(a5)
(2)  804/    641C : 2B41 0004           		move.l	d1,4(a5)
(2)  805/    6420 : 2B48 0008           		move.l	a0,8(a5)
(2)  806/    6424 : 11FC 0003 8004      		move.b	#%011,(SCPU_reg+4).w		; Set CDC device to "Sub CPU"
(2)  807/    642A : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  808/    642E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  809/    6432 : 204D                		move.l	a5,a0
(2)  810/    6434 : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  811/    6438 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  812/    643C :                     .wait_STAT:
(2)  813/    643C : 2F0D                		move.l	a5,-(sp)
(2)  814/    643E : 6100 0944           		bsr	CdSub_PCM_Process
(2)  815/    6442 : 2A5F                		move.l	(sp)+,a5
(2)  816/    6444 : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  817/    6448 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  818/    644C : 65EE                 		bcs.s	.wait_STAT
(2)  819/    644E :                     .wait_READ:
(2)  820/    644E : 2F0D                		move.l	a5,-(sp)
(2)  821/    6450 : 6100 0932           		bsr	CdSub_PCM_Process
(2)  822/    6454 : 2A5F                		move.l	(sp)+,a5
(2)  823/    6456 : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  824/    645A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  825/    645E : 65EE                		bcs.s	.wait_READ
(2)  826/    6460 : 2B40 0010           		move.l	d0,$10(a5)
(2)  827/    6464 :                     .WaitTransfer:
(2)  828/    6464 : 206D 0008           		movea.l	8(a5),a0			; a0 - DATA Destination
(2)  829/    6468 : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  830/    646C : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  831/    6470 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  832/    6474 : 65EE                		bcs.s	.waitTransfer
(2)  833/    6476 : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  834/    647A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  835/    647E : 06AD 0000 0800      		addi.l	#$800,8(a5)
             6484 : 0008             
(2)  836/    6486 : 5295                		addq.l	#1,(a5)
(2)  837/    6488 : 53AD 0004           		subq.l	#1,4(a5)
(2)  838/    648C : 66AE                		bne.s	.wait_STAT
(2)  839/    648E : 4E75                		rts
(2)  840/    6490 :                     
(2)  841/    6490 :                     ; ------------------------------------------------
(2)  842/    6490 :                     ; ISO9660 Driver
(2)  843/    6490 :                     ; ------------------------------------------------
(2)  844/    6490 :                     
(2)  845/    6490 :                     spInitFS:
(2)  846/    6490 : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  847/    6494 : 7010                		moveq	#$10,d0			; Read sector number $10 (At $8000)
(2)  848/    6496 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  849/    6498 : 41F9 0000 7AFC      		lea	(ISO_Filelist).l,a0
(2)  850/    649E : 2F08                		move.l	a0,-(sp)
(2)  851/    64A0 : 6100 FF66           		bsr	spReadSectorsN
(2)  852/    64A4 : 205F                		move.l	(sp)+,a0		; Now use the actual output
(2)  853/    64A6 : 43E8 009C           		lea	$9C(a0),a1
(2)  854/    64AA : 1029 0006           		move.b	6(a1),d0		; Read sector where filelist is located.
(2)  855/    64AE : E188                		lsl.l	#8,d0
(2)  856/    64B0 : 1029 0007           		move.b	7(a1),d0
(2)  857/    64B4 : E188                		lsl.l	#8,d0
(2)  858/    64B6 : 1029 0008           		move.b	8(a1),d0
(2)  859/    64BA : E188                		lsl.l	#8,d0
(2)  860/    64BC : 1029 0009           		move.b	9(a1),d0
(2)  861/    64C0 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  862/    64C2 : 6100 FF44           		bsr	spReadSectorsN
(2)  863/    64C6 : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6
(2)  864/    64CA : 4E75                		rts
(2)  865/    64CC :                     
(2)  866/    64CC :                     ; --------------------------------------------------------
(2)  867/    64CC :                     ; spSearchFile
(2)  868/    64CC :                     ;
(2)  869/    64CC :                     ; Search a file on the disc
(2)  870/    64CC :                     ; FILELIST MUST BE LOADED WITH spInitFS ON INIT.
(2)  871/    64CC :                     ;
(2)  872/    64CC :                     ; Input:
(2)  873/    64CC :                     ; a0   | Filename string with zero termination
(2)  874/    64CC :                     ;
(2)  875/    64CC :                     ; Returns:
(2)  876/    64CC :                     ; bcs  | File NOT found / error
(2)  877/    64CC :                     ; bcc  | File found
(2)  878/    64CC :                     ;
(2)  879/    64CC :                     ; bcc:
(2)  880/    64CC :                     ; d0.l | Start sector
(2)  881/    64CC :                     ; d1.l | Number of sectors
(2)  882/    64CC :                     ; d2.l | Filesize
(2)  883/    64CC :                     ;
(2)  884/    64CC :                     ; Breaks:
(2)  885/    64CC :                     ; d4-d7,a6
(2)  886/    64CC :                     ; --------------------------------------------------------
(2)  887/    64CC :                     
(2)  888/    64CC :                     spSearchFile:
(2)  889/    64CC : 49F9 0000 7AFC      		lea	(ISO_Filelist).l,a4	; a4 - Root filelist
(2)  890/    64D2 : 7000                		moveq	#0,d0
(2)  891/    64D4 : 7200                		moveq	#0,d1
(2)  892/    64D6 : 7400                		moveq	#0,d2
(2)  893/    64D8 :                     .next_file:
(2)  894/    64D8 : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  895/    64DA : 673E                		beq.s	.failed_srch
(2)  896/    64DC : 0247 00FF           		andi.w	#$FF,d7
(2)  897/    64E0 : 264C                		move.l	a4,a3			; a3 - Current file block
(2)  898/    64E2 : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  899/    64E6 : 1C13                		move.b	(a3),d6
(2)  900/    64E8 : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  901/    64EA : D6FC 0007           		adda	#$07,a3			; Go to Filename string
(2)  902/    64EE : 7C00                		moveq	#0,d6
(2)  903/    64F0 : 1C1B                		move.b	(a3)+,d6
(2)  904/    64F2 : 5946                		subq.w	#3+1,d6
(2)  905/    64F4 : 2448                		move.l	a0,a2			; a2 - string to seach for
(2)  906/    64F6 :                     .chk_str:
(2)  907/    64F6 : 1A1B                		move.b	(a3)+,d5
(2)  908/    64F8 : BA1A                		cmp.b	(a2)+,d5
(2)  909/    64FA : 6606                		bne.s	.non_file
(2)  910/    64FC : 51CE FFF8           		dbf	d6,.chk_str
(2)  911/    6500 : 6004                		bra.s	.found_file
(2)  912/    6502 :                     .non_file:
(2)  913/    6502 : D8C7                		adda	d7,a4			; Next block
(2)  914/    6504 : 60D2                		bra.s	.next_file
(2)  915/    6506 :                     .found_file:
(2)  916/    6506 : 202C 0006           		move.l	$06(a4),d0		; d0 - Sector position
(2)  917/    650A : 222C 000E           		move.l	$0E(a4),d1		; d1 - Number of sectors
(2)  918/    650E : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  919/    6510 : E089                		lsr.l	#8,d1			; bitshift d1
(2)  920/    6512 : E689                		lsr.l	#3,d1
(2)  921/    6514 : 44FC 0000           		move	#0,ccr
(2)  922/    6518 : 4E75                		rts
(2)  923/    651A :                     .failed_srch:
(2)  924/    651A : 44FC 0001           		move	#1,ccr
(2)  925/    651E : 4E75                		rts
(2)  926/    6520 :                     
(2)  927/    6520 :                     ; =====================================================================
(2)  928/    6520 :                     ; ----------------------------------------------------------------
(2)  929/    6520 :                     ; Stamps rendering
(2)  930/    6520 :                     ; ----------------------------------------------------------------
(2)  931/    6520 :                     
(2)  932/    6520 :                     CdSub_StampRender:
(2)  933/    6520 : 3E38 7206           		move.w	(RAM_CdSub_StampEnbl).w,d7	; Stamp rendering enabled?
(2)  934/    6524 : 6700 00B8           		beq	.exit_render
(2)  935/    6528 : 0839 0001 FFFF      		btst	#1,(SCPU_reg+mcd_memory).l	; Word-RAM allowed (DMNA)?
             652E : 8003             
(2)  936/    6530 : 6700 00AC           		beq	.exit_render
(2)  937/    6534 :                     ; 		bset	#7,(SCPU_reg+mcd_comm_s).w
(2)  938/    6534 : 4A38 721A           		tst.b	(RAM_CdSub_StampReqUpd).w	; MAIN wants WRAM?
(2)  939/    6538 : 671C                		beq	.no_break
(2)  940/    653A : 4238 721A           		clr.b	(RAM_CdSub_StampReqUpd).w
(2)  941/    653E :                     .wait_done:
(2)  942/    653E : 6100 0844           		bsr	CdSub_PCM_Process
(2)  943/    6542 : 1E38 8058           		move.b	($FFFF8058).w,d7
(2)  944/    6546 : 6BF6                		bmi.s	.wait_done
(2)  945/    6548 :                     ; 		tst.b	(RAM_CdSub_StampBusy).w
(2)  946/    6548 :                     ; 		bne.s	.wait_done
(2)  947/    6548 : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN
             654E : 8003             
(2)  948/    6550 : 67F6                		beq.s	.wait_ret
(2)  949/    6552 : 6000 008A           		bra	.exit_render			; Exit
(2)  950/    6556 :                     .no_break:
(2)  951/    6556 :                     
(2)  952/    6556 :                     ; ----------------------------------------
(2)  953/    6556 :                     ; Genesis request
(2)  954/    6556 :                     ; ----------------------------------------
(2)  955/    6556 :                     
(2)  956/    6556 : 3E39 000B BFFE      		move.w	(SCPU_wram+WRAM_StampCurrFlip).l,d7
(2)  957/    655C : 3C38 7214           		move.w	(RAM_CdSub_StampCBuff).w,d6
(2)  958/    6560 : BE46                		cmp.w	d6,d7
(2)  959/    6562 : 672C                		beq	.flip_turn
(2)  960/    6564 : 31C7 7214           		move.w	d7,(RAM_CdSub_StampCBuff).w
(2)  961/    6568 :                     ; 		move.w	#0,(SCPU_wram+WRAM_StampsDone).l
(2)  962/    6568 : 08B8 0003 800F      		bclr	#3,(SCPU_reg+mcd_comm_s).w
(2)  963/    656E : 6100 0814           		bsr	CdSub_PCM_Process
(2)  964/    6572 : 616E                		bsr	.make_list
(2)  965/    6574 : 6100 080E           		bsr	CdSub_PCM_Process
(2)  966/    6578 : 6100 00C4           		bsr	.trace_blank
(2)  967/    657C : 31FC 0000 720E      		move.w	#0,(RAM_CdSub_StampNextRd).w		; Start the engine
(2)  968/    6582 : 31FC 0780 720C      		move.w	#$780,(RAM_CdSub_StampNextWr).w
(2)  969/    6588 : 50F8 7210           		st.b	(RAM_CdSub_DotClearFlag).w
(2)  970/    658C : 6100 07F6           		bsr	CdSub_PCM_Process
(2)  971/    6590 :                     .flip_turn:
(2)  972/    6590 :                     
(2)  973/    6590 :                     ; ----------------------------------------
(2)  974/    6590 :                     ; Main engine
(2)  975/    6590 :                     ; ----------------------------------------
(2)  976/    6590 :                     
(2)  977/    6590 :                     ; 		move.w	(SCPU_wram+WRAM_StampsDone).l,d7
(2)  978/    6590 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  979/    6594 : 0807 0003           		btst	#3,d7
(2)  980/    6598 : 6620                		bne	.return_ret
(2)  981/    659A :                     ; 		move.b	($FFFF8058).w,d7
(2)  982/    659A :                     ; 		bmi.s	.exit_render
(2)  983/    659A : 4A38 7208           		tst.b	(RAM_CdSub_StampBusy).w			; Check if current Stamp finished
(2)  984/    659E : 663E                		bne	.exit_render
(2)  985/    65A0 : 6100 07E2           		bsr	CdSub_PCM_Process
(2)  986/    65A4 : 6100 03CC           		bsr	.process_trace
(2)  987/    65A8 : 0A78 0780 720E      		eori.w	#$780,(RAM_CdSub_StampNextRd).w
(2)  988/    65AE : 6100 07D4           		bsr	CdSub_PCM_Process
(2)  989/    65B2 : 6154                		bsr	.make_stamp
(2)  990/    65B4 : 4A78 7200           		tst.w	(RAM_CdSub_StampNum).w
(2)  991/    65B8 : 6624                		bne	.exit_render
(2)  992/    65BA :                     ; 		move.w	#1,(SCPU_wram+WRAM_StampsDone).l
(2)  993/    65BA :                     
(2)  994/    65BA :                     ; ------------------------------------------------
(2)  995/    65BA :                     ; All stamps are checked
(2)  996/    65BA :                     ; ------------------------------------------------
(2)  997/    65BA :                     
(2)  998/    65BA :                     .return_ret:
(2)  999/    65BA :                     ; 		move.b	($FFFF8058).w,d7
(2) 1000/    65BA :                     ; 		bmi.s	.return_ret
(2) 1001/    65BA : 6100 07C8           		bsr	CdSub_PCM_Process
(2) 1002/    65BE : 4A38 7208           		tst.b	(RAM_CdSub_StampBusy).w
(2) 1003/    65C2 : 66F6                		bne	.return_ret
(2) 1004/    65C4 : 6100 0606           		bsr	CdSub_StampDefaults
(2) 1005/    65C8 :                     ; 		bclr	#7,(SCPU_reg+mcd_comm_s).w
(2) 1006/    65C8 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2) 1007/    65CE : 08F9 0000 FFFF      .wait_rete:	bset	#0,(SCPU_reg+mcd_memory).l		; Set RET
             65D4 : 8003             
(2) 1008/    65D6 : 67F6                		beq.s	.wait_rete
(2) 1009/    65D8 : 08F8 0003 800F      		bset	#3,(SCPU_reg+mcd_comm_s).w
(2) 1010/    65DE :                     
(2) 1011/    65DE :                     ; ------------------------------------------------
(2) 1012/    65DE :                     ; Exit
(2) 1013/    65DE :                     ; ------------------------------------------------
(2) 1014/    65DE :                     
(2) 1015/    65DE :                     .exit_render:
(2) 1016/    65DE : 6000 07A4           		bra	CdSub_PCM_Process
(2) 1017/    65E2 :                     
(2) 1018/    65E2 :                     ; =====================================================================
(2) 1019/    65E2 :                     ; ------------------------------------------------
(2) 1020/    65E2 :                     ; Make a list of available stamps to use
(2) 1021/    65E2 :                     ; ------------------------------------------------
(2) 1022/    65E2 :                     
(2) 1023/    65E2 :                     .make_list:
(2) 1024/    65E2 : 41F9 000B A000      		lea	(SCPU_wram+WRAM_MdStampList).l,a0
(2) 1025/    65E8 : 43F9 0000 7250      		lea	(RAM_CdSub_StampList).l,a1
(2) 1026/    65EE : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(2) 1027/    65F0 :                     .loop_list:
(2) 1028/    65F0 : 1C10                		move.b	cdstamp_flags(a0),d6		; %Et00000R
(2) 1029/    65F2 : 0806 0007           		btst	#7,d6
(2) 1030/    65F6 : 6706                		beq.s	.no_stamp
(2) 1031/    65F8 : 2288                		move.l	a0,(a1)
(2) 1032/    65FA : D2FC 0008           		adda	#8,a1
(2) 1033/    65FE :                     .no_stamp:
(2) 1034/    65FE : D0FC 0020           		adda	#$20,a0
(2) 1035/    6602 : 51CF FFEC           		dbf	d7,.loop_list
(2) 1036/    6606 : 4E75                		rts
(2) 1037/    6608 :                     
(2) 1038/    6608 :                     ; ------------------------------------------------
(2) 1039/    6608 :                     ; Make stamp from the generated list
(2) 1040/    6608 :                     ; ------------------------------------------------
(2) 1041/    6608 :                     
(2) 1042/    6608 :                     .make_stamp:
(2) 1043/    6608 : 4278 7200           		clr.w	(RAM_CdSub_StampNum).w
(2) 1044/    660C :                     .retry:
(2) 1045/    660C : 7E00                		moveq	#0,d7
(2) 1046/    660E : 3E38 7212           		move.w	(RAM_CdSub_StampIndxW).w,d7
(2) 1047/    6612 : 5278 7212           		addq.w	#1,(RAM_CdSub_StampIndxW).w
(2) 1048/    6616 : 3C07                		move.w	d7,d6
(2) 1049/    6618 : E74F                		lsl.w	#3,d7
(2) 1050/    661A : 41F9 0000 7250      		lea	(RAM_CdSub_StampList).l,a0
(2) 1051/    6620 : 2030 7000           		move.l	(a0,d7.w),d0
(2) 1052/    6624 : 6716                		beq.s	.exit_last
(2) 1053/    6626 : 42B0 7000           		clr.l	(a0,d7.w)
(2) 1054/    662A : 2040                		move.l	d0,a0
(2) 1055/    662C : 6100 00DE           		bsr	.make_trace
(2) 1056/    6630 : 65DA                		bcs	.retry
(2) 1057/    6632 : 5278 7200           		addq.w	#1,(RAM_CdSub_StampNum).w
(2) 1058/    6636 : 0A78 0780 720C      		eori.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1059/    663C :                     .exit_last:
(2) 1060/    663C : 4E75                		rts
(2) 1061/    663E :                     
(2) 1062/    663E :                     ; =====================================================================
(2) 1063/    663E :                     ; ------------------------------------------------
(2) 1064/    663E :                     ; Clear all the dot-screen
(2) 1065/    663E :                     ;
(2) 1066/    663E :                     ; Uses:
(2) 1067/    663E :                     ; a1,d0
(2) 1068/    663E :                     ; ------------------------------------------------
(2) 1069/    663E :                     
(2) 1070/    663E :                     .trace_blank:
(2) 1071/    663E : 41F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a0
(2) 1072/    6644 : 700F                		moveq	#(256/16)-1,d0
(2) 1073/    6646 :                     .reset_out:
(2) 1074/    6646 :                     	rept 16
(2) 1075/    6646 :                     		move.l	#$FFF8,(a0)+
(2) 1076/    6646 :                     		move.l	#0,(a0)+
(2) 1077/    6646 :                     	endm
(2) 1075/    6646 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    664C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6652 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6658 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    665E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6664 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    666A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6670 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6676 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    667C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6682 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6688 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    668E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6694 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    669A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66A0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66A6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66AC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66B2 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66B8 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66BE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66C4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66CA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66D0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66D6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66DC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66E2 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66E8 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66EE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66F4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66FA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6700 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1078/    6706 : 51C8 FF3E           		dbf	d0,.reset_out
(2) 1079/    670A : 4E75                		rts
(2) 1080/    670C :                     
(2) 1081/    670C :                     ; =====================================================================
(2) 1082/    670C :                     ; ------------------------------------------------
(2) 1083/    670C :                     ; Make the trace data
(2) 1084/    670C :                     ;
(2) 1085/    670C :                     ; Input:
(2) 1086/    670C :                     ; a0 - Current stamp
(2) 1087/    670C :                     ; a1 - Output trace location
(2) 1088/    670C :                     ; a6 - Stamp math buffer
(2) 1089/    670C :                     ; d1.w - Center X
(2) 1090/    670C :                     ; d2.w - Center Y
(2) 1091/    670C :                     ; ------------------------------------------------
(2) 1092/    670C :                     
(2) 1093/    670C :                     .make_trace:
(2) 1094/    670C : 4DF9 0000 721C      		lea	(RAM_CdSub_StampProc).l,a6
(2) 1095/    6712 : 4BF8 7244           		lea	(RAM_CdSub_StampOutBox).w,a5
(2) 1096/    6716 : 7E00                		moveq	#0,d7
(2) 1097/    6718 : 1E28 0001           		move.b	cdstamp_map(a0),d7
(2) 1098/    671C : E18F                		lsl.l	#8,d7
(2) 1099/    671E : E78F                		lsl.l	#3,d7
(2) 1100/    6720 : DEBC 0003 0000      		add.l	#WRAM_MdMapTable,d7
(2) 1101/    6726 : E48F                		lsr.l	#2,d7
(2) 1102/    6728 : 3A87                		move.w	d7,stmpi_map(a5)
(2) 1103/    672A : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1104/    672E : BC7C FC00           		cmp.w	#-$400,d6
(2) 1105/    6732 : 6D00 0162           		blt	.invalid
(2) 1106/    6736 : BC7C 0100           		cmp.w	#$100,d6
(2) 1107/    673A : 6C00 015A           		bge	.invalid
(2) 1108/    673E :                     
(2) 1109/    673E :                     	; ------------------------------------------------
(2) 1110/    673E :                     	; Trace texture
(2) 1111/    673E : 7200                		moveq	#0,d1
(2) 1112/    6740 : 7400                		moveq	#0,d2
(2) 1113/    6742 : 3228 000A           		move.w	cdstamp_wdth(a0),d1
(2) 1114/    6746 : 3428 000C           		move.w	cdstamp_hght(a0),d2
(2) 1115/    674A : 3628 000E           		move.w	cdstamp_scale(a0),d3
(2) 1116/    674E : 3803                		move.w	d3,d4
(2) 1117/    6750 : C7FC 0100           		muls.w	#SET_STAMPPOV,d3
(2) 1118/    6754 : E083                		asr.l	#8,d3
(2) 1119/    6756 : 4A43                		tst.w	d3
(2) 1120/    6758 : 6A02                		bpl.s	.splusv
(2) 1121/    675A : E683                		asr.l	#3,d3
(2) 1122/    675C :                     .splusv:
(2) 1123/    675C : 0641 0030           		addi.w	#48,d1
(2) 1124/    6760 : 0642 0030           		addi.w	#48,d2
(2) 1125/    6764 : D243                		add.w	d3,d1
(2) 1126/    6766 : D443                		add.w	d3,d2
(2) 1127/    6768 : 3638 7202           		move.w	(RAM_CdSub_StampW).w,d3
(2) 1128/    676C : 3838 7204           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1129/    6770 : E249                		lsr.w	#1,d1
(2) 1130/    6772 : E24A                		lsr.w	#1,d2
(2) 1131/    6774 : E24B                		lsr.w	#1,d3
(2) 1132/    6776 : E24C                		lsr.w	#1,d4
(2) 1133/    6778 : 4443                		neg.w	d3
(2) 1134/    677A : 4444                		neg.w	d4
(2) 1135/    677C : 3E28 0006           		move.w	cdstamp_x(a0),d7
(2) 1136/    6780 : 3C28 0008           		move.w	cdstamp_y(a0),d6
(2) 1137/    6784 : 9E41                		sub.w	d1,d7
(2) 1138/    6786 : 9C42                		sub.w	d2,d6
(2) 1139/    6788 : BE43                		cmp.w	d3,d7
(2) 1140/    678A : 6C04                		bge.s	.no_xl
(2) 1141/    678C : 9E43                		sub.w	d3,d7
(2) 1142/    678E : D247                		add.w	d7,d1
(2) 1143/    6790 :                     .no_xl:
(2) 1144/    6790 : BC44                		cmp.w	d4,d6
(2) 1145/    6792 : 6C04                		bge.s	.no_yl
(2) 1146/    6794 : 9C44                		sub.w	d4,d6
(2) 1147/    6796 : D446                		add.w	d6,d2
(2) 1148/    6798 :                     .no_yl:
(2) 1149/    6798 :                     ; 		addi.w	#8,d1
(2) 1150/    6798 :                     ; 		addi.w	#8,d2
(2) 1151/    6798 :                     ; 		move.w	#SET_STAMPPOV,d7
(2) 1152/    6798 :                     ; 		add.w	cdstamp_scale(a0),d7
(2) 1153/    6798 :                     ; 		muls.w	d7,d2
(2) 1154/    6798 :                     ; 		muls.w	d7,d1
(2) 1155/    6798 :                     ; 		asr.l	#8,d2
(2) 1156/    6798 :                     ; 		asr.l	#8,d1
(2) 1157/    6798 :                     
(2) 1158/    6798 : 4441                		neg.w	d1
(2) 1159/    679A : 4442                		neg.w	d2
(2) 1160/    679C : 6100 00FE           		bsr	.mk_vars
(2) 1161/    67A0 : 49F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a4
(2) 1162/    67A6 : 3C38 720C           		move.w	(RAM_CdSub_StampNextWr).w,d6
(2) 1163/    67AA : D8C6                		adda	d6,a4
(2) 1164/    67AC : 3E38 7204           		move.w	(RAM_CdSub_StampH).w,d7
(2) 1165/    67B0 : 5347                		subq.w	#1,d7
(2) 1166/    67B2 :                     .next_line:
(2) 1167/    67B2 : 3C16                		move.w	stmpc_XC(a6),d6
(2) 1168/    67B4 : CDC2                		muls.w	d2,d6
(2) 1169/    67B6 : DCAE 0004           		add.l	stmpc_X(a6),d6
(2) 1170/    67BA : EA86                		asr.l	#5,d6
(2) 1171/    67BC : 38C6                		move.w	d6,(a4)+			; X pos
(2) 1172/    67BE : 3C2E 0002           		move.w	stmpc_YC(a6),d6
(2) 1173/    67C2 : CDC2                		muls.w	d2,d6
(2) 1174/    67C4 : 9CAE 0008           		sub.l	stmpc_Y(a6),d6
(2) 1175/    67C8 : EA86                		asr.l	#5,d6
(2) 1176/    67CA : 38C6                		move.w	d6,(a4)+			; Y pos
(2) 1177/    67CC : 2C2E 0014           		move.l	stmpc_TX(a6),d6
(2) 1178/    67D0 : EA86                		asr.l	#5,d6
(2) 1179/    67D2 : 38C6                		move.w	d6,(a4)+			; X Delta
(2) 1180/    67D4 : 2C2E 0018           		move.l	stmpc_TY(a6),d6
(2) 1181/    67D8 : EA86                		asr.l	#5,d6
(2) 1182/    67DA : 38C6                		move.w	d6,(a4)+			; Y Delta
(2) 1183/    67DC :                     
(2) 1184/    67DC : 5242                		addq.w	#1,d2
(2) 1185/    67DE : 51CF FFD2           		dbf	d7,.next_line
(2) 1186/    67E2 :                     
(2) 1187/    67E2 :                     	; ------------------------------------------------
(2) 1188/    67E2 :                     	; Expand out size
(2) 1189/    67E2 : 3E28 000A           		move.w	cdstamp_wdth(a0),d7
(2) 1190/    67E6 : 3C28 000C           		move.w	cdstamp_hght(a0),d6
(2) 1191/    67EA : 0647 0030           		addi.w	#48,d7
(2) 1192/    67EE : 0646 0030           		addi.w	#48,d6
(2) 1193/    67F2 : 3A28 000E           		move.w	cdstamp_scale(a0),d5
(2) 1194/    67F6 : 3805                		move.w	d5,d4
(2) 1195/    67F8 : CBFC 0100           		muls.w	#SET_STAMPPOV,d5
(2) 1196/    67FC : E085                		asr.l	#8,d5
(2) 1197/    67FE : 4A44                		tst.w	d4
(2) 1198/    6800 : 6A02                		bpl.s	.splus
(2) 1199/    6802 : E685                		asr.l	#3,d5
(2) 1200/    6804 :                     .splus:
(2) 1201/    6804 : DE45                		add.w	d5,d7
(2) 1202/    6806 : DC45                		add.w	d5,d6
(2) 1203/    6808 : 3A07                		move.w	d7,d5
(2) 1204/    680A : 3806                		move.w	d6,d4
(2) 1205/    680C : 3028 0006           		move.w	cdstamp_x(a0),d0
(2) 1206/    6810 : 3228 0008           		move.w	cdstamp_y(a0),d1
(2) 1207/    6814 : E24D                		lsr.w	#1,d5
(2) 1208/    6816 : E24C                		lsr.w	#1,d4
(2) 1209/    6818 : 9045                		sub.w	d5,d0
(2) 1210/    681A : 9244                		sub.w	d4,d1
(2) 1211/    681C : 3400                		move.w	d0,d2
(2) 1212/    681E : 3601                		move.w	d1,d3
(2) 1213/    6820 : D447                		add.w	d7,d2
(2) 1214/    6822 : D646                		add.w	d6,d3
(2) 1215/    6824 : 3838 7202           		move.w	(RAM_CdSub_StampW).w,d4		; Add center
(2) 1216/    6828 : 3A38 7204           		move.w	(RAM_CdSub_StampH).w,d5
(2) 1217/    682C : 3E04                		move.w	d4,d7
(2) 1218/    682E : 3C05                		move.w	d5,d6
(2) 1219/    6830 : E24F                		lsr.w	#1,d7
(2) 1220/    6832 : E24E                		lsr.w	#1,d6
(2) 1221/    6834 : D047                		add.w	d7,d0
(2) 1222/    6836 : D246                		add.w	d6,d1
(2) 1223/    6838 : D447                		add.w	d7,d2
(2) 1224/    683A : D646                		add.w	d6,d3
(2) 1225/    683C :                     
(2) 1226/    683C :                     
(2) 1227/    683C :                     ; 		muls.w	d5,d2
(2) 1228/    683C :                     ; 		muls.w	d5,d3
(2) 1229/    683C :                     ; 		asr.l	#8,d2
(2) 1230/    683C :                     ; 		asr.l	#8,d3
(2) 1231/    683C :                     
(2) 1232/    683C :                     	; d0 - X Left
(2) 1233/    683C :                     	; d1 - Y top
(2) 1234/    683C :                     	; d2 - X right
(2) 1235/    683C :                     	; d3 - Y down
(2) 1236/    683C :                     ; 		move.w	(RAM_CdSub_StampW).w,d4
(2) 1237/    683C :                     ; 		move.w	(RAM_CdSub_StampH).w,d5
(2) 1238/    683C : 0444 0010           		subi.w	#16,d4
(2) 1239/    6840 : 0445 0010           		subi.w	#16,d5
(2) 1240/    6844 : 3E02                		move.w	d2,d7
(2) 1241/    6846 : 0447 0010           		subi.w	#16,d7
(2) 1242/    684A : 4A47                		tst.w	d7
(2) 1243/    684C : 6B48                		bmi.s	.invalid
(2) 1244/    684E : 3E03                		move.w	d3,d7
(2) 1245/    6850 : 0447 0010           		subi.w	#16,d7
(2) 1246/    6854 : 4A47                		tst.w	d7
(2) 1247/    6856 : 6B3E                		bmi.s	.invalid
(2) 1248/    6858 : B044                		cmp.w	d4,d0
(2) 1249/    685A : 6C3A                		bge.s	.invalid
(2) 1250/    685C : B245                		cmp.w	d5,d1
(2) 1251/    685E : 6C36                		bge.s	.invalid
(2) 1252/    6860 : 0644 0010           		addi.w	#16,d4
(2) 1253/    6864 : 0645 0010           		addi.w	#16,d5
(2) 1254/    6868 : 4A40                		tst.w	d0
(2) 1255/    686A : 6A02                		bpl.s	.xl_p
(2) 1256/    686C : 4240                		clr.w	d0
(2) 1257/    686E : 4A41                .xl_p:		tst.w	d1
(2) 1258/    6870 : 6A02                		bpl.s	.yl_p
(2) 1259/    6872 : 4241                		clr.w	d1
(2) 1260/    6874 : B444                .yl_p:		cmp.w	d4,d2
(2) 1261/    6876 : 6D02                		blt.s	.xr_p
(2) 1262/    6878 : 3404                		move.w	d4,d2
(2) 1263/    687A : B645                .xr_p:		cmp.w	d5,d3
(2) 1264/    687C : 6D02                		blt.s	.yr_p
(2) 1265/    687E : 3605                		move.w	d5,d3
(2) 1266/    6880 :                     .yr_p:
(2) 1267/    6880 : 3B40 0002           		move.w	d0,stmpi_x(a5)
(2) 1268/    6884 : 3B41 0004           		move.w	d1,stmpi_y(a5)
(2) 1269/    6888 : 3B42 0006           		move.w	d2,stmpi_xr(a5)
(2) 1270/    688C : 3B43 0008           		move.w	d3,stmpi_yd(a5)
(2) 1271/    6890 : 023C 001E           		and	#%11110,ccr
(2) 1272/    6894 : 4E75                		rts
(2) 1273/    6896 :                     
(2) 1274/    6896 :                     .invalid:
(2) 1275/    6896 : 003C 0001           		or	#1,ccr
(2) 1276/    689A : 4E75                		rts
(2) 1277/    689C :                     
(2) 1278/    689C :                     ; ------------------------------------------------
(2) 1279/    689C :                     
(2) 1280/    689C :                     .mk_vars:
(2) 1281/    689C : 3E28 0010           		move.w	cdstamp_rot(a0),d7
(2) 1282/    68A0 : 3A07                		move.w	d7,d5
(2) 1283/    68A2 : 6100 01F4           		bsr	CdSub_SineWave
(2) 1284/    68A6 : 3C07                		move.w	d7,d6
(2) 1285/    68A8 : 3E05                		move.w	d5,d7
(2) 1286/    68AA : 6100 01E8           		bsr	CdSub_SineWave_Cos
(2) 1287/    68AE : 3D46 0024           		move.w	d6,stmpc_rot_sin(a6)
(2) 1288/    68B2 : 3D47 0026           		move.w	d7,stmpc_rot_cos(a6)
(2) 1289/    68B6 :                     
(2) 1290/    68B6 : 383C 0000           		move.w	#0,d4
(2) 1291/    68BA : 3A3C 0000           		move.w	#0,d5
(2) 1292/    68BE : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1293/    68C2 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1294/    68C6 : 9E46                		sub.w	d6,d7
(2) 1295/    68C8 : 3D47 001E           		move.w	d7,stmpc_zmul(a6)	; Z multi
(2) 1296/    68CC :                     ; 		move.w	d4,d7
(2) 1297/    68CC :                     ; 		move.w	d7,stmpc_xmul(a6)	; X multi
(2) 1298/    68CC : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1299/    68D0 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1300/    68D4 : E087                		asr.l	#8,d7
(2) 1301/    68D6 : 3D47 0022           		move.w	d7,stmpc_zmul_cos(a6)
(2) 1302/    68DA : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1303/    68DE : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1304/    68E2 : E087                		asr.l	#8,d7
(2) 1305/    68E4 : 3D47 0020           		move.w	d7,stmpc_zmul_sin(a6)
(2) 1306/    68E8 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1307/    68EC : 9E46                		sub.w	d6,d7
(2) 1308/    68EE : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1309/    68F2 : E087                		asr.l	#8,d7
(2) 1310/    68F4 : 3C87                		move.w	d7,stmpc_XC(a6)
(2) 1311/    68F6 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1312/    68FA : 9E46                		sub.w	d6,d7
(2) 1313/    68FC : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1314/    6900 : E087                		asr.l	#8,d7
(2) 1315/    6902 : 3D47 0002           		move.w	d7,stmpc_YC(a6)
(2) 1316/    6906 :                     
(2) 1317/    6906 : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1318/    690A : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1319/    690E : 3C05                		move.w	d5,d6
(2) 1320/    6910 : CDEE 0024           		muls.w	stmpc_rot_sin(a6),d6
(2) 1321/    6914 : DE86                		add.l	d6,d7
(2) 1322/    6916 : 7C00                		moveq	#0,d6
(2) 1323/    6918 : 3C28 0002           		move.w	cdstamp_cx(a0),d6
(2) 1324/    691C : E18E                		lsl.l	#8,d6
(2) 1325/    691E : DE86                		add.l	d6,d7
(2) 1326/    6920 : 2D47 0004           		move.l	d7,stmpc_X(a6)
(2) 1327/    6924 : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1328/    6928 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1329/    692C : 3C05                		move.w	d5,d6
(2) 1330/    692E : CDEE 0026           		muls.w	stmpc_rot_cos(a6),d6
(2) 1331/    6932 : 9E86                		sub.l	d6,d7
(2) 1332/    6934 : 7C00                		moveq	#0,d6
(2) 1333/    6936 : 3C28 0004           		move.w	cdstamp_cy(a0),d6
(2) 1334/    693A : E18E                		lsl.l	#8,d6
(2) 1335/    693C : 9E86                		sub.l	d6,d7
(2) 1336/    693E : 2D47 0008           		move.l	d7,stmpc_Y(a6)
(2) 1337/    6942 :                     
(2) 1338/    6942 : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1339/    6946 : CFC1                		muls.w	d1,d7
(2) 1340/    6948 : DFAE 0004           		add.l	d7,stmpc_X(a6)
(2) 1341/    694C : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1342/    6950 : CFC1                		muls.w	d1,d7
(2) 1343/    6952 : DFAE 0008           		add.l	d7,stmpc_Y(a6)
(2) 1344/    6956 :                     
(2) 1345/    6956 : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1346/    695A : 48C7                		ext.l	d7
(2) 1347/    695C : E187                		asl.l	#8,d7
(2) 1348/    695E : 2D47 0014           		move.l	d7,stmpc_TX(a6)
(2) 1349/    6962 : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1350/    6966 : 4447                		neg.w	d7
(2) 1351/    6968 : 48C7                		ext.l	d7
(2) 1352/    696A : E187                		asl.l	#8,d7
(2) 1353/    696C : 2D47 0018           		move.l	d7,stmpc_TY(a6)
(2) 1354/    6970 : 4E75                		rts
(2) 1355/    6972 :                     
(2) 1356/    6972 :                     ; =====================================================================
(2) 1357/    6972 :                     ; ------------------------------------------------
(2) 1358/    6972 :                     ; Send trace to ASIC
(2) 1359/    6972 :                     ;
(2) 1360/    6972 :                     ; Input:
(2) 1361/    6972 :                     ; d0.w | Map location / 2
(2) 1362/    6972 :                     ; d1.w | X pos
(2) 1363/    6972 :                     ; d2.w | Y pos
(2) 1364/    6972 :                     ; d3.w | Width
(2) 1365/    6972 :                     ; d4.w | Height
(2) 1366/    6972 :                     ;
(2) 1367/    6972 :                     ; Uses:
(2) 1368/    6972 :                     ; d5-d7
(2) 1369/    6972 :                     ; ------------------------------------------------
(2) 1370/    6972 :                     
(2) 1371/    6972 :                     .process_trace:
(2) 1372/    6972 : 6100 0410           		bsr	CdSub_PCM_Process
(2) 1373/    6976 : 08B8 0000 7210      		bclr	#0,(RAM_CdSub_DotClearFlag).w	; Clear dotscreen flag?
(2) 1374/    697C : 6600 00B2           		bne	.clear_frame
(2) 1375/    6980 : 41F8 7244           		lea	(RAM_CdSub_StampOutBox).w,a0
(2) 1376/    6984 : 3010                		move.w	stmpi_map(a0),d0
(2) 1377/    6986 : 3228 0002           		move.w	stmpi_x(a0),d1			; X left
(2) 1378/    698A : 3428 0004           		move.w	stmpi_y(a0),d2			; Y top
(2) 1379/    698E : 3628 0006           		move.w  stmpi_xr(a0),d3			; X right
(2) 1380/    6992 : 3828 0008           		move.w  stmpi_yd(a0),d4			; Y bottom
(2) 1381/    6996 : 9641                		sub.w	d1,d3				; XR-XL
(2) 1382/    6998 : 9842                		sub.w	d2,d4				; YB-YT
(2) 1383/    699A : 7C02                		moveq	#%10,d6				; Overwrite mode
(2) 1384/    699C : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1385/    69A0 : 0207 0007            		andi.b	#%00111,d7
(2) 1386/    69A4 : 0246 0003            		andi.w	#%11,d6
(2) 1387/    69A8 : E74E                 		lsl.w	#3,d6
(2) 1388/    69AA : 8E46                 		or.w	d6,d7
(2) 1389/    69AC : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1390/    69B0 : 7C00                 		moveq	#0,d6				; RPT bit
(2) 1391/    69B2 : 3E38 720A            		move.w	(RAM_CdSub_StampSize).w,d7
(2) 1392/    69B6 : 0247 0006            		andi.w	#%110,d7
(2) 1393/    69BA : 0246 0001            		andi.w	#%001,d6
(2) 1394/    69BE : 8E46                 		or.w	d6,d7
(2) 1395/    69C0 : 31C7 8058           		move.w	d7,($FFFF8058).w		; Stamp data size
(2) 1396/    69C4 : 31C0 805A           		move.w  d0,($FFFF805A).w		; d0 - Stamp map location
(2) 1397/    69C8 :                     
(2) 1398/    69C8 :                     	; X,Y,W,H
(2) 1399/    69C8 : 2E3C 0002 0000      		move.l	#WRAM_DotOutput_0,d7
(2) 1400/    69CE : 4A78 7214           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1401/    69D2 : 6706                		beq.s	.dot_0
(2) 1402/    69D4 : 2E3C 0002 8000      		move.l	#WRAM_DotOutput_1,d7
(2) 1403/    69DA :                     .dot_0:
(2) 1404/    69DA : 7C00                		moveq	#0,d6
(2) 1405/    69DC : 3A01                		move.w	d1,d5
(2) 1406/    69DE : E645                		asr.w	#3,d5
(2) 1407/    69E0 : 3C38 7204           		move.w	(RAM_CdSub_StampH).w,d6
(2) 1408/    69E4 : CDC5                		muls.w	d5,d6
(2) 1409/    69E6 : E586                		asl.l	#2,d6
(2) 1410/    69E8 : DE86                		add.l	d6,d7
(2) 1411/    69EA : 2A02                		move.l	d2,d5
(2) 1412/    69EC : 0245 FFF8           		andi.w	#-8,d5
(2) 1413/    69F0 : E58D                		lsl.l	#2,d5
(2) 1414/    69F2 : DE85                		add.l	d5,d7
(2) 1415/    69F4 : 0281 0000 0007      		andi.l	#%111,d1
(2) 1416/    69FA : 0282 0000 0007      		andi.l	#%111,d2
(2) 1417/    6A00 : E74A                		lsl.w	#3,d2
(2) 1418/    6A02 : 8242                		or.w	d2,d1
(2) 1419/    6A04 : E48F                		lsr.l	#2,d7
(2) 1420/    6A06 : 31C1 8060           		move.w  d1,($FFFF8060).w		; Output image buffer offset
(2) 1421/    6A0A : 31C7 805E           		move.w  d7,($FFFF805E).w		; Output image buffer start address
(2) 1422/    6A0E : 31C3 8062           		move.w	d3,($FFFF8062).w		; Image buffer H dot
(2) 1423/    6A12 : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1424/    6A16 :                     
(2) 1425/    6A16 : 7E00                		moveq	#0,d7
(2) 1426/    6A18 : 3E38 720E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1427/    6A1C : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1428/    6A22 : E48F                		lsr.l	#2,d7
(2) 1429/    6A24 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1430/    6A28 : 50F8 7208           		st.b	(RAM_CdSub_StampBusy).w
(2) 1431/    6A2C : 6000 0356           		bra	CdSub_PCM_Process
(2) 1432/    6A30 :                     
(2) 1433/    6A30 :                     ; ----------------------------------------------------------------
(2) 1434/    6A30 :                     ; FIRST FRAME ONLY
(2) 1435/    6A30 :                     
(2) 1436/    6A30 :                     .clear_frame:
(2) 1437/    6A30 : 6100 0352           		bsr	CdSub_PCM_Process
(2) 1438/    6A34 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1439/    6A38 : 0207 0007            		andi.b	#%00111,d7
(2) 1440/    6A3C : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1441/    6A40 : 31FC 0000 8058      		move.w	#0,($FFFF8058).w		; Stamp data size
(2) 1442/    6A46 : 31FC 0000 805A      		move.w  #0,($FFFF805A).w		; d0 - Stamp map location
(2) 1443/    6A4C : 2C3C 0002 0000      		move.l	#WRAM_DotOutput_0,d6
(2) 1444/    6A52 : 4A78 7214           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1445/    6A56 : 6706                		beq.s	.dotc_0
(2) 1446/    6A58 : 2C3C 0002 8000      		move.l	#WRAM_DotOutput_1,d6
(2) 1447/    6A5E :                     .dotc_0:
(2) 1448/    6A5E : E48E                		lsr.l	#2,d6
(2) 1449/    6A60 : 31C6 805E           		move.w  d6,($FFFF805E).w		; Output image buffer start address
(2) 1450/    6A64 : 31FC 0000 8060      		move.w  #0,($FFFF8060).w		; Output image buffer offset
(2) 1451/    6A6A : 3A38 7202           		move.w	(RAM_CdSub_StampW).w,d5
(2) 1452/    6A6E : 3838 7204           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1453/    6A72 : 31C5 8062           		move.w	d5,($FFFF8062).w		; Image buffer H dot
(2) 1454/    6A76 : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1455/    6A7A : 7E00                		moveq	#0,d7
(2) 1456/    6A7C : 3E38 720E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1457/    6A80 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1458/    6A86 : E48F                		lsr.l	#2,d7
(2) 1459/    6A88 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1460/    6A8C : 50F8 7208           		st.b	(RAM_CdSub_StampBusy).w
(2) 1461/    6A90 : 6000 02F2           		bra	CdSub_PCM_Process
(2) 1462/    6A94 :                     
(2) 1463/    6A94 :                     ; =====================================================================
(2) 1464/    6A94 :                     ; ----------------------------------------------------------------
(2) 1465/    6A94 :                     ;
(2) 1466/    6A94 :                     ; ----------------------------------------------------------------
(2) 1467/    6A94 :                     
(2) 1468/    6A94 :                     CdSub_SineWave_Cos:
(2) 1469/    6A94 : 0647 0080           		addi.w  #$80,d7
(2) 1470/    6A98 :                     CdSub_SineWave:
(2) 1471/    6A98 : 2F06                		move.l	d6,-(sp)
(2) 1472/    6A9A : 0247 01FF           		andi.w	#$1FF,d7
(2) 1473/    6A9E : 3C07                		move.w	d7,d6
(2) 1474/    6AA0 : 0807 0007           		btst	#7,d7
(2) 1475/    6AA4 : 6702                		beq.s	.loc_7EFA
(2) 1476/    6AA6 : 4646                		not.w	d6
(2) 1477/    6AA8 :                     .loc_7EFA:
(2) 1478/    6AA8 : 0246 007F           		andi.w  #$7F,d6
(2) 1479/    6AAC : E34E                		lsl.w   #1,d6
(2) 1480/    6AAE : 3C3B 6010           		move.w  .sine_data(pc,d6.w),d6
(2) 1481/    6AB2 : 0807 0008           		btst    #8,d7
(2) 1482/    6AB6 : 6702                		beq.s   .loc_7F0C
(2) 1483/    6AB8 : 4446                		neg.w   d6
(2) 1484/    6ABA :                     .loc_7F0C:
(2) 1485/    6ABA : 3E06                		move.w  d6,d7
(2) 1486/    6ABC : 2C1F                		move.l  (sp)+,d6
(2) 1487/    6ABE : 4E75                		rts
(2) 1488/    6AC0 :                     
(2) 1489/    6AC0 :                     ; ------------------------------------------------
(2) 1490/    6AC0 :                     
(2) 1491/    6AC0 :                     .sine_data:
(2) 1492/    6AC0 :                     		binclude "system/md/data/sine_data.bin"
(2) 1493/    6BC0 :                     		align 2
(2) 1494/    6BC0 :                     
(2) 1495/    6BC0 :                     ; =====================================================================
(2) 1496/    6BC0 :                     ; ------------------------------------------------
(2) 1497/    6BC0 :                     ; Flip output Dotscreen
(2) 1498/    6BC0 :                     ; ------------------------------------------------
(2) 1499/    6BC0 :                     
(2) 1500/    6BC0 :                     CdSub_StampInitStuff:
(2) 1501/    6BC0 : 3C38 7204           		move.w  (RAM_CdSub_StampH).w,d6		; Image V cell size
(2) 1502/    6BC4 : E64E                		lsr.w	#3,d6
(2) 1503/    6BC6 : 5346                		subq.w	#1,d6
(2) 1504/    6BC8 : 31C6 805C           		move.w  d6,($FFFF805C).w
(2) 1505/    6BCC :                     CdSub_StampDefaults:
(2) 1506/    6BCC : 4278 7212           		clr.w	(RAM_CdSub_StampIndxW).w
(2) 1507/    6BD0 : 4278 720C           		clr.w	(RAM_CdSub_StampNextWr).w
(2) 1508/    6BD4 : 4278 720E           		clr.w	(RAM_CdSub_StampNextRd).w
(2) 1509/    6BD8 : 4278 7210           		clr.w	(RAM_CdSub_DotClearFlag).w
(2) 1510/    6BDC : 4278 7208           		clr.w	(RAM_CdSub_StampBusy).w
(2) 1511/    6BE0 : 4278 7200           		clr.w	(RAM_CdSub_StampNum).w
(2) 1512/    6BE4 : 4E75                		rts
(2) 1513/    6BE6 :                     
(2) 1514/    6BE6 :                     ; =====================================================================
(2) 1515/    6BE6 :                     ; ----------------------------------------------------------------
(2) 1516/    6BE6 :                     ; PCM sound streaming engine
(2) 1517/    6BE6 :                     ; ----------------------------------------------------------------
(2) 1518/    6BE6 :                     
(2) 1519/    6BE6 :                     ; --------------------------------------------------------
(2) 1520/    6BE6 :                     ; CdSub_PCM_Wait
(2) 1521/    6BE6 :                     ;
(2) 1522/    6BE6 :                     ; ALL writes to the PCM sound chip need a small delay
(2) 1523/    6BE6 :                     ; to process, call this if you are writing to it
(2) 1524/    6BE6 :                     ; consecutively.
(2) 1525/    6BE6 :                     ; --------------------------------------------------------
(2) 1526/    6BE6 :                     
(2) 1527/    6BE6 :                     CdSub_PCM_Wait:
(2) 1528/    6BE6 : 4E71                		nop
(2) 1529/    6BE8 : 4E71                		nop
(2) 1530/    6BEA : 4E71                		nop
(2) 1531/    6BEC : 4E71                		nop
(2) 1532/    6BEE : 4E71                		nop
(2) 1533/    6BF0 : 4E75                		rts
(2) 1534/    6BF2 :                     
(2) 1535/    6BF2 :                     ; --------------------------------------------------------
(2) 1536/    6BF2 :                     ; CdSub_PCM_Init
(2) 1537/    6BF2 :                     ; --------------------------------------------------------
(2) 1538/    6BF2 :                     
(2) 1539/    6BF2 :                     ; PCM WAVE RAM setup:
(2) 1540/    6BF2 :                     ; $0000-$7FFF | Streaming blocks, $1000 for each channel.
(2) 1541/    6BF2 :                     ; $8000-$803F | Silence loop-block
(2) 1542/    6BF2 :                     ;               for non-looping samples, so if a channel
(2) 1543/    6BF2 :                     ;               finished playing it will be easily detected
(2) 1544/    6BF2 :                     ;               to disable that channel.
(2) 1545/    6BF2 :                     ; $8040-$FFFF | UNUSED
(2) 1546/    6BF2 :                     
(2) 1547/    6BF2 :                     CdSub_PCM_Init:
(2) 1548/    6BF2 : 4DF9 FFFF 0000      		lea	(SCPU_pcm),a6		; a6 - PCM registers
(2) 1549/    6BF8 : 7000                		moveq	#0,d0			; d0 - BLANK byte
(2) 1550/    6BFA : 72FF                		moveq	#-1,d1			; d1 - LOOP byte
(2) 1551/    6BFC : 343C 0080           		move.w	#$80,d2			; d2 - Current BANK
(2) 1552/    6C00 : 7E0F                		moveq	#$0F,d7			; $0000-$7FFF
(2) 1553/    6C02 : 4BEE 2001           		lea	$2001(a6),a5		; a5 - PCM RAM area
(2) 1554/    6C06 :                     .clr_pwm:
(2) 1555/    6C06 : 1D42 000F           		move.b	d2,CTREG(a6)
(2) 1556/    6C0A : 61DA                		bsr	CdSub_PCM_Wait
(2) 1557/    6C0C : 284D                		move.l	a5,a4
(2) 1558/    6C0E : 3C3C 0FF7           		move.w	#$0FF8-1,d6
(2) 1559/    6C12 : 1880                .wr_end:	move.b	d0,(a4)
(2) 1560/    6C14 : 548C                		addq.l	#2,a4
(2) 1561/    6C16 : 51CE FFFA           		dbf	d6,.wr_end
(2) 1562/    6C1A :                     	rept 8
(2) 1563/    6C1A :                     		move.b	d1,(a4)
(2) 1564/    6C1A :                     		addq.l	#2,a4
(2) 1565/    6C1A :                     	endm
(2) 1563/    6C1A : 1881                		move.b	d1,(a4)
(2) 1564/    6C1C : 548C                		addq.l	#2,a4
(2) 1563/    6C1E : 1881                		move.b	d1,(a4)
(2) 1564/    6C20 : 548C                		addq.l	#2,a4
(2) 1563/    6C22 : 1881                		move.b	d1,(a4)
(2) 1564/    6C24 : 548C                		addq.l	#2,a4
(2) 1563/    6C26 : 1881                		move.b	d1,(a4)
(2) 1564/    6C28 : 548C                		addq.l	#2,a4
(2) 1563/    6C2A : 1881                		move.b	d1,(a4)
(2) 1564/    6C2C : 548C                		addq.l	#2,a4
(2) 1563/    6C2E : 1881                		move.b	d1,(a4)
(2) 1564/    6C30 : 548C                		addq.l	#2,a4
(2) 1563/    6C32 : 1881                		move.b	d1,(a4)
(2) 1564/    6C34 : 548C                		addq.l	#2,a4
(2) 1563/    6C36 : 1881                		move.b	d1,(a4)
(2) 1564/    6C38 : 548C                		addq.l	#2,a4
(2) 1566/    6C3A : 5202                		addq.b	#$01,d2
(2) 1567/    6C3C : 51CF FFC8           		dbf	d7,.clr_pwm
(2) 1568/    6C40 : 343C 0088           		move.w	#$88,d2			; Make silence block
(2) 1569/    6C44 : 41FA 001C           		lea	.data_blk(pc),a0
(2) 1570/    6C48 : 1D42 000F           		move.b	d2,CTREG(a6)		; Slot $8000 for pre-silence
(2) 1571/    6C4C : 6198                		bsr	CdSub_PCM_Wait
(2) 1572/    6C4E : 7E3F                		moveq	#(.data_blk_e-.data_blk)-1,d7
(2) 1573/    6C50 :                     .copy_data:
(2) 1574/    6C50 : 1018                		move.b	(a0)+,d0
(2) 1575/    6C52 : 1A80                		move.b	d0,(a5)
(2) 1576/    6C54 : 548D                		addq.l	#2,a5
(2) 1577/    6C56 : 51CF FFF8           		dbf	d7,.copy_data
(2) 1578/    6C5A : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2) 1579/    6C60 : 6084                		bra	CdSub_PCM_Wait
(2) 1580/    6C62 :                     .data_blk:
(2) 1581/    6C62 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C68 : 0000             
(2) 1582/    6C6A : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C70 : 0000             
(2) 1583/    6C72 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C78 : 0000             
(2) 1584/    6C7A : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C80 : 0000             
(2) 1585/    6C82 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C88 : FFFF             
(2) 1586/    6C8A : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C90 : FFFF             
(2) 1587/    6C92 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C98 : FFFF             
(2) 1588/    6C9A : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6CA0 : FFFF             
(2) 1589/    6CA2 :                     .data_blk_e:
(2) 1590/    6CA2 :                     		align 2
(2) 1591/    6CA2 :                     
(2) 1592/    6CA2 :                     ; --------------------------------------------------------
(2) 1593/    6CA2 :                     ; CdSub_PCM_ReadTable
(2) 1594/    6CA2 :                     ; --------------------------------------------------------
(2) 1595/    6CA2 :                     
(2) 1596/    6CA2 :                     CdSub_PCM_ReadTable:
(2) 1597/    6CA2 : 4DF9 0000 79AC      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1598/    6CA8 : 4BF9 0000 7ABC      		lea	(RAM_CdSub_PcmTable).l,a5
(2) 1599/    6CAE : 7E07                		moveq	#8-1,d7			; 8 channels
(2) 1600/    6CB0 : 7C00                		moveq	#0,d6			; Starting channel number
(2) 1601/    6CB2 :                     .get_tbl:
(2) 1602/    6CB2 : 1A15                		move.b	(a5),d5
(2) 1603/    6CB4 : 0885 0002           		bclr	#2,d5			; Key-cut?
(2) 1604/    6CB8 : 6702                		beq.s	.no_keyoff
(2) 1605/    6CBA : 6122                		bsr	.cdcom_keyoff
(2) 1606/    6CBC :                     .no_keyoff:
(2) 1607/    6CBC : 0885 0001           		bclr	#1,d5			; Key-off?
(2) 1608/    6CC0 : 6702                		beq.s	.no_keycut
(2) 1609/    6CC2 : 611A                		bsr	.cdcom_keyoff
(2) 1610/    6CC4 :                     .no_keycut:
(2) 1611/    6CC4 : 0885 0000           		bclr	#0,d5			; Key-on?
(2) 1612/    6CC8 : 6702                		beq.s	.no_comm
(2) 1613/    6CCA : 6118                		bsr	.cdcom_keyon
(2) 1614/    6CCC :                     .no_comm:
(2) 1615/    6CCC : 1A85                		move.b	d5,(a5)
(2) 1616/    6CCE : DCFC 0022           		adda	#cdpcm_len,a6		; Next PCM buffer
(2) 1617/    6CD2 : DAFC 0001           		adda	#1,a5			; Next PCM table column
(2) 1618/    6CD6 : 5246                		addq.w	#1,d6
(2) 1619/    6CD8 : 51CF FFD8           		dbf	d7,.get_tbl
(2) 1620/    6CDC :                     .dont_upd:
(2) 1621/    6CDC : 4E75                		rts
(2) 1622/    6CDE :                     
(2) 1623/    6CDE :                     ; --------------------------------------------------------
(2) 1624/    6CDE :                     ; pcmcom:
(2) 1625/    6CDE :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2) 1626/    6CDE :                     ; 8 - Pitch MSB
(2) 1627/    6CDE :                     ; 16 - Pitch LSB
(2) 1628/    6CDE :                     ; 24 - Volume
(2) 1629/    6CDE :                     ; 32 - Panning %RRRRLLLL
(2) 1630/    6CDE :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2) 1631/    6CDE :                     ; 48
(2) 1632/    6CDE :                     ; 56
(2) 1633/    6CDE :                     
(2) 1634/    6CDE :                     .cdcom_keyoff:
(2) 1635/    6CDE : 103C 0004           		move.b	#%0100,d0
(2) 1636/    6CE2 : 6062                		bra.s	.wrt_flags
(2) 1637/    6CE4 :                     
(2) 1638/    6CE4 :                     ; a0 - table data
(2) 1639/    6CE4 :                     ; a1 - buffer
(2) 1640/    6CE4 :                     .cdcom_keyon:
(2) 1641/    6CE4 : 0885 0003           		bclr	#3,d5			; Effect update ONLY?
(2) 1642/    6CE8 : 6666                		bne	.effect_only
(2) 1643/    6CEA : 61F2                		bsr.s	.cdcom_keyoff
(2) 1644/    6CEC : 6168                		bsr.s	.effect_mod
(2) 1645/    6CEE : 7000                		moveq	#0,d0
(2) 1646/    6CF0 : 1010                		move.b	(a0),d0		; 40
(2) 1647/    6CF2 : 1600                		move.b	d0,d3
(2) 1648/    6CF4 : D0FC 0008           		adda	#8,a0
(2) 1649/    6CF8 : 0240 007F           		andi.w	#$7F,d0
(2) 1650/    6CFC : 4840                		swap	d0
(2) 1651/    6CFE : 1010                		move.b	(a0),d0		; 48
(2) 1652/    6D00 : D0FC 0008           		adda	#8,a0
(2) 1653/    6D04 : E148                		lsl.w	#8,d0
(2) 1654/    6D06 : 1010                		move.b	(a0),d0		; 56
(2) 1655/    6D08 : 2440                		move.l	d0,a2
(2) 1656/    6D0A : 7000                		moveq	#0,d0
(2) 1657/    6D0C : 7200                		moveq	#0,d1			; Read LEN
(2) 1658/    6D0E : 101A                		move.b	(a2)+,d0
(2) 1659/    6D10 : E158                		rol.w	#8,d0
(2) 1660/    6D12 : 101A                		move.b	(a2)+,d0
(2) 1661/    6D14 : E058                		ror.w	#8,d0
(2) 1662/    6D16 : 121A                		move.b	(a2)+,d1
(2) 1663/    6D18 : 4841                		swap	d1
(2) 1664/    6D1A : 8081                		or.l	d1,d0
(2) 1665/    6D1C : 2D40 000C           		move.l	d0,cdpcm_length(a6)
(2) 1666/    6D20 : 7200                		moveq	#0,d1
(2) 1667/    6D22 : 7000                		moveq	#0,d0
(2) 1668/    6D24 : 101A                		move.b	(a2)+,d0
(2) 1669/    6D26 : E158                		rol.w	#8,d0
(2) 1670/    6D28 : 101A                		move.b	(a2)+,d0
(2) 1671/    6D2A : E058                		ror.w	#8,d0
(2) 1672/    6D2C : 121A                		move.b	(a2)+,d1
(2) 1673/    6D2E : 4841                		swap	d1
(2) 1674/    6D30 : 8081                		or.l	d1,d0
(2) 1675/    6D32 : 2D40 0010           		move.l	d0,cdpcm_loop(a6)
(2) 1676/    6D36 : 2D4A 0004           		move.l	a2,cdpcm_start(a6)
(2) 1677/    6D3A : E31B                		rol.b	#1,d3
(2) 1678/    6D3C : 0203 0001           		andi.b	#1,d3
(2) 1679/    6D40 : 1C83                		move.b	d3,cdpcm_status(a6)
(2) 1680/    6D42 : 103C 0001           		move.b	#%0001,d0
(2) 1681/    6D46 :                     .wrt_flags:
(2) 1682/    6D46 : 803C 0080           		or.b	#$80,d0
(2) 1683/    6D4A : 1D40 0001           		move.b	d0,cdpcm_flags(a6)
(2) 1684/    6D4E : 4E75                		rts
(2) 1685/    6D50 :                     
(2) 1686/    6D50 :                     .effect_only:
(2) 1687/    6D50 : 103C 0008           		move.b	#%1000,d0
(2) 1688/    6D54 : 61F0                		bsr	.wrt_flags
(2) 1689/    6D56 :                     .effect_mod:
(2) 1690/    6D56 : 204D                		move.l	a5,a0
(2) 1691/    6D58 : D0FC 0008           		adda	#8,a0
(2) 1692/    6D5C : 1010                		move.b	(a0),d0		; 8 - Pitch MSB
(2) 1693/    6D5E : D0FC 0008           		adda	#8,a0
(2) 1694/    6D62 : E148                		lsl.w	#8,d0
(2) 1695/    6D64 : 1010                		move.b	(a0),d0		; 16 - Pitch LSB
(2) 1696/    6D66 : D0FC 0008           		adda	#8,a0
(2) 1697/    6D6A : 1210                		move.b	(a0),d1		; 24 - Volume
(2) 1698/    6D6C : D0FC 0008           		adda	#8,a0
(2) 1699/    6D70 : 1410                		move.b	(a0),d2		; 32 - Panning
(2) 1700/    6D72 : D0FC 0008           		adda	#8,a0
(2) 1701/    6D76 : 3D40 001C           		move.w	d0,cdpcm_pitch(a6)
(2) 1702/    6D7A : 1D41 0021           		move.b	d1,cdpcm_env(a6)
(2) 1703/    6D7E : 1D42 0020           		move.b	d2,cdpcm_pan(a6)
(2) 1704/    6D82 : 4E75                		rts
(2) 1705/    6D84 :                     
(2) 1706/    6D84 :                     ; ====================================================================
(2) 1707/    6D84 :                     ; --------------------------------------------------------
(2) 1708/    6D84 :                     ; CdSub_PCM_Process
(2) 1709/    6D84 :                     ;
(2) 1710/    6D84 :                     ; This is the heart of the PCM "streaming" system,
(2) 1711/    6D84 :                     ; this needs to be called manually on every situation.
(2) 1712/    6D84 :                     ;
(2) 1713/    6D84 :                     ; This uses ALL registers, if you are in the middle
(2) 1714/    6D84 :                     ; of a subroutine save and restore your routine's
(2) 1715/    6D84 :                     ; registers before and after calling this.
(2) 1716/    6D84 :                     ;
(2) 1717/    6D84 :                     ; Breaks:
(2) 1718/    6D84 :                     ; ALL
(2) 1719/    6D84 :                     ; --------------------------------------------------------
(2) 1720/    6D84 :                     
(2) 1721/    6D84 :                     ; ----------------------------------------
(2) 1722/    6D84 :                     ; Main call
(2) 1723/    6D84 :                     ; ----------------------------------------
(2) 1724/    6D84 :                     
(2) 1725/    6D84 :                     CdSub_PCM_Process:
(2) 1726/    6D84 : 6100 FF1C           		bsr	CdSub_PCM_ReadTable		; Update PCM channels
(2) 1727/    6D88 : 6100 0084           		bsr	CdSub_PCM_Stream
(2) 1728/    6D8C : 4A38 7219           		tst.b	(RAM_CdSub_PcmReqUpd).w		; IRQ check
(2) 1729/    6D90 : 6708                		beq.s	.no_req
(2) 1730/    6D92 : 6108                		bsr	.get_table
(2) 1731/    6D94 : 4238 7219           		clr.b	(RAM_CdSub_PcmReqUpd).w
(2) 1732/    6D98 : 60EA                		bra	CdSub_PCM_Process
(2) 1733/    6D9A :                     .no_req:
(2) 1734/    6D9A : 4E75                		rts
(2) 1735/    6D9C :                     
(2) 1736/    6D9C :                     ; --------------------------------------------------------
(2) 1737/    6D9C :                     ; Grab data from Z80
(2) 1738/    6D9C :                     ; --------------------------------------------------------
(2) 1739/    6D9C :                     
(2) 1740/    6D9C :                     .get_table:
(2) 1741/    6D9C : 43F9 0000 7ABC      		lea	(RAM_CdSub_PcmTable).l,a1		; a1 - PCM Table output
(2) 1742/    6DA2 : 45F8 8018           		lea	(SCPU_reg+mcd_dcomm_m+8).w,a2		; a2 - Data input
(2) 1743/    6DA6 :                     .trnsfr_mode:
(2) 1744/    6DA6 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0		; Tell Z80 we are here.
(2) 1745/    6DAA : 0240 000F           		andi.w	#%00001111,d0				; Flag $Cx
(2) 1746/    6DAE : 803C 00C0           		or.b	#%11000000,d0
(2) 1747/    6DB2 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1748/    6DB6 :                     .wait_start:
(2) 1749/    6DB6 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Z80 lock bit set?
(2) 1750/    6DBA : 0800 0005           		btst	#5,d0
(2) 1751/    6DBE : 67F6                		beq.s	.wait_start
(2) 1752/    6DC0 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1753/    6DC4 : 0240 00C0           		andi.w	#%11000000,d0
(2) 1754/    6DC8 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1755/    6DCC :                     .next_packet:
(2) 1756/    6DCC : 1039 FFFF 800E      		move.b	(SCPU_reg+mcd_comm_m).l,d0		; Read MAIN comm.
(2) 1757/    6DD2 : 0800 0005           		btst	#5,d0					; Still LOCKed?
(2) 1758/    6DD6 : 6728                		beq.s	.exit_now				; If not, finish.
(2) 1759/    6DD8 : 0800 0004           		btst	#4,d0					; PASS bit set?
(2) 1760/    6DDC : 67EE                		beq.s	.next_packet
(2) 1761/    6DDE : 204A                		move.l	a2,a0
(2) 1762/    6DE0 :                     	rept $08/2
(2) 1763/    6DE0 :                     		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1764/    6DE0 :                     	endm
(2) 1763/    6DE0 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE2 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE4 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE6 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1765/    6DE8 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2) 1766/    6DEE :                     .wait_main:
(2) 1767/    6DEE : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; PASS bit cleared?
(2) 1768/    6DF2 : 0800 0004           		btst	#4,d0
(2) 1769/    6DF6 : 66F6                		bne.s	.wait_main
(2) 1770/    6DF8 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2) 1771/    6DFE : 60CC                		bra	.next_packet
(2) 1772/    6E00 :                     .exit_now:
(2) 1773/    6E00 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1774/    6E04 : 0240 000F           		andi.w	#%00001111,d0
(2) 1775/    6E08 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1776/    6E0C :                     .not_now:
(2) 1777/    6E0C : 4E75                		rts
(2) 1778/    6E0E :                     
(2) 1779/    6E0E :                     ; --------------------------------------------------------
(2) 1780/    6E0E :                     ; Stream the sample data
(2) 1781/    6E0E :                     ; --------------------------------------------------------
(2) 1782/    6E0E :                     
(2) 1783/    6E0E :                     CdSub_PCM_Stream:
(2) 1784/    6E0E : 4DF9 0000 79AC      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1785/    6E14 : 4BF9 FFFF 0000      		lea	(SCPU_pcm),a5
(2) 1786/    6E1A : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2) 1787/    6E1E : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2) 1788/    6E20 : 7C00                		moveq	#0,d6				; d6 - Current channel (also for BTST/BSET/BCLR)
(2) 1789/    6E22 : 1A38 7218           		move.b	(RAM_CdSub_PcmEnbl).w,d5	; d5 - Global OFF/ON bits
(2) 1790/    6E26 : 4645                		not.w	d5				; invert the bits
(2) 1791/    6E28 :                     .get_addr:
(2) 1792/    6E28 : 102E 0001           		move.b	cdpcm_flags(a6),d0
(2) 1793/    6E2C : 6A34                		bpl.s	.non_upd
(2) 1794/    6E2E : 422E 0001           		clr.b	cdpcm_flags(a6)
(2) 1795/    6E32 : 0800 0003           		btst	#3,d0
(2) 1796/    6E36 : 6626                		bne.s	.keep_strm
(2) 1797/    6E38 : 0800 0002           		btst	#2,d0
(2) 1798/    6E3C : 662E                		bne.s	.force_off
(2) 1799/    6E3E : 0800 0001           		btst	#1,d0
(2) 1800/    6E42 : 6628                		bne.s	.force_off
(2) 1801/    6E44 : 0800 0000           		btst	#0,d0
(2) 1802/    6E48 : 6718                		beq.s	.non_upd
(2) 1803/    6E4A : 617C                		bsr	.stop_pcm
(2) 1804/    6E4C : 6100 0150           		bsr	.first_fill			; Do first fill
(2) 1805/    6E50 : 0D85                		bclr	d6,d5
(2) 1806/    6E52 : 1B45 0011           		move.b	d5,ONREG(a5)			; Enable channel
(2) 1807/    6E56 : 6100 FD8E           		bsr	CdSub_PCM_Wait
(2) 1808/    6E5A : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1809/    6E5E :                     .keep_strm:
(2) 1810/    6E5E : 6100 0102           		bsr	.update_set
(2) 1811/    6E62 :                     
(2) 1812/    6E62 :                     .non_upd:
(2) 1813/    6E62 : 0816 0007           		btst	#7,cdpcm_status(a6)		; Channel slot is active?
(2) 1814/    6E66 : 674A                		beq.s	.non_strm
(2) 1815/    6E68 : 1614                		move.b	(a4),d3				; Get playback MSB
(2) 1816/    6E6A : 6A06                		bpl.s	.not_float			; If negative $80 (Silence block)
(2) 1817/    6E6C :                     .force_off:
(2) 1818/    6E6C : 615A                		bsr	.stop_pcm
(2) 1819/    6E6E : 4216                		clr.b	cdpcm_status(a6)		; Reset flags
(2) 1820/    6E70 : 6040                		bra.s	.non_strm
(2) 1821/    6E72 :                     .not_float:
(2) 1822/    6E72 : 0816 0006           		btst	#6,cdpcm_status(a6)
(2) 1823/    6E76 : 673A                		beq.s	.non_strm
(2) 1824/    6E78 : 182E 0003           		move.b	cdpcm_strmhalf(a6),d4		; Check current block MSB
(2) 1825/    6E7C : 0203 000E           		andi.b	#$0E,d3				; in blocks of $0200 bytes.
(2) 1826/    6E80 : B604                		cmp.b	d4,d3
(2) 1827/    6E82 : 662E                		bne.s	.non_strm
(2) 1828/    6E84 : 3803                		move.w	d3,d4
(2) 1829/    6E86 : 5444                		addq.w	#$02,d4
(2) 1830/    6E88 : 0244 000E           		andi.w	#$0E,d4				; d4 - Next block slot
(2) 1831/    6E8C : 1D44 0003           		move.b	d4,cdpcm_strmhalf(a6)
(2) 1832/    6E90 : 206E 0018           		move.l	cdpcm_cread(a6),a0		; a0 - Current Wave data to read
(2) 1833/    6E94 : 222E 0014           		move.l	cdpcm_clen(a6),d1		; d1 - Current wave size
(2) 1834/    6E98 : E14C                		lsl.w	#8,d4				; Slot << 8
(2) 1835/    6E9A : 263C 0000 0200      		move.l	#$0200,d3			; d3 - Block size
(2) 1836/    6EA0 : B87C 0E00           		cmp.w	#$0E00,d4			; Is this the looping block?
(2) 1837/    6EA4 : 6602                		bne.s	.lowhalf
(2) 1838/    6EA6 : 5183                		subq.l	#8,d3				; Size-4 to skip the loop bytes.
(2) 1839/    6EA8 :                     .lowhalf:
(2) 1840/    6EA8 : 6126                		bsr	.make_blk_strm
(2) 1841/    6EAA : 2D41 0014           		move.l	d1,cdpcm_clen(a6)		; Save next wave size
(2) 1842/    6EAE : 2D48 0018           		move.l	a0,cdpcm_cread(a6)		; Save next wave pos
(2) 1843/    6EB2 :                     .non_strm:
(2) 1844/    6EB2 : DCFC 0022           		adda	#cdpcm_len,a6			; Next PCM slot
(2) 1845/    6EB6 : D8FC 0004           		adda	#4,a4				; Next MSB to check
(2) 1846/    6EBA : 5246                		addq.w	#1,d6				; Next PCM Channel number
(2) 1847/    6EBC : 51CF FF6A           		dbf	d7,.get_addr
(2) 1848/    6EC0 : 4645                		not.w	d5				; Reverse return bits
(2) 1849/    6EC2 : 11C5 7218           		move.b	d5,(RAM_CdSub_PcmEnbl).w
(2) 1850/    6EC6 : 4E75                		rts
(2) 1851/    6EC8 :                     
(2) 1852/    6EC8 :                     ; --------------------------------------------------------
(2) 1853/    6EC8 :                     
(2) 1854/    6EC8 :                     .stop_pcm:
(2) 1855/    6EC8 : 0DC5                		bset	d6,d5
(2) 1856/    6ECA : 1B45 0011           		move.b	d5,ONREG(a5)
(2) 1857/    6ECE : 4E75                		rts
(2) 1858/    6ED0 :                     
(2) 1859/    6ED0 :                     ; --------------------------------------------------------
(2) 1860/    6ED0 :                     ; a0 - wave data to write
(2) 1861/    6ED0 :                     ; d1 - channel current length
(2) 1862/    6ED0 :                     ; d3 - block size
(2) 1863/    6ED0 :                     ; d4 - current block slot to write
(2) 1864/    6ED0 :                     ; d6 - current channel
(2) 1865/    6ED0 :                     
(2) 1866/    6ED0 :                     .make_blk_strm:
(2) 1867/    6ED0 : 4A6E 001E           		tst.w	cdpcm_cblock(a6)
(2) 1868/    6ED4 : 6704                		beq.s	.ran_out
(2) 1869/    6ED6 : 536E 001E           		subq.w	#1,cdpcm_cblock(a6)
(2) 1870/    6EDA :                     .ran_out:
(2) 1871/    6EDA : 1006                		move.b	d6,d0			; Set PCM memory mode on this channel
(2) 1872/    6EDC : 803C 0080           		or.b	#$80,d0
(2) 1873/    6EE0 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1874/    6EE4 :                     ; 		bsr	CdSub_PCM_Wait
(2) 1875/    6EE4 : 43ED 2001           		lea	$2001(a5),a1		; a1 - WAVE RAM output
(2) 1876/    6EE8 : D844                		add.w	d4,d4
(2) 1877/    6EEA : D2C4                		adda	d4,a1			; pos + current block
(2) 1878/    6EEC : 3803                		move.w	d3,d4			; d4 - block size - 1
(2) 1879/    6EEE : 5344                		subq.w	#1,d4
(2) 1880/    6EF0 : 0816 0000           		btst	#0,cdpcm_status(a6)	; Looping enabled?
(2) 1881/    6EF4 : 6728                		beq	.end_point
(2) 1882/    6EF6 :                     
(2) 1883/    6EF6 :                     ; ----------------------------------------
(2) 1884/    6EF6 :                     ; Wave has loop
(2) 1885/    6EF6 :                     ; ----------------------------------------
(2) 1886/    6EF6 :                     
(2) 1887/    6EF6 :                     .loop_point:
(2) 1888/    6EF6 : 246E 0004           		movea.l	cdpcm_start(a6),a2	; a2 - WAVE start
(2) 1889/    6EFA : 202E 0010           		move.l	cdpcm_loop(a6),d0	; d0 - Loop start point
(2) 1890/    6EFE : D5C0                		add.l	d0,a2
(2) 1891/    6F00 : 242E 000C           		move.l	cdpcm_length(a6),d2	; d2 - NEW length to set
(2) 1892/    6F04 : 9480                		sub.l	d0,d2
(2) 1893/    6F06 :                     .loop_strm:
(2) 1894/    6F06 : 5381                		subq.l	#1,d1			; Count current len
(2) 1895/    6F08 : 6604                		bne.s	.strlen_it
(2) 1896/    6F0A : 204A                		move.l	a2,a0			; Reset WAVE reading pos
(2) 1897/    6F0C : 2202                		move.l	d2,d1			; Reset current length
(2) 1898/    6F0E :                     .strlen_it:
(2) 1899/    6F0E : 1018                		move.b	(a0)+,d0		; Write wave data and
(2) 1900/    6F10 : 6100 01C8           		bsr	CdSub_PCM_WavToPcm	; auto-convert
(2) 1901/    6F14 : 1280                		move.b	d0,(a1)
(2) 1902/    6F16 :                     ; 		bsr	CdSub_PCM_Wait
(2) 1903/    6F16 : 5489                		addq.l	#2,a1
(2) 1904/    6F18 : 51CC FFEC           		dbf	d4,.loop_strm
(2) 1905/    6F1C : 4E75                		rts
(2) 1906/    6F1E :                     
(2) 1907/    6F1E :                     ; ----------------------------------------
(2) 1908/    6F1E :                     ; Wave doesn't loop
(2) 1909/    6F1E :                     ; ----------------------------------------
(2) 1910/    6F1E :                     
(2) 1911/    6F1E :                     .end_point:
(2) 1912/    6F1E : 5381                		subq.l	#1,d1			; Count current lenght
(2) 1913/    6F20 : 6A30                		bpl.s	.last_smpl
(2) 1914/    6F22 : 70FF                		moveq	#-1,d0			; Write loop byte
(2) 1915/    6F24 : 7810                		moveq	#$10,d4
(2) 1916/    6F26 :                     .set_lmark:
(2) 1917/    6F26 : 1280                		move.b	d0,(a1)
(2) 1918/    6F28 : 5489                		addq.l	#2,a1
(2) 1919/    6F2A : 51CC FFFA           		dbf	d4,.set_lmark
(2) 1920/    6F2E : 1006                		move.b	d6,d0			; Set PCM to control mode.
(2) 1921/    6F30 : 803C 00C0           		or.b	#$C0,d0
(2) 1922/    6F34 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1923/    6F38 : 6100 FCAC           		bsr	CdSub_PCM_Wait
(2) 1924/    6F3C : 303C 8000           		move.w	#$8000,d0		; Redirect loop point to
(2) 1925/    6F40 : 1B40 0009           		move.b	d0,LSL(a5)		; the silence block.
(2) 1926/    6F44 : 6100 FCA0           		bsr	CdSub_PCM_Wait
(2) 1927/    6F48 : E048                		lsr.w	#8,d0
(2) 1928/    6F4A : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1929/    6F4E : 6000 FC96           		bra	CdSub_PCM_Wait
(2) 1930/    6F52 :                     .last_smpl:
(2) 1931/    6F52 : 1018                		move.b	(a0)+,d0		; If wave data remain, write it.
(2) 1932/    6F54 : 6100 0184           		bsr	CdSub_PCM_WavToPcm
(2) 1933/    6F58 :                     .stlen_it:
(2) 1934/    6F58 : 1280                		move.b	d0,(a1)
(2) 1935/    6F5A :                     ; 		bsr	CdSub_PCM_Wait
(2) 1936/    6F5A : 5489                		addq.l	#2,a1
(2) 1937/    6F5C : 51CC FFC0           		dbf	d4,.end_point
(2) 1938/    6F60 : 4E75                		rts
(2) 1939/    6F62 :                     
(2) 1940/    6F62 :                     ; --------------------------------------------------------
(2) 1941/    6F62 :                     ; Channel changes
(2) 1942/    6F62 :                     ; --------------------------------------------------------
(2) 1943/    6F62 :                     
(2) 1944/    6F62 :                     .update_set:
(2) 1945/    6F62 : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1946/    6F64 : 803C 00C0           		or.b	#$C0,d0
(2) 1947/    6F68 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1948/    6F6C : 6100 FC78           		bsr	CdSub_PCM_Wait
(2) 1949/    6F70 : 102E 0020           		move.b	cdpcm_pan(a6),d0	; Panning
(2) 1950/    6F74 : 1B40 0003           		move.b	d0,PAN(a5)
(2) 1951/    6F78 : 6100 FC6C           		bsr	CdSub_PCM_Wait
(2) 1952/    6F7C : 102E 0021           		move.b	cdpcm_env(a6),d0	; Envelope
(2) 1953/    6F80 : 1B40 0001           		move.b	d0,ENV(a5)
(2) 1954/    6F84 : 6100 FC60           		bsr	CdSub_PCM_Wait
(2) 1955/    6F88 : 302E 001C           		move.w	cdpcm_pitch(a6),d0	; Write frequency
(2) 1956/    6F8C : 1B40 0005           		move.b	d0,FDL(a5)
(2) 1957/    6F90 : 6100 FC54           		bsr	CdSub_PCM_Wait
(2) 1958/    6F94 : E048                		lsr.w	#8,d0
(2) 1959/    6F96 : 1B40 0007           		move.b	d0,FDH(a5)
(2) 1960/    6F9A : 6000 FC4A           		bra	CdSub_PCM_Wait
(2) 1961/    6F9E :                     
(2) 1962/    6F9E :                     ; --------------------------------------------------------
(2) 1963/    6F9E :                     ; First fill
(2) 1964/    6F9E :                     ; --------------------------------------------------------
(2) 1965/    6F9E :                     
(2) 1966/    6F9E :                     .first_fill:
(2) 1967/    6F9E : 202E 0004           		move.l	cdpcm_start(a6),d0
(2) 1968/    6FA2 : 222E 000C           		move.l	cdpcm_length(a6),d1
(2) 1969/    6FA6 :                     ; 		move.l	cdpcm_slast(a6),d2
(2) 1970/    6FA6 :                     ; 		beq.s	.diff_sample
(2) 1971/    6FA6 :                     ; 		cmp.l	d2,d0
(2) 1972/    6FA6 :                     ; 		bne.s	.diff_sample
(2) 1973/    6FA6 :                     ; 		cmp.l	#(($200)*4)-8,cdpcm_length(a6)
(2) 1974/    6FA6 :                     ; 		bcc.s	.diff_sample
(2) 1975/    6FA6 :                     ; 		move.w	cdpcm_cblock(a6),d2
(2) 1976/    6FA6 :                     ; 		beq.s	.diff_sample
(2) 1977/    6FA6 :                     ; 		move.l	#$200,d2
(2) 1978/    6FA6 :                     ; 		add.l	d2,d0
(2) 1979/    6FA6 :                     ; 		add.l	d2,d1
(2) 1980/    6FA6 :                     ; 		move.l	d0,a0
(2) 1981/    6FA6 :                     ; 		bra	.small_sampl
(2) 1982/    6FA6 :                     ; .diff_sample:
(2) 1983/    6FA6 :                     ; 		move.w	#4,cdpcm_cblock(a6)		; <-- 4 BLOCKS
(2) 1984/    6FA6 : 2D6E 0004 0008      		move.l	cdpcm_start(a6),cdpcm_slast(a6)
(2) 1985/    6FAC : 2040                		move.l	d0,a0
(2) 1986/    6FAE : 6162                		bsr	.make_lblk
(2) 1987/    6FB0 :                     .fake_fill:
(2) 1988/    6FB0 : 2D48 0018           		move.l	a0,cdpcm_cread(a6)		; Return starint read points.
(2) 1989/    6FB4 : 2D41 0014           		move.l	d1,cdpcm_clen(a6)
(2) 1990/    6FB8 : 1D7C 0000 0003      		move.b	#0,cdpcm_strmhalf(a6)
(2) 1991/    6FBE : 61A2                		bsr	.update_set			; Do first Pitch/Vol/Panning
(2) 1992/    6FC0 : 7000                		moveq	#0,d0
(2) 1993/    6FC2 : 1006                		move.b	d6,d0				; $000x
(2) 1994/    6FC4 : E948                		lsl.w	#4,d0				; $00x0
(2) 1995/    6FC6 : 1B40 000D           		move.b	d0,ST(a5)			; Set starting MSB
(2) 1996/    6FCA : 6100 FC1A           		bsr	CdSub_PCM_Wait
(2) 1997/    6FCE : E148                		lsl.w	#8,d0				; $x000
(2) 1998/    6FD0 : 4A81                		tst.l	d1
(2) 1999/    6FD2 : 6708                		beq.s	.small_sampl
(2) 2000/    6FD4 : 6B06                		bmi.s	.small_sampl
(2) 2001/    6FD6 : 08D6 0006           		bset	#6,cdpcm_status(a6)
(2) 2002/    6FDA : 6012                		bra.s	.set_nonstop
(2) 2003/    6FDC :                     
(2) 2004/    6FDC :                     ; --------------------------------------------------------
(2) 2005/    6FDC :                     ; If sample is small
(2) 2006/    6FDC :                     
(2) 2007/    6FDC :                     .small_sampl:
(2) 2008/    6FDC : 0896 0006           		bclr	#6,cdpcm_status(a6)
(2) 2009/    6FE0 : 0816 0000           		btst	#0,cdpcm_status(a6)
(2) 2010/    6FE4 : 6702                		beq.s	.set_endloop
(2) 2011/    6FE6 : 6012                		bra.s	.set_looppnt
(2) 2012/    6FE8 :                     .set_endloop:
(2) 2013/    6FE8 : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2) 2014/    6FEC : 6012                		bra.s	.set_mkloop
(2) 2015/    6FEE :                     .set_nonstop:
(2) 2016/    6FEE : 262E 000C           		move.l	cdpcm_length(a6),d3
(2) 2017/    6FF2 : B6BC 0000 1000      		cmp.l	#$1000,d3
(2) 2018/    6FF8 : 6406                		bcc.s	.set_mkloop
(2) 2019/    6FFA :                     .set_looppnt:
(2) 2020/    6FFA : 262E 0010           		move.l	cdpcm_loop(a6),d3
(2) 2021/    6FFE : D083                		add.l	d3,d0			; Our block + this loop
(2) 2022/    7000 :                     .set_mkloop:
(2) 2023/    7000 : 1B40 0009           		move.b	d0,LSL(a5)
(2) 2024/    7004 : 6100 FBE0           		bsr	CdSub_PCM_Wait
(2) 2025/    7008 : E048                		lsr.w	#8,d0
(2) 2026/    700A : 1B40 000B           		move.b	d0,LSH(a5)
(2) 2027/    700E : 6000 FBD6           		bra	CdSub_PCM_Wait
(2) 2028/    7012 :                     
(2) 2029/    7012 :                     ; --------------------------------------------------------
(2) 2030/    7012 :                     ; a0 - Wave data
(2) 2031/    7012 :                     ; a1 - Output to memory (set with CTREG first)
(2) 2032/    7012 :                     ; d1 - Wave length counter
(2) 2033/    7012 :                     ; d6 - current channel
(2) 2034/    7012 :                     
(2) 2035/    7012 :                     .make_lblk:
(2) 2036/    7012 : 1006                		move.b	d6,d0			; Set PCM to memory mode
(2) 2037/    7014 : 803C 0080           		or.b	#$80,d0
(2) 2038/    7018 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 2039/    701C :                     ; 		bsr	CdSub_PCM_Wait
(2) 2040/    701C : 43ED 2001           		lea	$2001(a5),a1		; a1 - WAVE RAM port
(2) 2041/    7020 : 363C 0200           		move.w	#$200,d3		; d3 - Block size
(2) 2042/    7024 : E64B                		lsr.w	#3,d3			; size / 4
(2) 2043/    7026 : 5343                		subq.w	#1,d3
(2) 2044/    7028 :                     .wave_blkl:
(2) 2045/    7028 : 4A81                		tst.l	d1
(2) 2046/    702A : 6B7C                		bmi.s	.fill_blank
(2) 2047/    702C :                     	rept 8
(2) 2048/    702C :                     		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    702C :                     		subq.l	#1,d1			; Lenght counter
(2) 2050/    702C :                     		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    702C :                     		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    702C :                     		bsr	CdSub_PCM_WavToPcm
(2) 2053/    702C :                     .len_it:
(2) 2054/    702C :                     		move.b	d0,(a1)
(2) 2055/    702C :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    702C :                     		addq.l	#2,a1
(2) 2057/    702C :                     	endm
(2) 2048/    702C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    702E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7030 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7032 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7034 : 6100 00A4           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7038 :                     .len_it:
(2) 2054/    7038 : 1280                		move.b	d0,(a1)
(2) 2055/    703A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    703A : 5489                		addq.l	#2,a1
(2) 2048/    703C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    703E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7040 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7042 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7044 : 6100 0094           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7048 :                     .len_it:
(2) 2054/    7048 : 1280                		move.b	d0,(a1)
(2) 2055/    704A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    704A : 5489                		addq.l	#2,a1
(2) 2048/    704C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    704E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7050 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7052 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7054 : 6100 0084           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7058 :                     .len_it:
(2) 2054/    7058 : 1280                		move.b	d0,(a1)
(2) 2055/    705A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    705A : 5489                		addq.l	#2,a1
(2) 2048/    705C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    705E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7060 : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7062 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7064 : 6174                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7066 :                     .len_it:
(2) 2054/    7066 : 1280                		move.b	d0,(a1)
(2) 2055/    7068 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7068 : 5489                		addq.l	#2,a1
(2) 2048/    706A : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    706C : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    706E : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7070 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7072 : 6166                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7074 :                     .len_it:
(2) 2054/    7074 : 1280                		move.b	d0,(a1)
(2) 2055/    7076 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7076 : 5489                		addq.l	#2,a1
(2) 2048/    7078 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    707A : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    707C : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    707E : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7080 : 6158                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7082 :                     .len_it:
(2) 2054/    7082 : 1280                		move.b	d0,(a1)
(2) 2055/    7084 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7084 : 5489                		addq.l	#2,a1
(2) 2048/    7086 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    7088 : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    708A : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    708C : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    708E : 614A                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7090 :                     .len_it:
(2) 2054/    7090 : 1280                		move.b	d0,(a1)
(2) 2055/    7092 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7092 : 5489                		addq.l	#2,a1
(2) 2048/    7094 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    7096 : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7098 : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    709A : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    709C : 613C                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    709E :                     .len_it:
(2) 2054/    709E : 1280                		move.b	d0,(a1)
(2) 2055/    70A0 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    70A0 : 5489                		addq.l	#2,a1
(2) 2058/    70A2 : 51CB FF84           		dbf	d3,.wave_blkl
(2) 2059/    70A6 : 4E75                		rts
(2) 2060/    70A8 :                     ; ----------------------------------------
(2) 2061/    70A8 :                     ; Fill unused block
(2) 2062/    70A8 :                     .fill_blank:
(2) 2063/    70A8 : 70FF                		moveq	#-1,d0
(2) 2064/    70AA : B67C 0003           		cmp.w	#4-1,d3
(2) 2065/    70AE : 6D04                		blt.s	.loop_blkl
(2) 2066/    70B0 : 363C 0003           		move.w	#4-1,d3
(2) 2067/    70B4 :                     .loop_blkl:
(2) 2068/    70B4 :                     	rept 8
(2) 2069/    70B4 :                     		move.b	d0,(a1)
(2) 2070/    70B4 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70B4 :                     		addq.l	#2,a1
(2) 2072/    70B4 :                     	endm
(2) 2069/    70B4 : 1280                		move.b	d0,(a1)
(2) 2070/    70B6 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70B6 : 5489                		addq.l	#2,a1
(2) 2069/    70B8 : 1280                		move.b	d0,(a1)
(2) 2070/    70BA :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70BA : 5489                		addq.l	#2,a1
(2) 2069/    70BC : 1280                		move.b	d0,(a1)
(2) 2070/    70BE :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70BE : 5489                		addq.l	#2,a1
(2) 2069/    70C0 : 1280                		move.b	d0,(a1)
(2) 2070/    70C2 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70C2 : 5489                		addq.l	#2,a1
(2) 2069/    70C4 : 1280                		move.b	d0,(a1)
(2) 2070/    70C6 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70C6 : 5489                		addq.l	#2,a1
(2) 2069/    70C8 : 1280                		move.b	d0,(a1)
(2) 2070/    70CA :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70CA : 5489                		addq.l	#2,a1
(2) 2069/    70CC : 1280                		move.b	d0,(a1)
(2) 2070/    70CE :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70CE : 5489                		addq.l	#2,a1
(2) 2069/    70D0 : 1280                		move.b	d0,(a1)
(2) 2070/    70D2 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70D2 : 5489                		addq.l	#2,a1
(2) 2073/    70D4 : 51CB FFDE           		dbf	d3,.loop_blkl
(2) 2074/    70D8 : 4E75                		rts
(2) 2075/    70DA :                     
(2) 2076/    70DA :                     ; =====================================================================
(2) 2077/    70DA :                     ; ----------------------------------------------------------------
(2) 2078/    70DA :                     ; WAV to PCM table conversion
(2) 2079/    70DA :                     ; ----------------------------------------------------------------
(2) 2080/    70DA :                     
(2) 2081/    70DA :                     CdSub_PCM_WavToPcm:
(2) 2082/    70DA : 0240 00FF           		andi.w	#$FF,d0
(2) 2083/    70DE : 103B 0004           		move.b	.wave_list(pc,d0.w),d0
(2) 2084/    70E2 : 4E75                		rts
(2) 2085/    70E4 :                     ; --------------------------------------------------------
(2) 2086/    70E4 :                     .wave_list:
(2) 2087/    70E4 : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             70EA : F9F8 F7F6 F5F4 
             70F0 : F3F2 F1F0          
(2) 2088/    70F4 : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             70FA : E9E8 E7E6 E5E4 
             7100 : E3E2 E1E0          
(2) 2089/    7104 : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             710A : D9D8 D7D6 D5D4 
             7110 : D3D2 D1D0          
(2) 2090/    7114 : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             711A : C9C8 C7C6 C5C4 
             7120 : C3C2 C1C0          
(2) 2091/    7124 : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             712A : B9B8 B7B6 B5B4 
             7130 : B3B2 B1B0          
(2) 2092/    7134 : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             713A : A9A8 A7A6 A5A4 
             7140 : A3A2 A1A0          
(2) 2093/    7144 : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             714A : 9998 9796 9594 
             7150 : 9392 9190          
(2) 2094/    7154 : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             715A : 8988 8786 8584 
             7160 : 8382 8180          
(2) 2095/    7164 : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             716A : 0607 0809 0A0B 
             7170 : 0C0D 0E0F          
(2) 2096/    7174 : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             717A : 1617 1819 1A1B 
             7180 : 1C1D 1E1F          
(2) 2097/    7184 : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             718A : 2627 2829 2A2B 
             7190 : 2C2D 2E2F          
(2) 2098/    7194 : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             719A : 3637 3839 3A3B 
             71A0 : 3C3D 3E3F          
(2) 2099/    71A4 : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             71AA : 4647 4849 4A4B 
             71B0 : 4C4D 4E4F          
(2) 2100/    71B4 : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             71BA : 5657 5859 5A5B 
             71C0 : 5C5D 5E5F          
(2) 2101/    71C4 : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             71CA : 6667 6869 6A6B 
             71D0 : 6C6D 6E6F          
(2) 2102/    71D4 : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             71DA : 7677 7879 7A7B 
             71E0 : 7C7D 7E7F          
(2) 2103/    71E4 :                     	align 2
(2) 2104/    71E4 :                     
(2) 2105/    71E4 :                     ; ====================================================================
(2) 2106/    71E4 :                     ; ----------------------------------------------------------------
(2) 2107/    71E4 :                     ; Short .w variables
(2) 2108/    71E4 :                     ; ----------------------------------------------------------------
(2) 2109/    71E4 :                     
(2) 2110/    71E4 :                     			align $80
(2) 2111/    7200 :                     SCPU_RAM:
(2) 2112/    7200 : (MACRO)              			memory SCPU_RAM
(2) 2112/    7200 : =$7200               GLBL_LASTPC     := *
(2) 2112/    1A00 :                                     dephase
(2) 2112/    7200 :                                     phase SCPU_RAM
(2) 2112/    7200 : =$7200               GLBL_LASTORG    := *
(2) 2113/    7200 :                     RAM_CdSub_StampNum	ds.w 1
(2) 2114/    7202 :                     RAM_CdSub_StampW	ds.w 1				; Safer W/H reads
(2) 2115/    7204 :                     RAM_CdSub_StampH	ds.w 1				; ''
(2) 2116/    7206 :                     RAM_CdSub_StampEnbl	ds.w 1				; Flag to Disable/Enable Stamp rendering *IMPORTANT*
(2) 2117/    7208 :                     RAM_CdSub_StampBusy	ds.w 1				; Stamp is busy drawing, Level 1 clears this
(2) 2118/    720A :                     RAM_CdSub_StampSize	ds.w 1				; %msr m-Map size: 1x1/16x16 s-Stamp 16x16/32x32 r-Repeat No/Yes
(2) 2119/    720C :                     RAM_CdSub_StampNextWr	ds.w 1
(2) 2120/    720E :                     RAM_CdSub_StampNextRd	ds.w 1
(2) 2121/    7210 :                     RAM_CdSub_DotClearFlag	ds.w 1
(2) 2122/    7212 :                     RAM_CdSub_StampIndxW	ds.w 1
(2) 2123/    7214 :                     RAM_CdSub_StampCBuff	ds.w 1
(2) 2124/    7216 :                     RAM_CdSub_StampPending	ds.w 1
(2) 2125/    7218 :                     RAM_CdSub_PcmEnbl	ds.b 1				; PCM Enable bits
(2) 2126/    7219 :                     RAM_CdSub_PcmReqUpd	ds.b 1				; PCM new data request
(2) 2127/    721A :                     RAM_CdSub_StampReqUpd	ds.b 1
(2) 2128/    721B :                     			align 2
(2) 2129/    721C :                     
(2) 2130/    721C :                     ; ====================================================================
(2) 2131/    721C :                     ; ----------------------------------------------------------------
(2) 2132/    721C :                     ; Buffers after $8000
(2) 2133/    721C :                     ; ----------------------------------------------------------------
(2) 2134/    721C :                     
(2) 2135/    721C :                     RAM_CdSub_StampProc	ds.b stmpc_len
(2) 2136/    7244 :                     RAM_CdSub_StampOutBox	ds.b stmpi_len
(2) 2137/    7250 :                     RAM_CdSub_StampList	ds.l 2*MAX_MCDSTAMPS		; Location and Z sort pos
(2) 2138/    7350 :                     
(2) 2139/    7350 :                     RAM_CdSub_CurrSaveInfo	ds.b $10
(2) 2140/    7360 :                     RAM_CdSub_BramWork	ds.b $640
(2) 2141/    79A0 :                     RAM_CdSub_BramStrings	ds.b $C
(2) 2142/    79AC :                     RAM_CdSub_PcmBuff	ds.b 8*cdpcm_len		; PCM Streaming buffer
(2) 2143/    7ABC :                     RAM_CdSub_PcmTable	ds.b 8*8			; PCM table recieved from Z80
(2) 2144/    7AFC :                     ISO_Filelist		ds.b $800*(8+1)
(2) 2145/    C2FC :                     ISO_Output		ds.b $800*($10+1)
(2) 2146/   14AFC :                     RAM_CdSub_FsBuff	ds.l $20
(2) 2147/   14B7C :                     sizeof_subcpu		ds.l 0
(2) 2148/   14B7C : (MACRO)              			endmemory
(2) 2148/    F37C :                     .here:          dephase
(2) 2148/    F37C :                                     ds.b -(.here-GLBL_LASTORG)
(2) 2148/    7200 :                                     phase GLBL_LASTPC
(2) 2149/    7200 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 2150/    7200 :                     
(2) 2151/    7200 :                     ; ====================================================================
(2) 2152/    7200 :                     ; ----------------------------------------------------------------
(2) 2153/    7200 :                     ; SUB-CPU data
(2) 2154/    7200 :                     ; ----------------------------------------------------------------
(2) 2155/    7200 :                     
(2) 2156/    1A00 :                     			dephase
(2) 2157/   20000 :                     			phase $20000		; <-- MANUAL location on Sub-CPU area
(2) 2158/   20000 :                     SCPU_DATA:
(2) 2159/    1A00 :                     			dephase
(2) 2160/    1A00 :                     			dephase
(2) 2161/    1A00 :                     
(1)   78/    1A00 :                     SP_End:
(1)   79/    1A00 :                     		align 2
(1)   80/    1A00 :                     
(1)   81/    1A00 :                     ; ====================================================================
(1)   82/    1A00 :                     ; ----------------------------------------------------------------
(1)   83/    1A00 :                     ; Super-jump
(1)   84/    1A00 :                     ; ----------------------------------------------------------------
(1)   85/    1A00 :                     
(1)   86/    1A00 :                     		align $2800
(1)   87/    2800 :                     MCD_Main:
(1)   88/    2800 :                     	; --------------------------------
(1)   89/    2800 :                     	; Copy colors
(1)   90/    2800 :                     	; --------------------------------
(1)   91/    2800 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)   92/    2806 : 2D7C 0000 0020      		move.l	#$00000020,4(a6)		; Copy ALL palette colors
             280C : 0004             
(1)   93/    280E :                     ; 		lea	(RAM_Palette).w,a5		; <-- Current palette
(1)   94/    280E : 4BF8 FF80           		lea	($FFFFFF80).w,a5
(1)   95/    2812 : 204D                		move.l	a5,a0
(1)   96/    2814 : 323C 003F           		move.w	#64-1,d1
(1)   97/    2818 :                     .copy_colors:
(1)   98/    2818 : 30D6                		move.w	(a6),(a0)+
(1)   99/    281A : 51C9 FFFC           		dbf	d1,.copy_colors
(1)  100/    281E :                     	; --------------------------------
(1)  101/    281E :                     	; Quick fade-out
(1)  102/    281E :                     	; --------------------------------
(1)  103/    281E :                     .fade_out:
(1)  104/    281E : 302E 0004           		move.w	4(a6),d0		; Wait VBlank
(1)  105/    2822 : 0800 0003           		btst	#3,d0
(1)  106/    2826 : 67F6                		beq.s	.fade_out
(1)  107/    2828 : 204D                		move.l	a5,a0
(1)  108/    282A : 3C3C 003F           		move.w	#64-1,d6		; Check all 64 colors
(1)  109/    282E : 7E00                		moveq	#0,d7			; Exit flag
(1)  110/    2830 :                     .next_color:
(1)  111/    2830 : 3010                		move.w	(a0),d0
(1)  112/    2832 : 673C                		beq.s	.nothing
(1)  113/    2834 : 3200                		move.w	d0,d1
(1)  114/    2836 : 0240 0EE0           		andi.w	#$EE0,d0
(1)  115/    283A : 0241 000E           		andi.w	#$00E,d1
(1)  116/    283E : 6704                		beq.s	.no_red
(1)  117/    2840 : 5541                		subq.w	#2,d1
(1)  118/    2842 : 5247                		addq.w	#1,d7
(1)  119/    2844 :                     .no_red:
(1)  120/    2844 : 8041                		or.w	d1,d0
(1)  121/    2846 : 3200                		move.w	d0,d1
(1)  122/    2848 : 0240 0E0E           		andi.w	#$E0E,d0
(1)  123/    284C : 0241 00E0           		andi.w	#$0E0,d1
(1)  124/    2850 : 6706                		beq.s	.no_green
(1)  125/    2852 : 0441 0020           		subi.w	#$020,d1
(1)  126/    2856 : 5247                		addq.w	#1,d7
(1)  127/    2858 :                     .no_green:
(1)  128/    2858 : 8041                		or.w	d1,d0
(1)  129/    285A : 3200                		move.w	d0,d1
(1)  130/    285C : 0240 00EE           		andi.w	#$0EE,d0
(1)  131/    2860 : 0241 0E00           		andi.w	#$E00,d1
(1)  132/    2864 : 6706                		beq.s	.no_blue
(1)  133/    2866 : 0441 0200           		subi.w	#$200,d1
(1)  134/    286A : 5247                		addq.w	#1,d7
(1)  135/    286C :                     .no_blue:
(1)  136/    286C : 8041                		or.w	d1,d0
(1)  137/    286E : 3080                		move.w	d0,(a0)
(1)  138/    2870 :                     .nothing:
(1)  139/    2870 : D0FC 0002           		adda	#2,a0
(1)  140/    2874 : 51CE FFBA           		dbf	d6,.next_color
(1)  141/    2878 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)
             287E : 0004             
(1)  142/    2880 : 3C3C 003F           		move.w	#64-1,d6
(1)  143/    2884 : 204D                		move.l	a5,a0
(1)  144/    2886 :                     .copy_new:
(1)  145/    2886 : 3C98                		move.w	(a0)+,(a6)
(1)  146/    2888 : 51CE FFFC           		dbf	d6,.copy_new
(1)  147/    288C :                     .wait_next:
(1)  148/    288C : 302E 0004           		move.w	4(a6),d0
(1)  149/    2890 : 0800 0003           		btst	#3,d0
(1)  150/    2894 : 66F6                		bne.s	.wait_next
(1)  151/    2896 :                     	; --------------------------------
(1)  152/    2896 : 4A47                		tst.w	d7
(1)  153/    2898 : 6684                		bne.s	.fade_out
(1)  154/    289A : 204D                		move.l	a5,a0
(1)  155/    289C : 7C00                		moveq	#0,d6
(1)  156/    289E : 7E3F                		moveq	#64-1,d7
(1)  157/    28A0 :                     .cleanup:
(1)  158/    28A0 : 30C6                		move.w	d6,(a0)+
(1)  159/    28A2 : 51CF FFFC           		dbf	d7,.cleanup
(1)  160/    28A6 :                     
     118/    28A6 : 41FA 02B6           		lea	Md_SysCode(pc),a0			; Copy SYSTEM routines
     119/    28AA : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     120/    28B0 : 303C 2983           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     121/    28B4 :                     .copy_code:
     122/    28B4 : 12D8                		move.b	(a0)+,(a1)+
     123/    28B6 : 51C8 FFFC           		dbf	d0,.copy_code
     125/    28BA : 41FA 0294           		lea	filen_marscode(pc),a0			; Load SH2 code from disc to WORD-RAM
     126/    28BE : 4EB9 FFFF 2466      		jsr	(System_MdMcd_RdFile_WRAM).l
     127/    28C4 :                     		include "system/mcd/marscd.asm"
(1)    1/    28C4 :                     ; ===========================================================================
(1)    2/    28C4 :                     ; -------------------------------------------------------------------
(1)    3/    28C4 :                     ; 32X BOOT FOR SEGA CD, modified from original.
(1)    4/    28C4 :                     ;
(1)    5/    28C4 :                     ; SH2 CODE MUST BE ALREADY LOADED ON WORD-RAM AND WITH
(1)    6/    28C4 :                     ; PERMISSION SET TO MAIN.
(1)    7/    28C4 :                     ; -------------------------------------------------------------------
(1)    8/    28C4 :                     
(1)    9/    28C4 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   10/    28CA : 0CB9 4D41 5253      		cmp.l	#"MARS",(sysmars_id).l	; Check MARS ID
             28D0 : 00A1 30EC          
(1)   11/    28D4 : 6600 00AA           		bne	MarsError
(1)   12/    28D8 :                     .sh_wait:
(1)   13/    28D8 : 7000                		moveq	#0,d0
(1)   14/    28DA : 082D 0007 0001      		btst.b	#7,adapter+1(a5)	; Wait for SH2 reset
(1)   15/    28E0 : 67F6                		beq.b	.sh_wait
(1)   16/    28E2 : 082D 0000 0001      		btst.b	#0,adapter+1(a5)	; Check Adapter mode
(1)   17/    28E8 : 6600 008C           		bne	Hot_Start		; If already enabled, it's a Hot Start
(1)   18/    28EC :                     .cold_start:
(1)   19/    28EC : 1B7C 0001 0001      		move.b	#%01,adapter+1(a5)	; Turn ON the 32X and Reset SH2
(1)   20/    28F2 : 3E3C 4AE2           		move.w	#19170,d7		; 8
(1)   21/    28F6 :                     .res_wait:
(1)   22/    28F6 : 51CF FFFE           		dbra	d7,.res_wait		; 12*d7+10
(1)   23/    28FA : 2B40 0020           		move.l	d0,comm0(a5)
(1)   24/    28FE : 2B40 0024           		move.l	d0,comm4(a5)
(1)   25/    2902 : 1B7C 0003 0001      		move.b	#%11,adapter+1(a5)	; Adapter enable + Cancel/Stop SH2 Reset
(1)   26/    2908 :                     ; 		vdp_showme $0EE
(1)   27/    2908 :                     .fm3
(1)   28/    2908 : 0895 0007           		bclr.b	#7,(a5)			; Set SVDP to Genesis
(1)   29/    290C : 66FA                		bne.b	.fm3
(1)   30/    290E : 3B40 0002           		move.w	d0,$02(a5)		; Interrupt Reg.
(1)   31/    2912 : 3B40 0004           		move.w	d0,$04(a5)		; Bank Reg.
(1)   32/    2916 : 3B40 0006           		move.w	d0,$06(a5)		; DREQ Control Reg.
(1)   33/    291A : 2B40 0008           		move.l	d0,$08(a5)		; DREQ Source Address Reg.
(1)   34/    291E : 2B40 000C           		move.l	d0,$0C(a5)		; DREQ Destination Address Reg.
(1)   35/    2922 : 3B40 0010           		move.w	d0,$10(a5)		; DREQ Length Reg.
(1)   36/    2926 : 3B40 0030           		move.w	d0,$30(a5)		; PWM Control
(1)   37/    292A : 3B40 0032           		move.w	d0,$32(a5)		; PWM fs Reg.
(1)   38/    292E : 3B40 0038           		move.w	d0,$38(a5)		; PWM Mono Reg.
(1)   39/    2932 : 3B40 0080           		move.w	d0,$80(a5)		; SVDP: Bitmap Mode Reg
(1)   40/    2936 : 3B40 0082           		move.w	d0,$82(a5)		; SVDP: Shift Reg
(1)   41/    293A :                     .fs0:
(1)   42/    293A : 08AD 0000 008B      		bclr.b	#0,$8B(a5)		; FS = 0
(1)   43/    2940 : 66F8                		bne.b	.fs0
(1)   44/    2942 : 6144                		bsr	FrameClear
(1)   45/    2944 :                     .fs1:
(1)   46/    2944 : 08ED 0000 008B      		bset.b	#0,$8B(a5)		; FS = 1
(1)   47/    294A : 67F8                		beq.b	.fs1
(1)   48/    294C : 613A                		bsr	FrameClear
(1)   49/    294E : 08AD 0000 008B      		bclr.b	#0,$8B(a5)		; FS = 0
(1)   50/    2954 : 6172                		bsr	PaletteClear		; ----	Palette RAM Clear
(1)   51/    2956 : 303C 0080           		move	#$80,d0			; ----	SH2 Check
(1)   52/    295A : 222D 0020           		move.l	$20(a5),d1		; SDRAM Self Check
(1)   53/    295E : B2BC 5344 4552      		cmp.l	#"SDER",d1
(1)   54/    2964 : 671A                		beq	MarsError
(1)   55/    2966 : 7000                		moveq	#0,d0			; ----	Communication Reg. Clear
(1)   56/    2968 : 2B40 0028           		move.l	d0,$28(a5)		; 8
(1)   57/    296C : 2B40 002C           		move.l	d0,$2C(a5)		; 12
(1)   58/    2970 : 44FC 0000           		move	#0,ccr			; Complete
(1)   59/    2974 : 607A                		bra.s	IcdAllEnd
(1)   60/    2976 :                     Hot_Start:
(1)   61/    2976 : 3B40 0006           		move.w	d0,6(a5)		; DREQ Control Reg.
(1)   62/    297A : 303C 8000           		move.w	#$8000,d0
(1)   63/    297E : 6070                		bra.s	IcdAllEnd
(1)   64/    2980 :                     
(1)   65/    2980 :                     ; ----------------------------------------------------------------
(1)   66/    2980 :                     ; No 32X detected
(1)   67/    2980 :                     ; ----------------------------------------------------------------
(1)   68/    2980 :                     
(1)   69/    2980 :                     MarsError:
(1)   70/    2980 : 44FC 0001           		move	#1,ccr			; Return error carryflag
(1)   71/    2984 : 4E75                		rts
(1)   72/    2986 :                     
(1)   73/    2986 :                     ; ----------------------------------------------------------------
(1)   74/    2986 :                     ; Clear framebuffer
(1)   75/    2986 :                     ; ----------------------------------------------------------------
(1)   76/    2986 :                     
(1)   77/    2986 :                     		align 4
(1)   78/    2988 :                     FrameClear:
(1)   79/    2988 : 48E7 C140           		movem.l	d0/d1/d7/a1,-(a7)
(1)   80/    298C : 43F9 00A1 5180      		lea	($A15180).l,a1
(1)   81/    2992 :                     .fm1
(1)   82/    2992 : 08A9 0007 FF80      		bclr.b	#7,-$80(a1)		; MD access
(1)   83/    2998 : 66F8                		bne.b	.fm1
(1)   84/    299A : 3E3C 00FF           		move.w	#($20000/$200-1),d7
(1)   85/    299E : 7000                		moveq	#0,d0
(1)   86/    29A0 : 7200                		moveq	#0,d1
(1)   87/    29A2 : 337C FFFF 0004      		move.w	#-1,$4(a1)		; Fill Length Reg.
(1)   88/    29A8 :                     .fill0:
(1)   89/    29A8 : 3341 0006           		move.w	d1,$6(a1)		; Fill Start Address Reg.
(1)   90/    29AC : 3340 0008           		move.w	d0,$8(a1)		; Fill Data Reg.
(1)   91/    29B0 : 4E71                		nop
(1)   92/    29B2 :                     .fen0:
(1)   93/    29B2 : 0829 0001 000B      		btst.b	#1,$B(a1)		; FEN = 0 ?
(1)   94/    29B8 : 66F8                		bne.b	.fen0
(1)   95/    29BA : D27C 0100           		add.w	#$100,d1		; Address = +200H
(1)   96/    29BE : 51CF FFE8           		dbra	d7,.fill0
(1)   97/    29C2 : 4CDF 0283           		movem.l	(a7)+,d0/d1/d7/a1
(1)   98/    29C6 : 4E75                		rts
(1)   99/    29C8 :                     
(1)  100/    29C8 :                     ; ----------------------------------------------------------------
(1)  101/    29C8 :                     ; Palette RAM Clear
(1)  102/    29C8 :                     ; ----------------------------------------------------------------
(1)  103/    29C8 :                     
(1)  104/    29C8 :                     PaletteClear:
(1)  105/    29C8 : 48E7 8180           		movem.l	d0/d7/a0,-(a7)
(1)  106/    29CC : 41F9 00A1 5200      		lea	($A15200).l,a0
(1)  107/    29D2 :                     .fm2
(1)  108/    29D2 : 08A8 0007 FF00      		bclr.b	#7,-$100(a0)		; MD access
(1)  109/    29D8 : 66F8                		bne.b	.fm2
(1)  110/    29DA : 3E3C 001F           		move.w	#(256/2/4-1),d7
(1)  111/    29DE :                     .pl:
(1)  112/    29DE : 20C0                		move.l	d0,(a0)+
(1)  113/    29E0 : 20C0                		move.l	d0,(a0)+
(1)  114/    29E2 : 20C0                		move.l	d0,(a0)+
(1)  115/    29E4 : 20C0                		move.l	d0,(a0)+
(1)  116/    29E6 : 51CF FFF6           		dbra	d7,.pl
(1)  117/    29EA : 4CDF 0181           		movem.l	(a7)+,d0/d7/a0
(1)  118/    29EE : 4E75                		rts
(1)  119/    29F0 :                     
(1)  120/    29F0 :                     ; ===================================================================
(1)  121/    29F0 :                     ; Start
(1)  122/    29F0 :                     ;
(1)  123/    29F0 :                     ; bcc  | 32X active
(1)  124/    29F0 :                     ; bcs  | No 32X detected
(1)  125/    29F0 :                     ; d0.w | %h0000000 00000000
(1)  126/    29F0 :                     ;         h - Cold Start / Hot Start
(1)  127/    29F0 :                     ; ===================================================================
(1)  128/    29F0 :                     
(1)  129/    29F0 :                     IcdAllEnd:
(1)  130/    29F0 : 65FE                		bcs	*				; <-- Nothing
(1)  131/    29F2 : 4A40                		tst.w	d0
(1)  132/    29F4 : 6B00 00AE           		bmi	.soft_reset
(1)  133/    29F8 :                     
(1)  134/    29F8 :                     	; ------------------------------------------------
(1)  135/    29F8 :                     	; Send the entire SH2 code in split sections
(1)  136/    29F8 :                     	; ------------------------------------------------
(1)  137/    29F8 : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6
(1)  138/    29FE :                     .wait_fb:
(1)  139/    29FE : 0896 0007           		bclr	#7,(a6)				; Set FM bit to MD
(1)  140/    2A02 : 66FA                		bne.s	.wait_fb			; Wait until it accepts.
(1)  141/    2A04 :                     	; --------------------------------
(1)  142/    2A04 :                     	; FRAMEBUFFER 1
(1)  143/    2A04 : 082E 0007 008A      .wait_f1fb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  144/    2A0A : 67F8                		beq.s	.wait_f1fb
(1)  145/    2A0C : 08EE 0000 008B      .wait_f1:	bset	#0,$80+$0B(a6)			; Set BUFFER 1
(1)  146/    2A12 : 67F8                		beq.s	.wait_f1
(1)  147/    2A14 : 41F9 0021 FFC8      		lea	($200000+($20000-$38)).l,a0	; Read SECOND half of SH2 code
(1)  148/    2A1A : 43F9 0084 0000      		lea	($840000).l,a1
(1)  149/    2A20 : 2E3C 0000 7FFF      		move.l	#(($20000)/4)-1,d7		; Thie size for this section
(1)  150/    2A26 :                     .send_half:
(1)  151/    2A26 : 22D8                		move.l	(a0)+,(a1)+
(1)  152/    2A28 : 51CF FFFC           		dbf	d7,.send_half
(1)  153/    2A2C :                     	; --------------------------------
(1)  154/    2A2C :                     	; FRAMEBUFFER 0
(1)  155/    2A2C : 082E 0007 008A      .wait_f0fb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  156/    2A32 : 67F8                		beq.s	.wait_f0fb
(1)  157/    2A34 : 08AE 0000 008B      .wait_f0:	bclr	#0,$80+$0B(a6)			; Set BUFFER 0
(1)  158/    2A3A : 66F8                		bne.s	.wait_f0
(1)  159/    2A3C : 41FA 0084           		lea	MarsInitHeader(pc),a0		; Read Module
(1)  160/    2A40 : 43F9 0084 0000      		lea	($840000).l,a1
(1)  161/    2A46 : 3E3C 000D           		move.w	#$0E-1,d7
(1)  162/    2A4A :                     .send_head:
(1)  163/    2A4A : 22D8                		move.l	(a0)+,(a1)+
(1)  164/    2A4C : 51CF FFFC           		dbf	d7,.send_head
(1)  165/    2A50 : 41F9 0020 0000      		lea	($200000).l,a0			; Read the FIRST half of SH2
(1)  166/    2A56 : 2E3C 0000 7FF1      		move.l	#(($20000-$38)/4)-1,d7		; Size for this section
(1)  167/    2A5C :                     .send_code:
(1)  168/    2A5C : 22D8                		move.l	(a0)+,(a1)+
(1)  169/    2A5E : 51CF FFFC           		dbf	d7,.send_code
(1)  170/    2A62 :                     	; --------------------------------
(1)  171/    2A62 : 082E 0007 008A      .wait_cdfb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  172/    2A68 : 67F8                		beq.s	.wait_cdfb
(1)  173/    2A6A : 08D6 0007           .wait_adapter:	bset	#7,(a6)				; Set FM bit to 32X
(1)  174/    2A6E : 67FA                		beq.s	.wait_adapter
(1)  175/    2A70 : 4DF9 00A1 5100      		lea	($A15100).l,a6
(1)  176/    2A76 : 2D7C 5F43 445F      		move.l	#"_CD_",$20(a6)			; Write CD boot flag
             2A7C : 0020             
(1)  177/    2A7E : 0CAE 4D5F 4F4B      .master:	cmp.l	#"M_OK",$20(a6)			; Check _OK flags
             2A84 : 0020             
(1)  178/    2A86 : 66F6                		bne.s	.master
(1)  179/    2A88 : 0CAE 535F 4F4B      .slave:		cmp.l	#"S_OK",$24(a6)
             2A8E : 0024             
(1)  180/    2A90 : 66F6                		bne.s	.slave
(1)  181/    2A92 : 202E 0020           .wait_mstr:	move.l	$20(a6),d0			; Status tags cleared?
(1)  182/    2A96 : 66FA                		bne.s	.wait_mstr
(1)  183/    2A98 : 202E 0024           .wait_slv:	move.l	$24(a6),d0
(1)  184/    2A9C : 66FA                		bne.s	.wait_slv
(1)  185/    2A9E : 7000                		moveq	#0,d0				; Clear both Master and Slave comm's
(1)  186/    2AA0 : 2D40 002C           		move.l	d0,comm12(a6)
(1)  187/    2AA4 :                     .soft_reset:
(1)  188/    2AA4 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  189/    2AAA : 2CBC 8004 8104      		move.l	#$80048104,(a6)			; Default top VDP regs
(1)  191/    2AB0 : 3E3C 01FF           		move.w	#$1FF,d7			; Delay until SH2 gets first.
(1)  192/    2AB4 :                     .wait_sh2:
(1)  193/    2AB4 : 3C3C 00FF           		move.w	#$FF,d6
(1)  194/    2AB8 : 51CE FFFE           		dbf	d6,*
(1)  195/    2ABC : 51CF FFF6           		dbf	d7,.wait_sh2
(1)  197/    2AC0 :                     ; 		vdp_showme $000
(1)  198/    2AC0 : 6038                		bra	MarsJumpHere
(1)  199/    2AC2 :                     
(1)  200/    2AC2 :                     ; ----------------------------------------------------------------
(1)  201/    2AC2 :                     ; MARS CD header
(1)  202/    2AC2 :                     ; ----------------------------------------------------------------
(1)  203/    2AC2 :                     MarsInitHeader:
(1)  204/    2AC2 : 4D41 5253 204E      		dc.b "MARS NIKONA-SDK "			; Module name
             2AC8 : 494B 4F4E 412D 
             2ACE : 5344 4B20          
(1)  205/    2AD2 : 0000 0000           		dc.l $00000000				; Version
(1)  206/    2AD6 : 0000 0000           		dc.l $00000000				; Not Used
(1)  207/    2ADA : 0600 0000           		dc.l $06000000				; SDRAM area
(1)  211/    2ADE : 0001 FFC8           		dc.l $1FFC8				; SDRAM code size (MAXIMUM: $1FFC8)
(1)  213/    2AE2 : 0600 07CC           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  214/    2AE6 : 0600 0ED0           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  215/    2AEA : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  216/    2AEE : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  217/    2AF2 : 0000 0000           		dc.l $00000000				; Not Used
(1)  218/    2AF6 : 0000 0000           		dc.l $00000000				; Not Used
(1)  219/    2AFA :                     		align 2
(1)  220/    2AFA :                     ; ----------------------------------------------------------------
(1)  221/    2AFA :                     MarsJumpHere:
(1)  222/    2AFA : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Permanent RV=1
             2B00 : 5107             
(1)  223/    2B02 :                     
     129/    2B02 : 41FA 003E           		lea	filen_z80file(pc),a0			; Load Z80 data to Word-RAM
     130/    2B06 : 4EB9 FFFF 2466      		jsr	(System_MdMcd_RdFile_WRAM).l		; Sound_Init will read from there.
     131/    2B0C : 41F8 D880           		lea	(RAM_MdVideo).w,a0			; Clean our "work" RAM starting from here
     132/    2B10 : 223C FFFF FA16      		move.l	#sizeof_mdram,d1
     133/    2B16 : 7000                		moveq	#0,d0
     134/    2B18 : 30C0                .loop_ram:	move.w	d0,(a0)+
     135/    2B1A : B1C1                		cmp.l	d1,a0
     136/    2B1C : 65FA                		bcs.s	.loop_ram
     137/    2B1E : 4EB9 FFFF 2342      		jsr	(System_MdMcd_SubWait).l		; Wait Sub-CPU first.
     138/    2B24 : 4EB9 FFFF 1E2E      		jsr	(Sound_Init).l				; Init Sound driver (FIRST)
     139/    2B2A : 4EB9 FFFF 0270      		jsr	(Video_Init).l				; Init Video
     140/    2B30 : 4EB9 FFFF 1CEC      		jsr	(System_Init).l				; Init System
     141/    2B36 : 31FC 0007 FA10      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     142/    2B3C : 4EF9 FFFF 28C2      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     143/    2B42 :                     filen_z80file:
     144/    2B42 : 4745 4D41 5F5A      		dc.b "GEMA_Z80.BIN",0
             2B48 : 3830 2E42 494E 00 
     145/    2B4F :                     		align 2
     146/    2B50 :                     filen_marscode:
     147/    2B50 : 4E4B 4E41 4D41      		dc.b "NKNAMARS.BIN",0
             2B56 : 5253 2E42 494E 00 
     148/    2B5D :                     		align 2
     149/    2B5E :                     
     150/    2B5E :                     ; ---------------------------------------------
     151/    2B5E :                     ; SEGA PICO
     152/    2B5E :                     ;
     153/    2B5E :                     ; This recycles the MD's routines.
     154/    2B5E :                     ; ---------------------------------------------
     176/    2B5E :                     
     177/    2B5E :                     ; ====================================================================
     178/    2B5E :                     ; --------------------------------------------------------
     179/    2B5E :                     ; SYSTEM routines
     180/    2B5E :                     ;
     181/    2B5E :                     ; MD/PICO:  Normal ROM locations
     182/    2B5E :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     183/    2B5E :                     ;           with the SH2's view of ROM
     184/    2B5E :                     ; CD/CD32X: Loaded into RAM for safe access.
     185/    2B5E :                     ; --------------------------------------------------------
     186/    2B5E :                     
     188/    2B5E :                     Md_SysCode:
     189/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     191/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     192/FFFFFFFFFFFF0000 :                     
     193/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema_macros.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    2/FFFFFFFFFFFF0000 :                     ; MACROS
(1)    3/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    4/FFFFFFFFFFFF0000 :                     
(1)    5/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)    6/FFFFFFFFFFFF0000 :                     ; gSmplData - Include .WAV sample data, applies to
(1)    7/FFFFFFFFFFFF0000 :                     ;             DAC, PCM* and PWM
(1)    8/FFFFFFFFFFFF0000 :                     ;
(1)    9/FFFFFFFFFFFF0000 :                     ;             * No need to convert data, Sub-CPU
(1)   10/FFFFFFFFFFFF0000 :                     ;             converts the data manually.
(1)   11/FFFFFFFFFFFF0000 :                     ;
(1)   12/FFFFFFFFFFFF0000 :                     ; labl | 24-bit Pointer, depending of the
(1)   13/FFFFFFFFFFFF0000 :                     ;        current CPU
(1)   14/FFFFFFFFFFFF0000 :                     ; file | File path for the WAV sample file
(1)   15/FFFFFFFFFFFF0000 :                     ; loop | Loop start point if sample loop is enabled
(1)   16/FFFFFFFFFFFF0000 :                     ;        Set to 0 if not using loop.
(1)   17/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   18/FFFFFFFFFFFF0000 :                     
(1)   19/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   20/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   21/FFFFFFFFFFFF0000 :                     		align 4
(1)   22/FFFFFFFFFFFF0000 :                     	endif
(1)   23/FFFFFFFFFFFF0000 :                     labl	label *
(1)   24/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   25/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   26/FFFFFFFFFFFF0000 :                     labl_s:
(1)   27/FFFFFFFFFFFF0000 :                     	binclude file,$2C
(1)   28/FFFFFFFFFFFF0000 :                     labl_e:
(1)   29/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   30/FFFFFFFFFFFF0000 :                     		align 4
(1)   31/FFFFFFFFFFFF0000 :                     	endif
(1)   32/FFFFFFFFFFFF0000 :                     	endm
(1)   33/FFFFFFFFFFFF0000 :                     
(1)   34/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   35/FFFFFFFFFFFF0000 :                     ; gemaList - Make a tracklist label
(1)   36/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   37/FFFFFFFFFFFF0000 :                     
(1)   38/FFFFFFFFFFFF0000 :                     ; gemaList macro thislbl
(1)   39/FFFFFFFFFFFF0000 :                     ; 	align 2
(1)   40/FFFFFFFFFFFF0000 :                     ; thislbl	label *
(1)   41/FFFFFFFFFFFF0000 :                     ; GLBL_GEMABASE := *
(1)   42/FFFFFFFFFFFF0000 :                     ; 	endm
(1)   43/FFFFFFFFFFFF0000 :                     
(1)   44/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   45/FFFFFFFFFFFF0000 :                     ; gemaTrk - Sequence entry on Gema_MasterList
(1)   46/FFFFFFFFFFFF0000 :                     ;
(1)   47/FFFFFFFFFFFF0000 :                     ; enblt | Disable/Enable global beats on this Sequence
(1)   48/FFFFFFFFFFFF0000 :                     ;         0 - Don't Use beats, 1 - Use beats
(1)   49/FFFFFFFFFFFF0000 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   50/FFFFFFFFFFFF0000 :                     ;   loc | Direct location of the sequence data
(1)   51/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   52/FFFFFFFFFFFF0000 :                     
(1)   53/FFFFFFFFFFFF0000 :                     gemaTrk macro enbltp,ticks,loc
(1)   54/FFFFFFFFFFFF0000 :                     	dc.l ((enbltp&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   55/FFFFFFFFFFFF0000 :                     	endm
(1)   56/FFFFFFFFFFFF0000 :                     
(1)   57/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   58/FFFFFFFFFFFF0000 :                     ; gemaHead - Track pointers to their respective data
(1)   59/FFFFFFFFFFFF0000 :                     ;
(1)   60/FFFFFFFFFFFF0000 :                     ; blk_data  | Block data pointer
(1)   61/FFFFFFFFFFFF0000 :                     ; patt_data | Pattern data pointer
(1)   62/FFFFFFFFFFFF0000 :                     ; ins_list  | instrument list pointer
(1)   63/FFFFFFFFFFFF0000 :                     ; num_chnls | Number of channels used in the track
(1)   64/FFFFFFFFFFFF0000 :                     ;             If 0: Read ALL channels
(1)   65/FFFFFFFFFFFF0000 :                     ;                   (NOT recommended, UNSTABLE)
(1)   66/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   67/FFFFFFFFFFFF0000 :                     
(1)   68/FFFFFFFFFFFF0000 :                     gemaHead macro blk,pat,ins,num
(1)   69/FFFFFFFFFFFF0000 :                     	dc.w num
(1)   70/FFFFFFFFFFFF0000 :                     	dc.l blk
(1)   71/FFFFFFFFFFFF0000 :                     	dc.l pat
(1)   72/FFFFFFFFFFFF0000 :                     	dc.l ins
(1)   73/FFFFFFFFFFFF0000 :                     	endm
(1)   74/FFFFFFFFFFFF0000 :                     
(1)   75/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   76/FFFFFFFFFFFF0000 :                     ; Instrument macros, instrument_num-1
(1)   77/FFFFFFFFFFFF0000 :                     ; (ex. Instrument 1 is 0 here)
(1)   78/FFFFFFFFFFFF0000 :                     ;
(1)   79/FFFFFFFFFFFF0000 :                     ; NOTE: UNUSED instruments MUST use gInsNull or
(1)   80/FFFFFFFFFFFF0000 :                     ; the Z80 gets unexpected results and probably crash.
(1)   81/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   82/FFFFFFFFFFFF0000 :                     
(1)   83/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   84/FFFFFFFFFFFF0000 :                     ; gInsNull - Null instrument
(1)   85/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   86/FFFFFFFFFFFF0000 :                     
(1)   87/FFFFFFFFFFFF0000 :                     gInsNull macro
(1)   88/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)   89/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)   90/FFFFFFFFFFFF0000 :                     	endm
(1)   91/FFFFFFFFFFFF0000 :                     
(1)   92/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   93/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG tone
(1)   94/FFFFFFFFFFFF0000 :                     ;
(1)   95/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)   96/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)   97/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)   98/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)   99/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  100/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  101/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  102/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  103/FFFFFFFFFFFF0000 :                     
(1)  104/FFFFFFFFFFFF0000 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  105/FFFFFFFFFFFF0000 :                     	dc.b $80,pitch,alv,atk
(1)  106/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  107/FFFFFFFFFFFF0000 :                     	endm
(1)  108/FFFFFFFFFFFF0000 :                     
(1)  109/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  110/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG noise
(1)  111/FFFFFFFFFFFF0000 :                     ;
(1)  112/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  113/FFFFFFFFFFFF0000 :                     ;         If using Tone3: set to 47 for a full noise
(1)  114/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  115/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  116/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  117/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  118/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  119/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  120/FFFFFFFFFFFF0000 :                     ; mode  | Noise mode: %tmm
(1)  121/FFFFFFFFFFFF0000 :                     ;        t - Bass(0)|Noise(1)
(1)  122/FFFFFFFFFFFF0000 :                     ;        m - Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)  123/FFFFFFFFFFFF0000 :                     ;        Using Tone3 will disable PSG Channel 3.
(1)  124/FFFFFFFFFFFF0000 :                     ;
(1)  125/FFFFFFFFFFFF0000 :                     ; Note:
(1)  126/FFFFFFFFFFFF0000 :                     ; Tone3 WILL silence PSG3 as it steals the
(1)  127/FFFFFFFFFFFF0000 :                     ; frequency from it, chip limitation.
(1)  128/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  129/FFFFFFFFFFFF0000 :                     
(1)  130/FFFFFFFFFFFF0000 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  131/FFFFFFFFFFFF0000 :                     	dc.b $90|mode,pitch,alv,atk
(1)  132/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  133/FFFFFFFFFFFF0000 :                     	endm
(1)  134/FFFFFFFFFFFF0000 :                     
(1)  135/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  136/FFFFFFFFFFFF0000 :                     ; gInsFm - FM Normal instrument/patch
(1)  137/FFFFFFFFFFFF0000 :                     ;
(1)  138/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  139/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  140/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  141/FFFFFFFFFFFF0000 :                     
(1)  142/FFFFFFFFFFFF0000 :                     gInsFm macro pitch,fmins
(1)  143/FFFFFFFFFFFF0000 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  144/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  145/FFFFFFFFFFFF0000 :                     	endm
(1)  146/FFFFFFFFFFFF0000 :                     
(1)  147/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  148/FFFFFFFFFFFF0000 :                     ; gInsFm - FM3 Special instrument/patch
(1)  149/FFFFFFFFFFFF0000 :                     ;
(1)  150/FFFFFFFFFFFF0000 :                     ; pitch | UNUSED, set to 0
(1)  151/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  152/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  153/FFFFFFFFFFFF0000 :                     
(1)  154/FFFFFFFFFFFF0000 :                     gInsFm3	macro pitch,fmins
(1)  155/FFFFFFFFFFFF0000 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  156/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  157/FFFFFFFFFFFF0000 :                     	endm
(1)  158/FFFFFFFFFFFF0000 :                     
(1)  159/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  160/FFFFFFFFFFFF0000 :                     ; gInsDac - DAC instrument
(1)  161/FFFFFFFFFFFF0000 :                     ;
(1)  162/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  163/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  164/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  165/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  166/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  167/FFFFFFFFFFFF0000 :                     
(1)  168/FFFFFFFFFFFF0000 :                     gInsDac	macro pitch,start,flags
(1)  169/FFFFFFFFFFFF0000 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  170/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  171/FFFFFFFFFFFF0000 :                     	endm
(1)  172/FFFFFFFFFFFF0000 :                     
(1)  173/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  174/FFFFFFFFFFFF0000 :                     ; gInsPcm - Sega CD PCM Sample
(1)  175/FFFFFFFFFFFF0000 :                     ;
(1)  176/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  177/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  178/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  179/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  180/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  181/FFFFFFFFFFFF0000 :                     
(1)  182/FFFFFFFFFFFF0000 :                     gInsPcm	macro pitch,start,flags
(1)  183/FFFFFFFFFFFF0000 :                      if MCD|MARSCD
(1)  184/FFFFFFFFFFFF0000 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  185/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  186/FFFFFFFFFFFF0000 :                      else
(1)  187/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  188/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  189/FFFFFFFFFFFF0000 :                      endif
(1)  190/FFFFFFFFFFFF0000 :                     	endm
(1)  191/FFFFFFFFFFFF0000 :                     
(1)  192/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  193/FFFFFFFFFFFF0000 :                     ; gInsPwm - Sega 32X PWM Sample
(1)  194/FFFFFFFFFFFF0000 :                     ;
(1)  195/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  196/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  197/FFFFFFFFFFFF0000 :                     ; flags | Flags: %000000sl
(1)  198/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  199/FFFFFFFFFFFF0000 :                     ;         s - Sample data is in Stereo
(1)  200/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  201/FFFFFFFFFFFF0000 :                     
(1)  202/FFFFFFFFFFFF0000 :                     gInsPwm	macro pitch,start,flags
(1)  203/FFFFFFFFFFFF0000 :                      if MARS|MARSCD
(1)  204/FFFFFFFFFFFF0000 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  205/FFFFFFFFFFFF0000 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  206/FFFFFFFFFFFF0000 :                      else
(1)  207/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  208/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  209/FFFFFFFFFFFF0000 :                      endif
(1)  210/FFFFFFFFFFFF0000 :                     	endm
(1)  211/FFFFFFFFFFFF0000 :                     
     194/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - WAVE playback at 16000hz (base) for
(1)   16/FFFFFFFFFFFF0000 :                     ;   | all sample-based channels:
(1)   17/FFFFFFFFFFFF0000 :                     ;   | DAC, PCM and PWM
(1)   18/FFFFFFFFFFFF0000 :                     ;
(1)   19/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection for DAC
(1)   20/FFFFFFFFFFFF0000 :                     ;   | This keeps the wave playback in a
(1)   21/FFFFFFFFFFFF0000 :                     ;   | decent quality while doing any DMA
(1)   22/FFFFFFFFFFFF0000 :                     ;   | task in the 68k side.
(1)   23/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   24/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   25/FFFFFFFFFFFF0000 :                     ;
(1)   26/FFFFFFFFFFFF0000 :                     ; * Notes:
(1)   27/FFFFFFFFFFFF0000 :                     ; This driver uses the area $FFFF00-$FFFFFF
(1)   28/FFFFFFFFFFFF0000 :                     ; The Z80 writes a flag directly to RAM for
(1)   29/FFFFFFFFFFFF0000 :                     ; a workaround to bypass a data-reading
(1)   30/FFFFFFFFFFFF0000 :                     ; hardware limitation. (see Sound_Update)
(1)   31/FFFFFFFFFFFF0000 :                     ;
(1)   32/FFFFFFFFFFFF0000 :                     ; CURRENTLY THIS CAN ONLY BE USED HERE IN NikonaSDK
(1)   33/FFFFFFFFFFFF0000 :                     ; BECAUSE OF CROSS-REFERENCING LABELS BETWEEN THE
(1)   34/FFFFFFFFFFFF0000 :                     ; Z80 and 68K.
(1)   35/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   38/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     ; Variables
(1)   40/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   41/FFFFFFFFFFFF0000 :                     
(1)   42/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   43/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   44/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   45/FFFFFFFFFFFF0000 :                     
(1)   46/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   47/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   48/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   49/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   50/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   51/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   52/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   53/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   56/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   57/FFFFFFFFFFFF0000 :                     ; Labels
(1)   58/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   59/FFFFFFFFFFFF0000 :                     
(1)   60/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_SoundBuff	; transferRom flag (ALSO for Z80)
(1)   61/FFFFFFFFFFFF0000 :                     
(1)   62/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   63/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   64/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   65/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   66/FFFFFFFFFFFF0000 :                     
(1)   67/FFFFFFFFFFFF0000 :                     gemaInit:
(1)   68/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)   72/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)   73/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)   74/FFFFFFFFFFFF0014 :                     .wait:
(1)   75/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)   76/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   77/FFFFFFFFFFFF001E : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   78/FFFFFFFFFFFF0024 : 2049                		move.l	a1,a0
(1)   79/FFFFFFFFFFFF0026 : 323C 1FFF           		move.w	#$1FFF,d1
(1)   80/FFFFFFFFFFFF002A : 7000                		moveq	#0,d0
(1)   81/FFFFFFFFFFFF002C :                     .cleanup:
(1)   82/FFFFFFFFFFFF002C : 10C0                		move.b	d0,(a0)+
(1)   83/FFFFFFFFFFFF002E : 51C9 FFFC           		dbf	d1,.cleanup
(1)   84/FFFFFFFFFFFF0032 : 41F9 0020 0000      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   85/FFFFFFFFFFFF0038 : 303C 1F6D           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   86/FFFFFFFFFFFF003C :                     .copy:
(1)   87/FFFFFFFFFFFF003C : 12D8                		move.b	(a0)+,(a1)+
(1)   88/FFFFFFFFFFFF003E : 51C8 FFFC           		dbf	d0,.copy
(1)   89/FFFFFFFFFFFF0042 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset
         FFFFFFFFFFFF0048 : 1200             
(1)   90/FFFFFFFFFFFF004A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)   91/FFFFFFFFFFFF004E : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Write PAL mode flag from here
(1)   92/FFFFFFFFFFFF0054 : 0800 0006           		btst	#6,d0
(1)   93/FFFFFFFFFFFF0058 : 6708                		beq.s	.not_pal
(1)   94/FFFFFFFFFFFF005A : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
         FFFFFFFFFFFF0060 : 003E             
(1)   95/FFFFFFFFFFFF0062 :                     .not_pal:
(1)   96/FFFFFFFFFFFF0062 : 4E71                		nop
(1)   97/FFFFFFFFFFFF0064 : 4E71                		nop
(1)   98/FFFFFFFFFFFF0066 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF006C : 1200             
(1)   99/FFFFFFFFFFFF006E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0074 : 1100             
(1)  101/FFFFFFFFFFFF0076 :                     
(1)  102/FFFFFFFFFFFF0076 :                     ; ====================================================================
(1)  103/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  104/FFFFFFFFFFFF0076 :                     ; gemaReset
(1)  105/FFFFFFFFFFFF0076 :                     ;
(1)  106/FFFFFFFFFFFF0076 :                     ; Reset sound to default sequence list
(1)  107/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  108/FFFFFFFFFFFF0076 :                     
(1)  109/FFFFFFFFFFFF0076 :                     gemaReset:
(1)  110/FFFFFFFFFFFF0076 : 41F9 0020 0000      		lea	(MainGemaSeqList),a0
(1)  111/FFFFFFFFFFFF007C : 6100 013C           		bsr	gemaSetMasterList
(1)  112/FFFFFFFFFFFF0080 : 7E05                		moveq	#6-1,d7				; Make sure it finishes.
(1)  113/FFFFFFFFFFFF0082 : 51CF FFFE           		dbf	d7,*
(1)  114/FFFFFFFFFFFF0086 : 4E75                		rts
(1)  115/FFFFFFFFFFFF0088 :                     
(1)  116/FFFFFFFFFFFF0088 :                     ; ====================================================================
(1)  117/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  118/FFFFFFFFFFFF0088 :                     ; gemaUpdate
(1)  119/FFFFFFFFFFFF0088 :                     ;
(1)  120/FFFFFFFFFFFF0088 :                     ; Call this during DISPLAY ONLY and during your VBlank wait
(1)  121/FFFFFFFFFFFF0088 :                     ; (already called by System_Render)
(1)  122/FFFFFFFFFFFF0088 :                     ;
(1)  123/FFFFFFFFFFFF0088 :                     ; RAM-to-Z80 transferRom workaround:
(1)  124/FFFFFFFFFFFF0088 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  125/FFFFFFFFFFFF0088 :                     ; see it), The 68k CPU manually writes the RAM bytes from
(1)  126/FFFFFFFFFFFF0088 :                     ; here to the Z80's RAM
(1)  127/FFFFFFFFFFFF0088 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  128/FFFFFFFFFFFF0088 :                     ; (and instruments) in case you use the ASIC-Stamp scaling/
(1)  129/FFFFFFFFFFFF0088 :                     ; rotation.
(1)  130/FFFFFFFFFFFF0088 :                     ;
(1)  131/FFFFFFFFFFFF0088 :                     ; SCD/CD32X:
(1)  132/FFFFFFFFFFFF0088 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  133/FFFFFFFFFFFF0088 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  134/FFFFFFFFFFFF0088 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  135/FFFFFFFFFFFF0088 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set for
(1)  136/FFFFFFFFFFFF0088 :                     ;   reading from there
(1)  137/FFFFFFFFFFFF0088 :                     ;
(1)  138/FFFFFFFFFFFF0088 :                     ; Sega Pico:
(1)  139/FFFFFFFFFFFF0088 :                     ; - TODO The entire Sound Driver will be here, translated from
(1)  140/FFFFFFFFFFFF0088 :                     ;   Z80 to 68k.
(1)  141/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  142/FFFFFFFFFFFF0088 :                     
(1)  143/FFFFFFFFFFFF0088 :                     gemaUpdate:
(1)  147/FFFFFFFFFFFF0088 :                     	; ------------------------------------------------
(1)  148/FFFFFFFFFFFF0088 :                     	; If transferRom wants to read from 68k RAM
(1)  149/FFFFFFFFFFFF0088 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w		; Z80 WROTE the flag?
(1)  150/FFFFFFFFFFFF008C : 674C                		beq.s	.no_task
(1)  151/FFFFFFFFFFFF008E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Clear here
(1)  152/FFFFFFFFFFFF0092 : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  153/FFFFFFFFFFFF0096 : 7E00                		moveq	#0,d7
(1)  154/FFFFFFFFFFFF0098 : 6142                		bsr	sndLockZ80
(1)  155/FFFFFFFFFFFF009A : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Size != 0?
(1)  156/FFFFFFFFFFFF00A0 : 6732                		beq.s	.no_size
(1)  157/FFFFFFFFFFFF00A2 : 5347                		subq.w	#1,d7
(1)  158/FFFFFFFFFFFF00A4 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  159/FFFFFFFFFFFF00AA : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  160/FFFFFFFFFFFF00B0 : 1C26                		move.b	-(a6),d6			; d6 - Source
(1)  161/FFFFFFFFFFFF00B2 : 4846                		swap	d6
(1)  162/FFFFFFFFFFFF00B4 : 1C26                		move.b	-(a6),d6
(1)  163/FFFFFFFFFFFF00B6 : E14E                		lsl.w	#8,d6
(1)  164/FFFFFFFFFFFF00B8 : 1C26                		move.b	-(a6),d6
(1)  165/FFFFFFFFFFFF00BA : 7A00                		moveq	#0,d5
(1)  166/FFFFFFFFFFFF00BC : 1A26                		move.b	-(a6),d5			; d5 - Dest
(1)  167/FFFFFFFFFFFF00BE : E14D                		lsl.w	#8,d5
(1)  168/FFFFFFFFFFFF00C0 : 1A26                		move.b	-(a6),d5
(1)  169/FFFFFFFFFFFF00C2 : DBC5                		add.l	d5,a5
(1)  170/FFFFFFFFFFFF00C4 : 2846                		move.l	d6,a4
(1)  171/FFFFFFFFFFFF00C6 :                     .copy_bytes:
(1)  172/FFFFFFFFFFFF00C6 : 1ADC                		move.b	(a4)+,(a5)+
(1)  173/FFFFFFFFFFFF00C8 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  174/FFFFFFFFFFFF00CC : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; Clear LEN, breaks Z80 loop
         FFFFFFFFFFFF00D2 : 0030             
(1)  175/FFFFFFFFFFFF00D4 :                     .no_size:
(1)  176/FFFFFFFFFFFF00D4 : 611A                		bsr	sndUnlockZ80
(1)  177/FFFFFFFFFFFF00D6 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  178/FFFFFFFFFFFF00DA :                     .no_task:
(1)  180/FFFFFFFFFFFF00DA : 4E75                		rts
(1)  181/FFFFFFFFFFFF00DC :                     
(1)  182/FFFFFFFFFFFF00DC :                     ; ====================================================================
(1)  183/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  184/FFFFFFFFFFFF00DC :                     ; sndLockZ80
(1)  185/FFFFFFFFFFFF00DC :                     ;
(1)  186/FFFFFFFFFFFF00DC :                     ; Locks Z80, unlocks bus.
(1)  187/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  188/FFFFFFFFFFFF00DC :                     
(1)  189/FFFFFFFFFFFF00DC :                     sndLockZ80:
(1)  191/FFFFFFFFFFFF00DC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00E2 : 1100             
(1)  192/FFFFFFFFFFFF00E4 :                     .wait:
(1)  193/FFFFFFFFFFFF00E4 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00EA : 1100             
(1)  194/FFFFFFFFFFFF00EC : 66F6                		bne.s	.wait
(1)  196/FFFFFFFFFFFF00EE : 4E75                		rts
(1)  197/FFFFFFFFFFFF00F0 :                     
(1)  198/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  199/FFFFFFFFFFFF00F0 :                     ; sndUnlockZ80
(1)  200/FFFFFFFFFFFF00F0 :                     ;
(1)  201/FFFFFFFFFFFF00F0 :                     ; Unlocks Z80, locks bus.
(1)  202/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF00F0 :                     
(1)  204/FFFFFFFFFFFF00F0 :                     sndUnlockZ80:
(1)  206/FFFFFFFFFFFF00F0 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00F6 : 1100             
(1)  208/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  209/FFFFFFFFFFFF00FA :                     
(1)  210/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  211/FFFFFFFFFFFF00FA :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  212/FFFFFFFFFFFF00FA :                     ;
(1)  213/FFFFFFFFFFFF00FA :                     ; d6 - commFifo index
(1)  214/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  215/FFFFFFFFFFFF00FA :                     
(1)  216/FFFFFFFFFFFF00FA :                     sndReq_Enter:
(1)  217/FFFFFFFFFFFF00FA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  219/FFFFFFFFFFFF00FE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF0104 : 1100             
(1)  221/FFFFFFFFFFFF0106 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  222/FFFFFFFFFFFF010A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  223/FFFFFFFFFFFF010E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  224/FFFFFFFFFFFF0112 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  225/FFFFFFFFFFFF0118 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  226/FFFFFFFFFFFF011E :                     .wait:
(1)  228/FFFFFFFFFFFF011E : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0124 : 1100             
(1)  229/FFFFFFFFFFFF0126 : 66F6                		bne.s	.wait
(1)  231/FFFFFFFFFFFF0128 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  232/FFFFFFFFFFFF012A : 4886                		ext.w	d6				; extend to 16 bits
(1)  233/FFFFFFFFFFFF012C : 4E75                		rts
(1)  234/FFFFFFFFFFFF012E :                     ; JUMP ONLY
(1)  235/FFFFFFFFFFFF012E :                     sndReq_Exit:
(1)  237/FFFFFFFFFFFF012E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0134 : 1100             
(1)  239/FFFFFFFFFFFF0136 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  240/FFFFFFFFFFFF013A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  241/FFFFFFFFFFFF013E : DEFC 0008           		adda	#8,sp
(1)  242/FFFFFFFFFFFF0142 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  243/FFFFFFFFFFFF0146 : 4E75                		rts
(1)  244/FFFFFFFFFFFF0148 :                     
(1)  245/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  246/FFFFFFFFFFFF0148 :                     ; Send request id and arguments
(1)  247/FFFFFFFFFFFF0148 :                     ;
(1)  248/FFFFFFFFFFFF0148 :                     ; Input:
(1)  249/FFFFFFFFFFFF0148 :                     ; d7 - byte to write
(1)  250/FFFFFFFFFFFF0148 :                     ; d6 - index pointer
(1)  251/FFFFFFFFFFFF0148 :                     ; a5 - commZWrite, update index
(1)  252/FFFFFFFFFFFF0148 :                     ; a6 - commZfifo command list
(1)  253/FFFFFFFFFFFF0148 :                     ;
(1)  254/FFFFFFFFFFFF0148 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  255/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  256/FFFFFFFFFFFF0148 :                     
(1)  257/FFFFFFFFFFFF0148 :                     sndReq_scmd:
(1)  258/FFFFFFFFFFFF0148 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  259/FFFFFFFFFFFF014E : 5206                		addq.b	#1,d6				; next fifo pos
(1)  260/FFFFFFFFFFFF0150 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  261/FFFFFFFFFFFF0154 : 600C                		bra.s	sndReq_sbyte
(1)  262/FFFFFFFFFFFF0156 :                     sndReq_slong:
(1)  263/FFFFFFFFFFFF0156 : 610A                		bsr	sndReq_sbyte
(1)  264/FFFFFFFFFFFF0158 : E09F                		ror.l	#8,d7
(1)  265/FFFFFFFFFFFF015A :                     sndReq_saddr:	; 24-bit address
(1)  266/FFFFFFFFFFFF015A : 6106                		bsr	sndReq_sbyte
(1)  267/FFFFFFFFFFFF015C : E09F                		ror.l	#8,d7
(1)  268/FFFFFFFFFFFF015E :                     sndReq_sword:
(1)  269/FFFFFFFFFFFF015E : 6102                		bsr	sndReq_sbyte
(1)  270/FFFFFFFFFFFF0160 : E09F                		ror.l	#8,d7
(1)  271/FFFFFFFFFFFF0162 :                     sndReq_sbyte:
(1)  272/FFFFFFFFFFFF0162 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  273/FFFFFFFFFFFF0166 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  274/FFFFFFFFFFFF0168 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  275/FFFFFFFFFFFF016C : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  276/FFFFFFFFFFFF016E : 4E75                		rts
(1)  277/FFFFFFFFFFFF0170 :                     
(1)  278/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  279/FFFFFFFFFFFF0170 :                     ; gemaDmaPause
(1)  280/FFFFFFFFFFFF0170 :                     ;
(1)  281/FFFFFFFFFFFF0170 :                     ; Call this BEFORE doing any DMA transfer
(1)  282/FFFFFFFFFFFF0170 :                     ;
(1)  283/FFFFFFFFFFFF0170 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  284/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  285/FFFFFFFFFFFF0170 :                     
(1)  286/FFFFFFFFFFFF0170 :                     gemaDmaPause:
(1)  290/FFFFFFFFFFFF0170 : 2F07                		move.l	d7,-(sp)
(1)  291/FFFFFFFFFFFF0172 : 6100 FF68           		bsr	sndLockZ80
(1)  292/FFFFFFFFFFFF0176 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Block flag for Z80
         FFFFFFFFFFFF017C : 002F             
(1)  293/FFFFFFFFFFFF017E : 6100 FF70           		bsr	sndUnlockZ80
(1)  294/FFFFFFFFFFFF0182 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  295/FFFFFFFFFFFF0186 : 51CF FFFE           		dbf	d7,*
(1)  296/FFFFFFFFFFFF018A : 2E1F                		move.l	(sp)+,d7
(1)  297/FFFFFFFFFFFF018C : 4E75                		rts
(1)  299/FFFFFFFFFFFF018E :                     
(1)  300/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  301/FFFFFFFFFFFF018E :                     ; gemaDmaResume
(1)  302/FFFFFFFFFFFF018E :                     ;
(1)  303/FFFFFFFFFFFF018E :                     ; Call this AFTER finishing DMA transfer
(1)  304/FFFFFFFFFFFF018E :                     ;
(1)  305/FFFFFFFFFFFF018E :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  306/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  307/FFFFFFFFFFFF018E :                     
(1)  308/FFFFFFFFFFFF018E :                     gemaDmaResume:
(1)  312/FFFFFFFFFFFF018E : 2F07                		move.l	d7,-(sp)
(1)  313/FFFFFFFFFFFF0190 : 6100 FF4A           		bsr	sndLockZ80
(1)  314/FFFFFFFFFFFF0194 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Unblock flag for Z80
         FFFFFFFFFFFF019A : 002F             
(1)  315/FFFFFFFFFFFF019C : 6100 FF52           		bsr	sndUnlockZ80
(1)  316/FFFFFFFFFFFF01A0 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  317/FFFFFFFFFFFF01A4 : 51CF FFFE           		dbf	d7,*
(1)  318/FFFFFFFFFFFF01A8 : 2E1F                		move.l	(sp)+,d7
(1)  319/FFFFFFFFFFFF01AA : 4E75                		rts
(1)  321/FFFFFFFFFFFF01AC :                     
(1)  322/FFFFFFFFFFFF01AC :                     ; ====================================================================
(1)  323/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  324/FFFFFFFFFFFF01AC :                     ; Subroutines
(1)  325/FFFFFFFFFFFF01AC :                     ;
(1)  326/FFFFFFFFFFFF01AC :                     ; USER Sound calls are here
(1)  327/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  328/FFFFFFFFFFFF01AC :                     
(1)  329/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF01AC :                     ; gemaTest
(1)  331/FFFFFFFFFFFF01AC :                     ;
(1)  332/FFFFFFFFFFFF01AC :                     ; For TESTING only.
(1)  333/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF01AC :                     
(1)  335/FFFFFFFFFFFF01AC :                     gemaTest:
(1)  336/FFFFFFFFFFFF01AC : 6100 FF4C           		bsr	sndReq_Enter
(1)  337/FFFFFFFFFFFF01B0 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  338/FFFFFFFFFFFF01B4 : 6192                		bsr	sndReq_scmd
(1)  339/FFFFFFFFFFFF01B6 : 6000 FF76           		bra 	sndReq_Exit
(1)  340/FFFFFFFFFFFF01BA :                     
(1)  341/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  342/FFFFFFFFFFFF01BA :                     ; gemaSetMasterList
(1)  343/FFFFFFFFFFFF01BA :                     ;
(1)  344/FFFFFFFFFFFF01BA :                     ; Sets the Master tracklist location, data can be stored
(1)  345/FFFFFFFFFFFF01BA :                     ; on ROM, RAM* and Word-RAM*
(1)  346/FFFFFFFFFFFF01BA :                     ;
(1)  347/FFFFFFFFFFFF01BA :                     ; Input:
(1)  348/FFFFFFFFFFFF01BA :                     ; a0 | 68k pointer
(1)  349/FFFFFFFFFFFF01BA :                     ;
(1)  350/FFFFFFFFFFFF01BA :                     ; Notes:
(1)  351/FFFFFFFFFFFF01BA :                     ; - STOP ALL TRACKS WITH gemaStopAll BEFORE
(1)  352/FFFFFFFFFFFF01BA :                     ;   CALLING THIS.
(1)  353/FFFFFFFFFFFF01BA :                     ;
(1)  354/FFFFFFFFFFFF01BA :                     ; * RAM data (SCD/CD32X when using Stamps):
(1)  355/FFFFFFFFFFFF01BA :                     ;   Requires calling Sound_Update manually as a
(1)  356/FFFFFFFFFFFF01BA :                     ;   workaround for the Z80's limitation of not being
(1)  357/FFFFFFFFFFFF01BA :                     ;   able to read from RAM
(1)  358/FFFFFFFFFFFF01BA :                     ;   (BUT it can WRITE into as normal)
(1)  359/FFFFFFFFFFFF01BA :                     ; * Word-RAM (SCD/CD32X):
(1)  360/FFFFFFFFFFFF01BA :                     ;   Make sure the Word-RAM permission is set to MAIN-CPU.
(1)  361/FFFFFFFFFFFF01BA :                     ;
(1)  362/FFFFFFFFFFFF01BA :                     ; MUST USE THE MACROS TO PROPERLY SETUP THE TRACK LIST:
(1)  363/FFFFFFFFFFFF01BA :                     ; 	gemaList Tracklist_Pointer
(1)  364/FFFFFFFFFFFF01BA :                     ; 	gemaTrk 0,2,gtrk_Test
(1)  365/FFFFFFFFFFFF01BA :                     ; 	; other tracks go here
(1)  366/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  367/FFFFFFFFFFFF01BA :                     
(1)  368/FFFFFFFFFFFF01BA :                     gemaSetMasterList:
(1)  369/FFFFFFFFFFFF01BA : 6100 FF3E           		bsr	sndReq_Enter
(1)  370/FFFFFFFFFFFF01BE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  371/FFFFFFFFFFFF01C2 : 6184                		bsr	sndReq_scmd
(1)  372/FFFFFFFFFFFF01C4 : 2E08                		move.l	a0,d7
(1)  373/FFFFFFFFFFFF01C6 : 618E                		bsr	sndReq_slong
(1)  374/FFFFFFFFFFFF01C8 : 6000 FF64           		bra 	sndReq_Exit
(1)  375/FFFFFFFFFFFF01CC :                     
(1)  376/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01CC :                     ; gemaPlaySeq
(1)  378/FFFFFFFFFFFF01CC :                     ;
(1)  379/FFFFFFFFFFFF01CC :                     ; Play a sequence with arguments
(1)  380/FFFFFFFFFFFF01CC :                     ;
(1)  381/FFFFFFFFFFFF01CC :                     ; Input:
(1)  382/FFFFFFFFFFFF01CC :                     ; d0.b | Playback slot number
(1)  383/FFFFFFFFFFFF01CC :                     ;        If -1: Auto-search free slot
(1)  384/FFFFFFFFFFFF01CC :                     ; d1.b | Sequence number
(1)  385/FFFFFFFFFFFF01CC :                     ; d2.b | Starting block
(1)  386/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  387/FFFFFFFFFFFF01CC :                     
(1)  388/FFFFFFFFFFFF01CC :                     gemaPlaySeq:
(1)  389/FFFFFFFFFFFF01CC : 6100 FF2C           		bsr	sndReq_Enter
(1)  390/FFFFFFFFFFFF01D0 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  391/FFFFFFFFFFFF01D4 : 6100 FF72           		bsr	sndReq_scmd
(1)  392/FFFFFFFFFFFF01D8 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  393/FFFFFFFFFFFF01DA : 6186                		bsr	sndReq_sbyte
(1)  394/FFFFFFFFFFFF01DC : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  395/FFFFFFFFFFFF01DE : 6182                		bsr	sndReq_sbyte
(1)  396/FFFFFFFFFFFF01E0 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  397/FFFFFFFFFFFF01E2 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  398/FFFFFFFFFFFF01E6 : 6000 FF46           		bra 	sndReq_Exit
(1)  399/FFFFFFFFFFFF01EA :                     
(1)  400/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  401/FFFFFFFFFFFF01EA :                     ; gemaStopSeq
(1)  402/FFFFFFFFFFFF01EA :                     ;
(1)  403/FFFFFFFFFFFF01EA :                     ; Stops tracks with the same sequence number
(1)  404/FFFFFFFFFFFF01EA :                     ;
(1)  405/FFFFFFFFFFFF01EA :                     ; Input:
(1)  406/FFFFFFFFFFFF01EA :                     ; d0.b | Playback slot number
(1)  407/FFFFFFFFFFFF01EA :                     ;        If -1: Stop all slots
(1)  408/FFFFFFFFFFFF01EA :                     ; d1.b | Sequence number to search for
(1)  409/FFFFFFFFFFFF01EA :                     ;        If -1: Stop tracks with any sequence
(1)  410/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  411/FFFFFFFFFFFF01EA :                     
(1)  412/FFFFFFFFFFFF01EA :                     gemaStopSeq:
(1)  413/FFFFFFFFFFFF01EA : 6100 FF0E           		bsr	sndReq_Enter
(1)  414/FFFFFFFFFFFF01EE : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  415/FFFFFFFFFFFF01F2 : 6100 FF54           		bsr	sndReq_scmd
(1)  416/FFFFFFFFFFFF01F6 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  417/FFFFFFFFFFFF01F8 : 6100 FF68           		bsr	sndReq_sbyte
(1)  418/FFFFFFFFFFFF01FC : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  419/FFFFFFFFFFFF01FE : 6100 FF62           		bsr	sndReq_sbyte
(1)  420/FFFFFFFFFFFF0202 : 6000 FF2A           		bra 	sndReq_Exit
(1)  421/FFFFFFFFFFFF0206 :                     
(1)  422/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  423/FFFFFFFFFFFF0206 :                     ; gemaStopAll
(1)  424/FFFFFFFFFFFF0206 :                     ;
(1)  425/FFFFFFFFFFFF0206 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  426/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  427/FFFFFFFFFFFF0206 :                     
(1)  428/FFFFFFFFFFFF0206 :                     gemaStopAll:
(1)  429/FFFFFFFFFFFF0206 : 6100 FEF2           		bsr	sndReq_Enter
(1)  430/FFFFFFFFFFFF020A : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  431/FFFFFFFFFFFF020E : 6100 FF38           		bsr	sndReq_scmd
(1)  432/FFFFFFFFFFFF0212 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  433/FFFFFFFFFFFF0214 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  434/FFFFFFFFFFFF0218 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  435/FFFFFFFFFFFF021A : 6100 FF46           		bsr	sndReq_sbyte
(1)  436/FFFFFFFFFFFF021E : 6000 FF0E           		bra 	sndReq_Exit
(1)  437/FFFFFFFFFFFF0222 :                     
(1)  438/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  439/FFFFFFFFFFFF0222 :                     ; gemaFadeSeq
(1)  440/FFFFFFFFFFFF0222 :                     ;
(1)  441/FFFFFFFFFFFF0222 :                     ; Set Master volume to a track slot.
(1)  442/FFFFFFFFFFFF0222 :                     ;
(1)  443/FFFFFFFFFFFF0222 :                     ; Input:
(1)  444/FFFFFFFFFFFF0222 :                     ; d0.b | Playback slot number
(1)  445/FFFFFFFFFFFF0222 :                     ;        If -1: Apply to all slots
(1)  446/FFFFFFFFFFFF0222 :                     ; d1.b | Target volume
(1)  447/FFFFFFFFFFFF0222 :                     ;
(1)  448/FFFFFFFFFFFF0222 :                     ; Notes:
(1)  449/FFFFFFFFFFFF0222 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  450/FFFFFFFFFFFF0222 :                     ; - In v1.0 this only works during new notes on playback.
(1)  451/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  452/FFFFFFFFFFFF0222 :                     
(1)  453/FFFFFFFFFFFF0222 :                     gemaFadeSeq:
(1)  454/FFFFFFFFFFFF0222 : 6100 FED6           		bsr	sndReq_Enter
(1)  455/FFFFFFFFFFFF0226 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  456/FFFFFFFFFFFF022A : 6100 FF1C           		bsr	sndReq_scmd
(1)  457/FFFFFFFFFFFF022E : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  458/FFFFFFFFFFFF0230 : 6100 FF30           		bsr	sndReq_sbyte
(1)  459/FFFFFFFFFFFF0234 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  460/FFFFFFFFFFFF0236 : 6100 FF2A           		bsr	sndReq_sbyte
(1)  461/FFFFFFFFFFFF023A : 6000 FEF2           		bra 	sndReq_Exit
(1)  462/FFFFFFFFFFFF023E :                     
(1)  463/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  464/FFFFFFFFFFFF023E :                     ; gemaSetSeqVol
(1)  465/FFFFFFFFFFFF023E :                     ;
(1)  466/FFFFFFFFFFFF023E :                     ; Set Master volume to a Seq slot.
(1)  467/FFFFFFFFFFFF023E :                     ;
(1)  468/FFFFFFFFFFFF023E :                     ; Input:
(1)  469/FFFFFFFFFFFF023E :                     ; d0.b | Playback slot number
(1)  470/FFFFFFFFFFFF023E :                     ;        If -1: Set to all slots
(1)  471/FFFFFFFFFFFF023E :                     ; d1.b | Master volume:
(1)  472/FFFFFFFFFFFF023E :                     ;        $00-max $40-min
(1)  473/FFFFFFFFFFFF023E :                     ;
(1)  474/FFFFFFFFFFFF023E :                     ; Notes:
(1)  475/FFFFFFFFFFFF023E :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  476/FFFFFFFFFFFF023E :                     ; - In v1.0 this only works on (re)start
(1)  477/FFFFFFFFFFFF023E :                     ;   or during new notes on playback.
(1)  478/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  479/FFFFFFFFFFFF023E :                     
(1)  480/FFFFFFFFFFFF023E :                     gemaSetSeqVol:
(1)  481/FFFFFFFFFFFF023E : 6100 FEBA           		bsr	sndReq_Enter
(1)  482/FFFFFFFFFFFF0242 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  483/FFFFFFFFFFFF0246 : 6100 FF00           		bsr	sndReq_scmd
(1)  484/FFFFFFFFFFFF024A : 1E01                		move.b	d1,d7		; d1.b Volume data <--
(1)  485/FFFFFFFFFFFF024C : 6100 FF14           		bsr	sndReq_sbyte
(1)  486/FFFFFFFFFFFF0250 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  487/FFFFFFFFFFFF0252 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  488/FFFFFFFFFFFF0256 : 6000 FED6           		bra 	sndReq_Exit
(1)  489/FFFFFFFFFFFF025A :                     
(1)  490/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  491/FFFFFFFFFFFF025A :                     ; gemaSetBeats
(1)  492/FFFFFFFFFFFF025A :                     ;
(1)  493/FFFFFFFFFFFF025A :                     ; Sets global sub-beats, affects ALL tracks.
(1)  494/FFFFFFFFFFFF025A :                     ;
(1)  495/FFFFFFFFFFFF025A :                     ; Input:
(1)  496/FFFFFFFFFFFF025A :                     ; d0.w | sub-beats
(1)  497/FFFFFFFFFFFF025A :                     ;
(1)  498/FFFFFFFFFFFF025A :                     ; Note:
(1)  499/FFFFFFFFFFFF025A :                     ; This gets auto-converted if Z80 is in PAL-speed
(1)  500/FFFFFFFFFFFF025A :                     ; mode.
(1)  501/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  502/FFFFFFFFFFFF025A :                     
(1)  503/FFFFFFFFFFFF025A :                     ; Ex. sub-beats 215 is tempo 125 on NTSC speed
(1)  504/FFFFFFFFFFFF025A :                     
(1)  505/FFFFFFFFFFFF025A :                     gemaSetBeats:
(1)  506/FFFFFFFFFFFF025A : 6100 FE9E           		bsr	sndReq_Enter
(1)  507/FFFFFFFFFFFF025E : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  508/FFFFFFFFFFFF0262 : 6100 FEE4           		bsr	sndReq_scmd
(1)  509/FFFFFFFFFFFF0266 : 3E00                		move.w	d0,d7
(1)  510/FFFFFFFFFFFF0268 : 6100 FEF4           		bsr	sndReq_sword
(1)  511/FFFFFFFFFFFF026C : 6000 FEC0           		bra 	sndReq_Exit
(1)  512/FFFFFFFFFFFF0270 :                     
     195/FFFFFFFFFFFF0270 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0270 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0270 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0270 :                     
(1)    6/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0270 :                     ; Settings
(1)    9/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0270 :                     
(1)   11/FFFFFFFFFFFF0270 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/FFFFFFFFFFFF0270 : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/FFFFFFFFFFFF0270 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/FFFFFFFFFFFF0270 :                     
(1)   15/FFFFFFFFFFFF0270 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/FFFFFFFFFFFF0270 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/FFFFFFFFFFFF0270 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/FFFFFFFFFFFF0270 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/FFFFFFFFFFFF0270 : =$6000               DEF_PrintPal		equ $6000
(1)   20/FFFFFFFFFFFF0270 :                     
(1)   21/FFFFFFFFFFFF0270 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/FFFFFFFFFFFF0270 :                     
(1)   23/FFFFFFFFFFFF0270 :                     ; ===================================================================
(1)   24/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   25/FFFFFFFFFFFF0270 :                     ; Variables
(1)   26/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0270 :                     
(1)   28/FFFFFFFFFFFF0270 :                     ; VDPATT_PL0		equ $0000
(1)   29/FFFFFFFFFFFF0270 : =$2000               VDPATTR_PL1		equ $2000
(1)   30/FFFFFFFFFFFF0270 : =$4000               VDPATTR_PL2		equ $4000
(1)   31/FFFFFFFFFFFF0270 : =$6000               VDPATTR_PL3		equ $6000
(1)   32/FFFFFFFFFFFF0270 : =$8000               VDPATTR_HI		equ $8000
(1)   33/FFFFFFFFFFFF0270 :                     
(1)   34/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   35/FFFFFFFFFFFF0270 :                     ; Use these if you are not planning changing
(1)   36/FFFFFFFFFFFF0270 :                     ; the VRAM locations of the scrolling area(s)
(1)   37/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   38/FFFFFFFFFFFF0270 : =$C000               DEF_VRAM_FG		equ $C000
(1)   39/FFFFFFFFFFFF0270 : =$E000               DEF_VRAM_BG		equ $E000
(1)   40/FFFFFFFFFFFF0270 : =$D000               DEF_VRAM_WD		equ $D000
(1)   41/FFFFFFFFFFFF0270 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   42/FFFFFFFFFFFF0270 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   43/FFFFFFFFFFFF0270 :                     
(1)   44/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   45/FFFFFFFFFFFF0270 :                     ; H sizes for the current layer
(1)   46/FFFFFFFFFFFF0270 :                     ;
(1)   47/FFFFFFFFFFFF0270 :                     ; Note:
(1)   48/FFFFFFFFFFFF0270 :                     ; WINDOW's width changes between H32 and H40
(1)   49/FFFFFFFFFFFF0270 :                     ; resolution modes.
(1)   50/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   51/FFFFFFFFFFFF0270 : =$40                 DEF_HSIZE_32		equ $040
(1)   52/FFFFFFFFFFFF0270 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   53/FFFFFFFFFFFF0270 : =$100                DEF_HSIZE_128		equ $100
(1)   54/FFFFFFFFFFFF0270 :                     
(1)   55/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   56/FFFFFFFFFFFF0270 :                     ; VDP registers
(1)   57/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   58/FFFFFFFFFFFF0270 :                     ; $80
(1)   59/FFFFFFFFFFFF0270 : =$2                  HVStop			equ $02
(1)   60/FFFFFFFFFFFF0270 : =$10                 HintEnbl		equ $10
(1)   61/FFFFFFFFFFFF0270 : =$1                  bitHVStop		equ 1
(1)   62/FFFFFFFFFFFF0270 : =$4                  bitHintEnbl		equ 4
(1)   63/FFFFFFFFFFFF0270 :                     ; $81
(1)   64/FFFFFFFFFFFF0270 : =$40                 DispEnbl 		equ $40
(1)   65/FFFFFFFFFFFF0270 : =$20                 VintEnbl 		equ $20
(1)   66/FFFFFFFFFFFF0270 : =$10                 DmaEnbl			equ $10
(1)   67/FFFFFFFFFFFF0270 : =$6                  bitDispEnbl		equ 6
(1)   68/FFFFFFFFFFFF0270 : =$5                  bitVintEnbl		equ 5
(1)   69/FFFFFFFFFFFF0270 : =$4                  bitDmaEnbl		equ 4
(1)   70/FFFFFFFFFFFF0270 : =$3                  bitV30			equ 3
(1)   71/FFFFFFFFFFFF0270 :                     
(1)   72/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   73/FFFFFFFFFFFF0270 :                     ; VDP VRAM bits
(1)   74/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   75/FFFFFFFFFFFF0270 :                     ; BYTE read:
(1)   76/FFFFFFFFFFFF0270 : =$7                  bitAttrPrio		equ 7
(1)   77/FFFFFFFFFFFF0270 : =$4                  bitAttrV		equ 4
(1)   78/FFFFFFFFFFFF0270 : =$3                  bitAttrH		equ 3
(1)   79/FFFFFFFFFFFF0270 :                     ; WORD read:
(1)   80/FFFFFFFFFFFF0270 : =$8000               AttrPrio		equ $8000
(1)   81/FFFFFFFFFFFF0270 : =$1000               AttrV			equ $1000
(1)   82/FFFFFFFFFFFF0270 : =$800                AttrH			equ $0800
(1)   83/FFFFFFFFFFFF0270 :                     
(1)   84/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   85/FFFFFFFFFFFF0270 :                     ; vdp_ctrl READ bits
(1)   86/FFFFFFFFFFFF0270 :                     ; Read as WORD
(1)   87/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF0270 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   89/FFFFFFFFFFFF0270 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   90/FFFFFFFFFFFF0270 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   91/FFFFFFFFFFFF0270 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   92/FFFFFFFFFFFF0270 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   93/FFFFFFFFFFFF0270 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   94/FFFFFFFFFFFF0270 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   95/FFFFFFFFFFFF0270 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   96/FFFFFFFFFFFF0270 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   97/FFFFFFFFFFFF0270 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   98/FFFFFFFFFFFF0270 :                     
(1)   99/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  100/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF0270 :                     ; Structs
(1)  102/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF0270 :                     
(1)  104/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF0270 :                     ; RAM_PalFadeList
(1)  106/       0 :                     palfd			struct
(1)  107/       0 :                     req			ds.b 1
(1)  108/       1 :                     delay			ds.b 1
(1)  109/       2 :                     start			ds.b 1
(1)  110/       3 :                     incr			ds.b 1
(1)  111/       4 :                     target			ds.b 1
(1)  112/       5 :                     timer			ds.b 1
(1)  113/       6 :                     num			ds.w 1
(1)  114/       8 :                     ; len		ds.l 0
(1)  115/FFFFFFFFFFFF0270 : =$8                  			endstruct
(1)  116/FFFFFFFFFFFF0270 :                     
(1)  117/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)  118/FFFFFFFFFFFF0270 :                     ; RAM_MdMcd_Stamps
(1)  119/FFFFFFFFFFFF0270 :                     
(1)  120/       0 :                     mdstmp		struct
(1)  121/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  122/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  123/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  124/       6 :                     vramSize	ds.w 1
(1)  125/       8 :                     vramLen		ds.w 1		; temporals
(1)  126/       A :                     vramIncr	ds.w 1		; ''
(1)  127/       C :                     stmpoutb	ds.w 1
(1)  128/       E :                     currOutFlip	ds.w 1
(1)  129/      10 :                     fdrop		ds.w 1
(1)  130/      12 :                     cellstorage	ds.l 1
(1)  131/      16 :                     dotIncr		ds.l 1
(1)  132/      1A :                     buffIncr	ds.l 1
(1)  133/      1E :                     ; len		ds.l 0
(1)  134/FFFFFFFFFFFF0270 : =$1E                 		endstruct
(1)  135/FFFFFFFFFFFF0270 :                     
(1)  136/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  137/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  138/FFFFFFFFFFFF0270 :                     ; RAM section
(1)  139/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  140/FFFFFFFFFFFF0270 :                     
(1)  141/FFFFFFFFFFFF0270 : (MACRO)              			memory RAM_MdVideo
(1)  141/FFFFFFFFFFFF0270 : =$FFFFFFFFFFFF0270   GLBL_LASTPC     := *
(1)  141/    2DCE :                                     dephase
(1)  141/FFFFFFFFFFFFD880 :                                     phase RAM_MDVIDEO
(1)  141/FFFFFFFFFFFFD880 : =$FFFFFFFFFFFFD880   GLBL_LASTORG    := *
(1)  142/FFFFFFFFFFFFD880 :                     	; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFFD880 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  144/FFFFFFFFFFFFD8C0 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  145/FFFFFFFFFFFFDA40 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  146/FFFFFFFFFFFFDCC0 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  147/FFFFFFFFFFFFE080 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  148/FFFFFFFFFFFFE0D0 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  149/FFFFFFFFFFFFE5D0 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  150/FFFFFFFFFFFFE650 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  151/FFFFFFFFFFFFE6D0 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  152/FFFFFFFFFFFFE6D0 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  153/FFFFFFFFFFFFE6D2 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  154/FFFFFFFFFFFFE6D4 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  155/FFFFFFFFFFFFE6D8 :                     
(1)  156/FFFFFFFFFFFFE6D8 :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  157/FFFFFFFFFFFFE6D8 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  158/FFFFFFFFFFFFE858 :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  159/FFFFFFFFFFFFE85C :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  160/FFFFFFFFFFFFE85E :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  161/FFFFFFFFFFFFE860 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  162/FFFFFFFFFFFFE862 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  163/FFFFFFFFFFFFE864 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  164/FFFFFFFFFFFFE866 :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  165/FFFFFFFFFFFFE868 :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  166/FFFFFFFFFFFFE86A :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  167/FFFFFFFFFFFFE86C :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  168/FFFFFFFFFFFFE86E :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  169/FFFFFFFFFFFFE870 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  170/FFFFFFFFFFFFE872 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  171/FFFFFFFFFFFFE874 :                     sizeof_mdvid		ds.l 0
(1)  172/FFFFFFFFFFFFE878 : (MACRO)              			endmemory
(1)  172/    3DC6 :                     .here:          dephase
(1)  172/    3DC6 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  172/FFFFFFFFFFFF0270 :                                     phase GLBL_LASTPC
(1)  173/FFFFFFFFFFFF0270 :                     
(1)  174/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  175/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  176/FFFFFFFFFFFF0270 :                     ; Initialize Genesis video
(1)  177/FFFFFFFFFFFF0270 :                     ;
(1)  178/FFFFFFFFFFFF0270 :                     ; Uses:
(1)  179/FFFFFFFFFFFF0270 :                     ; d5-d7/a5-a6
(1)  180/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  181/FFFFFFFFFFFF0270 :                     
(1)  182/FFFFFFFFFFFF0270 :                     Video_Init:
(1)  183/FFFFFFFFFFFF0270 : 4DF8 D880           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  184/FFFFFFFFFFFF0274 : 7C00                		moveq	#0,d6
(1)  185/FFFFFFFFFFFF0276 : 3E3C 0FF3           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  186/FFFFFFFFFFFF027A :                     .clr_ram:
(1)  187/FFFFFFFFFFFF027A : 1CC6                		move.b	d6,(a6)+
(1)  188/FFFFFFFFFFFF027C : 51CF FFFC           		dbf	d7,.clr_ram
(1)  189/FFFFFFFFFFFF0280 : 4DF8 E6D8           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  190/FFFFFFFFFFFF0284 : 4BFA 0072           		lea	.dma_entry(pc),a5
(1)  191/FFFFFFFFFFFF0288 : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  192/FFFFFFFFFFFF028C :                     .copy_dma:
(1)  193/FFFFFFFFFFFF028C : 2CD5                		move.l	(a5),(a6)+
(1)  194/FFFFFFFFFFFF028E : 2CED 0004           		move.l	4(a5),(a6)+
(1)  195/FFFFFFFFFFFF0292 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  196/FFFFFFFFFFFF0296 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  197/FFFFFFFFFFFF029A : 51CF FFF0           		dbf	d7,.copy_dma
(1)  198/FFFFFFFFFFFF029E : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6
(1)  199/FFFFFFFFFFFF02A2 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  200/FFFFFFFFFFFF02A6 :                     .clr_d:
(1)  201/FFFFFFFFFFFF02A6 : 429E                		clr.l	(a6)+
(1)  202/FFFFFFFFFFFF02A8 : 429E                		clr.l	(a6)+
(1)  203/FFFFFFFFFFFF02AA : 429E                		clr.l	(a6)+
(1)  204/FFFFFFFFFFFF02AC : 429E                		clr.l	(a6)+
(1)  205/FFFFFFFFFFFF02AE : 51CF FFF6           		dbf	d7,.clr_d
(1)  206/FFFFFFFFFFFF02B2 :                     
(1)  207/FFFFFFFFFFFF02B2 : 4278 E85C           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  208/FFFFFFFFFFFF02B6 : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1)  209/FFFFFFFFFFFF02BA : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  210/FFFFFFFFFFFF02BE :                     .clr_preq:
(1)  211/FFFFFFFFFFFF02BE : 429E                		clr.l	(a6)+
(1)  212/FFFFFFFFFFFF02C0 : 429E                		clr.l	(a6)+
(1)  213/FFFFFFFFFFFF02C2 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  215/FFFFFFFFFFFF02C6 : 4278 CC1E           		clr.w	(RAM_MdMars_IndxPalFd).w
(1)  216/FFFFFFFFFFFF02CA : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1)  217/FFFFFFFFFFFF02CE : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  218/FFFFFFFFFFFF02D2 :                     .clr_mreq:
(1)  219/FFFFFFFFFFFF02D2 : 429E                		clr.l	(a6)+
(1)  220/FFFFFFFFFFFF02D4 : 429E                		clr.l	(a6)+
(1)  221/FFFFFFFFFFFF02D6 : 51CF FFFA           		dbf	d7,.clr_mreq
(1)  223/FFFFFFFFFFFF02DA : 4CBA 000F 002C      		movem.w	.def_regset(pc),d0-d3
(1)  224/FFFFFFFFFFFF02E0 : 48B8 000F E86C      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  225/FFFFFFFFFFFF02E6 : 23F8 E86C 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
         FFFFFFFFFFFF02EC : 0004             
(1)  226/FFFFFFFFFFFF02EE : 23F8 E870 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
         FFFFFFFFFFFF02F4 : 0004             
(1)  227/FFFFFFFFFFFF02F6 : 601C                		bra	Video_Default
(1)  228/FFFFFFFFFFFF02F8 :                     
(1)  229/FFFFFFFFFFFF02F8 :                     ; --------------------------------------------------------
(1)  230/FFFFFFFFFFFF02F8 :                     ; DMA blast base entry
(1)  231/FFFFFFFFFFFF02F8 :                     .dma_entry:
(1)  232/FFFFFFFFFFFF02F8 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  233/FFFFFFFFFFFF02FC : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  234/FFFFFFFFFFFF0302 : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  235/FFFFFFFFFFFF0306 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  236/FFFFFFFFFFFF0308 :                     		align 2
(1)  237/FFFFFFFFFFFF030A :                     .def_regset:
(1)  238/FFFFFFFFFFFF030A : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
         FFFFFFFFFFFF0310 : 8C00             
(1)  239/FFFFFFFFFFFF0312 :                     		align 2
(1)  240/FFFFFFFFFFFF0314 :                     
(1)  241/FFFFFFFFFFFF0314 :                     ; --------------------------------------------------------
(1)  242/FFFFFFFFFFFF0314 :                     ; Video_Default
(1)  243/FFFFFFFFFFFF0314 :                     ; --------------------------------------------------------
(1)  244/FFFFFFFFFFFF0314 :                     
(1)  245/FFFFFFFFFFFF0314 :                     Video_Default:
(1)  247/FFFFFFFFFFFF0314 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1)  248/FFFFFFFFFFFF0318 : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1)  249/FFFFFFFFFFFF031C :                     .clr_stamps:
(1)  250/FFFFFFFFFFFF031C :                     	rept $20/4
(1)  251/FFFFFFFFFFFF031C :                     		clr.l	(a6)+
(1)  252/FFFFFFFFFFFF031C :                     	endm
(1)  251/FFFFFFFFFFFF031C : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF031E : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF0320 : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF0322 : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF0324 : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF0326 : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF0328 : 429E                		clr.l	(a6)+
(1)  251/FFFFFFFFFFFF032A : 429E                		clr.l	(a6)+
(1)  253/FFFFFFFFFFFF032C : 51CF FFEE           		dbf	d7,.clr_stamps
(1)  255/FFFFFFFFFFFF0330 : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
         FFFFFFFFFFFF0336 : 00C0 0004          
(1)  256/FFFFFFFFFFFF033A : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
         FFFFFFFFFFFF0340 : 0004             
(1)  257/FFFFFFFFFFFF0342 : 31FC C000 E860      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  258/FFFFFFFFFFFF0348 : 31FC E000 E862      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  259/FFFFFFFFFFFF034E : 31FC D000 E864      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  260/FFFFFFFFFFFF0354 : 31FC F800 E866      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  261/FFFFFFFFFFFF035A : 31FC FC00 E868      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  262/FFFFFFFFFFFF0360 : 31FC 1000 E86A      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  263/FFFFFFFFFFFF0366 : 6100 045A           		bsr	Video_UpdMapVram
(1)  264/FFFFFFFFFFFF036A : 6100 04A8           		bsr	Video_UpdSprHVram
(1)  265/FFFFFFFFFFFF036E : 7001                		moveq	#1,d0					; Size H64 V32
(1)  266/FFFFFFFFFFFF0370 : 7200                		moveq	#0,d1
(1)  267/FFFFFFFFFFFF0372 : 6100 04DA           		bsr	Video_SetMapSize
(1)  268/FFFFFFFFFFFF0376 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  269/FFFFFFFFFFFF0378 : 7200                		moveq	#0,d1
(1)  270/FFFFFFFFFFFF037A : 6000 03F2           		bra	Video_Resolution
(1)  271/FFFFFFFFFFFF037E :                     
(1)  272/FFFFFFFFFFFF037E :                     ; ====================================================================
(1)  273/FFFFFFFFFFFF037E :                     ; --------------------------------------------------------
(1)  274/FFFFFFFFFFFF037E :                     ; Video_Render
(1)  275/FFFFFFFFFFFF037E :                     ;
(1)  276/FFFFFFFFFFFF037E :                     ; Call this during VBlank to update the VDP visuals
(1)  277/FFFFFFFFFFFF037E :                     ; and process the DMA BLAST list, also resets a
(1)  278/FFFFFFFFFFFF037E :                     ; few variables.
(1)  279/FFFFFFFFFFFF037E :                     ; (This is already called on System_Render)
(1)  280/FFFFFFFFFFFF037E :                     ;
(1)  281/FFFFFFFFFFFF037E :                     ; Uses:
(1)  282/FFFFFFFFFFFF037E :                     ; ALL
(1)  283/FFFFFFFFFFFF037E :                     ; --------------------------------------------------------
(1)  284/FFFFFFFFFFFF037E :                     
(1)  285/FFFFFFFFFFFF037E :                     Video_Render:
(1)  286/FFFFFFFFFFFF037E : 6100 0378           		bsr	Video_DmaOn
(1)  287/FFFFFFFFFFFF0382 : 6100 1A9E           		bsr	System_DmaEnter_RAM
(1)  288/FFFFFFFFFFFF0386 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  289/FFFFFFFFFFFF038C : 3E38 E866           		move.w	(RAM_VdpVramSpr).w,d7
(1)  290/FFFFFFFFFFFF0390 : 3A38 E868           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  291/FFFFFFFFFFFF0394 : 3C07                		move.w	d7,d6
(1)  292/FFFFFFFFFFFF0396 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  293/FFFFFFFFFFFF039A : 0047 4000           		ori.w	#$4000,d7
(1)  294/FFFFFFFFFFFF039E : E55E                		rol.w	#2,d6
(1)  295/FFFFFFFFFFFF03A0 : 0246 0003           		andi.w	#%11,d6
(1)  296/FFFFFFFFFFFF03A4 : 8C7C 0080           		or.w	#$80,d6
(1)  297/FFFFFFFFFFFF03A8 : 3805                		move.w	d5,d4
(1)  298/FFFFFFFFFFFF03AA : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  299/FFFFFFFFFFFF03AE : 0045 4000           		ori.w	#$4000,d5
(1)  300/FFFFFFFFFFFF03B2 : E55C                		rol.w	#2,d4
(1)  301/FFFFFFFFFFFF03B4 : 0244 0003           		andi.w	#%11,d4
(1)  302/FFFFFFFFFFFF03B8 : 887C 0080           		or.w	#$80,d4
(1)  303/FFFFFFFFFFFF03BC : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  304/FFFFFFFFFFFF03C2 : 2CBC 96F0 9568      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  305/FFFFFFFFFFFF03C8 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  306/FFFFFFFFFFFF03CC : 3C87                		move.w	d7,(a6)
(1)  307/FFFFFFFFFFFF03CE : 3F06                		move.w	d6,-(sp)
(1)  308/FFFFFFFFFFFF03D0 : 3C9F                		move.w	(sp)+,(a6)
(1)  309/FFFFFFFFFFFF03D2 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  310/FFFFFFFFFFFF03D8 : 2CBC 96EE 9560      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  311/FFFFFFFFFFFF03DE : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  312/FFFFFFFFFFFF03E2 : 3C85                		move.w	d5,(a6)
(1)  313/FFFFFFFFFFFF03E4 : 3F04                		move.w	d4,-(sp)
(1)  314/FFFFFFFFFFFF03E6 : 3C9F                		move.w	(sp)+,(a6)
(1)  315/FFFFFFFFFFFF03E8 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  316/FFFFFFFFFFFF03EE : 2CBC 96F0 9540      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  317/FFFFFFFFFFFF03F4 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  318/FFFFFFFFFFFF03F8 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  319/FFFFFFFFFFFF03FC : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  320/FFFFFFFFFFFF0400 : 3C9F                		move.w	(sp)+,(a6)
(1)  321/FFFFFFFFFFFF0402 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  322/FFFFFFFFFFFF0408 : 2CBC 96F2 95E8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  323/FFFFFFFFFFFF040E : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  324/FFFFFFFFFFFF0412 : 3CBC C000           		move.w	#$C000,(a6)
(1)  325/FFFFFFFFFFFF0416 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  326/FFFFFFFFFFFF041A : 3C9F                		move.w	(sp)+,(a6)
(1)  327/FFFFFFFFFFFF041C : 6100 1A08           		bsr	System_DmaExit_RAM
(1)  328/FFFFFFFFFFFF0420 : 6100 02E2           		bsr	Video_DmaOff
(1)  329/FFFFFFFFFFFF0424 :                     
(1)  330/FFFFFFFFFFFF0424 :                     ; --------------------------------------------------------
(1)  331/FFFFFFFFFFFF0424 :                     ; Struct:
(1)  332/FFFFFFFFFFFF0424 :                     ; dc.w $94xx,$93xx		; Size
(1)  333/FFFFFFFFFFFF0424 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  334/FFFFFFFFFFFF0424 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  335/FFFFFFFFFFFF0424 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  336/FFFFFFFFFFFF0424 : 4A78 E6D2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  337/FFFFFFFFFFFF0428 : 6650                		bne.s	.exit
(1)  338/FFFFFFFFFFFF042A : 4A78 E6D0           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  339/FFFFFFFFFFFF042E : 674A                		beq.s	.exit
(1)  340/FFFFFFFFFFFF0430 : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  341/FFFFFFFFFFFF0436 : 47F8 E6D8           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  342/FFFFFFFFFFFF043A : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  343/FFFFFFFFFFFF043E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  344/FFFFFFFFFFFF0442 : 3887                		move.w	d7,(a4)
(1)  345/FFFFFFFFFFFF0444 : 6100 19A2           		bsr	System_DmaEnter_ROM
(1)  346/FFFFFFFFFFFF0448 : 4A78 E6D0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  347/FFFFFFFFFFFF044C : 6722                		beq.s	.end
(1)  348/FFFFFFFFFFFF044E : 289B                		move.l	(a3)+,(a4)			; Size
(1)  349/FFFFFFFFFFFF0450 : 289B                		move.l	(a3)+,(a4)			; Source
(1)  350/FFFFFFFFFFFF0452 : 389B                		move.w	(a3)+,(a4)
(1)  351/FFFFFFFFFFFF0454 :                     	; CD/CD32X
(1)  353/FFFFFFFFFFFF0454 : 361B                		move.w	(a3)+,d3			; Destination
(1)  354/FFFFFFFFFFFF0456 : 341B                		move.w	(a3)+,d2
(1)  355/FFFFFFFFFFFF0458 : 3F02                		move.w	d2,-(sp)			; Use stack for this write
(1)  356/FFFFFFFFFFFF045A : 3883                		move.w	d3,(a4)
(1)  357/FFFFFFFFFFFF045C : 389F                		move.w	(sp)+,(a4)			; *** CPU freezes ***
(1)  358/FFFFFFFFFFFF045E : 0242 FF7F           		andi.w	#$FF7F,d2			; Remove DMA bit
(1)  359/FFFFFFFFFFFF0462 : 3883                		move.w	d3,(a4)				; Set VDP control normally
(1)  360/FFFFFFFFFFFF0464 : 3882                		move.w	d2,(a4)
(1)  361/FFFFFFFFFFFF0466 : 395B FFFC           		move.w	(a3)+,-4(a4)			; Write the patch data
(1)  362/FFFFFFFFFFFF046A :                     	; Cartridge
(1)  368/FFFFFFFFFFFF046A : 5378 E6D0           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  369/FFFFFFFFFFFF046E : 60D8                		bra.s	.next
(1)  370/FFFFFFFFFFFF0470 :                     .end:
(1)  371/FFFFFFFFFFFF0470 : 6100 197A           		bsr	System_DmaExit_ROM
(1)  372/FFFFFFFFFFFF0474 : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  373/FFFFFFFFFFFF0478 : 3887                		move.w	d7,(a4)
(1)  374/FFFFFFFFFFFF047A :                     .exit:
(1)  375/FFFFFFFFFFFF047A : 4E75                		rts
(1)  376/FFFFFFFFFFFF047C :                     
(1)  377/FFFFFFFFFFFF047C :                     ; ====================================================================
(1)  378/FFFFFFFFFFFF047C :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF047C :                     ; Video_BuildSprites
(1)  380/FFFFFFFFFFFF047C :                     ;
(1)  381/FFFFFFFFFFFF047C :                     ; Build VDP Sprite pieces and maps
(1)  382/FFFFFFFFFFFF047C :                     ; --------------------------------------------------------
(1)  383/FFFFFFFFFFFF047C :                     
(1)  384/FFFFFFFFFFFF047C :                     Video_BuildSprites:
(1)  385/FFFFFFFFFFFF047C : 31FC 0001 E85E      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  386/FFFFFFFFFFFF0482 : 4DF8 E0D0           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  387/FFFFFFFFFFFF0486 : 3C38 E85E           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  388/FFFFFFFFFFFF048A : BC7C 0050           		cmp.w	#80,d6
(1)  389/FFFFFFFFFFFF048E : 6C00 0174           		bge	.stop_all
(1)  390/FFFFFFFFFFFF0492 : 3A06                		move.w	d6,d5
(1)  391/FFFFFFFFFFFF0494 : 5345                		subq.w	#1,d5
(1)  392/FFFFFFFFFFFF0496 : 6B04                		bmi	.first_spr
(1)  393/FFFFFFFFFFFF0498 : E74D                		lsl.w	#3,d5
(1)  394/FFFFFFFFFFFF049A : DCC5                		adda	d5,a6
(1)  395/FFFFFFFFFFFF049C :                     .first_spr:
(1)  396/FFFFFFFFFFFF049C : 4BF8 DA40           		lea	(RAM_SprPzList).w,a5
(1)  397/FFFFFFFFFFFF04A0 : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  398/FFFFFFFFFFFF04A4 :                     .next_pz:
(1)  399/FFFFFFFFFFFF04A4 : 0C46 0050           		cmpi.w	#80,d6
(1)  400/FFFFFFFFFFFF04A8 : 6E00 015A           		bgt	.stop_all
(1)  401/FFFFFFFFFFFF04AC : 0815 0007           		btst	#7,(a5)
(1)  402/FFFFFFFFFFFF04B0 : 6722                		beq	.no_slot_s
(1)  403/FFFFFFFFFFFF04B2 : 3015                		move.w	(a5),d0				; This slot is used?
(1)  404/FFFFFFFFFFFF04B4 : 3200                		move.w	d0,d1
(1)  405/FFFFFFFFFFFF04B6 : 0241 3C00           		andi.w	#$3C00,d1
(1)  406/FFFFFFFFFFFF04BA : E449                		lsr.w	#2,d1
(1)  407/FFFFFFFFFFFF04BC : D246                		add.w	d6,d1
(1)  408/FFFFFFFFFFFF04BE : 342D 0004           		move.w	4(a5),d2
(1)  409/FFFFFFFFFFFF04C2 : 362D 0002           		move.w	2(a5),d3
(1)  410/FFFFFFFFFFFF04C6 : 0240 03FF           		andi.w	#$03FF,d0
(1)  411/FFFFFFFFFFFF04CA : 3CC0                		move.w	d0,(a6)+
(1)  412/FFFFFFFFFFFF04CC : 3CC1                		move.w	d1,(a6)+
(1)  413/FFFFFFFFFFFF04CE : 3CC2                		move.w	d2,(a6)+
(1)  414/FFFFFFFFFFFF04D0 : 3CC3                		move.w	d3,(a6)+
(1)  415/FFFFFFFFFFFF04D2 : 5246                		addq.w	#1,d6
(1)  416/FFFFFFFFFFFF04D4 :                     .no_slot_s:
(1)  417/FFFFFFFFFFFF04D4 : DAFC 0008           		adda	#$08,a5
(1)  418/FFFFFFFFFFFF04D8 : 51CF FFCA           		dbf	d7,.next_pz
(1)  419/FFFFFFFFFFFF04DC : 4BF8 D8C0           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  420/FFFFFFFFFFFF04E0 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  421/FFFFFFFFFFFF04E4 :                     .next:
(1)  422/FFFFFFFFFFFF04E4 : 0815 0007           		btst	#7,(a5)
(1)  423/FFFFFFFFFFFF04E8 : 6700 0110           		beq	.no_map
(1)  424/FFFFFFFFFFFF04EC : 2055                		move.l	(a5),a0
(1)  425/FFFFFFFFFFFF04EE : 4847                		swap	d7
(1)  426/FFFFFFFFFFFF04F0 : 7000                		moveq	#0,d0
(1)  427/FFFFFFFFFFFF04F2 : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  428/FFFFFFFFFFFF04F6 : D040                		add.w	d0,d0
(1)  429/FFFFFFFFFFFF04F8 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  430/FFFFFFFFFFFF04FC : 41F0 0000           		lea	(a0,d0.w),a0
(1)  431/FFFFFFFFFFFF0500 : 3A18                		move.w	(a0)+,d5
(1)  432/FFFFFFFFFFFF0502 : 6700 00F6           		beq	.no_map
(1)  433/FFFFFFFFFFFF0506 : 5345                		subq.w	#1,d5
(1)  434/FFFFFFFFFFFF0508 :                     .mk_pz:
(1)  435/FFFFFFFFFFFF0508 : 0C46 0050           		cmpi.w	#80,d6
(1)  436/FFFFFFFFFFFF050C : 6E00 00F6           		bgt	.stop_all
(1)  437/FFFFFFFFFFFF0510 : 4845                		swap	d5
(1)  438/FFFFFFFFFFFF0512 : 4846                		swap	d6
(1)  439/FFFFFFFFFFFF0514 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  440/FFFFFFFFFFFF0516 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  441/FFFFFFFFFFFF0518 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  442/FFFFFFFFFFFF051A : 0838 0002 E873      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  443/FFFFFFFFFFFF0520 : 6710                		beq.s	.ex_vram
(1)  444/FFFFFFFFFFFF0522 : 3801                		move.w	d1,d4
(1)  445/FFFFFFFFFFFF0524 : 0241 000C           		andi.w	#%1100,d1
(1)  446/FFFFFFFFFFFF0528 : 0244 0003           		andi.w	#%0011,d4
(1)  447/FFFFFFFFFFFF052C : E24C                		lsr.w	#1,d4
(1)  448/FFFFFFFFFFFF052E : 8244                		or.w	d4,d1
(1)  449/FFFFFFFFFFFF0530 : E24A                		lsr.w	#1,d2
(1)  450/FFFFFFFFFFFF0532 :                     .ex_vram:
(1)  451/FFFFFFFFFFFF0532 : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  452/FFFFFFFFFFFF0536 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  453/FFFFFFFFFFFF0538 : 4880                		ext.w	d0
(1)  454/FFFFFFFFFFFF053A : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  455/FFFFFFFFFFFF053E : 3805                		move.w	d5,d4
(1)  456/FFFFFFFFFFFF0540 : 0838 0002 E873      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  457/FFFFFFFFFFFF0546 : 670E                		beq.s	.ex_vrams
(1)  458/FFFFFFFFFFFF0548 : 3805                		move.w	d5,d4
(1)  459/FFFFFFFFFFFF054A : 0244 F800           		andi.w	#$F800,d4
(1)  460/FFFFFFFFFFFF054E : 0245 07FF           		andi.w	#$07FF,d5
(1)  461/FFFFFFFFFFFF0552 : E24D                		lsr.w	#1,d5
(1)  462/FFFFFFFFFFFF0554 : 8A44                		or.w	d4,d5
(1)  463/FFFFFFFFFFFF0556 :                     .ex_vrams:
(1)  464/FFFFFFFFFFFF0556 : 3805                		move.w	d5,d4
(1)  465/FFFFFFFFFFFF0558 : 0244 1000           		andi.w	#$1000,d4
(1)  466/FFFFFFFFFFFF055C : 6710                		beq.s	.vram_v
(1)  467/FFFFFFFFFFFF055E : 4440                		neg.w	d0
(1)  468/FFFFFFFFFFFF0560 : 0440 0008           		subi.w	#8,d0
(1)  469/FFFFFFFFFFFF0564 : 3C01                		move.w	d1,d6
(1)  470/FFFFFFFFFFFF0566 : 0246 0003           		andi.w	#%0011,d6
(1)  471/FFFFFFFFFFFF056A : E74E                		lsl.w	#3,d6
(1)  472/FFFFFFFFFFFF056C : 9046                		sub.w	d6,d0
(1)  473/FFFFFFFFFFFF056E :                     .vram_v:
(1)  474/FFFFFFFFFFFF056E : 3805                		move.w	d5,d4
(1)  475/FFFFFFFFFFFF0570 : 0244 0800           		andi.w	#$0800,d4
(1)  476/FFFFFFFFFFFF0574 : 6710                		beq.s	.vram_h
(1)  477/FFFFFFFFFFFF0576 : 4443                		neg.w	d3
(1)  478/FFFFFFFFFFFF0578 : 0443 0008           		subi.w	#8,d3
(1)  479/FFFFFFFFFFFF057C : 3C01                		move.w	d1,d6
(1)  480/FFFFFFFFFFFF057E : 0246 000C           		andi.w	#%1100,d6
(1)  481/FFFFFFFFFFFF0582 : DC46                		add.w	d6,d6
(1)  482/FFFFFFFFFFFF0584 : 9646                		sub.w	d6,d3
(1)  483/FFFFFFFFFFFF0586 :                     .vram_h:
(1)  484/FFFFFFFFFFFF0586 : D445                		add.w	d5,d2
(1)  485/FFFFFFFFFFFF0588 : 4845                		swap	d5
(1)  486/FFFFFFFFFFFF058A : 4846                		swap	d6
(1)  487/FFFFFFFFFFFF058C : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  488/FFFFFFFFFFFF0590 : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  489/FFFFFFFFFFFF0594 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  490/FFFFFFFFFFFF0598 : 6C5C                		bge.s	.no_pz
(1)  491/FFFFFFFFFFFF059A : 3801                		move.w	d1,d4
(1)  492/FFFFFFFFFFFF059C : 0244 000C           		andi.w	#%1100,d4
(1)  493/FFFFFFFFFFFF05A0 : D844                		add.w	d4,d4
(1)  494/FFFFFFFFFFFF05A2 : D87C 0008           		add.w	#8,d4
(1)  495/FFFFFFFFFFFF05A6 : 3E03                		move.w	d3,d7
(1)  496/FFFFFFFFFFFF05A8 : DE44                		add.w	d4,d7
(1)  497/FFFFFFFFFFFF05AA : 6B4A                		bmi.s	.no_pz
(1)  498/FFFFFFFFFFFF05AC : 383C 00F0           		move.w	#240,d4
(1)  499/FFFFFFFFFFFF05B0 : 0838 0002 E873      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  500/FFFFFFFFFFFF05B6 : 6702                		beq.s	.ex_yext
(1)  501/FFFFFFFFFFFF05B8 : D844                		add.w	d4,d4
(1)  502/FFFFFFFFFFFF05BA :                     .ex_yext:
(1)  503/FFFFFFFFFFFF05BA : B044                		cmp.w	d4,d0
(1)  504/FFFFFFFFFFFF05BC : 6C38                		bge.s	.no_pz
(1)  505/FFFFFFFFFFFF05BE : 3801                		move.w	d1,d4
(1)  506/FFFFFFFFFFFF05C0 : 0244 0003           		andi.w	#%0011,d4
(1)  507/FFFFFFFFFFFF05C4 : E74C                		lsl.w	#3,d4
(1)  508/FFFFFFFFFFFF05C6 : D87C 0008           		add.w	#8,d4
(1)  509/FFFFFFFFFFFF05CA : 3E00                		move.w	d0,d7
(1)  510/FFFFFFFFFFFF05CC : DE44                		add.w	d4,d7
(1)  511/FFFFFFFFFFFF05CE : 6B26                		bmi.s	.no_pz
(1)  512/FFFFFFFFFFFF05D0 : E149                		lsl.w	#8,d1			; Size + Link
(1)  513/FFFFFFFFFFFF05D2 : 8246                		or.w	d6,d1
(1)  514/FFFFFFFFFFFF05D4 : 0640 0080           		addi.w	#$80,d0
(1)  515/FFFFFFFFFFFF05D8 : 3838 E872           		move.w	(RAM_VdpRegSetC).w,d4
(1)  516/FFFFFFFFFFFF05DC : 0804 0002           		btst	#2,d4
(1)  517/FFFFFFFFFFFF05E0 : 6704                		beq.s	.dont_add
(1)  518/FFFFFFFFFFFF05E2 : 0640 0080           		addi.w	#$80,d0
(1)  519/FFFFFFFFFFFF05E6 :                     .dont_add:
(1)  520/FFFFFFFFFFFF05E6 : 0643 0080           		addi.w	#$80,d3
(1)  521/FFFFFFFFFFFF05EA : 3CC0                		move.w	d0,(a6)+
(1)  522/FFFFFFFFFFFF05EC : 3CC1                		move.w	d1,(a6)+
(1)  523/FFFFFFFFFFFF05EE : 3CC2                		move.w	d2,(a6)+
(1)  524/FFFFFFFFFFFF05F0 : 3CC3                		move.w	d3,(a6)+
(1)  525/FFFFFFFFFFFF05F2 : DC7C 0001           		add.w	#1,d6
(1)  526/FFFFFFFFFFFF05F6 :                     .no_pz:
(1)  527/FFFFFFFFFFFF05F6 : 51CD FF10           		dbf	d5,.mk_pz
(1)  528/FFFFFFFFFFFF05FA :                     .no_map:
(1)  529/FFFFFFFFFFFF05FA : DAFC 0010           		adda	#$10,a5
(1)  530/FFFFFFFFFFFF05FE : 4847                		swap	d7
(1)  531/FFFFFFFFFFFF0600 :                     .no_slot:
(1)  532/FFFFFFFFFFFF0600 : 51CF FEE2           		dbf	d7,.next
(1)  533/FFFFFFFFFFFF0604 :                     .stop_all:
(1)  534/FFFFFFFFFFFF0604 : 614A                		bsr	vid_CheckLastSpr
(1)  535/FFFFFFFFFFFF0606 : 31C6 E85E           		move.w	d6,(RAM_SprLinkNum).w
(1)  536/FFFFFFFFFFFF060A :                     
(1)  537/FFFFFFFFFFFF060A :                     ; --------------------------------------------------------
(1)  538/FFFFFFFFFFFF060A :                     ; Reset slots
(1)  539/FFFFFFFFFFFF060A :                     ; --------------------------------------------------------
(1)  540/FFFFFFFFFFFF060A :                     
(1)  541/FFFFFFFFFFFF060A :                     .freeze:
(1)  542/FFFFFFFFFFFF060A : 4DF8 DA40           		lea	(RAM_SprPzList).w,a6
(1)  543/FFFFFFFFFFFF060E : 7E4F                		moveq	#80-1,d7
(1)  544/FFFFFFFFFFFF0610 : 7C08                		moveq	#$08,d6
(1)  545/FFFFFFFFFFFF0612 :                     .chk_spr_r:
(1)  546/FFFFFFFFFFFF0612 : 1A16                		move.b	(a6),d5
(1)  547/FFFFFFFFFFFF0614 : 0805 0007           		btst	#7,d5
(1)  548/FFFFFFFFFFFF0618 : 670C                		beq.s	.no_slot_r
(1)  549/FFFFFFFFFFFF061A : 0805 0006           		btst	#6,d5
(1)  550/FFFFFFFFFFFF061E : 6706                		beq.s	.no_slot_r
(1)  551/FFFFFFFFFFFF0620 : 4296                		clr.l	(a6)
(1)  552/FFFFFFFFFFFF0622 : 42AE 0004           		clr.l	4(a6)
(1)  553/FFFFFFFFFFFF0626 :                     .no_slot_r:
(1)  554/FFFFFFFFFFFF0626 : DCC6                		adda	d6,a6
(1)  555/FFFFFFFFFFFF0628 : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  556/FFFFFFFFFFFF062C : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6
(1)  557/FFFFFFFFFFFF0630 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  558/FFFFFFFFFFFF0632 : 7C10                		moveq	#$10,d6
(1)  559/FFFFFFFFFFFF0634 :                     .chk_spr_mr:
(1)  560/FFFFFFFFFFFF0634 : 1A16                		move.b	(a6),d5
(1)  561/FFFFFFFFFFFF0636 : 0805 0007           		btst	#7,d5
(1)  562/FFFFFFFFFFFF063A : 670C                		beq.s	.no_slot_mr
(1)  563/FFFFFFFFFFFF063C : 0805 0006           		btst	#6,d5
(1)  564/FFFFFFFFFFFF0640 : 6706                		beq.s	.no_slot_mr
(1)  565/FFFFFFFFFFFF0642 : 4296                		clr.l	(a6)
(1)  566/FFFFFFFFFFFF0644 : 42AE 0004           		clr.l	4(a6)
(1)  567/FFFFFFFFFFFF0648 :                     .no_slot_mr:
(1)  568/FFFFFFFFFFFF0648 : DCC6                		adda	d6,a6
(1)  569/FFFFFFFFFFFF064A : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  570/FFFFFFFFFFFF064E : 4E75                		rts
(1)  571/FFFFFFFFFFFF0650 :                     
(1)  572/FFFFFFFFFFFF0650 :                     ; --------------------------------------------------------
(1)  573/FFFFFFFFFFFF0650 :                     ; d6 - Current link
(1)  574/FFFFFFFFFFFF0650 :                     
(1)  575/FFFFFFFFFFFF0650 :                     vid_CheckLastSpr:
(1)  576/FFFFFFFFFFFF0650 : 4DF8 E0D0           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  577/FFFFFFFFFFFF0654 : 0C46 0001           		cmpi.w	#1,d6
(1)  578/FFFFFFFFFFFF0658 : 6710                		beq.s	.blnk_first
(1)  579/FFFFFFFFFFFF065A : 0C46 0050           		cmpi.w	#80,d6
(1)  580/FFFFFFFFFFFF065E : 6E10                		bgt.s	.last_one
(1)  581/FFFFFFFFFFFF0660 : 3E06                		move.w	d6,d7
(1)  582/FFFFFFFFFFFF0662 : 0447 0001           		subi.w	#1,d7
(1)  583/FFFFFFFFFFFF0666 : E74F                		lsl.w	#3,d7
(1)  584/FFFFFFFFFFFF0668 : DCC7                		adda	d7,a6
(1)  585/FFFFFFFFFFFF066A :                     .blnk_first:
(1)  586/FFFFFFFFFFFF066A : 429E                		clr.l	(a6)+
(1)  587/FFFFFFFFFFFF066C : 429E                		clr.l	(a6)+
(1)  588/FFFFFFFFFFFF066E : 6010                		bra.s	.spr_exit
(1)  589/FFFFFFFFFFFF0670 :                     .last_one:
(1)  590/FFFFFFFFFFFF0670 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  591/FFFFFFFFFFFF0674 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  592/FFFFFFFFFFFF0678 : 0247 0F00           		andi.w	#$0F00,d7
(1)  593/FFFFFFFFFFFF067C : 3D47 0002           		move.w	d7,2(a6)
(1)  594/FFFFFFFFFFFF0680 :                     .spr_exit:
(1)  595/FFFFFFFFFFFF0680 : 4E75                		rts
(1)  596/FFFFFFFFFFFF0682 :                     
(1)  597/FFFFFFFFFFFF0682 :                     ; ====================================================================
(1)  598/FFFFFFFFFFFF0682 :                     ; --------------------------------------------------------
(1)  599/FFFFFFFFFFFF0682 :                     ; Subroutines
(1)  600/FFFFFFFFFFFF0682 :                     ; --------------------------------------------------------
(1)  601/FFFFFFFFFFFF0682 :                     
(1)  602/FFFFFFFFFFFF0682 :                     ; --------------------------------------------------------
(1)  603/FFFFFFFFFFFF0682 :                     ; Video_Clear
(1)  604/FFFFFFFFFFFF0682 :                     ;
(1)  605/FFFFFFFFFFFF0682 :                     ; Clears VDP VRAM and other RAM sections
(1)  606/FFFFFFFFFFFF0682 :                     ;
(1)  607/FFFFFFFFFFFF0682 :                     ; Breaks:
(1)  608/FFFFFFFFFFFF0682 :                     ; ALL
(1)  609/FFFFFFFFFFFF0682 :                     ; --------------------------------------------------------
(1)  610/FFFFFFFFFFFF0682 :                     
(1)  611/FFFFFFFFFFFF0682 :                     Video_Clear:
(1)  613/FFFFFFFFFFFF0682 : 4DF8 CE60           		lea	(RAM_MdMars_CommBuff).w,a6		; ****
(1)  614/FFFFFFFFFFFF0686 : 3E3C 050F           		move.w	#(Dreq_len/2)-1,d7
(1)  615/FFFFFFFFFFFF068A : 7C00                		moveq	#0,d6
(1)  616/FFFFFFFFFFFF068C :                     .pmnext:
(1)  617/FFFFFFFFFFFF068C : 3CC6                		move.w	d6,(a6)+
(1)  618/FFFFFFFFFFFF068E : 51CF FFFC           		dbf	d7,.pmnext
(1)  620/FFFFFFFFFFFF0692 : 7C00                		moveq	#0,d6
(1)  621/FFFFFFFFFFFF0694 : 4DF8 D880           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  622/FFFFFFFFFFFF0698 : 3E3C 0E53           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  623/FFFFFFFFFFFF069C :                     .clr_me:
(1)  624/FFFFFFFFFFFF069C : 1CC6                		move.b	d6,(a6)+
(1)  625/FFFFFFFFFFFF069E : 51CF FFFC           		dbf	d7,.clr_me
(1)  626/FFFFFFFFFFFF06A2 : 303C 0000           		move.w	#0,d0
(1)  627/FFFFFFFFFFFF06A6 : 323C 0000           		move.w	#0,d1
(1)  628/FFFFFFFFFFFF06AA : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  629/FFFFFFFFFFFF06AE : 6100 031A           		bsr	Video_Fill
(1)  630/FFFFFFFFFFFF06B2 :                     
(1)  631/FFFFFFFFFFFF06B2 :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF06B2 :                     ; Video_ClearScreen
(1)  633/FFFFFFFFFFFF06B2 :                     ;
(1)  634/FFFFFFFFFFFF06B2 :                     ; Clears ALL 3 map layers.
(1)  635/FFFFFFFFFFFF06B2 :                     ; --------------------------------------------------------
(1)  636/FFFFFFFFFFFF06B2 :                     
(1)  637/FFFFFFFFFFFF06B2 :                     Video_ClearScreen:
(1)  638/FFFFFFFFFFFF06B2 : 7000                		moveq	#0,d0
(1)  639/FFFFFFFFFFFF06B4 : 3238 E860           		move.w	(RAM_VdpVramFG).w,d1
(1)  640/FFFFFFFFFFFF06B8 : 3438 E86A           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  641/FFFFFFFFFFFF06BC : 6100 030C           		bsr	Video_Fill
(1)  642/FFFFFFFFFFFF06C0 : 3238 E862           		move.w	(RAM_VdpVramBG).w,d1
(1)  643/FFFFFFFFFFFF06C4 : 6100 0304           		bsr	Video_Fill
(1)  644/FFFFFFFFFFFF06C8 : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  645/FFFFFFFFFFFF06CC : 3E38 E872           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  646/FFFFFFFFFFFF06D0 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  647/FFFFFFFFFFFF06D4 : 6702                		beq.s	.not_small
(1)  648/FFFFFFFFFFFF06D6 : D442                		add.w	d2,d2			; Size $1000
(1)  649/FFFFFFFFFFFF06D8 :                     .not_small:
(1)  650/FFFFFFFFFFFF06D8 : 3238 E864           		move.w	(RAM_VdpVramWD).w,d1
(1)  651/FFFFFFFFFFFF06DC : 6000 02EC           		bra	Video_Fill
(1)  652/FFFFFFFFFFFF06E0 :                     
(1)  653/FFFFFFFFFFFF06E0 :                     ; --------------------------------------------------------
(1)  654/FFFFFFFFFFFF06E0 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  655/FFFFFFFFFFFF06E0 :                     ;
(1)  656/FFFFFFFFFFFF06E0 :                     ; Enable/Disable VDP Display
(1)  657/FFFFFFFFFFFF06E0 :                     ; --------------------------------------------------------
(1)  658/FFFFFFFFFFFF06E0 :                     
(1)  659/FFFFFFFFFFFF06E0 :                     Video_DisplayOn:
(1)  660/FFFFFFFFFFFF06E0 : 3F07                		move.w	d7,-(sp)
(1)  661/FFFFFFFFFFFF06E2 : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  662/FFFFFFFFFFFF06E6 : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  663/FFFFFFFFFFFF06EA : 6022                		bra.s	vid_WrtReg01
(1)  664/FFFFFFFFFFFF06EC :                     Video_DisplayOff:
(1)  665/FFFFFFFFFFFF06EC : 3F07                		move.w	d7,-(sp)
(1)  666/FFFFFFFFFFFF06EE : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  667/FFFFFFFFFFFF06F2 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  668/FFFFFFFFFFFF06F6 : 6016                		bra.s	vid_WrtReg01
(1)  669/FFFFFFFFFFFF06F8 :                     
(1)  670/FFFFFFFFFFFF06F8 :                     ; --------------------------------------------------------
(1)  671/FFFFFFFFFFFF06F8 :                     ; Video_DmaOn, Video_DmaOff
(1)  672/FFFFFFFFFFFF06F8 :                     ;
(1)  673/FFFFFFFFFFFF06F8 :                     ; Enable/Disable DMA
(1)  674/FFFFFFFFFFFF06F8 :                     ; --------------------------------------------------------
(1)  675/FFFFFFFFFFFF06F8 :                     
(1)  676/FFFFFFFFFFFF06F8 :                     Video_DmaOn:
(1)  677/FFFFFFFFFFFF06F8 : 3F07                		move.w	d7,-(sp)
(1)  678/FFFFFFFFFFFF06FA : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  679/FFFFFFFFFFFF06FE : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  680/FFFFFFFFFFFF0702 : 600A                		bra.s	vid_WrtReg01
(1)  681/FFFFFFFFFFFF0704 :                     Video_DmaOff:
(1)  682/FFFFFFFFFFFF0704 : 3F07                		move.w	d7,-(sp)
(1)  683/FFFFFFFFFFFF0706 : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  684/FFFFFFFFFFFF070A : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  685/FFFFFFFFFFFF070E :                     
(1)  686/FFFFFFFFFFFF070E :                     ; ------------------------------------------------
(1)  687/FFFFFFFFFFFF070E :                     
(1)  688/FFFFFFFFFFFF070E :                     vid_WrtReg01:
(1)  689/FFFFFFFFFFFF070E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  690/FFFFFFFFFFFF0714 : 31C7 E86E           		move.w	d7,(RAM_VdpRegSet1).w
(1)  691/FFFFFFFFFFFF0718 : 3E1F                		move.w	(sp)+,d7
(1)  692/FFFFFFFFFFFF071A : 4E75                		rts
(1)  693/FFFFFFFFFFFF071C :                     
(1)  694/FFFFFFFFFFFF071C :                     ; --------------------------------------------------------
(1)  695/FFFFFFFFFFFF071C :                     ; Video_IntEnable
(1)  696/FFFFFFFFFFFF071C :                     ;
(1)  697/FFFFFFFFFFFF071C :                     ; Enable or Disable VBlank, HBlank and External
(1)  698/FFFFFFFFFFFF071C :                     ; interrupts
(1)  699/FFFFFFFFFFFF071C :                     ;
(1)  700/FFFFFFFFFFFF071C :                     ; Input:
(1)  701/FFFFFFFFFFFF071C :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  702/FFFFFFFFFFFF071C :                     ;      | %00000EHV
(1)  703/FFFFFFFFFFFF071C :                     ;      | E - External
(1)  704/FFFFFFFFFFFF071C :                     ;      | H - HBlank
(1)  705/FFFFFFFFFFFF071C :                     ;      | V - VBlank
(1)  706/FFFFFFFFFFFF071C :                     ;
(1)  707/FFFFFFFFFFFF071C :                     ; Notes:
(1)  708/FFFFFFFFFFFF071C :                     ; Set your interrupt locations with System_SetIntJumps
(1)  709/FFFFFFFFFFFF071C :                     ; --------------------------------------------------------
(1)  710/FFFFFFFFFFFF071C :                     
(1)  711/FFFFFFFFFFFF071C :                     Video_IntEnable:
(1)  712/FFFFFFFFFFFF071C : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  713/FFFFFFFFFFFF0720 : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  714/FFFFFFFFFFFF0724 : 3C00                		move.w	d0,d6
(1)  715/FFFFFFFFFFFF0726 : 0246 0001           		andi.w	#1,d6			; %--V
(1)  716/FFFFFFFFFFFF072A : EB4E                		lsl.w	#5,d6
(1)  717/FFFFFFFFFFFF072C : 8E46                		or.w	d6,d7
(1)  718/FFFFFFFFFFFF072E : 31C7 E86E           		move.w	d7,(RAM_VdpRegSet1).w
(1)  719/FFFFFFFFFFFF0732 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  720/FFFFFFFFFFFF0738 : 3E38 E86C           		move.w	(RAM_VdpRegSet0).w,d7
(1)  721/FFFFFFFFFFFF073C : 3C00                		move.w	d0,d6
(1)  722/FFFFFFFFFFFF073E : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  723/FFFFFFFFFFFF0742 : E74E                		lsl.w	#3,d6
(1)  724/FFFFFFFFFFFF0744 : 8E46                		or.w	d6,d7
(1)  725/FFFFFFFFFFFF0746 : 31C7 E86C           		move.w	d7,(RAM_VdpRegSet0).w
(1)  726/FFFFFFFFFFFF074A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  727/FFFFFFFFFFFF0750 : 3E38 E870           		move.w	(RAM_VdpRegSetB).w,d7
(1)  728/FFFFFFFFFFFF0754 : 3C00                		move.w	d0,d6			; %E--
(1)  729/FFFFFFFFFFFF0756 : 0246 0004           		andi.w	#%100,d6
(1)  730/FFFFFFFFFFFF075A : DC46                		add.w	d6,d6
(1)  731/FFFFFFFFFFFF075C : 8E46                		or.w	d6,d7
(1)  732/FFFFFFFFFFFF075E : 31C7 E870           		move.w	d7,(RAM_VdpRegSetB).w
(1)  733/FFFFFFFFFFFF0762 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  734/FFFFFFFFFFFF0768 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  735/FFFFFFFFFFFF076C : 4E75                		rts
(1)  736/FFFFFFFFFFFF076E :                     
(1)  737/FFFFFFFFFFFF076E :                     ; --------------------------------------------------------
(1)  738/FFFFFFFFFFFF076E :                     ; Video_Resolution
(1)  739/FFFFFFFFFFFF076E :                     ;
(1)  740/FFFFFFFFFFFF076E :                     ; Set video resolution
(1)  741/FFFFFFFFFFFF076E :                     ;
(1)  742/FFFFFFFFFFFF076E :                     ; Input:
(1)  743/FFFFFFFFFFFF076E :                     ; d0.w | $00 - Horizontal 256
(1)  744/FFFFFFFFFFFF076E :                     ;      | $01 - Horizontal 320
(1)  745/FFFFFFFFFFFF076E :                     ;
(1)  746/FFFFFFFFFFFF076E :                     ; d1.w | $00 - Vertical 224
(1)  747/FFFFFFFFFFFF076E :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  748/FFFFFFFFFFFF076E :                     ;      | $02 - Double resolution mode
(1)  749/FFFFFFFFFFFF076E :                     ;      | $03 - INVALID
(1)  750/FFFFFFFFFFFF076E :                     ; --------------------------------------------------------
(1)  751/FFFFFFFFFFFF076E :                     
(1)  752/FFFFFFFFFFFF076E :                     Video_Resolution:
(1)  753/FFFFFFFFFFFF076E : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  754/FFFFFFFFFFFF0772 : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  755/FFFFFFFFFFFF0776 : 0207 00F7           		andi.b	#%11110111,d7
(1)  756/FFFFFFFFFFFF077A : 3C01                		move.w	d1,d6
(1)  757/FFFFFFFFFFFF077C : CC7C 0001           		and.w	#1,d6
(1)  758/FFFFFFFFFFFF0780 : E74E                		lsl.w	#3,d6
(1)  759/FFFFFFFFFFFF0782 : 8E46                		or.w	d6,d7
(1)  760/FFFFFFFFFFFF0784 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  761/FFFFFFFFFFFF078A : 31C7 E86E           		move.w	d7,(RAM_VdpRegSet1).w
(1)  762/FFFFFFFFFFFF078E : 3E38 E872           		move.w	(RAM_VdpRegSetC).w,d7
(1)  763/FFFFFFFFFFFF0792 : 0207 0078           		andi.b	#%01111000,d7
(1)  764/FFFFFFFFFFFF0796 : 3C00                		move.w	d0,d6
(1)  765/FFFFFFFFFFFF0798 : CC7C 0001           		and.w	#$01,d6
(1)  766/FFFFFFFFFFFF079C : 6704                		beq.s	.ex_bit
(1)  767/FFFFFFFFFFFF079E : 8C7C 0081           		or.w	#$81,d6
(1)  768/FFFFFFFFFFFF07A2 :                     .ex_bit:
(1)  769/FFFFFFFFFFFF07A2 : 8E46                		or.w	d6,d7
(1)  770/FFFFFFFFFFFF07A4 : 3C01                		move.w	d1,d6
(1)  771/FFFFFFFFFFFF07A6 : CC7C 0002           		and.w	#%010,d6
(1)  772/FFFFFFFFFFFF07AA : 6704                		beq.s	.double
(1)  773/FFFFFFFFFFFF07AC : 8C7C 0004           		or.w	#%100,d6
(1)  774/FFFFFFFFFFFF07B0 :                     .double:
(1)  775/FFFFFFFFFFFF07B0 : 8E46                		or.w	d6,d7
(1)  776/FFFFFFFFFFFF07B2 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  777/FFFFFFFFFFFF07B8 : 31C7 E872           		move.w	d7,(RAM_VdpRegSetC).w
(1)  778/FFFFFFFFFFFF07BC : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  779/FFFFFFFFFFFF07C0 : 4E75                		rts
(1)  780/FFFFFFFFFFFF07C2 :                     
(1)  781/FFFFFFFFFFFF07C2 :                     ; --------------------------------------------------------
(1)  782/FFFFFFFFFFFF07C2 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  783/FFFFFFFFFFFF07C2 :                     ;
(1)  784/FFFFFFFFFFFF07C2 :                     ; Update VRAM locations for FG, BG, Window and
(1)  785/FFFFFFFFFFFF07C2 :                     ; the Horizontal scroll
(1)  786/FFFFFFFFFFFF07C2 :                     ; --------------------------------------------------------
(1)  787/FFFFFFFFFFFF07C2 :                     
(1)  788/FFFFFFFFFFFF07C2 :                     Video_UpdMapVram:
(1)  789/FFFFFFFFFFFF07C2 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  790/FFFFFFFFFFFF07C6 : 3E3C 8200           		move.w	#$8200,d7
(1)  791/FFFFFFFFFFFF07CA : 3C38 E860           		move.w	(RAM_VdpVramFG).w,d6
(1)  792/FFFFFFFFFFFF07CE : E04E                		lsr.w	#8,d6
(1)  793/FFFFFFFFFFFF07D0 : E44E                		lsr.w	#2,d6
(1)  794/FFFFFFFFFFFF07D2 : 0246 0038           		andi.w	#%00111000,d6
(1)  795/FFFFFFFFFFFF07D6 : 8E46                		or.w	d6,d7
(1)  796/FFFFFFFFFFFF07D8 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  797/FFFFFFFFFFFF07DE : 3E3C 8300           		move.w	#$8300,d7
(1)  798/FFFFFFFFFFFF07E2 : 3C38 E864           		move.w	(RAM_VdpVramWD).w,d6
(1)  799/FFFFFFFFFFFF07E6 : E04E                		lsr.w	#8,d6
(1)  800/FFFFFFFFFFFF07E8 : E44E                		lsr.w	#2,d6
(1)  801/FFFFFFFFFFFF07EA : 0246 003E           		andi.w	#%00111110,d6
(1)  802/FFFFFFFFFFFF07EE : 8E46                		or.w	d6,d7
(1)  803/FFFFFFFFFFFF07F0 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  804/FFFFFFFFFFFF07F6 : 3E3C 8400           		move.w	#$8400,d7
(1)  805/FFFFFFFFFFFF07FA : 3C38 E862           		move.w	(RAM_VdpVramBG).w,d6
(1)  806/FFFFFFFFFFFF07FE : E04E                		lsr.w	#8,d6
(1)  807/FFFFFFFFFFFF0800 : EA4E                		lsr.w	#5,d6
(1)  808/FFFFFFFFFFFF0802 : 0246 0007           		andi.w	#%00000111,d6
(1)  809/FFFFFFFFFFFF0806 : 8E46                		or.w	d6,d7
(1)  810/FFFFFFFFFFFF0808 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  811/FFFFFFFFFFFF080E : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  812/FFFFFFFFFFFF0812 : 4E75                		rts
(1)  813/FFFFFFFFFFFF0814 :                     
(1)  814/FFFFFFFFFFFF0814 :                     Video_UpdSprHVram:
(1)  815/FFFFFFFFFFFF0814 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  816/FFFFFFFFFFFF0818 : 3E3C 8500           		move.w	#$8500,d7
(1)  817/FFFFFFFFFFFF081C : 3C38 E866           		move.w	(RAM_VdpVramSpr).w,d6
(1)  818/FFFFFFFFFFFF0820 : E04E                		lsr.w	#8,d6
(1)  819/FFFFFFFFFFFF0822 : E24E                		lsr.w	#1,d6
(1)  820/FFFFFFFFFFFF0824 : 0246 007F           		andi.w	#%01111111,d6
(1)  821/FFFFFFFFFFFF0828 : 8E46                		or.w	d6,d7
(1)  822/FFFFFFFFFFFF082A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  823/FFFFFFFFFFFF0830 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  824/FFFFFFFFFFFF0834 : 3C38 E868           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  825/FFFFFFFFFFFF0838 : E04E                		lsr.w	#8,d6
(1)  826/FFFFFFFFFFFF083A : E44E                		lsr.w	#2,d6
(1)  827/FFFFFFFFFFFF083C : 0246 003F           		andi.w	#%00111111,d6
(1)  828/FFFFFFFFFFFF0840 : 8E46                		or.w	d6,d7
(1)  829/FFFFFFFFFFFF0842 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  830/FFFFFFFFFFFF0848 : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  831/FFFFFFFFFFFF084C : 4E75                		rts
(1)  832/FFFFFFFFFFFF084E :                     
(1)  833/FFFFFFFFFFFF084E :                     ; --------------------------------------------------------
(1)  834/FFFFFFFFFFFF084E :                     ; Video_SetMapSize
(1)  835/FFFFFFFFFFFF084E :                     ;
(1)  836/FFFFFFFFFFFF084E :                     ; Set MAP size(s) to FG and BG
(1)  837/FFFFFFFFFFFF084E :                     ;
(1)  838/FFFFFFFFFFFF084E :                     ; Input:
(1)  839/FFFFFFFFFFFF084E :                     ; d0.w | Width: %00 - H32
(1)  840/FFFFFFFFFFFF084E :                     ;      |        %01 - H40
(1)  841/FFFFFFFFFFFF084E :                     ;      |        %11 - H128
(1)  842/FFFFFFFFFFFF084E :                     ;
(1)  843/FFFFFFFFFFFF084E :                     ; d1.w | Height: %00 - V32
(1)  844/FFFFFFFFFFFF084E :                     ;      |         %01 - V40
(1)  845/FFFFFFFFFFFF084E :                     ;      |         %11 - V128
(1)  846/FFFFFFFFFFFF084E :                     ;
(1)  847/FFFFFFFFFFFF084E :                     ; Notes:
(1)  848/FFFFFFFFFFFF084E :                     ; Maximum size for a single layer size
(1)  849/FFFFFFFFFFFF084E :                     ; is $1000
(1)  850/FFFFFFFFFFFF084E :                     ; --------------------------------------------------------
(1)  851/FFFFFFFFFFFF084E :                     
(1)  852/FFFFFFFFFFFF084E :                     Video_SetMapSize:
(1)  853/FFFFFFFFFFFF084E : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  854/FFFFFFFFFFFF0852 : 3E3C 9000           		move.w	#$9000,d7
(1)  855/FFFFFFFFFFFF0856 : 3C00                		move.w	d0,d6
(1)  856/FFFFFFFFFFFF0858 : 3A01                		move.w	d1,d5
(1)  857/FFFFFFFFFFFF085A : 0246 0003           		andi.w	#%11,d6
(1)  858/FFFFFFFFFFFF085E : 0245 0003           		andi.w	#%11,d5
(1)  859/FFFFFFFFFFFF0862 : E94D                		lsl.w	#4,d5
(1)  860/FFFFFFFFFFFF0864 : 8C45                		or.w	d5,d6
(1)  861/FFFFFFFFFFFF0866 : 8E46                		or.w	d6,d7
(1)  862/FFFFFFFFFFFF0868 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  863/FFFFFFFFFFFF086E : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  864/FFFFFFFFFFFF0872 : 4E75                		rts
(1)  865/FFFFFFFFFFFF0874 :                     
(1)  866/FFFFFFFFFFFF0874 :                     ; --------------------------------------------------------
(1)  867/FFFFFFFFFFFF0874 :                     ; Video_LoadArt
(1)  868/FFFFFFFFFFFF0874 :                     ;
(1)  869/FFFFFFFFFFFF0874 :                     ; Loads VDP graphics using DMA
(1)  870/FFFFFFFFFFFF0874 :                     ;
(1)  871/FFFFFFFFFFFF0874 :                     ; Input:
(1)  872/FFFFFFFFFFFF0874 :                     ; d0.l | Graphics data (NOT a0)
(1)  873/FFFFFFFFFFFF0874 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  874/FFFFFFFFFFFF0874 :                     ; d2.w | Size:          cell_vram(size)
(1)  875/FFFFFFFFFFFF0874 :                     ;
(1)  876/FFFFFFFFFFFF0874 :                     ; Notes:
(1)  877/FFFFFFFFFFFF0874 :                     ; - For a faster load: call this during VBlank or
(1)  878/FFFFFFFFFFFF0874 :                     ;   disable VDP Display temporally.
(1)  879/FFFFFFFFFFFF0874 :                     ;
(1)  880/FFFFFFFFFFFF0874 :                     ; * 32X Cartridge ONLY:
(1)  881/FFFFFFFFFFFF0874 :                     ; - This sets RV bit, make sure your code is
(1)  882/FFFFFFFFFFFF0874 :                     ;   running on RAM (already doing here) and the
(1)  883/FFFFFFFFFFFF0874 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  884/FFFFFFFFFFFF0874 :                     ; --------------------------------------------------------
(1)  885/FFFFFFFFFFFF0874 :                     
(1)  886/FFFFFFFFFFFF0874 :                     Video_LoadArt:
(1)  887/FFFFFFFFFFFF0874 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  888/FFFFFFFFFFFF0878 : 2E00                		move.l	d0,d7
(1)  889/FFFFFFFFFFFF087A : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  890/FFFFFFFFFFFF0880 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  891/FFFFFFFFFFFF0886 : 6736                		beq.s	.normal
(1)  892/FFFFFFFFFFFF0888 : 2A00                		move.l	d0,d5
(1)  893/FFFFFFFFFFFF088A : DA42                		add.w	d2,d5
(1)  894/FFFFFFFFFFFF088C : 6430                		bcc.s	.normal
(1)  895/FFFFFFFFFFFF088E : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  896/FFFFFFFFFFFF0890 : 3C01                		move.w	d1,d6
(1)  897/FFFFFFFFFFFF0892 : 2E05                		move.l	d5,d7		; Top
(1)  898/FFFFFFFFFFFF0894 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  899/FFFFFFFFFFFF089A : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  900/FFFFFFFFFFFF08A0 : 9E80                		sub.l	d0,d7
(1)  901/FFFFFFFFFFFF08A2 : 6128                		bsr.s	.mk_set
(1)  902/FFFFFFFFFFFF08A4 : 2A00                		move.l	d0,d5		; Bottom
(1)  903/FFFFFFFFFFFF08A6 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  904/FFFFFFFFFFFF08AC : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  905/FFFFFFFFFFFF08B2 : 2C05                		move.l	d5,d6
(1)  906/FFFFFFFFFFFF08B4 : 9C80                		sub.l	d0,d6
(1)  907/FFFFFFFFFFFF08B6 : 3E02                		move.w	d2,d7
(1)  908/FFFFFFFFFFFF08B8 : 9E46                		sub.w	d6,d7
(1)  909/FFFFFFFFFFFF08BA : DC41                		add.w	d1,d6
(1)  910/FFFFFFFFFFFF08BC : 6006                		bra.s	.last_set
(1)  911/FFFFFFFFFFFF08BE :                     .normal:
(1)  912/FFFFFFFFFFFF08BE : 2A00                		move.l	d0,d5
(1)  913/FFFFFFFFFFFF08C0 : 3C01                		move.w	d1,d6
(1)  914/FFFFFFFFFFFF08C2 : 3E02                		move.w	d2,d7
(1)  915/FFFFFFFFFFFF08C4 :                     .last_set:
(1)  916/FFFFFFFFFFFF08C4 : 6106                		bsr.s	.mk_set
(1)  917/FFFFFFFFFFFF08C6 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  918/FFFFFFFFFFFF08CA : 4E75                		rts
(1)  919/FFFFFFFFFFFF08CC :                     
(1)  920/FFFFFFFFFFFF08CC :                     ; d7 - size
(1)  921/FFFFFFFFFFFF08CC :                     ; d6 - vram
(1)  922/FFFFFFFFFFFF08CC :                     ; d5 - data
(1)  923/FFFFFFFFFFFF08CC :                     .mk_set:
(1)  924/FFFFFFFFFFFF08CC : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  925/FFFFFFFFFFFF08D2 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  926/FFFFFFFFFFFF08D8 : 6778                		beq.s	.bad_size
(1)  927/FFFFFFFFFFFF08DA : 4846                		swap	d6
(1)  928/FFFFFFFFFFFF08DC : 4845                		swap	d5
(1)  929/FFFFFFFFFFFF08DE : 3C05                		move.w	d5,d6
(1)  930/FFFFFFFFFFFF08E0 : 4845                		swap	d5
(1)  932/FFFFFFFFFFFF08E2 : 0246 00F0           		andi.w	#$F0,d6
(1)  933/FFFFFFFFFFFF08E6 : 0C06 0020           		cmpi.b	#$20,d6
(1)  934/FFFFFFFFFFFF08EA : 660A                		bne.s	.non_wram
(1)  935/FFFFFFFFFFFF08EC : 48E7 0600           		movem.l	d5-d6,-(sp)		; Copy data and vram to stack
(1)  936/FFFFFFFFFFFF08F0 : 0685 0000 0002      		addi.l	#2,d5
(1)  937/FFFFFFFFFFFF08F6 :                     .non_wram:
(1)  939/FFFFFFFFFFFF08F6 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  940/FFFFFFFFFFFF08FC : 2F07                		move.l	d7,-(sp)		; <--
(1)  941/FFFFFFFFFFFF08FE : 6100 FDF8           		bsr	Video_DmaOn
(1)  942/FFFFFFFFFFFF0902 : 2E1F                		move.l	(sp)+,d7
(1)  943/FFFFFFFFFFFF0904 : 0246 00FF           		andi.w	#$FF,d6
(1)  944/FFFFFFFFFFFF0908 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  945/FFFFFFFFFFFF090C : 6746                		beq.s	.ram_write
(1)  946/FFFFFFFFFFFF090E : 4846                		swap	d6
(1)  947/FFFFFFFFFFFF0910 : 6156                		bsr.s	.shared_setup
(1)  948/FFFFFFFFFFFF0912 : 6100 14D4           		bsr	System_DmaEnter_ROM
(1)  949/FFFFFFFFFFFF0916 : 3C86                		move.w	d6,(a6)			; First write
(1)  950/FFFFFFFFFFFF0918 : 3C87                		move.w	d7,(a6)			; Second write
(1)  951/FFFFFFFFFFFF091A : 6100 14D0           		bsr	System_DmaExit_ROM
(1)  952/FFFFFFFFFFFF091E : 6100 FDE4           		bsr	Video_DmaOff
(1)  953/FFFFFFFFFFFF0922 :                     	; Word-RAM patch
(1)  955/FFFFFFFFFFFF0922 : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  956/FFFFFFFFFFFF0926 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  957/FFFFFFFFFFFF092A : 6626                		bne.s	.non_wram_l
(1)  958/FFFFFFFFFFFF092C : 4846                		swap	d6
(1)  959/FFFFFFFFFFFF092E : 3E06                		move.w	d6,d7			; Destination
(1)  960/FFFFFFFFFFFF0930 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  961/FFFFFFFFFFFF0936 : 0046 4000           		ori.w	#$4000,d6
(1)  962/FFFFFFFFFFFF093A : E04F                		lsr.w	#8,d7
(1)  963/FFFFFFFFFFFF093C : EC4F                		lsr.w	#6,d7
(1)  964/FFFFFFFFFFFF093E : 0247 0003           		andi.w	#%11,d7
(1)  965/FFFFFFFFFFFF0942 : 3C86                		move.w	d6,(a6)			; VDP destination
(1)  966/FFFFFFFFFFFF0944 : 3C87                		move.w	d7,(a6)			;
(1)  967/FFFFFFFFFFFF0946 : 2E0E                		move.l	a6,d7
(1)  968/FFFFFFFFFFFF0948 : 2C45                		move.l	d5,a6
(1)  969/FFFFFFFFFFFF094A : 3C16                		move.w	(a6),d6
(1)  970/FFFFFFFFFFFF094C : 2C47                		move.l	d7,a6
(1)  971/FFFFFFFFFFFF094E : 3D46 FFFC           		move.w	d6,-4(a6)		; DATA port -4
(1)  972/FFFFFFFFFFFF0952 :                     .non_wram_l:
(1)  974/FFFFFFFFFFFF0952 :                     .bad_size:
(1)  975/FFFFFFFFFFFF0952 : 4E75                		rts
(1)  976/FFFFFFFFFFFF0954 :                     
(1)  977/FFFFFFFFFFFF0954 :                     ; --------------------------------------------------------
(1)  978/FFFFFFFFFFFF0954 :                     
(1)  979/FFFFFFFFFFFF0954 :                     .ram_write:
(1)  980/FFFFFFFFFFFF0954 : 4846                		swap	d6
(1)  981/FFFFFFFFFFFF0956 : 6110                		bsr.s	.shared_setup
(1)  982/FFFFFFFFFFFF0958 : 6100 14C8           		bsr	System_DmaEnter_RAM
(1)  983/FFFFFFFFFFFF095C : 3C86                		move.w	d6,(a6)			; First write
(1)  984/FFFFFFFFFFFF095E : 3C87                		move.w	d7,(a6)			; Second write
(1)  985/FFFFFFFFFFFF0960 : 6100 14C4           		bsr	System_DmaExit_RAM
(1)  986/FFFFFFFFFFFF0964 : 6000 FD9E           		bra	Video_DmaOff
(1)  987/FFFFFFFFFFFF0968 :                     
(1)  988/FFFFFFFFFFFF0968 :                     ; --------------------------------------------------------
(1)  989/FFFFFFFFFFFF0968 :                     
(1)  990/FFFFFFFFFFFF0968 :                     .shared_setup:
(1)  991/FFFFFFFFFFFF0968 : EF8F                		lsl.l	#7,d7
(1)  992/FFFFFFFFFFFF096A : E04F                		lsr.w	#8,d7
(1)  993/FFFFFFFFFFFF096C : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  994/FFFFFFFFFFFF0972 : 2C87                		move.l	d7,(a6)
(1)  995/FFFFFFFFFFFF0974 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  996/FFFFFFFFFFFF0976 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  997/FFFFFFFFFFFF097C : 1E05                 		move.b	d5,d7
(1)  998/FFFFFFFFFFFF097E : E08D                 		lsr.l	#8,d5
(1)  999/FFFFFFFFFFFF0980 : 4847                 		swap	d7
(1) 1000/FFFFFFFFFFFF0982 : 1E05                 		move.b	d5,d7
(1) 1001/FFFFFFFFFFFF0984 : 2C87                 		move.l	d7,(a6)
(1) 1002/FFFFFFFFFFFF0986 : 3E3C 9700            		move.w	#$9700,d7
(1) 1003/FFFFFFFFFFFF098A : E08D                 		lsr.l	#8,d5
(1) 1004/FFFFFFFFFFFF098C : 1E05                 		move.b	d5,d7
(1) 1005/FFFFFFFFFFFF098E : 3C87                 		move.w	d7,(a6)
(1) 1006/FFFFFFFFFFFF0990 : 3E06                		move.w	d6,d7			; Destination
(1) 1007/FFFFFFFFFFFF0992 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1008/FFFFFFFFFFFF0998 : 0046 4000           		ori.w	#$4000,d6
(1) 1009/FFFFFFFFFFFF099C : E04F                		lsr.w	#8,d7
(1) 1010/FFFFFFFFFFFF099E : EC4F                		lsr.w	#6,d7
(1) 1011/FFFFFFFFFFFF09A0 : 0247 0003           		andi.w	#%11,d7
(1) 1012/FFFFFFFFFFFF09A4 : 0047 0080           		ori.w	#$80,d7
(1) 1013/FFFFFFFFFFFF09A8 : 4E75                		rts
(1) 1014/FFFFFFFFFFFF09AA :                     
(1) 1015/FFFFFFFFFFFF09AA :                     ; --------------------------------------------------------
(1) 1016/FFFFFFFFFFFF09AA :                     ; Video_LoadArt_List
(1) 1017/FFFFFFFFFFFF09AA :                     ;
(1) 1018/FFFFFFFFFFFF09AA :                     ; Loads VDP graphics on bulk
(1) 1019/FFFFFFFFFFFF09AA :                     ;
(1) 1020/FFFFFFFFFFFF09AA :                     ; Input:
(1) 1021/FFFFFFFFFFFF09AA :                     ; a0 | List of graphics to load:
(1) 1022/FFFFFFFFFFFF09AA :                     ;        dc.w numof_entries
(1) 1023/FFFFFFFFFFFF09AA :                     ;        dc.l ART_DATA
(1) 1024/FFFFFFFFFFFF09AA :                     ;        dc.w cell_vram(vram_pos)
(1) 1025/FFFFFFFFFFFF09AA :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1026/FFFFFFFFFFFF09AA :                     ;        ; ...more entries
(1) 1027/FFFFFFFFFFFF09AA :                     ;
(1) 1028/FFFFFFFFFFFF09AA :                     ; Note:
(1) 1029/FFFFFFFFFFFF09AA :                     ; CPU heavy.
(1) 1030/FFFFFFFFFFFF09AA :                     ; --------------------------------------------------------
(1) 1031/FFFFFFFFFFFF09AA :                     
(1) 1032/FFFFFFFFFFFF09AA :                     Video_LoadArt_List:
(1) 1033/FFFFFFFFFFFF09AA : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1034/FFFFFFFFFFFF09AE : 3E18                		move.w	(a0)+,d7
(1) 1035/FFFFFFFFFFFF09B0 : 6712                		beq.s	.invalid
(1) 1036/FFFFFFFFFFFF09B2 : 6B10                		bmi.s	.invalid
(1) 1037/FFFFFFFFFFFF09B4 : 5347                		subq.w	#1,d7
(1) 1038/FFFFFFFFFFFF09B6 :                     .next_one:
(1) 1039/FFFFFFFFFFFF09B6 : 2018                		move.l	(a0)+,d0
(1) 1040/FFFFFFFFFFFF09B8 : 3218                		move.w	(a0)+,d1
(1) 1041/FFFFFFFFFFFF09BA : 3418                		move.w	(a0)+,d2
(1) 1042/FFFFFFFFFFFF09BC : 6100 FEB6           		bsr	Video_LoadArt
(1) 1043/FFFFFFFFFFFF09C0 : 51CF FFF4           		dbf	d7,.next_one
(1) 1044/FFFFFFFFFFFF09C4 :                     .invalid:
(1) 1045/FFFFFFFFFFFF09C4 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1046/FFFFFFFFFFFF09C8 : 4E75                		rts
(1) 1047/FFFFFFFFFFFF09CA :                     
(1) 1048/FFFFFFFFFFFF09CA :                     ; --------------------------------------------------------
(1) 1049/FFFFFFFFFFFF09CA :                     ; Video_Fill
(1) 1050/FFFFFFFFFFFF09CA :                     ;
(1) 1051/FFFFFFFFFFFF09CA :                     ; Fill data to VRAM
(1) 1052/FFFFFFFFFFFF09CA :                     ;
(1) 1053/FFFFFFFFFFFF09CA :                     ; Input:
(1) 1054/FFFFFFFFFFFF09CA :                     ; d0.b | BYTE to fill
(1) 1055/FFFFFFFFFFFF09CA :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1056/FFFFFFFFFFFF09CA :                     ; d2.w | Size:             cell_vram(size)
(1) 1057/FFFFFFFFFFFF09CA :                     ;
(1) 1058/FFFFFFFFFFFF09CA :                     ; Notes:
(1) 1059/FFFFFFFFFFFF09CA :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1060/FFFFFFFFFFFF09CA :                     ;   invalid.
(1) 1061/FFFFFFFFFFFF09CA :                     ; --------------------------------------------------------
(1) 1062/FFFFFFFFFFFF09CA :                     
(1) 1063/FFFFFFFFFFFF09CA :                     ; Video_Fill_Incr:
(1) 1064/FFFFFFFFFFFF09CA :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1065/FFFFFFFFFFFF09CA :                     ; 		move.w	d3,d6
(1) 1066/FFFFFFFFFFFF09CA :                     ; 		bra.s	vid_FillGo
(1) 1067/FFFFFFFFFFFF09CA :                     Video_Fill:
(1) 1068/FFFFFFFFFFFF09CA : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1069/FFFFFFFFFFFF09CE : 3C3C 0001           		move.w	#1,d6
(1) 1070/FFFFFFFFFFFF09D2 :                     vid_FillGo:
(1) 1071/FFFFFFFFFFFF09D2 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1072/FFFFFFFFFFFF09D8 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1073/FFFFFFFFFFFF09DA : 0807 0001           		btst	#bitDma,d7
(1) 1074/FFFFFFFFFFFF09DE : 66F8                		bne.s	.dmaw
(1) 1075/FFFFFFFFFFFF09E0 : 6100 FD16           		bsr	Video_DmaOn
(1) 1076/FFFFFFFFFFFF09E4 : 0246 00FF           		andi.w	#$FF,d6
(1) 1077/FFFFFFFFFFFF09E8 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1078/FFFFFFFFFFFF09EC : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1079/FFFFFFFFFFFF09EE : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1080/FFFFFFFFFFFF09F0 : 0447 0001           		subi.w	#1,d7
(1) 1081/FFFFFFFFFFFF09F4 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1082/FFFFFFFFFFFF09FA : 1C07                		move.b	d7,d6
(1) 1083/FFFFFFFFFFFF09FC : 4846                		swap	d6
(1) 1084/FFFFFFFFFFFF09FE : E04F                		lsr.w	#8,d7
(1) 1085/FFFFFFFFFFFF0A00 : 1C07                		move.b	d7,d6
(1) 1086/FFFFFFFFFFFF0A02 : 4846                		swap	d6
(1) 1087/FFFFFFFFFFFF0A04 : 2C86                		move.l	d6,(a6)
(1) 1088/FFFFFFFFFFFF0A06 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1089/FFFFFFFFFFFF0A0A : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1090/FFFFFFFFFFFF0A0C : 3C01                		move.w	d1,d6
(1) 1091/FFFFFFFFFFFF0A0E : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1092/FFFFFFFFFFFF0A12 : 0046 4000           		ori.w	#$4000,d6
(1) 1093/FFFFFFFFFFFF0A16 : 4846                		swap	d6
(1) 1094/FFFFFFFFFFFF0A18 : 3C07                		move.w	d7,d6
(1) 1095/FFFFFFFFFFFF0A1A : E04E                		lsr.w	#8,d6
(1) 1096/FFFFFFFFFFFF0A1C : EC4E                		lsr.w	#6,d6
(1) 1097/FFFFFFFFFFFF0A1E : 0246 0003           		andi.w	#%11,d6
(1) 1098/FFFFFFFFFFFF0A22 : 0046 0080           		ori.w	#$80,d6
(1) 1099/FFFFFFFFFFFF0A26 : 2C86                		move.l	d6,(a6)
(1) 1100/FFFFFFFFFFFF0A28 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1101/FFFFFFFFFFFF0A2C : 3E16                .dma_w:		move.w	(a6),d7
(1) 1102/FFFFFFFFFFFF0A2E : 0807 0001           		btst	#bitDma,d7
(1) 1103/FFFFFFFFFFFF0A32 : 66F8                		bne.s	.dma_w
(1) 1104/FFFFFFFFFFFF0A34 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1105/FFFFFFFFFFFF0A38 : 6100 FCCA           		bsr	Video_DmaOff
(1) 1106/FFFFFFFFFFFF0A3C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1107/FFFFFFFFFFFF0A40 : 4E75                		rts
(1) 1108/FFFFFFFFFFFF0A42 :                     
(1) 1109/FFFFFFFFFFFF0A42 :                     ; --------------------------------------------------------
(1) 1110/FFFFFFFFFFFF0A42 :                     ; Video_Copy
(1) 1111/FFFFFFFFFFFF0A42 :                     ;
(1) 1112/FFFFFFFFFFFF0A42 :                     ; Copy VRAM data to another location inside VRAM
(1) 1113/FFFFFFFFFFFF0A42 :                     ;
(1) 1114/FFFFFFFFFFFF0A42 :                     ; Input:
(1) 1115/FFFFFFFFFFFF0A42 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1116/FFFFFFFFFFFF0A42 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1117/FFFFFFFFFFFF0A42 :                     ; d2.w | Size
(1) 1118/FFFFFFFFFFFF0A42 :                     ; --------------------------------------------------------
(1) 1119/FFFFFFFFFFFF0A42 :                     
(1) 1120/FFFFFFFFFFFF0A42 :                     Video_Copy:
(1) 1121/FFFFFFFFFFFF0A42 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1122/FFFFFFFFFFFF0A46 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1123/FFFFFFFFFFFF0A4C : 3E16                .dmaw:		move.w	(a6),d7
(1) 1124/FFFFFFFFFFFF0A4E : 0807 0001           		btst	#bitDma,d7
(1) 1125/FFFFFFFFFFFF0A52 : 66F8                		bne.s	.dmaw
(1) 1126/FFFFFFFFFFFF0A54 : 6100 FCA2           		bsr	Video_DmaOn
(1) 1127/FFFFFFFFFFFF0A58 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1128/FFFFFFFFFFFF0A5C : 3E02                		move.w	d2,d7			; SIZE
(1) 1129/FFFFFFFFFFFF0A5E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1130/FFFFFFFFFFFF0A64 : 1C07                		move.b	d7,d6
(1) 1131/FFFFFFFFFFFF0A66 : 4846                		swap	d6
(1) 1132/FFFFFFFFFFFF0A68 : E04F                		lsr.w	#8,d7
(1) 1133/FFFFFFFFFFFF0A6A : 1C07                		move.b	d7,d6
(1) 1134/FFFFFFFFFFFF0A6C : 4846                		swap	d6
(1) 1135/FFFFFFFFFFFF0A6E : 2C86                		move.l	d6,(a6)
(1) 1136/FFFFFFFFFFFF0A70 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1137/FFFFFFFFFFFF0A76 : 3E00                		move.w	d0,d7
(1) 1138/FFFFFFFFFFFF0A78 : 1C07                		move.b	d7,d6
(1) 1139/FFFFFFFFFFFF0A7A : 4846                		swap	d6
(1) 1140/FFFFFFFFFFFF0A7C : E04F                		lsr.w	#8,d7
(1) 1141/FFFFFFFFFFFF0A7E : 1C07                		move.b	d7,d6
(1) 1142/FFFFFFFFFFFF0A80 : 2C86                		move.l	d6,(a6)
(1) 1143/FFFFFFFFFFFF0A82 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1144/FFFFFFFFFFFF0A86 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1145/FFFFFFFFFFFF0A88 : 3C07                		move.w	d7,d6
(1) 1146/FFFFFFFFFFFF0A8A : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1147/FFFFFFFFFFFF0A8E : 0046 4000           		ori.w	#$4000,d6
(1) 1148/FFFFFFFFFFFF0A92 : 4846                		swap	d6
(1) 1149/FFFFFFFFFFFF0A94 : 3C07                		move.w	d7,d6
(1) 1150/FFFFFFFFFFFF0A96 : E04E                		lsr.w	#8,d6
(1) 1151/FFFFFFFFFFFF0A98 : EC4E                		lsr.w	#6,d6
(1) 1152/FFFFFFFFFFFF0A9A : 0246 0003           		andi.w	#%11,d6
(1) 1153/FFFFFFFFFFFF0A9E : 0046 00C0           		ori.w	#$C0,d6
(1) 1154/FFFFFFFFFFFF0AA2 : 2C86                		move.l	d6,(a6)
(1) 1155/FFFFFFFFFFFF0AA4 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1156/FFFFFFFFFFFF0AA8 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1157/FFFFFFFFFFFF0AAA : 0807 0001           		btst	#bitDma,d7
(1) 1158/FFFFFFFFFFFF0AAE : 66F8                		bne.s	.dma_w
(1) 1159/FFFFFFFFFFFF0AB0 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1160/FFFFFFFFFFFF0AB4 : 6100 FC4E           		bsr	Video_DmaOff
(1) 1161/FFFFFFFFFFFF0AB8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1162/FFFFFFFFFFFF0ABC : 4E75                		rts
(1) 1163/FFFFFFFFFFFF0ABE :                     
(1) 1164/FFFFFFFFFFFF0ABE :                     ; --------------------------------------------------------
(1) 1165/FFFFFFFFFFFF0ABE :                     ; Video_MakeDmaEntry
(1) 1166/FFFFFFFFFFFF0ABE :                     ;
(1) 1167/FFFFFFFFFFFF0ABE :                     ; Makes a new entry to the DMA BLAST list
(1) 1168/FFFFFFFFFFFF0ABE :                     ; to be processed on the next VBlank
(1) 1169/FFFFFFFFFFFF0ABE :                     ;
(1) 1170/FFFFFFFFFFFF0ABE :                     ; Input:
(1) 1171/FFFFFFFFFFFF0ABE :                     ; d0.l | Graphics data location
(1) 1172/FFFFFFFFFFFF0ABE :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1173/FFFFFFFFFFFF0ABE :                     ; d2.w | Size
(1) 1174/FFFFFFFFFFFF0ABE :                     ;
(1) 1175/FFFFFFFFFFFF0ABE :                     ; Notes:
(1) 1176/FFFFFFFFFFFF0ABE :                     ; - Call this during DISPLAY only
(1) 1177/FFFFFFFFFFFF0ABE :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1178/FFFFFFFFFFFF0ABE :                     ;
(1) 1179/FFFFFFFFFFFF0ABE :                     ; * SCD/CD32X ONLY:
(1) 1180/FFFFFFFFFFFF0ABE :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1181/FFFFFFFFFFFF0ABE :                     ;   if not reading from WORD-RAM
(1) 1182/FFFFFFFFFFFF0ABE :                     ; --------------------------------------------------------
(1) 1183/FFFFFFFFFFFF0ABE :                     
(1) 1184/FFFFFFFFFFFF0ABE :                     Video_MakeDmaEntry:
(1) 1185/FFFFFFFFFFFF0ABE : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1186/FFFFFFFFFFFF0AC2 : 2E00                		move.l	d0,d7
(1) 1187/FFFFFFFFFFFF0AC4 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1188/FFFFFFFFFFFF0ACA : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1189/FFFFFFFFFFFF0AD0 : 6736                		beq.s	.normal
(1) 1190/FFFFFFFFFFFF0AD2 : 2A00                		move.l	d0,d5
(1) 1191/FFFFFFFFFFFF0AD4 : DA42                		add.w	d2,d5
(1) 1192/FFFFFFFFFFFF0AD6 : 6430                		bcc.s	.normal
(1) 1193/FFFFFFFFFFFF0AD8 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1194/FFFFFFFFFFFF0ADA : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1195/FFFFFFFFFFFF0ADC : 2E05                		move.l	d5,d7
(1) 1196/FFFFFFFFFFFF0ADE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1197/FFFFFFFFFFFF0AE4 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1198/FFFFFFFFFFFF0AEA : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1199/FFFFFFFFFFFF0AEC : 6128                		bsr.s	.mk_set
(1) 1200/FFFFFFFFFFFF0AEE : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1201/FFFFFFFFFFFF0AF0 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1202/FFFFFFFFFFFF0AF6 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1203/FFFFFFFFFFFF0AFC : 2C05                		move.l	d5,d6
(1) 1204/FFFFFFFFFFFF0AFE : 9C80                		sub.l	d0,d6
(1) 1205/FFFFFFFFFFFF0B00 : 3E02                		move.w	d2,d7
(1) 1206/FFFFFFFFFFFF0B02 : 9E46                		sub.w	d6,d7
(1) 1207/FFFFFFFFFFFF0B04 : DC41                		add.w	d1,d6
(1) 1208/FFFFFFFFFFFF0B06 : 6006                		bra.s	.last_set
(1) 1209/FFFFFFFFFFFF0B08 :                     .normal:
(1) 1210/FFFFFFFFFFFF0B08 : 2A00                		move.l	d0,d5
(1) 1211/FFFFFFFFFFFF0B0A : 3C01                		move.w	d1,d6
(1) 1212/FFFFFFFFFFFF0B0C : 3E02                		move.w	d2,d7
(1) 1213/FFFFFFFFFFFF0B0E :                     .last_set:
(1) 1214/FFFFFFFFFFFF0B0E : 6106                		bsr.s	.mk_set
(1) 1215/FFFFFFFFFFFF0B10 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1216/FFFFFFFFFFFF0B14 : 4E75                		rts
(1) 1217/FFFFFFFFFFFF0B16 :                     
(1) 1218/FFFFFFFFFFFF0B16 :                     ; d7 - size
(1) 1219/FFFFFFFFFFFF0B16 :                     ; d6 - vram
(1) 1220/FFFFFFFFFFFF0B16 :                     ; d5 - data
(1) 1221/FFFFFFFFFFFF0B16 :                     .mk_set:
(1) 1222/FFFFFFFFFFFF0B16 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1223/FFFFFFFFFFFF0B1C : 4847                		swap	d7
(1) 1224/FFFFFFFFFFFF0B1E : 3E38 E6D0           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1225/FFFFFFFFFFFF0B22 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1226/FFFFFFFFFFFF0B26 : 6C7A                		bge	.ran_out
(1) 1227/FFFFFFFFFFFF0B28 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1228/FFFFFFFFFFFF0B2A : 4DF8 E6D8           		lea	(RAM_VdpDmaList).w,a6
(1) 1229/FFFFFFFFFFFF0B2E : DCC7                		adda	d7,a6
(1) 1230/FFFFFFFFFFFF0B30 : 4847                		swap	d7
(1) 1231/FFFFFFFFFFFF0B32 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1232/FFFFFFFFFFFF0B38 : 6768                		beq.s	.ran_out		; If == 0, bad
(1) 1233/FFFFFFFFFFFF0B3A : 4A47                		tst.w	d7
(1) 1234/FFFFFFFFFFFF0B3C : 6B64                		bmi.s	.ran_out		; If negative, bad
(1) 1235/FFFFFFFFFFFF0B3E : 31FC 0001 E6D2      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1236/FFFFFFFFFFFF0B44 : 5278 E6D0           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1237/FFFFFFFFFFFF0B48 : E24F                		lsr.w	#1,d7
(1) 1238/FFFFFFFFFFFF0B4A : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1240/FFFFFFFFFFFF0B4E : 2F05                  		move.l	d5,-(sp)		; Save TOP point
(1) 1241/FFFFFFFFFFFF0B50 : 2E05                  		move.l	d5,d7
(1) 1242/FFFFFFFFFFFF0B52 : 0287 00F0 0000        		andi.l	#$F00000,d7
(1) 1243/FFFFFFFFFFFF0B58 : 0C87 0020 0000        		cmpi.l	#$200000,d7
(1) 1244/FFFFFFFFFFFF0B5E : 6602                  		bne.s	.not_wram
(1) 1245/FFFFFFFFFFFF0B60 : 5485                  		addq.l	#2,d5			; WORD-RAM patch
(1) 1246/FFFFFFFFFFFF0B62 :                     .not_wram:
(1) 1248/FFFFFFFFFFFF0B62 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1249/FFFFFFFFFFFF0B64 : 2E05                  		move.l	d5,d7
(1) 1250/FFFFFFFFFFFF0B66 : 4847                  		swap	d7
(1) 1251/FFFFFFFFFFFF0B68 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1252/FFFFFFFFFFFF0B6C : 1D47 0009            		move.b	d7,9(a6)
(1) 1253/FFFFFFFFFFFF0B70 : 3E06                		move.w	d6,d7			; Destination
(1) 1254/FFFFFFFFFFFF0B72 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1255/FFFFFFFFFFFF0B78 : 0046 4000           		ori.w	#$4000,d6
(1) 1256/FFFFFFFFFFFF0B7C : E04F                		lsr.w	#8,d7
(1) 1257/FFFFFFFFFFFF0B7E : EC4F                		lsr.w	#6,d7
(1) 1258/FFFFFFFFFFFF0B80 : 0247 0003           		andi.w	#%11,d7
(1) 1259/FFFFFFFFFFFF0B84 : 0047 0080           		ori.w	#$80,d7
(1) 1260/FFFFFFFFFFFF0B88 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1261/FFFFFFFFFFFF0B8C : 3D47 000C           		move.w	d7,$C(a6)
(1) 1263/FFFFFFFFFFFF0B90 : 2E0E                		move.l	a6,d7			; Save a6
(1) 1264/FFFFFFFFFFFF0B92 : 2C5F                		move.l	(sp)+,a6		; Restore TOP point
(1) 1265/FFFFFFFFFFFF0B94 : 3C16                		move.w	(a6),d6			; Read the first 4 pixels to d6
(1) 1266/FFFFFFFFFFFF0B96 : 2C47                		move.l	d7,a6			; Restore a6
(1) 1267/FFFFFFFFFFFF0B98 : 3D46 000E           		move.w	d6,$E(a6)		; Write pixels copy
(1) 1269/FFFFFFFFFFFF0B9C : 31FC 0000 E6D2      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1270/FFFFFFFFFFFF0BA2 :                     .ran_out:
(1) 1271/FFFFFFFFFFFF0BA2 : 4E75                		rts
(1) 1272/FFFFFFFFFFFF0BA4 :                     
(1) 1273/FFFFFFFFFFFF0BA4 :                     ; ====================================================================
(1) 1274/FFFFFFFFFFFF0BA4 :                     ; --------------------------------------------------------
(1) 1275/FFFFFFFFFFFF0BA4 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1276/FFFFFFFFFFFF0BA4 :                     ;
(1) 1277/FFFFFFFFFFFF0BA4 :                     ; Write map data to VDP
(1) 1278/FFFFFFFFFFFF0BA4 :                     ;
(1) 1279/FFFFFFFFFFFF0BA4 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1280/FFFFFFFFFFFF0BA4 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1281/FFFFFFFFFFFF0BA4 :                     ;
(1) 1282/FFFFFFFFFFFF0BA4 :                     ; Input:
(1) 1283/FFFFFFFFFFFF0BA4 :                     ; a0   | Map data
(1) 1284/FFFFFFFFFFFF0BA4 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1285/FFFFFFFFFFFF0BA4 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1286/FFFFFFFFFFFF0BA4 :                     ; d2.l | Screen Width/VRAM location:
(1) 1287/FFFFFFFFFFFF0BA4 :                     ;        splitw(sw_size,vram_loc)
(1) 1288/FFFFFFFFFFFF0BA4 :                     ; d3.w | VRAM-cell increment
(1) 1289/FFFFFFFFFFFF0BA4 :                     ;
(1) 1290/FFFFFFFFFFFF0BA4 :                     ; Notes:
(1) 1291/FFFFFFFFFFFF0BA4 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1292/FFFFFFFFFFFF0BA4 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1293/FFFFFFFFFFFF0BA4 :                     ; * SCD/CD32X ONLY:
(1) 1294/FFFFFFFFFFFF0BA4 :                     ; - For making the dot-screen map see
(1) 1295/FFFFFFFFFFFF0BA4 :                     ;   Video_MdMcd_StampDotMap
(1) 1296/FFFFFFFFFFFF0BA4 :                     ; --------------------------------------------------------
(1) 1297/FFFFFFFFFFFF0BA4 :                     
(1) 1298/FFFFFFFFFFFF0BA4 :                     Video_LoadMap:
(1) 1299/FFFFFFFFFFFF0BA4 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1300/FFFFFFFFFFFF0BA8 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1301/FFFFFFFFFFFF0BAE :                     
(1) 1302/FFFFFFFFFFFF0BAE : 2C02                		move.l	d2,d6
(1) 1303/FFFFFFFFFFFF0BB0 : 4846                		swap	d6
(1) 1304/FFFFFFFFFFFF0BB2 : 3A00                		move.w	d0,d5
(1) 1305/FFFFFFFFFFFF0BB4 : CAC6                		mulu.w	d6,d5
(1) 1306/FFFFFFFFFFFF0BB6 : 2800                		move.l	d0,d4
(1) 1307/FFFFFFFFFFFF0BB8 : 4844                		swap	d4
(1) 1308/FFFFFFFFFFFF0BBA : D844                		add.w	d4,d4
(1) 1309/FFFFFFFFFFFF0BBC : DA44                		add.w	d4,d5
(1) 1310/FFFFFFFFFFFF0BBE : 3E02                		move.w	d2,d7
(1) 1311/FFFFFFFFFFFF0BC0 : DE45                		add.w	d5,d7
(1) 1312/FFFFFFFFFFFF0BC2 : 7A00                		moveq	#0,d5
(1) 1313/FFFFFFFFFFFF0BC4 : 3A07                		move.w	d7,d5
(1) 1314/FFFFFFFFFFFF0BC6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1315/FFFFFFFFFFFF0BCA : 8E7C 4000           		or.w	#$4000,d7
(1) 1316/FFFFFFFFFFFF0BCE : E55D                		rol.w	#2,d5
(1) 1317/FFFFFFFFFFFF0BD0 : 0245 0003           		andi.w	#%11,d5
(1) 1318/FFFFFFFFFFFF0BD4 : 4845                		swap	d5
(1) 1319/FFFFFFFFFFFF0BD6 : 2A48                		move.l	a0,a5
(1) 1320/FFFFFFFFFFFF0BD8 : 3801                		move.w	d1,d4
(1) 1321/FFFFFFFFFFFF0BDA : 5344                		subq.w	#1,d4
(1) 1322/FFFFFFFFFFFF0BDC : 6B36                		bmi.s	.bad_size
(1) 1323/FFFFFFFFFFFF0BDE :                     .y_loop:
(1) 1324/FFFFFFFFFFFF0BDE : 2844                		move.l	d4,a4
(1) 1325/FFFFFFFFFFFF0BE0 : 4845                		swap	d5
(1) 1326/FFFFFFFFFFFF0BE2 : 3D47 0004           		move.w	d7,4(a6)
(1) 1327/FFFFFFFFFFFF0BE6 : 3D45 0004           		move.w	d5,4(a6)
(1) 1328/FFFFFFFFFFFF0BEA : 4845                		swap	d5
(1) 1329/FFFFFFFFFFFF0BEC : 2801                		move.l	d1,d4
(1) 1330/FFFFFFFFFFFF0BEE : 4844                		swap	d4
(1) 1331/FFFFFFFFFFFF0BF0 : 5344                		subq.w	#1,d4
(1) 1332/FFFFFFFFFFFF0BF2 :                     .x_loop:
(1) 1333/FFFFFFFFFFFF0BF2 : 4844                		swap	d4
(1) 1334/FFFFFFFFFFFF0BF4 : 381D                		move.w	(a5)+,d4
(1) 1335/FFFFFFFFFFFF0BF6 : B87C FFFF           		cmp.w	#-1,d4
(1) 1336/FFFFFFFFFFFF0BFA : 6606                		bne.s	.non_blank
(1) 1337/FFFFFFFFFFFF0BFC : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1338/FFFFFFFFFFFF0C00 : 6002                		bra.s	.mk_cell
(1) 1339/FFFFFFFFFFFF0C02 :                     .non_blank:
(1) 1340/FFFFFFFFFFFF0C02 : D843                		add.w	d3,d4
(1) 1341/FFFFFFFFFFFF0C04 :                     .mk_cell:
(1) 1342/FFFFFFFFFFFF0C04 : 3C84                		move.w	d4,(a6)
(1) 1343/FFFFFFFFFFFF0C06 : 4844                		swap	d4
(1) 1344/FFFFFFFFFFFF0C08 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1345/FFFFFFFFFFFF0C0C : DE46                		add.w	d6,d7
(1) 1346/FFFFFFFFFFFF0C0E : 280C                		move.l	a4,d4
(1) 1347/FFFFFFFFFFFF0C10 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1348/FFFFFFFFFFFF0C14 :                     .bad_size:
(1) 1349/FFFFFFFFFFFF0C14 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1350/FFFFFFFFFFFF0C18 : 4E75                		rts
(1) 1351/FFFFFFFFFFFF0C1A :                     ; ------------------------------------------------
(1) 1352/FFFFFFFFFFFF0C1A :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1353/FFFFFFFFFFFF0C1A :                     ; d2.l | Screen Width/VRAM location:
(1) 1354/FFFFFFFFFFFF0C1A :                     ; d3.w | VRAM-cell increment
(1) 1355/FFFFFFFFFFFF0C1A :                     
(1) 1356/FFFFFFFFFFFF0C1A :                     Video_LoadMapV:
(1) 1357/FFFFFFFFFFFF0C1A : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1358/FFFFFFFFFFFF0C1E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1359/FFFFFFFFFFFF0C24 : 2C02                		move.l	d2,d6
(1) 1360/FFFFFFFFFFFF0C26 : 4846                		swap	d6
(1) 1361/FFFFFFFFFFFF0C28 : 3A00                		move.w	d0,d5
(1) 1362/FFFFFFFFFFFF0C2A : CAC6                		mulu.w	d6,d5
(1) 1363/FFFFFFFFFFFF0C2C : 2800                		move.l	d0,d4
(1) 1364/FFFFFFFFFFFF0C2E : 4844                		swap	d4
(1) 1365/FFFFFFFFFFFF0C30 : D844                		add.w	d4,d4
(1) 1366/FFFFFFFFFFFF0C32 : DA44                		add.w	d4,d5
(1) 1367/FFFFFFFFFFFF0C34 : 3E02                		move.w	d2,d7
(1) 1368/FFFFFFFFFFFF0C36 : DE45                		add.w	d5,d7
(1) 1369/FFFFFFFFFFFF0C38 : 7A00                		moveq	#0,d5
(1) 1370/FFFFFFFFFFFF0C3A : 3A07                		move.w	d7,d5
(1) 1371/FFFFFFFFFFFF0C3C : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1372/FFFFFFFFFFFF0C40 : 8E7C 4000           		or.w	#$4000,d7
(1) 1373/FFFFFFFFFFFF0C44 : E55D                		rol.w	#2,d5
(1) 1374/FFFFFFFFFFFF0C46 : 0245 0003           		andi.w	#%11,d5
(1) 1375/FFFFFFFFFFFF0C4A : 4845                		swap	d5
(1) 1376/FFFFFFFFFFFF0C4C : 2A48                		move.l	a0,a5
(1) 1377/FFFFFFFFFFFF0C4E : 0838 0002 E873      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1378/FFFFFFFFFFFF0C54 : 664C                		bne.s	.dble_mode
(1) 1379/FFFFFFFFFFFF0C56 : 2801                		move.l	d1,d4
(1) 1380/FFFFFFFFFFFF0C58 : 4844                		swap	d4
(1) 1381/FFFFFFFFFFFF0C5A : 5344                		subq.w	#1,d4
(1) 1382/FFFFFFFFFFFF0C5C : 6B3E                		bmi.s	.bad_size
(1) 1383/FFFFFFFFFFFF0C5E :                     .x_loop:
(1) 1384/FFFFFFFFFFFF0C5E : 2844                		move.l	d4,a4
(1) 1385/FFFFFFFFFFFF0C60 : 3801                		move.w	d1,d4
(1) 1386/FFFFFFFFFFFF0C62 : 5344                		subq.w	#1,d4
(1) 1387/FFFFFFFFFFFF0C64 :                     .y_loop:
(1) 1388/FFFFFFFFFFFF0C64 : 4844                		swap	d4
(1) 1389/FFFFFFFFFFFF0C66 : 3807                		move.w	d7,d4
(1) 1390/FFFFFFFFFFFF0C68 : D845                		add.w	d5,d4
(1) 1391/FFFFFFFFFFFF0C6A : 4845                		swap	d5
(1) 1392/FFFFFFFFFFFF0C6C : 3D44 0004           		move.w	d4,4(a6)
(1) 1393/FFFFFFFFFFFF0C70 : 3D45 0004           		move.w	d5,4(a6)
(1) 1394/FFFFFFFFFFFF0C74 : 4845                		swap	d5
(1) 1395/FFFFFFFFFFFF0C76 : 381D                		move.w	(a5)+,d4
(1) 1396/FFFFFFFFFFFF0C78 : B87C FFFF           		cmp.w	#-1,d4
(1) 1397/FFFFFFFFFFFF0C7C : 6606                		bne.s	.non_blank
(1) 1398/FFFFFFFFFFFF0C7E : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1399/FFFFFFFFFFFF0C82 : 6002                		bra.s	.mk_cell
(1) 1400/FFFFFFFFFFFF0C84 :                     .non_blank:
(1) 1401/FFFFFFFFFFFF0C84 : D843                		add.w	d3,d4
(1) 1402/FFFFFFFFFFFF0C86 :                     .mk_cell:
(1) 1403/FFFFFFFFFFFF0C86 : 3C84                		move.w	d4,(a6)
(1) 1404/FFFFFFFFFFFF0C88 : DA46                		add.w	d6,d5
(1) 1405/FFFFFFFFFFFF0C8A : 4844                		swap	d4
(1) 1406/FFFFFFFFFFFF0C8C : 51CC FFD6           		dbf	d4,.y_loop
(1) 1407/FFFFFFFFFFFF0C90 : DE7C 0002           		add.w	#2,d7
(1) 1408/FFFFFFFFFFFF0C94 : 4245                		clr.w	d5
(1) 1409/FFFFFFFFFFFF0C96 : 280C                		move.l	a4,d4
(1) 1410/FFFFFFFFFFFF0C98 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1411/FFFFFFFFFFFF0C9C :                     .bad_size:
(1) 1412/FFFFFFFFFFFF0C9C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1413/FFFFFFFFFFFF0CA0 : 4E75                		rts
(1) 1414/FFFFFFFFFFFF0CA2 :                     
(1) 1415/FFFFFFFFFFFF0CA2 :                     ; ------------------------------------------------
(1) 1416/FFFFFFFFFFFF0CA2 :                     
(1) 1417/FFFFFFFFFFFF0CA2 :                     .dble_mode:
(1) 1418/FFFFFFFFFFFF0CA2 : 2F01                		move.l	d1,-(sp)
(1) 1419/FFFFFFFFFFFF0CA4 :                     
(1) 1420/FFFFFFFFFFFF0CA4 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1421/FFFFFFFFFFFF0CA6 : 3803                		move.w	d3,d4
(1) 1422/FFFFFFFFFFFF0CA8 : 0244 F800           		andi.w	#$F800,d4
(1) 1423/FFFFFFFFFFFF0CAC : 0243 07FF           		andi.w	#$7FF,d3
(1) 1424/FFFFFFFFFFFF0CB0 : E24B                		lsr.w	#1,d3
(1) 1425/FFFFFFFFFFFF0CB2 : 8644                		or.w	d4,d3
(1) 1426/FFFFFFFFFFFF0CB4 :                     
(1) 1427/FFFFFFFFFFFF0CB4 : 2801                		move.l	d1,d4
(1) 1428/FFFFFFFFFFFF0CB6 : 4844                		swap	d4
(1) 1429/FFFFFFFFFFFF0CB8 : 5344                		subq.w	#1,d4
(1) 1430/FFFFFFFFFFFF0CBA : 6B48                		bmi.s	.bad_size_d
(1) 1431/FFFFFFFFFFFF0CBC :                     .x_loop_d:
(1) 1432/FFFFFFFFFFFF0CBC : 2844                		move.l	d4,a4
(1) 1433/FFFFFFFFFFFF0CBE : 3801                		move.w	d1,d4
(1) 1434/FFFFFFFFFFFF0CC0 : 5344                		subq.w	#1,d4
(1) 1435/FFFFFFFFFFFF0CC2 :                     .y_loop_d:
(1) 1436/FFFFFFFFFFFF0CC2 : 4844                		swap	d4
(1) 1437/FFFFFFFFFFFF0CC4 : 3807                		move.w	d7,d4
(1) 1438/FFFFFFFFFFFF0CC6 : D845                		add.w	d5,d4
(1) 1439/FFFFFFFFFFFF0CC8 : 4845                		swap	d5
(1) 1440/FFFFFFFFFFFF0CCA : 3D44 0004           		move.w	d4,4(a6)
(1) 1441/FFFFFFFFFFFF0CCE : 3D45 0004           		move.w	d5,4(a6)
(1) 1442/FFFFFFFFFFFF0CD2 : 4845                		swap	d5
(1) 1443/FFFFFFFFFFFF0CD4 : 381D                		move.w	(a5)+,d4
(1) 1444/FFFFFFFFFFFF0CD6 : DAFC 0002           		adda	#2,a5
(1) 1445/FFFFFFFFFFFF0CDA : B87C FFFF           		cmp.w	#-1,d4
(1) 1446/FFFFFFFFFFFF0CDE : 6606                		bne.s	.non_blank_d
(1) 1447/FFFFFFFFFFFF0CE0 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1448/FFFFFFFFFFFF0CE4 : 6008                		bra.s	.mk_cell_d
(1) 1449/FFFFFFFFFFFF0CE6 :                     .non_blank_d:
(1) 1450/FFFFFFFFFFFF0CE6 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1451/FFFFFFFFFFFF0CEA : E24C                		lsr.w	#1,d4
(1) 1452/FFFFFFFFFFFF0CEC : D843                		add.w	d3,d4
(1) 1453/FFFFFFFFFFFF0CEE :                     .mk_cell_d:
(1) 1454/FFFFFFFFFFFF0CEE : 3C84                		move.w	d4,(a6)
(1) 1455/FFFFFFFFFFFF0CF0 : DA46                		add.w	d6,d5
(1) 1456/FFFFFFFFFFFF0CF2 : 4844                		swap	d4
(1) 1457/FFFFFFFFFFFF0CF4 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1458/FFFFFFFFFFFF0CF8 : DE7C 0002           		add.w	#2,d7
(1) 1459/FFFFFFFFFFFF0CFC : 4245                		clr.w	d5
(1) 1460/FFFFFFFFFFFF0CFE : 280C                		move.l	a4,d4
(1) 1461/FFFFFFFFFFFF0D00 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1462/FFFFFFFFFFFF0D04 :                     .bad_size_d:
(1) 1463/FFFFFFFFFFFF0D04 : 221F                		move.l	(sp)+,d1
(1) 1464/FFFFFFFFFFFF0D06 : 6094                		bra	.bad_size
(1) 1465/FFFFFFFFFFFF0D08 :                     
(1) 1466/FFFFFFFFFFFF0D08 :                     ; ====================================================================
(1) 1467/FFFFFFFFFFFF0D08 :                     ; ----------------------------------------------------------------
(1) 1468/FFFFFFFFFFFF0D08 :                     ; Palette fading section
(1) 1469/FFFFFFFFFFFF0D08 :                     ; ----------------------------------------------------------------
(1) 1470/FFFFFFFFFFFF0D08 :                     
(1) 1471/FFFFFFFFFFFF0D08 :                     ; --------------------------------------------------------
(1) 1472/FFFFFFFFFFFF0D08 :                     ; Video_RunFade
(1) 1473/FFFFFFFFFFFF0D08 :                     ;
(1) 1474/FFFFFFFFFFFF0D08 :                     ; Process Palette changes (fade and effects)
(1) 1475/FFFFFFFFFFFF0D08 :                     ; --------------------------------------------------------
(1) 1476/FFFFFFFFFFFF0D08 :                     
(1) 1477/FFFFFFFFFFFF0D08 :                     Video_RunFade:
(1) 1478/FFFFFFFFFFFF0D08 : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1479/FFFFFFFFFFFF0D0C :                     .next_req:
(1) 1480/FFFFFFFFFFFF0D0C : 1016                		move.b	palfd_req(a6),d0
(1) 1481/FFFFFFFFFFFF0D0E : 6744                		beq.s	.no_req
(1) 1482/FFFFFFFFFFFF0D10 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1483/FFFFFFFFFFFF0D14 : 6A38                		bpl.s	.busy_timer
(1) 1484/FFFFFFFFFFFF0D16 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1485/FFFFFFFFFFFF0D1C : 4BF8 E5D0           		lea	(RAM_Palette).w,a5
(1) 1486/FFFFFFFFFFFF0D20 : 49F8 E650           		lea	(RAM_PaletteFade).w,a4
(1) 1487/FFFFFFFFFFFF0D24 : 7E00                		moveq	#0,d7
(1) 1488/FFFFFFFFFFFF0D26 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1489/FFFFFFFFFFFF0D2A : DE47                		add.w	d7,d7
(1) 1490/FFFFFFFFFFFF0D2C : DAC7                		adda	d7,a5
(1) 1491/FFFFFFFFFFFF0D2E : D8C7                		adda	d7,a4
(1) 1492/FFFFFFFFFFFF0D30 : 7C00                		moveq	#0,d6
(1) 1493/FFFFFFFFFFFF0D32 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1494/FFFFFFFFFFFF0D36 : 6716                		beq.s	.busy_timer
(1) 1495/FFFFFFFFFFFF0D38 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1496/FFFFFFFFFFFF0D3C : DC46                		add.w	d6,d6		; * 2
(1) 1497/FFFFFFFFFFFF0D3E : 5347                		subq.w	#1,d7
(1) 1498/FFFFFFFFFFFF0D40 : 0240 00FF           		andi.w	#$FF,d0
(1) 1499/FFFFFFFFFFFF0D44 : D040                		add.w	d0,d0
(1) 1500/FFFFFFFFFFFF0D46 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1501/FFFFFFFFFFFF0D4A : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1502/FFFFFFFFFFFF0D4E :                     .busy_timer:
(1) 1503/FFFFFFFFFFFF0D4E : DCFC 0008           		adda	#palfd_len,a6
(1) 1504/FFFFFFFFFFFF0D52 : 60B8                		bra.s	.next_req
(1) 1505/FFFFFFFFFFFF0D54 :                     .no_req:
(1) 1506/FFFFFFFFFFFF0D54 : 4278 E85C           		clr.w	(RAM_IndxPalFade).w
(1) 1507/FFFFFFFFFFFF0D58 : 4E75                		rts
(1) 1508/FFFFFFFFFFFF0D5A :                     
(1) 1509/FFFFFFFFFFFF0D5A :                     ; ------------------------------------------------
(1) 1510/FFFFFFFFFFFF0D5A :                     
(1) 1511/FFFFFFFFFFFF0D5A :                     .fade_list:
(1) 1512/FFFFFFFFFFFF0D5A : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1513/FFFFFFFFFFFF0D5C : 0018                		dc.w .fade_out-.fade_list
(1) 1514/FFFFFFFFFFFF0D5E : 0088                		dc.w .fade_in-.fade_list
(1) 1515/FFFFFFFFFFFF0D60 : 0010                		dc.w .nothing-.fade_list
(1) 1516/FFFFFFFFFFFF0D62 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1517/FFFFFFFFFFFF0D64 : 0010                		dc.w .nothing-.fade_list
(1) 1518/FFFFFFFFFFFF0D66 : 0010                		dc.w .nothing-.fade_list
(1) 1519/FFFFFFFFFFFF0D68 : 0010                		dc.w .nothing-.fade_list
(1) 1520/FFFFFFFFFFFF0D6A :                     
(1) 1521/FFFFFFFFFFFF0D6A :                     ; ----------------------------------------------------
(1) 1522/FFFFFFFFFFFF0D6A :                     ; Fade request $00: Null/exit.
(1) 1523/FFFFFFFFFFFF0D6A :                     ; ----------------------------------------------------
(1) 1524/FFFFFFFFFFFF0D6A :                     
(1) 1525/FFFFFFFFFFFF0D6A :                     .nothing:
(1) 1526/FFFFFFFFFFFF0D6A :                     .pfade_del:
(1) 1527/FFFFFFFFFFFF0D6A : 4216                		clr.b	palfd_req(a6)
(1) 1528/FFFFFFFFFFFF0D6C : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1529/FFFFFFFFFFFF0D70 : 4E75                		rts
(1) 1530/FFFFFFFFFFFF0D72 :                     
(1) 1531/FFFFFFFFFFFF0D72 :                     ; ----------------------------------------------------
(1) 1532/FFFFFFFFFFFF0D72 :                     ; Fade request $01: fade-out to black
(1) 1533/FFFFFFFFFFFF0D72 :                     ; Quick.
(1) 1534/FFFFFFFFFFFF0D72 :                     ;
(1) 1535/FFFFFFFFFFFF0D72 :                     ; d7 - Num colors
(1) 1536/FFFFFFFFFFFF0D72 :                     ; d6 - Increment*2
(1) 1537/FFFFFFFFFFFF0D72 :                     ; ----------------------------------------------------
(1) 1538/FFFFFFFFFFFF0D72 :                     
(1) 1539/FFFFFFFFFFFF0D72 :                     .fade_out:
(1) 1540/FFFFFFFFFFFF0D72 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1541/FFFFFFFFFFFF0D76 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1542/FFFFFFFFFFFF0D7A : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1543/FFFFFFFFFFFF0D7E : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1544/FFFFFFFFFFFF0D80 :                     .next_color:
(1) 1545/FFFFFFFFFFFF0D80 : 3015                		move.w	(a5),d0
(1) 1546/FFFFFFFFFFFF0D82 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1547/FFFFFFFFFFFF0D84 :                     	rept 3
(1) 1548/FFFFFFFFFFFF0D84 :                     		move.w	d0,d1
(1) 1549/FFFFFFFFFFFF0D84 :                     		and.w	d5,d1			; Filter TARGET
(1) 1550/FFFFFFFFFFFF0D84 :                     		beq.s	.no_chng
(1) 1551/FFFFFFFFFFFF0D84 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1552/FFFFFFFFFFFF0D84 :                     		sub.w	d6,d1
(1) 1553/FFFFFFFFFFFF0D84 :                     		bpl.s	.blck_alrdy
(1) 1554/FFFFFFFFFFFF0D84 :                     		clr.w	d1
(1) 1555/FFFFFFFFFFFF0D84 :                     .blck_alrdy:
(1) 1556/FFFFFFFFFFFF0D84 :                     		addq.w	#1,d3			; Color changed
(1) 1557/FFFFFFFFFFFF0D84 :                     .no_chng:
(1) 1558/FFFFFFFFFFFF0D84 :                     		or.w	d1,d0
(1) 1559/FFFFFFFFFFFF0D84 :                     		rol.w	#4,d6			; next << color
(1) 1560/FFFFFFFFFFFF0D84 :                     		rol.w	#4,d5
(1) 1561/FFFFFFFFFFFF0D84 :                     		rol.w	#4,d4
(1) 1562/FFFFFFFFFFFF0D84 :                     	endm
(1) 1548/FFFFFFFFFFFF0D84 : 3200                		move.w	d0,d1
(1) 1549/FFFFFFFFFFFF0D86 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1550/FFFFFFFFFFFF0D88 : 670A                		beq.s	.no_chng
(1) 1551/FFFFFFFFFFFF0D8A : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1552/FFFFFFFFFFFF0D8C : 9246                		sub.w	d6,d1
(1) 1553/FFFFFFFFFFFF0D8E : 6A02                		bpl.s	.blck_alrdy
(1) 1554/FFFFFFFFFFFF0D90 : 4241                		clr.w	d1
(1) 1555/FFFFFFFFFFFF0D92 :                     .blck_alrdy:
(1) 1556/FFFFFFFFFFFF0D92 : 5243                		addq.w	#1,d3			; Color changed
(1) 1557/FFFFFFFFFFFF0D94 :                     .no_chng:
(1) 1558/FFFFFFFFFFFF0D94 : 8041                		or.w	d1,d0
(1) 1559/FFFFFFFFFFFF0D96 : E95E                		rol.w	#4,d6			; next << color
(1) 1560/FFFFFFFFFFFF0D98 : E95D                		rol.w	#4,d5
(1) 1561/FFFFFFFFFFFF0D9A : E95C                		rol.w	#4,d4
(1) 1548/FFFFFFFFFFFF0D9C : 3200                		move.w	d0,d1
(1) 1549/FFFFFFFFFFFF0D9E : C245                		and.w	d5,d1			; Filter TARGET
(1) 1550/FFFFFFFFFFFF0DA0 : 670A                		beq.s	.no_chng
(1) 1551/FFFFFFFFFFFF0DA2 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1552/FFFFFFFFFFFF0DA4 : 9246                		sub.w	d6,d1
(1) 1553/FFFFFFFFFFFF0DA6 : 6A02                		bpl.s	.blck_alrdy
(1) 1554/FFFFFFFFFFFF0DA8 : 4241                		clr.w	d1
(1) 1555/FFFFFFFFFFFF0DAA :                     .blck_alrdy:
(1) 1556/FFFFFFFFFFFF0DAA : 5243                		addq.w	#1,d3			; Color changed
(1) 1557/FFFFFFFFFFFF0DAC :                     .no_chng:
(1) 1558/FFFFFFFFFFFF0DAC : 8041                		or.w	d1,d0
(1) 1559/FFFFFFFFFFFF0DAE : E95E                		rol.w	#4,d6			; next << color
(1) 1560/FFFFFFFFFFFF0DB0 : E95D                		rol.w	#4,d5
(1) 1561/FFFFFFFFFFFF0DB2 : E95C                		rol.w	#4,d4
(1) 1548/FFFFFFFFFFFF0DB4 : 3200                		move.w	d0,d1
(1) 1549/FFFFFFFFFFFF0DB6 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1550/FFFFFFFFFFFF0DB8 : 670A                		beq.s	.no_chng
(1) 1551/FFFFFFFFFFFF0DBA : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1552/FFFFFFFFFFFF0DBC : 9246                		sub.w	d6,d1
(1) 1553/FFFFFFFFFFFF0DBE : 6A02                		bpl.s	.blck_alrdy
(1) 1554/FFFFFFFFFFFF0DC0 : 4241                		clr.w	d1
(1) 1555/FFFFFFFFFFFF0DC2 :                     .blck_alrdy:
(1) 1556/FFFFFFFFFFFF0DC2 : 5243                		addq.w	#1,d3			; Color changed
(1) 1557/FFFFFFFFFFFF0DC4 :                     .no_chng:
(1) 1558/FFFFFFFFFFFF0DC4 : 8041                		or.w	d1,d0
(1) 1559/FFFFFFFFFFFF0DC6 : E95E                		rol.w	#4,d6			; next << color
(1) 1560/FFFFFFFFFFFF0DC8 : E95D                		rol.w	#4,d5
(1) 1561/FFFFFFFFFFFF0DCA : E95C                		rol.w	#4,d4
(1) 1563/FFFFFFFFFFFF0DCC :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1564/FFFFFFFFFFFF0DCC : E95E                		rol.w	#4,d6
(1) 1565/FFFFFFFFFFFF0DCE : E95D                		rol.w	#4,d5
(1) 1566/FFFFFFFFFFFF0DD0 : E95C                		rol.w	#4,d4
(1) 1567/FFFFFFFFFFFF0DD2 : 3A80                		move.w	d0,(a5)
(1) 1568/FFFFFFFFFFFF0DD4 :                     .all_black:
(1) 1569/FFFFFFFFFFFF0DD4 : DAFC 0002           		adda	#2,a5
(1) 1570/FFFFFFFFFFFF0DD8 : 51CF FFA6           		dbf	d7,.next_color
(1) 1571/FFFFFFFFFFFF0DDC : 4A43                		tst.w	d3
(1) 1572/FFFFFFFFFFFF0DDE : 678A                		beq	.pfade_del
(1) 1573/FFFFFFFFFFFF0DE0 :                     .fdout_nend:
(1) 1574/FFFFFFFFFFFF0DE0 : 4E75                		rts
(1) 1575/FFFFFFFFFFFF0DE2 :                     
(1) 1576/FFFFFFFFFFFF0DE2 :                     ; ----------------------------------------------------
(1) 1577/FFFFFFFFFFFF0DE2 :                     ; Fade request $02
(1) 1578/FFFFFFFFFFFF0DE2 :                     ; Fade-in
(1) 1579/FFFFFFFFFFFF0DE2 :                     ; ----------------------------------------------------
(1) 1580/FFFFFFFFFFFF0DE2 :                     
(1) 1581/FFFFFFFFFFFF0DE2 :                     .fade_in:
(1) 1582/FFFFFFFFFFFF0DE2 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1583/FFFFFFFFFFFF0DE6 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1584/FFFFFFFFFFFF0DEA : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1585/FFFFFFFFFFFF0DEE :                     .next_in:
(1) 1586/FFFFFFFFFFFF0DEE : 4847                		swap	d7
(1) 1587/FFFFFFFFFFFF0DF0 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1588/FFFFFFFFFFFF0DF2 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1589/FFFFFFFFFFFF0DF4 : C044                		and.w	d4,d0
(1) 1590/FFFFFFFFFFFF0DF6 : C444                		and.w	d4,d2
(1) 1591/FFFFFFFFFFFF0DF8 : B042                		cmp.w	d2,d0
(1) 1592/FFFFFFFFFFFF0DFA : 6766                		beq.s	.same_in
(1) 1593/FFFFFFFFFFFF0DFC :                     	rept 3
(1) 1594/FFFFFFFFFFFF0DFC :                     		move.w	d0,d1
(1) 1595/FFFFFFFFFFFF0DFC :                     		move.w	d4,d3
(1) 1596/FFFFFFFFFFFF0DFC :                     		eor.w	d5,d3
(1) 1597/FFFFFFFFFFFF0DFC :                     		and.w	d3,d0
(1) 1598/FFFFFFFFFFFF0DFC :                     		move.w	d2,d3
(1) 1599/FFFFFFFFFFFF0DFC :                     		and.w	d5,d1		; filter CURRENT color
(1) 1600/FFFFFFFFFFFF0DFC :                     		and.w	d5,d3		; filter TARGET color
(1) 1601/FFFFFFFFFFFF0DFC :                     
(1) 1602/FFFFFFFFFFFF0DFC :                     		add.w	d6,d1		; ADD to current
(1) 1603/FFFFFFFFFFFF0DFC :                     		cmp.w	d3,d1
(1) 1604/FFFFFFFFFFFF0DFC :                     		bcs.s	.max_out
(1) 1605/FFFFFFFFFFFF0DFC :                     		move.w	d2,d1
(1) 1606/FFFFFFFFFFFF0DFC :                     		and.w	d5,d1
(1) 1607/FFFFFFFFFFFF0DFC :                     .max_out:
(1) 1608/FFFFFFFFFFFF0DFC :                     		addq.w	#1,d7
(1) 1609/FFFFFFFFFFFF0DFC :                     		or.w	d1,d0
(1) 1610/FFFFFFFFFFFF0DFC :                     		rol.w	#4,d6		; next << color
(1) 1611/FFFFFFFFFFFF0DFC :                     		rol.w	#4,d5
(1) 1612/FFFFFFFFFFFF0DFC :                     	endm
(1) 1594/FFFFFFFFFFFF0DFC : 3200                		move.w	d0,d1
(1) 1595/FFFFFFFFFFFF0DFE : 3604                		move.w	d4,d3
(1) 1596/FFFFFFFFFFFF0E00 : BB43                		eor.w	d5,d3
(1) 1597/FFFFFFFFFFFF0E02 : C043                		and.w	d3,d0
(1) 1598/FFFFFFFFFFFF0E04 : 3602                		move.w	d2,d3
(1) 1599/FFFFFFFFFFFF0E06 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1600/FFFFFFFFFFFF0E08 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1601/FFFFFFFFFFFF0E0A :                     
(1) 1602/FFFFFFFFFFFF0E0A : D246                		add.w	d6,d1		; ADD to current
(1) 1603/FFFFFFFFFFFF0E0C : B243                		cmp.w	d3,d1
(1) 1604/FFFFFFFFFFFF0E0E : 6504                		bcs.s	.max_out
(1) 1605/FFFFFFFFFFFF0E10 : 3202                		move.w	d2,d1
(1) 1606/FFFFFFFFFFFF0E12 : C245                		and.w	d5,d1
(1) 1607/FFFFFFFFFFFF0E14 :                     .max_out:
(1) 1608/FFFFFFFFFFFF0E14 : 5247                		addq.w	#1,d7
(1) 1609/FFFFFFFFFFFF0E16 : 8041                		or.w	d1,d0
(1) 1610/FFFFFFFFFFFF0E18 : E95E                		rol.w	#4,d6		; next << color
(1) 1611/FFFFFFFFFFFF0E1A : E95D                		rol.w	#4,d5
(1) 1594/FFFFFFFFFFFF0E1C : 3200                		move.w	d0,d1
(1) 1595/FFFFFFFFFFFF0E1E : 3604                		move.w	d4,d3
(1) 1596/FFFFFFFFFFFF0E20 : BB43                		eor.w	d5,d3
(1) 1597/FFFFFFFFFFFF0E22 : C043                		and.w	d3,d0
(1) 1598/FFFFFFFFFFFF0E24 : 3602                		move.w	d2,d3
(1) 1599/FFFFFFFFFFFF0E26 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1600/FFFFFFFFFFFF0E28 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1601/FFFFFFFFFFFF0E2A :                     
(1) 1602/FFFFFFFFFFFF0E2A : D246                		add.w	d6,d1		; ADD to current
(1) 1603/FFFFFFFFFFFF0E2C : B243                		cmp.w	d3,d1
(1) 1604/FFFFFFFFFFFF0E2E : 6504                		bcs.s	.max_out
(1) 1605/FFFFFFFFFFFF0E30 : 3202                		move.w	d2,d1
(1) 1606/FFFFFFFFFFFF0E32 : C245                		and.w	d5,d1
(1) 1607/FFFFFFFFFFFF0E34 :                     .max_out:
(1) 1608/FFFFFFFFFFFF0E34 : 5247                		addq.w	#1,d7
(1) 1609/FFFFFFFFFFFF0E36 : 8041                		or.w	d1,d0
(1) 1610/FFFFFFFFFFFF0E38 : E95E                		rol.w	#4,d6		; next << color
(1) 1611/FFFFFFFFFFFF0E3A : E95D                		rol.w	#4,d5
(1) 1594/FFFFFFFFFFFF0E3C : 3200                		move.w	d0,d1
(1) 1595/FFFFFFFFFFFF0E3E : 3604                		move.w	d4,d3
(1) 1596/FFFFFFFFFFFF0E40 : BB43                		eor.w	d5,d3
(1) 1597/FFFFFFFFFFFF0E42 : C043                		and.w	d3,d0
(1) 1598/FFFFFFFFFFFF0E44 : 3602                		move.w	d2,d3
(1) 1599/FFFFFFFFFFFF0E46 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1600/FFFFFFFFFFFF0E48 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1601/FFFFFFFFFFFF0E4A :                     
(1) 1602/FFFFFFFFFFFF0E4A : D246                		add.w	d6,d1		; ADD to current
(1) 1603/FFFFFFFFFFFF0E4C : B243                		cmp.w	d3,d1
(1) 1604/FFFFFFFFFFFF0E4E : 6504                		bcs.s	.max_out
(1) 1605/FFFFFFFFFFFF0E50 : 3202                		move.w	d2,d1
(1) 1606/FFFFFFFFFFFF0E52 : C245                		and.w	d5,d1
(1) 1607/FFFFFFFFFFFF0E54 :                     .max_out:
(1) 1608/FFFFFFFFFFFF0E54 : 5247                		addq.w	#1,d7
(1) 1609/FFFFFFFFFFFF0E56 : 8041                		or.w	d1,d0
(1) 1610/FFFFFFFFFFFF0E58 : E95E                		rol.w	#4,d6		; next << color
(1) 1611/FFFFFFFFFFFF0E5A : E95D                		rol.w	#4,d5
(1) 1613/FFFFFFFFFFFF0E5C : E95E                		rol.w	#4,d6
(1) 1614/FFFFFFFFFFFF0E5E : E95D                		rol.w	#4,d5
(1) 1615/FFFFFFFFFFFF0E60 : 3A80                		move.w	d0,(a5)
(1) 1616/FFFFFFFFFFFF0E62 :                     .same_in:
(1) 1617/FFFFFFFFFFFF0E62 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1618/FFFFFFFFFFFF0E66 : D8FC 0002           		adda	#2,a4
(1) 1619/FFFFFFFFFFFF0E6A : 4847                		swap	d7
(1) 1620/FFFFFFFFFFFF0E6C : 51CF FF80           		dbf	d7,.next_in
(1) 1621/FFFFFFFFFFFF0E70 : 4847                		swap	d7
(1) 1622/FFFFFFFFFFFF0E72 : 4A47                		tst.w	d7
(1) 1623/FFFFFFFFFFFF0E74 : 6700 FEF4           		beq	.pfade_del
(1) 1624/FFFFFFFFFFFF0E78 :                     .fdin_nend:
(1) 1625/FFFFFFFFFFFF0E78 : 4E75                		rts
(1) 1626/FFFFFFFFFFFF0E7A :                     
(1) 1627/FFFFFFFFFFFF0E7A :                     ; --------------------------------------------------------
(1) 1628/FFFFFFFFFFFF0E7A :                     ; Video_WaitFade
(1) 1629/FFFFFFFFFFFF0E7A :                     ;
(1) 1630/FFFFFFFFFFFF0E7A :                     ; CPU-saving version of System_Render when
(1) 1631/FFFFFFFFFFFF0E7A :                     ; waiting for a fade-in/fade-out
(1) 1632/FFFFFFFFFFFF0E7A :                     ;
(1) 1633/FFFFFFFFFFFF0E7A :                     ; THIS IS REQUIRED FOR 32X as
(1) 1634/FFFFFFFFFFFF0E7A :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1635/FFFFFFFFFFFF0E7A :                     ; --------------------------------------------------------
(1) 1636/FFFFFFFFFFFF0E7A :                     
(1) 1637/FFFFFFFFFFFF0E7A :                     Video_WaitFade:
(1) 1638/FFFFFFFFFFFF0E7A :                     .loop:
(1) 1639/FFFFFFFFFFFF0E7A : 6100 0EDE           		bsr	System_Render
(1) 1640/FFFFFFFFFFFF0E7E : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1642/FFFFFFFFFFFF0E82 : 4BF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a5
(1) 1644/FFFFFFFFFFFF0E86 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1645/FFFFFFFFFFFF0E8A : 7C00                		moveq	#0,d6
(1) 1646/FFFFFFFFFFFF0E8C :                     .next_one:
(1) 1647/FFFFFFFFFFFF0E8C : 8C16                		or.b	palfd_req(a6),d6
(1) 1648/FFFFFFFFFFFF0E8E : DCFC 0008           		adda	#palfd_len,a6
(1) 1650/FFFFFFFFFFFF0E92 : 8C15                		or.b	palfd_req(a5),d6
(1) 1651/FFFFFFFFFFFF0E94 : DAFC 0008           		adda	#palfd_len,a5
(1) 1653/FFFFFFFFFFFF0E98 : 51CF FFF2           		dbf	d7,.next_one
(1) 1654/FFFFFFFFFFFF0E9C : 4A06                		tst.b	d6
(1) 1655/FFFFFFFFFFFF0E9E : 66DA                		bne.s	.loop
(1) 1656/FFFFFFFFFFFF0EA0 : 4E75                		rts
(1) 1657/FFFFFFFFFFFF0EA2 :                     
(1) 1658/FFFFFFFFFFFF0EA2 :                     ; --------------------------------------------------------
(1) 1659/FFFFFFFFFFFF0EA2 :                     ; Video_FadeIn_Full
(1) 1660/FFFFFFFFFFFF0EA2 :                     ;
(1) 1661/FFFFFFFFFFFF0EA2 :                     ; Overwrites first entry on each's PalFadeList
(1) 1662/FFFFFFFFFFFF0EA2 :                     ; --------------------------------------------------------
(1) 1663/FFFFFFFFFFFF0EA2 :                     
(1) 1664/FFFFFFFFFFFF0EA2 :                     Video_FadeIn_Full:
(1) 1666/FFFFFFFFFFFF0EA2 : 7002                		moveq	#2,d0
(1) 1667/FFFFFFFFFFFF0EA4 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1668/FFFFFFFFFFFF0EAA : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1669/FFFFFFFFFFFF0EB0 : 6134                		bsr	Video_MdMars_MakeFade
(1) 1671/FFFFFFFFFFFF0EB2 : 7002                		moveq	#2,d0
(1) 1672/FFFFFFFFFFFF0EB4 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1673/FFFFFFFFFFFF0EBA : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1674/FFFFFFFFFFFF0EC0 : 613C                		bsr	Video_MakeFade
(1) 1675/FFFFFFFFFFFF0EC2 : 60B6                		bra	Video_WaitFade
(1) 1676/FFFFFFFFFFFF0EC4 :                     
(1) 1677/FFFFFFFFFFFF0EC4 :                     ; --------------------------------------------------------
(1) 1678/FFFFFFFFFFFF0EC4 :                     ; Video_FadeIn_Full
(1) 1679/FFFFFFFFFFFF0EC4 :                     ;
(1) 1680/FFFFFFFFFFFF0EC4 :                     ; Overwrites first entry on each's PalFadeList
(1) 1681/FFFFFFFFFFFF0EC4 :                     ; --------------------------------------------------------
(1) 1682/FFFFFFFFFFFF0EC4 :                     
(1) 1683/FFFFFFFFFFFF0EC4 :                     Video_FadeOut_Full:
(1) 1685/FFFFFFFFFFFF0EC4 : 7001                		moveq	#1,d0
(1) 1686/FFFFFFFFFFFF0EC6 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1687/FFFFFFFFFFFF0ECC : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1688/FFFFFFFFFFFF0ED2 : 6112                		bsr	Video_MdMars_MakeFade
(1) 1690/FFFFFFFFFFFF0ED4 : 7001                		moveq	#1,d0
(1) 1691/FFFFFFFFFFFF0ED6 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1692/FFFFFFFFFFFF0EDC : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1693/FFFFFFFFFFFF0EE2 : 611A                		bsr	Video_MakeFade
(1) 1694/FFFFFFFFFFFF0EE4 : 6094                		bra	Video_WaitFade
(1) 1695/FFFFFFFFFFFF0EE6 :                     
(1) 1696/FFFFFFFFFFFF0EE6 :                     ; ============================================================
(1) 1697/FFFFFFFFFFFF0EE6 :                     ; --------------------------------------------------------
(1) 1698/FFFFFFFFFFFF0EE6 :                     ; Subroutines
(1) 1699/FFFFFFFFFFFF0EE6 :                     ; --------------------------------------------------------
(1) 1700/FFFFFFFFFFFF0EE6 :                     
(1) 1701/FFFFFFFFFFFF0EE6 :                     ; --------------------------------------------------------
(1) 1702/FFFFFFFFFFFF0EE6 :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1703/FFFFFFFFFFFF0EE6 :                     ;
(1) 1704/FFFFFFFFFFFF0EE6 :                     ; Make palette Fading (or other) request, for
(1) 1705/FFFFFFFFFFFF0EE6 :                     ; both VDP and SVDP
(1) 1706/FFFFFFFFFFFF0EE6 :                     ;
(1) 1707/FFFFFFFFFFFF0EE6 :                     ; Input:
(1) 1708/FFFFFFFFFFFF0EE6 :                     ; d0.w | Task number:
(1) 1709/FFFFFFFFFFFF0EE6 :                     ;        0 - Fade-out
(1) 1710/FFFFFFFFFFFF0EE6 :                     ;        1 - Fade-in
(1) 1711/FFFFFFFFFFFF0EE6 :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1712/FFFFFFFFFFFF0EE6 :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1713/FFFFFFFFFFFF0EE6 :                     ; --------------------------------------------------------
(1) 1714/FFFFFFFFFFFF0EE6 :                     
(1) 1715/FFFFFFFFFFFF0EE6 :                     Video_MdMars_MakeFade:
(1) 1717/FFFFFFFFFFFF0EE6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1718/FFFFFFFFFFFF0EEA : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 1719/FFFFFFFFFFFF0EEE : 3E38 CC1E           		move.w	(RAM_MdMars_IndxPalFd).w,d7
(1) 1720/FFFFFFFFFFFF0EF2 : 5278 CC1E           		addq.w	#1,(RAM_MdMars_IndxPalFd).w
(1) 1721/FFFFFFFFFFFF0EF6 : 611E                		bsr	vidMkFade_Go
(1) 1722/FFFFFFFFFFFF0EF8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1724/FFFFFFFFFFFF0EFC : 4E75                		rts
(1) 1725/FFFFFFFFFFFF0EFE :                     Video_MakeFade:
(1) 1726/FFFFFFFFFFFF0EFE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1727/FFFFFFFFFFFF0F02 : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1728/FFFFFFFFFFFF0F06 : 3E38 E85C           		move.w	(RAM_IndxPalFade).w,d7
(1) 1729/FFFFFFFFFFFF0F0A : 5278 E85C           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1730/FFFFFFFFFFFF0F0E : 6106                		bsr	vidMkFade_Go
(1) 1731/FFFFFFFFFFFF0F10 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1732/FFFFFFFFFFFF0F14 : 4E75                		rts
(1) 1733/FFFFFFFFFFFF0F16 :                     vidMkFade_Go:
(1) 1734/FFFFFFFFFFFF0F16 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1735/FFFFFFFFFFFF0F1C : E74F                		lsl.w	#3,d7			; index * 8
(1) 1736/FFFFFFFFFFFF0F1E : DCC7                		adda	d7,a6
(1) 1737/FFFFFFFFFFFF0F20 : 2E01                		move.l	d1,d7
(1) 1738/FFFFFFFFFFFF0F22 : 2C02                		move.l	d2,d6
(1) 1739/FFFFFFFFFFFF0F24 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1740/FFFFFFFFFFFF0F26 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1741/FFFFFFFFFFFF0F2A : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1742/FFFFFFFFFFFF0F2E : 4846                		swap	d6
(1) 1743/FFFFFFFFFFFF0F30 : 4847                		swap	d7
(1) 1744/FFFFFFFFFFFF0F32 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1745/FFFFFFFFFFFF0F36 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1746/FFFFFFFFFFFF0F3A : 4E75                		rts
(1) 1747/FFFFFFFFFFFF0F3C :                     
(1) 1748/FFFFFFFFFFFF0F3C :                     ; --------------------------------------------------------
(1) 1749/FFFFFFFFFFFF0F3C :                     ; Video_LoadPal, Video_FadePal
(1) 1750/FFFFFFFFFFFF0F3C :                     ;
(1) 1751/FFFFFFFFFFFF0F3C :                     ; Load VDP palette data, either current or for fading.
(1) 1752/FFFFFFFFFFFF0F3C :                     ;
(1) 1753/FFFFFFFFFFFF0F3C :                     ; Input:
(1) 1754/FFFFFFFFFFFF0F3C :                     ; a0   | Palette data
(1) 1755/FFFFFFFFFFFF0F3C :                     ; d0.w | Starting color index
(1) 1756/FFFFFFFFFFFF0F3C :                     ; d1.w | Number of colors
(1) 1757/FFFFFFFFFFFF0F3C :                     ; --------------------------------------------------------
(1) 1758/FFFFFFFFFFFF0F3C :                     
(1) 1759/FFFFFFFFFFFF0F3C :                     Video_FadePal:
(1) 1760/FFFFFFFFFFFF0F3C : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1761/FFFFFFFFFFFF0F40 : 4DF8 E650           		lea	(RAM_PaletteFade).w,a6
(1) 1762/FFFFFFFFFFFF0F44 : 6008                		bra.s	vidMd_Pal
(1) 1763/FFFFFFFFFFFF0F46 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1764/FFFFFFFFFFFF0F46 :                     ; 		rts
(1) 1765/FFFFFFFFFFFF0F46 :                     Video_LoadPal:
(1) 1766/FFFFFFFFFFFF0F46 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1767/FFFFFFFFFFFF0F4A : 4DF8 E5D0           		lea	(RAM_Palette).w,a6
(1) 1768/FFFFFFFFFFFF0F4E :                     ; 		bsr.s	vidMd_Pal
(1) 1769/FFFFFFFFFFFF0F4E :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1770/FFFFFFFFFFFF0F4E :                     ; 		rts
(1) 1771/FFFFFFFFFFFF0F4E :                     
(1) 1772/FFFFFFFFFFFF0F4E :                     ; --------------------------------------------------------
(1) 1773/FFFFFFFFFFFF0F4E :                     vidMd_Pal:
(1) 1774/FFFFFFFFFFFF0F4E : 2A48                		move.l	a0,a5
(1) 1775/FFFFFFFFFFFF0F50 : 7E00                		moveq	#0,d7
(1) 1776/FFFFFFFFFFFF0F52 : 3E00                		move.w	d0,d7
(1) 1777/FFFFFFFFFFFF0F54 : DE47                		add.w	d7,d7
(1) 1778/FFFFFFFFFFFF0F56 : DCC7                		adda	d7,a6
(1) 1779/FFFFFFFFFFFF0F58 : 3E01                		move.w	d1,d7
(1) 1780/FFFFFFFFFFFF0F5A : 5347                		subq.w	#1,d7
(1) 1781/FFFFFFFFFFFF0F5C : 6B0E                		bmi.s	.bad
(1) 1782/FFFFFFFFFFFF0F5E : 3C02                		move.w	d2,d6
(1) 1783/FFFFFFFFFFFF0F60 : 0246 0001           		andi.w	#1,d6
(1) 1784/FFFFFFFFFFFF0F64 : E25E                		ror.w	#1,d6
(1) 1785/FFFFFFFFFFFF0F66 :                     .loop:
(1) 1786/FFFFFFFFFFFF0F66 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1787/FFFFFFFFFFFF0F68 : 51CF FFFC           		dbf	d7,.loop
(1) 1788/FFFFFFFFFFFF0F6C :                     .bad:
(1) 1789/FFFFFFFFFFFF0F6C : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1790/FFFFFFFFFFFF0F70 : 4E75                		rts
(1) 1791/FFFFFFFFFFFF0F72 :                     
(1) 1792/FFFFFFFFFFFF0F72 :                     ; --------------------------------------------------------
(1) 1793/FFFFFFFFFFFF0F72 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1794/FFFFFFFFFFFF0F72 :                     ;
(1) 1795/FFFFFFFFFFFF0F72 :                     ; Loads palettes on bulk with a list
(1) 1796/FFFFFFFFFFFF0F72 :                     ;
(1) 1797/FFFFFFFFFFFF0F72 :                     ; Input:
(1) 1798/FFFFFFFFFFFF0F72 :                     ; a0 | List of graphics to load:
(1) 1799/FFFFFFFFFFFF0F72 :                     ;        dc.w numof_entries
(1) 1800/FFFFFFFFFFFF0F72 :                     ;        dc.l palette_data
(1) 1801/FFFFFFFFFFFF0F72 :                     ;        dc.w start_at
(1) 1802/FFFFFFFFFFFF0F72 :                     ;        dc.w numof_colors
(1) 1803/FFFFFFFFFFFF0F72 :                     ;        ; ...more entries
(1) 1804/FFFFFFFFFFFF0F72 :                     ; --------------------------------------------------------
(1) 1805/FFFFFFFFFFFF0F72 :                     
(1) 1806/FFFFFFFFFFFF0F72 :                     Video_LoadPal_List:
(1) 1807/FFFFFFFFFFFF0F72 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1808/FFFFFFFFFFFF0F76 : 2A48                		move.l	a0,a5
(1) 1809/FFFFFFFFFFFF0F78 : 3E1D                		move.w	(a5)+,d7
(1) 1810/FFFFFFFFFFFF0F7A : 6710                		beq.s	.invalid
(1) 1811/FFFFFFFFFFFF0F7C : 6B0E                		bmi.s	.invalid
(1) 1812/FFFFFFFFFFFF0F7E : 5347                		subq.w	#1,d7
(1) 1813/FFFFFFFFFFFF0F80 :                     .next_one:
(1) 1814/FFFFFFFFFFFF0F80 : 205D                		move.l	(a5)+,a0
(1) 1815/FFFFFFFFFFFF0F82 : 301D                		move.w	(a5)+,d0
(1) 1816/FFFFFFFFFFFF0F84 : 321D                		move.w	(a5)+,d1
(1) 1817/FFFFFFFFFFFF0F86 : 61BE                		bsr	Video_LoadPal
(1) 1818/FFFFFFFFFFFF0F88 : 51CF FFF6           		dbf	d7,.next_one
(1) 1819/FFFFFFFFFFFF0F8C :                     .invalid:
(1) 1820/FFFFFFFFFFFF0F8C : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1821/FFFFFFFFFFFF0F90 : 4E75                		rts
(1) 1822/FFFFFFFFFFFF0F92 :                     
(1) 1823/FFFFFFFFFFFF0F92 :                     Video_FadePal_List:
(1) 1824/FFFFFFFFFFFF0F92 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1825/FFFFFFFFFFFF0F96 : 2A48                		move.l	a0,a5
(1) 1826/FFFFFFFFFFFF0F98 : 3E1D                		move.w	(a5)+,d7
(1) 1827/FFFFFFFFFFFF0F9A : 6710                		beq.s	.invalid
(1) 1828/FFFFFFFFFFFF0F9C : 6B0E                		bmi.s	.invalid
(1) 1829/FFFFFFFFFFFF0F9E : 5347                		subq.w	#1,d7
(1) 1830/FFFFFFFFFFFF0FA0 :                     .next_one:
(1) 1831/FFFFFFFFFFFF0FA0 : 205D                		move.l	(a5)+,a0
(1) 1832/FFFFFFFFFFFF0FA2 : 301D                		move.w	(a5)+,d0
(1) 1833/FFFFFFFFFFFF0FA4 : 321D                		move.w	(a5)+,d1
(1) 1834/FFFFFFFFFFFF0FA6 : 6194                		bsr	Video_FadePal
(1) 1835/FFFFFFFFFFFF0FA8 : 51CF FFF6           		dbf	d7,.next_one
(1) 1836/FFFFFFFFFFFF0FAC :                     .invalid:
(1) 1837/FFFFFFFFFFFF0FAC : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1838/FFFFFFFFFFFF0FB0 : 4E75                		rts
(1) 1839/FFFFFFFFFFFF0FB2 :                     
(1) 1840/FFFFFFFFFFFF0FB2 :                     ; ====================================================================
(1) 1841/FFFFFFFFFFFF0FB2 :                     ; ----------------------------------------------------------------
(1) 1842/FFFFFFFFFFFF0FB2 :                     ; Text PRINT system.
(1) 1843/FFFFFFFFFFFF0FB2 :                     ; ----------------------------------------------------------------
(1) 1844/FFFFFFFFFFFF0FB2 :                     
(1) 1845/FFFFFFFFFFFF0FB2 :                     ; --------------------------------------------------------
(1) 1846/FFFFFFFFFFFF0FB2 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1847/FFFFFFFFFFFF0FB2 :                     ;
(1) 1848/FFFFFFFFFFFF0FB2 :                     ; Initializes the default Graphics and Palette
(1) 1849/FFFFFFFFFFFF0FB2 :                     ; for the font.
(1) 1850/FFFFFFFFFFFF0FB2 :                     ;
(1) 1851/FFFFFFFFFFFF0FB2 :                     ; Input:
(1) 1852/FFFFFFFFFFFF0FB2 :                     ; d0.l | Graphics data
(1) 1853/FFFFFFFFFFFF0FB2 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1854/FFFFFFFFFFFF0FB2 :                     ; d1.w | VRAM output location to load and use
(1) 1855/FFFFFFFFFFFF0FB2 :                     ;        the ASCII text including attribute
(1) 1856/FFFFFFFFFFFF0FB2 :                     ;        settings (Palette and Priority)
(1) 1857/FFFFFFFFFFFF0FB2 :                     ;        Defualt values are:
(1) 1858/FFFFFFFFFFFF0FB2 :                     ;        DEF_PrintVram for 8x8 and
(1) 1859/FFFFFFFFFFFF0FB2 :                     ;        DEF_PrintVramW for 8x16
(1) 1860/FFFFFFFFFFFF0FB2 :                     ;
(1) 1861/FFFFFFFFFFFF0FB2 :                     ; Breaks:
(1) 1862/FFFFFFFFFFFF0FB2 :                     ; d0-d3
(1) 1863/FFFFFFFFFFFF0FB2 :                     ;
(1) 1864/FFFFFFFFFFFF0FB2 :                     ; Notes:
(1) 1865/FFFFFFFFFFFF0FB2 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1866/FFFFFFFFFFFF0FB2 :                     ; - Write your palette manually after this
(1) 1867/FFFFFFFFFFFF0FB2 :                     ; --------------------------------------------------------
(1) 1868/FFFFFFFFFFFF0FB2 :                     
(1) 1869/FFFFFFFFFFFF0FB2 :                     Video_PrintInitW:
(1) 1870/FFFFFFFFFFFF0FB2 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1871/FFFFFFFFFFFF0FB6 : 6004                		bra.s	vidPrint_Init
(1) 1872/FFFFFFFFFFFF0FB8 :                     Video_PrintInit:
(1) 1873/FFFFFFFFFFFF0FB8 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1874/FFFFFFFFFFFF0FBC :                     vidPrint_Init:
(1) 1875/FFFFFFFFFFFF0FBC : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1876/FFFFFFFFFFFF0FBE : 6000 F8B4           		bra	Video_LoadArt
(1) 1877/FFFFFFFFFFFF0FC2 :                     
(1) 1878/FFFFFFFFFFFF0FC2 :                     ; --------------------------------------------------------
(1) 1879/FFFFFFFFFFFF0FC2 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1880/FFFFFFFFFFFF0FC2 :                     ;
(1) 1881/FFFFFFFFFFFF0FC2 :                     ; Loads default palette for the font
(1) 1882/FFFFFFFFFFFF0FC2 :                     ; --------------------------------------------------------
(1) 1883/FFFFFFFFFFFF0FC2 :                     
(1) 1884/FFFFFFFFFFFF0FC2 :                     Video_PrintDefPal_Fade:
(1) 1885/FFFFFFFFFFFF0FC2 : 2F0E                		move.l	a6,-(sp)
(1) 1886/FFFFFFFFFFFF0FC4 : 4DF8 E6B0           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1887/FFFFFFFFFFFF0FC8 : 6006                		bra.s	vid_FontDefPal
(1) 1888/FFFFFFFFFFFF0FCA :                     Video_PrintDefPal:
(1) 1889/FFFFFFFFFFFF0FCA : 2F0E                		move.l	a6,-(sp)
(1) 1890/FFFFFFFFFFFF0FCC : 4DF8 E630           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1891/FFFFFFFFFFFF0FD0 :                     vid_FontDefPal:
(1) 1892/FFFFFFFFFFFF0FD0 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1893/FFFFFFFFFFFF0FD4 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1894/FFFFFFFFFFFF0FD8 : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1895/FFFFFFFFFFFF0FDC : 2C5F                		move.l	(sp)+,a6
(1) 1896/FFFFFFFFFFFF0FDE : 4E75                		rts
(1) 1897/FFFFFFFFFFFF0FE0 :                     
(1) 1898/FFFFFFFFFFFF0FE0 :                     ; --------------------------------------------------------
(1) 1899/FFFFFFFFFFFF0FE0 :                     ; Video_Print, Video_PrintW
(1) 1900/FFFFFFFFFFFF0FE0 :                     ;
(1) 1901/FFFFFFFFFFFF0FE0 :                     ; Prints a text string, VDP side.
(1) 1902/FFFFFFFFFFFF0FE0 :                     ;
(1) 1903/FFFFFFFFFFFF0FE0 :                     ; Input:
(1) 1904/FFFFFFFFFFFF0FE0 :                     ; a0   | String data
(1) 1905/FFFFFFFFFFFF0FE0 :                     ; d0.w | X position
(1) 1906/FFFFFFFFFFFF0FE0 :                     ; d1.w | Y position
(1) 1907/FFFFFFFFFFFF0FE0 :                     ; d2.w | Font VRAM location
(1) 1908/FFFFFFFFFFFF0FE0 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1909/FFFFFFFFFFFF0FE0 :                     ;        splitw(width,vram_out)
(1) 1910/FFFFFFFFFFFF0FE0 :                     ;
(1) 1911/FFFFFFFFFFFF0FE0 :                     ; * Font VRAM location
(1) 1912/FFFFFFFFFFFF0FE0 :                     ; Default 8x8:  DEF_PrintVram
(1) 1913/FFFFFFFFFFFF0FE0 :                     ; Default 8x16: DEF_PrintVramW
(1) 1914/FFFFFFFFFFFF0FE0 :                     ;
(1) 1915/FFFFFFFFFFFF0FE0 :                     ; * Screen VRAM
(1) 1916/FFFFFFFFFFFF0FE0 :                     ; Foreground: DEF_VRAM_FG
(1) 1917/FFFFFFFFFFFF0FE0 :                     ; Background: DEF_VRAM_BG
(1) 1918/FFFFFFFFFFFF0FE0 :                     ; Window:     DEF_VRAM_WD
(1) 1919/FFFFFFFFFFFF0FE0 :                     ;
(1) 1920/FFFFFFFFFFFF0FE0 :                     ; * Screen Width
(1) 1921/FFFFFFFFFFFF0FE0 :                     ; $040 (DEF_HSIZE_32)
(1) 1922/FFFFFFFFFFFF0FE0 :                     ; $080 (DEF_HSIZE_64)
(1) 1923/FFFFFFFFFFFF0FE0 :                     ; $100 (DEF_HSIZE_128)
(1) 1924/FFFFFFFFFFFF0FE0 :                     ;
(1) 1925/FFFFFFFFFFFF0FE0 :                     ; Notes:
(1) 1926/FFFFFFFFFFFF0FE0 :                     ; - Initialize your graphics and VRAM location
(1) 1927/FFFFFFFFFFFF0FE0 :                     ;   with Video_PrintInit
(1) 1928/FFFFFFFFFFFF0FE0 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1929/FFFFFFFFFFFF0FE0 :                     ;   mode.
(1) 1930/FFFFFFFFFFFF0FE0 :                     ; --------------------------------------------------------
(1) 1931/FFFFFFFFFFFF0FE0 :                     
(1) 1932/FFFFFFFFFFFF0FE0 :                     ; dc.l pstr(type,ram_location)
(1) 1933/FFFFFFFFFFFF0FE0 :                     ;
(1) 1934/FFFFFFFFFFFF0FE0 :                     ; type:
(1) 1935/FFFFFFFFFFFF0FE0 :                     ; 0 - Byte
(1) 1936/FFFFFFFFFFFF0FE0 :                     ; 1 - Word
(1) 1937/FFFFFFFFFFFF0FE0 :                     ; 2 - 24-bit
(1) 1938/FFFFFFFFFFFF0FE0 :                     ; 3 - Long
(1) 1939/FFFFFFFFFFFF0FE0 :                     
(1) 1940/FFFFFFFFFFFF0FE0 :                     Video_Print:
(1) 1941/FFFFFFFFFFFF0FE0 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1942/FFFFFFFFFFFF0FE4 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1943/FFFFFFFFFFFF0FEA : 3E03                		move.w	d3,d7
(1) 1944/FFFFFFFFFFFF0FEC : 3A00                		move.w	d0,d5
(1) 1945/FFFFFFFFFFFF0FEE : DA45                		add.w	d5,d5
(1) 1946/FFFFFFFFFFFF0FF0 : 3801                		move.w	d1,d4
(1) 1947/FFFFFFFFFFFF0FF2 : 4843                		swap	d3
(1) 1948/FFFFFFFFFFFF0FF4 : C8C3                		mulu.w	d3,d4
(1) 1949/FFFFFFFFFFFF0FF6 : DA44                		add.w	d4,d5
(1) 1950/FFFFFFFFFFFF0FF8 : DE45                		add.w	d5,d7
(1) 1951/FFFFFFFFFFFF0FFA : 3C03                		move.w	d3,d6
(1) 1952/FFFFFFFFFFFF0FFC : 4843                		swap	d3
(1) 1953/FFFFFFFFFFFF0FFE : 7A00                		moveq	#0,d5
(1) 1954/FFFFFFFFFFFF1000 : 3A07                		move.w	d7,d5
(1) 1955/FFFFFFFFFFFF1002 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1956/FFFFFFFFFFFF1006 : 8E7C 4000           		or.w	#$4000,d7
(1) 1957/FFFFFFFFFFFF100A : E55D                		rol.w	#2,d5
(1) 1958/FFFFFFFFFFFF100C : 0245 0003           		andi.w	#%11,d5
(1) 1959/FFFFFFFFFFFF1010 : 4845                		swap	d5
(1) 1960/FFFFFFFFFFFF1012 : 2A48                		move.l	a0,a5
(1) 1961/FFFFFFFFFFFF1014 :                     .loop:
(1) 1962/FFFFFFFFFFFF1014 : 3806                		move.w	d6,d4
(1) 1963/FFFFFFFFFFFF1016 : 5344                		subq.w	#1,d4
(1) 1964/FFFFFFFFFFFF1018 : CA44                		and.w	d4,d5
(1) 1965/FFFFFFFFFFFF101A :                     
(1) 1966/FFFFFFFFFFFF101A : 3807                		move.w	d7,d4
(1) 1967/FFFFFFFFFFFF101C : D845                		add.w	d5,d4
(1) 1968/FFFFFFFFFFFF101E : 4845                		swap	d5
(1) 1969/FFFFFFFFFFFF1020 : 3D44 0004           		move.w	d4,4(a6)
(1) 1970/FFFFFFFFFFFF1024 : 3D45 0004           		move.w	d5,4(a6)
(1) 1971/FFFFFFFFFFFF1028 : 4845                		swap	d5
(1) 1972/FFFFFFFFFFFF102A :                     .q_loop:
(1) 1973/FFFFFFFFFFFF102A : 181D                		move.b	(a5)+,d4
(1) 1974/FFFFFFFFFFFF102C : 671E                		beq.s	.exit
(1) 1975/FFFFFFFFFFFF102E : 6B22                		bmi.s	.special
(1) 1976/FFFFFFFFFFFF1030 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1977/FFFFFFFFFFFF1034 : 6710                		beq.s	.next
(1) 1978/FFFFFFFFFFFF1036 :                     ; ------------------------------------------------
(1) 1979/FFFFFFFFFFFF1036 :                     ; Normal text
(1) 1980/FFFFFFFFFFFF1036 : 0244 00FF           		andi.w	#$FF,d4
(1) 1981/FFFFFFFFFFFF103A :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1982/FFFFFFFFFFFF103A : D842                		add.w	d2,d4
(1) 1983/FFFFFFFFFFFF103C : 0444 0020           		subi.w	#$20,d4
(1) 1984/FFFFFFFFFFFF1040 : 3C84                		move.w	d4,(a6)
(1) 1985/FFFFFFFFFFFF1042 : 5445                		addq.w	#2,d5
(1) 1986/FFFFFFFFFFFF1044 : 60E4                		bra.s	.q_loop
(1) 1987/FFFFFFFFFFFF1046 :                     .next:
(1) 1988/FFFFFFFFFFFF1046 : 4245                		clr.w	d5
(1) 1989/FFFFFFFFFFFF1048 : DE46                		add.w	d6,d7			; Next line
(1) 1990/FFFFFFFFFFFF104A : 60C8                		bra.s	.loop
(1) 1991/FFFFFFFFFFFF104C :                     .exit:
(1) 1992/FFFFFFFFFFFF104C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1993/FFFFFFFFFFFF1050 : 4E75                		rts
(1) 1994/FFFFFFFFFFFF1052 :                     ; ------------------------------------------------
(1) 1995/FFFFFFFFFFFF1052 :                     ; Show value
(1) 1996/FFFFFFFFFFFF1052 :                     ; d4 - $80|flags
(1) 1997/FFFFFFFFFFFF1052 :                     .special:
(1) 1998/FFFFFFFFFFFF1052 : 4846                		swap	d6
(1) 1999/FFFFFFFFFFFF1054 : 1C04                		move.b	d4,d6
(1) 2000/FFFFFFFFFFFF1056 : E19C                		rol.l	#8,d4
(1) 2001/FFFFFFFFFFFF1058 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2002/FFFFFFFFFFFF105A : E19C                		rol.l	#8,d4
(1) 2003/FFFFFFFFFFFF105C : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2004/FFFFFFFFFFFF105E : E19C                		rol.l	#8,d4
(1) 2005/FFFFFFFFFFFF1060 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2006/FFFFFFFFFFFF1062 : 2844                		move.l	d4,a4
(1) 2007/FFFFFFFFFFFF1064 : 0246 0003           		andi.w	#%11,d6
(1) 2008/FFFFFFFFFFFF1068 : 4847                		swap	d7
(1) 2009/FFFFFFFFFFFF106A : 3E3C 0000           		move.w	#1-1,d7
(1) 2010/FFFFFFFFFFFF106E : BC3C 0003           		cmp.b	#$03,d6
(1) 2011/FFFFFFFFFFFF1072 : 6724                		beq.s	.show_long
(1) 2012/FFFFFFFFFFFF1074 : BC3C 0002           		cmp.b	#$02,d6
(1) 2013/FFFFFFFFFFFF1078 : 6716                		beq.s	.show_24
(1) 2014/FFFFFFFFFFFF107A : BC3C 0001           		cmp.b	#$01,d6
(1) 2015/FFFFFFFFFFFF107E : 6708                		beq.s	.show_word
(1) 2016/FFFFFFFFFFFF1080 :                     .show_byte:
(1) 2017/FFFFFFFFFFFF1080 : 1814                		move.b	(a4),d4
(1) 2018/FFFFFFFFFFFF1082 : 4844                		swap	d4
(1) 2019/FFFFFFFFFFFF1084 : E19C                		rol.l	#8,d4
(1) 2020/FFFFFFFFFFFF1086 : 6014                		bra.s	.mk_value
(1) 2021/FFFFFFFFFFFF1088 :                     .show_word:
(1) 2022/FFFFFFFFFFFF1088 : 3814                		move.w	(a4),d4
(1) 2023/FFFFFFFFFFFF108A : 4844                		swap	d4
(1) 2024/FFFFFFFFFFFF108C : 5247                		addq.w	#1,d7
(1) 2025/FFFFFFFFFFFF108E : 600C                		bra.s	.mk_value
(1) 2026/FFFFFFFFFFFF1090 :                     .show_24:
(1) 2027/FFFFFFFFFFFF1090 : 2814                		move.l	(a4),d4
(1) 2028/FFFFFFFFFFFF1092 : E19C                		rol.l	#8,d4
(1) 2029/FFFFFFFFFFFF1094 : 5447                		addq.w	#2,d7
(1) 2030/FFFFFFFFFFFF1096 : 6004                		bra.s	.mk_value
(1) 2031/FFFFFFFFFFFF1098 :                     .show_long:
(1) 2032/FFFFFFFFFFFF1098 : 2814                		move.l	(a4),d4
(1) 2033/FFFFFFFFFFFF109A : 5647                		addq.w	#3,d7
(1) 2034/FFFFFFFFFFFF109C :                     .mk_value:
(1) 2035/FFFFFFFFFFFF109C : E99C                		rol.l	#4,d4
(1) 2036/FFFFFFFFFFFF109E : 6110                		bsr.s	.show_nibbl
(1) 2037/FFFFFFFFFFFF10A0 : E99C                		rol.l	#4,d4
(1) 2038/FFFFFFFFFFFF10A2 : 610C                		bsr.s	.show_nibbl
(1) 2039/FFFFFFFFFFFF10A4 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2040/FFFFFFFFFFFF10A8 : 4846                		swap	d6
(1) 2041/FFFFFFFFFFFF10AA : 4847                		swap	d7
(1) 2042/FFFFFFFFFFFF10AC : 6000 FF66           		bra	.loop
(1) 2043/FFFFFFFFFFFF10B0 :                     .show_nibbl:
(1) 2044/FFFFFFFFFFFF10B0 : 2846                		move.l	d6,a4
(1) 2045/FFFFFFFFFFFF10B2 : 1C04                		move.b	d4,d6
(1) 2046/FFFFFFFFFFFF10B4 : 0246 000F           		andi.w	#$0F,d6
(1) 2047/FFFFFFFFFFFF10B8 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2048/FFFFFFFFFFFF10BC : 6502                		bcs.s	.hex_incr
(1) 2049/FFFFFFFFFFFF10BE : 5E46                		addq.w	#7,d6
(1) 2050/FFFFFFFFFFFF10C0 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2051/FFFFFFFFFFFF10C4 :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2052/FFFFFFFFFFFF10C4 : DC42                		add.w	d2,d6
(1) 2053/FFFFFFFFFFFF10C6 : 0446 0020           		subi.w	#$20,d6
(1) 2054/FFFFFFFFFFFF10CA : 3C86                		move.w	d6,(a6)
(1) 2055/FFFFFFFFFFFF10CC : 5445                		addq.w	#2,d5
(1) 2056/FFFFFFFFFFFF10CE : 2C0C                		move.l	a4,d6
(1) 2057/FFFFFFFFFFFF10D0 : 4E75                		rts
(1) 2058/FFFFFFFFFFFF10D2 :                     
(1) 2059/FFFFFFFFFFFF10D2 :                     ; --------------------------------------------------------
(1) 2060/FFFFFFFFFFFF10D2 :                     ; 8x16 version
(1) 2061/FFFFFFFFFFFF10D2 :                     ; --------------------------------------------------------
(1) 2062/FFFFFFFFFFFF10D2 :                     
(1) 2063/FFFFFFFFFFFF10D2 :                     Video_PrintW:
(1) 2064/FFFFFFFFFFFF10D2 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2065/FFFFFFFFFFFF10D6 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2066/FFFFFFFFFFFF10DC :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2067/FFFFFFFFFFFF10DC : 3C02                		move.w	d2,d6
(1) 2068/FFFFFFFFFFFF10DE : 0446 0040           		subi.w	#$20*2,d6
(1) 2069/FFFFFFFFFFFF10E2 : 3A38 E872           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2070/FFFFFFFFFFFF10E6 : 0805 0002           		btst	#2,d5
(1) 2071/FFFFFFFFFFFF10EA : 670E                		beq.s	.no_dble_y
(1) 2072/FFFFFFFFFFFF10EC : 3E06                		move.w	d6,d7
(1) 2073/FFFFFFFFFFFF10EE : 0247 F800           		andi.w	#$F800,d7
(1) 2074/FFFFFFFFFFFF10F2 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2075/FFFFFFFFFFFF10F6 : E24E                		lsr.w	#1,d6
(1) 2076/FFFFFFFFFFFF10F8 : 8C47                		or.w	d7,d6
(1) 2077/FFFFFFFFFFFF10FA :                     .no_dble_y:
(1) 2078/FFFFFFFFFFFF10FA : 4846                		swap	d6
(1) 2079/FFFFFFFFFFFF10FC : 3E03                		move.w	d3,d7
(1) 2080/FFFFFFFFFFFF10FE : 3A00                		move.w	d0,d5
(1) 2081/FFFFFFFFFFFF1100 : DA45                		add.w	d5,d5
(1) 2082/FFFFFFFFFFFF1102 : 3801                		move.w	d1,d4
(1) 2083/FFFFFFFFFFFF1104 : 4843                		swap	d3
(1) 2084/FFFFFFFFFFFF1106 : C8C3                		mulu.w	d3,d4
(1) 2085/FFFFFFFFFFFF1108 : DA44                		add.w	d4,d5
(1) 2086/FFFFFFFFFFFF110A : DE45                		add.w	d5,d7
(1) 2087/FFFFFFFFFFFF110C : 3C03                		move.w	d3,d6
(1) 2088/FFFFFFFFFFFF110E : 4843                		swap	d3
(1) 2089/FFFFFFFFFFFF1110 :                     
(1) 2090/FFFFFFFFFFFF1110 : 7A00                		moveq	#0,d5
(1) 2091/FFFFFFFFFFFF1112 : 3A07                		move.w	d7,d5
(1) 2092/FFFFFFFFFFFF1114 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2093/FFFFFFFFFFFF1118 : 8E7C 4000           		or.w	#$4000,d7
(1) 2094/FFFFFFFFFFFF111C : E55D                		rol.w	#2,d5
(1) 2095/FFFFFFFFFFFF111E : 0245 0003           		andi.w	#%11,d5
(1) 2096/FFFFFFFFFFFF1122 : 4845                		swap	d5
(1) 2097/FFFFFFFFFFFF1124 : 2A48                		move.l	a0,a5
(1) 2098/FFFFFFFFFFFF1126 :                     	; d7 -      TEMP       | VDP write left
(1) 2099/FFFFFFFFFFFF1126 :                     	; d6 -      TEMP       | Y next-line size
(1) 2100/FFFFFFFFFFFF1126 :                     	; d5 - VDP write right | X current pos
(1) 2101/FFFFFFFFFFFF1126 :                     	; d4 -                 | TEMP
(1) 2102/FFFFFFFFFFFF1126 :                     .loop:
(1) 2103/FFFFFFFFFFFF1126 : 3806                		move.w	d6,d4
(1) 2104/FFFFFFFFFFFF1128 : 5344                		subq.w	#1,d4
(1) 2105/FFFFFFFFFFFF112A : CA44                		and.w	d4,d5
(1) 2106/FFFFFFFFFFFF112C : 181D                		move.b	(a5)+,d4
(1) 2107/FFFFFFFFFFFF112E : 6776                		beq.s	.exit
(1) 2108/FFFFFFFFFFFF1130 : 6B7A                		bmi.s	.special
(1) 2109/FFFFFFFFFFFF1132 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2110/FFFFFFFFFFFF1136 : 6766                		beq.s	.next
(1) 2111/FFFFFFFFFFFF1138 :                     ; ------------------------------------------------
(1) 2112/FFFFFFFFFFFF1138 :                     ; Normal text
(1) 2113/FFFFFFFFFFFF1138 : 0244 00FF           		andi.w	#$FF,d4
(1) 2114/FFFFFFFFFFFF113C : 4847                		swap	d7
(1) 2115/FFFFFFFFFFFF113E : 3E38 E872           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2116/FFFFFFFFFFFF1142 : 0807 0002           		btst	#2,d7
(1) 2117/FFFFFFFFFFFF1146 : 671E                		beq.s	.ver_normal
(1) 2118/FFFFFFFFFFFF1148 : 4846                		swap	d6
(1) 2119/FFFFFFFFFFFF114A : D846                		add.w	d6,d4
(1) 2120/FFFFFFFFFFFF114C : 4846                		swap	d6
(1) 2121/FFFFFFFFFFFF114E : 4844                		swap	d4
(1) 2122/FFFFFFFFFFFF1150 : 4847                		swap	d7
(1) 2123/FFFFFFFFFFFF1152 : 3807                		move.w	d7,d4
(1) 2124/FFFFFFFFFFFF1154 : D845                		add.w	d5,d4
(1) 2125/FFFFFFFFFFFF1156 : 4845                		swap	d5
(1) 2126/FFFFFFFFFFFF1158 : 3D44 0004           		move.w	d4,4(a6)
(1) 2127/FFFFFFFFFFFF115C : 3D45 0004           		move.w	d5,4(a6)
(1) 2128/FFFFFFFFFFFF1160 : 4844                		swap	d4
(1) 2129/FFFFFFFFFFFF1162 : 3C84                		move.w	d4,(a6)
(1) 2130/FFFFFFFFFFFF1164 : 6032                		bra.s	.ver_cont
(1) 2131/FFFFFFFFFFFF1166 :                     .ver_normal:
(1) 2132/FFFFFFFFFFFF1166 : D844                		add.w	d4,d4
(1) 2133/FFFFFFFFFFFF1168 : 4846                		swap	d6
(1) 2134/FFFFFFFFFFFF116A : D846                		add.w	d6,d4
(1) 2135/FFFFFFFFFFFF116C : 4846                		swap	d6
(1) 2136/FFFFFFFFFFFF116E : 4844                		swap	d4
(1) 2137/FFFFFFFFFFFF1170 : 4847                		swap	d7
(1) 2138/FFFFFFFFFFFF1172 : 3807                		move.w	d7,d4
(1) 2139/FFFFFFFFFFFF1174 : D845                		add.w	d5,d4
(1) 2140/FFFFFFFFFFFF1176 : 4845                		swap	d5
(1) 2141/FFFFFFFFFFFF1178 : 3D44 0004           		move.w	d4,4(a6)
(1) 2142/FFFFFFFFFFFF117C : 3D45 0004           		move.w	d5,4(a6)
(1) 2143/FFFFFFFFFFFF1180 : 4844                		swap	d4
(1) 2144/FFFFFFFFFFFF1182 : 3C84                		move.w	d4,(a6)
(1) 2145/FFFFFFFFFFFF1184 : 5244                		addq.w	#1,d4
(1) 2146/FFFFFFFFFFFF1186 : 4844                		swap	d4
(1) 2147/FFFFFFFFFFFF1188 : D846                		add.w	d6,d4
(1) 2148/FFFFFFFFFFFF118A : 3D44 0004           		move.w	d4,4(a6)
(1) 2149/FFFFFFFFFFFF118E : 3D45 0004           		move.w	d5,4(a6)
(1) 2150/FFFFFFFFFFFF1192 : 4844                		swap	d4
(1) 2151/FFFFFFFFFFFF1194 : 3C84                		move.w	d4,(a6)
(1) 2152/FFFFFFFFFFFF1196 : 4844                		swap	d4
(1) 2153/FFFFFFFFFFFF1198 :                     
(1) 2154/FFFFFFFFFFFF1198 :                     .ver_cont:
(1) 2155/FFFFFFFFFFFF1198 : 4845                		swap	d5
(1) 2156/FFFFFFFFFFFF119A : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2157/FFFFFFFFFFFF119C : 6088                		bra.s	.loop
(1) 2158/FFFFFFFFFFFF119E :                     .next:
(1) 2159/FFFFFFFFFFFF119E : 4245                		clr.w	d5		; Clear X pos
(1) 2160/FFFFFFFFFFFF11A0 : DE46                		add.w	d6,d7		; Next Y line
(1) 2161/FFFFFFFFFFFF11A2 : DE46                		add.w	d6,d7		; twice
(1) 2162/FFFFFFFFFFFF11A4 : 6080                		bra	.loop
(1) 2163/FFFFFFFFFFFF11A6 :                     .exit:
(1) 2164/FFFFFFFFFFFF11A6 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2165/FFFFFFFFFFFF11AA : 4E75                		rts
(1) 2166/FFFFFFFFFFFF11AC :                     ; ------------------------------------------------
(1) 2167/FFFFFFFFFFFF11AC :                     ; Show value
(1) 2168/FFFFFFFFFFFF11AC :                     ; d4 - $80|flags
(1) 2169/FFFFFFFFFFFF11AC :                     .special:
(1) 2170/FFFFFFFFFFFF11AC : 2646                		move.l	d6,a3
(1) 2171/FFFFFFFFFFFF11AE : 1C04                		move.b	d4,d6
(1) 2172/FFFFFFFFFFFF11B0 : E19C                		rol.l	#8,d4
(1) 2173/FFFFFFFFFFFF11B2 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2174/FFFFFFFFFFFF11B4 : E19C                		rol.l	#8,d4
(1) 2175/FFFFFFFFFFFF11B6 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2176/FFFFFFFFFFFF11B8 : E19C                		rol.l	#8,d4
(1) 2177/FFFFFFFFFFFF11BA : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2178/FFFFFFFFFFFF11BC : 2844                		move.l	d4,a4
(1) 2179/FFFFFFFFFFFF11BE : 0246 0003           		andi.w	#%11,d6
(1) 2180/FFFFFFFFFFFF11C2 : 4847                		swap	d7
(1) 2181/FFFFFFFFFFFF11C4 : 3E3C 0000           		move.w	#1-1,d7
(1) 2182/FFFFFFFFFFFF11C8 : BC3C 0003           		cmp.b	#$03,d6
(1) 2183/FFFFFFFFFFFF11CC : 6724                		beq.s	.show_long
(1) 2184/FFFFFFFFFFFF11CE : BC3C 0002           		cmp.b	#$02,d6
(1) 2185/FFFFFFFFFFFF11D2 : 6716                		beq.s	.show_24
(1) 2186/FFFFFFFFFFFF11D4 : BC3C 0001           		cmp.b	#$01,d6
(1) 2187/FFFFFFFFFFFF11D8 : 6708                		beq.s	.show_word
(1) 2188/FFFFFFFFFFFF11DA :                     .show_byte:
(1) 2189/FFFFFFFFFFFF11DA : 1814                		move.b	(a4),d4
(1) 2190/FFFFFFFFFFFF11DC : 4844                		swap	d4
(1) 2191/FFFFFFFFFFFF11DE : E19C                		rol.l	#8,d4
(1) 2192/FFFFFFFFFFFF11E0 : 6014                		bra.s	.mk_value_in
(1) 2193/FFFFFFFFFFFF11E2 :                     .show_word:
(1) 2194/FFFFFFFFFFFF11E2 : 3814                		move.w	(a4),d4
(1) 2195/FFFFFFFFFFFF11E4 : 4844                		swap	d4
(1) 2196/FFFFFFFFFFFF11E6 : 5247                		addq.w	#1,d7
(1) 2197/FFFFFFFFFFFF11E8 : 600C                		bra.s	.mk_value_in
(1) 2198/FFFFFFFFFFFF11EA :                     .show_24:
(1) 2199/FFFFFFFFFFFF11EA : 2814                		move.l	(a4),d4
(1) 2200/FFFFFFFFFFFF11EC : E19C                		rol.l	#8,d4
(1) 2201/FFFFFFFFFFFF11EE : 5447                		addq.w	#2,d7
(1) 2202/FFFFFFFFFFFF11F0 : 6004                		bra.s	.mk_value_in
(1) 2203/FFFFFFFFFFFF11F2 :                     .show_long:
(1) 2204/FFFFFFFFFFFF11F2 : 2814                		move.l	(a4),d4
(1) 2205/FFFFFFFFFFFF11F4 : 5647                		addq.w	#3,d7
(1) 2206/FFFFFFFFFFFF11F6 :                     .mk_value_in:
(1) 2207/FFFFFFFFFFFF11F6 : 2C0B                		move.l	a3,d6
(1) 2208/FFFFFFFFFFFF11F8 :                     
(1) 2209/FFFFFFFFFFFF11F8 :                     
(1) 2210/FFFFFFFFFFFF11F8 :                     	; d4 - value
(1) 2211/FFFFFFFFFFFF11F8 : 4846                		swap	d6
(1) 2212/FFFFFFFFFFFF11FA :                     .mk_value:
(1) 2213/FFFFFFFFFFFF11FA : E99C                		rol.l	#4,d4
(1) 2214/FFFFFFFFFFFF11FC : 6110                		bsr.s	.show_nibbl
(1) 2215/FFFFFFFFFFFF11FE : E99C                		rol.l	#4,d4
(1) 2216/FFFFFFFFFFFF1200 : 610C                		bsr.s	.show_nibbl
(1) 2217/FFFFFFFFFFFF1202 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2218/FFFFFFFFFFFF1206 : 4846                		swap	d6
(1) 2219/FFFFFFFFFFFF1208 : 4847                		swap	d7
(1) 2220/FFFFFFFFFFFF120A : 6000 FF1A           		bra	.loop
(1) 2221/FFFFFFFFFFFF120E :                     
(1) 2222/FFFFFFFFFFFF120E :                     	; d6 - Y next-line size | TEMP
(1) 2223/FFFFFFFFFFFF120E :                     .show_nibbl:
(1) 2224/FFFFFFFFFFFF120E : 2846                		move.l	d6,a4
(1) 2225/FFFFFFFFFFFF1210 : 2644                		move.l	d4,a3
(1) 2226/FFFFFFFFFFFF1212 : 3C38 E872           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2227/FFFFFFFFFFFF1216 : 0806 0002           		btst	#2,d6
(1) 2228/FFFFFFFFFFFF121A : 6730                		beq.s	.nibbl_norm
(1) 2229/FFFFFFFFFFFF121C :                     
(1) 2230/FFFFFFFFFFFF121C :                     	; TODO CHECAR ESTO
(1) 2231/FFFFFFFFFFFF121C : 616C                		bsr.s	.get_preval
(1) 2232/FFFFFFFFFFFF121E : 0446 0020           		subi.w	#$20,d6
(1) 2233/FFFFFFFFFFFF1222 : 4847                		swap	d7
(1) 2234/FFFFFFFFFFFF1224 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2235/FFFFFFFFFFFF1224 : 3802                		move.w	d2,d4
(1) 2236/FFFFFFFFFFFF1226 : 0244 07FF           		andi.w	#$7FF,d4
(1) 2237/FFFFFFFFFFFF122A : E24C                		lsr.w	#1,d4
(1) 2238/FFFFFFFFFFFF122C : DC44                		add.w	d4,d6
(1) 2239/FFFFFFFFFFFF122E :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2240/FFFFFFFFFFFF122E : 3802                		move.w	d2,d4
(1) 2241/FFFFFFFFFFFF1230 : 0244 F800           		andi.w	#$F800,d4
(1) 2242/FFFFFFFFFFFF1234 : 8C44                		or.w	d4,d6
(1) 2243/FFFFFFFFFFFF1236 : 3807                		move.w	d7,d4
(1) 2244/FFFFFFFFFFFF1238 : 4847                		swap	d7
(1) 2245/FFFFFFFFFFFF123A : D845                		add.w	d5,d4
(1) 2246/FFFFFFFFFFFF123C : 4845                		swap	d5
(1) 2247/FFFFFFFFFFFF123E : 3D44 0004           		move.w	d4,4(a6)
(1) 2248/FFFFFFFFFFFF1242 : 3D45 0004           		move.w	d5,4(a6)
(1) 2249/FFFFFFFFFFFF1246 : 4845                		swap	d5
(1) 2250/FFFFFFFFFFFF1248 : 3C86                		move.w	d6,(a6)
(1) 2251/FFFFFFFFFFFF124A : 6036                		bra.s	.nibbl_cont
(1) 2252/FFFFFFFFFFFF124C :                     
(1) 2253/FFFFFFFFFFFF124C :                     .nibbl_norm:
(1) 2254/FFFFFFFFFFFF124C : 613C                		bsr.s	.get_preval
(1) 2255/FFFFFFFFFFFF124E : 0446 0020           		subi.w	#$20,d6
(1) 2256/FFFFFFFFFFFF1252 : DC46                		add.w	d6,d6
(1) 2257/FFFFFFFFFFFF1254 : DC42                		add.w	d2,d6
(1) 2258/FFFFFFFFFFFF1256 : 4847                		swap	d7
(1) 2259/FFFFFFFFFFFF1258 : 3807                		move.w	d7,d4
(1) 2260/FFFFFFFFFFFF125A : 4847                		swap	d7
(1) 2261/FFFFFFFFFFFF125C : D845                		add.w	d5,d4
(1) 2262/FFFFFFFFFFFF125E : 4845                		swap	d5
(1) 2263/FFFFFFFFFFFF1260 : 3D44 0004           		move.w	d4,4(a6)
(1) 2264/FFFFFFFFFFFF1264 : 3D45 0004           		move.w	d5,4(a6)
(1) 2265/FFFFFFFFFFFF1268 : 4845                		swap	d5
(1) 2266/FFFFFFFFFFFF126A : 3C86                		move.w	d6,(a6)
(1) 2267/FFFFFFFFFFFF126C : 5246                		addq.w	#1,d6
(1) 2268/FFFFFFFFFFFF126E : 4846                		swap	d6
(1) 2269/FFFFFFFFFFFF1270 : D846                		add.w	d6,d4
(1) 2270/FFFFFFFFFFFF1272 : 4846                		swap	d6
(1) 2271/FFFFFFFFFFFF1274 : 4845                		swap	d5
(1) 2272/FFFFFFFFFFFF1276 : 3D44 0004           		move.w	d4,4(a6)
(1) 2273/FFFFFFFFFFFF127A : 3D45 0004           		move.w	d5,4(a6)
(1) 2274/FFFFFFFFFFFF127E : 4845                		swap	d5
(1) 2275/FFFFFFFFFFFF1280 : 3C86                		move.w	d6,(a6)
(1) 2276/FFFFFFFFFFFF1282 :                     .nibbl_cont:
(1) 2277/FFFFFFFFFFFF1282 : 5445                		addq.w	#2,d5
(1) 2278/FFFFFFFFFFFF1284 : 2C0C                		move.l	a4,d6
(1) 2279/FFFFFFFFFFFF1286 : 280B                		move.l	a3,d4
(1) 2280/FFFFFFFFFFFF1288 : 4E75                		rts
(1) 2281/FFFFFFFFFFFF128A :                     
(1) 2282/FFFFFFFFFFFF128A :                     .get_preval:
(1) 2283/FFFFFFFFFFFF128A : 1C04                		move.b	d4,d6
(1) 2284/FFFFFFFFFFFF128C : 0246 000F           		andi.w	#$0F,d6
(1) 2285/FFFFFFFFFFFF1290 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2286/FFFFFFFFFFFF1294 : 6502                		bcs.s	.hex_incr
(1) 2287/FFFFFFFFFFFF1296 : 5E46                		addq.w	#7,d6
(1) 2288/FFFFFFFFFFFF1298 :                     .hex_incr:
(1) 2289/FFFFFFFFFFFF1298 : DC7C 0030           		add.w	#"0",d6
(1) 2290/FFFFFFFFFFFF129C : 4E75                		rts
(1) 2291/FFFFFFFFFFFF129E :                     
(1) 2292/FFFFFFFFFFFF129E :                     ; ------------------------------------------------
(1) 2293/FFFFFFFFFFFF129E :                     ; Input:
(1) 2294/FFFFFFFFFFFF129E :                     ; d2.w | Layer:
(1) 2295/FFFFFFFFFFFF129E :                     ;        0 - Foreground
(1) 2296/FFFFFFFFFFFF129E :                     ;        1 - Background
(1) 2297/FFFFFFFFFFFF129E :                     ;        2 - WINDOW
(1) 2298/FFFFFFFFFFFF129E :                     ;
(1) 2299/FFFFFFFFFFFF129E :                     ; Returns:
(1) 2300/FFFFFFFFFFFF129E :                     ; d7 - VRAM location
(1) 2301/FFFFFFFFFFFF129E :                     ; d6 - Y jump size
(1) 2302/FFFFFFFFFFFF129E :                     ; ------------------------------------------------
(1) 2303/FFFFFFFFFFFF129E :                     
(1) 2304/FFFFFFFFFFFF129E :                     ; vidSub_PickLayer:
(1) 2305/FFFFFFFFFFFF129E :                     ; 		move.w	d2,d7
(1) 2306/FFFFFFFFFFFF129E :                     ; 		lsl.w	#2,d7
(1) 2307/FFFFFFFFFFFF129E :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2308/FFFFFFFFFFFF129E :                     ; 		lea	.filter_data(pc),a4
(1) 2309/FFFFFFFFFFFF129E :                     ; 		adda	d7,a4
(1) 2310/FFFFFFFFFFFF129E :                     ; 		moveq	#0,d7
(1) 2311/FFFFFFFFFFFF129E :                     ; 		moveq	#0,d5
(1) 2312/FFFFFFFFFFFF129E :                     ; 		move.b	(a4),d7
(1) 2313/FFFFFFFFFFFF129E :                     ; 		adda	d7,a5
(1) 2314/FFFFFFFFFFFF129E :                     ; 		move.b	1(a4),d6
(1) 2315/FFFFFFFFFFFF129E :                     ; 		move.b	2(a4),d5
(1) 2316/FFFFFFFFFFFF129E :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2317/FFFFFFFFFFFF129E :                     ; 		and.b	d6,d7		; filter
(1) 2318/FFFFFFFFFFFF129E :                     ; 		lsl.w	d5,d7		; shift left
(1) 2319/FFFFFFFFFFFF129E :                     ; 		move.w	#$40,d6
(1) 2320/FFFFFFFFFFFF129E :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2321/FFFFFFFFFFFF129E :                     ; 		andi.w	#%00000011,d6
(1) 2322/FFFFFFFFFFFF129E :                     ; 		add.w	d6,d6
(1) 2323/FFFFFFFFFFFF129E :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2324/FFFFFFFFFFFF129E :                     ; 		rts
(1) 2325/FFFFFFFFFFFF129E :                     ; .filter_data:
(1) 2326/FFFFFFFFFFFF129E :                     ; 		dc.b $00		; Reg slot
(1) 2327/FFFFFFFFFFFF129E :                     ; 		dc.b %00111000		; Filter bits
(1) 2328/FFFFFFFFFFFF129E :                     ; 		dc.b 10,0		; shift left, 0
(1) 2329/FFFFFFFFFFFF129E :                     ; 		dc.b $02
(1) 2330/FFFFFFFFFFFF129E :                     ; 		dc.b %00000111
(1) 2331/FFFFFFFFFFFF129E :                     ; 		dc.b 13,0
(1) 2332/FFFFFFFFFFFF129E :                     ; 		dc.b $01
(1) 2333/FFFFFFFFFFFF129E :                     ; 		dc.b %00111110
(1) 2334/FFFFFFFFFFFF129E :                     ; 		dc.b 10,0
(1) 2335/FFFFFFFFFFFF129E :                     ; .jump_sizes:	dc.w $040
(1) 2336/FFFFFFFFFFFF129E :                     ; 		dc.w $080
(1) 2337/FFFFFFFFFFFF129E :                     ; 		dc.w $080
(1) 2338/FFFFFFFFFFFF129E :                     ; 		dc.w $100
(1) 2339/FFFFFFFFFFFF129E :                     
(1) 2340/FFFFFFFFFFFF129E :                     ; ====================================================================
(1) 2341/FFFFFFFFFFFF129E :                     ; ----------------------------------------------------------------
(1) 2342/FFFFFFFFFFFF129E :                     ; VDP Sprites
(1) 2343/FFFFFFFFFFFF129E :                     ; ----------------------------------------------------------------
(1) 2344/FFFFFFFFFFFF129E :                     
(1) 2345/FFFFFFFFFFFF129E :                     ; --------------------------------------------------------
(1) 2346/FFFFFFFFFFFF129E :                     ; Video_SetSpr, Video_MakeSpr
(1) 2347/FFFFFFFFFFFF129E :                     ;
(1) 2348/FFFFFFFFFFFF129E :                     ; Sets or Makes a VDP Sprite piece
(1) 2349/FFFFFFFFFFFF129E :                     ;
(1) 2350/FFFFFFFFFFFF129E :                     ; Input:
(1) 2351/FFFFFFFFFFFF129E :                     ; a0   | Slot (0-80)
(1) 2352/FFFFFFFFFFFF129E :                     ; d0.w | X pos
(1) 2353/FFFFFFFFFFFF129E :                     ; d1.w | Y pos
(1) 2354/FFFFFFFFFFFF129E :                     ; d2.w | VRAM
(1) 2355/FFFFFFFFFFFF129E :                     ; d3.w | Size
(1) 2356/FFFFFFFFFFFF129E :                     ;
(1) 2357/FFFFFFFFFFFF129E :                     ; Returns:
(1) 2358/FFFFFFFFFFFF129E :                     ; bcc | OK
(1) 2359/FFFFFFFFFFFF129E :                     ; bcs | Ran out of slots (not sprites)
(1) 2360/FFFFFFFFFFFF129E :                     ; --------------------------------------------------------
(1) 2361/FFFFFFFFFFFF129E :                     
(1) 2362/FFFFFFFFFFFF129E :                     Video_SetSpr:
(1) 2363/FFFFFFFFFFFF129E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2364/FFFFFFFFFFFF12A2 : 2E08                		move.l	a0,d7
(1) 2365/FFFFFFFFFFFF12A4 : 7C00                		moveq	#0,d6
(1) 2366/FFFFFFFFFFFF12A6 : 6020                		bra	vidMdSpr_MkSpr
(1) 2367/FFFFFFFFFFFF12A8 :                     Video_MakeSpr:
(1) 2368/FFFFFFFFFFFF12A8 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2369/FFFFFFFFFFFF12AC : 7E00                		moveq	#0,d7
(1) 2370/FFFFFFFFFFFF12AE : 4DF8 DA40           		lea	(RAM_SprPzList).w,a6
(1) 2371/FFFFFFFFFFFF12B2 : 7C4F                		moveq	#80-1,d6
(1) 2372/FFFFFFFFFFFF12B4 :                     .chk_free:
(1) 2373/FFFFFFFFFFFF12B4 : 0816 0007           		btst	#7,(a6)
(1) 2374/FFFFFFFFFFFF12B8 : 670C                		beq.s	.mk_spr
(1) 2375/FFFFFFFFFFFF12BA : 5247                		addq.w	#1,d7
(1) 2376/FFFFFFFFFFFF12BC : DCFC 0008           		adda	#8,a6
(1) 2377/FFFFFFFFFFFF12C0 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2378/FFFFFFFFFFFF12C4 : 605C                		bra.s	vidMd_CError
(1) 2379/FFFFFFFFFFFF12C6 :                     .mk_spr:
(1) 2380/FFFFFFFFFFFF12C6 : 7C40                		moveq	#$40,d6
(1) 2381/FFFFFFFFFFFF12C8 :                     vidMdSpr_MkSpr:
(1) 2382/FFFFFFFFFFFF12C8 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2383/FFFFFFFFFFFF12CE : BE7C 0050           		cmp.w	#80,d7
(1) 2384/FFFFFFFFFFFF12D2 : 6C4E                		bge.s	vidMd_CError
(1) 2385/FFFFFFFFFFFF12D4 : E74F                		lsl.w	#3,d7
(1) 2386/FFFFFFFFFFFF12D6 : 0687 FFFF DA40      		addi.l	#RAM_SprPzList,d7
(1) 2387/FFFFFFFFFFFF12DC : 2C47                		move.l	d7,a6
(1) 2388/FFFFFFFFFFFF12DE : 4846                		swap	d6
(1) 2389/FFFFFFFFFFFF12E0 : 3E01                		move.w	d1,d7			; Y pos
(1) 2390/FFFFFFFFFFFF12E2 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2391/FFFFFFFFFFFF12E6 : 0838 0002 E873      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2392/FFFFFFFFFFFF12EC : 6704                		beq.s	.dont_add
(1) 2393/FFFFFFFFFFFF12EE : 0647 0080           		addi.w	#$80,d7
(1) 2394/FFFFFFFFFFFF12F2 :                     .dont_add:
(1) 2395/FFFFFFFFFFFF12F2 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2396/FFFFFFFFFFFF12F6 : 3C03                		move.w	d3,d6
(1) 2397/FFFFFFFFFFFF12F8 : 0246 000F           		andi.w	#%1111,d6
(1) 2398/FFFFFFFFFFFF12FC : E14E                		lsl.w	#8,d6
(1) 2399/FFFFFFFFFFFF12FE : E54E                		lsl.w	#2,d6
(1) 2400/FFFFFFFFFFFF1300 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2401/FFFFFFFFFFFF1302 : 4846                		swap	d6
(1) 2402/FFFFFFFFFFFF1304 : E14E                		lsl.w	#8,d6
(1) 2403/FFFFFFFFFFFF1306 : 8E7C 8000           		or.w	#$8000,d7
(1) 2404/FFFFFFFFFFFF130A : 8E46                		or.w	d6,d7
(1) 2405/FFFFFFFFFFFF130C : 3CC7                		move.w	d7,(a6)+
(1) 2406/FFFFFFFFFFFF130E : 3E00                		move.w	d0,d7
(1) 2407/FFFFFFFFFFFF1310 : 0647 0080           		addi.w	#$80,d7
(1) 2408/FFFFFFFFFFFF1314 : 3CC7                		move.w	d7,(a6)+
(1) 2409/FFFFFFFFFFFF1316 : 3CC2                		move.w	d2,(a6)+
(1) 2410/FFFFFFFFFFFF1318 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2411/FFFFFFFFFFFF131C : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2412/FFFFFFFFFFFF1320 : 4E75                		rts
(1) 2413/FFFFFFFFFFFF1322 :                     ; Carry error
(1) 2414/FFFFFFFFFFFF1322 :                     vidMd_CError:
(1) 2415/FFFFFFFFFFFF1322 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2416/FFFFFFFFFFFF1326 : 003C 0001           		or	#1,ccr			; Return Error
(1) 2417/FFFFFFFFFFFF132A :                     vidMd_CFreeze:
(1) 2418/FFFFFFFFFFFF132A : 4E75                		rts
(1) 2419/FFFFFFFFFFFF132C :                     
(1) 2420/FFFFFFFFFFFF132C :                     ; --------------------------------------------------------
(1) 2421/FFFFFFFFFFFF132C :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2422/FFFFFFFFFFFF132C :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2423/FFFFFFFFFFFF132C :                     ;
(1) 2424/FFFFFFFFFFFF132C :                     ; Sets or Makes a VDP Sprite with map data
(1) 2425/FFFFFFFFFFFF132C :                     ;
(1) 2426/FFFFFFFFFFFF132C :                     ; Input:
(1) 2427/FFFFFFFFFFFF132C :                     ; a0   | Slot (0-80)
(1) 2428/FFFFFFFFFFFF132C :                     ; a1   | Map data
(1) 2429/FFFFFFFFFFFF132C :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2430/FFFFFFFFFFFF132C :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2431/FFFFFFFFFFFF132C :                     ; d0.w | X position
(1) 2432/FFFFFFFFFFFF132C :                     ; d1.w | Y position
(1) 2433/FFFFFFFFFFFF132C :                     ; d2.w | VRAM output location
(1) 2434/FFFFFFFFFFFF132C :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2435/FFFFFFFFFFFF132C :                     ;        cell vram is ignored.
(1) 2436/FFFFFFFFFFFF132C :                     ; d3.w | Frame number
(1) 2437/FFFFFFFFFFFF132C :                     ;
(1) 2438/FFFFFFFFFFFF132C :                     ; Returns:
(1) 2439/FFFFFFFFFFFF132C :                     ; bcc | OK
(1) 2440/FFFFFFFFFFFF132C :                     ; bcs | Ran out of slots (not sprites)
(1) 2441/FFFFFFFFFFFF132C :                     ; --------------------------------------------------------
(1) 2442/FFFFFFFFFFFF132C :                     
(1) 2443/FFFFFFFFFFFF132C :                     Video_SetSprMap_DMA:
(1) 2444/FFFFFFFFFFFF132C : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2445/FFFFFFFFFFFF1330 : 6104                		bsr	Video_SetSprMap
(1) 2446/FFFFFFFFFFFF1332 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2447/FFFFFFFFFFFF1334 : 6012                		bra	vid_MkDmaNext
(1) 2448/FFFFFFFFFFFF1336 :                     Video_SetSprMap:
(1) 2449/FFFFFFFFFFFF1336 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2450/FFFFFFFFFFFF133A : 2E08                		move.l	a0,d7
(1) 2451/FFFFFFFFFFFF133C : 7C00                		moveq	#0,d6
(1) 2452/FFFFFFFFFFFF133E : 6036                		bra	vidMdSpr_MkSprMap
(1) 2453/FFFFFFFFFFFF1340 :                     Video_MakeSprMap_DMA:
(1) 2454/FFFFFFFFFFFF1340 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2455/FFFFFFFFFFFF1344 : 6112                		bsr	Video_MakeSprMap
(1) 2456/FFFFFFFFFFFF1346 : 650A                		bcs.s	vid_MkDmaCarry
(1) 2457/FFFFFFFFFFFF1348 :                     vid_MkDmaNext:
(1) 2458/FFFFFFFFFFFF1348 : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2459/FFFFFFFFFFFF134A : 224B                		move.l	a3,a1
(1) 2460/FFFFFFFFFFFF134C : 3003                		move.w	d3,d0
(1) 2461/FFFFFFFFFFFF134E : 3202                		move.w	d2,d1
(1) 2462/FFFFFFFFFFFF1350 : 6160                		bsr	vid_MkMapDma
(1) 2463/FFFFFFFFFFFF1352 :                     vid_MkDmaCarry:
(1) 2464/FFFFFFFFFFFF1352 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2465/FFFFFFFFFFFF1356 : 4E75                		rts
(1) 2466/FFFFFFFFFFFF1358 :                     
(1) 2467/FFFFFFFFFFFF1358 :                     Video_MakeSprMap:
(1) 2468/FFFFFFFFFFFF1358 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2469/FFFFFFFFFFFF135C : 7E00                		moveq	#0,d7
(1) 2470/FFFFFFFFFFFF135E : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6
(1) 2471/FFFFFFFFFFFF1362 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2472/FFFFFFFFFFFF1364 :                     .chk_free:
(1) 2473/FFFFFFFFFFFF1364 : 4A16                		tst.b	(a6)
(1) 2474/FFFFFFFFFFFF1366 : 670C                		beq.s	.mk_spr
(1) 2475/FFFFFFFFFFFF1368 : 5247                		addq.w	#1,d7
(1) 2476/FFFFFFFFFFFF136A : DCFC 0010           		adda	#$10,a6
(1) 2477/FFFFFFFFFFFF136E : 51CE FFF4           		dbf	d6,.chk_free
(1) 2478/FFFFFFFFFFFF1372 : 60AE                		bra	vidMd_CError
(1) 2479/FFFFFFFFFFFF1374 :                     .mk_spr:
(1) 2480/FFFFFFFFFFFF1374 : 7C40                		moveq	#$40,d6
(1) 2481/FFFFFFFFFFFF1376 :                     vidMdSpr_MkSprMap:
(1) 2482/FFFFFFFFFFFF1376 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2483/FFFFFFFFFFFF137C : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2484/FFFFFFFFFFFF1380 : 6CA0                		bge	vidMd_CError
(1) 2485/FFFFFFFFFFFF1382 : E98F                		lsl.l	#4,d7
(1) 2486/FFFFFFFFFFFF1384 : 0687 FFFF D8C0      		addi.l	#RAM_SprMapList,d7
(1) 2487/FFFFFFFFFFFF138A : 2C47                		move.l	d7,a6
(1) 2488/FFFFFFFFFFFF138C : 2E09                		move.l	a1,d7
(1) 2489/FFFFFFFFFFFF138E : 8C7C 0080           		or.w	#$80,d6
(1) 2490/FFFFFFFFFFFF1392 : 4846                		swap	d6
(1) 2491/FFFFFFFFFFFF1394 : E18E                		lsl.l	#8,d6
(1) 2492/FFFFFFFFFFFF1396 : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2493/FFFFFFFFFFFF139C : 8E86                		or.l	d6,d7
(1) 2494/FFFFFFFFFFFF139E : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2495/FFFFFFFFFFFF13A0 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2496/FFFFFFFFFFFF13A2 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2497/FFFFFFFFFFFF13A4 : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2498/FFFFFFFFFFFF13A6 : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2499/FFFFFFFFFFFF13A8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2500/FFFFFFFFFFFF13AC : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2501/FFFFFFFFFFFF13B0 : 4E75                		rts
(1) 2502/FFFFFFFFFFFF13B2 :                     
(1) 2503/FFFFFFFFFFFF13B2 :                     ; --------------------------------------------------------
(1) 2504/FFFFFFFFFFFF13B2 :                     ; Input:
(1) 2505/FFFFFFFFFFFF13B2 :                     ; a0   | DMA map data
(1) 2506/FFFFFFFFFFFF13B2 :                     ; a1   | Graphics data
(1) 2507/FFFFFFFFFFFF13B2 :                     ; d0.w | Current frame in DMA list
(1) 2508/FFFFFFFFFFFF13B2 :                     ; d1.w | VRAM position
(1) 2509/FFFFFFFFFFFF13B2 :                     ;
(1) 2510/FFFFFFFFFFFF13B2 :                     ; USES:
(1) 2511/FFFFFFFFFFFF13B2 :                     ; a6
(1) 2512/FFFFFFFFFFFF13B2 :                     vid_MkMapDma:
(1) 2513/FFFFFFFFFFFF13B2 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2514/FFFFFFFFFFFF13B6 : 7800                		moveq	#0,d4
(1) 2515/FFFFFFFFFFFF13B8 : 0240 00FF           		andi.w	#$FF,d0
(1) 2516/FFFFFFFFFFFF13BC : D040                 		add.w	d0,d0
(1) 2517/FFFFFFFFFFFF13BE : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2518/FFFFFFFFFFFF13C2 : D0C4                 		adda	d4,a0
(1) 2519/FFFFFFFFFFFF13C4 : 3818                 		move.w	(a0)+,d4
(1) 2520/FFFFFFFFFFFF13C6 : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2521/FFFFFFFFFFFF13C8 : 6B32                 		bmi.s	.no_dma
(1) 2522/FFFFFFFFFFFF13CA : 5344                 		subq.w	#1,d4
(1) 2523/FFFFFFFFFFFF13CC : 0241 07FF           		andi.w	#$07FF,d1
(1) 2524/FFFFFFFFFFFF13D0 : EB49                		lsl.w	#5,d1
(1) 2525/FFFFFFFFFFFF13D2 :                     .next_pz:
(1) 2526/FFFFFFFFFFFF13D2 : 4844                		swap	d4
(1) 2527/FFFFFFFFFFFF13D4 : 3818                		move.w	(a0)+,d4
(1) 2528/FFFFFFFFFFFF13D6 : 3404                		move.w	d4,d2
(1) 2529/FFFFFFFFFFFF13D8 : EE4A                		lsr.w	#7,d2
(1) 2530/FFFFFFFFFFFF13DA : 0242 01E0           		andi.w	#$1E0,d2
(1) 2531/FFFFFFFFFFFF13DE : D47C 0020           		add.w	#$20,d2
(1) 2532/FFFFFFFFFFFF13E2 : 7000                		moveq	#0,d0
(1) 2533/FFFFFFFFFFFF13E4 : 3004                		move.w	d4,d0
(1) 2534/FFFFFFFFFFFF13E6 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2535/FFFFFFFFFFFF13EA : EB48                		lsl.w	#5,d0
(1) 2536/FFFFFFFFFFFF13EC : D089                		add.l	a1,d0
(1) 2537/FFFFFFFFFFFF13EE : 6100 F6CE           		bsr	Video_MakeDmaEntry
(1) 2538/FFFFFFFFFFFF13F2 : D242                		add.w	d2,d1
(1) 2539/FFFFFFFFFFFF13F4 : 4844                		swap	d4
(1) 2540/FFFFFFFFFFFF13F6 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2541/FFFFFFFFFFFF13FA : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2542/FFFFFFFFFFFF13FC :                     .no_dma:
(1) 2543/FFFFFFFFFFFF13FC : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2544/FFFFFFFFFFFF1400 : 4E75                		rts
(1) 2545/FFFFFFFFFFFF1402 :                     
(1) 2546/FFFFFFFFFFFF1402 :                     ; ====================================================================
(1) 2547/FFFFFFFFFFFF1402 :                     ; ----------------------------------------------------------------
(1) 2548/FFFFFFFFFFFF1402 :                     ; Video routines for SEGA CD
(1) 2549/FFFFFFFFFFFF1402 :                     ; ----------------------------------------------------------------
(1) 2550/FFFFFFFFFFFF1402 :                     
(1) 2552/FFFFFFFFFFFF1402 :                     
(1) 2553/FFFFFFFFFFFF1402 :                     ; --------------------------------------------------------
(1) 2554/FFFFFFFFFFFF1402 :                     ; EXAMPLE CODE to use stamps
(1) 2555/FFFFFFFFFFFF1402 :                     ;
(1) 2556/FFFFFFFFFFFF1402 :                     ; Single-buffer:
(1) 2557/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2558/FFFFFFFFFFFF1402 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2559/FFFFFFFFFFFF1402 :                     ; 		moveq	#0,d2						; Single buffer mode
(1) 2560/FFFFFFFFFFFF1402 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2561/FFFFFFFFFFFF1402 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2562/FFFFFFFFFFFF1402 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2563/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2564/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2565/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2566/FFFFFFFFFFFF1402 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2567/FFFFFFFFFFFF1402 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2568/FFFFFFFFFFFF1402 :                     
(1) 2569/FFFFFFFFFFFF1402 :                     ; Double-buffer:
(1) 2570/FFFFFFFFFFFF1402 :                     ; V32 H64
(1) 2571/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2572/FFFFFFFFFFFF1402 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2573/FFFFFFFFFFFF1402 :                     ; 		moveq	#1,d2						; Double buffer mode
(1) 2574/FFFFFFFFFFFF1402 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2575/FFFFFFFFFFFF1402 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2576/FFFFFFFFFFFF1402 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2577/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2578/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2579/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2580/FFFFFFFFFFFF1402 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2581/FFFFFFFFFFFF1402 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2582/FFFFFFFFFFFF1402 :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; X+$20
(1) 2583/FFFFFFFFFFFF1402 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Second Auto-VRAM set by _StampEnable
(1) 2584/FFFFFFFFFFFF1402 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2585/FFFFFFFFFFFF1402 :                     
(1) 2586/FFFFFFFFFFFF1402 :                     ; --------------------------------------------------------
(1) 2587/FFFFFFFFFFFF1402 :                     ; Video_MdMcd_StampInit
(1) 2588/FFFFFFFFFFFF1402 :                     ;
(1) 2589/FFFFFFFFFFFF1402 :                     ; Make the first Stamp screens, Call this BEFORE entering
(1) 2590/FFFFFFFFFFFF1402 :                     ; your main loop.
(1) 2591/FFFFFFFFFFFF1402 :                     ; ** VDP DISPLAY MUST BE ENABLED **
(1) 2592/FFFFFFFFFFFF1402 :                     ;
(1) 2593/FFFFFFFFFFFF1402 :                     ; Breaks:
(1) 2594/FFFFFFFFFFFF1402 :                     ; ALL
(1) 2595/FFFFFFFFFFFF1402 :                     ; --------------------------------------------------------
(1) 2596/FFFFFFFFFFFF1402 :                     
(1) 2597/FFFFFFFFFFFF1402 :                     Video_MdMcd_StampInit:
(1) 2599/FFFFFFFFFFFF1402 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2600/FFFFFFFFFFFF1406 : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2601/FFFFFFFFFFFF140A : 672A                		beq.s	.exit_now
(1) 2602/FFFFFFFFFFFF140C : 426E 000E           		clr.w	mdstmp_currOutFlip(a6)
(1) 2603/FFFFFFFFFFFF1410 : 6100 0F84           		bsr	System_MdMcd_WaitWRAM
(1) 2604/FFFFFFFFFFFF1414 : 6100 0214           		bsr	vidMdMcd_SendStampInfo
(1) 2605/FFFFFFFFFFFF1418 : 6100 0F9E           		bsr	System_MdMcd_GiveWRAM
(1) 2606/FFFFFFFFFFFF141C : 6106                		bsr	.mk_initbuff
(1) 2607/FFFFFFFFFFFF141E : 6104                		bsr	.mk_initbuff
(1) 2608/FFFFFFFFFFFF1420 : 6100 0002           		bsr	.mk_initbuff
(1) 2609/FFFFFFFFFFFF1424 :                     .mk_initbuff:
(1) 2610/FFFFFFFFFFFF1424 : 6100 0934           		bsr	System_Render
(1) 2611/FFFFFFFFFFFF1428 : 6110                		bsr	Video_MdMcd_StampRender
(1) 2612/FFFFFFFFFFFF142A :                     .wait_finish:
(1) 2613/FFFFFFFFFFFF142A : 6100 092E           		bsr	System_Render
(1) 2614/FFFFFFFFFFFF142E : 610A                		bsr	Video_MdMcd_StampRender
(1) 2615/FFFFFFFFFFFF1430 : 4A78 CC08           		tst.w	(RAM_MdMcd_StampSett+mdstmp_vramLen).w
(1) 2616/FFFFFFFFFFFF1434 : 66F4                		bne.s	.wait_finish
(1) 2617/FFFFFFFFFFFF1436 :                     .exit_now:
(1) 2619/FFFFFFFFFFFF1436 : 6000 09F2           		bra	Sound_Update
(1) 2620/FFFFFFFFFFFF143A :                     
(1) 2621/FFFFFFFFFFFF143A :                     ; --------------------------------------------------------
(1) 2622/FFFFFFFFFFFF143A :                     ; Video_MdMcd_StampRender
(1) 2623/FFFFFFFFFFFF143A :                     ;
(1) 2624/FFFFFFFFFFFF143A :                     ; Update new Stamp output, drops frames if not ready.
(1) 2625/FFFFFFFFFFFF143A :                     ; ** Call this during VBlank ONLY.
(1) 2626/FFFFFFFFFFFF143A :                     ;
(1) 2627/FFFFFFFFFFFF143A :                     ; Returns:
(1) 2628/FFFFFFFFFFFF143A :                     ; bcc | No changes
(1) 2629/FFFFFFFFFFFF143A :                     ; bcs | Output buffer changed (DOUBLE-buffer ONLY)
(1) 2630/FFFFFFFFFFFF143A :                     ;
(1) 2631/FFFFFFFFFFFF143A :                     ; Breaks:
(1) 2632/FFFFFFFFFFFF143A :                     ; ALL
(1) 2633/FFFFFFFFFFFF143A :                     ; --------------------------------------------------------
(1) 2634/FFFFFFFFFFFF143A :                     
(1) 2635/FFFFFFFFFFFF143A :                     Video_MdMcd_StampRender:
(1) 2637/FFFFFFFFFFFF143A : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2638/FFFFFFFFFFFF143E : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2639/FFFFFFFFFFFF1442 : 6700 0084           		beq	.not_yet
(1) 2640/FFFFFFFFFFFF1446 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2641/FFFFFFFFFFFF144A : 6646                		bne	.draw_cells
(1) 2642/FFFFFFFFFFFF144C :                     ; 		bsr	System_MdMcd_WaitWRAM
(1) 2643/FFFFFFFFFFFF144C :                     ; 		move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 2644/FFFFFFFFFFFF144C :                     ; 		btst	#3,d7
(1) 2645/FFFFFFFFFFFF144C :                     ; 		bne.s	.not_yet
(1) 2646/FFFFFFFFFFFF144C : 6100 0F54           		bsr	System_MdMcd_CheckWRAM
(1) 2647/FFFFFFFFFFFF1450 : 6676                		bne	.not_yet
(1) 2648/FFFFFFFFFFFF1452 : 6100 0EEE           		bsr	System_MdMcd_SubWait
(1) 2649/FFFFFFFFFFFF1456 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2650/FFFFFFFFFFFF145A : 0247 0001           		andi.w	#%01,d7
(1) 2651/FFFFFFFFFFFF145E : 33C7 0023 BFFE      		move.w	d7,(sysmcd_wram+WRAM_StampCurrFlip).l
(1) 2652/FFFFFFFFFFFF1464 : 33FC 0000 0023      		move.w	#0,(sysmcd_wram+WRAM_StampsDone).l
         FFFFFFFFFFFF146A : BFFC             
(1) 2653/FFFFFFFFFFFF146C : 0A6E 0001 000E      		eor.w	#1,mdstmp_currOutFlip(a6)
(1) 2654/FFFFFFFFFFFF1472 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2655/FFFFFFFFFFFF1476 : 6100 09B2           		bsr	Sound_Update
(1) 2656/FFFFFFFFFFFF147A : 42AE 001A           		clr.l	mdstmp_buffIncr(a6)
(1) 2657/FFFFFFFFFFFF147E : 426E 000A           		clr.w	mdstmp_vramIncr(a6)
(1) 2658/FFFFFFFFFFFF1482 : 3D6E 0006 0008      		move.w	mdstmp_vramSize(a6),mdstmp_vramLen(a6)
(1) 2659/FFFFFFFFFFFF1488 : 6100 01A0           		bsr	vidMdMcd_SendStampInfo
(1) 2660/FFFFFFFFFFFF148C : 6100 00A4           		bsr	.make_cellbuff
(1) 2661/FFFFFFFFFFFF1490 : 6012                		bra	.first_step
(1) 2662/FFFFFFFFFFFF1492 :                     
(1) 2663/FFFFFFFFFFFF1492 :                     ; --------------------------------------------------------
(1) 2664/FFFFFFFFFFFF1492 :                     ; Next cell slice
(1) 2665/FFFFFFFFFFFF1492 :                     ; --------------------------------------------------------
(1) 2666/FFFFFFFFFFFF1492 :                     
(1) 2667/FFFFFFFFFFFF1492 :                     .draw_cells:
(1) 2668/FFFFFFFFFFFF1492 : 6100 0EA0           		bsr	System_MdMcd_Interrupt
(1) 2669/FFFFFFFFFFFF1496 :                     .wait_wram:
(1) 2670/FFFFFFFFFFFF1496 : 6100 0992           		bsr	Sound_Update
(1) 2671/FFFFFFFFFFFF149A : 6100 0F06           		bsr	System_MdMcd_CheckWRAM
(1) 2672/FFFFFFFFFFFF149E : 66F6                		bne	.wait_wram
(1) 2673/FFFFFFFFFFFF14A0 : 6100 0090           		bsr	.make_cellbuff
(1) 2674/FFFFFFFFFFFF14A4 :                     .first_step:
(1) 2675/FFFFFFFFFFFF14A4 : 6100 0F12           		bsr	System_MdMcd_GiveWRAM
(1) 2676/FFFFFFFFFFFF14A8 : 6128                		bsr	.mkdma_buff
(1) 2677/FFFFFFFFFFFF14AA : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2678/FFFFFFFFFFFF14AE : 6618                		bne.s	.not_yet
(1) 2679/FFFFFFFFFFFF14B0 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2680/FFFFFFFFFFFF14B4 : 6100 0974           		bsr	Sound_Update
(1) 2681/FFFFFFFFFFFF14B8 : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2682/FFFFFFFFFFFF14BC : 670A                		beq.s	.not_yet
(1) 2683/FFFFFFFFFFFF14BE : 6100 096A           		bsr	Sound_Update
(1) 2684/FFFFFFFFFFFF14C2 : 003C 0001           		or	#1,ccr
(1) 2685/FFFFFFFFFFFF14C6 : 4E75                		rts
(1) 2686/FFFFFFFFFFFF14C8 :                     .not_yet:
(1) 2687/FFFFFFFFFFFF14C8 : 6100 0960           		bsr	Sound_Update
(1) 2688/FFFFFFFFFFFF14CC : 023C 001E           		and	#%11110,ccr
(1) 2689/FFFFFFFFFFFF14D0 : 4E75                		rts
(1) 2690/FFFFFFFFFFFF14D2 :                     
(1) 2691/FFFFFFFFFFFF14D2 :                     ; --------------------------------------------------------
(1) 2692/FFFFFFFFFFFF14D2 :                     
(1) 2693/FFFFFFFFFFFF14D2 :                     .mkdma_buff:
(1) 2694/FFFFFFFFFFFF14D2 : 202E 0012           		move.l	mdstmp_cellstorage(a6),d0
(1) 2695/FFFFFFFFFFFF14D6 : 7200                		moveq	#0,d1
(1) 2696/FFFFFFFFFFFF14D8 : 322E 0002           		move.w	mdstmp_vramMain(a6),d1
(1) 2697/FFFFFFFFFFFF14DC : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2698/FFFFFFFFFFFF14E0 : 670A                		beq.s	.first_one
(1) 2699/FFFFFFFFFFFF14E2 : 0816 0006           		btst	#6,mdstmp_flags(a6)
(1) 2700/FFFFFFFFFFFF14E6 : 6704                		beq.s	.first_one
(1) 2701/FFFFFFFFFFFF14E8 : 322E 0004           		move.w	mdstmp_vramSec(a6),d1
(1) 2702/FFFFFFFFFFFF14EC :                     .first_one:
(1) 2703/FFFFFFFFFFFF14EC : D26E 000A           		add.w	mdstmp_vramIncr(a6),d1
(1) 2704/FFFFFFFFFFFF14F0 : 362E 0008           		move.w	mdstmp_vramLen(a6),d3
(1) 2705/FFFFFFFFFFFF14F4 : 342E 000C           		move.w	mdstmp_stmpoutb(a6),d2
(1) 2706/FFFFFFFFFFFF14F8 : B46E 0006           		cmp.w	mdstmp_vramSize(a6),d2
(1) 2707/FFFFFFFFFFFF14FC : 6704                		beq.s	.exact_size
(1) 2708/FFFFFFFFFFFF14FE : B642                		cmp.w	d2,d3
(1) 2709/FFFFFFFFFFFF1500 : 6E08                		bgt.s	.maximum
(1) 2710/FFFFFFFFFFFF1502 :                     .exact_size:
(1) 2711/FFFFFFFFFFFF1502 : 3403                		move.w	d3,d2
(1) 2712/FFFFFFFFFFFF1504 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2713/FFFFFFFFFFFF1508 : 6014                		bra.s	.not_done
(1) 2714/FFFFFFFFFFFF150A :                     .maximum:
(1) 2715/FFFFFFFFFFFF150A : 3602                		move.w	d2,d3
(1) 2716/FFFFFFFFFFFF150C : D76E 000A           		addi.w	d3,mdstmp_vramIncr(a6)
(1) 2717/FFFFFFFFFFFF1510 : 976E 0008           		subi.w	d3,mdstmp_vramLen(a6)
(1) 2718/FFFFFFFFFFFF1514 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)	; Failsafe
(1) 2719/FFFFFFFFFFFF1518 : 6A04                		bpl.s	.not_done
(1) 2720/FFFFFFFFFFFF151A : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2721/FFFFFFFFFFFF151E :                     .not_done:
(1) 2722/FFFFFFFFFFFF151E : EB89                		lsl.l	#5,d1
(1) 2723/FFFFFFFFFFFF1520 : EB8A                		lsl.l	#5,d2
(1) 2724/FFFFFFFFFFFF1522 : 6100 F59A           		bsr	Video_MakeDmaEntry
(1) 2726/FFFFFFFFFFFF1526 : 6000 0902           		bra	Sound_Update
(1) 2727/FFFFFFFFFFFF152A :                     
(1) 2728/FFFFFFFFFFFF152A :                     ; --------------------------------------------------------
(1) 2729/FFFFFFFFFFFF152A :                     ; Get a slice of the dot-screen
(1) 2730/FFFFFFFFFFFF152A :                     ; --------------------------------------------------------
(1) 2731/FFFFFFFFFFFF152A :                     
(1) 2732/FFFFFFFFFFFF152A :                     .out_locs:
(1) 2733/FFFFFFFFFFFF152A : 0022 0000           		dc.l sysmcd_wram+WRAM_DotOutput_0
(1) 2734/FFFFFFFFFFFF152E : 0022 8000           		dc.l sysmcd_wram+WRAM_DotOutput_1
(1) 2735/FFFFFFFFFFFF1532 :                     .make_cellbuff:
(1) 2736/FFFFFFFFFFFF1532 : 6100 08F6           		bsr	Sound_Update
(1) 2737/FFFFFFFFFFFF1536 : 7E00                		moveq	#0,d7
(1) 2738/FFFFFFFFFFFF1538 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2739/FFFFFFFFFFFF153C : 0247 0001           		andi.w	#%01,d7
(1) 2740/FFFFFFFFFFFF1540 : E58F                		lsl.l	#2,d7
(1) 2741/FFFFFFFFFFFF1542 : 2E3B 70E6           		move.l	.out_locs(pc,d7.w),d7
(1) 2742/FFFFFFFFFFFF1546 : DEAE 001A           		add.l	mdstmp_buffIncr(a6),d7
(1) 2743/FFFFFFFFFFFF154A : 2A47                		move.l	d7,a5
(1) 2744/FFFFFFFFFFFF154C : 7E00                		moveq	#0,d7
(1) 2745/FFFFFFFFFFFF154E : 3E2E 000C           		move.w	mdstmp_stmpoutb(a6),d7
(1) 2746/FFFFFFFFFFFF1552 : 2C07                		move.l	d7,d6
(1) 2747/FFFFFFFFFFFF1554 : EB8E                		lsl.l	#5,d6
(1) 2748/FFFFFFFFFFFF1556 : DDAE 001A           		add.l	d6,mdstmp_buffIncr(a6)
(1) 2749/FFFFFFFFFFFF155A : 286E 0012           		movea.l	mdstmp_cellstorage(a6),a4
(1) 2750/FFFFFFFFFFFF155E : 3C07                		move.w	d7,d6
(1) 2751/FFFFFFFFFFFF1560 : E84E                		lsr.w	#4,d6
(1) 2752/FFFFFFFFFFFF1562 : 5346                		subq.w	#1,d6
(1) 2753/FFFFFFFFFFFF1564 :                     .copy_mid:
(1) 2754/FFFFFFFFFFFF1564 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2755/FFFFFFFFFFFF1568 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2756/FFFFFFFFFFFF156C : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2757/FFFFFFFFFFFF1570 : 48EC 0F0F 0020      		movem.l	d0-d3/a0-a3,$20(a4)
(1) 2758/FFFFFFFFFFFF1576 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2759/FFFFFFFFFFFF157A : 48EC 0F0F 0040      		movem.l	d0-d3/a0-a3,$40(a4)
(1) 2760/FFFFFFFFFFFF1580 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2761/FFFFFFFFFFFF1584 : 48EC 0F0F 0060      		movem.l	d0-d3/a0-a3,$60(a4)
(1) 2762/FFFFFFFFFFFF158A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2763/FFFFFFFFFFFF158E : 48EC 0F0F 0080      		movem.l	d0-d3/a0-a3,$80(a4)
(1) 2764/FFFFFFFFFFFF1594 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2765/FFFFFFFFFFFF1598 : 48EC 0F0F 00A0      		movem.l	d0-d3/a0-a3,$A0(a4)
(1) 2766/FFFFFFFFFFFF159E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2767/FFFFFFFFFFFF15A2 : 48EC 0F0F 00C0      		movem.l	d0-d3/a0-a3,$C0(a4)
(1) 2768/FFFFFFFFFFFF15A8 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2769/FFFFFFFFFFFF15AC : 48EC 0F0F 00E0      		movem.l	d0-d3/a0-a3,$E0(a4)
(1) 2770/FFFFFFFFFFFF15B2 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2771/FFFFFFFFFFFF15B6 : 48EC 0F0F 0100      		movem.l	d0-d3/a0-a3,$100(a4)
(1) 2772/FFFFFFFFFFFF15BC : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2773/FFFFFFFFFFFF15C0 : 48EC 0F0F 0120      		movem.l	d0-d3/a0-a3,$120(a4)
(1) 2774/FFFFFFFFFFFF15C6 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2775/FFFFFFFFFFFF15CA : 48EC 0F0F 0140      		movem.l	d0-d3/a0-a3,$140(a4)
(1) 2776/FFFFFFFFFFFF15D0 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2777/FFFFFFFFFFFF15D4 : 48EC 0F0F 0160      		movem.l	d0-d3/a0-a3,$160(a4)
(1) 2778/FFFFFFFFFFFF15DA : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2779/FFFFFFFFFFFF15DE : 48EC 0F0F 0180      		movem.l	d0-d3/a0-a3,$180(a4)
(1) 2780/FFFFFFFFFFFF15E4 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2781/FFFFFFFFFFFF15E8 : 48EC 0F0F 01A0      		movem.l	d0-d3/a0-a3,$1A0(a4)
(1) 2782/FFFFFFFFFFFF15EE : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2783/FFFFFFFFFFFF15F2 : 48EC 0F0F 01C0      		movem.l	d0-d3/a0-a3,$1C0(a4)
(1) 2784/FFFFFFFFFFFF15F8 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2785/FFFFFFFFFFFF15FC : 48EC 0F0F 01E0      		movem.l	d0-d3/a0-a3,$1E0(a4)
(1) 2786/FFFFFFFFFFFF1602 : 49EC 0200           		lea	$200(a4),a4
(1) 2787/FFFFFFFFFFFF1606 : 51CE FF5C           		dbf	d6,.copy_mid
(1) 2788/FFFFFFFFFFFF160A : 6100 081E           		bsr	Sound_Update
(1) 2789/FFFFFFFFFFFF160E : 0247 000F           		andi.w	#%1111,d7
(1) 2790/FFFFFFFFFFFF1612 : 6712                		beq.s	.no_lsb
(1) 2791/FFFFFFFFFFFF1614 : 5347                		subq.w	#1,d7
(1) 2792/FFFFFFFFFFFF1616 :                     .copy_lsb:
(1) 2793/FFFFFFFFFFFF1616 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2794/FFFFFFFFFFFF161A : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2795/FFFFFFFFFFFF161E : 49EC 0020           		lea	$20(a4),a4
(1) 2796/FFFFFFFFFFFF1622 : 51CF FFF2           		dbf	d7,.copy_lsb
(1) 2797/FFFFFFFFFFFF1626 :                     .no_lsb:
(1) 2798/FFFFFFFFFFFF1626 : 6000 0802           		bra	Sound_Update
(1) 2799/FFFFFFFFFFFF162A :                     
(1) 2800/FFFFFFFFFFFF162A :                     ; --------------------------------------------------------
(1) 2801/FFFFFFFFFFFF162A :                     
(1) 2802/FFFFFFFFFFFF162A :                     vidMdMcd_SendStampInfo:
(1) 2803/FFFFFFFFFFFF162A : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2804/FFFFFFFFFFFF162E : 49F9 0023 A000      		lea	(sysmcd_wram+WRAM_MdStampList).l,a4
(1) 2805/FFFFFFFFFFFF1634 : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 2806/FFFFFFFFFFFF1638 :                     .copy_towram:
(1) 2807/FFFFFFFFFFFF1638 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2808/FFFFFFFFFFFF163C : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2809/FFFFFFFFFFFF1640 : D8FC 0020           		adda	#$20,a4
(1) 2810/FFFFFFFFFFFF1644 : 51CF FFF2           		dbf	d7,.copy_towram
(1) 2811/FFFFFFFFFFFF1648 : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2812/FFFFFFFFFFFF164C : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(1) 2813/FFFFFFFFFFFF164E : 3C3C 0020           		move.w	#cdstamp_len,d6
(1) 2814/FFFFFFFFFFFF1652 :                     .chk_spr:
(1) 2815/FFFFFFFFFFFF1652 : 0815 0006           		btst	#6,cdstamp_flags(a5)
(1) 2816/FFFFFFFFFFFF1656 : 6702                		beq.s	.not_sprtemp
(1) 2817/FFFFFFFFFFFF1658 : 4215                		clr.b	cdstamp_flags(a5)
(1) 2818/FFFFFFFFFFFF165A :                     .not_sprtemp:
(1) 2819/FFFFFFFFFFFF165A : DAC6                		adda	d6,a5
(1) 2820/FFFFFFFFFFFF165C : 51CF FFF4           		dbf	d7,.chk_spr
(1) 2821/FFFFFFFFFFFF1660 : 6000 07C8           		bra	Sound_Update
(1) 2822/FFFFFFFFFFFF1664 :                     
(1) 2823/FFFFFFFFFFFF1664 :                     ; --------------------------------------------------------
(1) 2824/FFFFFFFFFFFF1664 :                     ; Video_MdMcd_StampEnable
(1) 2825/FFFFFFFFFFFF1664 :                     ;
(1) 2826/FFFFFFFFFFFF1664 :                     ; Init/Enable SCD Stamp rendering
(1) 2827/FFFFFFFFFFFF1664 :                     ;
(1) 2828/FFFFFFFFFFFF1664 :                     ; Input:
(1) 2829/FFFFFFFFFFFF1664 :                     ; a0   | RAM location to store cells
(1) 2830/FFFFFFFFFFFF1664 :                     ; d0.l | Dot-Screen Width and Height: splitw(width,height)
(1) 2831/FFFFFFFFFFFF1664 :                     ; d1.w | VRAM Main output
(1) 2832/FFFFFFFFFFFF1664 :                     ; d2.w | Use double-buffering: No(0) or Yes(1)
(1) 2833/FFFFFFFFFFFF1664 :                     ; d3.w | Size of out cells storage
(1) 2834/FFFFFFFFFFFF1664 :                     ;        Default tag: DEF_MaxStampCOut
(1) 2835/FFFFFFFFFFFF1664 :                     ;
(1) 2836/FFFFFFFFFFFF1664 :                     ; Notes:
(1) 2837/FFFFFFFFFFFF1664 :                     ; - Use only Width and Height aligned by 8
(1) 2838/FFFFFFFFFFFF1664 :                     ; - Width and Height will also be used to get the
(1) 2839/FFFFFFFFFFFF1664 :                     ;   the CENTER point in ALL Stamps.
(1) 2840/FFFFFFFFFFFF1664 :                     ; --------------------------------------------------------
(1) 2841/FFFFFFFFFFFF1664 :                     
(1) 2842/FFFFFFFFFFFF1664 :                     Video_MdMcd_StampEnable:
(1) 2843/FFFFFFFFFFFF1664 : 48E7 8306           		movem.l	d0/d6-d7/a5-a6,-(sp)
(1) 2844/FFFFFFFFFFFF1668 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2845/FFFFFFFFFFFF166C : 2A4E                		move.l	a6,a5
(1) 2846/FFFFFFFFFFFF166E : 3E3C 001D           		move.w	#mdstmp_len-1,d7
(1) 2847/FFFFFFFFFFFF1672 : 7C00                		moveq	#0,d6
(1) 2848/FFFFFFFFFFFF1674 :                     .clr_sett:
(1) 2849/FFFFFFFFFFFF1674 : 3AC6                		move.w	d6,(a5)+
(1) 2850/FFFFFFFFFFFF1676 : 51CF FFFC           		dbf	d7,.clr_sett
(1) 2851/FFFFFFFFFFFF167A : 3D43 000C           		move.w	d3,mdstmp_stmpoutb(a6)
(1) 2852/FFFFFFFFFFFF167E : 2D48 0012           		move.l	a0,mdstmp_cellstorage(a6)
(1) 2853/FFFFFFFFFFFF1682 : 3D41 0002           		move.w	d1,mdstmp_vramMain(a6)
(1) 2854/FFFFFFFFFFFF1686 : 7E00                		moveq	#0,d7
(1) 2855/FFFFFFFFFFFF1688 : 2C00                		move.l	d0,d6
(1) 2856/FFFFFFFFFFFF168A : 4846                		swap	d6
(1) 2857/FFFFFFFFFFFF168C : 3E00                		move.w	d0,d7
(1) 2858/FFFFFFFFFFFF168E : CEC6                		mulu.w	d6,d7
(1) 2859/FFFFFFFFFFFF1690 : EC8F                		lsr.l	#5+1,d7
(1) 2860/FFFFFFFFFFFF1692 : 3D47 0006           		move.w	d7,mdstmp_vramSize(a6)
(1) 2861/FFFFFFFFFFFF1696 : 0896 0000           		bclr	#0,mdstmp_flags(a6)
(1) 2862/FFFFFFFFFFFF169A : 4A42                		tst.w	d2
(1) 2863/FFFFFFFFFFFF169C : 670E                		beq.s	.dont_use
(1) 2864/FFFFFFFFFFFF169E : 3C2E 0002           		move.w	mdstmp_vramMain(a6),d6
(1) 2865/FFFFFFFFFFFF16A2 : DC47                		add.w	d7,d6
(1) 2866/FFFFFFFFFFFF16A4 : 3D46 0004           		move.w	d6,mdstmp_vramSec(a6)
(1) 2867/FFFFFFFFFFFF16A8 : 08D6 0000           		bset	#0,mdstmp_flags(a6)
(1) 2868/FFFFFFFFFFFF16AC :                     .dont_use:
(1) 2869/FFFFFFFFFFFF16AC : 08D6 0007           		bset	#7,mdstmp_flags(a6)
(1) 2870/FFFFFFFFFFFF16B0 : 2E00                		move.l	d0,d7
(1) 2871/FFFFFFFFFFFF16B2 : 4847                		swap	d7
(1) 2872/FFFFFFFFFFFF16B4 : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 2873/FFFFFFFFFFFF16BA : 33C0 00A1 2012      		move.w	d0,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 2874/FFFFFFFFFFFF16C0 : 6100 0CF6           		bsr	System_MdMcd_GiveWRAM
(1) 2875/FFFFFFFFFFFF16C4 : 303C 0018           		move.w	#$18,d0
(1) 2876/FFFFFFFFFFFF16C8 : 6100 0C8C           		bsr	System_MdMcd_SubTask
(1) 2877/FFFFFFFFFFFF16CC : 6100 0CC8           		bsr	System_MdMcd_WaitWRAM
(1) 2878/FFFFFFFFFFFF16D0 : 4CDF 60C1           		movem.l	(sp)+,d0/d6-d7/a5-a6
(1) 2879/FFFFFFFFFFFF16D4 : 4E75                		rts
(1) 2880/FFFFFFFFFFFF16D6 :                     
(1) 2881/FFFFFFFFFFFF16D6 :                     ; --------------------------------------------------------
(1) 2882/FFFFFFFFFFFF16D6 :                     ; Video_MdMcd_StampDisable
(1) 2883/FFFFFFFFFFFF16D6 :                     ;
(1) 2884/FFFFFFFFFFFF16D6 :                     ; Disable SCD Stamp rendering
(1) 2885/FFFFFFFFFFFF16D6 :                     ; --------------------------------------------------------
(1) 2886/FFFFFFFFFFFF16D6 :                     
(1) 2887/FFFFFFFFFFFF16D6 :                     Video_MdMcd_StampDisable:
(1) 2888/FFFFFFFFFFFF16D6 : 48E7 8002           		movem.l	d0/a6,-(sp)
(1) 2889/FFFFFFFFFFFF16DA : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2890/FFFFFFFFFFFF16DE : 0896 0007           		bclr	#7,mdstmp_flags(a6)
(1) 2891/FFFFFFFFFFFF16E2 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2892/FFFFFFFFFFFF16E6 : 6100 0CD0           		bsr	System_MdMcd_GiveWRAM
(1) 2893/FFFFFFFFFFFF16EA : 7019                		moveq	#$19,d0
(1) 2894/FFFFFFFFFFFF16EC : 6100 0C68           		bsr	System_MdMcd_SubTask
(1) 2895/FFFFFFFFFFFF16F0 : 4CDF 4001           		movem.l	(sp)+,d0/a6
(1) 2896/FFFFFFFFFFFF16F4 : 4E75                		rts
(1) 2897/FFFFFFFFFFFF16F6 :                     
(1) 2898/FFFFFFFFFFFF16F6 :                     ; --------------------------------------------------------
(1) 2899/FFFFFFFFFFFF16F6 :                     ; Video_MdMcd_StampDotMap
(1) 2900/FFFFFFFFFFFF16F6 :                     ;
(1) 2901/FFFFFFFFFFFF16F6 :                     ; Show the stamp screen
(1) 2902/FFFFFFFFFFFF16F6 :                     ;
(1) 2903/FFFFFFFFFFFF16F6 :                     ; Input:
(1) 2904/FFFFFFFFFFFF16F6 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 2905/FFFFFFFFFFFF16F6 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 2906/FFFFFFFFFFFF16F6 :                     ; d2.l | Screen Width/VRAM location:
(1) 2907/FFFFFFFFFFFF16F6 :                     ;        splitw(sw_size,vram_loc)
(1) 2908/FFFFFFFFFFFF16F6 :                     ; d3.w | VRAM start
(1) 2909/FFFFFFFFFFFF16F6 :                     ; --------------------------------------------------------
(1) 2910/FFFFFFFFFFFF16F6 :                     
(1) 2911/FFFFFFFFFFFF16F6 :                     Video_MdMcd_StampDotMap:
(1) 2912/FFFFFFFFFFFF16F6 : 48E7 1F0E           		movem.l	d3-d7/a4-a6,-(sp)
(1) 2913/FFFFFFFFFFFF16FA : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2914/FFFFFFFFFFFF1700 : 3E02                		move.w	d2,d7
(1) 2915/FFFFFFFFFFFF1702 : 2C02                		move.l	d2,d6
(1) 2916/FFFFFFFFFFFF1704 : 4846                		swap	d6
(1) 2917/FFFFFFFFFFFF1706 : 3A00                		move.w	d0,d5
(1) 2918/FFFFFFFFFFFF1708 : CAC6                		mulu.w	d6,d5
(1) 2919/FFFFFFFFFFFF170A : 2800                		move.l	d0,d4
(1) 2920/FFFFFFFFFFFF170C : 4844                		swap	d4
(1) 2921/FFFFFFFFFFFF170E : D844                		add.w	d4,d4
(1) 2922/FFFFFFFFFFFF1710 : DA44                		add.w	d4,d5
(1) 2923/FFFFFFFFFFFF1712 : DE45                		add.w	d5,d7
(1) 2924/FFFFFFFFFFFF1714 : 7A00                		moveq	#0,d5
(1) 2925/FFFFFFFFFFFF1716 : 3A07                		move.w	d7,d5
(1) 2926/FFFFFFFFFFFF1718 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2927/FFFFFFFFFFFF171C : 8E7C 4000           		or.w	#$4000,d7
(1) 2928/FFFFFFFFFFFF1720 : E55D                		rol.w	#2,d5
(1) 2929/FFFFFFFFFFFF1722 : 0245 0003           		andi.w	#%11,d5
(1) 2930/FFFFFFFFFFFF1726 : 4845                		swap	d5
(1) 2931/FFFFFFFFFFFF1728 : 2A48                		move.l	a0,a5
(1) 2932/FFFFFFFFFFFF172A : 2801                		move.l	d1,d4
(1) 2933/FFFFFFFFFFFF172C : 4844                		swap	d4
(1) 2934/FFFFFFFFFFFF172E : 5344                		subq.w	#1,d4
(1) 2935/FFFFFFFFFFFF1730 : 6B30                		bmi.s	.bad_size
(1) 2936/FFFFFFFFFFFF1732 :                     .x_loop:
(1) 2937/FFFFFFFFFFFF1732 : 2844                		move.l	d4,a4
(1) 2938/FFFFFFFFFFFF1734 : 3801                		move.w	d1,d4
(1) 2939/FFFFFFFFFFFF1736 : 5344                		subq.w	#1,d4
(1) 2940/FFFFFFFFFFFF1738 :                     .y_loop:
(1) 2941/FFFFFFFFFFFF1738 : 4844                		swap	d4
(1) 2942/FFFFFFFFFFFF173A : 3807                		move.w	d7,d4
(1) 2943/FFFFFFFFFFFF173C : D845                		add.w	d5,d4
(1) 2944/FFFFFFFFFFFF173E : 4845                		swap	d5
(1) 2945/FFFFFFFFFFFF1740 : 3D44 0004           		move.w	d4,4(a6)
(1) 2946/FFFFFFFFFFFF1744 : 3D45 0004           		move.w	d5,4(a6)
(1) 2947/FFFFFFFFFFFF1748 : 4845                		swap	d5
(1) 2948/FFFFFFFFFFFF174A : 3C83                		move.w	d3,(a6)
(1) 2949/FFFFFFFFFFFF174C : 5243                		addq.w	#1,d3
(1) 2950/FFFFFFFFFFFF174E : DA46                		add.w	d6,d5
(1) 2951/FFFFFFFFFFFF1750 : 4844                		swap	d4
(1) 2952/FFFFFFFFFFFF1752 : 51CC FFE4           		dbf	d4,.y_loop
(1) 2953/FFFFFFFFFFFF1756 : DE7C 0002           		add.w	#2,d7
(1) 2954/FFFFFFFFFFFF175A : 4245                		clr.w	d5
(1) 2955/FFFFFFFFFFFF175C : 280C                		move.l	a4,d4
(1) 2956/FFFFFFFFFFFF175E : 51CC FFD2           		dbf	d4,.x_loop
(1) 2957/FFFFFFFFFFFF1762 :                     .bad_size:
(1) 2958/FFFFFFFFFFFF1762 : 4CDF 70F8           		movem.l	(sp)+,d3-d7/a4-a6
(1) 2959/FFFFFFFFFFFF1766 : 4E75                		rts
(1) 2960/FFFFFFFFFFFF1768 :                     
(1) 2961/FFFFFFFFFFFF1768 :                     ; --------------------------------------------------------
(1) 2962/FFFFFFFFFFFF1768 :                     ; Video_MdMcd_StampSet
(1) 2963/FFFFFFFFFFFF1768 :                     ;
(1) 2964/FFFFFFFFFFFF1768 :                     ; Set or Make a Sega CD Stamp
(1) 2965/FFFFFFFFFFFF1768 :                     ;
(1) 2966/FFFFFFFFFFFF1768 :                     ; Input:
(1) 2967/FFFFFFFFFFFF1768 :                     ; a0   | Index slot (_SetStamp ONLY)
(1) 2968/FFFFFFFFFFFF1768 :                     ; a1   | Map slot to use
(1) 2969/FFFFFFFFFFFF1768 :                     ; d0.l | X/Y position:       splitw(x_pos,y_pos)
(1) 2970/FFFFFFFFFFFF1768 :                     ; d1.l | Rotation and Scale: splitw(rot,scale)
(1) 2971/FFFFFFFFFFFF1768 :                     ; d2.l | Width/Height:       split(width,height)
(1) 2972/FFFFFFFFFFFF1768 :                     ; d3.l | Center X/Y:         splitw(cx,cy)
(1) 2973/FFFFFFFFFFFF1768 :                     ;
(1) 2974/FFFFFFFFFFFF1768 :                     ; Returns:
(1) 2975/FFFFFFFFFFFF1768 :                     ; bcc | Wrote sucessfully
(1) 2976/FFFFFFFFFFFF1768 :                     ; bcs | Ran out of stamps
(1) 2977/FFFFFFFFFFFF1768 :                     ;
(1) 2978/FFFFFFFFFFFF1768 :                     ; Notes:
(1) 2979/FFFFFFFFFFFF1768 :                     ; - This resets the X/Y/Z position and rotations
(1) 2980/FFFFFFFFFFFF1768 :                     ; --------------------------------------------------------
(1) 2981/FFFFFFFFFFFF1768 :                     
(1) 2982/FFFFFFFFFFFF1768 :                     Video_MdMcd_SetStamp:
(1) 2983/FFFFFFFFFFFF1768 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2984/FFFFFFFFFFFF176C : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 2985/FFFFFFFFFFFF1770 : 2E08                		move.l	a0,d7
(1) 2986/FFFFFFFFFFFF1772 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 2987/FFFFFFFFFFFF1774 : 601E                		bra	vidMdMcd_MkStamp
(1) 2988/FFFFFFFFFFFF1776 :                     
(1) 2989/FFFFFFFFFFFF1776 :                     Video_MdMcd_MakeStamp:
(1) 2990/FFFFFFFFFFFF1776 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2991/FFFFFFFFFFFF177A : 7E00                		moveq	#0,d7
(1) 2992/FFFFFFFFFFFF177C : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 2993/FFFFFFFFFFFF1780 : 7C1F                		moveq	#MAX_MCDSTAMPS-1,d6
(1) 2994/FFFFFFFFFFFF1782 :                     .chk_free:
(1) 2995/FFFFFFFFFFFF1782 : 4A16                		tst.b	cdstamp_flags(a6)
(1) 2996/FFFFFFFFFFFF1784 : 670C                		beq.s	.mk_spr
(1) 2997/FFFFFFFFFFFF1786 : 5247                		addq.w	#1,d7
(1) 2998/FFFFFFFFFFFF1788 : DCFC 0020           		adda	#cdstamp_len,a6
(1) 2999/FFFFFFFFFFFF178C : 51CE FFF4           		dbf	d6,.chk_free
(1) 3000/FFFFFFFFFFFF1790 : 605C                		bra.s	vidMdMcd_CError
(1) 3001/FFFFFFFFFFFF1792 :                     .mk_spr:
(1) 3002/FFFFFFFFFFFF1792 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3003/FFFFFFFFFFFF1794 :                     
(1) 3004/FFFFFFFFFFFF1794 :                     vidMdMcd_MkStamp:
(1) 3005/FFFFFFFFFFFF1794 : 0247 00FF           		andi.w	#$FF,d7
(1) 3006/FFFFFFFFFFFF1798 : 0C47 0020           		cmpi.w	#MAX_MCDSTAMPS,d7
(1) 3007/FFFFFFFFFFFF179C : 6C50                		bge.s	vidMdMcd_CError
(1) 3008/FFFFFFFFFFFF179E : EB4F                		lsl.w	#5,d7
(1) 3009/FFFFFFFFFFFF17A0 : DCC7                		adda	d7,a6
(1) 3010/FFFFFFFFFFFF17A2 : 3E09                		move.w	a1,d7
(1) 3011/FFFFFFFFFFFF17A4 : 0247 00FF           		andi.w	#$FF,d7
(1) 3012/FFFFFFFFFFFF17A8 : 1D47 0001           		move.b	d7,cdstamp_map(a6)
(1) 3013/FFFFFFFFFFFF17AC : 2E00                		move.l	d0,d7
(1) 3014/FFFFFFFFFFFF17AE : 4847                		swap	d7
(1) 3015/FFFFFFFFFFFF17B0 : 3D40 0008           		move.w  d0,cdstamp_y(a6)
(1) 3016/FFFFFFFFFFFF17B4 : 3D47 0006           		move.w  d7,cdstamp_x(a6)
(1) 3017/FFFFFFFFFFFF17B8 : 2E02                		move.l	d2,d7
(1) 3018/FFFFFFFFFFFF17BA : 4847                		swap	d7
(1) 3019/FFFFFFFFFFFF17BC : 3D42 000C           		move.w  d2,cdstamp_hght(a6)
(1) 3020/FFFFFFFFFFFF17C0 : 3D47 000A           		move.w  d7,cdstamp_wdth(a6)
(1) 3021/FFFFFFFFFFFF17C4 : 2E03                		move.l	d3,d7
(1) 3022/FFFFFFFFFFFF17C6 : 4847                		swap	d7
(1) 3023/FFFFFFFFFFFF17C8 : 3D43 0004           		move.w  d3,cdstamp_cy(a6)
(1) 3024/FFFFFFFFFFFF17CC : 3D47 0002           		move.w  d7,cdstamp_cx(a6)
(1) 3025/FFFFFFFFFFFF17D0 :                     
(1) 3026/FFFFFFFFFFFF17D0 : 2E01                		move.l	d1,d7
(1) 3027/FFFFFFFFFFFF17D2 : 4847                		swap	d7
(1) 3028/FFFFFFFFFFFF17D4 : 3D41 000E           		move.w	d1,cdstamp_scale(a6)
(1) 3029/FFFFFFFFFFFF17D8 : 3D47 0010           		move.w	d7,cdstamp_rot(a6)
(1) 3030/FFFFFFFFFFFF17DC :                     
(1) 3031/FFFFFFFFFFFF17DC : 3E3C 0080           		move.w	#$80,d7
(1) 3032/FFFFFFFFFFFF17E0 : 8E46                		or.w	d6,d7
(1) 3033/FFFFFFFFFFFF17E2 : 1C87                		move.b	d7,cdstamp_flags(a6)	; TODO: add the RPT bit ($01)
(1) 3034/FFFFFFFFFFFF17E4 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3035/FFFFFFFFFFFF17E8 : 023C 001E           		andi	#%11110,ccr
(1) 3036/FFFFFFFFFFFF17EC : 4E75                		rts
(1) 3037/FFFFFFFFFFFF17EE :                     ; Carry error
(1) 3038/FFFFFFFFFFFF17EE :                     vidMdMcd_CError:
(1) 3039/FFFFFFFFFFFF17EE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3040/FFFFFFFFFFFF17F2 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3041/FFFFFFFFFFFF17F6 : 4E75                		rts
(1) 3042/FFFFFFFFFFFF17F8 :                     
(1) 3043/FFFFFFFFFFFF17F8 :                     ; --------------------------------------------------------
(1) 3044/FFFFFFFFFFFF17F8 :                     
(1) 3045/FFFFFFFFFFFF17F8 :                     vidMdMcd_RdStmpSlot:
(1) 3046/FFFFFFFFFFFF17F8 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3047/FFFFFFFFFFFF17FC : 7E00                		moveq	#0,d7
(1) 3048/FFFFFFFFFFFF17FE : 3E00                		move.w	d0,d7
(1) 3049/FFFFFFFFFFFF1800 :                     ; 		cmpi.w	#MAX_MCDSTAMPS,d0
(1) 3050/FFFFFFFFFFFF1800 :                     ; 		bge.s	.got_full
(1) 3051/FFFFFFFFFFFF1800 : EB4F                		lsl.w	#5,d7			; FIXED SIZE $20
(1) 3052/FFFFFFFFFFFF1802 : DCC7                		adda	d7,a6
(1) 3053/FFFFFFFFFFFF1804 :                     ; .got_full:
(1) 3054/FFFFFFFFFFFF1804 : 4E75                		rts
(1) 3055/FFFFFFFFFFFF1806 :                     
(1) 3056/FFFFFFFFFFFF1806 :                     ; --------------------------------------------------------
(1) 3057/FFFFFFFFFFFF1806 :                     ; Video_MdMcd_StampMap
(1) 3058/FFFFFFFFFFFF1806 :                     ; --------------------------------------------------------
(1) 3059/FFFFFFFFFFFF1806 :                     
(1) 3060/FFFFFFFFFFFF1806 :                     Video_MdMcd_StampMap:
(1) 3061/FFFFFFFFFFFF1806 : 4E75                		rts
(1) 3062/FFFFFFFFFFFF1808 :                     
(1) 3063/FFFFFFFFFFFF1808 :                     ; ====================================================================
(1) 3064/FFFFFFFFFFFF1808 :                     
(1) 3066/FFFFFFFFFFFF1808 :                     
(1) 3067/FFFFFFFFFFFF1808 :                     ; ====================================================================
(1) 3068/FFFFFFFFFFFF1808 :                     ; ----------------------------------------------------------------
(1) 3069/FFFFFFFFFFFF1808 :                     ; Video routines for 32X
(1) 3070/FFFFFFFFFFFF1808 :                     ; ----------------------------------------------------------------
(1) 3071/FFFFFFFFFFFF1808 :                     
(1) 3073/FFFFFFFFFFFF1808 :                     
(1) 3074/FFFFFFFFFFFF1808 :                     ; --------------------------------------------------------
(1) 3075/FFFFFFFFFFFF1808 :                     ; Video_MdMars_SetSync
(1) 3076/FFFFFFFFFFFF1808 :                     ;
(1) 3077/FFFFFFFFFFFF1808 :                     ; Set a bit to wait for DREQ-RAM swap
(1) 3078/FFFFFFFFFFFF1808 :                     ; --------------------------------------------------------
(1) 3079/FFFFFFFFFFFF1808 :                     
(1) 3080/FFFFFFFFFFFF1808 :                     Video_MdMars_SetSync:
(1) 3081/FFFFFFFFFFFF1808 : 08F9 0004 00A1      		bset	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF180E : 512D             
(1) 3082/FFFFFFFFFFFF1810 : 4E75                		rts
(1) 3083/FFFFFFFFFFFF1812 :                     
(1) 3084/FFFFFFFFFFFF1812 :                     ; --------------------------------------------------------
(1) 3085/FFFFFFFFFFFF1812 :                     ; Video_MdMars_WaitSync
(1) 3086/FFFFFFFFFFFF1812 :                     ;
(1) 3087/FFFFFFFFFFFF1812 :                     ; Wait if the DREQ-RAM buffer is ready to be
(1) 3088/FFFFFFFFFFFF1812 :                     ; rewritten.
(1) 3089/FFFFFFFFFFFF1812 :                     ; --------------------------------------------------------
(1) 3090/FFFFFFFFFFFF1812 :                     
(1) 3091/FFFFFFFFFFFF1812 :                     Video_MdMars_WaitSync:
(1) 3092/FFFFFFFFFFFF1812 : 0839 0004 00A1      		btst	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF1818 : 512D             
(1) 3093/FFFFFFFFFFFF181A : 66F6                		bne.s	Video_MdMars_WaitSync
(1) 3094/FFFFFFFFFFFF181C : 4E75                		rts
(1) 3095/FFFFFFFFFFFF181E :                     
(1) 3096/FFFFFFFFFFFF181E :                     ; --------------------------------------------------------
(1) 3097/FFFFFFFFFFFF181E :                     ; Video_MdMars_WaitFrame
(1) 3098/FFFFFFFFFFFF181E :                     ; --------------------------------------------------------
(1) 3099/FFFFFFFFFFFF181E :                     
(1) 3100/FFFFFFFFFFFF181E :                     Video_MdMars_WaitFrame:
(1) 3101/FFFFFFFFFFFF181E : 61F2                		bsr	Video_MdMars_WaitSync
(1) 3102/FFFFFFFFFFFF1820 : 60E6                		bra	Video_MdMars_SetSync
(1) 3103/FFFFFFFFFFFF1822 :                     
(1) 3104/FFFFFFFFFFFF1822 :                     ; --------------------------------------------------------
(1) 3105/FFFFFFFFFFFF1822 :                     ; Video_MdMars_Cleanup
(1) 3106/FFFFFFFFFFFF1822 :                     ;
(1) 3107/FFFFFFFFFFFF1822 :                     ; Manual cleanup after sending current data to 32X
(1) 3108/FFFFFFFFFFFF1822 :                     ; --------------------------------------------------------
(1) 3109/FFFFFFFFFFFF1822 :                     
(1) 3110/FFFFFFFFFFFF1822 :                     Video_MdMars_Cleanup:
(1) 3112/FFFFFFFFFFFF1822 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Check current 32X video mode
(1) 3113/FFFFFFFFFFFF1828 : 0247 0007           		andi.w	#%00000111,d7
(1) 3114/FFFFFFFFFFFF182C : DE47                		add.w	d7,d7
(1) 3115/FFFFFFFFFFFF182E : 3E3B 7006           		move.w	.cleanlist(pc,d7.w),d7
(1) 3116/FFFFFFFFFFFF1832 : 4EFB 7002           		jmp	.cleanlist(pc,d7.w)
(1) 3117/FFFFFFFFFFFF1836 :                     ; --------------------------------------------------------
(1) 3118/FFFFFFFFFFFF1836 :                     .cleanlist:
(1) 3119/FFFFFFFFFFFF1836 : 0010                		dc.w .none-.cleanlist
(1) 3120/FFFFFFFFFFFF1838 : 0012                		dc.w .mode_2D-.cleanlist
(1) 3121/FFFFFFFFFFFF183A : 0046                		dc.w .mode_3D-.cleanlist
(1) 3122/FFFFFFFFFFFF183C : 0010                		dc.w .none-.cleanlist
(1) 3123/FFFFFFFFFFFF183E : 0010                		dc.w .none-.cleanlist
(1) 3124/FFFFFFFFFFFF1840 : 0010                		dc.w .none-.cleanlist
(1) 3125/FFFFFFFFFFFF1842 : 0010                		dc.w .none-.cleanlist
(1) 3126/FFFFFFFFFFFF1844 : 0010                		dc.w .none-.cleanlist
(1) 3127/FFFFFFFFFFFF1846 :                     ; --------------------------------------------------------
(1) 3128/FFFFFFFFFFFF1846 :                     .none:
(1) 3129/FFFFFFFFFFFF1846 : 4E75                		rts
(1) 3130/FFFFFFFFFFFF1848 :                     ; --------------------------------------------------------
(1) 3131/FFFFFFFFFFFF1848 :                     .mode_2D:
(1) 3132/FFFFFFFFFFFF1848 : 4DF8 D080           		lea	(RAM_MdMars_ScrlData).w,a6	; Clear the redraw bit here
(1) 3133/FFFFFFFFFFFF184C : 3E3C 01FF           		move.w	#((512/16)*(256/16))-1,d7
(1) 3134/FFFFFFFFFFFF1850 :                     .check_bit:
(1) 3135/FFFFFFFFFFFF1850 : 3C16                		move.w	(a6),d6
(1) 3136/FFFFFFFFFFFF1852 : 6A06                		bpl.s	.no_redraw
(1) 3137/FFFFFFFFFFFF1854 : 0246 7FFF           		andi.w	#$7FFF,d6
(1) 3138/FFFFFFFFFFFF1858 : 3C86                		move.w	d6,(a6)
(1) 3139/FFFFFFFFFFFF185A :                     .no_redraw:
(1) 3140/FFFFFFFFFFFF185A : DCFC 0002           		adda	#2,a6
(1) 3141/FFFFFFFFFFFF185E : 51CF FFF0           		dbf	d7,.check_bit
(1) 3142/FFFFFFFFFFFF1862 : 4DF8 D480           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3143/FFFFFFFFFFFF1866 : 7E1F                		moveq	#MAX_MARSSPR-1,d7
(1) 3144/FFFFFFFFFFFF1868 : 3C3C 0010           		move.w	#sspr_len,d6
(1) 3145/FFFFFFFFFFFF186C :                     .chk_spr:
(1) 3146/FFFFFFFFFFFF186C : 0816 0006           		btst	#6,sspr_flags(a6)
(1) 3147/FFFFFFFFFFFF1870 : 6702                		beq.s	.not_sprtemp
(1) 3148/FFFFFFFFFFFF1872 : 4216                		clr.b	sspr_flags(a6)
(1) 3149/FFFFFFFFFFFF1874 :                     .not_sprtemp:
(1) 3150/FFFFFFFFFFFF1874 : DCC6                		adda	d6,a6
(1) 3151/FFFFFFFFFFFF1876 : 51CF FFF4           		dbf	d7,.chk_spr
(1) 3152/FFFFFFFFFFFF187A :                     .no_freeze:
(1) 3153/FFFFFFFFFFFF187A : 4E75                		rts
(1) 3154/FFFFFFFFFFFF187C :                     
(1) 3155/FFFFFFFFFFFF187C :                     ; --------------------------------------------------------
(1) 3156/FFFFFFFFFFFF187C :                     
(1) 3157/FFFFFFFFFFFF187C :                     .mode_3D:
(1) 3158/FFFFFFFFFFFF187C : 4DF8 D080           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3159/FFFFFFFFFFFF1880 : 7E1F                		moveq	#MAX_MARSMSPR-1,d7
(1) 3160/FFFFFFFFFFFF1882 : 3C3C 0020           		move.w	#mspr_len,d6
(1) 3161/FFFFFFFFFFFF1886 :                     .chk_temp:
(1) 3162/FFFFFFFFFFFF1886 : 0816 0006           		btst	#6,mspr_flags(a6)
(1) 3163/FFFFFFFFFFFF188A : 6702                		beq.s	.not_temp
(1) 3164/FFFFFFFFFFFF188C : 4216                		clr.b	mspr_flags(a6)
(1) 3165/FFFFFFFFFFFF188E :                     .not_temp:
(1) 3166/FFFFFFFFFFFF188E : DCC6                		adda	d6,a6
(1) 3167/FFFFFFFFFFFF1890 : 51CF FFF4           		dbf	d7,.chk_temp
(1) 3168/FFFFFFFFFFFF1894 :                     .no_mfreeze:
(1) 3170/FFFFFFFFFFFF1894 : 4E75                		rts
(1) 3171/FFFFFFFFFFFF1896 :                     
(1) 3172/FFFFFFFFFFFF1896 :                     ; --------------------------------------------------------
(1) 3173/FFFFFFFFFFFF1896 :                     ; Video_MdMars_PalBackup
(1) 3174/FFFFFFFFFFFF1896 :                     ;
(1) 3175/FFFFFFFFFFFF1896 :                     ; Backup routine to load 256-color palette to SVDP
(1) 3176/FFFFFFFFFFFF1896 :                     ; when the SVDP permission is set to Genesis.
(1) 3177/FFFFFFFFFFFF1896 :                     ;
(1) 3178/FFFFFFFFFFFF1896 :                     ; Call this during VBlank ONLY.
(1) 3179/FFFFFFFFFFFF1896 :                     ; --------------------------------------------------------
(1) 3180/FFFFFFFFFFFF1896 :                     
(1) 3181/FFFFFFFFFFFF1896 :                     Video_MdMars_PalBackup:
(1) 3183/FFFFFFFFFFFF1896 : 1E39 00A1 5100      		move.b	(sysmars_reg).l,d7
(1) 3184/FFFFFFFFFFFF189C : 0807 0007           		btst	#7,d7
(1) 3185/FFFFFFFFFFFF18A0 : 6624                		bne.s	.svdp_locked
(1) 3186/FFFFFFFFFFFF18A2 : 4DF9 FFFF CE60      		lea	(RAM_MdMars_CommBuff+Dreq_Palette).l,a6
(1) 3187/FFFFFFFFFFFF18A8 : 4BF9 00A1 5200      		lea	(sysmars_reg+$100).l,a5
(1) 3188/FFFFFFFFFFFF18AE : 3E3C 001F           		move.w	#((256/2)/4)-1,d7
(1) 3189/FFFFFFFFFFFF18B2 :                     .copy_it:
(1) 3190/FFFFFFFFFFFF18B2 :                     	rept 4
(1) 3191/FFFFFFFFFFFF18B2 :                     		move.l	(a6)+,d6
(1) 3192/FFFFFFFFFFFF18B2 :                     		move.l	d6,(a5)+
(1) 3193/FFFFFFFFFFFF18B2 :                     	endm
(1) 3191/FFFFFFFFFFFF18B2 : 2C1E                		move.l	(a6)+,d6
(1) 3192/FFFFFFFFFFFF18B4 : 2AC6                		move.l	d6,(a5)+
(1) 3191/FFFFFFFFFFFF18B6 : 2C1E                		move.l	(a6)+,d6
(1) 3192/FFFFFFFFFFFF18B8 : 2AC6                		move.l	d6,(a5)+
(1) 3191/FFFFFFFFFFFF18BA : 2C1E                		move.l	(a6)+,d6
(1) 3192/FFFFFFFFFFFF18BC : 2AC6                		move.l	d6,(a5)+
(1) 3191/FFFFFFFFFFFF18BE : 2C1E                		move.l	(a6)+,d6
(1) 3192/FFFFFFFFFFFF18C0 : 2AC6                		move.l	d6,(a5)+
(1) 3194/FFFFFFFFFFFF18C2 : 51CF FFEE           		dbf	d7,.copy_it
(1) 3195/FFFFFFFFFFFF18C6 :                     .svdp_locked:
(1) 3197/FFFFFFFFFFFF18C6 : 4E75                		rts
(1) 3198/FFFFFFFFFFFF18C8 :                     
(1) 3199/FFFFFFFFFFFF18C8 :                     ; ====================================================================
(1) 3200/FFFFFFFFFFFF18C8 :                     ; --------------------------------------------------------
(1) 3201/FFFFFFFFFFFF18C8 :                     ; Subroutines
(1) 3202/FFFFFFFFFFFF18C8 :                     ; --------------------------------------------------------
(1) 3203/FFFFFFFFFFFF18C8 :                     
(1) 3204/FFFFFFFFFFFF18C8 :                     ; --------------------------------------------------------
(1) 3205/FFFFFFFFFFFF18C8 :                     ; Video_MdMars_VideoMode
(1) 3206/FFFFFFFFFFFF18C8 :                     ;
(1) 3207/FFFFFFFFFFFF18C8 :                     ; Set the graphics mode on the 32X.
(1) 3208/FFFFFFFFFFFF18C8 :                     ;
(1) 3209/FFFFFFFFFFFF18C8 :                     ; Input:
(1) 3210/FFFFFFFFFFFF18C8 :                     ; d0.w | Mode number $00-$02
(1) 3211/FFFFFFFFFFFF18C8 :                     ;        - Write $00 to disable 32X visuals and
(1) 3212/FFFFFFFFFFFF18C8 :                     ;          get SVDP control.
(1) 3213/FFFFFFFFFFFF18C8 :                     ;
(1) 3214/FFFFFFFFFFFF18C8 :                     ; Notes:
(1) 3215/FFFFFFFFFFFF18C8 :                     ; - Setting mode to 0 (blank) does not clear the
(1) 3216/FFFFFFFFFFFF18C8 :                     ;   FRAMEBUFFER(s)
(1) 3217/FFFFFFFFFFFF18C8 :                     ;
(1) 3218/FFFFFFFFFFFF18C8 :                     ; Uses:
(1) 3219/FFFFFFFFFFFF18C8 :                     ; d0
(1) 3220/FFFFFFFFFFFF18C8 :                     ; --------------------------------------------------------
(1) 3221/FFFFFFFFFFFF18C8 :                     
(1) 3222/FFFFFFFFFFFF18C8 :                     Video_MdMars_VideoOff:
(1) 3223/FFFFFFFFFFFF18C8 : 7000                		moveq	#0,d0
(1) 3224/FFFFFFFFFFFF18CA :                     
(1) 3225/FFFFFFFFFFFF18CA :                     Video_MdMars_VideoMode:
(1) 3226/FFFFFFFFFFFF18CA : 3F07                		move.w	d7,-(sp)
(1) 3228/FFFFFFFFFFFF18CC : 6100 FF3A           		bsr	Video_MdMars_SetSync
(1) 3229/FFFFFFFFFFFF18D0 :                     ; 		bsr	Video_MdMars_WaitSync
(1) 3230/FFFFFFFFFFFF18D0 :                     ; 		bsr	System_MdMars_Update
(1) 3231/FFFFFFFFFFFF18D0 :                     ; 		bsr	Video_MdMars_SetSync
(1) 3234/FFFFFFFFFFFF18D0 : 6100 FF40           		bsr	Video_MdMars_WaitSync
(1) 3235/FFFFFFFFFFFF18D4 : 6100 0CC4           		bsr	System_MdMars_Update
(1) 3236/FFFFFFFFFFFF18D8 : 6100 FF2E           		bsr	Video_MdMars_SetSync
(1) 3234/FFFFFFFFFFFF18DC : 6100 FF34           		bsr	Video_MdMars_WaitSync
(1) 3235/FFFFFFFFFFFF18E0 : 6100 0CB8           		bsr	System_MdMars_Update
(1) 3236/FFFFFFFFFFFF18E4 : 6100 FF22           		bsr	Video_MdMars_SetSync
(1) 3238/FFFFFFFFFFFF18E8 : 3E00                		move.w	d0,d7
(1) 3239/FFFFFFFFFFFF18EA : 0247 0007           		andi.w	#%00000111,d7			; Bits allowed
(1) 3240/FFFFFFFFFFFF18EE : 0047 00C0           		ori.w	#%11000000,d7			; Mode + Init bits
(1) 3241/FFFFFFFFFFFF18F2 : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+(comm12+1)).l
(1) 3242/FFFFFFFFFFFF18F8 : 1E39 00A1 512D      .wait_finish:	move.b	(sysmars_reg+(comm12+1)).l,d7
(1) 3243/FFFFFFFFFFFF18FE : 0247 00C0           		andi.w	#%11000000,d7
(1) 3244/FFFFFFFFFFFF1902 : 66F4                		bne.s	.wait_finish
(1) 3245/FFFFFFFFFFFF1904 :                     	rept 2
(1) 3246/FFFFFFFFFFFF1904 :                     		bsr	Video_MdMars_WaitSync
(1) 3247/FFFFFFFFFFFF1904 :                     		bsr	Video_MdMars_SetSync
(1) 3248/FFFFFFFFFFFF1904 :                     	endm
(1) 3246/FFFFFFFFFFFF1904 : 6100 FF0C           		bsr	Video_MdMars_WaitSync
(1) 3247/FFFFFFFFFFFF1908 : 6100 FEFE           		bsr	Video_MdMars_SetSync
(1) 3246/FFFFFFFFFFFF190C : 6100 FF04           		bsr	Video_MdMars_WaitSync
(1) 3247/FFFFFFFFFFFF1910 : 6100 FEF6           		bsr	Video_MdMars_SetSync
(1) 3249/FFFFFFFFFFFF1914 : 3E1F                		move.w	(sp)+,d7
(1) 3250/FFFFFFFFFFFF1916 : 4E75                		rts
(1) 3251/FFFFFFFFFFFF1918 :                     
(1) 3252/FFFFFFFFFFFF1918 :                     ; --------------------------------------------------------
(1) 3253/FFFFFFFFFFFF1918 :                     ; Video_MdMars_LoadVram
(1) 3254/FFFFFFFFFFFF1918 :                     ;
(1) 3255/FFFFFFFFFFFF1918 :                     ; Loads graphics data into a special section
(1) 3256/FFFFFFFFFFFF1918 :                     ; on the SDRAM area for the 2D and 3D modes.
(1) 3257/FFFFFFFFFFFF1918 :                     ;
(1) 3258/FFFFFFFFFFFF1918 :                     ; Input:
(1) 3259/FFFFFFFFFFFF1918 :                     ; a0   | Graphics data
(1) 3260/FFFFFFFFFFFF1918 :                     ; a1   | Output position
(1) 3261/FFFFFFFFFFFF1918 :                     ; d0.l | Size, 8-byte aligned
(1) 3262/FFFFFFFFFFFF1918 :                     ;
(1) 3263/FFFFFFFFFFFF1918 :                     ; Uses:
(1) 3264/FFFFFFFFFFFF1918 :                     ; ALL
(1) 3265/FFFFFFFFFFFF1918 :                     ;
(1) 3266/FFFFFFFFFFFF1918 :                     ; Notes:
(1) 3267/FFFFFFFFFFFF1918 :                     ; - Careful using this if the SH2 side is in the
(1) 3268/FFFFFFFFFFFF1918 :                     ;   middle of reading the graphics data.
(1) 3269/FFFFFFFFFFFF1918 :                     ; --------------------------------------------------------
(1) 3270/FFFFFFFFFFFF1918 :                     
(1) 3271/FFFFFFFFFFFF1918 :                     Video_MdMars_LoadVram:
(1) 3272/FFFFFFFFFFFF1918 : 48E7 81C0           		movem.l	d0/d7/a0-a1,-(sp)
(1) 3273/FFFFFFFFFFFF191C : 2E09                		move.l	a1,d7
(1) 3274/FFFFFFFFFFFF191E : DE80                		add.l	d0,d7
(1) 3275/FFFFFFFFFFFF1920 : BEBC 0001 8000      		cmp.l	#MAX_MarsVram,d7
(1) 3276/FFFFFFFFFFFF1926 : 6F0A                		ble.s	.good_sz
(1) 3277/FFFFFFFFFFFF1928 : 9EBC 0001 8000      		sub.l	#MAX_MarsVram,d7
(1) 3278/FFFFFFFFFFFF192E : 6B0C                		bmi.s	.got_zero
(1) 3279/FFFFFFFFFFFF1930 : 2007                		move.l	d7,d0
(1) 3280/FFFFFFFFFFFF1932 :                     .good_sz:
(1) 3281/FFFFFFFFFFFF1932 : D3FC 0600 FB10      		addi.l	#RAM_Mars_VramData,a1	; *** EXTERNAL LABEL ***
(1) 3282/FFFFFFFFFFFF1938 : 6100 0C20           		bsr	System_MdMars_SendData
(1) 3283/FFFFFFFFFFFF193C :                     .got_zero:
(1) 3284/FFFFFFFFFFFF193C : 4CDF 0381           		movem.l	(sp)+,d0/d7/a0-a1
(1) 3285/FFFFFFFFFFFF1940 : 4E75                		rts
(1) 3286/FFFFFFFFFFFF1942 :                     
(1) 3287/FFFFFFFFFFFF1942 :                     ; --------------------------------------------------------
(1) 3288/FFFFFFFFFFFF1942 :                     ; Video_MdMars_LoadMap
(1) 3289/FFFFFFFFFFFF1942 :                     ;
(1) 3290/FFFFFFFFFFFF1942 :                     ; Loads map data for 32X's 2D-mode
(1) 3291/FFFFFFFFFFFF1942 :                     ;
(1) 3292/FFFFFFFFFFFF1942 :                     ; Input:
(1) 3293/FFFFFFFFFFFF1942 :                     ; a0   | Map data
(1) 3294/FFFFFFFFFFFF1942 :                     ; a1   | Graphics start location
(1) 3295/FFFFFFFFFFFF1942 :                     ; d0.w | X start position
(1) 3296/FFFFFFFFFFFF1942 :                     ; d1.w | Y start position
(1) 3297/FFFFFFFFFFFF1942 :                     ; d2.w | Map width in blocks (width/16)
(1) 3298/FFFFFFFFFFFF1942 :                     ; d3.w | Map height in blocks (height/16)
(1) 3299/FFFFFFFFFFFF1942 :                     ; d4.w | Starting color index *LIMITED*
(1) 3300/FFFFFFFFFFFF1942 :                     ;
(1) 3301/FFFFFFFFFFFF1942 :                     ; Notes:
(1) 3302/FFFFFFFFFFFF1942 :                     ; - To load the Graphics use Video_MdMars_LoadVram
(1) 3303/FFFFFFFFFFFF1942 :                     ;   a1 only sets the location in SDRAM
(1) 3304/FFFFFFFFFFFF1942 :                     ; --------------------------------------------------------
(1) 3305/FFFFFFFFFFFF1942 :                     
(1) 3306/FFFFFFFFFFFF1942 :                     ; CURRENT TILE FORMAT:
(1) 3307/FFFFFFFFFFFF1942 :                     ; %Rppp pppt tttt tttt
(1) 3308/FFFFFFFFFFFF1942 :                     ;
(1) 3309/FFFFFFFFFFFF1942 :                     ; R - Reload block, cleared here later.
(1) 3310/FFFFFFFFFFFF1942 :                     ; p - Palette index, limited by 4 color-sizes
(1) 3311/FFFFFFFFFFFF1942 :                     ; t - 16x16 block number, 0 is blank
(1) 3312/FFFFFFFFFFFF1942 :                     
(1) 3313/FFFFFFFFFFFF1942 :                     Video_MdMars_LoadMap:
(1) 3314/FFFFFFFFFFFF1942 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 3315/FFFFFFFFFFFF1946 : 4DF8 D060           		lea	(RAM_MdMars_ScrlSett).w,a6
(1) 3316/FFFFFFFFFFFF194A : 4BF8 D080           		lea	(RAM_MdMars_ScrlData).w,a5
(1) 3317/FFFFFFFFFFFF194E : 2D49 0008           		move.l	a1,sscrl_vram(a6)
(1) 3318/FFFFFFFFFFFF1952 : 7A00                		moveq	#0,d5
(1) 3319/FFFFFFFFFFFF1954 :                     
(1) 3320/FFFFFFFFFFFF1954 :                     	; d4 - $7Exx
(1) 3321/FFFFFFFFFFFF1954 :                     	; d5 - USED
(1) 3322/FFFFFFFFFFFF1954 :                     	; d6 - free | Y pos copy
(1) 3323/FFFFFFFFFFFF1954 :                     	; d7 - Y loop
(1) 3324/FFFFFFFFFFFF1954 : 0244 00FC           		andi.w	#$FC,d4		; <-- d4
(1) 3325/FFFFFFFFFFFF1958 : EF4C                		lsl.w	#7,d4
(1) 3326/FFFFFFFFFFFF195A : 2648                		move.l	a0,a3
(1) 3327/FFFFFFFFFFFF195C : 3C01                		move.w	d1,d6
(1) 3328/FFFFFFFFFFFF195E : 3E03                		move.w	d3,d7
(1) 3329/FFFFFFFFFFFF1960 : 5347                		subq.w	#1,d7
(1) 3330/FFFFFFFFFFFF1962 :                     .copy_y:
(1) 3331/FFFFFFFFFFFF1962 : 284D                		move.l	a5,a4
(1) 3332/FFFFFFFFFFFF1964 : 7A00                		moveq	#0,d5
(1) 3333/FFFFFFFFFFFF1966 : 3A06                		move.w	d6,d5
(1) 3334/FFFFFFFFFFFF1968 : ED4D                		lsl.w	#6,d5
(1) 3335/FFFFFFFFFFFF196A : D9C5                		add.l	d5,a4
(1) 3336/FFFFFFFFFFFF196C : 3A00                		move.w	d0,d5
(1) 3337/FFFFFFFFFFFF196E : DA45                		add.w	d5,d5
(1) 3338/FFFFFFFFFFFF1970 : 4847                		swap	d7
(1) 3339/FFFFFFFFFFFF1972 : 4846                		swap	d6
(1) 3340/FFFFFFFFFFFF1974 : 3E02                		move.w	d2,d7
(1) 3341/FFFFFFFFFFFF1976 : 5347                		subq.w	#1,d7
(1) 3342/FFFFFFFFFFFF1978 :                     .copy_x:
(1) 3343/FFFFFFFFFFFF1978 : 3C1B                		move.w	(a3)+,d6
(1) 3344/FFFFFFFFFFFF197A : DC44                		add.w	d4,d6
(1) 3345/FFFFFFFFFFFF197C : 8C7C 8000           		or.w	#$8000,d6
(1) 3346/FFFFFFFFFFFF1980 : 3986 5000           		move.w	d6,(a4,d5.w)
(1) 3347/FFFFFFFFFFFF1984 : 5445                		addq.w	#1*2,d5
(1) 3348/FFFFFFFFFFFF1986 : 0245 003E           		andi.w	#((512/16)-1)*2,d5
(1) 3349/FFFFFFFFFFFF198A : 51CF FFEC           		dbf	d7,.copy_x
(1) 3350/FFFFFFFFFFFF198E : 4846                		swap	d6
(1) 3351/FFFFFFFFFFFF1990 : 4847                		swap	d7
(1) 3352/FFFFFFFFFFFF1992 : 5246                		addq.w	#1,d6
(1) 3353/FFFFFFFFFFFF1994 : 0246 000F           		andi.w	#((256/16)-1),d6
(1) 3354/FFFFFFFFFFFF1998 : 51CF FFC8           		dbf	d7,.copy_y
(1) 3355/FFFFFFFFFFFF199C : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 3356/FFFFFFFFFFFF19A0 : 4E75                		rts
(1) 3357/FFFFFFFFFFFF19A2 :                     
(1) 3358/FFFFFFFFFFFF19A2 :                     ; ====================================================================
(1) 3359/FFFFFFFFFFFF19A2 :                     ; --------------------------------------------------------
(1) 3360/FFFFFFFFFFFF19A2 :                     ; Video_MdMars_SetSpr2D, Video_MdMars_MakeSpr2D
(1) 3361/FFFFFFFFFFFF19A2 :                     ;
(1) 3362/FFFFFFFFFFFF19A2 :                     ; Set or Make a Super Sprite
(1) 3363/FFFFFFFFFFFF19A2 :                     ;
(1) 3364/FFFFFFFFFFFF19A2 :                     ; Input:
(1) 3365/FFFFFFFFFFFF19A2 :                     ; a0   | Index slot (_SetSpr2D ONLY)
(1) 3366/FFFFFFFFFFFF19A2 :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3367/FFFFFFFFFFFF19A2 :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3368/FFFFFFFFFFFF19A2 :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3369/FFFFFFFFFFFF19A2 :                     ; d2.l | Width/Height: splitw(width,height)
(1) 3370/FFFFFFFFFFFF19A2 :                     ; d3.l | Texture full_width+index: splitw(width,index)
(1) 3371/FFFFFFFFFFFF19A2 :                     ; d4.l | Frame X/Y: splitw(x_frame,y_frame)
(1) 3372/FFFFFFFFFFFF19A2 :                     ;
(1) 3373/FFFFFFFFFFFF19A2 :                     ; Returns:
(1) 3374/FFFFFFFFFFFF19A2 :                     ; bcc | OK
(1) 3375/FFFFFFFFFFFF19A2 :                     ; bcs | Ran out of Super Sprites
(1) 3376/FFFFFFFFFFFF19A2 :                     ; --------------------------------------------------------
(1) 3377/FFFFFFFFFFFF19A2 :                     
(1) 3378/FFFFFFFFFFFF19A2 :                     Video_MdMars_SetSpr2D:
(1) 3379/FFFFFFFFFFFF19A2 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3380/FFFFFFFFFFFF19A6 : 2E08                		move.l	a0,d7
(1) 3381/FFFFFFFFFFFF19A8 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3382/FFFFFFFFFFFF19AA : 601E                		bra	vidMdMars_MkSpr2D
(1) 3383/FFFFFFFFFFFF19AC :                     
(1) 3384/FFFFFFFFFFFF19AC :                     Video_MdMars_MakeSpr2D:
(1) 3385/FFFFFFFFFFFF19AC : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3386/FFFFFFFFFFFF19B0 : 7E00                		moveq	#0,d7
(1) 3387/FFFFFFFFFFFF19B2 : 4DF8 D480           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3388/FFFFFFFFFFFF19B6 : 7C1F                		moveq	#MAX_MARSSPR-1,d6
(1) 3389/FFFFFFFFFFFF19B8 :                     .chk_free:
(1) 3390/FFFFFFFFFFFF19B8 : 4A16                		tst.b	sspr_flags(a6)
(1) 3391/FFFFFFFFFFFF19BA : 670C                		beq.s	.mk_spr
(1) 3392/FFFFFFFFFFFF19BC : 5247                		addq.w	#1,d7
(1) 3393/FFFFFFFFFFFF19BE : DCFC 0010           		adda	#sspr_len,a6
(1) 3394/FFFFFFFFFFFF19C2 : 51CE FFF4           		dbf	d6,.chk_free
(1) 3395/FFFFFFFFFFFF19C6 : 606C                		bra.s	vidMdMars_CError
(1) 3396/FFFFFFFFFFFF19C8 :                     .mk_spr:
(1) 3397/FFFFFFFFFFFF19C8 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3398/FFFFFFFFFFFF19CA :                     
(1) 3399/FFFFFFFFFFFF19CA :                     vidMdMars_MkSpr2D:
(1) 3400/FFFFFFFFFFFF19CA : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3401/FFFFFFFFFFFF19D0 : BE7C 0020           		cmp.w	#MAX_MARSSPR,d7
(1) 3402/FFFFFFFFFFFF19D4 : 6C5E                		bge.s	vidMdMars_CError
(1) 3403/FFFFFFFFFFFF19D6 :                     ; 		mulu.w	#sspr_len,d7
(1) 3404/FFFFFFFFFFFF19D6 : E98F                		lsl.l	#4,d7			; FIXED SIZE
(1) 3405/FFFFFFFFFFFF19D8 : 0687 FFFF D480      		addi.l	#RAM_MdMars_SuperSpr,d7
(1) 3406/FFFFFFFFFFFF19DE : 2C47                		move.l	d7,a6
(1) 3407/FFFFFFFFFFFF19E0 : 2D49 000C           		move.l	a1,sspr_vram(a6)
(1) 3408/FFFFFFFFFFFF19E4 : 2E00                		move.l	d0,d7
(1) 3409/FFFFFFFFFFFF19E6 : 4847                		swap	d7
(1) 3410/FFFFFFFFFFFF19E8 : 3D47 0008           		move.w	d7,sspr_x_pos(a6)
(1) 3411/FFFFFFFFFFFF19EC : 3D40 000A           		move.w	d0,sspr_y_pos(a6)
(1) 3412/FFFFFFFFFFFF19F0 : 2E02                		move.l	d2,d7
(1) 3413/FFFFFFFFFFFF19F2 : E64F                		lsr.w	#3,d7
(1) 3414/FFFFFFFFFFFF19F4 : 5347                		subq.w	#1,d7
(1) 3415/FFFFFFFFFFFF19F6 : 1D47 0005           		move.b	d7,sspr_size+1(a6)
(1) 3416/FFFFFFFFFFFF19FA : 4847                		swap	d7
(1) 3417/FFFFFFFFFFFF19FC : E64F                		lsr.w	#3,d7
(1) 3418/FFFFFFFFFFFF19FE : 5347                		subq.w	#1,d7
(1) 3419/FFFFFFFFFFFF1A00 : 1D47 0004           		move.b	d7,sspr_size(a6)
(1) 3420/FFFFFFFFFFFF1A04 : 3E03                		move.w	d3,d7
(1) 3421/FFFFFFFFFFFF1A06 : 0247 00FF           		andi.w	#$FF,d7
(1) 3422/FFFFFFFFFFFF1A0A : 3D47 0006           		move.w	d7,sspr_indx(a6)
(1) 3423/FFFFFFFFFFFF1A0E : 2E01                		move.l	d1,d7
(1) 3424/FFFFFFFFFFFF1A10 : 4847                		swap	d7
(1) 3425/FFFFFFFFFFFF1A12 : 4A47                		tst.w	d7
(1) 3426/FFFFFFFFFFFF1A14 : 0247 0003           		andi.w	#%00000011,d7
(1) 3427/FFFFFFFFFFFF1A18 : 8E3C 0080           		or.b	#$80,d7
(1) 3428/FFFFFFFFFFFF1A1C : 8E06                		or.b	d6,d7
(1) 3429/FFFFFFFFFFFF1A1E : 1C87                		move.b	d7,sspr_flags(a6)
(1) 3430/FFFFFFFFFFFF1A20 : 3E04                		move.w	d4,d7
(1) 3431/FFFFFFFFFFFF1A22 : 0247 00FF           		andi.w	#$FF,d7
(1) 3432/FFFFFFFFFFFF1A26 : 3D47 0002           		move.w	d7,sspr_frame(a6)
(1) 3433/FFFFFFFFFFFF1A2A :                     .on_freeze:
(1) 3434/FFFFFFFFFFFF1A2A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3435/FFFFFFFFFFFF1A2E : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3436/FFFFFFFFFFFF1A32 : 4E75                		rts
(1) 3437/FFFFFFFFFFFF1A34 :                     ; Carry error
(1) 3438/FFFFFFFFFFFF1A34 :                     vidMdMars_CError:
(1) 3439/FFFFFFFFFFFF1A34 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3440/FFFFFFFFFFFF1A38 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3441/FFFFFFFFFFFF1A3C : 4E75                		rts
(1) 3442/FFFFFFFFFFFF1A3E :                     
(1) 3443/FFFFFFFFFFFF1A3E :                     ; --------------------------------------------------------
(1) 3444/FFFFFFFFFFFF1A3E :                     ; Video_MdMars_SetSpr3D, Video_MdMars_MakeSpr3D
(1) 3445/FFFFFFFFFFFF1A3E :                     ;
(1) 3446/FFFFFFFFFFFF1A3E :                     ; Set or Make a 3D Sprite
(1) 3447/FFFFFFFFFFFF1A3E :                     ;
(1) 3448/FFFFFFFFFFFF1A3E :                     ; Input:
(1) 3449/FFFFFFFFFFFF1A3E :                     ; a0   | Index slot (_SetSpr3D ONLY)
(1) 3450/FFFFFFFFFFFF1A3E :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3451/FFFFFFFFFFFF1A3E :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3452/FFFFFFFFFFFF1A3E :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3453/FFFFFFFFFFFF1A3E :                     ; d2.l | Width/Height: splitw(width,height)
(1) 3454/FFFFFFFFFFFF1A3E :                     ; d3.l | Texture full_width+index: splitw(width,index)
(1) 3455/FFFFFFFFFFFF1A3E :                     ; d4.l | Frame X/Y: splitw(x_frame,y_frame)
(1) 3456/FFFFFFFFFFFF1A3E :                     ;
(1) 3457/FFFFFFFFFFFF1A3E :                     ;        flags: %000000ff
(1) 3458/FFFFFFFFFFFF1A3E :                     ;        %00 - Normal 3D screen sprite
(1) 3459/FFFFFFFFFFFF1A3E :                     ;        %01 - Sprite is inside the 3D Field
(1) 3460/FFFFFFFFFFFF1A3E :                     ;        %11 - Same as %01, always face to the front
(1) 3461/FFFFFFFFFFFF1A3E :                     ;              of the camera
(1) 3462/FFFFFFFFFFFF1A3E :                     ;
(1) 3463/FFFFFFFFFFFF1A3E :                     ; Returns:
(1) 3464/FFFFFFFFFFFF1A3E :                     ; bcc | OK
(1) 3465/FFFFFFFFFFFF1A3E :                     ; bcs | Ran out of slots
(1) 3466/FFFFFFFFFFFF1A3E :                     ; --------------------------------------------------------
(1) 3467/FFFFFFFFFFFF1A3E :                     
(1) 3468/FFFFFFFFFFFF1A3E :                     Video_MdMars_SetSpr3D:
(1) 3469/FFFFFFFFFFFF1A3E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3470/FFFFFFFFFFFF1A42 : 2E08                		move.l	a0,d7
(1) 3471/FFFFFFFFFFFF1A44 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3472/FFFFFFFFFFFF1A46 : 601E                		bra	vidMdMars_MkSpr3D
(1) 3473/FFFFFFFFFFFF1A48 :                     
(1) 3474/FFFFFFFFFFFF1A48 :                     Video_MdMars_MakeSpr3D:
(1) 3475/FFFFFFFFFFFF1A48 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3476/FFFFFFFFFFFF1A4C :                     
(1) 3477/FFFFFFFFFFFF1A4C : 7E00                		moveq	#0,d7
(1) 3478/FFFFFFFFFFFF1A4E : 4DF8 D080           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3479/FFFFFFFFFFFF1A52 : 7C1F                		moveq	#MAX_MARSMSPR-1,d6
(1) 3480/FFFFFFFFFFFF1A54 :                     .chk_free:
(1) 3481/FFFFFFFFFFFF1A54 : 4A16                		tst.b	mspr_flags(a6)
(1) 3482/FFFFFFFFFFFF1A56 : 670C                		beq.s	.mk_spr
(1) 3483/FFFFFFFFFFFF1A58 : 5247                		addq.w	#1,d7
(1) 3484/FFFFFFFFFFFF1A5A : DCFC 0020           		adda	#mspr_len,a6
(1) 3485/FFFFFFFFFFFF1A5E : 51CE FFF4           		dbf	d6,.chk_free
(1) 3486/FFFFFFFFFFFF1A62 : 60D0                		bra.s	vidMdMars_CError
(1) 3487/FFFFFFFFFFFF1A64 :                     .mk_spr:
(1) 3488/FFFFFFFFFFFF1A64 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3489/FFFFFFFFFFFF1A66 :                     
(1) 3490/FFFFFFFFFFFF1A66 :                     vidMdMars_MkSpr3D:
(1) 3491/FFFFFFFFFFFF1A66 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3492/FFFFFFFFFFFF1A6C : BE7C 0020           		cmp.w	#MAX_MARSMSPR,d7
(1) 3493/FFFFFFFFFFFF1A70 : 6CC2                		bge.s	vidMdMars_CError
(1) 3494/FFFFFFFFFFFF1A72 :                     ; 		mulu.w	#mspr_len,d7
(1) 3495/FFFFFFFFFFFF1A72 : EB8F                		lsl.l	#5,d7			; FIXED SIZE
(1) 3496/FFFFFFFFFFFF1A74 : 0687 FFFF D080      		addi.l	#RAM_MdMars_MSprites,d7
(1) 3497/FFFFFFFFFFFF1A7A : 2C47                		move.l	d7,a6
(1) 3498/FFFFFFFFFFFF1A7C : 2D49 001C           		move.l	a1,mspr_vram(a6)	; a1
(1) 3499/FFFFFFFFFFFF1A80 : 2E00                		move.l	d0,d7
(1) 3500/FFFFFFFFFFFF1A82 : 4847                		swap	d7
(1) 3501/FFFFFFFFFFFF1A84 : 3D47 0010           		move.w	d7,mspr_x_pos(a6)
(1) 3502/FFFFFFFFFFFF1A88 : 3D40 0012           		move.w	d0,mspr_y_pos(a6)
(1) 3503/FFFFFFFFFFFF1A8C : 2E01                		move.l	d1,d7
(1) 3504/FFFFFFFFFFFF1A8E : 4847                		swap	d7
(1) 3505/FFFFFFFFFFFF1A90 : 0247 0003           		andi.w	#%11,d7
(1) 3506/FFFFFFFFFFFF1A94 : 8E7C 0080           		or.w	#$80,d7
(1) 3507/FFFFFFFFFFFF1A98 : 8E46                		or.w	d6,d7
(1) 3508/FFFFFFFFFFFF1A9A : 1C87                		move.b	d7,mspr_flags(a6)
(1) 3509/FFFFFFFFFFFF1A9C : 3D41 0014           		move.w	d1,mspr_z_pos(a6)
(1) 3510/FFFFFFFFFFFF1AA0 : 2E02                		move.l	d2,d7
(1) 3511/FFFFFFFFFFFF1AA2 : 4847                		swap	d7
(1) 3512/FFFFFFFFFFFF1AA4 : 1D47 0002           		move.b	d7,mspr_size_w(a6)
(1) 3513/FFFFFFFFFFFF1AA8 : 1D42 0003           		move.b	d2,mspr_size_h(a6)
(1) 3514/FFFFFFFFFFFF1AAC : 1D47 0004           		move.b	d7,mspr_src_w(a6)
(1) 3515/FFFFFFFFFFFF1AB0 : 1D42 0005           		move.b	d2,mspr_src_h(a6)
(1) 3516/FFFFFFFFFFFF1AB4 : 2E03                		move.l	d3,d7
(1) 3517/FFFFFFFFFFFF1AB6 : 4847                		swap	d7
(1) 3518/FFFFFFFFFFFF1AB8 : 1D47 0006           		move.b	d7,mspr_srcwdth(a6)
(1) 3519/FFFFFFFFFFFF1ABC : 1D43 0001           		move.b	d3,mspr_indx(a6)
(1) 3520/FFFFFFFFFFFF1AC0 : 2E04                		move.l	d4,d7
(1) 3521/FFFFFFFFFFFF1AC2 : 4847                		swap	d7
(1) 3522/FFFFFFFFFFFF1AC4 : 1D47 0007           		move.b	d7,mspr_frame_x(a6)
(1) 3523/FFFFFFFFFFFF1AC8 : 1D44 0008           		move.b	d4,mspr_frame_y(a6)
(1) 3524/FFFFFFFFFFFF1ACC : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3525/FFFFFFFFFFFF1AD0 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3526/FFFFFFFFFFFF1AD4 : 4E75                		rts
(1) 3527/FFFFFFFFFFFF1AD6 :                     
(1) 3528/FFFFFFFFFFFF1AD6 :                     ; ====================================================================
(1) 3529/FFFFFFFFFFFF1AD6 :                     ; ----------------------------------------------------------------
(1) 3530/FFFFFFFFFFFF1AD6 :                     ; SVDP Palette
(1) 3531/FFFFFFFFFFFF1AD6 :                     ; ----------------------------------------------------------------
(1) 3532/FFFFFFFFFFFF1AD6 :                     
(1) 3533/FFFFFFFFFFFF1AD6 :                     ; --------------------------------------------------------
(1) 3534/FFFFFFFFFFFF1AD6 :                     ; Video_MdMars_RunFade
(1) 3535/FFFFFFFFFFFF1AD6 :                     ;
(1) 3536/FFFFFFFFFFFF1AD6 :                     ; Process 1 step of palette fading, SVDP Palette.
(1) 3537/FFFFFFFFFFFF1AD6 :                     ;
(1) 3538/FFFFFFFFFFFF1AD6 :                     ; Use Video_WaitFade to wait for changes.
(1) 3539/FFFFFFFFFFFF1AD6 :                     ; --------------------------------------------------------
(1) 3540/FFFFFFFFFFFF1AD6 :                     
(1) 3541/FFFFFFFFFFFF1AD6 :                     Video_MdMars_RunFade:
(1) 3543/FFFFFFFFFFFF1AD6 : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 3544/FFFFFFFFFFFF1ADA :                     .next_req:
(1) 3545/FFFFFFFFFFFF1ADA : 1016                		move.b	palfd_req(a6),d0
(1) 3546/FFFFFFFFFFFF1ADC : 6744                		beq.s	.no_req
(1) 3547/FFFFFFFFFFFF1ADE : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 3548/FFFFFFFFFFFF1AE2 : 6A38                		bpl.s	.busy_timer
(1) 3549/FFFFFFFFFFFF1AE4 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 3550/FFFFFFFFFFFF1AEA : 4BF8 CE60           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a5
(1) 3551/FFFFFFFFFFFF1AEE : 49F8 CC20           		lea	(RAM_MdMars_PalFd).w,a4
(1) 3552/FFFFFFFFFFFF1AF2 : 7E00                		moveq	#0,d7
(1) 3553/FFFFFFFFFFFF1AF4 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 3554/FFFFFFFFFFFF1AF8 : DE47                		add.w	d7,d7
(1) 3555/FFFFFFFFFFFF1AFA : DAC7                		adda	d7,a5
(1) 3556/FFFFFFFFFFFF1AFC : D8C7                		adda	d7,a4
(1) 3557/FFFFFFFFFFFF1AFE : 7E00                		moveq	#0,d7
(1) 3558/FFFFFFFFFFFF1B00 : 7C00                		moveq	#0,d6
(1) 3559/FFFFFFFFFFFF1B02 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 3560/FFFFFFFFFFFF1B06 : 6714                		beq.s	.busy_timer
(1) 3561/FFFFFFFFFFFF1B08 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 3562/FFFFFFFFFFFF1B0C : 5347                		subq.w	#1,d7
(1) 3563/FFFFFFFFFFFF1B0E : 0240 00FF           		andi.w	#$FF,d0
(1) 3564/FFFFFFFFFFFF1B12 : D040                		add.w	d0,d0
(1) 3565/FFFFFFFFFFFF1B14 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 3566/FFFFFFFFFFFF1B18 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 3567/FFFFFFFFFFFF1B1C :                     .busy_timer:
(1) 3568/FFFFFFFFFFFF1B1C : DCFC 0008           		adda	#palfd_len,a6
(1) 3569/FFFFFFFFFFFF1B20 : 60B8                		bra.s	.next_req
(1) 3570/FFFFFFFFFFFF1B22 :                     .no_req:
(1) 3571/FFFFFFFFFFFF1B22 : 4278 CC1E           		clr.w	(RAM_MdMars_IndxPalFd).w
(1) 3573/FFFFFFFFFFFF1B26 : 4E75                		rts
(1) 3574/FFFFFFFFFFFF1B28 :                     
(1) 3575/FFFFFFFFFFFF1B28 :                     ; ------------------------------------------------
(1) 3576/FFFFFFFFFFFF1B28 :                     
(1) 3577/FFFFFFFFFFFF1B28 :                     .fade_list:
(1) 3578/FFFFFFFFFFFF1B28 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 3579/FFFFFFFFFFFF1B2A : 0014                		dc.w .fade_out-.fade_list
(1) 3580/FFFFFFFFFFFF1B2C : 0080                		dc.w .fade_in-.fade_list
(1) 3581/FFFFFFFFFFFF1B2E : 0010                		dc.w .nothing-.fade_list
(1) 3582/FFFFFFFFFFFF1B30 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 3583/FFFFFFFFFFFF1B32 : 0010                		dc.w .nothing-.fade_list
(1) 3584/FFFFFFFFFFFF1B34 : 0010                		dc.w .nothing-.fade_list
(1) 3585/FFFFFFFFFFFF1B36 : 0010                		dc.w .nothing-.fade_list
(1) 3586/FFFFFFFFFFFF1B38 :                     
(1) 3587/FFFFFFFFFFFF1B38 :                     ; ----------------------------------------------------
(1) 3588/FFFFFFFFFFFF1B38 :                     ; Fade request $00: Null/exit.
(1) 3589/FFFFFFFFFFFF1B38 :                     ; ----------------------------------------------------
(1) 3590/FFFFFFFFFFFF1B38 :                     
(1) 3591/FFFFFFFFFFFF1B38 :                     .nothing:
(1) 3592/FFFFFFFFFFFF1B38 : 4216                		clr.b	palfd_req(a6)
(1) 3593/FFFFFFFFFFFF1B3A : 4E75                		rts
(1) 3594/FFFFFFFFFFFF1B3C :                     
(1) 3595/FFFFFFFFFFFF1B3C :                     ; ----------------------------------------------------
(1) 3596/FFFFFFFFFFFF1B3C :                     ; Fade request $01: fade-out to black
(1) 3597/FFFFFFFFFFFF1B3C :                     ; Quick.
(1) 3598/FFFFFFFFFFFF1B3C :                     ;
(1) 3599/FFFFFFFFFFFF1B3C :                     ; d7 - Num colors
(1) 3600/FFFFFFFFFFFF1B3C :                     ; d6 - Increment*2
(1) 3601/FFFFFFFFFFFF1B3C :                     ; ----------------------------------------------------
(1) 3602/FFFFFFFFFFFF1B3C :                     
(1) 3603/FFFFFFFFFFFF1B3C :                     .fade_out:
(1) 3604/FFFFFFFFFFFF1B3C : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3605/FFFFFFFFFFFF1B40 : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3606/FFFFFFFFFFFF1B44 : 383C FFE0           		move.w	#%1111111111100000,d4	; d4 - Others filter + extra
(1) 3607/FFFFFFFFFFFF1B48 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 3608/FFFFFFFFFFFF1B4A :                     .next_color:
(1) 3609/FFFFFFFFFFFF1B4A : 3015                		move.w	(a5),d0
(1) 3610/FFFFFFFFFFFF1B4C :                     	rept 3
(1) 3611/FFFFFFFFFFFF1B4C :                     		move.w	d0,d1
(1) 3612/FFFFFFFFFFFF1B4C :                     		and.w	d5,d1		; Filter TARGET
(1) 3613/FFFFFFFFFFFF1B4C :                     		beq.s	.no_chng
(1) 3614/FFFFFFFFFFFF1B4C :                     		and.w	d4,d0		; Filter OTHERS
(1) 3615/FFFFFFFFFFFF1B4C :                     		sub.w	d6,d1
(1) 3616/FFFFFFFFFFFF1B4C :                     		bpl.s	.too_blck
(1) 3617/FFFFFFFFFFFF1B4C :                     		clr.w	d1
(1) 3618/FFFFFFFFFFFF1B4C :                     .too_blck:
(1) 3619/FFFFFFFFFFFF1B4C :                     		addq.w	#1,d3		; Color changed
(1) 3620/FFFFFFFFFFFF1B4C :                     .no_chng:
(1) 3621/FFFFFFFFFFFF1B4C :                     		or.w	d1,d0
(1) 3622/FFFFFFFFFFFF1B4C :                     		rol.w	#5,d6		; next << color
(1) 3623/FFFFFFFFFFFF1B4C :                     		rol.w	#5,d5
(1) 3624/FFFFFFFFFFFF1B4C :                     		rol.w	#5,d4
(1) 3625/FFFFFFFFFFFF1B4C :                     	endm
(1) 3611/FFFFFFFFFFFF1B4C : 3200                		move.w	d0,d1
(1) 3612/FFFFFFFFFFFF1B4E : C245                		and.w	d5,d1		; Filter TARGET
(1) 3613/FFFFFFFFFFFF1B50 : 670A                		beq.s	.no_chng
(1) 3614/FFFFFFFFFFFF1B52 : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3615/FFFFFFFFFFFF1B54 : 9246                		sub.w	d6,d1
(1) 3616/FFFFFFFFFFFF1B56 : 6A02                		bpl.s	.too_blck
(1) 3617/FFFFFFFFFFFF1B58 : 4241                		clr.w	d1
(1) 3618/FFFFFFFFFFFF1B5A :                     .too_blck:
(1) 3619/FFFFFFFFFFFF1B5A : 5243                		addq.w	#1,d3		; Color changed
(1) 3620/FFFFFFFFFFFF1B5C :                     .no_chng:
(1) 3621/FFFFFFFFFFFF1B5C : 8041                		or.w	d1,d0
(1) 3622/FFFFFFFFFFFF1B5E : EB5E                		rol.w	#5,d6		; next << color
(1) 3623/FFFFFFFFFFFF1B60 : EB5D                		rol.w	#5,d5
(1) 3624/FFFFFFFFFFFF1B62 : EB5C                		rol.w	#5,d4
(1) 3611/FFFFFFFFFFFF1B64 : 3200                		move.w	d0,d1
(1) 3612/FFFFFFFFFFFF1B66 : C245                		and.w	d5,d1		; Filter TARGET
(1) 3613/FFFFFFFFFFFF1B68 : 670A                		beq.s	.no_chng
(1) 3614/FFFFFFFFFFFF1B6A : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3615/FFFFFFFFFFFF1B6C : 9246                		sub.w	d6,d1
(1) 3616/FFFFFFFFFFFF1B6E : 6A02                		bpl.s	.too_blck
(1) 3617/FFFFFFFFFFFF1B70 : 4241                		clr.w	d1
(1) 3618/FFFFFFFFFFFF1B72 :                     .too_blck:
(1) 3619/FFFFFFFFFFFF1B72 : 5243                		addq.w	#1,d3		; Color changed
(1) 3620/FFFFFFFFFFFF1B74 :                     .no_chng:
(1) 3621/FFFFFFFFFFFF1B74 : 8041                		or.w	d1,d0
(1) 3622/FFFFFFFFFFFF1B76 : EB5E                		rol.w	#5,d6		; next << color
(1) 3623/FFFFFFFFFFFF1B78 : EB5D                		rol.w	#5,d5
(1) 3624/FFFFFFFFFFFF1B7A : EB5C                		rol.w	#5,d4
(1) 3611/FFFFFFFFFFFF1B7C : 3200                		move.w	d0,d1
(1) 3612/FFFFFFFFFFFF1B7E : C245                		and.w	d5,d1		; Filter TARGET
(1) 3613/FFFFFFFFFFFF1B80 : 670A                		beq.s	.no_chng
(1) 3614/FFFFFFFFFFFF1B82 : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3615/FFFFFFFFFFFF1B84 : 9246                		sub.w	d6,d1
(1) 3616/FFFFFFFFFFFF1B86 : 6A02                		bpl.s	.too_blck
(1) 3617/FFFFFFFFFFFF1B88 : 4241                		clr.w	d1
(1) 3618/FFFFFFFFFFFF1B8A :                     .too_blck:
(1) 3619/FFFFFFFFFFFF1B8A : 5243                		addq.w	#1,d3		; Color changed
(1) 3620/FFFFFFFFFFFF1B8C :                     .no_chng:
(1) 3621/FFFFFFFFFFFF1B8C : 8041                		or.w	d1,d0
(1) 3622/FFFFFFFFFFFF1B8E : EB5E                		rol.w	#5,d6		; next << color
(1) 3623/FFFFFFFFFFFF1B90 : EB5D                		rol.w	#5,d5
(1) 3624/FFFFFFFFFFFF1B92 : EB5C                		rol.w	#5,d4
(1) 3626/FFFFFFFFFFFF1B94 :                     	; returns to $Exxx, rotate to $xxxE:
(1) 3627/FFFFFFFFFFFF1B94 : E35E                		rol.w	#1,d6
(1) 3628/FFFFFFFFFFFF1B96 : E35D                		rol.w	#1,d5
(1) 3629/FFFFFFFFFFFF1B98 : E35C                		rol.w	#1,d4
(1) 3630/FFFFFFFFFFFF1B9A : 3AC0                		move.w	d0,(a5)+
(1) 3631/FFFFFFFFFFFF1B9C :                     .all_black:
(1) 3632/FFFFFFFFFFFF1B9C : 51CF FFAC           		dbf	d7,.next_color
(1) 3633/FFFFFFFFFFFF1BA0 : 4A43                		tst.w	d3
(1) 3634/FFFFFFFFFFFF1BA2 : 6602                		bne.s	.fdout_nend
(1) 3635/FFFFFFFFFFFF1BA4 : 4216                		clr.b	palfd_req(a6)
(1) 3636/FFFFFFFFFFFF1BA6 :                     .fdout_nend:
(1) 3637/FFFFFFFFFFFF1BA6 : 4E75                		rts
(1) 3638/FFFFFFFFFFFF1BA8 :                     
(1) 3639/FFFFFFFFFFFF1BA8 :                     ; ----------------------------------------------------
(1) 3640/FFFFFFFFFFFF1BA8 :                     ; Fade request $02
(1) 3641/FFFFFFFFFFFF1BA8 :                     ; Fade-in
(1) 3642/FFFFFFFFFFFF1BA8 :                     ; ----------------------------------------------------
(1) 3643/FFFFFFFFFFFF1BA8 :                     
(1) 3644/FFFFFFFFFFFF1BA8 :                     .fade_in:
(1) 3645/FFFFFFFFFFFF1BA8 : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3646/FFFFFFFFFFFF1BAC : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3647/FFFFFFFFFFFF1BB0 : 383C 7FFF           		move.w	#$7FFF,d4		; d4 - Filter bits
(1) 3648/FFFFFFFFFFFF1BB4 :                     .next_in:
(1) 3649/FFFFFFFFFFFF1BB4 : 4847                		swap	d7
(1) 3650/FFFFFFFFFFFF1BB6 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 3651/FFFFFFFFFFFF1BB8 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 3652/FFFFFFFFFFFF1BBA : 3602                		move.w	d2,d3
(1) 3653/FFFFFFFFFFFF1BBC : 0243 8000           		andi.w	#$8000,d3
(1) 3654/FFFFFFFFFFFF1BC0 : 4843                		swap	d3
(1) 3655/FFFFFFFFFFFF1BC2 : C044                		and.w	d4,d0
(1) 3656/FFFFFFFFFFFF1BC4 : C444                		and.w	d4,d2
(1) 3657/FFFFFFFFFFFF1BC6 : B042                		cmp.w	d2,d0
(1) 3658/FFFFFFFFFFFF1BC8 : 6770                		beq.s	.set_prio
(1) 3659/FFFFFFFFFFFF1BCA :                     	rept 3
(1) 3660/FFFFFFFFFFFF1BCA :                     		move.w	d0,d1
(1) 3661/FFFFFFFFFFFF1BCA :                     		move.w	d4,d3
(1) 3662/FFFFFFFFFFFF1BCA :                     		eor.w	d5,d3
(1) 3663/FFFFFFFFFFFF1BCA :                     		and.w	d3,d0
(1) 3664/FFFFFFFFFFFF1BCA :                     		move.w	d2,d3
(1) 3665/FFFFFFFFFFFF1BCA :                     		and.w	d5,d1		; filter CURRENT color
(1) 3666/FFFFFFFFFFFF1BCA :                     		and.w	d5,d3		; filter TARGET color
(1) 3667/FFFFFFFFFFFF1BCA :                     
(1) 3668/FFFFFFFFFFFF1BCA :                     		add.w	d6,d1		; ADD to current
(1) 3669/FFFFFFFFFFFF1BCA :                     		cmp.w	d3,d1
(1) 3670/FFFFFFFFFFFF1BCA :                     		bcs.s	.max_out
(1) 3671/FFFFFFFFFFFF1BCA :                     		move.w	d2,d1
(1) 3672/FFFFFFFFFFFF1BCA :                     		andi.w	#$7FFF,d1
(1) 3673/FFFFFFFFFFFF1BCA :                     		and.w	d5,d1
(1) 3674/FFFFFFFFFFFF1BCA :                     .max_out:
(1) 3675/FFFFFFFFFFFF1BCA :                     		addq.w	#1,d7
(1) 3676/FFFFFFFFFFFF1BCA :                     		or.w	d1,d0
(1) 3677/FFFFFFFFFFFF1BCA :                     		rol.w	#5,d6		; next << color
(1) 3678/FFFFFFFFFFFF1BCA :                     		rol.w	#5,d5
(1) 3679/FFFFFFFFFFFF1BCA :                     	endm
(1) 3660/FFFFFFFFFFFF1BCA : 3200                		move.w	d0,d1
(1) 3661/FFFFFFFFFFFF1BCC : 3604                		move.w	d4,d3
(1) 3662/FFFFFFFFFFFF1BCE : BB43                		eor.w	d5,d3
(1) 3663/FFFFFFFFFFFF1BD0 : C043                		and.w	d3,d0
(1) 3664/FFFFFFFFFFFF1BD2 : 3602                		move.w	d2,d3
(1) 3665/FFFFFFFFFFFF1BD4 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3666/FFFFFFFFFFFF1BD6 : C645                		and.w	d5,d3		; filter TARGET color
(1) 3667/FFFFFFFFFFFF1BD8 :                     
(1) 3668/FFFFFFFFFFFF1BD8 : D246                		add.w	d6,d1		; ADD to current
(1) 3669/FFFFFFFFFFFF1BDA : B243                		cmp.w	d3,d1
(1) 3670/FFFFFFFFFFFF1BDC : 6508                		bcs.s	.max_out
(1) 3671/FFFFFFFFFFFF1BDE : 3202                		move.w	d2,d1
(1) 3672/FFFFFFFFFFFF1BE0 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3673/FFFFFFFFFFFF1BE4 : C245                		and.w	d5,d1
(1) 3674/FFFFFFFFFFFF1BE6 :                     .max_out:
(1) 3675/FFFFFFFFFFFF1BE6 : 5247                		addq.w	#1,d7
(1) 3676/FFFFFFFFFFFF1BE8 : 8041                		or.w	d1,d0
(1) 3677/FFFFFFFFFFFF1BEA : EB5E                		rol.w	#5,d6		; next << color
(1) 3678/FFFFFFFFFFFF1BEC : EB5D                		rol.w	#5,d5
(1) 3660/FFFFFFFFFFFF1BEE : 3200                		move.w	d0,d1
(1) 3661/FFFFFFFFFFFF1BF0 : 3604                		move.w	d4,d3
(1) 3662/FFFFFFFFFFFF1BF2 : BB43                		eor.w	d5,d3
(1) 3663/FFFFFFFFFFFF1BF4 : C043                		and.w	d3,d0
(1) 3664/FFFFFFFFFFFF1BF6 : 3602                		move.w	d2,d3
(1) 3665/FFFFFFFFFFFF1BF8 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3666/FFFFFFFFFFFF1BFA : C645                		and.w	d5,d3		; filter TARGET color
(1) 3667/FFFFFFFFFFFF1BFC :                     
(1) 3668/FFFFFFFFFFFF1BFC : D246                		add.w	d6,d1		; ADD to current
(1) 3669/FFFFFFFFFFFF1BFE : B243                		cmp.w	d3,d1
(1) 3670/FFFFFFFFFFFF1C00 : 6508                		bcs.s	.max_out
(1) 3671/FFFFFFFFFFFF1C02 : 3202                		move.w	d2,d1
(1) 3672/FFFFFFFFFFFF1C04 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3673/FFFFFFFFFFFF1C08 : C245                		and.w	d5,d1
(1) 3674/FFFFFFFFFFFF1C0A :                     .max_out:
(1) 3675/FFFFFFFFFFFF1C0A : 5247                		addq.w	#1,d7
(1) 3676/FFFFFFFFFFFF1C0C : 8041                		or.w	d1,d0
(1) 3677/FFFFFFFFFFFF1C0E : EB5E                		rol.w	#5,d6		; next << color
(1) 3678/FFFFFFFFFFFF1C10 : EB5D                		rol.w	#5,d5
(1) 3660/FFFFFFFFFFFF1C12 : 3200                		move.w	d0,d1
(1) 3661/FFFFFFFFFFFF1C14 : 3604                		move.w	d4,d3
(1) 3662/FFFFFFFFFFFF1C16 : BB43                		eor.w	d5,d3
(1) 3663/FFFFFFFFFFFF1C18 : C043                		and.w	d3,d0
(1) 3664/FFFFFFFFFFFF1C1A : 3602                		move.w	d2,d3
(1) 3665/FFFFFFFFFFFF1C1C : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3666/FFFFFFFFFFFF1C1E : C645                		and.w	d5,d3		; filter TARGET color
(1) 3667/FFFFFFFFFFFF1C20 :                     
(1) 3668/FFFFFFFFFFFF1C20 : D246                		add.w	d6,d1		; ADD to current
(1) 3669/FFFFFFFFFFFF1C22 : B243                		cmp.w	d3,d1
(1) 3670/FFFFFFFFFFFF1C24 : 6508                		bcs.s	.max_out
(1) 3671/FFFFFFFFFFFF1C26 : 3202                		move.w	d2,d1
(1) 3672/FFFFFFFFFFFF1C28 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3673/FFFFFFFFFFFF1C2C : C245                		and.w	d5,d1
(1) 3674/FFFFFFFFFFFF1C2E :                     .max_out:
(1) 3675/FFFFFFFFFFFF1C2E : 5247                		addq.w	#1,d7
(1) 3676/FFFFFFFFFFFF1C30 : 8041                		or.w	d1,d0
(1) 3677/FFFFFFFFFFFF1C32 : EB5E                		rol.w	#5,d6		; next << color
(1) 3678/FFFFFFFFFFFF1C34 : EB5D                		rol.w	#5,d5
(1) 3680/FFFFFFFFFFFF1C36 : E35E                		rol.w	#1,d6
(1) 3681/FFFFFFFFFFFF1C38 : E35D                		rol.w	#1,d5
(1) 3682/FFFFFFFFFFFF1C3A :                     .set_prio:
(1) 3683/FFFFFFFFFFFF1C3A : 4843                		swap	d3
(1) 3684/FFFFFFFFFFFF1C3C : 8043                		or.w	d3,d0
(1) 3685/FFFFFFFFFFFF1C3E : 3A80                		move.w	d0,(a5)
(1) 3686/FFFFFFFFFFFF1C40 :                     .same_in:
(1) 3687/FFFFFFFFFFFF1C40 : DAFC 0002           		adda	#2,a5		; Next color
(1) 3688/FFFFFFFFFFFF1C44 : D8FC 0002           		adda	#2,a4
(1) 3689/FFFFFFFFFFFF1C48 : 4847                		swap	d7
(1) 3690/FFFFFFFFFFFF1C4A : 51CF FF68           		dbf	d7,.next_in
(1) 3691/FFFFFFFFFFFF1C4E : 4847                		swap	d7
(1) 3692/FFFFFFFFFFFF1C50 : 4A47                		tst.w	d7
(1) 3693/FFFFFFFFFFFF1C52 : 6602                		bne.s	.fdin_nend
(1) 3694/FFFFFFFFFFFF1C54 : 4216                		clr.b	palfd_req(a6)
(1) 3695/FFFFFFFFFFFF1C56 :                     .fdin_nend:
(1) 3696/FFFFFFFFFFFF1C56 : 4E75                		rts
(1) 3697/FFFFFFFFFFFF1C58 :                     
(1) 3698/FFFFFFFFFFFF1C58 :                     ; --------------------------------------------------------
(1) 3699/FFFFFFFFFFFF1C58 :                     ; Video_MdMars_LoadPal, Video_MdMars_FadePal
(1) 3700/FFFFFFFFFFFF1C58 :                     ;
(1) 3701/FFFFFFFFFFFF1C58 :                     ; Loads SVDP 256-color palette data,
(1) 3702/FFFFFFFFFFFF1C58 :                     ; either current or for fading.
(1) 3703/FFFFFFFFFFFF1C58 :                     ;
(1) 3704/FFFFFFFFFFFF1C58 :                     ; Input:
(1) 3705/FFFFFFFFFFFF1C58 :                     ; a0   | 256-color Palette data
(1) 3706/FFFFFFFFFFFF1C58 :                     ; d0.w | Starting index
(1) 3707/FFFFFFFFFFFF1C58 :                     ; d1.w | Number of colors
(1) 3708/FFFFFFFFFFFF1C58 :                     ; d2.w | Priority bit 0 or 1
(1) 3709/FFFFFFFFFFFF1C58 :                     ;
(1) 3710/FFFFFFFFFFFF1C58 :                     ; Notes:
(1) 3711/FFFFFFFFFFFF1C58 :                     ; - Priority bit is skipped on the first color index
(1) 3712/FFFFFFFFFFFF1C58 :                     ; --------------------------------------------------------
(1) 3713/FFFFFFFFFFFF1C58 :                     
(1) 3714/FFFFFFFFFFFF1C58 :                     Video_MdMars_FadePal:
(1) 3715/FFFFFFFFFFFF1C58 : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3716/FFFFFFFFFFFF1C5C : 4DF8 CC20           		lea	(RAM_MdMars_PalFd).w,a6
(1) 3717/FFFFFFFFFFFF1C60 : 6008                		bra.s	vidMars_Pal
(1) 3718/FFFFFFFFFFFF1C62 :                     Video_MdMars_LoadPal:
(1) 3719/FFFFFFFFFFFF1C62 : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3720/FFFFFFFFFFFF1C66 : 4DF8 CE60           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a6
(1) 3721/FFFFFFFFFFFF1C6A :                     ; 		bra.s	vidMars_Pal
(1) 3722/FFFFFFFFFFFF1C6A :                     vidMars_Pal:
(1) 3723/FFFFFFFFFFFF1C6A : 2A48                		move.l	a0,a5
(1) 3724/FFFFFFFFFFFF1C6C : 7E00                		moveq	#0,d7
(1) 3725/FFFFFFFFFFFF1C6E : 3E00                		move.w	d0,d7
(1) 3726/FFFFFFFFFFFF1C70 : 3A00                		move.w	d0,d5
(1) 3727/FFFFFFFFFFFF1C72 : DE47                		add.w	d7,d7
(1) 3728/FFFFFFFFFFFF1C74 : DCC7                		adda	d7,a6
(1) 3729/FFFFFFFFFFFF1C76 : 3E01                		move.w	d1,d7
(1) 3730/FFFFFFFFFFFF1C78 : 0447 0001           		subi.w	#1,d7
(1) 3731/FFFFFFFFFFFF1C7C : 3C02                		move.w	d2,d6
(1) 3732/FFFFFFFFFFFF1C7E : 0246 0001           		andi.w	#1,d6
(1) 3733/FFFFFFFFFFFF1C82 : E25E                		ror.w	#1,d6
(1) 3734/FFFFFFFFFFFF1C84 :                     .loop:
(1) 3735/FFFFFFFFFFFF1C84 : 4847                		swap	d7
(1) 3736/FFFFFFFFFFFF1C86 : 3E1D                		move.w	(a5)+,d7
(1) 3737/FFFFFFFFFFFF1C88 : 4A45                		tst.w	d5
(1) 3738/FFFFFFFFFFFF1C8A : 670A                		beq.s	.trnspr
(1) 3739/FFFFFFFFFFFF1C8C : BBFC FFFF CE60      		cmpa.l	#RAM_MdMars_CommBuff+Dreq_Palette,a5	; Skip first index
(1) 3740/FFFFFFFFFFFF1C92 : 6702                		beq.s	.trnspr
(1) 3741/FFFFFFFFFFFF1C94 : 8E46                		or.w	d6,d7
(1) 3742/FFFFFFFFFFFF1C96 :                     .trnspr:
(1) 3743/FFFFFFFFFFFF1C96 : 3CC7                		move.w	d7,(a6)+
(1) 3744/FFFFFFFFFFFF1C98 : 4847                		swap	d7
(1) 3745/FFFFFFFFFFFF1C9A : 5245                		addq.w	#1,d5
(1) 3746/FFFFFFFFFFFF1C9C : 51CF FFE6           		dbf	d7,.loop
(1) 3747/FFFFFFFFFFFF1CA0 : 4CDF 60E0           		movem.l	(sp)+,d5-d7/a5-a6
(1) 3748/FFFFFFFFFFFF1CA4 : 4E75                		rts
(1) 3749/FFFFFFFFFFFF1CA6 :                     
(1) 3750/FFFFFFFFFFFF1CA6 :                     ; --------------------------------------------------------
(1) 3751/FFFFFFFFFFFF1CA6 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 3752/FFFFFFFFFFFF1CA6 :                     ;
(1) 3753/FFFFFFFFFFFF1CA6 :                     ; Loads palettes on bulk with a list
(1) 3754/FFFFFFFFFFFF1CA6 :                     ;
(1) 3755/FFFFFFFFFFFF1CA6 :                     ; Input:
(1) 3756/FFFFFFFFFFFF1CA6 :                     ; a0 | List of graphics to load:
(1) 3757/FFFFFFFFFFFF1CA6 :                     ;        dc.w numof_entries
(1) 3758/FFFFFFFFFFFF1CA6 :                     ;        dc.l palette_data
(1) 3759/FFFFFFFFFFFF1CA6 :                     ;        dc.w start_at
(1) 3760/FFFFFFFFFFFF1CA6 :                     ;        dc.w numof_colors
(1) 3761/FFFFFFFFFFFF1CA6 :                     ;        dc.w priority (0 or 1)
(1) 3762/FFFFFFFFFFFF1CA6 :                     ;        ; ...more entries
(1) 3763/FFFFFFFFFFFF1CA6 :                     ; --------------------------------------------------------
(1) 3764/FFFFFFFFFFFF1CA6 :                     
(1) 3765/FFFFFFFFFFFF1CA6 :                     Video_MdMars_LoadPal_List:
(1) 3766/FFFFFFFFFFFF1CA6 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3767/FFFFFFFFFFFF1CAA : 2A48                		move.l	a0,a5
(1) 3768/FFFFFFFFFFFF1CAC : 3E1D                		move.w	(a5)+,d7
(1) 3769/FFFFFFFFFFFF1CAE : 6712                		beq.s	.invalid
(1) 3770/FFFFFFFFFFFF1CB0 : 6B10                		bmi.s	.invalid
(1) 3771/FFFFFFFFFFFF1CB2 : 5347                		subq.w	#1,d7
(1) 3772/FFFFFFFFFFFF1CB4 :                     .next_one:
(1) 3773/FFFFFFFFFFFF1CB4 : 205D                		move.l	(a5)+,a0
(1) 3774/FFFFFFFFFFFF1CB6 : 301D                		move.w	(a5)+,d0
(1) 3775/FFFFFFFFFFFF1CB8 : 321D                		move.w	(a5)+,d1
(1) 3776/FFFFFFFFFFFF1CBA : 341D                		move.w	(a5)+,d2
(1) 3777/FFFFFFFFFFFF1CBC : 61A4                		bsr	Video_MdMars_LoadPal
(1) 3778/FFFFFFFFFFFF1CBE : 51CF FFF4           		dbf	d7,.next_one
(1) 3779/FFFFFFFFFFFF1CC2 :                     .invalid:
(1) 3780/FFFFFFFFFFFF1CC2 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3781/FFFFFFFFFFFF1CC6 : 4E75                		rts
(1) 3782/FFFFFFFFFFFF1CC8 :                     
(1) 3783/FFFFFFFFFFFF1CC8 :                     Video_MdMars_FadePal_List:
(1) 3784/FFFFFFFFFFFF1CC8 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3785/FFFFFFFFFFFF1CCC : 2A48                		move.l	a0,a5
(1) 3786/FFFFFFFFFFFF1CCE : 3E1D                		move.w	(a5)+,d7
(1) 3787/FFFFFFFFFFFF1CD0 : 6714                		beq.s	.invalid
(1) 3788/FFFFFFFFFFFF1CD2 : 6B12                		bmi.s	.invalid
(1) 3789/FFFFFFFFFFFF1CD4 : 5347                		subq.w	#1,d7
(1) 3790/FFFFFFFFFFFF1CD6 :                     .next_one:
(1) 3791/FFFFFFFFFFFF1CD6 : 205D                		move.l	(a5)+,a0
(1) 3792/FFFFFFFFFFFF1CD8 : 301D                		move.w	(a5)+,d0
(1) 3793/FFFFFFFFFFFF1CDA : 321D                		move.w	(a5)+,d1
(1) 3794/FFFFFFFFFFFF1CDC : 341D                		move.w	(a5)+,d2
(1) 3795/FFFFFFFFFFFF1CDE : 6100 FF78           		bsr	Video_MdMars_FadePal
(1) 3796/FFFFFFFFFFFF1CE2 : 51CF FFF2           		dbf	d7,.next_one
(1) 3797/FFFFFFFFFFFF1CE6 :                     .invalid:
(1) 3798/FFFFFFFFFFFF1CE6 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3799/FFFFFFFFFFFF1CEA : 4E75                		rts
(1) 3800/FFFFFFFFFFFF1CEC :                     
(1) 3801/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1) 3802/FFFFFFFFFFFF1CEC :                     
(1) 3804/FFFFFFFFFFFF1CEC :                     
     196/FFFFFFFFFFFF1CEC :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF1CEC :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1CEC :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF1CEC :                     ;
(1)    5/FFFFFFFFFFFF1CEC :                     ; including SCD, 32X and PICO.
(1)    6/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFF1CEC :                     
(1)    8/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1)    9/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF1CEC :                     ; Settings
(1)   11/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF1CEC :                     
(1)   13/FFFFFFFFFFFF1CEC : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/FFFFFFFFFFFF1CEC : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/FFFFFFFFFFFF1CEC :                     
(1)   16/FFFFFFFFFFFF1CEC :                     ; ===================================================================
(1)   17/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF1CEC :                     ; Variables
(1)   19/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF1CEC :                     
(1)   21/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   22/FFFFFFFFFFFF1CEC :                     ; Controller buffer data
(1)   23/FFFFFFFFFFFF1CEC :                     ;
(1)   24/FFFFFFFFFFFF1CEC :                     ; MUST call System_Input during VBlank
(1)   25/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   26/FFFFFFFFFFFF1CEC :                     
(1)   27/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   28/FFFFFFFFFFFF1CEC :                     ; pad_id
(1)   29/FFFFFFFFFFFF1CEC :                     ;
(1)   30/FFFFFFFFFFFF1CEC :                     ; JoyID_MD:
(1)   31/FFFFFFFFFFFF1CEC :                     ; Read pad_ver separately to check if controller
(1)   32/FFFFFFFFFFFF1CEC :                     ; is 3button(0) or 6button(1)
(1)   33/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF1CEC :                     
(1)   35/FFFFFFFFFFFF1CEC : =$3                  JoyID_Mouse	equ $03
(1)   36/FFFFFFFFFFFF1CEC : =$D                  JoyID_MD	equ $0D
(1)   37/FFFFFFFFFFFF1CEC : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/FFFFFFFFFFFF1CEC :                     
(1)   39/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF1CEC :                     ; Genesis controller
(1)   41/FFFFFFFFFFFF1CEC :                     ;
(1)   42/FFFFFFFFFFFF1CEC :                     ; Read these as WORD
(1)   43/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF1CEC :                     
(1)   45/FFFFFFFFFFFF1CEC :                     ; on_hold, on_press
(1)   46/FFFFFFFFFFFF1CEC : =$1                  JoyUp		equ $0001
(1)   47/FFFFFFFFFFFF1CEC : =$2                  JoyDown		equ $0002
(1)   48/FFFFFFFFFFFF1CEC : =$4                  JoyLeft		equ $0004
(1)   49/FFFFFFFFFFFF1CEC : =$8                  JoyRight	equ $0008
(1)   50/FFFFFFFFFFFF1CEC : =$10                 JoyB		equ $0010
(1)   51/FFFFFFFFFFFF1CEC : =$20                 JoyC		equ $0020
(1)   52/FFFFFFFFFFFF1CEC : =$40                 JoyA		equ $0040
(1)   53/FFFFFFFFFFFF1CEC : =$80                 JoyStart	equ $0080
(1)   54/FFFFFFFFFFFF1CEC : =$100                JoyZ		equ $0100
(1)   55/FFFFFFFFFFFF1CEC : =$200                JoyY		equ $0200
(1)   56/FFFFFFFFFFFF1CEC : =$400                JoyX		equ $0400
(1)   57/FFFFFFFFFFFF1CEC : =$800                JoyMode		equ $0800
(1)   58/FFFFFFFFFFFF1CEC : =$0                  bitJoyUp	equ 0
(1)   59/FFFFFFFFFFFF1CEC : =$1                  bitJoyDown	equ 1
(1)   60/FFFFFFFFFFFF1CEC : =$2                  bitJoyLeft	equ 2
(1)   61/FFFFFFFFFFFF1CEC : =$3                  bitJoyRight	equ 3
(1)   62/FFFFFFFFFFFF1CEC : =$4                  bitJoyB		equ 4
(1)   63/FFFFFFFFFFFF1CEC : =$5                  bitJoyC		equ 5
(1)   64/FFFFFFFFFFFF1CEC : =$6                  bitJoyA		equ 6
(1)   65/FFFFFFFFFFFF1CEC : =$7                  bitJoyStart	equ 7
(1)   66/FFFFFFFFFFFF1CEC : =$8                  bitJoyZ		equ 8
(1)   67/FFFFFFFFFFFF1CEC : =$9                  bitJoyY		equ 9
(1)   68/FFFFFFFFFFFF1CEC : =$A                  bitJoyX		equ 10
(1)   69/FFFFFFFFFFFF1CEC : =$B                  bitJoyMode	equ 11
(1)   70/FFFFFFFFFFFF1CEC :                     
(1)   71/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   72/FFFFFFFFFFFF1CEC :                     ; Mega Mouse ONLY
(1)   73/FFFFFFFFFFFF1CEC :                     ;
(1)   74/FFFFFFFFFFFF1CEC :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/FFFFFFFFFFFF1CEC :                     ; NOT screen position.
(1)   76/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF1CEC :                     
(1)   78/FFFFFFFFFFFF1CEC : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF1CEC : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF1CEC : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF1CEC : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/FFFFFFFFFFFF1CEC : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF1CEC : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF1CEC : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF1CEC : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF1CEC :                     
(1)   87/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF1CEC :                     ; Sega PICO
(1)   89/FFFFFFFFFFFF1CEC :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/FFFFFFFFFFFF1CEC :                     ; For reading the pen position use
(1)   91/FFFFFFFFFFFF1CEC :                     ; mouse_x and mouse_y
(1)   92/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)   93/FFFFFFFFFFFF1CEC :                     
(1)   94/FFFFFFFFFFFF1CEC : =$10                 JoyRED		equ $0010
(1)   95/FFFFFFFFFFFF1CEC : =$80                 JoyPEN		equ $0080
(1)   96/FFFFFFFFFFFF1CEC : =$4                  bitJoyRED	equ 4
(1)   97/FFFFFFFFFFFF1CEC : =$7                  bitJoyPEN	equ 7
(1)   98/FFFFFFFFFFFF1CEC :                     
(1)   99/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1)  100/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF1CEC :                     ; Structs
(1)  102/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF1CEC :                     
(1)  104/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF1CEC :                     ; RAM_InputData
(1)  106/FFFFFFFFFFFF1CEC :                     
(1)  107/FFFFFFFFFFFF1CEC :                     ; *** MANUAL VARIABLES ***
(1)  108/FFFFFFFFFFFF1CEC : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/FFFFFFFFFFFF1CEC : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/FFFFFFFFFFFF1CEC : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/FFFFFFFFFFFF1CEC : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/FFFFFFFFFFFF1CEC : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/FFFFFFFFFFFF1CEC : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/FFFFFFFFFFFF1CEC : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/FFFFFFFFFFFF1CEC : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/FFFFFFFFFFFF1CEC : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/FFFFFFFFFFFF1CEC : =$10                 sizeof_input		equ $10
(1)  118/FFFFFFFFFFFF1CEC :                     
(1)  119/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)  120/FFFFFFFFFFFF1CEC :                     ; RAM_Objects
(1)  121/FFFFFFFFFFFF1CEC :                     ;
(1)  122/FFFFFFFFFFFF1CEC :                     ; Size must end as even
(1)  123/FFFFFFFFFFFF1CEC :                     ; ------------------------------------------------
(1)  124/FFFFFFFFFFFF1CEC :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; obj_len		ds.l 0
(1)  148/FFFFFFFFFFFF1CEC : =$68                 			endstruct
(1)  149/FFFFFFFFFFFF1CEC :                     
(1)  150/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1)  151/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  152/FFFFFFFFFFFF1CEC :                     ; RAM section
(1)  153/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  154/FFFFFFFFFFFF1CEC :                     
(1)  155/FFFFFFFFFFFF1CEC : (MACRO)              			memory RAM_MdSystem
(1)  155/FFFFFFFFFFFF1CEC : =$FFFFFFFFFFFF1CEC   GLBL_LASTPC     := *
(1)  155/    484A :                                     dephase
(1)  155/FFFFFFFFFFFFE874 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFE874 : =$FFFFFFFFFFFFE874   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFE874 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFE974 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFE9B4 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFF9F4 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFF9F8 :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFF9FC :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFFA02 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFFA08 :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFFA0E :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFFA10 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFFA12 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFFA14 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFFA16 :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFFA1C : (MACRO)              			endmemory
(1)  169/    59F2 :                     .here:          dephase
(1)  169/    59F2 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/FFFFFFFFFFFF1CEC :                                     phase GLBL_LASTPC
(1)  170/FFFFFFFFFFFF1CEC :                     
(1)  171/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1)  172/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  173/FFFFFFFFFFFF1CEC :                     ; Label aliases
(1)  174/FFFFFFFFFFFF1CEC :                     ; ----------------------------------------------------------------
(1)  175/FFFFFFFFFFFF1CEC :                     
(1)  176/FFFFFFFFFFFF1CEC : =$FFFFFFFFFFFFE974   Controller_1		equ RAM_InputData
(1)  177/FFFFFFFFFFFF1CEC : =$FFFFFFFFFFFFE984   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/FFFFFFFFFFFF1CEC :                     
(1)  179/FFFFFFFFFFFF1CEC :                     ; ====================================================================
(1)  180/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)  181/FFFFFFFFFFFF1CEC :                     ; Init System
(1)  182/FFFFFFFFFFFF1CEC :                     ; 
(1)  183/FFFFFFFFFFFF1CEC :                     ; Uses:
(1)  184/FFFFFFFFFFFF1CEC :                     ; a0-a2,d0-d1
(1)  185/FFFFFFFFFFFF1CEC :                     ; --------------------------------------------------------
(1)  186/FFFFFFFFFFFF1CEC :                     
(1)  187/FFFFFFFFFFFF1CEC :                     System_Init:
(1)  188/FFFFFFFFFFFF1CEC : 007C 0700           		or.w	#$0700,sr
(1)  190/FFFFFFFFFFFF1CF0 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF1CF6 : 1100             
(1)  191/FFFFFFFFFFFF1CF8 :                     .wait:
(1)  192/FFFFFFFFFFFF1CF8 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF1CFE : 1100             
(1)  193/FFFFFFFFFFFF1D00 : 66F6                		bne.s	.wait
(1)  194/FFFFFFFFFFFF1D02 : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  195/FFFFFFFFFFFF1D04 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  196/FFFFFFFFFFFF1D0A : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  197/FFFFFFFFFFFF1D10 : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  198/FFFFFFFFFFFF1D16 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF1D1C : 1100             
(1)  200/FFFFFFFFFFFF1D1E : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/FFFFFFFFFFFF1D22 : 31C0 F9FC            		move.w	d0,(RAM_VBlankJump).w
(1)  202/FFFFFFFFFFFF1D26 : 31C0 FA02           		move.w	d0,(RAM_HBlankJump).w
(1)  203/FFFFFFFFFFFF1D2A : 31C0 FA08           		move.w	d0,(RAM_ExternalJump).w
(1)  204/FFFFFFFFFFFF1D2E : 203C FFFF 20F8      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/FFFFFFFFFFFF1D34 : 223C FFFF 20FA      		move.l	#HInt_Default,d1
(1)  206/FFFFFFFFFFFF1D3A : 243C FFFF 20FC      		move.l	#ExtInt_Default,d2
(1)  207/FFFFFFFFFFFF1D40 : 6100 05D8           		bsr	System_SetIntJumps
(1)  208/FFFFFFFFFFFF1D44 : 41F8 E974           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/FFFFFFFFFFFF1D48 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/FFFFFFFFFFFF1D4C : 7000                		moveq	#0,d0
(1)  211/FFFFFFFFFFFF1D4E :                     .clrinput:
(1)  212/FFFFFFFFFFFF1D4E : 30C0                		move.w	d0,(a0)+
(1)  213/FFFFFFFFFFFF1D50 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/FFFFFFFFFFFF1D54 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/FFFFFFFFFFFF1D58 : 4E75                		rts
(1)  216/FFFFFFFFFFFF1D5A :                     
(1)  217/FFFFFFFFFFFF1D5A :                     ; ====================================================================
(1)  218/FFFFFFFFFFFF1D5A :                     ; --------------------------------------------------------
(1)  219/FFFFFFFFFFFF1D5A :                     ; System_Render
(1)  220/FFFFFFFFFFFF1D5A :                     ;
(1)  221/FFFFFFFFFFFF1D5A :                     ; This will:
(1)  222/FFFFFFFFFFFF1D5A :                     ; - Drop a frame if we got late on VBlank
(1)  223/FFFFFFFFFFFF1D5A :                     ; - Process Palette fading buffers
(1)  224/FFFFFFFFFFFF1D5A :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/FFFFFFFFFFFF1D5A :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/FFFFFFFFFFFF1D5A :                     ; - Check the sound driver for any changes/requests
(1)  227/FFFFFFFFFFFF1D5A :                     ;   from Z80 (Sound_Update, several times)
(1)  228/FFFFFFFFFFFF1D5A :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/FFFFFFFFFFFF1D5A :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/FFFFFFFFFFFF1D5A :                     ;
(1)  231/FFFFFFFFFFFF1D5A :                     ; During VBlank:
(1)  232/FFFFFFFFFFFF1D5A :                     ; - Read the Input data, (System_Input)
(1)  233/FFFFFFFFFFFF1D5A :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/FFFFFFFFFFFF1D5A :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/FFFFFFFFFFFF1D5A :                     ;   (Video_Render)
(1)  236/FFFFFFFFFFFF1D5A :                     ;
(1)  237/FFFFFFFFFFFF1D5A :                     ; Notes:
(1)  238/FFFFFFFFFFFF1D5A :                     ; - If VDP Display is disabled all of this
(1)  239/FFFFFFFFFFFF1D5A :                     ;   will be skipped.
(1)  240/FFFFFFFFFFFF1D5A :                     ; --------------------------------------------------------
(1)  241/FFFFFFFFFFFF1D5A :                     
(1)  242/FFFFFFFFFFFF1D5A :                     System_Render:
(1)  243/FFFFFFFFFFFF1D5A : 3E38 E86E           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/FFFFFFFFFFFF1D5E : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/FFFFFFFFFFFF1D62 : 676E                		beq	.forgot_disp
(1)  246/FFFFFFFFFFFF1D64 : 6100 EFA2           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/FFFFFFFFFFFF1D68 :                     .wait_early:
(1)  248/FFFFFFFFFFFF1D68 : 6100 00C0           		bsr	Sound_Update			; Update sound on wait
(1)  249/FFFFFFFFFFFF1D6C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/FFFFFFFFFFFF1D72 : 0807 0003           		btst	#bitVBlk,d7
(1)  251/FFFFFFFFFFFF1D76 : 66F0                		bne.s	.wait_early
(1)  252/FFFFFFFFFFFF1D78 :                     	; ----------------------------------------
(1)  253/FFFFFFFFFFFF1D78 :                     	; 32X/CD32X
(1)  255/FFFFFFFFFFFF1D78 : 6100 FD5C           		bsr	Video_MdMars_RunFade		; Process SVDP palette fade
(1)  256/FFFFFFFFFFFF1D7C : 4BF9 00A1 512C      		lea	(sysmars_reg+comm12).l,a5	; %SW00
(1)  257/FFFFFFFFFFFF1D82 : 3E15                		move.w	(a5),d7				; SH2 allows framedropping?
(1)  258/FFFFFFFFFFFF1D84 : 0807 0003           		btst	#3,d7
(1)  259/FFFFFFFFFFFF1D88 : 6724                		beq.s	.mars_sync
(1)  260/FFFFFFFFFFFF1D8A :                     ; ----------------------------------------
(1)  261/FFFFFFFFFFFF1D8A :                     ; w/32X Framedrop
(1)  262/FFFFFFFFFFFF1D8A :                     ; ----------------------------------------
(1)  263/FFFFFFFFFFFF1D8A :                     
(1)  264/FFFFFFFFFFFF1D8A :                     .mars_wait:
(1)  265/FFFFFFFFFFFF1D8A : 6100 009E           		bsr	Sound_Update			; Update sound on wait
(1)  266/FFFFFFFFFFFF1D8E : 3E15                		move.w	(a5),d7				; Sync bit cleared?
(1)  267/FFFFFFFFFFFF1D90 : 0807 0004           		btst	#4,d7
(1)  268/FFFFFFFFFFFF1D94 : 671E                		beq.s	.mars_free
(1)  269/FFFFFFFFFFFF1D96 :                     .got_late:
(1)  270/FFFFFFFFFFFF1D96 : 6100 0092           		bsr	Sound_Update			; Update sound on wait
(1)  271/FFFFFFFFFFFF1D9A : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  272/FFFFFFFFFFFF1DA0 : 0807 0003           		btst	#bitVBlk,d7
(1)  273/FFFFFFFFFFFF1DA4 : 66F0                		bne.s	.got_late
(1)  274/FFFFFFFFFFFF1DA6 : 6100 0082           		bsr	Sound_Update
(1)  275/FFFFFFFFFFFF1DAA : 6128                		bsr	.wait_vblank
(1)  276/FFFFFFFFFFFF1DAC : 6016                		bra.s	.from_late
(1)  277/FFFFFFFFFFFF1DAE :                     ; ----------------------------------------
(1)  278/FFFFFFFFFFFF1DAE :                     ; w/32X Sync
(1)  279/FFFFFFFFFFFF1DAE :                     ; ----------------------------------------
(1)  280/FFFFFFFFFFFF1DAE :                     .mars_sync:
(1)  281/FFFFFFFFFFFF1DAE : 6100 FA62           		bsr	Video_MdMars_WaitSync		; Wait DREQ-RAM normally
(1)  282/FFFFFFFFFFFF1DB2 : 6176                		bsr	Sound_Update
(1)  283/FFFFFFFFFFFF1DB4 :                     .mars_free:
(1)  284/FFFFFFFFFFFF1DB4 : 6100 07E4           		bsr	System_MdMars_Update		; Send DREQ changes
(1)  286/FFFFFFFFFFFF1DB8 :                     ; ----------------------------------------
(1)  287/FFFFFFFFFFFF1DB8 : 611A                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/FFFFFFFFFFFF1DBA :                     ; ----------------------------------------
(1)  290/FFFFFFFFFFFF1DBA : 616E                		bsr	Sound_Update
(1)  291/FFFFFFFFFFFF1DBC : 6100 FAD8           		bsr	Video_MdMars_PalBackup		; backup SVDP palette transfer if set to us.
(1)  292/FFFFFFFFFFFF1DC0 : 6100 FA46           		bsr	Video_MdMars_SetSync		; Set bit to wait for DREQ-RAM swap
(1)  294/FFFFFFFFFFFF1DC4 :                     .from_late:
(1)  296/FFFFFFFFFFFF1DC4 : 6164                		bsr	Sound_Update
(1)  299/FFFFFFFFFFFF1DC6 : 6162                		bsr	Sound_Update
(1)  300/FFFFFFFFFFFF1DC8 : 6100 FA58           		bsr	Video_MdMars_Cleanup
(1)  302/FFFFFFFFFFFF1DCC : 52B8 E858           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/FFFFFFFFFFFF1DD0 : 6158                		bsr	Sound_Update
(1)  304/FFFFFFFFFFFF1DD2 :                     .forgot_disp:
(1)  305/FFFFFFFFFFFF1DD2 : 4E75                		rts
(1)  306/FFFFFFFFFFFF1DD4 :                     ; ----------------------------------------
(1)  307/FFFFFFFFFFFF1DD4 :                     ; Wait until beam reaches VBlank
(1)  308/FFFFFFFFFFFF1DD4 :                     ; ----------------------------------------
(1)  309/FFFFFFFFFFFF1DD4 :                     
(1)  310/FFFFFFFFFFFF1DD4 : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/FFFFFFFFFFFF1DD6 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/FFFFFFFFFFFF1DDC : 0807 0003           		btst	#bitVBlk,d7
(1)  313/FFFFFFFFFFFF1DE0 : 67F2                		beq.s	.wait_vblank
(1)  314/FFFFFFFFFFFF1DE2 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/FFFFFFFFFFFF1DE4 : 6000 E598           		bra	Video_Render			; Render VDP Visuals
(1)  316/FFFFFFFFFFFF1DE8 :                     
(1)  317/FFFFFFFFFFFF1DE8 :                     ; ====================================================================
(1)  318/FFFFFFFFFFFF1DE8 :                     ; --------------------------------------------------------
(1)  319/FFFFFFFFFFFF1DE8 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/FFFFFFFFFFFF1DE8 :                     ; from ROM or RAM
(1)  321/FFFFFFFFFFFF1DE8 :                     ;
(1)  322/FFFFFFFFFFFF1DE8 :                     ; Call these labels BEFORE and AFTER your
(1)  323/FFFFFFFFFFFF1DE8 :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/FFFFFFFFFFFF1DE8 :                     ; FILL or COPY.
(1)  325/FFFFFFFFFFFF1DE8 :                     ;
(1)  326/FFFFFFFFFFFF1DE8 :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/FFFFFFFFFFFF1DE8 :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/FFFFFFFFFFFF1DE8 :                     ; GONNA USE TO STACK.
(1)  329/FFFFFFFFFFFF1DE8 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF1DE8 :                     
(1)  331/FFFFFFFFFFFF1DE8 :                     ; --------------------------------------------------------
(1)  332/FFFFFFFFFFFF1DE8 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/FFFFFFFFFFFF1DE8 :                     System_DmaEnter_ROM:
(1)  334/FFFFFFFFFFFF1DE8 : 6138                		bsr	System_DmaEnter_RAM
(1)  342/FFFFFFFFFFFF1DEA : 4E75                		rts
(1)  343/FFFFFFFFFFFF1DEC :                     
(1)  344/FFFFFFFFFFFF1DEC :                     System_DmaExit_ROM:
(1)  352/FFFFFFFFFFFF1DEC : 6038                		bra	System_DmaExit_RAM
(1)  353/FFFFFFFFFFFF1DEE :                     
(1)  354/FFFFFFFFFFFF1DEE :                     ; ------------------------------------------------
(1)  355/FFFFFFFFFFFF1DEE :                     
(1)  356/FFFFFFFFFFFF1DEE :                     sys_MarsSlvCmd:
(1)  357/FFFFFFFFFFFF1DEE : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/FFFFFFFFFFFF1DF4 : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/FFFFFFFFFFFF1DF6 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/FFFFFFFFFFFF1DFC : 8E06                		or.b	d6,d7
(1)  361/FFFFFFFFFFFF1DFE : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/FFFFFFFFFFFF1E02 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/FFFFFFFFFFFF1E08 : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
         FFFFFFFFFFFF1E0E : 5103             
(1)  364/FFFFFFFFFFFF1E10 : 4E71                		nop
(1)  365/FFFFFFFFFFFF1E12 : 4E71                		nop
(1)  366/FFFFFFFFFFFF1E14 :                     .wait_exit:
(1)  367/FFFFFFFFFFFF1E14 : 4E71                		nop
(1)  368/FFFFFFFFFFFF1E16 : 4E71                		nop
(1)  369/FFFFFFFFFFFF1E18 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/FFFFFFFFFFFF1E1E : 66F4                		bne.s	.wait_exit
(1)  371/FFFFFFFFFFFF1E20 : 4E75                		rts
(1)  372/FFFFFFFFFFFF1E22 :                     
(1)  373/FFFFFFFFFFFF1E22 :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF1E22 :                     ; *** EXTERNAL JUMPS ***
(1)  375/FFFFFFFFFFFF1E22 :                     ; --------------------------------------------------------
(1)  376/FFFFFFFFFFFF1E22 :                     
(1)  377/FFFFFFFFFFFF1E22 :                     System_DmaEnter_RAM:
(1)  378/FFFFFFFFFFFF1E22 : 6000 E34C           		bra	gemaDmaPause
(1)  379/FFFFFFFFFFFF1E26 :                     System_DmaExit_RAM:
(1)  380/FFFFFFFFFFFF1E26 : 6000 E366           		bra	gemaDmaResume
(1)  381/FFFFFFFFFFFF1E2A :                     
(1)  382/FFFFFFFFFFFF1E2A :                     ; ====================================================================
(1)  383/FFFFFFFFFFFF1E2A :                     ; --------------------------------------------------------
(1)  384/FFFFFFFFFFFF1E2A :                     ; Update sound/sycronize with the Z80
(1)  385/FFFFFFFFFFFF1E2A :                     ; --------------------------------------------------------
(1)  386/FFFFFFFFFFFF1E2A :                     
(1)  387/FFFFFFFFFFFF1E2A :                     Sound_Update:
(1)  388/FFFFFFFFFFFF1E2A : 6000 E25C           		bra	gemaUpdate
(1)  389/FFFFFFFFFFFF1E2E :                     
(1)  390/FFFFFFFFFFFF1E2E :                     ; ====================================================================
(1)  391/FFFFFFFFFFFF1E2E :                     ; --------------------------------------------------------
(1)  392/FFFFFFFFFFFF1E2E :                     ; Init sound driver
(1)  393/FFFFFFFFFFFF1E2E :                     ; --------------------------------------------------------
(1)  394/FFFFFFFFFFFF1E2E :                     
(1)  395/FFFFFFFFFFFF1E2E :                     Sound_Init:
(1)  396/FFFFFFFFFFFF1E2E : 6000 E1D0           		bra	gemaInit
(1)  397/FFFFFFFFFFFF1E32 :                     
(1)  398/FFFFFFFFFFFF1E32 :                     ; ====================================================================
(1)  399/FFFFFFFFFFFF1E32 :                     ; --------------------------------------------------------
(1)  400/FFFFFFFFFFFF1E32 :                     ; System_Input
(1)  401/FFFFFFFFFFFF1E32 :                     ;
(1)  402/FFFFFFFFFFFF1E32 :                     ; Reads data from the Controller ports
(1)  403/FFFFFFFFFFFF1E32 :                     ;
(1)  404/FFFFFFFFFFFF1E32 :                     ; Call this during VBlank only once per frame,
(1)  405/FFFFFFFFFFFF1E32 :                     ; System_Render already calls this.
(1)  406/FFFFFFFFFFFF1E32 :                     ;
(1)  407/FFFFFFFFFFFF1E32 :                     ; Uses:
(1)  408/FFFFFFFFFFFF1E32 :                     ; d5-d7,a5-a6
(1)  409/FFFFFFFFFFFF1E32 :                     ; --------------------------------------------------------
(1)  410/FFFFFFFFFFFF1E32 :                     
(1)  411/FFFFFFFFFFFF1E32 :                     ; ----------------------------------------
(1)  412/FFFFFFFFFFFF1E32 :                     ; PICO input is hard-coded to
(1)  413/FFFFFFFFFFFF1E32 :                     ; Controller_1
(1)  414/FFFFFFFFFFFF1E32 :                     ;
(1)  415/FFFFFFFFFFFF1E32 :                     ; on_hold/on_press:
(1)  416/FFFFFFFFFFFF1E32 :                     ; %P00BRLDU
(1)  417/FFFFFFFFFFFF1E32 :                     ; UDLR - Arrows
(1)  418/FFFFFFFFFFFF1E32 :                     ;    B - BIG button red (JoyB)
(1)  419/FFFFFFFFFFFF1E32 :                     ;    P - Pen press/click (JoyStart)
(1)  420/FFFFFFFFFFFF1E32 :                     ;
(1)  421/FFFFFFFFFFFF1E32 :                     ; mouse_x/mouse_y:
(1)  422/FFFFFFFFFFFF1E32 :                     ; Pen X/Y position
(1)  423/FFFFFFFFFFFF1E32 :                     ; ----------------------------------------
(1)  424/FFFFFFFFFFFF1E32 :                     
(1)  425/FFFFFFFFFFFF1E32 :                     System_Input:
(1)  472/FFFFFFFFFFFF1E32 :                     
(1)  473/FFFFFFFFFFFF1E32 :                     	; ----------------------------------------
(1)  474/FFFFFFFFFFFF1E32 :                     	; Normal Genesis controls
(1)  475/FFFFFFFFFFFF1E32 : 4DF8 E974           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  476/FFFFFFFFFFFF1E36 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  477/FFFFFFFFFFFF1E3C : 6108                		bsr.s	.this_one
(1)  478/FFFFFFFFFFFF1E3E : DAFC 0002           		adda	#2,a5
(1)  479/FFFFFFFFFFFF1E42 : DCFC 0010           		adda	#sizeof_input,a6
(1)  480/FFFFFFFFFFFF1E46 :                     
(1)  481/FFFFFFFFFFFF1E46 :                     ; ----------------------------------------
(1)  482/FFFFFFFFFFFF1E46 :                     ; Read port
(1)  483/FFFFFFFFFFFF1E46 :                     ;
(1)  484/FFFFFFFFFFFF1E46 :                     ; a5 - Current port
(1)  485/FFFFFFFFFFFF1E46 :                     ; a6 - Output data
(1)  486/FFFFFFFFFFFF1E46 :                     ; ----------------------------------------
(1)  487/FFFFFFFFFFFF1E46 :                     
(1)  488/FFFFFFFFFFFF1E46 :                     .this_one:
(1)  489/FFFFFFFFFFFF1E46 : 611C                		bsr	.pick_id
(1)  490/FFFFFFFFFFFF1E48 : 1C87                		move.b	d7,pad_id(a6)
(1)  491/FFFFFFFFFFFF1E4A : 0C47 000F           		cmpi.w	#$0F,d7
(1)  492/FFFFFFFFFFFF1E4E : 670E                		beq.s	.exit
(1)  493/FFFFFFFFFFFF1E50 : 0247 000F           		andi.w	#$0F,d7
(1)  494/FFFFFFFFFFFF1E54 : DE47                		add.w	d7,d7
(1)  495/FFFFFFFFFFFF1E56 : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  496/FFFFFFFFFFFF1E5A : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  497/FFFFFFFFFFFF1E5E :                     .exit:
(1)  498/FFFFFFFFFFFF1E5E : 422E 0001           		clr.b	pad_ver(a6)
(1)  499/FFFFFFFFFFFF1E62 : 4E75                		rts
(1)  500/FFFFFFFFFFFF1E64 :                     
(1)  501/FFFFFFFFFFFF1E64 :                     ; ----------------------------------------
(1)  502/FFFFFFFFFFFF1E64 :                     ; Grab ID
(1)  503/FFFFFFFFFFFF1E64 :                     ; ----------------------------------------
(1)  504/FFFFFFFFFFFF1E64 :                     
(1)  505/FFFFFFFFFFFF1E64 :                     .pick_id:
(1)  506/FFFFFFFFFFFF1E64 : 7E00                		moveq	#0,d7
(1)  507/FFFFFFFFFFFF1E66 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  508/FFFFFFFFFFFF1E6A : 4E71                		nop
(1)  509/FFFFFFFFFFFF1E6C : 4E71                		nop
(1)  510/FFFFFFFFFFFF1E6E : 610A                		bsr	.read
(1)  511/FFFFFFFFFFFF1E70 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  512/FFFFFFFFFFFF1E74 : 4E71                		nop
(1)  513/FFFFFFFFFFFF1E76 : 4E71                		nop
(1)  514/FFFFFFFFFFFF1E78 : DE47                		add.w	d7,d7
(1)  515/FFFFFFFFFFFF1E7A :                     .read:
(1)  516/FFFFFFFFFFFF1E7A : 1A15                		move.b	(a5),d5
(1)  517/FFFFFFFFFFFF1E7C : 1C05                		move.b	d5,d6
(1)  518/FFFFFFFFFFFF1E7E : 0206 000C           		andi.b	#%1100,d6
(1)  519/FFFFFFFFFFFF1E82 : 6702                		beq.s	.step_1
(1)  520/FFFFFFFFFFFF1E84 : 5247                		addq.w	#1,d7
(1)  521/FFFFFFFFFFFF1E86 :                     .step_1:
(1)  522/FFFFFFFFFFFF1E86 : DE47                		add.w	d7,d7
(1)  523/FFFFFFFFFFFF1E88 : 1C05                		move.b	d5,d6
(1)  524/FFFFFFFFFFFF1E8A : 0246 0003           		andi.w	#%0011,d6
(1)  525/FFFFFFFFFFFF1E8E : 6702                		beq.s	.step_2
(1)  526/FFFFFFFFFFFF1E90 : 5247                		addq.w	#1,d7
(1)  527/FFFFFFFFFFFF1E92 :                     .step_2:
(1)  528/FFFFFFFFFFFF1E92 : 4E75                		rts
(1)  529/FFFFFFFFFFFF1E94 :                     
(1)  530/FFFFFFFFFFFF1E94 :                     ; ----------------------------------------
(1)  531/FFFFFFFFFFFF1E94 :                     ; Grab ID
(1)  532/FFFFFFFFFFFF1E94 :                     ; ----------------------------------------
(1)  533/FFFFFFFFFFFF1E94 :                     
(1)  534/FFFFFFFFFFFF1E94 :                     .list:
(1)  535/FFFFFFFFFFFF1E94 : FFCA                		dc.w .exit-.list	; $00
(1)  536/FFFFFFFFFFFF1E96 : FFCA                		dc.w .exit-.list
(1)  537/FFFFFFFFFFFF1E98 : FFCA                		dc.w .exit-.list
(1)  538/FFFFFFFFFFFF1E9A : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  539/FFFFFFFFFFFF1E9C : FFCA                		dc.w .exit-.list	; $04
(1)  540/FFFFFFFFFFFF1E9E : FFCA                		dc.w .exit-.list
(1)  541/FFFFFFFFFFFF1EA0 : FFCA                		dc.w .exit-.list
(1)  542/FFFFFFFFFFFF1EA2 : FFCA                		dc.w .exit-.list
(1)  543/FFFFFFFFFFFF1EA4 : FFCA                		dc.w .exit-.list	; $08
(1)  544/FFFFFFFFFFFF1EA6 : FFCA                		dc.w .exit-.list
(1)  545/FFFFFFFFFFFF1EA8 : FFCA                		dc.w .exit-.list
(1)  546/FFFFFFFFFFFF1EAA : FFCA                		dc.w .exit-.list
(1)  547/FFFFFFFFFFFF1EAC : FFCA                		dc.w .exit-.list	; $0C
(1)  548/FFFFFFFFFFFF1EAE : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  549/FFFFFFFFFFFF1EB0 : FFCA                		dc.w .exit-.list
(1)  550/FFFFFFFFFFFF1EB2 : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  551/FFFFFFFFFFFF1EB4 :                     
(1)  552/FFFFFFFFFFFF1EB4 :                     ; ----------------------------------------
(1)  553/FFFFFFFFFFFF1EB4 :                     ; ID $03
(1)  554/FFFFFFFFFFFF1EB4 :                     ;
(1)  555/FFFFFFFFFFFF1EB4 :                     ; Mega Mouse
(1)  556/FFFFFFFFFFFF1EB4 :                     ; ----------------------------------------
(1)  557/FFFFFFFFFFFF1EB4 :                     
(1)  558/FFFFFFFFFFFF1EB4 :                     ; *** NOT TESTED ON HARDWARE ***
(1)  559/FFFFFFFFFFFF1EB4 :                     ; *** NO RELEASED BITS ***
(1)  560/FFFFFFFFFFFF1EB4 :                     
(1)  561/FFFFFFFFFFFF1EB4 :                     .id_03:
(1)  562/FFFFFFFFFFFF1EB4 : 1ABC 0020           		move.b	#$20,(a5)
(1)  563/FFFFFFFFFFFF1EB8 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  564/FFFFFFFFFFFF1EBE : 0815 0004           		btst	#4,(a5)
(1)  565/FFFFFFFFFFFF1EC2 : 6700 0094           		beq.w	.invalid
(1)  566/FFFFFFFFFFFF1EC6 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  567/FFFFFFFFFFFF1ECA : 4E71                		nop
(1)  568/FFFFFFFFFFFF1ECC : 4E71                		nop
(1)  569/FFFFFFFFFFFF1ECE : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  570/FFFFFFFFFFFF1ED2 : 4E71                		nop
(1)  571/FFFFFFFFFFFF1ED4 : 4E71                		nop
(1)  572/FFFFFFFFFFFF1ED6 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  573/FFFFFFFFFFFF1EDA : 4E71                		nop
(1)  574/FFFFFFFFFFFF1EDC : 4E71                		nop
(1)  575/FFFFFFFFFFFF1EDE : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  576/FFFFFFFFFFFF1EE0 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  577/FFFFFFFFFFFF1EE4 : 4E71                		nop
(1)  578/FFFFFFFFFFFF1EE6 : 4E71                		nop
(1)  579/FFFFFFFFFFFF1EE8 : 1E15                		move.b	(a5),d7
(1)  580/FFFFFFFFFFFF1EEA : 0247 000F            		andi.w	#%1111,d7
(1)  581/FFFFFFFFFFFF1EEE : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  582/FFFFFFFFFFFF1EF2 : BF46                		eor.w	d7,d6
(1)  583/FFFFFFFFFFFF1EF4 : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  584/FFFFFFFFFFFF1EF8 : CC47                		and.w	d7,d6
(1)  585/FFFFFFFFFFFF1EFA : 3D46 0004           		move.w	d6,on_press(a6)
(1)  586/FFFFFFFFFFFF1EFE : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  587/FFFFFFFFFFFF1F02 : 4E71                		nop
(1)  588/FFFFFFFFFFFF1F04 : 4E71                		nop
(1)  589/FFFFFFFFFFFF1F06 : 1E15                		move.b	(a5),d7
(1)  590/FFFFFFFFFFFF1F08 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  591/FFFFFFFFFFFF1F0C : 0247 000F           		andi.w	#%1111,d7
(1)  592/FFFFFFFFFFFF1F10 : E94F                		lsl.w	#4,d7
(1)  593/FFFFFFFFFFFF1F12 : 4E71                		nop
(1)  594/FFFFFFFFFFFF1F14 : 1C15                		move.b	(a5),d6
(1)  595/FFFFFFFFFFFF1F16 : 0246 000F           		andi.w	#%1111,d6
(1)  596/FFFFFFFFFFFF1F1A : 8E46                		or.w	d6,d7
(1)  597/FFFFFFFFFFFF1F1C : 0805 0000           		btst    #0,d5
(1)  598/FFFFFFFFFFFF1F20 : 6704                		beq.s	.x_neg
(1)  599/FFFFFFFFFFFF1F22 : 4407                		neg.b	d7
(1)  600/FFFFFFFFFFFF1F24 : 4447                		neg.w	d7
(1)  601/FFFFFFFFFFFF1F26 :                     .x_neg:
(1)  602/FFFFFFFFFFFF1F26 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  603/FFFFFFFFFFFF1F2A : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  604/FFFFFFFFFFFF1F2E : 4E71                		nop
(1)  605/FFFFFFFFFFFF1F30 : 4E71                		nop
(1)  606/FFFFFFFFFFFF1F32 : 1E15                		move.b	(a5),d7
(1)  607/FFFFFFFFFFFF1F34 : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  608/FFFFFFFFFFFF1F38 : 0247 000F           		andi.w	#%1111,d7
(1)  609/FFFFFFFFFFFF1F3C : E94F                		lsl.w	#4,d7
(1)  610/FFFFFFFFFFFF1F3E : 4E71                		nop
(1)  611/FFFFFFFFFFFF1F40 : 1C15                		move.b	(a5),d6
(1)  612/FFFFFFFFFFFF1F42 : 0246 000F           		andi.w	#%1111,d6
(1)  613/FFFFFFFFFFFF1F46 : 8E46                		or.w	d6,d7
(1)  614/FFFFFFFFFFFF1F48 : 0805 0001           		btst    #1,d5
(1)  615/FFFFFFFFFFFF1F4C : 6704                		beq.s	.y_neg
(1)  616/FFFFFFFFFFFF1F4E : 4407                		neg.b	d7
(1)  617/FFFFFFFFFFFF1F50 : 4447                		neg.w	d7
(1)  618/FFFFFFFFFFFF1F52 :                     .y_neg:
(1)  619/FFFFFFFFFFFF1F52 : 4447                		neg.w	d7		; Reverse Y
(1)  620/FFFFFFFFFFFF1F54 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  621/FFFFFFFFFFFF1F58 :                     
(1)  622/FFFFFFFFFFFF1F58 :                     .invalid:
(1)  623/FFFFFFFFFFFF1F58 : 1ABC 0060           		move.b	#$60,(a5)
(1)  624/FFFFFFFFFFFF1F5C : 4E75                		rts
(1)  625/FFFFFFFFFFFF1F5E :                     
(1)  626/FFFFFFFFFFFF1F5E :                     ; ----------------------------------------
(1)  627/FFFFFFFFFFFF1F5E :                     ; ID $0D
(1)  628/FFFFFFFFFFFF1F5E :                     ;
(1)  629/FFFFFFFFFFFF1F5E :                     ; Normal controller: 3 button or 6 button.
(1)  630/FFFFFFFFFFFF1F5E :                     ; ----------------------------------------
(1)  631/FFFFFFFFFFFF1F5E :                     
(1)  632/FFFFFFFFFFFF1F5E :                     .id_0D:
(1)  633/FFFFFFFFFFFF1F5E : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  634/FFFFFFFFFFFF1F62 : 4E71                		nop
(1)  635/FFFFFFFFFFFF1F64 : 4E71                		nop
(1)  636/FFFFFFFFFFFF1F66 : 1A15                		move.b	(a5),d5
(1)  637/FFFFFFFFFFFF1F68 : 0245 003F           		andi.w	#%00111111,d5
(1)  638/FFFFFFFFFFFF1F6C : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  639/FFFFFFFFFFFF1F70 : 4E71                		nop
(1)  640/FFFFFFFFFFFF1F72 : 4E71                		nop
(1)  641/FFFFFFFFFFFF1F74 : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  642/FFFFFFFFFFFF1F76 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  643/FFFFFFFFFFFF1F78 : 0247 00C0           		andi.w	#%11000000,d7
(1)  644/FFFFFFFFFFFF1F7C : 8E45                		or.w	d5,d7
(1)  645/FFFFFFFFFFFF1F7E : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  646/FFFFFFFFFFFF1F82 : 4647                		not.w	d7
(1)  647/FFFFFFFFFFFF1F84 : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  648/FFFFFFFFFFFF1F88 : 1805                		move.b	d5,d4
(1)  649/FFFFFFFFFFFF1F8A : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  650/FFFFFFFFFFFF1F8E : BF05                		eor.b	d7,d5
(1)  651/FFFFFFFFFFFF1F90 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  652/FFFFFFFFFFFF1F94 : CA07                		and.b	d7,d5
(1)  653/FFFFFFFFFFFF1F96 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  654/FFFFFFFFFFFF1F9A : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  655/FFFFFFFFFFFF1F9E : 1A07                		move.b	d7,d5
(1)  656/FFFFFFFFFFFF1FA0 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  657/FFFFFFFFFFFF1FA2 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  658/FFFFFFFFFFFF1FA6 : B905                		eor.b	d4,d5
(1)  659/FFFFFFFFFFFF1FA8 : CA04                		and.b	d4,d5
(1)  660/FFFFFFFFFFFF1FAA : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  661/FFFFFFFFFFFF1FAC : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  662/FFFFFFFFFFFF1FB0 : 1D45 0007           		move.b	d5,on_release+1(a6)
(1)  663/FFFFFFFFFFFF1FB4 : 0246 000F           		andi.w	#$F,d6
(1)  664/FFFFFFFFFFFF1FB8 : E44E                		lsr.w	#2,d6
(1)  665/FFFFFFFFFFFF1FBA : 0246 0001           		andi.w	#1,d6
(1)  666/FFFFFFFFFFFF1FBE : 6724                		beq.s	.oldpad
(1)  667/FFFFFFFFFFFF1FC0 : 4607                		not.b	d7
(1)  668/FFFFFFFFFFFF1FC2 : 0247 000F            		andi.w	#%1111,d7
(1)  669/FFFFFFFFFFFF1FC6 : 1C07                 		move.b	d7,d6
(1)  670/FFFFFFFFFFFF1FC8 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  671/FFFFFFFFFFFF1FCC : BB06                		eor.b	d5,d6
(1)  672/FFFFFFFFFFFF1FCE : CC05                		and.b	d5,d6
(1)  673/FFFFFFFFFFFF1FD0 : 1D46 0006           		move.b	d6,on_release(a6)
(1)  674/FFFFFFFFFFFF1FD4 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  675/FFFFFFFFFFFF1FD8 : BF05                		eor.b	d7,d5
(1)  676/FFFFFFFFFFFF1FDA : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  677/FFFFFFFFFFFF1FDE : CA07                		and.b	d7,d5
(1)  678/FFFFFFFFFFFF1FE0 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  679/FFFFFFFFFFFF1FE4 :                     .oldpad:
(1)  680/FFFFFFFFFFFF1FE4 : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  681/FFFFFFFFFFFF1FE8 : 4E75                		rts
(1)  683/FFFFFFFFFFFF1FEA :                     
(1)  684/FFFFFFFFFFFF1FEA :                     ; ============================================================
(1)  685/FFFFFFFFFFFF1FEA :                     ; --------------------------------------------------------
(1)  686/FFFFFFFFFFFF1FEA :                     ; System_SramInit
(1)  687/FFFFFFFFFFFF1FEA :                     ;
(1)  688/FFFFFFFFFFFF1FEA :                     ; Enable SRAM/BRAM support
(1)  689/FFFFFFFFFFFF1FEA :                     ;
(1)  690/FFFFFFFFFFFF1FEA :                     ; Input:
(1)  691/FFFFFFFFFFFF1FEA :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/FFFFFFFFFFFF1FEA :                     ;      dc.b "SAVE_NAME__",0
(1)  693/FFFFFFFFFFFF1FEA :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/FFFFFFFFFFFF1FEA :                     ;                            ; protection)
(1)  695/FFFFFFFFFFFF1FEA :                     ;      dc.w flags:
(1)  696/FFFFFFFFFFFF1FEA :                     ;            0 | Normal
(1)  697/FFFFFFFFFFFF1FEA :                     ;           -1 | Save protection
(1)  698/FFFFFFFFFFFF1FEA :                     ;
(1)  699/FFFFFFFFFFFF1FEA :                     ;
(1)  700/FFFFFFFFFFFF1FEA :                     ; Notes:
(1)  701/FFFFFFFFFFFF1FEA :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/FFFFFFFFFFFF1FEA :                     ;   your changes, then call System_SramSave to
(1)  703/FFFFFFFFFFFF1FEA :                     ;   save it into SRAM/BRAM.
(1)  704/FFFFFFFFFFFF1FEA :                     ;
(1)  705/FFFFFFFFFFFF1FEA :                     ; CD/CD32X ONLY:
(1)  706/FFFFFFFFFFFF1FEA :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/FFFFFFFFFFFF1FEA :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/FFFFFFFFFFFF1FEA :                     ;   OVERWRITE without warning any other save.
(1)  709/FFFFFFFFFFFF1FEA :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/FFFFFFFFFFFF1FEA :                     ;   PCM samples
(1)  711/FFFFFFFFFFFF1FEA :                     ; --------------------------------------------------------
(1)  712/FFFFFFFFFFFF1FEA :                     
(1)  713/FFFFFFFFFFFF1FEA :                     System_SramInit:
(1)  717/FFFFFFFFFFFF1FEA :                     
(1)  718/FFFFFFFFFFFF1FEA :                     	; ------------------------------------------------
(1)  719/FFFFFFFFFFFF1FEA :                     	; CD BRAM
(1)  720/FFFFFFFFFFFF1FEA :                     	; ------------------------------------------------
(1)  721/FFFFFFFFFFFF1FEA : 4A78 FA0E           		tst.w	(RAM_SaveEnable).w			; Already initialized?
(1)  722/FFFFFFFFFFFF1FEE : 6666                		bne	.already_set
(1)  723/FFFFFFFFFFFF1FF0 :                     ; 	if MARSCD
(1)  724/FFFFFFFFFFFF1FF0 :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l		; Set RV=1
(1)  725/FFFFFFFFFFFF1FF0 :                     ; 	endif
(1)  726/FFFFFFFFFFFF1FF0 : 6100 0350           		bsr	System_MdMcd_SubWait
(1)  727/FFFFFFFFFFFF1FF4 : 4BFA 0552           		lea	def_SaveInfo(pc),a5			; Init+Load SRAM/BRAM feature
(1)  728/FFFFFFFFFFFF1FF8 : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a6		; Copy-paste info
(1)  729/FFFFFFFFFFFF1FFE : 7E07                		moveq	#($10/2)-1,d7
(1)  730/FFFFFFFFFFFF2000 :                     .copy_paste:
(1)  731/FFFFFFFFFFFF2000 : 3CDD                		move.w	(a5)+,(a6)+
(1)  732/FFFFFFFFFFFF2002 : 51CF FFFC           		dbf	d7,.copy_paste
(1)  733/FFFFFFFFFFFF2006 : 7008                		moveq	#$08,d0					; Init BRAM support
(1)  734/FFFFFFFFFFFF2008 : 6100 034C           		bsr	System_MdMcd_SubTask
(1)  735/FFFFFFFFFFFF200C : 6100 0334           		bsr	System_MdMcd_SubWait
(1)  736/FFFFFFFFFFFF2010 :                     ; 	if MARSCD
(1)  737/FFFFFFFFFFFF2010 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l		; Set RV=0
(1)  738/FFFFFFFFFFFF2010 :                     ; 	endif
(1)  739/FFFFFFFFFFFF2010 : 31FC 0000 FA0E      		move.w	#0,(RAM_SaveEnable).w			; Disable SAVE R/W
(1)  740/FFFFFFFFFFFF2016 : 0C79 FFFE 00A1      		cmp.w	#-2,(sysmcd_reg+mcd_dcomm_s).l		; Got -2 No RAM / Unformatted?
         FFFFFFFFFFFF201C : 2020             
(1)  741/FFFFFFFFFFFF201E : 6732                		beq.s	.cont_save
(1)  742/FFFFFFFFFFFF2020 :                     .not_fail:
(1)  743/FFFFFFFFFFFF2020 : 31FC 0001 FA0E      		move.w	#1,(RAM_SaveEnable).w			; Enable SAVE Read/Write
(1)  744/FFFFFFFFFFFF2026 : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l		; Found the file?
         FFFFFFFFFFFF202C : 2020             
(1)  745/FFFFFFFFFFFF202E : 6622                		bne.s	.cont_save
(1)  746/FFFFFFFFFFFF2030 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  747/FFFFFFFFFFFF2034 : 4DF8 E874           		lea	(RAM_SaveData).w,a6			; If NOT found, Make SAVE template
(1)  748/FFFFFFFFFFFF2038 : 7C00                		moveq	#0,d6
(1)  749/FFFFFFFFFFFF203A : 3E3C 00FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  750/FFFFFFFFFFFF203E :                     .clr_sram:
(1)  751/FFFFFFFFFFFF203E : 1CC6                		move.b	d6,(a6)+
(1)  752/FFFFFFFFFFFF2040 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  753/FFFFFFFFFFFF2044 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  754/FFFFFFFFFFFF2048 : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE template
         FFFFFFFFFFFF204E : E874             
(1)  755/FFFFFFFFFFFF2050 : 6106                		bsr	System_SramSave
(1)  756/FFFFFFFFFFFF2052 :                     .cont_save:
(1)  757/FFFFFFFFFFFF2052 : 614C                		bsr	System_SramLoad				; Get data from BRAM
(1)  758/FFFFFFFFFFFF2054 :                     	; ------------------------------------------------
(1)  782/FFFFFFFFFFFF2054 :                     .cant_use:
(1)  783/FFFFFFFFFFFF2054 : 604A                		bra	System_SramLoad
(1)  784/FFFFFFFFFFFF2056 :                     .already_set:
(1)  785/FFFFFFFFFFFF2056 : 4E75                		rts
(1)  786/FFFFFFFFFFFF2058 :                     
(1)  787/FFFFFFFFFFFF2058 :                     ; --------------------------------------------------------
(1)  788/FFFFFFFFFFFF2058 :                     ; System_SramSave
(1)  789/FFFFFFFFFFFF2058 :                     ;
(1)  790/FFFFFFFFFFFF2058 :                     ; Returns:
(1)  791/FFFFFFFFFFFF2058 :                     ; bcc | Save OK
(1)  792/FFFFFFFFFFFF2058 :                     ; bcs | Save failed
(1)  793/FFFFFFFFFFFF2058 :                     ; --------------------------------------------------------
(1)  794/FFFFFFFFFFFF2058 :                     
(1)  795/FFFFFFFFFFFF2058 :                     System_SramSave:
(1)  799/FFFFFFFFFFFF2058 :                     
(1)  800/FFFFFFFFFFFF2058 :                     	; ------------------------------------------------
(1)  801/FFFFFFFFFFFF2058 :                     	; CD BRAM
(1)  802/FFFFFFFFFFFF2058 :                     	; ------------------------------------------------
(1)  803/FFFFFFFFFFFF2058 : 4A78 FA0E           		tst.w	(RAM_SaveEnable).w
(1)  804/FFFFFFFFFFFF205C : 6740                		beq.s	.cant_use
(1)  805/FFFFFFFFFFFF205E : 40E7                		move.w	sr,-(sp)
(1)  806/FFFFFFFFFFFF2060 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  807/FFFFFFFFFFFF2064 : 4DF8 E874           		lea	(RAM_SaveData).w,a6
(1)  808/FFFFFFFFFFFF2068 : 4BF9 0023 C000      		lea	(sysmcd_wram+WRAM_SaveDataCopy).l,a5
(1)  809/FFFFFFFFFFFF206E : 3E3C 007F           		move.w	#(SET_SRAMSIZE/2)-1,d7
(1)  810/FFFFFFFFFFFF2072 : 3C1E                .copy_save:	move.w	(a6)+,d6
(1)  811/FFFFFFFFFFFF2074 : 3AC6                		move.w	d6,(a5)+
(1)  812/FFFFFFFFFFFF2076 : 51CF FFFA           		dbf	d7,.copy_save
(1)  813/FFFFFFFFFFFF207A :                     ; 	if MARSCD
(1)  814/FFFFFFFFFFFF207A :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  815/FFFFFFFFFFFF207A :                     ; 	endif
(1)  816/FFFFFFFFFFFF207A : 700A                		moveq	#$0A,d0
(1)  817/FFFFFFFFFFFF207C : 6100 02D8           		bsr	System_MdMcd_SubTask
(1)  818/FFFFFFFFFFFF2080 : 6100 0336           		bsr	System_MdMcd_GiveWRAM
(1)  819/FFFFFFFFFFFF2084 : 6100 0310           		bsr	System_MdMcd_WaitWRAM
(1)  820/FFFFFFFFFFFF2088 :                     ; 	if MARSCD
(1)  821/FFFFFFFFFFFF2088 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  822/FFFFFFFFFFFF2088 :                     ; 	endif
(1)  823/FFFFFFFFFFFF2088 : 44FC 0000           		move	#0,ccr
(1)  824/FFFFFFFFFFFF208C : 3E39 00A1 2020      		move.w	(sysmcd_reg+mcd_dcomm_s).l,d7	; Get status
(1)  825/FFFFFFFFFFFF2092 : 6A04                		bpl.s	.save_good
(1)  826/FFFFFFFFFFFF2094 : 44FC 0001           		move	#1,ccr
(1)  827/FFFFFFFFFFFF2098 :                     .save_good:
(1)  828/FFFFFFFFFFFF2098 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  829/FFFFFFFFFFFF209C : 46DF                		move.w	(sp)+,sr
(1)  830/FFFFFFFFFFFF209E :                     .cant_use:
(1)  831/FFFFFFFFFFFF209E :                     	; ------------------------------------------------
(1)  861/FFFFFFFFFFFF209E : 4E75                		rts
(1)  862/FFFFFFFFFFFF20A0 :                     
(1)  863/FFFFFFFFFFFF20A0 :                     ; --------------------------------------------------------
(1)  864/FFFFFFFFFFFF20A0 :                     ; System_SramLoad
(1)  865/FFFFFFFFFFFF20A0 :                     ;
(1)  866/FFFFFFFFFFFF20A0 :                     ; Returns:
(1)  867/FFFFFFFFFFFF20A0 :                     ; bcc | Save OK
(1)  868/FFFFFFFFFFFF20A0 :                     ; bcs | Save not found
(1)  869/FFFFFFFFFFFF20A0 :                     ; --------------------------------------------------------
(1)  870/FFFFFFFFFFFF20A0 :                     
(1)  871/FFFFFFFFFFFF20A0 :                     System_SramLoad:
(1)  875/FFFFFFFFFFFF20A0 :                     	; ------------------------------------------------
(1)  876/FFFFFFFFFFFF20A0 :                     	; CD BRAM
(1)  877/FFFFFFFFFFFF20A0 :                     	; ------------------------------------------------
(1)  878/FFFFFFFFFFFF20A0 : 4A78 FA0E           		tst.w	(RAM_SaveEnable).w
(1)  879/FFFFFFFFFFFF20A4 : 6730                		beq.s	.cant_use
(1)  880/FFFFFFFFFFFF20A6 : 40E7                		move.w	sr,-(sp)
(1)  881/FFFFFFFFFFFF20A8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  882/FFFFFFFFFFFF20AC :                     ; 	if MARSCD
(1)  883/FFFFFFFFFFFF20AC :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  884/FFFFFFFFFFFF20AC :                     ; 	endif
(1)  885/FFFFFFFFFFFF20AC : 7009                		moveq	#$09,d0
(1)  886/FFFFFFFFFFFF20AE : 6100 02A6           		bsr	System_MdMcd_SubTask
(1)  887/FFFFFFFFFFFF20B2 : 6100 0304           		bsr	System_MdMcd_GiveWRAM
(1)  888/FFFFFFFFFFFF20B6 : 6100 02DE           		bsr	System_MdMcd_WaitWRAM
(1)  889/FFFFFFFFFFFF20BA :                     ; 	if MARSCD
(1)  890/FFFFFFFFFFFF20BA :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  891/FFFFFFFFFFFF20BA :                     ; 	endif
(1)  892/FFFFFFFFFFFF20BA : 4DF9 0023 C000      		lea	(sysmcd_wram+WRAM_SaveDataCopy).l,a6
(1)  893/FFFFFFFFFFFF20C0 : 4BF8 E874           		lea	(RAM_SaveData).w,a5
(1)  894/FFFFFFFFFFFF20C4 : 3E3C 007F           		move.w	#(SET_SRAMSIZE/2)-1,d7
(1)  895/FFFFFFFFFFFF20C8 : 3C1E                .copy_save:	move.w	(a6)+,d6
(1)  896/FFFFFFFFFFFF20CA : 3AC6                		move.w	d6,(a5)+
(1)  897/FFFFFFFFFFFF20CC : 51CF FFFA           		dbf	d7,.copy_save
(1)  898/FFFFFFFFFFFF20D0 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  899/FFFFFFFFFFFF20D4 : 46DF                		move.w	(sp)+,sr
(1)  900/FFFFFFFFFFFF20D6 :                     .cant_use:
(1)  901/FFFFFFFFFFFF20D6 :                     	; ------------------------------------------------
(1)  934/FFFFFFFFFFFF20D6 : 4E75                		rts
(1)  935/FFFFFFFFFFFF20D8 :                     
(1)  936/FFFFFFFFFFFF20D8 :                     ; ============================================================
(1)  937/FFFFFFFFFFFF20D8 :                     ; --------------------------------------------------------
(1)  938/FFFFFFFFFFFF20D8 :                     ; System_Default
(1)  939/FFFFFFFFFFFF20D8 :                     ;
(1)  940/FFFFFFFFFFFF20D8 :                     ; Initializes current screen mode
(1)  941/FFFFFFFFFFFF20D8 :                     ;
(1)  942/FFFFFFFFFFFF20D8 :                     ; Uses:
(1)  943/FFFFFFFFFFFF20D8 :                     ; ALL
(1)  944/FFFFFFFFFFFF20D8 :                     ; --------------------------------------------------------
(1)  945/FFFFFFFFFFFF20D8 :                     
(1)  946/FFFFFFFFFFFF20D8 :                     System_Default:
(1)  947/FFFFFFFFFFFF20D8 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/FFFFFFFFFFFF20DC : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/FFFFFFFFFFFF20E0 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/FFFFFFFFFFFF20E4 : 7C00                		moveq	#0,d6
(1)  951/FFFFFFFFFFFF20E6 :                     .clr_loop:
(1)  952/FFFFFFFFFFFF20E6 : 1CC6                		move.b	d6,(a6)+
(1)  953/FFFFFFFFFFFF20E8 : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/FFFFFFFFFFFF20EC : 6100 E594           		bsr	Video_Clear
(1)  955/FFFFFFFFFFFF20F0 : 6100 E222           		bsr	Video_Default
(1)  956/FFFFFFFFFFFF20F4 : 6000 053E           		bra	Object_Init			; Reset all objects
(1)  957/FFFFFFFFFFFF20F8 :                     
(1)  958/FFFFFFFFFFFF20F8 :                     ; ====================================================================
(1)  959/FFFFFFFFFFFF20F8 :                     ; ----------------------------------------------------------------
(1)  960/FFFFFFFFFFFF20F8 :                     ; Default interrupts
(1)  961/FFFFFFFFFFFF20F8 :                     ; ----------------------------------------------------------------
(1)  962/FFFFFFFFFFFF20F8 :                     
(1)  963/FFFFFFFFFFFF20F8 :                     ; --------------------------------------------------------
(1)  964/FFFFFFFFFFFF20F8 :                     ; VBlank
(1)  965/FFFFFFFFFFFF20F8 :                     ; --------------------------------------------------------
(1)  966/FFFFFFFFFFFF20F8 :                     
(1)  967/FFFFFFFFFFFF20F8 :                     VInt_Default:
(1)  968/FFFFFFFFFFFF20F8 :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/FFFFFFFFFFFF20F8 :                     ; 		bsr	System_Input
(1)  970/FFFFFFFFFFFF20F8 :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/FFFFFFFFFFFF20F8 :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/FFFFFFFFFFFF20F8 : 4E73                		rte
(1)  973/FFFFFFFFFFFF20FA :                     
(1)  974/FFFFFFFFFFFF20FA :                     ; --------------------------------------------------------
(1)  975/FFFFFFFFFFFF20FA :                     ; HBlank
(1)  976/FFFFFFFFFFFF20FA :                     ; --------------------------------------------------------
(1)  977/FFFFFFFFFFFF20FA :                     
(1)  978/FFFFFFFFFFFF20FA :                     HInt_Default:
(1)  979/FFFFFFFFFFFF20FA : 4E73                		rte
(1)  980/FFFFFFFFFFFF20FC :                     
(1)  981/FFFFFFFFFFFF20FC :                     ; --------------------------------------------------------
(1)  982/FFFFFFFFFFFF20FC :                     ; External interrupt
(1)  983/FFFFFFFFFFFF20FC :                     ; --------------------------------------------------------
(1)  984/FFFFFFFFFFFF20FC :                     
(1)  985/FFFFFFFFFFFF20FC :                     ExtInt_Default:
(1)  986/FFFFFFFFFFFF20FC : 4E73                		rte
(1)  987/FFFFFFFFFFFF20FE :                     
(1)  988/FFFFFFFFFFFF20FE :                     ; ====================================================================
(1)  989/FFFFFFFFFFFF20FE :                     ; ------------------------------------------------------------
(1)  990/FFFFFFFFFFFF20FE :                     ; Subroutines
(1)  991/FFFFFFFFFFFF20FE :                     ; ------------------------------------------------------------
(1)  992/FFFFFFFFFFFF20FE :                     
(1)  993/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1)  994/FFFFFFFFFFFF20FE :                     ; System_Random, System_Random_Seed
(1)  995/FFFFFFFFFFFF20FE :                     ;
(1)  996/FFFFFFFFFFFF20FE :                     ; Generate random value
(1)  997/FFFFFFFFFFFF20FE :                     ;
(1)  998/FFFFFFFFFFFF20FE :                     ; Input:
(1)  999/FFFFFFFFFFFF20FE :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/FFFFFFFFFFFF20FE :                     ;
(1) 1001/FFFFFFFFFFFF20FE :                     ; Returns:
(1) 1002/FFFFFFFFFFFF20FE :                     ; d0.l | Result value
(1) 1003/FFFFFFFFFFFF20FE :                     ; --------------------------------------------------------
(1) 1004/FFFFFFFFFFFF20FE :                     
(1) 1005/FFFFFFFFFFFF20FE :                     System_Random_Seed:
(1) 1006/FFFFFFFFFFFF20FE : 2F04                		move.l	d4,-(sp)
(1) 1007/FFFFFFFFFFFF2100 : 2800                		move.l	d0,d4
(1) 1008/FFFFFFFFFFFF2102 : 6114                		bsr	sysRnd_MkValue
(1) 1009/FFFFFFFFFFFF2104 : 281F                		move.l	(sp)+,d4
(1) 1010/FFFFFFFFFFFF2106 : 4E75                		rts
(1) 1011/FFFFFFFFFFFF2108 :                     System_Random:
(1) 1012/FFFFFFFFFFFF2108 : 2F04                		move.l	d4,-(sp)
(1) 1013/FFFFFFFFFFFF210A : 2838 F9F8           		move.l	(RAM_SysRandom).w,d4
(1) 1014/FFFFFFFFFFFF210E : 6108                		bsr	sysRnd_MkValue
(1) 1015/FFFFFFFFFFFF2110 : 21C4 F9F8           		move.l	d4,(RAM_SysRandom).w
(1) 1016/FFFFFFFFFFFF2114 : 281F                		move.l	(sp)+,d4
(1) 1017/FFFFFFFFFFFF2116 : 4E75                		rts
(1) 1018/FFFFFFFFFFFF2118 :                     sysRnd_MkValue:
(1) 1019/FFFFFFFFFFFF2118 : 4A84                		tst.l	d4
(1) 1020/FFFFFFFFFFFF211A : 660E                		bne.s	.has_seed
(1) 1021/FFFFFFFFFFFF211C : 2838 E858           		move.l	(RAM_FrameCount).w,d4
(1) 1022/FFFFFFFFFFFF2120 : E1BC                		rol.l	d0,d4
(1) 1023/FFFFFFFFFFFF2122 : E2BC                		ror.l	d1,d4
(1) 1024/FFFFFFFFFFFF2124 : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/FFFFFFFFFFFF212A :                     .has_seed:
(1) 1026/FFFFFFFFFFFF212A : 2004                		move.l	d4,d0
(1) 1027/FFFFFFFFFFFF212C : E484                		asr.l	#2,d4
(1) 1028/FFFFFFFFFFFF212E : D880                		add.l	d0,d4
(1) 1029/FFFFFFFFFFFF2130 : E79C                		rol.l	#3,d4
(1) 1030/FFFFFFFFFFFF2132 : D880                		add.l	d0,d4
(1) 1031/FFFFFFFFFFFF2134 : 3004                		move.w	d4,d0
(1) 1032/FFFFFFFFFFFF2136 : 4844                		swap	d4
(1) 1033/FFFFFFFFFFFF2138 : D044                		add.w	d4,d0
(1) 1034/FFFFFFFFFFFF213A : 3800                		move.w	d0,d4
(1) 1035/FFFFFFFFFFFF213C : E0BC                		ror.l	d0,d4
(1) 1036/FFFFFFFFFFFF213E : 4844                		swap	d4
(1) 1037/FFFFFFFFFFFF2140 : 4E75                		rts
(1) 1038/FFFFFFFFFFFF2142 :                     
(1) 1039/FFFFFFFFFFFF2142 :                     ; --------------------------------------------------------
(1) 1040/FFFFFFFFFFFF2142 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/FFFFFFFFFFFF2142 :                     ;
(1) 1042/FFFFFFFFFFFF2142 :                     ; Pick a random number using a maximum value,
(1) 1043/FFFFFFFFFFFF2142 :                     ; uses System_Random
(1) 1044/FFFFFFFFFFFF2142 :                     ;
(1) 1045/FFFFFFFFFFFF2142 :                     ; Input:
(1) 1046/FFFFFFFFFFFF2142 :                     ; d0.l | Maximum number to use + 1
(1) 1047/FFFFFFFFFFFF2142 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/FFFFFFFFFFFF2142 :                     ;
(1) 1049/FFFFFFFFFFFF2142 :                     ; Returns:
(1) 1050/FFFFFFFFFFFF2142 :                     ; d0.w | Output value
(1) 1051/FFFFFFFFFFFF2142 :                     ; --------------------------------------------------------
(1) 1052/FFFFFFFFFFFF2142 :                     
(1) 1053/FFFFFFFFFFFF2142 :                     System_DiceRoll_Seed:
(1) 1054/FFFFFFFFFFFF2142 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/FFFFFFFFFFFF2146 : 2A00                		move.l	d0,d5
(1) 1056/FFFFFFFFFFFF2148 : 2801                		move.l	d1,d4
(1) 1057/FFFFFFFFFFFF214A : 61B2                		bsr	System_Random_Seed
(1) 1058/FFFFFFFFFFFF214C : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/FFFFFFFFFFFF2152 : C0C5                		mulu.w	d5,d0
(1) 1060/FFFFFFFFFFFF2154 : 4840                		swap	d0
(1) 1061/FFFFFFFFFFFF2156 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/FFFFFFFFFFFF215C : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/FFFFFFFFFFFF2160 : 4E75                		rts
(1) 1064/FFFFFFFFFFFF2162 :                     
(1) 1065/FFFFFFFFFFFF2162 :                     System_DiceRoll:
(1) 1066/FFFFFFFFFFFF2162 : 2F04                		move.l	d4,-(sp)
(1) 1067/FFFFFFFFFFFF2164 : 2800                		move.l	d0,d4
(1) 1068/FFFFFFFFFFFF2166 : 61A0                		bsr	System_Random
(1) 1069/FFFFFFFFFFFF2168 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/FFFFFFFFFFFF216E : C0C4                		mulu.w	d4,d0
(1) 1071/FFFFFFFFFFFF2170 : 4840                		swap	d0
(1) 1072/FFFFFFFFFFFF2172 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/FFFFFFFFFFFF2178 : 281F                		move.l	(sp)+,d4
(1) 1074/FFFFFFFFFFFF217A : 4E75                		rts
(1) 1075/FFFFFFFFFFFF217C :                     
(1) 1076/FFFFFFFFFFFF217C :                     ; --------------------------------------------------------
(1) 1077/FFFFFFFFFFFF217C :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/FFFFFFFFFFFF217C :                     ;
(1) 1079/FFFFFFFFFFFF217C :                     ; Get Sine or Cosine value
(1) 1080/FFFFFFFFFFFF217C :                     ;
(1) 1081/FFFFFFFFFFFF217C :                     ; Input:
(1) 1082/FFFFFFFFFFFF217C :                     ; d0.w | Tan value: 0-511
(1) 1083/FFFFFFFFFFFF217C :                     ;
(1) 1084/FFFFFFFFFFFF217C :                     ; Returns:
(1) 1085/FFFFFFFFFFFF217C :                     ; d1.w | Result
(1) 1086/FFFFFFFFFFFF217C :                     ; --------------------------------------------------------
(1) 1087/FFFFFFFFFFFF217C :                     
(1) 1088/FFFFFFFFFFFF217C :                     System_SineWave_Cos:
(1) 1089/FFFFFFFFFFFF217C : 2F07                		move.l	d7,-(sp)
(1) 1090/FFFFFFFFFFFF217E : 3E00                		move.w	d0,d7
(1) 1091/FFFFFFFFFFFF2180 : 0647 0080           		addi.w  #$80,d7
(1) 1092/FFFFFFFFFFFF2184 : 6004                		bra	sys_SineWave
(1) 1093/FFFFFFFFFFFF2186 :                     System_SineWave:
(1) 1094/FFFFFFFFFFFF2186 : 2F07                		move.l	d7,-(sp)
(1) 1095/FFFFFFFFFFFF2188 : 3E00                		move.w	d0,d7
(1) 1096/FFFFFFFFFFFF218A :                     sys_SineWave:
(1) 1097/FFFFFFFFFFFF218A : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/FFFFFFFFFFFF218E : 3207                		move.w	d7,d1
(1) 1099/FFFFFFFFFFFF2190 : 0807 0007           		btst	#7,d7
(1) 1100/FFFFFFFFFFFF2194 : 6702                		beq.s	.loc_7EFA
(1) 1101/FFFFFFFFFFFF2196 : 4641                		not.w	d1
(1) 1102/FFFFFFFFFFFF2198 :                     .loc_7EFA:
(1) 1103/FFFFFFFFFFFF2198 : 0241 007F           		andi.w  #$7F,d1
(1) 1104/FFFFFFFFFFFF219C : D241                		add.w	d1,d1
(1) 1105/FFFFFFFFFFFF219E : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/FFFFFFFFFFFF21A2 : 0807 0008           		btst    #8,d7
(1) 1107/FFFFFFFFFFFF21A6 : 6702                		beq.s   .loc_7F0C
(1) 1108/FFFFFFFFFFFF21A8 : 4441                		neg.w   d1
(1) 1109/FFFFFFFFFFFF21AA :                     .loc_7F0C:
(1) 1110/FFFFFFFFFFFF21AA : 48C1                		ext.l	d1
(1) 1111/FFFFFFFFFFFF21AC : 2E1F                		move.l (sp)+,d7
(1) 1112/FFFFFFFFFFFF21AE : 4E75                		rts
(1) 1113/FFFFFFFFFFFF21B0 :                     
(1) 1114/FFFFFFFFFFFF21B0 :                     .sine_data:
(1) 1115/FFFFFFFFFFFF21B0 :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/FFFFFFFFFFFF22B0 :                     		align 2
(1) 1117/FFFFFFFFFFFF22B2 :                     
(1) 1118/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 1119/FFFFFFFFFFFF22B2 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/FFFFFFFFFFFF22B2 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/FFFFFFFFFFFF22B2 :                     ;
(1) 1122/FFFFFFFFFFFF22B2 :                     ; Increment/Decrement BCD value
(1) 1123/FFFFFFFFFFFF22B2 :                     ; for Scores, Lives, and such.
(1) 1124/FFFFFFFFFFFF22B2 :                     ;
(1) 1125/FFFFFFFFFFFF22B2 :                     ; Input:
(1) 1126/FFFFFFFFFFFF22B2 :                     ; d0.? | BCD value input
(1) 1127/FFFFFFFFFFFF22B2 :                     ; d1.l | Increment/Decrement by
(1) 1128/FFFFFFFFFFFF22B2 :                     ;
(1) 1129/FFFFFFFFFFFF22B2 :                     ; Returns:
(1) 1130/FFFFFFFFFFFF22B2 :                     ; d0.? | BCD value output
(1) 1131/FFFFFFFFFFFF22B2 :                     ; --------------------------------------------------------
(1) 1132/FFFFFFFFFFFF22B2 :                     
(1) 1133/FFFFFFFFFFFF22B2 :                     ; TODO: An overflow check
(1) 1134/FFFFFFFFFFFF22B2 :                     
(1) 1135/FFFFFFFFFFFF22B2 :                     System_BCD_SubB:
(1) 1136/FFFFFFFFFFFF22B2 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/FFFFFFFFFFFF22B8 : 6006                		bra.s	System_BCD_SubL
(1) 1138/FFFFFFFFFFFF22BA :                     System_BCD_SubW:
(1) 1139/FFFFFFFFFFFF22BA : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/FFFFFFFFFFFF22C0 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/FFFFFFFFFFFF22C0 :                     System_BCD_SubL:
(1) 1142/FFFFFFFFFFFF22C0 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/FFFFFFFFFFFF22C4 : 613C                		bsr	sysBCD_SpOut
(1) 1144/FFFFFFFFFFFF22C6 : 023C 0000           		and	#0,ccr
(1) 1145/FFFFFFFFFFFF22CA : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/FFFFFFFFFFFF22CC : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/FFFFFFFFFFFF22CE : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/FFFFFFFFFFFF22D0 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/FFFFFFFFFFFF22D2 : 2016                		move.l	(a6),d0
(1) 1150/FFFFFFFFFFFF22D4 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/FFFFFFFFFFFF22D8 : 4E75                		rts
(1) 1152/FFFFFFFFFFFF22DA :                     System_BCD_AddB:
(1) 1153/FFFFFFFFFFFF22DA : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/FFFFFFFFFFFF22E0 : 6006                		bra.s	System_BCD_AddL
(1) 1155/FFFFFFFFFFFF22E2 :                     System_BCD_AddW:
(1) 1156/FFFFFFFFFFFF22E2 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/FFFFFFFFFFFF22E8 :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/FFFFFFFFFFFF22E8 :                     System_BCD_AddL:
(1) 1159/FFFFFFFFFFFF22E8 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/FFFFFFFFFFFF22EC : 6114                		bsr	sysBCD_SpOut
(1) 1161/FFFFFFFFFFFF22EE : 023C 0000           		and	#0,ccr
(1) 1162/FFFFFFFFFFFF22F2 : CD0D                		abcd	-(a5),-(a6)
(1) 1163/FFFFFFFFFFFF22F4 : CD0D                		abcd	-(a5),-(a6)
(1) 1164/FFFFFFFFFFFF22F6 : CD0D                		abcd	-(a5),-(a6)
(1) 1165/FFFFFFFFFFFF22F8 : CD0D                		abcd	-(a5),-(a6)
(1) 1166/FFFFFFFFFFFF22FA : 2016                		move.l	(a6),d0
(1) 1167/FFFFFFFFFFFF22FC : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/FFFFFFFFFFFF2300 : 4E75                		rts
(1) 1169/FFFFFFFFFFFF2302 :                     sysBCD_SpOut:
(1) 1170/FFFFFFFFFFFF2302 : 598F                		subq.l	#4,sp
(1) 1171/FFFFFFFFFFFF2304 : 2C4F                		move.l	sp,a6
(1) 1172/FFFFFFFFFFFF2306 : 598F                		subq.l	#4,sp
(1) 1173/FFFFFFFFFFFF2308 : 2A4F                		move.l	sp,a5
(1) 1174/FFFFFFFFFFFF230A : 2C80                		move.l	d0,(a6)
(1) 1175/FFFFFFFFFFFF230C : 2A81                		move.l	d1,(a5)
(1) 1176/FFFFFFFFFFFF230E : DCFC 0004           		adda	#4,a6
(1) 1177/FFFFFFFFFFFF2312 : DAFC 0004           		adda	#4,a5
(1) 1178/FFFFFFFFFFFF2316 : 508F                		addq.l	#8,sp
(1) 1179/FFFFFFFFFFFF2318 : 4E75                		rts
(1) 1180/FFFFFFFFFFFF231A :                     
(1) 1181/FFFFFFFFFFFF231A :                     ; --------------------------------------------------------
(1) 1182/FFFFFFFFFFFF231A :                     ; System_SetIntJumps
(1) 1183/FFFFFFFFFFFF231A :                     ;
(1) 1184/FFFFFFFFFFFF231A :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/FFFFFFFFFFFF231A :                     ; generated by VDP
(1) 1186/FFFFFFFFFFFF231A :                     ;
(1) 1187/FFFFFFFFFFFF231A :                     ; Input:
(1) 1188/FFFFFFFFFFFF231A :                     ; d0.l | New VBlank location
(1) 1189/FFFFFFFFFFFF231A :                     ; d1.l | New HBlank location
(1) 1190/FFFFFFFFFFFF231A :                     ; d2.l | New External location
(1) 1191/FFFFFFFFFFFF231A :                     ;
(1) 1192/FFFFFFFFFFFF231A :                     ; Notes:
(1) 1193/FFFFFFFFFFFF231A :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/FFFFFFFFFFFF231A :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/FFFFFFFFFFFF231A :                     ; --------------------------------------------------------
(1) 1196/FFFFFFFFFFFF231A :                     
(1) 1197/FFFFFFFFFFFF231A :                     System_SetIntJumps:
(1) 1198/FFFFFFFFFFFF231A : 4A80                		tst.l	d0
(1) 1199/FFFFFFFFFFFF231C : 6704                		beq.s	.no_vint
(1) 1201/FFFFFFFFFFFF231E : 21C0 FD08           		move.l	d0,($FFFFFD06+2).w
(1) 1205/FFFFFFFFFFFF2322 :                     .no_vint:
(1) 1206/FFFFFFFFFFFF2322 : 4A81                		tst.l	d1
(1) 1207/FFFFFFFFFFFF2324 : 6704                		beq.s	.no_hint
(1) 1209/FFFFFFFFFFFF2326 : 21C1 FD0E           		move.l	d1,($FFFFFD0C+2).w
(1) 1213/FFFFFFFFFFFF232A :                     .no_hint:
(1) 1214/FFFFFFFFFFFF232A : 4A82                		tst.l	d2
(1) 1215/FFFFFFFFFFFF232C : 6704                		beq.s	.no_exint
(1) 1217/FFFFFFFFFFFF232E : 21C2 FD14           		move.l	d2,($FFFFFD12+2).w
(1) 1221/FFFFFFFFFFFF2332 :                     .no_exint:
(1) 1222/FFFFFFFFFFFF2332 : 4E75                		rts
(1) 1223/FFFFFFFFFFFF2334 :                     
(1) 1224/FFFFFFFFFFFF2334 :                     ; ====================================================================
(1) 1225/FFFFFFFFFFFF2334 :                     ; ----------------------------------------------------------------
(1) 1226/FFFFFFFFFFFF2334 :                     ; SEGA CD / CD32X ONLY
(1) 1227/FFFFFFFFFFFF2334 :                     ; ----------------------------------------------------------------
(1) 1228/FFFFFFFFFFFF2334 :                     
(1) 1229/FFFFFFFFFFFF2334 :                     ; --------------------------------------------------------
(1) 1230/FFFFFFFFFFFF2334 :                     ; System_MdMcd_Interrupt
(1) 1231/FFFFFFFFFFFF2334 :                     ;
(1) 1232/FFFFFFFFFFFF2334 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/FFFFFFFFFFFF2334 :                     ; VBlank.
(1) 1234/FFFFFFFFFFFF2334 :                     ; --------------------------------------------------------
(1) 1235/FFFFFFFFFFFF2334 :                     
(1) 1236/FFFFFFFFFFFF2334 :                     System_MdMcd_Interrupt:
(1) 1237/FFFFFFFFFFFF2334 : 2F07                		move.l	d7,-(sp)
(1) 1238/FFFFFFFFFFFF2336 :                     ; .wait_first:
(1) 1239/FFFFFFFFFFFF2336 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/FFFFFFFFFFFF2336 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/FFFFFFFFFFFF2336 :                     ; 		andi.w	#$C0,d7
(1) 1242/FFFFFFFFFFFF2336 :                     ; 		cmpi.w	#$C0,d7
(1) 1243/FFFFFFFFFFFF2336 :                     ; 		beq.s	.wait_first
(1) 1244/FFFFFFFFFFFF2336 :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/FFFFFFFFFFFF2336 : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
         FFFFFFFFFFFF233C : 2000             
(1) 1246/FFFFFFFFFFFF233E : 2E1F                		move.l	(sp)+,d7
(1) 1247/FFFFFFFFFFFF2340 : 4E75                		rts
(1) 1248/FFFFFFFFFFFF2342 :                     
(1) 1249/FFFFFFFFFFFF2342 :                     ; --------------------------------------------------------
(1) 1250/FFFFFFFFFFFF2342 :                     ; System_MdMcd_SubWait
(1) 1251/FFFFFFFFFFFF2342 :                     ;
(1) 1252/FFFFFFFFFFFF2342 :                     ; Waits until Sub-CPU finishes.
(1) 1253/FFFFFFFFFFFF2342 :                     ;
(1) 1254/FFFFFFFFFFFF2342 :                     ; Uses:
(1) 1255/FFFFFFFFFFFF2342 :                     ; d7
(1) 1256/FFFFFFFFFFFF2342 :                     ; --------------------------------------------------------
(1) 1257/FFFFFFFFFFFF2342 :                     
(1) 1258/FFFFFFFFFFFF2342 :                     System_MdMcd_SubWait:
(1) 1260/FFFFFFFFFFFF2342 : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1261/FFFFFFFFFFFF2348 : 6BF8                		bmi.s	.wait_sub_o
(1) 1263/FFFFFFFFFFFF234A : 4E75                		rts
(1) 1264/FFFFFFFFFFFF234C :                     
(1) 1265/FFFFFFFFFFFF234C :                     ; --------------------------------------------------------
(1) 1266/FFFFFFFFFFFF234C :                     ; System_MdMcd_SubEnter
(1) 1267/FFFFFFFFFFFF234C :                     ;
(1) 1268/FFFFFFFFFFFF234C :                     ; Waits until Sub-CPU starts.
(1) 1269/FFFFFFFFFFFF234C :                     ;
(1) 1270/FFFFFFFFFFFF234C :                     ; Uses:
(1) 1271/FFFFFFFFFFFF234C :                     ; d7
(1) 1272/FFFFFFFFFFFF234C :                     ; --------------------------------------------------------
(1) 1273/FFFFFFFFFFFF234C :                     
(1) 1274/FFFFFFFFFFFF234C :                     System_MdMcd_SubEnter:
(1) 1276/FFFFFFFFFFFF234C : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1277/FFFFFFFFFFFF2352 : 6AF8                		bpl.s	.wait_sub_o
(1) 1279/FFFFFFFFFFFF2354 : 4E75                		rts
(1) 1280/FFFFFFFFFFFF2356 :                     
(1) 1281/FFFFFFFFFFFF2356 :                     ; --------------------------------------------------------
(1) 1282/FFFFFFFFFFFF2356 :                     ; System_MdMcd_SubTask
(1) 1283/FFFFFFFFFFFF2356 :                     ;
(1) 1284/FFFFFFFFFFFF2356 :                     ; Request task to Sub-CPU
(1) 1285/FFFFFFFFFFFF2356 :                     ;
(1) 1286/FFFFFFFFFFFF2356 :                     ; Input:
(1) 1287/FFFFFFFFFFFF2356 :                     ; d0.b | Task number
(1) 1288/FFFFFFFFFFFF2356 :                     ;
(1) 1289/FFFFFFFFFFFF2356 :                     ; Uses:
(1) 1290/FFFFFFFFFFFF2356 :                     ; d7/a6
(1) 1291/FFFFFFFFFFFF2356 :                     ;
(1) 1292/FFFFFFFFFFFF2356 :                     ; Notes:
(1) 1293/FFFFFFFFFFFF2356 :                     ; This exits without waiting SUB to finish,
(1) 1294/FFFFFFFFFFFF2356 :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/FFFFFFFFFFFF2356 :                     ; --------------------------------------------------------
(1) 1296/FFFFFFFFFFFF2356 :                     
(1) 1297/FFFFFFFFFFFF2356 :                     System_MdMcd_SubTask:
(1) 1299/FFFFFFFFFFFF2356 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1300/FFFFFFFFFFFF235A : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m).l,a6
(1) 1301/FFFFFFFFFFFF2360 :                     .wait_first:
(1) 1302/FFFFFFFFFFFF2360 : 61E0                		bsr	System_MdMcd_SubWait
(1) 1303/FFFFFFFFFFFF2362 : 1E16                		move.b	(a6),d7
(1) 1304/FFFFFFFFFFFF2364 : 0247 00C0           		andi.w	#$C0,d7
(1) 1305/FFFFFFFFFFFF2368 : 0C47 00C0           		cmpi.w	#$C0,d7
(1) 1306/FFFFFFFFFFFF236C : 67F2                		beq.s	.wait_first
(1) 1307/FFFFFFFFFFFF236E : 7C08                		moveq	#9-1,d6
(1) 1308/FFFFFFFFFFFF2370 : 1C80                		move.b	d0,(a6)		; Set this command
(1) 1309/FFFFFFFFFFFF2372 :                     .make_sure:
(1) 1310/FFFFFFFFFFFF2372 : 1E16                		move.b	(a6),d7
(1) 1311/FFFFFFFFFFFF2374 : BE00                		cmp.b	d0,d7
(1) 1312/FFFFFFFFFFFF2376 : 66E8                		bne.s	.wait_first
(1) 1313/FFFFFFFFFFFF2378 : 51CE FFF8           		dbf	d6,.make_sure
(1) 1314/FFFFFFFFFFFF237C : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7	; Wait until SUB gets busy
(1) 1315/FFFFFFFFFFFF2380 : 6AFA                		bpl.s	.wait_sub_i
(1) 1316/FFFFFFFFFFFF2382 : 0247 00C0           		andi.w	#$C0,d7
(1) 1317/FFFFFFFFFFFF2386 : BE7C 00C0           		cmp.w	#$C0,d7
(1) 1318/FFFFFFFFFFFF238A : 67D4                		beq.s	.wait_first
(1) 1319/FFFFFFFFFFFF238C : 1CBC 0000           		move.b	#$00,(a6)
(1) 1320/FFFFFFFFFFFF2390 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1322/FFFFFFFFFFFF2394 : 4E75                		rts
(1) 1323/FFFFFFFFFFFF2396 :                     
(1) 1324/FFFFFFFFFFFF2396 :                     ; --------------------------------------------------------
(1) 1325/FFFFFFFFFFFF2396 :                     ; System_MdMcd_WaitWRAM
(1) 1326/FFFFFFFFFFFF2396 :                     ;
(1) 1327/FFFFFFFFFFFF2396 :                     ; Wait for Word-RAM permission.
(1) 1328/FFFFFFFFFFFF2396 :                     ; --------------------------------------------------------
(1) 1329/FFFFFFFFFFFF2396 :                     
(1) 1330/FFFFFFFFFFFF2396 :                     System_MdMcd_WaitWRAM:
(1) 1331/FFFFFFFFFFFF2396 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF239C : 2003             
(1) 1332/FFFFFFFFFFFF239E : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/FFFFFFFFFFFF23A0 : 4E75                		rts
(1) 1334/FFFFFFFFFFFF23A2 :                     
(1) 1335/FFFFFFFFFFFF23A2 :                     ; --------------------------------------------------------
(1) 1336/FFFFFFFFFFFF23A2 :                     ; System_MdMcd_CheckWRAM
(1) 1337/FFFFFFFFFFFF23A2 :                     ;
(1) 1338/FFFFFFFFFFFF23A2 :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/FFFFFFFFFFFF23A2 :                     ;
(1) 1340/FFFFFFFFFFFF23A2 :                     ; Returns:
(1) 1341/FFFFFFFFFFFF23A2 :                     ; beq | Word-RAM is available
(1) 1342/FFFFFFFFFFFF23A2 :                     ; bne | Word-RAM is locked
(1) 1343/FFFFFFFFFFFF23A2 :                     ; --------------------------------------------------------
(1) 1344/FFFFFFFFFFFF23A2 :                     
(1) 1345/FFFFFFFFFFFF23A2 :                     System_MdMcd_CheckWRAM:
(1) 1346/FFFFFFFFFFFF23A2 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF23A8 : 2003             
(1) 1347/FFFFFFFFFFFF23AA : 6706                		beq.s	.no_ret
(1) 1348/FFFFFFFFFFFF23AC : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/FFFFFFFFFFFF23B0 : 4E75                		rts
(1) 1350/FFFFFFFFFFFF23B2 :                     .no_ret:
(1) 1351/FFFFFFFFFFFF23B2 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/FFFFFFFFFFFF23B6 : 4E75                		rts
(1) 1353/FFFFFFFFFFFF23B8 :                     
(1) 1354/FFFFFFFFFFFF23B8 :                     ; --------------------------------------------------------
(1) 1355/FFFFFFFFFFFF23B8 :                     ; System_MdMcd_GiveWRAM
(1) 1356/FFFFFFFFFFFF23B8 :                     ;
(1) 1357/FFFFFFFFFFFF23B8 :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/FFFFFFFFFFFF23B8 :                     ; --------------------------------------------------------
(1) 1359/FFFFFFFFFFFF23B8 :                     
(1) 1360/FFFFFFFFFFFF23B8 :                     System_MdMcd_GiveWRAM:
(1) 1361/FFFFFFFFFFFF23B8 : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF23BE : 2003             
(1) 1362/FFFFFFFFFFFF23C0 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/FFFFFFFFFFFF23C2 : 4E75                		rts
(1) 1364/FFFFFFFFFFFF23C4 :                     
(1) 1365/FFFFFFFFFFFF23C4 :                     ; --------------------------------------------------------
(1) 1366/FFFFFFFFFFFF23C4 :                     ; System_MdMcd_ReadFileRAM
(1) 1367/FFFFFFFFFFFF23C4 :                     ;
(1) 1368/FFFFFFFFFFFF23C4 :                     ; Read file from disc and transfer output the
(1) 1369/FFFFFFFFFFFF23C4 :                     ; data to a1, uses communication ports.
(1) 1370/FFFFFFFFFFFF23C4 :                     ;
(1) 1371/FFFFFFFFFFFF23C4 :                     ; Input:
(1) 1372/FFFFFFFFFFFF23C4 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/FFFFFFFFFFFF23C4 :                     ; a1   | Output location in RAM
(1) 1374/FFFFFFFFFFFF23C4 :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/FFFFFFFFFFFF23C4 :                     ;
(1) 1376/FFFFFFFFFFFF23C4 :                     ; Uses:
(1) 1377/FFFFFFFFFFFF23C4 :                     ; d7,a0-a1,a5-a6
(1) 1378/FFFFFFFFFFFF23C4 :                     ;
(1) 1379/FFFFFFFFFFFF23C4 :                     ; Notes:
(1) 1380/FFFFFFFFFFFF23C4 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/FFFFFFFFFFFF23C4 :                     ; --------------------------------------------------------
(1) 1382/FFFFFFFFFFFF23C4 :                     
(1) 1383/FFFFFFFFFFFF23C4 :                     System_MdMcd_RdFile_RAM:
(1) 1385/FFFFFFFFFFFF23C4 : 48E7 C1C6           		movem.l	d0-d1/d7/a0-a1/a5-a6,-(sp)
(1) 1386/FFFFFFFFFFFF23C8 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1) 1387/FFFFFFFFFFFF23CE : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1) 1388/FFFFFFFFFFFF23D0 : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1) 1389/FFFFFFFFFFFF23D2 : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1) 1390/FFFFFFFFFFFF23D4 : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1) 1391/FFFFFFFFFFFF23D6 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1392/FFFFFFFFFFFF23D8 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1393/FFFFFFFFFFFF23DA : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1) 1394/FFFFFFFFFFFF23DE : 3200                		move.w	d0,d1
(1) 1395/FFFFFFFFFFFF23E0 : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1) 1396/FFFFFFFFFFFF23E2 : 6100 FF72           		bsr	System_MdMcd_SubTask
(1) 1397/FFFFFFFFFFFF23E6 : 3001                		move.w	d1,d0
(1) 1398/FFFFFFFFFFFF23E8 :                     	; a0 - Output location
(1) 1399/FFFFFFFFFFFF23E8 :                     	; d0 - Number of $10-byte packets
(1) 1400/FFFFFFFFFFFF23E8 : E848                		lsr.w	#4,d0				; size >> 4
(1) 1401/FFFFFFFFFFFF23EA : 5340                		subq.w	#1,d0				; -1
(1) 1402/FFFFFFFFFFFF23EC : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1) 1403/FFFFFFFFFFFF23F2 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1) 1404/FFFFFFFFFFFF23F8 : 08C7 0007           		bset	#7,d7
(1) 1405/FFFFFFFFFFFF23FC : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1406/FFFFFFFFFFFF2402 : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1) 1407/FFFFFFFFFFFF2408 : 0807 0004           		btst	#4,d7
(1) 1408/FFFFFFFFFFFF240C : 67F4                		beq.s	.copy_ram
(1) 1409/FFFFFFFFFFFF240E : 2A4E                		move.l	a6,a5
(1) 1410/FFFFFFFFFFFF2410 : 32DD                		move.w	(a5)+,(a1)+
(1) 1411/FFFFFFFFFFFF2412 : 32DD                		move.w	(a5)+,(a1)+
(1) 1412/FFFFFFFFFFFF2414 : 32DD                		move.w	(a5)+,(a1)+
(1) 1413/FFFFFFFFFFFF2416 : 32DD                		move.w	(a5)+,(a1)+
(1) 1414/FFFFFFFFFFFF2418 : 32DD                		move.w	(a5)+,(a1)+
(1) 1415/FFFFFFFFFFFF241A : 32DD                		move.w	(a5)+,(a1)+
(1) 1416/FFFFFFFFFFFF241C : 32DD                		move.w	(a5)+,(a1)+
(1) 1417/FFFFFFFFFFFF241E : 32DD                		move.w	(a5)+,(a1)+
(1) 1418/FFFFFFFFFFFF2420 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1) 1419/FFFFFFFFFFFF2426 : 08C7 0006           		bset	#6,d7
(1) 1420/FFFFFFFFFFFF242A : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1421/FFFFFFFFFFFF2430 : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1) 1422/FFFFFFFFFFFF2436 : 0807 0004           		btst	#4,d7
(1) 1423/FFFFFFFFFFFF243A : 66F4                		bne.s	.wait_sub
(1) 1424/FFFFFFFFFFFF243C : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1) 1425/FFFFFFFFFFFF2442 : 0887 0006           		bclr	#6,d7
(1) 1426/FFFFFFFFFFFF2446 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1427/FFFFFFFFFFFF244C : 51C8 FFB4           		dbf	d0,.copy_ram
(1) 1428/FFFFFFFFFFFF2450 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1) 1429/FFFFFFFFFFFF2456 : 0887 0007           		bclr	#7,d7
(1) 1430/FFFFFFFFFFFF245A : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1431/FFFFFFFFFFFF2460 : 4CDF 6383           		movem.l	(sp)+,d0-d1/d7/a0-a1/a5-a6
(1) 1433/FFFFFFFFFFFF2464 : 4E75                		rts
(1) 1434/FFFFFFFFFFFF2466 :                     
(1) 1435/FFFFFFFFFFFF2466 :                     ; --------------------------------------------------------
(1) 1436/FFFFFFFFFFFF2466 :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/FFFFFFFFFFFF2466 :                     ;
(1) 1438/FFFFFFFFFFFF2466 :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/FFFFFFFFFFFF2466 :                     ; waits on finish.
(1) 1440/FFFFFFFFFFFF2466 :                     ;
(1) 1441/FFFFFFFFFFFF2466 :                     ; Input:
(1) 1442/FFFFFFFFFFFF2466 :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/FFFFFFFFFFFF2466 :                     ; a1   | Output location
(1) 1444/FFFFFFFFFFFF2466 :                     ;
(1) 1445/FFFFFFFFFFFF2466 :                     ; Notes:
(1) 1446/FFFFFFFFFFFF2466 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/FFFFFFFFFFFF2466 :                     ; --------------------------------------------------------
(1) 1448/FFFFFFFFFFFF2466 :                     
(1) 1449/FFFFFFFFFFFF2466 :                     System_MdMcd_RdFile_WRAM:
(1) 1451/FFFFFFFFFFFF2466 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1452/FFFFFFFFFFFF246A : 6100 FED6           		bsr	System_MdMcd_SubWait
(1) 1453/FFFFFFFFFFFF246E : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1) 1454/FFFFFFFFFFFF2474 : 3AD8                		move.w	(a0)+,(a5)+				; $00 copy filename
(1) 1455/FFFFFFFFFFFF2476 : 3AD8                		move.w	(a0)+,(a5)+				; $02
(1) 1456/FFFFFFFFFFFF2478 : 3AD8                		move.w	(a0)+,(a5)+				; $04
(1) 1457/FFFFFFFFFFFF247A : 3AD8                		move.w	(a0)+,(a5)+				; $06
(1) 1458/FFFFFFFFFFFF247C : 3AD8                		move.w	(a0)+,(a5)+				; $08
(1) 1459/FFFFFFFFFFFF247E : 3AD8                		move.w	(a0)+,(a5)+				; $0A
(1) 1460/FFFFFFFFFFFF2480 : 1AFC 0000           		move.b	#0,(a5)+				; $0C: always 0
(1) 1461/FFFFFFFFFFFF2484 : 1AFC 0000           		move.b	#0,(a5)+				; $0D
(1) 1462/FFFFFFFFFFFF2488 : 1AFC 0000           		move.b	#0,(a5)+				; $0E
(1) 1463/FFFFFFFFFFFF248C : 1AFC 0000           		move.b	#0,(a5)+				; $0F
(1) 1464/FFFFFFFFFFFF2490 : 6100 FF26           		bsr	System_MdMcd_GiveWRAM
(1) 1465/FFFFFFFFFFFF2494 : 3F00                		move.w	d0,-(sp)
(1) 1466/FFFFFFFFFFFF2496 : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1) 1467/FFFFFFFFFFFF249A : 6100 FEBA           		bsr	System_MdMcd_SubTask
(1) 1468/FFFFFFFFFFFF249E : 301F                		move.w	(sp)+,d0
(1) 1469/FFFFFFFFFFFF24A0 : 6100 FEA0           		bsr	System_MdMcd_SubWait
(1) 1470/FFFFFFFFFFFF24A4 : 6100 FEF0           		bsr	System_MdMcd_WaitWRAM
(1) 1471/FFFFFFFFFFFF24A8 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1473/FFFFFFFFFFFF24AC : 4E75                		rts
(1) 1474/FFFFFFFFFFFF24AE :                     
(1) 1475/FFFFFFFFFFFF24AE :                     ; --------------------------------------------------------
(1) 1476/FFFFFFFFFFFF24AE :                     ; System_MdMcd_CheckHome
(1) 1477/FFFFFFFFFFFF24AE :                     ;
(1) 1478/FFFFFFFFFFFF24AE :                     ; Checks if the player is holding A, B, C and
(1) 1479/FFFFFFFFFFFF24AE :                     ; then presses the START button.
(1) 1480/FFFFFFFFFFFF24AE :                     ;
(1) 1481/FFFFFFFFFFFF24AE :                     ; Returns:
(1) 1482/FFFFFFFFFFFF24AE :                     ; bcc | Combo input not pressed
(1) 1483/FFFFFFFFFFFF24AE :                     ; bcs | User did the combo presses
(1) 1484/FFFFFFFFFFFF24AE :                     ;
(1) 1485/FFFFFFFFFFFF24AE :                     ; Notes:
(1) 1486/FFFFFFFFFFFF24AE :                     ; If you call this from your Title Screen, carry
(1) 1487/FFFFFFFFFFFF24AE :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/FFFFFFFFFFFF24AE :                     ; for other modes change your Screen number to the
(1) 1489/FFFFFFFFFFFF24AE :                     ; Title Screen and return.
(1) 1490/FFFFFFFFFFFF24AE :                     ; --------------------------------------------------------
(1) 1491/FFFFFFFFFFFF24AE :                     
(1) 1492/FFFFFFFFFFFF24AE :                     System_MdMcd_CheckHome:
(1) 1493/FFFFFFFFFFFF24AE : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/FFFFFFFFFFFF24B2 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(1) 1495/FFFFFFFFFFFF24B6 : 3C38 E976           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/FFFFFFFFFFFF24BA : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/FFFFFFFFFFFF24BE : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/FFFFFFFFFFFF24C2 : 6610                		bne.s	.not_press
(1) 1499/FFFFFFFFFFFF24C4 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/FFFFFFFFFFFF24C8 : 670A                		beq.s	.not_press
(1) 1501/FFFFFFFFFFFF24CA : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/FFFFFFFFFFFF24CE : 003C 0001           		or	#1,ccr
(1) 1503/FFFFFFFFFFFF24D2 : 4E75                		rts
(1) 1504/FFFFFFFFFFFF24D4 :                     .not_press:
(1) 1505/FFFFFFFFFFFF24D4 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/FFFFFFFFFFFF24D8 : 023C 001E           		and	#%11110,ccr
(1) 1507/FFFFFFFFFFFF24DC : 4E75                		rts
(1) 1508/FFFFFFFFFFFF24DE :                     
(1) 1509/FFFFFFFFFFFF24DE :                     ; --------------------------------------------------------
(1) 1510/FFFFFFFFFFFF24DE :                     ; System_MdMcd_ExitShell
(1) 1511/FFFFFFFFFFFF24DE :                     ;
(1) 1512/FFFFFFFFFFFF24DE :                     ; Exits the entire program and goes to
(1) 1513/FFFFFFFFFFFF24DE :                     ; the BIOS/Shell.
(1) 1514/FFFFFFFFFFFF24DE :                     ;
(1) 1515/FFFFFFFFFFFF24DE :                     ; *** JUMP ONLY ***
(1) 1516/FFFFFFFFFFFF24DE :                     ; --------------------------------------------------------
(1) 1517/FFFFFFFFFFFF24DE :                     
(1) 1518/FFFFFFFFFFFF24DE :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/FFFFFFFFFFFF24DE :                     ; jmp $0284: Entry point
(1) 1520/FFFFFFFFFFFF24DE :                     ; jmp $0288: CD player
(1) 1521/FFFFFFFFFFFF24DE :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/FFFFFFFFFFFF24DE :                     
(1) 1523/FFFFFFFFFFFF24DE :                     System_MdMcd_ExitShell:
(1) 1525/FFFFFFFFFFFF24DE : 6100 F1F6           		bsr	Video_MdMcd_StampDisable
(1) 1526/FFFFFFFFFFFF24E2 : 6138                		bsr	System_MdMcd_CddaStop
(1) 1528/FFFFFFFFFFFF24E4 : 6100 F3E2           		bsr	Video_MdMars_VideoOff
(1) 1530/FFFFFFFFFFFF24E8 : 4EF8 028C           		jmp	$028C		; Exit jump
(1) 1534/FFFFFFFFFFFF24EC :                     
(1) 1535/FFFFFFFFFFFF24EC :                     ; ------------------------------------------------------------
(1) 1536/FFFFFFFFFFFF24EC :                     ; CDDA PLAYBACK
(1) 1537/FFFFFFFFFFFF24EC :                     ; ------------------------------------------------------------
(1) 1538/FFFFFFFFFFFF24EC :                     
(1) 1539/FFFFFFFFFFFF24EC :                     ; --------------------------------------------------------
(1) 1540/FFFFFFFFFFFF24EC :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/FFFFFFFFFFFF24EC :                     ;
(1) 1542/FFFFFFFFFFFF24EC :                     ; Play CDDA track, normal or looped.
(1) 1543/FFFFFFFFFFFF24EC :                     ;
(1) 1544/FFFFFFFFFFFF24EC :                     ; Input:
(1) 1545/FFFFFFFFFFFF24EC :                     ; d0.w | CD track number
(1) 1546/FFFFFFFFFFFF24EC :                     ;
(1) 1547/FFFFFFFFFFFF24EC :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/FFFFFFFFFFFF24EC :                     ; and $11 for looped
(1) 1549/FFFFFFFFFFFF24EC :                     ;
(1) 1550/FFFFFFFFFFFF24EC :                     ; Uses:
(1) 1551/FFFFFFFFFFFF24EC :                     ; d4
(1) 1552/FFFFFFFFFFFF24EC :                     ;
(1) 1553/FFFFFFFFFFFF24EC :                     ; Notes:
(1) 1554/FFFFFFFFFFFF24EC :                     ; Tracks $00, $01 and any negative values are
(1) 1555/FFFFFFFFFFFF24EC :                     ; ignored.
(1) 1556/FFFFFFFFFFFF24EC :                     ; --------------------------------------------------------
(1) 1557/FFFFFFFFFFFF24EC :                     
(1) 1558/FFFFFFFFFFFF24EC :                     System_MdMcd_CddaPlay:
(1) 1559/FFFFFFFFFFFF24EC : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/FFFFFFFFFFFF24F0 : 383C 0010           		move.w	#$0010,d4
(1) 1561/FFFFFFFFFFFF24F4 : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/FFFFFFFFFFFF24F6 :                     System_MdMcd_CddaPlayL:
(1) 1563/FFFFFFFFFFFF24F6 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/FFFFFFFFFFFF24FA : 383C 0011           		move.w	#$0011,d4
(1) 1565/FFFFFFFFFFFF24FE :                     sysMdMcd_SetCdda:
(1) 1567/FFFFFFFFFFFF24FE : 4A40                		tst.w	d0
(1) 1568/FFFFFFFFFFFF2500 : 6714                		beq.s	.fail_safe
(1) 1569/FFFFFFFFFFFF2502 : 6B12                		bmi.s	.fail_safe
(1) 1570/FFFFFFFFFFFF2504 : B07C 0001           		cmp.w	#$0001,d0
(1) 1571/FFFFFFFFFFFF2508 : 670C                		beq.s	.fail_safe
(1) 1572/FFFFFFFFFFFF250A : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1573/FFFFFFFFFFFF2510 : 3004                		move.w	d4,d0
(1) 1574/FFFFFFFFFFFF2512 : 6100 FE42           		bsr	System_MdMcd_SubTask
(1) 1575/FFFFFFFFFFFF2516 :                     .fail_safe:
(1) 1577/FFFFFFFFFFFF2516 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/FFFFFFFFFFFF251A : 4E75                		rts
(1) 1579/FFFFFFFFFFFF251C :                     
(1) 1580/FFFFFFFFFFFF251C :                     ; --------------------------------------------------------
(1) 1581/FFFFFFFFFFFF251C :                     ; System_MdMcd_CdStop
(1) 1582/FFFFFFFFFFFF251C :                     ;
(1) 1583/FFFFFFFFFFFF251C :                     ; Stop CDDA track
(1) 1584/FFFFFFFFFFFF251C :                     ; --------------------------------------------------------
(1) 1585/FFFFFFFFFFFF251C :                     
(1) 1586/FFFFFFFFFFFF251C :                     System_MdMcd_CddaStop:
(1) 1588/FFFFFFFFFFFF251C : 2F00                		move.l	d0,-(sp)
(1) 1589/FFFFFFFFFFFF251E : 303C 0014           		move.w	#$0014,d0
(1) 1590/FFFFFFFFFFFF2522 : 6100 FE32           		bsr	System_MdMcd_SubTask
(1) 1591/FFFFFFFFFFFF2526 : 201F                		move.l	(sp)+,d0
(1) 1593/FFFFFFFFFFFF2528 : 4E75                		rts
(1) 1594/FFFFFFFFFFFF252A :                     
(1) 1595/FFFFFFFFFFFF252A :                     ; --------------------------------------------------------
(1) 1596/FFFFFFFFFFFF252A :                     ; System_MdMcd_CdFade
(1) 1597/FFFFFFFFFFFF252A :                     ;
(1) 1598/FFFFFFFFFFFF252A :                     ; Fade the CDDA Volume
(1) 1599/FFFFFFFFFFFF252A :                     ;
(1) 1600/FFFFFFFFFFFF252A :                     ; Input:
(1) 1601/FFFFFFFFFFFF252A :                     ; d0.w | Target volume:
(1) 1602/FFFFFFFFFFFF252A :                     ;        $000-$400 - Min to Max
(1) 1603/FFFFFFFFFFFF252A :                     ; d1.w | Fading speed:
(1) 1604/FFFFFFFFFFFF252A :                     ;        $001-$200 - Slow to Fast
(1) 1605/FFFFFFFFFFFF252A :                     ;             $400 - Set quick
(1) 1606/FFFFFFFFFFFF252A :                     ;
(1) 1607/FFFFFFFFFFFF252A :                     ; This calls Sub-Task $16
(1) 1608/FFFFFFFFFFFF252A :                     ; --------------------------------------------------------
(1) 1609/FFFFFFFFFFFF252A :                     
(1) 1610/FFFFFFFFFFFF252A :                     System_MdMcd_CddaFade:
(1) 1612/FFFFFFFFFFFF252A : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1613/FFFFFFFFFFFF252E : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1614/FFFFFFFFFFFF2534 : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1615/FFFFFFFFFFFF253A : 303C 0016           		move.w	#$0016,d0
(1) 1616/FFFFFFFFFFFF253E : 6100 FE16           		bsr	System_MdMcd_SubTask
(1) 1617/FFFFFFFFFFFF2542 : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1619/FFFFFFFFFFFF2546 : 4E75                		rts
(1) 1620/FFFFFFFFFFFF2548 :                     
(1) 1621/FFFFFFFFFFFF2548 :                     ; --------------------------------------------------------
(1) 1622/FFFFFFFFFFFF2548 :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/FFFFFFFFFFFF2548 :                     ; --------------------------------------------------------
(1) 1624/FFFFFFFFFFFF2548 :                     
(1) 1625/FFFFFFFFFFFF2548 :                     def_SaveInfo:
(1) 1627/FFFFFFFFFFFF2548 : 4E49 4B4F 4E41      		dc.b HTAG_MARSCDSAV,0
         FFFFFFFFFFFF254E : 4344 3332 5800    
(1) 1631/FFFFFFFFFFFF2554 : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/FFFFFFFFFFFF2556 : 0000                		dc.w 0
(1) 1633/FFFFFFFFFFFF2558 :                     		align 2
(1) 1634/FFFFFFFFFFFF255A :                     
(1) 1635/FFFFFFFFFFFF255A :                     ; ====================================================================
(1) 1636/FFFFFFFFFFFF255A :                     ; ----------------------------------------------------------------
(1) 1637/FFFFFFFFFFFF255A :                     ; 32X and CD32X ONLY
(1) 1638/FFFFFFFFFFFF255A :                     ; ----------------------------------------------------------------
(1) 1639/FFFFFFFFFFFF255A :                     
(1) 1640/FFFFFFFFFFFF255A :                     ; --------------------------------------------------------
(1) 1641/FFFFFFFFFFFF255A :                     ; System_MdMars_SendData
(1) 1642/FFFFFFFFFFFF255A :                     ;
(1) 1643/FFFFFFFFFFFF255A :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/FFFFFFFFFFFF255A :                     ; using DREQ
(1) 1645/FFFFFFFFFFFF255A :                     ;
(1) 1646/FFFFFFFFFFFF255A :                     ; Input:
(1) 1647/FFFFFFFFFFFF255A :                     ; a0   | Source data
(1) 1648/FFFFFFFFFFFF255A :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/FFFFFFFFFFFF255A :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/FFFFFFFFFFFF255A :                     ;
(1) 1651/FFFFFFFFFFFF255A :                     ; Returns:
(1) 1652/FFFFFFFFFFFF255A :                     ; a1   | New output SDRAM location
(1) 1653/FFFFFFFFFFFF255A :                     ;
(1) 1654/FFFFFFFFFFFF255A :                     ; Uses:
(1) 1655/FFFFFFFFFFFF255A :                     ; d0/a4-a5,d5-d7
(1) 1656/FFFFFFFFFFFF255A :                     ;
(1) 1657/FFFFFFFFFFFF255A :                     ; Notes:
(1) 1658/FFFFFFFFFFFF255A :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/FFFFFFFFFFFF255A :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/FFFFFFFFFFFF255A :                     ; --------------------------------------------------------
(1) 1661/FFFFFFFFFFFF255A :                     
(1) 1662/FFFFFFFFFFFF255A :                     System_MdMars_SendData:
(1) 1664/FFFFFFFFFFFF255A : 48E7 1800           		movem.l	d3-d4,-(sp)
(1) 1665/FFFFFFFFFFFF255E : 263C 0000 FFF8      		move.l	#$00FFF8,d3	; Maximum packet sizes
(1) 1666/FFFFFFFFFFFF2564 : 78F8                		moveq	#-8,d4
(1) 1667/FFFFFFFFFFFF2566 : C084                		and.l	d4,d0
(1) 1668/FFFFFFFFFFFF2568 : 2800                		move.l	d0,d4
(1) 1669/FFFFFFFFFFFF256A : B883                		cmp.l	d3,d4
(1) 1670/FFFFFFFFFFFF256C : 6E04                		bgt.s	.large_pack
(1) 1671/FFFFFFFFFFFF256E : 611C                		bsr	sys_MSendData_0	; Small packet
(1) 1672/FFFFFFFFFFFF2570 : 6014                		bra.s	.exit_now
(1) 1673/FFFFFFFFFFFF2572 :                     .large_pack:
(1) 1674/FFFFFFFFFFFF2572 : 3003                		move.w	d3,d0
(1) 1675/FFFFFFFFFFFF2574 : 6116                		bsr	sys_MSendData_0
(1) 1676/FFFFFFFFFFFF2576 : 9883                		sub.l	d3,d4
(1) 1677/FFFFFFFFFFFF2578 : B883                		cmp.l	d3,d4
(1) 1678/FFFFFFFFFFFF257A : 6CF6                		bge.s	.large_pack
(1) 1679/FFFFFFFFFFFF257C : 4A84                		tst.l	d4
(1) 1680/FFFFFFFFFFFF257E : 6706                		beq.s	.exit_now
(1) 1681/FFFFFFFFFFFF2580 : 6B04                		bmi.s	.exit_now
(1) 1682/FFFFFFFFFFFF2582 : 3004                		move.w	d4,d0
(1) 1683/FFFFFFFFFFFF2584 : 6106                		bsr	sys_MSendData_0
(1) 1684/FFFFFFFFFFFF2586 :                     .exit_now:
(1) 1685/FFFFFFFFFFFF2586 : 4CDF 0018           		movem.l	(sp)+,d3-d4
(1) 1687/FFFFFFFFFFFF258A : 4E75                		rts
(1) 1688/FFFFFFFFFFFF258C :                     
(1) 1689/FFFFFFFFFFFF258C :                     ; ------------------------------------------------------------
(1) 1690/FFFFFFFFFFFF258C :                     ; DREQ Genesis-to-32X code
(1) 1691/FFFFFFFFFFFF258C :                     ; ------------------------------------------------------------
(1) 1692/FFFFFFFFFFFF258C :                     
(1) 1694/FFFFFFFFFFFF258C :                     
(1) 1695/FFFFFFFFFFFF258C :                     sys_MSendData_0:
(1) 1696/FFFFFFFFFFFF258C : 48E7 0706           		movem.l	a5-a6/d5-d7,-(sp)
(1) 1697/FFFFFFFFFFFF2590 : 7C00                		moveq	#0,d6				; Mode 0: Normal data transfer
(1) 1698/FFFFFFFFFFFF2592 : 6128                		bsr.s	sys_MSendData
(1) 1699/FFFFFFFFFFFF2594 : 4CDF 60E0           		movem.l	(sp)+,a5-a6/d5-d7
(1) 1700/FFFFFFFFFFFF2598 : 4E75                		rts
(1) 1701/FFFFFFFFFFFF259A :                     
(1) 1702/FFFFFFFFFFFF259A :                     ; --------------------------------------------------------
(1) 1703/FFFFFFFFFFFF259A :                     ; System_MdMars_Update
(1) 1704/FFFFFFFFFFFF259A :                     ;
(1) 1705/FFFFFFFFFFFF259A :                     ; Send a section of MD RAM to 32X's SDRAM
(1) 1706/FFFFFFFFFFFF259A :                     ;
(1) 1707/FFFFFFFFFFFF259A :                     ; Notes:
(1) 1708/FFFFFFFFFFFF259A :                     ; Call this during DISPLAY ONLY
(1) 1709/FFFFFFFFFFFF259A :                     ; --------------------------------------------------------
(1) 1710/FFFFFFFFFFFF259A :                     
(1) 1711/FFFFFFFFFFFF259A :                     System_MdMars_Update:
(1) 1712/FFFFFFFFFFFF259A : 48E7 0786           		movem.l	d5-d7/a0/a5-a6,-(sp)
(1) 1713/FFFFFFFFFFFF259E : 3F00                		move.w	d0,-(sp)
(1) 1714/FFFFFFFFFFFF25A0 : 41F8 CE60           		lea	(RAM_MdMars_CommBuff).w,a0
(1) 1715/FFFFFFFFFFFF25A4 : 303C 0A20           		move.w	#Dreq_len,d0
(1) 1716/FFFFFFFFFFFF25A8 : 7C01                		moveq	#1,d6				; Mode 1: Per-frame RAM send
(1) 1717/FFFFFFFFFFFF25AA : 6110                		bsr.s	sys_MSendData
(1) 1718/FFFFFFFFFFFF25AC : 301F                		move.w	(sp)+,d0
(1) 1719/FFFFFFFFFFFF25AE : 4CDF 61E0           		movem.l	(sp)+,d5-d7/a0/a5-a6
(1) 1720/FFFFFFFFFFFF25B2 : 08F9 0005 00A1      		bset	#5,(sysmars_reg+comm12+1).l	; Swap DREQ-RAM buffer on SH2
         FFFFFFFFFFFF25B8 : 512D             
(1) 1721/FFFFFFFFFFFF25BA : 4E75                		rts
(1) 1722/FFFFFFFFFFFF25BC :                     ; --------------------------------------------------------
(1) 1723/FFFFFFFFFFFF25BC :                     
(1) 1724/FFFFFFFFFFFF25BC :                     ; updates a1
(1) 1725/FFFFFFFFFFFF25BC :                     sys_MSendData:
(1) 1726/FFFFFFFFFFFF25BC : 40C5                		move.w	sr,d5
(1) 1727/FFFFFFFFFFFF25BE : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1) 1728/FFFFFFFFFFFF25C2 : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6		; a6 - sysmars_reg
(1) 1729/FFFFFFFFFFFF25C8 : 4BEE 0012           		lea	dreqfifo(a6),a5			; a5 - FIFO port
(1) 1730/FFFFFFFFFFFF25CC : 7E00                		moveq	#0,d7
(1) 1731/FFFFFFFFFFFF25CE : 3E00                		move.w	d0,d7				; d7.l - Size
(1) 1732/FFFFFFFFFFFF25D0 : 4A46                		tst.w	d6				; CMD mode 0?
(1) 1733/FFFFFFFFFFFF25D2 : 6606                		bne.s	.no_src
(1) 1734/FFFFFFFFFFFF25D4 : 2D49 000C           		move.l	a1,dreqdest(a6)
(1) 1735/FFFFFFFFFFFF25D8 : D3C7                		add.l	d7,a1				; Update a1
(1) 1736/FFFFFFFFFFFF25DA :                     .no_src:
(1) 1737/FFFFFFFFFFFF25DA : 1D46 002C           		move.b	d6,comm12(a6)			; d6 - Set CMD mode (target output)
(1) 1738/FFFFFFFFFFFF25DE : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Reset 68S, RV off
(1) 1739/FFFFFFFFFFFF25E4 : E24F                		lsr.w	#1,d7				; length >> 2
(1) 1740/FFFFFFFFFFFF25E6 : 3D47 0010           		move.w	d7,dreqlen(a6)			; Set transfer lenght
(1) 1741/FFFFFFFFFFFF25EA : E44F                		lsr.w	#2,d7				; lenght/2 >> 4
(1) 1742/FFFFFFFFFFFF25EC : 0447 0001           		subi.w	#1,d7
(1) 1743/FFFFFFFFFFFF25F0 : 08EE 0000 0003      		bset	#0,standby(a6)			; Call CMD interrupt to MASTER
(1) 1744/FFFFFFFFFFFF25F6 : 082E 0006 002C      .wait_bit:	btst	#6,comm12(a6)			; Wait ENTRANCE signal
(1) 1745/FFFFFFFFFFFF25FC : 67F8                		beq.s	.wait_bit
(1) 1746/FFFFFFFFFFFF25FE : 3D7C 0004 0006      		move.w	#%100,dreqctl(a6)		; Enable 68S, RV off
(1) 1747/FFFFFFFFFFFF2604 :                     	; *** CRITICAL PART ***
(1) 1748/FFFFFFFFFFFF2604 :                     .loop_fifo:
(1) 1749/FFFFFFFFFFFF2604 : 082E 0007 0006      		btst	#7,dreqctl(a6)			; FIFO full?
(1) 1750/FFFFFFFFFFFF260A : 66F8                		bne.s	.loop_fifo
(1) 1751/FFFFFFFFFFFF260C : 3A98                		move.w  (a0)+,(a5)
(1) 1752/FFFFFFFFFFFF260E : 3A98                		move.w  (a0)+,(a5)
(1) 1753/FFFFFFFFFFFF2610 : 3A98                		move.w  (a0)+,(a5)
(1) 1754/FFFFFFFFFFFF2612 : 3A98                		move.w  (a0)+,(a5)
(1) 1755/FFFFFFFFFFFF2614 : 51CF FFEE           		dbf	d7,.loop_fifo
(1) 1757/FFFFFFFFFFFF2618 : 082E 0006 002C      .wait_bit_e:	btst	#6,comm12(a6)			; Wait EXIT signal
(1) 1758/FFFFFFFFFFFF261E : 66F8                		bne.s	.wait_bit_e
(1) 1760/FFFFFFFFFFFF2620 : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Disable 68S, RV off
(1) 1761/FFFFFFFFFFFF2626 : 46C5                		move.w	d5,sr				; Restore interrupts
(1) 1763/FFFFFFFFFFFF2628 : 4E75                		rts
(1) 1764/FFFFFFFFFFFF262A :                     
(1) 1765/FFFFFFFFFFFF262A :                     ; ====================================================================
(1) 1766/FFFFFFFFFFFF262A :                     ; ----------------------------------------------------------------
(1) 1767/FFFFFFFFFFFF262A :                     ; SHARED for all
(1) 1768/FFFFFFFFFFFF262A :                     ; ----------------------------------------------------------------
(1) 1769/FFFFFFFFFFFF262A :                     
(1) 1770/FFFFFFFFFFFF262A :                     ; --------------------------------------------------------
(1) 1771/FFFFFFFFFFFF262A :                     ; System_SetDataBank
(1) 1772/FFFFFFFFFFFF262A :                     ;
(1) 1773/FFFFFFFFFFFF262A :                     ; Sets the data bank depending of the system
(1) 1774/FFFFFFFFFFFF262A :                     ;
(1) 1775/FFFFFFFFFFFF262A :                     ; Input:
(1) 1776/FFFFFFFFFFFF262A :                     ; a0   | Pointer and filename:
(1) 1777/FFFFFFFFFFFF262A :                     ;        dc.l bank_pointer
(1) 1778/FFFFFFFFFFFF262A :                     ;        dc.b "FILENAME.BIN"
(1) 1779/FFFFFFFFFFFF262A :                     ;
(1) 1780/FFFFFFFFFFFF262A :                     ; Uses:
(1) 1781/FFFFFFFFFFFF262A :                     ; a4-a5,d5-d7
(1) 1782/FFFFFFFFFFFF262A :                     ;
(1) 1783/FFFFFFFFFFFF262A :                     ; Notes:
(1) 1784/FFFFFFFFFFFF262A :                     ; - ONLY call this if you have the opportunity to
(1) 1785/FFFFFFFFFFFF262A :                     ;   do it.
(1) 1786/FFFFFFFFFFFF262A :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/FFFFFFFFFFFF262A :                     ;   to load from disc
(1) 1788/FFFFFFFFFFFF262A :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/FFFFFFFFFFFF262A :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/FFFFFFFFFFFF262A :                     ; --------------------------------------------------------
(1) 1791/FFFFFFFFFFFF262A :                     
(1) 1792/FFFFFFFFFFFF262A :                     System_SetDataBank:
(1) 1794/FFFFFFFFFFFF262A : D0FC 0004           		adda	#4,a0
(1) 1795/FFFFFFFFFFFF262E : 6100 FE36           		bsr	System_MdMcd_RdFile_WRAM
(1) 1809/FFFFFFFFFFFF2632 : 4E75                		rts
(1) 1810/FFFFFFFFFFFF2634 :                     
(1) 1811/FFFFFFFFFFFF2634 :                     ; ====================================================================
(1) 1812/FFFFFFFFFFFF2634 :                     ; ----------------------------------------------------------------
(1) 1813/FFFFFFFFFFFF2634 :                     ; Objects system
(1) 1814/FFFFFFFFFFFF2634 :                     ; ----------------------------------------------------------------
(1) 1815/FFFFFFFFFFFF2634 :                     
(1) 1816/FFFFFFFFFFFF2634 :                     ; --------------------------------------------------------
(1) 1817/FFFFFFFFFFFF2634 :                     ; Init/Clear Objects system
(1) 1818/FFFFFFFFFFFF2634 :                     ; --------------------------------------------------------
(1) 1819/FFFFFFFFFFFF2634 :                     
(1) 1820/FFFFFFFFFFFF2634 :                     Object_Init:
(1) 1821/FFFFFFFFFFFF2634 : 4DF8 E9B4           		lea	(RAM_Objects).w,a6
(1) 1822/FFFFFFFFFFFF2638 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/FFFFFFFFFFFF263C :                     .clr:
(1) 1824/FFFFFFFFFFFF263C : 421E                		clr.b	(a6)+
(1) 1825/FFFFFFFFFFFF263E : 51CF FFFC           		dbf	d7,.clr
(1) 1826/FFFFFFFFFFFF2642 : 4E75                		rts
(1) 1827/FFFFFFFFFFFF2644 :                     
(1) 1828/FFFFFFFFFFFF2644 :                     ; --------------------------------------------------------
(1) 1829/FFFFFFFFFFFF2644 :                     ; Process objects
(1) 1830/FFFFFFFFFFFF2644 :                     ;
(1) 1831/FFFFFFFFFFFF2644 :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/FFFFFFFFFFFF2644 :                     ; --------------------------------------------------------
(1) 1833/FFFFFFFFFFFF2644 :                     
(1) 1834/FFFFFFFFFFFF2644 :                     Object_Run:
(1) 1835/FFFFFFFFFFFF2644 : 4DF8 E9B4           		lea	(RAM_Objects).w,a6
(1) 1836/FFFFFFFFFFFF2648 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/FFFFFFFFFFFF264C :                     .next_one:
(1) 1838/FFFFFFFFFFFF264C : 2C16                		move.l	obj_code(a6),d6
(1) 1839/FFFFFFFFFFFF264E : 6708                		beq.s	.no_code	; Free slot
(1) 1840/FFFFFFFFFFFF2650 : 2F07                		move.l	d7,-(sp)
(1) 1841/FFFFFFFFFFFF2652 : 2A46                		move.l	d6,a5
(1) 1842/FFFFFFFFFFFF2654 : 4E95                		jsr	(a5)
(1) 1843/FFFFFFFFFFFF2656 : 2E1F                		move.l	(sp)+,d7
(1) 1844/FFFFFFFFFFFF2658 :                     .no_code:
(1) 1845/FFFFFFFFFFFF2658 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/FFFFFFFFFFFF265C : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/FFFFFFFFFFFF2660 : 4E75                		rts
(1) 1848/FFFFFFFFFFFF2662 :                     
(1) 1849/FFFFFFFFFFFF2662 :                     ; --------------------------------------------------------
(1) 1850/FFFFFFFFFFFF2662 :                     ; Object_Set, Object_Make
(1) 1851/FFFFFFFFFFFF2662 :                     ;
(1) 1852/FFFFFFFFFFFF2662 :                     ; Set a new object into a specific slot.
(1) 1853/FFFFFFFFFFFF2662 :                     ;
(1) 1854/FFFFFFFFFFFF2662 :                     ; Input:
(1) 1855/FFFFFFFFFFFF2662 :                     ; d0.l | Object code pointer
(1) 1856/FFFFFFFFFFFF2662 :                     ;        If 0: DELETE the object including it's memory
(1) 1857/FFFFFFFFFFFF2662 :                     ; d1.w | Object slot
(1) 1858/FFFFFFFFFFFF2662 :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1859/FFFFFFFFFFFF2662 :                     ; d2.b | Object sub-type (obj_subid)
(1) 1860/FFFFFFFFFFFF2662 :                     ;
(1) 1861/FFFFFFFFFFFF2662 :                     ; Returns:
(1) 1862/FFFFFFFFFFFF2662 :                     ; bcc | Found free slot
(1) 1863/FFFFFFFFFFFF2662 :                     ; bcs | Ran-out of object slots
(1) 1864/FFFFFFFFFFFF2662 :                     ;
(1) 1865/FFFFFFFFFFFF2662 :                     ; Notes:
(1) 1866/FFFFFFFFFFFF2662 :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/FFFFFFFFFFFF2662 :                     ; but it will contain the remains of d2 when you
(1) 1868/FFFFFFFFFFFF2662 :                     ; called this.
(1) 1869/FFFFFFFFFFFF2662 :                     ; --------------------------------------------------------
(1) 1870/FFFFFFFFFFFF2662 :                     
(1) 1871/FFFFFFFFFFFF2662 :                     Object_Set:
(1) 1872/FFFFFFFFFFFF2662 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/FFFFFFFFFFFF2666 : 4DF8 E9B4           		lea	(RAM_Objects).w,a6
(1) 1874/FFFFFFFFFFFF266A : 7E00                		moveq	#0,d7
(1) 1875/FFFFFFFFFFFF266C : 3E01                		move.w	d1,d7
(1) 1876/FFFFFFFFFFFF266E : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/FFFFFFFFFFFF2672 : DCC7                		adda	d7,a6
(1) 1878/FFFFFFFFFFFF2674 : 602C                		bra.s	objSet_Go
(1) 1879/FFFFFFFFFFFF2676 :                     
(1) 1880/FFFFFFFFFFFF2676 :                     Object_Make:
(1) 1881/FFFFFFFFFFFF2676 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/FFFFFFFFFFFF267A : 4DF8 E9B4           		lea	(RAM_Objects).w,a6
(1) 1883/FFFFFFFFFFFF267E : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/FFFFFFFFFFFF2682 : 7C00                		moveq	#0,d6
(1) 1885/FFFFFFFFFFFF2684 :                     .search:
(1) 1886/FFFFFFFFFFFF2684 : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/FFFFFFFFFFFF2688 : 6C0E                		bge.s	objSet_Error
(1) 1888/FFFFFFFFFFFF268A : 4A96                		tst.l	obj_code(a6)
(1) 1889/FFFFFFFFFFFF268C : 6714                		beq.s	objSet_Go
(1) 1890/FFFFFFFFFFFF268E : DCFC 0068           		adda	#obj_len,a6
(1) 1891/FFFFFFFFFFFF2692 : 5246                		addq.w	#1,d6
(1) 1892/FFFFFFFFFFFF2694 : 51CF FFEE           		dbf	d7,.search
(1) 1893/FFFFFFFFFFFF2698 :                     objSet_Error:
(1) 1894/FFFFFFFFFFFF2698 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/FFFFFFFFFFFF269C : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/FFFFFFFFFFFF26A0 : 4E75                		rts
(1) 1897/FFFFFFFFFFFF26A2 :                     
(1) 1898/FFFFFFFFFFFF26A2 :                     objSet_Go:
(1) 1899/FFFFFFFFFFFF26A2 : 4A80                		tst.l	d0
(1) 1900/FFFFFFFFFFFF26A4 : 670A                		beq.s	.from_del
(1) 1901/FFFFFFFFFFFF26A6 : 2E00                		move.l	d0,d7
(1) 1902/FFFFFFFFFFFF26A8 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/FFFFFFFFFFFF26AA : 1D42 001D           		move.b	d2,obj_subid(a6)
(1) 1904/FFFFFFFFFFFF26AE : 600C                		bra.s	.exit_this
(1) 1905/FFFFFFFFFFFF26B0 :                     .from_del:
(1) 1906/FFFFFFFFFFFF26B0 : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/FFFFFFFFFFFF26B2 : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/FFFFFFFFFFFF26B6 : 421D                .clr:		clr.b	(a5)+
(1) 1909/FFFFFFFFFFFF26B8 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/FFFFFFFFFFFF26BC :                     .exit_this:
(1) 1911/FFFFFFFFFFFF26BC : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/FFFFFFFFFFFF26C0 : 003C 0001           		or	#1,ccr
(1) 1913/FFFFFFFFFFFF26C4 : 4E75                		rts
(1) 1914/FFFFFFFFFFFF26C6 :                     
(1) 1915/FFFFFFFFFFFF26C6 :                     ; ====================================================================
(1) 1916/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1917/FFFFFFFFFFFF26C6 :                     ; Object subroutines
(1) 1918/FFFFFFFFFFFF26C6 :                     ;
(1) 1919/FFFFFFFFFFFF26C6 :                     ; These can ONLY be called on the current object's code
(1) 1920/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1921/FFFFFFFFFFFF26C6 :                     
(1) 1922/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1923/FFFFFFFFFFFF26C6 :                     ; object_ResetVars
(1) 1924/FFFFFFFFFFFF26C6 :                     ;
(1) 1925/FFFFFFFFFFFF26C6 :                     ; Resets the current object's memory, call this
(1) 1926/FFFFFFFFFFFF26C6 :                     ; at very beginning of your object's init code
(1) 1927/FFFFFFFFFFFF26C6 :                     ;
(1) 1928/FFFFFFFFFFFF26C6 :                     ; Input:
(1) 1929/FFFFFFFFFFFF26C6 :                     ; a6 | This object
(1) 1930/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1931/FFFFFFFFFFFF26C6 :                     
(1) 1932/FFFFFFFFFFFF26C6 :                     object_ResetVars:
(1) 1933/FFFFFFFFFFFF26C6 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/FFFFFFFFFFFF26CA : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/FFFFFFFFFFFF26CE : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/FFFFFFFFFFFF26D2 : 7E00                		moveq	#0,d7
(1) 1937/FFFFFFFFFFFF26D4 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/FFFFFFFFFFFF26D6 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/FFFFFFFFFFFF26DA : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/FFFFFFFFFFFF26DE : 4E75                		rts
(1) 1941/FFFFFFFFFFFF26E0 :                     
(1) 1942/FFFFFFFFFFFF26E0 :                     ; --------------------------------------------------------
(1) 1943/FFFFFFFFFFFF26E0 :                     ; object_ResetAnim
(1) 1944/FFFFFFFFFFFF26E0 :                     ;
(1) 1945/FFFFFFFFFFFF26E0 :                     ; Reset animation variables, call this BEFORE using
(1) 1946/FFFFFFFFFFFF26E0 :                     ; object_Animate.
(1) 1947/FFFFFFFFFFFF26E0 :                     ;
(1) 1948/FFFFFFFFFFFF26E0 :                     ; Input:
(1) 1949/FFFFFFFFFFFF26E0 :                     ; a6 | This object
(1) 1950/FFFFFFFFFFFF26E0 :                     ; --------------------------------------------------------
(1) 1951/FFFFFFFFFFFF26E0 :                     
(1) 1952/FFFFFFFFFFFF26E0 :                     object_ResetAnim:
(1) 1953/FFFFFFFFFFFF26E0 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/FFFFFFFFFFFF26E0 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/FFFFFFFFFFFF26E0 : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/FFFFFFFFFFFF26E6 : 4E75                		rts
(1) 1957/FFFFFFFFFFFF26E8 :                     
(1) 1958/FFFFFFFFFFFF26E8 :                     ; --------------------------------------------------------
(1) 1959/FFFFFFFFFFFF26E8 :                     ; object_Speed
(1) 1960/FFFFFFFFFFFF26E8 :                     ;
(1) 1961/FFFFFFFFFFFF26E8 :                     ; Moves the object using speed values set on
(1) 1962/FFFFFFFFFFFF26E8 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/FFFFFFFFFFFF26E8 :                     ;
(1) 1964/FFFFFFFFFFFF26E8 :                     ; Input:
(1) 1965/FFFFFFFFFFFF26E8 :                     ; a6 | This object
(1) 1966/FFFFFFFFFFFF26E8 :                     ; --------------------------------------------------------
(1) 1967/FFFFFFFFFFFF26E8 :                     
(1) 1968/FFFFFFFFFFFF26E8 :                     object_Speed:
(1) 1969/FFFFFFFFFFFF26E8 : 2F07                		move.l	d7,-(sp)
(1) 1970/FFFFFFFFFFFF26EA : 7E00                		moveq	#0,d7
(1) 1971/FFFFFFFFFFFF26EC : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/FFFFFFFFFFFF26F0 : 48C7                		ext.l	d7
(1) 1973/FFFFFFFFFFFF26F2 : E187                		asl.l	#8,d7
(1) 1974/FFFFFFFFFFFF26F4 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/FFFFFFFFFFFF26F8 : 7E00                		moveq	#0,d7
(1) 1976/FFFFFFFFFFFF26FA : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/FFFFFFFFFFFF26FE : 48C7                		ext.l	d7
(1) 1978/FFFFFFFFFFFF2700 : E187                		asl.l	#8,d7
(1) 1979/FFFFFFFFFFFF2702 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/FFFFFFFFFFFF2706 : 7E00                		moveq	#0,d7
(1) 1981/FFFFFFFFFFFF2708 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/FFFFFFFFFFFF270C : 48C7                		ext.l	d7
(1) 1983/FFFFFFFFFFFF270E : E187                		asl.l	#8,d7
(1) 1984/FFFFFFFFFFFF2710 : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/FFFFFFFFFFFF2714 : 2E1F                		move.l	(sp)+,d7
(1) 1986/FFFFFFFFFFFF2716 : 4E75                		rts
(1) 1987/FFFFFFFFFFFF2718 :                     
(1) 1988/FFFFFFFFFFFF2718 :                     ; --------------------------------------------------------
(1) 1989/FFFFFFFFFFFF2718 :                     ; object_Animate
(1) 1990/FFFFFFFFFFFF2718 :                     ;
(1) 1991/FFFFFFFFFFFF2718 :                     ; Animates the sprite with a animation script,
(1) 1992/FFFFFFFFFFFF2718 :                     ; modifies obj_frame with the frame to use.
(1) 1993/FFFFFFFFFFFF2718 :                     ;
(1) 1994/FFFFFFFFFFFF2718 :                     ; Input:
(1) 1995/FFFFFFFFFFFF2718 :                     ; a6 | This object
(1) 1996/FFFFFFFFFFFF2718 :                     ; a0 | Animation data
(1) 1997/FFFFFFFFFFFF2718 :                     ; --------------------------------------------------------
(1) 1998/FFFFFFFFFFFF2718 :                     
(1) 1999/FFFFFFFFFFFF2718 :                     ; anim_data:
(1) 2000/FFFFFFFFFFFF2718 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/FFFFFFFFFFFF2718 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/FFFFFFFFFFFF2718 :                     ; 	;...
(1) 2003/FFFFFFFFFFFF2718 :                     ;
(1) 2004/FFFFFFFFFFFF2718 :                     ; .frame_num:
(1) 2005/FFFFFFFFFFFF2718 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/FFFFFFFFFFFF2718 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/FFFFFFFFFFFF2718 :                     ; 	dc.w command			; End-of-data command
(1) 2008/FFFFFFFFFFFF2718 :                     ;
(1) 2009/FFFFFFFFFFFF2718 :                     ; commands:
(1) 2010/FFFFFFFFFFFF2718 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/FFFFFFFFFFFF2718 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/FFFFFFFFFFFF2718 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/FFFFFFFFFFFF2718 :                     
(1) 2014/FFFFFFFFFFFF2718 :                     object_Animate:
(1) 2015/FFFFFFFFFFFF2718 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/FFFFFFFFFFFF271C : 7E00                		moveq	#0,d7
(1) 2017/FFFFFFFFFFFF271E : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/FFFFFFFFFFFF2722 : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/FFFFFFFFFFFF2726 : 670E                 		beq.s	.sameThing
(1) 2020/FFFFFFFFFFFF2728 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/FFFFFFFFFFFF272E : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/FFFFFFFFFFFF2732 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/FFFFFFFFFFFF2736 :                     .sameThing:
(1) 2024/FFFFFFFFFFFF2736 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/FFFFFFFFFFFF273A : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/FFFFFFFFFFFF273E : 6748                 		beq.s	.return
(1) 2027/FFFFFFFFFFFF2740 : DE47                 		add.w	d7,d7
(1) 2028/FFFFFFFFFFFF2742 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/FFFFFFFFFFFF2746 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/FFFFFFFFFFFF274A : 3E18                 		move.w	(a0)+,d7
(1) 2031/FFFFFFFFFFFF274C : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/FFFFFFFFFFFF2750 : 670C                 		beq.s	.keepspd
(1) 2033/FFFFFFFFFFFF2752 : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/FFFFFFFFFFFF2758 : 6A2E                 		bpl.s	.return
(1) 2035/FFFFFFFFFFFF275A : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/FFFFFFFFFFFF275E :                     .keepspd:
(1) 2037/FFFFFFFFFFFF275E : 7C00                 		moveq	#0,d6
(1) 2038/FFFFFFFFFFFF2760 : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/FFFFFFFFFFFF2764 : DE47                 		add.w	d7,d7
(1) 2040/FFFFFFFFFFFF2766 : 3C10                 		move.w	(a0),d6
(1) 2041/FFFFFFFFFFFF2768 : D0C7                 		adda	d7,a0
(1) 2042/FFFFFFFFFFFF276A : 3A10                 		move.w	(a0),d5
(1) 2043/FFFFFFFFFFFF276C : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/FFFFFFFFFFFF2770 : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/FFFFFFFFFFFF2772 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/FFFFFFFFFFFF2776 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/FFFFFFFFFFFF2778 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/FFFFFFFFFFFF277C : 671A                 		beq.s	.goToFrame
(1) 2049/FFFFFFFFFFFF277E : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/FFFFFFFFFFFF2782 : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/FFFFFFFFFFFF2788 :                     .return:
(1) 2052/FFFFFFFFFFFF2788 : 601C                 		bra.s	.exit_anim
(1) 2053/FFFFFFFFFFFF278A :                     .noAnim:
(1) 2054/FFFFFFFFFFFF278A : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/FFFFFFFFFFFF2790 : 3A06                 		move.w	d6,d5
(1) 2056/FFFFFFFFFFFF2792 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/FFFFFFFFFFFF2796 : 600E                		bra.s	.exit_anim
(1) 2058/FFFFFFFFFFFF2798 :                     .goToFrame:
(1) 2059/FFFFFFFFFFFF2798 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/FFFFFFFFFFFF279C : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/FFFFFFFFFFFF27A2 :                     .lastFrame:
(1) 2062/FFFFFFFFFFFF27A2 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/FFFFFFFFFFFF27A6 :                     .exit_anim:
(1) 2064/FFFFFFFFFFFF27A6 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/FFFFFFFFFFFF27AA : 4E75                		rts
(1) 2066/FFFFFFFFFFFF27AC :                     
(1) 2067/FFFFFFFFFFFF27AC :                     ; --------------------------------------------------------
(1) 2068/FFFFFFFFFFFF27AC :                     ; object_Touch
(1) 2069/FFFFFFFFFFFF27AC :                     ;
(1) 2070/FFFFFFFFFFFF27AC :                     ; Detects collision with another Object
(1) 2071/FFFFFFFFFFFF27AC :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/FFFFFFFFFFFF27AC :                     ;
(1) 2073/FFFFFFFFFFFF27AC :                     ; Input:
(1) 2074/FFFFFFFFFFFF27AC :                     ; a6   | This object
(1) 2075/FFFFFFFFFFFF27AC :                     ;
(1) 2076/FFFFFFFFFFFF27AC :                     ; Returns:
(1) 2077/FFFFFFFFFFFF27AC :                     ; d0.l | If Nothing: 0
(1) 2078/FFFFFFFFFFFF27AC :                     ;        If Found:   The target's RAM location
(1) 2079/FFFFFFFFFFFF27AC :                     ; --------------------------------------------------------
(1) 2080/FFFFFFFFFFFF27AC :                     
(1) 2081/FFFFFFFFFFFF27AC :                     object_Touch:
(1) 2082/FFFFFFFFFFFF27AC : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/FFFFFFFFFFFF27B0 : 7000                		moveq	#0,d0
(1) 2084/FFFFFFFFFFFF27B2 : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/FFFFFFFFFFFF27B6 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/FFFFFFFFFFFF27BA : 8C45                		or.w	d5,d6
(1) 2087/FFFFFFFFFFFF27BC : 671E                		beq	.exit_this
(1) 2088/FFFFFFFFFFFF27BE : 4BF8 E9B4           		lea	(RAM_Objects).w,a5
(1) 2089/FFFFFFFFFFFF27C2 : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/FFFFFFFFFFFF27C4 :                     .next:
(1) 2091/FFFFFFFFFFFF27C4 : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/FFFFFFFFFFFF27C6 : 670A                		beq.s	.skip
(1) 2093/FFFFFFFFFFFF27C8 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/FFFFFFFFFFFF27CA : 6706                		beq.s	.skip
(1) 2095/FFFFFFFFFFFF27CC : 6114                		bsr.s	.check_this
(1) 2096/FFFFFFFFFFFF27CE : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/FFFFFFFFFFFF27D0 : 660A                		bne.s	.exit_this
(1) 2098/FFFFFFFFFFFF27D2 : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/FFFFFFFFFFFF27D6 : 51CF FFEC           		dbf	d7,.next
(1) 2100/FFFFFFFFFFFF27DA : 7000                		moveq	#0,d0
(1) 2101/FFFFFFFFFFFF27DC :                     .exit_this:
(1) 2102/FFFFFFFFFFFF27DC : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/FFFFFFFFFFFF27E0 : 4E75                		rts
(1) 2104/FFFFFFFFFFFF27E2 :                     
(1) 2105/FFFFFFFFFFFF27E2 :                     ; main check
(1) 2106/FFFFFFFFFFFF27E2 :                     .check_this:
(1) 2107/FFFFFFFFFFFF27E2 : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/FFFFFFFFFFFF27E4 :                     	; d6 - Y current top
(1) 2109/FFFFFFFFFFFF27E4 :                     	; d5 - Y current bottom
(1) 2110/FFFFFFFFFFFF27E4 :                     	; d4 - Y target top
(1) 2111/FFFFFFFFFFFF27E4 :                     	; d3 - Y target bottom
(1) 2112/FFFFFFFFFFFF27E4 :                     	; Check X
(1) 2113/FFFFFFFFFFFF27E4 : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/FFFFFFFFFFFF27E8 : 6700 00B4           		beq	.not_ytop
(1) 2115/FFFFFFFFFFFF27EC : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/FFFFFFFFFFFF27F0 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/FFFFFFFFFFFF27F2 : 3401                		move.w	d1,d2
(1) 2118/FFFFFFFFFFFF27F4 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/FFFFFFFFFFFF27F6 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/FFFFFFFFFFFF27FA :                     ; 		lsl.w	#3,d1
(1) 2121/FFFFFFFFFFFF27FA :                     ; 		lsl.w	#3,d2
(1) 2122/FFFFFFFFFFFF27FA : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/FFFFFFFFFFFF27FC : 9C41                		sub.w	d1,d6
(1) 2124/FFFFFFFFFFFF27FE : DA42                		add.w	d2,d5
(1) 2125/FFFFFFFFFFFF2800 : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/FFFFFFFFFFFF2804 : 6700 0098           		beq	.not_ytop
(1) 2127/FFFFFFFFFFFF2808 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/FFFFFFFFFFFF280C : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/FFFFFFFFFFFF280E : 3401                		move.w	d1,d2
(1) 2130/FFFFFFFFFFFF2810 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/FFFFFFFFFFFF2812 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/FFFFFFFFFFFF2816 :                     ; 		lsl.w	#3,d1
(1) 2133/FFFFFFFFFFFF2816 :                     ; 		lsl.w	#3,d2
(1) 2134/FFFFFFFFFFFF2816 : 5342                		subq.w	#1,d2
(1) 2135/FFFFFFFFFFFF2818 : 9841                		sub.w	d1,d4
(1) 2136/FFFFFFFFFFFF281A : D642                		add.w	d2,d3
(1) 2137/FFFFFFFFFFFF281C : B646                		cmp.w	d6,d3
(1) 2138/FFFFFFFFFFFF281E : 6D7E                		blt	.not_ytop
(1) 2139/FFFFFFFFFFFF2820 : B845                		cmp.w	d5,d4
(1) 2140/FFFFFFFFFFFF2822 : 6C7A                		bge	.not_ytop
(1) 2141/FFFFFFFFFFFF2824 :                     
(1) 2142/FFFFFFFFFFFF2824 :                     	; Check Y
(1) 2143/FFFFFFFFFFFF2824 : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/FFFFFFFFFFFF2828 : 6774                		beq	.not_ytop
(1) 2145/FFFFFFFFFFFF282A : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/FFFFFFFFFFFF282E : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/FFFFFFFFFFFF2830 : 3401                		move.w	d1,d2
(1) 2148/FFFFFFFFFFFF2832 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/FFFFFFFFFFFF2834 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/FFFFFFFFFFFF2838 :                     ; 		lsl.w	#3,d1
(1) 2151/FFFFFFFFFFFF2838 :                     ; 		lsl.w	#3,d2
(1) 2152/FFFFFFFFFFFF2838 : 5342                		subq.w	#1,d2
(1) 2153/FFFFFFFFFFFF283A : 9C41                		sub.w	d1,d6
(1) 2154/FFFFFFFFFFFF283C : DA42                		add.w	d2,d5
(1) 2155/FFFFFFFFFFFF283E : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/FFFFFFFFFFFF2842 : 675A                		beq	.not_ytop
(1) 2157/FFFFFFFFFFFF2844 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/FFFFFFFFFFFF2848 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/FFFFFFFFFFFF284A : 3401                		move.w	d1,d2
(1) 2160/FFFFFFFFFFFF284C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/FFFFFFFFFFFF284E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/FFFFFFFFFFFF2852 :                     ; 		lsl.w	#3,d1
(1) 2163/FFFFFFFFFFFF2852 :                     ; 		lsl.w	#3,d2
(1) 2164/FFFFFFFFFFFF2852 : 5342                		subq.w	#1,d2
(1) 2165/FFFFFFFFFFFF2854 : 9841                		sub.w	d1,d4
(1) 2166/FFFFFFFFFFFF2856 : D642                		add.w	d2,d3
(1) 2167/FFFFFFFFFFFF2858 : B646                		cmp.w	d6,d3
(1) 2168/FFFFFFFFFFFF285A : 6D42                		blt.s	.not_ytop
(1) 2169/FFFFFFFFFFFF285C : B845                		cmp.w	d5,d4
(1) 2170/FFFFFFFFFFFF285E : 6C3E                		bge.s	.not_ytop
(1) 2171/FFFFFFFFFFFF2860 :                     
(1) 2172/FFFFFFFFFFFF2860 :                     	; Special Z check
(1) 2173/FFFFFFFFFFFF2860 : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/FFFFFFFFFFFF2864 : 6736                		beq.s	.set_ok
(1) 2175/FFFFFFFFFFFF2866 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/FFFFFFFFFFFF286A : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/FFFFFFFFFFFF286C : 3401                		move.w	d1,d2
(1) 2178/FFFFFFFFFFFF286E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/FFFFFFFFFFFF2870 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/FFFFFFFFFFFF2874 :                     ; 		lsl.w	#3,d1
(1) 2181/FFFFFFFFFFFF2874 :                     ; 		lsl.w	#3,d2
(1) 2182/FFFFFFFFFFFF2874 : 5342                		subq.w	#1,d2
(1) 2183/FFFFFFFFFFFF2876 : 9C41                		sub.w	d1,d6
(1) 2184/FFFFFFFFFFFF2878 : DA42                		add.w	d2,d5
(1) 2185/FFFFFFFFFFFF287A : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/FFFFFFFFFFFF287E : 671C                		beq.s	.set_ok
(1) 2187/FFFFFFFFFFFF2880 : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/FFFFFFFFFFFF2884 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/FFFFFFFFFFFF2886 : 3401                		move.w	d1,d2
(1) 2190/FFFFFFFFFFFF2888 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/FFFFFFFFFFFF288A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/FFFFFFFFFFFF288E :                     ; 		lsl.w	#3,d1
(1) 2193/FFFFFFFFFFFF288E :                     ; 		lsl.w	#3,d2
(1) 2194/FFFFFFFFFFFF288E : 5342                		subq.w	#1,d2
(1) 2195/FFFFFFFFFFFF2890 : 9841                		sub.w	d1,d4
(1) 2196/FFFFFFFFFFFF2892 : D642                		add.w	d2,d3
(1) 2197/FFFFFFFFFFFF2894 : B646                		cmp.w	d6,d3
(1) 2198/FFFFFFFFFFFF2896 : 6D06                		blt	.not_ytop
(1) 2199/FFFFFFFFFFFF2898 : B845                		cmp.w	d5,d4
(1) 2200/FFFFFFFFFFFF289A : 6C02                		bge	.not_ytop
(1) 2201/FFFFFFFFFFFF289C :                     .set_ok:
(1) 2202/FFFFFFFFFFFF289C : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/FFFFFFFFFFFF289E :                     .not_ytop:
(1) 2204/FFFFFFFFFFFF289E : 4E75                		rts
(1) 2205/FFFFFFFFFFFF28A0 :                     
(1) 2206/FFFFFFFFFFFF28A0 :                     ; ============================================================
(1) 2207/FFFFFFFFFFFF28A0 :                     ; --------------------------------------------------------
(1) 2208/FFFFFFFFFFFF28A0 :                     ; object_GetSprInfo
(1) 2209/FFFFFFFFFFFF28A0 :                     ;
(1) 2210/FFFFFFFFFFFF28A0 :                     ; Call this before using
(1) 2211/FFFFFFFFFFFF28A0 :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/FFFFFFFFFFFF28A0 :                     ;
(1) 2213/FFFFFFFFFFFF28A0 :                     ; Input:
(1) 2214/FFFFFFFFFFFF28A0 :                     ; a6   | This object
(1) 2215/FFFFFFFFFFFF28A0 :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/FFFFFFFFFFFF28A0 :                     ;        - Set to 0 for 3D Sprites
(1) 2217/FFFFFFFFFFFF28A0 :                     ; d1.w | Flags
(1) 2218/FFFFFFFFFFFF28A0 :                     ;
(1) 2219/FFFFFFFFFFFF28A0 :                     ; Output:
(1) 2220/FFFFFFFFFFFF28A0 :                     ; d0.l | X and Y position
(1) 2221/FFFFFFFFFFFF28A0 :                     ; d1.l | Flags and Z Position
(1) 2222/FFFFFFFFFFFF28A0 :                     ; d4.w | Current frame
(1) 2223/FFFFFFFFFFFF28A0 :                     ; --------------------------------------------------------
(1) 2224/FFFFFFFFFFFF28A0 :                     
(1) 2225/FFFFFFFFFFFF28A0 :                     object_MdMars_GetSprInfo:
(1) 2227/FFFFFFFFFFFF28A0 : 4841                		swap	d1
(1) 2228/FFFFFFFFFFFF28A2 : 322E 000C           		move.w	obj_z(a6),d1
(1) 2229/FFFFFFFFFFFF28A6 : 4840                		swap	d0
(1) 2230/FFFFFFFFFFFF28A8 : 382E 0004           		move.w	obj_x(a6),d4
(1) 2231/FFFFFFFFFFFF28AC : 9840                		sub.w	d0,d4
(1) 2232/FFFFFFFFFFFF28AE : 4844                		swap	d4
(1) 2233/FFFFFFFFFFFF28B0 : 4840                		swap	d0
(1) 2234/FFFFFFFFFFFF28B2 : 382E 0008           		move.w	obj_y(a6),d4		; d0 - Xpos | Ypos
(1) 2235/FFFFFFFFFFFF28B6 : 9840                		sub.w	d0,d4
(1) 2236/FFFFFFFFFFFF28B8 : C940                		exg.l	d4,d0
(1) 2237/FFFFFFFFFFFF28BA : 7800                		moveq	#0,d4
(1) 2238/FFFFFFFFFFFF28BC : 382E 0020           		move.w	obj_frame(a6),d4
(1) 2240/FFFFFFFFFFFF28C0 : 4E75                		rts
(1) 2241/FFFFFFFFFFFF28C2 :                     
     197/FFFFFFFFFFFF28C2 :                     
     198/FFFFFFFFFFFF28C2 :                     ; --------------------------------------------------------
     199/FFFFFFFFFFFF28C2 :                     ; SCREEN MODE MAIN LOOP
     200/FFFFFFFFFFFF28C2 :                     ;
     201/FFFFFFFFFFFF28C2 :                     ;  MD/Pico: Direct ROM jump
     202/FFFFFFFFFFFF28C2 :                     ; CD/CD32X: Reads file from DISC and
     203/FFFFFFFFFFFF28C2 :                     ;           transfers code to RAM
     204/FFFFFFFFFFFF28C2 :                     ;      32X: Code is stored on ROM but runs in
     205/FFFFFFFFFFFF28C2 :                     ;           RAM to prevent bus-conflicts with the
     206/FFFFFFFFFFFF28C2 :                     ;           SH2's view of ROM at CS1
     207/FFFFFFFFFFFF28C2 :                     ;
     208/FFFFFFFFFFFF28C2 :                     ; - Returning in your current screen code loops here
     209/FFFFFFFFFFFF28C2 :                     ; - 32X/CD32X:
     210/FFFFFFFFFFFF28C2 :                     ;   This will turn OFF the 32X's current video mode
     211/FFFFFFFFFFFF28C2 :                     ; --------------------------------------------------------
     212/FFFFFFFFFFFF28C2 :                     
     213/FFFFFFFFFFFF28C2 :                     Md_ReadModes:
     214/FFFFFFFFFFFF28C2 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     216/FFFFFFFFFFFF28C6 : 6100 EE0E           		bsr	Video_MdMcd_StampDisable	; Disable Stamps
     217/FFFFFFFFFFFF28CA : 6100 FC50           		bsr	System_MdMcd_CddaStop		; Stop CDDA
     220/FFFFFFFFFFFF28CE : 6100 EFF8           		bsr	Video_MdMars_VideoOff		; Turn OFF all 32X visuals
     222/FFFFFFFFFFFF28D2 : 7000                		moveq	#0,d0
     223/FFFFFFFFFFFF28D4 : 3038 FA10           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     224/FFFFFFFFFFFF28D8 : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     225/FFFFFFFFFFFF28DC : E948                		lsl.w	#4,d0				; number*$10
     226/FFFFFFFFFFFF28DE : 41FB 0024           		lea	.pick_mode(pc,d0.w),a0		; Read list
     227/FFFFFFFFFFFF28E2 :                     	; SCD/CD32X
     229/FFFFFFFFFFFF28E2 : D0FC 0004           		adda	#4,a0				; a0 - Filename string
     230/FFFFFFFFFFFF28E6 : 6100 FA5A           		bsr	System_MdMcd_SubWait
     231/FFFFFFFFFFFF28EA : 43F9 FFFF 2C00      		lea	(RAM_UserCode).l,a1		; a1 - Output location
     232/FFFFFFFFFFFF28F0 : 303C 8400           		move.w	#MAX_UserCode,d0		; Maximum code size
     233/FFFFFFFFFFFF28F4 : 6100 FACE           		bsr	System_MdMcd_RdFile_RAM		; Load CODE from disc
     234/FFFFFFFFFFFF28F8 : 6100 FA48           		bsr	System_MdMcd_SubWait		; Wait Sub-CPU
     235/FFFFFFFFFFFF28FC : 4EB9 FFFF 2C00      		jsr	(RAM_UserCode).l
     236/FFFFFFFFFFFF2902 :                     	; 32X Cartridge
     250/FFFFFFFFFFFF2902 : 60BE                		bra.s	Md_ReadModes			; Loop on rts
     251/FFFFFFFFFFFF2904 :                     
     252/FFFFFFFFFFFF2904 :                     ; ====================================================================
     253/FFFFFFFFFFFF2904 :                     ; ---------------------------------------------
     254/FFFFFFFFFFFF2904 :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     255/FFFFFFFFFFFF2904 :                     ; ---------------------------------------------
     256/FFFFFFFFFFFF2904 :                     
     257/FFFFFFFFFFFF2904 :                     .pick_mode:
     258/FFFFFFFFFFFF2904 :                     		include "game/screens.asm"
(1)    1/FFFFFFFFFFFF2904 :                     ; ============================================================
(1)    2/FFFFFFFFFFFF2904 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF2904 :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/FFFFFFFFFFFF2904 :                     ;
(1)    5/FFFFFFFFFFFF2904 :                     ; - Screen CODE includes: incl_code.asm
(1)    6/FFFFFFFFFFFF2904 :                     ;
(1)    7/FFFFFFFFFFFF2904 :                     ; - DATA Bank includes: incl_data.asm
(1)    8/FFFFFFFFFFFF2904 :                     ;
(1)    9/FFFFFFFFFFFF2904 :                     ; ** For CD/CD32X **
(1)   10/FFFFFFFFFFFF2904 :                     ;    Add your ISO file entries for both
(1)   11/FFFFFFFFFFFF2904 :                     ;    CODE and DATA in iso_files.asm
(1)   12/FFFFFFFFFFFF2904 :                     ; --------------------------------------------------------
(1)   13/FFFFFFFFFFFF2904 :                     
(1)   14/FFFFFFFFFFFF2904 :                     ; Entry:
(1)   15/FFFFFFFFFFFF2904 : 0005 1000           		dc.l Md_Screen00	; ****
(1)   16/FFFFFFFFFFFF2908 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF290E : 3030 2E42 494E    
(1)   17/FFFFFFFFFFFF2914 : 0005 1800           		dc.l Md_Screen01	; ****
(1)   18/FFFFFFFFFFFF2918 : 5343 5245 454E      		dc.b "SCREEN01.BIN"
         FFFFFFFFFFFF291E : 3031 2E42 494E    
(1)   19/FFFFFFFFFFFF2924 : 0005 2000           		dc.l Md_Screen02	; ****
(1)   20/FFFFFFFFFFFF2928 : 5343 5245 454E      		dc.b "SCREEN02.BIN"
         FFFFFFFFFFFF292E : 3032 2E42 494E    
(1)   21/FFFFFFFFFFFF2934 : 0005 3800           		dc.l Md_Screen03	; ****
(1)   22/FFFFFFFFFFFF2938 : 5343 5245 454E      		dc.b "SCREEN03.BIN"
         FFFFFFFFFFFF293E : 3033 2E42 494E    
(1)   23/FFFFFFFFFFFF2944 : 0005 4000           		dc.l Md_Screen04	; ****
(1)   24/FFFFFFFFFFFF2948 : 5343 5245 454E      		dc.b "SCREEN04.BIN"
         FFFFFFFFFFFF294E : 3034 2E42 494E    
(1)   25/FFFFFFFFFFFF2954 : 0005 1000           		dc.l Md_Screen00	; ****
(1)   26/FFFFFFFFFFFF2958 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF295E : 3030 2E42 494E    
(1)   27/FFFFFFFFFFFF2964 : 0005 1000           		dc.l Md_Screen00	; ****
(1)   28/FFFFFFFFFFFF2968 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF296E : 3030 2E42 494E    
(1)   29/FFFFFFFFFFFF2974 : 0005 4800           		dc.l Md_Screen07	; ****
(1)   30/FFFFFFFFFFFF2978 : 5343 5245 454E      		dc.b "SCREEN07.BIN"
         FFFFFFFFFFFF297E : 3037 2E42 494E    
(1)   31/FFFFFFFFFFFF2984 :                     
     259/FFFFFFFFFFFF2984 :                     
     260/FFFFFFFFFFFF2984 :                     ; ====================================================================
     261/FFFFFFFFFFFF2984 :                     
     263/FFFFFFFFFFFF2984 :                     .end:
     264/FFFFFFFFFFFF2984 : (MACRO)              		erreport "NIKONA RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     265/    54E2 :                     		dephase
     266/    54E2 :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     268/    54E2 :                     
     269/    54E2 :                     Md_SysCode_e:
     270/    54E2 :                     		align 2
     271/    54E2 :                     
     272/    54E2 :                     ; ===========================================================================
     273/    54E2 :                     ; ----------------------------------------------------------------
     274/    54E2 :                     ; DATA section shared on both Cartridge or Disc
     275/    54E2 :                     ; ----------------------------------------------------------------
     276/    54E2 :                     
     277/    54E2 :                     ; --------------------------------------------------------
     278/    54E2 :                     ; CD/CD32X ISO header and files
     279/    54E2 :                     ; --------------------------------------------------------
     280/    54E2 :                     
     282/    54E2 :                     		align $8000
     283/    8000 :                     		binclude "system/mcd/fshead.bin"		; Pre-generated ISO header
     284/    B800 : (MACRO)              		fs_mkList 0,IsoFileList,IsoFileList_e		; TWO pointers to the filelist
     284/    B800 :                     .fstrt:
     284/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     284/    B801 : 00                                  dc.b 0                                          ; Zero
     284/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     284/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     284/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     284/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     284/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     284/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     284/    B812 : 7D                                  dc.b (2024-1900)+1                              ; Year
     284/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     284/    B819 : 02                                  dc.b 2                                          ; File flags
     284/    B81A : 0000                                dc.b 0,0
     284/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     284/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     284/    B820 : 0100                                dc.b 1,0
     284/    B822 :                     .fend:
     285/    B822 : (MACRO)              		fs_mkList 1,IsoFileList,IsoFileList_e
     285/    B822 :                     .fstrt:
     285/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     285/    B823 : 00                                  dc.b 0                                          ; Zero
     285/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     285/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     285/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     285/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     285/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     285/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     285/    B834 : 7D                                  dc.b (2024-1900)+1                              ; Year
     285/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     285/    B83B : 02                                  dc.b 2                                          ; File flags
     285/    B83C : 0000                                dc.b 0,0
     285/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     285/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     285/    B842 : 0101                                dc.b 1,1
     285/    B844 :                     .fend:
     286/    B844 :                     IsoFileList:
     287/    B844 : (MACRO)              		fs_file "NKNA_SUB.BIN",MCD_SMPDATA,MCD_SMPDATA_e
     287/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     287/    B845 : 00                                  dc.b 0                                          ; zero
     287/    B846 : 1C00                                dc.b (MCD_SMPDATA>>11&$FF),(MCD_SMPDATA>>19&$FF)            ; MCD_SMPDATA sector, little
     287/    B848 : 0000                                dc.b (MCD_SMPDATA>>27&$FF),(MCD_SMPDATA>>35&$FF)
     287/    B84A : 0000 001C                           dc.l MCD_SMPDATA>>11                                  ; MCD_SMPDATA sector, big
     287/    B84E : 00C0                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>8&$FF)     ; Filesize, little
     287/    B850 : 0000                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)>>16&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>24&$FF)
     287/    B852 : 0000 C000                           dc.l MCD_SMPDATA_E-MCD_SMPDATA                                  ; Filesize, big
     287/    B856 : 7D                                  dc.b (2024-1900)+1                              ; Year
     287/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     287/    B85D : 00                                  dc.b 0                                          ; File flags
     287/    B85E : 0000                                dc.b 0,0
     287/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     287/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     287/    B864 : 0E                                  dc.b .flend-.flen
     287/    B865 : 4E4B 4E41 5F53      .flen:          dc.b "NKNA_SUB.BIN",";1"
             B86B : 5542 2E42 494E 
             B871 : 3B31             
     287/    B873 : 00                  .flend:         dc.b 0
     287/    B874 :                     .fend:
     288/    B874 : (MACRO)              		fs_file "NKNAMARS.BIN",MARS_RAMCODE,MARS_RAMCODE_EOF
     288/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     288/    B875 : 00                                  dc.b 0                                          ; zero
     288/    B876 : 3500                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     288/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     288/    B87A : 0000 0035                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     288/    B87E : 0068                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     288/    B880 : 0300                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     288/    B882 : 0003 6800                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     288/    B886 : 7D                                  dc.b (2024-1900)+1                              ; Year
     288/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     288/    B88D : 00                                  dc.b 0                                          ; File flags
     288/    B88E : 0000                                dc.b 0,0
     288/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     288/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     288/    B894 : 0E                                  dc.b .flend-.flen
     288/    B895 : 4E4B 4E41 4D41      .flen:          dc.b "NKNAMARS.BIN",";1"
             B89B : 5253 2E42 494E 
             B8A1 : 3B31             
     288/    B8A3 : 00                  .flend:         dc.b 0
     288/    B8A4 :                     .fend:
     289/    B8A4 : (MACRO)              		fs_file "GEMA_Z80.BIN",Z80_CODE_FILE,Z80_CODE_FILE_E
     289/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     289/    B8A5 : 00                                  dc.b 0                                          ; zero
     289/    B8A6 : 1800                                dc.b (Z80_CODE_FILE>>11&$FF),(Z80_CODE_FILE>>19&$FF)            ; Z80_CODE_FILE sector, little
     289/    B8A8 : 0000                                dc.b (Z80_CODE_FILE>>27&$FF),(Z80_CODE_FILE>>35&$FF)
     289/    B8AA : 0000 0018                           dc.l Z80_CODE_FILE>>11                                  ; Z80_CODE_FILE sector, big
     289/    B8AE : 0020                                dc.b ((Z80_CODE_FILE_E-Z80_CODE_FILE)&$FF),((Z80_CODE_FILE_E-Z80_CODE_FILE)>>8&$FF)     ; Filesize, little
     289/    B8B0 : 0000                                dc.b ((Z80_CODE_FILE_E-Z80_CODE_FILE)>>16&$FF),((Z80_CODE_FILE_E-Z80_CODE_FILE)>>24&$FF)
     289/    B8B2 : 0000 2000                           dc.l Z80_CODE_FILE_E-Z80_CODE_FILE                                  ; Filesize, big
     289/    B8B6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     289/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     289/    B8BD : 00                                  dc.b 0                                          ; File flags
     289/    B8BE : 0000                                dc.b 0,0
     289/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     289/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     289/    B8C4 : 0E                                  dc.b .flend-.flen
     289/    B8C5 : 4745 4D41 5F5A      .flen:          dc.b "GEMA_Z80.BIN",";1"
             B8CB : 3830 2E42 494E 
             B8D1 : 3B31             
     289/    B8D3 : 00                  .flend:         dc.b 0
     289/    B8D4 :                     .fend:
     290/    B8D4 :                     	; ******
     291/    B8D4 :                     		include "game/iso_files.asm"
(1)    1/    B8D4 :                     ; ============================================================
(1)    2/    B8D4 :                     ; ----------------------------------------------------
(1)    3/    B8D4 :                     ; SCD/CD32X ONLY:
(1)    4/    B8D4 :                     ; Labels and filenames for the CODE and
(1)    5/    B8D4 :                     ; DATA banks.
(1)    6/    B8D4 :                     ; ----------------------------------------------------
(1)    7/    B8D4 :                     
(1)    8/    B8D4 :                     	;fs_file "ISO_FILE.BIN",Label_DataStart,Lable_DataEnd
(1)    9/    B8D4 :                     
(1)   10/    B8D4 : (MACRO)              	fs_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
(1)   10/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   10/    B8D5 : 00                                  dc.b 0                                          ; zero
(1)   10/    B8D6 : A200                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
(1)   10/    B8D8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
(1)   10/    B8DA : 0000 00A2                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
(1)   10/    B8DE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
(1)   10/    B8E0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
(1)   10/    B8E2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
(1)   10/    B8E6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   10/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   10/    B8ED : 00                                  dc.b 0                                          ; File flags
(1)   10/    B8EE : 0000                                dc.b 0,0
(1)   10/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   10/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   10/    B8F4 : 0E                                  dc.b .flend-.flen
(1)   10/    B8F5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8FB : 3030 2E42 494E 
             B901 : 3B31             
(1)   10/    B903 : 00                  .flend:         dc.b 0
(1)   10/    B904 :                     .fend:
(1)   11/    B904 : (MACRO)              	fs_file "SCREEN01.BIN",Md_Screen01,Md_Screen01_e
(1)   11/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   11/    B905 : 00                                  dc.b 0                                          ; zero
(1)   11/    B906 : A300                                dc.b (MD_SCREEN01>>11&$FF),(MD_SCREEN01>>19&$FF)            ; MD_SCREEN01 sector, little
(1)   11/    B908 : 0000                                dc.b (MD_SCREEN01>>27&$FF),(MD_SCREEN01>>35&$FF)
(1)   11/    B90A : 0000 00A3                           dc.l MD_SCREEN01>>11                                  ; MD_SCREEN01 sector, big
(1)   11/    B90E : 0008                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>8&$FF)     ; Filesize, little
(1)   11/    B910 : 0000                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)>>16&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>24&$FF)
(1)   11/    B912 : 0000 0800                           dc.l MD_SCREEN01_E-MD_SCREEN01                                  ; Filesize, big
(1)   11/    B916 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   11/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   11/    B91D : 00                                  dc.b 0                                          ; File flags
(1)   11/    B91E : 0000                                dc.b 0,0
(1)   11/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   11/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   11/    B924 : 0E                                  dc.b .flend-.flen
(1)   11/    B925 : 5343 5245 454E      .flen:          dc.b "SCREEN01.BIN",";1"
             B92B : 3031 2E42 494E 
             B931 : 3B31             
(1)   11/    B933 : 00                  .flend:         dc.b 0
(1)   11/    B934 :                     .fend:
(1)   12/    B934 : (MACRO)              	fs_file "SCREEN02.BIN",Md_Screen02,Md_Screen02_e
(1)   12/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   12/    B935 : 00                                  dc.b 0                                          ; zero
(1)   12/    B936 : A400                                dc.b (MD_SCREEN02>>11&$FF),(MD_SCREEN02>>19&$FF)            ; MD_SCREEN02 sector, little
(1)   12/    B938 : 0000                                dc.b (MD_SCREEN02>>27&$FF),(MD_SCREEN02>>35&$FF)
(1)   12/    B93A : 0000 00A4                           dc.l MD_SCREEN02>>11                                  ; MD_SCREEN02 sector, big
(1)   12/    B93E : 0018                                dc.b ((MD_SCREEN02_E-MD_SCREEN02)&$FF),((MD_SCREEN02_E-MD_SCREEN02)>>8&$FF)     ; Filesize, little
(1)   12/    B940 : 0000                                dc.b ((MD_SCREEN02_E-MD_SCREEN02)>>16&$FF),((MD_SCREEN02_E-MD_SCREEN02)>>24&$FF)
(1)   12/    B942 : 0000 1800                           dc.l MD_SCREEN02_E-MD_SCREEN02                                  ; Filesize, big
(1)   12/    B946 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   12/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   12/    B94D : 00                                  dc.b 0                                          ; File flags
(1)   12/    B94E : 0000                                dc.b 0,0
(1)   12/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   12/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   12/    B954 : 0E                                  dc.b .flend-.flen
(1)   12/    B955 : 5343 5245 454E      .flen:          dc.b "SCREEN02.BIN",";1"
             B95B : 3032 2E42 494E 
             B961 : 3B31             
(1)   12/    B963 : 00                  .flend:         dc.b 0
(1)   12/    B964 :                     .fend:
(1)   13/    B964 : (MACRO)              	fs_file "SCREEN03.BIN",Md_Screen03,Md_Screen03_e
(1)   13/    B964 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   13/    B965 : 00                                  dc.b 0                                          ; zero
(1)   13/    B966 : A700                                dc.b (MD_SCREEN03>>11&$FF),(MD_SCREEN03>>19&$FF)            ; MD_SCREEN03 sector, little
(1)   13/    B968 : 0000                                dc.b (MD_SCREEN03>>27&$FF),(MD_SCREEN03>>35&$FF)
(1)   13/    B96A : 0000 00A7                           dc.l MD_SCREEN03>>11                                  ; MD_SCREEN03 sector, big
(1)   13/    B96E : 0008                                dc.b ((MD_SCREEN03_E-MD_SCREEN03)&$FF),((MD_SCREEN03_E-MD_SCREEN03)>>8&$FF)     ; Filesize, little
(1)   13/    B970 : 0000                                dc.b ((MD_SCREEN03_E-MD_SCREEN03)>>16&$FF),((MD_SCREEN03_E-MD_SCREEN03)>>24&$FF)
(1)   13/    B972 : 0000 0800                           dc.l MD_SCREEN03_E-MD_SCREEN03                                  ; Filesize, big
(1)   13/    B976 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   13/    B977 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   13/    B97D : 00                                  dc.b 0                                          ; File flags
(1)   13/    B97E : 0000                                dc.b 0,0
(1)   13/    B980 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   13/    B982 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   13/    B984 : 0E                                  dc.b .flend-.flen
(1)   13/    B985 : 5343 5245 454E      .flen:          dc.b "SCREEN03.BIN",";1"
             B98B : 3033 2E42 494E 
             B991 : 3B31             
(1)   13/    B993 : 00                  .flend:         dc.b 0
(1)   13/    B994 :                     .fend:
(1)   14/    B994 : (MACRO)              	fs_file "SCREEN04.BIN",Md_Screen04,Md_Screen04_e
(1)   14/    B994 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   14/    B995 : 00                                  dc.b 0                                          ; zero
(1)   14/    B996 : A800                                dc.b (MD_SCREEN04>>11&$FF),(MD_SCREEN04>>19&$FF)            ; MD_SCREEN04 sector, little
(1)   14/    B998 : 0000                                dc.b (MD_SCREEN04>>27&$FF),(MD_SCREEN04>>35&$FF)
(1)   14/    B99A : 0000 00A8                           dc.l MD_SCREEN04>>11                                  ; MD_SCREEN04 sector, big
(1)   14/    B99E : 0008                                dc.b ((MD_SCREEN04_E-MD_SCREEN04)&$FF),((MD_SCREEN04_E-MD_SCREEN04)>>8&$FF)     ; Filesize, little
(1)   14/    B9A0 : 0000                                dc.b ((MD_SCREEN04_E-MD_SCREEN04)>>16&$FF),((MD_SCREEN04_E-MD_SCREEN04)>>24&$FF)
(1)   14/    B9A2 : 0000 0800                           dc.l MD_SCREEN04_E-MD_SCREEN04                                  ; Filesize, big
(1)   14/    B9A6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   14/    B9A7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   14/    B9AD : 00                                  dc.b 0                                          ; File flags
(1)   14/    B9AE : 0000                                dc.b 0,0
(1)   14/    B9B0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   14/    B9B2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   14/    B9B4 : 0E                                  dc.b .flend-.flen
(1)   14/    B9B5 : 5343 5245 454E      .flen:          dc.b "SCREEN04.BIN",";1"
             B9BB : 3034 2E42 494E 
             B9C1 : 3B31             
(1)   14/    B9C3 : 00                  .flend:         dc.b 0
(1)   14/    B9C4 :                     .fend:
(1)   15/    B9C4 : (MACRO)              	fs_file "SCREEN07.BIN",Md_Screen07,Md_Screen07_e
(1)   15/    B9C4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   15/    B9C5 : 00                                  dc.b 0                                          ; zero
(1)   15/    B9C6 : A900                                dc.b (MD_SCREEN07>>11&$FF),(MD_SCREEN07>>19&$FF)            ; MD_SCREEN07 sector, little
(1)   15/    B9C8 : 0000                                dc.b (MD_SCREEN07>>27&$FF),(MD_SCREEN07>>35&$FF)
(1)   15/    B9CA : 0000 00A9                           dc.l MD_SCREEN07>>11                                  ; MD_SCREEN07 sector, big
(1)   15/    B9CE : 0010                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>8&$FF)     ; Filesize, little
(1)   15/    B9D0 : 0000                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)>>16&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>24&$FF)
(1)   15/    B9D2 : 0000 1000                           dc.l MD_SCREEN07_E-MD_SCREEN07                                  ; Filesize, big
(1)   15/    B9D6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   15/    B9D7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   15/    B9DD : 00                                  dc.b 0                                          ; File flags
(1)   15/    B9DE : 0000                                dc.b 0,0
(1)   15/    B9E0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   15/    B9E2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   15/    B9E4 : 0E                                  dc.b .flend-.flen
(1)   15/    B9E5 : 5343 5245 454E      .flen:          dc.b "SCREEN07.BIN",";1"
             B9EB : 3037 2E42 494E 
             B9F1 : 3B31             
(1)   15/    B9F3 : 00                  .flend:         dc.b 0
(1)   15/    B9F4 :                     .fend:
(1)   16/    B9F4 : (MACRO)              	fs_file "BNK_MAIN.BIN",DATA_BANK0,DATA_BANK0_e
(1)   16/    B9F4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   16/    B9F5 : 00                                  dc.b 0                                          ; zero
(1)   16/    B9F6 : AB00                                dc.b (DATA_BANK0>>11&$FF),(DATA_BANK0>>19&$FF)            ; DATA_BANK0 sector, little
(1)   16/    B9F8 : 0000                                dc.b (DATA_BANK0>>27&$FF),(DATA_BANK0>>35&$FF)
(1)   16/    B9FA : 0000 00AB                           dc.l DATA_BANK0>>11                                  ; DATA_BANK0 sector, big
(1)   16/    B9FE : 0000                                dc.b ((DATA_BANK0_E-DATA_BANK0)&$FF),((DATA_BANK0_E-DATA_BANK0)>>8&$FF)     ; Filesize, little
(1)   16/    BA00 : 0300                                dc.b ((DATA_BANK0_E-DATA_BANK0)>>16&$FF),((DATA_BANK0_E-DATA_BANK0)>>24&$FF)
(1)   16/    BA02 : 0003 0000                           dc.l DATA_BANK0_E-DATA_BANK0                                  ; Filesize, big
(1)   16/    BA06 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   16/    BA07 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   16/    BA0D : 00                                  dc.b 0                                          ; File flags
(1)   16/    BA0E : 0000                                dc.b 0,0
(1)   16/    BA10 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   16/    BA12 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   16/    BA14 : 0E                                  dc.b .flend-.flen
(1)   16/    BA15 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MAIN.BIN",";1"
             BA1B : 494E 2E42 494E 
             BA21 : 3B31             
(1)   16/    BA23 : 00                  .flend:         dc.b 0
(1)   16/    BA24 :                     .fend:
(1)   17/    BA24 : (MACRO)              	fs_file "BNK_MARS.BIN",DATA_BANK1,DATA_BANK1_e
(1)   17/    BA24 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   17/    BA25 : 00                                  dc.b 0                                          ; zero
(1)   17/    BA26 : 0B01                                dc.b (DATA_BANK1>>11&$FF),(DATA_BANK1>>19&$FF)            ; DATA_BANK1 sector, little
(1)   17/    BA28 : 0000                                dc.b (DATA_BANK1>>27&$FF),(DATA_BANK1>>35&$FF)
(1)   17/    BA2A : 0000 010B                           dc.l DATA_BANK1>>11                                  ; DATA_BANK1 sector, big
(1)   17/    BA2E : 0080                                dc.b ((DATA_BANK1_E-DATA_BANK1)&$FF),((DATA_BANK1_E-DATA_BANK1)>>8&$FF)     ; Filesize, little
(1)   17/    BA30 : 0100                                dc.b ((DATA_BANK1_E-DATA_BANK1)>>16&$FF),((DATA_BANK1_E-DATA_BANK1)>>24&$FF)
(1)   17/    BA32 : 0001 8000                           dc.l DATA_BANK1_E-DATA_BANK1                                  ; Filesize, big
(1)   17/    BA36 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   17/    BA37 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   17/    BA3D : 00                                  dc.b 0                                          ; File flags
(1)   17/    BA3E : 0000                                dc.b 0,0
(1)   17/    BA40 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   17/    BA42 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   17/    BA44 : 0E                                  dc.b .flend-.flen
(1)   17/    BA45 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MARS.BIN",";1"
             BA4B : 5253 2E42 494E 
             BA51 : 3B31             
(1)   17/    BA53 : 00                  .flend:         dc.b 0
(1)   17/    BA54 :                     .fend:
(1)   18/    BA54 : (MACRO)              	fs_file "STAMPS_0.BIN",DATA_BNKSTAMP,DATA_BNKSTAMP_e
(1)   18/    BA54 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   18/    BA55 : 00                                  dc.b 0                                          ; zero
(1)   18/    BA56 : 3B01                                dc.b (DATA_BNKSTAMP>>11&$FF),(DATA_BNKSTAMP>>19&$FF)            ; DATA_BNKSTAMP sector, little
(1)   18/    BA58 : 0000                                dc.b (DATA_BNKSTAMP>>27&$FF),(DATA_BNKSTAMP>>35&$FF)
(1)   18/    BA5A : 0000 013B                           dc.l DATA_BNKSTAMP>>11                                  ; DATA_BNKSTAMP sector, big
(1)   18/    BA5E : 0068                                dc.b ((DATA_BNKSTAMP_E-DATA_BNKSTAMP)&$FF),((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>8&$FF)     ; Filesize, little
(1)   18/    BA60 : 0000                                dc.b ((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>16&$FF),((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>24&$FF)
(1)   18/    BA62 : 0000 6800                           dc.l DATA_BNKSTAMP_E-DATA_BNKSTAMP                                  ; Filesize, big
(1)   18/    BA66 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   18/    BA67 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   18/    BA6D : 00                                  dc.b 0                                          ; File flags
(1)   18/    BA6E : 0000                                dc.b 0,0
(1)   18/    BA70 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   18/    BA72 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   18/    BA74 : 0E                                  dc.b .flend-.flen
(1)   18/    BA75 : 5354 414D 5053      .flen:          dc.b "STAMPS_0.BIN",";1"
             BA7B : 5F30 2E42 494E 
             BA81 : 3B31             
(1)   18/    BA83 : 00                  .flend:         dc.b 0
(1)   18/    BA84 :                     .fend:
(1)   19/    BA84 :                     
     292/    BA84 :                     	; ******
     293/    BA84 : (MACRO)              		fs_end
     293/    BA84 : 00                                  dc.b 0
     293/    BA85 :                                     align $800                      ; Filler sector
     294/    C000 :                     IsoFileList_e:
     296/    C000 :                     
     297/    C000 :                     ; ===========================================================================
     298/    C000 :                     ; --------------------------------------------------------
     299/    C000 :                     ; Z80 driver include
     300/    C000 :                     ;
     301/    C000 :                     ; SCD/CD32X: Stored on DISC
     302/    C000 :                     ; --------------------------------------------------------
     303/    C000 :                     
     305/    C000 :                     		align $800
     306/    C000 :                     Z80_CODE_FILE:
     307/  200000 :                     		phase sysmcd_wram
     311/  200000 :                     Z80_CODE:
     315/  200000 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; -------------------------------------------------------------------
(1)    3/  200000 :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/  200000 :                     ; -------------------------------------------------------------------
(1)    5/  200000 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of buffers
(1)   19/       0 :                     
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip tables
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   23/       0 :                     
(1)   24/       0 : =0H                  DBUG_DAC	equ 0		; *DEBUG* Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   54/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   55/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   56/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   57/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   58/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   59/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   60/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   61/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXES START HERE
(1)   62/       0 :                     
(1)   63/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   64/       0 :                     ;
(1)   65/       0 :                     ; chnl_Flags: E0LRevin
(1)   66/       0 :                     ; 	 E - Channel is active
(1)   67/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   68/       0 :                     ; 	 e - Effect*
(1)   69/       0 :                     ; 	 v - Volume*
(1)   70/       0 :                     ; 	 i - Intrument*
(1)   71/       0 :                     ; 	 n - Note*
(1)   72/       0 : =0H                  chnl_Flags	equ 0	; Playback flags: %E0LRevin ** MUST STAY AT 0
(1)   73/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   74/       0 : =2H                  chnl_Note	equ 2	; IT Musical note or command
(1)   75/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   76/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   77/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   78/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   79/       0 : =7H                  chnl_Type	equ 7	; Impulse update bits
(1)   80/       0 :                     
(1)   81/       0 :                     
(1)   82/       0 :                     ; Table struct
(1)   83/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   84/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level or 80h+chipID Silence request
(1)   85/       0 : =3H                  ztbl_Chip	equ 03h			; Chip index (If YM2612: direct KEY index) *MUST BE ON THE LIST*
(1)   86/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   87/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   88/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   89/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   90/       0 : =8H                  ztbl_EffBuff	equ 08h			; Effect setting
(1)   91/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   92/       0 :                     
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     ; Variables
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   98/       0 : =0H                  zopcNop		equ 00h
(1)   99/       0 : =8H                  zopcEx		equ 08h
(1)  100/       0 : =0C9H                zopcRet		equ 0C9h
(1)  101/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  102/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  103/       0 :                     
(1)  104/       0 :                     ; PSG
(1)  105/       0 : =0H                  COM		equ 0
(1)  106/       0 : =4H                  LEV		equ 4
(1)  107/       0 : =8H                  ATK		equ 8
(1)  108/       0 : =0CH                 DKY		equ 12
(1)  109/       0 : =10H                 SLV		equ 16
(1)  110/       0 : =14H                 RRT		equ 20
(1)  111/       0 : =18H                 MODE		equ 24
(1)  112/       0 : =1CH                 DTL		equ 28
(1)  113/       0 : =20H                 DTH		equ 32
(1)  114/       0 : =24H                 ALV		equ 36
(1)  115/       0 : =28H                 FLG		equ 40
(1)  116/       0 : =2CH                 TMR		equ 44
(1)  117/       0 : =30H                 PVOL		equ 48
(1)  118/       0 : =34H                 PARP		equ 52
(1)  119/       0 : =38H                 PTMR		equ 56
(1)  120/       0 :                     
(1)  121/       0 :                     ; ====================================================================
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     ; Code starts here
(1)  124/       0 :                     ; --------------------------------------------------------
(1)  125/       0 :                     
(1)  126/       0 : F3                  		di			; Disable interrupts
(1)  127/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  128/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  129/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  130/       8 :                     
(1)  131/       8 :                     ; --------------------------------------------------------
(1)  132/       8 :                     ; RST 8 (dac_me)
(1)  133/       8 :                     ;
(1)  134/       8 :                     ; Writes wave data to DAC using data stored
(1)  135/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  136/       8 :                     ; instructions to keep the samplerate stable.
(1)  137/       8 :                     ;
(1)  138/       8 :                     ; Input (EXX):
(1)  139/       8 :                     ;  c - WAVE buffer MSB
(1)  140/       8 :                     ; de - Pitch (xx.00)
(1)  141/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  142/       8 :                     ;
(1)  143/       8 :                     ; Uses (EXX):
(1)  144/       8 :                     ; b
(1)  145/       8 :                     ;
(1)  146/       8 :                     ; Notes:
(1)  147/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  148/       8 :                     ; DAC playback
(1)  149/       8 :                     ;
(1)  150/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  151/       8 :                     ; --------------------------------------------------------
(1)  152/       8 :                     
(1)  153/       8 :                     ; EXX set:
(1)  154/       8 :                     ; af - temporal
(1)  155/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  156/       8 :                     ; de - pitch increment
(1)  157/       8 :                     ; hl - wave buffer position 00.00h
(1)  158/       8 :                     		org 8
(1)  159/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  160/       9 : 08                  		ex	af,af'		; Swap af
(1)  161/       A : 45                  		ld	b,l		; Save old hl buff
(1)  162/       B : 6C                  		ld	l,h		;
(1)  163/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  164/       D : 3E 2A               		ld	a,2Ah		;
(1)  165/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  166/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  167/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  168/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  169/      17 : 68                  		ld	l,b		;
(1)  170/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  171/      19 : 08                  		ex	af,af'		; Return af
(1)  172/      1A : D9                  		exx			; * return registers
(1)  173/      1B : C9                  		ret
(1)  174/      1C :                     
(1)  175/      1C :                     ; --------------------------------------------------------
(1)  176/      1C :                     ; 1Ch - Master tracklist pointer
(1)  177/      1C :                     gemaMstrListPos:
(1)  178/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  179/      1D : 00                  		db 0
(1)  180/      1E : 00                  		db 0
(1)  181/      1F : 00                  		db 0
(1)  182/      20 :                     
(1)  183/      20 :                     ; --------------------------------------------------------
(1)  184/      20 :                     ; RST 20h (dac_me)
(1)  185/      20 :                     ; *** self-modifiable code ***
(1)  186/      20 :                     ;
(1)  187/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  188/      20 :                     ; it playing.
(1)  189/      20 :                     ; --------------------------------------------------------
(1)  190/      20 :                     
(1)  191/      20 :                     		org 20h
(1)  192/      20 : F5                  dac_fill:	push	af		; Save af <-- Changes between PUSH AF(play) and RET(stop)
(1)  193/      21 : 3A F4 1C            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  194/      24 : D9                  		exx			; * swap regs
(1)  195/      25 : AC                  		xor	h		; Grab LSB.00
(1)  196/      26 : D9                  		exx			; * swap regs
(1)  197/      27 : E6 80               		and	80h		; Check if half-bit changed
(1)  198/      29 : C4 A5 14            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  199/      2C : F1                  		pop	af		; Restore af
(1)  200/      2D : C9                  		ret
(1)  201/      2E :                     
(1)  202/      2E :                     ; --------------------------------------------------------
(1)  203/      2E :                     ; 02Eh - User read/write values
(1)  204/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  205/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  206/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  207/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  208/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  209/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  210/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK PCM transfers.
(1)  211/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  212/      38 :                     
(1)  213/      38 :                     ; --------------------------------------------------------
(1)  214/      38 :                     ; Z80 Interrupt at 0038h
(1)  215/      38 :                     ; --------------------------------------------------------
(1)  216/      38 :                     
(1)  217/      38 :                     		org 38h				; Align 38h
(1)  218/      38 : ED 73 EC 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  219/      3C : F3                  		di				; Disable interrupt
(1)  220/      3D : C9                  		ret
(1)  221/      3E :                     
(1)  222/      3E :                     ; --------------------------------------------------------
(1)  223/      3E :                     ; 03Eh - More user settings
(1)  224/      3E : 00                  palMode		db 0				; 3Eh: PAL mode flag
(1)  225/      3F : 00                  commZRead	db 0				; cmd fifo READ pointer (here)
(1)  226/      40 :                     
(1)  227/      40 :                     ; --------------------------------------------------------
(1)  228/      40 :                     ; 68K Read/Write area at 40h
(1)  229/      40 :                     ; --------------------------------------------------------
(1)  230/      40 :                     
(1)  231/      40 :                     ; 		org 40h
(1)  232/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  233/      50 :                     
(1)  234/      50 :                     ; --------------------------------------------------------
(1)  235/      50 :                     ; Initialize
(1)  236/      50 :                     ; --------------------------------------------------------
(1)  237/      50 :                     
(1)  238/      50 :                     z80_init:
(1)  239/      50 : CD 80 11            		call	gema_init		; Init values
(1)  240/      53 : FB                  		ei
(1)  241/      54 :                     
(1)  242/      54 :                     ; --------------------------------------------------------
(1)  243/      54 :                     ; MAIN LOOP
(1)  244/      54 :                     ; --------------------------------------------------------
(1)  245/      54 :                     
(1)  246/      54 :                     drv_loop:
(1)  247/      54 : CF                  		rst	8
(1)  248/      55 : CD EC 11            		call	get_tick		; Check tick on VBlank
(1)  249/      58 : E7                  		rst	20h			; Refill wave here
(1)  250/      59 : CF                  		rst	8
(1)  251/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  252/      5C : 3A EE 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  253/      5F : D6 01               		sub	1
(1)  254/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  255/      63 : 32 EE 1C            		ld	(tickCnt),a
(1)  256/      66 : CD C7 12            		call	chip_env		; Process PSG and YM
(1)  257/      69 : CD EC 11            		call	get_tick		; Check for another tick
(1)  258/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  259/      6E :                     .noticks:
(1)  260/      6E : 3A F1 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  261/      71 : D6 01               		sub	1
(1)  262/      73 : 38 06               		jr	c,.nobeats
(1)  263/      75 : CF                  		rst	8
(1)  264/      76 : 32 F1 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  265/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  266/      7B :                     .nobeats:
(1)  267/      7B : CF                  		rst	8
(1)  268/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  269/      7D : B7                  		or	a
(1)  270/      7E : 28 14               		jr	z,.neither
(1)  271/      80 : 32 EF 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  272/      83 : CF                  		rst	8
(1)  273/      84 : CD EC 11            		call	get_tick
(1)  274/      87 : CD 08 06            		call	set_chips		; Send changes to sound chips
(1)  275/      8A : CD EC 11            		call	get_tick
(1)  276/      8D : CF                  		rst	8
(1)  277/      8E : CD 36 02            		call	upd_track		; Update track data
(1)  278/      91 : CD EC 11            		call	get_tick
(1)  279/      94 :                     .neither:
(1)  280/      94 : CF                  		rst	8
(1)  282/      95 : CD 47 10            		call	zmars_send		; External communication with CD and 32X
(1)  284/      98 : CD EC 11            		call	get_tick
(1)  285/      9B :                     .next_cmd:
(1)  286/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  287/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  288/      9F : 3A 3F 00            		ld	a,(commZRead)
(1)  289/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  290/      A3 : 28 AF               		jr	z,drv_loop
(1)  291/      A5 : CF                  		rst	8
(1)  292/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  293/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  294/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  295/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  296/      B0 : 87                  		add	a,a			; ID * 2
(1)  297/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  298/      B4 : 16 00               		ld	d,0
(1)  299/      B6 : 5F                  		ld	e,a
(1)  300/      B7 : 19                  		add	hl,de
(1)  301/      B8 : 7E                  		ld	a,(hl)
(1)  302/      B9 : 23                  		inc	hl
(1)  303/      BA : 66                  		ld	h,(hl)
(1)  304/      BB : CF                  		rst	8
(1)  305/      BC : 6F                  		ld	l,a
(1)  306/      BD : E9                  		jp	(hl)
(1)  307/      BE :                     
(1)  308/      BE :                     ; --------------------------------------------------------
(1)  309/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  310/      BE :                     ; --------------------------------------------------------
(1)  311/      BE :                     
(1)  312/      BE :                     .grab_arg:
(1)  313/      BE : D5                  		push	de
(1)  314/      BF : E5                  		push	hl
(1)  315/      C0 :                     .getcbytel:
(1)  316/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  317/      C3 : 57                  		ld	d,a
(1)  318/      C4 : CF                  		rst	8
(1)  319/      C5 : 3A 3F 00            		ld	a,(commZRead)
(1)  320/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  321/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  322/      CB : 16 00               		ld	d,0
(1)  323/      CD : 5F                  		ld	e,a
(1)  324/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  325/      D1 : 19                  		add	hl,de
(1)  326/      D2 : CF                  		rst	8
(1)  327/      D3 : 3C                  		inc	a
(1)  328/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  329/      D6 : 32 3F 00            		ld	(commZRead),a
(1)  330/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  331/      DA : E1                  		pop	hl
(1)  332/      DB : D1                  		pop	de
(1)  333/      DC : C9                  		ret
(1)  334/      DD :                     
(1)  335/      DD :                     ; --------------------------------------------------------
(1)  336/      DD :                     
(1)  337/      DD :                     .list:
(1)  338/      DD : ED 00               		dw .cmnd_0		; 00h - TESTING
(1)  339/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  340/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  341/      E3 : 43 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  342/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  343/      E7 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  344/      E9 : BA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  345/      EB : F3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  346/      ED :                     
(1)  347/      ED :                     ; --------------------------------------------------------
(1)  348/      ED :                     ; Command 00h
(1)  349/      ED :                     ;
(1)  350/      ED :                     ; Reserved for TESTING purposes.
(1)  351/      ED :                     ; --------------------------------------------------------
(1)  352/      ED :                     
(1)  353/      ED :                     .cmnd_0:
(1)  354/      ED : C3 9B 00            		jp	.next_cmd
(1)  355/      F0 :                     
(1)  356/      F0 :                     ; --------------------------------------------------------
(1)  357/      F0 :                     ; Command 01h:
(1)  358/      F0 :                     ;
(1)  359/      F0 :                     ; Set the Track MASTER-list.
(1)  360/      F0 :                     ; --------------------------------------------------------
(1)  361/      F0 :                     
(1)  362/      F0 :                     .cmnd_1:
(1)  363/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  364/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  365/      F6 : 77                  		ld	(hl),a
(1)  366/      F7 : 2B                  		dec	hl
(1)  367/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  368/      FB : 77                  		ld	(hl),a
(1)  369/      FC : 2B                  		dec	hl
(1)  370/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  371/     100 : 77                  		ld	(hl),a
(1)  372/     101 : 2B                  		dec	hl
(1)  373/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  374/     105 : 77                  		ld	(hl),a
(1)  375/     106 : C3 9B 00            		jp	.next_cmd
(1)  376/     109 :                     
(1)  377/     109 :                     ; --------------------------------------------------------
(1)  378/     109 :                     ; Command 02h:
(1)  379/     109 :                     ;
(1)  380/     109 :                     ; Make new track by sequence number
(1)  381/     109 :                     ;
(1)  382/     109 :                     ; Arguments:
(1)  383/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  384/     109 :                     ; --------------------------------------------------------
(1)  385/     109 :                     
(1)  386/     109 :                     .cmnd_2:
(1)  387/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  388/     10C : 4F                  		ld	c,a			; copy as c
(1)  389/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  390/     110 : 47                  		ld	b,a			; copy as b
(1)  391/     111 : CF                  		rst	8
(1)  392/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  393/     115 : FD 21 00 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  394/     119 : B7                  		or	a
(1)  395/     11A : FA 29 01            		jp	m,.srch_mode
(1)  396/     11D :                     ; 		cp	-1			; if d2 == -1, search
(1)  397/     11D :                     ; 		jr	z,.srch_mode
(1)  398/     11D : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  399/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  400/     122 : CF                  		rst	8
(1)  401/     123 : CD 11 02            		call	.cmnd_rdslot
(1)  402/     126 : C3 38 01            		jp	.wrtto_slot
(1)  403/     129 :                     ; -1
(1)  404/     129 :                     .srch_mode:
(1)  405/     129 : CD 23 02            		call	.srch_slot
(1)  406/     12C : FE FF               		cp	-1
(1)  407/     12E : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  408/     131 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  409/     133 : CA 38 01            		jp	z,.wrtto_slot
(1)  410/     136 : 18 F1               		jr	.srch_mode
(1)  411/     138 :                     .wrtto_slot:
(1)  412/     138 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  413/     13A : 23                  		inc	hl
(1)  414/     13B : CF                  		rst	8
(1)  415/     13C : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  416/     13D : 23                  		inc	hl
(1)  417/     13E : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  418/     13F : 79                  		ld	a,c
(1)  419/     140 : C3 9B 00            		jp	.next_cmd
(1)  420/     143 :                     
(1)  421/     143 :                     ; --------------------------------------------------------
(1)  422/     143 :                     ; Command 03h:
(1)  423/     143 :                     ;
(1)  424/     143 :                     ; Stop track with the same sequence number
(1)  425/     143 :                     ;
(1)  426/     143 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  427/     143 :                     ; --------------------------------------------------------
(1)  428/     143 :                     
(1)  429/     143 :                     .cmnd_3:
(1)  430/     143 : CD BE 00            		call	.grab_arg			; d1: Sequence ID
(1)  431/     146 : 4F                  		ld	c,a				; copy to c
(1)  432/     147 : CD BE 00            		call	.grab_arg			; d0: Slot index
(1)  433/     14A : FD 21 00 1A         		ld	iy,nikona_BuffList		; iy - Slot buffer list
(1)  434/     14E : B7                  		or	a
(1)  435/     14F : FA 61 01            		jp	m,.srch_del
(1)  436/     152 :                     ; 		cp	-1				; if -1, search for all with same ID
(1)  437/     152 :                     ; 		jr	z,.srch_del
(1)  438/     152 : FE 03               		cp	MAX_SLOTS			; If maxed out slots
(1)  439/     154 : D2 9B 00            		jp	nc,.next_cmd
(1)  440/     157 : CF                  		rst	8
(1)  441/     158 : CD 11 02            		call	.cmnd_rdslot
(1)  442/     15B : CD 6E 01            		call	.wrtto_del
(1)  443/     15E : C3 9B 00            		jp	.next_cmd
(1)  444/     161 :                     ; -1
(1)  445/     161 :                     .srch_del:
(1)  446/     161 : CD 23 02            		call	.srch_slot
(1)  447/     164 : FE FF               		cp	-1
(1)  448/     166 : CA 9B 00            		jp	z,.next_cmd
(1)  449/     169 : CD 6E 01            		call	.wrtto_del
(1)  450/     16C : 18 F3               		jr	.srch_del
(1)  451/     16E :                     .wrtto_del:
(1)  452/     16E : CB 7E               		bit	7,(hl)
(1)  453/     170 : C8                  		ret	z
(1)  454/     171 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  455/     173 : 20 05               		jr	nz,.del_all
(1)  456/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  457/     178 : B9                  		cp	c
(1)  458/     179 : C0                  		ret	nz
(1)  459/     17A :                     .del_all:
(1)  460/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  461/     17C : 23                  		inc	hl
(1)  462/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  463/     17F : CF                  		rst	8
(1)  464/     180 : C9                  		ret
(1)  465/     181 :                     
(1)  466/     181 :                     ; --------------------------------------------------------
(1)  467/     181 :                     ; Command 05h:
(1)  468/     181 :                     ;
(1)  469/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  470/     181 :                     ;
(1)  471/     181 :                     ; Arguments:
(1)  472/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  473/     181 :                     ; --------------------------------------------------------
(1)  474/     181 :                     
(1)  475/     181 :                     .cmnd_5:
(1)  476/     181 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  477/     184 : 4F                  		ld	c,a			; copy to c
(1)  478/     185 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  479/     188 : FD 21 00 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  480/     18C : B7                  		or	a
(1)  481/     18D : FA 9F 01            		jp	m,.srch_fvol
(1)  482/     190 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  483/     190 :                     ; 		jr	z,.srch_fvol
(1)  484/     190 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  485/     192 : D2 9B 00            		jp	nc,.next_cmd
(1)  486/     195 : CF                  		rst	8
(1)  487/     196 : CD 11 02            		call	.cmnd_rdslot
(1)  488/     199 : CD AC 01            		call	.wrtto_fvol
(1)  489/     19C : C3 9B 00            		jp	.next_cmd
(1)  490/     19F :                     ; -1
(1)  491/     19F :                     .srch_fvol:
(1)  492/     19F : CD 23 02            		call	.srch_slot
(1)  493/     1A2 : FE FF               		cp	-1
(1)  494/     1A4 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  495/     1A7 : CD AC 01            		call	.wrtto_fvol
(1)  496/     1AA : 18 F3               		jr	.srch_fvol
(1)  497/     1AC :                     .wrtto_fvol:
(1)  498/     1AC : CB 7E               		bit	7,(hl)			; Active?
(1)  499/     1AE : C8                  		ret	z
(1)  500/     1AF : CB DE               		set	3,(hl)			; Volume update flag
(1)  501/     1B1 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  502/     1B4 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  503/     1B8 : CF                  		rst	8
(1)  504/     1B9 : C9                  		ret
(1)  505/     1BA :                     
(1)  506/     1BA :                     ; --------------------------------------------------------
(1)  507/     1BA :                     ; Command 06h:
(1)  508/     1BA :                     ;
(1)  509/     1BA :                     ; Set track's master volume
(1)  510/     1BA :                     ;
(1)  511/     1BA :                     ; Arguments:
(1)  512/     1BA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  513/     1BA :                     ; --------------------------------------------------------
(1)  514/     1BA :                     
(1)  515/     1BA :                     .cmnd_6:
(1)  516/     1BA : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  517/     1BD : 4F                  		ld	c,a			; copy to c
(1)  518/     1BE : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  519/     1C1 : FD 21 00 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  520/     1C5 : B7                  		or	a
(1)  521/     1C6 : FA D8 01            		jp	m,.srch_vol
(1)  522/     1C9 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  523/     1C9 :                     ; 		jr	z,.srch_vol
(1)  524/     1C9 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  525/     1CB : D2 9B 00            		jp	nc,.next_cmd
(1)  526/     1CE : CF                  		rst	8
(1)  527/     1CF : CD 11 02            		call	.cmnd_rdslot
(1)  528/     1D2 : CD E5 01            		call	.wrtto_vol
(1)  529/     1D5 : C3 9B 00            		jp	.next_cmd
(1)  530/     1D8 :                     ; -1
(1)  531/     1D8 :                     .srch_vol:
(1)  532/     1D8 : CD 23 02            		call	.srch_slot
(1)  533/     1DB : FE FF               		cp	-1
(1)  534/     1DD : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  535/     1E0 : CD E5 01            		call	.wrtto_vol
(1)  536/     1E3 : 18 F3               		jr	.srch_vol
(1)  537/     1E5 :                     .wrtto_vol:
(1)  538/     1E5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  539/     1E7 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  540/     1EA : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  541/     1ED : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  542/     1F1 : CF                  		rst	8
(1)  543/     1F2 : C9                  		ret
(1)  544/     1F3 :                     
(1)  545/     1F3 :                     ; --------------------------------------------------------
(1)  546/     1F3 :                     ; Command 07h:
(1)  547/     1F3 :                     ;
(1)  548/     1F3 :                     ; Set global sub-beats
(1)  549/     1F3 :                     ; --------------------------------------------------------
(1)  550/     1F3 :                     
(1)  551/     1F3 :                     .cmnd_7:
(1)  552/     1F3 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  553/     1F6 : 4F                  		ld	c,a
(1)  554/     1F7 : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  555/     1FA : 67                  		ld	h,a
(1)  556/     1FB : 69                  		ld	l,c
(1)  557/     1FC : 3A 3E 00            		ld	a,(palMode)
(1)  558/     1FF : B7                  		or	a
(1)  559/     200 : 28 04               		jr	z,.not_pal
(1)  560/     202 : 11 28 00            		ld	de,40
(1)  561/     205 : 19                  		add	hl,de
(1)  562/     206 :                     .not_pal:
(1)  563/     206 : 7C                  		ld	a,h
(1)  564/     207 : 32 F3 1C            		ld	(sbeatPtck+1),a
(1)  565/     20A : 7D                  		ld	a,l
(1)  566/     20B : 32 F2 1C            		ld	(sbeatPtck),a
(1)  567/     20E : C3 9B 00            		jp	.next_cmd
(1)  568/     211 :                     
(1)  569/     211 :                     ; --------------------------------------------------------
(1)  570/     211 :                     ; Shared subs
(1)  571/     211 :                     ; --------------------------------------------------------
(1)  572/     211 :                     
(1)  573/     211 :                     .cmnd_rdslot:
(1)  574/     211 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  575/     212 : 87                  		add	a,a			; id*8
(1)  576/     213 : 87                  		add	a,a
(1)  577/     214 : 16 00               		ld	d,0
(1)  578/     216 : 5F                  		ld	e,a
(1)  579/     217 : FD 19               		add	iy,de
(1)  580/     219 : FD 6E 00            		ld	l,(iy)
(1)  581/     21C : FD 66 01            		ld	h,(iy+1)
(1)  582/     21F : E5                  		push	hl
(1)  583/     220 : DD E1               		pop	ix
(1)  584/     222 : C9                  		ret
(1)  585/     223 :                     
(1)  586/     223 :                     ; ------------------------------------------------
(1)  587/     223 :                     ; iy - nikona_BuffList
(1)  588/     223 :                     
(1)  589/     223 :                     .srch_slot:
(1)  590/     223 : FD 7E 00            		ld	a,(iy)
(1)  591/     226 : FE FF               		cp	-1			; End of list?
(1)  592/     228 : C8                  		ret	z
(1)  593/     229 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  594/     22C : 6F                  		ld	l,a
(1)  595/     22D : E5                  		push	hl
(1)  596/     22E : DD E1               		pop	ix
(1)  597/     230 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  598/     233 : FD 19               		add	iy,de			; Next entry for later
(1)  599/     235 : C9                  		ret
(1)  600/     236 :                     
(1)  601/     236 :                     ; ====================================================================
(1)  602/     236 :                     ; ----------------------------------------------------------------
(1)  603/     236 :                     ; MAIN Playback section
(1)  604/     236 :                     ; ----------------------------------------------------------------
(1)  605/     236 :                     
(1)  606/     236 :                     ; --------------------------------------------------------
(1)  607/     236 :                     ; Read mini-impulse-tracker data
(1)  608/     236 :                     ; --------------------------------------------------------
(1)  609/     236 :                     
(1)  610/     236 :                     upd_track:
(1)  611/     236 : E7                  		rst	20h			; Refill wave
(1)  612/     237 : CD EC 11            		call	get_tick		; Check for tick flag
(1)  613/     23A :                     	; ** MANUAL BUFF READ **
(1)  614/     23A : FD 21 35 19         		ld	iy,trkBuff_0
(1)  615/     23E : CD 4C 02            		call	.read_track
(1)  616/     241 : FD 21 74 19         		ld	iy,trkBuff_1
(1)  617/     245 : CD 4C 02            		call	.read_track
(1)  618/     248 : FD 21 B3 19         		ld	iy,trkBuff_2
(1)  619/     24C :                     
(1)  620/     24C :                     ; ----------------------------------------
(1)  621/     24C :                     ; Read track
(1)  622/     24C :                     ;
(1)  623/     24C :                     ; iy - Track buffer
(1)  624/     24C :                     ; ----------------------------------------
(1)  625/     24C :                     
(1)  626/     24C :                     .read_track:
(1)  627/     24C : CF                  		rst	8
(1)  628/     24D : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  629/     250 : CB 78               		bit	7,b			; bit7: Track active?
(1)  630/     252 : C8                  		ret	z			; Return if not.
(1)  631/     253 : 78                  		ld	a,b
(1)  632/     254 : FE FF               		cp	-1			; Flag is -1?
(1)  633/     256 : C8                  		ret	z			; Return if mid-flag
(1)  634/     257 : CF                  		rst	8
(1)  635/     258 :                     	; ----------------------------------------
(1)  636/     258 :                     	; Track volume changes
(1)  637/     258 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  638/     25B : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  639/     25E : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  640/     261 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  641/     264 : 79                  		ld	a,c
(1)  642/     265 : BC                  		cp	h
(1)  643/     266 : 28 1E               		jr	z,.keep_vol
(1)  644/     268 : 30 06               		jr	nc,.fade_out
(1)  645/     26A : 11 80 FF            		ld	de,-80h
(1)  646/     26D : 19                  		add	hl,de
(1)  647/     26E : 18 0C               		jr	.too_much
(1)  648/     270 :                     .fade_out:
(1)  649/     270 : 19                  		add	hl,de
(1)  650/     271 : CF                  		rst	8
(1)  651/     272 : 7C                  		ld	a,h
(1)  652/     273 : B9                  		cp	c
(1)  653/     274 : 38 06               		jr	c,.too_much
(1)  654/     276 : 61                  		ld	h,c
(1)  655/     277 : 2E 00               		ld	l,0
(1)  656/     279 : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  657/     27C :                     .too_much:
(1)  658/     27C : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  659/     280 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  660/     283 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  661/     286 :                     .keep_vol:
(1)  662/     286 :                     	; ----------------------------------------
(1)  663/     286 : 3A EF 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  664/     289 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  665/     28B : 28 03               		jr	z,.sfxmd
(1)  666/     28D : CB 4F               		bit	1,a			; BEAT passed?
(1)  667/     28F : C8                  		ret	z			; No BEAT.
(1)  668/     290 :                     .sfxmd:
(1)  669/     290 : CB 47               		bit	0,a			; TICK passed?
(1)  670/     292 : C8                  		ret	z			; No TICK.
(1)  671/     293 : CF                  		rst	8
(1)  672/     294 :                     	; ----------------------------------------
(1)  673/     294 :                     	; Start reading notes
(1)  674/     294 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  675/     296 : C4 1E 05            		call	nz,.first_fill
(1)  676/     299 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  677/     29B : C4 17 05            		call	nz,.effect_fill
(1)  678/     29E : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  679/     2A1 : 3D                  		dec	a
(1)  680/     2A2 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  681/     2A5 : B7                  		or	a			; Check a
(1)  682/     2A6 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  683/     2A7 : CF                  		rst	8
(1)  684/     2A8 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  685/     2AB : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  686/     2AE :                     	; ----------------------------------------
(1)  687/     2AE : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  688/     2B1 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  689/     2B4 : 79                  		ld	a,c			; Check rowcount
(1)  690/     2B5 : B0                  		or	b
(1)  691/     2B6 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  692/     2B8 :                     	; ----------------------------------------
(1)  693/     2B8 :                     	; Read next block
(1)  694/     2B8 : CF                  		rst	8
(1)  695/     2B9 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  696/     2BC : 3C                  		inc	a
(1)  697/     2BD : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  698/     2C0 : CD 2F 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  699/     2C3 : FE FF               		cp	-1			; Track finished?
(1)  700/     2C5 : C8                  		ret	z
(1)  701/     2C6 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  702/     2C9 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  703/     2CC :                     	; ----------------------------------------
(1)  704/     2CC :                     	; bc - Row count
(1)  705/     2CC :                     .row_active:
(1)  706/     2CC : CF                  		rst	8
(1)  707/     2CD : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  708/     2D0 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  709/     2D3 :                     
(1)  710/     2D3 :                     ; --------------------------------
(1)  711/     2D3 :                     ; Main read-loop
(1)  712/     2D3 :                     ; --------------------------------
(1)  713/     2D3 :                     
(1)  714/     2D3 :                     .next_note:
(1)  715/     2D3 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check row timer
(1)  716/     2D6 : B7                  		or	a
(1)  717/     2D7 : 20 16               		jr	nz,.decrow
(1)  718/     2D9 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  719/     2DA : B7                  		or	a
(1)  720/     2DB : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  721/     2DD : FA FA 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  722/     2E0 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  723/     2E3 :                     
(1)  724/     2E3 :                     ; --------------------------------
(1)  725/     2E3 :                     ; Exit
(1)  726/     2E3 :                     ; --------------------------------
(1)  727/     2E3 :                     
(1)  728/     2E3 :                     .exit:
(1)  729/     2E3 : CF                  		rst	8
(1)  730/     2E4 : CD F7 03            		call	.inc_cpatt		; * Increment patt pos
(1)  731/     2E7 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  732/     2EA : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  733/     2ED : 18 03               		jr	.decrow_e
(1)  734/     2EF :                     .decrow:
(1)  735/     2EF : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  736/     2F2 :                     .decrow_e:
(1)  737/     2F2 : 0B                  		dec	bc			; Decrement rowcount
(1)  738/     2F3 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  739/     2F6 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  740/     2F9 : C9                  		ret	; Exit.
(1)  741/     2FA :                     
(1)  742/     2FA :                     ; --------------------------------
(1)  743/     2FA :                     ; New note request
(1)  744/     2FA :                     ;
(1)  745/     2FA :                     ; a - %1tcccccc
(1)  746/     2FA :                     ;   | t - next byte has new type
(1)  747/     2FA :                     ;   | c - channel
(1)  748/     2FA :                     ; --------------------------------
(1)  749/     2FA :                     
(1)  750/     2FA :                     .has_note:
(1)  751/     2FA : CF                  		rst	8
(1)  752/     2FB : C5                  		push	bc			; Save rowcount
(1)  753/     2FC : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  754/     2FD : CD F7 03            		call	.inc_cpatt		; * Increment patt pos
(1)  755/     300 : E5                  		push	hl			; Save hl patt pos
(1)  756/     301 : FD E5               		push	iy
(1)  757/     303 : E1                  		pop	hl
(1)  758/     304 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  759/     308 : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  760/     30B : CF                  		rst	8
(1)  761/     30C : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  762/     30D : 79                  		ld	a,c			; Get patt note position
(1)  763/     30E : E6 1F               		and	00011111b		; Filter index bits
(1)  764/     310 : 5F                  		ld	e,a			; Save as e
(1)  765/     311 : 19                  		add	hl,de			; Increment more by this pos
(1)  766/     312 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  767/     313 : B7                  		or	a
(1)  768/     314 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  769/     316 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  770/     318 : 87                  		add	a,a
(1)  771/     319 : 87                  		add	a,a
(1)  772/     31A : 87                  		add	a,a
(1)  773/     31B : 5F                  		ld	e,a
(1)  774/     31C : DD 19               		add	ix,de
(1)  775/     31E : 18 2B               		jr	.cont_chnl
(1)  776/     320 :                     
(1)  777/     320 :                     ; Make NEW channel
(1)  778/     320 :                     ; ix - channel list start
(1)  779/     320 :                     .srch_new:
(1)  780/     320 : CF                  		rst	8
(1)  781/     321 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  782/     323 : 16 00               		ld	d,0		; Reset out index
(1)  783/     325 :                     .next_chnl:
(1)  784/     325 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  785/     328 : B7                  		or	a		; If plus, track channel is free
(1)  786/     329 : F2 40 03            		jp	p,.chnl_free
(1)  787/     32C : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  788/     32E : DD 23               		inc	ix
(1)  789/     330 : DD 23               		inc	ix
(1)  790/     332 : DD 23               		inc	ix
(1)  791/     334 : CF                  		rst	8
(1)  792/     335 : DD 23               		inc	ix
(1)  793/     337 : DD 23               		inc	ix
(1)  794/     339 : DD 23               		inc	ix
(1)  795/     33B : DD 23               		inc	ix
(1)  796/     33D : 14                  		inc	d		; Increment out index
(1)  797/     33E : 10 E5               		djnz	.next_chnl
(1)  798/     340 :                     .chnl_free:
(1)  799/     340 : CF                  		rst	8
(1)  800/     341 : 7A                  		ld	a,d			; Read index we got
(1)  801/     342 : E6 1F               		and	00011111b		; Filter bits
(1)  802/     344 : F6 80               		or	10000000b		; + set as used
(1)  803/     346 : 77                  		ld	(hl),a			; Write index slot
(1)  804/     347 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  805/     34B :                     .cont_chnl:
(1)  806/     34B :                     
(1)  807/     34B : E1                  		pop	hl			; Recover patt pos
(1)  808/     34C :                     	; ix - current channel
(1)  809/     34C : CF                  		rst	8
(1)  810/     34D : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  811/     350 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  812/     352 : 28 08               		jr	z,.old_type
(1)  813/     354 : 7E                  		ld	a,(hl)
(1)  814/     355 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  815/     358 : 47                  		ld	b,a			; Set to b
(1)  816/     359 : CD F7 03            		call	.inc_cpatt		; Next patt pos
(1)  817/     35C :                     .old_type:
(1)  818/     35C :                     	; b - evinEVIN
(1)  819/     35C :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  820/     35C :                     	;     evin: byte is already stored on track-channel buffer
(1)  821/     35C :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  822/     35C :                     
(1)  823/     35C : CF                  		rst	8
(1)  824/     35D : CB 40               		bit	0,b			; New NOTE?
(1)  825/     35F : 28 07               		jr	z,.no_note
(1)  826/     361 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  827/     362 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  828/     365 : CD F7 03            		call	.inc_cpatt
(1)  829/     368 :                     .no_note:
(1)  830/     368 : CB 48               		bit	1,b			; New INS?
(1)  831/     36A : 28 07               		jr	z,.no_ins
(1)  832/     36C : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  833/     36D : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  834/     370 : CD F7 03            		call	.inc_cpatt
(1)  835/     373 :                     .no_ins:
(1)  836/     373 : CB 50               		bit	2,b			; New VOL?
(1)  837/     375 : 28 07               		jr	z,.no_vol
(1)  838/     377 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  839/     378 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  840/     37B : CD F7 03            		call	.inc_cpatt
(1)  841/     37E :                     .no_vol:
(1)  842/     37E : CB 58               		bit	3,b			; New EFFECT?
(1)  843/     380 : 28 0F               		jr	z,.no_eff
(1)  844/     382 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  845/     383 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  846/     386 : CD F7 03            		call	.inc_cpatt
(1)  847/     389 : CF                  		rst	8
(1)  848/     38A : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  849/     38B : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  850/     38E : CD F7 03            		call	.inc_cpatt
(1)  851/     391 :                     .no_eff:
(1)  852/     391 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  853/     392 : 0F                  		rrca
(1)  854/     393 : 0F                  		rrca
(1)  855/     394 : 0F                  		rrca
(1)  856/     395 : 0F                  		rrca
(1)  857/     396 : E6 0F               		and	00001111b		; Filter bits
(1)  858/     398 : 4F                  		ld	c,a			; Save as c
(1)  859/     399 : 78                  		ld	a,b
(1)  860/     39A : E6 0F               		and	00001111b		; Filter again
(1)  861/     39C : B1                  		or	c			; Merge c with a
(1)  862/     39D : CF                  		rst	8
(1)  863/     39E : 4F                  		ld	c,a			; Save bit flags
(1)  864/     39F : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  865/     3A2 : B1                  		or	c
(1)  866/     3A3 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  867/     3A6 : C1                  		pop	bc			; Restore rowcount
(1)  868/     3A7 :                     	; ----------------------------------------
(1)  869/     3A7 :                     	; Effects that affect internal playback
(1)  870/     3A7 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  871/     3AA : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  872/     3AC : CA D3 02            		jp	z,.next_note
(1)  873/     3AF : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  874/     3B2 : B7                  		or	a			; 00h = invalid effect
(1)  875/     3B3 : CA D3 02            		jp	z,.next_note
(1)  876/     3B6 : FE 01               		cp	1			; Effect A: Tick set
(1)  877/     3B8 : 28 0B               		jr	z,.eff_A
(1)  878/     3BA : FE 02               		cp	2			; Effect B: Position Jump
(1)  879/     3BC : 28 18               		jr	z,.eff_B
(1)  880/     3BE : FE 03               		cp	3			; Effect C: Pattern break
(1)  881/     3C0 : 28 32               		jr	z,.eff_C
(1)  882/     3C2 : C3 D3 02            		jp	.next_note
(1)  883/     3C5 :                     
(1)  884/     3C5 :                     ; ----------------------------------------
(1)  885/     3C5 :                     ; Effect A: Set ticks
(1)  886/     3C5 :                     ; ----------------------------------------
(1)  887/     3C5 :                     
(1)  888/     3C5 :                     .eff_A:
(1)  889/     3C5 : CF                  		rst	8
(1)  890/     3C6 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  891/     3C9 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  892/     3CC : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  893/     3CF : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  894/     3D3 : C3 D3 02            		jp	.next_note
(1)  895/     3D6 :                     
(1)  896/     3D6 :                     ; ----------------------------------------
(1)  897/     3D6 :                     ; Effect B: jump to a new block
(1)  898/     3D6 :                     ; ----------------------------------------
(1)  899/     3D6 :                     
(1)  900/     3D6 :                     .eff_B:
(1)  901/     3D6 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  902/     3D9 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  903/     3DC : CF                  		rst	8
(1)  904/     3DD : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  905/     3E1 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  906/     3E5 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  907/     3E9 : 3E 80               		ld	a,80h
(1)  908/     3EB : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  909/     3EE : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  910/     3F1 : C3 D3 02            		jp	.next_note
(1)  911/     3F4 :                     
(1)  912/     3F4 :                     ; ----------------------------------------
(1)  913/     3F4 :                     ; Effect C: Pattern break/exit
(1)  914/     3F4 :                     ;
(1)  915/     3F4 :                     ; Only used on SFX, arguments ignored.
(1)  916/     3F4 :                     ; ----------------------------------------
(1)  917/     3F4 :                     
(1)  918/     3F4 :                     .eff_C:
(1)  919/     3F4 : C3 08 05            		jp	.track_end
(1)  920/     3F7 :                     
(1)  921/     3F7 :                     ; ----------------------------------------
(1)  922/     3F7 :                     ; Increment the current patt position
(1)  923/     3F7 :                     ; and recieve more data
(1)  924/     3F7 :                     ;
(1)  925/     3F7 :                     ; Breaks:
(1)  926/     3F7 :                     ; a,e
(1)  927/     3F7 :                     ; ----------------------------------------
(1)  928/     3F7 :                     
(1)  929/     3F7 :                     .inc_cpatt:
(1)  930/     3F7 : FD 5E 08            		ld	e,(iy+trk_Cach)		; Read curret cache LSB
(1)  931/     3FA : 7D                  		ld	a,l
(1)  932/     3FB : 3C                  		inc	a
(1)  933/     3FC : E6 1F               		and	MAX_RCACH-1
(1)  934/     3FE : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  935/     400 : 30 03               		jr	nc,.ran_out
(1)  936/     402 : B3                  		or	e
(1)  937/     403 : 6F                  		ld	l,a
(1)  938/     404 : C9                  		ret
(1)  939/     405 :                     .ran_out:
(1)  940/     405 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  941/     408 : E5                  		push	hl
(1)  942/     409 : C5                  		push	bc
(1)  943/     40A : 06 00               		ld	b,0
(1)  944/     40C : 4F                  		ld	c,a
(1)  945/     40D : CF                  		rst	8
(1)  946/     40E : 5D                  		ld	e,l
(1)  947/     40F : 54                  		ld	d,h
(1)  948/     410 : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  949/     413 : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  950/     416 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  951/     419 : 09                  		add	hl,bc
(1)  952/     41A : CE 00               		adc	a,0
(1)  953/     41C : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  954/     41F : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  955/     422 : CF                  		rst	8
(1)  956/     423 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  957/     426 : 01 20 00            		ld	bc,MAX_RCACH
(1)  958/     429 : CD 0D 12            		call	transferRom		; *** ROM ACCESS ***
(1)  959/     42C : C1                  		pop	bc
(1)  960/     42D : E1                  		pop	hl
(1)  961/     42E : C9                  		ret
(1)  962/     42F :                     
(1)  963/     42F :                     ; ----------------------------------------
(1)  964/     42F :                     ; Set track pattern by trk_currBlk
(1)  965/     42F :                     ; ----------------------------------------
(1)  966/     42F :                     
(1)  967/     42F :                     .set_track:
(1)  968/     42F :                     	; ----------------------------------------
(1)  969/     42F :                     	; Make block id list
(1)  970/     42F : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  971/     432 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  972/     435 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  973/     438 : 4F                  		ld	c,a
(1)  974/     439 : C5                  		push	bc
(1)  975/     43A : D5                  		push	de
(1)  976/     43B : CF                  		rst	8
(1)  977/     43C : 0F                  		rrca
(1)  978/     43D : 0F                  		rrca
(1)  979/     43E : 0F                  		rrca
(1)  980/     43F : E6 1F               		and	00011111b
(1)  981/     441 : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  982/     444 : CB 79               		bit	7,c			; First time?
(1)  983/     446 : 20 03               		jr	nz,.first_blk
(1)  984/     448 : B9                  		cp	c			; SAME instrument data?
(1)  985/     449 : 28 1E               		jr	z,.keep_blk
(1)  986/     44B :                     .first_blk:
(1)  987/     44B : CF                  		rst	8
(1)  988/     44C : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1)  989/     44F : 07                  		rlca
(1)  990/     450 : 07                  		rlca
(1)  991/     451 : 07                  		rlca
(1)  992/     452 : 06 00               		ld	b,0
(1)  993/     454 : 4F                  		ld	c,a
(1)  994/     455 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1)  995/     458 : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1)  996/     45B : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1)  997/     45E : E7                  		rst	20h
(1)  998/     45F : CF                  		rst	8
(1)  999/     460 : 09                  		add	hl,bc
(1) 1000/     461 : CE 00               		adc	a,0
(1) 1001/     463 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1002/     466 : CD 0D 12            		call	transferRom		; ** ROM ACCESS **
(1) 1003/     469 :                     .keep_blk:
(1) 1004/     469 : E1                  		pop	hl
(1) 1005/     46A : C1                  		pop	bc
(1) 1006/     46B : 79                  		ld	a,c
(1) 1007/     46C : E6 07               		and	00000111b
(1) 1008/     46E : CF                  		rst	8
(1) 1009/     46F : 16 00               		ld	d,0
(1) 1010/     471 : 5F                  		ld	e,a
(1) 1011/     472 : 19                  		add	hl,de
(1) 1012/     473 :                     	; ----------------------------------------
(1) 1013/     473 : 7E                  		ld	a,(hl)			; Read block byte
(1) 1014/     474 : FE FF               		cp	-1			; If block == -1, end track
(1) 1015/     476 : CA 08 05            		jp	z,.track_end
(1) 1016/     479 : CF                  		rst	8
(1) 1017/     47A :                     	; ----------------------------------------
(1) 1018/     47A : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1019/     47D : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1020/     480 : 4F                  		ld	c,a
(1) 1021/     481 : D5                  		push	de
(1) 1022/     482 : C5                  		push	bc
(1) 1023/     483 : CF                  		rst	8
(1) 1024/     484 : 0F                  		rrca
(1) 1025/     485 : 0F                  		rrca
(1) 1026/     486 : 0F                  		rrca
(1) 1027/     487 : E6 1F               		and	00011111b
(1) 1028/     489 : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1029/     48C : CB 79               		bit	7,c			; First time?
(1) 1030/     48E : 20 03               		jr	nz,.first_head
(1) 1031/     490 : B9                  		cp	c			; SAME instrument data?
(1) 1032/     491 : 28 26               		jr	z,.keep_it
(1) 1033/     493 :                     .first_head:
(1) 1034/     493 : CF                  		rst	8
(1) 1035/     494 : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1036/     497 : 47                  		ld	b,a
(1) 1037/     498 : 0F                  		rrca
(1) 1038/     499 : 0F                  		rrca
(1) 1039/     49A : 0F                  		rrca
(1) 1040/     49B : E6 E0               		and	11100000b
(1) 1041/     49D : 4F                  		ld	c,a
(1) 1042/     49E : 78                  		ld	a,b
(1) 1043/     49F : 0F                  		rrca
(1) 1044/     4A0 : 0F                  		rrca
(1) 1045/     4A1 : 0F                  		rrca
(1) 1046/     4A2 : E6 03               		and	00000011b
(1) 1047/     4A4 : 47                  		ld	b,a
(1) 1048/     4A5 :                     	; ----------------------------------------
(1) 1049/     4A5 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1050/     4A8 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1051/     4AB : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1052/     4AE : E7                  		rst	20h
(1) 1053/     4AF : CF                  		rst	8
(1) 1054/     4B0 : 09                  		add	hl,bc
(1) 1055/     4B1 : CE 00               		adc	a,0
(1) 1056/     4B3 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1057/     4B6 : CD 0D 12            		call	transferRom		; ** ROM ACCESS **
(1) 1058/     4B9 :                     .keep_it:
(1) 1059/     4B9 : C1                  		pop	bc
(1) 1060/     4BA : 79                  		ld	a,c
(1) 1061/     4BB : E6 07               		and	00000111b
(1) 1062/     4BD : 87                  		add	a,a
(1) 1063/     4BE : 87                  		add	a,a
(1) 1064/     4BF : 57                  		ld	d,a
(1) 1065/     4C0 : CF                  		rst	8
(1) 1066/     4C1 : E6 FC               		and	11111100b
(1) 1067/     4C3 : 5F                  		ld	e,a
(1) 1068/     4C4 : 7A                  		ld	a,d
(1) 1069/     4C5 : E6 03               		and	00000011b
(1) 1070/     4C7 : 57                  		ld	d,a
(1) 1071/     4C8 : E1                  		pop	hl
(1) 1072/     4C9 : 19                  		add	hl,de
(1) 1073/     4CA : 5E                  		ld	e,(hl)			; de - Pos
(1) 1074/     4CB : 23                  		inc	hl
(1) 1075/     4CC : CF                  		rst	8
(1) 1076/     4CD : 56                  		ld	d,(hl)
(1) 1077/     4CE : 23                  		inc	hl
(1) 1078/     4CF : 7E                  		ld	a,(hl)
(1) 1079/     4D0 : 23                  		inc	hl
(1) 1080/     4D1 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1081/     4D4 : 7E                  		ld	a,(hl)
(1) 1082/     4D5 : 23                  		inc	hl
(1) 1083/     4D6 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1084/     4D9 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1085/     4DC : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1086/     4DF : CF                  		rst	8
(1) 1087/     4E0 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1088/     4E3 : 19                  		add	hl,de
(1) 1089/     4E4 : CE 00               		adc	a,0
(1) 1090/     4E6 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1091/     4E9 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1092/     4EC : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1093/     4EF : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1094/     4F2 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1095/     4F5 :                     
(1) 1096/     4F5 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1097/     4F8 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1098/     4FB : 0E 20               		ld	c,MAX_RCACH
(1) 1099/     4FD : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1100/     501 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1101/     505 : C3 0D 12            		jp	transferRom		; ** ROM access **
(1) 1102/     508 :                     
(1) 1103/     508 :                     ; ----------------------------------------
(1) 1104/     508 :                     ; **JUMP ONLY**
(1) 1105/     508 :                     .track_end:
(1) 1106/     508 : CD C3 05            		call	track_out
(1) 1107/     50B : CF                  		rst	8
(1) 1108/     50C : AF                  		xor	a
(1) 1109/     50D : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1110/     510 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1111/     513 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1112/     516 : C9                  		ret
(1) 1113/     517 :                     
(1) 1114/     517 :                     ; ----------------------------------------
(1) 1115/     517 :                     ; Track refill
(1) 1116/     517 :                     ; ----------------------------------------
(1) 1117/     517 :                     
(1) 1118/     517 :                     .effect_fill:
(1) 1119/     517 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1120/     51B : C3 2F 04            		jp	.set_track
(1) 1121/     51E :                     
(1) 1122/     51E :                     ; ----------------------------------------
(1) 1123/     51E :                     ; Track Start/Reset
(1) 1124/     51E :                     ;
(1) 1125/     51E :                     ; iy - Track buffer
(1) 1126/     51E :                     ; ----------------------------------------
(1) 1127/     51E :                     
(1) 1128/     51E :                     .first_fill:
(1) 1129/     51E : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1130/     522 : CD C3 05            		call	track_out
(1) 1131/     525 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1132/     529 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1133/     52C : CF                  		rst	8
(1) 1134/     52D : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1135/     530 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1136/     533 : FE FF               		cp	-1			; Sequence -1?
(1) 1137/     535 : C8                  		ret	z
(1) 1138/     536 : 87                  		add	a,a
(1) 1139/     537 : 87                  		add	a,a
(1) 1140/     538 : 16 00               		ld	d,0
(1) 1141/     53A : 5F                  		ld	e,a
(1) 1142/     53B : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1143/     53E : 23                  		inc	hl
(1) 1144/     53F : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1145/     540 : 23                  		inc	hl
(1) 1146/     541 : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1147/     542 : 23                  		inc	hl
(1) 1148/     543 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1149/     544 : CF                  		rst	8
(1) 1150/     545 : 61                  		ld	h,c
(1) 1151/     546 : 19                  		add	hl,de
(1) 1152/     547 : CE 00               		adc	a,0
(1) 1153/     549 : 11 AD 18            		ld	de,trkInfoCach
(1) 1154/     54C : D5                  		push	de
(1) 1155/     54D : 01 04 00            		ld	bc,4
(1) 1156/     550 : CD 0D 12            		call	transferRom		; *** ROM ACCESS ***
(1) 1157/     553 : E1                  		pop	hl
(1) 1158/     554 : 7E                  		ld	a,(hl)
(1) 1159/     555 : 23                  		inc	hl
(1) 1160/     556 : CB 7F               		bit	7,a
(1) 1161/     558 : 28 04               		jr	z,.no_glbl
(1) 1162/     55A : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1163/     55E :                     .no_glbl:
(1) 1164/     55E : CF                  		rst	8
(1) 1165/     55F : E6 7F               		and	01111111b
(1) 1166/     561 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1167/     564 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1168/     565 : 23                  		inc	hl			; grab it's pointers
(1) 1169/     566 : 4E                  		ld	c,(hl)
(1) 1170/     567 : 23                  		inc	hl
(1) 1171/     568 : 6E                  		ld	l,(hl)
(1) 1172/     569 : 61                  		ld	h,c
(1) 1173/     56A : 11 09 1D            		ld	de,headerOut
(1) 1174/     56D : 0E 0E               		ld	c,0Eh
(1) 1175/     56F : CD 0D 12            		call	transferRom		; ** ROM access **
(1) 1176/     572 :                     
(1) 1177/     572 :                     
(1) 1178/     572 :                     	; headerOut:
(1) 1179/     572 :                     	; dc.w numof_chnls
(1) 1180/     572 :                     	; dc.l .blk,.pat,.ins
(1) 1181/     572 :                     	; *** READING BACKWARDS
(1) 1182/     572 : DD 21 16 1D         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1183/     576 : CF                  		rst	8
(1) 1184/     577 : CD B0 05            		call	.grab_rhead		; Instrument data
(1) 1185/     57A : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1186/     57D : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1187/     580 : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1188/     583 : E7                  		rst	20h
(1) 1189/     584 : CF                  		rst	8
(1) 1190/     585 : CD B0 05            		call	.grab_rhead		; Pattern heads
(1) 1191/     588 : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1192/     58B : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1193/     58E : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1194/     591 : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1195/     595 : CF                  		rst	8
(1) 1196/     596 : CD B0 05            		call	.grab_rhead		; Block data
(1) 1197/     599 : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1198/     59C : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1199/     59F : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1200/     5A2 : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1201/     5A6 : CF                  		rst	8
(1) 1202/     5A7 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1203/     5AA : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1204/     5AD : C3 2F 04            		jp	.set_track
(1) 1205/     5B0 :                     
(1) 1206/     5B0 :                     ; Read 68K pointer:
(1) 1207/     5B0 :                     ; hl - 00xxxx
(1) 1208/     5B0 :                     ;  b - xx0000
(1) 1209/     5B0 :                     .grab_rhead:
(1) 1210/     5B0 : DD 6E 00            		ld	l,(ix)
(1) 1211/     5B3 : DD 2B               		dec	ix
(1) 1212/     5B5 : DD 66 00            		ld	h,(ix)
(1) 1213/     5B8 : CF                  		rst	8
(1) 1214/     5B9 : DD 2B               		dec	ix
(1) 1215/     5BB : DD 46 00            		ld	b,(ix)
(1) 1216/     5BE : DD 2B               		dec	ix
(1) 1217/     5C0 :                     ; 		ld	c,(ix)
(1) 1218/     5C0 : DD 2B               		dec	ix
(1) 1219/     5C2 : C9                  		ret
(1) 1220/     5C3 :                     
(1) 1221/     5C3 :                     ; ----------------------------------------
(1) 1222/     5C3 :                     ; Reset tracker channels
(1) 1223/     5C3 :                     ;
(1) 1224/     5C3 :                     ; iy - Track buffer
(1) 1225/     5C3 :                     ;
(1) 1226/     5C3 :                     ; Breaks:
(1) 1227/     5C3 :                     ; b ,de,hl,ix
(1) 1228/     5C3 :                     ; ----------------------------------------
(1) 1229/     5C3 :                     
(1) 1230/     5C3 :                     track_out:
(1) 1231/     5C3 : FD E5               		push	iy
(1) 1232/     5C5 : E1                  		pop	hl
(1) 1233/     5C6 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1234/     5CA : CF                  		rst	8
(1) 1235/     5CB : 11 25 00            		ld	de,trk_ChnIndx
(1) 1236/     5CE : 19                  		add	hl,de
(1) 1237/     5CF : 06 1A               		ld	b,MAX_TRKINDX
(1) 1238/     5D1 :                     .indx_del:
(1) 1239/     5D1 : 7E                  		ld	a,(hl)
(1) 1240/     5D2 : B7                  		or	a
(1) 1241/     5D3 : 28 2A               		jr	z,.nothin
(1) 1242/     5D5 : CF                  		rst	8
(1) 1243/     5D6 : DD E5               		push	ix
(1) 1244/     5D8 : E6 1F               		and	00011111b
(1) 1245/     5DA : 87                  		add	a,a
(1) 1246/     5DB : 87                  		add	a,a
(1) 1247/     5DC : 87                  		add	a,a
(1) 1248/     5DD : 5F                  		ld	e,a
(1) 1249/     5DE : CF                  		rst	8
(1) 1250/     5DF : DD 19               		add	ix,de
(1) 1251/     5E1 : AF                  		xor	a
(1) 1252/     5E2 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1253/     5E6 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1254/     5EA : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1255/     5EE : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1256/     5F1 : CF                  		rst	8
(1) 1257/     5F2 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1258/     5F5 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1259/     5F8 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1260/     5FB : DD E1               		pop	ix
(1) 1261/     5FD : 77                  		ld	(hl),a
(1) 1262/     5FE : 00                  		nop
(1) 1263/     5FF :                     .nothin:
(1) 1264/     5FF : 23                  		inc	hl
(1) 1265/     600 : 10 CF               		djnz	.indx_del
(1) 1266/     602 : 3E 01               		ld	a,1
(1) 1267/     604 : 32 F8 19            		ld	(marsUpd),a
(1) 1268/     607 : C9                  		ret
(1) 1269/     608 :                     
(1) 1270/     608 :                     ; ============================================================
(1) 1271/     608 :                     ; --------------------------------------------------------
(1) 1272/     608 :                     ; Process track channels to the sound chips
(1) 1273/     608 :                     ; --------------------------------------------------------
(1) 1274/     608 :                     
(1) 1275/     608 :                     set_chips:
(1) 1276/     608 : E7                  		rst	20h
(1) 1277/     609 : CD EC 11            		call	get_tick
(1) 1278/     60C :                     	; ** MANUAL BUFF READ **
(1) 1279/     60C : FD 21 35 19         		ld	iy,trkBuff_0
(1) 1280/     610 : CD 50 06            		call	tblbuff_read
(1) 1281/     613 : FD 21 74 19         		ld	iy,trkBuff_1
(1) 1282/     617 : CD 50 06            		call	tblbuff_read
(1) 1283/     61A : FD 21 B3 19         		ld	iy,trkBuff_2
(1) 1284/     61E : CD 50 06            		call	tblbuff_read
(1) 1285/     621 : CD EC 11            		call	get_tick
(1) 1286/     624 :                     proc_chips:
(1) 1287/     624 : E7                  		rst	20h
(1) 1288/     625 : CF                  		rst	8
(1) 1289/     626 : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1290/     62A : CD 1D 08            		call	dtbl_singl
(1) 1291/     62D : CF                  		rst	8
(1) 1292/     62E : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1293/     632 : CD 07 08            		call	dtbl_multi
(1) 1294/     635 : CD EC 11            		call	get_tick
(1) 1295/     638 : CF                  		rst	8
(1) 1296/     639 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1297/     63D : CD 07 08            		call	dtbl_multi
(1) 1298/     640 : CF                  		rst	8
(1) 1299/     641 : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1300/     645 : CD 07 08            		call	dtbl_multi
(1) 1301/     648 : CF                  		rst	8
(1) 1302/     649 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1303/     64D : C3 07 08            		jp	dtbl_multi
(1) 1304/     650 :                     
(1) 1305/     650 :                     ; ----------------------------------------
(1) 1306/     650 :                     ; Read current track
(1) 1307/     650 :                     ;
(1) 1308/     650 :                     ; iy - Buffer
(1) 1309/     650 :                     tblbuff_read:
(1) 1310/     650 :                     ; 		ld	l,(iy)
(1) 1311/     650 :                     ; 		ld	h,(iy+1)
(1) 1312/     650 : CD EC 11            		call	get_tick
(1) 1313/     653 : CF                  		rst	8
(1) 1314/     654 :                     ; 		push	hl
(1) 1315/     654 :                     ; 		pop	iy
(1) 1316/     654 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1317/     657 : CB 78               		bit	7,b
(1) 1318/     659 : C8                  		ret	z
(1) 1319/     65A : 78                  		ld	a,b			; trk_Status == -1?
(1) 1320/     65B : FE FF               		cp	-1
(1) 1321/     65D : C2 67 06            		jp	nz,.track_cont
(1) 1322/     660 : CD C3 05            		call	track_out
(1) 1323/     663 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1324/     667 :                     .track_cont:
(1) 1325/     667 : E7                  		rst	20h			; Refill wave
(1) 1326/     668 : FD E5               		push	iy
(1) 1327/     66A : E1                  		pop	hl
(1) 1328/     66B : CF                  		rst	8
(1) 1329/     66C : DD 21 00 1E         		ld	ix,trkChnls
(1) 1330/     670 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1331/     673 : 19                  		add	hl,de
(1) 1332/     674 : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1333/     677 : B7                  		or	a
(1) 1334/     678 : 20 02               		jr	nz,.valid
(1) 1335/     67A : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1336/     67C :                     .valid:
(1) 1337/     67C : CF                  		rst	8
(1) 1338/     67D : 47                  		ld	b,a
(1) 1339/     67E :                     .next_indx:
(1) 1340/     67E : 7E                  		ld	a,(hl)			; Read index
(1) 1341/     67F : B7                  		or	a
(1) 1342/     680 : 20 09               		jr	nz,.has_indx		; If non-zero: valid
(1) 1343/     682 : C5                  		push	bc			; ** wave sync
(1) 1344/     683 : 06 04               		ld	b,4
(1) 1345/     685 : 10 FE               		djnz	$
(1) 1346/     687 : C1                  		pop	bc			; **
(1) 1347/     688 : CF                  		rst	8
(1) 1348/     689 : 18 1C               		jr	.no_indx
(1) 1349/     68B :                     .has_indx:
(1) 1350/     68B : E6 1F               		and	00011111b
(1) 1351/     68D : 87                  		add	a,a
(1) 1352/     68E : 87                  		add	a,a
(1) 1353/     68F : 87                  		add	a,a
(1) 1354/     690 : CF                  		rst	8
(1) 1355/     691 : 16 00               		ld	d,0
(1) 1356/     693 : 5F                  		ld	e,a
(1) 1357/     694 : C5                  		push	bc
(1) 1358/     695 : E5                  		push	hl
(1) 1359/     696 : DD E5               		push	ix
(1) 1360/     698 : DD 19               		add	ix,de
(1) 1361/     69A : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1362/     69D : E6 0F               		and	00001111b
(1) 1363/     69F : C4 AF 06            		call	nz,.do_chip		; Call if non-zero
(1) 1364/     6A2 : CF                  		rst	8
(1) 1365/     6A3 : DD E1               		pop	ix
(1) 1366/     6A5 : E1                  		pop	hl
(1) 1367/     6A6 : C1                  		pop	bc
(1) 1368/     6A7 :                     .no_indx:
(1) 1369/     6A7 : 23                  		inc	hl
(1) 1370/     6A8 : 10 D4               		djnz	.next_indx
(1) 1371/     6AA : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1372/     6AE : C9                  		ret
(1) 1373/     6AF :                     
(1) 1374/     6AF :                     ; ----------------------------------------
(1) 1375/     6AF :                     ; iy - Track buffer
(1) 1376/     6AF :                     ; ix - Current channel
(1) 1377/     6AF :                     
(1) 1378/     6AF :                     .do_chip:
(1) 1379/     6AF : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1380/     6B2 : B7                  		or	a
(1) 1381/     6B3 : C8                  		ret	z			; If 0 == stop
(1) 1382/     6B4 : CF                  		rst	8
(1) 1383/     6B5 : 3D                  		dec	a			; inst-1
(1) 1384/     6B6 : E6 7F               		and	01111111b
(1) 1385/     6B8 : 21 66 1F            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1386/     6BB : E5                  		push	hl
(1) 1387/     6BC : 07                  		rlca
(1) 1388/     6BD : 07                  		rlca
(1) 1389/     6BE : 07                  		rlca
(1) 1390/     6BF : 47                  		ld	b,a
(1) 1391/     6C0 : E6 F8               		and	11111000b
(1) 1392/     6C2 : 4F                  		ld	c,a
(1) 1393/     6C3 : 78                  		ld	a,b
(1) 1394/     6C4 : AF                  		xor	a
(1) 1395/     6C5 : E6 03               		and	00000011b
(1) 1396/     6C7 : CF                  		rst	8
(1) 1397/     6C8 : 47                  		ld	b,a
(1) 1398/     6C9 : EB                  		ex	hl,de
(1) 1399/     6CA : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1400/     6CD : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1401/     6D0 : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1402/     6D3 : 09                  		add	hl,bc
(1) 1403/     6D4 : CE 00               		adc	a,0
(1) 1404/     6D6 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1405/     6D9 : CD 0D 12            		call	transferRom		; ** ROM access **
(1) 1406/     6DC : E1                  		pop	hl
(1) 1407/     6DD : E5                  		push	hl			; <-- save hl
(1) 1408/     6DE : CD F8 06            		call	.grab_link
(1) 1409/     6E1 : D1                  		pop	de			; --> recover as de
(1) 1410/     6E2 :                     	; hl - current table
(1) 1411/     6E2 :                     	; de - instrument data
(1) 1412/     6E2 : FE FF               		cp	-1			; Found any link?
(1) 1413/     6E4 : C8                  		ret	z
(1) 1414/     6E5 : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1415/     6E6 : 23                  		inc	hl
(1) 1416/     6E7 : 23                  		inc	hl
(1) 1417/     6E8 : 23                  		inc	hl
(1) 1418/     6E9 : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1419/     6EC : 77                  		ld	(hl),a
(1) 1420/     6ED : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1421/     6F0 : 09                  		add	hl,bc
(1) 1422/     6F1 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1423/     6F2 : 01 08 00            		ld	bc,8
(1) 1424/     6F5 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1425/     6F7 : C9                  		ret
(1) 1426/     6F8 :                     
(1) 1427/     6F8 :                     ; ----------------------------------------
(1) 1428/     6F8 :                     ; Search for a linked channel on the
(1) 1429/     6F8 :                     ; chip table
(1) 1430/     6F8 :                     ;
(1) 1431/     6F8 :                     ; Input:
(1) 1432/     6F8 :                     ; iy - Track buffer
(1) 1433/     6F8 :                     ; ix - Current channel
(1) 1434/     6F8 :                     ; hl - Intrument data
(1) 1435/     6F8 :                     ;
(1) 1436/     6F8 :                     ; Returns:
(1) 1437/     6F8 :                     ; hl - Channel table to use
(1) 1438/     6F8 :                     ;  a - Return value:
(1) 1439/     6F8 :                     ;       0 - Found
(1) 1440/     6F8 :                     ;      -1 - Not found
(1) 1441/     6F8 :                     ; ----------------------------------------
(1) 1442/     6F8 :                     
(1) 1443/     6F8 :                     .grab_link:
(1) 1444/     6F8 : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1445/     6F9 : E6 F0               		and	11110000b		; Filter bits
(1) 1446/     6FB : 5F                  		ld	e,a			; e - NEW chip
(1) 1447/     6FC : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1448/     6FF : E6 F0               		and	11110000b
(1) 1449/     701 : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1450/     703 : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1451/     704 : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1452/     706 : CF                  		rst	8
(1) 1453/     707 : 57                  		ld	d,a			; d - Chip to silence
(1) 1454/     708 : D5                  		push	de
(1) 1455/     709 : CD 23 07            		call	.srch_link		; Search OLD link
(1) 1456/     70C : D1                  		pop	de
(1) 1457/     70D : FE FF               		cp	-1
(1) 1458/     70F : 28 03               		jr	z,.dont_res
(1) 1459/     711 : CD 2E 10            		call	tblz_clear
(1) 1460/     714 :                     .dont_res:
(1) 1461/     714 : CF                  		rst	8
(1) 1462/     715 : 18 62               		jr	.new_chip
(1) 1463/     717 :                     .same_link:
(1) 1464/     717 : CD 23 07            		call	.srch_link		; Search link
(1) 1465/     71A : FE FF               		cp	-1
(1) 1466/     71C : C0                  		ret	nz
(1) 1467/     71D : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1468/     720 : CF                  		rst	8
(1) 1469/     721 : 18 56               		jr	.new_chip
(1) 1470/     723 :                     
(1) 1471/     723 :                     ; ----------------------------------------
(1) 1472/     723 :                     ; ** RELINK **
(1) 1473/     723 :                     ; a - Chip to search for
(1) 1474/     723 :                     
(1) 1475/     723 :                     .srch_link:
(1) 1476/     723 : CD EB 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1477/     726 : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1478/     728 : C1                  		pop	bc
(1) 1479/     729 : B7                  		or	a			; Single table?
(1) 1480/     72A : FA 44 07            		jp	m,.singl_link
(1) 1481/     72D :                     .srch_lloop:
(1) 1482/     72D : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1483/     72E : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1484/     730 : 28 43               		jr	z,.refill
(1) 1485/     732 : B9                  		cp	c			; Same link LSB?
(1) 1486/     733 : 20 07               		jr	nz,.invldl
(1) 1487/     735 : 23                  		inc	hl
(1) 1488/     736 : CF                  		rst	8
(1) 1489/     737 : 7E                  		ld	a,(hl)
(1) 1490/     738 : 2B                  		dec	hl
(1) 1491/     739 : B8                  		cp	b			; Same link MSB?
(1) 1492/     73A : 28 16               		jr	z,.reroll
(1) 1493/     73C :                     .invldl:
(1) 1494/     73C : D5                  		push	de
(1) 1495/     73D : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1496/     740 : 19                  		add	hl,de
(1) 1497/     741 : D1                  		pop	de
(1) 1498/     742 : 18 E9               		jr	.srch_lloop
(1) 1499/     744 :                     
(1) 1500/     744 :                     ; ----------------------
(1) 1501/     744 :                     ; PSGN/FM3/FM6
(1) 1502/     744 :                     .singl_link:
(1) 1503/     744 : 23                  		inc	hl			; Read MSB first
(1) 1504/     745 : 7E                  		ld	a,(hl)
(1) 1505/     746 : 2B                  		dec	hl
(1) 1506/     747 : CF                  		rst	8
(1) 1507/     748 : B8                  		cp	b			; MSB match?
(1) 1508/     749 : 20 2A               		jr	nz,.refill
(1) 1509/     74B : 7E                  		ld	a,(hl)			; Read LSB
(1) 1510/     74C : B9                  		cp	c
(1) 1511/     74D : 20 26               		jr	nz,.refill
(1) 1512/     74F : C3 77 07            		jp	.rnot_psg
(1) 1513/     752 :                     
(1) 1514/     752 :                     ; ----------------------------------------
(1) 1515/     752 :                     ; *** Special re-roll check for
(1) 1516/     752 :                     ; listed tables ***
(1) 1517/     752 :                     
(1) 1518/     752 :                     .reroll:
(1) 1519/     752 : E5                  		push	hl
(1) 1520/     753 : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1521/     756 : 09                  		add	hl,bc
(1) 1522/     757 : CF                  		rst	8
(1) 1523/     758 : 4E                  		ld	c,(hl)		; c - ID
(1) 1524/     759 : E1                  		pop	hl
(1) 1525/     75A : 7B                  		ld	a,e
(1) 1526/     75B : FE 80               		cp	80h		; PSG?
(1) 1527/     75D : 20 18               		jr	nz,.rnot_psg
(1) 1528/     75F :                     	; Special PSG3/PSGN check
(1) 1529/     75F : 3A EA 1C            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1530/     762 : E6 03               		and	011b
(1) 1531/     764 : FE 03               		cp	011b
(1) 1532/     766 : 20 0F               		jr	nz,.rnot_psg
(1) 1533/     768 : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1534/     769 : FE 02               		cp	2
(1) 1535/     76B : 20 0A               		jr	nz,.rnot_psg
(1) 1536/     76D : CF                  		rst	8
(1) 1537/     76E : D5                  		push	de
(1) 1538/     76F : 16 80               		ld	d,80h		; Force silence
(1) 1539/     771 : CD 2E 10            		call	tblz_clear
(1) 1540/     774 : D1                  		pop	de
(1) 1541/     775 :                     .refill:
(1) 1542/     775 : 18 71               		jr	.set_asfull
(1) 1543/     777 :                     .rnot_psg:
(1) 1544/     777 : AF                  		xor	a
(1) 1545/     778 : C9                  		ret
(1) 1546/     779 :                     
(1) 1547/     779 :                     ; ----------------------------------------
(1) 1548/     779 :                     ; *** NEW CHIP ***
(1) 1549/     779 :                     ; e - Chip to set
(1) 1550/     779 :                     
(1) 1551/     779 :                     .new_chip:
(1) 1552/     779 : 7B                  		ld	a,e			; Read NEW chip
(1) 1553/     77A : B7                  		or	a			; If non-minus, exit.
(1) 1554/     77B : F2 E8 07            		jp	p,.set_asfull
(1) 1555/     77E : CD EB 07            		call	.pick_tbl
(1) 1556/     781 : CF                  		rst	8
(1) 1557/     782 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1558/     785 : B7                  		or	a
(1) 1559/     786 : FA D6 07            		jp	m,.singl_free
(1) 1560/     789 : E5                  		push	hl			; Backup START table
(1) 1561/     78A :                     ; PASS 1
(1) 1562/     78A :                     .srch_free:
(1) 1563/     78A : 7E                  		ld	a,(hl)			; Read LSB
(1) 1564/     78B : FE FF               		cp	-1			; If -1, return -1
(1) 1565/     78D : 28 0B               		jr	z,.pass_2
(1) 1566/     78F : 23                  		inc	hl
(1) 1567/     790 : 46                  		ld	b,(hl)			; Read MSB
(1) 1568/     791 : 2B                  		dec	hl
(1) 1569/     792 :                     ; 		nop	; wave sync
(1) 1570/     792 :                     ; 		nop
(1) 1571/     792 :                     ; 		rst	8
(1) 1572/     792 :                     ; 		nop
(1) 1573/     792 :                     ; 		nop
(1) 1574/     792 : B0                  		or	b
(1) 1575/     793 : 28 24               		jr	z,.new_link_z
(1) 1576/     795 : CD B2 07            		call	.nextsrch_tbl
(1) 1577/     798 : 18 F0               		jr	.srch_free
(1) 1578/     79A :                     
(1) 1579/     79A :                     ; PASS 2
(1) 1580/     79A :                     ; Rewrite mode
(1) 1581/     79A :                     .pass_2:
(1) 1582/     79A : E1                  		pop	hl
(1) 1583/     79B :                     .next_prio:
(1) 1584/     79B : 7E                  		ld	a,(hl)		; Read LSB
(1) 1585/     79C : FE FF               		cp	-1		; If -1, return -1
(1) 1586/     79E : C8                  		ret	z
(1) 1587/     79F : 23                  		inc	hl
(1) 1588/     7A0 : 23                  		inc	hl
(1) 1589/     7A1 : 7E                  		ld	a,(hl)		; Read priority
(1) 1590/     7A2 : 2B                  		dec	hl
(1) 1591/     7A3 : 2B                  		dec	hl
(1) 1592/     7A4 : B7                  		or	a		; Failsafe zero priority overwrite
(1) 1593/     7A5 : 28 16               		jr	z,.new_link_o
(1) 1594/     7A7 : B9                  		cp	c
(1) 1595/     7A8 : 28 13               		jr	z,.new_link_o
(1) 1596/     7AA : 38 11               		jr	c,.new_link_o
(1) 1597/     7AC : CF                  		rst	8
(1) 1598/     7AD : CD B2 07            		call	.nextsrch_tbl
(1) 1599/     7B0 : 18 E9               		jr	.next_prio
(1) 1600/     7B2 :                     .nextsrch_tbl:
(1) 1601/     7B2 : D5                  		push	de
(1) 1602/     7B3 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1603/     7B6 : 19                  		add	hl,de
(1) 1604/     7B7 : D1                  		pop	de
(1) 1605/     7B8 :                     ; 		nop	; wave sync
(1) 1606/     7B8 :                     ; 		nop
(1) 1607/     7B8 :                     ; 		rst	8
(1) 1608/     7B8 :                     ; 		nop
(1) 1609/     7B8 :                     ; 		nop
(1) 1610/     7B8 : C9                  		ret
(1) 1611/     7B9 :                     .new_link_z:
(1) 1612/     7B9 : 33                  		inc	sp		; skip backup
(1) 1613/     7BA : 33                  		inc	sp
(1) 1614/     7BB : 18 08               		jr	.new_link
(1) 1615/     7BD :                     
(1) 1616/     7BD :                     ; OVERWRITE link
(1) 1617/     7BD :                     .new_link_o:
(1) 1618/     7BD : E5                  		push	hl
(1) 1619/     7BE : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1620/     7C1 : CD 2E 10            		call	tblz_clear
(1) 1621/     7C4 : E1                  		pop	hl
(1) 1622/     7C5 :                     ; NEW link
(1) 1623/     7C5 :                     .new_link:
(1) 1624/     7C5 : CF                  		rst	8
(1) 1625/     7C6 : 23                  		inc	hl
(1) 1626/     7C7 : 23                  		inc	hl
(1) 1627/     7C8 :                     ; hl+2
(1) 1628/     7C8 :                     .l_hiprio:
(1) 1629/     7C8 : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1630/     7CB : DD E5               		push	ix
(1) 1631/     7CD : D1                  		pop	de
(1) 1632/     7CE : 71                  		ld	(hl),c		; Write priority
(1) 1633/     7CF : 2B                  		dec	hl
(1) 1634/     7D0 : CF                  		rst	8
(1) 1635/     7D1 : 72                  		ld 	(hl),d		; MSB
(1) 1636/     7D2 : 2B                  		dec	hl
(1) 1637/     7D3 : 73                  		ld	(hl),e		; LSB
(1) 1638/     7D4 : AF                  		xor	a		; Return OK
(1) 1639/     7D5 : C9                  		ret
(1) 1640/     7D6 :                     
(1) 1641/     7D6 :                     ; Single slot
(1) 1642/     7D6 :                     ; c - priority
(1) 1643/     7D6 :                     ; e - chip
(1) 1644/     7D6 :                     .singl_free:
(1) 1645/     7D6 : 46                  		ld	b,(hl)
(1) 1646/     7D7 : 23                  		inc	hl
(1) 1647/     7D8 : 7E                  		ld	a,(hl)
(1) 1648/     7D9 : 23                  		inc	hl
(1) 1649/     7DA : B0                  		or	b
(1) 1650/     7DB : 28 EB               		jr	z,.l_hiprio
(1) 1651/     7DD : CF                  		rst	8
(1) 1652/     7DE : 7E                  		ld	a,(hl)
(1) 1653/     7DF : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1654/     7E0 : 28 E6               		jr	z,.l_hiprio
(1) 1655/     7E2 : B9                  		cp	c
(1) 1656/     7E3 : 28 E3               		jr	z,.l_hiprio
(1) 1657/     7E5 : 38 E1               		jr	c,.l_hiprio		; PRIORITY
(1) 1658/     7E7 : CF                  		rst	8
(1) 1659/     7E8 :                     .set_asfull:
(1) 1660/     7E8 : 3E FF               		ld	a,-1			; Return -1
(1) 1661/     7EA : C9                  		ret
(1) 1662/     7EB :                     
(1) 1663/     7EB :                     ; Pick chip table
(1) 1664/     7EB :                     ; In:
(1) 1665/     7EB :                     ;  a - ID
(1) 1666/     7EB :                     ;
(1) 1667/     7EB :                     ; Out:
(1) 1668/     7EB :                     ;  a - Special bit + ID
(1) 1669/     7EB :                     ;
(1) 1670/     7EB :                     ; hl - Table
(1) 1671/     7EB :                     .pick_tbl:
(1) 1672/     7EB : D5                  		push	de
(1) 1673/     7EC : 0F                  		rrca
(1) 1674/     7ED : 0F                  		rrca
(1) 1675/     7EE : 0F                  		rrca
(1) 1676/     7EF : 0F                  		rrca
(1) 1677/     7F0 : E6 07               		and	00000111b
(1) 1678/     7F2 : 87                  		add	a,a
(1) 1679/     7F3 : 21 00 1B            		ld	hl,tblList
(1) 1680/     7F6 : E5                  		push	hl
(1) 1681/     7F7 : 16 00               		ld	d,0
(1) 1682/     7F9 : 5F                  		ld	e,a
(1) 1683/     7FA : 19                  		add	hl,de
(1) 1684/     7FB : 5E                  		ld	e,(hl)
(1) 1685/     7FC : 23                  		inc	hl
(1) 1686/     7FD : 7E                  		ld	a,(hl)
(1) 1687/     7FE : 57                  		ld	d,a
(1) 1688/     7FF : E6 80               		and	10000000b
(1) 1689/     801 : CB BA               		res	7,d
(1) 1690/     803 : E1                  		pop	hl
(1) 1691/     804 : 19                  		add	hl,de
(1) 1692/     805 : D1                  		pop	de
(1) 1693/     806 : C9                  		ret
(1) 1694/     807 :                     
(1) 1695/     807 :                     ; ============================================
(1) 1696/     807 :                     ; ----------------------------------------
(1) 1697/     807 :                     ; Process chip using it's table
(1) 1698/     807 :                     ;
(1) 1699/     807 :                     ; iy - table to read
(1) 1700/     807 :                     ; ----------------------------------------
(1) 1701/     807 :                     
(1) 1702/     807 :                     dtbl_multi:
(1) 1703/     807 : FD 7E 00            		ld	a,(iy)
(1) 1704/     80A : FE FF               		cp	-1
(1) 1705/     80C : C8                  		ret	z
(1) 1706/     80D : CD 1D 08            		call	dtbl_singl
(1) 1707/     810 : CF                  		rst	8
(1) 1708/     811 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1709/     814 : FD 19               		add	iy,de
(1) 1710/     816 : 06 04               		ld	b,4		; ** wave sync ** IMPORTANT
(1) 1711/     818 : 10 FE               		djnz	$
(1) 1712/     81A : CF                  		rst	8
(1) 1713/     81B : 18 EA               		jr	dtbl_multi
(1) 1714/     81D :                     dtbl_singl:
(1) 1715/     81D : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1716/     820 : FD 56 01            		ld	d,(iy+1)
(1) 1717/     823 : 7A                  		ld	a,d		; If no-zero, active
(1) 1718/     824 : B3                  		or	e
(1) 1719/     825 : 20 60               		jr	nz,.linked
(1) 1720/     827 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1721/     82A : B7                  		or	a
(1) 1722/     82B : F0                  		ret	p		; Return if not.
(1) 1723/     82C : CF                  		rst	8
(1) 1724/     82D : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1725/     831 :                     
(1) 1726/     831 :                     ; ----------------------------------------
(1) 1727/     831 :                     ; chip-silence request
(1) 1728/     831 :                     ; iy - Table
(1) 1729/     831 : E6 F0               		and	11110000b
(1) 1730/     833 : FE 80               		cp	80h
(1) 1731/     835 : 28 1E               		jr	z,.siln_psg
(1) 1732/     837 : FE 90               		cp	90h
(1) 1733/     839 : 28 16               		jr	z,.siln_psg_n
(1) 1734/     83B : FE A0               		cp	0A0h
(1) 1735/     83D : 28 42               		jr	z,.siln_fm
(1) 1736/     83F : FE B0               		cp	0B0h
(1) 1737/     841 : 28 3E               		jr	z,.siln_fm
(1) 1738/     843 : CF                  		rst	8
(1) 1739/     844 : FE C0               		cp	0C0h
(1) 1740/     846 : 28 36               		jr	z,.siln_dac
(1) 1741/     848 : FE D0               		cp	0D0h
(1) 1742/     84A : 28 10               		jr	z,.siln_pcm
(1) 1743/     84C : FE E0               		cp	0E0h
(1) 1744/     84E : 28 18               		jr	z,.siln_pwm
(1) 1745/     850 : C9                  		ret
(1) 1746/     851 :                     .siln_psg_n:
(1) 1747/     851 : AF                  		xor	a
(1) 1748/     852 : 32 EA 1C            		ld	(psgHatMode),a
(1) 1749/     855 :                     .siln_psg:
(1) 1750/     855 : CF                  		rst	8
(1) 1751/     856 : DD 21 75 17         		ld	ix,psgcom
(1) 1752/     85A : 18 16               		jr	.rcyl_com
(1) 1753/     85C :                     
(1) 1754/     85C :                     ; --------------------------------
(1) 1755/     85C :                     
(1) 1756/     85C :                     .siln_pcm:
(1) 1757/     85C : 3E 01               		ld	a,1
(1) 1758/     85E : 32 F9 19            		ld	(mcdUpd),a
(1) 1759/     861 : CF                  		rst	8
(1) 1760/     862 : DD 21 F5 16         		ld	ix,pcmcom
(1) 1761/     866 : 18 0A               		jr	.rcyl_com
(1) 1762/     868 :                     .siln_pwm:
(1) 1763/     868 : 3E 01               		ld	a,1
(1) 1764/     86A : 32 F8 19            		ld	(marsUpd),a
(1) 1765/     86D : CF                  		rst	8
(1) 1766/     86E : DD 21 3D 17         		ld	ix,pwmcom
(1) 1767/     872 :                     ; 		jr	.rcyl_com
(1) 1768/     872 :                     
(1) 1769/     872 :                     ; --------------------------------
(1) 1770/     872 :                     
(1) 1771/     872 :                     .rcyl_com:
(1) 1772/     872 : 06 00               		ld	b,0
(1) 1773/     874 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1774/     877 : DD 09               		add	ix,bc
(1) 1775/     879 : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1776/     87D : C9                  		ret
(1) 1777/     87E :                     
(1) 1778/     87E :                     ; --------------------------------
(1) 1779/     87E :                     
(1) 1780/     87E :                     .siln_dac:
(1) 1781/     87E : CD 5C 14            		call	dac_off
(1) 1782/     881 :                     .siln_fm:
(1) 1783/     881 : CD 5C 0A            		call	.fm_keyoff
(1) 1784/     884 : C3 64 0A            		jp	.fm_tloff
(1) 1785/     887 :                     
(1) 1786/     887 :                     ; ----------------------------------------
(1) 1787/     887 :                     ; Process channel now
(1) 1788/     887 :                     ; iy - Table
(1) 1789/     887 :                     ; ix - Tracker channel
(1) 1790/     887 :                     .linked:
(1) 1791/     887 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1792/     888 : 47                  		ld	b,a		; b - flags to check
(1) 1793/     889 : E6 0F               		and	00001111b	; evin flags?
(1) 1794/     88B : C8                  		ret	z
(1) 1795/     88C : 78                  		ld	a,b
(1) 1796/     88D : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1797/     88F : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1798/     890 : FD E5               		push	iy		; table+10h instrment data
(1) 1799/     892 : D5                  		push	de
(1) 1800/     893 : DD E1               		pop	ix
(1) 1801/     895 : E1                  		pop	hl
(1) 1802/     896 : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1803/     899 : 19                  		add	hl,de
(1) 1804/     89A :                     	; --------------------------------
(1) 1805/     89A :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1806/     89A :                     	; iy - Our chip table
(1) 1807/     89A :                     	; ix - Track channel
(1) 1808/     89A :                     	; hl - Intrument data
(1) 1809/     89A : CB 40               		bit	0,b		; Note
(1) 1810/     89C : C4 A6 0F            		call	nz,.note
(1) 1811/     89F : CB 48               		bit	1,b		; Intrument
(1) 1812/     8A1 : C4 05 0E            		call	nz,.inst
(1) 1813/     8A4 : CF                  		rst	8
(1) 1814/     8A5 : CB 50               		bit	2,b		; Volume
(1) 1815/     8A7 : C4 FC 0D            		call	nz,.volu
(1) 1816/     8AA : CB 58               		bit	3,b		; Effect
(1) 1817/     8AC : C4 F3 0C            		call	nz,.effc
(1) 1818/     8AF :                     
(1) 1819/     8AF : 7E                  		ld	a,(hl)		; Read INS type
(1) 1820/     8B0 : E6 70               		and	01110000b	; Filter bits
(1) 1821/     8B2 : 0F                  		rrca
(1) 1822/     8B3 : 0F                  		rrca
(1) 1823/     8B4 : 0F                  		rrca
(1) 1824/     8B5 : CF                  		rst	8
(1) 1825/     8B6 : 16 00               		ld	d,0
(1) 1826/     8B8 : 5F                  		ld	e,a
(1) 1827/     8B9 : 21 C2 08            		ld	hl,.mk_list
(1) 1828/     8BC : 19                  		add	hl,de
(1) 1829/     8BD : 7E                  		ld	a,(hl)
(1) 1830/     8BE : 23                  		inc	hl
(1) 1831/     8BF : 66                  		ld	h,(hl)
(1) 1832/     8C0 : 6F                  		ld	l,a
(1) 1833/     8C1 : E9                  		jp	(hl)
(1) 1834/     8C2 :                     ; --------------------------------
(1) 1835/     8C2 :                     .mk_list:
(1) 1836/     8C2 : 18 09               		dw .mk_psg
(1) 1837/     8C4 : D0 08               		dw .mk_psgn
(1) 1838/     8C6 : 7C 09               		dw .mk_fm
(1) 1839/     8C8 : F0 09               		dw .mk_fmspc
(1) 1840/     8CA : 55 0B               		dw .mk_dac
(1) 1841/     8CC : AC 0B               		dw .mk_pcm
(1) 1842/     8CE : 47 0C               		dw .mk_pwm
(1) 1843/     8D0 :                     
(1) 1844/     8D0 :                     ; --------------------------------
(1) 1845/     8D0 :                     ; PSGN
(1) 1846/     8D0 :                     ; --------------------------------
(1) 1847/     8D0 :                     
(1) 1848/     8D0 :                     .mk_psgn:
(1) 1849/     8D0 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1850/     8D3 : DD E5               		push	ix
(1) 1851/     8D5 : DD 21 78 17         		ld	ix,psgcom+3	; Steal PSG3
(1) 1852/     8D9 : CB 40               		bit	0,b
(1) 1853/     8DB : CA 67 09            		jp	z,.psg_keyon
(1) 1854/     8DE : CF                  		rst	8
(1) 1855/     8DF : FE FE               		cp	-2
(1) 1856/     8E1 : 28 21               		jr	z,.kycut_psgn
(1) 1857/     8E3 : FE FF               		cp	-1
(1) 1858/     8E5 : 28 10               		jr	z,.kyoff_psgn
(1) 1859/     8E7 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1860/     8EB : 5F                  		ld	e,a
(1) 1861/     8EC : 3A EA 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1862/     8EF : E6 03               		and	011b
(1) 1863/     8F1 : FE 03               		cp	011b
(1) 1864/     8F3 : 20 72               		jr	nz,.psg_keyon	; Normal
(1) 1865/     8F5 : 18 42               		jr	.from_psgn	; Tone 3
(1) 1866/     8F7 :                     
(1) 1867/     8F7 :                     ; --------------------------------
(1) 1868/     8F7 :                     ; PSG
(1) 1869/     8F7 :                     ; --------------------------------
(1) 1870/     8F7 :                     
(1) 1871/     8F7 :                     ; -1
(1) 1872/     8F7 :                     .kyoff_psgn:
(1) 1873/     8F7 : CD 11 09            		call	.kypsgn_hatoff
(1) 1874/     8FA :                     .kyoff_psg:
(1) 1875/     8FA : 0E 02               		ld	c,010b
(1) 1876/     8FC : DD 71 00            		ld	(ix),c
(1) 1877/     8FF : DD E1               		pop	ix
(1) 1878/     901 : C3 1B 10            		jp	.chnl_ulnkoff
(1) 1879/     904 :                     ; -2
(1) 1880/     904 :                     .kycut_psgn:
(1) 1881/     904 : CD 11 09            		call	.kypsgn_hatoff
(1) 1882/     907 :                     .kycut_psg:
(1) 1883/     907 : 0E 04               		ld	c,100b
(1) 1884/     909 : DD 71 00            		ld	(ix),c
(1) 1885/     90C : DD E1               		pop	ix
(1) 1886/     90E : C3 15 10            		jp	.chnl_ulnkcut
(1) 1887/     911 :                     .kypsgn_hatoff:
(1) 1888/     911 : 3E 00               		ld	a,000b
(1) 1889/     913 : 32 EA 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1890/     916 : CF                  		rst	8
(1) 1891/     917 : C9                  		ret
(1) 1892/     918 :                     
(1) 1893/     918 :                     .mk_psg:
(1) 1894/     918 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1895/     91B : DD E5               		push	ix
(1) 1896/     91D : CF                  		rst	8
(1) 1897/     91E : DD 21 75 17         		ld	ix,psgcom	; ix - psgcom
(1) 1898/     922 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1899/     925 : 16 00               		ld	d,0
(1) 1900/     927 : DD 19               		add	ix,de
(1) 1901/     929 : CB 40               		bit	0,b
(1) 1902/     92B : 28 3A               		jr	z,.psg_keyon
(1) 1903/     92D : FE FE               		cp	-2
(1) 1904/     92F : 28 D6               		jr	z,.kycut_psg
(1) 1905/     931 : FE FF               		cp	-1
(1) 1906/     933 : 28 C5               		jr	z,.kyoff_psg
(1) 1907/     935 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1908/     939 :                     .from_psgn:
(1) 1909/     939 : CF                  		rst	8
(1) 1910/     93A : 16 00               		ld	d,0			; de - note*2
(1) 1911/     93C : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; Freq index
(1) 1912/     93F : 21 45 15            		ld	hl,psgFreq_List-(36*2)	; <-- 48
(1) 1913/     942 : 19                  		add	hl,de
(1) 1914/     943 : 7E                  		ld	a,(hl)
(1) 1915/     944 : 23                  		inc	hl
(1) 1916/     945 : 66                  		ld	h,(hl)
(1) 1917/     946 : 6F                  		ld	l,a
(1) 1918/     947 : 3A 3E 00            		ld	a,(palMode)
(1) 1919/     94A : B7                  		or	a
(1) 1920/     94B : 28 01               		jr	z,.not_palp
(1) 1921/     94D : 2B                  		dec	hl
(1) 1922/     94E :                     .not_palp:
(1) 1923/     94E : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1924/     951 : 07                  		rlca				; << 3
(1) 1925/     952 : 07                  		rlca
(1) 1926/     953 : CF                  		rst	8
(1) 1927/     954 : 07                  		rlca
(1) 1928/     955 : 57                  		ld	d,a
(1) 1929/     956 : E6 F8               		and	11111000b
(1) 1930/     958 : 5F                  		ld	e,a
(1) 1931/     959 : 7A                  		ld	a,d
(1) 1932/     95A : E6 07               		and	00000111b
(1) 1933/     95C : 57                  		ld	d,a
(1) 1934/     95D : 37                  		scf
(1) 1935/     95E : 3F                  		ccf
(1) 1936/     95F : ED 52               		sbc	hl,de
(1) 1937/     961 : DD 75 1C            		ld	(ix+DTL),l
(1) 1938/     964 : DD 74 20            		ld	(ix+DTH),h
(1) 1939/     967 :                     .psg_keyon:
(1) 1940/     967 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1941/     96A : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1942/     96D : ED 44               		neg	a
(1) 1943/     96F : CF                  		rst	8
(1) 1944/     970 : 87                  		add	a,a
(1) 1945/     971 : 87                  		add	a,a
(1) 1946/     972 : 30 02               		jr	nc,.vmuch
(1) 1947/     974 : 3E FF               		ld	a,-1
(1) 1948/     976 :                     .vmuch:
(1) 1949/     976 : DD 77 30            		ld	(ix+PVOL),a
(1) 1950/     979 : DD E1               		pop	ix
(1) 1951/     97B : C9                  		ret
(1) 1952/     97C :                     
(1) 1953/     97C :                     ; --------------------------------
(1) 1954/     97C :                     ; FM
(1) 1955/     97C :                     ; --------------------------------
(1) 1956/     97C :                     
(1) 1957/     97C :                     .mk_fm:
(1) 1958/     97C : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1959/     97F : CB 40               		bit	0,b			; NEW note (---n)?
(1) 1960/     981 : 20 02               		jr	nz,.mkfm_new
(1) 1961/     983 : 18 30               		jr	.mkfm_upd		; Else: Update FM
(1) 1962/     985 :                     .mkfm_new:
(1) 1963/     985 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1964/     988 : FE FE               		cp	-2			; Key-cut?
(1) 1965/     98A : CA 42 0A            		jp	z,.fm_cut
(1) 1966/     98D : FE FF               		cp	-1			; Key-off?
(1) 1967/     98F : CA 3C 0A            		jp	z,.fm_off
(1) 1968/     992 : CF                  		rst	8
(1) 1969/     993 : 79                  		ld	a,c
(1) 1970/     994 : FE 06               		cp	6			; Check FM6
(1) 1971/     996 : 20 05               		jr	nz,.not_dac
(1) 1972/     998 : CD 5C 14            		call	dac_off			; Turn DAC off
(1) 1973/     99B : 18 15               		jr	.not_dspc
(1) 1974/     99D :                     .not_dac:
(1) 1975/     99D : FE 02               		cp	2			; Check FM3
(1) 1976/     99F : 20 11               		jr	nz,.not_dspc
(1) 1977/     9A1 : 3A EB 1C            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1978/     9A4 : B7                  		or	a
(1) 1979/     9A5 : 28 0B               		jr	z,.not_dspc
(1) 1980/     9A7 : 3E 00               		ld	a,0
(1) 1981/     9A9 : 32 EB 1C            		ld	(fmSpecial),a
(1) 1982/     9AC : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1983/     9AF : CD 31 14            		call	fm_send_1
(1) 1984/     9B2 :                     .not_dspc:
(1) 1985/     9B2 : CD 5C 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1986/     9B5 :                     
(1) 1987/     9B5 :                     ; --------------------------------
(1) 1988/     9B5 :                     
(1) 1989/     9B5 :                     .mkfm_upd:
(1) 1990/     9B5 : C5                  		push	bc
(1) 1991/     9B6 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1992/     9B9 : 47                  		ld	b,a
(1) 1993/     9BA : E6 1F               		and	00011111b
(1) 1994/     9BC : 5F                  		ld	e,a
(1) 1995/     9BD : 16 00               		ld	d,0
(1) 1996/     9BF : 21 75 15            		ld	hl,fmFreq_List
(1) 1997/     9C2 : 19                  		add	hl,de
(1) 1998/     9C3 : 7E                  		ld	a,(hl)
(1) 1999/     9C4 : CF                  		rst	8
(1) 2000/     9C5 : 23                  		inc	hl
(1) 2001/     9C6 : 66                  		ld	h,(hl)
(1) 2002/     9C7 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2003/     9C8 : 3A 3E 00            		ld	a,(palMode)		; PAL speed check
(1) 2004/     9CB : B7                  		or	a
(1) 2005/     9CC : 28 04               		jr	z,.not_pal
(1) 2006/     9CE : 11 04 00            		ld	de,4			; freq + 4
(1) 2007/     9D1 : 19                  		add	hl,de
(1) 2008/     9D2 :                     .not_pal:
(1) 2009/     9D2 : 78                  		ld	a,b
(1) 2010/     9D3 : E6 E0               		and	11100000b
(1) 2011/     9D5 : 0F                  		rrca
(1) 2012/     9D6 : 0F                  		rrca
(1) 2013/     9D7 : B4                  		or	h
(1) 2014/     9D8 : 67                  		ld	h,a
(1) 2015/     9D9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2016/     9DC : CF                  		rst	8
(1) 2017/     9DD : AF                  		xor	a			; clear high
(1) 2018/     9DE : 3F                  		ccf				; clear carry
(1) 2019/     9DF : CB 23               		sla	e			; pitchbend << 3
(1) 2020/     9E1 : CB 23               		sla	e
(1) 2021/     9E3 : CB 23               		sla	e
(1) 2022/     9E5 : 9F                  		sbc	a,a			; a - 0 or -1 if carry is set
(1) 2023/     9E6 : 57                  		ld	d,a
(1) 2024/     9E7 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2025/     9E8 : CD 7B 0A            		call	.fm_setfreq
(1) 2026/     9EB : C1                  		pop	bc
(1) 2027/     9EC : C3 92 0A            		jp	.mkfm_set		; Volume
(1) 2028/     9EF :                     .nofm_note:
(1) 2029/     9EF : C9                  		ret
(1) 2030/     9F0 :                     
(1) 2031/     9F0 :                     ; --------------------------------
(1) 2032/     9F0 :                     ; FM3 special
(1) 2033/     9F0 :                     ; --------------------------------
(1) 2034/     9F0 :                     
(1) 2035/     9F0 :                     .mk_fmspc:
(1) 2036/     9F0 :                     ; 		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 2037/     9F0 : 0E 03               		ld	c,011b			; <-- FM3 special ID
(1) 2038/     9F2 : CB 40               		bit	0,b			; NEW Note?
(1) 2039/     9F4 : CA 92 0A            		jp	z,.mkfm_set
(1) 2040/     9F7 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2041/     9FA : FE FE               		cp	-2
(1) 2042/     9FC : CA 42 0A            		jp	z,.fm_cut
(1) 2043/     9FF : FE FF               		cp	-1
(1) 2044/     A01 : CA 3C 0A            		jp	z,.fm_off
(1) 2045/     A04 : CD 5C 0A            		call	.fm_keyoff
(1) 2046/     A07 : CF                  		rst	8
(1) 2047/     A08 : 21 01 18            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2048/     A0B : 11 20 00            		ld	de,20h			; point to regs
(1) 2049/     A0E : 19                  		add	hl,de
(1) 2050/     A0F : DD E5               		push	ix
(1) 2051/     A11 : DD 21 34 0A         		ld	ix,.this_regs
(1) 2052/     A15 : 06 08               		ld	b,8
(1) 2053/     A17 :                     .wr_spc:
(1) 2054/     A17 : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2055/     A1A : 5E                  		ld	e,(hl)
(1) 2056/     A1B : CD 31 14            		call	fm_send_1
(1) 2057/     A1E : CF                  		rst	8
(1) 2058/     A1F : 23                  		inc	hl
(1) 2059/     A20 : DD 23               		inc	ix
(1) 2060/     A22 : 10 F3               		djnz	.wr_spc
(1) 2061/     A24 : DD E1               		pop	ix
(1) 2062/     A26 : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2063/     A29 : CD 31 14            		call	fm_send_1
(1) 2064/     A2C : 3E 01               		ld	a,1
(1) 2065/     A2E : 32 EB 1C            		ld	(fmSpecial),a
(1) 2066/     A31 : C3 92 0A            		jp	.mkfm_set
(1) 2067/     A34 :                     .this_regs:
(1) 2068/     A34 : AD A9               		db 0ADh,0A9h
(1) 2069/     A36 : AC A8               		db 0ACh,0A8h
(1) 2070/     A38 : AE AA               		db 0AEh,0AAh
(1) 2071/     A3A : A6 A2               		db 0A6h,0A2h
(1) 2072/     A3C :                     
(1) 2073/     A3C :                     ; ----------------------------------------
(1) 2074/     A3C :                     
(1) 2075/     A3C :                     .fm_off:
(1) 2076/     A3C : CD 5C 0A            		call	.fm_keyoff
(1) 2077/     A3F : C3 1B 10            		jp	.chnl_ulnkoff
(1) 2078/     A42 :                     .fm_cut:
(1) 2079/     A42 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2080/     A45 : 87                  		add	a,a
(1) 2081/     A46 : 87                  		add	a,a
(1) 2082/     A47 : 21 A1 18            		ld	hl,fmlist_rsave
(1) 2083/     A4A : 16 00               		ld	d,0
(1) 2084/     A4C : 5F                  		ld	e,a
(1) 2085/     A4D : 19                  		add	hl,de
(1) 2086/     A4E : 36 00               		ld	(hl),0
(1) 2087/     A50 : 23                  		inc	hl
(1) 2088/     A51 : 36 00               		ld	(hl),0
(1) 2089/     A53 : CD 5C 0A            		call	.fm_keyoff
(1) 2090/     A56 : CD 64 0A            		call	.fm_tloff
(1) 2091/     A59 : C3 15 10            		jp	.chnl_ulnkcut
(1) 2092/     A5C :                     
(1) 2093/     A5C :                     ; ----------------------------------------
(1) 2094/     A5C :                     
(1) 2095/     A5C :                     .fm_keyoff:
(1) 2096/     A5C : 16 28               		ld	d,28h
(1) 2097/     A5E : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2098/     A61 : C3 31 14            		jp	fm_send_1
(1) 2099/     A64 :                     .fm_tloff:
(1) 2100/     A64 : 06 04               		ld	b,4
(1) 2101/     A66 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2102/     A69 : 79                  		ld	a,c
(1) 2103/     A6A : E6 03               		and	011b
(1) 2104/     A6C : F6 40               		or	40h	; TL regs
(1) 2105/     A6E : 1E 7F               		ld	e,7Fh
(1) 2106/     A70 :                     .tl_down:
(1) 2107/     A70 : 57                  		ld	d,a
(1) 2108/     A71 :                     ; 		ld	e,7Fh
(1) 2109/     A71 : CD 2D 14            		call	fm_autoreg
(1) 2110/     A74 : CF                  		rst	8
(1) 2111/     A75 : 7A                  		ld	a,d
(1) 2112/     A76 : C6 04               		add	a,4
(1) 2113/     A78 : 10 F6               		djnz	.tl_down
(1) 2114/     A7A : C9                  		ret
(1) 2115/     A7B :                     ; c - KeyID
(1) 2116/     A7B :                     .fm_setfreq:
(1) 2117/     A7B : 79                  		ld	a,c
(1) 2118/     A7C : E6 03               		and	011b
(1) 2119/     A7E : F6 A4               		or	0A4h
(1) 2120/     A80 : 57                  		ld	d,a
(1) 2121/     A81 : 5C                  		ld	e,h
(1) 2122/     A82 : CF                  		rst	8
(1) 2123/     A83 : CD 2D 14            		call	fm_autoreg
(1) 2124/     A86 : 79                  		ld	a,c
(1) 2125/     A87 : E6 03               		and	011b
(1) 2126/     A89 : F6 A0               		or	0A0h
(1) 2127/     A8B : 57                  		ld	d,a
(1) 2128/     A8C : 5D                  		ld	e,l
(1) 2129/     A8D : CD 2D 14            		call	fm_autoreg
(1) 2130/     A90 : CF                  		rst	8
(1) 2131/     A91 : C9                  		ret
(1) 2132/     A92 :                     
(1) 2133/     A92 :                     ; --------------------------------
(1) 2134/     A92 :                     ; Make FM
(1) 2135/     A92 :                     
(1) 2136/     A92 :                     .mkfm_set:
(1) 2137/     A92 : 21 F2 19            		ld	hl,fmcach_list
(1) 2138/     A95 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2139/     A98 : E6 07               		and	0111b
(1) 2140/     A9A : 16 00               		ld	d,0
(1) 2141/     A9C : CF                  		rst	8
(1) 2142/     A9D : 87                  		add	a,a
(1) 2143/     A9E : 5F                  		ld	e,a
(1) 2144/     A9F : 19                  		add	hl,de
(1) 2145/     AA0 : 7E                  		ld	a,(hl)
(1) 2146/     AA1 : 23                  		inc	hl
(1) 2147/     AA2 : 66                  		ld	h,(hl)
(1) 2148/     AA3 : 6F                  		ld	l,a
(1) 2149/     AA4 : 11 1C 00            		ld	de,1Ch			; Go to last regs
(1) 2150/     AA7 : 19                  		add	hl,de
(1) 2151/     AA8 : 4E                  		ld	c,(hl)			; c - 0B0h from here
(1) 2152/     AA9 : E5                  		push	hl			; Save point
(1) 2153/     AAA : 11 E8 FF            		ld	de,-18h			; <-- backwards relocate to TLs
(1) 2154/     AAD : 19                  		add	hl,de
(1) 2155/     AAE : CF                  		rst	8
(1) 2156/     AAF : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2157/     AB2 : E6 03               		and	011b
(1) 2158/     AB4 : F6 40               		or	40h			; TL registers
(1) 2159/     AB6 : 57                  		ld	d,a
(1) 2160/     AB7 :                     ; d - 40h+
(1) 2161/     AB7 :                     ; hl - TL data
(1) 2162/     AB7 :                     ; .mkfm_set:
(1) 2163/     AB7 : C5                  		push	bc
(1) 2164/     AB8 : E5                  		push	hl
(1) 2165/     AB9 : 21 4D 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2166/     ABC : 79                  		ld	a,c			; Read 0B0h copy
(1) 2167/     ABD : E6 07               		and	0111b
(1) 2168/     ABF : 06 00               		ld	b,0
(1) 2169/     AC1 : 4F                  		ld	c,a
(1) 2170/     AC2 : 09                  		add	hl,bc
(1) 2171/     AC3 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2172/     AC6 : CF                  		rst	8
(1) 2173/     AC7 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2174/     ACA : 4F                  		ld	c,a			; c - Current Volume
(1) 2175/     ACB : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2176/     ACC : E1                  		pop	hl
(1) 2177/     ACD : CB 08               		rrc	b			; OP1
(1) 2178/     ACF : DC 3B 0B            		call	c,.write_tl
(1) 2179/     AD2 : 23                  		inc	hl
(1) 2180/     AD3 : 14                  		inc	d
(1) 2181/     AD4 : 14                  		inc	d
(1) 2182/     AD5 : CF                  		rst	8
(1) 2183/     AD6 : 14                  		inc	d
(1) 2184/     AD7 : 14                  		inc	d
(1) 2185/     AD8 : CB 08               		rrc	b			; OP2
(1) 2186/     ADA : DC 3B 0B            		call	c,.write_tl
(1) 2187/     ADD : 23                  		inc	hl
(1) 2188/     ADE : 14                  		inc	d
(1) 2189/     ADF : 14                  		inc	d
(1) 2190/     AE0 : 14                  		inc	d
(1) 2191/     AE1 : 14                  		inc	d
(1) 2192/     AE2 : CB 08               		rrc	b			; OP3
(1) 2193/     AE4 : DC 3B 0B            		call	c,.write_tl
(1) 2194/     AE7 : 23                  		inc	hl
(1) 2195/     AE8 : CF                  		rst	8
(1) 2196/     AE9 : 14                  		inc	d
(1) 2197/     AEA : 14                  		inc	d
(1) 2198/     AEB : 14                  		inc	d
(1) 2199/     AEC : 14                  		inc	d
(1) 2200/     AED : CB 08               		rrc	b			; OP4
(1) 2201/     AEF : DC 3B 0B            		call	c,.write_tl
(1) 2202/     AF2 : 23                  		inc	hl
(1) 2203/     AF3 : 14                  		inc	d
(1) 2204/     AF4 : 14                  		inc	d
(1) 2205/     AF5 : 14                  		inc	d
(1) 2206/     AF6 : 14                  		inc	d
(1) 2207/     AF7 : CF                  		rst	8
(1) 2208/     AF8 : C1                  		pop	bc
(1) 2209/     AF9 : E1                  		pop	hl			; Restore point
(1) 2210/     AFA : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; 0B0h algorithm
(1) 2211/     AFD : 7E                  		ld	a,(hl)
(1) 2212/     AFE : 23                  		inc	hl
(1) 2213/     AFF : 5F                  		ld	e,a
(1) 2214/     B00 : 79                  		ld	a,c
(1) 2215/     B01 : E6 03               		and	011b
(1) 2216/     B03 : F6 B0               		or	0B0h
(1) 2217/     B05 : 57                  		ld	d,a
(1) 2218/     B06 : CD 2D 14            		call	fm_autoreg		; Write algorithm
(1) 2219/     B09 : CF                  		rst	8
(1) 2220/     B0A : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2221/     B0D : 2F                  		cpl				; REVERSE bits
(1) 2222/     B0E : E6 30               		and	00110000b
(1) 2223/     B10 : 07                  		rlca				; << 2
(1) 2224/     B11 : 07                  		rlca
(1) 2225/     B12 : 5F                  		ld	e,a			; save as e
(1) 2226/     B13 : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2227/     B14 : 23                  		inc	hl
(1) 2228/     B15 : E6 3F               		and	00111111b
(1) 2229/     B17 : B3                  		or	e			; Merge panning
(1) 2230/     B18 : 5F                  		ld	e,a
(1) 2231/     B19 : 79                  		ld	a,c
(1) 2232/     B1A : CF                  		rst	8
(1) 2233/     B1B : E6 03               		and	011b
(1) 2234/     B1D : F6 B4               		or	0B4h
(1) 2235/     B1F : 57                  		ld	d,a
(1) 2236/     B20 : CD 2D 14            		call	fm_autoreg
(1) 2237/     B23 : 7E                  		ld	a,(hl)			; 022h
(1) 2238/     B24 : 23                  		inc	hl
(1) 2239/     B25 : CF                  		rst	8
(1) 2240/     B26 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2241/     B28 : 28 06               		jr	z,.no_lfo
(1) 2242/     B2A : 5F                  		ld	e,a
(1) 2243/     B2B : 16 22               		ld	d,22h
(1) 2244/     B2D : CD 31 14            		call	fm_send_1
(1) 2245/     B30 :                     .no_lfo:
(1) 2246/     B30 : CF                  		rst	8
(1) 2247/     B31 : 7E                  		ld	a,(hl)			; 028h
(1) 2248/     B32 : E6 F0               		and	11110000b
(1) 2249/     B34 : B1                  		or	c			; Merge FM channel
(1) 2250/     B35 : 5F                  		ld	e,a
(1) 2251/     B36 : 16 28               		ld	d,28h
(1) 2252/     B38 : C3 31 14            		jp	fm_send_1		; Set keys
(1) 2253/     B3B :                     
(1) 2254/     B3B :                     .write_tl:
(1) 2255/     B3B : 7E                  		ld	a,(hl)
(1) 2256/     B3C : 91                  		sub	a,c			; reg - volume
(1) 2257/     B3D : F2 42 0B            		jp	p,.keep_tlmx
(1) 2258/     B40 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2259/     B42 :                     .keep_tlmx:
(1) 2260/     B42 : C5                  		push	bc
(1) 2261/     B43 : 5F                  		ld	e,a
(1) 2262/     B44 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2263/     B47 : CD 2D 14            		call	fm_autoreg
(1) 2264/     B4A : CF                  		rst	8
(1) 2265/     B4B : C1                  		pop	bc
(1) 2266/     B4C : C9                  		ret
(1) 2267/     B4D :                     ; Jump carry list
(1) 2268/     B4D :                     .fm_cindx:
(1) 2269/     B4D : 08                  		db 1000b
(1) 2270/     B4E : 08                  		db 1000b
(1) 2271/     B4F : 08                  		db 1000b
(1) 2272/     B50 : 08                  		db 1000b
(1) 2273/     B51 : 0C                  		db 1100b
(1) 2274/     B52 : 0E                  		db 1110b
(1) 2275/     B53 : 0E                  		db 1110b
(1) 2276/     B54 : 0F                  		db 1111b
(1) 2277/     B55 :                     
(1) 2278/     B55 :                     ; --------------------------------
(1) 2279/     B55 :                     ; DAC
(1) 2280/     B55 :                     ; --------------------------------
(1) 2281/     B55 :                     
(1) 2282/     B55 :                     .mk_dac:
(1) 2283/     B55 : CB 40               		bit	0,b
(1) 2284/     B57 : C8                  		ret	z
(1) 2285/     B58 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2286/     B5B : FE FE               		cp	-2
(1) 2287/     B5D : CA 7D 0B            		jp	z,.dac_cut
(1) 2288/     B60 : FE FF               		cp	-1
(1) 2289/     B62 : CA 83 0B            		jp	z,.dac_off
(1) 2290/     B65 : CD 86 0B            		call	.dac_pitch
(1) 2291/     B68 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2292/     B6B : 2F                  		cpl				; REVERSE bits
(1) 2293/     B6C : E6 30               		and	00110000b
(1) 2294/     B6E : 07                  		rlca
(1) 2295/     B6F : 07                  		rlca
(1) 2296/     B70 : CF                  		rst	8
(1) 2297/     B71 : 5F                  		ld	e,a
(1) 2298/     B72 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2299/     B74 : CD 3C 14            		call	fm_send_2
(1) 2300/     B77 : CD 5C 14            		call	dac_off
(1) 2301/     B7A : C3 71 14            		jp	dac_play
(1) 2302/     B7D :                     .dac_cut:
(1) 2303/     B7D : CD 5C 14            		call	dac_off
(1) 2304/     B80 : C3 1B 10            		jp	.chnl_ulnkoff
(1) 2305/     B83 :                     .dac_off:
(1) 2306/     B83 : C3 15 10            		jp	.chnl_ulnkcut
(1) 2307/     B86 :                     .dac_pitch:
(1) 2308/     B86 : 16 00               		ld	d,0		; Freq index
(1) 2309/     B88 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2310/     B8B : 21 ED 15            		ld	hl,wavFreq_List-(2*36)
(1) 2311/     B8E : 19                  		add	hl,de
(1) 2312/     B8F : 7E                  		ld	a,(hl)
(1) 2313/     B90 : 23                  		inc	hl
(1) 2314/     B91 : 66                  		ld	h,(hl)
(1) 2315/     B92 : 6F                  		ld	l,a
(1) 2316/     B93 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2317/     B96 : CF                  		rst	8
(1) 2318/     B97 : AF                  		xor	a			; Clear high
(1) 2319/     B98 : 3F                  		ccf				; Clear carry
(1) 2320/     B99 : CB 23               		sla	e			; << 3
(1) 2321/     B9B : CB 23               		sla	e
(1) 2322/     B9D : CB 23               		sla	e
(1) 2323/     B9F : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2324/     BA0 : 57                  		ld	d,a
(1) 2325/     BA1 : 19                  		add	hl,de
(1) 2326/     BA2 : 22 04 1D            		ld	(wave_Pitch),hl
(1) 2327/     BA5 : D9                  		exx				; *
(1) 2328/     BA6 : ED 5B 04 1D         		ld	de,(wave_Pitch)		; *
(1) 2329/     BAA : D9                  		exx				; *
(1) 2330/     BAB : C9                  		ret
(1) 2331/     BAC :                     
(1) 2332/     BAC :                     ; --------------------------------
(1) 2333/     BAC :                     ; PCM
(1) 2334/     BAC :                     ; --------------------------------
(1) 2335/     BAC :                     
(1) 2336/     BAC :                     .mk_pcm:
(1) 2338/     BAC : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2339/     BAF : 16 00               		ld	d,0
(1) 2340/     BB1 : FD 5E 03            		ld	e,(iy+ztbl_Chip)	; e - Channel ID
(1) 2341/     BB4 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2342/     BB7 : DD E5               		push	ix
(1) 2343/     BB9 : DD 21 F5 16         		ld	ix,pcmcom
(1) 2344/     BBD : DD 19               		add	ix,de
(1) 2345/     BBF : FE FE               		cp	-2
(1) 2346/     BC1 : CA 38 0C            		jp	z,.pcm_cut
(1) 2347/     BC4 : FE FF               		cp	-1
(1) 2348/     BC6 : CA 31 0C            		jp	z,.pcm_off
(1) 2349/     BC9 : CF                  		rst	8
(1) 2350/     BCA : CB 40               		bit	0,b			; Note flag?
(1) 2351/     BCC : 20 0D               		jr	nz,.pcm_note
(1) 2352/     BCE : CB 58               		bit	3,b			; Effect flag?
(1) 2353/     BD0 : 20 05               		jr	nz,.pcm_effc
(1) 2354/     BD2 : CB 50               		bit	2,b			; Volume flag?
(1) 2355/     BD4 : 20 01               		jr	nz,.pcm_effc
(1) 2356/     BD6 : C9                  		ret
(1) 2357/     BD7 :                     
(1) 2358/     BD7 :                     ; --------------------------------
(1) 2359/     BD7 :                     
(1) 2360/     BD7 :                     .pcm_effc:
(1) 2361/     BD7 : 1E 09               		ld	e,00001001b
(1) 2362/     BD9 : 18 0C               		jr	.mkpcm_wrton
(1) 2363/     BDB :                     .pcm_note:
(1) 2364/     BDB : 79                  		ld	a,c			; <-- Lazy panning reset
(1) 2365/     BDC : E6 30               		and	00110000b		; Read LR bits
(1) 2366/     BDE : B7                  		or	a
(1) 2367/     BDF : 20 04               		jr	nz,.mp_reset
(1) 2368/     BE1 : DD 36 40 00         		ld	(ix+64),0		; Reset PCM panning
(1) 2369/     BE5 :                     .mp_reset:
(1) 2370/     BE5 : 1E 01               		ld	e,00000001b		; KeyON request
(1) 2371/     BE7 :                     .mkpcm_wrton:
(1) 2372/     BE7 : DD 73 00            		ld	(ix),e			; Write key-on bit
(1) 2373/     BEA :                     .mkpcm_proc:
(1) 2374/     BEA : CD D3 0C            		call	.readfreq_pcm
(1) 2375/     BED : DD 5E 40            		ld	e,(ix+64)		; Get Current PCM panning
(1) 2376/     BF0 : D5                  		push	de
(1) 2377/     BF1 : 11 08 00            		ld	de,8			; Go to Pitch
(1) 2378/     BF4 : DD 19               		add	ix,de
(1) 2379/     BF6 : DD 74 00            		ld	(ix),h			; Set pitch
(1) 2380/     BF9 : DD 19               		add	ix,de
(1) 2381/     BFB : DD 75 00            		ld	(ix),l
(1) 2382/     BFE : DD 19               		add	ix,de
(1) 2383/     C00 : 0E FF               		ld	c,-1
(1) 2384/     C02 : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2385/     C05 : FE 40               		cp	40h
(1) 2386/     C07 : 28 11               		jr	z,.vpcm_siln
(1) 2387/     C09 : 30 0F               		jr	nc,.vpcm_siln
(1) 2388/     C0B : B7                  		or	a
(1) 2389/     C0C : FA 1A 0C            		jp	m,.vpcm_siln
(1) 2390/     C0F : 87                  		add	a,a
(1) 2391/     C10 : 47                  		ld	b,a
(1) 2392/     C11 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2393/     C14 : 87                  		add	a,a			; * 2
(1) 2394/     C15 : 3F                  		ccf
(1) 2395/     C16 : 98                  		sbc	a,b			; + MASTER vol
(1) 2396/     C17 : 87                  		add	a,a			; *2
(1) 2397/     C18 : 38 03               		jr	c,.vpcm_carry
(1) 2398/     C1A :                     .vpcm_siln:
(1) 2399/     C1A : AF                  		xor	a
(1) 2400/     C1B : 18 01               		jr	.vpcm_zero
(1) 2401/     C1D :                     .vpcm_carry:
(1) 2402/     C1D : 81                  		add	a,c
(1) 2403/     C1E :                     .vpcm_zero:
(1) 2404/     C1E : DD 77 00            		ld	(ix),a
(1) 2405/     C21 : DD 19               		add	ix,de
(1) 2406/     C23 : D1                  		pop	de
(1) 2407/     C24 : 7B                  		ld	a,e
(1) 2408/     C25 : 2F                  		cpl
(1) 2409/     C26 : DD 77 00            		ld	(ix),a
(1) 2411/     C29 : 3E 01               		ld	a,1
(1) 2412/     C2B : 32 F9 19            		ld	(mcdUpd),a
(1) 2414/     C2E : DD E1               		pop	ix
(1) 2415/     C30 : C9                  		ret
(1) 2416/     C31 :                     
(1) 2417/     C31 :                     ; --------------------------------
(1) 2418/     C31 :                     ; -1
(1) 2419/     C31 :                     .pcm_off:
(1) 2420/     C31 : CF                  		rst	8
(1) 2421/     C32 : DD 36 00 02         		ld	(ix),010b
(1) 2422/     C36 : 18 05               		jr	.pcm_setcoff
(1) 2423/     C38 :                     ; -2
(1) 2424/     C38 :                     .pcm_cut:
(1) 2425/     C38 : CF                  		rst	8
(1) 2426/     C39 : DD 36 00 04         		ld	(ix),100b
(1) 2427/     C3D :                     .pcm_setcoff:
(1) 2428/     C3D : 3E 01               		ld	a,1
(1) 2429/     C3F : 32 F9 19            		ld	(mcdUpd),a
(1) 2430/     C42 : DD E1               		pop	ix
(1) 2431/     C44 : C3 1B 10            		jp	.chnl_ulnkoff
(1) 2435/     C47 :                     
(1) 2436/     C47 :                     ; --------------------------------
(1) 2437/     C47 :                     ; PWM
(1) 2438/     C47 :                     ; --------------------------------
(1) 2439/     C47 :                     
(1) 2440/     C47 :                     .mk_pwm:
(1) 2442/     C47 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2443/     C4A : 16 00               		ld	d,0
(1) 2444/     C4C : FD 5E 03            		ld	e,(iy+ztbl_Chip)		; e - Channel ID
(1) 2445/     C4F : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2446/     C52 : DD E5               		push	ix
(1) 2447/     C54 : DD 21 3D 17         		ld	ix,pwmcom
(1) 2448/     C58 : DD 19               		add	ix,de
(1) 2449/     C5A : FE FE               		cp	-2
(1) 2450/     C5C : CA C4 0C            		jp	z,.pwm_cut
(1) 2451/     C5F : FE FF               		cp	-1
(1) 2452/     C61 : CA BD 0C            		jp	z,.pwm_off
(1) 2453/     C64 : CF                  		rst	8
(1) 2454/     C65 : 78                  		ld	a,b
(1) 2455/     C66 : CB 40               		bit	0,b			; Note?
(1) 2456/     C68 : 20 0D               		jr	nz,.pw_note
(1) 2457/     C6A : CB 58               		bit	3,b			; Effect?
(1) 2458/     C6C : 20 05               		jr	nz,.pw_effc
(1) 2459/     C6E : CB 50               		bit	2,b			; Volume?
(1) 2460/     C70 : 20 01               		jr	nz,.pw_effc
(1) 2461/     C72 : C9                  		ret
(1) 2462/     C73 :                     .pw_effc:
(1) 2463/     C73 : 1E 09               		ld	e,00001001b
(1) 2464/     C75 : 18 02               		jr	.pw_send
(1) 2465/     C77 :                     .pw_note:
(1) 2466/     C77 : 1E 01               		ld	e,00000001b	; KeyON request
(1) 2467/     C79 :                     .pw_send:
(1) 2468/     C79 : DD 73 00            		ld	(ix),e		; Set command
(1) 2469/     C7C : CD D8 0C            		call	.readfreq_pwm
(1) 2470/     C7F :                     	; hl - current freq
(1) 2471/     C7F : 79                  		ld	a,c		; Read panning bits
(1) 2472/     C80 : 2F                  		cpl			; Reverse and filter bits
(1) 2473/     C81 : E6 30               		and	00110000b
(1) 2474/     C83 : CF                  		rst	8
(1) 2475/     C84 : 5F                  		ld	e,a		; Save panning to e
(1) 2476/     C85 : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2477/     C88 : FE 40               		cp	40h
(1) 2478/     C8A : 28 09               		jr	z,.vpwm_siln
(1) 2479/     C8C : 30 07               		jr	nc,.vpwm_siln
(1) 2480/     C8E : 4F                  		ld	c,a
(1) 2481/     C8F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current volume
(1) 2482/     C92 : 91                  		sub	a,c		; + MASTER vol
(1) 2483/     C93 : 18 02               		jr	.vpwm_much
(1) 2484/     C95 :                     .vpwm_siln:
(1) 2485/     C95 : 3E C0               		ld	a,-40h
(1) 2486/     C97 :                     .vpwm_much:
(1) 2487/     C97 : ED 44               		neg	a
(1) 2488/     C99 : E6 FC               		and	11111100b
(1) 2489/     C9B : B4                  		or	h		; Merge MSB freq
(1) 2490/     C9C : 01 08 00            		ld	bc,8
(1) 2491/     C9F : DD 09               		add	ix,bc
(1) 2492/     CA1 : DD 77 00            		ld	(ix),a
(1) 2493/     CA4 : DD 09               		add	ix,bc
(1) 2494/     CA6 : DD 75 00            		ld	(ix),l
(1) 2495/     CA9 : DD 09               		add	ix,bc
(1) 2496/     CAB : CF                  		rst	8
(1) 2497/     CAC : DD 7E 00            		ld	a,(ix)
(1) 2498/     CAF : E6 CF               		and	11001111b
(1) 2499/     CB1 : B3                  		or	e		; Set panning bits
(1) 2500/     CB2 : DD 77 00            		ld	(ix),a
(1) 2502/     CB5 : 3E 01               		ld	a,1
(1) 2503/     CB7 : 32 F8 19            		ld	(marsUpd),a
(1) 2505/     CBA : DD E1               		pop	ix
(1) 2506/     CBC : C9                  		ret
(1) 2507/     CBD :                     
(1) 2508/     CBD :                     ; --------------------------------
(1) 2509/     CBD :                     ; -1
(1) 2510/     CBD :                     .pwm_off:
(1) 2511/     CBD : CF                  		rst	8
(1) 2512/     CBE : DD 36 00 02         		ld	(ix),010b
(1) 2513/     CC2 : 18 05               		jr	.pwm_setcoff
(1) 2514/     CC4 :                     ; -2
(1) 2515/     CC4 :                     .pwm_cut:
(1) 2516/     CC4 : CF                  		rst	8
(1) 2517/     CC5 : DD 36 00 04         		ld	(ix),100b
(1) 2518/     CC9 :                     .pwm_setcoff:
(1) 2519/     CC9 : 3E 01               		ld	a,1
(1) 2520/     CCB : 32 F8 19            		ld	(marsUpd),a
(1) 2521/     CCE : DD E1               		pop	ix
(1) 2522/     CD0 : C3 1B 10            		jp	.chnl_ulnkoff
(1) 2526/     CD3 :                     
(1) 2527/     CD3 :                     ; --------------------------------
(1) 2528/     CD3 :                     ; SHARED routine
(1) 2529/     CD3 :                     
(1) 2530/     CD3 :                     .readfreq_pcm:
(1) 2531/     CD3 : 21 4D 16            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2532/     CD6 : 18 03               		jr	.set_wavfreq
(1) 2533/     CD8 :                     .readfreq_pwm:
(1) 2534/     CD8 : 21 ED 15            		ld	hl,wavFreq_List-(2*36)
(1) 2535/     CDB :                     .set_wavfreq:
(1) 2536/     CDB : 16 00               		ld	d,0		; Freq index
(1) 2537/     CDD : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2538/     CE0 : 19                  		add	hl,de
(1) 2539/     CE1 : 7E                  		ld	a,(hl)
(1) 2540/     CE2 : 23                  		inc	hl
(1) 2541/     CE3 : 66                  		ld	h,(hl)
(1) 2542/     CE4 : 6F                  		ld	l,a
(1) 2543/     CE5 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2544/     CE8 : CF                  		rst	8
(1) 2545/     CE9 : AF                  		xor	a		; Clear high
(1) 2546/     CEA : 3F                  		ccf			; Clear carry
(1) 2547/     CEB : CB 23               		sla	e		; << 2
(1) 2548/     CED : CB 23               		sla	e
(1) 2549/     CEF : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2550/     CF0 : 57                  		ld	d,a
(1) 2551/     CF1 : 19                  		add	hl,de
(1) 2552/     CF2 : C9                  		ret
(1) 2553/     CF3 :                     
(1) 2554/     CF3 :                     ; ----------------------------------------
(1) 2555/     CF3 :                     ; NEW effect
(1) 2556/     CF3 :                     ; ----------------------------------------
(1) 2557/     CF3 :                     
(1) 2558/     CF3 :                     .effc:
(1) 2559/     CF3 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2560/     CF6 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2561/     CF9 : 57                  		ld	d,a
(1) 2562/     CFA : CF                  		rst	8
(1) 2563/     CFB : FE 04               		cp	4			; Effect D?
(1) 2564/     CFD : 28 0F               		jr	z,.effc_D
(1) 2565/     CFF : FE 05               		cp	5			; Effect E?
(1) 2566/     D01 : 28 4E               		jr	z,.effc_E
(1) 2567/     D03 : FE 06               		cp	6			; Effect F?
(1) 2568/     D05 : 28 5F               		jr	z,.effc_F
(1) 2569/     D07 : CF                  		rst	8
(1) 2570/     D08 : FE 18               		cp	24			; Effect X?
(1) 2571/     D0A : CA 87 0D            		jp	z,.effc_X
(1) 2572/     D0D : C9                  		ret
(1) 2573/     D0E :                     
(1) 2574/     D0E :                     ; ----------------------------------------
(1) 2575/     D0E :                     ; Effect D
(1) 2576/     D0E :                     ;
(1) 2577/     D0E :                     ; Volume slide down
(1) 2578/     D0E :                     ;
(1) 2579/     D0E :                     ; 0xh-Exh - Normal
(1) 2580/     D0E :                     ; Fxh-Fxh - Fine slide / 2
(1) 2581/     D0E :                     ; ----------------------------------------
(1) 2582/     D0E :                     
(1) 2583/     D0E :                     .effc_D:
(1) 2584/     D0E : CD 7B 0D            		call	.save_arg
(1) 2585/     D11 : 79                  		ld	a,c		; Setting == 0?
(1) 2586/     D12 : B7                  		or	a
(1) 2587/     D13 : C8                  		ret	z
(1) 2588/     D14 : E6 F0               		and	0F0h
(1) 2589/     D16 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2590/     D18 : FE F0               		cp	0F0h
(1) 2591/     D1A : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2592/     D1C : CF                  		rst	8
(1) 2593/     D1D : 79                  		ld	a,c
(1) 2594/     D1E : E6 0F               		and	00Fh
(1) 2595/     D20 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2596/     D22 : FE 0F               		cp	00Fh
(1) 2597/     D24 : 28 17               		jr	z,.fine_up	; xFh
(1) 2598/     D26 : C9                  		ret
(1) 2599/     D27 :                     ; Go down
(1) 2600/     D27 :                     .norm_down:
(1) 2601/     D27 : CB 21               		sla	c
(1) 2602/     D29 :                     .fine_down:
(1) 2603/     D29 : CB 21               		sla	c
(1) 2604/     D2B : 79                  		ld	a,c
(1) 2605/     D2C : E6 3C               		and	00111100b
(1) 2606/     D2E : 4F                  		ld	c,a
(1) 2607/     D2F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2608/     D32 : CF                  		rst	8
(1) 2609/     D33 : 91                  		sub	a,c
(1) 2610/     D34 : 1E C0               		ld	e,0C0h
(1) 2611/     D36 : BB                  		cp	e
(1) 2612/     D37 : D2 4D 0D            		jp	nc,.vol_dvld
(1) 2613/     D3A : 7B                  		ld	a,e
(1) 2614/     D3B : 18 10               		jr 	.vol_dvld
(1) 2615/     D3D :                     ; Go up
(1) 2616/     D3D :                     .fine_up:
(1) 2617/     D3D : CB 39               		srl	c
(1) 2618/     D3F :                     .norm_up:
(1) 2619/     D3F : CB 39               		srl	c
(1) 2620/     D41 : 79                  		ld	a,c
(1) 2621/     D42 : E6 3C               		and	00111100b
(1) 2622/     D44 : 4F                  		ld	c,a
(1) 2623/     D45 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2624/     D48 : CF                  		rst	8
(1) 2625/     D49 : 81                  		add	a,c
(1) 2626/     D4A : 38 01               		jr	c,.vol_dvld
(1) 2627/     D4C : AF                  		xor	a
(1) 2628/     D4D :                     .vol_dvld:
(1) 2629/     D4D : FD 77 07            		ld	(iy+ztbl_Volume),a
(1) 2630/     D50 : C9                  		ret
(1) 2631/     D51 :                     
(1) 2632/     D51 :                     ; ----------------------------------------
(1) 2633/     D51 :                     ; Effect E
(1) 2634/     D51 :                     ; ----------------------------------------
(1) 2635/     D51 :                     
(1) 2636/     D51 :                     .effc_E:
(1) 2637/     D51 : CD 7B 0D            		call	.save_arg
(1) 2638/     D54 : 79                  		ld	a,c
(1) 2639/     D55 : E6 F0               		and	0F0h
(1) 2640/     D57 : FE F0               		cp	0F0h
(1) 2641/     D59 : C8                  		ret	z
(1) 2642/     D5A : FE E0               		cp	0E0h
(1) 2643/     D5C : C8                  		ret	z
(1) 2644/     D5D : CF                  		rst	8
(1) 2645/     D5E : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2646/     D61 : 91                  		sub	a,c
(1) 2647/     D62 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2648/     D65 : C9                  		ret
(1) 2649/     D66 :                     
(1) 2650/     D66 :                     ; ----------------------------------------
(1) 2651/     D66 :                     ; Effect F
(1) 2652/     D66 :                     ; ----------------------------------------
(1) 2653/     D66 :                     
(1) 2654/     D66 :                     .effc_F:
(1) 2655/     D66 : CD 7B 0D            		call	.save_arg
(1) 2656/     D69 : 79                  		ld	a,c
(1) 2657/     D6A : E6 F0               		and	0F0h
(1) 2658/     D6C : FE F0               		cp	0F0h
(1) 2659/     D6E : C8                  		ret	z
(1) 2660/     D6F : FE E0               		cp	0E0h
(1) 2661/     D71 : C8                  		ret	z
(1) 2662/     D72 : CF                  		rst	8
(1) 2663/     D73 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2664/     D76 : 81                  		add	a,c
(1) 2665/     D77 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2666/     D7A : C9                  		ret
(1) 2667/     D7B :                     
(1) 2668/     D7B :                     ; --------------------------------
(1) 2669/     D7B :                     ; e - got arg
(1) 2670/     D7B :                     ; c - new arg
(1) 2671/     D7B :                     .save_arg:
(1) 2672/     D7B : FD 4E 08            		ld	c,(iy+ztbl_EffBuff)	; Current slide setting
(1) 2673/     D7E : 7B                  		ld	a,e			; EffArg is non-zero?
(1) 2674/     D7F : B7                  		or	a
(1) 2675/     D80 : 28 04               		jr	z,.D_cont		; 00h = slide continue
(1) 2676/     D82 : 4F                  		ld	c,a
(1) 2677/     D83 : FD 71 08            		ld	(iy+ztbl_EffBuff),c	; Store NEW slide setting
(1) 2678/     D86 :                     .D_cont:
(1) 2679/     D86 : C9                  		ret
(1) 2680/     D87 :                     
(1) 2681/     D87 :                     ; ----------------------------------------
(1) 2682/     D87 :                     ; Effect X
(1) 2683/     D87 :                     ;
(1) 2684/     D87 :                     ; Common panning values:
(1) 2685/     D87 :                     ;  00h LEFT
(1) 2686/     D87 :                     ;  80h MIDDLE
(1) 2687/     D87 :                     ; 0FFh RIGHT
(1) 2688/     D87 :                     ; ----------------------------------------
(1) 2689/     D87 :                     
(1) 2690/     D87 :                     .effc_X:
(1) 2691/     D87 : 16 00               		ld	d,0
(1) 2692/     D89 : 7E                  		ld	a,(hl)
(1) 2693/     D8A : E6 F0               		and	11110000b
(1) 2694/     D8C : FE 80               		cp	80h		; PSG?
(1) 2695/     D8E : 28 1D               		jr	z,.res_pan
(1) 2696/     D90 : FE 90               		cp	90h		; PSGN?
(1) 2697/     D92 : 28 19               		jr	z,.res_pan
(1) 2698/     D94 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2699/     D96 : CC B7 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2700/     D99 :                     
(1) 2701/     D99 :                     	; ----------------------------------------
(1) 2702/     D99 :                     	; Common panning bits: %00LR0000
(1) 2703/     D99 :                     	; (REVERSE: 0-on 1-off)
(1) 2704/     D99 : FD 36 08 00         		ld	(iy+ztbl_EffBuff),0
(1) 2705/     D9D : CF                  		rst	8
(1) 2706/     D9E : E5                  		push	hl
(1) 2707/     D9F : 21 D4 0D            		ld	hl,.comn_panlist
(1) 2708/     DA2 : 7B                  		ld	a,e
(1) 2709/     DA3 : 07                  		rlca
(1) 2710/     DA4 : 07                  		rlca
(1) 2711/     DA5 : 07                  		rlca
(1) 2712/     DA6 : E6 07               		and	0111b
(1) 2713/     DA8 :                     ; 		ld	d,0
(1) 2714/     DA8 : 5F                  		ld	e,a
(1) 2715/     DA9 : CF                  		rst	8
(1) 2716/     DAA : 19                  		add	hl,de
(1) 2717/     DAB : 56                  		ld	d,(hl)
(1) 2718/     DAC : E1                  		pop	hl
(1) 2719/     DAD :                     .res_pan:
(1) 2720/     DAD : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2721/     DB0 : E6 CF               		and	11001111b
(1) 2722/     DB2 : B2                  		or	d
(1) 2723/     DB3 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2724/     DB6 : C9                  		ret
(1) 2725/     DB7 :                     
(1) 2726/     DB7 :                     	; ----------------------------------------
(1) 2727/     DB7 :                     	; MCD panning
(1) 2728/     DB7 :                     .pan_mcd:
(1) 2729/     DB7 : E5                  		push	hl
(1) 2730/     DB8 : D5                  		push	de
(1) 2731/     DB9 : 16 00               		ld	d,0
(1) 2732/     DBB : 21 DC 0D            		ld	hl,.pcm_panlist
(1) 2733/     DBE : 7B                  		ld	a,e
(1) 2734/     DBF : E6 F8               		and	0F8h
(1) 2735/     DC1 : 0F                  		rrca
(1) 2736/     DC2 : 0F                  		rrca
(1) 2737/     DC3 : 0F                  		rrca
(1) 2738/     DC4 : 5F                  		ld	e,a
(1) 2739/     DC5 : 19                  		add	hl,de
(1) 2740/     DC6 : 7E                  		ld	a,(hl)
(1) 2741/     DC7 : 21 35 17            		ld	hl,pcmpan
(1) 2742/     DCA : 16 00               		ld	d,0
(1) 2743/     DCC : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2744/     DCF : 19                  		add	hl,de
(1) 2745/     DD0 : 77                  		ld	(hl),a
(1) 2746/     DD1 : D1                  		pop	de
(1) 2747/     DD2 : E1                  		pop	hl
(1) 2748/     DD3 : C9                  		ret
(1) 2749/     DD4 :                     
(1) 2750/     DD4 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2751/     DD4 :                     ; 00LR0000b
(1) 2752/     DD4 :                     .comn_panlist:
(1) 2753/     DD4 : 10                  		db 00010000b
(1) 2754/     DD5 : 10                  		db 00010000b
(1) 2755/     DD6 : 10                  		db 00010000b
(1) 2756/     DD7 : 00                  		db 00000000b
(1) 2757/     DD8 : 00                  		db 00000000b
(1) 2758/     DD9 : 20                  		db 00100000b
(1) 2759/     DDA : 20                  		db 00100000b
(1) 2760/     DDB : 20                  		db 00100000b
(1) 2761/     DDC :                     
(1) 2762/     DDC :                     ; REVERSE OUTPUT BITS
(1) 2763/     DDC :                     ; RRRR | LLLL
(1) 2764/     DDC :                     .pcm_panlist:
(1) 2765/     DDC : F0                  		db 0F0h	; 00h
(1) 2766/     DDD : E0                  		db 0E0h
(1) 2767/     DDE : D0                  		db 0D0h	; 10h
(1) 2768/     DDF : C0                  		db 0C0h
(1) 2769/     DE0 : B0                  		db 0B0h	; 20h
(1) 2770/     DE1 : A0                  		db 0A0h
(1) 2771/     DE2 : 90                  		db 090h	; 30h
(1) 2772/     DE3 : 80                  		db 080h
(1) 2773/     DE4 : 70                  		db 070h	; 40h
(1) 2774/     DE5 : 60                  		db 060h
(1) 2775/     DE6 : 50                  		db 050h	; 50h
(1) 2776/     DE7 : 40                  		db 040h
(1) 2777/     DE8 : 30                  		db 030h	; 60h
(1) 2778/     DE9 : 20                  		db 020h
(1) 2779/     DEA : 10                  		db 010h	; 70h
(1) 2780/     DEB : 00                  		db 000h
(1) 2781/     DEC : 00                  		db 000h ; 80h
(1) 2782/     DED : 01                  		db 001h
(1) 2783/     DEE : 02                  		db 002h ; 90h
(1) 2784/     DEF : 03                  		db 003h
(1) 2785/     DF0 : 04                  		db 004h ; A0h
(1) 2786/     DF1 : 05                  		db 005h
(1) 2787/     DF2 : 06                  		db 006h ; B0h
(1) 2788/     DF3 : 07                  		db 007h
(1) 2789/     DF4 : 08                  		db 008h ; C0h
(1) 2790/     DF5 : 09                  		db 009h
(1) 2791/     DF6 : 0A                  		db 00Ah ; D0h
(1) 2792/     DF7 : 0B                  		db 00Bh
(1) 2793/     DF8 : 0C                  		db 00Ch ; E0h
(1) 2794/     DF9 : 0D                  		db 00Dh
(1) 2795/     DFA : 0E                  		db 00Eh ; F0h
(1) 2796/     DFB : 0F                  		db 00Fh
(1) 2797/     DFC :                     
(1) 2798/     DFC :                     ; ----------------------------------------
(1) 2799/     DFC :                     ; NEW volume
(1) 2800/     DFC :                     ; ----------------------------------------
(1) 2801/     DFC :                     
(1) 2802/     DFC :                     .volu:
(1) 2803/     DFC : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2804/     DFF : D6 40               		sub	a,64
(1) 2805/     E01 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2806/     E04 : C9                  		ret
(1) 2807/     E05 :                     
(1) 2808/     E05 :                     ; ----------------------------------------
(1) 2809/     E05 :                     ; NEW instrument
(1) 2810/     E05 :                     ; ----------------------------------------
(1) 2811/     E05 :                     
(1) 2812/     E05 :                     .inst:
(1) 2813/     E05 : 7E                  		ld	a,(hl)
(1) 2814/     E06 : E6 F0               		and	11110000b
(1) 2815/     E08 : FE 80               		cp	080h
(1) 2816/     E0A : 28 24               		jr	z,.ins_psg
(1) 2817/     E0C : FE 90               		cp	090h
(1) 2818/     E0E : 28 1A               		jr	z,.ins_psgn
(1) 2819/     E10 : FE A0               		cp	0A0h
(1) 2820/     E12 : 28 52               		jr	z,.ins_fm
(1) 2821/     E14 : CF                  		rst	8
(1) 2822/     E15 : FE B0               		cp	0B0h
(1) 2823/     E17 : 28 4D               		jr	z,.ins_fm
(1) 2824/     E19 : FE C0               		cp	0C0h
(1) 2825/     E1B : CA D7 0E            		jp	z,.ins_dac
(1) 2826/     E1E : FE D0               		cp	0D0h
(1) 2827/     E20 : CA 2B 0F            		jp	z,.ins_pcm
(1) 2828/     E23 : FE E0               		cp	0E0h
(1) 2829/     E25 : CA 63 0F            		jp	z,.ins_pwm
(1) 2830/     E28 : CF                  		rst	8
(1) 2831/     E29 :                     .invl_ins:
(1) 2832/     E29 : C9                  		ret
(1) 2833/     E2A :                     
(1) 2834/     E2A :                     ; ----------------------------------------
(1) 2835/     E2A :                     ; PSG
(1) 2836/     E2A :                     
(1) 2837/     E2A :                     .ins_psgn:
(1) 2838/     E2A : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2839/     E2B : E6 07               		and	0111b
(1) 2840/     E2D : 32 EA 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2841/     E30 :                     .ins_psg:
(1) 2842/     E30 : CF                  		rst	8
(1) 2843/     E31 : DD E5               		push	ix
(1) 2844/     E33 : E5                  		push	hl
(1) 2845/     E34 : 23                  		inc	hl		; Skip ID
(1) 2846/     E35 : DD 21 75 17         		ld	ix,psgcom	; Read psg control
(1) 2847/     E39 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2848/     E3C : 16 00               		ld	d,0
(1) 2849/     E3E : DD 19               		add	ix,de
(1) 2850/     E40 : 7E                  		ld	a,(hl)
(1) 2851/     E41 : CF                  		rst	8
(1) 2852/     E42 : 23                  		inc	hl
(1) 2853/     E43 : 7E                  		ld	a,(hl)
(1) 2854/     E44 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2855/     E47 : 23                  		inc	hl
(1) 2856/     E48 : 7E                  		ld	a,(hl)
(1) 2857/     E49 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2858/     E4C : 23                  		inc	hl
(1) 2859/     E4D : 7E                  		ld	a,(hl)
(1) 2860/     E4E : CF                  		rst	8
(1) 2861/     E4F : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2862/     E52 : 23                  		inc	hl
(1) 2863/     E53 : 7E                  		ld	a,(hl)
(1) 2864/     E54 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2865/     E57 : 23                  		inc	hl
(1) 2866/     E58 : 7E                  		ld	a,(hl)
(1) 2867/     E59 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2868/     E5C : 23                  		inc	hl
(1) 2869/     E5D : 7E                  		ld	a,(hl)
(1) 2870/     E5E : CF                  		rst	8
(1) 2871/     E5F : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2872/     E62 : E1                  		pop	hl
(1) 2873/     E63 : DD E1               		pop	ix
(1) 2874/     E65 : C9                  		ret
(1) 2875/     E66 :                     
(1) 2876/     E66 :                     ; ----------------------------------------
(1) 2877/     E66 :                     ; FM/FM3
(1) 2878/     E66 :                     
(1) 2879/     E66 :                     .ins_fm:
(1) 2880/     E66 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2881/     E69 : E6 07               		and	0111b
(1) 2882/     E6B : 16 00               		ld	d,0
(1) 2883/     E6D : 87                  		add	a,a
(1) 2884/     E6E : 5F                  		ld	e,a
(1) 2885/     E6F : DD E5               		push	ix
(1) 2886/     E71 : E5                  		push	hl
(1) 2887/     E72 : C5                  		push	bc
(1) 2888/     E73 : DD 21 F2 19         		ld	ix,fmcach_list
(1) 2889/     E77 : DD 19               		add	ix,de
(1) 2890/     E79 : CF                  		rst	8
(1) 2891/     E7A : DD 5E 00            		ld	e,(ix)
(1) 2892/     E7D : DD 23               		inc	ix
(1) 2893/     E7F : DD 56 00            		ld	d,(ix)
(1) 2894/     E82 : DD 21 A1 18         		ld	ix,fmlist_rsave
(1) 2895/     E86 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2896/     E89 : 87                  		add	a,a
(1) 2897/     E8A : 87                  		add	a,a
(1) 2898/     E8B : 06 00               		ld	b,0
(1) 2899/     E8D : 4F                  		ld	c,a
(1) 2900/     E8E : DD 09               		add	ix,bc
(1) 2901/     E90 : 23                  		inc	hl			; Skip id and pitch
(1) 2902/     E91 : 23                  		inc	hl
(1) 2903/     E92 : 46                  		ld	b,(hl)
(1) 2904/     E93 : 23                  		inc	hl
(1) 2905/     E94 : 7E                  		ld	a,(hl)
(1) 2906/     E95 : 23                  		inc	hl
(1) 2907/     E96 : 6E                  		ld	l,(hl)
(1) 2908/     E97 : 67                  		ld	h,a
(1) 2909/     E98 :                     	;   ix - last MID and LOW bytes
(1) 2910/     E98 :                     	;   de - current FM cache
(1) 2911/     E98 :                     	; b,hl - 24-bit ROM address
(1) 2912/     E98 : DD 7E 01            		ld	a,(ix+1)
(1) 2913/     E9B : BC                  		cp	h
(1) 2914/     E9C : 20 07               		jr	nz,.new_romdat
(1) 2915/     E9E : CF                  		rst	8
(1) 2916/     E9F : DD 7E 00            		ld	a,(ix)
(1) 2917/     EA2 : BD                  		cp	l
(1) 2918/     EA3 : 28 2D               		jr	z,.same_patch
(1) 2919/     EA5 :                     .new_romdat:
(1) 2920/     EA5 : DD 74 01            		ld	(ix+1),h
(1) 2921/     EA8 : DD 75 00            		ld	(ix),l
(1) 2922/     EAB : 78                  		ld	a,b
(1) 2923/     EAC : 01 28 00            		ld	bc,28h			; <- size
(1) 2924/     EAF : D5                  		push	de
(1) 2925/     EB0 : CD 0D 12            		call	transferRom		; *** ROM ACCESS ***
(1) 2926/     EB3 : E1                  		pop	hl
(1) 2927/     EB4 : E7                  		rst	20h
(1) 2928/     EB5 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2929/     EB8 :                     	; hl - fmcach intrument
(1) 2930/     EB8 :                     	; de - FM reg and data: 3000h
(1) 2931/     EB8 :                     	;  c - FM keyChannel
(1) 2932/     EB8 : 79                  		ld	a,c
(1) 2933/     EB9 : E6 03               		and	011b
(1) 2934/     EBB : F6 30               		or	30h			; Start at reg 30h
(1) 2935/     EBD : 57                  		ld	d,a
(1) 2936/     EBE : 1E 00               		ld	e,0
(1) 2937/     EC0 : CF                  		rst	8
(1) 2938/     EC1 : 06 1C               		ld	b,7*4			; Write ALL base FM registers
(1) 2939/     EC3 :                     .fm_setrlist:
(1) 2940/     EC3 : 5E                  		ld	e,(hl)
(1) 2941/     EC4 : 23                  		inc	hl
(1) 2942/     EC5 : CD 2D 14            		call	fm_autoreg
(1) 2943/     EC8 : 00                  		nop
(1) 2944/     EC9 : 00                  		nop
(1) 2945/     ECA : CF                  		rst	8
(1) 2946/     ECB : 00                  		nop
(1) 2947/     ECC : 14                  		inc	d		; +4
(1) 2948/     ECD : 14                  		inc	d
(1) 2949/     ECE : 14                  		inc	d
(1) 2950/     ECF : 14                  		inc	d
(1) 2951/     ED0 : 10 F1               		djnz	.fm_setrlist
(1) 2952/     ED2 :                     .same_patch:
(1) 2953/     ED2 : C1                  		pop	bc
(1) 2954/     ED3 : E1                  		pop	hl
(1) 2955/     ED4 : DD E1               		pop	ix
(1) 2956/     ED6 : C9                  		ret
(1) 2957/     ED7 :                     
(1) 2958/     ED7 :                     ; ----------------------------------------
(1) 2959/     ED7 :                     
(1) 2960/     ED7 :                     .ins_dac:
(1) 2961/     ED7 : E5                  		push	hl
(1) 2962/     ED8 : C5                  		push	bc
(1) 2963/     ED9 : CD 5C 14            		call	dac_off
(1) 2964/     EDC : 7E                  		ld	a,(hl)
(1) 2965/     EDD : E6 0F               		and	00001111b
(1) 2966/     EDF : 32 06 1D            		ld	(wave_Flags),a
(1) 2967/     EE2 : CF                  		rst	8
(1) 2968/     EE3 : 23                  		inc	hl
(1) 2969/     EE4 : 23                  		inc	hl
(1) 2970/     EE5 : 5E                  		ld	e,(hl)
(1) 2971/     EE6 : 23                  		inc	hl
(1) 2972/     EE7 : 7E                  		ld	a,(hl)
(1) 2973/     EE8 : 23                  		inc	hl
(1) 2974/     EE9 : 6E                  		ld	l,(hl)
(1) 2975/     EEA : 67                  		ld	h,a
(1) 2976/     EEB : E5                  		push	hl
(1) 2977/     EEC : 7B                  		ld	a,e
(1) 2978/     EED : 01 06 00            		ld	bc,6		; Skip head
(1) 2979/     EF0 : 09                  		add	hl,bc
(1) 2980/     EF1 : CE 00               		adc	a,0
(1) 2981/     EF3 : 22 FB 1C            		ld	(wave_Start),hl	; Set START point
(1) 2982/     EF6 : 32 FD 1C            		ld	(wave_Start+2),a
(1) 2983/     EF9 : E1                  		pop	hl
(1) 2984/     EFA : 7B                  		ld	a,e
(1) 2985/     EFB : 11 60 1F            		ld	de,sampleHead
(1) 2986/     EFE : 01 06 00            		ld	bc,6
(1) 2987/     F01 : D5                  		push	de
(1) 2988/     F02 : CF                  		rst	8
(1) 2989/     F03 : CD 0D 12            		call	transferRom	; *** ROM ACCESS ***
(1) 2990/     F06 : E1                  		pop	hl
(1) 2991/     F07 :                     	; hl - temporal header
(1) 2992/     F07 : 5E                  		ld	e,(hl)
(1) 2993/     F08 : 23                  		inc	hl
(1) 2994/     F09 : 56                  		ld	d,(hl)
(1) 2995/     F0A : 23                  		inc	hl
(1) 2996/     F0B : 7E                  		ld	a,(hl)
(1) 2997/     F0C : 23                  		inc	hl
(1) 2998/     F0D : ED 53 FE 1C         		ld	(wave_Len),de	; LEN
(1) 2999/     F11 : 32 00 1D            		ld	(wave_Len+2),a
(1) 3000/     F14 : 5E                  		ld	e,(hl)
(1) 3001/     F15 : 23                  		inc	hl
(1) 3002/     F16 : CF                  		rst	8
(1) 3003/     F17 : 56                  		ld	d,(hl)
(1) 3004/     F18 : 23                  		inc	hl
(1) 3005/     F19 : 7E                  		ld	a,(hl)
(1) 3006/     F1A : 23                  		inc	hl
(1) 3007/     F1B : ED 53 01 1D         		ld	(wave_Loop),de	; LOOP
(1) 3008/     F1F : 32 03 1D            		ld	(wave_Loop+2),a
(1) 3009/     F22 : 11 06 28            		ld	de,2806h	; keys off
(1) 3010/     F25 : CD 31 14            		call	fm_send_1
(1) 3011/     F28 : C1                  		pop	bc
(1) 3012/     F29 : E1                  		pop	hl
(1) 3013/     F2A :                     ; .same_dac:
(1) 3014/     F2A : C9                  		ret
(1) 3015/     F2B :                     
(1) 3016/     F2B :                     ; ----------------------------------------
(1) 3017/     F2B :                     
(1) 3018/     F2B :                     .ins_pcm:
(1) 3019/     F2B : DD E5               		push	ix
(1) 3020/     F2D : E5                  		push	hl
(1) 3021/     F2E : C5                  		push	bc
(1) 3022/     F2F : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3023/     F30 : E6 01               		and	00000001b	; Read loop bit
(1) 3024/     F32 : 0F                  		rrca			; Move to MSB
(1) 3025/     F33 : CF                  		rst	8
(1) 3026/     F34 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3027/     F35 : 23                  		inc	hl
(1) 3028/     F36 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3029/     F37 : B3                  		or	e
(1) 3030/     F38 : 5F                  		ld	e,a
(1) 3031/     F39 : 23                  		inc	hl
(1) 3032/     F3A : 7E                  		ld	a,(hl)
(1) 3033/     F3B : 23                  		inc	hl
(1) 3034/     F3C : 6E                  		ld	l,(hl)
(1) 3035/     F3D : 67                  		ld	h,a
(1) 3036/     F3E :                     	; d    - Loop enable bit
(1) 3037/     F3E :                     	; e,hl - 24-bit pointer + loop bit
(1) 3038/     F3E : DD 21 F5 16         		ld	ix,pcmcom
(1) 3039/     F42 : 06 00               		ld	b,0
(1) 3040/     F44 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3041/     F47 : DD 09               		add	ix,bc
(1) 3042/     F49 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3043/     F4C : DD 09               		add	ix,bc
(1) 3044/     F4E : 01 08 00            		ld	bc,8
(1) 3045/     F51 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3046/     F54 : DD 09               		add	ix,bc
(1) 3047/     F56 : DD 74 00            		ld	(ix),h
(1) 3048/     F59 : DD 09               		add	ix,bc
(1) 3049/     F5B : DD 75 00            		ld	(ix),l
(1) 3050/     F5E : C1                  		pop	bc
(1) 3051/     F5F : E1                  		pop	hl
(1) 3052/     F60 : DD E1               		pop	ix
(1) 3053/     F62 : C9                  		ret
(1) 3054/     F63 :                     
(1) 3055/     F63 :                     ; ----------------------------------------
(1) 3056/     F63 :                     
(1) 3057/     F63 :                     .ins_pwm:
(1) 3058/     F63 : DD E5               		push	ix
(1) 3059/     F65 : E5                  		push	hl
(1) 3060/     F66 : C5                  		push	bc
(1) 3061/     F67 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3062/     F68 : E6 03               		and	00000011b
(1) 3063/     F6A : 0F                  		rrca
(1) 3064/     F6B : 0F                  		rrca
(1) 3065/     F6C : 4F                  		ld	c,a
(1) 3066/     F6D : CF                  		rst	8
(1) 3067/     F6E : 23                  		inc	hl		; Skip ID and Pitch
(1) 3068/     F6F : 23                  		inc	hl
(1) 3069/     F70 : 56                  		ld	d,(hl)
(1) 3070/     F71 : 23                  		inc	hl
(1) 3071/     F72 : 5E                  		ld	e,(hl)
(1) 3072/     F73 : 23                  		inc	hl
(1) 3073/     F74 : 7E                  		ld	a,(hl)
(1) 3074/     F75 : 23                  		inc	hl
(1) 3075/     F76 : 6E                  		ld	l,(hl)
(1) 3076/     F77 : 67                  		ld	h,a
(1) 3077/     F78 : 79                  		ld	a,c
(1) 3078/     F79 : B2                  		or	d
(1) 3079/     F7A : 57                  		ld	d,a
(1) 3080/     F7B : CF                  		rst	8
(1) 3081/     F7C :                     	; de,hl - 32-bit PWM pointer
(1) 3082/     F7C : DD 21 3D 17         		ld	ix,pwmcom
(1) 3083/     F80 : 06 00               		ld	b,0
(1) 3084/     F82 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3085/     F85 : DD 09               		add	ix,bc
(1) 3086/     F87 : 01 18 00            		ld	bc,24
(1) 3087/     F8A : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3088/     F8C : 01 08 00            		ld	bc,8
(1) 3089/     F8F : DD 72 00            		ld	(ix),d
(1) 3090/     F92 : DD 09               		add	ix,bc
(1) 3091/     F94 : DD 73 00            		ld	(ix),e
(1) 3092/     F97 : DD 09               		add	ix,bc
(1) 3093/     F99 : DD 74 00            		ld	(ix),h
(1) 3094/     F9C : DD 09               		add	ix,bc
(1) 3095/     F9E : DD 75 00            		ld	(ix),l
(1) 3096/     FA1 : C1                  		pop	bc
(1) 3097/     FA2 : E1                  		pop	hl
(1) 3098/     FA3 : DD E1               		pop	ix
(1) 3099/     FA5 : C9                  		ret
(1) 3100/     FA6 :                     
(1) 3101/     FA6 :                     ; ----------------------------------------
(1) 3102/     FA6 :                     ; NEW note
(1) 3103/     FA6 :                     ; ----------------------------------------
(1) 3104/     FA6 :                     
(1) 3105/     FA6 :                     .note:
(1) 3106/     FA6 : 78                  		ld	a,b		; Volume bit?
(1) 3107/     FA7 : E6 04               		and	0100b
(1) 3108/     FA9 : 20 05               		jr	nz,.fm_hasvol
(1) 3109/     FAB : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3110/     FAF : CF                  		rst	8
(1) 3111/     FB0 :                     .fm_hasvol:
(1) 3112/     FB0 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3113/     FB3 : 4F                  		ld	c,a
(1) 3114/     FB4 : FE FF               		cp	-1
(1) 3115/     FB6 : C8                  		ret	z
(1) 3116/     FB7 : FE FE               		cp	-2
(1) 3117/     FB9 : C8                  		ret	z
(1) 3118/     FBA : E7                  		rst	20h
(1) 3119/     FBB : 7E                  		ld	a,(hl)
(1) 3120/     FBC : E6 F0               		and	11110000b
(1) 3121/     FBE : FE 80               		cp	80h
(1) 3122/     FC0 : 28 16               		jr	z,.n_indx
(1) 3123/     FC2 : CF                  		rst	8
(1) 3124/     FC3 : FE 90               		cp	90h
(1) 3125/     FC5 : 28 20               		jr	z,.n_psgn
(1) 3126/     FC7 : FE A0               		cp	0A0h
(1) 3127/     FC9 : 28 21               		jr	z,.n_fm
(1) 3128/     FCB :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3129/     FCB :                     ; 		jr	z,.n_fm
(1) 3130/     FCB : FE C0               		cp	0C0h
(1) 3131/     FCD : 28 09               		jr	z,.n_indx
(1) 3132/     FCF : FE D0               		cp	0D0h
(1) 3133/     FD1 : 28 05               		jr	z,.n_indx
(1) 3134/     FD3 : FE E0               		cp	0E0h
(1) 3135/     FD5 : 28 01               		jr	z,.n_indx
(1) 3136/     FD7 : C9                  		ret
(1) 3137/     FD8 :                     
(1) 3138/     FD8 :                     ; --------------------------------
(1) 3139/     FD8 :                     
(1) 3140/     FD8 :                     .n_indx:
(1) 3141/     FD8 : 79                  		ld	a,c
(1) 3142/     FD9 :                     .n_stfreq:
(1) 3143/     FD9 : 23                  		inc	hl			; Skip ID
(1) 3144/     FDA : 5E                  		ld	e,(hl)			; Read pitch
(1) 3145/     FDB : 2B                  		dec	hl
(1) 3146/     FDC : 83                  		add	a,e			; Note + pitch
(1) 3147/     FDD : CF                  		rst	8
(1) 3148/     FDE : 87                  		add	a,a			; * 2
(1) 3149/     FDF : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3150/     FE2 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0	; reset pitchbend
(1) 3151/     FE6 : C9                  		ret
(1) 3152/     FE7 :                     .n_psgn:
(1) 3153/     FE7 : 79                  		ld	a,c
(1) 3154/     FE8 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3155/     FEA : 18 ED               		jr	.n_stfreq
(1) 3156/     FEC :                     
(1) 3157/     FEC :                     ; FM freqs
(1) 3158/     FEC :                     .n_fm:
(1) 3159/     FEC : 79                  		ld	a,c
(1) 3160/     FED : 23                  		inc	hl		; Skip ID
(1) 3161/     FEE : 5E                  		ld	e,(hl)		; Read pitch
(1) 3162/     FEF : 2B                  		dec	hl
(1) 3163/     FF0 : CF                  		rst	8
(1) 3164/     FF1 : 83                  		add	a,e		; Note + pitch
(1) 3165/     FF2 :                     	; Search for octave and note...
(1) 3166/     FF2 : 0E 00               		ld	c,0		; c - octave
(1) 3167/     FF4 : 16 07               		ld	d,7
(1) 3168/     FF6 :                     .get_oct:
(1) 3169/     FF6 : 5F                  		ld	e,a		; e - note
(1) 3170/     FF7 : D6 0C               		sub	12
(1) 3171/     FF9 : FA 00 10            		jp	m,.fnd_oct
(1) 3172/     FFC : 0C                  		inc	c
(1) 3173/     FFD : 15                  		dec	d
(1) 3174/     FFE : 20 F6               		jr	nz,.get_oct
(1) 3175/    1000 :                     .fnd_oct:
(1) 3176/    1000 : CF                  		rst	8
(1) 3177/    1001 : 7B                  		ld	a,e
(1) 3178/    1002 : 87                  		add	a,a		; Note * 2
(1) 3179/    1003 : E6 1F               		and	00011111b
(1) 3180/    1005 : CB 09               		rrc	c
(1) 3181/    1007 : CB 09               		rrc	c
(1) 3182/    1009 : CB 09               		rrc	c
(1) 3183/    100B : CF                  		rst	8
(1) 3184/    100C : B1                  		or	c
(1) 3185/    100D : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3186/    1010 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 3187/    1014 : C9                  		ret
(1) 3188/    1015 :                     
(1) 3189/    1015 :                     ; ----------------------------------------
(1) 3190/    1015 :                     
(1) 3191/    1015 :                     .chnl_ulnkcut:
(1) 3192/    1015 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3193/    1018 : C3 1B 10            		jp	.chnl_ulnk
(1) 3194/    101B :                     .chnl_ulnkoff:
(1) 3195/    101B :                     ; 		ld	c,0
(1) 3196/    101B :                     
(1) 3197/    101B :                     .chnl_ulnk:
(1) 3198/    101B : AF                  		xor	a
(1) 3199/    101C : CF                  		rst	8
(1) 3200/    101D : FD 77 00            		ld	(iy),a				; Delete link, chip and prio
(1) 3201/    1020 : FD 77 01            		ld	(iy+1),a
(1) 3202/    1023 : FD 77 02            		ld	(iy+2),a
(1) 3203/    1026 : FD E5               		push	iy
(1) 3204/    1028 : E1                  		pop	hl
(1) 3205/    1029 : 23                  		inc	hl
(1) 3206/    102A : 23                  		inc	hl
(1) 3207/    102B : 23                  		inc	hl
(1) 3208/    102C : 18 08               		jr	tblz_clear_e
(1) 3209/    102E :                     
(1) 3210/    102E :                     ; ----------------------------------------
(1) 3211/    102E :                     ; Reset all table
(1) 3212/    102E :                     ;
(1) 3213/    102E :                     ; hl - Current channel table
(1) 3214/    102E :                     ; d - Silence chip
(1) 3215/    102E :                     ;
(1) 3216/    102E :                     ; Uses:
(1) 3217/    102E :                     ; b
(1) 3218/    102E :                     ; ----------------------------------------
(1) 3219/    102E :                     
(1) 3220/    102E :                     tblz_clear:
(1) 3221/    102E : CF                  		rst	8
(1) 3222/    102F : 36 00               		ld	(hl),0			; Delete link
(1) 3223/    1031 : 23                  		inc	hl
(1) 3224/    1032 : 36 00               		ld	(hl),0
(1) 3225/    1034 : 23                  		inc	hl
(1) 3226/    1035 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3227/    1036 :                     tblz_clear_e:
(1) 3228/    1036 : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 3229/    1039 : CF                  		rst	8
(1) 3230/    103A : 09                  		add	hl,bc
(1) 3231/    103B : 06 04               		ld	b,8/2
(1) 3232/    103D :                     .clrfull:
(1) 3233/    103D : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 3234/    103F : 23                  		inc	hl
(1) 3235/    1040 : 36 00               		ld	(hl),0
(1) 3236/    1042 : 23                  		inc	hl
(1) 3237/    1043 : CF                  		rst	8
(1) 3238/    1044 : 10 F7               		djnz	.clrfull
(1) 3239/    1046 : C9                  		ret
(1) 3240/    1047 :                     
(1) 3241/    1047 :                     ; ============================================================
(1) 3242/    1047 :                     ; --------------------------------------------------------
(1) 3243/    1047 :                     ; Communication with the SCD and 32X
(1) 3244/    1047 :                     ;
(1) 3245/    1047 :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3246/    1047 :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3247/    1047 :                     ;
(1) 3248/    1047 :                     ; *Originally meant for waiting VBlank, that's
(1) 3249/    1047 :                     ; the only one available for sending the table
(1) 3250/    1047 :                     ; --------------------------------------------------------
(1) 3251/    1047 :                     
(1) 3252/    1047 :                     ; NOTE: careful modifing this
(1) 3253/    1047 :                     
(1) 3254/    1047 :                     zmars_send:
(1) 3255/    1047 :                     	; ----------------------------------------
(1) 3256/    1047 :                     	; Send PCM table
(1) 3258/    1047 : 3A 36 00            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3259/    104A : B7                  		or	a
(1) 3260/    104B : C2 C6 10            		jp	nz,.mcdt_blocked
(1) 3261/    104E : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3262/    1052 : 3A F9 19            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3263/    1055 : B7                  		or	a
(1) 3264/    1056 : CA D0 10            		jp	z,.mcdt_noupd
(1) 3265/    1059 : AF                  		xor	a
(1) 3266/    105A : 32 F9 19            		ld	(mcdUpd),a
(1) 3267/    105D : E7                  		rst	20h
(1) 3268/    105E : CD 69 11            		call	.set_combank
(1) 3269/    1061 : DD 21 F5 16         		ld	ix,pcmcom
(1) 3270/    1065 : 21 00 A0            		ld	hl,8000h|2000h
(1) 3271/    1068 :                     .wait_in:
(1) 3272/    1068 : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3273/    106B : B7                  		or	a
(1) 3274/    106C : FA 68 10            		jp	m,.wait_in
(1) 3275/    106F : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3276/    1072 : B7                  		or	a		; != 0
(1) 3277/    1073 : 20 F3               		jr	nz,.wait_in
(1) 3278/    1075 : 0E C0               		ld	c,0C0h
(1) 3279/    1077 : FD 71 00            		ld	(iy),c		; Set our entrance ID
(1) 3280/    107A : 06 10               		ld	b,16
(1) 3281/    107C :                     .make_sure:
(1) 3282/    107C : FD 7E 00            		ld	a,(iy)		; Check if did write
(1) 3283/    107F : B9                  		cp	c
(1) 3284/    1080 : 20 E6               		jr	nz,.wait_in
(1) 3285/    1082 : 10 F8               		djnz	.make_sure
(1) 3286/    1084 : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3287/    1086 : CF                  		rst	8
(1) 3288/    1087 :                     .test_sub:
(1) 3289/    1087 : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3290/    108A : E6 C0               		and	0C0h
(1) 3291/    108C : FE C0               		cp	0C0h
(1) 3292/    108E : 20 F7               		jr	nz,.test_sub
(1) 3293/    1090 : FD CB 00 EE         		set	5,(iy)		; "MAIN" lock
(1) 3294/    1094 : CF                  		rst	8
(1) 3295/    1095 : 11 18 00            		ld	de,10h+8	; ix - MAIN comm ports
(1) 3296/    1098 : 19                  		add	hl,de		; starting at 8
(1) 3297/    1099 :                     	; ix - table
(1) 3298/    1099 :                     	; hl - main data
(1) 3299/    1099 : 0E 08               		ld	c,40h/8		; c - Packets to send
(1) 3300/    109B :                     .mcd_nextp:
(1) 3301/    109B : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3302/    109F : 20 FA               		jr	nz,.mcd_nextp
(1) 3303/    10A1 : 06 08               		ld	b,8		; 2words to write
(1) 3304/    10A3 : E5                  		push	hl
(1) 3305/    10A4 :                     .copy_bytes:
(1) 3306/    10A4 : DD 7E 00            		ld	a,(ix)
(1) 3307/    10A7 : 77                  		ld	(hl),a
(1) 3308/    10A8 : DD 23               		inc	ix
(1) 3309/    10AA : 23                  		inc	hl
(1) 3310/    10AB : 10 F7               		djnz	.copy_bytes
(1) 3311/    10AD : E1                  		pop	hl
(1) 3312/    10AE : FD CB 00 E6         		set	4,(iy)		; PASS bit
(1) 3313/    10B2 : CF                  		rst	8
(1) 3314/    10B3 :                     .wait_sub:
(1) 3315/    10B3 : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3316/    10B7 : 28 FA               		jr	z,.wait_sub
(1) 3317/    10B9 : FD CB 00 A6         		res	4,(iy)		; Clear PASS bit
(1) 3318/    10BD : CF                  		rst	8
(1) 3319/    10BE : 0D                  		dec	c
(1) 3320/    10BF : 20 DA               		jr	nz,.mcd_nextp
(1) 3321/    10C1 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3322/    10C5 : CF                  		rst	8
(1) 3323/    10C6 :                     .mcdt_blocked:
(1) 3324/    10C6 : 21 F5 16            		ld	hl,pcmcom
(1) 3325/    10C9 : AF                  		xor	a
(1) 3326/    10CA : 06 08               		ld	b,8		; MAX PCM channels
(1) 3327/    10CC :                     .clr_pcm:
(1) 3328/    10CC : 77                  		ld	(hl),a
(1) 3329/    10CD : 23                  		inc	hl
(1) 3330/    10CE : 10 FC               		djnz	.clr_pcm
(1) 3331/    10D0 :                     .mcdt_noupd:
(1) 3340/    10D0 :                     	; ----------------------------------------
(1) 3341/    10D0 :                     	; Send PWM table
(1) 3343/    10D0 : 3A 37 00            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 3344/    10D3 : B7                  		or	a
(1) 3345/    10D4 : C2 50 11            		jp	nz,.blocked_m
(1) 3346/    10D7 : CF                  		rst	8
(1) 3347/    10D8 : 00                  		nop
(1) 3348/    10D9 : 00                  		nop
(1) 3349/    10DA : 00                  		nop
(1) 3350/    10DB : 3A F8 19            		ld	a,(marsUpd)	; NEW transfer?
(1) 3351/    10DE : B7                  		or	a
(1) 3352/    10DF : 28 79               		jr	z,.pwm_exit
(1) 3353/    10E1 : AF                  		xor	a
(1) 3354/    10E2 : 32 F8 19            		ld	(marsUpd),a
(1) 3355/    10E5 : E7                  		rst	20h
(1) 3356/    10E6 : CD 69 11            		call	.set_combank
(1) 3357/    10E9 : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg
(1) 3358/    10ED : DD 21 3D 17         		ld	ix,pwmcom
(1) 3359/    10F1 :                     .wait_enter:
(1) 3360/    10F1 : 00                  		nop
(1) 3361/    10F2 : 00                  		nop
(1) 3362/    10F3 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 3363/    10F6 : CB 7F               		bit	7,a
(1) 3364/    10F8 : 20 F7               		jr	nz,.wait_enter
(1) 3365/    10FA : E6 F0               		and	11110000b
(1) 3366/    10FC : F6 01               		or	1		; Set CMD task mode $01
(1) 3367/    10FE : FD 77 2E            		ld	(iy+comm14),a
(1) 3368/    1101 : CF                  		rst	8
(1) 3369/    1102 : E6 0F               		and	00001111b	; Did it write?
(1) 3370/    1104 : FE 01               		cp	1
(1) 3371/    1106 : 20 E9               		jr	nz,.wait_enter	; If not, retry
(1) 3372/    1108 : FD CB 2E FE         		set	7,(iy+comm14)	; LOCK bit
(1) 3373/    110C : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 3374/    1110 : 00                  		nop	; ** wave sync AND wait using nops
(1) 3375/    1111 : 00                  		nop
(1) 3376/    1112 : 00                  		nop
(1) 3377/    1113 : 00                  		nop
(1) 3378/    1114 : 00                  		nop
(1) 3379/    1115 : CF                  		rst	8
(1) 3380/    1116 : 00                  		nop
(1) 3381/    1117 : 00                  		nop
(1) 3382/    1118 : 00                  		nop
(1) 3383/    1119 : 00                  		nop
(1) 3384/    111A : 00                  		nop
(1) 3385/    111B :                     ; .wait_cmd:
(1) 3386/    111B :                     ; 		bit	1,(iy+standby)	; <-- unstable on HW
(1) 3387/    111B :                     ; 		jr	nz,.wait_cmd
(1) 3388/    111B : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 3389/    111D :                     .next_packet:
(1) 3390/    111D : CF                  		rst	8
(1) 3391/    111E : FD E5               		push	iy
(1) 3392/    1120 : E1                  		pop	hl
(1) 3393/    1121 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 3394/    1124 : 19                  		add	hl,de
(1) 3395/    1125 : 06 02               		ld	b,2
(1) 3396/    1127 : CF                  		rst	8
(1) 3397/    1128 :                     .next_comm:
(1) 3398/    1128 : DD 56 00            		ld	d,(ix)
(1) 3399/    112B : DD 5E 01            		ld	e,(ix+1)
(1) 3400/    112E : DD 23               		inc	ix
(1) 3401/    1130 : DD 23               		inc	ix
(1) 3402/    1132 : CF                  		rst	8
(1) 3403/    1133 : 72                  		ld	(hl),d
(1) 3404/    1134 : 23                  		inc	hl
(1) 3405/    1135 : 73                  		ld	(hl),e
(1) 3406/    1136 : 23                  		inc	hl
(1) 3407/    1137 : 10 EF               		djnz	.next_comm
(1) 3408/    1139 : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 3409/    113D : CF                  		rst	8
(1) 3410/    113E :                     .w_pass2:
(1) 3411/    113E : 00                  		nop
(1) 3412/    113F : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 3413/    1143 : 20 F9               		jr	nz,.w_pass2
(1) 3414/    1145 : 0D                  		dec	c
(1) 3415/    1146 : 20 D5               		jr	nz,.next_packet
(1) 3416/    1148 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 3417/    114C : FD CB 2E B6         		res	6,(iy+comm14)	; Clear PASS
(1) 3418/    1150 :                     ; Reset comm ports
(1) 3419/    1150 :                     .blocked_m:
(1) 3420/    1150 : AF                  		xor	a
(1) 3421/    1151 : 21 3D 17            		ld	hl,pwmcom
(1) 3422/    1154 : 06 08               		ld	b,8
(1) 3423/    1156 :                     .clr_pwm:
(1) 3424/    1156 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 3425/    1157 : 23                  		inc	hl
(1) 3426/    1158 : 10 FC               		djnz	.clr_pwm
(1) 3427/    115A :                     .pwm_exit:
(1) 3429/    115A : CF                  		rst	8
(1) 3430/    115B : 06 05               		ld	b,5		; ** wave sync for MARSCD only
(1) 3431/    115D : 10 FE               		djnz	$
(1) 3432/    115F : 00                  		nop
(1) 3433/    1160 : 00                  		nop
(1) 3435/    1161 :                     
(1) 3437/    1161 : CF                  		rst	8
(1) 3438/    1162 : 06 03               		ld	b,3
(1) 3439/    1164 : 10 FE               		djnz	$
(1) 3440/    1166 : 00                  		nop
(1) 3441/    1167 : 00                  		nop
(1) 3444/    1168 : C9                  		ret
(1) 3445/    1169 :                     
(1) 3446/    1169 :                     ; --------------------------------------------------------
(1) 3447/    1169 :                     ; Set bank to $A10000 area
(1) 3449/    1169 :                     .set_combank:
(1) 3450/    1169 : 21 00 60            		ld	hl,6000h
(1) 3451/    116C : 36 00               		ld	(hl),0
(1) 3452/    116E : 36 01               		ld	(hl),1
(1) 3453/    1170 : 36 00               		ld	(hl),0
(1) 3454/    1172 : 36 00               		ld	(hl),0
(1) 3455/    1174 : CF                  		rst	8
(1) 3456/    1175 : 36 00               		ld	(hl),0
(1) 3457/    1177 : 36 00               		ld	(hl),0
(1) 3458/    1179 : 36 01               		ld	(hl),1
(1) 3459/    117B : 36 00               		ld	(hl),0
(1) 3460/    117D : 36 01               		ld	(hl),1
(1) 3461/    117F : C9                  		ret
(1) 3463/    1180 :                     
(1) 3464/    1180 :                     ; ====================================================================
(1) 3465/    1180 :                     ; ----------------------------------------------------------------
(1) 3466/    1180 :                     ; Subroutines
(1) 3467/    1180 :                     ; ----------------------------------------------------------------
(1) 3468/    1180 :                     
(1) 3469/    1180 :                     ; --------------------------------------------------------
(1) 3470/    1180 :                     ; Init sound engine
(1) 3471/    1180 :                     ; --------------------------------------------------------
(1) 3472/    1180 :                     
(1) 3473/    1180 :                     gema_init:
(1) 3474/    1180 : CD 6B 15            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3475/    1183 : CD 5C 14            		call	dac_off
(1) 3476/    1186 : AF                  		xor	a
(1) 3477/    1187 :                     ; 		ld	(marsUpd),a
(1) 3478/    1187 :                     ; 		ld	(mcdUpd),a
(1) 3479/    1187 : 32 30 00            		ld	(cdRamLen),a
(1) 3480/    118A : FD 21 00 1A         		ld	iy,nikona_BuffList
(1) 3481/    118E : 0E 01               		ld	c,1			; Start at this priority
(1) 3482/    1190 :                     .setup_list:
(1) 3483/    1190 : FD 7E 00            		ld	a,(iy)
(1) 3484/    1193 : FE FF               		cp	-1
(1) 3485/    1195 : 28 24               		jr	z,.end_setup
(1) 3486/    1197 : FD 23               		inc	iy
(1) 3487/    1199 : 6F                  		ld	l,a
(1) 3488/    119A : FD 66 00            		ld	h,(iy)
(1) 3489/    119D : E5                  		push	hl
(1) 3490/    119E : DD E1               		pop	ix
(1) 3491/    11A0 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3492/    11A3 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3493/    11A7 : FD 23               		inc	iy
(1) 3494/    11A9 :                     	; iy - src
(1) 3495/    11A9 :                     	; hl - dst
(1) 3496/    11A9 : 11 04 00            		ld	de,trk_Blocks
(1) 3497/    11AC : 19                  		add	hl,de
(1) 3498/    11AD : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3499/    11AF :                     .st_copy:
(1) 3500/    11AF : FD 7E 00            		ld	a,(iy)
(1) 3501/    11B2 : 77                  		ld	(hl),a
(1) 3502/    11B3 : FD 23               		inc	iy
(1) 3503/    11B5 : 23                  		inc	hl
(1) 3504/    11B6 : 10 F7               		djnz	.st_copy
(1) 3505/    11B8 : 0C                  		inc	c
(1) 3506/    11B9 : 18 D5               		jr	.setup_list
(1) 3507/    11BB :                     .end_setup:
(1) 3508/    11BB :                     
(1) 3509/    11BB : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3510/    11BE : CD 31 14            		call	fm_send_1
(1) 3511/    11C1 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3512/    11C4 : CD 31 14            		call	fm_send_1
(1) 3513/    11C7 :                     ; 		ld	de,2800h
(1) 3514/    11C7 : 14                  		inc	d		; FM KEYS off
(1) 3515/    11C8 : CD 31 14            		call	fm_send_1
(1) 3516/    11CB : 1C                  		inc	e
(1) 3517/    11CC : CD 31 14            		call	fm_send_1
(1) 3518/    11CF : 1C                  		inc	e
(1) 3519/    11D0 : CD 31 14            		call	fm_send_1
(1) 3520/    11D3 : 1C                  		inc	e
(1) 3521/    11D4 : 1C                  		inc	e
(1) 3522/    11D5 : CD 31 14            		call	fm_send_1
(1) 3523/    11D8 : 1C                  		inc	e
(1) 3524/    11D9 : CD 31 14            		call	fm_send_1
(1) 3525/    11DC : 1C                  		inc	e
(1) 3526/    11DD : CD 31 14            		call	fm_send_1
(1) 3527/    11E0 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3528/    11E3 : 36 9F               		ld	(hl),09Fh
(1) 3529/    11E5 : 36 BF               		ld	(hl),0BFh
(1) 3530/    11E7 : 36 DF               		ld	(hl),0DFh
(1) 3531/    11E9 : 36 FF               		ld	(hl),0FFh
(1) 3532/    11EB : C9                  		ret
(1) 3533/    11EC :                     
(1) 3534/    11EC :                     ; --------------------------------------------------------
(1) 3535/    11EC :                     ; get_tick
(1) 3536/    11EC :                     ;
(1) 3537/    11EC :                     ; Checks if VBlank triggred a TICK
(1) 3538/    11EC :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3539/    11EC :                     ; --------------------------------------------------------
(1) 3540/    11EC :                     
(1) 3541/    11EC :                     get_tick:
(1) 3542/    11EC : F3                  		di				; Disable ints
(1) 3543/    11ED : F5                  		push	af
(1) 3544/    11EE : E5                  		push	hl
(1) 3545/    11EF : 21 ED 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3546/    11F2 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3547/    11F3 : B7                  		or 	a
(1) 3548/    11F4 : 28 13               		jr	z,.ctnotick
(1) 3549/    11F6 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3550/    11F8 : 23                  		inc	hl			; Move to tickCnt
(1) 3551/    11F9 : 34                  		inc	(hl)			; and increment
(1) 3552/    11FA : CF                  		rst	8
(1) 3553/    11FB : D5                  		push	de
(1) 3554/    11FC : 2A F0 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3555/    11FF : ED 5B F2 1C         		ld	de,(sbeatPtck)
(1) 3556/    1203 : CF                  		rst	8
(1) 3557/    1204 : 19                  		add	hl,de
(1) 3558/    1205 : 22 F0 1C            		ld	(sbeatAcc),hl
(1) 3559/    1208 : D1                  		pop	de
(1) 3560/    1209 :                     .ctnotick:
(1) 3561/    1209 : E1                  		pop	hl
(1) 3562/    120A : F1                  		pop	af
(1) 3563/    120B : FB                  		ei				; Enable ints again
(1) 3564/    120C : C9                  		ret
(1) 3565/    120D :                     
(1) 3566/    120D :                     ; --------------------------------------------------------
(1) 3567/    120D :                     ; transferRom
(1) 3568/    120D :                     ;
(1) 3569/    120D :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3570/    120D :                     ; This also tells to 68k that we want to access ROM
(1) 3571/    120D :                     ;
(1) 3572/    120D :                     ; Input:
(1) 3573/    120D :                     ; a  | 68K Address $xx0000
(1) 3574/    120D :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3575/    120D :                     ; hl | 68K Address $00xxxx
(1) 3576/    120D :                     ; de | Destination pointer
(1) 3577/    120D :                     ;
(1) 3578/    120D :                     ; Uses:
(1) 3579/    120D :                     ; b
(1) 3580/    120D :                     ;
(1) 3581/    120D :                     ; Notes:
(1) 3582/    120D :                     ; call RST 20h first, so the currenty playing DAC
(1) 3583/    120D :                     ; sample has enough data before getting busy here.
(1) 3584/    120D :                     ; --------------------------------------------------------
(1) 3585/    120D :                     
(1) 3586/    120D :                     transferRom:
(1) 3587/    120D : DD E5               		push	ix
(1) 3588/    120F : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3589/    1213 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3590/    1215 : 28 3D               		jr	z,.from_ram
(1) 3591/    1217 : CF                  		rst	8
(1) 3592/    1218 : 22 07 1D            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3593/    121B : CB BC               		res	7,h
(1) 3594/    121D : 06 00               		ld	b,0
(1) 3595/    121F : 0B                  		dec	bc
(1) 3596/    1220 : 09                  		add	hl,bc
(1) 3597/    1221 : CB 7C               		bit	7,h
(1) 3598/    1223 : 20 0B               		jr	nz,.double
(1) 3599/    1225 : 2A 07 1D            		ld	hl,(x68ksrclsb)
(1) 3600/    1228 : 0C                  		inc	c
(1) 3601/    1229 : 47                  		ld	b,a
(1) 3602/    122A : CD 74 12            		call	.transfer
(1) 3603/    122D : DD E1               		pop	ix
(1) 3604/    122F : C9                  		ret
(1) 3605/    1230 :                     .double:
(1) 3606/    1230 : CF                  		rst	8
(1) 3607/    1231 : 47                  		ld	b,a
(1) 3608/    1232 : C5                  		push	bc
(1) 3609/    1233 : E5                  		push	hl
(1) 3610/    1234 : 79                  		ld	a,c
(1) 3611/    1235 : 95                  		sub	a,l
(1) 3612/    1236 : 4F                  		ld	c,a
(1) 3613/    1237 : 2A 07 1D            		ld	hl,(x68ksrclsb)
(1) 3614/    123A : CD 74 12            		call	.transfer
(1) 3615/    123D : E1                  		pop	hl
(1) 3616/    123E : C1                  		pop	bc
(1) 3617/    123F : 4D                  		ld	c,l
(1) 3618/    1240 : 0C                  		inc	c
(1) 3619/    1241 : 3A 08 1D            		ld	a,(x68ksrcmid)
(1) 3620/    1244 : E6 80               		and	80h
(1) 3621/    1246 : C6 80               		add	a,80h
(1) 3622/    1248 : 67                  		ld	h,a
(1) 3623/    1249 : 2E 00               		ld	l,0
(1) 3624/    124B : 30 01               		jr	nc,.x68knocarry
(1) 3625/    124D : 04                  		inc	b
(1) 3626/    124E :                     .x68knocarry:
(1) 3627/    124E : CD 74 12            		call	.transfer
(1) 3628/    1251 : DD E1               		pop	ix
(1) 3629/    1253 : C9                  		ret
(1) 3630/    1254 :                     
(1) 3631/    1254 :                     ; ------------------------------------------------
(1) 3632/    1254 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3633/    1254 :                     ;
(1) 3634/    1254 :                     ; On the 68K side YOU MUST CALL
(1) 3635/    1254 :                     ; gemaUpdate manually if you have the oportunity
(1) 3636/    1254 :                     ;
(1) 3637/    1254 :                     ; Normally from a Vblank wait loop.
(1) 3638/    1254 :                     ; ------------------------------------------------
(1) 3639/    1254 :                     
(1) 3640/    1254 :                     .from_ram:
(1) 3641/    1254 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3642/    1258 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3643/    125B : 32 35 00            		ld	(cdRamSrcB),a
(1) 3644/    125E : CD 6B 15            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3645/    1261 : CF                  		rst	8
(1) 3646/    1262 : 79                  		ld	a,c
(1) 3647/    1263 : 32 30 00            		ld	(cdRamLen),a
(1) 3648/    1266 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** 68K LABEL **
(1) 3649/    1269 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3650/    126B :                     .wait:
(1) 3651/    126B :                     	; Get stuck here until 68K finishes
(1) 3652/    126B : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3653/    126E : B7                  		or	a
(1) 3654/    126F : 20 FA               		jr	nz,.wait
(1) 3655/    1271 : DD E1               		pop	ix
(1) 3656/    1273 : C9                  		ret
(1) 3657/    1274 :                     
(1) 3658/    1274 :                     ; ------------------------------------------------
(1) 3659/    1274 :                     ; b  - Source ROM $xx0000
(1) 3660/    1274 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3661/    1274 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3662/    1274 :                     ; de - Output location
(1) 3663/    1274 :                     ; ix - ROM-block flag
(1) 3664/    1274 :                     ; ------------------------------------------------
(1) 3665/    1274 :                     
(1) 3666/    1274 :                     .transfer:
(1) 3667/    1274 : CF                  		rst	8
(1) 3668/    1275 : D5                  		push	de
(1) 3669/    1276 : 11 00 60            		ld	de,6000h
(1) 3670/    1279 : 7C                  		ld	a,h
(1) 3671/    127A : 07                  		rlca
(1) 3672/    127B : 12                  		ld	(de),a
(1) 3673/    127C : 78                  		ld	a,b
(1) 3674/    127D : CF                  		rst	8
(1) 3675/    127E : 12                  		ld	(de),a
(1) 3676/    127F : 0F                  		rrca
(1) 3677/    1280 : 12                  		ld	(de),a
(1) 3678/    1281 : 0F                  		rrca
(1) 3679/    1282 : 12                  		ld	(de),a
(1) 3680/    1283 : 0F                  		rrca
(1) 3681/    1284 : 12                  		ld	(de),a
(1) 3682/    1285 : 0F                  		rrca
(1) 3683/    1286 : CF                  		rst	8
(1) 3684/    1287 : 12                  		ld	(de),a
(1) 3685/    1288 : 0F                  		rrca
(1) 3686/    1289 : 12                  		ld	(de),a
(1) 3687/    128A : 0F                  		rrca
(1) 3688/    128B : 12                  		ld	(de),a
(1) 3689/    128C : 0F                  		rrca
(1) 3690/    128D : 12                  		ld	(de),a
(1) 3691/    128E : D1                  		pop	de
(1) 3692/    128F : CB FC               		set	7,h
(1) 3693/    1291 : CF                  		rst	8
(1) 3694/    1292 :                     	; Transfer ROM data in packets
(1) 3695/    1292 :                     	; while playing the cache'd sample
(1) 3696/    1292 :                     	; *** CRITICAL PROCESS ***
(1) 3697/    1292 :                     	;
(1) 3698/    1292 :                     	; pseudo-ref for ldir:
(1) 3699/    1292 :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3700/    1292 :                     	; inc de	; incr de + 1
(1) 3701/    1292 :                     	; inc hl	; incr hl + 1
(1) 3702/    1292 :                     	; dec bc	; decr bc - 1
(1) 3703/    1292 : 06 00               		ld	b,0
(1) 3704/    1294 : 79                  		ld	a,c		; a - Size counter
(1) 3705/    1295 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3706/    1297 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3707/    1299 :                     .x68kloop:
(1) 3708/    1299 : CF                  		rst	8
(1) 3709/    129A : 00                  		nop
(1) 3710/    129B : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3711/    129D : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3712/    12A1 : C4 BB 12            		call	nz,.x68klpwt
(1) 3713/    12A4 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3714/    12A6 : CF                  		rst	8
(1) 3715/    12A7 : 00                  		nop
(1) 3716/    12A8 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3717/    12AA : D2 99 12            		jp	nc,.x68kloop
(1) 3718/    12AD :                     ; last block
(1) 3719/    12AD :                     .x68klast:
(1) 3720/    12AD : C6 08               		add	a,MAX_TRFRPZ
(1) 3721/    12AF : 4F                  		ld	c,a
(1) 3722/    12B0 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3723/    12B4 : C4 BB 12            		call	nz,.x68klpwt
(1) 3724/    12B7 : ED B0               		ldir
(1) 3725/    12B9 : CF                  		rst	8
(1) 3726/    12BA : C9                  		ret
(1) 3727/    12BB :                     ; Wait here until Genesis unlocks ROM
(1) 3728/    12BB :                     .x68klpwt:
(1) 3729/    12BB : 00                  		nop	; WAVE SYNC
(1) 3730/    12BC : 00                  		nop
(1) 3731/    12BD :                     .x68kpwtlp:
(1) 3732/    12BD : CF                  		rst	8
(1) 3733/    12BE : 00                  		nop	; WAVE SYNC
(1) 3734/    12BF : 00                  		nop
(1) 3735/    12C0 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3736/    12C4 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3737/    12C6 : C9                  		ret
(1) 3738/    12C7 :                     
(1) 3739/    12C7 :                     ; ====================================================================
(1) 3740/    12C7 :                     ; ----------------------------------------------------------------
(1) 3741/    12C7 :                     ; Sound chip routines
(1) 3742/    12C7 :                     ; ----------------------------------------------------------------
(1) 3743/    12C7 :                     
(1) 3744/    12C7 :                     ; --------------------------------------------------------
(1) 3745/    12C7 :                     ; chip_env
(1) 3746/    12C7 :                     ;
(1) 3747/    12C7 :                     ; Process the PSG
(1) 3748/    12C7 :                     ; --------------------------------------------------------
(1) 3749/    12C7 :                     
(1) 3750/    12C7 :                     chip_env:
(1) 3752/    12C7 : CD 6B 15            		call	gema_lastbank		; Keep bank out of ROM before writing PSG
(1) 3754/    12CA : FD 21 78 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3755/    12CE : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3756/    12D2 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3757/    12D4 : 06 04               		ld	b,4			; b - 4 channels
(1) 3758/    12D6 :                     .vloop:
(1) 3759/    12D6 : CF                  		rst	8
(1) 3760/    12D7 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3761/    12DA : FD 36 00 00         		ld	(iy+COM),0
(1) 3762/    12DE :                     
(1) 3763/    12DE :                     	; ----------------------------
(1) 3764/    12DE :                     	; bit 2 - stop sound
(1) 3765/    12DE : CB 53               		bit	2,e
(1) 3766/    12E0 : 28 0C               		jr	z,.ckof
(1) 3767/    12E2 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3768/    12E6 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3769/    12EA : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3770/    12EE :                     .ckof:
(1) 3771/    12EE :                     	; ----------------------------
(1) 3772/    12EE :                     	; bit 1 - key off
(1) 3773/    12EE : CB 4B               		bit	1,e
(1) 3774/    12F0 : 28 0F               		jr      z,.ckon
(1) 3775/    12F2 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3776/    12F5 : B7                  		or	a
(1) 3777/    12F6 : 28 09               		jr	z,.ckon
(1) 3778/    12F8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3779/    12FC : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3780/    1300 : CF                  		rst	8
(1) 3781/    1301 :                     .ckon:
(1) 3782/    1301 :                     	; ----------------------------
(1) 3783/    1301 :                     	; bit 0 - key on
(1) 3784/    1301 : CB 43               		bit	0,e
(1) 3785/    1303 : 28 1A               		jr	z,.envproc
(1) 3786/    1305 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3787/    1309 : 78                  		ld	a,b
(1) 3788/    130A : FE 04               		cp	4			; NOISE channel?
(1) 3789/    130C : 20 08               		jr	nz,.nskip
(1) 3790/    130E : CF                  		rst	8			; Set NOISE mode
(1) 3791/    130F : 3A EA 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3792/    1312 : B1                  		or	c
(1) 3793/    1313 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3794/    1316 :                     .nskip:
(1) 3795/    1316 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3796/    131A : CF                  		rst	8
(1) 3797/    131B : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3798/    131F :                     .nblock:
(1) 3799/    131F :                     
(1) 3800/    131F :                     	; ----------------------------
(1) 3801/    131F :                     	; Process effects
(1) 3802/    131F :                     	; ----------------------------
(1) 3803/    131F :                     .envproc:
(1) 3804/    131F : FD 7E 18            		ld	a,(iy+MODE)
(1) 3805/    1322 : B7                  		or	a			; no modes
(1) 3806/    1323 : CA A9 13            		jp	z,.vedlp
(1) 3807/    1326 : FE 01               		cp 	001b			; Attack mode
(1) 3808/    1328 : 20 2C               		jr	nz,.chk2
(1) 3809/    132A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3810/    132E : FD 5E 24            		ld	e,(iy+ALV)
(1) 3811/    1331 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3812/    1334 : B7                  		or	a
(1) 3813/    1335 : 28 16               		jr	z,.atkend
(1) 3814/    1337 : 57                  		ld	d,a			; c - attack rate
(1) 3815/    1338 : 7B                  		ld	a,e			; a - attack level
(1) 3816/    1339 : CF                  		rst	8
(1) 3817/    133A : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3818/    133D : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3819/    133E : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3820/    1340 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3821/    1342 : BB                  		cp	e			; attack rate == level?
(1) 3822/    1343 : 38 08               		jr	c,.atkend
(1) 3823/    1345 : 28 06               		jr	z,.atkend
(1) 3824/    1347 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3825/    134A : CF                  		rst	8
(1) 3826/    134B : 18 5C               		jr	.vedlp
(1) 3827/    134D :                     .atkend:
(1) 3828/    134D : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3829/    1350 :                     .atkzero:
(1) 3830/    1350 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3831/    1354 : 18 53               		jr	.vedlp
(1) 3832/    1356 :                     .chk2:
(1) 3833/    1356 :                     
(1) 3834/    1356 : FE 02               		cp	010b			; Decay mode
(1) 3835/    1358 : 20 31               		jr	nz,.chk4
(1) 3836/    135A :                     .dectmr:
(1) 3837/    135A : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3838/    135E : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3839/    1361 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3840/    1364 : BB                  		cp	e
(1) 3841/    1365 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3842/    1367 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3843/    1369 : CF                  		rst	8
(1) 3844/    136A : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3845/    136D : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3846/    136F : BB                  		cp	e			; compare level
(1) 3847/    1370 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3848/    1372 : 18 08               		jr	.dksav
(1) 3849/    1374 :                     .dkadd:
(1) 3850/    1374 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3851/    1377 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3852/    1379 : BB                  		cp	e			; compare level
(1) 3853/    137A : 30 05               		jr	nc,.dkyend
(1) 3854/    137C :                     .dksav:
(1) 3855/    137C : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3856/    137F : 18 28               		jr	.vedlp
(1) 3857/    1381 :                     .dkyend:
(1) 3858/    1381 : CF                  		rst	8
(1) 3859/    1382 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3860/    1385 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3861/    1389 : 18 1E               		jr	.vedlp
(1) 3862/    138B :                     .chk4:
(1) 3863/    138B : FE 04               		cp	100b			; Sustain phase
(1) 3864/    138D : 20 1A               		jr	nz,.vedlp
(1) 3865/    138F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3866/    1393 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3867/    1396 : CF                  		rst	8
(1) 3868/    1397 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3869/    139A : 38 05               		jr	c,.killenv		; release done
(1) 3870/    139C : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3871/    139F : 18 08               		jr	.vedlp
(1) 3872/    13A1 :                     .killenv:
(1) 3873/    13A1 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3874/    13A5 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3875/    13A9 :                     .vedlp:
(1) 3876/    13A9 :                     	; ----------------------------
(1) 3877/    13A9 :                     	; PSG UPDATE
(1) 3878/    13A9 :                     	; ----------------------------
(1) 3879/    13A9 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3880/    13AC : B7                  		or	a
(1) 3881/    13AD : 28 72               		jr	z,.noupd
(1) 3882/    13AF : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3883/    13B3 : 59                  		ld	e,c
(1) 3884/    13B4 : 3A EA 1C            		ld	a,(psgHatMode)
(1) 3885/    13B7 : 57                  		ld	d,a
(1) 3886/    13B8 : E6 03               		and	011b
(1) 3887/    13BA : FE 03               		cp	011b
(1) 3888/    13BC : 20 1D               		jr	nz,.normal
(1) 3889/    13BE : CF                  		rst	8
(1) 3890/    13BF : 78                  		ld	a,b		; Channel 4?
(1) 3891/    13C0 : FE 03               		cp	3
(1) 3892/    13C2 : 28 13               		jr	z,.silnc_3
(1) 3893/    13C4 : FE 04               		cp	4
(1) 3894/    13C6 : 20 18               		jr	nz,.do_nfreq
(1) 3895/    13C8 : 3A EA 1C            		ld	a,(psgHatMode)
(1) 3896/    13CB : 57                  		ld	d,a
(1) 3897/    13CC : E6 03               		and	011b
(1) 3898/    13CE : CF                  		rst	8
(1) 3899/    13CF : FE 03               		cp	011b
(1) 3900/    13D1 : 20 30               		jr	nz,.vonly
(1) 3901/    13D3 : 1E C0               		ld	e,0C0h
(1) 3902/    13D5 : 18 09               		jr	.do_nfreq
(1) 3903/    13D7 :                     .silnc_3:
(1) 3904/    13D7 : 3E FF               		ld	a,-1
(1) 3905/    13D9 : 18 32               		jr	.vlmuch
(1) 3906/    13DB :                     .normal:
(1) 3907/    13DB : 78                  		ld	a,b
(1) 3908/    13DC : FE 04               		cp	4
(1) 3909/    13DE : 28 23               		jr	z,.vonly
(1) 3910/    13E0 :                     .do_nfreq:
(1) 3911/    13E0 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3912/    13E3 : FD 66 20            		ld	h,(iy+DTH)
(1) 3913/    13E6 :                     	; freq effects go here
(1) 3914/    13E6 :                     	; (save e FIRST.)
(1) 3915/    13E6 :                     	;	push	de
(1) 3916/    13E6 :                     	;	pop	de
(1) 3917/    13E6 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3918/    13E7 : E6 0F               		and	00001111b
(1) 3919/    13E9 : B3                  		or	e		; OR with channel set in e
(1) 3920/    13EA : CF                  		rst	8
(1) 3921/    13EB : DD 77 00            		ld	(ix),a		; write it
(1) 3922/    13EE : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3923/    13EF : 0F                  		rrca
(1) 3924/    13F0 : 0F                  		rrca
(1) 3925/    13F1 : 0F                  		rrca
(1) 3926/    13F2 : 0F                  		rrca
(1) 3927/    13F3 : E6 0F               		and	00001111b
(1) 3928/    13F5 : 5F                  		ld	e,a
(1) 3929/    13F6 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3930/    13F7 : CF                  		rst	8
(1) 3931/    13F8 : 07                  		rlca
(1) 3932/    13F9 : 07                  		rlca
(1) 3933/    13FA : 07                  		rlca
(1) 3934/    13FB : 07                  		rlca
(1) 3935/    13FC : E6 30               		and	00110000b
(1) 3936/    13FE : B3                  		or	e
(1) 3937/    13FF : DD 77 00            		ld	(ix),a
(1) 3938/    1402 : CF                  		rst	8
(1) 3939/    1403 :                     .vonly:
(1) 3940/    1403 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3941/    1406 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3942/    1409 : 30 02               		jr	nc,.vlmuch
(1) 3943/    140B : 3E FF               		ld	a,-1
(1) 3944/    140D :                     .vlmuch:
(1) 3945/    140D : CB 3F               		srl	a			; (Level >> 4)
(1) 3946/    140F : CB 3F               		srl	a
(1) 3947/    1411 : CB 3F               		srl	a
(1) 3948/    1413 : CF                  		rst	8
(1) 3949/    1414 : CB 3F               		srl	a
(1) 3950/    1416 : E6 0F               		and	00001111b		; Filter volume value
(1) 3951/    1418 : B1                  		or	c			; and OR with current channel
(1) 3952/    1419 : F6 90               		or	90h			; Set volume-set mode
(1) 3954/    141B : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3956/    141E : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3957/    1421 :                     .noupd:
(1) 3958/    1421 :                     	; ----------------------------
(1) 3959/    1421 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3960/    1423 : 79                  		ld	a,c
(1) 3961/    1424 : CF                  		rst	8
(1) 3962/    1425 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3963/    1427 : 4F                  		ld	c,a
(1) 3964/    1428 : 05                  		dec	b
(1) 3965/    1429 : C2 D6 12            		jp	nz,.vloop
(1) 3966/    142C : C9                  		ret
(1) 3967/    142D :                     
(1) 3968/    142D :                     ; ---------------------------------------------
(1) 3969/    142D :                     ; FM register writes
(1) 3970/    142D :                     ;
(1) 3971/    142D :                     ; Input:
(1) 3972/    142D :                     ; d - ctrl
(1) 3973/    142D :                     ; e - data
(1) 3974/    142D :                     ; ---------------------------------------------
(1) 3975/    142D :                     
(1) 3976/    142D :                     ; c - KeyID
(1) 3977/    142D :                     fm_autoreg:
(1) 3978/    142D : CB 51               		bit	2,c
(1) 3979/    142F : 20 0B               		jr	nz,fm_send_2
(1) 3980/    1431 :                     
(1) 3981/    1431 :                     ; Channels 1-3 and global registers
(1) 3982/    1431 :                     fm_send_1:
(1) 3983/    1431 : 7A                  		ld	a,d
(1) 3984/    1432 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3985/    1435 : 00                  		nop
(1) 3986/    1436 : 7B                  		ld	a,e
(1) 3987/    1437 : 32 01 40            		ld	(Zym_data_1),a
(1) 3988/    143A : 00                  		nop
(1) 3989/    143B : C9                  		ret
(1) 3990/    143C :                     ; Channels 4-6
(1) 3991/    143C :                     fm_send_2:
(1) 3992/    143C : 7A                  		ld	a,d
(1) 3993/    143D : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3994/    1440 : 00                  		nop
(1) 3995/    1441 : 7B                  		ld	a,e
(1) 3996/    1442 : 32 03 40            		ld	(Zym_data_2),a
(1) 3997/    1445 : 00                  		nop
(1) 3998/    1446 : C9                  		ret
(1) 3999/    1447 :                     
(1) 4000/    1447 :                     ; --------------------------------------------------------
(1) 4001/    1447 :                     ; brute-force WAVE ON/OFF playback
(1) 4002/    1447 :                     ; --------------------------------------------------------
(1) 4003/    1447 :                     
(1) 4004/    1447 :                     dac_on:
(1) 4005/    1447 : 3E 2B               		ld	a,2Bh
(1) 4006/    1449 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4007/    144C : 3E 80               		ld	a,80h
(1) 4008/    144E : 32 01 40            		ld	(Zym_data_1),a
(1) 4009/    1451 : 3E D9               		ld 	a,zopcExx
(1) 4010/    1453 : 32 08 00            		ld	(dac_me),a
(1) 4011/    1456 : 3E F5               		ld 	a,zopcPushAf
(1) 4012/    1458 : 32 20 00            		ld	(dac_fill),a
(1) 4013/    145B : C9                  		ret
(1) 4014/    145C :                     dac_off:
(1) 4015/    145C : 3E 2B               		ld	a,2Bh
(1) 4016/    145E : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4017/    1461 : 3E 00               		ld	a,00h
(1) 4018/    1463 : 32 01 40            		ld	(Zym_data_1),a
(1) 4019/    1466 : 3E C9               		ld 	a,zopcRet
(1) 4020/    1468 : 32 08 00            		ld	(dac_me),a
(1) 4021/    146B : 3E C9               		ld 	a,zopcRet
(1) 4022/    146D : 32 20 00            		ld	(dac_fill),a
(1) 4023/    1470 : C9                  		ret
(1) 4024/    1471 :                     
(1) 4025/    1471 :                     ; --------------------------------------------------------
(1) 4026/    1471 :                     ; dac_play
(1) 4027/    1471 :                     ;
(1) 4028/    1471 :                     ; Plays a new sample
(1) 4029/    1471 :                     ;
(1) 4030/    1471 :                     ; NOTE:
(1) 4031/    1471 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4032/    1471 :                     ; getting here.
(1) 4033/    1471 :                     ; --------------------------------------------------------
(1) 4034/    1471 :                     
(1) 4035/    1471 :                     dac_play:
(1) 4036/    1471 : F3                  		di
(1) 4037/    1472 : CD 5C 14            		call	dac_off
(1) 4038/    1475 : D9                  		exx				; flip exx regs
(1) 4039/    1476 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4040/    1479 : ED 5B 04 1D         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4041/    147D : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4042/    1480 : D9                  		exx				; move them back
(1) 4043/    1481 : 2A FB 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4044/    1484 : 3A FD 1C            		ld 	a,(wave_Start+2)
(1) 4045/    1487 : 22 F5 1C            		ld	(dDacPntr),hl
(1) 4046/    148A : 32 F7 1C            		ld	(dDacPntr+2),a
(1) 4047/    148D : 2A FE 1C            		ld	hl,(wave_Len)
(1) 4048/    1490 : 3A 00 1D            		ld 	a,(wave_Len+2)
(1) 4049/    1493 : 22 F8 1C            		ld	(dDacCntr),hl
(1) 4050/    1496 : 32 FA 1C            		ld	(dDacCntr+2),a
(1) 4051/    1499 : AF                  		xor	a
(1) 4052/    149A : 32 F4 1C            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4053/    149D : CD A5 14            		call	dac_refill
(1) 4054/    14A0 : CD 47 14            		call	dac_on
(1) 4055/    14A3 : FB                  		ei
(1) 4056/    14A4 : C9                  		ret
(1) 4057/    14A5 :                     
(1) 4058/    14A5 :                     ; --------------------------------------------------------
(1) 4059/    14A5 :                     
(1) 4060/    14A5 :                     dac_refill:
(1) 4061/    14A5 : CF                  		rst	8
(1) 4062/    14A6 : C5                  		push	bc
(1) 4063/    14A7 : D5                  		push	de
(1) 4064/    14A8 : E5                  		push	hl
(1) 4065/    14A9 : 3A 06 1D            		ld	a,(wave_Flags)	; Already finished?
(1) 4066/    14AC : FE 07               		cp	111b
(1) 4067/    14AE : D2 64 15            		jp	nc,.dacfill_end
(1) 4068/    14B1 : 3A FA 1C            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4069/    14B4 : 2A F8 1C            		ld	hl,(dDacCntr)
(1) 4070/    14B7 : 01 80 00            		ld	bc,80h
(1) 4071/    14BA : 37                  		scf
(1) 4072/    14BB : 3F                  		ccf
(1) 4073/    14BC : ED 42               		sbc	hl,bc
(1) 4074/    14BE : DE 00               		sbc	a,0
(1) 4075/    14C0 : 32 FA 1C            		ld	(dDacCntr+2),a
(1) 4076/    14C3 : 22 F8 1C            		ld	(dDacCntr),hl
(1) 4077/    14C6 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4078/    14C8 : B7                  		or	a
(1) 4079/    14C9 : FA F3 14            		jp	m,.dac_over
(1) 4080/    14CC : 3A F4 1C            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4081/    14CF : 5F                  		ld	e,a
(1) 4082/    14D0 : C6 80               		add 	a,80h
(1) 4083/    14D2 : 32 F4 1C            		ld	(dDacFifoMid),a
(1) 4084/    14D5 : 2A F5 1C            		ld	hl,(dDacPntr)
(1) 4085/    14D8 : 3A F7 1C            		ld	a,(dDacPntr+2)
(1) 4086/    14DB : CD 0D 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4087/    14DE : 2A F5 1C            		ld	hl,(dDacPntr)
(1) 4088/    14E1 : 3A F7 1C            		ld	a,(dDacPntr+2)
(1) 4089/    14E4 : 01 80 00            		ld	bc,80h
(1) 4090/    14E7 : 09                  		add	hl,bc
(1) 4091/    14E8 : CE 00               		adc	a,0
(1) 4092/    14EA : 22 F5 1C            		ld	(dDacPntr),hl
(1) 4093/    14ED : 32 F7 1C            		ld	(dDacPntr+2),a
(1) 4094/    14F0 : C3 67 15            		jp	.dacfill_ret
(1) 4095/    14F3 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4096/    14F3 :                     ; but the USER won't notice it.
(1) 4097/    14F3 :                     .dac_over:
(1) 4098/    14F3 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4099/    14F5 : 3A 06 1D            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4100/    14F8 : E6 01               		and	001b
(1) 4101/    14FA : C2 1D 15            		jp	nz,.dacfill_loop
(1) 4102/    14FD : 7D                  		ld	a,l
(1) 4103/    14FE : C6 80               		add	a,80h
(1) 4104/    1500 : 4F                  		ld	c,a
(1) 4105/    1501 : 06 00               		ld	b,0
(1) 4106/    1503 : C5                  		push	bc
(1) 4107/    1504 : 3A F4 1C            		ld	a,(dDacFifoMid)
(1) 4108/    1507 : 5F                  		ld	e,a
(1) 4109/    1508 : C6 80               		add	a,80h
(1) 4110/    150A : 32 F4 1C            		ld	(dDacFifoMid),a
(1) 4111/    150D : C1                  		pop	bc
(1) 4112/    150E : 79                  		ld	a,c
(1) 4113/    150F : B0                  		or	b
(1) 4114/    1510 : 28 52               		jr	z,.dacfill_end
(1) 4115/    1512 : 2A F5 1C            		ld	hl,(dDacPntr)
(1) 4116/    1515 : 3A F7 1C            		ld	a,(dDacPntr+2)
(1) 4117/    1518 : CD 0D 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4118/    151B : 18 47               		jr	.dacfill_end
(1) 4119/    151D :                     ; loop sample
(1) 4120/    151D :                     .dacfill_loop:
(1) 4121/    151D : C5                  		push	bc
(1) 4122/    151E : D5                  		push	de
(1) 4123/    151F : 3A 03 1D            		ld	a,(wave_Loop+2)
(1) 4124/    1522 : 4F                  		ld	c,a
(1) 4125/    1523 : ED 5B 01 1D         		ld	de,(wave_Loop)
(1) 4126/    1527 : 2A FB 1C            		ld	hl,(wave_Start)
(1) 4127/    152A : 3A FD 1C            		ld 	a,(wave_Start+2)
(1) 4128/    152D : 81                  		add	a,c
(1) 4129/    152E : 19                  		add	hl,de
(1) 4130/    152F : CE 00               		adc	a,0
(1) 4131/    1531 : 22 F5 1C            		ld	(dDacPntr),hl
(1) 4132/    1534 : 32 F7 1C            		ld	(dDacPntr+2),a
(1) 4133/    1537 : 2A FE 1C            		ld	hl,(wave_Len)
(1) 4134/    153A : 3A 00 1D            		ld 	a,(wave_Len+2)
(1) 4135/    153D : 91                  		sub	a,c
(1) 4136/    153E : 37                  		scf
(1) 4137/    153F : 3F                  		ccf
(1) 4138/    1540 : ED 52               		sbc	hl,de
(1) 4139/    1542 : DE 00               		sbc	a,0
(1) 4140/    1544 : 22 F8 1C            		ld	(dDacCntr),hl
(1) 4141/    1547 : 32 FA 1C            		ld	(dDacCntr+2),a
(1) 4142/    154A : D1                  		pop	de
(1) 4143/    154B : C1                  		pop	bc
(1) 4144/    154C : 78                  		ld	a,b
(1) 4145/    154D : B1                  		or	c
(1) 4146/    154E : 28 17               		jr	z,.dacfill_ret
(1) 4147/    1550 : 3A F4 1C            		ld	a,(dDacFifoMid)
(1) 4148/    1553 : 5F                  		ld	e,a
(1) 4149/    1554 : C6 80               		add	a,80h
(1) 4150/    1556 : 32 F4 1C            		ld	(dDacFifoMid),a
(1) 4151/    1559 : 2A F5 1C            		ld	hl,(dDacPntr)
(1) 4152/    155C : 3A F7 1C            		ld	a,(dDacPntr+2)
(1) 4153/    155F : CD 0D 12            		call	transferRom	; *** ROM ACCESS ***
(1) 4154/    1562 : 18 03               		jr	.dacfill_ret
(1) 4155/    1564 :                     .dacfill_end:
(1) 4156/    1564 : CD 5C 14            		call	dac_off		; DAC finished
(1) 4157/    1567 :                     .dacfill_ret:
(1) 4158/    1567 : E1                  		pop	hl
(1) 4159/    1568 : D1                  		pop	de
(1) 4160/    1569 : C1                  		pop	bc
(1) 4161/    156A : C9                  		ret
(1) 4162/    156B :                     
(1) 4163/    156B :                     ; ----------------------------------------------------------------
(1) 4164/    156B :                     ; gema_lastbank
(1) 4165/    156B :                     ;
(1) 4166/    156B :                     ; Two purposes:
(1) 4167/    156B :                     ; - Set the BANK to the very last part of memory for the
(1) 4168/    156B :                     ;   transferRom to read from RAM
(1) 4169/    156B :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4170/    156B :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4171/    156B :                     ;
(1) 4172/    156B :                     ; Uses:
(1) 4173/    156B :                     ; hl,b
(1) 4174/    156B :                     ; ----------------------------------------------------------------
(1) 4175/    156B :                     
(1) 4176/    156B :                     gema_lastbank:
(1) 4177/    156B : 21 00 60            		ld	hl,6000h
(1) 4178/    156E : 06 09               		ld	b,9		; 9 bits
(1) 4179/    1570 :                     .write:
(1) 4180/    1570 : 36 01               		ld	(hl),1
(1) 4181/    1572 : 10 FC               		djnz	.write
(1) 4182/    1574 : C9                  		ret
(1) 4183/    1575 :                     
(1) 4184/    1575 :                     ; ====================================================================
(1) 4185/    1575 :                     ; ----------------------------------------------------------------
(1) 4186/    1575 :                     ; Frequency tables
(1) 4187/    1575 :                     ; ----------------------------------------------------------------
(1) 4188/    1575 :                     
(1) 4189/    1575 : 84 02               fmFreq_List:	dw 644
(1) 4190/    1577 : A9 02               		dw 681
(1) 4191/    1579 : D2 02               		dw 722
(1) 4192/    157B : FD 02               		dw 765
(1) 4193/    157D : 2A 03               		dw 810
(1) 4194/    157F : 5A 03               		dw 858
(1) 4195/    1581 : 8E 03               		dw 910
(1) 4196/    1583 : C4 03               		dw 964
(1) 4197/    1585 : FD 03               		dw 1021
(1) 4198/    1587 : 39 04               		dw 1081
(1) 4199/    1589 : 7A 04               		dw 1146
(1) 4200/    158B : BE 04               		dw 1214
(1) 4201/    158D :                     
(1) 4202/    158D :                     ; ----------------------------------------
(1) 4203/    158D :                     ; DAC and PWM
(1) 4204/    158D :                     ; ----------------------------------------
(1) 4205/    158D :                     
(1) 4206/    158D :                     psgFreq_List:
(1) 4207/    158D :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4208/    158D :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4209/    158D :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4210/    158D : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1593 : FF FF FF FF FF FF 
             1599 : FF FF FF FF FF FF 
             159F : F8 03 BF 03 89 03 
(1) 4211/    15A5 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             15AB : CE 02 A5 02 80 02 
             15B1 : 5C 02 3A 02 1A 02 
             15B7 : FB 01 DF 01 C4 01 
(1) 4212/    15BD : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             15C3 : 67 01 53 01 40 01 
             15C9 : 2E 01 1D 01 0D 01 
             15CF : FE 00 EF 00 E2 00 
(1) 4213/    15D5 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             15DB : B4 00 A9 00 A0 00 
             15E1 : 97 00 8F 00 87 00 
             15E7 : 7F 00 78 00 71 00 
(1) 4214/    15ED : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             15F3 : 5A 00 55 00 50 00 
             15F9 : 4B 00 47 00 43 00 
             15FF : 40 00 3C 00 39 00 
(1) 4215/    1605 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             160B : 2D 00 2B 00 28 00 
             1611 : 26 00 24 00 22 00 
             1617 : 20 00 1F 00 1D 00 
(1) 4216/    161D : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             1623 : 17 00 16 00 15 00 
             1629 : 13 00 12 00 11 00 
             162F : 10 00 09 00 01 00 
(1) 4217/    1635 :                     
(1) 4218/    1635 :                     ; ----------------------------------------
(1) 4219/    1635 :                     ; DAC and PWM shared list
(1) 4220/    1635 :                     ; ----------------------------------------
(1) 4221/    1635 :                     
(1) 4222/    1635 :                     wavFreq_List:
(1) 4223/    1635 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4224/    1635 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4225/    1635 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4226/    1635 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4227/    1635 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0052h,0056h,005Ah,0060h,0066h,006Ch,0071h,0079h	; x-3 4000 ok
             163B : 4C 00 52 00 56 00 
             1641 : 5A 00 60 00 66 00 
             1647 : 6C 00 71 00 79 00 
(1) 4228/    164D : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,009Bh,00A2h,00AEh,00B4h,00C2h,00CCh,00D7h,00E4h,00F0h	; x-4 8000 ok
             1653 : 9B 00 A2 00 AE 00 
             1659 : B4 00 C2 00 CC 00 
             165F : D7 00 E4 00 F0 00 
(1) 4229/    1665 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Bh,016Ch,0181h,0191h,01ACh,01C2h,01E0h	; x-5 16000 ok
             166B : 2E 01 47 01 5B 01 
             1671 : 6C 01 81 01 91 01 
             1677 : AC 01 C2 01 E0 01 
(1) 4230/    167D : 00 02 10 02 40 02   	dw 0200h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6 32000 wip
             1683 : 60 02 80 02 A0 02 
             1689 : D0 02 F8 02 20 03 
             168F : 50 03 80 03 C0 03 
(1) 4231/    1695 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4232/    1695 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4233/    1695 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4234/    1695 :                     
(1) 4235/    1695 :                     ; ----------------------------------------
(1) 4236/    1695 :                     ; SegaCD PCM
(1) 4237/    1695 :                     ; ----------------------------------------
(1) 4238/    1695 :                     wavFreq_CdPcm:
(1) 4239/    1695 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4240/    1695 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4241/    1695 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4242/    1695 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             169B : 28 01 3C 01 4C 01 
             16A1 : 60 01 7C 01 88 01 
             16A7 : AA 01 BC 01 DC 01 
(1) 4243/    16AD : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             16B3 : 58 02 7C 02 A0 02 
             16B9 : C8 02 FC 02 1C 03 
             16BF : 54 03 7C 03 B8 03 
(1) 4244/    16C5 : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             16CB : AC 04 EC 04 40 05 
             16D1 : 90 05 E4 05 3C 06 
             16D7 : 98 06 04 07 60 07 
(1) 4245/    16DD : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             16E3 : 60 09 F0 09 64 0A 
             16E9 : 04 0B AA 0B 60 0C 
             16EF : 18 0D E4 0D B8 0E 
(1) 4246/    16F5 :                     ; 	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
(1) 4247/    16F5 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4248/    16F5 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4249/    16F5 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4250/    16F5 :                     
(1) 4251/    16F5 :                     ; ====================================================================
(1) 4252/    16F5 :                     ; ----------------------------------------------------------------
(1) 4253/    16F5 :                     ; Chip buffers
(1) 4254/    16F5 :                     ; ----------------------------------------------------------------
(1) 4255/    16F5 :                     
(1) 4256/    16F5 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             16FB : 00 00             
(1) 4257/    16FD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             1703 : 00 00             
(1) 4258/    1705 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             170B : 00 00             
(1) 4259/    170D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             1713 : 00 00             
(1) 4260/    1715 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - CURRENT Panning %RRRRLLLL
             171B : 00 00             
(1) 4261/    171D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             1723 : 00 00             
(1) 4262/    1725 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             172B : 00 00             
(1) 4263/    172D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1733 : 00 00             
(1) 4264/    1735 : 00 00 00 00 00 00   pcmpan:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 64 - External PCM panning
             173B : 00 00             
(1) 4265/    173D :                     
(1) 4266/    173D : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1743 : 00 00             
(1) 4267/    1745 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             174B : 00 00             
(1) 4268/    174D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1753 : 00 00             
(1) 4269/    1755 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             175B : 00 00             
(1) 4270/    175D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             1763 : 00 00             
(1) 4271/    1765 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             176B : 00 00             
(1) 4272/    176D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1773 : 00 00             
(1) 4273/    1775 :                     
(1) 4274/    1775 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4275/    1779 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4276/    177D : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4277/    1781 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4278/    1785 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4279/    1789 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4280/    178D : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4281/    1791 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4282/    1795 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4283/    1799 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4284/    179D : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4285/    17A1 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4286/    17A5 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4287/    17A9 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4288/    17AD : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4289/    17B1 :                     
(1) 4290/    17B1 :                     ; --------------------------------------------------------
(1) 4291/    17B1 :                     fmcach_1	ds 28h
(1) 4292/    17D9 :                     fmcach_2	ds 28h
(1) 4293/    1801 :                     fmcach_3	ds 28h
(1) 4294/    1829 :                     fmcach_4	ds 28h
(1) 4295/    1851 :                     fmcach_5	ds 28h
(1) 4296/    1879 :                     fmcach_6	ds 28h
(1) 4297/    18A1 :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4298/    18AD :                     trkInfoCach	ds 4
(1) 4299/    18B1 :                     		ds 4*3		; _rsave followup
(1) 4300/    18BD :                     
(1) 4301/    18BD :                     ; ====================================================================
(1) 4302/    18BD :                     ; ----------------------------------------------------------------
(1) 4303/    18BD :                     ; Track buffers
(1) 4304/    18BD :                     ; ----------------------------------------------------------------
(1) 4305/    18BD :                     
(1) 4306/    18BD :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4307/    18DD :                     trkHdrs_1	ds 8*4
(1) 4308/    18FD :                     trkHdrs_2	ds 8*4
(1) 4309/    191D :                     trkBlks_0	ds 8
(1) 4310/    1925 :                     trkBlks_1	ds 8
(1) 4311/    192D :                     trkBlks_2	ds 8
(1) 4312/    1935 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4313/    1974 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4314/    19B3 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4315/    19F2 : B1 17               fmcach_list:	dw fmcach_1
(1) 4316/    19F4 : D9 17               		dw fmcach_2
(1) 4317/    19F6 : 01 18               		dw fmcach_3
(1) 4318/    19F8 : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4319/    19F9 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4320/    19FA : 29 18               		dw fmcach_4		; Followup
(1) 4321/    19FC : 51 18               		dw fmcach_5
(1) 4322/    19FE : 79 18               		dw fmcach_6
(1) 4323/    1A00 :                     
(1) 4324/    1A00 :                     ; ====================================================================
(1) 4325/    1A00 :                     ; --------------------------------------------------------
(1) 4326/    1A00 :                     ; MASTER buffers list
(1) 4327/    1A00 :                     ;
(1) 4328/    1A00 :                     ; dw track_buffer
(1) 4329/    1A00 :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4330/    1A00 :                     ;
(1) 4331/    1A00 :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4332/    1A00 :                     ; --------------------------------------------------------
(1) 4333/    1A00 :                     
(1) 4334/    1A00 :                     nikona_BuffList:
(1) 4335/    1A00 : 35 19 1D 19 BD 18   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1A06 : 00 1F             
(1) 4336/    1A08 : 74 19 25 19 DD 18   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1A0E : 20 1F             
(1) 4337/    1A10 : B3 19 2D 19 FD 18   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1A16 : 40 1F             
(1) 4338/    1A18 :                     nikona_BuffList_e:
(1) 4339/    1A18 : FF FF               	dw -1	; ENDOFLIST
(1) 4340/    1A1A :                     
(1) 4341/    1A1A :                     ; ====================================================================
(1) 4342/    1A1A :                     ; --------------------------------------------------------
(1) 4343/    1A1A :                     ; Channel tables
(1) 4344/    1A1A :                     ;
(1) 4345/    1A1A :                     ; PSG   80h
(1) 4346/    1A1A :                     ; PSGN  90h
(1) 4347/    1A1A :                     ; FM   0A0h
(1) 4348/    1A1A :                     ; FM3  0B0h
(1) 4349/    1A1A :                     ; DAC  0C0h
(1) 4350/    1A1A :                     ; PCM  0D0h
(1) 4351/    1A1A :                     ; PWM  0E0h
(1) 4352/    1A1A :                     ; --------------------------------------------------------
(1) 4353/    1A1A :                     
(1) 4354/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4355/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4356/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4357/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4358/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4359/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4360/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4361/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4362/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4363/    1B0E :                     ; --------------------------------------------------------
(1) 4364/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4365/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4366/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4367/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4368/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4369/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4370/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4371/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4372/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4373/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4374/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4375/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4376/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4377/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4378/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4379/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4380/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4381/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4382/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4383/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4384/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4385/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4386/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4387/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4388/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4389/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4390/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4391/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4392/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4393/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4394/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4395/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4396/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4397/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4398/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4399/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4400/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4401/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4402/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4403/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4404/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4405/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4406/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4407/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4408/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4409/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4410/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4411/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4412/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4413/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4414/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4415/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4416/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4417/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4418/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4419/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4420/    1CEA :                     
(1) 4421/    1CEA :                     ; ----------------------------------------------------------------
(1) 4422/    1CEA :                     ; Variables inside 1B00h-1CFFh
(1) 4423/    1CEA :                     
(1) 4424/    1CEA : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4425/    1CEB : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4426/    1CEC : 00                  tickSpSet	db 0		; **
(1) 4427/    1CED : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4428/    1CEE : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4429/    1CEF : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4430/    1CF0 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4431/    1CF2 : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4432/    1CF4 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4433/    1CF5 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4434/    1CF8 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4435/    1CFB : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4436/    1CFD : 00                  		db 0
(1) 4437/    1CFE : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4438/    1D00 : 00                  		db 0
(1) 4439/    1D01 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4440/    1D03 : 00                  		db 0
(1) 4441/    1D04 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4442/    1D06 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4443/    1D07 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4444/    1D08 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4445/    1D09 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4446/    1D17 :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4447/    1D19 :                     		ds 1		; FREE BYTE
(1) 4448/    1D1A :                     
(1) 4449/    1D1A :                     ; ====================================================================
(1) 4450/    1D1A :                     ; ----------------------------------------------------------------
(1) 4451/    1D1A :                     ; Special aligned buffers
(1) 4452/    1D1A :                     ;
(1) 4453/    1D1A :                     ; Located at 1D00h
(1) 4454/    1D1A :                     ; ----------------------------------------------------------------
(1) 4455/    1D1A :                     
(1) 4456/    1D00 :                     		org 1D00h
(1) 4457/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes
(1) 4458/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4459/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4460/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4461/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4462/    1F60 :                     ; trkCach_3	ds MAX_RCACH
(1) 4463/    1F60 :                     ; --------------------------------------------------------
(1) 4464/    1F60 :                     ; Last variables...
(1) 4465/    1F60 :                     sampleHead	ds 006h
(1) 4466/    1F66 :                     instListOut	ds 8
(1) 4467/    1F6E :                     ; --------------------------------------------------------
(1) 4468/  201F6E :                     		dephase
(1) 4469/  201F6E :                     		cpu 68000		; [AS] Return to 68k
(1) 4470/  201F6E :                     		padding off		; [AS] NO padding
(1) 4471/  201F6E :                     		align 2
(1) 4472/  201F6E :                     
     319/  201F6E :                     Z80_CODE_END:
     323/    DF6E :                     		dephase
     324/    DF6E : (MACRO)              		fs_end
     324/    DF6E : 00                                  dc.b 0
     324/    DF6F :                                     align $800                      ; Filler sector
     326/    E000 :                     Z80_CODE_FILE_E:
     327/    E000 :                     
     328/    E000 :                     ; ====================================================================
     329/    E000 :                     ; --------------------------------------------------------
     330/    E000 :                     ; SEGA CD SUB-CPU data
     331/    E000 :                     ; --------------------------------------------------------
     332/    E000 :                     
     334/    E000 :                     		align $800
     335/    E000 :                     MCD_SMPDATA:
     336/   20000 :                     		phase $20000				; <-- MANUAL location on Sub-CPU area
     337/   20000 :                     	; ------------------------------------------------
     338/   20000 :                     		include "sound/smpl_pcm.asm"		; PCM samples
(1)    1/   20000 :                     ; ===========================================================================
(1)    2/   20000 :                     ; -------------------------------------------------------------------
(1)    3/   20000 :                     ; GEMA/Nikona PCM instruments for Sega CD and CD32X
(1)    4/   20000 :                     ;
(1)    5/   20000 :                     ; Stored on DISC and loaded to Sub-CPU on boot
(1)    6/   20000 :                     ;
(1)    7/   20000 :                     ; MACRO:
(1)    8/   20000 :                     ; gSmplData Label,"file_path",loop_start
(1)    9/   20000 :                     ;
(1)   10/   20000 :                     ; Set loop_start to 0 if not using it.
(1)   11/   20000 :                     ;
(1)   12/   20000 :                     ; BASE C-5 samplerate is 16000hz
(1)   13/   20000 :                     ; -------------------------------------------------------------------
(1)   14/   20000 :                     
(1)   15/   20000 :                     	align 4
(1)   16/   20000 :                     	;gSmplData Label,"file_path",loop_start
(1)   17/   20000 :                     ; -----------------------------------------------------------
(1)   18/   20000 :                     
(1)   19/   20000 : (MACRO)              	gSmplData PcmIns_Trumpet1,"sound/instr/smpl/trumpet1.wav",27625
(1)   19/   20000 :                                     align 4
(1)   19/   20000 : =$20000              PCMINS_TRUMPET1    label *
(1)   19/   20000 : 65A0 00                     dc.b ((PCMINS_TRUMPET1_e-PCMINS_TRUMPET1_s)&$FF),(((PCMINS_TRUMPET1_e-PCMINS_TRUMPET1_s)>>8)&$FF),(((PCMINS_TRUMPET1_e-PCMINS_TRUMPET1_s)>>16)&$FF)
(1)   19/   20003 : E96B 00                     dc.b ((27625)&$FF),(((27625)>>8)&$FF),(((27625)>>16)&$FF)
(1)   19/   20006 :                     PCMINS_TRUMPET1_s:
(1)   19/   20006 :                             binclude "sound/instr/smpl/trumpet1.wav",$2C
(1)   19/   2A06B :                     PCMINS_TRUMPET1_e:
(1)   19/   2A06B :                                     align 4
(1)   20/   2A06C : (MACRO)              	gSmplData PcmIns_BBoxHats,"sound/instr/smpl/hats_bbox.wav",0
(1)   20/   2A06C :                                     align 4
(1)   20/   2A06C : =$2A06C              PCMINS_BBOXHATS    label *
(1)   20/   2A06C : 2408 00                     dc.b ((PCMINS_BBOXHATS_e-PCMINS_BBOXHATS_s)&$FF),(((PCMINS_BBOXHATS_e-PCMINS_BBOXHATS_s)>>8)&$FF),(((PCMINS_BBOXHATS_e-PCMINS_BBOXHATS_s)>>16)&$FF)
(1)   20/   2A06F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/   2A072 :                     PCMINS_BBOXHATS_s:
(1)   20/   2A072 :                             binclude "sound/instr/smpl/hats_bbox.wav",$2C
(1)   20/   2A896 :                     PCMINS_BBOXHATS_e:
(1)   20/   2A896 :                                     align 4
(1)   21/   2A898 : (MACRO)              	gSmplData PcmIns_Kick,"sound/instr/smpl/wegot_kick.wav",0
(1)   21/   2A898 :                                     align 4
(1)   21/   2A898 : =$2A898              PCMINS_KICK    label *
(1)   21/   2A898 : 7407 00                     dc.b ((PCMINS_KICK_e-PCMINS_KICK_s)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>8)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>16)&$FF)
(1)   21/   2A89B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/   2A89E :                     PCMINS_KICK_s:
(1)   21/   2A89E :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   21/   2B012 :                     PCMINS_KICK_e:
(1)   21/   2B012 :                                     align 4
(1)   22/   2B014 : (MACRO)              	gSmplData PcmIns_BBoxSnare,"sound/instr/smpl/snare_bbox.wav",0
(1)   22/   2B014 :                                     align 4
(1)   22/   2B014 : =$2B014              PCMINS_BBOXSNARE    label *
(1)   22/   2B014 : C408 00                     dc.b ((PCMINS_BBOXSNARE_e-PCMINS_BBOXSNARE_s)&$FF),(((PCMINS_BBOXSNARE_e-PCMINS_BBOXSNARE_s)>>8)&$FF),(((PCMINS_BBOXSNARE_e-PCMINS_BBOXSNARE_s)>>16)&$FF)
(1)   22/   2B017 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   22/   2B01A :                     PCMINS_BBOXSNARE_s:
(1)   22/   2B01A :                             binclude "sound/instr/smpl/snare_bbox.wav",$2C
(1)   22/   2B8DE :                     PCMINS_BBOXSNARE_e:
(1)   22/   2B8DE :                                     align 4
(1)   23/   2B8E0 :                     
(1)   24/   2B8E0 :                     
(1)   25/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_01,"sound/instr/smpl/sauron/01.wav",0
(1)   26/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_02,"sound/instr/smpl/sauron/02.wav",0
(1)   27/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_03,"sound/instr/smpl/sauron/03.wav",0
(1)   28/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_04,"sound/instr/smpl/sauron/04.wav",0
(1)   29/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_05,"sound/instr/smpl/sauron/05.wav",13988
(1)   30/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_06,"sound/instr/smpl/sauron/06.wav",0
(1)   31/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_07,"sound/instr/smpl/sauron/07.wav",0
(1)   32/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_08,"sound/instr/smpl/sauron/08.wav",0
(1)   33/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_09,"sound/instr/smpl/sauron/09.wav",0
(1)   34/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_10,"sound/instr/smpl/sauron/10.wav",0
(1)   35/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_11,"sound/instr/smpl/sauron/11.wav",0
(1)   36/   2B8E0 :                     ; 	gSmplData PcmIns_Sauron_12,"sound/instr/smpl/sauron/12.wav",0
(1)   37/   2B8E0 :                     
(1)   38/   2B8E0 :                     
     339/   2B8E0 :                     	; ------------------------------------------------
     340/   2B8E0 : (MACRO)              .here:		erreport "SUB-CPU DATA",.here,$80000
     341/   198E0 :                     		dephase
     342/   198E0 :                     		phase MCD_SMPDATA+(.here-$20000)
     343/   198E0 : (MACRO)              		fs_end
     343/   198E0 : 00                                  dc.b 0
     343/   198E1 :                                     align $800                      ; Filler sector
     344/   1A000 :                     MCD_SMPDATA_E:
     345/   1A000 : (MACRO)              		fs_end
     345/   1A000 : 00                                  dc.b 0
     345/   1A001 :                                     align $800                      ; Filler sector
     347/   1A800 :                     
     348/   1A800 :                     ; ====================================================================
     349/   1A800 :                     ; ----------------------------------------------------------------
     350/   1A800 :                     ; SH2 code sent to SDRAM area
     351/   1A800 :                     ; ----------------------------------------------------------------
     352/   1A800 :                     
     354/   1A800 :                     		align $800
     358/   1A800 :                     MARS_RAMCODE:
     360/   1A800 :                     	; ------------------------------------------------
     361/   1A800 :                     		include "system/mars/code.asm"
(1)    1/   1A800 :                     ; ===========================================================================
(1)    2/   1A800 :                     ; -------------------------------------------------------------------
(1)    3/   1A800 :                     ; MARS SH2 SDRAM section, CODE is shared for both SH2 CPUs
(1)    4/   1A800 :                     ;
(1)    5/   1A800 :                     ; comm port setup:
(1)    6/   1A800 :                     ; comm0-comm7  | FREE to USE
(1)    7/   1A800 :                     ;                If any ERROR occurs: the ports comm2 and comm4
(1)    8/   1A800 :                     ;                will return the a error number and the CPU
(1)    9/   1A800 :                     ;                who got the error.
(1)   10/   1A800 :                     ; comm8-comm11 | Reserved to Z80 for reading the PWM table
(1)   11/   1A800 :                     ; comm12       | Master CPU control (see master_loop)
(1)   12/   1A800 :                     ; comm14       | Slave CPU control (see slave_loop)
(1)   13/   1A800 :                     ; -------------------------------------------------------------------
(1)   14/   1A800 :                     
(1)   15/ 6000000 :                     		phase CS3	; We are at SDRAM
(1)   16/ 6000000 :                     		cpu SH7600
(1)   17/ 6000000 :                     
(1)   18/ 6000000 :                     ; ====================================================================
(1)   19/ 6000000 :                     ; --------------------------------------------------------
(1)   20/ 6000000 :                     ; Settings
(1)   21/ 6000000 :                     ; --------------------------------------------------------
(1)   22/ 6000000 :                     
(1)   23/ 6000000 : =$1                  SH2_DEBUG		equ 1			; Set to 1 too see if CPUs are active using comm's 0 and 1
(1)   24/ 6000000 : =$C0000800           STACK_MSTR		equ $C0000800		; !! Master's STACK point (OLD: CS3|$40000)
(1)   25/ 6000000 : =$C0000800           STACK_SLV		equ $C0000800		; !! Slave's STACK point (OLD: CS3|$3F800)
(1)   26/ 6000000 :                     
(1)   27/ 6000000 :                     ; ====================================================================
(1)   28/ 6000000 :                     ; ----------------------------------------------------------------
(1)   29/ 6000000 :                     ; Macros
(1)   30/ 6000000 :                     ; ----------------------------------------------------------------
(1)   31/ 6000000 :                     
(1)   32/ 6000000 :                     cpu_me macro color
(1)   33/ 6000000 :                     	if MARSCD=0	; <-- Doesn't work on FUSION
(1)   34/ 6000000 :                     		mov	#color,r1
(1)   35/ 6000000 :                     		mov	#_vdpreg,r2
(1)   36/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   37/ 6000000 :                     .hblk:		mov.b	@(vdpsts,r2),r0
(1)   38/ 6000000 :                     		tst	#HBLK,r0
(1)   39/ 6000000 :                     		bt	.hblk
(1)   40/ 6000000 :                     		mov.b	r1,@r3
(1)   41/ 6000000 :                     		nop
(1)   42/ 6000000 :                     	endif
(1)   43/ 6000000 :                     	endm
(1)   44/ 6000000 :                     
(1)   45/ 6000000 :                     ; ====================================================================
(1)   46/ 6000000 :                     ; ----------------------------------------------------------------
(1)   47/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   48/ 6000000 :                     ; ----------------------------------------------------------------
(1)   49/ 6000000 :                     
(1)   50/ 6000000 :                     		align 4
(1)   51/ 6000000 :                     SH2_Master:
(1)   52/ 6000000 : 0600 07CC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
          6000006 : 0800             
(1)   53/ 6000008 : 0600 07CC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
          600000E : 0800             
(1)   54/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   55/ 6000014 : 0000 0000           		dc.l 0				; Reserved
(1)   56/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   57/ 600001C : 2010 0400           		dc.l $20100400			; Reserved
(1)   58/ 6000020 : 2010 0420           		dc.l $20100420			; Reserved
(1)   59/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   60/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   61/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   62/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   63/ 6000034 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          600003A : 0000 0000 0000 
          6000040 : 0000 0000 0000 
          6000046 : 0000 0000 0000 
          600004C : 0000 0000 0000 
          6000052 : 0000 0000 0000    
(1)   64/ 6000058 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          600005E : 0000 0000 0000 
          6000064 : 0000 0000 0000 
          600006A : 0000 0000 0000 
          6000070 : 0000 0000 0000 
          6000076 : 0000 0000 0000    
(1)   65/ 600007C : 0000 0000           		dc.l 0
(1)   66/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   67/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   98/ 6000100 : 0600 0250            		dc.l master_irq			; Level 0 & 1 IRQ
(1)   99/ 6000104 : 0600 0250           		dc.l master_irq			; Level 2 & 3 IRQ
(1)  100/ 6000108 : 0600 0250           		dc.l master_irq			; Level 4 & 5 IRQ
(1)  101/ 600010C : 0600 0250           		dc.l master_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  102/ 6000110 : 0600 0250           		dc.l master_irq			; Level 8 & 9 IRQ: Command interupt
(1)  103/ 6000114 : 0600 0250           		dc.l master_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  104/ 6000118 : 0600 0250           		dc.l master_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  105/ 600011C : 0600 0250           		dc.l master_irq			; Level 14 & 15 IRQ: Reset Button
(1)  106/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  107/ 6000120 : 0600 0250           		dc.l master_irq			; Watchdog
(1)  108/ 6000124 : 0600 0250           		dc.l master_irq			; DMA
(1)  109/ 6000128 :                     
(1)  110/ 6000128 :                     ; ====================================================================
(1)  111/ 6000128 :                     ; ----------------------------------------------------------------
(1)  112/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  113/ 6000128 :                     ; ----------------------------------------------------------------
(1)  114/ 6000128 :                     
(1)  115/ 6000128 :                     		align 4
(1)  116/ 6000128 :                     SH2_Slave:
(1)  117/ 6000128 : 0600 0ED0 C000      		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
          600012E : 0800             
(1)  118/ 6000130 : 0600 0ED0 C000      		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
          6000136 : 0800             
(1)  119/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  120/ 600013C : 0000 0000           		dc.l 0				; Reserved
(1)  121/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  122/ 6000144 : 2010 0400           		dc.l $20100400			; Reserved
(1)  123/ 6000148 : 2010 0420           		dc.l $20100420			; Reserved
(1)  124/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  125/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  126/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  127/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  128/ 600015C : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          6000162 : 0000 0000 0000 
          6000168 : 0000 0000 0000 
          600016E : 0000 0000 0000 
          6000174 : 0000 0000 0000 
          600017A : 0000 0000 0000    
(1)  129/ 6000180 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          6000186 : 0000 0000 0000 
          600018C : 0000 0000 0000 
          6000192 : 0000 0000 0000 
          6000198 : 0000 0000 0000 
          600019E : 0000 0000 0000    
(1)  130/ 60001A4 : 0000 0000           		dc.l 0
(1)  131/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  132/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  163/ 6000228 : 0600 0278            		dc.l slave_irq			; Level 0 & 1 IRQ
(1)  164/ 600022C : 0600 0278           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  165/ 6000230 : 0600 0278           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  166/ 6000234 : 0600 0278           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  167/ 6000238 : 0600 0278           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  168/ 600023C : 0600 0278           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  169/ 6000240 : 0600 0278           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  170/ 6000244 : 0600 0278           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  171/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  172/ 6000248 : 0600 0278           		dc.l slave_irq			; Watchdog
(1)  173/ 600024C : 0600 0278           		dc.l slave_irq			; DMA
(1)  174/ 6000250 :                     
(1)  175/ 6000250 :                     ; ====================================================================
(1)  176/ 6000250 :                     ; ----------------------------------------------------------------
(1)  177/ 6000250 :                     ; IRQ on both SH2's
(1)  178/ 6000250 :                     ;
(1)  179/ 6000250 :                     ; r0-r1 are saved
(1)  180/ 6000250 :                     ; ----------------------------------------------------------------
(1)  181/ 6000250 :                     
(1)  182/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  183/ 6000250 :                     
(1)  184/ 6000250 :                     		align 4
(1)  185/ 6000250 :                     master_irq:
(1)  186/ 6000250 : 2F06                		mov	r0,@-r15
(1)  187/ 6000252 : 2F16                		mov	r1,@-r15
(1)  188/ 6000254 : 4F22                		sts	pr,@-r15
(1)  189/ 6000256 : 0002                		stc	sr,r0
(1)  190/ 6000258 : 4009                		shlr2	r0
(1)  191/ 600025A : C93C                		and	#$3C,r0
(1)  192/ 600025C : 6103                		mov	r0,r1
(1)  193/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  194/ 6000260 : 600C                		extu.b	r0,r0
(1)  195/ 6000262 : 400E                		ldc	r0,sr
(1)  196/ 6000264 : C70E                		mova	int_m_list,r0
(1)  197/ 6000266 : 301C                		add	r1,r0
(1)  198/ 6000268 : 6102                		mov	@r0,r1
(1)  199/ 600026A : 410B                		jsr	@r1
(1)  200/ 600026C : 0009                		nop
(1)  201/ 600026E : 4F26                		lds	@r15+,pr
(1)  202/ 6000270 : 61F6                		mov	@r15+,r1
(1)  203/ 6000272 : 60F6                		mov	@r15+,r0
(1)  204/ 6000274 : 002B                		rte
(1)  205/ 6000276 : 0009                		nop
(1)  206/ 6000278 :                     		align 4
(1)  207/ 6000278 :                     
(1)  208/ 6000278 :                     ; ====================================================================
(1)  209/ 6000278 :                     
(1)  210/ 6000278 :                     slave_irq:
(1)  211/ 6000278 : 2F06                		mov	r0,@-r15
(1)  212/ 600027A : 2F16                		mov	r1,@-r15
(1)  213/ 600027C : 4F22                		sts	pr,@-r15
(1)  214/ 600027E : 0002                		stc	sr,r0
(1)  215/ 6000280 : 4009                		shlr2	r0
(1)  216/ 6000282 : C93C                		and	#$3C,r0
(1)  217/ 6000284 : 6103                		mov	r0,r1
(1)  218/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  219/ 6000288 : 600C                		extu.b	r0,r0
(1)  220/ 600028A : 400E                		ldc	r0,sr
(1)  221/ 600028C : C714                		mova	int_s_list,r0
(1)  222/ 600028E : 301C                		add	r1,r0
(1)  223/ 6000290 : 6102                		mov	@r0,r1
(1)  224/ 6000292 : 410B                		jsr	@r1
(1)  225/ 6000294 : 0009                		nop
(1)  226/ 6000296 : 4F26                		lds	@r15+,pr
(1)  227/ 6000298 : 61F6                		mov	@r15+,r1
(1)  228/ 600029A : 60F6                		mov	@r15+,r0
(1)  229/ 600029C : 002B                		rte
(1)  230/ 600029E : 0009                		nop
(1)  231/ 60002A0 :                     		align 4
(1)  232/ 60002A0 :                     
(1)  233/ 60002A0 :                     ; ====================================================================
(1)  234/ 60002A0 :                     ; ------------------------------------------------
(1)  235/ 60002A0 :                     ; irq list
(1)  236/ 60002A0 :                     ; ------------------------------------------------
(1)  237/ 60002A0 :                     
(1)  238/ 60002A0 :                     		align 4
(1)  239/ 60002A0 :                     ;				  		  IRQ Level:
(1)  240/ 60002A0 :                     int_m_list:
(1)  241/ 60002A0 : 0600 0380           		dc.l m_irq_bad			; 0
(1)  242/ 60002A4 : 0600 0380           		dc.l m_irq_bad			; 1
(1)  243/ 60002A8 : 0600 0380           		dc.l m_irq_bad			; 2
(1)  244/ 60002AC : 0600 1A40           		dc.l m_irq_wdg			; 3 Watchdog
(1)  245/ 60002B0 : 0600 0380           		dc.l m_irq_bad			; 4
(1)  246/ 60002B4 : 0600 0398           		dc.l m_irq_dma			; 5 DMA exit
(1)  247/ 60002B8 : 0600 03D4           		dc.l m_irq_pwm			; 6
(1)  248/ 60002BC : 0600 03D4           		dc.l m_irq_pwm			; 7
(1)  249/ 60002C0 : 0600 03E4           		dc.l m_irq_cmd			; 8
(1)  250/ 60002C4 : 0600 03E4           		dc.l m_irq_cmd			; 9
(1)  251/ 60002C8 : 0600 0444           		dc.l m_irq_h			; A
(1)  252/ 60002CC : 0600 0444           		dc.l m_irq_h			; B
(1)  253/ 60002D0 : 0600 0454           		dc.l m_irq_v			; C
(1)  254/ 60002D4 : 0600 0454           		dc.l m_irq_v			; D
(1)  255/ 60002D8 : 0600 0470           		dc.l m_irq_vres			; E
(1)  256/ 60002DC : 0600 0470           		dc.l m_irq_vres			; F
(1)  257/ 60002E0 :                     int_s_list:
(1)  258/ 60002E0 : 0600 04F4           		dc.l s_irq_bad			; 0
(1)  259/ 60002E4 : 0600 04F4           		dc.l s_irq_bad			; 1
(1)  260/ 60002E8 : 0600 04F4           		dc.l s_irq_bad			; 2
(1)  261/ 60002EC : 0600 04F8           		dc.l s_irq_wdg			; 3 Watchdog
(1)  262/ 60002F0 : 0600 04F4           		dc.l s_irq_bad			; 4
(1)  263/ 60002F4 : 0600 0504           		dc.l s_irq_dma			; 5 DMA exit
(1)  264/ 60002F8 : C000 0000           		dc.l s_irq_pwm|$C0000000	; 6
(1)  265/ 60002FC : C000 0000           		dc.l s_irq_pwm|$C0000000	; 7
(1)  266/ 6000300 : 0600 0514           		dc.l s_irq_cmd			; 8
(1)  267/ 6000304 : 0600 0514           		dc.l s_irq_cmd			; 9
(1)  268/ 6000308 : 0600 074A           		dc.l s_irq_h			; A
(1)  269/ 600030C : 0600 074A           		dc.l s_irq_h			; B
(1)  270/ 6000310 : 0600 075C           		dc.l s_irq_v			; C
(1)  271/ 6000314 : 0600 075C           		dc.l s_irq_v			; D
(1)  272/ 6000318 : 0600 076C           		dc.l s_irq_vres			; E
(1)  273/ 600031C : 0600 076C           		dc.l s_irq_vres			; F
(1)  274/ 6000320 :                     
(1)  275/ 6000320 :                     ; ====================================================================
(1)  276/ 6000320 :                     ; ----------------------------------------------------------------
(1)  277/ 6000320 :                     ; Error handler
(1)  278/ 6000320 :                     ; ----------------------------------------------------------------
(1)  279/ 6000320 :                     
(1)  280/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  281/ 6000320 :                     ;
(1)  282/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  283/ 6000320 :                     ; comm4: PC counter
(1)  284/ 6000320 :                     ;
(1)  285/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  286/ 6000320 :                     ;        $00 - Master
(1)  287/ 6000320 :                     ;        $01 - Slave
(1)  288/ 6000320 :                     ;
(1)  289/ 6000320 :                     ; CODE | Error type:
(1)  290/ 6000320 :                     ;	 $00: Unknown error
(1)  291/ 6000320 :                     ;	 $01: Illegal instruction
(1)  292/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  293/ 6000320 :                     ;	 $03: Address error
(1)  294/ 6000320 :                     ;	 $04: DMA error
(1)  295/ 6000320 :                     ;	 $05: NMI vector
(1)  296/ 6000320 :                     ;	 $06: User break
(1)  297/ 6000320 :                     
(1)  298/ 6000320 :                     SH2_M_Error:
(1)  299/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  300/ 6000322 : E000                		mov	#0,r0
(1)  301/ 6000324 :                     SH2_M_ErrIllg:
(1)  302/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  303/ 6000326 : E001                		mov	#1,r0
(1)  304/ 6000328 :                     SH2_M_ErrInvl:
(1)  305/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  306/ 600032A : E002                		mov	#2,r0
(1)  307/ 600032C :                     SH2_M_ErrAddr:
(1)  308/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  309/ 600032E : E003                		mov	#3,r0
(1)  310/ 6000330 :                     SH2_M_ErrDma:
(1)  311/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  312/ 6000332 : E004                		mov	#4,r0
(1)  313/ 6000334 :                     SH2_M_ErrNmi:
(1)  314/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  315/ 6000336 : E005                		mov	#5,r0
(1)  316/ 6000338 :                     SH2_M_ErrUser:
(1)  317/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  318/ 600033A : E006                		mov	#6,r0
(1)  319/ 600033C :                     ; r0 - value
(1)  320/ 600033C :                     SH2_M_ErrCode:
(1)  321/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  322/ 600033E : 2101                		mov.w	r0,@r1
(1)  323/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  324/ 6000342 : 60F2                		mov	@r15,r0
(1)  325/ 6000344 : 2102                		mov	r0,@r1
(1)  326/ 6000346 : AFFE                		bra	*
(1)  327/ 6000348 : 0009                		nop
(1)  328/ 600034A :                     		align 4
(1)  329/ 600034C :                     
(1)  330/ 600034C :                     ; ----------------------------------------------------
(1)  331/ 600034C :                     
(1)  332/ 600034C :                     SH2_S_Error:
(1)  333/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  334/ 600034E : E000                		mov	#0,r0
(1)  335/ 6000350 :                     SH2_S_ErrIllg:
(1)  336/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  337/ 6000352 : E0FF                		mov	#-1,r0
(1)  338/ 6000354 :                     SH2_S_ErrInvl:
(1)  339/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  340/ 6000356 : E0FE                		mov	#-2,r0
(1)  341/ 6000358 :                     SH2_S_ErrAddr:
(1)  342/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  343/ 600035A : E0FD                		mov	#-3,r0
(1)  344/ 600035C :                     SH2_S_ErrDma:
(1)  345/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  346/ 600035E : E0FC                		mov	#-4,r0
(1)  347/ 6000360 :                     SH2_S_ErrNmi:
(1)  348/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  349/ 6000362 : E0FB                		mov	#-5,r0
(1)  350/ 6000364 :                     SH2_S_ErrUser:
(1)  351/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  352/ 6000366 : E0FA                		mov	#-6,r0
(1)  353/ 6000368 :                     ; r0 - value
(1)  354/ 6000368 :                     SH2_S_ErrCode:
(1)  355/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  356/ 600036A : 2101                		mov.w	r0,@r1
(1)  357/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  358/ 600036E : 60F2                		mov	@r15,r0
(1)  359/ 6000370 : 2102                		mov	r0,@r1
(1)  360/ 6000372 : AFFE                		bra	*
(1)  361/ 6000374 : 0009                		nop
(1)  362/ 6000376 :                     		align 4
(1)  363/ 6000378 : 2000 4022 2000      		ltorg
          600037E : 4024             
(1)  364/ 6000380 :                     
(1)  365/ 6000380 :                     ; ====================================================================
(1)  366/ 6000380 :                     ; ----------------------------------------------------------------
(1)  367/ 6000380 :                     ; Interrupts
(1)  368/ 6000380 :                     ; ----------------------------------------------------------------
(1)  369/ 6000380 :                     
(1)  370/ 6000380 :                     ; =================================================================
(1)  371/ 6000380 :                     ; ------------------------------------------------
(1)  372/ 6000380 :                     ; Master | Unused interrupt
(1)  373/ 6000380 :                     ; ------------------------------------------------
(1)  374/ 6000380 :                     
(1)  375/ 6000380 :                     		align 4
(1)  376/ 6000380 :                     m_irq_bad:
(1)  377/ 6000380 : 91B0                		mov	#_FRT,r1
(1)  378/ 6000382 : 8417                		mov.b	@(7,r1),r0
(1)  379/ 6000384 : CA02                		xor	#2,r0
(1)  380/ 6000386 : 8017                		mov.b	r0,@(7,r1)
(1)  381/ 6000388 : 0009                		nop
(1)  382/ 600038A : 0009                		nop
(1)  383/ 600038C : 0009                		nop
(1)  384/ 600038E : 0009                		nop
(1)  385/ 6000390 : 0009                		nop
(1)  386/ 6000392 : 000B                		rts
(1)  387/ 6000394 : 0009                		nop
(1)  388/ 6000396 :                     		align 4
(1)  389/ 6000398 :                     
(1)  390/ 6000398 :                     ; ; =================================================================
(1)  391/ 6000398 :                     ; ; ------------------------------------------------
(1)  392/ 6000398 :                     ; ; Master | Watchdog
(1)  393/ 6000398 :                     ; ; ------------------------------------------------
(1)  394/ 6000398 :                     ;
(1)  395/ 6000398 :                     ; MOVED TO video.asm
(1)  396/ 6000398 :                     ; m_irq_wdg:
(1)  397/ 6000398 :                     ; 		mov	#_FRT,r1
(1)  398/ 6000398 :                     ; 		mov.b	@(7,r1),r0
(1)  399/ 6000398 :                     ; 		xor	#2,r0
(1)  400/ 6000398 :                     ; 		mov.b	r0,@(7,r1)
(1)  401/ 6000398 :                     ; 		nop
(1)  402/ 6000398 :                     ; 		nop
(1)  403/ 6000398 :                     ; 		nop
(1)  404/ 6000398 :                     ; 		nop
(1)  405/ 6000398 :                     ; 		nop
(1)  406/ 6000398 :                     ; 		rts
(1)  407/ 6000398 :                     ; 		nop
(1)  408/ 6000398 :                     ; 		align 4
(1)  409/ 6000398 :                     
(1)  410/ 6000398 :                     ; =================================================================
(1)  411/ 6000398 :                     ; ------------------------------------------------
(1)  412/ 6000398 :                     ; Master | DMA Exit
(1)  413/ 6000398 :                     ; ------------------------------------------------
(1)  414/ 6000398 :                     
(1)  415/ 6000398 :                     m_irq_dma:
(1)  416/ 6000398 : 91A4                		mov	#_FRT,r1
(1)  417/ 600039A : 8417                		mov.b	@(7,r1),r0
(1)  418/ 600039C : CA02                		xor	#2,r0
(1)  419/ 600039E : 8017                		mov.b	r0,@(7,r1)
(1)  420/ 60003A0 : E18C                		mov	#_DMACHANNEL0,r1
(1)  421/ 60003A2 : 6012                .wait_dma:	mov	@r1,r0				; <-- Fail-safe
(1)  422/ 60003A4 : C802                		tst	#%10,r0
(1)  423/ 60003A6 : 89FC                		bt	.wait_dma
(1)  424/ 60003A8 : 6012                		mov	@r1,r0				; Dummy read
(1)  425/ 60003AA : 909C                		mov	#%0100010011100000,r0
(1)  426/ 60003AC : 2102                		mov	r0,@r1				; Turn this DMA off.
(1)  427/ 60003AE : D141                		mov	#_sysreg+comm12,r1
(1)  428/ 60003B0 : 6010                		mov.b	@r1,r0
(1)  429/ 60003B2 : C9BF                		and	#%10111111,r0			; Report EXIT status
(1)  430/ 60003B4 : 2100                		mov.b	r0,@r1
(1)  432/ 60003B6 : C508                		mov.w	@(marsGbl_WdgActive,gbr),r0
(1)  433/ 60003B8 : 2008                		tst	r0,r0
(1)  434/ 60003BA : 8904                		bt	.not_use
(1)  435/ 60003BC : 9194                		mov.w	#$FE80,r1		; $FFFFFE80
(1)  436/ 60003BE : 9094                		mov.w	#$5A00|$18,r0		; Watchdog timer
(1)  437/ 60003C0 : 2101                		mov.w	r0,@r1
(1)  438/ 60003C2 : 9093                		mov.w	#$A538,r0		; Enable Watchdog
(1)  439/ 60003C4 : 2101                		mov.w	r0,@r1
(1)  440/ 60003C6 :                     .not_use:
(1)  442/ 60003C6 : 0009                		nop
(1)  443/ 60003C8 : 0009                		nop
(1)  444/ 60003CA : 0009                		nop
(1)  445/ 60003CC : 0009                		nop
(1)  446/ 60003CE : 0009                		nop
(1)  447/ 60003D0 : 000B                		rts
(1)  448/ 60003D2 : 0009                		nop
(1)  449/ 60003D4 :                     		align 4
(1)  450/ 60003D4 :                     
(1)  451/ 60003D4 :                     ; =================================================================
(1)  452/ 60003D4 :                     ; ------------------------------------------------
(1)  453/ 60003D4 :                     ; Master | PWM Interrupt
(1)  454/ 60003D4 :                     ; ------------------------------------------------
(1)  455/ 60003D4 :                     
(1)  456/ 60003D4 :                     m_irq_pwm:
(1)  457/ 60003D4 : 9186                		mov	#_FRT,r1
(1)  458/ 60003D6 : 8417                		mov.b	@(7,r1),r0
(1)  459/ 60003D8 : CA02                		xor	#2,r0
(1)  460/ 60003DA : 8017                		mov.b	r0,@(7,r1)
(1)  461/ 60003DC : D136                		mov	#_sysreg+pwmintclr,r1
(1)  462/ 60003DE : 2101                		mov.w	r0,@r1
(1)  463/ 60003E0 : 000B                		rts
(1)  464/ 60003E2 : 0009                		nop
(1)  465/ 60003E4 :                     		align 4
(1)  466/ 60003E4 :                     
(1)  467/ 60003E4 :                     ; =================================================================
(1)  468/ 60003E4 :                     ; ------------------------------------------------
(1)  469/ 60003E4 :                     ; Master | CMD Interrupt
(1)  470/ 60003E4 :                     ; ------------------------------------------------
(1)  471/ 60003E4 :                     
(1)  472/ 60003E4 :                     m_irq_cmd:
(1)  473/ 60003E4 : 917E                		mov	#_FRT,r1
(1)  474/ 60003E6 : 8417                		mov.b	@(7,r1),r0
(1)  475/ 60003E8 : CA02                		xor	#2,r0
(1)  476/ 60003EA : 8017                		mov.b	r0,@(7,r1)
(1)  477/ 60003EC : D133                		mov	#_sysreg+cmdintclr,r1
(1)  478/ 60003EE : 2101                		mov.w	r0,@r1
(1)  479/ 60003F0 : 6011                		mov.w	@r1,r0
(1)  480/ 60003F2 : 2F26                		mov	r2,@-r15
(1)  481/ 60003F4 : 2F36                		mov	r3,@-r15
(1)  482/ 60003F6 : 2F46                		mov	r4,@-r15
(1)  483/ 60003F8 :                     	; --------------------------------
(1)  485/ 60003F8 :                     ; 		mov	#1,r0				; Pause watchdog
(1)  486/ 60003F8 :                     ; 		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1)  487/ 60003F8 : C508                		mov.w	@(marsGbl_WdgActive,gbr),r0
(1)  488/ 60003FA : 2008                		tst	r0,r0
(1)  489/ 60003FC : 8902                		bt	.wdg_inuse
(1)  490/ 60003FE : 9173                		mov.w   #$FE80,r1			; Disable Watchdog
(1)  491/ 6000400 : 9075                		mov.w   #$A518,r0
(1)  492/ 6000402 : 2101                		mov.w   r0,@r1
(1)  493/ 6000404 :                     .wdg_inuse:
(1)  495/ 6000404 :                     	; --------------------------------
(1)  496/ 6000404 : D42E                		mov	#_sysreg,r4			; r4 - sysreg base
(1)  497/ 6000406 : E380                		mov	#_DMASOURCE0,r3			; r3 - DMA base register
(1)  498/ 6000408 : D22A                		mov	#_sysreg+comm12,r2		; r2 - comm to write the signal
(1)  499/ 600040A : 906C                		mov	#%0100010011100000,r0		; Transfer mode + DMA enable OFF
(1)  500/ 600040C : 1303                		mov	r0,@($C,r3)
(1)  501/ 600040E : 6020                		mov.b	@r2,r0
(1)  502/ 6000410 : C90F                		and	#%00001111,r0
(1)  503/ 6000412 : 2008                		tst	r0,r0				; CMD mode $00?
(1)  504/ 6000414 : 8B03                		bf	.dreq_ram
(1)  505/ 6000416 : 5043                		mov	@(dreqdest,r4),r0		; Set destination
(1)  506/ 6000418 : D12A                		mov	#CS3,r1
(1)  507/ 600041A : A001                		bra	.dreq_setdest
(1)  508/ 600041C : 201B                		or	r1,r0
(1)  509/ 600041E :                     .dreq_ram:
(1)  510/ 600041E : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Pick current WRITE buffer
(1)  511/ 6000420 :                     .dreq_setdest:
(1)  512/ 6000420 : D129                		mov	#TH,r1				; as Cache-thru
(1)  513/ 6000422 : 201B                		or	r1,r0
(1)  514/ 6000424 : 1301                		mov	r0,@(4,r3)			; Set Destination
(1)  515/ 6000426 : 8548                		mov.w	@(dreqlen,r4),r0
(1)  516/ 6000428 : 600D                		extu.w	r0,r0
(1)  517/ 600042A : 1302                		mov	r0,@(8,r3)			; Length set by 68k
(1)  518/ 600042C : D127                		mov	#_sysreg+dreqfifo,r1
(1)  519/ 600042E : 2312                		mov	r1,@r3				; Source point: DREQ FIFO
(1)  520/ 6000430 : 905E                		mov	#%0100010011100101,r0		; Transfer mode + DMA enable + Use DMA interrupt
(1)  521/ 6000432 :                     ; 		mov	#%0100010011100001,r0		; Transfer mode + DMA enable
(1)  522/ 6000432 : 1303                		mov	r0,@($C,r3)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  523/ 6000434 : 6020                		mov.b	@r2,r0
(1)  524/ 6000436 : CB40                		or	#%01000000,r0			; Report ENTER status
(1)  525/ 6000438 : 2200                		mov.b	r0,@r2
(1)  526/ 600043A :                     
(1)  527/ 600043A :                     	; ********************************
(1)  528/ 600043A :                     	; Wait here if NOT using
(1)  529/ 600043A :                     	; DMA interrupt
(1)  530/ 600043A :                     	; ********************************
(1)  531/ 600043A :                     ; 		mov	#_DMACHANNEL0,r1
(1)  532/ 600043A :                     ; .wait_dma:
(1)  533/ 600043A :                     ; 		mov	@r1,r0
(1)  534/ 600043A :                     ; 		tst	#%10,r0
(1)  535/ 600043A :                     ; 		bt	.wait_dma
(1)  536/ 600043A :                     ; 		mov	@r1,r0				; Dummy read
(1)  537/ 600043A :                     ; 		mov	#%0100010011100000,r0
(1)  538/ 600043A :                     ; 		mov	r0,@r1
(1)  539/ 600043A :                     ; 		mov	#_sysreg+comm12,r1
(1)  540/ 600043A :                     ; 		mov.b	@r1,r0
(1)  541/ 600043A :                     ; 		and	#%10111111,r0			; Report EXIT status
(1)  542/ 600043A :                     ; 		mov.b	r0,@r1
(1)  543/ 600043A :                     	; ********************************
(1)  544/ 600043A :                     
(1)  545/ 600043A :                     	; --------------------------------
(1)  546/ 600043A : 64F6                		mov	@r15+,r4
(1)  547/ 600043C : 63F6                		mov	@r15+,r3
(1)  548/ 600043E : 62F6                		mov	@r15+,r2
(1)  549/ 6000440 : 000B                		rts
(1)  550/ 6000442 : 0009                		nop
(1)  551/ 6000444 :                     		align 4
(1)  552/ 6000444 :                     
(1)  553/ 6000444 :                     ; =================================================================
(1)  554/ 6000444 :                     ; ------------------------------------------------
(1)  555/ 6000444 :                     ; Master | HBlank
(1)  556/ 6000444 :                     ; ------------------------------------------------
(1)  557/ 6000444 :                     
(1)  558/ 6000444 :                     m_irq_h:
(1)  559/ 6000444 : 914E                		mov	#_FRT,r1
(1)  560/ 6000446 : 8417                		mov.b	@(7,r1),r0
(1)  561/ 6000448 : CA02                		xor	#2,r0
(1)  562/ 600044A : 8017                		mov.b	r0,@(7,r1)
(1)  563/ 600044C : D120                		mov	#_sysreg+hintclr,r1
(1)  564/ 600044E : 2101                		mov.w	r0,@r1
(1)  565/ 6000450 : 000B                		rts
(1)  566/ 6000452 : 0009                		nop
(1)  567/ 6000454 :                     		align 4
(1)  568/ 6000454 :                     
(1)  569/ 6000454 :                     ; =================================================================
(1)  570/ 6000454 :                     ; ------------------------------------------------
(1)  571/ 6000454 :                     ; Master | VBlank
(1)  572/ 6000454 :                     ; ------------------------------------------------
(1)  573/ 6000454 :                     
(1)  574/ 6000454 :                     m_irq_v:
(1)  575/ 6000454 : 9146                		mov	#_FRT,r1
(1)  576/ 6000456 : 8417                		mov.b	@(7,r1),r0
(1)  577/ 6000458 : CA02                		xor	#2,r0
(1)  578/ 600045A : 8017                		mov.b	r0,@(7,r1)
(1)  579/ 600045C : D11D                		mov	#_sysreg+vintclr,r1
(1)  580/ 600045E : 2101                		mov.w	r0,@r1
(1)  581/ 6000460 : 0009                		nop
(1)  582/ 6000462 : 0009                		nop
(1)  583/ 6000464 : 0009                		nop
(1)  584/ 6000466 : 0009                		nop
(1)  585/ 6000468 : 0009                		nop
(1)  586/ 600046A : 000B                		rts
(1)  587/ 600046C : 0009                		nop
(1)  588/ 600046E :                     		align 4
(1)  589/ 6000470 :                     
(1)  590/ 6000470 :                     ; =================================================================
(1)  591/ 6000470 :                     ; ------------------------------------------------
(1)  592/ 6000470 :                     ; Master | VRES Interrupt (RESET button)
(1)  593/ 6000470 :                     ; ------------------------------------------------
(1)  594/ 6000470 :                     
(1)  595/ 6000470 :                     m_irq_vres:
(1)  596/ 6000470 : D113                		mov	#_sysreg,r1
(1)  597/ 6000472 : 60F3                		mov	r15,r0
(1)  598/ 6000474 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  599/ 6000476 : 8513                		mov.w	@(dreqctl,r1),r0
(1)  600/ 6000478 : C801                		tst	#1,r0
(1)  601/ 600047A : 8B15                		bf	.rv_busy
(1)  602/ 600047C : E0F0                		mov.b	#$F0,r0			; ** $F0
(1)  603/ 600047E : 600C                		extu.b	r0,r0
(1)  604/ 6000480 : 400E                		ldc	r0,sr
(1)  605/ 6000482 : E000                		mov	#0,r0
(1)  606/ 6000484 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  607/ 6000486 : 2102                		mov	r0,@r1
(1)  608/ 6000488 : D10A                		mov	#_sysreg+comm12,r1	; Clear our comm
(1)  609/ 600048A : 2101                		mov.w	r0,@r1
(1)  610/ 600048C : 912C                		mov.w	#$FE80,r1		; $FFFFFE80
(1)  611/ 600048E : 902E                		mov.w	#$A518,r0		; Disable Watchdog
(1)  612/ 6000490 : 2101                		mov.w	r0,@r1
(1)  613/ 6000492 : DF11                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  614/ 6000494 : D011                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  615/ 6000496 : 2F02                		mov	r0,@r15
(1)  616/ 6000498 : 902B                		mov.w   #$F0,r0
(1)  617/ 600049A : 1F01                		mov	r0,@(4,r15)
(1)  618/ 600049C : D108                		mov	#_sysreg,r1		; Report Master as OK
(1)  619/ 600049E : D010                		mov	#"M_OK",r0
(1)  620/ 60004A0 : 1108                		mov	r0,@(comm0,r1)
(1)  621/ 60004A2 : 002B                		rte
(1)  622/ 60004A4 : 0009                		nop
(1)  623/ 60004A6 :                     		align 4
(1)  624/ 60004A8 :                     .rv_busy:
(1)  625/ 60004A8 : 911C                		mov	#_FRT,r1		; *** MASTER ONLY _FRT ***
(1)  626/ 60004AA : 8417                		mov.b	@(7,r1),r0
(1)  627/ 60004AC : CB01                		or	#1,r0
(1)  628/ 60004AE : 8017                		mov.b	r0,@(7,r1)
(1)  629/ 60004B0 : AFFE                		bra	*
(1)  630/ 60004B2 : 0009                		nop
(1)  631/ 60004B4 :                     		align 4
(1)  632/ 60004B4 : 2000 402C 2000      		ltorg
          60004BA : 401C 2000 401A 
          60004C0 : 2000 4000 0600 
          60004C6 : 0000 2000 0000 
          60004CC : 2000 4012 2000 
          60004D2 : 4018 2000 4016 
          60004D8 : C000 07F8 0600 
          60004DE : 085C 4D5F 4F4B 
          60004E4 : FE10 44E0 FE80 
          60004EA : 5A18 A538 A518 
          60004F0 : 44E5 00F0          
(1)  633/ 60004F4 :                     
(1)  634/ 60004F4 :                     ; =================================================================
(1)  635/ 60004F4 :                     ; ------------------------------------------------
(1)  636/ 60004F4 :                     ; Slave | Unused Interrupt
(1)  637/ 60004F4 :                     ; ------------------------------------------------
(1)  638/ 60004F4 :                     
(1)  639/ 60004F4 :                     		align 4
(1)  640/ 60004F4 :                     s_irq_bad:
(1)  641/ 60004F4 : 000B                		rts
(1)  642/ 60004F6 : 0009                		nop
(1)  643/ 60004F8 :                     		align 4
(1)  644/ 60004F8 :                     
(1)  645/ 60004F8 :                     ; =================================================================
(1)  646/ 60004F8 :                     ; ------------------------------------------------
(1)  647/ 60004F8 :                     ; Slave | Watchdog
(1)  648/ 60004F8 :                     ; ------------------------------------------------
(1)  649/ 60004F8 :                     
(1)  650/ 60004F8 :                     s_irq_wdg:
(1)  651/ 60004F8 : 910A                		mov	#_FRT,r1
(1)  652/ 60004FA : 8417                		mov.b	@(7,r1),r0
(1)  653/ 60004FC : CA02                		xor	#2,r0
(1)  654/ 60004FE : 8017                		mov.b	r0,@(7,r1)
(1)  655/ 6000500 : 000B                		rts
(1)  656/ 6000502 : 0009                		nop
(1)  657/ 6000504 :                     		align 4
(1)  658/ 6000504 :                     
(1)  659/ 6000504 :                     ; =================================================================
(1)  660/ 6000504 :                     ; ------------------------------------------------
(1)  661/ 6000504 :                     ; Slave | DMA Exit
(1)  662/ 6000504 :                     ; ------------------------------------------------
(1)  663/ 6000504 :                     
(1)  664/ 6000504 :                     		align 4
(1)  665/ 6000504 :                     s_irq_dma:
(1)  666/ 6000504 : 9104                		mov	#_FRT,r1
(1)  667/ 6000506 : 8417                		mov.b	@(7,r1),r0
(1)  668/ 6000508 : CA02                		xor	#2,r0
(1)  669/ 600050A : 8017                		mov.b	r0,@(7,r1)
(1)  670/ 600050C : 000B                		rts
(1)  671/ 600050E : 0009                		nop
(1)  672/ 6000510 :                     		align 4
(1)  673/ 6000510 :                     
(1)  674/ 6000510 :                     ; =================================================================
(1)  675/ 6000510 :                     ; ------------------------------------------------
(1)  676/ 6000510 :                     ; Slave | PWM Interrupt
(1)  677/ 6000510 :                     ; ------------------------------------------------
(1)  678/ 6000510 :                     
(1)  679/ 6000510 :                     ; located on cache/cache_slv.asm
(1)  680/ 6000510 :                     ;
(1)  681/ 6000510 :                     ; s_irq_pwm:
(1)  682/ 6000510 : FE10                		ltorg	; Save literals
(1)  683/ 6000512 :                     
(1)  684/ 6000512 :                     ; =================================================================
(1)  685/ 6000512 :                     ; ------------------------------------------------
(1)  686/ 6000512 :                     ; Slave | CMD Interrupt
(1)  687/ 6000512 :                     ; ------------------------------------------------
(1)  688/ 6000512 :                     
(1)  689/ 6000512 :                     		align 4
(1)  690/ 6000514 :                     s_irq_cmd:
(1)  691/ 6000514 : 911C                		mov	#_FRT,r1
(1)  692/ 6000516 : 8417                		mov.b	@(7,r1),r0
(1)  693/ 6000518 : CA02                		xor	#2,r0
(1)  694/ 600051A : 8017                		mov.b	r0,@(7,r1)
(1)  695/ 600051C : D10A                		mov	#_sysreg+cmdintclr,r1
(1)  696/ 600051E : 2101                		mov.w	r0,@r1
(1)  697/ 6000520 : 6011                		mov.w	@r1,r0
(1)  698/ 6000522 :                     	; --------------------------------
(1)  699/ 6000522 : 2F26                		mov	r2,@-r15
(1)  700/ 6000524 : 2F36                		mov	r3,@-r15
(1)  701/ 6000526 : 2F46                		mov	r4,@-r15
(1)  702/ 6000528 : 2F56                		mov	r5,@-r15
(1)  703/ 600052A : 2F66                		mov	r6,@-r15
(1)  704/ 600052C : 2F76                		mov	r7,@-r15
(1)  705/ 600052E : 2F86                		mov	r8,@-r15
(1)  706/ 6000530 : 4F22                		sts	pr,@-r15
(1)  707/ 6000532 : D106                		mov	#_sysreg+comm14,r1
(1)  708/ 6000534 : 6010                		mov.b	@r1,r0
(1)  709/ 6000536 : C90F                		and	#%00001111,r0
(1)  710/ 6000538 : 4008                		shll2	r0
(1)  711/ 600053A : 6103                		mov	r0,r1
(1)  712/ 600053C : C705                		mova	scmd_tasks,r0
(1)  713/ 600053E : 301C                		add	r1,r0
(1)  714/ 6000540 : 6102                		mov	@r0,r1
(1)  715/ 6000542 : 412B                		jmp	@r1
(1)  716/ 6000544 : 0009                		nop
(1)  717/ 6000546 :                     		align 4
(1)  718/ 6000548 : 2000 401A 2000      		ltorg
          600054E : 402E FE10          
(1)  719/ 6000552 :                     
(1)  720/ 6000552 :                     ; --------------------------------
(1)  721/ 6000552 :                     
(1)  722/ 6000552 :                     		align 4
(1)  723/ 6000554 :                     scmd_tasks:
(1)  724/ 6000554 : 0600 0564           		dc.l .scmd_task00	; NULL
(1)  725/ 6000558 : 0600 05F4           		dc.l .scmd_task01	; PWM table transfer and update
(1)  726/ 600055C : 0600 0568           		dc.l .scmd_task02	; PWM RV backup
(1)  727/ 6000560 : 0600 05D4           		dc.l .scmd_task03	; PWM RV restore
(1)  728/ 6000564 :                     
(1)  729/ 6000564 :                     ; --------------------------------
(1)  730/ 6000564 :                     ; Task $00
(1)  731/ 6000564 :                     ; --------------------------------
(1)  732/ 6000564 :                     
(1)  733/ 6000564 :                     .scmd_task00:
(1)  734/ 6000564 : A0CB                		bra	.exit_scmd
(1)  735/ 6000566 : 0009                		nop
(1)  736/ 6000568 :                     
(1)  737/ 6000568 :                     ; --------------------------------
(1)  738/ 6000568 :                     ; Task $02
(1)  739/ 6000568 :                     ; --------------------------------
(1)  740/ 6000568 :                     
(1)  741/ 6000568 :                     .scmd_task02:
(1)  742/ 6000568 : D46B                		mov	#RAM_Mars_PwmBackup,r4
(1)  743/ 600056A : D86C                		mov	#RAM_Mars_PwmList,r8
(1)  744/ 600056C : 97E6                		mov	#MAX_PWMCHNL,r7
(1)  745/ 600056E : 95E6                		mov	#$200,r5
(1)  746/ 6000570 :                     .next_one:
(1)  747/ 6000570 : 5080                		mov	@(marspwm_enbl,r8),r0	; PWM active?
(1)  748/ 6000572 : C880                		tst	#$80,r0
(1)  749/ 6000574 : 8926                		bt	.no_chnl
(1)  750/ 6000576 :                     
(1)  751/ 6000576 : 5182                		mov	@(marspwm_bank,r8),r1
(1)  752/ 6000578 : D069                		mov	#CS1,r0
(1)  753/ 600057A : 3100                		cmp/eq	r0,r1
(1)  754/ 600057C : 8B22                		bf	.no_chnl
(1)  755/ 600057E : 5081                		mov	@(marspwm_read,r8),r0
(1)  756/ 6000580 : 6603                		mov	r0,r6			; Save last read
(1)  757/ 6000582 : 4019                		shlr8	r0
(1)  758/ 6000584 : 201B                		or	r1,r0
(1)  759/ 6000586 : E1FC                		mov	#-4,r1
(1)  760/ 6000588 : 2019                		and	r1,r0
(1)  761/ 600058A : 6103                		mov	r0,r1
(1)  762/ 600058C : 6243                		mov	r4,r2
(1)  763/ 600058E : 6353                		mov	r5,r3
(1)  764/ 6000590 : 4309                		shlr2	r3			; /4
(1)  765/ 6000592 : 4301                		shlr	r3			; /2
(1)  766/ 6000594 :                     .copy_data:
(1)  767/ 6000594 : 6016                		mov	@r1+,r0
(1)  768/ 6000596 : 2202                		mov	r0,@r2
(1)  769/ 6000598 : 7204                		add	#4,r2
(1)  770/ 600059A : 6016                		mov	@r1+,r0
(1)  771/ 600059C : 2202                		mov	r0,@r2
(1)  772/ 600059E : 4310                		dt	r3
(1)  773/ 60005A0 : 8FF8                		bf/s	.copy_data
(1)  774/ 60005A2 : 7204                		add	#4,r2
(1)  775/ 60005A4 : 5381                		mov	@(marspwm_read,r8),r3
(1)  776/ 60005A6 : 6063                		mov	r6,r0
(1)  777/ 60005A8 : 4019                		shlr8	r0
(1)  778/ 60005AA : C903                		and	#%11,r0
(1)  779/ 60005AC : 4018                		shll8	r0
(1)  780/ 60005AE : E2FC                		mov	#-4,r2
(1)  781/ 60005B0 : 4218                		shll8	r2
(1)  782/ 60005B2 : 3368                		sub	r6,r3
(1)  783/ 60005B4 : 2329                		and	r2,r3
(1)  784/ 60005B6 : 330C                		add	r0,r3
(1)  785/ 60005B8 : 1839                		mov	r3,@(marspwm_cread,r8)
(1)  786/ 60005BA :                     
(1)  787/ 60005BA : 5080                		mov	@(marspwm_enbl,r8),r0	; Playback stopped here?
(1)  788/ 60005BC : C880                		tst	#%10000000,r0
(1)  789/ 60005BE : 8901                		bt	.no_chnl
(1)  790/ 60005C0 : CB40                		or	#%01000000,r0
(1)  791/ 60005C2 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  792/ 60005C4 :                     .no_chnl:
(1)  793/ 60005C4 : 90BC                		mov	#marspwm_len,r0
(1)  794/ 60005C6 : 380C                		add	r0,r8
(1)  795/ 60005C8 : 4710                		dt	r7
(1)  796/ 60005CA : 8FD1                		bf/s	.next_one
(1)  797/ 60005CC : 345C                		add	r5,r4
(1)  798/ 60005CE :                     
(1)  799/ 60005CE : A096                		bra	.exit_scmd
(1)  800/ 60005D0 : 0009                		nop
(1)  801/ 60005D2 :                     		align 4
(1)  802/ 60005D4 :                     
(1)  803/ 60005D4 :                     ; 		mov	#_DMASOURCE0,r7			; r4 - DMA base register
(1)  804/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  805/ 60005D4 :                     ; 		mov	#%0101000011100000,r0		; Transfer mode + DMA enable OFF
(1)  806/ 60005D4 :                     ; 		mov	r0,@($C,r7)
(1)  807/ 60005D4 :                     ; 		mov	r1,@r7				; Source point: DREQ FIFO
(1)  808/ 60005D4 :                     ; 		mov	r2,@(4,r7)			; Set Destination
(1)  809/ 60005D4 :                     ; 		mov	r3,@(8,r7)			; Length set by 68k
(1)  810/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  811/ 60005D4 :                     ; 		mov	#%0101000011100000|1,r0		; Transfer mode + DMA enable
(1)  812/ 60005D4 :                     ; 		mov	r0,@($C,r7)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  813/ 60005D4 :                     ; .wait_dma:
(1)  814/ 60005D4 :                     ; 		mov	@($C,r7),r0
(1)  815/ 60005D4 :                     ; 		tst	#%10,r0
(1)  816/ 60005D4 :                     ; 		bt	.wait_dma
(1)  817/ 60005D4 :                     ; 		mov	@($C,r7),r0			; Dummy read
(1)  818/ 60005D4 :                     ; 		mov	#%0101000011100000,r0
(1)  819/ 60005D4 :                     ; 		mov	r0,@($C,r7)
(1)  820/ 60005D4 :                     
(1)  821/ 60005D4 :                     ; --------------------------------
(1)  822/ 60005D4 :                     ; Task $03
(1)  823/ 60005D4 :                     ; --------------------------------
(1)  824/ 60005D4 :                     
(1)  825/ 60005D4 :                     .scmd_task03:
(1)  826/ 60005D4 : D853                		mov	#RAM_Mars_PwmList,r8
(1)  827/ 60005D6 : 97B4                		mov	#MAX_PWMCHNL,r7
(1)  828/ 60005D8 : 96B4                		mov	#marspwm_len,r6
(1)  829/ 60005DA :                     .next_out:
(1)  830/ 60005DA : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  831/ 60005DC : C880                		tst	#%10000000,r0
(1)  832/ 60005DE : 8904                		bt	.no_chnlo
(1)  833/ 60005E0 : C840                		tst	#%01000000,r0
(1)  834/ 60005E2 : 8902                		bt	.no_chnlo
(1)  835/ 60005E4 : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  836/ 60005E6 : C9BF                		and	#%10111111,r0
(1)  837/ 60005E8 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  838/ 60005EA :                     .no_chnlo:
(1)  839/ 60005EA : 4710                		dt	r7
(1)  840/ 60005EC : 8FF5                		bf/s	.next_out
(1)  841/ 60005EE : 386C                		add	r6,r8
(1)  842/ 60005F0 : A085                		bra	.exit_scmd
(1)  843/ 60005F2 : 0009                		nop
(1)  844/ 60005F4 :                     		align 4
(1)  845/ 60005F4 :                     
(1)  846/ 60005F4 :                     ; --------------------------------
(1)  847/ 60005F4 :                     ; Task $01
(1)  848/ 60005F4 :                     ; --------------------------------
(1)  849/ 60005F4 :                     
(1)  850/ 60005F4 :                     .scmd_task01:
(1)  851/ 60005F4 : D14C                		mov	#_sysreg+comm8,r1		; Input
(1)  852/ 60005F6 : D24D                		mov	#RAM_Mars_PwmTable,r2		; Output
(1)  853/ 60005F8 : D34D                		mov	#_sysreg+comm14,r3		; comm
(1)  854/ 60005FA : 0009                		nop
(1)  855/ 60005FC :                     .wait_1:
(1)  856/ 60005FC : 6030                		mov.b	@r3,r0
(1)  857/ 60005FE : C9C0                		and	#%11000000,r0
(1)  858/ 6000600 : C880                		tst	#%10000000,r0			; LOCK exit?
(1)  859/ 6000602 : 8908                		bt	.exit_c
(1)  860/ 6000604 : C840                		tst	#%01000000,r0			; Wait PASS
(1)  861/ 6000606 : 89F9                		bt	.wait_1
(1)  862/ 6000608 :                     .copy_1:
(1)  863/ 6000608 : 6012                		mov	@r1,r0				; Copy full longword
(1)  864/ 600060A : 2202                		mov	r0,@r2
(1)  865/ 600060C : 7204                		add	#4,r2				; Increment table pos
(1)  866/ 600060E : 6030                		mov.b	@r3,r0
(1)  867/ 6000610 : C9BF                		and	#%10111111,r0
(1)  868/ 6000612 : AFF3                		bra	.wait_1
(1)  869/ 6000614 : 2300                		mov.b	r0,@r3				; Clear PASS bit, Z80 loops
(1)  870/ 6000616 :                     .exit_c:
(1)  871/ 6000616 :                     
(1)  872/ 6000616 :                     ; --------------------------------
(1)  873/ 6000616 :                     ; Process table changes
(1)  874/ 6000616 :                     ; --------------------------------
(1)  875/ 6000616 :                     
(1)  876/ 6000616 :                     .proc_pwm:
(1)  877/ 6000616 : D847                		mov	#RAM_Mars_PwmTable,r8		; Input
(1)  878/ 6000618 : D747                		mov	#RAM_Mars_PwmList,r7		; Output
(1)  879/ 600061A : 9694                		mov	#MAX_PWMCHNL,r6
(1)  880/ 600061C :                     .next_chnl:
(1)  881/ 600061C : 6383                		mov	r8,r3				; r3 - current table column
(1)  882/ 600061E : 6030                		mov.b	@r3,r0				; r0: %kfo o-on f-off k-cut
(1)  883/ 6000620 : C91F                		and	#%00011111,r0
(1)  884/ 6000622 : 2008                		tst	r0,r0
(1)  885/ 6000624 : 8966                		bt	.no_chng
(1)  886/ 6000626 :                     .no_keycut:
(1)  887/ 6000626 : C802                		tst	#%00000010,r0
(1)  888/ 6000628 : 8B62                		bf	.is_keycut
(1)  889/ 600062A : C804                		tst	#%00000100,r0
(1)  890/ 600062C : 8B60                		bf	.is_keycut
(1)  891/ 600062E : C801                		tst	#%00000001,r0
(1)  892/ 6000630 : 8960                		bt	.no_chng
(1)  893/ 6000632 :                     
(1)  894/ 6000632 : C808                		tst	#%00001000,r0
(1)  895/ 6000634 : 8910                		bt	.no_pitchbnd
(1)  896/ 6000636 : 5070                		mov	@(marspwm_enbl,r7),r0
(1)  897/ 6000638 : C880                		tst	#$80,r0
(1)  898/ 600063A : 895B                		bt	.no_chng
(1)  899/ 600063C :                     ; 		mov	#0,r0
(1)  900/ 600063C :                     ; 		mov	r0,@(marspwm_enbl,r7)
(1)  901/ 600063C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  902/ 600063E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  903/ 6000640 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  904/ 6000642 : C9FC                		and	#%11111100,r0
(1)  905/ 6000644 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  906/ 6000646 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  907/ 6000648 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  908/ 600064A : 611C                		extu.b	r1,r1
(1)  909/ 600064C : 6023                		mov	r2,r0
(1)  910/ 600064E : C903                		and	#%11,r0
(1)  911/ 6000650 : 4018                		shll8	r0
(1)  912/ 6000652 : 201B                		or	r1,r0
(1)  913/ 6000654 : A04E                		bra	.no_chng
(1)  914/ 6000656 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  915/ 6000658 :                     
(1)  916/ 6000658 :                     .no_pitchbnd:
(1)  917/ 6000658 : E000                		mov	#0,r0
(1)  918/ 600065A : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  919/ 600065C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  920/ 600065E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  921/ 6000660 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  922/ 6000662 : C9FC                		and	#%11111100,r0
(1)  923/ 6000664 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  924/ 6000666 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  925/ 6000668 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  926/ 600066A : 611C                		extu.b	r1,r1
(1)  927/ 600066C : 6023                		mov	r2,r0
(1)  928/ 600066E : C903                		and	#%11,r0
(1)  929/ 6000670 : 4018                		shll8	r0
(1)  930/ 6000672 : 201B                		or	r1,r0
(1)  931/ 6000674 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  932/ 6000676 : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  933/ 6000678 : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  934/ 600067A : 6103                		mov	r0,r1			; Save aaaa-address
(1)  935/ 600067C : C9F0                		and	#%11110000,r0
(1)  936/ 600067E : 4009                		shlr2	r0
(1)  937/ 6000680 : 4009                		shlr2	r0
(1)  938/ 6000682 : CB80                		or	#$80,r0			; Set as Enabled
(1)  939/ 6000684 : 6403                		mov	r0,r4
(1)  940/ 6000686 : 6013                		mov	r1,r0
(1)  941/ 6000688 : C90F                		and	#%00001111,r0
(1)  942/ 600068A : 4028                		shll16	r0
(1)  943/ 600068C : 4018                		shll8	r0
(1)  944/ 600068E : 1702                		mov	r0,@(marspwm_bank,r7)
(1)  945/ 6000690 : 6103                		mov	r0,r1			; r1 - BANK
(1)  946/ 6000692 : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  947/ 6000694 : 6030                		mov.b	@r3,r0
(1)  948/ 6000696 : 600C                		extu.b	r0,r0
(1)  949/ 6000698 : 4028                		shll16	r0
(1)  950/ 600069A : 6203                		mov	r0,r2			; r2: $xx0000
(1)  951/ 600069C : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  952/ 600069E : 6030                		mov.b	@r3,r0
(1)  953/ 60006A0 : 600C                		extu.b	r0,r0
(1)  954/ 60006A2 : 4018                		shll8	r0
(1)  955/ 60006A4 : 220B                		or	r0,r2			; r2: $xxxx00
(1)  956/ 60006A6 : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  957/ 60006A8 : 6030                		mov.b	@r3,r0
(1)  958/ 60006AA : 600C                		extu.b	r0,r0
(1)  959/ 60006AC : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  960/ 60006AE : 310C                		add	r0,r1
(1)  961/ 60006B0 :                     	; Read LEN and LOOP
(1)  962/ 60006B0 : 6014                		mov.b	@r1+,r0
(1)  963/ 60006B2 : 630C                		extu.b	r0,r3
(1)  964/ 60006B4 : 6214                		mov.b	@r1+,r2
(1)  965/ 60006B6 : 622C                		extu.b	r2,r2
(1)  966/ 60006B8 : 4218                		shll8	r2
(1)  967/ 60006BA : 232B                		or	r2,r3
(1)  968/ 60006BC : 6214                		mov.b	@r1+,r2
(1)  969/ 60006BE : 622C                		extu.b	r2,r2
(1)  970/ 60006C0 : 4228                		shll16	r2
(1)  971/ 60006C2 : 232B                		or	r2,r3
(1)  972/ 60006C4 : 6014                		mov.b	@r1+,r0
(1)  973/ 60006C6 : 600C                		extu.b	r0,r0
(1)  974/ 60006C8 : 6214                		mov.b	@r1+,r2
(1)  975/ 60006CA : 622C                		extu.b	r2,r2
(1)  976/ 60006CC : 4218                		shll8	r2
(1)  977/ 60006CE : 202B                		or	r2,r0
(1)  978/ 60006D0 : 6214                		mov.b	@r1+,r2
(1)  979/ 60006D2 : 622C                		extu.b	r2,r2
(1)  980/ 60006D4 : 4228                		shll16	r2
(1)  981/ 60006D6 : 202B                		or	r2,r0
(1)  982/ 60006D8 : 4018                		shll8	r0
(1)  983/ 60006DA : 1705                		mov	r0,@(marspwm_loop,r7)
(1)  984/ 60006DC : 6013                		mov	r1,r0
(1)  985/ 60006DE : 4018                		shll8	r0
(1)  986/ 60006E0 : 1703                		mov	r0,@(marspwm_start,r7)
(1)  987/ 60006E2 : 1701                		mov	r0,@(marspwm_read,r7)
(1)  988/ 60006E4 : 6013                		mov	r1,r0
(1)  989/ 60006E6 : 303C                		add	r3,r0
(1)  990/ 60006E8 : 4018                		shll8	r0
(1)  991/ 60006EA : 1704                		mov	r0,@(marspwm_length,r7)
(1)  992/ 60006EC : A002                		bra	.no_chng
(1)  993/ 60006EE : 1740                		mov	r4,@(marspwm_enbl,r7)
(1)  994/ 60006F0 :                     .is_keycut:
(1)  995/ 60006F0 : E000                		mov	#0,r0
(1)  996/ 60006F2 : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  997/ 60006F4 :                     .no_chng:
(1)  998/ 60006F4 : 9028                		mov	#marspwm_len,r0
(1)  999/ 60006F6 : 370C                		add	r0,r7
(1) 1000/ 60006F8 : 4610                		dt	r6
(1) 1001/ 60006FA : 8F8F                		bf/s	.next_chnl
(1) 1002/ 60006FC : 7801                		add	#1,r8
(1) 1003/ 60006FE :                     .exit_scmd:
(1) 1004/ 60006FE :                     	; --------------------------------
(1) 1005/ 60006FE : D10C                		mov	#_sysreg+comm14,r1	; Clear CMD task
(1) 1006/ 6000700 : E000                		mov	#0,r0
(1) 1007/ 6000702 : 2100                		mov.b	r0,@r1
(1) 1008/ 6000704 : 4F26                		lds	@r15+,pr
(1) 1009/ 6000706 : 68F6                		mov	@r15+,r8
(1) 1010/ 6000708 : 67F6                		mov	@r15+,r7
(1) 1011/ 600070A : 66F6                		mov	@r15+,r6
(1) 1012/ 600070C : 65F6                		mov	@r15+,r5
(1) 1013/ 600070E : 64F6                		mov	@r15+,r4
(1) 1014/ 6000710 : 63F6                		mov	@r15+,r3
(1) 1015/ 6000712 : 62F6                		mov	@r15+,r2
(1) 1016/ 6000714 : 000B                		rts
(1) 1017/ 6000716 : 0009                		nop
(1) 1018/ 6000718 :                     		align 4
(1) 1019/ 6000718 : 2600 6300 2600      		ltorg
          600071E : 61C0 0200 0000 
          6000724 : 2600 61C0 2000 
          600072A : 4028 2600 6180 
          6000730 : 2000 402E 2600 
          6000736 : 6180 2600 61C0 
          600073C : 0008 0200 0028 
          6000742 : 0008 0028 0008 
          6000748 : 0028             
(1) 1020/ 600074A :                     
(1) 1021/ 600074A :                     ; =================================================================
(1) 1022/ 600074A :                     ; ------------------------------------------------
(1) 1023/ 600074A :                     ; Slave | HBlank
(1) 1024/ 600074A :                     ; ------------------------------------------------
(1) 1025/ 600074A :                     
(1) 1026/ 600074A :                     s_irq_h:
(1) 1027/ 600074A : 913B                		mov	#_FRT,r1
(1) 1028/ 600074C : 8417                		mov.b	@(7,r1),r0
(1) 1029/ 600074E : CA02                		xor	#2,r0
(1) 1030/ 6000750 : 8017                		mov.b	r0,@(7,r1)
(1) 1031/ 6000752 : D115                		mov	#_sysreg+hintclr,r1
(1) 1032/ 6000754 : 2101                		mov.w	r0,@r1
(1) 1033/ 6000756 : 000B                		rts
(1) 1034/ 6000758 : 0009                		nop
(1) 1035/ 600075A :                     		align 4
(1) 1036/ 600075C :                     
(1) 1037/ 600075C :                     ; =================================================================
(1) 1038/ 600075C :                     ; ------------------------------------------------
(1) 1039/ 600075C :                     ; Slave | VBlank
(1) 1040/ 600075C :                     ; ------------------------------------------------
(1) 1041/ 600075C :                     
(1) 1042/ 600075C :                     s_irq_v:
(1) 1043/ 600075C : 9132                		mov	#_FRT,r1
(1) 1044/ 600075E : 8417                		mov.b	@(7,r1),r0
(1) 1045/ 6000760 : CA02                		xor	#2,r0
(1) 1046/ 6000762 : 8017                		mov.b	r0,@(7,r1)
(1) 1047/ 6000764 : D111                		mov	#_sysreg+vintclr,r1
(1) 1048/ 6000766 : 2101                		mov.w	r0,@r1
(1) 1049/ 6000768 : 000B                		rts
(1) 1050/ 600076A : 0009                		nop
(1) 1051/ 600076C :                     		align 4
(1) 1052/ 600076C :                     
(1) 1053/ 600076C :                     ; =================================================================
(1) 1054/ 600076C :                     ; ------------------------------------------------
(1) 1055/ 600076C :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1) 1056/ 600076C :                     ; ------------------------------------------------
(1) 1057/ 600076C :                     
(1) 1058/ 600076C :                     s_irq_vres:
(1) 1059/ 600076C : D110                		mov	#_sysreg,r1
(1) 1060/ 600076E : 60F3                		mov	r15,r0
(1) 1061/ 6000770 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1062/ 6000772 : 8513                		mov.w	@(dreqctl,r1),r0
(1) 1063/ 6000774 : C801                		tst	#1,r0
(1) 1064/ 6000776 : 8B15                		bf	.rv_busy
(1) 1065/ 6000778 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1066/ 600077A : 600C                		extu.b	r0,r0
(1) 1067/ 600077C : 400E                		ldc	r0,sr
(1) 1068/ 600077E : E000                		mov	#0,r0
(1) 1069/ 6000780 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1) 1070/ 6000782 : 2102                		mov	r0,@r1
(1) 1071/ 6000784 : D10B                		mov	#_sysreg+comm14,r1	; Clear our comm
(1) 1072/ 6000786 : 2101                		mov.w	r0,@r1
(1) 1073/ 6000788 : 911D                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1074/ 600078A : 901D                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1075/ 600078C : 2101                		mov.w	r0,@r1
(1) 1076/ 600078E : DF0A                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1) 1077/ 6000790 : D00A                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1) 1078/ 6000792 : 2F02                		mov	r0,@r15
(1) 1079/ 6000794 : 9019                		mov.w   #$F0,r0
(1) 1080/ 6000796 : 1F01                		mov	r0,@(4,r15)
(1) 1081/ 6000798 : D105                		mov	#_sysreg,r1
(1) 1082/ 600079A : D009                		mov	#"S_OK",r0		; Report Slave as OK
(1) 1083/ 600079C : 1109                		mov	r0,@(comm4,r1)
(1) 1084/ 600079E : 002B                		rte
(1) 1085/ 60007A0 : 0009                		nop
(1) 1086/ 60007A2 :                     		align 4
(1) 1087/ 60007A4 :                     .rv_busy:
(1) 1088/ 60007A4 : AFFE                		bra	*
(1) 1089/ 60007A6 : 0009                		nop
(1) 1090/ 60007A8 :                     		align 4
(1) 1091/ 60007A8 :                     
(1) 1092/ 60007A8 : 2000 4018 2000      		ltorg		; Save literals
          60007AE : 4016 2000 4000 
          60007B4 : 2000 402E C000 
          60007BA : 07F8 0600 0F30 
          60007C0 : 535F 4F4B FE10 
          60007C6 : FE80 A518 00F0    
(1) 1093/ 60007CC :                     
(1) 1094/ 60007CC :                     ; ====================================================================
(1) 1095/ 60007CC :                     ; ----------------------------------------------------------------
(1) 1096/ 60007CC :                     ; Master entry point
(1) 1097/ 60007CC :                     ; ----------------------------------------------------------------
(1) 1098/ 60007CC :                     
(1) 1099/ 60007CC :                     		align 4
(1) 1100/ 60007CC :                     SH2_M_Entry:
(1) 1101/ 60007CC : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1102/ 60007CE : 600C                		extu.b	r0,r0
(1) 1103/ 60007D0 : 400E                		ldc	r0,sr
(1) 1104/ 60007D2 : DF2F                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1105/ 60007D4 : D02F                		mov	#SH2_Master,r0			; Reset vbr
(1) 1106/ 60007D6 : 402E                		ldc	r0,vbr
(1) 1107/ 60007D8 : 9174                		mov.l	#_FRT,r1
(1) 1108/ 60007DA : E000                		mov	#$00,r0
(1) 1109/ 60007DC : 8010                		mov.b	r0,@(0,r1)
(1) 1110/ 60007DE : E0E2                		mov.b	#$E2,r0
(1) 1111/ 60007E0 : 8017                		mov.b	r0,@(7,r1)
(1) 1112/ 60007E2 : E000                		mov	#$00,r0
(1) 1113/ 60007E4 : 8014                		mov.b	r0,@(4,r1)
(1) 1114/ 60007E6 : E001                		mov	#$01,r0
(1) 1115/ 60007E8 : 8015                		mov.b	r0,@(5,r1)
(1) 1116/ 60007EA : E000                		mov	#$00,r0
(1) 1117/ 60007EC : 8016                		mov.b	r0,@(6,r1)
(1) 1118/ 60007EE : E001                		mov	#$01,r0
(1) 1119/ 60007F0 : 8011                		mov.b	r0,@(1,r1)
(1) 1120/ 60007F2 : E000                		mov	#$00,r0
(1) 1121/ 60007F4 : 8013                		mov.b	r0,@(3,r1)
(1) 1122/ 60007F6 : 8012                		mov.b	r0,@(2,r1)
(1) 1123/ 60007F8 : E0F2                		mov.b	#$F2,r0				; ****
(1) 1124/ 60007FA : 8017                		mov.b	r0,@(7,r1)
(1) 1125/ 60007FC : E000                		mov	#0,r0
(1) 1126/ 60007FE : 8014                		mov.b	r0,@(4,r1)
(1) 1127/ 6000800 : E001                		mov	#1,r0
(1) 1128/ 6000802 : 8015                		mov.b	r0,@(5,r1)
(1) 1129/ 6000804 : E0E2                		mov.b	#$E2,r0
(1) 1130/ 6000806 : 8017                		mov.b	r0,@(7,r1)
(1) 1131/ 6000808 :                     
(1) 1132/ 6000808 :                     	; --------------------------------------------------------
(1) 1133/ 6000808 :                     	; Extra interrupt settings
(1) 1134/ 6000808 : 905D                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1135/ 600080A : 915D                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1136/ 600080C : 2011                		mov.w   r1,@r0
(1) 1137/ 600080E : 905C                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1138/ 6000810 : 915C                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1139/ 6000812 : 2011                		mov.w   r1,@r0
(1) 1140/ 6000814 : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1141/ 6000816 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1142/ 6000818 : 2012                		mov	r1,@r0
(1) 1143/ 600081A :                     	; --------------------------------------------------------
(1) 1144/ 600081A :                     	; CD32X initialization
(1) 1145/ 600081A :                     	;
(1) 1146/ 600081A :                     	; *** FUSION: Framebuffer flipping fails if
(1) 1147/ 600081A :                     	; bitmapmd is 0 ***
(1) 1148/ 600081A :                     	; --------------------------------------------------------
(1) 1162/ 600081A :                     
(1) 1163/ 600081A :                     	; HW method:
(1) 1164/ 600081A : D11F                		mov 	#_vdpreg,r1
(1) 1165/ 600081C : 841A                .waite:		mov.b	@(vdpsts,r1),r0		; Inside VBlank
(1) 1166/ 600081E : C880                		tst	#VBLK,r0
(1) 1167/ 6000820 : 8BFC                		bf	.waite
(1) 1168/ 6000822 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0		; Wait new VBlank
(1) 1169/ 6000824 : C880                		tst	#VBLK,r0
(1) 1170/ 6000826 : 89FC                		bt	.waitl
(1) 1171/ 6000828 : E201                		mov	#1,r2			; Set Framebuffer 1 and check
(1) 1172/ 600082A : 6023                		mov	r2,r0
(1) 1173/ 600082C : 801B                		mov.b	r0,@(framectl,r1)
(1) 1174/ 600082E : 841B                .wait_frm:	mov.b	@(framectl,r1),r0
(1) 1175/ 6000830 : 3020                		cmp/eq	r2,r0
(1) 1176/ 6000832 : 8BFC                		bf	.wait_frm
(1) 1178/ 6000834 : E000                		mov	#0,r0
(1) 1179/ 6000836 : D219                		mov	#CS3+($20000-$38),r2		; FIRST Cleanup
(1) 1180/ 6000838 : D319                		mov	#CS3+($40000),r3
(1) 1181/ 600083A :                     .clean_up:
(1) 1182/ 600083A : 3233                		cmp/ge	r3,r2
(1) 1183/ 600083C : 8902                		bt	.exit_clean
(1) 1184/ 600083E : 2202                		mov	r0,@r2
(1) 1185/ 6000840 : AFFB                		bra	.clean_up
(1) 1186/ 6000842 : 7204                		add	#4,r2
(1) 1187/ 6000844 :                     .exit_clean:
(1) 1188/ 6000844 : D117                		mov	#_framebuffer,r1		; Copy the other half of SDRAM
(1) 1189/ 6000846 : D215                		mov	#CS3+($20000-$38),r2
(1) 1190/ 6000848 : D317                		mov	#CS3+(SH2_END&$3FFFFF),r3
(1) 1191/ 600084A :                     .copy_new:
(1) 1192/ 600084A : 3233                		cmp/ge	r3,r2
(1) 1193/ 600084C : 8903                		bt	.exit_send
(1) 1194/ 600084E : 6016                		mov	@r1+,r0
(1) 1195/ 6000850 : 2202                		mov	r0,@r2
(1) 1196/ 6000852 : AFFA                		bra	.copy_new
(1) 1197/ 6000854 : 7204                		add	#4,r2
(1) 1198/ 6000856 :                     .exit_send:
(1) 1199/ 6000856 : D115                		mov	#_sysreg+comm0,r1
(1) 1200/ 6000858 : E000                		mov	#0,r0
(1) 1201/ 600085A : 2102                		mov	r0,@r1
(1) 1203/ 600085C :                     
(1) 1204/ 600085C :                     ; ====================================================================
(1) 1205/ 600085C :                     ; ----------------------------------------------------------------
(1) 1206/ 600085C :                     ; Master MAIN code
(1) 1207/ 600085C :                     ; ----------------------------------------------------------------
(1) 1208/ 600085C :                     
(1) 1209/ 600085C :                     SH2_M_HotStart:
(1) 1210/ 600085C : D014                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1211/ 600085E : 401E                		ldc	r0,gbr
(1) 1212/ 6000860 : D014                		mov	#RAM_Mars_DreqBuff_0,r0
(1) 1213/ 6000862 : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1214/ 6000864 : D014                		mov	#RAM_Mars_DreqBuff_1,r0
(1) 1215/ 6000866 : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1216/ 6000868 : B42E                		bsr	MarsVideo_Init
(1) 1217/ 600086A : 0009                		nop
(1) 1218/ 600086C : B3C6                		bsr	Mars_CachePurge
(1) 1219/ 600086E : 0009                		nop
(1) 1220/ 6000870 : D112                		mov	#_sysreg,r1
(1) 1221/ 6000872 : 6011                		mov.w	@r1,r0
(1) 1222/ 6000874 : CB02                		or	#CMDIRQ_ON,r0
(1) 1223/ 6000876 : 2101                		mov.w	r0,@r1
(1) 1224/ 6000878 : D111                		mov	#_sysreg+comm14,r1
(1) 1225/ 600087A : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1226/ 600087C : 2008                		tst	r0,r0
(1) 1227/ 600087E : 8BFC                		bf	.wait_slv
(1) 1228/ 6000880 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1229/ 6000882 : E001                		mov	#1,r0
(1) 1230/ 6000884 : 2102                		mov	r0,@r1
(1) 1231/ 6000886 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1232/ 6000888 : 400E                		ldc	r0,sr
(1) 1233/ 600088A : A021                		bra	master_loop
(1) 1234/ 600088C : 0009                		nop
(1) 1235/ 600088E :                     		align 4
(1) 1236/ 6000890 : C000 0800 0600      		ltorg
          6000896 : 0000 2000 4100 
          600089C : 0601 FFC8 0604 
          60008A2 : 0000 2400 0000 
          60008A8 : 0603 6700 2000 
          60008AE : 4020 0600 4CE0 
          60008B4 : 2600 4D40 2600 
          60008BA : 5760 2000 4000 
          60008C0 : 2000 402E FE10 
          60008C6 : FEE2 0530 FEE4 
          60008CC : 4800             
(1) 1237/ 60008CE :                     
(1) 1238/ 60008CE :                     ; ----------------------------------------------------------------
(1) 1239/ 60008CE :                     ; MASTER CPU loop
(1) 1240/ 60008CE :                     ;
(1) 1241/ 60008CE :                     ; comm12: %BD00cccc RRdflmmm
(1) 1242/ 60008CE :                     
(1) 1243/ 60008CE :                     ; B | This CPU's BUSY bit
(1) 1244/ 60008CE :                     ; D | DREQ DMA active
(1) 1245/ 60008CE :                     ; c | CMD task number
(1) 1246/ 60008CE :                     ;
(1) 1247/ 60008CE :                     ; R | Graphics mode init bits.
(1) 1248/ 60008CE :                     ; d | DREQ-RAM flip request: Set to 1 after sending your RAM data
(1) 1249/ 60008CE :                     ; f | CPU Syncronize bit, clears if drawing finishes
(1) 1250/ 60008CE :                     ; l | Setting to skip frames (3D rendering)
(1) 1251/ 60008CE :                     ; m | Graphics mode
(1) 1252/ 60008CE :                     ; ----------------------------------------------------------------
(1) 1253/ 60008CE :                     
(1) 1254/ 60008CE :                     		align 4
(1) 1255/ 60008D0 :                     master_loop:
(1) 1257/ 60008D0 : D119                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1258/ 60008D2 : 6010                		mov.b	@r1,r0
(1) 1259/ 60008D4 : 7001                		add	#1,r0
(1) 1260/ 60008D6 : 2100                		mov.b	r0,@r1
(1) 1262/ 60008D8 :                     	; ---------------------------------------
(1) 1263/ 60008D8 :                     	; Flip the DREQ Read/Write points
(1) 1264/ 60008D8 :                     	; ---------------------------------------
(1) 1265/ 60008D8 :                     
(1) 1267/ 60008D8 :                     .pending_dreq:
(1) 1268/ 60008D8 : D118                		mov	#_sysreg+comm12,r1		; Wait pending DREQ DMA transfer
(1) 1269/ 60008DA : 6010                		mov.b	@r1,r0
(1) 1270/ 60008DC : C840                		tst	#%01000000,r0
(1) 1271/ 60008DE : 8BFB                		bf	.pending_dreq
(1) 1273/ 60008E0 : 4F03                		stc	sr,@-r15
(1) 1274/ 60008E2 : E0F0                		mov.b	#$F0,r0				; Disable interrupts
(1) 1275/ 60008E4 : 600C                		extu.b	r0,r0				; ** $F0
(1) 1276/ 60008E6 : 400E                		ldc	r0,sr
(1) 1277/ 60008E8 : D215                		mov	#_sysreg+comm12+1,r2
(1) 1278/ 60008EA : 6020                		mov.b	@r2,r0
(1) 1279/ 60008EC : C820                		tst	#%00100000,r0
(1) 1280/ 60008EE : 8909                		bt	.keep_buff
(1) 1281/ 60008F0 : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1282/ 60008F2 : 6103                		mov	r0,r1
(1) 1283/ 60008F4 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1284/ 60008F6 : 0009                		nop
(1) 1285/ 60008F8 : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1286/ 60008FA : 6013                		mov	r1,r0
(1) 1287/ 60008FC : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1288/ 60008FE : 6020                		mov.b	@r2,r0
(1) 1289/ 6000900 : C9DF                		and	#%11011111,r0
(1) 1290/ 6000902 : 2200                		mov.b	r0,@r2
(1) 1291/ 6000904 :                     .keep_buff:
(1) 1292/ 6000904 : 4F07                		ldc	@r15+,sr			; Enable interrupts
(1) 1293/ 6000906 : D10E                		mov	#_sysreg+comm12+1,r1
(1) 1294/ 6000908 : 6010                		mov.b	@r1,r0
(1) 1295/ 600090A : C9EF                		and	#%11101111,r0			; Reset DREQ sync
(1) 1296/ 600090C : 2100                		mov.b	r0,@r1
(1) 1297/ 600090E : B375                		bsr	Mars_CachePurge			; Purge cache
(1) 1298/ 6000910 : 0009                		nop
(1) 1299/ 6000912 : 0009                		nop	; alignment
(1) 1300/ 6000914 :                     	; ---------------------------------------
(1) 1301/ 6000914 :                     	; Update SVDP in VBlank
(1) 1302/ 6000914 :                     	; ---------------------------------------
(1) 1303/ 6000914 : B036                		bsr	Mars_WaitVBlank
(1) 1304/ 6000916 : 0009                		nop
(1) 1305/ 6000918 :                     	; ---------------------------------------
(1) 1306/ 6000918 :                     	; Jump into a screen mode
(1) 1307/ 6000918 :                     	; ---------------------------------------
(1) 1308/ 6000918 : C70A                		mova	mstr_list,r0
(1) 1309/ 600091A : 6103                		mov	r0,r1
(1) 1310/ 600091C : D207                		mov	#_sysreg+comm12,r2
(1) 1311/ 600091E : 0009                		nop
(1) 1312/ 6000920 : 6021                		mov.w	@r2,r0
(1) 1313/ 6000922 : C8C0                		tst	#%11000000,r0
(1) 1314/ 6000924 : 8900                		bt	.non_init
(1) 1315/ 6000926 : 7104                		add	#4,r1
(1) 1316/ 6000928 :                     .non_init:
(1) 1317/ 6000928 : C907                		and	#%00000111,r0		; <-- Current limit
(1) 1318/ 600092A : 4008                		shll2	r0
(1) 1319/ 600092C : 4000                		shll	r0
(1) 1320/ 600092E : 310C                		add	r0,r1
(1) 1321/ 6000930 : 6012                		mov	@r1,r0
(1) 1322/ 6000932 : 402B                		jmp	@r0
(1) 1323/ 6000934 : 0009                		nop
(1) 1324/ 6000936 :                     		align 4
(1) 1325/ 6000938 : 2000 4020 2000      		ltorg
          600093E : 402C 2000 402D    
(1) 1326/ 6000944 :                     
(1) 1327/ 6000944 :                     ; ====================================================================
(1) 1328/ 6000944 :                     ; ----------------------------------------------------------------
(1) 1329/ 6000944 :                     ; MODES LIST, MAXIMUM 7
(1) 1330/ 6000944 :                     ;
(1) 1331/ 6000944 :                     ; Mode number $00 sets the SVDP to Genesis.
(1) 1332/ 6000944 :                     ; ----------------------------------------------------------------
(1) 1333/ 6000944 :                     
(1) 1334/ 6000944 :                     		align 4
(1) 1335/ 6000944 :                     mstr_list:
(1) 1336/ 6000944 : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          600094A : 099C             
(1) 1337/ 600094C : 0600 0AB4 0600      		dc.l MstrMode_2D,MstrMode_2D_i
          6000952 : 0A34             
(1) 1338/ 6000954 : 0600 0D04 0600      		dc.l MstrMode_3D,MstrMode_3D_i
          600095A : 0C7C             
(1) 1339/ 600095C : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          6000962 : 099C             
(1) 1340/ 6000964 : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          600096A : 099C             
(1) 1341/ 600096C : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          6000972 : 099C             
(1) 1342/ 6000974 : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          600097A : 099C             
(1) 1343/ 600097C : 0600 099C 0600      		dc.l MstrMode_0,MstrMode_0
          6000982 : 099C             
(1) 1344/ 6000984 :                     
(1) 1345/ 6000984 :                     ; ====================================================================
(1) 1346/ 6000984 :                     ; ----------------------------------------------------------------
(1) 1347/ 6000984 :                     ; Wait VBlank
(1) 1348/ 6000984 :                     ; ----------------------------------------------------------------
(1) 1349/ 6000984 :                     
(1) 1350/ 6000984 :                     		align 4
(1) 1351/ 6000984 :                     Mars_WaitVBlank:
(1) 1352/ 6000984 : DE41                		mov	#_sysreg,r14
(1) 1353/ 6000986 : DD42                		mov	#_vdpreg,r13
(1) 1354/ 6000988 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1355/ 600098A : C880                  		tst	#FM,r0
(1) 1356/ 600098C : 8904                  		bt	.svdp_locked
(1) 1357/ 600098E : 84DA                .wait_v:	mov.b	@(vdpsts,r13),r0
(1) 1358/ 6000990 : C880                		tst	#VBLK,r0
(1) 1359/ 6000992 : 89FC                		bt	.wait_v
(1) 1360/ 6000994 : 000B                		rts
(1) 1361/ 6000996 : 0009                		nop
(1) 1362/ 6000998 :                     		align 4
(1) 1363/ 6000998 :                     .svdp_locked:
(1) 1364/ 6000998 : 000B                		rts
(1) 1365/ 600099A : 0009                		nop
(1) 1366/ 600099C :                     		align 4
(1) 1367/ 600099C :                     
(1) 1368/ 600099C :                     ; ====================================================================
(1) 1369/ 600099C :                     ; ----------------------------------------------------------------
(1) 1370/ 600099C :                     ; Blank screen mode, NOTHING.
(1) 1371/ 600099C :                     ;
(1) 1372/ 600099C :                     ; Setting this mode will also give the SVDP to the Genesis,
(1) 1373/ 600099C :                     ; CHECK FM BIT AFTER SETTING THIS MODE.
(1) 1374/ 600099C :                     ; ----------------------------------------------------------------
(1) 1375/ 600099C :                     
(1) 1376/ 600099C :                     		align 4
(1) 1377/ 600099C :                     MstrMode_0:
(1) 1378/ 600099C : BFF2                		bsr	Mars_WaitVBlank
(1) 1379/ 600099E : 0009                		nop
(1) 1380/ 60009A0 :                     ; ---------------------------------------
(1) 1381/ 60009A0 :                     ; Init
(1) 1382/ 60009A0 :                     ;
(1) 1383/ 60009A0 :                     ; Running from here...
(1) 1384/ 60009A0 :                     ; ---------------------------------------
(1) 1385/ 60009A0 : D13C                		mov	#_sysreg+comm12+1,r1
(1) 1386/ 60009A2 : 6010                		mov.b	@r1,r0
(1) 1387/ 60009A4 : C9C0                		and	#%11000000,r0
(1) 1388/ 60009A6 : 2008                		tst	r0,r0
(1) 1389/ 60009A8 : 8992                		bt	master_loop
(1) 1390/ 60009AA : B327                		bsr	Mars_CachePurge
(1) 1391/ 60009AC : 0009                		nop
(1) 1392/ 60009AE : 917B                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1393/ 60009B0 : 907B                		mov.w   #$A518,r0
(1) 1394/ 60009B2 : 2101                		mov.w   r0,@r1
(1) 1395/ 60009B4 : D138                		mov	#_sysreg+comm14,r1
(1) 1396/ 60009B6 :                     .wait_slvn:
(1) 1397/ 60009B6 : 6011                		mov.w	@r1,r0
(1) 1398/ 60009B8 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1399/ 60009BA : 2008                		tst	r0,r0
(1) 1400/ 60009BC : 8BFB                		bf	.wait_slvn
(1) 1401/ 60009BE : E000                		mov	#0,r0
(1) 1402/ 60009C0 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1403/ 60009C2 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1404/ 60009C4 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1405/ 60009C6 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1406/ 60009C8 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1407/ 60009CA : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1408/ 60009CC : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1409/ 60009CE : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1410/ 60009D0 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1411/ 60009D2 : DD2F                		mov 	#_vdpreg,r13
(1) 1412/ 60009D4 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1413/ 60009D6 : C880                  		tst	#FM,r0
(1) 1414/ 60009D8 : 890C                  		bt	.still_locked
(1) 1415/ 60009DA : D230                		mov	#_framebuffer,r2
(1) 1416/ 60009DC : 9156                		mov	#(($20000)/4)/4,r1
(1) 1417/ 60009DE : E000                		mov	#0,r0
(1) 1418/ 60009E0 :                     .clr_manual:
(1) 1419/ 60009E0 :                     	rept 4-1
(1) 1420/ 60009E0 :                     		mov	r0,@r2
(1) 1421/ 60009E0 :                     		add	#4,r2
(1) 1422/ 60009E0 :                     	endm
(1) 1420/ 60009E0 : 2202                		mov	r0,@r2
(1) 1421/ 60009E2 : 7204                		add	#4,r2
(1) 1420/ 60009E4 : 2202                		mov	r0,@r2
(1) 1421/ 60009E6 : 7204                		add	#4,r2
(1) 1420/ 60009E8 : 2202                		mov	r0,@r2
(1) 1421/ 60009EA : 7204                		add	#4,r2
(1) 1423/ 60009EC : 2202                		mov	r0,@r2
(1) 1424/ 60009EE : 4110                		dt	r1
(1) 1425/ 60009F0 : 8FF6                		bf/s	.clr_manual
(1) 1426/ 60009F2 : 7204                		add	#4,r2
(1) 1427/ 60009F4 :                     .still_locked:
(1) 1428/ 60009F4 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1429/ 60009F6 : CA01                		xor	#1,r0
(1) 1430/ 60009F8 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1431/ 60009FA : D129                		mov	#_sysreg+comm12,r1
(1) 1432/ 60009FC : 6011                		mov.w	@r1,r0
(1) 1433/ 60009FE : C940                		and	#%01000000,r0
(1) 1434/ 6000A00 : 2008                		tst	r0,r0
(1) 1435/ 6000A02 : 8B0A                		bf	.not_yet
(1) 1436/ 6000A04 : DE21                		mov	#_sysreg,r14
(1) 1437/ 6000A06 : 9051                		mov	#FM,r0
(1) 1438/ 6000A08 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1439/ 6000A0A : 0009                  		nop
(1) 1440/ 6000A0C : 0009                  		nop
(1) 1441/ 6000A0E : 0009                  		nop
(1) 1442/ 6000A10 : 0009                  		nop
(1) 1443/ 6000A12 : E000                		mov	#0,r0
(1) 1444/ 6000A14 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1445/ 6000A16 : E000                		mov	#$00,r0
(1) 1446/ 6000A18 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1447/ 6000A1A :                     .not_yet:
(1) 1448/ 6000A1A :                     
(1) 1449/ 6000A1A : A000                		bra	MstrMode_InitExit
(1) 1450/ 6000A1C : 0009                		nop
(1) 1451/ 6000A1E :                     
(1) 1452/ 6000A1E :                     ; ---------------------------------------
(1) 1453/ 6000A1E :                     ; JUMP here at the end of the
(1) 1454/ 6000A1E :                     ; Screen's INIT code.
(1) 1455/ 6000A1E :                     
(1) 1456/ 6000A1E :                     MstrMode_InitExit:
(1) 1457/ 6000A1E : D31D                		mov	#_sysreg+comm12+1,r3
(1) 1458/ 6000A20 : 6030                		mov.b	@r3,r0
(1) 1459/ 6000A22 : 6103                		mov	r0,r1
(1) 1460/ 6000A24 : 9243                		mov	#%11000000,r2
(1) 1461/ 6000A26 : C93F                		and	#%00111111,r0
(1) 1462/ 6000A28 : 2129                		and	r2,r1
(1) 1463/ 6000A2A : 4100                		shll	r1
(1) 1464/ 6000A2C : 201B                		or	r1,r0
(1) 1465/ 6000A2E : AF4F                		bra	master_loop
(1) 1466/ 6000A30 : 2300                		mov.b	r0,@r3
(1) 1467/ 6000A32 :                     
(1) 1468/ 6000A32 :                     ; ====================================================================
(1) 1469/ 6000A32 :                     ; ----------------------------------------------------------------
(1) 1470/ 6000A32 :                     ; 256-color tiled scroll area with "Super" Sprites
(1) 1471/ 6000A32 :                     ;
(1) 1472/ 6000A32 :                     ; NOTES:
(1) 1473/ 6000A32 :                     ; - This will set SVDP permission to here.
(1) 1474/ 6000A32 :                     ; - MAXIMUM scrolling speed is 8 pixels
(1) 1475/ 6000A32 :                     ; ----------------------------------------------------------------
(1) 1476/ 6000A32 :                     
(1) 1477/ 6000A32 :                     ; ---------------------------------------
(1) 1478/ 6000A32 :                     ; Init
(1) 1479/ 6000A32 :                     ; ---------------------------------------
(1) 1480/ 6000A32 :                     
(1) 1481/ 6000A32 :                     		align 4
(1) 1482/ 6000A34 :                     MstrMode_2D_i:
(1) 1483/ 6000A34 : D11A                		mov	#_sysreg+comm12,r1
(1) 1484/ 6000A36 : 6011                		mov.w	@r1,r0
(1) 1485/ 6000A38 : C940                		and	#%01000000,r0
(1) 1486/ 6000A3A : 2008                		tst	r0,r0
(1) 1487/ 6000A3C : 8BEF                		bf	MstrMode_InitExit
(1) 1488/ 6000A3E : B2DD                		bsr	Mars_CachePurge
(1) 1489/ 6000A40 : 0009                		nop
(1) 1490/ 6000A42 : 9131                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1491/ 6000A44 : 9031                		mov.w   #$A518,r0
(1) 1492/ 6000A46 : 2101                		mov.w   r0,@r1
(1) 1493/ 6000A48 : D113                		mov	#_sysreg+comm14,r1
(1) 1494/ 6000A4A :                     .wait_slvn:
(1) 1495/ 6000A4A : 6011                		mov.w	@r1,r0
(1) 1496/ 6000A4C : C907                		and	#%00000111,r0			; Slave busy?
(1) 1497/ 6000A4E : 2008                		tst	r0,r0
(1) 1498/ 6000A50 : 8BFB                		bf	.wait_slvn
(1) 1499/ 6000A52 : E000                		mov	#0,r0
(1) 1500/ 6000A54 : D113                		mov 	#$C0000000,r1
(1) 1501/ 6000A56 : 922B                		mov	#$600/4,r2
(1) 1502/ 6000A58 :                     .clean_up:
(1) 1503/ 6000A58 : 2102                		mov	r0,@r1
(1) 1504/ 6000A5A : 4210                		dt	r2
(1) 1505/ 6000A5C : 8FFC                		bf/s	.clean_up
(1) 1506/ 6000A5E : 7104                		add	#4,r1
(1) 1507/ 6000A60 : DE0A                		mov	#_sysreg,r14
(1) 1508/ 6000A62 : DD0B                		mov	#_vdpreg,r13
(1) 1509/ 6000A64 : 9022                		mov	#FM,r0
(1) 1510/ 6000A66 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1511/ 6000A68 : 9E23                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1512/ 6000A6A : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1513/ 6000A6C : 3E0C                		add	r0,r14
(1) 1514/ 6000A6E : 51E0                		mov	@(sscrl_x_pos,r14),r1
(1) 1515/ 6000A70 : 4129                		shlr16	r1
(1) 1516/ 6000A72 : 52E1                		mov	@(sscrl_y_pos,r14),r2
(1) 1517/ 6000A74 : 4229                		shlr16	r2
(1) 1518/ 6000A76 : 50E2                		mov	@(sscrl_vram,r14),r0
(1) 1519/ 6000A78 : DD05                		mov 	#_vdpreg,r13
(1) 1520/ 6000A7A : C213                		mov	r0,@(marsGbl_Scrl_Vram,gbr)
(1) 1521/ 6000A7C : 602F                		exts.w	r2,r0
(1) 1522/ 6000A7E : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1523/ 6000A80 : 601F                		exts.w	r1,r0
(1) 1524/ 6000A82 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1525/ 6000A84 : E001                		mov	#1,r0
(1) 1526/ 6000A86 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1527/ 6000A88 :                     ; 		add	#1,r0
(1) 1528/ 6000A88 :                     ; 		mov.w	r0,@(marsGbl_DrawAll,gbr)
(1) 1529/ 6000A88 : AFC9                		bra	MstrMode_InitExit
(1) 1530/ 6000A8A : 0009                		nop
(1) 1531/ 6000A8C :                     		align 4
(1) 1532/ 6000A8C : 2000 4000 2000      		ltorg
          6000A92 : 4100 2000 402D 
          6000A98 : 2000 402E 2400 
          6000A9E : 0000 2000 402C 
          6000AA4 : C000 0000 FE80 
          6000AAA : A518 0080 00C0 
          6000AB0 : 0180 0200          
(1) 1533/ 6000AB4 :                     
(1) 1534/ 6000AB4 :                     ; ---------------------------------------
(1) 1535/ 6000AB4 :                     ; Loop
(1) 1536/ 6000AB4 :                     ; ---------------------------------------
(1) 1537/ 6000AB4 :                     
(1) 1538/ 6000AB4 :                     		align 4
(1) 1539/ 6000AB4 :                     MstrMode_2D:
(1) 1540/ 6000AB4 :                     	; ---------------------------------------
(1) 1541/ 6000AB4 :                     	; *** We are in VBLANK ***
(1) 1542/ 6000AB4 : DE67                		mov	#_sysreg,r14			; r14 - _sysreg
(1) 1543/ 6000AB6 : DD68                		mov	#_vdpreg,r13			; r13 - _vdpreg
(1) 1544/ 6000AB8 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1545/ 6000ABA : C901                		and	#1,r0
(1) 1546/ 6000ABC : 80DB                		mov.b	r0,@(framectl,r13)		; Set current framebuffer
(1) 1547/ 6000ABE : C501                 		mov.w	@(marsGbl_XShift,gbr),r0
(1) 1548/ 6000AC0 : C901                		and	#1,r0
(1) 1549/ 6000AC2 : 81D1                		mov.w	r0,@(shift,r13)			; Set SHIFT bit (Xpos & 1)
(1) 1550/ 6000AC4 : B0D6                		bsr	g_Mstr_CopyPalette		; Copy 256-color palette
(1) 1551/ 6000AC6 : 0009                		nop
(1) 1552/ 6000AC8 :                     	; ---------------------------------------
(1) 1553/ 6000AC8 :                     	; Set scrolling varaibles
(1) 1554/ 6000AC8 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1555/ 6000ACA : 9ECB                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1556/ 6000ACC : 3E0C                		add	r0,r14
(1) 1557/ 6000ACE : E100                		mov	#0,r1				; X increment
(1) 1558/ 6000AD0 : E200                		mov	#0,r2				; Y increment
(1) 1559/ 6000AD2 : E302                		mov	#2,r3				; Drawflags counter
(1) 1560/ 6000AD4 : 56E0                		mov	@(sscrl_x_pos,r14),r6
(1) 1561/ 6000AD6 : 94C6                		mov	#SET_MSCRLSIZE/2,r4		; Scroll speed limit
(1) 1562/ 6000AD8 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1563/ 6000ADA : 95C5                		mov	#-SET_MSCRLSIZE,r5		; -block_size
(1) 1564/ 6000ADC : 58E1                		mov	@(sscrl_y_pos,r14),r8
(1) 1565/ 6000ADE : 6703                		mov	r0,r7
(1) 1566/ 6000AE0 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1567/ 6000AE2 : 6903                		mov	r0,r9
(1) 1568/ 6000AE4 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1569/ 6000AE6 : 6073                		mov	r7,r0
(1) 1570/ 6000AE8 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1571/ 6000AEA : 4629                		shlr16	r6				; X >> 16
(1) 1572/ 6000AEC : 666F                		exts.w	r6,r6				; extend
(1) 1573/ 6000AEE : 4829                		shlr16	r8				; Y >> 16
(1) 1574/ 6000AF0 : 688F                		exts.w	r8,r8				; extend
(1) 1575/ 6000AF2 : 6163                		mov	r6,r1				; Make X increment
(1) 1576/ 6000AF4 : 3178                		sub	r7,r1
(1) 1577/ 6000AF6 : 6283                		mov	r8,r2				; Make Y increment
(1) 1578/ 6000AF8 : 3298                		sub	r9,r2
(1) 1579/ 6000AFA : 2118                		tst	r1,r1				; X changed?
(1) 1580/ 6000AFC : 8BFF                		bf	.x_patch
(1) 1581/ 6000AFE :                     .x_patch:
(1) 1582/ 6000AFE : 6083                		mov	r8,r0
(1) 1583/ 6000B00 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1584/ 6000B02 : 6063                		mov	r6,r0
(1) 1585/ 6000B04 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1586/ 6000B06 : 611F                		exts.w	r1,r1
(1) 1587/ 6000B08 : C101                		mov.w	r0,@(marsGbl_XShift,gbr)	; Write Xshift here
(1) 1588/ 6000B0A : 622F                		exts.w	r2,r2
(1) 1589/ 6000B0C :                     	; ---------------------------------------
(1) 1590/ 6000B0C :                     	; Increment FB draw TL and Y pos
(1) 1591/ 6000B0C :                     	; r1 - X increment
(1) 1592/ 6000B0C :                     	; r2 - Y increment
(1) 1593/ 6000B0C : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(1) 1594/ 6000B0E : 6803                		mov	r0,r8
(1) 1595/ 6000B10 : C617                		mov	@(marsGbl_Scrl_FbX,gbr),r0
(1) 1596/ 6000B12 : 6703                		mov	r0,r7
(1) 1597/ 6000B14 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1598/ 6000B16 : 6603                		mov	r0,r6
(1) 1599/ 6000B18 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1600/ 6000B1A : 6503                		mov	r0,r5
(1) 1601/ 6000B1C : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1602/ 6000B1E : 6403                		mov	r0,r4
(1) 1603/ 6000B20 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1604/ 6000B22 : 301C                		add	r1,r0		; Add X
(1) 1605/ 6000B24 : 4115                		cmp/pl	r1
(1) 1606/ 6000B26 : 8B03                		bf	.yx_negtv
(1) 1607/ 6000B28 : 3043                .yx_toptva:	cmp/ge	r4,r0
(1) 1608/ 6000B2A : 8B01                		bf	.yx_negtv
(1) 1609/ 6000B2C : AFFC                		bra	.yx_toptva
(1) 1610/ 6000B2E : 3048                		sub	r4,r0
(1) 1611/ 6000B30 :                     .yx_negtv:
(1) 1612/ 6000B30 : 4111                		cmp/pz	r1
(1) 1613/ 6000B32 : 8903                		bt	.yx_postv
(1) 1614/ 6000B34 : 4011                .yx_negtva:	cmp/pz	r0
(1) 1615/ 6000B36 : 8901                		bt	.yx_postv
(1) 1616/ 6000B38 : AFFC                		bra	.yx_negtva
(1) 1617/ 6000B3A : 304C                		add	r4,r0
(1) 1618/ 6000B3C :                     .yx_postv:
(1) 1619/ 6000B3C :                     
(1) 1620/ 6000B3C :                     	; Add Y
(1) 1621/ 6000B3C : 352C                		add	r2,r5
(1) 1622/ 6000B3E : 4215                		cmp/pl	r2
(1) 1623/ 6000B40 : 8B03                		bf	.ypu_negtv
(1) 1624/ 6000B42 : 3563                .yx_postva:	cmp/ge	r6,r5
(1) 1625/ 6000B44 : 8B01                		bf	.ypu_negtv
(1) 1626/ 6000B46 : AFFC                		bra	.yx_postva
(1) 1627/ 6000B48 : 3568                		sub	r6,r5
(1) 1628/ 6000B4A :                     .ypu_negtv:
(1) 1629/ 6000B4A : 4211                		cmp/pz	r2
(1) 1630/ 6000B4C : 8903                		bt	.ypu_postv
(1) 1631/ 6000B4E : 4511                .ypu_negtva:	cmp/pz	r5
(1) 1632/ 6000B50 : 8901                		bt	.ypu_postv
(1) 1633/ 6000B52 : AFFC                		bra	.ypu_negtva
(1) 1634/ 6000B54 : 356C                		add	r6,r5
(1) 1635/ 6000B56 :                     .ypu_postv:
(1) 1636/ 6000B56 :                     
(1) 1637/ 6000B56 :                     	; X special
(1) 1638/ 6000B56 :                     
(1) 1639/ 6000B56 : 371C                		add	r1,r7
(1) 1640/ 6000B58 : 4115                		cmp/pl	r1
(1) 1641/ 6000B5A : 8B03                		bf	.xpu_negtv
(1) 1642/ 6000B5C : 3783                .ypu_postva:	cmp/ge	r8,r7
(1) 1643/ 6000B5E : 8B01                		bf	.xpu_negtv
(1) 1644/ 6000B60 : AFFC                		bra	.ypu_postva
(1) 1645/ 6000B62 : 3788                		sub	r8,r7
(1) 1646/ 6000B64 :                     .xpu_negtv:
(1) 1647/ 6000B64 : 4111                		cmp/pz	r1
(1) 1648/ 6000B66 : 8903                		bt	.xpu_postv
(1) 1649/ 6000B68 : 4711                .xpu_negtva:	cmp/pz	r7
(1) 1650/ 6000B6A : 8901                		bt	.xpu_postv
(1) 1651/ 6000B6C : AFFC                		bra	.xpu_negtva
(1) 1652/ 6000B6E : 378C                		add	r8,r7
(1) 1653/ 6000B70 :                     .xpu_postv:
(1) 1654/ 6000B70 : 0009                		nop
(1) 1655/ 6000B72 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1656/ 6000B74 : 6053                		mov	r5,r0
(1) 1657/ 6000B76 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1658/ 6000B78 : 6073                		mov	r7,r0
(1) 1659/ 6000B7A : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1660/ 6000B7C :                     
(1) 1661/ 6000B7C :                     	; ---------------------------------------
(1) 1662/ 6000B7C :                     	; Make refill timers on movement
(1) 1663/ 6000B7C :                     	; ---------------------------------------
(1) 1664/ 6000B7C : DE37                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(1) 1665/ 6000B7E : 9D74                		mov	#320,r13
(1) 1666/ 6000B80 : EC03                		mov	#%11,r12
(1) 1667/ 6000B82 : EBF0                		mov	#-16,r11
(1) 1668/ 6000B84 : 0009                		nop
(1) 1669/ 6000B86 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1670/ 6000B88 : 6903                		mov	r0,r9
(1) 1671/ 6000B8A : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1672/ 6000B8C : 6403                		mov	r0,r4
(1) 1673/ 6000B8E : C60E                		mov	@(marsGbl_Scrl_Xold,gbr),r0
(1) 1674/ 6000B90 : 24B9                		and	r11,r4
(1) 1675/ 6000B92 : 20B9                		and	r11,r0
(1) 1676/ 6000B94 : 3040                		cmp/eq	r4,r0
(1) 1677/ 6000B96 : 891A                		bt	.x_dont_scrl
(1) 1678/ 6000B98 : 2118                		tst	r1,r1
(1) 1679/ 6000B9A : 8918                		bt	.x_dont_scrl
(1) 1680/ 6000B9C : 6AE3                		mov	r14,r10
(1) 1681/ 6000B9E : 4115                		cmp/pl	r1
(1) 1682/ 6000BA0 : 8B00                		bf	.x_scrl_l
(1) 1683/ 6000BA2 : 34DC                		add	r13,r4
(1) 1684/ 6000BA4 :                     .x_scrl_l:
(1) 1685/ 6000BA4 : 9062                		mov	#512-1,r0
(1) 1686/ 6000BA6 : 2409                		and	r0,r4
(1) 1687/ 6000BA8 : 9061                		mov	#256-1,r0
(1) 1688/ 6000BAA : 2909                		and	r0,r9
(1) 1689/ 6000BAC : 4409                		shlr2	r4
(1) 1690/ 6000BAE : 4409                		shlr2	r4
(1) 1691/ 6000BB0 : 4909                		shlr2	r9
(1) 1692/ 6000BB2 : 4909                		shlr2	r9
(1) 1693/ 6000BB4 : 4400                		shll	r4
(1) 1694/ 6000BB6 : 3A4C                		add	r4,r10
(1) 1695/ 6000BB8 : E710                		mov	#256/16,r7
(1) 1696/ 6000BBA :                     .x_sloop:
(1) 1697/ 6000BBA : 6093                		mov	r9,r0
(1) 1698/ 6000BBC : C90F                		and	#$0F,r0
(1) 1699/ 6000BBE : 4018                		shll8	r0
(1) 1700/ 6000BC0 : 4009                		shlr2	r0
(1) 1701/ 6000BC2 : 08AD                		mov.w	@(r10,r0),r8
(1) 1702/ 6000BC4 : 28CB                		or	r12,r8
(1) 1703/ 6000BC6 : 0A85                		mov.w	r8,@(r10,r0)
(1) 1704/ 6000BC8 : 4710                		dt	r7
(1) 1705/ 6000BCA : 8FF6                		bf/s	.x_sloop
(1) 1706/ 6000BCC : 7901                		add	#1,r9
(1) 1707/ 6000BCE :                     .x_dont_scrl:
(1) 1708/ 6000BCE :                     ; 		mov	#224,r13
(1) 1709/ 6000BCE : 9D4F                		mov	#SET_MSCRLHGHT,r13			; Y draw
(1) 1710/ 6000BD0 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1711/ 6000BD2 : 6903                		mov	r0,r9
(1) 1712/ 6000BD4 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1713/ 6000BD6 : 6403                		mov	r0,r4
(1) 1714/ 6000BD8 : C60F                		mov	@(marsGbl_Scrl_Yold,gbr),r0
(1) 1715/ 6000BDA : 24B9                		and	r11,r4
(1) 1716/ 6000BDC : 20B9                		and	r11,r0
(1) 1717/ 6000BDE : 3040                		cmp/eq	r4,r0
(1) 1718/ 6000BE0 : 891A                		bt	.y_dont_scrl
(1) 1719/ 6000BE2 : 2228                		tst	r2,r2
(1) 1720/ 6000BE4 : 8918                		bt	.y_dont_scrl
(1) 1721/ 6000BE6 : 6AE3                		mov	r14,r10
(1) 1722/ 6000BE8 : 4215                		cmp/pl	r2
(1) 1723/ 6000BEA : 8B00                		bf	.y_scrl_l
(1) 1724/ 6000BEC : 34DC                		add	r13,r4
(1) 1725/ 6000BEE :                     .y_scrl_l:
(1) 1726/ 6000BEE : 903E                		mov	#256-1,r0
(1) 1727/ 6000BF0 : 2409                		and	r0,r4
(1) 1728/ 6000BF2 : 903B                		mov	#512-1,r0
(1) 1729/ 6000BF4 : 2909                		and	r0,r9
(1) 1730/ 6000BF6 : 4409                		shlr2	r4
(1) 1731/ 6000BF8 : 4409                		shlr2	r4
(1) 1732/ 6000BFA : 4909                		shlr2	r9
(1) 1733/ 6000BFC : 4909                		shlr2	r9
(1) 1734/ 6000BFE : 4418                		shll8	r4
(1) 1735/ 6000C00 : 4409                		shlr2	r4
(1) 1736/ 6000C02 : 3A4C                		add	r4,r10
(1) 1737/ 6000C04 : E720                		mov	#512/16,r7
(1) 1738/ 6000C06 :                     .y_sloop:
(1) 1739/ 6000C06 : 6093                		mov	r9,r0
(1) 1740/ 6000C08 : C91F                		and	#$1F,r0
(1) 1741/ 6000C0A : 4000                		shll	r0
(1) 1742/ 6000C0C : 08AD                		mov.w	@(r10,r0),r8
(1) 1743/ 6000C0E : 28CB                		or	r12,r8
(1) 1744/ 6000C10 : 0A85                		mov.w	r8,@(r10,r0)
(1) 1745/ 6000C12 : 4710                		dt	r7
(1) 1746/ 6000C14 : 8FF7                		bf/s	.y_sloop
(1) 1747/ 6000C16 : 7901                		add	#1,r9
(1) 1748/ 6000C18 :                     .y_dont_scrl:
(1) 1749/ 6000C18 :                     	; ---------------------------------------
(1) 1750/ 6000C18 :                     	; Start drawing
(1) 1751/ 6000C18 :                     	; ---------------------------------------
(1) 1752/ 6000C18 : B1F0                 		bsr	Mars_CachePurge
(1) 1753/ 6000C1A : 0009                		nop
(1) 1754/ 6000C1C : B492                		bsr	MarsVideo_DrawFillBlk		; Redraw changes from Refill boxes
(1) 1755/ 6000C1E : 0009                		nop
(1) 1756/ 6000C20 : B2DA                		bsr	MarsVideo_SuperSpr_Make
(1) 1757/ 6000C22 : 0009                		nop
(1) 1758/ 6000C24 : B1EA                		bsr	Mars_CachePurge
(1) 1759/ 6000C26 : 0009                		nop
(1) 1760/ 6000C28 : B406                		bsr	MarsVideo_MkFillBlk		; Build refill boxes
(1) 1761/ 6000C2A : 0009                		nop
(1) 1762/ 6000C2C : B334                		bsr	MarsVideo_SuperSpr_Draw
(1) 1763/ 6000C2E : 0009                		nop
(1) 1764/ 6000C30 :                     	; ---------------------------------------
(1) 1765/ 6000C30 :                     	; Make the scroll area visible and
(1) 1766/ 6000C30 :                     	; fix the broken lines.
(1) 1767/ 6000C30 : E100                		mov	#0,r1
(1) 1768/ 6000C32 : 921E                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1769/ 6000C34 : B294                		bsr	MarsVideo_ShowScrlBg
(1) 1770/ 6000C36 : 0009                		nop
(1) 1771/ 6000C38 : B2BA                		bsr	marsScrl_CopyTopBot		; Bottom
(1) 1772/ 6000C3A : 0009                		nop
(1) 1773/ 6000C3C : 9219                		mov	#240,r2				; $xxFF patcher
(1) 1774/ 6000C3E : D308                		mov	#SET_FBVRAM_PATCH,r3
(1) 1775/ 6000C40 : B258                		bsr	MarsVideo_FixTblShift
(1) 1776/ 6000C42 : E100                		mov	#0,r1
(1) 1777/ 6000C44 :                     
(1) 1778/ 6000C44 :                     	; ---------------------------------------
(1) 1779/ 6000C44 :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(1) 1780/ 6000C44 :                     ; 		mov	r0,r6
(1) 1781/ 6000C44 :                     ; .wait_wdg:	mov.w	@(marsGbl_SVdpQRead,gbr),r0
(1) 1782/ 6000C44 :                     ; 		cmp/ge	r6,r0
(1) 1783/ 6000C44 :                     ; 		bf	.wait_wdg
(1) 1784/ 6000C44 :                     ; 		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1785/ 6000C44 :                     ; 		mov.w   #$A518,r0
(1) 1786/ 6000C44 :                     ; 		mov.w   r0,@r1
(1) 1787/ 6000C44 : B1DA                		bsr	Mars_CachePurge
(1) 1788/ 6000C46 : 0009                		nop
(1) 1789/ 6000C48 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1790/ 6000C4A : CA01                		xor	#1,r0
(1) 1791/ 6000C4C : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1792/ 6000C4E : AE3F                		bra	master_loop
(1) 1793/ 6000C50 : 0009                		nop
(1) 1794/ 6000C52 :                     		align 4
(1) 1795/ 6000C54 : 2000 4000 2000      		ltorg
          6000C5A : 4100 C000 0200 
          6000C60 : 0001 E000 0200 
          6000C66 : 0008 FFF0 0140 
          6000C6C : 01FF 00FF 00F0 
          6000C72 : 00F0             
(1) 1796/ 6000C74 :                     
(1) 1797/ 6000C74 :                     ; ----------------------------------------------------------------
(1) 1798/ 6000C74 :                     ; Halfway jumps...
(1) 1799/ 6000C74 :                     		align 4
(1) 1800/ 6000C74 :                     g_Mstr_CopyPalette:
(1) 1801/ 6000C74 : A0E4                		bra	Mstr_CopyPalette
(1) 1802/ 6000C76 : 0009                		nop
(1) 1803/ 6000C78 :                     		align 4
(1) 1804/ 6000C78 :                     g_MstrMode_InitExit:
(1) 1805/ 6000C78 : AED1                		bra	MstrMode_InitExit
(1) 1806/ 6000C7A : 0009                		nop
(1) 1807/ 6000C7C :                     
(1) 1808/ 6000C7C :                     ; ====================================================================
(1) 1809/ 6000C7C :                     ; ----------------------------------------------------------------
(1) 1810/ 6000C7C :                     ; 3D polygons mode, CPU INTENSIVE
(1) 1811/ 6000C7C :                     ;
(1) 1812/ 6000C7C :                     ; NOTES:
(1) 1813/ 6000C7C :                     ; - This will set SVDP permission to here.
(1) 1814/ 6000C7C :                     ; - Slave CPU will help a little.
(1) 1815/ 6000C7C :                     ; ----------------------------------------------------------------
(1) 1816/ 6000C7C :                     
(1) 1817/ 6000C7C :                     ; ---------------------------------------
(1) 1818/ 6000C7C :                     ; Init
(1) 1819/ 6000C7C :                     ; ---------------------------------------
(1) 1820/ 6000C7C :                     
(1) 1821/ 6000C7C :                     		align 4
(1) 1822/ 6000C7C :                     MstrMode_3D_i:
(1) 1823/ 6000C7C : D118                		mov	#_sysreg+comm12,r1
(1) 1824/ 6000C7E : 6011                		mov.w	@r1,r0
(1) 1825/ 6000C80 : C940                		and	#%01000000,r0
(1) 1826/ 6000C82 : 2008                		tst	r0,r0
(1) 1827/ 6000C84 : 8BF8                		bf	g_MstrMode_InitExit
(1) 1828/ 6000C86 : B1B9                		bsr	Mars_CachePurge
(1) 1829/ 6000C88 : 0009                		nop
(1) 1830/ 6000C8A : 9137                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1831/ 6000C8C : 9037                		mov.w   #$A518,r0
(1) 1832/ 6000C8E : 2101                		mov.w   r0,@r1
(1) 1833/ 6000C90 : D114                		mov	#_sysreg+comm14,r1
(1) 1834/ 6000C92 :                     .wait_slvn:
(1) 1835/ 6000C92 : 6011                		mov.w	@r1,r0
(1) 1836/ 6000C94 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1837/ 6000C96 : 2008                		tst	r0,r0
(1) 1838/ 6000C98 : 8BFB                		bf	.wait_slvn
(1) 1839/ 6000C9A : D113                		mov	#RAM_Mars_Buff3D_Start,r1
(1) 1840/ 6000C9C : D213                		mov	#RAM_Mars_Buff3D_End,r2
(1) 1841/ 6000C9E : E000                		mov	#0,r0
(1) 1842/ 6000CA0 :                     .clr_me2d:
(1) 1843/ 6000CA0 : 2102                		mov	r0,@r1
(1) 1844/ 6000CA2 : 3123                		cmp/ge	r2,r1
(1) 1845/ 6000CA4 : 8FFC                		bf/s	.clr_me2d
(1) 1846/ 6000CA6 : 7104                		add	#4,r1
(1) 1847/ 6000CA8 : DE11                		mov	#_sysreg,r14
(1) 1848/ 6000CAA : DD12                		mov	#_vdpreg,r13
(1) 1849/ 6000CAC : E000                		mov	#0,r0
(1) 1850/ 6000CAE : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1851/ 6000CB0 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1852/ 6000CB2 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1853/ 6000CB4 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1854/ 6000CB6 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1855/ 6000CB8 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1856/ 6000CBA : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1857/ 6000CBC : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(1) 1858/ 6000CBE : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1) 1859/ 6000CC0 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(1) 1860/ 6000CC2 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1861/ 6000CC4 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1862/ 6000CC6 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1863/ 6000CC8 : CA01                		xor	#1,r0
(1) 1864/ 6000CCA : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1865/ 6000CCC : 9018                		mov	#FM,r0
(1) 1866/ 6000CCE : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1867/ 6000CD0 : E001                		mov	#1,r0
(1) 1868/ 6000CD2 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1869/ 6000CD4 :                     	; **** TEMPORAL
(1) 1870/ 6000CD4 :                     ; 		mov	#TEST_MODEL,r0
(1) 1871/ 6000CD4 :                     ; 		mov	#RAM_Mars_Objects,r1
(1) 1872/ 6000CD4 :                     ; 		mov	r0,@(mdl_data,r1)
(1) 1873/ 6000CD4 :                     	; ****
(1) 1874/ 6000CD4 : D108                		mov	#_sysreg+comm12+1,r1	; Enable frame-dropping
(1) 1875/ 6000CD6 : 6010                		mov.b	@r1,r0
(1) 1876/ 6000CD8 : CB08                		or	#%00001000,r0
(1) 1877/ 6000CDA : 2100                		mov.b	r0,@r1
(1) 1878/ 6000CDC : AFCC                		bra	g_MstrMode_InitExit
(1) 1879/ 6000CDE : 0009                		nop
(1) 1880/ 6000CE0 :                     		align 4
(1) 1881/ 6000CE0 : 2000 402C 2000      		ltorg
          6000CE6 : 402E 0600 7310 
          6000CEC : 0600 FA58 2000 
          6000CF2 : 4000 2000 4100 
          6000CF8 : 2000 402D FE80 
          6000CFE : A518 0080          
(1) 1882/ 6000D02 :                     
(1) 1883/ 6000D02 :                     ; ---------------------------------------
(1) 1884/ 6000D02 :                     ; Loop
(1) 1885/ 6000D02 :                     ; ---------------------------------------
(1) 1886/ 6000D02 :                     
(1) 1887/ 6000D02 :                     		align 4
(1) 1888/ 6000D04 :                     MstrMode_3D:
(1) 1889/ 6000D04 :                     	; ---------------------------------------
(1) 1890/ 6000D04 :                     	; *** We are in VBLANK ***
(1) 1891/ 6000D04 : DE5D                		mov	#_sysreg,r14
(1) 1892/ 6000D06 : DD5E                		mov	#_vdpreg,r13
(1) 1893/ 6000D08 : 85D5                .wait_sv:	mov.w	@(vdpsts,r13),r0			; Check if Framebuffer is locked
(1) 1894/ 6000D0A : C802                		tst	#%10,r0
(1) 1895/ 6000D0C : 8BFC                		bf	.wait_sv
(1) 1896/ 6000D0E : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0		; Set current Framebuffer
(1) 1897/ 6000D10 : C901                		and	#1,r0
(1) 1898/ 6000D12 : 80DB                		mov.b	r0,@(framectl,r13)
(1) 1899/ 6000D14 : B094                		bsr	Mstr_CopyPalette
(1) 1900/ 6000D16 : 0009                		nop
(1) 1901/ 6000D18 :                     	; ---------------------------------------
(1) 1902/ 6000D18 : D45A                		mov	#_sysreg+comm14,r4
(1) 1903/ 6000D1A :                     .wait_slvi:
(1) 1904/ 6000D1A : 6041                		mov.w	@r4,r0
(1) 1905/ 6000D1C : C907                		and	#%00000111,r0				; Slave busy?
(1) 1906/ 6000D1E : 2008                		tst	r0,r0
(1) 1907/ 6000D20 : 8BFB                		bf	.wait_slvi
(1) 1908/ 6000D22 : B16B                		bsr	Mars_CachePurge				; Purge cache
(1) 1909/ 6000D24 : 0009                		nop
(1) 1910/ 6000D26 :                     
(1) 1911/ 6000D26 :                     	; Copy CAMERA and OBJECTS for Slave
(1) 1912/ 6000D26 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1913/ 6000D28 : 6403                		mov	r0,r4
(1) 1914/ 6000D2A : 91C7                		mov	#Dreq_Buff1,r1
(1) 1915/ 6000D2C : 314C                		add	r4,r1
(1) 1916/ 6000D2E : D256                		mov	#RAM_Mars_SprPolygn,r2
(1) 1917/ 6000D30 : 93C5                		mov	#(mspr_len*MAX_MARSMSPR)/4,r3		; $400 bytes
(1) 1918/ 6000D32 :                     .copy_mspr:
(1) 1919/ 6000D32 : 6016                		mov	@r1+,r0
(1) 1920/ 6000D34 : 2202                		mov	r0,@r2
(1) 1921/ 6000D36 : 4310                		dt	r3
(1) 1922/ 6000D38 : 8FFB                		bf/s	.copy_mspr
(1) 1923/ 6000D3A : 7204                		add	#4,r2
(1) 1924/ 6000D3C : 91C0                		mov	#Dreq_Buff2,r1
(1) 1925/ 6000D3E : 314C                		add	r4,r1
(1) 1926/ 6000D40 : D252                		mov	#RAM_Mars_Objects,r2
(1) 1927/ 6000D42 : 93BE                		mov	#(mmdl_len*MAX_MARSOBJ)/4,r3		; $400 bytes
(1) 1928/ 6000D44 :                     .copy_obj:
(1) 1929/ 6000D44 : 6016                		mov	@r1+,r0
(1) 1930/ 6000D46 : 2202                		mov	r0,@r2
(1) 1931/ 6000D48 : 4310                		dt	r3
(1) 1932/ 6000D4A : 8FFB                		bf/s	.copy_obj
(1) 1933/ 6000D4C : 7204                		add	#4,r2
(1) 1934/ 6000D4E : 91B9                		mov	#Dreq_Buff0,r1
(1) 1935/ 6000D50 : 314C                		add	r4,r1
(1) 1936/ 6000D52 : D24F                		mov	#RAM_Mars_ObjCamera,r2
(1) 1937/ 6000D54 : E310                		mov	#$40/4,r3				; $40 bytes
(1) 1938/ 6000D56 :                     .copy_cam:
(1) 1939/ 6000D56 : 6016                		mov	@r1+,r0
(1) 1940/ 6000D58 : 2202                		mov	r0,@r2
(1) 1941/ 6000D5A : 4310                		dt	r3
(1) 1942/ 6000D5C : 8FFB                		bf/s	.copy_cam
(1) 1943/ 6000D5E : 7204                		add	#4,r2
(1) 1944/ 6000D60 : D14C                		mov	#RAM_Mars_CurrPlgnPage,r1		; Swap polygon R/W sections
(1) 1945/ 6000D62 : 6012                		mov	@r1,r0
(1) 1946/ 6000D64 : CA01                		xor	#1,r0
(1) 1947/ 6000D66 : 6D03                		mov	r0,r13					; ** Current R/W page
(1) 1948/ 6000D68 : 2102                		mov	r0,@r1
(1) 1949/ 6000D6A : D44B                		mov	#_sysreg+comm14+1,r4			; Request Slave Task $01
(1) 1950/ 6000D6C : E001                		mov	#1,r0
(1) 1951/ 6000D6E : 2400                		mov.b	r0,@r4
(1) 1952/ 6000D70 :                     	; -------------------------------
(1) 1953/ 6000D70 :                     	; Start drawing the polygons
(1) 1954/ 6000D70 : D143                		mov	#_vdpreg,r1
(1) 1955/ 6000D72 : 90A8                		mov	#$A1,r0					; VDPFILL LEN: Pre-start at $A1
(1) 1956/ 6000D74 : 8113                		mov.w	r0,@(6,r1)
(1) 1957/ 6000D76 : D149                		mov	#_framebuffer,r1
(1) 1958/ 6000D78 : 93A6                		mov	#240,r3
(1) 1959/ 6000D7A : E040                		mov	#$100>>2,r0
(1) 1960/ 6000D7C : 4008                		shll2	r0
(1) 1961/ 6000D7E : 6203                		mov	r0,r2
(1) 1962/ 6000D80 :                     .mk_table:
(1) 1963/ 6000D80 : 2101                		mov.w	r0,@r1
(1) 1964/ 6000D82 : 302C                		add	r2,r0
(1) 1965/ 6000D84 : 4310                		dt	r3
(1) 1966/ 6000D86 : 8FFB                		bf/s	.mk_table
(1) 1967/ 6000D88 : 7102                		add	#2,r1
(1) 1968/ 6000D8A :                     	; Prepare watchdog
(1) 1969/ 6000D8A : E000                		mov	#0,r0
(1) 1970/ 6000D8C : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(1) 1971/ 6000D8E : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(1) 1972/ 6000D90 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(1) 1973/ 6000D92 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1974/ 6000D94 : 9098                		mov	#240,r0					; Lines to clear for WdgMode $07
(1) 1975/ 6000D96 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1976/ 6000D98 : E007                		mov	#7,r0
(1) 1977/ 6000D9A : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Start at the last mode
(1) 1978/ 6000D9C : B12E                		bsr	Mars_CachePurge
(1) 1979/ 6000D9E : 0009                		nop
(1) 1980/ 6000DA0 : E100                		mov	#0,r1
(1) 1981/ 6000DA2 : E220                		mov	#$20,r2
(1) 1982/ 6000DA4 : D03E                		mov	#Mars_SetWatchdog,r0
(1) 1983/ 6000DA6 : 400B                		jsr	@r0
(1) 1984/ 6000DA8 : 0009                		nop
(1) 1985/ 6000DAA :                     
(1) 1986/ 6000DAA :                     	; WATCHDOG IS ACTIVE
(1) 1987/ 6000DAA : 0009                		nop
(1) 1988/ 6000DAC : 60D3                		mov	r13,r0					; GET current page
(1) 1989/ 6000DAE : C801                		tst     #1,r0					; on this frame
(1) 1990/ 6000DB0 : 8902                		bt	.page_2
(1) 1997/ 6000DB2 : DE3C                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1998/ 6000DB4 : A003                		bra	.cont_plgn
(1) 1999/ 6000DB6 : DD3A                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 2001/ 6000DB8 :                     .page_2:
(1) 2008/ 6000DB8 : DE3C                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 2009/ 6000DBA : A000                		bra	.cont_plgn		; <-- syncronizing, i think.
(1) 2010/ 6000DBC : DD3C                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 2012/ 6000DBE :                     .cont_plgn:
(1) 2013/ 6000DBE : 6DD2                		mov	@r13,r13	; Grab number of polygons
(1) 2014/ 6000DC0 : 4D15                		cmp/pl	r13		; If < 0: leave
(1) 2015/ 6000DC2 : 8B29                		bf	.skip
(1) 2016/ 6000DC4 :                     
(1) 2017/ 6000DC4 :                     	; ---------------------------------------
(1) 2018/ 6000DC4 :                     	; Z sorting
(1) 2019/ 6000DC4 : 6CE3                		mov	r14,r12		; r12 - PlgnList copy
(1) 2020/ 6000DC6 : 6BD3                		mov	r13,r11		; r11 - PlgnNum copy
(1) 2021/ 6000DC8 :                     .roll:
(1) 2022/ 6000DC8 : 6AC3                		mov	r12,r10
(1) 2023/ 6000DCA : 67A2                		mov	@r10,r7		; r1 - Start value
(1) 2024/ 6000DCC : 68A3                		mov	r10,r8		; Set Lower pointer
(1) 2025/ 6000DCE : 69B3                		mov	r11,r9
(1) 2026/ 6000DD0 : 0009                		nop
(1) 2027/ 6000DD2 :                     .srch:
(1) 2028/ 6000DD2 : 60A2                		mov	@r10,r0
(1) 2029/ 6000DD4 : 3073                		cmp/ge	r7,r0
(1) 2030/ 6000DD6 : 8901                		bt	.higher
(1) 2031/ 6000DD8 : 6703                		mov	r0,r7		; Update LOW r1 value
(1) 2032/ 6000DDA : 68A3                		mov	r10,r8		; Save NEW Lower pointer
(1) 2033/ 6000DDC :                     .higher:
(1) 2034/ 6000DDC : 4910                		dt	r9
(1) 2035/ 6000DDE : 8FF8                		bf/s	.srch
(1) 2036/ 6000DE0 : 7A08                		add	#8,r10
(1) 2037/ 6000DE2 : 6186                		mov	@r8+,r1		; Swap Z and pointers
(1) 2038/ 6000DE4 : 6286                		mov	@r8+,r2
(1) 2039/ 6000DE6 : 63C6                		mov	@r12+,r3
(1) 2040/ 6000DE8 : 64C6                		mov	@r12+,r4
(1) 2041/ 6000DEA : 2C26                		mov	r2,@-r12
(1) 2042/ 6000DEC : 2C16                		mov	r1,@-r12
(1) 2043/ 6000DEE : 2846                		mov	r4,@-r8
(1) 2044/ 6000DF0 : 2836                		mov	r3,@-r8
(1) 2045/ 6000DF2 : 4B10                		dt	r11
(1) 2046/ 6000DF4 : 8FE8                		bf/s	.roll
(1) 2047/ 6000DF6 : 7C08                		add	#8,r12
(1) 2048/ 6000DF8 :                     
(1) 2049/ 6000DF8 :                     	; ---------------------------------------
(1) 2050/ 6000DF8 :                     	; Slice polygon with the sorted list
(1) 2051/ 6000DF8 :                     .loop:
(1) 2052/ 6000DF8 : 50E1                		mov	@(4,r14),r0			; Grab current pointer
(1) 2053/ 6000DFA : 4015                		cmp/pl	r0				; Zero?
(1) 2054/ 6000DFC : 8B09                		bf	.invalid
(1) 2055/ 6000DFE : 2FE6                		mov	r14,@-r15
(1) 2056/ 6000E00 : 6E03                		mov	r0,r14
(1) 2057/ 6000E02 : D02C                		mov	#MarsVideo_SlicePlgn,r0
(1) 2058/ 6000E04 : 400B                		jsr	@r0
(1) 2059/ 6000E06 :                     ; 		bsr	MarsVideo_SlicePlgn
(1) 2060/ 6000E06 : 2FD6                		mov	r13,@-r15
(1) 2061/ 6000E08 : 6DF6                		mov	@r15+,r13
(1) 2062/ 6000E0A : 6EF6                		mov	@r15+,r14
(1) 2063/ 6000E0C : E000                		mov	#0,r0
(1) 2064/ 6000E0E : 2E02                		mov	r0,@r14
(1) 2065/ 6000E10 : 1E01                		mov	r0,@(4,r14)
(1) 2066/ 6000E12 :                     .invalid:
(1) 2067/ 6000E12 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 2068/ 6000E14 : 8FF0                		bf/s	.loop
(1) 2069/ 6000E16 : 7E08                		add	#8,r14				; Move to next entry
(1) 2070/ 6000E18 :                     .skip:
(1) 2071/ 6000E18 : E001                		mov	#1,r0				; Report to Watchdog that we
(1) 2072/ 6000E1A : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)	; finished slicing.
(1) 2073/ 6000E1C :                     
(1) 2074/ 6000E1C :                     	; ---------------------------------------
(1) 2075/ 6000E1C : C506                .wait_pz: 	mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces remaining?
(1) 2076/ 6000E1E : 2008                		tst	r0,r0
(1) 2077/ 6000E20 : 8BFC                		bf	.wait_pz
(1) 2078/ 6000E22 : C502                .wait_wdg:	mov.w	@(marsGbl_WdgTask,gbr),r0	; Watchdog finished?
(1) 2079/ 6000E24 : 2008                		tst	r0,r0
(1) 2080/ 6000E26 : 8BFC                		bf	.wait_wdg
(1) 2081/ 6000E28 : E000                		mov	#0,r0
(1) 2082/ 6000E2A : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2083/ 6000E2C : 914D                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 2084/ 6000E2E : 904D                		mov.w   #$A518,r0
(1) 2085/ 6000E30 : 2101                		mov.w   r0,@r1
(1) 2086/ 6000E32 : B0E3                		bsr	Mars_CachePurge
(1) 2087/ 6000E34 : 0009                		nop
(1) 2088/ 6000E36 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 2089/ 6000E38 : CA01                		xor	#1,r0
(1) 2090/ 6000E3A : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 2091/ 6000E3C : AD48                		bra	master_loop
(1) 2092/ 6000E3E : 0009                		nop
(1) 2093/ 6000E40 :                     		align 4
(1) 2094/ 6000E40 :                     
(1) 2095/ 6000E40 :                     ; ----------------------------------------------------------------
(1) 2096/ 6000E40 :                     
(1) 2097/ 6000E40 :                     		align 4
(1) 2098/ 6000E40 :                     Mstr_CopyPalette:
(1) 2099/ 6000E40 : DE0E                		mov	#_sysreg,r14
(1) 2100/ 6000E42 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 2101/ 6000E44 : C880                  		tst	#FM,r0
(1) 2102/ 6000E46 : 8916                  		bt	.svdp_locked
(1) 2103/ 6000E48 : D21B                		mov	#_palette,r2
(1) 2104/ 6000E4A : E320                		mov	#(256/2)/4,r3
(1) 2105/ 6000E4C : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 2106/ 6000E4E : E100                		mov	#Dreq_Palette,r1		; PALETTE MUST BE AT THE TOP OF DREQ DATA,
(1) 2107/ 6000E50 :                     ; 		add	r0,r1				; so I don't need to add Dreq_Palette...
(1) 2108/ 6000E50 : 6103                		mov	r0,r1
(1) 2109/ 6000E52 :                     .copy_pal:
(1) 2110/ 6000E52 :                     	rept 4
(1) 2111/ 6000E52 :                     		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E52 :                     		nop
(1) 2113/ 6000E52 :                     		mov	r0,@r2
(1) 2114/ 6000E52 :                     		add	#4,r2
(1) 2115/ 6000E52 :                     	endm
(1) 2111/ 6000E52 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E54 : 0009                		nop
(1) 2113/ 6000E56 : 2202                		mov	r0,@r2
(1) 2114/ 6000E58 : 7204                		add	#4,r2
(1) 2111/ 6000E5A : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E5C : 0009                		nop
(1) 2113/ 6000E5E : 2202                		mov	r0,@r2
(1) 2114/ 6000E60 : 7204                		add	#4,r2
(1) 2111/ 6000E62 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E64 : 0009                		nop
(1) 2113/ 6000E66 : 2202                		mov	r0,@r2
(1) 2114/ 6000E68 : 7204                		add	#4,r2
(1) 2111/ 6000E6A : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2112/ 6000E6C : 0009                		nop
(1) 2113/ 6000E6E : 2202                		mov	r0,@r2
(1) 2114/ 6000E70 : 7204                		add	#4,r2
(1) 2116/ 6000E72 : 4310                		dt	r3
(1) 2117/ 6000E74 : 8BED                		bf	.copy_pal
(1) 2118/ 6000E76 :                     .svdp_locked:
(1) 2119/ 6000E76 : 000B                		rts
(1) 2120/ 6000E78 : 0009                		nop
(1) 2121/ 6000E7A :                     		align 4
(1) 2122/ 6000E7C : 2000 4000 2000      		ltorg
          6000E82 : 4100 2000 402E 
          6000E88 : 0600 7650 0600 
          6000E8E : 7350 0600 7310 
          6000E94 : 2600 7300 2000 
          6000E9A : 402F 2400 0000 
          6000EA0 : 0600 1054 0600 
          6000EA6 : EA50 0600 FA50 
          6000EAC : 0600 F250 0600 
          6000EB2 : FA54 0600 1734 
          6000EB8 : 2000 4200 0220 
          6000EBE : 0100 0620 00C0 
          6000EC4 : 0200 00A1 00F0 
          6000ECA : FE80 A518          
(1) 2123/ 6000ECE :                     
(1) 2124/ 6000ECE :                     ; ====================================================================
(1) 2125/ 6000ECE :                     ; ----------------------------------------------------------------
(1) 2126/ 6000ECE :                     ; Slave entry point
(1) 2127/ 6000ECE :                     ; ----------------------------------------------------------------
(1) 2128/ 6000ECE :                     
(1) 2129/ 6000ECE :                     		align 4
(1) 2130/ 6000ED0 :                     SH2_S_Entry:
(1) 2131/ 6000ED0 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2132/ 6000ED2 : 600C                		extu.b	r0,r0
(1) 2133/ 6000ED4 : 400E                		ldc	r0,sr
(1) 2134/ 6000ED6 : DF22                		mov	#STACK_SLV,r15		; Reset stack
(1) 2135/ 6000ED8 : D022                		mov	#SH2_Slave,r0		; Reset vbr
(1) 2136/ 6000EDA : 402E                		ldc	r0,vbr
(1) 2137/ 6000EDC : 9150                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 2138/ 6000EDE : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 2139/ 6000EE0 : 8010                		mov.b	r0,@(0,r1)
(1) 2140/ 6000EE2 : E0E2                		mov.b	#$E2,r0
(1) 2141/ 6000EE4 : 8017                		mov.b	r0,@(7,r1)
(1) 2142/ 6000EE6 : E000                		mov	#0,r0
(1) 2143/ 6000EE8 : 8014                		mov.b	r0,@(4,r1)
(1) 2144/ 6000EEA : E001                		mov	#1,r0
(1) 2145/ 6000EEC : 8015                		mov.b	r0,@(5,r1)
(1) 2146/ 6000EEE : E000                		mov	#0,r0
(1) 2147/ 6000EF0 : 8016                		mov.b	r0,@(6,r1)
(1) 2148/ 6000EF2 : E001                		mov	#1,r0
(1) 2149/ 6000EF4 : 8011                		mov.b	r0,@(1,r1)
(1) 2150/ 6000EF6 : E000                		mov	#0,r0
(1) 2151/ 6000EF8 : 8013                		mov.b	r0,@(3,r1)
(1) 2152/ 6000EFA : 8012                		mov.b	r0,@(2,r1)
(1) 2153/ 6000EFC : E0F2                		mov.b	#$F2,r0			; ****
(1) 2154/ 6000EFE : 8017                		mov.b	r0,@(7,r1)
(1) 2155/ 6000F00 : E000                		mov	#0,r0
(1) 2156/ 6000F02 : 8014                		mov.b	r0,@(4,r1)
(1) 2157/ 6000F04 : E001                		mov	#1,r0
(1) 2158/ 6000F06 : 8015                		mov.b	r0,@(5,r1)
(1) 2159/ 6000F08 : E0E2                		mov.b	#$E2,r0
(1) 2160/ 6000F0A : 8017                		mov.b	r0,@(7,r1)
(1) 2161/ 6000F0C :                     
(1) 2162/ 6000F0C :                     	; --------------------------------------------------------
(1) 2163/ 6000F0C :                     	; Extra interrupt settings
(1) 2164/ 6000F0C : 9039                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 2165/ 6000F0E : 9139                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 2166/ 6000F10 : 2011                		mov.w   r1,@r0
(1) 2167/ 6000F12 : 9038                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 2168/ 6000F14 : 9138                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 2169/ 6000F16 : 2011                		mov.w   r1,@r0
(1) 2170/ 6000F18 : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 2171/ 6000F1A : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 2172/ 6000F1C : 2012                		mov	r1,@r0
(1) 2173/ 6000F1E :                     	; --------------------------------------------------------
(1) 2174/ 6000F1E :                     	; CD32X only:
(1) 2175/ 6000F1E :                     	; --------------------------------------------------------
(1) 2177/ 6000F1E : D112                		mov	#_sysreg+comm0,r1
(1) 2178/ 6000F20 : 6012                .wait_mstr:	mov	@r1,r0
(1) 2179/ 6000F22 : 2008                		tst	r0,r0
(1) 2180/ 6000F24 : 8BFC                		bf	.wait_mstr
(1) 2181/ 6000F26 : 7104                		add	#4,r1
(1) 2182/ 6000F28 : E000                		mov	#0,r0				; clear comm4
(1) 2183/ 6000F2A : 2102                		mov	r0,@r1
(1) 2185/ 6000F2C : B0AA                		bsr	MarsSound_Init			; Init sound
(1) 2186/ 6000F2E : 0009                		nop
(1) 2187/ 6000F30 :                     
(1) 2188/ 6000F30 :                     ; ====================================================================
(1) 2189/ 6000F30 :                     ; ----------------------------------------------------------------
(1) 2190/ 6000F30 :                     ; Slave MAIN code
(1) 2191/ 6000F30 :                     ;
(1) 2192/ 6000F30 :                     ; *** NOTE ***
(1) 2193/ 6000F30 :                     ; On actual HW this CPU runs slower than MASTER because of
(1) 2194/ 6000F30 :                     ; priority of the SDRAM.
(1) 2195/ 6000F30 :                     ; The important code is stored on 2K Cache
(1) 2196/ 6000F30 :                     ; (see cache/cache_slv.asm)
(1) 2197/ 6000F30 :                     ; ----------------------------------------------------------------
(1) 2198/ 6000F30 :                     
(1) 2199/ 6000F30 :                     SH2_S_HotStart:
(1) 2200/ 6000F30 : D00E                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 2201/ 6000F32 : 401E                		ldc	r0,gbr
(1) 2202/ 6000F34 : B062                		bsr	Mars_CachePurge
(1) 2203/ 6000F36 : 0009                		nop
(1) 2204/ 6000F38 : D10D                		mov	#CACHE_SLAVE,r1
(1) 2205/ 6000F3A : 9226                		mov	#CACHE_SLAVE_E-CACHE_SLAVE,r2
(1) 2206/ 6000F3C : D00D                		mov	#Mars_CacheRamCode,r0
(1) 2207/ 6000F3E : 400B                		jsr	@r0
(1) 2208/ 6000F40 : 0009                		nop
(1) 2209/ 6000F42 : D10D                		mov	#_sysreg,r1
(1) 2210/ 6000F44 : 6011                		mov.w	@r1,r0
(1) 2211/ 6000F46 : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 2212/ 6000F48 :                     ; 		or	#CMDIRQ_ON,r0
(1) 2213/ 6000F48 : 2101                		mov.w	r0,@r1
(1) 2214/ 6000F4A : D10C                		mov	#_sysreg+comm12,r1
(1) 2215/ 6000F4C : 6011                .wait_mst:	mov.w	@r1,r0
(1) 2216/ 6000F4E : 2008                		tst	r0,r0
(1) 2217/ 6000F50 : 8BFC                		bf	.wait_mst
(1) 2218/ 6000F52 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 2219/ 6000F54 : E001                		mov	#1,r0
(1) 2220/ 6000F56 : 2102                		mov	r0,@r1
(1) 2221/ 6000F58 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 2222/ 6000F5A : 400E                		ldc	r0,sr
(1) 2223/ 6000F5C : A016                		bra	slave_loop
(1) 2224/ 6000F5E : 0009                		nop
(1) 2225/ 6000F60 :                     		align 4
(1) 2226/ 6000F60 : C000 0800 0600      		ltorg
          6000F66 : 0128 2000 4020 
          6000F6C : 0600 4CE0 0600 
          6000F72 : 1E44 0600 1018 
          6000F78 : 2000 4000 2000 
          6000F7E : 402C FE10 FEE2 
          6000F84 : 0530 FEE4 4800 
          6000F8A : 0694             
(1) 2227/ 6000F8C :                     
(1) 2228/ 6000F8C :                     ; ----------------------------------------------------------------
(1) 2229/ 6000F8C :                     ; SLAVE CPU loop
(1) 2230/ 6000F8C :                     ;
(1) 2231/ 6000F8C :                     ; comm14: %Bp00cccc 00000ttt
(1) 2232/ 6000F8C :                     
(1) 2233/ 6000F8C :                     ; B | This CPU's busy bit (CMD lock)
(1) 2234/ 6000F8C :                     ; p | DATA pass bit
(1) 2235/ 6000F8C :                     ; c | CMD task number
(1) 2236/ 6000F8C :                     ;
(1) 2237/ 6000F8C :                     ; t | Task number
(1) 2238/ 6000F8C :                     ; ----------------------------------------------------------------
(1) 2239/ 6000F8C :                     
(1) 2240/ 6000F8C :                     		align 4
(1) 2241/ 6000F8C :                     slave_loop:
(1) 2243/ 6000F8C : D115                		mov	#_sysreg+comm1,r1		; DEBUG counter
(1) 2244/ 6000F8E : 6010                		mov.b	@r1,r0
(1) 2245/ 6000F90 : 7001                		add	#1,r0
(1) 2246/ 6000F92 : 2100                		mov.b	r0,@r1
(1) 2248/ 6000F94 : D114                		mov	#_sysreg+comm14,r1
(1) 2249/ 6000F96 : 6011                		mov.w	@r1,r0
(1) 2250/ 6000F98 : C907                		and	#%00000111,r0
(1) 2251/ 6000F9A : 4008                		shll2	r0
(1) 2252/ 6000F9C : 6103                		mov	r0,r1
(1) 2253/ 6000F9E : C702                		mova	slv_list,r0
(1) 2254/ 6000FA0 : 301C                		add	r1,r0
(1) 2255/ 6000FA2 : 6102                		mov	@r0,r1
(1) 2256/ 6000FA4 : 412B                		jmp	@r1
(1) 2257/ 6000FA6 : 0009                		nop
(1) 2258/ 6000FA8 :                     		align 4
(1) 2259/ 6000FA8 :                     
(1) 2260/ 6000FA8 :                     ; ====================================================================
(1) 2261/ 6000FA8 :                     
(1) 2262/ 6000FA8 :                     		align 4
(1) 2263/ 6000FA8 :                     slv_list:
(1) 2264/ 6000FA8 : 0600 0FC8           		dc.l SlvMode_00
(1) 2265/ 6000FAC : 0600 0FCC           		dc.l SlvMode_01
(1) 2266/ 6000FB0 : 0600 0FC8           		dc.l SlvMode_00
(1) 2267/ 6000FB4 : 0600 0FC8           		dc.l SlvMode_00
(1) 2268/ 6000FB8 : 0600 0FC8           		dc.l SlvMode_00
(1) 2269/ 6000FBC : 0600 0FC8           		dc.l SlvMode_00
(1) 2270/ 6000FC0 : 0600 0FC8           		dc.l SlvMode_00
(1) 2271/ 6000FC4 : 0600 0FC8           		dc.l SlvMode_00
(1) 2272/ 6000FC8 :                     
(1) 2273/ 6000FC8 :                     ; ====================================================================
(1) 2274/ 6000FC8 :                     ; ----------------------------------------------------------------
(1) 2275/ 6000FC8 :                     ; NOTHING
(1) 2276/ 6000FC8 :                     ; ----------------------------------------------------------------
(1) 2277/ 6000FC8 :                     
(1) 2278/ 6000FC8 :                     SlvMode_00:
(1) 2279/ 6000FC8 : AFE0                		bra	slave_loop
(1) 2280/ 6000FCA : 0009                		nop
(1) 2281/ 6000FCC :                     
(1) 2282/ 6000FCC :                     ; ====================================================================
(1) 2283/ 6000FCC :                     ; ----------------------------------------------------------------
(1) 2284/ 6000FCC :                     ; Slave task 01
(1) 2285/ 6000FCC :                     ; ----------------------------------------------------------------
(1) 2286/ 6000FCC :                     
(1) 2287/ 6000FCC :                     		align 4
(1) 2288/ 6000FCC :                     SlvMode_01:
(1) 2289/ 6000FCC : D107                		mov	#$C0000000|CachSlv_CurrPage,r1
(1) 2290/ 6000FCE : D008                		mov	#RAM_Mars_CurrPlgnPage,r0
(1) 2291/ 6000FD0 : 6002                		mov	@r0,r0
(1) 2292/ 6000FD2 : 2102                		mov	r0,@r1
(1) 2293/ 6000FD4 : D007                		mov	#$C0000000|MarsMdl_MdlLoop,r0	; Cache jump
(1) 2294/ 6000FD6 : 400B                		jsr	@r0
(1) 2295/ 6000FD8 : 0009                		nop
(1) 2296/ 6000FDA : D107                		mov	#_sysreg+comm14+1,r1
(1) 2297/ 6000FDC : E000                		mov	#0,r0
(1) 2298/ 6000FDE : AFD5                		bra	slave_loop
(1) 2299/ 6000FE0 : 2100                		mov.b	r0,@r1
(1) 2300/ 6000FE2 :                     		align 4
(1) 2301/ 6000FE4 : 2000 4021 2000      		ltorg
          6000FEA : 402E C000 0690 
          6000FF0 : 2600 7300 C000 
          6000FF6 : 0158 2000 402F    
(1) 2302/ 6000FFC :                     
(1) 2303/ 6000FFC :                     ; ====================================================================
(1) 2304/ 6000FFC :                     ; ----------------------------------------------------------------
(1) 2305/ 6000FFC :                     ; Shared routines
(1) 2306/ 6000FFC :                     ; ----------------------------------------------------------------
(1) 2307/ 6000FFC :                     
(1) 2308/ 6000FFC :                     ; --------------------------------------------------------
(1) 2309/ 6000FFC :                     ; Mars_CachePurge, Mars_CachePurge_S
(1) 2310/ 6000FFC :                     ;
(1) 2311/ 6000FFC :                     ; Purges the internal cache, call this often.
(1) 2312/ 6000FFC :                     ;
(1) 2313/ 6000FFC :                     ; Breaks:
(1) 2314/ 6000FFC :                     ; r0-r1
(1) 2315/ 6000FFC :                     ; --------------------------------------------------------
(1) 2316/ 6000FFC :                     
(1) 2317/ 6000FFC :                     		align 4
(1) 2318/ 6000FFC :                     Mars_CachePurge:
(1) 2319/ 6000FFC : 9128                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(1) 2320/ 6000FFE : E010                		mov	#%10000,r0
(1) 2321/ 6001000 : 2100                		mov.b	r0,@r1
(1) 2322/ 6001002 : 0009                		nop
(1) 2323/ 6001004 : 0009                		nop
(1) 2324/ 6001006 : 0009                		nop
(1) 2325/ 6001008 : 0009                		nop
(1) 2326/ 600100A : 0009                		nop
(1) 2327/ 600100C : 0009                		nop
(1) 2328/ 600100E : 0009                		nop
(1) 2329/ 6001010 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(1) 2330/ 6001012 : 000B                		rts
(1) 2331/ 6001014 : 2100                		mov.b	r0,@r1
(1) 2332/ 6001016 :                     
(1) 2333/ 6001016 :                     ; ----------------------------------------------------------------
(1) 2334/ 6001016 :                     ; Mars_CacheRamCode
(1) 2335/ 6001016 :                     ;
(1) 2336/ 6001016 :                     ; Loads "fast code" into the SH2's cache, maximum size is
(1) 2337/ 6001016 :                     ; $700 bytes aprox.
(1) 2338/ 6001016 :                     ;
(1) 2339/ 6001016 :                     ; Input:
(1) 2340/ 6001016 :                     ; r1 | Code to send
(1) 2341/ 6001016 :                     ; r2 | Size
(1) 2342/ 6001016 :                     ;
(1) 2343/ 6001016 :                     ; Breaks:
(1) 2344/ 6001016 :                     ; r0/r3
(1) 2345/ 6001016 :                     ; ----------------------------------------------------------------
(1) 2346/ 6001016 :                     
(1) 2347/ 6001016 :                     		align 4
(1) 2348/ 6001018 :                     Mars_CacheRamCode:
(1) 2349/ 6001018 : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 2350/ 600101A : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 2351/ 600101C : 600C                		extu.b	r0,r0
(1) 2352/ 600101E : 400E                		ldc	r0,sr
(1) 2353/ 6001020 : 9316                		mov	#_CCR,r3
(1) 2354/ 6001022 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 2355/ 6001024 : 2301                		mov.w	r0,@r3
(1) 2356/ 6001026 : 0009                		nop
(1) 2357/ 6001028 : 0009                		nop
(1) 2358/ 600102A : 0009                		nop
(1) 2359/ 600102C : 0009                		nop
(1) 2360/ 600102E : 0009                		nop
(1) 2361/ 6001030 : 0009                		nop
(1) 2362/ 6001032 : 0009                		nop
(1) 2363/ 6001034 : 0009                		nop
(1) 2364/ 6001036 : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 2365/ 6001038 : 2301                		mov.w	r0,@r3
(1) 2366/ 600103A : D304                		mov 	#$C0000000,r3
(1) 2367/ 600103C : 4209                		shlr2	r2
(1) 2368/ 600103E :                     .copy:
(1) 2369/ 600103E : 6016                		mov 	@r1+,r0
(1) 2370/ 6001040 : 2302                		mov 	r0,@r3
(1) 2371/ 6001042 : 4210                		dt	r2
(1) 2372/ 6001044 : 8FFB                		bf/s	.copy
(1) 2373/ 6001046 : 7304                		add 	#4,r3
(1) 2374/ 6001048 : 000B                		rts
(1) 2375/ 600104A : 4F07                		ldc	@r15+,sr
(1) 2376/ 600104C :                     		align 4
(1) 2377/ 600104C : C000 0000 FE92      		ltorg
(1) 2378/ 6001052 :                     
(1) 2379/ 6001052 :                     ; --------------------------------------------------------
(1) 2380/ 6001052 :                     ; Mars_SetWatchdog
(1) 2381/ 6001052 :                     ;
(1) 2382/ 6001052 :                     ; Prepares watchdog interrupt
(1) 2383/ 6001052 :                     ;
(1) 2384/ 6001052 :                     ; Input:
(1) 2385/ 6001052 :                     ; r1 | Watchdog CPU clock divider
(1) 2386/ 6001052 :                     ; r2 | Watchdog timer
(1) 2387/ 6001052 :                     ; --------------------------------------------------------
(1) 2388/ 6001052 :                     
(1) 2389/ 6001052 :                     		align 4
(1) 2390/ 6001054 :                     Mars_SetWatchdog:
(1) 2391/ 6001054 : 0402                		stc	sr,r4
(1) 2392/ 6001056 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2393/ 6001058 : 600C                		extu.b	r0,r0
(1) 2394/ 600105A : 400E                		ldc 	r0,sr
(1) 2395/ 600105C : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2396/ 600105E : 930D                		mov.l	#_CCR,r3		; Refresh Cache
(1) 2397/ 6001060 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 2398/ 6001062 : 2301                		mov.w	r0,@r3
(1) 2399/ 6001064 : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 2400/ 6001066 : 2301                		mov.w	r0,@r3
(1) 2401/ 6001068 : 9309                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 2402/ 600106A : 9009                		mov.w	#$5A00,r0		; Watchdog timer
(1) 2403/ 600106C : 202B                		or	r2,r0
(1) 2404/ 600106E : 2301                		mov.w	r0,@r3
(1) 2405/ 6001070 : 9007                		mov.w	#$A538,r0		; Enable Watchdog
(1) 2406/ 6001072 : 201B                		or	r1,r0
(1) 2407/ 6001074 : 2301                		mov.w	r0,@r3
(1) 2408/ 6001076 : 440E                		ldc	r4,sr
(1) 2409/ 6001078 : 000B                		rts
(1) 2410/ 600107A : 0009                		nop
(1) 2411/ 600107C :                     		align 4
(1) 2412/ 600107C : FE92 FE80 5A00      		ltorg
          6001082 : A538             
(1) 2413/ 6001084 :                     
(1) 2414/ 6001084 :                     ; ====================================================================
(1) 2415/ 6001084 :                     ; ----------------------------------------------------------------
(1) 2416/ 6001084 :                     ; Includes
(1) 2417/ 6001084 :                     ; ----------------------------------------------------------------
(1) 2418/ 6001084 :                     
(1) 2419/ 6001084 :                     		align 4
(1) 2420/ 6001084 :                     		include "system/mars/sound.asm"
(2)    1/ 6001084 :                     ; ===========================================================================
(2)    2/ 6001084 :                     ; -------------------------------------------------------------------
(2)    3/ 6001084 :                     ; 32X Sound, Slave CPU side
(2)    4/ 6001084 :                     ; -------------------------------------------------------------------
(2)    5/ 6001084 :                     
(2)    6/ 6001084 :                     ; --------------------------------------------------------
(2)    7/ 6001084 :                     ; Settings
(2)    8/ 6001084 :                     ; --------------------------------------------------------
(2)    9/ 6001084 :                     
(2)   10/ 6001084 : =$8                  MAX_PWMCHNL	equ 8		; Maximum channels to use
(2)   11/ 6001084 : =$3E80               SAMPLE_RATE	equ 16000
(2)   12/ 6001084 :                     
(2)   13/ 6001084 :                     ; --------------------------------------------------------
(2)   14/ 6001084 :                     ; Structs
(2)   15/ 6001084 :                     ; --------------------------------------------------------
(2)   16/ 6001084 :                     
(2)   17/ 6001084 :                     ; 32X sound channel
(2)   18/       0 :                     marspwm		struct
(2)   19/       0 :                     enbl		ds.l 1		; %EB00 SLlr | StereoEnable,Loop,left,right
(2)   20/       4 :                     read		ds.l 1		; READ point
(2)   21/       8 :                     bank		ds.l 1		; CS1 or CS3
(2)   22/       C :                     start		ds.l 1		; Start point $00xxxxxx << 8
(2)   23/      10 :                     length		ds.l 1		; Lenght << 8
(2)   24/      14 :                     loop		ds.l 1		; Loop point << 8
(2)   25/      18 :                     pitch		ds.l 1		; Pitch $xx.xx
(2)   26/      1C :                     vol		ds.l 1		; Volume ($0000-Max)
(2)   27/      20 :                     cbank		ds.l 1
(2)   28/      24 :                     cread		ds.l 1
(2)   29/      28 :                     ; len		ds.l 0
(2)   30/ 6001084 : =$28                 		endstruct
(2)   31/ 6001084 :                     
(2)   32/ 6001084 :                     ; ====================================================================
(2)   33/ 6001084 :                     ; --------------------------------------------------------
(2)   34/ 6001084 :                     ; Init Sound PWM
(2)   35/ 6001084 :                     ;
(2)   36/ 6001084 :                     ; Cycle register formulas:
(2)   37/ 6001084 :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   38/ 6001084 :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   39/ 6001084 :                     ;
(2)   40/ 6001084 :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   41/ 6001084 :                     ; --------------------------------------------------------
(2)   42/ 6001084 :                     
(2)   43/ 6001084 :                     		align 4
(2)   44/ 6001084 :                     MarsSound_Init:
(2)   45/ 6001084 : 4F13                		stc	gbr,@-r15
(2)   46/ 6001086 : D00B                		mov	#_sysreg,r0
(2)   47/ 6001088 : 401E                		ldc	r0,gbr
(2)   48/ 600108A : 9019                		mov	#$0105,r0					; Timing interval $01, Output L/R
(2)   49/ 600108C : C118                		mov.w	r0,@(timerctl,gbr)
(2)   50/ 600108E : 9018                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Sample rate
(2)   51/ 6001090 : C119                		mov.w	r0,@(cycle,gbr)
(2)   52/ 6001092 : E001                		mov	#1,r0
(2)   53/ 6001094 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 6001096 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   55/ 6001098 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   56/ 600109A : D407                		mov	#RAM_Mars_PwmList,r4
(2)   57/ 600109C : E328                		mov	#marspwm_len,r3
(2)   58/ 600109E : E208                		mov	#MAX_PWMCHNL,r2
(2)   59/ 60010A0 : 9110                		mov	#$200,r1
(2)   60/ 60010A2 : D006                		mov	#RAM_Mars_PwmBackup,r0
(2)   61/ 60010A4 :                     .next_one:
(2)   62/ 60010A4 : 1408                		mov	r0,@(marspwm_cbank,r4)
(2)   63/ 60010A6 : 343C                		add	r3,r4
(2)   64/ 60010A8 : 4210                		dt	r2
(2)   65/ 60010AA : 8FFB                		bf/s	.next_one
(2)   66/ 60010AC : 301C                		add	r1,r0
(2)   67/ 60010AE :                     
(2)   68/ 60010AE : 4F17                		ldc	@r15+,gbr
(2)   69/ 60010B0 : 000B                		rts
(2)   70/ 60010B2 : 0009                		nop
(2)   71/ 60010B4 :                     		align 4
(2)   72/ 60010B4 :                     
(2)   73/ 60010B4 :                     ; ====================================================================
(2)   74/ 60010B4 :                     
(2)   75/ 60010B4 :                     ; PWM playback code is located at cache_slv.asm
(2)   76/ 60010B4 :                     
(2)   77/ 60010B4 :                     ; ====================================================================
(2)   78/ 60010B4 :                     
(2)   79/ 60010B4 : 2000 4000 2600      		ltorg			; Save literals
          60010BA : 61C0 2600 6300 
          60010C0 : 0105 059F 0200    
(2)   80/ 60010C6 :                     
(1) 2421/ 60010C6 :                     		include "system/mars/video.asm"
(2)    1/ 60010C6 :                     ; ===========================================================================
(2)    2/ 60010C6 :                     ; ----------------------------------------------------------------
(2)    3/ 60010C6 :                     ; 32X Video, Master CPU side.
(2)    4/ 60010C6 :                     ; ----------------------------------------------------------------
(2)    5/ 60010C6 :                     
(2)    6/ 60010C6 :                     ; ====================================================================
(2)    7/ 60010C6 :                     ; --------------------------------------------------------
(2)    8/ 60010C6 :                     ; Settings
(2)    9/ 60010C6 :                     ; --------------------------------------------------------
(2)   10/ 60010C6 :                     
(2)   11/ 60010C6 : =$18000              MAX_MarsVram		equ $18000	; !! Maximum 32X graphics data stored on SDRAM for both 2D/3D
(2)   12/ 60010C6 :                     
(2)   13/ 60010C6 :                     ; ------------------------------------------------
(2)   14/ 60010C6 :                     ; 2D scrolling mode
(2)   15/ 60010C6 : =$10                 SET_MSCRLSIZE		equ 16		; !! Hard-coded, requires code modifications
(2)   16/ 60010C6 : =$150                SET_MSCRLWDTH		equ 320+16	; !! Affects 2D Scrolling, Super-Sprites and 3D Polygons
(2)   17/ 60010C6 : =$F0                 SET_MSCRLHGHT		equ 240		; !! ''
(2)   18/ 60010C6 : =$200                SET_TILEMAX		equ $0200	; Maximum block tiles to use (1-bit SIZES ONLY)
(2)   19/ 60010C6 : =$1E000              SET_FBVRAM_PATCH	equ $1E000	; Framebuffer location to store the affected XShift lines
(2)   20/ 60010C6 :                     ; SET_FBVRAM_BLANK	equ $1FD80	; Framebuffer location for the BLANK line
(2)   21/ 60010C6 :                     
(2)   22/ 60010C6 :                     ; ------------------------------------------------
(2)   23/ 60010C6 :                     ; 3D polygons mode
(2)   24/ 60010C6 :                     ; MAX_MOBJ		equ 64		; see system/shared.asm
(2)   25/ 60010C6 : =$140                SET_3DFIELD_WDTH	equ 320
(2)   26/ 60010C6 : =$E0                 SET_3DFIELD_HGHT	equ 224
(2)   27/ 60010C6 : =$100                MAX_FACES		equ 256		; Maximum 3D polygon faces to read
(2)   28/ 60010C6 : =$FFFFFFFFFFFFFD80   MAX_ZDIST		equ -$280	; Maximum 3D field distance (-value)
(2)   29/ 60010C6 :                     
(2)   30/ 60010C6 :                     ; --------------------------------------------------------
(2)   31/ 60010C6 :                     ; Variables
(2)   32/ 60010C6 :                     ; --------------------------------------------------------
(2)   33/ 60010C6 :                     
(2)   34/ 60010C6 : =$80                 PLGN_TEXURE		equ %10000000	; plypz_type (MSB)
(2)   35/ 60010C6 : =$40                 PLGN_TRI		equ %01000000
(2)   36/ 60010C6 :                     ; ** MORE variables system/shared.asm
(2)   37/ 60010C6 :                     
(2)   38/ 60010C6 :                     ; --------------------------------------------------------
(2)   39/ 60010C6 :                     ; Structs
(2)   40/ 60010C6 :                     ; --------------------------------------------------------
(2)   41/ 60010C6 :                     
(2)   42/ 60010C6 :                     ; FIXED SIZE: $40
(2)   43/       0 :                     plypz		struct
(2)   44/       0 :                     type		ds.l 1		; Type + Material settings (width + index add)
(2)   45/       4 :                     mtrl		ds.l 1		; Material data (ROM or SDRAM)
(2)   46/       8 :                     ytb		ds.l 1		; $YYYYyyyy: Y-Top Y / y-Bottom Y
(2)   47/       C :                     xl		ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   48/      10 :                     src_xl		ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   49/      14 :                     src_yl		ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   50/      18 :                     xl_dx		ds.l 1		; 0000.0000
(2)   51/      1C :                     xr_dx		ds.l 1		; 0000.0000
(2)   52/      20 :                     src_xl_dx	ds.l 1
(2)   53/      24 :                     src_xr_dx	ds.l 1
(2)   54/      28 :                     src_yl_dx	ds.l 1
(2)   55/      2C :                     src_yr_dx	ds.l 1
(2)   56/ 60010C6 : =$30                 		endstruct
(2)   57/ 60010C6 :                     
(2)   58/ 60010C6 :                     ; ** MORE strcts on system/shared.asm
(2)   59/ 60010C6 :                     
(2)   60/ 60010C6 :                     ; ------------------------------------------------
(2)   61/ 60010C6 :                     ; Polygon
(2)   62/       0 :                     plygn		struct
(2)   63/       0 :                     type		ds.l 1		; %MTww wwww aaaa aaaa | m-Solid/Tex t-Triangle
(2)   64/       4 :                     mtrl		ds.l 1		; Material data: Color or VRAM position (RAM_Mars_VramData)
(2)   65/       8 :                     points		ds.l 4*2	; X/Y positions
(2)   66/      28 :                     srcpnts		ds.w 4*2	; X/Y texture points 16-bit, UNUSED on solid color
(2)   67/      38 :                     ; len		ds.l 0
(2)   68/ 60010C6 : =$38                 		endstruct
(2)   69/ 60010C6 :                     
(2)   70/ 60010C6 :                     ; ====================================================================
(2)   71/ 60010C6 :                     ; --------------------------------------------------------
(2)   72/ 60010C6 :                     ; Init MARS Video
(2)   73/ 60010C6 :                     ;
(2)   74/ 60010C6 :                     ; Breaks:
(2)   75/ 60010C6 :                     ; r1-r4
(2)   76/ 60010C6 :                     ; --------------------------------------------------------
(2)   77/ 60010C6 :                     
(2)   78/ 60010C6 :                     		align 4
(2)   79/ 60010C8 :                     MarsVideo_Init:
(2)   80/ 60010C8 : 9144                		mov	#SET_MSCRLWDTH+SET_MSCRLSIZE,r1	; Set scroll-area settings
(2)   81/ 60010CA : 9244                		mov	#SET_MSCRLHGHT+SET_MSCRLSIZE,r2
(2)   82/ 60010CC : 221E                		mulu	r1,r2
(2)   83/ 60010CE : 6013                		mov	r1,r0
(2)   84/ 60010D0 : C211                		mov	r0,@(marsGbl_Scrl_Wdth,gbr)
(2)   85/ 60010D2 : 6023                		mov	r2,r0
(2)   86/ 60010D4 : C212                		mov	r0,@(marsGbl_Scrl_Hght,gbr)
(2)   87/ 60010D6 : 001A                		sts	macl,r0
(2)   88/ 60010D8 : C210                		mov	r0,@(marsGbl_Scrl_Size,gbr)
(2)   89/ 60010DA : 903D                		mov	#$200,r0
(2)   90/ 60010DC : C214                		mov	r0,@(marsGbl_Scrl_FbOut,gbr)
(2)   91/ 60010DE : E000                		mov	#0,r0
(2)   92/ 60010E0 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(2)   93/ 60010E2 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(2)   94/ 60010E4 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(2)   95/ 60010E6 : 9038                		mov	#SET_3DFIELD_WDTH,r0
(2)   96/ 60010E8 : C206                		mov	r0,@(marsGbl_3D_OutWidth,gbr)
(2)   97/ 60010EA : 9037                		mov	#SET_3DFIELD_HGHT,r0
(2)   98/ 60010EC : C207                		mov	r0,@(marsGbl_3D_OutHeight,gbr)
(2)   99/ 60010EE : 000B                		rts
(2)  100/ 60010F0 : 0009                		nop
(2)  101/ 60010F2 :                     		align 4
(2)  102/ 60010F4 :                     
(2)  103/ 60010F4 :                     ; ====================================================================
(2)  104/ 60010F4 :                     ; ----------------------------------------------------------------
(2)  105/ 60010F4 :                     ; Subroutines
(2)  106/ 60010F4 :                     ; ----------------------------------------------------------------
(2)  107/ 60010F4 :                     
(2)  108/ 60010F4 :                     ; --------------------------------------------------------
(2)  109/ 60010F4 :                     ; MarsVideo_FixTblShift
(2)  110/ 60010F4 :                     ;
(2)  111/ 60010F4 :                     ; Fix the affected $xxFF lines (solve that HW errata),
(2)  112/ 60010F4 :                     ; Call this BEFORE flipping the Framebuffer.
(2)  113/ 60010F4 :                     ;
(2)  114/ 60010F4 :                     ; Input:
(2)  115/ 60010F4 :                     ; r1 | Start line
(2)  116/ 60010F4 :                     ; r2 | Number of lines
(2)  117/ 60010F4 :                     ; r3 | Location for the fixed lines
(2)  118/ 60010F4 :                     ;
(2)  119/ 60010F4 :                     ; Breaks:
(2)  120/ 60010F4 :                     ; r7-r14
(2)  121/ 60010F4 :                     ; --------------------------------------------------------
(2)  122/ 60010F4 :                     
(2)  123/ 60010F4 :                     		align 4
(2)  124/ 60010F4 :                     MarsVideo_FixTblShift:
(2)  125/ 60010F4 : DE15                		mov	#_vdpreg,r14
(2)  126/ 60010F6 : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  127/ 60010F8 : C903                		and	#%11,r0
(2)  128/ 60010FA : 8801                		cmp/eq	#1,r0
(2)  129/ 60010FC : 8B23                		bf	.ptchset
(2)  130/ 60010FE : C501                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set? (EXTERNAL value)
(2)  131/ 6001100 : C901                		and	#1,r0
(2)  132/ 6001102 : 2008                		tst	r0,r0
(2)  133/ 6001104 : 891F                		bt	.ptchset
(2)  134/ 6001106 :                     
(2)  135/ 6001106 : DE12                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  136/ 6001108 : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  137/ 600110A : 3C3C                		add	r3,r12
(2)  138/ 600110C : 6013                		mov	r1,r0
(2)  139/ 600110E : 4008                		shll2	r0
(2)  140/ 6001110 : 3E0C                		add	r0,r14
(2)  141/ 6001112 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  142/ 6001114 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  143/ 6001116 : E0FF                		mov	#-1,r0
(2)  144/ 6001118 : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  145/ 600111A : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  146/ 600111C :                     .loop:
(2)  147/ 600111C : 60D1                		mov.w	@r13,r0
(2)  148/ 600111E : 2099                		and	r9,r0
(2)  149/ 6001120 : 6703                		mov	r0,r7
(2)  150/ 6001122 : 20A9                		and	r10,r0
(2)  151/ 6001124 : 30A0                		cmp/eq	r10,r0
(2)  152/ 6001126 : 8B0B                		bf	.tblexit
(2)  153/ 6001128 : 4700                		shll	r7
(2)  154/ 600112A : 37EC                		add	r14,r7
(2)  155/ 600112C : 60C3                		mov	r12,r0
(2)  156/ 600112E : 4001                		shlr	r0
(2)  157/ 6001130 : 2D01                		mov.w	r0,@r13
(2)  158/ 6001132 : 9314                		mov	#(320+4)/2,r3
(2)  159/ 6001134 :                     .copy:
(2)  160/ 6001134 : 6071                		mov.w	@r7,r0
(2)  161/ 6001136 : 2C01                		mov.w	r0,@r12
(2)  162/ 6001138 : 7702                		add	#2,r7
(2)  163/ 600113A : 4310                		dt	r3
(2)  164/ 600113C : 8FFA                		bf/s	.copy
(2)  165/ 600113E : 7C02                		add	#2,r12
(2)  166/ 6001140 :                     .tblexit:
(2)  167/ 6001140 : 4B10                		dt	r11
(2)  168/ 6001142 : 8FEB                		bf/s	.loop
(2)  169/ 6001144 : 7D02                		add	#2,r13
(2)  170/ 6001146 :                     .ptchset:
(2)  171/ 6001146 : 000B                		rts
(2)  172/ 6001148 : 0009                		nop
(2)  173/ 600114A :                     		align 4
(2)  174/ 600114C : 2000 4100 2400      		ltorg
          6001152 : 0000 0160 0100 
          6001158 : 0200 0140 00E0 
          600115E : 00A2             
(2)  175/ 6001160 :                     
(2)  176/ 6001160 :                     ; ====================================================================
(2)  177/ 6001160 :                     ; ----------------------------------------------------------------
(2)  178/ 6001160 :                     ; 2D scrolling-area section
(2)  179/ 6001160 :                     ; ----------------------------------------------------------------
(2)  180/ 6001160 :                     
(2)  181/ 6001160 :                     ; --------------------------------------------------------
(2)  182/ 6001160 :                     ; MarsVideo_ShowScrlBg
(2)  183/ 6001160 :                     ;
(2)  184/ 6001160 :                     ; Make a visible section of any scrolling area
(2)  185/ 6001160 :                     ; into the current framebuffer.
(2)  186/ 6001160 :                     ;
(2)  187/ 6001160 :                     ; Input:
(2)  188/ 6001160 :                     ; r1 | Top Y
(2)  189/ 6001160 :                     ; r2 | Bottom Y
(2)  190/ 6001160 :                     ;
(2)  191/ 6001160 :                     ; Breaks:
(2)  192/ 6001160 :                     ; r4-r14
(2)  193/ 6001160 :                     ;
(2)  194/ 6001160 :                     ; NOTE:
(2)  195/ 6001160 :                     ; After endstrcting all your screens call
(2)  196/ 6001160 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  197/ 6001160 :                     ; --------------------------------------------------------
(2)  198/ 6001160 :                     
(2)  199/ 6001160 :                     		align 4
(2)  200/ 6001160 :                     MarsVideo_ShowScrlBg:
(2)  201/ 6001160 : DE1C                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  202/ 6001162 : EB00                		mov	#0,r11				; r11 - line counter
(2)  203/ 6001164 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0	; r13 - Framebuffer pixeldata position
(2)  204/ 6001166 : 6D03                		mov	r0,r13
(2)  205/ 6001168 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0	; r12 - Full size of screen-scroll
(2)  206/ 600116A : 6C03                		mov	r0,r12
(2)  207/ 600116C : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  208/ 600116E : 6A03                		mov	r0,r10
(2)  209/ 6001170 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  210/ 6001172 : 6903                		mov	r0,r9
(2)  211/ 6001174 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  212/ 6001176 : 6803                		mov	r0,r8
(2)  213/ 6001178 : 3120                		cmp/eq	r2,r1
(2)  214/ 600117A : 8916                		bt	.bad_y
(2)  215/ 600117C : 3123                		cmp/ge	r2,r1
(2)  216/ 600117E : 8914                		bt	.bad_y
(2)  217/ 6001180 : 6613                		mov	r1,r6
(2)  218/ 6001182 : 6013                		mov	r1,r0
(2)  219/ 6001184 : 4000                		shll	r0
(2)  220/ 6001186 : 3E0C                		add	r0,r14
(2)  221/ 6001188 : 28AE                		mulu	r10,r8
(2)  222/ 600118A : 001A                		sts	macl,r0
(2)  223/ 600118C : 390C                		add	r0,r9
(2)  224/ 600118E :                     .ln_loop:
(2)  225/ 600118E : 6893                		mov	r9,r8
(2)  226/ 6001190 : 38C3                		cmp/ge	r12,r8
(2)  227/ 6001192 : 8B00                		bf	.xl_r
(2)  228/ 6001194 : 38C8                		sub	r12,r8
(2)  229/ 6001196 :                     .xl_r:
(2)  230/ 6001196 : 6983                		mov	r8,r9
(2)  231/ 6001198 : 39AC                		add	r10,r9			; Add Y
(2)  232/ 600119A : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  233/ 600119C : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  234/ 600119E : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  235/ 60011A0 : 7E02                		add	#2,r14
(2)  236/ 60011A2 : 7601                		add	#1,r6
(2)  237/ 60011A4 : 3620                		cmp/eq	r2,r6
(2)  238/ 60011A6 : 8FF2                		bf/s	.ln_loop
(2)  239/ 60011A8 : 7B02                		add	#2,r11
(2)  240/ 60011AA :                     .bad_y:
(2)  241/ 60011AA : 000B                		rts
(2)  242/ 60011AC : 0009                		nop
(2)  243/ 60011AE :                     		align 4
(2)  244/ 60011B0 :                     
(2)  245/ 60011B0 :                     ; --------------------------------------------------------
(2)  246/ 60011B0 :                     ; Call this AFTER after drawing to the scrolling area.
(2)  247/ 60011B0 :                     ; --------------------------------------------------------
(2)  248/ 60011B0 :                     
(2)  249/ 60011B0 :                     		align 4
(2)  250/ 60011B0 :                     marsScrl_CopyTopBot:
(2)  251/ 60011B0 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  252/ 60011B2 : 6103                		mov	r0,r1
(2)  253/ 60011B4 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  254/ 60011B6 : 6303                		mov	r0,r3
(2)  255/ 60011B8 : D006                		mov	#_framebuffer,r0
(2)  256/ 60011BA : 310C                		add	r0,r1
(2)  257/ 60011BC : 6213                		mov	r1,r2
(2)  258/ 60011BE : 323C                		add	r3,r2
(2)  259/ 60011C0 : E350                		mov	#320/4,r3
(2)  260/ 60011C2 : 0009                		nop
(2)  261/ 60011C4 :                     .copy_top:
(2)  262/ 60011C4 : 6016                		mov	@r1+,r0
(2)  263/ 60011C6 : 0009                		nop
(2)  264/ 60011C8 : 2202                		mov	r0,@r2
(2)  265/ 60011CA : 7204                		add	#4,r2
(2)  266/ 60011CC : 4310                		dt	r3
(2)  267/ 60011CE : 8BF9                		bf	.copy_top
(2)  268/ 60011D0 : 000B                		rts
(2)  269/ 60011D2 : 0009                		nop
(2)  270/ 60011D4 :                     		align 4
(2)  271/ 60011D4 : 2400 0000           		ltorg
(2)  272/ 60011D8 :                     
(2)  273/ 60011D8 :                     ; ====================================================================
(2)  274/ 60011D8 :                     ; ----------------------------------------------------------------
(2)  275/ 60011D8 :                     ; Super sprites
(2)  276/ 60011D8 :                     ; ----------------------------------------------------------------
(2)  277/ 60011D8 :                     
(2)  278/ 60011D8 :                     ; --------------------------------------------------------
(2)  279/ 60011D8 :                     ; MarsVideo_SuperSpr_Make
(2)  280/ 60011D8 :                     ; --------------------------------------------------------
(2)  281/ 60011D8 :                     
(2)  282/ 60011D8 :                     		align 4
(2)  283/ 60011D8 :                     MarsVideo_SuperSpr_Make:
(2)  284/ 60011D8 : 4F22                		sts	pr,@-r15
(2)  285/ 60011DA : DE2C                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r14
(2)  286/ 60011DC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  287/ 60011DE : 6D03                		mov	r0,r13
(2)  288/ 60011E0 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  289/ 60011E2 : 6C03                		mov	r0,r12
(2)  290/ 60011E4 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  291/ 60011E6 : 6B03                		mov	r0,r11
(2)  292/ 60011E8 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  293/ 60011EA : 6A03                		mov	r0,r10
(2)  294/ 60011EC : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  295/ 60011EE : 6903                		mov	r0,r9
(2)  296/ 60011F0 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  297/ 60011F2 : 6203                		mov	r0,r2
(2)  298/ 60011F4 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  299/ 60011F6 : 984D                		mov	#Dreq_Buff2,r8				; ** DREQ READ **
(2)  300/ 60011F8 : 380C                		add	r0,r8
(2)  301/ 60011FA : 904C                		mov	#sspr_len*(MAX_MARSSPR-1),r0	; <-- LAZY REVERSE ORDER
(2)  302/ 60011FC : 380C                		add	r0,r8					; <--
(2)  303/ 60011FE :                     	; ----------------------------------------
(2)  304/ 60011FE :                     	; r14 - Sprite draw list
(2)  305/ 60011FE :                     	; r13 - Scroll size W*H
(2)  306/ 60011FE :                     	; r12 - Scroll height
(2)  307/ 60011FE :                     	; r11 - Scroll width
(2)  308/ 60011FE :                     	; r10 - Scroll TL-pos read *
(2)  309/ 60011FE :                     	;  r9 - Scroll Y-pos read *
(2)  310/ 60011FE :                     	;  r8 - Current SuperSprite
(2)  311/ 60011FE : E720                		mov	#MAX_MARSSPR,r7
(2)  312/ 6001200 :                     .next_sspr:
(2)  313/ 6001200 : 8480                		mov.b	@(sspr_flags,r8),r0
(2)  314/ 6001202 : C880                		tst	#$80,r0
(2)  315/ 6001204 : 893A                		bt	.off_sspr
(2)  316/ 6001206 : 660C                		extu.b	r0,r6
(2)  317/ 6001208 : 5083                		mov	@(sspr_vram,r8),r0
(2)  318/ 600120A : 400A                		lds	r0,mach
(2)  319/ 600120C : 8583                		mov.w	@(sspr_indx,r8),r0
(2)  320/ 600120E : 600C                		extu.b	r0,r0
(2)  321/ 6001210 : 4628                		shll16	r6
(2)  322/ 6001212 : 260B                		or	r0,r6			; r6 - $000f00ii: f-Flags i-Index
(2)  323/ 6001214 : 8582                		mov.w	@(sspr_size,r8),r0
(2)  324/ 6001216 : 650C                		extu.b	r0,r5			; Y size
(2)  325/ 6001218 : 4019                		shlr8	r0
(2)  326/ 600121A : 640C                		extu.b	r0,r4			; X size
(2)  327/ 600121C : 8584                		mov.w	@(sspr_x_pos,r8),r0
(2)  328/ 600121E : 620F                		exts.w	r0,r2
(2)  329/ 6001220 : 8585                		mov.w	@(sspr_y_pos,r8),r0
(2)  330/ 6001222 : 630F                		exts.w	r0,r3
(2)  331/ 6001224 : 7401                		add	#1,r4
(2)  332/ 6001226 : 7501                		add	#1,r5
(2)  333/ 6001228 : 4408                		shll2	r4			; Expand sizes to 8pixels(cells)
(2)  334/ 600122A : 4508                		shll2	r5
(2)  335/ 600122C : 4400                		shll	r4
(2)  336/ 600122E : 4500                		shll	r5
(2)  337/ 6001230 : 6023                		mov	r2,r0			; Offscreen checks
(2)  338/ 6001232 : 304C                		add	r4,r0
(2)  339/ 6001234 : 4015                		cmp/pl	r0
(2)  340/ 6001236 : 8B21                		bf	.off_sspr
(2)  341/ 6001238 : 6033                		mov	r3,r0
(2)  342/ 600123A : 305C                		add	r5,r0
(2)  343/ 600123C : 4015                		cmp/pl	r0
(2)  344/ 600123E : 8B1D                		bf	.off_sspr
(2)  345/ 6001240 : E054                		mov	#SET_MSCRLWDTH>>2,r0
(2)  346/ 6001242 : 4008                		shll2	r0
(2)  347/ 6001244 : 3203                		cmp/ge	r0,r2
(2)  348/ 6001246 : 8919                		bt	.off_sspr
(2)  349/ 6001248 : E03C                		mov	#SET_MSCRLHGHT>>2,r0
(2)  350/ 600124A : 4008                		shll2	r0
(2)  351/ 600124C : 3303                		cmp/ge	r0,r3
(2)  352/ 600124E : 8915                		bt	.off_sspr
(2)  353/ 6001250 : 8581                		mov.w	@(sspr_frame,r8),r0
(2)  354/ 6001252 : 254F                		muls	r4,r5
(2)  355/ 6001254 : 011A                		sts	macl,r1
(2)  356/ 6001256 : 210F                		muls	r0,r1
(2)  357/ 6001258 : 001A                		sts	macl,r0
(2)  358/ 600125A : 010A                		sts	mach,r1
(2)  359/ 600125C : 310C                		add	r0,r1
(2)  360/ 600125E : E002                		mov	#CS1>>24,r0
(2)  361/ 6001260 : 4028                		shll16	r0
(2)  362/ 6001262 : 4018                		shll8	r0
(2)  363/ 6001264 : 3103                		cmp/ge	r0,r1
(2)  364/ 6001266 : 8901                		bt	.from_rom
(2)  365/ 6001268 : D009                		mov	#RAM_Mars_VramData,r0
(2)  366/ 600126A : 310C                		add	r0,r1
(2)  367/ 600126C :                     .from_rom:
(2)  368/ 600126C :                     	; r1 | Graphics data *
(2)  369/ 600126C :                     	; r2 | Xpos *
(2)  370/ 600126C :                     	; r3 | Ypos *
(2)  371/ 600126C :                     	; r4 | Xsize *
(2)  372/ 600126C :                     	; r5 | Ysize *
(2)  373/ 600126C :                     	; r6 | Flags + Pixel increment *
(2)  374/ 600126C : 7E10                		add	#$10,r14
(2)  375/ 600126E : 60E3                		mov	r14,r0
(2)  376/ 6001270 : 2066                		mov	r6,@-r0
(2)  377/ 6001272 : 2055                		mov.w	r5,@-r0
(2)  378/ 6001274 : 2045                		mov.w	r4,@-r0
(2)  379/ 6001276 : 2035                		mov.w	r3,@-r0
(2)  380/ 6001278 : 2025                		mov.w	r2,@-r0
(2)  381/ 600127A : 2016                		mov	r1,@-r0
(2)  382/ 600127C :                     .off_sspr:
(2)  383/ 600127C : E010                		mov	#sspr_len,r0
(2)  384/ 600127E : 4710                		dt	r7
(2)  385/ 6001280 : 8FBE                		bf/s	.next_sspr
(2)  386/ 6001282 : 3808                		sub	r0,r8			; <-- LAZY REVERSE ORDER
(2)  387/ 6001284 :                     .exit_sspr:
(2)  388/ 6001284 : 4F26                		lds	@r15+,pr
(2)  389/ 6001286 : 000B                		rts
(2)  390/ 6001288 : 0009                		nop
(2)  391/ 600128A :                     		align 4
(2)  392/ 600128C : C000 0000 0600      		ltorg
          6001292 : FB10 0620 01F0    
(2)  393/ 6001298 :                     
(2)  394/ 6001298 :                     ; --------------------------------------------------------
(2)  395/ 6001298 :                     ; MarsVideo_SuperSpr_Draw
(2)  396/ 6001298 :                     ; --------------------------------------------------------
(2)  397/ 6001298 :                     
(2)  398/ 6001298 :                     		align 4
(2)  399/ 6001298 :                     MarsVideo_SuperSpr_Draw:
(2)  400/ 6001298 : 4F22                		sts	pr,@-r15
(2)  401/ 600129A : DE65                		mov	#_overwrite,r14			; <--
(2)  402/ 600129C : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  403/ 600129E : 6D03                		mov	r0,r13
(2)  404/ 60012A0 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  405/ 60012A2 : 6C03                		mov	r0,r12
(2)  406/ 60012A4 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  407/ 60012A6 : 6B03                		mov	r0,r11
(2)  408/ 60012A8 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  409/ 60012AA : 6A03                		mov	r0,r10
(2)  410/ 60012AC : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  411/ 60012AE : 6903                		mov	r0,r9
(2)  412/ 60012B0 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  413/ 60012B2 : 6803                		mov	r0,r8
(2)  414/ 60012B4 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  415/ 60012B6 : 3E8C                		add	r8,r14
(2)  416/ 60012B8 : D85E                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r8
(2)  417/ 60012BA : E720                		mov	#MAX_MARSSPR,r7
(2)  418/ 60012BC :                     .next_piece:
(2)  419/ 60012BC : E000                		mov	#0,r0
(2)  420/ 60012BE : 6182                		mov	@r8,r1
(2)  421/ 60012C0 : 2802                		mov	r0,@r8
(2)  422/ 60012C2 : 2118                		tst	r1,r1
(2)  423/ 60012C4 : 8907                		bt	.no_slot
(2)  424/ 60012C6 : 6083                		mov	r8,r0
(2)  425/ 60012C8 : 7004                		add	#4,r0
(2)  426/ 60012CA : 6205                		mov.w	@r0+,r2
(2)  427/ 60012CC : 6305                		mov.w	@r0+,r3
(2)  428/ 60012CE : 6405                		mov.w	@r0+,r4
(2)  429/ 60012D0 : 6505                		mov.w	@r0+,r5
(2)  430/ 60012D2 : B007                		bsr	scrlDrw_SSprDraw
(2)  431/ 60012D4 : 6606                		mov	@r0+,r6
(2)  432/ 60012D6 :                     .no_slot:
(2)  433/ 60012D6 : 4710                		dt	r7
(2)  434/ 60012D8 : 8FF0                		bf/s	.next_piece
(2)  435/ 60012DA : 7810                		add	#$10,r8
(2)  436/ 60012DC : 4F26                		lds	@r15+,pr
(2)  437/ 60012DE : 000B                		rts
(2)  438/ 60012E0 : 0009                		nop
(2)  439/ 60012E2 :                     		align 4
(2)  440/ 60012E4 :                     
(2)  441/ 60012E4 :                     ; 		mov	#_DMASOURCE1,r12
(2)  442/ 60012E4 :                     ; 		mov	#%0101001011100000,r0
(2)  443/ 60012E4 :                     ; 		mov	r0,@($0C,r12)
(2)  444/ 60012E4 :                     ; 		mov	#_overwrite+$200,r0
(2)  445/ 60012E4 :                     ; 		mov	r0,@($04,r12)
(2)  446/ 60012E4 :                     ; 		mov	#CS3,r0
(2)  447/ 60012E4 :                     ; 		mov	r0,@r12
(2)  448/ 60012E4 :                     ; 		mov	#320*96,r0
(2)  449/ 60012E4 :                     ; 		mov	r0,@($08,r12)
(2)  450/ 60012E4 :                     ; 		mov	#%0101001011100000|1,r0
(2)  451/ 60012E4 :                     ; 		mov	r0,@($0C,r12)
(2)  452/ 60012E4 :                     ; .wait_dma:	mov	@($C,r12),r0		; Still on DMA?
(2)  453/ 60012E4 :                     ; 		tst	#%10,r0
(2)  454/ 60012E4 :                     ; 		bt	.wait_dma
(2)  455/ 60012E4 :                     ; 		mov	#%0101001011100000,r0
(2)  456/ 60012E4 :                     ; 		mov	r0,@($C,r12)
(2)  457/ 60012E4 :                     
(2)  458/ 60012E4 :                     ; --------------------------------------------------------
(2)  459/ 60012E4 :                     ; scrlDrw_SSprDraw
(2)  460/ 60012E4 :                     ;
(2)  461/ 60012E4 :                     ; Inputs:
(2)  462/ 60012E4 :                     ; r1 | Graphics data *
(2)  463/ 60012E4 :                     ; r2 | Xpos *
(2)  464/ 60012E4 :                     ; r3 | Ypos *
(2)  465/ 60012E4 :                     ; r4 | Xsize *
(2)  466/ 60012E4 :                     ; r5 | Ysize *
(2)  467/ 60012E4 :                     ; r6 | Flags + Pixel increment *
(2)  468/ 60012E4 :                     ;
(2)  469/ 60012E4 :                     ; In Loop:
(2)  470/ 60012E4 :                     ; r14 - Framebuffer output
(2)  471/ 60012E4 :                     ; r13 - Scroll size W*H
(2)  472/ 60012E4 :                     ; r12 - Scroll height
(2)  473/ 60012E4 :                     ; r11 - Scroll width
(2)  474/ 60012E4 :                     ; r10 - Scroll TL-pos read
(2)  475/ 60012E4 :                     ;  r9 - Scroll Y-pos read
(2)  476/ 60012E4 :                     ;
(2)  477/ 60012E4 :                     ; Breaks:
(2)  478/ 60012E4 :                     ; r1-r6
(2)  479/ 60012E4 :                     ; --------------------------------------------------------
(2)  480/ 60012E4 :                     
(2)  481/ 60012E4 :                     		align 4
(2)  482/ 60012E4 :                     scrlDrw_SSprDraw:
(2)  483/ 60012E4 : 2F76                		mov	r7,@-r15
(2)  484/ 60012E6 : 2F86                		mov	r8,@-r15
(2)  485/ 60012E8 : 2F96                		mov	r9,@-r15
(2)  486/ 60012EA : 2FA6                		mov	r10,@-r15
(2)  487/ 60012EC : 2FC6                		mov	r12,@-r15
(2)  488/ 60012EE :                     	; Y limits
(2)  489/ 60012EE : 6033                		mov	r3,r0
(2)  490/ 60012F0 : 4011                .y_low:		cmp/pz	r0
(2)  491/ 60012F2 : 8900                		bt	.y_mid
(2)  492/ 60012F4 : E000                		mov	#0,r0
(2)  493/ 60012F6 : 30C3                .y_mid:		cmp/ge	r12,r0
(2)  494/ 60012F8 : 8B01                		bf	.y_ok
(2)  495/ 60012FA : E03C                		mov	#SET_MSCRLHGHT>>2,r0	; 240
(2)  496/ 60012FC : 4008                		shll2	r0
(2)  497/ 60012FE :                     .y_ok:
(2)  498/ 60012FE : 309C                		add	r9,r0
(2)  499/ 6001300 : 20BF                		muls	r11,r0			; macl - Y pos
(2)  500/ 6001302 :                     	; No X limits
(2)  501/ 6001302 : 6C23                		mov	r2,r12			; X-pos
(2)  502/ 6001304 : 3CAC                		add	r10,r12
(2)  503/ 6001306 : 001A                		sts	macl,r0
(2)  504/ 6001308 : 3C0C                		add	r0,r12
(2)  505/ 600130A : 3CD3                .xy_xwrap:	cmp/ge	r13,r12
(2)  506/ 600130C : 8B01                		bf	.xy_flip
(2)  507/ 600130E : AFFC                		bra	.xy_xwrap
(2)  508/ 6001310 : 3CD8                		sub	r13,r12
(2)  509/ 6001312 :                     .xy_flip:
(2)  510/ 6001312 : E0FC                		mov	#-4,r0
(2)  511/ 6001314 : 2C09                		and	r0,r12
(2)  512/ 6001316 :                     	; ---------------------------------------
(2)  513/ 6001316 : 6069                		swap	r6,r0			; Y flip? start
(2)  514/ 6001318 : C802                		tst	#%10,r0
(2)  515/ 600131A : 8903                		bt	.y_flip
(2)  516/ 600131C : 254F                		muls	r4,r5
(2)  517/ 600131E : 001A                		sts	macl,r0
(2)  518/ 6001320 : 310C                		add	r0,r1			; Flip Y src
(2)  519/ 6001322 : 3148                		sub	r4,r1
(2)  520/ 6001324 :                     .y_flip:
(2)  521/ 6001324 : E804                		mov	#4,r8
(2)  522/ 6001326 : 6069                		swap	r6,r0			; X flip?
(2)  523/ 6001328 : C801                		tst	#%01,r0
(2)  524/ 600132A : 8903                		bt	.x_flip
(2)  525/ 600132C : 688B                		neg	r8,r8
(2)  526/ 600132E : 6043                		mov	r4,r0
(2)  527/ 6001330 : 70FC                		add	#-4,r0
(2)  528/ 6001332 : 310C                		add	r0,r1
(2)  529/ 6001334 :                     .x_flip:
(2)  530/ 6001334 : 4311                		cmp/pz	r3
(2)  531/ 6001336 : 8909                		bt	.y_top
(2)  532/ 6001338 : 353C                		add	r3,r5
(2)  533/ 600133A : 234F                		muls	r4,r3
(2)  534/ 600133C : 6069                		swap	r6,r0
(2)  535/ 600133E : C802                		tst	#%10,r0
(2)  536/ 6001340 : 8902                		bt	.y_rflip
(2)  537/ 6001342 : 001A                		sts	macl,r0
(2)  538/ 6001344 : A001                		bra	.y_rflipc
(2)  539/ 6001346 : 600B                		neg	r0,r0
(2)  540/ 6001348 :                     .y_rflip:
(2)  541/ 6001348 : 001A                		sts	macl,r0
(2)  542/ 600134A :                     .y_rflipc:
(2)  543/ 600134A : 3108                		sub	r0,r1
(2)  544/ 600134C :                     .y_top:
(2)  545/ 600134C : 6033                		mov	r3,r0
(2)  546/ 600134E : 305C                		add	r5,r0
(2)  547/ 6001350 : E93C                		mov	#SET_MSCRLHGHT>>2,r9	; 240
(2)  548/ 6001352 : 4908                		shll2	r9
(2)  549/ 6001354 : 3093                		cmp/ge	r9,r0
(2)  550/ 6001356 : 8B01                		bf	.y_bot
(2)  551/ 6001358 : 3098                		sub	r9,r0
(2)  552/ 600135A : 3508                		sub	r0,r5
(2)  553/ 600135C :                     .y_bot:
(2)  554/ 600135C : 0009                		nop
(2)  555/ 600135E : 6923                		mov	r2,r9		; r9 - X size
(2)  556/ 6001360 : 394C                		add	r4,r9
(2)  557/ 6001362 : 6069                		swap	r6,r0		; Y flip? start
(2)  558/ 6001364 : C802                		tst	#%10,r0
(2)  559/ 6001366 : 8900                		bt	.y_flipr
(2)  560/ 6001368 : 644B                		neg	r4,r4
(2)  561/ 600136A :                     .y_flipr:
(2)  562/ 600136A : E0FC                		mov	#-4,r0
(2)  563/ 600136C : 2109                		and	r0,r1
(2)  564/ 600136E :                     
(2)  565/ 600136E :                     	; ---------------------------------------
(2)  566/ 600136E :                     	; LOOP
(2)  567/ 600136E :                     	; ---------------------------------------
(2)  568/ 600136E :                     	; r1 - Frame data line pos
(2)  569/ 600136E :                     	; r2 - X pos read
(2)  570/ 600136E :                     	; r3 -
(2)  571/ 600136E :                     	; r4 - Y increment f/b
(2)  572/ 600136E :                     	; r5 - Y lines / X current beam
(2)  573/ 600136E :                     	; r6 - flags (X flip only) | pixel increment
(2)  574/ 600136E :                     	; r7 - current TL pos
(2)  575/ 600136E :                     	; r8 - X increment f/b
(2)  576/ 600136E :                     	; r9 - X end
(2)  577/ 600136E :                     	; r10 -
(2)  578/ 600136E :                     	; r11
(2)  579/ 600136E :                     	; r12
(2)  580/ 600136E :                     .y_loop:
(2)  581/ 600136E : 3CD3                		cmp/ge	r13,r12
(2)  582/ 6001370 : 8B00                		bf	.tl_snap
(2)  583/ 6001372 : 3CD8                		sub	r13,r12
(2)  584/ 6001374 :                     .tl_snap:
(2)  585/ 6001374 : 2F16                		mov	r1,@-r15
(2)  586/ 6001376 : 2F26                		mov	r2,@-r15
(2)  587/ 6001378 : 2F46                		mov	r4,@-r15
(2)  588/ 600137A : 2F56                		mov	r5,@-r15
(2)  589/ 600137C : 2FC6                		mov	r12,@-r15
(2)  590/ 600137E : E551                		mov	#(320+4)>>2,r5
(2)  591/ 6001380 : 4508                		shll2	r5
(2)  592/ 6001382 :                     
(2)  593/ 6001382 :                     ; ---------------------------------------
(2)  594/ 6001382 :                     
(2)  595/ 6001382 :                     .x_loop:
(2)  596/ 6001382 : 3CD3                		cmp/ge	r13,r12
(2)  597/ 6001384 : 8B00                		bf	.tl_x
(2)  598/ 6001386 : 3CD8                		sub	r13,r12
(2)  599/ 6001388 :                     .tl_x:
(2)  600/ 6001388 : 6012                		mov	@r1,r0
(2)  601/ 600138A : 636C                		extu.b	r6,r3
(2)  602/ 600138C : C8FF                		tst	#$FF,r0
(2)  603/ 600138E : 8900                		bt	.z_0
(2)  604/ 6001390 : 303C                		add	r3,r0
(2)  605/ 6001392 : 6008                .z_0:		swap.b	r0,r0
(2)  606/ 6001394 : C8FF                		tst	#$FF,r0
(2)  607/ 6001396 : 8900                		bt	.z_1
(2)  608/ 6001398 : 303C                		add	r3,r0
(2)  609/ 600139A : 6009                .z_1:		swap.w	r0,r0
(2)  610/ 600139C : C8FF                		tst	#$FF,r0
(2)  611/ 600139E : 8900                		bt	.z_2
(2)  612/ 60013A0 : 303C                		add	r3,r0
(2)  613/ 60013A2 : 6008                .z_2:		swap.b	r0,r0
(2)  614/ 60013A4 : C8FF                		tst	#$FF,r0
(2)  615/ 60013A6 : 8900                		bt	.z_3
(2)  616/ 60013A8 : 303C                		add	r3,r0
(2)  617/ 60013AA : 6303                .z_3:		mov	r0,r3
(2)  618/ 60013AC : 6069                		swap	r6,r0
(2)  619/ 60013AE : C801                		tst	#%01,r0
(2)  620/ 60013B0 : 8B02                		bf	.x_mswap	; <--
(2)  621/ 60013B2 : 6338                		swap.b	r3,r3
(2)  622/ 60013B4 : 6339                		swap.w	r3,r3
(2)  623/ 60013B6 : 6338                		swap.b	r3,r3
(2)  624/ 60013B8 :                     .x_mswap:
(2)  625/ 60013B8 : 6433                		mov	r3,r4
(2)  626/ 60013BA :                     
(2)  627/ 60013BA :                     	; r3 - left copy
(2)  628/ 60013BA :                     	; r4 - right copy
(2)  629/ 60013BA :                     	; 	1234 ----
(2)  630/ 60013BA :                     	; 	-123 4---
(2)  631/ 60013BA :                     	; 	--12 34--
(2)  632/ 60013BA :                     	; 	---1 234-
(2)  633/ 60013BA : 6023                		mov	r2,r0
(2)  634/ 60013BC : 30AC                		add	r10,r0
(2)  635/ 60013BE : C903                		and	#%11,r0
(2)  636/ 60013C0 : 2008                		tst	r0,r0
(2)  637/ 60013C2 : 8917                		bt	.wrt_0
(2)  638/ 60013C4 : 8802                		cmp/eq	#2,r0
(2)  639/ 60013C6 : 8903                		bt	.half_2
(2)  640/ 60013C8 : 8803                		cmp/eq	#3,r0
(2)  641/ 60013CA : 8903                		bt	.half_3
(2)  642/ 60013CC : A003                		bra	.half_1
(2)  643/ 60013CE : 4428                		shll16	r4
(2)  644/ 60013D0 :                     .half_2:
(2)  645/ 60013D0 : 4428                		shll16	r4
(2)  646/ 60013D2 : A002                		bra	.drw_half
(2)  647/ 60013D4 :                     .half_3:
(2)  648/ 60013D4 : 4329                		shlr16	r3
(2)  649/ 60013D6 : 4319                .half_1:	shlr8	r3
(2)  650/ 60013D8 : 4418                		shll8	r4
(2)  651/ 60013DA :                     .drw_half:
(2)  652/ 60013DA : 6023                		mov	r2,r0
(2)  653/ 60013DC : 3053                		cmp/ge	r5,r0
(2)  654/ 60013DE : 8909                		bt	.wrt_0
(2)  655/ 60013E0 : 7008                		add	#4+4,r0
(2)  656/ 60013E2 : 4011                		cmp/pz	r0
(2)  657/ 60013E4 : 8B06                		bf	.wrt_0
(2)  658/ 60013E6 : 60C3                		mov	r12,r0		; Right half
(2)  659/ 60013E8 : 7004                		add	#4,r0
(2)  660/ 60013EA : 30D3                		cmp/ge	r13,r0
(2)  661/ 60013EC : 8B00                		bf	.tl_h
(2)  662/ 60013EE : 30D8                		sub	r13,r0
(2)  663/ 60013F0 : 30EC                .tl_h:		add	r14,r0
(2)  664/ 60013F2 : 2042                		mov	r4,@r0
(2)  665/ 60013F4 :                     .wrt_0:
(2)  666/ 60013F4 : 6023                		mov	r2,r0
(2)  667/ 60013F6 : 3053                		cmp/ge	r5,r0
(2)  668/ 60013F8 : 890A                		bt	.x_giveup
(2)  669/ 60013FA : 7004                		add	#4,r0
(2)  670/ 60013FC : 4011                		cmp/pz	r0
(2)  671/ 60013FE : 8B02                		bf	.xr_left
(2)  672/ 6001400 : 60C3                		mov	r12,r0
(2)  673/ 6001402 : 30EC                		add	r14,r0
(2)  674/ 6001404 : 2032                		mov	r3,@r0
(2)  675/ 6001406 :                     .xr_left:
(2)  676/ 6001406 : 318C                		add	r8,r1
(2)  677/ 6001408 : 7204                		add	#4,r2
(2)  678/ 600140A : 3293                		cmp/ge	r9,r2
(2)  679/ 600140C : 8FB9                		bf/s	.x_loop
(2)  680/ 600140E : 7C04                		add	#4,r12
(2)  681/ 6001410 :                     .x_giveup:
(2)  682/ 6001410 :                     
(2)  683/ 6001410 :                     ; ---------------------------------------
(2)  684/ 6001410 : 6CF6                		mov	@r15+,r12
(2)  685/ 6001412 : 65F6                		mov	@r15+,r5
(2)  686/ 6001414 : 64F6                		mov	@r15+,r4
(2)  687/ 6001416 : 62F6                		mov	@r15+,r2
(2)  688/ 6001418 : 61F6                		mov	@r15+,r1
(2)  689/ 600141A : 314C                		add	r4,r1		; Next line FOWARD
(2)  690/ 600141C : 4510                		dt	r5
(2)  691/ 600141E : 8FA6                		bf/s	.y_loop
(2)  692/ 6001420 : 3CBC                		add	r11,r12
(2)  693/ 6001422 :                     .y_last:
(2)  694/ 6001422 :                     
(2)  695/ 6001422 :                     .y_end:
(2)  696/ 6001422 : 6CF6                		mov	@r15+,r12
(2)  697/ 6001424 : 6AF6                		mov	@r15+,r10
(2)  698/ 6001426 : 69F6                		mov	@r15+,r9
(2)  699/ 6001428 : 68F6                		mov	@r15+,r8
(2)  700/ 600142A : 67F6                		mov	@r15+,r7
(2)  701/ 600142C : 000B                		rts
(2)  702/ 600142E : 0009                		nop
(2)  703/ 6001430 :                     		align 4
(2)  704/ 6001430 : 2402 0000 C000      		ltorg
          6001436 : 0000             
(2)  705/ 6001438 :                     
(2)  706/ 6001438 :                     ; 		align 4
(2)  707/ 6001438 :                     ; 		ltorg
(2)  708/ 6001438 :                     
(2)  709/ 6001438 :                     ; MarsVideo_DmaDraw:
(2)  710/ 6001438 :                     ; 		mov	#_DMASOURCE1,r4
(2)  711/ 6001438 :                     ; 		mov	#%0101001011100000,r0
(2)  712/ 6001438 :                     ; 		mov	r0,@($0C,r4)
(2)  713/ 6001438 :                     ; 		mov	r1,r0
(2)  714/ 6001438 :                     ; 		mov	r0,@r4
(2)  715/ 6001438 :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  716/ 6001438 :                     ; 		mov	r0,@($04,r4)
(2)  717/ 6001438 :                     ; 		mov	r3,r0
(2)  718/ 6001438 :                     ; 		mov	r0,@($08,r4)
(2)  719/ 6001438 :                     ; 		mov	#%0101001011100000|1,r0
(2)  720/ 6001438 :                     ; 		mov	r0,@($0C,r4)
(2)  721/ 6001438 :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  722/ 6001438 :                     ; 		tst	#%10,r0
(2)  723/ 6001438 :                     ; 		bt	.wait_dma
(2)  724/ 6001438 :                     ; 		mov	#%0101001011100000,r0
(2)  725/ 6001438 :                     ; 		mov	r0,@($C,r4)
(2)  726/ 6001438 :                     ; 		rts
(2)  727/ 6001438 :                     ; 		nop
(2)  728/ 6001438 :                     ; 		align 4
(2)  729/ 6001438 :                     ; 		ltorg
(2)  730/ 6001438 :                     
(2)  731/ 6001438 :                     ; --------------------------------------------------------
(2)  732/ 6001438 :                     ; MarsVideo_MkFillBlk
(2)  733/ 6001438 :                     ;
(2)  734/ 6001438 :                     ; Generate Block-Refill blocks to be processed on
(2)  735/ 6001438 :                     ; the next frame
(2)  736/ 6001438 :                     ;
(2)  737/ 6001438 :                     ; 16x16 blocks.
(2)  738/ 6001438 :                     ; --------------------------------------------------------
(2)  739/ 6001438 :                     
(2)  740/ 6001438 :                     		align 4
(2)  741/ 6001438 :                     MarsVideo_MkFillBlk:
(2)  742/ 6001438 : 4F22                		sts	pr,@-r15
(2)  743/ 600143A : DE3F                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(2)  744/ 600143C :                     
(2)  745/ 600143C :                     	; First pass: Redraw bits from DREQ-RAM
(2)  746/ 600143C : 62E3                		mov	r14,r2
(2)  747/ 600143E : 917D                		mov	#Dreq_Buff1,r1			; ** DREQ READ **
(2)  748/ 6001440 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  749/ 6001442 : 310C                		add	r0,r1
(2)  750/ 6001444 : 947B                		mov	#(512/16)*(256/16),r4
(2)  751/ 6001446 : E303                		mov	#%11,r3			; Write flag
(2)  752/ 6001448 :                     .copy_bit:
(2)  753/ 6001448 : 6015                		mov.w	@r1+,r0
(2)  754/ 600144A : 600F                		exts.w	r0,r0
(2)  755/ 600144C : 4011                		cmp/pz	r0
(2)  756/ 600144E : 8902                		bt	.no_flip
(2)  757/ 6001450 : 6021                		mov.w	@r2,r0
(2)  758/ 6001452 : 203B                		or	r3,r0
(2)  759/ 6001454 : 2201                		mov.w	r0,@r2
(2)  760/ 6001456 :                     .no_flip:
(2)  761/ 6001456 : 4410                		dt	r4
(2)  762/ 6001458 : 8FF6                		bf/s	.copy_bit
(2)  763/ 600145A : 7202                		add	#2,r2
(2)  764/ 600145C :                     
(2)  765/ 600145C :                     	; Last pass: SuperSprites
(2)  766/ 600145C :                     	; r14 is gone here
(2)  767/ 600145C : 9D70                		mov	#Dreq_Buff2,r13			; ** DREQ READ **
(2)  768/ 600145E : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  769/ 6001460 : 3D0C                		add	r0,r13
(2)  770/ 6001462 : EC20                		mov	#MAX_MARSSPR,r12
(2)  771/ 6001464 :                     .next_sspr:
(2)  772/ 6001464 : 84D0                		mov.b	@(sspr_flags,r13),r0
(2)  773/ 6001466 : C880                		tst	#$80,r0				; Sprite enabled?
(2)  774/ 6001468 :                     ; 		bt	.exit_sspr			; end of list
(2)  775/ 6001468 : 895E                		bt	.off_sspr			; sprite is off, keep checking
(2)  776/ 600146A : 0009                		nop
(2)  777/ 600146C : 85D2                		mov.w	@(sspr_size,r13),r0
(2)  778/ 600146E : 650C                		extu.b	r0,r5				; Y size
(2)  779/ 6001470 : 4019                		shlr8	r0
(2)  780/ 6001472 : 640C                		extu.b	r0,r4				; X size
(2)  781/ 6001474 : 4515                		cmp/pl	r5				; Y size <= 0?
(2)  782/ 6001476 : 8B5B                		bf	.exit_sspr
(2)  783/ 6001478 : 4415                		cmp/pl	r4				; X size <= 0?
(2)  784/ 600147A : 8B59                		bf	.exit_sspr
(2)  785/ 600147C : 85D4                		mov.w	@(sspr_x_pos,r13),r0
(2)  786/ 600147E : 620F                		exts.w	r0,r2
(2)  787/ 6001480 : 85D5                		mov.w	@(sspr_y_pos,r13),r0
(2)  788/ 6001482 : 630F                		exts.w	r0,r3
(2)  789/ 6001484 :                     
(2)  790/ 6001484 :                     	; off-screen checks
(2)  791/ 6001484 :                     ; 		mov	r4,r0
(2)  792/ 6001484 :                     ; 		shll2	r0
(2)  793/ 6001484 :                     ; 		shll2	r0
(2)  794/ 6001484 :                     ; 		add	r2,r0
(2)  795/ 6001484 :                     ; 		cmp/pz	r0
(2)  796/ 6001484 :                     ; 		bf	.exit_sspr
(2)  797/ 6001484 :                     ; 		mov	#SET_MSCRLWDTH>>2,r0
(2)  798/ 6001484 :                     ; 		shll2	r0
(2)  799/ 6001484 :                     ; 		cmp/ge	r0,r2
(2)  800/ 6001484 :                     ; 		bt	.exit_sspr
(2)  801/ 6001484 :                     ; 		mov	r5,r0
(2)  802/ 6001484 :                     ; 		shll2	r0
(2)  803/ 6001484 :                     ; 		shll	r0
(2)  804/ 6001484 :                     ; 		add	r3,r0
(2)  805/ 6001484 :                     ; 		cmp/pz	r0
(2)  806/ 6001484 :                     ; 		bf	.exit_sspr
(2)  807/ 6001484 :                     ; 		mov	#SET_MSCRLHGHT>>2,r0
(2)  808/ 6001484 :                     ; 		shll2	r0
(2)  809/ 6001484 :                     ; 		cmp/ge	r0,r3
(2)  810/ 6001484 :                     ; 		bt	.exit_sspr
(2)  811/ 6001484 :                     
(2)  812/ 6001484 : 4401                		shlr	r4			; /2 for 16x16
(2)  813/ 6001486 : 4501                		shlr	r5
(2)  814/ 6001488 : 7401                		add	#1,r4
(2)  815/ 600148A : 7501                		add	#1,r5
(2)  816/ 600148C : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  817/ 600148E : 680F                		exts.w	r0,r8
(2)  818/ 6001490 : E60F                		mov	#16-1,r6		; MANUAL SIZE 16x16
(2)  819/ 6001492 : 0009                		nop
(2)  820/ 6001494 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  821/ 6001496 : 690F                		exts.w	r0,r9
(2)  822/ 6001498 : 6023                		mov	r2,r0
(2)  823/ 600149A : 308C                		add	r8,r0
(2)  824/ 600149C : 2069                		and	r6,r0
(2)  825/ 600149E : 2008                		tst	r0,r0
(2)  826/ 60014A0 : 8900                		bt	.x_szex
(2)  827/ 60014A2 : 7401                		add	#1,r4
(2)  828/ 60014A4 :                     .x_szex:
(2)  829/ 60014A4 : 6033                		mov	r3,r0
(2)  830/ 60014A6 : 309C                		add	r9,r0
(2)  831/ 60014A8 : 2069                		and	r6,r0
(2)  832/ 60014AA : 2008                		tst	r0,r0
(2)  833/ 60014AC : 8900                		bt	.y_szex
(2)  834/ 60014AE : 7501                		add	#1,r5
(2)  835/ 60014B0 :                     .y_szex:
(2)  836/ 60014B0 : 4408                		shll2	r4		; Expand sizes to 16pixels
(2)  837/ 60014B2 : 4408                		shll2	r4
(2)  838/ 60014B4 : 4508                		shll2	r5
(2)  839/ 60014B6 : 4508                		shll2	r5
(2)  840/ 60014B8 : 342C                		add	r2,r4
(2)  841/ 60014BA : 353C                		add	r3,r5
(2)  842/ 60014BC : E654                		mov	#SET_MSCRLWDTH>>2,r6
(2)  843/ 60014BE : E73C                		mov	#SET_MSCRLHGHT>>2,r7
(2)  844/ 60014C0 : 4608                		shll2	r6
(2)  845/ 60014C2 : 4708                		shll2	r7
(2)  846/ 60014C4 :                     	; Off-screen limits
(2)  847/ 60014C4 : 4415                		cmp/pl	r4
(2)  848/ 60014C6 : 8B2F                		bf	.off_sspr
(2)  849/ 60014C8 : 4515                		cmp/pl	r5
(2)  850/ 60014CA : 8B2D                		bf	.off_sspr
(2)  851/ 60014CC : 3263                		cmp/ge	r6,r2		; Xleft < 0?
(2)  852/ 60014CE : 892B                		bt	.off_sspr
(2)  853/ 60014D0 : 3373                		cmp/ge	r7,r3		; Yup < 0?
(2)  854/ 60014D2 : 8929                		bt	.off_sspr
(2)  855/ 60014D4 :                     	; Squeeze screen coords
(2)  856/ 60014D4 : E010                		mov	#16,r0
(2)  857/ 60014D6 : 360C                		add	r0,r6
(2)  858/ 60014D8 : 370C                		add	r0,r7
(2)  859/ 60014DA : 4215                		cmp/pl	r2
(2)  860/ 60014DC : 8900                		bt	.x_sqz
(2)  861/ 60014DE : E200                		mov	#0,r2
(2)  862/ 60014E0 : 4315                .x_sqz:		cmp/pl	r3
(2)  863/ 60014E2 : 8900                		bt	.y_sqz
(2)  864/ 60014E4 : E300                		mov	#0,r3
(2)  865/ 60014E6 : 3463                .y_sqz:		cmp/ge	r6,r4
(2)  866/ 60014E8 : 8B00                		bf	.x_sqend
(2)  867/ 60014EA : 6463                		mov	r6,r4
(2)  868/ 60014EC : 3573                .x_sqend:	cmp/ge	r7,r5
(2)  869/ 60014EE : 8B00                		bf	.y_sqend
(2)  870/ 60014F0 : 6573                		mov	r7,r5
(2)  871/ 60014F2 :                     .y_sqend:
(2)  872/ 60014F2 :                     
(2)  873/ 60014F2 :                     	; r2 - X pos
(2)  874/ 60014F2 :                     	; r3 - Y pos
(2)  875/ 60014F2 :                     	; r4 - X end
(2)  876/ 60014F2 :                     	; r5 - Y end
(2)  877/ 60014F2 :                     .y_row:
(2)  878/ 60014F2 : 6623                		mov	r2,r6
(2)  879/ 60014F4 :                     .x_row:
(2)  880/ 60014F4 : 6033                		mov	r3,r0
(2)  881/ 60014F6 : 309C                		add	r9,r0
(2)  882/ 60014F8 : 4009                		shlr2	r0
(2)  883/ 60014FA : 4009                		shlr2	r0
(2)  884/ 60014FC : C90F                		and	#(256/16)-1,r0
(2)  885/ 60014FE : 4008                		shll2	r0
(2)  886/ 6001500 : 4008                		shll2	r0
(2)  887/ 6001502 : 4008                		shll2	r0
(2)  888/ 6001504 : 6703                		mov	r0,r7
(2)  889/ 6001506 : 6063                		mov	r6,r0
(2)  890/ 6001508 : 308C                		add	r8,r0
(2)  891/ 600150A : 4009                		shlr2	r0
(2)  892/ 600150C : 4009                		shlr2	r0
(2)  893/ 600150E : C91F                		and	#(512/16)-1,r0
(2)  894/ 6001510 : 4000                		shll	r0
(2)  895/ 6001512 : 370C                		add	r0,r7
(2)  896/ 6001514 : 37EC                		add	r14,r7
(2)  897/ 6001516 : 6071                		mov.w	@r7,r0
(2)  898/ 6001518 : CB03                		or	#%11,r0
(2)  899/ 600151A : 2701                		mov.w	r0,@r7
(2)  900/ 600151C : 7610                		add	#16,r6
(2)  901/ 600151E : 3643                		cmp/ge	r4,r6
(2)  902/ 6001520 : 8BE8                		bf	.x_row
(2)  903/ 6001522 : 7310                		add	#16,r3
(2)  904/ 6001524 : 3353                		cmp/ge	r5,r3
(2)  905/ 6001526 : 8BE4                		bf	.y_row
(2)  906/ 6001528 :                     .off_sspr:
(2)  907/ 6001528 : E010                		mov	#sspr_len,r0
(2)  908/ 600152A : 4C10                		dt	r12
(2)  909/ 600152C : 8F9A                		bf/s	.next_sspr
(2)  910/ 600152E : 3D0C                		add	r0,r13
(2)  911/ 6001530 :                     .exit_sspr:
(2)  912/ 6001530 : 4F26                		lds	@r15+,pr
(2)  913/ 6001532 : 000B                		rts
(2)  914/ 6001534 : 0009                		nop
(2)  915/ 6001536 :                     		align 4
(2)  916/ 6001538 : C000 0200 0220      		ltorg
          600153E : 0200 0620          
(2)  917/ 6001542 :                     
(2)  918/ 6001542 :                     ; --------------------------------------------------------
(2)  919/ 6001542 :                     ; MarsVideo_DrawFillBlk
(2)  920/ 6001542 :                     ;
(2)  921/ 6001542 :                     ; r14 - Svdp queue base
(2)  922/ 6001542 :                     ; r13 - Scroll size W*H
(2)  923/ 6001542 :                     ; r12 - Scroll height
(2)  924/ 6001542 :                     ; r11 - Scroll width
(2)  925/ 6001542 :                     ; r10 - Scroll TL-pos read / 16 *
(2)  926/ 6001542 :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  927/ 6001542 :                     ;  r8 - Graphics data
(2)  928/ 6001542 :                     ;  r7 - Map data
(2)  929/ 6001542 :                     ;  r6 - Map Y read index
(2)  930/ 6001542 :                     ;  r5 - Map X read index
(2)  931/ 6001542 :                     ; --------------------------------------------------------
(2)  932/ 6001542 :                     
(2)  933/ 6001542 :                     		align 4
(2)  934/ 6001544 :                     MarsVideo_DrawFillBlk:
(2)  935/ 6001544 : 4F22                		sts	pr,@-r15
(2)  936/ 6001546 :                     
(2)  937/ 6001546 : DE37                		mov	#_framebuffer,r14
(2)  938/ 6001548 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  939/ 600154A : 6D03                		mov	r0,r13
(2)  940/ 600154C : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  941/ 600154E : 6C03                		mov	r0,r12
(2)  942/ 6001550 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  943/ 6001552 : 6B03                		mov	r0,r11
(2)  944/ 6001554 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  945/ 6001556 : 6A03                		mov	r0,r10
(2)  946/ 6001558 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  947/ 600155A : 6903                		mov	r0,r9
(2)  948/ 600155C : C613                		mov	@(marsGbl_Scrl_Vram,gbr),r0
(2)  949/ 600155E : 6603                		mov	r0,r6
(2)  950/ 6001560 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  951/ 6001562 : 6703                		mov	r0,r7
(2)  952/ 6001564 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  953/ 6001566 : 6803                		mov	r0,r8
(2)  954/ 6001568 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  955/ 600156A : 3E0C                		add	r0,r14
(2)  956/ 600156C : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  957/ 600156E : 955F                		mov	#Dreq_Buff1,r5			; ** DREQ READ **
(2)  958/ 6001570 : 350C                		add	r0,r5
(2)  959/ 6001572 : D02D                		mov	#RAM_Mars_VramData,r0
(2)  960/ 6001574 : 360C                		add	r0,r6
(2)  961/ 6001576 : E0F0                		mov	#-SET_MSCRLSIZE,r0		; -MSCRL_BLKSIZE
(2)  962/ 6001578 : 2A09                		and	r0,r10				; Set FB top-left
(2)  963/ 600157A : 2909                		and	r0,r9
(2)  964/ 600157C : D42B                		mov	#$C0000000|RAM_Mars_ScrlRefill,r4
(2)  965/ 600157E :                     ; 		mov.w	@(marsGbl_DrawAll,gbr),r0
(2)  966/ 600157E :                     ; 		tst	r0,r0
(2)  967/ 600157E :                     ; 		bt	.keep_normal
(2)  968/ 600157E :                     ; 		mov	#0,r4
(2)  969/ 600157E :                     ; .keep_normal:
(2)  970/ 600157E :                     
(2)  971/ 600157E :                     	; r14 - Svdp queue base
(2)  972/ 600157E :                     	; r13 - Scroll size W*H
(2)  973/ 600157E :                     	; r12 - Scroll height
(2)  974/ 600157E :                     	; r11 - Scroll width
(2)  975/ 600157E :                     	; r10 - Scroll TL-pos read / 16 *
(2)  976/ 600157E :                     	;  r9 - Scroll Y-pos read / 16 *
(2)  977/ 600157E :                     	;  r8 - Map X read index
(2)  978/ 600157E :                     	;  r7 - Map Y read index
(2)  979/ 600157E :                     	;  r6 - Graphics data
(2)  980/ 600157E :                     	;  r5 - Map data
(2)  981/ 600157E :                     	;  r4 - Refill map
(2)  982/ 600157E :                     	;  r3 -
(2)  983/ 600157E : 2B9F                		muls	r9,r11
(2)  984/ 6001580 : 001A                		sts	macl,r0
(2)  985/ 6001582 : 3A0C                		add	r0,r10
(2)  986/ 6001584 : E1FC                		mov	#-4,r1
(2)  987/ 6001586 : 2A19                		and	r1,r10
(2)  988/ 6001588 : 63B3                		mov	r11,r3
(2)  989/ 600158A : 4309                		shlr2	r3
(2)  990/ 600158C : 4309                		shlr2	r3
(2)  991/ 600158E :                     .x_loop:
(2)  992/ 600158E : 3AD3                		cmp/ge	r13,r10
(2)  993/ 6001590 : 8B00                		bf	.tl_snap_x
(2)  994/ 6001592 : 3AD8                		sub	r13,r10
(2)  995/ 6001594 :                     .tl_snap_x:
(2)  996/ 6001594 : 2F36                		mov	r3,@-r15
(2)  997/ 6001596 : 2F76                		mov	r7,@-r15
(2)  998/ 6001598 : 2FA6                		mov	r10,@-r15
(2)  999/ 600159A : 2FC6                		mov	r12,@-r15
(2) 1000/ 600159C : 4C09                		shlr2	r12
(2) 1001/ 600159E : 4C09                		shlr2	r12
(2) 1002/ 60015A0 :                     .y_loop:
(2) 1003/ 60015A0 : 3AD3                		cmp/ge	r13,r10
(2) 1004/ 60015A2 : 8B00                		bf	.tl_snap_y
(2) 1005/ 60015A4 : 3AD8                		sub	r13,r10
(2) 1006/ 60015A6 :                     .tl_snap_y:
(2) 1007/ 60015A6 : 62A3                		mov	r10,r2
(2) 1008/ 60015A8 : E00F                		mov	#(256/16)-1,r0
(2) 1009/ 60015AA : 6373                		mov	r7,r3		; Y pos
(2) 1010/ 60015AC : 4309                		shlr2	r3
(2) 1011/ 60015AE : 4309                		shlr2	r3
(2) 1012/ 60015B0 : 2309                		and	r0,r3
(2) 1013/ 60015B2 : 4308                		shll2	r3
(2) 1014/ 60015B4 : 4308                		shll2	r3
(2) 1015/ 60015B6 : 4300                		shll	r3
(2) 1016/ 60015B8 : E01F                		mov	#(512/16)-1,r0
(2) 1017/ 60015BA : 6183                		mov	r8,r1		; X pos
(2) 1018/ 60015BC : 4109                		shlr2	r1
(2) 1019/ 60015BE : 4109                		shlr2	r1
(2) 1020/ 60015C0 : 2109                		and	r0,r1
(2) 1021/ 60015C2 : 313C                		add	r3,r1
(2) 1022/ 60015C4 : 4100                		shll	r1
(2) 1023/ 60015C6 : 2448                		tst	r4,r4
(2) 1024/ 60015C8 : 8908                		bt	.always_on
(2) 1025/ 60015CA : 411A                		lds	r1,macl
(2) 1026/ 60015CC : 314C                		add	r4,r1
(2) 1027/ 60015CE : 6011                		mov.w	@r1,r0
(2) 1028/ 60015D0 : 2008                		tst	r0,r0
(2) 1029/ 60015D2 : 8914                		bt	.no_flag
(2) 1030/ 60015D4 : 4001                		shlr	r0
(2) 1031/ 60015D6 : 2008                		tst	r0,r0
(2) 1032/ 60015D8 : 2101                		mov.w	r0,@r1
(2) 1033/ 60015DA : 011A                		sts	macl,r1
(2) 1034/ 60015DC :                     .always_on:
(2) 1035/ 60015DC : 315C                		add	r5,r1
(2) 1036/ 60015DE : 440A                		lds	r4,mach
(2) 1037/ 60015E0 : 6011                		mov.w	@r1,r0
(2) 1038/ 60015E2 : 9126                		mov	#SET_TILEMAX-1,r1
(2) 1039/ 60015E4 : 6403                		mov	r0,r4
(2) 1040/ 60015E6 : 2419                		and	r1,r4
(2) 1041/ 60015E8 : E100                		mov	#0,r1
(2) 1042/ 60015EA : 2448                		tst	r4,r4
(2) 1043/ 60015EC : 8903                		bt	.blank_req
(2) 1044/ 60015EE : 4410                		dt	r4
(2) 1045/ 60015F0 : 4418                		shll8	r4			; 16x16
(2) 1046/ 60015F2 : 6143                		mov	r4,r1
(2) 1047/ 60015F4 : 316C                		add	r6,r1
(2) 1048/ 60015F6 :                     .blank_req:
(2) 1049/ 60015F6 : 040A                		sts	mach,r4
(2) 1050/ 60015F8 :                     
(2) 1051/ 60015F8 :                     ; 		mov	#0,r1			; TEMPORAL
(2) 1052/ 60015F8 : B01C                		bsr	scrlDrw_DrawBlk
(2) 1053/ 60015FA : 2F36                		mov	r3,@-r15
(2) 1054/ 60015FC : 63F6                		mov	@r15+,r3
(2) 1055/ 60015FE :                     .no_flag:
(2) 1056/ 60015FE : E010                		mov	#16,r0
(2) 1057/ 6001600 : 20BE                		mulu	r11,r0
(2) 1058/ 6001602 : 001A                		sts	macl,r0
(2) 1059/ 6001604 : 3A0C                		add	r0,r10
(2) 1060/ 6001606 : 7710                		add	#16,r7
(2) 1061/ 6001608 : 4C10                		dt	r12
(2) 1062/ 600160A : 8FC9                		bf/s	.y_loop
(2) 1063/ 600160C : 7910                		add	#16,r9
(2) 1064/ 600160E :                     
(2) 1065/ 600160E : 6CF6                		mov	@r15+,r12
(2) 1066/ 6001610 : 6AF6                		mov	@r15+,r10
(2) 1067/ 6001612 : 67F6                		mov	@r15+,r7
(2) 1068/ 6001614 : 63F6                		mov	@r15+,r3
(2) 1069/ 6001616 : 7A10                		add	#16,r10
(2) 1070/ 6001618 : 4310                		dt	r3
(2) 1071/ 600161A : 8FB8                		bf/s	.x_loop
(2) 1072/ 600161C : 7810                		add	#16,r8
(2) 1073/ 600161E :                     
(2) 1074/ 600161E :                     .exit_lr:
(2) 1075/ 600161E : 4F26                		lds	@r15+,pr
(2) 1076/ 6001620 : 000B                		rts
(2) 1077/ 6001622 : 0009                		nop
(2) 1078/ 6001624 :                     		align 4
(2) 1079/ 6001624 : 2400 0000 0600      		ltorg
          600162A : FB10 C000 0200 
          6001630 : 0220 01FF          
(2) 1080/ 6001634 :                     
(2) 1081/ 6001634 :                     ; --------------------------------------------------------
(2) 1082/ 6001634 :                     ; scrlDrw_DrawBlk
(2) 1083/ 6001634 :                     ;
(2) 1084/ 6001634 :                     ; Currents:
(2) 1085/ 6001634 :                     ; r0 - Block data
(2) 1086/ 6001634 :                     ; r1 - Graphics data, 0 = blank mode
(2) 1087/ 6001634 :                     ; r2 - FB TL position
(2) 1088/ 6001634 :                     ;
(2) 1089/ 6001634 :                     ; InLoop:
(2) 1090/ 6001634 :                     ; r14 - Framebuffer BASE
(2) 1091/ 6001634 :                     ; r13 - Scrl W*H
(2) 1092/ 6001634 :                     ; r11 - Scrl width
(2) 1093/ 6001634 :                     ;
(2) 1094/ 6001634 :                     ; Uses:
(2) 1095/ 6001634 :                     ; r2,macl,mach
(2) 1096/ 6001634 :                     ; --------------------------------------------------------
(2) 1097/ 6001634 :                     
(2) 1098/ 6001634 :                     		align 4
(2) 1099/ 6001634 :                     scrlDrw_DrawBlk:
(2) 1100/ 6001634 : 2118                		tst	r1,r1
(2) 1101/ 6001636 : 8B13                		bf	.normal
(2) 1102/ 6001638 : E310                		mov	#16,r3
(2) 1103/ 600163A :                     .next_zline:
(2) 1104/ 600163A : 32D3                		cmp/ge	r13,r2
(2) 1105/ 600163C : 8B00                		bf	.tl_snapz
(2) 1106/ 600163E : 32D8                		sub	r13,r2
(2) 1107/ 6001640 :                     .tl_snapz:
(2) 1108/ 6001640 : 421A                		lds	r2,macl
(2) 1109/ 6001642 : 32EC                		add	r14,r2
(2) 1110/ 6001644 :                     	rept 16/4
(2) 1111/ 6001644 :                     		mov	r1,@r2
(2) 1112/ 6001644 :                     		add	#4,r2
(2) 1113/ 6001644 :                     	endm
(2) 1111/ 6001644 : 2212                		mov	r1,@r2
(2) 1112/ 6001646 : 7204                		add	#4,r2
(2) 1111/ 6001648 : 2212                		mov	r1,@r2
(2) 1112/ 600164A : 7204                		add	#4,r2
(2) 1111/ 600164C : 2212                		mov	r1,@r2
(2) 1112/ 600164E : 7204                		add	#4,r2
(2) 1111/ 6001650 : 2212                		mov	r1,@r2
(2) 1112/ 6001652 : 7204                		add	#4,r2
(2) 1114/ 6001654 : 021A                		sts	macl,r2
(2) 1115/ 6001656 : 4310                		dt	r3
(2) 1116/ 6001658 : 8FEF                		bf/s	.next_zline
(2) 1117/ 600165A : 32BC                		add	r11,r2
(2) 1118/ 600165C : 000B                		rts
(2) 1119/ 600165E : 0009                		nop
(2) 1120/ 6001660 :                     		align 4
(2) 1121/ 6001660 :                     
(2) 1122/ 6001660 :                     ; ----------------------------------------------------
(2) 1123/ 6001660 :                     
(2) 1124/ 6001660 :                     .normal:
(2) 1125/ 6001660 : 440A                		lds	r4,mach
(2) 1126/ 6001662 : 4019                		shlr8	r0		; Get index increment
(2) 1127/ 6001664 : 4000                		shll	r0
(2) 1128/ 6001666 : C9FC                		and	#$FC,r0		; Filter these bits only
(2) 1129/ 6001668 : 6303                		mov	r0,r3
(2) 1130/ 600166A : E410                		mov	#16,r4
(2) 1131/ 600166C :                     .next_line:
(2) 1132/ 600166C : 32D3                		cmp/ge	r13,r2
(2) 1133/ 600166E : 8B00                		bf	.tl_snap
(2) 1134/ 6001670 : 32D8                		sub	r13,r2
(2) 1135/ 6001672 :                     .tl_snap:
(2) 1136/ 6001672 : 421A                		lds	r2,macl
(2) 1137/ 6001674 : 32EC                		add	r14,r2
(2) 1138/ 6001676 :                     	rept 16/4
(2) 1139/ 6001676 :                     		mov	@r1,r0
(2) 1140/ 6001676 :                     		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 6001676 :                     		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001676 :                     		tst	#$FF,r0
(2) 1143/ 6001676 :                     		bt	.z_0
(2) 1144/ 6001676 :                     		add	r3,r0
(2) 1145/ 6001676 :                     .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001676 :                     		tst	#$FF,r0
(2) 1147/ 6001676 :                     		bt	.z_1
(2) 1148/ 6001676 :                     		add	r3,r0
(2) 1149/ 6001676 :                     .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 6001676 :                     		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 6001676 :                     		tst	#$FF,r0
(2) 1152/ 6001676 :                     		bt	.z_2
(2) 1153/ 6001676 :                     		add	r3,r0
(2) 1154/ 6001676 :                     .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 6001676 :                     		tst	#$FF,r0
(2) 1156/ 6001676 :                     		bt	.z_3
(2) 1157/ 6001676 :                     		add	r3,r0
(2) 1158/ 6001676 :                     .z_3:
(2) 1159/ 6001676 :                     		add	#4,r1		; <-- src incr
(2) 1160/ 6001676 :                     		mov	r0,@r2
(2) 1161/ 6001676 :                     		add	#4,r2
(2) 1162/ 6001676 :                     	endm
(2) 1139/ 6001676 : 6012                		mov	@r1,r0
(2) 1140/ 6001678 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600167A : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 600167C : C8FF                		tst	#$FF,r0
(2) 1143/ 600167E : 8900                		bt	.z_0
(2) 1144/ 6001680 : 303C                		add	r3,r0
(2) 1145/ 6001682 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001684 : C8FF                		tst	#$FF,r0
(2) 1147/ 6001686 : 8900                		bt	.z_1
(2) 1148/ 6001688 : 303C                		add	r3,r0
(2) 1149/ 600168A : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 600168C : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600168E : C8FF                		tst	#$FF,r0
(2) 1152/ 6001690 : 8900                		bt	.z_2
(2) 1153/ 6001692 : 303C                		add	r3,r0
(2) 1154/ 6001694 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 6001696 : C8FF                		tst	#$FF,r0
(2) 1156/ 6001698 : 8900                		bt	.z_3
(2) 1157/ 600169A : 303C                		add	r3,r0
(2) 1158/ 600169C :                     .z_3:
(2) 1159/ 600169C : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 600169E : 2202                		mov	r0,@r2
(2) 1161/ 60016A0 : 7204                		add	#4,r2
(2) 1139/ 60016A2 : 6012                		mov	@r1,r0
(2) 1140/ 60016A4 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 60016A6 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 60016A8 : C8FF                		tst	#$FF,r0
(2) 1143/ 60016AA : 8900                		bt	.z_0
(2) 1144/ 60016AC : 303C                		add	r3,r0
(2) 1145/ 60016AE : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 60016B0 : C8FF                		tst	#$FF,r0
(2) 1147/ 60016B2 : 8900                		bt	.z_1
(2) 1148/ 60016B4 : 303C                		add	r3,r0
(2) 1149/ 60016B6 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 60016B8 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 60016BA : C8FF                		tst	#$FF,r0
(2) 1152/ 60016BC : 8900                		bt	.z_2
(2) 1153/ 60016BE : 303C                		add	r3,r0
(2) 1154/ 60016C0 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 60016C2 : C8FF                		tst	#$FF,r0
(2) 1156/ 60016C4 : 8900                		bt	.z_3
(2) 1157/ 60016C6 : 303C                		add	r3,r0
(2) 1158/ 60016C8 :                     .z_3:
(2) 1159/ 60016C8 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 60016CA : 2202                		mov	r0,@r2
(2) 1161/ 60016CC : 7204                		add	#4,r2
(2) 1139/ 60016CE : 6012                		mov	@r1,r0
(2) 1140/ 60016D0 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 60016D2 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 60016D4 : C8FF                		tst	#$FF,r0
(2) 1143/ 60016D6 : 8900                		bt	.z_0
(2) 1144/ 60016D8 : 303C                		add	r3,r0
(2) 1145/ 60016DA : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 60016DC : C8FF                		tst	#$FF,r0
(2) 1147/ 60016DE : 8900                		bt	.z_1
(2) 1148/ 60016E0 : 303C                		add	r3,r0
(2) 1149/ 60016E2 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 60016E4 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 60016E6 : C8FF                		tst	#$FF,r0
(2) 1152/ 60016E8 : 8900                		bt	.z_2
(2) 1153/ 60016EA : 303C                		add	r3,r0
(2) 1154/ 60016EC : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 60016EE : C8FF                		tst	#$FF,r0
(2) 1156/ 60016F0 : 8900                		bt	.z_3
(2) 1157/ 60016F2 : 303C                		add	r3,r0
(2) 1158/ 60016F4 :                     .z_3:
(2) 1159/ 60016F4 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 60016F6 : 2202                		mov	r0,@r2
(2) 1161/ 60016F8 : 7204                		add	#4,r2
(2) 1139/ 60016FA : 6012                		mov	@r1,r0
(2) 1140/ 60016FC : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 60016FE : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001700 : C8FF                		tst	#$FF,r0
(2) 1143/ 6001702 : 8900                		bt	.z_0
(2) 1144/ 6001704 : 303C                		add	r3,r0
(2) 1145/ 6001706 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001708 : C8FF                		tst	#$FF,r0
(2) 1147/ 600170A : 8900                		bt	.z_1
(2) 1148/ 600170C : 303C                		add	r3,r0
(2) 1149/ 600170E : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 6001710 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 6001712 : C8FF                		tst	#$FF,r0
(2) 1152/ 6001714 : 8900                		bt	.z_2
(2) 1153/ 6001716 : 303C                		add	r3,r0
(2) 1154/ 6001718 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 600171A : C8FF                		tst	#$FF,r0
(2) 1156/ 600171C : 8900                		bt	.z_3
(2) 1157/ 600171E : 303C                		add	r3,r0
(2) 1158/ 6001720 :                     .z_3:
(2) 1159/ 6001720 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 6001722 : 2202                		mov	r0,@r2
(2) 1161/ 6001724 : 7204                		add	#4,r2
(2) 1163/ 6001726 : 021A                		sts	macl,r2
(2) 1164/ 6001728 :                     
(2) 1165/ 6001728 : 4410                		dt	r4
(2) 1166/ 600172A :                     ; 		bt	.end_line
(2) 1167/ 600172A :                     ; 		bra	.next_line
(2) 1168/ 600172A :                     ; 		nop
(2) 1169/ 600172A : 8F9F                		bf/s	.next_line
(2) 1170/ 600172C : 32BC                		add	r11,r2
(2) 1171/ 600172E :                     .end_line:
(2) 1172/ 600172E : 040A                		sts	mach,r4
(2) 1173/ 6001730 : 000B                		rts
(2) 1174/ 6001732 : 0009                		nop
(2) 1175/ 6001734 :                     		align 4
(2) 1176/ 6001734 :                     		ltorg
(2) 1177/ 6001734 :                     
(2) 1178/ 6001734 :                     ; ====================================================================
(2) 1179/ 6001734 :                     ; ----------------------------------------------------------------
(2) 1180/ 6001734 :                     ; Polygon rendering subroutines
(2) 1181/ 6001734 :                     ; ----------------------------------------------------------------
(2) 1182/ 6001734 :                     
(2) 1183/ 6001734 :                     ; ------------------------------------------------
(2) 1184/ 6001734 :                     ; MarsVideo_SlicePlgn
(2) 1185/ 6001734 :                     ;
(2) 1186/ 6001734 :                     ; This slices polygons into pieces.
(2) 1187/ 6001734 :                     ;
(2) 1188/ 6001734 :                     ; Input:
(2) 1189/ 6001734 :                     ; r14 | Polygon data to read
(2) 1190/ 6001734 :                     ; ------------------------------------------------
(2) 1191/ 6001734 :                     
(2) 1192/ 6001734 :                     		align 4
(2) 1193/ 6001734 :                     MarsVideo_SlicePlgn:
(2) 1194/ 6001734 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1195/ 6001736 : 6203                		mov	r0,r2
(2) 1196/ 6001738 : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1197/ 600173A : 3023                		cmp/ge	r2,r0
(2) 1198/ 600173C : 8BFA                		bf	MarsVideo_SlicePlgn
(2) 1199/ 600173E :                     
(2) 1200/ 600173E : 4F22                		sts	pr,@-r15
(2) 1201/ 6001740 : DD3E                		mov	#$C0000000|Cach_DDA_Last,r13		; r13 - DDA last point
(2) 1202/ 6001742 : DC3F                		mov	#$C0000000|Cach_DDA_Top,r12		; r12 - DDA first point
(2) 1203/ 6001744 : 50E0                		mov	@(plygn_type,r14),r0			; Read type settings ($F000 0000)
(2) 1204/ 6001746 : 4029                		shlr16	r0					; 0000 F000
(2) 1205/ 6001748 : 4019                		shlr8	r0					; 0000 00F0
(2) 1206/ 600174A : C840                		tst	#PLGN_TRI,r0				; PLGN_TRI set?
(2) 1207/ 600174C : 8B00                		bf	.tringl
(2) 1208/ 600174E : 7D08                		add	#8,r13					; If quad: add 8
(2) 1209/ 6001750 :                     .tringl:
(2) 1210/ 6001750 : 61E3                		mov	r14,r1
(2) 1211/ 6001752 : 62C3                		mov	r12,r2
(2) 1212/ 6001754 : D33B                		mov	#$C0000000|Cach_DDA_Src,r3
(2) 1213/ 6001756 : 7108                		add	#plygn_points,r1
(2) 1214/ 6001758 : 400A                		lds	r0,mach
(2) 1215/ 600175A : 0009                		nop
(2) 1216/ 600175C :                     
(2) 1217/ 600175C :                     	; ----------------------------------------
(2) 1218/ 600175C :                     	; Polygon points
(2) 1219/ 600175C :                     	; ----------------------------------------
(2) 1220/ 600175C :                     
(2) 1221/ 600175C : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1222/ 600175E : 4001                		shlr	r0
(2) 1223/ 6001760 : 6603                		mov	r0,r6
(2) 1224/ 6001762 : E804                		mov	#4,r8
(2) 1225/ 6001764 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1226/ 6001766 : 4001                		shlr	r0
(2) 1227/ 6001768 : 6703                		mov	r0,r7
(2) 1228/ 600176A : 0009                		nop
(2) 1229/ 600176C :                     .setpnts:
(2) 1230/ 600176C : 6416                		mov	@r1+,r4
(2) 1231/ 600176E : 346C                		add	r6,r4			; X + width
(2) 1232/ 6001770 : 6516                		mov	@r1+,r5
(2) 1233/ 6001772 : 357C                		add	r7,r5			; Y + height
(2) 1234/ 6001774 : 2242                		mov	r4,@r2
(2) 1235/ 6001776 : 0009                		nop
(2) 1236/ 6001778 : 1251                		mov	r5,@(4,r2)
(2) 1237/ 600177A : 4810                		dt	r8
(2) 1238/ 600177C : 8FF6                		bf/s	.setpnts
(2) 1239/ 600177E : 7208                		add	#8,r2
(2) 1240/ 6001780 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2) 1241/ 6001782 :                     .src_pnts:
(2) 1242/ 6001782 : 6416                		mov	@r1+,r4
(2) 1243/ 6001784 : 654D                		extu.w	r4,r5
(2) 1244/ 6001786 : 4429                		shlr16	r4
(2) 1245/ 6001788 : 644D                		extu.w	r4,r4
(2) 1246/ 600178A :                     ; 		mov.w	@r1+,r4
(2) 1247/ 600178A :                     ; 		mov.w	@r1+,r5
(2) 1248/ 600178A :                     ; 		extu.w	r4,r4
(2) 1249/ 600178A :                     ; 		extu.w	r5,r5
(2) 1250/ 600178A :                     
(2) 1251/ 600178A : 2342                		mov	r4,@r3
(2) 1252/ 600178C : 1351                		mov	r5,@(4,r3)
(2) 1253/ 600178E : 4810                		dt	r8
(2) 1254/ 6001790 : 8FF7                		bf/s	.src_pnts
(2) 1255/ 6001792 : 7308                		add	#8,r3
(2) 1256/ 6001794 :                     
(2) 1257/ 6001794 :                     	; Search for the lowest Y and highest Y
(2) 1258/ 6001794 :                     	; r10 - Top Y
(2) 1259/ 6001794 :                     	; r11 - Bottom Y
(2) 1260/ 6001794 : 000A                		sts	mach,r0
(2) 1261/ 6001796 :                     .start_math:
(2) 1262/ 6001796 : E903                		mov	#3,r9
(2) 1263/ 6001798 : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2) 1264/ 600179A : 8B00                		bf	.ytringl
(2) 1265/ 600179C : 7901                		add	#1,r9
(2) 1266/ 600179E :                     .ytringl:
(2) 1267/ 600179E : DA2A                		mov	#$7FFFFFFF,r10
(2) 1268/ 60017A0 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2) 1269/ 60017A2 : 67C3                		mov 	r12,r7
(2) 1270/ 60017A4 : 68C3                		mov	r12,r8
(2) 1271/ 60017A6 :                     .find_top:
(2) 1272/ 60017A6 : 5071                		mov	@(4,r7),r0
(2) 1273/ 60017A8 : 30B7                		cmp/gt	r11,r0
(2) 1274/ 60017AA : 8B00                		bf	.is_low
(2) 1275/ 60017AC : 6B03                		mov 	r0,r11
(2) 1276/ 60017AE :                     .is_low:
(2) 1277/ 60017AE : 5081                		mov	@(4,r8),r0
(2) 1278/ 60017B0 : 30A7                		cmp/gt	r10,r0
(2) 1279/ 60017B2 : 8901                		bt	.is_high
(2) 1280/ 60017B4 : 6A03                		mov 	r0,r10
(2) 1281/ 60017B6 : 6183                		mov	r8,r1
(2) 1282/ 60017B8 :                     .is_high:
(2) 1283/ 60017B8 : 7708                		add 	#8,r7
(2) 1284/ 60017BA : 4910                		dt	r9
(2) 1285/ 60017BC : 8FF3                		bf/s	.find_top
(2) 1286/ 60017BE : 7808                		add	#8,r8
(2) 1287/ 60017C0 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2) 1288/ 60017C2 : 8938                		bt	.exit
(2) 1289/ 60017C4 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2) 1290/ 60017C6 : 8B36                		bf	.exit
(2) 1291/ 60017C8 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; Top > 224?
(2) 1292/ 60017C8 :                     ; 		shll2	r0
(2) 1293/ 60017C8 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1294/ 60017CA : 3A03                		cmp/ge	r0,r10
(2) 1295/ 60017CC : 8933                		bt	.exit
(2) 1296/ 60017CE :                     
(2) 1297/ 60017CE :                     	; r2 - Left DDA READ pointer
(2) 1298/ 60017CE :                     	; r3 - Right DDA READ pointer
(2) 1299/ 60017CE :                     	; r4 - Left X
(2) 1300/ 60017CE :                     	; r5 - Left DX
(2) 1301/ 60017CE :                     	; r6 - Right X
(2) 1302/ 60017CE :                     	; r7 - Right DX
(2) 1303/ 60017CE :                     	; r8 - Left width
(2) 1304/ 60017CE :                     	; r9 - Right width
(2) 1305/ 60017CE :                     	; r10 - Top Y, updates after calling put_piece
(2) 1306/ 60017CE :                     	; r11 - Bottom Y
(2) 1307/ 60017CE :                     	; r12 - First DST point
(2) 1308/ 60017CE :                     	; r13 - Last DST point
(2) 1309/ 60017CE : 6213                		mov	r1,r2				; r2 - X left to process
(2) 1310/ 60017D0 : B042                		bsr	set_left
(2) 1311/ 60017D2 : 6313                		mov	r1,r3				; r3 - X right to process
(2) 1312/ 60017D4 : B084                		bsr	set_right
(2) 1313/ 60017D6 : 0009                		nop
(2) 1314/ 60017D8 :                     
(2) 1315/ 60017D8 :                     .next_pz:
(2) 1316/ 60017D8 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Current Y > 224?
(2) 1317/ 60017D8 :                     ; 		shll2	r0
(2) 1318/ 60017D8 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1319/ 60017DA : 3A07                		cmp/gt	r0,r10
(2) 1320/ 60017DC : 892B                		bt	.exit
(2) 1321/ 60017DE : 3AB3                		cmp/ge	r11,r10				; Y top >= Y bottom?
(2) 1322/ 60017E0 : 8929                		bt	.exit
(2) 1323/ 60017E2 :                     
(2) 1324/ 60017E2 : D11A                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r1
(2) 1325/ 60017E4 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1326/ 60017E6 : C90F                		and	#16-1,r0
(2) 1327/ 60017E8 : 4018                		shll8	r0
(2) 1328/ 60017EA : 4009                		shlr2	r0
(2) 1329/ 60017EC : 310C                		add	r0,r1
(2) 1330/ 60017EE : 5821                		mov	@(4,r2),r8
(2) 1331/ 60017F0 : 5931                		mov	@(4,r3),r9
(2) 1332/ 60017F2 : 38A8                		sub	r10,r8
(2) 1333/ 60017F4 : 39A8                		sub	r10,r9
(2) 1334/ 60017F6 : 6083                		mov	r8,r0
(2) 1335/ 60017F8 : 3983                		cmp/ge	r8,r9
(2) 1336/ 60017FA : 8900                		bt	.lefth
(2) 1337/ 60017FC : 6093                		mov	r9,r0
(2) 1338/ 60017FE :                     .lefth:
(2) 1339/ 60017FE : D014                		mov	#$C0000000|Cach_Bkup_SPZ,r0
(2) 1340/ 6001800 : 2026                		mov	r2,@-r0
(2) 1341/ 6001802 : 2036                		mov	r3,@-r0
(2) 1342/ 6001804 : 2056                		mov	r5,@-r0
(2) 1343/ 6001806 : 2076                		mov	r7,@-r0
(2) 1344/ 6001808 : 2086                		mov	r8,@-r0
(2) 1345/ 600180A : 2096                		mov	r9,@-r0
(2) 1346/ 600180C : 20B6                		mov	r11,@-r0
(2) 1347/ 600180E : B0AB                		bsr	put_piece
(2) 1348/ 6001810 : 0009                		nop
(2) 1349/ 6001812 : D010                		mov	#$C0000000|Cach_Bkup_LPZ,r0
(2) 1350/ 6001814 : 6B06                		mov	@r0+,r11
(2) 1351/ 6001816 : 6906                		mov	@r0+,r9
(2) 1352/ 6001818 : 6806                		mov	@r0+,r8
(2) 1353/ 600181A : 6706                		mov	@r0+,r7
(2) 1354/ 600181C : 6506                		mov	@r0+,r5
(2) 1355/ 600181E : 6306                		mov	@r0+,r3
(2) 1356/ 6001820 : 6206                		mov	@r0+,r2
(2) 1357/ 6001822 :                     	; X direction update
(2) 1358/ 6001822 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2) 1359/ 6001824 : 8B03                		bf	.lefth2
(2) 1360/ 6001826 : B05B                		bsr	set_right
(2) 1361/ 6001828 : 0009                		nop
(2) 1362/ 600182A : AFD5                		bra	.next_pz
(2) 1363/ 600182C : 0009                		nop
(2) 1364/ 600182E :                     .lefth2:
(2) 1365/ 600182E : B013                		bsr	set_left
(2) 1366/ 6001830 : 0009                		nop
(2) 1367/ 6001832 : AFD1                		bra	.next_pz
(2) 1368/ 6001834 : 0009                		nop
(2) 1369/ 6001836 :                     .exit:
(2) 1370/ 6001836 : 4F26                		lds	@r15+,pr
(2) 1371/ 6001838 : 000B                		rts
(2) 1372/ 600183A : 0009                		nop
(2) 1373/ 600183C :                     		align 4
(2) 1374/ 600183C : C000 0410 C000      		ltorg
          6001842 : 0400 C000 0420 
          6001848 : 7FFF FFFF C000 
          600184E : 0000 C000 04E0 
          6001854 : C000 04C4          
(2) 1375/ 6001858 :                     
(2) 1376/ 6001858 :                     		align 4
(2) 1377/ 6001858 :                     set_left:
(2) 1378/ 6001858 : 6823                		mov	r2,r8				; Get a copy of Xleft pointer
(2) 1379/ 600185A : 7820                		add	#$20,r8				; To read Texture SRC points
(2) 1380/ 600185C : 6482                		mov	@r8,r4
(2) 1381/ 600185E : 5581                		mov	@(4,r8),r5
(2) 1382/ 6001860 : D86E                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1383/ 6001862 : 6043                		mov	r4,r0
(2) 1384/ 6001864 : 4028                		shll16	r0
(2) 1385/ 6001866 : 2802                		mov	r0,@r8
(2) 1386/ 6001868 : 6053                		mov	r5,r0
(2) 1387/ 600186A : 4028                		shll16	r0
(2) 1388/ 600186C : 1802                		mov	r0,@(8,r8)
(2) 1389/ 600186E : 6122                		mov	@r2,r1
(2) 1390/ 6001870 : 5821                		mov	@(4,r2),r8
(2) 1391/ 6001872 : 7208                		add	#8,r2
(2) 1392/ 6001874 : 32D7                		cmp/gt	r13,r2
(2) 1393/ 6001876 : 8B00                		bf	.lft_ok
(2) 1394/ 6001878 : 62C3                		mov 	r12,r2
(2) 1395/ 600187A :                     .lft_ok:
(2) 1396/ 600187A : 5021                		mov	@(4,r2),r0
(2) 1397/ 600187C : 3088                		sub	r8,r0
(2) 1398/ 600187E : 8800                		cmp/eq	#0,r0
(2) 1399/ 6001880 : 89EA                		bt	set_left
(2) 1400/ 6001882 : 4011                		cmp/pz	r0
(2) 1401/ 6001884 : 8B29                		bf	.lft_skip
(2) 1402/ 6001886 : 400A                		lds	r0,mach
(2) 1403/ 6001888 : 6823                		mov	r2,r8
(2) 1404/ 600188A : 7820                		add	#$20,r8
(2) 1405/ 600188C : 6082                		mov 	@r8,r0
(2) 1406/ 600188E : 3048                		sub 	r4,r0
(2) 1407/ 6001890 : 5481                		mov 	@(4,r8),r4
(2) 1408/ 6001892 : 3458                		sub 	r5,r4
(2) 1409/ 6001894 :                     
(2) 1410/ 6001894 : 6503                		mov	r0,r5
(2) 1411/ 6001896 : 4418                		shll8	r4
(2) 1412/ 6001898 : 4518                		shll8	r5
(2) 1413/ 600189A : E001                		mov	#1,r0
(2) 1414/ 600189C : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1415/ 600189E : 080A                		sts	mach,r8
(2) 1416/ 60018A0 : 90CC                		mov	#_JR,r0
(2) 1417/ 60018A2 : 2082                		mov	r8,@r0
(2) 1418/ 60018A4 : 1051                		mov	r5,@(4,r0)
(2) 1419/ 60018A6 : 0009                		nop
(2) 1420/ 60018A8 :                     ; 		mov	@(4,r0),r5
(2) 1421/ 60018A8 : 5505                		mov 	@($14,r0),r5
(2) 1422/ 60018AA : 90C7                		mov	#_JR,r0
(2) 1423/ 60018AC : 2082                		mov	r8,@r0
(2) 1424/ 60018AE : 1041                		mov	r4,@(4,r0)
(2) 1425/ 60018B0 : 0009                		nop
(2) 1426/ 60018B2 :                     ; 		mov	@(4,r0),r4
(2) 1427/ 60018B2 : 5405                		mov 	@($14,r0),r4
(2) 1428/ 60018B4 : 4418                		shll8	r4
(2) 1429/ 60018B6 : 4518                		shll8	r5
(2) 1430/ 60018B8 : D059                		mov	#$C0000000|Cach_DDA_Src_L+$C,r0
(2) 1431/ 60018BA : 2042                		mov	r4,@r0
(2) 1432/ 60018BC : D059                		mov	#$C0000000|Cach_DDA_Src_L+4,r0
(2) 1433/ 60018BE : 2052                		mov	r5,@r0
(2) 1434/ 60018C0 : 6522                		mov	@r2,r5
(2) 1435/ 60018C2 : 3518                		sub 	r1,r5
(2) 1436/ 60018C4 : 6413                		mov 	r1,r4
(2) 1437/ 60018C6 : 4518                		shll8	r5
(2) 1438/ 60018C8 : 4428                		shll16	r4
(2) 1439/ 60018CA : 90B7                		mov	#_JR,r0
(2) 1440/ 60018CC : 2082                		mov	r8,@r0
(2) 1441/ 60018CE : 1051                		mov	r5,@(4,r0)
(2) 1442/ 60018D0 : 0009                		nop
(2) 1443/ 60018D2 :                     ; 		mov	@(4,r0),r5
(2) 1444/ 60018D2 : 5505                		mov 	@($14,r0),r5
(2) 1445/ 60018D4 : 4518                		shll8	r5
(2) 1446/ 60018D6 : E000                		mov	#0,r0
(2) 1447/ 60018D8 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1448/ 60018DA :                     .lft_skip:
(2) 1449/ 60018DA : 000B                		rts
(2) 1450/ 60018DC : 0009                		nop
(2) 1451/ 60018DE :                     		align 4
(2) 1452/ 60018E0 :                     
(2) 1453/ 60018E0 :                     ; --------------------------------------------------------
(2) 1454/ 60018E0 :                     
(2) 1455/ 60018E0 :                     set_right:
(2) 1456/ 60018E0 : 6933                		mov	r3,r9
(2) 1457/ 60018E2 : 7920                		add	#$20,r9
(2) 1458/ 60018E4 : 6692                		mov	@r9,r6
(2) 1459/ 60018E6 : 5791                		mov	@(4,r9),r7
(2) 1460/ 60018E8 : D94F                		mov	#$C0000000|Cach_DDA_Src_R,r9
(2) 1461/ 60018EA : 6063                		mov	r6,r0
(2) 1462/ 60018EC : 4028                		shll16	r0
(2) 1463/ 60018EE : 2902                		mov	r0,@r9
(2) 1464/ 60018F0 : 6073                		mov	r7,r0
(2) 1465/ 60018F2 : 4028                		shll16	r0
(2) 1466/ 60018F4 : 1902                		mov	r0,@(8,r9)
(2) 1467/ 60018F6 :                     
(2) 1468/ 60018F6 : 6132                		mov	@r3,r1
(2) 1469/ 60018F8 : 5931                		mov	@(4,r3),r9
(2) 1470/ 60018FA : 73F8                		add	#-8,r3
(2) 1471/ 60018FC : 33C3                		cmp/ge	r12,r3
(2) 1472/ 60018FE : 8900                		bt	.rgt_ok
(2) 1473/ 6001900 : 63D3                		mov 	r13,r3
(2) 1474/ 6001902 :                     .rgt_ok:
(2) 1475/ 6001902 : 5031                		mov	@(4,r3),r0
(2) 1476/ 6001904 : 3098                		sub	r9,r0
(2) 1477/ 6001906 : 8800                		cmp/eq	#0,r0
(2) 1478/ 6001908 : 89EA                		bt	set_right
(2) 1479/ 600190A : 4011                		cmp/pz	r0
(2) 1480/ 600190C : 8B29                		bf	.rgt_skip
(2) 1481/ 600190E : 400A                		lds	r0,mach
(2) 1482/ 6001910 : 6933                		mov	r3,r9
(2) 1483/ 6001912 : 7920                		add	#$20,r9
(2) 1484/ 6001914 : 6092                		mov 	@r9,r0
(2) 1485/ 6001916 : 3068                		sub 	r6,r0
(2) 1486/ 6001918 : 5691                		mov 	@(4,r9),r6
(2) 1487/ 600191A : 3678                		sub 	r7,r6
(2) 1488/ 600191C : 6703                		mov	r0,r7
(2) 1489/ 600191E : 4618                		shll8	r6
(2) 1490/ 6001920 : 4718                		shll8	r7
(2) 1491/ 6001922 : E001                		mov	#1,r0
(2) 1492/ 6001924 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1493/ 6001926 : 090A                		sts	mach,r9
(2) 1494/ 6001928 : 9088                		mov	#_JR,r0
(2) 1495/ 600192A : 2092                		mov	r9,@r0
(2) 1496/ 600192C : 1071                		mov	r7,@(4,r0)
(2) 1497/ 600192E : 0009                		nop
(2) 1498/ 6001930 :                     ; 		mov	@(4,r0),r7
(2) 1499/ 6001930 : 5705                		mov 	@($14,r0),r7
(2) 1500/ 6001932 : 9083                		mov	#_JR,r0
(2) 1501/ 6001934 : 2092                		mov	r9,@r0
(2) 1502/ 6001936 : 1061                		mov	r6,@(4,r0)
(2) 1503/ 6001938 : 0009                		nop
(2) 1504/ 600193A :                     ; 		mov	@(4,r0),r6
(2) 1505/ 600193A : 5605                		mov 	@($14,r0),r6
(2) 1506/ 600193C : 4618                		shll8	r6
(2) 1507/ 600193E : 4718                		shll8	r7
(2) 1508/ 6001940 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+4,r0
(2) 1509/ 6001942 : 2072                		mov	r7,@r0
(2) 1510/ 6001944 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+$C,r0
(2) 1511/ 6001946 : 2062                		mov	r6,@r0
(2) 1512/ 6001948 : 6732                		mov	@r3,r7
(2) 1513/ 600194A : 3718                		sub 	r1,r7
(2) 1514/ 600194C : 6613                		mov 	r1,r6
(2) 1515/ 600194E : 4628                		shll16	r6
(2) 1516/ 6001950 : 4718                		shll8	r7
(2) 1517/ 6001952 : 9073                		mov	#_JR,r0
(2) 1518/ 6001954 : 2092                		mov	r9,@r0
(2) 1519/ 6001956 : 1071                		mov	r7,@(4,r0)
(2) 1520/ 6001958 : 0009                		nop
(2) 1521/ 600195A :                     ; 		mov	@(4,r0),r7
(2) 1522/ 600195A : 5705                		mov 	@($14,r0),r7
(2) 1523/ 600195C : 4718                		shll8	r7
(2) 1524/ 600195E : E000                		mov	#0,r0
(2) 1525/ 6001960 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1526/ 6001962 :                     .rgt_skip:
(2) 1527/ 6001962 : 000B                		rts
(2) 1528/ 6001964 : 0009                		nop
(2) 1529/ 6001966 :                     		align 4
(2) 1530/ 6001968 :                     
(2) 1531/ 6001968 :                     ; --------------------------------------------------------
(2) 1532/ 6001968 :                     
(2) 1533/ 6001968 :                     	; r2
(2) 1534/ 6001968 :                     	; r3
(2) 1535/ 6001968 :                     	; r4 - Left X
(2) 1536/ 6001968 :                     	; r5
(2) 1537/ 6001968 :                     	; r6 - Right X
(2) 1538/ 6001968 :                     	; r7
(2) 1539/ 6001968 :                     	; r8
(2) 1540/ 6001968 :                     	; r9
(2) 1541/ 6001968 :                     	; r10 - Top Y, gets updated after calling put_piece
(2) 1542/ 6001968 :                     
(2) 1543/ 6001968 :                     put_piece:
(2) 1544/ 6001968 : E001                		mov	#1,r0
(2) 1545/ 600196A : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Tell watchdog we are mid-write
(2) 1546/ 600196C : 5821                		mov	@(4,r2),r8			; Left DDA's Y
(2) 1547/ 600196E : 5931                		mov	@(4,r3),r9			; Right DDA's Y
(2) 1548/ 6001970 : 38A8                		sub	r10,r8
(2) 1549/ 6001972 : 39A8                		sub	r10,r9
(2) 1550/ 6001974 : 3897                		cmp/gt	r9,r8
(2) 1551/ 6001976 : 8900                		bt	.lefth
(2) 1552/ 6001978 : 6983                		mov	r8,r9
(2) 1553/ 600197A :                     .lefth:
(2) 1554/ 600197A : 6843                		mov	r4,r8
(2) 1555/ 600197C : 6063                		mov	r6,r0
(2) 1556/ 600197E : 4829                		shlr16	r8
(2) 1557/ 6001980 : 208D                		xtrct	r8,r0
(2) 1558/ 6001982 : 1103                		mov	r0,@(plypz_xl,r1)
(2) 1559/ 6001984 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2) 1560/ 6001986 : 0597                		mul	r9,r5
(2) 1561/ 6001988 : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2) 1562/ 600198A : 021A                		sts	macl,r2
(2) 1563/ 600198C : 0797                		mul	r9,r7
(2) 1564/ 600198E : 031A                		sts	macl,r3
(2) 1565/ 6001990 : 342C                		add 	r2,r4
(2) 1566/ 6001992 : 363C                		add	r3,r6
(2) 1567/ 6001994 : 62A3                		mov	r10,r2
(2) 1568/ 6001996 : 3A9C                		add	r9,r10
(2) 1569/ 6001998 : 6BA3                		mov	r10,r11
(2) 1570/ 600199A : 4228                		shll16	r2
(2) 1571/ 600199C : 2B2B                		or	r2,r11
(2) 1572/ 600199E : 11B2                		mov	r11,@(plypz_ytb,r1)
(2) 1573/ 60019A0 :                     
(2) 1574/ 60019A0 :                     	; r9 - Y multiply
(2) 1575/ 60019A0 :                     	;
(2) 1576/ 60019A0 :                     	; free:
(2) 1577/ 60019A0 :                     	; r2,r3,r5,r7,r8,r11
(2) 1578/ 60019A0 : D824                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1579/ 60019A2 : D725                		mov	#$C0000000|Cach_DDA_Src_R,r7
(2) 1580/ 60019A4 : 6282                		mov	@r8,r2
(2) 1581/ 60019A6 : 6372                		mov	@r7,r3
(2) 1582/ 60019A8 : 6523                		mov	r2,r5
(2) 1583/ 60019AA : 6033                		mov	r3,r0
(2) 1584/ 60019AC : 4529                		shlr16	r5
(2) 1585/ 60019AE : 205D                		xtrct	r5,r0
(2) 1586/ 60019B0 : 1104                		mov	r0,@(plypz_src_xl,r1)
(2) 1587/ 60019B2 :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2) 1588/ 60019B2 :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2) 1589/ 60019B2 :                     
(2) 1590/ 60019B2 : 5081                		mov	@(4,r8),r0
(2) 1591/ 60019B4 : 5571                		mov	@(4,r7),r5
(2) 1592/ 60019B6 : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2) 1593/ 60019B8 : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2) 1594/ 60019BA : 0097                		mul	r9,r0
(2) 1595/ 60019BC : 001A                		sts	macl,r0
(2) 1596/ 60019BE : 0597                		mul	r9,r5
(2) 1597/ 60019C0 : 051A                		sts	macl,r5
(2) 1598/ 60019C2 : 320C                		add 	r0,r2
(2) 1599/ 60019C4 : 335C                		add	r5,r3
(2) 1600/ 60019C6 : 2822                		mov	r2,@r8
(2) 1601/ 60019C8 : 2732                		mov	r3,@r7
(2) 1602/ 60019CA : 7808                		add	#8,r8	; Go to Y/DY
(2) 1603/ 60019CC : 7708                		add	#8,r7
(2) 1604/ 60019CE : 6282                		mov	@r8,r2
(2) 1605/ 60019D0 : 6372                		mov	@r7,r3
(2) 1606/ 60019D2 : 6523                		mov	r2,r5
(2) 1607/ 60019D4 : 6033                		mov	r3,r0
(2) 1608/ 60019D6 : 4529                		shlr16	r5
(2) 1609/ 60019D8 : 205D                		xtrct	r5,r0
(2) 1610/ 60019DA : 1105                		mov	r0,@(plypz_src_yl,r1)
(2) 1611/ 60019DC :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2) 1612/ 60019DC :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2) 1613/ 60019DC :                     
(2) 1614/ 60019DC : 5081                		mov	@(4,r8),r0
(2) 1615/ 60019DE : 5571                		mov	@(4,r7),r5
(2) 1616/ 60019E0 : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2) 1617/ 60019E2 : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2) 1618/ 60019E4 : 0097                		mul	r9,r0
(2) 1619/ 60019E6 : 001A                		sts	macl,r0
(2) 1620/ 60019E8 : 0597                		mul	r9,r5
(2) 1621/ 60019EA : 051A                		sts	macl,r5
(2) 1622/ 60019EC : 320C                		add 	r0,r2
(2) 1623/ 60019EE : 335C                		add	r5,r3
(2) 1624/ 60019F0 : 2822                		mov	r2,@r8
(2) 1625/ 60019F2 : 2732                		mov	r3,@r7
(2) 1626/ 60019F4 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2) 1627/ 60019F6 : 8902                		bt	.top_neg
(2) 1628/ 60019F8 : 4B28                		shll16	r11
(2) 1629/ 60019FA : 4B15                		cmp/pl	r11
(2) 1630/ 60019FC : 8B09                		bf	.bad_piece
(2) 1631/ 60019FE :                     .top_neg:
(2) 1632/ 60019FE : 50E1                		mov	@(plygn_mtrl,r14),r0
(2) 1633/ 6001A00 : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2) 1634/ 6001A02 : 50E0                		mov	@(plygn_type,r14),r0
(2) 1635/ 6001A04 : 1100                		mov 	r0,@(plypz_type,r1)
(2) 1636/ 6001A06 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1637/ 6001A08 : 7001                		add	#1,r0
(2) 1638/ 6001A0A : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(2) 1639/ 6001A0C : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2) 1640/ 6001A0E : 7001                		add	#1,r0
(2) 1641/ 6001A10 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 1642/ 6001A12 :                     .bad_piece:
(2) 1643/ 6001A12 : E000                		mov	#0,r0
(2) 1644/ 6001A14 : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Unlock.
(2) 1645/ 6001A16 : 000B                		rts
(2) 1646/ 6001A18 : 0009                		nop
(2) 1647/ 6001A1A :                     		align 4
(2) 1648/ 6001A1C : C000 0440 C000      		ltorg
          6001A22 : 044C C000 0444 
          6001A28 : C000 0450 C000 
          6001A2E : 0454 C000 045C 
          6001A34 : C000 0440 C000 
          6001A3A : 0450 FF00          
(2) 1649/ 6001A3E :                     
(2) 1650/ 6001A3E :                     ; =================================================================
(2) 1651/ 6001A3E :                     ; ------------------------------------------------
(2) 1652/ 6001A3E :                     ; WATCHDOG INTERRUPT
(2) 1653/ 6001A3E :                     ; ------------------------------------------------
(2) 1654/ 6001A3E :                     
(2) 1655/ 6001A3E :                     		align 4
(2) 1656/ 6001A40 :                     m_irq_wdg:
(2) 1657/ 6001A40 : 91A8                		mov	#_FRT,r1
(2) 1658/ 6001A42 : 8417                		mov.b	@(7,r1),r0
(2) 1659/ 6001A44 : CA02                		xor	#2,r0
(2) 1660/ 6001A46 : 8017                		mov.b	r0,@(7,r1)
(2) 1661/ 6001A48 : C503                		mov.w	@(marsGbl_WdgHold,gbr),r0
(2) 1662/ 6001A4A : 2008                		tst	r0,r0
(2) 1663/ 6001A4C : 8B16                		bf	.exit_wdg
(2) 1664/ 6001A4E :                     ; ------------------------------------------------
(2) 1665/ 6001A4E :                     
(2) 1666/ 6001A4E : C502                		mov.w	@(marsGbl_WdgTask,gbr),r0
(2) 1667/ 6001A50 : 8807                		cmp/eq	#7,r0
(2) 1668/ 6001A52 : 8B1B                		bf	.wdg_main
(2) 1669/ 6001A54 :                     
(2) 1670/ 6001A54 :                     ; ------------------------------------------------
(2) 1671/ 6001A54 :                     ; Special...
(2) 1672/ 6001A54 : D14B                		mov	#_vdpreg,r1
(2) 1673/ 6001A56 : 8515                .wait_fb:	mov.w   @($0A,r1),r0			; Framebuffer locked?
(2) 1674/ 6001A58 : C802                		tst     #%10,r0
(2) 1675/ 6001A5A : 8BFC                		bf      .wait_fb
(2) 1676/ 6001A5C : 8513                		mov.w   @(6,r1),r0			; SVDP-fill address
(2) 1677/ 6001A5E : 705F                		add     #$5F,r0				; Pre-increment
(2) 1678/ 6001A60 : 8113                		mov.w   r0,@(6,r1)
(2) 1679/ 6001A62 : 9098                		mov.w   #320/2,r0			; SVDP-fill size (320+ pixels)
(2) 1680/ 6001A64 : 8112                		mov.w   r0,@(4,r1)
(2) 1681/ 6001A66 : E000                		mov.w	#$0000,r0			; SVDP-fill pixel data
(2) 1682/ 6001A68 :                     ; 		mov.w	#$1000,r0
(2) 1683/ 6001A68 : 8114                		mov.w   r0,@(8,r1)			; now SVDP-fill is working.
(2) 1684/ 6001A6A : C507                		mov.w	@(marsGbl_WdgClLines,gbr),r0	; Decrement a line to progress
(2) 1685/ 6001A6C : 4010                		dt	r0
(2) 1686/ 6001A6E : 8F05                		bf/s	.exit_wdg
(2) 1687/ 6001A70 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)	; Write new value before branch
(2) 1688/ 6001A72 : E005                		mov	#5,r0				; Set watchdog task $05
(2) 1689/ 6001A74 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1690/ 6001A76 :                     .on_clr:
(2) 1691/ 6001A76 : 000B                		rts
(2) 1692/ 6001A78 : 0009                		nop
(2) 1693/ 6001A7A :                     		align 4
(2) 1694/ 6001A7C :                     .exit_wdg:
(2) 1695/ 6001A7C : 918C                		mov.w   #$FE80,r1
(2) 1696/ 6001A7E : 908C                		mov.w   #$A518,r0		; OFF
(2) 1697/ 6001A80 : 2101                		mov.w   r0,@r1
(2) 1698/ 6001A82 : CB20                		or      #$20,r0			; ON
(2) 1699/ 6001A84 : 2101                		mov.w   r0,@r1
(2) 1700/ 6001A86 : 9089                		mov.w   #$5A20,r0		; Wdg-timer: $20
(2) 1701/ 6001A88 : 000B                		rts
(2) 1702/ 6001A8A : 2101                		mov.w   r0,@r1
(2) 1703/ 6001A8C :                     		align 4
(2) 1704/ 6001A8C :                     
(2) 1705/ 6001A8C :                     ; ------------------------------------------------
(2) 1706/ 6001A8C :                     ; Process drawing now.
(2) 1707/ 6001A8C :                     .wdg_main:
(2) 1708/ 6001A8C : 4008                		shll2	r0
(2) 1709/ 6001A8E : D13E                		mov	#.list,r1
(2) 1710/ 6001A90 : 001E                		mov	@(r1,r0),r0
(2) 1711/ 6001A92 : 402B                		jmp	@r0
(2) 1712/ 6001A94 : 0009                		nop
(2) 1713/ 6001A96 :                     		align 4
(2) 1714/ 6001A98 :                     .list:
(2) 1715/ 6001A98 : 0600 1DF8           		dc.l slvplgn_00		; NULL task, exit.
(2) 1716/ 6001A9C : 0600 1AB8           		dc.l slvplgn_01		; 2D SVDP fast write
(2) 1717/ 6001AA0 : 0600 1DF8           		dc.l slvplgn_00
(2) 1718/ 6001AA4 : 0600 1DF8           		dc.l slvplgn_00
(2) 1719/ 6001AA8 : 0600 1DF8           		dc.l slvplgn_00		; $04 -
(2) 1720/ 6001AAC : 0600 1B00           		dc.l slvplgn_05		; Main drawing routine
(2) 1721/ 6001AB0 : 0600 1ABE           		dc.l slvplgn_06		; Resume from solid color
(2) 1722/ 6001AB4 : 0600 1DF8           		dc.l slvplgn_00		; ***
(2) 1723/ 6001AB8 :                     
(2) 1724/ 6001AB8 :                     ; ------------------------------------------------
(2) 1725/ 6001AB8 :                     ; 2D MODE
(2) 1726/ 6001AB8 :                     ; ------------------------------------------------
(2) 1727/ 6001AB8 :                     
(2) 1728/ 6001AB8 :                     slvplgn_01:
(2) 1729/ 6001AB8 : 2F26                		mov	r2,@-r15
(2) 1730/ 6001ABA :                     ; 		mov	r3,@-r15
(2) 1731/ 6001ABA :                     ; 		mov	r4,@-r15
(2) 1732/ 6001ABA :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(2) 1733/ 6001ABA :                     ; 		mov	r0,r1
(2) 1734/ 6001ABA :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1735/ 6001ABA :                     ; 		cmp/eq	r1,r0
(2) 1736/ 6001ABA :                     ; 		bt	.no_finish
(2) 1737/ 6001ABA :                     ; 		and	#%111111,r0
(2) 1738/ 6001ABA :                     ; 		shll2	r0
(2) 1739/ 6001ABA :                     ; 		shll	r0
(2) 1740/ 6001ABA :                     ; 		mov	#$C0000000|RAM_Mars_SVdpDrwList,r4
(2) 1741/ 6001ABA :                     ; 		mov	#_framebuffer,r3
(2) 1742/ 6001ABA :                     ; 		add	r0,r4
(2) 1743/ 6001ABA :                     ; 		mov	@r4+,r1		; Dest
(2) 1744/ 6001ABA :                     ; 		mov	@r4+,r2		; Data
(2) 1745/ 6001ABA :                     ; 		add	r3,r1
(2) 1746/ 6001ABA :                     ; 		mov	r2,@r1		; <--
(2) 1747/ 6001ABA :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1748/ 6001ABA :                     ; 		add	#1,r0
(2) 1749/ 6001ABA :                     ; 		mov.w	r0,@(marsGbl_SVdpQRead,gbr)
(2) 1750/ 6001ABA :                     ; .no_finish:
(2) 1751/ 6001ABA :                     ; 		mov	#CS3+$40,r1
(2) 1752/ 6001ABA :                     ; 		mov	@r1,r0
(2) 1753/ 6001ABA :                     ; 		add	#1,r0
(2) 1754/ 6001ABA :                     ; 		mov	r0,@r1
(2) 1755/ 6001ABA :                     ; .no_queue:
(2) 1756/ 6001ABA :                     ; 		mov	@r15+,r4
(2) 1757/ 6001ABA :                     ; 		mov	@r15+,r3
(2) 1758/ 6001ABA : A1B0                		bra	drwtask_exit
(2) 1759/ 6001ABC : E220                		mov	#$20,r2
(2) 1760/ 6001ABE :                     
(2) 1761/ 6001ABE :                     ; ------------------------------------------------
(2) 1762/ 6001ABE :                     ; Task $06
(2) 1763/ 6001ABE :                     ;
(2) 1764/ 6001ABE :                     ; Resume from solid color
(2) 1765/ 6001ABE :                     ; ------------------------------------------------
(2) 1766/ 6001ABE :                     
(2) 1767/ 6001ABE :                     slvplgn_06:
(2) 1768/ 6001ABE : 2F26                		mov	r2,@-r15
(2) 1769/ 6001AC0 : 2F36                		mov	r3,@-r15
(2) 1770/ 6001AC2 : 2F46                		mov	r4,@-r15
(2) 1771/ 6001AC4 : 2F56                		mov	r5,@-r15
(2) 1772/ 6001AC6 : 2F66                		mov	r6,@-r15
(2) 1773/ 6001AC8 : 2F76                		mov	r7,@-r15
(2) 1774/ 6001ACA : 2F86                		mov	r8,@-r15
(2) 1775/ 6001ACC : 2F96                		mov	r9,@-r15
(2) 1776/ 6001ACE : 2FA6                		mov	r10,@-r15
(2) 1777/ 6001AD0 : 2FB6                		mov	r11,@-r15
(2) 1778/ 6001AD2 : 2FC6                		mov	r12,@-r15
(2) 1779/ 6001AD4 : 2FD6                		mov	r13,@-r15
(2) 1780/ 6001AD6 : 2FE6                		mov	r14,@-r15
(2) 1781/ 6001AD8 : 4F12                		sts	macl,@-r15
(2) 1782/ 6001ADA : 4F02                		sts	mach,@-r15
(2) 1783/ 6001ADC : D02B                		mov	#$C0000000|Cach_LnDrw_L,r0
(2) 1784/ 6001ADE : 6E06                		mov	@r0+,r14
(2) 1785/ 6001AE0 : 6D06                		mov	@r0+,r13
(2) 1786/ 6001AE2 : 6C06                		mov	@r0+,r12
(2) 1787/ 6001AE4 : 6B06                		mov	@r0+,r11
(2) 1788/ 6001AE6 : 6A06                		mov	@r0+,r10
(2) 1789/ 6001AE8 : 6906                		mov	@r0+,r9
(2) 1790/ 6001AEA : 6806                		mov	@r0+,r8
(2) 1791/ 6001AEC : 6706                		mov	@r0+,r7
(2) 1792/ 6001AEE : 6606                		mov	@r0+,r6
(2) 1793/ 6001AF0 : 6506                		mov	@r0+,r5
(2) 1794/ 6001AF2 : 6406                		mov	@r0+,r4
(2) 1795/ 6001AF4 : 6306                		mov	@r0+,r3
(2) 1796/ 6001AF6 : 6206                		mov	@r0+,r2
(2) 1797/ 6001AF8 : 6106                		mov	@r0+,r1
(2) 1798/ 6001AFA : E005                		mov	#5,r0
(2) 1799/ 6001AFC : A16C                		bra	drwsld_updline
(2) 1800/ 6001AFE : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)	; Set task $05
(2) 1801/ 6001B00 :                     
(2) 1802/ 6001B00 :                     ; ------------------------------------------------
(2) 1803/ 6001B00 :                     ; Task $05
(2) 1804/ 6001B00 :                     ;
(2) 1805/ 6001B00 :                     ; Draw polygon piece
(2) 1806/ 6001B00 :                     ; ------------------------------------------------
(2) 1807/ 6001B00 :                     
(2) 1808/ 6001B00 :                     slvplgn_05:
(2) 1809/ 6001B00 : 2F26                		mov	r2,@-r15
(2) 1810/ 6001B02 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces to draw?
(2) 1811/ 6001B04 : 4015                		cmp/pl	r0
(2) 1812/ 6001B06 : 8907                		bt	.has_pz
(2) 1813/ 6001B08 : C505                		mov.w	@(marsGbl_WdgReady,gbr),r0	; Finished slicing?
(2) 1814/ 6001B0A : 2008                		tst	r0,r0
(2) 1815/ 6001B0C : 8901                		bt	.exit
(2) 1816/ 6001B0E : E000                		mov	#0,r0				; Watchdog out.
(2) 1817/ 6001B10 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1818/ 6001B12 : A184                .exit:		bra	drwtask_exit
(2) 1819/ 6001B14 : E220                		mov	#$20,r2				; Wdg-timer: $20
(2) 1820/ 6001B16 :                     		align 4
(2) 1821/ 6001B18 :                     .has_pz:
(2) 1822/ 6001B18 : 2F36                		mov	r3,@-r15			; Save all these regs
(2) 1823/ 6001B1A : 2F46                		mov	r4,@-r15
(2) 1824/ 6001B1C : 2F56                		mov	r5,@-r15
(2) 1825/ 6001B1E : 2F66                		mov	r6,@-r15
(2) 1826/ 6001B20 : 2F76                		mov	r7,@-r15
(2) 1827/ 6001B22 : 2F86                		mov	r8,@-r15
(2) 1828/ 6001B24 : 2F96                		mov	r9,@-r15
(2) 1829/ 6001B26 : 2FA6                		mov	r10,@-r15
(2) 1830/ 6001B28 : 2FB6                		mov	r11,@-r15
(2) 1831/ 6001B2A : 2FC6                		mov	r12,@-r15
(2) 1832/ 6001B2C : 2FD6                		mov	r13,@-r15
(2) 1833/ 6001B2E : 2FE6                		mov	r14,@-r15
(2) 1834/ 6001B30 : 4F12                		sts	macl,@-r15
(2) 1835/ 6001B32 : 4F02                		sts	mach,@-r15
(2) 1836/ 6001B34 :                     drwtsk1_newpz:
(2) 1837/ 6001B34 : DE16                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r14
(2) 1838/ 6001B36 : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1839/ 6001B38 : C90F                		and	#16-1,r0
(2) 1840/ 6001B3A : 4018                		shll8	r0
(2) 1841/ 6001B3C : 4009                		shlr2	r0
(2) 1842/ 6001B3E : 3E0C                		add	r0,r14
(2) 1843/ 6001B40 : 59E2                		mov	@(plypz_ytb,r14),r9	; Start grabbing StartY/EndY positions
(2) 1844/ 6001B42 : 6A9F                		exts.w	r9,r10			; r10 - Bottom
(2) 1845/ 6001B44 : 4929                		shlr16	r9			;  r9 - Top
(2) 1846/ 6001B46 : 699F                		exts.w	r9,r9
(2) 1847/ 6001B48 : 3A90                		cmp/eq	r9,r10			; if Top == Bottom, exit
(2) 1848/ 6001B4A : 8908                		bt	.invld_y
(2) 1849/ 6001B4C :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; if Top > 224, skip
(2) 1850/ 6001B4C :                     ; 		shll2	r0
(2) 1851/ 6001B4C : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1852/ 6001B4E : 3903                		cmp/ge	r0,r9
(2) 1853/ 6001B50 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2) 1854/ 6001B52 : 3A07                		cmp/gt	r0,r10
(2) 1855/ 6001B54 : 8B00                		bf	.len_max
(2) 1856/ 6001B56 : 6A03                		mov	r0,r10
(2) 1857/ 6001B58 :                     .len_max:
(2) 1858/ 6001B58 : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2) 1859/ 6001B5A : 4A15                		cmp/pl	r10
(2) 1860/ 6001B5C : 8904                		bt	.valid_y
(2) 1861/ 6001B5E :                     .invld_y:
(2) 1862/ 6001B5E : A140                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2) 1863/ 6001B60 : 0009                		nop
(2) 1864/ 6001B62 :                     		align 4
(2) 1865/ 6001B64 :                     .no_pz:
(2) 1866/ 6001B64 : A15B                		bra	drwtask_exit
(2) 1867/ 6001B66 : E210                		mov	#$10,r2
(2) 1868/ 6001B68 :                     		align 4
(2) 1869/ 6001B68 :                     .valid_y:
(2) 1870/ 6001B68 : 51E3                		mov	@(plypz_xl,r14),r1
(2) 1871/ 6001B6A : 6313                		mov	r1,r3
(2) 1872/ 6001B6C : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2) 1873/ 6001B6E : 4129                		shlr16	r1
(2) 1874/ 6001B70 : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2) 1875/ 6001B72 : 4128                		shll16	r1
(2) 1876/ 6001B74 : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2) 1877/ 6001B76 : 4328                		shll16	r3
(2) 1878/ 6001B78 : 4029                		shlr16	r0
(2) 1879/ 6001B7A : 4019                		shlr8	r0
(2) 1880/ 6001B7C : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2) 1881/ 6001B7E : 8B13                 		bf	drwtsk_texmode
(2) 1882/ 6001B80 : A0D4                		bra	drwtsk_solidmode
(2) 1883/ 6001B82 : 0009                		nop
(2) 1884/ 6001B84 :                     		align 4
(2) 1885/ 6001B84 : 2000 4100 0600      		ltorg
          6001B8A : 1A98 C000 0460 
          6001B90 : C000 0000 FE10 
          6001B96 : 00A0 FE80 A518 
          6001B9C : 5A20             
(2) 1886/ 6001B9E :                     
(2) 1887/ 6001B9E :                     ; ------------------------------------
(2) 1888/ 6001B9E :                     ; Texture mode
(2) 1889/ 6001B9E :                     ;
(2) 1890/ 6001B9E :                     ; r1  - XL
(2) 1891/ 6001B9E :                     ; r2  - XL DX
(2) 1892/ 6001B9E :                     ; r3  - XR
(2) 1893/ 6001B9E :                     ; r4  - XR DX
(2) 1894/ 6001B9E :                     ; r5  - SRC XL
(2) 1895/ 6001B9E :                     ; r6  - SRC XR
(2) 1896/ 6001B9E :                     ; r7  - SRC YL
(2) 1897/ 6001B9E :                     ; r8  - SRC YR
(2) 1898/ 6001B9E :                     ; r9  - Y current
(2) 1899/ 6001B9E :                     ; r10  - Number of lines
(2) 1900/ 6001B9E :                     ; ------------------------------------
(2) 1901/ 6001B9E :                     
(2) 1902/ 6001B9E :                     		align 4
(2) 1903/ 6001BA0 :                     go_drwsld_updline_tex:
(2) 1904/ 6001BA0 : A0A8                		bra	drwsld_updline_tex
(2) 1905/ 6001BA2 : 0009                		nop
(2) 1906/ 6001BA4 :                     go_drwtex_gonxtpz:
(2) 1907/ 6001BA4 : A11D                		bra	drwsld_nextpz
(2) 1908/ 6001BA6 : 0009                		nop
(2) 1909/ 6001BA8 :                     		align 4
(2) 1910/ 6001BA8 :                     drwtsk_texmode:
(2) 1911/ 6001BA8 : C504                		mov.w	@(marsGbl_WdgDivLock,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2) 1912/ 6001BAA : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2) 1913/ 6001BAC : 8B02                		bf	.tex_valid
(2) 1914/ 6001BAE : A128                		bra	drwtask_return
(2) 1915/ 6001BB0 : E210                		mov	#$10,r2				; Exit Wdg-timer: $10 (comeback quickly)
(2) 1916/ 6001BB2 :                     		align 4
(2) 1917/ 6001BB4 :                     .tex_valid:
(2) 1918/ 6001BB4 : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2) 1919/ 6001BB6 : 6653                		mov	r5,r6
(2) 1920/ 6001BB8 : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2) 1921/ 6001BBA : 4529                		shlr16	r5
(2) 1922/ 6001BBC : 6873                		mov	r7,r8
(2) 1923/ 6001BBE : 4729                		shlr16	r7
(2) 1924/ 6001BC0 :                     
(2) 1925/ 6001BC0 : 4528                		shll16	r5
(2) 1926/ 6001BC2 : 4628                		shll16	r6
(2) 1927/ 6001BC4 : 4728                		shll16	r7
(2) 1928/ 6001BC6 : 4828                		shll16	r8
(2) 1929/ 6001BC8 :                     drwsld_nxtline_tex:
(2) 1930/ 6001BC8 : 4911                		cmp/pz	r9				; Y Start below 0?
(2) 1931/ 6001BCA : 8BE9                		bf	go_drwsld_updline_tex
(2) 1932/ 6001BCC :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Y Start after 224?
(2) 1933/ 6001BCC :                     ; 		shll2	r0
(2) 1934/ 6001BCC : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1935/ 6001BCE : 3903                		cmp/ge	r0,r9
(2) 1936/ 6001BD0 : 89E8                		bt	go_drwtex_gonxtpz
(2) 1937/ 6001BD2 :                     
(2) 1938/ 6001BD2 : D050                		mov	#$C0000000|Cach_Bkup_S,r0
(2) 1939/ 6001BD4 : 2016                		mov	r1,@-r0
(2) 1940/ 6001BD6 : 2026                		mov	r2,@-r0
(2) 1941/ 6001BD8 : 2036                		mov	r3,@-r0
(2) 1942/ 6001BDA : 2046                		mov	r4,@-r0
(2) 1943/ 6001BDC : 2056                		mov	r5,@-r0
(2) 1944/ 6001BDE : 2066                		mov	r6,@-r0
(2) 1945/ 6001BE0 : 2076                		mov	r7,@-r0
(2) 1946/ 6001BE2 : 2086                		mov	r8,@-r0
(2) 1947/ 6001BE4 : 2096                		mov	r9,@-r0
(2) 1948/ 6001BE6 : 20A6                		mov	r10,@-r0
(2) 1949/ 6001BE8 : 20B6                		mov	r11,@-r0
(2) 1950/ 6001BEA :                     	; r10-r11 are usable
(2) 1951/ 6001BEA : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1952/ 6001BEC : 6B03                		mov	r0,r11			; r11 - Width
(2) 1953/ 6001BEE : 4129                		shlr16	r1
(2) 1954/ 6001BF0 : 4329                		shlr16	r3
(2) 1955/ 6001BF2 : 611F                		exts.w	r1,r1
(2) 1956/ 6001BF4 : 633F                		exts.w	r3,r3
(2) 1957/ 6001BF6 : 6033                		mov	r3,r0			; r0: X Right - X Left
(2) 1958/ 6001BF8 : 3018                		sub	r1,r0
(2) 1959/ 6001BFA : 4015                		cmp/pl	r0			; Line reversed?
(2) 1960/ 6001BFC : 8908                		bt	.txrevers
(2) 1961/ 6001BFE : 6033                		mov	r3,r0			; Swap XL and XR values
(2) 1962/ 6001C00 : 6313                		mov	r1,r3
(2) 1963/ 6001C02 : 6103                		mov	r0,r1
(2) 1964/ 6001C04 : 6053                		mov	r5,r0
(2) 1965/ 6001C06 : 6563                		mov	r6,r5
(2) 1966/ 6001C08 : 6603                		mov	r0,r6
(2) 1967/ 6001C0A : 6073                		mov	r7,r0
(2) 1968/ 6001C0C : 6783                		mov	r8,r7
(2) 1969/ 6001C0E : 6803                		mov	r0,r8
(2) 1970/ 6001C10 :                     .txrevers:
(2) 1971/ 6001C10 : 3310                		cmp/eq	r1,r3				; Same X position?
(2) 1972/ 6001C12 : 8962                		bt	.tex_skip_line
(2) 1973/ 6001C14 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; Y Start after 224?
(2) 1974/ 6001C14 :                     ; 		shll2	r0
(2) 1975/ 6001C14 : 4311                		cmp/pz	r3
(2) 1976/ 6001C16 : 8B60                		bf	.tex_skip_line
(2) 1977/ 6001C18 : 31B7                		cmp/gt	r11,r1				; X left > 320?
(2) 1978/ 6001C1A : 895E                		bt	.tex_skip_line
(2) 1979/ 6001C1C : 6233                		mov	r3,r2
(2) 1980/ 6001C1E : 6013                		mov 	r1,r0
(2) 1981/ 6001C20 : 3208                		sub 	r0,r2
(2) 1982/ 6001C22 : 3658                		sub	r5,r6
(2) 1983/ 6001C24 : 3878                		sub	r7,r8
(2) 1984/ 6001C26 :                     
(2) 1985/ 6001C26 :                     	; Calculate new DX values
(2) 1986/ 6001C26 :                     	; make sure DIV is not in use
(2) 1987/ 6001C26 :                     	; before getting here.
(2) 1988/ 6001C26 :                     	; (set marsGbl_WdgDivLock to 1)
(2) 1989/ 6001C26 : 907F                		mov	#_JR,r0				; r6 / r2
(2) 1990/ 6001C28 : 2022                		mov	r2,@r0
(2) 1991/ 6001C2A : 1061                		mov	r6,@(4,r0)
(2) 1992/ 6001C2C : 0009                		nop
(2) 1993/ 6001C2E :                     ; 		mov	@(4,r0),r6			; r8 / r2
(2) 1994/ 6001C2E : 5605                		mov 	@($14,r0),r6
(2) 1995/ 6001C30 : 2022                		mov	r2,@r0
(2) 1996/ 6001C32 : 1081                		mov	r8,@(4,r0)
(2) 1997/ 6001C34 : 0009                		nop
(2) 1998/ 6001C36 :                     ; 		mov	@(4,r0),r8
(2) 1999/ 6001C36 : 5805                		mov 	@($14,r0),r8
(2) 2000/ 6001C38 :                     	; Limit X destination points
(2) 2001/ 6001C38 :                     	; and correct the texture's X positions
(2) 2002/ 6001C38 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; XR point > 320?
(2) 2003/ 6001C38 :                     ; 		shll2	r0
(2) 2004/ 6001C38 : 33B7                		cmp/gt	r11,r3
(2) 2005/ 6001C3A : 8B00                		bf	.tr_fix
(2) 2006/ 6001C3C : 63B3                		mov	r11,r3				; Force XR to 320
(2) 2007/ 6001C3E :                     .tr_fix:
(2) 2008/ 6001C3E : 4111                		cmp/pz	r1				; XL point < 0?
(2) 2009/ 6001C40 : 8907                		bt	.tl_fix
(2) 2010/ 6001C42 : 621B                		neg	r1,r2				; Fix texture positions
(2) 2011/ 6001C44 : 0267                		mul	r6,r2
(2) 2012/ 6001C46 : 001A                		sts	macl,r0
(2) 2013/ 6001C48 : 350C                		add	r0,r5
(2) 2014/ 6001C4A : 0287                		mul	r8,r2
(2) 2015/ 6001C4C : 001A                		sts	macl,r0
(2) 2016/ 6001C4E : 370C                		add	r0,r7
(2) 2017/ 6001C50 : 211A                		xor	r1,r1				; And reset XL to 0
(2) 2018/ 6001C52 :                     .tl_fix:
(2) 2019/ 6001C52 :                     
(2) 2020/ 6001C52 :                     	; Start
(2) 2021/ 6001C52 : E0FE                		mov	#-2,r0
(2) 2022/ 6001C54 : 2109                		and	r0,r1
(2) 2023/ 6001C56 : 2309                		and	r0,r3
(2) 2024/ 6001C58 : 7301                		add	#1,r3				; LAZY PATCH
(2) 2025/ 6001C5A : 3318                		sub 	r1,r3
(2) 2026/ 6001C5C : 4321                		shar	r3
(2) 2027/ 6001C5E : 4315                		cmp/pl	r3
(2) 2028/ 6001C60 : 8B3B                		bf	.tex_skip_line
(2) 2029/ 6001C62 :                     
(2) 2030/ 6001C62 : DA2D                		mov	#_overwrite+$200,r10
(2) 2031/ 6001C64 : 54E0                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2) 2032/ 6001C66 : 6D43                		mov	r4,r13
(2) 2033/ 6001C68 : 4429                		shlr16	r4
(2) 2034/ 6001C6A : 6DDC                		extu.b	r13,r13
(2) 2035/ 6001C6C : 925D                		mov	#$3FFF,r2
(2) 2036/ 6001C6E : 2429                		and	r2,r4
(2) 2037/ 6001C70 : 6093                		mov 	r9,r0				; Y position * $200
(2) 2038/ 6001C72 : 4018                		shll8	r0
(2) 2039/ 6001C74 : 4000                		shll	r0
(2) 2040/ 6001C76 : 3A0C                		add 	r0,r10				; Add Y
(2) 2041/ 6001C78 : 3A1C                		add 	r1,r10				; Add X
(2) 2042/ 6001C7A : 51E1                		mov	@(plypz_mtrl,r14),r1
(2) 2043/ 6001C7C : E002                		mov	#CS1>>24,r0
(2) 2044/ 6001C7E : 4028                		shll16	r0
(2) 2045/ 6001C80 : 4018                		shll8	r0
(2) 2046/ 6001C82 : 3103                		cmp/ge	r0,r1
(2) 2047/ 6001C84 : 8901                		bt	.from_rom
(2) 2048/ 6001C86 : D025                		mov	#RAM_Mars_VramData,r0		; <-- TEXTURE BUFFER
(2) 2049/ 6001C88 : 310C                		add	r0,r1
(2) 2050/ 6001C8A :                     .from_rom:
(2) 2051/ 6001C8A :                     
(2) 2052/ 6001C8A : D225                		mov	#_vdpreg,r2		; Any pending SVDP fill?
(2) 2053/ 6001C8C : 8525                .w_fb:		mov.w	@(vdpsts,r2),r0
(2) 2054/ 6001C8E : C802                		tst	#%10,r0
(2) 2055/ 6001C90 : 8BFC                		bf	.w_fb
(2) 2056/ 6001C92 :                     .tex_xloop:
(2) 2057/ 6001C92 : 6273                		mov	r7,r2
(2) 2058/ 6001C94 : 4229                		shlr16	r2
(2) 2059/ 6001C96 : 242F                		muls	r2,r4
(2) 2060/ 6001C98 : 6253                		mov	r5,r2	   		; Build column index
(2) 2061/ 6001C9A : 001A                		sts	macl,r0
(2) 2062/ 6001C9C : 4229                		shlr16	r2
(2) 2063/ 6001C9E : 302C                		add	r2,r0
(2) 2064/ 6001CA0 : 001C                		mov.b	@(r0,r1),r0		; Read left pixel
(2) 2065/ 6001CA2 : C8FF                		tst	#$FF,r0
(2) 2066/ 6001CA4 : 8900                		bt	.trns_1
(2) 2067/ 6001CA6 : 30DC                		add	r13,r0			; color-index increment
(2) 2068/ 6001CA8 :                     .trns_1:
(2) 2069/ 6001CA8 : 600C                		extu.b	r0,r0
(2) 2070/ 6001CAA : 4018                		shll8	r0
(2) 2071/ 6001CAC : 400A                		lds	r0,mach			; Save left pixel
(2) 2072/ 6001CAE : 356C                		add	r6,r5			; Next X
(2) 2073/ 6001CB0 : 378C                		add	r8,r7			; Next Y
(2) 2074/ 6001CB2 :                     
(2) 2075/ 6001CB2 : 6273                		mov	r7,r2
(2) 2076/ 6001CB4 : 4229                		shlr16	r2
(2) 2077/ 6001CB6 : 242F                		muls	r2,r4
(2) 2078/ 6001CB8 : 6253                		mov	r5,r2	   		; Build column index
(2) 2079/ 6001CBA : 001A                		sts	macl,r0
(2) 2080/ 6001CBC : 4229                		shlr16	r2
(2) 2081/ 6001CBE : 302C                		add	r2,r0
(2) 2082/ 6001CC0 : 001C                		mov.b	@(r0,r1),r0		; Read right pixel
(2) 2083/ 6001CC2 : C8FF                		tst	#$FF,r0
(2) 2084/ 6001CC4 : 8900                		bt	.trns2
(2) 2085/ 6001CC6 : 30DC                		add	r13,r0			; color-index increment
(2) 2086/ 6001CC8 :                     .trns2:
(2) 2087/ 6001CC8 : 600C                		extu.b	r0,r0
(2) 2088/ 6001CCA : 020A                		sts	mach,r2
(2) 2089/ 6001CCC : 202B                		or	r2,r0
(2) 2090/ 6001CCE :                     
(2) 2091/ 6001CCE : 2A01                		mov.w	r0,@r10
(2) 2092/ 6001CD0 : 7A02                		add	#2,r10
(2) 2093/ 6001CD2 : 356C                		add	r6,r5			; Next X
(2) 2094/ 6001CD4 : 4310                		dt	r3
(2) 2095/ 6001CD6 : 8FDC                		bf/s	.tex_xloop
(2) 2096/ 6001CD8 : 378C                		add	r8,r7			; Next Y
(2) 2097/ 6001CDA :                     .tex_skip_line:
(2) 2098/ 6001CDA : D012                		mov	#$C0000000|Cach_Bkup_LB,r0
(2) 2099/ 6001CDC : 6B06                		mov	@r0+,r11
(2) 2100/ 6001CDE : 6A06                		mov	@r0+,r10
(2) 2101/ 6001CE0 : 6906                		mov	@r0+,r9
(2) 2102/ 6001CE2 : 6806                		mov	@r0+,r8
(2) 2103/ 6001CE4 : 6706                		mov	@r0+,r7
(2) 2104/ 6001CE6 : 6606                		mov	@r0+,r6
(2) 2105/ 6001CE8 : 6506                		mov	@r0+,r5
(2) 2106/ 6001CEA : 6406                		mov	@r0+,r4
(2) 2107/ 6001CEC : 6306                		mov	@r0+,r3
(2) 2108/ 6001CEE : 6206                		mov	@r0+,r2
(2) 2109/ 6001CF0 : 6106                		mov	@r0+,r1
(2) 2110/ 6001CF2 : 0009                		nop
(2) 2111/ 6001CF4 :                     drwsld_updline_tex:
(2) 2112/ 6001CF4 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2) 2113/ 6001CF6 : 350C                		add	r0,r5
(2) 2114/ 6001CF8 : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2) 2115/ 6001CFA : 360C                		add	r0,r6
(2) 2116/ 6001CFC : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2) 2117/ 6001CFE : 370C                		add	r0,r7
(2) 2118/ 6001D00 : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2) 2119/ 6001D02 : 380C                		add	r0,r8
(2) 2120/ 6001D04 : 312C                		add	r2,r1				; Update X postions
(2) 2121/ 6001D06 : 4A10                		dt	r10
(2) 2122/ 6001D08 : 8D02                		bt/s	drwtex_nextpz
(2) 2123/ 6001D0A : 334C                		add	r4,r3
(2) 2124/ 6001D0C : AF5C                		bra	drwsld_nxtline_tex
(2) 2125/ 6001D0E : 7901                		add	#1,r9
(2) 2126/ 6001D10 :                     drwtex_nextpz:
(2) 2127/ 6001D10 : A067                		bra	drwsld_nextpz
(2) 2128/ 6001D12 : 0009                		nop
(2) 2129/ 6001D14 :                     		align 4
(2) 2130/ 6001D14 : C000 04C4 2402      		ltorg
          6001D1A : 0200 0600 FB10 
          6001D20 : 2000 4100 C000 
          6001D26 : 0498 FF00 3FFF    
(2) 2131/ 6001D2C :                     
(2) 2132/ 6001D2C :                     ; ------------------------------------
(2) 2133/ 6001D2C :                     ; Solid Color
(2) 2134/ 6001D2C :                     ;
(2) 2135/ 6001D2C :                     ; r1  - XL
(2) 2136/ 6001D2C :                     ; r2  - XL DX
(2) 2137/ 6001D2C :                     ; r3  - XR
(2) 2138/ 6001D2C :                     ; r4  - XR DX
(2) 2139/ 6001D2C :                     ; r9  - Y current
(2) 2140/ 6001D2C :                     ; r10  - Number of lines
(2) 2141/ 6001D2C :                     ; ------------------------------------
(2) 2142/ 6001D2C :                     
(2) 2143/ 6001D2C :                     drwtsk_solidmode:
(2) 2144/ 6001D2C :                     ; 		mov	#$FF,r0
(2) 2145/ 6001D2C : 56E1                		mov	@(plypz_mtrl,r14),r6
(2) 2146/ 6001D2E : 55E0                		mov	@(plypz_type,r14),r5
(2) 2147/ 6001D30 : 655C                		extu.b	r5,r5
(2) 2148/ 6001D32 : 666C                		extu.b	r6,r6
(2) 2149/ 6001D34 :                     ; 		and	r0,r5
(2) 2150/ 6001D34 :                     ; 		and	r0,r6
(2) 2151/ 6001D34 : 365C                		add	r5,r6
(2) 2152/ 6001D36 : DD3F                		mov	#_vdpreg,r13
(2) 2153/ 6001D38 : 85D5                .wait:		mov.w	@(10,r13),r0
(2) 2154/ 6001D3A : C802                		tst	#2,r0
(2) 2155/ 6001D3C : 8BFC                		bf	.wait
(2) 2156/ 6001D3E :                     drwsld_nxtline:
(2) 2157/ 6001D3E : 4911                		cmp/pz	r9			; Y pos < 0?
(2) 2158/ 6001D40 : 8B4A                		bf	drwsld_updline
(2) 2159/ 6001D42 :                     ; 		mov	#SET_3DFIELD_HGHT,r0	; Y pos > 224?
(2) 2160/ 6001D42 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 2161/ 6001D44 : 3907                		cmp/gt	r0,r9
(2) 2162/ 6001D46 : 894C                		bt	drwsld_nextpz
(2) 2163/ 6001D48 : 6093                		mov	r9,r0			; r10-r9 < 0?
(2) 2164/ 6001D4A : 30AC                		add	r10,r0
(2) 2165/ 6001D4C : 4015                		cmp/pl	r0
(2) 2166/ 6001D4E : 8B48                		bf	drwsld_nextpz
(2) 2167/ 6001D50 :                     
(2) 2168/ 6001D50 : 6B13                		mov	r1,r11
(2) 2169/ 6001D52 : 6C33                		mov	r3,r12
(2) 2170/ 6001D54 : 4B29                		shlr16	r11
(2) 2171/ 6001D56 : 4C29                		shlr16	r12
(2) 2172/ 6001D58 : 6BBF                		exts.w	r11,r11
(2) 2173/ 6001D5A : 6CCF                		exts.w	r12,r12
(2) 2174/ 6001D5C : E0FE                		mov	#-2,r0		; WORD align
(2) 2175/ 6001D5E : 2B09                		and	r0,r11
(2) 2176/ 6001D60 : 2C09                		and	r0,r12
(2) 2177/ 6001D62 : 60C3                		mov	r12,r0
(2) 2178/ 6001D64 : 30B8                		sub	r11,r0
(2) 2179/ 6001D66 : 4011                		cmp/pz	r0
(2) 2180/ 6001D68 : 8902                		bt	.revers
(2) 2181/ 6001D6A : 60C3                		mov	r12,r0
(2) 2182/ 6001D6C : 6CB3                		mov	r11,r12
(2) 2183/ 6001D6E : 6B03                		mov	r0,r11
(2) 2184/ 6001D70 :                     .revers:
(2) 2185/ 6001D70 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0
(2) 2186/ 6001D70 :                     ; 		shll2	r0
(2) 2187/ 6001D70 : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 2188/ 6001D72 : 4C15                		cmp/pl	r12		; XR < 0?
(2) 2189/ 6001D74 : 8B30                		bf	drwsld_updline
(2) 2190/ 6001D76 : 3B03                		cmp/ge	r0,r11		; XL > 320?
(2) 2191/ 6001D78 : 892E                		bt	drwsld_updline
(2) 2192/ 6001D7A : 3C03                		cmp/ge	r0,r12		; XR > 320?
(2) 2193/ 6001D7C : 8B00                		bf	.r_fix
(2) 2194/ 6001D7E : 6C03                		mov	r0,r12		; MAX XR
(2) 2195/ 6001D80 :                     .r_fix:
(2) 2196/ 6001D80 : 4B15                		cmp/pl	r11		; XL < 0?
(2) 2197/ 6001D82 : 8900                		bt	.l_fix
(2) 2198/ 6001D84 : 2BBA                		xor	r11,r11		; MIN XL
(2) 2199/ 6001D86 :                     .l_fix:
(2) 2200/ 6001D86 : 85D5                		mov.w	@(10,r13),r0	; Pending SVDP fill?
(2) 2201/ 6001D88 : C802                		tst	#%10,r0
(2) 2202/ 6001D8A : 8BFC                		bf	.l_fix
(2) 2203/ 6001D8C : 60C3                		mov	r12,r0
(2) 2204/ 6001D8E : 30B8                		sub	r11,r0
(2) 2205/ 6001D90 : 6C03                		mov	r0,r12
(2) 2206/ 6001D92 : 4001                		shlr	r0		; Len: (XR-XL)/2
(2) 2207/ 6001D94 : 81D2                		mov.w	r0,@(4,r13)	; Set SVDP-FILL len
(2) 2208/ 6001D96 : 60B3                		mov	r11,r0
(2) 2209/ 6001D98 : 4001                		shlr	r0
(2) 2210/ 6001D9A : 6593                		mov	r9,r5
(2) 2211/ 6001D9C : 7501                		add	#1,r5
(2) 2212/ 6001D9E : 4518                		shll8	r5
(2) 2213/ 6001DA0 : 305C                		add	r5,r0		; Address: (XL/2)*((Y+1)*$200)/2
(2) 2214/ 6001DA2 : 81D3                		mov.w	r0,@(6,r13)	; Set SVDP-FILL address
(2) 2215/ 6001DA4 : 6063                		mov	r6,r0
(2) 2216/ 6001DA6 : 4018                		shll8	r0
(2) 2217/ 6001DA8 : 206B                		or	r6,r0		; Data: xxxx
(2) 2218/ 6001DAA : 81D4                		mov.w	r0,@(8,r13)	; Set pixels, SVDP-Fill begins
(2) 2219/ 6001DAC :                     ; .wait:	mov.w	@(10,r13),r0
(2) 2220/ 6001DAC :                     ; 		tst	#2,r0
(2) 2221/ 6001DAC :                     ; 		bf	.wait
(2) 2222/ 6001DAC :                     
(2) 2223/ 6001DAC :                     ; 	If the line is too large, leave it to VDP
(2) 2224/ 6001DAC :                     ; 	and exit watchdog, we will come back on
(2) 2225/ 6001DAC :                     ; 	next trigger.
(2) 2226/ 6001DAC : E028                		mov	#$28,r0					; If line > $28, leave the SVDP filling
(2) 2227/ 6001DAE : 3C07                		cmp/gt	r0,r12					; and wait for the next watchdog
(2) 2228/ 6001DB0 : 8B12                		bf	drwsld_updline
(2) 2229/ 6001DB2 : E006                		mov	#6,r0					; Set next mode on Resume
(2) 2230/ 6001DB4 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Task $06
(2) 2231/ 6001DB6 : D020                		mov	#$C0000000|Cach_LnDrw_S,r0		; Save ALL these regs for comeback
(2) 2232/ 6001DB8 : 2016                		mov	r1,@-r0
(2) 2233/ 6001DBA : 2026                		mov	r2,@-r0
(2) 2234/ 6001DBC : 2036                		mov	r3,@-r0
(2) 2235/ 6001DBE : 2046                		mov	r4,@-r0
(2) 2236/ 6001DC0 : 2056                		mov	r5,@-r0
(2) 2237/ 6001DC2 : 2066                		mov	r6,@-r0
(2) 2238/ 6001DC4 : 2076                		mov	r7,@-r0
(2) 2239/ 6001DC6 : 2086                		mov	r8,@-r0
(2) 2240/ 6001DC8 : 2096                		mov	r9,@-r0
(2) 2241/ 6001DCA : 20A6                		mov	r10,@-r0
(2) 2242/ 6001DCC : 20B6                		mov	r11,@-r0
(2) 2243/ 6001DCE : 20C6                		mov	r12,@-r0
(2) 2244/ 6001DD0 : 20D6                		mov	r13,@-r0
(2) 2245/ 6001DD2 : 20E6                		mov	r14,@-r0
(2) 2246/ 6001DD4 : A015                		bra	drwtask_return
(2) 2247/ 6001DD6 : E228                		mov	#$28,r2			; Exit timer $20
(2) 2248/ 6001DD8 :                     ; otherwise...
(2) 2249/ 6001DD8 :                     drwsld_updline:
(2) 2250/ 6001DD8 : 312C                		add	r2,r1			; Next X dst
(2) 2251/ 6001DDA : 334C                		add	r4,r3			; Next Y dst
(2) 2252/ 6001DDC : 4A10                		dt	r10
(2) 2253/ 6001DDE : 8FAE                		bf/s	drwsld_nxtline
(2) 2254/ 6001DE0 : 7901                		add	#1,r9
(2) 2255/ 6001DE2 :                     
(2) 2256/ 6001DE2 :                     ; ------------------------------------
(2) 2257/ 6001DE2 :                     
(2) 2258/ 6001DE2 :                     drwsld_nextpz:
(2) 2259/ 6001DE2 : 200A                		xor	r0,r0
(2) 2260/ 6001DE4 : 1E00                		mov	r0,@(plypz_type,r14)
(2) 2261/ 6001DE6 : 0009                		nop
(2) 2262/ 6001DE8 : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 2263/ 6001DEA : 7001                		add	#1,r0
(2) 2264/ 6001DEC : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(2) 2265/ 6001DEE : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece counter
(2) 2266/ 6001DF0 : 70FF                		add	#-1,r0
(2) 2267/ 6001DF2 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 2268/ 6001DF4 : A005                		bra	drwtask_purge
(2) 2269/ 6001DF6 : E218                		mov	#$18,r2				; Exit Wdg-timer: $10
(2) 2270/ 6001DF8 :                     
(2) 2271/ 6001DF8 :                     ; --------------------------------
(2) 2272/ 6001DF8 :                     ; Task $00
(2) 2273/ 6001DF8 :                     ; --------------------------------
(2) 2274/ 6001DF8 :                     
(2) 2275/ 6001DF8 :                     slvplgn_00:
(2) 2276/ 6001DF8 : 2F26                		mov	r2,@-r15
(2) 2277/ 6001DFA : E000                		mov	#0,r0
(2) 2278/ 6001DFC : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 2279/ 6001DFE : A00E                		bra	drwtask_exit
(2) 2280/ 6001E00 : E228                		mov	#$28,r2
(2) 2281/ 6001E02 :                     drwtask_purge:
(2) 2282/ 6001E02 :                     ; 		stc	sr,r3
(2) 2283/ 6001E02 :                     ; 		mov.b	#$F0,r0			; ** $F0
(2) 2284/ 6001E02 :                     ; 		extu.b	r0,r0
(2) 2285/ 6001E02 :                     ; 		ldc	r0,sr
(2) 2286/ 6001E02 :                     ; 		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2) 2287/ 6001E02 :                     ; 		mov	#%10000,r0
(2) 2288/ 6001E02 :                     ; 		mov.b	r0,@r1
(2) 2289/ 6001E02 :                     ; 		nop
(2) 2290/ 6001E02 :                     ; 		nop
(2) 2291/ 6001E02 :                     ; 		nop
(2) 2292/ 6001E02 :                     ; 		nop
(2) 2293/ 6001E02 :                     ; 		nop
(2) 2294/ 6001E02 :                     ; 		nop
(2) 2295/ 6001E02 :                     ; 		nop
(2) 2296/ 6001E02 :                     ; 		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2) 2297/ 6001E02 :                     ; 		mov.b	r0,@r1
(2) 2298/ 6001E02 :                     ; 		ldc	r3,sr
(2) 2299/ 6001E02 :                     drwtask_return:
(2) 2300/ 6001E02 : 4F06                		lds	@r15+,mach
(2) 2301/ 6001E04 : 4F16                		lds	@r15+,macl
(2) 2302/ 6001E06 : 6EF6                		mov	@r15+,r14
(2) 2303/ 6001E08 : 6DF6                		mov	@r15+,r13
(2) 2304/ 6001E0A : 6CF6                		mov	@r15+,r12
(2) 2305/ 6001E0C : 6BF6                		mov	@r15+,r11
(2) 2306/ 6001E0E : 6AF6                		mov	@r15+,r10
(2) 2307/ 6001E10 : 69F6                		mov	@r15+,r9
(2) 2308/ 6001E12 : 68F6                		mov	@r15+,r8
(2) 2309/ 6001E14 : 67F6                		mov	@r15+,r7
(2) 2310/ 6001E16 : 66F6                		mov	@r15+,r6
(2) 2311/ 6001E18 : 65F6                		mov	@r15+,r5
(2) 2312/ 6001E1A : 64F6                		mov	@r15+,r4
(2) 2313/ 6001E1C : 63F6                		mov	@r15+,r3
(2) 2314/ 6001E1E :                     drwtask_exit:
(2) 2315/ 6001E1E : 910D                		mov.w   #$FE80,r1
(2) 2316/ 6001E20 : 900D                		mov.w   #$A518,r0		; OFF
(2) 2317/ 6001E22 : 2101                		mov.w   r0,@r1
(2) 2318/ 6001E24 : CB20                		or      #$20,r0			; ON
(2) 2319/ 6001E26 : 2101                		mov.w   r0,@r1
(2) 2320/ 6001E28 : 900A                		mov.w   #$5A00,r0		; r2 - Timer
(2) 2321/ 6001E2A : 202B                		or	r2,r0
(2) 2322/ 6001E2C : 2101                		mov.w   r0,@r1
(2) 2323/ 6001E2E : 62F6                		mov	@r15+,r2
(2) 2324/ 6001E30 : 000B                		rts
(2) 2325/ 6001E32 : 0009                		nop
(2) 2326/ 6001E34 :                     		align 4
(2) 2327/ 6001E34 :                     
(2) 2328/ 6001E34 :                     ; ------------------------------------------------
(2) 2329/ 6001E34 :                     
(2) 2330/ 6001E34 : 2000 4100 C000      		ltorg
          6001E3A : 0498 FE80 A518 
          6001E40 : 5A00             
(2) 2331/ 6001E42 :                     
(1) 2422/ 6001E42 :                     		include "system/mars/cache/cache_mstr.asm"
(2)    1/ 6001E42 :                     ; ====================================================================
(2)    2/ 6001E42 :                     ; ----------------------------------------------------------------
(2)    3/ 6001E42 :                     ; CACHE code
(2)    4/ 6001E42 :                     ;
(2)    5/ 6001E42 :                     ; LIMIT: $600 bytes
(2)    6/ 6001E42 :                     ; ----------------------------------------------------------------
(2)    7/ 6001E42 :                     
(2)    8/ 6001E42 :                     ; WARNING: AS can't phase $C0000000, set the labels like this:
(2)    9/ 6001E42 :                     ; $C0000000|label
(2)   10/ 6001E42 :                     
(2)   11/ 6001E42 :                     		align 4
(2)   12/ 6001E44 :                     CACHE_MASTER:
(2)   13/ 6001E44 :                     
(2)   14/ 6001E44 :                     ; ====================================================================
(2)   15/ 6001E44 :                     ; ----------------------------------------------------------------
(2)   16/ 6001E44 :                     
(2)   17/ 6001E44 : (MACRO)              			memory 0
(2)   17/ 6001E44 : =$6001E44            GLBL_LASTPC     := *
(2)   17/   1C644 :                                     dephase
(2)   17/       0 :                                     phase 0
(2)   17/       0 : =$0                  GLBL_LASTORG    := *
(2)   18/       0 :                     RAM_Mars_SVdpSprInfo	ds.b $10*MAX_MARSSPR
(2)   19/     200 :                     RAM_Mars_ScrlRefill	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)
(2)   20/     600 : (MACRO)              			endmemory
(2)   20/   1CC44 :                     .here:          dephase
(2)   20/   1CC44 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   20/ 6001E44 :                                     phase GLBL_LASTPC
(2)   21/ 6001E44 :                     
(2)   22/ 6001E44 : (MACRO)              			memory 0
(2)   22/ 6001E44 : =$6001E44            GLBL_LASTPC     := *
(2)   22/   1C644 :                                     dephase
(2)   22/       0 :                                     phase 0
(2)   22/       0 : =$0                  GLBL_LASTORG    := *
(2)   23/       0 :                     RAM_Mars_SVdpDrwList	ds.b $40*16			; Polygon pieces
(2)   24/     400 :                     Cach_DDA_Top		ds.l 2*2			; First 2 points
(2)   25/     410 :                     Cach_DDA_Last		ds.l 2*2			; Triangle or Quad (+8)
(2)   26/     420 :                     Cach_DDA_Src		ds.l 4*2
(2)   27/     440 :                     Cach_DDA_Src_L		ds.l 4				; X/DX/Y/DX result for textures
(2)   28/     450 :                     Cach_DDA_Src_R		ds.l 4
(2)   29/     460 :                     Cach_LnDrw_L		ds.l 14				;
(2)   30/     498 :                     Cach_LnDrw_S		ds.l 0				; <-- Reads backwards
(2)   31/     498 :                     Cach_Bkup_LB		ds.l 11
(2)   32/     4C4 :                     Cach_Bkup_S		ds.l 0				; <-- Reads backwards
(2)   33/     4C4 :                     Cach_Bkup_LPZ		ds.l 7
(2)   34/     4E0 :                     Cach_Bkup_SPZ		ds.l 0				; <-- Reads backwards
(2)   35/     4E0 : (MACRO)              			endmemory
(2)   35/   1CB24 :                     .here:          dephase
(2)   35/   1CB24 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/ 6001E44 :                                     phase GLBL_LASTPC
(2)   36/ 6001E44 :                     
(2)   37/ 6001E44 :                     ; ----------------------------------------------------------------
(2)   38/ 6001E44 :                     ; ====================================================================
(2)   39/ 6001E44 :                     
(2)   40/ 6001E44 :                     ; 		dephase
(2)   41/ 6001E44 :                     		align 4
(2)   42/ 6001E44 :                     CACHE_MASTER_E:
(2)   43/ 6001E44 : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_MASTER_E-CACHE_MASTER,$800
(2)   44/ 6001E44 :                     
(1) 2423/ 6001E44 :                     		include "system/mars/cache/cache_slv.asm"
(2)    1/ 6001E44 :                     ; ====================================================================
(2)    2/ 6001E44 :                     ; ----------------------------------------------------------------
(2)    3/ 6001E44 :                     ; CACHE code
(2)    4/ 6001E44 :                     ;
(2)    5/ 6001E44 :                     ; LIMIT: $600 bytes
(2)    6/ 6001E44 :                     ; ----------------------------------------------------------------
(2)    7/ 6001E44 :                     
(2)    8/ 6001E44 :                     ; WARNING: AS can't phase $C0000000, set the labels like this
(2)    9/ 6001E44 :                     ; $C0000000|label
(2)   10/ 6001E44 :                     
(2)   11/ 6001E44 :                     		align 4
(2)   12/ 6001E44 :                     CACHE_SLAVE:
(2)   13/       0 :                     		phase 0		; AS can't phase $C0000000
(2)   14/       0 :                     
(2)   15/       0 :                     ; ====================================================================
(2)   16/       0 :                     ; ----------------------------------------------------------------
(2)   17/       0 :                     ; PWM Interrupt
(2)   18/       0 :                     ; ----------------------------------------------------------------
(2)   19/       0 :                     
(2)   20/       0 :                     ; MarsPwm_Playback:
(2)   21/       0 :                     s_irq_pwm:
(2)   22/       0 : 91A6                		mov	#_FRT,r1
(2)   23/       2 : 8417                		mov.b	@(7,r1),r0
(2)   24/       4 : CA02                		xor	#2,r0
(2)   25/       6 : 8017                		mov.b	r0,@(7,r1)
(2)   26/       8 : D14C                		mov	#_sysreg+pwmintclr,r1
(2)   27/       A : 2101                		mov.w	r0,@r1
(2)   28/       C : 6011                		mov.w	@r1,r0
(2)   29/       E :                     ; 		mov	#_sysreg+comm6,r1	; **** TEMPORAL COUNTER
(2)   30/       E :                     ; 		mov.w	@r1,r0			; ****
(2)   31/       E :                     ; 		add	#1,r0			; ****
(2)   32/       E :                     ; 		mov.w	r0,@r1			; ****
(2)   33/       E :                     	; --------------------------------
(2)   34/       E : D14C                		mov	#_sysreg+monowidth,r1
(2)   35/      10 : 6011                		mov.w	@r1,r0
(2)   36/      12 : 4019                		shlr8	r0
(2)   37/      14 : C880                		tst	#$80,r0
(2)   38/      16 : 8901                		bt	.fifo_free
(2)   39/      18 : A08D                		bra	.pwm_full
(2)   40/      1A : 0009                		nop
(2)   41/      1C :                     
(2)   42/      1C :                     ; ------------------------------------------------
(2)   43/      1C :                     
(2)   44/      1C :                     .fifo_free:
(2)   45/      1C : 2F26                		mov	r2,@-r15
(2)   46/      1E : 2F36                		mov	r3,@-r15
(2)   47/      20 : 2F46                		mov	r4,@-r15
(2)   48/      22 : 2F56                		mov	r5,@-r15
(2)   49/      24 : 2F66                		mov	r6,@-r15
(2)   50/      26 : 2F76                		mov	r7,@-r15
(2)   51/      28 : 2F86                		mov	r8,@-r15
(2)   52/      2A : 2F96                		mov	r9,@-r15
(2)   53/      2C : 2FA6                		mov	r10,@-r15
(2)   54/      2E : 4F12                		sts	macl,@-r15
(2)   55/      30 : 4F02                		sts	mach,@-r15
(2)   56/      32 :                     .fifo_loop:
(2)   57/      32 : DA44                		mov	#RAM_Mars_PwmList,r10
(2)   58/      34 : E908                		mov	#MAX_PWMCHNL,r9
(2)   59/      36 : E600                		mov	#0,r6			; r6 - left
(2)   60/      38 : E700                		mov	#0,r7			; r7 - right
(2)   61/      3A :                     .next_chnl:
(2)   62/      3A : 50A0                		mov	@(marspwm_enbl,r10),r0
(2)   63/      3C : 401A                		lds	r0,macl
(2)   64/      3E : C880                		tst	#$80,r0
(2)   65/      40 : 8B02                		bf	.enabled
(2)   66/      42 : 9186                .chnl_siln:	mov	#$80,r1
(2)   67/      44 : A057                		bra	.chnl_off
(2)   68/      46 : 6213                		mov	r1,r2
(2)   69/      48 :                     .enabled:
(2)   70/      48 : 0009                		nop
(2)   71/      4A : 53A6                		mov	@(marspwm_pitch,r10),r3
(2)   72/      4C : C808                		tst	#%1000,r0
(2)   73/      4E : 8900                		bt	.st_pitch
(2)   74/      50 : 4300                		shll	r3
(2)   75/      52 :                     .st_pitch:
(2)   76/      52 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)   77/      54 : 353C                		add	r3,r5
(2)   78/      56 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)   79/      58 : 55A1                		mov	@(marspwm_read,r10),r5
(2)   80/      5A : 353C                		add	r3,r5
(2)   81/      5C : 50A4                		mov	@(marspwm_length,r10),r0
(2)   82/      5E : 3038                		sub	r3,r0
(2)   83/      60 : 3503                		cmp/ge	r0,r5
(2)   84/      62 : 8B08                		bf	.keep
(2)   85/      64 : 001A                		sts	macl,r0
(2)   86/      66 : C804                		tst	#%00000100,r0
(2)   87/      68 : 8B02                		bf	.loopit
(2)   88/      6A : C940                		and	#%01000000,r0
(2)   89/      6C : AFE9                		bra	.chnl_siln
(2)   90/      6E : 1A00                		mov	r0,@(marspwm_enbl,r10)
(2)   91/      70 :                     .loopit:
(2)   92/      70 : 55A3                		mov	@(marspwm_start,r10),r5
(2)   93/      72 : 54A5                		mov	@(marspwm_loop,r10),r4
(2)   94/      74 : 354C                		add	r4,r5
(2)   95/      76 :                     .keep:
(2)   96/      76 : 1A51                		mov	r5,@(marspwm_read,r10)
(2)   97/      78 :                     
(2)   98/      78 :                     	; Make wave address point
(2)   99/      78 :                     	; r5 - xxxxxx.00
(2)  100/      78 : 54A2                		mov	@(marspwm_bank,r10),r4
(2)  101/      7A : 001A                		sts	macl,r0
(2)  102/      7C : C840                		tst	#%01000000,r0
(2)  103/      7E : 8905                		bt	.not_backup
(2)  104/      80 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)  105/      82 : 353C                		add	r3,r5
(2)  106/      84 : D030                		mov	#($200-1)<<8,r0
(2)  107/      86 : 2509                		and	r0,r5
(2)  108/      88 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)  109/      8A : 54A8                		mov	@(marspwm_cbank,r10),r4
(2)  110/      8C :                     .not_backup:
(2)  111/      8C : 4519                		shlr8	r5
(2)  112/      8E : 254B                		or	r4,r5
(2)  113/      90 :                     .read_wav:
(2)  114/      90 : C808                		tst	#%1000,r0		; Stereo sample?
(2)  115/      92 : 8901                		bt	.stand
(2)  116/      94 : E3FE                		mov	#-2,r3			; Limit to words
(2)  117/      96 : 2539                		and	r3,r5
(2)  118/      98 :                     .stand:
(2)  119/      98 : 6354                		mov.b	@r5+,r3			; Left wave
(2)  120/      9A : 633C                		extu.b	r3,r3
(2)  121/      9C : C808                		tst	#%1000,r0		; Stereo sample?
(2)  122/      9E : 8902                		bt	.do_mono		; Copy Left to Right
(2)  123/      A0 : 6454                		mov.b	@r5+,r4			; Right wave
(2)  124/      A2 : A001                		bra	.go_wave
(2)  125/      A4 : 644C                		extu.b	r4,r4
(2)  126/      A6 :                     .do_mono:
(2)  127/      A6 : 6433                		mov	r3,r4
(2)  128/      A8 :                     
(2)  129/      A8 :                     ; r3 - left byte
(2)  130/      A8 :                     ; r4 - right byte
(2)  131/      A8 :                     .go_wave:
(2)  132/      A8 : 7301                		add	#1,r3
(2)  133/      AA : 7401                		add	#1,r4
(2)  134/      AC : E180                		mov.b	#$80,r1
(2)  135/      AE : 611C                		extu.b	r1,r1
(2)  136/      B0 : 6213                		mov	r1,r2
(2)  137/      B2 : C802                .mnon_z:	tst	#%0010,r0
(2)  138/      B4 : 8900                		bt	.ml_out
(2)  139/      B6 : 6133                		mov	r3,r1
(2)  140/      B8 : C801                .ml_out:	tst	#%0001,r0
(2)  141/      BA : 8900                		bt	.do_vol
(2)  142/      BC : 6243                		mov	r4,r2
(2)  143/      BE :                     ; r1 - left
(2)  144/      BE :                     ; r2 - right
(2)  145/      BE :                     .do_vol:
(2)  146/      BE : 50A7                		mov	@(marspwm_vol,r10),r0
(2)  147/      C0 : 4015                		cmp/pl	r0
(2)  148/      C2 : 8B18                		bf	.chnl_off
(2)  149/      C4 : E440                		mov	#64,r4
(2)  150/      C6 : 3043                		cmp/ge	r4,r0
(2)  151/      C8 : 89BB                		bt	.chnl_siln
(2)  152/      CA : 7001                		add	#1,r0
(2)  153/      CC : 4008                		shll2	r0
(2)  154/      CE : 210E                		mulu	r0,r1
(2)  155/      D0 : 041A                		sts	macl,r4
(2)  156/      D2 : 4419                		shlr8	r4
(2)  157/      D4 : 3148                		sub	r4,r1
(2)  158/      D6 : 220E                		mulu	r0,r2
(2)  159/      D8 : 041A                		sts	macl,r4
(2)  160/      DA : 4419                		shlr8	r4
(2)  161/      DC : 3248                		sub	r4,r2
(2)  162/      DE : 4115                		cmp/pl	r1
(2)  163/      E0 : 8900                		bt	.l_low
(2)  164/      E2 : E100                		mov	#0,r1
(2)  165/      E4 : 4215                .l_low:		cmp/pl	r2
(2)  166/      E6 : 8900                		bt	.r_low
(2)  167/      E8 : E200                		mov	#0,r2
(2)  168/      EA : 9432                .r_low:		mov	#$80,r4		; <-- This prevents a click
(2)  169/      EC : 240E                		mulu	r0,r4
(2)  170/      EE : 001A                		sts	macl,r0
(2)  171/      F0 : 4019                		shlr8	r0
(2)  172/      F2 : 310C                		add	r0,r1
(2)  173/      F4 : 320C                		add	r0,r2
(2)  174/      F6 :                     .chnl_off:
(2)  175/      F6 : 361C                		add	r1,r6
(2)  176/      F8 : 372C                		add	r2,r7
(2)  177/      FA : 4910                		dt	r9
(2)  178/      FC : 8F9D                		bf/s	.next_chnl
(2)  179/      FE : 7A28                		add	#marspwm_len,r10
(2)  180/     100 : 9028                		mov	#$7FF,r0
(2)  181/     102 : 3603                		cmp/ge	r0,r6
(2)  182/     104 : 8B00                		bf	.l_max
(2)  183/     106 : 6603                		mov	r0,r6
(2)  184/     108 :                     .l_max:
(2)  185/     108 : 3703                		cmp/ge	r0,r7
(2)  186/     10A : 8B00                		bf	.r_max
(2)  187/     10C : 6703                		mov	r0,r7
(2)  188/     10E :                     .r_max:
(2)  189/     10E : 4628                		shll16	r6
(2)  190/     110 : 276B                		or	r6,r7
(2)  191/     112 : D00E                		mov	#_sysreg+lchwidth,r0
(2)  192/     114 : 2072                		mov	r7,@r0
(2)  193/     116 : D10A                		mov	#_sysreg+monowidth,r1
(2)  194/     118 : 6011                		mov.w	@r1,r0
(2)  195/     11A : 4019                		shlr8	r0
(2)  196/     11C : C880                		tst	#$80,r0
(2)  197/     11E : 8988                		bt	.fifo_loop
(2)  198/     120 :                     
(2)  199/     120 :                     ; ------------------------------------------------
(2)  200/     120 : 4F06                		lds	@r15+,mach
(2)  201/     122 : 4F16                		lds	@r15+,macl
(2)  202/     124 : 6AF6                		mov	@r15+,r10
(2)  203/     126 : 69F6                		mov	@r15+,r9
(2)  204/     128 : 68F6                		mov	@r15+,r8
(2)  205/     12A : 67F6                		mov	@r15+,r7
(2)  206/     12C : 66F6                		mov	@r15+,r6
(2)  207/     12E : 65F6                		mov	@r15+,r5
(2)  208/     130 : 64F6                		mov	@r15+,r4
(2)  209/     132 : 63F6                		mov	@r15+,r3
(2)  210/     134 : 62F6                		mov	@r15+,r2
(2)  211/     136 :                     .pwm_full:
(2)  212/     136 : 000B                		rts
(2)  213/     138 : 0009                		nop
(2)  214/     13A :                     		align 4
(2)  215/     13C : 2000 401C 2000      		ltorg
              142 : 4038 2600 61C0 
              148 : 0001 FF00 2000 
              14E : 4034 FE10 0080 
              154 : 07FF             
(2)  216/     156 :                     
(2)  217/     156 :                     ; ====================================================================
(2)  218/     156 :                     ; ----------------------------------------------------------------
(2)  219/     156 :                     ; 3D Section
(2)  220/     156 :                     ; ----------------------------------------------------------------
(2)  221/     156 :                     
(2)  222/     156 :                     ; --------------------------------------------------------
(2)  223/     156 :                     ; MarsMdl_MdlLoop
(2)  224/     156 :                     ; --------------------------------------------------------
(2)  225/     156 :                     
(2)  226/     156 :                     		align 4
(2)  227/     158 :                     MarsMdl_MdlLoop:
(2)  228/     158 : 4F22                		sts	pr,@-r15
(2)  229/     15A : B27F                		bsr	Mars_CachePurge_S
(2)  230/     15C : 0009                		nop
(2)  231/     15E : EB00                		mov	#0,r11
(2)  232/     160 : DD16                		mov 	#RAM_Mars_Polygons_0,r13
(2)  233/     162 : DC17                		mov	#RAM_Mars_PlgnList_0,r12
(2)  234/     164 : D017                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  235/     166 : 6002                		mov	@r0,r0
(2)  236/     168 : C801                		tst     #1,r0
(2)  237/     16A : 8901                		bt	.go_mdl
(2)  238/     16C : DD16                		mov 	#RAM_Mars_Polygons_1,r13
(2)  239/     16E : DC17                		mov	#RAM_Mars_PlgnList_1,r12
(2)  240/     170 :                     .go_mdl:
(2)  241/     170 :                     
(2)  242/     170 :                     	; ------------------------------------------------
(2)  243/     170 :                     	; 3D Sprites
(2)  244/     170 : DE17                		mov	#RAM_Mars_SprPolygn,r14
(2)  245/     172 : EA20                		mov	#MAX_MARSMSPR,r10
(2)  246/     174 :                     .m_loop:
(2)  247/     174 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  248/     176 : C880                		tst	#$80,r0
(2)  249/     178 : 8905                		bt	.m_invlid
(2)  250/     17A : 9033                		mov	#MAX_FACES,r0
(2)  251/     17C : 3B07                		cmp/gt	r0,r11
(2)  252/     17E : 8910                		bt	.invlid
(2)  253/     180 : B032                		bsr	MarsMdl_MkSpr
(2)  254/     182 : 2FA6                		mov	r10,@-r15
(2)  255/     184 : 6AF6                		mov	@r15+,r10
(2)  256/     186 :                     .m_invlid:
(2)  257/     186 : 4A10                		dt	r10
(2)  258/     188 : 8FF4                		bf/s	.m_loop
(2)  259/     18A : 7E20                		add	#mspr_len,r14
(2)  260/     18C :                     	; ------------------------------------------------
(2)  261/     18C :                     	; 3D Models
(2)  262/     18C : DE11                		mov	#RAM_Mars_Objects,r14
(2)  263/     18E : EA18                		mov	#MAX_MARSOBJ,r10
(2)  264/     190 :                     .loop:
(2)  265/     190 : 50E1                		mov	@(mmdl_data,r14),r0		; Object model data == 0 or -1?
(2)  266/     192 : 4015                		cmp/pl	r0
(2)  267/     194 : 8B05                		bf	.invlid
(2)  268/     196 : 9025                		mov	#MAX_FACES,r0
(2)  269/     198 : 3B07                		cmp/gt	r0,r11
(2)  270/     19A : 8902                		bt	.invlid
(2)  271/     19C : B0FC                		bsr	MarsMdl_ReadModel
(2)  272/     19E : 2FA6                		mov	r10,@-r15
(2)  273/     1A0 : 6AF6                		mov	@r15+,r10
(2)  274/     1A2 :                     .invlid:
(2)  275/     1A2 : 4A10                		dt	r10
(2)  276/     1A4 : 8FF4                		bf/s	.loop
(2)  277/     1A6 : 7E20                		add	#mmdl_len,r14
(2)  278/     1A8 :                     	; ------------------------------------------------
(2)  279/     1A8 :                     .skip:
(2)  280/     1A8 : DC0B                		mov 	#RAM_Mars_PlgnNum_0,r12
(2)  281/     1AA : D00C                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  282/     1AC : 6002                		mov	@r0,r0
(2)  283/     1AE :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(2)  284/     1AE : C801                		tst     #1,r0
(2)  285/     1B0 : 8900                		bt	.page_2
(2)  286/     1B2 : DC0B                		mov 	#RAM_Mars_PlgnNum_1,r12
(2)  287/     1B4 :                     .page_2:
(2)  288/     1B4 : 2CB2                		mov	r11,@r12			; Save faces counter
(2)  289/     1B6 : 4F26                		lds	@r15+,pr
(2)  290/     1B8 : 000B                		rts
(2)  291/     1BA : 0009                		nop
(2)  292/     1BC :                     		align 4
(2)  293/     1BC : 0600 7A50 0600      		ltorg
              1C2 : EA50 C000 0690 
              1C8 : 0600 B250 0600 
              1CE : F250 0600 7650 
              1D4 : 0600 7350 0600 
              1DA : FA50 C000 0690 
              1E0 : 0600 FA54 0100    
(2)  294/     1E6 :                     
(2)  295/     1E6 :                     ; ------------------------------------------------
(2)  296/     1E6 :                     ; Read model
(2)  297/     1E6 :                     ;
(2)  298/     1E6 :                     ; r14 - Current Msprite list
(2)  299/     1E6 :                     ; r13 - Current polygon
(2)  300/     1E6 :                     ; r12 - Z storage
(2)  301/     1E6 :                     ; r11 - Used faces counter
(2)  302/     1E6 :                     ; ------------------------------------------------
(2)  303/     1E6 :                     
(2)  304/     1E6 :                     		align 4
(2)  305/     1E8 :                     MarsMdl_MkSpr:
(2)  306/     1E8 : 4F22                		sts	pr,@-r15
(2)  307/     1EA : 84E1                		mov.b	@(mspr_indx,r14),r0
(2)  308/     1EC : 620C                		extu.b	r0,r2
(2)  309/     1EE : 84E6                		mov.b	@(mspr_srcwdth,r14),r0	; Texture file width
(2)  310/     1F0 : 630C                		extu.b	r0,r3
(2)  311/     1F2 : D046                		mov	#$8000,r0
(2)  312/     1F4 : 303C                		add	r3,r0
(2)  313/     1F6 : 51E7                		mov	@(mspr_vram,r14),r1	; Texture location
(2)  314/     1F8 : 4028                		shll16	r0
(2)  315/     1FA : 202B                		or	r2,r0
(2)  316/     1FC : 1D00                		mov	r0,@(plygn_type,r13)
(2)  317/     1FE : 0009                		nop
(2)  318/     200 : 1D11                		mov	r1,@(plygn_mtrl,r13)
(2)  319/     202 :                     
(2)  320/     202 :                     	; r1 | -X
(2)  321/     202 :                     	; r2 | +X
(2)  322/     202 :                     	; r3 | -Y
(2)  323/     202 :                     	; r4 | +Y
(2)  324/     202 : 84E4                		mov.b	@(mspr_src_w,r14),r0
(2)  325/     204 : 620C                		extu.b	r0,r2
(2)  326/     206 : 84E5                		mov.b	@(mspr_src_h,r14),r0
(2)  327/     208 : 640C                		extu.b	r0,r4
(2)  328/     20A : E100                		mov	#0,r1
(2)  329/     20C : E300                		mov	#0,r3
(2)  330/     20E : 84E7                		mov.b	@(mspr_frame_x,r14),r0
(2)  331/     210 : 650C                		extu.b	r0,r5
(2)  332/     212 : 84E8                		mov.b	@(mspr_frame_y,r14),r0
(2)  333/     214 : 660C                		extu.b	r0,r6
(2)  334/     216 : 264E                		mulu	r4,r6
(2)  335/     218 : 001A                		sts	macl,r0
(2)  336/     21A : 330C                		add	r0,r3
(2)  337/     21C : 340C                		add	r0,r4
(2)  338/     21E : 315C                		add	r5,r1
(2)  339/     220 : 325C                		add	r5,r2
(2)  340/     222 : 65D3                		mov	r13,r5
(2)  341/     224 : 7538                		add	#plygn_srcpnts+((4*2)*2),r5
(2)  342/     226 : 2545                		mov.w	r4,@-r5		;
(2)  343/     228 : 2525                		mov.w	r2,@-r5		; +X +Y
(2)  344/     22A : 2545                		mov.w	r4,@-r5		;
(2)  345/     22C : 2515                		mov.w	r1,@-r5		; -X +Y
(2)  346/     22E : 2535                		mov.w	r3,@-r5		;
(2)  347/     230 : 2515                		mov.w	r1,@-r5		; -X -Y
(2)  348/     232 : 2535                		mov.w	r3,@-r5		;
(2)  349/     234 : 2525                		mov.w	r2,@-r5		; +X -Y
(2)  350/     236 :                     
(2)  351/     236 :                     	; r1 | -X
(2)  352/     236 :                     	; r2 | +X
(2)  353/     236 :                     	; r3 | -Y
(2)  354/     236 :                     	; r4 | +Y
(2)  355/     236 : 84E2                		mov.b	@(mspr_size_w,r14),r0
(2)  356/     238 : 4000                		shll	r0
(2)  357/     23A : 620C                		extu.b	r0,r2
(2)  358/     23C : 612B                		neg	r2,r1
(2)  359/     23E : 84E3                		mov.b	@(mspr_size_h,r14),r0
(2)  360/     240 : 4000                		shll	r0
(2)  361/     242 : 640C                		extu.b	r0,r4
(2)  362/     244 : 634B                		neg	r4,r3
(2)  363/     246 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  364/     248 : C801                		tst	#%00000001,r0			; 3D flag?
(2)  365/     24A : 8B0F                		bf	.not_oldpos
(2)  366/     24C : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  367/     24E :                     ; 		shlr2	r0
(2)  368/     24E : 650F                		exts.w	r0,r5
(2)  369/     250 : 315C                		add	r5,r1
(2)  370/     252 : 325C                		add	r5,r2
(2)  371/     254 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  372/     256 :                     ; 		shlr2	r0
(2)  373/     256 : 660F                		exts.w	r0,r6
(2)  374/     258 : 336C                		add	r6,r3
(2)  375/     25A : 346C                		add	r6,r4
(2)  376/     25C : 4109                		shlr2	r1
(2)  377/     25E : 4209                		shlr2	r2
(2)  378/     260 : 4309                		shlr2	r3
(2)  379/     262 : 4409                		shlr2	r4
(2)  380/     264 : 611F                		exts.w	r1,r1
(2)  381/     266 : 622F                		exts.w	r2,r2
(2)  382/     268 : 633F                		exts.w	r3,r3
(2)  383/     26A : 644F                		exts.w	r4,r4
(2)  384/     26C :                     .not_oldpos:
(2)  385/     26C : 65D3                		mov	r13,r5
(2)  386/     26E : 7528                		add	#plygn_points+((4*2)*4),r5
(2)  387/     270 : 2546                		mov	r4,@-r5		;
(2)  388/     272 : 2526                		mov	r2,@-r5		; +X +Y
(2)  389/     274 : 2546                		mov	r4,@-r5		;
(2)  390/     276 : 2516                		mov	r1,@-r5		; -X +Y
(2)  391/     278 : 2536                		mov	r3,@-r5		;
(2)  392/     27A : 2516                		mov	r1,@-r5		; -X -Y
(2)  393/     27C : 2536                		mov	r3,@-r5		;
(2)  394/     27E : 2526                		mov	r2,@-r5		; +X -Y
(2)  395/     280 :                     
(2)  396/     280 :                     	; Inside 3D
(2)  397/     280 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  398/     282 : C801                		tst	#%00000001,r0		; 3D flag?
(2)  399/     284 : 8938                		bt	.not_plyfld
(2)  400/     286 : 61D3                		mov	r13,r1
(2)  401/     288 : 7108                		add	#plygn_points,r1
(2)  402/     28A : E504                		mov	#4,r5
(2)  403/     28C : E800                		mov	#0,r8
(2)  404/     28E :                     .mk_point:
(2)  405/     28E : 6212                		mov	@r1,r2
(2)  406/     290 : 4209                		shlr2	r2
(2)  407/     292 : 5311                		mov	@(4,r1),r3
(2)  408/     294 : 4309                		shlr2	r3
(2)  409/     296 : 622F                		exts.w	r2,r2
(2)  410/     298 : 633F                		exts.w	r3,r3
(2)  411/     29A : B03D                		bsr	mdlrd_setsppt
(2)  412/     29C : E400                		mov	#0,r4			; TEMPORAL Z
(2)  413/     29E : 2122                		mov	r2,@r1
(2)  414/     2A0 : 1131                		mov	r3,@(4,r1)
(2)  415/     2A2 : 3843                		cmp/ge	r4,r8
(2)  416/     2A4 : 8B00                		bf	.lower_z
(2)  417/     2A6 : 6843                		mov	r4,r8
(2)  418/     2A8 :                     .lower_z:
(2)  419/     2A8 : 4510                		dt	r5
(2)  420/     2AA : 8FF0                		bf/s	.mk_point
(2)  421/     2AC : 7108                		add	#8,r1
(2)  422/     2AE : 4811                		cmp/pz	r8
(2)  423/     2B0 : 8928                		bt	.bad_face
(2)  424/     2B2 : D717                		mov	#RAM_Mars_ObjCamera,r7
(2)  425/     2B4 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  426/     2B6 : 4009                		shlr2	r0
(2)  427/     2B8 : 600F                		exts.w	r0,r0
(2)  428/     2BA : 912B                		mov	#MAX_ZDIST>>2,r1
(2)  429/     2BC : 4108                		shll2	r1
(2)  430/     2BE : 4011                		cmp/pz	r0
(2)  431/     2C0 : 8B00                		bf	.z_plus
(2)  432/     2C2 : 600B                		neg	r0,r0
(2)  433/     2C4 :                     .z_plus:
(2)  434/     2C4 : 310C                		add	r0,r1
(2)  435/     2C6 : 3813                		cmp/ge	r1,r8
(2)  436/     2C8 : 8B1C                		bf	.bad_face
(2)  437/     2CA :                     	; X/Y checks
(2)  438/     2CA : 6AD3                		mov	r13,r10
(2)  439/     2CC : 7A08                		add	#plygn_points,r10
(2)  440/     2CE : 61A3                		mov	r10,r1
(2)  441/     2D0 : E4D6                		mov	#-(SET_MSCRLWDTH/2)>>2,r4
(2)  442/     2D2 : 4408                		shll2	r4
(2)  443/     2D4 : B132                		bsr	mdl_get_hilow
(2)  444/     2D6 : 654B                		neg	r4,r5
(2)  445/     2D8 : 3247                		cmp/gt	r4,r2
(2)  446/     2DA : 8B13                		bf	.bad_face
(2)  447/     2DC : 3353                		cmp/ge	r5,r3
(2)  448/     2DE : 8911                		bt	.bad_face
(2)  449/     2E0 : 61A3                		mov	r10,r1
(2)  450/     2E2 : 7104                		add	#4,r1
(2)  451/     2E4 : E4E4                		mov	#-(224/2)>>2,r4
(2)  452/     2E6 : 4408                		shll2	r4
(2)  453/     2E8 : B128                		bsr	mdl_get_hilow
(2)  454/     2EA : 654B                		neg	r4,r5
(2)  455/     2EC : 3247                		cmp/gt	r4,r2
(2)  456/     2EE : 8B09                		bf	.bad_face
(2)  457/     2F0 : 3353                		cmp/ge	r5,r3
(2)  458/     2F2 : 8907                		bt	.bad_face
(2)  459/     2F4 : A001                		bra	.mk_face
(2)  460/     2F6 : 0009                		nop
(2)  461/     2F8 :                     .not_plyfld:
(2)  462/     2F8 : E800                		mov	#0,r8			; TODO
(2)  463/     2FA :                     .mk_face:
(2)  464/     2FA : 2C82                		mov	r8,@r12			; Z position
(2)  465/     2FC : 1CD1                		mov	r13,@(4,r12)		; Polygon pointer
(2)  466/     2FE : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  467/     300 : 7C08                		add	#8,r12			; Next Z storage
(2)  468/     302 : 7B01                		add	#1,r11			; Mark as a valid face
(2)  469/     304 :                     
(2)  470/     304 :                     .bad_face:
(2)  471/     304 : 4F26                		lds	@r15+,pr
(2)  472/     306 : 000B                		rts
(2)  473/     308 : 0009                		nop
(2)  474/     30A :                     		align 4
(2)  475/     30C :                     
(2)  476/     30C :                     ; ----------------------------------------
(2)  477/     30C :                     
(2)  478/     30C : 0000 8000 0600      		ltorg
              312 : 7310 FF60          
(2)  479/     316 :                     
(2)  480/     316 :                     ; ----------------------------------------
(2)  481/     316 :                     ; Modify position to current point
(2)  482/     316 :                     ; ----------------------------------------
(2)  483/     316 :                     
(2)  484/     316 :                     ; r2 - X
(2)  485/     316 :                     ; r3 - Y
(2)  486/     316 :                     ; r4 - Z
(2)  487/     316 :                     		align 4
(2)  488/     318 :                     mdlrd_setsppt:
(2)  489/     318 : 4F22                		sts	pr,@-r15
(2)  490/     31A : 2F56                		mov 	r5,@-r15
(2)  491/     31C : 2F66                		mov 	r6,@-r15
(2)  492/     31E : 2F76                		mov 	r7,@-r15
(2)  493/     320 : 2F86                		mov 	r8,@-r15
(2)  494/     322 : 2F96                		mov 	r9,@-r15
(2)  495/     324 : 2FA6                		mov 	r10,@-r15
(2)  496/     326 : 2FB6                		mov 	r11,@-r15
(2)  497/     328 :                     
(2)  498/     328 :                     	; Object rotation
(2)  499/     328 : 6523                		mov	r2,r5			; r5 - X
(2)  500/     32A : 6643                		mov	r4,r6			; r6 - Z
(2)  501/     32C : 85ED                  		mov.w 	@(mspr_y_rot,r14),r0
(2)  502/     32E : B179                		bsr	mdlrd_rotate
(2)  503/     330 : 4008                  		shll2	r0
(2)  504/     332 : 6273                   		mov	r7,r2
(2)  505/     334 : 6533                   		mov	r3,r5			; r5 - Y
(2)  506/     336 : 6683                  		mov	r8,r6
(2)  507/     338 : 85EB                  		mov.w 	@(mspr_x_rot,r14),r0
(2)  508/     33A : B173                		bsr	mdlrd_rotate
(2)  509/     33C : 4008                  		shll2	r0
(2)  510/     33E : 6483                   		mov	r8,r4			; UPDATE Z
(2)  511/     340 : 6523                		mov	r2,r5			; r5 - X
(2)  512/     342 : 6673                   		mov	r7,r6
(2)  513/     344 : 85EC                  		mov.w 	@(mspr_z_rot,r14),r0
(2)  514/     346 : B16D                		bsr	mdlrd_rotate
(2)  515/     348 : 4008                   		shll2	r0
(2)  516/     34A : 6273                   		mov	r7,r2			; UPDATE X
(2)  517/     34C : 6383                   		mov	r8,r3			; UPDATE Y
(2)  518/     34E :                     
(2)  519/     34E : 0009                   		nop
(2)  520/     350 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  521/     352 : C802                		tst	#%00000010,r0
(2)  522/     354 : 8914                		bt	.no_facecam
(2)  523/     356 : DB0F                		mov	#RAM_Mars_ObjCamera,r11
(2)  524/     358 : 6523                		mov	r2,r5			; r5 - X
(2)  525/     35A : 6643                		mov	r4,r6			; r6 - Z
(2)  526/     35C : 50B4                  		mov	@(mcam_y_rot,r11),r0
(2)  527/     35E : 600B                  		neg	r0,r0
(2)  528/     360 : B160                		bsr	mdlrd_rotate
(2)  529/     362 : 4001                  		shlr	r0
(2)  530/     364 : 6273                   		mov	r7,r2
(2)  531/     366 : 6533                   		mov	r3,r5			; r5 - Y
(2)  532/     368 : 6683                  		mov	r8,r6
(2)  533/     36A : 50B3                  		mov	@(mcam_x_rot,r11),r0
(2)  534/     36C : 600B                  		neg	r0,r0
(2)  535/     36E : B159                		bsr	mdlrd_rotate
(2)  536/     370 : 4001                  		shlr	r0
(2)  537/     372 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  538/     374 : 6523                		mov	r2,r5			; r5 - X
(2)  539/     376 : 6673                   		mov	r7,r6
(2)  540/     378 : 50B5                  		mov	@(mcam_z_rot,r11),r0
(2)  541/     37A : 600B                  		neg	r0,r0
(2)  542/     37C : B152                		bsr	mdlrd_rotate
(2)  543/     37E : 4001                   		shlr	r0
(2)  544/     380 :                     .no_facecam:
(2)  545/     380 : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  546/     382 : 650F                		exts.w	r0,r5
(2)  547/     384 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  548/     386 : 660F                		exts.w	r0,r6
(2)  549/     388 : 85EA                		mov.w	@(mspr_z_pos,r14),r0
(2)  550/     38A : 670F                		exts.w	r0,r7
(2)  551/     38C : 325C                		add 	r5,r2
(2)  552/     38E : 336C                		add 	r6,r3
(2)  553/     390 : A106                   		bra	mdlrd_persp
(2)  554/     392 : 347C                		add 	r7,r4
(2)  555/     394 :                        		align 4
(2)  556/     394 : 0600 7310              		ltorg
(2)  557/     398 :                     
(2)  558/     398 :                     ; ------------------------------------------------
(2)  559/     398 :                     ; Read model
(2)  560/     398 :                     ;
(2)  561/     398 :                     ; r14 - Current model data
(2)  562/     398 :                     ; r13 - Current polygon
(2)  563/     398 :                     ; r12 - Z storage
(2)  564/     398 :                     ; r11 - Used faces counter
(2)  565/     398 :                     ; ------------------------------------------------
(2)  566/     398 :                     
(2)  567/     398 :                     ; Mdl_Object:
(2)  568/     398 :                     ; 		dc.w num_faces,num_vertex_old
(2)  569/     398 :                     ; 		dc.l .vert,.face,.vrtx,.mtrl
(2)  570/     398 :                     ; .vert:	binclude "data/mars/objects/mdl/test/vert.bin"
(2)  571/     398 :                     ; .face:	binclude "data/mars/objects/mdl/test/face.bin"
(2)  572/     398 :                     ; .vrtx:	binclude "data/mars/objects/mdl/test/vrtx.bin"
(2)  573/     398 :                     ; .mtrl:	include "data/mars/objects/mdl/test/mtrl.asm"
(2)  574/     398 :                     ;
(2)  575/     398 :                     		align 4
(2)  576/     398 :                     MarsMdl_ReadModel:
(2)  577/     398 : 4F22                		sts	pr,@-r15
(2)  578/     39A : 0009                		nop
(2)  579/     39C : 5AE1                		mov	@(mmdl_data,r14),r10	; r10 - Model header
(2)  580/     39E : 0009                		nop
(2)  581/     3A0 : 69A1                		mov.w	@r10,r9			;  r9 - Number of polygons of this model
(2)  582/     3A2 : 699D                		extu.w	r9,r9
(2)  583/     3A4 : 58A2                		mov 	@(8,r10),r8		;  r8 - face data
(2)  584/     3A6 : 38AC                		add	r10,r8
(2)  585/     3A8 : 57A1                		mov	@(4,r10),r7		;  r7 - Vertex data
(2)  586/     3AA : 37AC                		add	r10,r7
(2)  587/     3AC :                     .next_face:
(2)  588/     3AC : 90C4                		mov	#MAX_FACES,r0
(2)  589/     3AE : 3B03                		cmp/ge	r0,r11
(2)  590/     3B0 : 8B01                		bf	.valid
(2)  591/     3B2 : A0BB                		bra	.exit
(2)  592/     3B4 : 6B03                		mov	r0,r11
(2)  593/     3B6 :                     .valid:
(2)  594/     3B6 : 6085                		mov.w	@r8+,r0
(2)  595/     3B8 : 6503                		mov	r0,r5			; r5 - Face type
(2)  596/     3BA : E604                		mov	#4,r6			; r6 - number of vertex (quad or tri)
(2)  597/     3BC : 4019                		shlr8	r0			;
(2)  598/     3BE : C840                		tst	#PLGN_TRI,r0
(2)  599/     3C0 : 8900                		bt	.quad			; bit 0 = quad
(2)  600/     3C2 : 4610                		dt	r6
(2)  601/     3C4 :                     .quad:
(2)  602/     3C4 : 64D3                		mov	r13,r4
(2)  603/     3C6 : 4515                		cmp/pl	r5			; Solid or texture? ($8xxx)
(2)  604/     3C8 : 8B0A                		bf	.has_uv
(2)  605/     3CA :                     
(2)  606/     3CA :                     ; --------------------------------
(2)  607/     3CA :                     ; Face is solid color
(2)  608/     3CA : 6053                		mov	r5,r0
(2)  609/     3CC : 600C                		extu.b	r0,r0
(2)  610/     3CE : E360                		mov	#%01100000,r3
(2)  611/     3D0 : 4300                		shll	r3
(2)  612/     3D2 : 4318                		shll8	r3
(2)  613/     3D4 : 2539                		and	r3,r5
(2)  614/     3D6 : 4528                		shll16	r5
(2)  615/     3D8 : 1401                		mov	r0,@(plygn_mtrl,r4)
(2)  616/     3DA : A037                		bra	.mk_face
(2)  617/     3DC : 1450                		mov	r5,@(plygn_type,r4)
(2)  618/     3DE :                     		align 4
(2)  619/     3E0 :                     
(2)  620/     3E0 :                     ; --------------------------------
(2)  621/     3E0 :                     ; Face has UV settings
(2)  622/     3E0 :                     
(2)  623/     3E0 :                     .has_uv:
(2)  624/     3E0 : 51A3                		mov	@($C,r10),r1		; r1 - Grab UV points
(2)  625/     3E2 : 31AC                		add	r10,r1
(2)  626/     3E4 : 6063                		mov	r6,r0
(2)  627/     3E6 : 62D3                		mov	r13,r2			; r2 - Output to polygon
(2)  628/     3E8 : 7228                		add	#plygn_srcpnts,r2
(2)  629/     3EA : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  630/     3EC : 8906                		bt	.uv_tri
(2)  631/     3EE : 0009                		nop
(2)  632/     3F0 : 6085                		mov.w	@r8+,r0			; Do quad point
(2)  633/     3F2 : 600D                		extu.w	r0,r0
(2)  634/     3F4 : 4008                		shll2	r0
(2)  635/     3F6 : 001E                		mov	@(r1,r0),r0
(2)  636/     3F8 : 2202                		mov	r0,@r2
(2)  637/     3FA : 7204                		add	#4,r2
(2)  638/     3FC :                     .uv_tri:
(2)  639/     3FC :                     	rept 3					; Grab UV points 3 times
(2)  640/     3FC :                     		mov.w	@r8+,r0
(2)  641/     3FC :                     		extu.w	r0,r0
(2)  642/     3FC :                     		shll2	r0
(2)  643/     3FC :                     		mov	@(r1,r0),r0
(2)  644/     3FC :                     		mov	r0,@r2
(2)  645/     3FC :                     		add	#4,r2
(2)  646/     3FC :                     	endm
(2)  640/     3FC : 6085                		mov.w	@r8+,r0
(2)  641/     3FE : 600D                		extu.w	r0,r0
(2)  642/     400 : 4008                		shll2	r0
(2)  643/     402 : 001E                		mov	@(r1,r0),r0
(2)  644/     404 : 2202                		mov	r0,@r2
(2)  645/     406 : 7204                		add	#4,r2
(2)  640/     408 : 6085                		mov.w	@r8+,r0
(2)  641/     40A : 600D                		extu.w	r0,r0
(2)  642/     40C : 4008                		shll2	r0
(2)  643/     40E : 001E                		mov	@(r1,r0),r0
(2)  644/     410 : 2202                		mov	r0,@r2
(2)  645/     412 : 7204                		add	#4,r2
(2)  640/     414 : 6085                		mov.w	@r8+,r0
(2)  641/     416 : 600D                		extu.w	r0,r0
(2)  642/     418 : 4008                		shll2	r0
(2)  643/     41A : 001E                		mov	@(r1,r0),r0
(2)  644/     41C : 2202                		mov	r0,@r2
(2)  645/     41E : 7204                		add	#4,r2
(2)  647/     420 : 51A4                		mov	@($10,r10),r1		; r1 - Read material list
(2)  648/     422 : 31AC                		add	r10,r1
(2)  649/     424 : 6053                		mov	r5,r0			; r0 - Material slot
(2)  650/     426 : C9FF                		and	#$FF,r0
(2)  651/     428 : 4008                		shll2	r0			; *8
(2)  652/     42A : 4000                		shll	r0
(2)  653/     42C : 310C                		add	r0,r1			; Increment r1 into mtrl slot
(2)  654/     42E : E360                		mov	#%01100000,r3
(2)  655/     430 : 4300                		shll	r3
(2)  656/     432 : 4318                		shll8	r3			; r3 - $C0
(2)  657/     434 : 2539                		and	r3,r5			; Filter settings bits
(2)  658/     436 :                     
(2)  659/     436 :                     	; dc.l pointer
(2)  660/     436 :                     	; dc.w tex_wdth
(2)  661/     436 :                     	; dc.w indx
(2)  662/     436 : 5011                		mov	@(4,r1),r0		; r0 - Texture width
(2)  663/     438 : 6203                		mov	r0,r2
(2)  664/     43A : 600D                		extu.w	r0,r0
(2)  665/     43C :                     
(2)  666/     43C : 4229                		shlr16	r2
(2)  667/     43E : 252B                		or	r2,r5
(2)  668/     440 :                     ; 		or	r0,r5
(2)  669/     440 : 6312                		mov	@r1,r3			; r3 - Texture ROM pointer
(2)  670/     442 : 4528                		shll16	r5
(2)  671/     444 : 250B                		or	r0,r5
(2)  672/     446 :                     ; 		mov	@(mmdl_option,r14),r0
(2)  673/     446 :                     ; 		extu.b	r0,r0
(2)  674/     446 : 1431                		mov	r3,@(plygn_mtrl,r4)
(2)  675/     448 :                     ; 		or	r0,r5
(2)  676/     448 : 1450                		mov	r5,@(plygn_type,r4)
(2)  677/     44A : 0009                		nop
(2)  678/     44C :                     
(2)  679/     44C :                     .mk_face:
(2)  680/     44C : E500                		mov	#0,r5			; Z last pos
(2)  681/     44E :                     
(2)  682/     44E : 6143                		mov	r4,r1			; r1 - OUTPUT face (X/Y) points
(2)  683/     450 : 7108                		add 	#plygn_points,r1
(2)  684/     452 : 6063                		mov	r6,r0
(2)  685/     454 : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  686/     456 : 890D                		bt	.fc_tri
(2)  687/     458 : 6085                		mov.w 	@r8+,r0			; Do quad point
(2)  688/     45A : 600D                		extu.w	r0,r0
(2)  689/     45C : 6473                		mov	r7,r4
(2)  690/     45E : 340C                		add 	r0,r4
(2)  691/     460 : 6242                		mov	@r4,r2
(2)  692/     462 : 5341                		mov	@(4,r4),r3
(2)  693/     464 : B07A                		bsr	mdlrd_setpoint
(2)  694/     466 : 5442                		mov	@(8,r4),r4
(2)  695/     468 : 2122                		mov	r2,@r1
(2)  696/     46A : 1131                		mov	r3,@(4,r1)
(2)  697/     46C : 7108                		add	#8,r1
(2)  698/     46E : 3453                		cmp/ge	r5,r4			; Save LOWEST Z point
(2)  699/     470 : 8900                		bt	.fc_tri
(2)  700/     472 : 6543                		mov	r4,r5
(2)  701/     474 :                     .fc_tri:
(2)  702/     474 :                     	rept 3
(2)  703/     474 :                     		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     474 :                     		extu.w	r0,r0
(2)  705/     474 :                     		mov	r7,r4			; r2 - vertex data + index
(2)  706/     474 :                     		add 	r0,r4
(2)  707/     474 :                     		mov	@r4,r2
(2)  708/     474 :                     		mov	@(4,r4),r3
(2)  709/     474 :                     		bsr	mdlrd_setpoint
(2)  710/     474 :                     		mov	@(8,r4),r4
(2)  711/     474 :                     		mov	r2,@r1
(2)  712/     474 :                     		mov	r3,@(4,r1)
(2)  713/     474 :                     		add	#8,r1
(2)  714/     474 :                     		cmp/ge	r5,r4
(2)  715/     474 :                     		bt	.higher
(2)  716/     474 :                     		mov	r4,r5
(2)  717/     474 :                     .higher:
(2)  718/     474 :                     	endm
(2)  703/     474 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     476 : 600D                		extu.w	r0,r0
(2)  705/     478 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     47A : 340C                		add 	r0,r4
(2)  707/     47C : 6242                		mov	@r4,r2
(2)  708/     47E : 5341                		mov	@(4,r4),r3
(2)  709/     480 : B06C                		bsr	mdlrd_setpoint
(2)  710/     482 : 5442                		mov	@(8,r4),r4
(2)  711/     484 : 2122                		mov	r2,@r1
(2)  712/     486 : 1131                		mov	r3,@(4,r1)
(2)  713/     488 : 7108                		add	#8,r1
(2)  714/     48A : 3453                		cmp/ge	r5,r4
(2)  715/     48C : 8900                		bt	.higher
(2)  716/     48E : 6543                		mov	r4,r5
(2)  717/     490 :                     .higher:
(2)  703/     490 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     492 : 600D                		extu.w	r0,r0
(2)  705/     494 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     496 : 340C                		add 	r0,r4
(2)  707/     498 : 6242                		mov	@r4,r2
(2)  708/     49A : 5341                		mov	@(4,r4),r3
(2)  709/     49C : B05E                		bsr	mdlrd_setpoint
(2)  710/     49E : 5442                		mov	@(8,r4),r4
(2)  711/     4A0 : 2122                		mov	r2,@r1
(2)  712/     4A2 : 1131                		mov	r3,@(4,r1)
(2)  713/     4A4 : 7108                		add	#8,r1
(2)  714/     4A6 : 3453                		cmp/ge	r5,r4
(2)  715/     4A8 : 8900                		bt	.higher
(2)  716/     4AA : 6543                		mov	r4,r5
(2)  717/     4AC :                     .higher:
(2)  703/     4AC : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     4AE : 600D                		extu.w	r0,r0
(2)  705/     4B0 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     4B2 : 340C                		add 	r0,r4
(2)  707/     4B4 : 6242                		mov	@r4,r2
(2)  708/     4B6 : 5341                		mov	@(4,r4),r3
(2)  709/     4B8 : B050                		bsr	mdlrd_setpoint
(2)  710/     4BA : 5442                		mov	@(8,r4),r4
(2)  711/     4BC : 2122                		mov	r2,@r1
(2)  712/     4BE : 1131                		mov	r3,@(4,r1)
(2)  713/     4C0 : 7108                		add	#8,r1
(2)  714/     4C2 : 3453                		cmp/ge	r5,r4
(2)  715/     4C4 : 8900                		bt	.higher
(2)  716/     4C6 : 6543                		mov	r4,r5
(2)  717/     4C8 :                     .higher:
(2)  719/     4C8 :                     	; *** Z-offscreen check***
(2)  720/     4C8 : 470A                		lds	r7,mach
(2)  721/     4CA : 4511                		cmp/pz	r5
(2)  722/     4CC : 8928                		bt	.bad_face
(2)  723/     4CE : D719                		mov	#RAM_Mars_ObjCamera,r7
(2)  724/     4D0 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  725/     4D2 : 4009                		shlr2	r0
(2)  726/     4D4 : 600F                		exts.w	r0,r0
(2)  727/     4D6 : 9130                		mov	#MAX_ZDIST>>2,r1
(2)  728/     4D8 : 4108                		shll2	r1
(2)  729/     4DA : 4011                		cmp/pz	r0
(2)  730/     4DC : 8B00                		bf	.z_plus
(2)  731/     4DE : 600B                		neg	r0,r0
(2)  732/     4E0 :                     .z_plus:
(2)  733/     4E0 : 310C                		add	r0,r1
(2)  734/     4E2 : 3513                		cmp/ge	r1,r5
(2)  735/     4E4 : 8B1C                		bf	.bad_face
(2)  736/     4E6 : 451A                		lds	r5,macl
(2)  737/     4E8 :                     	; X/Y checks
(2)  738/     4E8 : 67D3                		mov	r13,r7
(2)  739/     4EA : 7708                		add	#plygn_points,r7
(2)  740/     4EC : 6173                		mov	r7,r1
(2)  741/     4EE : E52A                		mov	#(SET_MSCRLWDTH/2)>>2,r5
(2)  742/     4F0 : 4508                		shll2	r5
(2)  743/     4F2 : B023                		bsr	mdl_get_hilow
(2)  744/     4F4 : 645B                		neg	r5,r4
(2)  745/     4F6 : 3243                		cmp/ge	r4,r2
(2)  746/     4F8 : 8B12                		bf	.bad_face
(2)  747/     4FA : 3357                		cmp/gt	r5,r3
(2)  748/     4FC : 8910                		bt	.bad_face
(2)  749/     4FE : 6173                		mov	r7,r1
(2)  750/     500 : 7104                		add	#4,r1
(2)  751/     502 : E51E                		mov	#(SET_MSCRLHGHT/2)>>2,r5
(2)  752/     504 : 4508                		shll2	r5
(2)  753/     506 : B019                		bsr	mdl_get_hilow
(2)  754/     508 : 645B                		neg	r5,r4
(2)  755/     50A : 3243                		cmp/ge	r4,r2
(2)  756/     50C : 8B08                		bf	.bad_face
(2)  757/     50E : 3353                		cmp/ge	r5,r3
(2)  758/     510 : 8906                		bt	.bad_face
(2)  759/     512 :                     	; *** Valid face:
(2)  760/     512 : 001A                		sts	macl,r0
(2)  761/     514 : 2C02                		mov	r0,@r12
(2)  762/     516 : 1CD1                		mov	r13,@(4,r12)
(2)  763/     518 : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  764/     51A : 7C08                		add	#8,r12			; Next Z storage
(2)  765/     51C : 7B01                		add	#1,r11			; Mark as a valid face
(2)  766/     51E : 0009                		nop
(2)  767/     520 :                     .bad_face:
(2)  768/     520 : 070A                		sts	mach,r7
(2)  769/     522 : 4910                		dt	r9
(2)  770/     524 : 8902                		bt	.exit
(2)  771/     526 : AF41                		bra	.next_face
(2)  772/     528 : 0009                		nop
(2)  773/     52A :                     		align 4
(2)  774/     52C :                     .exit:
(2)  775/     52C : 4F26                		lds	@r15+,pr
(2)  776/     52E : 000B                		rts
(2)  777/     530 : 0009                		nop
(2)  778/     532 :                     		align 4
(2)  779/     534 : 0600 7310 0100      		ltorg
              53A : FF60             
(2)  780/     53C :                     
(2)  781/     53C :                     ; ----------------------------------------
(2)  782/     53C :                     ; X/Y off check
(2)  783/     53C :                     ; ----------------------------------------
(2)  784/     53C :                     
(2)  785/     53C :                     ; r1 - points
(2)  786/     53C :                     ; r4 - left maximum
(2)  787/     53C :                     ; r5 - right maximum
(2)  788/     53C :                     mdl_get_hilow:
(2)  789/     53C : E604                		mov	#4,r6
(2)  790/     53E : 6212                		mov	@r1,r2
(2)  791/     540 : 6323                		mov	r2,r3
(2)  792/     542 :                     .pick_next:
(2)  793/     542 : 6012                		mov	@r1,r0
(2)  794/     544 : 3047                		cmp/gt	r4,r0
(2)  795/     546 : 8B00                		bf	.x_l
(2)  796/     548 : 6203                		mov	r0,r2
(2)  797/     54A :                     .x_l:
(2)  798/     54A : 3053                		cmp/ge	r5,r0
(2)  799/     54C : 8900                		bt	.x_r
(2)  800/     54E : 6303                		mov	r0,r3
(2)  801/     550 :                     .x_r:
(2)  802/     550 : 4610                		dt	r6
(2)  803/     552 : 8FF6                		bf/s	.pick_next
(2)  804/     554 : 7108                		add	#8,r1
(2)  805/     556 : 000B                		rts
(2)  806/     558 : 0009                		nop
(2)  807/     55A :                     		align 4
(2)  808/     55C :                     
(2)  809/     55C :                     ; ----------------------------------------
(2)  810/     55C :                     ; Modify position to current point
(2)  811/     55C :                     ; ----------------------------------------
(2)  812/     55C :                     
(2)  813/     55C :                     ; r2 - X
(2)  814/     55C :                     ; r3 - Y
(2)  815/     55C :                     ; r4 - Z
(2)  816/     55C :                     		align 4
(2)  817/     55C :                     mdlrd_setpoint:
(2)  818/     55C : 4F22                		sts	pr,@-r15
(2)  819/     55E : 2F56                		mov 	r5,@-r15
(2)  820/     560 : 2F66                		mov 	r6,@-r15
(2)  821/     562 : 2F76                		mov 	r7,@-r15
(2)  822/     564 : 2F86                		mov 	r8,@-r15
(2)  823/     566 : 2F96                		mov 	r9,@-r15
(2)  824/     568 : 2FA6                		mov 	r10,@-r15
(2)  825/     56A : 2FB6                		mov 	r11,@-r15
(2)  826/     56C :                     	; Object rotation
(2)  827/     56C : 6523                		mov	r2,r5			; r5 - X
(2)  828/     56E : 6643                		mov	r4,r6			; r6 - Z
(2)  829/     570 : 50E7                  		mov	@(mmdl_y_rot,r14),r0
(2)  830/     572 : B057                  		bsr	mdlrd_rotate
(2)  831/     574 : 4021                  		shar	r0
(2)  832/     576 : 6273                   		mov	r7,r2
(2)  833/     578 : 6533                   		mov	r3,r5			; r5 - Y
(2)  834/     57A : 6683                  		mov	r8,r6
(2)  835/     57C : 50E5                  		mov	@(mmdl_x_rot,r14),r0
(2)  836/     57E : B051                  		bsr	mdlrd_rotate
(2)  837/     580 : 4021                  		shar	r0
(2)  838/     582 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  839/     584 : 6523                		mov	r2,r5			; r5 - X
(2)  840/     586 : 6673                   		mov	r7,r6
(2)  841/     588 : 50E6                   		mov	@(mmdl_z_rot,r14),r0
(2)  842/     58A : B04B                  		bsr	mdlrd_rotate
(2)  843/     58C : 4021                  		shar	r0
(2)  844/     58E : 6273                   		mov	r7,r2			; UPDATE X
(2)  845/     590 : 6383                   		mov	r8,r3			; UPDATE Y
(2)  846/     592 : 0009                   		nop
(2)  847/     594 : 55E2                		mov	@(mmdl_x_pos,r14),r5
(2)  848/     596 : 325C                		add 	r5,r2
(2)  849/     598 : 56E3                		mov	@(mmdl_y_pos,r14),r6
(2)  850/     59A : 336C                		add 	r6,r3
(2)  851/     59C : 57E4                		mov	@(mmdl_z_pos,r14),r7
(2)  852/     59E : 347C                		add 	r7,r4
(2)  853/     5A0 :                     
(2)  854/     5A0 :                     ; 		mov	@(mmdl_x_pos,r14),r0
(2)  855/     5A0 :                     ; 		exts.w	r0,r5
(2)  856/     5A0 :                     ; 		mov	@(mmdl_y_pos,r14),r0
(2)  857/     5A0 :                     ; 		exts.w	r0,r6
(2)  858/     5A0 :                     ; 		mov	@(mmdl_z_pos,r14),r0
(2)  859/     5A0 :                     ; 		exts.w	r0,r7
(2)  860/     5A0 :                     ; 		add 	r5,r2
(2)  861/     5A0 :                     ; 		add 	r6,r3
(2)  862/     5A0 :                     ; 		add 	r7,r4
(2)  863/     5A0 :                     mdlrd_persp:
(2)  864/     5A0 :                     	; Include camera changes
(2)  865/     5A0 : DB35                		mov	#RAM_Mars_ObjCamera,r11
(2)  866/     5A2 : 55B0                		mov	@(mcam_x_pos,r11),r5
(2)  867/     5A4 : 56B1                		mov	@(mcam_y_pos,r11),r6
(2)  868/     5A6 : 57B2                		mov	@(mcam_z_pos,r11),r7
(2)  869/     5A8 : 3258                		sub 	r5,r2
(2)  870/     5AA : 3368                		sub 	r6,r3
(2)  871/     5AC : 3478                		sub 	r7,r4
(2)  872/     5AE : 6523                		mov	r2,r5
(2)  873/     5B0 : 6643                		mov	r4,r6
(2)  874/     5B2 : 50B4                  		mov 	@(mcam_y_rot,r11),r0
(2)  875/     5B4 : B036                  		bsr	mdlrd_rotate
(2)  876/     5B6 : 4001                  		shlr	r0
(2)  877/     5B8 : 6273                   		mov	r7,r2
(2)  878/     5BA : 6483                   		mov	r8,r4
(2)  879/     5BC : 6533                   		mov	r3,r5
(2)  880/     5BE : 6683                  		mov	r8,r6
(2)  881/     5C0 : 50B3                  		mov 	@(mcam_x_rot,r11),r0
(2)  882/     5C2 : B02F                  		bsr	mdlrd_rotate
(2)  883/     5C4 : 4001                  		shlr	r0
(2)  884/     5C6 : 6483                   		mov	r8,r4
(2)  885/     5C8 : 6523                   		mov	r2,r5
(2)  886/     5CA : 6673                   		mov	r7,r6
(2)  887/     5CC : 50B5                   		mov 	@(mcam_z_rot,r11),r0
(2)  888/     5CE : B029                  		bsr	mdlrd_rotate
(2)  889/     5D0 : 4001                  		shlr	r0
(2)  890/     5D2 : 6273                   		mov	r7,r2
(2)  891/     5D4 : 6383                   		mov	r8,r3
(2)  892/     5D6 :                     	; Do perspective
(2)  893/     5D6 : D729                		mov	#320<<15,r7
(2)  894/     5D8 : 684B                		neg	r4,r8		; reverse Z
(2)  895/     5DA : 4815                		cmp/pl	r8
(2)  896/     5DC : 8906                		bt	.inside
(2)  897/     5DE : 6043                		mov	r4,r0
(2)  898/     5E0 :                     .patchme:
(2)  899/     5E0 : 4028                		shll16	r0
(2)  900/     5E2 : 4000                		shll	r0
(2)  901/     5E4 : 370C                		add	r0,r7
(2)  902/     5E6 : 4709                		shlr2	r7
(2)  903/     5E8 : A00A                		bra	.zmulti
(2)  904/     5EA : 4709                		shlr2	r7
(2)  905/     5EC :                     .inside:
(2)  906/     5EC : E918                		mov	#24,r9
(2)  907/     5EE : 3893                		cmp/ge	r9,r8
(2)  908/     5F0 : 8901                		bt	.center
(2)  909/     5F2 : AFF5                		bra	.patchme
(2)  910/     5F4 : 6043                		mov	r4,r0
(2)  911/     5F6 :                     
(2)  912/     5F6 :                     .center:
(2)  913/     5F6 : 9947                		mov 	#_JR,r9
(2)  914/     5F8 : 2982                		mov 	r8,@r9
(2)  915/     5FA : 1971                		mov 	r7,@(4,r9)
(2)  916/     5FC : 0009                		nop
(2)  917/     5FE : 5795                		mov 	@($14,r9),r7
(2)  918/     600 :                     .zmulti:
(2)  919/     600 : 327D                		dmuls	r7,r2
(2)  920/     602 : 000A                		sts	mach,r0
(2)  921/     604 : 021A                		sts	macl,r2
(2)  922/     606 : 220D                		xtrct	r0,r2
(2)  923/     608 : 337D                		dmuls	r7,r3
(2)  924/     60A : 000A                		sts	mach,r0
(2)  925/     60C : 031A                		sts	macl,r3
(2)  926/     60E : 230D                		xtrct	r0,r3
(2)  927/     610 : 6BF6                		mov	@r15+,r11
(2)  928/     612 : 6AF6                		mov	@r15+,r10
(2)  929/     614 : 69F6                		mov	@r15+,r9
(2)  930/     616 : 68F6                		mov	@r15+,r8
(2)  931/     618 : 67F6                		mov	@r15+,r7
(2)  932/     61A : 66F6                		mov	@r15+,r6
(2)  933/     61C : 65F6                		mov	@r15+,r5
(2)  934/     61E : 4F26                		lds	@r15+,pr
(2)  935/     620 : 000B                		rts
(2)  936/     622 : 0009                		nop
(2)  937/     624 :                     		align 4
(2)  938/     624 :                     
(2)  939/     624 :                     ; ------------------------------
(2)  940/     624 :                     ; Rotate point
(2)  941/     624 :                     ;
(2)  942/     624 :                     ; Entry:
(2)  943/     624 :                     ; r5: x
(2)  944/     624 :                     ; r6: y
(2)  945/     624 :                     ; r0: theta
(2)  946/     624 :                     ;
(2)  947/     624 :                     ; Returns:
(2)  948/     624 :                     ; r7: (x  cos @) + (y sin @)
(2)  949/     624 :                     ; r8: (x -sin @) + (y cos @)
(2)  950/     624 :                     ; ------------------------------
(2)  951/     624 :                     
(2)  952/     624 :                     		align 4
(2)  953/     624 :                     mdlrd_rotate:
(2)  954/     624 : 9731                    		mov	#$7FF,r7
(2)  955/     626 : 2079                    		and	r7,r0
(2)  956/     628 : 4008                   		shll2	r0
(2)  957/     62A : D715                		mov	#sin_table,r7
(2)  958/     62C : D815                		mov	#sin_table+$800,r8
(2)  959/     62E : 097E                		mov	@(r0,r7),r9
(2)  960/     630 : 0A8E                		mov	@(r0,r8),r10
(2)  961/     632 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  962/     634 : 071A                		sts	macl,r7
(2)  963/     636 : 000A                		sts	mach,r0
(2)  964/     638 : 270D                		xtrct	r0,r7
(2)  965/     63A : 396D                		dmuls	r6,r9		; y sin @
(2)  966/     63C : 081A                		sts	macl,r8
(2)  967/     63E : 000A                		sts	mach,r0
(2)  968/     640 : 280D                		xtrct	r0,r8
(2)  969/     642 : 378C                		add	r8,r7
(2)  970/     644 : 699B                		neg	r9,r9
(2)  971/     646 : 395D                		dmuls	r5,r9		; x -sin @
(2)  972/     648 : 081A                		sts	macl,r8
(2)  973/     64A : 000A                		sts	mach,r0
(2)  974/     64C : 280D                		xtrct	r0,r8
(2)  975/     64E : 3A6D                		dmuls	r6,r10		; y cos @
(2)  976/     650 : 091A                		sts	macl,r9
(2)  977/     652 : 000A                		sts	mach,r0
(2)  978/     654 : 290D                		xtrct	r0,r9
(2)  979/     656 : 389C                		add	r9,r8
(2)  980/     658 : 000B                 		rts
(2)  981/     65A : 0009                		nop
(2)  982/     65C :                     		align 4
(2)  983/     65C :                     
(2)  984/     65C :                     ; ====================================================================
(2)  985/     65C :                     
(2)  986/     65C :                     		align 4
(2)  987/     65C :                     Mars_CachePurge_S:
(2)  988/     65C : 9116                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2)  989/     65E : E010                		mov	#%10000,r0
(2)  990/     660 : 2100                		mov.b	r0,@r1
(2)  991/     662 : 0009                		nop
(2)  992/     664 : 0009                		nop
(2)  993/     666 : 0009                		nop
(2)  994/     668 : 0009                		nop
(2)  995/     66A : 0009                		nop
(2)  996/     66C : 0009                		nop
(2)  997/     66E : 0009                		nop
(2)  998/     670 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2)  999/     672 : 000B                		rts
(2) 1000/     674 : 2100                		mov.b	r0,@r1
(2) 1001/     676 :                     		align 4
(2) 1002/     678 :                     
(2) 1003/     678 :                     ; ====================================================================
(2) 1004/     678 :                     
(2) 1005/     678 : 0600 7310 00A0      		ltorg
              67E : 0000 0600 24D8 
              684 : 0600 2CD8 FF00 
              68A : 07FF FE92          
(2) 1006/     68E :                     
(2) 1007/     68E :                     ; ====================================================================
(2) 1008/     68E :                     
(2) 1009/     68E :                     			align $10
(2) 1010/     690 :                     CachSlv_CurrPage	ds.l 1
(2) 1011/     694 :                     
(2) 1012/     694 :                     ; ------------------------------------------------
(2) 1013/ 60024D8 :                     		dephase
(2) 1014/ 60024D8 :                     ; .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1015/ 60024D8 :                     
(2) 1016/ 60024D8 :                     		align 4
(2) 1017/ 60024D8 :                     CACHE_SLAVE_E:
(2) 1018/ 60024D8 : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_SLAVE_E-CACHE_SLAVE,$800
(2) 1019/ 60024D8 :                     
(1) 2424/ 60024D8 :                     
(1) 2425/ 60024D8 :                     ; ====================================================================
(1) 2426/ 60024D8 :                     ; ----------------------------------------------------------------
(1) 2427/ 60024D8 :                     ; Data
(1) 2428/ 60024D8 :                     ; ----------------------------------------------------------------
(1) 2429/ 60024D8 :                     
(1) 2430/ 60024D8 :                     		align 4
(1) 2431/ 60024D8 :                     sin_table	binclude "system/mars/data/sinedata.bin"
(1) 2432/ 6004CD8 :                     		align 4
(1) 2433/ 6004CD8 :                     
(1) 2434/ 6004CD8 :                     ; ====================================================================
(1) 2435/ 6004CD8 :                     ; ----------------------------------------------------------------
(1) 2436/ 6004CD8 :                     ; GLOBAL GBR Variables for MASTER
(1) 2437/ 6004CD8 :                     ; ----------------------------------------------------------------
(1) 2438/ 6004CD8 :                     
(1) 2439/ 6004CD8 :                     		align $10
(1) 2440/ 6004CE0 :                     RAM_Mars_Global:
(1) 2441/ 6004CE0 :                     
(1) 2442/       0 :                     marsGbl		struct
(1) 2443/       0 :                     ThisFrame	ds.w 1			; Current framebuffer number
(1) 2444/       2 :                     XShift		ds.w 1			; horizontal scroll & 1 bit (2D ONLY)
(1) 2445/       4 :                     WdgTask		ds.w 1			; Current Watchdog task
(1) 2446/       6 :                     WdgHold		ds.w 1			; Watchdog ignore (without turning it off)
(1) 2447/       8 :                     WdgDivLock	ds.w 1			; Watchdog division skip (for Textures only)
(1) 2448/       A :                     WdgReady	ds.w 1			; Flag to report that all polygons are finished slicing
(1) 2449/       C :                     PlyPzCntr	ds.w 1			; Number of polygon pieces to draw
(1) 2450/       E :                     WdgClLines	ds.w 1			; Number of lines to clear for WDG task $07
(1) 2451/      10 :                     WdgActive	ds.w 1
(1) 2452/      12 :                     		ds.w 1
(1) 2453/      14 :                     		ds.w 1
(1) 2454/      16 :                     DrawAll		ds.w 1
(1) 2455/      18 :                     3D_OutWidth	ds.l 1
(1) 2456/      1C :                     3D_OutHeight	ds.l 1
(1) 2457/      20 :                     DreqRead	ds.l 1			; **** RAM_Mars_DreqBuff_0|TH
(1) 2458/      24 :                     DreqWrite	ds.l 1			; RAM_Mars_DreqBuff_1|TH
(1) 2459/      28 :                     PlgnPzIndx_R	ds.l 1			; R/W piece indexes
(1) 2460/      2C :                     PlgnPzIndx_W	ds.l 1			;
(1) 2461/      30 :                     Scrl_Xpos	ds.l 1			; ****
(1) 2462/      34 :                     Scrl_Ypos	ds.l 1
(1) 2463/      38 :                     Scrl_Xold	ds.l 1
(1) 2464/      3C :                     Scrl_Yold	ds.l 1
(1) 2465/      40 :                     Scrl_Size	ds.l 1			; ****
(1) 2466/      44 :                     Scrl_Wdth	ds.l 1
(1) 2467/      48 :                     Scrl_Hght	ds.l 1
(1) 2468/      4C :                     Scrl_Vram	ds.l 1
(1) 2469/      50 :                     Scrl_FbOut	ds.l 1			; ****
(1) 2470/      54 :                     Scrl_FbTL	ds.l 1
(1) 2471/      58 :                     Scrl_FbY	ds.l 1
(1) 2472/      5C :                     Scrl_FbX	ds.l 1
(1) 2473/      60 :                     ; len		ds.l 0
(1) 2474/ 6004CE0 : =$60                 		endstruct
(1) 2475/ 6004CE0 :                     		ds.b marsGbl_len
(1) 2476/ 6004D40 :                     
(1) 2477/ 6004D40 :                     ; ====================================================================
(1) 2478/ 6004D40 :                     ; ----------------------------------------------------------------
(1) 2479/ 6004D40 :                     ; NON-CACHED RAM
(1) 2480/ 6004D40 :                     ; ----------------------------------------------------------------
(1) 2481/ 6004D40 :                     
(1) 2482/ 6004D40 :                     			align $10
(1) 2483/ 6004D40 :                     SH2_RAM_TH:
(1) 2484/26004D40 :                     			phase SH2_RAM_TH|TH
(1) 2485/26004D40 :                     RAM_Mars_DreqBuff_0	ds.b Dreq_len				; DREQ data from Genesis
(1) 2486/26005760 :                     RAM_Mars_DreqBuff_1	ds.b Dreq_len				; ****
(1) 2487/26006180 :                     RAM_Mars_PwmTable	ds.b 8*8				; GEMA Z80 table
(1) 2488/260061C0 :                     RAM_Mars_PwmList	ds.b marspwm_len*MAX_PWMCHNL		; PWM list
(1) 2489/26006300 :                     RAM_Mars_PwmBackup	ds.b $200*MAX_PWMCHNL			; RV PWM backup buffer
(1) 2490/26007300 :                     RAM_Mars_CurrPlgnPage	ds.l 1
(1) 2491/ 6007304 :                     			dephase
(1) 2492/ 6007304 :                     
(1) 2493/ 6007304 :                     ; ====================================================================
(1) 2494/ 6007304 :                     ; ----------------------------------------------------------------
(1) 2495/ 6007304 :                     ; CACHED RAM
(1) 2496/ 6007304 :                     ;
(1) 2497/ 6007304 :                     ; Flush the cache often when using this.
(1) 2498/ 6007304 :                     ; ----------------------------------------------------------------
(1) 2499/ 6007304 :                     
(1) 2500/ 6007304 :                     			align $10
(1) 2501/ 6007310 :                     SH2_RAM:
(1) 2502/ 6007310 :                     			ds.b $8800				; <-- Maximum RAM for the fake-Video modes
(1) 2503/ 600FB10 :                     RAM_Mars_VramData	ds.b MAX_MarsVram			; ** SHARED
(1) 2504/ 6027B10 :                     			align $10
(1) 2505/ 6027B10 :                     
(1) 2506/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2507/ 6027B10 :                     ; RAM section for 2D
(1) 2508/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2509/ 6027B10 :                     
(1) 2510/ 6027B10 : (MACRO)              			memory SH2_RAM
(1) 2510/ 6027B10 : =$6027B10            GLBL_LASTPC     := *
(1) 2510/   42310 :                                     dephase
(1) 2510/ 6007310 :                                     phase SH2_RAM
(1) 2510/ 6007310 : =$6007310            GLBL_LASTORG    := *
(1) 2511/ 6007310 :                     RAM_Mars_SprDrwCanvas	ds.b 320*92
(1) 2512/ 600E610 :                     sizeof_marsram_0	ds.l 0
(1) 2513/ 600E610 : (MACRO)              			endmemory
(1) 2513/   49610 :                     .here:          dephase
(1) 2513/   49610 :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2513/ 6027B10 :                                     phase GLBL_LASTPC
(1) 2514/ 6027B10 : (MACRO)              			erreport "2D section",sizeof_marsram_0-SH2_RAM,$8800
(1) 2515/ 6027B10 :                     
(1) 2516/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2517/ 6027B10 :                     ; RAM section for 3D
(1) 2518/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2519/ 6027B10 :                     
(1) 2520/ 6027B10 : (MACRO)              			memory SH2_RAM
(1) 2520/ 6027B10 : =$6027B10            GLBL_LASTPC     := *
(1) 2520/   42310 :                                     dephase
(1) 2520/ 6007310 :                                     phase SH2_RAM
(1) 2520/ 6007310 : =$6007310            GLBL_LASTORG    := *
(1) 2521/ 6007310 :                     RAM_Mars_Buff3D_Start	ds.l 0				; <-- ****
(1) 2522/ 6007310 :                     RAM_Mars_ObjCamera	ds.b $40			; Object camera
(1) 2523/ 6007350 :                     RAM_Mars_Objects	ds.b mmdl_len*MAX_MARSOBJ	; Objects
(1) 2524/ 6007650 :                     RAM_Mars_SprPolygn	ds.b mspr_len*MAX_MARSMSPR
(1) 2525/ 6007A50 :                     RAM_Mars_Polygons_0	ds.b plygn_len*MAX_FACES	; Read/Write polygon data
(1) 2526/ 600B250 :                     RAM_Mars_Polygons_1	ds.b plygn_len*MAX_FACES
(1) 2527/ 600EA50 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES*2		; Polygon order list: Zpos, pointer
(1) 2528/ 600F250 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES*2
(1) 2529/ 600FA50 :                     RAM_Mars_PlgnNum_0	ds.l 1
(1) 2530/ 600FA54 :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2531/ 600FA58 :                     RAM_Mars_Buff3D_End	ds.l 0				; <-- ****
(1) 2532/ 600FA58 :                     sizeof_marsram_1	ds.l 0
(1) 2533/ 600FA58 : (MACRO)              			endmemory
(1) 2533/   4AA58 :                     .here:          dephase
(1) 2533/   4AA58 :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2533/ 6027B10 :                                     phase GLBL_LASTPC
(1) 2534/ 6027B10 : (MACRO)              			erreport "3D section",sizeof_marsram_1-SH2_RAM,$8800
(1) 2535/ 6027B10 :                     
(1) 2536/ 6027B10 :                     ; ====================================================================
(1) 2537/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2538/ 6027B10 :                     ; USER DATA GOES HERE
(1) 2539/ 6027B10 :                     ; ----------------------------------------------------------------
(1) 2540/ 6027B10 :                     
(1) 2541/ 6027B10 :                     SH2_USER_DATA:
(1) 2542/ 6027B10 :                     		include "sound/smpl_pwm.asm"			; GEMA: PWM samples
(2)    1/ 6027B10 :                     ; ===========================================================================
(2)    2/ 6027B10 :                     ; -------------------------------------------------------------------
(2)    3/ 6027B10 :                     ; GEMA/Nikona PWM instruments located at SDRAM
(2)    4/ 6027B10 :                     ;
(2)    5/ 6027B10 :                     ; *** VERY LIMITED STORAGE ***
(2)    6/ 6027B10 :                     ; If you are using CD32X consider using PCM samples instead.
(2)    7/ 6027B10 :                     ;
(2)    8/ 6027B10 :                     ; MACRO:
(2)    9/ 6027B10 :                     ; gSmplData Label,"file_path",loop_start
(2)   10/ 6027B10 :                     ;
(2)   11/ 6027B10 :                     ; Set loop_start to 0 if not using it.
(2)   12/ 6027B10 :                     ;
(2)   13/ 6027B10 :                     ; BASE C-5 samplerate is 16000hz
(2)   14/ 6027B10 :                     ; -------------------------------------------------------------------
(2)   15/ 6027B10 :                     
(2)   16/ 6027B10 :                     	align 4
(2)   17/ 6027B10 :                     	;gSmplData Label,"file_path",loop_start
(2)   18/ 6027B10 :                     ; -----------------------------------------------------------
(2)   19/ 6027B10 :                     ; 	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(2)   20/ 6027B10 :                     
(2)   21/ 6027B10 : (MACRO)              	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(2)   21/ 6027B10 :                                     align 4
(2)   21/ 6027B10 : =$6027B10            PWMINS_TEST    label *
(2)   21/ 6027B10 : E0D7 00                     dc.b ((PWMINS_TEST_e-PWMINS_TEST_s)&$FF),(((PWMINS_TEST_e-PWMINS_TEST_s)>>8)&$FF),(((PWMINS_TEST_e-PWMINS_TEST_s)>>16)&$FF)
(2)   21/ 6027B13 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   21/ 6027B16 :                     PWMINS_TEST_s:
(2)   21/ 6027B16 :                             binclude "sound/instr/smpl/test_st.wav",$2C
(2)   21/ 60352F6 :                     PWMINS_TEST_e:
(2)   21/ 60352F6 :                                     align 4
(2)   22/ 60352F8 :                     
(1) 2543/ 60352F8 :                     		include "game/data/mars/objects/list.asm"
(2)    1/ 60352F8 :                     ; ===========================================================================
(2)    2/ 60352F8 :                     ; ----------------------------------------------------------------
(2)    3/ 60352F8 :                     ; Special include for the 3D models
(2)    4/ 60352F8 :                     ;
(2)    5/ 60352F8 :                     ; Data is available to both 32X Cartridge and CD32X
(2)    6/ 60352F8 :                     ; ----------------------------------------------------------------
(2)    7/ 60352F8 :                     
(2)    8/ 60352F8 :                     		include "game/data/mars/objects/test/head.asm"
(3)    1/ 60352F8 :                     MarsObj_test:
(3)    2/ 60352F8 : 00D2 00E6           		dc.w 210,230
(3)    3/ 60352FC : 0000 0014 0000      		dc.l .vert-MarsObj_test,.face-MarsObj_test,.vrtx-MarsObj_test,.mtrl-MarsObj_test
          6035302 : 0ADC 0000 12EC 
          6035308 : 0000 131C          
(3)    4/ 603530C :                     .vert:		binclude "game/data/mars/objects/test/vert.bin"
(3)    5/ 6035DD4 :                     .face:		binclude "game/data/mars/objects/test/face.bin"
(3)    6/ 60365E4 :                     .vrtx:		binclude "game/data/mars/objects/test/vrtx.bin"
(3)    7/ 6036614 :                     .mtrl:		include "game/data/mars/objects/test/mtrl.asm"
(4)    1/ 6036614 :                     
(3)    8/ 6036614 :                     		align 4
(2)    9/ 6036614 :                     		include "game/data/mars/objects/test_2/head.asm"
(3)    1/ 6036614 :                     MarsObj_test_2:
(3)    2/ 6036614 : 0004 0009           		dc.w 4,9
(3)    3/ 6036618 : 0000 0014 0000      		dc.l .vert-MarsObj_test_2,.face-MarsObj_test_2,.vrtx-MarsObj_test_2,.mtrl-MarsObj_test_2
          603661E : 0080 0000 00B0 
          6036624 : 0000 00E0          
(3)    4/ 6036628 :                     .vert:		binclude "game/data/mars/objects/test_2/vert.bin"
(3)    5/ 6036694 :                     .face:		binclude "game/data/mars/objects/test_2/face.bin"
(3)    6/ 60366C4 :                     .vrtx:		binclude "game/data/mars/objects/test_2/vrtx.bin"
(3)    7/ 60366F4 :                     .mtrl:		include "game/data/mars/objects/test_2/mtrl.asm"
(4)    1/ 60366F4 :                     
(3)    8/ 60366F4 :                     		align 4
(2)   10/ 60366F4 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(2)   11/ 60366F4 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(2)   12/ 60366F4 :                     
(1) 2544/ 60366F4 :                     
(1) 2545/ 60366F4 :                     ; ====================================================================
(1) 2546/ 60366F4 :                     
(1) 2547/ 60366F4 :                     .end:
(1) 2548/ 60366F4 : (MACRO)              		erreport "SH2 USER DATA",.end-SH2_USER_DATA,(CS3|$40000)-SH2_USER_DATA
(1) 2549/ 60366F4 :                     
(1) 2550/ 60366F4 :                     ; ====================================================================
(1) 2551/ 60366F4 :                     		align $10
(1) 2552/ 6036700 :                     SH2_END:
(1) 2553/ 6036700 :                     		cpu 68000
(1) 2554/ 6036700 :                     		padding off
(1) 2555/   50F00 :                     		dephase
(1) 2556/   50F00 :                     		phase (SH2_END-SH2_Master)+MARS_RAMCODE
(1) 2557/   50F00 :                     		align 4
(1) 2558/   50F00 :                     
     362/   50F00 :                     	; ------------------------------------------------
     366/   50F00 :                     MARS_RAMCODE_E:
     368/   50F00 : (MACRO)              		fs_end
     368/   50F00 : 00                                  dc.b 0
     368/   50F01 :                                     align $800                      ; Filler sector
     369/   51000 :                     MARS_RAMCODE_EOF:
     371/   51000 :                     
     372/   51000 :                     ; ====================================================================
     373/   51000 :                     ; --------------------------------------------------------
     374/   51000 :                     ; CODE BLOCK (banks)
     375/   51000 :                     ; --------------------------------------------------------
     376/   51000 :                     
     377/   51000 :                     		include "game/incl_code.asm"
(1)    1/   51000 :                     ; ============================================================
(1)    2/   51000 :                     ; --------------------------------------------------------
(1)    3/   51000 :                     ; CODE BANKS section
(1)    4/   51000 :                     ;
(1)    5/   51000 :                     ; Usage:
(1)    6/   51000 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/   51000 :                     ;
(1)    8/   51000 :                     ; NOTES:
(1)    9/   51000 :                     ; - Screen order is at game/screens.asm
(1)   10/   51000 :                     ; - DATA banks are loaded separately inside the
(1)   11/   51000 :                     ;   screen's code
(1)   12/   51000 :                     ; --------------------------------------------------------
(1)   13/   51000 :                     
(1)   14/   51000 :                     	;screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/   51000 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/   51000 :                                     align $800              ; SCD/CD32X sector align
(1)   15/   51000 : =$51000              MD_SCREEN00 label *
(1)   15/   51000 :                     
(1)   15/   51000 :                     mctopscrn:
(1)   15/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   15/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   15/FFFFFFFFFFFF2C00 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   20/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   21/FFFFFFFFFFFF2C00 :                     
(2)   22/FFFFFFFFFFFF2C00 :                     ; 			memory 2		; Cell $0002
(2)   23/FFFFFFFFFFFF2C00 :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/FFFFFFFFFFFF2C00 :                     ; 			endmemory
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   51000 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/   51008 :                     .here:          dephase
(2)   35/   51008 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 0112           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 F3D8           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 E878           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 F43E           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0021 52F4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 05A0           		move.w	#DEF_PrintVram,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E390           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 04E0           		move.w	#DEF_PrintVramW,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E37C           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E388           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41FA 00FC           		lea	str_MenuText(pc),a0			; Print the title string
(2)   62/FFFFFFFFFFFF2C40 : 7001                		moveq	#1,d0					; X/Y positions 1,1
(2)   63/FFFFFFFFFFFF2C42 : 7201                		moveq	#1,d1
(2)   64/FFFFFFFFFFFF2C44 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; FG VRAM location
(2)   65/FFFFFFFFFFFF2C48 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)   66/FFFFFFFFFFFF2C4E : 6100 E482           		bsr	Video_PrintW
(2)   67/FFFFFFFFFFFF2C52 : 6100 00AA           		bsr	.print_cursor				; Draw counter
(2)   68/FFFFFFFFFFFF2C56 : 6100 DA88           		bsr	Video_DisplayOn
(2)   69/FFFFFFFFFFFF2C5A :                     	; ----------------------------------------------
(2)   70/FFFFFFFFFFFF2C5A : 6100 E246           		bsr	Video_FadeIn_Full
(2)   71/FFFFFFFFFFFF2C5E :                     
(2)   72/FFFFFFFFFFFF2C5E :                     ; ====================================================================
(2)   73/FFFFFFFFFFFF2C5E :                     ; ------------------------------------------------------
(2)   74/FFFFFFFFFFFF2C5E :                     ; Loop
(2)   75/FFFFFFFFFFFF2C5E :                     ; ------------------------------------------------------
(2)   76/FFFFFFFFFFFF2C5E :                     
(2)   77/FFFFFFFFFFFF2C5E :                     .loop:
(2)   78/FFFFFFFFFFFF2C5E : 6100 F0FA           		bsr	System_Render
(2)   79/FFFFFFFFFFFF2C62 :                     
(2)   80/FFFFFFFFFFFF2C62 : 383C 0004           		move.w	#MAX_SC0_OPTIONS,d4
(2)   81/FFFFFFFFFFFF2C66 : 4DF8 E974           		lea	(Controller_1).w,a6
(2)   82/FFFFFFFFFFFF2C6A : 4BF8 B800           		lea	(RAM_SC0_CurrOption).w,a5
(2)   83/FFFFFFFFFFFF2C6E : 3E2E 0004           		move.w	on_press(a6),d7
(2)   84/FFFFFFFFFFFF2C72 : 0807 0001           		btst	#bitJoyDown,d7
(2)   85/FFFFFFFFFFFF2C76 : 670A                		beq.s	.not_down
(2)   86/FFFFFFFFFFFF2C78 : 5255                		addq.w	#1,(a5)
(2)   87/FFFFFFFFFFFF2C7A : 3C15                		move.w	(a5),d6
(2)   88/FFFFFFFFFFFF2C7C : BC44                		cmp.w	d4,d6
(2)   89/FFFFFFFFFFFF2C7E : 6F02                		ble.s	.not_down
(2)   90/FFFFFFFFFFFF2C80 : 4255                		clr.w	(a5)
(2)   91/FFFFFFFFFFFF2C82 :                     .not_down:
(2)   92/FFFFFFFFFFFF2C82 : 3E2E 0004           		move.w	on_press(a6),d7
(2)   93/FFFFFFFFFFFF2C86 : 0807 0000           		btst	#bitJoyUp,d7
(2)   94/FFFFFFFFFFFF2C8A : 6708                		beq.s	.not_up
(2)   95/FFFFFFFFFFFF2C8C : 5355                		subq.w	#1,(a5)
(2)   96/FFFFFFFFFFFF2C8E : 4A55                		tst.w	(a5)
(2)   97/FFFFFFFFFFFF2C90 : 6A02                		bpl.s	.not_up
(2)   98/FFFFFFFFFFFF2C92 : 3A84                		move.w	d4,(a5)
(2)   99/FFFFFFFFFFFF2C94 :                     .not_up:
(2)  100/FFFFFFFFFFFF2C94 : 3015                		move.w	(a5),d0
(2)  101/FFFFFFFFFFFF2C96 : 322D 0002           		move.w	2(a5),d1
(2)  102/FFFFFFFFFFFF2C9A : B041                		cmp.w	d1,d0
(2)  103/FFFFFFFFFFFF2C9C : 6708                		beq.s	.no_change
(2)  104/FFFFFFFFFFFF2C9E : 6140                		bsr	.print_full
(2)  105/FFFFFFFFFFFF2CA0 : 31F8 B800 B802      		move.w	(RAM_SC0_CurrOption).w,(RAM_SC0_OldOption).w
(2)  106/FFFFFFFFFFFF2CA6 :                     .no_change:
(2)  108/FFFFFFFFFFFF2CA6 : 6100 F806           		bsr	System_MdMcd_CheckHome
(2)  109/FFFFFFFFFFFF2CAA : 652C                		bcs.s	.exit_shell
(2)  111/FFFFFFFFFFFF2CAC : 4DF8 E974           		lea	(Controller_1).w,a6
(2)  112/FFFFFFFFFFFF2CB0 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  113/FFFFFFFFFFFF2CB4 : 0807 0007           		btst	#bitJoyStart,d7
(2)  114/FFFFFFFFFFFF2CB8 : 67A4                		beq.s	.loop
(2)  115/FFFFFFFFFFFF2CBA : 6100 E208           		bsr	Video_FadeOut_Full
(2)  116/FFFFFFFFFFFF2CBE : 7000                		moveq	#0,d0
(2)  117/FFFFFFFFFFFF2CC0 : 3038 B800           		move.w	(RAM_SC0_CurrOption).w,d0
(2)  118/FFFFFFFFFFFF2CC4 : D040                		add.w	d0,d0
(2)  119/FFFFFFFFFFFF2CC6 : 31FB 0006 FA10      		move.w	.ex_mode(pc,d0.w),(RAM_ScreenMode).w
(2)  120/FFFFFFFFFFFF2CCC : 4E75                		rts
(2)  121/FFFFFFFFFFFF2CCE :                     
(2)  122/FFFFFFFFFFFF2CCE :                     .ex_mode:
(2)  123/FFFFFFFFFFFF2CCE : 0001                		dc.w 1
(2)  124/FFFFFFFFFFFF2CD0 : 0002                		dc.w 2
(2)  125/FFFFFFFFFFFF2CD2 : 0003                		dc.w 3
(2)  126/FFFFFFFFFFFF2CD4 : 0004                		dc.w 4
(2)  127/FFFFFFFFFFFF2CD6 : 0007                		dc.w 7
(2)  128/FFFFFFFFFFFF2CD8 :                     
(2)  129/FFFFFFFFFFFF2CD8 :                     ; ------------------------------------------------------
(2)  130/FFFFFFFFFFFF2CD8 :                     
(2)  131/FFFFFFFFFFFF2CD8 :                     .exit_shell:
(2)  132/FFFFFFFFFFFF2CD8 : 6100 E1EA           		bsr	Video_FadeOut_Full
(2)  133/FFFFFFFFFFFF2CDC : 6000 F800           		bra	System_MdMcd_ExitShell
(2)  134/FFFFFFFFFFFF2CE0 :                     
(2)  135/FFFFFFFFFFFF2CE0 :                     ; ------------------------------------------------------
(2)  136/FFFFFFFFFFFF2CE0 :                     ; Show framecounter and input
(2)  137/FFFFFFFFFFFF2CE0 :                     ; ------------------------------------------------------
(2)  138/FFFFFFFFFFFF2CE0 :                     
(2)  139/FFFFFFFFFFFF2CE0 :                     .print_full:
(2)  140/FFFFFFFFFFFF2CE0 : 41FA 004C           		lea	str_MenuCursorOff(pc),a0
(2)  141/FFFFFFFFFFFF2CE4 : 7001                		moveq	#1,d0
(2)  142/FFFFFFFFFFFF2CE6 : 7205                		moveq	#5,d1
(2)  143/FFFFFFFFFFFF2CE8 : 3438 B802           		move.w	(RAM_SC0_OldOption).w,d2
(2)  144/FFFFFFFFFFFF2CEC : D442                		add.w	d2,d2
(2)  145/FFFFFFFFFFFF2CEE : D242                		add.w	d2,d1
(2)  146/FFFFFFFFFFFF2CF0 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  147/FFFFFFFFFFFF2CF4 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)  148/FFFFFFFFFFFF2CFA : 6100 E3D6           		bsr	Video_PrintW
(2)  149/FFFFFFFFFFFF2CFE :                     
(2)  150/FFFFFFFFFFFF2CFE :                     .print_cursor:
(2)  151/FFFFFFFFFFFF2CFE : 41FA 0034           		lea	str_MenuCursor(pc),a0
(2)  152/FFFFFFFFFFFF2D02 : 7001                		moveq	#1,d0
(2)  153/FFFFFFFFFFFF2D04 : 7205                		moveq	#5,d1
(2)  154/FFFFFFFFFFFF2D06 : 3438 B800           		move.w	(RAM_SC0_CurrOption).w,d2
(2)  155/FFFFFFFFFFFF2D0A : D442                		add.w	d2,d2
(2)  156/FFFFFFFFFFFF2D0C : D242                		add.w	d2,d1
(2)  157/FFFFFFFFFFFF2D0E : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  158/FFFFFFFFFFFF2D12 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)  159/FFFFFFFFFFFF2D18 : 6000 E3B8           		bra	Video_PrintW
(2)  160/FFFFFFFFFFFF2D1C :                     
(2)  161/FFFFFFFFFFFF2D1C :                     ; ====================================================================
(2)  162/FFFFFFFFFFFF2D1C :                     ; ------------------------------------------------------
(2)  163/FFFFFFFFFFFF2D1C :                     ; DATA asset locations
(2)  164/FFFFFFFFFFFF2D1C :                     ; ------------------------------------------------------
(2)  165/FFFFFFFFFFFF2D1C :                     
(2)  166/FFFFFFFFFFFF2D1C :                     file_scrn1_main:
(2)  167/FFFFFFFFFFFF2D1C : 0005 5800           		dc.l DATA_BANK0
(2)  168/FFFFFFFFFFFF2D20 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D26 : 494E 2E42 494E 00 
(2)  169/FFFFFFFFFFFF2D2D :                     		align 2
(2)  170/FFFFFFFFFFFF2D2E :                     ; file_scrn1_mars:
(2)  171/FFFFFFFFFFFF2D2E :                     ; 		dc.l DATA_BANK1
(2)  172/FFFFFFFFFFFF2D2E :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  173/FFFFFFFFFFFF2D2E :                     ; 		align 2
(2)  174/FFFFFFFFFFFF2D2E :                     
(2)  175/FFFFFFFFFFFF2D2E :                     ; ====================================================================
(2)  176/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  177/FFFFFFFFFFFF2D2E :                     ; Objects
(2)  178/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  179/FFFFFFFFFFFF2D2E :                     
(2)  180/FFFFFFFFFFFF2D2E :                     ; ====================================================================
(2)  181/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  182/FFFFFFFFFFFF2D2E :                     ; Custom VBlank
(2)  183/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D2E :                     
(2)  185/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D2E :                     ; Custom HBlank
(2)  187/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  188/FFFFFFFFFFFF2D2E :                     
(2)  189/FFFFFFFFFFFF2D2E :                     ; ====================================================================
(2)  190/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  191/FFFFFFFFFFFF2D2E :                     ; Includes for this screen
(2)  192/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  193/FFFFFFFFFFFF2D2E :                     
(2)  194/FFFFFFFFFFFF2D2E :                     ; ====================================================================
(2)  195/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  196/FFFFFFFFFFFF2D2E :                     ; Small data section
(2)  197/FFFFFFFFFFFF2D2E :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2D2E :                     
(2)  199/FFFFFFFFFFFF2D2E :                     str_MenuCursorOff:
(2)  200/FFFFFFFFFFFF2D2E : 2020 2000           		dc.b "   ",0
(2)  201/FFFFFFFFFFFF2D32 :                     		align 2
(2)  202/FFFFFFFFFFFF2D34 :                     str_MenuCursor:
(2)  203/FFFFFFFFFFFF2D34 : 2D2D 3E00           		dc.b "-->",0
(2)  204/FFFFFFFFFFFF2D38 :                     		align 2
(2)  205/FFFFFFFFFFFF2D3A :                     
(2)  206/FFFFFFFFFFFF2D3A :                     str_MenuText:
(2)  207/FFFFFFFFFFFF2D3A : 4E69 6B6F 6E61      		dc.b "Nikona test menu       ROM: \{DATE}",$0A
         FFFFFFFFFFFF2D40 : 2074 6573 7420 
         FFFFFFFFFFFF2D46 : 6D65 6E75 2020 
         FFFFFFFFFFFF2D4C : 2020 2020 2052 
         FFFFFFFFFFFF2D52 : 4F4D 3A20 3039 
         FFFFFFFFFFFF2D58 : 2F32 362F 3230 
         FFFFFFFFFFFF2D5E : 3234 0A          
(2)  208/FFFFFFFFFFFF2D61 : 0A                  		dc.b $0A
(2)  209/FFFFFFFFFFFF2D62 : 2020 2020 4765      		dc.b "    Genesis VDP",$0A
         FFFFFFFFFFFF2D68 : 6E65 7369 7320 
         FFFFFFFFFFFF2D6E : 5644 500A          
(2)  210/FFFFFFFFFFFF2D72 : 2020 2020 5365      		dc.b "    Sega CD stamps",$0A
         FFFFFFFFFFFF2D78 : 6761 2043 4420 
         FFFFFFFFFFFF2D7E : 7374 616D 7073 0A 
(2)  211/FFFFFFFFFFFF2D85 : 2020 2020 3332      		dc.b "    32X 2D mode",$0A
         FFFFFFFFFFFF2D8B : 5820 3244 206D 
         FFFFFFFFFFFF2D91 : 6F64 650A          
(2)  212/FFFFFFFFFFFF2D95 : 2020 2020 3332      		dc.b "    32X 3D mode",$0A
         FFFFFFFFFFFF2D9B : 5820 3344 206D 
         FFFFFFFFFFFF2DA1 : 6F64 650A          
(2)  213/FFFFFFFFFFFF2DA5 : 2020 2020 4745      		dc.b "    GEMA sound test"
         FFFFFFFFFFFF2DAB : 4D41 2073 6F75 
         FFFFFFFFFFFF2DB1 : 6E64 2074 6573 74 
(2)  214/FFFFFFFFFFFF2DB8 : 00                  		dc.b 0
(2)  215/FFFFFFFFFFFF2DB9 :                     		align 2
(2)  216/FFFFFFFFFFFF2DBA :                     
(2)  217/FFFFFFFFFFFF2DBA :                     ; str_InputMe:
(2)  218/FFFFFFFFFFFF2DBA :                     ; 	if MARS|MARSCD
(2)  219/FFFFFFFFFFFF2DBA :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  220/FFFFFFFFFFFF2DBA :                     ; 		dc.b " "
(2)  221/FFFFFFFFFFFF2DBA :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  222/FFFFFFFFFFFF2DBA :                     ; 		dc.b " "
(2)  223/FFFFFFFFFFFF2DBA :                     ; 		dc.l pstr_mem(3,RAM_Framecount)
(2)  224/FFFFFFFFFFFF2DBA :                     ; 	else
(2)  225/FFFFFFFFFFFF2DBA :                     ; 		dc.b " "
(2)  226/FFFFFFFFFFFF2DBA :                     ; 	endif
(2)  227/FFFFFFFFFFFF2DBA :                     ; 		dc.b 0
(2)  228/FFFFFFFFFFFF2DBA :                     ; 		align 2
(2)  229/FFFFFFFFFFFF2DBA :                     
(2)  230/FFFFFFFFFFFF2DBA :                     ; ====================================================================
(2)  231/FFFFFFFFFFFF2DBA :                     
(1)   15/FFFFFFFFFFFF2DBA :                     mcscrn_e:
(1)   15/   511BA :                                     dephase
(1)   15/   511BA :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   15/   511BA :                                     align $800
(1)   15/   51800 :                     ; Md_Screen00_e:
(1)   15/   51800 : =$51800              MD_SCREEN00_E label *
(1)   15/   51800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   16/   51800 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/   51800 :                                     align $800              ; SCD/CD32X sector align
(1)   16/   51800 : =$51800              MD_SCREEN01 label *
(1)   16/   51800 :                     
(1)   16/   51800 :                     mctopscrn:
(1)   16/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   16/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   16/FFFFFFFFFFFF2C00 :                             include "game/code/screen_1.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   51800 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $4C2
(2)   22/     4C4 :  (MACRO-2)           			endmemory
(2)   22/   51CC2 :                     .here:          dephase
(2)   22/   51CC2 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   22/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   23/FFFFFFFFFFFF2C00 :                     
(2)   24/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory $5A0
(2)   24/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   24/   51800 :                                     dephase
(2)   24/     5A0 :                                     phase $5A0
(2)   24/     5A0 : =$5A0                GLBL_LASTORG    := *
(2)   25/     5A0 :                     vramLoc_Haruna		ds.b $24
(2)   26/     5C4 :                     vramLoc_Sisi		ds.b $10
(2)   27/     5D4 :  (MACRO-2)           			endmemory
(2)   27/   51834 :                     .here:          dephase
(2)   27/   51834 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   27/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   28/FFFFFFFFFFFF2C00 :                     
(2)   29/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   30/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   31/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   32/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   33/FFFFFFFFFFFF2C00 :                     
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   34/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   34/   51800 :                                     dephase
(2)   34/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   34/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   35/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   36/FFFFFFFFFFFFB802 :                     RAM_SC1_PickDispl	ds.w 1
(2)   37/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   38/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   38/   51808 :                     .here:          dephase
(2)   38/   51808 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   38/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   39/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   42/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   43/FFFFFFFFFFFF2C00 :                     ; Init
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     
(2)   46/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   47/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   48/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   49/FFFFFFFFFFFF2C08 : 41FA 00E6           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   50/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   51/FFFFFFFFFFFF2C10 : 6100 F3D8           		bsr	System_SramInit
(2)   52/FFFFFFFFFFFF2C14 : 52B8 E878           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   53/FFFFFFFFFFFF2C18 : 6100 F43E           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   54/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   55/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   56/FFFFFFFFFFFF2C1C : 203C 0021 52F4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   57/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C26 : 6100 E390           		bsr	Video_PrintInit
(2)   59/FFFFFFFFFFFF2C2A : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   60/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   61/FFFFFFFFFFFF2C34 : 6100 E37C           		bsr	Video_PrintInitW
(2)   62/FFFFFFFFFFFF2C38 : 6100 E388           		bsr	Video_PrintDefPal_Fade
(2)   63/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   64/FFFFFFFFFFFF2C3C : 41F9 0022 DB14      		lea	(Pal_Haruna),a0
(2)   65/FFFFFFFFFFFF2C42 : 7010                		moveq	#16,d0
(2)   66/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   67/FFFFFFFFFFFF2C46 : 6100 E2F4           		bsr	Video_FadePal
(2)   68/FFFFFFFFFFFF2C4A : 41F9 0022 DD74      		lea	(Pal_Sisi),a0
(2)   69/FFFFFFFFFFFF2C50 : 7020                		moveq	#32,d0
(2)   70/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   71/FFFFFFFFFFFF2C54 : 6100 E2E6           		bsr	Video_FadePal
(2)   72/FFFFFFFFFFFF2C58 : 203C 0022 C414      		move.l	#Art_Sisi,d0
(2)   73/FFFFFFFFFFFF2C5E : 323C B880           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   74/FFFFFFFFFFFF2C62 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   75/FFFFFFFFFFFF2C66 : 6100 DC0C           		bsr	Video_LoadArt
(2)   76/FFFFFFFFFFFF2C6A : 203C FFFF 2D02      		move.l	#obj_Player,d0
(2)   77/FFFFFFFFFFFF2C70 : 6100 FA04           		bsr	Object_Make
(2)   78/FFFFFFFFFFFF2C74 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C74 : 6178                		bsr	.show_counter				; Draw counter
(2)   80/FFFFFFFFFFFF2C76 : 6100 DA68           		bsr	Video_DisplayOn
(2)   81/FFFFFFFFFFFF2C7A : 6100 02C0           		bsr	Screen0_PickBackgrnd
(2)   82/FFFFFFFFFFFF2C7E :                     	; ----------------------------------------------
(2)   83/FFFFFFFFFFFF2C7E : 6100 F9C4           		bsr	Object_Run
(2)   84/FFFFFFFFFFFF2C82 : 6100 D7F8           		bsr	Video_BuildSprites
(2)   85/FFFFFFFFFFFF2C86 : 6100 E21A           		bsr	Video_FadeIn_Full
(2)   86/FFFFFFFFFFFF2C8A :                     
(2)   87/FFFFFFFFFFFF2C8A :                     ; ====================================================================
(2)   88/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   89/FFFFFFFFFFFF2C8A :                     ; Loop
(2)   90/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   91/FFFFFFFFFFFF2C8A :                     
(2)   92/FFFFFFFFFFFF2C8A :                     .loop:
(2)   93/FFFFFFFFFFFF2C8A : 6100 F9B8           		bsr	Object_Run
(2)   94/FFFFFFFFFFFF2C8E : 6100 D7EC           		bsr	Video_BuildSprites
(2)   95/FFFFFFFFFFFF2C92 : 6100 F0C6           		bsr	System_Render
(2)   96/FFFFFFFFFFFF2C96 :                     
(2)   97/FFFFFFFFFFFF2C96 : 6156                		bsr	.show_counter				; Draw counter
(2)   98/FFFFFFFFFFFF2C98 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)   99/FFFFFFFFFFFF2C9C : 0247 0010           		andi.w	#JoyB,d7
(2)  100/FFFFFFFFFFFF2CA0 : 670E                		beq.s	.not_apress
(2)  101/FFFFFFFFFFFF2CA2 : 5278 B802           		addq.w	#1,(RAM_SC1_PickDispl).w
(2)  102/FFFFFFFFFFFF2CA6 : 0278 0001 B802      		andi.w	#1,(RAM_SC1_PickDispl).w
(2)  103/FFFFFFFFFFFF2CAC : 6100 028E           		bsr	Screen0_PickBackgrnd
(2)  104/FFFFFFFFFFFF2CB0 :                     .not_apress:
(2)  105/FFFFFFFFFFFF2CB0 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  106/FFFFFFFFFFFF2CB4 : 0247 0020           		andi.w	#JoyC,d7
(2)  107/FFFFFFFFFFFF2CB8 : 670A                		beq.s	.not_b
(2)  108/FFFFFFFFFFFF2CBA : 203C FFFF 2E12      		move.l	#obj_Ball,d0
(2)  109/FFFFFFFFFFFF2CC0 : 6100 F9B4           		bsr	Object_Make
(2)  110/FFFFFFFFFFFF2CC4 :                     .not_b:
(2)  111/FFFFFFFFFFFF2CC4 :                     
(2)  112/FFFFFFFFFFFF2CC4 :                     	; Check START button
(2)  113/FFFFFFFFFFFF2CC4 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  114/FFFFFFFFFFFF2CC8 : 0247 0080           		andi.w	#JoyStart,d7
(2)  115/FFFFFFFFFFFF2CCC : 67BC                		beq	.loop
(2)  116/FFFFFFFFFFFF2CCE : 6100 E1F4           		bsr	Video_FadeOut_Full
(2)  117/FFFFFFFFFFFF2CD2 :                     
(2)  118/FFFFFFFFFFFF2CD2 :                     	; Stop ALL sequences
(2)  119/FFFFFFFFFFFF2CD2 : 6100 D532           		bsr	gemaStopAll
(2)  120/FFFFFFFFFFFF2CD6 :                     	rept 4
(2)  121/FFFFFFFFFFFF2CD6 :                     		bsr	System_Render		; Wait 4 frames...
(2)  122/FFFFFFFFFFFF2CD6 :                     	endm
(2)  121/FFFFFFFFFFFF2CD6 : 6100 F082           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDA : 6100 F07E           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDE : 6100 F07A           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CE2 : 6100 F076           		bsr	System_Render		; Wait 4 frames...
(2)  123/FFFFFFFFFFFF2CE6 : 31FC 0000 FA10      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  124/FFFFFFFFFFFF2CEC : 4E75                		rts				; <-- RTS
(2)  125/FFFFFFFFFFFF2CEE :                     
(2)  126/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  127/FFFFFFFFFFFF2CEE :                     ; Show framecounter and input
(2)  128/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  129/FFFFFFFFFFFF2CEE :                     
(2)  130/FFFFFFFFFFFF2CEE :                     .show_counter:
(2)  131/FFFFFFFFFFFF2CEE : 4E75                		rts
(2)  132/FFFFFFFFFFFF2CF0 :                     
(2)  133/FFFFFFFFFFFF2CF0 :                     ; ====================================================================
(2)  134/FFFFFFFFFFFF2CF0 :                     ; ------------------------------------------------------
(2)  135/FFFFFFFFFFFF2CF0 :                     ; DATA asset locations
(2)  136/FFFFFFFFFFFF2CF0 :                     ; ------------------------------------------------------
(2)  137/FFFFFFFFFFFF2CF0 :                     
(2)  138/FFFFFFFFFFFF2CF0 :                     file_scrn1_main:
(2)  139/FFFFFFFFFFFF2CF0 : 0005 5800           		dc.l DATA_BANK0
(2)  140/FFFFFFFFFFFF2CF4 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2CFA : 494E 2E42 494E 00 
(2)  141/FFFFFFFFFFFF2D01 :                     		align 2
(2)  142/FFFFFFFFFFFF2D02 :                     ; file_scrn1_mars:
(2)  143/FFFFFFFFFFFF2D02 :                     ; 		dc.l DATA_BANK1
(2)  144/FFFFFFFFFFFF2D02 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  145/FFFFFFFFFFFF2D02 :                     ; 		align 2
(2)  146/FFFFFFFFFFFF2D02 :                     
(2)  147/FFFFFFFFFFFF2D02 :                     ; ====================================================================
(2)  148/FFFFFFFFFFFF2D02 :                     ; ------------------------------------------------------
(2)  149/FFFFFFFFFFFF2D02 :                     ; Objects
(2)  150/FFFFFFFFFFFF2D02 :                     ; ------------------------------------------------------
(2)  151/FFFFFFFFFFFF2D02 :                     
(2)  152/FFFFFFFFFFFF2D02 :                     ; --------------------------------------------------
(2)  153/FFFFFFFFFFFF2D02 :                     ; Test object
(2)  154/FFFFFFFFFFFF2D02 :                     ; --------------------------------------------------
(2)  155/FFFFFFFFFFFF2D02 :                     
(2)  156/FFFFFFFFFFFF2D02 :                     obj_Player:
(2)  157/FFFFFFFFFFFF2D02 : 7000                		moveq	#0,d0
(2)  158/FFFFFFFFFFFF2D04 : 102E 001C           		move.b	obj_index(a6),d0
(2)  159/FFFFFFFFFFFF2D08 : D040                		add.w	d0,d0
(2)  160/FFFFFFFFFFFF2D0A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  161/FFFFFFFFFFFF2D0E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  162/FFFFFFFFFFFF2D12 :                     ; ----------------------------------------------
(2)  163/FFFFFFFFFFFF2D12 : 0004                .list:		dc.w .init-.list
(2)  164/FFFFFFFFFFFF2D14 : 002A                		dc.w .main-.list
(2)  165/FFFFFFFFFFFF2D16 :                     ; ----------------------------------------------
(2)  166/FFFFFFFFFFFF2D16 :                     .init:
(2)  167/FFFFFFFFFFFF2D16 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  168/FFFFFFFFFFFF2D1A : 6100 F9C4           		bsr	object_ResetAnim	; Init/Reset animation
(2)  169/FFFFFFFFFFFF2D1E : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  170/FFFFFFFFFFFF2D24 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  171/FFFFFFFFFFFF2D2A : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  172/FFFFFFFFFFFF2D30 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  173/FFFFFFFFFFFF2D36 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  174/FFFFFFFFFFFF2D3C :                     
(2)  175/FFFFFFFFFFFF2D3C :                     ; ----------------------------------------------
(2)  176/FFFFFFFFFFFF2D3C :                     .main:
(2)  177/FFFFFFFFFFFF2D3C : 41F8 E974           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  178/FFFFFFFFFFFF2D40 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  179/FFFFFFFFFFFF2D44 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  180/FFFFFFFFFFFF2D46 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  181/FFFFFFFFFFFF2D48 : 7400                		moveq	#0,d2
(2)  182/FFFFFFFFFFFF2D4A : 7600                		moveq	#0,d3
(2)  183/FFFFFFFFFFFF2D4C : 0807 0003           		btst	#bitJoyRight,d7
(2)  184/FFFFFFFFFFFF2D50 : 6706                		beq.s	.not_right
(2)  185/FFFFFFFFFFFF2D52 : 7001                		moveq	#1,d0			; X right
(2)  186/FFFFFFFFFFFF2D54 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  187/FFFFFFFFFFFF2D54 : 7402                		moveq	#2,d2
(2)  188/FFFFFFFFFFFF2D56 : 5243                		addq.w	#1,d3
(2)  189/FFFFFFFFFFFF2D58 :                     .not_right:
(2)  190/FFFFFFFFFFFF2D58 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  191/FFFFFFFFFFFF2D5C : 6706                		beq.s	.not_left
(2)  192/FFFFFFFFFFFF2D5E : 70FF                		moveq	#-1,d0			; X left
(2)  193/FFFFFFFFFFFF2D60 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  194/FFFFFFFFFFFF2D60 : 7403                		moveq	#3,d2
(2)  195/FFFFFFFFFFFF2D62 : 5243                		addq.w	#1,d3
(2)  196/FFFFFFFFFFFF2D64 :                     .not_left:
(2)  197/FFFFFFFFFFFF2D64 : 0807 0001           		btst	#bitJoyDown,d7
(2)  198/FFFFFFFFFFFF2D68 : 6706                		beq.s	.not_down
(2)  199/FFFFFFFFFFFF2D6A : 7201                		moveq	#1,d1			; Y down
(2)  200/FFFFFFFFFFFF2D6C : 7400                		moveq	#0,d2
(2)  201/FFFFFFFFFFFF2D6E : 5243                		addq.w	#1,d3
(2)  202/FFFFFFFFFFFF2D70 :                     .not_down:
(2)  203/FFFFFFFFFFFF2D70 : 0807 0000           		btst	#bitJoyUp,d7
(2)  204/FFFFFFFFFFFF2D74 : 6706                		beq.s	.not_up
(2)  205/FFFFFFFFFFFF2D76 : 72FF                		moveq	#-1,d1			; Y up
(2)  206/FFFFFFFFFFFF2D78 : 7401                		moveq	#1,d2
(2)  207/FFFFFFFFFFFF2D7A : 5243                		addq.w	#1,d3
(2)  208/FFFFFFFFFFFF2D7C :                     .not_up:
(2)  209/FFFFFFFFFFFF2D7C :                     ; 	if MARS|MARSCD
(2)  210/FFFFFFFFFFFF2D7C :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  211/FFFFFFFFFFFF2D7C :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  212/FFFFFFFFFFFF2D7C :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  213/FFFFFFFFFFFF2D7C :                     ; 		add.w	d0,obj_x(a6)
(2)  214/FFFFFFFFFFFF2D7C :                     ; 		add.w	d1,obj_z(a6)
(2)  215/FFFFFFFFFFFF2D7C :                     ; 	else
(2)  216/FFFFFFFFFFFF2D7C :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  217/FFFFFFFFFFFF2D7C :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  218/FFFFFFFFFFFF2D7C : D16E 0004           		add.w	d0,obj_x(a6)
(2)  219/FFFFFFFFFFFF2D80 : D36E 0008           		add.w	d1,obj_y(a6)
(2)  220/FFFFFFFFFFFF2D84 :                     ; 	endif
(2)  221/FFFFFFFFFFFF2D84 :                     
(2)  222/FFFFFFFFFFFF2D84 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  223/FFFFFFFFFFFF2D88 :                     
(2)  224/FFFFFFFFFFFF2D88 :                     ; ----------------------------------------------
(2)  225/FFFFFFFFFFFF2D88 :                     ; Show the object...
(2)  226/FFFFFFFFFFFF2D88 :                     
(2)  227/FFFFFFFFFFFF2D88 : 4A43                		tst.w	d3
(2)  228/FFFFFFFFFFFF2D8A : 6708                		beq.s	.no_anim
(2)  229/FFFFFFFFFFFF2D8C : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  230/FFFFFFFFFFFF2D90 : 6100 F986           		bsr	object_Animate
(2)  231/FFFFFFFFFFFF2D94 :                     .no_anim:
(2)  232/FFFFFFFFFFFF2D94 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  233/FFFFFFFFFFFF2D94 :                     ; 		bsr	object_Touch
(2)  234/FFFFFFFFFFFF2D94 :                     ; 		tst.l	d0
(2)  235/FFFFFFFFFFFF2D94 :                     ; 		beq.s	.lel
(2)  236/FFFFFFFFFFFF2D94 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  237/FFFFFFFFFFFF2D94 :                     ; .lel:
(2)  238/FFFFFFFFFFFF2D94 :                     
(2)  239/FFFFFFFFFFFF2D94 : 207C 0000 0000      		move.l	#0,a0
(2)  240/FFFFFFFFFFFF2D9A : 43F9 0022 DB34      		lea	(Map_Haruna),a1
(2)  241/FFFFFFFFFFFF2DA0 : 45F9 0022 DCE4      		lea	(Plc_Haruna),a2
(2)  242/FFFFFFFFFFFF2DA6 : 47F9 0022 9594      		lea	(Art_Haruna),a3
(2)  243/FFFFFFFFFFFF2DAC : 7400                		moveq	#0,d2
(2)  244/FFFFFFFFFFFF2DAE : 302E 0004           		move.w	obj_x(a6),d0
(2)  245/FFFFFFFFFFFF2DB2 : 322E 0008           		move.w	obj_y(a6),d1
(2)  246/FFFFFFFFFFFF2DB6 : D078 DCC2           		add.w	(RAM_HorScroll+2).w,d0
(2)  247/FFFFFFFFFFFF2DBA : 9278 E082           		sub.w	(RAM_VerScroll+2).w,d1
(2)  248/FFFFFFFFFFFF2DBE : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  249/FFFFFFFFFFFF2DC2 : E14A                		lsl.w	#8,d2
(2)  250/FFFFFFFFFFFF2DC4 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  251/FFFFFFFFFFFF2DC6 : D47C 25A0           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  252/FFFFFFFFFFFF2DCA : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  253/FFFFFFFFFFFF2DCE : 6000 E570           		bra	Video_MakeSprMap_DMA
(2)  254/FFFFFFFFFFFF2DD2 :                     
(2)  255/FFFFFFFFFFFF2DD2 :                     ; ----------------------------------------------
(2)  256/FFFFFFFFFFFF2DD2 :                     
(2)  257/FFFFFFFFFFFF2DD2 :                     .anim_data:
(2)  258/FFFFFFFFFFFF2DD2 : 0008                		dc.w .anim_down-.anim_data
(2)  259/FFFFFFFFFFFF2DD4 : 0016                		dc.w .anim_up-.anim_data
(2)  260/FFFFFFFFFFFF2DD6 : 0024                		dc.w .anim_right-.anim_data
(2)  261/FFFFFFFFFFFF2DD8 : 0032                		dc.w .anim_left-.anim_data
(2)  262/FFFFFFFFFFFF2DDA :                     
(2)  263/FFFFFFFFFFFF2DDA :                     .anim_down:
(2)  264/FFFFFFFFFFFF2DDA : 0008                		dc.w 8
(2)  265/FFFFFFFFFFFF2DDC : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2DE2 : 0002             
(2)  266/FFFFFFFFFFFF2DE4 : FFFE                		dc.w -2
(2)  267/FFFFFFFFFFFF2DE6 :                     		align 2
(2)  268/FFFFFFFFFFFF2DE8 :                     .anim_up:
(2)  269/FFFFFFFFFFFF2DE8 : 0008                		dc.w 8
(2)  270/FFFFFFFFFFFF2DEA : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2DF0 : 0005             
(2)  271/FFFFFFFFFFFF2DF2 : FFFE                		dc.w -2
(2)  272/FFFFFFFFFFFF2DF4 :                     		align 2
(2)  273/FFFFFFFFFFFF2DF6 :                     .anim_right:
(2)  274/FFFFFFFFFFFF2DF6 : 0008                		dc.w 8
(2)  275/FFFFFFFFFFFF2DF8 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2DFE : 0008             
(2)  276/FFFFFFFFFFFF2E00 : FFFE                		dc.w -2
(2)  277/FFFFFFFFFFFF2E02 :                     		align 2
(2)  278/FFFFFFFFFFFF2E04 :                     .anim_left:
(2)  279/FFFFFFFFFFFF2E04 : 0008                		dc.w 8
(2)  280/FFFFFFFFFFFF2E06 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E0C : 000B             
(2)  281/FFFFFFFFFFFF2E0E : FFFE                		dc.w -2
(2)  282/FFFFFFFFFFFF2E10 :                     		align 2
(2)  283/FFFFFFFFFFFF2E12 :                     
(2)  284/FFFFFFFFFFFF2E12 :                     ; --------------------------------------------------
(2)  285/FFFFFFFFFFFF2E12 :                     ; Test object
(2)  286/FFFFFFFFFFFF2E12 :                     ; --------------------------------------------------
(2)  287/FFFFFFFFFFFF2E12 :                     
(2)  288/FFFFFFFFFFFF2E12 :                     obj_Ball:
(2)  289/FFFFFFFFFFFF2E12 : 7000                		moveq	#0,d0
(2)  290/FFFFFFFFFFFF2E14 : 102E 001C           		move.b	obj_index(a6),d0
(2)  291/FFFFFFFFFFFF2E18 : D040                		add.w	d0,d0
(2)  292/FFFFFFFFFFFF2E1A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  293/FFFFFFFFFFFF2E1E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  294/FFFFFFFFFFFF2E22 :                     ; ----------------------------------------------
(2)  295/FFFFFFFFFFFF2E22 : 0004                .list:		dc.w .init-.list
(2)  296/FFFFFFFFFFFF2E24 : 0072                		dc.w .main-.list
(2)  297/FFFFFFFFFFFF2E26 :                     ; ----------------------------------------------
(2)  298/FFFFFFFFFFFF2E26 :                     .init:
(2)  299/FFFFFFFFFFFF2E26 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  300/FFFFFFFFFFFF2E2A : 6100 F8B4           		bsr	object_ResetAnim	; Init/Reset animation
(2)  301/FFFFFFFFFFFF2E2E : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  302/FFFFFFFFFFFF2E34 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  303/FFFFFFFFFFFF2E3A : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  304/FFFFFFFFFFFF2E40 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  305/FFFFFFFFFFFF2E46 :                     
(2)  306/FFFFFFFFFFFF2E46 : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  307/FFFFFFFFFFFF2E4C : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  308/FFFFFFFFFFFF2E52 : 303C 0049           		move.w	#$48+1,d0
(2)  309/FFFFFFFFFFFF2E56 : 6100 F30A           		bsr	System_DiceRoll
(2)  310/FFFFFFFFFFFF2E5A : E348                		lsl.w	#1,d0
(2)  311/FFFFFFFFFFFF2E5C : D16E 0004           		add.w	d0,obj_x(a6)
(2)  312/FFFFFFFFFFFF2E60 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  313/FFFFFFFFFFFF2E64 : E748                		lsl.w	#3,d0
(2)  314/FFFFFFFFFFFF2E66 : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  315/FFFFFFFFFFFF2E6A : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  316/FFFFFFFFFFFF2E6E :                     
(2)  317/FFFFFFFFFFFF2E6E : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  318/FFFFFFFFFFFF2E74 : 6100 F292           		bsr	System_Random
(2)  319/FFFFFFFFFFFF2E78 : 2E38 F9F8           		move.l	(RAM_SysRandom).w,d7
(2)  320/FFFFFFFFFFFF2E7C : E24F                		lsr.w	#1,d7
(2)  321/FFFFFFFFFFFF2E7E : 640A                		bcc.s	.x_random
(2)  322/FFFFFFFFFFFF2E80 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  323/FFFFFFFFFFFF2E84 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  324/FFFFFFFFFFFF2E8A :                     .x_random:
(2)  325/FFFFFFFFFFFF2E8A : E24F                		lsr.w	#1,d7
(2)  326/FFFFFFFFFFFF2E8C : 6404                		bcc.s	.y_random
(2)  327/FFFFFFFFFFFF2E8E : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  328/FFFFFFFFFFFF2E92 :                     .y_random:
(2)  329/FFFFFFFFFFFF2E92 : 4E75                		rts
(2)  330/FFFFFFFFFFFF2E94 :                     
(2)  331/FFFFFFFFFFFF2E94 :                     ; ----------------------------------------------
(2)  332/FFFFFFFFFFFF2E94 :                     .main:
(2)  333/FFFFFFFFFFFF2E94 : 3438 E872           		move.w	(RAM_VdpRegSetC).w,d2
(2)  334/FFFFFFFFFFFF2E98 : 0802 0002           		btst	#2,d2
(2)  335/FFFFFFFFFFFF2E9C : 660E                		bne.s	.y_fix
(2)  336/FFFFFFFFFFFF2E9E : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  337/FFFFFFFFFFFF2EA4 : 6D06                		blt.s	.y_fix
(2)  338/FFFFFFFFFFFF2EA6 : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  339/FFFFFFFFFFFF2EAC :                     .y_fix:
(2)  340/FFFFFFFFFFFF2EAC :                     
(2)  341/FFFFFFFFFFFF2EAC : 323C 00E0           		move.w	#224,d1
(2)  342/FFFFFFFFFFFF2EB0 : 3438 E872           		move.w	(RAM_VdpRegSetC).w,d2
(2)  343/FFFFFFFFFFFF2EB4 : 0802 0002           		btst	#2,d2
(2)  344/FFFFFFFFFFFF2EB8 : 6702                		beq.s	.y_double
(2)  345/FFFFFFFFFFFF2EBA : D241                		add.w	d1,d1
(2)  346/FFFFFFFFFFFF2EBC :                     .y_double:
(2)  347/FFFFFFFFFFFF2EBC : 303C 0140           		move.w	#320,d0
(2)  348/FFFFFFFFFFFF2EC0 : 342E 0004           		move.w	obj_x(a6),d2
(2)  349/FFFFFFFFFFFF2EC4 : 4A42                		tst.w	d2
(2)  350/FFFFFFFFFFFF2EC6 : 6A0A                		bpl.s	.x_back
(2)  351/FFFFFFFFFFFF2EC8 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  352/FFFFFFFFFFFF2ECC : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  353/FFFFFFFFFFFF2ED2 :                     .x_back:
(2)  354/FFFFFFFFFFFF2ED2 : B440                		cmp.w	d0,d2
(2)  355/FFFFFFFFFFFF2ED4 : 6D0A                		blt.s	.x_foward
(2)  356/FFFFFFFFFFFF2ED6 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  357/FFFFFFFFFFFF2EDA : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  358/FFFFFFFFFFFF2EE0 :                     .x_foward:
(2)  359/FFFFFFFFFFFF2EE0 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  360/FFFFFFFFFFFF2EE4 :                     
(2)  361/FFFFFFFFFFFF2EE4 : 342E 0008           		move.w	obj_y(a6),d2
(2)  362/FFFFFFFFFFFF2EE8 : 4A42                		tst.w	d2
(2)  363/FFFFFFFFFFFF2EEA : 6A04                		bpl.s	.y_back
(2)  364/FFFFFFFFFFFF2EEC : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  365/FFFFFFFFFFFF2EF0 :                     .y_back:
(2)  366/FFFFFFFFFFFF2EF0 : B441                		cmp.w	d1,d2
(2)  367/FFFFFFFFFFFF2EF2 : 6D04                		blt.s	.y_foward
(2)  368/FFFFFFFFFFFF2EF4 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  369/FFFFFFFFFFFF2EF8 :                     .y_foward:
(2)  370/FFFFFFFFFFFF2EF8 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  371/FFFFFFFFFFFF2EFC :                     
(2)  372/FFFFFFFFFFFF2EFC : 6100 F7EA           		bsr	object_Speed
(2)  373/FFFFFFFFFFFF2F00 :                     
(2)  374/FFFFFFFFFFFF2F00 :                     ; ----------------------------------------------
(2)  375/FFFFFFFFFFFF2F00 :                     ; Show the object...
(2)  376/FFFFFFFFFFFF2F00 :                     
(2)  377/FFFFFFFFFFFF2F00 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  378/FFFFFFFFFFFF2F04 : 6100 F812           		bsr	object_Animate
(2)  379/FFFFFFFFFFFF2F08 : 43F9 0022 DD94      		lea	(Map_Sisi),a1
(2)  380/FFFFFFFFFFFF2F0E : 7400                		moveq	#0,d2
(2)  381/FFFFFFFFFFFF2F10 : 302E 0004           		move.w	obj_x(a6),d0
(2)  382/FFFFFFFFFFFF2F14 : 322E 0008           		move.w	obj_y(a6),d1
(2)  383/FFFFFFFFFFFF2F18 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  384/FFFFFFFFFFFF2F1C : E14A                		lsl.w	#8,d2
(2)  385/FFFFFFFFFFFF2F1E : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  386/FFFFFFFFFFFF2F20 : D47C 45C4           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  387/FFFFFFFFFFFF2F24 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  388/FFFFFFFFFFFF2F28 : 6000 E42E           		bra	Video_MakeSprMap
(2)  389/FFFFFFFFFFFF2F2C :                     
(2)  390/FFFFFFFFFFFF2F2C :                     ; ----------------------------------------------
(2)  391/FFFFFFFFFFFF2F2C :                     
(2)  392/FFFFFFFFFFFF2F2C :                     .anim_data:
(2)  393/FFFFFFFFFFFF2F2C : 0002                		dc.w .maind-.anim_data
(2)  394/FFFFFFFFFFFF2F2E :                     .maind:
(2)  395/FFFFFFFFFFFF2F2E : 0008                		dc.w 8
(2)  396/FFFFFFFFFFFF2F30 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F36 : 0001             
(2)  397/FFFFFFFFFFFF2F38 : FFFE                		dc.w -2
(2)  398/FFFFFFFFFFFF2F3A :                     		align 2
(2)  399/FFFFFFFFFFFF2F3C :                     
(2)  400/FFFFFFFFFFFF2F3C :                     ; ====================================================================
(2)  401/FFFFFFFFFFFF2F3C :                     ; ------------------------------------------------------
(2)  402/FFFFFFFFFFFF2F3C :                     ; Subroutines
(2)  403/FFFFFFFFFFFF2F3C :                     ; ------------------------------------------------------
(2)  404/FFFFFFFFFFFF2F3C :                     
(2)  405/FFFFFFFFFFFF2F3C :                     Screen0_PickBackgrnd:
(2)  406/FFFFFFFFFFFF2F3C : 6100 EE1C           		bsr	System_Render
(2)  407/FFFFFFFFFFFF2F40 : 6100 D7AA           		bsr	Video_DisplayOff
(2)  408/FFFFFFFFFFFF2F44 : 6100 D76C           		bsr	Video_ClearScreen
(2)  409/FFFFFFFFFFFF2F48 : 4A78 B802           		tst.w	(RAM_SC1_PickDispl).w
(2)  410/FFFFFFFFFFFF2F4C : 6600 0086           		bne	.pick_second
(2)  411/FFFFFFFFFFFF2F50 : 7001                		moveq	#1,d0
(2)  412/FFFFFFFFFFFF2F52 : 7200                		moveq	#%00,d1
(2)  413/FFFFFFFFFFFF2F54 : 6100 D818           		bsr	Video_Resolution
(2)  414/FFFFFFFFFFFF2F58 : 41FA 00F2           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  415/FFFFFFFFFFFF2F5C : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  416/FFFFFFFFFFFF2F5E : 7201                		moveq	#1,d1
(2)  417/FFFFFFFFFFFF2F60 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; Font VRAM location
(2)  418/FFFFFFFFFFFF2F64 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width and location
(2)  419/FFFFFFFFFFFF2F6A : 6100 E166           		bsr	Video_PrintW				; <-- Print BIG text
(2)  420/FFFFFFFFFFFF2F6E : 41FA 00E8           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  421/FFFFFFFFFFFF2F72 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  422/FFFFFFFFFFFF2F74 : 7219                		moveq	#25,d1
(2)  423/FFFFFFFFFFFF2F76 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; Font VRAM location
(2)  424/FFFFFFFFFFFF2F7A : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width and location
(2)  425/FFFFFFFFFFFF2F80 : 6100 E150           		bsr	Video_PrintW
(2)  426/FFFFFFFFFFFF2F84 :                     
(2)  427/FFFFFFFFFFFF2F84 : 41F9 0022 DDDA      		lea	(Pal_TESTBG+color_indx(1)),a0		; a0 - Load palette (+2 skips first color)
(2)  428/FFFFFFFFFFFF2F8A : 7001                		moveq	#1,d0					; d0 - Start at $01
(2)  429/FFFFFFFFFFFF2F8C : 720F                		moveq	#15,d1					; d1 - 15 colors
(2)  430/FFFFFFFFFFFF2F8E : 6100 DFAC           		bsr	Video_FadePal				; Load palette to FADE buffer
(2)  431/FFFFFFFFFFFF2F92 : 6100 DFB2           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  432/FFFFFFFFFFFF2F96 : 4278 E5D0           		clr.w	(RAM_Palette).w
(2)  433/FFFFFFFFFFFF2F9A : 4278 E650           		clr.w	(RAM_PaletteFade).w
(2)  434/FFFFFFFFFFFF2F9E : 203C 0021 76F4      		move.l	#Art_TESTBG,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  435/FFFFFFFFFFFF2FA4 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  436/FFFFFFFFFFFF2FA8 : 343C 8620           		move.w	#Art_TESTBG_e-Art_TESTBG,d2		; d2 - Size: end-start
(2)  437/FFFFFFFFFFFF2FAC : 6100 D8C6           		bsr	Video_LoadArt
(2)  438/FFFFFFFFFFFF2FB0 : 41F9 0022 DDF8      		lea	(Map_TESTBG),a0				; a0 - Map data
(2)  439/FFFFFFFFFFFF2FB6 : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  440/FFFFFFFFFFFF2FBC : 223C 0028 001C      		move.l	#splitw(320/8,224/8),d1			; d1 - Width and Height
(2)  441/FFFFFFFFFFFF2FC2 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  442/FFFFFFFFFFFF2FC8 : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  443/FFFFFFFFFFFF2FCC : 6100 DBD6           		bsr	Video_LoadMap
(2)  444/FFFFFFFFFFFF2FD0 : 6000 D70E           		bra	Video_DisplayOn
(2)  445/FFFFFFFFFFFF2FD4 :                     
(2)  446/FFFFFFFFFFFF2FD4 :                     .pick_second:
(2)  447/FFFFFFFFFFFF2FD4 : 7001                		moveq	#1,d0
(2)  448/FFFFFFFFFFFF2FD6 : 7202                		moveq	#%10,d1
(2)  449/FFFFFFFFFFFF2FD8 : 6100 D794           		bsr	Video_Resolution
(2)  450/FFFFFFFFFFFF2FDC : 41FA 006E           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  451/FFFFFFFFFFFF2FE0 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  452/FFFFFFFFFFFF2FE2 : 7201                		moveq	#1,d1
(2)  453/FFFFFFFFFFFF2FE4 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; Font VRAM location
(2)  454/FFFFFFFFFFFF2FE8 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width and location
(2)  455/FFFFFFFFFFFF2FEE : 6100 E0E2           		bsr	Video_PrintW
(2)  456/FFFFFFFFFFFF2FF2 : 41FA 0064           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  457/FFFFFFFFFFFF2FF6 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  458/FFFFFFFFFFFF2FF8 : 721A                		moveq	#26,d1
(2)  459/FFFFFFFFFFFF2FFA : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; Font VRAM location
(2)  460/FFFFFFFFFFFF2FFE : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width and location
(2)  461/FFFFFFFFFFFF3004 : 6100 E0CC           		bsr	Video_PrintW
(2)  462/FFFFFFFFFFFF3008 :                     
(2)  463/FFFFFFFFFFFF3008 : 41F9 0022 E6B8      		lea	(Pal_TESTBG2),a0			; a0 - Load palette (+2 skips first color)
(2)  464/FFFFFFFFFFFF300E : 7000                		moveq	#0,d0					; d0 - Start at $01
(2)  465/FFFFFFFFFFFF3010 : 7210                		moveq	#16,d1					; d1 - 15 colors
(2)  466/FFFFFFFFFFFF3012 : 6100 DF32           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  467/FFFFFFFFFFFF3016 : 203C 0021 FD14      		move.l	#Art_TESTBG2,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  468/FFFFFFFFFFFF301C : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  469/FFFFFFFFFFFF3020 : 343C 9880           		move.w	#Art_TESTBG2_e-Art_TESTBG2,d2		; d2 - Size: end-start
(2)  470/FFFFFFFFFFFF3024 : 6100 D84E           		bsr	Video_LoadArt
(2)  471/FFFFFFFFFFFF3028 : 41F9 0022 E6D8      		lea	(Map_TESTBG2),a0			; a0 - Map data
(2)  472/FFFFFFFFFFFF302E : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  473/FFFFFFFFFFFF3034 : 223C 0028 0038      		move.l	#splitw(320/8,448/8),d1			; d1 - Width and Height
(2)  474/FFFFFFFFFFFF303A : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  475/FFFFFFFFFFFF3040 : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  476/FFFFFFFFFFFF3044 : 6100 DBD4           		bsr	Video_LoadMapV
(2)  477/FFFFFFFFFFFF3048 : 6000 D696           		bra	Video_DisplayOn
(2)  478/FFFFFFFFFFFF304C :                     
(2)  479/FFFFFFFFFFFF304C :                     ; ====================================================================
(2)  480/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  481/FFFFFFFFFFFF304C :                     ; Custom VBlank
(2)  482/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  483/FFFFFFFFFFFF304C :                     
(2)  484/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  485/FFFFFFFFFFFF304C :                     ; Custom HBlank
(2)  486/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  487/FFFFFFFFFFFF304C :                     
(2)  488/FFFFFFFFFFFF304C :                     ; ====================================================================
(2)  489/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  490/FFFFFFFFFFFF304C :                     ; Includes for this screen
(2)  491/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  492/FFFFFFFFFFFF304C :                     
(2)  493/FFFFFFFFFFFF304C :                     ; ====================================================================
(2)  494/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  495/FFFFFFFFFFFF304C :                     ; Small data section
(2)  496/FFFFFFFFFFFF304C :                     ; ------------------------------------------------------
(2)  497/FFFFFFFFFFFF304C :                     
(2)  498/FFFFFFFFFFFF304C :                     str_NikonaTest:
(2)  499/FFFFFFFFFFFF304C : 2A2A 2054 6F70      		dc.b "** Top **"
         FFFFFFFFFFFF3052 : 202A 2A          
(2)  500/FFFFFFFFFFFF3055 : 00                  		dc.b 0
(2)  501/FFFFFFFFFFFF3056 :                     		align 2
(2)  502/FFFFFFFFFFFF3058 :                     str_NikonaTest2:
(2)  503/FFFFFFFFFFFF3058 : 2A2A 2042 6F74      		dc.b "** Bottom **"
         FFFFFFFFFFFF305E : 746F 6D20 2A2A    
(2)  504/FFFFFFFFFFFF3064 : 00                  		dc.b 0
(2)  505/FFFFFFFFFFFF3065 :                     		align 2
(2)  506/FFFFFFFFFFFF3066 :                     str_NewCountr0:
(2)  507/FFFFFFFFFFFF3066 : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  508/FFFFFFFFFFFF306A : 00                  		dc.b 0
(2)  509/FFFFFFFFFFFF306B :                     		align 2
(2)  510/FFFFFFFFFFFF306C :                     
(2)  511/FFFFFFFFFFFF306C :                     str_InputMe:
(2)  513/FFFFFFFFFFFF306C : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  514/FFFFFFFFFFFF3070 : 20                  		dc.b " "
(2)  515/FFFFFFFFFFFF3071 : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  516/FFFFFFFFFFFF3075 : 20                  		dc.b " "
(2)  517/FFFFFFFFFFFF3076 : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  521/FFFFFFFFFFFF307A : 00                  		dc.b 0
(2)  522/FFFFFFFFFFFF307B :                     		align 2
(2)  523/FFFFFFFFFFFF307C :                     
(2)  524/FFFFFFFFFFFF307C :                     Pal_TestStamp:
(2)  525/FFFFFFFFFFFF307C :                     ; 		dc.w 0
(2)  526/FFFFFFFFFFFF307C :                     ; ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  527/FFFFFFFFFFFF307C :                     ; 		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  528/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  529/FFFFFFFFFFFF307C :                     
(2)  530/FFFFFFFFFFFF307C :                     ; Object data:
(2)  531/FFFFFFFFFFFF307C :                     ; objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  532/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  533/FFFFFFFFFFFF307C :                     ; objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  534/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  535/FFFFFFFFFFFF307C :                     ; objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  536/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  537/FFFFFFFFFFFF307C :                     
(2)  538/FFFFFFFFFFFF307C :                     ; ====================================================================
(2)  539/FFFFFFFFFFFF307C :                     
(1)   16/FFFFFFFFFFFF307C :                     mcscrn_e:
(1)   16/   51C7C :                                     dephase
(1)   16/   51C7C :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   16/   51C7C :                                     align $800
(1)   16/   52000 :                     ; Md_Screen00_e:
(1)   16/   52000 : =$52000              MD_SCREEN01_E label *
(1)   16/   52000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN01",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   17/   52000 : (MACRO)              	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/   52000 :                                     align $800              ; SCD/CD32X sector align
(1)   17/   52000 : =$52000              MD_SCREEN02 label *
(1)   17/   52000 :                     
(1)   17/   52000 :                     mctopscrn:
(1)   17/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   17/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   17/FFFFFFFFFFFF2C00 :                             include "game/code/screen_2.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   52000 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $300
(2)   22/     302 :                     vramLoc_Haruna		ds.b $24
(2)   23/     326 :                     vramLoc_Sisi		ds.b $10
(2)   24/     336 :  (MACRO-2)           			endmemory
(2)   24/   52334 :                     .here:          dephase
(2)   24/   52334 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   52000 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_TempStampVars	ds.l 2
(2)   34/FFFFFFFFFFFFB80A :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB810 :  (MACRO-2)           			endmemory
(2)   35/   52010 :                     .here:          dephase
(2)   35/   52010 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 022C           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 F3D8           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 E878           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 F43E           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0021 52F4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E390           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E37C           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E388           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41F9 FFFF 33A2      		lea	(Pal_StampTest),a0
(2)   62/FFFFFFFFFFFF2C42 : 7000                		moveq	#0,d0
(2)   63/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   64/FFFFFFFFFFFF2C46 : 6100 E2F4           		bsr	Video_FadePal
(2)   65/FFFFFFFFFFFF2C4A : 41F9 FFFF 30D4      		lea	(Pal_Haruna),a0
(2)   66/FFFFFFFFFFFF2C50 : 7010                		moveq	#16,d0
(2)   67/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   68/FFFFFFFFFFFF2C54 : 6100 E2E6           		bsr	Video_FadePal
(2)   69/FFFFFFFFFFFF2C58 : 41F9 FFFF 333A      		lea	(Pal_Sisi),a0
(2)   70/FFFFFFFFFFFF2C5E : 7020                		moveq	#32,d0
(2)   71/FFFFFFFFFFFF2C60 : 7210                		moveq	#16,d1
(2)   72/FFFFFFFFFFFF2C62 : 6100 E2D8           		bsr	Video_FadePal
(2)   73/FFFFFFFFFFFF2C66 : 203C 0022 C414      		move.l	#Art_Sisi,d0
(2)   74/FFFFFFFFFFFF2C6C : 323C 64C0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   75/FFFFFFFFFFFF2C70 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   76/FFFFFFFFFFFF2C74 : 6100 DBFE           		bsr	Video_LoadArt
(2)   77/FFFFFFFFFFFF2C78 :                     
(2)   78/FFFFFFFFFFFF2C78 : 41FA 0436           		lea	str_MidemeEsta(pc),a0
(2)   79/FFFFFFFFFFFF2C7C : 7000                		moveq	#0,d0
(2)   80/FFFFFFFFFFFF2C7E : 721A                		moveq	#26,d1
(2)   81/FFFFFFFFFFFF2C80 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)   82/FFFFFFFFFFFF2C84 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)   83/FFFFFFFFFFFF2C8A : 6100 E354           		bsr	Video_Print
(2)   84/FFFFFFFFFFFF2C8E :                     
(2)   85/FFFFFFFFFFFF2C8E :                     	; ----------------------------------------------
(2)   87/FFFFFFFFFFFF2C8E : 41FA 01B8           		lea	file_scrn2_stamps(pc),a0			; Load STAMPS bank from Disc
(2)   88/FFFFFFFFFFFF2C92 : 6100 F996           		bsr	System_SetDataBank
(2)   89/FFFFFFFFFFFF2C96 : 41F9 FFFF 3548      		lea	(SC2_OutCells),a0
(2)   90/FFFFFFFFFFFF2C9C : 203C 0100 00C0      		move.l	#splitw(256,192),d0				; Dot-screen Width/Height 128x128
(2)   91/FFFFFFFFFFFF2CA2 : 323C 0002           		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(2)   92/FFFFFFFFFFFF2CA6 : 7400                		moveq	#0,d2						; Single buffer mode
(2)   93/FFFFFFFFFFFF2CA8 : 363C 0060           		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(2)   94/FFFFFFFFFFFF2CAC :                     ; 		move.w	#$280,d3
(2)   95/FFFFFFFFFFFF2CAC : 41F9 FFFF 3548      		lea	(SC2_OutCells),a0				; Location for the temporal cells
(2)   96/FFFFFFFFFFFF2CB2 : 6100 E9B0           		bsr	Video_MdMcd_StampEnable
(2)   97/FFFFFFFFFFFF2CB6 : 203C 0000 0002      		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(2)   98/FFFFFFFFFFFF2CBC : 223C 0020 0018      		move.l	#splitw(256/8,192/8),d1				; Size 128x128 in cells
(2)   99/FFFFFFFFFFFF2CC2 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(2)  100/FFFFFFFFFFFF2CC8 : 3638 CC02           		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(2)  101/FFFFFFFFFFFF2CCC : 6100 EA28           		bsr	Video_MdMcd_StampDotMap
(2)  102/FFFFFFFFFFFF2CD0 :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; Map position 0,2
(2)  103/FFFFFFFFFFFF2CD0 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Auto-VRAM set by _StampEnable
(2)  104/FFFFFFFFFFFF2CD0 :                     ; 		bsr	Video_MdMcd_StampDotMap
(2)  105/FFFFFFFFFFFF2CD0 :                     
(2)  106/FFFFFFFFFFFF2CD0 :                     	; TEMPORAL MAP
(2)  107/FFFFFFFFFFFF2CD0 : 6100 F6C4           		bsr	System_MdMcd_WaitWRAM
(2)  108/FFFFFFFFFFFF2CD4 : 41FA 06EE           		lea	MapStamp_Test(pc),a0
(2)  109/FFFFFFFFFFFF2CD8 : 43F9 0023 0000      		lea	(sysmcd_wram+WRAM_MdMapTable).l,a1
(2)  110/FFFFFFFFFFFF2CDE : 3E3C 000B           		move.w	#((192/16))-1,d7
(2)  111/FFFFFFFFFFFF2CE2 :                     .y_draw:
(2)  112/FFFFFFFFFFFF2CE2 : 3C3C 000F           		move.w	#((256/16))-1,d6
(2)  113/FFFFFFFFFFFF2CE6 : 2449                		move.l	a1,a2
(2)  114/FFFFFFFFFFFF2CE8 :                     .x_draw:
(2)  115/FFFFFFFFFFFF2CE8 : 34D8                		move.w	(a0)+,(a2)+
(2)  116/FFFFFFFFFFFF2CEA : 51CE FFFC           		dbf	d6,.x_draw
(2)  117/FFFFFFFFFFFF2CEE : D2FC 0020           		adda	#(256/16)*2,a1
(2)  118/FFFFFFFFFFFF2CF2 : 51CF FFEE           		dbf	d7,.y_draw
(2)  119/FFFFFFFFFFFF2CF6 :                     
(2)  120/FFFFFFFFFFFF2CF6 :                     ; 		movem.l	(a6)+,d0-d3/a0-a3
(2)  121/FFFFFFFFFFFF2CF6 :                     ; 		movem.l	d0-d3/a0-a3,(a5)
(2)  122/FFFFFFFFFFFF2CF6 :                     ; 		adda	#$20,a5
(2)  123/FFFFFFFFFFFF2CF6 :                     ; 		dbf	d7,.copy_paste
(2)  124/FFFFFFFFFFFF2CF6 :                     
(2)  125/FFFFFFFFFFFF2CF6 : 7000                		moveq	#0,d0
(2)  126/FFFFFFFFFFFF2CF8 : 7200                		moveq	#0,d1
(2)  127/FFFFFFFFFFFF2CFA : 6100 DA72           		bsr	Video_Resolution
(2)  129/FFFFFFFFFFFF2CFE :                     	; ----------------------------------------------
(2)  130/FFFFFFFFFFFF2CFE : 6100 00DC           		bsr	.show_counter				; Draw counter
(2)  131/FFFFFFFFFFFF2D02 : 6100 D9DC           		bsr	Video_DisplayOn
(2)  132/FFFFFFFFFFFF2D06 :                     	; ----------------------------------------------
(2)  134/FFFFFFFFFFFF2D06 : 6100 0100           		bsr	.make_stamp
(2)  135/FFFFFFFFFFFF2D0A :                     ; 		lea	(GemaTracks_Scr2),a0
(2)  136/FFFFFFFFFFFF2D0A :                     ; 		bsr	gemaSetMasterList
(2)  137/FFFFFFFFFFFF2D0A :                     ; 		bsr	System_Render
(2)  138/FFFFFFFFFFFF2D0A :                     ; 		move.w	#192,d0
(2)  139/FFFFFFFFFFFF2D0A :                     ; 		bsr	gemaSetBeats
(2)  140/FFFFFFFFFFFF2D0A :                     ; 		moveq	#-1,d0
(2)  141/FFFFFFFFFFFF2D0A :                     ; 		moveq	#0,d1
(2)  142/FFFFFFFFFFFF2D0A :                     ; 		moveq	#0,d2
(2)  143/FFFFFFFFFFFF2D0A :                     ; 		bsr	gemaPlaySeq
(2)  144/FFFFFFFFFFFF2D0A :                     ; 		moveq	#2,d0
(2)  145/FFFFFFFFFFFF2D0A :                     ; 		bsr	System_MdMcd_CddaPlayL
(2)  146/FFFFFFFFFFFF2D0A : 6100 E6F6           		bsr	Video_MdMcd_StampInit
(2)  148/FFFFFFFFFFFF2D0E : 6100 F934           		bsr	Object_Run
(2)  149/FFFFFFFFFFFF2D12 : 6100 D768           		bsr	Video_BuildSprites
(2)  150/FFFFFFFFFFFF2D16 : 6100 E18A           		bsr	Video_FadeIn_Full
(2)  151/FFFFFFFFFFFF2D1A :                     
(2)  152/FFFFFFFFFFFF2D1A :                     ; ====================================================================
(2)  153/FFFFFFFFFFFF2D1A :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2D1A :                     ; Loop
(2)  155/FFFFFFFFFFFF2D1A :                     ; ------------------------------------------------------
(2)  156/FFFFFFFFFFFF2D1A :                     
(2)  157/FFFFFFFFFFFF2D1A :                     .loop:
(2)  158/FFFFFFFFFFFF2D1A : 6100 F10E           		bsr	Sound_Update
(2)  159/FFFFFFFFFFFF2D1E : 6100 F03A           		bsr	System_Render
(2)  160/FFFFFFFFFFFF2D22 : 6100 F920           		bsr	Object_Run
(2)  161/FFFFFFFFFFFF2D26 : 6100 D754           		bsr	Video_BuildSprites
(2)  162/FFFFFFFFFFFF2D2A : 6100 F0FE           		bsr	Sound_Update
(2)  164/FFFFFFFFFFFF2D2E : 6100 E70A           		bsr	Video_MdMcd_StampRender
(2)  165/FFFFFFFFFFFF2D32 : 6406                		bcc.s	.keep_frame
(2)  166/FFFFFFFFFFFF2D34 : 0678 0100 DCC2      		add.w	#$100,(RAM_HorScroll+2).w
(2)  167/FFFFFFFFFFFF2D3A :                     .keep_frame:
(2)  168/FFFFFFFFFFFF2D3A :                     
(2)  169/FFFFFFFFFFFF2D3A : 6100 00CC           		bsr	.make_stamp
(2)  170/FFFFFFFFFFFF2D3E : 4BF8 E974           		lea	(Controller_1).w,a5
(2)  171/FFFFFFFFFFFF2D42 :                     ; 		move.w	on_press(a5),d7
(2)  172/FFFFFFFFFFFF2D42 : 3E2D 0002           		move.w	on_hold(a5),d7
(2)  173/FFFFFFFFFFFF2D46 : 0807 0003           		btst	#bitJoyRight,d7
(2)  174/FFFFFFFFFFFF2D4A : 6704                		beq.s	.not_right
(2)  175/FFFFFFFFFFFF2D4C : 5278 B802           		addq.w	#1,(RAM_TempStampVars).w
(2)  176/FFFFFFFFFFFF2D50 :                     .not_right:
(2)  177/FFFFFFFFFFFF2D50 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  178/FFFFFFFFFFFF2D54 : 6704                		beq.s	.not_left
(2)  179/FFFFFFFFFFFF2D56 : 5378 B802           		subq.w	#1,(RAM_TempStampVars).w
(2)  180/FFFFFFFFFFFF2D5A :                     .not_left:
(2)  181/FFFFFFFFFFFF2D5A : 0807 0001           		btst	#bitJoyDown,d7
(2)  182/FFFFFFFFFFFF2D5E : 6704                		beq.s	.not_down
(2)  183/FFFFFFFFFFFF2D60 : 5278 B804           		addq.w	#1,(RAM_TempStampVars+2).w
(2)  184/FFFFFFFFFFFF2D64 :                     .not_down:
(2)  185/FFFFFFFFFFFF2D64 : 0807 0000           		btst	#bitJoyUp,d7
(2)  186/FFFFFFFFFFFF2D68 : 6704                		beq.s	.not_up
(2)  187/FFFFFFFFFFFF2D6A : 5378 B804           		subq.w	#1,(RAM_TempStampVars+2).w
(2)  188/FFFFFFFFFFFF2D6E :                     .not_up:
(2)  189/FFFFFFFFFFFF2D6E :                     
(2)  190/FFFFFFFFFFFF2D6E : 0807 000A           		btst	#bitJoyX,d7
(2)  191/FFFFFFFFFFFF2D72 : 6704                		beq.s	.not_xx
(2)  192/FFFFFFFFFFFF2D74 : 5278 B806           		addq.w	#1,(RAM_TempStampVars+4).w
(2)  193/FFFFFFFFFFFF2D78 :                     .not_xx:
(2)  194/FFFFFFFFFFFF2D78 : 0807 0009           		btst	#bitJoyY,d7
(2)  195/FFFFFFFFFFFF2D7C : 6708                		beq.s	.not_y
(2)  196/FFFFFFFFFFFF2D7E : 41F8 C800           		lea	(RAM_MdMcd_Stamps),a0
(2)  197/FFFFFFFFFFFF2D82 : 5368 0010           		subq.w	#1,cdstamp_rot(a0)
(2)  198/FFFFFFFFFFFF2D86 :                     .not_y:
(2)  199/FFFFFFFFFFFF2D86 :                     
(2)  200/FFFFFFFFFFFF2D86 : 0807 0006           		btst	#bitJoyA,d7
(2)  201/FFFFFFFFFFFF2D8A : 6704                		beq.s	.not_a
(2)  202/FFFFFFFFFFFF2D8C : 5378 B808           		subq.w	#1,(RAM_TempStampVars+6).w
(2)  203/FFFFFFFFFFFF2D90 :                     .not_a:
(2)  204/FFFFFFFFFFFF2D90 : 0807 0004           		btst	#bitJoyB,d7
(2)  205/FFFFFFFFFFFF2D94 : 6704                		beq.s	.not_bb
(2)  206/FFFFFFFFFFFF2D96 : 5278 B808           		addq.w	#1,(RAM_TempStampVars+6).w
(2)  207/FFFFFFFFFFFF2D9A :                     .not_bb:
(2)  209/FFFFFFFFFFFF2D9A : 6140                		bsr	.show_counter				; Draw counter
(2)  210/FFFFFFFFFFFF2D9C :                     
(2)  211/FFFFFFFFFFFF2D9C : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  212/FFFFFFFFFFFF2DA0 : 0247 0020           		andi.w	#JoyC,d7
(2)  213/FFFFFFFFFFFF2DA4 : 670A                		beq.s	.not_b
(2)  214/FFFFFFFFFFFF2DA6 : 203C FFFF 2F6A      		move.l	#obj_Ball,d0
(2)  215/FFFFFFFFFFFF2DAC : 6100 F8C8           		bsr	Object_Make
(2)  216/FFFFFFFFFFFF2DB0 :                     .not_b:
(2)  217/FFFFFFFFFFFF2DB0 :                     
(2)  218/FFFFFFFFFFFF2DB0 :                     	; Check START button
(2)  219/FFFFFFFFFFFF2DB0 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  220/FFFFFFFFFFFF2DB4 : 0247 0080           		andi.w	#JoyStart,d7
(2)  221/FFFFFFFFFFFF2DB8 : 6700 FF60           		beq	.loop
(2)  222/FFFFFFFFFFFF2DBC : 6100 E106           		bsr	Video_FadeOut_Full
(2)  223/FFFFFFFFFFFF2DC0 :                     
(2)  224/FFFFFFFFFFFF2DC0 :                     	; Stop ALL sequences
(2)  225/FFFFFFFFFFFF2DC0 : 6100 D444           		bsr	gemaStopAll
(2)  226/FFFFFFFFFFFF2DC4 :                     	rept 4
(2)  227/FFFFFFFFFFFF2DC4 :                     		bsr	System_Render		; Wait 4 frames...
(2)  228/FFFFFFFFFFFF2DC4 :                     	endm
(2)  227/FFFFFFFFFFFF2DC4 : 6100 EF94           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DC8 : 6100 EF90           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DCC : 6100 EF8C           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DD0 : 6100 EF88           		bsr	System_Render		; Wait 4 frames...
(2)  229/FFFFFFFFFFFF2DD4 : 31FC 0000 FA10      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  230/FFFFFFFFFFFF2DDA : 4E75                		rts				; <-- RTS
(2)  231/FFFFFFFFFFFF2DDC :                     
(2)  232/FFFFFFFFFFFF2DDC :                     ; ------------------------------------------------------
(2)  233/FFFFFFFFFFFF2DDC :                     ; Show framecounter and input
(2)  234/FFFFFFFFFFFF2DDC :                     ; ------------------------------------------------------
(2)  235/FFFFFFFFFFFF2DDC :                     
(2)  236/FFFFFFFFFFFF2DDC :                     .show_counter:
(2)  238/FFFFFFFFFFFF2DDC : 41FA 02B6           		lea	str_NikonaTest(pc),a0
(2)  239/FFFFFFFFFFFF2DE0 : 7001                		moveq	#1,d0
(2)  240/FFFFFFFFFFFF2DE2 : 7201                		moveq	#1,d1
(2)  241/FFFFFFFFFFFF2DE4 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  242/FFFFFFFFFFFF2DE8 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  243/FFFFFFFFFFFF2DEE : 6100 E1F0           		bsr	Video_Print
(2)  245/FFFFFFFFFFFF2DF2 : 41FA 02B6           		lea	str_NewCountr0(pc),a0
(2)  246/FFFFFFFFFFFF2DF6 : 7017                		moveq	#23,d0
(2)  247/FFFFFFFFFFFF2DF8 : 7201                		moveq	#1,d1
(2)  248/FFFFFFFFFFFF2DFA : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  249/FFFFFFFFFFFF2DFE : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  250/FFFFFFFFFFFF2E04 : 6000 E1DA           		bra	Video_Print
(2)  251/FFFFFFFFFFFF2E08 :                     
(2)  252/FFFFFFFFFFFF2E08 :                     .make_stamp:
(2)  253/FFFFFFFFFFFF2E08 :                     ;  rts
(2)  255/FFFFFFFFFFFF2E08 : 207C 0000 0000      		move.l	#0,a0
(2)  256/FFFFFFFFFFFF2E0E : 227C 0000 0000      		move.l	#0,a1
(2)  257/FFFFFFFFFFFF2E14 : 2038 B802           		move.l	(RAM_TempStampVars).w,d0
(2)  258/FFFFFFFFFFFF2E18 : 2238 B806           		move.l	(RAM_TempStampVars+4).w,d1
(2)  259/FFFFFFFFFFFF2E1C : 243C 0100 00C0      		move.l	#splitw(256,192),d2
(2)  260/FFFFFFFFFFFF2E22 : 263C 0080 0060      		move.l	#splitw(256/2,192/2),d3			; Stamp X/Y center
(2)  261/FFFFFFFFFFFF2E28 : 7E1E                		moveq	#31-1,d7
(2)  262/FFFFFFFFFFFF2E2A :                     .pain_test:
(2)  263/FFFFFFFFFFFF2E2A : 6100 E93C           		bsr	Video_MdMcd_SetStamp
(2)  264/FFFFFFFFFFFF2E2E : D2BC 0010 0000      		add.l	#$00100000,d1
(2)  265/FFFFFFFFFFFF2E34 :                     ; 		adda	#1,a0
(2)  266/FFFFFFFFFFFF2E34 :                     ; 		dbf	d7,.pain_test
(2)  268/FFFFFFFFFFFF2E34 : 4E75                		rts
(2)  269/FFFFFFFFFFFF2E36 :                     
(2)  270/FFFFFFFFFFFF2E36 :                     ; ====================================================================
(2)  271/FFFFFFFFFFFF2E36 :                     ; ------------------------------------------------------
(2)  272/FFFFFFFFFFFF2E36 :                     ; DATA asset locations
(2)  273/FFFFFFFFFFFF2E36 :                     ; ------------------------------------------------------
(2)  274/FFFFFFFFFFFF2E36 :                     
(2)  275/FFFFFFFFFFFF2E36 :                     file_scrn1_main:
(2)  276/FFFFFFFFFFFF2E36 : 0005 5800           		dc.l DATA_BANK0
(2)  277/FFFFFFFFFFFF2E3A : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2E40 : 494E 2E42 494E 00 
(2)  278/FFFFFFFFFFFF2E47 :                     		align 2
(2)  279/FFFFFFFFFFFF2E48 :                     file_scrn2_stamps:
(2)  280/FFFFFFFFFFFF2E48 : FFFF FFFF           		dc.l -1
(2)  281/FFFFFFFFFFFF2E4C : 5354 414D 5053      		dc.b "STAMPS_0.BIN",0
         FFFFFFFFFFFF2E52 : 5F30 2E42 494E 00 
(2)  282/FFFFFFFFFFFF2E59 :                     		align 2
(2)  283/FFFFFFFFFFFF2E5A :                     
(2)  284/FFFFFFFFFFFF2E5A :                     ; ====================================================================
(2)  285/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  286/FFFFFFFFFFFF2E5A :                     ; Objects
(2)  287/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  288/FFFFFFFFFFFF2E5A :                     
(2)  289/FFFFFFFFFFFF2E5A :                     ; --------------------------------------------------
(2)  290/FFFFFFFFFFFF2E5A :                     ; Test object
(2)  291/FFFFFFFFFFFF2E5A :                     ; --------------------------------------------------
(2)  292/FFFFFFFFFFFF2E5A :                     
(2)  293/FFFFFFFFFFFF2E5A :                     obj_Player:
(2)  294/FFFFFFFFFFFF2E5A : 7000                		moveq	#0,d0
(2)  295/FFFFFFFFFFFF2E5C : 102E 001C           		move.b	obj_index(a6),d0
(2)  296/FFFFFFFFFFFF2E60 : D040                		add.w	d0,d0
(2)  297/FFFFFFFFFFFF2E62 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  298/FFFFFFFFFFFF2E66 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  299/FFFFFFFFFFFF2E6A :                     ; ----------------------------------------------
(2)  300/FFFFFFFFFFFF2E6A : 0004                .list:		dc.w .init-.list
(2)  301/FFFFFFFFFFFF2E6C : 002A                		dc.w .main-.list
(2)  302/FFFFFFFFFFFF2E6E :                     ; ----------------------------------------------
(2)  303/FFFFFFFFFFFF2E6E :                     .init:
(2)  304/FFFFFFFFFFFF2E6E : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  305/FFFFFFFFFFFF2E72 : 6100 F86C           		bsr	object_ResetAnim	; Init/Reset animation
(2)  306/FFFFFFFFFFFF2E76 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  307/FFFFFFFFFFFF2E7C : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  308/FFFFFFFFFFFF2E82 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  309/FFFFFFFFFFFF2E88 : 3D7C 0080 0004      		move.w	#256/2,obj_x(a6)	; Set Object's X/Y position
(2)  310/FFFFFFFFFFFF2E8E : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  311/FFFFFFFFFFFF2E94 :                     
(2)  312/FFFFFFFFFFFF2E94 :                     ; ----------------------------------------------
(2)  313/FFFFFFFFFFFF2E94 :                     .main:
(2)  314/FFFFFFFFFFFF2E94 : 41F8 E974           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  315/FFFFFFFFFFFF2E98 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  316/FFFFFFFFFFFF2E9C : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  317/FFFFFFFFFFFF2E9E : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  318/FFFFFFFFFFFF2EA0 : 7400                		moveq	#0,d2
(2)  319/FFFFFFFFFFFF2EA2 : 7600                		moveq	#0,d3
(2)  320/FFFFFFFFFFFF2EA4 : 0807 0003           		btst	#bitJoyRight,d7
(2)  321/FFFFFFFFFFFF2EA8 : 6706                		beq.s	.not_right
(2)  322/FFFFFFFFFFFF2EAA : 7001                		moveq	#1,d0			; X right
(2)  323/FFFFFFFFFFFF2EAC :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  324/FFFFFFFFFFFF2EAC : 7402                		moveq	#2,d2
(2)  325/FFFFFFFFFFFF2EAE : 5243                		addq.w	#1,d3
(2)  326/FFFFFFFFFFFF2EB0 :                     .not_right:
(2)  327/FFFFFFFFFFFF2EB0 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  328/FFFFFFFFFFFF2EB4 : 6706                		beq.s	.not_left
(2)  329/FFFFFFFFFFFF2EB6 : 70FF                		moveq	#-1,d0			; X left
(2)  330/FFFFFFFFFFFF2EB8 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  331/FFFFFFFFFFFF2EB8 : 7403                		moveq	#3,d2
(2)  332/FFFFFFFFFFFF2EBA : 5243                		addq.w	#1,d3
(2)  333/FFFFFFFFFFFF2EBC :                     .not_left:
(2)  334/FFFFFFFFFFFF2EBC : 0807 0001           		btst	#bitJoyDown,d7
(2)  335/FFFFFFFFFFFF2EC0 : 6706                		beq.s	.not_down
(2)  336/FFFFFFFFFFFF2EC2 : 7201                		moveq	#1,d1			; Y down
(2)  337/FFFFFFFFFFFF2EC4 : 7400                		moveq	#0,d2
(2)  338/FFFFFFFFFFFF2EC6 : 5243                		addq.w	#1,d3
(2)  339/FFFFFFFFFFFF2EC8 :                     .not_down:
(2)  340/FFFFFFFFFFFF2EC8 : 0807 0000           		btst	#bitJoyUp,d7
(2)  341/FFFFFFFFFFFF2ECC : 6706                		beq.s	.not_up
(2)  342/FFFFFFFFFFFF2ECE : 72FF                		moveq	#-1,d1			; Y up
(2)  343/FFFFFFFFFFFF2ED0 : 7401                		moveq	#1,d2
(2)  344/FFFFFFFFFFFF2ED2 : 5243                		addq.w	#1,d3
(2)  345/FFFFFFFFFFFF2ED4 :                     .not_up:
(2)  346/FFFFFFFFFFFF2ED4 :                     ; 	if MARS|MARSCD
(2)  347/FFFFFFFFFFFF2ED4 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  348/FFFFFFFFFFFF2ED4 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  349/FFFFFFFFFFFF2ED4 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  350/FFFFFFFFFFFF2ED4 :                     ; 		add.w	d0,obj_x(a6)
(2)  351/FFFFFFFFFFFF2ED4 :                     ; 		add.w	d1,obj_z(a6)
(2)  352/FFFFFFFFFFFF2ED4 :                     ; 	else
(2)  353/FFFFFFFFFFFF2ED4 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  354/FFFFFFFFFFFF2ED4 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  355/FFFFFFFFFFFF2ED4 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  356/FFFFFFFFFFFF2ED8 : D36E 0008           		add.w	d1,obj_y(a6)
(2)  357/FFFFFFFFFFFF2EDC :                     ; 	endif
(2)  358/FFFFFFFFFFFF2EDC :                     
(2)  359/FFFFFFFFFFFF2EDC : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  360/FFFFFFFFFFFF2EE0 :                     
(2)  361/FFFFFFFFFFFF2EE0 :                     ; ----------------------------------------------
(2)  362/FFFFFFFFFFFF2EE0 :                     ; Show the object...
(2)  363/FFFFFFFFFFFF2EE0 :                     
(2)  364/FFFFFFFFFFFF2EE0 : 4A43                		tst.w	d3
(2)  365/FFFFFFFFFFFF2EE2 : 6708                		beq.s	.no_anim
(2)  366/FFFFFFFFFFFF2EE4 : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  367/FFFFFFFFFFFF2EE8 : 6100 F82E           		bsr	object_Animate
(2)  368/FFFFFFFFFFFF2EEC :                     .no_anim:
(2)  369/FFFFFFFFFFFF2EEC :                     ; 		clr.l	(RAM_TestTouch).w
(2)  370/FFFFFFFFFFFF2EEC :                     ; 		bsr	object_Touch
(2)  371/FFFFFFFFFFFF2EEC :                     ; 		tst.l	d0
(2)  372/FFFFFFFFFFFF2EEC :                     ; 		beq.s	.lel
(2)  373/FFFFFFFFFFFF2EEC :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  374/FFFFFFFFFFFF2EEC :                     ; .lel:
(2)  375/FFFFFFFFFFFF2EEC :                     
(2)  376/FFFFFFFFFFFF2EEC : 207C 0000 0000      		move.l	#0,a0
(2)  377/FFFFFFFFFFFF2EF2 : 43F9 FFFF 30F6      		lea	(Map_Haruna),a1
(2)  378/FFFFFFFFFFFF2EF8 : 45F9 FFFF 32A8      		lea	(Plc_Haruna),a2
(2)  379/FFFFFFFFFFFF2EFE : 47F9 0022 9594      		lea	(Art_Haruna),a3
(2)  380/FFFFFFFFFFFF2F04 : 7400                		moveq	#0,d2
(2)  381/FFFFFFFFFFFF2F06 : 302E 0004           		move.w	obj_x(a6),d0
(2)  382/FFFFFFFFFFFF2F0A : 322E 0008           		move.w	obj_y(a6),d1
(2)  383/FFFFFFFFFFFF2F0E : D078 DCC2           		add.w	(RAM_HorScroll+2).w,d0
(2)  384/FFFFFFFFFFFF2F12 : 9278 E082           		sub.w	(RAM_VerScroll+2).w,d1
(2)  385/FFFFFFFFFFFF2F16 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  386/FFFFFFFFFFFF2F1A : E14A                		lsl.w	#8,d2
(2)  387/FFFFFFFFFFFF2F1C : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  388/FFFFFFFFFFFF2F1E : D47C 2302           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  389/FFFFFFFFFFFF2F22 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  390/FFFFFFFFFFFF2F26 : 6000 E418           		bra	Video_MakeSprMap_DMA
(2)  391/FFFFFFFFFFFF2F2A :                     
(2)  392/FFFFFFFFFFFF2F2A :                     ; ----------------------------------------------
(2)  393/FFFFFFFFFFFF2F2A :                     
(2)  394/FFFFFFFFFFFF2F2A :                     .anim_data:
(2)  395/FFFFFFFFFFFF2F2A : 0008                		dc.w .anim_down-.anim_data
(2)  396/FFFFFFFFFFFF2F2C : 0016                		dc.w .anim_up-.anim_data
(2)  397/FFFFFFFFFFFF2F2E : 0024                		dc.w .anim_right-.anim_data
(2)  398/FFFFFFFFFFFF2F30 : 0032                		dc.w .anim_left-.anim_data
(2)  399/FFFFFFFFFFFF2F32 :                     
(2)  400/FFFFFFFFFFFF2F32 :                     .anim_down:
(2)  401/FFFFFFFFFFFF2F32 : 0008                		dc.w 8
(2)  402/FFFFFFFFFFFF2F34 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2F3A : 0002             
(2)  403/FFFFFFFFFFFF2F3C : FFFE                		dc.w -2
(2)  404/FFFFFFFFFFFF2F3E :                     		align 2
(2)  405/FFFFFFFFFFFF2F40 :                     .anim_up:
(2)  406/FFFFFFFFFFFF2F40 : 0008                		dc.w 8
(2)  407/FFFFFFFFFFFF2F42 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2F48 : 0005             
(2)  408/FFFFFFFFFFFF2F4A : FFFE                		dc.w -2
(2)  409/FFFFFFFFFFFF2F4C :                     		align 2
(2)  410/FFFFFFFFFFFF2F4E :                     .anim_right:
(2)  411/FFFFFFFFFFFF2F4E : 0008                		dc.w 8
(2)  412/FFFFFFFFFFFF2F50 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2F56 : 0008             
(2)  413/FFFFFFFFFFFF2F58 : FFFE                		dc.w -2
(2)  414/FFFFFFFFFFFF2F5A :                     		align 2
(2)  415/FFFFFFFFFFFF2F5C :                     .anim_left:
(2)  416/FFFFFFFFFFFF2F5C : 0008                		dc.w 8
(2)  417/FFFFFFFFFFFF2F5E : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2F64 : 000B             
(2)  418/FFFFFFFFFFFF2F66 : FFFE                		dc.w -2
(2)  419/FFFFFFFFFFFF2F68 :                     		align 2
(2)  420/FFFFFFFFFFFF2F6A :                     
(2)  421/FFFFFFFFFFFF2F6A :                     ; --------------------------------------------------
(2)  422/FFFFFFFFFFFF2F6A :                     ; Test object
(2)  423/FFFFFFFFFFFF2F6A :                     ; --------------------------------------------------
(2)  424/FFFFFFFFFFFF2F6A :                     
(2)  425/FFFFFFFFFFFF2F6A :                     obj_Ball:
(2)  426/FFFFFFFFFFFF2F6A : 7000                		moveq	#0,d0
(2)  427/FFFFFFFFFFFF2F6C : 102E 001C           		move.b	obj_index(a6),d0
(2)  428/FFFFFFFFFFFF2F70 : D040                		add.w	d0,d0
(2)  429/FFFFFFFFFFFF2F72 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  430/FFFFFFFFFFFF2F76 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  431/FFFFFFFFFFFF2F7A :                     ; ----------------------------------------------
(2)  432/FFFFFFFFFFFF2F7A : 0004                .list:		dc.w .init-.list
(2)  433/FFFFFFFFFFFF2F7C : 0072                		dc.w .main-.list
(2)  434/FFFFFFFFFFFF2F7E :                     ; ----------------------------------------------
(2)  435/FFFFFFFFFFFF2F7E :                     .init:
(2)  436/FFFFFFFFFFFF2F7E : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  437/FFFFFFFFFFFF2F82 : 6100 F75C           		bsr	object_ResetAnim	; Init/Reset animation
(2)  438/FFFFFFFFFFFF2F86 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  439/FFFFFFFFFFFF2F8C : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  440/FFFFFFFFFFFF2F92 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  441/FFFFFFFFFFFF2F98 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  442/FFFFFFFFFFFF2F9E :                     
(2)  443/FFFFFFFFFFFF2F9E : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  444/FFFFFFFFFFFF2FA4 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  445/FFFFFFFFFFFF2FAA : 303C 0049           		move.w	#$48+1,d0
(2)  446/FFFFFFFFFFFF2FAE : 6100 F1B2           		bsr	System_DiceRoll
(2)  447/FFFFFFFFFFFF2FB2 : E348                		lsl.w	#1,d0
(2)  448/FFFFFFFFFFFF2FB4 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  449/FFFFFFFFFFFF2FB8 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  450/FFFFFFFFFFFF2FBC : E748                		lsl.w	#3,d0
(2)  451/FFFFFFFFFFFF2FBE : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  452/FFFFFFFFFFFF2FC2 : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  453/FFFFFFFFFFFF2FC6 :                     
(2)  454/FFFFFFFFFFFF2FC6 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  455/FFFFFFFFFFFF2FCC : 6100 F13A           		bsr	System_Random
(2)  456/FFFFFFFFFFFF2FD0 : 2E38 F9F8           		move.l	(RAM_SysRandom).w,d7
(2)  457/FFFFFFFFFFFF2FD4 : E24F                		lsr.w	#1,d7
(2)  458/FFFFFFFFFFFF2FD6 : 640A                		bcc.s	.x_random
(2)  459/FFFFFFFFFFFF2FD8 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  460/FFFFFFFFFFFF2FDC : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  461/FFFFFFFFFFFF2FE2 :                     .x_random:
(2)  462/FFFFFFFFFFFF2FE2 : E24F                		lsr.w	#1,d7
(2)  463/FFFFFFFFFFFF2FE4 : 6404                		bcc.s	.y_random
(2)  464/FFFFFFFFFFFF2FE6 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  465/FFFFFFFFFFFF2FEA :                     .y_random:
(2)  466/FFFFFFFFFFFF2FEA : 4E75                		rts
(2)  467/FFFFFFFFFFFF2FEC :                     
(2)  468/FFFFFFFFFFFF2FEC :                     ; ----------------------------------------------
(2)  469/FFFFFFFFFFFF2FEC :                     .main:
(2)  470/FFFFFFFFFFFF2FEC : 3438 E872           		move.w	(RAM_VdpRegSetC).w,d2
(2)  471/FFFFFFFFFFFF2FF0 : 0802 0002           		btst	#2,d2
(2)  472/FFFFFFFFFFFF2FF4 : 660E                		bne.s	.y_fix
(2)  473/FFFFFFFFFFFF2FF6 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  474/FFFFFFFFFFFF2FFC : 6D06                		blt.s	.y_fix
(2)  475/FFFFFFFFFFFF2FFE : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  476/FFFFFFFFFFFF3004 :                     .y_fix:
(2)  477/FFFFFFFFFFFF3004 :                     
(2)  478/FFFFFFFFFFFF3004 : 323C 00E0           		move.w	#224,d1
(2)  479/FFFFFFFFFFFF3008 : 3438 E872           		move.w	(RAM_VdpRegSetC).w,d2
(2)  480/FFFFFFFFFFFF300C : 0802 0002           		btst	#2,d2
(2)  481/FFFFFFFFFFFF3010 : 6702                		beq.s	.y_double
(2)  482/FFFFFFFFFFFF3012 : D241                		add.w	d1,d1
(2)  483/FFFFFFFFFFFF3014 :                     .y_double:
(2)  484/FFFFFFFFFFFF3014 : 303C 0100           		move.w	#256,d0
(2)  485/FFFFFFFFFFFF3018 : 342E 0004           		move.w	obj_x(a6),d2
(2)  486/FFFFFFFFFFFF301C : 4A42                		tst.w	d2
(2)  487/FFFFFFFFFFFF301E : 6A0A                		bpl.s	.x_back
(2)  488/FFFFFFFFFFFF3020 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  489/FFFFFFFFFFFF3024 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  490/FFFFFFFFFFFF302A :                     .x_back:
(2)  491/FFFFFFFFFFFF302A : B440                		cmp.w	d0,d2
(2)  492/FFFFFFFFFFFF302C : 6D0A                		blt.s	.x_foward
(2)  493/FFFFFFFFFFFF302E : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  494/FFFFFFFFFFFF3032 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  495/FFFFFFFFFFFF3038 :                     .x_foward:
(2)  496/FFFFFFFFFFFF3038 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  497/FFFFFFFFFFFF303C :                     
(2)  498/FFFFFFFFFFFF303C : 342E 0008           		move.w	obj_y(a6),d2
(2)  499/FFFFFFFFFFFF3040 : 4A42                		tst.w	d2
(2)  500/FFFFFFFFFFFF3042 : 6A04                		bpl.s	.y_back
(2)  501/FFFFFFFFFFFF3044 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  502/FFFFFFFFFFFF3048 :                     .y_back:
(2)  503/FFFFFFFFFFFF3048 : B441                		cmp.w	d1,d2
(2)  504/FFFFFFFFFFFF304A : 6D04                		blt.s	.y_foward
(2)  505/FFFFFFFFFFFF304C : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  506/FFFFFFFFFFFF3050 :                     .y_foward:
(2)  507/FFFFFFFFFFFF3050 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  508/FFFFFFFFFFFF3054 :                     
(2)  509/FFFFFFFFFFFF3054 : 6100 F692           		bsr	object_Speed
(2)  510/FFFFFFFFFFFF3058 :                     
(2)  511/FFFFFFFFFFFF3058 :                     ; ----------------------------------------------
(2)  512/FFFFFFFFFFFF3058 :                     ; Show the object...
(2)  513/FFFFFFFFFFFF3058 :                     
(2)  514/FFFFFFFFFFFF3058 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  515/FFFFFFFFFFFF305C : 6100 F6BA           		bsr	object_Animate
(2)  516/FFFFFFFFFFFF3060 : 43F9 FFFF 335C      		lea	(Map_Sisi),a1
(2)  517/FFFFFFFFFFFF3066 : 7400                		moveq	#0,d2
(2)  518/FFFFFFFFFFFF3068 : 302E 0004           		move.w	obj_x(a6),d0
(2)  519/FFFFFFFFFFFF306C : 322E 0008           		move.w	obj_y(a6),d1
(2)  520/FFFFFFFFFFFF3070 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  521/FFFFFFFFFFFF3074 : E14A                		lsl.w	#8,d2
(2)  522/FFFFFFFFFFFF3076 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  523/FFFFFFFFFFFF3078 : D47C 4326           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  524/FFFFFFFFFFFF307C : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  525/FFFFFFFFFFFF3080 : 6000 E2D6           		bra	Video_MakeSprMap
(2)  526/FFFFFFFFFFFF3084 :                     
(2)  527/FFFFFFFFFFFF3084 :                     ; ----------------------------------------------
(2)  528/FFFFFFFFFFFF3084 :                     
(2)  529/FFFFFFFFFFFF3084 :                     .anim_data:
(2)  530/FFFFFFFFFFFF3084 : 0002                		dc.w .maind-.anim_data
(2)  531/FFFFFFFFFFFF3086 :                     .maind:
(2)  532/FFFFFFFFFFFF3086 : 0008                		dc.w 8
(2)  533/FFFFFFFFFFFF3088 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF308E : 0001             
(2)  534/FFFFFFFFFFFF3090 : FFFE                		dc.w -2
(2)  535/FFFFFFFFFFFF3092 :                     		align 2
(2)  536/FFFFFFFFFFFF3094 :                     
(2)  537/FFFFFFFFFFFF3094 :                     ; ====================================================================
(2)  538/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  539/FFFFFFFFFFFF3094 :                     ; Subroutines
(2)  540/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  541/FFFFFFFFFFFF3094 :                     
(2)  542/FFFFFFFFFFFF3094 :                     ; ====================================================================
(2)  543/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  544/FFFFFFFFFFFF3094 :                     ; Custom VBlank
(2)  545/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  546/FFFFFFFFFFFF3094 :                     
(2)  547/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  548/FFFFFFFFFFFF3094 :                     ; Custom HBlank
(2)  549/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  550/FFFFFFFFFFFF3094 :                     
(2)  551/FFFFFFFFFFFF3094 :                     ; ====================================================================
(2)  552/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  553/FFFFFFFFFFFF3094 :                     ; Includes for this screen
(2)  554/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  555/FFFFFFFFFFFF3094 :                     
(2)  556/FFFFFFFFFFFF3094 :                     ; ====================================================================
(2)  557/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  558/FFFFFFFFFFFF3094 :                     ; Small data section
(2)  559/FFFFFFFFFFFF3094 :                     ; ------------------------------------------------------
(2)  560/FFFFFFFFFFFF3094 :                     
(2)  562/FFFFFFFFFFFF3094 :                     str_NikonaTest:
(2)  563/FFFFFFFFFFFF3094 : 81FF B802           		dc.l pstr_mem(1,RAM_TempStampVars)
(2)  564/FFFFFFFFFFFF3098 : 20                  		dc.b " "
(2)  565/FFFFFFFFFFFF3099 : 81FF B804           		dc.l pstr_mem(1,RAM_TempStampVars+2)
(2)  566/FFFFFFFFFFFF309D : 20                  		dc.b " "
(2)  567/FFFFFFFFFFFF309E : 81FF B806           		dc.l pstr_mem(1,RAM_TempStampVars+4)
(2)  568/FFFFFFFFFFFF30A2 : 20                  		dc.b " "
(2)  569/FFFFFFFFFFFF30A3 : 81FF B808           		dc.l pstr_mem(1,RAM_TempStampVars+6)
(2)  570/FFFFFFFFFFFF30A7 : 20                  		dc.b " "
(2)  571/FFFFFFFFFFFF30A8 : 00                  		dc.b 0
(2)  572/FFFFFFFFFFFF30A9 :                     		align 2
(2)  574/FFFFFFFFFFFF30AA :                     
(2)  575/FFFFFFFFFFFF30AA :                     str_NewCountr0:
(2)  576/FFFFFFFFFFFF30AA : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  577/FFFFFFFFFFFF30AE : 00                  		dc.b 0
(2)  578/FFFFFFFFFFFF30AF :                     		align 2
(2)  579/FFFFFFFFFFFF30B0 :                     
(2)  580/FFFFFFFFFFFF30B0 :                     str_MidemeEsta:
(2)  581/FFFFFFFFFFFF30B0 : 306F 316F 326F      		dc.b "0o1o2o3o4o5o6o7o8o9oAoBoCoDoEoFo",$0A
         FFFFFFFFFFFF30B6 : 336F 346F 356F 
         FFFFFFFFFFFF30BC : 366F 376F 386F 
         FFFFFFFFFFFF30C2 : 396F 416F 426F 
         FFFFFFFFFFFF30C8 : 436F 446F 456F 
         FFFFFFFFFFFF30CE : 466F 0A          
(2)  582/FFFFFFFFFFFF30D1 : 00                  		dc.b 0
(2)  583/FFFFFFFFFFFF30D2 :                     		align 2
(2)  584/FFFFFFFFFFFF30D4 :                     
(2)  585/FFFFFFFFFFFF30D4 :                     ; ----------------------------------------------------------------
(2)  586/FFFFFFFFFFFF30D4 :                     ; Everything else...
(2)  587/FFFFFFFFFFFF30D4 :                     ; ----------------------------------------------------------------
(2)  588/FFFFFFFFFFFF30D4 :                     
(2)  589/FFFFFFFFFFFF30D4 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  590/FFFFFFFFFFFF30F4 :                     		align 2
(2)  591/FFFFFFFFFFFF30F6 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  592/FFFFFFFFFFFF32A6 :                     		align 2
(2)  593/FFFFFFFFFFFF32A8 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  594/FFFFFFFFFFFF3338 :                     		align 2
(2)  595/FFFFFFFFFFFF333A :                     
(2)  596/FFFFFFFFFFFF333A :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)  597/FFFFFFFFFFFF335A :                     		align 2
(2)  598/FFFFFFFFFFFF335C :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)  599/FFFFFFFFFFFF33A0 :                     		align 2
(2)  600/FFFFFFFFFFFF33A2 :                     
(2)  601/FFFFFFFFFFFF33A2 :                     Pal_StampTest:
(2)  602/FFFFFFFFFFFF33A2 :                     		binclude "game/data/mcd/stamps/test/pal.bin"
(2)  603/FFFFFFFFFFFF33C2 :                     		align 2
(2)  604/FFFFFFFFFFFF33C4 :                     
(2)  605/FFFFFFFFFFFF33C4 :                     ; ----------------------------------------------------------------
(2)  606/FFFFFFFFFFFF33C4 :                     
(2)  607/FFFFFFFFFFFF33C4 :                     MapStamp_Test:
(2)  608/FFFFFFFFFFFF33C4 :                     		binclude "game/data/mcd/stamps/test/map.bin"
(2)  609/FFFFFFFFFFFF3544 :                     		align 2
(2)  610/FFFFFFFFFFFF3546 :                     
(2)  611/FFFFFFFFFFFF3546 :                     ; ====================================================================
(2)  612/FFFFFFFFFFFF3546 :                     ; ------------------------------------------------------
(2)  613/FFFFFFFFFFFF3546 :                     ; Sound bank
(2)  614/FFFFFFFFFFFF3546 :                     ; ------------------------------------------------------
(2)  615/FFFFFFFFFFFF3546 :                     
(2)  616/FFFFFFFFFFFF3546 :                     ; 	if MCD|MARSCD
(2)  617/FFFFFFFFFFFF3546 :                     ; GemaTracks_Scr2:
(2)  618/FFFFFFFFFFFF3546 :                     ; 		gemaTrk 1,5,gtrk_NadieCd_2
(2)  619/FFFFFFFFFFFF3546 :                     ;
(2)  620/FFFFFFFFFFFF3546 :                     ; ; ----------------------------------------------------
(2)  621/FFFFFFFFFFFF3546 :                     ;
(2)  622/FFFFFFFFFFFF3546 :                     ; gtrk_NadieCd_2:
(2)  623/FFFFFFFFFFFF3546 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  624/FFFFFFFFFFFF3546 :                     ; .blk:
(2)  625/FFFFFFFFFFFF3546 :                     ; 		binclude "sound/tracks/nadie_cd_blk.bin"
(2)  626/FFFFFFFFFFFF3546 :                     ; .pat:
(2)  627/FFFFFFFFFFFF3546 :                     ; 		binclude "sound/tracks/nadie_cd_patt.bin"
(2)  628/FFFFFFFFFFFF3546 :                     ; .ins:
(2)  629/FFFFFFFFFFFF3546 :                     ; 		gInsPcm 0,PcmIns_Nadie_L,0
(2)  630/FFFFFFFFFFFF3546 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  631/FFFFFFFFFFFF3546 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  632/FFFFFFFFFFFF3546 :                     ; 		gInsPcm -5,PcmIns_PKick,%00
(2)  633/FFFFFFFFFFFF3546 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  634/FFFFFFFFFFFF3546 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  635/FFFFFFFFFFFF3546 :                     ; 		gInsPcm 0,PcmIns_Piano,%00
(2)  636/FFFFFFFFFFFF3546 :                     ; 		gInsPcm -12,PcmIns_PTom,%00
(2)  637/FFFFFFFFFFFF3546 :                     ; 		gInsNull
(2)  638/FFFFFFFFFFFF3546 :                     ; 		gInsPcm 0,PcmIns_Nadie_R,0
(2)  639/FFFFFFFFFFFF3546 :                     ;
(2)  640/FFFFFFFFFFFF3546 :                     ; ; ----------------------------------------------------
(2)  641/FFFFFFFFFFFF3546 :                     ;
(2)  642/FFFFFFFFFFFF3546 :                     ; FmIns_Piano_Aqua:
(2)  643/FFFFFFFFFFFF3546 :                     ; 		binclude "sound/instr/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  644/FFFFFFFFFFFF3546 :                     ; FmIns_HBeat_tom:
(2)  645/FFFFFFFFFFFF3546 :                     ; 		binclude "sound/instr/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  646/FFFFFFFFFFFF3546 :                     ; FmIns_Trumpet_1:
(2)  647/FFFFFFFFFFFF3546 :                     ; 		binclude "sound/instr/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  648/FFFFFFFFFFFF3546 :                     ; 	endif
(2)  649/FFFFFFFFFFFF3546 :                     
(2)  650/FFFFFFFFFFFF3546 :                     ; ====================================================================
(2)  651/FFFFFFFFFFFF3546 :                     ; ------------------------------------------------------
(2)  652/FFFFFFFFFFFF3546 :                     ; Stamp cell temporal storage
(2)  653/FFFFFFFFFFFF3546 :                     ; ------------------------------------------------------
(2)  654/FFFFFFFFFFFF3546 :                     
(2)  655/FFFFFFFFFFFF3546 :                     		align 2
(2)  656/FFFFFFFFFFFF3548 :                     SC2_OutCells:
(2)  657/FFFFFFFFFFFF3548 :                     		ds.b DEF_MaxStampCOut*$20	; <-- auto-label
(2)  658/FFFFFFFFFFFF4148 :                     
(1)   17/FFFFFFFFFFFF4148 :                     mcscrn_e:
(1)   17/   53548 :                                     dephase
(1)   17/   53548 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   17/   53548 :                                     align $800
(1)   17/   53800 :                     ; Md_Screen00_e:
(1)   17/   53800 : =$53800              MD_SCREEN02_E label *
(1)   17/   53800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN02",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   18/   53800 : (MACRO)              	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/   53800 :                                     align $800              ; SCD/CD32X sector align
(1)   18/   53800 : =$53800              MD_SCREEN03 label *
(1)   18/   53800 :                     
(1)   18/   53800 :                     mctopscrn:
(1)   18/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   18/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   18/FFFFFFFFFFFF2C00 :                             include "game/code/screen_3.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   53800 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Haruna		ds.b $24
(2)   22/      25 :                     vramLoc_Sisi		ds.b $10
(2)   23/      35 :  (MACRO-2)           			endmemory
(2)   23/   53834 :                     .here:          dephase
(2)   23/   53834 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   24/FFFFFFFFFFFF2C00 :                     
(2)   25/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   28/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   29/FFFFFFFFFFFF2C00 :                     
(2)   30/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   30/   53800 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_ThisSpeed		ds.w 1
(2)   32/FFFFFFFFFFFFB802 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   33/   53808 :                     .here:          dephase
(2)   33/   53808 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/FFFFFFFFFFFF2C00 :                     
(2)   36/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   37/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   38/FFFFFFFFFFFF2C00 :                     ; Init
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   42/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   43/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   44/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   46/FFFFFFFFFFFF2C08 : 41FA 0188           		lea	file_scrn3_mars(pc),a0			; Load DATA BANK for 32X stuff
(2)   47/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 41F9 0020 0002      		lea	(PalMars_Test+color_indx(1)),a0
(2)   49/FFFFFFFFFFFF2C16 : 7001                		moveq	#1,d0
(2)   50/FFFFFFFFFFFF2C18 : 323C 00C0           		move.w	#192,d1
(2)   51/FFFFFFFFFFFF2C1C : 7400                		moveq	#0,d2
(2)   52/FFFFFFFFFFFF2C1E : 6100 F038           		bsr	Video_MdMars_FadePal
(2)   53/FFFFFFFFFFFF2C22 : 41F9 0020 0580      		lea	(PalMars_Haruna),a0
(2)   54/FFFFFFFFFFFF2C28 : 303C 00C0           		move.w	#192,d0
(2)   55/FFFFFFFFFFFF2C2C : 7210                		moveq	#16,d1
(2)   56/FFFFFFFFFFFF2C2E : 7400                		moveq	#0,d2
(2)   57/FFFFFFFFFFFF2C30 : 6100 F026           		bsr	Video_MdMars_FadePal
(2)   58/FFFFFFFFFFFF2C34 : 41F9 0020 05A0      		lea	(PalMars_Sisi),a0
(2)   59/FFFFFFFFFFFF2C3A : 303C 00D0           		move.w	#208,d0
(2)   60/FFFFFFFFFFFF2C3E : 7210                		moveq	#16,d1
(2)   61/FFFFFFFFFFFF2C40 : 7400                		moveq	#0,d2
(2)   62/FFFFFFFFFFFF2C42 : 6100 F014           		bsr	Video_MdMars_FadePal
(2)   63/FFFFFFFFFFFF2C46 : 41F9 0020 08C0      		lea	(ArtMars_Test2D),a0
(2)   64/FFFFFFFFFFFF2C4C : 227C 0000 0000      		move.l	#0,a1
(2)   65/FFFFFFFFFFFF2C52 : 203C 0001 7200      		move.l	#ArtMars_Test2D_e-ArtMars_Test2D,d0
(2)   66/FFFFFFFFFFFF2C58 : 6100 ECBE           		bsr	Video_MdMars_LoadVram
(2)   67/FFFFFFFFFFFF2C5C : 41F9 0020 0180      		lea	(MapMars_Test),a0
(2)   68/FFFFFFFFFFFF2C62 : 227C 0000 0000      		move.l	#ArtMars_TestArt,a1
(2)   69/FFFFFFFFFFFF2C68 : 7000                		moveq	#0,d0
(2)   70/FFFFFFFFFFFF2C6A : 7200                		moveq	#0,d1
(2)   71/FFFFFFFFFFFF2C6C : 343C 0020           		move.w	#512/16,d2
(2)   72/FFFFFFFFFFFF2C70 : 363C 0010           		move.w	#256/16,d3
(2)   73/FFFFFFFFFFFF2C74 : 7800                		moveq	#0,d4
(2)   74/FFFFFFFFFFFF2C76 : 6100 ECCA           		bsr	Video_MdMars_LoadMap
(2)   75/FFFFFFFFFFFF2C7A : 7001                		moveq	#1,d0					; 32X 3D mode
(2)   76/FFFFFFFFFFFF2C7C : 6100 EC4C           		bsr	Video_MdMars_VideoMode
(2)   78/FFFFFFFFFFFF2C80 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C80 : 41FA 00FE           		lea	file_scrn3_main(pc),a0			; Load MAIN DATA bank
(2)   80/FFFFFFFFFFFF2C84 : 6100 F9A4           		bsr	System_SetDataBank
(2)   81/FFFFFFFFFFFF2C88 : 6100 F360           		bsr	System_SramInit
(2)   82/FFFFFFFFFFFF2C8C : 52B8 E878           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   83/FFFFFFFFFFFF2C90 : 6100 F3C6           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   84/FFFFFFFFFFFF2C94 :                     	; ----------------------------------------------
(2)   85/FFFFFFFFFFFF2C94 :                     	; Load PRINT
(2)   86/FFFFFFFFFFFF2C94 : 203C 0021 52F4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   87/FFFFFFFFFFFF2C9A : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   88/FFFFFFFFFFFF2C9E : 6100 E318           		bsr	Video_PrintInit
(2)   89/FFFFFFFFFFFF2CA2 : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   90/FFFFFFFFFFFF2CA8 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   91/FFFFFFFFFFFF2CAC : 6100 E304           		bsr	Video_PrintInitW
(2)   92/FFFFFFFFFFFF2CB0 : 6100 E310           		bsr	Video_PrintDefPal_Fade
(2)   93/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)   94/FFFFFFFFFFFF2CB4 : 203C FFFF 2DA4      		move.l	#obj_Player,d0
(2)   95/FFFFFFFFFFFF2CBA : 6100 F9BA           		bsr	Object_Make				; Make MD object
(2)   96/FFFFFFFFFFFF2CBE : 41F9 FFFF 2FFE      		lea	(objPal_Haruna),a0
(2)   97/FFFFFFFFFFFF2CC4 : 7010                		moveq	#16,d0					; d0 - Start at color index 16
(2)   98/FFFFFFFFFFFF2CC6 : 7210                		moveq	#16,d1					; d1 - Numof colors 16
(2)   99/FFFFFFFFFFFF2CC8 : 6100 E272           		bsr	Video_FadePal
(2)  100/FFFFFFFFFFFF2CCC :                     ; 		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  101/FFFFFFFFFFFF2CCC :                     ; 		moveq	#1,d0					; X/Y positions 1,1
(2)  102/FFFFFFFFFFFF2CCC :                     ; 		moveq	#1,d1
(2)  103/FFFFFFFFFFFF2CCC :                     ; 		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  104/FFFFFFFFFFFF2CCC :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  105/FFFFFFFFFFFF2CCC :                     ; 		bsr	Video_PrintW				; <-- Print BIG text
(2)  106/FFFFFFFFFFFF2CCC : 41F9 0022 DD76      		lea	(Pal_Sisi+color_indx(1)),a0
(2)  107/FFFFFFFFFFFF2CD2 : 7001                		moveq	#1,d0
(2)  108/FFFFFFFFFFFF2CD4 : 720F                		moveq	#15,d1
(2)  109/FFFFFFFFFFFF2CD6 : 6100 E264           		bsr	Video_FadePal
(2)  110/FFFFFFFFFFFF2CDA : 203C 0022 C414      		move.l	#Art_Sisi,d0
(2)  111/FFFFFFFFFFFF2CE0 : 323C 04A0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)  112/FFFFFFFFFFFF2CE4 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)  113/FFFFFFFFFFFF2CE8 : 6100 DB8A           		bsr	Video_LoadArt
(2)  114/FFFFFFFFFFFF2CEC :                     	; ----------------------------------------------
(2)  115/FFFFFFFFFFFF2CEC : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  116/FFFFFFFFFFFF2CF2 : 6176                		bsr	.show_counter				; Draw counter
(2)  117/FFFFFFFFFFFF2CF4 : 6100 D9EA           		bsr	Video_DisplayOn
(2)  118/FFFFFFFFFFFF2CF8 :                     	; ----------------------------------------------
(2)  119/FFFFFFFFFFFF2CF8 : 6100 F94A           		bsr	Object_Run
(2)  120/FFFFFFFFFFFF2CFC : 6100 E1A4           		bsr	Video_FadeIn_Full
(2)  121/FFFFFFFFFFFF2D00 :                     
(2)  122/FFFFFFFFFFFF2D00 :                     ; ====================================================================
(2)  123/FFFFFFFFFFFF2D00 :                     ; ------------------------------------------------------
(2)  124/FFFFFFFFFFFF2D00 :                     ; Loop
(2)  125/FFFFFFFFFFFF2D00 :                     ; ------------------------------------------------------
(2)  126/FFFFFFFFFFFF2D00 :                     
(2)  127/FFFFFFFFFFFF2D00 :                     .loop:
(2)  128/FFFFFFFFFFFF2D00 : 6100 F942           		bsr	Object_Run
(2)  129/FFFFFFFFFFFF2D04 : 6100 D776           		bsr	Video_BuildSprites
(2)  130/FFFFFFFFFFFF2D08 : 6100 F050           		bsr	System_Render
(2)  131/FFFFFFFFFFFF2D0C :                     
(2)  132/FFFFFFFFFFFF2D0C : 615C                		bsr	.show_counter
(2)  133/FFFFFFFFFFFF2D0E : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  134/FFFFFFFFFFFF2D12 : 0247 0010           		andi.w	#JoyB,d7
(2)  135/FFFFFFFFFFFF2D16 : 6714                		beq	.b_update
(2)  136/FFFFFFFFFFFF2D18 : 0678 0001 B800      		add.w	#1,(RAM_ThisSpeed).w
(2)  137/FFFFFFFFFFFF2D1E : 0C78 0010 B800      		cmp.w	#$10,(RAM_ThisSpeed).w
(2)  138/FFFFFFFFFFFF2D24 : 6606                		bne.s	.b_update
(2)  139/FFFFFFFFFFFF2D26 : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  140/FFFFFFFFFFFF2D2C :                     .b_update:
(2)  141/FFFFFFFFFFFF2D2C : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  142/FFFFFFFFFFFF2D30 : 0247 0020           		andi.w	#JoyC,d7
(2)  143/FFFFFFFFFFFF2D34 : 670A                		beq.s	.not_b
(2)  144/FFFFFFFFFFFF2D36 : 203C FFFF 2EB8      		move.l	#obj_Ball,d0
(2)  145/FFFFFFFFFFFF2D3C : 6100 F938           		bsr	Object_Make
(2)  146/FFFFFFFFFFFF2D40 :                     .not_b:
(2)  147/FFFFFFFFFFFF2D40 :                     
(2)  148/FFFFFFFFFFFF2D40 :                     ; 	if MARS|MARSCD
(2)  149/FFFFFFFFFFFF2D40 :                     ; 		move.w	(Controller_1+on_press).w,d7
(2)  150/FFFFFFFFFFFF2D40 :                     ; 		andi.w	#JoyA,d7
(2)  151/FFFFFFFFFFFF2D40 :                     ; 		beq.s	.not_a
(2)  152/FFFFFFFFFFFF2D40 :                     ; 		moveq	#1,d0					; 32X 3D mode
(2)  153/FFFFFFFFFFFF2D40 :                     ; 		bsr	Video_MdMars_VideoMode
(2)  154/FFFFFFFFFFFF2D40 :                     ; .not_a:
(2)  155/FFFFFFFFFFFF2D40 :                     ; 	endif
(2)  156/FFFFFFFFFFFF2D40 :                     
(2)  157/FFFFFFFFFFFF2D40 :                     	; Check START button
(2)  158/FFFFFFFFFFFF2D40 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  159/FFFFFFFFFFFF2D44 : 0247 0080           		andi.w	#JoyStart,d7
(2)  160/FFFFFFFFFFFF2D48 : 67B6                		beq	.loop
(2)  161/FFFFFFFFFFFF2D4A : 6100 E178           		bsr	Video_FadeOut_Full
(2)  162/FFFFFFFFFFFF2D4E :                     	; Stop ALL sequences
(2)  163/FFFFFFFFFFFF2D4E : 6100 D4B6           		bsr	gemaStopAll
(2)  164/FFFFFFFFFFFF2D52 :                     	rept 4
(2)  165/FFFFFFFFFFFF2D52 :                     		bsr	System_Render		; Wait 4 frames...
(2)  166/FFFFFFFFFFFF2D52 :                     	endm
(2)  165/FFFFFFFFFFFF2D52 : 6100 F006           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D56 : 6100 F002           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D5A : 6100 EFFE           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2D5E : 6100 EFFA           		bsr	System_Render		; Wait 4 frames...
(2)  167/FFFFFFFFFFFF2D62 : 31FC 0000 FA10      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  168/FFFFFFFFFFFF2D68 : 4E75                		rts				; <-- RTS
(2)  169/FFFFFFFFFFFF2D6A :                     
(2)  170/FFFFFFFFFFFF2D6A :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2D6A :                     ; Show framecounter and input
(2)  172/FFFFFFFFFFFF2D6A :                     ; ------------------------------------------------------
(2)  173/FFFFFFFFFFFF2D6A :                     
(2)  174/FFFFFFFFFFFF2D6A :                     .show_counter:
(2)  175/FFFFFFFFFFFF2D6A : 41FA 025E           		lea	str_NewCountr0(pc),a0
(2)  176/FFFFFFFFFFFF2D6E : 7001                		moveq	#1,d0
(2)  177/FFFFFFFFFFFF2D70 : 7218                		moveq	#24,d1
(2)  178/FFFFFFFFFFFF2D72 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  179/FFFFFFFFFFFF2D76 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  180/FFFFFFFFFFFF2D7C : 6000 E262           		bra	Video_Print
(2)  181/FFFFFFFFFFFF2D80 :                     
(2)  182/FFFFFFFFFFFF2D80 :                     ; ====================================================================
(2)  183/FFFFFFFFFFFF2D80 :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D80 :                     ; DATA asset locations
(2)  185/FFFFFFFFFFFF2D80 :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D80 :                     
(2)  187/FFFFFFFFFFFF2D80 :                     file_scrn3_main:
(2)  188/FFFFFFFFFFFF2D80 : 0005 5800           		dc.l DATA_BANK0
(2)  189/FFFFFFFFFFFF2D84 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D8A : 494E 2E42 494E 00 
(2)  190/FFFFFFFFFFFF2D91 :                     		align 2
(2)  191/FFFFFFFFFFFF2D92 :                     file_scrn3_mars:
(2)  192/FFFFFFFFFFFF2D92 : 0008 5800           		dc.l DATA_BANK1
(2)  193/FFFFFFFFFFFF2D96 : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2D9C : 5253 2E42 494E 00 
(2)  194/FFFFFFFFFFFF2DA3 :                     		align 2
(2)  195/FFFFFFFFFFFF2DA4 :                     
(2)  196/FFFFFFFFFFFF2DA4 :                     ; ====================================================================
(2)  197/FFFFFFFFFFFF2DA4 :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2DA4 :                     ; Objects
(2)  199/FFFFFFFFFFFF2DA4 :                     ; ------------------------------------------------------
(2)  200/FFFFFFFFFFFF2DA4 :                     
(2)  201/FFFFFFFFFFFF2DA4 :                     ; --------------------------------------------------
(2)  202/FFFFFFFFFFFF2DA4 :                     ; Test object
(2)  203/FFFFFFFFFFFF2DA4 :                     ; --------------------------------------------------
(2)  204/FFFFFFFFFFFF2DA4 :                     
(2)  205/FFFFFFFFFFFF2DA4 :                     obj_Player:
(2)  206/FFFFFFFFFFFF2DA4 : 7000                		moveq	#0,d0
(2)  207/FFFFFFFFFFFF2DA6 : 102E 001C           		move.b	obj_index(a6),d0
(2)  208/FFFFFFFFFFFF2DAA : D040                		add.w	d0,d0
(2)  209/FFFFFFFFFFFF2DAC : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  210/FFFFFFFFFFFF2DB0 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  211/FFFFFFFFFFFF2DB4 :                     ; ----------------------------------------------
(2)  212/FFFFFFFFFFFF2DB4 : 0004                .list:		dc.w .init-.list
(2)  213/FFFFFFFFFFFF2DB6 : 0030                		dc.w .main-.list
(2)  214/FFFFFFFFFFFF2DB8 :                     ; ----------------------------------------------
(2)  215/FFFFFFFFFFFF2DB8 :                     .init:
(2)  216/FFFFFFFFFFFF2DB8 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  217/FFFFFFFFFFFF2DBC : 6100 F922           		bsr	object_ResetAnim	; Init/Reset animation
(2)  218/FFFFFFFFFFFF2DC0 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  219/FFFFFFFFFFFF2DC6 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  220/FFFFFFFFFFFF2DCC : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  221/FFFFFFFFFFFF2DD2 :                     
(2)  222/FFFFFFFFFFFF2DD2 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  223/FFFFFFFFFFFF2DD8 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  224/FFFFFFFFFFFF2DDE : 08EE 0000 001F      		bset	#0,obj_attr(a6)		; Set X flip
(2)  225/FFFFFFFFFFFF2DE4 :                     
(2)  226/FFFFFFFFFFFF2DE4 :                     ; ----------------------------------------------
(2)  227/FFFFFFFFFFFF2DE4 :                     .main:
(2)  228/FFFFFFFFFFFF2DE4 : 41F8 E974           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  229/FFFFFFFFFFFF2DE8 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  230/FFFFFFFFFFFF2DEC : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  231/FFFFFFFFFFFF2DEE : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  232/FFFFFFFFFFFF2DF0 : 7400                		moveq	#0,d2
(2)  233/FFFFFFFFFFFF2DF2 : 7600                		moveq	#0,d3
(2)  234/FFFFFFFFFFFF2DF4 :                     
(2)  235/FFFFFFFFFFFF2DF4 :                     
(2)  236/FFFFFFFFFFFF2DF4 : 0807 0003           		btst	#bitJoyRight,d7
(2)  237/FFFFFFFFFFFF2DF8 : 6708                		beq.s	.not_right
(2)  238/FFFFFFFFFFFF2DFA : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  239/FFFFFFFFFFFF2DFE :                     
(2)  240/FFFFFFFFFFFF2DFE : 7402                		moveq	#2,d2
(2)  241/FFFFFFFFFFFF2E00 : 5243                		addq.w	#1,d3
(2)  242/FFFFFFFFFFFF2E02 :                     .not_right:
(2)  243/FFFFFFFFFFFF2E02 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  244/FFFFFFFFFFFF2E06 : 670A                		beq.s	.not_left
(2)  245/FFFFFFFFFFFF2E08 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  246/FFFFFFFFFFFF2E0C : 4440                		neg.w	d0
(2)  247/FFFFFFFFFFFF2E0E :                     ; 		moveq	#-1,d0			; X left
(2)  248/FFFFFFFFFFFF2E0E :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  249/FFFFFFFFFFFF2E0E : 7403                		moveq	#3,d2
(2)  250/FFFFFFFFFFFF2E10 : 5243                		addq.w	#1,d3
(2)  251/FFFFFFFFFFFF2E12 :                     .not_left:
(2)  252/FFFFFFFFFFFF2E12 : 0807 0001           		btst	#bitJoyDown,d7
(2)  253/FFFFFFFFFFFF2E16 : 6708                		beq.s	.not_down
(2)  254/FFFFFFFFFFFF2E18 : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  255/FFFFFFFFFFFF2E1C : 7400                		moveq	#0,d2
(2)  256/FFFFFFFFFFFF2E1E : 5243                		addq.w	#1,d3
(2)  257/FFFFFFFFFFFF2E20 :                     .not_down:
(2)  258/FFFFFFFFFFFF2E20 : 0807 0000           		btst	#bitJoyUp,d7
(2)  259/FFFFFFFFFFFF2E24 : 670A                		beq.s	.not_up
(2)  260/FFFFFFFFFFFF2E26 : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  261/FFFFFFFFFFFF2E2A : 4441                		neg.w	d1
(2)  262/FFFFFFFFFFFF2E2C :                     ; 		moveq	#-1,d1			; Y up
(2)  263/FFFFFFFFFFFF2E2C : 7401                		moveq	#1,d2
(2)  264/FFFFFFFFFFFF2E2E : 5243                		addq.w	#1,d3
(2)  265/FFFFFFFFFFFF2E30 :                     .not_up:
(2)  267/FFFFFFFFFFFF2E30 : 41F8 D060           		lea	(RAM_MdMars_ScrlSett).w,a0
(2)  268/FFFFFFFFFFFF2E34 : D150                		add.w	d0,sscrl_x_pos(a0)
(2)  269/FFFFFFFFFFFF2E36 : D368 0004           		add.w	d1,sscrl_y_pos(a0)
(2)  270/FFFFFFFFFFFF2E3A :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  271/FFFFFFFFFFFF2E3A :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  272/FFFFFFFFFFFF2E3A :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  273/FFFFFFFFFFFF2E3A :                     ; 		add.w	d0,obj_x(a6)
(2)  274/FFFFFFFFFFFF2E3A :                     ; 		add.w	d1,obj_z(a6)
(2)  275/FFFFFFFFFFFF2E3A :                     ; 	else
(2)  276/FFFFFFFFFFFF2E3A :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  277/FFFFFFFFFFFF2E3A :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  278/FFFFFFFFFFFF2E3A :                     ; 		add.w	d0,obj_x(a6)
(2)  279/FFFFFFFFFFFF2E3A :                     ; 		add.w	d1,obj_y(a6)
(2)  281/FFFFFFFFFFFF2E3A : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  282/FFFFFFFFFFFF2E3E :                     
(2)  283/FFFFFFFFFFFF2E3E :                     ; ----------------------------------------------
(2)  284/FFFFFFFFFFFF2E3E :                     ; Show the object...
(2)  285/FFFFFFFFFFFF2E3E :                     
(2)  286/FFFFFFFFFFFF2E3E : 4A43                		tst.w	d3
(2)  287/FFFFFFFFFFFF2E40 : 6708                		beq.s	.no_anim
(2)  288/FFFFFFFFFFFF2E42 : 41FA 0034           		lea	.anim_data(pc),a0	; Do animation
(2)  289/FFFFFFFFFFFF2E46 : 6100 F8D0           		bsr	object_Animate
(2)  290/FFFFFFFFFFFF2E4A :                     .no_anim:
(2)  292/FFFFFFFFFFFF2E4A : 207C 0000 0000      		move.l	#0,a0
(2)  293/FFFFFFFFFFFF2E50 : 43F9 0001 0900      		lea	(Textr_Haruna),a1		; a0 - Texture location
(2)  294/FFFFFFFFFFFF2E56 : 7000                		moveq	#0,d0
(2)  295/FFFFFFFFFFFF2E58 : 303C 0014           		move.w	#40/2,d0
(2)  296/FFFFFFFFFFFF2E5C : 4840                		swap	d0
(2)  297/FFFFFFFFFFFF2E5E : 303C 001C           		move.w	#56/2,d0
(2)  298/FFFFFFFFFFFF2E62 : 7200                		moveq	#%00,d1
(2)  299/FFFFFFFFFFFF2E64 : 6100 FA3A           		bsr	object_MdMars_GetSprInfo
(2)  300/FFFFFFFFFFFF2E68 : 243C 0028 0038      		move.l	#splitw(40,56),d2		; Size Width / Height
(2)  301/FFFFFFFFFFFF2E6E : 263C 0028 00C0      		move.l	#splitw(40,192),d3		; Texture width / Index
(2)  302/FFFFFFFFFFFF2E74 : 6000 EB2C           		bra	Video_MdMars_SetSpr2D
(2)  306/FFFFFFFFFFFF2E78 :                     
(2)  307/FFFFFFFFFFFF2E78 :                     ; ----------------------------------------------
(2)  308/FFFFFFFFFFFF2E78 :                     
(2)  309/FFFFFFFFFFFF2E78 :                     .anim_data:
(2)  310/FFFFFFFFFFFF2E78 : 0008                		dc.w .anim_down-.anim_data
(2)  311/FFFFFFFFFFFF2E7A : 0016                		dc.w .anim_up-.anim_data
(2)  312/FFFFFFFFFFFF2E7C : 0024                		dc.w .anim_right-.anim_data
(2)  313/FFFFFFFFFFFF2E7E : 0032                		dc.w .anim_left-.anim_data
(2)  314/FFFFFFFFFFFF2E80 :                     
(2)  315/FFFFFFFFFFFF2E80 :                     .anim_down:
(2)  316/FFFFFFFFFFFF2E80 : 0008                		dc.w 8
(2)  317/FFFFFFFFFFFF2E82 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2E88 : 0002             
(2)  318/FFFFFFFFFFFF2E8A : FFFE                		dc.w -2
(2)  319/FFFFFFFFFFFF2E8C :                     		align 2
(2)  320/FFFFFFFFFFFF2E8E :                     .anim_up:
(2)  321/FFFFFFFFFFFF2E8E : 0008                		dc.w 8
(2)  322/FFFFFFFFFFFF2E90 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E96 : 0005             
(2)  323/FFFFFFFFFFFF2E98 : FFFE                		dc.w -2
(2)  324/FFFFFFFFFFFF2E9A :                     		align 2
(2)  325/FFFFFFFFFFFF2E9C :                     .anim_right:
(2)  326/FFFFFFFFFFFF2E9C : 0008                		dc.w 8
(2)  327/FFFFFFFFFFFF2E9E : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2EA4 : 0008             
(2)  328/FFFFFFFFFFFF2EA6 : FFFE                		dc.w -2
(2)  329/FFFFFFFFFFFF2EA8 :                     		align 2
(2)  330/FFFFFFFFFFFF2EAA :                     .anim_left:
(2)  331/FFFFFFFFFFFF2EAA : 0008                		dc.w 8
(2)  332/FFFFFFFFFFFF2EAC : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2EB2 : 000B             
(2)  333/FFFFFFFFFFFF2EB4 : FFFE                		dc.w -2
(2)  334/FFFFFFFFFFFF2EB6 :                     		align 2
(2)  335/FFFFFFFFFFFF2EB8 :                     
(2)  336/FFFFFFFFFFFF2EB8 :                     ; --------------------------------------------------
(2)  337/FFFFFFFFFFFF2EB8 :                     ; Test object
(2)  338/FFFFFFFFFFFF2EB8 :                     ; --------------------------------------------------
(2)  339/FFFFFFFFFFFF2EB8 :                     
(2)  340/FFFFFFFFFFFF2EB8 :                     obj_Ball:
(2)  341/FFFFFFFFFFFF2EB8 : 7000                		moveq	#0,d0
(2)  342/FFFFFFFFFFFF2EBA : 102E 001C           		move.b	obj_index(a6),d0
(2)  343/FFFFFFFFFFFF2EBE : D040                		add.w	d0,d0
(2)  344/FFFFFFFFFFFF2EC0 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  345/FFFFFFFFFFFF2EC4 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  346/FFFFFFFFFFFF2EC8 :                     ; ----------------------------------------------
(2)  347/FFFFFFFFFFFF2EC8 : 0004                .list:		dc.w .init-.list
(2)  348/FFFFFFFFFFFF2ECA : 0072                		dc.w .main-.list
(2)  349/FFFFFFFFFFFF2ECC :                     ; ----------------------------------------------
(2)  350/FFFFFFFFFFFF2ECC :                     .init:
(2)  351/FFFFFFFFFFFF2ECC : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  352/FFFFFFFFFFFF2ED0 : 6100 F80E           		bsr	object_ResetAnim	; Init/Reset animation
(2)  353/FFFFFFFFFFFF2ED4 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  354/FFFFFFFFFFFF2EDA : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  355/FFFFFFFFFFFF2EE0 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  356/FFFFFFFFFFFF2EE6 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  357/FFFFFFFFFFFF2EEC :                     
(2)  358/FFFFFFFFFFFF2EEC : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  359/FFFFFFFFFFFF2EF2 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  360/FFFFFFFFFFFF2EF8 : 303C 0049           		move.w	#$48+1,d0
(2)  361/FFFFFFFFFFFF2EFC : 6100 F264           		bsr	System_DiceRoll
(2)  362/FFFFFFFFFFFF2F00 : E348                		lsl.w	#1,d0
(2)  363/FFFFFFFFFFFF2F02 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  364/FFFFFFFFFFFF2F06 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  365/FFFFFFFFFFFF2F0A : E748                		lsl.w	#3,d0
(2)  366/FFFFFFFFFFFF2F0C : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  367/FFFFFFFFFFFF2F10 : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  368/FFFFFFFFFFFF2F14 :                     
(2)  369/FFFFFFFFFFFF2F14 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  370/FFFFFFFFFFFF2F1A : 6100 F1EC           		bsr	System_Random
(2)  371/FFFFFFFFFFFF2F1E : 2E38 F9F8           		move.l	(RAM_SysRandom).w,d7
(2)  372/FFFFFFFFFFFF2F22 : E24F                		lsr.w	#1,d7
(2)  373/FFFFFFFFFFFF2F24 : 640A                		bcc.s	.x_random
(2)  374/FFFFFFFFFFFF2F26 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  375/FFFFFFFFFFFF2F2A : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  376/FFFFFFFFFFFF2F30 :                     .x_random:
(2)  377/FFFFFFFFFFFF2F30 : E24F                		lsr.w	#1,d7
(2)  378/FFFFFFFFFFFF2F32 : 6404                		bcc.s	.y_random
(2)  379/FFFFFFFFFFFF2F34 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  380/FFFFFFFFFFFF2F38 :                     .y_random:
(2)  381/FFFFFFFFFFFF2F38 : 4E75                		rts
(2)  382/FFFFFFFFFFFF2F3A :                     
(2)  383/FFFFFFFFFFFF2F3A :                     ; ----------------------------------------------
(2)  384/FFFFFFFFFFFF2F3A :                     .main:
(2)  385/FFFFFFFFFFFF2F3A : 323C 00E0           		move.w	#224,d1
(2)  386/FFFFFFFFFFFF2F3E : 303C 0140           		move.w	#320,d0
(2)  387/FFFFFFFFFFFF2F42 : 342E 0004           		move.w	obj_x(a6),d2
(2)  388/FFFFFFFFFFFF2F46 : 4A42                		tst.w	d2
(2)  389/FFFFFFFFFFFF2F48 : 6A0A                		bpl.s	.x_back
(2)  390/FFFFFFFFFFFF2F4A : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  391/FFFFFFFFFFFF2F4E : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  392/FFFFFFFFFFFF2F54 :                     .x_back:
(2)  393/FFFFFFFFFFFF2F54 : B440                		cmp.w	d0,d2
(2)  394/FFFFFFFFFFFF2F56 : 6D0A                		blt.s	.x_foward
(2)  395/FFFFFFFFFFFF2F58 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  396/FFFFFFFFFFFF2F5C : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  397/FFFFFFFFFFFF2F62 :                     .x_foward:
(2)  398/FFFFFFFFFFFF2F62 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  399/FFFFFFFFFFFF2F66 :                     
(2)  400/FFFFFFFFFFFF2F66 : 342E 0008           		move.w	obj_y(a6),d2
(2)  401/FFFFFFFFFFFF2F6A : 4A42                		tst.w	d2
(2)  402/FFFFFFFFFFFF2F6C : 6A04                		bpl.s	.y_back
(2)  403/FFFFFFFFFFFF2F6E : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  404/FFFFFFFFFFFF2F72 :                     .y_back:
(2)  405/FFFFFFFFFFFF2F72 : B441                		cmp.w	d1,d2
(2)  406/FFFFFFFFFFFF2F74 : 6D04                		blt.s	.y_foward
(2)  407/FFFFFFFFFFFF2F76 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  408/FFFFFFFFFFFF2F7A :                     .y_foward:
(2)  409/FFFFFFFFFFFF2F7A : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  410/FFFFFFFFFFFF2F7E :                     
(2)  411/FFFFFFFFFFFF2F7E : 6100 F768           		bsr	object_Speed
(2)  412/FFFFFFFFFFFF2F82 :                     
(2)  413/FFFFFFFFFFFF2F82 :                     ; ----------------------------------------------
(2)  414/FFFFFFFFFFFF2F82 :                     ; Show the object...
(2)  415/FFFFFFFFFFFF2F82 : 41FA 0036           		lea	.anim_data(pc),a0	; Do animation
(2)  416/FFFFFFFFFFFF2F86 : 6100 F790           		bsr	object_Animate
(2)  417/FFFFFFFFFFFF2F8A :                     
(2)  419/FFFFFFFFFFFF2F8A : 207C 0000 0000      		move.l	#0,a0
(2)  420/FFFFFFFFFFFF2F90 : 43F9 0000 FD00      		lea	(ArtMars_Sisi),a1		; a0 - Texture location
(2)  421/FFFFFFFFFFFF2F96 : 7000                		moveq	#0,d0
(2)  422/FFFFFFFFFFFF2F98 : 303C 0010           		move.w	#32/2,d0
(2)  423/FFFFFFFFFFFF2F9C : 4840                		swap	d0
(2)  424/FFFFFFFFFFFF2F9E : 303C 0018           		move.w	#48/2,d0
(2)  425/FFFFFFFFFFFF2FA2 : 122E 001F           		move.b	obj_attr(a6),d1
(2)  426/FFFFFFFFFFFF2FA6 : 6100 F8F8           		bsr	object_MdMars_GetSprInfo
(2)  427/FFFFFFFFFFFF2FAA : 243C 0020 0020      		move.l	#splitw(32,32),d2		; Size Width / Height
(2)  428/FFFFFFFFFFFF2FB0 : 263C 0020 00D0      		move.l	#splitw(32,192+16),d3		; Texture width / Index
(2)  429/FFFFFFFFFFFF2FB6 : 6000 E9F4           		bra	Video_MdMars_MakeSpr2D
(2)  442/FFFFFFFFFFFF2FBA :                     
(2)  443/FFFFFFFFFFFF2FBA :                     ; ----------------------------------------------
(2)  444/FFFFFFFFFFFF2FBA :                     
(2)  445/FFFFFFFFFFFF2FBA :                     .anim_data:
(2)  446/FFFFFFFFFFFF2FBA : 0002                		dc.w .maind-.anim_data
(2)  447/FFFFFFFFFFFF2FBC :                     .maind:
(2)  448/FFFFFFFFFFFF2FBC : 0008                		dc.w 8
(2)  449/FFFFFFFFFFFF2FBE : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2FC4 : 0001             
(2)  450/FFFFFFFFFFFF2FC6 : FFFE                		dc.w -2
(2)  451/FFFFFFFFFFFF2FC8 :                     		align 2
(2)  452/FFFFFFFFFFFF2FCA :                     
(2)  453/FFFFFFFFFFFF2FCA :                     ; ====================================================================
(2)  454/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  455/FFFFFFFFFFFF2FCA :                     ; Subroutines
(2)  456/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  457/FFFFFFFFFFFF2FCA :                     
(2)  458/FFFFFFFFFFFF2FCA :                     ; ====================================================================
(2)  459/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  460/FFFFFFFFFFFF2FCA :                     ; Includes for this screen
(2)  461/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  462/FFFFFFFFFFFF2FCA :                     
(2)  463/FFFFFFFFFFFF2FCA :                     ; ====================================================================
(2)  464/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  465/FFFFFFFFFFFF2FCA :                     ; Custom VBlank
(2)  466/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  467/FFFFFFFFFFFF2FCA :                     
(2)  468/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  469/FFFFFFFFFFFF2FCA :                     ; Custom HBlank
(2)  470/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  471/FFFFFFFFFFFF2FCA :                     
(2)  472/FFFFFFFFFFFF2FCA :                     ; ====================================================================
(2)  473/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  474/FFFFFFFFFFFF2FCA :                     ; Small data section
(2)  475/FFFFFFFFFFFF2FCA :                     ; ------------------------------------------------------
(2)  476/FFFFFFFFFFFF2FCA :                     
(2)  477/FFFFFFFFFFFF2FCA :                     ; str_NikonaTest:
(2)  478/FFFFFFFFFFFF2FCA :                     ; 		dc.b "32X 2D test"
(2)  479/FFFFFFFFFFFF2FCA :                     ; 		dc.b 0
(2)  480/FFFFFFFFFFFF2FCA :                     ; 		align 2
(2)  481/FFFFFFFFFFFF2FCA :                     str_NewCountr0:
(2)  483/FFFFFFFFFFFF2FCA : 81FF D060           		dc.l pstr_mem(1,RAM_MdMars_ScrlSett+sscrl_x_pos)
(2)  484/FFFFFFFFFFFF2FCE : 20                  		dc.b " "
(2)  485/FFFFFFFFFFFF2FCF : 81FF D064           		dc.l pstr_mem(1,RAM_MdMars_ScrlSett+sscrl_y_pos)
(2)  486/FFFFFFFFFFFF2FD3 : 0A0A                		dc.b $0A,$0A
(2)  488/FFFFFFFFFFFF2FD5 : 81FF B800           		dc.l pstr_mem(1,RAM_ThisSpeed)
(2)  489/FFFFFFFFFFFF2FD9 : 20                  		dc.b " "
(2)  490/FFFFFFFFFFFF2FDA : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  491/FFFFFFFFFFFF2FDE : 00                  		dc.b 0
(2)  492/FFFFFFFFFFFF2FDF :                     		align 2
(2)  493/FFFFFFFFFFFF2FE0 :                     
(2)  494/FFFFFFFFFFFF2FE0 :                     str_InputMe:
(2)  496/FFFFFFFFFFFF2FE0 : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  497/FFFFFFFFFFFF2FE4 : 20                  		dc.b " "
(2)  498/FFFFFFFFFFFF2FE5 : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  499/FFFFFFFFFFFF2FE9 : 20                  		dc.b " "
(2)  500/FFFFFFFFFFFF2FEA : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  504/FFFFFFFFFFFF2FEE : 00                  		dc.b 0
(2)  505/FFFFFFFFFFFF2FEF :                     		align 2
(2)  506/FFFFFFFFFFFF2FF0 :                     
(2)  507/FFFFFFFFFFFF2FF0 :                     Pal_TestStamp:
(2)  508/FFFFFFFFFFFF2FF0 : 0000                		dc.w 0
(2)  509/FFFFFFFFFFFF2FF2 :                     ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  510/FFFFFFFFFFFF2FF2 :                     		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  511/FFFFFFFFFFFF2FFC :                     		align 2
(2)  512/FFFFFFFFFFFF2FFE :                     
(2)  513/FFFFFFFFFFFF2FFE :                     ; Object data:
(2)  514/FFFFFFFFFFFF2FFE :                     objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  515/FFFFFFFFFFFF301E :                     		align 2
(2)  516/FFFFFFFFFFFF3020 :                     objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  517/FFFFFFFFFFFF31D0 :                     		align 2
(2)  518/FFFFFFFFFFFF31D2 :                     objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  519/FFFFFFFFFFFF3262 :                     		align 2
(2)  520/FFFFFFFFFFFF3264 :                     
(2)  521/FFFFFFFFFFFF3264 :                     ; ====================================================================
(2)  522/FFFFFFFFFFFF3264 :                     
(1)   18/FFFFFFFFFFFF3264 :                     mcscrn_e:
(1)   18/   53E64 :                                     dephase
(1)   18/   53E64 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   18/   53E64 :                                     align $800
(1)   18/   54000 :                     ; Md_Screen00_e:
(1)   18/   54000 : =$54000              MD_SCREEN03_E label *
(1)   18/   54000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN03",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   19/   54000 : (MACRO)              	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/   54000 :                                     align $800              ; SCD/CD32X sector align
(1)   19/   54000 : =$54000              MD_SCREEN04 label *
(1)   19/   54000 :                     
(1)   19/   54000 :                     mctopscrn:
(1)   19/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   19/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   19/FFFFFFFFFFFF2C00 :                             include "game/code/screen_4.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   54000 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Backgrnd	ds.b $32A
(2)   22/     32B :                     vramLoc_Haruna		ds.b $12A
(2)   23/     455 :                     vramLoc_Haruna2		ds.b $12A
(2)   24/     57F :  (MACRO-2)           			endmemory
(2)   24/   5457E :                     .here:          dephase
(2)   24/   5457E :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   54000 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestTouch		ds.l 1
(2)   33/FFFFFFFFFFFFB804 :                     RAM_Camera_Xpos		ds.l 1
(2)   34/FFFFFFFFFFFFB808 :                     RAM_Camera_Zpos		ds.l 1
(2)   35/FFFFFFFFFFFFB80C :                     RAM_Camera_Rot		ds.w 1
(2)   36/FFFFFFFFFFFFB80E :                     RAM_Camera_TRot		ds.w 1
(2)   37/FFFFFFFFFFFFB810 :                     RAM_Camera_TRotD	ds.w 1
(2)   38/FFFFFFFFFFFFB812 :                     RAM_ModelPick		ds.w 1
(2)   39/FFFFFFFFFFFFB814 :                     .sizeof_this		ds.l 0
(2)   40/FFFFFFFFFFFFB818 :  (MACRO-2)           			endmemory
(2)   40/   54018 :                     .here:          dephase
(2)   40/   54018 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   40/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   41/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     ; Init
(2)   46/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   47/FFFFFFFFFFFF2C00 :                     
(2)   48/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   49/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   50/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   51/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   53/FFFFFFFFFFFF2C08 : 41FA 0170           		lea	file_scrn4_mars(pc),a0			; Load DATA BANK for 32X stuff
(2)   54/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   55/FFFFFFFFFFFF2C10 : 41F9 0020 0002      		lea	(PalMars_Test+color_indx(1)),a0
(2)   56/FFFFFFFFFFFF2C16 : 7001                		moveq	#1,d0
(2)   57/FFFFFFFFFFFF2C18 : 323C 00C0           		move.w	#192,d1
(2)   58/FFFFFFFFFFFF2C1C : 7400                		moveq	#0,d2
(2)   59/FFFFFFFFFFFF2C1E : 6100 F038           		bsr	Video_MdMars_FadePal
(2)   60/FFFFFFFFFFFF2C22 : 41F9 0020 0580      		lea	(PalMars_Haruna),a0
(2)   61/FFFFFFFFFFFF2C28 : 303C 00C0           		move.w	#192,d0
(2)   62/FFFFFFFFFFFF2C2C : 7210                		moveq	#16,d1
(2)   63/FFFFFFFFFFFF2C2E : 7400                		moveq	#0,d2
(2)   64/FFFFFFFFFFFF2C30 : 6100 F026           		bsr	Video_MdMars_FadePal
(2)   65/FFFFFFFFFFFF2C34 : 41F9 0020 05A0      		lea	(PalMars_Sisi),a0
(2)   66/FFFFFFFFFFFF2C3A : 303C 00D0           		move.w	#208,d0
(2)   67/FFFFFFFFFFFF2C3E : 7210                		moveq	#16,d1
(2)   68/FFFFFFFFFFFF2C40 : 7400                		moveq	#0,d2
(2)   69/FFFFFFFFFFFF2C42 : 6100 F014           		bsr	Video_MdMars_FadePal
(2)   70/FFFFFFFFFFFF2C46 : 41F9 0020 08C0      		lea	(ArtMars_Test2D),a0
(2)   71/FFFFFFFFFFFF2C4C : 227C 0000 0000      		move.l	#0,a1
(2)   72/FFFFFFFFFFFF2C52 : 203C 0001 7200      		move.l	#ArtMars_Test2D_e-ArtMars_Test2D,d0
(2)   73/FFFFFFFFFFFF2C58 : 6100 ECBE           		bsr	Video_MdMars_LoadVram
(2)   74/FFFFFFFFFFFF2C5C : 41F8 D480           		lea	(RAM_MdMars_Models).w,a0
(2)   75/FFFFFFFFFFFF2C60 : 6100 00E4           		bsr	.pick_model
(2)   76/FFFFFFFFFFFF2C64 : 6100 02F0           		bsr	Camera_Update
(2)   77/FFFFFFFFFFFF2C68 : 7002                		moveq	#2,d0					; 32X 3D mode
(2)   78/FFFFFFFFFFFF2C6A : 6100 EC5E           		bsr	Video_MdMars_VideoMode
(2)   80/FFFFFFFFFFFF2C6E :                     	; ----------------------------------------------
(2)   81/FFFFFFFFFFFF2C6E : 41FA 00F8           		lea	file_scrn4_main(pc),a0			; Load MAIN DATA bank
(2)   82/FFFFFFFFFFFF2C72 : 6100 F9B6           		bsr	System_SetDataBank
(2)   83/FFFFFFFFFFFF2C76 : 6100 F372           		bsr	System_SramInit
(2)   84/FFFFFFFFFFFF2C7A : 52B8 E878           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   85/FFFFFFFFFFFF2C7E : 6100 F3D8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   86/FFFFFFFFFFFF2C82 :                     	; ----------------------------------------------
(2)   87/FFFFFFFFFFFF2C82 :                     	; Load PRINT
(2)   88/FFFFFFFFFFFF2C82 : 203C 0021 52F4      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   89/FFFFFFFFFFFF2C88 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   90/FFFFFFFFFFFF2C8C : 6100 E32A           		bsr	Video_PrintInit
(2)   91/FFFFFFFFFFFF2C90 : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   92/FFFFFFFFFFFF2C96 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   93/FFFFFFFFFFFF2C9A : 6100 E316           		bsr	Video_PrintInitW
(2)   94/FFFFFFFFFFFF2C9E : 6100 E322           		bsr	Video_PrintDefPal_Fade
(2)   95/FFFFFFFFFFFF2CA2 :                     	; ----------------------------------------------
(2)   96/FFFFFFFFFFFF2CA2 : 203C FFFF 2D8C      		move.l	#obj_Player,d0
(2)   97/FFFFFFFFFFFF2CA8 : 6100 F9CC           		bsr	Object_Make				; Make MD object
(2)   98/FFFFFFFFFFFF2CAC :                     	; ----------------------------------------------
(2)   99/FFFFFFFFFFFF2CAC : 6100 0082           		bsr	.show_counter				; Draw counter
(2)  100/FFFFFFFFFFFF2CB0 : 6100 DA2E           		bsr	Video_DisplayOn
(2)  101/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)  102/FFFFFFFFFFFF2CB4 : 6100 F98E           		bsr	Object_Run
(2)  103/FFFFFFFFFFFF2CB8 : 6100 E1E8           		bsr	Video_FadeIn_Full
(2)  104/FFFFFFFFFFFF2CBC :                     
(2)  105/FFFFFFFFFFFF2CBC :                     ; ====================================================================
(2)  106/FFFFFFFFFFFF2CBC :                     ; ------------------------------------------------------
(2)  107/FFFFFFFFFFFF2CBC :                     ; Loop
(2)  108/FFFFFFFFFFFF2CBC :                     ; ------------------------------------------------------
(2)  109/FFFFFFFFFFFF2CBC :                     
(2)  110/FFFFFFFFFFFF2CBC :                     .loop:
(2)  111/FFFFFFFFFFFF2CBC : 6100 F986           		bsr	Object_Run
(2)  112/FFFFFFFFFFFF2CC0 : 6100 D7BA           		bsr	Video_BuildSprites
(2)  113/FFFFFFFFFFFF2CC4 : 6100 F094           		bsr	System_Render
(2)  114/FFFFFFFFFFFF2CC8 :                     
(2)  115/FFFFFFFFFFFF2CC8 : 6166                		bsr	.show_counter
(2)  117/FFFFFFFFFFFF2CCA : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  118/FFFFFFFFFFFF2CCE : 0247 0020           		andi.w	#JoyC,d7
(2)  119/FFFFFFFFFFFF2CD2 : 670A                		beq.s	.not_b
(2)  120/FFFFFFFFFFFF2CD4 : 203C FFFF 2EA2      		move.l	#obj_Ball,d0
(2)  121/FFFFFFFFFFFF2CDA : 6100 F99A           		bsr	Object_Make
(2)  122/FFFFFFFFFFFF2CDE :                     .not_b:
(2)  123/FFFFFFFFFFFF2CDE : 3E38 E976           		move.w	(Controller_1+on_hold).w,d7
(2)  124/FFFFFFFFFFFF2CE2 : 0247 0040           		andi.w	#JoyA,d7
(2)  125/FFFFFFFFFFFF2CE6 : 670A                		beq	.no_rot_l
(2)  126/FFFFFFFFFFFF2CE8 : 0478 0001 B80C      		sub.w	#1,(RAM_Camera_Rot).w
(2)  127/FFFFFFFFFFFF2CEE : 6100 0266           		bsr	Camera_Update
(2)  128/FFFFFFFFFFFF2CF2 :                     .no_rot_l:
(2)  129/FFFFFFFFFFFF2CF2 : 3E38 E976           		move.w	(Controller_1+on_hold).w,d7
(2)  130/FFFFFFFFFFFF2CF6 : 0247 0010           		andi.w	#JoyB,d7
(2)  131/FFFFFFFFFFFF2CFA : 670A                		beq	.no_rot_r
(2)  132/FFFFFFFFFFFF2CFC : 0678 0001 B80C      		add.w	#1,(RAM_Camera_Rot).w
(2)  133/FFFFFFFFFFFF2D02 : 6100 0252           		bsr	Camera_Update
(2)  134/FFFFFFFFFFFF2D06 :                     .no_rot_r:
(2)  136/FFFFFFFFFFFF2D06 :                     
(2)  137/FFFFFFFFFFFF2D06 :                     	; Check START button
(2)  138/FFFFFFFFFFFF2D06 : 3E38 E978           		move.w	(Controller_1+on_press).w,d7
(2)  139/FFFFFFFFFFFF2D0A : 0247 0080           		andi.w	#JoyStart,d7
(2)  140/FFFFFFFFFFFF2D0E : 67AC                		beq	.loop
(2)  141/FFFFFFFFFFFF2D10 : 6100 E1B2           		bsr	Video_FadeOut_Full
(2)  142/FFFFFFFFFFFF2D14 :                     
(2)  143/FFFFFFFFFFFF2D14 :                     	; Stop ALL sequences
(2)  144/FFFFFFFFFFFF2D14 : 6100 D4F0           		bsr	gemaStopAll
(2)  145/FFFFFFFFFFFF2D18 :                     	rept 4
(2)  146/FFFFFFFFFFFF2D18 :                     		bsr	System_Render		; Wait 4 frames...
(2)  147/FFFFFFFFFFFF2D18 :                     	endm
(2)  146/FFFFFFFFFFFF2D18 : 6100 F040           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D1C : 6100 F03C           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D20 : 6100 F038           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2D24 : 6100 F034           		bsr	System_Render		; Wait 4 frames...
(2)  148/FFFFFFFFFFFF2D28 : 31FC 0000 FA10      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  149/FFFFFFFFFFFF2D2E : 4E75                		rts				; <-- RTS
(2)  150/FFFFFFFFFFFF2D30 :                     
(2)  151/FFFFFFFFFFFF2D30 :                     ; ------------------------------------------------------
(2)  152/FFFFFFFFFFFF2D30 :                     ; Show framecounter and input
(2)  153/FFFFFFFFFFFF2D30 :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2D30 :                     
(2)  155/FFFFFFFFFFFF2D30 :                     .show_counter:
(2)  156/FFFFFFFFFFFF2D30 : 41FA 0276           		lea	str_NewCountr0(pc),a0
(2)  157/FFFFFFFFFFFF2D34 : 7001                		moveq	#1,d0
(2)  158/FFFFFFFFFFFF2D36 : 7201                		moveq	#1,d1
(2)  159/FFFFFFFFFFFF2D38 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  160/FFFFFFFFFFFF2D3C : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  161/FFFFFFFFFFFF2D42 : 6000 E29C           		bra	Video_Print
(2)  162/FFFFFFFFFFFF2D46 :                     
(2)  163/FFFFFFFFFFFF2D46 :                     ; ------------------------------------------------------
(2)  164/FFFFFFFFFFFF2D46 :                     
(2)  165/FFFFFFFFFFFF2D46 :                     .pick_model:
(2)  167/FFFFFFFFFFFF2D46 : 3038 B812           		move.w	(RAM_ModelPick).w,d0
(2)  168/FFFFFFFFFFFF2D4A : E548                		lsl.w	#2,d0
(2)  169/FFFFFFFFFFFF2D4C : 41F8 D480           		lea	(RAM_MdMars_Models).w,a0
(2)  170/FFFFFFFFFFFF2D50 : 217B 000E 0004      		move.l	.mdl_list(pc,d0.w),mmdl_data(a0)
(2)  171/FFFFFFFFFFFF2D56 : 217C 0000 000C      		move.l	#12,mmdl_y_pos(a0)
         FFFFFFFFFFFF2D5C : 000C             
(2)  172/FFFFFFFFFFFF2D5E : 4E75                		rts
(2)  173/FFFFFFFFFFFF2D60 :                     .mdl_list:
(2)  174/FFFFFFFFFFFF2D60 : 0603 52F8           		dc.l MarsObj_test
(2)  175/FFFFFFFFFFFF2D64 : 0603 6614           		dc.l MarsObj_test_2
(2)  179/FFFFFFFFFFFF2D68 :                     
(2)  180/FFFFFFFFFFFF2D68 :                     ; ====================================================================
(2)  181/FFFFFFFFFFFF2D68 :                     ; ------------------------------------------------------
(2)  182/FFFFFFFFFFFF2D68 :                     ; DATA asset locations
(2)  183/FFFFFFFFFFFF2D68 :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D68 :                     
(2)  185/FFFFFFFFFFFF2D68 :                     file_scrn4_main:
(2)  186/FFFFFFFFFFFF2D68 : 0005 5800           		dc.l DATA_BANK0
(2)  187/FFFFFFFFFFFF2D6C : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D72 : 494E 2E42 494E 00 
(2)  188/FFFFFFFFFFFF2D79 :                     		align 2
(2)  189/FFFFFFFFFFFF2D7A :                     file_scrn4_mars:
(2)  190/FFFFFFFFFFFF2D7A : 0008 5800           		dc.l DATA_BANK1
(2)  191/FFFFFFFFFFFF2D7E : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2D84 : 5253 2E42 494E 00 
(2)  192/FFFFFFFFFFFF2D8B :                     		align 2
(2)  193/FFFFFFFFFFFF2D8C :                     
(2)  194/FFFFFFFFFFFF2D8C :                     ; ====================================================================
(2)  195/FFFFFFFFFFFF2D8C :                     ; ------------------------------------------------------
(2)  196/FFFFFFFFFFFF2D8C :                     ; Objects
(2)  197/FFFFFFFFFFFF2D8C :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2D8C :                     
(2)  199/FFFFFFFFFFFF2D8C :                     ; --------------------------------------------------
(2)  200/FFFFFFFFFFFF2D8C :                     ; Test object
(2)  201/FFFFFFFFFFFF2D8C :                     ; --------------------------------------------------
(2)  202/FFFFFFFFFFFF2D8C :                     
(2)  203/FFFFFFFFFFFF2D8C :                     obj_Player:
(2)  204/FFFFFFFFFFFF2D8C : 7000                		moveq	#0,d0
(2)  205/FFFFFFFFFFFF2D8E : 102E 001C           		move.b	obj_index(a6),d0
(2)  206/FFFFFFFFFFFF2D92 : D040                		add.w	d0,d0
(2)  207/FFFFFFFFFFFF2D94 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  208/FFFFFFFFFFFF2D98 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  209/FFFFFFFFFFFF2D9C :                     ; ----------------------------------------------
(2)  210/FFFFFFFFFFFF2D9C : 0004                .list:		dc.w .init-.list
(2)  211/FFFFFFFFFFFF2D9E : 0030                		dc.w .main-.list
(2)  212/FFFFFFFFFFFF2DA0 :                     ; ----------------------------------------------
(2)  213/FFFFFFFFFFFF2DA0 :                     .init:
(2)  214/FFFFFFFFFFFF2DA0 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  215/FFFFFFFFFFFF2DA4 : 6100 F93A           		bsr	object_ResetAnim	; Init/Reset animation
(2)  216/FFFFFFFFFFFF2DA8 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  217/FFFFFFFFFFFF2DAE : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  218/FFFFFFFFFFFF2DB4 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  219/FFFFFFFFFFFF2DBA :                     
(2)  221/FFFFFFFFFFFF2DBA : 3D7C 0000 0004      		move.w	#0,obj_x(a6)
(2)  222/FFFFFFFFFFFF2DC0 : 3D7C 0000 0008      		move.w	#0,obj_y(a6)
(2)  223/FFFFFFFFFFFF2DC6 : 3D7C 0000 000C      		move.w	#0,obj_z(a6)
(2)  228/FFFFFFFFFFFF2DCC :                     
(2)  229/FFFFFFFFFFFF2DCC :                     ; ----------------------------------------------
(2)  230/FFFFFFFFFFFF2DCC :                     .main:
(2)  231/FFFFFFFFFFFF2DCC : 41F8 E974           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  232/FFFFFFFFFFFF2DD0 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  233/FFFFFFFFFFFF2DD4 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  234/FFFFFFFFFFFF2DD6 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  235/FFFFFFFFFFFF2DD8 : 7400                		moveq	#0,d2
(2)  236/FFFFFFFFFFFF2DDA : 7600                		moveq	#0,d3
(2)  237/FFFFFFFFFFFF2DDC : 0807 0003           		btst	#bitJoyRight,d7
(2)  238/FFFFFFFFFFFF2DE0 : 6706                		beq.s	.not_right
(2)  239/FFFFFFFFFFFF2DE2 : 7001                		moveq	#1,d0			; X right
(2)  240/FFFFFFFFFFFF2DE4 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  241/FFFFFFFFFFFF2DE4 : 7402                		moveq	#2,d2
(2)  242/FFFFFFFFFFFF2DE6 : 5243                		addq.w	#1,d3
(2)  243/FFFFFFFFFFFF2DE8 :                     .not_right:
(2)  244/FFFFFFFFFFFF2DE8 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  245/FFFFFFFFFFFF2DEC : 6706                		beq.s	.not_left
(2)  246/FFFFFFFFFFFF2DEE : 70FF                		moveq	#-1,d0			; X left
(2)  247/FFFFFFFFFFFF2DF0 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  248/FFFFFFFFFFFF2DF0 : 7403                		moveq	#3,d2
(2)  249/FFFFFFFFFFFF2DF2 : 5243                		addq.w	#1,d3
(2)  250/FFFFFFFFFFFF2DF4 :                     .not_left:
(2)  251/FFFFFFFFFFFF2DF4 : 0807 0001           		btst	#bitJoyDown,d7
(2)  252/FFFFFFFFFFFF2DF8 : 6706                		beq.s	.not_down
(2)  253/FFFFFFFFFFFF2DFA : 7201                		moveq	#1,d1			; Y down
(2)  254/FFFFFFFFFFFF2DFC : 7400                		moveq	#0,d2
(2)  255/FFFFFFFFFFFF2DFE : 5243                		addq.w	#1,d3
(2)  256/FFFFFFFFFFFF2E00 :                     .not_down:
(2)  257/FFFFFFFFFFFF2E00 : 0807 0000           		btst	#bitJoyUp,d7
(2)  258/FFFFFFFFFFFF2E04 : 6706                		beq.s	.not_up
(2)  259/FFFFFFFFFFFF2E06 : 72FF                		moveq	#-1,d1			; Y up
(2)  260/FFFFFFFFFFFF2E08 : 7401                		moveq	#1,d2
(2)  261/FFFFFFFFFFFF2E0A : 5243                		addq.w	#1,d3
(2)  262/FFFFFFFFFFFF2E0C :                     .not_up:
(2)  264/FFFFFFFFFFFF2E0C : 41F8 D060           		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  265/FFFFFFFFFFFF2E10 : D190                		add.l	d0,mcam_x_pos(a0)
(2)  266/FFFFFFFFFFFF2E12 : D3A8 0008           		add.l	d1,mcam_z_pos(a0)
(2)  267/FFFFFFFFFFFF2E16 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  268/FFFFFFFFFFFF2E1A : D36E 000C           		add.w	d1,obj_z(a6)
(2)  275/FFFFFFFFFFFF2E1E :                     
(2)  276/FFFFFFFFFFFF2E1E : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  277/FFFFFFFFFFFF2E22 :                     
(2)  278/FFFFFFFFFFFF2E22 :                     ; ----------------------------------------------
(2)  279/FFFFFFFFFFFF2E22 :                     ; Show the object...
(2)  280/FFFFFFFFFFFF2E22 :                     
(2)  281/FFFFFFFFFFFF2E22 : 4A43                		tst.w	d3
(2)  282/FFFFFFFFFFFF2E24 : 6708                		beq.s	.no_anim
(2)  283/FFFFFFFFFFFF2E26 : 41FA 003A           		lea	.anim_data(pc),a0	; Do animation
(2)  284/FFFFFFFFFFFF2E2A : 6100 F8EC           		bsr	object_Animate
(2)  285/FFFFFFFFFFFF2E2E :                     .no_anim:
(2)  286/FFFFFFFFFFFF2E2E : 42B8 B800           		clr.l	(RAM_TestTouch).w
(2)  287/FFFFFFFFFFFF2E32 : 6100 F978           		bsr	object_Touch
(2)  288/FFFFFFFFFFFF2E36 : 4A80                		tst.l	d0
(2)  289/FFFFFFFFFFFF2E38 : 6704                		beq.s	.lel
(2)  290/FFFFFFFFFFFF2E3A : 21C0 B800           		move.l	d0,(RAM_TestTouch).w
(2)  291/FFFFFFFFFFFF2E3E :                     .lel:
(2)  292/FFFFFFFFFFFF2E3E :                     
(2)  294/FFFFFFFFFFFF2E3E : 43F9 0001 0900      		lea	(Textr_Haruna),a1		; a0 - Texture location
(2)  295/FFFFFFFFFFFF2E44 : 7203                		moveq	#%11,d1
(2)  296/FFFFFFFFFFFF2E46 : 6100 FA58           		bsr	object_MdMars_GetSprInfo
(2)  297/FFFFFFFFFFFF2E4A : 243C 0028 0038      		move.l	#splitw(40,56),d2		; Size Width / Height
(2)  298/FFFFFFFFFFFF2E50 : 263C 0028 00C0      		move.l	#splitw(40,192),d3		; Texture width / Index
(2)  299/FFFFFFFFFFFF2E56 :                     ; 		bra	Video_MdMars_MakeSpr3D
(2)  300/FFFFFFFFFFFF2E56 : 207C 0000 0000      		move.l	#0,a0
(2)  301/FFFFFFFFFFFF2E5C : 6000 EBE0           		bra	Video_MdMars_SetSpr3D
(2)  303/FFFFFFFFFFFF2E60 : 4E75                		rts
(2)  304/FFFFFFFFFFFF2E62 :                     
(2)  305/FFFFFFFFFFFF2E62 :                     ; ----------------------------------------------
(2)  306/FFFFFFFFFFFF2E62 :                     
(2)  307/FFFFFFFFFFFF2E62 :                     .anim_data:
(2)  308/FFFFFFFFFFFF2E62 : 0008                		dc.w .anim_down-.anim_data
(2)  309/FFFFFFFFFFFF2E64 : 0016                		dc.w .anim_up-.anim_data
(2)  310/FFFFFFFFFFFF2E66 : 0024                		dc.w .anim_right-.anim_data
(2)  311/FFFFFFFFFFFF2E68 : 0032                		dc.w .anim_left-.anim_data
(2)  312/FFFFFFFFFFFF2E6A :                     
(2)  313/FFFFFFFFFFFF2E6A :                     .anim_down:
(2)  314/FFFFFFFFFFFF2E6A : 0008                		dc.w 8
(2)  315/FFFFFFFFFFFF2E6C : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2E72 : 0002             
(2)  316/FFFFFFFFFFFF2E74 : FFFE                		dc.w -2
(2)  317/FFFFFFFFFFFF2E76 :                     		align 2
(2)  318/FFFFFFFFFFFF2E78 :                     .anim_up:
(2)  319/FFFFFFFFFFFF2E78 : 0008                		dc.w 8
(2)  320/FFFFFFFFFFFF2E7A : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E80 : 0005             
(2)  321/FFFFFFFFFFFF2E82 : FFFE                		dc.w -2
(2)  322/FFFFFFFFFFFF2E84 :                     		align 2
(2)  323/FFFFFFFFFFFF2E86 :                     .anim_right:
(2)  324/FFFFFFFFFFFF2E86 : 0008                		dc.w 8
(2)  325/FFFFFFFFFFFF2E88 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2E8E : 0008             
(2)  326/FFFFFFFFFFFF2E90 : FFFE                		dc.w -2
(2)  327/FFFFFFFFFFFF2E92 :                     		align 2
(2)  328/FFFFFFFFFFFF2E94 :                     .anim_left:
(2)  329/FFFFFFFFFFFF2E94 : 0008                		dc.w 8
(2)  330/FFFFFFFFFFFF2E96 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E9C : 000B             
(2)  331/FFFFFFFFFFFF2E9E : FFFE                		dc.w -2
(2)  332/FFFFFFFFFFFF2EA0 :                     		align 2
(2)  333/FFFFFFFFFFFF2EA2 :                     
(2)  334/FFFFFFFFFFFF2EA2 :                     ; --------------------------------------------------
(2)  335/FFFFFFFFFFFF2EA2 :                     ; Test object
(2)  336/FFFFFFFFFFFF2EA2 :                     ; --------------------------------------------------
(2)  337/FFFFFFFFFFFF2EA2 :                     
(2)  338/FFFFFFFFFFFF2EA2 :                     obj_Ball:
(2)  339/FFFFFFFFFFFF2EA2 : 7000                		moveq	#0,d0
(2)  340/FFFFFFFFFFFF2EA4 : 102E 001C           		move.b	obj_index(a6),d0
(2)  341/FFFFFFFFFFFF2EA8 : D040                		add.w	d0,d0
(2)  342/FFFFFFFFFFFF2EAA : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  343/FFFFFFFFFFFF2EAE : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  344/FFFFFFFFFFFF2EB2 :                     ; ----------------------------------------------
(2)  345/FFFFFFFFFFFF2EB2 : 0004                .list:		dc.w .init-.list
(2)  346/FFFFFFFFFFFF2EB4 : 0068                		dc.w .main-.list
(2)  347/FFFFFFFFFFFF2EB6 :                     ; ----------------------------------------------
(2)  348/FFFFFFFFFFFF2EB6 :                     .init:
(2)  349/FFFFFFFFFFFF2EB6 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  350/FFFFFFFFFFFF2EBA : 6100 F824           		bsr	object_ResetAnim	; Init/Reset animation
(2)  351/FFFFFFFFFFFF2EBE : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  352/FFFFFFFFFFFF2EC4 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  353/FFFFFFFFFFFF2ECA : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  354/FFFFFFFFFFFF2ED0 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  355/FFFFFFFFFFFF2ED6 :                     
(2)  356/FFFFFFFFFFFF2ED6 : 3D7C FF80 0004      		move.w	#-$80,obj_x(a6)	; Set Object's X/Y position
(2)  357/FFFFFFFFFFFF2EDC : 3D7C FF80 000C      		move.w	#-$80,obj_z(a6)
(2)  358/FFFFFFFFFFFF2EE2 : 303C 0101           		move.w	#$100+1,d0
(2)  359/FFFFFFFFFFFF2EE6 : 6100 F27A           		bsr	System_DiceRoll
(2)  360/FFFFFFFFFFFF2EEA : 3800                		move.w	d0,d4
(2)  361/FFFFFFFFFFFF2EEC : 303C 0081           		move.w	#$80+1,d0
(2)  362/FFFFFFFFFFFF2EF0 : 6100 F270           		bsr	System_DiceRoll
(2)  363/FFFFFFFFFFFF2EF4 : E348                		lsl.w	#1,d0
(2)  364/FFFFFFFFFFFF2EF6 : E34C                		lsl.w	#1,d4
(2)  365/FFFFFFFFFFFF2EF8 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  366/FFFFFFFFFFFF2EFC : D96E 000C           		add.w	d4,obj_z(a6)
(2)  367/FFFFFFFFFFFF2F00 :                     
(2)  368/FFFFFFFFFFFF2F00 : 6100 F206           		bsr	System_Random
(2)  369/FFFFFFFFFFFF2F04 : 2E38 F9F8           		move.l	(RAM_SysRandom).w,d7
(2)  370/FFFFFFFFFFFF2F08 : E24F                		lsr.w	#1,d7
(2)  371/FFFFFFFFFFFF2F0A : 6504                		bcs.s	.x_random
(2)  372/FFFFFFFFFFFF2F0C : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  373/FFFFFFFFFFFF2F10 :                     .x_random:
(2)  374/FFFFFFFFFFFF2F10 : E24F                		lsr.w	#1,d7
(2)  375/FFFFFFFFFFFF2F12 : 6504                		bcs.s	.y_random
(2)  376/FFFFFFFFFFFF2F14 : 446E 001A           		neg.w	obj_z_spd(a6)
(2)  377/FFFFFFFFFFFF2F18 :                     .y_random:
(2)  378/FFFFFFFFFFFF2F18 : 4E75                		rts
(2)  379/FFFFFFFFFFFF2F1A :                     
(2)  380/FFFFFFFFFFFF2F1A :                     ; ----------------------------------------------
(2)  381/FFFFFFFFFFFF2F1A :                     .main:
(2)  382/FFFFFFFFFFFF2F1A :                     ; 		move.w	#224,d1
(2)  383/FFFFFFFFFFFF2F1A :                     ; 		move.w	#320,d0
(2)  384/FFFFFFFFFFFF2F1A :                     ; 		move.w	obj_x(a6),d2
(2)  385/FFFFFFFFFFFF2F1A :                     ; 		tst.w	d2
(2)  386/FFFFFFFFFFFF2F1A :                     ; 		bpl.s	.x_back
(2)  387/FFFFFFFFFFFF2F1A :                     ; 		neg.w	obj_x_spd(a6)
(2)  388/FFFFFFFFFFFF2F1A :                     ; 		bchg	#0,obj_attr(a6)
(2)  389/FFFFFFFFFFFF2F1A :                     ; .x_back:
(2)  390/FFFFFFFFFFFF2F1A :                     ; 		cmp.w	d0,d2
(2)  391/FFFFFFFFFFFF2F1A :                     ; 		blt.s	.x_foward
(2)  392/FFFFFFFFFFFF2F1A :                     ; 		neg.w	obj_x_spd(a6)
(2)  393/FFFFFFFFFFFF2F1A :                     ; 		bchg	#0,obj_attr(a6)
(2)  394/FFFFFFFFFFFF2F1A :                     ; .x_foward:
(2)  395/FFFFFFFFFFFF2F1A :                     ; 		move.w	d2,obj_x(a6)
(2)  396/FFFFFFFFFFFF2F1A :                     ;
(2)  397/FFFFFFFFFFFF2F1A :                     ; 		move.w	obj_y(a6),d2
(2)  398/FFFFFFFFFFFF2F1A :                     ; 		tst.w	d2
(2)  399/FFFFFFFFFFFF2F1A :                     ; 		bpl.s	.y_back
(2)  400/FFFFFFFFFFFF2F1A :                     ; 		neg.w	obj_y_spd(a6)
(2)  401/FFFFFFFFFFFF2F1A :                     ; .y_back:
(2)  402/FFFFFFFFFFFF2F1A :                     ; 		cmp.w	d1,d2
(2)  403/FFFFFFFFFFFF2F1A :                     ; 		blt.s	.y_foward
(2)  404/FFFFFFFFFFFF2F1A :                     ; 		neg.w	obj_y_spd(a6)
(2)  405/FFFFFFFFFFFF2F1A :                     ; .y_foward:
(2)  406/FFFFFFFFFFFF2F1A :                     ; 		move.w	d2,obj_y(a6)
(2)  407/FFFFFFFFFFFF2F1A :                     ;
(2)  408/FFFFFFFFFFFF2F1A :                     ; 		bsr	object_Speed
(2)  409/FFFFFFFFFFFF2F1A :                     
(2)  410/FFFFFFFFFFFF2F1A :                     ; ----------------------------------------------
(2)  411/FFFFFFFFFFFF2F1A :                     ; Show the object...
(2)  412/FFFFFFFFFFFF2F1A : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  413/FFFFFFFFFFFF2F1E : 6100 F7F8           		bsr	object_Animate
(2)  414/FFFFFFFFFFFF2F22 :                     
(2)  416/FFFFFFFFFFFF2F22 : 207C 0000 0000      		move.l	#0,a0
(2)  417/FFFFFFFFFFFF2F28 : 43F9 0000 FD00      		lea	(ArtMars_Sisi),a1		; a0 - Texture location
(2)  418/FFFFFFFFFFFF2F2E : 7000                		moveq	#0,d0
(2)  419/FFFFFFFFFFFF2F30 : 7203                		moveq	#%11,d1
(2)  420/FFFFFFFFFFFF2F32 : 6100 F96C           		bsr	object_MdMars_GetSprInfo
(2)  421/FFFFFFFFFFFF2F36 : 243C 0020 0020      		move.l	#splitw(32,32),d2		; Size Width / Height
(2)  422/FFFFFFFFFFFF2F3C : 263C 0020 00D0      		move.l	#splitw(32,192+16),d3		; Texture width / Index
(2)  423/FFFFFFFFFFFF2F42 : 6000 EB04           		bra	Video_MdMars_MakeSpr3D
(2)  437/FFFFFFFFFFFF2F46 :                     
(2)  438/FFFFFFFFFFFF2F46 :                     ; ----------------------------------------------
(2)  439/FFFFFFFFFFFF2F46 :                     
(2)  440/FFFFFFFFFFFF2F46 :                     .anim_data:
(2)  441/FFFFFFFFFFFF2F46 : 0002                		dc.w .maind-.anim_data
(2)  442/FFFFFFFFFFFF2F48 :                     .maind:
(2)  443/FFFFFFFFFFFF2F48 : 0008                		dc.w 8
(2)  444/FFFFFFFFFFFF2F4A : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F50 : 0001             
(2)  445/FFFFFFFFFFFF2F52 : FFFE                		dc.w -2
(2)  446/FFFFFFFFFFFF2F54 :                     		align 2
(2)  447/FFFFFFFFFFFF2F56 :                     
(2)  448/FFFFFFFFFFFF2F56 :                     ; ====================================================================
(2)  449/FFFFFFFFFFFF2F56 :                     ; ------------------------------------------------------
(2)  450/FFFFFFFFFFFF2F56 :                     ; Subroutines
(2)  451/FFFFFFFFFFFF2F56 :                     ; ------------------------------------------------------
(2)  452/FFFFFFFFFFFF2F56 :                     
(2)  453/FFFFFFFFFFFF2F56 :                     Camera_Update:
(2)  455/FFFFFFFFFFFF2F56 : 41F8 D080           		lea	(RAM_MdMars_MSprites).w,a0
(2)  456/FFFFFFFFFFFF2F5A : 43F8 D060           		lea	(RAM_MdMars_MdlCamera).w,a1
(2)  457/FFFFFFFFFFFF2F5E : 7600                		moveq	#0,d3
(2)  458/FFFFFFFFFFFF2F60 : 7800                		moveq	#0,d4
(2)  459/FFFFFFFFFFFF2F62 : 3628 0010           		move.w	mspr_x_pos(a0),d3
(2)  460/FFFFFFFFFFFF2F66 : 3828 0014           		move.w	mspr_z_pos(a0),d4
(2)  461/FFFFFFFFFFFF2F6A : 48C3                		ext.l	d3
(2)  462/FFFFFFFFFFFF2F6C : 48C4                		ext.l	d4
(2)  463/FFFFFFFFFFFF2F6E : 3A3C 0090           		move.w	#36*4,d5
(2)  464/FFFFFFFFFFFF2F72 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  465/FFFFFFFFFFFF2F76 : 6100 F204           		bsr	System_SineWave_Cos
(2)  466/FFFFFFFFFFFF2F7A : C3C5                		muls.w	d5,d1
(2)  467/FFFFFFFFFFFF2F7C : E081                		asr.l	#8,d1
(2)  468/FFFFFFFFFFFF2F7E : 48C1                		ext.l	d1
(2)  469/FFFFFFFFFFFF2F80 : D881                		add.l	d1,d4
(2)  470/FFFFFFFFFFFF2F82 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  471/FFFFFFFFFFFF2F86 : 6100 F1FE           		bsr	System_SineWave
(2)  472/FFFFFFFFFFFF2F8A : C3C5                		muls.w	d5,d1
(2)  473/FFFFFFFFFFFF2F8C : E081                		asr.l	#8,d1
(2)  474/FFFFFFFFFFFF2F8E : 48C1                		ext.l	d1
(2)  475/FFFFFFFFFFFF2F90 : D681                		add.l	d1,d3
(2)  476/FFFFFFFFFFFF2F92 : 3038 B80C           		move.w	(RAM_Camera_Rot).w,d0
(2)  477/FFFFFFFFFFFF2F96 : E788                		lsl.l	#3,d0
(2)  478/FFFFFFFFFFFF2F98 : 48C0                		ext.l	d0
(2)  479/FFFFFFFFFFFF2F9A : 4480                		neg.l	d0
(2)  480/FFFFFFFFFFFF2F9C : 2340 0010           		move.l	d0,mcam_y_rot(a1)
(2)  481/FFFFFFFFFFFF2FA0 :                     
(2)  482/FFFFFFFFFFFF2FA0 : 2283                		move.l	d3,mcam_x_pos(a1)
(2)  483/FFFFFFFFFFFF2FA2 : 2344 0008           		move.l	d4,mcam_z_pos(a1)
(2)  485/FFFFFFFFFFFF2FA6 : 4E75                		rts
(2)  486/FFFFFFFFFFFF2FA8 :                     
(2)  487/FFFFFFFFFFFF2FA8 :                     ; ====================================================================
(2)  488/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  489/FFFFFFFFFFFF2FA8 :                     ; Includes for this screen
(2)  490/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  491/FFFFFFFFFFFF2FA8 :                     
(2)  492/FFFFFFFFFFFF2FA8 :                     ; ====================================================================
(2)  493/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  494/FFFFFFFFFFFF2FA8 :                     ; Custom VBlank
(2)  495/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  496/FFFFFFFFFFFF2FA8 :                     
(2)  497/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  498/FFFFFFFFFFFF2FA8 :                     ; Custom HBlank
(2)  499/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  500/FFFFFFFFFFFF2FA8 :                     
(2)  501/FFFFFFFFFFFF2FA8 :                     ; ====================================================================
(2)  502/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  503/FFFFFFFFFFFF2FA8 :                     ; Small data section
(2)  504/FFFFFFFFFFFF2FA8 :                     ; ------------------------------------------------------
(2)  505/FFFFFFFFFFFF2FA8 :                     
(2)  506/FFFFFFFFFFFF2FA8 :                     str_NewCountr0:
(2)  508/FFFFFFFFFFFF2FA8 : 83FF E9B8           		dc.l pstr_mem(3,RAM_Objects+obj_x)
(2)  509/FFFFFFFFFFFF2FAC : 20                  		dc.b " "
(2)  510/FFFFFFFFFFFF2FAD : 83FF E9BC           		dc.l pstr_mem(3,RAM_Objects+obj_y)
(2)  511/FFFFFFFFFFFF2FB1 : 20                  		dc.b " "
(2)  512/FFFFFFFFFFFF2FB2 : 83FF E9C0           		dc.l pstr_mem(3,RAM_Objects+obj_z)
(2)  513/FFFFFFFFFFFF2FB6 : 20                  		dc.b " "
(2)  514/FFFFFFFFFFFF2FB7 : 83FF B800           		dc.l pstr_mem(3,RAM_TestTouch)
(2)  515/FFFFFFFFFFFF2FBB : 0A                  		dc.b $0A
(2)  516/FFFFFFFFFFFF2FBC : 83FF D06C           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_x_rot)
(2)  517/FFFFFFFFFFFF2FC0 : 20                  		dc.b " "
(2)  518/FFFFFFFFFFFF2FC1 : 83FF D070           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_y_rot)
(2)  519/FFFFFFFFFFFF2FC5 : 20                  		dc.b " "
(2)  520/FFFFFFFFFFFF2FC6 : 83FF D074           		dc.l pstr_mem(3,RAM_MdMars_MdlCamera+mcam_z_rot)
(2)  521/FFFFFFFFFFFF2FCA : 20                  		dc.b " "
(2)  522/FFFFFFFFFFFF2FCB : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  526/FFFFFFFFFFFF2FCF : 00                  		dc.b 0
(2)  527/FFFFFFFFFFFF2FD0 :                     		align 2
(2)  528/FFFFFFFFFFFF2FD2 :                     
(2)  529/FFFFFFFFFFFF2FD2 :                     str_InputMe:
(2)  531/FFFFFFFFFFFF2FD2 : 80A1 5120           		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  532/FFFFFFFFFFFF2FD6 : 20                  		dc.b " "
(2)  533/FFFFFFFFFFFF2FD7 : 80A1 5121           		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  534/FFFFFFFFFFFF2FDB : 20                  		dc.b " "
(2)  535/FFFFFFFFFFFF2FDC : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  539/FFFFFFFFFFFF2FE0 : 00                  		dc.b 0
(2)  540/FFFFFFFFFFFF2FE1 :                     		align 2
(2)  541/FFFFFFFFFFFF2FE2 :                     
(2)  542/FFFFFFFFFFFF2FE2 :                     ; ====================================================================
(2)  543/FFFFFFFFFFFF2FE2 :                     
(1)   19/FFFFFFFFFFFF2FE2 :                     mcscrn_e:
(1)   19/   543E2 :                                     dephase
(1)   19/   543E2 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   19/   543E2 :                                     align $800
(1)   19/   54800 :                     ; Md_Screen00_e:
(1)   19/   54800 : =$54800              MD_SCREEN04_E label *
(1)   19/   54800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN04",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/   54800 : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   20/   54800 :                                     align $800              ; SCD/CD32X sector align
(1)   20/   54800 : =$54800              MD_SCREEN07 label *
(1)   20/   54800 :                     
(1)   20/   54800 :                     mctopscrn:
(1)   20/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   20/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   20/FFFFFFFFFFFF2C00 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; GEMA SOUND TESTER
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$7                  MAX_SNDPICK		equ 7
(2)   12/FFFFFFFFFFFF2C00 : =$16                 SET_SNDVIEWY		equ 22
(2)   13/FFFFFFFFFFFF2C00 :                     
(2)   14/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   15/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   16/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   17/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   18/FFFFFFFFFFFF2C00 :                     
(2)   19/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2
(2)   19/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   19/   54800 :                                     dephase
(2)   19/       2 :                                     phase 2
(2)   19/       2 : =$2                  GLBL_LASTORG    := *
(2)   20/       2 :                     setVram_Dodo		ds.b $30
(2)   21/      32 :                     setVram_Mimi		ds.b $30
(2)   22/      62 :                     setVram_Fifi		ds.b $30
(2)   23/      92 :  (MACRO-2)           			endmemory
(2)   23/   54890 :                     .here:          dephase
(2)   23/   54890 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   24/FFFFFFFFFFFF2C00 :                     
(2)   25/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     ; This mode's RAM
(2)   28/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   29/FFFFFFFFFFFF2C00 :                     
(2)   30/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   30/   54800 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   32/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   33/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   34/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   35/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   36/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   37/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   38/FFFFFFFFFFFFB868 :                     
(2)   39/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   40/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   41/FFFFFFFFFFFFB86C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   42/FFFFFFFFFFFFB86E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   43/FFFFFFFFFFFFB870 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   44/FFFFFFFFFFFFB872 :                     RAM_GemaStatus		ds.w 4
(2)   45/FFFFFFFFFFFFB87A :                     RAM_FairyVars		ds.w 1
(2)   46/FFFFFFFFFFFFB87C :                     			ds.w 1
(2)   47/FFFFFFFFFFFFB87E :                     
(2)   48/FFFFFFFFFFFFB87E :                     sizeof_thisbuff		ds.l 0
(2)   49/FFFFFFFFFFFFB884 :  (MACRO-2)           			endmemory
(2)   49/   54884 :                     .here:          dephase
(2)   49/   54884 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   49/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   50/FFFFFFFFFFFF2C00 :                     
(2)   51/FFFFFFFFFFFF2C00 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   52/FFFFFFFFFFFF2C00 :                     
(2)   53/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   54/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   55/FFFFFFFFFFFF2C00 :                     ; Init
(2)   56/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   57/FFFFFFFFFFFF2C00 :                     
(2)   58/FFFFFFFFFFFF2C00 : 6100 DAEA           		bsr	Video_DisplayOff
(2)   59/FFFFFFFFFFFF2C04 : 6100 F4D2           		bsr	System_Default
(2)   60/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C08 :                     	; Load assets
(2)   62/FFFFFFFFFFFF2C08 :                     
(2)   63/FFFFFFFFFFFF2C08 : 41FA 03CA           		lea	file_scrn1_main(pc),a0		; ** LOAD BANK **
(2)   64/FFFFFFFFFFFF2C0C : 6100 FA1C           		bsr	System_SetDataBank
(2)   65/FFFFFFFFFFFF2C10 :                     	; ----------------------------------------------
(2)   66/FFFFFFFFFFFF2C10 : 203C 0021 52F4      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   67/FFFFFFFFFFFF2C16 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   68/FFFFFFFFFFFF2C1A : 6100 E39C           		bsr	Video_PrintInit
(2)   69/FFFFFFFFFFFF2C1E : 203C 0021 5EF4      		move.l	#ASCII_FONT_W,d0
(2)   70/FFFFFFFFFFFF2C24 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   71/FFFFFFFFFFFF2C28 : 6100 E388           		bsr	Video_PrintInitW
(2)   72/FFFFFFFFFFFF2C2C : 41F8 E690           		lea	(RAM_PaletteFade+$40).w,a0	; Palette line 4:
(2)   73/FFFFFFFFFFFF2C30 : 30BC 0000           		move.w	#$0000,(a0)
(2)   74/FFFFFFFFFFFF2C34 : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   75/FFFFFFFFFFFF2C3A : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   76/FFFFFFFFFFFF2C40 : D0FC 0020           		adda	#$20,a0
(2)   77/FFFFFFFFFFFF2C44 : 30BC 0000           		move.w	#$0000,(a0)
(2)   78/FFFFFFFFFFFF2C48 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)   79/FFFFFFFFFFFF2C4E : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)   80/FFFFFFFFFFFF2C54 :                     
(2)   81/FFFFFFFFFFFF2C54 : 41F9 0022 F85A      		lea	(objPal_Dodo+2),a0
(2)   82/FFFFFFFFFFFF2C5A : 7001                		moveq	#1,d0
(2)   83/FFFFFFFFFFFF2C5C : 323C 000F           		move.w	#15,d1
(2)   84/FFFFFFFFFFFF2C60 : 6100 E2DA           		bsr	Video_FadePal
(2)   85/FFFFFFFFFFFF2C64 : 41FA 0492           		lea	ArtList_Stuff(pc),a0
(2)   86/FFFFFFFFFFFF2C68 : 6100 DD40           		bsr	Video_LoadArt_List
(2)   87/FFFFFFFFFFFF2C6C : 203C FFFF 2FE6      		move.l	#obj_Fairy,d0
(2)   88/FFFFFFFFFFFF2C72 : 7400                		moveq	#0,d2
(2)   89/FFFFFFFFFFFF2C74 : 6100 FA00           		bsr	Object_Make
(2)   90/FFFFFFFFFFFF2C78 : 5242                		addq.w	#1,d2
(2)   91/FFFFFFFFFFFF2C7A : 6100 F9FA           		bsr	Object_Make
(2)   92/FFFFFFFFFFFF2C7E : 5242                		addq.w	#1,d2
(2)   93/FFFFFFFFFFFF2C80 : 6100 F9F4           		bsr	Object_Make
(2)   94/FFFFFFFFFFFF2C84 :                     	; ----------------------------------------------
(2)   95/FFFFFFFFFFFF2C84 : 41FA 048C           		lea	str_TesterTitle(pc),a0
(2)   96/FFFFFFFFFFFF2C88 : 7006                		moveq	#6,d0
(2)   97/FFFFFFFFFFFF2C8A : 7202                		moveq	#2,d1
(2)   98/FFFFFFFFFFFF2C8C : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)   99/FFFFFFFFFFFF2C90 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  100/FFFFFFFFFFFF2C96 : 6100 E43A           		bsr	Video_PrintW
(2)  101/FFFFFFFFFFFF2C9A : 41FA 0494           		lea	str_TesterInfo(pc),a0
(2)  102/FFFFFFFFFFFF2C9E : 7005                		moveq	#5,d0
(2)  103/FFFFFFFFFFFF2CA0 : 7206                		moveq	#6,d1
(2)  104/FFFFFFFFFFFF2CA2 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  105/FFFFFFFFFFFF2CA6 : 6100 E338           		bsr	Video_Print
(2)  106/FFFFFFFFFFFF2CAA : 41FA 0496           		lea	str_Instruc(pc),a0
(2)  107/FFFFFFFFFFFF2CAE : 7002                		moveq	#2,d0
(2)  108/FFFFFFFFFFFF2CB0 : 720E                		moveq	#14,d1
(2)  109/FFFFFFFFFFFF2CB2 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  110/FFFFFFFFFFFF2CB6 : 6100 E328           		bsr	Video_Print
(2)  111/FFFFFFFFFFFF2CBA : 41FA 0508           		lea	str_VmInfo(pc),a0
(2)  112/FFFFFFFFFFFF2CBE : 7002                		moveq	#2,d0
(2)  113/FFFFFFFFFFFF2CC0 : 7216                		moveq	#SET_SNDVIEWY,d1
(2)  114/FFFFFFFFFFFF2CC2 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  115/FFFFFFFFFFFF2CC6 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  116/FFFFFFFFFFFF2CCC : 6100 E312           		bsr	Video_Print
(2)  117/FFFFFFFFFFFF2CD0 :                     ; 		bsr	.show_cursor
(2)  118/FFFFFFFFFFFF2CD0 :                     
(2)  119/FFFFFFFFFFFF2CD0 :                     	; ----------------------------------------------
(2)  120/FFFFFFFFFFFF2CD0 : 6100 D3A4           		bsr	gemaReset				; Load default GEMA sound data
(2)  121/FFFFFFFFFFFF2CD4 :                     ; 		move.w	#215,(RAM_GemaArg6).w
(2)  122/FFFFFFFFFFFF2CD4 :                     ; 		move.w	#215,d0
(2)  123/FFFFFFFFFFFF2CD4 :                     ; 		bsr	gemaSetBeats
(2)  124/FFFFFFFFFFFF2CD4 :                     ; 		moveq	#1,d0
(2)  125/FFFFFFFFFFFF2CD4 :                     ; 		bsr	gemaPlaySeq
(2)  126/FFFFFFFFFFFF2CD4 :                     
(2)  127/FFFFFFFFFFFF2CD4 :                     ; 		moveq	#1,d0
(2)  128/FFFFFFFFFFFF2CD4 :                     ; 		moveq	#%10,d1
(2)  129/FFFFFFFFFFFF2CD4 :                     ; 		bsr	Video_Resolution
(2)  130/FFFFFFFFFFFF2CD4 :                     
(2)  131/FFFFFFFFFFFF2CD4 :                     	; ----------------------------------------------
(2)  132/FFFFFFFFFFFF2CD4 : 6100 00F8           		bsr	.show_me
(2)  133/FFFFFFFFFFFF2CD8 : 6100 0138           		bsr	.gema_view
(2)  134/FFFFFFFFFFFF2CDC :                     ; 		bsr	.steal_vars
(2)  135/FFFFFFFFFFFF2CDC :                     	; ----------------------------------------------
(2)  136/FFFFFFFFFFFF2CDC : 6100 DA02           		bsr	Video_DisplayOn
(2)  137/FFFFFFFFFFFF2CE0 : 6100 F962           		bsr	Object_Run
(2)  138/FFFFFFFFFFFF2CE4 : 6100 D796           		bsr	Video_BuildSprites
(2)  139/FFFFFFFFFFFF2CE8 : 6100 F070           		bsr	System_Render
(2)  140/FFFFFFFFFFFF2CEC : 6100 E1B4           		bsr	Video_FadeIn_Full
(2)  141/FFFFFFFFFFFF2CF0 :                     
(2)  142/FFFFFFFFFFFF2CF0 :                     ; ====================================================================
(2)  143/FFFFFFFFFFFF2CF0 :                     ; ------------------------------------------------------
(2)  144/FFFFFFFFFFFF2CF0 :                     ; Loop
(2)  145/FFFFFFFFFFFF2CF0 :                     ; ------------------------------------------------------
(2)  146/FFFFFFFFFFFF2CF0 :                     
(2)  147/FFFFFFFFFFFF2CF0 :                     .loop:
(2)  148/FFFFFFFFFFFF2CF0 : 6100 F068           		bsr	System_Render
(2)  149/FFFFFFFFFFFF2CF4 :                     ; 		bsr	.show_cursor
(2)  150/FFFFFFFFFFFF2CF4 : 6100 011C           		bsr	.gema_view
(2)  151/FFFFFFFFFFFF2CF8 : 6100 F94A           		bsr	Object_Run
(2)  152/FFFFFFFFFFFF2CFC : 6100 D77E           		bsr	Video_BuildSprites
(2)  153/FFFFFFFFFFFF2D00 :                     
(2)  154/FFFFFFFFFFFF2D00 :                     
(2)  155/FFFFFFFFFFFF2D00 :                     
(2)  156/FFFFFFFFFFFF2D00 :                     ; 		lea	str_Info(pc),a0
(2)  157/FFFFFFFFFFFF2D00 :                     ; 		moveq	#31,d0
(2)  158/FFFFFFFFFFFF2D00 :                     ; 		moveq	#4,d1
(2)  159/FFFFFFFFFFFF2D00 :                     ; 		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  160/FFFFFFFFFFFF2D00 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  161/FFFFFFFFFFFF2D00 :                     ; 		bsr	Video_PrintW
(2)  162/FFFFFFFFFFFF2D00 :                     
(2)  163/FFFFFFFFFFFF2D00 :                     	; NEW controls
(2)  164/FFFFFFFFFFFF2D00 : 4DF8 E974           		lea	(Controller_1).w,a6
(2)  165/FFFFFFFFFFFF2D04 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  166/FFFFFFFFFFFF2D08 : 0807 0007           		btst	#bitJoyStart,d7
(2)  167/FFFFFFFFFFFF2D0C : 6600 00B0           		bne	.exit_all
(2)  168/FFFFFFFFFFFF2D10 :                     	; LEFT/RIGHT
(2)  169/FFFFFFFFFFFF2D10 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  170/FFFFFFFFFFFF2D14 : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  171/FFFFFFFFFFFF2D18 : 6712                		beq.s	.lr_seq
(2)  172/FFFFFFFFFFFF2D1A : 7001                		moveq	#1,d0
(2)  173/FFFFFFFFFFFF2D1C : 0247 0004           		andi.w	#JoyLeft,d7
(2)  174/FFFFFFFFFFFF2D20 : 6702                		beq.s	.lr_right
(2)  175/FFFFFFFFFFFF2D22 : 4440                		neg.w	d0
(2)  176/FFFFFFFFFFFF2D24 :                     .lr_right:
(2)  177/FFFFFFFFFFFF2D24 : D178 B86E           		add.w	d0,(RAM_GemaSeq).w
(2)  178/FFFFFFFFFFFF2D28 : 6100 00A4           		bsr	.show_me
(2)  179/FFFFFFFFFFFF2D2C :                     .lr_seq:
(2)  180/FFFFFFFFFFFF2D2C :                     
(2)  181/FFFFFFFFFFFF2D2C :                     	; UP/DOWN
(2)  182/FFFFFFFFFFFF2D2C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  183/FFFFFFFFFFFF2D30 : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  184/FFFFFFFFFFFF2D34 : 6712                		beq.s	.ud_seq
(2)  185/FFFFFFFFFFFF2D36 : 7001                		moveq	#1,d0
(2)  186/FFFFFFFFFFFF2D38 : 0247 0001           		andi.w	#JoyUp,d7
(2)  187/FFFFFFFFFFFF2D3C : 6702                		beq.s	.ud_right
(2)  188/FFFFFFFFFFFF2D3E : 4440                		neg.w	d0
(2)  189/FFFFFFFFFFFF2D40 :                     .ud_right:
(2)  190/FFFFFFFFFFFF2D40 : D178 B870           		add.w	d0,(RAM_GemaBlk).w
(2)  191/FFFFFFFFFFFF2D44 : 6100 0088           		bsr	.show_me
(2)  192/FFFFFFFFFFFF2D48 :                     .ud_seq:
(2)  193/FFFFFFFFFFFF2D48 :                     
(2)  194/FFFFFFFFFFFF2D48 :                     	; X/Y
(2)  195/FFFFFFFFFFFF2D48 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  196/FFFFFFFFFFFF2D4C : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  197/FFFFFFFFFFFF2D50 : 6710                		beq.s	.xy_seq
(2)  198/FFFFFFFFFFFF2D52 : 7001                		moveq	#1,d0
(2)  199/FFFFFFFFFFFF2D54 : 0247 0400           		andi.w	#JoyX,d7
(2)  200/FFFFFFFFFFFF2D58 : 6702                		beq.s	.xy_right
(2)  201/FFFFFFFFFFFF2D5A : 4440                		neg.w	d0
(2)  202/FFFFFFFFFFFF2D5C :                     .xy_right:
(2)  203/FFFFFFFFFFFF2D5C : D178 B86C           		add.w	d0,(RAM_GemaIndx).w
(2)  204/FFFFFFFFFFFF2D60 : 616C                		bsr	.show_me
(2)  205/FFFFFFFFFFFF2D62 :                     .xy_seq:
(2)  206/FFFFFFFFFFFF2D62 :                     
(2)  207/FFFFFFFFFFFF2D62 :                     	; C BUTTON
(2)  208/FFFFFFFFFFFF2D62 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  209/FFFFFFFFFFFF2D66 : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  210/FFFFFFFFFFFF2D6A : 672A                		beq.s	.c_press
(2)  211/FFFFFFFFFFFF2D6C : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  212/FFFFFFFFFFFF2D70 : 301D                		move.w	(a5)+,d0
(2)  213/FFFFFFFFFFFF2D72 : 0247 0100           		andi.w	#JoyZ,d7
(2)  214/FFFFFFFFFFFF2D76 : 6702                		beq.s	.not_auto
(2)  215/FFFFFFFFFFFF2D78 : 70FF                		moveq	#-1,d0
(2)  216/FFFFFFFFFFFF2D7A :                     .not_auto:
(2)  217/FFFFFFFFFFFF2D7A : 321D                		move.w	(a5)+,d1
(2)  218/FFFFFFFFFFFF2D7C : 341D                		move.w	(a5)+,d2
(2)  219/FFFFFFFFFFFF2D7E : 6100 D44C           		bsr	gemaPlaySeq
(2)  220/FFFFFFFFFFFF2D82 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  221/FFFFFFFFFFFF2D86 : 3200                		move.w	d0,d1
(2)  222/FFFFFFFFFFFF2D88 : D241                		add.w	d1,d1
(2)  223/FFFFFFFFFFFF2D8A : 41FA 0058           		lea	.extnal_beats(pc),a0
(2)  224/FFFFFFFFFFFF2D8E : 3030 1000           		move.w	(a0,d1.w),d0
(2)  225/FFFFFFFFFFFF2D92 : 6100 D4C6           		bsr	gemaSetBeats
(2)  226/FFFFFFFFFFFF2D96 :                     .c_press:
(2)  227/FFFFFFFFFFFF2D96 :                     	; B BUTTON
(2)  228/FFFFFFFFFFFF2D96 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  229/FFFFFFFFFFFF2D9A : 0247 0010           		andi.w	#JoyB,d7
(2)  230/FFFFFFFFFFFF2D9E : 670C                		beq.s	.b_press
(2)  231/FFFFFFFFFFFF2DA0 : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  232/FFFFFFFFFFFF2DA4 : 301D                		move.w	(a5)+,d0
(2)  233/FFFFFFFFFFFF2DA6 : 321D                		move.w	(a5)+,d1
(2)  234/FFFFFFFFFFFF2DA8 : 6100 D440           		bsr	gemaStopSeq
(2)  235/FFFFFFFFFFFF2DAC :                     .b_press:
(2)  236/FFFFFFFFFFFF2DAC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  237/FFFFFFFFFFFF2DB0 : 0247 0040           		andi.w	#JoyA,d7
(2)  238/FFFFFFFFFFFF2DB4 : 6704                		beq.s	.a_press
(2)  239/FFFFFFFFFFFF2DB6 : 6100 D44E           		bsr	gemaStopAll
(2)  240/FFFFFFFFFFFF2DBA :                     .a_press:
(2)  241/FFFFFFFFFFFF2DBA :                     
(2)  242/FFFFFFFFFFFF2DBA :                     
(2)  243/FFFFFFFFFFFF2DBA :                     ; 		move.w	on_hold(a6),d7
(2)  244/FFFFFFFFFFFF2DBA :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  245/FFFFFFFFFFFF2DBA :                     ; 		bne.s	.n_up
(2)  246/FFFFFFFFFFFF2DBA :                     ; 		move.w	on_press(a6),d7
(2)  247/FFFFFFFFFFFF2DBA :                     ; 		btst	#bitJoyDown,d7
(2)  248/FFFFFFFFFFFF2DBA :                     ; 		beq.s	.n_down
(2)  249/FFFFFFFFFFFF2DBA :                     ; 		addq.w	#1,(a5)
(2)  250/FFFFFFFFFFFF2DBA :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  251/FFFFFFFFFFFF2DBA :                     ; 		ble.s	.n_downd
(2)  252/FFFFFFFFFFFF2DBA :                     ; 		clr.w	(a5)
(2)  253/FFFFFFFFFFFF2DBA :                     ; .n_downd:
(2)  254/FFFFFFFFFFFF2DBA :                     ; 		bsr.s	.show_me
(2)  255/FFFFFFFFFFFF2DBA :                     ; .n_down:
(2)  256/FFFFFFFFFFFF2DBA :                     ; 		move.w	on_press(a6),d7
(2)  257/FFFFFFFFFFFF2DBA :                     ; 		btst	#bitJoyUp,d7
(2)  258/FFFFFFFFFFFF2DBA :                     ; 		beq.s	.n_up
(2)  259/FFFFFFFFFFFF2DBA :                     ; 		subq.w	#1,(a5)
(2)  260/FFFFFFFFFFFF2DBA :                     ; 		bpl.s	.n_ups
(2)  261/FFFFFFFFFFFF2DBA :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  262/FFFFFFFFFFFF2DBA :                     ; .n_ups:
(2)  263/FFFFFFFFFFFF2DBA :                     ; 		bsr.s	.show_me
(2)  264/FFFFFFFFFFFF2DBA :                     ; .n_up:
(2)  265/FFFFFFFFFFFF2DBA :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  266/FFFFFFFFFFFF2DBA :                     ; 		lsl.w	#2,d7
(2)  267/FFFFFFFFFFFF2DBA :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  268/FFFFFFFFFFFF2DBA :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  269/FFFFFFFFFFFF2DBA :                     ; 		bpl.s	.n_cbtn
(2)  270/FFFFFFFFFFFF2DBA :                     
(2)  271/FFFFFFFFFFFF2DBA :                     ; .n_cbtn:
(2)  272/FFFFFFFFFFFF2DBA : 6000 FF34           		bra	.loop
(2)  273/FFFFFFFFFFFF2DBE :                     
(2)  274/FFFFFFFFFFFF2DBE :                     ; ------------------------------------------------------
(2)  275/FFFFFFFFFFFF2DBE :                     
(2)  276/FFFFFFFFFFFF2DBE :                     .exit_all:
(2)  277/FFFFFFFFFFFF2DBE : 6100 D446           		bsr	gemaStopAll
(2)  278/FFFFFFFFFFFF2DC2 : 6100 E100           		bsr	Video_FadeOut_Full
(2)  279/FFFFFFFFFFFF2DC6 : 31FC 0000 FA10      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(2)  280/FFFFFFFFFFFF2DCC : 4E75                		rts				; EXIT
(2)  281/FFFFFFFFFFFF2DCE :                     
(2)  282/FFFFFFFFFFFF2DCE :                     ; ------------------------------------------------------
(2)  283/FFFFFFFFFFFF2DCE :                     
(2)  284/FFFFFFFFFFFF2DCE :                     .show_me:
(2)  285/FFFFFFFFFFFF2DCE : 41FA 0638           		lea	str_ShowVars(pc),a0
(2)  286/FFFFFFFFFFFF2DD2 : 7007                		moveq	#7,d0
(2)  287/FFFFFFFFFFFF2DD4 : 7208                		moveq	#8,d1
(2)  288/FFFFFFFFFFFF2DD6 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  289/FFFFFFFFFFFF2DDA : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  290/FFFFFFFFFFFF2DE0 : 6000 E2F0           		bra	Video_PrintW
(2)  291/FFFFFFFFFFFF2DE4 :                     
(2)  292/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  293/FFFFFFFFFFFF2DE4 :                     ;
(2)  294/FFFFFFFFFFFF2DE4 :                     ; .jump_list:
(2)  295/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.nothing
(2)  296/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_1
(2)  297/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_2
(2)  298/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_3
(2)  299/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_4
(2)  300/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_5
(2)  301/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_6
(2)  302/FFFFFFFFFFFF2DE4 :                     ; 		bra.w	.option_7
(2)  303/FFFFFFFFFFFF2DE4 :                     ;
(2)  304/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  305/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 0
(2)  306/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  307/FFFFFFFFFFFF2DE4 :                     ;
(2)  308/FFFFFFFFFFFF2DE4 :                     ; .nothing:
(2)  309/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  310/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  311/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press
(2)  312/FFFFFFFFFFFF2DE4 :                     ; 		bsr.s	.show_me
(2)  313/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaTest
(2)  314/FFFFFFFFFFFF2DE4 :                     ; .no_press:
(2)  315/FFFFFFFFFFFF2DE4 :                     ; 		rts
(2)  316/FFFFFFFFFFFF2DE4 :                     ;
(2)  317/FFFFFFFFFFFF2DE4 :                     ; ------------------------------------------------------
(2)  318/FFFFFFFFFFFF2DE4 :                     ; OPTION 1
(2)  319/FFFFFFFFFFFF2DE4 :                     ; ------------------------------------------------------
(2)  320/FFFFFFFFFFFF2DE4 :                     
(2)  321/FFFFFFFFFFFF2DE4 :                     ; 		bra.s	.show_me
(2)  322/FFFFFFFFFFFF2DE4 :                     ; .option1_args:
(2)  323/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_hold(a6),d7
(2)  324/FFFFFFFFFFFF2DE4 :                     ; 		move.w	d7,d6
(2)  325/FFFFFFFFFFFF2DE4 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  326/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press
(2)  327/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyB,d7
(2)  328/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.d2_opt
(2)  329/FFFFFFFFFFFF2DE4 :                     ; 		adda	#2,a5
(2)  330/FFFFFFFFFFFF2DE4 :                     ; .d2_opt:
(2)  331/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyC,d7
(2)  332/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.d3_opt
(2)  333/FFFFFFFFFFFF2DE4 :                     ; 		adda	#4,a5
(2)  334/FFFFFFFFFFFF2DE4 :                     ; .d3_opt:
(2)  335/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  336/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyRight,d7
(2)  337/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op1_right
(2)  338/FFFFFFFFFFFF2DE4 :                     ; 		addq.w	#1,(a5)
(2)  339/FFFFFFFFFFFF2DE4 :                     ; 		bra	.show_me
(2)  340/FFFFFFFFFFFF2DE4 :                     ; .op1_right:
(2)  341/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyLeft,d7
(2)  342/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op1_left
(2)  343/FFFFFFFFFFFF2DE4 :                     ; 		subq.w	#1,(a5)
(2)  344/FFFFFFFFFFFF2DE4 :                     ; 		bra	.show_me
(2)  345/FFFFFFFFFFFF2DE4 :                     ; .op1_left:
(2)  346/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_hold(a6),d7
(2)  347/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyUp,d7
(2)  348/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op1_down
(2)  349/FFFFFFFFFFFF2DE4 :                     ; 		addq.w	#1,(a5)
(2)  350/FFFFFFFFFFFF2DE4 :                     ; 		bra	.show_me
(2)  351/FFFFFFFFFFFF2DE4 :                     ; .op1_down:
(2)  352/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyDown,d7
(2)  353/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op1_up
(2)  354/FFFFFFFFFFFF2DE4 :                     ; 		subq.w	#1,(a5)
(2)  355/FFFFFFFFFFFF2DE4 :                     ; 		bra	.show_me
(2)  356/FFFFFFFFFFFF2DE4 :                     ; .op1_up:
(2)  357/FFFFFFFFFFFF2DE4 :                     ;
(2)  358/FFFFFFFFFFFF2DE4 :                     ; 		rts
(2)  359/FFFFFFFFFFFF2DE4 :                     ;
(2)  360/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  361/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 2
(2)  362/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  363/FFFFFFFFFFFF2DE4 :                     ;
(2)  364/FFFFFFFFFFFF2DE4 :                     ; .option_2:
(2)  365/FFFFFFFFFFFF2DE4 :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  366/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  367/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  368/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.option1_args
(2)  369/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d0
(2)  370/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d1
(2)  371/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaStopSeq
(2)  372/FFFFFFFFFFFF2DE4 :                     ;
(2)  373/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  374/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 3
(2)  375/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  376/FFFFFFFFFFFF2DE4 :                     ;
(2)  377/FFFFFFFFFFFF2DE4 :                     ; .option_3:
(2)  378/FFFFFFFFFFFF2DE4 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  379/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  380/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  381/FFFFFFFFFFFF2DE4 :                     ; 		beq	.option1_args
(2)  382/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d0
(2)  383/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d1
(2)  384/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaFadeSeq
(2)  385/FFFFFFFFFFFF2DE4 :                     ;
(2)  386/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  387/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 4
(2)  388/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  389/FFFFFFFFFFFF2DE4 :                     ;
(2)  390/FFFFFFFFFFFF2DE4 :                     ; .option_4:
(2)  391/FFFFFFFFFFFF2DE4 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  392/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  393/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  394/FFFFFFFFFFFF2DE4 :                     ; 		beq	.option1_args
(2)  395/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d0
(2)  396/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5)+,d1
(2)  397/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaSetSeqVol
(2)  398/FFFFFFFFFFFF2DE4 :                     ;
(2)  399/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  400/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 5
(2)  401/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  402/FFFFFFFFFFFF2DE4 :                     ;
(2)  403/FFFFFFFFFFFF2DE4 :                     ; .option_5:
(2)  404/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  405/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  406/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press2
(2)  407/FFFFFFFFFFFF2DE4 :                     ; 		bsr	.show_me
(2)  408/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaStopAll
(2)  409/FFFFFFFFFFFF2DE4 :                     ; .no_press2:
(2)  410/FFFFFFFFFFFF2DE4 :                     ; 		rts
(2)  411/FFFFFFFFFFFF2DE4 :                     ;
(2)  412/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  413/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 6
(2)  414/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  415/FFFFFFFFFFFF2DE4 :                     ;
(2)  416/FFFFFFFFFFFF2DE4 :                     ; .option_6:
(2)  417/FFFFFFFFFFFF2DE4 :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  418/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_hold(a6),d7
(2)  419/FFFFFFFFFFFF2DE4 :                     ; 		andi.w	#JoyA,d7
(2)  420/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press2
(2)  421/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  422/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyRight,d7
(2)  423/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op2_right
(2)  424/FFFFFFFFFFFF2DE4 :                     ; 		addq.w	#1,(a5)
(2)  425/FFFFFFFFFFFF2DE4 :                     ; 		bra	.show_me_2
(2)  426/FFFFFFFFFFFF2DE4 :                     ; .op2_right:
(2)  427/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyLeft,d7
(2)  428/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op2_left
(2)  429/FFFFFFFFFFFF2DE4 :                     ; 		subq.w	#1,(a5)
(2)  430/FFFFFFFFFFFF2DE4 :                     ; 		bsr	.show_me_2
(2)  431/FFFFFFFFFFFF2DE4 :                     ; .op2_left:
(2)  432/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_hold(a6),d7
(2)  433/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyDown,d7
(2)  434/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op2_down
(2)  435/FFFFFFFFFFFF2DE4 :                     ; 		addq.w	#1,(a5)
(2)  436/FFFFFFFFFFFF2DE4 :                     ; 		bsr	.show_me_2
(2)  437/FFFFFFFFFFFF2DE4 :                     ; .op2_down:
(2)  438/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyUp,d7
(2)  439/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.op2_up
(2)  440/FFFFFFFFFFFF2DE4 :                     ; 		subq.w	#1,(a5)
(2)  441/FFFFFFFFFFFF2DE4 :                     ; 		bsr	.show_me_2
(2)  442/FFFFFFFFFFFF2DE4 :                     ; .op2_up:
(2)  443/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  444/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  445/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press2
(2)  446/FFFFFFFFFFFF2DE4 :                     ; .show_me_2:
(2)  447/FFFFFFFFFFFF2DE4 :                     ; 		bsr	.show_me
(2)  448/FFFFFFFFFFFF2DE4 :                     ; 		move.w	(a5),d0
(2)  449/FFFFFFFFFFFF2DE4 :                     ; 		bra	gemaSetBeats
(2)  450/FFFFFFFFFFFF2DE4 :                     ;
(2)  451/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  452/FFFFFFFFFFFF2DE4 :                     ; ; OPTION 7
(2)  453/FFFFFFFFFFFF2DE4 :                     ; ; ------------------------------------------------------
(2)  454/FFFFFFFFFFFF2DE4 :                     ;
(2)  455/FFFFFFFFFFFF2DE4 :                     ; .option_7:
(2)  456/FFFFFFFFFFFF2DE4 :                     ; 		move.w	on_press(a6),d7
(2)  457/FFFFFFFFFFFF2DE4 :                     ; 		btst	#bitJoyStart,d7
(2)  458/FFFFFFFFFFFF2DE4 :                     ; 		beq.s	.no_press2
(2)  459/FFFFFFFFFFFF2DE4 :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  460/FFFFFFFFFFFF2DE4 :                     ; 		rts
(2)  461/FFFFFFFFFFFF2DE4 :                     
(2)  462/FFFFFFFFFFFF2DE4 :                     ; ------------------------------------------------------
(2)  463/FFFFFFFFFFFF2DE4 :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  464/FFFFFFFFFFFF2DE4 :                     ; ------------------------------------------------------
(2)  465/FFFFFFFFFFFF2DE4 :                     
(2)  466/FFFFFFFFFFFF2DE4 :                     .extnal_beats:
(2)  467/FFFFFFFFFFFF2DE4 : 00C8                	dc.w 200
(2)  468/FFFFFFFFFFFF2DE6 : 00C0                	dc.w 192
(2)  469/FFFFFFFFFFFF2DE8 : 00C0                	dc.w 192
(2)  470/FFFFFFFFFFFF2DEA : 00C0                	dc.w 192
(2)  471/FFFFFFFFFFFF2DEC : 00D7                	dc.w 215
(2)  472/FFFFFFFFFFFF2DEE : 00B8                	dc.w $00B8
(2)  473/FFFFFFFFFFFF2DF0 : 00C0                	dc.w 192
(2)  474/FFFFFFFFFFFF2DF2 : 00C0                	dc.w 192
(2)  475/FFFFFFFFFFFF2DF4 : 00D7                	dc.w 215
(2)  476/FFFFFFFFFFFF2DF6 : 00D7                	dc.w 215
(2)  477/FFFFFFFFFFFF2DF8 : 00D7                	dc.w 215
(2)  478/FFFFFFFFFFFF2DFA : 00D7                	dc.w 215
(2)  479/FFFFFFFFFFFF2DFC : 00D7                	dc.w 215
(2)  480/FFFFFFFFFFFF2DFE : 00D7                	dc.w 215
(2)  481/FFFFFFFFFFFF2E00 : 00D7                	dc.w 215
(2)  482/FFFFFFFFFFFF2E02 : 00D7                	dc.w 215
(2)  483/FFFFFFFFFFFF2E04 : 00D7                	dc.w 215
(2)  484/FFFFFFFFFFFF2E06 : 00D7                	dc.w 215
(2)  485/FFFFFFFFFFFF2E08 : 00D7                	dc.w 215
(2)  486/FFFFFFFFFFFF2E0A : 00D7                	dc.w 215
(2)  487/FFFFFFFFFFFF2E0C : 00D7                	dc.w 215
(2)  488/FFFFFFFFFFFF2E0E : 00D7                	dc.w 215
(2)  489/FFFFFFFFFFFF2E10 : 00D7                	dc.w 215
(2)  490/FFFFFFFFFFFF2E12 :                     
(2)  491/FFFFFFFFFFFF2E12 :                     ; ------------------------------------------------------
(2)  492/FFFFFFFFFFFF2E12 :                     
(2)  493/FFFFFFFFFFFF2E12 :                     .gema_view:
(2)  494/FFFFFFFFFFFF2E12 : 43F8 B872           		lea	(RAM_GemaStatus),a1
(2)  495/FFFFFFFFFFFF2E16 : 7000                		moveq	#0,d0
(2)  496/FFFFFFFFFFFF2E18 : 6100 D2C2           		bsr	sndLockZ80
(2)  497/FFFFFFFFFFFF2E1C : 1039 00A0 1935      		move.b	(z80_cpu+trkBuff_0),d0
(2)  498/FFFFFFFFFFFF2E22 : 6100 D2CC           		bsr	sndUnlockZ80
(2)  499/FFFFFFFFFFFF2E26 : 32C0                		move.w	d0,(a1)+
(2)  500/FFFFFFFFFFFF2E28 : 6100 D2B2           		bsr	sndLockZ80
(2)  501/FFFFFFFFFFFF2E2C : 1039 00A0 1974      		move.b	(z80_cpu+trkBuff_1),d0
(2)  502/FFFFFFFFFFFF2E32 : 6100 D2BC           		bsr	sndUnlockZ80
(2)  503/FFFFFFFFFFFF2E36 : 32C0                		move.w	d0,(a1)+
(2)  504/FFFFFFFFFFFF2E38 : 6100 D2A2           		bsr	sndLockZ80
(2)  505/FFFFFFFFFFFF2E3C : 1039 00A0 19B3      		move.b	(z80_cpu+trkBuff_2),d0
(2)  506/FFFFFFFFFFFF2E42 : 6100 D2AC           		bsr	sndUnlockZ80
(2)  507/FFFFFFFFFFFF2E46 : 32C0                		move.w	d0,(a1)+
(2)  508/FFFFFFFFFFFF2E48 :                     
(2)  509/FFFFFFFFFFFF2E48 : 41F9 00A0 1C0E      		lea	(z80_cpu+tblPSG),a0
(2)  510/FFFFFFFFFFFF2E4E : 43F8 B800           		lea	(RAM_GemaCache_PSG),a1
(2)  511/FFFFFFFFFFFF2E52 : 7E02                		moveq	#3-1,d7
(2)  512/FFFFFFFFFFFF2E54 : 6100 00E6           		bsr	.copy_me
(2)  513/FFFFFFFFFFFF2E58 : 41F9 00A0 1C46      		lea	(z80_cpu+tblPSGN),a0
(2)  514/FFFFFFFFFFFF2E5E : 43F8 B80C           		lea	(RAM_GemaCache_PSGN),a1
(2)  515/FFFFFFFFFFFF2E62 : 7E00                		moveq	#1-1,d7
(2)  516/FFFFFFFFFFFF2E64 : 6100 00D6           		bsr	.copy_me
(2)  517/FFFFFFFFFFFF2E68 : 41F9 00A0 1BA0      		lea	(z80_cpu+tblFM),a0
(2)  518/FFFFFFFFFFFF2E6E : 43F8 B810           		lea	(RAM_GemaCache_FM),a1
(2)  519/FFFFFFFFFFFF2E72 : 7E05                		moveq	#6-1,d7
(2)  520/FFFFFFFFFFFF2E74 : 6100 00C6           		bsr	.copy_me
(2)  521/FFFFFFFFFFFF2E78 : 41F9 00A0 1B0E      		lea	(z80_cpu+tblPCM),a0
(2)  522/FFFFFFFFFFFF2E7E : 43F8 B828           		lea	(RAM_GemaCache_PCM),a1
(2)  523/FFFFFFFFFFFF2E82 : 7E07                		moveq	#8-1,d7
(2)  524/FFFFFFFFFFFF2E84 : 6100 00B6           		bsr	.copy_me
(2)  525/FFFFFFFFFFFF2E88 : 41F9 00A0 1C58      		lea	(z80_cpu+tblPWM),a0
(2)  526/FFFFFFFFFFFF2E8E : 43F8 B848           		lea	(RAM_GemaCache_PWM),a1
(2)  527/FFFFFFFFFFFF2E92 : 7E07                		moveq	#8-1,d7
(2)  528/FFFFFFFFFFFF2E94 : 6100 00A6           		bsr	.copy_me
(2)  529/FFFFFFFFFFFF2E98 :                     
(2)  530/FFFFFFFFFFFF2E98 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  531/FFFFFFFFFFFF2E9C : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  532/FFFFFFFFFFFF2EA2 : 47F8 B800           		lea	(RAM_GemaCache_PSG),a3
(2)  533/FFFFFFFFFFFF2EA6 : 7007                		moveq	#7,d0
(2)  534/FFFFFFFFFFFF2EA8 : 7216                		moveq	#SET_SNDVIEWY,d1
(2)  535/FFFFFFFFFFFF2EAA : 7E02                		moveq	#3-1,d7
(2)  536/FFFFFFFFFFFF2EAC : 6100 0102           		bsr	.show_table
(2)  537/FFFFFFFFFFFF2EB0 : 47F8 B80C           		lea	(RAM_GemaCache_PSGN),a3
(2)  538/FFFFFFFFFFFF2EB4 : 7013                		moveq	#7+12,d0
(2)  539/FFFFFFFFFFFF2EB6 : 7216                		moveq	#SET_SNDVIEWY,d1
(2)  540/FFFFFFFFFFFF2EB8 : 7E00                		moveq	#1-1,d7
(2)  541/FFFFFFFFFFFF2EBA : 6100 00F4           		bsr	.show_table
(2)  542/FFFFFFFFFFFF2EBE :                     
(2)  543/FFFFFFFFFFFF2EBE : 47F8 B810           		lea	(RAM_GemaCache_FM),a3
(2)  544/FFFFFFFFFFFF2EC2 : 7007                		moveq	#7,d0
(2)  545/FFFFFFFFFFFF2EC4 : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  546/FFFFFFFFFFFF2EC6 : 7E04                		moveq	#5-1,d7
(2)  547/FFFFFFFFFFFF2EC8 : 6100 009C           		bsr	.show_table_fm
(2)  548/FFFFFFFFFFFF2ECC : 7017                		moveq	#7+16,d0
(2)  549/FFFFFFFFFFFF2ECE : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  550/FFFFFFFFFFFF2ED0 : 6100 D20A           		bsr	sndLockZ80
(2)  551/FFFFFFFFFFFF2ED4 : 1E39 00A0 1CEB      		move.b	(z80_cpu+fmSpecial),d7
(2)  552/FFFFFFFFFFFF2EDA : 6100 D214           		bsr	sndUnlockZ80
(2)  553/FFFFFFFFFFFF2EDE : 4A07                		tst.b	d7
(2)  554/FFFFFFFFFFFF2EE0 : 670C                		beq.s	.no_spec
(2)  555/FFFFFFFFFFFF2EE2 : 41F9 FFFF 3400      		lea	(str_Speci),a0
(2)  556/FFFFFFFFFFFF2EE8 : 6100 E0F6           		bsr	Video_Print
(2)  557/FFFFFFFFFFFF2EEC : 6008                		bra.s	.b_sampl
(2)  558/FFFFFFFFFFFF2EEE :                     .no_spec:
(2)  559/FFFFFFFFFFFF2EEE : 47F8 B820           		lea	(RAM_GemaCache_FM3),a3
(2)  560/FFFFFFFFFFFF2EF2 : 7E00                		moveq	#1-1,d7
(2)  561/FFFFFFFFFFFF2EF4 : 6170                		bsr	.show_table_fm
(2)  562/FFFFFFFFFFFF2EF6 :                     .b_sampl:
(2)  563/FFFFFFFFFFFF2EF6 :                     
(2)  564/FFFFFFFFFFFF2EF6 : 701B                		moveq	#7+20,d0
(2)  565/FFFFFFFFFFFF2EF8 : 7217                		moveq	#SET_SNDVIEWY+1,d1
(2)  566/FFFFFFFFFFFF2EFA : 6100 D1E0           		bsr	sndLockZ80
(2)  567/FFFFFFFFFFFF2EFE : 1E39 00A0 0008      		move.b	(z80_cpu+8),d7
(2)  568/FFFFFFFFFFFF2F04 : 6100 D1EA           		bsr	sndUnlockZ80
(2)  569/FFFFFFFFFFFF2F08 : BE3C 00D9           		cmp.b	#$D9,d7
(2)  570/FFFFFFFFFFFF2F0C : 660C                		bne.s	.no_sampl
(2)  571/FFFFFFFFFFFF2F0E : 41F9 FFFF 3404      		lea	(str_Sampl),a0
(2)  572/FFFFFFFFFFFF2F14 : 6100 E0CA           		bsr	Video_Print
(2)  573/FFFFFFFFFFFF2F18 : 6008                		bra.s	.c_sampl
(2)  574/FFFFFFFFFFFF2F1A :                     .no_sampl:
(2)  575/FFFFFFFFFFFF2F1A : 47F8 B824           		lea	(RAM_GemaCache_FM6),a3
(2)  576/FFFFFFFFFFFF2F1E : 7E00                		moveq	#1-1,d7
(2)  577/FFFFFFFFFFFF2F20 : 6144                		bsr	.show_table_fm
(2)  578/FFFFFFFFFFFF2F22 :                     .c_sampl:
(2)  579/FFFFFFFFFFFF2F22 :                     
(2)  580/FFFFFFFFFFFF2F22 : 47F8 B828           		lea	(RAM_GemaCache_PCM),a3
(2)  581/FFFFFFFFFFFF2F26 : 7007                		moveq	#7,d0
(2)  582/FFFFFFFFFFFF2F28 : 7218                		moveq	#SET_SNDVIEWY+2,d1
(2)  583/FFFFFFFFFFFF2F2A : 7E07                		moveq	#8-1,d7
(2)  584/FFFFFFFFFFFF2F2C : 6100 0082           		bsr	.show_table
(2)  585/FFFFFFFFFFFF2F30 : 47F8 B848           		lea	(RAM_GemaCache_PWM),a3
(2)  586/FFFFFFFFFFFF2F34 : 7007                		moveq	#7,d0
(2)  587/FFFFFFFFFFFF2F36 : 7219                		moveq	#SET_SNDVIEWY+3,d1
(2)  588/FFFFFFFFFFFF2F38 : 7E07                		moveq	#8-1,d7
(2)  589/FFFFFFFFFFFF2F3A : 6074                		bra	.show_table
(2)  590/FFFFFFFFFFFF2F3C :                     
(2)  591/FFFFFFFFFFFF2F3C :                     ; ----------------------------------------------
(2)  592/FFFFFFFFFFFF2F3C :                     
(2)  593/FFFFFFFFFFFF2F3C :                     .copy_me:
(2)  594/FFFFFFFFFFFF2F3C : 7200                		moveq	#0,d1
(2)  595/FFFFFFFFFFFF2F3E : 6100 D19C           		bsr	sndLockZ80
(2)  596/FFFFFFFFFFFF2F42 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  597/FFFFFFFFFFFF2F46 : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  598/FFFFFFFFFFFF2F4A : 1010                		move.b	ztbl_Link(a0),d0
(2)  599/FFFFFFFFFFFF2F4C : 6100 D1A2           		bsr	sndUnlockZ80
(2)  600/FFFFFFFFFFFF2F50 : 8002                		or.b	d2,d0
(2)  601/FFFFFFFFFFFF2F52 : 6602                		bne.s	.link_ok
(2)  602/FFFFFFFFFFFF2F54 : 72FF                		moveq	#-1,d1
(2)  603/FFFFFFFFFFFF2F56 :                     .link_ok:
(2)  604/FFFFFFFFFFFF2F56 : 3281                		move.w	d1,(a1)
(2)  605/FFFFFFFFFFFF2F58 : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  606/FFFFFFFFFFFF2F5C : D2FC 0004           		adda	#4,a1
(2)  607/FFFFFFFFFFFF2F60 : 51CF FFDA           		dbf	d7,.copy_me
(2)  608/FFFFFFFFFFFF2F64 : 4E75                		rts
(2)  609/FFFFFFFFFFFF2F66 :                     
(2)  610/FFFFFFFFFFFF2F66 :                     ; ----------------------------------------------
(2)  611/FFFFFFFFFFFF2F66 :                     
(2)  612/FFFFFFFFFFFF2F66 :                     .show_table_fm:
(2)  613/FFFFFFFFFFFF2F66 : 41F9 FFFF 33B8      		lea	(strL_FmOnly),a0
(2)  614/FFFFFFFFFFFF2F6C : 7C00                		moveq	#0,d6
(2)  615/FFFFFFFFFFFF2F6E : 7A00                		moveq	#0,d5
(2)  616/FFFFFFFFFFFF2F70 : 3C13                		move.w	(a3),d6
(2)  617/FFFFFFFFFFFF2F72 : 6A06                		bpl.s	.is_fmgood
(2)  618/FFFFFFFFFFFF2F74 : 6100 E06A           		bsr	Video_Print
(2)  619/FFFFFFFFFFFF2F78 : 602A                		bra.s	.from_fmbad
(2)  620/FFFFFFFFFFFF2F7A :                     .is_fmgood:
(2)  621/FFFFFFFFFFFF2F7A : 3A06                		move.w	d6,d5
(2)  622/FFFFFFFFFFFF2F7C : D0FC 0004           		adda	#4,a0
(2)  623/FFFFFFFFFFFF2F80 : 0246 001F           		andi.w	#%11111,d6
(2)  624/FFFFFFFFFFFF2F84 : E34E                		lsl.w	#1,d6
(2)  625/FFFFFFFFFFFF2F86 : D0C6                		adda	d6,a0
(2)  626/FFFFFFFFFFFF2F88 : 6100 E056           		bsr	Video_Print
(2)  627/FFFFFFFFFFFF2F8C : 3800                		move.w	d0,d4
(2)  628/FFFFFFFFFFFF2F8E : 5440                		addq.w	#2,d0
(2)  629/FFFFFFFFFFFF2F90 : 0245 00E0           		andi.w	#%11100000,d5
(2)  630/FFFFFFFFFFFF2F94 : E84D                		lsr.w	#4,d5
(2)  631/FFFFFFFFFFFF2F96 : 41F9 FFFF 33EC      		lea	(strL_LazyVal),a0
(2)  632/FFFFFFFFFFFF2F9C : D0C5                		adda	d5,a0
(2)  633/FFFFFFFFFFFF2F9E : 6100 E040           		bsr	Video_Print
(2)  634/FFFFFFFFFFFF2FA2 : 3004                		move.w	d4,d0
(2)  635/FFFFFFFFFFFF2FA4 :                     .from_fmbad:
(2)  636/FFFFFFFFFFFF2FA4 :                     ; 		addq.w	#1,d1
(2)  637/FFFFFFFFFFFF2FA4 : 5840                		addq.w	#4,d0
(2)  638/FFFFFFFFFFFF2FA6 : D6FC 0004           		adda	#4,a3
(2)  639/FFFFFFFFFFFF2FAA : 51CF FFBA           		dbf	d7,.show_table_fm
(2)  640/FFFFFFFFFFFF2FAE : 4E75                		rts
(2)  641/FFFFFFFFFFFF2FB0 :                     
(2)  642/FFFFFFFFFFFF2FB0 :                     .show_table:
(2)  643/FFFFFFFFFFFF2FB0 : 41F9 FFFF 31D4      		lea	(strL_NoteList),a0
(2)  644/FFFFFFFFFFFF2FB6 : 7C00                		moveq	#0,d6
(2)  645/FFFFFFFFFFFF2FB8 : 3C13                		move.w	(a3),d6
(2)  646/FFFFFFFFFFFF2FBA : 6B08                		bmi.s	.val_bad
(2)  647/FFFFFFFFFFFF2FBC : D0FC 0004           		adda	#4,a0
(2)  648/FFFFFFFFFFFF2FC0 : DC46                		add.w	d6,d6
(2)  649/FFFFFFFFFFFF2FC2 : D0C6                		adda	d6,a0
(2)  650/FFFFFFFFFFFF2FC4 :                     .val_bad:
(2)  651/FFFFFFFFFFFF2FC4 : 6100 E01A           		bsr	Video_Print
(2)  652/FFFFFFFFFFFF2FC8 :                     ; 		addq.w	#1,d1
(2)  653/FFFFFFFFFFFF2FC8 : 5840                		addq.w	#4,d0
(2)  654/FFFFFFFFFFFF2FCA : D6FC 0004           		adda	#4,a3
(2)  655/FFFFFFFFFFFF2FCE : 51CF FFE0           		dbf	d7,.show_table
(2)  656/FFFFFFFFFFFF2FD2 : 4E75                		rts
(2)  657/FFFFFFFFFFFF2FD4 :                     
(2)  658/FFFFFFFFFFFF2FD4 :                     ; ====================================================================
(2)  659/FFFFFFFFFFFF2FD4 :                     ; ------------------------------------------------------
(2)  660/FFFFFFFFFFFF2FD4 :                     ; DATA asset locations
(2)  661/FFFFFFFFFFFF2FD4 :                     ; ------------------------------------------------------
(2)  662/FFFFFFFFFFFF2FD4 :                     
(2)  663/FFFFFFFFFFFF2FD4 :                     file_scrn1_main:
(2)  664/FFFFFFFFFFFF2FD4 : 0005 5800           		dc.l DATA_BANK0
(2)  665/FFFFFFFFFFFF2FD8 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2FDE : 494E 2E42 494E 00 
(2)  666/FFFFFFFFFFFF2FE5 :                     		align 2
(2)  667/FFFFFFFFFFFF2FE6 :                     
(2)  668/FFFFFFFFFFFF2FE6 :                     ; ====================================================================
(2)  669/FFFFFFFFFFFF2FE6 :                     ; ------------------------------------------------------
(2)  670/FFFFFFFFFFFF2FE6 :                     ; Objects
(2)  671/FFFFFFFFFFFF2FE6 :                     ; ------------------------------------------------------
(2)  672/FFFFFFFFFFFF2FE6 :                     
(2)  673/FFFFFFFFFFFF2FE6 :                     ; ====================================================================
(2)  674/FFFFFFFFFFFF2FE6 :                     ; ------------------------------------------------------
(2)  675/FFFFFFFFFFFF2FE6 :                     ; Objects
(2)  676/FFFFFFFFFFFF2FE6 :                     ; ------------------------------------------------------
(2)  677/FFFFFFFFFFFF2FE6 :                     
(2)  678/FFFFFFFFFFFF2FE6 :                     ; --------------------------------------------------
(2)  679/FFFFFFFFFFFF2FE6 :                     ; Sisi
(2)  680/FFFFFFFFFFFF2FE6 :                     ; --------------------------------------------------
(2)  681/FFFFFFFFFFFF2FE6 :                     
(2)  682/FFFFFFFFFFFF2FE6 :                     obj_Fairy:
(2)  683/FFFFFFFFFFFF2FE6 : 7000                		moveq	#0,d0
(2)  684/FFFFFFFFFFFF2FE8 : 102E 001C           		move.b	obj_index(a6),d0
(2)  685/FFFFFFFFFFFF2FEC : D040                		add.w	d0,d0
(2)  686/FFFFFFFFFFFF2FEE : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  687/FFFFFFFFFFFF2FF2 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  688/FFFFFFFFFFFF2FF6 :                     ; ----------------------------------------------
(2)  689/FFFFFFFFFFFF2FF6 : 0004                .list:		dc.w .init-.list
(2)  690/FFFFFFFFFFFF2FF8 : 0038                		dc.w .main-.list
(2)  691/FFFFFFFFFFFF2FFA :                     ; ----------------------------------------------
(2)  692/FFFFFFFFFFFF2FFA :                     .init:
(2)  693/FFFFFFFFFFFF2FFA : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  694/FFFFFFFFFFFF3000 : 426E 0020           		clr.w	obj_frame(a6)
(2)  695/FFFFFFFFFFFF3004 : 6100 F6DA           		bsr	object_ResetAnim
(2)  696/FFFFFFFFFFFF3008 :                     
(2)  697/FFFFFFFFFFFF3008 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  698/FFFFFFFFFFFF300C : 3C07                		move.w	d7,d6
(2)  699/FFFFFFFFFFFF300E : E54E                		lsl.w	#2,d6
(2)  700/FFFFFFFFFFFF3010 : 41FA 00D8           		lea	.fixd_pos(pc),a0
(2)  701/FFFFFFFFFFFF3014 : 43EE 0028           		lea	obj_ram(a6),a1
(2)  702/FFFFFFFFFFFF3018 : D0C6                		adda	d6,a0
(2)  703/FFFFFFFFFFFF301A : 32D8                		move.w	(a0)+,(a1)+
(2)  704/FFFFFFFFFFFF301C : 32D8                		move.w	(a0)+,(a1)+
(2)  705/FFFFFFFFFFFF301E :                     
(2)  706/FFFFFFFFFFFF301E : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  707/FFFFFFFFFFFF3022 : CEFC 002A           		mulu.w	#42,d7
(2)  708/FFFFFFFFFFFF3026 : E94F                		lsl.w	#4,d7
(2)  709/FFFFFFFFFFFF3028 : 4447                		neg.w	d7
(2)  710/FFFFFFFFFFFF302A : 3347 0004           		move.w	d7,4(a1)
(2)  711/FFFFFFFFFFFF302E :                     
(2)  712/FFFFFFFFFFFF302E :                     ; ----------------------------------------------
(2)  713/FFFFFFFFFFFF302E :                     .main:
(2)  714/FFFFFFFFFFFF302E : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  715/FFFFFFFFFFFF3032 : 49F8 B872           		lea	(RAM_GemaStatus).w,a4
(2)  716/FFFFFFFFFFFF3036 :                     
(2)  717/FFFFFFFFFFFF3036 :                     	; a5
(2)  718/FFFFFFFFFFFF3036 :                     	; 0 - X base
(2)  719/FFFFFFFFFFFF3036 :                     	; 2 - Y base
(2)  720/FFFFFFFFFFFF3036 :                     	; 4 - Tan
(2)  721/FFFFFFFFFFFF3036 :                     
(2)  722/FFFFFFFFFFFF3036 : 7600                		moveq	#0,d3
(2)  723/FFFFFFFFFFFF3038 : 162E 001D           		move.b	obj_subid(a6),d3
(2)  724/FFFFFFFFFFFF303C : D643                		add.w	d3,d3
(2)  725/FFFFFFFFFFFF303E : D8C3                		adda	d3,a4
(2)  726/FFFFFFFFFFFF3040 :                     ; 		lsl.w	#3,d3
(2)  727/FFFFFFFFFFFF3040 : 3415                		move.w	(a5),d2
(2)  728/FFFFFFFFFFFF3042 : 362D 0002           		move.w	2(a5),d3
(2)  729/FFFFFFFFFFFF3046 : 383C 0001           		move.w	#1,d4			; Multiply
(2)  730/FFFFFFFFFFFF304A : 082C 0007 0001      		btst	#7,1(a4)
(2)  731/FFFFFFFFFFFF3050 : 6704                		beq.s	.not_enbls
(2)  732/FFFFFFFFFFFF3052 : 383C 0004           		move.w	#4,d4
(2)  733/FFFFFFFFFFFF3056 :                     .not_enbls:
(2)  734/FFFFFFFFFFFF3056 : 302D 0004           		move.w	4(a5),d0
(2)  735/FFFFFFFFFFFF305A :                     ; 		add.w	d3,d0
(2)  736/FFFFFFFFFFFF305A : E848                		lsr.w	#4,d0
(2)  737/FFFFFFFFFFFF305C : 6100 F128           		bsr	System_SineWave
(2)  738/FFFFFFFFFFFF3060 : C3C4                		muls.w	d4,d1
(2)  739/FFFFFFFFFFFF3062 : E041                		asr.w	#8,d1
(2)  740/FFFFFFFFFFFF3064 : 9441                		sub.w	d1,d2
(2)  741/FFFFFFFFFFFF3066 : 302D 0004           		move.w	4(a5),d0
(2)  742/FFFFFFFFFFFF306A :                     ; 		add.w	d3,d0
(2)  743/FFFFFFFFFFFF306A : E848                		lsr.w	#4,d0
(2)  744/FFFFFFFFFFFF306C : 6100 F10E           		bsr	System_SineWave_Cos
(2)  745/FFFFFFFFFFFF3070 : C3C4                		muls.w	d4,d1
(2)  746/FFFFFFFFFFFF3072 : E041                		asr.w	#8,d1
(2)  747/FFFFFFFFFFFF3074 : 9641                		sub.w	d1,d3
(2)  748/FFFFFFFFFFFF3076 :                     
(2)  749/FFFFFFFFFFFF3076 : 383C 0040           		move.w	#$40,d4	; RAM value
(2)  750/FFFFFFFFFFFF307A : 082C 0007 0001      		btst	#7,1(a4)
(2)  751/FFFFFFFFFFFF3080 : 6702                		beq.s	.not_enbl
(2)  752/FFFFFFFFFFFF3082 : D844                		add.w	d4,d4
(2)  753/FFFFFFFFFFFF3084 :                     .not_enbl:
(2)  754/FFFFFFFFFFFF3084 : D96D 0004           		addi.w	d4,4(a5)
(2)  755/FFFFFFFFFFFF3088 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  756/FFFFFFFFFFFF308C : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  757/FFFFFFFFFFFF3090 :                     
(2)  758/FFFFFFFFFFFF3090 :                     .not_mouse:
(2)  759/FFFFFFFFFFFF3090 : 41FA 002E           		lea	.anim_data(pc),a0
(2)  760/FFFFFFFFFFFF3094 : 6100 F682           		bsr	object_Animate
(2)  761/FFFFFFFFFFFF3098 :                     
(2)  762/FFFFFFFFFFFF3098 : 7000                		moveq	#0,d0
(2)  763/FFFFFFFFFFFF309A : 102E 001D           		move.b	obj_subid(a6),d0
(2)  764/FFFFFFFFFFFF309E : E748                		lsl.w	#3,d0
(2)  765/FFFFFFFFFFFF30A0 : 41FB 002E           		lea	.sub_ids(pc,d0.w),a0
(2)  766/FFFFFFFFFFFF30A4 : 3428 0004           		move.w	4(a0),d2
(2)  767/FFFFFFFFFFFF30A8 : 2250                		move.l	(a0),a1
(2)  768/FFFFFFFFFFFF30AA : 207C 0000 0000      		move.l	#0,a0
(2)  769/FFFFFFFFFFFF30B0 : 302E 0004           		move.w	obj_x(a6),d0
(2)  770/FFFFFFFFFFFF30B4 : 322E 0008           		move.w	obj_y(a6),d1
(2)  771/FFFFFFFFFFFF30B8 : 362E 0020           		move.w	obj_frame(a6),d3
(2)  772/FFFFFFFFFFFF30BC : 6000 E29A           		bra	Video_MakeSprMap
(2)  773/FFFFFFFFFFFF30C0 :                     
(2)  774/FFFFFFFFFFFF30C0 :                     ; ----------------------------------------------
(2)  775/FFFFFFFFFFFF30C0 :                     
(2)  776/FFFFFFFFFFFF30C0 :                     .anim_data:
(2)  777/FFFFFFFFFFFF30C0 : 0002                		dc.w .anim_00-.anim_data
(2)  778/FFFFFFFFFFFF30C2 :                     .anim_00:
(2)  779/FFFFFFFFFFFF30C2 : 0008                		dc.w 8
(2)  780/FFFFFFFFFFFF30C4 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF30CA : 0001             
(2)  781/FFFFFFFFFFFF30CC : FFFE                		dc.w -2
(2)  782/FFFFFFFFFFFF30CE :                     		align 2
(2)  783/FFFFFFFFFFFF30D0 :                     .sub_ids:
(2)  784/FFFFFFFFFFFF30D0 : 0022 F878           		dc.l objMap_Dodo
(2)  785/FFFFFFFFFFFF30D4 : 0002 0000           		dc.w setVram_Dodo,0
(2)  786/FFFFFFFFFFFF30D8 : 0022 F89C           		dc.l objMap_Mimi
(2)  787/FFFFFFFFFFFF30DC : 0032 0000           		dc.w setVram_Mimi,0
(2)  788/FFFFFFFFFFFF30E0 : 0022 F8C0           		dc.l objMap_Fifi
(2)  789/FFFFFFFFFFFF30E4 : 0062 0000           		dc.w setVram_Fifi,0
(2)  790/FFFFFFFFFFFF30E8 :                     		align 2
(2)  791/FFFFFFFFFFFF30EA :                     
(2)  792/FFFFFFFFFFFF30EA :                     .fixd_pos:
(2)  793/FFFFFFFFFFFF30EA : 00B8 0040           		dc.w $B8,$40
(2)  794/FFFFFFFFFFFF30EE : 00DC 0040           		dc.w $B8+$24,$40
(2)  795/FFFFFFFFFFFF30F2 : 0100 0040           		dc.w $B8+$48,$40
(2)  796/FFFFFFFFFFFF30F6 :                     		align 2
(2)  797/FFFFFFFFFFFF30F8 :                     
(2)  798/FFFFFFFFFFFF30F8 :                     ; ====================================================================
(2)  799/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  800/FFFFFFFFFFFF30F8 :                     ; Subroutines
(2)  801/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  802/FFFFFFFFFFFF30F8 :                     
(2)  803/FFFFFFFFFFFF30F8 :                     ; ====================================================================
(2)  804/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  805/FFFFFFFFFFFF30F8 :                     ; Includes for this screen
(2)  806/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  807/FFFFFFFFFFFF30F8 :                     
(2)  808/FFFFFFFFFFFF30F8 :                     ; ====================================================================
(2)  809/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  810/FFFFFFFFFFFF30F8 :                     ; Custom VBlank
(2)  811/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  812/FFFFFFFFFFFF30F8 :                     
(2)  813/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  814/FFFFFFFFFFFF30F8 :                     ; Custom HBlank
(2)  815/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  816/FFFFFFFFFFFF30F8 :                     
(2)  817/FFFFFFFFFFFF30F8 :                     ; ====================================================================
(2)  818/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  819/FFFFFFFFFFFF30F8 :                     ; Small data section
(2)  820/FFFFFFFFFFFF30F8 :                     ; ------------------------------------------------------
(2)  821/FFFFFFFFFFFF30F8 :                     
(2)  822/FFFFFFFFFFFF30F8 :                     ArtList_Stuff:
(2)  823/FFFFFFFFFFFF30F8 : 0003                		dc.w 3
(2)  824/FFFFFFFFFFFF30FA : 0022 C994           		dc.l Art_FairyDodo
(2)  825/FFFFFFFFFFFF30FE : 0040                		dc.w cell_vram(setVram_Dodo)
(2)  826/FFFFFFFFFFFF3100 : 0600                		dc.w cell_vram($30)
(2)  827/FFFFFFFFFFFF3102 : 0022 CF94           		dc.l Art_FairyMimi
(2)  828/FFFFFFFFFFFF3106 : 0640                		dc.w cell_vram(setVram_Mimi)
(2)  829/FFFFFFFFFFFF3108 : 0600                		dc.w cell_vram($30)
(2)  830/FFFFFFFFFFFF310A : 0022 D594           		dc.l Art_FairyFifi
(2)  831/FFFFFFFFFFFF310E : 0C40                		dc.w cell_vram(setVram_Fifi)
(2)  832/FFFFFFFFFFFF3110 : 0600                		dc.w cell_vram($30)
(2)  833/FFFFFFFFFFFF3112 :                     
(2)  834/FFFFFFFFFFFF3112 :                     ; str_Cursor:	dc.b "-->",0
(2)  835/FFFFFFFFFFFF3112 :                     ; 		align 2
(2)  836/FFFFFFFFFFFF3112 :                     ; str_CursorDel:	dc.b "   ",0
(2)  837/FFFFFFFFFFFF3112 :                     ; 		align 2
(2)  838/FFFFFFFFFFFF3112 :                     
(2)  839/FFFFFFFFFFFF3112 :                     str_TesterTitle:
(2)  840/FFFFFFFFFFFF3112 : 4745 4D41 2053      		dc.b "GEMA Sound driver  V1.x(dev)",0
         FFFFFFFFFFFF3118 : 6F75 6E64 2064 
         FFFFFFFFFFFF311E : 7269 7665 7220 
         FFFFFFFFFFFF3124 : 2056 312E 7828 
         FFFFFFFFFFFF312A : 6465 7629 00       
(2)  841/FFFFFFFFFFFF312F :                     		align 2
(2)  842/FFFFFFFFFFFF3130 :                     str_TesterInfo:
(2)  843/FFFFFFFFFFFF3130 :                     ; 		dc.b "Sound data: 00000000",$0A
(2)  844/FFFFFFFFFFFF3130 :                     ; 		dc.b $0A
(2)  845/FFFFFFFFFFFF3130 :                     ; 		dc.b $0A
(2)  846/FFFFFFFFFFFF3130 : 2053 6571 2320      		dc.b " Seq# Blk# Indx"
         FFFFFFFFFFFF3136 : 426C 6B23 2049 
         FFFFFFFFFFFF313C : 6E64 78          
(2)  847/FFFFFFFFFFFF313F : 00                  		dc.b 0
(2)  848/FFFFFFFFFFFF3140 :                     		align 2
(2)  849/FFFFFFFFFFFF3142 :                     str_Instruc:
(2)  850/FFFFFFFFFFFF3142 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
         FFFFFFFFFFFF3148 : 6571 2E20 4E75 
         FFFFFFFFFFFF314E : 6D23 2020 2058 
         FFFFFFFFFFFF3154 : 5920 2D20 5472 
         FFFFFFFFFFFF315A : 6163 6B20 696E 
         FFFFFFFFFFFF3160 : 6465 780A          
(2)  851/FFFFFFFFFFFF3164 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
         FFFFFFFFFFFF316A : 6571 2E20 426C 
         FFFFFFFFFFFF3170 : 6B23 0A          
(2)  852/FFFFFFFFFFFF3173 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
         FFFFFFFFFFFF3179 : 544F 5020 414C 
         FFFFFFFFFFFF317F : 4C0A             
(2)  853/FFFFFFFFFFFF3181 : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
         FFFFFFFFFFFF3187 : 544F 5020 5365 
         FFFFFFFFFFFF318D : 712E 0A          
(2)  854/FFFFFFFFFFFF3190 : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill",$0A,$0A
         FFFFFFFFFFFF3196 : 4C41 5920 5365 
         FFFFFFFFFFFF319C : 712E 2020 2020 
         FFFFFFFFFFFF31A2 : 5A20 2D20 504C 
         FFFFFFFFFFFF31A8 : 4159 2061 7574 
         FFFFFFFFFFFF31AE : 6F2D 6669 6C6C 
         FFFFFFFFFFFF31B4 : 0A0A             
(2)  855/FFFFFFFFFFFF31B6 : 5354 4152 5420      		dc.b "START - Exit"
         FFFFFFFFFFFF31BC : 2D20 4578 6974    
(2)  856/FFFFFFFFFFFF31C2 : 00                  		dc.b 0
(2)  857/FFFFFFFFFFFF31C3 :                     		align 2
(2)  858/FFFFFFFFFFFF31C4 :                     
(2)  859/FFFFFFFFFFFF31C4 :                     str_VmInfo:
(2)  860/FFFFFFFFFFFF31C4 : 5053 470A           		dc.b "PSG",$0A
(2)  861/FFFFFFFFFFFF31C8 : 464D 0A             		dc.b "FM",$0A
(2)  862/FFFFFFFFFFFF31CB : 5043 4D0A           		dc.b "PCM",$0A
(2)  863/FFFFFFFFFFFF31CF : 5057 4D             		dc.b "PWM"
(2)  864/FFFFFFFFFFFF31D2 : 00                  		dc.b 0
(2)  865/FFFFFFFFFFFF31D3 :                     		align 2
(2)  866/FFFFFFFFFFFF31D4 :                     
(2)  867/FFFFFFFFFFFF31D4 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  868/FFFFFFFFFFFF31D8 : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
         FFFFFFFFFFFF31DE : 3000 442D 3000 
         FFFFFFFFFFFF31E4 : 4423 3000 452D 
         FFFFFFFFFFFF31EA : 3000 462D 3000 
         FFFFFFFFFFFF31F0 : 4623 3000 472D 
         FFFFFFFFFFFF31F6 : 3000 4723 3000 
         FFFFFFFFFFFF31FC : 412D 3000 4123 
         FFFFFFFFFFFF3202 : 3000 422D 3000    
(2)  869/FFFFFFFFFFFF3208 : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
         FFFFFFFFFFFF320E : 3100 442D 3100 
         FFFFFFFFFFFF3214 : 4423 3100 452D 
         FFFFFFFFFFFF321A : 3100 462D 3100 
         FFFFFFFFFFFF3220 : 4623 3100 472D 
         FFFFFFFFFFFF3226 : 3100 4723 3100 
         FFFFFFFFFFFF322C : 412D 3100 4123 
         FFFFFFFFFFFF3232 : 3100 422D 3100    
(2)  870/FFFFFFFFFFFF3238 : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
         FFFFFFFFFFFF323E : 3200 442D 3200 
         FFFFFFFFFFFF3244 : 4423 3200 452D 
         FFFFFFFFFFFF324A : 3200 462D 3200 
         FFFFFFFFFFFF3250 : 4623 3200 472D 
         FFFFFFFFFFFF3256 : 3200 4723 3200 
         FFFFFFFFFFFF325C : 412D 3200 4123 
         FFFFFFFFFFFF3262 : 3200 422D 3200    
(2)  871/FFFFFFFFFFFF3268 : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
         FFFFFFFFFFFF326E : 3300 442D 3300 
         FFFFFFFFFFFF3274 : 4423 3300 452D 
         FFFFFFFFFFFF327A : 3300 462D 3300 
         FFFFFFFFFFFF3280 : 4623 3300 472D 
         FFFFFFFFFFFF3286 : 3300 4723 3300 
         FFFFFFFFFFFF328C : 412D 3300 4123 
         FFFFFFFFFFFF3292 : 3300 422D 3300    
(2)  872/FFFFFFFFFFFF3298 : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
         FFFFFFFFFFFF329E : 3400 442D 3400 
         FFFFFFFFFFFF32A4 : 4423 3400 452D 
         FFFFFFFFFFFF32AA : 3400 462D 3400 
         FFFFFFFFFFFF32B0 : 4623 3400 472D 
         FFFFFFFFFFFF32B6 : 3400 4723 3400 
         FFFFFFFFFFFF32BC : 412D 3400 4123 
         FFFFFFFFFFFF32C2 : 3400 422D 3400    
(2)  873/FFFFFFFFFFFF32C8 : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
         FFFFFFFFFFFF32CE : 3500 442D 3500 
         FFFFFFFFFFFF32D4 : 4423 3500 452D 
         FFFFFFFFFFFF32DA : 3500 462D 3500 
         FFFFFFFFFFFF32E0 : 4623 3500 472D 
         FFFFFFFFFFFF32E6 : 3500 4723 3500 
         FFFFFFFFFFFF32EC : 412D 3500 4123 
         FFFFFFFFFFFF32F2 : 3500 422D 3500    
(2)  874/FFFFFFFFFFFF32F8 : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
         FFFFFFFFFFFF32FE : 3600 442D 3600 
         FFFFFFFFFFFF3304 : 4423 3600 452D 
         FFFFFFFFFFFF330A : 3600 462D 3600 
         FFFFFFFFFFFF3310 : 4623 3600 472D 
         FFFFFFFFFFFF3316 : 3600 4723 3600 
         FFFFFFFFFFFF331C : 412D 3600 4123 
         FFFFFFFFFFFF3322 : 3600 422D 3600    
(2)  875/FFFFFFFFFFFF3328 : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
         FFFFFFFFFFFF332E : 3700 442D 3700 
         FFFFFFFFFFFF3334 : 4423 3700 452D 
         FFFFFFFFFFFF333A : 3700 462D 3700 
         FFFFFFFFFFFF3340 : 4623 3700 472D 
         FFFFFFFFFFFF3346 : 3700 4723 3700 
         FFFFFFFFFFFF334C : 412D 3700 4123 
         FFFFFFFFFFFF3352 : 3700 422D 3700    
(2)  876/FFFFFFFFFFFF3358 : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
         FFFFFFFFFFFF335E : 3800 442D 3800 
         FFFFFFFFFFFF3364 : 4423 3800 452D 
         FFFFFFFFFFFF336A : 3800 462D 3800 
         FFFFFFFFFFFF3370 : 4623 3800 472D 
         FFFFFFFFFFFF3376 : 3800 4723 3800 
         FFFFFFFFFFFF337C : 412D 3800 4123 
         FFFFFFFFFFFF3382 : 3800 422D 3800    
(2)  877/FFFFFFFFFFFF3388 : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
         FFFFFFFFFFFF338E : 3900 442D 3900 
         FFFFFFFFFFFF3394 : 4423 3900 452D 
         FFFFFFFFFFFF339A : 3900 462D 3900 
         FFFFFFFFFFFF33A0 : 4623 3900 472D 
         FFFFFFFFFFFF33A6 : 3900 4723 3900 
         FFFFFFFFFFFF33AC : 412D 3900 4123 
         FFFFFFFFFFFF33B2 : 3900 422D 3900    
(2)  878/FFFFFFFFFFFF33B8 : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  879/FFFFFFFFFFFF33BC : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
         FFFFFFFFFFFF33C2 : 2000 442D 2000 
         FFFFFFFFFFFF33C8 : 4423 2000 452D 
         FFFFFFFFFFFF33CE : 2000 462D 2000 
         FFFFFFFFFFFF33D4 : 4623 2000 472D 
         FFFFFFFFFFFF33DA : 2000 4723 2000 
         FFFFFFFFFFFF33E0 : 412D 2000 4123 
         FFFFFFFFFFFF33E6 : 2000 422D 2000    
(2)  880/FFFFFFFFFFFF33EC : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
         FFFFFFFFFFFF33F2 : 3300 3400 3500 
         FFFFFFFFFFFF33F8 : 3600 3700 3800 
         FFFFFFFFFFFF33FE : 3900             
(2)  881/FFFFFFFFFFFF3400 :                     
(2)  882/FFFFFFFFFFFF3400 : 7370 6300           str_Speci:	dc.b "spc",0
(2)  883/FFFFFFFFFFFF3404 : 7761 7600           str_Sampl:	dc.b "wav",0
(2)  884/FFFFFFFFFFFF3408 :                     
(2)  885/FFFFFFFFFFFF3408 :                     str_ShowVars:
(2)  886/FFFFFFFFFFFF3408 : 80FF B86F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  887/FFFFFFFFFFFF340C : 2020 20             		dc.b "   "
(2)  888/FFFFFFFFFFFF340F : 80FF B871           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  889/FFFFFFFFFFFF3413 : 2020 20             		dc.b "   "
(2)  890/FFFFFFFFFFFF3416 : 80FF B86D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  891/FFFFFFFFFFFF341A : 00                  		dc.b 0
(2)  892/FFFFFFFFFFFF341B :                     		align 2
(2)  893/FFFFFFFFFFFF341C :                     str_Info:
(2)  894/FFFFFFFFFFFF341C : 83FF E858           		dc.l pstr_mem(3,RAM_Framecount)
(2)  895/FFFFFFFFFFFF3420 : 00                  		dc.b 0
(2)  896/FFFFFFFFFFFF3421 :                     		align 2
(2)  897/FFFFFFFFFFFF3422 :                     
(1)   20/FFFFFFFFFFFF3422 :                     mcscrn_e:
(1)   20/   55022 :                                     dephase
(1)   20/   55022 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   20/   55022 :                                     align $800
(1)   20/   55800 :                     ; Md_Screen00_e:
(1)   20/   55800 : =$55800              MD_SCREEN07_E label *
(1)   20/   55800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   21/   55800 :                     
     378/   55800 :                     
     379/   55800 :                     ; ====================================================================
     380/   55800 :                     ; ----------------------------------------------------------------
     381/   55800 :                     ; DATA BLOCK (banks)
     382/   55800 :                     ; ----------------------------------------------------------------
     383/   55800 :                     
     384/   55800 :                     		include "game/incl_data.asm"
(1)    1/   55800 :                     ; ===========================================================================
(1)    2/   55800 :                     ; ----------------------------------------------------------------
(1)    3/   55800 :                     ; 68K DATA BANKS
(1)    4/   55800 :                     ;
(1)    5/   55800 :                     ; Size limits:
(1)    6/   55800 :                     ;  $40000 for SegaCD's Word-RAM **compatible to all**
(1)    7/   55800 :                     ;  $80000 for Sega-Mapper(SSF2) bank
(1)    8/   55800 :                     ; $100000 for 32X Cartridge
(1)    9/   55800 :                     ; All 4MB for Genesis/Pico
(1)   10/   55800 :                     ;
(1)   11/   55800 :                     ; SCD/CD32:
(1)   12/   55800 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/   55800 :                     ;
(1)   14/   55800 :                     ; MACRO Usage:
(1)   15/   55800 :                     ;	data_dset LABEL_START
(1)   16/   55800 :                     ;	; your data
(1)   17/   55800 :                     ;	data_dend LABEL_END
(1)   18/   55800 :                     ; ----------------------------------------------------------------
(1)   19/   55800 :                     ; - For including VDP graphics:
(1)   20/   55800 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/   55800 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/   55800 :                     ;
(1)   23/   55800 :                     ; - For the SVDP graphics:
(1)   24/   55800 :                     ;
(1)   25/   55800 :                     ; 	mars_VramStart Label_test			; Start label
(1)   26/   55800 :                     ; example_0:
(1)   27/   55800 :                     ; 	include "your_svdp_graphics.bin"
(1)   28/   55800 :                     ; 	align 4						; Don't forget align by 4
(1)   29/   55800 :                     ; example_1:
(1)   30/   55800 :                     ; 	include "more_svdp.bin"
(1)   31/   55800 :                     ;	align 4
(1)   32/   55800 :                     ;	mars_VramEnd Label_end				; End label
(1)   33/   55800 :                     ; ----------------------------------------------------------------
(1)   34/   55800 :                     
(1)   35/   55800 :                     ; --------------------------------------------------------
(1)   36/   55800 :                     ; EXAMPLE INCLUDE
(1)   37/   55800 :                     ; --------------------------------------------------------
(1)   38/   55800 :                     ; 	data_dset DATA_BANKEXMPL
(1)   39/   55800 :                     ; 	; ------------------------------------------------
(1)   40/   55800 :                     ; 		include "your_data.asm"		; GEMA: Track data
(1)   41/   55800 :                     ; 		include "etc_stuff.asm"
(1)   42/   55800 :                     ; 	; ------------------------------------------------
(1)   43/   55800 :                     ; 	data_dend DATA_BANKEXMPL_e
(1)   44/   55800 :                     
(1)   45/   55800 :                     ; ============================================================
(1)   46/   55800 :                     ; --------------------------------------------------------
(1)   47/   55800 :                     ; MAIN bank
(1)   48/   55800 :                     ; --------------------------------------------------------
(1)   49/   55800 :                     
(1)   50/   55800 : (MACRO)              	data_dset DATA_BANK0
(1)   50/   55800 :                                     align $800
(1)   50/   55800 :                     ; MCD_DBANK0:
(1)   50/   55800 : =$55800              DATA_BANK0 label *
(1)   50/  200000 :                                     phase sysmcd_wram
(1)   50/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   51/  200000 :                     	; ------------------------------------------------
(1)   52/  200000 :                     		include "sound/tracks.asm"		; GEMA user sound data
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; -------------------------------------------------------------------
(2)    3/  200000 :                     ; GEMA/Nikona Track data
(2)    4/  200000 :                     ; -------------------------------------------------------------------
(2)    5/  200000 :                     
(2)    6/  200000 :                     MainGemaSeqList:
(2)    7/  200000 : (MACRO)              		gemaTrk 1,3,gtrk_Test
(2)    7/  200000 : 8320 0004                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST&$FFFFFF)
(2)    8/  200004 :                     ; ----------------------------------------------------
(2)    9/  200004 :                     gtrk_Test:
(2)   10/  200004 : (MACRO)              		gemaHead .blk,.pat,.ins,16
(2)   10/  200004 : 0010                        dc.w 16
(2)   10/  200006 : 0020 0012                   dc.l .BLK
(2)   10/  20000A : 0020 0023                   dc.l .PAT
(2)   10/  20000E : 0020 7BC2                   dc.l .INS
(2)   11/  200012 :                     .blk:		binclude "sound/tracks/box_blk.bin"
(2)   12/  200023 :                     .pat:		binclude "sound/tracks/box_patt.bin"
(2)   13/  207BC2 :                     .ins:
(2)   14/  207BC2 : (MACRO)              		gInsFm -24,FmIns_Organ_drawbar
(2)   14/  207BC2 : A0E8 2080                   dc.b $A0,-24,((FMINS_ORGAN_DRAWBAR>>16)&$FF),((FMINS_ORGAN_DRAWBAR>>8)&$FF)
(2)   14/  207BC6 : 0A00 0000                   dc.b FMINS_ORGAN_DRAWBAR&$FF,$00,$00,$00
(2)   15/  207BCA : (MACRO)              		gInsNull
(2)   15/  207BCA : 0000 0000                   dc.b $00,$00,$00,$00
(2)   15/  207BCE : 0000 0000                   dc.b $00,$00,$00,$00
(2)   16/  207BD2 : (MACRO)              		gInsPcm +24,PcmIns_Kick,0
(2)   16/  207BD2 : D018 02A8                   dc.b $D0|0,+24,((PCMINS_KICK>>16)&$FF),((PCMINS_KICK>>8)&$FF)
(2)   16/  207BD6 : 9800 0000                   dc.b PCMINS_KICK&$FF,0,0,0
(2)   17/  207BDA : (MACRO)              		gInsNull
(2)   17/  207BDA : 0000 0000                   dc.b $00,$00,$00,$00
(2)   17/  207BDE : 0000 0000                   dc.b $00,$00,$00,$00
(2)   18/  207BE2 : (MACRO)              		gInsPcm +24,PcmIns_BBoxHats,0
(2)   18/  207BE2 : D018 02A0                   dc.b $D0|0,+24,((PCMINS_BBOXHATS>>16)&$FF),((PCMINS_BBOXHATS>>8)&$FF)
(2)   18/  207BE6 : 6C00 0000                   dc.b PCMINS_BBOXHATS&$FF,0,0,0
(2)   19/  207BEA : (MACRO)              		gInsPcm +24,PcmIns_BBoxHats,0
(2)   19/  207BEA : D018 02A0                   dc.b $D0|0,+24,((PCMINS_BBOXHATS>>16)&$FF),((PCMINS_BBOXHATS>>8)&$FF)
(2)   19/  207BEE : 6C00 0000                   dc.b PCMINS_BBOXHATS&$FF,0,0,0
(2)   20/  207BF2 : (MACRO)              		gInsNull
(2)   20/  207BF2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   20/  207BF6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   21/  207BFA : (MACRO)              		gInsNull
(2)   21/  207BFA : 0000 0000                   dc.b $00,$00,$00,$00
(2)   21/  207BFE : 0000 0000                   dc.b $00,$00,$00,$00
(2)   22/  207C02 : (MACRO)              		gInsPcm +24,PcmIns_BBoxHats,0
(2)   22/  207C02 : D018 02A0                   dc.b $D0|0,+24,((PCMINS_BBOXHATS>>16)&$FF),((PCMINS_BBOXHATS>>8)&$FF)
(2)   22/  207C06 : 6C00 0000                   dc.b PCMINS_BBOXHATS&$FF,0,0,0
(2)   23/  207C0A : (MACRO)              		gInsPcm +24,PcmIns_BBoxSnare,0
(2)   23/  207C0A : D018 02B0                   dc.b $D0|0,+24,((PCMINS_BBOXSNARE>>16)&$FF),((PCMINS_BBOXSNARE>>8)&$FF)
(2)   23/  207C0E : 1400 0000                   dc.b PCMINS_BBOXSNARE&$FF,0,0,0
(2)   24/  207C12 : (MACRO)              		gInsFm -12,FmIns_Bass_Groove_1
(2)   24/  207C12 : A0F4 207D                   dc.b $A0,-12,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)   24/  207C16 : EA00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)   25/  207C1A : (MACRO)              		gInsNull
(2)   25/  207C1A : 0000 0000                   dc.b $00,$00,$00,$00
(2)   25/  207C1E : 0000 0000                   dc.b $00,$00,$00,$00
(2)   26/  207C22 : (MACRO)              		gInsFm -12,FmIns_Trumpet_1
(2)   26/  207C22 : A0F4 2083                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   26/  207C26 : 8A00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   27/  207C2A : (MACRO)              		gInsPcm 0,PcmIns_Trumpet1,0
(2)   27/  207C2A : D000 0200                   dc.b $D0|0,0,((PCMINS_TRUMPET1>>16)&$FF),((PCMINS_TRUMPET1>>8)&$FF)
(2)   27/  207C2E : 0000 0000                   dc.b PCMINS_TRUMPET1&$FF,0,0,0
(2)   28/  207C32 : (MACRO)              		gInsNull
(2)   28/  207C32 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   28/  207C36 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   29/  207C3A : (MACRO)              		gInsFm -24,FmIns_Vibraphone_1
(2)   29/  207C3A : A0E8 2080                   dc.b $A0,-24,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(2)   29/  207C3E : 4A00 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(2)   30/  207C42 : (MACRO)              		gInsNull
(2)   30/  207C42 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   30/  207C46 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   31/  207C4A :                     
(2)   32/  207C4A :                     ; gtrk_Test:
(2)   33/  207C4A :                     ; 		gemaHead .blk,.pat,.ins,10
(2)   34/  207C4A :                     ; .blk:		binclude "sound/tracks/mirror_blk.bin"
(2)   35/  207C4A :                     ; .pat:		binclude "sound/tracks/mirror_patt.bin"
(2)   36/  207C4A :                     ; .ins:
(2)   37/  207C4A :                     ; 		gInsDac +11,DacIns_Timpani,0
(2)   38/  207C4A :                     ; 		gInsNull;gInsPsgN 0,$20,$20,$00,$00,$04,0,%110
(2)   39/  207C4A :                     ; 		gInsNull;gInsPsgN 0,$20,$20,$00,$00,$04,0,%110
(2)   40/  207C4A :                     ; 		gInsDac +22,DacIns_Snare,0
(2)   41/  207C4A :                     ; 		gInsDac 0,DacIns_Kick,0
(2)   42/  207C4A :                     ; 		gInsNull
(2)   43/  207C4A :                     ; 		gInsFm +12,FmIns_Hats_1
(2)   44/  207C4A :                     ; 		gInsDac +11,DacIns_Kick,0
(2)   45/  207C4A :                     ; 		gInsFm -24,FmIns_Bass_Groove_1
(2)   46/  207C4A :                     ; 		gInsFm -12,FmIns_Trumpet_1
(2)   47/  207C4A :                     ; 		gInsDac +11,DacIns_Kick,0
(2)   48/  207C4A :                     ; 		gInsPsg 0,$20,$20,$00,$00,$04,0
(2)   49/  207C4A :                     ; 		gInsFm -12,FmIns_Vibraphone_1
(2)   50/  207C4A :                     ; 		gInsFm3 +12,FmIns_Sp_OpenHat
(2)   51/  207C4A :                     ; 		gInsFm -36,FmIns_Brass_7
(2)   52/  207C4A :                     ; 		gInsFm -12,FmIns_Bell_mid36
(2)   53/  207C4A :                     
(2)   54/  207C4A :                     ; ===========================================================================
(2)   55/  207C4A :                     ; -------------------------------------------------------------------
(2)   56/  207C4A :                     ; GEMA/Nikona FM instruments
(2)   57/  207C4A :                     ; -------------------------------------------------------------------
(2)   58/  207C4A :                     
(2)   59/  207C4A :                     ; -----------------------------------------------------------
(2)   60/  207C4A :                     ; Normal FM Instruments
(2)   61/  207C4A :                     ; -----------------------------------------------------------
(2)   62/  207C4A :                     
(2)   63/  207C4A :                     FmIns_Bass_big_81:
(2)   64/  207C4A :                     		binclude "sound/instr/fm/bin/bass_big_82.bin"
(2)   65/  207C6A :                     FmIns_Bass_big_110:
(2)   66/  207C6A :                     		binclude "sound/instr/fm/bin/bass_big_110.bin"
(2)   67/  207C8A :                     FmIns_Bass_big_114:
(2)   68/  207C8A :                     		binclude "sound/instr/fm/bin/bass_big_114.bin"
(2)   69/  207CAA :                     FmIns_Bass_big_122:
(2)   70/  207CAA :                     		binclude "sound/instr/fm/bin/bass_big_122.bin"
(2)   71/  207CCA :                     FmIns_Bass_cave_47:
(2)   72/  207CCA :                     		binclude "sound/instr/fm/bin/bass_cave_47.bin"
(2)   73/  207CEA :                     FmIns_Bass_club_108:
(2)   74/  207CEA :                     		binclude "sound/instr/fm/bin/bass_club_108.bin"
(2)   75/  207D0A :                     FmIns_Bass_foot_75:
(2)   76/  207D0A :                     		binclude "sound/instr/fm/bin/bass_foot_75.bin"
(2)   77/  207D2A :                     FmIns_Bass_gem_26:
(2)   78/  207D2A :                     		binclude "sound/instr/fm/bin/bass_gem_26.bin"
(2)   79/  207D4A :                     FmIns_Bass_groove_119:
(2)   80/  207D4A :                     		binclude "sound/instr/fm/bin/bass_groove_119.bin"
(2)   81/  207D6A :                     FmIns_Bass_heavy_107:
(2)   82/  207D6A :                     		binclude "sound/instr/fm/bin/bass_heavy_107.bin"
(2)   83/  207D8A :                     FmIns_Bass_heavy_118:
(2)   84/  207D8A :                     		binclude "sound/instr/fm/bin/bass_heavy_118.bin"
(2)   85/  207DAA :                     FmIns_Bass_loud_117:
(2)   86/  207DAA :                     		binclude "sound/instr/fm/bin/bass_loud_117.bin"
(2)   87/  207DCA :                     FmIns_bass_low_46:
(2)   88/  207DCA :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)   89/  207DEA :                     FmIns_Bass_Groove_1:
(2)   90/  207DEA :                     		binclude "sound/instr/fm/bin/bass_groove_1.bin"
(2)   91/  207E0A :                     FmIns_bass_low_81:
(2)   92/  207E0A :                     		binclude "sound/instr/fm/bin/bass_low_81.bin"
(2)   93/  207E2A :                     FmIns_bass_low_103:
(2)   94/  207E2A :                     		binclude "sound/instr/fm/bin/bass_low_103.bin"
(2)   95/  207E4A :                     FmIns_bass_low_106:
(2)   96/  207E4A :                     		binclude "sound/instr/fm/bin/bass_low_106.bin"
(2)   97/  207E6A :                     FmIns_bass_low_126:
(2)   98/  207E6A :                     		binclude "sound/instr/fm/bin/bass_low_126.bin"
(2)   99/  207E8A :                     FmIns_bass_mid_19:
(2)  100/  207E8A :                     		binclude "sound/instr/fm/bin/bass_mid_19.bin"
(2)  101/  207EAA :                     FmIns_bass_mid_80:
(2)  102/  207EAA :                     		binclude "sound/instr/fm/bin/bass_mid_80.bin"
(2)  103/  207ECA :                     FmIns_bass_mid_111:
(2)  104/  207ECA :                     		binclude "sound/instr/fm/bin/bass_mid_111.bin"
(2)  105/  207EEA :                     FmIns_bass_power_123:
(2)  106/  207EEA :                     		binclude "sound/instr/fm/bin/bass_power_123.bin"
(2)  107/  207F0A :                     FmIns_bass_silent_53:
(2)  108/  207F0A :                     		binclude "sound/instr/fm/bin/bass_silent_53.bin"
(2)  109/  207F2A :                     FmIns_bass_slap_10:
(2)  110/  207F2A :                     		binclude "sound/instr/fm/bin/bass_slap_10.bin"
(2)  111/  207F4A :                     FmIns_bass_slap_105:
(2)  112/  207F4A :                     		binclude "sound/instr/fm/bin/bass_slap_105.bin"
(2)  113/  207F6A :                     FmIns_bass_synth_60:
(2)  114/  207F6A :                     		binclude "sound/instr/fm/bin/bass_synth_60.bin"
(2)  115/  207F8A :                     FmIns_bass_synth_61:
(2)  116/  207F8A :                     		binclude "sound/instr/fm/bin/bass_synth_61.bin"
(2)  117/  207FAA :                     FmIns_bass_synth_72:
(2)  118/  207FAA :                     		binclude "sound/instr/fm/bin/bass_synth_72.bin"
(2)  119/  207FCA :                     FmIns_bass_synth_73:
(2)  120/  207FCA :                     		binclude "sound/instr/fm/bin/bass_synth_73.bin"
(2)  121/  207FEA :                     FmIns_bass_vlow_74:
(2)  122/  207FEA :                     		binclude "sound/instr/fm/bin/bass_vlow_74.bin"
(2)  123/  20800A :                     
(2)  124/  20800A :                     FmIns_Organ_drawbar:
(2)  125/  20800A :                     		binclude "sound/instr/fm/bin/organ_drawbar.bin"
(2)  126/  20802A :                     FmIns_Flaute_1:
(2)  127/  20802A :                     		binclude "sound/instr/fm/bin/flaute_1.bin"
(2)  128/  20804A :                     FmIns_Vibraphone_1:
(2)  129/  20804A :                     		binclude "sound/instr/fm/bin/vibraphone_1.bin"
(2)  130/  20806A :                     FmIns_Vibraphone_2:
(2)  131/  20806A :                     		binclude "sound/instr/fm/bin/vibraphone_2.bin"
(2)  132/  20808A :                     FmIns_Xylophone:
(2)  133/  20808A :                     		binclude "sound/instr/fm/bin/xylophone2_43.bin"
(2)  134/  2080AA :                     
(2)  135/  2080AA :                     FmIns_Bass_low81:
(2)  136/  2080AA :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)  137/  2080CA :                     FmIns_Trumpet_15:
(2)  138/  2080CA :                     		binclude "sound/instr/fm/bin/trumpet_27.bin"
(2)  139/  2080EA :                     
(2)  140/  2080EA :                     FmIns_Hats_1:
(2)  141/  2080EA :                     		binclude "sound/instr/fm/bin/hats_96.bin"
(2)  142/  20810A :                     
(2)  143/  20810A :                     FmIns_Bell_mid36:
(2)  144/  20810A :                     		binclude "sound/instr/fm/bin/bell_mid_36.bin"
(2)  145/  20812A :                     
(2)  146/  20812A :                     FmIns_Drum_Kick:
(2)  147/  20812A :                     		binclude "sound/instr/fm/bin/kick_low.bin"
(2)  148/  20814A :                     
(2)  149/  20814A :                     ; -----------------------------------------------------------
(2)  150/  20814A :                     ; Special FM3 Instruments
(2)  151/  20814A :                     ; -----------------------------------------------------------
(2)  152/  20814A :                     
(2)  153/  20814A :                     FmSpIns_clack_1:
(2)  154/  20814A :                     		binclude "sound/instr/fm/bin/fm3_clack_1.bin"
(2)  155/  208172 :                     FmSpIns_cowbell_h:
(2)  156/  208172 :                     		binclude "sound/instr/fm/bin/fm3_cowbell_h.bin"
(2)  157/  20819A :                     FmSpIns_cowbell_l:
(2)  158/  20819A :                     		binclude "sound/instr/fm/bin/fm3_cowbell_l.bin"
(2)  159/  2081C2 :                     FmSpIns_hats_hq:
(2)  160/  2081C2 :                     		binclude "sound/instr/fm/bin/fm3_hats_hq.bin"
(2)  161/  2081EA :                     FmSpIns_sfx_alien:
(2)  162/  2081EA :                     		binclude "sound/instr/fm/bin/fm3_sfx_alien.bin"
(2)  163/  208212 :                     FmSpIns_sfx_knckbuzz:
(2)  164/  208212 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knckbuzz.bin"
(2)  165/  20823A :                     FmSpIns_sfx_knock_h:
(2)  166/  20823A :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_h.bin"
(2)  167/  208262 :                     FmSpIns_sfx_knock_l:
(2)  168/  208262 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_l.bin"
(2)  169/  20828A :                     FmSpIns_sfx_laser:
(2)  170/  20828A :                     		binclude "sound/instr/fm/bin/fm3_sfx_laser.bin"
(2)  171/  2082B2 :                     
(2)  172/  2082B2 :                     ; ====================================================================
(2)  173/  2082B2 :                     
(2)  174/  2082B2 :                     ; FM3 Special
(2)  175/  2082B2 :                     FmIns_Sp_OpenHat:
(2)  176/  2082B2 :                     		binclude "sound/instr/fm/gsx/fm3_openhat.gsx",$2478,$28
(2)  177/  2082DA :                     FmIns_Sp_ClosedHat:
(2)  178/  2082DA :                     		binclude "sound/instr/fm/gsx/fm3_closedhat.gsx",$2478,$28
(2)  179/  208302 :                     FmIns_Sp_Cowbell:
(2)  180/  208302 :                     		binclude "sound/instr/fm/gsx/fm3_cowbell.gsx",$2478,$28
(2)  181/  20832A :                     FmIns_Drums_Kick1:
(2)  182/  20832A :                     		binclude "sound/instr/fm/gsx/drum_kick_gem.gsx",$2478,$20
(2)  183/  20834A :                     FmIns_Piano_Aqua:
(2)  184/  20834A :                     		binclude "sound/instr/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  185/  20836A :                     FmIns_HBeat_tom:
(2)  186/  20836A :                     		binclude "sound/instr/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  187/  20838A :                     FmIns_Trumpet_1:
(2)  188/  20838A :                     		binclude "sound/instr/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  189/  2083AA :                     FmIns_Bass_duck:
(2)  190/  2083AA :                     		binclude "sound/instr/fm/gsx/bass_duck.gsx",$2478,$20
(2)  191/  2083CA :                     FmIns_ClosedHat:
(2)  192/  2083CA :                     		binclude "sound/instr/fm/gsx/hats_closed.gsx",$2478,$20
(2)  193/  2083EA :                     FmIns_Trumpet_carnival:
(2)  194/  2083EA :                     		binclude "sound/instr/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(2)  195/  20840A :                     FmIns_Bass_club:
(2)  196/  20840A :                     		binclude "sound/instr/fm/gsx/OLD_bass_club.gsx",$2478,$20
(2)  197/  20842A :                     FmIns_Bass_groove_2:
(2)  198/  20842A :                     		binclude "sound/instr/fm/gsx/bass_groove_2.gsx",$2478,$20
(2)  199/  20844A :                     FmIns_PSynth_plus:
(2)  200/  20844A :                     		binclude "sound/instr/fm/gsx/psynth_plus.gsx",$2478,$20
(2)  201/  20846A :                     
(2)  202/  20846A :                     FmIns_Brass_7:
(2)  203/  20846A :                     		binclude "sound/instr/fm/gsx/brass_7.gsx",$2478,$20
(2)  204/  20848A :                     
(2)  205/  20848A :                     ; ===========================================================================
(2)  206/  20848A :                     ; -------------------------------------------------------------------
(2)  207/  20848A :                     ; GEMA/Nikona DAC samples
(2)  208/  20848A :                     ;
(2)  209/  20848A :                     ; 16000hz base
(2)  210/  20848A :                     ; -------------------------------------------------------------------
(2)  211/  20848A :                     
(2)  212/  20848A :                     		align $800
(2)  213/  208800 : (MACRO)              		gSmplData DacIns_Arena_01,"sound/instr/smpl/arena_01.wav",0
(2)  213/  208800 :                                     align 4
(2)  213/  208800 : =$208800             DACINS_ARENA_01    label *
(2)  213/  208800 : E622 00                     dc.b ((DACINS_ARENA_01_e-DACINS_ARENA_01_s)&$FF),(((DACINS_ARENA_01_e-DACINS_ARENA_01_s)>>8)&$FF),(((DACINS_ARENA_01_e-DACINS_ARENA_01_s)>>16)&$FF)
(2)  213/  208803 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  213/  208806 :                     DACINS_ARENA_01_s:
(2)  213/  208806 :                             binclude "sound/instr/smpl/arena_01.wav",$2C
(2)  213/  20AAEC :                     DACINS_ARENA_01_e:
(2)  213/  20AAEC :                                     align 4
(2)  214/  20AAEC : (MACRO)              		gSmplData DacIns_Arena_02,"sound/instr/smpl/arena_02.wav",0
(2)  214/  20AAEC :                                     align 4
(2)  214/  20AAEC : =$20AAEC             DACINS_ARENA_02    label *
(2)  214/  20AAEC : A423 00                     dc.b ((DACINS_ARENA_02_e-DACINS_ARENA_02_s)&$FF),(((DACINS_ARENA_02_e-DACINS_ARENA_02_s)>>8)&$FF),(((DACINS_ARENA_02_e-DACINS_ARENA_02_s)>>16)&$FF)
(2)  214/  20AAEF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  214/  20AAF2 :                     DACINS_ARENA_02_s:
(2)  214/  20AAF2 :                             binclude "sound/instr/smpl/arena_02.wav",$2C
(2)  214/  20CE96 :                     DACINS_ARENA_02_e:
(2)  214/  20CE96 :                                     align 4
(2)  215/  20CE98 : (MACRO)              		gSmplData DacIns_Arena_03,"sound/instr/smpl/arena_03.wav",0
(2)  215/  20CE98 :                                     align 4
(2)  215/  20CE98 : =$20CE98             DACINS_ARENA_03    label *
(2)  215/  20CE98 : 7823 00                     dc.b ((DACINS_ARENA_03_e-DACINS_ARENA_03_s)&$FF),(((DACINS_ARENA_03_e-DACINS_ARENA_03_s)>>8)&$FF),(((DACINS_ARENA_03_e-DACINS_ARENA_03_s)>>16)&$FF)
(2)  215/  20CE9B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  215/  20CE9E :                     DACINS_ARENA_03_s:
(2)  215/  20CE9E :                             binclude "sound/instr/smpl/arena_03.wav",$2C
(2)  215/  20F216 :                     DACINS_ARENA_03_e:
(2)  215/  20F216 :                                     align 4
(2)  216/  20F218 : (MACRO)              		gSmplData DacIns_Kick,"sound/instr/smpl/kick.wav",0
(2)  216/  20F218 :                                     align 4
(2)  216/  20F218 : =$20F218             DACINS_KICK    label *
(2)  216/  20F218 : B004 00                     dc.b ((DACINS_KICK_e-DACINS_KICK_s)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>8)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>16)&$FF)
(2)  216/  20F21B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  216/  20F21E :                     DACINS_KICK_s:
(2)  216/  20F21E :                             binclude "sound/instr/smpl/kick.wav",$2C
(2)  216/  20F6CE :                     DACINS_KICK_e:
(2)  216/  20F6CE :                                     align 4
(2)  217/  20F6D0 : (MACRO)              		gSmplData DacIns_Snare,"sound/instr/smpl/snare.wav",0
(2)  217/  20F6D0 :                                     align 4
(2)  217/  20F6D0 : =$20F6D0             DACINS_SNARE    label *
(2)  217/  20F6D0 : FC0E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)
(2)  217/  20F6D3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  217/  20F6D6 :                     DACINS_SNARE_s:
(2)  217/  20F6D6 :                             binclude "sound/instr/smpl/snare.wav",$2C
(2)  217/  2105D2 :                     DACINS_SNARE_e:
(2)  217/  2105D2 :                                     align 4
(2)  218/  2105D4 : (MACRO)              		gSmplData DacIns_Timpani,"sound/instr/smpl/timpani.wav",0
(2)  218/  2105D4 :                                     align 4
(2)  218/  2105D4 : =$2105D4             DACINS_TIMPANI    label *
(2)  218/  2105D4 : D018 00                     dc.b ((DACINS_TIMPANI_e-DACINS_TIMPANI_s)&$FF),(((DACINS_TIMPANI_e-DACINS_TIMPANI_s)>>8)&$FF),(((DACINS_TIMPANI_e-DACINS_TIMPANI_s)>>16)&$FF)
(2)  218/  2105D7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  218/  2105DA :                     DACINS_TIMPANI_s:
(2)  218/  2105DA :                             binclude "sound/instr/smpl/timpani.wav",$2C
(2)  218/  211EAA :                     DACINS_TIMPANI_e:
(2)  218/  211EAA :                                     align 4
(2)  219/  211EAC : (MACRO)              		gSmplData DacIns_wegot_kick,"sound/instr/smpl/wegot_kick.wav",0
(2)  219/  211EAC :                                     align 4
(2)  219/  211EAC : =$211EAC             DACINS_WEGOT_KICK    label *
(2)  219/  211EAC : 7407 00                     dc.b ((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>8)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>16)&$FF)
(2)  219/  211EAF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  219/  211EB2 :                     DACINS_WEGOT_KICK_s:
(2)  219/  211EB2 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)  219/  212626 :                     DACINS_WEGOT_KICK_e:
(2)  219/  212626 :                                     align 4
(2)  220/  212628 : (MACRO)              		gSmplData DacIns_wegot_crash,"sound/instr/smpl/wegot_crash.wav",0
(2)  220/  212628 :                                     align 4
(2)  220/  212628 : =$212628             DACINS_WEGOT_CRASH    label *
(2)  220/  212628 : C42C 00                     dc.b ((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>8)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>16)&$FF)
(2)  220/  21262B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  220/  21262E :                     DACINS_WEGOT_CRASH_s:
(2)  220/  21262E :                             binclude "sound/instr/smpl/wegot_crash.wav",$2C
(2)  220/  2152F2 :                     DACINS_WEGOT_CRASH_e:
(2)  220/  2152F2 :                                     align 4
(2)  221/  2152F4 :                     
(1)   53/  2152F4 :                     		include "game/data/bank_main.asm"
(2)    1/  2152F4 :                     ; ===========================================================================
(2)    2/  2152F4 :                     ; ----------------------------------------------------------------
(2)    3/  2152F4 :                     ; BANK data
(2)    4/  2152F4 :                     ; ----------------------------------------------------------------
(2)    5/  2152F4 :                     
(2)    6/  2152F4 : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/  2152F4 :                     
(2)    6/  2152F4 :                                     align 2
(2)    6/  2152F4 : =$2152F4             ASCII_FONT        label *
(2)    6/  2152F4 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/  215EF4 :                                     align 2
(2)    6/  215EF4 :                     
(2)    7/  215EF4 : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/  215EF4 :                     
(2)    7/  215EF4 :                                     align 2
(2)    7/  215EF4 : =$215EF4             ASCII_FONT_W        label *
(2)    7/  215EF4 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/  2176F4 :                                     align 2
(2)    7/  2176F4 :                     
(2)    8/  2176F4 : (MACRO)              		binclude_dma_e	Art_TESTBG,Art_TESTBG_e,"game/data/md/maps/test/art.bin"
(2)    8/  2176F4 :                     
(2)    8/  2176F4 :                                     align 2
(2)    8/  2176F4 : =$2176F4             ART_TESTBG        label *
(2)    8/  2176F4 :                                     binclude "game/data/md/maps/test/art.bin"
(2)    8/  21FD14 : =$21FD14             ART_TESTBG_E          label *
(2)    8/  21FD14 :                                     align 2
(2)    8/  21FD14 :                     
(2)    9/  21FD14 : (MACRO)              		binclude_dma_e	Art_TESTBG2,Art_TESTBG2_e,"game/data/md/maps/test2/art.bin"
(2)    9/  21FD14 :                     
(2)    9/  21FD14 :                                     align 2
(2)    9/  21FD14 : =$21FD14             ART_TESTBG2        label *
(2)    9/  21FD14 :                                     binclude "game/data/md/maps/test2/art.bin"
(2)    9/  229594 : =$229594             ART_TESTBG2_E          label *
(2)    9/  229594 :                                     align 2
(2)    9/  229594 :                     
(2)   10/  229594 :                     
(2)   11/  229594 : (MACRO)              		binclude_dma	Art_Haruna,"game/data/md/sprites/haruna/art.bin"
(2)   11/  229594 :                     
(2)   11/  229594 :                                     align 2
(2)   11/  229594 : =$229594             ART_HARUNA        label *
(2)   11/  229594 :                                     binclude "game/data/md/sprites/haruna/art.bin"
(2)   11/  22C414 :                                     align 2
(2)   11/  22C414 :                     
(2)   12/  22C414 : (MACRO)              		binclude_dma_e	Art_Sisi,Art_Sisi_e,"game/data/md/sprites/sisi/art.bin"
(2)   12/  22C414 :                     
(2)   12/  22C414 :                                     align 2
(2)   12/  22C414 : =$22C414             ART_SISI        label *
(2)   12/  22C414 :                                     binclude "game/data/md/sprites/sisi/art.bin"
(2)   12/  22C994 : =$22C994             ART_SISI_E          label *
(2)   12/  22C994 :                                     align 2
(2)   12/  22C994 :                     
(2)   13/  22C994 :                     
(2)   14/  22C994 : (MACRO)              		binclude_dma	Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)   14/  22C994 :                     
(2)   14/  22C994 :                                     align 2
(2)   14/  22C994 : =$22C994             ART_FAIRYDODO        label *
(2)   14/  22C994 :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)   14/  22CF94 :                                     align 2
(2)   14/  22CF94 :                     
(2)   15/  22CF94 : (MACRO)              		binclude_dma	Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)   15/  22CF94 :                     
(2)   15/  22CF94 :                                     align 2
(2)   15/  22CF94 : =$22CF94             ART_FAIRYMIMI        label *
(2)   15/  22CF94 :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)   15/  22D594 :                                     align 2
(2)   15/  22D594 :                     
(2)   16/  22D594 : (MACRO)              		binclude_dma	Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   16/  22D594 :                     
(2)   16/  22D594 :                                     align 2
(2)   16/  22D594 : =$22D594             ART_FAIRYFIFI        label *
(2)   16/  22D594 :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   16/  22DB14 :                                     align 2
(2)   16/  22DB14 :                     
(2)   17/  22DB14 :                     
(2)   18/  22DB14 :                     ; ----------------------------------------------------------------
(2)   19/  22DB14 :                     ; Everything else...
(2)   20/  22DB14 :                     ; ----------------------------------------------------------------
(2)   21/  22DB14 :                     
(2)   22/  22DB14 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)   23/  22DB34 :                     		align 2
(2)   24/  22DB34 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)   25/  22DCE4 :                     		align 2
(2)   26/  22DCE4 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)   27/  22DD74 :                     		align 2
(2)   28/  22DD74 :                     
(2)   29/  22DD74 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)   30/  22DD94 :                     		align 2
(2)   31/  22DD94 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)   32/  22DDD8 :                     		align 2
(2)   33/  22DDD8 :                     
(2)   34/  22DDD8 :                     Pal_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   35/  22DDF8 :                     		align 2
(2)   36/  22DDF8 :                     Map_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   37/  22E6B8 :                     		align 2
(2)   38/  22E6B8 :                     Pal_TESTBG2:	binclude "game/data/md/maps/test2/pal.bin"
(2)   39/  22E6D8 :                     		align 2
(2)   40/  22E6D8 :                     Map_TESTBG2:	binclude "game/data/md/maps/test2/map.bin"
(2)   41/  22F858 :                     		align 2
(2)   42/  22F858 :                     
(2)   43/  22F858 :                     
(2)   44/  22F858 :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   45/  22F878 :                     		align 2
(2)   46/  22F878 :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   47/  22F89C :                     		align 2
(2)   48/  22F89C :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   49/  22F8C0 :                     		align 2
(2)   50/  22F8C0 :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   51/  22F8FC :                     		align 2
(2)   52/  22F8FC :                     
(1)   54/  22F8FC :                     	; ------------------------------------------------
(1)   55/  22F8FC : (MACRO)              	data_dend DATA_BANK0_e
(1)   55/  22F8FC : =$2F8FC              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   55/  22F8FC :                     
(1)   55/  22F8FC :                     
(1)   55/   850FC :                                     dephase
(1)   55/   850FC :                     
(1)   55/   850FC : =$850FC              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   55/   850FC : =$85800              mpadlbl := (mlastpos&$FFF800)+$800
(1)   55/   850FC :  (MACRO-2)                           rompad mpadlbl
(1)   55/   850FC : =$704                .this_sz := MPADLBL - *
(1)   55/   850FC : 0000 0000 0000                              dc.b [.this_sz]0
            85102 : 0000 0000 0000 
            85108 : 0000 0000 0000 
            8510E : 0000 0000 0000 
            85114 : 0000 0000 0000 
            8511A : 0000 0000 0000 
            85120 : 0000 0000 0000 
            85126 : 0000 0000 0000 
            8512C : 0000 0000 0000 
            85132 : 0000 0000 0000 
            85138 : 0000 0000 0000 
            8513E : 0000 0000 0000 
            85144 : 0000 0000 0000 
            8514A : 0000 0000 0000 
            85150 : 0000 0000 0000 
            85156 : 0000 0000 0000 
            8515C : 0000 0000 0000 
            85162 : 0000 0000 0000 
            85168 : 0000 0000 0000 
            8516E : 0000 0000 0000 
            85174 : 0000 0000 0000 
            8517A : 0000 0000 0000 
            85180 : 0000 0000 0000 
            85186 : 0000 0000 0000 
            8518C : 0000 0000 0000 
            85192 : 0000 0000 0000 
            85198 : 0000 0000 0000 
            8519E : 0000 0000 0000 
            851A4 : 0000 0000 0000 
            851AA : 0000 0000 0000 
            851B0 : 0000 0000 0000 
            851B6 : 0000 0000 0000 
            851BC : 0000 0000 0000 
            851C2 : 0000 0000 0000 
            851C8 : 0000 0000 0000 
            851CE : 0000 0000 0000 
            851D4 : 0000 0000 0000 
            851DA : 0000 0000 0000 
            851E0 : 0000 0000 0000 
            851E6 : 0000 0000 0000 
            851EC : 0000 0000 0000 
            851F2 : 0000 0000 0000 
            851F8 : 0000 0000 0000 
            851FE : 0000 0000 0000 
            85204 : 0000 0000 0000 
            8520A : 0000 0000 0000 
            85210 : 0000 0000 0000 
            85216 : 0000 0000 0000 
            8521C : 0000 0000 0000 
            85222 : 0000 0000 0000 
            85228 : 0000 0000 0000 
            8522E : 0000 0000 0000 
            85234 : 0000 0000 0000 
            8523A : 0000 0000 0000 
            85240 : 0000 0000 0000 
            85246 : 0000 0000 0000 
            8524C : 0000 0000 0000 
            85252 : 0000 0000 0000 
            85258 : 0000 0000 0000 
            8525E : 0000 0000 0000 
            85264 : 0000 0000 0000 
            8526A : 0000 0000 0000 
            85270 : 0000 0000 0000 
            85276 : 0000 0000 0000 
            8527C : 0000 0000 0000 
            85282 : 0000 0000 0000 
            85288 : 0000 0000 0000 
            8528E : 0000 0000 0000 
            85294 : 0000 0000 0000 
            8529A : 0000 0000 0000 
            852A0 : 0000 0000 0000 
            852A6 : 0000 0000 0000 
            852AC : 0000 0000 0000 
            852B2 : 0000 0000 0000 
            852B8 : 0000 0000 0000 
            852BE : 0000 0000 0000 
            852C4 : 0000 0000 0000 
            852CA : 0000 0000 0000 
            852D0 : 0000 0000 0000 
            852D6 : 0000 0000 0000 
            852DC : 0000 0000 0000 
            852E2 : 0000 0000 0000 
            852E8 : 0000 0000 0000 
            852EE : 0000 0000 0000 
            852F4 : 0000 0000 0000 
            852FA : 0000 0000 0000 
            85300 : 0000 0000 0000 
            85306 : 0000 0000 0000 
            8530C : 0000 0000 0000 
            85312 : 0000 0000 0000 
            85318 : 0000 0000 0000 
            8531E : 0000 0000 0000 
            85324 : 0000 0000 0000 
            8532A : 0000 0000 0000 
            85330 : 0000 0000 0000 
            85336 : 0000 0000 0000 
            8533C : 0000 0000 0000 
            85342 : 0000 0000 0000 
            85348 : 0000 0000 0000 
            8534E : 0000 0000 0000 
            85354 : 0000 0000 0000 
            8535A : 0000 0000 0000 
            85360 : 0000 0000 0000 
            85366 : 0000 0000 0000 
            8536C : 0000 0000 0000 
            85372 : 0000 0000 0000 
            85378 : 0000 0000 0000 
            8537E : 0000 0000 0000 
            85384 : 0000 0000 0000 
            8538A : 0000 0000 0000 
            85390 : 0000 0000 0000 
            85396 : 0000 0000 0000 
            8539C : 0000 0000 0000 
            853A2 : 0000 0000 0000 
            853A8 : 0000 0000 0000 
            853AE : 0000 0000 0000 
            853B4 : 0000 0000 0000 
            853BA : 0000 0000 0000 
            853C0 : 0000 0000 0000 
            853C6 : 0000 0000 0000 
            853CC : 0000 0000 0000 
            853D2 : 0000 0000 0000 
            853D8 : 0000 0000 0000 
            853DE : 0000 0000 0000 
            853E4 : 0000 0000 0000 
            853EA : 0000 0000 0000 
            853F0 : 0000 0000 0000 
            853F6 : 0000 0000 0000 
            853FC : 0000 0000 0000 
            85402 : 0000 0000 0000 
            85408 : 0000 0000 0000 
            8540E : 0000 0000 0000 
            85414 : 0000 0000 0000 
            8541A : 0000 0000 0000 
            85420 : 0000 0000 0000 
            85426 : 0000 0000 0000 
            8542C : 0000 0000 0000 
            85432 : 0000 0000 0000 
            85438 : 0000 0000 0000 
            8543E : 0000 0000 0000 
            85444 : 0000 0000 0000 
            8544A : 0000 0000 0000 
            85450 : 0000 0000 0000 
            85456 : 0000 0000 0000 
            8545C : 0000 0000 0000 
            85462 : 0000 0000 0000 
            85468 : 0000 0000 0000 
            8546E : 0000 0000 0000 
            85474 : 0000 0000 0000 
            8547A : 0000 0000 0000 
            85480 : 0000 0000 0000 
            85486 : 0000 0000 0000 
            8548C : 0000 0000 0000 
            85492 : 0000 0000 0000 
            85498 : 0000 0000 0000 
            8549E : 0000 0000 0000 
            854A4 : 0000 0000 0000 
            854AA : 0000 0000 0000 
            854B0 : 0000 0000 0000 
            854B6 : 0000 0000 0000 
            854BC : 0000 0000 0000 
            854C2 : 0000 0000 0000 
            854C8 : 0000 0000 0000 
            854CE : 0000 0000 0000 
            854D4 : 0000 0000 0000 
            854DA : 0000 0000 0000 
            854E0 : 0000 0000 0000 
            854E6 : 0000 0000 0000 
            854EC : 0000 0000 0000 
            854F2 : 0000 0000 0000 
            854F8 : 0000 0000 0000 
            854FE : 0000 0000 0000 
            85504 : 0000 0000 0000 
            8550A : 0000 0000 0000 
            85510 : 0000 0000 0000 
            85516 : 0000 0000 0000 
            8551C : 0000 0000 0000 
            85522 : 0000 0000 0000 
            85528 : 0000 0000 0000 
            8552E : 0000 0000 0000 
            85534 : 0000 0000 0000 
            8553A : 0000 0000 0000 
            85540 : 0000 0000 0000 
            85546 : 0000 0000 0000 
            8554C : 0000 0000 0000 
            85552 : 0000 0000 0000 
            85558 : 0000 0000 0000 
            8555E : 0000 0000 0000 
            85564 : 0000 0000 0000 
            8556A : 0000 0000 0000 
            85570 : 0000 0000 0000 
            85576 : 0000 0000 0000 
            8557C : 0000 0000 0000 
            85582 : 0000 0000 0000 
            85588 : 0000 0000 0000 
            8558E : 0000 0000 0000 
            85594 : 0000 0000 0000 
            8559A : 0000 0000 0000 
            855A0 : 0000 0000 0000 
            855A6 : 0000 0000 0000 
            855AC : 0000 0000 0000 
            855B2 : 0000 0000 0000 
            855B8 : 0000 0000 0000 
            855BE : 0000 0000 0000 
            855C4 : 0000 0000 0000 
            855CA : 0000 0000 0000 
            855D0 : 0000 0000 0000 
            855D6 : 0000 0000 0000 
            855DC : 0000 0000 0000 
            855E2 : 0000 0000 0000 
            855E8 : 0000 0000 0000 
            855EE : 0000 0000 0000 
            855F4 : 0000 0000 0000 
            855FA : 0000 0000 0000 
            85600 : 0000 0000 0000 
            85606 : 0000 0000 0000 
            8560C : 0000 0000 0000 
            85612 : 0000 0000 0000 
            85618 : 0000 0000 0000 
            8561E : 0000 0000 0000 
            85624 : 0000 0000 0000 
            8562A : 0000 0000 0000 
            85630 : 0000 0000 0000 
            85636 : 0000 0000 0000 
            8563C : 0000 0000 0000 
            85642 : 0000 0000 0000 
            85648 : 0000 0000 0000 
            8564E : 0000 0000 0000 
            85654 : 0000 0000 0000 
            8565A : 0000 0000 0000 
            85660 : 0000 0000 0000 
            85666 : 0000 0000 0000 
            8566C : 0000 0000 0000 
            85672 : 0000 0000 0000 
            85678 : 0000 0000 0000 
            8567E : 0000 0000 0000 
            85684 : 0000 0000 0000 
            8568A : 0000 0000 0000 
            85690 : 0000 0000 0000 
            85696 : 0000 0000 0000 
            8569C : 0000 0000 0000 
            856A2 : 0000 0000 0000 
            856A8 : 0000 0000 0000 
            856AE : 0000 0000 0000 
            856B4 : 0000 0000 0000 
            856BA : 0000 0000 0000 
            856C0 : 0000 0000 0000 
            856C6 : 0000 0000 0000 
            856CC : 0000 0000 0000 
            856D2 : 0000 0000 0000 
            856D8 : 0000 0000 0000 
            856DE : 0000 0000 0000 
            856E4 : 0000 0000 0000 
            856EA : 0000 0000 0000 
            856F0 : 0000 0000 0000 
            856F6 : 0000 0000 0000 
            856FC : 0000 0000 0000 
            85702 : 0000 0000 0000 
            85708 : 0000 0000 0000 
            8570E : 0000 0000 0000 
            85714 : 0000 0000 0000 
            8571A : 0000 0000 0000 
            85720 : 0000 0000 0000 
            85726 : 0000 0000 0000 
            8572C : 0000 0000 0000 
            85732 : 0000 0000 0000 
            85738 : 0000 0000 0000 
            8573E : 0000 0000 0000 
            85744 : 0000 0000 0000 
            8574A : 0000 0000 0000 
            85750 : 0000 0000 0000 
            85756 : 0000 0000 0000 
            8575C : 0000 0000 0000 
            85762 : 0000 0000 0000 
            85768 : 0000 0000 0000 
            8576E : 0000 0000 0000 
            85774 : 0000 0000 0000 
            8577A : 0000 0000 0000 
            85780 : 0000 0000 0000 
            85786 : 0000 0000 0000 
            8578C : 0000 0000 0000 
            85792 : 0000 0000 0000 
            85798 : 0000 0000 0000 
            8579E : 0000 0000 0000 
            857A4 : 0000 0000 0000 
            857AA : 0000 0000 0000 
            857B0 : 0000 0000 0000 
            857B6 : 0000 0000 0000 
            857BC : 0000 0000 0000 
            857C2 : 0000 0000 0000 
            857C8 : 0000 0000 0000 
            857CE : 0000 0000 0000 
            857D4 : 0000 0000 0000 
            857DA : 0000 0000 0000 
            857E0 : 0000 0000 0000 
            857E6 : 0000 0000 0000 
            857EC : 0000 0000 0000 
            857F2 : 0000 0000 0000 
            857F8 : 0000 0000 0000 
            857FE : 0000             
(1)   55/   85800 : =$85800              DATA_BANK0_E label *  ; <-- CD/CD32X ONLY
(1)   55/   85800 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   56/   85800 :                     
(1)   57/   85800 :                     ; ============================================================
(1)   58/   85800 :                     ; --------------------------------------------------------
(1)   59/   85800 :                     ; 32X stuff only
(1)   60/   85800 :                     ; --------------------------------------------------------
(1)   61/   85800 :                     
(1)   62/   85800 : (MACRO)              	data_dset DATA_BANK1
(1)   62/   85800 :                                     align $800
(1)   62/   85800 :                     ; MCD_DBANK0:
(1)   62/   85800 : =$85800              DATA_BANK1 label *
(1)   62/  200000 :                                     phase sysmcd_wram
(1)   62/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   63/  200000 :                     	; ------------------------------------------------
(1)   64/  200000 :                     		include "game/data/bank_mars.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data
(2)    4/  200000 :                     ; ----------------------------------------------------------------
(2)    5/  200000 :                     
(2)    6/  200000 :                     PalMars_Test:
(2)    7/  200000 :                     		binclude "game/data/mars/maps/test/pal.bin"
(2)    8/  200180 :                     		align 2
(2)    9/  200180 :                     MapMars_Test:
(2)   10/  200180 :                     		binclude "game/data/mars/maps/test/map.bin"
(2)   11/  200580 :                     		align 2
(2)   12/  200580 :                     PalMars_Haruna:
(2)   13/  200580 :                     		binclude "game/data/mars/textures/haruna_pal.bin"
(2)   14/  2005A0 :                     		align 2
(2)   15/  2005A0 :                     PalMars_Sisi:
(2)   16/  2005A0 :                     		binclude "game/data/mars/sprites/sisi/pal.bin"
(2)   17/  2005C0 :                     		align 8
(2)   18/  2005C0 :                     
(2)   19/  2005C0 :                     ; ----------------------------------------------------
(2)   20/  2005C0 :                     
(2)   21/  2005C0 :                     PalMars_Test2:
(2)   22/  2005C0 :                     		binclude "game/data/mars/objects/test/mtrl/test_pal.bin"
(2)   23/  2006C0 :                     		binclude "game/data/mars/textures/doremi/pal.bin"	; FILLER
(2)   24/  2008C0 :                     		align 2
(2)   25/  2008C0 :                     
(2)   26/  2008C0 :                     ; ===========================================================
(2)   27/  2008C0 :                     ; ----------------------------------------------------
(2)   28/  2008C0 :                     ; 32X GRAPHICS BANKS
(2)   29/  2008C0 :                     ; ----------------------------------------------------
(2)   30/  2008C0 :                     
(2)   31/  2008C0 : (MACRO)              		mars_VramStart ArtMars_Test2D		; Graphics/Texture pack START
(2)   31/  2008C0 : =$2008C0             ARTMARS_TEST2D label *
(2)   31/       0 :                                     phase 0
(2)   32/       0 :                     ; ----------------------------------------------------
(2)   33/       0 :                     ArtMars_TestArt:
(2)   34/       0 :                     		binclude "game/data/mars/maps/test/art.bin"
(2)   35/    FD00 :                     		align 8
(2)   36/    FD00 :                     ArtMars_Sisi:
(2)   37/    FD00 :                     		binclude "game/data/mars/sprites/sisi/art.bin"
(2)   38/   10900 :                     		align 8
(2)   39/   10900 :                     Textr_Haruna:
(2)   40/   10900 :                     		binclude "game/data/mars/textures/haruna_art.bin"
(2)   41/   17200 :                     		align 8
(2)   42/   17200 :                     ; ----------------------------------------------------
(2)   43/   17200 : (MACRO)              		mars_VramEnd ArtMars_Test2D_e		; Graphics/Texture pack END
(2)   43/   17200 :                                     align 8
(2)   43/   17200 :                     .end:
(2)   43/   17200 :                     ;               if MOMPASS == 1
(2)   43/   17200 :  (MACRO-2)                                   erreport "32X VRAM DATA",.end,$18000
(2)   43/   17200 :                     ;               endif
(2)   43/  217AC0 :                                     dephase
(2)   43/  217AC0 : =$217AC0             ARTMARS_TEST2D_E label *
(2)   44/  217AC0 :                     
(2)   45/  217AC0 :                     
(1)   65/  217AC0 :                     	; ------------------------------------------------
(1)   66/  217AC0 : (MACRO)              	data_dend DATA_BANK1_e
(1)   66/  217AC0 : =$17AC0              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   66/  217AC0 :                     
(1)   66/  217AC0 :                     
(1)   66/   9D2C0 :                                     dephase
(1)   66/   9D2C0 :                     
(1)   66/   9D2C0 : =$9D2C0              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   66/   9D2C0 : =$9D800              mpadlbl := (mlastpos&$FFF800)+$800
(1)   66/   9D2C0 :  (MACRO-2)                           rompad mpadlbl
(1)   66/   9D2C0 : =$540                .this_sz := MPADLBL - *
(1)   66/   9D2C0 : 0000 0000 0000                              dc.b [.this_sz]0
            9D2C6 : 0000 0000 0000 
            9D2CC : 0000 0000 0000 
            9D2D2 : 0000 0000 0000 
            9D2D8 : 0000 0000 0000 
            9D2DE : 0000 0000 0000 
            9D2E4 : 0000 0000 0000 
            9D2EA : 0000 0000 0000 
            9D2F0 : 0000 0000 0000 
            9D2F6 : 0000 0000 0000 
            9D2FC : 0000 0000 0000 
            9D302 : 0000 0000 0000 
            9D308 : 0000 0000 0000 
            9D30E : 0000 0000 0000 
            9D314 : 0000 0000 0000 
            9D31A : 0000 0000 0000 
            9D320 : 0000 0000 0000 
            9D326 : 0000 0000 0000 
            9D32C : 0000 0000 0000 
            9D332 : 0000 0000 0000 
            9D338 : 0000 0000 0000 
            9D33E : 0000 0000 0000 
            9D344 : 0000 0000 0000 
            9D34A : 0000 0000 0000 
            9D350 : 0000 0000 0000 
            9D356 : 0000 0000 0000 
            9D35C : 0000 0000 0000 
            9D362 : 0000 0000 0000 
            9D368 : 0000 0000 0000 
            9D36E : 0000 0000 0000 
            9D374 : 0000 0000 0000 
            9D37A : 0000 0000 0000 
            9D380 : 0000 0000 0000 
            9D386 : 0000 0000 0000 
            9D38C : 0000 0000 0000 
            9D392 : 0000 0000 0000 
            9D398 : 0000 0000 0000 
            9D39E : 0000 0000 0000 
            9D3A4 : 0000 0000 0000 
            9D3AA : 0000 0000 0000 
            9D3B0 : 0000 0000 0000 
            9D3B6 : 0000 0000 0000 
            9D3BC : 0000 0000 0000 
            9D3C2 : 0000 0000 0000 
            9D3C8 : 0000 0000 0000 
            9D3CE : 0000 0000 0000 
            9D3D4 : 0000 0000 0000 
            9D3DA : 0000 0000 0000 
            9D3E0 : 0000 0000 0000 
            9D3E6 : 0000 0000 0000 
            9D3EC : 0000 0000 0000 
            9D3F2 : 0000 0000 0000 
            9D3F8 : 0000 0000 0000 
            9D3FE : 0000 0000 0000 
            9D404 : 0000 0000 0000 
            9D40A : 0000 0000 0000 
            9D410 : 0000 0000 0000 
            9D416 : 0000 0000 0000 
            9D41C : 0000 0000 0000 
            9D422 : 0000 0000 0000 
            9D428 : 0000 0000 0000 
            9D42E : 0000 0000 0000 
            9D434 : 0000 0000 0000 
            9D43A : 0000 0000 0000 
            9D440 : 0000 0000 0000 
            9D446 : 0000 0000 0000 
            9D44C : 0000 0000 0000 
            9D452 : 0000 0000 0000 
            9D458 : 0000 0000 0000 
            9D45E : 0000 0000 0000 
            9D464 : 0000 0000 0000 
            9D46A : 0000 0000 0000 
            9D470 : 0000 0000 0000 
            9D476 : 0000 0000 0000 
            9D47C : 0000 0000 0000 
            9D482 : 0000 0000 0000 
            9D488 : 0000 0000 0000 
            9D48E : 0000 0000 0000 
            9D494 : 0000 0000 0000 
            9D49A : 0000 0000 0000 
            9D4A0 : 0000 0000 0000 
            9D4A6 : 0000 0000 0000 
            9D4AC : 0000 0000 0000 
            9D4B2 : 0000 0000 0000 
            9D4B8 : 0000 0000 0000 
            9D4BE : 0000 0000 0000 
            9D4C4 : 0000 0000 0000 
            9D4CA : 0000 0000 0000 
            9D4D0 : 0000 0000 0000 
            9D4D6 : 0000 0000 0000 
            9D4DC : 0000 0000 0000 
            9D4E2 : 0000 0000 0000 
            9D4E8 : 0000 0000 0000 
            9D4EE : 0000 0000 0000 
            9D4F4 : 0000 0000 0000 
            9D4FA : 0000 0000 0000 
            9D500 : 0000 0000 0000 
            9D506 : 0000 0000 0000 
            9D50C : 0000 0000 0000 
            9D512 : 0000 0000 0000 
            9D518 : 0000 0000 0000 
            9D51E : 0000 0000 0000 
            9D524 : 0000 0000 0000 
            9D52A : 0000 0000 0000 
            9D530 : 0000 0000 0000 
            9D536 : 0000 0000 0000 
            9D53C : 0000 0000 0000 
            9D542 : 0000 0000 0000 
            9D548 : 0000 0000 0000 
            9D54E : 0000 0000 0000 
            9D554 : 0000 0000 0000 
            9D55A : 0000 0000 0000 
            9D560 : 0000 0000 0000 
            9D566 : 0000 0000 0000 
            9D56C : 0000 0000 0000 
            9D572 : 0000 0000 0000 
            9D578 : 0000 0000 0000 
            9D57E : 0000 0000 0000 
            9D584 : 0000 0000 0000 
            9D58A : 0000 0000 0000 
            9D590 : 0000 0000 0000 
            9D596 : 0000 0000 0000 
            9D59C : 0000 0000 0000 
            9D5A2 : 0000 0000 0000 
            9D5A8 : 0000 0000 0000 
            9D5AE : 0000 0000 0000 
            9D5B4 : 0000 0000 0000 
            9D5BA : 0000 0000 0000 
            9D5C0 : 0000 0000 0000 
            9D5C6 : 0000 0000 0000 
            9D5CC : 0000 0000 0000 
            9D5D2 : 0000 0000 0000 
            9D5D8 : 0000 0000 0000 
            9D5DE : 0000 0000 0000 
            9D5E4 : 0000 0000 0000 
            9D5EA : 0000 0000 0000 
            9D5F0 : 0000 0000 0000 
            9D5F6 : 0000 0000 0000 
            9D5FC : 0000 0000 0000 
            9D602 : 0000 0000 0000 
            9D608 : 0000 0000 0000 
            9D60E : 0000 0000 0000 
            9D614 : 0000 0000 0000 
            9D61A : 0000 0000 0000 
            9D620 : 0000 0000 0000 
            9D626 : 0000 0000 0000 
            9D62C : 0000 0000 0000 
            9D632 : 0000 0000 0000 
            9D638 : 0000 0000 0000 
            9D63E : 0000 0000 0000 
            9D644 : 0000 0000 0000 
            9D64A : 0000 0000 0000 
            9D650 : 0000 0000 0000 
            9D656 : 0000 0000 0000 
            9D65C : 0000 0000 0000 
            9D662 : 0000 0000 0000 
            9D668 : 0000 0000 0000 
            9D66E : 0000 0000 0000 
            9D674 : 0000 0000 0000 
            9D67A : 0000 0000 0000 
            9D680 : 0000 0000 0000 
            9D686 : 0000 0000 0000 
            9D68C : 0000 0000 0000 
            9D692 : 0000 0000 0000 
            9D698 : 0000 0000 0000 
            9D69E : 0000 0000 0000 
            9D6A4 : 0000 0000 0000 
            9D6AA : 0000 0000 0000 
            9D6B0 : 0000 0000 0000 
            9D6B6 : 0000 0000 0000 
            9D6BC : 0000 0000 0000 
            9D6C2 : 0000 0000 0000 
            9D6C8 : 0000 0000 0000 
            9D6CE : 0000 0000 0000 
            9D6D4 : 0000 0000 0000 
            9D6DA : 0000 0000 0000 
            9D6E0 : 0000 0000 0000 
            9D6E6 : 0000 0000 0000 
            9D6EC : 0000 0000 0000 
            9D6F2 : 0000 0000 0000 
            9D6F8 : 0000 0000 0000 
            9D6FE : 0000 0000 0000 
            9D704 : 0000 0000 0000 
            9D70A : 0000 0000 0000 
            9D710 : 0000 0000 0000 
            9D716 : 0000 0000 0000 
            9D71C : 0000 0000 0000 
            9D722 : 0000 0000 0000 
            9D728 : 0000 0000 0000 
            9D72E : 0000 0000 0000 
            9D734 : 0000 0000 0000 
            9D73A : 0000 0000 0000 
            9D740 : 0000 0000 0000 
            9D746 : 0000 0000 0000 
            9D74C : 0000 0000 0000 
            9D752 : 0000 0000 0000 
            9D758 : 0000 0000 0000 
            9D75E : 0000 0000 0000 
            9D764 : 0000 0000 0000 
            9D76A : 0000 0000 0000 
            9D770 : 0000 0000 0000 
            9D776 : 0000 0000 0000 
            9D77C : 0000 0000 0000 
            9D782 : 0000 0000 0000 
            9D788 : 0000 0000 0000 
            9D78E : 0000 0000 0000 
            9D794 : 0000 0000 0000 
            9D79A : 0000 0000 0000 
            9D7A0 : 0000 0000 0000 
            9D7A6 : 0000 0000 0000 
            9D7AC : 0000 0000 0000 
            9D7B2 : 0000 0000 0000 
            9D7B8 : 0000 0000 0000 
            9D7BE : 0000 0000 0000 
            9D7C4 : 0000 0000 0000 
            9D7CA : 0000 0000 0000 
            9D7D0 : 0000 0000 0000 
            9D7D6 : 0000 0000 0000 
            9D7DC : 0000 0000 0000 
            9D7E2 : 0000 0000 0000 
            9D7E8 : 0000 0000 0000 
            9D7EE : 0000 0000 0000 
            9D7F4 : 0000 0000 0000 
            9D7FA : 0000 0000 0000    
(1)   66/   9D800 : =$9D800              DATA_BANK1_E label *  ; <-- CD/CD32X ONLY
(1)   66/   9D800 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   67/   9D800 :                     
(1)   68/   9D800 :                     ; ============================================================
(1)   69/   9D800 :                     ; --------------------------------------------------------
(1)   70/   9D800 :                     ; STAMP BANK test
(1)   71/   9D800 :                     ; --------------------------------------------------------
(1)   72/   9D800 :                     
(1)   73/   9D800 : (MACRO)              	data_dset DATA_BNKSTAMP
(1)   73/   9D800 :                                     align $800
(1)   73/   9D800 :                     ; MCD_DBANK0:
(1)   73/   9D800 : =$9D800              DATA_BNKSTAMP label *
(1)   73/  200000 :                                     phase sysmcd_wram
(1)   73/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   74/  200000 :                     	; ------------------------------------------------
(1)   75/  200000 :                     		include "game/data/stamps_0.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data for STAMPS ONLY
(2)    4/  200000 :                     ;
(2)    5/  200000 :                     ; GRAPHICS go first, first $80 bytes are blank/free
(2)    6/  200000 :                     ; ----------------------------------------------------------------
(2)    7/  200000 :                     
(2)    8/       0 :                     		phase 0		; Labels start at 0
(2)    9/       0 :                     ; ===================================================================
(2)   10/       0 :                     ; ----------------------------------------------------------------
(2)   11/       0 :                     ; STAMP GRAPHICS GO FIRST
(2)   12/       0 :                     ; ----------------------------------------------------------------
(2)   13/       0 :                     
(2)   14/       0 : 00                  		dc.b 0
(2)   15/       1 :                     		align $80
(2)   16/      80 :                     		binclude "game/data/mcd/stamps/test/art.bin"
(2)   17/    6080 :                     ; 		binclude "game/data/mcd/stamps/haruna/art.bin"
(2)   18/    6080 :                     
(2)   19/    6080 :                     ; ===================================================================
(2)   20/  206080 :                     		dephase
(2)   21/  206080 :                     
(2)   22/  206080 :                     
(1)   76/  206080 :                     	; ------------------------------------------------
(1)   77/  206080 : (MACRO)              	data_dend DATA_BNKSTAMP_e
(1)   77/  206080 : =$6080               GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   77/  206080 :                     
(1)   77/  206080 :                     
(1)   77/   A3880 :                                     dephase
(1)   77/   A3880 :                     
(1)   77/   A3880 : =$A3880              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   77/   A3880 : =$A4000              mpadlbl := (mlastpos&$FFF800)+$800
(1)   77/   A3880 :  (MACRO-2)                           rompad mpadlbl
(1)   77/   A3880 : =$780                .this_sz := MPADLBL - *
(1)   77/   A3880 : 0000 0000 0000                              dc.b [.this_sz]0
            A3886 : 0000 0000 0000 
            A388C : 0000 0000 0000 
            A3892 : 0000 0000 0000 
            A3898 : 0000 0000 0000 
            A389E : 0000 0000 0000 
            A38A4 : 0000 0000 0000 
            A38AA : 0000 0000 0000 
            A38B0 : 0000 0000 0000 
            A38B6 : 0000 0000 0000 
            A38BC : 0000 0000 0000 
            A38C2 : 0000 0000 0000 
            A38C8 : 0000 0000 0000 
            A38CE : 0000 0000 0000 
            A38D4 : 0000 0000 0000 
            A38DA : 0000 0000 0000 
            A38E0 : 0000 0000 0000 
            A38E6 : 0000 0000 0000 
            A38EC : 0000 0000 0000 
            A38F2 : 0000 0000 0000 
            A38F8 : 0000 0000 0000 
            A38FE : 0000 0000 0000 
            A3904 : 0000 0000 0000 
            A390A : 0000 0000 0000 
            A3910 : 0000 0000 0000 
            A3916 : 0000 0000 0000 
            A391C : 0000 0000 0000 
            A3922 : 0000 0000 0000 
            A3928 : 0000 0000 0000 
            A392E : 0000 0000 0000 
            A3934 : 0000 0000 0000 
            A393A : 0000 0000 0000 
            A3940 : 0000 0000 0000 
            A3946 : 0000 0000 0000 
            A394C : 0000 0000 0000 
            A3952 : 0000 0000 0000 
            A3958 : 0000 0000 0000 
            A395E : 0000 0000 0000 
            A3964 : 0000 0000 0000 
            A396A : 0000 0000 0000 
            A3970 : 0000 0000 0000 
            A3976 : 0000 0000 0000 
            A397C : 0000 0000 0000 
            A3982 : 0000 0000 0000 
            A3988 : 0000 0000 0000 
            A398E : 0000 0000 0000 
            A3994 : 0000 0000 0000 
            A399A : 0000 0000 0000 
            A39A0 : 0000 0000 0000 
            A39A6 : 0000 0000 0000 
            A39AC : 0000 0000 0000 
            A39B2 : 0000 0000 0000 
            A39B8 : 0000 0000 0000 
            A39BE : 0000 0000 0000 
            A39C4 : 0000 0000 0000 
            A39CA : 0000 0000 0000 
            A39D0 : 0000 0000 0000 
            A39D6 : 0000 0000 0000 
            A39DC : 0000 0000 0000 
            A39E2 : 0000 0000 0000 
            A39E8 : 0000 0000 0000 
            A39EE : 0000 0000 0000 
            A39F4 : 0000 0000 0000 
            A39FA : 0000 0000 0000 
            A3A00 : 0000 0000 0000 
            A3A06 : 0000 0000 0000 
            A3A0C : 0000 0000 0000 
            A3A12 : 0000 0000 0000 
            A3A18 : 0000 0000 0000 
            A3A1E : 0000 0000 0000 
            A3A24 : 0000 0000 0000 
            A3A2A : 0000 0000 0000 
            A3A30 : 0000 0000 0000 
            A3A36 : 0000 0000 0000 
            A3A3C : 0000 0000 0000 
            A3A42 : 0000 0000 0000 
            A3A48 : 0000 0000 0000 
            A3A4E : 0000 0000 0000 
            A3A54 : 0000 0000 0000 
            A3A5A : 0000 0000 0000 
            A3A60 : 0000 0000 0000 
            A3A66 : 0000 0000 0000 
            A3A6C : 0000 0000 0000 
            A3A72 : 0000 0000 0000 
            A3A78 : 0000 0000 0000 
            A3A7E : 0000 0000 0000 
            A3A84 : 0000 0000 0000 
            A3A8A : 0000 0000 0000 
            A3A90 : 0000 0000 0000 
            A3A96 : 0000 0000 0000 
            A3A9C : 0000 0000 0000 
            A3AA2 : 0000 0000 0000 
            A3AA8 : 0000 0000 0000 
            A3AAE : 0000 0000 0000 
            A3AB4 : 0000 0000 0000 
            A3ABA : 0000 0000 0000 
            A3AC0 : 0000 0000 0000 
            A3AC6 : 0000 0000 0000 
            A3ACC : 0000 0000 0000 
            A3AD2 : 0000 0000 0000 
            A3AD8 : 0000 0000 0000 
            A3ADE : 0000 0000 0000 
            A3AE4 : 0000 0000 0000 
            A3AEA : 0000 0000 0000 
            A3AF0 : 0000 0000 0000 
            A3AF6 : 0000 0000 0000 
            A3AFC : 0000 0000 0000 
            A3B02 : 0000 0000 0000 
            A3B08 : 0000 0000 0000 
            A3B0E : 0000 0000 0000 
            A3B14 : 0000 0000 0000 
            A3B1A : 0000 0000 0000 
            A3B20 : 0000 0000 0000 
            A3B26 : 0000 0000 0000 
            A3B2C : 0000 0000 0000 
            A3B32 : 0000 0000 0000 
            A3B38 : 0000 0000 0000 
            A3B3E : 0000 0000 0000 
            A3B44 : 0000 0000 0000 
            A3B4A : 0000 0000 0000 
            A3B50 : 0000 0000 0000 
            A3B56 : 0000 0000 0000 
            A3B5C : 0000 0000 0000 
            A3B62 : 0000 0000 0000 
            A3B68 : 0000 0000 0000 
            A3B6E : 0000 0000 0000 
            A3B74 : 0000 0000 0000 
            A3B7A : 0000 0000 0000 
            A3B80 : 0000 0000 0000 
            A3B86 : 0000 0000 0000 
            A3B8C : 0000 0000 0000 
            A3B92 : 0000 0000 0000 
            A3B98 : 0000 0000 0000 
            A3B9E : 0000 0000 0000 
            A3BA4 : 0000 0000 0000 
            A3BAA : 0000 0000 0000 
            A3BB0 : 0000 0000 0000 
            A3BB6 : 0000 0000 0000 
            A3BBC : 0000 0000 0000 
            A3BC2 : 0000 0000 0000 
            A3BC8 : 0000 0000 0000 
            A3BCE : 0000 0000 0000 
            A3BD4 : 0000 0000 0000 
            A3BDA : 0000 0000 0000 
            A3BE0 : 0000 0000 0000 
            A3BE6 : 0000 0000 0000 
            A3BEC : 0000 0000 0000 
            A3BF2 : 0000 0000 0000 
            A3BF8 : 0000 0000 0000 
            A3BFE : 0000 0000 0000 
            A3C04 : 0000 0000 0000 
            A3C0A : 0000 0000 0000 
            A3C10 : 0000 0000 0000 
            A3C16 : 0000 0000 0000 
            A3C1C : 0000 0000 0000 
            A3C22 : 0000 0000 0000 
            A3C28 : 0000 0000 0000 
            A3C2E : 0000 0000 0000 
            A3C34 : 0000 0000 0000 
            A3C3A : 0000 0000 0000 
            A3C40 : 0000 0000 0000 
            A3C46 : 0000 0000 0000 
            A3C4C : 0000 0000 0000 
            A3C52 : 0000 0000 0000 
            A3C58 : 0000 0000 0000 
            A3C5E : 0000 0000 0000 
            A3C64 : 0000 0000 0000 
            A3C6A : 0000 0000 0000 
            A3C70 : 0000 0000 0000 
            A3C76 : 0000 0000 0000 
            A3C7C : 0000 0000 0000 
            A3C82 : 0000 0000 0000 
            A3C88 : 0000 0000 0000 
            A3C8E : 0000 0000 0000 
            A3C94 : 0000 0000 0000 
            A3C9A : 0000 0000 0000 
            A3CA0 : 0000 0000 0000 
            A3CA6 : 0000 0000 0000 
            A3CAC : 0000 0000 0000 
            A3CB2 : 0000 0000 0000 
            A3CB8 : 0000 0000 0000 
            A3CBE : 0000 0000 0000 
            A3CC4 : 0000 0000 0000 
            A3CCA : 0000 0000 0000 
            A3CD0 : 0000 0000 0000 
            A3CD6 : 0000 0000 0000 
            A3CDC : 0000 0000 0000 
            A3CE2 : 0000 0000 0000 
            A3CE8 : 0000 0000 0000 
            A3CEE : 0000 0000 0000 
            A3CF4 : 0000 0000 0000 
            A3CFA : 0000 0000 0000 
            A3D00 : 0000 0000 0000 
            A3D06 : 0000 0000 0000 
            A3D0C : 0000 0000 0000 
            A3D12 : 0000 0000 0000 
            A3D18 : 0000 0000 0000 
            A3D1E : 0000 0000 0000 
            A3D24 : 0000 0000 0000 
            A3D2A : 0000 0000 0000 
            A3D30 : 0000 0000 0000 
            A3D36 : 0000 0000 0000 
            A3D3C : 0000 0000 0000 
            A3D42 : 0000 0000 0000 
            A3D48 : 0000 0000 0000 
            A3D4E : 0000 0000 0000 
            A3D54 : 0000 0000 0000 
            A3D5A : 0000 0000 0000 
            A3D60 : 0000 0000 0000 
            A3D66 : 0000 0000 0000 
            A3D6C : 0000 0000 0000 
            A3D72 : 0000 0000 0000 
            A3D78 : 0000 0000 0000 
            A3D7E : 0000 0000 0000 
            A3D84 : 0000 0000 0000 
            A3D8A : 0000 0000 0000 
            A3D90 : 0000 0000 0000 
            A3D96 : 0000 0000 0000 
            A3D9C : 0000 0000 0000 
            A3DA2 : 0000 0000 0000 
            A3DA8 : 0000 0000 0000 
            A3DAE : 0000 0000 0000 
            A3DB4 : 0000 0000 0000 
            A3DBA : 0000 0000 0000 
            A3DC0 : 0000 0000 0000 
            A3DC6 : 0000 0000 0000 
            A3DCC : 0000 0000 0000 
            A3DD2 : 0000 0000 0000 
            A3DD8 : 0000 0000 0000 
            A3DDE : 0000 0000 0000 
            A3DE4 : 0000 0000 0000 
            A3DEA : 0000 0000 0000 
            A3DF0 : 0000 0000 0000 
            A3DF6 : 0000 0000 0000 
            A3DFC : 0000 0000 0000 
            A3E02 : 0000 0000 0000 
            A3E08 : 0000 0000 0000 
            A3E0E : 0000 0000 0000 
            A3E14 : 0000 0000 0000 
            A3E1A : 0000 0000 0000 
            A3E20 : 0000 0000 0000 
            A3E26 : 0000 0000 0000 
            A3E2C : 0000 0000 0000 
            A3E32 : 0000 0000 0000 
            A3E38 : 0000 0000 0000 
            A3E3E : 0000 0000 0000 
            A3E44 : 0000 0000 0000 
            A3E4A : 0000 0000 0000 
            A3E50 : 0000 0000 0000 
            A3E56 : 0000 0000 0000 
            A3E5C : 0000 0000 0000 
            A3E62 : 0000 0000 0000 
            A3E68 : 0000 0000 0000 
            A3E6E : 0000 0000 0000 
            A3E74 : 0000 0000 0000 
            A3E7A : 0000 0000 0000 
            A3E80 : 0000 0000 0000 
            A3E86 : 0000 0000 0000 
            A3E8C : 0000 0000 0000 
            A3E92 : 0000 0000 0000 
            A3E98 : 0000 0000 0000 
            A3E9E : 0000 0000 0000 
            A3EA4 : 0000 0000 0000 
            A3EAA : 0000 0000 0000 
            A3EB0 : 0000 0000 0000 
            A3EB6 : 0000 0000 0000 
            A3EBC : 0000 0000 0000 
            A3EC2 : 0000 0000 0000 
            A3EC8 : 0000 0000 0000 
            A3ECE : 0000 0000 0000 
            A3ED4 : 0000 0000 0000 
            A3EDA : 0000 0000 0000 
            A3EE0 : 0000 0000 0000 
            A3EE6 : 0000 0000 0000 
            A3EEC : 0000 0000 0000 
            A3EF2 : 0000 0000 0000 
            A3EF8 : 0000 0000 0000 
            A3EFE : 0000 0000 0000 
            A3F04 : 0000 0000 0000 
            A3F0A : 0000 0000 0000 
            A3F10 : 0000 0000 0000 
            A3F16 : 0000 0000 0000 
            A3F1C : 0000 0000 0000 
            A3F22 : 0000 0000 0000 
            A3F28 : 0000 0000 0000 
            A3F2E : 0000 0000 0000 
            A3F34 : 0000 0000 0000 
            A3F3A : 0000 0000 0000 
            A3F40 : 0000 0000 0000 
            A3F46 : 0000 0000 0000 
            A3F4C : 0000 0000 0000 
            A3F52 : 0000 0000 0000 
            A3F58 : 0000 0000 0000 
            A3F5E : 0000 0000 0000 
            A3F64 : 0000 0000 0000 
            A3F6A : 0000 0000 0000 
            A3F70 : 0000 0000 0000 
            A3F76 : 0000 0000 0000 
            A3F7C : 0000 0000 0000 
            A3F82 : 0000 0000 0000 
            A3F88 : 0000 0000 0000 
            A3F8E : 0000 0000 0000 
            A3F94 : 0000 0000 0000 
            A3F9A : 0000 0000 0000 
            A3FA0 : 0000 0000 0000 
            A3FA6 : 0000 0000 0000 
            A3FAC : 0000 0000 0000 
            A3FB2 : 0000 0000 0000 
            A3FB8 : 0000 0000 0000 
            A3FBE : 0000 0000 0000 
            A3FC4 : 0000 0000 0000 
            A3FCA : 0000 0000 0000 
            A3FD0 : 0000 0000 0000 
            A3FD6 : 0000 0000 0000 
            A3FDC : 0000 0000 0000 
            A3FE2 : 0000 0000 0000 
            A3FE8 : 0000 0000 0000 
            A3FEE : 0000 0000 0000 
            A3FF4 : 0000 0000 0000 
            A3FFA : 0000 0000 0000    
(1)   77/   A4000 : =$A4000              DATA_BNKSTAMP_E label *  ; <-- CD/CD32X ONLY
(1)   77/   A4000 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   78/   A4000 :                     
     385/   A4000 :                     
     386/   A4000 :                     ; ====================================================================
     387/   A4000 :                     ; ----------------------------------------------------------------
     388/   A4000 :                     ; Cartridge-ONLY Section, direct label access
     389/   A4000 :                     ;
     390/   A4000 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     391/   A4000 :                     ; ----------------------------------------------------------------
     392/   A4000 :                     
     420/   A4000 :                     
     421/   A4000 :                     ; ====================================================================
     422/   A4000 :                     ; ------------------------------------------------
     423/   A4000 :                     ; End
     424/   A4000 :                     ; ------------------------------------------------
     425/   A4000 :                     
     426/   A4000 :                     ROM_END:
     427/   A4000 : 00                  		dc.b 0
     428/   A4001 :                     		align $8000
     429/   A8000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 09/26/2024 03:18:27 AM


  Symbol Table (* = unused):
  --------------------------

 ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARTMARS_SISI :                FD00 C |  ARTMARS_TEST2D :            2008C0 C |
 ARTMARS_TEST2D_E :          217AC0 C |  ARTMARS_TESTART :                0 C |
 ART_FAIRYDODO :             22C994 C |  ART_FAIRYFIFI :             22D594 C |
 ART_FAIRYMIMI :             22CF94 C |  ART_HARUNA :                229594 C |
 ART_SISI :                  22C414 C |  ART_SISI_E :                22C994 C |
 ART_TESTBG :                2176F4 C |  ART_TESTBG2 :               21FD14 C |
 ART_TESTBG2_E :             229594 C |  ART_TESTBG_E :              21FD14 C |
 ASCII_FONT :                2152F4 C |  ASCII_FONT_W :              215EF4 C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - |  BITJOYA :                        6 - |
 BITJOYB :                        4 - | *BITJOYC :                        5 - |
 BITJOYDOWN :                     1 - |  BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - |  BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - |  BITJOYUP :                       0 - |
 BITJOYX :                        A - |  BITJOYY :                        9 - |
*BITJOYZ :                        8 - |  BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*BRMDEL :                         5 - | *BRMDIR :                         7 - |
*BRMFORMAT :                      6 - |  BRMINIT :                        0 - |
 BRMREAD :                        3 - |  BRMSERCH :                       2 - |
 BRMSTAT :                        1 - | *BRMVERIFY :                      8 - |
 BRMWRITE :                       4 - | *CACHE_MASTER :             6001E44 C |
*CACHE_MASTER_E :           6001E44 C |  CACHE_SLAVE :              6001E44 C |
 CACHE_SLAVE_E :            60024D8 C |  CACHSLV_CURRPAGE :             690 C |
 CACH_BKUP_LB :                 498 C |  CACH_BKUP_LPZ :                4C4 C |
 CACH_BKUP_S :                  4C4 C |  CACH_BKUP_SPZ :                4E0 C |
 CACH_DDA_LAST :                410 C |  CACH_DDA_SRC :                 420 C |
 CACH_DDA_SRC_L :               440 C |  CACH_DDA_SRC_R :               450 C |
 CACH_DDA_TOP :                 400 C |  CACH_LNDRW_L :                 460 C |
 CACH_LNDRW_S :                 498 C | *CASESENSITIVE :                  0 - |
*CBTCHKDISC :                     4 - | *CBTCHKSTAT :                     5 - |
*CBTINIT :                        0 - | *CBTINT :                         1 - |
*CBTIPDISC :                      6 - | *CBTIPSTAT :                      7 - |
*CBTOPENDISC :                    2 - | *CBTOPENSTAT :                    3 - |
*CBTSPDISC :                      8 - | *CBTSPSTAT :                      9 - |
*CDBCHK :                        80 - | *CDBPAUSE :                      84 - |
*CDBSTAT :                       81 - | *CDBTOCREAD :                    83 - |
*CDBTOCWRITE :                   82 - |  CDCACK :                        8D - |
 CDCREAD :                       8B - | *CDCSETMODE :                    96 - |
*CDCSTART :                      87 - | *CDCSTARTP :                     88 - |
 CDCSTAT :                       8A - |  CDCSTOP :                       89 - |
 CDCTRN :                        8C - |  CDPCM_CBLOCK :                  1E - |
 CDPCM_CLEN :                    14 - |  CDPCM_CREAD :                   18 - |
 CDPCM_ENV :                     21 - |  CDPCM_FLAGS :                    1 - |
 CDPCM_LEN :                     22 - |  CDPCM_LENGTH :                   C - |
 CDPCM_LOOP :                    10 - |  CDPCM_PAN :                     20 - |
 CDPCM_PITCH :                   1C - |  CDPCM_SLAST :                    8 - |
 CDPCM_START :                    4 - |  CDPCM_STATUS :                   0 - |
*CDPCM_STRMF :                    2 - |  CDPCM_STRMHALF :                 3 - |
 CDRAMDST :                      31 C |  CDRAMLEN :                      30 C |
 CDRAMSRC :                      33 C |  CDRAMSRCB :                     35 C |
 CDREGION :                       0 - |  CDSTAMP_CX :                     2 - |
 CDSTAMP_CY :                     4 - |  CDSTAMP_FLAGS :                  0 - |
 CDSTAMP_HGHT :                   C - |  CDSTAMP_LEN :                   20 - |
 CDSTAMP_MAP :                    1 - |  CDSTAMP_ROT :                   10 - |
 CDSTAMP_SCALE :                  E - |  CDSTAMP_WDTH :                   A - |
 CDSTAMP_X :                      6 - |  CDSTAMP_Y :                      8 - |
 CDSUB_PCM_INIT :              6BF2 C |  CDSUB_PCM_INIT.CLR_PWM :      6C06 C |
 CDSUB_PCM_INIT.COPY_DATA :    6C50 C |  CDSUB_PCM_INIT.DATA_BLK :     6C62 C |
 CDSUB_PCM_INIT.DATA_BLK_E :   6CA2 C |  CDSUB_PCM_INIT.WR_END :       6C12 C |
 CDSUB_PCM_PROCESS :           6D84 C |  CDSUB_PCM_PROCESS.EXIT_NOW :  6E00 C |
 CDSUB_PCM_PROCESS.GET_TABLE : 6D9C C |
 CDSUB_PCM_PROCESS.NEXT_PACKET :                                       6DCC C |
*CDSUB_PCM_PROCESS.NOT_NOW :   6E0C C |  CDSUB_PCM_PROCESS.NO_REQ :    6D9A C |
*CDSUB_PCM_PROCESS.TRNSFR_MODE :                                       6DA6 C |
 CDSUB_PCM_PROCESS.WAIT_MAIN : 6DEE C |
 CDSUB_PCM_PROCESS.WAIT_START :                                        6DB6 C |
 CDSUB_PCM_READTABLE :         6CA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYOFF :                                    6CDE C |
 CDSUB_PCM_READTABLE.CDCOM_KEYON :                                     6CE4 C |
*CDSUB_PCM_READTABLE.DONT_UPD :                                        6CDC C |
 CDSUB_PCM_READTABLE.EFFECT_MOD :                                      6D56 C |
 CDSUB_PCM_READTABLE.EFFECT_ONLY :                                     6D50 C |
 CDSUB_PCM_READTABLE.GET_TBL : 6CB2 C |  CDSUB_PCM_READTABLE.NO_COMM : 6CCC C |
 CDSUB_PCM_READTABLE.NO_KEYCUT :                                       6CC4 C |
 CDSUB_PCM_READTABLE.NO_KEYOFF :                                       6CBC C |
 CDSUB_PCM_READTABLE.WRT_FLAGS :                                       6D46 C |
 CDSUB_PCM_STREAM :            6E0E C |  CDSUB_PCM_STREAM.END_POINT :  6F1E C |
*CDSUB_PCM_STREAM.FAKE_FILL :  6FB0 C |  CDSUB_PCM_STREAM.FILL_BLANK : 70A8 C |
 CDSUB_PCM_STREAM.FIRST_FILL : 6F9E C |  CDSUB_PCM_STREAM.FORCE_OFF :  6E6C C |
 CDSUB_PCM_STREAM.GET_ADDR :   6E28 C |  CDSUB_PCM_STREAM.KEEP_STRM :  6E5E C |
 CDSUB_PCM_STREAM.LAST_SMPL :  6F52 C |  CDSUB_PCM_STREAM.LOOP_BLKL :  70B4 C |
*CDSUB_PCM_STREAM.LOOP_POINT : 6EF6 C |  CDSUB_PCM_STREAM.LOOP_STRM :  6F06 C |
 CDSUB_PCM_STREAM.LOWHALF :    6EA8 C |
 CDSUB_PCM_STREAM.MAKE_BLK_STRM :                                      6ED0 C |
 CDSUB_PCM_STREAM.MAKE_LBLK :  7012 C |  CDSUB_PCM_STREAM.NON_STRM :   6EB2 C |
 CDSUB_PCM_STREAM.NON_UPD :    6E62 C |  CDSUB_PCM_STREAM.NOT_FLOAT :  6E72 C |
 CDSUB_PCM_STREAM.RAN_OUT :    6EDA C |
 CDSUB_PCM_STREAM.SET_ENDLOOP :                                        6FE8 C |
 CDSUB_PCM_STREAM.SET_LMARK :  6F26 C |
 CDSUB_PCM_STREAM.SET_LOOPPNT :                                        6FFA C |
 CDSUB_PCM_STREAM.SET_MKLOOP : 7000 C |
 CDSUB_PCM_STREAM.SET_NONSTOP :                                        6FEE C |
 CDSUB_PCM_STREAM.SMALL_SAMPL :                                        6FDC C |
*CDSUB_PCM_STREAM.STLEN_IT :   6F58 C |  CDSUB_PCM_STREAM.STOP_PCM :   6EC8 C |
 CDSUB_PCM_STREAM.STRLEN_IT :  6F0E C |  CDSUB_PCM_STREAM.UPDATE_SET : 6F62 C |
 CDSUB_PCM_STREAM.WAVE_BLKL :  7028 C |  CDSUB_PCM_WAIT :              6BE6 C |
 CDSUB_PCM_WAVTOPCM :          70DA C |
 CDSUB_PCM_WAVTOPCM.WAVE_LIST :                                        70E4 C |
 CDSUB_SINEWAVE :              6A98 C |  CDSUB_SINEWAVE.LOC_7EFA :     6AA8 C |
 CDSUB_SINEWAVE.LOC_7F0C :     6ABA C |  CDSUB_SINEWAVE.SINE_DATA :    6AC0 C |
 CDSUB_SINEWAVE_COS :          6A94 C |  CDSUB_STAMPDEFAULTS :         6BCC C |
 CDSUB_STAMPINITSTUFF :        6BC0 C |  CDSUB_STAMPRENDER :           6520 C |
 CDSUB_STAMPRENDER.CLEAR_FRAME :                                       6A30 C |
 CDSUB_STAMPRENDER.DOTC_0 :    6A5E C |  CDSUB_STAMPRENDER.DOT_0 :     69DA C |
 CDSUB_STAMPRENDER.EXIT_LAST : 663C C |
 CDSUB_STAMPRENDER.EXIT_RENDER :                                       65DE C |
 CDSUB_STAMPRENDER.FLIP_TURN : 6590 C |  CDSUB_STAMPRENDER.INVALID :   6896 C |
 CDSUB_STAMPRENDER.LOOP_LIST : 65F0 C |  CDSUB_STAMPRENDER.MAKE_LIST : 65E2 C |
 CDSUB_STAMPRENDER.MAKE_STAMP :                                        6608 C |
 CDSUB_STAMPRENDER.MAKE_TRACE :                                        670C C |
 CDSUB_STAMPRENDER.MK_VARS :   689C C |  CDSUB_STAMPRENDER.NEXT_LINE : 67B2 C |
 CDSUB_STAMPRENDER.NO_BREAK :  6556 C |  CDSUB_STAMPRENDER.NO_STAMP :  65FE C |
 CDSUB_STAMPRENDER.NO_XL :     6790 C |  CDSUB_STAMPRENDER.NO_YL :     6798 C |
 CDSUB_STAMPRENDER.PROCESS_TRACE :                                     6972 C |
 CDSUB_STAMPRENDER.RESET_OUT : 6646 C |  CDSUB_STAMPRENDER.RETRY :     660C C |
 CDSUB_STAMPRENDER.RETURN_RET :                                        65BA C |
 CDSUB_STAMPRENDER.SPLUS :     6804 C |  CDSUB_STAMPRENDER.SPLUSV :    675C C |
 CDSUB_STAMPRENDER.TRACE_BLANK :                                       663E C |
 CDSUB_STAMPRENDER.WAIT_DONE : 653E C |  CDSUB_STAMPRENDER.WAIT_RET :  6548 C |
 CDSUB_STAMPRENDER.WAIT_RETE : 65CE C |  CDSUB_STAMPRENDER.XL_P :      686E C |
 CDSUB_STAMPRENDER.XR_P :      687A C |  CDSUB_STAMPRENDER.YL_P :      6874 C |
 CDSUB_STAMPRENDER.YR_P :      6880 C |  CHIP_ENV :                    12C7 C |
 CHIP_ENV.ATKEND :             134D C | *CHIP_ENV.ATKZERO :            1350 C |
 CHIP_ENV.CHK2 :               1356 C |  CHIP_ENV.CHK4 :               138B C |
 CHIP_ENV.CKOF :               12EE C |  CHIP_ENV.CKON :               1301 C |
*CHIP_ENV.DECTMR :             135A C |  CHIP_ENV.DKADD :              1374 C |
 CHIP_ENV.DKSAV :              137C C |  CHIP_ENV.DKYEND :             1381 C |
 CHIP_ENV.DO_NFREQ :           13E0 C |  CHIP_ENV.ENVPROC :            131F C |
 CHIP_ENV.KILLENV :            13A1 C | *CHIP_ENV.NBLOCK :             131F C |
 CHIP_ENV.NORMAL :             13DB C |  CHIP_ENV.NOUPD :              1421 C |
 CHIP_ENV.NSKIP :              1316 C |  CHIP_ENV.SILNC_3 :            13D7 C |
 CHIP_ENV.VEDLP :              13A9 C |  CHIP_ENV.VLMUCH :             140D C |
 CHIP_ENV.VLOOP :              12D6 C |  CHIP_ENV.VONLY :              1403 C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
 CMDINTCLR :                     1A - |  CMDIRQ_ON :                      2 - |
 COM :                            0 - |  COMM0 :                         20 - |
 COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - |  COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - |  COMM2 :                         22 - |
*COMM3 :                         23 - |  COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - |  COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFE974 - |
*CONTROLLER_2 :    FFFFFFFFFFFFE984 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
 CS3 :                      6000000 - |  CTREG :                          F - |
 CURRTICKBITS :                1CEF C | *CUSTOM :                         0 - |
 CYCLE :                         32 - | *DACINS_ARENA_01 :           208800 C |
*DACINS_ARENA_02 :           20AAEC C | *DACINS_ARENA_03 :           20CE98 C |
*DACINS_KICK :               20F218 C | *DACINS_SNARE :              20F6D0 C |
*DACINS_TIMPANI :            2105D4 C | *DACINS_WEGOT_CRASH :        212628 C |
*DACINS_WEGOT_KICK :         211EAC C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     145C C |
 DAC_ON :                      1447 C |  DAC_PLAY :                    1471 C |
 DAC_REFILL :                  14A5 C |  DAC_REFILL.DACFILL_END :      1564 C |
 DAC_REFILL.DACFILL_LOOP :     151D C |  DAC_REFILL.DACFILL_RET :      1567 C |
 DAC_REFILL.DAC_OVER :         14F3 C |  DATA_BANK0 :                 55800 C |
 DATA_BANK0_E :               85800 C |  DATA_BANK1 :                 85800 C |
 DATA_BANK1_E :               9D800 C |  DATA_BNKSTAMP :              9D800 C |
 DATA_BNKSTAMP_E :            A4000 C |  DATE :                "09/26/2024" - |
 DBUG_DAC :                       0 - |  DDACCNTR :                    1CF8 C |
 DDACFIFOMID :                 1CF4 C |  DDACPNTR :                    1CF5 C |
*DEF_HSIZE_128 :                100 - | *DEF_HSIZE_32 :                  40 - |
 DEF_HSIZE_64 :                  80 - |  DEF_MAXSTAMPCOUT :              60 - |
 DEF_PRINTPAL :                6000 - |  DEF_PRINTVRAM :                5A0 - |
 DEF_PRINTVRAMW :               4E0 - |  DEF_SAVEINFO :    FFFFFFFFFFFF2548 C |
 DEF_VRAM_BG :                 E000 - |  DEF_VRAM_FG :                 C000 - |
 DEF_VRAM_HSCRL :              FC00 - |  DEF_VRAM_SPR :                F800 - |
 DEF_VRAM_WD :                 D000 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
 DREQCTL :                        6 - |  DREQDEST :                       C - |
 DREQFIFO :                      12 - |  DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DREQ_BUFF0 :                   200 - |
 DREQ_BUFF1 :                   220 - |  DREQ_BUFF2 :                   620 - |
 DREQ_LEN :                     A20 - |  DREQ_PALETTE :                   0 - |
 DRVINIT :                       10 - | *DRVOPEN :                        A - |
 DRV_LOOP :                      54 C |  DRV_LOOP.CMND_0 :               ED C |
 DRV_LOOP.CMND_1 :               F0 C |  DRV_LOOP.CMND_2 :              109 C |
 DRV_LOOP.CMND_3 :              143 C |  DRV_LOOP.CMND_5 :              181 C |
 DRV_LOOP.CMND_6 :              1BA C |  DRV_LOOP.CMND_7 :              1F3 C |
 DRV_LOOP.CMND_RDSLOT :         211 C |  DRV_LOOP.DEL_ALL :             17A C |
 DRV_LOOP.GETCBYTEL :            C0 C |  DRV_LOOP.GRAB_ARG :             BE C |
 DRV_LOOP.LIST :                 DD C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT_CMD :             9B C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.NOT_PAL :             206 C |
 DRV_LOOP.SRCH_DEL :            161 C |  DRV_LOOP.SRCH_FVOL :           19F C |
 DRV_LOOP.SRCH_MODE :           129 C |  DRV_LOOP.SRCH_SLOT :           223 C |
 DRV_LOOP.SRCH_VOL :            1D8 C |  DRV_LOOP.WRTTO_DEL :           16E C |
 DRV_LOOP.WRTTO_FVOL :          1AC C |  DRV_LOOP.WRTTO_SLOT :          138 C |
 DRV_LOOP.WRTTO_VOL :           1E5 C |  DRWSLD_NEXTPZ :            6001DE2 C |
 DRWSLD_NXTLINE :           6001D3E C |  DRWSLD_NXTLINE.L_FIX :     6001D86 C |
 DRWSLD_NXTLINE.REVERS :    6001D70 C |  DRWSLD_NXTLINE.R_FIX :     6001D80 C |
 DRWSLD_NXTLINE_TEX :       6001BC8 C |
 DRWSLD_NXTLINE_TEX.FROM_ROM :                                      6001C8A C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                                 6001CDA C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                                     6001C92 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                                        6001C52 C |
 DRWSLD_NXTLINE_TEX.TRNS2 : 6001CC8 C |
 DRWSLD_NXTLINE_TEX.TRNS_1 :                                        6001CA8 C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                                        6001C3E C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                                      6001C10 C |
 DRWSLD_NXTLINE_TEX.W_FB :  6001C8C C |  DRWSLD_UPDLINE :           6001DD8 C |
 DRWSLD_UPDLINE_TEX :       6001CF4 C |  DRWTASK_EXIT :             6001E1E C |
 DRWTASK_PURGE :            6001E02 C |  DRWTASK_RETURN :           6001E02 C |
 DRWTEX_NEXTPZ :            6001D10 C | *DRWTSK1_NEWPZ :            6001B34 C |
 DRWTSK1_NEWPZ.INVLD_Y :    6001B5E C |  DRWTSK1_NEWPZ.LEN_MAX :    6001B58 C |
*DRWTSK1_NEWPZ.NO_PZ :      6001B64 C |  DRWTSK1_NEWPZ.VALID_Y :    6001B68 C |
 DRWTSK_SOLIDMODE :         6001D2C C |  DRWTSK_SOLIDMODE.WAIT :    6001D38 C |
 DRWTSK_TEXMODE :           6001BA8 C |  DRWTSK_TEXMODE.TEX_VALID : 6001BB4 C |
 DTBL_MULTI :                   807 C |  DTBL_SINGL :                   81D C |
 DTBL_SINGL.CHNL_ULNK :        101B C |  DTBL_SINGL.CHNL_ULNKCUT :     1015 C |
 DTBL_SINGL.CHNL_ULNKOFF :     101B C |  DTBL_SINGL.COMN_PANLIST :      DD4 C |
 DTBL_SINGL.DAC_CUT :           B7D C |  DTBL_SINGL.DAC_OFF :           B83 C |
 DTBL_SINGL.DAC_PITCH :         B86 C |  DTBL_SINGL.D_CONT :            D86 C |
 DTBL_SINGL.EFFC :              CF3 C |  DTBL_SINGL.EFFC_D :            D0E C |
 DTBL_SINGL.EFFC_E :            D51 C |  DTBL_SINGL.EFFC_F :            D66 C |
 DTBL_SINGL.EFFC_X :            D87 C |  DTBL_SINGL.FINE_DOWN :         D29 C |
 DTBL_SINGL.FINE_UP :           D3D C |  DTBL_SINGL.FM_CINDX :          B4D C |
 DTBL_SINGL.FM_CUT :            A42 C |  DTBL_SINGL.FM_HASVOL :         FB0 C |
 DTBL_SINGL.FM_KEYOFF :         A5C C |  DTBL_SINGL.FM_OFF :            A3C C |
 DTBL_SINGL.FM_SETFREQ :        A7B C |  DTBL_SINGL.FM_SETRLIST :       EC3 C |
 DTBL_SINGL.FM_TLOFF :          A64 C |  DTBL_SINGL.FND_OCT :          1000 C |
 DTBL_SINGL.FROM_PSGN :         939 C |  DTBL_SINGL.GET_OCT :           FF6 C |
 DTBL_SINGL.INST :              E05 C |  DTBL_SINGL.INS_DAC :           ED7 C |
 DTBL_SINGL.INS_FM :            E66 C |  DTBL_SINGL.INS_PCM :           F2B C |
 DTBL_SINGL.INS_PSG :           E30 C |  DTBL_SINGL.INS_PSGN :          E2A C |
 DTBL_SINGL.INS_PWM :           F63 C | *DTBL_SINGL.INVL_INS :          E29 C |
 DTBL_SINGL.KEEP_TLMX :         B42 C |  DTBL_SINGL.KYCUT_PSG :         907 C |
 DTBL_SINGL.KYCUT_PSGN :        904 C |  DTBL_SINGL.KYOFF_PSG :         8FA C |
 DTBL_SINGL.KYOFF_PSGN :        8F7 C |  DTBL_SINGL.KYPSGN_HATOFF :     911 C |
 DTBL_SINGL.LINKED :            887 C |  DTBL_SINGL.MKFM_NEW :          985 C |
 DTBL_SINGL.MKFM_SET :          A92 C |  DTBL_SINGL.MKFM_UPD :          9B5 C |
*DTBL_SINGL.MKPCM_PROC :        BEA C |  DTBL_SINGL.MKPCM_WRTON :       BE7 C |
 DTBL_SINGL.MK_DAC :            B55 C |  DTBL_SINGL.MK_FM :             97C C |
 DTBL_SINGL.MK_FMSPC :          9F0 C |  DTBL_SINGL.MK_LIST :           8C2 C |
 DTBL_SINGL.MK_PCM :            BAC C |  DTBL_SINGL.MK_PSG :            918 C |
 DTBL_SINGL.MK_PSGN :           8D0 C |  DTBL_SINGL.MK_PWM :            C47 C |
 DTBL_SINGL.MP_RESET :          BE5 C |  DTBL_SINGL.NEW_ROMDAT :        EA5 C |
*DTBL_SINGL.NOFM_NOTE :         9EF C |  DTBL_SINGL.NORM_DOWN :         D27 C |
 DTBL_SINGL.NORM_UP :           D3F C |  DTBL_SINGL.NOTE :              FA6 C |
 DTBL_SINGL.NOT_DAC :           99D C |  DTBL_SINGL.NOT_DSPC :          9B2 C |
 DTBL_SINGL.NOT_PAL :           9D2 C |  DTBL_SINGL.NOT_PALP :          94E C |
 DTBL_SINGL.NO_LFO :            B30 C |  DTBL_SINGL.N_FM :              FEC C |
 DTBL_SINGL.N_INDX :            FD8 C |  DTBL_SINGL.N_PSGN :            FE7 C |
 DTBL_SINGL.N_STFREQ :          FD9 C |  DTBL_SINGL.PAN_MCD :           DB7 C |
 DTBL_SINGL.PCM_CUT :           C38 C |  DTBL_SINGL.PCM_EFFC :          BD7 C |
 DTBL_SINGL.PCM_NOTE :          BDB C |  DTBL_SINGL.PCM_OFF :           C31 C |
 DTBL_SINGL.PCM_PANLIST :       DDC C |  DTBL_SINGL.PCM_SETCOFF :       C3D C |
 DTBL_SINGL.PSG_KEYON :         967 C |  DTBL_SINGL.PWM_CUT :           CC4 C |
 DTBL_SINGL.PWM_OFF :           CBD C |  DTBL_SINGL.PWM_SETCOFF :       CC9 C |
 DTBL_SINGL.PW_EFFC :           C73 C |  DTBL_SINGL.PW_NOTE :           C77 C |
 DTBL_SINGL.PW_SEND :           C79 C |  DTBL_SINGL.RCYL_COM :          872 C |
 DTBL_SINGL.READFREQ_PCM :      CD3 C |  DTBL_SINGL.READFREQ_PWM :      CD8 C |
 DTBL_SINGL.RES_PAN :           DAD C |  DTBL_SINGL.SAME_PATCH :        ED2 C |
 DTBL_SINGL.SAVE_ARG :          D7B C |  DTBL_SINGL.SET_WAVFREQ :       CDB C |
 DTBL_SINGL.SILN_DAC :          87E C |  DTBL_SINGL.SILN_FM :           881 C |
 DTBL_SINGL.SILN_PCM :          85C C |  DTBL_SINGL.SILN_PSG :          855 C |
 DTBL_SINGL.SILN_PSG_N :        851 C |  DTBL_SINGL.SILN_PWM :          868 C |
 DTBL_SINGL.THIS_REGS :         A34 C |  DTBL_SINGL.TL_DOWN :           A70 C |
 DTBL_SINGL.VMUCH :             976 C |  DTBL_SINGL.VOLU :              DFC C |
 DTBL_SINGL.VOL_DVLD :          D4D C |  DTBL_SINGL.VPCM_CARRY :        C1D C |
 DTBL_SINGL.VPCM_SILN :         C1A C |  DTBL_SINGL.VPCM_ZERO :         C1E C |
 DTBL_SINGL.VPWM_MUCH :         C97 C |  DTBL_SINGL.VPWM_SILN :         C95 C |
 DTBL_SINGL.WRITE_TL :          B3B C |  DTBL_SINGL.WR_SPC :            A17 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C |  EMU :                            0 - |
 ENV :                            1 - |  EXTINT_DEFAULT :  FFFFFFFFFFFF20FC C |
*EXT_3 :                          C - | *EXT_4 :                          E - |
 FALSE :                          0 - |  FDH :                            7 - |
 FDL :                            5 - |  FDRCHG :                        86 - |
 FDRSET :                        85 - | *FEN :                            2 - |
 FILEN_MARSCODE :              2B50 C |  FILEN_Z80FILE :               2B42 C |
 FILE_SUBDATA :                6080 C | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - |  FM :                            80 - |
 FMCACH_1 :                    17B1 C |  FMCACH_2 :                    17D9 C |
 FMCACH_3 :                    1801 C |  FMCACH_4 :                    1829 C |
 FMCACH_5 :                    1851 C |  FMCACH_6 :                    1879 C |
 FMCACH_LIST :                 19F2 C |  FMFREQ_LIST :                 1575 C |
*FMINS_BASS_BIG_110 :        207C6A C | *FMINS_BASS_BIG_114 :        207C8A C |
*FMINS_BASS_BIG_122 :        207CAA C | *FMINS_BASS_BIG_81 :         207C4A C |
*FMINS_BASS_CAVE_47 :        207CCA C | *FMINS_BASS_CLUB :           20840A C |
*FMINS_BASS_CLUB_108 :       207CEA C | *FMINS_BASS_DUCK :           2083AA C |
*FMINS_BASS_FOOT_75 :        207D0A C | *FMINS_BASS_GEM_26 :         207D2A C |
 FMINS_BASS_GROOVE_1 :       207DEA C | *FMINS_BASS_GROOVE_119 :     207D4A C |
*FMINS_BASS_GROOVE_2 :       20842A C | *FMINS_BASS_HEAVY_107 :      207D6A C |
*FMINS_BASS_HEAVY_118 :      207D8A C | *FMINS_BASS_LOUD_117 :       207DAA C |
*FMINS_BASS_LOW81 :          2080AA C | *FMINS_BASS_LOW_103 :        207E2A C |
*FMINS_BASS_LOW_106 :        207E4A C | *FMINS_BASS_LOW_126 :        207E6A C |
*FMINS_BASS_LOW_46 :         207DCA C | *FMINS_BASS_LOW_81 :         207E0A C |
*FMINS_BASS_MID_111 :        207ECA C | *FMINS_BASS_MID_19 :         207E8A C |
*FMINS_BASS_MID_80 :         207EAA C | *FMINS_BASS_POWER_123 :      207EEA C |
*FMINS_BASS_SILENT_53 :      207F0A C | *FMINS_BASS_SLAP_10 :        207F2A C |
*FMINS_BASS_SLAP_105 :       207F4A C | *FMINS_BASS_SYNTH_60 :       207F6A C |
*FMINS_BASS_SYNTH_61 :       207F8A C | *FMINS_BASS_SYNTH_72 :       207FAA C |
*FMINS_BASS_SYNTH_73 :       207FCA C | *FMINS_BASS_VLOW_74 :        207FEA C |
*FMINS_BELL_MID36 :          20810A C | *FMINS_BRASS_7 :             20846A C |
*FMINS_CLOSEDHAT :           2083CA C | *FMINS_DRUMS_KICK1 :         20832A C |
*FMINS_DRUM_KICK :           20812A C | *FMINS_FLAUTE_1 :            20802A C |
*FMINS_HATS_1 :              2080EA C | *FMINS_HBEAT_TOM :           20836A C |
 FMINS_ORGAN_DRAWBAR :       20800A C | *FMINS_PIANO_AQUA :          20834A C |
*FMINS_PSYNTH_PLUS :         20844A C | *FMINS_SP_CLOSEDHAT :        2082DA C |
*FMINS_SP_COWBELL :          208302 C | *FMINS_SP_OPENHAT :          2082B2 C |
 FMINS_TRUMPET_1 :           20838A C | *FMINS_TRUMPET_15 :          2080CA C |
*FMINS_TRUMPET_CARNIVAL :    2083EA C |  FMINS_VIBRAPHONE_1 :        20804A C |
*FMINS_VIBRAPHONE_2 :        20806A C | *FMINS_XYLOPHONE :           20808A C |
 FMLIST_RSAVE :                18A1 C |  FMSPECIAL :                   1CEB C |
*FMSPINS_CLACK_1 :           20814A C | *FMSPINS_COWBELL_H :         208172 C |
*FMSPINS_COWBELL_L :         20819A C | *FMSPINS_HATS_HQ :           2081C2 C |
*FMSPINS_SFX_ALIEN :         2081EA C | *FMSPINS_SFX_KNCKBUZZ :      208212 C |
*FMSPINS_SFX_KNOCK_H :       20823A C | *FMSPINS_SFX_KNOCK_L :       208262 C |
*FMSPINS_SFX_LASER :         20828A C |  FM_AUTOREG :                  142D C |
 FM_SEND_1 :                   1431 C |  FM_SEND_2 :                   143C C |
 FRAMECLEAR :                  2988 C |  FRAMECLEAR.FEN0 :             29B2 C |
 FRAMECLEAR.FILL0 :            29A8 C |  FRAMECLEAR.FM1 :              2992 C |
 FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF0170 C |
 GEMADMARESUME :   FFFFFFFFFFFF018E C | *GEMAFADESEQ :     FFFFFFFFFFFF0222 C |
 GEMAINIT :        FFFFFFFFFFFF0000 C |
 GEMAINIT.CLEANUP :                                        FFFFFFFFFFFF002C C |
 GEMAINIT.COPY :   FFFFFFFFFFFF003C C |
 GEMAINIT.NOT_PAL :                                        FFFFFFFFFFFF0062 C |
 GEMAINIT.WAIT :   FFFFFFFFFFFF0014 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :     FFFFFFFFFFFF01CC C |  GEMARESET :       FFFFFFFFFFFF0076 C |
 GEMASETBEATS :    FFFFFFFFFFFF025A C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01BA C |
*GEMASETSEQVOL :   FFFFFFFFFFFF023E C |  GEMASTOPALL :     FFFFFFFFFFFF0206 C |
 GEMASTOPSEQ :     FFFFFFFFFFFF01EA C | *GEMATEST :        FFFFFFFFFFFF01AC C |
 GEMAUPDATE :      FFFFFFFFFFFF0088 C |
 GEMAUPDATE.COPY_BYTES :                                   FFFFFFFFFFFF00C6 C |
 GEMAUPDATE.NO_SIZE :                                      FFFFFFFFFFFF00D4 C |
 GEMAUPDATE.NO_TASK :                                      FFFFFFFFFFFF00DA C |
 GEMA_INIT :                   1180 C |  GEMA_INIT.END_SETUP :         11BB C |
 GEMA_INIT.SETUP_LIST :        1190 C |  GEMA_INIT.ST_COPY :           11AF C |
 GEMA_LASTBANK :               156B C |  GEMA_LASTBANK.WRITE :         1570 C |
 GET_TICK :                    11EC C |  GET_TICK.CTNOTICK :           1209 C |
 GLBL_LASTORG :    FFFFFFFFFFFFB800 - |  GLBL_LASTPC :     FFFFFFFFFFFF2C00 - |
 GLBL_MDATA_RP :               6080 - |  GLBL_MDATA_ST :             200000 - |
 GO_DRWSLD_UPDLINE_TEX :    6001BA0 C |  GO_DRWTEX_GONXTPZ :        6001BA4 C |
 GTRK_TEST :                 200004 C |  GTRK_TEST.BLK :             200012 C |
 GTRK_TEST.INS :             207BC2 C |  GTRK_TEST.PAT :             200023 C |
 G_MSTRMODE_INITEXIT :      6000C78 C |  G_MSTR_COPYPALETTE :       6000C74 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   1D09 C |
 HEADEROUT_E :                 1D17 C |  HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF20FA C |
*HIRQ_ON :                        4 - |  HOT_START :                   2976 C |
*HTAG_CDSAVE :        "NIKONACD___" - |  HTAG_CDVER :                   102 - |
 HTAG_DATEINFO : "(C)USER 2024.???" - | *HTAG_DISCID :        "NIKONACD   " - |
 HTAG_DISCID_M :      "NIKONACD32X" - |  HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
 HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
*HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
 HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
*HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
 HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
 HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
 ICDALLEND :                   29F0 C |  ICDALLEND.MASTER :            2A7E C |
 ICDALLEND.SEND_CODE :         2A5C C |  ICDALLEND.SEND_HALF :         2A26 C |
 ICDALLEND.SEND_HEAD :         2A4A C |  ICDALLEND.SLAVE :             2A88 C |
 ICDALLEND.SOFT_RESET :        2AA4 C |  ICDALLEND.WAIT_ADAPTER :      2A6A C |
 ICDALLEND.WAIT_CDFB :         2A62 C |  ICDALLEND.WAIT_F0 :           2A34 C |
 ICDALLEND.WAIT_F0FB :         2A2C C |  ICDALLEND.WAIT_F1 :           2A0C C |
 ICDALLEND.WAIT_F1FB :         2A04 C |  ICDALLEND.WAIT_FB :           29FE C |
 ICDALLEND.WAIT_MSTR :         2A92 C |  ICDALLEND.WAIT_SH2 :          2AB4 C |
 ICDALLEND.WAIT_SLV :          2A98 C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - |  INSTLISTOUT :                 1F66 C |
*INSUPMODE :                      1 - | *INTMASK :                        1 - |
 INT_M_LIST :               60002A0 C |  INT_S_LIST :               60002E0 C |
 IP_END :                       38E C |  IP_START :                     356 C |
 IP_START.WAIT :                366 C |  IP_START.WAIT_VINT :           376 C |
 ISOFILELIST :                 B844 C |  ISOFILELIST_E :               C000 C |
 ISO_FILELIST :                7AFC C |  ISO_OUTPUT :                  C2FC C |
 JOYA :                          40 - |  JOYB :                          10 - |
 JOYC :                          20 - |  JOYDOWN :                        2 - |
*JOYID_MD :                       D - | *JOYID_MOUSE :                    3 - |
*JOYID_MS :                       F - |  JOYLEFT :                        4 - |
*JOYMODE :                      800 - | *JOYPEN :                        80 - |
*JOYRED :                        10 - |  JOYRIGHT :                       8 - |
 JOYSTART :                      80 - |  JOYUP :                          1 - |
 JOYX :                         400 - |  JOYY :                         200 - |
 JOYZ :                         100 - |  LCHWIDTH :                      34 - |
*LEDSET :                        95 - |  LEV :                            4 - |
*LISTON :                         3 - |  LITERAL_F_00000000_1 :     60004DC C |
 LITERAL_F_00000001_1 :     6000718 C |  LITERAL_F_00000002_1 :     600071C C |
 LITERAL_F_00000003_1 :     600073C C |  LITERAL_F_00000004_1 :     6000740 C |
 LITERAL_F_00000005_1 :     6000724 C |  LITERAL_F_00000006_1 :     6000742 C |
 LITERAL_F_00000007_1 :     6000744 C |  LITERAL_F_00000008_1 :     600072C C |
 LITERAL_F_00000009_1 :     6000734 C |  LITERAL_F_0000000A_1 :     6000738 C |
 LITERAL_F_0000000B_1 :     6000746 C |  LITERAL_F_0000000C_1 :     6000748 C |
 LITERAL_F_0000000D_1 :     60007BC C |  LITERAL_F_0000000E_1 :     60008A8 C |
 LITERAL_F_0000000F_1 :     60008B0 C |  LITERAL_F_00000010_1 :     60008B4 C |
 LITERAL_F_00000011_1 :     60008B8 C |  LITERAL_F_00000012_1 :     6000C66 C |
 LITERAL_F_00000013_1 :     6000C68 C |  LITERAL_F_00000014_1 :     6000C5C C |
 LITERAL_F_00000015_1 :     6000C70 C |  LITERAL_F_00000016_1 :     6000C60 C |
 LITERAL_F_00000017_1 :     6000CE8 C |  LITERAL_F_00000018_1 :     6000CEC C |
 LITERAL_F_00000019_1 :     6000E88 C |  LITERAL_F_0000001A_1 :     6000E8C C |
 LITERAL_F_0000001B_1 :     6000E90 C |  LITERAL_F_0000001C_1 :     6000E94 C |
 LITERAL_F_0000001D_1 :     6000EA0 C |  LITERAL_F_0000001E_1 :     6000EA4 C |
 LITERAL_F_0000001F_1 :     6000EA8 C |  LITERAL_F_00000020_1 :     6000EAC C |
 LITERAL_F_00000021_1 :     6000EB0 C |  LITERAL_F_00000022_1 :     6000EB4 C |
 LITERAL_F_00000023_1 :     6000F6C C |  LITERAL_F_00000024_1 :     6000F70 C |
 LITERAL_F_00000025_1 :     6000F8A C |  LITERAL_F_00000026_1 :     6000F74 C |
 LITERAL_F_00000027_1 :     6000FEC C |  LITERAL_F_00000028_1 :     6000FF0 C |
 LITERAL_F_00000029_1 :     6000FF4 C |  LITERAL_F_0000002A_1 :     60010B8 C |
 LITERAL_F_0000002B_1 :     60010BC C |  LITERAL_F_0000002C_1 :     600128C C |
 LITERAL_F_0000002D_1 :     6001290 C |  LITERAL_F_0000002E_1 :     6001434 C |
 LITERAL_F_0000002F_1 :     6001538 C |  LITERAL_F_00000030_1 :     6001628 C |
 LITERAL_F_00000031_1 :     600162C C |  LITERAL_F_00000032_1 :     600183C C |
 LITERAL_F_00000033_1 :     6001840 C |  LITERAL_F_00000034_1 :     6001844 C |
 LITERAL_F_00000035_1 :     600184C C |  LITERAL_F_00000036_1 :     6001850 C |
 LITERAL_F_00000037_1 :     6001854 C |  LITERAL_F_00000038_1 :     6001A1C C |
 LITERAL_F_00000039_1 :     6001A20 C |  LITERAL_F_0000003A_1 :     6001A24 C |
 LITERAL_F_0000003B_1 :     6001A28 C |  LITERAL_F_0000003C_1 :     6001A2C C |
 LITERAL_F_0000003D_1 :     6001A30 C |  LITERAL_F_0000003E_1 :     6001A34 C |
 LITERAL_F_0000003F_1 :     6001A38 C |  LITERAL_F_00000040_1 :     6001B88 C |
 LITERAL_F_00000041_1 :     6001B8C C |  LITERAL_F_00000042_1 :     6001B90 C |
 LITERAL_F_00000043_1 :     6001D14 C |  LITERAL_F_00000044_1 :     6001D1C C |
 LITERAL_F_00000045_1 :     6001D24 C |  LITERAL_F_00000046_1 :     6001E38 C |
 LITERAL_F_00000047_1 :         144 C |  LITERAL_F_00000048_1 :         1BC C |
 LITERAL_F_00000049_1 :         1C0 C |  LITERAL_F_0000004A_1 :         1C4 C |
 LITERAL_F_0000004B_1 :         1C8 C |  LITERAL_F_0000004C_1 :         1CC C |
 LITERAL_F_0000004D_1 :         1D0 C |  LITERAL_F_0000004E_1 :         1D4 C |
 LITERAL_F_0000004F_1 :         1D8 C |  LITERAL_F_00000050_1 :         1DC C |
 LITERAL_F_00000051_1 :         1E0 C |  LITERAL_F_00000052_1 :         310 C |
 LITERAL_F_00000053_1 :         394 C |  LITERAL_F_00000054_1 :         534 C |
 LITERAL_F_00000055_1 :         678 C |  LITERAL_F_00000056_1 :         680 C |
 LITERAL_F_00000057_1 :         684 C |  LITERAL_L_00008000_1 :         30C C |
 LITERAL_L_0001FF00_1 :         148 C |  LITERAL_L_00A00000_1 :         67C C |
 LITERAL_L_02000000_1 :     6000720 C |  LITERAL_L_06000000_1 :     60004C4 C |
 LITERAL_L_06000000_2 :     6000894 C |  LITERAL_L_06000128_1 :     6000F64 C |
 LITERAL_L_0601FFC8_1 :     600089C C |  LITERAL_L_06040000_1 :     60008A0 C |
 LITERAL_L_20000000_1 :     60004C8 C |  LITERAL_L_20004000_1 :     60004C0 C |
 LITERAL_L_20004000_2 :     60007B0 C |  LITERAL_L_20004000_3 :     60008BC C |
 LITERAL_L_20004000_4 :     6000A8C C |  LITERAL_L_20004000_5 :     6000C54 C |
 LITERAL_L_20004000_6 :     6000CF0 C |  LITERAL_L_20004000_7 :     6000E7C C |
 LITERAL_L_20004000_8 :     6000F78 C |  LITERAL_L_20004000_9 :     60010B4 C |
 LITERAL_L_20004012_1 :     60004CC C |  LITERAL_L_20004016_1 :     60004D4 C |
 LITERAL_L_20004016_2 :     60007AC C |  LITERAL_L_20004018_1 :     60004D0 C |
 LITERAL_L_20004018_2 :     60007A8 C |  LITERAL_L_2000401A_1 :     60004BC C |
 LITERAL_L_2000401A_2 :     6000548 C |  LITERAL_L_2000401C_1 :     60004B8 C |
 LITERAL_L_2000401C_2 :         13C C |  LITERAL_L_20004020_1 :     60008AC C |
 LITERAL_L_20004020_2 :     6000938 C |  LITERAL_L_20004020_3 :     6000F68 C |
 LITERAL_L_20004021_1 :     6000FE4 C |  LITERAL_L_20004022_1 :     6000378 C |
 LITERAL_L_20004024_1 :     600037C C |  LITERAL_L_20004028_1 :     6000728 C |
 LITERAL_L_2000402C_1 :     60004B4 C |  LITERAL_L_2000402C_2 :     600093C C |
 LITERAL_L_2000402C_3 :     6000AA0 C |  LITERAL_L_2000402C_4 :     6000CE0 C |
 LITERAL_L_2000402C_5 :     6000F7C C |  LITERAL_L_2000402D_1 :     6000940 C |
 LITERAL_L_2000402D_2 :     6000A94 C |  LITERAL_L_2000402D_3 :     6000CF8 C |
 LITERAL_L_2000402E_1 :     600054C C |  LITERAL_L_2000402E_2 :     6000730 C |
 LITERAL_L_2000402E_3 :     60007B4 C |  LITERAL_L_2000402E_4 :     60008C0 C |
 LITERAL_L_2000402E_5 :     6000A98 C |  LITERAL_L_2000402E_6 :     6000CE4 C |
 LITERAL_L_2000402E_7 :     6000E84 C |  LITERAL_L_2000402E_8 :     6000FE8 C |
 LITERAL_L_2000402F_1 :     6000E98 C |  LITERAL_L_2000402F_2 :     6000FF8 C |
 LITERAL_L_20004034_1 :         14C C |  LITERAL_L_20004038_1 :         140 C |
 LITERAL_L_20004100_1 :     6000898 C |  LITERAL_L_20004100_2 :     6000A90 C |
 LITERAL_L_20004100_3 :     6000C58 C |  LITERAL_L_20004100_4 :     6000CF4 C |
 LITERAL_L_20004100_5 :     6000E80 C |  LITERAL_L_20004100_6 :     600114C C |
 LITERAL_L_20004100_7 :     6001B84 C |  LITERAL_L_20004100_8 :     6001D20 C |
 LITERAL_L_20004100_9 :     6001E34 C |  LITERAL_L_20004200_1 :     6000EB8 C |
 LITERAL_L_24000000_1 :     60008A4 C |  LITERAL_L_24000000_2 :     6000A9C C |
 LITERAL_L_24000000_3 :     6000E9C C |  LITERAL_L_24000000_4 :     6001150 C |
 LITERAL_L_24000000_5 :     60011D4 C |  LITERAL_L_24000000_6 :     6001624 C |
 LITERAL_L_24020000_1 :     6001430 C |  LITERAL_L_24020200_1 :     6001D18 C |
 LITERAL_L_4D5F4F4B_1 :     60004E0 C |  LITERAL_L_535F4F4B_1 :     60007C0 C |
 LITERAL_L_7FFFFFFF_1 :     6001848 C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000AA4 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     600104C C |
 LITERAL_L_FFFFFFFFC00007F8_1 :                                     60004D8 C |
 LITERAL_L_FFFFFFFFC00007F8_2 :                                     60007B8 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     6000890 C |
 LITERAL_L_FFFFFFFFC0000800_2 :                                     6000F60 C |
 LITERAL_W_0080_1 :         6000AAC C |  LITERAL_W_0080_2 :         6000D00 C |
 LITERAL_W_0080_3 :             152 C |  LITERAL_W_00A0_1 :         6001B96 C |
 LITERAL_W_00A1_1 :         6000EC6 C |  LITERAL_W_00A2_1 :         600115E C |
 LITERAL_W_00C0_1 :         6000AAE C |  LITERAL_W_00C0_2 :         6000EC2 C |
 LITERAL_W_00E0_1 :         600115C C |  LITERAL_W_00F0_1 :         60004F2 C |
 LITERAL_W_00F0_2 :         60007CA C |  LITERAL_W_00F0_3 :         6000C72 C |
 LITERAL_W_00F0_4 :         6000EC8 C |  LITERAL_W_00FF_1 :         6000C6E C |
 LITERAL_W_0100_1 :         6000EBE C |  LITERAL_W_0100_2 :         6001156 C |
 LITERAL_W_0100_3 :             1E4 C |  LITERAL_W_0100_4 :             538 C |
 LITERAL_W_0105_1 :         60010C0 C |  LITERAL_W_0140_1 :         6000C6A C |
 LITERAL_W_0140_2 :         600115A C |  LITERAL_W_0160_1 :         6001154 C |
 LITERAL_W_0180_1 :         6000AB0 C |  LITERAL_W_01F0_1 :         6001296 C |
 LITERAL_W_01FF_1 :         6000C6C C |  LITERAL_W_01FF_2 :         6001632 C |
 LITERAL_W_0200_1 :         600073E C |  LITERAL_W_0200_2 :         6000AB2 C |
 LITERAL_W_0200_3 :         6000C64 C |  LITERAL_W_0200_4 :         6000EC4 C |
 LITERAL_W_0200_5 :         60010C4 C |  LITERAL_W_0200_6 :         6001158 C |
 LITERAL_W_0200_7 :         600153E C |  LITERAL_W_0220_1 :         6000EBC C |
 LITERAL_W_0220_2 :         600153C C |  LITERAL_W_0220_3 :         6001630 C |
 LITERAL_W_0530_1 :         60008C8 C |  LITERAL_W_0530_2 :         6000F84 C |
 LITERAL_W_059F_1 :         60010C2 C |  LITERAL_W_0620_1 :         6000EC0 C |
 LITERAL_W_0620_2 :         6001294 C |  LITERAL_W_0620_3 :         6001540 C |
 LITERAL_W_07FF_1 :             154 C |  LITERAL_W_07FF_2 :             68A C |
 LITERAL_W_3FFF_1 :         6001D2A C |  LITERAL_W_44E0_1 :         60004E6 C |
 LITERAL_W_44E5_1 :         60004F0 C |  LITERAL_W_4800_1 :         60008CC C |
 LITERAL_W_4800_2 :         6000F88 C |  LITERAL_W_5A00_1 :         6001080 C |
 LITERAL_W_5A00_2 :         6001E40 C |  LITERAL_W_5A18_1 :         60004EA C |
 LITERAL_W_5A20_1 :         6001B9C C |  LITERAL_W_A518_1 :         60004EE C |
 LITERAL_W_A518_2 :         60007C8 C |  LITERAL_W_A518_3 :         6000AAA C |
 LITERAL_W_A518_4 :         6000CFE C |  LITERAL_W_A518_5 :         6000ECC C |
 LITERAL_W_A518_6 :         6001B9A C |  LITERAL_W_A518_7 :         6001E3E C |
 LITERAL_W_A538_1 :         60004EC C |  LITERAL_W_A538_2 :         6001082 C |
 LITERAL_W_FE10_1 :         60004E4 C |  LITERAL_W_FE10_2 :         6000510 C |
 LITERAL_W_FE10_3 :         6000550 C |  LITERAL_W_FE10_4 :         60007C4 C |
 LITERAL_W_FE10_5 :         60008C4 C |  LITERAL_W_FE10_6 :         6000F80 C |
 LITERAL_W_FE10_7 :         6001B94 C |  LITERAL_W_FE10_8 :             150 C |
 LITERAL_W_FE80_1 :         60004E8 C |  LITERAL_W_FE80_2 :         60007C6 C |
 LITERAL_W_FE80_3 :         6000AA8 C |  LITERAL_W_FE80_4 :         6000CFC C |
 LITERAL_W_FE80_5 :         6000ECA C |  LITERAL_W_FE80_6 :         600107E C |
 LITERAL_W_FE80_7 :         6001B98 C |  LITERAL_W_FE80_8 :         6001E3C C |
 LITERAL_W_FE92_1 :         6001050 C |  LITERAL_W_FE92_2 :         600107C C |
 LITERAL_W_FE92_3 :             68C C |  LITERAL_W_FEE2_1 :         60008C6 C |
 LITERAL_W_FEE2_2 :         6000F82 C |  LITERAL_W_FEE4_1 :         60008CA C |
 LITERAL_W_FEE4_2 :         6000F86 C |  LITERAL_W_FF00_1 :         6001A3C C |
 LITERAL_W_FF00_2 :         6001D28 C |  LITERAL_W_FF00_3 :             688 C |
 LITERAL_W_FF60_1 :             314 C |  LITERAL_W_FF60_2 :             53A C |
 LSH :                            B - |  LSL :                            9 - |
*MACEXP :                         7 - |  MAINGEMASEQLIST :           200000 C |
 MAPMARS_TEST :              200180 C |  MAP_HARUNA :                22DB34 C |
 MAP_SISI :                  22DD94 C |  MAP_TESTBG :                22DDF8 C |
 MAP_TESTBG2 :               22E6D8 C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         1 - |
 MARSERROR :                   2980 C |  MARSGBL_3D_OUTHEIGHT :          1C - |
 MARSGBL_3D_OUTWIDTH :           18 - | *MARSGBL_DRAWALL :               16 - |
 MARSGBL_DREQREAD :              20 - |  MARSGBL_DREQWRITE :             24 - |
 MARSGBL_LEN :                   60 - |  MARSGBL_PLGNPZINDX_R :          28 - |
 MARSGBL_PLGNPZINDX_W :          2C - |  MARSGBL_PLYPZCNTR :              C - |
 MARSGBL_SCRL_FBOUT :            50 - |  MARSGBL_SCRL_FBTL :             54 - |
 MARSGBL_SCRL_FBX :              5C - |  MARSGBL_SCRL_FBY :              58 - |
 MARSGBL_SCRL_HGHT :             48 - |  MARSGBL_SCRL_SIZE :             40 - |
 MARSGBL_SCRL_VRAM :             4C - |  MARSGBL_SCRL_WDTH :             44 - |
 MARSGBL_SCRL_XOLD :             38 - |  MARSGBL_SCRL_XPOS :             30 - |
 MARSGBL_SCRL_YOLD :             3C - |  MARSGBL_SCRL_YPOS :             34 - |
 MARSGBL_THISFRAME :              0 - |  MARSGBL_WDGACTIVE :             10 - |
 MARSGBL_WDGCLLINES :             E - |  MARSGBL_WDGDIVLOCK :             8 - |
 MARSGBL_WDGHOLD :                6 - |  MARSGBL_WDGREADY :               A - |
 MARSGBL_WDGTASK :                4 - |  MARSGBL_XSHIFT :                 2 - |
 MARSINITHEADER :              2AC2 C |  MARSJUMPHERE :                2AFA C |
 MARSJUMPHERE.LOOP_RAM :       2B18 C |  MARSMDL_MDLLOOP :              158 C |
 MARSMDL_MDLLOOP.GO_MDL :       170 C |  MARSMDL_MDLLOOP.INVLID :       1A2 C |
 MARSMDL_MDLLOOP.LOOP :         190 C |  MARSMDL_MDLLOOP.M_INVLID :     186 C |
 MARSMDL_MDLLOOP.M_LOOP :       174 C |  MARSMDL_MDLLOOP.PAGE_2 :       1B4 C |
*MARSMDL_MDLLOOP.SKIP :         1A8 C |  MARSMDL_MKSPR :                1E8 C |
 MARSMDL_MKSPR.BAD_FACE :       304 C |  MARSMDL_MKSPR.LOWER_Z :        2A8 C |
 MARSMDL_MKSPR.MK_FACE :        2FA C |  MARSMDL_MKSPR.MK_POINT :       28E C |
 MARSMDL_MKSPR.NOT_OLDPOS :     26C C |  MARSMDL_MKSPR.NOT_PLYFLD :     2F8 C |
 MARSMDL_MKSPR.Z_PLUS :         2C4 C |  MARSMDL_READMODEL :            398 C |
 MARSMDL_READMODEL.BAD_FACE :   520 C |  MARSMDL_READMODEL.EXIT :       52C C |
 MARSMDL_READMODEL.FC_TRI :     474 C |  MARSMDL_READMODEL.HAS_UV :     3E0 C |
 MARSMDL_READMODEL.MK_FACE :    44C C |  MARSMDL_READMODEL.NEXT_FACE :  3AC C |
 MARSMDL_READMODEL.QUAD :       3C4 C |  MARSMDL_READMODEL.UV_TRI :     3FC C |
 MARSMDL_READMODEL.VALID :      3B6 C |  MARSMDL_READMODEL.Z_PLUS :     4E0 C |
 MARSOBJ_TEST :             60352F8 C |  MARSOBJ_TEST.FACE :        6035DD4 C |
 MARSOBJ_TEST.MTRL :        6036614 C |  MARSOBJ_TEST.VERT :        603530C C |
 MARSOBJ_TEST.VRTX :        60365E4 C |  MARSOBJ_TEST_2 :           6036614 C |
*MARSOBJ_TEST_2.END :       60366F4 C |  MARSOBJ_TEST_2.FACE :      6036694 C |
 MARSOBJ_TEST_2.MTRL :      60366F4 C |  MARSOBJ_TEST_2.VERT :      6036628 C |
 MARSOBJ_TEST_2.VRTX :      60366C4 C |  MARSPWM_BANK :                   8 - |
 MARSPWM_CBANK :                 20 - |  MARSPWM_CREAD :                 24 - |
 MARSPWM_ENBL :                   0 - |  MARSPWM_LEN :                   28 - |
 MARSPWM_LENGTH :                10 - |  MARSPWM_LOOP :                  14 - |
 MARSPWM_PITCH :                 18 - |  MARSPWM_READ :                   4 - |
 MARSPWM_START :                  C - |  MARSPWM_VOL :                   1C - |
 MARSSCRL_COPYTOPBOT :      60011B0 C |
 MARSSCRL_COPYTOPBOT.COPY_TOP :                                     60011C4 C |
 MARSSOUND_INIT :           6001084 C |  MARSSOUND_INIT.NEXT_ONE :  60010A4 C |
 MARSUPD :                     19F8 C |  MARSVIDEO_DRAWFILLBLK :    6001544 C |
 MARSVIDEO_DRAWFILLBLK.ALWAYS_ON :                                  60015DC C |
 MARSVIDEO_DRAWFILLBLK.BLANK_REQ :                                  60015F6 C |
*MARSVIDEO_DRAWFILLBLK.EXIT_LR :                                    600161E C |
 MARSVIDEO_DRAWFILLBLK.NO_FLAG :                                    60015FE C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_X :                                  6001594 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_Y :                                  60015A6 C |
 MARSVIDEO_DRAWFILLBLK.X_LOOP :                                     600158E C |
 MARSVIDEO_DRAWFILLBLK.Y_LOOP :                                     60015A0 C |
 MARSVIDEO_FIXTBLSHIFT :    60010F4 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6001134 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       600111C C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    6001146 C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6001140 C |
 MARSVIDEO_INIT :           60010C8 C |  MARSVIDEO_MKFILLBLK :      6001438 C |
 MARSVIDEO_MKFILLBLK.COPY_BIT :                                     6001448 C |
 MARSVIDEO_MKFILLBLK.EXIT_SSPR :                                    6001530 C |
 MARSVIDEO_MKFILLBLK.NEXT_SSPR :                                    6001464 C |
 MARSVIDEO_MKFILLBLK.NO_FLIP :                                      6001456 C |
 MARSVIDEO_MKFILLBLK.OFF_SSPR :                                     6001528 C |
 MARSVIDEO_MKFILLBLK.X_ROW :                                        60014F4 C |
 MARSVIDEO_MKFILLBLK.X_SQEND :                                      60014EC C |
 MARSVIDEO_MKFILLBLK.X_SQZ :                                        60014E0 C |
 MARSVIDEO_MKFILLBLK.X_SZEX :                                       60014A4 C |
 MARSVIDEO_MKFILLBLK.Y_ROW :                                        60014F2 C |
 MARSVIDEO_MKFILLBLK.Y_SQEND :                                      60014F2 C |
 MARSVIDEO_MKFILLBLK.Y_SQZ :                                        60014E6 C |
 MARSVIDEO_MKFILLBLK.Y_SZEX :                                       60014B0 C |
 MARSVIDEO_SHOWSCRLBG :     6001160 C |
 MARSVIDEO_SHOWSCRLBG.BAD_Y :                                       60011AA C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     600118E C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        6001196 C |
 MARSVIDEO_SLICEPLGN :      6001734 C |  MARSVIDEO_SLICEPLGN.EXIT : 6001836 C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                                     60017A6 C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                                      60017B8 C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                                       60017AE C |
 MARSVIDEO_SLICEPLGN.LEFTH :                                        60017FE C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                                       600182E C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                                      60017D8 C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                                      600176C C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                                     6001782 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                                   6001796 C |
 MARSVIDEO_SLICEPLGN.TRINGL :                                       6001750 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                                      600179E C |
 MARSVIDEO_SUPERSPR_DRAW :  6001298 C |
 MARSVIDEO_SUPERSPR_DRAW.NEXT_PIECE :                               60012BC C |
 MARSVIDEO_SUPERSPR_DRAW.NO_SLOT :                                  60012D6 C |
 MARSVIDEO_SUPERSPR_MAKE :  60011D8 C |
*MARSVIDEO_SUPERSPR_MAKE.EXIT_SSPR :                                6001284 C |
 MARSVIDEO_SUPERSPR_MAKE.FROM_ROM :                                 600126C C |
 MARSVIDEO_SUPERSPR_MAKE.NEXT_SSPR :                                6001200 C |
 MARSVIDEO_SUPERSPR_MAKE.OFF_SSPR :                                 600127C C |
 MARS_CACHEPURGE :          6000FFC C |  MARS_CACHEPURGE_S :            65C C |
 MARS_CACHERAMCODE :        6001018 C |  MARS_CACHERAMCODE.COPY :   600103E C |
 MARS_RAMCODE :               1A800 C | *MARS_RAMCODE_E :             50F00 C |
 MARS_RAMCODE_EOF :           51000 C |  MARS_SETWATCHDOG :         6001054 C |
 MARS_WAITVBLANK :          6000984 C |
 MARS_WAITVBLANK.SVDP_LOCKED :                                      6000998 C |
 MARS_WAITVBLANK.WAIT_V :   600098E C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              60008D0 C |  MASTER_LOOP.KEEP_BUFF :    6000904 C |
 MASTER_LOOP.NON_INIT :     6000928 C |  MASTER_LOOP.PENDING_DREQ : 60008D8 C |
 MAX_BUFFNTRY :                   8 - |  MAX_FACES :                    100 - |
 MAX_GLOBALS :                  800 - |  MAX_MARSMSPR :                  20 - |
 MAX_MARSOBJ :                   18 - |  MAX_MARSSPR :                   20 - |
 MAX_MARSVRAM :               18000 - |  MAX_MCDSTAMPS :                 20 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDMAPSPR :                  18 - |
 MAX_MDOBJ :                     28 - |  MAX_PALFDREQ :                   8 - |
 MAX_PWMCHNL :                    8 - |  MAX_RCACH :                     20 - |
 MAX_SC0_OPTIONS :                4 - |  MAX_SCRNBUFF :                1000 - |
 MAX_SLOTS :                      3 - | *MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   12 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     10 - |
 MAX_ZDIST :       FFFFFFFFFFFFFD80 - | *MCAM_LEN :                      18 - |
 MCAM_X_POS :                     0 - |  MCAM_X_ROT :                     C - |
 MCAM_Y_POS :                     4 - |  MCAM_Y_ROT :                    10 - |
 MCAM_Z_POS :                     8 - |  MCAM_Z_ROT :                    14 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      19F9 C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    2800 C |
 MCD_MAIN.CLEANUP :            28A0 C | *MCD_MAIN.COLD_START :         28EC C |
 MCD_MAIN.COPY_CODE :          28B4 C |  MCD_MAIN.COPY_COLORS :        2818 C |
 MCD_MAIN.COPY_NEW :           2886 C |  MCD_MAIN.FADE_OUT :           281E C |
 MCD_MAIN.FM3 :                2908 C |  MCD_MAIN.FS0 :                293A C |
 MCD_MAIN.FS1 :                2944 C |  MCD_MAIN.NEXT_COLOR :         2830 C |
 MCD_MAIN.NOTHING :            2870 C |  MCD_MAIN.NO_BLUE :            286C C |
 MCD_MAIN.NO_GREEN :           2858 C |  MCD_MAIN.NO_RED :             2844 C |
 MCD_MAIN.RES_WAIT :           28F6 C |  MCD_MAIN.SH_WAIT :            28D8 C |
 MCD_MAIN.WAIT_NEXT :          288C C |  MCD_MEMORY :                     3 - |
 MCD_SMPDATA :                 E000 C |  MCD_SMPDATA_E :              1A000 C |
 MDLRD_PERSP :                  5A0 C |  MDLRD_PERSP.CENTER :           5F6 C |
 MDLRD_PERSP.INSIDE :           5EC C |  MDLRD_PERSP.PATCHME :          5E0 C |
 MDLRD_PERSP.ZMULTI :           600 C |  MDLRD_ROTATE :                 624 C |
 MDLRD_SETPOINT :               55C C |  MDLRD_SETSPPT :                318 C |
 MDLRD_SETSPPT.NO_FACECAM :     380 C |  MDL_GET_HILOW :                53C C |
 MDL_GET_HILOW.PICK_NEXT :      542 C |  MDL_GET_HILOW.X_L :            54A C |
 MDL_GET_HILOW.X_R :            550 C |  MDSTMP_BUFFINCR :               1A - |
 MDSTMP_CELLSTORAGE :            12 - |  MDSTMP_CURROUTFLIP :             E - |
*MDSTMP_DOTINCR :                16 - | *MDSTMP_FDROP :                  10 - |
 MDSTMP_FLAGS :                   0 - |  MDSTMP_LEN :                    1E - |
 MDSTMP_STMPOUTB :                C - |  MDSTMP_VRAMINCR :                A - |
 MDSTMP_VRAMLEN :                 8 - |  MDSTMP_VRAMMAIN :                2 - |
 MDSTMP_VRAMSEC :                 4 - |  MDSTMP_VRAMSIZE :                6 - |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :    FFFFFFFFFFFF28C2 C |
 MD_READMODES.END :                                        FFFFFFFFFFFF2984 C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF2904 C |
 MD_SCREEN00 :                51000 C |  MD_SCREEN00_E :              51800 C |
 MD_SCREEN01 :                51800 C |  MD_SCREEN01_E :              52000 C |
 MD_SCREEN02 :                52000 C |  MD_SCREEN02_E :              53800 C |
 MD_SCREEN03 :                53800 C |  MD_SCREEN03_E :              54000 C |
 MD_SCREEN04 :                54000 C |  MD_SCREEN04_E :              54800 C |
 MD_SCREEN07 :                54800 C |  MD_SCREEN07_E :              55800 C |
 MD_SYSCODE :                  2B5E C |  MD_SYSCODE_E :                54E2 C |
 MLASTPOS :                   A3880 - |  MMDL_DATA :                      4 - |
*MMDL_FRAME :                     0 - |  MMDL_LEN :                      20 - |
 MMDL_X_POS :                     8 - |  MMDL_X_ROT :                    14 - |
 MMDL_Y_POS :                     C - |  MMDL_Y_ROT :                    1C - |
 MMDL_Z_POS :                    10 - |  MMDL_Z_ROT :                    18 - |
 MODE :                          18 - | *MOMCPU :                     68000 - |
*MOMCPUNAME :               "68000" - |  MONOWIDTH :                     38 - |
 MOUSE_X :                        8 - |  MOUSE_Y :                        A - |
 MPADLBL :                    A4000 - |  MPADLBL.THIS_SZ :              780 - |
*MSCPAUSEOFF :                    4 - | *MSCPAUSEON :                     3 - |
*MSCPLAY :                       11 - |  MSCPLAY1 :                      12 - |
 MSCPLAYR :                      13 - | *MSCPLAYT :                      14 - |
*MSCSCANFF :                      5 - | *MSCSCANFR :                      6 - |
*MSCSCANOFF :                     7 - | *MSCSEEK :                       15 - |
*MSCSEEK1 :                      19 - | *MSCSEEKT :                      16 - |
 MSCSTOP :                        2 - |  MSPR_FLAGS :                     0 - |
 MSPR_FRAME_X :                   7 - |  MSPR_FRAME_Y :                   8 - |
 MSPR_INDX :                      1 - |  MSPR_LEN :                      20 - |
 MSPR_SIZE_H :                    3 - |  MSPR_SIZE_W :                    2 - |
 MSPR_SRCWDTH :                   6 - |  MSPR_SRC_H :                     5 - |
 MSPR_SRC_W :                     4 - |  MSPR_VRAM :                     1C - |
 MSPR_X_POS :                    10 - |  MSPR_X_ROT :                    16 - |
 MSPR_Y_POS :                    12 - |  MSPR_Y_ROT :                    1A - |
 MSPR_Z_POS :                    14 - |  MSPR_Z_ROT :                    18 - |
 MSTRMODE_0 :               600099C C |  MSTRMODE_0.CLR_MANUAL :    60009E0 C |
 MSTRMODE_0.NOT_YET :       6000A1A C |  MSTRMODE_0.STILL_LOCKED :  60009F4 C |
 MSTRMODE_0.WAIT_SLVN :     60009B6 C |  MSTRMODE_2D :              6000AB4 C |
 MSTRMODE_2D.XPU_NEGTV :    6000B64 C |  MSTRMODE_2D.XPU_NEGTVA :   6000B68 C |
 MSTRMODE_2D.XPU_POSTV :    6000B70 C |  MSTRMODE_2D.X_DONT_SCRL :  6000BCE C |
 MSTRMODE_2D.X_PATCH :      6000AFE C |  MSTRMODE_2D.X_SCRL_L :     6000BA4 C |
 MSTRMODE_2D.X_SLOOP :      6000BBA C |  MSTRMODE_2D.YPU_NEGTV :    6000B4A C |
 MSTRMODE_2D.YPU_NEGTVA :   6000B4E C |  MSTRMODE_2D.YPU_POSTV :    6000B56 C |
 MSTRMODE_2D.YPU_POSTVA :   6000B5C C |  MSTRMODE_2D.YX_NEGTV :     6000B30 C |
 MSTRMODE_2D.YX_NEGTVA :    6000B34 C |  MSTRMODE_2D.YX_POSTV :     6000B3C C |
 MSTRMODE_2D.YX_POSTVA :    6000B42 C |  MSTRMODE_2D.YX_TOPTVA :    6000B28 C |
 MSTRMODE_2D.Y_DONT_SCRL :  6000C18 C |  MSTRMODE_2D.Y_SCRL_L :     6000BEE C |
 MSTRMODE_2D.Y_SLOOP :      6000C06 C |  MSTRMODE_2D_I :            6000A34 C |
 MSTRMODE_2D_I.CLEAN_UP :   6000A58 C |  MSTRMODE_2D_I.WAIT_SLVN :  6000A4A C |
 MSTRMODE_3D :              6000D04 C |  MSTRMODE_3D.CONT_PLGN :    6000DBE C |
 MSTRMODE_3D.COPY_CAM :     6000D56 C |  MSTRMODE_3D.COPY_MSPR :    6000D32 C |
 MSTRMODE_3D.COPY_OBJ :     6000D44 C |  MSTRMODE_3D.HIGHER :       6000DDC C |
 MSTRMODE_3D.INVALID :      6000E12 C |  MSTRMODE_3D.LOOP :         6000DF8 C |
 MSTRMODE_3D.MK_TABLE :     6000D80 C |  MSTRMODE_3D.PAGE_2 :       6000DB8 C |
 MSTRMODE_3D.ROLL :         6000DC8 C |  MSTRMODE_3D.SKIP :         6000E18 C |
 MSTRMODE_3D.SRCH :         6000DD2 C |  MSTRMODE_3D.WAIT_PZ :      6000E1C C |
 MSTRMODE_3D.WAIT_SLVI :    6000D1A C |  MSTRMODE_3D.WAIT_SV :      6000D08 C |
 MSTRMODE_3D.WAIT_WDG :     6000E22 C |  MSTRMODE_3D_I :            6000C7C C |
 MSTRMODE_3D_I.CLR_ME2D :   6000CA0 C |  MSTRMODE_3D_I.WAIT_SLVN :  6000C92 C |
 MSTRMODE_INITEXIT :        6000A1E C |  MSTR_COPYPALETTE :         6000E40 C |
 MSTR_COPYPALETTE.COPY_PAL :                                        6000E52 C |
 MSTR_COPYPALETTE.SVDP_LOCKED :                                     6000E76 C |
 MSTR_LIST :                6000944 C |  M_IRQ_BAD :                6000380 C |
 M_IRQ_CMD :                60003E4 C |  M_IRQ_CMD.DREQ_RAM :       600041E C |
 M_IRQ_CMD.DREQ_SETDEST :   6000420 C |  M_IRQ_CMD.WDG_INUSE :      6000404 C |
 M_IRQ_DMA :                6000398 C |  M_IRQ_DMA.NOT_USE :        60003C6 C |
 M_IRQ_DMA.WAIT_DMA :       60003A2 C |  M_IRQ_H :                  6000444 C |
 M_IRQ_PWM :                60003D4 C |  M_IRQ_V :                  6000454 C |
 M_IRQ_VRES :               6000470 C |  M_IRQ_VRES.RV_BUSY :       60004A8 C |
 M_IRQ_WDG :                6001A40 C |  M_IRQ_WDG.EXIT_WDG :       6001A7C C |
 M_IRQ_WDG.LIST :           6001A98 C | *M_IRQ_WDG.ON_CLR :         6001A76 C |
 M_IRQ_WDG.WAIT_FB :        6001A56 C |  M_IRQ_WDG.WDG_MAIN :       6001A8C C |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1A00 C |
*NIKONA_BUFFLIST_E :           1A18 C |  OBJECT_ANIMATE :  FFFFFFFFFFFF2718 C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF27A6 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF2798 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF275E C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF27A2 C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF278A C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF2788 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF2736 C |
 OBJECT_INIT :     FFFFFFFFFFFF2634 C |  OBJECT_INIT.CLR : FFFFFFFFFFFF263C C |
 OBJECT_MAKE :     FFFFFFFFFFFF2676 C |
 OBJECT_MAKE.SEARCH :                                      FFFFFFFFFFFF2684 C |
 OBJECT_MDMARS_GETSPRINFO :                                FFFFFFFFFFFF28A0 C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF26E0 C |
*OBJECT_RESETVARS :                                        FFFFFFFFFFFF26C6 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF26D4 C |
 OBJECT_RUN :      FFFFFFFFFFFF2644 C |
 OBJECT_RUN.NEXT_ONE :                                     FFFFFFFFFFFF264C C |
 OBJECT_RUN.NO_CODE :                                      FFFFFFFFFFFF2658 C |
*OBJECT_SET :      FFFFFFFFFFFF2662 C |  OBJECT_SPEED :    FFFFFFFFFFFF26E8 C |
 OBJECT_TOUCH :    FFFFFFFFFFFF27AC C |
 OBJECT_TOUCH.CHECK_THIS :                                 FFFFFFFFFFFF27E2 C |
 OBJECT_TOUCH.EXIT_THIS :                                  FFFFFFFFFFFF27DC C |
 OBJECT_TOUCH.NEXT :                                       FFFFFFFFFFFF27C4 C |
 OBJECT_TOUCH.NOT_YTOP :                                   FFFFFFFFFFFF289E C |
 OBJECT_TOUCH.SET_OK :                                     FFFFFFFFFFFF289C C |
 OBJECT_TOUCH.SKIP :                                       FFFFFFFFFFFF27D2 C |
 OBJMAP_DODO :               22F878 C |  OBJMAP_FIFI :               22F8C0 C |
 OBJMAP_MIMI :               22F89C C |  OBJPAL_DODO :               22F858 C |
 OBJSET_ERROR :    FFFFFFFFFFFF2698 C |  OBJSET_GO :       FFFFFFFFFFFF26A2 C |
 OBJSET_GO.CLR :   FFFFFFFFFFFF26B6 C |
 OBJSET_GO.EXIT_THIS :                                     FFFFFFFFFFFF26BC C |
 OBJSET_GO.FROM_DEL :                                      FFFFFFFFFFFF26B0 C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
 OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ONREG :                         11 - |
 ON_HOLD :                        2 - |  ON_PRESS :                       4 - |
 ON_RELEASE :                     6 - | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 - |
 PAD_VER :                        1 - |  PALETTECLEAR :                29C8 C |
 PALETTECLEAR.FM2 :            29D2 C |  PALETTECLEAR.PL :             29DE C |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMARS_HARUNA :            200580 C |  PALMARS_SISI :              2005A0 C |
 PALMARS_TEST :              200000 C | *PALMARS_TEST2 :             2005C0 C |
 PALMODE :                       3E C |  PAL_HARUNA :                22DB14 C |
 PAL_SISI :                  22DD74 C |  PAL_TESTBG :                22DDD8 C |
 PAL_TESTBG2 :               22E6B8 C |  PAN :                            3 - |
 PARP :                          34 - | *PCM :                            0 - |
 PCMCOM :                      16F5 C |  PCMINS_BBOXHATS :            2A06C C |
 PCMINS_BBOXSNARE :           2B014 C |  PCMINS_BBOXSNARE_E.HERE :    2B8E0 C |
 PCMINS_KICK :                2A898 C |  PCMINS_TRUMPET1 :            20000 C |
 PCMPAN :                      1735 C | *PEN :                           20 - |
 PICO :                           0 - |  PLC_HARUNA :                22DCE4 C |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYGN_LEN :                     38 - |  PLYGN_MTRL :                     4 - |
 PLYGN_POINTS :                   8 - |  PLYGN_SRCPNTS :                 28 - |
 PLYGN_TYPE :                     0 - | *PLYPZ_LEN :                     30 - |
 PLYPZ_MTRL :                     4 - |  PLYPZ_SRC_XL :                  10 - |
 PLYPZ_SRC_XL_DX :               20 - |  PLYPZ_SRC_XR_DX :               24 - |
 PLYPZ_SRC_YL :                  14 - |  PLYPZ_SRC_YL_DX :               28 - |
 PLYPZ_SRC_YR_DX :               2C - |  PLYPZ_TYPE :                     0 - |
 PLYPZ_XL :                       C - |  PLYPZ_XL_DX :                   18 - |
 PLYPZ_XR_DX :                   1C - |  PLYPZ_YTB :                      8 - |
*PROC_CHIPS :                   624 C |  PSGCOM :                      1775 C |
 PSGFREQ_LIST :                158D C |  PSGHATMODE :                  1CEA C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PUT_PIECE :                6001968 C |  PUT_PIECE.BAD_PIECE :      6001A12 C |
 PUT_PIECE.LEFTH :          600197A C |  PUT_PIECE.TOP_NEG :        60019FE C |
 PVOL :                          30 - |  PWMCOM :                      173D C |
*PWMCTL :                        31 - | *PWMINS_TEST :              6027B10 C |
 PWMINTCLR :                     1C - |  PWMIRQ_ON :                      1 - |
 RAM_CDSUB_BRAMSTRINGS :       79A0 C |  RAM_CDSUB_BRAMWORK :          7360 C |
 RAM_CDSUB_CURRSAVEINFO :      7350 C |  RAM_CDSUB_DOTCLEARFLAG :      7210 C |
 RAM_CDSUB_FSBUFF :           14AFC C |  RAM_CDSUB_PCMBUFF :           79AC C |
 RAM_CDSUB_PCMENBL :           7218 C |  RAM_CDSUB_PCMREQUPD :         7219 C |
 RAM_CDSUB_PCMTABLE :          7ABC C |  RAM_CDSUB_STAMPBUSY :         7208 C |
 RAM_CDSUB_STAMPCBUFF :        7214 C |  RAM_CDSUB_STAMPENBL :         7206 C |
 RAM_CDSUB_STAMPH :            7204 C |  RAM_CDSUB_STAMPINDXW :        7212 C |
 RAM_CDSUB_STAMPLIST :         7250 C |  RAM_CDSUB_STAMPNEXTRD :       720E C |
 RAM_CDSUB_STAMPNEXTWR :       720C C |  RAM_CDSUB_STAMPNUM :          7200 C |
 RAM_CDSUB_STAMPOUTBOX :       7244 C | *RAM_CDSUB_STAMPPENDING :      7216 C |
 RAM_CDSUB_STAMPPROC :         721C C |  RAM_CDSUB_STAMPREQUPD :       721A C |
 RAM_CDSUB_STAMPSIZE :         720A C |  RAM_CDSUB_STAMPW :            7202 C |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFFA08 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFE858 C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFFA02 C |  RAM_HORSCROLL :   FFFFFFFFFFFFDCC0 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFE85C C |  RAM_INPUTDATA :   FFFFFFFFFFFFE974 C |
 RAM_MARS_BUFF3D_END :      600FA58 C |  RAM_MARS_BUFF3D_START :    6007310 C |
 RAM_MARS_CURRPLGNPAGE :   26007300 C |  RAM_MARS_DREQBUFF_0 :     26004D40 C |
 RAM_MARS_DREQBUFF_1 :     26005760 C |  RAM_MARS_GLOBAL :          6004CE0 C |
 RAM_MARS_OBJCAMERA :       6007310 C |  RAM_MARS_OBJECTS :         6007350 C |
 RAM_MARS_PLGNLIST_0 :      600EA50 C |  RAM_MARS_PLGNLIST_1 :      600F250 C |
 RAM_MARS_PLGNNUM_0 :       600FA50 C |  RAM_MARS_PLGNNUM_1 :       600FA54 C |
 RAM_MARS_POLYGONS_0 :      6007A50 C |  RAM_MARS_POLYGONS_1 :      600B250 C |
 RAM_MARS_PWMBACKUP :      26006300 C |  RAM_MARS_PWMLIST :        260061C0 C |
 RAM_MARS_PWMTABLE :       26006180 C |  RAM_MARS_SCRLREFILL :          200 C |
*RAM_MARS_SPRDRWCANVAS :    6007310 C |  RAM_MARS_SPRPOLYGN :       6007650 C |
 RAM_MARS_SVDPDRWLIST :           0 C |  RAM_MARS_SVDPSPRINFO :           0 C |
 RAM_MARS_VRAMDATA :        600FB10 C | *RAM_MCDEXIT :     FFFFFFFFFFFFFA14 C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDMARS_COMMBUFF :                                     FFFFFFFFFFFFCE60 C |
 RAM_MDMARS_INDXPALFD :                                    FFFFFFFFFFFFCC1E C |
 RAM_MDMARS_MDLCAMERA :                                    FFFFFFFFFFFFD060 C |
 RAM_MDMARS_MODELS :                                       FFFFFFFFFFFFD480 C |
*RAM_MDMARS_MODELS.SIZEOF_THIS :                           FFFFFFFFFFFFD780 C |
 RAM_MDMARS_MPALFDLIST :                                   FFFFFFFFFFFFCE20 C |
 RAM_MDMARS_MSPRITES :                                     FFFFFFFFFFFFD080 C |
 RAM_MDMARS_PALFD :                                        FFFFFFFFFFFFCC20 C |
 RAM_MDMARS_SCRLDATA :                                     FFFFFFFFFFFFD080 C |
 RAM_MDMARS_SCRLSETT :                                     FFFFFFFFFFFFD060 C |
 RAM_MDMARS_SUPERSPR :                                     FFFFFFFFFFFFD480 C |
*RAM_MDMARS_SUPERSPR.SIZEOF_THIS :                         FFFFFFFFFFFFD680 C |
 RAM_MDMCD_STAMPS :                                        FFFFFFFFFFFFC800 C |
 RAM_MDMCD_STAMPSETT :                                     FFFFFFFFFFFFCC00 C |
 RAM_MDMISC :      FFFFFFFFFFFFC800 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFE874 C |
 RAM_MDVIDCLR_E :  FFFFFFFFFFFFE6D4 C |  RAM_MDVIDEO :     FFFFFFFFFFFFD880 C |
 RAM_MEGACD :              FFFFFD00 - |  RAM_OBJECTS :     FFFFFFFFFFFFE9B4 C |
 RAM_PALETTE :     FFFFFFFFFFFFE5D0 C |  RAM_PALETTEFADE : FFFFFFFFFFFFE650 C |
 RAM_PALFADELIST : FFFFFFFFFFFFD880 C |  RAM_SAVEDATA :    FFFFFFFFFFFFE874 C |
 RAM_SAVEENABLE :  FFFFFFFFFFFFFA0E C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFE878 C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFE874 C |  RAM_SCREENMODE :  FFFFFFFFFFFFFA10 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFFA12 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFE0D0 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFE85E C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFD8C0 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFDA40 C |
*RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDOM :   FFFFFFFFFFFFF9F8 C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFF9F4 C |  RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
 RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFF9FC C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFE6D0 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFE6D8 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFE6D2 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFE86A C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFE86C C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFE86E C |  RAM_VDPREGSETB :  FFFFFFFFFFFFE870 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFE872 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFE862 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFE860 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFE868 C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFE866 C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFE864 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFE080 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
*RES :                            2 - | *ROMPAUSEOFF :                    9 - |
*ROMPAUSEON :                     8 - | *ROMREAD :                       17 - |
*ROMREADE :                      21 - |  ROMREADN :                      20 - |
*ROMSEEK :                       18 - | *ROM_END :                    A4000 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1F60 C |
 SAMPLE_RATE :                 3E80 - |  SBEATACC :                    1CF0 C |
 SBEATPTCK :                   1CF2 C | *SCDINIT :                       8E - |
*SCDPQ :                         93 - | *SCDPQL :                        94 - |
*SCDREAD :                       92 - | *SCDSTART :                      8F - |
*SCDSTAT :                       91 - | *SCDSTOP :                       90 - |
 SCMD_TASKS :               6000554 C | *SCMD_TASKS.COPY_1 :        6000608 C |
 SCMD_TASKS.COPY_DATA :     6000594 C |  SCMD_TASKS.EXIT_C :        6000616 C |
 SCMD_TASKS.EXIT_SCMD :     60006FE C |  SCMD_TASKS.IS_KEYCUT :     60006F0 C |
 SCMD_TASKS.NEXT_CHNL :     600061C C |  SCMD_TASKS.NEXT_ONE :      6000570 C |
 SCMD_TASKS.NEXT_OUT :      60005DA C |  SCMD_TASKS.NO_CHNG :       60006F4 C |
 SCMD_TASKS.NO_CHNL :       60005C4 C |  SCMD_TASKS.NO_CHNLO :      60005EA C |
*SCMD_TASKS.NO_KEYCUT :     6000626 C |  SCMD_TASKS.NO_PITCHBND :   6000658 C |
*SCMD_TASKS.PROC_PWM :      6000616 C |  SCMD_TASKS.SCMD_TASK00 :   6000564 C |
 SCMD_TASKS.SCMD_TASK01 :   60005F4 C |  SCMD_TASKS.SCMD_TASK02 :   6000568 C |
 SCMD_TASKS.SCMD_TASK03 :   60005D4 C |  SCMD_TASKS.WAIT_1 :        60005FC C |
*SCPU_BRAM :               FFFE8000 - |  SCPU_CMDLIST :                60F4 C |
 SCPU_DATA :                  20000 C |  SCPU_INIT :                   602A C |
 SCPU_INIT.DRV_INIT :          607E C |  SCPU_IRQ :                    6094 C |
 SCPU_IRQ.NOT_SOUND :          60A8 C |  SCPU_MAIN :                   60B2 C |
 SCPU_PCM :                FFFF0000 - |  SCPU_RAM :                    7200 C |
 SCPU_REG :                FFFF8000 - |  SCPU_STAMP :                  608E C |
 SCPU_TIMER :                  60AE C |  SCPU_USER :                   60B0 C |
 SCPU_WRAM :                  80000 - |  SCRLDRW_DRAWBLK :          6001634 C |
*SCRLDRW_DRAWBLK.END_LINE : 600172E C |
 SCRLDRW_DRAWBLK.NEXT_LINE :                                        600166C C |
 SCRLDRW_DRAWBLK.NEXT_ZLINE :                                       600163A C |
 SCRLDRW_DRAWBLK.NORMAL :   6001660 C |  SCRLDRW_DRAWBLK.TL_SNAP :  6001672 C |
 SCRLDRW_DRAWBLK.TL_SNAPZ : 6001640 C |  SCRLDRW_SSPRDRAW :         60012E4 C |
 SCRLDRW_SSPRDRAW.DRW_HALF :                                        60013DA C |
 SCRLDRW_SSPRDRAW.HALF_1 :  60013D6 C |  SCRLDRW_SSPRDRAW.HALF_2 :  60013D0 C |
 SCRLDRW_SSPRDRAW.HALF_3 :  60013D4 C |  SCRLDRW_SSPRDRAW.TL_H :    60013F0 C |
 SCRLDRW_SSPRDRAW.TL_SNAP : 6001374 C |  SCRLDRW_SSPRDRAW.TL_X :    6001388 C |
 SCRLDRW_SSPRDRAW.WRT_0 :   60013F4 C |  SCRLDRW_SSPRDRAW.XR_LEFT : 6001406 C |
 SCRLDRW_SSPRDRAW.XY_FLIP : 6001312 C |
 SCRLDRW_SSPRDRAW.XY_XWRAP :                                        600130A C |
 SCRLDRW_SSPRDRAW.X_FLIP :  6001334 C |
 SCRLDRW_SSPRDRAW.X_GIVEUP :                                        6001410 C |
 SCRLDRW_SSPRDRAW.X_LOOP :  6001382 C |  SCRLDRW_SSPRDRAW.X_MSWAP : 60013B8 C |
 SCRLDRW_SSPRDRAW.Y_BOT :   600135C C | *SCRLDRW_SSPRDRAW.Y_END :   6001422 C |
 SCRLDRW_SSPRDRAW.Y_FLIP :  6001324 C |  SCRLDRW_SSPRDRAW.Y_FLIPR : 600136A C |
*SCRLDRW_SSPRDRAW.Y_LAST :  6001422 C |  SCRLDRW_SSPRDRAW.Y_LOOP :  600136E C |
*SCRLDRW_SSPRDRAW.Y_LOW :   60012F0 C |  SCRLDRW_SSPRDRAW.Y_MID :   60012F6 C |
 SCRLDRW_SSPRDRAW.Y_OK :    60012FE C |  SCRLDRW_SSPRDRAW.Y_RFLIP : 6001348 C |
 SCRLDRW_SSPRDRAW.Y_RFLIPC :                                        600134A C |
 SCRLDRW_SSPRDRAW.Y_TOP :   600134C C |  SCRLDRW_SSPRDRAW.Z_0 :     6001392 C |
 SCRLDRW_SSPRDRAW.Z_1 :     600139A C |  SCRLDRW_SSPRDRAW.Z_2 :     60013A2 C |
 SCRLDRW_SSPRDRAW.Z_3 :     60013AA C |  SET_3DFIELD_HGHT :              E0 - |
 SET_3DFIELD_WDTH :             140 - |  SET_CHIPS :                    608 C |
*SET_DEBUGMODE :                  0 - | *SET_DEFAUTODMA :               480 - |
 SET_FBVRAM_PATCH :           1E000 - |  SET_INITMODE :                   7 - |
 SET_LEFT :                 6001858 C |  SET_LEFT.LFT_OK :          600187A C |
 SET_LEFT.LFT_SKIP :        60018DA C |  SET_MSCRLHGHT :                 F0 - |
 SET_MSCRLSIZE :                 10 - |  SET_MSCRLWDTH :                150 - |
 SET_NULLVRAM :                 7FE - |  SET_RAMLIMIT :              FFFC00 - |
 SET_RIGHT :                60018E0 C |  SET_RIGHT.RGT_OK :         6001902 C |
 SET_RIGHT.RGT_SKIP :       6001962 C |  SET_SNDVIEWY :                  16 - |
 SET_SRAMSIZE :                 100 - |  SET_STAMPPOV :                 100 - |
 SET_TILEMAX :                  200 - |  SET_WRAMSIZE :               3C000 - |
 SH2_DEBUG :                      1 - |  SH2_END :                  6036700 C |
 SH2_MASTER :               6000000 C |  SH2_M_ENTRY :              60007CC C |
 SH2_M_ENTRY.CLEAN_UP :     600083A C |  SH2_M_ENTRY.COPY_NEW :     600084A C |
 SH2_M_ENTRY.EXIT_CLEAN :   6000844 C |  SH2_M_ENTRY.EXIT_SEND :    6000856 C |
 SH2_M_ENTRY.WAITE :        600081C C |  SH2_M_ENTRY.WAITL :        6000822 C |
 SH2_M_ENTRY.WAIT_FRM :     600082E C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           600085C C |
 SH2_M_HOTSTART.WAIT_SLV :  600087A C |  SH2_RAM :                  6007310 C |
 SH2_RAM_TH :               6004D40 C |  SH2_SLAVE :                6000128 C |
 SH2_S_ENTRY :              6000ED0 C |  SH2_S_ENTRY.WAIT_MSTR :    6000F20 C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           6000F30 C |  SH2_S_HOTSTART.WAIT_MST :  6000F4C C |
*SH2_USER_DATA :            6027B10 C |  SHIFT :                          2 - |
 SIN_TABLE :                60024D8 C |  SIZEOF_INPUT :                  10 - |
*SIZEOF_MARSRAM_0 :         600E610 C | *SIZEOF_MARSRAM_1 :         600FA58 C |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |  SIZEOF_MDMISC :   FFFFFFFFFFFFD880 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFFA16 C |  SIZEOF_MDSYS :    FFFFFFFFFFFFFA16 C |
 SIZEOF_MDVID :    FFFFFFFFFFFFE874 C | *SIZEOF_SAVEINFO : FFFFFFFFFFFFE87C C |
*SIZEOF_SUBCPU :              14B7C C |  SLAVE_IRQ :                6000278 C |
 SLAVE_LOOP :               6000F8C C |  SLV :                           10 - |
 SLVMODE_00 :               6000FC8 C |  SLVMODE_01 :               6000FCC C |
 SLVPLGN_00 :               6001DF8 C |  SLVPLGN_01 :               6001AB8 C |
 SLVPLGN_05 :               6001B00 C |  SLVPLGN_05.EXIT :          6001B12 C |
 SLVPLGN_05.HAS_PZ :        6001B18 C |  SLVPLGN_06 :               6001ABE C |
 SLV_LIST :                 6000FA8 C |  SNDLOCKZ80 :      FFFFFFFFFFFF00DC C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00E4 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00FA C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF011E C |
 SNDREQ_EXIT :     FFFFFFFFFFFF012E C | *SNDREQ_SADDR :    FFFFFFFFFFFF015A C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0162 C |  SNDREQ_SCMD :     FFFFFFFFFFFF0148 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0156 C |  SNDREQ_SWORD :    FFFFFFFFFFFF015E C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00F0 C |  SOUND_INIT :      FFFFFFFFFFFF1E2E C |
 SOUND_UPDATE :    FFFFFFFFFFFF1E2A C |  SPCDDA_RESETVOLUME :          6382 C |
 SPINITFS :                    6490 C |  SPREADSECTORSN :              6408 C |
 SPREADSECTORSN.WAITTRANSFER : 6464 C |  SPREADSECTORSN.WAIT_READ :    644E C |
 SPREADSECTORSN.WAIT_STAT :    643C C |  SPSEARCHFILE :                64CC C |
 SPSEARCHFILE.CHK_STR :        64F6 C |  SPSEARCHFILE.FAILED_SRCH :    651A C |
 SPSEARCHFILE.FOUND_FILE :     6506 C |  SPSEARCHFILE.NEXT_FILE :      64D8 C |
 SPSEARCHFILE.NON_FILE :       6502 C |  SP_END :                      1A00 C |
 SP_START :                     800 C | *SSCRL_LEN :                      C - |
 SSCRL_VRAM :                     8 - |  SSCRL_X_POS :                    0 - |
 SSCRL_Y_POS :                    4 - |  SSPR_FLAGS :                     0 - |
 SSPR_FRAME :                     2 - |  SSPR_INDX :                      6 - |
 SSPR_LEN :                      10 - |  SSPR_SIZE :                      4 - |
 SSPR_VRAM :                      C - |  SSPR_X_POS :                     8 - |
 SSPR_Y_POS :                     A - |  ST :                             D - |
 STACK_MSTR :              C0000800 - |  STACK_SLV :               C0000800 - |
 STANDBY :                        3 - | *STMPC_DX :                       C - |
*STMPC_DY :                      10 - |  STMPC_LEN :                     28 - |
 STMPC_ROT_COS :                 26 - |  STMPC_ROT_SIN :                 24 - |
 STMPC_TX :                      14 - |  STMPC_TY :                      18 - |
 STMPC_X :                        4 - |  STMPC_XC :                       0 - |
 STMPC_XMUL :                    1C - |  STMPC_Y :                        8 - |
 STMPC_YC :                       2 - |  STMPC_ZMUL :                    1E - |
 STMPC_ZMUL_COS :                22 - |  STMPC_ZMUL_SIN :                20 - |
*STMPI_FLAGS :                    A - |  STMPI_LEN :                      C - |
 STMPI_MAP :                      0 - |  STMPI_X :                        2 - |
 STMPI_XR :                       6 - |  STMPI_Y :                        4 - |
 STMPI_YD :                       8 - |  SUBTASK_CMND00 :              6134 C |
 SUBTASK_CMND01 :              6136 C |  SUBTASK_CMND01.EXIT_NOW :     61A0 C |
 SUBTASK_CMND01.NEXT_PACKET :  615A C |  SUBTASK_CMND01.WAIT_MAIN :    6178 C |
 SUBTASK_CMND01.WAIT_MAIN_O :  6194 C |  SUBTASK_CMND02 :              61A8 C |
 SUBTASK_CMND02.WAIT_RET :     61DC C |  SUBTASK_CMND04 :              61E8 C |
 SUBTASK_CMND04.EXIT_NOW :     6256 C |  SUBTASK_CMND04.NEXT_PACKET :  6218 C |
 SUBTASK_CMND04.WAIT_ENTER :   61F4 C |  SUBTASK_CMND04.WAIT_MAIN :    623E C |
 SUBTASK_CMND07 :              6258 C |  SUBTASK_CMND08 :              6264 C |
 SUBTASK_CMND08.BIG_FAIL :     62B8 C |  SUBTASK_CMND08.COPY_PASTE :   6276 C |
 SUBTASK_CMND09 :              62C6 C |  SUBTASK_CMND09.WAIT_DMNA :    62CA C |
 SUBTASK_CMND0A :              62F0 C |  SUBTASK_CMND0A.WAIT_DMNA :    62F4 C |
 SUBTASK_CMND10 :              633E C |  SUBTASK_CMND11 :              6354 C |
 SUBTASK_CMND14 :              636A C |  SUBTASK_CMND16 :              6374 C |
 SUBTASK_CMND17 :              6382 C |  SUBTASK_CMND18 :              63A4 C |
 SUBTASK_CMND19 :              63D8 C |  SUBTASK_CMND19.SET_RET :      63FE C |
 SUBTASK_RETERR_NOFILE :       6336 C |  SUBTSK_BRAMCALL :             631A C |
 SUBTSK_RETURNFAIL :           632E C |  SYSBCD_SPOUT :    FFFFFFFFFFFF2302 C |
*SYSMARS_FRAMEBUFFER :       840000 - |  SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
 SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF24FE C |
 SYSMDMCD_SETCDDA.FAIL_SAFE :                              FFFFFFFFFFFF2516 C |
 SYSRND_MKVALUE :  FFFFFFFFFFFF2118 C |
 SYSRND_MKVALUE.HAS_SEED :                                 FFFFFFFFFFFF212A C |
*SYSTEM_BCD_ADDB : FFFFFFFFFFFF22DA C |  SYSTEM_BCD_ADDL : FFFFFFFFFFFF22E8 C |
*SYSTEM_BCD_ADDW : FFFFFFFFFFFF22E2 C | *SYSTEM_BCD_SUBB : FFFFFFFFFFFF22B2 C |
 SYSTEM_BCD_SUBL : FFFFFFFFFFFF22C0 C | *SYSTEM_BCD_SUBW : FFFFFFFFFFFF22BA C |
 SYSTEM_DEFAULT :  FFFFFFFFFFFF20D8 C |
 SYSTEM_DEFAULT.CLR_LOOP :                                 FFFFFFFFFFFF20E6 C |
 SYSTEM_DICEROLL : FFFFFFFFFFFF2162 C |
*SYSTEM_DICEROLL_SEED :                                    FFFFFFFFFFFF2142 C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF1E22 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1DE8 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF1E26 C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF1DEC C |
 SYSTEM_INIT :     FFFFFFFFFFFF1CEC C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF1D4E C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF1CF8 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF1E32 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF1E5E C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF1EB4 C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF1F5E C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF1F58 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF1E94 C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1FE4 C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF1E64 C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF1E7A C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF1E86 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1E92 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF1E46 C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF1F26 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF1F52 C |
 SYSTEM_MDMARS_SENDDATA :                                  FFFFFFFFFFFF255A C |
 SYSTEM_MDMARS_SENDDATA.EXIT_NOW :                         FFFFFFFFFFFF2586 C |
 SYSTEM_MDMARS_SENDDATA.LARGE_PACK :                       FFFFFFFFFFFF2572 C |
 SYSTEM_MDMARS_UPDATE :                                    FFFFFFFFFFFF259A C |
*SYSTEM_MDMCD_CDDAFADE :                                   FFFFFFFFFFFF252A C |
*SYSTEM_MDMCD_CDDAPLAY :                                   FFFFFFFFFFFF24EC C |
*SYSTEM_MDMCD_CDDAPLAYL :                                  FFFFFFFFFFFF24F6 C |
 SYSTEM_MDMCD_CDDASTOP :                                   FFFFFFFFFFFF251C C |
 SYSTEM_MDMCD_CHECKHOME :                                  FFFFFFFFFFFF24AE C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                        FFFFFFFFFFFF24D4 C |
 SYSTEM_MDMCD_CHECKWRAM :                                  FFFFFFFFFFFF23A2 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                           FFFFFFFFFFFF23B2 C |
 SYSTEM_MDMCD_EXITSHELL :                                  FFFFFFFFFFFF24DE C |
 SYSTEM_MDMCD_GIVEWRAM :                                   FFFFFFFFFFFF23B8 C |
 SYSTEM_MDMCD_INTERRUPT :                                  FFFFFFFFFFFF2334 C |
 SYSTEM_MDMCD_RDFILE_RAM :                                 FFFFFFFFFFFF23C4 C |
 SYSTEM_MDMCD_RDFILE_RAM.COPY_RAM :                        FFFFFFFFFFFF2402 C |
 SYSTEM_MDMCD_RDFILE_RAM.WAIT_SUB :                        FFFFFFFFFFFF2430 C |
 SYSTEM_MDMCD_RDFILE_WRAM :                                FFFFFFFFFFFF2466 C |
*SYSTEM_MDMCD_SUBENTER :                                   FFFFFFFFFFFF234C C |
 SYSTEM_MDMCD_SUBENTER.WAIT_SUB_O :                        FFFFFFFFFFFF234C C |
 SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF2356 C |
 SYSTEM_MDMCD_SUBTASK.MAKE_SURE :                          FFFFFFFFFFFF2372 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_FIRST :                         FFFFFFFFFFFF2360 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_SUB_I :                         FFFFFFFFFFFF237C C |
 SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF2342 C |
 SYSTEM_MDMCD_SUBWAIT.WAIT_SUB_O :                         FFFFFFFFFFFF2342 C |
 SYSTEM_MDMCD_WAITWRAM :                                   FFFFFFFFFFFF2396 C |
 SYSTEM_RANDOM :   FFFFFFFFFFFF2108 C |
 SYSTEM_RANDOM_SEED :                                      FFFFFFFFFFFF20FE C |
 SYSTEM_RENDER :   FFFFFFFFFFFF1D5A C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF1DD2 C |
 SYSTEM_RENDER.FROM_LATE :                                 FFFFFFFFFFFF1DC4 C |
 SYSTEM_RENDER.GOT_LATE :                                  FFFFFFFFFFFF1D96 C |
 SYSTEM_RENDER.MARS_FREE :                                 FFFFFFFFFFFF1DB4 C |
 SYSTEM_RENDER.MARS_SYNC :                                 FFFFFFFFFFFF1DAE C |
*SYSTEM_RENDER.MARS_WAIT :                                 FFFFFFFFFFFF1D8A C |
 SYSTEM_RENDER.WAIT_EARLY :                                FFFFFFFFFFFF1D68 C |
 SYSTEM_RENDER.WAIT_VBLANK :                               FFFFFFFFFFFF1DD4 C |
 SYSTEM_SETDATABANK :                                      FFFFFFFFFFFF262A C |
 SYSTEM_SETINTJUMPS :                                      FFFFFFFFFFFF231A C |
 SYSTEM_SETINTJUMPS.NO_EXINT :                             FFFFFFFFFFFF2332 C |
 SYSTEM_SETINTJUMPS.NO_HINT :                              FFFFFFFFFFFF232A C |
 SYSTEM_SETINTJUMPS.NO_VINT :                              FFFFFFFFFFFF2322 C |
 SYSTEM_SINEWAVE : FFFFFFFFFFFF2186 C |
 SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF217C C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1FEA C |
 SYSTEM_SRAMINIT.ALREADY_SET :                             FFFFFFFFFFFF2056 C |
*SYSTEM_SRAMINIT.CANT_USE :                                FFFFFFFFFFFF2054 C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF203E C |
 SYSTEM_SRAMINIT.CONT_SAVE :                               FFFFFFFFFFFF2052 C |
 SYSTEM_SRAMINIT.COPY_PASTE :                              FFFFFFFFFFFF2000 C |
*SYSTEM_SRAMINIT.NOT_FAIL :                                FFFFFFFFFFFF2020 C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF20A0 C |
 SYSTEM_SRAMLOAD.CANT_USE :                                FFFFFFFFFFFF20D6 C |
 SYSTEM_SRAMLOAD.COPY_SAVE :                               FFFFFFFFFFFF20C8 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF2058 C |
 SYSTEM_SRAMSAVE.CANT_USE :                                FFFFFFFFFFFF209E C |
 SYSTEM_SRAMSAVE.COPY_SAVE :                               FFFFFFFFFFFF2072 C |
 SYSTEM_SRAMSAVE.SAVE_GOOD :                               FFFFFFFFFFFF2098 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :  FFFFFFFFFFFF1DEE C |
 SYS_MARSSLVCMD.WAIT_EXIT :                                FFFFFFFFFFFF1E14 C |
 SYS_MSENDDATA :   FFFFFFFFFFFF25BC C |
 SYS_MSENDDATA.LOOP_FIFO :                                 FFFFFFFFFFFF2604 C |
 SYS_MSENDDATA.NO_SRC :                                    FFFFFFFFFFFF25DA C |
 SYS_MSENDDATA.WAIT_BIT :                                  FFFFFFFFFFFF25F6 C |
 SYS_MSENDDATA.WAIT_BIT_E :                                FFFFFFFFFFFF2618 C |
 SYS_MSENDDATA_0 : FFFFFFFFFFFF258C C |  SYS_SINEWAVE :    FFFFFFFFFFFF218A C |
 SYS_SINEWAVE.LOC_7EFA :                                   FFFFFFFFFFFF2198 C |
 SYS_SINEWAVE.LOC_7F0C :                                   FFFFFFFFFFFF21AA C |
 SYS_SINEWAVE.SINE_DATA :                                  FFFFFFFFFFFF21B0 C |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004F4 C |  S_IRQ_CMD :                6000514 C |
 S_IRQ_DMA :                6000504 C |  S_IRQ_H :                  600074A C |
 S_IRQ_PWM :                      0 C |  S_IRQ_PWM.CHNL_OFF :            F6 C |
 S_IRQ_PWM.CHNL_SILN :           42 C |  S_IRQ_PWM.DO_MONO :             A6 C |
 S_IRQ_PWM.DO_VOL :              BE C |  S_IRQ_PWM.ENABLED :             48 C |
 S_IRQ_PWM.FIFO_FREE :           1C C |  S_IRQ_PWM.FIFO_LOOP :           32 C |
 S_IRQ_PWM.GO_WAVE :             A8 C |  S_IRQ_PWM.KEEP :                76 C |
 S_IRQ_PWM.LOOPIT :              70 C |  S_IRQ_PWM.L_LOW :               E4 C |
 S_IRQ_PWM.L_MAX :              108 C |  S_IRQ_PWM.ML_OUT :              B8 C |
*S_IRQ_PWM.MNON_Z :              B2 C |  S_IRQ_PWM.NEXT_CHNL :           3A C |
 S_IRQ_PWM.NOT_BACKUP :          8C C |  S_IRQ_PWM.PWM_FULL :           136 C |
*S_IRQ_PWM.READ_WAV :            90 C |  S_IRQ_PWM.R_LOW :               EA C |
 S_IRQ_PWM.R_MAX :              10E C |  S_IRQ_PWM.STAND :               98 C |
 S_IRQ_PWM.ST_PITCH :            52 C |  S_IRQ_V :                  600075C C |
 S_IRQ_VRES :               600076C C |  S_IRQ_VRES.RV_BUSY :       60007A4 C |
 S_IRQ_WDG :                60004F8 C |  TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 650 C |  TBLBUFF_READ.DONT_RES :        714 C |
 TBLBUFF_READ.DO_CHIP :         6AF C |  TBLBUFF_READ.GRAB_LINK :       6F8 C |
 TBLBUFF_READ.HAS_INDX :        68B C |  TBLBUFF_READ.INVLDL :          73C C |
 TBLBUFF_READ.L_HIPRIO :        7C8 C |  TBLBUFF_READ.NEW_CHIP :        779 C |
 TBLBUFF_READ.NEW_LINK :        7C5 C |  TBLBUFF_READ.NEW_LINK_O :      7BD C |
 TBLBUFF_READ.NEW_LINK_Z :      7B9 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7B2 C |
 TBLBUFF_READ.NEXT_INDX :       67E C |  TBLBUFF_READ.NEXT_PRIO :       79B C |
 TBLBUFF_READ.NO_INDX :         6A7 C |  TBLBUFF_READ.PASS_2 :          79A C |
 TBLBUFF_READ.PICK_TBL :        7EB C |  TBLBUFF_READ.REFILL :          775 C |
 TBLBUFF_READ.REROLL :          752 C |  TBLBUFF_READ.RNOT_PSG :        777 C |
 TBLBUFF_READ.SAME_LINK :       717 C |  TBLBUFF_READ.SET_ASFULL :      7E8 C |
 TBLBUFF_READ.SINGL_FREE :      7D6 C |  TBLBUFF_READ.SINGL_LINK :      744 C |
 TBLBUFF_READ.SRCH_FREE :       78A C |  TBLBUFF_READ.SRCH_LINK :       723 C |
 TBLBUFF_READ.SRCH_LLOOP :      72D C |  TBLBUFF_READ.TRACK_CONT :      667 C |
 TBLBUFF_READ.VALID :           67C C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                  102E C |
 TBLZ_CLEAR_E :                1036 C |  TBLZ_CLEAR_E.CLRFULL :        103D C |
*TESTENTRY :                     1E - | *TESTENTRYLOOP :                 1F - |
 TEXTR_HARUNA :               10900 C |  TH :                      20000000 - |
 TICKCNT :                     1CEE C |  TICKFLAG :                    1CED C |
 TICKSPSET :                   1CEC C | *TIME :               "03:18:26 AM" - |
 TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5C3 C |  TRACK_OUT.INDX_DEL :           5D1 C |
 TRACK_OUT.NOTHIN :             5FF C |  TRANSFERROM :                 120D C |
 TRANSFERROM.DOUBLE :          1230 C |  TRANSFERROM.FROM_RAM :        1254 C |
 TRANSFERROM.TRANSFER :        1274 C |  TRANSFERROM.WAIT :            126B C |
 TRANSFERROM.X68KLAST :        12AD C |  TRANSFERROM.X68KLOOP :        1299 C |
 TRANSFERROM.X68KLPWT :        12BB C |  TRANSFERROM.X68KNOCARRY :     124E C |
 TRANSFERROM.X68KPWTLP :       12BD C |  TRKBLKS_0 :                   191D C |
 TRKBLKS_1 :                   1925 C |  TRKBLKS_2 :                   192D C |
 TRKBUFF_0 :                   1935 C |  TRKBUFF_1 :                   1974 C |
 TRKBUFF_2 :                   19B3 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   18BD C |
 TRKHDRS_1 :                   18DD C |  TRKHDRS_2 :                   18FD C |
 TRKINFOCACH :                 18AD C |  TRK_BANKBLK :                   16 - |
 TRK_BANKHEADS :                 15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   25 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   17 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   22 - |  TRK_ROMINST :                   1F - |
 TRK_ROMPATT :                   1C - |  TRK_ROMPATTREAD :               19 - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               18 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    236 C |
 UPD_TRACK.CHNL_FREE :          340 C |  UPD_TRACK.CONT_CHNL :          34B C |
 UPD_TRACK.DECROW :             2EF C |  UPD_TRACK.DECROW_E :           2F2 C |
 UPD_TRACK.EFFECT_FILL :        517 C |  UPD_TRACK.EFF_A :              3C5 C |
 UPD_TRACK.EFF_B :              3D6 C |  UPD_TRACK.EFF_C :              3F4 C |
 UPD_TRACK.EXIT :               2E3 C |  UPD_TRACK.FADE_OUT :           270 C |
 UPD_TRACK.FIRST_BLK :          44B C |  UPD_TRACK.FIRST_FILL :         51E C |
 UPD_TRACK.FIRST_HEAD :         493 C |  UPD_TRACK.GRAB_RHEAD :         5B0 C |
 UPD_TRACK.HAS_NOTE :           2FA C |  UPD_TRACK.INC_CPATT :          3F7 C |
 UPD_TRACK.KEEP_BLK :           469 C |  UPD_TRACK.KEEP_IT :            4B9 C |
 UPD_TRACK.KEEP_VOL :           286 C |  UPD_TRACK.NEXT_CHNL :          325 C |
 UPD_TRACK.NEXT_NOTE :          2D3 C |  UPD_TRACK.NO_EFF :             391 C |
 UPD_TRACK.NO_GLBL :            55E C |  UPD_TRACK.NO_INS :             373 C |
 UPD_TRACK.NO_NOTE :            368 C |  UPD_TRACK.NO_VOL :             37E C |
 UPD_TRACK.OLD_TYPE :           35C C |  UPD_TRACK.RAN_OUT :            405 C |
 UPD_TRACK.READ_TRACK :         24C C |  UPD_TRACK.ROW_ACTIVE :         2CC C |
 UPD_TRACK.SET_TRACK :          42F C |  UPD_TRACK.SFXMD :              290 C |
 UPD_TRACK.SRCH_NEW :           320 C |  UPD_TRACK.TOO_MUCH :           27C C |
 UPD_TRACK.TRACK_END :          508 C |  VBLK :                          80 - |
*VDPATTR_HI :                  8000 - | *VDPATTR_PL1 :                 2000 - |
*VDPATTR_PL2 :                 4000 - | *VDPATTR_PL3 :                 6000 - |
 VDPSTS :                         A - |  VDP_CTRL :                  C00004 - |
 VDP_DATA :                  C00000 - | *VERSION :                     142F - |
 VIDEO_BUILDSPRITES :                                      FFFFFFFFFFFF047C C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                           FFFFFFFFFFFF0634 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R :                            FFFFFFFFFFFF0612 C |
 VIDEO_BUILDSPRITES.DONT_ADD :                             FFFFFFFFFFFF05E6 C |
 VIDEO_BUILDSPRITES.EX_VRAM :                              FFFFFFFFFFFF0532 C |
 VIDEO_BUILDSPRITES.EX_VRAMS :                             FFFFFFFFFFFF0556 C |
 VIDEO_BUILDSPRITES.EX_YEXT :                              FFFFFFFFFFFF05BA C |
 VIDEO_BUILDSPRITES.FIRST_SPR :                            FFFFFFFFFFFF049C C |
*VIDEO_BUILDSPRITES.FREEZE :                               FFFFFFFFFFFF060A C |
 VIDEO_BUILDSPRITES.MK_PZ :                                FFFFFFFFFFFF0508 C |
 VIDEO_BUILDSPRITES.NEXT :                                 FFFFFFFFFFFF04E4 C |
 VIDEO_BUILDSPRITES.NEXT_PZ :                              FFFFFFFFFFFF04A4 C |
 VIDEO_BUILDSPRITES.NO_MAP :                               FFFFFFFFFFFF05FA C |
 VIDEO_BUILDSPRITES.NO_PZ :                                FFFFFFFFFFFF05F6 C |
*VIDEO_BUILDSPRITES.NO_SLOT :                              FFFFFFFFFFFF0600 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                           FFFFFFFFFFFF0648 C |
 VIDEO_BUILDSPRITES.NO_SLOT_R :                            FFFFFFFFFFFF0626 C |
 VIDEO_BUILDSPRITES.NO_SLOT_S :                            FFFFFFFFFFFF04D4 C |
 VIDEO_BUILDSPRITES.STOP_ALL :                             FFFFFFFFFFFF0604 C |
 VIDEO_BUILDSPRITES.VRAM_H :                               FFFFFFFFFFFF0586 C |
 VIDEO_BUILDSPRITES.VRAM_V :                               FFFFFFFFFFFF056E C |
 VIDEO_CLEAR :     FFFFFFFFFFFF0682 C |
 VIDEO_CLEAR.CLR_ME :                                      FFFFFFFFFFFF069C C |
 VIDEO_CLEAR.PMNEXT :                                      FFFFFFFFFFFF068C C |
 VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF06B2 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :                             FFFFFFFFFFFF06D8 C |
*VIDEO_COPY :      FFFFFFFFFFFF0A42 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0A4C C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0AA8 C |
 VIDEO_DEFAULT :   FFFFFFFFFFFF0314 C |
 VIDEO_DEFAULT.CLR_STAMPS :                                FFFFFFFFFFFF031C C |
 VIDEO_DISPLAYOFF :                                        FFFFFFFFFFFF06EC C |
 VIDEO_DISPLAYON : FFFFFFFFFFFF06E0 C |  VIDEO_DMAOFF :    FFFFFFFFFFFF0704 C |
 VIDEO_DMAON :     FFFFFFFFFFFF06F8 C |
 VIDEO_FADEIN_FULL :                                       FFFFFFFFFFFF0EA2 C |
 VIDEO_FADEOUT_FULL :                                      FFFFFFFFFFFF0EC4 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0F3C C |
*VIDEO_FADEPAL_LIST :                                      FFFFFFFFFFFF0F92 C |
 VIDEO_FADEPAL_LIST.INVALID :                              FFFFFFFFFFFF0FAC C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0FA0 C |
 VIDEO_FILL :      FFFFFFFFFFFF09CA C |  VIDEO_INIT :      FFFFFFFFFFFF0270 C |
 VIDEO_INIT.CLR_D :                                        FFFFFFFFFFFF02A6 C |
 VIDEO_INIT.CLR_MREQ :                                     FFFFFFFFFFFF02D2 C |
 VIDEO_INIT.CLR_PREQ :                                     FFFFFFFFFFFF02BE C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF027A C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF028C C |
 VIDEO_INIT.DEF_REGSET :                                   FFFFFFFFFFFF030A C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF02F8 C |
*VIDEO_INTENABLE : FFFFFFFFFFFF071C C |  VIDEO_LOADART :   FFFFFFFFFFFF0874 C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF0952 C |
 VIDEO_LOADART.LAST_SET :                                  FFFFFFFFFFFF08C4 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF08CC C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF08F6 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF0952 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF08BE C |
 VIDEO_LOADART.RAM_WRITE :                                 FFFFFFFFFFFF0954 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0968 C |
 VIDEO_LOADART_LIST :                                      FFFFFFFFFFFF09AA C |
 VIDEO_LOADART_LIST.INVALID :                              FFFFFFFFFFFF09C4 C |
 VIDEO_LOADART_LIST.NEXT_ONE :                             FFFFFFFFFFFF09B6 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF0BA4 C |
 VIDEO_LOADMAP.BAD_SIZE :                                  FFFFFFFFFFFF0C14 C |
 VIDEO_LOADMAP.MK_CELL :                                   FFFFFFFFFFFF0C04 C |
 VIDEO_LOADMAP.NON_BLANK :                                 FFFFFFFFFFFF0C02 C |
 VIDEO_LOADMAP.X_LOOP :                                    FFFFFFFFFFFF0BF2 C |
 VIDEO_LOADMAP.Y_LOOP :                                    FFFFFFFFFFFF0BDE C |
 VIDEO_LOADMAPV :  FFFFFFFFFFFF0C1A C |
 VIDEO_LOADMAPV.BAD_SIZE :                                 FFFFFFFFFFFF0C9C C |
 VIDEO_LOADMAPV.BAD_SIZE_D :                               FFFFFFFFFFFF0D04 C |
 VIDEO_LOADMAPV.DBLE_MODE :                                FFFFFFFFFFFF0CA2 C |
 VIDEO_LOADMAPV.MK_CELL :                                  FFFFFFFFFFFF0C86 C |
 VIDEO_LOADMAPV.MK_CELL_D :                                FFFFFFFFFFFF0CEE C |
 VIDEO_LOADMAPV.NON_BLANK :                                FFFFFFFFFFFF0C84 C |
 VIDEO_LOADMAPV.NON_BLANK_D :                              FFFFFFFFFFFF0CE6 C |
 VIDEO_LOADMAPV.X_LOOP :                                   FFFFFFFFFFFF0C5E C |
 VIDEO_LOADMAPV.X_LOOP_D :                                 FFFFFFFFFFFF0CBC C |
 VIDEO_LOADMAPV.Y_LOOP :                                   FFFFFFFFFFFF0C64 C |
 VIDEO_LOADMAPV.Y_LOOP_D :                                 FFFFFFFFFFFF0CC2 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0F46 C |
*VIDEO_LOADPAL_LIST :                                      FFFFFFFFFFFF0F72 C |
 VIDEO_LOADPAL_LIST.INVALID :                              FFFFFFFFFFFF0F8C C |
 VIDEO_LOADPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F80 C |
 VIDEO_MAKEDMAENTRY :                                      FFFFFFFFFFFF0ABE C |
 VIDEO_MAKEDMAENTRY.LAST_SET :                             FFFFFFFFFFFF0B0E C |
 VIDEO_MAKEDMAENTRY.MK_SET :                               FFFFFFFFFFFF0B16 C |
 VIDEO_MAKEDMAENTRY.NORMAL :                               FFFFFFFFFFFF0B08 C |
 VIDEO_MAKEDMAENTRY.NOT_WRAM :                             FFFFFFFFFFFF0B62 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :                              FFFFFFFFFFFF0BA2 C |
 VIDEO_MAKEFADE :  FFFFFFFFFFFF0EFE C | *VIDEO_MAKESPR :   FFFFFFFFFFFF12A8 C |
 VIDEO_MAKESPR.CHK_FREE :                                  FFFFFFFFFFFF12B4 C |
 VIDEO_MAKESPR.MK_SPR :                                    FFFFFFFFFFFF12C6 C |
 VIDEO_MAKESPRMAP :                                        FFFFFFFFFFFF1358 C |
 VIDEO_MAKESPRMAP.CHK_FREE :                               FFFFFFFFFFFF1364 C |
 VIDEO_MAKESPRMAP.MK_SPR :                                 FFFFFFFFFFFF1374 C |
 VIDEO_MAKESPRMAP_DMA :                                    FFFFFFFFFFFF1340 C |
 VIDEO_MDMARS_CLEANUP :                                    FFFFFFFFFFFF1822 C |
 VIDEO_MDMARS_CLEANUP.CHECK_BIT :                          FFFFFFFFFFFF1850 C |
 VIDEO_MDMARS_CLEANUP.CHK_SPR :                            FFFFFFFFFFFF186C C |
 VIDEO_MDMARS_CLEANUP.CHK_TEMP :                           FFFFFFFFFFFF1886 C |
 VIDEO_MDMARS_CLEANUP.CLEANLIST :                          FFFFFFFFFFFF1836 C |
 VIDEO_MDMARS_CLEANUP.MODE_2D :                            FFFFFFFFFFFF1848 C |
 VIDEO_MDMARS_CLEANUP.MODE_3D :                            FFFFFFFFFFFF187C C |
 VIDEO_MDMARS_CLEANUP.NONE :                               FFFFFFFFFFFF1846 C |
 VIDEO_MDMARS_CLEANUP.NOT_SPRTEMP :                        FFFFFFFFFFFF1874 C |
 VIDEO_MDMARS_CLEANUP.NOT_TEMP :                           FFFFFFFFFFFF188E C |
*VIDEO_MDMARS_CLEANUP.NO_FREEZE :                          FFFFFFFFFFFF187A C |
*VIDEO_MDMARS_CLEANUP.NO_MFREEZE :                         FFFFFFFFFFFF1894 C |
 VIDEO_MDMARS_CLEANUP.NO_REDRAW :                          FFFFFFFFFFFF185A C |
 VIDEO_MDMARS_FADEPAL :                                    FFFFFFFFFFFF1C58 C |
*VIDEO_MDMARS_FADEPAL_LIST :                               FFFFFFFFFFFF1CC8 C |
 VIDEO_MDMARS_FADEPAL_LIST.INVALID :                       FFFFFFFFFFFF1CE6 C |
 VIDEO_MDMARS_FADEPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1CD6 C |
 VIDEO_MDMARS_LOADMAP :                                    FFFFFFFFFFFF1942 C |
 VIDEO_MDMARS_LOADMAP.COPY_X :                             FFFFFFFFFFFF1978 C |
 VIDEO_MDMARS_LOADMAP.COPY_Y :                             FFFFFFFFFFFF1962 C |
 VIDEO_MDMARS_LOADPAL :                                    FFFFFFFFFFFF1C62 C |
*VIDEO_MDMARS_LOADPAL_LIST :                               FFFFFFFFFFFF1CA6 C |
 VIDEO_MDMARS_LOADPAL_LIST.INVALID :                       FFFFFFFFFFFF1CC2 C |
 VIDEO_MDMARS_LOADPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1CB4 C |
 VIDEO_MDMARS_LOADVRAM :                                   FFFFFFFFFFFF1918 C |
 VIDEO_MDMARS_LOADVRAM.GOOD_SZ :                           FFFFFFFFFFFF1932 C |
 VIDEO_MDMARS_LOADVRAM.GOT_ZERO :                          FFFFFFFFFFFF193C C |
 VIDEO_MDMARS_MAKEFADE :                                   FFFFFFFFFFFF0EE6 C |
 VIDEO_MDMARS_MAKESPR2D :                                  FFFFFFFFFFFF19AC C |
 VIDEO_MDMARS_MAKESPR2D.CHK_FREE :                         FFFFFFFFFFFF19B8 C |
 VIDEO_MDMARS_MAKESPR2D.MK_SPR :                           FFFFFFFFFFFF19C8 C |
 VIDEO_MDMARS_MAKESPR3D :                                  FFFFFFFFFFFF1A48 C |
 VIDEO_MDMARS_MAKESPR3D.CHK_FREE :                         FFFFFFFFFFFF1A54 C |
 VIDEO_MDMARS_MAKESPR3D.MK_SPR :                           FFFFFFFFFFFF1A64 C |
 VIDEO_MDMARS_PALBACKUP :                                  FFFFFFFFFFFF1896 C |
 VIDEO_MDMARS_PALBACKUP.COPY_IT :                          FFFFFFFFFFFF18B2 C |
 VIDEO_MDMARS_PALBACKUP.SVDP_LOCKED :                      FFFFFFFFFFFF18C6 C |
 VIDEO_MDMARS_RUNFADE :                                    FFFFFFFFFFFF1AD6 C |
*VIDEO_MDMARS_RUNFADE.ALL_BLACK :                          FFFFFFFFFFFF1B9C C |
 VIDEO_MDMARS_RUNFADE.BUSY_TIMER :                         FFFFFFFFFFFF1B1C C |
 VIDEO_MDMARS_RUNFADE.FADE_IN :                            FFFFFFFFFFFF1BA8 C |
 VIDEO_MDMARS_RUNFADE.FADE_LIST :                          FFFFFFFFFFFF1B28 C |
 VIDEO_MDMARS_RUNFADE.FADE_OUT :                           FFFFFFFFFFFF1B3C C |
 VIDEO_MDMARS_RUNFADE.FDIN_NEND :                          FFFFFFFFFFFF1C56 C |
 VIDEO_MDMARS_RUNFADE.FDOUT_NEND :                         FFFFFFFFFFFF1BA6 C |
 VIDEO_MDMARS_RUNFADE.NEXT_COLOR :                         FFFFFFFFFFFF1B4A C |
 VIDEO_MDMARS_RUNFADE.NEXT_IN :                            FFFFFFFFFFFF1BB4 C |
 VIDEO_MDMARS_RUNFADE.NEXT_REQ :                           FFFFFFFFFFFF1ADA C |
 VIDEO_MDMARS_RUNFADE.NOTHING :                            FFFFFFFFFFFF1B38 C |
 VIDEO_MDMARS_RUNFADE.NO_REQ :                             FFFFFFFFFFFF1B22 C |
*VIDEO_MDMARS_RUNFADE.SAME_IN :                            FFFFFFFFFFFF1C40 C |
 VIDEO_MDMARS_RUNFADE.SET_PRIO :                           FFFFFFFFFFFF1C3A C |
 VIDEO_MDMARS_SETSPR2D :                                   FFFFFFFFFFFF19A2 C |
 VIDEO_MDMARS_SETSPR3D :                                   FFFFFFFFFFFF1A3E C |
 VIDEO_MDMARS_SETSYNC :                                    FFFFFFFFFFFF1808 C |
 VIDEO_MDMARS_VIDEOMODE :                                  FFFFFFFFFFFF18CA C |
 VIDEO_MDMARS_VIDEOMODE.WAIT_FINISH :                      FFFFFFFFFFFF18F8 C |
 VIDEO_MDMARS_VIDEOOFF :                                   FFFFFFFFFFFF18C8 C |
*VIDEO_MDMARS_WAITFRAME :                                  FFFFFFFFFFFF181E C |
 VIDEO_MDMARS_WAITSYNC :                                   FFFFFFFFFFFF1812 C |
*VIDEO_MDMCD_MAKESTAMP :                                   FFFFFFFFFFFF1776 C |
 VIDEO_MDMCD_MAKESTAMP.CHK_FREE :                          FFFFFFFFFFFF1782 C |
 VIDEO_MDMCD_MAKESTAMP.MK_SPR :                            FFFFFFFFFFFF1792 C |
 VIDEO_MDMCD_SETSTAMP :                                    FFFFFFFFFFFF1768 C |
 VIDEO_MDMCD_STAMPDISABLE :                                FFFFFFFFFFFF16D6 C |
 VIDEO_MDMCD_STAMPDOTMAP :                                 FFFFFFFFFFFF16F6 C |
 VIDEO_MDMCD_STAMPDOTMAP.BAD_SIZE :                        FFFFFFFFFFFF1762 C |
 VIDEO_MDMCD_STAMPDOTMAP.X_LOOP :                          FFFFFFFFFFFF1732 C |
 VIDEO_MDMCD_STAMPDOTMAP.Y_LOOP :                          FFFFFFFFFFFF1738 C |
 VIDEO_MDMCD_STAMPENABLE :                                 FFFFFFFFFFFF1664 C |
 VIDEO_MDMCD_STAMPENABLE.CLR_SETT :                        FFFFFFFFFFFF1674 C |
 VIDEO_MDMCD_STAMPENABLE.DONT_USE :                        FFFFFFFFFFFF16AC C |
 VIDEO_MDMCD_STAMPINIT :                                   FFFFFFFFFFFF1402 C |
 VIDEO_MDMCD_STAMPINIT.EXIT_NOW :                          FFFFFFFFFFFF1436 C |
 VIDEO_MDMCD_STAMPINIT.MK_INITBUFF :                       FFFFFFFFFFFF1424 C |
 VIDEO_MDMCD_STAMPINIT.WAIT_FINISH :                       FFFFFFFFFFFF142A C |
*VIDEO_MDMCD_STAMPMAP :                                    FFFFFFFFFFFF1806 C |
 VIDEO_MDMCD_STAMPRENDER :                                 FFFFFFFFFFFF143A C |
 VIDEO_MDMCD_STAMPRENDER.COPY_LSB :                        FFFFFFFFFFFF1616 C |
 VIDEO_MDMCD_STAMPRENDER.COPY_MID :                        FFFFFFFFFFFF1564 C |
 VIDEO_MDMCD_STAMPRENDER.DRAW_CELLS :                      FFFFFFFFFFFF1492 C |
 VIDEO_MDMCD_STAMPRENDER.EXACT_SIZE :                      FFFFFFFFFFFF1502 C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_ONE :                       FFFFFFFFFFFF14EC C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_STEP :                      FFFFFFFFFFFF14A4 C |
 VIDEO_MDMCD_STAMPRENDER.MAKE_CELLBUFF :                   FFFFFFFFFFFF1532 C |
 VIDEO_MDMCD_STAMPRENDER.MAXIMUM :                         FFFFFFFFFFFF150A C |
 VIDEO_MDMCD_STAMPRENDER.MKDMA_BUFF :                      FFFFFFFFFFFF14D2 C |
 VIDEO_MDMCD_STAMPRENDER.NOT_DONE :                        FFFFFFFFFFFF151E C |
 VIDEO_MDMCD_STAMPRENDER.NOT_YET :                         FFFFFFFFFFFF14C8 C |
 VIDEO_MDMCD_STAMPRENDER.NO_LSB :                          FFFFFFFFFFFF1626 C |
 VIDEO_MDMCD_STAMPRENDER.OUT_LOCS :                        FFFFFFFFFFFF152A C |
 VIDEO_MDMCD_STAMPRENDER.WAIT_WRAM :                       FFFFFFFFFFFF1496 C |
 VIDEO_PRINT :     FFFFFFFFFFFF0FE0 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF104C C |
 VIDEO_PRINT.HEX_INCR :                                    FFFFFFFFFFFF10C0 C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF1014 C |
 VIDEO_PRINT.MK_VALUE :                                    FFFFFFFFFFFF109C C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF1046 C |
 VIDEO_PRINT.Q_LOOP :                                      FFFFFFFFFFFF102A C |
 VIDEO_PRINT.SHOW_24 :                                     FFFFFFFFFFFF1090 C |
*VIDEO_PRINT.SHOW_BYTE :                                   FFFFFFFFFFFF1080 C |
 VIDEO_PRINT.SHOW_LONG :                                   FFFFFFFFFFFF1098 C |
 VIDEO_PRINT.SHOW_NIBBL :                                  FFFFFFFFFFFF10B0 C |
 VIDEO_PRINT.SHOW_WORD :                                   FFFFFFFFFFFF1088 C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF1052 C |
*VIDEO_PRINTDEFPAL :                                       FFFFFFFFFFFF0FCA C |
 VIDEO_PRINTDEFPAL_FADE :                                  FFFFFFFFFFFF0FC2 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0FB8 C |
 VIDEO_PRINTINITW :                                        FFFFFFFFFFFF0FB2 C |
 VIDEO_PRINTW :    FFFFFFFFFFFF10D2 C |
 VIDEO_PRINTW.EXIT :                                       FFFFFFFFFFFF11A6 C |
 VIDEO_PRINTW.GET_PREVAL :                                 FFFFFFFFFFFF128A C |
 VIDEO_PRINTW.HEX_INCR :                                   FFFFFFFFFFFF1298 C |
 VIDEO_PRINTW.LOOP :                                       FFFFFFFFFFFF1126 C |
 VIDEO_PRINTW.MK_VALUE :                                   FFFFFFFFFFFF11FA C |
 VIDEO_PRINTW.MK_VALUE_IN :                                FFFFFFFFFFFF11F6 C |
 VIDEO_PRINTW.NEXT :                                       FFFFFFFFFFFF119E C |
 VIDEO_PRINTW.NIBBL_CONT :                                 FFFFFFFFFFFF1282 C |
 VIDEO_PRINTW.NIBBL_NORM :                                 FFFFFFFFFFFF124C C |
 VIDEO_PRINTW.NO_DBLE_Y :                                  FFFFFFFFFFFF10FA C |
 VIDEO_PRINTW.SHOW_24 :                                    FFFFFFFFFFFF11EA C |
*VIDEO_PRINTW.SHOW_BYTE :                                  FFFFFFFFFFFF11DA C |
 VIDEO_PRINTW.SHOW_LONG :                                  FFFFFFFFFFFF11F2 C |
 VIDEO_PRINTW.SHOW_NIBBL :                                 FFFFFFFFFFFF120E C |
 VIDEO_PRINTW.SHOW_WORD :                                  FFFFFFFFFFFF11E2 C |
 VIDEO_PRINTW.SPECIAL :                                    FFFFFFFFFFFF11AC C |
 VIDEO_PRINTW.VER_CONT :                                   FFFFFFFFFFFF1198 C |
 VIDEO_PRINTW.VER_NORMAL :                                 FFFFFFFFFFFF1166 C |
 VIDEO_RENDER :    FFFFFFFFFFFF037E C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF0470 C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF047A C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF0448 C |
 VIDEO_RESOLUTION :                                        FFFFFFFFFFFF076E C |
 VIDEO_RESOLUTION.DOUBLE :                                 FFFFFFFFFFFF07B0 C |
 VIDEO_RESOLUTION.EX_BIT :                                 FFFFFFFFFFFF07A2 C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0D08 C |
 VIDEO_RUNFADE.ALL_BLACK :                                 FFFFFFFFFFFF0DD4 C |
 VIDEO_RUNFADE.BUSY_TIMER :                                FFFFFFFFFFFF0D4E C |
 VIDEO_RUNFADE.FADE_IN :                                   FFFFFFFFFFFF0DE2 C |
 VIDEO_RUNFADE.FADE_LIST :                                 FFFFFFFFFFFF0D5A C |
 VIDEO_RUNFADE.FADE_OUT :                                  FFFFFFFFFFFF0D72 C |
*VIDEO_RUNFADE.FDIN_NEND :                                 FFFFFFFFFFFF0E78 C |
*VIDEO_RUNFADE.FDOUT_NEND :                                FFFFFFFFFFFF0DE0 C |
 VIDEO_RUNFADE.NEXT_COLOR :                                FFFFFFFFFFFF0D80 C |
 VIDEO_RUNFADE.NEXT_IN :                                   FFFFFFFFFFFF0DEE C |
 VIDEO_RUNFADE.NEXT_REQ :                                  FFFFFFFFFFFF0D0C C |
 VIDEO_RUNFADE.NOTHING :                                   FFFFFFFFFFFF0D6A C |
 VIDEO_RUNFADE.NO_REQ :                                    FFFFFFFFFFFF0D54 C |
 VIDEO_RUNFADE.PFADE_DEL :                                 FFFFFFFFFFFF0D6A C |
 VIDEO_RUNFADE.SAME_IN :                                   FFFFFFFFFFFF0E62 C |
 VIDEO_SETMAPSIZE :                                        FFFFFFFFFFFF084E C |
*VIDEO_SETSPR :    FFFFFFFFFFFF129E C |  VIDEO_SETSPRMAP : FFFFFFFFFFFF1336 C |
*VIDEO_SETSPRMAP_DMA :                                     FFFFFFFFFFFF132C C |
 VIDEO_UPDMAPVRAM :                                        FFFFFFFFFFFF07C2 C |
 VIDEO_UPDSPRHVRAM :                                       FFFFFFFFFFFF0814 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF0E7A C |
 VIDEO_WAITFADE.LOOP :                                     FFFFFFFFFFFF0E7A C |
 VIDEO_WAITFADE.NEXT_ONE :                                 FFFFFFFFFFFF0E8C C |
 VIDMARS_PAL :     FFFFFFFFFFFF1C6A C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF1C84 C |
 VIDMARS_PAL.TRNSPR :                                      FFFFFFFFFFFF1C96 C |
 VIDMDMARS_CERROR :                                        FFFFFFFFFFFF1A34 C |
 VIDMDMARS_MKSPR2D :                                       FFFFFFFFFFFF19CA C |
*VIDMDMARS_MKSPR2D.ON_FREEZE :                             FFFFFFFFFFFF1A2A C |
 VIDMDMARS_MKSPR3D :                                       FFFFFFFFFFFF1A66 C |
 VIDMDMCD_CERROR : FFFFFFFFFFFF17EE C |
 VIDMDMCD_MKSTAMP :                                        FFFFFFFFFFFF1794 C |
*VIDMDMCD_RDSTMPSLOT :                                     FFFFFFFFFFFF17F8 C |
 VIDMDMCD_SENDSTAMPINFO :                                  FFFFFFFFFFFF162A C |
 VIDMDMCD_SENDSTAMPINFO.CHK_SPR :                          FFFFFFFFFFFF1652 C |
 VIDMDMCD_SENDSTAMPINFO.COPY_TOWRAM :                      FFFFFFFFFFFF1638 C |
 VIDMDMCD_SENDSTAMPINFO.NOT_SPRTEMP :                      FFFFFFFFFFFF165A C |
 VIDMDSPR_MKSPR :  FFFFFFFFFFFF12C8 C |
 VIDMDSPR_MKSPR.DONT_ADD :                                 FFFFFFFFFFFF12F2 C |
 VIDMDSPR_MKSPRMAP :                                       FFFFFFFFFFFF1376 C |
 VIDMD_CERROR :    FFFFFFFFFFFF1322 C | *VIDMD_CFREEZE :   FFFFFFFFFFFF132A C |
 VIDMD_PAL :       FFFFFFFFFFFF0F4E C |  VIDMD_PAL.BAD :   FFFFFFFFFFFF0F6C C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0F66 C |  VIDMKFADE_GO :    FFFFFFFFFFFF0F16 C |
 VIDPRINT_INIT :   FFFFFFFFFFFF0FBC C |
 VID_CHECKLASTSPR :                                        FFFFFFFFFFFF0650 C |
 VID_CHECKLASTSPR.BLNK_FIRST :                             FFFFFFFFFFFF066A C |
 VID_CHECKLASTSPR.LAST_ONE :                               FFFFFFFFFFFF0670 C |
 VID_CHECKLASTSPR.SPR_EXIT :                               FFFFFFFFFFFF0680 C |
*VID_FILLGO :      FFFFFFFFFFFF09D2 C |  VID_FILLGO.DMAW : FFFFFFFFFFFF09D8 C |
 VID_FILLGO.DMA_W :                                        FFFFFFFFFFFF0A2C C |
 VID_FONTDEFPAL :  FFFFFFFFFFFF0FD0 C |  VID_MKDMACARRY :  FFFFFFFFFFFF1352 C |
 VID_MKDMANEXT :   FFFFFFFFFFFF1348 C |  VID_MKMAPDMA :    FFFFFFFFFFFF13B2 C |
 VID_MKMAPDMA.NEXT_PZ :                                    FFFFFFFFFFFF13D2 C |
 VID_MKMAPDMA.NO_DMA :                                     FFFFFFFFFFFF13FC C |
 VID_WRTREG01 :    FFFFFFFFFFFF070E C |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :    FFFFFFFFFFFF20F8 C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1D06 C |  WAVE_LEN :                    1CFE C |
 WAVE_LOOP :                   1D01 C |  WAVE_PITCH :                  1D04 C |
 WAVE_START :                  1CFB C |  WAVFREQ_CDPCM :               1695 C |
 WAVFREQ_LIST :                1635 C | *WONDERCHK :                     98 - |
*WONDERREQ :                     97 - |  WRAM_DOTOUTPUT_0 :           20000 - |
 WRAM_DOTOUTPUT_1 :           28000 - |  WRAM_MDMAPTABLE :            30000 - |
 WRAM_MDSTAMPLIST :           3A000 - |  WRAM_SAVEDATACOPY :          3C000 - |
 WRAM_STAMPCURRFLIP :         3BFFE - |  WRAM_STAMPSDONE :            3BFFC - |
 WRAM_TRACEBUFF :             3B000 - |  X68KSRCLSB :                  1D07 C |
 X68KSRCMID :                  1D08 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  200000 C |
 Z80_CODE_END :              201F6E C |  Z80_CODE_FILE :               C000 C |
 Z80_CODE_FILE_E :             E000 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      50 C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      2E - | *ZDRVMARSBLK :                   37 - |
*ZDRVMCDBLK :                    36 - |  ZDRVRAMLEN :                    30 - |
 ZDRVRAMSRC :                    35 - |  ZDRVROMBLK :                    2F - |
 ZMARS_SEND :                  1047 C |  ZMARS_SEND.BLOCKED_M :        1150 C |
 ZMARS_SEND.CLR_PCM :          10CC C |  ZMARS_SEND.CLR_PWM :          1156 C |
 ZMARS_SEND.COPY_BYTES :       10A4 C |  ZMARS_SEND.MAKE_SURE :        107C C |
 ZMARS_SEND.MCDT_BLOCKED :     10C6 C |  ZMARS_SEND.MCDT_NOUPD :       10D0 C |
 ZMARS_SEND.MCD_NEXTP :        109B C |  ZMARS_SEND.NEXT_COMM :        1128 C |
 ZMARS_SEND.NEXT_PACKET :      111D C |  ZMARS_SEND.PWM_EXIT :         115A C |
 ZMARS_SEND.SET_COMBANK :      1169 C |  ZMARS_SEND.TEST_SUB :         1087 C |
 ZMARS_SEND.WAIT_ENTER :       10F1 C |  ZMARS_SEND.WAIT_IN :          1068 C |
 ZMARS_SEND.WAIT_SUB :         10B3 C |  ZMARS_SEND.W_PASS2 :          113E C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_EFFBUFF :                   8 - |
 ZTBL_FREQINDX :                  5 - |  ZTBL_INSTCACH :                  A - |
 ZTBL_LINK :                      0 - |  ZTBL_MASTERVOL :                 4 - |
 ZTBL_PITCHBEND :                 6 - | *ZTBL_PRIORITY :                  2 - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_ADRERR :                     5F40 - |
*_BOOTSTAT :                   5EA0 - |  _BURAM :                      5F16 - |
 _CCR :                    FFFFFE92 - |  _CDBIOS :                     5F22 - |
*_CDBOOT :                     5F1C - | *_CDSTAT :                     5E80 - |
*_CHKERR :                     5F52 - | *_CODERR :                     5F46 - |
*_DEVERR :                     5F4C - |  _DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - |  _DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
 _DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
 _FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - |  _FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - |  _JR :                     FFFFFF00 - |
 _LEVEL1 :                     5F76 - | *_LEVEL2 :                     5F7C - |
 _LEVEL3 :                     5F82 - | *_LEVEL4 :                     5F88 - |
*_LEVEL5 :                     5F8E - | *_LEVEL6 :                     5F94 - |
*_LEVEL7 :                     5F9A - | *_NOCOD0 :                     5F6A - |
*_NOCOD1 :                     5F70 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - |  _OVERWRITE :              24020000 - |
 _PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SETJMPTBL :                  5F0A - | *_SPVERR :                     5F5E - |
 _SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_TRACE :                      5F64 - |
*_TRAP00 :                     5FA0 - | *_TRAP01 :                     5FA6 - |
*_TRAP02 :                     5FAC - | *_TRAP03 :                     5FB2 - |
*_TRAP04 :                     5FB8 - | *_TRAP05 :                     5FBE - |
*_TRAP06 :                     5FC4 - | *_TRAP07 :                     5FCA - |
*_TRAP08 :                     5FD0 - | *_TRAP09 :                     5FD6 - |
*_TRAP10 :                     5FDC - | *_TRAP11 :                     5FE2 - |
*_TRAP12 :                     5FE8 - | *_TRAP13 :                     5FEE - |
*_TRAP14 :                     5FF4 - | *_TRAP15 :                     5FFA - |
*_TRPERR :                     5F58 - | *_USERCALL0 :                  5F28 - |
*_USERCALL1 :                  5F2E - | *_USERCALL2 :                  5F34 - |
*_USERCALL3 :                  5F3A - | *_USERMODE :                   5EA6 - |
 _VDPREG :                 20004100 - | *_WAITVSYNC :                  5F10 - |
 _WAITVSYNC.TABLE :            6020 C |

   2725 symbols
    443 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 09/26/2024 03:18:27 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
CPU_ME                                | DATA_DEND                            
DATA_DSET                             | ENDMEMORY                            
ERREPORT                              | FILLSECTORS                          
FS_END                                | FS_FILE                              
FS_MKLIST                             | GEMAHEAD                             
GEMATRK                               | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPCM                              
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPLDATA                            
MARS_VRAMEND                          | MARS_VRAMSTART                       
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     29 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 09/26/2024 03:18:27 AM


  Defined Structures/Unions:
  --------------------------

CDPCM
  0      (I8) STATUS
  1      (I8) FLAGS
  2      (I8) STRMF
  3      (I8) STRMHALF
  4      (I32) START
  8      (I32) SLAST
  C      (I32) LENGTH
 10      (I32) LOOP
 14      (I32) CLEN
 18      (I32) CREAD
 1C      (I16) PITCH
 1E      (I16) CBLOCK
 20      (I8) PAN
 21      (I8) ENV

CDSTAMP
  0      (I8) FLAGS
  1      (I8) MAP
  2      (I16) CX
  4      (I16) CY
  6      (I16) X
  8      (I16) Y
  A      (I16) WDTH
  C      (I16) HGHT
  E      (I16) SCALE
 10      (I16) ROT

DREQ
  0      (I16) PALETTE
200      (I8) BUFF0
220      (I8) BUFF1
620      (I8) BUFF2

MARSGBL
  0      (I16) THISFRAME
  2      (I16) XSHIFT
  4      (I16) WDGTASK
  6      (I16) WDGHOLD
  8      (I16) WDGDIVLOCK
  A      (I16) WDGREADY
  C      (I16) PLYPZCNTR
  E      (I16) WDGCLLINES
 10      (I16) WDGACTIVE
 16      (I16) DRAWALL
 18      (I32) 3D_OUTWIDTH
 1C      (I32) 3D_OUTHEIGHT
 20      (I32) DREQREAD
 24      (I32) DREQWRITE
 28      (I32) PLGNPZINDX_R
 2C      (I32) PLGNPZINDX_W
 30      (I32) SCRL_XPOS
 34      (I32) SCRL_YPOS
 38      (I32) SCRL_XOLD
 3C      (I32) SCRL_YOLD
 40      (I32) SCRL_SIZE
 44      (I32) SCRL_WDTH
 48      (I32) SCRL_HGHT
 4C      (I32) SCRL_VRAM
 50      (I32) SCRL_FBOUT
 54      (I32) SCRL_FBTL
 58      (I32) SCRL_FBY
 5C      (I32) SCRL_FBX

MARSPWM
  0      (I32) ENBL
  4      (I32) READ
  8      (I32) BANK
  C      (I32) START
 10      (I32) LENGTH
 14      (I32) LOOP
 18      (I32) PITCH
 1C      (I32) VOL
 20      (I32) CBANK
 24      (I32) CREAD

MCAM
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) Z_POS
  C      (I32) X_ROT
 10      (I32) Y_ROT
 14      (I32) Z_ROT

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

MMDL
  0      (I16) FRAME
  4      (I32) DATA
  8      (I32) X_POS
  C      (I32) Y_POS
 10      (I32) Z_POS
 14      (I32) X_ROT
 18      (I32) Z_ROT
 1C      (I32) Y_ROT

MSPR
  0      (I8) FLAGS
  1      (I8) INDX
  2      (I8) SIZE_W
  3      (I8) SIZE_H
  4      (I8) SRC_W
  5      (I8) SRC_H
  6      (I8) SRCWDTH
  7      (I8) FRAME_X
  8      (I8) FRAME_Y
 10      (I16) X_POS
 12      (I16) Y_POS
 14      (I16) Z_POS
 16      (I16) X_ROT
 18      (I16) Z_ROT
 1A      (I16) Y_ROT
 1C      (I32) VRAM

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM

PLYGN
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) POINTS
 28      (I16) SRCPNTS

PLYPZ
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) YTB
  C      (I32) XL
 10      (I32) SRC_XL
 14      (I32) SRC_YL
 18      (I32) XL_DX
 1C      (I32) XR_DX
 20      (I32) SRC_XL_DX
 24      (I32) SRC_XR_DX
 28      (I32) SRC_YL_DX
 2C      (I32) SRC_YR_DX

SSCRL
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) VRAM

SSPR
  0      (I8) FLAGS
  2      (I16) FRAME
  4      (I16) SIZE
  6      (I16) INDX
  8      (I16) X_POS
  A      (I16) Y_POS
  C      (I32) VRAM

STMPC
  0      (I16) XC
  2      (I16) YC
  4      (I32) X
  8      (I32) Y
  C      (I32) DX
 10      (I32) DY
 14      (I32) TX
 18      (I32) TY
 1C      (I16) XMUL
 1E      (I16) ZMUL
 20      (I16) ZMUL_SIN
 22      (I16) ZMUL_COS
 24      (I16) ROT_SIN
 26      (I16) ROT_COS

STMPI
  0      (I16) MAP
  2      (I16) X
  4      (I16) Y
  6      (I16) XR
  8      (I16) YD
  A      (I16) FLAGS
17 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 09/26/2024 03:18:27 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 09/26/2024 03:18:27 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.46 seconds assembly time

  25404 lines source file
  27237 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
