 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 09/14/2024 05:32:18 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$7                  SET_INITMODE	equ 7		; Starting screen mode number on boot, for debugging.
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)USER 2024.???"  HTAG_DATEINFO	equ "(C)USER 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SEGA CD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name (if SET_SAMECDINFO is False)
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MOMPASS>2
(1)  231/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  232/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  233/       0 :                     		endif
(1)  234/       0 :                     	endif
(1)  235/       0 :                     
(1)  236/       0 :                     	if MARS
(1)  237/       0 :                     		if * >= $900000+$100000
(1)  238/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  239/       0 :                     		endif
(1)  240/       0 :                     
(1)  241/       0 :                     		dephase
(1)  242/       0 :                     	elseif MCD|MARSCD
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     
(1)  245/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  246/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  247/       0 :                     		rompad mpadlbl
(1)  248/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  249/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	endm
(1)  252/       0 :                     
(1)  253/       0 :                     ; --------------------------------------------
(1)  254/       0 :                     
(1)  255/       0 :                     binclude_dma	macro lblstart,file
(1)  256/       0 :                     	if MARS
(1)  257/       0 :                     GLBL_LASTPHDMA	set *
(1)  258/       0 :                     	dephase
(1)  259/       0 :                     GLBL_PHASEDMA	set *
(1)  260/       0 :                     		endif
(1)  261/       0 :                     
(1)  262/       0 :                     		align 2
(1)  263/       0 :                     lblstart	label *
(1)  264/       0 :                     		binclude file
(1)  265/       0 :                     		align 2
(1)  266/       0 :                     
(1)  267/       0 :                     	if MARS
(1)  268/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  269/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  270/       0 :                     	endif
(1)  271/       0 :                     		endm
(1)  272/       0 :                     
(1)  273/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  274/       0 :                     	if MARS
(1)  275/       0 :                     GLBL_LASTPHDMA	set *
(1)  276/       0 :                     	dephase
(1)  277/       0 :                     GLBL_PHASEDMA	set *
(1)  278/       0 :                     		endif
(1)  279/       0 :                     
(1)  280/       0 :                     		align 2
(1)  281/       0 :                     lblstart	label *
(1)  282/       0 :                     		binclude file
(1)  283/       0 :                     lblend		label *
(1)  284/       0 :                     		align 2
(1)  285/       0 :                     
(1)  286/       0 :                     	if MARS
(1)  287/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  288/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  289/       0 :                     	endif
(1)  290/       0 :                     		endm
(1)  291/       0 :                     
(1)  292/       0 :                     ; --------------------------------------------
(1)  293/       0 :                     ; 32X graphics pack Enter/Exit
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     
(1)  296/       0 :                     mars_VramStart	macro thelabel
(1)  297/       0 :                     thelabel label *
(1)  298/       0 :                     		phase 0
(1)  299/       0 :                     		endm
(1)  300/       0 :                     
(1)  301/       0 :                     mars_VramEnd	macro thelabel
(1)  302/       0 :                     		align 8
(1)  303/       0 :                     .end:
(1)  304/       0 :                     ; 		if MOMPASS == 1
(1)  305/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  306/       0 :                     ; 		endif
(1)  307/       0 :                     		dephase
(1)  308/       0 :                     thelabel label *
(1)  309/       0 :                     		endm
(1)  310/       0 :                     
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     ; Fill CD sectors
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     
(1)  315/       0 :                     fillSectors macro num
(1)  316/       0 :                     	rept num
(1)  317/       0 :                     		align $800-1
(1)  318/       0 :                     		dc.b 0
(1)  319/       0 :                     	endm
(1)  320/       0 :                     	endm
(1)  321/       0 :                     
(1)  322/       0 :                     ; ====================================================================
(1)  323/       0 :                     ; ------------------------------------------------------------
(1)  324/       0 :                     ; Nikona CODE macros
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     
(1)  327/       0 :                     ; --------------------------------------------
(1)  328/       0 :                     ; VDP color debug
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     
(1)  331/       0 :                     vdp_showme	macro color
(1)  332/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  333/       0 :                     		move.w	#color,(vdp_data).l
(1)  334/       0 :                     		endm
(1)  335/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   55/FFFFFFFFFFFFC800 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFD7F8 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFE99A :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFE9A0 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)   60/    39A0 :                     .here:          dephase
(1)   60/    39A0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFD7F8 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFD7F8 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFD7F8 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFD7F8 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFD7F8 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFD7F8 :                     
(1)    6/FFFFFFFFFFFFD7F8 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFD7FC :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFD800 :                     
      80/FFFFFFFFFFFFD800 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFD800 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFD804 : (MACRO)              		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFD804 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     156/       0 :                     		include	"system/head_pico.asm"			; Pico header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0204           		dc.l Pico_Entry		; Entry
(1)    8/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)    9/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   10/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   19/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l Pico_Error
(1)   32/      68 : FFFF E98C           		dc.l RAM_ExternalJump	; PICO: User interrupt
(1)   33/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-is-full interrupt
(1)   34/      70 : FFFF E986           		dc.l RAM_HBlankJump	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   36/      78 : FFFF E980           		dc.l RAM_VBlankJump	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l Pico_Error
(1)   38/      80 : 0000 0200           		dc.l Pico_Error
(1)   39/      84 : 0000 0200           		dc.l Pico_Error
(1)   40/      88 : 0000 0200           		dc.l Pico_Error
(1)   41/      8C : 0000 0200           		dc.l Pico_Error
(1)   42/      90 : 0000 0200           		dc.l Pico_Error
(1)   43/      94 : 0000 0200           		dc.l Pico_Error
(1)   44/      98 : 0000 0200           		dc.l Pico_Error
(1)   45/      9C : 0000 0200           		dc.l Pico_Error
(1)   46/      A0 : 0000 0200           		dc.l Pico_Error
(1)   47/      A4 : 0000 0200           		dc.l Pico_Error
(1)   48/      A8 : 0000 0200           		dc.l Pico_Error
(1)   49/      AC : 0000 0200           		dc.l Pico_Error
(1)   50/      B0 : 0000 0200           		dc.l Pico_Error
(1)   51/      B4 : 0000 0200           		dc.l Pico_Error
(1)   52/      B8 : 0000 0200           		dc.l Pico_Error
(1)   53/      BC : 0000 0200           		dc.l Pico_Error
(1)   54/      C0 : 0000 0200           		dc.l Pico_Error
(1)   55/      C4 : 0000 0200           		dc.l Pico_Error
(1)   56/      C8 : 0000 0200           		dc.l Pico_Error
(1)   57/      CC : 0000 0200           		dc.l Pico_Error
(1)   58/      D0 : 0000 0200           		dc.l Pico_Error
(1)   59/      D4 : 0000 0200           		dc.l Pico_Error
(1)   60/      D8 : 0000 0200           		dc.l Pico_Error
(1)   61/      DC : 0000 0200           		dc.l Pico_Error
(1)   62/      E0 : 0000 0200           		dc.l Pico_Error
(1)   63/      E4 : 0000 0200           		dc.l Pico_Error
(1)   64/      E8 : 0000 0200           		dc.l Pico_Error
(1)   65/      EC : 0000 0200           		dc.l Pico_Error
(1)   66/      F0 : 0000 0200           		dc.l Pico_Error
(1)   67/      F4 : 0000 0200           		dc.l Pico_Error
(1)   68/      F8 : 0000 0200           		dc.l Pico_Error
(1)   69/      FC : 0000 0200           		dc.l Pico_Error
(1)   70/     100 : 5345 4741 2050      		dc.b HTAG_SYS_PICO;"SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   71/     110 : 2843 2955 5345      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 5220 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_PICO;"Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b HTAG_NOV_PICO;"Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0007 EEA6           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; PICO can't use SRAM
(1)   82/     1B4 : 2020 2020           		dc.l $20202020
(1)   83/     1B8 : 2020 2020           		dc.l $20202020
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; All of these do nothing for now.
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     Pico_ErrBus:				; Bus error
(1)   95/     200 :                     Pico_ErrAddr:				; Address error
(1)   96/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)   99/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     Pico_Trace:				; Trace
(1)  102/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     Pico_ErrorEx:				; Error exception
(1)  105/     200 :                     Pico_Error:
(1)  106/     200 : 4E73                		rte
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; PICO-specific interrupts
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     Pico_UserInt:
(1)  114/     202 :                     Pico_PcmInt:				; <-- Interrupt when the PCM chip gets full
(1)  115/     202 :                     Pico_UnkInt:
(1)  116/     202 : 4E73                		rte
(1)  117/     204 :                     
(1)  118/     204 :                     ; ====================================================================
(1)  119/     204 :                     ; ----------------------------------------------------------------
(1)  120/     204 :                     ; Entry point
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     
(1)  123/     204 :                     Pico_Entry:
(1)  124/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  125/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  126/     20E : 203C 5345 4741      		move.l	#"SEGA",d0		; Activate PICO system by
(1)  127/     214 : 01C8 0000           		movep.l	d0,(a0)			; writing this string to $800019 in odd writes
(1)  128/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Test VDP to unlock Video
(1)  129/     21E :                     	; --------------------------------
(1)  130/     21E : 7000                		moveq	#0,d0
(1)  131/     220 : 2C40                		movea.l	d0,a6
(1)  132/     222 : 4E66                		move.l	a6,usp
(1)  133/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  134/     22A : 223C FFFF E99A      		move.l	#sizeof_mdram,d1
(1)  135/     230 : 7000                		moveq	#0,d0
(1)  136/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  137/     234 : B1C1                		cmp.l	d1,a0
(1)  138/     236 : 65FA                		bcs.s	.loop_ram
(1)  139/     238 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  140/     23E : 3E2E 0004           .wait_dma:	move.w	4(a6),d7		; Check if DMA is active.
(1)  141/     242 : 0807 0001           		btst	#1,d7
(1)  142/     246 : 66F6                		bne.s	.wait_dma
(1)  143/     248 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)	; Clear palette
              24E : 0004             
(1)  144/     250 : 7E3F                		moveq	#64-1,d7
(1)  145/     252 : 7C00                		moveq	#0,d6
(1)  146/     254 :                     .palclear:
(1)  147/     254 : 3C86                		move.w	d6,(a6)
(1)  148/     256 : 51CF FFFC           		dbf	d7,.palclear
(1)  149/     25A : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              260 : 0000             
(1)  150/     262 :                     
     157/     262 : 6100 1290           		bsr	Sound_init				; Init Sound driver FIRST
     158/     266 : 6100 012C           		bsr	Video_init				;  ''  Video
     159/     26A : 6100 11C8           		bsr	System_Init				;  ''  Values
     160/     26E : 31FC 0007 E994      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     161/     274 : 6000 1878           		bra.w	Md_ReadModes				; Go to SCREEN LOOP section
     162/     278 :                     
     163/     278 :                     ; ---------------------------------------------
     164/     278 :                     ; MD
     165/     278 :                     ; ---------------------------------------------
     176/     278 :                     
     177/     278 :                     ; ====================================================================
     178/     278 :                     ; --------------------------------------------------------
     179/     278 :                     ; SYSTEM routines
     180/     278 :                     ;
     181/     278 :                     ; MD/PICO:  Normal ROM locations
     182/     278 :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     183/     278 :                     ;           with the SH2's view of ROM
     184/     278 :                     ; CD/CD32X: Loaded into RAM for safe access.
     185/     278 :                     ; --------------------------------------------------------
     186/     278 :                     
     191/     278 :                     ; ---------------------------------------------
     192/     278 :                     
     193/     278 :                     		include	"sound/driver/gema.asm"
(1)    1/     278 :                     ; ===========================================================================
(1)    2/     278 :                     ; -------------------------------------------------------------------
(1)    3/     278 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     278 :                     ; by GenesisFan64 2023-2024
(1)    5/     278 :                     ;
(1)    6/     278 :                     ; Features:
(1)    7/     278 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/     278 :                     ;   | All 8 channels with streaming support
(1)    9/     278 :                     ;   | for larger samples.
(1)   10/     278 :                     ;
(1)   11/     278 :                     ; - Support for 32X's PWM:
(1)   12/     278 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/     278 :                     ;   | or STEREO.
(1)   14/     278 :                     ;
(1)   15/     278 :                     ; - WAVE playback at 16000hz (base) for
(1)   16/     278 :                     ;   | all sample-based channels:
(1)   17/     278 :                     ;   | DAC, PCM and PWM
(1)   18/     278 :                     ;
(1)   19/     278 :                     ; - DMA ROM protection for DAC
(1)   20/     278 :                     ;   | This keeps the wave playback in a
(1)   21/     278 :                     ;   | decent quality while doing any DMA
(1)   22/     278 :                     ;   | task in the 68k side.
(1)   23/     278 :                     ; - FM special mode with custom frequencies
(1)   24/     278 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   25/     278 :                     ;
(1)   26/     278 :                     ; * Notes:
(1)   27/     278 :                     ; This driver uses the area $FFFF00-$FFFFFF
(1)   28/     278 :                     ; The Z80 writes a flag directly to RAM for
(1)   29/     278 :                     ; a workaround to bypass a data-reading
(1)   30/     278 :                     ; hardware limitation. (see Sound_Update)
(1)   31/     278 :                     ;
(1)   32/     278 :                     ; CURRENTLY THIS CAN ONLY BE USED HERE IN NikonaSDK
(1)   33/     278 :                     ; BECAUSE OF CROSS-REFERENCING LABELS BETWEEN THE
(1)   34/     278 :                     ; Z80 and 68K.
(1)   35/     278 :                     ; -------------------------------------------------------------------
(1)   36/     278 :                     
(1)   37/     278 :                     ; ------------------------------------------------------------
(1)   38/     278 :                     ; MACROS
(1)   39/     278 :                     ; ------------------------------------------------------------
(1)   40/     278 :                     
(1)   41/     278 :                     ; ----------------------------------------------------
(1)   42/     278 :                     ; gSmplData - Include .WAV sample data, applies to
(1)   43/     278 :                     ;             DAC, PCM* and PWM
(1)   44/     278 :                     ;
(1)   45/     278 :                     ;             * No need to convert data, Sub-CPU
(1)   46/     278 :                     ;             converts the data manually.
(1)   47/     278 :                     ;
(1)   48/     278 :                     ; labl | 24-bit Pointer, depending of the
(1)   49/     278 :                     ;        current CPU
(1)   50/     278 :                     ; file | File path for the WAV sample file
(1)   51/     278 :                     ; loop | Loop start point if sample loop is enabled
(1)   52/     278 :                     ;        Set to 0 if not using loop.
(1)   53/     278 :                     ; ----------------------------------------------------
(1)   54/     278 :                     
(1)   55/     278 :                     gSmplData macro labl,file,loop
(1)   56/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   57/     278 :                     		align 4
(1)   58/     278 :                     	endif
(1)   59/     278 :                     labl	label *
(1)   60/     278 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   61/     278 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   62/     278 :                     labl_s:
(1)   63/     278 :                     	binclude file,$2C
(1)   64/     278 :                     labl_e:
(1)   65/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   66/     278 :                     		align 4
(1)   67/     278 :                     	endif
(1)   68/     278 :                     	endm
(1)   69/     278 :                     
(1)   70/     278 :                     ; ----------------------------------------------------
(1)   71/     278 :                     ; gemaList - Make a tracklist label
(1)   72/     278 :                     ; ----------------------------------------------------
(1)   73/     278 :                     
(1)   74/     278 :                     gemaList macro thislbl
(1)   75/     278 :                     	align 2
(1)   76/     278 :                     thislbl	label *
(1)   77/     278 :                     GLBL_GEMABASE := *
(1)   78/     278 :                     	endm
(1)   79/     278 :                     
(1)   80/     278 :                     ; ----------------------------------------------------
(1)   81/     278 :                     ; gemaTrk - Sequence entry on Gema_MasterList
(1)   82/     278 :                     ;
(1)   83/     278 :                     ; enblt | Disable/Enable global beats on this Sequence
(1)   84/     278 :                     ;         0 - Don't Use beats, 1 - Use beats
(1)   85/     278 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   86/     278 :                     ;   loc | Direct location of the sequence data
(1)   87/     278 :                     ; ----------------------------------------------------
(1)   88/     278 :                     
(1)   89/     278 :                     gemaTrk macro enbltp,ticks,loc
(1)   90/     278 :                     	dc.l ((enbltp&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   91/     278 :                     	endm
(1)   92/     278 :                     
(1)   93/     278 :                     ; ----------------------------------------------------
(1)   94/     278 :                     ; gemaHead - Track pointers to their respective data
(1)   95/     278 :                     ;
(1)   96/     278 :                     ; blk_data  | Block data pointer
(1)   97/     278 :                     ; patt_data | Pattern data pointer
(1)   98/     278 :                     ; ins_list  | instrument list pointer
(1)   99/     278 :                     ; num_chnls | Number of channels used in the track
(1)  100/     278 :                     ;             If 0: Read ALL channels
(1)  101/     278 :                     ;                   (NOT recommended, UNSTABLE)
(1)  102/     278 :                     ; ----------------------------------------------------
(1)  103/     278 :                     
(1)  104/     278 :                     gemaHead macro blk,pat,ins,num
(1)  105/     278 :                     	dc.w num
(1)  106/     278 :                     	dc.l blk
(1)  107/     278 :                     	dc.l pat
(1)  108/     278 :                     	dc.l ins
(1)  109/     278 :                     	endm
(1)  110/     278 :                     
(1)  111/     278 :                     ; ------------------------------------------------------------
(1)  112/     278 :                     ; Instrument macros, instrument_num-1
(1)  113/     278 :                     ; (ex. Instrument 1 is 0 here)
(1)  114/     278 :                     ;
(1)  115/     278 :                     ; NOTE: UNUSED instruments MUST use gInsNull or
(1)  116/     278 :                     ; the Z80 gets unexpected results and probably crash.
(1)  117/     278 :                     ; ------------------------------------------------------------
(1)  118/     278 :                     
(1)  119/     278 :                     ; ----------------------------------------------------
(1)  120/     278 :                     ; gInsNull - Null instrument
(1)  121/     278 :                     ; ----------------------------------------------------
(1)  122/     278 :                     
(1)  123/     278 :                     gInsNull macro
(1)  124/     278 :                     	dc.b $00,$00,$00,$00
(1)  125/     278 :                     	dc.b $00,$00,$00,$00
(1)  126/     278 :                     	endm
(1)  127/     278 :                     
(1)  128/     278 :                     ; ----------------------------------------------------
(1)  129/     278 :                     ; gInsPsg - PSG tone
(1)  130/     278 :                     ;
(1)  131/     278 :                     ; pitch | Pitch/Octave
(1)  132/     278 :                     ; alv   | Attack level
(1)  133/     278 :                     ; atk   | Attack rate
(1)  134/     278 :                     ; slv   | Sustain
(1)  135/     278 :                     ; dky   | Decay rate (up)
(1)  136/     278 :                     ; rrt   | Release rate (down)
(1)  137/     278 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  138/     278 :                     ; ----------------------------------------------------
(1)  139/     278 :                     
(1)  140/     278 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  141/     278 :                     	dc.b $80,pitch,alv,atk
(1)  142/     278 :                     	dc.b slv,dky,rrt,vib
(1)  143/     278 :                     	endm
(1)  144/     278 :                     
(1)  145/     278 :                     ; ----------------------------------------------------
(1)  146/     278 :                     ; gInsPsg - PSG noise
(1)  147/     278 :                     ;
(1)  148/     278 :                     ; pitch | Pitch/Octave
(1)  149/     278 :                     ;         If using Tone3: set to 47 for a full noise
(1)  150/     278 :                     ; alv   | Attack level
(1)  151/     278 :                     ; atk   | Attack rate
(1)  152/     278 :                     ; slv   | Sustain
(1)  153/     278 :                     ; dky   | Decay rate (up)
(1)  154/     278 :                     ; rrt   | Release rate (down)
(1)  155/     278 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  156/     278 :                     ; mode  | Noise mode: %tmm
(1)  157/     278 :                     ;        t - Bass(0)|Noise(1)
(1)  158/     278 :                     ;        m - Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)  159/     278 :                     ;        Using Tone3 will disable PSG Channel 3.
(1)  160/     278 :                     ;
(1)  161/     278 :                     ; Note:
(1)  162/     278 :                     ; Tone3 WILL silence PSG3 as it steals the
(1)  163/     278 :                     ; frequency from it, chip limitation.
(1)  164/     278 :                     ; ----------------------------------------------------
(1)  165/     278 :                     
(1)  166/     278 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  167/     278 :                     	dc.b $90|mode,pitch,alv,atk
(1)  168/     278 :                     	dc.b slv,dky,rrt,vib
(1)  169/     278 :                     	endm
(1)  170/     278 :                     
(1)  171/     278 :                     ; ----------------------------------------------------
(1)  172/     278 :                     ; gInsFm - FM Normal instrument/patch
(1)  173/     278 :                     ;
(1)  174/     278 :                     ; pitch | Pitch/Octave
(1)  175/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  176/     278 :                     ; ----------------------------------------------------
(1)  177/     278 :                     
(1)  178/     278 :                     gInsFm macro pitch,fmins
(1)  179/     278 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  180/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  181/     278 :                     	endm
(1)  182/     278 :                     
(1)  183/     278 :                     ; ----------------------------------------------------
(1)  184/     278 :                     ; gInsFm - FM3 Special instrument/patch
(1)  185/     278 :                     ;
(1)  186/     278 :                     ; pitch | UNUSED, set to 0
(1)  187/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  188/     278 :                     ; ----------------------------------------------------
(1)  189/     278 :                     
(1)  190/     278 :                     gInsFm3	macro pitch,fmins
(1)  191/     278 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  192/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  193/     278 :                     	endm
(1)  194/     278 :                     
(1)  195/     278 :                     ; ----------------------------------------------------
(1)  196/     278 :                     ; gInsDac - DAC instrument
(1)  197/     278 :                     ;
(1)  198/     278 :                     ; pitch | Pitch/Octave
(1)  199/     278 :                     ; start | 24-bit pointer to DAC sample
(1)  200/     278 :                     ; flags | Flags: %0000000l
(1)  201/     278 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  202/     278 :                     ; ----------------------------------------------------
(1)  203/     278 :                     
(1)  204/     278 :                     gInsDac	macro pitch,start,flags
(1)  205/     278 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  206/     278 :                     	dc.b start&$FF,0,0,0
(1)  207/     278 :                     	endm
(1)  208/     278 :                     
(1)  209/     278 :                     ; ----------------------------------------------------
(1)  210/     278 :                     ; gInsPcm - Sega CD PCM Sample
(1)  211/     278 :                     ;
(1)  212/     278 :                     ; pitch | Pitch/Octave
(1)  213/     278 :                     ; start | 24-bit pointer to DAC sample
(1)  214/     278 :                     ; flags | Flags: %0000000l
(1)  215/     278 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  216/     278 :                     ; ----------------------------------------------------
(1)  217/     278 :                     
(1)  218/     278 :                     gInsPcm	macro pitch,start,flags
(1)  219/     278 :                      if MCD|MARSCD
(1)  220/     278 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  221/     278 :                     	dc.b start&$FF,0,0,0
(1)  222/     278 :                      else
(1)  223/     278 :                     	dc.b $00,$00,$00,$00
(1)  224/     278 :                     	dc.b $00,$00,$00,$00
(1)  225/     278 :                      endif
(1)  226/     278 :                     	endm
(1)  227/     278 :                     
(1)  228/     278 :                     ; ----------------------------------------------------
(1)  229/     278 :                     ; gInsPwm - Sega 32X PWM Sample
(1)  230/     278 :                     ;
(1)  231/     278 :                     ; pitch | Pitch/Octave
(1)  232/     278 :                     ; start | 24-bit pointer to DAC sample
(1)  233/     278 :                     ; flags | Flags: %000000sl
(1)  234/     278 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  235/     278 :                     ;         s - Sample data is in Stereo
(1)  236/     278 :                     ; ----------------------------------------------------
(1)  237/     278 :                     
(1)  238/     278 :                     gInsPwm	macro pitch,start,flags
(1)  239/     278 :                      if MARS|MARSCD
(1)  240/     278 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  241/     278 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  242/     278 :                      else
(1)  243/     278 :                     	dc.b $00,$00,$00,$00
(1)  244/     278 :                     	dc.b $00,$00,$00,$00
(1)  245/     278 :                      endif
(1)  246/     278 :                     	endm
(1)  247/     278 :                     
(1)  248/     278 :                     ; ====================================================================
(1)  249/     278 :                     ; --------------------------------------------------------
(1)  250/     278 :                     ; Variables
(1)  251/     278 :                     ; --------------------------------------------------------
(1)  252/     278 :                     
(1)  253/     278 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)  254/     278 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)  255/     278 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)  256/     278 :                     
(1)  257/     278 :                     ; Z80-area points:
(1)  258/     278 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)  259/     278 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)  260/     278 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)  261/     278 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)  262/     278 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)  263/     278 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)  264/     278 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)  265/     278 :                     
(1)  266/     278 :                     ; ====================================================================
(1)  267/     278 :                     ; --------------------------------------------------------
(1)  268/     278 :                     ; Labels
(1)  269/     278 :                     ; --------------------------------------------------------
(1)  270/     278 :                     
(1)  271/     278 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_SoundBuff	; transferRom flag (ALSO for Z80)
(1)  272/     278 :                     
(1)  273/     278 :                     ; ====================================================================
(1)  274/     278 :                     ; --------------------------------------------------------
(1)  275/     278 :                     ; Initialize Sound
(1)  276/     278 :                     ; --------------------------------------------------------
(1)  277/     278 :                     
(1)  278/     278 :                     gemaInit:
(1)  279/     278 : 007C 0700           		ori.w	#$0700,sr
(1)  281/     27C :                     		; PICO driver init...
(1)  312/     27C :                     
(1)  313/     27C :                     ; ====================================================================
(1)  314/     27C :                     ; ----------------------------------------------------------------
(1)  315/     27C :                     ; gemaReset
(1)  316/     27C :                     ;
(1)  317/     27C :                     ; Reset sound to default sequence list
(1)  318/     27C :                     ; ----------------------------------------------------------------
(1)  319/     27C :                     
(1)  320/     27C :                     gemaReset:
(1)  321/     27C : 41F8 6572           		lea	(MainGemaSeqList),a0
(1)  322/     280 : 617A                		bsr	gemaSetMasterList
(1)  323/     282 : 7E05                		moveq	#6-1,d7				; Make sure it finishes.
(1)  324/     284 : 51CF FFFE           		dbf	d7,*
(1)  325/     288 : 4E75                		rts
(1)  326/     28A :                     
(1)  327/     28A :                     ; ====================================================================
(1)  328/     28A :                     ; ----------------------------------------------------------------
(1)  329/     28A :                     ; gemaUpdate
(1)  330/     28A :                     ;
(1)  331/     28A :                     ; Call this during DISPLAY ONLY and during your VBlank wait
(1)  332/     28A :                     ; (already called by System_Render)
(1)  333/     28A :                     ;
(1)  334/     28A :                     ; RAM-to-Z80 transferRom workaround:
(1)  335/     28A :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  336/     28A :                     ; see it), The 68k CPU manually writes the RAM bytes from
(1)  337/     28A :                     ; here to the Z80's RAM
(1)  338/     28A :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  339/     28A :                     ; (and instruments) in case you use the ASIC-Stamp scaling/
(1)  340/     28A :                     ; rotation.
(1)  341/     28A :                     ;
(1)  342/     28A :                     ; SCD/CD32X:
(1)  343/     28A :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  344/     28A :                     ;   when Stamps are being used, use PCM samples instead.
(1)  345/     28A :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  346/     28A :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set for
(1)  347/     28A :                     ;   reading from there
(1)  348/     28A :                     ;
(1)  349/     28A :                     ; Sega Pico:
(1)  350/     28A :                     ; - TODO The entire Sound Driver will be here, translated from
(1)  351/     28A :                     ;   Z80 to 68k.
(1)  352/     28A :                     ; ----------------------------------------------------------------
(1)  353/     28A :                     
(1)  354/     28A :                     gemaUpdate:
(1)  356/     28A : 4E75                		rts		; entire Sound driver for Pico goes here
(1)  391/     28C : 4E75                		rts
(1)  392/     28E :                     
(1)  393/     28E :                     ; ====================================================================
(1)  394/     28E :                     ; ------------------------------------------------
(1)  395/     28E :                     ; sndLockZ80
(1)  396/     28E :                     ;
(1)  397/     28E :                     ; Locks Z80, unlocks bus.
(1)  398/     28E :                     ; ------------------------------------------------
(1)  399/     28E :                     
(1)  400/     28E :                     sndLockZ80:
(1)  407/     28E : 4E75                		rts
(1)  408/     290 :                     
(1)  409/     290 :                     ; ------------------------------------------------
(1)  410/     290 :                     ; sndUnlockZ80
(1)  411/     290 :                     ;
(1)  412/     290 :                     ; Unlocks Z80, locks bus.
(1)  413/     290 :                     ; ------------------------------------------------
(1)  414/     290 :                     
(1)  415/     290 :                     sndUnlockZ80:
(1)  419/     290 : 4E75                		rts
(1)  420/     292 :                     
(1)  421/     292 :                     ; ------------------------------------------------
(1)  422/     292 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  423/     292 :                     ;
(1)  424/     292 :                     ; d6 - commFifo index
(1)  425/     292 :                     ; ------------------------------------------------
(1)  426/     292 :                     
(1)  427/     292 :                     sndReq_Enter:
(1)  428/     292 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  432/     296 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  433/     29A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  434/     29E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  435/     2A2 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  436/     2A8 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  437/     2AE :                     .wait:
(1)  442/     2AE : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  443/     2B0 : 4886                		ext.w	d6				; extend to 16 bits
(1)  444/     2B2 : 4E75                		rts
(1)  445/     2B4 :                     ; JUMP ONLY
(1)  446/     2B4 :                     sndReq_Exit:
(1)  450/     2B4 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  451/     2B8 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  452/     2BC : DEFC 0008           		adda	#8,sp
(1)  453/     2C0 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  454/     2C4 : 4E75                		rts
(1)  455/     2C6 :                     
(1)  456/     2C6 :                     ; ------------------------------------------------
(1)  457/     2C6 :                     ; Send request id and arguments
(1)  458/     2C6 :                     ;
(1)  459/     2C6 :                     ; Input:
(1)  460/     2C6 :                     ; d7 - byte to write
(1)  461/     2C6 :                     ; d6 - index pointer
(1)  462/     2C6 :                     ; a5 - commZWrite, update index
(1)  463/     2C6 :                     ; a6 - commZfifo command list
(1)  464/     2C6 :                     ;
(1)  465/     2C6 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  466/     2C6 :                     ; ------------------------------------------------
(1)  467/     2C6 :                     
(1)  468/     2C6 :                     sndReq_scmd:
(1)  469/     2C6 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  470/     2CC : 5206                		addq.b	#1,d6				; next fifo pos
(1)  471/     2CE : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  472/     2D2 : 600C                		bra.s	sndReq_sbyte
(1)  473/     2D4 :                     sndReq_slong:
(1)  474/     2D4 : 610A                		bsr	sndReq_sbyte
(1)  475/     2D6 : E09F                		ror.l	#8,d7
(1)  476/     2D8 :                     sndReq_saddr:	; 24-bit address
(1)  477/     2D8 : 6106                		bsr	sndReq_sbyte
(1)  478/     2DA : E09F                		ror.l	#8,d7
(1)  479/     2DC :                     sndReq_sword:
(1)  480/     2DC : 6102                		bsr	sndReq_sbyte
(1)  481/     2DE : E09F                		ror.l	#8,d7
(1)  482/     2E0 :                     sndReq_sbyte:
(1)  483/     2E0 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  484/     2E4 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  485/     2E6 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  486/     2EA : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  487/     2EC : 4E75                		rts
(1)  488/     2EE :                     
(1)  489/     2EE :                     ; --------------------------------------------------------
(1)  490/     2EE :                     ; gemaDmaPause
(1)  491/     2EE :                     ;
(1)  492/     2EE :                     ; Call this BEFORE doing any DMA transfer
(1)  493/     2EE :                     ;
(1)  494/     2EE :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  495/     2EE :                     ; --------------------------------------------------------
(1)  496/     2EE :                     
(1)  497/     2EE :                     gemaDmaPause:
(1)  499/     2EE : 4E75                		rts
(1)  510/     2F0 :                     
(1)  511/     2F0 :                     ; --------------------------------------------------------
(1)  512/     2F0 :                     ; gemaDmaResume
(1)  513/     2F0 :                     ;
(1)  514/     2F0 :                     ; Call this AFTER finishing DMA transfer
(1)  515/     2F0 :                     ;
(1)  516/     2F0 :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  517/     2F0 :                     ; --------------------------------------------------------
(1)  518/     2F0 :                     
(1)  519/     2F0 :                     gemaDmaResume:
(1)  521/     2F0 : 4E75                		rts
(1)  532/     2F2 :                     
(1)  533/     2F2 :                     ; ====================================================================
(1)  534/     2F2 :                     ; --------------------------------------------------------
(1)  535/     2F2 :                     ; Subroutines
(1)  536/     2F2 :                     ;
(1)  537/     2F2 :                     ; USER Sound calls are here
(1)  538/     2F2 :                     ; --------------------------------------------------------
(1)  539/     2F2 :                     
(1)  540/     2F2 :                     ; --------------------------------------------------------
(1)  541/     2F2 :                     ; gemaTest
(1)  542/     2F2 :                     ;
(1)  543/     2F2 :                     ; For TESTING only.
(1)  544/     2F2 :                     ; --------------------------------------------------------
(1)  545/     2F2 :                     
(1)  546/     2F2 :                     gemaTest:
(1)  547/     2F2 : 619E                		bsr	sndReq_Enter
(1)  548/     2F4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  549/     2F8 : 61CC                		bsr	sndReq_scmd
(1)  550/     2FA : 60B8                		bra 	sndReq_Exit
(1)  551/     2FC :                     
(1)  552/     2FC :                     ; --------------------------------------------------------
(1)  553/     2FC :                     ; gemaSetMasterList
(1)  554/     2FC :                     ;
(1)  555/     2FC :                     ; Sets the Master tracklist location, data can be stored
(1)  556/     2FC :                     ; on ROM, RAM* and Word-RAM*
(1)  557/     2FC :                     ;
(1)  558/     2FC :                     ; Input:
(1)  559/     2FC :                     ; a0 | 68k pointer
(1)  560/     2FC :                     ;
(1)  561/     2FC :                     ; Notes:
(1)  562/     2FC :                     ; - STOP ALL TRACKS WITH gemaStopAll BEFORE
(1)  563/     2FC :                     ;   CALLING THIS.
(1)  564/     2FC :                     ;
(1)  565/     2FC :                     ; * RAM data (SCD/CD32X when using Stamps):
(1)  566/     2FC :                     ;   Requires calling Sound_Update manually as a
(1)  567/     2FC :                     ;   workaround for the Z80's limitation of not being
(1)  568/     2FC :                     ;   able to read from RAM
(1)  569/     2FC :                     ;   (BUT it can WRITE into as normal)
(1)  570/     2FC :                     ; * Word-RAM (SCD/CD32X):
(1)  571/     2FC :                     ;   Make sure the Word-RAM permission is set to MAIN-CPU.
(1)  572/     2FC :                     ;
(1)  573/     2FC :                     ; MUST USE THE MACROS TO PROPERLY SETUP THE TRACK LIST:
(1)  574/     2FC :                     ; 	gemaList Tracklist_Pointer
(1)  575/     2FC :                     ; 	gemaTrk 0,2,gtrk_Test
(1)  576/     2FC :                     ; 	; other tracks go here
(1)  577/     2FC :                     ; --------------------------------------------------------
(1)  578/     2FC :                     
(1)  579/     2FC :                     gemaSetMasterList:
(1)  580/     2FC : 6194                		bsr	sndReq_Enter
(1)  581/     2FE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  582/     302 : 61C2                		bsr	sndReq_scmd
(1)  583/     304 : 2E08                		move.l	a0,d7
(1)  584/     306 : 61CC                		bsr	sndReq_slong
(1)  585/     308 : 60AA                		bra 	sndReq_Exit
(1)  586/     30A :                     
(1)  587/     30A :                     ; --------------------------------------------------------
(1)  588/     30A :                     ; gemaPlaySeq
(1)  589/     30A :                     ;
(1)  590/     30A :                     ; Play a sequence with arguments
(1)  591/     30A :                     ;
(1)  592/     30A :                     ; Input:
(1)  593/     30A :                     ; d0.b | Playback slot number
(1)  594/     30A :                     ;        If -1: Auto-search free slot
(1)  595/     30A :                     ; d1.b | Sequence number
(1)  596/     30A :                     ; d2.b | Starting block
(1)  597/     30A :                     ; --------------------------------------------------------
(1)  598/     30A :                     
(1)  599/     30A :                     gemaPlaySeq:
(1)  600/     30A : 6186                		bsr	sndReq_Enter
(1)  601/     30C : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  602/     310 : 61B4                		bsr	sndReq_scmd
(1)  603/     312 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  604/     314 : 61CA                		bsr	sndReq_sbyte
(1)  605/     316 : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  606/     318 : 61C6                		bsr	sndReq_sbyte
(1)  607/     31A : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  608/     31C : 61C2                		bsr	sndReq_sbyte
(1)  609/     31E : 6094                		bra 	sndReq_Exit
(1)  610/     320 :                     
(1)  611/     320 :                     ; --------------------------------------------------------
(1)  612/     320 :                     ; gemaStopSeq
(1)  613/     320 :                     ;
(1)  614/     320 :                     ; Stops tracks with the same sequence number
(1)  615/     320 :                     ;
(1)  616/     320 :                     ; Input:
(1)  617/     320 :                     ; d0.b | Playback slot number
(1)  618/     320 :                     ;        If -1: Stop all slots
(1)  619/     320 :                     ; d1.b | Sequence number to search for
(1)  620/     320 :                     ;        If -1: Stop tracks with any sequence
(1)  621/     320 :                     ; --------------------------------------------------------
(1)  622/     320 :                     
(1)  623/     320 :                     gemaStopSeq:
(1)  624/     320 : 6100 FF70           		bsr	sndReq_Enter
(1)  625/     324 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  626/     328 : 619C                		bsr	sndReq_scmd
(1)  627/     32A : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  628/     32C : 61B2                		bsr	sndReq_sbyte
(1)  629/     32E : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  630/     330 : 61AE                		bsr	sndReq_sbyte
(1)  631/     332 : 6080                		bra 	sndReq_Exit
(1)  632/     334 :                     
(1)  633/     334 :                     ; --------------------------------------------------------
(1)  634/     334 :                     ; gemaStopAll
(1)  635/     334 :                     ;
(1)  636/     334 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  637/     334 :                     ; --------------------------------------------------------
(1)  638/     334 :                     
(1)  639/     334 :                     gemaStopAll:
(1)  640/     334 : 6100 FF5C           		bsr	sndReq_Enter
(1)  641/     338 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  642/     33C : 6188                		bsr	sndReq_scmd
(1)  643/     33E : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  644/     340 : 619E                		bsr	sndReq_sbyte
(1)  645/     342 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  646/     344 : 619A                		bsr	sndReq_sbyte
(1)  647/     346 : 6000 FF6C           		bra 	sndReq_Exit
(1)  648/     34A :                     
(1)  649/     34A :                     ; --------------------------------------------------------
(1)  650/     34A :                     ; gemaFadeSeq
(1)  651/     34A :                     ;
(1)  652/     34A :                     ; Set Master volume to a track slot.
(1)  653/     34A :                     ;
(1)  654/     34A :                     ; Input:
(1)  655/     34A :                     ; d0.b | Playback slot number
(1)  656/     34A :                     ;        If -1: Apply to all slots
(1)  657/     34A :                     ; d1.b | Target volume
(1)  658/     34A :                     ;
(1)  659/     34A :                     ; Notes:
(1)  660/     34A :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  661/     34A :                     ; - In v1.0 this only works during new notes on playback.
(1)  662/     34A :                     ; --------------------------------------------------------
(1)  663/     34A :                     
(1)  664/     34A :                     gemaFadeSeq:
(1)  665/     34A : 6100 FF46           		bsr	sndReq_Enter
(1)  666/     34E : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  667/     352 : 6100 FF72           		bsr	sndReq_scmd
(1)  668/     356 : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  669/     358 : 6186                		bsr	sndReq_sbyte
(1)  670/     35A : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  671/     35C : 6182                		bsr	sndReq_sbyte
(1)  672/     35E : 6000 FF54           		bra 	sndReq_Exit
(1)  673/     362 :                     
(1)  674/     362 :                     ; --------------------------------------------------------
(1)  675/     362 :                     ; gemaSetSeqVol
(1)  676/     362 :                     ;
(1)  677/     362 :                     ; Set Master volume to a Seq slot.
(1)  678/     362 :                     ;
(1)  679/     362 :                     ; Input:
(1)  680/     362 :                     ; d0.b | Playback slot number
(1)  681/     362 :                     ;        If -1: Set to all slots
(1)  682/     362 :                     ; d1.b | Master volume:
(1)  683/     362 :                     ;        $00-max $40-min
(1)  684/     362 :                     ;
(1)  685/     362 :                     ; Notes:
(1)  686/     362 :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  687/     362 :                     ; - In v1.0 this only works on (re)start
(1)  688/     362 :                     ;   or during new notes on playback.
(1)  689/     362 :                     ; --------------------------------------------------------
(1)  690/     362 :                     
(1)  691/     362 :                     gemaSetSeqVol:
(1)  692/     362 : 6100 FF2E           		bsr	sndReq_Enter
(1)  693/     366 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  694/     36A : 6100 FF5A           		bsr	sndReq_scmd
(1)  695/     36E : 1E01                		move.b	d1,d7		; d1.b Volume data <--
(1)  696/     370 : 6100 FF6E           		bsr	sndReq_sbyte
(1)  697/     374 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  698/     376 : 6100 FF68           		bsr	sndReq_sbyte
(1)  699/     37A : 6000 FF38           		bra 	sndReq_Exit
(1)  700/     37E :                     
(1)  701/     37E :                     ; --------------------------------------------------------
(1)  702/     37E :                     ; gemaSetBeats
(1)  703/     37E :                     ;
(1)  704/     37E :                     ; Sets global sub-beats, affects ALL tracks.
(1)  705/     37E :                     ;
(1)  706/     37E :                     ; Input:
(1)  707/     37E :                     ; d0.w | sub-beats
(1)  708/     37E :                     ;
(1)  709/     37E :                     ; Note:
(1)  710/     37E :                     ; This gets auto-converted if Z80 is in PAL-speed
(1)  711/     37E :                     ; mode.
(1)  712/     37E :                     ; --------------------------------------------------------
(1)  713/     37E :                     
(1)  714/     37E :                     ; Ex. sub-beats 215 is tempo 125 on NTSC speed
(1)  715/     37E :                     
(1)  716/     37E :                     gemaSetBeats:
(1)  717/     37E : 6100 FF12           		bsr	sndReq_Enter
(1)  718/     382 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  719/     386 : 6100 FF3E           		bsr	sndReq_scmd
(1)  720/     38A : 3E00                		move.w	d0,d7
(1)  721/     38C : 6100 FF4E           		bsr	sndReq_sword
(1)  722/     390 : 6000 FF22           		bra 	sndReq_Exit
(1)  723/     394 :                     
     194/     394 :                     		include	"system/md/video.asm"
(1)    1/     394 :                     ; ===========================================================================
(1)    2/     394 :                     ; ----------------------------------------------------------------
(1)    3/     394 :                     ; Genesis VDP section
(1)    4/     394 :                     ; ----------------------------------------------------------------
(1)    5/     394 :                     
(1)    6/     394 :                     ; ====================================================================
(1)    7/     394 :                     ; --------------------------------------------------------
(1)    8/     394 :                     ; Settings
(1)    9/     394 :                     ; --------------------------------------------------------
(1)   10/     394 :                     
(1)   11/     394 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/     394 : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/     394 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/     394 :                     
(1)   15/     394 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/     394 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/     394 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/     394 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/     394 : =$6000               DEF_PrintPal		equ $6000
(1)   20/     394 :                     
(1)   21/     394 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/     394 :                     
(1)   23/     394 :                     ; ===================================================================
(1)   24/     394 :                     ; --------------------------------------------------------
(1)   25/     394 :                     ; Variables
(1)   26/     394 :                     ; --------------------------------------------------------
(1)   27/     394 :                     
(1)   28/     394 :                     ; ------------------------------------------------
(1)   29/     394 :                     ; Use these if you are not planning changing
(1)   30/     394 :                     ; the VRAM locations of the scrolling area(s)
(1)   31/     394 :                     ; ------------------------------------------------
(1)   32/     394 : =$C000               DEF_VRAM_FG		equ $C000
(1)   33/     394 : =$E000               DEF_VRAM_BG		equ $E000
(1)   34/     394 : =$D000               DEF_VRAM_WD		equ $D000
(1)   35/     394 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   36/     394 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   37/     394 :                     
(1)   38/     394 :                     ; ------------------------------------------------
(1)   39/     394 :                     ; H sizes for the current layer
(1)   40/     394 :                     ;
(1)   41/     394 :                     ; Note:
(1)   42/     394 :                     ; WINDOW's width changes between H32 and H40
(1)   43/     394 :                     ; resolution modes.
(1)   44/     394 :                     ; ------------------------------------------------
(1)   45/     394 : =$40                 DEF_HSIZE_32		equ $040
(1)   46/     394 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   47/     394 : =$100                DEF_HSIZE_128		equ $100
(1)   48/     394 :                     
(1)   49/     394 :                     ; ------------------------------------------------
(1)   50/     394 :                     ; VDP registers
(1)   51/     394 :                     ; ------------------------------------------------
(1)   52/     394 :                     ; $80
(1)   53/     394 : =$2                  HVStop			equ $02
(1)   54/     394 : =$10                 HintEnbl		equ $10
(1)   55/     394 : =$1                  bitHVStop		equ 1
(1)   56/     394 : =$4                  bitHintEnbl		equ 4
(1)   57/     394 :                     ; $81
(1)   58/     394 : =$40                 DispEnbl 		equ $40
(1)   59/     394 : =$20                 VintEnbl 		equ $20
(1)   60/     394 : =$10                 DmaEnbl			equ $10
(1)   61/     394 : =$6                  bitDispEnbl		equ 6
(1)   62/     394 : =$5                  bitVintEnbl		equ 5
(1)   63/     394 : =$4                  bitDmaEnbl		equ 4
(1)   64/     394 : =$3                  bitV30			equ 3
(1)   65/     394 :                     
(1)   66/     394 :                     ; ------------------------------------------------
(1)   67/     394 :                     ; VDP VRAM bits
(1)   68/     394 :                     ; ------------------------------------------------
(1)   69/     394 :                     ; BYTE read:
(1)   70/     394 : =$7                  bitAttrPrio		equ 7
(1)   71/     394 : =$4                  bitAttrV		equ 4
(1)   72/     394 : =$3                  bitAttrH		equ 3
(1)   73/     394 :                     ; WORD read:
(1)   74/     394 : =$8000               AttrPrio		equ $8000
(1)   75/     394 : =$1000               AttrV			equ $1000
(1)   76/     394 : =$800                AttrH			equ $0800
(1)   77/     394 :                     
(1)   78/     394 :                     ; ------------------------------------------------
(1)   79/     394 :                     ; vdp_ctrl READ bits
(1)   80/     394 :                     ; Read as WORD
(1)   81/     394 :                     ; ------------------------------------------------
(1)   82/     394 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   83/     394 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   84/     394 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   85/     394 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   86/     394 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   87/     394 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   88/     394 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   89/     394 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   90/     394 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   91/     394 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   92/     394 :                     
(1)   93/     394 :                     ; ====================================================================
(1)   94/     394 :                     ; ----------------------------------------------------------------
(1)   95/     394 :                     ; Structs
(1)   96/     394 :                     ; ----------------------------------------------------------------
(1)   97/     394 :                     
(1)   98/     394 :                     ; ------------------------------------------------
(1)   99/     394 :                     ; RAM_PalFadeList
(1)  100/       0 :                     palfd			struct
(1)  101/       0 :                     req			ds.b 1
(1)  102/       1 :                     delay			ds.b 1
(1)  103/       2 :                     start			ds.b 1
(1)  104/       3 :                     incr			ds.b 1
(1)  105/       4 :                     target			ds.b 1
(1)  106/       5 :                     timer			ds.b 1
(1)  107/       6 :                     num			ds.w 1
(1)  108/       8 :                     ; len		ds.l 0
(1)  109/     394 : =$8                  			endstruct
(1)  110/     394 :                     
(1)  111/     394 :                     ; ------------------------------------------------
(1)  112/     394 :                     ; RAM_MdMcd_Stamps
(1)  113/     394 :                     
(1)  114/       0 :                     mdstmp		struct
(1)  115/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  116/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  117/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  118/       6 :                     vramSize	ds.w 1
(1)  119/       8 :                     vramLen		ds.w 1		; temporals
(1)  120/       A :                     vramIncr	ds.w 1		; ''
(1)  121/       C :                     stmpoutb	ds.w 1
(1)  122/       E :                     currOutFlip	ds.w 1
(1)  123/      10 :                     fdrop		ds.w 1
(1)  124/      12 :                     cellstorage	ds.l 1
(1)  125/      16 :                     dotIncr		ds.l 1
(1)  126/      1A :                     buffIncr	ds.l 1
(1)  127/      1E :                     ; len		ds.l 0
(1)  128/     394 : =$1E                 		endstruct
(1)  129/     394 :                     
(1)  130/     394 :                     ; ====================================================================
(1)  131/     394 :                     ; ----------------------------------------------------------------
(1)  132/     394 :                     ; RAM section
(1)  133/     394 :                     ; ----------------------------------------------------------------
(1)  134/     394 :                     
(1)  135/     394 : (MACRO)              			memory RAM_MdVideo
(1)  135/     394 : =$394                GLBL_LASTPC     := *
(1)  135/     394 :                                     dephase
(1)  135/FFFFFFFFFFFFC800 :                                     phase RAM_MDVIDEO
(1)  135/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)  136/FFFFFFFFFFFFC800 :                     	; Some 32X labels are in system/shared.asm
(1)  137/FFFFFFFFFFFFC800 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  138/FFFFFFFFFFFFC840 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  139/FFFFFFFFFFFFC9C0 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  140/FFFFFFFFFFFFCC40 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  141/FFFFFFFFFFFFD000 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  142/FFFFFFFFFFFFD050 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  143/FFFFFFFFFFFFD550 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  144/FFFFFFFFFFFFD5D0 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  145/FFFFFFFFFFFFD650 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  146/FFFFFFFFFFFFD650 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  147/FFFFFFFFFFFFD652 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  148/FFFFFFFFFFFFD654 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  149/FFFFFFFFFFFFD658 :                     
(1)  150/FFFFFFFFFFFFD658 :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  151/FFFFFFFFFFFFD658 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  152/FFFFFFFFFFFFD7D8 :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  153/FFFFFFFFFFFFD7DC :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  154/FFFFFFFFFFFFD7DE :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  155/FFFFFFFFFFFFD7E0 :                     RAM_SetPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  156/FFFFFFFFFFFFD7E2 :                     RAM_SetPrntVramW	ds.w 1				; '' but for wider text
(1)  157/FFFFFFFFFFFFD7E4 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  158/FFFFFFFFFFFFD7E6 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  159/FFFFFFFFFFFFD7E8 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  160/FFFFFFFFFFFFD7EA :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  161/FFFFFFFFFFFFD7EC :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  162/FFFFFFFFFFFFD7EE :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  163/FFFFFFFFFFFFD7F0 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  164/FFFFFFFFFFFFD7F2 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  165/FFFFFFFFFFFFD7F4 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  166/FFFFFFFFFFFFD7F6 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  167/FFFFFFFFFFFFD7F8 :                     sizeof_mdvid		ds.l 0
(1)  168/FFFFFFFFFFFFD7FC : (MACRO)              			endmemory
(1)  168/    1390 :                     .here:          dephase
(1)  168/    1390 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  168/     394 :                                     phase GLBL_LASTPC
(1)  169/     394 :                     
(1)  170/     394 :                     ; ====================================================================
(1)  171/     394 :                     ; ----------------------------------------------------------------
(1)  172/     394 :                     ; Initialize Genesis video
(1)  173/     394 :                     ;
(1)  174/     394 :                     ; Uses:
(1)  175/     394 :                     ; d5-d7/a5-a6
(1)  176/     394 :                     ; ----------------------------------------------------------------
(1)  177/     394 :                     
(1)  178/     394 :                     Video_Init:
(1)  179/     394 : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  180/     398 : 7C00                		moveq	#0,d6
(1)  181/     39A : 3E3C 0FF7           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  182/     39E :                     .clr_ram:
(1)  183/     39E : 1CC6                		move.b	d6,(a6)+
(1)  184/     3A0 : 51CF FFFC           		dbf	d7,.clr_ram
(1)  185/     3A4 : 4DF8 D658           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  186/     3A8 : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  187/     3AC : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  188/     3B0 :                     .copy_dma:
(1)  189/     3B0 : 2CD5                		move.l	(a5),(a6)+
(1)  190/     3B2 : 2CED 0004           		move.l	4(a5),(a6)+
(1)  191/     3B6 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  192/     3BA : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  193/     3BE : 51CF FFF0           		dbf	d7,.copy_dma
(1)  194/     3C2 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  195/     3C6 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  196/     3CA :                     .clr_d:
(1)  197/     3CA : 429E                		clr.l	(a6)+
(1)  198/     3CC : 429E                		clr.l	(a6)+
(1)  199/     3CE : 429E                		clr.l	(a6)+
(1)  200/     3D0 : 429E                		clr.l	(a6)+
(1)  201/     3D2 : 51CF FFF6           		dbf	d7,.clr_d
(1)  202/     3D6 :                     
(1)  203/     3D6 : 4278 D7DC           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  204/     3DA : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1)  205/     3DE : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  206/     3E2 :                     .clr_preq:
(1)  207/     3E2 : 429E                		clr.l	(a6)+
(1)  208/     3E4 : 429E                		clr.l	(a6)+
(1)  209/     3E6 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  219/     3EA : 4CBA 000F 002A      		movem.w	.def_regset(pc),d0-d3
(1)  220/     3F0 : 48B8 000F D7F0      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  221/     3F6 : 23F8 D7F0 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
              3FC : 0004             
(1)  222/     3FE : 23F8 D7F4 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
              404 : 0004             
(1)  223/     406 : 6018                		bra	Video_Default
(1)  224/     408 :                     
(1)  225/     408 :                     ; --------------------------------------------------------
(1)  226/     408 :                     ; DMA blast base entry
(1)  227/     408 :                     .dma_entry:
(1)  228/     408 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  229/     40C : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  230/     412 : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  231/     416 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  232/     418 :                     		align 2
(1)  233/     418 :                     .def_regset:
(1)  234/     418 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
              41E : 8C00             
(1)  235/     420 :                     		align 2
(1)  236/     420 :                     
(1)  237/     420 :                     ; --------------------------------------------------------
(1)  238/     420 :                     ; Video_Default
(1)  239/     420 :                     ; --------------------------------------------------------
(1)  240/     420 :                     
(1)  241/     420 :                     Video_Default:
(1)  251/     420 : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
              426 : 00C0 0004          
(1)  252/     42A : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
              430 : 0004             
(1)  253/     432 : 31FC C000 D7E4      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  254/     438 : 31FC E000 D7E6      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  255/     43E : 31FC D000 D7E8      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  256/     444 : 31FC F800 D7EA      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  257/     44A : 31FC FC00 D7EC      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  258/     450 : 31FC 1000 D7EE      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  259/     456 : 6100 043C           		bsr	Video_UpdMapVram
(1)  260/     45A : 6100 048A           		bsr	Video_UpdSprHVram
(1)  261/     45E : 7001                		moveq	#1,d0					; Size H64 V32
(1)  262/     460 : 7200                		moveq	#0,d1
(1)  263/     462 : 6100 04BC           		bsr	Video_SetMapSize
(1)  264/     466 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  265/     468 : 7200                		moveq	#0,d1
(1)  266/     46A : 6000 03D4           		bra	Video_Resolution
(1)  267/     46E :                     
(1)  268/     46E :                     ; ====================================================================
(1)  269/     46E :                     ; --------------------------------------------------------
(1)  270/     46E :                     ; Video_Render
(1)  271/     46E :                     ;
(1)  272/     46E :                     ; Call this during VBlank to update the VDP visuals
(1)  273/     46E :                     ; and process the DMA BLAST list, also resets a
(1)  274/     46E :                     ; few variables.
(1)  275/     46E :                     ; (This is already called on System_Render)
(1)  276/     46E :                     ;
(1)  277/     46E :                     ; Uses:
(1)  278/     46E :                     ; ALL
(1)  279/     46E :                     ; --------------------------------------------------------
(1)  280/     46E :                     
(1)  281/     46E :                     Video_Render:
(1)  282/     46E : 6100 035A           		bsr	Video_DmaOn
(1)  283/     472 : 6100 1074           		bsr	System_DmaEnter_RAM
(1)  284/     476 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  285/     47C : 3E38 D7EA           		move.w	(RAM_VdpVramSpr).w,d7
(1)  286/     480 : 3A38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  287/     484 : 3C07                		move.w	d7,d6
(1)  288/     486 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  289/     48A : 0047 4000           		ori.w	#$4000,d7
(1)  290/     48E : E55E                		rol.w	#2,d6
(1)  291/     490 : 0246 0003           		andi.w	#%11,d6
(1)  292/     494 : 8C7C 0080           		or.w	#$80,d6
(1)  293/     498 : 3805                		move.w	d5,d4
(1)  294/     49A : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  295/     49E : 0045 4000           		ori.w	#$4000,d5
(1)  296/     4A2 : E55C                		rol.w	#2,d4
(1)  297/     4A4 : 0244 0003           		andi.w	#%11,d4
(1)  298/     4A8 : 887C 0080           		or.w	#$80,d4
(1)  299/     4AC : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  300/     4B2 : 2CBC 96E8 9528      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  301/     4B8 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  302/     4BC : 3C87                		move.w	d7,(a6)
(1)  303/     4BE : 3F06                		move.w	d6,-(sp)
(1)  304/     4C0 : 3C9F                		move.w	(sp)+,(a6)
(1)  305/     4C2 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  306/     4C8 : 2CBC 96E6 9520      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  307/     4CE : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  308/     4D2 : 3C85                		move.w	d5,(a6)
(1)  309/     4D4 : 3F04                		move.w	d4,-(sp)
(1)  310/     4D6 : 3C9F                		move.w	(sp)+,(a6)
(1)  311/     4D8 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  312/     4DE : 2CBC 96E8 9500      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  313/     4E4 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  314/     4E8 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  315/     4EC : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  316/     4F0 : 3C9F                		move.w	(sp)+,(a6)
(1)  317/     4F2 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  318/     4F8 : 2CBC 96EA 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  319/     4FE : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  320/     502 : 3CBC C000           		move.w	#$C000,(a6)
(1)  321/     506 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  322/     50A : 3C9F                		move.w	(sp)+,(a6)
(1)  323/     50C : 6100 0FDE           		bsr	System_DmaExit_RAM
(1)  324/     510 : 6100 02C4           		bsr	Video_DmaOff
(1)  325/     514 :                     
(1)  326/     514 :                     ; --------------------------------------------------------
(1)  327/     514 :                     ; Struct:
(1)  328/     514 :                     ; dc.w $94xx,$93xx		; Size
(1)  329/     514 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  330/     514 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  331/     514 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  332/     514 : 4A78 D652           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  333/     518 : 6642                		bne.s	.exit
(1)  334/     51A : 4A78 D650           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  335/     51E : 673C                		beq.s	.exit
(1)  336/     520 : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  337/     526 : 47F8 D658           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  338/     52A : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  339/     52E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  340/     532 : 3887                		move.w	d7,(a4)
(1)  341/     534 : 6100 0F78           		bsr	System_DmaEnter_ROM
(1)  342/     538 : 4A78 D650           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  343/     53C : 6714                		beq.s	.end
(1)  344/     53E : 289B                		move.l	(a3)+,(a4)			; Size
(1)  345/     540 : 289B                		move.l	(a3)+,(a4)			; Source
(1)  346/     542 : 389B                		move.w	(a3)+,(a4)
(1)  347/     544 :                     	; CD/CD32X
(1)  360/     544 : 389B                		move.w	(a3)+,(a4)			; Normal VDP control write
(1)  361/     546 : 389B                		move.w	(a3)+,(a4)			; *** CPU freezes ***
(1)  362/     548 : D6FC 0002           		adda	#2,a3
(1)  364/     54C : 5378 D650           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  365/     550 : 60E6                		bra.s	.next
(1)  366/     552 :                     .end:
(1)  367/     552 : 6100 0F5E           		bsr	System_DmaExit_ROM
(1)  368/     556 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  369/     55A : 3887                		move.w	d7,(a4)
(1)  370/     55C :                     .exit:
(1)  371/     55C : 4E75                		rts
(1)  372/     55E :                     
(1)  373/     55E :                     ; ====================================================================
(1)  374/     55E :                     ; --------------------------------------------------------
(1)  375/     55E :                     ; Video_BuildSprites
(1)  376/     55E :                     ;
(1)  377/     55E :                     ; Build VDP Sprite pieces and maps
(1)  378/     55E :                     ; --------------------------------------------------------
(1)  379/     55E :                     
(1)  380/     55E :                     Video_BuildSprites:
(1)  381/     55E : 31FC 0001 D7DE      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  382/     564 : 4DF8 D050           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  383/     568 : 3C38 D7DE           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  384/     56C : BC7C 0050           		cmp.w	#80,d6
(1)  385/     570 : 6C00 0174           		bge	.stop_all
(1)  386/     574 : 3A06                		move.w	d6,d5
(1)  387/     576 : 5345                		subq.w	#1,d5
(1)  388/     578 : 6B04                		bmi	.first_spr
(1)  389/     57A : E74D                		lsl.w	#3,d5
(1)  390/     57C : DCC5                		adda	d5,a6
(1)  391/     57E :                     .first_spr:
(1)  392/     57E : 4BF8 C9C0           		lea	(RAM_SprPzList).w,a5
(1)  393/     582 : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  394/     586 :                     .next_pz:
(1)  395/     586 : 0C46 0050           		cmpi.w	#80,d6
(1)  396/     58A : 6E00 015A           		bgt	.stop_all
(1)  397/     58E : 0815 0007           		btst	#7,(a5)
(1)  398/     592 : 6722                		beq	.no_slot_s
(1)  399/     594 : 3015                		move.w	(a5),d0				; This slot is used?
(1)  400/     596 : 3200                		move.w	d0,d1
(1)  401/     598 : 0241 3C00           		andi.w	#$3C00,d1
(1)  402/     59C : E449                		lsr.w	#2,d1
(1)  403/     59E : D246                		add.w	d6,d1
(1)  404/     5A0 : 342D 0004           		move.w	4(a5),d2
(1)  405/     5A4 : 362D 0002           		move.w	2(a5),d3
(1)  406/     5A8 : 0240 03FF           		andi.w	#$03FF,d0
(1)  407/     5AC : 3CC0                		move.w	d0,(a6)+
(1)  408/     5AE : 3CC1                		move.w	d1,(a6)+
(1)  409/     5B0 : 3CC2                		move.w	d2,(a6)+
(1)  410/     5B2 : 3CC3                		move.w	d3,(a6)+
(1)  411/     5B4 : 5246                		addq.w	#1,d6
(1)  412/     5B6 :                     .no_slot_s:
(1)  413/     5B6 : DAFC 0008           		adda	#$08,a5
(1)  414/     5BA : 51CF FFCA           		dbf	d7,.next_pz
(1)  415/     5BE : 4BF8 C840           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  416/     5C2 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  417/     5C6 :                     .next:
(1)  418/     5C6 : 0815 0007           		btst	#7,(a5)
(1)  419/     5CA : 6700 0110           		beq	.no_map
(1)  420/     5CE : 2055                		move.l	(a5),a0
(1)  421/     5D0 : 4847                		swap	d7
(1)  422/     5D2 : 7000                		moveq	#0,d0
(1)  423/     5D4 : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  424/     5D8 : D040                		add.w	d0,d0
(1)  425/     5DA : 3030 0000           		move.w	(a0,d0.w),d0
(1)  426/     5DE : 41F0 0000           		lea	(a0,d0.w),a0
(1)  427/     5E2 : 3A18                		move.w	(a0)+,d5
(1)  428/     5E4 : 6700 00F6           		beq	.no_map
(1)  429/     5E8 : 5345                		subq.w	#1,d5
(1)  430/     5EA :                     .mk_pz:
(1)  431/     5EA : 0C46 0050           		cmpi.w	#80,d6
(1)  432/     5EE : 6E00 00F6           		bgt	.stop_all
(1)  433/     5F2 : 4845                		swap	d5
(1)  434/     5F4 : 4846                		swap	d6
(1)  435/     5F6 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  436/     5F8 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  437/     5FA : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  438/     5FC : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  439/     602 : 6710                		beq.s	.ex_vram
(1)  440/     604 : 3801                		move.w	d1,d4
(1)  441/     606 : 0241 000C           		andi.w	#%1100,d1
(1)  442/     60A : 0244 0003           		andi.w	#%0011,d4
(1)  443/     60E : E24C                		lsr.w	#1,d4
(1)  444/     610 : 8244                		or.w	d4,d1
(1)  445/     612 : E24A                		lsr.w	#1,d2
(1)  446/     614 :                     .ex_vram:
(1)  447/     614 : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  448/     618 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  449/     61A : 4880                		ext.w	d0
(1)  450/     61C : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  451/     620 : 3805                		move.w	d5,d4
(1)  452/     622 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  453/     628 : 670E                		beq.s	.ex_vrams
(1)  454/     62A : 3805                		move.w	d5,d4
(1)  455/     62C : 0244 F800           		andi.w	#$F800,d4
(1)  456/     630 : 0245 07FF           		andi.w	#$07FF,d5
(1)  457/     634 : E24D                		lsr.w	#1,d5
(1)  458/     636 : 8A44                		or.w	d4,d5
(1)  459/     638 :                     .ex_vrams:
(1)  460/     638 : 3805                		move.w	d5,d4
(1)  461/     63A : 0244 1000           		andi.w	#$1000,d4
(1)  462/     63E : 6710                		beq.s	.vram_v
(1)  463/     640 : 4440                		neg.w	d0
(1)  464/     642 : 0440 0008           		subi.w	#8,d0
(1)  465/     646 : 3C01                		move.w	d1,d6
(1)  466/     648 : 0246 0003           		andi.w	#%0011,d6
(1)  467/     64C : E74E                		lsl.w	#3,d6
(1)  468/     64E : 9046                		sub.w	d6,d0
(1)  469/     650 :                     .vram_v:
(1)  470/     650 : 3805                		move.w	d5,d4
(1)  471/     652 : 0244 0800           		andi.w	#$0800,d4
(1)  472/     656 : 6710                		beq.s	.vram_h
(1)  473/     658 : 4443                		neg.w	d3
(1)  474/     65A : 0443 0008           		subi.w	#8,d3
(1)  475/     65E : 3C01                		move.w	d1,d6
(1)  476/     660 : 0246 000C           		andi.w	#%1100,d6
(1)  477/     664 : DC46                		add.w	d6,d6
(1)  478/     666 : 9646                		sub.w	d6,d3
(1)  479/     668 :                     .vram_h:
(1)  480/     668 : D445                		add.w	d5,d2
(1)  481/     66A : 4845                		swap	d5
(1)  482/     66C : 4846                		swap	d6
(1)  483/     66E : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  484/     672 : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  485/     676 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  486/     67A : 6C5C                		bge.s	.no_pz
(1)  487/     67C : 3801                		move.w	d1,d4
(1)  488/     67E : 0244 000C           		andi.w	#%1100,d4
(1)  489/     682 : D844                		add.w	d4,d4
(1)  490/     684 : D87C 0008           		add.w	#8,d4
(1)  491/     688 : 3E03                		move.w	d3,d7
(1)  492/     68A : DE44                		add.w	d4,d7
(1)  493/     68C : 6B4A                		bmi.s	.no_pz
(1)  494/     68E : 383C 00F0           		move.w	#240,d4
(1)  495/     692 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  496/     698 : 6702                		beq.s	.ex_yext
(1)  497/     69A : D844                		add.w	d4,d4
(1)  498/     69C :                     .ex_yext:
(1)  499/     69C : B044                		cmp.w	d4,d0
(1)  500/     69E : 6C38                		bge.s	.no_pz
(1)  501/     6A0 : 3801                		move.w	d1,d4
(1)  502/     6A2 : 0244 0003           		andi.w	#%0011,d4
(1)  503/     6A6 : E74C                		lsl.w	#3,d4
(1)  504/     6A8 : D87C 0008           		add.w	#8,d4
(1)  505/     6AC : 3E00                		move.w	d0,d7
(1)  506/     6AE : DE44                		add.w	d4,d7
(1)  507/     6B0 : 6B26                		bmi.s	.no_pz
(1)  508/     6B2 : E149                		lsl.w	#8,d1			; Size + Link
(1)  509/     6B4 : 8246                		or.w	d6,d1
(1)  510/     6B6 : 0640 0080           		addi.w	#$80,d0
(1)  511/     6BA : 3838 D7F6           		move.w	(RAM_VdpRegSetC).w,d4
(1)  512/     6BE : 0804 0002           		btst	#2,d4
(1)  513/     6C2 : 6704                		beq.s	.dont_add
(1)  514/     6C4 : 0640 0080           		addi.w	#$80,d0
(1)  515/     6C8 :                     .dont_add:
(1)  516/     6C8 : 0643 0080           		addi.w	#$80,d3
(1)  517/     6CC : 3CC0                		move.w	d0,(a6)+
(1)  518/     6CE : 3CC1                		move.w	d1,(a6)+
(1)  519/     6D0 : 3CC2                		move.w	d2,(a6)+
(1)  520/     6D2 : 3CC3                		move.w	d3,(a6)+
(1)  521/     6D4 : DC7C 0001           		add.w	#1,d6
(1)  522/     6D8 :                     .no_pz:
(1)  523/     6D8 : 51CD FF10           		dbf	d5,.mk_pz
(1)  524/     6DC :                     .no_map:
(1)  525/     6DC : DAFC 0010           		adda	#$10,a5
(1)  526/     6E0 : 4847                		swap	d7
(1)  527/     6E2 :                     .no_slot:
(1)  528/     6E2 : 51CF FEE2           		dbf	d7,.next
(1)  529/     6E6 :                     .stop_all:
(1)  530/     6E6 : 614A                		bsr	vid_CheckLastSpr
(1)  531/     6E8 : 31C6 D7DE           		move.w	d6,(RAM_SprLinkNum).w
(1)  532/     6EC :                     
(1)  533/     6EC :                     ; --------------------------------------------------------
(1)  534/     6EC :                     ; Reset slots
(1)  535/     6EC :                     ; --------------------------------------------------------
(1)  536/     6EC :                     
(1)  537/     6EC :                     .freeze:
(1)  538/     6EC : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1)  539/     6F0 : 7E4F                		moveq	#80-1,d7
(1)  540/     6F2 : 7C08                		moveq	#$08,d6
(1)  541/     6F4 :                     .chk_spr_r:
(1)  542/     6F4 : 1A16                		move.b	(a6),d5
(1)  543/     6F6 : 0805 0007           		btst	#7,d5
(1)  544/     6FA : 670C                		beq.s	.no_slot_r
(1)  545/     6FC : 0805 0006           		btst	#6,d5
(1)  546/     700 : 6706                		beq.s	.no_slot_r
(1)  547/     702 : 4296                		clr.l	(a6)
(1)  548/     704 : 42AE 0004           		clr.l	4(a6)
(1)  549/     708 :                     .no_slot_r:
(1)  550/     708 : DCC6                		adda	d6,a6
(1)  551/     70A : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  552/     70E : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  553/     712 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  554/     714 : 7C10                		moveq	#$10,d6
(1)  555/     716 :                     .chk_spr_mr:
(1)  556/     716 : 1A16                		move.b	(a6),d5
(1)  557/     718 : 0805 0007           		btst	#7,d5
(1)  558/     71C : 670C                		beq.s	.no_slot_mr
(1)  559/     71E : 0805 0006           		btst	#6,d5
(1)  560/     722 : 6706                		beq.s	.no_slot_mr
(1)  561/     724 : 4296                		clr.l	(a6)
(1)  562/     726 : 42AE 0004           		clr.l	4(a6)
(1)  563/     72A :                     .no_slot_mr:
(1)  564/     72A : DCC6                		adda	d6,a6
(1)  565/     72C : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  566/     730 : 4E75                		rts
(1)  567/     732 :                     
(1)  568/     732 :                     ; --------------------------------------------------------
(1)  569/     732 :                     ; d6 - Current link
(1)  570/     732 :                     
(1)  571/     732 :                     vid_CheckLastSpr:
(1)  572/     732 : 4DF8 D050           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  573/     736 : 0C46 0001           		cmpi.w	#1,d6
(1)  574/     73A : 6710                		beq.s	.blnk_first
(1)  575/     73C : 0C46 0050           		cmpi.w	#80,d6
(1)  576/     740 : 6E10                		bgt.s	.last_one
(1)  577/     742 : 3E06                		move.w	d6,d7
(1)  578/     744 : 0447 0001           		subi.w	#1,d7
(1)  579/     748 : E74F                		lsl.w	#3,d7
(1)  580/     74A : DCC7                		adda	d7,a6
(1)  581/     74C :                     .blnk_first:
(1)  582/     74C : 429E                		clr.l	(a6)+
(1)  583/     74E : 429E                		clr.l	(a6)+
(1)  584/     750 : 6010                		bra.s	.spr_exit
(1)  585/     752 :                     .last_one:
(1)  586/     752 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  587/     756 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  588/     75A : 0247 0F00           		andi.w	#$0F00,d7
(1)  589/     75E : 3D47 0002           		move.w	d7,2(a6)
(1)  590/     762 :                     .spr_exit:
(1)  591/     762 : 4E75                		rts
(1)  592/     764 :                     
(1)  593/     764 :                     ; ====================================================================
(1)  594/     764 :                     ; --------------------------------------------------------
(1)  595/     764 :                     ; Subroutines
(1)  596/     764 :                     ; --------------------------------------------------------
(1)  597/     764 :                     
(1)  598/     764 :                     ; --------------------------------------------------------
(1)  599/     764 :                     ; Video_Clear
(1)  600/     764 :                     ;
(1)  601/     764 :                     ; Clears VDP VRAM and other RAM sections
(1)  602/     764 :                     ;
(1)  603/     764 :                     ; Breaks:
(1)  604/     764 :                     ; ALL
(1)  605/     764 :                     ; --------------------------------------------------------
(1)  606/     764 :                     
(1)  607/     764 :                     Video_Clear:
(1)  616/     764 : 7C00                		moveq	#0,d6
(1)  617/     766 : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  618/     76A : 3E3C 0E53           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  619/     76E :                     .clr_me:
(1)  620/     76E : 1CC6                		move.b	d6,(a6)+
(1)  621/     770 : 51CF FFFC           		dbf	d7,.clr_me
(1)  622/     774 : 303C 0000           		move.w	#0,d0
(1)  623/     778 : 323C 0000           		move.w	#0,d1
(1)  624/     77C : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  625/     780 : 6100 02D6           		bsr	Video_Fill
(1)  626/     784 :                     
(1)  627/     784 :                     ; --------------------------------------------------------
(1)  628/     784 :                     ; Video_ClearScreen
(1)  629/     784 :                     ;
(1)  630/     784 :                     ; Clears ALL 3 map layers.
(1)  631/     784 :                     ; --------------------------------------------------------
(1)  632/     784 :                     
(1)  633/     784 :                     Video_ClearScreen:
(1)  634/     784 : 7000                		moveq	#0,d0
(1)  635/     786 : 3238 D7E4           		move.w	(RAM_VdpVramFG).w,d1
(1)  636/     78A : 3438 D7EE           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  637/     78E : 6100 02C8           		bsr	Video_Fill
(1)  638/     792 : 3238 D7E6           		move.w	(RAM_VdpVramBG).w,d1
(1)  639/     796 : 6100 02C0           		bsr	Video_Fill
(1)  640/     79A : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  641/     79E : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  642/     7A2 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  643/     7A6 : 6702                		beq.s	.not_small
(1)  644/     7A8 : D442                		add.w	d2,d2			; Size $1000
(1)  645/     7AA :                     .not_small:
(1)  646/     7AA : 3238 D7E8           		move.w	(RAM_VdpVramWD).w,d1
(1)  647/     7AE : 6000 02A8           		bra	Video_Fill
(1)  648/     7B2 :                     
(1)  649/     7B2 :                     ; --------------------------------------------------------
(1)  650/     7B2 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  651/     7B2 :                     ;
(1)  652/     7B2 :                     ; Enable/Disable VDP Display
(1)  653/     7B2 :                     ; --------------------------------------------------------
(1)  654/     7B2 :                     
(1)  655/     7B2 :                     Video_DisplayOn:
(1)  656/     7B2 : 3F07                		move.w	d7,-(sp)
(1)  657/     7B4 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  658/     7B8 : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  659/     7BC : 6022                		bra.s	vid_WrtReg01
(1)  660/     7BE :                     Video_DisplayOff:
(1)  661/     7BE : 3F07                		move.w	d7,-(sp)
(1)  662/     7C0 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  663/     7C4 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  664/     7C8 : 6016                		bra.s	vid_WrtReg01
(1)  665/     7CA :                     
(1)  666/     7CA :                     ; --------------------------------------------------------
(1)  667/     7CA :                     ; Video_DmaOn, Video_DmaOff
(1)  668/     7CA :                     ;
(1)  669/     7CA :                     ; Enable/Disable DMA
(1)  670/     7CA :                     ; --------------------------------------------------------
(1)  671/     7CA :                     
(1)  672/     7CA :                     Video_DmaOn:
(1)  673/     7CA : 3F07                		move.w	d7,-(sp)
(1)  674/     7CC : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  675/     7D0 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  676/     7D4 : 600A                		bra.s	vid_WrtReg01
(1)  677/     7D6 :                     Video_DmaOff:
(1)  678/     7D6 : 3F07                		move.w	d7,-(sp)
(1)  679/     7D8 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  680/     7DC : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  681/     7E0 :                     
(1)  682/     7E0 :                     ; ------------------------------------------------
(1)  683/     7E0 :                     
(1)  684/     7E0 :                     vid_WrtReg01:
(1)  685/     7E0 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  686/     7E6 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  687/     7EA : 3E1F                		move.w	(sp)+,d7
(1)  688/     7EC : 4E75                		rts
(1)  689/     7EE :                     
(1)  690/     7EE :                     ; --------------------------------------------------------
(1)  691/     7EE :                     ; Video_IntEnable
(1)  692/     7EE :                     ;
(1)  693/     7EE :                     ; Enable or Disable VBlank, HBlank and External
(1)  694/     7EE :                     ; interrupts
(1)  695/     7EE :                     ;
(1)  696/     7EE :                     ; Input:
(1)  697/     7EE :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  698/     7EE :                     ;      | %00000EHV
(1)  699/     7EE :                     ;      | E - External
(1)  700/     7EE :                     ;      | H - HBlank
(1)  701/     7EE :                     ;      | V - VBlank
(1)  702/     7EE :                     ;
(1)  703/     7EE :                     ; Notes:
(1)  704/     7EE :                     ; Set your interrupt locations with System_SetIntJumps
(1)  705/     7EE :                     ; --------------------------------------------------------
(1)  706/     7EE :                     
(1)  707/     7EE :                     Video_IntEnable:
(1)  708/     7EE : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  709/     7F2 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  710/     7F6 : 3C00                		move.w	d0,d6
(1)  711/     7F8 : 0246 0001           		andi.w	#1,d6			; %--V
(1)  712/     7FC : EB4E                		lsl.w	#5,d6
(1)  713/     7FE : 8E46                		or.w	d6,d7
(1)  714/     800 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  715/     804 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  716/     80A : 3E38 D7F0           		move.w	(RAM_VdpRegSet0).w,d7
(1)  717/     80E : 3C00                		move.w	d0,d6
(1)  718/     810 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  719/     814 : E74E                		lsl.w	#3,d6
(1)  720/     816 : 8E46                		or.w	d6,d7
(1)  721/     818 : 31C7 D7F0           		move.w	d7,(RAM_VdpRegSet0).w
(1)  722/     81C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  723/     822 : 3E38 D7F4           		move.w	(RAM_VdpRegSetB).w,d7
(1)  724/     826 : 3C00                		move.w	d0,d6			; %E--
(1)  725/     828 : 0246 0004           		andi.w	#%100,d6
(1)  726/     82C : DC46                		add.w	d6,d6
(1)  727/     82E : 8E46                		or.w	d6,d7
(1)  728/     830 : 31C7 D7F4           		move.w	d7,(RAM_VdpRegSetB).w
(1)  729/     834 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  730/     83A : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  731/     83E : 4E75                		rts
(1)  732/     840 :                     
(1)  733/     840 :                     ; --------------------------------------------------------
(1)  734/     840 :                     ; Video_Resolution
(1)  735/     840 :                     ;
(1)  736/     840 :                     ; Set video resolution
(1)  737/     840 :                     ;
(1)  738/     840 :                     ; Input:
(1)  739/     840 :                     ; d0.w | $00 - Horizontal 256
(1)  740/     840 :                     ;      | $01 - Horizontal 320
(1)  741/     840 :                     ;
(1)  742/     840 :                     ; d1.w | $00 - Vertical 224
(1)  743/     840 :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  744/     840 :                     ;      | $02 - Double resolution mode
(1)  745/     840 :                     ;      | $03 - INVALID
(1)  746/     840 :                     ; --------------------------------------------------------
(1)  747/     840 :                     
(1)  748/     840 :                     Video_Resolution:
(1)  749/     840 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  750/     844 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  751/     848 : 0207 00F7           		andi.b	#%11110111,d7
(1)  752/     84C : 3C01                		move.w	d1,d6
(1)  753/     84E : CC7C 0001           		and.w	#1,d6
(1)  754/     852 : E74E                		lsl.w	#3,d6
(1)  755/     854 : 8E46                		or.w	d6,d7
(1)  756/     856 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  757/     85C : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  758/     860 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1)  759/     864 : 0207 0078           		andi.b	#%01111000,d7
(1)  760/     868 : 3C00                		move.w	d0,d6
(1)  761/     86A : CC7C 0001           		and.w	#$01,d6
(1)  762/     86E : 6704                		beq.s	.ex_bit
(1)  763/     870 : 8C7C 0081           		or.w	#$81,d6
(1)  764/     874 :                     .ex_bit:
(1)  765/     874 : 8E46                		or.w	d6,d7
(1)  766/     876 : 3C01                		move.w	d1,d6
(1)  767/     878 : CC7C 0002           		and.w	#%010,d6
(1)  768/     87C : 6704                		beq.s	.double
(1)  769/     87E : 8C7C 0004           		or.w	#%100,d6
(1)  770/     882 :                     .double:
(1)  771/     882 : 8E46                		or.w	d6,d7
(1)  772/     884 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  773/     88A : 31C7 D7F6           		move.w	d7,(RAM_VdpRegSetC).w
(1)  774/     88E : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  775/     892 : 4E75                		rts
(1)  776/     894 :                     
(1)  777/     894 :                     ; --------------------------------------------------------
(1)  778/     894 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  779/     894 :                     ;
(1)  780/     894 :                     ; Update VRAM locations for FG, BG, Window and
(1)  781/     894 :                     ; the Horizontal scroll
(1)  782/     894 :                     ; --------------------------------------------------------
(1)  783/     894 :                     
(1)  784/     894 :                     Video_UpdMapVram:
(1)  785/     894 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  786/     898 : 3E3C 8200           		move.w	#$8200,d7
(1)  787/     89C : 3C38 D7E4           		move.w	(RAM_VdpVramFG).w,d6
(1)  788/     8A0 : E04E                		lsr.w	#8,d6
(1)  789/     8A2 : E44E                		lsr.w	#2,d6
(1)  790/     8A4 : 0246 0038           		andi.w	#%00111000,d6
(1)  791/     8A8 : 8E46                		or.w	d6,d7
(1)  792/     8AA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  793/     8B0 : 3E3C 8300           		move.w	#$8300,d7
(1)  794/     8B4 : 3C38 D7E8           		move.w	(RAM_VdpVramWD).w,d6
(1)  795/     8B8 : E04E                		lsr.w	#8,d6
(1)  796/     8BA : E44E                		lsr.w	#2,d6
(1)  797/     8BC : 0246 003E           		andi.w	#%00111110,d6
(1)  798/     8C0 : 8E46                		or.w	d6,d7
(1)  799/     8C2 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  800/     8C8 : 3E3C 8400           		move.w	#$8400,d7
(1)  801/     8CC : 3C38 D7E6           		move.w	(RAM_VdpVramBG).w,d6
(1)  802/     8D0 : E04E                		lsr.w	#8,d6
(1)  803/     8D2 : EA4E                		lsr.w	#5,d6
(1)  804/     8D4 : 0246 0007           		andi.w	#%00000111,d6
(1)  805/     8D8 : 8E46                		or.w	d6,d7
(1)  806/     8DA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  807/     8E0 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  808/     8E4 : 4E75                		rts
(1)  809/     8E6 :                     
(1)  810/     8E6 :                     Video_UpdSprHVram:
(1)  811/     8E6 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  812/     8EA : 3E3C 8500           		move.w	#$8500,d7
(1)  813/     8EE : 3C38 D7EA           		move.w	(RAM_VdpVramSpr).w,d6
(1)  814/     8F2 : E04E                		lsr.w	#8,d6
(1)  815/     8F4 : E24E                		lsr.w	#1,d6
(1)  816/     8F6 : 0246 007F           		andi.w	#%01111111,d6
(1)  817/     8FA : 8E46                		or.w	d6,d7
(1)  818/     8FC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  819/     902 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  820/     906 : 3C38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  821/     90A : E04E                		lsr.w	#8,d6
(1)  822/     90C : E44E                		lsr.w	#2,d6
(1)  823/     90E : 0246 003F           		andi.w	#%00111111,d6
(1)  824/     912 : 8E46                		or.w	d6,d7
(1)  825/     914 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  826/     91A : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  827/     91E : 4E75                		rts
(1)  828/     920 :                     
(1)  829/     920 :                     ; --------------------------------------------------------
(1)  830/     920 :                     ; Video_SetMapSize
(1)  831/     920 :                     ;
(1)  832/     920 :                     ; Set MAP size(s) to FG and BG
(1)  833/     920 :                     ;
(1)  834/     920 :                     ; Input:
(1)  835/     920 :                     ; d0.w | Width: %00 - H32
(1)  836/     920 :                     ;      |        %01 - H40
(1)  837/     920 :                     ;      |        %11 - H128
(1)  838/     920 :                     ;
(1)  839/     920 :                     ; d1.w | Height: %00 - V32
(1)  840/     920 :                     ;      |         %01 - V40
(1)  841/     920 :                     ;      |         %11 - V128
(1)  842/     920 :                     ;
(1)  843/     920 :                     ; Notes:
(1)  844/     920 :                     ; Maximum size for a single layer size
(1)  845/     920 :                     ; is $1000
(1)  846/     920 :                     ; --------------------------------------------------------
(1)  847/     920 :                     
(1)  848/     920 :                     Video_SetMapSize:
(1)  849/     920 : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  850/     924 : 3E3C 9000           		move.w	#$9000,d7
(1)  851/     928 : 3C00                		move.w	d0,d6
(1)  852/     92A : 3A01                		move.w	d1,d5
(1)  853/     92C : 0246 0003           		andi.w	#%11,d6
(1)  854/     930 : 0245 0003           		andi.w	#%11,d5
(1)  855/     934 : E94D                		lsl.w	#4,d5
(1)  856/     936 : 8C45                		or.w	d5,d6
(1)  857/     938 : 8E46                		or.w	d6,d7
(1)  858/     93A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  859/     940 : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  860/     944 : 4E75                		rts
(1)  861/     946 :                     
(1)  862/     946 :                     ; --------------------------------------------------------
(1)  863/     946 :                     ; Video_LoadArt
(1)  864/     946 :                     ;
(1)  865/     946 :                     ; Loads VDP graphics using DMA
(1)  866/     946 :                     ;
(1)  867/     946 :                     ; Input:
(1)  868/     946 :                     ; d0.l | Graphics data (NOT a0)
(1)  869/     946 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  870/     946 :                     ; d2.w | Size:          cell_vram(size)
(1)  871/     946 :                     ;
(1)  872/     946 :                     ; Notes:
(1)  873/     946 :                     ; - For a faster load: call this during VBlank or
(1)  874/     946 :                     ;   disable VDP Display temporally.
(1)  875/     946 :                     ;
(1)  876/     946 :                     ; * 32X Cartridge ONLY:
(1)  877/     946 :                     ; - This sets RV bit, make sure your code is
(1)  878/     946 :                     ;   running on RAM (already doing here) and the
(1)  879/     946 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  880/     946 :                     ; --------------------------------------------------------
(1)  881/     946 :                     
(1)  882/     946 :                     Video_LoadArt:
(1)  883/     946 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  884/     94A : 2E00                		move.l	d0,d7
(1)  885/     94C : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  886/     952 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  887/     958 : 6736                		beq.s	.normal
(1)  888/     95A : 2A00                		move.l	d0,d5
(1)  889/     95C : DA42                		add.w	d2,d5
(1)  890/     95E : 6430                		bcc.s	.normal
(1)  891/     960 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  892/     962 : 3C01                		move.w	d1,d6
(1)  893/     964 : 2E05                		move.l	d5,d7		; Top
(1)  894/     966 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  895/     96C : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  896/     972 : 9E80                		sub.l	d0,d7
(1)  897/     974 : 6128                		bsr.s	.mk_set
(1)  898/     976 : 2A00                		move.l	d0,d5		; Bottom
(1)  899/     978 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  900/     97E : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  901/     984 : 2C05                		move.l	d5,d6
(1)  902/     986 : 9C80                		sub.l	d0,d6
(1)  903/     988 : 3E02                		move.w	d2,d7
(1)  904/     98A : 9E46                		sub.w	d6,d7
(1)  905/     98C : DC41                		add.w	d1,d6
(1)  906/     98E : 6006                		bra.s	.last_set
(1)  907/     990 :                     .normal:
(1)  908/     990 : 2A00                		move.l	d0,d5
(1)  909/     992 : 3C01                		move.w	d1,d6
(1)  910/     994 : 3E02                		move.w	d2,d7
(1)  911/     996 :                     .last_set:
(1)  912/     996 : 6106                		bsr.s	.mk_set
(1)  913/     998 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  914/     99C : 4E75                		rts
(1)  915/     99E :                     
(1)  916/     99E :                     ; d7 - size
(1)  917/     99E :                     ; d6 - vram
(1)  918/     99E :                     ; d5 - data
(1)  919/     99E :                     .mk_set:
(1)  920/     99E : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  921/     9A4 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  922/     9AA : 6734                		beq.s	.bad_size
(1)  923/     9AC : 4846                		swap	d6
(1)  924/     9AE : 4845                		swap	d5
(1)  925/     9B0 : 3C05                		move.w	d5,d6
(1)  926/     9B2 : 4845                		swap	d5
(1)  935/     9B4 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  936/     9BA : 2F07                		move.l	d7,-(sp)		; <--
(1)  937/     9BC : 6100 FE0C           		bsr	Video_DmaOn
(1)  938/     9C0 : 2E1F                		move.l	(sp)+,d7
(1)  939/     9C2 : 0246 00FF           		andi.w	#$FF,d6
(1)  940/     9C6 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  941/     9CA : 6716                		beq.s	.ram_write
(1)  942/     9CC : 4846                		swap	d6
(1)  943/     9CE : 6126                		bsr.s	.shared_setup
(1)  944/     9D0 : 6100 0ADC           		bsr	System_DmaEnter_ROM
(1)  945/     9D4 : 3C86                		move.w	d6,(a6)			; First write
(1)  946/     9D6 : 3C87                		move.w	d7,(a6)			; Second write
(1)  947/     9D8 : 6100 0AD8           		bsr	System_DmaExit_ROM
(1)  948/     9DC : 6100 FDF8           		bsr	Video_DmaOff
(1)  949/     9E0 :                     	; Word-RAM patch
(1)  970/     9E0 :                     .bad_size:
(1)  971/     9E0 : 4E75                		rts
(1)  972/     9E2 :                     
(1)  973/     9E2 :                     ; --------------------------------------------------------
(1)  974/     9E2 :                     
(1)  975/     9E2 :                     .ram_write:
(1)  976/     9E2 : 4846                		swap	d6
(1)  977/     9E4 : 6110                		bsr.s	.shared_setup
(1)  978/     9E6 : 6100 0B00           		bsr	System_DmaEnter_RAM
(1)  979/     9EA : 3C86                		move.w	d6,(a6)			; First write
(1)  980/     9EC : 3C87                		move.w	d7,(a6)			; Second write
(1)  981/     9EE : 6100 0AFC           		bsr	System_DmaExit_RAM
(1)  982/     9F2 : 6000 FDE2           		bra	Video_DmaOff
(1)  983/     9F6 :                     
(1)  984/     9F6 :                     ; --------------------------------------------------------
(1)  985/     9F6 :                     
(1)  986/     9F6 :                     .shared_setup:
(1)  987/     9F6 : EF8F                		lsl.l	#7,d7
(1)  988/     9F8 : E04F                		lsr.w	#8,d7
(1)  989/     9FA : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  990/     A00 : 2C87                		move.l	d7,(a6)
(1)  991/     A02 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  992/     A04 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  993/     A0A : 1E05                 		move.b	d5,d7
(1)  994/     A0C : E08D                 		lsr.l	#8,d5
(1)  995/     A0E : 4847                 		swap	d7
(1)  996/     A10 : 1E05                 		move.b	d5,d7
(1)  997/     A12 : 2C87                 		move.l	d7,(a6)
(1)  998/     A14 : 3E3C 9700            		move.w	#$9700,d7
(1)  999/     A18 : E08D                 		lsr.l	#8,d5
(1) 1000/     A1A : 1E05                 		move.b	d5,d7
(1) 1001/     A1C : 3C87                 		move.w	d7,(a6)
(1) 1002/     A1E : 3E06                		move.w	d6,d7			; Destination
(1) 1003/     A20 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1004/     A26 : 0046 4000           		ori.w	#$4000,d6
(1) 1005/     A2A : E04F                		lsr.w	#8,d7
(1) 1006/     A2C : EC4F                		lsr.w	#6,d7
(1) 1007/     A2E : 0247 0003           		andi.w	#%11,d7
(1) 1008/     A32 : 0047 0080           		ori.w	#$80,d7
(1) 1009/     A36 : 4E75                		rts
(1) 1010/     A38 :                     
(1) 1011/     A38 :                     ; --------------------------------------------------------
(1) 1012/     A38 :                     ; Video_LoadArt_List
(1) 1013/     A38 :                     ;
(1) 1014/     A38 :                     ; Loads VDP graphics on bulk
(1) 1015/     A38 :                     ;
(1) 1016/     A38 :                     ; Input:
(1) 1017/     A38 :                     ; a0 | List of graphics to load:
(1) 1018/     A38 :                     ;        dc.w numof_entries
(1) 1019/     A38 :                     ;        dc.l ART_DATA
(1) 1020/     A38 :                     ;        dc.w cell_vram(vram_pos)
(1) 1021/     A38 :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1022/     A38 :                     ;        ; ...more entries
(1) 1023/     A38 :                     ;
(1) 1024/     A38 :                     ; Note:
(1) 1025/     A38 :                     ; CPU heavy.
(1) 1026/     A38 :                     ; --------------------------------------------------------
(1) 1027/     A38 :                     
(1) 1028/     A38 :                     Video_LoadArt_List:
(1) 1029/     A38 : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1030/     A3C : 3E18                		move.w	(a0)+,d7
(1) 1031/     A3E : 6712                		beq.s	.invalid
(1) 1032/     A40 : 6B10                		bmi.s	.invalid
(1) 1033/     A42 : 5347                		subq.w	#1,d7
(1) 1034/     A44 :                     .next_one:
(1) 1035/     A44 : 2018                		move.l	(a0)+,d0
(1) 1036/     A46 : 3218                		move.w	(a0)+,d1
(1) 1037/     A48 : 3418                		move.w	(a0)+,d2
(1) 1038/     A4A : 6100 FEFA           		bsr	Video_LoadArt
(1) 1039/     A4E : 51CF FFF4           		dbf	d7,.next_one
(1) 1040/     A52 :                     .invalid:
(1) 1041/     A52 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1042/     A56 : 4E75                		rts
(1) 1043/     A58 :                     
(1) 1044/     A58 :                     ; --------------------------------------------------------
(1) 1045/     A58 :                     ; Video_Fill
(1) 1046/     A58 :                     ;
(1) 1047/     A58 :                     ; Fill data to VRAM
(1) 1048/     A58 :                     ;
(1) 1049/     A58 :                     ; Input:
(1) 1050/     A58 :                     ; d0.b | BYTE to fill
(1) 1051/     A58 :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1052/     A58 :                     ; d2.w | Size:             cell_vram(size)
(1) 1053/     A58 :                     ;
(1) 1054/     A58 :                     ; Notes:
(1) 1055/     A58 :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1056/     A58 :                     ;   invalid.
(1) 1057/     A58 :                     ; --------------------------------------------------------
(1) 1058/     A58 :                     
(1) 1059/     A58 :                     ; Video_Fill_Incr:
(1) 1060/     A58 :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1061/     A58 :                     ; 		move.w	d3,d6
(1) 1062/     A58 :                     ; 		bra.s	vid_FillGo
(1) 1063/     A58 :                     Video_Fill:
(1) 1064/     A58 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1065/     A5C : 3C3C 0001           		move.w	#1,d6
(1) 1066/     A60 :                     vid_FillGo:
(1) 1067/     A60 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1068/     A66 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1069/     A68 : 0807 0001           		btst	#bitDma,d7
(1) 1070/     A6C : 66F8                		bne.s	.dmaw
(1) 1071/     A6E : 6100 FD5A           		bsr	Video_DmaOn
(1) 1072/     A72 : 0246 00FF           		andi.w	#$FF,d6
(1) 1073/     A76 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1074/     A7A : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1075/     A7C : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1076/     A7E : 0447 0001           		subi.w	#1,d7
(1) 1077/     A82 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1078/     A88 : 1C07                		move.b	d7,d6
(1) 1079/     A8A : 4846                		swap	d6
(1) 1080/     A8C : E04F                		lsr.w	#8,d7
(1) 1081/     A8E : 1C07                		move.b	d7,d6
(1) 1082/     A90 : 4846                		swap	d6
(1) 1083/     A92 : 2C86                		move.l	d6,(a6)
(1) 1084/     A94 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1085/     A98 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1086/     A9A : 3C01                		move.w	d1,d6
(1) 1087/     A9C : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1088/     AA0 : 0046 4000           		ori.w	#$4000,d6
(1) 1089/     AA4 : 4846                		swap	d6
(1) 1090/     AA6 : 3C07                		move.w	d7,d6
(1) 1091/     AA8 : E04E                		lsr.w	#8,d6
(1) 1092/     AAA : EC4E                		lsr.w	#6,d6
(1) 1093/     AAC : 0246 0003           		andi.w	#%11,d6
(1) 1094/     AB0 : 0046 0080           		ori.w	#$80,d6
(1) 1095/     AB4 : 2C86                		move.l	d6,(a6)
(1) 1096/     AB6 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1097/     ABA : 3E16                .dma_w:		move.w	(a6),d7
(1) 1098/     ABC : 0807 0001           		btst	#bitDma,d7
(1) 1099/     AC0 : 66F8                		bne.s	.dma_w
(1) 1100/     AC2 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1101/     AC6 : 6100 FD0E           		bsr	Video_DmaOff
(1) 1102/     ACA : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1103/     ACE : 4E75                		rts
(1) 1104/     AD0 :                     
(1) 1105/     AD0 :                     ; --------------------------------------------------------
(1) 1106/     AD0 :                     ; Video_Copy
(1) 1107/     AD0 :                     ;
(1) 1108/     AD0 :                     ; Copy VRAM data to another location inside VRAM
(1) 1109/     AD0 :                     ;
(1) 1110/     AD0 :                     ; Input:
(1) 1111/     AD0 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1112/     AD0 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1113/     AD0 :                     ; d2.w | Size
(1) 1114/     AD0 :                     ; --------------------------------------------------------
(1) 1115/     AD0 :                     
(1) 1116/     AD0 :                     Video_Copy:
(1) 1117/     AD0 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1118/     AD4 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1119/     ADA : 3E16                .dmaw:		move.w	(a6),d7
(1) 1120/     ADC : 0807 0001           		btst	#bitDma,d7
(1) 1121/     AE0 : 66F8                		bne.s	.dmaw
(1) 1122/     AE2 : 6100 FCE6           		bsr	Video_DmaOn
(1) 1123/     AE6 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1124/     AEA : 3E02                		move.w	d2,d7			; SIZE
(1) 1125/     AEC : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1126/     AF2 : 1C07                		move.b	d7,d6
(1) 1127/     AF4 : 4846                		swap	d6
(1) 1128/     AF6 : E04F                		lsr.w	#8,d7
(1) 1129/     AF8 : 1C07                		move.b	d7,d6
(1) 1130/     AFA : 4846                		swap	d6
(1) 1131/     AFC : 2C86                		move.l	d6,(a6)
(1) 1132/     AFE : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1133/     B04 : 3E00                		move.w	d0,d7
(1) 1134/     B06 : 1C07                		move.b	d7,d6
(1) 1135/     B08 : 4846                		swap	d6
(1) 1136/     B0A : E04F                		lsr.w	#8,d7
(1) 1137/     B0C : 1C07                		move.b	d7,d6
(1) 1138/     B0E : 2C86                		move.l	d6,(a6)
(1) 1139/     B10 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1140/     B14 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1141/     B16 : 3C07                		move.w	d7,d6
(1) 1142/     B18 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1143/     B1C : 0046 4000           		ori.w	#$4000,d6
(1) 1144/     B20 : 4846                		swap	d6
(1) 1145/     B22 : 3C07                		move.w	d7,d6
(1) 1146/     B24 : E04E                		lsr.w	#8,d6
(1) 1147/     B26 : EC4E                		lsr.w	#6,d6
(1) 1148/     B28 : 0246 0003           		andi.w	#%11,d6
(1) 1149/     B2C : 0046 00C0           		ori.w	#$C0,d6
(1) 1150/     B30 : 2C86                		move.l	d6,(a6)
(1) 1151/     B32 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1152/     B36 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1153/     B38 : 0807 0001           		btst	#bitDma,d7
(1) 1154/     B3C : 66F8                		bne.s	.dma_w
(1) 1155/     B3E : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1156/     B42 : 6100 FC92           		bsr	Video_DmaOff
(1) 1157/     B46 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1158/     B4A : 4E75                		rts
(1) 1159/     B4C :                     
(1) 1160/     B4C :                     ; --------------------------------------------------------
(1) 1161/     B4C :                     ; Video_MakeDmaEntry
(1) 1162/     B4C :                     ;
(1) 1163/     B4C :                     ; Makes a new entry to the DMA BLAST list
(1) 1164/     B4C :                     ; to be processed on the next VBlank
(1) 1165/     B4C :                     ;
(1) 1166/     B4C :                     ; Input:
(1) 1167/     B4C :                     ; d0.l | Graphics data location
(1) 1168/     B4C :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1169/     B4C :                     ; d2.w | Size
(1) 1170/     B4C :                     ;
(1) 1171/     B4C :                     ; Notes:
(1) 1172/     B4C :                     ; - Call this during DISPLAY only
(1) 1173/     B4C :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1174/     B4C :                     ;
(1) 1175/     B4C :                     ; * SCD/CD32X ONLY:
(1) 1176/     B4C :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1177/     B4C :                     ;   if not reading from WORD-RAM
(1) 1178/     B4C :                     ; --------------------------------------------------------
(1) 1179/     B4C :                     
(1) 1180/     B4C :                     Video_MakeDmaEntry:
(1) 1181/     B4C : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1182/     B50 : 2E00                		move.l	d0,d7
(1) 1183/     B52 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1184/     B58 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1185/     B5E : 6736                		beq.s	.normal
(1) 1186/     B60 : 2A00                		move.l	d0,d5
(1) 1187/     B62 : DA42                		add.w	d2,d5
(1) 1188/     B64 : 6430                		bcc.s	.normal
(1) 1189/     B66 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1190/     B68 : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1191/     B6A : 2E05                		move.l	d5,d7
(1) 1192/     B6C : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1193/     B72 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1194/     B78 : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1195/     B7A : 6128                		bsr.s	.mk_set
(1) 1196/     B7C : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1197/     B7E : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1198/     B84 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1199/     B8A : 2C05                		move.l	d5,d6
(1) 1200/     B8C : 9C80                		sub.l	d0,d6
(1) 1201/     B8E : 3E02                		move.w	d2,d7
(1) 1202/     B90 : 9E46                		sub.w	d6,d7
(1) 1203/     B92 : DC41                		add.w	d1,d6
(1) 1204/     B94 : 6006                		bra.s	.last_set
(1) 1205/     B96 :                     .normal:
(1) 1206/     B96 : 2A00                		move.l	d0,d5
(1) 1207/     B98 : 3C01                		move.w	d1,d6
(1) 1208/     B9A : 3E02                		move.w	d2,d7
(1) 1209/     B9C :                     .last_set:
(1) 1210/     B9C : 6106                		bsr.s	.mk_set
(1) 1211/     B9E : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1212/     BA2 : 4E75                		rts
(1) 1213/     BA4 :                     
(1) 1214/     BA4 :                     ; d7 - size
(1) 1215/     BA4 :                     ; d6 - vram
(1) 1216/     BA4 :                     ; d5 - data
(1) 1217/     BA4 :                     .mk_set:
(1) 1218/     BA4 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1219/     BAA : 4847                		swap	d7
(1) 1220/     BAC : 3E38 D650           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1221/     BB0 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1222/     BB4 : 6C5A                		bge	.ran_out
(1) 1223/     BB6 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1224/     BB8 : 4DF8 D658           		lea	(RAM_VdpDmaList).w,a6
(1) 1225/     BBC : DCC7                		adda	d7,a6
(1) 1226/     BBE : 4847                		swap	d7
(1) 1227/     BC0 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1228/     BC6 : 6748                		beq.s	.ran_out		; If == 0, bad
(1) 1229/     BC8 : 4A47                		tst.w	d7
(1) 1230/     BCA : 6B44                		bmi.s	.ran_out		; If negative, bad
(1) 1231/     BCC : 31FC 0001 D652      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1232/     BD2 : 5278 D650           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1233/     BD6 : E24F                		lsr.w	#1,d7
(1) 1234/     BD8 : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1244/     BDC : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1245/     BDE : 2E05                  		move.l	d5,d7
(1) 1246/     BE0 : 4847                  		swap	d7
(1) 1247/     BE2 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1248/     BE6 : 1D47 0009            		move.b	d7,9(a6)
(1) 1249/     BEA : 3E06                		move.w	d6,d7			; Destination
(1) 1250/     BEC : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1251/     BF2 : 0046 4000           		ori.w	#$4000,d6
(1) 1252/     BF6 : E04F                		lsr.w	#8,d7
(1) 1253/     BF8 : EC4F                		lsr.w	#6,d7
(1) 1254/     BFA : 0247 0003           		andi.w	#%11,d7
(1) 1255/     BFE : 0047 0080           		ori.w	#$80,d7
(1) 1256/     C02 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1257/     C06 : 3D47 000C           		move.w	d7,$C(a6)
(1) 1265/     C0A : 31FC 0000 D652      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1266/     C10 :                     .ran_out:
(1) 1267/     C10 : 4E75                		rts
(1) 1268/     C12 :                     
(1) 1269/     C12 :                     ; ====================================================================
(1) 1270/     C12 :                     ; --------------------------------------------------------
(1) 1271/     C12 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1272/     C12 :                     ;
(1) 1273/     C12 :                     ; Write map data to VDP
(1) 1274/     C12 :                     ;
(1) 1275/     C12 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1276/     C12 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1277/     C12 :                     ;
(1) 1278/     C12 :                     ; Input:
(1) 1279/     C12 :                     ; a0   | Map data
(1) 1280/     C12 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1281/     C12 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1282/     C12 :                     ; d2.l | Screen Width/VRAM location:
(1) 1283/     C12 :                     ;        splitw(sw_size,vram_loc)
(1) 1284/     C12 :                     ; d3.w | VRAM-cell increment
(1) 1285/     C12 :                     ;
(1) 1286/     C12 :                     ; Notes:
(1) 1287/     C12 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1288/     C12 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1289/     C12 :                     ; * SCD/CD32X ONLY:
(1) 1290/     C12 :                     ; - For making the dot-screen map see
(1) 1291/     C12 :                     ;   Video_MdMcd_StampDotMap
(1) 1292/     C12 :                     ; --------------------------------------------------------
(1) 1293/     C12 :                     
(1) 1294/     C12 :                     Video_LoadMap:
(1) 1295/     C12 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1296/     C16 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1297/     C1C :                     
(1) 1298/     C1C : 2C02                		move.l	d2,d6
(1) 1299/     C1E : 4846                		swap	d6
(1) 1300/     C20 : 3A00                		move.w	d0,d5
(1) 1301/     C22 : CAC6                		mulu.w	d6,d5
(1) 1302/     C24 : 2800                		move.l	d0,d4
(1) 1303/     C26 : 4844                		swap	d4
(1) 1304/     C28 : D844                		add.w	d4,d4
(1) 1305/     C2A : DA44                		add.w	d4,d5
(1) 1306/     C2C : 3E02                		move.w	d2,d7
(1) 1307/     C2E : DE45                		add.w	d5,d7
(1) 1308/     C30 : 7A00                		moveq	#0,d5
(1) 1309/     C32 : 3A07                		move.w	d7,d5
(1) 1310/     C34 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1311/     C38 : 8E7C 4000           		or.w	#$4000,d7
(1) 1312/     C3C : E55D                		rol.w	#2,d5
(1) 1313/     C3E : 0245 0003           		andi.w	#%11,d5
(1) 1314/     C42 : 4845                		swap	d5
(1) 1315/     C44 : 2A48                		move.l	a0,a5
(1) 1316/     C46 : 3801                		move.w	d1,d4
(1) 1317/     C48 : 5344                		subq.w	#1,d4
(1) 1318/     C4A : 6B36                		bmi.s	.bad_size
(1) 1319/     C4C :                     .y_loop:
(1) 1320/     C4C : 2844                		move.l	d4,a4
(1) 1321/     C4E : 4845                		swap	d5
(1) 1322/     C50 : 3D47 0004           		move.w	d7,4(a6)
(1) 1323/     C54 : 3D45 0004           		move.w	d5,4(a6)
(1) 1324/     C58 : 4845                		swap	d5
(1) 1325/     C5A : 2801                		move.l	d1,d4
(1) 1326/     C5C : 4844                		swap	d4
(1) 1327/     C5E : 5344                		subq.w	#1,d4
(1) 1328/     C60 :                     .x_loop:
(1) 1329/     C60 : 4844                		swap	d4
(1) 1330/     C62 : 381D                		move.w	(a5)+,d4
(1) 1331/     C64 : B87C FFFF           		cmp.w	#-1,d4
(1) 1332/     C68 : 6606                		bne.s	.non_blank
(1) 1333/     C6A : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1334/     C6E : 6002                		bra.s	.mk_cell
(1) 1335/     C70 :                     .non_blank:
(1) 1336/     C70 : D843                		add.w	d3,d4
(1) 1337/     C72 :                     .mk_cell:
(1) 1338/     C72 : 3C84                		move.w	d4,(a6)
(1) 1339/     C74 : 4844                		swap	d4
(1) 1340/     C76 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1341/     C7A : DE46                		add.w	d6,d7
(1) 1342/     C7C : 280C                		move.l	a4,d4
(1) 1343/     C7E : 51CC FFCC           		dbf	d4,.y_loop
(1) 1344/     C82 :                     .bad_size:
(1) 1345/     C82 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1346/     C86 : 4E75                		rts
(1) 1347/     C88 :                     ; ------------------------------------------------
(1) 1348/     C88 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1349/     C88 :                     ; d2.l | Screen Width/VRAM location:
(1) 1350/     C88 :                     ; d3.w | VRAM-cell increment
(1) 1351/     C88 :                     
(1) 1352/     C88 :                     Video_LoadMapV:
(1) 1353/     C88 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1354/     C8C : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1355/     C92 : 2C02                		move.l	d2,d6
(1) 1356/     C94 : 4846                		swap	d6
(1) 1357/     C96 : 3A00                		move.w	d0,d5
(1) 1358/     C98 : CAC6                		mulu.w	d6,d5
(1) 1359/     C9A : 2800                		move.l	d0,d4
(1) 1360/     C9C : 4844                		swap	d4
(1) 1361/     C9E : D844                		add.w	d4,d4
(1) 1362/     CA0 : DA44                		add.w	d4,d5
(1) 1363/     CA2 : 3E02                		move.w	d2,d7
(1) 1364/     CA4 : DE45                		add.w	d5,d7
(1) 1365/     CA6 : 7A00                		moveq	#0,d5
(1) 1366/     CA8 : 3A07                		move.w	d7,d5
(1) 1367/     CAA : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1368/     CAE : 8E7C 4000           		or.w	#$4000,d7
(1) 1369/     CB2 : E55D                		rol.w	#2,d5
(1) 1370/     CB4 : 0245 0003           		andi.w	#%11,d5
(1) 1371/     CB8 : 4845                		swap	d5
(1) 1372/     CBA : 2A48                		move.l	a0,a5
(1) 1373/     CBC : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1374/     CC2 : 664C                		bne.s	.dble_mode
(1) 1375/     CC4 : 2801                		move.l	d1,d4
(1) 1376/     CC6 : 4844                		swap	d4
(1) 1377/     CC8 : 5344                		subq.w	#1,d4
(1) 1378/     CCA : 6B3E                		bmi.s	.bad_size
(1) 1379/     CCC :                     .x_loop:
(1) 1380/     CCC : 2844                		move.l	d4,a4
(1) 1381/     CCE : 3801                		move.w	d1,d4
(1) 1382/     CD0 : 5344                		subq.w	#1,d4
(1) 1383/     CD2 :                     .y_loop:
(1) 1384/     CD2 : 4844                		swap	d4
(1) 1385/     CD4 : 3807                		move.w	d7,d4
(1) 1386/     CD6 : D845                		add.w	d5,d4
(1) 1387/     CD8 : 4845                		swap	d5
(1) 1388/     CDA : 3D44 0004           		move.w	d4,4(a6)
(1) 1389/     CDE : 3D45 0004           		move.w	d5,4(a6)
(1) 1390/     CE2 : 4845                		swap	d5
(1) 1391/     CE4 : 381D                		move.w	(a5)+,d4
(1) 1392/     CE6 : B87C FFFF           		cmp.w	#-1,d4
(1) 1393/     CEA : 6606                		bne.s	.non_blank
(1) 1394/     CEC : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1395/     CF0 : 6002                		bra.s	.mk_cell
(1) 1396/     CF2 :                     .non_blank:
(1) 1397/     CF2 : D843                		add.w	d3,d4
(1) 1398/     CF4 :                     .mk_cell:
(1) 1399/     CF4 : 3C84                		move.w	d4,(a6)
(1) 1400/     CF6 : DA46                		add.w	d6,d5
(1) 1401/     CF8 : 4844                		swap	d4
(1) 1402/     CFA : 51CC FFD6           		dbf	d4,.y_loop
(1) 1403/     CFE : DE7C 0002           		add.w	#2,d7
(1) 1404/     D02 : 4245                		clr.w	d5
(1) 1405/     D04 : 280C                		move.l	a4,d4
(1) 1406/     D06 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1407/     D0A :                     .bad_size:
(1) 1408/     D0A : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1409/     D0E : 4E75                		rts
(1) 1410/     D10 :                     
(1) 1411/     D10 :                     ; ------------------------------------------------
(1) 1412/     D10 :                     
(1) 1413/     D10 :                     .dble_mode:
(1) 1414/     D10 : 2F01                		move.l	d1,-(sp)
(1) 1415/     D12 :                     
(1) 1416/     D12 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1417/     D14 : 3803                		move.w	d3,d4
(1) 1418/     D16 : 0244 F800           		andi.w	#$F800,d4
(1) 1419/     D1A : 0243 07FF           		andi.w	#$7FF,d3
(1) 1420/     D1E : E24B                		lsr.w	#1,d3
(1) 1421/     D20 : 8644                		or.w	d4,d3
(1) 1422/     D22 :                     
(1) 1423/     D22 : 2801                		move.l	d1,d4
(1) 1424/     D24 : 4844                		swap	d4
(1) 1425/     D26 : 5344                		subq.w	#1,d4
(1) 1426/     D28 : 6B48                		bmi.s	.bad_size_d
(1) 1427/     D2A :                     .x_loop_d:
(1) 1428/     D2A : 2844                		move.l	d4,a4
(1) 1429/     D2C : 3801                		move.w	d1,d4
(1) 1430/     D2E : 5344                		subq.w	#1,d4
(1) 1431/     D30 :                     .y_loop_d:
(1) 1432/     D30 : 4844                		swap	d4
(1) 1433/     D32 : 3807                		move.w	d7,d4
(1) 1434/     D34 : D845                		add.w	d5,d4
(1) 1435/     D36 : 4845                		swap	d5
(1) 1436/     D38 : 3D44 0004           		move.w	d4,4(a6)
(1) 1437/     D3C : 3D45 0004           		move.w	d5,4(a6)
(1) 1438/     D40 : 4845                		swap	d5
(1) 1439/     D42 : 381D                		move.w	(a5)+,d4
(1) 1440/     D44 : DAFC 0002           		adda	#2,a5
(1) 1441/     D48 : B87C FFFF           		cmp.w	#-1,d4
(1) 1442/     D4C : 6606                		bne.s	.non_blank_d
(1) 1443/     D4E : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1444/     D52 : 6008                		bra.s	.mk_cell_d
(1) 1445/     D54 :                     .non_blank_d:
(1) 1446/     D54 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1447/     D58 : E24C                		lsr.w	#1,d4
(1) 1448/     D5A : D843                		add.w	d3,d4
(1) 1449/     D5C :                     .mk_cell_d:
(1) 1450/     D5C : 3C84                		move.w	d4,(a6)
(1) 1451/     D5E : DA46                		add.w	d6,d5
(1) 1452/     D60 : 4844                		swap	d4
(1) 1453/     D62 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1454/     D66 : DE7C 0002           		add.w	#2,d7
(1) 1455/     D6A : 4245                		clr.w	d5
(1) 1456/     D6C : 280C                		move.l	a4,d4
(1) 1457/     D6E : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1458/     D72 :                     .bad_size_d:
(1) 1459/     D72 : 221F                		move.l	(sp)+,d1
(1) 1460/     D74 : 6094                		bra	.bad_size
(1) 1461/     D76 :                     
(1) 1462/     D76 :                     ; ====================================================================
(1) 1463/     D76 :                     ; ----------------------------------------------------------------
(1) 1464/     D76 :                     ; Palette fading section
(1) 1465/     D76 :                     ; ----------------------------------------------------------------
(1) 1466/     D76 :                     
(1) 1467/     D76 :                     ; --------------------------------------------------------
(1) 1468/     D76 :                     ; Video_RunFade
(1) 1469/     D76 :                     ;
(1) 1470/     D76 :                     ; Process Palette changes (fade and effects)
(1) 1471/     D76 :                     ; --------------------------------------------------------
(1) 1472/     D76 :                     
(1) 1473/     D76 :                     Video_RunFade:
(1) 1474/     D76 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1475/     D7A :                     .next_req:
(1) 1476/     D7A : 1016                		move.b	palfd_req(a6),d0
(1) 1477/     D7C : 6744                		beq.s	.no_req
(1) 1478/     D7E : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1479/     D82 : 6A38                		bpl.s	.busy_timer
(1) 1480/     D84 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1481/     D8A : 4BF8 D550           		lea	(RAM_Palette).w,a5
(1) 1482/     D8E : 49F8 D5D0           		lea	(RAM_PaletteFade).w,a4
(1) 1483/     D92 : 7E00                		moveq	#0,d7
(1) 1484/     D94 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1485/     D98 : DE47                		add.w	d7,d7
(1) 1486/     D9A : DAC7                		adda	d7,a5
(1) 1487/     D9C : D8C7                		adda	d7,a4
(1) 1488/     D9E : 7C00                		moveq	#0,d6
(1) 1489/     DA0 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1490/     DA4 : 6716                		beq.s	.busy_timer
(1) 1491/     DA6 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1492/     DAA : DC46                		add.w	d6,d6		; * 2
(1) 1493/     DAC : 5347                		subq.w	#1,d7
(1) 1494/     DAE : 0240 00FF           		andi.w	#$FF,d0
(1) 1495/     DB2 : D040                		add.w	d0,d0
(1) 1496/     DB4 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1497/     DB8 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1498/     DBC :                     .busy_timer:
(1) 1499/     DBC : DCFC 0008           		adda	#palfd_len,a6
(1) 1500/     DC0 : 60B8                		bra.s	.next_req
(1) 1501/     DC2 :                     .no_req:
(1) 1502/     DC2 : 4278 D7DC           		clr.w	(RAM_IndxPalFade).w
(1) 1503/     DC6 : 4E75                		rts
(1) 1504/     DC8 :                     
(1) 1505/     DC8 :                     ; ------------------------------------------------
(1) 1506/     DC8 :                     
(1) 1507/     DC8 :                     .fade_list:
(1) 1508/     DC8 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1509/     DCA : 0018                		dc.w .fade_out-.fade_list
(1) 1510/     DCC : 0088                		dc.w .fade_in-.fade_list
(1) 1511/     DCE : 0010                		dc.w .nothing-.fade_list
(1) 1512/     DD0 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1513/     DD2 : 0010                		dc.w .nothing-.fade_list
(1) 1514/     DD4 : 0010                		dc.w .nothing-.fade_list
(1) 1515/     DD6 : 0010                		dc.w .nothing-.fade_list
(1) 1516/     DD8 :                     
(1) 1517/     DD8 :                     ; ----------------------------------------------------
(1) 1518/     DD8 :                     ; Fade request $00: Null/exit.
(1) 1519/     DD8 :                     ; ----------------------------------------------------
(1) 1520/     DD8 :                     
(1) 1521/     DD8 :                     .nothing:
(1) 1522/     DD8 :                     .pfade_del:
(1) 1523/     DD8 : 4216                		clr.b	palfd_req(a6)
(1) 1524/     DDA : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1525/     DDE : 4E75                		rts
(1) 1526/     DE0 :                     
(1) 1527/     DE0 :                     ; ----------------------------------------------------
(1) 1528/     DE0 :                     ; Fade request $01: fade-out to black
(1) 1529/     DE0 :                     ; Quick.
(1) 1530/     DE0 :                     ;
(1) 1531/     DE0 :                     ; d7 - Num colors
(1) 1532/     DE0 :                     ; d6 - Increment*2
(1) 1533/     DE0 :                     ; ----------------------------------------------------
(1) 1534/     DE0 :                     
(1) 1535/     DE0 :                     .fade_out:
(1) 1536/     DE0 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1537/     DE4 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1538/     DE8 : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1539/     DEC : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1540/     DEE :                     .next_color:
(1) 1541/     DEE : 3015                		move.w	(a5),d0
(1) 1542/     DF0 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1543/     DF2 :                     	rept 3
(1) 1544/     DF2 :                     		move.w	d0,d1
(1) 1545/     DF2 :                     		and.w	d5,d1			; Filter TARGET
(1) 1546/     DF2 :                     		beq.s	.no_chng
(1) 1547/     DF2 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1548/     DF2 :                     		sub.w	d6,d1
(1) 1549/     DF2 :                     		bpl.s	.blck_alrdy
(1) 1550/     DF2 :                     		clr.w	d1
(1) 1551/     DF2 :                     .blck_alrdy:
(1) 1552/     DF2 :                     		addq.w	#1,d3			; Color changed
(1) 1553/     DF2 :                     .no_chng:
(1) 1554/     DF2 :                     		or.w	d1,d0
(1) 1555/     DF2 :                     		rol.w	#4,d6			; next << color
(1) 1556/     DF2 :                     		rol.w	#4,d5
(1) 1557/     DF2 :                     		rol.w	#4,d4
(1) 1558/     DF2 :                     	endm
(1) 1544/     DF2 : 3200                		move.w	d0,d1
(1) 1545/     DF4 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/     DF6 : 670A                		beq.s	.no_chng
(1) 1547/     DF8 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/     DFA : 9246                		sub.w	d6,d1
(1) 1549/     DFC : 6A02                		bpl.s	.blck_alrdy
(1) 1550/     DFE : 4241                		clr.w	d1
(1) 1551/     E00 :                     .blck_alrdy:
(1) 1552/     E00 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/     E02 :                     .no_chng:
(1) 1554/     E02 : 8041                		or.w	d1,d0
(1) 1555/     E04 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/     E06 : E95D                		rol.w	#4,d5
(1) 1557/     E08 : E95C                		rol.w	#4,d4
(1) 1544/     E0A : 3200                		move.w	d0,d1
(1) 1545/     E0C : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/     E0E : 670A                		beq.s	.no_chng
(1) 1547/     E10 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/     E12 : 9246                		sub.w	d6,d1
(1) 1549/     E14 : 6A02                		bpl.s	.blck_alrdy
(1) 1550/     E16 : 4241                		clr.w	d1
(1) 1551/     E18 :                     .blck_alrdy:
(1) 1552/     E18 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/     E1A :                     .no_chng:
(1) 1554/     E1A : 8041                		or.w	d1,d0
(1) 1555/     E1C : E95E                		rol.w	#4,d6			; next << color
(1) 1556/     E1E : E95D                		rol.w	#4,d5
(1) 1557/     E20 : E95C                		rol.w	#4,d4
(1) 1544/     E22 : 3200                		move.w	d0,d1
(1) 1545/     E24 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/     E26 : 670A                		beq.s	.no_chng
(1) 1547/     E28 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/     E2A : 9246                		sub.w	d6,d1
(1) 1549/     E2C : 6A02                		bpl.s	.blck_alrdy
(1) 1550/     E2E : 4241                		clr.w	d1
(1) 1551/     E30 :                     .blck_alrdy:
(1) 1552/     E30 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/     E32 :                     .no_chng:
(1) 1554/     E32 : 8041                		or.w	d1,d0
(1) 1555/     E34 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/     E36 : E95D                		rol.w	#4,d5
(1) 1557/     E38 : E95C                		rol.w	#4,d4
(1) 1559/     E3A :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1560/     E3A : E95E                		rol.w	#4,d6
(1) 1561/     E3C : E95D                		rol.w	#4,d5
(1) 1562/     E3E : E95C                		rol.w	#4,d4
(1) 1563/     E40 : 3A80                		move.w	d0,(a5)
(1) 1564/     E42 :                     .all_black:
(1) 1565/     E42 : DAFC 0002           		adda	#2,a5
(1) 1566/     E46 : 51CF FFA6           		dbf	d7,.next_color
(1) 1567/     E4A : 4A43                		tst.w	d3
(1) 1568/     E4C : 678A                		beq	.pfade_del
(1) 1569/     E4E :                     .fdout_nend:
(1) 1570/     E4E : 4E75                		rts
(1) 1571/     E50 :                     
(1) 1572/     E50 :                     ; ----------------------------------------------------
(1) 1573/     E50 :                     ; Fade request $02
(1) 1574/     E50 :                     ; Fade-in
(1) 1575/     E50 :                     ; ----------------------------------------------------
(1) 1576/     E50 :                     
(1) 1577/     E50 :                     .fade_in:
(1) 1578/     E50 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1579/     E54 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1580/     E58 : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1581/     E5C :                     .next_in:
(1) 1582/     E5C : 4847                		swap	d7
(1) 1583/     E5E : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1584/     E60 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1585/     E62 : C044                		and.w	d4,d0
(1) 1586/     E64 : C444                		and.w	d4,d2
(1) 1587/     E66 : B042                		cmp.w	d2,d0
(1) 1588/     E68 : 6766                		beq.s	.same_in
(1) 1589/     E6A :                     	rept 3
(1) 1590/     E6A :                     		move.w	d0,d1
(1) 1591/     E6A :                     		move.w	d4,d3
(1) 1592/     E6A :                     		eor.w	d5,d3
(1) 1593/     E6A :                     		and.w	d3,d0
(1) 1594/     E6A :                     		move.w	d2,d3
(1) 1595/     E6A :                     		and.w	d5,d1		; filter CURRENT color
(1) 1596/     E6A :                     		and.w	d5,d3		; filter TARGET color
(1) 1597/     E6A :                     
(1) 1598/     E6A :                     		add.w	d6,d1		; ADD to current
(1) 1599/     E6A :                     		cmp.w	d3,d1
(1) 1600/     E6A :                     		bcs.s	.max_out
(1) 1601/     E6A :                     		move.w	d2,d1
(1) 1602/     E6A :                     		and.w	d5,d1
(1) 1603/     E6A :                     .max_out:
(1) 1604/     E6A :                     		addq.w	#1,d7
(1) 1605/     E6A :                     		or.w	d1,d0
(1) 1606/     E6A :                     		rol.w	#4,d6		; next << color
(1) 1607/     E6A :                     		rol.w	#4,d5
(1) 1608/     E6A :                     	endm
(1) 1590/     E6A : 3200                		move.w	d0,d1
(1) 1591/     E6C : 3604                		move.w	d4,d3
(1) 1592/     E6E : BB43                		eor.w	d5,d3
(1) 1593/     E70 : C043                		and.w	d3,d0
(1) 1594/     E72 : 3602                		move.w	d2,d3
(1) 1595/     E74 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/     E76 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/     E78 :                     
(1) 1598/     E78 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/     E7A : B243                		cmp.w	d3,d1
(1) 1600/     E7C : 6504                		bcs.s	.max_out
(1) 1601/     E7E : 3202                		move.w	d2,d1
(1) 1602/     E80 : C245                		and.w	d5,d1
(1) 1603/     E82 :                     .max_out:
(1) 1604/     E82 : 5247                		addq.w	#1,d7
(1) 1605/     E84 : 8041                		or.w	d1,d0
(1) 1606/     E86 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/     E88 : E95D                		rol.w	#4,d5
(1) 1590/     E8A : 3200                		move.w	d0,d1
(1) 1591/     E8C : 3604                		move.w	d4,d3
(1) 1592/     E8E : BB43                		eor.w	d5,d3
(1) 1593/     E90 : C043                		and.w	d3,d0
(1) 1594/     E92 : 3602                		move.w	d2,d3
(1) 1595/     E94 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/     E96 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/     E98 :                     
(1) 1598/     E98 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/     E9A : B243                		cmp.w	d3,d1
(1) 1600/     E9C : 6504                		bcs.s	.max_out
(1) 1601/     E9E : 3202                		move.w	d2,d1
(1) 1602/     EA0 : C245                		and.w	d5,d1
(1) 1603/     EA2 :                     .max_out:
(1) 1604/     EA2 : 5247                		addq.w	#1,d7
(1) 1605/     EA4 : 8041                		or.w	d1,d0
(1) 1606/     EA6 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/     EA8 : E95D                		rol.w	#4,d5
(1) 1590/     EAA : 3200                		move.w	d0,d1
(1) 1591/     EAC : 3604                		move.w	d4,d3
(1) 1592/     EAE : BB43                		eor.w	d5,d3
(1) 1593/     EB0 : C043                		and.w	d3,d0
(1) 1594/     EB2 : 3602                		move.w	d2,d3
(1) 1595/     EB4 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/     EB6 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/     EB8 :                     
(1) 1598/     EB8 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/     EBA : B243                		cmp.w	d3,d1
(1) 1600/     EBC : 6504                		bcs.s	.max_out
(1) 1601/     EBE : 3202                		move.w	d2,d1
(1) 1602/     EC0 : C245                		and.w	d5,d1
(1) 1603/     EC2 :                     .max_out:
(1) 1604/     EC2 : 5247                		addq.w	#1,d7
(1) 1605/     EC4 : 8041                		or.w	d1,d0
(1) 1606/     EC6 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/     EC8 : E95D                		rol.w	#4,d5
(1) 1609/     ECA : E95E                		rol.w	#4,d6
(1) 1610/     ECC : E95D                		rol.w	#4,d5
(1) 1611/     ECE : 3A80                		move.w	d0,(a5)
(1) 1612/     ED0 :                     .same_in:
(1) 1613/     ED0 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1614/     ED4 : D8FC 0002           		adda	#2,a4
(1) 1615/     ED8 : 4847                		swap	d7
(1) 1616/     EDA : 51CF FF80           		dbf	d7,.next_in
(1) 1617/     EDE : 4847                		swap	d7
(1) 1618/     EE0 : 4A47                		tst.w	d7
(1) 1619/     EE2 : 6700 FEF4           		beq	.pfade_del
(1) 1620/     EE6 :                     .fdin_nend:
(1) 1621/     EE6 : 4E75                		rts
(1) 1622/     EE8 :                     
(1) 1623/     EE8 :                     ; --------------------------------------------------------
(1) 1624/     EE8 :                     ; Video_WaitFade
(1) 1625/     EE8 :                     ;
(1) 1626/     EE8 :                     ; CPU-saving version of System_Render when
(1) 1627/     EE8 :                     ; waiting for a fade-in/fade-out
(1) 1628/     EE8 :                     ;
(1) 1629/     EE8 :                     ; THIS IS REQUIRED FOR 32X as
(1) 1630/     EE8 :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1631/     EE8 :                     ; --------------------------------------------------------
(1) 1632/     EE8 :                     
(1) 1633/     EE8 :                     Video_WaitFade:
(1) 1634/     EE8 :                     .loop:
(1) 1635/     EE8 : 6100 058A           		bsr	System_Render
(1) 1636/     EEC : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1640/     EF0 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1641/     EF4 : 7C00                		moveq	#0,d6
(1) 1642/     EF6 :                     .next_one:
(1) 1643/     EF6 : 8C16                		or.b	palfd_req(a6),d6
(1) 1644/     EF8 : DCFC 0008           		adda	#palfd_len,a6
(1) 1649/     EFC : 51CF FFF8           		dbf	d7,.next_one
(1) 1650/     F00 : 4A06                		tst.b	d6
(1) 1651/     F02 : 66E4                		bne.s	.loop
(1) 1652/     F04 : 4E75                		rts
(1) 1653/     F06 :                     
(1) 1654/     F06 :                     ; --------------------------------------------------------
(1) 1655/     F06 :                     ; Video_FadeIn_Full
(1) 1656/     F06 :                     ;
(1) 1657/     F06 :                     ; Overwrites first entry on each's PalFadeList
(1) 1658/     F06 :                     ; --------------------------------------------------------
(1) 1659/     F06 :                     
(1) 1660/     F06 :                     Video_FadeIn_Full:
(1) 1667/     F06 : 7002                		moveq	#2,d0
(1) 1668/     F08 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1669/     F0E : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1670/     F14 : 6116                		bsr	Video_MakeFade
(1) 1671/     F16 : 60D0                		bra	Video_WaitFade
(1) 1672/     F18 :                     
(1) 1673/     F18 :                     ; --------------------------------------------------------
(1) 1674/     F18 :                     ; Video_FadeIn_Full
(1) 1675/     F18 :                     ;
(1) 1676/     F18 :                     ; Overwrites first entry on each's PalFadeList
(1) 1677/     F18 :                     ; --------------------------------------------------------
(1) 1678/     F18 :                     
(1) 1679/     F18 :                     Video_FadeOut_Full:
(1) 1686/     F18 : 7001                		moveq	#1,d0
(1) 1687/     F1A : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1688/     F20 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1689/     F26 : 6104                		bsr	Video_MakeFade
(1) 1690/     F28 : 60BE                		bra	Video_WaitFade
(1) 1691/     F2A :                     
(1) 1692/     F2A :                     ; ============================================================
(1) 1693/     F2A :                     ; --------------------------------------------------------
(1) 1694/     F2A :                     ; Subroutines
(1) 1695/     F2A :                     ; --------------------------------------------------------
(1) 1696/     F2A :                     
(1) 1697/     F2A :                     ; --------------------------------------------------------
(1) 1698/     F2A :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1699/     F2A :                     ;
(1) 1700/     F2A :                     ; Make palette Fading (or other) request, for
(1) 1701/     F2A :                     ; both VDP and SVDP
(1) 1702/     F2A :                     ;
(1) 1703/     F2A :                     ; Input:
(1) 1704/     F2A :                     ; d0.w | Task number:
(1) 1705/     F2A :                     ;        0 - Fade-out
(1) 1706/     F2A :                     ;        1 - Fade-in
(1) 1707/     F2A :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1708/     F2A :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1709/     F2A :                     ; --------------------------------------------------------
(1) 1710/     F2A :                     
(1) 1711/     F2A :                     Video_MdMars_MakeFade:
(1) 1720/     F2A : 4E75                		rts
(1) 1721/     F2C :                     Video_MakeFade:
(1) 1722/     F2C : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1723/     F30 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1724/     F34 : 3E38 D7DC           		move.w	(RAM_IndxPalFade).w,d7
(1) 1725/     F38 : 5278 D7DC           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1726/     F3C : 6106                		bsr	vidMkFade_Go
(1) 1727/     F3E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1728/     F42 : 4E75                		rts
(1) 1729/     F44 :                     vidMkFade_Go:
(1) 1730/     F44 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1731/     F4A : E74F                		lsl.w	#3,d7			; index * 8
(1) 1732/     F4C : DCC7                		adda	d7,a6
(1) 1733/     F4E : 2E01                		move.l	d1,d7
(1) 1734/     F50 : 2C02                		move.l	d2,d6
(1) 1735/     F52 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1736/     F54 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1737/     F58 : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1738/     F5C : 4846                		swap	d6
(1) 1739/     F5E : 4847                		swap	d7
(1) 1740/     F60 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1741/     F64 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1742/     F68 : 4E75                		rts
(1) 1743/     F6A :                     
(1) 1744/     F6A :                     ; --------------------------------------------------------
(1) 1745/     F6A :                     ; Video_LoadPal, Video_FadePal
(1) 1746/     F6A :                     ;
(1) 1747/     F6A :                     ; Load VDP palette data, either current or for fading.
(1) 1748/     F6A :                     ;
(1) 1749/     F6A :                     ; Input:
(1) 1750/     F6A :                     ; a0   | Palette data
(1) 1751/     F6A :                     ; d0.w | Starting color index
(1) 1752/     F6A :                     ; d1.w | Number of colors
(1) 1753/     F6A :                     ; --------------------------------------------------------
(1) 1754/     F6A :                     
(1) 1755/     F6A :                     Video_FadePal:
(1) 1756/     F6A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1757/     F6E : 4DF8 D5D0           		lea	(RAM_PaletteFade).w,a6
(1) 1758/     F72 : 6008                		bra.s	vidMd_Pal
(1) 1759/     F74 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1760/     F74 :                     ; 		rts
(1) 1761/     F74 :                     Video_LoadPal:
(1) 1762/     F74 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1763/     F78 : 4DF8 D550           		lea	(RAM_Palette).w,a6
(1) 1764/     F7C :                     ; 		bsr.s	vidMd_Pal
(1) 1765/     F7C :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1766/     F7C :                     ; 		rts
(1) 1767/     F7C :                     
(1) 1768/     F7C :                     ; --------------------------------------------------------
(1) 1769/     F7C :                     vidMd_Pal:
(1) 1770/     F7C : 2A48                		move.l	a0,a5
(1) 1771/     F7E : 7E00                		moveq	#0,d7
(1) 1772/     F80 : 3E00                		move.w	d0,d7
(1) 1773/     F82 : DE47                		add.w	d7,d7
(1) 1774/     F84 : DCC7                		adda	d7,a6
(1) 1775/     F86 : 3E01                		move.w	d1,d7
(1) 1776/     F88 : 5347                		subq.w	#1,d7
(1) 1777/     F8A : 6B0E                		bmi.s	.bad
(1) 1778/     F8C : 3C02                		move.w	d2,d6
(1) 1779/     F8E : 0246 0001           		andi.w	#1,d6
(1) 1780/     F92 : E25E                		ror.w	#1,d6
(1) 1781/     F94 :                     .loop:
(1) 1782/     F94 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1783/     F96 : 51CF FFFC           		dbf	d7,.loop
(1) 1784/     F9A :                     .bad:
(1) 1785/     F9A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1786/     F9E : 4E75                		rts
(1) 1787/     FA0 :                     
(1) 1788/     FA0 :                     ; --------------------------------------------------------
(1) 1789/     FA0 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1790/     FA0 :                     ;
(1) 1791/     FA0 :                     ; Loads palettes on bulk with a list
(1) 1792/     FA0 :                     ;
(1) 1793/     FA0 :                     ; Input:
(1) 1794/     FA0 :                     ; a0 | List of graphics to load:
(1) 1795/     FA0 :                     ;        dc.w numof_entries
(1) 1796/     FA0 :                     ;        dc.l palette_data
(1) 1797/     FA0 :                     ;        dc.w start_at
(1) 1798/     FA0 :                     ;        dc.w numof_colors
(1) 1799/     FA0 :                     ;        ; ...more entries
(1) 1800/     FA0 :                     ; --------------------------------------------------------
(1) 1801/     FA0 :                     
(1) 1802/     FA0 :                     Video_LoadPal_List:
(1) 1803/     FA0 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1804/     FA4 : 2A48                		move.l	a0,a5
(1) 1805/     FA6 : 3E1D                		move.w	(a5)+,d7
(1) 1806/     FA8 : 6710                		beq.s	.invalid
(1) 1807/     FAA : 6B0E                		bmi.s	.invalid
(1) 1808/     FAC : 5347                		subq.w	#1,d7
(1) 1809/     FAE :                     .next_one:
(1) 1810/     FAE : 205D                		move.l	(a5)+,a0
(1) 1811/     FB0 : 301D                		move.w	(a5)+,d0
(1) 1812/     FB2 : 321D                		move.w	(a5)+,d1
(1) 1813/     FB4 : 61BE                		bsr	Video_LoadPal
(1) 1814/     FB6 : 51CF FFF6           		dbf	d7,.next_one
(1) 1815/     FBA :                     .invalid:
(1) 1816/     FBA : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1817/     FBE : 4E75                		rts
(1) 1818/     FC0 :                     
(1) 1819/     FC0 :                     Video_FadePal_List:
(1) 1820/     FC0 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1821/     FC4 : 2A48                		move.l	a0,a5
(1) 1822/     FC6 : 3E1D                		move.w	(a5)+,d7
(1) 1823/     FC8 : 6710                		beq.s	.invalid
(1) 1824/     FCA : 6B0E                		bmi.s	.invalid
(1) 1825/     FCC : 5347                		subq.w	#1,d7
(1) 1826/     FCE :                     .next_one:
(1) 1827/     FCE : 205D                		move.l	(a5)+,a0
(1) 1828/     FD0 : 301D                		move.w	(a5)+,d0
(1) 1829/     FD2 : 321D                		move.w	(a5)+,d1
(1) 1830/     FD4 : 6194                		bsr	Video_FadePal
(1) 1831/     FD6 : 51CF FFF6           		dbf	d7,.next_one
(1) 1832/     FDA :                     .invalid:
(1) 1833/     FDA : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1834/     FDE : 4E75                		rts
(1) 1835/     FE0 :                     
(1) 1836/     FE0 :                     ; ====================================================================
(1) 1837/     FE0 :                     ; ----------------------------------------------------------------
(1) 1838/     FE0 :                     ; Text PRINT system.
(1) 1839/     FE0 :                     ; ----------------------------------------------------------------
(1) 1840/     FE0 :                     
(1) 1841/     FE0 :                     ; --------------------------------------------------------
(1) 1842/     FE0 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1843/     FE0 :                     ;
(1) 1844/     FE0 :                     ; Initializes the default Graphics and Palette
(1) 1845/     FE0 :                     ; for the font.
(1) 1846/     FE0 :                     ;
(1) 1847/     FE0 :                     ; Input:
(1) 1848/     FE0 :                     ; d0.l | Graphics data
(1) 1849/     FE0 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1850/     FE0 :                     ; d1.w | VRAM output location to load and use
(1) 1851/     FE0 :                     ;        the ASCII text including attribute
(1) 1852/     FE0 :                     ;        settings (Palette and Priority)
(1) 1853/     FE0 :                     ;        Defualt values are:
(1) 1854/     FE0 :                     ;        DEF_PrintVram for 8x8 and
(1) 1855/     FE0 :                     ;        DEF_PrintVramW for 8x16
(1) 1856/     FE0 :                     ;
(1) 1857/     FE0 :                     ; Breaks:
(1) 1858/     FE0 :                     ; d0-d3
(1) 1859/     FE0 :                     ;
(1) 1860/     FE0 :                     ; Notes:
(1) 1861/     FE0 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1862/     FE0 :                     ; - Write your palette manually after this
(1) 1863/     FE0 :                     ; --------------------------------------------------------
(1) 1864/     FE0 :                     
(1) 1865/     FE0 :                     Video_PrintInitW:
(1) 1866/     FE0 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1867/     FE4 : 3601                		move.w	d1,d3
(1) 1868/     FE6 : 0443 0040           		subi.w	#$20*2,d3
(1) 1869/     FEA : 31C3 D7E2           		move.w	d3,(RAM_SetPrntVramW).w
(1) 1870/     FEE : 600E                		bra.s	vidPrint_Init
(1) 1871/     FF0 :                     Video_PrintInit:
(1) 1872/     FF0 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1873/     FF4 : 3601                		move.w	d1,d3
(1) 1874/     FF6 : 0443 0020           		subi.w	#$20,d3
(1) 1875/     FFA : 31C3 D7E0           		move.w	d3,(RAM_SetPrntVram).w
(1) 1876/     FFE :                     vidPrint_Init:
(1) 1877/     FFE : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1878/    1000 : 6000 F944           		bra	Video_LoadArt
(1) 1879/    1004 :                     
(1) 1880/    1004 :                     ; --------------------------------------------------------
(1) 1881/    1004 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1882/    1004 :                     ;
(1) 1883/    1004 :                     ; Loads default palette for the font
(1) 1884/    1004 :                     ; --------------------------------------------------------
(1) 1885/    1004 :                     
(1) 1886/    1004 :                     Video_PrintDefPal_Fade:
(1) 1887/    1004 : 2F0E                		move.l	a6,-(sp)
(1) 1888/    1006 : 4DF8 D630           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1889/    100A : 6006                		bra.s	vid_FontDefPal
(1) 1890/    100C :                     Video_PrintDefPal:
(1) 1891/    100C : 2F0E                		move.l	a6,-(sp)
(1) 1892/    100E : 4DF8 D5B0           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1893/    1012 :                     vid_FontDefPal:
(1) 1894/    1012 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1895/    1016 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1896/    101A : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1897/    101E : 2C5F                		move.l	(sp)+,a6
(1) 1898/    1020 : 4E75                		rts
(1) 1899/    1022 :                     
(1) 1900/    1022 :                     ; --------------------------------------------------------
(1) 1901/    1022 :                     ; Video_Print, Video_PrintW
(1) 1902/    1022 :                     ;
(1) 1903/    1022 :                     ; Prints a text string, VDP side.
(1) 1904/    1022 :                     ;
(1) 1905/    1022 :                     ; Input:
(1) 1906/    1022 :                     ; a0   | String data
(1) 1907/    1022 :                     ; d0.w | X position
(1) 1908/    1022 :                     ; d1.w | Y position
(1) 1909/    1022 :                     ; d2.w | Screen VRAM location
(1) 1910/    1022 :                     ;        Foreground: DEF_VRAM_FG
(1) 1911/    1022 :                     ;        Background: DEF_VRAM_BG
(1) 1912/    1022 :                     ;        Window:     DEF_VRAM_WD
(1) 1913/    1022 :                     ;
(1) 1914/    1022 :                     ; d3.w | Screen width
(1) 1915/    1022 :                     ;        - $040 (DEF_HSIZE_32)
(1) 1916/    1022 :                     ;        - $080 (DEF_HSIZE_64)
(1) 1917/    1022 :                     ;        - $100 (DEF_HSIZE_128)
(1) 1918/    1022 :                     ;
(1) 1919/    1022 :                     ; Notes:
(1) 1920/    1022 :                     ; - Initialize your graphics and VRAM location
(1) 1921/    1022 :                     ;   with Video_PrintInit
(1) 1922/    1022 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1923/    1022 :                     ;   mode.
(1) 1924/    1022 :                     ; --------------------------------------------------------
(1) 1925/    1022 :                     
(1) 1926/    1022 :                     ; dc.l pstr(type,ram_location)
(1) 1927/    1022 :                     ;
(1) 1928/    1022 :                     ; type:
(1) 1929/    1022 :                     ; 0 - Byte
(1) 1930/    1022 :                     ; 1 - Word
(1) 1931/    1022 :                     ; 2 - 24-bit
(1) 1932/    1022 :                     ; 3 - Long
(1) 1933/    1022 :                     
(1) 1934/    1022 :                     Video_Print:
(1) 1935/    1022 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1936/    1026 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1937/    102C : 3E02                		move.w	d2,d7
(1) 1938/    102E : 3A00                		move.w	d0,d5
(1) 1939/    1030 : DA45                		add.w	d5,d5
(1) 1940/    1032 : 3801                		move.w	d1,d4
(1) 1941/    1034 : C8C3                		mulu.w	d3,d4
(1) 1942/    1036 : DA44                		add.w	d4,d5
(1) 1943/    1038 : DE45                		add.w	d5,d7
(1) 1944/    103A : 3C03                		move.w	d3,d6
(1) 1945/    103C :                     
(1) 1946/    103C : 7A00                		moveq	#0,d5
(1) 1947/    103E : 3A07                		move.w	d7,d5
(1) 1948/    1040 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1949/    1044 : 8E7C 4000           		or.w	#$4000,d7
(1) 1950/    1048 : E55D                		rol.w	#2,d5
(1) 1951/    104A : 0245 0003           		andi.w	#%11,d5
(1) 1952/    104E : 4845                		swap	d5
(1) 1953/    1050 : 2A48                		move.l	a0,a5
(1) 1954/    1052 :                     .loop:
(1) 1955/    1052 : 3806                		move.w	d6,d4
(1) 1956/    1054 : 5344                		subq.w	#1,d4
(1) 1957/    1056 : CA44                		and.w	d4,d5
(1) 1958/    1058 :                     
(1) 1959/    1058 : 3807                		move.w	d7,d4
(1) 1960/    105A : D845                		add.w	d5,d4
(1) 1961/    105C : 4845                		swap	d5
(1) 1962/    105E : 3D44 0004           		move.w	d4,4(a6)
(1) 1963/    1062 : 3D45 0004           		move.w	d5,4(a6)
(1) 1964/    1066 : 4845                		swap	d5
(1) 1965/    1068 :                     .q_loop:
(1) 1966/    1068 : 181D                		move.b	(a5)+,d4
(1) 1967/    106A : 671C                		beq.s	.exit
(1) 1968/    106C : 6B20                		bmi.s	.special
(1) 1969/    106E : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1970/    1072 : 670E                		beq.s	.next
(1) 1971/    1074 :                     ; ------------------------------------------------
(1) 1972/    1074 :                     ; Normal text
(1) 1973/    1074 : 0244 00FF           		andi.w	#$FF,d4
(1) 1974/    1078 : D878 D7E0           		add.w	(RAM_SetPrntVram).w,d4
(1) 1975/    107C : 3C84                		move.w	d4,(a6)
(1) 1976/    107E : 5445                		addq.w	#2,d5
(1) 1977/    1080 : 60E6                		bra.s	.q_loop
(1) 1978/    1082 :                     .next:
(1) 1979/    1082 : 4245                		clr.w	d5
(1) 1980/    1084 : DE46                		add.w	d6,d7			; Next line
(1) 1981/    1086 : 60CA                		bra.s	.loop
(1) 1982/    1088 :                     .exit:
(1) 1983/    1088 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1984/    108C : 4E75                		rts
(1) 1985/    108E :                     ; ------------------------------------------------
(1) 1986/    108E :                     ; Show value
(1) 1987/    108E :                     ; d4 - $80|flags
(1) 1988/    108E :                     .special:
(1) 1989/    108E : 4846                		swap	d6
(1) 1990/    1090 : 1C04                		move.b	d4,d6
(1) 1991/    1092 : E19C                		rol.l	#8,d4
(1) 1992/    1094 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 1993/    1096 : E19C                		rol.l	#8,d4
(1) 1994/    1098 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 1995/    109A : E19C                		rol.l	#8,d4
(1) 1996/    109C : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 1997/    109E : 2844                		move.l	d4,a4
(1) 1998/    10A0 : 0246 0003           		andi.w	#%11,d6
(1) 1999/    10A4 : 4847                		swap	d7
(1) 2000/    10A6 : 3E3C 0000           		move.w	#1-1,d7
(1) 2001/    10AA : BC3C 0003           		cmp.b	#$03,d6
(1) 2002/    10AE : 6724                		beq.s	.show_long
(1) 2003/    10B0 : BC3C 0002           		cmp.b	#$02,d6
(1) 2004/    10B4 : 6716                		beq.s	.show_24
(1) 2005/    10B6 : BC3C 0001           		cmp.b	#$01,d6
(1) 2006/    10BA : 6708                		beq.s	.show_word
(1) 2007/    10BC :                     .show_byte:
(1) 2008/    10BC : 1814                		move.b	(a4),d4
(1) 2009/    10BE : 4844                		swap	d4
(1) 2010/    10C0 : E19C                		rol.l	#8,d4
(1) 2011/    10C2 : 6014                		bra.s	.mk_value
(1) 2012/    10C4 :                     .show_word:
(1) 2013/    10C4 : 3814                		move.w	(a4),d4
(1) 2014/    10C6 : 4844                		swap	d4
(1) 2015/    10C8 : 5247                		addq.w	#1,d7
(1) 2016/    10CA : 600C                		bra.s	.mk_value
(1) 2017/    10CC :                     .show_24:
(1) 2018/    10CC : 2814                		move.l	(a4),d4
(1) 2019/    10CE : E19C                		rol.l	#8,d4
(1) 2020/    10D0 : 5447                		addq.w	#2,d7
(1) 2021/    10D2 : 6004                		bra.s	.mk_value
(1) 2022/    10D4 :                     .show_long:
(1) 2023/    10D4 : 2814                		move.l	(a4),d4
(1) 2024/    10D6 : 5647                		addq.w	#3,d7
(1) 2025/    10D8 :                     .mk_value:
(1) 2026/    10D8 : E99C                		rol.l	#4,d4
(1) 2027/    10DA : 6110                		bsr.s	.show_nibbl
(1) 2028/    10DC : E99C                		rol.l	#4,d4
(1) 2029/    10DE : 610C                		bsr.s	.show_nibbl
(1) 2030/    10E0 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2031/    10E4 : 4846                		swap	d6
(1) 2032/    10E6 : 4847                		swap	d7
(1) 2033/    10E8 : 6000 FF68           		bra	.loop
(1) 2034/    10EC :                     .show_nibbl:
(1) 2035/    10EC : 2846                		move.l	d6,a4
(1) 2036/    10EE : 1C04                		move.b	d4,d6
(1) 2037/    10F0 : 0246 000F           		andi.w	#$0F,d6
(1) 2038/    10F4 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2039/    10F8 : 6502                		bcs.s	.hex_incr
(1) 2040/    10FA : 5E46                		addq.w	#7,d6
(1) 2041/    10FC : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2042/    1100 : DC78 D7E0           		add.w	(RAM_SetPrntVram).w,d6
(1) 2043/    1104 : 3C86                		move.w	d6,(a6)
(1) 2044/    1106 : 5445                		addq.w	#2,d5
(1) 2045/    1108 : 2C0C                		move.l	a4,d6
(1) 2046/    110A : 4E75                		rts
(1) 2047/    110C :                     
(1) 2048/    110C :                     ; --------------------------------------------------------
(1) 2049/    110C :                     ; 8x16 version
(1) 2050/    110C :                     ; --------------------------------------------------------
(1) 2051/    110C :                     
(1) 2052/    110C :                     Video_PrintW:
(1) 2053/    110C : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2054/    1110 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2055/    1116 :                     
(1) 2056/    1116 : 3C38 D7E2           		move.w	(RAM_SetPrntVramW).w,d6
(1) 2057/    111A : 3A38 D7F6           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2058/    111E : 0805 0002           		btst	#2,d5
(1) 2059/    1122 : 670E                		beq.s	.no_dble_y
(1) 2060/    1124 : 3E06                		move.w	d6,d7
(1) 2061/    1126 : 0247 F800           		andi.w	#$F800,d7
(1) 2062/    112A : 0246 07FF           		andi.w	#$7FF,d6
(1) 2063/    112E : E24E                		lsr.w	#1,d6
(1) 2064/    1130 : 8C47                		or.w	d7,d6
(1) 2065/    1132 :                     .no_dble_y:
(1) 2066/    1132 : 4846                		swap	d6
(1) 2067/    1134 : 3E02                		move.w	d2,d7
(1) 2068/    1136 : 3A00                		move.w	d0,d5
(1) 2069/    1138 : DA45                		add.w	d5,d5
(1) 2070/    113A : 3801                		move.w	d1,d4
(1) 2071/    113C : C8C3                		mulu.w	d3,d4
(1) 2072/    113E : DA44                		add.w	d4,d5
(1) 2073/    1140 : DE45                		add.w	d5,d7
(1) 2074/    1142 : 3C03                		move.w	d3,d6
(1) 2075/    1144 :                     
(1) 2076/    1144 : 7A00                		moveq	#0,d5
(1) 2077/    1146 : 3A07                		move.w	d7,d5
(1) 2078/    1148 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2079/    114C : 8E7C 4000           		or.w	#$4000,d7
(1) 2080/    1150 : E55D                		rol.w	#2,d5
(1) 2081/    1152 : 0245 0003           		andi.w	#%11,d5
(1) 2082/    1156 : 4845                		swap	d5
(1) 2083/    1158 : 2A48                		move.l	a0,a5
(1) 2084/    115A :                     	; d7 -      TEMP       | VDP write left
(1) 2085/    115A :                     	; d6 -      TEMP       | Y next-line size
(1) 2086/    115A :                     	; d5 - VDP write right | X current pos
(1) 2087/    115A :                     	; d4 -                 | TEMP
(1) 2088/    115A :                     .loop:
(1) 2089/    115A : 3806                		move.w	d6,d4
(1) 2090/    115C : 5344                		subq.w	#1,d4
(1) 2091/    115E : CA44                		and.w	d4,d5
(1) 2092/    1160 : 181D                		move.b	(a5)+,d4
(1) 2093/    1162 : 6776                		beq.s	.exit
(1) 2094/    1164 : 6B7A                		bmi.s	.special
(1) 2095/    1166 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2096/    116A : 6766                		beq.s	.next
(1) 2097/    116C :                     ; ------------------------------------------------
(1) 2098/    116C :                     ; Normal text
(1) 2099/    116C : 0244 00FF           		andi.w	#$FF,d4
(1) 2100/    1170 : 4847                		swap	d7
(1) 2101/    1172 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2102/    1176 : 0807 0002           		btst	#2,d7
(1) 2103/    117A : 671E                		beq.s	.ver_normal
(1) 2104/    117C : 4846                		swap	d6
(1) 2105/    117E : D846                		add.w	d6,d4
(1) 2106/    1180 : 4846                		swap	d6
(1) 2107/    1182 : 4844                		swap	d4
(1) 2108/    1184 : 4847                		swap	d7
(1) 2109/    1186 : 3807                		move.w	d7,d4
(1) 2110/    1188 : D845                		add.w	d5,d4
(1) 2111/    118A : 4845                		swap	d5
(1) 2112/    118C : 3D44 0004           		move.w	d4,4(a6)
(1) 2113/    1190 : 3D45 0004           		move.w	d5,4(a6)
(1) 2114/    1194 : 4844                		swap	d4
(1) 2115/    1196 : 3C84                		move.w	d4,(a6)
(1) 2116/    1198 : 6032                		bra.s	.ver_cont
(1) 2117/    119A :                     .ver_normal:
(1) 2118/    119A : D844                		add.w	d4,d4
(1) 2119/    119C : 4846                		swap	d6
(1) 2120/    119E : D846                		add.w	d6,d4
(1) 2121/    11A0 : 4846                		swap	d6
(1) 2122/    11A2 : 4844                		swap	d4
(1) 2123/    11A4 : 4847                		swap	d7
(1) 2124/    11A6 : 3807                		move.w	d7,d4
(1) 2125/    11A8 : D845                		add.w	d5,d4
(1) 2126/    11AA : 4845                		swap	d5
(1) 2127/    11AC : 3D44 0004           		move.w	d4,4(a6)
(1) 2128/    11B0 : 3D45 0004           		move.w	d5,4(a6)
(1) 2129/    11B4 : 4844                		swap	d4
(1) 2130/    11B6 : 3C84                		move.w	d4,(a6)
(1) 2131/    11B8 : 5244                		addq.w	#1,d4
(1) 2132/    11BA : 4844                		swap	d4
(1) 2133/    11BC : D846                		add.w	d6,d4
(1) 2134/    11BE : 3D44 0004           		move.w	d4,4(a6)
(1) 2135/    11C2 : 3D45 0004           		move.w	d5,4(a6)
(1) 2136/    11C6 : 4844                		swap	d4
(1) 2137/    11C8 : 3C84                		move.w	d4,(a6)
(1) 2138/    11CA : 4844                		swap	d4
(1) 2139/    11CC :                     
(1) 2140/    11CC :                     .ver_cont:
(1) 2141/    11CC : 4845                		swap	d5
(1) 2142/    11CE : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2143/    11D0 : 6088                		bra.s	.loop
(1) 2144/    11D2 :                     .next:
(1) 2145/    11D2 : 4245                		clr.w	d5		; Clear X pos
(1) 2146/    11D4 : DE46                		add.w	d6,d7		; Next Y line
(1) 2147/    11D6 : DE46                		add.w	d6,d7		; twice
(1) 2148/    11D8 : 6080                		bra	.loop
(1) 2149/    11DA :                     .exit:
(1) 2150/    11DA : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2151/    11DE : 4E75                		rts
(1) 2152/    11E0 :                     ; ------------------------------------------------
(1) 2153/    11E0 :                     ; Show value
(1) 2154/    11E0 :                     ; d4 - $80|flags
(1) 2155/    11E0 :                     .special:
(1) 2156/    11E0 : 2646                		move.l	d6,a3
(1) 2157/    11E2 : 1C04                		move.b	d4,d6
(1) 2158/    11E4 : E19C                		rol.l	#8,d4
(1) 2159/    11E6 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2160/    11E8 : E19C                		rol.l	#8,d4
(1) 2161/    11EA : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2162/    11EC : E19C                		rol.l	#8,d4
(1) 2163/    11EE : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2164/    11F0 : 2844                		move.l	d4,a4
(1) 2165/    11F2 : 0246 0003           		andi.w	#%11,d6
(1) 2166/    11F6 : 4847                		swap	d7
(1) 2167/    11F8 : 3E3C 0000           		move.w	#1-1,d7
(1) 2168/    11FC : BC3C 0003           		cmp.b	#$03,d6
(1) 2169/    1200 : 6724                		beq.s	.show_long
(1) 2170/    1202 : BC3C 0002           		cmp.b	#$02,d6
(1) 2171/    1206 : 6716                		beq.s	.show_24
(1) 2172/    1208 : BC3C 0001           		cmp.b	#$01,d6
(1) 2173/    120C : 6708                		beq.s	.show_word
(1) 2174/    120E :                     .show_byte:
(1) 2175/    120E : 1814                		move.b	(a4),d4
(1) 2176/    1210 : 4844                		swap	d4
(1) 2177/    1212 : E19C                		rol.l	#8,d4
(1) 2178/    1214 : 6014                		bra.s	.mk_value_in
(1) 2179/    1216 :                     .show_word:
(1) 2180/    1216 : 3814                		move.w	(a4),d4
(1) 2181/    1218 : 4844                		swap	d4
(1) 2182/    121A : 5247                		addq.w	#1,d7
(1) 2183/    121C : 600C                		bra.s	.mk_value_in
(1) 2184/    121E :                     .show_24:
(1) 2185/    121E : 2814                		move.l	(a4),d4
(1) 2186/    1220 : E19C                		rol.l	#8,d4
(1) 2187/    1222 : 5447                		addq.w	#2,d7
(1) 2188/    1224 : 6004                		bra.s	.mk_value_in
(1) 2189/    1226 :                     .show_long:
(1) 2190/    1226 : 2814                		move.l	(a4),d4
(1) 2191/    1228 : 5647                		addq.w	#3,d7
(1) 2192/    122A :                     .mk_value_in:
(1) 2193/    122A : 2C0B                		move.l	a3,d6
(1) 2194/    122C :                     
(1) 2195/    122C :                     
(1) 2196/    122C :                     	; d4 - value
(1) 2197/    122C : 4846                		swap	d6
(1) 2198/    122E :                     .mk_value:
(1) 2199/    122E : E99C                		rol.l	#4,d4
(1) 2200/    1230 : 6110                		bsr.s	.show_nibbl
(1) 2201/    1232 : E99C                		rol.l	#4,d4
(1) 2202/    1234 : 610C                		bsr.s	.show_nibbl
(1) 2203/    1236 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2204/    123A : 4846                		swap	d6
(1) 2205/    123C : 4847                		swap	d7
(1) 2206/    123E : 6000 FF1A           		bra	.loop
(1) 2207/    1242 :                     
(1) 2208/    1242 :                     	; d6 - Y next-line size | TEMP
(1) 2209/    1242 :                     .show_nibbl:
(1) 2210/    1242 : 2846                		move.l	d6,a4
(1) 2211/    1244 : 2644                		move.l	d4,a3
(1) 2212/    1246 : 3C38 D7F6           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2213/    124A : 0806 0002           		btst	#2,d6
(1) 2214/    124E : 6730                		beq.s	.nibbl_norm
(1) 2215/    1250 :                     
(1) 2216/    1250 : 616A                		bsr.s	.get_preval
(1) 2217/    1252 : 4847                		swap	d7
(1) 2218/    1254 : 3838 D7E2           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2219/    1258 : 0244 07FF           		andi.w	#$7FF,d4
(1) 2220/    125C : E24C                		lsr.w	#1,d4
(1) 2221/    125E : DC44                		add.w	d4,d6
(1) 2222/    1260 : 3838 D7E2           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2223/    1264 : 0244 F800           		andi.w	#$F800,d4
(1) 2224/    1268 : 8C44                		or.w	d4,d6
(1) 2225/    126A : 3807                		move.w	d7,d4
(1) 2226/    126C : 4847                		swap	d7
(1) 2227/    126E : D845                		add.w	d5,d4
(1) 2228/    1270 : 4845                		swap	d5
(1) 2229/    1272 : 3D44 0004           		move.w	d4,4(a6)
(1) 2230/    1276 : 3D45 0004           		move.w	d5,4(a6)
(1) 2231/    127A : 4845                		swap	d5
(1) 2232/    127C : 3C86                		move.w	d6,(a6)
(1) 2233/    127E : 6034                		bra.s	.nibbl_cont
(1) 2234/    1280 :                     
(1) 2235/    1280 :                     .nibbl_norm:
(1) 2236/    1280 : 613A                		bsr.s	.get_preval
(1) 2237/    1282 : DC46                		add.w	d6,d6
(1) 2238/    1284 : DC78 D7E2           		add.w	(RAM_SetPrntVramW).w,d6
(1) 2239/    1288 : 4847                		swap	d7
(1) 2240/    128A : 3807                		move.w	d7,d4
(1) 2241/    128C : 4847                		swap	d7
(1) 2242/    128E : D845                		add.w	d5,d4
(1) 2243/    1290 : 4845                		swap	d5
(1) 2244/    1292 : 3D44 0004           		move.w	d4,4(a6)
(1) 2245/    1296 : 3D45 0004           		move.w	d5,4(a6)
(1) 2246/    129A : 4845                		swap	d5
(1) 2247/    129C : 3C86                		move.w	d6,(a6)
(1) 2248/    129E : 5246                		addq.w	#1,d6
(1) 2249/    12A0 : 4846                		swap	d6
(1) 2250/    12A2 : D846                		add.w	d6,d4
(1) 2251/    12A4 : 4846                		swap	d6
(1) 2252/    12A6 : 4845                		swap	d5
(1) 2253/    12A8 : 3D44 0004           		move.w	d4,4(a6)
(1) 2254/    12AC : 3D45 0004           		move.w	d5,4(a6)
(1) 2255/    12B0 : 4845                		swap	d5
(1) 2256/    12B2 : 3C86                		move.w	d6,(a6)
(1) 2257/    12B4 :                     .nibbl_cont:
(1) 2258/    12B4 : 5445                		addq.w	#2,d5
(1) 2259/    12B6 : 2C0C                		move.l	a4,d6
(1) 2260/    12B8 : 280B                		move.l	a3,d4
(1) 2261/    12BA : 4E75                		rts
(1) 2262/    12BC :                     
(1) 2263/    12BC :                     .get_preval:
(1) 2264/    12BC : 1C04                		move.b	d4,d6
(1) 2265/    12BE : 0246 000F           		andi.w	#$0F,d6
(1) 2266/    12C2 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2267/    12C6 : 6502                		bcs.s	.hex_incr
(1) 2268/    12C8 : 5E46                		addq.w	#7,d6
(1) 2269/    12CA :                     .hex_incr:
(1) 2270/    12CA : DC7C 0030           		add.w	#"0",d6
(1) 2271/    12CE : 4E75                		rts
(1) 2272/    12D0 :                     
(1) 2273/    12D0 :                     ; ------------------------------------------------
(1) 2274/    12D0 :                     ; Input:
(1) 2275/    12D0 :                     ; d2.w | Layer:
(1) 2276/    12D0 :                     ;        0 - Foreground
(1) 2277/    12D0 :                     ;        1 - Background
(1) 2278/    12D0 :                     ;        2 - WINDOW
(1) 2279/    12D0 :                     ;
(1) 2280/    12D0 :                     ; Returns:
(1) 2281/    12D0 :                     ; d7 - VRAM location
(1) 2282/    12D0 :                     ; d6 - Y jump size
(1) 2283/    12D0 :                     ; ------------------------------------------------
(1) 2284/    12D0 :                     
(1) 2285/    12D0 :                     ; vidSub_PickLayer:
(1) 2286/    12D0 :                     ; 		move.w	d2,d7
(1) 2287/    12D0 :                     ; 		lsl.w	#2,d7
(1) 2288/    12D0 :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2289/    12D0 :                     ; 		lea	.filter_data(pc),a4
(1) 2290/    12D0 :                     ; 		adda	d7,a4
(1) 2291/    12D0 :                     ; 		moveq	#0,d7
(1) 2292/    12D0 :                     ; 		moveq	#0,d5
(1) 2293/    12D0 :                     ; 		move.b	(a4),d7
(1) 2294/    12D0 :                     ; 		adda	d7,a5
(1) 2295/    12D0 :                     ; 		move.b	1(a4),d6
(1) 2296/    12D0 :                     ; 		move.b	2(a4),d5
(1) 2297/    12D0 :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2298/    12D0 :                     ; 		and.b	d6,d7		; filter
(1) 2299/    12D0 :                     ; 		lsl.w	d5,d7		; shift left
(1) 2300/    12D0 :                     ; 		move.w	#$40,d6
(1) 2301/    12D0 :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2302/    12D0 :                     ; 		andi.w	#%00000011,d6
(1) 2303/    12D0 :                     ; 		add.w	d6,d6
(1) 2304/    12D0 :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2305/    12D0 :                     ; 		rts
(1) 2306/    12D0 :                     ; .filter_data:
(1) 2307/    12D0 :                     ; 		dc.b $00		; Reg slot
(1) 2308/    12D0 :                     ; 		dc.b %00111000		; Filter bits
(1) 2309/    12D0 :                     ; 		dc.b 10,0		; shift left, 0
(1) 2310/    12D0 :                     ; 		dc.b $02
(1) 2311/    12D0 :                     ; 		dc.b %00000111
(1) 2312/    12D0 :                     ; 		dc.b 13,0
(1) 2313/    12D0 :                     ; 		dc.b $01
(1) 2314/    12D0 :                     ; 		dc.b %00111110
(1) 2315/    12D0 :                     ; 		dc.b 10,0
(1) 2316/    12D0 :                     ; .jump_sizes:	dc.w $040
(1) 2317/    12D0 :                     ; 		dc.w $080
(1) 2318/    12D0 :                     ; 		dc.w $080
(1) 2319/    12D0 :                     ; 		dc.w $100
(1) 2320/    12D0 :                     
(1) 2321/    12D0 :                     ; ====================================================================
(1) 2322/    12D0 :                     ; ----------------------------------------------------------------
(1) 2323/    12D0 :                     ; VDP Sprites
(1) 2324/    12D0 :                     ; ----------------------------------------------------------------
(1) 2325/    12D0 :                     
(1) 2326/    12D0 :                     ; --------------------------------------------------------
(1) 2327/    12D0 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2328/    12D0 :                     ;
(1) 2329/    12D0 :                     ; Sets or Makes a VDP Sprite piece
(1) 2330/    12D0 :                     ;
(1) 2331/    12D0 :                     ; Input:
(1) 2332/    12D0 :                     ; a0   | Slot (0-80)
(1) 2333/    12D0 :                     ; d0.w | X pos
(1) 2334/    12D0 :                     ; d1.w | Y pos
(1) 2335/    12D0 :                     ; d2.w | VRAM
(1) 2336/    12D0 :                     ; d3.w | Size
(1) 2337/    12D0 :                     ;
(1) 2338/    12D0 :                     ; Returns:
(1) 2339/    12D0 :                     ; bcc | OK
(1) 2340/    12D0 :                     ; bcs | Ran out of slots (not sprites)
(1) 2341/    12D0 :                     ; --------------------------------------------------------
(1) 2342/    12D0 :                     
(1) 2343/    12D0 :                     Video_SetSpr:
(1) 2344/    12D0 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2345/    12D4 : 2E08                		move.l	a0,d7
(1) 2346/    12D6 : 7C00                		moveq	#0,d6
(1) 2347/    12D8 : 6020                		bra	vidMdSpr_MkSpr
(1) 2348/    12DA :                     Video_MakeSpr:
(1) 2349/    12DA : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2350/    12DE : 7E00                		moveq	#0,d7
(1) 2351/    12E0 : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1) 2352/    12E4 : 7C4F                		moveq	#80-1,d6
(1) 2353/    12E6 :                     .chk_free:
(1) 2354/    12E6 : 0816 0007           		btst	#7,(a6)
(1) 2355/    12EA : 670C                		beq.s	.mk_spr
(1) 2356/    12EC : 5247                		addq.w	#1,d7
(1) 2357/    12EE : DCFC 0008           		adda	#8,a6
(1) 2358/    12F2 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2359/    12F6 : 605C                		bra.s	vidMd_CError
(1) 2360/    12F8 :                     .mk_spr:
(1) 2361/    12F8 : 7C40                		moveq	#$40,d6
(1) 2362/    12FA :                     vidMdSpr_MkSpr:
(1) 2363/    12FA : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2364/    1300 : BE7C 0050           		cmp.w	#80,d7
(1) 2365/    1304 : 6C4E                		bge.s	vidMd_CError
(1) 2366/    1306 : E74F                		lsl.w	#3,d7
(1) 2367/    1308 : 0687 FFFF C9C0      		addi.l	#RAM_SprPzList,d7
(1) 2368/    130E : 2C47                		move.l	d7,a6
(1) 2369/    1310 : 4846                		swap	d6
(1) 2370/    1312 : 3E01                		move.w	d1,d7			; Y pos
(1) 2371/    1314 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2372/    1318 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2373/    131E : 6704                		beq.s	.dont_add
(1) 2374/    1320 : 0647 0080           		addi.w	#$80,d7
(1) 2375/    1324 :                     .dont_add:
(1) 2376/    1324 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2377/    1328 : 3C03                		move.w	d3,d6
(1) 2378/    132A : 0246 000F           		andi.w	#%1111,d6
(1) 2379/    132E : E14E                		lsl.w	#8,d6
(1) 2380/    1330 : E54E                		lsl.w	#2,d6
(1) 2381/    1332 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2382/    1334 : 4846                		swap	d6
(1) 2383/    1336 : E14E                		lsl.w	#8,d6
(1) 2384/    1338 : 8E7C 8000           		or.w	#$8000,d7
(1) 2385/    133C : 8E46                		or.w	d6,d7
(1) 2386/    133E : 3CC7                		move.w	d7,(a6)+
(1) 2387/    1340 : 3E00                		move.w	d0,d7
(1) 2388/    1342 : 0647 0080           		addi.w	#$80,d7
(1) 2389/    1346 : 3CC7                		move.w	d7,(a6)+
(1) 2390/    1348 : 3CC2                		move.w	d2,(a6)+
(1) 2391/    134A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2392/    134E : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2393/    1352 : 4E75                		rts
(1) 2394/    1354 :                     ; Carry error
(1) 2395/    1354 :                     vidMd_CError:
(1) 2396/    1354 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2397/    1358 : 003C 0001           		or	#1,ccr			; Return Error
(1) 2398/    135C :                     vidMd_CFreeze:
(1) 2399/    135C : 4E75                		rts
(1) 2400/    135E :                     
(1) 2401/    135E :                     ; --------------------------------------------------------
(1) 2402/    135E :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2403/    135E :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2404/    135E :                     ;
(1) 2405/    135E :                     ; Sets or Makes a VDP Sprite with map data
(1) 2406/    135E :                     ;
(1) 2407/    135E :                     ; Input:
(1) 2408/    135E :                     ; a0   | Slot (0-80)
(1) 2409/    135E :                     ; a1   | Map data
(1) 2410/    135E :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2411/    135E :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2412/    135E :                     ; d0.w | X position
(1) 2413/    135E :                     ; d1.w | Y position
(1) 2414/    135E :                     ; d2.w | VRAM output location
(1) 2415/    135E :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2416/    135E :                     ;        cell vram is ignored.
(1) 2417/    135E :                     ; d3.w | Frame number
(1) 2418/    135E :                     ;
(1) 2419/    135E :                     ; Returns:
(1) 2420/    135E :                     ; bcc | OK
(1) 2421/    135E :                     ; bcs | Ran out of slots (not sprites)
(1) 2422/    135E :                     ; --------------------------------------------------------
(1) 2423/    135E :                     
(1) 2424/    135E :                     Video_SetSprMap_DMA:
(1) 2425/    135E : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2426/    1362 : 6104                		bsr	Video_SetSprMap
(1) 2427/    1364 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2428/    1366 : 6012                		bra	vid_MkDmaNext
(1) 2429/    1368 :                     Video_SetSprMap:
(1) 2430/    1368 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2431/    136C : 2E08                		move.l	a0,d7
(1) 2432/    136E : 7C00                		moveq	#0,d6
(1) 2433/    1370 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2434/    1372 :                     Video_MakeSprMap_DMA:
(1) 2435/    1372 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2436/    1376 : 6112                		bsr	Video_MakeSprMap
(1) 2437/    1378 : 650A                		bcs.s	vid_MkDmaCarry
(1) 2438/    137A :                     vid_MkDmaNext:
(1) 2439/    137A : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2440/    137C : 224B                		move.l	a3,a1
(1) 2441/    137E : 3003                		move.w	d3,d0
(1) 2442/    1380 : 3202                		move.w	d2,d1
(1) 2443/    1382 : 6160                		bsr	vid_MkMapDma
(1) 2444/    1384 :                     vid_MkDmaCarry:
(1) 2445/    1384 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2446/    1388 : 4E75                		rts
(1) 2447/    138A :                     
(1) 2448/    138A :                     Video_MakeSprMap:
(1) 2449/    138A : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2450/    138E : 7E00                		moveq	#0,d7
(1) 2451/    1390 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1) 2452/    1394 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2453/    1396 :                     .chk_free:
(1) 2454/    1396 : 4A16                		tst.b	(a6)
(1) 2455/    1398 : 670C                		beq.s	.mk_spr
(1) 2456/    139A : 5247                		addq.w	#1,d7
(1) 2457/    139C : DCFC 0010           		adda	#$10,a6
(1) 2458/    13A0 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2459/    13A4 : 60AE                		bra	vidMd_CError
(1) 2460/    13A6 :                     .mk_spr:
(1) 2461/    13A6 : 7C40                		moveq	#$40,d6
(1) 2462/    13A8 :                     vidMdSpr_MkSprMap:
(1) 2463/    13A8 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2464/    13AE : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2465/    13B2 : 6CA0                		bge	vidMd_CError
(1) 2466/    13B4 : E98F                		lsl.l	#4,d7
(1) 2467/    13B6 : 0687 FFFF C840      		addi.l	#RAM_SprMapList,d7
(1) 2468/    13BC : 2C47                		move.l	d7,a6
(1) 2469/    13BE : 2E09                		move.l	a1,d7
(1) 2470/    13C0 : 8C7C 0080           		or.w	#$80,d6
(1) 2471/    13C4 : 4846                		swap	d6
(1) 2472/    13C6 : E18E                		lsl.l	#8,d6
(1) 2473/    13C8 : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2474/    13CE : 8E86                		or.l	d6,d7
(1) 2475/    13D0 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2476/    13D2 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2477/    13D4 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2478/    13D6 : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2479/    13D8 : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2480/    13DA : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2481/    13DE : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2482/    13E2 : 4E75                		rts
(1) 2483/    13E4 :                     
(1) 2484/    13E4 :                     ; --------------------------------------------------------
(1) 2485/    13E4 :                     ; Input:
(1) 2486/    13E4 :                     ; a0   | DMA map data
(1) 2487/    13E4 :                     ; a1   | Graphics data
(1) 2488/    13E4 :                     ; d0.w | Current frame in DMA list
(1) 2489/    13E4 :                     ; d1.w | VRAM position
(1) 2490/    13E4 :                     ;
(1) 2491/    13E4 :                     ; USES:
(1) 2492/    13E4 :                     ; a6
(1) 2493/    13E4 :                     vid_MkMapDma:
(1) 2494/    13E4 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2495/    13E8 : 7800                		moveq	#0,d4
(1) 2496/    13EA : 0240 00FF           		andi.w	#$FF,d0
(1) 2497/    13EE : D040                 		add.w	d0,d0
(1) 2498/    13F0 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2499/    13F4 : D0C4                 		adda	d4,a0
(1) 2500/    13F6 : 3818                 		move.w	(a0)+,d4
(1) 2501/    13F8 : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2502/    13FA : 6B32                 		bmi.s	.no_dma
(1) 2503/    13FC : 5344                 		subq.w	#1,d4
(1) 2504/    13FE : 0241 07FF           		andi.w	#$07FF,d1
(1) 2505/    1402 : EB49                		lsl.w	#5,d1
(1) 2506/    1404 :                     .next_pz:
(1) 2507/    1404 : 4844                		swap	d4
(1) 2508/    1406 : 3818                		move.w	(a0)+,d4
(1) 2509/    1408 : 3404                		move.w	d4,d2
(1) 2510/    140A : EE4A                		lsr.w	#7,d2
(1) 2511/    140C : 0242 01E0           		andi.w	#$1E0,d2
(1) 2512/    1410 : D47C 0020           		add.w	#$20,d2
(1) 2513/    1414 : 7000                		moveq	#0,d0
(1) 2514/    1416 : 3004                		move.w	d4,d0
(1) 2515/    1418 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2516/    141C : EB48                		lsl.w	#5,d0
(1) 2517/    141E : D089                		add.l	a1,d0
(1) 2518/    1420 : 6100 F72A           		bsr	Video_MakeDmaEntry
(1) 2519/    1424 : D242                		add.w	d2,d1
(1) 2520/    1426 : 4844                		swap	d4
(1) 2521/    1428 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2522/    142C : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2523/    142E :                     .no_dma:
(1) 2524/    142E : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2525/    1432 : 4E75                		rts
(1) 2526/    1434 :                     
(1) 2527/    1434 :                     ; ====================================================================
(1) 2528/    1434 :                     ; ----------------------------------------------------------------
(1) 2529/    1434 :                     ; Video routines for SEGA CD
(1) 2530/    1434 :                     ; ----------------------------------------------------------------
(1) 2531/    1434 :                     
(1) 3047/    1434 :                     
(1) 3048/    1434 :                     ; ====================================================================
(1) 3049/    1434 :                     ; ----------------------------------------------------------------
(1) 3050/    1434 :                     ; Video routines for 32X
(1) 3051/    1434 :                     ; ----------------------------------------------------------------
(1) 3052/    1434 :                     
(1) 3785/    1434 :                     
     195/    1434 :                     		include	"system/md/system.asm"
(1)    1/    1434 :                     ; ===========================================================================
(1)    2/    1434 :                     ; ----------------------------------------------------------------
(1)    3/    1434 :                     ; Genesis system routines
(1)    4/    1434 :                     ;
(1)    5/    1434 :                     ; including SCD, 32X and PICO.
(1)    6/    1434 :                     ; ----------------------------------------------------------------
(1)    7/    1434 :                     
(1)    8/    1434 :                     ; ====================================================================
(1)    9/    1434 :                     ; --------------------------------------------------------
(1)   10/    1434 :                     ; Settings
(1)   11/    1434 :                     ; --------------------------------------------------------
(1)   12/    1434 :                     
(1)   13/    1434 : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/    1434 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/    1434 :                     
(1)   16/    1434 :                     ; ===================================================================
(1)   17/    1434 :                     ; --------------------------------------------------------
(1)   18/    1434 :                     ; Variables
(1)   19/    1434 :                     ; --------------------------------------------------------
(1)   20/    1434 :                     
(1)   21/    1434 :                     ; ------------------------------------------------
(1)   22/    1434 :                     ; Controller buffer data
(1)   23/    1434 :                     ;
(1)   24/    1434 :                     ; MUST call System_Input during VBlank
(1)   25/    1434 :                     ; ------------------------------------------------
(1)   26/    1434 :                     
(1)   27/    1434 :                     ; ------------------------------------------------
(1)   28/    1434 :                     ; pad_id
(1)   29/    1434 :                     ;
(1)   30/    1434 :                     ; JoyID_MD:
(1)   31/    1434 :                     ; Read pad_ver separately to check if controller
(1)   32/    1434 :                     ; is 3button(0) or 6button(1)
(1)   33/    1434 :                     ; ------------------------------------------------
(1)   34/    1434 :                     
(1)   35/    1434 : =$3                  JoyID_Mouse	equ $03
(1)   36/    1434 : =$D                  JoyID_MD	equ $0D
(1)   37/    1434 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/    1434 :                     
(1)   39/    1434 :                     ; ------------------------------------------------
(1)   40/    1434 :                     ; Genesis controller
(1)   41/    1434 :                     ;
(1)   42/    1434 :                     ; Read these as WORD
(1)   43/    1434 :                     ; ------------------------------------------------
(1)   44/    1434 :                     
(1)   45/    1434 :                     ; on_hold, on_press
(1)   46/    1434 : =$1                  JoyUp		equ $0001
(1)   47/    1434 : =$2                  JoyDown		equ $0002
(1)   48/    1434 : =$4                  JoyLeft		equ $0004
(1)   49/    1434 : =$8                  JoyRight	equ $0008
(1)   50/    1434 : =$10                 JoyB		equ $0010
(1)   51/    1434 : =$20                 JoyC		equ $0020
(1)   52/    1434 : =$40                 JoyA		equ $0040
(1)   53/    1434 : =$80                 JoyStart	equ $0080
(1)   54/    1434 : =$100                JoyZ		equ $0100
(1)   55/    1434 : =$200                JoyY		equ $0200
(1)   56/    1434 : =$400                JoyX		equ $0400
(1)   57/    1434 : =$800                JoyMode		equ $0800
(1)   58/    1434 : =$0                  bitJoyUp	equ 0
(1)   59/    1434 : =$1                  bitJoyDown	equ 1
(1)   60/    1434 : =$2                  bitJoyLeft	equ 2
(1)   61/    1434 : =$3                  bitJoyRight	equ 3
(1)   62/    1434 : =$4                  bitJoyB		equ 4
(1)   63/    1434 : =$5                  bitJoyC		equ 5
(1)   64/    1434 : =$6                  bitJoyA		equ 6
(1)   65/    1434 : =$7                  bitJoyStart	equ 7
(1)   66/    1434 : =$8                  bitJoyZ		equ 8
(1)   67/    1434 : =$9                  bitJoyY		equ 9
(1)   68/    1434 : =$A                  bitJoyX		equ 10
(1)   69/    1434 : =$B                  bitJoyMode	equ 11
(1)   70/    1434 :                     
(1)   71/    1434 :                     ; ------------------------------------------------
(1)   72/    1434 :                     ; Mega Mouse ONLY
(1)   73/    1434 :                     ;
(1)   74/    1434 :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/    1434 :                     ; NOT screen position.
(1)   76/    1434 :                     ; ------------------------------------------------
(1)   77/    1434 :                     
(1)   78/    1434 : =$1                  ClickR		equ $0001
(1)   79/    1434 : =$2                  ClickL		equ $0002
(1)   80/    1434 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/    1434 : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/    1434 : =$0                  bitClickL	equ 0
(1)   83/    1434 : =$1                  bitClickR	equ 1
(1)   84/    1434 : =$2                  bitClickM	equ 2
(1)   85/    1434 : =$3                  bitClickS	equ 3
(1)   86/    1434 :                     
(1)   87/    1434 :                     ; ------------------------------------------------
(1)   88/    1434 :                     ; Sega PICO
(1)   89/    1434 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/    1434 :                     ; For reading the pen position use
(1)   91/    1434 :                     ; mouse_x and mouse_y
(1)   92/    1434 :                     ; ------------------------------------------------
(1)   93/    1434 :                     
(1)   94/    1434 : =$10                 JoyRED		equ $0010
(1)   95/    1434 : =$80                 JoyPEN		equ $0080
(1)   96/    1434 : =$4                  bitJoyRED	equ 4
(1)   97/    1434 : =$7                  bitJoyPEN	equ 7
(1)   98/    1434 :                     
(1)   99/    1434 :                     ; ====================================================================
(1)  100/    1434 :                     ; ----------------------------------------------------------------
(1)  101/    1434 :                     ; Structs
(1)  102/    1434 :                     ; ----------------------------------------------------------------
(1)  103/    1434 :                     
(1)  104/    1434 :                     ; ------------------------------------------------
(1)  105/    1434 :                     ; RAM_InputData
(1)  106/    1434 :                     
(1)  107/    1434 :                     ; *** MANUAL VARIABLES ***
(1)  108/    1434 : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/    1434 : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/    1434 : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/    1434 : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/    1434 : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/    1434 : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/    1434 : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/    1434 : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/    1434 : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/    1434 : =$10                 sizeof_input		equ $10
(1)  118/    1434 :                     
(1)  119/    1434 :                     ; ------------------------------------------------
(1)  120/    1434 :                     ; RAM_Objects
(1)  121/    1434 :                     ;
(1)  122/    1434 :                     ; Size must end as even
(1)  123/    1434 :                     ; ------------------------------------------------
(1)  124/    1434 :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; len			ds.l 0
(1)  148/    1434 : =$68                 			endstruct
(1)  149/    1434 :                     
(1)  150/    1434 :                     ; ====================================================================
(1)  151/    1434 :                     ; ----------------------------------------------------------------
(1)  152/    1434 :                     ; RAM section
(1)  153/    1434 :                     ; ----------------------------------------------------------------
(1)  154/    1434 :                     
(1)  155/    1434 : (MACRO)              			memory RAM_MdSystem
(1)  155/    1434 : =$1434               GLBL_LASTPC     := *
(1)  155/    1434 :                                     dephase
(1)  155/FFFFFFFFFFFFD7F8 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFD7F8 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFD8F8 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFD938 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFE978 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFE97C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFE980 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFE986 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFE98C :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFE992 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFE994 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFE996 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFE998 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFE99A :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)  169/    25DC :                     .here:          dephase
(1)  169/    25DC :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/    1434 :                                     phase GLBL_LASTPC
(1)  170/    1434 :                     
(1)  171/    1434 :                     ; ====================================================================
(1)  172/    1434 :                     ; ----------------------------------------------------------------
(1)  173/    1434 :                     ; Label aliases
(1)  174/    1434 :                     ; ----------------------------------------------------------------
(1)  175/    1434 :                     
(1)  176/    1434 : =$FFFFFFFFFFFFD8F8   Controller_1		equ RAM_InputData
(1)  177/    1434 : =$FFFFFFFFFFFFD908   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/    1434 :                     
(1)  179/    1434 :                     ; ====================================================================
(1)  180/    1434 :                     ; --------------------------------------------------------
(1)  181/    1434 :                     ; Init System
(1)  182/    1434 :                     ; 
(1)  183/    1434 :                     ; Uses:
(1)  184/    1434 :                     ; a0-a2,d0-d1
(1)  185/    1434 :                     ; --------------------------------------------------------
(1)  186/    1434 :                     
(1)  187/    1434 :                     System_Init:
(1)  188/    1434 : 007C 0700           		or.w	#$0700,sr
(1)  200/    1438 : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/    143C : 31C0 E980            		move.w	d0,(RAM_VBlankJump).w
(1)  202/    1440 : 31C0 E986           		move.w	d0,(RAM_HBlankJump).w
(1)  203/    1444 : 31C0 E98C           		move.w	d0,(RAM_ExternalJump).w
(1)  204/    1448 : 203C 0000 159C      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/    144E : 223C 0000 159E      		move.l	#HInt_Default,d1
(1)  206/    1454 : 243C 0000 15A0      		move.l	#ExtInt_Default,d2
(1)  207/    145A : 6100 0360           		bsr	System_SetIntJumps
(1)  208/    145E : 41F8 D8F8           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/    1462 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/    1466 : 7000                		moveq	#0,d0
(1)  211/    1468 :                     .clrinput:
(1)  212/    1468 : 30C0                		move.w	d0,(a0)+
(1)  213/    146A : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/    146E : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/    1472 : 4E75                		rts
(1)  216/    1474 :                     
(1)  217/    1474 :                     ; ====================================================================
(1)  218/    1474 :                     ; --------------------------------------------------------
(1)  219/    1474 :                     ; System_Render
(1)  220/    1474 :                     ;
(1)  221/    1474 :                     ; This will:
(1)  222/    1474 :                     ; - Drop a frame if we got late on VBlank
(1)  223/    1474 :                     ; - Process Palette fading buffers
(1)  224/    1474 :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/    1474 :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/    1474 :                     ; - Check the sound driver for any changes/requests
(1)  227/    1474 :                     ;   from Z80 (Sound_Update, several times)
(1)  228/    1474 :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/    1474 :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/    1474 :                     ;
(1)  231/    1474 :                     ; During VBlank:
(1)  232/    1474 :                     ; - Read the Input data, (System_Input)
(1)  233/    1474 :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/    1474 :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/    1474 :                     ;   (Video_Render)
(1)  236/    1474 :                     ;
(1)  237/    1474 :                     ; Notes:
(1)  238/    1474 :                     ; - If VDP Display is disabled all of this
(1)  239/    1474 :                     ;   will be skipped.
(1)  240/    1474 :                     ; --------------------------------------------------------
(1)  241/    1474 :                     
(1)  242/    1474 :                     System_Render:
(1)  243/    1474 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/    1478 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/    147C : 671A                		beq	.forgot_disp
(1)  246/    147E : 6100 F8F6           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/    1482 :                     .wait_early:
(1)  248/    1482 : 616C                		bsr	Sound_Update			; Update sound on wait
(1)  249/    1484 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/    148A : 0807 0003           		btst	#bitVBlk,d7
(1)  251/    148E : 66F2                		bne.s	.wait_early
(1)  252/    1490 :                     	; ----------------------------------------
(1)  253/    1490 :                     	; 32X/CD32X
(1)  286/    1490 :                     ; ----------------------------------------
(1)  287/    1490 : 6108                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/    1492 :                     ; ----------------------------------------
(1)  294/    1492 :                     .from_late:
(1)  302/    1492 : 52B8 D7D8           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/    1496 : 6158                		bsr	Sound_Update
(1)  304/    1498 :                     .forgot_disp:
(1)  305/    1498 : 4E75                		rts
(1)  306/    149A :                     ; ----------------------------------------
(1)  307/    149A :                     ; Wait until beam reaches VBlank
(1)  308/    149A :                     ; ----------------------------------------
(1)  309/    149A :                     
(1)  310/    149A : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/    149C : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/    14A2 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/    14A6 : 67F2                		beq.s	.wait_vblank
(1)  314/    14A8 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/    14AA : 6000 EFC2           		bra	Video_Render			; Render VDP Visuals
(1)  316/    14AE :                     
(1)  317/    14AE :                     ; ====================================================================
(1)  318/    14AE :                     ; --------------------------------------------------------
(1)  319/    14AE :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/    14AE :                     ; from ROM or RAM
(1)  321/    14AE :                     ;
(1)  322/    14AE :                     ; Call these labels BEFORE and AFTER your
(1)  323/    14AE :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/    14AE :                     ; FILL or COPY.
(1)  325/    14AE :                     ;
(1)  326/    14AE :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/    14AE :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/    14AE :                     ; GONNA USE TO STACK.
(1)  329/    14AE :                     ; --------------------------------------------------------
(1)  330/    14AE :                     
(1)  331/    14AE :                     ; --------------------------------------------------------
(1)  332/    14AE :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/    14AE :                     System_DmaEnter_ROM:
(1)  334/    14AE : 6138                		bsr	System_DmaEnter_RAM
(1)  342/    14B0 : 4E75                		rts
(1)  343/    14B2 :                     
(1)  344/    14B2 :                     System_DmaExit_ROM:
(1)  352/    14B2 : 6038                		bra	System_DmaExit_RAM
(1)  353/    14B4 :                     
(1)  354/    14B4 :                     ; ------------------------------------------------
(1)  355/    14B4 :                     
(1)  356/    14B4 :                     sys_MarsSlvCmd:
(1)  357/    14B4 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/    14BA : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/    14BC : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/    14C2 : 8E06                		or.b	d6,d7
(1)  361/    14C4 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/    14C8 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/    14CE : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
             14D4 : 5103             
(1)  364/    14D6 : 4E71                		nop
(1)  365/    14D8 : 4E71                		nop
(1)  366/    14DA :                     .wait_exit:
(1)  367/    14DA : 4E71                		nop
(1)  368/    14DC : 4E71                		nop
(1)  369/    14DE : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/    14E4 : 66F4                		bne.s	.wait_exit
(1)  371/    14E6 : 4E75                		rts
(1)  372/    14E8 :                     
(1)  373/    14E8 :                     ; --------------------------------------------------------
(1)  374/    14E8 :                     ; *** EXTERNAL JUMPS ***
(1)  375/    14E8 :                     ; --------------------------------------------------------
(1)  376/    14E8 :                     
(1)  377/    14E8 :                     System_DmaEnter_RAM:
(1)  378/    14E8 : 6000 EE04           		bra	gemaDmaPause
(1)  379/    14EC :                     System_DmaExit_RAM:
(1)  380/    14EC : 6000 EE02           		bra	gemaDmaResume
(1)  381/    14F0 :                     
(1)  382/    14F0 :                     ; ====================================================================
(1)  383/    14F0 :                     ; --------------------------------------------------------
(1)  384/    14F0 :                     ; Update sound/sycronize with the Z80
(1)  385/    14F0 :                     ; --------------------------------------------------------
(1)  386/    14F0 :                     
(1)  387/    14F0 :                     Sound_Update:
(1)  388/    14F0 : 6000 ED98           		bra	gemaUpdate
(1)  389/    14F4 :                     
(1)  390/    14F4 :                     ; ====================================================================
(1)  391/    14F4 :                     ; --------------------------------------------------------
(1)  392/    14F4 :                     ; Init sound driver
(1)  393/    14F4 :                     ; --------------------------------------------------------
(1)  394/    14F4 :                     
(1)  395/    14F4 :                     Sound_Init:
(1)  396/    14F4 : 6000 ED82           		bra	gemaInit
(1)  397/    14F8 :                     
(1)  398/    14F8 :                     ; ====================================================================
(1)  399/    14F8 :                     ; --------------------------------------------------------
(1)  400/    14F8 :                     ; System_Input
(1)  401/    14F8 :                     ;
(1)  402/    14F8 :                     ; Reads data from the Controller ports
(1)  403/    14F8 :                     ;
(1)  404/    14F8 :                     ; Call this during VBlank only once per frame,
(1)  405/    14F8 :                     ; System_Render already calls this.
(1)  406/    14F8 :                     ;
(1)  407/    14F8 :                     ; Uses:
(1)  408/    14F8 :                     ; d5-d7,a5-a6
(1)  409/    14F8 :                     ; --------------------------------------------------------
(1)  410/    14F8 :                     
(1)  411/    14F8 :                     ; ----------------------------------------
(1)  412/    14F8 :                     ; PICO input is hard-coded to
(1)  413/    14F8 :                     ; Controller_1
(1)  414/    14F8 :                     ;
(1)  415/    14F8 :                     ; on_hold/on_press:
(1)  416/    14F8 :                     ; %P00BRLDU
(1)  417/    14F8 :                     ; UDLR - Arrows
(1)  418/    14F8 :                     ;    B - BIG button red (JoyB)
(1)  419/    14F8 :                     ;    P - Pen press/click (JoyStart)
(1)  420/    14F8 :                     ;
(1)  421/    14F8 :                     ; mouse_x/mouse_y:
(1)  422/    14F8 :                     ; Pen X/Y position
(1)  423/    14F8 :                     ; ----------------------------------------
(1)  424/    14F8 :                     
(1)  425/    14F8 :                     System_Input:
(1)  427/    14F8 : 4DF8 D8F8           		lea	(RAM_InputData).w,a6
(1)  428/    14FC : 4BF9 0080 0003      		lea	($800003).l,a5
(1)  429/    1502 : 7E00                		moveq	#0,d7
(1)  430/    1504 : 1E15                		move.b	(a5),d7			; $800003: %P00BRLDU
(1)  431/    1506 : 0A47 00FF           		eori.w	#$FF,d7
(1)  432/    150A : 3C07                		move.w	d7,d6
(1)  433/    150C : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  434/    1510 : BB47                		eor.w	d5,d7
(1)  435/    1512 : CE45                		and.w	d5,d7
(1)  436/    1514 : 3D47 0006           		move.w	d7,on_release(a6)
(1)  437/    1518 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  438/    151C : 0A45 00FF           		eori.w	#$FF,d5
(1)  439/    1520 : CA46                		and.w	d6,d5
(1)  440/    1522 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  441/    1526 : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  442/    152A : 1E2D 0002           		move.b	2(a5),d7
(1)  443/    152E : E14F                		lsl.w	#8,d7
(1)  444/    1530 : 1E2D 0004           		move.b	4(a5),d7
(1)  445/    1534 : 9E7C 003C           		sub.w	#$3C,d7
(1)  446/    1538 : 6A02                		bpl.s	.x_valid	 	; Failsafe negative X
(1)  447/    153A : 4247                		clr.w	d7
(1)  448/    153C :                     .x_valid:
(1)  449/    153C : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  450/    1540 :                     	; $0000-$00EF - Tablet
(1)  451/    1540 :                     	; $0100-$01EF - Storyware
(1)  452/    1540 : 7E00                		moveq	#0,d7
(1)  453/    1542 : 1C2D 0006           		move.b	6(a5),d6
(1)  454/    1546 : E14E                		lsl.w	#8,d6
(1)  455/    1548 : 1C2D 0008           		move.b	8(a5),d6
(1)  456/    154C : 0446 01FC           		subi.w	#$1FC,d6
(1)  457/    1550 : 6B02                		bmi.s	.bad_y
(1)  458/    1552 : 3E06                		move.w	d6,d7
(1)  459/    1554 :                     .bad_y:
(1)  460/    1554 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  461/    1558 : 1C2D 000A           		move.b	10(a5),d6
(1)  462/    155C : 7E00                		moveq	#0,d7
(1)  463/    155E : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  464/    1560 :                     .page_it:
(1)  465/    1560 : E24E                		lsr.w	#1,d6
(1)  466/    1562 : 6402                		bcc.s	.no_bit
(1)  467/    1564 : 5247                		addq.w	#1,d7
(1)  468/    1566 :                     .no_bit:
(1)  469/    1566 : 51CD FFF8           		dbf	d5,.page_it
(1)  470/    156A : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  683/    156E :                     
(1)  684/    156E :                     ; ============================================================
(1)  685/    156E :                     ; --------------------------------------------------------
(1)  686/    156E :                     ; System_SramInit
(1)  687/    156E :                     ;
(1)  688/    156E :                     ; Enable SRAM/BRAM support
(1)  689/    156E :                     ;
(1)  690/    156E :                     ; Input:
(1)  691/    156E :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/    156E :                     ;      dc.b "SAVE_NAME__",0
(1)  693/    156E :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/    156E :                     ;                            ; protection)
(1)  695/    156E :                     ;      dc.w flags:
(1)  696/    156E :                     ;            0 | Normal
(1)  697/    156E :                     ;           -1 | Save protection
(1)  698/    156E :                     ;
(1)  699/    156E :                     ;
(1)  700/    156E :                     ; Notes:
(1)  701/    156E :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/    156E :                     ;   your changes, then call System_SramSave to
(1)  703/    156E :                     ;   save it into SRAM/BRAM.
(1)  704/    156E :                     ;
(1)  705/    156E :                     ; CD/CD32X ONLY:
(1)  706/    156E :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/    156E :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/    156E :                     ;   OVERWRITE without warning any other save.
(1)  709/    156E :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/    156E :                     ;   PCM samples
(1)  711/    156E :                     ; --------------------------------------------------------
(1)  712/    156E :                     
(1)  713/    156E :                     System_SramInit:
(1)  715/    156E : 4E71                		nop						; Pico can't use save data
(1)  782/    1570 :                     .cant_use:
(1)  783/    1570 : 6006                		bra	System_SramLoad
(1)  784/    1572 :                     .already_set:
(1)  785/    1572 : 4E75                		rts
(1)  786/    1574 :                     
(1)  787/    1574 :                     ; --------------------------------------------------------
(1)  788/    1574 :                     ; System_SramSave
(1)  789/    1574 :                     ;
(1)  790/    1574 :                     ; Returns:
(1)  791/    1574 :                     ; bcc | Save OK
(1)  792/    1574 :                     ; bcs | Save failed
(1)  793/    1574 :                     ; --------------------------------------------------------
(1)  794/    1574 :                     
(1)  795/    1574 :                     System_SramSave:
(1)  797/    1574 : 4E71                		nop			; Pico can't use save data
(1)  861/    1576 : 4E75                		rts
(1)  862/    1578 :                     
(1)  863/    1578 :                     ; --------------------------------------------------------
(1)  864/    1578 :                     ; System_SramLoad
(1)  865/    1578 :                     ;
(1)  866/    1578 :                     ; Returns:
(1)  867/    1578 :                     ; bcc | Save OK
(1)  868/    1578 :                     ; bcs | Save not found
(1)  869/    1578 :                     ; --------------------------------------------------------
(1)  870/    1578 :                     
(1)  871/    1578 :                     System_SramLoad:
(1)  873/    1578 : 4E71                		nop			; Pico can't use save data
(1)  934/    157A : 4E75                		rts
(1)  935/    157C :                     
(1)  936/    157C :                     ; ============================================================
(1)  937/    157C :                     ; --------------------------------------------------------
(1)  938/    157C :                     ; System_Default
(1)  939/    157C :                     ;
(1)  940/    157C :                     ; Initializes current screen mode
(1)  941/    157C :                     ;
(1)  942/    157C :                     ; Uses:
(1)  943/    157C :                     ; ALL
(1)  944/    157C :                     ; --------------------------------------------------------
(1)  945/    157C :                     
(1)  946/    157C :                     System_Default:
(1)  947/    157C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/    1580 : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/    1584 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/    1588 : 7C00                		moveq	#0,d6
(1)  951/    158A :                     .clr_loop:
(1)  952/    158A : 1CC6                		move.b	d6,(a6)+
(1)  953/    158C : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/    1590 : 6100 F1D2           		bsr	Video_Clear
(1)  955/    1594 : 6100 EE8A           		bsr	Video_Default
(1)  956/    1598 : 6000 02E6           		bra	Object_Init			; Reset all objects
(1)  957/    159C :                     
(1)  958/    159C :                     ; ====================================================================
(1)  959/    159C :                     ; ----------------------------------------------------------------
(1)  960/    159C :                     ; Default interrupts
(1)  961/    159C :                     ; ----------------------------------------------------------------
(1)  962/    159C :                     
(1)  963/    159C :                     ; --------------------------------------------------------
(1)  964/    159C :                     ; VBlank
(1)  965/    159C :                     ; --------------------------------------------------------
(1)  966/    159C :                     
(1)  967/    159C :                     VInt_Default:
(1)  968/    159C :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/    159C :                     ; 		bsr	System_Input
(1)  970/    159C :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/    159C :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/    159C : 4E73                		rte
(1)  973/    159E :                     
(1)  974/    159E :                     ; --------------------------------------------------------
(1)  975/    159E :                     ; HBlank
(1)  976/    159E :                     ; --------------------------------------------------------
(1)  977/    159E :                     
(1)  978/    159E :                     HInt_Default:
(1)  979/    159E : 4E73                		rte
(1)  980/    15A0 :                     
(1)  981/    15A0 :                     ; --------------------------------------------------------
(1)  982/    15A0 :                     ; External interrupt
(1)  983/    15A0 :                     ; --------------------------------------------------------
(1)  984/    15A0 :                     
(1)  985/    15A0 :                     ExtInt_Default:
(1)  986/    15A0 : 4E73                		rte
(1)  987/    15A2 :                     
(1)  988/    15A2 :                     ; ====================================================================
(1)  989/    15A2 :                     ; ------------------------------------------------------------
(1)  990/    15A2 :                     ; Subroutines
(1)  991/    15A2 :                     ; ------------------------------------------------------------
(1)  992/    15A2 :                     
(1)  993/    15A2 :                     ; --------------------------------------------------------
(1)  994/    15A2 :                     ; System_Random, System_Random_Seed
(1)  995/    15A2 :                     ;
(1)  996/    15A2 :                     ; Generate random value
(1)  997/    15A2 :                     ;
(1)  998/    15A2 :                     ; Input:
(1)  999/    15A2 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/    15A2 :                     ;
(1) 1001/    15A2 :                     ; Returns:
(1) 1002/    15A2 :                     ; d0.l | Result value
(1) 1003/    15A2 :                     ; --------------------------------------------------------
(1) 1004/    15A2 :                     
(1) 1005/    15A2 :                     System_Random_Seed:
(1) 1006/    15A2 : 2F04                		move.l	d4,-(sp)
(1) 1007/    15A4 : 2800                		move.l	d0,d4
(1) 1008/    15A6 : 6114                		bsr	sysRnd_MkValue
(1) 1009/    15A8 : 281F                		move.l	(sp)+,d4
(1) 1010/    15AA : 4E75                		rts
(1) 1011/    15AC :                     System_Random:
(1) 1012/    15AC : 2F04                		move.l	d4,-(sp)
(1) 1013/    15AE : 2838 E97C           		move.l	(RAM_SysRandom).w,d4
(1) 1014/    15B2 : 6108                		bsr	sysRnd_MkValue
(1) 1015/    15B4 : 21C4 E97C           		move.l	d4,(RAM_SysRandom).w
(1) 1016/    15B8 : 281F                		move.l	(sp)+,d4
(1) 1017/    15BA : 4E75                		rts
(1) 1018/    15BC :                     sysRnd_MkValue:
(1) 1019/    15BC : 4A84                		tst.l	d4
(1) 1020/    15BE : 660E                		bne.s	.has_seed
(1) 1021/    15C0 : 2838 D7D8           		move.l	(RAM_FrameCount).w,d4
(1) 1022/    15C4 : E1BC                		rol.l	d0,d4
(1) 1023/    15C6 : E2BC                		ror.l	d1,d4
(1) 1024/    15C8 : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/    15CE :                     .has_seed:
(1) 1026/    15CE : 2004                		move.l	d4,d0
(1) 1027/    15D0 : E484                		asr.l	#2,d4
(1) 1028/    15D2 : D880                		add.l	d0,d4
(1) 1029/    15D4 : E79C                		rol.l	#3,d4
(1) 1030/    15D6 : D880                		add.l	d0,d4
(1) 1031/    15D8 : 3004                		move.w	d4,d0
(1) 1032/    15DA : 4844                		swap	d4
(1) 1033/    15DC : D044                		add.w	d4,d0
(1) 1034/    15DE : 3800                		move.w	d0,d4
(1) 1035/    15E0 : E0BC                		ror.l	d0,d4
(1) 1036/    15E2 : 4844                		swap	d4
(1) 1037/    15E4 : 4E75                		rts
(1) 1038/    15E6 :                     
(1) 1039/    15E6 :                     ; --------------------------------------------------------
(1) 1040/    15E6 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/    15E6 :                     ;
(1) 1042/    15E6 :                     ; Pick a random number using a maximum value,
(1) 1043/    15E6 :                     ; uses System_Random
(1) 1044/    15E6 :                     ;
(1) 1045/    15E6 :                     ; Input:
(1) 1046/    15E6 :                     ; d0.l | Maximum number to use + 1
(1) 1047/    15E6 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/    15E6 :                     ;
(1) 1049/    15E6 :                     ; Returns:
(1) 1050/    15E6 :                     ; d0.w | Output value
(1) 1051/    15E6 :                     ; --------------------------------------------------------
(1) 1052/    15E6 :                     
(1) 1053/    15E6 :                     System_DiceRoll_Seed:
(1) 1054/    15E6 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/    15EA : 2A00                		move.l	d0,d5
(1) 1056/    15EC : 2801                		move.l	d1,d4
(1) 1057/    15EE : 61B2                		bsr	System_Random_Seed
(1) 1058/    15F0 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/    15F6 : C0C5                		mulu.w	d5,d0
(1) 1060/    15F8 : 4840                		swap	d0
(1) 1061/    15FA : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/    1600 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/    1604 : 4E75                		rts
(1) 1064/    1606 :                     
(1) 1065/    1606 :                     System_DiceRoll:
(1) 1066/    1606 : 2F04                		move.l	d4,-(sp)
(1) 1067/    1608 : 2800                		move.l	d0,d4
(1) 1068/    160A : 61A0                		bsr	System_Random
(1) 1069/    160C : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/    1612 : C0C4                		mulu.w	d4,d0
(1) 1071/    1614 : 4840                		swap	d0
(1) 1072/    1616 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/    161C : 281F                		move.l	(sp)+,d4
(1) 1074/    161E : 4E75                		rts
(1) 1075/    1620 :                     
(1) 1076/    1620 :                     ; --------------------------------------------------------
(1) 1077/    1620 :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/    1620 :                     ;
(1) 1079/    1620 :                     ; Get Sine or Cosine value
(1) 1080/    1620 :                     ;
(1) 1081/    1620 :                     ; Input:
(1) 1082/    1620 :                     ; d0.w | Tan value: 0-511
(1) 1083/    1620 :                     ;
(1) 1084/    1620 :                     ; Returns:
(1) 1085/    1620 :                     ; d1.w | Result
(1) 1086/    1620 :                     ; --------------------------------------------------------
(1) 1087/    1620 :                     
(1) 1088/    1620 :                     System_SineWave_Cos:
(1) 1089/    1620 : 2F07                		move.l	d7,-(sp)
(1) 1090/    1622 : 3E00                		move.w	d0,d7
(1) 1091/    1624 : 0647 0080           		addi.w  #$80,d7
(1) 1092/    1628 : 6004                		bra	sys_SineWave
(1) 1093/    162A :                     System_SineWave:
(1) 1094/    162A : 2F07                		move.l	d7,-(sp)
(1) 1095/    162C : 3E00                		move.w	d0,d7
(1) 1096/    162E :                     sys_SineWave:
(1) 1097/    162E : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/    1632 : 3207                		move.w	d7,d1
(1) 1099/    1634 : 0807 0007           		btst	#7,d7
(1) 1100/    1638 : 6702                		beq.s	.loc_7EFA
(1) 1101/    163A : 4641                		not.w	d1
(1) 1102/    163C :                     .loc_7EFA:
(1) 1103/    163C : 0241 007F           		andi.w  #$7F,d1
(1) 1104/    1640 : D241                		add.w	d1,d1
(1) 1105/    1642 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/    1646 : 0807 0008           		btst    #8,d7
(1) 1107/    164A : 6702                		beq.s   .loc_7F0C
(1) 1108/    164C : 4441                		neg.w   d1
(1) 1109/    164E :                     .loc_7F0C:
(1) 1110/    164E : 48C1                		ext.l	d1
(1) 1111/    1650 : 2E1F                		move.l (sp)+,d7
(1) 1112/    1652 : 4E75                		rts
(1) 1113/    1654 :                     
(1) 1114/    1654 :                     .sine_data:
(1) 1115/    1654 :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/    1754 :                     		align 2
(1) 1117/    1754 :                     
(1) 1118/    1754 :                     ; --------------------------------------------------------
(1) 1119/    1754 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/    1754 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/    1754 :                     ;
(1) 1122/    1754 :                     ; Increment/Decrement BCD value
(1) 1123/    1754 :                     ; for Scores, Lives, and such.
(1) 1124/    1754 :                     ;
(1) 1125/    1754 :                     ; Input:
(1) 1126/    1754 :                     ; d0.? | BCD value input
(1) 1127/    1754 :                     ; d1.l | Increment/Decrement by
(1) 1128/    1754 :                     ;
(1) 1129/    1754 :                     ; Returns:
(1) 1130/    1754 :                     ; d0.? | BCD value output
(1) 1131/    1754 :                     ; --------------------------------------------------------
(1) 1132/    1754 :                     
(1) 1133/    1754 :                     ; TODO: An overflow check
(1) 1134/    1754 :                     
(1) 1135/    1754 :                     System_BCD_SubB:
(1) 1136/    1754 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/    175A : 6006                		bra.s	System_BCD_SubL
(1) 1138/    175C :                     System_BCD_SubW:
(1) 1139/    175C : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/    1762 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/    1762 :                     System_BCD_SubL:
(1) 1142/    1762 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/    1766 : 613C                		bsr	sysBCD_SpOut
(1) 1144/    1768 : 023C 0000           		and	#0,ccr
(1) 1145/    176C : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/    176E : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/    1770 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/    1772 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/    1774 : 2016                		move.l	(a6),d0
(1) 1150/    1776 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/    177A : 4E75                		rts
(1) 1152/    177C :                     System_BCD_AddB:
(1) 1153/    177C : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/    1782 : 6006                		bra.s	System_BCD_AddL
(1) 1155/    1784 :                     System_BCD_AddW:
(1) 1156/    1784 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/    178A :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/    178A :                     System_BCD_AddL:
(1) 1159/    178A : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/    178E : 6114                		bsr	sysBCD_SpOut
(1) 1161/    1790 : 023C 0000           		and	#0,ccr
(1) 1162/    1794 : CD0D                		abcd	-(a5),-(a6)
(1) 1163/    1796 : CD0D                		abcd	-(a5),-(a6)
(1) 1164/    1798 : CD0D                		abcd	-(a5),-(a6)
(1) 1165/    179A : CD0D                		abcd	-(a5),-(a6)
(1) 1166/    179C : 2016                		move.l	(a6),d0
(1) 1167/    179E : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/    17A2 : 4E75                		rts
(1) 1169/    17A4 :                     sysBCD_SpOut:
(1) 1170/    17A4 : 598F                		subq.l	#4,sp
(1) 1171/    17A6 : 2C4F                		move.l	sp,a6
(1) 1172/    17A8 : 598F                		subq.l	#4,sp
(1) 1173/    17AA : 2A4F                		move.l	sp,a5
(1) 1174/    17AC : 2C80                		move.l	d0,(a6)
(1) 1175/    17AE : 2A81                		move.l	d1,(a5)
(1) 1176/    17B0 : DCFC 0004           		adda	#4,a6
(1) 1177/    17B4 : DAFC 0004           		adda	#4,a5
(1) 1178/    17B8 : 508F                		addq.l	#8,sp
(1) 1179/    17BA : 4E75                		rts
(1) 1180/    17BC :                     
(1) 1181/    17BC :                     ; --------------------------------------------------------
(1) 1182/    17BC :                     ; System_SetIntJumps
(1) 1183/    17BC :                     ;
(1) 1184/    17BC :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/    17BC :                     ; generated by VDP
(1) 1186/    17BC :                     ;
(1) 1187/    17BC :                     ; Input:
(1) 1188/    17BC :                     ; d0.l | New VBlank location
(1) 1189/    17BC :                     ; d1.l | New HBlank location
(1) 1190/    17BC :                     ; d2.l | New External location
(1) 1191/    17BC :                     ;
(1) 1192/    17BC :                     ; Notes:
(1) 1193/    17BC :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/    17BC :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/    17BC :                     ; --------------------------------------------------------
(1) 1196/    17BC :                     
(1) 1197/    17BC :                     System_SetIntJumps:
(1) 1198/    17BC : 4A80                		tst.l	d0
(1) 1199/    17BE : 6704                		beq.s	.no_vint
(1) 1203/    17C0 : 21C0 E982            		move.l	d0,(RAM_VBlankJump+2).w
(1) 1205/    17C4 :                     .no_vint:
(1) 1206/    17C4 : 4A81                		tst.l	d1
(1) 1207/    17C6 : 6704                		beq.s	.no_hint
(1) 1211/    17C8 : 21C1 E988            		move.l	d1,(RAM_HBlankJump+2).w
(1) 1213/    17CC :                     .no_hint:
(1) 1214/    17CC : 4A82                		tst.l	d2
(1) 1215/    17CE : 6704                		beq.s	.no_exint
(1) 1219/    17D0 : 21C2 E98E            		move.l	d2,(RAM_ExternalJump+2).w
(1) 1221/    17D4 :                     .no_exint:
(1) 1222/    17D4 : 4E75                		rts
(1) 1223/    17D6 :                     
(1) 1224/    17D6 :                     ; ====================================================================
(1) 1225/    17D6 :                     ; ----------------------------------------------------------------
(1) 1226/    17D6 :                     ; SEGA CD / CD32X ONLY
(1) 1227/    17D6 :                     ; ----------------------------------------------------------------
(1) 1228/    17D6 :                     
(1) 1229/    17D6 :                     ; --------------------------------------------------------
(1) 1230/    17D6 :                     ; System_MdMcd_Interrupt
(1) 1231/    17D6 :                     ;
(1) 1232/    17D6 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/    17D6 :                     ; VBlank.
(1) 1234/    17D6 :                     ; --------------------------------------------------------
(1) 1235/    17D6 :                     
(1) 1236/    17D6 :                     System_MdMcd_Interrupt:
(1) 1237/    17D6 : 2F07                		move.l	d7,-(sp)
(1) 1238/    17D8 :                     ; .wait_first:
(1) 1239/    17D8 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/    17D8 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/    17D8 :                     ; 		andi.w	#$C0,d7
(1) 1242/    17D8 :                     ; 		cmpi.w	#$C0,d7
(1) 1243/    17D8 :                     ; 		beq.s	.wait_first
(1) 1244/    17D8 :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/    17D8 : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
             17DE : 2000             
(1) 1246/    17E0 : 2E1F                		move.l	(sp)+,d7
(1) 1247/    17E2 : 4E75                		rts
(1) 1248/    17E4 :                     
(1) 1249/    17E4 :                     ; --------------------------------------------------------
(1) 1250/    17E4 :                     ; System_MdMcd_SubWait
(1) 1251/    17E4 :                     ;
(1) 1252/    17E4 :                     ; Waits until Sub-CPU finishes.
(1) 1253/    17E4 :                     ;
(1) 1254/    17E4 :                     ; Uses:
(1) 1255/    17E4 :                     ; d7
(1) 1256/    17E4 :                     ; --------------------------------------------------------
(1) 1257/    17E4 :                     
(1) 1258/    17E4 :                     System_MdMcd_SubWait:
(1) 1263/    17E4 : 4E75                		rts
(1) 1264/    17E6 :                     
(1) 1265/    17E6 :                     ; --------------------------------------------------------
(1) 1266/    17E6 :                     ; System_MdMcd_SubEnter
(1) 1267/    17E6 :                     ;
(1) 1268/    17E6 :                     ; Waits until Sub-CPU starts.
(1) 1269/    17E6 :                     ;
(1) 1270/    17E6 :                     ; Uses:
(1) 1271/    17E6 :                     ; d7
(1) 1272/    17E6 :                     ; --------------------------------------------------------
(1) 1273/    17E6 :                     
(1) 1274/    17E6 :                     System_MdMcd_SubEnter:
(1) 1279/    17E6 : 4E75                		rts
(1) 1280/    17E8 :                     
(1) 1281/    17E8 :                     ; --------------------------------------------------------
(1) 1282/    17E8 :                     ; System_MdMcd_SubTask
(1) 1283/    17E8 :                     ;
(1) 1284/    17E8 :                     ; Request task to Sub-CPU
(1) 1285/    17E8 :                     ;
(1) 1286/    17E8 :                     ; Input:
(1) 1287/    17E8 :                     ; d0.b | Task number
(1) 1288/    17E8 :                     ;
(1) 1289/    17E8 :                     ; Uses:
(1) 1290/    17E8 :                     ; d7/a6
(1) 1291/    17E8 :                     ;
(1) 1292/    17E8 :                     ; Notes:
(1) 1293/    17E8 :                     ; This exits without waiting SUB to finish,
(1) 1294/    17E8 :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/    17E8 :                     ; --------------------------------------------------------
(1) 1296/    17E8 :                     
(1) 1297/    17E8 :                     System_MdMcd_SubTask:
(1) 1322/    17E8 : 4E75                		rts
(1) 1323/    17EA :                     
(1) 1324/    17EA :                     ; --------------------------------------------------------
(1) 1325/    17EA :                     ; System_MdMcd_WaitWRAM
(1) 1326/    17EA :                     ;
(1) 1327/    17EA :                     ; Wait for Word-RAM permission.
(1) 1328/    17EA :                     ; --------------------------------------------------------
(1) 1329/    17EA :                     
(1) 1330/    17EA :                     System_MdMcd_WaitWRAM:
(1) 1331/    17EA : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             17F0 : 2003             
(1) 1332/    17F2 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/    17F4 : 4E75                		rts
(1) 1334/    17F6 :                     
(1) 1335/    17F6 :                     ; --------------------------------------------------------
(1) 1336/    17F6 :                     ; System_MdMcd_CheckWRAM
(1) 1337/    17F6 :                     ;
(1) 1338/    17F6 :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/    17F6 :                     ;
(1) 1340/    17F6 :                     ; Returns:
(1) 1341/    17F6 :                     ; beq | Word-RAM is available
(1) 1342/    17F6 :                     ; bne | Word-RAM is locked
(1) 1343/    17F6 :                     ; --------------------------------------------------------
(1) 1344/    17F6 :                     
(1) 1345/    17F6 :                     System_MdMcd_CheckWRAM:
(1) 1346/    17F6 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             17FC : 2003             
(1) 1347/    17FE : 6706                		beq.s	.no_ret
(1) 1348/    1800 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/    1804 : 4E75                		rts
(1) 1350/    1806 :                     .no_ret:
(1) 1351/    1806 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/    180A : 4E75                		rts
(1) 1353/    180C :                     
(1) 1354/    180C :                     ; --------------------------------------------------------
(1) 1355/    180C :                     ; System_MdMcd_GiveWRAM
(1) 1356/    180C :                     ;
(1) 1357/    180C :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/    180C :                     ; --------------------------------------------------------
(1) 1359/    180C :                     
(1) 1360/    180C :                     System_MdMcd_GiveWRAM:
(1) 1361/    180C : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
             1812 : 2003             
(1) 1362/    1814 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/    1816 : 4E75                		rts
(1) 1364/    1818 :                     
(1) 1365/    1818 :                     ; --------------------------------------------------------
(1) 1366/    1818 :                     ; System_MdMcd_ReadFileRAM
(1) 1367/    1818 :                     ;
(1) 1368/    1818 :                     ; Read file from disc and transfer output the
(1) 1369/    1818 :                     ; data to a1, uses communication ports.
(1) 1370/    1818 :                     ;
(1) 1371/    1818 :                     ; Input:
(1) 1372/    1818 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/    1818 :                     ; a1   | Output location in RAM
(1) 1374/    1818 :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/    1818 :                     ;
(1) 1376/    1818 :                     ; Uses:
(1) 1377/    1818 :                     ; d7,a0-a1,a5-a6
(1) 1378/    1818 :                     ;
(1) 1379/    1818 :                     ; Notes:
(1) 1380/    1818 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/    1818 :                     ; --------------------------------------------------------
(1) 1382/    1818 :                     
(1) 1383/    1818 :                     System_MdMcd_RdFile_RAM:
(1) 1433/    1818 : 4E75                		rts
(1) 1434/    181A :                     
(1) 1435/    181A :                     ; --------------------------------------------------------
(1) 1436/    181A :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/    181A :                     ;
(1) 1438/    181A :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/    181A :                     ; waits on finish.
(1) 1440/    181A :                     ;
(1) 1441/    181A :                     ; Input:
(1) 1442/    181A :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/    181A :                     ; a1   | Output location
(1) 1444/    181A :                     ;
(1) 1445/    181A :                     ; Notes:
(1) 1446/    181A :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/    181A :                     ; --------------------------------------------------------
(1) 1448/    181A :                     
(1) 1449/    181A :                     System_MdMcd_RdFile_WRAM:
(1) 1473/    181A : 4E75                		rts
(1) 1474/    181C :                     
(1) 1475/    181C :                     ; --------------------------------------------------------
(1) 1476/    181C :                     ; System_MdMcd_CheckHome
(1) 1477/    181C :                     ;
(1) 1478/    181C :                     ; Checks if the player is holding A, B, C and
(1) 1479/    181C :                     ; then presses the START button.
(1) 1480/    181C :                     ;
(1) 1481/    181C :                     ; Returns:
(1) 1482/    181C :                     ; bcc | Combo input not pressed
(1) 1483/    181C :                     ; bcs | User did the combo presses
(1) 1484/    181C :                     ;
(1) 1485/    181C :                     ; Notes:
(1) 1486/    181C :                     ; If you call this from your Title Screen, carry
(1) 1487/    181C :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/    181C :                     ; for other modes change your Screen number to the
(1) 1489/    181C :                     ; Title Screen and return.
(1) 1490/    181C :                     ; --------------------------------------------------------
(1) 1491/    181C :                     
(1) 1492/    181C :                     System_MdMcd_CheckHome:
(1) 1493/    181C : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/    1820 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(1) 1495/    1824 : 3C38 D8FA           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/    1828 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/    182C : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/    1830 : 6610                		bne.s	.not_press
(1) 1499/    1832 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/    1836 : 670A                		beq.s	.not_press
(1) 1501/    1838 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/    183C : 003C 0001           		or	#1,ccr
(1) 1503/    1840 : 4E75                		rts
(1) 1504/    1842 :                     .not_press:
(1) 1505/    1842 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/    1846 : 023C 001E           		and	#%11110,ccr
(1) 1507/    184A : 4E75                		rts
(1) 1508/    184C :                     
(1) 1509/    184C :                     ; --------------------------------------------------------
(1) 1510/    184C :                     ; System_MdMcd_ExitShell
(1) 1511/    184C :                     ;
(1) 1512/    184C :                     ; Exits the entire program and goes to
(1) 1513/    184C :                     ; the BIOS/Shell.
(1) 1514/    184C :                     ;
(1) 1515/    184C :                     ; *** JUMP ONLY ***
(1) 1516/    184C :                     ; --------------------------------------------------------
(1) 1517/    184C :                     
(1) 1518/    184C :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/    184C :                     ; jmp $0284: Entry point
(1) 1520/    184C :                     ; jmp $0288: CD player
(1) 1521/    184C :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/    184C :                     
(1) 1523/    184C :                     System_MdMcd_ExitShell:
(1) 1532/    184C : 4E75                		rts
(1) 1534/    184E :                     
(1) 1535/    184E :                     ; ------------------------------------------------------------
(1) 1536/    184E :                     ; CDDA PLAYBACK
(1) 1537/    184E :                     ; ------------------------------------------------------------
(1) 1538/    184E :                     
(1) 1539/    184E :                     ; --------------------------------------------------------
(1) 1540/    184E :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/    184E :                     ;
(1) 1542/    184E :                     ; Play CDDA track, normal or looped.
(1) 1543/    184E :                     ;
(1) 1544/    184E :                     ; Input:
(1) 1545/    184E :                     ; d0.w | CD track number
(1) 1546/    184E :                     ;
(1) 1547/    184E :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/    184E :                     ; and $11 for looped
(1) 1549/    184E :                     ;
(1) 1550/    184E :                     ; Uses:
(1) 1551/    184E :                     ; d4
(1) 1552/    184E :                     ;
(1) 1553/    184E :                     ; Notes:
(1) 1554/    184E :                     ; Tracks $00, $01 and any negative values are
(1) 1555/    184E :                     ; ignored.
(1) 1556/    184E :                     ; --------------------------------------------------------
(1) 1557/    184E :                     
(1) 1558/    184E :                     System_MdMcd_CddaPlay:
(1) 1559/    184E : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/    1852 : 383C 0010           		move.w	#$0010,d4
(1) 1561/    1856 : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/    1858 :                     System_MdMcd_CddaPlayL:
(1) 1563/    1858 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/    185C : 383C 0011           		move.w	#$0011,d4
(1) 1565/    1860 :                     sysMdMcd_SetCdda:
(1) 1577/    1860 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/    1864 : 4E75                		rts
(1) 1579/    1866 :                     
(1) 1580/    1866 :                     ; --------------------------------------------------------
(1) 1581/    1866 :                     ; System_MdMcd_CdStop
(1) 1582/    1866 :                     ;
(1) 1583/    1866 :                     ; Stop CDDA track
(1) 1584/    1866 :                     ; --------------------------------------------------------
(1) 1585/    1866 :                     
(1) 1586/    1866 :                     System_MdMcd_CddaStop:
(1) 1593/    1866 : 4E75                		rts
(1) 1594/    1868 :                     
(1) 1595/    1868 :                     ; --------------------------------------------------------
(1) 1596/    1868 :                     ; System_MdMcd_CdFade
(1) 1597/    1868 :                     ;
(1) 1598/    1868 :                     ; Fade the CDDA Volume
(1) 1599/    1868 :                     ;
(1) 1600/    1868 :                     ; Input:
(1) 1601/    1868 :                     ; d0.w | Target volume:
(1) 1602/    1868 :                     ;        $000-$400 - Min to Max
(1) 1603/    1868 :                     ; d1.w | Fading speed:
(1) 1604/    1868 :                     ;        $001-$200 - Slow to Fast
(1) 1605/    1868 :                     ;             $400 - Set quick
(1) 1606/    1868 :                     ;
(1) 1607/    1868 :                     ; This calls Sub-Task $16
(1) 1608/    1868 :                     ; --------------------------------------------------------
(1) 1609/    1868 :                     
(1) 1610/    1868 :                     System_MdMcd_CddaFade:
(1) 1619/    1868 : 4E75                		rts
(1) 1620/    186A :                     
(1) 1621/    186A :                     ; --------------------------------------------------------
(1) 1622/    186A :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/    186A :                     ; --------------------------------------------------------
(1) 1624/    186A :                     
(1) 1625/    186A :                     def_SaveInfo:
(1) 1629/    186A : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
             1870 : 4344 5F5F 5F00    
(1) 1631/    1876 : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/    1878 : 0000                		dc.w 0
(1) 1633/    187A :                     		align 2
(1) 1634/    187A :                     
(1) 1635/    187A :                     ; ====================================================================
(1) 1636/    187A :                     ; ----------------------------------------------------------------
(1) 1637/    187A :                     ; 32X and CD32X ONLY
(1) 1638/    187A :                     ; ----------------------------------------------------------------
(1) 1639/    187A :                     
(1) 1640/    187A :                     ; --------------------------------------------------------
(1) 1641/    187A :                     ; System_MdMars_SendData
(1) 1642/    187A :                     ;
(1) 1643/    187A :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/    187A :                     ; using DREQ
(1) 1645/    187A :                     ;
(1) 1646/    187A :                     ; Input:
(1) 1647/    187A :                     ; a0   | Source data
(1) 1648/    187A :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/    187A :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/    187A :                     ;
(1) 1651/    187A :                     ; Returns:
(1) 1652/    187A :                     ; a1   | New output SDRAM location
(1) 1653/    187A :                     ;
(1) 1654/    187A :                     ; Uses:
(1) 1655/    187A :                     ; d0/a4-a5,d5-d7
(1) 1656/    187A :                     ;
(1) 1657/    187A :                     ; Notes:
(1) 1658/    187A :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/    187A :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/    187A :                     ; --------------------------------------------------------
(1) 1661/    187A :                     
(1) 1662/    187A :                     System_MdMars_SendData:
(1) 1687/    187A : 4E75                		rts
(1) 1688/    187C :                     
(1) 1689/    187C :                     ; ------------------------------------------------------------
(1) 1690/    187C :                     ; DREQ Genesis-to-32X code
(1) 1691/    187C :                     ; ------------------------------------------------------------
(1) 1692/    187C :                     
(1) 1763/    187C : 4E75                		rts
(1) 1764/    187E :                     
(1) 1765/    187E :                     ; ====================================================================
(1) 1766/    187E :                     ; ----------------------------------------------------------------
(1) 1767/    187E :                     ; SHARED for all
(1) 1768/    187E :                     ; ----------------------------------------------------------------
(1) 1769/    187E :                     
(1) 1770/    187E :                     ; --------------------------------------------------------
(1) 1771/    187E :                     ; System_SetDataBank
(1) 1772/    187E :                     ;
(1) 1773/    187E :                     ; Sets the data bank depending of the system
(1) 1774/    187E :                     ;
(1) 1775/    187E :                     ; Input:
(1) 1776/    187E :                     ; a0   | Pointer and filename:
(1) 1777/    187E :                     ;        dc.l bank_pointer
(1) 1778/    187E :                     ;        dc.b "FILENAME.BIN"
(1) 1779/    187E :                     ;
(1) 1780/    187E :                     ; Uses:
(1) 1781/    187E :                     ; a4-a5,d5-d7
(1) 1782/    187E :                     ;
(1) 1783/    187E :                     ; Notes:
(1) 1784/    187E :                     ; - ONLY call this if you have the opportunity to
(1) 1785/    187E :                     ;   do it.
(1) 1786/    187E :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/    187E :                     ;   to load from disc
(1) 1788/    187E :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/    187E :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/    187E :                     ; --------------------------------------------------------
(1) 1791/    187E :                     
(1) 1792/    187E :                     System_SetDataBank:
(1) 1809/    187E : 4E75                		rts
(1) 1810/    1880 :                     
(1) 1811/    1880 :                     ; ====================================================================
(1) 1812/    1880 :                     ; ----------------------------------------------------------------
(1) 1813/    1880 :                     ; Objects system
(1) 1814/    1880 :                     ; ----------------------------------------------------------------
(1) 1815/    1880 :                     
(1) 1816/    1880 :                     ; --------------------------------------------------------
(1) 1817/    1880 :                     ; Init/Clear Objects system
(1) 1818/    1880 :                     ; --------------------------------------------------------
(1) 1819/    1880 :                     
(1) 1820/    1880 :                     Object_Init:
(1) 1821/    1880 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1822/    1884 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/    1888 :                     .clr:
(1) 1824/    1888 : 421E                		clr.b	(a6)+
(1) 1825/    188A : 51CF FFFC           		dbf	d7,.clr
(1) 1826/    188E : 4E75                		rts
(1) 1827/    1890 :                     
(1) 1828/    1890 :                     ; --------------------------------------------------------
(1) 1829/    1890 :                     ; Process objects
(1) 1830/    1890 :                     ;
(1) 1831/    1890 :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/    1890 :                     ; --------------------------------------------------------
(1) 1833/    1890 :                     
(1) 1834/    1890 :                     Object_Run:
(1) 1835/    1890 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1836/    1894 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/    1898 :                     .next_one:
(1) 1838/    1898 : 2C16                		move.l	obj_code(a6),d6
(1) 1839/    189A : 6708                		beq.s	.no_code	; Free slot
(1) 1840/    189C : 2F07                		move.l	d7,-(sp)
(1) 1841/    189E : 2A46                		move.l	d6,a5
(1) 1842/    18A0 : 4E95                		jsr	(a5)
(1) 1843/    18A2 : 2E1F                		move.l	(sp)+,d7
(1) 1844/    18A4 :                     .no_code:
(1) 1845/    18A4 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/    18A8 : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/    18AC : 4E75                		rts
(1) 1848/    18AE :                     
(1) 1849/    18AE :                     ; --------------------------------------------------------
(1) 1850/    18AE :                     ; Object_Set, Object_Make
(1) 1851/    18AE :                     ;
(1) 1852/    18AE :                     ; Set a new object into a specific slot.
(1) 1853/    18AE :                     ;
(1) 1854/    18AE :                     ; Input:
(1) 1855/    18AE :                     ; d0.l | Object code pointer
(1) 1856/    18AE :                     ;        If 0: DELETE the object including it's memory
(1) 1857/    18AE :                     ; d1.w | Object slot
(1) 1858/    18AE :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1859/    18AE :                     ; d2.b | Object sub-type (obj_subid)
(1) 1860/    18AE :                     ;
(1) 1861/    18AE :                     ; Returns:
(1) 1862/    18AE :                     ; bcc | Found free slot
(1) 1863/    18AE :                     ; bcs | Ran-out of object slots
(1) 1864/    18AE :                     ;
(1) 1865/    18AE :                     ; Notes:
(1) 1866/    18AE :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/    18AE :                     ; but it will contain the remains of d2 when you
(1) 1868/    18AE :                     ; called this.
(1) 1869/    18AE :                     ; --------------------------------------------------------
(1) 1870/    18AE :                     
(1) 1871/    18AE :                     Object_Set:
(1) 1872/    18AE : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/    18B2 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1874/    18B6 : 7E00                		moveq	#0,d7
(1) 1875/    18B8 : 3E01                		move.w	d1,d7
(1) 1876/    18BA : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/    18BE : DCC7                		adda	d7,a6
(1) 1878/    18C0 : 602C                		bra.s	objSet_Go
(1) 1879/    18C2 :                     
(1) 1880/    18C2 :                     Object_Make:
(1) 1881/    18C2 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/    18C6 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1883/    18CA : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/    18CE : 7C00                		moveq	#0,d6
(1) 1885/    18D0 :                     .search:
(1) 1886/    18D0 : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/    18D4 : 6C0E                		bge.s	objSet_Error
(1) 1888/    18D6 : 4A96                		tst.l	obj_code(a6)
(1) 1889/    18D8 : 6714                		beq.s	objSet_Go
(1) 1890/    18DA : DCFC 0068           		adda	#obj_len,a6
(1) 1891/    18DE : 5246                		addq.w	#1,d6
(1) 1892/    18E0 : 51CF FFEE           		dbf	d7,.search
(1) 1893/    18E4 :                     objSet_Error:
(1) 1894/    18E4 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/    18E8 : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/    18EC : 4E75                		rts
(1) 1897/    18EE :                     
(1) 1898/    18EE :                     objSet_Go:
(1) 1899/    18EE : 4A80                		tst.l	d0
(1) 1900/    18F0 : 670A                		beq.s	.from_del
(1) 1901/    18F2 : 2E00                		move.l	d0,d7
(1) 1902/    18F4 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/    18F6 : 1D42 001D           		move.b	d2,obj_subid(a6)
(1) 1904/    18FA : 600C                		bra.s	.exit_this
(1) 1905/    18FC :                     .from_del:
(1) 1906/    18FC : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/    18FE : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/    1902 : 421D                .clr:		clr.b	(a5)+
(1) 1909/    1904 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/    1908 :                     .exit_this:
(1) 1911/    1908 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/    190C : 003C 0001           		or	#1,ccr
(1) 1913/    1910 : 4E75                		rts
(1) 1914/    1912 :                     
(1) 1915/    1912 :                     ; ====================================================================
(1) 1916/    1912 :                     ; --------------------------------------------------------
(1) 1917/    1912 :                     ; Object subroutines
(1) 1918/    1912 :                     ;
(1) 1919/    1912 :                     ; These can ONLY be called on the current object's code
(1) 1920/    1912 :                     ; --------------------------------------------------------
(1) 1921/    1912 :                     
(1) 1922/    1912 :                     ; --------------------------------------------------------
(1) 1923/    1912 :                     ; object_ResetVars
(1) 1924/    1912 :                     ;
(1) 1925/    1912 :                     ; Resets the current object's memory, call this
(1) 1926/    1912 :                     ; at very beginning of your object's init code
(1) 1927/    1912 :                     ;
(1) 1928/    1912 :                     ; Input:
(1) 1929/    1912 :                     ; a6 | This object
(1) 1930/    1912 :                     ; --------------------------------------------------------
(1) 1931/    1912 :                     
(1) 1932/    1912 :                     object_ResetVars:
(1) 1933/    1912 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/    1916 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/    191A : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/    191E : 7E00                		moveq	#0,d7
(1) 1937/    1920 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/    1922 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/    1926 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/    192A : 4E75                		rts
(1) 1941/    192C :                     
(1) 1942/    192C :                     ; --------------------------------------------------------
(1) 1943/    192C :                     ; object_ResetAnim
(1) 1944/    192C :                     ;
(1) 1945/    192C :                     ; Reset animation variables, call this BEFORE using
(1) 1946/    192C :                     ; object_Animate.
(1) 1947/    192C :                     ;
(1) 1948/    192C :                     ; Input:
(1) 1949/    192C :                     ; a6 | This object
(1) 1950/    192C :                     ; --------------------------------------------------------
(1) 1951/    192C :                     
(1) 1952/    192C :                     object_ResetAnim:
(1) 1953/    192C :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/    192C :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/    192C : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/    1932 : 4E75                		rts
(1) 1957/    1934 :                     
(1) 1958/    1934 :                     ; --------------------------------------------------------
(1) 1959/    1934 :                     ; object_Speed
(1) 1960/    1934 :                     ;
(1) 1961/    1934 :                     ; Moves the object using speed values set on
(1) 1962/    1934 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/    1934 :                     ;
(1) 1964/    1934 :                     ; Input:
(1) 1965/    1934 :                     ; a6 | This object
(1) 1966/    1934 :                     ; --------------------------------------------------------
(1) 1967/    1934 :                     
(1) 1968/    1934 :                     object_Speed:
(1) 1969/    1934 : 2F07                		move.l	d7,-(sp)
(1) 1970/    1936 : 7E00                		moveq	#0,d7
(1) 1971/    1938 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/    193C : 48C7                		ext.l	d7
(1) 1973/    193E : E187                		asl.l	#8,d7
(1) 1974/    1940 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/    1944 : 7E00                		moveq	#0,d7
(1) 1976/    1946 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/    194A : 48C7                		ext.l	d7
(1) 1978/    194C : E187                		asl.l	#8,d7
(1) 1979/    194E : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/    1952 : 7E00                		moveq	#0,d7
(1) 1981/    1954 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/    1958 : 48C7                		ext.l	d7
(1) 1983/    195A : E187                		asl.l	#8,d7
(1) 1984/    195C : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/    1960 : 2E1F                		move.l	(sp)+,d7
(1) 1986/    1962 : 4E75                		rts
(1) 1987/    1964 :                     
(1) 1988/    1964 :                     ; --------------------------------------------------------
(1) 1989/    1964 :                     ; object_Animate
(1) 1990/    1964 :                     ;
(1) 1991/    1964 :                     ; Animates the sprite with a animation script,
(1) 1992/    1964 :                     ; modifies obj_frame with the frame to use.
(1) 1993/    1964 :                     ;
(1) 1994/    1964 :                     ; Input:
(1) 1995/    1964 :                     ; a6 | This object
(1) 1996/    1964 :                     ; a0 | Animation data
(1) 1997/    1964 :                     ; --------------------------------------------------------
(1) 1998/    1964 :                     
(1) 1999/    1964 :                     ; anim_data:
(1) 2000/    1964 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/    1964 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/    1964 :                     ; 	;...
(1) 2003/    1964 :                     ;
(1) 2004/    1964 :                     ; .frame_num:
(1) 2005/    1964 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/    1964 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/    1964 :                     ; 	dc.w command			; End-of-data command
(1) 2008/    1964 :                     ;
(1) 2009/    1964 :                     ; commands:
(1) 2010/    1964 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/    1964 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/    1964 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/    1964 :                     
(1) 2014/    1964 :                     object_Animate:
(1) 2015/    1964 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/    1968 : 7E00                		moveq	#0,d7
(1) 2017/    196A : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/    196E : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/    1972 : 670E                 		beq.s	.sameThing
(1) 2020/    1974 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/    197A : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/    197E : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/    1982 :                     .sameThing:
(1) 2024/    1982 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/    1986 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/    198A : 6748                 		beq.s	.return
(1) 2027/    198C : DE47                 		add.w	d7,d7
(1) 2028/    198E : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/    1992 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/    1996 : 3E18                 		move.w	(a0)+,d7
(1) 2031/    1998 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/    199C : 670C                 		beq.s	.keepspd
(1) 2033/    199E : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/    19A4 : 6A2E                 		bpl.s	.return
(1) 2035/    19A6 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/    19AA :                     .keepspd:
(1) 2037/    19AA : 7C00                 		moveq	#0,d6
(1) 2038/    19AC : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/    19B0 : DE47                 		add.w	d7,d7
(1) 2040/    19B2 : 3C10                 		move.w	(a0),d6
(1) 2041/    19B4 : D0C7                 		adda	d7,a0
(1) 2042/    19B6 : 3A10                 		move.w	(a0),d5
(1) 2043/    19B8 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/    19BC : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/    19BE : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/    19C2 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/    19C4 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/    19C8 : 671A                 		beq.s	.goToFrame
(1) 2049/    19CA : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/    19CE : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/    19D4 :                     .return:
(1) 2052/    19D4 : 601C                 		bra.s	.exit_anim
(1) 2053/    19D6 :                     .noAnim:
(1) 2054/    19D6 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/    19DC : 3A06                 		move.w	d6,d5
(1) 2056/    19DE : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/    19E2 : 600E                		bra.s	.exit_anim
(1) 2058/    19E4 :                     .goToFrame:
(1) 2059/    19E4 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/    19E8 : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/    19EE :                     .lastFrame:
(1) 2062/    19EE : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/    19F2 :                     .exit_anim:
(1) 2064/    19F2 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/    19F6 : 4E75                		rts
(1) 2066/    19F8 :                     
(1) 2067/    19F8 :                     ; --------------------------------------------------------
(1) 2068/    19F8 :                     ; object_Touch
(1) 2069/    19F8 :                     ;
(1) 2070/    19F8 :                     ; Detects collision with another Object
(1) 2071/    19F8 :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/    19F8 :                     ;
(1) 2073/    19F8 :                     ; Input:
(1) 2074/    19F8 :                     ; a6   | This object
(1) 2075/    19F8 :                     ;
(1) 2076/    19F8 :                     ; Returns:
(1) 2077/    19F8 :                     ; d0.l | If Nothing: 0
(1) 2078/    19F8 :                     ;        If Found:   The target's RAM location
(1) 2079/    19F8 :                     ; --------------------------------------------------------
(1) 2080/    19F8 :                     
(1) 2081/    19F8 :                     object_Touch:
(1) 2082/    19F8 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/    19FC : 7000                		moveq	#0,d0
(1) 2084/    19FE : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/    1A02 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/    1A06 : 8C45                		or.w	d5,d6
(1) 2087/    1A08 : 671E                		beq	.exit_this
(1) 2088/    1A0A : 4BF8 D938           		lea	(RAM_Objects).w,a5
(1) 2089/    1A0E : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/    1A10 :                     .next:
(1) 2091/    1A10 : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/    1A12 : 670A                		beq.s	.skip
(1) 2093/    1A14 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/    1A16 : 6706                		beq.s	.skip
(1) 2095/    1A18 : 6114                		bsr.s	.check_this
(1) 2096/    1A1A : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/    1A1C : 660A                		bne.s	.exit_this
(1) 2098/    1A1E : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/    1A22 : 51CF FFEC           		dbf	d7,.next
(1) 2100/    1A26 : 7000                		moveq	#0,d0
(1) 2101/    1A28 :                     .exit_this:
(1) 2102/    1A28 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/    1A2C : 4E75                		rts
(1) 2104/    1A2E :                     
(1) 2105/    1A2E :                     ; main check
(1) 2106/    1A2E :                     .check_this:
(1) 2107/    1A2E : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/    1A30 :                     	; d6 - Y current top
(1) 2109/    1A30 :                     	; d5 - Y current bottom
(1) 2110/    1A30 :                     	; d4 - Y target top
(1) 2111/    1A30 :                     	; d3 - Y target bottom
(1) 2112/    1A30 :                     	; Check X
(1) 2113/    1A30 : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/    1A34 : 6700 00B4           		beq	.not_ytop
(1) 2115/    1A38 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/    1A3C : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/    1A3E : 3401                		move.w	d1,d2
(1) 2118/    1A40 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/    1A42 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/    1A46 :                     ; 		lsl.w	#3,d1
(1) 2121/    1A46 :                     ; 		lsl.w	#3,d2
(1) 2122/    1A46 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/    1A48 : 9C41                		sub.w	d1,d6
(1) 2124/    1A4A : DA42                		add.w	d2,d5
(1) 2125/    1A4C : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/    1A50 : 6700 0098           		beq	.not_ytop
(1) 2127/    1A54 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/    1A58 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/    1A5A : 3401                		move.w	d1,d2
(1) 2130/    1A5C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/    1A5E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/    1A62 :                     ; 		lsl.w	#3,d1
(1) 2133/    1A62 :                     ; 		lsl.w	#3,d2
(1) 2134/    1A62 : 5342                		subq.w	#1,d2
(1) 2135/    1A64 : 9841                		sub.w	d1,d4
(1) 2136/    1A66 : D642                		add.w	d2,d3
(1) 2137/    1A68 : B646                		cmp.w	d6,d3
(1) 2138/    1A6A : 6D7E                		blt	.not_ytop
(1) 2139/    1A6C : B845                		cmp.w	d5,d4
(1) 2140/    1A6E : 6C7A                		bge	.not_ytop
(1) 2141/    1A70 :                     
(1) 2142/    1A70 :                     	; Check Y
(1) 2143/    1A70 : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/    1A74 : 6774                		beq	.not_ytop
(1) 2145/    1A76 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/    1A7A : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/    1A7C : 3401                		move.w	d1,d2
(1) 2148/    1A7E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/    1A80 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/    1A84 :                     ; 		lsl.w	#3,d1
(1) 2151/    1A84 :                     ; 		lsl.w	#3,d2
(1) 2152/    1A84 : 5342                		subq.w	#1,d2
(1) 2153/    1A86 : 9C41                		sub.w	d1,d6
(1) 2154/    1A88 : DA42                		add.w	d2,d5
(1) 2155/    1A8A : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/    1A8E : 675A                		beq	.not_ytop
(1) 2157/    1A90 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/    1A94 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/    1A96 : 3401                		move.w	d1,d2
(1) 2160/    1A98 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/    1A9A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/    1A9E :                     ; 		lsl.w	#3,d1
(1) 2163/    1A9E :                     ; 		lsl.w	#3,d2
(1) 2164/    1A9E : 5342                		subq.w	#1,d2
(1) 2165/    1AA0 : 9841                		sub.w	d1,d4
(1) 2166/    1AA2 : D642                		add.w	d2,d3
(1) 2167/    1AA4 : B646                		cmp.w	d6,d3
(1) 2168/    1AA6 : 6D42                		blt.s	.not_ytop
(1) 2169/    1AA8 : B845                		cmp.w	d5,d4
(1) 2170/    1AAA : 6C3E                		bge.s	.not_ytop
(1) 2171/    1AAC :                     
(1) 2172/    1AAC :                     	; Special Z check
(1) 2173/    1AAC : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/    1AB0 : 6736                		beq.s	.set_ok
(1) 2175/    1AB2 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/    1AB6 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/    1AB8 : 3401                		move.w	d1,d2
(1) 2178/    1ABA : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/    1ABC : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/    1AC0 :                     ; 		lsl.w	#3,d1
(1) 2181/    1AC0 :                     ; 		lsl.w	#3,d2
(1) 2182/    1AC0 : 5342                		subq.w	#1,d2
(1) 2183/    1AC2 : 9C41                		sub.w	d1,d6
(1) 2184/    1AC4 : DA42                		add.w	d2,d5
(1) 2185/    1AC6 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/    1ACA : 671C                		beq.s	.set_ok
(1) 2187/    1ACC : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/    1AD0 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/    1AD2 : 3401                		move.w	d1,d2
(1) 2190/    1AD4 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/    1AD6 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/    1ADA :                     ; 		lsl.w	#3,d1
(1) 2193/    1ADA :                     ; 		lsl.w	#3,d2
(1) 2194/    1ADA : 5342                		subq.w	#1,d2
(1) 2195/    1ADC : 9841                		sub.w	d1,d4
(1) 2196/    1ADE : D642                		add.w	d2,d3
(1) 2197/    1AE0 : B646                		cmp.w	d6,d3
(1) 2198/    1AE2 : 6D06                		blt	.not_ytop
(1) 2199/    1AE4 : B845                		cmp.w	d5,d4
(1) 2200/    1AE6 : 6C02                		bge	.not_ytop
(1) 2201/    1AE8 :                     .set_ok:
(1) 2202/    1AE8 : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/    1AEA :                     .not_ytop:
(1) 2204/    1AEA : 4E75                		rts
(1) 2205/    1AEC :                     
(1) 2206/    1AEC :                     ; ============================================================
(1) 2207/    1AEC :                     ; --------------------------------------------------------
(1) 2208/    1AEC :                     ; object_GetSprInfo
(1) 2209/    1AEC :                     ;
(1) 2210/    1AEC :                     ; Call this before using
(1) 2211/    1AEC :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/    1AEC :                     ;
(1) 2213/    1AEC :                     ; Input:
(1) 2214/    1AEC :                     ; a6   | This object
(1) 2215/    1AEC :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/    1AEC :                     ;        - Set to 0 for 3D Sprites
(1) 2217/    1AEC :                     ; d1.w | Flags
(1) 2218/    1AEC :                     ;
(1) 2219/    1AEC :                     ; Output:
(1) 2220/    1AEC :                     ; d0.l | X and Y position
(1) 2221/    1AEC :                     ; d1.l | Flags and Z Position
(1) 2222/    1AEC :                     ; d4.w | Current frame
(1) 2223/    1AEC :                     ; --------------------------------------------------------
(1) 2224/    1AEC :                     
(1) 2225/    1AEC :                     object_MdMars_GetSprInfo:
(1) 2240/    1AEC : 4E75                		rts
(1) 2241/    1AEE :                     
     196/    1AEE :                     
     197/    1AEE :                     ; --------------------------------------------------------
     198/    1AEE :                     ; SCREEN MODE MAIN LOOP
     199/    1AEE :                     ;
     200/    1AEE :                     ;  MD/Pico: Direct ROM jump
     201/    1AEE :                     ; CD/CD32X: Reads file from DISC and
     202/    1AEE :                     ;           transfers code to RAM
     203/    1AEE :                     ;      32X: Code is stored on ROM but runs in
     204/    1AEE :                     ;           RAM to prevent bus-conflicts with the
     205/    1AEE :                     ;           SH2's view of ROM at CS1
     206/    1AEE :                     ;
     207/    1AEE :                     ; - Returning in your current screen code loops here
     208/    1AEE :                     ; - 32X/CD32X:
     209/    1AEE :                     ;   This will turn OFF the 32X's current video mode
     210/    1AEE :                     ; --------------------------------------------------------
     211/    1AEE :                     
     212/    1AEE :                     Md_ReadModes:
     213/    1AEE : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     221/    1AF2 : 7000                		moveq	#0,d0
     222/    1AF4 : 3038 E994           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     223/    1AF8 : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     224/    1AFC : E948                		lsl.w	#4,d0				; number*$10
     225/    1AFE : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0		; Read list
     226/    1B02 :                     	; SCD/CD32X
     246/    1B02 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0		; a0 - ROM location
     247/    1B06 : 4E90                		jsr	(a0)
     249/    1B08 : 60E4                		bra.s	Md_ReadModes			; Loop on rts
     250/    1B0A :                     
     251/    1B0A :                     ; ====================================================================
     252/    1B0A :                     ; ---------------------------------------------
     253/    1B0A :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     254/    1B0A :                     ; ---------------------------------------------
     255/    1B0A :                     
     256/    1B0A :                     .pick_mode:
     257/    1B0A :                     		include "game/screens.asm"
(1)    1/    1B0A :                     ; ============================================================
(1)    2/    1B0A :                     ; --------------------------------------------------------
(1)    3/    1B0A :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/    1B0A :                     ;
(1)    5/    1B0A :                     ; - Screen CODE includes: incl_code.asm
(1)    6/    1B0A :                     ;
(1)    7/    1B0A :                     ; - DATA Bank includes: incl_data.asm
(1)    8/    1B0A :                     ;
(1)    9/    1B0A :                     ; ** For CD/CD32X **
(1)   10/    1B0A :                     ;    Add your ISO file entries for both
(1)   11/    1B0A :                     ;    CODE and DATA in iso_files.asm
(1)   12/    1B0A :                     ; --------------------------------------------------------
(1)   13/    1B0A :                     
(1)   14/    1B0A :                     ; Entry:
(1)   15/    1B0A : 0000 3B10           		dc.l Md_Screen00	; ****
(1)   16/    1B0E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1B14 : 3030 2E42 494E    
(1)   17/    1B1A : 0000 3CBA           		dc.l Md_Screen01	; ****
(1)   18/    1B1E : 5343 5245 454E      		dc.b "SCREEN01.BIN"
             1B24 : 3031 2E42 494E    
(1)   19/    1B2A : 0000 4128           		dc.l Md_Screen02	; ****
(1)   20/    1B2E : 5343 5245 454E      		dc.b "SCREEN02.BIN"
             1B34 : 3032 2E42 494E    
(1)   21/    1B3A : 0000 5504           		dc.l Md_Screen03	; ****
(1)   22/    1B3E : 5343 5245 454E      		dc.b "SCREEN03.BIN"
             1B44 : 3033 2E42 494E    
(1)   23/    1B4A : 0000 5A7E           		dc.l Md_Screen04	; ****
(1)   24/    1B4E : 5343 5245 454E      		dc.b "SCREEN04.BIN"
             1B54 : 3034 2E42 494E    
(1)   25/    1B5A : 0000 3B10           		dc.l Md_Screen00	; ****
(1)   26/    1B5E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1B64 : 3030 2E42 494E    
(1)   27/    1B6A : 0000 3B10           		dc.l Md_Screen00	; ****
(1)   28/    1B6E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1B74 : 3030 2E42 494E    
(1)   29/    1B7A : 0000 5CC2           		dc.l Md_Screen07	; ****
(1)   30/    1B7E : 5343 5245 454E      		dc.b "SCREEN07.BIN"
             1B84 : 3037 2E42 494E    
(1)   31/    1B8A :                     
     258/    1B8A :                     
     259/    1B8A :                     ; ====================================================================
     260/    1B8A :                     
     267/    1B8A :                     
     268/    1B8A :                     Md_SysCode_e:
     269/    1B8A :                     		align 2
     270/    1B8A :                     
     271/    1B8A :                     ; ===========================================================================
     272/    1B8A :                     ; ----------------------------------------------------------------
     273/    1B8A :                     ; DATA section shared on both Cartridge or Disc
     274/    1B8A :                     ; ----------------------------------------------------------------
     275/    1B8A :                     
     276/    1B8A :                     ; --------------------------------------------------------
     277/    1B8A :                     ; CD/CD32X ISO header and files
     278/    1B8A :                     ; --------------------------------------------------------
     279/    1B8A :                     
     295/    1B8A :                     
     296/    1B8A :                     ; ===========================================================================
     297/    1B8A :                     ; --------------------------------------------------------
     298/    1B8A :                     ; Z80 driver include
     299/    1B8A :                     ;
     300/    1B8A :                     ; SCD/CD32X: Stored on DISC
     301/    1B8A :                     ; --------------------------------------------------------
     302/    1B8A :                     
     310/    1B8A :                     Z80_CODE:
     314/    1B8A :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/    1B8A :                     ; ===========================================================================
(1)    2/    1B8A :                     ; -------------------------------------------------------------------
(1)    3/    1B8A :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/    1B8A :                     ; -------------------------------------------------------------------
(1)    5/    1B8A :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =10H                 MAX_RCACH	equ 10h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 10h)
(1)   19/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   20/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   21/       0 : =0H                  DBUG_DAC	equ 0		; *DEBUG* Set to 1 to check the DAC playback quality
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; trk_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   36/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   37/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXES START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 : =0H                  chnl_Flags	equ 0	; Playback flags: %E0LRevin ** MUST STAY AT 0
(1)   70/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   71/       0 : =2H                  chnl_Note	equ 2	; IT Musical note or command
(1)   72/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   73/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   74/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   75/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   76/       0 : =7H                  chnl_Type	equ 7	; Impulse update bits
(1)   77/       0 :                     
(1)   78/       0 :                     
(1)   79/       0 :                     ; Table struct
(1)   80/       0 :                     
(1)   81/       0 : =0H                  ztbl_Link	equ 00h		; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h		; !! 00h-7Fh: Priority level or 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h		; Chip index (YM2612: direct KEY index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h		; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h		; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h		; Pitchbend add/sub
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h		; Current Volume: 00-max
(1)   88/       0 : =9H                  ztbl_EffBuff	equ 09h		; Effect buffer
(1)   89/       0 : =0AH                 ztbl_VarT0	equ 0Ah		; !! FM ins LSB or SCD PCM panning
(1)   90/       0 : =0BH                 ztbl_VarT1	equ 0Bh		; !! FM ins MSB
(1)   91/       0 : =0CH                 ztbl_FM_alfd	equ 0Ch		; !! copy of algorithm and feedback
(1)   92/       0 : =0DH                 ztbl_FM_pmam	equ 0Dh		; !! copy of PMS, AMS (panning ignored)
(1)   93/       0 : =0EH                 ztbl_FM_lfo	equ 0Eh		; !! copy of LFO
(1)   94/       0 : =0FH                 ztbl_FM_keys	equ 0Fh		; !! Current keys
(1)   95/       0 :                     
(1)   96/       0 :                     ; --------------------------------------------------------
(1)   97/       0 :                     ; Variables
(1)   98/       0 :                     ; --------------------------------------------------------
(1)   99/       0 :                     
(1)  100/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)  101/       0 : =0H                  zopcNop		equ 00h
(1)  102/       0 : =8H                  zopcEx		equ 08h
(1)  103/       0 : =0C9H                zopcRet		equ 0C9h
(1)  104/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  105/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  106/       0 :                     
(1)  107/       0 :                     ; PSG external control
(1)  108/       0 : =0H                  COM		equ 0
(1)  109/       0 : =4H                  LEV		equ 4
(1)  110/       0 : =8H                  ATK		equ 8
(1)  111/       0 : =0CH                 DKY		equ 12
(1)  112/       0 : =10H                 SLV		equ 16
(1)  113/       0 : =14H                 RRT		equ 20
(1)  114/       0 : =18H                 MODE		equ 24
(1)  115/       0 : =1CH                 DTL		equ 28
(1)  116/       0 : =20H                 DTH		equ 32
(1)  117/       0 : =24H                 ALV		equ 36
(1)  118/       0 : =28H                 FLG		equ 40
(1)  119/       0 : =2CH                 TMR		equ 44
(1)  120/       0 : =30H                 PVOL		equ 48
(1)  121/       0 : =34H                 PARP		equ 52
(1)  122/       0 : =38H                 PTMR		equ 56
(1)  123/       0 :                     
(1)  124/       0 :                     ; PWM control
(1)  125/       0 :                     ; PWCOM		equ 0
(1)  126/       0 :                     ; PWPTH_V	equ 8	; Volume | Pitch MSB (VVVVVVPPb)
(1)  127/       0 :                     ; PWPHL		equ 16	; Pitch LSB
(1)  128/       0 :                     ; PWOUTF	equ 24	; Output mode/bits | 32-bit address (%SlLRxiix) ii=$02 or $06
(1)  129/       0 :                     ; PWINSH	equ 32	; **
(1)  130/       0 :                     ; PWINSM	equ 40	; **
(1)  131/       0 :                     ; PWINSL	equ 48	; **
(1)  132/       0 :                     
(1)  133/       0 :                     ; ====================================================================
(1)  134/       0 :                     ; --------------------------------------------------------
(1)  135/       0 :                     ; Code starts here
(1)  136/       0 :                     ; --------------------------------------------------------
(1)  137/       0 :                     
(1)  138/       0 : F3                  		di			; Disable interrupts
(1)  139/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  140/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  141/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  142/       8 :                     
(1)  143/       8 :                     ; --------------------------------------------------------
(1)  144/       8 :                     ; RST 8 (dac_me)
(1)  145/       8 :                     ; *** self-modifiable code ***
(1)  146/       8 :                     ;
(1)  147/       8 :                     ; Writes wave data to DAC using data stored
(1)  148/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  149/       8 :                     ; instructions to keep the samplerate stable.
(1)  150/       8 :                     ;
(1)  151/       8 :                     ; Input (EXX):
(1)  152/       8 :                     ;  c - WAVE buffer MSB
(1)  153/       8 :                     ; de - Pitch (xx.00)
(1)  154/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Uses (EXX):
(1)  157/       8 :                     ; b
(1)  158/       8 :                     ;
(1)  159/       8 :                     ; Notes:
(1)  160/       8 :                     ; ONLY USE dac_on and dac_off to control
(1)  161/       8 :                     ; wave playback.
(1)  162/       8 :                     ;
(1)  163/       8 :                     ; call dac_on to enable wave playback, locks FM6
(1)  164/       8 :                     ; and
(1)  165/       8 :                     ; call dac_off to disable wave and unlock FM6.
(1)  166/       8 :                     ;
(1)  167/       8 :                     ; Samplerate is at 16000hz with minimal quality loss.
(1)  168/       8 :                     ; --------------------------------------------------------
(1)  169/       8 :                     
(1)  170/       8 :                     ; EXX set:
(1)  171/       8 :                     ; af - temporal
(1)  172/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  173/       8 :                     ; de - pitch increment
(1)  174/       8 :                     ; hl - wave buffer position 00.00h
(1)  175/       8 :                     ; 		org 8
(1)  176/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  177/       9 : 08                  		ex	af,af'		; Swap af
(1)  178/       A : 45                  		ld	b,l		; Save old hl buff
(1)  179/       B : 6C                  		ld	l,h		;
(1)  180/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  181/       D : 3E 2A               		ld	a,2Ah		;
(1)  182/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  183/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  184/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  185/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  186/      17 : 68                  		ld	l,b		;
(1)  187/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  188/      19 : 08                  		ex	af,af'		; Return af
(1)  189/      1A : D9                  		exx			; * return registers
(1)  190/      1B : C9                  		ret
(1)  191/      1C :                     
(1)  192/      1C :                     ; --------------------------------------------------------
(1)  193/      1C :                     ; 1Ch - Master tracklist pointer
(1)  194/      1C :                     gemaMstrListPos:
(1)  195/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  196/      1D : 00                  		db 0
(1)  197/      1E : 00                  		db 0
(1)  198/      1F : 00                  		db 0
(1)  199/      20 :                     
(1)  200/      20 :                     ; --------------------------------------------------------
(1)  201/      20 :                     ; RST 20h (dac_me)
(1)  202/      20 :                     ; *** self-modifiable code ***
(1)  203/      20 :                     ;
(1)  204/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  205/      20 :                     ; it playing.
(1)  206/      20 :                     ; --------------------------------------------------------
(1)  207/      20 :                     
(1)  208/      20 :                     ; 		org 20h
(1)  209/      20 : F5                  dac_fill:	push	af		; <-- Changes between PUSH AF(play) and RET(stop)
(1)  210/      21 : 3A E8 1B            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  211/      24 : D9                  		exx			; * swap regs
(1)  212/      25 : AC                  		xor	h		; Grab LSB.00
(1)  213/      26 : D9                  		exx			; * swap regs
(1)  214/      27 : E6 80               		and	80h		; Check if bit changed
(1)  215/      29 : C4 5D 12            		call	nz,dac_refill	; If yes, Call refill and update LSB block
(1)  216/      2C : F1                  		pop	af
(1)  217/      2D : C9                  		ret
(1)  218/      2E :                     
(1)  219/      2E :                     ; --------------------------------------------------------
(1)  220/      2E :                     ; 02Eh - User read/write values
(1)  221/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  222/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  223/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  224/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  225/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  226/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  227/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK PCM transfers.
(1)  228/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  229/      38 :                     
(1)  230/      38 :                     ; --------------------------------------------------------
(1)  231/      38 :                     ; Z80 Interrupt at 0038h
(1)  232/      38 :                     ; --------------------------------------------------------
(1)  233/      38 :                     
(1)  234/      38 :                     ; 		org 38h			; Align 38h
(1)  235/      38 : ED 73 FD 1B         		ld	(tickSpSet),sp	; Write TICK flag using current sp (xx1F, read as tickFlag+1)
(1)  236/      3C : F3                  		di			; Disable interrupt
(1)  237/      3D : C9                  		ret
(1)  238/      3E :                     
(1)  239/      3E :                     ; --------------------------------------------------------
(1)  240/      3E :                     ; 03Eh - More user settings
(1)  241/      3E : 00                  palMode		db 0			; 3Eh: PAL mode flag
(1)  242/      3F : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  243/      40 :                     
(1)  244/      40 :                     ; --------------------------------------------------------
(1)  245/      40 :                     ; 68K Read/Write area at 40h
(1)  246/      40 :                     ; --------------------------------------------------------
(1)  247/      40 :                     
(1)  248/      40 :                     ; 		org 40h
(1)  249/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  250/      50 :                     
(1)  251/      50 :                     ; --------------------------------------------------------
(1)  252/      50 :                     ; Initialize
(1)  253/      50 :                     ; --------------------------------------------------------
(1)  254/      50 :                     
(1)  255/      50 :                     z80_init:
(1)  256/      50 : CD 3B 0F            		call	gema_init		; Init values
(1)  257/      53 : FB                  		ei
(1)  258/      54 :                     
(1)  259/      54 :                     ; --------------------------------------------------------
(1)  260/      54 :                     ; MAIN LOOP
(1)  261/      54 :                     ; --------------------------------------------------------
(1)  262/      54 :                     
(1)  263/      54 :                     drv_loop:
(1)  264/      54 : CF                  		rst	8
(1)  265/      55 : CD A7 0F            		call	get_tick		; Check tick on VBlank
(1)  266/      58 : E7                  		rst	20h			; Refill wave here
(1)  267/      59 : CF                  		rst	8
(1)  268/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  269/      5C : 3A FF 1B            		ld	a,(tickCnt)		; Decrement tick counter
(1)  270/      5F : D6 01               		sub	1
(1)  271/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  272/      63 : 32 FF 1B            		ld	(tickCnt),a
(1)  273/      66 : CD 82 10            		call	chip_env		; Process PSG and YM
(1)  274/      69 : CD A7 0F            		call	get_tick		; Check for another tick
(1)  275/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  276/      6E :                     .noticks:
(1)  277/      6E : 3A FA 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  278/      71 : D6 01               		sub	1
(1)  279/      73 : 38 06               		jr	c,.nobeats
(1)  280/      75 : CF                  		rst	8
(1)  281/      76 : 32 FA 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  282/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  283/      7B :                     .nobeats:
(1)  284/      7B : CF                  		rst	8
(1)  285/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  286/      7D : B7                  		or	a
(1)  287/      7E : 28 14               		jr	z,.neither
(1)  288/      80 : 32 F6 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  289/      83 : CF                  		rst	8
(1)  290/      84 : CD A7 0F            		call	get_tick
(1)  291/      87 : CD 16 06            		call	set_chips		; Send changes to sound chips
(1)  292/      8A : CD A7 0F            		call	get_tick
(1)  293/      8D : CF                  		rst	8
(1)  294/      8E : CD 34 02            		call	upd_track		; Update track data
(1)  295/      91 : CD A7 0F            		call	get_tick
(1)  296/      94 :                     .neither:
(1)  297/      94 : CF                  		rst	8
(1)  301/      95 : CD A7 0F            		call	get_tick
(1)  302/      98 :                     .next_cmd:
(1)  303/      98 : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  304/      9B : 47                  		ld	b,a			; are in the same spot a == b
(1)  305/      9C : 3A 3F 00            		ld	a,(commZRead)
(1)  306/      9F : B8                  		cp	b			; If equal, loop back.
(1)  307/      A0 : 28 B2               		jr	z,drv_loop
(1)  308/      A2 : CF                  		rst	8
(1)  309/      A3 : CD BB 00            		call	.grab_arg		; Read staring flag -1
(1)  310/      A6 : FE FF               		cp	-1			; Got START -1?
(1)  311/      A8 : 20 AA               		jr	nz,drv_loop		; If not, end of commands
(1)  312/      AA : CD BB 00            		call	.grab_arg		; Read command number
(1)  313/      AD : 87                  		add	a,a			; ID * 2
(1)  314/      AE : 21 DA 00            		ld	hl,.list		; Index-jump...
(1)  315/      B1 : 16 00               		ld	d,0
(1)  316/      B3 : 5F                  		ld	e,a
(1)  317/      B4 : 19                  		add	hl,de
(1)  318/      B5 : 7E                  		ld	a,(hl)
(1)  319/      B6 : 23                  		inc	hl
(1)  320/      B7 : 66                  		ld	h,(hl)
(1)  321/      B8 : CF                  		rst	8
(1)  322/      B9 : 6F                  		ld	l,a
(1)  323/      BA : E9                  		jp	(hl)
(1)  324/      BB :                     
(1)  325/      BB :                     ; --------------------------------------------------------
(1)  326/      BB :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  327/      BB :                     ; --------------------------------------------------------
(1)  328/      BB :                     
(1)  329/      BB :                     .grab_arg:
(1)  330/      BB : D5                  		push	de
(1)  331/      BC : E5                  		push	hl
(1)  332/      BD :                     .getcbytel:
(1)  333/      BD : 3A 2E 00            		ld	a,(commZWrite)
(1)  334/      C0 : 57                  		ld	d,a
(1)  335/      C1 : CF                  		rst	8
(1)  336/      C2 : 3A 3F 00            		ld	a,(commZRead)
(1)  337/      C5 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  338/      C6 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  339/      C8 : 16 00               		ld	d,0
(1)  340/      CA : 5F                  		ld	e,a
(1)  341/      CB : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  342/      CE : 19                  		add	hl,de
(1)  343/      CF : CF                  		rst	8
(1)  344/      D0 : 3C                  		inc	a
(1)  345/      D1 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  346/      D3 : 32 3F 00            		ld	(commZRead),a
(1)  347/      D6 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  348/      D7 : E1                  		pop	hl
(1)  349/      D8 : D1                  		pop	de
(1)  350/      D9 : C9                  		ret
(1)  351/      DA :                     
(1)  352/      DA :                     ; --------------------------------------------------------
(1)  353/      DA :                     
(1)  354/      DA :                     .list:
(1)  355/      DA : EA 00               		dw .cmnd_0		; 00h - TESTING
(1)  356/      DC : ED 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  357/      DE : 06 01               		dw .cmnd_2		; 02h - Play by track number
(1)  358/      E0 : 40 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  359/      E2 : EA 00               		dw .cmnd_0		; 04h - **
(1)  360/      E4 : 7E 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  361/      E6 : B7 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  362/      E8 : F0 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  363/      EA :                     
(1)  364/      EA :                     ; --------------------------------------------------------
(1)  365/      EA :                     ; Command 00h
(1)  366/      EA :                     ;
(1)  367/      EA :                     ; Reserved for TESTING purposes.
(1)  368/      EA :                     ; --------------------------------------------------------
(1)  369/      EA :                     
(1)  370/      EA :                     .cmnd_0:
(1)  371/      EA : C3 98 00            		jp	.next_cmd
(1)  372/      ED :                     
(1)  373/      ED :                     ; --------------------------------------------------------
(1)  374/      ED :                     ; Command 01h:
(1)  375/      ED :                     ;
(1)  376/      ED :                     ; Set the Track MASTER-list.
(1)  377/      ED :                     ; --------------------------------------------------------
(1)  378/      ED :                     
(1)  379/      ED :                     .cmnd_1:
(1)  380/      ED : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  381/      F0 : CD BB 00            		call	.grab_arg		; $000000xx
(1)  382/      F3 : 77                  		ld	(hl),a
(1)  383/      F4 : 2B                  		dec	hl
(1)  384/      F5 : CD BB 00            		call	.grab_arg		; $0000xx00
(1)  385/      F8 : 77                  		ld	(hl),a
(1)  386/      F9 : 2B                  		dec	hl
(1)  387/      FA : CD BB 00            		call	.grab_arg		; $00xx0000
(1)  388/      FD : 77                  		ld	(hl),a
(1)  389/      FE : 2B                  		dec	hl
(1)  390/      FF : CD BB 00            		call	.grab_arg		; $xx000000 (filler)
(1)  391/     102 : 77                  		ld	(hl),a
(1)  392/     103 : C3 98 00            		jp	.next_cmd
(1)  393/     106 :                     
(1)  394/     106 :                     ; --------------------------------------------------------
(1)  395/     106 :                     ; Command 02h:
(1)  396/     106 :                     ;
(1)  397/     106 :                     ; Make new track by sequence number
(1)  398/     106 :                     ;
(1)  399/     106 :                     ; Arguments:
(1)  400/     106 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  401/     106 :                     ; --------------------------------------------------------
(1)  402/     106 :                     
(1)  403/     106 :                     .cmnd_2:
(1)  404/     106 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  405/     109 : 4F                  		ld	c,a			; copy as c
(1)  406/     10A : CD BB 00            		call	.grab_arg		; d2: Block from
(1)  407/     10D : 47                  		ld	b,a			; copy as b
(1)  408/     10E : CF                  		rst	8
(1)  409/     10F : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  410/     112 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  411/     116 : B7                  		or	a
(1)  412/     117 : FA 26 01            		jp	m,.srch_mode
(1)  413/     11A :                     ; 		cp	-1			; if d2 == -1, search
(1)  414/     11A :                     ; 		jr	z,.srch_mode
(1)  415/     11A : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  416/     11C : D2 98 00            		jp	nc,.next_cmd
(1)  417/     11F : CF                  		rst	8
(1)  418/     120 : CD 0E 02            		call	.cmnd_rdslot
(1)  419/     123 : C3 35 01            		jp	.wrtto_slot
(1)  420/     126 :                     ; -1
(1)  421/     126 :                     .srch_mode:
(1)  422/     126 : CD 21 02            		call	.srch_slot
(1)  423/     129 : FE FF               		cp	-1
(1)  424/     12B : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  425/     12E : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  426/     130 : CA 35 01            		jp	z,.wrtto_slot
(1)  427/     133 : 18 F1               		jr	.srch_mode
(1)  428/     135 :                     .wrtto_slot:
(1)  429/     135 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  430/     137 : 23                  		inc	hl
(1)  431/     138 : CF                  		rst	8
(1)  432/     139 : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  433/     13A : 23                  		inc	hl
(1)  434/     13B : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  435/     13C : 79                  		ld	a,c
(1)  436/     13D : C3 98 00            		jp	.next_cmd
(1)  437/     140 :                     
(1)  438/     140 :                     ; --------------------------------------------------------
(1)  439/     140 :                     ; Command 03h:
(1)  440/     140 :                     ;
(1)  441/     140 :                     ; Stop track with the same sequence number
(1)  442/     140 :                     ;
(1)  443/     140 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  444/     140 :                     ; --------------------------------------------------------
(1)  445/     140 :                     
(1)  446/     140 :                     .cmnd_3:
(1)  447/     140 : CD BB 00            		call	.grab_arg		; d1: Sequence ID
(1)  448/     143 : 4F                  		ld	c,a			; copy to c
(1)  449/     144 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  450/     147 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  451/     14B : B7                  		or	a
(1)  452/     14C : FA 5E 01            		jp	m,.srch_del
(1)  453/     14F :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  454/     14F :                     ; 		jr	z,.srch_del
(1)  455/     14F : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  456/     151 : D2 98 00            		jp	nc,.next_cmd
(1)  457/     154 : CF                  		rst	8
(1)  458/     155 : CD 0E 02            		call	.cmnd_rdslot
(1)  459/     158 : CD 6B 01            		call	.wrtto_del
(1)  460/     15B : C3 98 00            		jp	.next_cmd
(1)  461/     15E :                     ; -1
(1)  462/     15E :                     .srch_del:
(1)  463/     15E : CD 21 02            		call	.srch_slot
(1)  464/     161 : FE FF               		cp	-1
(1)  465/     163 : CA 98 00            		jp	z,.next_cmd
(1)  466/     166 : CD 6B 01            		call	.wrtto_del
(1)  467/     169 : 18 F3               		jr	.srch_del
(1)  468/     16B :                     .wrtto_del:
(1)  469/     16B : CB 7E               		bit	7,(hl)
(1)  470/     16D : C8                  		ret	z
(1)  471/     16E : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  472/     170 : 20 05               		jr	nz,.del_all
(1)  473/     172 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  474/     175 : B9                  		cp	c
(1)  475/     176 : C0                  		ret	nz
(1)  476/     177 :                     .del_all:
(1)  477/     177 : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  478/     179 : 23                  		inc	hl
(1)  479/     17A : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  480/     17C : CF                  		rst	8
(1)  481/     17D : C9                  		ret
(1)  482/     17E :                     
(1)  483/     17E :                     ; --------------------------------------------------------
(1)  484/     17E :                     ; Command 05h:
(1)  485/     17E :                     ;
(1)  486/     17E :                     ; Fade volume (FadeIn/FadeOut)
(1)  487/     17E :                     ;
(1)  488/     17E :                     ; Arguments:
(1)  489/     17E :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  490/     17E :                     ; --------------------------------------------------------
(1)  491/     17E :                     
(1)  492/     17E :                     .cmnd_5:
(1)  493/     17E : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  494/     181 : 4F                  		ld	c,a			; copy to c
(1)  495/     182 : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  496/     185 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  497/     189 : B7                  		or	a
(1)  498/     18A : FA 9C 01            		jp	m,.srch_fvol
(1)  499/     18D :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  500/     18D :                     ; 		jr	z,.srch_fvol
(1)  501/     18D : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  502/     18F : D2 98 00            		jp	nc,.next_cmd
(1)  503/     192 : CF                  		rst	8
(1)  504/     193 : CD 0E 02            		call	.cmnd_rdslot
(1)  505/     196 : CD A9 01            		call	.wrtto_fvol
(1)  506/     199 : C3 98 00            		jp	.next_cmd
(1)  507/     19C :                     ; -1
(1)  508/     19C :                     .srch_fvol:
(1)  509/     19C : CD 21 02            		call	.srch_slot
(1)  510/     19F : FE FF               		cp	-1
(1)  511/     1A1 : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  512/     1A4 : CD A9 01            		call	.wrtto_fvol
(1)  513/     1A7 : 18 F3               		jr	.srch_fvol
(1)  514/     1A9 :                     .wrtto_fvol:
(1)  515/     1A9 : CB 7E               		bit	7,(hl)			; Active?
(1)  516/     1AB : C8                  		ret	z
(1)  517/     1AC : CB DE               		set	3,(hl)			; Volume update flag
(1)  518/     1AE : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  519/     1B1 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  520/     1B5 : CF                  		rst	8
(1)  521/     1B6 : C9                  		ret
(1)  522/     1B7 :                     
(1)  523/     1B7 :                     ; --------------------------------------------------------
(1)  524/     1B7 :                     ; Command 06h:
(1)  525/     1B7 :                     ;
(1)  526/     1B7 :                     ; Set track's master volume
(1)  527/     1B7 :                     ;
(1)  528/     1B7 :                     ; Arguments:
(1)  529/     1B7 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  530/     1B7 :                     ; --------------------------------------------------------
(1)  531/     1B7 :                     
(1)  532/     1B7 :                     .cmnd_6:
(1)  533/     1B7 : CD BB 00            		call	.grab_arg		; d1: Master volume
(1)  534/     1BA : 4F                  		ld	c,a			; copy to c
(1)  535/     1BB : CD BB 00            		call	.grab_arg		; d0: Slot index
(1)  536/     1BE : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  537/     1C2 : B7                  		or	a
(1)  538/     1C3 : FA D5 01            		jp	m,.srch_vol
(1)  539/     1C6 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  540/     1C6 :                     ; 		jr	z,.srch_vol
(1)  541/     1C6 : FE 04               		cp	(nikona_BuffList_e-nikona_BuffList)/MAX_BUFFNTRY	; If maxed out slots
(1)  542/     1C8 : D2 98 00            		jp	nc,.next_cmd
(1)  543/     1CB : CF                  		rst	8
(1)  544/     1CC : CD 0E 02            		call	.cmnd_rdslot
(1)  545/     1CF : CD E2 01            		call	.wrtto_vol
(1)  546/     1D2 : C3 98 00            		jp	.next_cmd
(1)  547/     1D5 :                     ; -1
(1)  548/     1D5 :                     .srch_vol:
(1)  549/     1D5 : CD 21 02            		call	.srch_slot
(1)  550/     1D8 : FE FF               		cp	-1
(1)  551/     1DA : CA 98 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  552/     1DD : CD E2 01            		call	.wrtto_vol
(1)  553/     1E0 : 18 F3               		jr	.srch_vol
(1)  554/     1E2 :                     .wrtto_vol:
(1)  555/     1E2 : CB DE               		set	3,(hl)			; Volume update flag
(1)  556/     1E4 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  557/     1E7 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  558/     1EA : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  559/     1EE : CF                  		rst	8
(1)  560/     1EF : C9                  		ret
(1)  561/     1F0 :                     
(1)  562/     1F0 :                     ; --------------------------------------------------------
(1)  563/     1F0 :                     ; Command 07h:
(1)  564/     1F0 :                     ;
(1)  565/     1F0 :                     ; Set global sub-beats
(1)  566/     1F0 :                     ; --------------------------------------------------------
(1)  567/     1F0 :                     
(1)  568/     1F0 :                     .cmnd_7:
(1)  569/     1F0 : CD BB 00            		call	.grab_arg	; d0.w: $00xx
(1)  570/     1F3 : 4F                  		ld	c,a
(1)  571/     1F4 : CD BB 00            		call	.grab_arg	; d0.w: $xx00
(1)  572/     1F7 : 67                  		ld	h,a
(1)  573/     1F8 : 69                  		ld	l,c
(1)  574/     1F9 : 3A 3E 00            		ld	a,(palMode)
(1)  575/     1FC : B7                  		or	a
(1)  576/     1FD : 28 04               		jr	z,.not_pal
(1)  577/     1FF : 11 28 00            		ld	de,40
(1)  578/     202 : 19                  		add	hl,de
(1)  579/     203 :                     .not_pal:
(1)  580/     203 : 7C                  		ld	a,h
(1)  581/     204 : 32 FC 1C            		ld	(sbeatPtck+1),a
(1)  582/     207 : 7D                  		ld	a,l
(1)  583/     208 : 32 FB 1C            		ld	(sbeatPtck),a
(1)  584/     20B : C3 98 00            		jp	.next_cmd
(1)  585/     20E :                     
(1)  586/     20E :                     ; --------------------------------------------------------
(1)  587/     20E :                     ; Shared subs
(1)  588/     20E :                     ; --------------------------------------------------------
(1)  589/     20E :                     
(1)  590/     20E :                     .cmnd_rdslot:
(1)  591/     20E : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  592/     20F : 87                  		add	a,a			; id*8
(1)  593/     210 : 87                  		add	a,a
(1)  594/     211 : 16 00               		ld	d,0
(1)  595/     213 : 5F                  		ld	e,a
(1)  596/     214 : FD 19               		add	iy,de
(1)  597/     216 : FD 7E 00            		ld	a,(iy)
(1)  598/     219 : FD 66 01            		ld	h,(iy+1)
(1)  599/     21C : 6F                  		ld	l,a
(1)  600/     21D : E5                  		push	hl
(1)  601/     21E : DD E1               		pop	ix
(1)  602/     220 : C9                  		ret
(1)  603/     221 :                     
(1)  604/     221 :                     ; ------------------------------------------------
(1)  605/     221 :                     ; iy - nikona_BuffList
(1)  606/     221 :                     
(1)  607/     221 :                     .srch_slot:
(1)  608/     221 : FD 7E 00            		ld	a,(iy)
(1)  609/     224 : FE FF               		cp	-1			; End of list?
(1)  610/     226 : C8                  		ret	z
(1)  611/     227 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  612/     22A : 6F                  		ld	l,a
(1)  613/     22B : E5                  		push	hl
(1)  614/     22C : DD E1               		pop	ix
(1)  615/     22E : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  616/     231 : FD 19               		add	iy,de			; Next entry for later
(1)  617/     233 : C9                  		ret
(1)  618/     234 :                     
(1)  619/     234 :                     ; ====================================================================
(1)  620/     234 :                     ; ----------------------------------------------------------------
(1)  621/     234 :                     ; MAIN Playback section
(1)  622/     234 :                     ; ----------------------------------------------------------------
(1)  623/     234 :                     
(1)  624/     234 :                     ; --------------------------------------------------------
(1)  625/     234 :                     ; Read mini-impulse-tracker data
(1)  626/     234 :                     ; --------------------------------------------------------
(1)  627/     234 :                     
(1)  628/     234 :                     upd_track:
(1)  629/     234 : E7                  		rst	20h			; Refill wave
(1)  630/     235 : CD A7 0F            		call	get_tick		; Check for tick flag
(1)  631/     238 : FD 21 63 1F         		ld	iy,nikona_BuffList	; iy - slot buffer List
(1)  632/     23C :                     .trk_buffrs:
(1)  633/     23C : FD 7E 00            		ld	a,(iy)			; if -1, end here.
(1)  634/     23F : FE FF               		cp	-1
(1)  635/     241 : C8                  		ret	z
(1)  636/     242 : CF                  		rst	8
(1)  637/     243 : FD E5               		push	iy
(1)  638/     245 : CD 51 02            		call	.read_track
(1)  639/     248 : FD E1               		pop	iy
(1)  640/     24A : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  641/     24D : FD 19               		add	iy,de
(1)  642/     24F : 18 EB               		jr	.trk_buffrs
(1)  643/     251 :                     
(1)  644/     251 :                     ; ----------------------------------------
(1)  645/     251 :                     ; iy - Track buffer
(1)  646/     251 :                     ; ----------------------------------------
(1)  647/     251 :                     
(1)  648/     251 :                     .read_track:
(1)  649/     251 : FD 6E 00            		ld	l,(iy)			; hl - current track slot
(1)  650/     254 : FD 66 01            		ld	h,(iy+1)
(1)  651/     257 : CF                  		rst	8
(1)  652/     258 : E5                  		push	hl
(1)  653/     259 : FD E1               		pop	iy			; change iy to hl
(1)  654/     25B : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  655/     25E : CB 78               		bit	7,b			; bit7: Track active?
(1)  656/     260 : C8                  		ret	z			; Return if not.
(1)  657/     261 : 78                  		ld	a,b
(1)  658/     262 : FE FF               		cp	-1			; Flag is -1?
(1)  659/     264 : C8                  		ret	z			; Return if mid-flag
(1)  660/     265 : CF                  		rst	8
(1)  661/     266 :                     	; ----------------------------------------
(1)  662/     266 :                     	; Track volume changes
(1)  663/     266 : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  664/     269 : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  665/     26C : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  666/     26F : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  667/     272 : 79                  		ld	a,c
(1)  668/     273 : BC                  		cp	h
(1)  669/     274 : 28 1E               		jr	z,.keep_vol
(1)  670/     276 : 30 06               		jr	nc,.fade_out
(1)  671/     278 : 11 80 FF            		ld	de,-80h
(1)  672/     27B : 19                  		add	hl,de
(1)  673/     27C : 18 0C               		jr	.too_much
(1)  674/     27E :                     .fade_out:
(1)  675/     27E : 19                  		add	hl,de
(1)  676/     27F : CF                  		rst	8
(1)  677/     280 : 7C                  		ld	a,h
(1)  678/     281 : B9                  		cp	c
(1)  679/     282 : 38 06               		jr	c,.too_much
(1)  680/     284 : 61                  		ld	h,c
(1)  681/     285 : 2E 00               		ld	l,0
(1)  682/     287 : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  683/     28A :                     .too_much:
(1)  684/     28A : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  685/     28E : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  686/     291 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  687/     294 :                     .keep_vol:
(1)  688/     294 :                     	; ----------------------------------------
(1)  689/     294 : 3A F6 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  690/     297 : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  691/     299 : 28 03               		jr	z,.sfxmd
(1)  692/     29B : CB 4F               		bit	1,a			; BEAT passed?
(1)  693/     29D : C8                  		ret	z			; No BEAT.
(1)  694/     29E :                     .sfxmd:
(1)  695/     29E : CB 47               		bit	0,a			; TICK passed?
(1)  696/     2A0 : C8                  		ret	z			; No TICK.
(1)  697/     2A1 : CF                  		rst	8
(1)  698/     2A2 :                     	; ----------------------------------------
(1)  699/     2A2 :                     	; Start reading notes
(1)  700/     2A2 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  701/     2A4 : C4 2C 05            		call	nz,.first_fill
(1)  702/     2A7 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  703/     2A9 : C4 25 05            		call	nz,.effect_fill
(1)  704/     2AC : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  705/     2AF : 3D                  		dec	a
(1)  706/     2B0 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  707/     2B3 : B7                  		or	a			; Check a
(1)  708/     2B4 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  709/     2B5 : CF                  		rst	8
(1)  710/     2B6 : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  711/     2B9 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  712/     2BC : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  713/     2BF : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  714/     2C2 : 79                  		ld	a,c			; Check rowcount
(1)  715/     2C3 : B0                  		or	b
(1)  716/     2C4 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  717/     2C6 : CF                  		rst	8			; If bc == 0 ...
(1)  718/     2C7 : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  719/     2CA : 3C                  		inc	a
(1)  720/     2CB : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  721/     2CE : CD 3D 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  722/     2D1 : FE FF               		cp	-1			; Track finished?
(1)  723/     2D3 : C8                  		ret	z
(1)  724/     2D4 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  725/     2D7 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  726/     2DA :                     .row_active:
(1)  727/     2DA : CF                  		rst	8
(1)  728/     2DB : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  729/     2DE : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  730/     2E1 :                     
(1)  731/     2E1 :                     ; --------------------------------
(1)  732/     2E1 :                     ; Main read-loop
(1)  733/     2E1 :                     ; --------------------------------
(1)  734/     2E1 :                     
(1)  735/     2E1 :                     .next_note:
(1)  736/     2E1 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  737/     2E4 : B7                  		or	a
(1)  738/     2E5 : 20 16               		jr	nz,.decrow
(1)  739/     2E7 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  740/     2E8 : B7                  		or	a
(1)  741/     2E9 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  742/     2EB : FA 08 03            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  743/     2EE : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  744/     2F1 :                     
(1)  745/     2F1 :                     ; --------------------------------
(1)  746/     2F1 :                     ; Exit
(1)  747/     2F1 :                     ; --------------------------------
(1)  748/     2F1 :                     
(1)  749/     2F1 :                     .exit:
(1)  750/     2F1 : CF                  		rst	8
(1)  751/     2F2 : CD 05 04            		call	.inc_cpatt		; * Increment patt pos
(1)  752/     2F5 : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  753/     2F8 : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  754/     2FB : 18 03               		jr	.decrow_e
(1)  755/     2FD :                     .decrow:
(1)  756/     2FD : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  757/     300 :                     .decrow_e:
(1)  758/     300 : 0B                  		dec	bc			; Decrement rowcount
(1)  759/     301 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  760/     304 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  761/     307 : C9                  		ret	; Exit.
(1)  762/     308 :                     
(1)  763/     308 :                     ; --------------------------------
(1)  764/     308 :                     ; New note request
(1)  765/     308 :                     ;
(1)  766/     308 :                     ; a - %1tcccccc
(1)  767/     308 :                     ;   | t - next byte has new type
(1)  768/     308 :                     ;   | c - channel
(1)  769/     308 :                     ; --------------------------------
(1)  770/     308 :                     
(1)  771/     308 :                     .has_note:
(1)  772/     308 : CF                  		rst	8
(1)  773/     309 : C5                  		push	bc			; Save rowcount
(1)  774/     30A : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  775/     30B : CD 05 04            		call	.inc_cpatt		; * Increment patt pos
(1)  776/     30E : E5                  		push	hl			; Save hl patt pos
(1)  777/     30F : FD E5               		push	iy
(1)  778/     311 : E1                  		pop	hl
(1)  779/     312 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  780/     316 : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  781/     319 : CF                  		rst	8
(1)  782/     31A : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  783/     31B : 79                  		ld	a,c			; Get patt note position
(1)  784/     31C : E6 1F               		and	00011111b		; Filter index bits
(1)  785/     31E : 5F                  		ld	e,a			; Save as e
(1)  786/     31F : 19                  		add	hl,de			; Increment more by this pos
(1)  787/     320 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  788/     321 : B7                  		or	a
(1)  789/     322 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  790/     324 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  791/     326 : 87                  		add	a,a
(1)  792/     327 : 87                  		add	a,a
(1)  793/     328 : 87                  		add	a,a
(1)  794/     329 : 5F                  		ld	e,a
(1)  795/     32A : DD 19               		add	ix,de
(1)  796/     32C : 18 2B               		jr	.cont_chnl
(1)  797/     32E :                     
(1)  798/     32E :                     ; Make NEW channel
(1)  799/     32E :                     ; ix - channel list start
(1)  800/     32E :                     .srch_new:
(1)  801/     32E : CF                  		rst	8
(1)  802/     32F : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  803/     331 : 16 00               		ld	d,0		; Reset out index
(1)  804/     333 :                     .next_chnl:
(1)  805/     333 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  806/     336 : B7                  		or	a		; If plus, track channel is free
(1)  807/     337 : F2 4E 03            		jp	p,.chnl_free
(1)  808/     33A : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  809/     33C : DD 23               		inc	ix
(1)  810/     33E : DD 23               		inc	ix
(1)  811/     340 : DD 23               		inc	ix
(1)  812/     342 : CF                  		rst	8
(1)  813/     343 : DD 23               		inc	ix
(1)  814/     345 : DD 23               		inc	ix
(1)  815/     347 : DD 23               		inc	ix
(1)  816/     349 : DD 23               		inc	ix
(1)  817/     34B : 14                  		inc	d		; Increment out index
(1)  818/     34C : 10 E5               		djnz	.next_chnl
(1)  819/     34E :                     .chnl_free:
(1)  820/     34E : CF                  		rst	8
(1)  821/     34F : 7A                  		ld	a,d			; Read index we got
(1)  822/     350 : E6 1F               		and	00011111b		; Filter bits
(1)  823/     352 : F6 80               		or	10000000b		; + set as used
(1)  824/     354 : 77                  		ld	(hl),a			; Write index slot
(1)  825/     355 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  826/     359 :                     .cont_chnl:
(1)  827/     359 :                     
(1)  828/     359 : E1                  		pop	hl			; Recover patt pos
(1)  829/     35A :                     	; ix - current channel
(1)  830/     35A : CF                  		rst	8
(1)  831/     35B : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  832/     35E : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  833/     360 : 28 08               		jr	z,.old_type
(1)  834/     362 : 7E                  		ld	a,(hl)
(1)  835/     363 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  836/     366 : 47                  		ld	b,a			; Set to b
(1)  837/     367 : CD 05 04            		call	.inc_cpatt		; Next patt pos
(1)  838/     36A :                     .old_type:
(1)  839/     36A :                     	; b - evinEVIN
(1)  840/     36A :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  841/     36A :                     	;     evin: byte is already stored on track-channel buffer
(1)  842/     36A :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  843/     36A :                     
(1)  844/     36A : CF                  		rst	8
(1)  845/     36B : CB 40               		bit	0,b			; New NOTE?
(1)  846/     36D : 28 07               		jr	z,.no_note
(1)  847/     36F : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  848/     370 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  849/     373 : CD 05 04            		call	.inc_cpatt
(1)  850/     376 :                     .no_note:
(1)  851/     376 : CB 48               		bit	1,b			; New INS?
(1)  852/     378 : 28 07               		jr	z,.no_ins
(1)  853/     37A : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  854/     37B : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  855/     37E : CD 05 04            		call	.inc_cpatt
(1)  856/     381 :                     .no_ins:
(1)  857/     381 : CB 50               		bit	2,b			; New VOL?
(1)  858/     383 : 28 07               		jr	z,.no_vol
(1)  859/     385 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  860/     386 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  861/     389 : CD 05 04            		call	.inc_cpatt
(1)  862/     38C :                     .no_vol:
(1)  863/     38C : CB 58               		bit	3,b			; New EFFECT?
(1)  864/     38E : 28 0F               		jr	z,.no_eff
(1)  865/     390 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  866/     391 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  867/     394 : CD 05 04            		call	.inc_cpatt
(1)  868/     397 : CF                  		rst	8
(1)  869/     398 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  870/     399 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  871/     39C : CD 05 04            		call	.inc_cpatt
(1)  872/     39F :                     .no_eff:
(1)  873/     39F : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  874/     3A0 : 0F                  		rrca
(1)  875/     3A1 : 0F                  		rrca
(1)  876/     3A2 : 0F                  		rrca
(1)  877/     3A3 : 0F                  		rrca
(1)  878/     3A4 : E6 0F               		and	00001111b		; Filter bits
(1)  879/     3A6 : 4F                  		ld	c,a			; Save as c
(1)  880/     3A7 : 78                  		ld	a,b
(1)  881/     3A8 : E6 0F               		and	00001111b		; Filter again
(1)  882/     3AA : B1                  		or	c			; Merge c with a
(1)  883/     3AB : CF                  		rst	8
(1)  884/     3AC : 4F                  		ld	c,a			; Save bit flags
(1)  885/     3AD : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  886/     3B0 : B1                  		or	c
(1)  887/     3B1 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  888/     3B4 :                     	; Check for effects that affect
(1)  889/     3B4 :                     	; internal playback:
(1)  890/     3B4 :                     	; Jump, Ticks, etc.
(1)  891/     3B4 : C1                  		pop	bc		; Restore rowcount
(1)  892/     3B5 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  893/     3B8 : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  894/     3BA : CA E1 02            		jp	z,.next_note
(1)  895/     3BD : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  896/     3C0 : B7                  		or	a		; 00h = invalid effect
(1)  897/     3C1 : CA E1 02            		jp	z,.next_note
(1)  898/     3C4 : FE 01               		cp	1		; Effect A: Tick set
(1)  899/     3C6 : 28 0B               		jr	z,.eff_A
(1)  900/     3C8 : FE 02               		cp	2		; Effect B: Position Jump
(1)  901/     3CA : 28 18               		jr	z,.eff_B
(1)  902/     3CC : FE 03               		cp	3		; Effect C: Pattern break
(1)  903/     3CE : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  904/     3D0 : C3 E1 02            		jp	.next_note
(1)  905/     3D3 :                     
(1)  906/     3D3 :                     ; ----------------------------------------
(1)  907/     3D3 :                     ; Effect A: Set ticks
(1)  908/     3D3 :                     ; ----------------------------------------
(1)  909/     3D3 :                     
(1)  910/     3D3 :                     .eff_A:
(1)  911/     3D3 : CF                  		rst	8
(1)  912/     3D4 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  913/     3D7 : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  914/     3DA : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  915/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  916/     3E1 : C3 E1 02            		jp	.next_note
(1)  917/     3E4 :                     
(1)  918/     3E4 :                     ; ----------------------------------------
(1)  919/     3E4 :                     ; Effect B: jump to a new block
(1)  920/     3E4 :                     ; ----------------------------------------
(1)  921/     3E4 :                     
(1)  922/     3E4 :                     .eff_B:
(1)  923/     3E4 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  924/     3E7 : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  925/     3EA : CF                  		rst	8
(1)  926/     3EB : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  927/     3EF : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  928/     3F3 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  929/     3F7 : 3E 80               		ld	a,80h
(1)  930/     3F9 : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  931/     3FC : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  932/     3FF : C3 E1 02            		jp	.next_note
(1)  933/     402 :                     
(1)  934/     402 :                     ; ----------------------------------------
(1)  935/     402 :                     ; Effect C: Pattern break/exit
(1)  936/     402 :                     ;
(1)  937/     402 :                     ; Only used on SFX, arguments ignored.
(1)  938/     402 :                     ; ----------------------------------------
(1)  939/     402 :                     
(1)  940/     402 :                     .eff_C:
(1)  941/     402 : C3 16 05            		jp	.track_end
(1)  942/     405 :                     
(1)  943/     405 :                     ; ----------------------------------------
(1)  944/     405 :                     ; Increment the current patt position
(1)  945/     405 :                     ; and recieve more data
(1)  946/     405 :                     ;
(1)  947/     405 :                     ; Breaks:
(1)  948/     405 :                     ; a,e
(1)  949/     405 :                     ; ----------------------------------------
(1)  950/     405 :                     
(1)  951/     405 :                     .inc_cpatt:
(1)  952/     405 : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  953/     408 : 7D                  		ld	a,l
(1)  954/     409 : 3C                  		inc	a
(1)  955/     40A : E6 0F               		and	MAX_RCACH-1
(1)  956/     40C : FE 0E               		cp	MAX_RCACH-2	; RAN OUT of bytes (almost)?
(1)  957/     40E : 30 03               		jr	nc,.ran_out
(1)  958/     410 : B3                  		or	e
(1)  959/     411 : 6F                  		ld	l,a
(1)  960/     412 : C9                  		ret
(1)  961/     413 :                     .ran_out:
(1)  962/     413 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  963/     416 : E5                  		push	hl
(1)  964/     417 : C5                  		push	bc
(1)  965/     418 : 06 00               		ld	b,0
(1)  966/     41A : 4F                  		ld	c,a
(1)  967/     41B : CF                  		rst	8
(1)  968/     41C : 5D                  		ld	e,l
(1)  969/     41D : 54                  		ld	d,h
(1)  970/     41E : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  971/     421 : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  972/     424 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  973/     427 : 09                  		add	hl,bc
(1)  974/     428 : CE 00               		adc	a,0
(1)  975/     42A : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  976/     42D : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  977/     430 : CF                  		rst	8
(1)  978/     431 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  979/     434 : 01 10 00            		ld	bc,MAX_RCACH
(1)  980/     437 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1)  981/     43A : C1                  		pop	bc
(1)  982/     43B : E1                  		pop	hl
(1)  983/     43C : C9                  		ret
(1)  984/     43D :                     
(1)  985/     43D :                     ; ----------------------------------------
(1)  986/     43D :                     ; Set track pattern by trk_currBlk
(1)  987/     43D :                     ; ----------------------------------------
(1)  988/     43D :                     
(1)  989/     43D :                     .set_track:
(1)  990/     43D : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  991/     440 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  992/     443 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  993/     446 : 4F                  		ld	c,a
(1)  994/     447 :                     
(1)  995/     447 : C5                  		push	bc
(1)  996/     448 : D5                  		push	de
(1)  997/     449 : CF                  		rst	8
(1)  998/     44A : 0F                  		rrca
(1)  999/     44B : 0F                  		rrca
(1) 1000/     44C : 0F                  		rrca
(1) 1001/     44D : E6 1F               		and	00011111b
(1) 1002/     44F : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1) 1003/     452 : CB 79               		bit	7,c			; First time?
(1) 1004/     454 : 20 03               		jr	nz,.first_blk
(1) 1005/     456 : B9                  		cp	c			; SAME instrument data?
(1) 1006/     457 : 28 1E               		jr	z,.keep_blk
(1) 1007/     459 :                     .first_blk:
(1) 1008/     459 : CF                  		rst	8
(1) 1009/     45A : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1010/     45D : 07                  		rlca
(1) 1011/     45E : 07                  		rlca
(1) 1012/     45F : 07                  		rlca
(1) 1013/     460 : 06 00               		ld	b,0
(1) 1014/     462 : 4F                  		ld	c,a
(1) 1015/     463 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1) 1016/     466 : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1) 1017/     469 : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1) 1018/     46C : E7                  		rst	20h
(1) 1019/     46D : CF                  		rst	8
(1) 1020/     46E : 09                  		add	hl,bc
(1) 1021/     46F : CE 00               		adc	a,0
(1) 1022/     471 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1023/     474 : CD C8 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1024/     477 :                     .keep_blk:
(1) 1025/     477 : E1                  		pop	hl
(1) 1026/     478 : C1                  		pop	bc
(1) 1027/     479 : 79                  		ld	a,c
(1) 1028/     47A : E6 07               		and	00000111b
(1) 1029/     47C : CF                  		rst	8
(1) 1030/     47D : 16 00               		ld	d,0
(1) 1031/     47F : 5F                  		ld	e,a
(1) 1032/     480 : 19                  		add	hl,de
(1) 1033/     481 : 7E                  		ld	a,(hl)			; Read byte
(1) 1034/     482 : FE FF               		cp	-1			; If block == -1, end track
(1) 1035/     484 : CA 16 05            		jp	z,.track_end
(1) 1036/     487 : CF                  		rst	8
(1) 1037/     488 :                     
(1) 1038/     488 : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1039/     48B : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1040/     48E : 4F                  		ld	c,a
(1) 1041/     48F : D5                  		push	de
(1) 1042/     490 : C5                  		push	bc
(1) 1043/     491 : CF                  		rst	8
(1) 1044/     492 : 0F                  		rrca
(1) 1045/     493 : 0F                  		rrca
(1) 1046/     494 : 0F                  		rrca
(1) 1047/     495 : E6 1F               		and	00011111b
(1) 1048/     497 : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1049/     49A : CB 79               		bit	7,c			; First time?
(1) 1050/     49C : 20 03               		jr	nz,.first_head
(1) 1051/     49E : B9                  		cp	c			; SAME instrument data?
(1) 1052/     49F : 28 26               		jr	z,.keep_it
(1) 1053/     4A1 :                     .first_head:
(1) 1054/     4A1 : CF                  		rst	8
(1) 1055/     4A2 : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1056/     4A5 : 47                  		ld	b,a
(1) 1057/     4A6 : 0F                  		rrca
(1) 1058/     4A7 : 0F                  		rrca
(1) 1059/     4A8 : 0F                  		rrca
(1) 1060/     4A9 : E6 E0               		and	11100000b
(1) 1061/     4AB : 4F                  		ld	c,a
(1) 1062/     4AC : 78                  		ld	a,b
(1) 1063/     4AD : 0F                  		rrca
(1) 1064/     4AE : 0F                  		rrca
(1) 1065/     4AF : 0F                  		rrca
(1) 1066/     4B0 : E6 03               		and	00000011b
(1) 1067/     4B2 : 47                  		ld	b,a
(1) 1068/     4B3 :                     
(1) 1069/     4B3 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1070/     4B6 : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1071/     4B9 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1072/     4BC : E7                  		rst	20h
(1) 1073/     4BD : CF                  		rst	8
(1) 1074/     4BE : 09                  		add	hl,bc
(1) 1075/     4BF : CE 00               		adc	a,0
(1) 1076/     4C1 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1077/     4C4 : CD C8 0F            		call	transferRom		; ** ROM ACCESS **
(1) 1078/     4C7 :                     .keep_it:
(1) 1079/     4C7 : C1                  		pop	bc
(1) 1080/     4C8 : 79                  		ld	a,c
(1) 1081/     4C9 : E6 07               		and	00000111b
(1) 1082/     4CB : 87                  		add	a,a
(1) 1083/     4CC : 87                  		add	a,a
(1) 1084/     4CD : 57                  		ld	d,a
(1) 1085/     4CE : CF                  		rst	8
(1) 1086/     4CF : E6 FC               		and	11111100b
(1) 1087/     4D1 : 5F                  		ld	e,a
(1) 1088/     4D2 : 7A                  		ld	a,d
(1) 1089/     4D3 : E6 03               		and	00000011b
(1) 1090/     4D5 : 57                  		ld	d,a
(1) 1091/     4D6 : E1                  		pop	hl
(1) 1092/     4D7 : 19                  		add	hl,de
(1) 1093/     4D8 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1094/     4D9 : 23                  		inc	hl
(1) 1095/     4DA : CF                  		rst	8
(1) 1096/     4DB : 56                  		ld	d,(hl)
(1) 1097/     4DC : 23                  		inc	hl
(1) 1098/     4DD : 7E                  		ld	a,(hl)
(1) 1099/     4DE : 23                  		inc	hl
(1) 1100/     4DF : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1101/     4E2 : 7E                  		ld	a,(hl)
(1) 1102/     4E3 : 23                  		inc	hl
(1) 1103/     4E4 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1104/     4E7 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1105/     4EA : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1106/     4ED : CF                  		rst	8
(1) 1107/     4EE : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1108/     4F1 : 19                  		add	hl,de
(1) 1109/     4F2 : CE 00               		adc	a,0
(1) 1110/     4F4 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1111/     4F7 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1112/     4FA : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1113/     4FD : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1114/     500 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1115/     503 :                     
(1) 1116/     503 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1117/     506 : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1118/     509 : 0E 10               		ld	c,MAX_RCACH
(1) 1119/     50B : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1120/     50F : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1121/     513 : C3 C8 0F            		jp	transferRom		; ** ROM access **
(1) 1122/     516 :                     
(1) 1123/     516 :                     ; ----------------------------------------
(1) 1124/     516 :                     ; **JUMP ONLY**
(1) 1125/     516 :                     .track_end:
(1) 1126/     516 : CD D1 05            		call	track_out
(1) 1127/     519 : CF                  		rst	8
(1) 1128/     51A : AF                  		xor	a
(1) 1129/     51B : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1130/     51E : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1131/     521 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1132/     524 : C9                  		ret
(1) 1133/     525 :                     
(1) 1134/     525 :                     ; ----------------------------------------
(1) 1135/     525 :                     ; Track refill
(1) 1136/     525 :                     ; ----------------------------------------
(1) 1137/     525 :                     
(1) 1138/     525 :                     .effect_fill:
(1) 1139/     525 : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1140/     529 : C3 3D 04            		jp	.set_track
(1) 1141/     52C :                     
(1) 1142/     52C :                     ; ----------------------------------------
(1) 1143/     52C :                     ; Track Start/Reset
(1) 1144/     52C :                     ;
(1) 1145/     52C :                     ; iy - Track buffer
(1) 1146/     52C :                     ; ----------------------------------------
(1) 1147/     52C :                     
(1) 1148/     52C :                     .first_fill:
(1) 1149/     52C : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1150/     530 : CD D1 05            		call	track_out
(1) 1151/     533 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1152/     537 : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1153/     53A : CF                  		rst	8
(1) 1154/     53B : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1155/     53E : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1156/     541 : FE FF               		cp	-1			; Sequence -1?
(1) 1157/     543 : C8                  		ret	z
(1) 1158/     544 : 87                  		add	a,a
(1) 1159/     545 : 87                  		add	a,a
(1) 1160/     546 : 16 00               		ld	d,0
(1) 1161/     548 : 5F                  		ld	e,a
(1) 1162/     549 : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1163/     54C : 23                  		inc	hl
(1) 1164/     54D : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1165/     54E : 23                  		inc	hl
(1) 1166/     54F : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1167/     550 : 23                  		inc	hl
(1) 1168/     551 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1169/     552 : CF                  		rst	8
(1) 1170/     553 : 61                  		ld	h,c
(1) 1171/     554 : 19                  		add	hl,de
(1) 1172/     555 : CE 00               		adc	a,0
(1) 1173/     557 : 11 50 1F            		ld	de,trkInfoCach
(1) 1174/     55A : D5                  		push	de
(1) 1175/     55B : 01 04 00            		ld	bc,4
(1) 1176/     55E : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 1177/     561 : E1                  		pop	hl
(1) 1178/     562 : 7E                  		ld	a,(hl)
(1) 1179/     563 : 23                  		inc	hl
(1) 1180/     564 : CB 7F               		bit	7,a
(1) 1181/     566 : 28 04               		jr	z,.no_glbl
(1) 1182/     568 : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1183/     56C :                     .no_glbl:
(1) 1184/     56C : CF                  		rst	8
(1) 1185/     56D : E6 7F               		and	01111111b
(1) 1186/     56F : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1187/     572 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1188/     573 : 23                  		inc	hl			; grab it's pointers
(1) 1189/     574 : 4E                  		ld	c,(hl)
(1) 1190/     575 : 23                  		inc	hl
(1) 1191/     576 : 6E                  		ld	l,(hl)
(1) 1192/     577 : 61                  		ld	h,c
(1) 1193/     578 : 11 40 1F            		ld	de,headerOut
(1) 1194/     57B : 0E 0E               		ld	c,0Eh
(1) 1195/     57D : CD C8 0F            		call	transferRom		; ** ROM access **
(1) 1196/     580 :                     
(1) 1197/     580 :                     
(1) 1198/     580 :                     	; headerOut:
(1) 1199/     580 :                     	; dc.w numof_chnls
(1) 1200/     580 :                     	; dc.l .blk,.pat,.ins
(1) 1201/     580 :                     	; *** READING BACKWARDS
(1) 1202/     580 : DD 21 4D 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1203/     584 : CF                  		rst	8
(1) 1204/     585 : CD BE 05            		call	.grab_rhead		; Instrument data
(1) 1205/     588 : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1206/     58B : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1207/     58E : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1208/     591 :                     ; 		ld	(iy+trk_BankIns),80h	; Reset instrument banking
(1) 1209/     591 : E7                  		rst	20h
(1) 1210/     592 : CF                  		rst	8
(1) 1211/     593 : CD BE 05            		call	.grab_rhead		; Pattern heads
(1) 1212/     596 : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1213/     599 : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1214/     59C : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1215/     59F : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1216/     5A3 : CF                  		rst	8
(1) 1217/     5A4 : CD BE 05            		call	.grab_rhead		; Block data
(1) 1218/     5A7 : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1219/     5AA : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1220/     5AD : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1221/     5B0 : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1222/     5B4 : CF                  		rst	8
(1) 1223/     5B5 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1224/     5B8 : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1225/     5BB : C3 3D 04            		jp	.set_track
(1) 1226/     5BE :                     
(1) 1227/     5BE :                     ; Read 68K pointer:
(1) 1228/     5BE :                     ; hl - 00xxxx
(1) 1229/     5BE :                     ;  b - xx0000
(1) 1230/     5BE :                     .grab_rhead:
(1) 1231/     5BE : DD 6E 00            		ld	l,(ix)
(1) 1232/     5C1 : DD 2B               		dec	ix
(1) 1233/     5C3 : DD 66 00            		ld	h,(ix)
(1) 1234/     5C6 : CF                  		rst	8
(1) 1235/     5C7 : DD 2B               		dec	ix
(1) 1236/     5C9 : DD 46 00            		ld	b,(ix)
(1) 1237/     5CC : DD 2B               		dec	ix
(1) 1238/     5CE :                     ; 		ld	c,(ix)
(1) 1239/     5CE : DD 2B               		dec	ix
(1) 1240/     5D0 : C9                  		ret
(1) 1241/     5D1 :                     
(1) 1242/     5D1 :                     ; ----------------------------------------
(1) 1243/     5D1 :                     ; Reset tracker channels
(1) 1244/     5D1 :                     ;
(1) 1245/     5D1 :                     ; iy - Track buffer
(1) 1246/     5D1 :                     ;
(1) 1247/     5D1 :                     ; Breaks:
(1) 1248/     5D1 :                     ; b ,de,hl,ix
(1) 1249/     5D1 :                     ; ----------------------------------------
(1) 1250/     5D1 :                     
(1) 1251/     5D1 :                     track_out:
(1) 1252/     5D1 : FD E5               		push	iy
(1) 1253/     5D3 : E1                  		pop	hl
(1) 1254/     5D4 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1255/     5D8 : CF                  		rst	8
(1) 1256/     5D9 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1257/     5DC : 19                  		add	hl,de
(1) 1258/     5DD : 06 1A               		ld	b,MAX_TRKINDX
(1) 1259/     5DF :                     .indx_del:
(1) 1260/     5DF : 7E                  		ld	a,(hl)
(1) 1261/     5E0 : B7                  		or	a
(1) 1262/     5E1 : 28 2A               		jr	z,.nothin
(1) 1263/     5E3 : CF                  		rst	8
(1) 1264/     5E4 : DD E5               		push	ix
(1) 1265/     5E6 : E6 1F               		and	00011111b
(1) 1266/     5E8 : 87                  		add	a,a
(1) 1267/     5E9 : 87                  		add	a,a
(1) 1268/     5EA : 87                  		add	a,a
(1) 1269/     5EB : 5F                  		ld	e,a
(1) 1270/     5EC : CF                  		rst	8
(1) 1271/     5ED : DD 19               		add	ix,de
(1) 1272/     5EF : AF                  		xor	a
(1) 1273/     5F0 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1274/     5F4 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1275/     5F8 : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1276/     5FC : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1277/     5FF : CF                  		rst	8
(1) 1278/     600 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1279/     603 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1280/     606 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1281/     609 : DD E1               		pop	ix
(1) 1282/     60B : 77                  		ld	(hl),a
(1) 1283/     60C : 00                  		nop
(1) 1284/     60D :                     .nothin:
(1) 1285/     60D : 23                  		inc	hl
(1) 1286/     60E : 10 CF               		djnz	.indx_del
(1) 1287/     610 : 3E 01               		ld	a,1
(1) 1288/     612 : 32 EF 1B            		ld	(marsUpd),a
(1) 1289/     615 : C9                  		ret
(1) 1290/     616 :                     
(1) 1291/     616 :                     ; ============================================================
(1) 1292/     616 :                     ; --------------------------------------------------------
(1) 1293/     616 :                     ; Process track channels to the sound chips
(1) 1294/     616 :                     ; --------------------------------------------------------
(1) 1295/     616 :                     
(1) 1296/     616 :                     set_chips:
(1) 1297/     616 : E7                  		rst	20h			; Refill wave
(1) 1298/     617 : CD A7 0F            		call	get_tick
(1) 1299/     61A : FD 21 63 1F         		ld	iy,nikona_BuffList
(1) 1300/     61E :                     .trk_buffrs:
(1) 1301/     61E : FD 7E 00            		ld	a,(iy)
(1) 1302/     621 : FE FF               		cp	-1
(1) 1303/     623 : 28 0F               		jr	z,proc_chips
(1) 1304/     625 : CF                  		rst	8
(1) 1305/     626 : FD E5               		push	iy
(1) 1306/     628 : CD 5D 06            		call	tblbuff_read
(1) 1307/     62B : FD E1               		pop	iy
(1) 1308/     62D : 11 08 00            		ld	de,MAX_BUFFNTRY
(1) 1309/     630 : FD 19               		add	iy,de
(1) 1310/     632 : 18 EA               		jr	.trk_buffrs
(1) 1311/     634 :                     proc_chips:
(1) 1312/     634 : E7                  		rst	20h			; Refill wave
(1) 1313/     635 : CF                  		rst	8
(1) 1314/     636 : FD 21 C2 1B         		ld	iy,tblPSGN		; PSG Noise
(1) 1315/     63A : CD 2F 08            		call	dtbl_singl
(1) 1316/     63D : CF                  		rst	8
(1) 1317/     63E : FD 21 00 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1318/     642 : CD 19 08            		call	dtbl_multi
(1) 1319/     645 : CF                  		rst	8
(1) 1320/     646 : FD 21 6E 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1321/     64A : CD 19 08            		call	dtbl_multi
(1) 1322/     64D : CF                  		rst	8
(1) 1323/     64E : FD 21 00 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1324/     652 : CD 19 08            		call	dtbl_multi
(1) 1325/     655 : CF                  		rst	8
(1) 1326/     656 : FD 21 4A 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1327/     65A : C3 19 08            		jp	dtbl_multi
(1) 1328/     65D :                     
(1) 1329/     65D :                     ; ----------------------------------------
(1) 1330/     65D :                     ; Read current track
(1) 1331/     65D :                     ;
(1) 1332/     65D :                     ; iy - Buffer
(1) 1333/     65D :                     tblbuff_read:
(1) 1334/     65D : FD 6E 00            		ld	l,(iy)
(1) 1335/     660 : FD 66 01            		ld	h,(iy+1)
(1) 1336/     663 : CD A7 0F            		call	get_tick
(1) 1337/     666 : CF                  		rst	8
(1) 1338/     667 : E5                  		push	hl
(1) 1339/     668 : FD E1               		pop	iy
(1) 1340/     66A : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1341/     66D : CB 78               		bit	7,b
(1) 1342/     66F : C8                  		ret	z
(1) 1343/     670 : 78                  		ld	a,b			; trk_Status == -1?
(1) 1344/     671 : FE FF               		cp	-1
(1) 1345/     673 : C2 7D 06            		jp	nz,.track_cont
(1) 1346/     676 : CD D1 05            		call	track_out
(1) 1347/     679 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1348/     67D :                     .track_cont:
(1) 1349/     67D : E7                  		rst	20h
(1) 1350/     67E : FD E5               		push	iy
(1) 1351/     680 : E1                  		pop	hl
(1) 1352/     681 : CF                  		rst	8
(1) 1353/     682 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1354/     686 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1355/     689 : 19                  		add	hl,de
(1) 1356/     68A : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1357/     68D : B7                  		or	a
(1) 1358/     68E : 20 02               		jr	nz,.valid
(1) 1359/     690 : 3E 1A               		ld	a,MAX_TRKINDX		; LAZY MODE: If zero, Read ALL channels
(1) 1360/     692 :                     .valid:
(1) 1361/     692 : CF                  		rst	8
(1) 1362/     693 : 47                  		ld	b,a
(1) 1363/     694 :                     .next_indx:
(1) 1364/     694 : 7E                  		ld	a,(hl)			; Read index
(1) 1365/     695 : B7                  		or	a
(1) 1366/     696 : 20 09               		jr	nz,.has_indx		; If non-zero: valid
(1) 1367/     698 : C5                  		push	bc			; ** wave sync
(1) 1368/     699 : 06 04               		ld	b,4
(1) 1369/     69B : 10 FE               		djnz	$
(1) 1370/     69D : C1                  		pop	bc			; **
(1) 1371/     69E : CF                  		rst	8
(1) 1372/     69F : 18 1C               		jr	.no_indx
(1) 1373/     6A1 :                     .has_indx:
(1) 1374/     6A1 : E6 1F               		and	00011111b
(1) 1375/     6A3 : 87                  		add	a,a
(1) 1376/     6A4 : 87                  		add	a,a
(1) 1377/     6A5 : 87                  		add	a,a
(1) 1378/     6A6 : CF                  		rst	8
(1) 1379/     6A7 : 16 00               		ld	d,0
(1) 1380/     6A9 : 5F                  		ld	e,a
(1) 1381/     6AA : C5                  		push	bc
(1) 1382/     6AB : E5                  		push	hl
(1) 1383/     6AC : DD E5               		push	ix
(1) 1384/     6AE : DD 19               		add	ix,de
(1) 1385/     6B0 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1386/     6B3 : E6 0F               		and	00001111b
(1) 1387/     6B5 : C4 C5 06            		call	nz,.do_chip		; Call if non-zero
(1) 1388/     6B8 : CF                  		rst	8
(1) 1389/     6B9 : DD E1               		pop	ix
(1) 1390/     6BB : E1                  		pop	hl
(1) 1391/     6BC : C1                  		pop	bc
(1) 1392/     6BD :                     .no_indx:
(1) 1393/     6BD : 23                  		inc	hl
(1) 1394/     6BE : 10 D4               		djnz	.next_indx
(1) 1395/     6C0 : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1396/     6C4 : C9                  		ret
(1) 1397/     6C5 :                     
(1) 1398/     6C5 :                     ; ----------------------------------------
(1) 1399/     6C5 :                     ; iy - Track buffer
(1) 1400/     6C5 :                     ; ix - Current channel
(1) 1401/     6C5 :                     
(1) 1402/     6C5 :                     .do_chip:
(1) 1403/     6C5 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1404/     6C8 : B7                  		or	a
(1) 1405/     6C9 : C8                  		ret	z			; If 0 == stop
(1) 1406/     6CA : CF                  		rst	8
(1) 1407/     6CB : 3D                  		dec	a			; inst-1
(1) 1408/     6CC : E6 7F               		and	01111111b
(1) 1409/     6CE : 21 5A 1F            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1410/     6D1 : E5                  		push	hl
(1) 1411/     6D2 : 07                  		rlca
(1) 1412/     6D3 : 07                  		rlca
(1) 1413/     6D4 : 07                  		rlca
(1) 1414/     6D5 : 47                  		ld	b,a
(1) 1415/     6D6 : E6 F8               		and	11111000b
(1) 1416/     6D8 : 4F                  		ld	c,a
(1) 1417/     6D9 : 78                  		ld	a,b
(1) 1418/     6DA : AF                  		xor	a
(1) 1419/     6DB : E6 03               		and	00000011b
(1) 1420/     6DD : CF                  		rst	8
(1) 1421/     6DE : 47                  		ld	b,a
(1) 1422/     6DF : EB                  		ex	hl,de
(1) 1423/     6E0 : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1424/     6E3 : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1425/     6E6 : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1426/     6E9 : 09                  		add	hl,bc
(1) 1427/     6EA : CE 00               		adc	a,0
(1) 1428/     6EC : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1429/     6EF : CD C8 0F            		call	transferRom		; ** ROM access **
(1) 1430/     6F2 : E1                  		pop	hl
(1) 1431/     6F3 :                     .keep_it:
(1) 1432/     6F3 : E5                  		push	hl			; <-- save hl
(1) 1433/     6F4 : CD 0E 07            		call	.grab_link
(1) 1434/     6F7 : D1                  		pop	de			; --> recover as de
(1) 1435/     6F8 :                     	; hl - current table
(1) 1436/     6F8 :                     	; de - instrument data
(1) 1437/     6F8 : FE FF               		cp	-1			; Found any link?
(1) 1438/     6FA : C8                  		ret	z
(1) 1439/     6FB : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1440/     6FC : 23                  		inc	hl
(1) 1441/     6FD : 23                  		inc	hl
(1) 1442/     6FE : 23                  		inc	hl
(1) 1443/     6FF : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1444/     702 : 77                  		ld	(hl),a
(1) 1445/     703 : 01 0C 00            		ld	bc,10h-4		; Move to instr data
(1) 1446/     706 : 09                  		add	hl,bc
(1) 1447/     707 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1448/     708 : 01 08 00            		ld	bc,8
(1) 1449/     70B : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1450/     70D : C9                  		ret
(1) 1451/     70E :                     
(1) 1452/     70E :                     ; ----------------------------------------
(1) 1453/     70E :                     ; Search for a linked channel on the
(1) 1454/     70E :                     ; chip table
(1) 1455/     70E :                     ;
(1) 1456/     70E :                     ; Input:
(1) 1457/     70E :                     ; iy - Track buffer
(1) 1458/     70E :                     ; ix - Current channel
(1) 1459/     70E :                     ; hl - Intrument data
(1) 1460/     70E :                     ;
(1) 1461/     70E :                     ; Returns:
(1) 1462/     70E :                     ; hl - Channel table to use
(1) 1463/     70E :                     ;  a - Return value:
(1) 1464/     70E :                     ;       0 - Found
(1) 1465/     70E :                     ;      -1 - Not found
(1) 1466/     70E :                     ; ----------------------------------------
(1) 1467/     70E :                     
(1) 1468/     70E :                     .grab_link:
(1) 1469/     70E : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1470/     70F : E6 F0               		and	11110000b		; Filter bits
(1) 1471/     711 : 5F                  		ld	e,a			; e - NEW chip
(1) 1472/     712 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1473/     715 : E6 F0               		and	11110000b
(1) 1474/     717 : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1475/     719 : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1476/     71A : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1477/     71C : CF                  		rst	8
(1) 1478/     71D : 57                  		ld	d,a			; d - Chip to silence
(1) 1479/     71E : D5                  		push	de
(1) 1480/     71F : CD 39 07            		call	.srch_link		; Search OLD link
(1) 1481/     722 : D1                  		pop	de
(1) 1482/     723 : FE FF               		cp	-1
(1) 1483/     725 : 28 03               		jr	z,.dont_res
(1) 1484/     727 : CD 22 0F            		call	tblz_clear
(1) 1485/     72A :                     .dont_res:
(1) 1486/     72A : CF                  		rst	8
(1) 1487/     72B : 18 62               		jr	.new_chip
(1) 1488/     72D :                     .same_link:
(1) 1489/     72D : CD 39 07            		call	.srch_link		; Search link
(1) 1490/     730 : FE FF               		cp	-1
(1) 1491/     732 : C0                  		ret	nz
(1) 1492/     733 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1493/     736 : CF                  		rst	8
(1) 1494/     737 : 18 56               		jr	.new_chip
(1) 1495/     739 :                     
(1) 1496/     739 :                     ; ----------------------------------------
(1) 1497/     739 :                     ; ** RELINK **
(1) 1498/     739 :                     ; a - Chip to search for
(1) 1499/     739 :                     
(1) 1500/     739 :                     .srch_link:
(1) 1501/     739 : CD FD 07            		call	.pick_tbl	; Pick chip table in hl
(1) 1502/     73C : DD E5               		push	ix		; Copy ix to bc for checking
(1) 1503/     73E : C1                  		pop	bc
(1) 1504/     73F : B7                  		or	a		; Single table?
(1) 1505/     740 : FA 5A 07            		jp	m,.singl_link
(1) 1506/     743 :                     .srch_lloop:
(1) 1507/     743 : 7E                  		ld	a,(hl)		; Read Table's LSB
(1) 1508/     744 : FE FF               		cp	-1		; If -1 (EOL) also return -1
(1) 1509/     746 : 28 43               		jr	z,.refill
(1) 1510/     748 : B9                  		cp	c		; Same link LSB?
(1) 1511/     749 : 20 07               		jr	nz,.invldl
(1) 1512/     74B : 23                  		inc	hl
(1) 1513/     74C : CF                  		rst	8
(1) 1514/     74D : 7E                  		ld	a,(hl)
(1) 1515/     74E : 2B                  		dec	hl
(1) 1516/     74F : B8                  		cp	b		; Same link MSB?
(1) 1517/     750 : 28 16               		jr	z,.reroll
(1) 1518/     752 :                     .invldl:
(1) 1519/     752 : D5                  		push	de
(1) 1520/     753 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1521/     756 : 19                  		add	hl,de
(1) 1522/     757 : D1                  		pop	de
(1) 1523/     758 : 18 E9               		jr	.srch_lloop
(1) 1524/     75A :                     
(1) 1525/     75A :                     ; ----------------------
(1) 1526/     75A :                     ; PSGN/FM3/FM6
(1) 1527/     75A :                     .singl_link:
(1) 1528/     75A : 23                  		inc	hl			; Read MSB first
(1) 1529/     75B : 7E                  		ld	a,(hl)
(1) 1530/     75C : 2B                  		dec	hl
(1) 1531/     75D : CF                  		rst	8
(1) 1532/     75E : B8                  		cp	b			; MSB match?
(1) 1533/     75F : 20 2A               		jr	nz,.refill
(1) 1534/     761 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1535/     762 : B9                  		cp	c
(1) 1536/     763 : 20 26               		jr	nz,.refill
(1) 1537/     765 : C3 8D 07            		jp	.rnot_psg
(1) 1538/     768 :                     
(1) 1539/     768 :                     ; ----------------------------------------
(1) 1540/     768 :                     ; *** Special re-roll check for
(1) 1541/     768 :                     ; listed tables ***
(1) 1542/     768 :                     
(1) 1543/     768 :                     .reroll:
(1) 1544/     768 : E5                  		push	hl
(1) 1545/     769 : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1546/     76C : 09                  		add	hl,bc
(1) 1547/     76D : CF                  		rst	8
(1) 1548/     76E : 4E                  		ld	c,(hl)		; c - ID
(1) 1549/     76F : E1                  		pop	hl
(1) 1550/     770 : 7B                  		ld	a,e
(1) 1551/     771 : FE 80               		cp	80h		; PSG?
(1) 1552/     773 : 20 18               		jr	nz,.rnot_psg
(1) 1553/     775 :                     	; Special PSG3/PSGN check
(1) 1554/     775 : 3A F4 1C            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1555/     778 : E6 03               		and	011b
(1) 1556/     77A : FE 03               		cp	011b
(1) 1557/     77C : 20 0F               		jr	nz,.rnot_psg
(1) 1558/     77E : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1559/     77F : FE 02               		cp	2
(1) 1560/     781 : 20 0A               		jr	nz,.rnot_psg
(1) 1561/     783 : CF                  		rst	8
(1) 1562/     784 : D5                  		push	de
(1) 1563/     785 : 16 80               		ld	d,80h		; Force silence
(1) 1564/     787 : CD 22 0F            		call	tblz_clear
(1) 1565/     78A : D1                  		pop	de
(1) 1566/     78B :                     .refill:
(1) 1567/     78B : 18 6D               		jr	.set_asfull
(1) 1568/     78D :                     .rnot_psg:
(1) 1569/     78D : AF                  		xor	a
(1) 1570/     78E : C9                  		ret
(1) 1571/     78F :                     
(1) 1572/     78F :                     ; ----------------------------------------
(1) 1573/     78F :                     ; *** NEW CHIP ***
(1) 1574/     78F :                     ; e - Chip to set
(1) 1575/     78F :                     
(1) 1576/     78F :                     .new_chip:
(1) 1577/     78F : 7B                  		ld	a,e			; Read NEW chip
(1) 1578/     790 : B7                  		or	a			; If non-minus, exit.
(1) 1579/     791 : F2 FA 07            		jp	p,.set_asfull
(1) 1580/     794 : CD FD 07            		call	.pick_tbl
(1) 1581/     797 : CF                  		rst	8
(1) 1582/     798 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1583/     79B : B7                  		or	a
(1) 1584/     79C : FA EA 07            		jp	m,.singl_free
(1) 1585/     79F : E5                  		push	hl			; Backup START table
(1) 1586/     7A0 :                     ; PASS 1
(1) 1587/     7A0 :                     .srch_free:
(1) 1588/     7A0 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1589/     7A1 : FE FF               		cp	-1			; If -1, return -1
(1) 1590/     7A3 : 28 0B               		jr	z,.pass_2
(1) 1591/     7A5 : 23                  		inc	hl
(1) 1592/     7A6 : 46                  		ld	b,(hl)			; Read MSB
(1) 1593/     7A7 : 2B                  		dec	hl
(1) 1594/     7A8 :                     ; 		nop	; wave sync
(1) 1595/     7A8 :                     ; 		nop
(1) 1596/     7A8 :                     ; 		rst	8
(1) 1597/     7A8 :                     ; 		nop
(1) 1598/     7A8 :                     ; 		nop
(1) 1599/     7A8 : B0                  		or	b
(1) 1600/     7A9 : 28 22               		jr	z,.new_link_z
(1) 1601/     7AB : CD C6 07            		call	.nextsrch_tbl
(1) 1602/     7AE : 18 F0               		jr	.srch_free
(1) 1603/     7B0 :                     
(1) 1604/     7B0 :                     ; PASS 2
(1) 1605/     7B0 :                     ; Rewrite mode
(1) 1606/     7B0 :                     .pass_2:
(1) 1607/     7B0 : E1                  		pop	hl
(1) 1608/     7B1 :                     .next_prio:
(1) 1609/     7B1 : 7E                  		ld	a,(hl)		; Read LSB
(1) 1610/     7B2 : FE FF               		cp	-1		; If -1, return -1
(1) 1611/     7B4 : C8                  		ret	z
(1) 1612/     7B5 : 23                  		inc	hl
(1) 1613/     7B6 : 23                  		inc	hl
(1) 1614/     7B7 : 7E                  		ld	a,(hl)		; Read priority
(1) 1615/     7B8 : 2B                  		dec	hl
(1) 1616/     7B9 : 2B                  		dec	hl
(1) 1617/     7BA : B7                  		or	a		; Failsafe zero priority overwrite
(1) 1618/     7BB : 28 14               		jr	z,.new_link_o
(1) 1619/     7BD : B9                  		cp	c
(1) 1620/     7BE :                     ; 		jr	z,.new_link_o
(1) 1621/     7BE : 38 11               		jr	c,.new_link_o
(1) 1622/     7C0 : CF                  		rst	8
(1) 1623/     7C1 : CD C6 07            		call	.nextsrch_tbl
(1) 1624/     7C4 : 18 EB               		jr	.next_prio
(1) 1625/     7C6 :                     .nextsrch_tbl:
(1) 1626/     7C6 : D5                  		push	de
(1) 1627/     7C7 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1628/     7CA : 19                  		add	hl,de
(1) 1629/     7CB : D1                  		pop	de
(1) 1630/     7CC :                     ; 		nop	; wave sync
(1) 1631/     7CC :                     ; 		nop
(1) 1632/     7CC :                     ; 		rst	8
(1) 1633/     7CC :                     ; 		nop
(1) 1634/     7CC :                     ; 		nop
(1) 1635/     7CC : C9                  		ret
(1) 1636/     7CD :                     .new_link_z:
(1) 1637/     7CD : 33                  		inc	sp		; skip backup
(1) 1638/     7CE : 33                  		inc	sp
(1) 1639/     7CF : 18 08               		jr	.new_link
(1) 1640/     7D1 :                     
(1) 1641/     7D1 :                     ; OVERWRITE link
(1) 1642/     7D1 :                     .new_link_o:
(1) 1643/     7D1 : E5                  		push	hl
(1) 1644/     7D2 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1645/     7D5 : CD 22 0F            		call	tblz_clear
(1) 1646/     7D8 : E1                  		pop	hl
(1) 1647/     7D9 :                     ; NEW link
(1) 1648/     7D9 :                     .new_link:
(1) 1649/     7D9 : CF                  		rst	8
(1) 1650/     7DA : 23                  		inc	hl
(1) 1651/     7DB : 23                  		inc	hl
(1) 1652/     7DC :                     ; hl+2
(1) 1653/     7DC :                     .l_hiprio:
(1) 1654/     7DC : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1655/     7DF : DD E5               		push	ix
(1) 1656/     7E1 : D1                  		pop	de
(1) 1657/     7E2 : 71                  		ld	(hl),c		; Write priority
(1) 1658/     7E3 : 2B                  		dec	hl
(1) 1659/     7E4 : CF                  		rst	8
(1) 1660/     7E5 : 72                  		ld 	(hl),d		; MSB
(1) 1661/     7E6 : 2B                  		dec	hl
(1) 1662/     7E7 : 73                  		ld	(hl),e		; LSB
(1) 1663/     7E8 : AF                  		xor	a		; Return OK
(1) 1664/     7E9 : C9                  		ret
(1) 1665/     7EA :                     
(1) 1666/     7EA :                     ; Single slot
(1) 1667/     7EA :                     ; c - priority
(1) 1668/     7EA :                     ; e - chip
(1) 1669/     7EA :                     .singl_free:
(1) 1670/     7EA : 46                  		ld	b,(hl)
(1) 1671/     7EB : 23                  		inc	hl
(1) 1672/     7EC : 7E                  		ld	a,(hl)
(1) 1673/     7ED : 23                  		inc	hl
(1) 1674/     7EE : B0                  		or	b
(1) 1675/     7EF : 28 EB               		jr	z,.l_hiprio
(1) 1676/     7F1 : CF                  		rst	8
(1) 1677/     7F2 : 7E                  		ld	a,(hl)
(1) 1678/     7F3 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1679/     7F4 : 28 E6               		jr	z,.l_hiprio
(1) 1680/     7F6 : B9                  		cp	c
(1) 1681/     7F7 :                     ; 		jr	z,.l_hiprio
(1) 1682/     7F7 : 38 E3               		jr	c,.l_hiprio		; PRIORITY
(1) 1683/     7F9 : CF                  		rst	8
(1) 1684/     7FA :                     .set_asfull:
(1) 1685/     7FA : 3E FF               		ld	a,-1			; Return -1
(1) 1686/     7FC : C9                  		ret
(1) 1687/     7FD :                     
(1) 1688/     7FD :                     ; Pick chip table
(1) 1689/     7FD :                     ; In:
(1) 1690/     7FD :                     ;  a - ID
(1) 1691/     7FD :                     ;
(1) 1692/     7FD :                     ; Out:
(1) 1693/     7FD :                     ;  a - Special bit + ID
(1) 1694/     7FD :                     ;
(1) 1695/     7FD :                     ; hl - Table
(1) 1696/     7FD :                     .pick_tbl:
(1) 1697/     7FD : D5                  		push	de
(1) 1698/     7FE : 0F                  		rrca
(1) 1699/     7FF : 0F                  		rrca
(1) 1700/     800 : 0F                  		rrca
(1) 1701/     801 : 0F                  		rrca
(1) 1702/     802 : E6 07               		and	00000111b
(1) 1703/     804 : 87                  		add	a,a
(1) 1704/     805 : 21 60 1A            		ld	hl,tblList
(1) 1705/     808 : E5                  		push	hl
(1) 1706/     809 : 16 00               		ld	d,0
(1) 1707/     80B : 5F                  		ld	e,a
(1) 1708/     80C : 19                  		add	hl,de
(1) 1709/     80D : 5E                  		ld	e,(hl)
(1) 1710/     80E : 23                  		inc	hl
(1) 1711/     80F : 7E                  		ld	a,(hl)
(1) 1712/     810 : 57                  		ld	d,a
(1) 1713/     811 : E6 80               		and	10000000b
(1) 1714/     813 : CB BA               		res	7,d
(1) 1715/     815 : E1                  		pop	hl
(1) 1716/     816 : 19                  		add	hl,de
(1) 1717/     817 : D1                  		pop	de
(1) 1718/     818 : C9                  		ret
(1) 1719/     819 :                     
(1) 1720/     819 :                     ; ============================================
(1) 1721/     819 :                     ; ----------------------------------------
(1) 1722/     819 :                     ; Process chip using it's table
(1) 1723/     819 :                     ;
(1) 1724/     819 :                     ; iy - table to read
(1) 1725/     819 :                     ; ----------------------------------------
(1) 1726/     819 :                     
(1) 1727/     819 :                     dtbl_multi:
(1) 1728/     819 : FD 7E 00            		ld	a,(iy)
(1) 1729/     81C : FE FF               		cp	-1
(1) 1730/     81E : C8                  		ret	z
(1) 1731/     81F : CD 2F 08            		call	dtbl_singl
(1) 1732/     822 : CF                  		rst	8
(1) 1733/     823 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1734/     826 : FD 19               		add	iy,de
(1) 1735/     828 : 06 04               		ld	b,4		; ** wave sync ** IMPORTANT
(1) 1736/     82A : 10 FE               		djnz	$
(1) 1737/     82C : CF                  		rst	8
(1) 1738/     82D : 18 EA               		jr	dtbl_multi
(1) 1739/     82F :                     dtbl_singl:
(1) 1740/     82F : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1741/     832 : FD 56 01            		ld	d,(iy+1)
(1) 1742/     835 : 7A                  		ld	a,d		; If no-zero, active
(1) 1743/     836 : B3                  		or	e
(1) 1744/     837 : 20 60               		jr	nz,.linked
(1) 1745/     839 : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1746/     83C : B7                  		or	a
(1) 1747/     83D : F0                  		ret	p		; Return if not.
(1) 1748/     83E : CF                  		rst	8
(1) 1749/     83F : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1750/     843 :                     
(1) 1751/     843 :                     ; ----------------------------------------
(1) 1752/     843 :                     ; chip-silence request
(1) 1753/     843 :                     ; iy - Table
(1) 1754/     843 : E6 F0               		and	11110000b
(1) 1755/     845 : FE 80               		cp	80h
(1) 1756/     847 : 28 1E               		jr	z,.siln_psg
(1) 1757/     849 : FE 90               		cp	90h
(1) 1758/     84B : 28 16               		jr	z,.siln_psg_n
(1) 1759/     84D : FE A0               		cp	0A0h
(1) 1760/     84F : 28 42               		jr	z,.siln_fm
(1) 1761/     851 : FE B0               		cp	0B0h
(1) 1762/     853 : 28 3E               		jr	z,.siln_fm
(1) 1763/     855 : CF                  		rst	8
(1) 1764/     856 : FE C0               		cp	0C0h
(1) 1765/     858 : 28 36               		jr	z,.siln_dac
(1) 1766/     85A : FE D0               		cp	0D0h
(1) 1767/     85C : 28 10               		jr	z,.siln_pcm
(1) 1768/     85E : FE E0               		cp	0E0h
(1) 1769/     860 : 28 18               		jr	z,.siln_pwm
(1) 1770/     862 : C9                  		ret
(1) 1771/     863 :                     .siln_psg_n:
(1) 1772/     863 : AF                  		xor	a
(1) 1773/     864 : 32 F4 1C            		ld	(psgHatMode),a
(1) 1774/     867 :                     .siln_psg:
(1) 1775/     867 : CF                  		rst	8
(1) 1776/     868 : DD 21 25 15         		ld	ix,psgcom
(1) 1777/     86C : 18 16               		jr	.rcyl_com
(1) 1778/     86E :                     
(1) 1779/     86E :                     ; --------------------------------
(1) 1780/     86E :                     
(1) 1781/     86E :                     .siln_pcm:
(1) 1782/     86E : 3E 01               		ld	a,1
(1) 1783/     870 : 32 F0 1B            		ld	(mcdUpd),a
(1) 1784/     873 : CF                  		rst	8
(1) 1785/     874 : DD 21 AD 14         		ld	ix,pcmcom
(1) 1786/     878 : 18 0A               		jr	.rcyl_com
(1) 1787/     87A :                     .siln_pwm:
(1) 1788/     87A : 3E 01               		ld	a,1
(1) 1789/     87C : 32 EF 1B            		ld	(marsUpd),a
(1) 1790/     87F : CF                  		rst	8
(1) 1791/     880 : DD 21 ED 14         		ld	ix,pwmcom
(1) 1792/     884 :                     ; 		jr	.rcyl_com
(1) 1793/     884 :                     
(1) 1794/     884 :                     ; --------------------------------
(1) 1795/     884 :                     
(1) 1796/     884 :                     .rcyl_com:
(1) 1797/     884 : 06 00               		ld	b,0
(1) 1798/     886 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1799/     889 : DD 09               		add	ix,bc
(1) 1800/     88B : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1801/     88F : C9                  		ret
(1) 1802/     890 :                     
(1) 1803/     890 :                     ; --------------------------------
(1) 1804/     890 :                     
(1) 1805/     890 :                     .siln_dac:
(1) 1806/     890 : CD 14 12            		call	dac_off
(1) 1807/     893 :                     .siln_fm:
(1) 1808/     893 : CD 78 0A            		call	.fm_keyoff
(1) 1809/     896 : C3 80 0A            		jp	.fm_tloff
(1) 1810/     899 :                     
(1) 1811/     899 :                     ; ----------------------------------------
(1) 1812/     899 :                     ; Process channel now
(1) 1813/     899 :                     ; iy - Table
(1) 1814/     899 :                     ; ix - Tracker channel
(1) 1815/     899 :                     .linked:
(1) 1816/     899 : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1817/     89A : 47                  		ld	b,a		; b - flags to check
(1) 1818/     89B : E6 0F               		and	00001111b	; evin flags?
(1) 1819/     89D : C8                  		ret	z
(1) 1820/     89E : 78                  		ld	a,b
(1) 1821/     89F : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1822/     8A1 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1823/     8A2 : FD E5               		push	iy		; table+10h instrment data
(1) 1824/     8A4 : D5                  		push	de
(1) 1825/     8A5 : DD E1               		pop	ix
(1) 1826/     8A7 : E1                  		pop	hl
(1) 1827/     8A8 : 11 10 00            		ld	de,10h		; Go to stored inst data
(1) 1828/     8AB : 19                  		add	hl,de
(1) 1829/     8AC :                     
(1) 1830/     8AC :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1831/     8AC :                     	; iy - Our chip table
(1) 1832/     8AC :                     	; ix - Track channel
(1) 1833/     8AC :                     	; hl - Intrument data
(1) 1834/     8AC : CB 40               		bit	0,b		; Note
(1) 1835/     8AE : C4 94 0E            		call	nz,.note
(1) 1836/     8B1 : CB 48               		bit	1,b		; Intrument
(1) 1837/     8B3 : C4 E6 0C            		call	nz,.inst
(1) 1838/     8B6 : CF                  		rst	8
(1) 1839/     8B7 : CB 50               		bit	2,b		; Volume
(1) 1840/     8B9 : C4 DD 0C            		call	nz,.volu
(1) 1841/     8BC : CB 58               		bit	3,b		; Effect
(1) 1842/     8BE : C4 DB 0B            		call	nz,.effc
(1) 1843/     8C1 :                     
(1) 1844/     8C1 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1845/     8C2 : E6 70               		and	01110000b	; Filter bits
(1) 1846/     8C4 : 0F                  		rrca
(1) 1847/     8C5 : 0F                  		rrca
(1) 1848/     8C6 : 0F                  		rrca
(1) 1849/     8C7 : CF                  		rst	8
(1) 1850/     8C8 : 16 00               		ld	d,0
(1) 1851/     8CA : 5F                  		ld	e,a
(1) 1852/     8CB : 21 D4 08            		ld	hl,.mk_list
(1) 1853/     8CE : 19                  		add	hl,de
(1) 1854/     8CF : 7E                  		ld	a,(hl)
(1) 1855/     8D0 : 23                  		inc	hl
(1) 1856/     8D1 : 66                  		ld	h,(hl)
(1) 1857/     8D2 : 6F                  		ld	l,a
(1) 1858/     8D3 : E9                  		jp	(hl)
(1) 1859/     8D4 :                     ; --------------------------------
(1) 1860/     8D4 :                     .mk_list:
(1) 1861/     8D4 : 2A 09               		dw .mk_psg
(1) 1862/     8D6 : E2 08               		dw .mk_psgn
(1) 1863/     8D8 : 8E 09               		dw .mk_fm
(1) 1864/     8DA : 0E 0A               		dw .mk_fmspc
(1) 1865/     8DC : 62 0B               		dw .mk_dac
(1) 1866/     8DE : B9 0B               		dw .mk_pcm
(1) 1867/     8E0 : BA 0B               		dw .mk_pwm
(1) 1868/     8E2 :                     
(1) 1869/     8E2 :                     ; --------------------------------
(1) 1870/     8E2 :                     ; PSGN
(1) 1871/     8E2 :                     ; --------------------------------
(1) 1872/     8E2 :                     
(1) 1873/     8E2 :                     .mk_psgn:
(1) 1874/     8E2 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1875/     8E5 : DD E5               		push	ix
(1) 1876/     8E7 : DD 21 28 15         		ld	ix,psgcom+3	; Steal PSG3
(1) 1877/     8EB : CB 40               		bit	0,b
(1) 1878/     8ED : CA 79 09            		jp	z,.psg_keyon
(1) 1879/     8F0 : CF                  		rst	8
(1) 1880/     8F1 : FE FE               		cp	-2
(1) 1881/     8F3 : 28 21               		jr	z,.kycut_psgn
(1) 1882/     8F5 : FE FF               		cp	-1
(1) 1883/     8F7 : 28 10               		jr	z,.kyoff_psgn
(1) 1884/     8F9 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1885/     8FD : 5F                  		ld	e,a
(1) 1886/     8FE : 3A F4 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1887/     901 : E6 03               		and	011b
(1) 1888/     903 : FE 03               		cp	011b
(1) 1889/     905 : 20 72               		jr	nz,.psg_keyon	; Normal
(1) 1890/     907 : 18 42               		jr	.from_psgn	; Tone 3
(1) 1891/     909 :                     
(1) 1892/     909 :                     ; --------------------------------
(1) 1893/     909 :                     ; PSG
(1) 1894/     909 :                     ; --------------------------------
(1) 1895/     909 :                     
(1) 1896/     909 :                     ; -1
(1) 1897/     909 :                     .kyoff_psgn:
(1) 1898/     909 : CD 23 09            		call	.kypsgn_hatoff
(1) 1899/     90C :                     .kyoff_psg:
(1) 1900/     90C : 0E 02               		ld	c,010b
(1) 1901/     90E : DD 71 00            		ld	(ix),c
(1) 1902/     911 : DD E1               		pop	ix
(1) 1903/     913 : C3 0A 0F            		jp	.chnl_ulnkoff
(1) 1904/     916 :                     ; -2
(1) 1905/     916 :                     .kycut_psgn:
(1) 1906/     916 : CD 23 09            		call	.kypsgn_hatoff
(1) 1907/     919 :                     .kycut_psg:
(1) 1908/     919 : 0E 04               		ld	c,100b
(1) 1909/     91B : DD 71 00            		ld	(ix),c
(1) 1910/     91E : DD E1               		pop	ix
(1) 1911/     920 : C3 04 0F            		jp	.chnl_ulnkcut
(1) 1912/     923 :                     .kypsgn_hatoff:
(1) 1913/     923 : 3E 00               		ld	a,000b
(1) 1914/     925 : 32 F4 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1915/     928 : CF                  		rst	8
(1) 1916/     929 : C9                  		ret
(1) 1917/     92A :                     
(1) 1918/     92A :                     .mk_psg:
(1) 1919/     92A : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1920/     92D : DD E5               		push	ix
(1) 1921/     92F : CF                  		rst	8
(1) 1922/     930 : DD 21 25 15         		ld	ix,psgcom	; ix - psgcom
(1) 1923/     934 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1924/     937 : 16 00               		ld	d,0
(1) 1925/     939 : DD 19               		add	ix,de
(1) 1926/     93B : CB 40               		bit	0,b
(1) 1927/     93D : 28 3A               		jr	z,.psg_keyon
(1) 1928/     93F : FE FE               		cp	-2
(1) 1929/     941 : 28 D6               		jr	z,.kycut_psg
(1) 1930/     943 : FE FF               		cp	-1
(1) 1931/     945 : 28 C5               		jr	z,.kyoff_psg
(1) 1932/     947 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1933/     94B :                     .from_psgn:
(1) 1934/     94B : CF                  		rst	8
(1) 1935/     94C : 16 00               		ld	d,0			; de - note*2
(1) 1936/     94E : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; Freq index
(1) 1937/     951 : 21 FD 12            		ld	hl,psgFreq_List-(36*2)	; <-- 48
(1) 1938/     954 : 19                  		add	hl,de
(1) 1939/     955 : 7E                  		ld	a,(hl)
(1) 1940/     956 : 23                  		inc	hl
(1) 1941/     957 : 66                  		ld	h,(hl)
(1) 1942/     958 : 6F                  		ld	l,a
(1) 1943/     959 : 3A 3E 00            		ld	a,(palMode)
(1) 1944/     95C : B7                  		or	a
(1) 1945/     95D : 28 01               		jr	z,.not_palp
(1) 1946/     95F : 2B                  		dec	hl
(1) 1947/     960 :                     .not_palp:
(1) 1948/     960 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1949/     963 : 07                  		rlca			; << 3
(1) 1950/     964 : 07                  		rlca
(1) 1951/     965 : CF                  		rst	8
(1) 1952/     966 : 07                  		rlca
(1) 1953/     967 : 57                  		ld	d,a
(1) 1954/     968 : E6 F8               		and	11111000b
(1) 1955/     96A : 5F                  		ld	e,a
(1) 1956/     96B : 7A                  		ld	a,d
(1) 1957/     96C : E6 07               		and	00000111b
(1) 1958/     96E : 57                  		ld	d,a
(1) 1959/     96F : 37                  		scf
(1) 1960/     970 : 3F                  		ccf
(1) 1961/     971 : ED 52               		sbc	hl,de
(1) 1962/     973 : DD 75 1C            		ld	(ix+DTL),l
(1) 1963/     976 : DD 74 20            		ld	(ix+DTH),h
(1) 1964/     979 :                     .psg_keyon:
(1) 1965/     979 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1966/     97C : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1967/     97F : ED 44               		neg	a
(1) 1968/     981 : CF                  		rst	8
(1) 1969/     982 : 87                  		add	a,a
(1) 1970/     983 : 87                  		add	a,a
(1) 1971/     984 : 30 02               		jr	nc,.vmuch
(1) 1972/     986 : 3E FF               		ld	a,-1
(1) 1973/     988 :                     .vmuch:
(1) 1974/     988 : DD 77 30            		ld	(ix+PVOL),a
(1) 1975/     98B : DD E1               		pop	ix
(1) 1976/     98D : C9                  		ret
(1) 1977/     98E :                     
(1) 1978/     98E :                     ; --------------------------------
(1) 1979/     98E :                     ; FM
(1) 1980/     98E :                     ; --------------------------------
(1) 1981/     98E :                     
(1) 1982/     98E :                     .mk_fm:
(1) 1983/     98E : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 1984/     991 : CB 40               		bit	0,b		; NEW note?
(1) 1985/     993 : 28 65               		jr	z,.mkfm_set
(1) 1986/     995 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1987/     998 : FE FE               		cp	-2
(1) 1988/     99A : CA 6F 0A            		jp	z,.fm_cut
(1) 1989/     99D : FE FF               		cp	-1
(1) 1990/     99F : CA 69 0A            		jp	z,.fm_off
(1) 1991/     9A2 :                     ; 		call	.fm_tloff
(1) 1992/     9A2 : CF                  		rst	8
(1) 1993/     9A3 : 79                  		ld	a,c
(1) 1994/     9A4 : FE 06               		cp	6
(1) 1995/     9A6 : 20 05               		jr	nz,.not_dac
(1) 1996/     9A8 : CD 14 12            		call	dac_off
(1) 1997/     9AB : 18 15               		jr	.not_dspc
(1) 1998/     9AD :                     .not_dac:
(1) 1999/     9AD :                     ; 		ld	a,c
(1) 2000/     9AD : FE 02               		cp	2
(1) 2001/     9AF : 20 11               		jr	nz,.not_dspc
(1) 2002/     9B1 : 3A F5 1C            		ld	a,(fmSpecial)
(1) 2003/     9B4 : B7                  		or	a
(1) 2004/     9B5 : 28 0B               		jr	z,.not_dspc
(1) 2005/     9B7 : 11 00 27            		ld	de,2700h	; CH3 off
(1) 2006/     9BA : CD E9 11            		call	fm_send_1
(1) 2007/     9BD : 3E 00               		ld	a,0
(1) 2008/     9BF : 32 F5 1C            		ld	(fmSpecial),a
(1) 2009/     9C2 :                     .not_dspc:
(1) 2010/     9C2 : CD 78 0A            		call	.fm_keyoff
(1) 2011/     9C5 : C5                  		push	bc
(1) 2012/     9C6 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 2013/     9C9 : 47                  		ld	b,a
(1) 2014/     9CA : E6 1F               		and	00011111b
(1) 2015/     9CC : 5F                  		ld	e,a
(1) 2016/     9CD : 16 00               		ld	d,0
(1) 2017/     9CF : 21 2D 13            		ld	hl,fmFreq_List
(1) 2018/     9D2 : 19                  		add	hl,de
(1) 2019/     9D3 : 7E                  		ld	a,(hl)
(1) 2020/     9D4 : CF                  		rst	8
(1) 2021/     9D5 : 23                  		inc	hl
(1) 2022/     9D6 : 66                  		ld	h,(hl)
(1) 2023/     9D7 : 6F                  		ld	l,a
(1) 2024/     9D8 : 3A 3E 00            		ld	a,(palMode)
(1) 2025/     9DB : B7                  		or	a
(1) 2026/     9DC : 28 04               		jr	z,.not_pal
(1) 2027/     9DE : 11 04 00            		ld	de,4
(1) 2028/     9E1 : 19                  		add	hl,de
(1) 2029/     9E2 :                     .not_pal:
(1) 2030/     9E2 : 78                  		ld	a,b
(1) 2031/     9E3 : E6 E0               		and	11100000b
(1) 2032/     9E5 : 0F                  		rrca
(1) 2033/     9E6 : 0F                  		rrca
(1) 2034/     9E7 : B4                  		or	h
(1) 2035/     9E8 : 67                  		ld	h,a
(1) 2036/     9E9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2037/     9EC : CF                  		rst	8
(1) 2038/     9ED : AF                  		xor	a		; Clear high
(1) 2039/     9EE : 3F                  		ccf			; Clear carry
(1) 2040/     9EF : CB 23               		sla	e		; << 2
(1) 2041/     9F1 : CB 23               		sla	e
(1) 2042/     9F3 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2043/     9F4 : 57                  		ld	d,a
(1) 2044/     9F5 : 19                  		add	hl,de
(1) 2045/     9F6 : CD 97 0A            		call	.fm_setfreq
(1) 2046/     9F9 : C1                  		pop	bc
(1) 2047/     9FA :                     
(1) 2048/     9FA :                     ; --------------------------------
(1) 2049/     9FA :                     
(1) 2050/     9FA :                     .mkfm_set:
(1) 2054/     9FA : CD 2C 0B            		call	.fm_wrtalpan		; Panning and effects
(1) 2055/     9FD : CD AE 0A            		call	.fm_wrtlvol		; FM volume control
(1) 2056/     A00 : FD 7E 0F            		ld	a,(iy+ztbl_FM_keys)	; 0Fh - keys ***
(1) 2057/     A03 : E6 F0               		and	11110000b
(1) 2058/     A05 : B1                  		or	c			; Merge FM channel
(1) 2059/     A06 : 5F                  		ld	e,a
(1) 2060/     A07 : 16 28               		ld	d,28h
(1) 2061/     A09 : CD E9 11            		call	fm_send_1		; Set keys
(1) 2062/     A0C : CF                  		rst	8
(1) 2063/     A0D :                     .nofm_note:
(1) 2064/     A0D : C9                  		ret
(1) 2066/     A0E :                     
(1) 2067/     A0E :                     ; --------------------------------
(1) 2068/     A0E :                     ; FM3 special
(1) 2069/     A0E :                     ; --------------------------------
(1) 2070/     A0E :                     
(1) 2071/     A0E :                     .mk_fmspc:
(1) 2072/     A0E : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 2073/     A11 : CB 40               		bit	0,b		; NEW Note?
(1) 2074/     A13 : 28 E5               		jr	z,.mkfm_set
(1) 2075/     A15 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2076/     A18 : FE FE               		cp	-2
(1) 2077/     A1A : CA 6F 0A            		jp	z,.fm_cut
(1) 2078/     A1D : FE FF               		cp	-1
(1) 2079/     A1F : CA 69 0A            		jp	z,.fm_off
(1) 2080/     A22 : CD 78 0A            		call	.fm_keyoff
(1) 2081/     A25 : 21 DA 1B            		ld	hl,fmcach_list	; Read external freqs
(1) 2082/     A28 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2083/     A2B : E6 07               		and	0111b
(1) 2084/     A2D : 16 00               		ld	d,0
(1) 2085/     A2F : 87                  		add	a,a
(1) 2086/     A30 : 5F                  		ld	e,a
(1) 2087/     A31 : CF                  		rst	8
(1) 2088/     A32 : 19                  		add	hl,de
(1) 2089/     A33 : 7E                  		ld	a,(hl)
(1) 2090/     A34 : 23                  		inc	hl
(1) 2091/     A35 : 66                  		ld	h,(hl)
(1) 2092/     A36 : 6F                  		ld	l,a
(1) 2093/     A37 : CF                  		rst	8
(1) 2094/     A38 : 11 20 00            		ld	de,20h		; point to regs
(1) 2095/     A3B : 19                  		add	hl,de
(1) 2096/     A3C : DD E5               		push	ix
(1) 2097/     A3E : DD 21 61 0A         		ld	ix,.spcreglist
(1) 2098/     A42 : 06 08               		ld	b,8
(1) 2099/     A44 :                     .wr_spc:
(1) 2100/     A44 : DD 56 00            		ld	d,(ix)
(1) 2101/     A47 : 5E                  		ld	e,(hl)
(1) 2102/     A48 : CD E9 11            		call	fm_send_1
(1) 2103/     A4B : CF                  		rst	8
(1) 2104/     A4C : 23                  		inc	hl
(1) 2105/     A4D : DD 23               		inc	ix
(1) 2106/     A4F : 10 F3               		djnz	.wr_spc
(1) 2107/     A51 : DD E1               		pop	ix
(1) 2108/     A53 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2109/     A56 : CD E9 11            		call	fm_send_1
(1) 2110/     A59 : 3E 01               		ld	a,1
(1) 2111/     A5B : 32 F5 1C            		ld	(fmSpecial),a
(1) 2112/     A5E : C3 FA 09            		jp	.mkfm_set
(1) 2113/     A61 :                     .spcreglist:
(1) 2114/     A61 : AD A9               		db 0ADh,0A9h
(1) 2115/     A63 : AC A8               		db 0ACh,0A8h
(1) 2116/     A65 : AE AA               		db 0AEh,0AAh
(1) 2117/     A67 : A6 A2               		db 0A6h,0A2h
(1) 2118/     A69 :                     
(1) 2119/     A69 :                     ; ----------------------------------------
(1) 2120/     A69 :                     
(1) 2121/     A69 :                     .fm_off:
(1) 2122/     A69 : CD 78 0A            		call	.fm_keyoff
(1) 2123/     A6C : C3 0A 0F            		jp	.chnl_ulnkoff
(1) 2124/     A6F :                     .fm_cut:
(1) 2125/     A6F : CD 78 0A            		call	.fm_keyoff
(1) 2126/     A72 : CD 80 0A            		call	.fm_tloff
(1) 2127/     A75 : C3 04 0F            		jp	.chnl_ulnkcut
(1) 2128/     A78 :                     
(1) 2129/     A78 :                     ; ----------------------------------------
(1) 2130/     A78 :                     
(1) 2131/     A78 :                     .fm_keyoff:
(1) 2132/     A78 : 16 28               		ld	d,28h
(1) 2133/     A7A : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2134/     A7D : C3 E9 11            		jp	fm_send_1
(1) 2135/     A80 :                     .fm_tloff:
(1) 2136/     A80 : 06 04               		ld	b,4
(1) 2137/     A82 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2138/     A85 : 79                  		ld	a,c
(1) 2139/     A86 : E6 03               		and	011b
(1) 2140/     A88 : F6 40               		or	40h	; TL regs
(1) 2141/     A8A : 1E 7F               		ld	e,7Fh
(1) 2142/     A8C :                     .tl_down:
(1) 2143/     A8C : 57                  		ld	d,a
(1) 2144/     A8D :                     ; 		ld	e,7Fh
(1) 2145/     A8D : CD E5 11            		call	fm_autoreg
(1) 2146/     A90 : CF                  		rst	8
(1) 2147/     A91 : 7A                  		ld	a,d
(1) 2148/     A92 : C6 04               		add	a,4
(1) 2149/     A94 : 10 F6               		djnz	.tl_down
(1) 2150/     A96 : C9                  		ret
(1) 2151/     A97 :                     ; c - KeyID
(1) 2152/     A97 :                     .fm_setfreq:
(1) 2153/     A97 : 79                  		ld	a,c
(1) 2154/     A98 : E6 03               		and	011b
(1) 2155/     A9A : F6 A4               		or	0A4h
(1) 2156/     A9C : 57                  		ld	d,a
(1) 2157/     A9D : 5C                  		ld	e,h
(1) 2158/     A9E : CF                  		rst	8
(1) 2159/     A9F : CD E5 11            		call	fm_autoreg
(1) 2160/     AA2 : 79                  		ld	a,c
(1) 2161/     AA3 : E6 03               		and	011b
(1) 2162/     AA5 : F6 A0               		or	0A0h
(1) 2163/     AA7 : 57                  		ld	d,a
(1) 2164/     AA8 : 5D                  		ld	e,l
(1) 2165/     AA9 : CD E5 11            		call	fm_autoreg
(1) 2166/     AAC : CF                  		rst	8
(1) 2167/     AAD : C9                  		ret
(1) 2168/     AAE :                     
(1) 2169/     AAE :                     ; --------------------------------
(1) 2170/     AAE :                     ; WRITE TL volume
(1) 2171/     AAE :                     
(1) 2172/     AAE :                     .fm_wrtlvol:
(1) 2173/     AAE : 21 DA 1B            		ld	hl,fmcach_list
(1) 2174/     AB1 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2175/     AB4 : E6 07               		and	0111b
(1) 2176/     AB6 : 16 00               		ld	d,0
(1) 2177/     AB8 : CF                  		rst	8
(1) 2178/     AB9 : 87                  		add	a,a
(1) 2179/     ABA : 5F                  		ld	e,a
(1) 2180/     ABB : 19                  		add	hl,de
(1) 2181/     ABC : 7E                  		ld	a,(hl)
(1) 2182/     ABD : 23                  		inc	hl
(1) 2183/     ABE : 66                  		ld	h,(hl)
(1) 2184/     ABF : 6F                  		ld	l,a
(1) 2185/     AC0 : 23                  		inc	hl
(1) 2186/     AC1 : 23                  		inc	hl
(1) 2187/     AC2 : 23                  		inc	hl
(1) 2188/     AC3 : CF                  		rst	8
(1) 2189/     AC4 : 23                  		inc	hl		; Point to TL's
(1) 2190/     AC5 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2191/     AC8 : E6 03               		and	011b
(1) 2192/     ACA : F6 40               		or	40h		; TL registers
(1) 2193/     ACC : 57                  		ld	d,a
(1) 2194/     ACD :                     ; d - 40h+
(1) 2195/     ACD :                     ; hl - TL data
(1) 2196/     ACD :                     ; .fm_wrtlvol:
(1) 2197/     ACD : C5                  		push	bc
(1) 2198/     ACE : E5                  		push	hl
(1) 2199/     ACF : 21 24 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2200/     AD2 : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; Read 0B0h copy
(1) 2201/     AD5 : E6 07               		and	0111b
(1) 2202/     AD7 : 06 00               		ld	b,0
(1) 2203/     AD9 : 4F                  		ld	c,a
(1) 2204/     ADA : 09                  		add	hl,bc
(1) 2205/     ADB : FD 7E 07            		ld	a,(iy+ztbl_Volume)		; Read current Volume
(1) 2206/     ADE : CF                  		rst	8
(1) 2207/     ADF : FD 96 04            		sub	a,(iy+ztbl_MasterVol)		; + MASTER vol
(1) 2208/     AE2 : 4F                  		ld	c,a			; c - Current Volume
(1) 2209/     AE3 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2210/     AE4 : E1                  		pop	hl
(1) 2211/     AE5 : CB 08               		rrc	b			; OP1
(1) 2212/     AE7 : DC 12 0B            		call	c,.write_tl
(1) 2213/     AEA : 23                  		inc	hl
(1) 2214/     AEB : 14                  		inc	d
(1) 2215/     AEC : 14                  		inc	d
(1) 2216/     AED : CF                  		rst	8
(1) 2217/     AEE : 14                  		inc	d
(1) 2218/     AEF : 14                  		inc	d
(1) 2219/     AF0 : CB 08               		rrc	b			; OP2
(1) 2220/     AF2 : DC 12 0B            		call	c,.write_tl
(1) 2221/     AF5 : 23                  		inc	hl
(1) 2222/     AF6 : 14                  		inc	d
(1) 2223/     AF7 : 14                  		inc	d
(1) 2224/     AF8 : 14                  		inc	d
(1) 2225/     AF9 : 14                  		inc	d
(1) 2226/     AFA : CB 08               		rrc	b			; OP3
(1) 2227/     AFC : DC 12 0B            		call	c,.write_tl
(1) 2228/     AFF : 23                  		inc	hl
(1) 2229/     B00 : CF                  		rst	8
(1) 2230/     B01 : 14                  		inc	d
(1) 2231/     B02 : 14                  		inc	d
(1) 2232/     B03 : 14                  		inc	d
(1) 2233/     B04 : 14                  		inc	d
(1) 2234/     B05 : CB 08               		rrc	b			; OP4
(1) 2235/     B07 : DC 12 0B            		call	c,.write_tl
(1) 2236/     B0A : 23                  		inc	hl
(1) 2237/     B0B : 14                  		inc	d
(1) 2238/     B0C : 14                  		inc	d
(1) 2239/     B0D : 14                  		inc	d
(1) 2240/     B0E : 14                  		inc	d
(1) 2241/     B0F : CF                  		rst	8
(1) 2242/     B10 : C1                  		pop	bc
(1) 2243/     B11 : C9                  		ret
(1) 2244/     B12 :                     .write_tl:
(1) 2245/     B12 : 7E                  		ld	a,(hl)
(1) 2246/     B13 : 91                  		sub	a,c			; reg - volume
(1) 2247/     B14 : F2 19 0B            		jp	p,.keep_tlmx
(1) 2248/     B17 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2249/     B19 :                     .keep_tlmx:
(1) 2250/     B19 : C5                  		push	bc
(1) 2251/     B1A : 5F                  		ld	e,a
(1) 2252/     B1B : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2253/     B1E : CD E5 11            		call	fm_autoreg
(1) 2254/     B21 : CF                  		rst	8
(1) 2255/     B22 : C1                  		pop	bc
(1) 2256/     B23 : C9                  		ret
(1) 2257/     B24 :                     ; Jump carry list
(1) 2258/     B24 :                     .fm_cindx:
(1) 2259/     B24 : 08                  		db 1000b
(1) 2260/     B25 : 08                  		db 1000b
(1) 2261/     B26 : 08                  		db 1000b
(1) 2262/     B27 : 08                  		db 1000b
(1) 2263/     B28 : 0C                  		db 1100b
(1) 2264/     B29 : 0E                  		db 1110b
(1) 2265/     B2A : 0E                  		db 1110b
(1) 2266/     B2B : 0F                  		db 1111b
(1) 2267/     B2C :                     ; c - KeyId
(1) 2268/     B2C :                     .fm_wrtalpan:
(1) 2269/     B2C : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; 0B0h algorithm
(1) 2270/     B2F : 5F                  		ld	e,a
(1) 2271/     B30 : 79                  		ld	a,c
(1) 2272/     B31 : E6 03               		and	011b
(1) 2273/     B33 : F6 B0               		or	0B0h
(1) 2274/     B35 : 57                  		ld	d,a
(1) 2275/     B36 : CD E5 11            		call	fm_autoreg		; Write algorithm
(1) 2276/     B39 : CF                  		rst	8
(1) 2277/     B3A : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2278/     B3D : 2F                  		cpl				; REVERSE bits
(1) 2279/     B3E : E6 30               		and	00110000b
(1) 2280/     B40 : 07                  		rlca				; << 2
(1) 2281/     B41 : 07                  		rlca
(1) 2282/     B42 : 5F                  		ld	e,a			; save as e
(1) 2283/     B43 : FD 7E 0D            		ld	a,(iy+ztbl_FM_pmam)	; 0B4h %00aa0ppp
(1) 2284/     B46 : E6 3F               		and	00111111b
(1) 2285/     B48 : B3                  		or	e			; Merge panning
(1) 2286/     B49 : 5F                  		ld	e,a
(1) 2287/     B4A : 79                  		ld	a,c
(1) 2288/     B4B : CF                  		rst	8
(1) 2289/     B4C : E6 03               		and	011b
(1) 2290/     B4E : F6 B4               		or	0B4h
(1) 2291/     B50 : 57                  		ld	d,a
(1) 2292/     B51 : CD E5 11            		call	fm_autoreg
(1) 2293/     B54 : FD 7E 0E            		ld	a,(iy+ztbl_FM_lfo)	; Read LFO
(1) 2294/     B57 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2295/     B59 : 28 06               		jr	z,.no_lfo
(1) 2296/     B5B : 5F                  		ld	e,a
(1) 2297/     B5C : 16 22               		ld	d,22h
(1) 2298/     B5E : CD E9 11            		call	fm_send_1
(1) 2299/     B61 :                     .no_lfo:
(1) 2300/     B61 : C9                  		ret
(1) 2301/     B62 :                     
(1) 2302/     B62 :                     ; --------------------------------
(1) 2303/     B62 :                     ; DAC
(1) 2304/     B62 :                     ; --------------------------------
(1) 2305/     B62 :                     
(1) 2306/     B62 :                     .mk_dac:
(1) 2307/     B62 : CB 40               		bit	0,b
(1) 2308/     B64 : C8                  		ret	z
(1) 2309/     B65 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2310/     B68 : FE FE               		cp	-2
(1) 2311/     B6A : CA 8A 0B            		jp	z,.dac_cut
(1) 2312/     B6D : FE FF               		cp	-1
(1) 2313/     B6F : CA 90 0B            		jp	z,.dac_off
(1) 2314/     B72 : CD 93 0B            		call	.dac_pitch
(1) 2315/     B75 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2316/     B78 : 2F                  		cpl				; REVERSE bits
(1) 2317/     B79 : E6 30               		and	00110000b
(1) 2318/     B7B : 07                  		rlca
(1) 2319/     B7C : 07                  		rlca
(1) 2320/     B7D : CF                  		rst	8
(1) 2321/     B7E : 5F                  		ld	e,a
(1) 2322/     B7F : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2323/     B81 : CD F4 11            		call	fm_send_2
(1) 2324/     B84 :                     ; 		bit	0,b			; Note update?
(1) 2325/     B84 :                     ; 		ret	z
(1) 2326/     B84 : CD 14 12            		call	dac_off
(1) 2327/     B87 : C3 29 12            		jp	dac_play
(1) 2328/     B8A :                     .dac_cut:
(1) 2329/     B8A : CD 14 12            		call	dac_off
(1) 2330/     B8D : C3 0A 0F            		jp	.chnl_ulnkoff
(1) 2331/     B90 :                     .dac_off:
(1) 2332/     B90 : C3 04 0F            		jp	.chnl_ulnkcut
(1) 2333/     B93 :                     .dac_pitch:
(1) 2334/     B93 : 16 00               		ld	d,0		; Freq index
(1) 2335/     B95 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2336/     B98 : 21 A5 13            		ld	hl,wavFreq_List-(2*36)
(1) 2337/     B9B : 19                  		add	hl,de
(1) 2338/     B9C : 7E                  		ld	a,(hl)
(1) 2339/     B9D : 23                  		inc	hl
(1) 2340/     B9E : 66                  		ld	h,(hl)
(1) 2341/     B9F : 6F                  		ld	l,a
(1) 2342/     BA0 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2343/     BA3 : CF                  		rst	8
(1) 2344/     BA4 : AF                  		xor	a		; Clear high
(1) 2345/     BA5 : 3F                  		ccf			; Clear carry
(1) 2346/     BA6 : CB 23               		sla	e		; << 3
(1) 2347/     BA8 : CB 23               		sla	e
(1) 2348/     BAA : CB 23               		sla	e
(1) 2349/     BAC : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2350/     BAD : 57                  		ld	d,a
(1) 2351/     BAE : 19                  		add	hl,de
(1) 2352/     BAF : 22 FA 1B            		ld	(wave_Pitch),hl
(1) 2353/     BB2 : D9                  		exx			; *
(1) 2354/     BB3 : ED 5B FA 1B         		ld	de,(wave_Pitch)	; *
(1) 2355/     BB7 : D9                  		exx			; *
(1) 2356/     BB8 : C9                  		ret
(1) 2357/     BB9 :                     
(1) 2358/     BB9 :                     ; --------------------------------
(1) 2359/     BB9 :                     ; PCM
(1) 2360/     BB9 :                     ; --------------------------------
(1) 2361/     BB9 :                     
(1) 2362/     BB9 :                     .mk_pcm:
(1) 2456/     BB9 : C9                  		ret
(1) 2458/     BBA :                     
(1) 2459/     BBA :                     ; --------------------------------
(1) 2460/     BBA :                     ; PWM
(1) 2461/     BBA :                     ; --------------------------------
(1) 2462/     BBA :                     
(1) 2463/     BBA :                     .mk_pwm:
(1) 2547/     BBA : C9                  		ret
(1) 2549/     BBB :                     
(1) 2550/     BBB :                     ; --------------------------------
(1) 2551/     BBB :                     ; SHARED routine
(1) 2552/     BBB :                     
(1) 2553/     BBB :                     .readfreq_pcm:
(1) 2554/     BBB : 21 05 14            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2555/     BBE : 18 03               		jr	.set_wavfreq
(1) 2556/     BC0 :                     .readfreq_pwm:
(1) 2557/     BC0 : 21 A5 13            		ld	hl,wavFreq_List-(2*36)
(1) 2558/     BC3 :                     .set_wavfreq:
(1) 2559/     BC3 : 16 00               		ld	d,0		; Freq index
(1) 2560/     BC5 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2561/     BC8 : 19                  		add	hl,de
(1) 2562/     BC9 : 7E                  		ld	a,(hl)
(1) 2563/     BCA : 23                  		inc	hl
(1) 2564/     BCB : 66                  		ld	h,(hl)
(1) 2565/     BCC : 6F                  		ld	l,a
(1) 2566/     BCD : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2567/     BD0 : CF                  		rst	8
(1) 2568/     BD1 : AF                  		xor	a		; Clear high
(1) 2569/     BD2 : 3F                  		ccf			; Clear carry
(1) 2570/     BD3 : CB 23               		sla	e		; << 2
(1) 2571/     BD5 : CB 23               		sla	e
(1) 2572/     BD7 : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2573/     BD8 : 57                  		ld	d,a
(1) 2574/     BD9 : 19                  		add	hl,de
(1) 2575/     BDA : C9                  		ret
(1) 2576/     BDB :                     
(1) 2577/     BDB :                     ; ----------------------------------------
(1) 2578/     BDB :                     ; NEW effect
(1) 2579/     BDB :                     ; ----------------------------------------
(1) 2580/     BDB :                     
(1) 2581/     BDB :                     .effc:
(1) 2582/     BDB : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2583/     BDE : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2584/     BE1 : 57                  		ld	d,a
(1) 2585/     BE2 : CF                  		rst	8
(1) 2586/     BE3 : FE 04               		cp	4			; Effect D?
(1) 2587/     BE5 : 28 0F               		jr	z,.effc_D
(1) 2588/     BE7 : FE 05               		cp	5			; Effect E?
(1) 2589/     BE9 : 28 4E               		jr	z,.effc_E
(1) 2590/     BEB : FE 06               		cp	6			; Effect F?
(1) 2591/     BED : 28 5F               		jr	z,.effc_F
(1) 2592/     BEF : CF                  		rst	8
(1) 2593/     BF0 : FE 18               		cp	24			; Effect X?
(1) 2594/     BF2 : CA 6F 0C            		jp	z,.effc_X
(1) 2595/     BF5 : C9                  		ret
(1) 2596/     BF6 :                     
(1) 2597/     BF6 :                     ; ----------------------------------------
(1) 2598/     BF6 :                     ; Effect D
(1) 2599/     BF6 :                     ;
(1) 2600/     BF6 :                     ; Volume slide down
(1) 2601/     BF6 :                     ;
(1) 2602/     BF6 :                     ; 0xh-Exh - Normal
(1) 2603/     BF6 :                     ; Fxh-Fxh - Fine slide / 2
(1) 2604/     BF6 :                     ; ----------------------------------------
(1) 2605/     BF6 :                     
(1) 2606/     BF6 :                     .effc_D:
(1) 2607/     BF6 : CD 63 0C            		call	.save_arg
(1) 2608/     BF9 : 79                  		ld	a,c		; Setting == 0?
(1) 2609/     BFA : B7                  		or	a
(1) 2610/     BFB : C8                  		ret	z
(1) 2611/     BFC : E6 F0               		and	0F0h
(1) 2612/     BFE : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2613/     C00 : FE F0               		cp	0F0h
(1) 2614/     C02 : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2615/     C04 : CF                  		rst	8
(1) 2616/     C05 : 79                  		ld	a,c
(1) 2617/     C06 : E6 0F               		and	00Fh
(1) 2618/     C08 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2619/     C0A : FE 0F               		cp	00Fh
(1) 2620/     C0C : 28 17               		jr	z,.fine_up	; xFh
(1) 2621/     C0E : C9                  		ret
(1) 2622/     C0F :                     ; Go down
(1) 2623/     C0F :                     .norm_down:
(1) 2624/     C0F : CB 21               		sla	c
(1) 2625/     C11 :                     .fine_down:
(1) 2626/     C11 : CB 21               		sla	c
(1) 2627/     C13 : 79                  		ld	a,c
(1) 2628/     C14 : E6 3C               		and	00111100b
(1) 2629/     C16 : 4F                  		ld	c,a
(1) 2630/     C17 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2631/     C1A : CF                  		rst	8
(1) 2632/     C1B : 91                  		sub	a,c
(1) 2633/     C1C : 1E C0               		ld	e,0C0h
(1) 2634/     C1E : BB                  		cp	e
(1) 2635/     C1F : D2 35 0C            		jp	nc,.vol_dvld
(1) 2636/     C22 : 7B                  		ld	a,e
(1) 2637/     C23 : 18 10               		jr 	.vol_dvld
(1) 2638/     C25 :                     ; Go up
(1) 2639/     C25 :                     .fine_up:
(1) 2640/     C25 : CB 39               		srl	c
(1) 2641/     C27 :                     .norm_up:
(1) 2642/     C27 : CB 39               		srl	c
(1) 2643/     C29 : 79                  		ld	a,c
(1) 2644/     C2A : E6 3C               		and	00111100b
(1) 2645/     C2C : 4F                  		ld	c,a
(1) 2646/     C2D : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2647/     C30 : CF                  		rst	8
(1) 2648/     C31 : 81                  		add	a,c
(1) 2649/     C32 : 38 01               		jr	c,.vol_dvld
(1) 2650/     C34 : AF                  		xor	a
(1) 2651/     C35 :                     .vol_dvld:
(1) 2652/     C35 : FD 77 07            		ld	(iy+ztbl_Volume),a
(1) 2653/     C38 : C9                  		ret
(1) 2654/     C39 :                     
(1) 2655/     C39 :                     ; ----------------------------------------
(1) 2656/     C39 :                     ; Effect E
(1) 2657/     C39 :                     ; ----------------------------------------
(1) 2658/     C39 :                     
(1) 2659/     C39 :                     .effc_E:
(1) 2660/     C39 : CD 63 0C            		call	.save_arg
(1) 2661/     C3C : 79                  		ld	a,c
(1) 2662/     C3D : E6 F0               		and	0F0h
(1) 2663/     C3F : FE F0               		cp	0F0h
(1) 2664/     C41 : C8                  		ret	z
(1) 2665/     C42 : FE E0               		cp	0E0h
(1) 2666/     C44 : C8                  		ret	z
(1) 2667/     C45 : CF                  		rst	8
(1) 2668/     C46 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2669/     C49 : 91                  		sub	a,c
(1) 2670/     C4A : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2671/     C4D : C9                  		ret
(1) 2672/     C4E :                     
(1) 2673/     C4E :                     ; ----------------------------------------
(1) 2674/     C4E :                     ; Effect F
(1) 2675/     C4E :                     ; ----------------------------------------
(1) 2676/     C4E :                     
(1) 2677/     C4E :                     .effc_F:
(1) 2678/     C4E : CD 63 0C            		call	.save_arg
(1) 2679/     C51 : 79                  		ld	a,c
(1) 2680/     C52 : E6 F0               		and	0F0h
(1) 2681/     C54 : FE F0               		cp	0F0h
(1) 2682/     C56 : C8                  		ret	z
(1) 2683/     C57 : FE E0               		cp	0E0h
(1) 2684/     C59 : C8                  		ret	z
(1) 2685/     C5A : CF                  		rst	8
(1) 2686/     C5B : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2687/     C5E : 81                  		add	a,c
(1) 2688/     C5F : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2689/     C62 : C9                  		ret
(1) 2690/     C63 :                     
(1) 2691/     C63 :                     ; --------------------------------
(1) 2692/     C63 :                     ; e - got arg
(1) 2693/     C63 :                     ; c - new arg
(1) 2694/     C63 :                     .save_arg:
(1) 2695/     C63 : FD 4E 09            		ld	c,(iy+ztbl_EffBuff)	; Current slide setting
(1) 2696/     C66 : 7B                  		ld	a,e			; EffArg is non-zero?
(1) 2697/     C67 : B7                  		or	a
(1) 2698/     C68 : 28 04               		jr	z,.D_cont		; 00h = slide continue
(1) 2699/     C6A : 4F                  		ld	c,a
(1) 2700/     C6B : FD 71 09            		ld	(iy+ztbl_EffBuff),c	; Store NEW slide setting
(1) 2701/     C6E :                     .D_cont:
(1) 2702/     C6E : C9                  		ret
(1) 2703/     C6F :                     
(1) 2704/     C6F :                     ; ----------------------------------------
(1) 2705/     C6F :                     ; Effect X
(1) 2706/     C6F :                     ;
(1) 2707/     C6F :                     ; Common panning values:
(1) 2708/     C6F :                     ;  00h LEFT
(1) 2709/     C6F :                     ;  80h MIDDLE
(1) 2710/     C6F :                     ; 0FFh RIGHT
(1) 2711/     C6F :                     ; ----------------------------------------
(1) 2712/     C6F :                     
(1) 2713/     C6F :                     .effc_X:
(1) 2714/     C6F : 16 00               		ld	d,0
(1) 2715/     C71 : 7E                  		ld	a,(hl)
(1) 2716/     C72 : E6 F0               		and	11110000b
(1) 2717/     C74 : FE 80               		cp	80h		; PSG?
(1) 2718/     C76 : 28 1D               		jr	z,.res_pan
(1) 2719/     C78 : FE 90               		cp	90h		; PSGN?
(1) 2720/     C7A : 28 19               		jr	z,.res_pan
(1) 2721/     C7C : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2722/     C7E : CC 9F 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2723/     C81 :                     
(1) 2724/     C81 :                     	; ----------------------------------------
(1) 2725/     C81 :                     	; Common panning bits: %00LR0000
(1) 2726/     C81 :                     	; (REVERSE: 0-on 1-off)
(1) 2727/     C81 : FD 36 09 00         		ld	(iy+ztbl_EffBuff),0
(1) 2728/     C85 : CF                  		rst	8
(1) 2729/     C86 : E5                  		push	hl
(1) 2730/     C87 : 21 B5 0C            		ld	hl,.comn_panlist
(1) 2731/     C8A : 7B                  		ld	a,e
(1) 2732/     C8B : 07                  		rlca
(1) 2733/     C8C : 07                  		rlca
(1) 2734/     C8D : 07                  		rlca
(1) 2735/     C8E : E6 07               		and	0111b
(1) 2736/     C90 :                     ; 		ld	d,0
(1) 2737/     C90 : 5F                  		ld	e,a
(1) 2738/     C91 : CF                  		rst	8
(1) 2739/     C92 : 19                  		add	hl,de
(1) 2740/     C93 : 56                  		ld	d,(hl)
(1) 2741/     C94 : E1                  		pop	hl
(1) 2742/     C95 :                     .res_pan:
(1) 2743/     C95 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2744/     C98 : E6 CF               		and	11001111b
(1) 2745/     C9A : B2                  		or	d
(1) 2746/     C9B : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2747/     C9E : C9                  		ret
(1) 2748/     C9F :                     
(1) 2749/     C9F :                     	; ----------------------------------------
(1) 2750/     C9F :                     	; MCD panning
(1) 2751/     C9F :                     .pan_mcd:
(1) 2752/     C9F : E5                  		push	hl
(1) 2753/     CA0 : D5                  		push	de
(1) 2754/     CA1 : 16 00               		ld	d,0
(1) 2755/     CA3 : 21 BD 0C            		ld	hl,.pcm_panlist
(1) 2756/     CA6 : 7B                  		ld	a,e
(1) 2757/     CA7 : E6 F8               		and	0F8h
(1) 2758/     CA9 : 0F                  		rrca
(1) 2759/     CAA : 0F                  		rrca
(1) 2760/     CAB : 0F                  		rrca
(1) 2761/     CAC : 5F                  		ld	e,a
(1) 2762/     CAD : 19                  		add	hl,de
(1) 2763/     CAE : 7E                  		ld	a,(hl)
(1) 2764/     CAF : FD 77 0A            		ld	(iy+ztbl_VarT0),a
(1) 2765/     CB2 : D1                  		pop	de
(1) 2766/     CB3 : E1                  		pop	hl
(1) 2767/     CB4 : C9                  		ret
(1) 2768/     CB5 :                     
(1) 2769/     CB5 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2770/     CB5 :                     ; 00LR0000b
(1) 2771/     CB5 :                     .comn_panlist:
(1) 2772/     CB5 : 10                  		db 00010000b
(1) 2773/     CB6 : 10                  		db 00010000b
(1) 2774/     CB7 : 10                  		db 00010000b
(1) 2775/     CB8 : 00                  		db 00000000b
(1) 2776/     CB9 : 00                  		db 00000000b
(1) 2777/     CBA : 20                  		db 00100000b
(1) 2778/     CBB : 20                  		db 00100000b
(1) 2779/     CBC : 20                  		db 00100000b
(1) 2780/     CBD :                     
(1) 2781/     CBD :                     ; REVERSE OUTPUT BITS
(1) 2782/     CBD :                     ; RRRR | LLLL
(1) 2783/     CBD :                     .pcm_panlist:
(1) 2784/     CBD : F0                  		db 0F0h	; 00h
(1) 2785/     CBE : E0                  		db 0E0h
(1) 2786/     CBF : D0                  		db 0D0h	; 10h
(1) 2787/     CC0 : C0                  		db 0C0h
(1) 2788/     CC1 : B0                  		db 0B0h	; 20h
(1) 2789/     CC2 : A0                  		db 0A0h
(1) 2790/     CC3 : 90                  		db 090h	; 30h
(1) 2791/     CC4 : 80                  		db 080h
(1) 2792/     CC5 : 70                  		db 070h	; 40h
(1) 2793/     CC6 : 60                  		db 060h
(1) 2794/     CC7 : 50                  		db 050h	; 50h
(1) 2795/     CC8 : 40                  		db 040h
(1) 2796/     CC9 : 30                  		db 030h	; 60h
(1) 2797/     CCA : 20                  		db 020h
(1) 2798/     CCB : 10                  		db 010h	; 70h
(1) 2799/     CCC : 00                  		db 000h
(1) 2800/     CCD : 00                  		db 000h ; 80h
(1) 2801/     CCE : 01                  		db 001h
(1) 2802/     CCF : 02                  		db 002h ; 90h
(1) 2803/     CD0 : 03                  		db 003h
(1) 2804/     CD1 : 04                  		db 004h ; A0h
(1) 2805/     CD2 : 05                  		db 005h
(1) 2806/     CD3 : 06                  		db 006h ; B0h
(1) 2807/     CD4 : 07                  		db 007h
(1) 2808/     CD5 : 08                  		db 008h ; C0h
(1) 2809/     CD6 : 09                  		db 009h
(1) 2810/     CD7 : 0A                  		db 00Ah ; D0h
(1) 2811/     CD8 : 0B                  		db 00Bh
(1) 2812/     CD9 : 0C                  		db 00Ch ; E0h
(1) 2813/     CDA : 0D                  		db 00Dh
(1) 2814/     CDB : 0E                  		db 00Eh ; F0h
(1) 2815/     CDC : 0F                  		db 00Fh
(1) 2816/     CDD :                     
(1) 2817/     CDD :                     ; ----------------------------------------
(1) 2818/     CDD :                     ; NEW volume
(1) 2819/     CDD :                     ; ----------------------------------------
(1) 2820/     CDD :                     
(1) 2821/     CDD :                     .volu:
(1) 2822/     CDD : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2823/     CE0 : D6 40               		sub	a,64
(1) 2824/     CE2 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2825/     CE5 : C9                  		ret
(1) 2826/     CE6 :                     
(1) 2827/     CE6 :                     ; ----------------------------------------
(1) 2828/     CE6 :                     ; NEW instrument
(1) 2829/     CE6 :                     ; ----------------------------------------
(1) 2830/     CE6 :                     
(1) 2831/     CE6 :                     .inst:
(1) 2832/     CE6 : 7E                  		ld	a,(hl)
(1) 2833/     CE7 : E6 F0               		and	11110000b
(1) 2834/     CE9 : FE 80               		cp	080h
(1) 2835/     CEB : 28 24               		jr	z,.ins_psg
(1) 2836/     CED : FE 90               		cp	090h
(1) 2837/     CEF : 28 1A               		jr	z,.ins_psgn
(1) 2838/     CF1 : FE A0               		cp	0A0h
(1) 2839/     CF3 : 28 52               		jr	z,.ins_fm
(1) 2840/     CF5 : CF                  		rst	8
(1) 2841/     CF6 : FE B0               		cp	0B0h
(1) 2842/     CF8 : 28 4D               		jr	z,.ins_fm
(1) 2843/     CFA : FE C0               		cp	0C0h
(1) 2844/     CFC : CA C5 0D            		jp	z,.ins_dac
(1) 2845/     CFF : FE D0               		cp	0D0h
(1) 2846/     D01 : CA 19 0E            		jp	z,.ins_pcm
(1) 2847/     D04 : FE E0               		cp	0E0h
(1) 2848/     D06 : CA 51 0E            		jp	z,.ins_pwm
(1) 2849/     D09 : CF                  		rst	8
(1) 2850/     D0A :                     .invl_ins:
(1) 2851/     D0A : C9                  		ret
(1) 2852/     D0B :                     
(1) 2853/     D0B :                     ; ----------------------------------------
(1) 2854/     D0B :                     ; PSG
(1) 2855/     D0B :                     
(1) 2856/     D0B :                     .ins_psgn:
(1) 2857/     D0B : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2858/     D0C : E6 07               		and	0111b
(1) 2859/     D0E : 32 F4 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2860/     D11 :                     .ins_psg:
(1) 2861/     D11 : CF                  		rst	8
(1) 2862/     D12 : DD E5               		push	ix
(1) 2863/     D14 : E5                  		push	hl
(1) 2864/     D15 : 23                  		inc	hl		; Skip ID
(1) 2865/     D16 : DD 21 25 15         		ld	ix,psgcom	; Read psg control
(1) 2866/     D1A : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2867/     D1D : 16 00               		ld	d,0
(1) 2868/     D1F : DD 19               		add	ix,de
(1) 2869/     D21 : 7E                  		ld	a,(hl)
(1) 2870/     D22 : CF                  		rst	8
(1) 2871/     D23 : 23                  		inc	hl
(1) 2872/     D24 : 7E                  		ld	a,(hl)
(1) 2873/     D25 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2874/     D28 : 23                  		inc	hl
(1) 2875/     D29 : 7E                  		ld	a,(hl)
(1) 2876/     D2A : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2877/     D2D : 23                  		inc	hl
(1) 2878/     D2E : 7E                  		ld	a,(hl)
(1) 2879/     D2F : CF                  		rst	8
(1) 2880/     D30 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2881/     D33 : 23                  		inc	hl
(1) 2882/     D34 : 7E                  		ld	a,(hl)
(1) 2883/     D35 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2884/     D38 : 23                  		inc	hl
(1) 2885/     D39 : 7E                  		ld	a,(hl)
(1) 2886/     D3A : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2887/     D3D : 23                  		inc	hl
(1) 2888/     D3E : 7E                  		ld	a,(hl)
(1) 2889/     D3F : CF                  		rst	8
(1) 2890/     D40 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2891/     D43 : E1                  		pop	hl
(1) 2892/     D44 : DD E1               		pop	ix
(1) 2893/     D46 : C9                  		ret
(1) 2894/     D47 :                     
(1) 2895/     D47 :                     ; ----------------------------------------
(1) 2896/     D47 :                     ; FM/FM3
(1) 2897/     D47 :                     
(1) 2898/     D47 :                     .ins_fm:
(1) 2899/     D47 : DD E5               		push	ix
(1) 2900/     D49 : E5                  		push	hl
(1) 2901/     D4A : C5                  		push	bc
(1) 2902/     D4B : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2903/     D4E : E6 07               		and	0111b
(1) 2904/     D50 : 16 00               		ld	d,0
(1) 2905/     D52 : 87                  		add	a,a
(1) 2906/     D53 : 5F                  		ld	e,a
(1) 2907/     D54 : DD 21 DA 1B         		ld	ix,fmcach_list
(1) 2908/     D58 : DD 19               		add	ix,de
(1) 2909/     D5A : CF                  		rst	8
(1) 2910/     D5B : DD 5E 00            		ld	e,(ix)
(1) 2911/     D5E : DD 23               		inc	ix
(1) 2912/     D60 : DD 56 00            		ld	d,(ix)
(1) 2913/     D63 :                     
(1) 2914/     D63 :                     ; 		ld	a,(iy+ztbl_VarT1)	; 0Bh: DON'T reload flag
(1) 2915/     D63 :                     ; 		cp	b
(1) 2916/     D63 :                     ; 		jr	z,.same_patch
(1) 2917/     D63 :                     ; 		ld	(iy+ztbl_VarT1),b
(1) 2918/     D63 : 23                  		inc	hl		; Skip id and pitch
(1) 2919/     D64 : 23                  		inc	hl
(1) 2920/     D65 : 46                  		ld	b,(hl)
(1) 2921/     D66 : 23                  		inc	hl
(1) 2922/     D67 : 4E                  		ld	c,(hl)
(1) 2923/     D68 : 23                  		inc	hl
(1) 2924/     D69 : 6E                  		ld	l,(hl)
(1) 2925/     D6A : 61                  		ld	h,c
(1) 2926/     D6B :                     
(1) 2927/     D6B : FD 7E 0A            		ld	a,(iy+ztbl_VarT0)
(1) 2928/     D6E : BC                  		cp	h
(1) 2929/     D6F : 20 07               		jr	nz,.new_romdat
(1) 2930/     D71 : CF                  		rst	8
(1) 2931/     D72 : FD 7E 0B            		ld	a,(iy+ztbl_VarT1)
(1) 2932/     D75 : BD                  		cp	l
(1) 2933/     D76 : 28 38               		jr	z,.same_patch
(1) 2934/     D78 :                     .new_romdat:
(1) 2935/     D78 : FD 74 0A            		ld	(iy+ztbl_VarT0),h
(1) 2936/     D7B : FD 75 0B            		ld	(iy+ztbl_VarT1),l
(1) 2937/     D7E : 78                  		ld	a,b
(1) 2938/     D7F : 01 28 00            		ld	bc,28h		; <- size
(1) 2939/     D82 : D5                  		push	de
(1) 2940/     D83 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 2941/     D86 :                     
(1) 2942/     D86 : E1                  		pop	hl
(1) 2943/     D87 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2944/     D8A : 4F                  		ld	c,a		; c - FM Key ID
(1) 2945/     D8B :                     
(1) 2946/     D8B :                     	; hl - fmcach intrument
(1) 2947/     D8B :                     	; de - FM reg and data: 3000h
(1) 2948/     D8B :                     	;  c - FM keyChannel
(1) 2949/     D8B : 79                  		ld	a,c
(1) 2950/     D8C : E6 03               		and	011b
(1) 2951/     D8E : F6 30               		or	30h		; Start at reg 30h
(1) 2952/     D90 : 57                  		ld	d,a
(1) 2953/     D91 : 1E 00               		ld	e,0
(1) 2954/     D93 : CF                  		rst	8
(1) 2955/     D94 : 06 1C               		ld	b,7*4		; Write ALL base FM registers
(1) 2956/     D96 : CD B5 0D            		call	.fm_setrlist
(1) 2957/     D99 :                     ; 		ld	b,4
(1) 2958/     D99 :                     ; 		call	.fm_setrlist
(1) 2959/     D99 :                     ; 		ld	b,5*4
(1) 2960/     D99 :                     ; 		call	.fm_setrlist
(1) 2961/     D99 : 7E                  		ld	a,(hl)			; 0B0h
(1) 2962/     D9A : FD 77 0C            		ld	(iy+ztbl_FM_alfd),a	; ** Save 0B0h
(1) 2963/     D9D : 23                  		inc	hl
(1) 2964/     D9E : 7E                  		ld	a,(hl)			; 0B4h
(1) 2965/     D9F : FD 77 0D            		ld	(iy+ztbl_FM_pmam),a	; ** Save 0B4h
(1) 2966/     DA2 : 23                  		inc	hl
(1) 2967/     DA3 : CF                  		rst	8
(1) 2968/     DA4 : 7E                  		ld	a,(hl)
(1) 2969/     DA5 : FD 77 0E            		ld	(iy+ztbl_FM_lfo),a	; LFO
(1) 2970/     DA8 : 23                  		inc	hl
(1) 2971/     DA9 : 7E                  		ld	a,(hl)			; 028h keys
(1) 2972/     DAA : E6 F0               		and	11110000b
(1) 2973/     DAC : CF                  		rst	8
(1) 2974/     DAD : FD 77 0F            		ld	(iy+ztbl_FM_keys),a	; ** Save keys
(1) 2975/     DB0 :                     .same_patch:
(1) 2976/     DB0 : C1                  		pop	bc
(1) 2977/     DB1 : E1                  		pop	hl
(1) 2978/     DB2 : DD E1               		pop	ix
(1) 2979/     DB4 : C9                  		ret
(1) 2980/     DB5 :                     ; b - numof_regs
(1) 2981/     DB5 :                     .fm_setrlist:
(1) 2982/     DB5 : 5E                  		ld	e,(hl)
(1) 2983/     DB6 : 23                  		inc	hl
(1) 2984/     DB7 : CD E5 11            		call	fm_autoreg
(1) 2985/     DBA : 00                  		nop
(1) 2986/     DBB : 00                  		nop
(1) 2987/     DBC : CF                  		rst	8
(1) 2988/     DBD : 00                  		nop
(1) 2989/     DBE : 14                  		inc	d		; +4
(1) 2990/     DBF : 14                  		inc	d
(1) 2991/     DC0 : 14                  		inc	d
(1) 2992/     DC1 : 14                  		inc	d
(1) 2993/     DC2 : 10 F1               		djnz	.fm_setrlist
(1) 2994/     DC4 : C9                  		ret
(1) 2995/     DC5 :                     
(1) 2996/     DC5 :                     ; ----------------------------------------
(1) 2997/     DC5 :                     
(1) 2998/     DC5 :                     .ins_dac:
(1) 2999/     DC5 : E5                  		push	hl
(1) 3000/     DC6 : C5                  		push	bc
(1) 3001/     DC7 : CD 14 12            		call	dac_off
(1) 3002/     DCA : 7E                  		ld	a,(hl)
(1) 3003/     DCB : E6 0F               		and	00001111b
(1) 3004/     DCD : 32 FC 1B            		ld	(wave_Flags),a
(1) 3005/     DD0 : CF                  		rst	8
(1) 3006/     DD1 : 23                  		inc	hl
(1) 3007/     DD2 : 23                  		inc	hl
(1) 3008/     DD3 : 5E                  		ld	e,(hl)
(1) 3009/     DD4 : 23                  		inc	hl
(1) 3010/     DD5 : 7E                  		ld	a,(hl)
(1) 3011/     DD6 : 23                  		inc	hl
(1) 3012/     DD7 : 6E                  		ld	l,(hl)
(1) 3013/     DD8 : 67                  		ld	h,a
(1) 3014/     DD9 : E5                  		push	hl
(1) 3015/     DDA : 7B                  		ld	a,e
(1) 3016/     DDB : 01 06 00            		ld	bc,6		; Skip head
(1) 3017/     DDE : 09                  		add	hl,bc
(1) 3018/     DDF : CE 00               		adc	a,0
(1) 3019/     DE1 : 22 F1 1B            		ld	(wave_Start),hl	; Set START point
(1) 3020/     DE4 : 32 F3 1B            		ld	(wave_Start+2),a
(1) 3021/     DE7 : E1                  		pop	hl
(1) 3022/     DE8 : 7B                  		ld	a,e
(1) 3023/     DE9 : 11 54 1F            		ld	de,sampleHead
(1) 3024/     DEC : 01 06 00            		ld	bc,6
(1) 3025/     DEF : D5                  		push	de
(1) 3026/     DF0 : CF                  		rst	8
(1) 3027/     DF1 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 3028/     DF4 : E1                  		pop	hl
(1) 3029/     DF5 :                     	; hl - temporal header
(1) 3030/     DF5 : 5E                  		ld	e,(hl)
(1) 3031/     DF6 : 23                  		inc	hl
(1) 3032/     DF7 : 56                  		ld	d,(hl)
(1) 3033/     DF8 : 23                  		inc	hl
(1) 3034/     DF9 : 7E                  		ld	a,(hl)
(1) 3035/     DFA : 23                  		inc	hl
(1) 3036/     DFB : ED 53 F4 1B         		ld	(wave_Len),de	; LEN
(1) 3037/     DFF : 32 F6 1B            		ld	(wave_Len+2),a
(1) 3038/     E02 : 5E                  		ld	e,(hl)
(1) 3039/     E03 : 23                  		inc	hl
(1) 3040/     E04 : CF                  		rst	8
(1) 3041/     E05 : 56                  		ld	d,(hl)
(1) 3042/     E06 : 23                  		inc	hl
(1) 3043/     E07 : 7E                  		ld	a,(hl)
(1) 3044/     E08 : 23                  		inc	hl
(1) 3045/     E09 : ED 53 F7 1B         		ld	(wave_Loop),de	; LOOP
(1) 3046/     E0D : 32 F9 1B            		ld	(wave_Loop+2),a
(1) 3047/     E10 : 11 06 28            		ld	de,2806h	; keys off
(1) 3048/     E13 : CD E9 11            		call	fm_send_1
(1) 3049/     E16 : C1                  		pop	bc
(1) 3050/     E17 : E1                  		pop	hl
(1) 3051/     E18 :                     ; .same_dac:
(1) 3052/     E18 : C9                  		ret
(1) 3053/     E19 :                     
(1) 3054/     E19 :                     ; ----------------------------------------
(1) 3055/     E19 :                     
(1) 3056/     E19 :                     .ins_pcm:
(1) 3057/     E19 : DD E5               		push	ix
(1) 3058/     E1B : E5                  		push	hl
(1) 3059/     E1C : C5                  		push	bc
(1) 3060/     E1D : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3061/     E1E : E6 01               		and	00000001b	; Read loop bit
(1) 3062/     E20 : 0F                  		rrca			; Move to MSB
(1) 3063/     E21 : CF                  		rst	8
(1) 3064/     E22 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3065/     E23 : 23                  		inc	hl
(1) 3066/     E24 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3067/     E25 : B3                  		or	e
(1) 3068/     E26 : 5F                  		ld	e,a
(1) 3069/     E27 : 23                  		inc	hl
(1) 3070/     E28 : 7E                  		ld	a,(hl)
(1) 3071/     E29 : 23                  		inc	hl
(1) 3072/     E2A : 6E                  		ld	l,(hl)
(1) 3073/     E2B : 67                  		ld	h,a
(1) 3074/     E2C :                     	; d    - Loop enable bit
(1) 3075/     E2C :                     	; e,hl - 24-bit pointer + loop bit
(1) 3076/     E2C : DD 21 AD 14         		ld	ix,pcmcom
(1) 3077/     E30 : 06 00               		ld	b,0
(1) 3078/     E32 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3079/     E35 : DD 09               		add	ix,bc
(1) 3080/     E37 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3081/     E3A : DD 09               		add	ix,bc
(1) 3082/     E3C : 01 08 00            		ld	bc,8
(1) 3083/     E3F : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3084/     E42 : DD 09               		add	ix,bc
(1) 3085/     E44 : DD 74 00            		ld	(ix),h
(1) 3086/     E47 : DD 09               		add	ix,bc
(1) 3087/     E49 : DD 75 00            		ld	(ix),l
(1) 3088/     E4C : C1                  		pop	bc
(1) 3089/     E4D : E1                  		pop	hl
(1) 3090/     E4E : DD E1               		pop	ix
(1) 3091/     E50 : C9                  		ret
(1) 3092/     E51 :                     
(1) 3093/     E51 :                     ; ----------------------------------------
(1) 3094/     E51 :                     
(1) 3095/     E51 :                     .ins_pwm:
(1) 3096/     E51 : DD E5               		push	ix
(1) 3097/     E53 : E5                  		push	hl
(1) 3098/     E54 : C5                  		push	bc
(1) 3099/     E55 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3100/     E56 : E6 03               		and	00000011b
(1) 3101/     E58 : 0F                  		rrca
(1) 3102/     E59 : 0F                  		rrca
(1) 3103/     E5A : 4F                  		ld	c,a
(1) 3104/     E5B : CF                  		rst	8
(1) 3105/     E5C : 23                  		inc	hl		; Skip ID and Pitch
(1) 3106/     E5D : 23                  		inc	hl
(1) 3107/     E5E : 56                  		ld	d,(hl)
(1) 3108/     E5F : 23                  		inc	hl
(1) 3109/     E60 : 5E                  		ld	e,(hl)
(1) 3110/     E61 : 23                  		inc	hl
(1) 3111/     E62 : 7E                  		ld	a,(hl)
(1) 3112/     E63 : 23                  		inc	hl
(1) 3113/     E64 : 6E                  		ld	l,(hl)
(1) 3114/     E65 : 67                  		ld	h,a
(1) 3115/     E66 : 79                  		ld	a,c
(1) 3116/     E67 : B2                  		or	d
(1) 3117/     E68 : 57                  		ld	d,a
(1) 3118/     E69 : CF                  		rst	8
(1) 3119/     E6A :                     	; de,hl - 32-bit PWM pointer
(1) 3120/     E6A : DD 21 ED 14         		ld	ix,pwmcom
(1) 3121/     E6E : 06 00               		ld	b,0
(1) 3122/     E70 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3123/     E73 : DD 09               		add	ix,bc
(1) 3124/     E75 : 01 18 00            		ld	bc,24
(1) 3125/     E78 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3126/     E7A : 01 08 00            		ld	bc,8
(1) 3127/     E7D : DD 72 00            		ld	(ix),d
(1) 3128/     E80 : DD 09               		add	ix,bc
(1) 3129/     E82 : DD 73 00            		ld	(ix),e
(1) 3130/     E85 : DD 09               		add	ix,bc
(1) 3131/     E87 : DD 74 00            		ld	(ix),h
(1) 3132/     E8A : DD 09               		add	ix,bc
(1) 3133/     E8C : DD 75 00            		ld	(ix),l
(1) 3134/     E8F : C1                  		pop	bc
(1) 3135/     E90 : E1                  		pop	hl
(1) 3136/     E91 : DD E1               		pop	ix
(1) 3137/     E93 : C9                  		ret
(1) 3138/     E94 :                     
(1) 3139/     E94 :                     ; ----------------------------------------
(1) 3140/     E94 :                     ; NEW note
(1) 3141/     E94 :                     ; ----------------------------------------
(1) 3142/     E94 :                     
(1) 3143/     E94 :                     .note:
(1) 3144/     E94 : 78                  		ld	a,b		; Volume bit?
(1) 3145/     E95 : E6 04               		and	0100b
(1) 3146/     E97 : 20 05               		jr	nz,.fm_hasvol
(1) 3147/     E99 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3148/     E9D : CF                  		rst	8
(1) 3149/     E9E :                     .fm_hasvol:
(1) 3150/     E9E : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3151/     EA1 : 4F                  		ld	c,a
(1) 3152/     EA2 : FE FF               		cp	-1
(1) 3153/     EA4 : C8                  		ret	z
(1) 3154/     EA5 : FE FE               		cp	-2
(1) 3155/     EA7 : C8                  		ret	z
(1) 3156/     EA8 : E7                  		rst	20h
(1) 3157/     EA9 : 7E                  		ld	a,(hl)
(1) 3158/     EAA : E6 F0               		and	11110000b
(1) 3159/     EAC : FE 80               		cp	80h
(1) 3160/     EAE : 28 16               		jr	z,.n_indx
(1) 3161/     EB0 : CF                  		rst	8
(1) 3162/     EB1 : FE 90               		cp	90h
(1) 3163/     EB3 : 28 20               		jr	z,.n_psgn
(1) 3164/     EB5 : FE A0               		cp	0A0h
(1) 3165/     EB7 : 28 21               		jr	z,.n_fm
(1) 3166/     EB9 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3167/     EB9 :                     ; 		jr	z,.n_fm
(1) 3168/     EB9 : FE C0               		cp	0C0h
(1) 3169/     EBB : 28 09               		jr	z,.n_indx
(1) 3170/     EBD : FE D0               		cp	0D0h
(1) 3171/     EBF : 28 05               		jr	z,.n_indx
(1) 3172/     EC1 : FE E0               		cp	0E0h
(1) 3173/     EC3 : 28 01               		jr	z,.n_indx
(1) 3174/     EC5 : C9                  		ret
(1) 3175/     EC6 :                     
(1) 3176/     EC6 :                     ; --------------------------------
(1) 3177/     EC6 :                     
(1) 3178/     EC6 :                     .n_indx:
(1) 3179/     EC6 : 79                  		ld	a,c
(1) 3180/     EC7 :                     .n_stfreq:
(1) 3181/     EC7 : 23                  		inc	hl		; Skip ID
(1) 3182/     EC8 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3183/     EC9 : 2B                  		dec	hl
(1) 3184/     ECA : 83                  		add	a,e		; Note + pitch
(1) 3185/     ECB : CF                  		rst	8
(1) 3186/     ECC : 87                  		add	a,a		; * 2
(1) 3187/     ECD : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3188/     ED0 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0	; reset pitchbend
(1) 3189/     ED4 : C9                  		ret
(1) 3190/     ED5 :                     .n_psgn:
(1) 3191/     ED5 : 79                  		ld	a,c
(1) 3192/     ED6 : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3193/     ED8 : 18 ED               		jr	.n_stfreq
(1) 3194/     EDA :                     
(1) 3195/     EDA :                     ; FM freqs
(1) 3196/     EDA :                     .n_fm:
(1) 3197/     EDA : 79                  		ld	a,c
(1) 3198/     EDB : 23                  		inc	hl		; Skip ID
(1) 3199/     EDC : 5E                  		ld	e,(hl)		; Read pitch
(1) 3200/     EDD : 2B                  		dec	hl
(1) 3201/     EDE : CF                  		rst	8
(1) 3202/     EDF : 83                  		add	a,e		; Note + pitch
(1) 3203/     EE0 :                     	; Search for octave and note...
(1) 3204/     EE0 : 0E 00               		ld	c,0		; c - octave
(1) 3205/     EE2 : 16 07               		ld	d,7
(1) 3206/     EE4 :                     .get_oct:
(1) 3207/     EE4 : 5F                  		ld	e,a		; e - note
(1) 3208/     EE5 : D6 0C               		sub	12
(1) 3209/     EE7 : B7                  		or	a
(1) 3210/     EE8 : FA EF 0E            		jp	m,.fnd_oct
(1) 3211/     EEB : 0C                  		inc	c
(1) 3212/     EEC :                     ; 		nop
(1) 3213/     EEC :                     ; 		nop
(1) 3214/     EEC :                     ; 		rst	8
(1) 3215/     EEC :                     ; 		nop
(1) 3216/     EEC :                     ; 		nop
(1) 3217/     EEC : 15                  		dec	d
(1) 3218/     EED : 20 F5               		jr	nz,.get_oct
(1) 3219/     EEF :                     .fnd_oct:
(1) 3220/     EEF : CF                  		rst	8
(1) 3221/     EF0 : 7B                  		ld	a,e
(1) 3222/     EF1 : 87                  		add	a,a		; Note * 2
(1) 3223/     EF2 : E6 1F               		and	00011111b
(1) 3224/     EF4 : CB 09               		rrc	c
(1) 3225/     EF6 : CB 09               		rrc	c
(1) 3226/     EF8 : CB 09               		rrc	c
(1) 3227/     EFA : CF                  		rst	8
(1) 3228/     EFB : B1                  		or	c
(1) 3229/     EFC : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3230/     EFF : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 3231/     F03 : C9                  		ret
(1) 3232/     F04 :                     
(1) 3233/     F04 :                     ; ----------------------------------------
(1) 3234/     F04 :                     
(1) 3235/     F04 :                     .chnl_ulnkcut:
(1) 3236/     F04 : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3237/     F07 : C3 0A 0F            		jp	.chnl_ulnk
(1) 3238/     F0A :                     .chnl_ulnkoff:
(1) 3239/     F0A :                     ; 		ld	c,0
(1) 3240/     F0A :                     
(1) 3241/     F0A :                     .chnl_ulnk:
(1) 3242/     F0A : AF                  		xor	a
(1) 3243/     F0B : CF                  		rst	8
(1) 3244/     F0C : FD 77 00            		ld	(iy),a				; Delete link, chip and prio
(1) 3245/     F0F : FD 77 01            		ld	(iy+1),a
(1) 3246/     F12 : FD 77 02            		ld	(iy+2),a
(1) 3247/     F15 :                     
(1) 3248/     F15 : FD 77 07            		ld	(iy+ztbl_Volume),a		; <--
(1) 3249/     F18 : FD 77 09            		ld	(iy+ztbl_EffBuff),a
(1) 3250/     F1B : FD 77 0A            		ld	(iy+ztbl_VarT0),a
(1) 3251/     F1E : FD 77 0B            		ld	(iy+ztbl_VarT1),a
(1) 3252/     F21 : C9                  		ret
(1) 3253/     F22 :                     
(1) 3254/     F22 :                     ; ----------------------------------------
(1) 3255/     F22 :                     ; Reset all table
(1) 3256/     F22 :                     ;
(1) 3257/     F22 :                     ; hl - Current channel table
(1) 3258/     F22 :                     ; d - Silence chip
(1) 3259/     F22 :                     ;
(1) 3260/     F22 :                     ; Uses:
(1) 3261/     F22 :                     ; b
(1) 3262/     F22 :                     ; ----------------------------------------
(1) 3263/     F22 :                     
(1) 3264/     F22 :                     tblz_clear:
(1) 3265/     F22 : CF                  		rst	8
(1) 3266/     F23 : 36 00               		ld	(hl),0			; Delete link
(1) 3267/     F25 : 23                  		inc	hl
(1) 3268/     F26 : 36 00               		ld	(hl),0
(1) 3269/     F28 : 23                  		inc	hl
(1) 3270/     F29 : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3271/     F2A :                     ; 		inc	hl
(1) 3272/     F2A :                     ; 		ld	(hl),0			; Clear master volume
(1) 3273/     F2A : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 3274/     F2D : 09                  		add	hl,bc
(1) 3275/     F2E : 06 04               		ld	b,8/2
(1) 3276/     F30 :                     .clrfull:
(1) 3277/     F30 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 3278/     F32 : 23                  		inc	hl
(1) 3279/     F33 : 36 00               		ld	(hl),0
(1) 3280/     F35 : 23                  		inc	hl
(1) 3281/     F36 : CF                  		rst	8
(1) 3282/     F37 : 10 F7               		djnz	.clrfull
(1) 3283/     F39 : C9                  		ret
(1) 3284/     F3A :                     
(1) 3285/     F3A :                     ; ============================================================
(1) 3286/     F3A :                     ; --------------------------------------------------------
(1) 3287/     F3A :                     ; Communication with the SCD and 32X
(1) 3288/     F3A :                     ;
(1) 3289/     F3A :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3290/     F3A :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3291/     F3A :                     ;
(1) 3292/     F3A :                     ; *Originally meant for waiting VBlank, that's
(1) 3293/     F3A :                     ; the only one available for sending the table
(1) 3294/     F3A :                     ; --------------------------------------------------------
(1) 3295/     F3A :                     
(1) 3296/     F3A :                     ; NOTE: careful modifing this
(1) 3297/     F3A :                     
(1) 3298/     F3A :                     zmars_send:
(1) 3299/     F3A :                     	; ----------------------------------------
(1) 3300/     F3A :                     	; Send PCM table
(1) 3384/     F3A :                     	; ----------------------------------------
(1) 3385/     F3A :                     	; Send PWM table
(1) 3488/     F3A : C9                  		ret
(1) 3489/     F3B :                     
(1) 3490/     F3B :                     ; --------------------------------------------------------
(1) 3491/     F3B :                     ; Set bank to $A10000 area
(1) 3507/     F3B :                     
(1) 3508/     F3B :                     ; ====================================================================
(1) 3509/     F3B :                     ; ----------------------------------------------------------------
(1) 3510/     F3B :                     ; Subroutines
(1) 3511/     F3B :                     ; ----------------------------------------------------------------
(1) 3512/     F3B :                     
(1) 3513/     F3B :                     ; --------------------------------------------------------
(1) 3514/     F3B :                     ; Init sound engine
(1) 3515/     F3B :                     ; --------------------------------------------------------
(1) 3516/     F3B :                     
(1) 3517/     F3B :                     gema_init:
(1) 3518/     F3B : CD 23 13            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3519/     F3E : CD 14 12            		call	dac_off
(1) 3520/     F41 : AF                  		xor	a
(1) 3521/     F42 :                     ; 		ld	(marsUpd),a
(1) 3522/     F42 :                     ; 		ld	(mcdUpd),a
(1) 3523/     F42 : 32 30 00            		ld	(cdRamLen),a
(1) 3524/     F45 : FD 21 63 1F         		ld	iy,nikona_BuffList
(1) 3525/     F49 : 0E 01               		ld	c,1			; Start at this priority
(1) 3526/     F4B :                     .setup_list:
(1) 3527/     F4B : FD 7E 00            		ld	a,(iy)
(1) 3528/     F4E : FE FF               		cp	-1
(1) 3529/     F50 : 28 24               		jr	z,.end_setup
(1) 3530/     F52 : FD 23               		inc	iy
(1) 3531/     F54 : 6F                  		ld	l,a
(1) 3532/     F55 : FD 66 00            		ld	h,(iy)
(1) 3533/     F58 : E5                  		push	hl
(1) 3534/     F59 : DD E1               		pop	ix
(1) 3535/     F5B : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3536/     F5E : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3537/     F62 : FD 23               		inc	iy
(1) 3538/     F64 :                     	; iy - src
(1) 3539/     F64 :                     	; hl - dst
(1) 3540/     F64 : 11 04 00            		ld	de,trk_Blocks
(1) 3541/     F67 : 19                  		add	hl,de
(1) 3542/     F68 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3543/     F6A :                     .st_copy:
(1) 3544/     F6A : FD 7E 00            		ld	a,(iy)
(1) 3545/     F6D : 77                  		ld	(hl),a
(1) 3546/     F6E : FD 23               		inc	iy
(1) 3547/     F70 : 23                  		inc	hl
(1) 3548/     F71 : 10 F7               		djnz	.st_copy
(1) 3549/     F73 : 0C                  		inc	c
(1) 3550/     F74 : 18 D5               		jr	.setup_list
(1) 3551/     F76 :                     .end_setup:
(1) 3552/     F76 :                     
(1) 3553/     F76 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3554/     F79 : CD E9 11            		call	fm_send_1
(1) 3555/     F7C : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3556/     F7F : CD E9 11            		call	fm_send_1
(1) 3557/     F82 :                     ; 		ld	de,2800h
(1) 3558/     F82 : 14                  		inc	d		; FM KEYS off
(1) 3559/     F83 : CD E9 11            		call	fm_send_1
(1) 3560/     F86 : 1C                  		inc	e
(1) 3561/     F87 : CD E9 11            		call	fm_send_1
(1) 3562/     F8A : 1C                  		inc	e
(1) 3563/     F8B : CD E9 11            		call	fm_send_1
(1) 3564/     F8E : 1C                  		inc	e
(1) 3565/     F8F : 1C                  		inc	e
(1) 3566/     F90 : CD E9 11            		call	fm_send_1
(1) 3567/     F93 : 1C                  		inc	e
(1) 3568/     F94 : CD E9 11            		call	fm_send_1
(1) 3569/     F97 : 1C                  		inc	e
(1) 3570/     F98 : CD E9 11            		call	fm_send_1
(1) 3571/     F9B : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3572/     F9E : 36 9F               		ld	(hl),09Fh
(1) 3573/     FA0 : 36 BF               		ld	(hl),0BFh
(1) 3574/     FA2 : 36 DF               		ld	(hl),0DFh
(1) 3575/     FA4 : 36 FF               		ld	(hl),0FFh
(1) 3576/     FA6 : C9                  		ret
(1) 3577/     FA7 :                     
(1) 3578/     FA7 :                     ; --------------------------------------------------------
(1) 3579/     FA7 :                     ; get_tick
(1) 3580/     FA7 :                     ;
(1) 3581/     FA7 :                     ; Checks if VBlank triggred a TICK
(1) 3582/     FA7 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3583/     FA7 :                     ; --------------------------------------------------------
(1) 3584/     FA7 :                     
(1) 3585/     FA7 :                     get_tick:
(1) 3586/     FA7 : F3                  		di				; Disable ints
(1) 3587/     FA8 : F5                  		push	af
(1) 3588/     FA9 : E5                  		push	hl
(1) 3589/     FAA : 21 FE 1B            		ld	hl,tickFlag		; read last TICK flag
(1) 3590/     FAD : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3591/     FAE : B7                  		or 	a
(1) 3592/     FAF : 28 13               		jr	z,.ctnotick
(1) 3593/     FB1 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3594/     FB3 : 23                  		inc	hl			; Move to tickCnt
(1) 3595/     FB4 : 34                  		inc	(hl)			; and increment
(1) 3596/     FB5 : CF                  		rst	8
(1) 3597/     FB6 : D5                  		push	de
(1) 3598/     FB7 : 2A F9 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3599/     FBA : ED 5B FB 1C         		ld	de,(sbeatPtck)
(1) 3600/     FBE : CF                  		rst	8
(1) 3601/     FBF : 19                  		add	hl,de
(1) 3602/     FC0 : 22 F9 1C            		ld	(sbeatAcc),hl
(1) 3603/     FC3 : D1                  		pop	de
(1) 3604/     FC4 :                     .ctnotick:
(1) 3605/     FC4 : E1                  		pop	hl
(1) 3606/     FC5 : F1                  		pop	af
(1) 3607/     FC6 : FB                  		ei				; Enable ints again
(1) 3608/     FC7 : C9                  		ret
(1) 3609/     FC8 :                     
(1) 3610/     FC8 :                     ; --------------------------------------------------------
(1) 3611/     FC8 :                     ; transferRom
(1) 3612/     FC8 :                     ;
(1) 3613/     FC8 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3614/     FC8 :                     ; This also tells to 68k that we want to access ROM
(1) 3615/     FC8 :                     ;
(1) 3616/     FC8 :                     ; Input:
(1) 3617/     FC8 :                     ; a  | 68K Address $xx0000
(1) 3618/     FC8 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3619/     FC8 :                     ; hl | 68K Address $00xxxx
(1) 3620/     FC8 :                     ; de | Destination pointer
(1) 3621/     FC8 :                     ;
(1) 3622/     FC8 :                     ; Uses:
(1) 3623/     FC8 :                     ; b
(1) 3624/     FC8 :                     ;
(1) 3625/     FC8 :                     ; Notes:
(1) 3626/     FC8 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3627/     FC8 :                     ; sample has enough data before getting busy here.
(1) 3628/     FC8 :                     ; --------------------------------------------------------
(1) 3629/     FC8 :                     
(1) 3630/     FC8 :                     transferRom:
(1) 3631/     FC8 : DD E5               		push	ix
(1) 3632/     FCA : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3633/     FCE : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3634/     FD0 : 28 3D               		jr	z,.from_ram
(1) 3635/     FD2 : CF                  		rst	8
(1) 3636/     FD3 : 22 F7 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3637/     FD6 : CB BC               		res	7,h
(1) 3638/     FD8 : 06 00               		ld	b,0
(1) 3639/     FDA : 0B                  		dec	bc
(1) 3640/     FDB : 09                  		add	hl,bc
(1) 3641/     FDC : CB 7C               		bit	7,h
(1) 3642/     FDE : 20 0B               		jr	nz,.double
(1) 3643/     FE0 : 2A F7 1C            		ld	hl,(x68ksrclsb)
(1) 3644/     FE3 : 0C                  		inc	c
(1) 3645/     FE4 : 47                  		ld	b,a
(1) 3646/     FE5 : CD 2F 10            		call	.transfer
(1) 3647/     FE8 : DD E1               		pop	ix
(1) 3648/     FEA : C9                  		ret
(1) 3649/     FEB :                     .double:
(1) 3650/     FEB : CF                  		rst	8
(1) 3651/     FEC : 47                  		ld	b,a
(1) 3652/     FED : C5                  		push	bc
(1) 3653/     FEE : E5                  		push	hl
(1) 3654/     FEF : 79                  		ld	a,c
(1) 3655/     FF0 : 95                  		sub	a,l
(1) 3656/     FF1 : 4F                  		ld	c,a
(1) 3657/     FF2 : 2A F7 1C            		ld	hl,(x68ksrclsb)
(1) 3658/     FF5 : CD 2F 10            		call	.transfer
(1) 3659/     FF8 : E1                  		pop	hl
(1) 3660/     FF9 : C1                  		pop	bc
(1) 3661/     FFA :                     ; 		rst	8
(1) 3662/     FFA : 4D                  		ld	c,l
(1) 3663/     FFB : 0C                  		inc	c
(1) 3664/     FFC : 3A F8 1C            		ld	a,(x68ksrcmid)
(1) 3665/     FFF : E6 80               		and	80h
(1) 3666/    1001 : C6 80               		add	a,80h
(1) 3667/    1003 : 67                  		ld	h,a
(1) 3668/    1004 : 2E 00               		ld	l,0
(1) 3669/    1006 : 30 01               		jr	nc,.x68knocarry
(1) 3670/    1008 : 04                  		inc	b
(1) 3671/    1009 :                     .x68knocarry:
(1) 3672/    1009 : CD 2F 10            		call	.transfer
(1) 3673/    100C : DD E1               		pop	ix
(1) 3674/    100E : C9                  		ret
(1) 3675/    100F :                     
(1) 3676/    100F :                     ; ------------------------------------------------
(1) 3677/    100F :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3678/    100F :                     ;
(1) 3679/    100F :                     ; On the 68K side YOU MUST CALL
(1) 3680/    100F :                     ; Sound_Update manually when you have
(1) 3681/    100F :                     ; the oportunity to do so.
(1) 3682/    100F :                     ; ------------------------------------------------
(1) 3683/    100F :                     
(1) 3684/    100F :                     .from_ram:
(1) 3685/    100F : ED 53 31 00         		ld	(cdRamDst),de
(1) 3686/    1013 : 22 33 00            		ld	(cdRamSrc),hl
(1) 3687/    1016 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3688/    1019 : CD 23 13            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3689/    101C : CF                  		rst	8
(1) 3690/    101D : 79                  		ld	a,c
(1) 3691/    101E : 32 30 00            		ld	(cdRamLen),a
(1) 3692/    1021 : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** 68K LABEL **
(1) 3693/    1024 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3694/    1026 :                     .wait:
(1) 3695/    1026 :                     	; Get stuck here until 68K finishes
(1) 3696/    1026 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3697/    1029 : B7                  		or	a
(1) 3698/    102A : 20 FA               		jr	nz,.wait
(1) 3699/    102C : DD E1               		pop	ix
(1) 3700/    102E : C9                  		ret
(1) 3701/    102F :                     
(1) 3702/    102F :                     ; ------------------------------------------------
(1) 3703/    102F :                     ; b  - Source ROM bank
(1) 3704/    102F :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3705/    102F :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3706/    102F :                     ; de - Destination address
(1) 3707/    102F :                     ; ix - ROM-block flag
(1) 3708/    102F :                     ; ------------------------------------------------
(1) 3709/    102F :                     
(1) 3710/    102F :                     .transfer:
(1) 3711/    102F : CF                  		rst	8
(1) 3712/    1030 : D5                  		push	de
(1) 3713/    1031 : 11 00 60            		ld	de,6000h
(1) 3714/    1034 : 7C                  		ld	a,h
(1) 3715/    1035 : 07                  		rlca
(1) 3716/    1036 : 12                  		ld	(de),a
(1) 3717/    1037 : 78                  		ld	a,b
(1) 3718/    1038 : CF                  		rst	8
(1) 3719/    1039 : 12                  		ld	(de),a
(1) 3720/    103A : 0F                  		rrca
(1) 3721/    103B : 12                  		ld	(de),a
(1) 3722/    103C : 0F                  		rrca
(1) 3723/    103D : 12                  		ld	(de),a
(1) 3724/    103E : 0F                  		rrca
(1) 3725/    103F : 12                  		ld	(de),a
(1) 3726/    1040 : 0F                  		rrca
(1) 3727/    1041 : CF                  		rst	8
(1) 3728/    1042 : 12                  		ld	(de),a
(1) 3729/    1043 : 0F                  		rrca
(1) 3730/    1044 : 12                  		ld	(de),a
(1) 3731/    1045 : 0F                  		rrca
(1) 3732/    1046 : 12                  		ld	(de),a
(1) 3733/    1047 : 0F                  		rrca
(1) 3734/    1048 : 12                  		ld	(de),a
(1) 3735/    1049 : D1                  		pop	de
(1) 3736/    104A : CB FC               		set	7,h
(1) 3737/    104C : CF                  		rst	8
(1) 3738/    104D :                     
(1) 3739/    104D :                     	; Transfer ROM data in packets
(1) 3740/    104D :                     	; while playing the cache'd sample
(1) 3741/    104D :                     	; *** CRITICAL PROCESS ***
(1) 3742/    104D :                     	;
(1) 3743/    104D :                     	; pseudo-ref for ldir:
(1) 3744/    104D :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3745/    104D :                     	; inc de	; next de
(1) 3746/    104D :                     	; inc hl	; next hl
(1) 3747/    104D :                     	; dec bc	; decrement bc
(1) 3748/    104D : 06 00               		ld	b,0
(1) 3749/    104F : 79                  		ld	a,c		; a - Size counter
(1) 3750/    1050 : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3751/    1052 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3752/    1054 :                     .x68kloop:
(1) 3753/    1054 : CF                  		rst	8
(1) 3754/    1055 : 00                  		nop
(1) 3755/    1056 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3756/    1058 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3757/    105C : C4 76 10            		call	nz,.x68klpwt
(1) 3758/    105F : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3759/    1061 : CF                  		rst	8
(1) 3760/    1062 : 00                  		nop
(1) 3761/    1063 : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3762/    1065 : D2 54 10            		jp	nc,.x68kloop
(1) 3763/    1068 :                     ; last block
(1) 3764/    1068 :                     .x68klast:
(1) 3765/    1068 : C6 08               		add	a,MAX_TRFRPZ
(1) 3766/    106A : 4F                  		ld	c,a
(1) 3767/    106B : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3768/    106F : C4 76 10            		call	nz,.x68klpwt
(1) 3769/    1072 : ED B0               		ldir
(1) 3770/    1074 : CF                  		rst	8
(1) 3771/    1075 : C9                  		ret
(1) 3772/    1076 :                     ; Wait here until Genesis unlocks ROM
(1) 3773/    1076 :                     .x68klpwt:
(1) 3774/    1076 : 00                  		nop	; WAVE SYNC
(1) 3775/    1077 : 00                  		nop
(1) 3776/    1078 :                     .x68kpwtlp:
(1) 3777/    1078 : CF                  		rst	8
(1) 3778/    1079 : 00                  		nop	; WAVE SYNC
(1) 3779/    107A : 00                  		nop
(1) 3780/    107B : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3781/    107F : 20 F7               		jr	nz,.x68kpwtlp
(1) 3782/    1081 : C9                  		ret
(1) 3783/    1082 :                     
(1) 3784/    1082 :                     ; ====================================================================
(1) 3785/    1082 :                     ; ----------------------------------------------------------------
(1) 3786/    1082 :                     ; Sound chip routines
(1) 3787/    1082 :                     ; ----------------------------------------------------------------
(1) 3788/    1082 :                     
(1) 3789/    1082 :                     ; --------------------------------------------------------
(1) 3790/    1082 :                     ; chip_env
(1) 3791/    1082 :                     ;
(1) 3792/    1082 :                     ; Process the PSG
(1) 3793/    1082 :                     ; --------------------------------------------------------
(1) 3794/    1082 :                     
(1) 3795/    1082 :                     chip_env:
(1) 3799/    1082 : FD 21 28 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3800/    1086 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3801/    108A : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3802/    108C : 06 04               		ld	b,4			; b - 4 channels
(1) 3803/    108E :                     .vloop:
(1) 3804/    108E : CF                  		rst	8
(1) 3805/    108F : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3806/    1092 : FD 36 00 00         		ld	(iy+COM),0
(1) 3807/    1096 :                     
(1) 3808/    1096 :                     	; ----------------------------
(1) 3809/    1096 :                     	; bit 2 - stop sound
(1) 3810/    1096 : CB 53               		bit	2,e
(1) 3811/    1098 : 28 0C               		jr	z,.ckof
(1) 3812/    109A : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3813/    109E : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3814/    10A2 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3815/    10A6 :                     .ckof:
(1) 3816/    10A6 :                     	; ----------------------------
(1) 3817/    10A6 :                     	; bit 1 - key off
(1) 3818/    10A6 : CB 4B               		bit	1,e
(1) 3819/    10A8 : 28 0F               		jr      z,.ckon
(1) 3820/    10AA : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3821/    10AD : B7                  		or	a
(1) 3822/    10AE : 28 09               		jr	z,.ckon
(1) 3823/    10B0 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3824/    10B4 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3825/    10B8 : CF                  		rst	8
(1) 3826/    10B9 :                     .ckon:
(1) 3827/    10B9 :                     	; ----------------------------
(1) 3828/    10B9 :                     	; bit 0 - key on
(1) 3829/    10B9 : CB 43               		bit	0,e
(1) 3830/    10BB : 28 1A               		jr	z,.envproc
(1) 3831/    10BD : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3832/    10C1 : 78                  		ld	a,b
(1) 3833/    10C2 : FE 04               		cp	4			; NOISE channel?
(1) 3834/    10C4 : 20 08               		jr	nz,.nskip
(1) 3835/    10C6 : CF                  		rst	8			; Set NOISE mode
(1) 3836/    10C7 : 3A F4 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3837/    10CA : B1                  		or	c
(1) 3838/    10CB : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3839/    10CE :                     .nskip:
(1) 3840/    10CE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3841/    10D2 : CF                  		rst	8
(1) 3842/    10D3 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3843/    10D7 :                     .nblock:
(1) 3844/    10D7 :                     
(1) 3845/    10D7 :                     	; ----------------------------
(1) 3846/    10D7 :                     	; Process effects
(1) 3847/    10D7 :                     	; ----------------------------
(1) 3848/    10D7 :                     .envproc:
(1) 3849/    10D7 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3850/    10DA : B7                  		or	a			; no modes
(1) 3851/    10DB : CA 61 11            		jp	z,.vedlp
(1) 3852/    10DE : FE 01               		cp 	001b			; Attack mode
(1) 3853/    10E0 : 20 2C               		jr	nz,.chk2
(1) 3854/    10E2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3855/    10E6 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3856/    10E9 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3857/    10EC : B7                  		or	a
(1) 3858/    10ED : 28 16               		jr	z,.atkend
(1) 3859/    10EF : 57                  		ld	d,a			; c - attack rate
(1) 3860/    10F0 : 7B                  		ld	a,e			; a - attack level
(1) 3861/    10F1 : CF                  		rst	8
(1) 3862/    10F2 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3863/    10F5 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3864/    10F6 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3865/    10F8 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3866/    10FA : BB                  		cp	e			; attack rate == level?
(1) 3867/    10FB : 38 08               		jr	c,.atkend
(1) 3868/    10FD : 28 06               		jr	z,.atkend
(1) 3869/    10FF : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3870/    1102 : CF                  		rst	8
(1) 3871/    1103 : 18 5C               		jr	.vedlp
(1) 3872/    1105 :                     .atkend:
(1) 3873/    1105 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3874/    1108 :                     .atkzero:
(1) 3875/    1108 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3876/    110C : 18 53               		jr	.vedlp
(1) 3877/    110E :                     .chk2:
(1) 3878/    110E :                     
(1) 3879/    110E : FE 02               		cp	010b			; Decay mode
(1) 3880/    1110 : 20 31               		jr	nz,.chk4
(1) 3881/    1112 :                     .dectmr:
(1) 3882/    1112 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3883/    1116 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3884/    1119 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3885/    111C : BB                  		cp	e
(1) 3886/    111D : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3887/    111F : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3888/    1121 : CF                  		rst	8
(1) 3889/    1122 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3890/    1125 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3891/    1127 : BB                  		cp	e			; compare level
(1) 3892/    1128 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3893/    112A : 18 08               		jr	.dksav
(1) 3894/    112C :                     .dkadd:
(1) 3895/    112C : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3896/    112F : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3897/    1131 : BB                  		cp	e			; compare level
(1) 3898/    1132 : 30 05               		jr	nc,.dkyend
(1) 3899/    1134 :                     .dksav:
(1) 3900/    1134 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3901/    1137 : 18 28               		jr	.vedlp
(1) 3902/    1139 :                     .dkyend:
(1) 3903/    1139 : CF                  		rst	8
(1) 3904/    113A : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3905/    113D : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3906/    1141 : 18 1E               		jr	.vedlp
(1) 3907/    1143 :                     .chk4:
(1) 3908/    1143 : FE 04               		cp	100b			; Sustain phase
(1) 3909/    1145 : 20 1A               		jr	nz,.vedlp
(1) 3910/    1147 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3911/    114B : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3912/    114E : CF                  		rst	8
(1) 3913/    114F : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3914/    1152 : 38 05               		jr	c,.killenv		; release done
(1) 3915/    1154 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3916/    1157 : 18 08               		jr	.vedlp
(1) 3917/    1159 :                     .killenv:
(1) 3918/    1159 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3919/    115D : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3920/    1161 :                     .vedlp:
(1) 3921/    1161 :                     	; ----------------------------
(1) 3922/    1161 :                     	; PSG UPDATE
(1) 3923/    1161 :                     	; ----------------------------
(1) 3924/    1161 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3925/    1164 : B7                  		or	a
(1) 3926/    1165 : 28 72               		jr	z,.noupd
(1) 3927/    1167 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3928/    116B : 59                  		ld	e,c
(1) 3929/    116C : 3A F4 1C            		ld	a,(psgHatMode)
(1) 3930/    116F : 57                  		ld	d,a
(1) 3931/    1170 : E6 03               		and	011b
(1) 3932/    1172 : FE 03               		cp	011b
(1) 3933/    1174 : 20 1D               		jr	nz,.normal
(1) 3934/    1176 : CF                  		rst	8
(1) 3935/    1177 : 78                  		ld	a,b		; Channel 4?
(1) 3936/    1178 : FE 03               		cp	3
(1) 3937/    117A : 28 13               		jr	z,.silnc_3
(1) 3938/    117C : FE 04               		cp	4
(1) 3939/    117E : 20 18               		jr	nz,.do_nfreq
(1) 3940/    1180 : 3A F4 1C            		ld	a,(psgHatMode)
(1) 3941/    1183 : 57                  		ld	d,a
(1) 3942/    1184 : E6 03               		and	011b
(1) 3943/    1186 : CF                  		rst	8
(1) 3944/    1187 : FE 03               		cp	011b
(1) 3945/    1189 : 20 30               		jr	nz,.vonly
(1) 3946/    118B : 1E C0               		ld	e,0C0h
(1) 3947/    118D : 18 09               		jr	.do_nfreq
(1) 3948/    118F :                     .silnc_3:
(1) 3949/    118F : 3E FF               		ld	a,-1
(1) 3950/    1191 : 18 32               		jr	.vlmuch
(1) 3951/    1193 :                     .normal:
(1) 3952/    1193 : 78                  		ld	a,b
(1) 3953/    1194 : FE 04               		cp	4
(1) 3954/    1196 : 28 23               		jr	z,.vonly
(1) 3955/    1198 :                     .do_nfreq:
(1) 3956/    1198 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3957/    119B : FD 66 20            		ld	h,(iy+DTH)
(1) 3958/    119E :                     	; freq effects go here
(1) 3959/    119E :                     	; (save e FIRST.)
(1) 3960/    119E :                     	;	push	de
(1) 3961/    119E :                     	;	pop	de
(1) 3962/    119E : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3963/    119F : E6 0F               		and	00001111b
(1) 3964/    11A1 : B3                  		or	e		; OR with channel set in e
(1) 3965/    11A2 : CF                  		rst	8
(1) 3966/    11A3 : DD 77 00            		ld	(ix),a		; write it
(1) 3967/    11A6 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3968/    11A7 : 0F                  		rrca
(1) 3969/    11A8 : 0F                  		rrca
(1) 3970/    11A9 : 0F                  		rrca
(1) 3971/    11AA : 0F                  		rrca
(1) 3972/    11AB : E6 0F               		and	00001111b
(1) 3973/    11AD : 5F                  		ld	e,a
(1) 3974/    11AE : 7C                  		ld	a,h		; Grab MSB bits
(1) 3975/    11AF : CF                  		rst	8
(1) 3976/    11B0 : 07                  		rlca
(1) 3977/    11B1 : 07                  		rlca
(1) 3978/    11B2 : 07                  		rlca
(1) 3979/    11B3 : 07                  		rlca
(1) 3980/    11B4 : E6 30               		and	00110000b
(1) 3981/    11B6 : B3                  		or	e
(1) 3982/    11B7 : DD 77 00            		ld	(ix),a
(1) 3983/    11BA : CF                  		rst	8
(1) 3984/    11BB :                     .vonly:
(1) 3985/    11BB : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3986/    11BE : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3987/    11C1 : 30 02               		jr	nc,.vlmuch
(1) 3988/    11C3 : 3E FF               		ld	a,-1
(1) 3989/    11C5 :                     .vlmuch:
(1) 3990/    11C5 : CB 3F               		srl	a			; (Level >> 4)
(1) 3991/    11C7 : CB 3F               		srl	a
(1) 3992/    11C9 : CB 3F               		srl	a
(1) 3993/    11CB : CF                  		rst	8
(1) 3994/    11CC : CB 3F               		srl	a
(1) 3995/    11CE : E6 0F               		and	00001111b		; Filter volume value
(1) 3996/    11D0 : B1                  		or	c			; and OR with current channel
(1) 3997/    11D1 : F6 90               		or	90h			; Set volume-set mode
(1) 3999/    11D3 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 4001/    11D6 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 4002/    11D9 :                     .noupd:
(1) 4003/    11D9 :                     	; ----------------------------
(1) 4004/    11D9 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 4005/    11DB : 79                  		ld	a,c
(1) 4006/    11DC : CF                  		rst	8
(1) 4007/    11DD : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 4008/    11DF : 4F                  		ld	c,a
(1) 4009/    11E0 : 05                  		dec	b
(1) 4010/    11E1 : C2 8E 10            		jp	nz,.vloop
(1) 4011/    11E4 : C9                  		ret
(1) 4012/    11E5 :                     
(1) 4013/    11E5 :                     ; ---------------------------------------------
(1) 4014/    11E5 :                     ; FM register writes
(1) 4015/    11E5 :                     ;
(1) 4016/    11E5 :                     ; Input:
(1) 4017/    11E5 :                     ; d - ctrl
(1) 4018/    11E5 :                     ; e - data
(1) 4019/    11E5 :                     ; ---------------------------------------------
(1) 4020/    11E5 :                     
(1) 4021/    11E5 :                     ; c - KeyID
(1) 4022/    11E5 :                     fm_autoreg:
(1) 4023/    11E5 : CB 51               		bit	2,c
(1) 4024/    11E7 : 20 0B               		jr	nz,fm_send_2
(1) 4025/    11E9 :                     
(1) 4026/    11E9 :                     ; Channels 1-3 and global registers
(1) 4027/    11E9 :                     fm_send_1:
(1) 4028/    11E9 : 7A                  		ld	a,d
(1) 4029/    11EA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4030/    11ED : 00                  		nop
(1) 4031/    11EE : 7B                  		ld	a,e
(1) 4032/    11EF : 32 01 40            		ld	(Zym_data_1),a
(1) 4033/    11F2 : 00                  		nop
(1) 4034/    11F3 : C9                  		ret
(1) 4035/    11F4 :                     ; Channels 4-6
(1) 4036/    11F4 :                     fm_send_2:
(1) 4037/    11F4 : 7A                  		ld	a,d
(1) 4038/    11F5 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4039/    11F8 : 00                  		nop
(1) 4040/    11F9 : 7B                  		ld	a,e
(1) 4041/    11FA : 32 03 40            		ld	(Zym_data_2),a
(1) 4042/    11FD : 00                  		nop
(1) 4043/    11FE : C9                  		ret
(1) 4044/    11FF :                     
(1) 4045/    11FF :                     ; --------------------------------------------------------
(1) 4046/    11FF :                     ; brute-force WAVE ON/OFF playback
(1) 4047/    11FF :                     ; --------------------------------------------------------
(1) 4048/    11FF :                     
(1) 4049/    11FF :                     dac_on:
(1) 4050/    11FF : 3E 2B               		ld	a,2Bh
(1) 4051/    1201 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4052/    1204 : 3E 80               		ld	a,80h
(1) 4053/    1206 : 32 01 40            		ld	(Zym_data_1),a
(1) 4054/    1209 : 3E D9               		ld 	a,zopcExx
(1) 4055/    120B : 32 08 00            		ld	(dac_me),a
(1) 4056/    120E : 3E F5               		ld 	a,zopcPushAf
(1) 4057/    1210 : 32 20 00            		ld	(dac_fill),a
(1) 4058/    1213 : C9                  		ret
(1) 4059/    1214 :                     dac_off:
(1) 4060/    1214 : 3E 2B               		ld	a,2Bh
(1) 4061/    1216 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4062/    1219 : 3E 00               		ld	a,00h
(1) 4063/    121B : 32 01 40            		ld	(Zym_data_1),a
(1) 4064/    121E : 3E C9               		ld 	a,zopcRet
(1) 4065/    1220 : 32 08 00            		ld	(dac_me),a
(1) 4066/    1223 : 3E C9               		ld 	a,zopcRet
(1) 4067/    1225 : 32 20 00            		ld	(dac_fill),a
(1) 4068/    1228 : C9                  		ret
(1) 4069/    1229 :                     
(1) 4070/    1229 :                     ; --------------------------------------------------------
(1) 4071/    1229 :                     ; dac_play
(1) 4072/    1229 :                     ;
(1) 4073/    1229 :                     ; Plays a new sample
(1) 4074/    1229 :                     ;
(1) 4075/    1229 :                     ; NOTE:
(1) 4076/    1229 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4077/    1229 :                     ; getting here.
(1) 4078/    1229 :                     ; --------------------------------------------------------
(1) 4079/    1229 :                     
(1) 4080/    1229 :                     dac_play:
(1) 4081/    1229 : F3                  		di
(1) 4082/    122A : CD 14 12            		call	dac_off
(1) 4083/    122D : D9                  		exx				; flip exx regs
(1) 4084/    122E : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4085/    1231 : ED 5B FA 1B         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4086/    1235 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4087/    1238 : D9                  		exx				; move them back
(1) 4088/    1239 : 2A F1 1B            		ld	hl,(wave_Start)		; copy Start and length
(1) 4089/    123C : 3A F3 1B            		ld 	a,(wave_Start+2)
(1) 4090/    123F : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4091/    1242 : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4092/    1245 : 2A F4 1B            		ld	hl,(wave_Len)
(1) 4093/    1248 : 3A F6 1B            		ld 	a,(wave_Len+2)
(1) 4094/    124B : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4095/    124E : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4096/    1251 : AF                  		xor	a
(1) 4097/    1252 : 32 E8 1B            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4098/    1255 : CD 5D 12            		call	dac_refill
(1) 4099/    1258 : CD FF 11            		call	dac_on
(1) 4100/    125B : FB                  		ei
(1) 4101/    125C : C9                  		ret
(1) 4102/    125D :                     
(1) 4103/    125D :                     ; --------------------------------------------------------
(1) 4104/    125D :                     
(1) 4105/    125D :                     dac_refill:
(1) 4106/    125D : CF                  		rst	8
(1) 4107/    125E : C5                  		push	bc
(1) 4108/    125F : D5                  		push	de
(1) 4109/    1260 : E5                  		push	hl
(1) 4110/    1261 : 3A FC 1B            		ld	a,(wave_Flags)	; Already finished?
(1) 4111/    1264 : FE 07               		cp	111b
(1) 4112/    1266 : D2 1C 13            		jp	nc,.dacfill_end
(1) 4113/    1269 : 3A EE 1B            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4114/    126C : 2A EC 1B            		ld	hl,(dDacCntr)
(1) 4115/    126F : 01 80 00            		ld	bc,80h
(1) 4116/    1272 : 37                  		scf
(1) 4117/    1273 : 3F                  		ccf
(1) 4118/    1274 : ED 42               		sbc	hl,bc
(1) 4119/    1276 : DE 00               		sbc	a,0
(1) 4120/    1278 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4121/    127B : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4122/    127E : 16 1D               		ld	d,dWaveBuff>>8
(1) 4123/    1280 : B7                  		or	a
(1) 4124/    1281 : FA AB 12            		jp	m,.dac_over
(1) 4125/    1284 : 3A E8 1B            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4126/    1287 : 5F                  		ld	e,a
(1) 4127/    1288 : C6 80               		add 	a,80h
(1) 4128/    128A : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4129/    128D : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4130/    1290 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4131/    1293 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4132/    1296 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4133/    1299 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4134/    129C : 01 80 00            		ld	bc,80h
(1) 4135/    129F : 09                  		add	hl,bc
(1) 4136/    12A0 : CE 00               		adc	a,0
(1) 4137/    12A2 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4138/    12A5 : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4139/    12A8 : C3 1F 13            		jp	.dacfill_ret
(1) 4140/    12AB :                     ; NOTE: This doesn't finish at the exact END point
(1) 4141/    12AB :                     ; but the USER won't notice it.
(1) 4142/    12AB :                     .dac_over:
(1) 4143/    12AB : 16 1D               		ld	d,dWaveBuff>>8
(1) 4144/    12AD : 3A FC 1B            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4145/    12B0 : E6 01               		and	001b
(1) 4146/    12B2 : C2 D5 12            		jp	nz,.dacfill_loop
(1) 4147/    12B5 : 7D                  		ld	a,l
(1) 4148/    12B6 : C6 80               		add	a,80h
(1) 4149/    12B8 : 4F                  		ld	c,a
(1) 4150/    12B9 : 06 00               		ld	b,0
(1) 4151/    12BB : C5                  		push	bc
(1) 4152/    12BC : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4153/    12BF : 5F                  		ld	e,a
(1) 4154/    12C0 : C6 80               		add	a,80h
(1) 4155/    12C2 : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4156/    12C5 : C1                  		pop	bc
(1) 4157/    12C6 : 79                  		ld	a,c
(1) 4158/    12C7 : B0                  		or	b
(1) 4159/    12C8 : 28 52               		jr	z,.dacfill_end
(1) 4160/    12CA : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4161/    12CD : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4162/    12D0 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4163/    12D3 : 18 47               		jr	.dacfill_end
(1) 4164/    12D5 :                     ; loop sample
(1) 4165/    12D5 :                     .dacfill_loop:
(1) 4166/    12D5 : C5                  		push	bc
(1) 4167/    12D6 : D5                  		push	de
(1) 4168/    12D7 : 3A F9 1B            		ld	a,(wave_Loop+2)
(1) 4169/    12DA : 4F                  		ld	c,a
(1) 4170/    12DB : ED 5B F7 1B         		ld	de,(wave_Loop)
(1) 4171/    12DF : 2A F1 1B            		ld	hl,(wave_Start)
(1) 4172/    12E2 : 3A F3 1B            		ld 	a,(wave_Start+2)
(1) 4173/    12E5 : 81                  		add	a,c
(1) 4174/    12E6 : 19                  		add	hl,de
(1) 4175/    12E7 : CE 00               		adc	a,0
(1) 4176/    12E9 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4177/    12EC : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4178/    12EF : 2A F4 1B            		ld	hl,(wave_Len)
(1) 4179/    12F2 : 3A F6 1B            		ld 	a,(wave_Len+2)
(1) 4180/    12F5 : 91                  		sub	a,c
(1) 4181/    12F6 : 37                  		scf
(1) 4182/    12F7 : 3F                  		ccf
(1) 4183/    12F8 : ED 52               		sbc	hl,de
(1) 4184/    12FA : DE 00               		sbc	a,0
(1) 4185/    12FC : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4186/    12FF : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4187/    1302 : D1                  		pop	de
(1) 4188/    1303 : C1                  		pop	bc
(1) 4189/    1304 : 78                  		ld	a,b
(1) 4190/    1305 : B1                  		or	c
(1) 4191/    1306 : 28 17               		jr	z,.dacfill_ret
(1) 4192/    1308 : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4193/    130B : 5F                  		ld	e,a
(1) 4194/    130C : C6 80               		add	a,80h
(1) 4195/    130E : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4196/    1311 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4197/    1314 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4198/    1317 : CD C8 0F            		call	transferRom	; *** ROM ACCESS ***
(1) 4199/    131A : 18 03               		jr	.dacfill_ret
(1) 4200/    131C :                     .dacfill_end:
(1) 4201/    131C : CD 14 12            		call	dac_off		; DAC finished
(1) 4202/    131F :                     .dacfill_ret:
(1) 4203/    131F : E1                  		pop	hl
(1) 4204/    1320 : D1                  		pop	de
(1) 4205/    1321 : C1                  		pop	bc
(1) 4206/    1322 : C9                  		ret
(1) 4207/    1323 :                     
(1) 4208/    1323 :                     ; ----------------------------------------------------------------
(1) 4209/    1323 :                     ; gema_lastbank
(1) 4210/    1323 :                     ;
(1) 4211/    1323 :                     ; Two purposes:
(1) 4212/    1323 :                     ; - Set the BANK to the very last part of memory for the
(1) 4213/    1323 :                     ;   transferRom to read from RAM
(1) 4214/    1323 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4215/    1323 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4216/    1323 :                     ;
(1) 4217/    1323 :                     ; Uses:
(1) 4218/    1323 :                     ; hl,b
(1) 4219/    1323 :                     ; ----------------------------------------------------------------
(1) 4220/    1323 :                     
(1) 4221/    1323 :                     gema_lastbank:
(1) 4222/    1323 : 21 00 60            		ld	hl,6000h
(1) 4223/    1326 : 06 09               		ld	b,9		; 9 bits
(1) 4224/    1328 :                     .write:
(1) 4225/    1328 : 36 01               		ld	(hl),1
(1) 4226/    132A : 10 FC               		djnz	.write
(1) 4227/    132C : C9                  		ret
(1) 4228/    132D :                     
(1) 4229/    132D :                     ; ====================================================================
(1) 4230/    132D :                     ; ----------------------------------------------------------------
(1) 4231/    132D :                     ; Frequency tables
(1) 4232/    132D :                     ; ----------------------------------------------------------------
(1) 4233/    132D :                     
(1) 4234/    132D : 84 02               fmFreq_List:	dw 644
(1) 4235/    132F : A9 02               		dw 681
(1) 4236/    1331 : D2 02               		dw 722
(1) 4237/    1333 : FD 02               		dw 765
(1) 4238/    1335 : 2A 03               		dw 810
(1) 4239/    1337 : 5A 03               		dw 858
(1) 4240/    1339 : 8E 03               		dw 910
(1) 4241/    133B : C4 03               		dw 964
(1) 4242/    133D : FD 03               		dw 1021
(1) 4243/    133F : 39 04               		dw 1081
(1) 4244/    1341 : 7A 04               		dw 1146
(1) 4245/    1343 : BE 04               		dw 1214
(1) 4246/    1345 :                     
(1) 4247/    1345 :                     ; ----------------------------------------
(1) 4248/    1345 :                     ; DAC and PWM
(1) 4249/    1345 :                     ; ----------------------------------------
(1) 4250/    1345 :                     
(1) 4251/    1345 :                     psgFreq_List:
(1) 4252/    1345 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4253/    1345 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4254/    1345 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4255/    1345 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             134B : FF FF FF FF FF FF 
             1351 : FF FF FF FF FF FF 
             1357 : F8 03 BF 03 89 03 
(1) 4256/    135D : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1363 : CE 02 A5 02 80 02 
             1369 : 5C 02 3A 02 1A 02 
             136F : FB 01 DF 01 C4 01 
(1) 4257/    1375 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             137B : 67 01 53 01 40 01 
             1381 : 2E 01 1D 01 0D 01 
             1387 : FE 00 EF 00 E2 00 
(1) 4258/    138D : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1393 : B4 00 A9 00 A0 00 
             1399 : 97 00 8F 00 87 00 
             139F : 7F 00 78 00 71 00 
(1) 4259/    13A5 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             13AB : 5A 00 55 00 50 00 
             13B1 : 4B 00 47 00 43 00 
             13B7 : 40 00 3C 00 39 00 
(1) 4260/    13BD : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             13C3 : 2D 00 2B 00 28 00 
             13C9 : 26 00 24 00 22 00 
             13CF : 20 00 1F 00 1D 00 
(1) 4261/    13D5 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             13DB : 17 00 16 00 15 00 
             13E1 : 13 00 12 00 11 00 
             13E7 : 10 00 09 00 01 00 
(1) 4262/    13ED :                     
(1) 4263/    13ED :                     
(1) 4264/    13ED :                     ; ----------------------------------------
(1) 4265/    13ED :                     ; DAC and PWM shared list
(1) 4266/    13ED :                     ; ----------------------------------------
(1) 4267/    13ED :                     
(1) 4268/    13ED :                     wavFreq_List:
(1) 4269/    13ED :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4270/    13ED :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4271/    13ED :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4272/    13ED :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4273/    13ED : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0052h,0056h,005Ah,0060h,0066h,006Ch,0071h,0079h	; x-3 4000 ok
             13F3 : 4C 00 52 00 56 00 
             13F9 : 5A 00 60 00 66 00 
             13FF : 6C 00 71 00 79 00 
(1) 4274/    1405 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,009Bh,00A2h,00AEh,00B4h,00C2h,00CCh,00D7h,00E4h,00F0h	; x-4 8000 ok
             140B : 9B 00 A2 00 AE 00 
             1411 : B4 00 C2 00 CC 00 
             1417 : D7 00 E4 00 F0 00 
(1) 4275/    141D : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Bh,016Ch,0181h,0191h,01ACh,01C2h,01E0h	; x-5 16000 ok
             1423 : 2E 01 47 01 5B 01 
             1429 : 6C 01 81 01 91 01 
             142F : AC 01 C2 01 E0 01 
(1) 4276/    1435 : 00 02 10 02 40 02   	dw 0200h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6 32000 wip
             143B : 60 02 80 02 A0 02 
             1441 : D0 02 F8 02 20 03 
             1447 : 50 03 80 03 C0 03 
(1) 4277/    144D :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4278/    144D :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4279/    144D :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4280/    144D :                     
(1) 4281/    144D :                     ; ----------------------------------------
(1) 4282/    144D :                     ; SegaCD PCM
(1) 4283/    144D :                     ; ----------------------------------------
(1) 4284/    144D :                     wavFreq_CdPcm:
(1) 4285/    144D :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4286/    144D :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4287/    144D :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4288/    144D : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1453 : 28 01 3C 01 4C 01 
             1459 : 60 01 7C 01 88 01 
             145F : AA 01 BC 01 DC 01 
(1) 4289/    1465 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             146B : 58 02 7C 02 A0 02 
             1471 : C8 02 FC 02 1C 03 
             1477 : 54 03 7C 03 B8 03 
(1) 4290/    147D : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1483 : AC 04 EC 04 40 05 
             1489 : 90 05 E4 05 3C 06 
             148F : 98 06 04 07 60 07 
(1) 4291/    1495 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             149B : 60 09 F0 09 64 0A 
             14A1 : 04 0B AA 0B 60 0C 
             14A7 : 18 0D E4 0D B8 0E 
(1) 4292/    14AD :                     ; 	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
(1) 4293/    14AD :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4294/    14AD :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4295/    14AD :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4296/    14AD :                     
(1) 4297/    14AD :                     ; ====================================================================
(1) 4298/    14AD :                     ; ----------------------------------------------------------------
(1) 4299/    14AD :                     ; Chip buffers
(1) 4300/    14AD :                     ; ----------------------------------------------------------------
(1) 4301/    14AD :                     
(1) 4302/    14AD : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14B3 : 00 00             
(1) 4303/    14B5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             14BB : 00 00             
(1) 4304/    14BD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14C3 : 00 00             
(1) 4305/    14C5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             14CB : 00 00             
(1) 4306/    14CD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             14D3 : 00 00             
(1) 4307/    14D5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             14DB : 00 00             
(1) 4308/    14DD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14E3 : 00 00             
(1) 4309/    14E5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14EB : 00 00             
(1) 4310/    14ED :                     
(1) 4311/    14ED : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14F3 : 00 00             
(1) 4312/    14F5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14FB : 00 00             
(1) 4313/    14FD : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1503 : 00 00             
(1) 4314/    1505 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             150B : 00 00             
(1) 4315/    150D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             1513 : 00 00             
(1) 4316/    1515 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             151B : 00 00             
(1) 4317/    151D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1523 : 00 00             
(1) 4318/    1525 :                     
(1) 4319/    1525 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4320/    1529 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4321/    152D : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4322/    1531 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4323/    1535 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4324/    1539 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4325/    153D : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4326/    1541 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4327/    1545 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4328/    1549 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4329/    154D : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4330/    1551 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4331/    1555 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4332/    1559 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4333/    155D : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4334/    1561 :                     
(1) 4335/    1561 :                     ; --------------------------------------------------------
(1) 4336/    1561 :                     ; FM instrument storage
(1) 4337/    1561 :                     fmcach_1	ds 28h
(1) 4338/    1589 :                     fmcach_2	ds 28h
(1) 4339/    15B1 :                     fmcach_3	ds 28h
(1) 4340/    15D9 :                     fmcach_4	ds 28h
(1) 4341/    1601 :                     fmcach_5	ds 28h
(1) 4342/    1629 :                     fmcach_6	ds 28h
(1) 4343/    1651 :                     
(1) 4344/    1651 :                     ; ====================================================================
(1) 4345/    1651 :                     ; ----------------------------------------------------------------
(1) 4346/    1651 :                     ; Track buffers
(1) 4347/    1651 :                     ; ----------------------------------------------------------------
(1) 4348/    1651 :                     
(1) 4349/    1651 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4350/    1671 :                     trkHdrs_1	ds 8*4
(1) 4351/    1691 :                     trkHdrs_2	ds 8*4
(1) 4352/    16B1 :                     trkHdrs_3	ds 8*4
(1) 4353/    16D1 :                     trkBlks_0	ds 8
(1) 4354/    16D9 :                     trkBlks_1	ds 8
(1) 4355/    16E1 :                     trkBlks_2	ds 8
(1) 4356/    16E9 :                     trkBlks_3	ds 8
(1) 4357/    16F1 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4358/    1730 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4359/    176F :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4360/    17AE :                     trkBuff_3	ds trk_ChnIndx+MAX_TRKINDX
(1) 4361/    17ED :                     
(1) 4362/    17ED :                     ; ====================================================================
(1) 4363/    17ED :                     ; --------------------------------------------------------
(1) 4364/    17ED :                     ; Channel tables
(1) 4365/    17ED :                     ;
(1) 4366/    17ED :                     ; PSG   80h
(1) 4367/    17ED :                     ; PSGN  90h
(1) 4368/    17ED :                     ; FM   0A0h
(1) 4369/    17ED :                     ; FM3  0B0h
(1) 4370/    17ED :                     ; DAC  0C0h
(1) 4371/    17ED :                     ; PCM  0D0h
(1) 4372/    17ED :                     ; PWM  0E0h
(1) 4373/    17ED :                     ; --------------------------------------------------------
(1) 4374/    17ED :                     
(1) 4375/    1A60 :                     		org 1A60h			; <-- MUST BE x0h ALIGNED
(1) 4376/    1A60 : A0 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4377/    1A62 : 62 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4378/    1A64 : 0E 00               		dw tblFM-tblList		; 0A0h
(1) 4379/    1A66 : 6E 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4380/    1A68 : 86 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4381/    1A6A : A0 00               		dw tblPCM-tblList		; 0D0h
(1) 4382/    1A6C : EA 01               		dw tblPWM-tblList		; 0E0h
(1) 4383/    1A6E :                     ; 		dw 0				; 0F0h
(1) 4384/    1A6E : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A74 : 00 00             
(1) 4385/    1A76 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7C : 00 00             
(1) 4386/    1A7E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A84 : 00 00             
(1) 4387/    1A86 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1A8C : 00 00             
(1) 4388/    1A8E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A94 : 00 00             
(1) 4389/    1A96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A9C : 00 00             
(1) 4390/    1A9E : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 4 <--
             1AA4 : 00 00             
(1) 4391/    1AA6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAC : 00 00             
(1) 4392/    1AAE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB4 : 00 00             
(1) 4393/    1AB6 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 5
             1ABC : 00 00             
(1) 4394/    1ABE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC4 : 00 00             
(1) 4395/    1AC6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ACC : 00 00             
(1) 4396/    1ACE : 00 00 00 02 02 00   tblFM3:		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3 <--
             1AD4 : 00 00             
(1) 4397/    1AD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ADC : 00 00             
(1) 4398/    1ADE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE4 : 00 00             
(1) 4399/    1AE6 : 00 00 00 06 06 00   tblFM6:		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 6 <--
             1AEC : 00 00             
(1) 4400/    1AEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF4 : 00 00             
(1) 4401/    1AF6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AFC : 00 00             
(1) 4402/    1AFE : FF FF               		dw -1	; end-of-list
(1) 4403/    1B00 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B06 : 00 00             
(1) 4404/    1B08 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B0E : 00 00             
(1) 4405/    1B10 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B16 : 00 00             
(1) 4406/    1B18 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1B1E : 00 00             
(1) 4407/    1B20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B26 : 00 00             
(1) 4408/    1B28 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2E : 00 00             
(1) 4409/    1B30 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1B36 : 00 00             
(1) 4410/    1B38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B3E : 00 00             
(1) 4411/    1B40 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B46 : 00 00             
(1) 4412/    1B48 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1B4E : 00 00             
(1) 4413/    1B50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B56 : 00 00             
(1) 4414/    1B58 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5E : 00 00             
(1) 4415/    1B60 : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1B66 : 00 00             
(1) 4416/    1B68 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B6E : 00 00             
(1) 4417/    1B70 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B76 : 00 00             
(1) 4418/    1B78 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1B7E : 00 00             
(1) 4419/    1B80 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B86 : 00 00             
(1) 4420/    1B88 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8E : 00 00             
(1) 4421/    1B90 : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1B96 : 00 00             
(1) 4422/    1B98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9E : 00 00             
(1) 4423/    1BA0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA6 : 00 00             
(1) 4424/    1BA8 : 00 00 00 07 07 00   		db 00h,00h,00h,07h,07h,00h,00h,00h	; Channel 7
             1BAE : 00 00             
(1) 4425/    1BB0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB6 : 00 00             
(1) 4426/    1BB8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBE : 00 00             
(1) 4427/    1BC0 : FF FF               		dw -1	; end-of-list
(1) 4428/    1BC2 : 00 00 00 03 03 00   tblPSGN:	db 00h,00h,00h,03h,03h,00h,00h,00h	; Noise
             1BC8 : 00 00             
(1) 4429/    1BCA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD0 : 00 00             
(1) 4430/    1BD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD8 : 00 00             
(1) 4431/    1BDA :                     ; --------------------------------------------------------
(1) 4432/    1BDA : 61 15               fmcach_list:	dw fmcach_1
(1) 4433/    1BDC : 89 15               		dw fmcach_2
(1) 4434/    1BDE : B1 15               		dw fmcach_3
(1) 4435/    1BE0 : 00 00               		dw 0		; <-- skipped
(1) 4436/    1BE2 : D9 15               		dw fmcach_4
(1) 4437/    1BE4 : 01 16               		dw fmcach_5
(1) 4438/    1BE6 : 29 16               		dw fmcach_6
(1) 4439/    1BE8 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4440/    1BE9 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4441/    1BEC : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4442/    1BEF : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4443/    1BF0 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4444/    1BF1 : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4445/    1BF3 : 00                  		db 0
(1) 4446/    1BF4 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4447/    1BF6 : 00                  		db 0
(1) 4448/    1BF7 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4449/    1BF9 : 00                  		db 0
(1) 4450/    1BFA : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4451/    1BFC : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4452/    1BFD : 00                  tickSpSet	db 0		; **
(1) 4453/    1BFE : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4454/    1BFF : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4455/    1C00 :                     ; --------------------------------------------------------
(1) 4456/    1C00 : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C06 : 00 00             
(1) 4457/    1C08 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0E : 00 00             
(1) 4458/    1C10 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C16 : 00 00             
(1) 4459/    1C18 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C1E : 00 00             
(1) 4460/    1C20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C26 : 00 00             
(1) 4461/    1C28 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C2E : 00 00             
(1) 4462/    1C30 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C36 : 00 00             
(1) 4463/    1C38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3E : 00 00             
(1) 4464/    1C40 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C46 : 00 00             
(1) 4465/    1C48 : FF FF               		dw -1	; end-of-list
(1) 4466/    1C4A : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C50 : 00 00             
(1) 4467/    1C52 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C58 : 00 00             
(1) 4468/    1C5A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C60 : 00 00             
(1) 4469/    1C62 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C68 : 00 00             
(1) 4470/    1C6A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C70 : 00 00             
(1) 4471/    1C72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C78 : 00 00             
(1) 4472/    1C7A : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C80 : 00 00             
(1) 4473/    1C82 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C88 : 00 00             
(1) 4474/    1C8A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C90 : 00 00             
(1) 4475/    1C92 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1C98 : 00 00             
(1) 4476/    1C9A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CA0 : 00 00             
(1) 4477/    1CA2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CA8 : 00 00             
(1) 4478/    1CAA : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1CB0 : 00 00             
(1) 4479/    1CB2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB8 : 00 00             
(1) 4480/    1CBA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC0 : 00 00             
(1) 4481/    1CC2 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1CC8 : 00 00             
(1) 4482/    1CCA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD0 : 00 00             
(1) 4483/    1CD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD8 : 00 00             
(1) 4484/    1CDA : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1CE0 : 00 00             
(1) 4485/    1CE2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE8 : 00 00             
(1) 4486/    1CEA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CF0 : 00 00             
(1) 4487/    1CF2 :                     ; 		db 00h,00h,00h,07h,00h,00h,00h,00h	; Channel 8
(1) 4488/    1CF2 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4489/    1CF2 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4490/    1CF2 : FF FF               		dw -1	; end-of-list
(1) 4491/    1CF4 :                     
(1) 4492/    1CF4 :                     ; ----------------------------------------------------------------
(1) 4493/    1CF4 :                     
(1) 4494/    1CF4 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4495/    1CF5 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4496/    1CF6 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4497/    1CF7 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4498/    1CF8 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4499/    1CF9 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4500/    1CFB : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4501/    1CFD :                     		ds 1		; FREE BYTE
(1) 4502/    1CFE :                     
(1) 4503/    1CFE :                     ; ====================================================================
(1) 4504/    1CFE :                     ; ----------------------------------------------------------------
(1) 4505/    1CFE :                     ; Special aligned buffers
(1) 4506/    1CFE :                     ;
(1) 4507/    1CFE :                     ; Located at 1D00h
(1) 4508/    1CFE :                     ; ----------------------------------------------------------------
(1) 4509/    1CFE :                     
(1) 4510/    1D00 :                     		org 1D00h
(1) 4511/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4512/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4513/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4514/    1F10 :                     trkCach_1	ds MAX_RCACH
(1) 4515/    1F20 :                     trkCach_2	ds MAX_RCACH
(1) 4516/    1F30 :                     trkCach_3	ds MAX_RCACH
(1) 4517/    1F40 :                     ; --------------------------------------------------------
(1) 4518/    1F40 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4519/    1F4E :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4520/    1F50 :                     trkInfoCach	ds 4
(1) 4521/    1F54 :                     sampleHead	ds 006h
(1) 4522/    1F5A :                     instListOut	ds 8
(1) 4523/    1F62 :                     		ds 1		; filler
(1) 4524/    1F63 :                     
(1) 4525/    1F63 :                     ; ====================================================================
(1) 4526/    1F63 :                     ; --------------------------------------------------------
(1) 4527/    1F63 :                     ; MASTER buffers list
(1) 4528/    1F63 :                     ;
(1) 4529/    1F63 :                     ; dw track_buffer
(1) 4530/    1F63 :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4531/    1F63 :                     ;
(1) 4532/    1F63 :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4533/    1F63 :                     ; --------------------------------------------------------
(1) 4534/    1F63 :                     
(1) 4535/    1F63 :                     nikona_BuffList:
(1) 4536/    1F63 : F1 16 D1 16 51 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1F69 : 00 1F             
(1) 4537/    1F6B : 30 17 D9 16 71 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1F71 : 10 1F             
(1) 4538/    1F73 : 6F 17 E1 16 91 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1F79 : 20 1F             
(1) 4539/    1F7B : AE 17 E9 16 B1 16   	dw trkBuff_3,trkBlks_3,trkHdrs_3,trkCach_3
             1F81 : 30 1F             
(1) 4540/    1F83 :                     nikona_BuffList_e:
(1) 4541/    1F83 : FF FF               	dw -1	; ENDOFLIST
(1) 4542/    1F85 :                     
(1) 4543/    1F85 :                     ; --------------------------------------------------------
(1) 4544/    1F85 :                     
(1) 4545/    3B0F :                     		dephase
(1) 4546/    3B0F :                     		cpu 68000		; [AS] Return to 68k
(1) 4547/    3B0F :                     		padding off		; [AS] NO padding
(1) 4548/    3B0F :                     		align 2
(1) 4549/    3B10 :                     
     318/    3B10 :                     Z80_CODE_END:
     325/    3B10 :                     Z80_CODE_FILE_E:
     326/    3B10 :                     
     327/    3B10 :                     ; ====================================================================
     328/    3B10 :                     ; --------------------------------------------------------
     329/    3B10 :                     ; SEGA CD SUB-CPU data
     330/    3B10 :                     ; --------------------------------------------------------
     331/    3B10 :                     
     346/    3B10 :                     
     347/    3B10 :                     ; ====================================================================
     348/    3B10 :                     ; ----------------------------------------------------------------
     349/    3B10 :                     ; SH2 code sent to SDRAM area
     350/    3B10 :                     ; ----------------------------------------------------------------
     351/    3B10 :                     
     357/    3B10 :                     MARS_RAMCODE:
     363/    3B10 :                     		align 4
     365/    3B10 :                     MARS_RAMCODE_E:
     370/    3B10 :                     
     371/    3B10 :                     ; ====================================================================
     372/    3B10 :                     ; --------------------------------------------------------
     373/    3B10 :                     ; CODE BLOCK (banks)
     374/    3B10 :                     ; --------------------------------------------------------
     375/    3B10 :                     
     376/    3B10 :                     		include "game/incl_code.asm"
(1)    1/    3B10 :                     ; ============================================================
(1)    2/    3B10 :                     ; --------------------------------------------------------
(1)    3/    3B10 :                     ; CODE BANKS section
(1)    4/    3B10 :                     ;
(1)    5/    3B10 :                     ; Usage:
(1)    6/    3B10 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/    3B10 :                     ;
(1)    8/    3B10 :                     ; NOTES:
(1)    9/    3B10 :                     ; - Screen order is at game/screens.asm
(1)   10/    3B10 :                     ; - DATA banks are loaded separately inside the
(1)   11/    3B10 :                     ;   screen's code
(1)   12/    3B10 :                     ; --------------------------------------------------------
(1)   13/    3B10 :                     
(1)   14/    3B10 :                     	;screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/    3B10 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/    3B10 : =$3B10               MD_SCREEN00 label *
(1)   15/    3B10 :                     
(1)   15/    3B10 :                     mctopscrn:
(1)   15/    3B10 :                     mcscrn_s:
(1)   15/    3B10 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/    3B10 :                     ; ===========================================================================
(2)    2/    3B10 :                     ; ----------------------------------------------------------------
(2)    3/    3B10 :                     ; SCREEN CODE
(2)    4/    3B10 :                     ; ----------------------------------------------------------------
(2)    5/    3B10 :                     
(2)    6/    3B10 :                     ; ====================================================================
(2)    7/    3B10 :                     ; ------------------------------------------------------
(2)    8/    3B10 :                     ; Variables
(2)    9/    3B10 :                     ; ------------------------------------------------------
(2)   10/    3B10 :                     
(2)   11/    3B10 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/    3B10 :                     
(2)   13/    3B10 :                     ; ====================================================================
(2)   14/    3B10 :                     ; ------------------------------------------------------
(2)   15/    3B10 :                     ; Structs
(2)   16/    3B10 :                     ; ------------------------------------------------------
(2)   17/    3B10 :                     
(2)   18/    3B10 :                     ; ----------------------------------------------
(2)   19/    3B10 :                     ; VRAM Setup
(2)   20/    3B10 :                     ; ----------------------------------------------
(2)   21/    3B10 :                     
(2)   22/    3B10 :                     ; 			memory 2		; Cell $0002
(2)   23/    3B10 :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/    3B10 :                     ; 			endmemory
(2)   25/    3B10 :                     
(2)   26/    3B10 :                     ; ====================================================================
(2)   27/    3B10 :                     ; ------------------------------------------------------
(2)   28/    3B10 :                     ; This screen's RAM
(2)   29/    3B10 :                     ; ------------------------------------------------------
(2)   30/    3B10 :                     
(2)   31/    3B10 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/    3B10 : =$3B10               GLBL_LASTPC     := *
(2)   31/    3B10 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/    3B18 :                     .here:          dephase
(2)   35/    3B18 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/    3B10 :                                     phase GLBL_LASTPC
(2)   36/    3B10 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/    3B10 :                     
(2)   38/    3B10 :                     ; ====================================================================
(2)   39/    3B10 :                     ; ------------------------------------------------------
(2)   40/    3B10 :                     ; Init
(2)   41/    3B10 :                     ; ------------------------------------------------------
(2)   42/    3B10 :                     
(2)   43/    3B10 : 6100 CCAC           		bsr	Video_DisplayOff
(2)   44/    3B14 : 6100 DA66           		bsr	System_Default
(2)   45/    3B18 :                     	; ----------------------------------------------
(2)   46/    3B18 : 41FA 0106           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/    3B1C : 6100 DD60           		bsr	System_SetDataBank
(2)   48/    3B20 : 6100 DA4C           		bsr	System_SramInit
(2)   49/    3B24 : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/    3B28 : 6100 DA4A           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/    3B2C :                     	; ----------------------------------------------
(2)   52/    3B2C :                     	; Load PRINT
(2)   53/    3B2C : 203C 0002 65DA      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/    3B32 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/    3B36 : 6100 D4B8           		bsr	Video_PrintInit
(2)   56/    3B3A : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   57/    3B40 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/    3B44 : 6100 D49A           		bsr	Video_PrintInitW
(2)   59/    3B48 : 6100 D4BA           		bsr	Video_PrintDefPal_Fade
(2)   60/    3B4C :                     	; ----------------------------------------------
(2)   61/    3B4C : 41FA 00EC           		lea	str_MenuText(pc),a0			; Print the title string
(2)   62/    3B50 : 7001                		moveq	#1,d0					; X/Y positions 1,1
(2)   63/    3B52 : 7201                		moveq	#1,d1
(2)   64/    3B54 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)   65/    3B58 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)   66/    3B5C : 6100 D5AE           		bsr	Video_PrintW
(2)   67/    3B60 : 6100 00A2           		bsr	.print_cursor				; Draw counter
(2)   68/    3B64 : 6100 CC4C           		bsr	Video_DisplayOn
(2)   69/    3B68 :                     	; ----------------------------------------------
(2)   70/    3B68 : 6100 D39C           		bsr	Video_FadeIn_Full
(2)   71/    3B6C :                     
(2)   72/    3B6C :                     ; ====================================================================
(2)   73/    3B6C :                     ; ------------------------------------------------------
(2)   74/    3B6C :                     ; Loop
(2)   75/    3B6C :                     ; ------------------------------------------------------
(2)   76/    3B6C :                     
(2)   77/    3B6C :                     .loop:
(2)   78/    3B6C : 6100 D906           		bsr	System_Render
(2)   79/    3B70 :                     
(2)   80/    3B70 : 383C 0004           		move.w	#MAX_SC0_OPTIONS,d4
(2)   81/    3B74 : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)   82/    3B78 : 4BF8 B800           		lea	(RAM_SC0_CurrOption).w,a5
(2)   83/    3B7C : 3E2E 0004           		move.w	on_press(a6),d7
(2)   84/    3B80 : 0807 0001           		btst	#bitJoyDown,d7
(2)   85/    3B84 : 670A                		beq.s	.not_down
(2)   86/    3B86 : 5255                		addq.w	#1,(a5)
(2)   87/    3B88 : 3C15                		move.w	(a5),d6
(2)   88/    3B8A : BC44                		cmp.w	d4,d6
(2)   89/    3B8C : 6F02                		ble.s	.not_down
(2)   90/    3B8E : 4255                		clr.w	(a5)
(2)   91/    3B90 :                     .not_down:
(2)   92/    3B90 : 3E2E 0004           		move.w	on_press(a6),d7
(2)   93/    3B94 : 0807 0000           		btst	#bitJoyUp,d7
(2)   94/    3B98 : 6708                		beq.s	.not_up
(2)   95/    3B9A : 5355                		subq.w	#1,(a5)
(2)   96/    3B9C : 4A55                		tst.w	(a5)
(2)   97/    3B9E : 6A02                		bpl.s	.not_up
(2)   98/    3BA0 : 3A84                		move.w	d4,(a5)
(2)   99/    3BA2 :                     .not_up:
(2)  100/    3BA2 : 3015                		move.w	(a5),d0
(2)  101/    3BA4 : 322D 0002           		move.w	2(a5),d1
(2)  102/    3BA8 : B041                		cmp.w	d1,d0
(2)  103/    3BAA : 6708                		beq.s	.no_change
(2)  104/    3BAC : 613A                		bsr	.print_full
(2)  105/    3BAE : 31F8 B800 B802      		move.w	(RAM_SC0_CurrOption).w,(RAM_SC0_OldOption).w
(2)  106/    3BB4 :                     .no_change:
(2)  111/    3BB4 : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)  112/    3BB8 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  113/    3BBC : 0807 0007           		btst	#bitJoyStart,d7
(2)  114/    3BC0 : 67AA                		beq.s	.loop
(2)  115/    3BC2 : 6100 D354           		bsr	Video_FadeOut_Full
(2)  116/    3BC6 : 7000                		moveq	#0,d0
(2)  117/    3BC8 : 3038 B800           		move.w	(RAM_SC0_CurrOption).w,d0
(2)  118/    3BCC : D040                		add.w	d0,d0
(2)  119/    3BCE : 31FB 0006 E994      		move.w	.ex_mode(pc,d0.w),(RAM_ScreenMode).w
(2)  120/    3BD4 : 4E75                		rts
(2)  121/    3BD6 :                     
(2)  122/    3BD6 :                     .ex_mode:
(2)  123/    3BD6 : 0001                		dc.w 1
(2)  124/    3BD8 : 0002                		dc.w 2
(2)  125/    3BDA : 0003                		dc.w 3
(2)  126/    3BDC : 0004                		dc.w 4
(2)  127/    3BDE : 0007                		dc.w 7
(2)  128/    3BE0 :                     
(2)  129/    3BE0 :                     ; ------------------------------------------------------
(2)  130/    3BE0 :                     
(2)  131/    3BE0 :                     .exit_shell:
(2)  132/    3BE0 : 6100 D336           		bsr	Video_FadeOut_Full
(2)  133/    3BE4 : 6000 DC66           		bra	System_MdMcd_ExitShell
(2)  134/    3BE8 :                     
(2)  135/    3BE8 :                     ; ------------------------------------------------------
(2)  136/    3BE8 :                     ; Show framecounter and input
(2)  137/    3BE8 :                     ; ------------------------------------------------------
(2)  138/    3BE8 :                     
(2)  139/    3BE8 :                     .print_full:
(2)  140/    3BE8 : 41FA 0048           		lea	str_MenuCursorOff(pc),a0
(2)  141/    3BEC : 7001                		moveq	#1,d0
(2)  142/    3BEE : 7205                		moveq	#5,d1
(2)  143/    3BF0 : 3438 B802           		move.w	(RAM_SC0_OldOption).w,d2
(2)  144/    3BF4 : D442                		add.w	d2,d2
(2)  145/    3BF6 : D242                		add.w	d2,d1
(2)  146/    3BF8 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  147/    3BFC : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  148/    3C00 : 6100 D50A           		bsr	Video_PrintW
(2)  149/    3C04 :                     
(2)  150/    3C04 :                     .print_cursor:
(2)  151/    3C04 : 41FA 0030           		lea	str_MenuCursor(pc),a0
(2)  152/    3C08 : 7001                		moveq	#1,d0
(2)  153/    3C0A : 7205                		moveq	#5,d1
(2)  154/    3C0C : 3438 B800           		move.w	(RAM_SC0_CurrOption).w,d2
(2)  155/    3C10 : D442                		add.w	d2,d2
(2)  156/    3C12 : D242                		add.w	d2,d1
(2)  157/    3C14 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  158/    3C18 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  159/    3C1C : 6000 D4EE           		bra	Video_PrintW
(2)  160/    3C20 :                     
(2)  161/    3C20 :                     ; ====================================================================
(2)  162/    3C20 :                     ; ------------------------------------------------------
(2)  163/    3C20 :                     ; DATA asset locations
(2)  164/    3C20 :                     ; ------------------------------------------------------
(2)  165/    3C20 :                     
(2)  166/    3C20 :                     file_scrn1_main:
(2)  167/    3C20 : 0000 6572           		dc.l DATA_BANK0
(2)  168/    3C24 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             3C2A : 494E 2E42 494E 00 
(2)  169/    3C31 :                     		align 2
(2)  170/    3C32 :                     ; file_scrn1_mars:
(2)  171/    3C32 :                     ; 		dc.l DATA_BANK1
(2)  172/    3C32 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  173/    3C32 :                     ; 		align 2
(2)  174/    3C32 :                     
(2)  175/    3C32 :                     ; ====================================================================
(2)  176/    3C32 :                     ; ------------------------------------------------------
(2)  177/    3C32 :                     ; Objects
(2)  178/    3C32 :                     ; ------------------------------------------------------
(2)  179/    3C32 :                     
(2)  180/    3C32 :                     ; ====================================================================
(2)  181/    3C32 :                     ; ------------------------------------------------------
(2)  182/    3C32 :                     ; Custom VBlank
(2)  183/    3C32 :                     ; ------------------------------------------------------
(2)  184/    3C32 :                     
(2)  185/    3C32 :                     ; ------------------------------------------------------
(2)  186/    3C32 :                     ; Custom HBlank
(2)  187/    3C32 :                     ; ------------------------------------------------------
(2)  188/    3C32 :                     
(2)  189/    3C32 :                     ; ====================================================================
(2)  190/    3C32 :                     ; ------------------------------------------------------
(2)  191/    3C32 :                     ; Includes for this screen
(2)  192/    3C32 :                     ; ------------------------------------------------------
(2)  193/    3C32 :                     
(2)  194/    3C32 :                     ; ====================================================================
(2)  195/    3C32 :                     ; ------------------------------------------------------
(2)  196/    3C32 :                     ; Small data section
(2)  197/    3C32 :                     ; ------------------------------------------------------
(2)  198/    3C32 :                     
(2)  199/    3C32 :                     str_MenuCursorOff:
(2)  200/    3C32 : 2020 2000           		dc.b "   ",0
(2)  201/    3C36 :                     		align 2
(2)  202/    3C36 :                     str_MenuCursor:
(2)  203/    3C36 : 2D2D 3E00           		dc.b "-->",0
(2)  204/    3C3A :                     		align 2
(2)  205/    3C3A :                     
(2)  206/    3C3A :                     str_MenuText:
(2)  207/    3C3A : 4E69 6B6F 6E61      		dc.b "Nikona test menu       ROM: \{DATE}",$0A
             3C40 : 2074 6573 7420 
             3C46 : 6D65 6E75 2020 
             3C4C : 2020 2020 2052 
             3C52 : 4F4D 3A20 3039 
             3C58 : 2F31 342F 3230 
             3C5E : 3234 0A          
(2)  208/    3C61 : 0A                  		dc.b $0A
(2)  209/    3C62 : 2020 2020 4765      		dc.b "    Genesis VDP",$0A
             3C68 : 6E65 7369 7320 
             3C6E : 5644 500A          
(2)  210/    3C72 : 2020 2020 5365      		dc.b "    Sega CD stamps",$0A
             3C78 : 6761 2043 4420 
             3C7E : 7374 616D 7073 0A 
(2)  211/    3C85 : 2020 2020 3332      		dc.b "    32X 2D mode",$0A
             3C8B : 5820 3244 206D 
             3C91 : 6F64 650A          
(2)  212/    3C95 : 2020 2020 3332      		dc.b "    32X 3D mode",$0A
             3C9B : 5820 3344 206D 
             3CA1 : 6F64 650A          
(2)  213/    3CA5 : 2020 2020 4745      		dc.b "    GEMA sound test"
             3CAB : 4D41 2073 6F75 
             3CB1 : 6E64 2074 6573 74 
(2)  214/    3CB8 : 00                  		dc.b 0
(2)  215/    3CB9 :                     		align 2
(2)  216/    3CBA :                     
(2)  217/    3CBA :                     ; str_InputMe:
(2)  218/    3CBA :                     ; 	if MARS|MARSCD
(2)  219/    3CBA :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  220/    3CBA :                     ; 		dc.b " "
(2)  221/    3CBA :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  222/    3CBA :                     ; 		dc.b " "
(2)  223/    3CBA :                     ; 		dc.l pstr_mem(3,RAM_Framecount)
(2)  224/    3CBA :                     ; 	else
(2)  225/    3CBA :                     ; 		dc.b " "
(2)  226/    3CBA :                     ; 	endif
(2)  227/    3CBA :                     ; 		dc.b 0
(2)  228/    3CBA :                     ; 		align 2
(2)  229/    3CBA :                     
(2)  230/    3CBA :                     ; ====================================================================
(2)  231/    3CBA :                     
(1)   15/    3CBA :                     mcscrn_e:
(1)   15/    3CBA :                     ; Md_Screen00_e:
(1)   15/    3CBA : =$3CBA               MD_SCREEN00_E label *
(1)   15/    3CBA :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   16/    3CBA : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/    3CBA : =$3CBA               MD_SCREEN01 label *
(1)   16/    3CBA :                     
(1)   16/    3CBA :                     mctopscrn:
(1)   16/    3CBA :                     mcscrn_s:
(1)   16/    3CBA :                             include "game/code/screen_1.asm";"game/screenX/code.asm"
(2)    1/    3CBA :                     ; ===========================================================================
(2)    2/    3CBA :                     ; ----------------------------------------------------------------
(2)    3/    3CBA :                     ; SCREEN CODE
(2)    4/    3CBA :                     ; ----------------------------------------------------------------
(2)    5/    3CBA :                     
(2)    6/    3CBA :                     ; ====================================================================
(2)    7/    3CBA :                     ; ------------------------------------------------------
(2)    8/    3CBA :                     ; Variables
(2)    9/    3CBA :                     ; ------------------------------------------------------
(2)   10/    3CBA :                     
(2)   11/    3CBA :                     ; ====================================================================
(2)   12/    3CBA :                     ; ------------------------------------------------------
(2)   13/    3CBA :                     ; Structs
(2)   14/    3CBA :                     ; ------------------------------------------------------
(2)   15/    3CBA :                     
(2)   16/    3CBA :                     ; ----------------------------------------------
(2)   17/    3CBA :                     ; VRAM Setup
(2)   18/    3CBA :                     ; ----------------------------------------------
(2)   19/    3CBA :                     
(2)   20/    3CBA :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/    3CBA : =$3CBA               GLBL_LASTPC     := *
(2)   20/    3CBA :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $4C2
(2)   22/     4C4 :  (MACRO-2)           			endmemory
(2)   22/    417C :                     .here:          dephase
(2)   22/    417C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   22/    3CBA :                                     phase GLBL_LASTPC
(2)   23/    3CBA :                     
(2)   24/    3CBA :  (MACRO-2)           			memory $5A0
(2)   24/    3CBA : =$3CBA               GLBL_LASTPC     := *
(2)   24/    3CBA :                                     dephase
(2)   24/     5A0 :                                     phase $5A0
(2)   24/     5A0 : =$5A0                GLBL_LASTORG    := *
(2)   25/     5A0 :                     vramLoc_Haruna		ds.b $24
(2)   26/     5C4 :                     vramLoc_Sisi		ds.b $10
(2)   27/     5D4 :  (MACRO-2)           			endmemory
(2)   27/    3CEE :                     .here:          dephase
(2)   27/    3CEE :                                     ds.b -(.here-GLBL_LASTORG)
(2)   27/    3CBA :                                     phase GLBL_LASTPC
(2)   28/    3CBA :                     
(2)   29/    3CBA :                     ; ====================================================================
(2)   30/    3CBA :                     ; ------------------------------------------------------
(2)   31/    3CBA :                     ; This screen's RAM
(2)   32/    3CBA :                     ; ------------------------------------------------------
(2)   33/    3CBA :                     
(2)   34/    3CBA :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   34/    3CBA : =$3CBA               GLBL_LASTPC     := *
(2)   34/    3CBA :                                     dephase
(2)   34/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   34/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   35/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   36/FFFFFFFFFFFFB802 :                     RAM_SC1_PickDispl	ds.w 1
(2)   37/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   38/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   38/    3CC2 :                     .here:          dephase
(2)   38/    3CC2 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   38/    3CBA :                                     phase GLBL_LASTPC
(2)   39/    3CBA :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   40/    3CBA :                     
(2)   41/    3CBA :                     ; ====================================================================
(2)   42/    3CBA :                     ; ------------------------------------------------------
(2)   43/    3CBA :                     ; Init
(2)   44/    3CBA :                     ; ------------------------------------------------------
(2)   45/    3CBA :                     
(2)   46/    3CBA : 6100 CB02           		bsr	Video_DisplayOff
(2)   47/    3CBE : 6100 D8BC           		bsr	System_Default
(2)   48/    3CC2 :                     	; ----------------------------------------------
(2)   49/    3CC2 : 41FA 00FA           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   50/    3CC6 : 6100 DBB6           		bsr	System_SetDataBank
(2)   51/    3CCA : 6100 D8A2           		bsr	System_SramInit
(2)   52/    3CCE : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   53/    3CD2 : 6100 D8A0           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   54/    3CD6 :                     	; ----------------------------------------------
(2)   55/    3CD6 :                     	; Load PRINT
(2)   56/    3CD6 : 203C 0002 65DA      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   57/    3CDC : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   58/    3CE0 : 6100 D30E           		bsr	Video_PrintInit
(2)   59/    3CE4 : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   60/    3CEA : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   61/    3CEE : 6100 D2F0           		bsr	Video_PrintInitW
(2)   62/    3CF2 : 6100 D310           		bsr	Video_PrintDefPal_Fade
(2)   63/    3CF6 :                     	; ----------------------------------------------
(2)   64/    3CF6 : 41F9 0003 DC7A      		lea	(Pal_Haruna),a0
(2)   65/    3CFC : 7010                		moveq	#16,d0
(2)   66/    3CFE : 7210                		moveq	#16,d1
(2)   67/    3D00 : 6100 D268           		bsr	Video_FadePal
(2)   68/    3D04 : 41F9 0003 DEDA      		lea	(Pal_Sisi),a0
(2)   69/    3D0A : 7020                		moveq	#32,d0
(2)   70/    3D0C : 7210                		moveq	#16,d1
(2)   71/    3D0E : 6100 D25A           		bsr	Video_FadePal
(2)   72/    3D12 : 203C 0003 D6FA      		move.l	#Art_Sisi,d0
(2)   73/    3D18 : 323C B880           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   74/    3D1C : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   75/    3D20 : 6100 CC24           		bsr	Video_LoadArt
(2)   76/    3D24 : 203C 0000 3DD0      		move.l	#obj_Player,d0
(2)   77/    3D2A : 6100 DB96           		bsr	Object_Make
(2)   78/    3D2E :                     	; ----------------------------------------------
(2)   79/    3D2E : 6178                		bsr	.show_counter				; Draw counter
(2)   80/    3D30 : 6100 CA80           		bsr	Video_DisplayOn
(2)   81/    3D34 : 6100 02CA           		bsr	Screen0_PickBackgrnd
(2)   82/    3D38 :                     	; ----------------------------------------------
(2)   83/    3D38 : 6100 DB56           		bsr	Object_Run
(2)   84/    3D3C : 6100 C820           		bsr	Video_BuildSprites
(2)   85/    3D40 : 6100 D1C4           		bsr	Video_FadeIn_Full
(2)   86/    3D44 :                     
(2)   87/    3D44 :                     ; ====================================================================
(2)   88/    3D44 :                     ; ------------------------------------------------------
(2)   89/    3D44 :                     ; Loop
(2)   90/    3D44 :                     ; ------------------------------------------------------
(2)   91/    3D44 :                     
(2)   92/    3D44 :                     .loop:
(2)   93/    3D44 : 6100 DB4A           		bsr	Object_Run
(2)   94/    3D48 : 6100 C814           		bsr	Video_BuildSprites
(2)   95/    3D4C : 6100 D726           		bsr	System_Render
(2)   96/    3D50 :                     
(2)   97/    3D50 : 6156                		bsr	.show_counter				; Draw counter
(2)   98/    3D52 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)   99/    3D56 : 0247 0010           		andi.w	#JoyB,d7
(2)  100/    3D5A : 670E                		beq.s	.not_apress
(2)  101/    3D5C : 5278 B802           		addq.w	#1,(RAM_SC1_PickDispl).w
(2)  102/    3D60 : 0278 0001 B802      		andi.w	#1,(RAM_SC1_PickDispl).w
(2)  103/    3D66 : 6100 0298           		bsr	Screen0_PickBackgrnd
(2)  104/    3D6A :                     .not_apress:
(2)  105/    3D6A : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  106/    3D6E : 0247 0020           		andi.w	#JoyC,d7
(2)  107/    3D72 : 670A                		beq.s	.not_b
(2)  108/    3D74 : 203C 0000 3ED8      		move.l	#obj_Ball,d0
(2)  109/    3D7A : 6100 DB46           		bsr	Object_Make
(2)  110/    3D7E :                     .not_b:
(2)  111/    3D7E :                     
(2)  112/    3D7E :                     	; Check START button
(2)  113/    3D7E : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  114/    3D82 : 0247 0080           		andi.w	#JoyStart,d7
(2)  115/    3D86 : 67BC                		beq	.loop
(2)  116/    3D88 : 6100 D18E           		bsr	Video_FadeOut_Full
(2)  117/    3D8C :                     
(2)  118/    3D8C :                     	; Stop ALL sequences
(2)  119/    3D8C : 6100 C5A6           		bsr	gemaStopAll
(2)  120/    3D90 :                     	rept 4
(2)  121/    3D90 :                     		bsr	System_Render		; Wait 4 frames...
(2)  122/    3D90 :                     	endm
(2)  121/    3D90 : 6100 D6E2           		bsr	System_Render		; Wait 4 frames...
(2)  121/    3D94 : 6100 D6DE           		bsr	System_Render		; Wait 4 frames...
(2)  121/    3D98 : 6100 D6DA           		bsr	System_Render		; Wait 4 frames...
(2)  121/    3D9C : 6100 D6D6           		bsr	System_Render		; Wait 4 frames...
(2)  123/    3DA0 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  124/    3DA6 : 4E75                		rts				; <-- RTS
(2)  125/    3DA8 :                     
(2)  126/    3DA8 :                     ; ------------------------------------------------------
(2)  127/    3DA8 :                     ; Show framecounter and input
(2)  128/    3DA8 :                     ; ------------------------------------------------------
(2)  129/    3DA8 :                     
(2)  130/    3DA8 :                     .show_counter:
(2)  131/    3DA8 : 4E75                		rts
(2)  132/    3DAA : 41FA 0374           		lea	str_NewCountr0(pc),a0
(2)  133/    3DAE : 7001                		moveq	#1,d0
(2)  134/    3DB0 : 7203                		moveq	#3,d1
(2)  135/    3DB2 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  136/    3DB6 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  137/    3DBA : 6000 D350           		bra	Video_PrintW
(2)  138/    3DBE :                     
(2)  139/    3DBE :                     ; ====================================================================
(2)  140/    3DBE :                     ; ------------------------------------------------------
(2)  141/    3DBE :                     ; DATA asset locations
(2)  142/    3DBE :                     ; ------------------------------------------------------
(2)  143/    3DBE :                     
(2)  144/    3DBE :                     file_scrn1_main:
(2)  145/    3DBE : 0000 6572           		dc.l DATA_BANK0
(2)  146/    3DC2 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             3DC8 : 494E 2E42 494E 00 
(2)  147/    3DCF :                     		align 2
(2)  148/    3DD0 :                     ; file_scrn1_mars:
(2)  149/    3DD0 :                     ; 		dc.l DATA_BANK1
(2)  150/    3DD0 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  151/    3DD0 :                     ; 		align 2
(2)  152/    3DD0 :                     
(2)  153/    3DD0 :                     ; ====================================================================
(2)  154/    3DD0 :                     ; ------------------------------------------------------
(2)  155/    3DD0 :                     ; Objects
(2)  156/    3DD0 :                     ; ------------------------------------------------------
(2)  157/    3DD0 :                     
(2)  158/    3DD0 :                     ; --------------------------------------------------
(2)  159/    3DD0 :                     ; Test object
(2)  160/    3DD0 :                     ; --------------------------------------------------
(2)  161/    3DD0 :                     
(2)  162/    3DD0 :                     obj_Player:
(2)  163/    3DD0 : 7000                		moveq	#0,d0
(2)  164/    3DD2 : 102E 001C           		move.b	obj_index(a6),d0
(2)  165/    3DD6 : D040                		add.w	d0,d0
(2)  166/    3DD8 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  167/    3DDC : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  168/    3DE0 :                     ; ----------------------------------------------
(2)  169/    3DE0 : 0004                .list:		dc.w .init-.list
(2)  170/    3DE2 : 002A                		dc.w .main-.list
(2)  171/    3DE4 :                     ; ----------------------------------------------
(2)  172/    3DE4 :                     .init:
(2)  173/    3DE4 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  174/    3DE8 : 6100 DB42           		bsr	object_ResetAnim	; Init/Reset animation
(2)  175/    3DEC : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  176/    3DF2 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  177/    3DF8 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  178/    3DFE : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  179/    3E04 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  180/    3E0A :                     
(2)  181/    3E0A :                     ; ----------------------------------------------
(2)  182/    3E0A :                     .main:
(2)  183/    3E0A : 41F8 D8F8           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  184/    3E0E : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  185/    3E12 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  186/    3E14 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  187/    3E16 : 7400                		moveq	#0,d2
(2)  188/    3E18 : 7600                		moveq	#0,d3
(2)  189/    3E1A : 0807 0003           		btst	#bitJoyRight,d7
(2)  190/    3E1E : 6706                		beq.s	.not_right
(2)  191/    3E20 : 7001                		moveq	#1,d0			; X right
(2)  192/    3E22 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  193/    3E22 : 7402                		moveq	#2,d2
(2)  194/    3E24 : 5243                		addq.w	#1,d3
(2)  195/    3E26 :                     .not_right:
(2)  196/    3E26 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  197/    3E2A : 6706                		beq.s	.not_left
(2)  198/    3E2C : 70FF                		moveq	#-1,d0			; X left
(2)  199/    3E2E :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  200/    3E2E : 7403                		moveq	#3,d2
(2)  201/    3E30 : 5243                		addq.w	#1,d3
(2)  202/    3E32 :                     .not_left:
(2)  203/    3E32 : 0807 0001           		btst	#bitJoyDown,d7
(2)  204/    3E36 : 6706                		beq.s	.not_down
(2)  205/    3E38 : 7201                		moveq	#1,d1			; Y down
(2)  206/    3E3A : 7400                		moveq	#0,d2
(2)  207/    3E3C : 5243                		addq.w	#1,d3
(2)  208/    3E3E :                     .not_down:
(2)  209/    3E3E : 0807 0000           		btst	#bitJoyUp,d7
(2)  210/    3E42 : 6706                		beq.s	.not_up
(2)  211/    3E44 : 72FF                		moveq	#-1,d1			; Y up
(2)  212/    3E46 : 7401                		moveq	#1,d2
(2)  213/    3E48 : 5243                		addq.w	#1,d3
(2)  214/    3E4A :                     .not_up:
(2)  215/    3E4A :                     ; 	if MARS|MARSCD
(2)  216/    3E4A :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  217/    3E4A :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  218/    3E4A :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  219/    3E4A :                     ; 		add.w	d0,obj_x(a6)
(2)  220/    3E4A :                     ; 		add.w	d1,obj_z(a6)
(2)  221/    3E4A :                     ; 	else
(2)  222/    3E4A :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  223/    3E4A :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  224/    3E4A : D16E 0004           		add.w	d0,obj_x(a6)
(2)  225/    3E4E : D36E 0008           		add.w	d1,obj_y(a6)
(2)  226/    3E52 :                     ; 	endif
(2)  227/    3E52 :                     
(2)  228/    3E52 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  229/    3E56 :                     
(2)  230/    3E56 :                     ; ----------------------------------------------
(2)  231/    3E56 :                     ; Show the object...
(2)  232/    3E56 :                     
(2)  233/    3E56 : 4A43                		tst.w	d3
(2)  234/    3E58 : 6708                		beq.s	.no_anim
(2)  235/    3E5A : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  236/    3E5E : 6100 DB04           		bsr	object_Animate
(2)  237/    3E62 :                     .no_anim:
(2)  238/    3E62 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  239/    3E62 :                     ; 		bsr	object_Touch
(2)  240/    3E62 :                     ; 		tst.l	d0
(2)  241/    3E62 :                     ; 		beq.s	.lel
(2)  242/    3E62 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  243/    3E62 :                     ; .lel:
(2)  244/    3E62 :                     
(2)  245/    3E62 : 207C 0000 0000      		move.l	#0,a0
(2)  246/    3E68 : 43F9 0003 DC9A      		lea	(Map_Haruna),a1
(2)  247/    3E6E : 45F9 0003 DE4A      		lea	(Plc_Haruna),a2
(2)  248/    3E74 : 47F9 0003 A87A      		lea	(Art_Haruna),a3
(2)  249/    3E7A : 7400                		moveq	#0,d2
(2)  250/    3E7C : 302E 0004           		move.w	obj_x(a6),d0
(2)  251/    3E80 : 322E 0008           		move.w	obj_y(a6),d1
(2)  252/    3E84 : D078 CC42           		add.w	(RAM_HorScroll+2).w,d0
(2)  253/    3E88 : 9278 D002           		sub.w	(RAM_VerScroll+2).w,d1
(2)  254/    3E8C : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  255/    3E90 : E14A                		lsl.w	#8,d2
(2)  256/    3E92 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  257/    3E94 : D47C 25A0           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  258/    3E98 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  259/    3E9C : 6000 D4D4           		bra	Video_MakeSprMap_DMA
(2)  260/    3EA0 :                     
(2)  261/    3EA0 :                     ; ----------------------------------------------
(2)  262/    3EA0 :                     
(2)  263/    3EA0 :                     .anim_data:
(2)  264/    3EA0 : 0008                		dc.w .anim_down-.anim_data
(2)  265/    3EA2 : 0014                		dc.w .anim_up-.anim_data
(2)  266/    3EA4 : 0020                		dc.w .anim_right-.anim_data
(2)  267/    3EA6 : 002C                		dc.w .anim_left-.anim_data
(2)  268/    3EA8 :                     
(2)  269/    3EA8 :                     .anim_down:
(2)  270/    3EA8 : 0008                		dc.w 8
(2)  271/    3EAA : 0000 0001 0000      		dc.w 0,1,0,2
             3EB0 : 0002             
(2)  272/    3EB2 : FFFE                		dc.w -2
(2)  273/    3EB4 :                     		align 2
(2)  274/    3EB4 :                     .anim_up:
(2)  275/    3EB4 : 0008                		dc.w 8
(2)  276/    3EB6 : 0003 0004 0003      		dc.w 3,4,3,5
             3EBC : 0005             
(2)  277/    3EBE : FFFE                		dc.w -2
(2)  278/    3EC0 :                     		align 2
(2)  279/    3EC0 :                     .anim_right:
(2)  280/    3EC0 : 0008                		dc.w 8
(2)  281/    3EC2 : 0006 0007 0006      		dc.w 6,7,6,8
             3EC8 : 0008             
(2)  282/    3ECA : FFFE                		dc.w -2
(2)  283/    3ECC :                     		align 2
(2)  284/    3ECC :                     .anim_left:
(2)  285/    3ECC : 0008                		dc.w 8
(2)  286/    3ECE : 0009 000A 0009      		dc.w 9,10,9,11
             3ED4 : 000B             
(2)  287/    3ED6 : FFFE                		dc.w -2
(2)  288/    3ED8 :                     		align 2
(2)  289/    3ED8 :                     
(2)  290/    3ED8 :                     ; --------------------------------------------------
(2)  291/    3ED8 :                     ; Test object
(2)  292/    3ED8 :                     ; --------------------------------------------------
(2)  293/    3ED8 :                     
(2)  294/    3ED8 :                     obj_Ball:
(2)  295/    3ED8 : 7000                		moveq	#0,d0
(2)  296/    3EDA : 102E 001C           		move.b	obj_index(a6),d0
(2)  297/    3EDE : D040                		add.w	d0,d0
(2)  298/    3EE0 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  299/    3EE4 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  300/    3EE8 :                     ; ----------------------------------------------
(2)  301/    3EE8 : 0004                .list:		dc.w .init-.list
(2)  302/    3EEA : 0072                		dc.w .main-.list
(2)  303/    3EEC :                     ; ----------------------------------------------
(2)  304/    3EEC :                     .init:
(2)  305/    3EEC : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  306/    3EF0 : 6100 DA3A           		bsr	object_ResetAnim	; Init/Reset animation
(2)  307/    3EF4 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  308/    3EFA : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  309/    3F00 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  310/    3F06 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  311/    3F0C :                     
(2)  312/    3F0C : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  313/    3F12 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  314/    3F18 : 303C 0049           		move.w	#$48+1,d0
(2)  315/    3F1C : 6100 D6E8           		bsr	System_DiceRoll
(2)  316/    3F20 : E348                		lsl.w	#1,d0
(2)  317/    3F22 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  318/    3F26 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  319/    3F2A : E748                		lsl.w	#3,d0
(2)  320/    3F2C : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  321/    3F30 : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  322/    3F34 :                     
(2)  323/    3F34 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  324/    3F3A : 6100 D670           		bsr	System_Random
(2)  325/    3F3E : 2E38 E97C           		move.l	(RAM_SysRandom).w,d7
(2)  326/    3F42 : E24F                		lsr.w	#1,d7
(2)  327/    3F44 : 640A                		bcc.s	.x_random
(2)  328/    3F46 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  329/    3F4A : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  330/    3F50 :                     .x_random:
(2)  331/    3F50 : E24F                		lsr.w	#1,d7
(2)  332/    3F52 : 6404                		bcc.s	.y_random
(2)  333/    3F54 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  334/    3F58 :                     .y_random:
(2)  335/    3F58 : 4E75                		rts
(2)  336/    3F5A :                     
(2)  337/    3F5A :                     ; ----------------------------------------------
(2)  338/    3F5A :                     .main:
(2)  339/    3F5A : 3438 D7F6           		move.w	(RAM_VdpRegSetC).w,d2
(2)  340/    3F5E : 0802 0002           		btst	#2,d2
(2)  341/    3F62 : 660E                		bne.s	.y_fix
(2)  342/    3F64 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  343/    3F6A : 6D06                		blt.s	.y_fix
(2)  344/    3F6C : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  345/    3F72 :                     .y_fix:
(2)  346/    3F72 :                     
(2)  347/    3F72 : 323C 00E0           		move.w	#224,d1
(2)  348/    3F76 : 3438 D7F6           		move.w	(RAM_VdpRegSetC).w,d2
(2)  349/    3F7A : 0802 0002           		btst	#2,d2
(2)  350/    3F7E : 6702                		beq.s	.y_double
(2)  351/    3F80 : D241                		add.w	d1,d1
(2)  352/    3F82 :                     .y_double:
(2)  353/    3F82 : 303C 0140           		move.w	#320,d0
(2)  354/    3F86 : 342E 0004           		move.w	obj_x(a6),d2
(2)  355/    3F8A : 4A42                		tst.w	d2
(2)  356/    3F8C : 6A0A                		bpl.s	.x_back
(2)  357/    3F8E : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  358/    3F92 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  359/    3F98 :                     .x_back:
(2)  360/    3F98 : B440                		cmp.w	d0,d2
(2)  361/    3F9A : 6D0A                		blt.s	.x_foward
(2)  362/    3F9C : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  363/    3FA0 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  364/    3FA6 :                     .x_foward:
(2)  365/    3FA6 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  366/    3FAA :                     
(2)  367/    3FAA : 342E 0008           		move.w	obj_y(a6),d2
(2)  368/    3FAE : 4A42                		tst.w	d2
(2)  369/    3FB0 : 6A04                		bpl.s	.y_back
(2)  370/    3FB2 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  371/    3FB6 :                     .y_back:
(2)  372/    3FB6 : B441                		cmp.w	d1,d2
(2)  373/    3FB8 : 6D04                		blt.s	.y_foward
(2)  374/    3FBA : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  375/    3FBE :                     .y_foward:
(2)  376/    3FBE : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  377/    3FC2 :                     
(2)  378/    3FC2 : 6100 D970           		bsr	object_Speed
(2)  379/    3FC6 :                     
(2)  380/    3FC6 :                     ; ----------------------------------------------
(2)  381/    3FC6 :                     ; Show the object...
(2)  382/    3FC6 :                     
(2)  383/    3FC6 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  384/    3FCA : 6100 D998           		bsr	object_Animate
(2)  385/    3FCE : 43F9 0003 DEFA      		lea	(Map_Sisi),a1
(2)  386/    3FD4 : 7400                		moveq	#0,d2
(2)  387/    3FD6 : 302E 0004           		move.w	obj_x(a6),d0
(2)  388/    3FDA : 322E 0008           		move.w	obj_y(a6),d1
(2)  389/    3FDE : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  390/    3FE2 : E14A                		lsl.w	#8,d2
(2)  391/    3FE4 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  392/    3FE6 : D47C 45C4           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  393/    3FEA : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  394/    3FEE : 6000 D39A           		bra	Video_MakeSprMap
(2)  395/    3FF2 :                     
(2)  396/    3FF2 :                     ; ----------------------------------------------
(2)  397/    3FF2 :                     
(2)  398/    3FF2 :                     .anim_data:
(2)  399/    3FF2 : 0002                		dc.w .maind-.anim_data
(2)  400/    3FF4 :                     .maind:
(2)  401/    3FF4 : 0008                		dc.w 8
(2)  402/    3FF6 : 0000 0001 0002      		dc.w 0,1,2,1
             3FFC : 0001             
(2)  403/    3FFE : FFFE                		dc.w -2
(2)  404/    4000 :                     		align 2
(2)  405/    4000 :                     
(2)  406/    4000 :                     ; ====================================================================
(2)  407/    4000 :                     ; ------------------------------------------------------
(2)  408/    4000 :                     ; Subroutines
(2)  409/    4000 :                     ; ------------------------------------------------------
(2)  410/    4000 :                     
(2)  411/    4000 :                     Screen0_PickBackgrnd:
(2)  412/    4000 : 6100 D472           		bsr	System_Render
(2)  413/    4004 : 6100 C7B8           		bsr	Video_DisplayOff
(2)  414/    4008 : 6100 C77A           		bsr	Video_ClearScreen
(2)  415/    400C : 4A78 B802           		tst.w	(RAM_SC1_PickDispl).w
(2)  416/    4010 : 6600 0082           		bne	.pick_second
(2)  417/    4014 : 7001                		moveq	#1,d0
(2)  418/    4016 : 7200                		moveq	#%00,d1
(2)  419/    4018 : 6100 C826           		bsr	Video_Resolution
(2)  420/    401C : 41FA 00EA           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  421/    4020 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  422/    4022 : 7201                		moveq	#1,d1
(2)  423/    4024 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  424/    4028 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  425/    402C : 6100 D0DE           		bsr	Video_PrintW				; <-- Print BIG text
(2)  426/    4030 : 41FA 00E0           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  427/    4034 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  428/    4036 : 7219                		moveq	#25,d1
(2)  429/    4038 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  430/    403C : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  431/    4040 : 6100 D0CA           		bsr	Video_PrintW
(2)  432/    4044 :                     
(2)  433/    4044 : 41F9 0003 DF40      		lea	(Pal_TESTBG+color_indx(1)),a0		; a0 - Load palette (+2 skips first color)
(2)  434/    404A : 7001                		moveq	#1,d0					; d0 - Start at $01
(2)  435/    404C : 720F                		moveq	#15,d1					; d1 - 15 colors
(2)  436/    404E : 6100 CF1A           		bsr	Video_FadePal				; Load palette to FADE buffer
(2)  437/    4052 : 6100 CF20           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  438/    4056 : 4278 D550           		clr.w	(RAM_Palette).w
(2)  439/    405A : 4278 D5D0           		clr.w	(RAM_PaletteFade).w
(2)  440/    405E : 203C 0002 89DA      		move.l	#Art_TESTBG,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  441/    4064 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  442/    4068 : 343C 8620           		move.w	#Art_TESTBG_e-Art_TESTBG,d2		; d2 - Size: end-start
(2)  443/    406C : 6100 C8D8           		bsr	Video_LoadArt
(2)  444/    4070 : 41F9 0003 DF5E      		lea	(Map_TESTBG),a0				; a0 - Map data
(2)  445/    4076 : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  446/    407C : 223C 0028 001C      		move.l	#splitw(320/8,224/8),d1			; d1 - Width and Height
(2)  447/    4082 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  448/    4088 : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  449/    408C : 6100 CB84           		bsr	Video_LoadMap
(2)  450/    4090 : 6000 C720           		bra	Video_DisplayOn
(2)  451/    4094 :                     
(2)  452/    4094 :                     .pick_second:
(2)  453/    4094 : 7001                		moveq	#1,d0
(2)  454/    4096 : 7202                		moveq	#%10,d1
(2)  455/    4098 : 6100 C7A6           		bsr	Video_Resolution
(2)  456/    409C : 41FA 006A           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  457/    40A0 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  458/    40A2 : 7201                		moveq	#1,d1
(2)  459/    40A4 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  460/    40A8 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  461/    40AC : 6100 D05E           		bsr	Video_PrintW
(2)  462/    40B0 : 41FA 0060           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  463/    40B4 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  464/    40B6 : 721A                		moveq	#26,d1
(2)  465/    40B8 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  466/    40BC : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  467/    40C0 : 6100 D04A           		bsr	Video_PrintW
(2)  468/    40C4 :                     
(2)  469/    40C4 : 41F9 0003 E81E      		lea	(Pal_TESTBG2),a0			; a0 - Load palette (+2 skips first color)
(2)  470/    40CA : 7000                		moveq	#0,d0					; d0 - Start at $01
(2)  471/    40CC : 7210                		moveq	#16,d1					; d1 - 15 colors
(2)  472/    40CE : 6100 CEA4           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  473/    40D2 : 203C 0003 0FFA      		move.l	#Art_TESTBG2,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  474/    40D8 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  475/    40DC : 343C 9880           		move.w	#Art_TESTBG2_e-Art_TESTBG2,d2		; d2 - Size: end-start
(2)  476/    40E0 : 6100 C864           		bsr	Video_LoadArt
(2)  477/    40E4 : 41F9 0003 E83E      		lea	(Map_TESTBG2),a0			; a0 - Map data
(2)  478/    40EA : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  479/    40F0 : 223C 0028 0038      		move.l	#splitw(320/8,448/8),d1			; d1 - Width and Height
(2)  480/    40F6 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  481/    40FC : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  482/    4100 : 6100 CB86           		bsr	Video_LoadMapV
(2)  483/    4104 : 6000 C6AC           		bra	Video_DisplayOn
(2)  484/    4108 :                     
(2)  485/    4108 :                     ; ====================================================================
(2)  486/    4108 :                     ; ------------------------------------------------------
(2)  487/    4108 :                     ; Custom VBlank
(2)  488/    4108 :                     ; ------------------------------------------------------
(2)  489/    4108 :                     
(2)  490/    4108 :                     ; ------------------------------------------------------
(2)  491/    4108 :                     ; Custom HBlank
(2)  492/    4108 :                     ; ------------------------------------------------------
(2)  493/    4108 :                     
(2)  494/    4108 :                     ; ====================================================================
(2)  495/    4108 :                     ; ------------------------------------------------------
(2)  496/    4108 :                     ; Includes for this screen
(2)  497/    4108 :                     ; ------------------------------------------------------
(2)  498/    4108 :                     
(2)  499/    4108 :                     ; ====================================================================
(2)  500/    4108 :                     ; ------------------------------------------------------
(2)  501/    4108 :                     ; Small data section
(2)  502/    4108 :                     ; ------------------------------------------------------
(2)  503/    4108 :                     
(2)  504/    4108 :                     str_NikonaTest:
(2)  505/    4108 : 2A2A 2054 6F70      		dc.b "** Top **"
             410E : 202A 2A          
(2)  506/    4111 : 00                  		dc.b 0
(2)  507/    4112 :                     		align 2
(2)  508/    4112 :                     str_NikonaTest2:
(2)  509/    4112 : 2A2A 2042 6F74      		dc.b "** Bottom **"
             4118 : 746F 6D20 2A2A    
(2)  510/    411E : 00                  		dc.b 0
(2)  511/    411F :                     		align 2
(2)  512/    4120 :                     str_NewCountr0:
(2)  513/    4120 : 83FF D7D8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  514/    4124 : 00                  		dc.b 0
(2)  515/    4125 :                     		align 2
(2)  516/    4126 :                     
(2)  517/    4126 :                     str_InputMe:
(2)  525/    4126 : 20                  		dc.b " "
(2)  527/    4127 : 00                  		dc.b 0
(2)  528/    4128 :                     		align 2
(2)  529/    4128 :                     
(2)  530/    4128 :                     Pal_TestStamp:
(2)  531/    4128 :                     ; 		dc.w 0
(2)  532/    4128 :                     ; ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  533/    4128 :                     ; 		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  534/    4128 :                     ; 		align 2
(2)  535/    4128 :                     
(2)  536/    4128 :                     ; Object data:
(2)  537/    4128 :                     ; objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  538/    4128 :                     ; 		align 2
(2)  539/    4128 :                     ; objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  540/    4128 :                     ; 		align 2
(2)  541/    4128 :                     ; objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  542/    4128 :                     ; 		align 2
(2)  543/    4128 :                     
(2)  544/    4128 :                     ; ====================================================================
(2)  545/    4128 :                     
(1)   16/    4128 :                     mcscrn_e:
(1)   16/    4128 :                     ; Md_Screen00_e:
(1)   16/    4128 : =$4128               MD_SCREEN01_E label *
(1)   16/    4128 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN01",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   17/    4128 : (MACRO)              	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/    4128 : =$4128               MD_SCREEN02 label *
(1)   17/    4128 :                     
(1)   17/    4128 :                     mctopscrn:
(1)   17/    4128 :                     mcscrn_s:
(1)   17/    4128 :                             include "game/code/screen_2.asm";"game/screenX/code.asm"
(2)    1/    4128 :                     ; ===========================================================================
(2)    2/    4128 :                     ; ----------------------------------------------------------------
(2)    3/    4128 :                     ; SCREEN CODE
(2)    4/    4128 :                     ; ----------------------------------------------------------------
(2)    5/    4128 :                     
(2)    6/    4128 :                     ; ====================================================================
(2)    7/    4128 :                     ; ------------------------------------------------------
(2)    8/    4128 :                     ; Variables
(2)    9/    4128 :                     ; ------------------------------------------------------
(2)   10/    4128 :                     
(2)   11/    4128 :                     ; ====================================================================
(2)   12/    4128 :                     ; ------------------------------------------------------
(2)   13/    4128 :                     ; Structs
(2)   14/    4128 :                     ; ------------------------------------------------------
(2)   15/    4128 :                     
(2)   16/    4128 :                     ; ----------------------------------------------
(2)   17/    4128 :                     ; VRAM Setup
(2)   18/    4128 :                     ; ----------------------------------------------
(2)   19/    4128 :                     
(2)   20/    4128 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/    4128 : =$4128               GLBL_LASTPC     := *
(2)   20/    4128 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $300
(2)   22/     302 :                     vramLoc_Haruna		ds.b $24
(2)   23/     326 :                     vramLoc_Sisi		ds.b $10
(2)   24/     336 :  (MACRO-2)           			endmemory
(2)   24/    445C :                     .here:          dephase
(2)   24/    445C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/    4128 :                                     phase GLBL_LASTPC
(2)   25/    4128 :                     
(2)   26/    4128 :                     ; ====================================================================
(2)   27/    4128 :                     ; ------------------------------------------------------
(2)   28/    4128 :                     ; This screen's RAM
(2)   29/    4128 :                     ; ------------------------------------------------------
(2)   30/    4128 :                     
(2)   31/    4128 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/    4128 : =$4128               GLBL_LASTPC     := *
(2)   31/    4128 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_TempStampVars	ds.l 2
(2)   34/FFFFFFFFFFFFB80A :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB810 :  (MACRO-2)           			endmemory
(2)   35/    4138 :                     .here:          dephase
(2)   35/    4138 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/    4128 :                                     phase GLBL_LASTPC
(2)   36/    4128 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/    4128 :                     
(2)   38/    4128 :                     ; ====================================================================
(2)   39/    4128 :                     ; ------------------------------------------------------
(2)   40/    4128 :                     ; Init
(2)   41/    4128 :                     ; ------------------------------------------------------
(2)   42/    4128 :                     
(2)   43/    4128 : 6100 C694           		bsr	Video_DisplayOff
(2)   44/    412C : 6100 D44E           		bsr	System_Default
(2)   45/    4130 :                     	; ----------------------------------------------
(2)   46/    4130 : 41FA 00F8           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/    4134 : 6100 D748           		bsr	System_SetDataBank
(2)   48/    4138 : 6100 D434           		bsr	System_SramInit
(2)   49/    413C : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/    4140 : 6100 D432           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/    4144 :                     	; ----------------------------------------------
(2)   52/    4144 :                     	; Load PRINT
(2)   53/    4144 : 203C 0002 65DA      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/    414A : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/    414E : 6100 CEA0           		bsr	Video_PrintInit
(2)   56/    4152 : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   57/    4158 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/    415C : 6100 CE82           		bsr	Video_PrintInitW
(2)   59/    4160 : 6100 CEA2           		bsr	Video_PrintDefPal_Fade
(2)   60/    4164 :                     	; ----------------------------------------------
(2)   61/    4164 : 41F8 4764           		lea	(Pal_StampTest),a0
(2)   62/    4168 : 7000                		moveq	#0,d0
(2)   63/    416A : 7210                		moveq	#16,d1
(2)   64/    416C : 6100 CDFC           		bsr	Video_FadePal
(2)   65/    4170 : 41F8 44A0           		lea	(Pal_Haruna),a0
(2)   66/    4174 : 7010                		moveq	#16,d0
(2)   67/    4176 : 7210                		moveq	#16,d1
(2)   68/    4178 : 6100 CDF0           		bsr	Video_FadePal
(2)   69/    417C : 41F8 4700           		lea	(Pal_Sisi),a0
(2)   70/    4180 : 7020                		moveq	#32,d0
(2)   71/    4182 : 7210                		moveq	#16,d1
(2)   72/    4184 : 6100 CDE4           		bsr	Video_FadePal
(2)   73/    4188 : 203C 0003 D6FA      		move.l	#Art_Sisi,d0
(2)   74/    418E : 323C 64C0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   75/    4192 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   76/    4196 : 6100 C7AE           		bsr	Video_LoadArt
(2)   77/    419A :                     
(2)   78/    419A : 41FA 02E2           		lea	str_MidemeEsta(pc),a0
(2)   79/    419E : 7000                		moveq	#0,d0
(2)   80/    41A0 : 721A                		moveq	#26,d1
(2)   81/    41A2 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   82/    41A6 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   83/    41AA : 6100 CE76           		bsr	Video_Print
(2)   84/    41AE :                     
(2)   85/    41AE :                     	; ----------------------------------------------
(2)  129/    41AE :                     	; ----------------------------------------------
(2)  130/    41AE : 6164                		bsr	.show_counter				; Draw counter
(2)  131/    41B0 : 6100 C600           		bsr	Video_DisplayOn
(2)  132/    41B4 :                     	; ----------------------------------------------
(2)  148/    41B4 : 6100 D6DA           		bsr	Object_Run
(2)  149/    41B8 : 6100 C3A4           		bsr	Video_BuildSprites
(2)  150/    41BC : 6100 CD48           		bsr	Video_FadeIn_Full
(2)  151/    41C0 :                     
(2)  152/    41C0 :                     ; ====================================================================
(2)  153/    41C0 :                     ; ------------------------------------------------------
(2)  154/    41C0 :                     ; Loop
(2)  155/    41C0 :                     ; ------------------------------------------------------
(2)  156/    41C0 :                     
(2)  157/    41C0 :                     .loop:
(2)  158/    41C0 : 6100 D32E           		bsr	Sound_Update
(2)  159/    41C4 : 6100 D2AE           		bsr	System_Render
(2)  160/    41C8 : 6100 D6C6           		bsr	Object_Run
(2)  161/    41CC : 6100 C390           		bsr	Video_BuildSprites
(2)  162/    41D0 : 6100 D31E           		bsr	Sound_Update
(2)  209/    41D4 : 613E                		bsr	.show_counter				; Draw counter
(2)  210/    41D6 :                     
(2)  211/    41D6 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  212/    41DA : 0247 0020           		andi.w	#JoyC,d7
(2)  213/    41DE : 670A                		beq.s	.not_b
(2)  214/    41E0 : 203C 0000 4352      		move.l	#obj_Ball,d0
(2)  215/    41E6 : 6100 D6DA           		bsr	Object_Make
(2)  216/    41EA :                     .not_b:
(2)  217/    41EA :                     
(2)  218/    41EA :                     	; Check START button
(2)  219/    41EA : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  220/    41EE : 0247 0080           		andi.w	#JoyStart,d7
(2)  221/    41F2 : 67CC                		beq	.loop
(2)  222/    41F4 : 6100 CD22           		bsr	Video_FadeOut_Full
(2)  223/    41F8 :                     
(2)  224/    41F8 :                     	; Stop ALL sequences
(2)  225/    41F8 : 6100 C13A           		bsr	gemaStopAll
(2)  226/    41FC :                     	rept 4
(2)  227/    41FC :                     		bsr	System_Render		; Wait 4 frames...
(2)  228/    41FC :                     	endm
(2)  227/    41FC : 6100 D276           		bsr	System_Render		; Wait 4 frames...
(2)  227/    4200 : 6100 D272           		bsr	System_Render		; Wait 4 frames...
(2)  227/    4204 : 6100 D26E           		bsr	System_Render		; Wait 4 frames...
(2)  227/    4208 : 6100 D26A           		bsr	System_Render		; Wait 4 frames...
(2)  229/    420C : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  230/    4212 : 4E75                		rts				; <-- RTS
(2)  231/    4214 :                     
(2)  232/    4214 :                     ; ------------------------------------------------------
(2)  233/    4214 :                     ; Show framecounter and input
(2)  234/    4214 :                     ; ------------------------------------------------------
(2)  235/    4214 :                     
(2)  236/    4214 :                     .show_counter:
(2)  245/    4214 : 41FA 0262           		lea	str_NewCountr0(pc),a0
(2)  246/    4218 : 7017                		moveq	#23,d0
(2)  247/    421A : 7201                		moveq	#1,d1
(2)  248/    421C : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  249/    4220 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  250/    4224 : 6000 CDFC           		bra	Video_Print
(2)  251/    4228 :                     
(2)  252/    4228 :                     .make_stamp:
(2)  253/    4228 :                     ;  rts
(2)  268/    4228 : 4E75                		rts
(2)  269/    422A :                     
(2)  270/    422A :                     ; ====================================================================
(2)  271/    422A :                     ; ------------------------------------------------------
(2)  272/    422A :                     ; DATA asset locations
(2)  273/    422A :                     ; ------------------------------------------------------
(2)  274/    422A :                     
(2)  275/    422A :                     file_scrn1_main:
(2)  276/    422A : 0000 6572           		dc.l DATA_BANK0
(2)  277/    422E : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             4234 : 494E 2E42 494E 00 
(2)  278/    423B :                     		align 2
(2)  279/    423C :                     file_scrn2_stamps:
(2)  280/    423C : FFFF FFFF           		dc.l -1
(2)  281/    4240 : 5354 414D 5053      		dc.b "STAMPS_0.BIN",0
             4246 : 5F30 2E42 494E 00 
(2)  282/    424D :                     		align 2
(2)  283/    424E :                     
(2)  284/    424E :                     ; ====================================================================
(2)  285/    424E :                     ; ------------------------------------------------------
(2)  286/    424E :                     ; Objects
(2)  287/    424E :                     ; ------------------------------------------------------
(2)  288/    424E :                     
(2)  289/    424E :                     ; --------------------------------------------------
(2)  290/    424E :                     ; Test object
(2)  291/    424E :                     ; --------------------------------------------------
(2)  292/    424E :                     
(2)  293/    424E :                     obj_Player:
(2)  294/    424E : 7000                		moveq	#0,d0
(2)  295/    4250 : 102E 001C           		move.b	obj_index(a6),d0
(2)  296/    4254 : D040                		add.w	d0,d0
(2)  297/    4256 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  298/    425A : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  299/    425E :                     ; ----------------------------------------------
(2)  300/    425E : 0004                .list:		dc.w .init-.list
(2)  301/    4260 : 002A                		dc.w .main-.list
(2)  302/    4262 :                     ; ----------------------------------------------
(2)  303/    4262 :                     .init:
(2)  304/    4262 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  305/    4266 : 6100 D6C4           		bsr	object_ResetAnim	; Init/Reset animation
(2)  306/    426A : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  307/    4270 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  308/    4276 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  309/    427C : 3D7C 0080 0004      		move.w	#256/2,obj_x(a6)	; Set Object's X/Y position
(2)  310/    4282 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  311/    4288 :                     
(2)  312/    4288 :                     ; ----------------------------------------------
(2)  313/    4288 :                     .main:
(2)  314/    4288 : 41F8 D8F8           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  315/    428C : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  316/    4290 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  317/    4292 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  318/    4294 : 7400                		moveq	#0,d2
(2)  319/    4296 : 7600                		moveq	#0,d3
(2)  320/    4298 : 0807 0003           		btst	#bitJoyRight,d7
(2)  321/    429C : 6706                		beq.s	.not_right
(2)  322/    429E : 7001                		moveq	#1,d0			; X right
(2)  323/    42A0 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  324/    42A0 : 7402                		moveq	#2,d2
(2)  325/    42A2 : 5243                		addq.w	#1,d3
(2)  326/    42A4 :                     .not_right:
(2)  327/    42A4 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  328/    42A8 : 6706                		beq.s	.not_left
(2)  329/    42AA : 70FF                		moveq	#-1,d0			; X left
(2)  330/    42AC :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  331/    42AC : 7403                		moveq	#3,d2
(2)  332/    42AE : 5243                		addq.w	#1,d3
(2)  333/    42B0 :                     .not_left:
(2)  334/    42B0 : 0807 0001           		btst	#bitJoyDown,d7
(2)  335/    42B4 : 6706                		beq.s	.not_down
(2)  336/    42B6 : 7201                		moveq	#1,d1			; Y down
(2)  337/    42B8 : 7400                		moveq	#0,d2
(2)  338/    42BA : 5243                		addq.w	#1,d3
(2)  339/    42BC :                     .not_down:
(2)  340/    42BC : 0807 0000           		btst	#bitJoyUp,d7
(2)  341/    42C0 : 6706                		beq.s	.not_up
(2)  342/    42C2 : 72FF                		moveq	#-1,d1			; Y up
(2)  343/    42C4 : 7401                		moveq	#1,d2
(2)  344/    42C6 : 5243                		addq.w	#1,d3
(2)  345/    42C8 :                     .not_up:
(2)  346/    42C8 :                     ; 	if MARS|MARSCD
(2)  347/    42C8 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  348/    42C8 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  349/    42C8 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  350/    42C8 :                     ; 		add.w	d0,obj_x(a6)
(2)  351/    42C8 :                     ; 		add.w	d1,obj_z(a6)
(2)  352/    42C8 :                     ; 	else
(2)  353/    42C8 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  354/    42C8 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  355/    42C8 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  356/    42CC : D36E 0008           		add.w	d1,obj_y(a6)
(2)  357/    42D0 :                     ; 	endif
(2)  358/    42D0 :                     
(2)  359/    42D0 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  360/    42D4 :                     
(2)  361/    42D4 :                     ; ----------------------------------------------
(2)  362/    42D4 :                     ; Show the object...
(2)  363/    42D4 :                     
(2)  364/    42D4 : 4A43                		tst.w	d3
(2)  365/    42D6 : 6708                		beq.s	.no_anim
(2)  366/    42D8 : 41FA 0040           		lea	.anim_data(pc),a0	; Do animation
(2)  367/    42DC : 6100 D686           		bsr	object_Animate
(2)  368/    42E0 :                     .no_anim:
(2)  369/    42E0 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  370/    42E0 :                     ; 		bsr	object_Touch
(2)  371/    42E0 :                     ; 		tst.l	d0
(2)  372/    42E0 :                     ; 		beq.s	.lel
(2)  373/    42E0 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  374/    42E0 :                     ; .lel:
(2)  375/    42E0 :                     
(2)  376/    42E0 : 207C 0000 0000      		move.l	#0,a0
(2)  377/    42E6 : 43F8 44C0           		lea	(Map_Haruna),a1
(2)  378/    42EA : 45F8 4670           		lea	(Plc_Haruna),a2
(2)  379/    42EE : 47F9 0003 A87A      		lea	(Art_Haruna),a3
(2)  380/    42F4 : 7400                		moveq	#0,d2
(2)  381/    42F6 : 302E 0004           		move.w	obj_x(a6),d0
(2)  382/    42FA : 322E 0008           		move.w	obj_y(a6),d1
(2)  383/    42FE : D078 CC42           		add.w	(RAM_HorScroll+2).w,d0
(2)  384/    4302 : 9278 D002           		sub.w	(RAM_VerScroll+2).w,d1
(2)  385/    4306 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  386/    430A : E14A                		lsl.w	#8,d2
(2)  387/    430C : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  388/    430E : D47C 2302           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  389/    4312 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  390/    4316 : 6000 D05A           		bra	Video_MakeSprMap_DMA
(2)  391/    431A :                     
(2)  392/    431A :                     ; ----------------------------------------------
(2)  393/    431A :                     
(2)  394/    431A :                     .anim_data:
(2)  395/    431A : 0008                		dc.w .anim_down-.anim_data
(2)  396/    431C : 0014                		dc.w .anim_up-.anim_data
(2)  397/    431E : 0020                		dc.w .anim_right-.anim_data
(2)  398/    4320 : 002C                		dc.w .anim_left-.anim_data
(2)  399/    4322 :                     
(2)  400/    4322 :                     .anim_down:
(2)  401/    4322 : 0008                		dc.w 8
(2)  402/    4324 : 0000 0001 0000      		dc.w 0,1,0,2
             432A : 0002             
(2)  403/    432C : FFFE                		dc.w -2
(2)  404/    432E :                     		align 2
(2)  405/    432E :                     .anim_up:
(2)  406/    432E : 0008                		dc.w 8
(2)  407/    4330 : 0003 0004 0003      		dc.w 3,4,3,5
             4336 : 0005             
(2)  408/    4338 : FFFE                		dc.w -2
(2)  409/    433A :                     		align 2
(2)  410/    433A :                     .anim_right:
(2)  411/    433A : 0008                		dc.w 8
(2)  412/    433C : 0006 0007 0006      		dc.w 6,7,6,8
             4342 : 0008             
(2)  413/    4344 : FFFE                		dc.w -2
(2)  414/    4346 :                     		align 2
(2)  415/    4346 :                     .anim_left:
(2)  416/    4346 : 0008                		dc.w 8
(2)  417/    4348 : 0009 000A 0009      		dc.w 9,10,9,11
             434E : 000B             
(2)  418/    4350 : FFFE                		dc.w -2
(2)  419/    4352 :                     		align 2
(2)  420/    4352 :                     
(2)  421/    4352 :                     ; --------------------------------------------------
(2)  422/    4352 :                     ; Test object
(2)  423/    4352 :                     ; --------------------------------------------------
(2)  424/    4352 :                     
(2)  425/    4352 :                     obj_Ball:
(2)  426/    4352 : 7000                		moveq	#0,d0
(2)  427/    4354 : 102E 001C           		move.b	obj_index(a6),d0
(2)  428/    4358 : D040                		add.w	d0,d0
(2)  429/    435A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  430/    435E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  431/    4362 :                     ; ----------------------------------------------
(2)  432/    4362 : 0004                .list:		dc.w .init-.list
(2)  433/    4364 : 0072                		dc.w .main-.list
(2)  434/    4366 :                     ; ----------------------------------------------
(2)  435/    4366 :                     .init:
(2)  436/    4366 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  437/    436A : 6100 D5C0           		bsr	object_ResetAnim	; Init/Reset animation
(2)  438/    436E : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  439/    4374 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  440/    437A : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  441/    4380 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  442/    4386 :                     
(2)  443/    4386 : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  444/    438C : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  445/    4392 : 303C 0049           		move.w	#$48+1,d0
(2)  446/    4396 : 6100 D26E           		bsr	System_DiceRoll
(2)  447/    439A : E348                		lsl.w	#1,d0
(2)  448/    439C : D16E 0004           		add.w	d0,obj_x(a6)
(2)  449/    43A0 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  450/    43A4 : E748                		lsl.w	#3,d0
(2)  451/    43A6 : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  452/    43AA : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  453/    43AE :                     
(2)  454/    43AE : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  455/    43B4 : 6100 D1F6           		bsr	System_Random
(2)  456/    43B8 : 2E38 E97C           		move.l	(RAM_SysRandom).w,d7
(2)  457/    43BC : E24F                		lsr.w	#1,d7
(2)  458/    43BE : 640A                		bcc.s	.x_random
(2)  459/    43C0 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  460/    43C4 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  461/    43CA :                     .x_random:
(2)  462/    43CA : E24F                		lsr.w	#1,d7
(2)  463/    43CC : 6404                		bcc.s	.y_random
(2)  464/    43CE : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  465/    43D2 :                     .y_random:
(2)  466/    43D2 : 4E75                		rts
(2)  467/    43D4 :                     
(2)  468/    43D4 :                     ; ----------------------------------------------
(2)  469/    43D4 :                     .main:
(2)  470/    43D4 : 3438 D7F6           		move.w	(RAM_VdpRegSetC).w,d2
(2)  471/    43D8 : 0802 0002           		btst	#2,d2
(2)  472/    43DC : 660E                		bne.s	.y_fix
(2)  473/    43DE : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  474/    43E4 : 6D06                		blt.s	.y_fix
(2)  475/    43E6 : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  476/    43EC :                     .y_fix:
(2)  477/    43EC :                     
(2)  478/    43EC : 323C 00E0           		move.w	#224,d1
(2)  479/    43F0 : 3438 D7F6           		move.w	(RAM_VdpRegSetC).w,d2
(2)  480/    43F4 : 0802 0002           		btst	#2,d2
(2)  481/    43F8 : 6702                		beq.s	.y_double
(2)  482/    43FA : D241                		add.w	d1,d1
(2)  483/    43FC :                     .y_double:
(2)  484/    43FC : 303C 0100           		move.w	#256,d0
(2)  485/    4400 : 342E 0004           		move.w	obj_x(a6),d2
(2)  486/    4404 : 4A42                		tst.w	d2
(2)  487/    4406 : 6A0A                		bpl.s	.x_back
(2)  488/    4408 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  489/    440C : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  490/    4412 :                     .x_back:
(2)  491/    4412 : B440                		cmp.w	d0,d2
(2)  492/    4414 : 6D0A                		blt.s	.x_foward
(2)  493/    4416 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  494/    441A : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  495/    4420 :                     .x_foward:
(2)  496/    4420 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  497/    4424 :                     
(2)  498/    4424 : 342E 0008           		move.w	obj_y(a6),d2
(2)  499/    4428 : 4A42                		tst.w	d2
(2)  500/    442A : 6A04                		bpl.s	.y_back
(2)  501/    442C : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  502/    4430 :                     .y_back:
(2)  503/    4430 : B441                		cmp.w	d1,d2
(2)  504/    4432 : 6D04                		blt.s	.y_foward
(2)  505/    4434 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  506/    4438 :                     .y_foward:
(2)  507/    4438 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  508/    443C :                     
(2)  509/    443C : 6100 D4F6           		bsr	object_Speed
(2)  510/    4440 :                     
(2)  511/    4440 :                     ; ----------------------------------------------
(2)  512/    4440 :                     ; Show the object...
(2)  513/    4440 :                     
(2)  514/    4440 : 41FA 0028           		lea	.anim_data(pc),a0	; Do animation
(2)  515/    4444 : 6100 D51E           		bsr	object_Animate
(2)  516/    4448 : 43F8 4720           		lea	(Map_Sisi),a1
(2)  517/    444C : 7400                		moveq	#0,d2
(2)  518/    444E : 302E 0004           		move.w	obj_x(a6),d0
(2)  519/    4452 : 322E 0008           		move.w	obj_y(a6),d1
(2)  520/    4456 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  521/    445A : E14A                		lsl.w	#8,d2
(2)  522/    445C : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  523/    445E : D47C 4326           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  524/    4462 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  525/    4466 : 6000 CF22           		bra	Video_MakeSprMap
(2)  526/    446A :                     
(2)  527/    446A :                     ; ----------------------------------------------
(2)  528/    446A :                     
(2)  529/    446A :                     .anim_data:
(2)  530/    446A : 0002                		dc.w .maind-.anim_data
(2)  531/    446C :                     .maind:
(2)  532/    446C : 0008                		dc.w 8
(2)  533/    446E : 0000 0001 0002      		dc.w 0,1,2,1
             4474 : 0001             
(2)  534/    4476 : FFFE                		dc.w -2
(2)  535/    4478 :                     		align 2
(2)  536/    4478 :                     
(2)  537/    4478 :                     ; ====================================================================
(2)  538/    4478 :                     ; ------------------------------------------------------
(2)  539/    4478 :                     ; Subroutines
(2)  540/    4478 :                     ; ------------------------------------------------------
(2)  541/    4478 :                     
(2)  542/    4478 :                     ; ====================================================================
(2)  543/    4478 :                     ; ------------------------------------------------------
(2)  544/    4478 :                     ; Custom VBlank
(2)  545/    4478 :                     ; ------------------------------------------------------
(2)  546/    4478 :                     
(2)  547/    4478 :                     ; ------------------------------------------------------
(2)  548/    4478 :                     ; Custom HBlank
(2)  549/    4478 :                     ; ------------------------------------------------------
(2)  550/    4478 :                     
(2)  551/    4478 :                     ; ====================================================================
(2)  552/    4478 :                     ; ------------------------------------------------------
(2)  553/    4478 :                     ; Includes for this screen
(2)  554/    4478 :                     ; ------------------------------------------------------
(2)  555/    4478 :                     
(2)  556/    4478 :                     ; ====================================================================
(2)  557/    4478 :                     ; ------------------------------------------------------
(2)  558/    4478 :                     ; Small data section
(2)  559/    4478 :                     ; ------------------------------------------------------
(2)  560/    4478 :                     
(2)  574/    4478 :                     
(2)  575/    4478 :                     str_NewCountr0:
(2)  576/    4478 : 83FF D7D8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  577/    447C : 00                  		dc.b 0
(2)  578/    447D :                     		align 2
(2)  579/    447E :                     
(2)  580/    447E :                     str_MidemeEsta:
(2)  581/    447E : 306F 316F 326F      		dc.b "0o1o2o3o4o5o6o7o8o9oAoBoCoDoEoFo",$0A
             4484 : 336F 346F 356F 
             448A : 366F 376F 386F 
             4490 : 396F 416F 426F 
             4496 : 436F 446F 456F 
             449C : 466F 0A          
(2)  582/    449F : 00                  		dc.b 0
(2)  583/    44A0 :                     		align 2
(2)  584/    44A0 :                     
(2)  585/    44A0 :                     ; ----------------------------------------------------------------
(2)  586/    44A0 :                     ; Everything else...
(2)  587/    44A0 :                     ; ----------------------------------------------------------------
(2)  588/    44A0 :                     
(2)  589/    44A0 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  590/    44C0 :                     		align 2
(2)  591/    44C0 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  592/    4670 :                     		align 2
(2)  593/    4670 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  594/    4700 :                     		align 2
(2)  595/    4700 :                     
(2)  596/    4700 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)  597/    4720 :                     		align 2
(2)  598/    4720 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)  599/    4764 :                     		align 2
(2)  600/    4764 :                     
(2)  601/    4764 :                     Pal_StampTest:
(2)  602/    4764 :                     		binclude "game/data/mcd/stamps/test/pal.bin"
(2)  603/    4784 :                     		align 2
(2)  604/    4784 :                     
(2)  605/    4784 :                     ; ----------------------------------------------------------------
(2)  606/    4784 :                     
(2)  607/    4784 :                     MapStamp_Test:
(2)  608/    4784 :                     		binclude "game/data/mcd/stamps/test/map.bin"
(2)  609/    4904 :                     		align 2
(2)  610/    4904 :                     
(2)  611/    4904 :                     ; ====================================================================
(2)  612/    4904 :                     ; ------------------------------------------------------
(2)  613/    4904 :                     ; Sound bank
(2)  614/    4904 :                     ; ------------------------------------------------------
(2)  615/    4904 :                     
(2)  649/    4904 :                     
(2)  650/    4904 :                     ; ====================================================================
(2)  651/    4904 :                     ; ------------------------------------------------------
(2)  652/    4904 :                     ; Stamp cell temporal storage
(2)  653/    4904 :                     ; ------------------------------------------------------
(2)  654/    4904 :                     
(2)  655/    4904 :                     		align 2
(2)  656/    4904 :                     SC2_OutCells:
(2)  657/    4904 :                     		ds.b DEF_MaxStampCOut*$20	; <-- auto-label
(2)  658/    5504 :                     
(1)   17/    5504 :                     mcscrn_e:
(1)   17/    5504 :                     ; Md_Screen00_e:
(1)   17/    5504 : =$5504               MD_SCREEN02_E label *
(1)   17/    5504 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN02",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   18/    5504 : (MACRO)              	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/    5504 : =$5504               MD_SCREEN03 label *
(1)   18/    5504 :                     
(1)   18/    5504 :                     mctopscrn:
(1)   18/    5504 :                     mcscrn_s:
(1)   18/    5504 :                             include "game/code/screen_3.asm";"game/screenX/code.asm"
(2)    1/    5504 :                     ; ===========================================================================
(2)    2/    5504 :                     ; ----------------------------------------------------------------
(2)    3/    5504 :                     ; SCREEN CODE
(2)    4/    5504 :                     ; ----------------------------------------------------------------
(2)    5/    5504 :                     
(2)    6/    5504 :                     ; ====================================================================
(2)    7/    5504 :                     ; ------------------------------------------------------
(2)    8/    5504 :                     ; Variables
(2)    9/    5504 :                     ; ------------------------------------------------------
(2)   10/    5504 :                     
(2)   11/    5504 :                     ; ====================================================================
(2)   12/    5504 :                     ; ------------------------------------------------------
(2)   13/    5504 :                     ; Structs
(2)   14/    5504 :                     ; ------------------------------------------------------
(2)   15/    5504 :                     
(2)   16/    5504 :                     ; ----------------------------------------------
(2)   17/    5504 :                     ; VRAM Setup
(2)   18/    5504 :                     ; ----------------------------------------------
(2)   19/    5504 :                     
(2)   20/    5504 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/    5504 : =$5504               GLBL_LASTPC     := *
(2)   20/    5504 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Haruna		ds.b $24
(2)   22/      25 :                     vramLoc_Sisi		ds.b $10
(2)   23/      35 :  (MACRO-2)           			endmemory
(2)   23/    5538 :                     .here:          dephase
(2)   23/    5538 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/    5504 :                                     phase GLBL_LASTPC
(2)   24/    5504 :                     
(2)   25/    5504 :                     ; ====================================================================
(2)   26/    5504 :                     ; ------------------------------------------------------
(2)   27/    5504 :                     ; This screen's RAM
(2)   28/    5504 :                     ; ------------------------------------------------------
(2)   29/    5504 :                     
(2)   30/    5504 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/    5504 : =$5504               GLBL_LASTPC     := *
(2)   30/    5504 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_ThisSpeed		ds.w 1
(2)   32/FFFFFFFFFFFFB802 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   33/    550C :                     .here:          dephase
(2)   33/    550C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/    5504 :                                     phase GLBL_LASTPC
(2)   34/    5504 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/    5504 :                     
(2)   36/    5504 :                     ; ====================================================================
(2)   37/    5504 :                     ; ------------------------------------------------------
(2)   38/    5504 :                     ; Init
(2)   39/    5504 :                     ; ------------------------------------------------------
(2)   40/    5504 :                     
(2)   41/    5504 : 6100 B2B8           		bsr	Video_DisplayOff
(2)   42/    5508 : 6100 C072           		bsr	System_Default
(2)   43/    550C :                     	; ----------------------------------------------
(2)   44/    550C :                     	; 32X only:
(2)   78/    550C :                     	; ----------------------------------------------
(2)   79/    550C : 41FA 00FA           		lea	file_scrn3_main(pc),a0			; Load MAIN DATA bank
(2)   80/    5510 : 6100 C36C           		bsr	System_SetDataBank
(2)   81/    5514 : 6100 C058           		bsr	System_SramInit
(2)   82/    5518 : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   83/    551C : 6100 C056           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   84/    5520 :                     	; ----------------------------------------------
(2)   85/    5520 :                     	; Load PRINT
(2)   86/    5520 : 203C 0002 65DA      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   87/    5526 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   88/    552A : 6100 BAC4           		bsr	Video_PrintInit
(2)   89/    552E : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   90/    5534 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   91/    5538 : 6100 BAA6           		bsr	Video_PrintInitW
(2)   92/    553C : 6100 BAC6           		bsr	Video_PrintDefPal_Fade
(2)   93/    5540 :                     	; ----------------------------------------------
(2)   94/    5540 : 203C 0000 562C      		move.l	#obj_Player,d0
(2)   95/    5546 : 6100 C37A           		bsr	Object_Make				; Make MD object
(2)   96/    554A : 41F8 581E           		lea	(objPal_Haruna),a0
(2)   97/    554E : 7010                		moveq	#16,d0					; d0 - Start at color index 16
(2)   98/    5550 : 7210                		moveq	#16,d1					; d1 - Numof colors 16
(2)   99/    5552 : 6100 BA16           		bsr	Video_FadePal
(2)  100/    5556 :                     ; 		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  101/    5556 :                     ; 		moveq	#1,d0					; X/Y positions 1,1
(2)  102/    5556 :                     ; 		moveq	#1,d1
(2)  103/    5556 :                     ; 		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  104/    5556 :                     ; 		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  105/    5556 :                     ; 		bsr	Video_PrintW				; <-- Print BIG text
(2)  106/    5556 : 41F9 0003 DEDC      		lea	(Pal_Sisi+color_indx(1)),a0
(2)  107/    555C : 7001                		moveq	#1,d0
(2)  108/    555E : 720F                		moveq	#15,d1
(2)  109/    5560 : 6100 BA08           		bsr	Video_FadePal
(2)  110/    5564 : 203C 0003 D6FA      		move.l	#Art_Sisi,d0
(2)  111/    556A : 323C 04A0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)  112/    556E : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)  113/    5572 : 6100 B3D2           		bsr	Video_LoadArt
(2)  114/    5576 :                     	; ----------------------------------------------
(2)  115/    5576 : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  116/    557C : 6176                		bsr	.show_counter				; Draw counter
(2)  117/    557E : 6100 B232           		bsr	Video_DisplayOn
(2)  118/    5582 :                     	; ----------------------------------------------
(2)  119/    5582 : 6100 C30C           		bsr	Object_Run
(2)  120/    5586 : 6100 B97E           		bsr	Video_FadeIn_Full
(2)  121/    558A :                     
(2)  122/    558A :                     ; ====================================================================
(2)  123/    558A :                     ; ------------------------------------------------------
(2)  124/    558A :                     ; Loop
(2)  125/    558A :                     ; ------------------------------------------------------
(2)  126/    558A :                     
(2)  127/    558A :                     .loop:
(2)  128/    558A : 6100 C304           		bsr	Object_Run
(2)  129/    558E : 6100 AFCE           		bsr	Video_BuildSprites
(2)  130/    5592 : 6100 BEE0           		bsr	System_Render
(2)  131/    5596 :                     
(2)  132/    5596 : 615C                		bsr	.show_counter
(2)  133/    5598 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  134/    559C : 0247 0010           		andi.w	#JoyB,d7
(2)  135/    55A0 : 6714                		beq	.b_update
(2)  136/    55A2 : 0678 0001 B800      		add.w	#1,(RAM_ThisSpeed).w
(2)  137/    55A8 : 0C78 0010 B800      		cmp.w	#$10,(RAM_ThisSpeed).w
(2)  138/    55AE : 6606                		bne.s	.b_update
(2)  139/    55B0 : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  140/    55B6 :                     .b_update:
(2)  141/    55B6 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  142/    55BA : 0247 0020           		andi.w	#JoyC,d7
(2)  143/    55BE : 670A                		beq.s	.not_b
(2)  144/    55C0 : 203C 0000 5702      		move.l	#obj_Ball,d0
(2)  145/    55C6 : 6100 C2FA           		bsr	Object_Make
(2)  146/    55CA :                     .not_b:
(2)  147/    55CA :                     
(2)  148/    55CA :                     ; 	if MARS|MARSCD
(2)  149/    55CA :                     ; 		move.w	(Controller_1+on_press).w,d7
(2)  150/    55CA :                     ; 		andi.w	#JoyA,d7
(2)  151/    55CA :                     ; 		beq.s	.not_a
(2)  152/    55CA :                     ; 		moveq	#1,d0					; 32X 3D mode
(2)  153/    55CA :                     ; 		bsr	Video_MdMars_VideoMode
(2)  154/    55CA :                     ; .not_a:
(2)  155/    55CA :                     ; 	endif
(2)  156/    55CA :                     
(2)  157/    55CA :                     	; Check START button
(2)  158/    55CA : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  159/    55CE : 0247 0080           		andi.w	#JoyStart,d7
(2)  160/    55D2 : 67B6                		beq	.loop
(2)  161/    55D4 : 6100 B942           		bsr	Video_FadeOut_Full
(2)  162/    55D8 :                     	; Stop ALL sequences
(2)  163/    55D8 : 6100 AD5A           		bsr	gemaStopAll
(2)  164/    55DC :                     	rept 4
(2)  165/    55DC :                     		bsr	System_Render		; Wait 4 frames...
(2)  166/    55DC :                     	endm
(2)  165/    55DC : 6100 BE96           		bsr	System_Render		; Wait 4 frames...
(2)  165/    55E0 : 6100 BE92           		bsr	System_Render		; Wait 4 frames...
(2)  165/    55E4 : 6100 BE8E           		bsr	System_Render		; Wait 4 frames...
(2)  165/    55E8 : 6100 BE8A           		bsr	System_Render		; Wait 4 frames...
(2)  167/    55EC : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  168/    55F2 : 4E75                		rts				; <-- RTS
(2)  169/    55F4 :                     
(2)  170/    55F4 :                     ; ------------------------------------------------------
(2)  171/    55F4 :                     ; Show framecounter and input
(2)  172/    55F4 :                     ; ------------------------------------------------------
(2)  173/    55F4 :                     
(2)  174/    55F4 :                     .show_counter:
(2)  175/    55F4 : 41FA 0210           		lea	str_NewCountr0(pc),a0
(2)  176/    55F8 : 7001                		moveq	#1,d0
(2)  177/    55FA : 7218                		moveq	#24,d1
(2)  178/    55FC : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  179/    5600 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  180/    5604 : 6000 BA1C           		bra	Video_Print
(2)  181/    5608 :                     
(2)  182/    5608 :                     ; ====================================================================
(2)  183/    5608 :                     ; ------------------------------------------------------
(2)  184/    5608 :                     ; DATA asset locations
(2)  185/    5608 :                     ; ------------------------------------------------------
(2)  186/    5608 :                     
(2)  187/    5608 :                     file_scrn3_main:
(2)  188/    5608 : 0000 6572           		dc.l DATA_BANK0
(2)  189/    560C : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             5612 : 494E 2E42 494E 00 
(2)  190/    5619 :                     		align 2
(2)  191/    561A :                     file_scrn3_mars:
(2)  192/    561A : 0003 F9BE           		dc.l DATA_BANK1
(2)  193/    561E : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
             5624 : 5253 2E42 494E 00 
(2)  194/    562B :                     		align 2
(2)  195/    562C :                     
(2)  196/    562C :                     ; ====================================================================
(2)  197/    562C :                     ; ------------------------------------------------------
(2)  198/    562C :                     ; Objects
(2)  199/    562C :                     ; ------------------------------------------------------
(2)  200/    562C :                     
(2)  201/    562C :                     ; --------------------------------------------------
(2)  202/    562C :                     ; Test object
(2)  203/    562C :                     ; --------------------------------------------------
(2)  204/    562C :                     
(2)  205/    562C :                     obj_Player:
(2)  206/    562C : 7000                		moveq	#0,d0
(2)  207/    562E : 102E 001C           		move.b	obj_index(a6),d0
(2)  208/    5632 : D040                		add.w	d0,d0
(2)  209/    5634 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  210/    5638 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  211/    563C :                     ; ----------------------------------------------
(2)  212/    563C : 0004                .list:		dc.w .init-.list
(2)  213/    563E : 0030                		dc.w .main-.list
(2)  214/    5640 :                     ; ----------------------------------------------
(2)  215/    5640 :                     .init:
(2)  216/    5640 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  217/    5644 : 6100 C2E6           		bsr	object_ResetAnim	; Init/Reset animation
(2)  218/    5648 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  219/    564E : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  220/    5654 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  221/    565A :                     
(2)  222/    565A : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  223/    5660 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  224/    5666 : 08EE 0000 001F      		bset	#0,obj_attr(a6)		; Set X flip
(2)  225/    566C :                     
(2)  226/    566C :                     ; ----------------------------------------------
(2)  227/    566C :                     .main:
(2)  228/    566C : 41F8 D8F8           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  229/    5670 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  230/    5674 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  231/    5676 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  232/    5678 : 7400                		moveq	#0,d2
(2)  233/    567A : 7600                		moveq	#0,d3
(2)  234/    567C :                     
(2)  235/    567C :                     
(2)  236/    567C : 0807 0003           		btst	#bitJoyRight,d7
(2)  237/    5680 : 6708                		beq.s	.not_right
(2)  238/    5682 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  239/    5686 :                     
(2)  240/    5686 : 7402                		moveq	#2,d2
(2)  241/    5688 : 5243                		addq.w	#1,d3
(2)  242/    568A :                     .not_right:
(2)  243/    568A : 0807 0002           		btst	#bitJoyLeft,d7
(2)  244/    568E : 670A                		beq.s	.not_left
(2)  245/    5690 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  246/    5694 : 4440                		neg.w	d0
(2)  247/    5696 :                     ; 		moveq	#-1,d0			; X left
(2)  248/    5696 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  249/    5696 : 7403                		moveq	#3,d2
(2)  250/    5698 : 5243                		addq.w	#1,d3
(2)  251/    569A :                     .not_left:
(2)  252/    569A : 0807 0001           		btst	#bitJoyDown,d7
(2)  253/    569E : 6708                		beq.s	.not_down
(2)  254/    56A0 : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  255/    56A4 : 7400                		moveq	#0,d2
(2)  256/    56A6 : 5243                		addq.w	#1,d3
(2)  257/    56A8 :                     .not_down:
(2)  258/    56A8 : 0807 0000           		btst	#bitJoyUp,d7
(2)  259/    56AC : 670A                		beq.s	.not_up
(2)  260/    56AE : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  261/    56B2 : 4441                		neg.w	d1
(2)  262/    56B4 :                     ; 		moveq	#-1,d1			; Y up
(2)  263/    56B4 : 7401                		moveq	#1,d2
(2)  264/    56B6 : 5243                		addq.w	#1,d3
(2)  265/    56B8 :                     .not_up:
(2)  281/    56B8 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  282/    56BC :                     
(2)  283/    56BC :                     ; ----------------------------------------------
(2)  284/    56BC :                     ; Show the object...
(2)  285/    56BC :                     
(2)  286/    56BC : 4A43                		tst.w	d3
(2)  287/    56BE : 6708                		beq.s	.no_anim
(2)  288/    56C0 : 41FA 0008           		lea	.anim_data(pc),a0	; Do animation
(2)  289/    56C4 : 6100 C29E           		bsr	object_Animate
(2)  290/    56C8 :                     .no_anim:
(2)  304/    56C8 : 4E75                		rts
(2)  306/    56CA :                     
(2)  307/    56CA :                     ; ----------------------------------------------
(2)  308/    56CA :                     
(2)  309/    56CA :                     .anim_data:
(2)  310/    56CA : 0008                		dc.w .anim_down-.anim_data
(2)  311/    56CC : 0014                		dc.w .anim_up-.anim_data
(2)  312/    56CE : 0020                		dc.w .anim_right-.anim_data
(2)  313/    56D0 : 002C                		dc.w .anim_left-.anim_data
(2)  314/    56D2 :                     
(2)  315/    56D2 :                     .anim_down:
(2)  316/    56D2 : 0008                		dc.w 8
(2)  317/    56D4 : 0000 0001 0000      		dc.w 0,1,0,2
             56DA : 0002             
(2)  318/    56DC : FFFE                		dc.w -2
(2)  319/    56DE :                     		align 2
(2)  320/    56DE :                     .anim_up:
(2)  321/    56DE : 0008                		dc.w 8
(2)  322/    56E0 : 0003 0004 0003      		dc.w 3,4,3,5
             56E6 : 0005             
(2)  323/    56E8 : FFFE                		dc.w -2
(2)  324/    56EA :                     		align 2
(2)  325/    56EA :                     .anim_right:
(2)  326/    56EA : 0008                		dc.w 8
(2)  327/    56EC : 0006 0007 0006      		dc.w 6,7,6,8
             56F2 : 0008             
(2)  328/    56F4 : FFFE                		dc.w -2
(2)  329/    56F6 :                     		align 2
(2)  330/    56F6 :                     .anim_left:
(2)  331/    56F6 : 0008                		dc.w 8
(2)  332/    56F8 : 0009 000A 0009      		dc.w 9,10,9,11
             56FE : 000B             
(2)  333/    5700 : FFFE                		dc.w -2
(2)  334/    5702 :                     		align 2
(2)  335/    5702 :                     
(2)  336/    5702 :                     ; --------------------------------------------------
(2)  337/    5702 :                     ; Test object
(2)  338/    5702 :                     ; --------------------------------------------------
(2)  339/    5702 :                     
(2)  340/    5702 :                     obj_Ball:
(2)  341/    5702 : 7000                		moveq	#0,d0
(2)  342/    5704 : 102E 001C           		move.b	obj_index(a6),d0
(2)  343/    5708 : D040                		add.w	d0,d0
(2)  344/    570A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  345/    570E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  346/    5712 :                     ; ----------------------------------------------
(2)  347/    5712 : 0004                .list:		dc.w .init-.list
(2)  348/    5714 : 0072                		dc.w .main-.list
(2)  349/    5716 :                     ; ----------------------------------------------
(2)  350/    5716 :                     .init:
(2)  351/    5716 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  352/    571A : 6100 C210           		bsr	object_ResetAnim	; Init/Reset animation
(2)  353/    571E : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  354/    5724 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  355/    572A : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  356/    5730 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  357/    5736 :                     
(2)  358/    5736 : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  359/    573C : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  360/    5742 : 303C 0049           		move.w	#$48+1,d0
(2)  361/    5746 : 6100 BEBE           		bsr	System_DiceRoll
(2)  362/    574A : E348                		lsl.w	#1,d0
(2)  363/    574C : D16E 0004           		add.w	d0,obj_x(a6)
(2)  364/    5750 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  365/    5754 : E748                		lsl.w	#3,d0
(2)  366/    5756 : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  367/    575A : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  368/    575E :                     
(2)  369/    575E : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  370/    5764 : 6100 BE46           		bsr	System_Random
(2)  371/    5768 : 2E38 E97C           		move.l	(RAM_SysRandom).w,d7
(2)  372/    576C : E24F                		lsr.w	#1,d7
(2)  373/    576E : 640A                		bcc.s	.x_random
(2)  374/    5770 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  375/    5774 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  376/    577A :                     .x_random:
(2)  377/    577A : E24F                		lsr.w	#1,d7
(2)  378/    577C : 6404                		bcc.s	.y_random
(2)  379/    577E : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  380/    5782 :                     .y_random:
(2)  381/    5782 : 4E75                		rts
(2)  382/    5784 :                     
(2)  383/    5784 :                     ; ----------------------------------------------
(2)  384/    5784 :                     .main:
(2)  385/    5784 : 323C 00E0           		move.w	#224,d1
(2)  386/    5788 : 303C 0140           		move.w	#320,d0
(2)  387/    578C : 342E 0004           		move.w	obj_x(a6),d2
(2)  388/    5790 : 4A42                		tst.w	d2
(2)  389/    5792 : 6A0A                		bpl.s	.x_back
(2)  390/    5794 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  391/    5798 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  392/    579E :                     .x_back:
(2)  393/    579E : B440                		cmp.w	d0,d2
(2)  394/    57A0 : 6D0A                		blt.s	.x_foward
(2)  395/    57A2 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  396/    57A6 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  397/    57AC :                     .x_foward:
(2)  398/    57AC : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  399/    57B0 :                     
(2)  400/    57B0 : 342E 0008           		move.w	obj_y(a6),d2
(2)  401/    57B4 : 4A42                		tst.w	d2
(2)  402/    57B6 : 6A04                		bpl.s	.y_back
(2)  403/    57B8 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  404/    57BC :                     .y_back:
(2)  405/    57BC : B441                		cmp.w	d1,d2
(2)  406/    57BE : 6D04                		blt.s	.y_foward
(2)  407/    57C0 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  408/    57C4 :                     .y_foward:
(2)  409/    57C4 : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  410/    57C8 :                     
(2)  411/    57C8 : 6100 C16A           		bsr	object_Speed
(2)  412/    57CC :                     
(2)  413/    57CC :                     ; ----------------------------------------------
(2)  414/    57CC :                     ; Show the object...
(2)  415/    57CC : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  416/    57D0 : 6100 C192           		bsr	object_Animate
(2)  417/    57D4 :                     
(2)  431/    57D4 : 43F9 0003 DEFA      		lea	(Map_Sisi),a1
(2)  432/    57DA : 7400                		moveq	#0,d2
(2)  433/    57DC : 302E 0004           		move.w	obj_x(a6),d0
(2)  434/    57E0 : 322E 0008           		move.w	obj_y(a6),d1
(2)  435/    57E4 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  436/    57E8 : E14A                		lsl.w	#8,d2
(2)  437/    57EA : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  438/    57EC : D47C 0025           		add.w	#vramLoc_Sisi,d2
(2)  439/    57F0 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  440/    57F4 : 6000 BB94           		bra	Video_MakeSprMap
(2)  442/    57F8 :                     
(2)  443/    57F8 :                     ; ----------------------------------------------
(2)  444/    57F8 :                     
(2)  445/    57F8 :                     .anim_data:
(2)  446/    57F8 : 0002                		dc.w .maind-.anim_data
(2)  447/    57FA :                     .maind:
(2)  448/    57FA : 0008                		dc.w 8
(2)  449/    57FC : 0000 0001 0002      		dc.w 0,1,2,1
             5802 : 0001             
(2)  450/    5804 : FFFE                		dc.w -2
(2)  451/    5806 :                     		align 2
(2)  452/    5806 :                     
(2)  453/    5806 :                     ; ====================================================================
(2)  454/    5806 :                     ; ------------------------------------------------------
(2)  455/    5806 :                     ; Subroutines
(2)  456/    5806 :                     ; ------------------------------------------------------
(2)  457/    5806 :                     
(2)  458/    5806 :                     ; ====================================================================
(2)  459/    5806 :                     ; ------------------------------------------------------
(2)  460/    5806 :                     ; Includes for this screen
(2)  461/    5806 :                     ; ------------------------------------------------------
(2)  462/    5806 :                     
(2)  463/    5806 :                     ; ====================================================================
(2)  464/    5806 :                     ; ------------------------------------------------------
(2)  465/    5806 :                     ; Custom VBlank
(2)  466/    5806 :                     ; ------------------------------------------------------
(2)  467/    5806 :                     
(2)  468/    5806 :                     ; ------------------------------------------------------
(2)  469/    5806 :                     ; Custom HBlank
(2)  470/    5806 :                     ; ------------------------------------------------------
(2)  471/    5806 :                     
(2)  472/    5806 :                     ; ====================================================================
(2)  473/    5806 :                     ; ------------------------------------------------------
(2)  474/    5806 :                     ; Small data section
(2)  475/    5806 :                     ; ------------------------------------------------------
(2)  476/    5806 :                     
(2)  477/    5806 :                     ; str_NikonaTest:
(2)  478/    5806 :                     ; 		dc.b "32X 2D test"
(2)  479/    5806 :                     ; 		dc.b 0
(2)  480/    5806 :                     ; 		align 2
(2)  481/    5806 :                     str_NewCountr0:
(2)  488/    5806 : 81FF B800           		dc.l pstr_mem(1,RAM_ThisSpeed)
(2)  489/    580A : 20                  		dc.b " "
(2)  490/    580B : 83FF D7D8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  491/    580F : 00                  		dc.b 0
(2)  492/    5810 :                     		align 2
(2)  493/    5810 :                     
(2)  494/    5810 :                     str_InputMe:
(2)  502/    5810 : 20                  		dc.b " "
(2)  504/    5811 : 00                  		dc.b 0
(2)  505/    5812 :                     		align 2
(2)  506/    5812 :                     
(2)  507/    5812 :                     Pal_TestStamp:
(2)  508/    5812 : 0000                		dc.w 0
(2)  509/    5814 :                     ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  510/    5814 :                     		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  511/    581E :                     		align 2
(2)  512/    581E :                     
(2)  513/    581E :                     ; Object data:
(2)  514/    581E :                     objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  515/    583E :                     		align 2
(2)  516/    583E :                     objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  517/    59EE :                     		align 2
(2)  518/    59EE :                     objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  519/    5A7E :                     		align 2
(2)  520/    5A7E :                     
(2)  521/    5A7E :                     ; ====================================================================
(2)  522/    5A7E :                     
(1)   18/    5A7E :                     mcscrn_e:
(1)   18/    5A7E :                     ; Md_Screen00_e:
(1)   18/    5A7E : =$5A7E               MD_SCREEN03_E label *
(1)   18/    5A7E :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN03",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   19/    5A7E : (MACRO)              	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/    5A7E : =$5A7E               MD_SCREEN04 label *
(1)   19/    5A7E :                     
(1)   19/    5A7E :                     mctopscrn:
(1)   19/    5A7E :                     mcscrn_s:
(1)   19/    5A7E :                             include "game/code/screen_4.asm";"game/screenX/code.asm"
(2)    1/    5A7E :                     ; ===========================================================================
(2)    2/    5A7E :                     ; ----------------------------------------------------------------
(2)    3/    5A7E :                     ; SCREEN CODE
(2)    4/    5A7E :                     ; ----------------------------------------------------------------
(2)    5/    5A7E :                     
(2)    6/    5A7E :                     ; ====================================================================
(2)    7/    5A7E :                     ; ------------------------------------------------------
(2)    8/    5A7E :                     ; Variables
(2)    9/    5A7E :                     ; ------------------------------------------------------
(2)   10/    5A7E :                     
(2)   11/    5A7E :                     ; ====================================================================
(2)   12/    5A7E :                     ; ------------------------------------------------------
(2)   13/    5A7E :                     ; Structs
(2)   14/    5A7E :                     ; ------------------------------------------------------
(2)   15/    5A7E :                     
(2)   16/    5A7E :                     ; ----------------------------------------------
(2)   17/    5A7E :                     ; VRAM Setup
(2)   18/    5A7E :                     ; ----------------------------------------------
(2)   19/    5A7E :                     
(2)   20/    5A7E :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/    5A7E : =$5A7E               GLBL_LASTPC     := *
(2)   20/    5A7E :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Backgrnd	ds.b $32A
(2)   22/     32B :                     vramLoc_Haruna		ds.b $12A
(2)   23/     455 :                     vramLoc_Haruna2		ds.b $12A
(2)   24/     57F :  (MACRO-2)           			endmemory
(2)   24/    5FFC :                     .here:          dephase
(2)   24/    5FFC :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/    5A7E :                                     phase GLBL_LASTPC
(2)   25/    5A7E :                     
(2)   26/    5A7E :                     ; ====================================================================
(2)   27/    5A7E :                     ; ------------------------------------------------------
(2)   28/    5A7E :                     ; This screen's RAM
(2)   29/    5A7E :                     ; ------------------------------------------------------
(2)   30/    5A7E :                     
(2)   31/    5A7E :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/    5A7E : =$5A7E               GLBL_LASTPC     := *
(2)   31/    5A7E :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestTouch		ds.l 1
(2)   33/FFFFFFFFFFFFB804 :                     RAM_Camera_Xpos		ds.l 1
(2)   34/FFFFFFFFFFFFB808 :                     RAM_Camera_Zpos		ds.l 1
(2)   35/FFFFFFFFFFFFB80C :                     RAM_Camera_Rot		ds.w 1
(2)   36/FFFFFFFFFFFFB80E :                     RAM_Camera_TRot		ds.w 1
(2)   37/FFFFFFFFFFFFB810 :                     RAM_Camera_TRotD	ds.w 1
(2)   38/FFFFFFFFFFFFB812 :                     RAM_ModelPick		ds.w 1
(2)   39/FFFFFFFFFFFFB814 :                     .sizeof_this		ds.l 0
(2)   40/FFFFFFFFFFFFB818 :  (MACRO-2)           			endmemory
(2)   40/    5A96 :                     .here:          dephase
(2)   40/    5A96 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   40/    5A7E :                                     phase GLBL_LASTPC
(2)   41/    5A7E :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   42/    5A7E :                     
(2)   43/    5A7E :                     ; ====================================================================
(2)   44/    5A7E :                     ; ------------------------------------------------------
(2)   45/    5A7E :                     ; Init
(2)   46/    5A7E :                     ; ------------------------------------------------------
(2)   47/    5A7E :                     
(2)   48/    5A7E : 6100 AD3E           		bsr	Video_DisplayOff
(2)   49/    5A82 : 6100 BAF8           		bsr	System_Default
(2)   50/    5A86 :                     	; ----------------------------------------------
(2)   51/    5A86 :                     	; 32X only:
(2)   80/    5A86 :                     	; ----------------------------------------------
(2)   81/    5A86 : 41FA 0098           		lea	file_scrn4_main(pc),a0			; Load MAIN DATA bank
(2)   82/    5A8A : 6100 BDF2           		bsr	System_SetDataBank
(2)   83/    5A8E : 6100 BADE           		bsr	System_SramInit
(2)   84/    5A92 : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   85/    5A96 : 6100 BADC           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   86/    5A9A :                     	; ----------------------------------------------
(2)   87/    5A9A :                     	; Load PRINT
(2)   88/    5A9A : 203C 0002 65DA      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   89/    5AA0 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   90/    5AA4 : 6100 B54A           		bsr	Video_PrintInit
(2)   91/    5AA8 : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   92/    5AAE : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   93/    5AB2 : 6100 B52C           		bsr	Video_PrintInitW
(2)   94/    5AB6 : 6100 B54C           		bsr	Video_PrintDefPal_Fade
(2)   95/    5ABA :                     	; ----------------------------------------------
(2)   96/    5ABA : 203C 0000 5B44      		move.l	#obj_Player,d0
(2)   97/    5AC0 : 6100 BE00           		bsr	Object_Make				; Make MD object
(2)   98/    5AC4 :                     	; ----------------------------------------------
(2)   99/    5AC4 : 6144                		bsr	.show_counter				; Draw counter
(2)  100/    5AC6 : 6100 ACEA           		bsr	Video_DisplayOn
(2)  101/    5ACA :                     	; ----------------------------------------------
(2)  102/    5ACA : 6100 BDC4           		bsr	Object_Run
(2)  103/    5ACE : 6100 B436           		bsr	Video_FadeIn_Full
(2)  104/    5AD2 :                     
(2)  105/    5AD2 :                     ; ====================================================================
(2)  106/    5AD2 :                     ; ------------------------------------------------------
(2)  107/    5AD2 :                     ; Loop
(2)  108/    5AD2 :                     ; ------------------------------------------------------
(2)  109/    5AD2 :                     
(2)  110/    5AD2 :                     .loop:
(2)  111/    5AD2 : 6100 BDBC           		bsr	Object_Run
(2)  112/    5AD6 : 6100 AA86           		bsr	Video_BuildSprites
(2)  113/    5ADA : 6100 B998           		bsr	System_Render
(2)  114/    5ADE :                     
(2)  115/    5ADE : 612A                		bsr	.show_counter
(2)  136/    5AE0 :                     
(2)  137/    5AE0 :                     	; Check START button
(2)  138/    5AE0 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(2)  139/    5AE4 : 0247 0080           		andi.w	#JoyStart,d7
(2)  140/    5AE8 : 67E8                		beq	.loop
(2)  141/    5AEA : 6100 B42C           		bsr	Video_FadeOut_Full
(2)  142/    5AEE :                     
(2)  143/    5AEE :                     	; Stop ALL sequences
(2)  144/    5AEE : 6100 A844           		bsr	gemaStopAll
(2)  145/    5AF2 :                     	rept 4
(2)  146/    5AF2 :                     		bsr	System_Render		; Wait 4 frames...
(2)  147/    5AF2 :                     	endm
(2)  146/    5AF2 : 6100 B980           		bsr	System_Render		; Wait 4 frames...
(2)  146/    5AF6 : 6100 B97C           		bsr	System_Render		; Wait 4 frames...
(2)  146/    5AFA : 6100 B978           		bsr	System_Render		; Wait 4 frames...
(2)  146/    5AFE : 6100 B974           		bsr	System_Render		; Wait 4 frames...
(2)  148/    5B02 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  149/    5B08 : 4E75                		rts				; <-- RTS
(2)  150/    5B0A :                     
(2)  151/    5B0A :                     ; ------------------------------------------------------
(2)  152/    5B0A :                     ; Show framecounter and input
(2)  153/    5B0A :                     ; ------------------------------------------------------
(2)  154/    5B0A :                     
(2)  155/    5B0A :                     .show_counter:
(2)  156/    5B0A :                     ; 		lea	str_InputMe(pc),a0
(2)  157/    5B0A :                     ; 		moveq	#1,d0
(2)  158/    5B0A :                     ; 		moveq	#4,d1
(2)  159/    5B0A :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  160/    5B0A :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  161/    5B0A :                     ; 		bsr	Video_Print
(2)  162/    5B0A :                     
(2)  163/    5B0A : 41FA 01AE           		lea	str_NewCountr0(pc),a0
(2)  164/    5B0E : 7001                		moveq	#1,d0
(2)  165/    5B10 : 7201                		moveq	#1,d1
(2)  166/    5B12 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  167/    5B16 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  168/    5B1A : 6000 B506           		bra	Video_Print
(2)  169/    5B1E :                     
(2)  170/    5B1E :                     ; ------------------------------------------------------
(2)  171/    5B1E :                     
(2)  172/    5B1E :                     .pick_model:
(2)  184/    5B1E : 4E75                		rts
(2)  186/    5B20 :                     
(2)  187/    5B20 :                     ; ====================================================================
(2)  188/    5B20 :                     ; ------------------------------------------------------
(2)  189/    5B20 :                     ; DATA asset locations
(2)  190/    5B20 :                     ; ------------------------------------------------------
(2)  191/    5B20 :                     
(2)  192/    5B20 :                     file_scrn4_main:
(2)  193/    5B20 : 0000 6572           		dc.l DATA_BANK0
(2)  194/    5B24 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             5B2A : 494E 2E42 494E 00 
(2)  195/    5B31 :                     		align 2
(2)  196/    5B32 :                     file_scrn4_mars:
(2)  197/    5B32 : 0003 F9BE           		dc.l DATA_BANK1
(2)  198/    5B36 : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
             5B3C : 5253 2E42 494E 00 
(2)  199/    5B43 :                     		align 2
(2)  200/    5B44 :                     
(2)  201/    5B44 :                     ; ====================================================================
(2)  202/    5B44 :                     ; ------------------------------------------------------
(2)  203/    5B44 :                     ; Objects
(2)  204/    5B44 :                     ; ------------------------------------------------------
(2)  205/    5B44 :                     
(2)  206/    5B44 :                     ; --------------------------------------------------
(2)  207/    5B44 :                     ; Test object
(2)  208/    5B44 :                     ; --------------------------------------------------
(2)  209/    5B44 :                     
(2)  210/    5B44 :                     obj_Player:
(2)  211/    5B44 : 7000                		moveq	#0,d0
(2)  212/    5B46 : 102E 001C           		move.b	obj_index(a6),d0
(2)  213/    5B4A : D040                		add.w	d0,d0
(2)  214/    5B4C : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  215/    5B50 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  216/    5B54 :                     ; ----------------------------------------------
(2)  217/    5B54 : 0004                .list:		dc.w .init-.list
(2)  218/    5B56 : 002A                		dc.w .main-.list
(2)  219/    5B58 :                     ; ----------------------------------------------
(2)  220/    5B58 :                     .init:
(2)  221/    5B58 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  222/    5B5C : 6100 BDCE           		bsr	object_ResetAnim	; Init/Reset animation
(2)  223/    5B60 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  224/    5B66 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  225/    5B6C : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  226/    5B72 :                     
(2)  232/    5B72 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  233/    5B78 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  235/    5B7E :                     
(2)  236/    5B7E :                     ; ----------------------------------------------
(2)  237/    5B7E :                     .main:
(2)  238/    5B7E : 41F8 D8F8           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  239/    5B82 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  240/    5B86 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  241/    5B88 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  242/    5B8A : 7400                		moveq	#0,d2
(2)  243/    5B8C : 7600                		moveq	#0,d3
(2)  244/    5B8E : 0807 0003           		btst	#bitJoyRight,d7
(2)  245/    5B92 : 6706                		beq.s	.not_right
(2)  246/    5B94 : 7001                		moveq	#1,d0			; X right
(2)  247/    5B96 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  248/    5B96 : 7402                		moveq	#2,d2
(2)  249/    5B98 : 5243                		addq.w	#1,d3
(2)  250/    5B9A :                     .not_right:
(2)  251/    5B9A : 0807 0002           		btst	#bitJoyLeft,d7
(2)  252/    5B9E : 6706                		beq.s	.not_left
(2)  253/    5BA0 : 70FF                		moveq	#-1,d0			; X left
(2)  254/    5BA2 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  255/    5BA2 : 7403                		moveq	#3,d2
(2)  256/    5BA4 : 5243                		addq.w	#1,d3
(2)  257/    5BA6 :                     .not_left:
(2)  258/    5BA6 : 0807 0001           		btst	#bitJoyDown,d7
(2)  259/    5BAA : 6706                		beq.s	.not_down
(2)  260/    5BAC : 7201                		moveq	#1,d1			; Y down
(2)  261/    5BAE : 7400                		moveq	#0,d2
(2)  262/    5BB0 : 5243                		addq.w	#1,d3
(2)  263/    5BB2 :                     .not_down:
(2)  264/    5BB2 : 0807 0000           		btst	#bitJoyUp,d7
(2)  265/    5BB6 : 6706                		beq.s	.not_up
(2)  266/    5BB8 : 72FF                		moveq	#-1,d1			; Y up
(2)  267/    5BBA : 7401                		moveq	#1,d2
(2)  268/    5BBC : 5243                		addq.w	#1,d3
(2)  269/    5BBE :                     .not_up:
(2)  277/    5BBE : 9178 CC42           		sub.w	d0,(RAM_HorScroll+2).w
(2)  278/    5BC2 : D378 D002           		add.w	d1,(RAM_VerScroll+2).w
(2)  279/    5BC6 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  280/    5BCA : D36E 0008           		add.w	d1,obj_y(a6)
(2)  282/    5BCE :                     
(2)  283/    5BCE : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  284/    5BD2 :                     
(2)  285/    5BD2 :                     ; ----------------------------------------------
(2)  286/    5BD2 :                     ; Show the object...
(2)  287/    5BD2 :                     
(2)  288/    5BD2 : 4A43                		tst.w	d3
(2)  289/    5BD4 : 6708                		beq.s	.no_anim
(2)  290/    5BD6 : 41FA 0018           		lea	.anim_data(pc),a0	; Do animation
(2)  291/    5BDA : 6100 BD88           		bsr	object_Animate
(2)  292/    5BDE :                     .no_anim:
(2)  293/    5BDE : 42B8 B800           		clr.l	(RAM_TestTouch).w
(2)  294/    5BE2 : 6100 BE14           		bsr	object_Touch
(2)  295/    5BE6 : 4A80                		tst.l	d0
(2)  296/    5BE8 : 6704                		beq.s	.lel
(2)  297/    5BEA : 21C0 B800           		move.l	d0,(RAM_TestTouch).w
(2)  298/    5BEE :                     .lel:
(2)  299/    5BEE :                     
(2)  310/    5BEE : 4E75                		rts
(2)  311/    5BF0 :                     
(2)  312/    5BF0 :                     ; ----------------------------------------------
(2)  313/    5BF0 :                     
(2)  314/    5BF0 :                     .anim_data:
(2)  315/    5BF0 : 0008                		dc.w .anim_down-.anim_data
(2)  316/    5BF2 : 0014                		dc.w .anim_up-.anim_data
(2)  317/    5BF4 : 0020                		dc.w .anim_right-.anim_data
(2)  318/    5BF6 : 002C                		dc.w .anim_left-.anim_data
(2)  319/    5BF8 :                     
(2)  320/    5BF8 :                     .anim_down:
(2)  321/    5BF8 : 0008                		dc.w 8
(2)  322/    5BFA : 0000 0001 0000      		dc.w 0,1,0,2
             5C00 : 0002             
(2)  323/    5C02 : FFFE                		dc.w -2
(2)  324/    5C04 :                     		align 2
(2)  325/    5C04 :                     .anim_up:
(2)  326/    5C04 : 0008                		dc.w 8
(2)  327/    5C06 : 0003 0004 0003      		dc.w 3,4,3,5
             5C0C : 0005             
(2)  328/    5C0E : FFFE                		dc.w -2
(2)  329/    5C10 :                     		align 2
(2)  330/    5C10 :                     .anim_right:
(2)  331/    5C10 : 0008                		dc.w 8
(2)  332/    5C12 : 0006 0007 0006      		dc.w 6,7,6,8
             5C18 : 0008             
(2)  333/    5C1A : FFFE                		dc.w -2
(2)  334/    5C1C :                     		align 2
(2)  335/    5C1C :                     .anim_left:
(2)  336/    5C1C : 0008                		dc.w 8
(2)  337/    5C1E : 0009 000A 0009      		dc.w 9,10,9,11
             5C24 : 000B             
(2)  338/    5C26 : FFFE                		dc.w -2
(2)  339/    5C28 :                     		align 2
(2)  340/    5C28 :                     
(2)  341/    5C28 :                     ; --------------------------------------------------
(2)  342/    5C28 :                     ; Test object
(2)  343/    5C28 :                     ; --------------------------------------------------
(2)  344/    5C28 :                     
(2)  345/    5C28 :                     obj_Ball:
(2)  346/    5C28 : 7000                		moveq	#0,d0
(2)  347/    5C2A : 102E 001C           		move.b	obj_index(a6),d0
(2)  348/    5C2E : D040                		add.w	d0,d0
(2)  349/    5C30 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  350/    5C34 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  351/    5C38 :                     ; ----------------------------------------------
(2)  352/    5C38 : 0004                .list:		dc.w .init-.list
(2)  353/    5C3A : 0068                		dc.w .main-.list
(2)  354/    5C3C :                     ; ----------------------------------------------
(2)  355/    5C3C :                     .init:
(2)  356/    5C3C : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  357/    5C40 : 6100 BCEA           		bsr	object_ResetAnim	; Init/Reset animation
(2)  358/    5C44 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  359/    5C4A : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  360/    5C50 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  361/    5C56 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  362/    5C5C :                     
(2)  363/    5C5C : 3D7C FF80 0004      		move.w	#-$80,obj_x(a6)	; Set Object's X/Y position
(2)  364/    5C62 : 3D7C FF80 000C      		move.w	#-$80,obj_z(a6)
(2)  365/    5C68 : 303C 0101           		move.w	#$100+1,d0
(2)  366/    5C6C : 6100 B998           		bsr	System_DiceRoll
(2)  367/    5C70 : 3800                		move.w	d0,d4
(2)  368/    5C72 : 303C 0081           		move.w	#$80+1,d0
(2)  369/    5C76 : 6100 B98E           		bsr	System_DiceRoll
(2)  370/    5C7A : E348                		lsl.w	#1,d0
(2)  371/    5C7C : E34C                		lsl.w	#1,d4
(2)  372/    5C7E : D16E 0004           		add.w	d0,obj_x(a6)
(2)  373/    5C82 : D96E 000C           		add.w	d4,obj_z(a6)
(2)  374/    5C86 :                     
(2)  375/    5C86 : 6100 B924           		bsr	System_Random
(2)  376/    5C8A : 2E38 E97C           		move.l	(RAM_SysRandom).w,d7
(2)  377/    5C8E : E24F                		lsr.w	#1,d7
(2)  378/    5C90 : 6504                		bcs.s	.x_random
(2)  379/    5C92 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  380/    5C96 :                     .x_random:
(2)  381/    5C96 : E24F                		lsr.w	#1,d7
(2)  382/    5C98 : 6504                		bcs.s	.y_random
(2)  383/    5C9A : 446E 001A           		neg.w	obj_z_spd(a6)
(2)  384/    5C9E :                     .y_random:
(2)  385/    5C9E : 4E75                		rts
(2)  386/    5CA0 :                     
(2)  387/    5CA0 :                     ; ----------------------------------------------
(2)  388/    5CA0 :                     .main:
(2)  389/    5CA0 :                     ; 		move.w	#224,d1
(2)  390/    5CA0 :                     ; 		move.w	#320,d0
(2)  391/    5CA0 :                     ; 		move.w	obj_x(a6),d2
(2)  392/    5CA0 :                     ; 		tst.w	d2
(2)  393/    5CA0 :                     ; 		bpl.s	.x_back
(2)  394/    5CA0 :                     ; 		neg.w	obj_x_spd(a6)
(2)  395/    5CA0 :                     ; 		bchg	#0,obj_attr(a6)
(2)  396/    5CA0 :                     ; .x_back:
(2)  397/    5CA0 :                     ; 		cmp.w	d0,d2
(2)  398/    5CA0 :                     ; 		blt.s	.x_foward
(2)  399/    5CA0 :                     ; 		neg.w	obj_x_spd(a6)
(2)  400/    5CA0 :                     ; 		bchg	#0,obj_attr(a6)
(2)  401/    5CA0 :                     ; .x_foward:
(2)  402/    5CA0 :                     ; 		move.w	d2,obj_x(a6)
(2)  403/    5CA0 :                     ;
(2)  404/    5CA0 :                     ; 		move.w	obj_y(a6),d2
(2)  405/    5CA0 :                     ; 		tst.w	d2
(2)  406/    5CA0 :                     ; 		bpl.s	.y_back
(2)  407/    5CA0 :                     ; 		neg.w	obj_y_spd(a6)
(2)  408/    5CA0 :                     ; .y_back:
(2)  409/    5CA0 :                     ; 		cmp.w	d1,d2
(2)  410/    5CA0 :                     ; 		blt.s	.y_foward
(2)  411/    5CA0 :                     ; 		neg.w	obj_y_spd(a6)
(2)  412/    5CA0 :                     ; .y_foward:
(2)  413/    5CA0 :                     ; 		move.w	d2,obj_y(a6)
(2)  414/    5CA0 :                     ;
(2)  415/    5CA0 :                     ; 		bsr	object_Speed
(2)  416/    5CA0 :                     
(2)  417/    5CA0 :                     ; ----------------------------------------------
(2)  418/    5CA0 :                     ; Show the object...
(2)  419/    5CA0 : 41FA 0008           		lea	.anim_data(pc),a0	; Do animation
(2)  420/    5CA4 : 6100 BCBE           		bsr	object_Animate
(2)  421/    5CA8 :                     
(2)  432/    5CA8 : 4E75                		rts
(2)  433/    5CAA :                     ; 		lea	(Map_Sisi),a1
(2)  434/    5CAA :                     ; 		moveq	#0,d2
(2)  435/    5CAA :                     ; 		move.w	obj_x(a6),d0
(2)  436/    5CAA :                     ; 		move.w	obj_y(a6),d1
(2)  437/    5CAA :                     ; 		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  438/    5CAA :                     ; 		lsl.w	#8,d2
(2)  439/    5CAA :                     ; 		lsl.w	#3,d2				; %000vh000 00000000
(2)  440/    5CAA :                     ; 		add.w	#vramLoc_Sisi,d2
(2)  441/    5CAA :                     ; 		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  442/    5CAA :                     ; 		bra	Video_MakeSprMap
(2)  444/    5CAA :                     
(2)  445/    5CAA :                     ; ----------------------------------------------
(2)  446/    5CAA :                     
(2)  447/    5CAA :                     .anim_data:
(2)  448/    5CAA : 0002                		dc.w .maind-.anim_data
(2)  449/    5CAC :                     .maind:
(2)  450/    5CAC : 0008                		dc.w 8
(2)  451/    5CAE : 0000 0001 0002      		dc.w 0,1,2,1
             5CB4 : 0001             
(2)  452/    5CB6 : FFFE                		dc.w -2
(2)  453/    5CB8 :                     		align 2
(2)  454/    5CB8 :                     
(2)  455/    5CB8 :                     ; ====================================================================
(2)  456/    5CB8 :                     ; ------------------------------------------------------
(2)  457/    5CB8 :                     ; Subroutines
(2)  458/    5CB8 :                     ; ------------------------------------------------------
(2)  459/    5CB8 :                     
(2)  460/    5CB8 :                     Camera_Update:
(2)  492/    5CB8 : 4E75                		rts
(2)  493/    5CBA :                     
(2)  494/    5CBA :                     ; ====================================================================
(2)  495/    5CBA :                     ; ------------------------------------------------------
(2)  496/    5CBA :                     ; Includes for this screen
(2)  497/    5CBA :                     ; ------------------------------------------------------
(2)  498/    5CBA :                     
(2)  499/    5CBA :                     ; ====================================================================
(2)  500/    5CBA :                     ; ------------------------------------------------------
(2)  501/    5CBA :                     ; Custom VBlank
(2)  502/    5CBA :                     ; ------------------------------------------------------
(2)  503/    5CBA :                     
(2)  504/    5CBA :                     ; ------------------------------------------------------
(2)  505/    5CBA :                     ; Custom HBlank
(2)  506/    5CBA :                     ; ------------------------------------------------------
(2)  507/    5CBA :                     
(2)  508/    5CBA :                     ; ====================================================================
(2)  509/    5CBA :                     ; ------------------------------------------------------
(2)  510/    5CBA :                     ; Small data section
(2)  511/    5CBA :                     ; ------------------------------------------------------
(2)  512/    5CBA :                     
(2)  513/    5CBA :                     str_NewCountr0:
(2)  531/    5CBA : 83FF D7D8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  533/    5CBE : 00                  		dc.b 0
(2)  534/    5CBF :                     		align 2
(2)  535/    5CC0 :                     
(2)  536/    5CC0 :                     str_InputMe:
(2)  544/    5CC0 : 20                  		dc.b " "
(2)  546/    5CC1 : 00                  		dc.b 0
(2)  547/    5CC2 :                     		align 2
(2)  548/    5CC2 :                     
(2)  549/    5CC2 :                     ; ====================================================================
(2)  550/    5CC2 :                     
(1)   19/    5CC2 :                     mcscrn_e:
(1)   19/    5CC2 :                     ; Md_Screen00_e:
(1)   19/    5CC2 : =$5CC2               MD_SCREEN04_E label *
(1)   19/    5CC2 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN04",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/    5CC2 : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   20/    5CC2 : =$5CC2               MD_SCREEN07 label *
(1)   20/    5CC2 :                     
(1)   20/    5CC2 :                     mctopscrn:
(1)   20/    5CC2 :                     mcscrn_s:
(1)   20/    5CC2 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/    5CC2 :                     ; ===========================================================================
(2)    2/    5CC2 :                     ; ----------------------------------------------------------------
(2)    3/    5CC2 :                     ; GEMA SOUND TESTER
(2)    4/    5CC2 :                     ; ----------------------------------------------------------------
(2)    5/    5CC2 :                     
(2)    6/    5CC2 :                     ; ====================================================================
(2)    7/    5CC2 :                     ; ------------------------------------------------------
(2)    8/    5CC2 :                     ; Variables
(2)    9/    5CC2 :                     ; ------------------------------------------------------
(2)   10/    5CC2 :                     
(2)   11/    5CC2 : =$7                  MAX_SNDPICK		equ 7
(2)   12/    5CC2 :                     
(2)   13/    5CC2 :                     ; ====================================================================
(2)   14/    5CC2 :                     ; ------------------------------------------------------
(2)   15/    5CC2 :                     ; Structs
(2)   16/    5CC2 :                     ; ------------------------------------------------------
(2)   17/    5CC2 :                     
(2)   18/    5CC2 :                     ; test 			struct
(2)   19/    5CC2 :                     ; x_pos			ds.w 1
(2)   20/    5CC2 :                     ; y_pos			ds.w 1
(2)   21/    5CC2 :                     ; 			endstuct
(2)   22/    5CC2 :                     
(2)   23/    5CC2 :                     ; ====================================================================
(2)   24/    5CC2 :                     ; ------------------------------------------------------
(2)   25/    5CC2 :                     ; This mode's RAM
(2)   26/    5CC2 :                     ; ------------------------------------------------------
(2)   27/    5CC2 :                     
(2)   28/    5CC2 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   28/    5CC2 : =$5CC2               GLBL_LASTPC     := *
(2)   28/    5CC2 :                                     dephase
(2)   28/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   28/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   29/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   30/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   31/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 6
(2)   32/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   33/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   34/FFFFFFFFFFFFB868 :                     
(2)   35/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   36/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   37/FFFFFFFFFFFFB86C :                     RAM_GemaArg0		ds.w 1
(2)   38/FFFFFFFFFFFFB86E :                     RAM_GemaArg1		ds.w 1
(2)   39/FFFFFFFFFFFFB870 :                     RAM_GemaArg2		ds.w 1
(2)   40/FFFFFFFFFFFFB872 :                     RAM_GemaArg3		ds.w 1
(2)   41/FFFFFFFFFFFFB874 :                     RAM_GemaArg4		ds.w 1
(2)   42/FFFFFFFFFFFFB876 :                     RAM_GemaArg5		ds.w 1
(2)   43/FFFFFFFFFFFFB878 :                     RAM_GemaArg6		ds.w 1
(2)   44/FFFFFFFFFFFFB87A :                     RAM_ChnlLinks		ds.w 26
(2)   45/FFFFFFFFFFFFB8AE :                     sizeof_thisbuff		ds.l 0
(2)   46/FFFFFFFFFFFFB8B4 :  (MACRO-2)           			endmemory
(2)   46/    5D76 :                     .here:          dephase
(2)   46/    5D76 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   46/    5CC2 :                                     phase GLBL_LASTPC
(2)   47/    5CC2 :                     
(2)   48/    5CC2 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   49/    5CC2 :                     
(2)   50/    5CC2 :                     ; ====================================================================
(2)   51/    5CC2 :                     ; ------------------------------------------------------
(2)   52/    5CC2 :                     ; Init
(2)   53/    5CC2 :                     ; ------------------------------------------------------
(2)   54/    5CC2 :                     
(2)   55/    5CC2 : 6100 AAFA           		bsr	Video_DisplayOff
(2)   56/    5CC6 : 6100 B8B4           		bsr	System_Default
(2)   57/    5CCA :                     	; ----------------------------------------------
(2)   58/    5CCA :                     	; Load assets
(2)   59/    5CCA :                     
(2)   60/    5CCA : 41FA 0428           		lea	file_scrn1_main(pc),a0		; ** LOAD BANK **
(2)   61/    5CCE : 6100 BBAE           		bsr	System_SetDataBank
(2)   62/    5CD2 :                     	; ----------------------------------------------
(2)   63/    5CD2 : 203C 0002 65DA      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   64/    5CD8 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   65/    5CDC : 6100 B312           		bsr	Video_PrintInit
(2)   66/    5CE0 : 203C 0002 71DA      		move.l	#ASCII_FONT_W,d0
(2)   67/    5CE6 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   68/    5CEA : 6100 B2F4           		bsr	Video_PrintInitW
(2)   69/    5CEE : 41F8 D630           		lea	(RAM_PaletteFade+$60).w,a0	; Palette line 4:
(2)   70/    5CF2 : 30FC 0000           		move.w	#$0000,(a0)+			; black (background)
(2)   71/    5CF6 : 30FC 0EEE           		move.w	#$0EEE,(a0)+			; white
(2)   72/    5CFA : 30FC 0888           		move.w	#$0888,(a0)+			; gray
(2)   73/    5CFE :                     
(2)   74/    5CFE : 41FA 040E           		lea	str_TesterTitle(pc),a0
(2)   75/    5D02 : 7001                		moveq	#1,d0
(2)   76/    5D04 : 7201                		moveq	#1,d1
(2)   77/    5D06 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   78/    5D0A : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   79/    5D0E : 6100 B3FC           		bsr	Video_PrintW
(2)   80/    5D12 : 41FA 040C           		lea	str_TesterInfo(pc),a0
(2)   81/    5D16 : 7001                		moveq	#1,d0
(2)   82/    5D18 : 7204                		moveq	#4,d1
(2)   83/    5D1A : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   84/    5D1E : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   85/    5D22 : 6100 B2FE           		bsr	Video_Print
(2)   86/    5D26 : 41FA 04A2           		lea	str_VmInfo(pc),a0
(2)   87/    5D2A : 7005                		moveq	#5,d0
(2)   88/    5D2C : 720D                		moveq	#13,d1
(2)   89/    5D2E : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   90/    5D32 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   91/    5D36 : 6100 B2EA           		bsr	Video_Print
(2)   92/    5D3A : 6100 0090           		bsr	.show_cursor
(2)   93/    5D3E :                     
(2)   94/    5D3E :                     	; ----------------------------------------------
(2)   95/    5D3E : 6100 A53C           		bsr	gemaReset				; Load default GEMA sound data
(2)   96/    5D42 : 31FC 00D7 B878      		move.w	#215,(RAM_GemaArg6).w
(2)   97/    5D48 : 303C 00D7           		move.w	#215,d0
(2)   98/    5D4C : 6100 A630           		bsr	gemaSetBeats
(2)   99/    5D50 :                     ; 		moveq	#1,d0
(2)  100/    5D50 :                     ; 		bsr	gemaPlaySeq
(2)  101/    5D50 :                     
(2)  102/    5D50 :                     	; ----------------------------------------------
(2)  103/    5D50 : 6100 00BA           		bsr	.show_me
(2)  104/    5D54 : 6100 026C           		bsr	.gema_view
(2)  105/    5D58 :                     ; 		bsr	.steal_vars
(2)  106/    5D58 : 6100 BB36           		bsr	Object_Run
(2)  107/    5D5C :                     	; ----------------------------------------------
(2)  108/    5D5C : 6100 AA54           		bsr	Video_DisplayOn
(2)  109/    5D60 : 6100 B1A4           		bsr	Video_FadeIn_Full
(2)  110/    5D64 :                     
(2)  111/    5D64 :                     ; ====================================================================
(2)  112/    5D64 :                     ; ------------------------------------------------------
(2)  113/    5D64 :                     ; Loop
(2)  114/    5D64 :                     ; ------------------------------------------------------
(2)  115/    5D64 :                     
(2)  116/    5D64 :                     .loop:
(2)  117/    5D64 : 6100 B70E           		bsr	System_Render
(2)  118/    5D68 : 6162                		bsr	.show_cursor
(2)  119/    5D6A : 6100 0256           		bsr	.gema_view
(2)  120/    5D6E :                     
(2)  121/    5D6E :                     ; 		bsr	Object_Run
(2)  122/    5D6E :                     ; 		lea	str_Info(pc),a0
(2)  123/    5D6E :                     ; 		moveq	#31,d0
(2)  124/    5D6E :                     ; 		moveq	#2,d1
(2)  125/    5D6E :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  126/    5D6E :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  127/    5D6E :                     ; 		bsr	Video_Print
(2)  128/    5D6E :                     
(2)  129/    5D6E :                     ; 	; Controls
(2)  130/    5D6E :                     
(2)  131/    5D6E : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)  132/    5D72 : 4BF8 B868           		lea	(RAM_CurrPick).w,a5
(2)  133/    5D76 :                     	; UP/DOWN
(2)  134/    5D76 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  135/    5D7A : 0247 0070           		andi.w	#JoyA+JoyB+JoyC,d7
(2)  136/    5D7E : 662A                		bne.s	.n_up
(2)  137/    5D80 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  138/    5D84 : 0807 0001           		btst	#bitJoyDown,d7
(2)  139/    5D88 : 670C                		beq.s	.n_down
(2)  140/    5D8A : 5255                		addq.w	#1,(a5)
(2)  141/    5D8C : 0C55 0007           		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  142/    5D90 : 6F02                		ble.s	.n_downd
(2)  143/    5D92 : 4255                		clr.w	(a5)
(2)  144/    5D94 :                     .n_downd:
(2)  145/    5D94 : 6176                		bsr.s	.show_me
(2)  146/    5D96 :                     .n_down:
(2)  147/    5D96 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  148/    5D9A : 0807 0000           		btst	#bitJoyUp,d7
(2)  149/    5D9E : 670A                		beq.s	.n_up
(2)  150/    5DA0 : 5355                		subq.w	#1,(a5)
(2)  151/    5DA2 : 6A04                		bpl.s	.n_ups
(2)  152/    5DA4 : 3ABC 0007           		move.w	#MAX_SNDPICK,(a5)
(2)  153/    5DA8 :                     .n_ups:
(2)  154/    5DA8 : 6162                		bsr.s	.show_me
(2)  155/    5DAA :                     .n_up:
(2)  156/    5DAA : 3E38 B868           		move.w	(RAM_CurrPick).w,d7
(2)  157/    5DAE : E54F                		lsl.w	#2,d7
(2)  158/    5DB0 : 4EBB 706E           		jsr	.jump_list(pc,d7.w)
(2)  159/    5DB4 : 4A78 E994           		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  160/    5DB8 : 6A10                		bpl.s	.n_cbtn
(2)  161/    5DBA : 6100 A578           		bsr	gemaStopAll
(2)  162/    5DBE : 6100 B158           		bsr	Video_FadeOut_Full
(2)  163/    5DC2 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(2)  164/    5DC8 : 4E75                		rts				; EXIT
(2)  165/    5DCA :                     .n_cbtn:
(2)  166/    5DCA : 6098                		bra	.loop
(2)  167/    5DCC :                     
(2)  168/    5DCC :                     ; ------------------------------------------------------
(2)  169/    5DCC :                     
(2)  170/    5DCC :                     .show_cursor:
(2)  171/    5DCC : 3E38 B86A           		move.w	(RAM_LastPick).w,d7
(2)  172/    5DD0 : BE78 B868           		cmp.w	(RAM_CurrPick).w,d7
(2)  173/    5DD4 : 671E                		beq.s	.last_pick
(2)  174/    5DD6 : 41FA 0332           		lea	str_CursorDel(pc),a0
(2)  175/    5DDA : 7001                		moveq	#1,d0
(2)  176/    5DDC : 7204                		moveq	#4,d1
(2)  177/    5DDE : D278 B86A           		add.w	(RAM_LastPick).w,d1
(2)  178/    5DE2 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  179/    5DE6 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  180/    5DEA : 6100 B236           		bsr	Video_Print
(2)  181/    5DEE : 31F8 B868 B86A      		move.w	(RAM_CurrPick).w,(RAM_LastPick).w
(2)  182/    5DF4 :                     .last_pick:
(2)  183/    5DF4 : 41FA 0310           		lea	str_Cursor(pc),a0
(2)  184/    5DF8 : 7001                		moveq	#1,d0
(2)  185/    5DFA : 7204                		moveq	#4,d1
(2)  186/    5DFC : D278 B868           		add.w	(RAM_CurrPick).w,d1
(2)  187/    5E00 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  188/    5E04 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  189/    5E08 : 6000 B218           		bra	Video_Print
(2)  190/    5E0C :                     
(2)  191/    5E0C :                     ; ------------------------------------------------------
(2)  192/    5E0C :                     
(2)  193/    5E0C :                     .show_me:
(2)  194/    5E0C : 41FA 0738           		lea	str_ShowVars(pc),a0
(2)  195/    5E10 : 7017                		moveq	#23,d0
(2)  196/    5E12 : 7205                		moveq	#5,d1
(2)  197/    5E14 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  198/    5E18 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  199/    5E1C : 6000 B204           		bra	Video_Print
(2)  200/    5E20 :                     
(2)  201/    5E20 :                     ; ------------------------------------------------------
(2)  202/    5E20 :                     
(2)  203/    5E20 :                     .jump_list:
(2)  204/    5E20 : 6000 001E           		bra.w	.nothing
(2)  205/    5E24 : 6000 002C           		bra.w	.option_1
(2)  206/    5E28 : 6000 00AE           		bra.w	.option_2
(2)  207/    5E2C : 6000 00C0           		bra.w	.option_3
(2)  208/    5E30 : 6000 00D2           		bra.w	.option_4
(2)  209/    5E34 : 6000 00E6           		bra.w	.option_5
(2)  210/    5E38 : 6000 00F6           		bra.w	.option_6
(2)  211/    5E3C : 6000 0144           		bra.w	.option_7
(2)  212/    5E40 :                     
(2)  213/    5E40 :                     ; ------------------------------------------------------
(2)  214/    5E40 :                     ; OPTION 0
(2)  215/    5E40 :                     ; ------------------------------------------------------
(2)  216/    5E40 :                     
(2)  217/    5E40 :                     .nothing:
(2)  218/    5E40 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  219/    5E44 : 0807 0007           		btst	#bitJoyStart,d7
(2)  220/    5E48 : 6706                		beq.s	.no_press
(2)  221/    5E4A : 61C0                		bsr.s	.show_me
(2)  222/    5E4C : 6000 A4A4           		bra	gemaTest
(2)  223/    5E50 :                     .no_press:
(2)  224/    5E50 : 4E75                		rts
(2)  225/    5E52 :                     
(2)  226/    5E52 :                     ; ------------------------------------------------------
(2)  227/    5E52 :                     ; OPTION 1
(2)  228/    5E52 :                     ; ------------------------------------------------------
(2)  229/    5E52 :                     
(2)  230/    5E52 :                     .option_1:
(2)  231/    5E52 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  232/    5E56 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  233/    5E5A : 0807 0007           		btst	#bitJoyStart,d7
(2)  234/    5E5E : 671E                		beq.s	.option1_args
(2)  235/    5E60 : 301D                		move.w	(a5)+,d0
(2)  236/    5E62 : 321D                		move.w	(a5)+,d1
(2)  237/    5E64 : 341D                		move.w	(a5)+,d2
(2)  238/    5E66 : 6100 A4A2           		bsr	gemaPlaySeq
(2)  239/    5E6A : 3038 B86E           		move.w	(RAM_GemaArg1).w,d0
(2)  240/    5E6E : 3200                		move.w	d0,d1
(2)  241/    5E70 : D241                		add.w	d1,d1
(2)  242/    5E72 : 41FA 0120           		lea	.extnal_beats(pc),a0
(2)  243/    5E76 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  244/    5E7A : 6000 A502           		bra	gemaSetBeats
(2)  245/    5E7E :                     ; 		bra.s	.show_me
(2)  246/    5E7E :                     .option1_args:
(2)  247/    5E7E : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  248/    5E82 : 3C07                		move.w	d7,d6
(2)  249/    5E84 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(2)  250/    5E88 : 67C6                		beq.s	.no_press
(2)  251/    5E8A : 0807 0004           		btst	#bitJoyB,d7
(2)  252/    5E8E : 6704                		beq.s	.d2_opt
(2)  253/    5E90 : DAFC 0002           		adda	#2,a5
(2)  254/    5E94 :                     .d2_opt:
(2)  255/    5E94 : 0807 0005           		btst	#bitJoyC,d7
(2)  256/    5E98 : 6704                		beq.s	.d3_opt
(2)  257/    5E9A : DAFC 0004           		adda	#4,a5
(2)  258/    5E9E :                     .d3_opt:
(2)  259/    5E9E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  260/    5EA2 : 0807 0003           		btst	#bitJoyRight,d7
(2)  261/    5EA6 : 6706                		beq.s	.op1_right
(2)  262/    5EA8 : 5255                		addq.w	#1,(a5)
(2)  263/    5EAA : 6000 FF60           		bra	.show_me
(2)  264/    5EAE :                     .op1_right:
(2)  265/    5EAE : 0807 0002           		btst	#bitJoyLeft,d7
(2)  266/    5EB2 : 6706                		beq.s	.op1_left
(2)  267/    5EB4 : 5355                		subq.w	#1,(a5)
(2)  268/    5EB6 : 6000 FF54           		bra	.show_me
(2)  269/    5EBA :                     .op1_left:
(2)  270/    5EBA : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  271/    5EBE : 0807 0000           		btst	#bitJoyUp,d7
(2)  272/    5EC2 : 6706                		beq.s	.op1_down
(2)  273/    5EC4 : 5255                		addq.w	#1,(a5)
(2)  274/    5EC6 : 6000 FF44           		bra	.show_me
(2)  275/    5ECA :                     .op1_down:
(2)  276/    5ECA : 0807 0001           		btst	#bitJoyDown,d7
(2)  277/    5ECE : 6706                		beq.s	.op1_up
(2)  278/    5ED0 : 5355                		subq.w	#1,(a5)
(2)  279/    5ED2 : 6000 FF38           		bra	.show_me
(2)  280/    5ED6 :                     .op1_up:
(2)  281/    5ED6 :                     
(2)  282/    5ED6 : 4E75                		rts
(2)  283/    5ED8 :                     
(2)  284/    5ED8 :                     ; ------------------------------------------------------
(2)  285/    5ED8 :                     ; OPTION 2
(2)  286/    5ED8 :                     ; ------------------------------------------------------
(2)  287/    5ED8 :                     
(2)  288/    5ED8 :                     .option_2:
(2)  289/    5ED8 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  290/    5EDC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  291/    5EE0 : 0807 0007           		btst	#bitJoyStart,d7
(2)  292/    5EE4 : 6798                		beq.s	.option1_args
(2)  293/    5EE6 : 301D                		move.w	(a5)+,d0
(2)  294/    5EE8 : 321D                		move.w	(a5)+,d1
(2)  295/    5EEA : 6000 A434           		bra	gemaStopSeq
(2)  296/    5EEE :                     
(2)  297/    5EEE :                     ; ------------------------------------------------------
(2)  298/    5EEE :                     ; OPTION 3
(2)  299/    5EEE :                     ; ------------------------------------------------------
(2)  300/    5EEE :                     
(2)  301/    5EEE :                     .option_3:
(2)  302/    5EEE : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  303/    5EF2 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  304/    5EF6 : 0807 0007           		btst	#bitJoyStart,d7
(2)  305/    5EFA : 6782                		beq	.option1_args
(2)  306/    5EFC : 301D                		move.w	(a5)+,d0
(2)  307/    5EFE : 321D                		move.w	(a5)+,d1
(2)  308/    5F00 : 6000 A448           		bra	gemaFadeSeq
(2)  309/    5F04 :                     
(2)  310/    5F04 :                     ; ------------------------------------------------------
(2)  311/    5F04 :                     ; OPTION 4
(2)  312/    5F04 :                     ; ------------------------------------------------------
(2)  313/    5F04 :                     
(2)  314/    5F04 :                     .option_4:
(2)  315/    5F04 : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  316/    5F08 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  317/    5F0C : 0807 0007           		btst	#bitJoyStart,d7
(2)  318/    5F10 : 6700 FF6C           		beq	.option1_args
(2)  319/    5F14 : 301D                		move.w	(a5)+,d0
(2)  320/    5F16 : 321D                		move.w	(a5)+,d1
(2)  321/    5F18 : 6000 A448           		bra	gemaSetSeqVol
(2)  322/    5F1C :                     
(2)  323/    5F1C :                     ; ------------------------------------------------------
(2)  324/    5F1C :                     ; OPTION 5
(2)  325/    5F1C :                     ; ------------------------------------------------------
(2)  326/    5F1C :                     
(2)  327/    5F1C :                     .option_5:
(2)  328/    5F1C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  329/    5F20 : 0807 0007           		btst	#bitJoyStart,d7
(2)  330/    5F24 : 6708                		beq.s	.no_press2
(2)  331/    5F26 : 6100 FEE4           		bsr	.show_me
(2)  332/    5F2A : 6000 A408           		bra	gemaStopAll
(2)  333/    5F2E :                     .no_press2:
(2)  334/    5F2E : 4E75                		rts
(2)  335/    5F30 :                     
(2)  336/    5F30 :                     ; ------------------------------------------------------
(2)  337/    5F30 :                     ; OPTION 6
(2)  338/    5F30 :                     ; ------------------------------------------------------
(2)  339/    5F30 :                     
(2)  340/    5F30 :                     .option_6:
(2)  341/    5F30 : 4BF8 B878           		lea	(RAM_GemaArg6).w,a5
(2)  342/    5F34 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  343/    5F38 : 0247 0040           		andi.w	#JoyA,d7
(2)  344/    5F3C : 67F0                		beq.s	.no_press2
(2)  345/    5F3E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  346/    5F42 : 0807 0003           		btst	#bitJoyRight,d7
(2)  347/    5F46 : 6704                		beq.s	.op2_right
(2)  348/    5F48 : 5255                		addq.w	#1,(a5)
(2)  349/    5F4A : 602C                		bra	.show_me_2
(2)  350/    5F4C :                     .op2_right:
(2)  351/    5F4C : 0807 0002           		btst	#bitJoyLeft,d7
(2)  352/    5F50 : 6704                		beq.s	.op2_left
(2)  353/    5F52 : 5355                		subq.w	#1,(a5)
(2)  354/    5F54 : 6122                		bsr	.show_me_2
(2)  355/    5F56 :                     .op2_left:
(2)  356/    5F56 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  357/    5F5A : 0807 0001           		btst	#bitJoyDown,d7
(2)  358/    5F5E : 6704                		beq.s	.op2_down
(2)  359/    5F60 : 5255                		addq.w	#1,(a5)
(2)  360/    5F62 : 6114                		bsr	.show_me_2
(2)  361/    5F64 :                     .op2_down:
(2)  362/    5F64 : 0807 0000           		btst	#bitJoyUp,d7
(2)  363/    5F68 : 6704                		beq.s	.op2_up
(2)  364/    5F6A : 5355                		subq.w	#1,(a5)
(2)  365/    5F6C : 610A                		bsr	.show_me_2
(2)  366/    5F6E :                     .op2_up:
(2)  367/    5F6E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  368/    5F72 : 0807 0007           		btst	#bitJoyStart,d7
(2)  369/    5F76 : 67B6                		beq.s	.no_press2
(2)  370/    5F78 :                     .show_me_2:
(2)  371/    5F78 : 6100 FE92           		bsr	.show_me
(2)  372/    5F7C : 3015                		move.w	(a5),d0
(2)  373/    5F7E : 6000 A3FE           		bra	gemaSetBeats
(2)  374/    5F82 :                     
(2)  375/    5F82 :                     ; ------------------------------------------------------
(2)  376/    5F82 :                     ; OPTION 7
(2)  377/    5F82 :                     ; ------------------------------------------------------
(2)  378/    5F82 :                     
(2)  379/    5F82 :                     .option_7:
(2)  380/    5F82 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  381/    5F86 : 0807 0007           		btst	#bitJoyStart,d7
(2)  382/    5F8A : 67A2                		beq.s	.no_press2
(2)  383/    5F8C : 31FC FFFF E994      		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  384/    5F92 : 4E75                		rts
(2)  385/    5F94 :                     
(2)  386/    5F94 :                     ; ------------------------------------------------------
(2)  387/    5F94 :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  388/    5F94 :                     ; ------------------------------------------------------
(2)  389/    5F94 :                     
(2)  390/    5F94 :                     .extnal_beats:
(2)  391/    5F94 : 00C0                	dc.w 192
(2)  392/    5F96 : 00C0                	dc.w 192
(2)  393/    5F98 : 00C0                	dc.w 192
(2)  394/    5F9A : 00C0                	dc.w 192
(2)  395/    5F9C : 00D7                	dc.w 215
(2)  396/    5F9E : 00B8                	dc.w $00B8
(2)  397/    5FA0 : 00C0                	dc.w 192
(2)  398/    5FA2 : 00C0                	dc.w 192
(2)  399/    5FA4 : 00D7                	dc.w 215
(2)  400/    5FA6 : 00D7                	dc.w 215
(2)  401/    5FA8 : 00D7                	dc.w 215
(2)  402/    5FAA : 00D7                	dc.w 215
(2)  403/    5FAC : 00D7                	dc.w 215
(2)  404/    5FAE : 00D7                	dc.w 215
(2)  405/    5FB0 : 00D7                	dc.w 215
(2)  406/    5FB2 : 00D7                	dc.w 215
(2)  407/    5FB4 : 00D7                	dc.w 215
(2)  408/    5FB6 : 00D7                	dc.w 215
(2)  409/    5FB8 : 00D7                	dc.w 215
(2)  410/    5FBA : 00D7                	dc.w 215
(2)  411/    5FBC : 00D7                	dc.w 215
(2)  412/    5FBE : 00D7                	dc.w 215
(2)  413/    5FC0 : 00D7                	dc.w 215
(2)  414/    5FC2 :                     
(2)  415/    5FC2 :                     ; ------------------------------------------------------
(2)  416/    5FC2 :                     
(2)  417/    5FC2 :                     .gema_view:
(2)  418/    5FC2 : 41F9 00A0 1C00      		lea	(z80_cpu+tblPSG),a0
(2)  419/    5FC8 : 43F8 B800           		lea	(RAM_GemaCache_PSG),a1
(2)  420/    5FCC : 7E02                		moveq	#3-1,d7
(2)  421/    5FCE : 6100 0092           		bsr	.copy_me
(2)  422/    5FD2 : 41F9 00A0 1BC2      		lea	(z80_cpu+tblPSGN),a0
(2)  423/    5FD8 : 43F8 B80C           		lea	(RAM_GemaCache_PSGN),a1
(2)  424/    5FDC : 7E00                		moveq	#1-1,d7
(2)  425/    5FDE : 6100 0082           		bsr	.copy_me
(2)  426/    5FE2 : 41F9 00A0 1A6E      		lea	(z80_cpu+tblFM),a0
(2)  427/    5FE8 : 43F8 B810           		lea	(RAM_GemaCache_FM),a1
(2)  428/    5FEC : 7E05                		moveq	#6-1,d7
(2)  429/    5FEE : 6172                		bsr	.copy_me
(2)  430/    5FF0 : 41F9 00A0 1B00      		lea	(z80_cpu+tblPCM),a0
(2)  431/    5FF6 : 43F8 B828           		lea	(RAM_GemaCache_PCM),a1
(2)  432/    5FFA : 7E07                		moveq	#8-1,d7
(2)  433/    5FFC : 6164                		bsr	.copy_me
(2)  434/    5FFE : 41F9 00A0 1C4A      		lea	(z80_cpu+tblPWM),a0
(2)  435/    6004 : 43F8 B848           		lea	(RAM_GemaCache_PWM),a1
(2)  436/    6008 : 7E07                		moveq	#8-1,d7
(2)  437/    600A : 6156                		bsr	.copy_me
(2)  438/    600C :                     
(2)  439/    600C : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  440/    6010 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  441/    6014 :                     
(2)  442/    6014 : 47F8 B800           		lea	(RAM_GemaCache_PSG),a3
(2)  443/    6018 : 700A                		moveq	#10,d0
(2)  444/    601A : 720D                		moveq	#13,d1
(2)  445/    601C : 7E02                		moveq	#3-1,d7
(2)  446/    601E : 6100 00B2           		bsr	.show_table
(2)  447/    6022 : 47F8 B810           		lea	(RAM_GemaCache_FM),a3
(2)  448/    6026 : 701A                		moveq	#26,d0
(2)  449/    6028 : 720D                		moveq	#13,d1
(2)  450/    602A : 7E03                		moveq	#4-1,d7
(2)  451/    602C : 615E                		bsr	.show_table_fm
(2)  452/    602E : 47F8 B828           		lea	(RAM_GemaCache_PCM),a3
(2)  453/    6032 : 700A                		moveq	#10,d0
(2)  454/    6034 : 7214                		moveq	#13+7,d1
(2)  455/    6036 : 7E07                		moveq	#8-1,d7
(2)  456/    6038 : 6100 0098           		bsr	.show_table
(2)  457/    603C : 47F8 B848           		lea	(RAM_GemaCache_PWM),a3
(2)  458/    6040 : 701A                		moveq	#26,d0
(2)  459/    6042 : 7214                		moveq	#13+7,d1
(2)  460/    6044 : 7E06                		moveq	#7-1,d7
(2)  461/    6046 : 6100 008A           		bsr	.show_table
(2)  462/    604A :                     
(2)  463/    604A : 47F8 B820           		lea	(RAM_GemaCache_FM+(4*4)),a3
(2)  464/    604E : 701A                		moveq	#26,d0
(2)  465/    6050 : 7211                		moveq	#13+4,d1
(2)  466/    6052 : 7E01                		moveq	#2-1,d7
(2)  467/    6054 : 6136                		bsr	.show_table_fm
(2)  468/    6056 : 47F8 B80C           		lea	(RAM_GemaCache_PSGN),a3
(2)  469/    605A : 700A                		moveq	#10,d0
(2)  470/    605C : 7210                		moveq	#13+3,d1
(2)  471/    605E : 7E00                		moveq	#1-1,d7
(2)  472/    6060 : 6070                		bra	.show_table
(2)  473/    6062 :                     
(2)  474/    6062 :                     ; ----------------------------------------------
(2)  475/    6062 :                     
(2)  476/    6062 :                     .copy_me:
(2)  477/    6062 : 7200                		moveq	#0,d1
(2)  478/    6064 : 6100 A228           		bsr	sndLockZ80
(2)  479/    6068 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  480/    606C : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  481/    6070 : 1010                		move.b	ztbl_Link(a0),d0
(2)  482/    6072 : 6100 A21C           		bsr	sndUnlockZ80
(2)  483/    6076 : 8002                		or.b	d2,d0
(2)  484/    6078 : 6602                		bne.s	.link_ok
(2)  485/    607A : 72FF                		moveq	#-1,d1
(2)  486/    607C :                     .link_ok:
(2)  487/    607C : 3281                		move.w	d1,(a1)
(2)  488/    607E : D0FC 0018           		adda	#$18,a0
(2)  489/    6082 : D2FC 0004           		adda	#4,a1
(2)  490/    6086 : 51CF FFDA           		dbf	d7,.copy_me
(2)  491/    608A : 4E75                		rts
(2)  492/    608C :                     
(2)  493/    608C :                     ; ----------------------------------------------
(2)  494/    608C :                     
(2)  495/    608C :                     .show_table_fm:
(2)  496/    608C : 41F8 64FE           		lea	(strL_FmOnly),a0
(2)  497/    6090 : 7C00                		moveq	#0,d6
(2)  498/    6092 : 7A00                		moveq	#0,d5
(2)  499/    6094 : 3C13                		move.w	(a3),d6
(2)  500/    6096 : 6A06                		bpl.s	.is_fmgood
(2)  501/    6098 : 6100 AF88           		bsr	Video_Print
(2)  502/    609C : 6028                		bra.s	.from_fmbad
(2)  503/    609E :                     .is_fmgood:
(2)  504/    609E : 3A06                		move.w	d6,d5
(2)  505/    60A0 : D0FC 0004           		adda	#4,a0
(2)  506/    60A4 : 0246 001F           		andi.w	#%11111,d6
(2)  507/    60A8 : E34E                		lsl.w	#1,d6
(2)  508/    60AA : D0C6                		adda	d6,a0
(2)  509/    60AC : 6100 AF74           		bsr	Video_Print
(2)  510/    60B0 : 3800                		move.w	d0,d4
(2)  511/    60B2 : 5440                		addq.w	#2,d0
(2)  512/    60B4 : 0245 00E0           		andi.w	#%11100000,d5
(2)  513/    60B8 : E84D                		lsr.w	#4,d5
(2)  514/    60BA : 41F8 6532           		lea	(strL_LazyVal),a0
(2)  515/    60BE : D0C5                		adda	d5,a0
(2)  516/    60C0 : 6100 AF60           		bsr	Video_Print
(2)  517/    60C4 : 3004                		move.w	d4,d0
(2)  518/    60C6 :                     .from_fmbad:
(2)  519/    60C6 : 5241                		addq.w	#1,d1
(2)  520/    60C8 : D6FC 0004           		adda	#4,a3
(2)  521/    60CC : 51CF FFBE           		dbf	d7,.show_table_fm
(2)  522/    60D0 : 4E75                		rts
(2)  523/    60D2 :                     
(2)  524/    60D2 :                     .show_table:
(2)  525/    60D2 : 41F8 631A           		lea	(strL_NoteList),a0
(2)  526/    60D6 : 7C00                		moveq	#0,d6
(2)  527/    60D8 : 3C13                		move.w	(a3),d6
(2)  528/    60DA : 6B08                		bmi.s	.val_bad
(2)  529/    60DC : D0FC 0004           		adda	#4,a0
(2)  530/    60E0 : DC46                		add.w	d6,d6
(2)  531/    60E2 : D0C6                		adda	d6,a0
(2)  532/    60E4 :                     .val_bad:
(2)  533/    60E4 : 6100 AF3C           		bsr	Video_Print
(2)  534/    60E8 : 5241                		addq.w	#1,d1
(2)  535/    60EA : D6FC 0004           		adda	#4,a3
(2)  536/    60EE : 51CF FFE2           		dbf	d7,.show_table
(2)  537/    60F2 : 4E75                		rts
(2)  538/    60F4 :                     
(2)  539/    60F4 :                     ; ====================================================================
(2)  540/    60F4 :                     ; ------------------------------------------------------
(2)  541/    60F4 :                     ; DATA asset locations
(2)  542/    60F4 :                     ; ------------------------------------------------------
(2)  543/    60F4 :                     
(2)  544/    60F4 :                     file_scrn1_main:
(2)  545/    60F4 : 0000 6572           		dc.l DATA_BANK0
(2)  546/    60F8 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             60FE : 494E 2E42 494E 00 
(2)  547/    6105 :                     		align 2
(2)  548/    6106 :                     
(2)  549/    6106 :                     ; ====================================================================
(2)  550/    6106 :                     ; ------------------------------------------------------
(2)  551/    6106 :                     ; Objects
(2)  552/    6106 :                     ; ------------------------------------------------------
(2)  553/    6106 :                     
(2)  554/    6106 :                     ; ; --------------------------------------------------
(2)  555/    6106 :                     ; ; Sisi
(2)  556/    6106 :                     ; ; --------------------------------------------------
(2)  557/    6106 :                     ;
(2)  558/    6106 :                     ; Object_Sisi:
(2)  559/    6106 :                     ; 		moveq	#0,d0
(2)  560/    6106 :                     ; 		move.b	obj_index(a6),d0
(2)  561/    6106 :                     ; 		add.w	d0,d0
(2)  562/    6106 :                     ; 		move.w	.list(pc,d0.w),d1
(2)  563/    6106 :                     ; 		jmp	.list(pc,d1.w)
(2)  564/    6106 :                     ; ; ----------------------------------------------
(2)  565/    6106 :                     ; .list:		dc.w .init-.list
(2)  566/    6106 :                     ; 		dc.w .main-.list
(2)  567/    6106 :                     ; ; ----------------------------------------------
(2)  568/    6106 :                     ; .init:
(2)  569/    6106 :                     ; 		move.b	#1,obj_index(a6)
(2)  570/    6106 :                     ; 		clr.w	obj_frame(a6)
(2)  571/    6106 :                     ; 		bsr	object_ResetAnim
(2)  572/    6106 :                     ;
(2)  573/    6106 :                     ; ; ----------------------------------------------
(2)  574/    6106 :                     ; .main:
(2)  575/    6106 :                     ; 		moveq	#0,d0
(2)  576/    6106 :                     ; 		move.w	(RAM_CurrPick).w,d1
(2)  577/    6106 :                     ; 		lsl.w	#3,d1
(2)  578/    6106 :                     ; 		addi.w	#$18,d0
(2)  579/    6106 :                     ; 		addi.w	#$20,d1
(2)  580/    6106 :                     ; 		move.w	d0,obj_x(a6)
(2)  581/    6106 :                     ; 		move.w	d1,obj_y(a6)
(2)  582/    6106 :                     ; .dont_link:
(2)  583/    6106 :                     ; 		lea	.anim_data(pc),a0
(2)  584/    6106 :                     ; 		bsr	object_Animate
(2)  585/    6106 :                     ; 		lea	(objMap_Sisi),a0
(2)  586/    6106 :                     ; 		move.w	obj_x(a6),d0
(2)  587/    6106 :                     ; 		move.w	obj_y(a6),d1
(2)  588/    6106 :                     ; 		move.w	#setVramST_Sisi,d2
(2)  589/    6106 :                     ; 		or.w	#$800,d2
(2)  590/    6106 :                     ; 		move.w	obj_frame(a6),d3
(2)  591/    6106 :                     ; 		bra	Video_MkSprMap
(2)  592/    6106 :                     ;
(2)  593/    6106 :                     ; ; ----------------------------------------------
(2)  594/    6106 :                     ;
(2)  595/    6106 :                     ; .anim_data:
(2)  596/    6106 :                     ; 		dc.w .anim_00-.anim_data
(2)  597/    6106 :                     ; 		dc.w .anim_00-.anim_data
(2)  598/    6106 :                     ; 		dc.w .anim_00-.anim_data
(2)  599/    6106 :                     ; 		dc.w .anim_00-.anim_data
(2)  600/    6106 :                     ; .anim_00:
(2)  601/    6106 :                     ; 		dc.w 8
(2)  602/    6106 :                     ; 		dc.w 0,1,2,1
(2)  603/    6106 :                     ; 		dc.w -2
(2)  604/    6106 :                     ; 		align 2
(2)  605/    6106 :                     
(2)  606/    6106 :                     ; ====================================================================
(2)  607/    6106 :                     ; ------------------------------------------------------
(2)  608/    6106 :                     ; Subroutines
(2)  609/    6106 :                     ; ------------------------------------------------------
(2)  610/    6106 :                     
(2)  611/    6106 :                     ; ====================================================================
(2)  612/    6106 :                     ; ------------------------------------------------------
(2)  613/    6106 :                     ; Includes for this screen
(2)  614/    6106 :                     ; ------------------------------------------------------
(2)  615/    6106 :                     
(2)  616/    6106 :                     ; ====================================================================
(2)  617/    6106 :                     ; ------------------------------------------------------
(2)  618/    6106 :                     ; Custom VBlank
(2)  619/    6106 :                     ; ------------------------------------------------------
(2)  620/    6106 :                     
(2)  621/    6106 :                     ; ------------------------------------------------------
(2)  622/    6106 :                     ; Custom HBlank
(2)  623/    6106 :                     ; ------------------------------------------------------
(2)  624/    6106 :                     
(2)  625/    6106 :                     ; ====================================================================
(2)  626/    6106 :                     ; ------------------------------------------------------
(2)  627/    6106 :                     ; Small data section
(2)  628/    6106 :                     ; ------------------------------------------------------
(2)  629/    6106 :                     
(2)  630/    6106 : 2D2D 3E00           str_Cursor:	dc.b "-->",0
(2)  631/    610A :                     		align 2
(2)  632/    610A : 2020 2000           str_CursorDel:	dc.b "   ",0
(2)  633/    610E :                     		align 2
(2)  634/    610E :                     
(2)  635/    610E :                     str_TesterTitle:
(2)  636/    610E : 4745 4D41 2053      		dc.b "GEMA Sound driver",0
             6114 : 6F75 6E64 2064 
             611A : 7269 7665 7200    
(2)  637/    6120 :                     		align 2
(2)  638/    6120 :                     str_TesterInfo:
(2)  639/    6120 : 2020 2020 6765      		dc.b "    gemaTest          Slot Seq  Blk",$0A
             6126 : 6D61 5465 7374 
             612C : 2020 2020 2020 
             6132 : 2020 2020 536C 
             6138 : 6F74 2053 6571 
             613E : 2020 426C 6B0A    
(2)  640/    6144 : 2020 2020 6765      		dc.b "    gemaPlaySeq",$0A
             614A : 6D61 506C 6179 
             6150 : 5365 710A          
(2)  641/    6154 : 2020 2020 6765      		dc.b "    gemaStopSeq",$0A
             615A : 6D61 5374 6F70 
             6160 : 5365 710A          
(2)  642/    6164 : 2020 2020 6765      		dc.b "    gemaFadeSeq",$0A
             616A : 6D61 4661 6465 
             6170 : 5365 710A          
(2)  643/    6174 : 2020 2020 6765      		dc.b "    gemaSetSeqVol",$0A
             617A : 6D61 5365 7453 
             6180 : 6571 566F 6C0A    
(2)  644/    6186 : 2020 2020 6765      		dc.b "    gemaStopAll       Beat",$0A
             618C : 6D61 5374 6F70 
             6192 : 416C 6C20 2020 
             6198 : 2020 2020 4265 
             619E : 6174 0A          
(2)  645/    61A1 : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
             61A7 : 6D61 5365 7442 
             61AD : 6561 7473 0A       
(2)  646/    61B2 : 2020 2020 4558      		dc.b "    EXIT to Screen 00",$0A
             61B8 : 4954 2074 6F20 
             61BE : 5363 7265 656E 
             61C4 : 2030 300A          
(2)  647/    61C8 : 00                  		dc.b 0
(2)  648/    61C9 :                     		align 2
(2)  649/    61CA :                     str_VmInfo:
(2)  650/    61CA : 5053 4731 2030      		dc.b "PSG1 000         FM1 000",$0A
             61D0 : 3030 2020 2020 
             61D6 : 2020 2020 2046 
             61DC : 4D31 2030 3030 0A 
(2)  651/    61E3 : 5053 4732 2030      		dc.b "PSG2 000         FM2 000",$0A
             61E9 : 3030 2020 2020 
             61EF : 2020 2020 2046 
             61F5 : 4D32 2030 3030 0A 
(2)  652/    61FC : 5053 4733 2030      		dc.b "PSG3 000         FM4 000",$0A
             6202 : 3030 2020 2020 
             6208 : 2020 2020 2046 
             620E : 4D34 2030 3030 0A 
(2)  653/    6215 : 5053 474E 2030      		dc.b "PSGN 000         FM5 000",$0A
             621B : 3030 2020 2020 
             6221 : 2020 2020 2046 
             6227 : 4D35 2030 3030 0A 
(2)  654/    622E : 2020 2020 2020      		dc.b "                 FM3 000",$0A
             6234 : 2020 2020 2020 
             623A : 2020 2020 2046 
             6240 : 4D33 2030 3030 0A 
(2)  655/    6247 : 2020 2020 2020      		dc.b "                 FM6 000",$0A
             624D : 2020 2020 2020 
             6253 : 2020 2020 2046 
             6259 : 4D36 2030 3030 0A 
(2)  656/    6260 : 0A                  		dc.b $0A
(2)  657/    6261 : 5043 4D31 2030      		dc.b "PCM1 000        PWM1 000",$0A
             6267 : 3030 2020 2020 
             626D : 2020 2020 5057 
             6273 : 4D31 2030 3030 0A 
(2)  658/    627A : 5043 4D32 2030      		dc.b "PCM2 000        PWM2 000",$0A
             6280 : 3030 2020 2020 
             6286 : 2020 2020 5057 
             628C : 4D32 2030 3030 0A 
(2)  659/    6293 : 5043 4D33 2030      		dc.b "PCM3 000        PWM3 000",$0A
             6299 : 3030 2020 2020 
             629F : 2020 2020 5057 
             62A5 : 4D33 2030 3030 0A 
(2)  660/    62AC : 5043 4D34 2030      		dc.b "PCM4 000        PWM4 000",$0A
             62B2 : 3030 2020 2020 
             62B8 : 2020 2020 5057 
             62BE : 4D34 2030 3030 0A 
(2)  661/    62C5 : 5043 4D35 2030      		dc.b "PCM5 000        PWM5 000",$0A
             62CB : 3030 2020 2020 
             62D1 : 2020 2020 5057 
             62D7 : 4D35 2030 3030 0A 
(2)  662/    62DE : 5043 4D36 2030      		dc.b "PCM6 000        PWM6 000",$0A
             62E4 : 3030 2020 2020 
             62EA : 2020 2020 5057 
             62F0 : 4D36 2030 3030 0A 
(2)  663/    62F7 : 5043 4D37 2030      		dc.b "PCM7 000        PWM7 000",$0A
             62FD : 3030 2020 2020 
             6303 : 2020 2020 5057 
             6309 : 4D37 2030 3030 0A 
(2)  664/    6310 : 5043 4D38 2030      		dc.b "PCM8 000";PWM8 000 00 00",$0A
             6316 : 3030             
(2)  665/    6318 : 00                  		dc.b 0
(2)  666/    6319 :                     		align 2
(2)  667/    631A :                     
(2)  668/    631A : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  669/    631E : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
             6324 : 3000 442D 3000 
             632A : 4423 3000 452D 
             6330 : 3000 462D 3000 
             6336 : 4623 3000 472D 
             633C : 3000 4723 3000 
             6342 : 412D 3000 4123 
             6348 : 3000 422D 3000    
(2)  670/    634E : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
             6354 : 3100 442D 3100 
             635A : 4423 3100 452D 
             6360 : 3100 462D 3100 
             6366 : 4623 3100 472D 
             636C : 3100 4723 3100 
             6372 : 412D 3100 4123 
             6378 : 3100 422D 3100    
(2)  671/    637E : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
             6384 : 3200 442D 3200 
             638A : 4423 3200 452D 
             6390 : 3200 462D 3200 
             6396 : 4623 3200 472D 
             639C : 3200 4723 3200 
             63A2 : 412D 3200 4123 
             63A8 : 3200 422D 3200    
(2)  672/    63AE : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
             63B4 : 3300 442D 3300 
             63BA : 4423 3300 452D 
             63C0 : 3300 462D 3300 
             63C6 : 4623 3300 472D 
             63CC : 3300 4723 3300 
             63D2 : 412D 3300 4123 
             63D8 : 3300 422D 3300    
(2)  673/    63DE : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
             63E4 : 3400 442D 3400 
             63EA : 4423 3400 452D 
             63F0 : 3400 462D 3400 
             63F6 : 4623 3400 472D 
             63FC : 3400 4723 3400 
             6402 : 412D 3400 4123 
             6408 : 3400 422D 3400    
(2)  674/    640E : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
             6414 : 3500 442D 3500 
             641A : 4423 3500 452D 
             6420 : 3500 462D 3500 
             6426 : 4623 3500 472D 
             642C : 3500 4723 3500 
             6432 : 412D 3500 4123 
             6438 : 3500 422D 3500    
(2)  675/    643E : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
             6444 : 3600 442D 3600 
             644A : 4423 3600 452D 
             6450 : 3600 462D 3600 
             6456 : 4623 3600 472D 
             645C : 3600 4723 3600 
             6462 : 412D 3600 4123 
             6468 : 3600 422D 3600    
(2)  676/    646E : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
             6474 : 3700 442D 3700 
             647A : 4423 3700 452D 
             6480 : 3700 462D 3700 
             6486 : 4623 3700 472D 
             648C : 3700 4723 3700 
             6492 : 412D 3700 4123 
             6498 : 3700 422D 3700    
(2)  677/    649E : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
             64A4 : 3800 442D 3800 
             64AA : 4423 3800 452D 
             64B0 : 3800 462D 3800 
             64B6 : 4623 3800 472D 
             64BC : 3800 4723 3800 
             64C2 : 412D 3800 4123 
             64C8 : 3800 422D 3800    
(2)  678/    64CE : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
             64D4 : 3900 442D 3900 
             64DA : 4423 3900 452D 
             64E0 : 3900 462D 3900 
             64E6 : 4623 3900 472D 
             64EC : 3900 4723 3900 
             64F2 : 412D 3900 4123 
             64F8 : 3900 422D 3900    
(2)  679/    64FE : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  680/    6502 : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
             6508 : 2000 442D 2000 
             650E : 4423 2000 452D 
             6514 : 2000 462D 2000 
             651A : 4623 2000 472D 
             6520 : 2000 4723 2000 
             6526 : 412D 2000 4123 
             652C : 2000 422D 2000    
(2)  681/    6532 : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
             6538 : 3300 3400 3500 
             653E : 3600 3700 3800 
             6544 : 3900             
(2)  682/    6546 :                     
(2)  683/    6546 :                     str_ShowVars:
(2)  684/    6546 : 81FF B86C           		dc.l pstr_mem(1,RAM_GemaArg0)
(2)  685/    654A : 20                  		dc.b " "
(2)  686/    654B : 81FF B86E           		dc.l pstr_mem(1,RAM_GemaArg1)
(2)  687/    654F : 20                  		dc.b " "
(2)  688/    6550 : 81FF B870           		dc.l pstr_mem(1,RAM_GemaArg2)
(2)  689/    6554 : 0A0A                		dc.b $0A,$0A
(2)  690/    6556 : 81FF B872           		dc.l pstr_mem(1,RAM_GemaArg3)
(2)  691/    655A : 20                  		dc.b " "
(2)  692/    655B : 81FF B874           		dc.l pstr_mem(1,RAM_GemaArg4)
(2)  693/    655F : 20                  		dc.b " "
(2)  694/    6560 : 81FF B876           		dc.l pstr_mem(1,RAM_GemaArg5)
(2)  695/    6564 : 0A0A 0A             		dc.b $0A,$0A,$0A
(2)  696/    6567 : 81FF B878           		dc.l pstr_mem(1,RAM_GemaArg6)
(2)  697/    656B : 00                  		dc.b 0
(2)  698/    656C :                     		align 2
(2)  699/    656C :                     str_Info:
(2)  700/    656C : 83FF D7D8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  701/    6570 : 00                  		dc.b 0
(2)  702/    6571 :                     		align 2
(2)  703/    6572 :                     
(1)   20/    6572 :                     mcscrn_e:
(1)   20/    6572 :                     ; Md_Screen00_e:
(1)   20/    6572 : =$6572               MD_SCREEN07_E label *
(1)   20/    6572 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   21/    6572 :                     
     377/    6572 :                     
     378/    6572 :                     ; ====================================================================
     379/    6572 :                     ; ----------------------------------------------------------------
     380/    6572 :                     ; DATA BLOCK (banks)
     381/    6572 :                     ; ----------------------------------------------------------------
     382/    6572 :                     
     383/    6572 :                     		include "game/incl_data.asm"
(1)    1/    6572 :                     ; ===========================================================================
(1)    2/    6572 :                     ; ----------------------------------------------------------------
(1)    3/    6572 :                     ; 68K DATA BANKS
(1)    4/    6572 :                     ;
(1)    5/    6572 :                     ; Size limits:
(1)    6/    6572 :                     ;  $40000 for SegaCD's Word-RAM **compatible to all**
(1)    7/    6572 :                     ;  $80000 for Sega-Mapper(SSF2) bank
(1)    8/    6572 :                     ; $100000 for 32X Cartridge
(1)    9/    6572 :                     ; All 4MB for Genesis/Pico
(1)   10/    6572 :                     ;
(1)   11/    6572 :                     ; SCD/CD32:
(1)   12/    6572 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/    6572 :                     ;
(1)   14/    6572 :                     ; MACRO Usage:
(1)   15/    6572 :                     ;	data_dset LABEL_START
(1)   16/    6572 :                     ;	; your data
(1)   17/    6572 :                     ;	data_dend LABEL_END
(1)   18/    6572 :                     ; ----------------------------------------------------------------
(1)   19/    6572 :                     ; - For including VDP graphics:
(1)   20/    6572 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/    6572 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/    6572 :                     ;
(1)   23/    6572 :                     ; - For the SVDP graphics:
(1)   24/    6572 :                     ;
(1)   25/    6572 :                     ; 	mars_VramStart Label_test			; Start label
(1)   26/    6572 :                     ; example_0:
(1)   27/    6572 :                     ; 	include "your_svdp_graphics.bin"
(1)   28/    6572 :                     ; 	align 4						; Don't forget align by 4
(1)   29/    6572 :                     ; example_1:
(1)   30/    6572 :                     ; 	include "more_svdp.bin"
(1)   31/    6572 :                     ;	align 4
(1)   32/    6572 :                     ;	mars_VramEnd Label_end				; End label
(1)   33/    6572 :                     ; ----------------------------------------------------------------
(1)   34/    6572 :                     
(1)   35/    6572 :                     ; --------------------------------------------------------
(1)   36/    6572 :                     ; EXAMPLE INCLUDE
(1)   37/    6572 :                     ; --------------------------------------------------------
(1)   38/    6572 :                     ; 	data_dset DATA_BANKEXMPL
(1)   39/    6572 :                     ; 	; ------------------------------------------------
(1)   40/    6572 :                     ; 		include "your_data.asm"		; GEMA: Track data
(1)   41/    6572 :                     ; 		include "etc_stuff.asm"
(1)   42/    6572 :                     ; 	; ------------------------------------------------
(1)   43/    6572 :                     ; 	data_dend DATA_BANKEXMPL_e
(1)   44/    6572 :                     
(1)   45/    6572 :                     ; ============================================================
(1)   46/    6572 :                     ; --------------------------------------------------------
(1)   47/    6572 :                     ; MAIN bank
(1)   48/    6572 :                     ; --------------------------------------------------------
(1)   49/    6572 :                     
(1)   50/    6572 : (MACRO)              	data_dset DATA_BANK0
(1)   50/    6572 :                     ; MCD_DBANK0:
(1)   50/    6572 : =$6572               DATA_BANK0 label *
(1)   50/    6572 : =$6572               GLBL_MDATA_ST := *
(1)   51/    6572 :                     	; ------------------------------------------------
(1)   52/    6572 :                     		include "sound/tracks.asm"		; GEMA: Track data
(2)    1/    6572 :                     ; ===========================================================================
(2)    2/    6572 :                     ; -------------------------------------------------------------------
(2)    3/    6572 :                     ; GEMA/Nikona DEFAULT sound-track data
(2)    4/    6572 :                     ;
(2)    5/    6572 :                     ; Soundtrack data can be stored on ROM, RAM* and Word-RAM**
(2)    6/    6572 :                     ;
(2)    7/    6572 :                     ;  * Requires calling Sound_Update manually to send the data
(2)    8/    6572 :                     ;    as a workaround for the Z80 bankswitch limitation.
(2)    9/    6572 :                     ; ** Make sure the Word-RAM permission is set to MAIN-CPU.
(2)   10/    6572 :                     ;
(2)   11/    6572 :                     ; This tracklist is stored on:
(2)   12/    6572 :                     ; ROM      on Genesis/32X($880000)
(2)   13/    6572 :                     ; WORD-RAM on SegaCD/CD32X
(2)   14/    6572 :                     ;
(2)   15/    6572 :                     ; This data will be unavilable if using SegaCD's stamps, relocate
(2)   16/    6572 :                     ; the entire data manually.
(2)   17/    6572 :                     ; -------------------------------------------------------------------
(2)   18/    6572 :                     
(2)   19/    6572 :                     ; ------------------------------------------------------------
(2)   20/    6572 :                     ; Setup:
(2)   21/    6572 :                     ; 	gemaList LABEL_TRACKLIST
(2)   22/    6572 :                     ; 	gemaTrk option,ticks,location
(2)   23/    6572 :                     ;	; more tracks here
(2)   24/    6572 :                     ;
(2)   25/    6572 :                     ; option: 0 - Don't use global subbeats
(2)   26/    6572 :                     ;         1 - Use global subbeats (SET externally)
(2)   27/    6572 :                     ; ticks:  Ticks number on a fixed tempo:
(2)   28/    6572 :                     ;         150 on NTSC or 125 on PAL
(2)   29/    6572 :                     ;         To change the tempo set "option" to 1,
(2)   30/    6572 :                     ;         and set your sub-beats externally.
(2)   31/    6572 :                     ;
(2)   32/    6572 :                     ; To change your "master list" use:
(2)   33/    6572 :                     ; 	move.l	#Gema_DefaultList,d0
(2)   34/    6572 :                     ; 	bsr	gemaSetMasterList
(2)   35/    6572 :                     ; This will be needed if using the SegaCD's Stamps.
(2)   36/    6572 :                     ;
(2)   37/    6572 :                     ; To use sub-beats:
(2)   38/    6572 :                     ; 	move.w	#beats_num,d0
(2)   39/    6572 :                     ; 	bsr	gemaSetBeats
(2)   40/    6572 :                     ; 	move.w  #slot_id,d0
(2)   41/    6572 :                     ; 	move.w	#sequence_id,d1
(2)   42/    6572 :                     ; 	move.w  #start_block,d2
(2)   43/    6572 :                     ;	bsr	gemaPlayTrack
(2)   44/    6572 :                     ; * This change will affect ALL tracks with the same
(2)   45/    6572 :                     ;   sub-beats flag enabled *
(2)   46/    6572 :                     ; ------------------------------------------------------------
(2)   47/    6572 :                     
(2)   48/    6572 : (MACRO)              		gemaList MainGemaSeqList
(2)   48/    6572 :                             align 2
(2)   48/    6572 : =$6572               MAINGEMASEQLIST label *
(2)   48/    6572 : =$6572               GLBL_GEMABASE := *
(2)   49/    6572 : (MACRO)              		gemaTrk 0,5,gtrk_Test
(2)   49/    6572 : 0500 6596                   dc.l ((0&$01)<<31)|((5&$7F)<<24)|(GTRK_TEST&$FFFFFF)
(2)   50/    6576 : (MACRO)              		gemaTrk 0,3,gtrk_Gigalo
(2)   50/    6576 : 0300 67E4                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_GIGALO&$FFFFFF)
(2)   51/    657A : (MACRO)              		gemaTrk 0,3,gtrk_Temple
(2)   51/    657A : 0300 877B                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_TEMPLE&$FFFFFF)
(2)   52/    657E : (MACRO)              		gemaTrk 0,3,gtrk_Brinstr
(2)   52/    657E : 0300 9C99                   dc.l ((0&$01)<<31)|((3&$7F)<<24)|(GTRK_BRINSTR&$FFFFFF)
(2)   53/    6582 :                     
(2)   54/    6582 : (MACRO)              		gemaTrk 1,3,gtrk_wegot
(2)   54/    6582 : 8300 A4DA                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_WEGOT&$FFFFFF)
(2)   55/    6586 : (MACRO)              		gemaTrk 1,5,gtrk_MOVEME
(2)   55/    6586 : 8500 C170                   dc.l ((1&$01)<<31)|((5&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   56/    658A : (MACRO)              		gemaTrk 0,7,gtrk_MOVEME
(2)   56/    658A : 0700 C170                   dc.l ((0&$01)<<31)|((7&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   57/    658E : (MACRO)              		gemaTrk 0,7,gtrk_MOVEME
(2)   57/    658E : 0700 C170                   dc.l ((0&$01)<<31)|((7&$7F)<<24)|(GTRK_MOVEME&$FFFFFF)
(2)   58/    6592 :                     
(2)   59/    6592 : (MACRO)              		gemaTrk 1,6,gtrk_sauron
(2)   59/    6592 : 8600 D0E0                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_SAURON&$FFFFFF)
(2)   60/    6596 :                     ; 		gemaTrk 1,5,gtrk_NadieMd
(2)   61/    6596 :                     ; 		gemaTrk 1,5,gtrk_NadieCd
(2)   62/    6596 :                     ; 		gemaTrk 1,5,gtrk_NadieMars
(2)   63/    6596 :                     
(2)   64/    6596 :                     ; ----------------------------------------------------
(2)   65/    6596 :                     
(2)   66/    6596 :                     gtrk_Test:
(2)   67/    6596 : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   67/    6596 : 0004                        dc.w 4
(2)   67/    6598 : 0000 65A4                   dc.l .BLK
(2)   67/    659C : 0000 65AC                   dc.l .PAT
(2)   67/    65A0 : 0000 67AC                   dc.l .INS
(2)   68/    65A4 :                     .blk:		binclude "sound/tracks/test_blk.bin"
(2)   69/    65AC :                     .pat:		binclude "sound/tracks/test_patt.bin"
(2)   70/    67AC :                     .ins:
(2)   71/    67AC : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   71/    67AC : 8000 0000                   dc.b $80,0,$00,$00
(2)   71/    67B0 : 0000 0400                   dc.b $00,$00,$04,0
(2)   72/    67B4 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$04,0,%111
(2)   72/    67B4 : 9700 0000                   dc.b $90|%111,0,$00,$00
(2)   72/    67B8 : 0000 0400                   dc.b $00,$00,$04,0
(2)   73/    67BC : (MACRO)              		gInsFm 0,FmIns_Trumpet_1
(2)   73/    67BC : A000 00E1                   dc.b $A0,0,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   73/    67C0 : BE00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   74/    67C4 : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)   74/    67C4 : B000 00E0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   74/    67C8 : E600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   75/    67CC : (MACRO)              		gInsDac 0,DacIns_TEST,0
(2)   75/    67CC : C000 00E2                   dc.b $C0|0,0,((DACINS_TEST>>16)&$FF),((DACINS_TEST>>8)&$FF)
(2)   75/    67D0 : 9E00 0000                   dc.b DACINS_TEST&$FF,0,0,0
(2)   76/    67D4 : (MACRO)              		gInsPcm 0,PcmIns_TEST,0
(2)   76/    67D4 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/    67D8 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    67DC : (MACRO)              		gInsPwm 0,PwmIns_TEST,%10
(2)   77/    67DC : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    67E0 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   78/    67E4 :                     
(2)   79/    67E4 :                     ; ----------------------------------------------------
(2)   80/    67E4 :                     
(2)   81/    67E4 :                     gtrk_Gigalo:
(2)   82/    67E4 : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   82/    67E4 : 0004                        dc.w 4
(2)   82/    67E6 : 0000 67F2                   dc.l .BLK
(2)   82/    67EA : 0000 67FF                   dc.l .PAT
(2)   82/    67EE : 0000 875B                   dc.l .INS
(2)   83/    67F2 :                     .blk:		binclude "sound/tracks/gigalo_blk.bin"
(2)   84/    67FF :                     .pat:		binclude "sound/tracks/gigalo_patt.bin"
(2)   85/    875B :                     .ins:
(2)   86/    875B : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$09,0
(2)   86/    875B : 8000 0000                   dc.b $80,0,$00,$00
(2)   86/    875F : 0000 0900                   dc.b $00,$00,$09,0
(2)   87/    8763 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%100
(2)   87/    8763 : 9400 0000                   dc.b $90|%100,0,$00,$00
(2)   87/    8767 : 0000 0900                   dc.b $00,$00,$09,0
(2)   88/    876B : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%101
(2)   88/    876B : 9500 0000                   dc.b $90|%101,0,$00,$00
(2)   88/    876F : 0000 0900                   dc.b $00,$00,$09,0
(2)   89/    8773 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$09,0,%110
(2)   89/    8773 : 9600 0000                   dc.b $90|%110,0,$00,$00
(2)   89/    8777 : 0000 0900                   dc.b $00,$00,$09,0
(2)   90/    877B :                     
(2)   91/    877B :                     ; ----------------------------------------------------
(2)   92/    877B :                     
(2)   93/    877B :                     gtrk_Temple:
(2)   94/    877B : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)   94/    877B : 0004                        dc.w 4
(2)   94/    877D : 0000 8789                   dc.l .BLK
(2)   94/    8781 : 0000 879B                   dc.l .PAT
(2)   94/    8785 : 0000 9C81                   dc.l .INS
(2)   95/    8789 :                     .blk:		binclude "sound/tracks/temple_blk.bin"
(2)   96/    879B :                     .pat:		binclude "sound/tracks/temple_patt.bin"
(2)   97/    9C81 :                     .ins:
(2)   98/    9C81 : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   98/    9C81 : 8000 0000                   dc.b $80,0,$00,$00
(2)   98/    9C85 : 0000 0400                   dc.b $00,$00,$04,0
(2)   99/    9C89 : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$04,0
(2)   99/    9C89 : 8000 0000                   dc.b $80,0,$00,$00
(2)   99/    9C8D : 0000 0400                   dc.b $00,$00,$04,0
(2)  100/    9C91 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$18,0,%101
(2)  100/    9C91 : 9500 0000                   dc.b $90|%101,0,$00,$00
(2)  100/    9C95 : 0000 1800                   dc.b $00,$00,$18,0
(2)  101/    9C99 :                     
(2)  102/    9C99 :                     ; ----------------------------------------------------
(2)  103/    9C99 :                     
(2)  104/    9C99 :                     gtrk_Brinstr:
(2)  105/    9C99 : (MACRO)              		gemaHead .blk,.pat,.ins,4
(2)  105/    9C99 : 0004                        dc.w 4
(2)  105/    9C9B : 0000 9CA7                   dc.l .BLK
(2)  105/    9C9F : 0000 9CAF                   dc.l .PAT
(2)  105/    9CA3 : 0000 A4CA                   dc.l .INS
(2)  106/    9CA7 :                     .blk:		binclude "sound/tracks/brinstr_blk.bin"
(2)  107/    9CAF :                     .pat:		binclude "sound/tracks/brinstr_patt.bin"
(2)  108/    A4CA :                     .ins:
(2)  109/    A4CA : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$02,0
(2)  109/    A4CA : 8000 0000                   dc.b $80,0,$00,$00
(2)  109/    A4CE : 0000 0200                   dc.b $00,$00,$02,0
(2)  110/    A4D2 : (MACRO)              		gInsPsgN -12,$00,$00,$00,$00,$01,0,%011
(2)  110/    A4D2 : 93F4 0000                   dc.b $90|%011,-12,$00,$00
(2)  110/    A4D6 : 0000 0100                   dc.b $00,$00,$01,0
(2)  111/    A4DA :                     
(2)  112/    A4DA :                     ; ----------------------------------------------------
(2)  113/    A4DA :                     
(2)  114/    A4DA :                     gtrk_wegot:
(2)  115/    A4DA : (MACRO)              		gemaHead .blk,.pat,.ins,8
(2)  115/    A4DA : 0008                        dc.w 8
(2)  115/    A4DC : 0000 A4E8                   dc.l .BLK
(2)  115/    A4E0 : 0000 A4FE                   dc.l .PAT
(2)  115/    A4E4 : 0000 C120                   dc.l .INS
(2)  116/    A4E8 :                     .blk:		binclude "sound/tracks/wegot_blk.bin"
(2)  117/    A4FD :                     		align 2
(2)  118/    A4FE :                     .pat:		binclude "sound/tracks/wegot_patt.bin"
(2)  119/    C11F :                     		align 2
(2)  120/    C120 :                     .ins:
(2)  121/    C120 : (MACRO)              		gInsFm 0,FmIns_PSynth_plus
(2)  121/    C120 : A000 00E2                   dc.b $A0,0,((FMINS_PSYNTH_PLUS>>16)&$FF),((FMINS_PSYNTH_PLUS>>8)&$FF)
(2)  121/    C124 : 7E00 0000                   dc.b FMINS_PSYNTH_PLUS&$FF,$00,$00,$00
(2)  122/    C128 : (MACRO)              		gInsFm 0,FmIns_Bass_groove_2
(2)  122/    C128 : A000 00E2                   dc.b $A0,0,((FMINS_BASS_GROOVE_2>>16)&$FF),((FMINS_BASS_GROOVE_2>>8)&$FF)
(2)  122/    C12C : 5E00 0000                   dc.b FMINS_BASS_GROOVE_2&$FF,$00,$00,$00
(2)  123/    C130 : (MACRO)              		gInsDac 0,DacIns_wegot_kick,0
(2)  123/    C130 : C000 0231                   dc.b $C0|0,0,((DACINS_WEGOT_KICK>>16)&$FF),((DACINS_WEGOT_KICK>>8)&$FF)
(2)  123/    C134 : 9600 0000                   dc.b DACINS_WEGOT_KICK&$FF,0,0,0
(2)  124/    C138 : (MACRO)              		gInsFm 0,FmIns_Bass_club
(2)  124/    C138 : A000 00E2                   dc.b $A0,0,((FMINS_BASS_CLUB>>16)&$FF),((FMINS_BASS_CLUB>>8)&$FF)
(2)  124/    C13C : 3E00 0000                   dc.b FMINS_BASS_CLUB&$FF,$00,$00,$00
(2)  125/    C140 : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)  125/    C140 : B000 00E0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)  125/    C144 : E600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)  126/    C148 : (MACRO)              		gInsPsg 0,$20,$40,$10,$01,$04,0
(2)  126/    C148 : 8000 2040                   dc.b $80,0,$20,$40
(2)  126/    C14C : 1001 0400                   dc.b $10,$01,$04,0
(2)  127/    C150 : (MACRO)              		gInsDac 0,DacIns_wegot_crash,0
(2)  127/    C150 : C000 0239                   dc.b $C0|0,0,((DACINS_WEGOT_CRASH>>16)&$FF),((DACINS_WEGOT_CRASH>>8)&$FF)
(2)  127/    C154 : 1000 0000                   dc.b DACINS_WEGOT_CRASH&$FF,0,0,0
(2)  128/    C158 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$10,0,%100
(2)  128/    C158 : 9400 0000                   dc.b $90|%100,0,$00,$00
(2)  128/    C15C : 0000 1000                   dc.b $00,$00,$10,0
(2)  129/    C160 : (MACRO)              		gInsNull
(2)  129/    C160 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  129/    C164 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/    C168 : (MACRO)              		gInsNull
(2)  130/    C168 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/    C16C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  131/    C170 :                     
(2)  132/    C170 :                     ; ----------------------------------------------------
(2)  133/    C170 :                     
(2)  134/    C170 :                     gtrk_MOVEME:
(2)  135/    C170 : (MACRO)              		gemaHead .blk,.pat,.ins,11
(2)  135/    C170 : 000B                        dc.w 11
(2)  135/    C172 : 0000 C17E                   dc.l .BLK
(2)  135/    C176 : 0000 C196                   dc.l .PAT
(2)  135/    C17A : 0000 D078                   dc.l .INS
(2)  136/    C17E :                     .blk:
(2)  137/    C17E :                     		binclude "sound/tracks/moveme_blk.bin"
(2)  138/    C195 :                     		align 2
(2)  139/    C196 :                     .pat:
(2)  140/    C196 :                     		binclude "sound/tracks/moveme_patt.bin"
(2)  141/    D077 :                     		align 2
(2)  142/    D078 :                     .ins:
(2)  143/    D078 : (MACRO)              		gInsPcm 0,PcmIns_MoveMe_Hit,%10
(2)  143/    D078 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  143/    D07C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  144/    D080 : (MACRO)              		gInsFm 0,FmIns_Bass_Duck
(2)  144/    D080 : A000 00E1                   dc.b $A0,0,((FMINS_BASS_DUCK>>16)&$FF),((FMINS_BASS_DUCK>>8)&$FF)
(2)  144/    D084 : DE00 0000                   dc.b FMINS_BASS_DUCK&$FF,$00,$00,$00
(2)  145/    D088 : (MACRO)              		gInsPcm 0,PcmIns_MoveMe_Brass,%11
(2)  145/    D088 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  145/    D08C : 0000 0000                   dc.b $00,$00,$00,$00
(2)  146/    D090 : (MACRO)              		gInsFm 0,FmIns_ClosedHat
(2)  146/    D090 : A000 00E1                   dc.b $A0,0,((FMINS_CLOSEDHAT>>16)&$FF),((FMINS_CLOSEDHAT>>8)&$FF)
(2)  146/    D094 : FE00 0000                   dc.b FMINS_CLOSEDHAT&$FF,$00,$00,$00
(2)  147/    D098 : (MACRO)              		gInsPsgN 0,$00,$00,$00,$00,$04,0,%110
(2)  147/    D098 : 9600 0000                   dc.b $90|%110,0,$00,$00
(2)  147/    D09C : 0000 0400                   dc.b $00,$00,$04,0
(2)  148/    D0A0 : (MACRO)              		gInsFm -12,FmIns_HBeat_tom
(2)  148/    D0A0 : A0F4 00E1                   dc.b $A0,-12,((FMINS_HBEAT_TOM>>16)&$FF),((FMINS_HBEAT_TOM>>8)&$FF)
(2)  148/    D0A4 : 9E00 0000                   dc.b FMINS_HBEAT_TOM&$FF,$00,$00,$00
(2)  149/    D0A8 : (MACRO)              		gInsPcm 0,PcmIns_Snare_moveme,%10
(2)  149/    D0A8 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  149/    D0AC : 0000 0000                   dc.b $00,$00,$00,$00
(2)  150/    D0B0 : (MACRO)              		gInsPcm 0,PcmIns_Kick,%10
(2)  150/    D0B0 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  150/    D0B4 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  151/    D0B8 : (MACRO)              		gInsFm -12,FmIns_Trumpet_carnival
(2)  151/    D0B8 : A0F4 00E2                   dc.b $A0,-12,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(2)  151/    D0BC : 1E00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(2)  152/    D0C0 : (MACRO)              		gInsPsg 0,$20,$20,$10,$01,$08,0
(2)  152/    D0C0 : 8000 2020                   dc.b $80,0,$20,$20
(2)  152/    D0C4 : 1001 0800                   dc.b $10,$01,$08,0
(2)  153/    D0C8 : (MACRO)              		gInsFm3 0,FmIns_Sp_OpenHat
(2)  153/    D0C8 : B000 00E0                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)  153/    D0CC : E600 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)  154/    D0D0 : (MACRO)              		gInsPsg +12,$20,$10,$10,$0C,$0C,0
(2)  154/    D0D0 : 800C 2010                   dc.b $80,+12,$20,$10
(2)  154/    D0D4 : 100C 0C00                   dc.b $10,$0C,$0C,0
(2)  155/    D0D8 : (MACRO)              		gInsPsg 0,$00,$00,$00,$00,$06,0
(2)  155/    D0D8 : 8000 0000                   dc.b $80,0,$00,$00
(2)  155/    D0DC : 0000 0600                   dc.b $00,$00,$06,0
(2)  156/    D0E0 :                     
(2)  157/    D0E0 :                     ; ----------------------------------------------------
(2)  158/    D0E0 :                     
(2)  159/    D0E0 :                     gtrk_sauron:
(2)  160/    D0E0 : (MACRO)              		gemaHead .blk,.pat,.ins,5
(2)  160/    D0E0 : 0005                        dc.w 5
(2)  160/    D0E2 : 0000 D0EE                   dc.l .BLK
(2)  160/    D0E6 : 0000 D114                   dc.l .PAT
(2)  160/    D0EA : 0000 E086                   dc.l .INS
(2)  161/    D0EE :                     .blk:
(2)  162/    D0EE :                     		binclude "sound/tracks/sauron_blk.bin"
(2)  163/    D113 :                     		align 2
(2)  164/    D114 :                     .pat:
(2)  165/    D114 :                     		binclude "sound/tracks/sauron_patt.bin"
(2)  166/    E085 :                     		align 2
(2)  167/    E086 :                     .ins:
(2)  168/    E086 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_01,0
(2)  168/    E086 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  168/    E08A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  169/    E08E : (MACRO)              		gInsPcm -12,PcmIns_Sauron_02,0
(2)  169/    E08E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  169/    E092 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  170/    E096 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_03,0
(2)  170/    E096 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  170/    E09A : 0000 0000                   dc.b $00,$00,$00,$00
(2)  171/    E09E : (MACRO)              		gInsPcm -12,PcmIns_Sauron_04,0
(2)  171/    E09E : 0000 0000                   dc.b $00,$00,$00,$00
(2)  171/    E0A2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  172/    E0A6 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_05,1
(2)  172/    E0A6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  172/    E0AA : 0000 0000                   dc.b $00,$00,$00,$00
(2)  173/    E0AE : (MACRO)              		gInsPcm -12,PcmIns_Sauron_06,0
(2)  173/    E0AE : 0000 0000                   dc.b $00,$00,$00,$00
(2)  173/    E0B2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  174/    E0B6 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_07,0
(2)  174/    E0B6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  174/    E0BA : 0000 0000                   dc.b $00,$00,$00,$00
(2)  175/    E0BE : (MACRO)              		gInsPcm -12,PcmIns_Sauron_08,0
(2)  175/    E0BE : 0000 0000                   dc.b $00,$00,$00,$00
(2)  175/    E0C2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  176/    E0C6 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_09,0
(2)  176/    E0C6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  176/    E0CA : 0000 0000                   dc.b $00,$00,$00,$00
(2)  177/    E0CE : (MACRO)              		gInsPcm -12,PcmIns_Sauron_10,0
(2)  177/    E0CE : 0000 0000                   dc.b $00,$00,$00,$00
(2)  177/    E0D2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  178/    E0D6 : (MACRO)              		gInsPcm -12,PcmIns_Sauron_11,0
(2)  178/    E0D6 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  178/    E0DA : 0000 0000                   dc.b $00,$00,$00,$00
(2)  179/    E0DE : (MACRO)              		gInsPcm -12,PcmIns_Sauron_12,0
(2)  179/    E0DE : 0000 0000                   dc.b $00,$00,$00,$00
(2)  179/    E0E2 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  180/    E0E6 :                     
(2)  181/    E0E6 :                     ; ; ----------------------------------------------------
(2)  182/    E0E6 :                     ;
(2)  183/    E0E6 :                     ; gtrk_NadieMars:
(2)  184/    E0E6 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  185/    E0E6 :                     ; .blk:
(2)  186/    E0E6 :                     ; 		binclude "sound/tracks/nadie_blk.bin"
(2)  187/    E0E6 :                     ; .pat:
(2)  188/    E0E6 :                     ; 		binclude "sound/tracks/nadie_patt.bin"
(2)  189/    E0E6 :                     ; .ins:
(2)  190/    E0E6 :                     ; 	if MARS
(2)  191/    E0E6 :                     ; 		gInsPwm 0,PwmIns_Nadie,%10	 ; <-- %10 stereo, no loop
(2)  192/    E0E6 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  193/    E0E6 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  194/    E0E6 :                     ; 		gInsPwm -5,PwmIns_PKick,%00
(2)  195/    E0E6 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  196/    E0E6 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  197/    E0E6 :                     ; 		gInsPwm 0,PwmIns_Piano,%00
(2)  198/    E0E6 :                     ; 		gInsPwm -12,PwmIns_PTom,%00
(2)  199/    E0E6 :                     ; 		gInsNull
(2)  200/    E0E6 :                     ; 	else
(2)  201/    E0E6 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Nadie,%10
(2)  202/    E0E6 :                     ; 		gInsNull;gInsFm -36,FmIns_Piano_Aqua
(2)  203/    E0E6 :                     ; 		gInsNull;gInsFm -12,FmIns_HBeat_tom
(2)  204/    E0E6 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PKick,%00
(2)  205/    E0E6 :                     ; 		gInsNull;gInsPsg 0,$40,$60,$10,$08,$0A,0
(2)  206/    E0E6 :                     ; 		gInsNull;gInsFm 0,FmIns_Trumpet_1
(2)  207/    E0E6 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Piano,%00
(2)  208/    E0E6 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PTom,%00
(2)  209/    E0E6 :                     ; 		gInsNull
(2)  210/    E0E6 :                     ; 	endif
(2)  211/    E0E6 :                     ;
(2)  212/    E0E6 :                     ; ; ----------------------------------------------------
(2)  213/    E0E6 :                     ;
(2)  214/    E0E6 :                     ; gtrk_NadieCd:
(2)  215/    E0E6 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  216/    E0E6 :                     ; .blk:
(2)  217/    E0E6 :                     ; 		binclude "sound/tracks/nadie_cd_blk.bin"
(2)  218/    E0E6 :                     ; .pat:
(2)  219/    E0E6 :                     ; 		binclude "sound/tracks/nadie_cd_patt.bin"
(2)  220/    E0E6 :                     ; .ins:
(2)  221/    E0E6 :                     ; 	if MCD|MARSCD
(2)  222/    E0E6 :                     ; 		gInsPcm 0,PcmIns_Nadie_L,0
(2)  223/    E0E6 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  224/    E0E6 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  225/    E0E6 :                     ; 		gInsPcm -5,PcmIns_PKick,%00
(2)  226/    E0E6 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  227/    E0E6 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  228/    E0E6 :                     ; 		gInsPcm 0,PcmIns_Piano,%00
(2)  229/    E0E6 :                     ; 		gInsPcm -12,PcmIns_PTom,%00
(2)  230/    E0E6 :                     ; 		gInsNull
(2)  231/    E0E6 :                     ; 		gInsPcm 0,PcmIns_Nadie_R,0
(2)  232/    E0E6 :                     ; 	else
(2)  233/    E0E6 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Nadie,%10
(2)  234/    E0E6 :                     ; 		gInsNull;gInsFm -36,FmIns_Piano_Aqua
(2)  235/    E0E6 :                     ; 		gInsNull;gInsFm -12,FmIns_HBeat_tom
(2)  236/    E0E6 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PKick,%00
(2)  237/    E0E6 :                     ; 		gInsNull;gInsPsg 0,$40,$60,$10,$08,$0A,0
(2)  238/    E0E6 :                     ; 		gInsNull;gInsFm 0,FmIns_Trumpet_1
(2)  239/    E0E6 :                     ; 		gInsNull;gInsPwm 0,PwmIns_Piano,%00
(2)  240/    E0E6 :                     ; 		gInsNull;gInsPwm -12,PwmIns_PTom,%00
(2)  241/    E0E6 :                     ; 		gInsNull
(2)  242/    E0E6 :                     ; 	endif
(2)  243/    E0E6 :                     ;
(2)  244/    E0E6 :                     ; ; ----------------------------------------------------
(2)  245/    E0E6 :                     ;
(2)  246/    E0E6 :                     ; gtrk_NadieMd:
(2)  247/    E0E6 :                     ; 		gemaHead .blk,.pat,.ins,7
(2)  248/    E0E6 :                     ; .blk:
(2)  249/    E0E6 :                     ; 		binclude "sound/tracks/nadie_md_blk.bin"
(2)  250/    E0E6 :                     ; .pat:
(2)  251/    E0E6 :                     ; 		binclude "sound/tracks/nadie_md_patt.bin"
(2)  252/    E0E6 :                     ; .ins:
(2)  253/    E0E6 :                     ; 		gInsDac 0,DacIns_Nadie,0
(2)  254/    E0E6 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  255/    E0E6 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  256/    E0E6 :                     ; 		gInsFm -36,FmIns_Drums_Kick1
(2)  257/    E0E6 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  258/    E0E6 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  259/    E0E6 :                     ; 		gInsNull
(2)  260/    E0E6 :                     ; 		gInsNull
(2)  261/    E0E6 :                     ; 		gInsNull
(2)  262/    E0E6 :                     
(1)   53/    E0E6 :                     		include "sound/instr.asm"		; GEMA: FM instruments
(2)    1/    E0E6 :                     ; ===========================================================================
(2)    2/    E0E6 :                     ; -------------------------------------------------------------------
(2)    3/    E0E6 :                     ; GEMA/Nikona FM instruments "patches"
(2)    4/    E0E6 :                     ;
(2)    5/    E0E6 :                     ; PSG, PCM and PWM's are stored separately.
(2)    6/    E0E6 :                     ; -------------------------------------------------------------------
(2)    7/    E0E6 :                     
(2)    8/    E0E6 :                     ; ----------------------------------------------------
(2)    9/    E0E6 :                     ; INTRUMENT/PATCH FORMAT:
(2)   10/    E0E6 :                     ; dc.b $30,$34,$38,$3C	; Your FM registers following this order
(2)   11/    E0E6 :                     ; dc.b $40,$44,$48,$4C	; **
(2)   12/    E0E6 :                     ; dc.b $50,$54,$58,$5C	; **
(2)   13/    E0E6 :                     ; dc.b $60,$64,$68,$6C	; **
(2)   14/    E0E6 :                     ; dc.b $70,$74,$78,$7C	; **
(2)   15/    E0E6 :                     ; dc.b $80,$84,$88,$8C	; **
(2)   16/    E0E6 :                     ; dc.b $90,$94,$98,$9C	; **
(2)   17/    E0E6 :                     ; dc.b $B0,$B4,$22,$28	; **
(2)   18/    E0E6 :                     ; dc.w OP1,OP2,OP3,OP4	; OPTIONAL: Manual FM3 frequencies
(2)   19/    E0E6 :                     ;
(2)   20/    E0E6 :                     ; Notes:
(2)   21/    E0E6 :                     ; SSG-EG CAN be used, but can get problematic on non-genuine systems.
(2)   22/    E0E6 :                     ;
(2)   23/    E0E6 :                     ; $B4 - AMS/PMS: %00aa0ppp
(2)   24/    E0E6 :                     ; a | AMS
(2)   25/    E0E6 :                     ; p | PMS
(2)   26/    E0E6 :                     ; Keep panning bits 0, set the panning manually in your track.
(2)   27/    E0E6 :                     ;
(2)   28/    E0E6 :                     ; $22 - LFO: %0000evvv
(2)   29/    E0E6 :                     ; e | Enable
(2)   30/    E0E6 :                     ; v | Value
(2)   31/    E0E6 :                     ; This is a global setting, this will affect ALL sound.
(2)   32/    E0E6 :                     ;
(2)   33/    E0E6 :                     ; $28 - KEYS: %oooo0000
(2)   34/    E0E6 :                     ; o | Operators 4-1
(2)   35/    E0E6 :                     ;
(2)   36/    E0E6 :                     ; For making your own FM patches:
(2)   37/    E0E6 :                     ; Run FM_EDITOR.bin on an emulator and
(2)   38/    E0E6 :                     ; save your patch as a savestate, include your
(2)   39/    E0E6 :                     ; instrument like this:
(2)   40/    E0E6 :                     ; binclude "sound/instr/fm/organ2.gsx",$2478,SIZE
(2)   41/    E0E6 :                     ;
(2)   42/    E0E6 :                     ; SIZE:
(2)   43/    E0E6 :                     ; Normal FM ins:  $20
(2)   44/    E0E6 :                     ; Special FM ins: $28
(2)   45/    E0E6 :                     ; ----------------------------------------------------
(2)   46/    E0E6 :                     
(2)   47/    E0E6 :                     ; FM3 Special
(2)   48/    E0E6 :                     FmIns_Sp_OpenHat:
(2)   49/    E0E6 :                     		binclude "sound/instr/fm/OLD/fm3_openhat.gsx",$2478,$28
(2)   50/    E10E :                     FmIns_Sp_ClosedHat:
(2)   51/    E10E :                     		binclude "sound/instr/fm/OLD/fm3_closedhat.gsx",$2478,$28
(2)   52/    E136 :                     FmIns_Sp_Cowbell:
(2)   53/    E136 :                     		binclude "sound/instr/fm/OLD/fm3_cowbell.gsx",$2478,$28
(2)   54/    E15E :                     
(2)   55/    E15E :                     ; ----------------------------------------------------
(2)   56/    E15E :                     
(2)   57/    E15E :                     FmIns_Drums_Kick1:
(2)   58/    E15E :                     		binclude "sound/instr/fm/drum_kick_gem.gsx",$2478,$20
(2)   59/    E17E :                     FmIns_Piano_Aqua:
(2)   60/    E17E :                     		binclude "sound/instr/fm/piano_aqua.gsx",$2478,$20
(2)   61/    E19E :                     FmIns_HBeat_tom:
(2)   62/    E19E :                     		binclude "sound/instr/fm/nadia_tom.gsx",$2478,$20
(2)   63/    E1BE :                     FmIns_Trumpet_1:
(2)   64/    E1BE :                     		binclude "sound/instr/fm/trumpet_1.gsx",$2478,$20
(2)   65/    E1DE :                     
(2)   66/    E1DE :                     ; ----------------------------------------------------
(2)   67/    E1DE :                     
(2)   68/    E1DE :                     FmIns_Bass_duck:
(2)   69/    E1DE :                     		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(2)   70/    E1FE :                     FmIns_ClosedHat:
(2)   71/    E1FE :                     		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(2)   72/    E21E :                     FmIns_Trumpet_carnival:
(2)   73/    E21E :                     		binclude "sound/instr/fm/OLD/OLD_trumpet_carnivl.gsx",$2478,$20
(2)   74/    E23E :                     
(2)   75/    E23E :                     
(2)   76/    E23E :                     ; ====================================================================
(2)   77/    E23E :                     
(2)   78/    E23E :                     ; FM3 Special
(2)   79/    E23E :                     ; FmIns_Sp_OpenHat:
(2)   80/    E23E :                     ; 		binclude "sound/instr/fm/fm3_openhat.gsx",$2478,$28
(2)   81/    E23E :                     ; FmIns_Sp_ClosedHat:
(2)   82/    E23E :                     ; 		binclude "sound/instr/fm/fm3_closedhat.gsx",$2478,$28
(2)   83/    E23E :                     ; FmIns_Sp_Cowbell:
(2)   84/    E23E :                     ; 		binclude "sound/instr/fm/fm3_cowbell.gsx",$2478,$28
(2)   85/    E23E :                     ; FmIns_Bass_4:
(2)   86/    E23E :                     ; 		binclude "sound/instr/fm/bass_4.gsx",$2478,$20
(2)   87/    E23E :                     ; FmIns_Bass_8:
(2)   88/    E23E :                     ; 		binclude "sound/instr/fm/bass_8.gsx",$2478,$20
(2)   89/    E23E :                     ; FmIns_Synth_Plus:
(2)   90/    E23E :                     ; 		binclude "sound/instr/fm/OLD_synthplus.gsx",$2478,$20
(2)   91/    E23E :                     FmIns_Bass_club:
(2)   92/    E23E :                     		binclude "sound/instr/fm/OLD/OLD_bass_club.gsx",$2478,$20
(2)   93/    E25E :                     ; FmIns_Bass_calm:
(2)   94/    E25E :                     ; 		binclude "sound/instr/fm/bass_calm.gsx",$2478,$20
(2)   95/    E25E :                     ; FmIns_Trumpet_1:
(2)   96/    E25E :                     ; 		binclude "sound/instr/fm/OLD_trumpet_1.gsx",$2478,$20
(2)   97/    E25E :                     ; FmIns_Trumpet_carnival:
(2)   98/    E25E :                     ; 		binclude "sound/instr/fm/OLD_trumpet_carnivl.gsx",$2478,$20
(2)   99/    E25E :                     ; FmIns_brass_eur:
(2)  100/    E25E :                     ; 		binclude "sound/instr/fm/OLD_brass_eur.gsx",$2478,$20
(2)  101/    E25E :                     ; FmIns_Bass_Oil:
(2)  102/    E25E :                     ; 		binclude "sound/instr/fm/OLD/bass_oil.gsx",$2478,$20
(2)  103/    E25E :                     ; FmIns_Organ_Ito:
(2)  104/    E25E :                     ; 		binclude "sound/instr/fm/OLD/organ_ito.gsx",$2478,$20
(2)  105/    E25E :                     ; FmIns_Ding_Baseball:
(2)  106/    E25E :                     ; 		binclude "sound/instr/fm/OLD/ding_baseball.gsx",$2478,$20
(2)  107/    E25E :                     ; FmIns_DrumKick_gem:
(2)  108/    E25E :                     ; 		binclude "sound/instr/fm/OLD/drum_kick_gem.gsx",$2478,$20
(2)  109/    E25E :                     ; FmIns_ClosedHat:
(2)  110/    E25E :                     ; 		binclude "sound/instr/fm/OLD/hats_closed.gsx",$2478,$20
(2)  111/    E25E :                     ; FmIns_PianoM1:
(2)  112/    E25E :                     ; 		binclude "sound/instr/fm/OLD/piano_m1.gsx",$2478,$20
(2)  113/    E25E :                     ; FmIns_Bass_1:
(2)  114/    E25E :                     ; 		binclude "sound/instr/fm/OLD/bass_low.gsx",$2478,$20
(2)  115/    E25E :                     ; FmIns_Bass_2:
(2)  116/    E25E :                     ; 		binclude "sound/instr/fm/OLD/bass_strong.gsx",$2478,$20
(2)  117/    E25E :                     ; FmIns_Bass_donna:
(2)  118/    E25E :                     ; 		binclude "sound/instr/fm/OLD/bass_feellove.gsx",$2478,$20
(2)  119/    E25E :                     ; FmIns_Bass_groove:
(2)  120/    E25E :                     ; 		binclude "sound/instr/fm/OLD/bass_groove.gsx",$2478,$20
(2)  121/    E25E :                     FmIns_Bass_groove_2:
(2)  122/    E25E :                     		binclude "sound/instr/fm/OLD/bass_groove_2.gsx",$2478,$20
(2)  123/    E27E :                     ; FmIns_Bass_groove_gem:
(2)  124/    E27E :                     ; 		binclude "sound/instr/fm/OLD/bass_groove_gem.gsx",$2478,$20
(2)  125/    E27E :                     ; FmIns_Bass_italo:
(2)  126/    E27E :                     ; 		binclude "sound/instr/fm/OLD/bass_italo.gsx",$2478,$20
(2)  127/    E27E :                     ; FmIns_Bass_duck:
(2)  128/    E27E :                     ; 		binclude "sound/instr/fm/OLD/bass_duck.gsx",$2478,$20
(2)  129/    E27E :                     ; FmIns_Piano_Aqua:
(2)  130/    E27E :                     ; 		binclude "sound/instr/fm/OLD/piano_aqua.gsx",$2478,$20
(2)  131/    E27E :                     ; FmIns_Trumpet_2:
(2)  132/    E27E :                     ; 		binclude "sound/instr/fm/OLD/trumpet_2.gsx",$2478,$20
(2)  133/    E27E :                     ; FmIns_Trumpet_puy:
(2)  134/    E27E :                     ; 		binclude "sound/instr/fm/OLD/trumpet_puy.gsx",$2478,$20
(2)  135/    E27E :                     ; FmIns_Marimba:
(2)  136/    E27E :                     ; 		binclude "sound/instr/fm/marimba.gsx",$2478,$20
(2)  137/    E27E :                     ; FmIns_Ambient_dark:
(2)  138/    E27E :                     ; 		binclude "sound/instr/fm/OLD/ambient_dark.gsx",$2478,$20
(2)  139/    E27E :                     ; FmIns_Ambient_spook:
(2)  140/    E27E :                     ; 		binclude "sound/instr/fm/OLD/ambient_spook.gsx",$2478,$20
(2)  141/    E27E :                     ; FmIns_Ambient_3:
(2)  142/    E27E :                     ; 		binclude "sound/instr/fm/OLD/ambient_3.gsx",$2478,$20
(2)  143/    E27E :                     ; FmIns_Ding_toy:
(2)  144/    E27E :                     ; 		binclude "sound/instr/fm/OLD/ding_toy.gsx",$2478,$20
(2)  145/    E27E :                     ; FmIns_Brass_Puy:
(2)  146/    E27E :                     ; 		binclude "sound/instr/fm/OLD/brass_puy.gsx",$2478,$20
(2)  147/    E27E :                     ; FmIns_Flaute_cave:
(2)  148/    E27E :                     ; 		binclude "sound/instr/fm/OLD/flaute_sea.gsx",$2478,$20
(2)  149/    E27E :                     ; FmIns_Banjo_puy:
(2)  150/    E27E :                     ; 		binclude "sound/instr/fm/OLD/banjo_puy.gsx",$2478,$20
(2)  151/    E27E :                     FmIns_PSynth_plus:
(2)  152/    E27E :                     		binclude "sound/instr/fm/OLD/psynth_plus.gsx",$2478,$20
(2)  153/    E29E :                     ; FmIns_Ding_1:
(2)  154/    E29E :                     ; 		binclude "sound/instr/fm/OLD/ding_gem.gsx",$2478,$20
(2)  155/    E29E :                     ; FmIns_Trombone_gem:
(2)  156/    E29E :                     ; 		binclude "sound/instr/fm/OLD/trombone_gem.gsx",$2478,$20
(2)  157/    E29E :                     ; FmIns_HBeat_tom:
(2)  158/    E29E :                     ; 		binclude "sound/instr/fm/OLD/nadia_tom.gsx",$2478,$20
(2)  159/    E29E :                     
(2)  160/    E29E :                     
(1)   54/    E29E :                     		include "sound/smpl_dac.asm"		; GEMA: DAC samples
(2)    1/    E29E :                     ; ===========================================================================
(2)    2/    E29E :                     ; -------------------------------------------------------------------
(2)    3/    E29E :                     ; GEMA/Nikona DAC samples
(2)    4/    E29E :                     ;
(2)    5/    E29E :                     ; This is located on the Genesis area and can be
(2)    6/    E29E :                     ; stored in ROM, and WORD-RAM.
(2)    7/    E29E :                     ; * RAM IS possible with help of Sound_Update but it's
(2)    8/    E29E :                     ;   not a good idea as samples are too long to fit. *
(2)    9/    E29E :                     ;
(2)   10/    E29E :                     ; SCD/CD32X:
(2)   11/    E29E :                     ; - Stored on WORD-RAM
(2)   12/    E29E :                     ;   CANNOT be used if Stamps are active/rendering, use
(2)   13/    E29E :                     ;   PCM instead.
(2)   14/    E29E :                     ;
(2)   15/    E29E :                     ; 32X Cartridge:
(2)   16/    E29E :                     ; - Always stored on the $880000(fixed) area.
(2)   17/    E29E :                     ; - $900000(banked) is possible but requires the BANK to
(2)   18/    E29E :                     ;   stay as-is.
(2)   19/    E29E :                     ;
(2)   20/    E29E :                     ; MACRO:
(2)   21/    E29E :                     ; gSmplData Label,"file_path",loop_start
(2)   22/    E29E :                     ;
(2)   23/    E29E :                     ; Set loop_start to 0 if not using it.
(2)   24/    E29E :                     ;
(2)   25/    E29E :                     ; BASE C-5 samplerate is 16000hz
(2)   26/    E29E :                     ; -------------------------------------------------------------------
(2)   27/    E29E :                     
(2)   28/    E29E :                     ; 	align $100
(2)   29/    E29E :                     	;gSmplData Label,"file_path",loop_start
(2)   30/    E29E :                     ; -----------------------------------------------------------
(2)   31/    E29E : (MACRO)              	gSmplData DacIns_TEST,"sound/instr/smpl/test.wav",0
(2)   31/    E29E : =$E29E               DACINS_TEST    label *
(2)   31/    E29E : 386F 00                     dc.b ((DACINS_TEST_e-DACINS_TEST_s)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>8)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>16)&$FF)
(2)   31/    E2A1 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   31/    E2A4 :                     DACINS_TEST_s:
(2)   31/    E2A4 :                             binclude "sound/instr/smpl/test.wav",$2C
(2)   31/   151DC :                     DACINS_TEST_e:
(2)   32/   151DC : (MACRO)              	gSmplData DacIns_Nadie,"sound/instr/smpl/nadie.wav",0
(2)   32/   151DC : =$151DC              DACINS_NADIE    label *
(2)   32/   151DC : B4DF 00                     dc.b ((DACINS_NADIE_e-DACINS_NADIE_s)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>8)&$FF),(((DACINS_NADIE_e-DACINS_NADIE_s)>>16)&$FF)
(2)   32/   151DF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   32/   151E2 :                     DACINS_NADIE_s:
(2)   32/   151E2 :                             binclude "sound/instr/smpl/nadie.wav",$2C
(2)   32/   23196 :                     DACINS_NADIE_e:
(2)   33/   23196 :                     
(2)   34/   23196 : (MACRO)              	gSmplData DacIns_wegot_kick,"sound/instr/smpl/wegot_kick.wav",0
(2)   34/   23196 : =$23196              DACINS_WEGOT_KICK    label *
(2)   34/   23196 : 7407 00                     dc.b ((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>8)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>16)&$FF)
(2)   34/   23199 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   34/   2319C :                     DACINS_WEGOT_KICK_s:
(2)   34/   2319C :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)   34/   23910 :                     DACINS_WEGOT_KICK_e:
(2)   35/   23910 : (MACRO)              	gSmplData DacIns_wegot_crash,"sound/instr/smpl/wegot_crash.wav",0
(2)   35/   23910 : =$23910              DACINS_WEGOT_CRASH    label *
(2)   35/   23910 : C42C 00                     dc.b ((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>8)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>16)&$FF)
(2)   35/   23913 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)   35/   23916 :                     DACINS_WEGOT_CRASH_s:
(2)   35/   23916 :                             binclude "sound/instr/smpl/wegot_crash.wav",$2C
(2)   35/   265DA :                     DACINS_WEGOT_CRASH_e:
(2)   36/   265DA :                     
(1)   55/   265DA :                     		include "game/data/bank_main.asm"
(2)    1/   265DA :                     ; ===========================================================================
(2)    2/   265DA :                     ; ----------------------------------------------------------------
(2)    3/   265DA :                     ; BANK data
(2)    4/   265DA :                     ; ----------------------------------------------------------------
(2)    5/   265DA :                     
(2)    6/   265DA : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/   265DA :                     
(2)    6/   265DA :                                     align 2
(2)    6/   265DA : =$265DA              ASCII_FONT        label *
(2)    6/   265DA :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/   271DA :                                     align 2
(2)    6/   271DA :                     
(2)    7/   271DA : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/   271DA :                     
(2)    7/   271DA :                                     align 2
(2)    7/   271DA : =$271DA              ASCII_FONT_W        label *
(2)    7/   271DA :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/   289DA :                                     align 2
(2)    7/   289DA :                     
(2)    8/   289DA : (MACRO)              		binclude_dma_e	Art_TESTBG,Art_TESTBG_e,"game/data/md/maps/test/art.bin"
(2)    8/   289DA :                     
(2)    8/   289DA :                                     align 2
(2)    8/   289DA : =$289DA              ART_TESTBG        label *
(2)    8/   289DA :                                     binclude "game/data/md/maps/test/art.bin"
(2)    8/   30FFA : =$30FFA              ART_TESTBG_E          label *
(2)    8/   30FFA :                                     align 2
(2)    8/   30FFA :                     
(2)    9/   30FFA : (MACRO)              		binclude_dma_e	Art_TESTBG2,Art_TESTBG2_e,"game/data/md/maps/test2/art.bin"
(2)    9/   30FFA :                     
(2)    9/   30FFA :                                     align 2
(2)    9/   30FFA : =$30FFA              ART_TESTBG2        label *
(2)    9/   30FFA :                                     binclude "game/data/md/maps/test2/art.bin"
(2)    9/   3A87A : =$3A87A              ART_TESTBG2_E          label *
(2)    9/   3A87A :                                     align 2
(2)    9/   3A87A :                     
(2)   10/   3A87A :                     
(2)   11/   3A87A : (MACRO)              		binclude_dma	Art_Haruna,"game/data/md/sprites/haruna/art.bin"
(2)   11/   3A87A :                     
(2)   11/   3A87A :                                     align 2
(2)   11/   3A87A : =$3A87A              ART_HARUNA        label *
(2)   11/   3A87A :                                     binclude "game/data/md/sprites/haruna/art.bin"
(2)   11/   3D6FA :                                     align 2
(2)   11/   3D6FA :                     
(2)   12/   3D6FA : (MACRO)              		binclude_dma_e	Art_Sisi,Art_Sisi_e,"game/data/md/sprites/sisi/art.bin"
(2)   12/   3D6FA :                     
(2)   12/   3D6FA :                                     align 2
(2)   12/   3D6FA : =$3D6FA              ART_SISI        label *
(2)   12/   3D6FA :                                     binclude "game/data/md/sprites/sisi/art.bin"
(2)   12/   3DC7A : =$3DC7A              ART_SISI_E          label *
(2)   12/   3DC7A :                                     align 2
(2)   12/   3DC7A :                     
(2)   13/   3DC7A :                     
(2)   14/   3DC7A :                     ; ----------------------------------------------------------------
(2)   15/   3DC7A :                     ; Everything else...
(2)   16/   3DC7A :                     ; ----------------------------------------------------------------
(2)   17/   3DC7A :                     
(2)   18/   3DC7A :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)   19/   3DC9A :                     		align 2
(2)   20/   3DC9A :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)   21/   3DE4A :                     		align 2
(2)   22/   3DE4A :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)   23/   3DEDA :                     		align 2
(2)   24/   3DEDA :                     
(2)   25/   3DEDA :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)   26/   3DEFA :                     		align 2
(2)   27/   3DEFA :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)   28/   3DF3E :                     		align 2
(2)   29/   3DF3E :                     
(2)   30/   3DF3E :                     Pal_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   31/   3DF5E :                     		align 2
(2)   32/   3DF5E :                     Map_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   33/   3E81E :                     		align 2
(2)   34/   3E81E :                     Pal_TESTBG2:	binclude "game/data/md/maps/test2/pal.bin"
(2)   35/   3E83E :                     		align 2
(2)   36/   3E83E :                     Map_TESTBG2:	binclude "game/data/md/maps/test2/map.bin"
(2)   37/   3F9BE :                     		align 2
(2)   38/   3F9BE :                     
(1)   56/   3F9BE :                     	; ------------------------------------------------
(1)   57/   3F9BE : (MACRO)              	data_dend DATA_BANK0_e
(1)   57/   3F9BE : =$3944C              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   57/   3F9BE :                     
(1)   57/   3F9BE :                     
(1)   58/   3F9BE :                     
(1)   59/   3F9BE :                     ; ============================================================
(1)   60/   3F9BE :                     ; --------------------------------------------------------
(1)   61/   3F9BE :                     ; 32X stuff only
(1)   62/   3F9BE :                     ; --------------------------------------------------------
(1)   63/   3F9BE :                     
(1)   64/   3F9BE : (MACRO)              	data_dset DATA_BANK1
(1)   64/   3F9BE :                     ; MCD_DBANK0:
(1)   64/   3F9BE : =$3F9BE              DATA_BANK1 label *
(1)   64/   3F9BE : =$3F9BE              GLBL_MDATA_ST := *
(1)   65/   3F9BE :                     	; ------------------------------------------------
(1)   66/   3F9BE :                     		include "game/data/bank_mars.asm"
(2)    1/   3F9BE :                     ; ===========================================================================
(2)    2/   3F9BE :                     ; ----------------------------------------------------------------
(2)    3/   3F9BE :                     ; BANK data
(2)    4/   3F9BE :                     ; ----------------------------------------------------------------
(2)    5/   3F9BE :                     
(2)    6/   3F9BE :                     PalMars_Test:
(2)    7/   3F9BE :                     		binclude "game/data/mars/maps/test/pal.bin"
(2)    8/   3FB3E :                     		align 2
(2)    9/   3FB3E :                     MapMars_Test:
(2)   10/   3FB3E :                     		binclude "game/data/mars/maps/test/map.bin"
(2)   11/   3FF3E :                     		align 2
(2)   12/   3FF3E :                     PalMars_Haruna:
(2)   13/   3FF3E :                     		binclude "game/data/mars/textures/haruna_pal.bin"
(2)   14/   3FF5E :                     		align 2
(2)   15/   3FF5E :                     PalMars_Sisi:
(2)   16/   3FF5E :                     		binclude "game/data/mars/sprites/sisi/pal.bin"
(2)   17/   3FF7E :                     		align 8
(2)   18/   3FF80 :                     
(2)   19/   3FF80 :                     ; ----------------------------------------------------
(2)   20/   3FF80 :                     
(2)   21/   3FF80 :                     PalMars_Test2:
(2)   22/   3FF80 :                     		binclude "game/data/mars/objects/test/mtrl/test_pal.bin"
(2)   23/   40080 :                     		binclude "game/data/mars/textures/doremi/pal.bin"	; FILLER
(2)   24/   40280 :                     		align 2
(2)   25/   40280 :                     
(2)   26/   40280 :                     ; ===========================================================
(2)   27/   40280 :                     ; ----------------------------------------------------
(2)   28/   40280 :                     ; 32X GRAPHICS BANKS
(2)   29/   40280 :                     ; ----------------------------------------------------
(2)   30/   40280 :                     
(2)   31/   40280 : (MACRO)              		mars_VramStart ArtMars_Test2D		; Graphics/Texture pack START
(2)   31/   40280 : =$40280              ARTMARS_TEST2D label *
(2)   31/       0 :                                     phase 0
(2)   32/       0 :                     ; ----------------------------------------------------
(2)   33/       0 :                     ArtMars_TestArt:
(2)   34/       0 :                     		binclude "game/data/mars/maps/test/art.bin"
(2)   35/    FD00 :                     		align 8
(2)   36/    FD00 :                     ArtMars_Sisi:
(2)   37/    FD00 :                     		binclude "game/data/mars/sprites/sisi/art.bin"
(2)   38/   10900 :                     		align 8
(2)   39/   10900 :                     Textr_Haruna:
(2)   40/   10900 :                     		binclude "game/data/mars/textures/haruna_art.bin"
(2)   41/   17200 :                     		align 8
(2)   42/   17200 :                     ; ----------------------------------------------------
(2)   43/   17200 : (MACRO)              		mars_VramEnd ArtMars_Test2D_e		; Graphics/Texture pack END
(2)   43/   17200 :                                     align 8
(2)   43/   17200 :                     .end:
(2)   43/   17200 :                     ;               if MOMPASS == 1
(2)   43/   17200 :  (MACRO-2)                                   erreport "32X VRAM DATA",.end,$18000
(2)   43/   17200 :                     ;               endif
(2)   43/   57480 :                                     dephase
(2)   43/   57480 : =$57480              ARTMARS_TEST2D_E label *
(2)   44/   57480 :                     
(2)   45/   57480 :                     
(1)   67/   57480 :                     	; ------------------------------------------------
(1)   68/   57480 : (MACRO)              	data_dend DATA_BANK1_e
(1)   68/   57480 : =$17AC2              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   68/   57480 :                     
(1)   68/   57480 :                     
(1)   69/   57480 :                     
(1)   70/   57480 :                     ; ============================================================
(1)   71/   57480 :                     ; --------------------------------------------------------
(1)   72/   57480 :                     ; STAMP BANK test
(1)   73/   57480 :                     ; --------------------------------------------------------
(1)   74/   57480 :                     
(1)   75/   57480 : (MACRO)              	data_dset DATA_BNKSTAMP
(1)   75/   57480 :                     ; MCD_DBANK0:
(1)   75/   57480 : =$57480              DATA_BNKSTAMP label *
(1)   75/   57480 : =$57480              GLBL_MDATA_ST := *
(1)   76/   57480 :                     	; ------------------------------------------------
(1)   77/   57480 :                     		include "game/data/stamps_0.asm"
(2)    1/   57480 :                     ; ===========================================================================
(2)    2/   57480 :                     ; ----------------------------------------------------------------
(2)    3/   57480 :                     ; BANK data for STAMPS ONLY
(2)    4/   57480 :                     ;
(2)    5/   57480 :                     ; GRAPHICS go first, first $80 bytes are blank/free
(2)    6/   57480 :                     ; ----------------------------------------------------------------
(2)    7/   57480 :                     
(2)    8/       0 :                     		phase 0		; Labels start at 0
(2)    9/       0 :                     ; ===================================================================
(2)   10/       0 :                     ; ----------------------------------------------------------------
(2)   11/       0 :                     ; STAMP GRAPHICS GO FIRST
(2)   12/       0 :                     ; ----------------------------------------------------------------
(2)   13/       0 :                     
(2)   14/       0 : 00                  		dc.b 0
(2)   15/       1 :                     		align $80
(2)   16/      80 :                     		binclude "game/data/mcd/stamps/test/art.bin"
(2)   17/    6080 :                     ; 		binclude "game/data/mcd/stamps/haruna/art.bin"
(2)   18/    6080 :                     
(2)   19/    6080 :                     ; ===================================================================
(2)   20/   5D500 :                     		dephase
(2)   21/   5D500 :                     
(2)   22/   5D500 :                     
(1)   78/   5D500 :                     	; ------------------------------------------------
(1)   79/   5D500 : (MACRO)              	data_dend DATA_BNKSTAMP_e
(1)   79/   5D500 : =$6080               GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   79/   5D500 :                     
(1)   79/   5D500 :                     
(1)   80/   5D500 :                     
     384/   5D500 :                     
     385/   5D500 :                     ; ====================================================================
     386/   5D500 :                     ; ----------------------------------------------------------------
     387/   5D500 :                     ; Cartridge-ONLY Section, direct label access
     388/   5D500 :                     ;
     389/   5D500 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     390/   5D500 :                     ; ----------------------------------------------------------------
     391/   5D500 :                     
     393/   5D500 :                     
     394/   5D500 :                     ; --------------------------------------------------------
     395/   5D500 :                     ; ROM only DMA graphics data
     396/   5D500 :                     ; --------------------------------------------------------
     397/   5D500 :                     
     398/   5D500 :                     		include "game/data/ROM_dma_vdp.asm"
(1)    1/   5D500 :                     ; ===========================================================================
(1)    2/   5D500 :                     ; ----------------------------------------------------------------
(1)    3/   5D500 :                     ; DMA Genesis graphics for Cartridge ONLY
(1)    4/   5D500 :                     ; ----------------------------------------------------------------
(1)    5/   5D500 :                     		align 2
(1)    6/   5D500 :                     ; --------------------------------------------------------
(1)    7/   5D500 :                     
     399/   5D500 :                     
     400/   5D500 :                     ; --------------------------------------------------------
     401/   5D500 :                     ; ROM-only 32X data
     402/   5D500 :                     ;
     403/   5D500 :                     ; In the case of RV bit (during DMA):
     404/   5D500 :                     ; Only the PWM samples are protected, everything else
     405/   5D500 :                     ; will be trashed.
     406/   5D500 :                     ; --------------------------------------------------------
     407/   5D500 :                     
     408/ 205D500 :                     		phase CS1+*
     409/ 205D500 :                     ; ------------------------------------------------
     410/ 205D500 :                     		align 4
     411/ 205D500 :                     		include "game/data/mars/objects/list_ROM.asm"	; 3D objects
(1)    1/ 205D500 :                     ; ===========================================================================
(1)    2/ 205D500 :                     ; ----------------------------------------------------------------
(1)    3/ 205D500 :                     ; Special include for the 3D models, ROM-ONLY VERSION
(1)    4/ 205D500 :                     ;
(1)    5/ 205D500 :                     ; THIS CAN'T BE USED ON SCD/CD32X
(1)    6/ 205D500 :                     ; ----------------------------------------------------------------
(1)    7/ 205D500 :                     
(1)    8/ 205D500 :                     ; 		include "game/data/mars/objects/test/head.asm"
(1)    9/ 205D500 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(1)   10/ 205D500 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(1)   11/ 205D500 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(1)   12/ 205D500 :                     
     412/ 205D500 :                     		include "sound/ROM_smpl_pwm.asm"		; PWM samples
(1)    1/ 205D500 :                     ; ===========================================================================
(1)    2/ 205D500 :                     ; -------------------------------------------------------------------
(1)    3/ 205D500 :                     ; GEMA/Nikona PWM instruments on Cartridge ONLY
(1)    4/ 205D500 :                     ;
(1)    5/ 205D500 :                     ; - This CANNOT be used on CD/CD32X
(1)    6/ 205D500 :                     ; - This section is protected by the RV bit, quality will decrase
(1)    7/ 205D500 :                     ;   during playback.
(1)    8/ 205D500 :                     ;
(1)    9/ 205D500 :                     ; MACRO:
(1)   10/ 205D500 :                     ; gSmplData Label,"file_path",loop_start
(1)   11/ 205D500 :                     ;
(1)   12/ 205D500 :                     ; Set loop_start to 0 if not using it.
(1)   13/ 205D500 :                     ;
(1)   14/ 205D500 :                     ; BASE C-5 samplerate is 16000hz
(1)   15/ 205D500 :                     ; -------------------------------------------------------------------
(1)   16/ 205D500 :                     
(1)   17/ 205D500 :                     	align 4
(1)   18/ 205D500 :                     	;gSmplData Label,"file_path",loop_start
(1)   19/ 205D500 :                     ; -----------------------------------------------------------
(1)   20/ 205D500 :                     ; 	gSmplData PwmIns_TEST,"sound/instr/smpl/test_st.wav",0
(1)   21/ 205D500 : (MACRO)              	gSmplData PwmIns_Nadie,"sound/instr/smpl/nadie_st.wav",0
(1)   21/ 205D500 : =$205D500            PWMINS_NADIE    label *
(1)   21/ 205D500 : 50BF 01                     dc.b ((PWMINS_NADIE_e-PWMINS_NADIE_s)&$FF),(((PWMINS_NADIE_e-PWMINS_NADIE_s)>>8)&$FF),(((PWMINS_NADIE_e-PWMINS_NADIE_s)>>16)&$FF)
(1)   21/ 205D503 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   21/ 205D506 :                     PWMINS_NADIE_s:
(1)   21/ 205D506 :                             binclude "sound/instr/smpl/nadie_st.wav",$2C
(1)   21/ 2079456 :                     PWMINS_NADIE_e:
(1)   22/ 2079456 : (MACRO)              	gSmplData PwmIns_Piano,"sound/instr/smpl/piano_1.wav",0
(1)   22/ 2079456 : =$2079456            PWMINS_PIANO    label *
(1)   22/ 2079456 : 1647 00                     dc.b ((PWMINS_PIANO_e-PWMINS_PIANO_s)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>8)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>16)&$FF)
(1)   22/ 2079459 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   22/ 207945C :                     PWMINS_PIANO_s:
(1)   22/ 207945C :                             binclude "sound/instr/smpl/piano_1.wav",$2C
(1)   22/ 207DB72 :                     PWMINS_PIANO_e:
(1)   23/ 207DB72 : (MACRO)              	gSmplData PwmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(1)   23/ 207DB72 : =$207DB72            PWMINS_PKICK    label *
(1)   23/ 207DB72 : 7407 00                     dc.b ((PWMINS_PKICK_e-PWMINS_PKICK_s)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>8)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>16)&$FF)
(1)   23/ 207DB75 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   23/ 207DB78 :                     PWMINS_PKICK_s:
(1)   23/ 207DB78 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   23/ 207E2EC :                     PWMINS_PKICK_e:
(1)   24/ 207E2EC : (MACRO)              	gSmplData PwmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(1)   24/ 207E2EC : =$207E2EC            PWMINS_PTOM    label *
(1)   24/ 207E2EC : B40B 00                     dc.b ((PWMINS_PTOM_e-PWMINS_PTOM_s)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>8)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>16)&$FF)
(1)   24/ 207E2EF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/ 207E2F2 :                     PWMINS_PTOM_s:
(1)   24/ 207E2F2 :                             binclude "sound/instr/smpl/sauron_tom.wav",$2C
(1)   24/ 207EEA6 :                     PWMINS_PTOM_e:
(1)   25/ 207EEA6 :                     
     413/ 207EEA6 :                     ; ------------------------------------------------
     414/   7EEA6 :                     		dephase
     415/   7EEA6 :                     
     416/   7EEA6 :                     ; ----------------------------------------------------------------
     417/   7EEA6 :                     
     419/   7EEA6 :                     
     420/   7EEA6 :                     ; ====================================================================
     421/   7EEA6 :                     ; ------------------------------------------------
     422/   7EEA6 :                     ; End
     423/   7EEA6 :                     ; ------------------------------------------------
     424/   7EEA6 :                     
     425/   7EEA6 :                     ROM_END:
     426/   7EEA6 : 00                  		dc.b 0
     427/   7EEA7 :                     		align $8000
     428/   80000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 09/14/2024 05:32:18 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_SISI :                FD00 C | *ARTMARS_TEST2D :             40280 C |
*ARTMARS_TEST2D_E :           57480 C | *ARTMARS_TESTART :                0 C |
 ART_HARUNA :                 3A87A C |  ART_SISI :                   3D6FA C |
 ART_SISI_E :                 3DC7A C |  ART_TESTBG :                 289DA C |
 ART_TESTBG2 :                30FFA C |  ART_TESTBG2_E :              3A87A C |
 ART_TESTBG_E :               30FFA C |  ASCII_FONT :                 265DA C |
 ASCII_FONT_W :               271DA C |  ATK :                            8 - |
*ATTRH :                        800 - | *ATTRPRIO :                    8000 - |
*ATTRV :                       1000 - | *BANKSET :                        4 - |
*BIGENDIAN :                      0 - | *BITATTRH :                       3 - |
*BITATTRPRIO :                    7 - | *BITATTRV :                       4 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
*BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
*BITJOYPEN :                      7 - | *BITJOYRED :                      4 - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - | *BITJOYX :                        A - |
*BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CDRAMDST :                      31 C |  CDRAMLEN :                      30 C |
 CDRAMSRC :                      33 C |  CDRAMSRCB :                     35 C |
 CHIP_ENV :                    1082 C |  CHIP_ENV.ATKEND :             1105 C |
*CHIP_ENV.ATKZERO :            1108 C |  CHIP_ENV.CHK2 :               110E C |
 CHIP_ENV.CHK4 :               1143 C |  CHIP_ENV.CKOF :               10A6 C |
 CHIP_ENV.CKON :               10B9 C | *CHIP_ENV.DECTMR :             1112 C |
 CHIP_ENV.DKADD :              112C C |  CHIP_ENV.DKSAV :              1134 C |
 CHIP_ENV.DKYEND :             1139 C |  CHIP_ENV.DO_NFREQ :           1198 C |
 CHIP_ENV.ENVPROC :            10D7 C |  CHIP_ENV.KILLENV :            1159 C |
*CHIP_ENV.NBLOCK :             10D7 C |  CHIP_ENV.NORMAL :             1193 C |
 CHIP_ENV.NOUPD :              11D9 C |  CHIP_ENV.NSKIP :              10CE C |
 CHIP_ENV.SILNC_3 :            118F C |  CHIP_ENV.VEDLP :              1161 C |
 CHIP_ENV.VLMUCH :             11C5 C |  CHIP_ENV.VLOOP :              108E C |
 CHIP_ENV.VONLY :              11BB C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - | *CMDINTCLR :                     1A - |
*CMDIRQ_ON :                      2 - |  COM :                            0 - |
*COMM0 :                         20 - | *COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
*COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
*COMM2 :                         22 - | *COMM3 :                         23 - |
*COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
*COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                     40 C |  COMMZREAD :                     3F C |
 COMMZROMBLK :                   2F C |  COMMZWRITE :                    2E C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFD8F8 - | *CONTROLLER_2 :    FFFFFFFFFFFFD908 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - | *CS3 :                      6000000 - |
 CURRTICKBITS :                1CF6 C | *CUSTOM :                         0 - |
*CYCLE :                         32 - | *DACINS_NADIE :               151DC C |
 DACINS_TEST :                 E29E C |  DACINS_WEGOT_CRASH :         23910 C |
 DACINS_WEGOT_KICK :          23196 C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     1214 C |
 DAC_ON :                      11FF C |  DAC_PLAY :                    1229 C |
 DAC_REFILL :                  125D C |  DAC_REFILL.DACFILL_END :      131C C |
 DAC_REFILL.DACFILL_LOOP :     12D5 C |  DAC_REFILL.DACFILL_RET :      131F C |
 DAC_REFILL.DAC_OVER :         12AB C |  DATA_BANK0 :                  6572 C |
 DATA_BANK1 :                 3F9BE C | *DATA_BNKSTAMP :              57480 C |
 DATE :                "09/14/2024" - |  DBUG_DAC :                       0 - |
 DDACCNTR :                    1BEC C |  DDACFIFOMID :                 1BE8 C |
 DDACPNTR :                    1BE9 C | *DEF_HSIZE_128 :                100 - |
*DEF_HSIZE_32 :                  40 - |  DEF_HSIZE_64 :                  80 - |
 DEF_MAXSTAMPCOUT :              60 - |  DEF_PRINTPAL :                6000 - |
 DEF_PRINTVRAM :                5A0 - |  DEF_PRINTVRAMW :               4E0 - |
*DEF_SAVEINFO :                186A C |  DEF_VRAM_BG :                 E000 - |
 DEF_VRAM_FG :                 C000 - |  DEF_VRAM_HSCRL :              FC00 - |
 DEF_VRAM_SPR :                F800 - |  DEF_VRAM_WD :                 D000 - |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - | *DREQCTL :                        6 - |
*DREQDEST :                       C - | *DREQFIFO :                      12 - |
*DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DRV_LOOP :                      54 C |  DRV_LOOP.CMND_0 :               EA C |
 DRV_LOOP.CMND_1 :               ED C |  DRV_LOOP.CMND_2 :              106 C |
 DRV_LOOP.CMND_3 :              140 C |  DRV_LOOP.CMND_5 :              17E C |
 DRV_LOOP.CMND_6 :              1B7 C |  DRV_LOOP.CMND_7 :              1F0 C |
 DRV_LOOP.CMND_RDSLOT :         20E C |  DRV_LOOP.DEL_ALL :             177 C |
 DRV_LOOP.GETCBYTEL :            BD C |  DRV_LOOP.GRAB_ARG :             BB C |
 DRV_LOOP.LIST :                 DA C |  DRV_LOOP.NEITHER :              94 C |
 DRV_LOOP.NEXT_CMD :             98 C |  DRV_LOOP.NOBEATS :              7B C |
 DRV_LOOP.NOTICKS :              6E C |  DRV_LOOP.NOT_PAL :             203 C |
 DRV_LOOP.SRCH_DEL :            15E C |  DRV_LOOP.SRCH_FVOL :           19C C |
 DRV_LOOP.SRCH_MODE :           126 C |  DRV_LOOP.SRCH_SLOT :           221 C |
 DRV_LOOP.SRCH_VOL :            1D5 C |  DRV_LOOP.WRTTO_DEL :           16B C |
 DRV_LOOP.WRTTO_FVOL :          1A9 C |  DRV_LOOP.WRTTO_SLOT :          135 C |
 DRV_LOOP.WRTTO_VOL :           1E2 C |  DTBL_MULTI :                   819 C |
 DTBL_SINGL :                   82F C |  DTBL_SINGL.CHNL_ULNK :         F0A C |
 DTBL_SINGL.CHNL_ULNKCUT :      F04 C |  DTBL_SINGL.CHNL_ULNKOFF :      F0A C |
 DTBL_SINGL.COMN_PANLIST :      CB5 C |  DTBL_SINGL.DAC_CUT :           B8A C |
 DTBL_SINGL.DAC_OFF :           B90 C |  DTBL_SINGL.DAC_PITCH :         B93 C |
 DTBL_SINGL.D_CONT :            C6E C |  DTBL_SINGL.EFFC :              BDB C |
 DTBL_SINGL.EFFC_D :            BF6 C |  DTBL_SINGL.EFFC_E :            C39 C |
 DTBL_SINGL.EFFC_F :            C4E C |  DTBL_SINGL.EFFC_X :            C6F C |
 DTBL_SINGL.FINE_DOWN :         C11 C |  DTBL_SINGL.FINE_UP :           C25 C |
 DTBL_SINGL.FM_CINDX :          B24 C |  DTBL_SINGL.FM_CUT :            A6F C |
 DTBL_SINGL.FM_HASVOL :         E9E C |  DTBL_SINGL.FM_KEYOFF :         A78 C |
 DTBL_SINGL.FM_OFF :            A69 C |  DTBL_SINGL.FM_SETFREQ :        A97 C |
 DTBL_SINGL.FM_SETRLIST :       DB5 C |  DTBL_SINGL.FM_TLOFF :          A80 C |
 DTBL_SINGL.FM_WRTALPAN :       B2C C |  DTBL_SINGL.FM_WRTLVOL :        AAE C |
 DTBL_SINGL.FND_OCT :           EEF C |  DTBL_SINGL.FROM_PSGN :         94B C |
 DTBL_SINGL.GET_OCT :           EE4 C |  DTBL_SINGL.INST :              CE6 C |
 DTBL_SINGL.INS_DAC :           DC5 C |  DTBL_SINGL.INS_FM :            D47 C |
 DTBL_SINGL.INS_PCM :           E19 C |  DTBL_SINGL.INS_PSG :           D11 C |
 DTBL_SINGL.INS_PSGN :          D0B C |  DTBL_SINGL.INS_PWM :           E51 C |
*DTBL_SINGL.INVL_INS :          D0A C |  DTBL_SINGL.KEEP_TLMX :         B19 C |
 DTBL_SINGL.KYCUT_PSG :         919 C |  DTBL_SINGL.KYCUT_PSGN :        916 C |
 DTBL_SINGL.KYOFF_PSG :         90C C |  DTBL_SINGL.KYOFF_PSGN :        909 C |
 DTBL_SINGL.KYPSGN_HATOFF :     923 C |  DTBL_SINGL.LINKED :            899 C |
 DTBL_SINGL.MKFM_SET :          9FA C |  DTBL_SINGL.MK_DAC :            B62 C |
 DTBL_SINGL.MK_FM :             98E C |  DTBL_SINGL.MK_FMSPC :          A0E C |
 DTBL_SINGL.MK_LIST :           8D4 C |  DTBL_SINGL.MK_PCM :            BB9 C |
 DTBL_SINGL.MK_PSG :            92A C |  DTBL_SINGL.MK_PSGN :           8E2 C |
 DTBL_SINGL.MK_PWM :            BBA C |  DTBL_SINGL.NEW_ROMDAT :        D78 C |
*DTBL_SINGL.NOFM_NOTE :         A0D C |  DTBL_SINGL.NORM_DOWN :         C0F C |
 DTBL_SINGL.NORM_UP :           C27 C |  DTBL_SINGL.NOTE :              E94 C |
 DTBL_SINGL.NOT_DAC :           9AD C |  DTBL_SINGL.NOT_DSPC :          9C2 C |
 DTBL_SINGL.NOT_PAL :           9E2 C |  DTBL_SINGL.NOT_PALP :          960 C |
 DTBL_SINGL.NO_LFO :            B61 C |  DTBL_SINGL.N_FM :              EDA C |
 DTBL_SINGL.N_INDX :            EC6 C |  DTBL_SINGL.N_PSGN :            ED5 C |
 DTBL_SINGL.N_STFREQ :          EC7 C |  DTBL_SINGL.PAN_MCD :           C9F C |
 DTBL_SINGL.PCM_PANLIST :       CBD C |  DTBL_SINGL.PSG_KEYON :         979 C |
 DTBL_SINGL.RCYL_COM :          884 C | *DTBL_SINGL.READFREQ_PCM :      BBB C |
*DTBL_SINGL.READFREQ_PWM :      BC0 C |  DTBL_SINGL.RES_PAN :           C95 C |
 DTBL_SINGL.SAME_PATCH :        DB0 C |  DTBL_SINGL.SAVE_ARG :          C63 C |
 DTBL_SINGL.SET_WAVFREQ :       BC3 C |  DTBL_SINGL.SILN_DAC :          890 C |
 DTBL_SINGL.SILN_FM :           893 C |  DTBL_SINGL.SILN_PCM :          86E C |
 DTBL_SINGL.SILN_PSG :          867 C |  DTBL_SINGL.SILN_PSG_N :        863 C |
 DTBL_SINGL.SILN_PWM :          87A C |  DTBL_SINGL.SPCREGLIST :        A61 C |
 DTBL_SINGL.TL_DOWN :           A8C C |  DTBL_SINGL.VMUCH :             988 C |
 DTBL_SINGL.VOLU :              CDD C |  DTBL_SINGL.VOL_DVLD :          C35 C |
 DTBL_SINGL.WRITE_TL :          B12 C |  DTBL_SINGL.WR_SPC :            A44 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EMU :                            0 - |
 EXTINT_DEFAULT :              15A0 C |  EXT_3 :                          C - |
*EXT_4 :                          E - |  FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    1561 C |  FMCACH_2 :                    1589 C |
 FMCACH_3 :                    15B1 C |  FMCACH_4 :                    15D9 C |
 FMCACH_5 :                    1601 C |  FMCACH_6 :                    1629 C |
 FMCACH_LIST :                 1BDA C |  FMFREQ_LIST :                 132D C |
 FMINS_BASS_CLUB :             E23E C |  FMINS_BASS_DUCK :             E1DE C |
 FMINS_BASS_GROOVE_2 :         E25E C |  FMINS_CLOSEDHAT :             E1FE C |
*FMINS_DRUMS_KICK1 :           E15E C |  FMINS_HBEAT_TOM :             E19E C |
*FMINS_PIANO_AQUA :            E17E C |  FMINS_PSYNTH_PLUS :           E27E C |
*FMINS_SP_CLOSEDHAT :          E10E C | *FMINS_SP_COWBELL :            E136 C |
 FMINS_SP_OPENHAT :            E0E6 C |  FMINS_TRUMPET_1 :             E1BE C |
 FMINS_TRUMPET_CARNIVAL :      E21E C |  FMSPECIAL :                   1CF5 C |
 FM_AUTOREG :                  11E5 C |  FM_SEND_1 :                   11E9 C |
 FM_SEND_2 :                   11F4 C | *FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :                 2EE C |  GEMADMARESUME :                2F0 C |
 GEMAFADESEQ :                  34A C |  GEMAINIT :                     278 C |
 GEMAMSTRLISTPOS :               1C C |  GEMAPLAYSEQ :                  30A C |
 GEMARESET :                    27C C |  GEMASETBEATS :                 37E C |
 GEMASETMASTERLIST :            2FC C |  GEMASETSEQVOL :                362 C |
 GEMASTOPALL :                  334 C |  GEMASTOPSEQ :                  320 C |
 GEMATEST :                     2F2 C |  GEMAUPDATE :                   28A C |
 GEMA_INIT :                    F3B C |  GEMA_INIT.END_SETUP :          F76 C |
 GEMA_INIT.SETUP_LIST :         F4B C |  GEMA_INIT.ST_COPY :            F6A C |
 GEMA_LASTBANK :               1323 C |  GEMA_LASTBANK.WRITE :         1328 C |
 GET_TICK :                     FA7 C |  GET_TICK.CTNOTICK :            FC4 C |
*GLBL_GEMABASE :               6572 - |  GLBL_LASTORG :    FFFFFFFFFFFFB800 - |
 GLBL_LASTPC :                 5CC2 - |  GLBL_MDATA_RP :               6080 - |
 GLBL_MDATA_ST :              57480 - |  GTRK_BRINSTR :                9C99 C |
 GTRK_BRINSTR.BLK :            9CA7 C |  GTRK_BRINSTR.INS :            A4CA C |
 GTRK_BRINSTR.PAT :            9CAF C |  GTRK_GIGALO :                 67E4 C |
 GTRK_GIGALO.BLK :             67F2 C |  GTRK_GIGALO.INS :             875B C |
 GTRK_GIGALO.PAT :             67FF C |  GTRK_MOVEME :                 C170 C |
 GTRK_MOVEME.BLK :             C17E C |  GTRK_MOVEME.INS :             D078 C |
 GTRK_MOVEME.PAT :             C196 C |  GTRK_SAURON :                 D0E0 C |
 GTRK_SAURON.BLK :             D0EE C |  GTRK_SAURON.INS :             E086 C |
 GTRK_SAURON.PAT :             D114 C |  GTRK_TEMPLE :                 877B C |
 GTRK_TEMPLE.BLK :             8789 C |  GTRK_TEMPLE.INS :             9C81 C |
 GTRK_TEMPLE.PAT :             879B C |  GTRK_TEST :                   6596 C |
 GTRK_TEST.BLK :               65A4 C |  GTRK_TEST.INS :               67AC C |
 GTRK_TEST.PAT :               65AC C |  GTRK_WEGOT :                  A4DA C |
 GTRK_WEGOT.BLK :              A4E8 C |  GTRK_WEGOT.INS :              C120 C |
 GTRK_WEGOT.PAT :              A4FE C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
 HEADEROUT :                   1F40 C |  HEADEROUT_E :                 1F4E C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                159E C | *HIRQ_ON :                        4 - |
 HTAG_CDSAVE :        "NIKONACD___" - | *HTAG_CDVER :                   102 - |
 HTAG_DATEINFO : "(C)USER 2024.???" - | *HTAG_DISCID :        "NIKONACD   " - |
*HTAG_DISCID_M :      "NIKONACD32X" - | *HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
 HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
 HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
*HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
*HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
 HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1F5A C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
*JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - | *MACEXP :                         7 - |
 MAINGEMASEQLIST :             6572 C | *MAPMARS_TEST :               3FB3E C |
 MAP_HARUNA :                 3DC9A C |  MAP_SISI :                   3DEFA C |
 MAP_TESTBG :                 3DF5E C |  MAP_TESTBG2 :                3E83E C |
 MARS :                           0 - |  MARSBLOCK :                     37 C |
 MARSCD :                         0 - |  MARSUPD :                     1BEF C |
*MARS_RAMCODE :                3B10 C | *MARS_RAMCODE_E :              3B10 C |
 MAX_BUFFNTRY :                   8 - |  MAX_GLOBALS :                  800 - |
 MAX_MDDMATSK :                  18 - |  MAX_MDMAPSPR :                  18 - |
 MAX_MDOBJ :                     28 - |  MAX_PALFDREQ :                   8 - |
 MAX_RCACH :                     10 - |  MAX_SC0_OPTIONS :                4 - |
 MAX_SCRNBUFF :                1000 - |  MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     10 - |
 MCD :                            0 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1BF0 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MEMORY :                     3 - |
*MDSTMP_BUFFINCR :               1A - | *MDSTMP_CELLSTORAGE :            12 - |
*MDSTMP_CURROUTFLIP :             E - | *MDSTMP_DOTINCR :                16 - |
*MDSTMP_FDROP :                  10 - | *MDSTMP_FLAGS :                   0 - |
*MDSTMP_LEN :                    1E - | *MDSTMP_STMPOUTB :                C - |
*MDSTMP_VRAMINCR :                A - | *MDSTMP_VRAMLEN :                 8 - |
*MDSTMP_VRAMMAIN :                2 - | *MDSTMP_VRAMSEC :                 4 - |
*MDSTMP_VRAMSIZE :                6 - | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :                1AEE C |  MD_READMODES.PICK_MODE :      1B0A C |
 MD_SCREEN00 :                 3B10 C | *MD_SCREEN00_E :               3CBA C |
 MD_SCREEN01 :                 3CBA C | *MD_SCREEN01_E :               4128 C |
 MD_SCREEN02 :                 4128 C | *MD_SCREEN02_E :               5504 C |
 MD_SCREEN03 :                 5504 C | *MD_SCREEN03_E :               5A7E C |
 MD_SCREEN04 :                 5A7E C | *MD_SCREEN04_E :               5CC2 C |
 MD_SCREEN07 :                 5CC2 C | *MD_SCREEN07_E :               6572 C |
*MD_SYSCODE_E :                1B8A C |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             1F63 C |  NIKONA_BUFFLIST_E :           1F83 C |
 OBJECT_ANIMATE :              1964 C |  OBJECT_ANIMATE.EXIT_ANIM :    19F2 C |
 OBJECT_ANIMATE.GOTOFRAME :    19E4 C |  OBJECT_ANIMATE.KEEPSPD :      19AA C |
 OBJECT_ANIMATE.LASTFRAME :    19EE C |  OBJECT_ANIMATE.NOANIM :       19D6 C |
 OBJECT_ANIMATE.RETURN :       19D4 C |  OBJECT_ANIMATE.SAMETHING :    1982 C |
 OBJECT_INIT :                 1880 C |  OBJECT_INIT.CLR :             1888 C |
 OBJECT_MAKE :                 18C2 C |  OBJECT_MAKE.SEARCH :          18D0 C |
*OBJECT_MDMARS_GETSPRINFO :    1AEC C |  OBJECT_RESETANIM :            192C C |
*OBJECT_RESETVARS :            1912 C |  OBJECT_RESETVARS.CLR_RAM :    1920 C |
 OBJECT_RUN :                  1890 C |  OBJECT_RUN.NEXT_ONE :         1898 C |
 OBJECT_RUN.NO_CODE :          18A4 C | *OBJECT_SET :                  18AE C |
 OBJECT_SPEED :                1934 C |  OBJECT_TOUCH :                19F8 C |
 OBJECT_TOUCH.CHECK_THIS :     1A2E C |  OBJECT_TOUCH.EXIT_THIS :      1A28 C |
 OBJECT_TOUCH.NEXT :           1A10 C |  OBJECT_TOUCH.NOT_YTOP :       1AEA C |
 OBJECT_TOUCH.SET_OK :         1AE8 C |  OBJECT_TOUCH.SKIP :           1A1E C |
 OBJSET_ERROR :                18E4 C |  OBJSET_GO :                   18EE C |
 OBJSET_GO.CLR :               1902 C |  OBJSET_GO.EXIT_THIS :         1908 C |
 OBJSET_GO.FROM_DEL :          18FC C |  OBJ_ANIM_ICUR :                 26 - |
 OBJ_ANIM_INDX :                 24 - |  OBJ_ANIM_NUM :                  22 - |
 OBJ_ANIM_SPD :                  27 - |  OBJ_ATTR :                      1F - |
 OBJ_CODE :                       0 - |  OBJ_FRAME :                     20 - |
 OBJ_INDEX :                     1C - |  OBJ_LEN :                       68 - |
 OBJ_RAM :                       28 - |  OBJ_SIZE_X :                    10 - |
 OBJ_SIZE_Y :                    12 - |  OBJ_SIZE_Z :                    14 - |
*OBJ_STATUS :                    1E - |  OBJ_SUBID :                     1D - |
 OBJ_X :                          4 - |  OBJ_X_SPD :                     16 - |
 OBJ_Y :                          8 - |  OBJ_Y_SPD :                     18 - |
 OBJ_Z :                          C - |  OBJ_Z_SPD :                     1A - |
 ON_HOLD :                        2 - |  ON_PRESS :                       4 - |
 ON_RELEASE :                     6 - | *PACKING :                        0 - |
*PADDING :                        0 - | *PAD_ID :                         0 - |
*PAD_VER :                        1 - |  PALFD_DELAY :                    1 - |
 PALFD_INCR :                     3 - |  PALFD_LEN :                      8 - |
 PALFD_NUM :                      6 - |  PALFD_REQ :                      0 - |
 PALFD_START :                    2 - | *PALFD_TARGET :                   4 - |
 PALFD_TIMER :                    5 - | *PALMARS_HARUNA :             3FF3E C |
*PALMARS_SISI :               3FF5E C | *PALMARS_TEST :               3F9BE C |
*PALMARS_TEST2 :              3FF80 C |  PALMODE :                       3E C |
 PAL_HARUNA :                 3DC7A C |  PAL_SISI :                   3DEDA C |
 PAL_TESTBG :                 3DF3E C |  PAL_TESTBG2 :                3E81E C |
 PARP :                          34 - |  PCMCOM :                      14AD C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.PALCLEAR :          254 C |  PICO_ENTRY.WAIT_DMA :          23E C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
*PICO_USERINT :                 202 C |  PLC_HARUNA :                 3DE4A C |
 PROC_CHIPS :                   634 C |  PSGCOM :                      1525 C |
 PSGFREQ_LIST :                1345 C |  PSGHATMODE :                  1CF4 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - |  PWMCOM :                      14ED C |
*PWMCTL :                        31 - | *PWMINS_NADIE :             205D500 C |
*PWMINS_PIANO :             2079456 C | *PWMINS_PKICK :             207DB72 C |
*PWMINS_PTOM :              207E2EC C | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFE98C C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFD7D8 C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFE986 C |  RAM_HORSCROLL :   FFFFFFFFFFFFCC40 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFD7DC C |  RAM_INPUTDATA :   FFFFFFFFFFFFD8F8 C |
*RAM_MCDEXIT :     FFFFFFFFFFFFE998 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFD7F8 C |  RAM_MDVIDCLR_E :  FFFFFFFFFFFFD654 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFC800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJECTS :     FFFFFFFFFFFFD938 C |  RAM_PALETTE :     FFFFFFFFFFFFD550 C |
 RAM_PALETTEFADE : FFFFFFFFFFFFD5D0 C |  RAM_PALFADELIST : FFFFFFFFFFFFC800 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFD7F8 C | *RAM_SAVEENABLE :  FFFFFFFFFFFFE992 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFD7FC C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFD7F8 C |  RAM_SCREENMODE :  FFFFFFFFFFFFE994 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFE996 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SETPRNTVRAM : FFFFFFFFFFFFD7E0 C |
 RAM_SETPRNTVRAMW :                                        FFFFFFFFFFFFD7E2 C |
 RAM_SOUNDBUFF :           FFFFFF00 - |  RAM_SPRITES :     FFFFFFFFFFFFD050 C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFD7DE C |  RAM_SPRMAPLIST :  FFFFFFFFFFFFC840 C |
 RAM_SPRPZLIST :   FFFFFFFFFFFFC9C0 C |  RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDOM :   FFFFFFFFFFFFE97C C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFE978 C |
*RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C | *RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFE980 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFD650 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFD658 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFD652 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFD7EE C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFD7F0 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFD7F2 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFD7F4 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFD7F6 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFD7E6 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFD7E4 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFD7EC C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFD7EA C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFD7E8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFD000 C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
*RES :                            2 - |  ROM_END :                    7EEA6 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1F54 C |
 SBEATACC :                    1CF9 C |  SBEATPTCK :                   1CFB C |
 SET_CHIPS :                    616 C |  SET_CHIPS.TRK_BUFFRS :         61E C |
*SET_DEBUGMODE :                  0 - | *SET_DEFAUTODMA :               480 - |
 SET_INITMODE :                   7 - |  SET_NULLVRAM :                 7FE - |
 SET_RAMLIMIT :              FFFC00 - |  SET_SRAMSIZE :                 100 - |
 SET_WRAMSIZE :               3C000 - | *SHIFT :                          2 - |
 SIZEOF_INPUT :                  10 - |  SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |
 SIZEOF_MDRAM :    FFFFFFFFFFFFE99A C |  SIZEOF_MDSYS :    FFFFFFFFFFFFE99A C |
 SIZEOF_MDVID :    FFFFFFFFFFFFD7F8 C | *SIZEOF_SAVEINFO : FFFFFFFFFFFFD800 C |
 SLV :                           10 - |  SNDLOCKZ80 :                   28E C |
 SNDREQ_ENTER :                 292 C | *SNDREQ_ENTER.WAIT :            2AE C |
 SNDREQ_EXIT :                  2B4 C | *SNDREQ_SADDR :                 2D8 C |
 SNDREQ_SBYTE :                 2E0 C |  SNDREQ_SCMD :                  2C6 C |
 SNDREQ_SLONG :                 2D4 C |  SNDREQ_SWORD :                 2DC C |
 SNDUNLOCKZ80 :                 290 C |  SOUND_INIT :                  14F4 C |
 SOUND_UPDATE :                14F0 C |  STANDBY :                        3 - |
 SYSBCD_SPOUT :                17A4 C | *SYSMARS_FRAMEBUFFER :       840000 - |
*SYSMARS_ID :                A130EC - | *SYSMARS_OVERWRITE :         860000 - |
 SYSMARS_REG :               A15100 - | *SYSMARS_SVDP :              A15180 - |
 SYSMCD_REG :                A12000 - | *SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :            1860 C |  SYSRND_MKVALUE :              15BC C |
 SYSRND_MKVALUE.HAS_SEED :     15CE C | *SYSTEM_BCD_ADDB :             177C C |
 SYSTEM_BCD_ADDL :             178A C | *SYSTEM_BCD_ADDW :             1784 C |
*SYSTEM_BCD_SUBB :             1754 C |  SYSTEM_BCD_SUBL :             1762 C |
*SYSTEM_BCD_SUBW :             175C C |  SYSTEM_DEFAULT :              157C C |
 SYSTEM_DEFAULT.CLR_LOOP :     158A C |  SYSTEM_DICEROLL :             1606 C |
*SYSTEM_DICEROLL_SEED :        15E6 C |  SYSTEM_DMAENTER_RAM :         14E8 C |
 SYSTEM_DMAENTER_ROM :         14AE C |  SYSTEM_DMAEXIT_RAM :          14EC C |
 SYSTEM_DMAEXIT_ROM :          14B2 C |  SYSTEM_INIT :                 1434 C |
 SYSTEM_INIT.CLRINPUT :        1468 C |  SYSTEM_INPUT :                14F8 C |
 SYSTEM_INPUT.BAD_Y :          1554 C |  SYSTEM_INPUT.NO_BIT :         1566 C |
 SYSTEM_INPUT.PAGE_IT :        1560 C |  SYSTEM_INPUT.X_VALID :        153C C |
*SYSTEM_MDMARS_SENDDATA :      187A C | *SYSTEM_MDMCD_CDDAFADE :       1868 C |
*SYSTEM_MDMCD_CDDAPLAY :       184E C | *SYSTEM_MDMCD_CDDAPLAYL :      1858 C |
*SYSTEM_MDMCD_CDDASTOP :       1866 C | *SYSTEM_MDMCD_CHECKHOME :      181C C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                                    1842 C |
*SYSTEM_MDMCD_CHECKWRAM :      17F6 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                                       1806 C |
 SYSTEM_MDMCD_EXITSHELL :      184C C |  SYSTEM_MDMCD_GIVEWRAM :       180C C |
*SYSTEM_MDMCD_INTERRUPT :      17D6 C | *SYSTEM_MDMCD_RDFILE_RAM :     1818 C |
*SYSTEM_MDMCD_RDFILE_WRAM :    181A C | *SYSTEM_MDMCD_SUBENTER :       17E6 C |
*SYSTEM_MDMCD_SUBTASK :        17E8 C | *SYSTEM_MDMCD_SUBWAIT :        17E4 C |
 SYSTEM_MDMCD_WAITWRAM :       17EA C |  SYSTEM_RANDOM :               15AC C |
 SYSTEM_RANDOM_SEED :          15A2 C |  SYSTEM_RENDER :               1474 C |
 SYSTEM_RENDER.FORGOT_DISP :   1498 C | *SYSTEM_RENDER.FROM_LATE :     1492 C |
 SYSTEM_RENDER.WAIT_EARLY :    1482 C |  SYSTEM_RENDER.WAIT_VBLANK :   149A C |
 SYSTEM_SETDATABANK :          187E C |  SYSTEM_SETINTJUMPS :          17BC C |
 SYSTEM_SETINTJUMPS.NO_EXINT : 17D4 C |  SYSTEM_SETINTJUMPS.NO_HINT :  17CC C |
 SYSTEM_SETINTJUMPS.NO_VINT :  17C4 C | *SYSTEM_SINEWAVE :             162A C |
*SYSTEM_SINEWAVE_COS :         1620 C |  SYSTEM_SRAMINIT :             156E C |
*SYSTEM_SRAMINIT.ALREADY_SET : 1572 C | *SYSTEM_SRAMINIT.CANT_USE :    1570 C |
 SYSTEM_SRAMLOAD :             1578 C |  SYSTEM_SRAMSAVE :             1574 C |
*SYS_CTRL_1 :                A10009 - | *SYS_CTRL_2 :                A1000B - |
*SYS_CTRL_3 :                A1000D - | *SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :              14B4 C |
 SYS_MARSSLVCMD.WAIT_EXIT :    14DA C |  SYS_SINEWAVE :                162E C |
 SYS_SINEWAVE.LOC_7EFA :       163C C |  SYS_SINEWAVE.LOC_7F0C :       164E C |
 SYS_SINEWAVE.SINE_DATA :      1654 C | *SYS_SRAM :                  200000 - |
*SYS_TMSS :                  A14000 - | *TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 65D C |  TBLBUFF_READ.DONT_RES :        72A C |
 TBLBUFF_READ.DO_CHIP :         6C5 C |  TBLBUFF_READ.GRAB_LINK :       70E C |
 TBLBUFF_READ.HAS_INDX :        6A1 C |  TBLBUFF_READ.INVLDL :          752 C |
*TBLBUFF_READ.KEEP_IT :         6F3 C |  TBLBUFF_READ.L_HIPRIO :        7DC C |
 TBLBUFF_READ.NEW_CHIP :        78F C |  TBLBUFF_READ.NEW_LINK :        7D9 C |
 TBLBUFF_READ.NEW_LINK_O :      7D1 C |  TBLBUFF_READ.NEW_LINK_Z :      7CD C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7C6 C |  TBLBUFF_READ.NEXT_INDX :       694 C |
 TBLBUFF_READ.NEXT_PRIO :       7B1 C |  TBLBUFF_READ.NO_INDX :         6BD C |
 TBLBUFF_READ.PASS_2 :          7B0 C |  TBLBUFF_READ.PICK_TBL :        7FD C |
 TBLBUFF_READ.REFILL :          78B C |  TBLBUFF_READ.REROLL :          768 C |
 TBLBUFF_READ.RNOT_PSG :        78D C |  TBLBUFF_READ.SAME_LINK :       72D C |
 TBLBUFF_READ.SET_ASFULL :      7FA C |  TBLBUFF_READ.SINGL_FREE :      7EA C |
 TBLBUFF_READ.SINGL_LINK :      75A C |  TBLBUFF_READ.SRCH_FREE :       7A0 C |
 TBLBUFF_READ.SRCH_LINK :       739 C |  TBLBUFF_READ.SRCH_LLOOP :      743 C |
 TBLBUFF_READ.TRACK_CONT :      67D C |  TBLBUFF_READ.VALID :           692 C |
 TBLFM :                       1A6E C |  TBLFM3 :                      1ACE C |
 TBLFM6 :                      1AE6 C |  TBLLIST :                     1A60 C |
 TBLPCM :                      1B00 C |  TBLPSG :                      1C00 C |
 TBLPSGN :                     1BC2 C |  TBLPWM :                      1C4A C |
 TBLZ_CLEAR :                   F22 C |  TBLZ_CLEAR.CLRFULL :           F30 C |
*TEXTR_HARUNA :               10900 C |  TH :                      20000000 - |
 TICKCNT :                     1BFF C |  TICKFLAG :                    1BFE C |
 TICKSPSET :                   1BFD C | *TIME :               "05:32:18 AM" - |
*TIMERCTL :                      30 - | *TMR :                           2C - |
 TRACK_OUT :                    5D1 C |  TRACK_OUT.INDX_DEL :           5DF C |
 TRACK_OUT.NOTHIN :             60D C |  TRANSFERROM :                  FC8 C |
 TRANSFERROM.DOUBLE :           FEB C |  TRANSFERROM.FROM_RAM :        100F C |
 TRANSFERROM.TRANSFER :        102F C |  TRANSFERROM.WAIT :            1026 C |
 TRANSFERROM.X68KLAST :        1068 C |  TRANSFERROM.X68KLOOP :        1054 C |
 TRANSFERROM.X68KLPWT :        1076 C |  TRANSFERROM.X68KNOCARRY :     1009 C |
 TRANSFERROM.X68KPWTLP :       1078 C |  TRKBLKS_0 :                   16D1 C |
 TRKBLKS_1 :                   16D9 C |  TRKBLKS_2 :                   16E1 C |
 TRKBLKS_3 :                   16E9 C |  TRKBUFF_0 :                   16F1 C |
 TRKBUFF_1 :                   1730 C |  TRKBUFF_2 :                   176F C |
 TRKBUFF_3 :                   17AE C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F10 C |  TRKCACH_2 :                   1F20 C |
 TRKCACH_3 :                   1F30 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   1651 C |  TRKHDRS_1 :                   1671 C |
 TRKHDRS_2 :                   1691 C |  TRKHDRS_3 :                   16B1 C |
 TRKINFOCACH :                 1F50 C |  TRK_BANKBLK :                   16 - |
 TRK_BANKHEADS :                 15 - |  TRK_BLOCKS :                     4 - |
 TRK_CACH :                       8 - |  TRK_CACHHALF :                  10 - |
 TRK_CHNINDX :                   25 - |  TRK_CURRBLK :                   13 - |
 TRK_MAXCHNL :                   17 - |  TRK_PATT :                       6 - |
 TRK_PRIORITY :                  14 - |  TRK_READ :                       A - |
 TRK_ROMBLKS :                   22 - |  TRK_ROMINST :                   1F - |
 TRK_ROMPATT :                   1C - |  TRK_ROMPATTREAD :               19 - |
 TRK_ROWPAUSE :                  11 - |  TRK_ROWS :                       C - |
 TRK_SEQID :                      1 - |  TRK_SETBLK :                     2 - |
 TRK_STATUS :                     0 - |  TRK_TICKSET :                    3 - |
 TRK_TICKTMR :                   12 - |  TRK_VOLFDTARGET :               18 - |
 TRK_VOLMASTER :                  E - | *TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_TRACK :                    234 C |
 UPD_TRACK.CHNL_FREE :          34E C |  UPD_TRACK.CONT_CHNL :          359 C |
 UPD_TRACK.DECROW :             2FD C |  UPD_TRACK.DECROW_E :           300 C |
 UPD_TRACK.EFFECT_FILL :        525 C |  UPD_TRACK.EFF_A :              3D3 C |
 UPD_TRACK.EFF_B :              3E4 C |  UPD_TRACK.EFF_C :              402 C |
 UPD_TRACK.EXIT :               2F1 C |  UPD_TRACK.FADE_OUT :           27E C |
 UPD_TRACK.FIRST_BLK :          459 C |  UPD_TRACK.FIRST_FILL :         52C C |
 UPD_TRACK.FIRST_HEAD :         4A1 C |  UPD_TRACK.GRAB_RHEAD :         5BE C |
 UPD_TRACK.HAS_NOTE :           308 C |  UPD_TRACK.INC_CPATT :          405 C |
 UPD_TRACK.KEEP_BLK :           477 C |  UPD_TRACK.KEEP_IT :            4C7 C |
 UPD_TRACK.KEEP_VOL :           294 C |  UPD_TRACK.NEXT_CHNL :          333 C |
 UPD_TRACK.NEXT_NOTE :          2E1 C |  UPD_TRACK.NO_EFF :             39F C |
 UPD_TRACK.NO_GLBL :            56C C |  UPD_TRACK.NO_INS :             381 C |
 UPD_TRACK.NO_NOTE :            376 C |  UPD_TRACK.NO_VOL :             38C C |
 UPD_TRACK.OLD_TYPE :           36A C |  UPD_TRACK.RAN_OUT :            413 C |
 UPD_TRACK.READ_TRACK :         251 C |  UPD_TRACK.ROW_ACTIVE :         2DA C |
 UPD_TRACK.SET_TRACK :          43D C |  UPD_TRACK.SFXMD :              29E C |
 UPD_TRACK.SRCH_NEW :           32E C |  UPD_TRACK.TOO_MUCH :           28A C |
 UPD_TRACK.TRACK_END :          516 C |  UPD_TRACK.TRK_BUFFRS :         23C C |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_BUILDSPRITES :           55E C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                                        716 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R : 6F4 C |  VIDEO_BUILDSPRITES.DONT_ADD :  6C8 C |
 VIDEO_BUILDSPRITES.EX_VRAM :   614 C |  VIDEO_BUILDSPRITES.EX_VRAMS :  638 C |
 VIDEO_BUILDSPRITES.EX_YEXT :   69C C |  VIDEO_BUILDSPRITES.FIRST_SPR : 57E C |
*VIDEO_BUILDSPRITES.FREEZE :    6EC C |  VIDEO_BUILDSPRITES.MK_PZ :     5EA C |
 VIDEO_BUILDSPRITES.NEXT :      5C6 C |  VIDEO_BUILDSPRITES.NEXT_PZ :   586 C |
 VIDEO_BUILDSPRITES.NO_MAP :    6DC C |  VIDEO_BUILDSPRITES.NO_PZ :     6D8 C |
*VIDEO_BUILDSPRITES.NO_SLOT :   6E2 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                                        72A C |
 VIDEO_BUILDSPRITES.NO_SLOT_R : 708 C |  VIDEO_BUILDSPRITES.NO_SLOT_S : 5B6 C |
 VIDEO_BUILDSPRITES.STOP_ALL :  6E6 C |  VIDEO_BUILDSPRITES.VRAM_H :    668 C |
 VIDEO_BUILDSPRITES.VRAM_V :    650 C |  VIDEO_CLEAR :                  764 C |
 VIDEO_CLEAR.CLR_ME :           76E C |  VIDEO_CLEARSCREEN :            784 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :  7AA C | *VIDEO_COPY :                   AD0 C |
 VIDEO_COPY.DMAW :              ADA C |  VIDEO_COPY.DMA_W :             B36 C |
 VIDEO_DEFAULT :                420 C |  VIDEO_DISPLAYOFF :             7BE C |
 VIDEO_DISPLAYON :              7B2 C |  VIDEO_DMAOFF :                 7D6 C |
 VIDEO_DMAON :                  7CA C |  VIDEO_FADEIN_FULL :            F06 C |
 VIDEO_FADEOUT_FULL :           F18 C |  VIDEO_FADEPAL :                F6A C |
*VIDEO_FADEPAL_LIST :           FC0 C |  VIDEO_FADEPAL_LIST.INVALID :   FDA C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :  FCE C |  VIDEO_FILL :                   A58 C |
 VIDEO_INIT :                   394 C |  VIDEO_INIT.CLR_D :             3CA C |
 VIDEO_INIT.CLR_PREQ :          3E2 C |  VIDEO_INIT.CLR_RAM :           39E C |
 VIDEO_INIT.COPY_DMA :          3B0 C |  VIDEO_INIT.DEF_REGSET :        418 C |
 VIDEO_INIT.DMA_ENTRY :         408 C | *VIDEO_INTENABLE :              7EE C |
 VIDEO_LOADART :                946 C |  VIDEO_LOADART.BAD_SIZE :       9E0 C |
 VIDEO_LOADART.LAST_SET :       996 C |  VIDEO_LOADART.MK_SET :         99E C |
 VIDEO_LOADART.NORMAL :         990 C |  VIDEO_LOADART.RAM_WRITE :      9E2 C |
 VIDEO_LOADART.SHARED_SETUP :   9F6 C | *VIDEO_LOADART_LIST :           A38 C |
 VIDEO_LOADART_LIST.INVALID :   A52 C |  VIDEO_LOADART_LIST.NEXT_ONE :  A44 C |
 VIDEO_LOADMAP :                C12 C |  VIDEO_LOADMAP.BAD_SIZE :       C82 C |
 VIDEO_LOADMAP.MK_CELL :        C72 C |  VIDEO_LOADMAP.NON_BLANK :      C70 C |
 VIDEO_LOADMAP.X_LOOP :         C60 C |  VIDEO_LOADMAP.Y_LOOP :         C4C C |
 VIDEO_LOADMAPV :               C88 C |  VIDEO_LOADMAPV.BAD_SIZE :      D0A C |
 VIDEO_LOADMAPV.BAD_SIZE_D :    D72 C |  VIDEO_LOADMAPV.DBLE_MODE :     D10 C |
 VIDEO_LOADMAPV.MK_CELL :       CF4 C |  VIDEO_LOADMAPV.MK_CELL_D :     D5C C |
 VIDEO_LOADMAPV.NON_BLANK :     CF2 C |  VIDEO_LOADMAPV.NON_BLANK_D :   D54 C |
 VIDEO_LOADMAPV.X_LOOP :        CCC C |  VIDEO_LOADMAPV.X_LOOP_D :      D2A C |
 VIDEO_LOADMAPV.Y_LOOP :        CD2 C |  VIDEO_LOADMAPV.Y_LOOP_D :      D30 C |
 VIDEO_LOADPAL :                F74 C | *VIDEO_LOADPAL_LIST :           FA0 C |
 VIDEO_LOADPAL_LIST.INVALID :   FBA C |  VIDEO_LOADPAL_LIST.NEXT_ONE :  FAE C |
 VIDEO_MAKEDMAENTRY :           B4C C |  VIDEO_MAKEDMAENTRY.LAST_SET :  B9C C |
 VIDEO_MAKEDMAENTRY.MK_SET :    BA4 C |  VIDEO_MAKEDMAENTRY.NORMAL :    B96 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :   C10 C |  VIDEO_MAKEFADE :               F2C C |
*VIDEO_MAKESPR :               12DA C |  VIDEO_MAKESPR.CHK_FREE :      12E6 C |
 VIDEO_MAKESPR.MK_SPR :        12F8 C |  VIDEO_MAKESPRMAP :            138A C |
 VIDEO_MAKESPRMAP.CHK_FREE :   1396 C |  VIDEO_MAKESPRMAP.MK_SPR :     13A6 C |
 VIDEO_MAKESPRMAP_DMA :        1372 C | *VIDEO_MDMARS_MAKEFADE :        F2A C |
 VIDEO_PRINT :                 1022 C |  VIDEO_PRINT.EXIT :            1088 C |
 VIDEO_PRINT.HEX_INCR :        10FC C |  VIDEO_PRINT.LOOP :            1052 C |
 VIDEO_PRINT.MK_VALUE :        10D8 C |  VIDEO_PRINT.NEXT :            1082 C |
 VIDEO_PRINT.Q_LOOP :          1068 C |  VIDEO_PRINT.SHOW_24 :         10CC C |
*VIDEO_PRINT.SHOW_BYTE :       10BC C |  VIDEO_PRINT.SHOW_LONG :       10D4 C |
 VIDEO_PRINT.SHOW_NIBBL :      10EC C |  VIDEO_PRINT.SHOW_WORD :       10C4 C |
 VIDEO_PRINT.SPECIAL :         108E C | *VIDEO_PRINTDEFPAL :           100C C |
 VIDEO_PRINTDEFPAL_FADE :      1004 C |  VIDEO_PRINTINIT :              FF0 C |
 VIDEO_PRINTINITW :             FE0 C |  VIDEO_PRINTW :                110C C |
 VIDEO_PRINTW.EXIT :           11DA C |  VIDEO_PRINTW.GET_PREVAL :     12BC C |
 VIDEO_PRINTW.HEX_INCR :       12CA C |  VIDEO_PRINTW.LOOP :           115A C |
 VIDEO_PRINTW.MK_VALUE :       122E C |  VIDEO_PRINTW.MK_VALUE_IN :    122A C |
 VIDEO_PRINTW.NEXT :           11D2 C |  VIDEO_PRINTW.NIBBL_CONT :     12B4 C |
 VIDEO_PRINTW.NIBBL_NORM :     1280 C |  VIDEO_PRINTW.NO_DBLE_Y :      1132 C |
 VIDEO_PRINTW.SHOW_24 :        121E C | *VIDEO_PRINTW.SHOW_BYTE :      120E C |
 VIDEO_PRINTW.SHOW_LONG :      1226 C |  VIDEO_PRINTW.SHOW_NIBBL :     1242 C |
 VIDEO_PRINTW.SHOW_WORD :      1216 C |  VIDEO_PRINTW.SPECIAL :        11E0 C |
 VIDEO_PRINTW.VER_CONT :       11CC C |  VIDEO_PRINTW.VER_NORMAL :     119A C |
 VIDEO_RENDER :                 46E C |  VIDEO_RENDER.END :             552 C |
 VIDEO_RENDER.EXIT :            55C C |  VIDEO_RENDER.NEXT :            538 C |
 VIDEO_RESOLUTION :             840 C |  VIDEO_RESOLUTION.DOUBLE :      882 C |
 VIDEO_RESOLUTION.EX_BIT :      874 C |  VIDEO_RUNFADE :                D76 C |
 VIDEO_RUNFADE.ALL_BLACK :      E42 C |  VIDEO_RUNFADE.BUSY_TIMER :     DBC C |
 VIDEO_RUNFADE.FADE_IN :        E50 C |  VIDEO_RUNFADE.FADE_LIST :      DC8 C |
 VIDEO_RUNFADE.FADE_OUT :       DE0 C | *VIDEO_RUNFADE.FDIN_NEND :      EE6 C |
*VIDEO_RUNFADE.FDOUT_NEND :     E4E C |  VIDEO_RUNFADE.NEXT_COLOR :     DEE C |
 VIDEO_RUNFADE.NEXT_IN :        E5C C |  VIDEO_RUNFADE.NEXT_REQ :       D7A C |
 VIDEO_RUNFADE.NOTHING :        DD8 C |  VIDEO_RUNFADE.NO_REQ :         DC2 C |
 VIDEO_RUNFADE.PFADE_DEL :      DD8 C |  VIDEO_RUNFADE.SAME_IN :        ED0 C |
 VIDEO_SETMAPSIZE :             920 C | *VIDEO_SETSPR :                12D0 C |
 VIDEO_SETSPRMAP :             1368 C | *VIDEO_SETSPRMAP_DMA :         135E C |
 VIDEO_UPDMAPVRAM :             894 C |  VIDEO_UPDSPRHVRAM :            8E6 C |
 VIDEO_WAITFADE :               EE8 C |  VIDEO_WAITFADE.LOOP :          EE8 C |
 VIDEO_WAITFADE.NEXT_ONE :      EF6 C |  VIDMDSPR_MKSPR :              12FA C |
 VIDMDSPR_MKSPR.DONT_ADD :     1324 C |  VIDMDSPR_MKSPRMAP :           13A8 C |
 VIDMD_CERROR :                1354 C | *VIDMD_CFREEZE :               135C C |
 VIDMD_PAL :                    F7C C |  VIDMD_PAL.BAD :                F9A C |
 VIDMD_PAL.LOOP :               F94 C |  VIDMKFADE_GO :                 F44 C |
 VIDPRINT_INIT :                FFE C |  VID_CHECKLASTSPR :             732 C |
 VID_CHECKLASTSPR.BLNK_FIRST :  74C C |  VID_CHECKLASTSPR.LAST_ONE :    752 C |
 VID_CHECKLASTSPR.SPR_EXIT :    762 C | *VID_FILLGO :                   A60 C |
 VID_FILLGO.DMAW :              A66 C |  VID_FILLGO.DMA_W :             ABA C |
 VID_FONTDEFPAL :              1012 C |  VID_MKDMACARRY :              1384 C |
 VID_MKDMANEXT :               137A C |  VID_MKMAPDMA :                13E4 C |
 VID_MKMAPDMA.NEXT_PZ :        1404 C |  VID_MKMAPDMA.NO_DMA :         142E C |
 VID_WRTREG01 :                 7E0 C | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :                159C C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1BFC C |  WAVE_LEN :                    1BF4 C |
 WAVE_LOOP :                   1BF7 C |  WAVE_PITCH :                  1BFA C |
 WAVE_START :                  1BF1 C |  WAVFREQ_CDPCM :               144D C |
 WAVFREQ_LIST :                13ED C |  X68KSRCLSB :                  1CF7 C |
 X68KSRCMID :                  1CF8 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
*Z80_BUS :                   A11100 - | *Z80_CODE :                    1B8A C |
*Z80_CODE_END :                3B10 C | *Z80_CODE_FILE_E :             3B10 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      50 C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                      40 - |  ZDRVFWRT :                      2E - |
*ZDRVMARSBLK :                   37 - | *ZDRVMCDBLK :                    36 - |
*ZDRVRAMLEN :                    30 - | *ZDRVRAMSRC :                    35 - |
*ZDRVROMBLK :                    2F - | *ZMARS_SEND :                   F3A C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_EFFBUFF :                   9 - |
 ZTBL_FM_ALFD :                   C - |  ZTBL_FM_KEYS :                   F - |
 ZTBL_FM_LFO :                    E - |  ZTBL_FM_PMAM :                   D - |
 ZTBL_FREQINDX :                  5 - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
*ZTBL_PRIORITY :                  2 - |  ZTBL_VART0 :                     A - |
 ZTBL_VART1 :                     B - |  ZTBL_VOLUME :                    7 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_CCR :                    FFFFFE92 - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
*_OVERWRITE :              24020000 - | *_PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_VDPREG :                 20004100 - |

   1258 symbols
    354 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 09/14/2024 05:32:18 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMALIST                             
GEMATRK                               | GINSDAC                              
GINSFM                                | GINSFM3                              
GINSNULL                              | GINSPCM                              
GINSPSG                               | GINSPSGN                             
GINSPWM                               | GSMPLDATA                            
MARS_VRAMEND                          | MARS_VRAMSTART                       
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     29 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 09/14/2024 05:32:18 AM


  Defined Structures/Unions:
  --------------------------

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM
3 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 09/14/2024 05:32:18 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 09/14/2024 05:32:18 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.24 seconds assembly time

  16887 lines source file
  17902 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
