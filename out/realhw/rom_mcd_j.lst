 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 09/21/2024 02:15:52 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$7                  SET_INITMODE	equ 7		; Starting screen mode number on boot, for debugging.
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)USER 2024.???"  HTAG_DATEINFO	equ "(C)USER 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SEGA CD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name (if SET_SAMECDINFO is False)
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MOMPASS>2
(1)  231/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  232/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  233/       0 :                     		endif
(1)  234/       0 :                     	endif
(1)  235/       0 :                     
(1)  236/       0 :                     	if MARS
(1)  237/       0 :                     		if * >= $900000+$100000
(1)  238/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  239/       0 :                     		endif
(1)  240/       0 :                     
(1)  241/       0 :                     		dephase
(1)  242/       0 :                     	elseif MCD|MARSCD
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     
(1)  245/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  246/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  247/       0 :                     		rompad mpadlbl
(1)  248/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  249/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  250/       0 :                     	endif
(1)  251/       0 :                     	endm
(1)  252/       0 :                     
(1)  253/       0 :                     ; --------------------------------------------
(1)  254/       0 :                     
(1)  255/       0 :                     binclude_dma	macro lblstart,file
(1)  256/       0 :                     	if MARS
(1)  257/       0 :                     GLBL_LASTPHDMA	set *
(1)  258/       0 :                     	dephase
(1)  259/       0 :                     GLBL_PHASEDMA	set *
(1)  260/       0 :                     		endif
(1)  261/       0 :                     
(1)  262/       0 :                     		align 2
(1)  263/       0 :                     lblstart	label *
(1)  264/       0 :                     		binclude file
(1)  265/       0 :                     		align 2
(1)  266/       0 :                     
(1)  267/       0 :                     	if MARS
(1)  268/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  269/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  270/       0 :                     	endif
(1)  271/       0 :                     		endm
(1)  272/       0 :                     
(1)  273/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  274/       0 :                     	if MARS
(1)  275/       0 :                     GLBL_LASTPHDMA	set *
(1)  276/       0 :                     	dephase
(1)  277/       0 :                     GLBL_PHASEDMA	set *
(1)  278/       0 :                     		endif
(1)  279/       0 :                     
(1)  280/       0 :                     		align 2
(1)  281/       0 :                     lblstart	label *
(1)  282/       0 :                     		binclude file
(1)  283/       0 :                     lblend		label *
(1)  284/       0 :                     		align 2
(1)  285/       0 :                     
(1)  286/       0 :                     	if MARS
(1)  287/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  288/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  289/       0 :                     	endif
(1)  290/       0 :                     		endm
(1)  291/       0 :                     
(1)  292/       0 :                     ; --------------------------------------------
(1)  293/       0 :                     ; 32X graphics pack Enter/Exit
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     
(1)  296/       0 :                     mars_VramStart	macro thelabel
(1)  297/       0 :                     thelabel label *
(1)  298/       0 :                     		phase 0
(1)  299/       0 :                     		endm
(1)  300/       0 :                     
(1)  301/       0 :                     mars_VramEnd	macro thelabel
(1)  302/       0 :                     		align 8
(1)  303/       0 :                     .end:
(1)  304/       0 :                     ; 		if MOMPASS == 1
(1)  305/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  306/       0 :                     ; 		endif
(1)  307/       0 :                     		dephase
(1)  308/       0 :                     thelabel label *
(1)  309/       0 :                     		endm
(1)  310/       0 :                     
(1)  311/       0 :                     ; --------------------------------------------
(1)  312/       0 :                     ; Fill CD sectors
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     
(1)  315/       0 :                     fillSectors macro num
(1)  316/       0 :                     	rept num
(1)  317/       0 :                     		align $800-1
(1)  318/       0 :                     		dc.b 0
(1)  319/       0 :                     	endm
(1)  320/       0 :                     	endm
(1)  321/       0 :                     
(1)  322/       0 :                     ; ====================================================================
(1)  323/       0 :                     ; ------------------------------------------------------------
(1)  324/       0 :                     ; Nikona CODE macros
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     
(1)  327/       0 :                     ; --------------------------------------------
(1)  328/       0 :                     ; VDP color debug
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     
(1)  331/       0 :                     vdp_showme	macro color
(1)  332/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  333/       0 :                     		move.w	#color,(vdp_data).l
(1)  334/       0 :                     		endm
(1)  335/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$20                 MAX_MCDSTAMPS	equ 32		; !! Maximum SCD Stamps
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; Stamp data buffer
(1)   24/       0 :                     ; Fixed size of $20 bytes
(1)   25/       0 :                     
(1)   26/       0 :                     cdstamp		struct
(1)   27/       0 :                     flags		ds.b 1		; Flags
(1)   28/       1 :                     map		ds.b 1		; Map slot index (in WRAM_MdStampList)
(1)   29/       2 :                     cx		ds.w 1		; Center Texture X
(1)   30/       4 :                     cy		ds.w 1		; Center Texture Y
(1)   31/       6 :                     x		ds.w 1		; Stamp X position
(1)   32/       8 :                     y		ds.w 1		; Stamp Y position
(1)   33/       A :                     wdth		ds.w 1		; Stamp width
(1)   34/       C :                     hght		ds.w 1		; Stamp height
(1)   35/       E :                     scale		ds.w 1
(1)   36/      10 :                     rot		ds.w 1
(1)   37/      12 :                     		ds.w 1
(1)   38/      14 :                     		ds.w 1
(1)   39/      16 :                     		ds.w 1
(1)   40/      18 :                     		ds.w 1
(1)   41/      1A :                     		ds.w 1
(1)   42/      1C :                     		ds.w 1
(1)   43/      1E :                     		ds.w 1
(1)   44/      20 :                     ; len		ds.l 0
(1)   45/       0 : =$20                 		endstruct
(1)   46/       0 :                     
(1)   47/       0 :                     ; ============================================================
(1)   48/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   53/FFFFFFFFFFFFC800 :                     RAM_MdMisc		ds.b sizeof_mdmisc-RAM_MdMisc
(1)   55/FFFFFFFFFFFFCC1E :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFDC18 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFEDBA :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFEDC0 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFEDC0 : (MACRO)              			endmemory
(1)   60/    3DC0 :                     .here:          dephase
(1)   60/    3DC0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   70/       0 : (MACRO)              			memory RAM_MdMisc
(1)   70/       0 : =$0                  GLBL_LASTPC     := *
(1)   70/       0 :                                     dephase
(1)   70/FFFFFFFFFFFFC800 :                                     phase RAM_MDMISC
(1)   70/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)   71/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   72/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   81/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   82/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   84/FFFFFFFFFFFFC800 :                     RAM_MdMcd_Stamps	ds.b $20*MAX_MCDSTAMPS		; SCD Stamps
(1)   85/FFFFFFFFFFFFCC00 :                     RAM_MdMcd_StampSett	ds.b mdstmp_len			; SCD Stamp dot-screen control
(1)   93/FFFFFFFFFFFFCC1E :                     sizeof_mdmisc		ds.l 0
(1)   94/FFFFFFFFFFFFCC24 :                     ; ----------------------------------------
(1)   96/FFFFFFFFFFFFCC24 : (MACRO)              			endmemory
(1)   96/     424 :                     .here:          dephase
(1)   96/     424 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   96/       0 :                                     phase GLBL_LASTPC
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFDC18 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFDC18 : =$FFFFFFFFFFFFDC18   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFDC18 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFDC18 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFDC18 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFDC18 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFDC18 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFDC18 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFDC18 :                     
(1)    6/FFFFFFFFFFFFDC18 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFDC1C :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFDC20 :                     
      80/FFFFFFFFFFFFDC20 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFDC20 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFDC24 : (MACRO)              		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFDC24 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     117/       0 :                     		include	"system/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "			; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)   12/      10 : 4E49 4B4F 4E41      		dc.b HTAG_DISCID,0			; Volume Name
               16 : 4344 2020 2000    
(1)   14/      1C : 0102                		dc.w HTAG_CDVER				; Volume Version
(1)   15/      1E : 0001                		dc.w $0001				; Volume Type
(1)   16/      20 : 4E49 4B4F 4E41      		dc.b HTAG_SYSNAME,0			; System Name
               26 : 2D53 444B 2000    
(1)   17/      2C : 0000                		dc.w 0					; System Version, Type
(1)   18/      2E : 0000                		dc.w 0
(1)   19/      30 : 0000 0356           		dc.l IP_Start
(1)   20/      34 : 0000 038E           		dc.l IP_End
(1)   21/      38 : 0000 0000           		dc.l 0
(1)   22/      3C : 0000 0000           		dc.l 0
(1)   23/      40 : 0000 0800           		dc.l SP_Start
(1)   24/      44 : 0000 1A00           		dc.l SP_End
(1)   25/      48 : 0000 0000           		dc.l 0
(1)   26/      4C : 0000 0000           		dc.l 0
(1)   27/      50 :                     		align $100
(1)   28/     100 : 5345 4741 2047      		dc.b HTAG_SYS_MCD;"SEGA GENESIS    "			; Stays same as Genesis
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   29/     110 : 2843 2955 5345      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 5220 3230 3234 
              11C : 2E3F 3F3F          
(1)   34/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_MCD;"Nikona MCD                                      "
              126 : 204D 4344 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   35/     150 : 4E69 6B6F 6E61                      dc.b HTAG_NOV_MCD;"Nikona SCD                                      "
              156 : 2053 4344 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   37/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032             
(1)   38/     18E : 4A36 4D20 2020      		dc.b "J6M             "
              194 : 2020 2020 2020 
              19A : 2020 2020          
(1)   39/     19E :                     		align $1F0
(1)   40/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   41/     200 :                     
(1)   43/     200 :                     		binclude "system/mcd/region/jap.bin"
(1)   49/     356 :                     
(1)   50/     356 :                     ; ====================================================================
(1)   51/     356 :                     ; ----------------------------------------------------------------
(1)   52/     356 :                     ; IP
(1)   53/     356 :                     ; ----------------------------------------------------------------
(1)   54/     356 :                     
(1)   55/     356 :                     IP_Start:
(1)   56/     356 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              35C : 1100             
(1)   57/     35E : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              364 : 1200             
(1)   58/     366 :                     .wait:
(1)   59/     366 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              36C : 1100             
(1)   60/     36E : 66F6                		bne.s	.wait
(1)   61/     370 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)   62/     376 : 302E 0004           .wait_vint:	move.w	4(a6),d0
(1)   63/     37A : 0800 0003           		btst	#3,d0
(1)   64/     37E : 67F6                		beq.s	.wait_vint
(1)   65/     380 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              386 : 2006             
(1)   66/     388 : 4EF9 00FF 2E00      		jmp	($FF0600+MCD_Main).l
(1)   67/     38E :                     IP_End:
(1)   68/     38E :                     		align 2
(1)   69/     38E :                     
(1)   70/     38E :                     ; ====================================================================
(1)   71/     38E :                     ; ----------------------------------------------------------------
(1)   72/     38E :                     ; SP
(1)   73/     38E :                     ; ----------------------------------------------------------------
(1)   74/     38E :                     
(1)   75/     38E :                     		align $800
(1)   76/     800 :                     SP_Start:
(1)   77/     800 :                     		include "system/mcd/subcpu.asm"
(2)    1/     800 :                     ; ===========================================================================
(2)    2/     800 :                     ; -------------------------------------------------------------------
(2)    3/     800 :                     ; SegaCD SUB-CPU
(2)    4/     800 :                     ;
(2)    5/     800 :                     ; Loaded on BOOT
(2)    6/     800 :                     ; -------------------------------------------------------------------
(2)    7/     800 :                     
(2)    8/     800 : =$100                SET_STAMPPOV		equ 256
(2)    9/     800 :                     ; MAX_MCDSTAMPS		equ 64		; see shared.asm
(2)   10/     800 :                     
(2)   11/     800 :                     ; Dot output size: (WIDTH/8)*(HEIGHT/8)*$20
(2)   12/     800 :                     ; Map slots: $4000 bytes
(2)   13/     800 :                     ; Trace data: $2000 ($800 bytes * 4)
(2)   14/     800 :                     ; Stamp list: ($20*MAX_MCDSTAMPS)
(2)   15/     800 :                     ; Dot-screen: $9600 320x240 max
(2)   16/     800 :                     
(2)   17/     800 : =$20000              WRAM_DotOutput_0	equ $20000
(2)   18/     800 : =$28000              WRAM_DotOutput_1	equ $28000
(2)   19/     800 : =$30000              WRAM_MdMapTable		equ $30000
(2)   20/     800 : =$3A000              WRAM_MdStampList	equ $3A000
(2)   21/     800 : =$3B000              WRAM_TraceBuff		equ $3B000	; Size $780*2 ($F00)
(2)   22/     800 : =$3BFFC              WRAM_StampsDone		equ $3BFFC
(2)   23/     800 : =$3BFFE              WRAM_StampCurrFlip	equ $3BFFE
(2)   24/     800 : =$3C000              WRAM_SaveDataCopy	equ $3C000	; ** DONT Overwrite THIS **
(2)   25/     800 :                     
(2)   26/     800 :                     ; ====================================================================
(2)   27/     800 :                     ; ----------------------------------------------------------------
(2)   28/     800 :                     ; Variables
(2)   29/     800 :                     ; ----------------------------------------------------------------
(2)   30/     800 :                     
(2)   31/     800 : =$80000              SCPU_wram	equ $00080000
(2)   32/     800 : =$FFFE8000           SCPU_bram	equ $FFFE8000
(2)   33/     800 : =$FFFF0000           SCPU_pcm	equ $FFFF0000
(2)   34/     800 :                     ; SCPU_pcmwave	equ $FFFF2001
(2)   35/     800 : =$FFFF8000           SCPU_reg	equ $FFFF8000
(2)   36/     800 :                     
(2)   37/     800 : =$0                  PCM		equ $00
(2)   38/     800 : =$1                  ENV		equ $01		; Envelope (Volume)
(2)   39/     800 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   40/     800 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   41/     800 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   42/     800 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   43/     800 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   44/     800 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   45/     800 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   46/     800 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   47/     800 :                     
(2)   48/     800 :                     ; ====================================================================
(2)   49/     800 :                     ; ----------------------------------------------------------------
(2)   50/     800 :                     ; Structs
(2)   51/     800 :                     ; ----------------------------------------------------------------
(2)   52/     800 :                     
(2)   53/     800 :                     ; cdpcm_status:
(2)   54/     800 :                     ; %EF-- ---l
(2)   55/     800 :                     ; E-Enabled
(2)   56/     800 :                     ; F-Channel is "floating"
(2)   57/     800 :                     ; l-loop enabled
(2)   58/     800 :                     
(2)   59/       0 :                     cdpcm		struct
(2)   60/       0 :                     status		ds.b 1		; %EFSU ----l
(2)   61/       1 :                     flags		ds.b 1
(2)   62/       2 :                     strmf		ds.b 1
(2)   63/       3 :                     strmhalf	ds.b 1		; Halfway MSB $00/$04/$08/$0C
(2)   64/       4 :                     start		ds.l 1
(2)   65/       8 :                     slast		ds.l 1
(2)   66/       C :                     length		ds.l 1
(2)   67/      10 :                     loop		ds.l 1
(2)   68/      14 :                     clen		ds.l 1
(2)   69/      18 :                     cread		ds.l 1
(2)   70/      1C :                     pitch		ds.w 1
(2)   71/      1E :                     cblock		ds.w 1
(2)   72/      20 :                     pan		ds.b 1
(2)   73/      21 :                     env		ds.b 1
(2)   74/      22 :                     ; len		ds.l 0
(2)   75/     800 : =$22                 		endstruct
(2)   76/     800 :                     
(2)   77/       0 :                     stmpc		struct
(2)   78/       0 :                     XC		ds.w 1
(2)   79/       2 :                     YC		ds.w 1
(2)   80/       4 :                     X		ds.l 1
(2)   81/       8 :                     Y		ds.l 1
(2)   82/       C :                     DX		ds.l 1
(2)   83/      10 :                     DY		ds.l 1
(2)   84/      14 :                     TX		ds.l 1
(2)   85/      18 :                     TY		ds.l 1
(2)   86/      1C :                     xmul		ds.w 1
(2)   87/      1E :                     zmul		ds.w 1
(2)   88/      20 :                     zmul_sin	ds.w 1
(2)   89/      22 :                     zmul_cos	ds.w 1
(2)   90/      24 :                     rot_sin		ds.w 1
(2)   91/      26 :                     rot_cos		ds.w 1
(2)   92/      28 :                     ; len		ds.l 0
(2)   93/     800 : =$28                 		endstruct
(2)   94/     800 :                     
(2)   95/       0 :                     stmpi		struct
(2)   96/       0 :                     map		ds.w 1
(2)   97/       2 :                     x		ds.w 1
(2)   98/       4 :                     y		ds.w 1
(2)   99/       6 :                     xr		ds.w 1
(2)  100/       8 :                     yd		ds.w 1
(2)  101/       A :                     flags		ds.w 1
(2)  102/       C :                     ; len		ds.l 0
(2)  103/     800 : =$C                  		endstruct
(2)  104/     800 :                     
(2)  105/     800 :                     ; ====================================================================
(2)  106/     800 :                     ; ----------------------------------------------------------------
(2)  107/     800 :                     ; Includes
(2)  108/     800 :                     ; ----------------------------------------------------------------
(2)  109/     800 :                     
(2)  110/     800 :                     		include "system/mcd/cdbios.asm"
(3)    1/     800 :                     ; ===========================================================================
(3)    2/     800 :                     ; -------------------------------------------------------------------
(3)    3/     800 :                     ; CD BIOS VARIABLES
(3)    4/     800 :                     ; -------------------------------------------------------------------
(3)    5/     800 :                     
(3)    6/     800 : =$2                  MSCSTOP           equ	$0002
(3)    7/     800 : =$3                  MSCPAUSEON        equ	$0003
(3)    8/     800 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    9/     800 : =$5                  MSCSCANFF         equ	$0005
(3)   10/     800 : =$6                  MSCSCANFR         equ	$0006
(3)   11/     800 : =$7                  MSCSCANOFF        equ	$0007
(3)   12/     800 : =$8                  ROMPAUSEON        equ	$0008
(3)   13/     800 : =$9                  ROMPAUSEOFF       equ	$0009
(3)   14/     800 : =$A                  DRVOPEN           equ	$000A
(3)   15/     800 :                     
(3)   16/     800 : =$10                 DRVINIT           equ	$0010
(3)   17/     800 : =$11                 MSCPLAY           equ	$0011
(3)   18/     800 : =$12                 MSCPLAY1          equ	$0012
(3)   19/     800 : =$13                 MSCPLAYR          equ	$0013
(3)   20/     800 : =$14                 MSCPLAYT          equ	$0014
(3)   21/     800 : =$15                 MSCSEEK           equ	$0015
(3)   22/     800 : =$16                 MSCSEEKT          equ	$0016
(3)   23/     800 : =$17                 ROMREAD           equ	$0017
(3)   24/     800 : =$18                 ROMSEEK           equ	$0018
(3)   25/     800 : =$19                 MSCSEEK1          equ	$0019
(3)   26/     800 :                     
(3)   27/     800 : =$1E                 TESTENTRY         equ	$001E
(3)   28/     800 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   29/     800 : =$20                 ROMREADN          equ	$0020
(3)   30/     800 : =$21                 ROMREADE          equ	$0021
(3)   31/     800 :                     
(3)   32/     800 : =$80                 CDBCHK            equ	$0080
(3)   33/     800 : =$81                 CDBSTAT           equ	$0081
(3)   34/     800 : =$82                 CDBTOCWRITE       equ	$0082
(3)   35/     800 : =$83                 CDBTOCREAD        equ	$0083
(3)   36/     800 : =$84                 CDBPAUSE          equ	$0084
(3)   37/     800 : =$85                 FDRSET            equ	$0085
(3)   38/     800 : =$86                 FDRCHG            equ	$0086
(3)   39/     800 : =$87                 CDCSTART          equ	$0087
(3)   40/     800 : =$88                 CDCSTARTP         equ	$0088
(3)   41/     800 : =$89                 CDCSTOP           equ	$0089
(3)   42/     800 : =$8A                 CDCSTAT           equ	$008A
(3)   43/     800 : =$8B                 CDCREAD           equ	$008B
(3)   44/     800 : =$8C                 CDCTRN            equ	$008C
(3)   45/     800 : =$8D                 CDCACK            equ	$008D
(3)   46/     800 : =$8E                 SCDINIT           equ	$008E
(3)   47/     800 : =$8F                 SCDSTART          equ	$008F
(3)   48/     800 : =$90                 SCDSTOP           equ	$0090
(3)   49/     800 : =$91                 SCDSTAT           equ	$0091
(3)   50/     800 : =$92                 SCDREAD           equ	$0092
(3)   51/     800 : =$93                 SCDPQ             equ	$0093
(3)   52/     800 : =$94                 SCDPQL            equ	$0094
(3)   53/     800 : =$95                 LEDSET            equ	$0095
(3)   54/     800 : =$96                 CDCSETMODE        equ	$0096
(3)   55/     800 : =$97                 WONDERREQ         equ	$0097
(3)   56/     800 : =$98                 WONDERCHK         equ	$0098
(3)   57/     800 :                     
(3)   58/     800 : =$0                  CBTINIT           equ	$0000
(3)   59/     800 : =$1                  CBTINT            equ	$0001
(3)   60/     800 : =$2                  CBTOPENDISC       equ	$0002
(3)   61/     800 : =$3                  CBTOPENSTAT       equ	$0003
(3)   62/     800 : =$4                  CBTCHKDISC        equ	$0004
(3)   63/     800 : =$5                  CBTCHKSTAT        equ	$0005
(3)   64/     800 : =$6                  CBTIPDISC         equ	$0006
(3)   65/     800 : =$7                  CBTIPSTAT         equ	$0007
(3)   66/     800 : =$8                  CBTSPDISC         equ	$0008
(3)   67/     800 : =$9                  CBTSPSTAT         equ	$0009
(3)   68/     800 :                     
(3)   69/     800 : =$0                  BRMINIT           equ	$0000
(3)   70/     800 : =$1                  BRMSTAT           equ	$0001
(3)   71/     800 : =$2                  BRMSERCH          equ	$0002
(3)   72/     800 : =$3                  BRMREAD           equ	$0003
(3)   73/     800 : =$4                  BRMWRITE          equ	$0004
(3)   74/     800 : =$5                  BRMDEL            equ	$0005
(3)   75/     800 : =$6                  BRMFORMAT         equ	$0006
(3)   76/     800 : =$7                  BRMDIR            equ	$0007
(3)   77/     800 : =$8                  BRMVERIFY         equ	$0008
(3)   78/     800 :                     
(3)   79/     800 :                     ;-----------------------------------------------------------------------
(3)   80/     800 :                     ; BIOS ENTRY POINTS
(3)   81/     800 :                     ;-----------------------------------------------------------------------
(3)   82/     800 :                     
(3)   83/     800 : =$5F40               _ADRERR           equ	$00005F40
(3)   84/     800 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   85/     800 : =$5F16               _BURAM            equ	$00005F16
(3)   86/     800 : =$5F22               _CDBIOS           equ	$00005F22
(3)   87/     800 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   88/     800 : =$5E80               _CDSTAT           equ	$00005E80
(3)   89/     800 : =$5F52               _CHKERR           equ	$00005F52
(3)   90/     800 : =$5F46               _CODERR           equ	$00005F46
(3)   91/     800 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   92/     800 : =$5F76               _LEVEL1           equ	$00005F76
(3)   93/     800 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   94/     800 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   95/     800 : =$5F88               _LEVEL4           equ	$00005F88
(3)   96/     800 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   97/     800 : =$5F94               _LEVEL6           equ	$00005F94
(3)   98/     800 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   99/     800 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)  100/     800 : =$5F70               _NOCOD1           equ	$00005F70
(3)  101/     800 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)  102/     800 : =$5F5E               _SPVERR           equ	$00005F5E
(3)  103/     800 : =$5F64               _TRACE            equ	$00005F64
(3)  104/     800 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  105/     800 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  106/     800 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  107/     800 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  108/     800 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  109/     800 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  110/     800 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  111/     800 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  112/     800 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  113/     800 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  114/     800 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  115/     800 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  116/     800 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  117/     800 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  118/     800 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  119/     800 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  120/     800 : =$5F58               _TRPERR           equ	$00005F58
(3)  121/     800 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  122/     800 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  123/     800 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  124/     800 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  125/     800 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  126/     800 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  127/     800 :                     
(2)  111/     800 :                     
(2)  112/     800 :                     ; ====================================================================
(2)  113/     800 :                     ; ----------------------------------------------------------------
(2)  114/     800 :                     ; MAIN CODE
(2)  115/     800 :                     ; ----------------------------------------------------------------
(2)  116/     800 :                     
(2)  117/    6000 :                     		phase $6000
(2)  118/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)  119/    600C : 0100 0000           		dc.w $0100,0
(2)  120/    6010 : 0000 0000           		dc.l 0
(2)  121/    6014 : 0000 0000           		dc.l 0
(2)  122/    6018 : 0000 0020           		dc.l $20
(2)  123/    601C : 0000 0000           		dc.l 0
(2)  124/    6020 :                     .table:
(2)  125/    6020 : 000A                		dc.w SCPU_Init-.table
(2)  126/    6022 : 0092                		dc.w SCPU_Main-.table
(2)  127/    6024 : 0074                		dc.w SCPU_IRQ-.table
(2)  128/    6026 : 0090                		dc.w SCPU_User-.table
(2)  129/    6028 : 0000                		dc.w 0
(2)  130/    602A :                     
(2)  131/    602A :                     ; ====================================================================
(2)  132/    602A :                     ; ----------------------------------------------------------------
(2)  133/    602A :                     ; Init
(2)  134/    602A :                     ; ----------------------------------------------------------------
(2)  135/    602A :                     
(2)  136/    602A :                     SCPU_Init:
(2)  137/    602A : 41FA 0052           		lea	.drv_init(pc),a0
(2)  138/    602E : 303C 0010           		move.w	#DRVINIT,d0
(2)  139/    6032 : 4EB8 5F22           		jsr	_CDBIOS
(2)  140/    6036 :                     ; 		bclr	#3,(SCPU_reg+$33).w		; Disable Timer interrupt
(2)  141/    6036 : 11FC 00FF 8031      		move.b	#$FF,(SCPU_reg+$31).w		; Set timer value
(2)  142/    603C : 23FC 0000 60AE      		move.l	#SCPU_Timer,(_LEVEL3+2).l	; Write LEVEL 3 jump
             6042 : 0000 5F84          
(2)  143/    6046 : 23FC 0000 608E      		move.l	#SCPU_Stamp,(_LEVEL1+2).l	; Write LEVEL 1 jump
             604C : 0000 5F78          
(2)  144/    6050 : 6100 0330           		bsr	spCdda_ResetVolume		; Reset CDDA Volume
(2)  145/    6054 : 6100 0B9C           		bsr	CdSub_PCM_Init			; Init PCM
(2)  146/    6058 : 13FC 0000 FFFF      		move.b	#0,(SCPU_reg+mcd_memory).l	; Reset Memory mode
             605E : 8003             
(2)  147/    6060 : 6100 042E           		bsr	spInitFS			; Init ISO Filesystem
(2)  148/    6064 : 41FA 001A           		lea	file_subdata(pc),a0		; Search and load the PCM samples
(2)  149/    6068 : 6100 0462           		bsr	spSearchFile
(2)  150/    606C : 41F9 0002 0000      		lea	(SCPU_DATA),a0
(2)  151/    6072 : 6100 0394           		bsr	spReadSectorsN
(2)  152/    6076 : 11FC 0000 800F      		move.b	#0,(SCPU_reg+mcd_comm_s).w	; Report we are free.
(2)  153/    607C :                     ; 		bset	#3,(SCPU_reg+$33).w		; Enable Timer interrupt
(2)  154/    607C : 4E75                		rts
(2)  155/    607E :                     
(2)  156/    607E :                     ; --------------------------------------------------------
(2)  157/    607E :                     
(2)  158/    607E :                     .drv_init:
(2)  159/    607E : 01FF                		dc.b $01,$FF
(2)  160/    6080 :                     		align 2
(2)  161/    6080 :                     file_subdata:
(2)  162/    6080 : 4E4B 4E41 5F53      		dc.b "NKNA_SUB.BIN",0
             6086 : 5542 2E42 494E 00 
(2)  163/    608D :                     		align 2
(2)  164/    608E :                     
(2)  165/    608E :                     ; =====================================================================
(2)  166/    608E :                     ; ----------------------------------------------------------------
(2)  167/    608E :                     ; Level 1 IRQ
(2)  168/    608E :                     ; ----------------------------------------------------------------
(2)  169/    608E :                     
(2)  170/    608E :                     SCPU_Stamp:
(2)  171/    608E : 4278 7208           		clr.w	(RAM_CdSub_StampBusy).w
(2)  172/    6092 : 4E73                		rte
(2)  173/    6094 :                     
(2)  174/    6094 :                     ; =====================================================================
(2)  175/    6094 :                     ; ----------------------------------------------------------------
(2)  176/    6094 :                     ; Level 2 IRQ
(2)  177/    6094 :                     ;
(2)  178/    6094 :                     ; WARNING: The SEGA screen before starting calls this on
(2)  179/    6094 :                     ; every frame.
(2)  180/    6094 :                     ; ----------------------------------------------------------------
(2)  181/    6094 :                     
(2)  182/    6094 :                     SCPU_IRQ:
(2)  183/    6094 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Read MAIN comm
(2)  184/    6098 : 0240 00C0           		andi.w	#$C0,d0
(2)  185/    609C : 0C40 00C0           		cmpi.w	#$C0,d0
(2)  186/    60A0 : 6606                		bne	.not_sound
(2)  187/    60A2 : 50F8 7219           		st.b	(RAM_CdSub_PcmReqUpd).w
(2)  188/    60A6 : 4E75                		rts
(2)  189/    60A8 :                     .not_sound:
(2)  190/    60A8 :                     ; 		cmpi.w	#$80,d0
(2)  191/    60A8 :                     ; 		bne.s	.not_req
(2)  192/    60A8 : 50F8 721A           		st.b	(RAM_CdSub_StampReqUpd).w
(2)  193/    60AC :                     ; .not_req:
(2)  194/    60AC : 4E75                		rts
(2)  195/    60AE :                     
(2)  196/    60AE :                     ; =====================================================================
(2)  197/    60AE :                     ; ----------------------------------------------------------------
(2)  198/    60AE :                     ; Level 3 IRQ
(2)  199/    60AE :                     ; ----------------------------------------------------------------
(2)  200/    60AE :                     
(2)  201/    60AE :                     SCPU_Timer:
(2)  202/    60AE :                     ; 		bclr	#3,(SCPU_reg+$33).w
(2)  203/    60AE :                     ; 		movem.l	d0-a6,-(sp)
(2)  204/    60AE :                     ; 		bsr	CdSub_PCM_ProcessIRQ
(2)  205/    60AE :                     ; 		movem.l	(sp)+,d0-a6
(2)  206/    60AE :                     ; 		bset	#3,(SCPU_reg+$33).w
(2)  207/    60AE : 4E73                		rte			; rte
(2)  208/    60B0 :                     
(2)  209/    60B0 :                     ; =====================================================================
(2)  210/    60B0 :                     ; ----------------------------------------------------------------
(2)  211/    60B0 :                     ; User interrupt
(2)  212/    60B0 :                     ; ----------------------------------------------------------------
(2)  213/    60B0 :                     
(2)  214/    60B0 :                     SCPU_User:
(2)  215/    60B0 : 4E75                		rts
(2)  216/    60B2 :                     
(2)  217/    60B2 :                     ; ====================================================================
(2)  218/    60B2 :                     ; ----------------------------------------------------------------
(2)  219/    60B2 :                     ; Main
(2)  220/    60B2 :                     ;
(2)  221/    60B2 :                     ; mcd_comm_m READ ONLY:
(2)  222/    60B2 :                     ; %Bbsiiiii
(2)  223/    60B2 :                     ; B - Busy/Lock bit
(2)  224/    60B2 :                     ; b - Status bit / during IRQ if B=1
(2)  225/    60B2 :                     ;
(2)  226/    60B2 :                     ;
(2)  227/    60B2 :                     ; mcd_comm_s READ/WRITE:
(2)  228/    60B2 :                     ; %Bbssfeee
(2)  229/    60B2 :                     ; B - Busy doing a normal (b=0) or IRQ (b=1)
(2)  230/    60B2 :                     ; b - IRQ flag
(2)  231/    60B2 :                     ; s - Status output bits
(2)  232/    60B2 :                     ; f - Stamp finished drawing
(2)  233/    60B2 :                     ; e - Error flags
(2)  234/    60B2 :                     ;
(2)  235/    60B2 :                     ; Uses:
(2)  236/    60B2 :                     ; ALL
(2)  237/    60B2 :                     ; ----------------------------------------------------------------
(2)  238/    60B2 :                     
(2)  239/    60B2 :                     SCPU_Main:
(2)  240/    60B2 : 6100 046C           		bsr	CdSub_StampRender
(2)  241/    60B6 : 6100 0CCC           		bsr	CdSub_PCM_Process
(2)  242/    60BA : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0	; Read MAIN comm
(2)  243/    60BE : 1200                		move.b	d0,d1
(2)  244/    60C0 : 0241 00C0           		andi.w	#$C0,d1
(2)  245/    60C4 : 0C01 00C0           		cmpi.b	#$C0,d1				; Middle of IRQ task?
(2)  246/    60C8 : 67E8                		beq.s	SCPU_Main
(2)  247/    60CA : 0240 001F           		andi.w	#%00011111,d0			; <-- current limit
(2)  248/    60CE : 67E2                		beq.s	SCPU_Main
(2)  249/    60D0 :                     
(2)  250/    60D0 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  251/    60D4 : 08C7 0007           		bset	#7,d7
(2)  252/    60D8 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w	; Return to MAIN as BUSY/working
(2)  253/    60DC : D040                		add.w	d0,d0				; Task index*2
(2)  254/    60DE : 323B 0014           		move.w	SCPU_cmdlist(pc,d0.w),d1
(2)  255/    60E2 : 4EBB 1010           		jsr	SCPU_cmdlist(pc,d1.w)
(2)  256/    60E6 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  257/    60EA : 0887 0007           		bclr	#7,d7
(2)  258/    60EE : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w	; Report that we finished.
(2)  259/    60F2 : 60BE                		bra	SCPU_Main
(2)  260/    60F4 :                     
(2)  261/    60F4 :                     ; =====================================================================
(2)  262/    60F4 :                     ; ----------------------------------------------------------------
(2)  263/    60F4 :                     ; Commands list
(2)  264/    60F4 :                     ; ----------------------------------------------------------------
(2)  265/    60F4 :                     
(2)  266/    60F4 :                     ; Struct
(2)  267/    60F4 :                     ; $01-$07: Common data tasks
(2)  268/    60F4 :                     ; $08-$0F: BRAM tasks
(2)  269/    60F4 :                     ; $10-$17: CDDA Playback control
(2)  270/    60F4 :                     ; $18-$1F: Stamps
(2)  271/    60F4 :                     
(2)  272/    60F4 :                     SCPU_cmdlist:
(2)  273/    60F4 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $00 | **INVALID**
(2)  274/    60F6 : 0042                		dc.w SubTask_cmnd01-SCPU_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  275/    60F8 : 00B4                		dc.w SubTask_cmnd02-SCPU_cmdlist	; $02 | Read file from disc, outputs to WORD-RAM
(2)  276/    60FA : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $03
(2)  277/    60FC : 00F4                		dc.w SubTask_cmnd04-SCPU_cmdlist	; $04
(2)  278/    60FE : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $05
(2)  279/    6100 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $06
(2)  280/    6102 : 0164                		dc.w SubTask_cmnd07-SCPU_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  281/    6104 :                     
(2)  282/    6104 : 0170                		dc.w SubTask_cmnd08-SCPU_cmdlist	; $08 | BRAM support Initialize (MUST CALL FIRST)
(2)  283/    6106 : 01D2                		dc.w SubTask_cmnd09-SCPU_cmdlist	; $09 | BRAM Read data
(2)  284/    6108 : 01FC                		dc.w SubTask_cmnd0A-SCPU_cmdlist	; $0A | BRAM Save data
(2)  285/    610A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0B
(2)  286/    610C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0C
(2)  287/    610E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0D
(2)  288/    6110 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0E
(2)  289/    6112 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0F
(2)  290/    6114 :                     
(2)  291/    6114 : 024A                		dc.w SubTask_cmnd10-SCPU_cmdlist	; $10 | Play CDDA once
(2)  292/    6116 : 0260                		dc.w SubTask_cmnd11-SCPU_cmdlist	; $11 | Play CDDA and loop
(2)  293/    6118 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $12 |
(2)  294/    611A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $13 |
(2)  295/    611C : 0276                		dc.w SubTask_cmnd14-SCPU_cmdlist	; $14 | Stop CDDA
(2)  296/    611E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $15 |
(2)  297/    6120 : 0280                		dc.w SubTask_cmnd16-SCPU_cmdlist	; $16 | CDDA fade-out
(2)  298/    6122 : 028E                		dc.w SubTask_cmnd17-SCPU_cmdlist	; $17 | CDDA Reset volumes
(2)  299/    6124 :                     
(2)  300/    6124 : 02B0                		dc.w SubTask_cmnd18-SCPU_cmdlist	; $18 | Enable Stamps
(2)  301/    6126 : 02E4                		dc.w SubTask_cmnd19-SCPU_cmdlist	; $19 | Disable Stamps
(2)  302/    6128 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1A |
(2)  303/    612A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1B |
(2)  304/    612C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1C |
(2)  305/    612E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1D |
(2)  306/    6130 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1E |
(2)  307/    6132 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1F |
(2)  308/    6134 :                     
(2)  309/    6134 :                     ; =====================================================================
(2)  310/    6134 :                     ; ----------------------------------------------------------------
(2)  311/    6134 :                     ; Commands $01-$0F
(2)  312/    6134 :                     ;
(2)  313/    6134 :                     ; General purpose data transfering
(2)  314/    6134 :                     ; ----------------------------------------------------------------
(2)  315/    6134 :                     
(2)  316/    6134 :                     ; --------------------------------------------------------
(2)  317/    6134 :                     ; NULL COMMAND
(2)  318/    6134 :                     ; --------------------------------------------------------
(2)  319/    6134 :                     
(2)  320/    6134 :                     SubTask_cmnd00:
(2)  321/    6134 : 4E75                		rts
(2)  322/    6136 :                     
(2)  323/    6136 :                     ; --------------------------------------------------------
(2)  324/    6136 :                     ; Command $01
(2)  325/    6136 :                     ;
(2)  326/    6136 :                     ; Read data from disc and transfer the output data
(2)  327/    6136 :                     ; through mcd_dcomm_s as packets of $10 bytes.
(2)  328/    6136 :                     ;
(2)  329/    6136 :                     ; Input:
(2)  330/    6136 :                     ; mcd_comm_m  | %lp------
(2)  331/    6136 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  332/    6136 :                     ;               p - PASS bit
(2)  333/    6136 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  334/    6136 :                     ;               Filename string 8.3 zero terminated
(2)  335/    6136 :                     ;
(2)  336/    6136 :                     ; Returns:
(2)  337/    6136 :                     ; mcd_comm_s  | %--ep----
(2)  338/    6136 :                     ;               p - SUB-CPU reports that data passed
(2)  339/    6136 :                     ;               e - Flag: 0 - Found file
(2)  340/    6136 :                     ;                         1 - File NOT found
(2)  341/    6136 :                     ; mcd_dcomm_s | $00-$10
(2)  342/    6136 :                     ;               Current data packet.
(2)  343/    6136 :                     ; --------------------------------------------------------
(2)  344/    6136 :                     
(2)  345/    6136 :                     SubTask_cmnd01:
(2)  346/    6136 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - Filename
(2)  347/    613A : 6100 0390           		bsr	spSearchFile
(2)  348/    613E : 6500 01F6           		bcs	SubTask_RetErr_NoFile
(2)  349/    6142 : 4A81                		tst.l	d1
(2)  350/    6144 : 6700 01F0           		beq	SubTask_RetErr_NoFile
(2)  351/    6148 : 41F9 0000 C2FC      		lea	(ISO_Output).l,a0		; Temporal OUTPUT location
(2)  352/    614E : 2F08                		move.l	a0,-(sp)
(2)  353/    6150 : 6100 02B6           		bsr	spReadSectorsN
(2)  354/    6154 : 205F                		move.l	(sp)+,a0			; a0 - Read temporal location
(2)  355/    6156 : 45F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a2	; a1 - Output data packets
(2)  356/    615A :                     .next_packet:
(2)  357/    615A : 224A                		move.l	a2,a1
(2)  358/    615C :                     	rept $10/2
(2)  359/    615C :                     		move.w	(a0)+,(a1)+			; WORD writes
(2)  360/    615C :                     	endm
(2)  359/    615C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    615E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6160 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6162 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6164 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6166 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    6168 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  359/    616A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  361/    616C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Sub PASS the data.
(2)  362/    6170 : 08C7 0004           		bset	#4,d7
(2)  363/    6174 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  364/    6178 : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Read MAIN comm
(2)  365/    617C : 0807 0007           		btst	#7,d7				; Locked?
(2)  366/    6180 : 671E                		beq.s	.exit_now
(2)  367/    6182 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  368/    6186 : 67F0                		beq.s	.wait_main
(2)  369/    6188 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Clear Sub PASS bit.
(2)  370/    618C : 0887 0004           		bclr	#4,d7
(2)  371/    6190 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  372/    6194 : 1E38 800E           .wait_main_o:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN response
(2)  373/    6198 : 0807 0006           		btst	#6,d7
(2)  374/    619C : 66F6                		bne.s	.wait_main_o
(2)  375/    619E : 60BA                		bra.s	.next_packet
(2)  376/    61A0 :                     ; Finished:
(2)  377/    61A0 :                     .exit_now:
(2)  378/    61A0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  379/    61A6 : 4E75                		rts
(2)  380/    61A8 :                     
(2)  381/    61A8 :                     ; --------------------------------------------------------
(2)  382/    61A8 :                     ; Command $02
(2)  383/    61A8 :                     ;
(2)  384/    61A8 :                     ; Read data from disc directly to WORD-RAM,
(2)  385/    61A8 :                     ; REQUIRES THE DMNA BIT TO BE SET BY MAIN-CPU
(2)  386/    61A8 :                     ;
(2)  387/    61A8 :                     ; Input:
(2)  388/    61A8 :                     ; mcd_dcomm_m | $00-$0C - "FILENAME.BIN",0
(2)  389/    61A8 :                     ;             |           Filename string 8.3 incl. zero
(2)  390/    61A8 :                     ;             |
(2)  391/    61A8 :                     ;             | $0D - Destination increment * $800
(2)  392/    61A8 :                     ;             | $0E -
(2)  393/    61A8 :                     ;             | $0F -
(2)  394/    61A8 :                     ;
(2)  395/    61A8 :                     ; Note:
(2)  396/    61A8 :                     ; DO NOT CALL THIS IF STAMPS ARE IN THE MIDDLE
(2)  397/    61A8 :                     ; OF RENDERING
(2)  398/    61A8 :                     ; --------------------------------------------------------
(2)  399/    61A8 :                     
(2)  400/    61A8 :                     SubTask_cmnd02:
(2)  401/    61A8 : 1E39 FFFF 8003      		move.b	(SCPU_reg+mcd_memory).l,d7	; Wait until MAIN sets Word-RAM to SUB. (DMNA)
(2)  402/    61AE : 0807 0001           		btst	#1,d7
(2)  403/    61B2 : 67F4                		beq.s	SubTask_cmnd02
(2)  404/    61B4 :                     
(2)  405/    61B4 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  406/    61B8 : 6100 0312           		bsr	spSearchFile
(2)  407/    61BC : 6500 0178           		bcs	SubTask_RetErr_NoFile
(2)  408/    61C0 : 4A81                		tst.l	d1
(2)  409/    61C2 : 6700 0172           		beq	SubTask_RetErr_NoFile
(2)  410/    61C6 : 41F9 0008 0000      		lea	(SCPU_wram),a0
(2)  411/    61CC : 7E00                		moveq	#0,d7
(2)  412/    61CE : 1E38 801D           		move.b	(SCPU_reg+mcd_dcomm_m+$0D).w,d7
(2)  413/    61D2 : E14F                		lsl.w	#8,d7
(2)  414/    61D4 : E74F                		lsl.w	#3,d7
(2)  415/    61D6 : D1C7                		add.l	d7,a0
(2)  416/    61D8 : 6100 022E           		bsr	spReadSectorsN
(2)  417/    61DC : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN (RET=1)
             61E2 : 8003             
(2)  418/    61E4 : 67F6                		beq.s	.wait_ret
(2)  419/    61E6 : 4E75                		rts
(2)  420/    61E8 :                     
(2)  421/    61E8 :                     ; --------------------------------------------------------
(2)  422/    61E8 :                     ; Command $04
(2)  423/    61E8 :                     ;
(2)  424/    61E8 :                     ; Transfer memory from MAIN-CPU to SUB-CPU in
(2)  425/    61E8 :                     ; packets of 10-bytes.
(2)  426/    61E8 :                     ;
(2)  427/    61E8 :                     ; Input:
(2)  428/    61E8 :                     ; mcd_comm_m  | %lp------
(2)  429/    61E8 :                     ;               l - LOCK bit
(2)  430/    61E8 :                     ;               p - PASS bit
(2)  431/    61E8 :                     ; mcd_dcomm_m | BEFORE mcd_comm_s returns first PASS:
(2)  432/    61E8 :                     ;               $00-$03    - Output Destination in Sub-CPU
(2)  433/    61E8 :                     ;                         area
(2)  434/    61E8 :                     ;               AFTER mcd_comm_s returns first PASS:
(2)  435/    61E8 :                     ;               $00-$08 - Data packet
(2)  436/    61E8 :                     ;
(2)  437/    61E8 :                     ; Returns:
(2)  438/    61E8 :                     ; mcd_comm_s  | %-------p
(2)  439/    61E8 :                     ;               p - SUB-CPU got the data packet
(2)  440/    61E8 :                     ; --------------------------------------------------------
(2)  441/    61E8 :                     
(2)  442/    61E8 :                     SubTask_cmnd04:
(2)  443/    61E8 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  444/    61EC : 08C7 0004           		bset	#4,d7
(2)  445/    61F0 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  446/    61F4 :                     .wait_enter:
(2)  447/    61F4 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait for MAIN
(2)  448/    61F8 : 0807 0007           		btst	#7,d7
(2)  449/    61FC : 67F6                		beq.s	.wait_enter
(2)  450/    61FE : 45F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a2
(2)  451/    6202 : 3E12                		move.w	(a2),d7				; a1 - Destination
(2)  452/    6204 : 4847                		swap	d7
(2)  453/    6206 : 3E2A 0002           		move.w	2(a2),d7
(2)  454/    620A : 2247                		move.l	d7,a1
(2)  455/    620C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  456/    6210 : 0887 0004           		bclr	#4,d7
(2)  457/    6214 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  458/    6218 :                     .next_packet:
(2)  459/    6218 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7
(2)  460/    621C : 0807 0007           		btst	#7,d7
(2)  461/    6220 : 6734                		beq.s	.exit_now
(2)  462/    6222 : 0807 0006           		btst	#6,d7
(2)  463/    6226 : 67F0                		beq.s	.next_packet
(2)  464/    6228 : 204A                		move.l	a2,a0
(2)  465/    622A :                     	rept 8/2
(2)  466/    622A :                     		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  467/    622A :                     	endm
(2)  466/    622A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    622C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    622E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  466/    6230 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  468/    6232 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  469/    6236 : 08C7 0004           		bset	#4,d7
(2)  470/    623A : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  471/    623E : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  472/    6242 : 0807 0006           		btst	#6,d7
(2)  473/    6246 : 66F6                		bne.s	.wait_main
(2)  474/    6248 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  475/    624C : 0887 0004           		bclr	#4,d7
(2)  476/    6250 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  477/    6254 : 60C2                		bra	.next_packet
(2)  478/    6256 :                     .exit_now:
(2)  479/    6256 : 4E75                		rts
(2)  480/    6258 :                     
(2)  481/    6258 :                     ; --------------------------------------------------------
(2)  482/    6258 :                     ; Command $07
(2)  483/    6258 :                     ;
(2)  484/    6258 :                     ; Set Word-RAM permission to MAIN-CPU
(2)  485/    6258 :                     ; --------------------------------------------------------
(2)  486/    6258 :                     
(2)  487/    6258 :                     SubTask_cmnd07:
(2)  488/    6258 : 08F9 0000 FFFF      		bset	#0,(SCPU_reg+mcd_memory).l	; Set WORD-RAM to MAIN, RET=1
             625E : 8003             
(2)  489/    6260 : 67F6                		beq.s	SubTask_cmnd07
(2)  490/    6262 : 4E75                		rts
(2)  491/    6264 :                     
(2)  492/    6264 :                     ; =====================================================================
(2)  493/    6264 :                     ; ----------------------------------------------------------------
(2)  494/    6264 :                     ; Commands $08-$0F
(2)  495/    6264 :                     ;
(2)  496/    6264 :                     ; BRAM Management
(2)  497/    6264 :                     ;
(2)  498/    6264 :                     ; IF using CD32X: RV MUST BE ENABLED
(2)  499/    6264 :                     ; ----------------------------------------------------------------
(2)  500/    6264 :                     
(2)  501/    6264 :                     ; --------------------------------------------------------
(2)  502/    6264 :                     ; Command $08
(2)  503/    6264 :                     ;
(2)  504/    6264 :                     ; Init or check if SAVE file exists
(2)  505/    6264 :                     ;
(2)  506/    6264 :                     ; Input:
(2)  507/    6264 :                     ; mcd_dcomm_m | $00-$0B: dc.b "STR_SAVEDAT",0
(2)  508/    6264 :                     ;             |     $0C: Save Size / $40
(2)  509/    6264 :                     ;             |     $0E: Flags
(2)  510/    6264 :                     ;
(2)  511/    6264 :                     ; Returns:
(2)  512/    6264 :                     ; mcd_dcomm_s | $00.w:  0 | OK
(2)  513/    6264 :                     ;             |        -1 | File not found
(2)  514/    6264 :                     ;             |        -2 | Format error /
(2)  515/    6264 :                     ;             |             Not enough space
(2)  516/    6264 :                     ;             |
(2)  517/    6264 :                     ;             | $02.w: Back-up size
(2)  518/    6264 :                     ;             | $04.w: Flags
(2)  519/    6264 :                     ; --------------------------------------------------------
(2)  520/    6264 :                     
(2)  521/    6264 :                     SubTask_cmnd08:
(2)  522/    6264 : 6100 00B4           		bsr	SubTsk_BramCall
(2)  523/    6268 : 654E                		bcs	.big_fail
(2)  524/    626A : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  525/    626E : 43F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a1
(2)  526/    6274 : 7E07                		moveq	#($10/2)-1,d7
(2)  527/    6276 :                     .copy_paste:
(2)  528/    6276 : 32D8                		move.w	(a0)+,(a1)+
(2)  529/    6278 : 51CF FFFC           		dbf	d7,.copy_paste
(2)  530/    627C : 43F9 0000 79A0      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  531/    6282 : 7001                		moveq	#BRMSTAT,d0
(2)  532/    6284 : 4EB8 5F16           		jsr	_BURAM
(2)  533/    6288 : 3E38 801C           		move.w	(SCPU_reg+mcd_dcomm_m+$0C).w,d7
(2)  534/    628C : B047                		cmp.w	d7,d0				; Enough space?
(2)  535/    628E : 6D28                		blt.s	.big_fail
(2)  536/    6290 :                     
(2)  537/    6290 : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  538/    6296 : 303C 0002           		move.w	#BRMSERCH,d0			; "SERCH"
(2)  539/    629A : 4EB8 5F16           		jsr	_BURAM
(2)  540/    629E : 6500 008E           		bcs	SubTsk_ReturnFail
(2)  541/    62A2 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  542/    62A6 : 0241 00FF           		andi.w	#$FF,d1
(2)  543/    62AA : 3CBC 0000           		move.w	#0,(a6)				; Report OK
(2)  544/    62AE : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  545/    62B2 : 3D41 0004           		move.w	d1,4(a6)			; Mode: 0=normal -1=Protected
(2)  546/    62B6 : 4E75                		rts
(2)  547/    62B8 :                     
(2)  548/    62B8 :                     ; No RAM / No Format
(2)  549/    62B8 :                     .big_fail:
(2)  550/    62B8 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  551/    62BC : 3CBC FFFE           		move.w	#-2,(a6)			; Report FAIL
(2)  552/    62C0 : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  553/    62C4 : 4E75                		rts
(2)  554/    62C6 :                     
(2)  555/    62C6 :                     ; --------------------------------------------------------
(2)  556/    62C6 :                     ; Command $09
(2)  557/    62C6 :                     ;
(2)  558/    62C6 :                     ; READ Save data, requires Word-RAM permission.
(2)  559/    62C6 :                     ;
(2)  560/    62C6 :                     ; Returns:
(2)  561/    62C6 :                     ; mcd_dcomm_s | $00.w:
(2)  562/    62C6 :                     ;             |  0 - OK
(2)  563/    62C6 :                     ;             | -1 - Not found / Fatal error
(2)  564/    62C6 :                     ; --------------------------------------------------------
(2)  565/    62C6 :                     
(2)  566/    62C6 :                     SubTask_cmnd09:
(2)  567/    62C6 : 6152                		bsr	SubTsk_BramCall
(2)  568/    62C8 : 6564                		bcs	SubTsk_ReturnFail
(2)  569/    62CA : 0839 0001 FFFF      .wait_dmna:	btst	#1,(SCPU_reg+mcd_memory).l		; Word-RAM Allowed (DMNA)?
             62D0 : 8003             
(2)  570/    62D2 : 67F6                		beq	.wait_dmna
(2)  571/    62D4 : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  572/    62DA : 43F9 000B C000      		lea	(SCPU_wram+WRAM_SaveDataCopy).l,a1
(2)  573/    62E0 : 7200                		moveq	#0,d1
(2)  574/    62E2 : 303C 0003           		move.w	#BRMREAD,d0
(2)  575/    62E6 : 4EB8 5F16           		jsr	_BURAM
(2)  576/    62EA : 6542                		bcs	SubTsk_ReturnFail
(2)  577/    62EC : 6000 FF6A           		bra	SubTask_cmnd07
(2)  578/    62F0 :                     
(2)  579/    62F0 :                     ; --------------------------------------------------------
(2)  580/    62F0 :                     ; Command $0A
(2)  581/    62F0 :                     ;
(2)  582/    62F0 :                     ; WRITE Save data, requires Word-RAM permission.
(2)  583/    62F0 :                     ;
(2)  584/    62F0 :                     ; Returns:
(2)  585/    62F0 :                     ; mcd_dcomm_s | $00.w:
(2)  586/    62F0 :                     ;             |  0 - OK
(2)  587/    62F0 :                     ;             | -1 - Not found
(2)  588/    62F0 :                     ; --------------------------------------------------------
(2)  589/    62F0 :                     
(2)  590/    62F0 :                     SubTask_cmnd0A:
(2)  591/    62F0 : 6128                		bsr	SubTsk_BramCall
(2)  592/    62F2 : 653A                		bcs	SubTsk_ReturnFail
(2)  593/    62F4 : 0839 0001 FFFF      .wait_dmna:	btst	#1,(SCPU_reg+mcd_memory).l		; Word-RAM Allowed (DMNA)?
             62FA : 8003             
(2)  594/    62FC : 67F6                		beq	.wait_dmna
(2)  595/    62FE : 41F9 0000 7350      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  596/    6304 : 43F9 000B C000      		lea	(SCPU_wram+WRAM_SaveDataCopy).l,a1
(2)  597/    630A : 7200                		moveq	#0,d1
(2)  598/    630C : 303C 0004           		move.w	#BRMWRITE,d0
(2)  599/    6310 : 4EB8 5F16           		jsr	_BURAM
(2)  600/    6314 : 6518                		bcs	SubTsk_ReturnFail
(2)  601/    6316 : 6000 FF40           		bra	SubTask_cmnd07
(2)  602/    631A :                     
(2)  603/    631A :                     ; --------------------------------------------------------
(2)  604/    631A :                     
(2)  605/    631A :                     SubTsk_BramCall:
(2)  606/    631A : 41F9 0000 7360      		lea	(RAM_CdSub_BramWork).l,a0
(2)  607/    6320 : 43F9 0000 79A0      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  608/    6326 : 7000                		moveq	#BRMINIT,d0
(2)  609/    6328 : 4EB8 5F16           		jsr	_BURAM
(2)  610/    632C : 4E75                		rts
(2)  611/    632E :                     SubTsk_ReturnFail:
(2)  612/    632E : 31FC FFFF 8020      		move.w	#-1,(SCPU_reg+mcd_dcomm_s).w
(2)  613/    6334 : 4E75                		rts
(2)  614/    6336 :                     ; SubTsk_ReturnOk:
(2)  615/    6336 :                     ; 		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  616/    6336 :                     ; 		rts
(2)  617/    6336 :                     
(2)  618/    6336 :                     SubTask_RetErr_NoFile:
(2)  619/    6336 : 11FC 0001 800F      		move.b	#%00000001,(SCPU_reg+mcd_comm_s).w	; SET ERROR %0001
(2)  620/    633C :                     
(2)  621/    633C :                     ; 	; *** REMOVE THIS ON RELEASE ***
(2)  622/    633C :                     ; 		move.w	#4,d1					; READY off | ACCESS blink
(2)  623/    633C :                     ; 		move.w	#LEDSET,d0
(2)  624/    633C :                     ; 		jmp	(_CDBIOS).w
(2)  625/    633C :                     ; 	; ***
(2)  626/    633C : 4E75                		rts
(2)  627/    633E :                     
(2)  628/    633E :                     ; =====================================================================
(2)  629/    633E :                     ; ----------------------------------------------------------------
(2)  630/    633E :                     ; Commands $10-$17
(2)  631/    633E :                     ;
(2)  632/    633E :                     ; CDDA
(2)  633/    633E :                     ; ----------------------------------------------------------------
(2)  634/    633E :                     
(2)  635/    633E :                     ; --------------------------------------------------------
(2)  636/    633E :                     ; Command $10
(2)  637/    633E :                     ;
(2)  638/    633E :                     ; Play CDDA Track, stops on finish.
(2)  639/    633E :                     ;
(2)  640/    633E :                     ; Input:
(2)  641/    633E :                     ; mcd_dcomm_m | dc.w track_num
(2)  642/    633E :                     ;               - DO NOT USE TRACK 1
(2)  643/    633E :                     ;               - TRACK 0 IS INVALID
(2)  644/    633E :                     ; --------------------------------------------------------
(2)  645/    633E :                     
(2)  646/    633E :                     SubTask_cmnd10:
(2)  647/    633E : 303C 0002           		move.w	#MSCSTOP,d0
(2)  648/    6342 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  649/    6346 : 613A                		bsr	spCdda_ResetVolume
(2)  650/    6348 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  651/    634C : 303C 0012           		move.w	#MSCPLAY1,d0
(2)  652/    6350 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  653/    6354 :                     
(2)  654/    6354 :                     ; --------------------------------------------------------
(2)  655/    6354 :                     ; Command $11
(2)  656/    6354 :                     ;
(2)  657/    6354 :                     ; Play CDDA Track, loops indefiniely.
(2)  658/    6354 :                     ;
(2)  659/    6354 :                     ; Input:
(2)  660/    6354 :                     ; mcd_dcomm_m | dc.w track_num
(2)  661/    6354 :                     ;               - DO NOT USE TRACK 1
(2)  662/    6354 :                     ;               - TRACK 0 IS INVALID
(2)  663/    6354 :                     ; --------------------------------------------------------
(2)  664/    6354 :                     
(2)  665/    6354 :                     SubTask_cmnd11:
(2)  666/    6354 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  667/    6358 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  668/    635C : 6124                		bsr	spCdda_ResetVolume
(2)  669/    635E : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  670/    6362 : 303C 0013           		move.w	#MSCPLAYR,d0
(2)  671/    6366 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  672/    636A :                     
(2)  673/    636A :                     ; --------------------------------------------------------
(2)  674/    636A :                     ; Command $14
(2)  675/    636A :                     ;
(2)  676/    636A :                     ; Stop CDDA Track
(2)  677/    636A :                     ; --------------------------------------------------------
(2)  678/    636A :                     
(2)  679/    636A :                     SubTask_cmnd14:
(2)  680/    636A : 303C 0002           		move.w	#MSCSTOP,d0
(2)  681/    636E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  682/    6372 : 600E                		bra	spCdda_ResetVolume
(2)  683/    6374 :                     
(2)  684/    6374 :                     ; --------------------------------------------------------
(2)  685/    6374 :                     ; Command $16
(2)  686/    6374 :                     ;
(2)  687/    6374 :                     ; Fade-out/Fade-in CD Volume
(2)  688/    6374 :                     ;
(2)  689/    6374 :                     ; Input:
(2)  690/    6374 :                     ; mcd_dcomm_m | dc.w target_vol,fade_speed
(2)  691/    6374 :                     ;               - Target volume: $000-$400 Max-Min
(2)  692/    6374 :                     ;               - Fade Speed:    $001-$200 Slow-Fast
(2)  693/    6374 :                     ;                                     $400 Set once
(2)  694/    6374 :                     ; --------------------------------------------------------
(2)  695/    6374 :                     
(2)  696/    6374 :                     SubTask_cmnd16:
(2)  697/    6374 : 2238 8010           		move.l	(SCPU_reg+mcd_dcomm_m).w,d1
(2)  698/    6378 : 303C 0086           		move.w	#FDRCHG,d0
(2)  699/    637C : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  700/    6380 : 4E75                		rts
(2)  701/    6382 :                     
(2)  702/    6382 :                     ; --------------------------------------------------------
(2)  703/    6382 :                     ; Command $17
(2)  704/    6382 :                     ;
(2)  705/    6382 :                     ; CDDA Fade-out
(2)  706/    6382 :                     ; --------------------------------------------------------
(2)  707/    6382 :                     
(2)  708/    6382 :                     SubTask_cmnd17:
(2)  709/    6382 :                     ; 		move.l	#$0380,d1
(2)  710/    6382 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  711/    6382 :                     ; 		jsr	(_CDBIOS).w
(2)  712/    6382 :                     ; 		move.l	#$0380|$8000,d1
(2)  713/    6382 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  714/    6382 :                     ; 		jsr	(_CDBIOS).w
(2)  715/    6382 :                     ; 		rts
(2)  716/    6382 :                     
(2)  717/    6382 :                     ; --------------------------------------------------------
(2)  718/    6382 :                     ; CDDA subroutines:
(2)  719/    6382 :                     
(2)  720/    6382 :                     spCdda_ResetVolume:
(2)  721/    6382 : 48E7 C0C0           		movem.l	d0-d1/a0-a1,-(sp)
(2)  722/    6386 : 323C 0400           		move.w	#$0400,d1
(2)  723/    638A : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  724/    638E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  725/    6392 : 323C 8400           		move.w	#$0400|$8000,d1
(2)  726/    6396 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  727/    639A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  728/    639E : 4CDF 0303           		movem.l	(sp)+,d0-d1/a0-a1
(2)  729/    63A2 : 4E75                		rts
(2)  730/    63A4 :                     
(2)  731/    63A4 :                     ; =====================================================================
(2)  732/    63A4 :                     ; ----------------------------------------------------------------
(2)  733/    63A4 :                     ; Commands $18-$1F
(2)  734/    63A4 :                     ;
(2)  735/    63A4 :                     ; Stamp rendering
(2)  736/    63A4 :                     ; ----------------------------------------------------------------
(2)  737/    63A4 :                     
(2)  738/    63A4 :                     ; --------------------------------------------------------
(2)  739/    63A4 :                     ; Command $18
(2)  740/    63A4 :                     ;
(2)  741/    63A4 :                     ; Init/Enable Stamps
(2)  742/    63A4 :                     ;
(2)  743/    63A4 :                     ; Input:
(2)  744/    63A4 :                     ; mcd_dcomm_m | dc.w width,height
(2)  745/    63A4 :                     ;               - Stamp Dot-Screen Width
(2)  746/    63A4 :                     ;               - Stamp Dot-Screen Height
(2)  747/    63A4 :                     ; --------------------------------------------------------
(2)  748/    63A4 :                     
(2)  749/    63A4 :                     SubTask_cmnd18:
(2)  750/    63A4 : 43F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a1
(2)  751/    63A8 : 3011                		move.w	(a1),d0
(2)  752/    63AA : 3229 0002           		move.w	2(a1),d1
(2)  753/    63AE : 31C0 7202           		move.w	d0,(RAM_CdSub_StampW).w
(2)  754/    63B2 : 31C1 7204           		move.w	d1,(RAM_CdSub_StampH).w
(2)  755/    63B6 : 31FC 0000 720A      		move.w	#%000,(RAM_CdSub_StampSize).w	; Stamp type/size: 1x1 screen | 16x16 dot | RPT
(2)  756/    63BC : 6100 0802           		bsr	CdSub_StampInitStuff
(2)  757/    63C0 : 6100 080A           		bsr	CdSub_StampDefaults
(2)  758/    63C4 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  759/    63CA : 31FC 0001 7206      		move.w	#1,(RAM_CdSub_StampEnbl).w	; Enable Stamp rendering
(2)  760/    63D0 : 08F8 0001 8033      		bset	#1,(SCPU_reg+$33).w
(2)  761/    63D6 : 4E75                		rts
(2)  762/    63D8 :                     
(2)  763/    63D8 :                     ; --------------------------------------------------------
(2)  764/    63D8 :                     ; Command $19
(2)  765/    63D8 :                     ;
(2)  766/    63D8 :                     ; Disable Stamps, DMNA must bet set.
(2)  767/    63D8 :                     ; --------------------------------------------------------
(2)  768/    63D8 :                     
(2)  769/    63D8 :                     SubTask_cmnd19:
(2)  770/    63D8 : 08B8 0001 8033      		bclr	#1,(SCPU_reg+$33).w
(2)  771/    63DE : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2)  772/    63E2 : 0207 0007            		andi.b	#%00111,d7
(2)  773/    63E6 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w		; Restore WRAM write mode
(2)  774/    63EA : 33FC 0000 000B      		move.w	#0,(SCPU_wram+WRAM_StampCurrFlip).l
             63F0 : BFFE             
(2)  775/    63F2 : 31FC 0000 7206      		move.w	#0,(RAM_CdSub_StampEnbl).w		; Disable Stamp rendering
(2)  776/    63F8 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  777/    63FE : 08F8 0000 8003      .set_ret:	bset	#0,(SCPU_reg+mcd_memory).w
(2)  778/    6404 : 67F8                		beq.s	.set_ret
(2)  779/    6406 : 4E75                		rts
(2)  780/    6408 :                     
(2)  781/    6408 :                     ; =====================================================================
(2)  782/    6408 :                     ; ----------------------------------------------------------------
(2)  783/    6408 :                     ; Subroutines
(2)  784/    6408 :                     ; ----------------------------------------------------------------
(2)  785/    6408 :                     
(2)  786/    6408 :                     ; --------------------------------------------------------
(2)  787/    6408 :                     ; CD-ROM data
(2)  788/    6408 :                     ; --------------------------------------------------------
(2)  789/    6408 :                     
(2)  790/    6408 :                     ; ------------------------------------------------
(2)  791/    6408 :                     ; spReadSectorsN
(2)  792/    6408 :                     ;
(2)  793/    6408 :                     ; Input:
(2)  794/    6408 :                     ; a0 - Destination
(2)  795/    6408 :                     ; d0 - Sector start
(2)  796/    6408 :                     ; d1 - Number of sectors
(2)  797/    6408 :                     ; ------------------------------------------------
(2)  798/    6408 :                     
(2)  799/    6408 :                     spReadSectorsN:
(2)  800/    6408 : 4BF9 0001 4AFC      		lea	(RAM_CdSub_FsBuff).l,a5
(2)  801/    640E : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  802/    6414 : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  803/    641A : 2A80                		move.l	d0,(a5)
(2)  804/    641C : 2B41 0004           		move.l	d1,4(a5)
(2)  805/    6420 : 2B48 0008           		move.l	a0,8(a5)
(2)  806/    6424 : 11FC 0003 8004      		move.b	#%011,(SCPU_reg+4).w		; Set CDC device to "Sub CPU"
(2)  807/    642A : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  808/    642E : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  809/    6432 : 204D                		move.l	a5,a0
(2)  810/    6434 : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  811/    6438 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  812/    643C :                     .wait_STAT:
(2)  813/    643C : 2F0D                		move.l	a5,-(sp)
(2)  814/    643E : 6100 0944           		bsr	CdSub_PCM_Process
(2)  815/    6442 : 2A5F                		move.l	(sp)+,a5
(2)  816/    6444 : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  817/    6448 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  818/    644C : 65EE                 		bcs.s	.wait_STAT
(2)  819/    644E :                     .wait_READ:
(2)  820/    644E : 2F0D                		move.l	a5,-(sp)
(2)  821/    6450 : 6100 0932           		bsr	CdSub_PCM_Process
(2)  822/    6454 : 2A5F                		move.l	(sp)+,a5
(2)  823/    6456 : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  824/    645A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  825/    645E : 65EE                		bcs.s	.wait_READ
(2)  826/    6460 : 2B40 0010           		move.l	d0,$10(a5)
(2)  827/    6464 :                     .WaitTransfer:
(2)  828/    6464 : 206D 0008           		movea.l	8(a5),a0			; a0 - DATA Destination
(2)  829/    6468 : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  830/    646C : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  831/    6470 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  832/    6474 : 65EE                		bcs.s	.waitTransfer
(2)  833/    6476 : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  834/    647A : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  835/    647E : 06AD 0000 0800      		addi.l	#$800,8(a5)
             6484 : 0008             
(2)  836/    6486 : 5295                		addq.l	#1,(a5)
(2)  837/    6488 : 53AD 0004           		subq.l	#1,4(a5)
(2)  838/    648C : 66AE                		bne.s	.wait_STAT
(2)  839/    648E : 4E75                		rts
(2)  840/    6490 :                     
(2)  841/    6490 :                     ; ------------------------------------------------
(2)  842/    6490 :                     ; ISO9660 Driver
(2)  843/    6490 :                     ; ------------------------------------------------
(2)  844/    6490 :                     
(2)  845/    6490 :                     spInitFS:
(2)  846/    6490 : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  847/    6494 : 7010                		moveq	#$10,d0			; Read sector number $10 (At $8000)
(2)  848/    6496 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  849/    6498 : 41F9 0000 7AFC      		lea	(ISO_Filelist).l,a0
(2)  850/    649E : 2F08                		move.l	a0,-(sp)
(2)  851/    64A0 : 6100 FF66           		bsr	spReadSectorsN
(2)  852/    64A4 : 205F                		move.l	(sp)+,a0		; Now use the actual output
(2)  853/    64A6 : 43E8 009C           		lea	$9C(a0),a1
(2)  854/    64AA : 1029 0006           		move.b	6(a1),d0		; Read sector where filelist is located.
(2)  855/    64AE : E188                		lsl.l	#8,d0
(2)  856/    64B0 : 1029 0007           		move.b	7(a1),d0
(2)  857/    64B4 : E188                		lsl.l	#8,d0
(2)  858/    64B6 : 1029 0008           		move.b	8(a1),d0
(2)  859/    64BA : E188                		lsl.l	#8,d0
(2)  860/    64BC : 1029 0009           		move.b	9(a1),d0
(2)  861/    64C0 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  862/    64C2 : 6100 FF44           		bsr	spReadSectorsN
(2)  863/    64C6 : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6
(2)  864/    64CA : 4E75                		rts
(2)  865/    64CC :                     
(2)  866/    64CC :                     ; --------------------------------------------------------
(2)  867/    64CC :                     ; spSearchFile
(2)  868/    64CC :                     ;
(2)  869/    64CC :                     ; Search a file on the disc
(2)  870/    64CC :                     ; FILELIST MUST BE LOADED WITH spInitFS ON INIT.
(2)  871/    64CC :                     ;
(2)  872/    64CC :                     ; Input:
(2)  873/    64CC :                     ; a0   | Filename string with zero termination
(2)  874/    64CC :                     ;
(2)  875/    64CC :                     ; Returns:
(2)  876/    64CC :                     ; bcs  | File NOT found / error
(2)  877/    64CC :                     ; bcc  | File found
(2)  878/    64CC :                     ;
(2)  879/    64CC :                     ; bcc:
(2)  880/    64CC :                     ; d0.l | Start sector
(2)  881/    64CC :                     ; d1.l | Number of sectors
(2)  882/    64CC :                     ; d2.l | Filesize
(2)  883/    64CC :                     ;
(2)  884/    64CC :                     ; Breaks:
(2)  885/    64CC :                     ; d4-d7,a6
(2)  886/    64CC :                     ; --------------------------------------------------------
(2)  887/    64CC :                     
(2)  888/    64CC :                     spSearchFile:
(2)  889/    64CC : 49F9 0000 7AFC      		lea	(ISO_Filelist).l,a4	; a4 - Root filelist
(2)  890/    64D2 : 7000                		moveq	#0,d0
(2)  891/    64D4 : 7200                		moveq	#0,d1
(2)  892/    64D6 : 7400                		moveq	#0,d2
(2)  893/    64D8 :                     .next_file:
(2)  894/    64D8 : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  895/    64DA : 673E                		beq.s	.failed_srch
(2)  896/    64DC : 0247 00FF           		andi.w	#$FF,d7
(2)  897/    64E0 : 264C                		move.l	a4,a3			; a3 - Current file block
(2)  898/    64E2 : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  899/    64E6 : 1C13                		move.b	(a3),d6
(2)  900/    64E8 : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  901/    64EA : D6FC 0007           		adda	#$07,a3			; Go to Filename string
(2)  902/    64EE : 7C00                		moveq	#0,d6
(2)  903/    64F0 : 1C1B                		move.b	(a3)+,d6
(2)  904/    64F2 : 5946                		subq.w	#3+1,d6
(2)  905/    64F4 : 2448                		move.l	a0,a2			; a2 - string to seach for
(2)  906/    64F6 :                     .chk_str:
(2)  907/    64F6 : 1A1B                		move.b	(a3)+,d5
(2)  908/    64F8 : BA1A                		cmp.b	(a2)+,d5
(2)  909/    64FA : 6606                		bne.s	.non_file
(2)  910/    64FC : 51CE FFF8           		dbf	d6,.chk_str
(2)  911/    6500 : 6004                		bra.s	.found_file
(2)  912/    6502 :                     .non_file:
(2)  913/    6502 : D8C7                		adda	d7,a4			; Next block
(2)  914/    6504 : 60D2                		bra.s	.next_file
(2)  915/    6506 :                     .found_file:
(2)  916/    6506 : 202C 0006           		move.l	$06(a4),d0		; d0 - Sector position
(2)  917/    650A : 222C 000E           		move.l	$0E(a4),d1		; d1 - Number of sectors
(2)  918/    650E : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  919/    6510 : E089                		lsr.l	#8,d1			; bitshift d1
(2)  920/    6512 : E689                		lsr.l	#3,d1
(2)  921/    6514 : 44FC 0000           		move	#0,ccr
(2)  922/    6518 : 4E75                		rts
(2)  923/    651A :                     .failed_srch:
(2)  924/    651A : 44FC 0001           		move	#1,ccr
(2)  925/    651E : 4E75                		rts
(2)  926/    6520 :                     
(2)  927/    6520 :                     ; =====================================================================
(2)  928/    6520 :                     ; ----------------------------------------------------------------
(2)  929/    6520 :                     ; Stamps rendering
(2)  930/    6520 :                     ; ----------------------------------------------------------------
(2)  931/    6520 :                     
(2)  932/    6520 :                     CdSub_StampRender:
(2)  933/    6520 : 3E38 7206           		move.w	(RAM_CdSub_StampEnbl).w,d7	; Stamp rendering enabled?
(2)  934/    6524 : 6700 00B8           		beq	.exit_render
(2)  935/    6528 : 0839 0001 FFFF      		btst	#1,(SCPU_reg+mcd_memory).l	; Word-RAM allowed (DMNA)?
             652E : 8003             
(2)  936/    6530 : 6700 00AC           		beq	.exit_render
(2)  937/    6534 :                     ; 		bset	#7,(SCPU_reg+mcd_comm_s).w
(2)  938/    6534 : 4A38 721A           		tst.b	(RAM_CdSub_StampReqUpd).w	; MAIN wants WRAM?
(2)  939/    6538 : 671C                		beq	.no_break
(2)  940/    653A : 4238 721A           		clr.b	(RAM_CdSub_StampReqUpd).w
(2)  941/    653E :                     .wait_done:
(2)  942/    653E : 6100 0844           		bsr	CdSub_PCM_Process
(2)  943/    6542 : 1E38 8058           		move.b	($FFFF8058).w,d7
(2)  944/    6546 : 6BF6                		bmi.s	.wait_done
(2)  945/    6548 :                     ; 		tst.b	(RAM_CdSub_StampBusy).w
(2)  946/    6548 :                     ; 		bne.s	.wait_done
(2)  947/    6548 : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN
             654E : 8003             
(2)  948/    6550 : 67F6                		beq.s	.wait_ret
(2)  949/    6552 : 6000 008A           		bra	.exit_render			; Exit
(2)  950/    6556 :                     .no_break:
(2)  951/    6556 :                     
(2)  952/    6556 :                     ; ----------------------------------------
(2)  953/    6556 :                     ; Genesis request
(2)  954/    6556 :                     ; ----------------------------------------
(2)  955/    6556 :                     
(2)  956/    6556 : 3E39 000B BFFE      		move.w	(SCPU_wram+WRAM_StampCurrFlip).l,d7
(2)  957/    655C : 3C38 7214           		move.w	(RAM_CdSub_StampCBuff).w,d6
(2)  958/    6560 : BE46                		cmp.w	d6,d7
(2)  959/    6562 : 672C                		beq	.flip_turn
(2)  960/    6564 : 31C7 7214           		move.w	d7,(RAM_CdSub_StampCBuff).w
(2)  961/    6568 :                     ; 		move.w	#0,(SCPU_wram+WRAM_StampsDone).l
(2)  962/    6568 : 08B8 0003 800F      		bclr	#3,(SCPU_reg+mcd_comm_s).w
(2)  963/    656E : 6100 0814           		bsr	CdSub_PCM_Process
(2)  964/    6572 : 616E                		bsr	.make_list
(2)  965/    6574 : 6100 080E           		bsr	CdSub_PCM_Process
(2)  966/    6578 : 6100 00C4           		bsr	.trace_blank
(2)  967/    657C : 31FC 0000 720E      		move.w	#0,(RAM_CdSub_StampNextRd).w		; Start the engine
(2)  968/    6582 : 31FC 0780 720C      		move.w	#$780,(RAM_CdSub_StampNextWr).w
(2)  969/    6588 : 50F8 7210           		st.b	(RAM_CdSub_DotClearFlag).w
(2)  970/    658C : 6100 07F6           		bsr	CdSub_PCM_Process
(2)  971/    6590 :                     .flip_turn:
(2)  972/    6590 :                     
(2)  973/    6590 :                     ; ----------------------------------------
(2)  974/    6590 :                     ; Main engine
(2)  975/    6590 :                     ; ----------------------------------------
(2)  976/    6590 :                     
(2)  977/    6590 :                     ; 		move.w	(SCPU_wram+WRAM_StampsDone).l,d7
(2)  978/    6590 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  979/    6594 : 0807 0003           		btst	#3,d7
(2)  980/    6598 : 6620                		bne	.return_ret
(2)  981/    659A :                     ; 		move.b	($FFFF8058).w,d7
(2)  982/    659A :                     ; 		bmi.s	.exit_render
(2)  983/    659A : 4A38 7208           		tst.b	(RAM_CdSub_StampBusy).w			; Check if current Stamp finished
(2)  984/    659E : 663E                		bne	.exit_render
(2)  985/    65A0 : 6100 07E2           		bsr	CdSub_PCM_Process
(2)  986/    65A4 : 6100 03CC           		bsr	.process_trace
(2)  987/    65A8 : 0A78 0780 720E      		eori.w	#$780,(RAM_CdSub_StampNextRd).w
(2)  988/    65AE : 6100 07D4           		bsr	CdSub_PCM_Process
(2)  989/    65B2 : 6154                		bsr	.make_stamp
(2)  990/    65B4 : 4A78 7200           		tst.w	(RAM_CdSub_StampNum).w
(2)  991/    65B8 : 6624                		bne	.exit_render
(2)  992/    65BA :                     ; 		move.w	#1,(SCPU_wram+WRAM_StampsDone).l
(2)  993/    65BA :                     
(2)  994/    65BA :                     ; ------------------------------------------------
(2)  995/    65BA :                     ; All stamps are checked
(2)  996/    65BA :                     ; ------------------------------------------------
(2)  997/    65BA :                     
(2)  998/    65BA :                     .return_ret:
(2)  999/    65BA :                     ; 		move.b	($FFFF8058).w,d7
(2) 1000/    65BA :                     ; 		bmi.s	.return_ret
(2) 1001/    65BA : 6100 07C8           		bsr	CdSub_PCM_Process
(2) 1002/    65BE : 4A38 7208           		tst.b	(RAM_CdSub_StampBusy).w
(2) 1003/    65C2 : 66F6                		bne	.return_ret
(2) 1004/    65C4 : 6100 0606           		bsr	CdSub_StampDefaults
(2) 1005/    65C8 :                     ; 		bclr	#7,(SCPU_reg+mcd_comm_s).w
(2) 1006/    65C8 : 31FC FFFF 7214      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2) 1007/    65CE : 08F9 0000 FFFF      .wait_rete:	bset	#0,(SCPU_reg+mcd_memory).l		; Set RET
             65D4 : 8003             
(2) 1008/    65D6 : 67F6                		beq.s	.wait_rete
(2) 1009/    65D8 : 08F8 0003 800F      		bset	#3,(SCPU_reg+mcd_comm_s).w
(2) 1010/    65DE :                     
(2) 1011/    65DE :                     ; ------------------------------------------------
(2) 1012/    65DE :                     ; Exit
(2) 1013/    65DE :                     ; ------------------------------------------------
(2) 1014/    65DE :                     
(2) 1015/    65DE :                     .exit_render:
(2) 1016/    65DE : 6000 07A4           		bra	CdSub_PCM_Process
(2) 1017/    65E2 :                     
(2) 1018/    65E2 :                     ; =====================================================================
(2) 1019/    65E2 :                     ; ------------------------------------------------
(2) 1020/    65E2 :                     ; Make a list of available stamps to use
(2) 1021/    65E2 :                     ; ------------------------------------------------
(2) 1022/    65E2 :                     
(2) 1023/    65E2 :                     .make_list:
(2) 1024/    65E2 : 41F9 000B A000      		lea	(SCPU_wram+WRAM_MdStampList).l,a0
(2) 1025/    65E8 : 43F9 0000 7250      		lea	(RAM_CdSub_StampList).l,a1
(2) 1026/    65EE : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(2) 1027/    65F0 :                     .loop_list:
(2) 1028/    65F0 : 1C10                		move.b	cdstamp_flags(a0),d6		; %Et00000R
(2) 1029/    65F2 : 0806 0007           		btst	#7,d6
(2) 1030/    65F6 : 6706                		beq.s	.no_stamp
(2) 1031/    65F8 : 2288                		move.l	a0,(a1)
(2) 1032/    65FA : D2FC 0008           		adda	#8,a1
(2) 1033/    65FE :                     .no_stamp:
(2) 1034/    65FE : D0FC 0020           		adda	#$20,a0
(2) 1035/    6602 : 51CF FFEC           		dbf	d7,.loop_list
(2) 1036/    6606 : 4E75                		rts
(2) 1037/    6608 :                     
(2) 1038/    6608 :                     ; ------------------------------------------------
(2) 1039/    6608 :                     ; Make stamp from the generated list
(2) 1040/    6608 :                     ; ------------------------------------------------
(2) 1041/    6608 :                     
(2) 1042/    6608 :                     .make_stamp:
(2) 1043/    6608 : 4278 7200           		clr.w	(RAM_CdSub_StampNum).w
(2) 1044/    660C :                     .retry:
(2) 1045/    660C : 7E00                		moveq	#0,d7
(2) 1046/    660E : 3E38 7212           		move.w	(RAM_CdSub_StampIndxW).w,d7
(2) 1047/    6612 : 5278 7212           		addq.w	#1,(RAM_CdSub_StampIndxW).w
(2) 1048/    6616 : 3C07                		move.w	d7,d6
(2) 1049/    6618 : E74F                		lsl.w	#3,d7
(2) 1050/    661A : 41F9 0000 7250      		lea	(RAM_CdSub_StampList).l,a0
(2) 1051/    6620 : 2030 7000           		move.l	(a0,d7.w),d0
(2) 1052/    6624 : 6716                		beq.s	.exit_last
(2) 1053/    6626 : 42B0 7000           		clr.l	(a0,d7.w)
(2) 1054/    662A : 2040                		move.l	d0,a0
(2) 1055/    662C : 6100 00DE           		bsr	.make_trace
(2) 1056/    6630 : 65DA                		bcs	.retry
(2) 1057/    6632 : 5278 7200           		addq.w	#1,(RAM_CdSub_StampNum).w
(2) 1058/    6636 : 0A78 0780 720C      		eori.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1059/    663C :                     .exit_last:
(2) 1060/    663C : 4E75                		rts
(2) 1061/    663E :                     
(2) 1062/    663E :                     ; =====================================================================
(2) 1063/    663E :                     ; ------------------------------------------------
(2) 1064/    663E :                     ; Clear all the dot-screen
(2) 1065/    663E :                     ;
(2) 1066/    663E :                     ; Uses:
(2) 1067/    663E :                     ; a1,d0
(2) 1068/    663E :                     ; ------------------------------------------------
(2) 1069/    663E :                     
(2) 1070/    663E :                     .trace_blank:
(2) 1071/    663E : 41F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a0
(2) 1072/    6644 : 700F                		moveq	#(256/16)-1,d0
(2) 1073/    6646 :                     .reset_out:
(2) 1074/    6646 :                     	rept 16
(2) 1075/    6646 :                     		move.l	#$FFF8,(a0)+
(2) 1076/    6646 :                     		move.l	#0,(a0)+
(2) 1077/    6646 :                     	endm
(2) 1075/    6646 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    664C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6652 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6658 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    665E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6664 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    666A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6670 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6676 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    667C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    6682 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6688 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    668E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6694 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    669A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66A0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66A6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66AC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66B2 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66B8 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66BE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66C4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66CA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66D0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66D6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66DC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66E2 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66E8 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66EE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    66F4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1075/    66FA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1076/    6700 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1078/    6706 : 51C8 FF3E           		dbf	d0,.reset_out
(2) 1079/    670A : 4E75                		rts
(2) 1080/    670C :                     
(2) 1081/    670C :                     ; =====================================================================
(2) 1082/    670C :                     ; ------------------------------------------------
(2) 1083/    670C :                     ; Make the trace data
(2) 1084/    670C :                     ;
(2) 1085/    670C :                     ; Input:
(2) 1086/    670C :                     ; a0 - Current stamp
(2) 1087/    670C :                     ; a1 - Output trace location
(2) 1088/    670C :                     ; a6 - Stamp math buffer
(2) 1089/    670C :                     ; d1.w - Center X
(2) 1090/    670C :                     ; d2.w - Center Y
(2) 1091/    670C :                     ; ------------------------------------------------
(2) 1092/    670C :                     
(2) 1093/    670C :                     .make_trace:
(2) 1094/    670C : 4DF9 0000 721C      		lea	(RAM_CdSub_StampProc).l,a6
(2) 1095/    6712 : 4BF8 7244           		lea	(RAM_CdSub_StampOutBox).w,a5
(2) 1096/    6716 : 7E00                		moveq	#0,d7
(2) 1097/    6718 : 1E28 0001           		move.b	cdstamp_map(a0),d7
(2) 1098/    671C : E18F                		lsl.l	#8,d7
(2) 1099/    671E : E78F                		lsl.l	#3,d7
(2) 1100/    6720 : DEBC 0003 0000      		add.l	#WRAM_MdMapTable,d7
(2) 1101/    6726 : E48F                		lsr.l	#2,d7
(2) 1102/    6728 : 3A87                		move.w	d7,stmpi_map(a5)
(2) 1103/    672A : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1104/    672E : BC7C FC00           		cmp.w	#-$400,d6
(2) 1105/    6732 : 6D00 0162           		blt	.invalid
(2) 1106/    6736 : BC7C 0100           		cmp.w	#$100,d6
(2) 1107/    673A : 6C00 015A           		bge	.invalid
(2) 1108/    673E :                     
(2) 1109/    673E :                     	; ------------------------------------------------
(2) 1110/    673E :                     	; Trace texture
(2) 1111/    673E : 7200                		moveq	#0,d1
(2) 1112/    6740 : 7400                		moveq	#0,d2
(2) 1113/    6742 : 3228 000A           		move.w	cdstamp_wdth(a0),d1
(2) 1114/    6746 : 3428 000C           		move.w	cdstamp_hght(a0),d2
(2) 1115/    674A : 3628 000E           		move.w	cdstamp_scale(a0),d3
(2) 1116/    674E : 3803                		move.w	d3,d4
(2) 1117/    6750 : C7FC 0100           		muls.w	#SET_STAMPPOV,d3
(2) 1118/    6754 : E083                		asr.l	#8,d3
(2) 1119/    6756 : 4A43                		tst.w	d3
(2) 1120/    6758 : 6A02                		bpl.s	.splusv
(2) 1121/    675A : E683                		asr.l	#3,d3
(2) 1122/    675C :                     .splusv:
(2) 1123/    675C : 0641 0030           		addi.w	#48,d1
(2) 1124/    6760 : 0642 0030           		addi.w	#48,d2
(2) 1125/    6764 : D243                		add.w	d3,d1
(2) 1126/    6766 : D443                		add.w	d3,d2
(2) 1127/    6768 : 3638 7202           		move.w	(RAM_CdSub_StampW).w,d3
(2) 1128/    676C : 3838 7204           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1129/    6770 : E249                		lsr.w	#1,d1
(2) 1130/    6772 : E24A                		lsr.w	#1,d2
(2) 1131/    6774 : E24B                		lsr.w	#1,d3
(2) 1132/    6776 : E24C                		lsr.w	#1,d4
(2) 1133/    6778 : 4443                		neg.w	d3
(2) 1134/    677A : 4444                		neg.w	d4
(2) 1135/    677C : 3E28 0006           		move.w	cdstamp_x(a0),d7
(2) 1136/    6780 : 3C28 0008           		move.w	cdstamp_y(a0),d6
(2) 1137/    6784 : 9E41                		sub.w	d1,d7
(2) 1138/    6786 : 9C42                		sub.w	d2,d6
(2) 1139/    6788 : BE43                		cmp.w	d3,d7
(2) 1140/    678A : 6C04                		bge.s	.no_xl
(2) 1141/    678C : 9E43                		sub.w	d3,d7
(2) 1142/    678E : D247                		add.w	d7,d1
(2) 1143/    6790 :                     .no_xl:
(2) 1144/    6790 : BC44                		cmp.w	d4,d6
(2) 1145/    6792 : 6C04                		bge.s	.no_yl
(2) 1146/    6794 : 9C44                		sub.w	d4,d6
(2) 1147/    6796 : D446                		add.w	d6,d2
(2) 1148/    6798 :                     .no_yl:
(2) 1149/    6798 :                     ; 		addi.w	#8,d1
(2) 1150/    6798 :                     ; 		addi.w	#8,d2
(2) 1151/    6798 :                     ; 		move.w	#SET_STAMPPOV,d7
(2) 1152/    6798 :                     ; 		add.w	cdstamp_scale(a0),d7
(2) 1153/    6798 :                     ; 		muls.w	d7,d2
(2) 1154/    6798 :                     ; 		muls.w	d7,d1
(2) 1155/    6798 :                     ; 		asr.l	#8,d2
(2) 1156/    6798 :                     ; 		asr.l	#8,d1
(2) 1157/    6798 :                     
(2) 1158/    6798 : 4441                		neg.w	d1
(2) 1159/    679A : 4442                		neg.w	d2
(2) 1160/    679C : 6100 00FE           		bsr	.mk_vars
(2) 1161/    67A0 : 49F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a4
(2) 1162/    67A6 : 3C38 720C           		move.w	(RAM_CdSub_StampNextWr).w,d6
(2) 1163/    67AA : D8C6                		adda	d6,a4
(2) 1164/    67AC : 3E38 7204           		move.w	(RAM_CdSub_StampH).w,d7
(2) 1165/    67B0 : 5347                		subq.w	#1,d7
(2) 1166/    67B2 :                     .next_line:
(2) 1167/    67B2 : 3C16                		move.w	stmpc_XC(a6),d6
(2) 1168/    67B4 : CDC2                		muls.w	d2,d6
(2) 1169/    67B6 : DCAE 0004           		add.l	stmpc_X(a6),d6
(2) 1170/    67BA : EA86                		asr.l	#5,d6
(2) 1171/    67BC : 38C6                		move.w	d6,(a4)+			; X pos
(2) 1172/    67BE : 3C2E 0002           		move.w	stmpc_YC(a6),d6
(2) 1173/    67C2 : CDC2                		muls.w	d2,d6
(2) 1174/    67C4 : 9CAE 0008           		sub.l	stmpc_Y(a6),d6
(2) 1175/    67C8 : EA86                		asr.l	#5,d6
(2) 1176/    67CA : 38C6                		move.w	d6,(a4)+			; Y pos
(2) 1177/    67CC : 2C2E 0014           		move.l	stmpc_TX(a6),d6
(2) 1178/    67D0 : EA86                		asr.l	#5,d6
(2) 1179/    67D2 : 38C6                		move.w	d6,(a4)+			; X Delta
(2) 1180/    67D4 : 2C2E 0018           		move.l	stmpc_TY(a6),d6
(2) 1181/    67D8 : EA86                		asr.l	#5,d6
(2) 1182/    67DA : 38C6                		move.w	d6,(a4)+			; Y Delta
(2) 1183/    67DC :                     
(2) 1184/    67DC : 5242                		addq.w	#1,d2
(2) 1185/    67DE : 51CF FFD2           		dbf	d7,.next_line
(2) 1186/    67E2 :                     
(2) 1187/    67E2 :                     	; ------------------------------------------------
(2) 1188/    67E2 :                     	; Expand out size
(2) 1189/    67E2 : 3E28 000A           		move.w	cdstamp_wdth(a0),d7
(2) 1190/    67E6 : 3C28 000C           		move.w	cdstamp_hght(a0),d6
(2) 1191/    67EA : 0647 0030           		addi.w	#48,d7
(2) 1192/    67EE : 0646 0030           		addi.w	#48,d6
(2) 1193/    67F2 : 3A28 000E           		move.w	cdstamp_scale(a0),d5
(2) 1194/    67F6 : 3805                		move.w	d5,d4
(2) 1195/    67F8 : CBFC 0100           		muls.w	#SET_STAMPPOV,d5
(2) 1196/    67FC : E085                		asr.l	#8,d5
(2) 1197/    67FE : 4A44                		tst.w	d4
(2) 1198/    6800 : 6A02                		bpl.s	.splus
(2) 1199/    6802 : E685                		asr.l	#3,d5
(2) 1200/    6804 :                     .splus:
(2) 1201/    6804 : DE45                		add.w	d5,d7
(2) 1202/    6806 : DC45                		add.w	d5,d6
(2) 1203/    6808 : 3A07                		move.w	d7,d5
(2) 1204/    680A : 3806                		move.w	d6,d4
(2) 1205/    680C : 3028 0006           		move.w	cdstamp_x(a0),d0
(2) 1206/    6810 : 3228 0008           		move.w	cdstamp_y(a0),d1
(2) 1207/    6814 : E24D                		lsr.w	#1,d5
(2) 1208/    6816 : E24C                		lsr.w	#1,d4
(2) 1209/    6818 : 9045                		sub.w	d5,d0
(2) 1210/    681A : 9244                		sub.w	d4,d1
(2) 1211/    681C : 3400                		move.w	d0,d2
(2) 1212/    681E : 3601                		move.w	d1,d3
(2) 1213/    6820 : D447                		add.w	d7,d2
(2) 1214/    6822 : D646                		add.w	d6,d3
(2) 1215/    6824 : 3838 7202           		move.w	(RAM_CdSub_StampW).w,d4		; Add center
(2) 1216/    6828 : 3A38 7204           		move.w	(RAM_CdSub_StampH).w,d5
(2) 1217/    682C : 3E04                		move.w	d4,d7
(2) 1218/    682E : 3C05                		move.w	d5,d6
(2) 1219/    6830 : E24F                		lsr.w	#1,d7
(2) 1220/    6832 : E24E                		lsr.w	#1,d6
(2) 1221/    6834 : D047                		add.w	d7,d0
(2) 1222/    6836 : D246                		add.w	d6,d1
(2) 1223/    6838 : D447                		add.w	d7,d2
(2) 1224/    683A : D646                		add.w	d6,d3
(2) 1225/    683C :                     
(2) 1226/    683C :                     
(2) 1227/    683C :                     ; 		muls.w	d5,d2
(2) 1228/    683C :                     ; 		muls.w	d5,d3
(2) 1229/    683C :                     ; 		asr.l	#8,d2
(2) 1230/    683C :                     ; 		asr.l	#8,d3
(2) 1231/    683C :                     
(2) 1232/    683C :                     	; d0 - X Left
(2) 1233/    683C :                     	; d1 - Y top
(2) 1234/    683C :                     	; d2 - X right
(2) 1235/    683C :                     	; d3 - Y down
(2) 1236/    683C :                     ; 		move.w	(RAM_CdSub_StampW).w,d4
(2) 1237/    683C :                     ; 		move.w	(RAM_CdSub_StampH).w,d5
(2) 1238/    683C : 0444 0010           		subi.w	#16,d4
(2) 1239/    6840 : 0445 0010           		subi.w	#16,d5
(2) 1240/    6844 : 3E02                		move.w	d2,d7
(2) 1241/    6846 : 0447 0010           		subi.w	#16,d7
(2) 1242/    684A : 4A47                		tst.w	d7
(2) 1243/    684C : 6B48                		bmi.s	.invalid
(2) 1244/    684E : 3E03                		move.w	d3,d7
(2) 1245/    6850 : 0447 0010           		subi.w	#16,d7
(2) 1246/    6854 : 4A47                		tst.w	d7
(2) 1247/    6856 : 6B3E                		bmi.s	.invalid
(2) 1248/    6858 : B044                		cmp.w	d4,d0
(2) 1249/    685A : 6C3A                		bge.s	.invalid
(2) 1250/    685C : B245                		cmp.w	d5,d1
(2) 1251/    685E : 6C36                		bge.s	.invalid
(2) 1252/    6860 : 0644 0010           		addi.w	#16,d4
(2) 1253/    6864 : 0645 0010           		addi.w	#16,d5
(2) 1254/    6868 : 4A40                		tst.w	d0
(2) 1255/    686A : 6A02                		bpl.s	.xl_p
(2) 1256/    686C : 4240                		clr.w	d0
(2) 1257/    686E : 4A41                .xl_p:		tst.w	d1
(2) 1258/    6870 : 6A02                		bpl.s	.yl_p
(2) 1259/    6872 : 4241                		clr.w	d1
(2) 1260/    6874 : B444                .yl_p:		cmp.w	d4,d2
(2) 1261/    6876 : 6D02                		blt.s	.xr_p
(2) 1262/    6878 : 3404                		move.w	d4,d2
(2) 1263/    687A : B645                .xr_p:		cmp.w	d5,d3
(2) 1264/    687C : 6D02                		blt.s	.yr_p
(2) 1265/    687E : 3605                		move.w	d5,d3
(2) 1266/    6880 :                     .yr_p:
(2) 1267/    6880 : 3B40 0002           		move.w	d0,stmpi_x(a5)
(2) 1268/    6884 : 3B41 0004           		move.w	d1,stmpi_y(a5)
(2) 1269/    6888 : 3B42 0006           		move.w	d2,stmpi_xr(a5)
(2) 1270/    688C : 3B43 0008           		move.w	d3,stmpi_yd(a5)
(2) 1271/    6890 : 023C 001E           		and	#%11110,ccr
(2) 1272/    6894 : 4E75                		rts
(2) 1273/    6896 :                     
(2) 1274/    6896 :                     .invalid:
(2) 1275/    6896 : 003C 0001           		or	#1,ccr
(2) 1276/    689A : 4E75                		rts
(2) 1277/    689C :                     
(2) 1278/    689C :                     ; ------------------------------------------------
(2) 1279/    689C :                     
(2) 1280/    689C :                     .mk_vars:
(2) 1281/    689C : 3E28 0010           		move.w	cdstamp_rot(a0),d7
(2) 1282/    68A0 : 3A07                		move.w	d7,d5
(2) 1283/    68A2 : 6100 01F4           		bsr	CdSub_SineWave
(2) 1284/    68A6 : 3C07                		move.w	d7,d6
(2) 1285/    68A8 : 3E05                		move.w	d5,d7
(2) 1286/    68AA : 6100 01E8           		bsr	CdSub_SineWave_Cos
(2) 1287/    68AE : 3D46 0024           		move.w	d6,stmpc_rot_sin(a6)
(2) 1288/    68B2 : 3D47 0026           		move.w	d7,stmpc_rot_cos(a6)
(2) 1289/    68B6 :                     
(2) 1290/    68B6 : 383C 0000           		move.w	#0,d4
(2) 1291/    68BA : 3A3C 0000           		move.w	#0,d5
(2) 1292/    68BE : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1293/    68C2 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1294/    68C6 : 9E46                		sub.w	d6,d7
(2) 1295/    68C8 : 3D47 001E           		move.w	d7,stmpc_zmul(a6)	; Z multi
(2) 1296/    68CC :                     ; 		move.w	d4,d7
(2) 1297/    68CC :                     ; 		move.w	d7,stmpc_xmul(a6)	; X multi
(2) 1298/    68CC : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1299/    68D0 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1300/    68D4 : E087                		asr.l	#8,d7
(2) 1301/    68D6 : 3D47 0022           		move.w	d7,stmpc_zmul_cos(a6)
(2) 1302/    68DA : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1303/    68DE : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1304/    68E2 : E087                		asr.l	#8,d7
(2) 1305/    68E4 : 3D47 0020           		move.w	d7,stmpc_zmul_sin(a6)
(2) 1306/    68E8 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1307/    68EC : 9E46                		sub.w	d6,d7
(2) 1308/    68EE : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1309/    68F2 : E087                		asr.l	#8,d7
(2) 1310/    68F4 : 3C87                		move.w	d7,stmpc_XC(a6)
(2) 1311/    68F6 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1312/    68FA : 9E46                		sub.w	d6,d7
(2) 1313/    68FC : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1314/    6900 : E087                		asr.l	#8,d7
(2) 1315/    6902 : 3D47 0002           		move.w	d7,stmpc_YC(a6)
(2) 1316/    6906 :                     
(2) 1317/    6906 : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1318/    690A : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1319/    690E : 3C05                		move.w	d5,d6
(2) 1320/    6910 : CDEE 0024           		muls.w	stmpc_rot_sin(a6),d6
(2) 1321/    6914 : DE86                		add.l	d6,d7
(2) 1322/    6916 : 7C00                		moveq	#0,d6
(2) 1323/    6918 : 3C28 0002           		move.w	cdstamp_cx(a0),d6
(2) 1324/    691C : E18E                		lsl.l	#8,d6
(2) 1325/    691E : DE86                		add.l	d6,d7
(2) 1326/    6920 : 2D47 0004           		move.l	d7,stmpc_X(a6)
(2) 1327/    6924 : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1328/    6928 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1329/    692C : 3C05                		move.w	d5,d6
(2) 1330/    692E : CDEE 0026           		muls.w	stmpc_rot_cos(a6),d6
(2) 1331/    6932 : 9E86                		sub.l	d6,d7
(2) 1332/    6934 : 7C00                		moveq	#0,d6
(2) 1333/    6936 : 3C28 0004           		move.w	cdstamp_cy(a0),d6
(2) 1334/    693A : E18E                		lsl.l	#8,d6
(2) 1335/    693C : 9E86                		sub.l	d6,d7
(2) 1336/    693E : 2D47 0008           		move.l	d7,stmpc_Y(a6)
(2) 1337/    6942 :                     
(2) 1338/    6942 : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1339/    6946 : CFC1                		muls.w	d1,d7
(2) 1340/    6948 : DFAE 0004           		add.l	d7,stmpc_X(a6)
(2) 1341/    694C : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1342/    6950 : CFC1                		muls.w	d1,d7
(2) 1343/    6952 : DFAE 0008           		add.l	d7,stmpc_Y(a6)
(2) 1344/    6956 :                     
(2) 1345/    6956 : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1346/    695A : 48C7                		ext.l	d7
(2) 1347/    695C : E187                		asl.l	#8,d7
(2) 1348/    695E : 2D47 0014           		move.l	d7,stmpc_TX(a6)
(2) 1349/    6962 : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1350/    6966 : 4447                		neg.w	d7
(2) 1351/    6968 : 48C7                		ext.l	d7
(2) 1352/    696A : E187                		asl.l	#8,d7
(2) 1353/    696C : 2D47 0018           		move.l	d7,stmpc_TY(a6)
(2) 1354/    6970 : 4E75                		rts
(2) 1355/    6972 :                     
(2) 1356/    6972 :                     ; =====================================================================
(2) 1357/    6972 :                     ; ------------------------------------------------
(2) 1358/    6972 :                     ; Send trace to ASIC
(2) 1359/    6972 :                     ;
(2) 1360/    6972 :                     ; Input:
(2) 1361/    6972 :                     ; d0.w | Map location / 2
(2) 1362/    6972 :                     ; d1.w | X pos
(2) 1363/    6972 :                     ; d2.w | Y pos
(2) 1364/    6972 :                     ; d3.w | Width
(2) 1365/    6972 :                     ; d4.w | Height
(2) 1366/    6972 :                     ;
(2) 1367/    6972 :                     ; Uses:
(2) 1368/    6972 :                     ; d5-d7
(2) 1369/    6972 :                     ; ------------------------------------------------
(2) 1370/    6972 :                     
(2) 1371/    6972 :                     .process_trace:
(2) 1372/    6972 : 6100 0410           		bsr	CdSub_PCM_Process
(2) 1373/    6976 : 08B8 0000 7210      		bclr	#0,(RAM_CdSub_DotClearFlag).w	; Clear dotscreen flag?
(2) 1374/    697C : 6600 00B2           		bne	.clear_frame
(2) 1375/    6980 : 41F8 7244           		lea	(RAM_CdSub_StampOutBox).w,a0
(2) 1376/    6984 : 3010                		move.w	stmpi_map(a0),d0
(2) 1377/    6986 : 3228 0002           		move.w	stmpi_x(a0),d1			; X left
(2) 1378/    698A : 3428 0004           		move.w	stmpi_y(a0),d2			; Y top
(2) 1379/    698E : 3628 0006           		move.w  stmpi_xr(a0),d3			; X right
(2) 1380/    6992 : 3828 0008           		move.w  stmpi_yd(a0),d4			; Y bottom
(2) 1381/    6996 : 9641                		sub.w	d1,d3				; XR-XL
(2) 1382/    6998 : 9842                		sub.w	d2,d4				; YB-YT
(2) 1383/    699A : 7C02                		moveq	#%10,d6				; Overwrite mode
(2) 1384/    699C : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1385/    69A0 : 0207 0007            		andi.b	#%00111,d7
(2) 1386/    69A4 : 0246 0003            		andi.w	#%11,d6
(2) 1387/    69A8 : E74E                 		lsl.w	#3,d6
(2) 1388/    69AA : 8E46                 		or.w	d6,d7
(2) 1389/    69AC : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1390/    69B0 : 7C00                 		moveq	#0,d6				; RPT bit
(2) 1391/    69B2 : 3E38 720A            		move.w	(RAM_CdSub_StampSize).w,d7
(2) 1392/    69B6 : 0247 0006            		andi.w	#%110,d7
(2) 1393/    69BA : 0246 0001            		andi.w	#%001,d6
(2) 1394/    69BE : 8E46                 		or.w	d6,d7
(2) 1395/    69C0 : 31C7 8058           		move.w	d7,($FFFF8058).w		; Stamp data size
(2) 1396/    69C4 : 31C0 805A           		move.w  d0,($FFFF805A).w		; d0 - Stamp map location
(2) 1397/    69C8 :                     
(2) 1398/    69C8 :                     	; X,Y,W,H
(2) 1399/    69C8 : 2E3C 0002 0000      		move.l	#WRAM_DotOutput_0,d7
(2) 1400/    69CE : 4A78 7214           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1401/    69D2 : 6706                		beq.s	.dot_0
(2) 1402/    69D4 : 2E3C 0002 8000      		move.l	#WRAM_DotOutput_1,d7
(2) 1403/    69DA :                     .dot_0:
(2) 1404/    69DA : 7C00                		moveq	#0,d6
(2) 1405/    69DC : 3A01                		move.w	d1,d5
(2) 1406/    69DE : E645                		asr.w	#3,d5
(2) 1407/    69E0 : 3C38 7204           		move.w	(RAM_CdSub_StampH).w,d6
(2) 1408/    69E4 : CDC5                		muls.w	d5,d6
(2) 1409/    69E6 : E586                		asl.l	#2,d6
(2) 1410/    69E8 : DE86                		add.l	d6,d7
(2) 1411/    69EA : 2A02                		move.l	d2,d5
(2) 1412/    69EC : 0245 FFF8           		andi.w	#-8,d5
(2) 1413/    69F0 : E58D                		lsl.l	#2,d5
(2) 1414/    69F2 : DE85                		add.l	d5,d7
(2) 1415/    69F4 : 0281 0000 0007      		andi.l	#%111,d1
(2) 1416/    69FA : 0282 0000 0007      		andi.l	#%111,d2
(2) 1417/    6A00 : E74A                		lsl.w	#3,d2
(2) 1418/    6A02 : 8242                		or.w	d2,d1
(2) 1419/    6A04 : E48F                		lsr.l	#2,d7
(2) 1420/    6A06 : 31C1 8060           		move.w  d1,($FFFF8060).w		; Output image buffer offset
(2) 1421/    6A0A : 31C7 805E           		move.w  d7,($FFFF805E).w		; Output image buffer start address
(2) 1422/    6A0E : 31C3 8062           		move.w	d3,($FFFF8062).w		; Image buffer H dot
(2) 1423/    6A12 : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1424/    6A16 :                     
(2) 1425/    6A16 : 7E00                		moveq	#0,d7
(2) 1426/    6A18 : 3E38 720E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1427/    6A1C : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1428/    6A22 : E48F                		lsr.l	#2,d7
(2) 1429/    6A24 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1430/    6A28 : 50F8 7208           		st.b	(RAM_CdSub_StampBusy).w
(2) 1431/    6A2C : 6000 0356           		bra	CdSub_PCM_Process
(2) 1432/    6A30 :                     
(2) 1433/    6A30 :                     ; ----------------------------------------------------------------
(2) 1434/    6A30 :                     ; FIRST FRAME ONLY
(2) 1435/    6A30 :                     
(2) 1436/    6A30 :                     .clear_frame:
(2) 1437/    6A30 : 6100 0352           		bsr	CdSub_PCM_Process
(2) 1438/    6A34 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1439/    6A38 : 0207 0007            		andi.b	#%00111,d7
(2) 1440/    6A3C : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1441/    6A40 : 31FC 0000 8058      		move.w	#0,($FFFF8058).w		; Stamp data size
(2) 1442/    6A46 : 31FC 0000 805A      		move.w  #0,($FFFF805A).w		; d0 - Stamp map location
(2) 1443/    6A4C : 2C3C 0002 0000      		move.l	#WRAM_DotOutput_0,d6
(2) 1444/    6A52 : 4A78 7214           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1445/    6A56 : 6706                		beq.s	.dotc_0
(2) 1446/    6A58 : 2C3C 0002 8000      		move.l	#WRAM_DotOutput_1,d6
(2) 1447/    6A5E :                     .dotc_0:
(2) 1448/    6A5E : E48E                		lsr.l	#2,d6
(2) 1449/    6A60 : 31C6 805E           		move.w  d6,($FFFF805E).w		; Output image buffer start address
(2) 1450/    6A64 : 31FC 0000 8060      		move.w  #0,($FFFF8060).w		; Output image buffer offset
(2) 1451/    6A6A : 3A38 7202           		move.w	(RAM_CdSub_StampW).w,d5
(2) 1452/    6A6E : 3838 7204           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1453/    6A72 : 31C5 8062           		move.w	d5,($FFFF8062).w		; Image buffer H dot
(2) 1454/    6A76 : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1455/    6A7A : 7E00                		moveq	#0,d7
(2) 1456/    6A7C : 3E38 720E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1457/    6A80 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1458/    6A86 : E48F                		lsr.l	#2,d7
(2) 1459/    6A88 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1460/    6A8C : 50F8 7208           		st.b	(RAM_CdSub_StampBusy).w
(2) 1461/    6A90 : 6000 02F2           		bra	CdSub_PCM_Process
(2) 1462/    6A94 :                     
(2) 1463/    6A94 :                     ; =====================================================================
(2) 1464/    6A94 :                     ; ----------------------------------------------------------------
(2) 1465/    6A94 :                     ;
(2) 1466/    6A94 :                     ; ----------------------------------------------------------------
(2) 1467/    6A94 :                     
(2) 1468/    6A94 :                     CdSub_SineWave_Cos:
(2) 1469/    6A94 : 0647 0080           		addi.w  #$80,d7
(2) 1470/    6A98 :                     CdSub_SineWave:
(2) 1471/    6A98 : 2F06                		move.l	d6,-(sp)
(2) 1472/    6A9A : 0247 01FF           		andi.w	#$1FF,d7
(2) 1473/    6A9E : 3C07                		move.w	d7,d6
(2) 1474/    6AA0 : 0807 0007           		btst	#7,d7
(2) 1475/    6AA4 : 6702                		beq.s	.loc_7EFA
(2) 1476/    6AA6 : 4646                		not.w	d6
(2) 1477/    6AA8 :                     .loc_7EFA:
(2) 1478/    6AA8 : 0246 007F           		andi.w  #$7F,d6
(2) 1479/    6AAC : E34E                		lsl.w   #1,d6
(2) 1480/    6AAE : 3C3B 6010           		move.w  .sine_data(pc,d6.w),d6
(2) 1481/    6AB2 : 0807 0008           		btst    #8,d7
(2) 1482/    6AB6 : 6702                		beq.s   .loc_7F0C
(2) 1483/    6AB8 : 4446                		neg.w   d6
(2) 1484/    6ABA :                     .loc_7F0C:
(2) 1485/    6ABA : 3E06                		move.w  d6,d7
(2) 1486/    6ABC : 2C1F                		move.l  (sp)+,d6
(2) 1487/    6ABE : 4E75                		rts
(2) 1488/    6AC0 :                     
(2) 1489/    6AC0 :                     ; ------------------------------------------------
(2) 1490/    6AC0 :                     
(2) 1491/    6AC0 :                     .sine_data:
(2) 1492/    6AC0 :                     		binclude "system/md/data/sine_data.bin"
(2) 1493/    6BC0 :                     		align 2
(2) 1494/    6BC0 :                     
(2) 1495/    6BC0 :                     ; =====================================================================
(2) 1496/    6BC0 :                     ; ------------------------------------------------
(2) 1497/    6BC0 :                     ; Flip output Dotscreen
(2) 1498/    6BC0 :                     ; ------------------------------------------------
(2) 1499/    6BC0 :                     
(2) 1500/    6BC0 :                     CdSub_StampInitStuff:
(2) 1501/    6BC0 : 3C38 7204           		move.w  (RAM_CdSub_StampH).w,d6		; Image V cell size
(2) 1502/    6BC4 : E64E                		lsr.w	#3,d6
(2) 1503/    6BC6 : 5346                		subq.w	#1,d6
(2) 1504/    6BC8 : 31C6 805C           		move.w  d6,($FFFF805C).w
(2) 1505/    6BCC :                     CdSub_StampDefaults:
(2) 1506/    6BCC : 4278 7212           		clr.w	(RAM_CdSub_StampIndxW).w
(2) 1507/    6BD0 : 4278 720C           		clr.w	(RAM_CdSub_StampNextWr).w
(2) 1508/    6BD4 : 4278 720E           		clr.w	(RAM_CdSub_StampNextRd).w
(2) 1509/    6BD8 : 4278 7210           		clr.w	(RAM_CdSub_DotClearFlag).w
(2) 1510/    6BDC : 4278 7208           		clr.w	(RAM_CdSub_StampBusy).w
(2) 1511/    6BE0 : 4278 7200           		clr.w	(RAM_CdSub_StampNum).w
(2) 1512/    6BE4 : 4E75                		rts
(2) 1513/    6BE6 :                     
(2) 1514/    6BE6 :                     ; =====================================================================
(2) 1515/    6BE6 :                     ; ----------------------------------------------------------------
(2) 1516/    6BE6 :                     ; PCM sound streaming engine
(2) 1517/    6BE6 :                     ; ----------------------------------------------------------------
(2) 1518/    6BE6 :                     
(2) 1519/    6BE6 :                     ; --------------------------------------------------------
(2) 1520/    6BE6 :                     ; CdSub_PCM_Wait
(2) 1521/    6BE6 :                     ;
(2) 1522/    6BE6 :                     ; ALL writes to the PCM sound chip need a small delay
(2) 1523/    6BE6 :                     ; to process, call this if you are writing to it
(2) 1524/    6BE6 :                     ; consecutively.
(2) 1525/    6BE6 :                     ; --------------------------------------------------------
(2) 1526/    6BE6 :                     
(2) 1527/    6BE6 :                     CdSub_PCM_Wait:
(2) 1528/    6BE6 : 4E71                		nop
(2) 1529/    6BE8 : 4E71                		nop
(2) 1530/    6BEA : 4E71                		nop
(2) 1531/    6BEC : 4E71                		nop
(2) 1532/    6BEE : 4E71                		nop
(2) 1533/    6BF0 : 4E75                		rts
(2) 1534/    6BF2 :                     
(2) 1535/    6BF2 :                     ; --------------------------------------------------------
(2) 1536/    6BF2 :                     ; CdSub_PCM_Init
(2) 1537/    6BF2 :                     ; --------------------------------------------------------
(2) 1538/    6BF2 :                     
(2) 1539/    6BF2 :                     ; PCM WAVE RAM setup:
(2) 1540/    6BF2 :                     ; $0000-$7FFF | Streaming blocks, $1000 for each channel.
(2) 1541/    6BF2 :                     ; $8000-$803F | Silence loop-block
(2) 1542/    6BF2 :                     ;               for non-looping samples, so if a channel
(2) 1543/    6BF2 :                     ;               finished playing it will be easily detected
(2) 1544/    6BF2 :                     ;               to disable that channel.
(2) 1545/    6BF2 :                     ; $8040-$FFFF | UNUSED
(2) 1546/    6BF2 :                     
(2) 1547/    6BF2 :                     CdSub_PCM_Init:
(2) 1548/    6BF2 : 4DF9 FFFF 0000      		lea	(SCPU_pcm),a6		; a6 - PCM registers
(2) 1549/    6BF8 : 7000                		moveq	#0,d0			; d0 - BLANK byte
(2) 1550/    6BFA : 72FF                		moveq	#-1,d1			; d1 - LOOP byte
(2) 1551/    6BFC : 343C 0080           		move.w	#$80,d2			; d2 - Current BANK
(2) 1552/    6C00 : 7E0F                		moveq	#$0F,d7			; $0000-$7FFF
(2) 1553/    6C02 : 4BEE 2001           		lea	$2001(a6),a5		; a5 - PCM RAM area
(2) 1554/    6C06 :                     .clr_pwm:
(2) 1555/    6C06 : 1D42 000F           		move.b	d2,CTREG(a6)
(2) 1556/    6C0A : 61DA                		bsr	CdSub_PCM_Wait
(2) 1557/    6C0C : 284D                		move.l	a5,a4
(2) 1558/    6C0E : 3C3C 0FF7           		move.w	#$0FF8-1,d6
(2) 1559/    6C12 : 1880                .wr_end:	move.b	d0,(a4)
(2) 1560/    6C14 : 548C                		addq.l	#2,a4
(2) 1561/    6C16 : 51CE FFFA           		dbf	d6,.wr_end
(2) 1562/    6C1A :                     	rept 8
(2) 1563/    6C1A :                     		move.b	d1,(a4)
(2) 1564/    6C1A :                     		addq.l	#2,a4
(2) 1565/    6C1A :                     	endm
(2) 1563/    6C1A : 1881                		move.b	d1,(a4)
(2) 1564/    6C1C : 548C                		addq.l	#2,a4
(2) 1563/    6C1E : 1881                		move.b	d1,(a4)
(2) 1564/    6C20 : 548C                		addq.l	#2,a4
(2) 1563/    6C22 : 1881                		move.b	d1,(a4)
(2) 1564/    6C24 : 548C                		addq.l	#2,a4
(2) 1563/    6C26 : 1881                		move.b	d1,(a4)
(2) 1564/    6C28 : 548C                		addq.l	#2,a4
(2) 1563/    6C2A : 1881                		move.b	d1,(a4)
(2) 1564/    6C2C : 548C                		addq.l	#2,a4
(2) 1563/    6C2E : 1881                		move.b	d1,(a4)
(2) 1564/    6C30 : 548C                		addq.l	#2,a4
(2) 1563/    6C32 : 1881                		move.b	d1,(a4)
(2) 1564/    6C34 : 548C                		addq.l	#2,a4
(2) 1563/    6C36 : 1881                		move.b	d1,(a4)
(2) 1564/    6C38 : 548C                		addq.l	#2,a4
(2) 1566/    6C3A : 5202                		addq.b	#$01,d2
(2) 1567/    6C3C : 51CF FFC8           		dbf	d7,.clr_pwm
(2) 1568/    6C40 : 343C 0088           		move.w	#$88,d2			; Make silence block
(2) 1569/    6C44 : 41FA 001C           		lea	.data_blk(pc),a0
(2) 1570/    6C48 : 1D42 000F           		move.b	d2,CTREG(a6)		; Slot $8000 for pre-silence
(2) 1571/    6C4C : 6198                		bsr	CdSub_PCM_Wait
(2) 1572/    6C4E : 7E3F                		moveq	#(.data_blk_e-.data_blk)-1,d7
(2) 1573/    6C50 :                     .copy_data:
(2) 1574/    6C50 : 1018                		move.b	(a0)+,d0
(2) 1575/    6C52 : 1A80                		move.b	d0,(a5)
(2) 1576/    6C54 : 548D                		addq.l	#2,a5
(2) 1577/    6C56 : 51CF FFF8           		dbf	d7,.copy_data
(2) 1578/    6C5A : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2) 1579/    6C60 : 6084                		bra	CdSub_PCM_Wait
(2) 1580/    6C62 :                     .data_blk:
(2) 1581/    6C62 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C68 : 0000             
(2) 1582/    6C6A : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C70 : 0000             
(2) 1583/    6C72 : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C78 : 0000             
(2) 1584/    6C7A : 0000 0000 0000      		dc.b $00,$00,$00,$00,$00,$00,$00,$00
             6C80 : 0000             
(2) 1585/    6C82 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C88 : FFFF             
(2) 1586/    6C8A : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C90 : FFFF             
(2) 1587/    6C92 : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6C98 : FFFF             
(2) 1588/    6C9A : FFFF FFFF FFFF      		dc.b $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
             6CA0 : FFFF             
(2) 1589/    6CA2 :                     .data_blk_e:
(2) 1590/    6CA2 :                     		align 2
(2) 1591/    6CA2 :                     
(2) 1592/    6CA2 :                     ; --------------------------------------------------------
(2) 1593/    6CA2 :                     ; CdSub_PCM_ReadTable
(2) 1594/    6CA2 :                     ; --------------------------------------------------------
(2) 1595/    6CA2 :                     
(2) 1596/    6CA2 :                     CdSub_PCM_ReadTable:
(2) 1597/    6CA2 : 4DF9 0000 79AC      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1598/    6CA8 : 4BF9 0000 7ABC      		lea	(RAM_CdSub_PcmTable).l,a5
(2) 1599/    6CAE : 7E07                		moveq	#8-1,d7			; 8 channels
(2) 1600/    6CB0 : 7C00                		moveq	#0,d6			; Starting channel number
(2) 1601/    6CB2 :                     .get_tbl:
(2) 1602/    6CB2 : 1A15                		move.b	(a5),d5
(2) 1603/    6CB4 : 0885 0002           		bclr	#2,d5			; Key-cut?
(2) 1604/    6CB8 : 6702                		beq.s	.no_keyoff
(2) 1605/    6CBA : 6122                		bsr	.cdcom_keyoff
(2) 1606/    6CBC :                     .no_keyoff:
(2) 1607/    6CBC : 0885 0001           		bclr	#1,d5			; Key-off?
(2) 1608/    6CC0 : 6702                		beq.s	.no_keycut
(2) 1609/    6CC2 : 611A                		bsr	.cdcom_keyoff
(2) 1610/    6CC4 :                     .no_keycut:
(2) 1611/    6CC4 : 0885 0000           		bclr	#0,d5			; Key-on?
(2) 1612/    6CC8 : 6702                		beq.s	.no_comm
(2) 1613/    6CCA : 6118                		bsr	.cdcom_keyon
(2) 1614/    6CCC :                     .no_comm:
(2) 1615/    6CCC : 1A85                		move.b	d5,(a5)
(2) 1616/    6CCE : DCFC 0022           		adda	#cdpcm_len,a6		; Next PCM buffer
(2) 1617/    6CD2 : DAFC 0001           		adda	#1,a5			; Next PCM table column
(2) 1618/    6CD6 : 5246                		addq.w	#1,d6
(2) 1619/    6CD8 : 51CF FFD8           		dbf	d7,.get_tbl
(2) 1620/    6CDC :                     .dont_upd:
(2) 1621/    6CDC : 4E75                		rts
(2) 1622/    6CDE :                     
(2) 1623/    6CDE :                     ; --------------------------------------------------------
(2) 1624/    6CDE :                     ; pcmcom:
(2) 1625/    6CDE :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2) 1626/    6CDE :                     ; 8 - Pitch MSB
(2) 1627/    6CDE :                     ; 16 - Pitch LSB
(2) 1628/    6CDE :                     ; 24 - Volume
(2) 1629/    6CDE :                     ; 32 - Panning %RRRRLLLL
(2) 1630/    6CDE :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2) 1631/    6CDE :                     ; 48
(2) 1632/    6CDE :                     ; 56
(2) 1633/    6CDE :                     
(2) 1634/    6CDE :                     .cdcom_keyoff:
(2) 1635/    6CDE : 103C 0004           		move.b	#%0100,d0
(2) 1636/    6CE2 : 6062                		bra.s	.wrt_flags
(2) 1637/    6CE4 :                     
(2) 1638/    6CE4 :                     ; a0 - table data
(2) 1639/    6CE4 :                     ; a1 - buffer
(2) 1640/    6CE4 :                     .cdcom_keyon:
(2) 1641/    6CE4 : 0885 0003           		bclr	#3,d5			; Effect update ONLY?
(2) 1642/    6CE8 : 6666                		bne	.effect_only
(2) 1643/    6CEA : 61F2                		bsr.s	.cdcom_keyoff
(2) 1644/    6CEC : 6168                		bsr.s	.effect_mod
(2) 1645/    6CEE : 7000                		moveq	#0,d0
(2) 1646/    6CF0 : 1010                		move.b	(a0),d0		; 40
(2) 1647/    6CF2 : 1600                		move.b	d0,d3
(2) 1648/    6CF4 : D0FC 0008           		adda	#8,a0
(2) 1649/    6CF8 : 0240 007F           		andi.w	#$7F,d0
(2) 1650/    6CFC : 4840                		swap	d0
(2) 1651/    6CFE : 1010                		move.b	(a0),d0		; 48
(2) 1652/    6D00 : D0FC 0008           		adda	#8,a0
(2) 1653/    6D04 : E148                		lsl.w	#8,d0
(2) 1654/    6D06 : 1010                		move.b	(a0),d0		; 56
(2) 1655/    6D08 : 2440                		move.l	d0,a2
(2) 1656/    6D0A : 7000                		moveq	#0,d0
(2) 1657/    6D0C : 7200                		moveq	#0,d1			; Read LEN
(2) 1658/    6D0E : 101A                		move.b	(a2)+,d0
(2) 1659/    6D10 : E158                		rol.w	#8,d0
(2) 1660/    6D12 : 101A                		move.b	(a2)+,d0
(2) 1661/    6D14 : E058                		ror.w	#8,d0
(2) 1662/    6D16 : 121A                		move.b	(a2)+,d1
(2) 1663/    6D18 : 4841                		swap	d1
(2) 1664/    6D1A : 8081                		or.l	d1,d0
(2) 1665/    6D1C : 2D40 000C           		move.l	d0,cdpcm_length(a6)
(2) 1666/    6D20 : 7200                		moveq	#0,d1
(2) 1667/    6D22 : 7000                		moveq	#0,d0
(2) 1668/    6D24 : 101A                		move.b	(a2)+,d0
(2) 1669/    6D26 : E158                		rol.w	#8,d0
(2) 1670/    6D28 : 101A                		move.b	(a2)+,d0
(2) 1671/    6D2A : E058                		ror.w	#8,d0
(2) 1672/    6D2C : 121A                		move.b	(a2)+,d1
(2) 1673/    6D2E : 4841                		swap	d1
(2) 1674/    6D30 : 8081                		or.l	d1,d0
(2) 1675/    6D32 : 2D40 0010           		move.l	d0,cdpcm_loop(a6)
(2) 1676/    6D36 : 2D4A 0004           		move.l	a2,cdpcm_start(a6)
(2) 1677/    6D3A : E31B                		rol.b	#1,d3
(2) 1678/    6D3C : 0203 0001           		andi.b	#1,d3
(2) 1679/    6D40 : 1C83                		move.b	d3,cdpcm_status(a6)
(2) 1680/    6D42 : 103C 0001           		move.b	#%0001,d0
(2) 1681/    6D46 :                     .wrt_flags:
(2) 1682/    6D46 : 803C 0080           		or.b	#$80,d0
(2) 1683/    6D4A : 1D40 0001           		move.b	d0,cdpcm_flags(a6)
(2) 1684/    6D4E : 4E75                		rts
(2) 1685/    6D50 :                     
(2) 1686/    6D50 :                     .effect_only:
(2) 1687/    6D50 : 103C 0008           		move.b	#%1000,d0
(2) 1688/    6D54 : 61F0                		bsr	.wrt_flags
(2) 1689/    6D56 :                     .effect_mod:
(2) 1690/    6D56 : 204D                		move.l	a5,a0
(2) 1691/    6D58 : D0FC 0008           		adda	#8,a0
(2) 1692/    6D5C : 1010                		move.b	(a0),d0		; 8 - Pitch MSB
(2) 1693/    6D5E : D0FC 0008           		adda	#8,a0
(2) 1694/    6D62 : E148                		lsl.w	#8,d0
(2) 1695/    6D64 : 1010                		move.b	(a0),d0		; 16 - Pitch LSB
(2) 1696/    6D66 : D0FC 0008           		adda	#8,a0
(2) 1697/    6D6A : 1210                		move.b	(a0),d1		; 24 - Volume
(2) 1698/    6D6C : D0FC 0008           		adda	#8,a0
(2) 1699/    6D70 : 1410                		move.b	(a0),d2		; 32 - Panning
(2) 1700/    6D72 : D0FC 0008           		adda	#8,a0
(2) 1701/    6D76 : 3D40 001C           		move.w	d0,cdpcm_pitch(a6)
(2) 1702/    6D7A : 1D41 0021           		move.b	d1,cdpcm_env(a6)
(2) 1703/    6D7E : 1D42 0020           		move.b	d2,cdpcm_pan(a6)
(2) 1704/    6D82 : 4E75                		rts
(2) 1705/    6D84 :                     
(2) 1706/    6D84 :                     ; ====================================================================
(2) 1707/    6D84 :                     ; --------------------------------------------------------
(2) 1708/    6D84 :                     ; CdSub_PCM_Process
(2) 1709/    6D84 :                     ;
(2) 1710/    6D84 :                     ; This is the heart of the PCM "streaming" system,
(2) 1711/    6D84 :                     ; this needs to be called manually on every situation.
(2) 1712/    6D84 :                     ;
(2) 1713/    6D84 :                     ; This uses ALL registers, if you are in the middle
(2) 1714/    6D84 :                     ; of a subroutine save and restore your routine's
(2) 1715/    6D84 :                     ; registers before and after calling this.
(2) 1716/    6D84 :                     ;
(2) 1717/    6D84 :                     ; Breaks:
(2) 1718/    6D84 :                     ; ALL
(2) 1719/    6D84 :                     ; --------------------------------------------------------
(2) 1720/    6D84 :                     
(2) 1721/    6D84 :                     ; ----------------------------------------
(2) 1722/    6D84 :                     ; Main call
(2) 1723/    6D84 :                     ; ----------------------------------------
(2) 1724/    6D84 :                     
(2) 1725/    6D84 :                     CdSub_PCM_Process:
(2) 1726/    6D84 : 6100 FF1C           		bsr	CdSub_PCM_ReadTable		; Update PCM channels
(2) 1727/    6D88 : 6100 0084           		bsr	CdSub_PCM_Stream
(2) 1728/    6D8C : 4A38 7219           		tst.b	(RAM_CdSub_PcmReqUpd).w		; IRQ check
(2) 1729/    6D90 : 6708                		beq.s	.no_req
(2) 1730/    6D92 : 6108                		bsr	.get_table
(2) 1731/    6D94 : 4238 7219           		clr.b	(RAM_CdSub_PcmReqUpd).w
(2) 1732/    6D98 : 60EA                		bra	CdSub_PCM_Process
(2) 1733/    6D9A :                     .no_req:
(2) 1734/    6D9A : 4E75                		rts
(2) 1735/    6D9C :                     
(2) 1736/    6D9C :                     ; --------------------------------------------------------
(2) 1737/    6D9C :                     ; Grab data from Z80
(2) 1738/    6D9C :                     ; --------------------------------------------------------
(2) 1739/    6D9C :                     
(2) 1740/    6D9C :                     .get_table:
(2) 1741/    6D9C : 43F9 0000 7ABC      		lea	(RAM_CdSub_PcmTable).l,a1		; a1 - PCM Table output
(2) 1742/    6DA2 : 45F8 8018           		lea	(SCPU_reg+mcd_dcomm_m+8).w,a2		; a2 - Data input
(2) 1743/    6DA6 :                     .trnsfr_mode:
(2) 1744/    6DA6 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0		; Tell Z80 we are here.
(2) 1745/    6DAA : 0240 000F           		andi.w	#%00001111,d0				; Flag $Cx
(2) 1746/    6DAE : 803C 00C0           		or.b	#%11000000,d0
(2) 1747/    6DB2 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1748/    6DB6 :                     .wait_start:
(2) 1749/    6DB6 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Z80 lock bit set?
(2) 1750/    6DBA : 0800 0005           		btst	#5,d0
(2) 1751/    6DBE : 67F6                		beq.s	.wait_start
(2) 1752/    6DC0 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1753/    6DC4 : 0240 00C0           		andi.w	#%11000000,d0
(2) 1754/    6DC8 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1755/    6DCC :                     .next_packet:
(2) 1756/    6DCC : 1039 FFFF 800E      		move.b	(SCPU_reg+mcd_comm_m).l,d0		; Read MAIN comm.
(2) 1757/    6DD2 : 0800 0005           		btst	#5,d0					; Still LOCKed?
(2) 1758/    6DD6 : 6728                		beq.s	.exit_now				; If not, finish.
(2) 1759/    6DD8 : 0800 0004           		btst	#4,d0					; PASS bit set?
(2) 1760/    6DDC : 67EE                		beq.s	.next_packet
(2) 1761/    6DDE : 204A                		move.l	a2,a0
(2) 1762/    6DE0 :                     	rept $08/2
(2) 1763/    6DE0 :                     		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1764/    6DE0 :                     	endm
(2) 1763/    6DE0 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE2 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE4 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1763/    6DE6 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1765/    6DE8 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2) 1766/    6DEE :                     .wait_main:
(2) 1767/    6DEE : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; PASS bit cleared?
(2) 1768/    6DF2 : 0800 0004           		btst	#4,d0
(2) 1769/    6DF6 : 66F6                		bne.s	.wait_main
(2) 1770/    6DF8 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2) 1771/    6DFE : 60CC                		bra	.next_packet
(2) 1772/    6E00 :                     .exit_now:
(2) 1773/    6E00 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1774/    6E04 : 0240 000F           		andi.w	#%00001111,d0
(2) 1775/    6E08 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1776/    6E0C :                     .not_now:
(2) 1777/    6E0C : 4E75                		rts
(2) 1778/    6E0E :                     
(2) 1779/    6E0E :                     ; --------------------------------------------------------
(2) 1780/    6E0E :                     ; Stream the sample data
(2) 1781/    6E0E :                     ; --------------------------------------------------------
(2) 1782/    6E0E :                     
(2) 1783/    6E0E :                     CdSub_PCM_Stream:
(2) 1784/    6E0E : 4DF9 0000 79AC      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1785/    6E14 : 4BF9 FFFF 0000      		lea	(SCPU_pcm),a5
(2) 1786/    6E1A : 49ED 0023           		lea	$23(a5),a4			; <-- RAM-addr MSBs (ODDs)
(2) 1787/    6E1E : 7E07                		moveq	#8-1,d7				; 8 channels, 8 pseudo-buffers
(2) 1788/    6E20 : 7C00                		moveq	#0,d6				; d6 - Current channel (also for BTST/BSET/BCLR)
(2) 1789/    6E22 : 1A38 7218           		move.b	(RAM_CdSub_PcmEnbl).w,d5	; d5 - Global OFF/ON bits
(2) 1790/    6E26 : 4645                		not.w	d5				; invert the bits
(2) 1791/    6E28 :                     .get_addr:
(2) 1792/    6E28 : 102E 0001           		move.b	cdpcm_flags(a6),d0
(2) 1793/    6E2C : 6A34                		bpl.s	.non_upd
(2) 1794/    6E2E : 422E 0001           		clr.b	cdpcm_flags(a6)
(2) 1795/    6E32 : 0800 0003           		btst	#3,d0
(2) 1796/    6E36 : 6626                		bne.s	.keep_strm
(2) 1797/    6E38 : 0800 0002           		btst	#2,d0
(2) 1798/    6E3C : 662E                		bne.s	.force_off
(2) 1799/    6E3E : 0800 0001           		btst	#1,d0
(2) 1800/    6E42 : 6628                		bne.s	.force_off
(2) 1801/    6E44 : 0800 0000           		btst	#0,d0
(2) 1802/    6E48 : 6718                		beq.s	.non_upd
(2) 1803/    6E4A : 617C                		bsr	.stop_pcm
(2) 1804/    6E4C : 6100 0150           		bsr	.first_fill			; Do first fill
(2) 1805/    6E50 : 0D85                		bclr	d6,d5
(2) 1806/    6E52 : 1B45 0011           		move.b	d5,ONREG(a5)			; Enable channel
(2) 1807/    6E56 : 6100 FD8E           		bsr	CdSub_PCM_Wait
(2) 1808/    6E5A : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1809/    6E5E :                     .keep_strm:
(2) 1810/    6E5E : 6100 0102           		bsr	.update_set
(2) 1811/    6E62 :                     
(2) 1812/    6E62 :                     .non_upd:
(2) 1813/    6E62 : 0816 0007           		btst	#7,cdpcm_status(a6)		; Channel slot is active?
(2) 1814/    6E66 : 674A                		beq.s	.non_strm
(2) 1815/    6E68 : 1614                		move.b	(a4),d3				; Get playback MSB
(2) 1816/    6E6A : 6A06                		bpl.s	.not_float			; If negative $80 (Silence block)
(2) 1817/    6E6C :                     .force_off:
(2) 1818/    6E6C : 615A                		bsr	.stop_pcm
(2) 1819/    6E6E : 4216                		clr.b	cdpcm_status(a6)		; Reset flags
(2) 1820/    6E70 : 6040                		bra.s	.non_strm
(2) 1821/    6E72 :                     .not_float:
(2) 1822/    6E72 : 0816 0006           		btst	#6,cdpcm_status(a6)
(2) 1823/    6E76 : 673A                		beq.s	.non_strm
(2) 1824/    6E78 : 182E 0003           		move.b	cdpcm_strmhalf(a6),d4		; Check current block MSB
(2) 1825/    6E7C : 0203 000E           		andi.b	#$0E,d3				; in blocks of $0200 bytes.
(2) 1826/    6E80 : B604                		cmp.b	d4,d3
(2) 1827/    6E82 : 662E                		bne.s	.non_strm
(2) 1828/    6E84 : 3803                		move.w	d3,d4
(2) 1829/    6E86 : 5444                		addq.w	#$02,d4
(2) 1830/    6E88 : 0244 000E           		andi.w	#$0E,d4				; d4 - Next block slot
(2) 1831/    6E8C : 1D44 0003           		move.b	d4,cdpcm_strmhalf(a6)
(2) 1832/    6E90 : 206E 0018           		move.l	cdpcm_cread(a6),a0		; a0 - Current Wave data to read
(2) 1833/    6E94 : 222E 0014           		move.l	cdpcm_clen(a6),d1		; d1 - Current wave size
(2) 1834/    6E98 : E14C                		lsl.w	#8,d4				; Slot << 8
(2) 1835/    6E9A : 263C 0000 0200      		move.l	#$0200,d3			; d3 - Block size
(2) 1836/    6EA0 : B87C 0E00           		cmp.w	#$0E00,d4			; Is this the looping block?
(2) 1837/    6EA4 : 6602                		bne.s	.lowhalf
(2) 1838/    6EA6 : 5183                		subq.l	#8,d3				; Size-4 to skip the loop bytes.
(2) 1839/    6EA8 :                     .lowhalf:
(2) 1840/    6EA8 : 6126                		bsr	.make_blk_strm
(2) 1841/    6EAA : 2D41 0014           		move.l	d1,cdpcm_clen(a6)		; Save next wave size
(2) 1842/    6EAE : 2D48 0018           		move.l	a0,cdpcm_cread(a6)		; Save next wave pos
(2) 1843/    6EB2 :                     .non_strm:
(2) 1844/    6EB2 : DCFC 0022           		adda	#cdpcm_len,a6			; Next PCM slot
(2) 1845/    6EB6 : D8FC 0004           		adda	#4,a4				; Next MSB to check
(2) 1846/    6EBA : 5246                		addq.w	#1,d6				; Next PCM Channel number
(2) 1847/    6EBC : 51CF FF6A           		dbf	d7,.get_addr
(2) 1848/    6EC0 : 4645                		not.w	d5				; Reverse return bits
(2) 1849/    6EC2 : 11C5 7218           		move.b	d5,(RAM_CdSub_PcmEnbl).w
(2) 1850/    6EC6 : 4E75                		rts
(2) 1851/    6EC8 :                     
(2) 1852/    6EC8 :                     ; --------------------------------------------------------
(2) 1853/    6EC8 :                     
(2) 1854/    6EC8 :                     .stop_pcm:
(2) 1855/    6EC8 : 0DC5                		bset	d6,d5
(2) 1856/    6ECA : 1B45 0011           		move.b	d5,ONREG(a5)
(2) 1857/    6ECE : 4E75                		rts
(2) 1858/    6ED0 :                     
(2) 1859/    6ED0 :                     ; --------------------------------------------------------
(2) 1860/    6ED0 :                     ; a0 - wave data to write
(2) 1861/    6ED0 :                     ; d1 - channel current length
(2) 1862/    6ED0 :                     ; d3 - block size
(2) 1863/    6ED0 :                     ; d4 - current block slot to write
(2) 1864/    6ED0 :                     ; d6 - current channel
(2) 1865/    6ED0 :                     
(2) 1866/    6ED0 :                     .make_blk_strm:
(2) 1867/    6ED0 : 4A6E 001E           		tst.w	cdpcm_cblock(a6)
(2) 1868/    6ED4 : 6704                		beq.s	.ran_out
(2) 1869/    6ED6 : 536E 001E           		subq.w	#1,cdpcm_cblock(a6)
(2) 1870/    6EDA :                     .ran_out:
(2) 1871/    6EDA : 1006                		move.b	d6,d0			; Set PCM memory mode on this channel
(2) 1872/    6EDC : 803C 0080           		or.b	#$80,d0
(2) 1873/    6EE0 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1874/    6EE4 :                     ; 		bsr	CdSub_PCM_Wait
(2) 1875/    6EE4 : 43ED 2001           		lea	$2001(a5),a1		; a1 - WAVE RAM output
(2) 1876/    6EE8 : D844                		add.w	d4,d4
(2) 1877/    6EEA : D2C4                		adda	d4,a1			; pos + current block
(2) 1878/    6EEC : 3803                		move.w	d3,d4			; d4 - block size - 1
(2) 1879/    6EEE : 5344                		subq.w	#1,d4
(2) 1880/    6EF0 : 0816 0000           		btst	#0,cdpcm_status(a6)	; Looping enabled?
(2) 1881/    6EF4 : 6728                		beq	.end_point
(2) 1882/    6EF6 :                     
(2) 1883/    6EF6 :                     ; ----------------------------------------
(2) 1884/    6EF6 :                     ; Wave has loop
(2) 1885/    6EF6 :                     ; ----------------------------------------
(2) 1886/    6EF6 :                     
(2) 1887/    6EF6 :                     .loop_point:
(2) 1888/    6EF6 : 246E 0004           		movea.l	cdpcm_start(a6),a2	; a2 - WAVE start
(2) 1889/    6EFA : 202E 0010           		move.l	cdpcm_loop(a6),d0	; d0 - Loop start point
(2) 1890/    6EFE : D5C0                		add.l	d0,a2
(2) 1891/    6F00 : 242E 000C           		move.l	cdpcm_length(a6),d2	; d2 - NEW length to set
(2) 1892/    6F04 : 9480                		sub.l	d0,d2
(2) 1893/    6F06 :                     .loop_strm:
(2) 1894/    6F06 : 5381                		subq.l	#1,d1			; Count current len
(2) 1895/    6F08 : 6604                		bne.s	.strlen_it
(2) 1896/    6F0A : 204A                		move.l	a2,a0			; Reset WAVE reading pos
(2) 1897/    6F0C : 2202                		move.l	d2,d1			; Reset current length
(2) 1898/    6F0E :                     .strlen_it:
(2) 1899/    6F0E : 1018                		move.b	(a0)+,d0		; Write wave data and
(2) 1900/    6F10 : 6100 01C8           		bsr	CdSub_PCM_WavToPcm	; auto-convert
(2) 1901/    6F14 : 1280                		move.b	d0,(a1)
(2) 1902/    6F16 :                     ; 		bsr	CdSub_PCM_Wait
(2) 1903/    6F16 : 5489                		addq.l	#2,a1
(2) 1904/    6F18 : 51CC FFEC           		dbf	d4,.loop_strm
(2) 1905/    6F1C : 4E75                		rts
(2) 1906/    6F1E :                     
(2) 1907/    6F1E :                     ; ----------------------------------------
(2) 1908/    6F1E :                     ; Wave doesn't loop
(2) 1909/    6F1E :                     ; ----------------------------------------
(2) 1910/    6F1E :                     
(2) 1911/    6F1E :                     .end_point:
(2) 1912/    6F1E : 5381                		subq.l	#1,d1			; Count current lenght
(2) 1913/    6F20 : 6A30                		bpl.s	.last_smpl
(2) 1914/    6F22 : 70FF                		moveq	#-1,d0			; Write loop byte
(2) 1915/    6F24 : 7810                		moveq	#$10,d4
(2) 1916/    6F26 :                     .set_lmark:
(2) 1917/    6F26 : 1280                		move.b	d0,(a1)
(2) 1918/    6F28 : 5489                		addq.l	#2,a1
(2) 1919/    6F2A : 51CC FFFA           		dbf	d4,.set_lmark
(2) 1920/    6F2E : 1006                		move.b	d6,d0			; Set PCM to control mode.
(2) 1921/    6F30 : 803C 00C0           		or.b	#$C0,d0
(2) 1922/    6F34 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1923/    6F38 : 6100 FCAC           		bsr	CdSub_PCM_Wait
(2) 1924/    6F3C : 303C 8000           		move.w	#$8000,d0		; Redirect loop point to
(2) 1925/    6F40 : 1B40 0009           		move.b	d0,LSL(a5)		; the silence block.
(2) 1926/    6F44 : 6100 FCA0           		bsr	CdSub_PCM_Wait
(2) 1927/    6F48 : E048                		lsr.w	#8,d0
(2) 1928/    6F4A : 1B40 000B           		move.b	d0,LSH(a5)
(2) 1929/    6F4E : 6000 FC96           		bra	CdSub_PCM_Wait
(2) 1930/    6F52 :                     .last_smpl:
(2) 1931/    6F52 : 1018                		move.b	(a0)+,d0		; If wave data remain, write it.
(2) 1932/    6F54 : 6100 0184           		bsr	CdSub_PCM_WavToPcm
(2) 1933/    6F58 :                     .stlen_it:
(2) 1934/    6F58 : 1280                		move.b	d0,(a1)
(2) 1935/    6F5A :                     ; 		bsr	CdSub_PCM_Wait
(2) 1936/    6F5A : 5489                		addq.l	#2,a1
(2) 1937/    6F5C : 51CC FFC0           		dbf	d4,.end_point
(2) 1938/    6F60 : 4E75                		rts
(2) 1939/    6F62 :                     
(2) 1940/    6F62 :                     ; --------------------------------------------------------
(2) 1941/    6F62 :                     ; Channel changes
(2) 1942/    6F62 :                     ; --------------------------------------------------------
(2) 1943/    6F62 :                     
(2) 1944/    6F62 :                     .update_set:
(2) 1945/    6F62 : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1946/    6F64 : 803C 00C0           		or.b	#$C0,d0
(2) 1947/    6F68 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1948/    6F6C : 6100 FC78           		bsr	CdSub_PCM_Wait
(2) 1949/    6F70 : 102E 0020           		move.b	cdpcm_pan(a6),d0	; Panning
(2) 1950/    6F74 : 1B40 0003           		move.b	d0,PAN(a5)
(2) 1951/    6F78 : 6100 FC6C           		bsr	CdSub_PCM_Wait
(2) 1952/    6F7C : 102E 0021           		move.b	cdpcm_env(a6),d0	; Envelope
(2) 1953/    6F80 : 1B40 0001           		move.b	d0,ENV(a5)
(2) 1954/    6F84 : 6100 FC60           		bsr	CdSub_PCM_Wait
(2) 1955/    6F88 : 302E 001C           		move.w	cdpcm_pitch(a6),d0	; Write frequency
(2) 1956/    6F8C : 1B40 0005           		move.b	d0,FDL(a5)
(2) 1957/    6F90 : 6100 FC54           		bsr	CdSub_PCM_Wait
(2) 1958/    6F94 : E048                		lsr.w	#8,d0
(2) 1959/    6F96 : 1B40 0007           		move.b	d0,FDH(a5)
(2) 1960/    6F9A : 6000 FC4A           		bra	CdSub_PCM_Wait
(2) 1961/    6F9E :                     
(2) 1962/    6F9E :                     ; --------------------------------------------------------
(2) 1963/    6F9E :                     ; First fill
(2) 1964/    6F9E :                     ; --------------------------------------------------------
(2) 1965/    6F9E :                     
(2) 1966/    6F9E :                     .first_fill:
(2) 1967/    6F9E : 202E 0004           		move.l	cdpcm_start(a6),d0
(2) 1968/    6FA2 : 222E 000C           		move.l	cdpcm_length(a6),d1
(2) 1969/    6FA6 :                     ; 		move.l	cdpcm_slast(a6),d2
(2) 1970/    6FA6 :                     ; 		beq.s	.diff_sample
(2) 1971/    6FA6 :                     ; 		cmp.l	d2,d0
(2) 1972/    6FA6 :                     ; 		bne.s	.diff_sample
(2) 1973/    6FA6 :                     ; 		cmp.l	#(($200)*4)-8,cdpcm_length(a6)
(2) 1974/    6FA6 :                     ; 		bcc.s	.diff_sample
(2) 1975/    6FA6 :                     ; 		move.w	cdpcm_cblock(a6),d2
(2) 1976/    6FA6 :                     ; 		beq.s	.diff_sample
(2) 1977/    6FA6 :                     ; 		move.l	#$200,d2
(2) 1978/    6FA6 :                     ; 		add.l	d2,d0
(2) 1979/    6FA6 :                     ; 		add.l	d2,d1
(2) 1980/    6FA6 :                     ; 		move.l	d0,a0
(2) 1981/    6FA6 :                     ; 		bra	.small_sampl
(2) 1982/    6FA6 :                     ; .diff_sample:
(2) 1983/    6FA6 :                     ; 		move.w	#4,cdpcm_cblock(a6)		; <-- 4 BLOCKS
(2) 1984/    6FA6 : 2D6E 0004 0008      		move.l	cdpcm_start(a6),cdpcm_slast(a6)
(2) 1985/    6FAC : 2040                		move.l	d0,a0
(2) 1986/    6FAE : 6162                		bsr	.make_lblk
(2) 1987/    6FB0 :                     .fake_fill:
(2) 1988/    6FB0 : 2D48 0018           		move.l	a0,cdpcm_cread(a6)		; Return starint read points.
(2) 1989/    6FB4 : 2D41 0014           		move.l	d1,cdpcm_clen(a6)
(2) 1990/    6FB8 : 1D7C 0000 0003      		move.b	#0,cdpcm_strmhalf(a6)
(2) 1991/    6FBE : 61A2                		bsr	.update_set			; Do first Pitch/Vol/Panning
(2) 1992/    6FC0 : 7000                		moveq	#0,d0
(2) 1993/    6FC2 : 1006                		move.b	d6,d0				; $000x
(2) 1994/    6FC4 : E948                		lsl.w	#4,d0				; $00x0
(2) 1995/    6FC6 : 1B40 000D           		move.b	d0,ST(a5)			; Set starting MSB
(2) 1996/    6FCA : 6100 FC1A           		bsr	CdSub_PCM_Wait
(2) 1997/    6FCE : E148                		lsl.w	#8,d0				; $x000
(2) 1998/    6FD0 : 4A81                		tst.l	d1
(2) 1999/    6FD2 : 6708                		beq.s	.small_sampl
(2) 2000/    6FD4 : 6B06                		bmi.s	.small_sampl
(2) 2001/    6FD6 : 08D6 0006           		bset	#6,cdpcm_status(a6)
(2) 2002/    6FDA : 6012                		bra.s	.set_nonstop
(2) 2003/    6FDC :                     
(2) 2004/    6FDC :                     ; --------------------------------------------------------
(2) 2005/    6FDC :                     ; If sample is small
(2) 2006/    6FDC :                     
(2) 2007/    6FDC :                     .small_sampl:
(2) 2008/    6FDC : 0896 0006           		bclr	#6,cdpcm_status(a6)
(2) 2009/    6FE0 : 0816 0000           		btst	#0,cdpcm_status(a6)
(2) 2010/    6FE4 : 6702                		beq.s	.set_endloop
(2) 2011/    6FE6 : 6012                		bra.s	.set_looppnt
(2) 2012/    6FE8 :                     .set_endloop:
(2) 2013/    6FE8 : 303C 8000           		move.w	#$8000,d0		; BLANK WAVE pointer
(2) 2014/    6FEC : 6012                		bra.s	.set_mkloop
(2) 2015/    6FEE :                     .set_nonstop:
(2) 2016/    6FEE : 262E 000C           		move.l	cdpcm_length(a6),d3
(2) 2017/    6FF2 : B6BC 0000 1000      		cmp.l	#$1000,d3
(2) 2018/    6FF8 : 6406                		bcc.s	.set_mkloop
(2) 2019/    6FFA :                     .set_looppnt:
(2) 2020/    6FFA : 262E 0010           		move.l	cdpcm_loop(a6),d3
(2) 2021/    6FFE : D083                		add.l	d3,d0			; Our block + this loop
(2) 2022/    7000 :                     .set_mkloop:
(2) 2023/    7000 : 1B40 0009           		move.b	d0,LSL(a5)
(2) 2024/    7004 : 6100 FBE0           		bsr	CdSub_PCM_Wait
(2) 2025/    7008 : E048                		lsr.w	#8,d0
(2) 2026/    700A : 1B40 000B           		move.b	d0,LSH(a5)
(2) 2027/    700E : 6000 FBD6           		bra	CdSub_PCM_Wait
(2) 2028/    7012 :                     
(2) 2029/    7012 :                     ; --------------------------------------------------------
(2) 2030/    7012 :                     ; a0 - Wave data
(2) 2031/    7012 :                     ; a1 - Output to memory (set with CTREG first)
(2) 2032/    7012 :                     ; d1 - Wave length counter
(2) 2033/    7012 :                     ; d6 - current channel
(2) 2034/    7012 :                     
(2) 2035/    7012 :                     .make_lblk:
(2) 2036/    7012 : 1006                		move.b	d6,d0			; Set PCM to memory mode
(2) 2037/    7014 : 803C 0080           		or.b	#$80,d0
(2) 2038/    7018 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 2039/    701C :                     ; 		bsr	CdSub_PCM_Wait
(2) 2040/    701C : 43ED 2001           		lea	$2001(a5),a1		; a1 - WAVE RAM port
(2) 2041/    7020 : 363C 0200           		move.w	#$200,d3		; d3 - Block size
(2) 2042/    7024 : E64B                		lsr.w	#3,d3			; size / 4
(2) 2043/    7026 : 5343                		subq.w	#1,d3
(2) 2044/    7028 :                     .wave_blkl:
(2) 2045/    7028 : 4A81                		tst.l	d1
(2) 2046/    702A : 6B7C                		bmi.s	.fill_blank
(2) 2047/    702C :                     	rept 8
(2) 2048/    702C :                     		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    702C :                     		subq.l	#1,d1			; Lenght counter
(2) 2050/    702C :                     		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    702C :                     		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    702C :                     		bsr	CdSub_PCM_WavToPcm
(2) 2053/    702C :                     .len_it:
(2) 2054/    702C :                     		move.b	d0,(a1)
(2) 2055/    702C :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    702C :                     		addq.l	#2,a1
(2) 2057/    702C :                     	endm
(2) 2048/    702C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    702E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7030 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7032 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7034 : 6100 00A4           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7038 :                     .len_it:
(2) 2054/    7038 : 1280                		move.b	d0,(a1)
(2) 2055/    703A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    703A : 5489                		addq.l	#2,a1
(2) 2048/    703C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    703E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7040 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7042 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7044 : 6100 0094           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7048 :                     .len_it:
(2) 2054/    7048 : 1280                		move.b	d0,(a1)
(2) 2055/    704A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    704A : 5489                		addq.l	#2,a1
(2) 2048/    704C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    704E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7050 : 6706                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7052 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7054 : 6100 0084           		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7058 :                     .len_it:
(2) 2054/    7058 : 1280                		move.b	d0,(a1)
(2) 2055/    705A :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    705A : 5489                		addq.l	#2,a1
(2) 2048/    705C : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    705E : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7060 : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7062 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7064 : 6174                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7066 :                     .len_it:
(2) 2054/    7066 : 1280                		move.b	d0,(a1)
(2) 2055/    7068 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7068 : 5489                		addq.l	#2,a1
(2) 2048/    706A : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    706C : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    706E : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    7070 : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7072 : 6166                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7074 :                     .len_it:
(2) 2054/    7074 : 1280                		move.b	d0,(a1)
(2) 2055/    7076 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7076 : 5489                		addq.l	#2,a1
(2) 2048/    7078 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    707A : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    707C : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    707E : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    7080 : 6158                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7082 :                     .len_it:
(2) 2054/    7082 : 1280                		move.b	d0,(a1)
(2) 2055/    7084 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7084 : 5489                		addq.l	#2,a1
(2) 2048/    7086 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    7088 : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    708A : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    708C : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    708E : 614A                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    7090 :                     .len_it:
(2) 2054/    7090 : 1280                		move.b	d0,(a1)
(2) 2055/    7092 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    7092 : 5489                		addq.l	#2,a1
(2) 2048/    7094 : 70FF                		moveq	#-1,d0			; d0 - Loop flag
(2) 2049/    7096 : 5381                		subq.l	#1,d1			; Lenght counter
(2) 2050/    7098 : 6704                		beq.s	.len_it			; If ran out of wave data, write -1 now.
(2) 2051/    709A : 1018                		move.b	(a0)+,d0		; Read wave and convert
(2) 2052/    709C : 613C                		bsr	CdSub_PCM_WavToPcm
(2) 2053/    709E :                     .len_it:
(2) 2054/    709E : 1280                		move.b	d0,(a1)
(2) 2055/    70A0 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2056/    70A0 : 5489                		addq.l	#2,a1
(2) 2058/    70A2 : 51CB FF84           		dbf	d3,.wave_blkl
(2) 2059/    70A6 : 4E75                		rts
(2) 2060/    70A8 :                     ; ----------------------------------------
(2) 2061/    70A8 :                     ; Fill unused block
(2) 2062/    70A8 :                     .fill_blank:
(2) 2063/    70A8 : 70FF                		moveq	#-1,d0
(2) 2064/    70AA : B67C 0003           		cmp.w	#4-1,d3
(2) 2065/    70AE : 6D04                		blt.s	.loop_blkl
(2) 2066/    70B0 : 363C 0003           		move.w	#4-1,d3
(2) 2067/    70B4 :                     .loop_blkl:
(2) 2068/    70B4 :                     	rept 8
(2) 2069/    70B4 :                     		move.b	d0,(a1)
(2) 2070/    70B4 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70B4 :                     		addq.l	#2,a1
(2) 2072/    70B4 :                     	endm
(2) 2069/    70B4 : 1280                		move.b	d0,(a1)
(2) 2070/    70B6 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70B6 : 5489                		addq.l	#2,a1
(2) 2069/    70B8 : 1280                		move.b	d0,(a1)
(2) 2070/    70BA :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70BA : 5489                		addq.l	#2,a1
(2) 2069/    70BC : 1280                		move.b	d0,(a1)
(2) 2070/    70BE :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70BE : 5489                		addq.l	#2,a1
(2) 2069/    70C0 : 1280                		move.b	d0,(a1)
(2) 2070/    70C2 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70C2 : 5489                		addq.l	#2,a1
(2) 2069/    70C4 : 1280                		move.b	d0,(a1)
(2) 2070/    70C6 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70C6 : 5489                		addq.l	#2,a1
(2) 2069/    70C8 : 1280                		move.b	d0,(a1)
(2) 2070/    70CA :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70CA : 5489                		addq.l	#2,a1
(2) 2069/    70CC : 1280                		move.b	d0,(a1)
(2) 2070/    70CE :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70CE : 5489                		addq.l	#2,a1
(2) 2069/    70D0 : 1280                		move.b	d0,(a1)
(2) 2070/    70D2 :                     ; 		bsr	CdSub_PCM_Wait
(2) 2071/    70D2 : 5489                		addq.l	#2,a1
(2) 2073/    70D4 : 51CB FFDE           		dbf	d3,.loop_blkl
(2) 2074/    70D8 : 4E75                		rts
(2) 2075/    70DA :                     
(2) 2076/    70DA :                     ; =====================================================================
(2) 2077/    70DA :                     ; ----------------------------------------------------------------
(2) 2078/    70DA :                     ; WAV to PCM table conversion
(2) 2079/    70DA :                     ; ----------------------------------------------------------------
(2) 2080/    70DA :                     
(2) 2081/    70DA :                     CdSub_PCM_WavToPcm:
(2) 2082/    70DA : 0240 00FF           		andi.w	#$FF,d0
(2) 2083/    70DE : 103B 0004           		move.b	.wave_list(pc,d0.w),d0
(2) 2084/    70E2 : 4E75                		rts
(2) 2085/    70E4 :                     ; --------------------------------------------------------
(2) 2086/    70E4 :                     .wave_list:
(2) 2087/    70E4 : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             70EA : F9F8 F7F6 F5F4 
             70F0 : F3F2 F1F0          
(2) 2088/    70F4 : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             70FA : E9E8 E7E6 E5E4 
             7100 : E3E2 E1E0          
(2) 2089/    7104 : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             710A : D9D8 D7D6 D5D4 
             7110 : D3D2 D1D0          
(2) 2090/    7114 : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             711A : C9C8 C7C6 C5C4 
             7120 : C3C2 C1C0          
(2) 2091/    7124 : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             712A : B9B8 B7B6 B5B4 
             7130 : B3B2 B1B0          
(2) 2092/    7134 : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             713A : A9A8 A7A6 A5A4 
             7140 : A3A2 A1A0          
(2) 2093/    7144 : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             714A : 9998 9796 9594 
             7150 : 9392 9190          
(2) 2094/    7154 : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             715A : 8988 8786 8584 
             7160 : 8382 8180          
(2) 2095/    7164 : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             716A : 0607 0809 0A0B 
             7170 : 0C0D 0E0F          
(2) 2096/    7174 : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             717A : 1617 1819 1A1B 
             7180 : 1C1D 1E1F          
(2) 2097/    7184 : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             718A : 2627 2829 2A2B 
             7190 : 2C2D 2E2F          
(2) 2098/    7194 : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             719A : 3637 3839 3A3B 
             71A0 : 3C3D 3E3F          
(2) 2099/    71A4 : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             71AA : 4647 4849 4A4B 
             71B0 : 4C4D 4E4F          
(2) 2100/    71B4 : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             71BA : 5657 5859 5A5B 
             71C0 : 5C5D 5E5F          
(2) 2101/    71C4 : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             71CA : 6667 6869 6A6B 
             71D0 : 6C6D 6E6F          
(2) 2102/    71D4 : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             71DA : 7677 7879 7A7B 
             71E0 : 7C7D 7E7F          
(2) 2103/    71E4 :                     	align 2
(2) 2104/    71E4 :                     
(2) 2105/    71E4 :                     ; ====================================================================
(2) 2106/    71E4 :                     ; ----------------------------------------------------------------
(2) 2107/    71E4 :                     ; Short .w variables
(2) 2108/    71E4 :                     ; ----------------------------------------------------------------
(2) 2109/    71E4 :                     
(2) 2110/    71E4 :                     			align $80
(2) 2111/    7200 :                     SCPU_RAM:
(2) 2112/    7200 : (MACRO)              			memory SCPU_RAM
(2) 2112/    7200 : =$7200               GLBL_LASTPC     := *
(2) 2112/    1A00 :                                     dephase
(2) 2112/    7200 :                                     phase SCPU_RAM
(2) 2112/    7200 : =$7200               GLBL_LASTORG    := *
(2) 2113/    7200 :                     RAM_CdSub_StampNum	ds.w 1
(2) 2114/    7202 :                     RAM_CdSub_StampW	ds.w 1				; Safer W/H reads
(2) 2115/    7204 :                     RAM_CdSub_StampH	ds.w 1				; ''
(2) 2116/    7206 :                     RAM_CdSub_StampEnbl	ds.w 1				; Flag to Disable/Enable Stamp rendering *IMPORTANT*
(2) 2117/    7208 :                     RAM_CdSub_StampBusy	ds.w 1				; Stamp is busy drawing, Level 1 clears this
(2) 2118/    720A :                     RAM_CdSub_StampSize	ds.w 1				; %msr m-Map size: 1x1/16x16 s-Stamp 16x16/32x32 r-Repeat No/Yes
(2) 2119/    720C :                     RAM_CdSub_StampNextWr	ds.w 1
(2) 2120/    720E :                     RAM_CdSub_StampNextRd	ds.w 1
(2) 2121/    7210 :                     RAM_CdSub_DotClearFlag	ds.w 1
(2) 2122/    7212 :                     RAM_CdSub_StampIndxW	ds.w 1
(2) 2123/    7214 :                     RAM_CdSub_StampCBuff	ds.w 1
(2) 2124/    7216 :                     RAM_CdSub_StampPending	ds.w 1
(2) 2125/    7218 :                     RAM_CdSub_PcmEnbl	ds.b 1				; PCM Enable bits
(2) 2126/    7219 :                     RAM_CdSub_PcmReqUpd	ds.b 1				; PCM new data request
(2) 2127/    721A :                     RAM_CdSub_StampReqUpd	ds.b 1
(2) 2128/    721B :                     			align 2
(2) 2129/    721C :                     
(2) 2130/    721C :                     ; ====================================================================
(2) 2131/    721C :                     ; ----------------------------------------------------------------
(2) 2132/    721C :                     ; Buffers after $8000
(2) 2133/    721C :                     ; ----------------------------------------------------------------
(2) 2134/    721C :                     
(2) 2135/    721C :                     RAM_CdSub_StampProc	ds.b stmpc_len
(2) 2136/    7244 :                     RAM_CdSub_StampOutBox	ds.b stmpi_len
(2) 2137/    7250 :                     RAM_CdSub_StampList	ds.l 2*MAX_MCDSTAMPS		; Location and Z sort pos
(2) 2138/    7350 :                     
(2) 2139/    7350 :                     RAM_CdSub_CurrSaveInfo	ds.b $10
(2) 2140/    7360 :                     RAM_CdSub_BramWork	ds.b $640
(2) 2141/    79A0 :                     RAM_CdSub_BramStrings	ds.b $C
(2) 2142/    79AC :                     RAM_CdSub_PcmBuff	ds.b 8*cdpcm_len		; PCM Streaming buffer
(2) 2143/    7ABC :                     RAM_CdSub_PcmTable	ds.b 8*8			; PCM table recieved from Z80
(2) 2144/    7AFC :                     ISO_Filelist		ds.b $800*(8+1)
(2) 2145/    C2FC :                     ISO_Output		ds.b $800*($10+1)
(2) 2146/   14AFC :                     RAM_CdSub_FsBuff	ds.l $20
(2) 2147/   14B7C :                     sizeof_subcpu		ds.l 0
(2) 2148/   14B7C : (MACRO)              			endmemory
(2) 2148/    F37C :                     .here:          dephase
(2) 2148/    F37C :                                     ds.b -(.here-GLBL_LASTORG)
(2) 2148/    7200 :                                     phase GLBL_LASTPC
(2) 2149/    7200 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 2150/    7200 :                     
(2) 2151/    7200 :                     ; ====================================================================
(2) 2152/    7200 :                     ; ----------------------------------------------------------------
(2) 2153/    7200 :                     ; SUB-CPU data
(2) 2154/    7200 :                     ; ----------------------------------------------------------------
(2) 2155/    7200 :                     
(2) 2156/    1A00 :                     			dephase
(2) 2157/   20000 :                     			phase $20000		; <-- MANUAL location on Sub-CPU area
(2) 2158/   20000 :                     SCPU_DATA:
(2) 2159/    1A00 :                     			dephase
(2) 2160/    1A00 :                     			dephase
(2) 2161/    1A00 :                     
(1)   78/    1A00 :                     SP_End:
(1)   79/    1A00 :                     		align 2
(1)   80/    1A00 :                     
(1)   81/    1A00 :                     ; ====================================================================
(1)   82/    1A00 :                     ; ----------------------------------------------------------------
(1)   83/    1A00 :                     ; Super-jump
(1)   84/    1A00 :                     ; ----------------------------------------------------------------
(1)   85/    1A00 :                     
(1)   86/    1A00 :                     		align $2800
(1)   87/    2800 :                     MCD_Main:
(1)   88/    2800 :                     	; --------------------------------
(1)   89/    2800 :                     	; Copy colors
(1)   90/    2800 :                     	; --------------------------------
(1)   91/    2800 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)   92/    2806 : 2D7C 0000 0020      		move.l	#$00000020,4(a6)		; Copy ALL palette colors
             280C : 0004             
(1)   93/    280E :                     ; 		lea	(RAM_Palette).w,a5		; <-- Current palette
(1)   94/    280E : 4BF8 FF80           		lea	($FFFFFF80).w,a5
(1)   95/    2812 : 204D                		move.l	a5,a0
(1)   96/    2814 : 323C 003F           		move.w	#64-1,d1
(1)   97/    2818 :                     .copy_colors:
(1)   98/    2818 : 30D6                		move.w	(a6),(a0)+
(1)   99/    281A : 51C9 FFFC           		dbf	d1,.copy_colors
(1)  100/    281E :                     	; --------------------------------
(1)  101/    281E :                     	; Quick fade-out
(1)  102/    281E :                     	; --------------------------------
(1)  103/    281E :                     .fade_out:
(1)  104/    281E : 302E 0004           		move.w	4(a6),d0		; Wait VBlank
(1)  105/    2822 : 0800 0003           		btst	#3,d0
(1)  106/    2826 : 67F6                		beq.s	.fade_out
(1)  107/    2828 : 204D                		move.l	a5,a0
(1)  108/    282A : 3C3C 003F           		move.w	#64-1,d6		; Check all 64 colors
(1)  109/    282E : 7E00                		moveq	#0,d7			; Exit flag
(1)  110/    2830 :                     .next_color:
(1)  111/    2830 : 3010                		move.w	(a0),d0
(1)  112/    2832 : 673C                		beq.s	.nothing
(1)  113/    2834 : 3200                		move.w	d0,d1
(1)  114/    2836 : 0240 0EE0           		andi.w	#$EE0,d0
(1)  115/    283A : 0241 000E           		andi.w	#$00E,d1
(1)  116/    283E : 6704                		beq.s	.no_red
(1)  117/    2840 : 5541                		subq.w	#2,d1
(1)  118/    2842 : 5247                		addq.w	#1,d7
(1)  119/    2844 :                     .no_red:
(1)  120/    2844 : 8041                		or.w	d1,d0
(1)  121/    2846 : 3200                		move.w	d0,d1
(1)  122/    2848 : 0240 0E0E           		andi.w	#$E0E,d0
(1)  123/    284C : 0241 00E0           		andi.w	#$0E0,d1
(1)  124/    2850 : 6706                		beq.s	.no_green
(1)  125/    2852 : 0441 0020           		subi.w	#$020,d1
(1)  126/    2856 : 5247                		addq.w	#1,d7
(1)  127/    2858 :                     .no_green:
(1)  128/    2858 : 8041                		or.w	d1,d0
(1)  129/    285A : 3200                		move.w	d0,d1
(1)  130/    285C : 0240 00EE           		andi.w	#$0EE,d0
(1)  131/    2860 : 0241 0E00           		andi.w	#$E00,d1
(1)  132/    2864 : 6706                		beq.s	.no_blue
(1)  133/    2866 : 0441 0200           		subi.w	#$200,d1
(1)  134/    286A : 5247                		addq.w	#1,d7
(1)  135/    286C :                     .no_blue:
(1)  136/    286C : 8041                		or.w	d1,d0
(1)  137/    286E : 3080                		move.w	d0,(a0)
(1)  138/    2870 :                     .nothing:
(1)  139/    2870 : D0FC 0002           		adda	#2,a0
(1)  140/    2874 : 51CE FFBA           		dbf	d6,.next_color
(1)  141/    2878 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)
             287E : 0004             
(1)  142/    2880 : 3C3C 003F           		move.w	#64-1,d6
(1)  143/    2884 : 204D                		move.l	a5,a0
(1)  144/    2886 :                     .copy_new:
(1)  145/    2886 : 3C98                		move.w	(a0)+,(a6)
(1)  146/    2888 : 51CE FFFC           		dbf	d6,.copy_new
(1)  147/    288C :                     .wait_next:
(1)  148/    288C : 302E 0004           		move.w	4(a6),d0
(1)  149/    2890 : 0800 0003           		btst	#3,d0
(1)  150/    2894 : 66F6                		bne.s	.wait_next
(1)  151/    2896 :                     	; --------------------------------
(1)  152/    2896 : 4A47                		tst.w	d7
(1)  153/    2898 : 6684                		bne.s	.fade_out
(1)  154/    289A : 204D                		move.l	a5,a0
(1)  155/    289C : 7C00                		moveq	#0,d6
(1)  156/    289E : 7E3F                		moveq	#64-1,d7
(1)  157/    28A0 :                     .cleanup:
(1)  158/    28A0 : 30C6                		move.w	d6,(a0)+
(1)  159/    28A2 : 51CF FFFC           		dbf	d7,.cleanup
(1)  160/    28A6 :                     
     118/    28A6 : 41FA 006E           		lea	Md_SysCode(pc),a0			; Copy SYSTEM routines
     119/    28AA : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     120/    28B0 : 303C 22F9           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     121/    28B4 :                     .copy_code:
     122/    28B4 : 12D8                		move.b	(a0)+,(a1)+
     123/    28B6 : 51C8 FFFC           		dbf	d0,.copy_code
     129/    28BA : 41FA 003E           		lea	filen_z80file(pc),a0			; Load Z80 data to Word-RAM
     130/    28BE : 4EB9 FFFF 1ED0      		jsr	(System_MdMcd_RdFile_WRAM).l		; Sound_Init will read from there.
     131/    28C4 : 41F8 CC1E           		lea	(RAM_MdVideo).w,a0			; Clean our "work" RAM starting from here
     132/    28C8 : 223C FFFF EDBA      		move.l	#sizeof_mdram,d1
     133/    28CE : 7000                		moveq	#0,d0
     134/    28D0 : 30C0                .loop_ram:	move.w	d0,(a0)+
     135/    28D2 : B1C1                		cmp.l	d1,a0
     136/    28D4 : 65FA                		bcs.s	.loop_ram
     137/    28D6 : 4EB9 FFFF 1DAC      		jsr	(System_MdMcd_SubWait).l		; Wait Sub-CPU first.
     138/    28DC : 4EB9 FFFF 1898      		jsr	(Sound_Init).l				; Init Sound driver (FIRST)
     139/    28E2 : 4EB9 FFFF 0270      		jsr	(Video_Init).l				; Init Video
     140/    28E8 : 4EB9 FFFF 17A8      		jsr	(System_Init).l				; Init System
     141/    28EE : 31FC 0007 EDB4      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     142/    28F4 : 4EF9 FFFF 223C      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     143/    28FA :                     filen_z80file:
     144/    28FA : 4745 4D41 5F5A      		dc.b "GEMA_Z80.BIN",0
             2900 : 3830 2E42 494E 00 
     145/    2907 :                     		align 2
     146/    2908 :                     filen_marscode:
     147/    2908 : 4E4B 4E41 4D41      		dc.b "NKNAMARS.BIN",0
             290E : 5253 2E42 494E 00 
     148/    2915 :                     		align 2
     149/    2916 :                     
     150/    2916 :                     ; ---------------------------------------------
     151/    2916 :                     ; SEGA PICO
     152/    2916 :                     ;
     153/    2916 :                     ; This recycles the MD's routines.
     154/    2916 :                     ; ---------------------------------------------
     176/    2916 :                     
     177/    2916 :                     ; ====================================================================
     178/    2916 :                     ; --------------------------------------------------------
     179/    2916 :                     ; SYSTEM routines
     180/    2916 :                     ;
     181/    2916 :                     ; MD/PICO:  Normal ROM locations
     182/    2916 :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     183/    2916 :                     ;           with the SH2's view of ROM
     184/    2916 :                     ; CD/CD32X: Loaded into RAM for safe access.
     185/    2916 :                     ; --------------------------------------------------------
     186/    2916 :                     
     188/    2916 :                     Md_SysCode:
     189/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     191/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     192/FFFFFFFFFFFF0000 :                     
     193/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema_macros.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    2/FFFFFFFFFFFF0000 :                     ; MACROS
(1)    3/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    4/FFFFFFFFFFFF0000 :                     
(1)    5/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)    6/FFFFFFFFFFFF0000 :                     ; gSmplData - Include .WAV sample data, applies to
(1)    7/FFFFFFFFFFFF0000 :                     ;             DAC, PCM* and PWM
(1)    8/FFFFFFFFFFFF0000 :                     ;
(1)    9/FFFFFFFFFFFF0000 :                     ;             * No need to convert data, Sub-CPU
(1)   10/FFFFFFFFFFFF0000 :                     ;             converts the data manually.
(1)   11/FFFFFFFFFFFF0000 :                     ;
(1)   12/FFFFFFFFFFFF0000 :                     ; labl | 24-bit Pointer, depending of the
(1)   13/FFFFFFFFFFFF0000 :                     ;        current CPU
(1)   14/FFFFFFFFFFFF0000 :                     ; file | File path for the WAV sample file
(1)   15/FFFFFFFFFFFF0000 :                     ; loop | Loop start point if sample loop is enabled
(1)   16/FFFFFFFFFFFF0000 :                     ;        Set to 0 if not using loop.
(1)   17/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   18/FFFFFFFFFFFF0000 :                     
(1)   19/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   20/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   21/FFFFFFFFFFFF0000 :                     		align 4
(1)   22/FFFFFFFFFFFF0000 :                     	endif
(1)   23/FFFFFFFFFFFF0000 :                     labl	label *
(1)   24/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)
(1)   25/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)
(1)   26/FFFFFFFFFFFF0000 :                     labl_s:
(1)   27/FFFFFFFFFFFF0000 :                     	binclude file,$2C
(1)   28/FFFFFFFFFFFF0000 :                     labl_e:
(1)   29/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   30/FFFFFFFFFFFF0000 :                     		align 4
(1)   31/FFFFFFFFFFFF0000 :                     	endif
(1)   32/FFFFFFFFFFFF0000 :                     	endm
(1)   33/FFFFFFFFFFFF0000 :                     
(1)   34/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   35/FFFFFFFFFFFF0000 :                     ; gemaList - Make a tracklist label
(1)   36/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   37/FFFFFFFFFFFF0000 :                     
(1)   38/FFFFFFFFFFFF0000 :                     ; gemaList macro thislbl
(1)   39/FFFFFFFFFFFF0000 :                     ; 	align 2
(1)   40/FFFFFFFFFFFF0000 :                     ; thislbl	label *
(1)   41/FFFFFFFFFFFF0000 :                     ; GLBL_GEMABASE := *
(1)   42/FFFFFFFFFFFF0000 :                     ; 	endm
(1)   43/FFFFFFFFFFFF0000 :                     
(1)   44/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   45/FFFFFFFFFFFF0000 :                     ; gemaTrk - Sequence entry on Gema_MasterList
(1)   46/FFFFFFFFFFFF0000 :                     ;
(1)   47/FFFFFFFFFFFF0000 :                     ; enblt | Disable/Enable global beats on this Sequence
(1)   48/FFFFFFFFFFFF0000 :                     ;         0 - Don't Use beats, 1 - Use beats
(1)   49/FFFFFFFFFFFF0000 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   50/FFFFFFFFFFFF0000 :                     ;   loc | Direct location of the sequence data
(1)   51/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   52/FFFFFFFFFFFF0000 :                     
(1)   53/FFFFFFFFFFFF0000 :                     gemaTrk macro enbltp,ticks,loc
(1)   54/FFFFFFFFFFFF0000 :                     	dc.l ((enbltp&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   55/FFFFFFFFFFFF0000 :                     	endm
(1)   56/FFFFFFFFFFFF0000 :                     
(1)   57/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   58/FFFFFFFFFFFF0000 :                     ; gemaHead - Track pointers to their respective data
(1)   59/FFFFFFFFFFFF0000 :                     ;
(1)   60/FFFFFFFFFFFF0000 :                     ; blk_data  | Block data pointer
(1)   61/FFFFFFFFFFFF0000 :                     ; patt_data | Pattern data pointer
(1)   62/FFFFFFFFFFFF0000 :                     ; ins_list  | instrument list pointer
(1)   63/FFFFFFFFFFFF0000 :                     ; num_chnls | Number of channels used in the track
(1)   64/FFFFFFFFFFFF0000 :                     ;             If 0: Read ALL channels
(1)   65/FFFFFFFFFFFF0000 :                     ;                   (NOT recommended, UNSTABLE)
(1)   66/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   67/FFFFFFFFFFFF0000 :                     
(1)   68/FFFFFFFFFFFF0000 :                     gemaHead macro blk,pat,ins,num
(1)   69/FFFFFFFFFFFF0000 :                     	dc.w num
(1)   70/FFFFFFFFFFFF0000 :                     	dc.l blk
(1)   71/FFFFFFFFFFFF0000 :                     	dc.l pat
(1)   72/FFFFFFFFFFFF0000 :                     	dc.l ins
(1)   73/FFFFFFFFFFFF0000 :                     	endm
(1)   74/FFFFFFFFFFFF0000 :                     
(1)   75/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   76/FFFFFFFFFFFF0000 :                     ; Instrument macros, instrument_num-1
(1)   77/FFFFFFFFFFFF0000 :                     ; (ex. Instrument 1 is 0 here)
(1)   78/FFFFFFFFFFFF0000 :                     ;
(1)   79/FFFFFFFFFFFF0000 :                     ; NOTE: UNUSED instruments MUST use gInsNull or
(1)   80/FFFFFFFFFFFF0000 :                     ; the Z80 gets unexpected results and probably crash.
(1)   81/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   82/FFFFFFFFFFFF0000 :                     
(1)   83/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   84/FFFFFFFFFFFF0000 :                     ; gInsNull - Null instrument
(1)   85/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   86/FFFFFFFFFFFF0000 :                     
(1)   87/FFFFFFFFFFFF0000 :                     gInsNull macro
(1)   88/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)   89/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)   90/FFFFFFFFFFFF0000 :                     	endm
(1)   91/FFFFFFFFFFFF0000 :                     
(1)   92/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   93/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG tone
(1)   94/FFFFFFFFFFFF0000 :                     ;
(1)   95/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)   96/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)   97/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)   98/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)   99/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  100/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  101/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  102/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  103/FFFFFFFFFFFF0000 :                     
(1)  104/FFFFFFFFFFFF0000 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  105/FFFFFFFFFFFF0000 :                     	dc.b $80,pitch,alv,atk
(1)  106/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  107/FFFFFFFFFFFF0000 :                     	endm
(1)  108/FFFFFFFFFFFF0000 :                     
(1)  109/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  110/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG noise
(1)  111/FFFFFFFFFFFF0000 :                     ;
(1)  112/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  113/FFFFFFFFFFFF0000 :                     ;         If using Tone3: set to 47 for a full noise
(1)  114/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  115/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  116/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  117/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  118/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  119/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, planned vibrato for later.
(1)  120/FFFFFFFFFFFF0000 :                     ; mode  | Noise mode: %tmm
(1)  121/FFFFFFFFFFFF0000 :                     ;        t - Bass(0)|Noise(1)
(1)  122/FFFFFFFFFFFF0000 :                     ;        m - Clock(0)|Clock/2(1)|Clock/4(2)|Tone3(3)
(1)  123/FFFFFFFFFFFF0000 :                     ;        Using Tone3 will disable PSG Channel 3.
(1)  124/FFFFFFFFFFFF0000 :                     ;
(1)  125/FFFFFFFFFFFF0000 :                     ; Note:
(1)  126/FFFFFFFFFFFF0000 :                     ; Tone3 WILL silence PSG3 as it steals the
(1)  127/FFFFFFFFFFFF0000 :                     ; frequency from it, chip limitation.
(1)  128/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  129/FFFFFFFFFFFF0000 :                     
(1)  130/FFFFFFFFFFFF0000 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  131/FFFFFFFFFFFF0000 :                     	dc.b $90|mode,pitch,alv,atk
(1)  132/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  133/FFFFFFFFFFFF0000 :                     	endm
(1)  134/FFFFFFFFFFFF0000 :                     
(1)  135/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  136/FFFFFFFFFFFF0000 :                     ; gInsFm - FM Normal instrument/patch
(1)  137/FFFFFFFFFFFF0000 :                     ;
(1)  138/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  139/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  140/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  141/FFFFFFFFFFFF0000 :                     
(1)  142/FFFFFFFFFFFF0000 :                     gInsFm macro pitch,fmins
(1)  143/FFFFFFFFFFFF0000 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  144/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  145/FFFFFFFFFFFF0000 :                     	endm
(1)  146/FFFFFFFFFFFF0000 :                     
(1)  147/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  148/FFFFFFFFFFFF0000 :                     ; gInsFm - FM3 Special instrument/patch
(1)  149/FFFFFFFFFFFF0000 :                     ;
(1)  150/FFFFFFFFFFFF0000 :                     ; pitch | UNUSED, set to 0
(1)  151/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  152/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  153/FFFFFFFFFFFF0000 :                     
(1)  154/FFFFFFFFFFFF0000 :                     gInsFm3	macro pitch,fmins
(1)  155/FFFFFFFFFFFF0000 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  156/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  157/FFFFFFFFFFFF0000 :                     	endm
(1)  158/FFFFFFFFFFFF0000 :                     
(1)  159/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  160/FFFFFFFFFFFF0000 :                     ; gInsDac - DAC instrument
(1)  161/FFFFFFFFFFFF0000 :                     ;
(1)  162/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  163/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  164/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  165/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  166/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  167/FFFFFFFFFFFF0000 :                     
(1)  168/FFFFFFFFFFFF0000 :                     gInsDac	macro pitch,start,flags
(1)  169/FFFFFFFFFFFF0000 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  170/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  171/FFFFFFFFFFFF0000 :                     	endm
(1)  172/FFFFFFFFFFFF0000 :                     
(1)  173/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  174/FFFFFFFFFFFF0000 :                     ; gInsPcm - Sega CD PCM Sample
(1)  175/FFFFFFFFFFFF0000 :                     ;
(1)  176/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  177/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  178/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  179/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  180/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  181/FFFFFFFFFFFF0000 :                     
(1)  182/FFFFFFFFFFFF0000 :                     gInsPcm	macro pitch,start,flags
(1)  183/FFFFFFFFFFFF0000 :                      if MCD|MARSCD
(1)  184/FFFFFFFFFFFF0000 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  185/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  186/FFFFFFFFFFFF0000 :                      else
(1)  187/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  188/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  189/FFFFFFFFFFFF0000 :                      endif
(1)  190/FFFFFFFFFFFF0000 :                     	endm
(1)  191/FFFFFFFFFFFF0000 :                     
(1)  192/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  193/FFFFFFFFFFFF0000 :                     ; gInsPwm - Sega 32X PWM Sample
(1)  194/FFFFFFFFFFFF0000 :                     ;
(1)  195/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  196/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer to DAC sample
(1)  197/FFFFFFFFFFFF0000 :                     ; flags | Flags: %000000sl
(1)  198/FFFFFFFFFFFF0000 :                     ;         l - Use loop enable: No(0) or Yes(1)
(1)  199/FFFFFFFFFFFF0000 :                     ;         s - Sample data is in Stereo
(1)  200/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  201/FFFFFFFFFFFF0000 :                     
(1)  202/FFFFFFFFFFFF0000 :                     gInsPwm	macro pitch,start,flags
(1)  203/FFFFFFFFFFFF0000 :                      if MARS|MARSCD
(1)  204/FFFFFFFFFFFF0000 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  205/FFFFFFFFFFFF0000 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  206/FFFFFFFFFFFF0000 :                      else
(1)  207/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  208/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  209/FFFFFFFFFFFF0000 :                      endif
(1)  210/FFFFFFFFFFFF0000 :                     	endm
(1)  211/FFFFFFFFFFFF0000 :                     
     194/FFFFFFFFFFFF0000 :                     		include	"sound/driver/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ;
(1)    6/FFFFFFFFFFFF0000 :                     ; Features:
(1)    7/FFFFFFFFFFFF0000 :                     ; - Support for SEGA CD's PCM channels:
(1)    8/FFFFFFFFFFFF0000 :                     ;   | All 8 channels with streaming support
(1)    9/FFFFFFFFFFFF0000 :                     ;   | for larger samples.
(1)   10/FFFFFFFFFFFF0000 :                     ;
(1)   11/FFFFFFFFFFFF0000 :                     ; - Support for 32X's PWM:
(1)   12/FFFFFFFFFFFF0000 :                     ;   | 7 pseudo-channels in either MONO
(1)   13/FFFFFFFFFFFF0000 :                     ;   | or STEREO.
(1)   14/FFFFFFFFFFFF0000 :                     ;
(1)   15/FFFFFFFFFFFF0000 :                     ; - WAVE playback at 16000hz (base) for
(1)   16/FFFFFFFFFFFF0000 :                     ;   | all sample-based channels:
(1)   17/FFFFFFFFFFFF0000 :                     ;   | DAC, PCM and PWM
(1)   18/FFFFFFFFFFFF0000 :                     ;
(1)   19/FFFFFFFFFFFF0000 :                     ; - DMA ROM protection for DAC
(1)   20/FFFFFFFFFFFF0000 :                     ;   | This keeps the wave playback in a
(1)   21/FFFFFFFFFFFF0000 :                     ;   | decent quality while doing any DMA
(1)   22/FFFFFFFFFFFF0000 :                     ;   | task in the 68k side.
(1)   23/FFFFFFFFFFFF0000 :                     ; - FM special mode with custom frequencies
(1)   24/FFFFFFFFFFFF0000 :                     ; - Autodetection for the PSG's Tone3 mode
(1)   25/FFFFFFFFFFFF0000 :                     ;
(1)   26/FFFFFFFFFFFF0000 :                     ; * Notes:
(1)   27/FFFFFFFFFFFF0000 :                     ; This driver uses the area $FFFF00-$FFFFFF
(1)   28/FFFFFFFFFFFF0000 :                     ; The Z80 writes a flag directly to RAM for
(1)   29/FFFFFFFFFFFF0000 :                     ; a workaround to bypass a data-reading
(1)   30/FFFFFFFFFFFF0000 :                     ; hardware limitation. (see Sound_Update)
(1)   31/FFFFFFFFFFFF0000 :                     ;
(1)   32/FFFFFFFFFFFF0000 :                     ; CURRENTLY THIS CAN ONLY BE USED HERE IN NikonaSDK
(1)   33/FFFFFFFFFFFF0000 :                     ; BECAUSE OF CROSS-REFERENCING LABELS BETWEEN THE
(1)   34/FFFFFFFFFFFF0000 :                     ; Z80 and 68K.
(1)   35/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   38/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     ; Variables
(1)   40/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   41/FFFFFFFFFFFF0000 :                     
(1)   42/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000		; Z80 CPU area, size: $2000
(1)   43/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100		; only read bit 0 (bit 8 as WORD)
(1)   44/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200		; WRITE only: $0000 reset/$0100 cancel
(1)   45/FFFFFFFFFFFF0000 :                     
(1)   46/FFFFFFFFFFFF0000 :                     ; Z80-area points:
(1)   47/FFFFFFFFFFFF0000 : =$40                 zDrvFifo	equ commZfifo		; FIFO command storage
(1)   48/FFFFFFFFFFFF0000 : =$2E                 zDrvFWrt	equ commZWrite		; FIFO command index
(1)   49/FFFFFFFFFFFF0000 : =$2F                 zDrvRomBlk	equ commZRomBlk		; ROM block flag
(1)   50/FFFFFFFFFFFF0000 : =$37                 zDrvMarsBlk	equ marsBlock		; Flag to disable 32X's PWM
(1)   51/FFFFFFFFFFFF0000 : =$36                 zDrvMcdBlk	equ mcdBlock		; Flag to disable SegaCD's PCM
(1)   52/FFFFFFFFFFFF0000 : =$35                 zDrvRamSrc	equ cdRamSrcB		; RAM-read source+dest pointers
(1)   53/FFFFFFFFFFFF0000 : =$30                 zDrvRamLen	equ cdRamLen		; RAM-read length and flag
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   56/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   57/FFFFFFFFFFFF0000 :                     ; Labels
(1)   58/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   59/FFFFFFFFFFFF0000 :                     
(1)   60/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlag_D	equ RAM_SoundBuff	; transferRom flag (ALSO for Z80)
(1)   61/FFFFFFFFFFFF0000 :                     
(1)   62/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   63/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   64/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   65/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   66/FFFFFFFFFFFF0000 :                     
(1)   67/FFFFFFFFFFFF0000 :                     gemaInit:
(1)   68/FFFFFFFFFFFF0000 : 007C 0700           		ori.w	#$0700,sr
(1)   72/FFFFFFFFFFFF0004 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
         FFFFFFFFFFFF000A : 1100             
(1)   73/FFFFFFFFFFFF000C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0012 : 1200             
(1)   74/FFFFFFFFFFFF0014 :                     .wait:
(1)   75/FFFFFFFFFFFF0014 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF001A : 1100             
(1)   76/FFFFFFFFFFFF001C : 66F6                		bne.s	.wait
(1)   77/FFFFFFFFFFFF001E : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - Z80 CPU area
(1)   78/FFFFFFFFFFFF0024 : 2049                		move.l	a1,a0
(1)   79/FFFFFFFFFFFF0026 : 323C 1FFF           		move.w	#$1FFF,d1
(1)   80/FFFFFFFFFFFF002A : 7000                		moveq	#0,d0
(1)   81/FFFFFFFFFFFF002C :                     .cleanup:
(1)   82/FFFFFFFFFFFF002C : 10C0                		move.b	d0,(a0)+
(1)   83/FFFFFFFFFFFF002E : 51C9 FFFC           		dbf	d1,.cleanup
(1)   84/FFFFFFFFFFFF0032 : 41F9 0020 0000      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   85/FFFFFFFFFFFF0038 : 303C 1F9B           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   86/FFFFFFFFFFFF003C :                     .copy:
(1)   87/FFFFFFFFFFFF003C : 12D8                		move.b	(a0)+,(a1)+
(1)   88/FFFFFFFFFFFF003E : 51C8 FFFC           		dbf	d0,.copy
(1)   89/FFFFFFFFFFFF0042 : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset
         FFFFFFFFFFFF0048 : 1200             
(1)   90/FFFFFFFFFFFF004A : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Reset Z80 transferRom flag
(1)   91/FFFFFFFFFFFF004E : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Write PAL mode flag from here
(1)   92/FFFFFFFFFFFF0054 : 0800 0006           		btst	#6,d0
(1)   93/FFFFFFFFFFFF0058 : 6708                		beq.s	.not_pal
(1)   94/FFFFFFFFFFFF005A : 13FC 0001 00A0      		move.b	#1,(z80_cpu+palMode).l
         FFFFFFFFFFFF0060 : 003E             
(1)   95/FFFFFFFFFFFF0062 :                     .not_pal:
(1)   96/FFFFFFFFFFFF0062 : 4E71                		nop
(1)   97/FFFFFFFFFFFF0064 : 4E71                		nop
(1)   98/FFFFFFFFFFFF0066 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF006C : 1200             
(1)   99/FFFFFFFFFFFF006E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0074 : 1100             
(1)  101/FFFFFFFFFFFF0076 :                     
(1)  102/FFFFFFFFFFFF0076 :                     ; ====================================================================
(1)  103/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  104/FFFFFFFFFFFF0076 :                     ; gemaReset
(1)  105/FFFFFFFFFFFF0076 :                     ;
(1)  106/FFFFFFFFFFFF0076 :                     ; Reset sound to default sequence list
(1)  107/FFFFFFFFFFFF0076 :                     ; ----------------------------------------------------------------
(1)  108/FFFFFFFFFFFF0076 :                     
(1)  109/FFFFFFFFFFFF0076 :                     gemaReset:
(1)  110/FFFFFFFFFFFF0076 : 41F9 0020 0000      		lea	(MainGemaSeqList),a0
(1)  111/FFFFFFFFFFFF007C : 6100 013C           		bsr	gemaSetMasterList
(1)  112/FFFFFFFFFFFF0080 : 7E05                		moveq	#6-1,d7				; Make sure it finishes.
(1)  113/FFFFFFFFFFFF0082 : 51CF FFFE           		dbf	d7,*
(1)  114/FFFFFFFFFFFF0086 : 4E75                		rts
(1)  115/FFFFFFFFFFFF0088 :                     
(1)  116/FFFFFFFFFFFF0088 :                     ; ====================================================================
(1)  117/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  118/FFFFFFFFFFFF0088 :                     ; gemaUpdate
(1)  119/FFFFFFFFFFFF0088 :                     ;
(1)  120/FFFFFFFFFFFF0088 :                     ; Call this during DISPLAY ONLY and during your VBlank wait
(1)  121/FFFFFFFFFFFF0088 :                     ; (already called by System_Render)
(1)  122/FFFFFFFFFFFF0088 :                     ;
(1)  123/FFFFFFFFFFFF0088 :                     ; RAM-to-Z80 transferRom workaround:
(1)  124/FFFFFFFFFFFF0088 :                     ; This checks if the Z80 wants to read from RAM (as it can't
(1)  125/FFFFFFFFFFFF0088 :                     ; see it), The 68k CPU manually writes the RAM bytes from
(1)  126/FFFFFFFFFFFF0088 :                     ; here to the Z80's RAM
(1)  127/FFFFFFFFFFFF0088 :                     ; THIS IS REQUIRED if you want to play your the tracks
(1)  128/FFFFFFFFFFFF0088 :                     ; (and instruments) in case you use the ASIC-Stamp scaling/
(1)  129/FFFFFFFFFFFF0088 :                     ; rotation.
(1)  130/FFFFFFFFFFFF0088 :                     ;
(1)  131/FFFFFFFFFFFF0088 :                     ; SCD/CD32X:
(1)  132/FFFFFFFFFFFF0088 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  133/FFFFFFFFFFFF0088 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  134/FFFFFFFFFFFF0088 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  135/FFFFFFFFFFFF0088 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set for
(1)  136/FFFFFFFFFFFF0088 :                     ;   reading from there
(1)  137/FFFFFFFFFFFF0088 :                     ;
(1)  138/FFFFFFFFFFFF0088 :                     ; Sega Pico:
(1)  139/FFFFFFFFFFFF0088 :                     ; - TODO The entire Sound Driver will be here, translated from
(1)  140/FFFFFFFFFFFF0088 :                     ;   Z80 to 68k.
(1)  141/FFFFFFFFFFFF0088 :                     ; ----------------------------------------------------------------
(1)  142/FFFFFFFFFFFF0088 :                     
(1)  143/FFFFFFFFFFFF0088 :                     gemaUpdate:
(1)  147/FFFFFFFFFFFF0088 :                     	; ------------------------------------------------
(1)  148/FFFFFFFFFFFF0088 :                     	; If transferRom wants to read from 68k RAM
(1)  149/FFFFFFFFFFFF0088 : 4A38 FF00           		tst.b	(RAM_ZCdFlag_D).w		; Z80 WROTE the flag?
(1)  150/FFFFFFFFFFFF008C : 674C                		beq.s	.no_task
(1)  151/FFFFFFFFFFFF008E : 4238 FF00           		clr.b	(RAM_ZCdFlag_D).w		; Clear here
(1)  152/FFFFFFFFFFFF0092 : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  153/FFFFFFFFFFFF0096 : 7E00                		moveq	#0,d7
(1)  154/FFFFFFFFFFFF0098 : 6142                		bsr	sndLockZ80
(1)  155/FFFFFFFFFFFF009A : 1E39 00A0 0030      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Size != 0?
(1)  156/FFFFFFFFFFFF00A0 : 6732                		beq.s	.no_size
(1)  157/FFFFFFFFFFFF00A2 : 5347                		subq.w	#1,d7
(1)  158/FFFFFFFFFFFF00A4 : 4DF9 00A0 0036      		lea	(z80_cpu+(zDrvRamSrc+1)),a6
(1)  159/FFFFFFFFFFFF00AA : 4BF9 00A0 0000      		lea	(z80_cpu),a5
(1)  160/FFFFFFFFFFFF00B0 : 1C26                		move.b	-(a6),d6			; d6 - Source
(1)  161/FFFFFFFFFFFF00B2 : 4846                		swap	d6
(1)  162/FFFFFFFFFFFF00B4 : 1C26                		move.b	-(a6),d6
(1)  163/FFFFFFFFFFFF00B6 : E14E                		lsl.w	#8,d6
(1)  164/FFFFFFFFFFFF00B8 : 1C26                		move.b	-(a6),d6
(1)  165/FFFFFFFFFFFF00BA : 7A00                		moveq	#0,d5
(1)  166/FFFFFFFFFFFF00BC : 1A26                		move.b	-(a6),d5			; d5 - Dest
(1)  167/FFFFFFFFFFFF00BE : E14D                		lsl.w	#8,d5
(1)  168/FFFFFFFFFFFF00C0 : 1A26                		move.b	-(a6),d5
(1)  169/FFFFFFFFFFFF00C2 : DBC5                		add.l	d5,a5
(1)  170/FFFFFFFFFFFF00C4 : 2846                		move.l	d6,a4
(1)  171/FFFFFFFFFFFF00C6 :                     .copy_bytes:
(1)  172/FFFFFFFFFFFF00C6 : 1ADC                		move.b	(a4)+,(a5)+
(1)  173/FFFFFFFFFFFF00C8 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  174/FFFFFFFFFFFF00CC : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; Clear LEN, breaks Z80 loop
         FFFFFFFFFFFF00D2 : 0030             
(1)  175/FFFFFFFFFFFF00D4 :                     .no_size:
(1)  176/FFFFFFFFFFFF00D4 : 611A                		bsr	sndUnlockZ80
(1)  177/FFFFFFFFFFFF00D6 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  178/FFFFFFFFFFFF00DA :                     .no_task:
(1)  180/FFFFFFFFFFFF00DA : 4E75                		rts
(1)  181/FFFFFFFFFFFF00DC :                     
(1)  182/FFFFFFFFFFFF00DC :                     ; ====================================================================
(1)  183/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  184/FFFFFFFFFFFF00DC :                     ; sndLockZ80
(1)  185/FFFFFFFFFFFF00DC :                     ;
(1)  186/FFFFFFFFFFFF00DC :                     ; Locks Z80, unlocks bus.
(1)  187/FFFFFFFFFFFF00DC :                     ; ------------------------------------------------
(1)  188/FFFFFFFFFFFF00DC :                     
(1)  189/FFFFFFFFFFFF00DC :                     sndLockZ80:
(1)  191/FFFFFFFFFFFF00DC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF00E2 : 1100             
(1)  192/FFFFFFFFFFFF00E4 :                     .wait:
(1)  193/FFFFFFFFFFFF00E4 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF00EA : 1100             
(1)  194/FFFFFFFFFFFF00EC : 66F6                		bne.s	.wait
(1)  196/FFFFFFFFFFFF00EE : 4E75                		rts
(1)  197/FFFFFFFFFFFF00F0 :                     
(1)  198/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  199/FFFFFFFFFFFF00F0 :                     ; sndUnlockZ80
(1)  200/FFFFFFFFFFFF00F0 :                     ;
(1)  201/FFFFFFFFFFFF00F0 :                     ; Unlocks Z80, locks bus.
(1)  202/FFFFFFFFFFFF00F0 :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF00F0 :                     
(1)  204/FFFFFFFFFFFF00F0 :                     sndUnlockZ80:
(1)  206/FFFFFFFFFFFF00F0 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00F6 : 1100             
(1)  208/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  209/FFFFFFFFFFFF00FA :                     
(1)  210/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  211/FFFFFFFFFFFF00FA :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  212/FFFFFFFFFFFF00FA :                     ;
(1)  213/FFFFFFFFFFFF00FA :                     ; d6 - commFifo index
(1)  214/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  215/FFFFFFFFFFFF00FA :                     
(1)  216/FFFFFFFFFFFF00FA :                     sndReq_Enter:
(1)  217/FFFFFFFFFFFF00FA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  219/FFFFFFFFFFFF00FE : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF0104 : 1100             
(1)  221/FFFFFFFFFFFF0106 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  222/FFFFFFFFFFFF010A : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  223/FFFFFFFFFFFF010E : DEFC 0014           		adda	#(4*4)+4,sp			; Go back to the RTS jump
(1)  224/FFFFFFFFFFFF0112 : 4BF9 00A0 002E      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  225/FFFFFFFFFFFF0118 : 4DF9 00A0 0040      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  226/FFFFFFFFFFFF011E :                     .wait:
(1)  228/FFFFFFFFFFFF011E : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0124 : 1100             
(1)  229/FFFFFFFFFFFF0126 : 66F6                		bne.s	.wait
(1)  231/FFFFFFFFFFFF0128 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  232/FFFFFFFFFFFF012A : 4886                		ext.w	d6				; extend to 16 bits
(1)  233/FFFFFFFFFFFF012C : 4E75                		rts
(1)  234/FFFFFFFFFFFF012E :                     ; JUMP ONLY
(1)  235/FFFFFFFFFFFF012E :                     sndReq_Exit:
(1)  237/FFFFFFFFFFFF012E : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0134 : 1100             
(1)  239/FFFFFFFFFFFF0136 : 9EFC 0018           		suba	#8+(4*4),sp
(1)  240/FFFFFFFFFFFF013A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  241/FFFFFFFFFFFF013E : DEFC 0008           		adda	#8,sp
(1)  242/FFFFFFFFFFFF0142 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  243/FFFFFFFFFFFF0146 : 4E75                		rts
(1)  244/FFFFFFFFFFFF0148 :                     
(1)  245/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  246/FFFFFFFFFFFF0148 :                     ; Send request id and arguments
(1)  247/FFFFFFFFFFFF0148 :                     ;
(1)  248/FFFFFFFFFFFF0148 :                     ; Input:
(1)  249/FFFFFFFFFFFF0148 :                     ; d7 - byte to write
(1)  250/FFFFFFFFFFFF0148 :                     ; d6 - index pointer
(1)  251/FFFFFFFFFFFF0148 :                     ; a5 - commZWrite, update index
(1)  252/FFFFFFFFFFFF0148 :                     ; a6 - commZfifo command list
(1)  253/FFFFFFFFFFFF0148 :                     ;
(1)  254/FFFFFFFFFFFF0148 :                     ; *** CALL sndReq_Enter FIRST ***
(1)  255/FFFFFFFFFFFF0148 :                     ; ------------------------------------------------
(1)  256/FFFFFFFFFFFF0148 :                     
(1)  257/FFFFFFFFFFFF0148 :                     sndReq_scmd:
(1)  258/FFFFFFFFFFFF0148 : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; write command-start flag
(1)  259/FFFFFFFFFFFF014E : 5206                		addq.b	#1,d6				; next fifo pos
(1)  260/FFFFFFFFFFFF0150 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  261/FFFFFFFFFFFF0154 : 600C                		bra.s	sndReq_sbyte
(1)  262/FFFFFFFFFFFF0156 :                     sndReq_slong:
(1)  263/FFFFFFFFFFFF0156 : 610A                		bsr	sndReq_sbyte
(1)  264/FFFFFFFFFFFF0158 : E09F                		ror.l	#8,d7
(1)  265/FFFFFFFFFFFF015A :                     sndReq_saddr:	; 24-bit address
(1)  266/FFFFFFFFFFFF015A : 6106                		bsr	sndReq_sbyte
(1)  267/FFFFFFFFFFFF015C : E09F                		ror.l	#8,d7
(1)  268/FFFFFFFFFFFF015E :                     sndReq_sword:
(1)  269/FFFFFFFFFFFF015E : 6102                		bsr	sndReq_sbyte
(1)  270/FFFFFFFFFFFF0160 : E09F                		ror.l	#8,d7
(1)  271/FFFFFFFFFFFF0162 :                     sndReq_sbyte:
(1)  272/FFFFFFFFFFFF0162 : 1D87 6000           		move.b	d7,(a6,d6.w)			; write byte
(1)  273/FFFFFFFFFFFF0166 : 5206                		addq.b	#1,d6				; next fifo pos
(1)  274/FFFFFFFFFFFF0168 : 0206 000F           		andi.b	#MAX_ZCMND-1,d6			; * Z80 label *
(1)  275/FFFFFFFFFFFF016C : 1A86                		move.b	d6,(a5)				; update commZWrite
(1)  276/FFFFFFFFFFFF016E : 4E75                		rts
(1)  277/FFFFFFFFFFFF0170 :                     
(1)  278/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  279/FFFFFFFFFFFF0170 :                     ; gemaDmaPause
(1)  280/FFFFFFFFFFFF0170 :                     ;
(1)  281/FFFFFFFFFFFF0170 :                     ; Call this BEFORE doing any DMA transfer
(1)  282/FFFFFFFFFFFF0170 :                     ;
(1)  283/FFFFFFFFFFFF0170 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  284/FFFFFFFFFFFF0170 :                     ; --------------------------------------------------------
(1)  285/FFFFFFFFFFFF0170 :                     
(1)  286/FFFFFFFFFFFF0170 :                     gemaDmaPause:
(1)  290/FFFFFFFFFFFF0170 : 2F07                		move.l	d7,-(sp)
(1)  291/FFFFFFFFFFFF0172 : 6100 FF68           		bsr	sndLockZ80
(1)  292/FFFFFFFFFFFF0176 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Block flag for Z80
         FFFFFFFFFFFF017C : 002F             
(1)  293/FFFFFFFFFFFF017E : 6100 FF70           		bsr	sndUnlockZ80
(1)  294/FFFFFFFFFFFF0182 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  295/FFFFFFFFFFFF0186 : 51CF FFFE           		dbf	d7,*
(1)  296/FFFFFFFFFFFF018A : 2E1F                		move.l	(sp)+,d7
(1)  297/FFFFFFFFFFFF018C : 4E75                		rts
(1)  299/FFFFFFFFFFFF018E :                     
(1)  300/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  301/FFFFFFFFFFFF018E :                     ; gemaDmaResume
(1)  302/FFFFFFFFFFFF018E :                     ;
(1)  303/FFFFFFFFFFFF018E :                     ; Call this AFTER finishing DMA transfer
(1)  304/FFFFFFFFFFFF018E :                     ;
(1)  305/FFFFFFFFFFFF018E :                     ; 32X: Clear the RV bit manually AFTER calling this.
(1)  306/FFFFFFFFFFFF018E :                     ; --------------------------------------------------------
(1)  307/FFFFFFFFFFFF018E :                     
(1)  308/FFFFFFFFFFFF018E :                     gemaDmaResume:
(1)  312/FFFFFFFFFFFF018E : 2F07                		move.l	d7,-(sp)
(1)  313/FFFFFFFFFFFF0190 : 6100 FF4A           		bsr	sndLockZ80
(1)  314/FFFFFFFFFFFF0194 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Unblock flag for Z80
         FFFFFFFFFFFF019A : 002F             
(1)  315/FFFFFFFFFFFF019C : 6100 FF52           		bsr	sndUnlockZ80
(1)  316/FFFFFFFFFFFF01A0 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  317/FFFFFFFFFFFF01A4 : 51CF FFFE           		dbf	d7,*
(1)  318/FFFFFFFFFFFF01A8 : 2E1F                		move.l	(sp)+,d7
(1)  319/FFFFFFFFFFFF01AA : 4E75                		rts
(1)  321/FFFFFFFFFFFF01AC :                     
(1)  322/FFFFFFFFFFFF01AC :                     ; ====================================================================
(1)  323/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  324/FFFFFFFFFFFF01AC :                     ; Subroutines
(1)  325/FFFFFFFFFFFF01AC :                     ;
(1)  326/FFFFFFFFFFFF01AC :                     ; USER Sound calls are here
(1)  327/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  328/FFFFFFFFFFFF01AC :                     
(1)  329/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF01AC :                     ; gemaTest
(1)  331/FFFFFFFFFFFF01AC :                     ;
(1)  332/FFFFFFFFFFFF01AC :                     ; For TESTING only.
(1)  333/FFFFFFFFFFFF01AC :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF01AC :                     
(1)  335/FFFFFFFFFFFF01AC :                     gemaTest:
(1)  336/FFFFFFFFFFFF01AC : 6100 FF4C           		bsr	sndReq_Enter
(1)  337/FFFFFFFFFFFF01B0 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  338/FFFFFFFFFFFF01B4 : 6192                		bsr	sndReq_scmd
(1)  339/FFFFFFFFFFFF01B6 : 6000 FF76           		bra 	sndReq_Exit
(1)  340/FFFFFFFFFFFF01BA :                     
(1)  341/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  342/FFFFFFFFFFFF01BA :                     ; gemaSetMasterList
(1)  343/FFFFFFFFFFFF01BA :                     ;
(1)  344/FFFFFFFFFFFF01BA :                     ; Sets the Master tracklist location, data can be stored
(1)  345/FFFFFFFFFFFF01BA :                     ; on ROM, RAM* and Word-RAM*
(1)  346/FFFFFFFFFFFF01BA :                     ;
(1)  347/FFFFFFFFFFFF01BA :                     ; Input:
(1)  348/FFFFFFFFFFFF01BA :                     ; a0 | 68k pointer
(1)  349/FFFFFFFFFFFF01BA :                     ;
(1)  350/FFFFFFFFFFFF01BA :                     ; Notes:
(1)  351/FFFFFFFFFFFF01BA :                     ; - STOP ALL TRACKS WITH gemaStopAll BEFORE
(1)  352/FFFFFFFFFFFF01BA :                     ;   CALLING THIS.
(1)  353/FFFFFFFFFFFF01BA :                     ;
(1)  354/FFFFFFFFFFFF01BA :                     ; * RAM data (SCD/CD32X when using Stamps):
(1)  355/FFFFFFFFFFFF01BA :                     ;   Requires calling Sound_Update manually as a
(1)  356/FFFFFFFFFFFF01BA :                     ;   workaround for the Z80's limitation of not being
(1)  357/FFFFFFFFFFFF01BA :                     ;   able to read from RAM
(1)  358/FFFFFFFFFFFF01BA :                     ;   (BUT it can WRITE into as normal)
(1)  359/FFFFFFFFFFFF01BA :                     ; * Word-RAM (SCD/CD32X):
(1)  360/FFFFFFFFFFFF01BA :                     ;   Make sure the Word-RAM permission is set to MAIN-CPU.
(1)  361/FFFFFFFFFFFF01BA :                     ;
(1)  362/FFFFFFFFFFFF01BA :                     ; MUST USE THE MACROS TO PROPERLY SETUP THE TRACK LIST:
(1)  363/FFFFFFFFFFFF01BA :                     ; 	gemaList Tracklist_Pointer
(1)  364/FFFFFFFFFFFF01BA :                     ; 	gemaTrk 0,2,gtrk_Test
(1)  365/FFFFFFFFFFFF01BA :                     ; 	; other tracks go here
(1)  366/FFFFFFFFFFFF01BA :                     ; --------------------------------------------------------
(1)  367/FFFFFFFFFFFF01BA :                     
(1)  368/FFFFFFFFFFFF01BA :                     gemaSetMasterList:
(1)  369/FFFFFFFFFFFF01BA : 6100 FF3E           		bsr	sndReq_Enter
(1)  370/FFFFFFFFFFFF01BE : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  371/FFFFFFFFFFFF01C2 : 6184                		bsr	sndReq_scmd
(1)  372/FFFFFFFFFFFF01C4 : 2E08                		move.l	a0,d7
(1)  373/FFFFFFFFFFFF01C6 : 618E                		bsr	sndReq_slong
(1)  374/FFFFFFFFFFFF01C8 : 6000 FF64           		bra 	sndReq_Exit
(1)  375/FFFFFFFFFFFF01CC :                     
(1)  376/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  377/FFFFFFFFFFFF01CC :                     ; gemaPlaySeq
(1)  378/FFFFFFFFFFFF01CC :                     ;
(1)  379/FFFFFFFFFFFF01CC :                     ; Play a sequence with arguments
(1)  380/FFFFFFFFFFFF01CC :                     ;
(1)  381/FFFFFFFFFFFF01CC :                     ; Input:
(1)  382/FFFFFFFFFFFF01CC :                     ; d0.b | Playback slot number
(1)  383/FFFFFFFFFFFF01CC :                     ;        If -1: Auto-search free slot
(1)  384/FFFFFFFFFFFF01CC :                     ; d1.b | Sequence number
(1)  385/FFFFFFFFFFFF01CC :                     ; d2.b | Starting block
(1)  386/FFFFFFFFFFFF01CC :                     ; --------------------------------------------------------
(1)  387/FFFFFFFFFFFF01CC :                     
(1)  388/FFFFFFFFFFFF01CC :                     gemaPlaySeq:
(1)  389/FFFFFFFFFFFF01CC : 6100 FF2C           		bsr	sndReq_Enter
(1)  390/FFFFFFFFFFFF01D0 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  391/FFFFFFFFFFFF01D4 : 6100 FF72           		bsr	sndReq_scmd
(1)  392/FFFFFFFFFFFF01D8 : 1E01                		move.b	d1,d7		; d1.b Seq number
(1)  393/FFFFFFFFFFFF01DA : 6186                		bsr	sndReq_sbyte
(1)  394/FFFFFFFFFFFF01DC : 1E02                		move.b	d2,d7		; d2.b Block <--
(1)  395/FFFFFFFFFFFF01DE : 6182                		bsr	sndReq_sbyte
(1)  396/FFFFFFFFFFFF01E0 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  397/FFFFFFFFFFFF01E2 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  398/FFFFFFFFFFFF01E6 : 6000 FF46           		bra 	sndReq_Exit
(1)  399/FFFFFFFFFFFF01EA :                     
(1)  400/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  401/FFFFFFFFFFFF01EA :                     ; gemaStopSeq
(1)  402/FFFFFFFFFFFF01EA :                     ;
(1)  403/FFFFFFFFFFFF01EA :                     ; Stops tracks with the same sequence number
(1)  404/FFFFFFFFFFFF01EA :                     ;
(1)  405/FFFFFFFFFFFF01EA :                     ; Input:
(1)  406/FFFFFFFFFFFF01EA :                     ; d0.b | Playback slot number
(1)  407/FFFFFFFFFFFF01EA :                     ;        If -1: Stop all slots
(1)  408/FFFFFFFFFFFF01EA :                     ; d1.b | Sequence number to search for
(1)  409/FFFFFFFFFFFF01EA :                     ;        If -1: Stop tracks with any sequence
(1)  410/FFFFFFFFFFFF01EA :                     ; --------------------------------------------------------
(1)  411/FFFFFFFFFFFF01EA :                     
(1)  412/FFFFFFFFFFFF01EA :                     gemaStopSeq:
(1)  413/FFFFFFFFFFFF01EA : 6100 FF0E           		bsr	sndReq_Enter
(1)  414/FFFFFFFFFFFF01EE : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  415/FFFFFFFFFFFF01F2 : 6100 FF54           		bsr	sndReq_scmd
(1)  416/FFFFFFFFFFFF01F6 : 1E01                		move.b	d1,d7		; d0.b Seq number
(1)  417/FFFFFFFFFFFF01F8 : 6100 FF68           		bsr	sndReq_sbyte
(1)  418/FFFFFFFFFFFF01FC : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  419/FFFFFFFFFFFF01FE : 6100 FF62           		bsr	sndReq_sbyte
(1)  420/FFFFFFFFFFFF0202 : 6000 FF2A           		bra 	sndReq_Exit
(1)  421/FFFFFFFFFFFF0206 :                     
(1)  422/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  423/FFFFFFFFFFFF0206 :                     ; gemaStopAll
(1)  424/FFFFFFFFFFFF0206 :                     ;
(1)  425/FFFFFFFFFFFF0206 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  426/FFFFFFFFFFFF0206 :                     ; --------------------------------------------------------
(1)  427/FFFFFFFFFFFF0206 :                     
(1)  428/FFFFFFFFFFFF0206 :                     gemaStopAll:
(1)  429/FFFFFFFFFFFF0206 : 6100 FEF2           		bsr	sndReq_Enter
(1)  430/FFFFFFFFFFFF020A : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  431/FFFFFFFFFFFF020E : 6100 FF38           		bsr	sndReq_scmd
(1)  432/FFFFFFFFFFFF0212 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  433/FFFFFFFFFFFF0214 : 6100 FF4C           		bsr	sndReq_sbyte
(1)  434/FFFFFFFFFFFF0218 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  435/FFFFFFFFFFFF021A : 6100 FF46           		bsr	sndReq_sbyte
(1)  436/FFFFFFFFFFFF021E : 6000 FF0E           		bra 	sndReq_Exit
(1)  437/FFFFFFFFFFFF0222 :                     
(1)  438/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  439/FFFFFFFFFFFF0222 :                     ; gemaFadeSeq
(1)  440/FFFFFFFFFFFF0222 :                     ;
(1)  441/FFFFFFFFFFFF0222 :                     ; Set Master volume to a track slot.
(1)  442/FFFFFFFFFFFF0222 :                     ;
(1)  443/FFFFFFFFFFFF0222 :                     ; Input:
(1)  444/FFFFFFFFFFFF0222 :                     ; d0.b | Playback slot number
(1)  445/FFFFFFFFFFFF0222 :                     ;        If -1: Apply to all slots
(1)  446/FFFFFFFFFFFF0222 :                     ; d1.b | Target volume
(1)  447/FFFFFFFFFFFF0222 :                     ;
(1)  448/FFFFFFFFFFFF0222 :                     ; Notes:
(1)  449/FFFFFFFFFFFF0222 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  450/FFFFFFFFFFFF0222 :                     ; - In v1.0 this only works during new notes on playback.
(1)  451/FFFFFFFFFFFF0222 :                     ; --------------------------------------------------------
(1)  452/FFFFFFFFFFFF0222 :                     
(1)  453/FFFFFFFFFFFF0222 :                     gemaFadeSeq:
(1)  454/FFFFFFFFFFFF0222 : 6100 FED6           		bsr	sndReq_Enter
(1)  455/FFFFFFFFFFFF0226 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  456/FFFFFFFFFFFF022A : 6100 FF1C           		bsr	sndReq_scmd
(1)  457/FFFFFFFFFFFF022E : 1E01                		move.b	d1,d7		; d0.b Target volume
(1)  458/FFFFFFFFFFFF0230 : 6100 FF30           		bsr	sndReq_sbyte
(1)  459/FFFFFFFFFFFF0234 : 1E00                		move.b	d0,d7		; d1.b Slot
(1)  460/FFFFFFFFFFFF0236 : 6100 FF2A           		bsr	sndReq_sbyte
(1)  461/FFFFFFFFFFFF023A : 6000 FEF2           		bra 	sndReq_Exit
(1)  462/FFFFFFFFFFFF023E :                     
(1)  463/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  464/FFFFFFFFFFFF023E :                     ; gemaSetSeqVol
(1)  465/FFFFFFFFFFFF023E :                     ;
(1)  466/FFFFFFFFFFFF023E :                     ; Set Master volume to a Seq slot.
(1)  467/FFFFFFFFFFFF023E :                     ;
(1)  468/FFFFFFFFFFFF023E :                     ; Input:
(1)  469/FFFFFFFFFFFF023E :                     ; d0.b | Playback slot number
(1)  470/FFFFFFFFFFFF023E :                     ;        If -1: Set to all slots
(1)  471/FFFFFFFFFFFF023E :                     ; d1.b | Master volume:
(1)  472/FFFFFFFFFFFF023E :                     ;        $00-max $40-min
(1)  473/FFFFFFFFFFFF023E :                     ;
(1)  474/FFFFFFFFFFFF023E :                     ; Notes:
(1)  475/FFFFFFFFFFFF023E :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  476/FFFFFFFFFFFF023E :                     ; - In v1.0 this only works on (re)start
(1)  477/FFFFFFFFFFFF023E :                     ;   or during new notes on playback.
(1)  478/FFFFFFFFFFFF023E :                     ; --------------------------------------------------------
(1)  479/FFFFFFFFFFFF023E :                     
(1)  480/FFFFFFFFFFFF023E :                     gemaSetSeqVol:
(1)  481/FFFFFFFFFFFF023E : 6100 FEBA           		bsr	sndReq_Enter
(1)  482/FFFFFFFFFFFF0242 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  483/FFFFFFFFFFFF0246 : 6100 FF00           		bsr	sndReq_scmd
(1)  484/FFFFFFFFFFFF024A : 1E01                		move.b	d1,d7		; d1.b Volume data <--
(1)  485/FFFFFFFFFFFF024C : 6100 FF14           		bsr	sndReq_sbyte
(1)  486/FFFFFFFFFFFF0250 : 1E00                		move.b	d0,d7		; d0.b Slot
(1)  487/FFFFFFFFFFFF0252 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  488/FFFFFFFFFFFF0256 : 6000 FED6           		bra 	sndReq_Exit
(1)  489/FFFFFFFFFFFF025A :                     
(1)  490/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  491/FFFFFFFFFFFF025A :                     ; gemaSetBeats
(1)  492/FFFFFFFFFFFF025A :                     ;
(1)  493/FFFFFFFFFFFF025A :                     ; Sets global sub-beats, affects ALL tracks.
(1)  494/FFFFFFFFFFFF025A :                     ;
(1)  495/FFFFFFFFFFFF025A :                     ; Input:
(1)  496/FFFFFFFFFFFF025A :                     ; d0.w | sub-beats
(1)  497/FFFFFFFFFFFF025A :                     ;
(1)  498/FFFFFFFFFFFF025A :                     ; Note:
(1)  499/FFFFFFFFFFFF025A :                     ; This gets auto-converted if Z80 is in PAL-speed
(1)  500/FFFFFFFFFFFF025A :                     ; mode.
(1)  501/FFFFFFFFFFFF025A :                     ; --------------------------------------------------------
(1)  502/FFFFFFFFFFFF025A :                     
(1)  503/FFFFFFFFFFFF025A :                     ; Ex. sub-beats 215 is tempo 125 on NTSC speed
(1)  504/FFFFFFFFFFFF025A :                     
(1)  505/FFFFFFFFFFFF025A :                     gemaSetBeats:
(1)  506/FFFFFFFFFFFF025A : 6100 FE9E           		bsr	sndReq_Enter
(1)  507/FFFFFFFFFFFF025E : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  508/FFFFFFFFFFFF0262 : 6100 FEE4           		bsr	sndReq_scmd
(1)  509/FFFFFFFFFFFF0266 : 3E00                		move.w	d0,d7
(1)  510/FFFFFFFFFFFF0268 : 6100 FEF4           		bsr	sndReq_sword
(1)  511/FFFFFFFFFFFF026C : 6000 FEC0           		bra 	sndReq_Exit
(1)  512/FFFFFFFFFFFF0270 :                     
     195/FFFFFFFFFFFF0270 :                     		include	"system/md/video.asm"
(1)    1/FFFFFFFFFFFF0270 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0270 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0270 :                     
(1)    6/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0270 :                     ; Settings
(1)    9/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0270 :                     
(1)   11/FFFFFFFFFFFF0270 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/FFFFFFFFFFFF0270 : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/FFFFFFFFFFFF0270 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/FFFFFFFFFFFF0270 :                     
(1)   15/FFFFFFFFFFFF0270 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/FFFFFFFFFFFF0270 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/FFFFFFFFFFFF0270 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/FFFFFFFFFFFF0270 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/FFFFFFFFFFFF0270 : =$6000               DEF_PrintPal		equ $6000
(1)   20/FFFFFFFFFFFF0270 :                     
(1)   21/FFFFFFFFFFFF0270 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/FFFFFFFFFFFF0270 :                     
(1)   23/FFFFFFFFFFFF0270 :                     ; ===================================================================
(1)   24/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   25/FFFFFFFFFFFF0270 :                     ; Variables
(1)   26/FFFFFFFFFFFF0270 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0270 :                     
(1)   28/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   29/FFFFFFFFFFFF0270 :                     ; Use these if you are not planning changing
(1)   30/FFFFFFFFFFFF0270 :                     ; the VRAM locations of the scrolling area(s)
(1)   31/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   32/FFFFFFFFFFFF0270 : =$C000               DEF_VRAM_FG		equ $C000
(1)   33/FFFFFFFFFFFF0270 : =$E000               DEF_VRAM_BG		equ $E000
(1)   34/FFFFFFFFFFFF0270 : =$D000               DEF_VRAM_WD		equ $D000
(1)   35/FFFFFFFFFFFF0270 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   36/FFFFFFFFFFFF0270 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   37/FFFFFFFFFFFF0270 :                     
(1)   38/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   39/FFFFFFFFFFFF0270 :                     ; H sizes for the current layer
(1)   40/FFFFFFFFFFFF0270 :                     ;
(1)   41/FFFFFFFFFFFF0270 :                     ; Note:
(1)   42/FFFFFFFFFFFF0270 :                     ; WINDOW's width changes between H32 and H40
(1)   43/FFFFFFFFFFFF0270 :                     ; resolution modes.
(1)   44/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   45/FFFFFFFFFFFF0270 : =$40                 DEF_HSIZE_32		equ $040
(1)   46/FFFFFFFFFFFF0270 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   47/FFFFFFFFFFFF0270 : =$100                DEF_HSIZE_128		equ $100
(1)   48/FFFFFFFFFFFF0270 :                     
(1)   49/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   50/FFFFFFFFFFFF0270 :                     ; VDP registers
(1)   51/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   52/FFFFFFFFFFFF0270 :                     ; $80
(1)   53/FFFFFFFFFFFF0270 : =$2                  HVStop			equ $02
(1)   54/FFFFFFFFFFFF0270 : =$10                 HintEnbl		equ $10
(1)   55/FFFFFFFFFFFF0270 : =$1                  bitHVStop		equ 1
(1)   56/FFFFFFFFFFFF0270 : =$4                  bitHintEnbl		equ 4
(1)   57/FFFFFFFFFFFF0270 :                     ; $81
(1)   58/FFFFFFFFFFFF0270 : =$40                 DispEnbl 		equ $40
(1)   59/FFFFFFFFFFFF0270 : =$20                 VintEnbl 		equ $20
(1)   60/FFFFFFFFFFFF0270 : =$10                 DmaEnbl			equ $10
(1)   61/FFFFFFFFFFFF0270 : =$6                  bitDispEnbl		equ 6
(1)   62/FFFFFFFFFFFF0270 : =$5                  bitVintEnbl		equ 5
(1)   63/FFFFFFFFFFFF0270 : =$4                  bitDmaEnbl		equ 4
(1)   64/FFFFFFFFFFFF0270 : =$3                  bitV30			equ 3
(1)   65/FFFFFFFFFFFF0270 :                     
(1)   66/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   67/FFFFFFFFFFFF0270 :                     ; VDP VRAM bits
(1)   68/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   69/FFFFFFFFFFFF0270 :                     ; BYTE read:
(1)   70/FFFFFFFFFFFF0270 : =$7                  bitAttrPrio		equ 7
(1)   71/FFFFFFFFFFFF0270 : =$4                  bitAttrV		equ 4
(1)   72/FFFFFFFFFFFF0270 : =$3                  bitAttrH		equ 3
(1)   73/FFFFFFFFFFFF0270 :                     ; WORD read:
(1)   74/FFFFFFFFFFFF0270 : =$8000               AttrPrio		equ $8000
(1)   75/FFFFFFFFFFFF0270 : =$1000               AttrV			equ $1000
(1)   76/FFFFFFFFFFFF0270 : =$800                AttrH			equ $0800
(1)   77/FFFFFFFFFFFF0270 :                     
(1)   78/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   79/FFFFFFFFFFFF0270 :                     ; vdp_ctrl READ bits
(1)   80/FFFFFFFFFFFF0270 :                     ; Read as WORD
(1)   81/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   82/FFFFFFFFFFFF0270 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   83/FFFFFFFFFFFF0270 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   84/FFFFFFFFFFFF0270 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   85/FFFFFFFFFFFF0270 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   86/FFFFFFFFFFFF0270 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   87/FFFFFFFFFFFF0270 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   88/FFFFFFFFFFFF0270 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   89/FFFFFFFFFFFF0270 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   90/FFFFFFFFFFFF0270 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   91/FFFFFFFFFFFF0270 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   92/FFFFFFFFFFFF0270 :                     
(1)   93/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)   94/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)   95/FFFFFFFFFFFF0270 :                     ; Structs
(1)   96/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)   97/FFFFFFFFFFFF0270 :                     
(1)   98/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)   99/FFFFFFFFFFFF0270 :                     ; RAM_PalFadeList
(1)  100/       0 :                     palfd			struct
(1)  101/       0 :                     req			ds.b 1
(1)  102/       1 :                     delay			ds.b 1
(1)  103/       2 :                     start			ds.b 1
(1)  104/       3 :                     incr			ds.b 1
(1)  105/       4 :                     target			ds.b 1
(1)  106/       5 :                     timer			ds.b 1
(1)  107/       6 :                     num			ds.w 1
(1)  108/       8 :                     ; len		ds.l 0
(1)  109/FFFFFFFFFFFF0270 : =$8                  			endstruct
(1)  110/FFFFFFFFFFFF0270 :                     
(1)  111/FFFFFFFFFFFF0270 :                     ; ------------------------------------------------
(1)  112/FFFFFFFFFFFF0270 :                     ; RAM_MdMcd_Stamps
(1)  113/FFFFFFFFFFFF0270 :                     
(1)  114/       0 :                     mdstmp		struct
(1)  115/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  116/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  117/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  118/       6 :                     vramSize	ds.w 1
(1)  119/       8 :                     vramLen		ds.w 1		; temporals
(1)  120/       A :                     vramIncr	ds.w 1		; ''
(1)  121/       C :                     stmpoutb	ds.w 1
(1)  122/       E :                     currOutFlip	ds.w 1
(1)  123/      10 :                     fdrop		ds.w 1
(1)  124/      12 :                     cellstorage	ds.l 1
(1)  125/      16 :                     dotIncr		ds.l 1
(1)  126/      1A :                     buffIncr	ds.l 1
(1)  127/      1E :                     ; len		ds.l 0
(1)  128/FFFFFFFFFFFF0270 : =$1E                 		endstruct
(1)  129/FFFFFFFFFFFF0270 :                     
(1)  130/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  131/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  132/FFFFFFFFFFFF0270 :                     ; RAM section
(1)  133/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  134/FFFFFFFFFFFF0270 :                     
(1)  135/FFFFFFFFFFFF0270 : (MACRO)              			memory RAM_MdVideo
(1)  135/FFFFFFFFFFFF0270 : =$FFFFFFFFFFFF0270   GLBL_LASTPC     := *
(1)  135/    2B86 :                                     dephase
(1)  135/FFFFFFFFFFFFCC1E :                                     phase RAM_MDVIDEO
(1)  135/FFFFFFFFFFFFCC1E : =$FFFFFFFFFFFFCC1E   GLBL_LASTORG    := *
(1)  136/FFFFFFFFFFFFCC1E :                     	; Some 32X labels are in system/shared.asm
(1)  137/FFFFFFFFFFFFCC1E :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  138/FFFFFFFFFFFFCC5E :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  139/FFFFFFFFFFFFCDDE :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  140/FFFFFFFFFFFFD05E :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  141/FFFFFFFFFFFFD41E :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  142/FFFFFFFFFFFFD46E :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  143/FFFFFFFFFFFFD96E :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  144/FFFFFFFFFFFFD9EE :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  145/FFFFFFFFFFFFDA6E :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  146/FFFFFFFFFFFFDA6E :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  147/FFFFFFFFFFFFDA70 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  148/FFFFFFFFFFFFDA72 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  149/FFFFFFFFFFFFDA78 :                     
(1)  150/FFFFFFFFFFFFDA78 :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  151/FFFFFFFFFFFFDA78 :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  152/FFFFFFFFFFFFDBF8 :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  153/FFFFFFFFFFFFDBFC :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  154/FFFFFFFFFFFFDBFE :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  155/FFFFFFFFFFFFDC00 :                     RAM_SetPrntVram		ds.w 1				; Default VRAM location for ASCII text used by Video_Print
(1)  156/FFFFFFFFFFFFDC02 :                     RAM_SetPrntVramW	ds.w 1				; '' but for wider text
(1)  157/FFFFFFFFFFFFDC04 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  158/FFFFFFFFFFFFDC06 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  159/FFFFFFFFFFFFDC08 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  160/FFFFFFFFFFFFDC0A :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  161/FFFFFFFFFFFFDC0C :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  162/FFFFFFFFFFFFDC0E :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  163/FFFFFFFFFFFFDC10 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  164/FFFFFFFFFFFFDC12 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  165/FFFFFFFFFFFFDC14 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  166/FFFFFFFFFFFFDC16 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  167/FFFFFFFFFFFFDC18 :                     sizeof_mdvid		ds.l 0
(1)  168/FFFFFFFFFFFFDC1C : (MACRO)              			endmemory
(1)  168/    3B84 :                     .here:          dephase
(1)  168/    3B84 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  168/FFFFFFFFFFFF0270 :                                     phase GLBL_LASTPC
(1)  169/FFFFFFFFFFFF0270 :                     
(1)  170/FFFFFFFFFFFF0270 :                     ; ====================================================================
(1)  171/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  172/FFFFFFFFFFFF0270 :                     ; Initialize Genesis video
(1)  173/FFFFFFFFFFFF0270 :                     ;
(1)  174/FFFFFFFFFFFF0270 :                     ; Uses:
(1)  175/FFFFFFFFFFFF0270 :                     ; d5-d7/a5-a6
(1)  176/FFFFFFFFFFFF0270 :                     ; ----------------------------------------------------------------
(1)  177/FFFFFFFFFFFF0270 :                     
(1)  178/FFFFFFFFFFFF0270 :                     Video_Init:
(1)  179/FFFFFFFFFFFF0270 : 4DF8 CC1E           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  180/FFFFFFFFFFFF0274 : 7C00                		moveq	#0,d6
(1)  181/FFFFFFFFFFFF0276 : 3E3C 0FF9           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  182/FFFFFFFFFFFF027A :                     .clr_ram:
(1)  183/FFFFFFFFFFFF027A : 1CC6                		move.b	d6,(a6)+
(1)  184/FFFFFFFFFFFF027C : 51CF FFFC           		dbf	d7,.clr_ram
(1)  185/FFFFFFFFFFFF0280 : 4DF8 DA78           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  186/FFFFFFFFFFFF0284 : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  187/FFFFFFFFFFFF0288 : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  188/FFFFFFFFFFFF028C :                     .copy_dma:
(1)  189/FFFFFFFFFFFF028C : 2CD5                		move.l	(a5),(a6)+
(1)  190/FFFFFFFFFFFF028E : 2CED 0004           		move.l	4(a5),(a6)+
(1)  191/FFFFFFFFFFFF0292 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  192/FFFFFFFFFFFF0296 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  193/FFFFFFFFFFFF029A : 51CF FFF0           		dbf	d7,.copy_dma
(1)  194/FFFFFFFFFFFF029E : 4DF8 CC5E           		lea	(RAM_SprMapList).w,a6
(1)  195/FFFFFFFFFFFF02A2 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  196/FFFFFFFFFFFF02A6 :                     .clr_d:
(1)  197/FFFFFFFFFFFF02A6 : 429E                		clr.l	(a6)+
(1)  198/FFFFFFFFFFFF02A8 : 429E                		clr.l	(a6)+
(1)  199/FFFFFFFFFFFF02AA : 429E                		clr.l	(a6)+
(1)  200/FFFFFFFFFFFF02AC : 429E                		clr.l	(a6)+
(1)  201/FFFFFFFFFFFF02AE : 51CF FFF6           		dbf	d7,.clr_d
(1)  202/FFFFFFFFFFFF02B2 :                     
(1)  203/FFFFFFFFFFFF02B2 : 4278 DBFC           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  204/FFFFFFFFFFFF02B6 : 4DF8 CC1E           		lea	(RAM_PalFadeList).w,a6
(1)  205/FFFFFFFFFFFF02BA : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  206/FFFFFFFFFFFF02BE :                     .clr_preq:
(1)  207/FFFFFFFFFFFF02BE : 429E                		clr.l	(a6)+
(1)  208/FFFFFFFFFFFF02C0 : 429E                		clr.l	(a6)+
(1)  209/FFFFFFFFFFFF02C2 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  219/FFFFFFFFFFFF02C6 : 4CBA 000F 002C      		movem.w	.def_regset(pc),d0-d3
(1)  220/FFFFFFFFFFFF02CC : 48B8 000F DC10      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  221/FFFFFFFFFFFF02D2 : 23F8 DC10 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
         FFFFFFFFFFFF02D8 : 0004             
(1)  222/FFFFFFFFFFFF02DA : 23F8 DC14 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
         FFFFFFFFFFFF02E0 : 0004             
(1)  223/FFFFFFFFFFFF02E2 : 601C                		bra	Video_Default
(1)  224/FFFFFFFFFFFF02E4 :                     
(1)  225/FFFFFFFFFFFF02E4 :                     ; --------------------------------------------------------
(1)  226/FFFFFFFFFFFF02E4 :                     ; DMA blast base entry
(1)  227/FFFFFFFFFFFF02E4 :                     .dma_entry:
(1)  228/FFFFFFFFFFFF02E4 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  229/FFFFFFFFFFFF02E8 : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  230/FFFFFFFFFFFF02EE : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  231/FFFFFFFFFFFF02F2 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  232/FFFFFFFFFFFF02F4 :                     		align 2
(1)  233/FFFFFFFFFFFF02F6 :                     .def_regset:
(1)  234/FFFFFFFFFFFF02F6 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
         FFFFFFFFFFFF02FC : 8C00             
(1)  235/FFFFFFFFFFFF02FE :                     		align 2
(1)  236/FFFFFFFFFFFF0300 :                     
(1)  237/FFFFFFFFFFFF0300 :                     ; --------------------------------------------------------
(1)  238/FFFFFFFFFFFF0300 :                     ; Video_Default
(1)  239/FFFFFFFFFFFF0300 :                     ; --------------------------------------------------------
(1)  240/FFFFFFFFFFFF0300 :                     
(1)  241/FFFFFFFFFFFF0300 :                     Video_Default:
(1)  243/FFFFFFFFFFFF0300 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1)  244/FFFFFFFFFFFF0304 : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1)  245/FFFFFFFFFFFF0308 :                     .clr_stamps:
(1)  246/FFFFFFFFFFFF0308 :                     	rept $20/4
(1)  247/FFFFFFFFFFFF0308 :                     		clr.l	(a6)+
(1)  248/FFFFFFFFFFFF0308 :                     	endm
(1)  247/FFFFFFFFFFFF0308 : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF030A : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF030C : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF030E : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF0310 : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF0312 : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF0314 : 429E                		clr.l	(a6)+
(1)  247/FFFFFFFFFFFF0316 : 429E                		clr.l	(a6)+
(1)  249/FFFFFFFFFFFF0318 : 51CF FFEE           		dbf	d7,.clr_stamps
(1)  251/FFFFFFFFFFFF031C : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
         FFFFFFFFFFFF0322 : 00C0 0004          
(1)  252/FFFFFFFFFFFF0326 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
         FFFFFFFFFFFF032C : 0004             
(1)  253/FFFFFFFFFFFF032E : 31FC C000 DC04      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  254/FFFFFFFFFFFF0334 : 31FC E000 DC06      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  255/FFFFFFFFFFFF033A : 31FC D000 DC08      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  256/FFFFFFFFFFFF0340 : 31FC F800 DC0A      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  257/FFFFFFFFFFFF0346 : 31FC FC00 DC0C      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  258/FFFFFFFFFFFF034C : 31FC 1000 DC0E      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  259/FFFFFFFFFFFF0352 : 6100 044A           		bsr	Video_UpdMapVram
(1)  260/FFFFFFFFFFFF0356 : 6100 0498           		bsr	Video_UpdSprHVram
(1)  261/FFFFFFFFFFFF035A : 7001                		moveq	#1,d0					; Size H64 V32
(1)  262/FFFFFFFFFFFF035C : 7200                		moveq	#0,d1
(1)  263/FFFFFFFFFFFF035E : 6100 04CA           		bsr	Video_SetMapSize
(1)  264/FFFFFFFFFFFF0362 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  265/FFFFFFFFFFFF0364 : 7200                		moveq	#0,d1
(1)  266/FFFFFFFFFFFF0366 : 6000 03E2           		bra	Video_Resolution
(1)  267/FFFFFFFFFFFF036A :                     
(1)  268/FFFFFFFFFFFF036A :                     ; ====================================================================
(1)  269/FFFFFFFFFFFF036A :                     ; --------------------------------------------------------
(1)  270/FFFFFFFFFFFF036A :                     ; Video_Render
(1)  271/FFFFFFFFFFFF036A :                     ;
(1)  272/FFFFFFFFFFFF036A :                     ; Call this during VBlank to update the VDP visuals
(1)  273/FFFFFFFFFFFF036A :                     ; and process the DMA BLAST list, also resets a
(1)  274/FFFFFFFFFFFF036A :                     ; few variables.
(1)  275/FFFFFFFFFFFF036A :                     ; (This is already called on System_Render)
(1)  276/FFFFFFFFFFFF036A :                     ;
(1)  277/FFFFFFFFFFFF036A :                     ; Uses:
(1)  278/FFFFFFFFFFFF036A :                     ; ALL
(1)  279/FFFFFFFFFFFF036A :                     ; --------------------------------------------------------
(1)  280/FFFFFFFFFFFF036A :                     
(1)  281/FFFFFFFFFFFF036A :                     Video_Render:
(1)  282/FFFFFFFFFFFF036A : 6100 0368           		bsr	Video_DmaOn
(1)  283/FFFFFFFFFFFF036E : 6100 151C           		bsr	System_DmaEnter_RAM
(1)  284/FFFFFFFFFFFF0372 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  285/FFFFFFFFFFFF0378 : 3E38 DC0A           		move.w	(RAM_VdpVramSpr).w,d7
(1)  286/FFFFFFFFFFFF037C : 3A38 DC0C           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  287/FFFFFFFFFFFF0380 : 3C07                		move.w	d7,d6
(1)  288/FFFFFFFFFFFF0382 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  289/FFFFFFFFFFFF0386 : 0047 4000           		ori.w	#$4000,d7
(1)  290/FFFFFFFFFFFF038A : E55E                		rol.w	#2,d6
(1)  291/FFFFFFFFFFFF038C : 0246 0003           		andi.w	#%11,d6
(1)  292/FFFFFFFFFFFF0390 : 8C7C 0080           		or.w	#$80,d6
(1)  293/FFFFFFFFFFFF0394 : 3805                		move.w	d5,d4
(1)  294/FFFFFFFFFFFF0396 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  295/FFFFFFFFFFFF039A : 0045 4000           		ori.w	#$4000,d5
(1)  296/FFFFFFFFFFFF039E : E55C                		rol.w	#2,d4
(1)  297/FFFFFFFFFFFF03A0 : 0244 0003           		andi.w	#%11,d4
(1)  298/FFFFFFFFFFFF03A4 : 887C 0080           		or.w	#$80,d4
(1)  299/FFFFFFFFFFFF03A8 : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  300/FFFFFFFFFFFF03AE : 2CBC 96EA 9537      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  301/FFFFFFFFFFFF03B4 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  302/FFFFFFFFFFFF03B8 : 3C87                		move.w	d7,(a6)
(1)  303/FFFFFFFFFFFF03BA : 3F06                		move.w	d6,-(sp)
(1)  304/FFFFFFFFFFFF03BC : 3C9F                		move.w	(sp)+,(a6)
(1)  305/FFFFFFFFFFFF03BE : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  306/FFFFFFFFFFFF03C4 : 2CBC 96E8 952F      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  307/FFFFFFFFFFFF03CA : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  308/FFFFFFFFFFFF03CE : 3C85                		move.w	d5,(a6)
(1)  309/FFFFFFFFFFFF03D0 : 3F04                		move.w	d4,-(sp)
(1)  310/FFFFFFFFFFFF03D2 : 3C9F                		move.w	(sp)+,(a6)
(1)  311/FFFFFFFFFFFF03D4 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  312/FFFFFFFFFFFF03DA : 2CBC 96EA 950F      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  313/FFFFFFFFFFFF03E0 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  314/FFFFFFFFFFFF03E4 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  315/FFFFFFFFFFFF03E8 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  316/FFFFFFFFFFFF03EC : 3C9F                		move.w	(sp)+,(a6)
(1)  317/FFFFFFFFFFFF03EE : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  318/FFFFFFFFFFFF03F4 : 2CBC 96EC 95B7      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  319/FFFFFFFFFFFF03FA : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  320/FFFFFFFFFFFF03FE : 3CBC C000           		move.w	#$C000,(a6)
(1)  321/FFFFFFFFFFFF0402 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  322/FFFFFFFFFFFF0406 : 3C9F                		move.w	(sp)+,(a6)
(1)  323/FFFFFFFFFFFF0408 : 6100 1486           		bsr	System_DmaExit_RAM
(1)  324/FFFFFFFFFFFF040C : 6100 02D2           		bsr	Video_DmaOff
(1)  325/FFFFFFFFFFFF0410 :                     
(1)  326/FFFFFFFFFFFF0410 :                     ; --------------------------------------------------------
(1)  327/FFFFFFFFFFFF0410 :                     ; Struct:
(1)  328/FFFFFFFFFFFF0410 :                     ; dc.w $94xx,$93xx		; Size
(1)  329/FFFFFFFFFFFF0410 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  330/FFFFFFFFFFFF0410 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  331/FFFFFFFFFFFF0410 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  332/FFFFFFFFFFFF0410 : 4A78 DA70           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  333/FFFFFFFFFFFF0414 : 6650                		bne.s	.exit
(1)  334/FFFFFFFFFFFF0416 : 4A78 DA6E           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  335/FFFFFFFFFFFF041A : 674A                		beq.s	.exit
(1)  336/FFFFFFFFFFFF041C : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  337/FFFFFFFFFFFF0422 : 47F8 DA78           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  338/FFFFFFFFFFFF0426 : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  339/FFFFFFFFFFFF042A : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  340/FFFFFFFFFFFF042E : 3887                		move.w	d7,(a4)
(1)  341/FFFFFFFFFFFF0430 : 6100 1420           		bsr	System_DmaEnter_ROM
(1)  342/FFFFFFFFFFFF0434 : 4A78 DA6E           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  343/FFFFFFFFFFFF0438 : 6722                		beq.s	.end
(1)  344/FFFFFFFFFFFF043A : 289B                		move.l	(a3)+,(a4)			; Size
(1)  345/FFFFFFFFFFFF043C : 289B                		move.l	(a3)+,(a4)			; Source
(1)  346/FFFFFFFFFFFF043E : 389B                		move.w	(a3)+,(a4)
(1)  347/FFFFFFFFFFFF0440 :                     	; CD/CD32X
(1)  349/FFFFFFFFFFFF0440 : 361B                		move.w	(a3)+,d3			; Destination
(1)  350/FFFFFFFFFFFF0442 : 341B                		move.w	(a3)+,d2
(1)  351/FFFFFFFFFFFF0444 : 3F02                		move.w	d2,-(sp)			; Use stack for this write
(1)  352/FFFFFFFFFFFF0446 : 3883                		move.w	d3,(a4)
(1)  353/FFFFFFFFFFFF0448 : 389F                		move.w	(sp)+,(a4)			; *** CPU freezes ***
(1)  354/FFFFFFFFFFFF044A : 0242 FF7F           		andi.w	#$FF7F,d2			; Remove DMA bit
(1)  355/FFFFFFFFFFFF044E : 3883                		move.w	d3,(a4)				; Set VDP control normally
(1)  356/FFFFFFFFFFFF0450 : 3882                		move.w	d2,(a4)
(1)  357/FFFFFFFFFFFF0452 : 395B FFFC           		move.w	(a3)+,-4(a4)			; Write the patch data
(1)  358/FFFFFFFFFFFF0456 :                     	; Cartridge
(1)  364/FFFFFFFFFFFF0456 : 5378 DA6E           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  365/FFFFFFFFFFFF045A : 60D8                		bra.s	.next
(1)  366/FFFFFFFFFFFF045C :                     .end:
(1)  367/FFFFFFFFFFFF045C : 6100 13F8           		bsr	System_DmaExit_ROM
(1)  368/FFFFFFFFFFFF0460 : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  369/FFFFFFFFFFFF0464 : 3887                		move.w	d7,(a4)
(1)  370/FFFFFFFFFFFF0466 :                     .exit:
(1)  371/FFFFFFFFFFFF0466 : 4E75                		rts
(1)  372/FFFFFFFFFFFF0468 :                     
(1)  373/FFFFFFFFFFFF0468 :                     ; ====================================================================
(1)  374/FFFFFFFFFFFF0468 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF0468 :                     ; Video_BuildSprites
(1)  376/FFFFFFFFFFFF0468 :                     ;
(1)  377/FFFFFFFFFFFF0468 :                     ; Build VDP Sprite pieces and maps
(1)  378/FFFFFFFFFFFF0468 :                     ; --------------------------------------------------------
(1)  379/FFFFFFFFFFFF0468 :                     
(1)  380/FFFFFFFFFFFF0468 :                     Video_BuildSprites:
(1)  381/FFFFFFFFFFFF0468 : 31FC 0001 DBFE      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  382/FFFFFFFFFFFF046E : 4DF8 D46E           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  383/FFFFFFFFFFFF0472 : 3C38 DBFE           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  384/FFFFFFFFFFFF0476 : BC7C 0050           		cmp.w	#80,d6
(1)  385/FFFFFFFFFFFF047A : 6C00 0174           		bge	.stop_all
(1)  386/FFFFFFFFFFFF047E : 3A06                		move.w	d6,d5
(1)  387/FFFFFFFFFFFF0480 : 5345                		subq.w	#1,d5
(1)  388/FFFFFFFFFFFF0482 : 6B04                		bmi	.first_spr
(1)  389/FFFFFFFFFFFF0484 : E74D                		lsl.w	#3,d5
(1)  390/FFFFFFFFFFFF0486 : DCC5                		adda	d5,a6
(1)  391/FFFFFFFFFFFF0488 :                     .first_spr:
(1)  392/FFFFFFFFFFFF0488 : 4BF8 CDDE           		lea	(RAM_SprPzList).w,a5
(1)  393/FFFFFFFFFFFF048C : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  394/FFFFFFFFFFFF0490 :                     .next_pz:
(1)  395/FFFFFFFFFFFF0490 : 0C46 0050           		cmpi.w	#80,d6
(1)  396/FFFFFFFFFFFF0494 : 6E00 015A           		bgt	.stop_all
(1)  397/FFFFFFFFFFFF0498 : 0815 0007           		btst	#7,(a5)
(1)  398/FFFFFFFFFFFF049C : 6722                		beq	.no_slot_s
(1)  399/FFFFFFFFFFFF049E : 3015                		move.w	(a5),d0				; This slot is used?
(1)  400/FFFFFFFFFFFF04A0 : 3200                		move.w	d0,d1
(1)  401/FFFFFFFFFFFF04A2 : 0241 3C00           		andi.w	#$3C00,d1
(1)  402/FFFFFFFFFFFF04A6 : E449                		lsr.w	#2,d1
(1)  403/FFFFFFFFFFFF04A8 : D246                		add.w	d6,d1
(1)  404/FFFFFFFFFFFF04AA : 342D 0004           		move.w	4(a5),d2
(1)  405/FFFFFFFFFFFF04AE : 362D 0002           		move.w	2(a5),d3
(1)  406/FFFFFFFFFFFF04B2 : 0240 03FF           		andi.w	#$03FF,d0
(1)  407/FFFFFFFFFFFF04B6 : 3CC0                		move.w	d0,(a6)+
(1)  408/FFFFFFFFFFFF04B8 : 3CC1                		move.w	d1,(a6)+
(1)  409/FFFFFFFFFFFF04BA : 3CC2                		move.w	d2,(a6)+
(1)  410/FFFFFFFFFFFF04BC : 3CC3                		move.w	d3,(a6)+
(1)  411/FFFFFFFFFFFF04BE : 5246                		addq.w	#1,d6
(1)  412/FFFFFFFFFFFF04C0 :                     .no_slot_s:
(1)  413/FFFFFFFFFFFF04C0 : DAFC 0008           		adda	#$08,a5
(1)  414/FFFFFFFFFFFF04C4 : 51CF FFCA           		dbf	d7,.next_pz
(1)  415/FFFFFFFFFFFF04C8 : 4BF8 CC5E           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  416/FFFFFFFFFFFF04CC : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  417/FFFFFFFFFFFF04D0 :                     .next:
(1)  418/FFFFFFFFFFFF04D0 : 0815 0007           		btst	#7,(a5)
(1)  419/FFFFFFFFFFFF04D4 : 6700 0110           		beq	.no_map
(1)  420/FFFFFFFFFFFF04D8 : 2055                		move.l	(a5),a0
(1)  421/FFFFFFFFFFFF04DA : 4847                		swap	d7
(1)  422/FFFFFFFFFFFF04DC : 7000                		moveq	#0,d0
(1)  423/FFFFFFFFFFFF04DE : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  424/FFFFFFFFFFFF04E2 : D040                		add.w	d0,d0
(1)  425/FFFFFFFFFFFF04E4 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  426/FFFFFFFFFFFF04E8 : 41F0 0000           		lea	(a0,d0.w),a0
(1)  427/FFFFFFFFFFFF04EC : 3A18                		move.w	(a0)+,d5
(1)  428/FFFFFFFFFFFF04EE : 6700 00F6           		beq	.no_map
(1)  429/FFFFFFFFFFFF04F2 : 5345                		subq.w	#1,d5
(1)  430/FFFFFFFFFFFF04F4 :                     .mk_pz:
(1)  431/FFFFFFFFFFFF04F4 : 0C46 0050           		cmpi.w	#80,d6
(1)  432/FFFFFFFFFFFF04F8 : 6E00 00F6           		bgt	.stop_all
(1)  433/FFFFFFFFFFFF04FC : 4845                		swap	d5
(1)  434/FFFFFFFFFFFF04FE : 4846                		swap	d6
(1)  435/FFFFFFFFFFFF0500 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  436/FFFFFFFFFFFF0502 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  437/FFFFFFFFFFFF0504 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  438/FFFFFFFFFFFF0506 : 0838 0002 DC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  439/FFFFFFFFFFFF050C : 6710                		beq.s	.ex_vram
(1)  440/FFFFFFFFFFFF050E : 3801                		move.w	d1,d4
(1)  441/FFFFFFFFFFFF0510 : 0241 000C           		andi.w	#%1100,d1
(1)  442/FFFFFFFFFFFF0514 : 0244 0003           		andi.w	#%0011,d4
(1)  443/FFFFFFFFFFFF0518 : E24C                		lsr.w	#1,d4
(1)  444/FFFFFFFFFFFF051A : 8244                		or.w	d4,d1
(1)  445/FFFFFFFFFFFF051C : E24A                		lsr.w	#1,d2
(1)  446/FFFFFFFFFFFF051E :                     .ex_vram:
(1)  447/FFFFFFFFFFFF051E : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  448/FFFFFFFFFFFF0522 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  449/FFFFFFFFFFFF0524 : 4880                		ext.w	d0
(1)  450/FFFFFFFFFFFF0526 : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  451/FFFFFFFFFFFF052A : 3805                		move.w	d5,d4
(1)  452/FFFFFFFFFFFF052C : 0838 0002 DC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  453/FFFFFFFFFFFF0532 : 670E                		beq.s	.ex_vrams
(1)  454/FFFFFFFFFFFF0534 : 3805                		move.w	d5,d4
(1)  455/FFFFFFFFFFFF0536 : 0244 F800           		andi.w	#$F800,d4
(1)  456/FFFFFFFFFFFF053A : 0245 07FF           		andi.w	#$07FF,d5
(1)  457/FFFFFFFFFFFF053E : E24D                		lsr.w	#1,d5
(1)  458/FFFFFFFFFFFF0540 : 8A44                		or.w	d4,d5
(1)  459/FFFFFFFFFFFF0542 :                     .ex_vrams:
(1)  460/FFFFFFFFFFFF0542 : 3805                		move.w	d5,d4
(1)  461/FFFFFFFFFFFF0544 : 0244 1000           		andi.w	#$1000,d4
(1)  462/FFFFFFFFFFFF0548 : 6710                		beq.s	.vram_v
(1)  463/FFFFFFFFFFFF054A : 4440                		neg.w	d0
(1)  464/FFFFFFFFFFFF054C : 0440 0008           		subi.w	#8,d0
(1)  465/FFFFFFFFFFFF0550 : 3C01                		move.w	d1,d6
(1)  466/FFFFFFFFFFFF0552 : 0246 0003           		andi.w	#%0011,d6
(1)  467/FFFFFFFFFFFF0556 : E74E                		lsl.w	#3,d6
(1)  468/FFFFFFFFFFFF0558 : 9046                		sub.w	d6,d0
(1)  469/FFFFFFFFFFFF055A :                     .vram_v:
(1)  470/FFFFFFFFFFFF055A : 3805                		move.w	d5,d4
(1)  471/FFFFFFFFFFFF055C : 0244 0800           		andi.w	#$0800,d4
(1)  472/FFFFFFFFFFFF0560 : 6710                		beq.s	.vram_h
(1)  473/FFFFFFFFFFFF0562 : 4443                		neg.w	d3
(1)  474/FFFFFFFFFFFF0564 : 0443 0008           		subi.w	#8,d3
(1)  475/FFFFFFFFFFFF0568 : 3C01                		move.w	d1,d6
(1)  476/FFFFFFFFFFFF056A : 0246 000C           		andi.w	#%1100,d6
(1)  477/FFFFFFFFFFFF056E : DC46                		add.w	d6,d6
(1)  478/FFFFFFFFFFFF0570 : 9646                		sub.w	d6,d3
(1)  479/FFFFFFFFFFFF0572 :                     .vram_h:
(1)  480/FFFFFFFFFFFF0572 : D445                		add.w	d5,d2
(1)  481/FFFFFFFFFFFF0574 : 4845                		swap	d5
(1)  482/FFFFFFFFFFFF0576 : 4846                		swap	d6
(1)  483/FFFFFFFFFFFF0578 : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  484/FFFFFFFFFFFF057C : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  485/FFFFFFFFFFFF0580 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  486/FFFFFFFFFFFF0584 : 6C5C                		bge.s	.no_pz
(1)  487/FFFFFFFFFFFF0586 : 3801                		move.w	d1,d4
(1)  488/FFFFFFFFFFFF0588 : 0244 000C           		andi.w	#%1100,d4
(1)  489/FFFFFFFFFFFF058C : D844                		add.w	d4,d4
(1)  490/FFFFFFFFFFFF058E : D87C 0008           		add.w	#8,d4
(1)  491/FFFFFFFFFFFF0592 : 3E03                		move.w	d3,d7
(1)  492/FFFFFFFFFFFF0594 : DE44                		add.w	d4,d7
(1)  493/FFFFFFFFFFFF0596 : 6B4A                		bmi.s	.no_pz
(1)  494/FFFFFFFFFFFF0598 : 383C 00F0           		move.w	#240,d4
(1)  495/FFFFFFFFFFFF059C : 0838 0002 DC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  496/FFFFFFFFFFFF05A2 : 6702                		beq.s	.ex_yext
(1)  497/FFFFFFFFFFFF05A4 : D844                		add.w	d4,d4
(1)  498/FFFFFFFFFFFF05A6 :                     .ex_yext:
(1)  499/FFFFFFFFFFFF05A6 : B044                		cmp.w	d4,d0
(1)  500/FFFFFFFFFFFF05A8 : 6C38                		bge.s	.no_pz
(1)  501/FFFFFFFFFFFF05AA : 3801                		move.w	d1,d4
(1)  502/FFFFFFFFFFFF05AC : 0244 0003           		andi.w	#%0011,d4
(1)  503/FFFFFFFFFFFF05B0 : E74C                		lsl.w	#3,d4
(1)  504/FFFFFFFFFFFF05B2 : D87C 0008           		add.w	#8,d4
(1)  505/FFFFFFFFFFFF05B6 : 3E00                		move.w	d0,d7
(1)  506/FFFFFFFFFFFF05B8 : DE44                		add.w	d4,d7
(1)  507/FFFFFFFFFFFF05BA : 6B26                		bmi.s	.no_pz
(1)  508/FFFFFFFFFFFF05BC : E149                		lsl.w	#8,d1			; Size + Link
(1)  509/FFFFFFFFFFFF05BE : 8246                		or.w	d6,d1
(1)  510/FFFFFFFFFFFF05C0 : 0640 0080           		addi.w	#$80,d0
(1)  511/FFFFFFFFFFFF05C4 : 3838 DC16           		move.w	(RAM_VdpRegSetC).w,d4
(1)  512/FFFFFFFFFFFF05C8 : 0804 0002           		btst	#2,d4
(1)  513/FFFFFFFFFFFF05CC : 6704                		beq.s	.dont_add
(1)  514/FFFFFFFFFFFF05CE : 0640 0080           		addi.w	#$80,d0
(1)  515/FFFFFFFFFFFF05D2 :                     .dont_add:
(1)  516/FFFFFFFFFFFF05D2 : 0643 0080           		addi.w	#$80,d3
(1)  517/FFFFFFFFFFFF05D6 : 3CC0                		move.w	d0,(a6)+
(1)  518/FFFFFFFFFFFF05D8 : 3CC1                		move.w	d1,(a6)+
(1)  519/FFFFFFFFFFFF05DA : 3CC2                		move.w	d2,(a6)+
(1)  520/FFFFFFFFFFFF05DC : 3CC3                		move.w	d3,(a6)+
(1)  521/FFFFFFFFFFFF05DE : DC7C 0001           		add.w	#1,d6
(1)  522/FFFFFFFFFFFF05E2 :                     .no_pz:
(1)  523/FFFFFFFFFFFF05E2 : 51CD FF10           		dbf	d5,.mk_pz
(1)  524/FFFFFFFFFFFF05E6 :                     .no_map:
(1)  525/FFFFFFFFFFFF05E6 : DAFC 0010           		adda	#$10,a5
(1)  526/FFFFFFFFFFFF05EA : 4847                		swap	d7
(1)  527/FFFFFFFFFFFF05EC :                     .no_slot:
(1)  528/FFFFFFFFFFFF05EC : 51CF FEE2           		dbf	d7,.next
(1)  529/FFFFFFFFFFFF05F0 :                     .stop_all:
(1)  530/FFFFFFFFFFFF05F0 : 614A                		bsr	vid_CheckLastSpr
(1)  531/FFFFFFFFFFFF05F2 : 31C6 DBFE           		move.w	d6,(RAM_SprLinkNum).w
(1)  532/FFFFFFFFFFFF05F6 :                     
(1)  533/FFFFFFFFFFFF05F6 :                     ; --------------------------------------------------------
(1)  534/FFFFFFFFFFFF05F6 :                     ; Reset slots
(1)  535/FFFFFFFFFFFF05F6 :                     ; --------------------------------------------------------
(1)  536/FFFFFFFFFFFF05F6 :                     
(1)  537/FFFFFFFFFFFF05F6 :                     .freeze:
(1)  538/FFFFFFFFFFFF05F6 : 4DF8 CDDE           		lea	(RAM_SprPzList).w,a6
(1)  539/FFFFFFFFFFFF05FA : 7E4F                		moveq	#80-1,d7
(1)  540/FFFFFFFFFFFF05FC : 7C08                		moveq	#$08,d6
(1)  541/FFFFFFFFFFFF05FE :                     .chk_spr_r:
(1)  542/FFFFFFFFFFFF05FE : 1A16                		move.b	(a6),d5
(1)  543/FFFFFFFFFFFF0600 : 0805 0007           		btst	#7,d5
(1)  544/FFFFFFFFFFFF0604 : 670C                		beq.s	.no_slot_r
(1)  545/FFFFFFFFFFFF0606 : 0805 0006           		btst	#6,d5
(1)  546/FFFFFFFFFFFF060A : 6706                		beq.s	.no_slot_r
(1)  547/FFFFFFFFFFFF060C : 4296                		clr.l	(a6)
(1)  548/FFFFFFFFFFFF060E : 42AE 0004           		clr.l	4(a6)
(1)  549/FFFFFFFFFFFF0612 :                     .no_slot_r:
(1)  550/FFFFFFFFFFFF0612 : DCC6                		adda	d6,a6
(1)  551/FFFFFFFFFFFF0614 : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  552/FFFFFFFFFFFF0618 : 4DF8 CC5E           		lea	(RAM_SprMapList).w,a6
(1)  553/FFFFFFFFFFFF061C : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  554/FFFFFFFFFFFF061E : 7C10                		moveq	#$10,d6
(1)  555/FFFFFFFFFFFF0620 :                     .chk_spr_mr:
(1)  556/FFFFFFFFFFFF0620 : 1A16                		move.b	(a6),d5
(1)  557/FFFFFFFFFFFF0622 : 0805 0007           		btst	#7,d5
(1)  558/FFFFFFFFFFFF0626 : 670C                		beq.s	.no_slot_mr
(1)  559/FFFFFFFFFFFF0628 : 0805 0006           		btst	#6,d5
(1)  560/FFFFFFFFFFFF062C : 6706                		beq.s	.no_slot_mr
(1)  561/FFFFFFFFFFFF062E : 4296                		clr.l	(a6)
(1)  562/FFFFFFFFFFFF0630 : 42AE 0004           		clr.l	4(a6)
(1)  563/FFFFFFFFFFFF0634 :                     .no_slot_mr:
(1)  564/FFFFFFFFFFFF0634 : DCC6                		adda	d6,a6
(1)  565/FFFFFFFFFFFF0636 : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  566/FFFFFFFFFFFF063A : 4E75                		rts
(1)  567/FFFFFFFFFFFF063C :                     
(1)  568/FFFFFFFFFFFF063C :                     ; --------------------------------------------------------
(1)  569/FFFFFFFFFFFF063C :                     ; d6 - Current link
(1)  570/FFFFFFFFFFFF063C :                     
(1)  571/FFFFFFFFFFFF063C :                     vid_CheckLastSpr:
(1)  572/FFFFFFFFFFFF063C : 4DF8 D46E           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  573/FFFFFFFFFFFF0640 : 0C46 0001           		cmpi.w	#1,d6
(1)  574/FFFFFFFFFFFF0644 : 6710                		beq.s	.blnk_first
(1)  575/FFFFFFFFFFFF0646 : 0C46 0050           		cmpi.w	#80,d6
(1)  576/FFFFFFFFFFFF064A : 6E10                		bgt.s	.last_one
(1)  577/FFFFFFFFFFFF064C : 3E06                		move.w	d6,d7
(1)  578/FFFFFFFFFFFF064E : 0447 0001           		subi.w	#1,d7
(1)  579/FFFFFFFFFFFF0652 : E74F                		lsl.w	#3,d7
(1)  580/FFFFFFFFFFFF0654 : DCC7                		adda	d7,a6
(1)  581/FFFFFFFFFFFF0656 :                     .blnk_first:
(1)  582/FFFFFFFFFFFF0656 : 429E                		clr.l	(a6)+
(1)  583/FFFFFFFFFFFF0658 : 429E                		clr.l	(a6)+
(1)  584/FFFFFFFFFFFF065A : 6010                		bra.s	.spr_exit
(1)  585/FFFFFFFFFFFF065C :                     .last_one:
(1)  586/FFFFFFFFFFFF065C : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  587/FFFFFFFFFFFF0660 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  588/FFFFFFFFFFFF0664 : 0247 0F00           		andi.w	#$0F00,d7
(1)  589/FFFFFFFFFFFF0668 : 3D47 0002           		move.w	d7,2(a6)
(1)  590/FFFFFFFFFFFF066C :                     .spr_exit:
(1)  591/FFFFFFFFFFFF066C : 4E75                		rts
(1)  592/FFFFFFFFFFFF066E :                     
(1)  593/FFFFFFFFFFFF066E :                     ; ====================================================================
(1)  594/FFFFFFFFFFFF066E :                     ; --------------------------------------------------------
(1)  595/FFFFFFFFFFFF066E :                     ; Subroutines
(1)  596/FFFFFFFFFFFF066E :                     ; --------------------------------------------------------
(1)  597/FFFFFFFFFFFF066E :                     
(1)  598/FFFFFFFFFFFF066E :                     ; --------------------------------------------------------
(1)  599/FFFFFFFFFFFF066E :                     ; Video_Clear
(1)  600/FFFFFFFFFFFF066E :                     ;
(1)  601/FFFFFFFFFFFF066E :                     ; Clears VDP VRAM and other RAM sections
(1)  602/FFFFFFFFFFFF066E :                     ;
(1)  603/FFFFFFFFFFFF066E :                     ; Breaks:
(1)  604/FFFFFFFFFFFF066E :                     ; ALL
(1)  605/FFFFFFFFFFFF066E :                     ; --------------------------------------------------------
(1)  606/FFFFFFFFFFFF066E :                     
(1)  607/FFFFFFFFFFFF066E :                     Video_Clear:
(1)  616/FFFFFFFFFFFF066E : 7C00                		moveq	#0,d6
(1)  617/FFFFFFFFFFFF0670 : 4DF8 CC1E           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  618/FFFFFFFFFFFF0674 : 3E3C 0E53           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  619/FFFFFFFFFFFF0678 :                     .clr_me:
(1)  620/FFFFFFFFFFFF0678 : 1CC6                		move.b	d6,(a6)+
(1)  621/FFFFFFFFFFFF067A : 51CF FFFC           		dbf	d7,.clr_me
(1)  622/FFFFFFFFFFFF067E : 303C 0000           		move.w	#0,d0
(1)  623/FFFFFFFFFFFF0682 : 323C 0000           		move.w	#0,d1
(1)  624/FFFFFFFFFFFF0686 : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  625/FFFFFFFFFFFF068A : 6100 031A           		bsr	Video_Fill
(1)  626/FFFFFFFFFFFF068E :                     
(1)  627/FFFFFFFFFFFF068E :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF068E :                     ; Video_ClearScreen
(1)  629/FFFFFFFFFFFF068E :                     ;
(1)  630/FFFFFFFFFFFF068E :                     ; Clears ALL 3 map layers.
(1)  631/FFFFFFFFFFFF068E :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF068E :                     
(1)  633/FFFFFFFFFFFF068E :                     Video_ClearScreen:
(1)  634/FFFFFFFFFFFF068E : 7000                		moveq	#0,d0
(1)  635/FFFFFFFFFFFF0690 : 3238 DC04           		move.w	(RAM_VdpVramFG).w,d1
(1)  636/FFFFFFFFFFFF0694 : 3438 DC0E           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  637/FFFFFFFFFFFF0698 : 6100 030C           		bsr	Video_Fill
(1)  638/FFFFFFFFFFFF069C : 3238 DC06           		move.w	(RAM_VdpVramBG).w,d1
(1)  639/FFFFFFFFFFFF06A0 : 6100 0304           		bsr	Video_Fill
(1)  640/FFFFFFFFFFFF06A4 : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  641/FFFFFFFFFFFF06A8 : 3E38 DC16           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  642/FFFFFFFFFFFF06AC : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  643/FFFFFFFFFFFF06B0 : 6702                		beq.s	.not_small
(1)  644/FFFFFFFFFFFF06B2 : D442                		add.w	d2,d2			; Size $1000
(1)  645/FFFFFFFFFFFF06B4 :                     .not_small:
(1)  646/FFFFFFFFFFFF06B4 : 3238 DC08           		move.w	(RAM_VdpVramWD).w,d1
(1)  647/FFFFFFFFFFFF06B8 : 6000 02EC           		bra	Video_Fill
(1)  648/FFFFFFFFFFFF06BC :                     
(1)  649/FFFFFFFFFFFF06BC :                     ; --------------------------------------------------------
(1)  650/FFFFFFFFFFFF06BC :                     ; Video_DisplayOn, Video_DisplayOff
(1)  651/FFFFFFFFFFFF06BC :                     ;
(1)  652/FFFFFFFFFFFF06BC :                     ; Enable/Disable VDP Display
(1)  653/FFFFFFFFFFFF06BC :                     ; --------------------------------------------------------
(1)  654/FFFFFFFFFFFF06BC :                     
(1)  655/FFFFFFFFFFFF06BC :                     Video_DisplayOn:
(1)  656/FFFFFFFFFFFF06BC : 3F07                		move.w	d7,-(sp)
(1)  657/FFFFFFFFFFFF06BE : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  658/FFFFFFFFFFFF06C2 : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  659/FFFFFFFFFFFF06C6 : 6022                		bra.s	vid_WrtReg01
(1)  660/FFFFFFFFFFFF06C8 :                     Video_DisplayOff:
(1)  661/FFFFFFFFFFFF06C8 : 3F07                		move.w	d7,-(sp)
(1)  662/FFFFFFFFFFFF06CA : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  663/FFFFFFFFFFFF06CE : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  664/FFFFFFFFFFFF06D2 : 6016                		bra.s	vid_WrtReg01
(1)  665/FFFFFFFFFFFF06D4 :                     
(1)  666/FFFFFFFFFFFF06D4 :                     ; --------------------------------------------------------
(1)  667/FFFFFFFFFFFF06D4 :                     ; Video_DmaOn, Video_DmaOff
(1)  668/FFFFFFFFFFFF06D4 :                     ;
(1)  669/FFFFFFFFFFFF06D4 :                     ; Enable/Disable DMA
(1)  670/FFFFFFFFFFFF06D4 :                     ; --------------------------------------------------------
(1)  671/FFFFFFFFFFFF06D4 :                     
(1)  672/FFFFFFFFFFFF06D4 :                     Video_DmaOn:
(1)  673/FFFFFFFFFFFF06D4 : 3F07                		move.w	d7,-(sp)
(1)  674/FFFFFFFFFFFF06D6 : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  675/FFFFFFFFFFFF06DA : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  676/FFFFFFFFFFFF06DE : 600A                		bra.s	vid_WrtReg01
(1)  677/FFFFFFFFFFFF06E0 :                     Video_DmaOff:
(1)  678/FFFFFFFFFFFF06E0 : 3F07                		move.w	d7,-(sp)
(1)  679/FFFFFFFFFFFF06E2 : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  680/FFFFFFFFFFFF06E6 : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  681/FFFFFFFFFFFF06EA :                     
(1)  682/FFFFFFFFFFFF06EA :                     ; ------------------------------------------------
(1)  683/FFFFFFFFFFFF06EA :                     
(1)  684/FFFFFFFFFFFF06EA :                     vid_WrtReg01:
(1)  685/FFFFFFFFFFFF06EA : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  686/FFFFFFFFFFFF06F0 : 31C7 DC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  687/FFFFFFFFFFFF06F4 : 3E1F                		move.w	(sp)+,d7
(1)  688/FFFFFFFFFFFF06F6 : 4E75                		rts
(1)  689/FFFFFFFFFFFF06F8 :                     
(1)  690/FFFFFFFFFFFF06F8 :                     ; --------------------------------------------------------
(1)  691/FFFFFFFFFFFF06F8 :                     ; Video_IntEnable
(1)  692/FFFFFFFFFFFF06F8 :                     ;
(1)  693/FFFFFFFFFFFF06F8 :                     ; Enable or Disable VBlank, HBlank and External
(1)  694/FFFFFFFFFFFF06F8 :                     ; interrupts
(1)  695/FFFFFFFFFFFF06F8 :                     ;
(1)  696/FFFFFFFFFFFF06F8 :                     ; Input:
(1)  697/FFFFFFFFFFFF06F8 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  698/FFFFFFFFFFFF06F8 :                     ;      | %00000EHV
(1)  699/FFFFFFFFFFFF06F8 :                     ;      | E - External
(1)  700/FFFFFFFFFFFF06F8 :                     ;      | H - HBlank
(1)  701/FFFFFFFFFFFF06F8 :                     ;      | V - VBlank
(1)  702/FFFFFFFFFFFF06F8 :                     ;
(1)  703/FFFFFFFFFFFF06F8 :                     ; Notes:
(1)  704/FFFFFFFFFFFF06F8 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  705/FFFFFFFFFFFF06F8 :                     ; --------------------------------------------------------
(1)  706/FFFFFFFFFFFF06F8 :                     
(1)  707/FFFFFFFFFFFF06F8 :                     Video_IntEnable:
(1)  708/FFFFFFFFFFFF06F8 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  709/FFFFFFFFFFFF06FC : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  710/FFFFFFFFFFFF0700 : 3C00                		move.w	d0,d6
(1)  711/FFFFFFFFFFFF0702 : 0246 0001           		andi.w	#1,d6			; %--V
(1)  712/FFFFFFFFFFFF0706 : EB4E                		lsl.w	#5,d6
(1)  713/FFFFFFFFFFFF0708 : 8E46                		or.w	d6,d7
(1)  714/FFFFFFFFFFFF070A : 31C7 DC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  715/FFFFFFFFFFFF070E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  716/FFFFFFFFFFFF0714 : 3E38 DC10           		move.w	(RAM_VdpRegSet0).w,d7
(1)  717/FFFFFFFFFFFF0718 : 3C00                		move.w	d0,d6
(1)  718/FFFFFFFFFFFF071A : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  719/FFFFFFFFFFFF071E : E74E                		lsl.w	#3,d6
(1)  720/FFFFFFFFFFFF0720 : 8E46                		or.w	d6,d7
(1)  721/FFFFFFFFFFFF0722 : 31C7 DC10           		move.w	d7,(RAM_VdpRegSet0).w
(1)  722/FFFFFFFFFFFF0726 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  723/FFFFFFFFFFFF072C : 3E38 DC14           		move.w	(RAM_VdpRegSetB).w,d7
(1)  724/FFFFFFFFFFFF0730 : 3C00                		move.w	d0,d6			; %E--
(1)  725/FFFFFFFFFFFF0732 : 0246 0004           		andi.w	#%100,d6
(1)  726/FFFFFFFFFFFF0736 : DC46                		add.w	d6,d6
(1)  727/FFFFFFFFFFFF0738 : 8E46                		or.w	d6,d7
(1)  728/FFFFFFFFFFFF073A : 31C7 DC14           		move.w	d7,(RAM_VdpRegSetB).w
(1)  729/FFFFFFFFFFFF073E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  730/FFFFFFFFFFFF0744 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  731/FFFFFFFFFFFF0748 : 4E75                		rts
(1)  732/FFFFFFFFFFFF074A :                     
(1)  733/FFFFFFFFFFFF074A :                     ; --------------------------------------------------------
(1)  734/FFFFFFFFFFFF074A :                     ; Video_Resolution
(1)  735/FFFFFFFFFFFF074A :                     ;
(1)  736/FFFFFFFFFFFF074A :                     ; Set video resolution
(1)  737/FFFFFFFFFFFF074A :                     ;
(1)  738/FFFFFFFFFFFF074A :                     ; Input:
(1)  739/FFFFFFFFFFFF074A :                     ; d0.w | $00 - Horizontal 256
(1)  740/FFFFFFFFFFFF074A :                     ;      | $01 - Horizontal 320
(1)  741/FFFFFFFFFFFF074A :                     ;
(1)  742/FFFFFFFFFFFF074A :                     ; d1.w | $00 - Vertical 224
(1)  743/FFFFFFFFFFFF074A :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  744/FFFFFFFFFFFF074A :                     ;      | $02 - Double resolution mode
(1)  745/FFFFFFFFFFFF074A :                     ;      | $03 - INVALID
(1)  746/FFFFFFFFFFFF074A :                     ; --------------------------------------------------------
(1)  747/FFFFFFFFFFFF074A :                     
(1)  748/FFFFFFFFFFFF074A :                     Video_Resolution:
(1)  749/FFFFFFFFFFFF074A : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  750/FFFFFFFFFFFF074E : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  751/FFFFFFFFFFFF0752 : 0207 00F7           		andi.b	#%11110111,d7
(1)  752/FFFFFFFFFFFF0756 : 3C01                		move.w	d1,d6
(1)  753/FFFFFFFFFFFF0758 : CC7C 0001           		and.w	#1,d6
(1)  754/FFFFFFFFFFFF075C : E74E                		lsl.w	#3,d6
(1)  755/FFFFFFFFFFFF075E : 8E46                		or.w	d6,d7
(1)  756/FFFFFFFFFFFF0760 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  757/FFFFFFFFFFFF0766 : 31C7 DC12           		move.w	d7,(RAM_VdpRegSet1).w
(1)  758/FFFFFFFFFFFF076A : 3E38 DC16           		move.w	(RAM_VdpRegSetC).w,d7
(1)  759/FFFFFFFFFFFF076E : 0207 0078           		andi.b	#%01111000,d7
(1)  760/FFFFFFFFFFFF0772 : 3C00                		move.w	d0,d6
(1)  761/FFFFFFFFFFFF0774 : CC7C 0001           		and.w	#$01,d6
(1)  762/FFFFFFFFFFFF0778 : 6704                		beq.s	.ex_bit
(1)  763/FFFFFFFFFFFF077A : 8C7C 0081           		or.w	#$81,d6
(1)  764/FFFFFFFFFFFF077E :                     .ex_bit:
(1)  765/FFFFFFFFFFFF077E : 8E46                		or.w	d6,d7
(1)  766/FFFFFFFFFFFF0780 : 3C01                		move.w	d1,d6
(1)  767/FFFFFFFFFFFF0782 : CC7C 0002           		and.w	#%010,d6
(1)  768/FFFFFFFFFFFF0786 : 6704                		beq.s	.double
(1)  769/FFFFFFFFFFFF0788 : 8C7C 0004           		or.w	#%100,d6
(1)  770/FFFFFFFFFFFF078C :                     .double:
(1)  771/FFFFFFFFFFFF078C : 8E46                		or.w	d6,d7
(1)  772/FFFFFFFFFFFF078E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  773/FFFFFFFFFFFF0794 : 31C7 DC16           		move.w	d7,(RAM_VdpRegSetC).w
(1)  774/FFFFFFFFFFFF0798 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  775/FFFFFFFFFFFF079C : 4E75                		rts
(1)  776/FFFFFFFFFFFF079E :                     
(1)  777/FFFFFFFFFFFF079E :                     ; --------------------------------------------------------
(1)  778/FFFFFFFFFFFF079E :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  779/FFFFFFFFFFFF079E :                     ;
(1)  780/FFFFFFFFFFFF079E :                     ; Update VRAM locations for FG, BG, Window and
(1)  781/FFFFFFFFFFFF079E :                     ; the Horizontal scroll
(1)  782/FFFFFFFFFFFF079E :                     ; --------------------------------------------------------
(1)  783/FFFFFFFFFFFF079E :                     
(1)  784/FFFFFFFFFFFF079E :                     Video_UpdMapVram:
(1)  785/FFFFFFFFFFFF079E : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  786/FFFFFFFFFFFF07A2 : 3E3C 8200           		move.w	#$8200,d7
(1)  787/FFFFFFFFFFFF07A6 : 3C38 DC04           		move.w	(RAM_VdpVramFG).w,d6
(1)  788/FFFFFFFFFFFF07AA : E04E                		lsr.w	#8,d6
(1)  789/FFFFFFFFFFFF07AC : E44E                		lsr.w	#2,d6
(1)  790/FFFFFFFFFFFF07AE : 0246 0038           		andi.w	#%00111000,d6
(1)  791/FFFFFFFFFFFF07B2 : 8E46                		or.w	d6,d7
(1)  792/FFFFFFFFFFFF07B4 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  793/FFFFFFFFFFFF07BA : 3E3C 8300           		move.w	#$8300,d7
(1)  794/FFFFFFFFFFFF07BE : 3C38 DC08           		move.w	(RAM_VdpVramWD).w,d6
(1)  795/FFFFFFFFFFFF07C2 : E04E                		lsr.w	#8,d6
(1)  796/FFFFFFFFFFFF07C4 : E44E                		lsr.w	#2,d6
(1)  797/FFFFFFFFFFFF07C6 : 0246 003E           		andi.w	#%00111110,d6
(1)  798/FFFFFFFFFFFF07CA : 8E46                		or.w	d6,d7
(1)  799/FFFFFFFFFFFF07CC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  800/FFFFFFFFFFFF07D2 : 3E3C 8400           		move.w	#$8400,d7
(1)  801/FFFFFFFFFFFF07D6 : 3C38 DC06           		move.w	(RAM_VdpVramBG).w,d6
(1)  802/FFFFFFFFFFFF07DA : E04E                		lsr.w	#8,d6
(1)  803/FFFFFFFFFFFF07DC : EA4E                		lsr.w	#5,d6
(1)  804/FFFFFFFFFFFF07DE : 0246 0007           		andi.w	#%00000111,d6
(1)  805/FFFFFFFFFFFF07E2 : 8E46                		or.w	d6,d7
(1)  806/FFFFFFFFFFFF07E4 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  807/FFFFFFFFFFFF07EA : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  808/FFFFFFFFFFFF07EE : 4E75                		rts
(1)  809/FFFFFFFFFFFF07F0 :                     
(1)  810/FFFFFFFFFFFF07F0 :                     Video_UpdSprHVram:
(1)  811/FFFFFFFFFFFF07F0 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  812/FFFFFFFFFFFF07F4 : 3E3C 8500           		move.w	#$8500,d7
(1)  813/FFFFFFFFFFFF07F8 : 3C38 DC0A           		move.w	(RAM_VdpVramSpr).w,d6
(1)  814/FFFFFFFFFFFF07FC : E04E                		lsr.w	#8,d6
(1)  815/FFFFFFFFFFFF07FE : E24E                		lsr.w	#1,d6
(1)  816/FFFFFFFFFFFF0800 : 0246 007F           		andi.w	#%01111111,d6
(1)  817/FFFFFFFFFFFF0804 : 8E46                		or.w	d6,d7
(1)  818/FFFFFFFFFFFF0806 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  819/FFFFFFFFFFFF080C : 3E3C 8D00           		move.w	#$8D00,d7
(1)  820/FFFFFFFFFFFF0810 : 3C38 DC0C           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  821/FFFFFFFFFFFF0814 : E04E                		lsr.w	#8,d6
(1)  822/FFFFFFFFFFFF0816 : E44E                		lsr.w	#2,d6
(1)  823/FFFFFFFFFFFF0818 : 0246 003F           		andi.w	#%00111111,d6
(1)  824/FFFFFFFFFFFF081C : 8E46                		or.w	d6,d7
(1)  825/FFFFFFFFFFFF081E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  826/FFFFFFFFFFFF0824 : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  827/FFFFFFFFFFFF0828 : 4E75                		rts
(1)  828/FFFFFFFFFFFF082A :                     
(1)  829/FFFFFFFFFFFF082A :                     ; --------------------------------------------------------
(1)  830/FFFFFFFFFFFF082A :                     ; Video_SetMapSize
(1)  831/FFFFFFFFFFFF082A :                     ;
(1)  832/FFFFFFFFFFFF082A :                     ; Set MAP size(s) to FG and BG
(1)  833/FFFFFFFFFFFF082A :                     ;
(1)  834/FFFFFFFFFFFF082A :                     ; Input:
(1)  835/FFFFFFFFFFFF082A :                     ; d0.w | Width: %00 - H32
(1)  836/FFFFFFFFFFFF082A :                     ;      |        %01 - H40
(1)  837/FFFFFFFFFFFF082A :                     ;      |        %11 - H128
(1)  838/FFFFFFFFFFFF082A :                     ;
(1)  839/FFFFFFFFFFFF082A :                     ; d1.w | Height: %00 - V32
(1)  840/FFFFFFFFFFFF082A :                     ;      |         %01 - V40
(1)  841/FFFFFFFFFFFF082A :                     ;      |         %11 - V128
(1)  842/FFFFFFFFFFFF082A :                     ;
(1)  843/FFFFFFFFFFFF082A :                     ; Notes:
(1)  844/FFFFFFFFFFFF082A :                     ; Maximum size for a single layer size
(1)  845/FFFFFFFFFFFF082A :                     ; is $1000
(1)  846/FFFFFFFFFFFF082A :                     ; --------------------------------------------------------
(1)  847/FFFFFFFFFFFF082A :                     
(1)  848/FFFFFFFFFFFF082A :                     Video_SetMapSize:
(1)  849/FFFFFFFFFFFF082A : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  850/FFFFFFFFFFFF082E : 3E3C 9000           		move.w	#$9000,d7
(1)  851/FFFFFFFFFFFF0832 : 3C00                		move.w	d0,d6
(1)  852/FFFFFFFFFFFF0834 : 3A01                		move.w	d1,d5
(1)  853/FFFFFFFFFFFF0836 : 0246 0003           		andi.w	#%11,d6
(1)  854/FFFFFFFFFFFF083A : 0245 0003           		andi.w	#%11,d5
(1)  855/FFFFFFFFFFFF083E : E94D                		lsl.w	#4,d5
(1)  856/FFFFFFFFFFFF0840 : 8C45                		or.w	d5,d6
(1)  857/FFFFFFFFFFFF0842 : 8E46                		or.w	d6,d7
(1)  858/FFFFFFFFFFFF0844 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  859/FFFFFFFFFFFF084A : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  860/FFFFFFFFFFFF084E : 4E75                		rts
(1)  861/FFFFFFFFFFFF0850 :                     
(1)  862/FFFFFFFFFFFF0850 :                     ; --------------------------------------------------------
(1)  863/FFFFFFFFFFFF0850 :                     ; Video_LoadArt
(1)  864/FFFFFFFFFFFF0850 :                     ;
(1)  865/FFFFFFFFFFFF0850 :                     ; Loads VDP graphics using DMA
(1)  866/FFFFFFFFFFFF0850 :                     ;
(1)  867/FFFFFFFFFFFF0850 :                     ; Input:
(1)  868/FFFFFFFFFFFF0850 :                     ; d0.l | Graphics data (NOT a0)
(1)  869/FFFFFFFFFFFF0850 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  870/FFFFFFFFFFFF0850 :                     ; d2.w | Size:          cell_vram(size)
(1)  871/FFFFFFFFFFFF0850 :                     ;
(1)  872/FFFFFFFFFFFF0850 :                     ; Notes:
(1)  873/FFFFFFFFFFFF0850 :                     ; - For a faster load: call this during VBlank or
(1)  874/FFFFFFFFFFFF0850 :                     ;   disable VDP Display temporally.
(1)  875/FFFFFFFFFFFF0850 :                     ;
(1)  876/FFFFFFFFFFFF0850 :                     ; * 32X Cartridge ONLY:
(1)  877/FFFFFFFFFFFF0850 :                     ; - This sets RV bit, make sure your code is
(1)  878/FFFFFFFFFFFF0850 :                     ;   running on RAM (already doing here) and the
(1)  879/FFFFFFFFFFFF0850 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  880/FFFFFFFFFFFF0850 :                     ; --------------------------------------------------------
(1)  881/FFFFFFFFFFFF0850 :                     
(1)  882/FFFFFFFFFFFF0850 :                     Video_LoadArt:
(1)  883/FFFFFFFFFFFF0850 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  884/FFFFFFFFFFFF0854 : 2E00                		move.l	d0,d7
(1)  885/FFFFFFFFFFFF0856 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  886/FFFFFFFFFFFF085C : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  887/FFFFFFFFFFFF0862 : 6736                		beq.s	.normal
(1)  888/FFFFFFFFFFFF0864 : 2A00                		move.l	d0,d5
(1)  889/FFFFFFFFFFFF0866 : DA42                		add.w	d2,d5
(1)  890/FFFFFFFFFFFF0868 : 6430                		bcc.s	.normal
(1)  891/FFFFFFFFFFFF086A : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  892/FFFFFFFFFFFF086C : 3C01                		move.w	d1,d6
(1)  893/FFFFFFFFFFFF086E : 2E05                		move.l	d5,d7		; Top
(1)  894/FFFFFFFFFFFF0870 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  895/FFFFFFFFFFFF0876 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  896/FFFFFFFFFFFF087C : 9E80                		sub.l	d0,d7
(1)  897/FFFFFFFFFFFF087E : 6128                		bsr.s	.mk_set
(1)  898/FFFFFFFFFFFF0880 : 2A00                		move.l	d0,d5		; Bottom
(1)  899/FFFFFFFFFFFF0882 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  900/FFFFFFFFFFFF0888 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  901/FFFFFFFFFFFF088E : 2C05                		move.l	d5,d6
(1)  902/FFFFFFFFFFFF0890 : 9C80                		sub.l	d0,d6
(1)  903/FFFFFFFFFFFF0892 : 3E02                		move.w	d2,d7
(1)  904/FFFFFFFFFFFF0894 : 9E46                		sub.w	d6,d7
(1)  905/FFFFFFFFFFFF0896 : DC41                		add.w	d1,d6
(1)  906/FFFFFFFFFFFF0898 : 6006                		bra.s	.last_set
(1)  907/FFFFFFFFFFFF089A :                     .normal:
(1)  908/FFFFFFFFFFFF089A : 2A00                		move.l	d0,d5
(1)  909/FFFFFFFFFFFF089C : 3C01                		move.w	d1,d6
(1)  910/FFFFFFFFFFFF089E : 3E02                		move.w	d2,d7
(1)  911/FFFFFFFFFFFF08A0 :                     .last_set:
(1)  912/FFFFFFFFFFFF08A0 : 6106                		bsr.s	.mk_set
(1)  913/FFFFFFFFFFFF08A2 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  914/FFFFFFFFFFFF08A6 : 4E75                		rts
(1)  915/FFFFFFFFFFFF08A8 :                     
(1)  916/FFFFFFFFFFFF08A8 :                     ; d7 - size
(1)  917/FFFFFFFFFFFF08A8 :                     ; d6 - vram
(1)  918/FFFFFFFFFFFF08A8 :                     ; d5 - data
(1)  919/FFFFFFFFFFFF08A8 :                     .mk_set:
(1)  920/FFFFFFFFFFFF08A8 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  921/FFFFFFFFFFFF08AE : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  922/FFFFFFFFFFFF08B4 : 6778                		beq.s	.bad_size
(1)  923/FFFFFFFFFFFF08B6 : 4846                		swap	d6
(1)  924/FFFFFFFFFFFF08B8 : 4845                		swap	d5
(1)  925/FFFFFFFFFFFF08BA : 3C05                		move.w	d5,d6
(1)  926/FFFFFFFFFFFF08BC : 4845                		swap	d5
(1)  928/FFFFFFFFFFFF08BE : 0246 00F0           		andi.w	#$F0,d6
(1)  929/FFFFFFFFFFFF08C2 : 0C06 0020           		cmpi.b	#$20,d6
(1)  930/FFFFFFFFFFFF08C6 : 660A                		bne.s	.non_wram
(1)  931/FFFFFFFFFFFF08C8 : 48E7 0600           		movem.l	d5-d6,-(sp)		; Copy data and vram to stack
(1)  932/FFFFFFFFFFFF08CC : 0685 0000 0002      		addi.l	#2,d5
(1)  933/FFFFFFFFFFFF08D2 :                     .non_wram:
(1)  935/FFFFFFFFFFFF08D2 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  936/FFFFFFFFFFFF08D8 : 2F07                		move.l	d7,-(sp)		; <--
(1)  937/FFFFFFFFFFFF08DA : 6100 FDF8           		bsr	Video_DmaOn
(1)  938/FFFFFFFFFFFF08DE : 2E1F                		move.l	(sp)+,d7
(1)  939/FFFFFFFFFFFF08E0 : 0246 00FF           		andi.w	#$FF,d6
(1)  940/FFFFFFFFFFFF08E4 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  941/FFFFFFFFFFFF08E8 : 6746                		beq.s	.ram_write
(1)  942/FFFFFFFFFFFF08EA : 4846                		swap	d6
(1)  943/FFFFFFFFFFFF08EC : 6156                		bsr.s	.shared_setup
(1)  944/FFFFFFFFFFFF08EE : 6100 0F62           		bsr	System_DmaEnter_ROM
(1)  945/FFFFFFFFFFFF08F2 : 3C86                		move.w	d6,(a6)			; First write
(1)  946/FFFFFFFFFFFF08F4 : 3C87                		move.w	d7,(a6)			; Second write
(1)  947/FFFFFFFFFFFF08F6 : 6100 0F5E           		bsr	System_DmaExit_ROM
(1)  948/FFFFFFFFFFFF08FA : 6100 FDE4           		bsr	Video_DmaOff
(1)  949/FFFFFFFFFFFF08FE :                     	; Word-RAM patch
(1)  951/FFFFFFFFFFFF08FE : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  952/FFFFFFFFFFFF0902 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  953/FFFFFFFFFFFF0906 : 6626                		bne.s	.non_wram_l
(1)  954/FFFFFFFFFFFF0908 : 4846                		swap	d6
(1)  955/FFFFFFFFFFFF090A : 3E06                		move.w	d6,d7			; Destination
(1)  956/FFFFFFFFFFFF090C : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  957/FFFFFFFFFFFF0912 : 0046 4000           		ori.w	#$4000,d6
(1)  958/FFFFFFFFFFFF0916 : E04F                		lsr.w	#8,d7
(1)  959/FFFFFFFFFFFF0918 : EC4F                		lsr.w	#6,d7
(1)  960/FFFFFFFFFFFF091A : 0247 0003           		andi.w	#%11,d7
(1)  961/FFFFFFFFFFFF091E : 3C86                		move.w	d6,(a6)			; VDP destination
(1)  962/FFFFFFFFFFFF0920 : 3C87                		move.w	d7,(a6)			;
(1)  963/FFFFFFFFFFFF0922 : 2E0E                		move.l	a6,d7
(1)  964/FFFFFFFFFFFF0924 : 2C45                		move.l	d5,a6
(1)  965/FFFFFFFFFFFF0926 : 3C16                		move.w	(a6),d6
(1)  966/FFFFFFFFFFFF0928 : 2C47                		move.l	d7,a6
(1)  967/FFFFFFFFFFFF092A : 3D46 FFFC           		move.w	d6,-4(a6)		; DATA port -4
(1)  968/FFFFFFFFFFFF092E :                     .non_wram_l:
(1)  970/FFFFFFFFFFFF092E :                     .bad_size:
(1)  971/FFFFFFFFFFFF092E : 4E75                		rts
(1)  972/FFFFFFFFFFFF0930 :                     
(1)  973/FFFFFFFFFFFF0930 :                     ; --------------------------------------------------------
(1)  974/FFFFFFFFFFFF0930 :                     
(1)  975/FFFFFFFFFFFF0930 :                     .ram_write:
(1)  976/FFFFFFFFFFFF0930 : 4846                		swap	d6
(1)  977/FFFFFFFFFFFF0932 : 6110                		bsr.s	.shared_setup
(1)  978/FFFFFFFFFFFF0934 : 6100 0F56           		bsr	System_DmaEnter_RAM
(1)  979/FFFFFFFFFFFF0938 : 3C86                		move.w	d6,(a6)			; First write
(1)  980/FFFFFFFFFFFF093A : 3C87                		move.w	d7,(a6)			; Second write
(1)  981/FFFFFFFFFFFF093C : 6100 0F52           		bsr	System_DmaExit_RAM
(1)  982/FFFFFFFFFFFF0940 : 6000 FD9E           		bra	Video_DmaOff
(1)  983/FFFFFFFFFFFF0944 :                     
(1)  984/FFFFFFFFFFFF0944 :                     ; --------------------------------------------------------
(1)  985/FFFFFFFFFFFF0944 :                     
(1)  986/FFFFFFFFFFFF0944 :                     .shared_setup:
(1)  987/FFFFFFFFFFFF0944 : EF8F                		lsl.l	#7,d7
(1)  988/FFFFFFFFFFFF0946 : E04F                		lsr.w	#8,d7
(1)  989/FFFFFFFFFFFF0948 : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  990/FFFFFFFFFFFF094E : 2C87                		move.l	d7,(a6)
(1)  991/FFFFFFFFFFFF0950 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1)  992/FFFFFFFFFFFF0952 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1)  993/FFFFFFFFFFFF0958 : 1E05                 		move.b	d5,d7
(1)  994/FFFFFFFFFFFF095A : E08D                 		lsr.l	#8,d5
(1)  995/FFFFFFFFFFFF095C : 4847                 		swap	d7
(1)  996/FFFFFFFFFFFF095E : 1E05                 		move.b	d5,d7
(1)  997/FFFFFFFFFFFF0960 : 2C87                 		move.l	d7,(a6)
(1)  998/FFFFFFFFFFFF0962 : 3E3C 9700            		move.w	#$9700,d7
(1)  999/FFFFFFFFFFFF0966 : E08D                 		lsr.l	#8,d5
(1) 1000/FFFFFFFFFFFF0968 : 1E05                 		move.b	d5,d7
(1) 1001/FFFFFFFFFFFF096A : 3C87                 		move.w	d7,(a6)
(1) 1002/FFFFFFFFFFFF096C : 3E06                		move.w	d6,d7			; Destination
(1) 1003/FFFFFFFFFFFF096E : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1004/FFFFFFFFFFFF0974 : 0046 4000           		ori.w	#$4000,d6
(1) 1005/FFFFFFFFFFFF0978 : E04F                		lsr.w	#8,d7
(1) 1006/FFFFFFFFFFFF097A : EC4F                		lsr.w	#6,d7
(1) 1007/FFFFFFFFFFFF097C : 0247 0003           		andi.w	#%11,d7
(1) 1008/FFFFFFFFFFFF0980 : 0047 0080           		ori.w	#$80,d7
(1) 1009/FFFFFFFFFFFF0984 : 4E75                		rts
(1) 1010/FFFFFFFFFFFF0986 :                     
(1) 1011/FFFFFFFFFFFF0986 :                     ; --------------------------------------------------------
(1) 1012/FFFFFFFFFFFF0986 :                     ; Video_LoadArt_List
(1) 1013/FFFFFFFFFFFF0986 :                     ;
(1) 1014/FFFFFFFFFFFF0986 :                     ; Loads VDP graphics on bulk
(1) 1015/FFFFFFFFFFFF0986 :                     ;
(1) 1016/FFFFFFFFFFFF0986 :                     ; Input:
(1) 1017/FFFFFFFFFFFF0986 :                     ; a0 | List of graphics to load:
(1) 1018/FFFFFFFFFFFF0986 :                     ;        dc.w numof_entries
(1) 1019/FFFFFFFFFFFF0986 :                     ;        dc.l ART_DATA
(1) 1020/FFFFFFFFFFFF0986 :                     ;        dc.w cell_vram(vram_pos)
(1) 1021/FFFFFFFFFFFF0986 :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1022/FFFFFFFFFFFF0986 :                     ;        ; ...more entries
(1) 1023/FFFFFFFFFFFF0986 :                     ;
(1) 1024/FFFFFFFFFFFF0986 :                     ; Note:
(1) 1025/FFFFFFFFFFFF0986 :                     ; CPU heavy.
(1) 1026/FFFFFFFFFFFF0986 :                     ; --------------------------------------------------------
(1) 1027/FFFFFFFFFFFF0986 :                     
(1) 1028/FFFFFFFFFFFF0986 :                     Video_LoadArt_List:
(1) 1029/FFFFFFFFFFFF0986 : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1030/FFFFFFFFFFFF098A : 3E18                		move.w	(a0)+,d7
(1) 1031/FFFFFFFFFFFF098C : 6712                		beq.s	.invalid
(1) 1032/FFFFFFFFFFFF098E : 6B10                		bmi.s	.invalid
(1) 1033/FFFFFFFFFFFF0990 : 5347                		subq.w	#1,d7
(1) 1034/FFFFFFFFFFFF0992 :                     .next_one:
(1) 1035/FFFFFFFFFFFF0992 : 2018                		move.l	(a0)+,d0
(1) 1036/FFFFFFFFFFFF0994 : 3218                		move.w	(a0)+,d1
(1) 1037/FFFFFFFFFFFF0996 : 3418                		move.w	(a0)+,d2
(1) 1038/FFFFFFFFFFFF0998 : 6100 FEB6           		bsr	Video_LoadArt
(1) 1039/FFFFFFFFFFFF099C : 51CF FFF4           		dbf	d7,.next_one
(1) 1040/FFFFFFFFFFFF09A0 :                     .invalid:
(1) 1041/FFFFFFFFFFFF09A0 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1042/FFFFFFFFFFFF09A4 : 4E75                		rts
(1) 1043/FFFFFFFFFFFF09A6 :                     
(1) 1044/FFFFFFFFFFFF09A6 :                     ; --------------------------------------------------------
(1) 1045/FFFFFFFFFFFF09A6 :                     ; Video_Fill
(1) 1046/FFFFFFFFFFFF09A6 :                     ;
(1) 1047/FFFFFFFFFFFF09A6 :                     ; Fill data to VRAM
(1) 1048/FFFFFFFFFFFF09A6 :                     ;
(1) 1049/FFFFFFFFFFFF09A6 :                     ; Input:
(1) 1050/FFFFFFFFFFFF09A6 :                     ; d0.b | BYTE to fill
(1) 1051/FFFFFFFFFFFF09A6 :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1052/FFFFFFFFFFFF09A6 :                     ; d2.w | Size:             cell_vram(size)
(1) 1053/FFFFFFFFFFFF09A6 :                     ;
(1) 1054/FFFFFFFFFFFF09A6 :                     ; Notes:
(1) 1055/FFFFFFFFFFFF09A6 :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1056/FFFFFFFFFFFF09A6 :                     ;   invalid.
(1) 1057/FFFFFFFFFFFF09A6 :                     ; --------------------------------------------------------
(1) 1058/FFFFFFFFFFFF09A6 :                     
(1) 1059/FFFFFFFFFFFF09A6 :                     ; Video_Fill_Incr:
(1) 1060/FFFFFFFFFFFF09A6 :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1061/FFFFFFFFFFFF09A6 :                     ; 		move.w	d3,d6
(1) 1062/FFFFFFFFFFFF09A6 :                     ; 		bra.s	vid_FillGo
(1) 1063/FFFFFFFFFFFF09A6 :                     Video_Fill:
(1) 1064/FFFFFFFFFFFF09A6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1065/FFFFFFFFFFFF09AA : 3C3C 0001           		move.w	#1,d6
(1) 1066/FFFFFFFFFFFF09AE :                     vid_FillGo:
(1) 1067/FFFFFFFFFFFF09AE : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1068/FFFFFFFFFFFF09B4 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1069/FFFFFFFFFFFF09B6 : 0807 0001           		btst	#bitDma,d7
(1) 1070/FFFFFFFFFFFF09BA : 66F8                		bne.s	.dmaw
(1) 1071/FFFFFFFFFFFF09BC : 6100 FD16           		bsr	Video_DmaOn
(1) 1072/FFFFFFFFFFFF09C0 : 0246 00FF           		andi.w	#$FF,d6
(1) 1073/FFFFFFFFFFFF09C4 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1074/FFFFFFFFFFFF09C8 : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1075/FFFFFFFFFFFF09CA : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1076/FFFFFFFFFFFF09CC : 0447 0001           		subi.w	#1,d7
(1) 1077/FFFFFFFFFFFF09D0 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1078/FFFFFFFFFFFF09D6 : 1C07                		move.b	d7,d6
(1) 1079/FFFFFFFFFFFF09D8 : 4846                		swap	d6
(1) 1080/FFFFFFFFFFFF09DA : E04F                		lsr.w	#8,d7
(1) 1081/FFFFFFFFFFFF09DC : 1C07                		move.b	d7,d6
(1) 1082/FFFFFFFFFFFF09DE : 4846                		swap	d6
(1) 1083/FFFFFFFFFFFF09E0 : 2C86                		move.l	d6,(a6)
(1) 1084/FFFFFFFFFFFF09E2 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1085/FFFFFFFFFFFF09E6 : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1086/FFFFFFFFFFFF09E8 : 3C01                		move.w	d1,d6
(1) 1087/FFFFFFFFFFFF09EA : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1088/FFFFFFFFFFFF09EE : 0046 4000           		ori.w	#$4000,d6
(1) 1089/FFFFFFFFFFFF09F2 : 4846                		swap	d6
(1) 1090/FFFFFFFFFFFF09F4 : 3C07                		move.w	d7,d6
(1) 1091/FFFFFFFFFFFF09F6 : E04E                		lsr.w	#8,d6
(1) 1092/FFFFFFFFFFFF09F8 : EC4E                		lsr.w	#6,d6
(1) 1093/FFFFFFFFFFFF09FA : 0246 0003           		andi.w	#%11,d6
(1) 1094/FFFFFFFFFFFF09FE : 0046 0080           		ori.w	#$80,d6
(1) 1095/FFFFFFFFFFFF0A02 : 2C86                		move.l	d6,(a6)
(1) 1096/FFFFFFFFFFFF0A04 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1097/FFFFFFFFFFFF0A08 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1098/FFFFFFFFFFFF0A0A : 0807 0001           		btst	#bitDma,d7
(1) 1099/FFFFFFFFFFFF0A0E : 66F8                		bne.s	.dma_w
(1) 1100/FFFFFFFFFFFF0A10 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1101/FFFFFFFFFFFF0A14 : 6100 FCCA           		bsr	Video_DmaOff
(1) 1102/FFFFFFFFFFFF0A18 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1103/FFFFFFFFFFFF0A1C : 4E75                		rts
(1) 1104/FFFFFFFFFFFF0A1E :                     
(1) 1105/FFFFFFFFFFFF0A1E :                     ; --------------------------------------------------------
(1) 1106/FFFFFFFFFFFF0A1E :                     ; Video_Copy
(1) 1107/FFFFFFFFFFFF0A1E :                     ;
(1) 1108/FFFFFFFFFFFF0A1E :                     ; Copy VRAM data to another location inside VRAM
(1) 1109/FFFFFFFFFFFF0A1E :                     ;
(1) 1110/FFFFFFFFFFFF0A1E :                     ; Input:
(1) 1111/FFFFFFFFFFFF0A1E :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1112/FFFFFFFFFFFF0A1E :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1113/FFFFFFFFFFFF0A1E :                     ; d2.w | Size
(1) 1114/FFFFFFFFFFFF0A1E :                     ; --------------------------------------------------------
(1) 1115/FFFFFFFFFFFF0A1E :                     
(1) 1116/FFFFFFFFFFFF0A1E :                     Video_Copy:
(1) 1117/FFFFFFFFFFFF0A1E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1118/FFFFFFFFFFFF0A22 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1119/FFFFFFFFFFFF0A28 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1120/FFFFFFFFFFFF0A2A : 0807 0001           		btst	#bitDma,d7
(1) 1121/FFFFFFFFFFFF0A2E : 66F8                		bne.s	.dmaw
(1) 1122/FFFFFFFFFFFF0A30 : 6100 FCA2           		bsr	Video_DmaOn
(1) 1123/FFFFFFFFFFFF0A34 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1124/FFFFFFFFFFFF0A38 : 3E02                		move.w	d2,d7			; SIZE
(1) 1125/FFFFFFFFFFFF0A3A : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1126/FFFFFFFFFFFF0A40 : 1C07                		move.b	d7,d6
(1) 1127/FFFFFFFFFFFF0A42 : 4846                		swap	d6
(1) 1128/FFFFFFFFFFFF0A44 : E04F                		lsr.w	#8,d7
(1) 1129/FFFFFFFFFFFF0A46 : 1C07                		move.b	d7,d6
(1) 1130/FFFFFFFFFFFF0A48 : 4846                		swap	d6
(1) 1131/FFFFFFFFFFFF0A4A : 2C86                		move.l	d6,(a6)
(1) 1132/FFFFFFFFFFFF0A4C : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1133/FFFFFFFFFFFF0A52 : 3E00                		move.w	d0,d7
(1) 1134/FFFFFFFFFFFF0A54 : 1C07                		move.b	d7,d6
(1) 1135/FFFFFFFFFFFF0A56 : 4846                		swap	d6
(1) 1136/FFFFFFFFFFFF0A58 : E04F                		lsr.w	#8,d7
(1) 1137/FFFFFFFFFFFF0A5A : 1C07                		move.b	d7,d6
(1) 1138/FFFFFFFFFFFF0A5C : 2C86                		move.l	d6,(a6)
(1) 1139/FFFFFFFFFFFF0A5E : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1140/FFFFFFFFFFFF0A62 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1141/FFFFFFFFFFFF0A64 : 3C07                		move.w	d7,d6
(1) 1142/FFFFFFFFFFFF0A66 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1143/FFFFFFFFFFFF0A6A : 0046 4000           		ori.w	#$4000,d6
(1) 1144/FFFFFFFFFFFF0A6E : 4846                		swap	d6
(1) 1145/FFFFFFFFFFFF0A70 : 3C07                		move.w	d7,d6
(1) 1146/FFFFFFFFFFFF0A72 : E04E                		lsr.w	#8,d6
(1) 1147/FFFFFFFFFFFF0A74 : EC4E                		lsr.w	#6,d6
(1) 1148/FFFFFFFFFFFF0A76 : 0246 0003           		andi.w	#%11,d6
(1) 1149/FFFFFFFFFFFF0A7A : 0046 00C0           		ori.w	#$C0,d6
(1) 1150/FFFFFFFFFFFF0A7E : 2C86                		move.l	d6,(a6)
(1) 1151/FFFFFFFFFFFF0A80 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1152/FFFFFFFFFFFF0A84 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1153/FFFFFFFFFFFF0A86 : 0807 0001           		btst	#bitDma,d7
(1) 1154/FFFFFFFFFFFF0A8A : 66F8                		bne.s	.dma_w
(1) 1155/FFFFFFFFFFFF0A8C : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1156/FFFFFFFFFFFF0A90 : 6100 FC4E           		bsr	Video_DmaOff
(1) 1157/FFFFFFFFFFFF0A94 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1158/FFFFFFFFFFFF0A98 : 4E75                		rts
(1) 1159/FFFFFFFFFFFF0A9A :                     
(1) 1160/FFFFFFFFFFFF0A9A :                     ; --------------------------------------------------------
(1) 1161/FFFFFFFFFFFF0A9A :                     ; Video_MakeDmaEntry
(1) 1162/FFFFFFFFFFFF0A9A :                     ;
(1) 1163/FFFFFFFFFFFF0A9A :                     ; Makes a new entry to the DMA BLAST list
(1) 1164/FFFFFFFFFFFF0A9A :                     ; to be processed on the next VBlank
(1) 1165/FFFFFFFFFFFF0A9A :                     ;
(1) 1166/FFFFFFFFFFFF0A9A :                     ; Input:
(1) 1167/FFFFFFFFFFFF0A9A :                     ; d0.l | Graphics data location
(1) 1168/FFFFFFFFFFFF0A9A :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1169/FFFFFFFFFFFF0A9A :                     ; d2.w | Size
(1) 1170/FFFFFFFFFFFF0A9A :                     ;
(1) 1171/FFFFFFFFFFFF0A9A :                     ; Notes:
(1) 1172/FFFFFFFFFFFF0A9A :                     ; - Call this during DISPLAY only
(1) 1173/FFFFFFFFFFFF0A9A :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1174/FFFFFFFFFFFF0A9A :                     ;
(1) 1175/FFFFFFFFFFFF0A9A :                     ; * SCD/CD32X ONLY:
(1) 1176/FFFFFFFFFFFF0A9A :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1177/FFFFFFFFFFFF0A9A :                     ;   if not reading from WORD-RAM
(1) 1178/FFFFFFFFFFFF0A9A :                     ; --------------------------------------------------------
(1) 1179/FFFFFFFFFFFF0A9A :                     
(1) 1180/FFFFFFFFFFFF0A9A :                     Video_MakeDmaEntry:
(1) 1181/FFFFFFFFFFFF0A9A : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1182/FFFFFFFFFFFF0A9E : 2E00                		move.l	d0,d7
(1) 1183/FFFFFFFFFFFF0AA0 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1184/FFFFFFFFFFFF0AA6 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1185/FFFFFFFFFFFF0AAC : 6736                		beq.s	.normal
(1) 1186/FFFFFFFFFFFF0AAE : 2A00                		move.l	d0,d5
(1) 1187/FFFFFFFFFFFF0AB0 : DA42                		add.w	d2,d5
(1) 1188/FFFFFFFFFFFF0AB2 : 6430                		bcc.s	.normal
(1) 1189/FFFFFFFFFFFF0AB4 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1190/FFFFFFFFFFFF0AB6 : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1191/FFFFFFFFFFFF0AB8 : 2E05                		move.l	d5,d7
(1) 1192/FFFFFFFFFFFF0ABA : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1193/FFFFFFFFFFFF0AC0 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1194/FFFFFFFFFFFF0AC6 : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1195/FFFFFFFFFFFF0AC8 : 6128                		bsr.s	.mk_set
(1) 1196/FFFFFFFFFFFF0ACA : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1197/FFFFFFFFFFFF0ACC : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1198/FFFFFFFFFFFF0AD2 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1199/FFFFFFFFFFFF0AD8 : 2C05                		move.l	d5,d6
(1) 1200/FFFFFFFFFFFF0ADA : 9C80                		sub.l	d0,d6
(1) 1201/FFFFFFFFFFFF0ADC : 3E02                		move.w	d2,d7
(1) 1202/FFFFFFFFFFFF0ADE : 9E46                		sub.w	d6,d7
(1) 1203/FFFFFFFFFFFF0AE0 : DC41                		add.w	d1,d6
(1) 1204/FFFFFFFFFFFF0AE2 : 6006                		bra.s	.last_set
(1) 1205/FFFFFFFFFFFF0AE4 :                     .normal:
(1) 1206/FFFFFFFFFFFF0AE4 : 2A00                		move.l	d0,d5
(1) 1207/FFFFFFFFFFFF0AE6 : 3C01                		move.w	d1,d6
(1) 1208/FFFFFFFFFFFF0AE8 : 3E02                		move.w	d2,d7
(1) 1209/FFFFFFFFFFFF0AEA :                     .last_set:
(1) 1210/FFFFFFFFFFFF0AEA : 6106                		bsr.s	.mk_set
(1) 1211/FFFFFFFFFFFF0AEC : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1212/FFFFFFFFFFFF0AF0 : 4E75                		rts
(1) 1213/FFFFFFFFFFFF0AF2 :                     
(1) 1214/FFFFFFFFFFFF0AF2 :                     ; d7 - size
(1) 1215/FFFFFFFFFFFF0AF2 :                     ; d6 - vram
(1) 1216/FFFFFFFFFFFF0AF2 :                     ; d5 - data
(1) 1217/FFFFFFFFFFFF0AF2 :                     .mk_set:
(1) 1218/FFFFFFFFFFFF0AF2 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1219/FFFFFFFFFFFF0AF8 : 4847                		swap	d7
(1) 1220/FFFFFFFFFFFF0AFA : 3E38 DA6E           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1221/FFFFFFFFFFFF0AFE : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1222/FFFFFFFFFFFF0B02 : 6C7A                		bge	.ran_out
(1) 1223/FFFFFFFFFFFF0B04 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1224/FFFFFFFFFFFF0B06 : 4DF8 DA78           		lea	(RAM_VdpDmaList).w,a6
(1) 1225/FFFFFFFFFFFF0B0A : DCC7                		adda	d7,a6
(1) 1226/FFFFFFFFFFFF0B0C : 4847                		swap	d7
(1) 1227/FFFFFFFFFFFF0B0E : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1228/FFFFFFFFFFFF0B14 : 6768                		beq.s	.ran_out		; If == 0, bad
(1) 1229/FFFFFFFFFFFF0B16 : 4A47                		tst.w	d7
(1) 1230/FFFFFFFFFFFF0B18 : 6B64                		bmi.s	.ran_out		; If negative, bad
(1) 1231/FFFFFFFFFFFF0B1A : 31FC 0001 DA70      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1232/FFFFFFFFFFFF0B20 : 5278 DA6E           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1233/FFFFFFFFFFFF0B24 : E24F                		lsr.w	#1,d7
(1) 1234/FFFFFFFFFFFF0B26 : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1236/FFFFFFFFFFFF0B2A : 2F05                  		move.l	d5,-(sp)		; Save TOP point
(1) 1237/FFFFFFFFFFFF0B2C : 2E05                  		move.l	d5,d7
(1) 1238/FFFFFFFFFFFF0B2E : 0287 00F0 0000        		andi.l	#$F00000,d7
(1) 1239/FFFFFFFFFFFF0B34 : 0C87 0020 0000        		cmpi.l	#$200000,d7
(1) 1240/FFFFFFFFFFFF0B3A : 6602                  		bne.s	.not_wram
(1) 1241/FFFFFFFFFFFF0B3C : 5485                  		addq.l	#2,d5			; WORD-RAM patch
(1) 1242/FFFFFFFFFFFF0B3E :                     .not_wram:
(1) 1244/FFFFFFFFFFFF0B3E : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1245/FFFFFFFFFFFF0B40 : 2E05                  		move.l	d5,d7
(1) 1246/FFFFFFFFFFFF0B42 : 4847                  		swap	d7
(1) 1247/FFFFFFFFFFFF0B44 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1248/FFFFFFFFFFFF0B48 : 1D47 0009            		move.b	d7,9(a6)
(1) 1249/FFFFFFFFFFFF0B4C : 3E06                		move.w	d6,d7			; Destination
(1) 1250/FFFFFFFFFFFF0B4E : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1251/FFFFFFFFFFFF0B54 : 0046 4000           		ori.w	#$4000,d6
(1) 1252/FFFFFFFFFFFF0B58 : E04F                		lsr.w	#8,d7
(1) 1253/FFFFFFFFFFFF0B5A : EC4F                		lsr.w	#6,d7
(1) 1254/FFFFFFFFFFFF0B5C : 0247 0003           		andi.w	#%11,d7
(1) 1255/FFFFFFFFFFFF0B60 : 0047 0080           		ori.w	#$80,d7
(1) 1256/FFFFFFFFFFFF0B64 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1257/FFFFFFFFFFFF0B68 : 3D47 000C           		move.w	d7,$C(a6)
(1) 1259/FFFFFFFFFFFF0B6C : 2E0E                		move.l	a6,d7			; Save a6
(1) 1260/FFFFFFFFFFFF0B6E : 2C5F                		move.l	(sp)+,a6		; Restore TOP point
(1) 1261/FFFFFFFFFFFF0B70 : 3C16                		move.w	(a6),d6			; Read the first 4 pixels to d6
(1) 1262/FFFFFFFFFFFF0B72 : 2C47                		move.l	d7,a6			; Restore a6
(1) 1263/FFFFFFFFFFFF0B74 : 3D46 000E           		move.w	d6,$E(a6)		; Write pixels copy
(1) 1265/FFFFFFFFFFFF0B78 : 31FC 0000 DA70      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1266/FFFFFFFFFFFF0B7E :                     .ran_out:
(1) 1267/FFFFFFFFFFFF0B7E : 4E75                		rts
(1) 1268/FFFFFFFFFFFF0B80 :                     
(1) 1269/FFFFFFFFFFFF0B80 :                     ; ====================================================================
(1) 1270/FFFFFFFFFFFF0B80 :                     ; --------------------------------------------------------
(1) 1271/FFFFFFFFFFFF0B80 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1272/FFFFFFFFFFFF0B80 :                     ;
(1) 1273/FFFFFFFFFFFF0B80 :                     ; Write map data to VDP
(1) 1274/FFFFFFFFFFFF0B80 :                     ;
(1) 1275/FFFFFFFFFFFF0B80 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1276/FFFFFFFFFFFF0B80 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1277/FFFFFFFFFFFF0B80 :                     ;
(1) 1278/FFFFFFFFFFFF0B80 :                     ; Input:
(1) 1279/FFFFFFFFFFFF0B80 :                     ; a0   | Map data
(1) 1280/FFFFFFFFFFFF0B80 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1281/FFFFFFFFFFFF0B80 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1282/FFFFFFFFFFFF0B80 :                     ; d2.l | Screen Width/VRAM location:
(1) 1283/FFFFFFFFFFFF0B80 :                     ;        splitw(sw_size,vram_loc)
(1) 1284/FFFFFFFFFFFF0B80 :                     ; d3.w | VRAM-cell increment
(1) 1285/FFFFFFFFFFFF0B80 :                     ;
(1) 1286/FFFFFFFFFFFF0B80 :                     ; Notes:
(1) 1287/FFFFFFFFFFFF0B80 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1288/FFFFFFFFFFFF0B80 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1289/FFFFFFFFFFFF0B80 :                     ; * SCD/CD32X ONLY:
(1) 1290/FFFFFFFFFFFF0B80 :                     ; - For making the dot-screen map see
(1) 1291/FFFFFFFFFFFF0B80 :                     ;   Video_MdMcd_StampDotMap
(1) 1292/FFFFFFFFFFFF0B80 :                     ; --------------------------------------------------------
(1) 1293/FFFFFFFFFFFF0B80 :                     
(1) 1294/FFFFFFFFFFFF0B80 :                     Video_LoadMap:
(1) 1295/FFFFFFFFFFFF0B80 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1296/FFFFFFFFFFFF0B84 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1297/FFFFFFFFFFFF0B8A :                     
(1) 1298/FFFFFFFFFFFF0B8A : 2C02                		move.l	d2,d6
(1) 1299/FFFFFFFFFFFF0B8C : 4846                		swap	d6
(1) 1300/FFFFFFFFFFFF0B8E : 3A00                		move.w	d0,d5
(1) 1301/FFFFFFFFFFFF0B90 : CAC6                		mulu.w	d6,d5
(1) 1302/FFFFFFFFFFFF0B92 : 2800                		move.l	d0,d4
(1) 1303/FFFFFFFFFFFF0B94 : 4844                		swap	d4
(1) 1304/FFFFFFFFFFFF0B96 : D844                		add.w	d4,d4
(1) 1305/FFFFFFFFFFFF0B98 : DA44                		add.w	d4,d5
(1) 1306/FFFFFFFFFFFF0B9A : 3E02                		move.w	d2,d7
(1) 1307/FFFFFFFFFFFF0B9C : DE45                		add.w	d5,d7
(1) 1308/FFFFFFFFFFFF0B9E : 7A00                		moveq	#0,d5
(1) 1309/FFFFFFFFFFFF0BA0 : 3A07                		move.w	d7,d5
(1) 1310/FFFFFFFFFFFF0BA2 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1311/FFFFFFFFFFFF0BA6 : 8E7C 4000           		or.w	#$4000,d7
(1) 1312/FFFFFFFFFFFF0BAA : E55D                		rol.w	#2,d5
(1) 1313/FFFFFFFFFFFF0BAC : 0245 0003           		andi.w	#%11,d5
(1) 1314/FFFFFFFFFFFF0BB0 : 4845                		swap	d5
(1) 1315/FFFFFFFFFFFF0BB2 : 2A48                		move.l	a0,a5
(1) 1316/FFFFFFFFFFFF0BB4 : 3801                		move.w	d1,d4
(1) 1317/FFFFFFFFFFFF0BB6 : 5344                		subq.w	#1,d4
(1) 1318/FFFFFFFFFFFF0BB8 : 6B36                		bmi.s	.bad_size
(1) 1319/FFFFFFFFFFFF0BBA :                     .y_loop:
(1) 1320/FFFFFFFFFFFF0BBA : 2844                		move.l	d4,a4
(1) 1321/FFFFFFFFFFFF0BBC : 4845                		swap	d5
(1) 1322/FFFFFFFFFFFF0BBE : 3D47 0004           		move.w	d7,4(a6)
(1) 1323/FFFFFFFFFFFF0BC2 : 3D45 0004           		move.w	d5,4(a6)
(1) 1324/FFFFFFFFFFFF0BC6 : 4845                		swap	d5
(1) 1325/FFFFFFFFFFFF0BC8 : 2801                		move.l	d1,d4
(1) 1326/FFFFFFFFFFFF0BCA : 4844                		swap	d4
(1) 1327/FFFFFFFFFFFF0BCC : 5344                		subq.w	#1,d4
(1) 1328/FFFFFFFFFFFF0BCE :                     .x_loop:
(1) 1329/FFFFFFFFFFFF0BCE : 4844                		swap	d4
(1) 1330/FFFFFFFFFFFF0BD0 : 381D                		move.w	(a5)+,d4
(1) 1331/FFFFFFFFFFFF0BD2 : B87C FFFF           		cmp.w	#-1,d4
(1) 1332/FFFFFFFFFFFF0BD6 : 6606                		bne.s	.non_blank
(1) 1333/FFFFFFFFFFFF0BD8 : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1334/FFFFFFFFFFFF0BDC : 6002                		bra.s	.mk_cell
(1) 1335/FFFFFFFFFFFF0BDE :                     .non_blank:
(1) 1336/FFFFFFFFFFFF0BDE : D843                		add.w	d3,d4
(1) 1337/FFFFFFFFFFFF0BE0 :                     .mk_cell:
(1) 1338/FFFFFFFFFFFF0BE0 : 3C84                		move.w	d4,(a6)
(1) 1339/FFFFFFFFFFFF0BE2 : 4844                		swap	d4
(1) 1340/FFFFFFFFFFFF0BE4 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1341/FFFFFFFFFFFF0BE8 : DE46                		add.w	d6,d7
(1) 1342/FFFFFFFFFFFF0BEA : 280C                		move.l	a4,d4
(1) 1343/FFFFFFFFFFFF0BEC : 51CC FFCC           		dbf	d4,.y_loop
(1) 1344/FFFFFFFFFFFF0BF0 :                     .bad_size:
(1) 1345/FFFFFFFFFFFF0BF0 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1346/FFFFFFFFFFFF0BF4 : 4E75                		rts
(1) 1347/FFFFFFFFFFFF0BF6 :                     ; ------------------------------------------------
(1) 1348/FFFFFFFFFFFF0BF6 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1349/FFFFFFFFFFFF0BF6 :                     ; d2.l | Screen Width/VRAM location:
(1) 1350/FFFFFFFFFFFF0BF6 :                     ; d3.w | VRAM-cell increment
(1) 1351/FFFFFFFFFFFF0BF6 :                     
(1) 1352/FFFFFFFFFFFF0BF6 :                     Video_LoadMapV:
(1) 1353/FFFFFFFFFFFF0BF6 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1354/FFFFFFFFFFFF0BFA : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1355/FFFFFFFFFFFF0C00 : 2C02                		move.l	d2,d6
(1) 1356/FFFFFFFFFFFF0C02 : 4846                		swap	d6
(1) 1357/FFFFFFFFFFFF0C04 : 3A00                		move.w	d0,d5
(1) 1358/FFFFFFFFFFFF0C06 : CAC6                		mulu.w	d6,d5
(1) 1359/FFFFFFFFFFFF0C08 : 2800                		move.l	d0,d4
(1) 1360/FFFFFFFFFFFF0C0A : 4844                		swap	d4
(1) 1361/FFFFFFFFFFFF0C0C : D844                		add.w	d4,d4
(1) 1362/FFFFFFFFFFFF0C0E : DA44                		add.w	d4,d5
(1) 1363/FFFFFFFFFFFF0C10 : 3E02                		move.w	d2,d7
(1) 1364/FFFFFFFFFFFF0C12 : DE45                		add.w	d5,d7
(1) 1365/FFFFFFFFFFFF0C14 : 7A00                		moveq	#0,d5
(1) 1366/FFFFFFFFFFFF0C16 : 3A07                		move.w	d7,d5
(1) 1367/FFFFFFFFFFFF0C18 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1368/FFFFFFFFFFFF0C1C : 8E7C 4000           		or.w	#$4000,d7
(1) 1369/FFFFFFFFFFFF0C20 : E55D                		rol.w	#2,d5
(1) 1370/FFFFFFFFFFFF0C22 : 0245 0003           		andi.w	#%11,d5
(1) 1371/FFFFFFFFFFFF0C26 : 4845                		swap	d5
(1) 1372/FFFFFFFFFFFF0C28 : 2A48                		move.l	a0,a5
(1) 1373/FFFFFFFFFFFF0C2A : 0838 0002 DC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1374/FFFFFFFFFFFF0C30 : 664C                		bne.s	.dble_mode
(1) 1375/FFFFFFFFFFFF0C32 : 2801                		move.l	d1,d4
(1) 1376/FFFFFFFFFFFF0C34 : 4844                		swap	d4
(1) 1377/FFFFFFFFFFFF0C36 : 5344                		subq.w	#1,d4
(1) 1378/FFFFFFFFFFFF0C38 : 6B3E                		bmi.s	.bad_size
(1) 1379/FFFFFFFFFFFF0C3A :                     .x_loop:
(1) 1380/FFFFFFFFFFFF0C3A : 2844                		move.l	d4,a4
(1) 1381/FFFFFFFFFFFF0C3C : 3801                		move.w	d1,d4
(1) 1382/FFFFFFFFFFFF0C3E : 5344                		subq.w	#1,d4
(1) 1383/FFFFFFFFFFFF0C40 :                     .y_loop:
(1) 1384/FFFFFFFFFFFF0C40 : 4844                		swap	d4
(1) 1385/FFFFFFFFFFFF0C42 : 3807                		move.w	d7,d4
(1) 1386/FFFFFFFFFFFF0C44 : D845                		add.w	d5,d4
(1) 1387/FFFFFFFFFFFF0C46 : 4845                		swap	d5
(1) 1388/FFFFFFFFFFFF0C48 : 3D44 0004           		move.w	d4,4(a6)
(1) 1389/FFFFFFFFFFFF0C4C : 3D45 0004           		move.w	d5,4(a6)
(1) 1390/FFFFFFFFFFFF0C50 : 4845                		swap	d5
(1) 1391/FFFFFFFFFFFF0C52 : 381D                		move.w	(a5)+,d4
(1) 1392/FFFFFFFFFFFF0C54 : B87C FFFF           		cmp.w	#-1,d4
(1) 1393/FFFFFFFFFFFF0C58 : 6606                		bne.s	.non_blank
(1) 1394/FFFFFFFFFFFF0C5A : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1395/FFFFFFFFFFFF0C5E : 6002                		bra.s	.mk_cell
(1) 1396/FFFFFFFFFFFF0C60 :                     .non_blank:
(1) 1397/FFFFFFFFFFFF0C60 : D843                		add.w	d3,d4
(1) 1398/FFFFFFFFFFFF0C62 :                     .mk_cell:
(1) 1399/FFFFFFFFFFFF0C62 : 3C84                		move.w	d4,(a6)
(1) 1400/FFFFFFFFFFFF0C64 : DA46                		add.w	d6,d5
(1) 1401/FFFFFFFFFFFF0C66 : 4844                		swap	d4
(1) 1402/FFFFFFFFFFFF0C68 : 51CC FFD6           		dbf	d4,.y_loop
(1) 1403/FFFFFFFFFFFF0C6C : DE7C 0002           		add.w	#2,d7
(1) 1404/FFFFFFFFFFFF0C70 : 4245                		clr.w	d5
(1) 1405/FFFFFFFFFFFF0C72 : 280C                		move.l	a4,d4
(1) 1406/FFFFFFFFFFFF0C74 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1407/FFFFFFFFFFFF0C78 :                     .bad_size:
(1) 1408/FFFFFFFFFFFF0C78 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1409/FFFFFFFFFFFF0C7C : 4E75                		rts
(1) 1410/FFFFFFFFFFFF0C7E :                     
(1) 1411/FFFFFFFFFFFF0C7E :                     ; ------------------------------------------------
(1) 1412/FFFFFFFFFFFF0C7E :                     
(1) 1413/FFFFFFFFFFFF0C7E :                     .dble_mode:
(1) 1414/FFFFFFFFFFFF0C7E : 2F01                		move.l	d1,-(sp)
(1) 1415/FFFFFFFFFFFF0C80 :                     
(1) 1416/FFFFFFFFFFFF0C80 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1417/FFFFFFFFFFFF0C82 : 3803                		move.w	d3,d4
(1) 1418/FFFFFFFFFFFF0C84 : 0244 F800           		andi.w	#$F800,d4
(1) 1419/FFFFFFFFFFFF0C88 : 0243 07FF           		andi.w	#$7FF,d3
(1) 1420/FFFFFFFFFFFF0C8C : E24B                		lsr.w	#1,d3
(1) 1421/FFFFFFFFFFFF0C8E : 8644                		or.w	d4,d3
(1) 1422/FFFFFFFFFFFF0C90 :                     
(1) 1423/FFFFFFFFFFFF0C90 : 2801                		move.l	d1,d4
(1) 1424/FFFFFFFFFFFF0C92 : 4844                		swap	d4
(1) 1425/FFFFFFFFFFFF0C94 : 5344                		subq.w	#1,d4
(1) 1426/FFFFFFFFFFFF0C96 : 6B48                		bmi.s	.bad_size_d
(1) 1427/FFFFFFFFFFFF0C98 :                     .x_loop_d:
(1) 1428/FFFFFFFFFFFF0C98 : 2844                		move.l	d4,a4
(1) 1429/FFFFFFFFFFFF0C9A : 3801                		move.w	d1,d4
(1) 1430/FFFFFFFFFFFF0C9C : 5344                		subq.w	#1,d4
(1) 1431/FFFFFFFFFFFF0C9E :                     .y_loop_d:
(1) 1432/FFFFFFFFFFFF0C9E : 4844                		swap	d4
(1) 1433/FFFFFFFFFFFF0CA0 : 3807                		move.w	d7,d4
(1) 1434/FFFFFFFFFFFF0CA2 : D845                		add.w	d5,d4
(1) 1435/FFFFFFFFFFFF0CA4 : 4845                		swap	d5
(1) 1436/FFFFFFFFFFFF0CA6 : 3D44 0004           		move.w	d4,4(a6)
(1) 1437/FFFFFFFFFFFF0CAA : 3D45 0004           		move.w	d5,4(a6)
(1) 1438/FFFFFFFFFFFF0CAE : 4845                		swap	d5
(1) 1439/FFFFFFFFFFFF0CB0 : 381D                		move.w	(a5)+,d4
(1) 1440/FFFFFFFFFFFF0CB2 : DAFC 0002           		adda	#2,a5
(1) 1441/FFFFFFFFFFFF0CB6 : B87C FFFF           		cmp.w	#-1,d4
(1) 1442/FFFFFFFFFFFF0CBA : 6606                		bne.s	.non_blank_d
(1) 1443/FFFFFFFFFFFF0CBC : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1444/FFFFFFFFFFFF0CC0 : 6008                		bra.s	.mk_cell_d
(1) 1445/FFFFFFFFFFFF0CC2 :                     .non_blank_d:
(1) 1446/FFFFFFFFFFFF0CC2 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1447/FFFFFFFFFFFF0CC6 : E24C                		lsr.w	#1,d4
(1) 1448/FFFFFFFFFFFF0CC8 : D843                		add.w	d3,d4
(1) 1449/FFFFFFFFFFFF0CCA :                     .mk_cell_d:
(1) 1450/FFFFFFFFFFFF0CCA : 3C84                		move.w	d4,(a6)
(1) 1451/FFFFFFFFFFFF0CCC : DA46                		add.w	d6,d5
(1) 1452/FFFFFFFFFFFF0CCE : 4844                		swap	d4
(1) 1453/FFFFFFFFFFFF0CD0 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1454/FFFFFFFFFFFF0CD4 : DE7C 0002           		add.w	#2,d7
(1) 1455/FFFFFFFFFFFF0CD8 : 4245                		clr.w	d5
(1) 1456/FFFFFFFFFFFF0CDA : 280C                		move.l	a4,d4
(1) 1457/FFFFFFFFFFFF0CDC : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1458/FFFFFFFFFFFF0CE0 :                     .bad_size_d:
(1) 1459/FFFFFFFFFFFF0CE0 : 221F                		move.l	(sp)+,d1
(1) 1460/FFFFFFFFFFFF0CE2 : 6094                		bra	.bad_size
(1) 1461/FFFFFFFFFFFF0CE4 :                     
(1) 1462/FFFFFFFFFFFF0CE4 :                     ; ====================================================================
(1) 1463/FFFFFFFFFFFF0CE4 :                     ; ----------------------------------------------------------------
(1) 1464/FFFFFFFFFFFF0CE4 :                     ; Palette fading section
(1) 1465/FFFFFFFFFFFF0CE4 :                     ; ----------------------------------------------------------------
(1) 1466/FFFFFFFFFFFF0CE4 :                     
(1) 1467/FFFFFFFFFFFF0CE4 :                     ; --------------------------------------------------------
(1) 1468/FFFFFFFFFFFF0CE4 :                     ; Video_RunFade
(1) 1469/FFFFFFFFFFFF0CE4 :                     ;
(1) 1470/FFFFFFFFFFFF0CE4 :                     ; Process Palette changes (fade and effects)
(1) 1471/FFFFFFFFFFFF0CE4 :                     ; --------------------------------------------------------
(1) 1472/FFFFFFFFFFFF0CE4 :                     
(1) 1473/FFFFFFFFFFFF0CE4 :                     Video_RunFade:
(1) 1474/FFFFFFFFFFFF0CE4 : 4DF8 CC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1475/FFFFFFFFFFFF0CE8 :                     .next_req:
(1) 1476/FFFFFFFFFFFF0CE8 : 1016                		move.b	palfd_req(a6),d0
(1) 1477/FFFFFFFFFFFF0CEA : 6744                		beq.s	.no_req
(1) 1478/FFFFFFFFFFFF0CEC : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1479/FFFFFFFFFFFF0CF0 : 6A38                		bpl.s	.busy_timer
(1) 1480/FFFFFFFFFFFF0CF2 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1481/FFFFFFFFFFFF0CF8 : 4BF8 D96E           		lea	(RAM_Palette).w,a5
(1) 1482/FFFFFFFFFFFF0CFC : 49F8 D9EE           		lea	(RAM_PaletteFade).w,a4
(1) 1483/FFFFFFFFFFFF0D00 : 7E00                		moveq	#0,d7
(1) 1484/FFFFFFFFFFFF0D02 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1485/FFFFFFFFFFFF0D06 : DE47                		add.w	d7,d7
(1) 1486/FFFFFFFFFFFF0D08 : DAC7                		adda	d7,a5
(1) 1487/FFFFFFFFFFFF0D0A : D8C7                		adda	d7,a4
(1) 1488/FFFFFFFFFFFF0D0C : 7C00                		moveq	#0,d6
(1) 1489/FFFFFFFFFFFF0D0E : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1490/FFFFFFFFFFFF0D12 : 6716                		beq.s	.busy_timer
(1) 1491/FFFFFFFFFFFF0D14 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1492/FFFFFFFFFFFF0D18 : DC46                		add.w	d6,d6		; * 2
(1) 1493/FFFFFFFFFFFF0D1A : 5347                		subq.w	#1,d7
(1) 1494/FFFFFFFFFFFF0D1C : 0240 00FF           		andi.w	#$FF,d0
(1) 1495/FFFFFFFFFFFF0D20 : D040                		add.w	d0,d0
(1) 1496/FFFFFFFFFFFF0D22 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1497/FFFFFFFFFFFF0D26 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1498/FFFFFFFFFFFF0D2A :                     .busy_timer:
(1) 1499/FFFFFFFFFFFF0D2A : DCFC 0008           		adda	#palfd_len,a6
(1) 1500/FFFFFFFFFFFF0D2E : 60B8                		bra.s	.next_req
(1) 1501/FFFFFFFFFFFF0D30 :                     .no_req:
(1) 1502/FFFFFFFFFFFF0D30 : 4278 DBFC           		clr.w	(RAM_IndxPalFade).w
(1) 1503/FFFFFFFFFFFF0D34 : 4E75                		rts
(1) 1504/FFFFFFFFFFFF0D36 :                     
(1) 1505/FFFFFFFFFFFF0D36 :                     ; ------------------------------------------------
(1) 1506/FFFFFFFFFFFF0D36 :                     
(1) 1507/FFFFFFFFFFFF0D36 :                     .fade_list:
(1) 1508/FFFFFFFFFFFF0D36 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1509/FFFFFFFFFFFF0D38 : 0018                		dc.w .fade_out-.fade_list
(1) 1510/FFFFFFFFFFFF0D3A : 0088                		dc.w .fade_in-.fade_list
(1) 1511/FFFFFFFFFFFF0D3C : 0010                		dc.w .nothing-.fade_list
(1) 1512/FFFFFFFFFFFF0D3E : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1513/FFFFFFFFFFFF0D40 : 0010                		dc.w .nothing-.fade_list
(1) 1514/FFFFFFFFFFFF0D42 : 0010                		dc.w .nothing-.fade_list
(1) 1515/FFFFFFFFFFFF0D44 : 0010                		dc.w .nothing-.fade_list
(1) 1516/FFFFFFFFFFFF0D46 :                     
(1) 1517/FFFFFFFFFFFF0D46 :                     ; ----------------------------------------------------
(1) 1518/FFFFFFFFFFFF0D46 :                     ; Fade request $00: Null/exit.
(1) 1519/FFFFFFFFFFFF0D46 :                     ; ----------------------------------------------------
(1) 1520/FFFFFFFFFFFF0D46 :                     
(1) 1521/FFFFFFFFFFFF0D46 :                     .nothing:
(1) 1522/FFFFFFFFFFFF0D46 :                     .pfade_del:
(1) 1523/FFFFFFFFFFFF0D46 : 4216                		clr.b	palfd_req(a6)
(1) 1524/FFFFFFFFFFFF0D48 : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1525/FFFFFFFFFFFF0D4C : 4E75                		rts
(1) 1526/FFFFFFFFFFFF0D4E :                     
(1) 1527/FFFFFFFFFFFF0D4E :                     ; ----------------------------------------------------
(1) 1528/FFFFFFFFFFFF0D4E :                     ; Fade request $01: fade-out to black
(1) 1529/FFFFFFFFFFFF0D4E :                     ; Quick.
(1) 1530/FFFFFFFFFFFF0D4E :                     ;
(1) 1531/FFFFFFFFFFFF0D4E :                     ; d7 - Num colors
(1) 1532/FFFFFFFFFFFF0D4E :                     ; d6 - Increment*2
(1) 1533/FFFFFFFFFFFF0D4E :                     ; ----------------------------------------------------
(1) 1534/FFFFFFFFFFFF0D4E :                     
(1) 1535/FFFFFFFFFFFF0D4E :                     .fade_out:
(1) 1536/FFFFFFFFFFFF0D4E : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1537/FFFFFFFFFFFF0D52 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1538/FFFFFFFFFFFF0D56 : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1539/FFFFFFFFFFFF0D5A : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1540/FFFFFFFFFFFF0D5C :                     .next_color:
(1) 1541/FFFFFFFFFFFF0D5C : 3015                		move.w	(a5),d0
(1) 1542/FFFFFFFFFFFF0D5E : 6750                		beq.s	.all_black		; Skip if all black
(1) 1543/FFFFFFFFFFFF0D60 :                     	rept 3
(1) 1544/FFFFFFFFFFFF0D60 :                     		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D60 :                     		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D60 :                     		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D60 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D60 :                     		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D60 :                     		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D60 :                     		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D60 :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D60 :                     		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D60 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D60 :                     		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D60 :                     		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D60 :                     		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D60 :                     		rol.w	#4,d4
(1) 1558/FFFFFFFFFFFF0D60 :                     	endm
(1) 1544/FFFFFFFFFFFF0D60 : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D62 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D64 : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D66 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D68 : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D6A : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D6C : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D6E :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D6E : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D70 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D70 : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D72 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D74 : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D76 : E95C                		rol.w	#4,d4
(1) 1544/FFFFFFFFFFFF0D78 : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D7A : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D7C : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D7E : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D80 : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D82 : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D84 : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D86 :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D86 : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0D88 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0D88 : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0D8A : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0D8C : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0D8E : E95C                		rol.w	#4,d4
(1) 1544/FFFFFFFFFFFF0D90 : 3200                		move.w	d0,d1
(1) 1545/FFFFFFFFFFFF0D92 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1546/FFFFFFFFFFFF0D94 : 670A                		beq.s	.no_chng
(1) 1547/FFFFFFFFFFFF0D96 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1548/FFFFFFFFFFFF0D98 : 9246                		sub.w	d6,d1
(1) 1549/FFFFFFFFFFFF0D9A : 6A02                		bpl.s	.blck_alrdy
(1) 1550/FFFFFFFFFFFF0D9C : 4241                		clr.w	d1
(1) 1551/FFFFFFFFFFFF0D9E :                     .blck_alrdy:
(1) 1552/FFFFFFFFFFFF0D9E : 5243                		addq.w	#1,d3			; Color changed
(1) 1553/FFFFFFFFFFFF0DA0 :                     .no_chng:
(1) 1554/FFFFFFFFFFFF0DA0 : 8041                		or.w	d1,d0
(1) 1555/FFFFFFFFFFFF0DA2 : E95E                		rol.w	#4,d6			; next << color
(1) 1556/FFFFFFFFFFFF0DA4 : E95D                		rol.w	#4,d5
(1) 1557/FFFFFFFFFFFF0DA6 : E95C                		rol.w	#4,d4
(1) 1559/FFFFFFFFFFFF0DA8 :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1560/FFFFFFFFFFFF0DA8 : E95E                		rol.w	#4,d6
(1) 1561/FFFFFFFFFFFF0DAA : E95D                		rol.w	#4,d5
(1) 1562/FFFFFFFFFFFF0DAC : E95C                		rol.w	#4,d4
(1) 1563/FFFFFFFFFFFF0DAE : 3A80                		move.w	d0,(a5)
(1) 1564/FFFFFFFFFFFF0DB0 :                     .all_black:
(1) 1565/FFFFFFFFFFFF0DB0 : DAFC 0002           		adda	#2,a5
(1) 1566/FFFFFFFFFFFF0DB4 : 51CF FFA6           		dbf	d7,.next_color
(1) 1567/FFFFFFFFFFFF0DB8 : 4A43                		tst.w	d3
(1) 1568/FFFFFFFFFFFF0DBA : 678A                		beq	.pfade_del
(1) 1569/FFFFFFFFFFFF0DBC :                     .fdout_nend:
(1) 1570/FFFFFFFFFFFF0DBC : 4E75                		rts
(1) 1571/FFFFFFFFFFFF0DBE :                     
(1) 1572/FFFFFFFFFFFF0DBE :                     ; ----------------------------------------------------
(1) 1573/FFFFFFFFFFFF0DBE :                     ; Fade request $02
(1) 1574/FFFFFFFFFFFF0DBE :                     ; Fade-in
(1) 1575/FFFFFFFFFFFF0DBE :                     ; ----------------------------------------------------
(1) 1576/FFFFFFFFFFFF0DBE :                     
(1) 1577/FFFFFFFFFFFF0DBE :                     .fade_in:
(1) 1578/FFFFFFFFFFFF0DBE : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1579/FFFFFFFFFFFF0DC2 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1580/FFFFFFFFFFFF0DC6 : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1581/FFFFFFFFFFFF0DCA :                     .next_in:
(1) 1582/FFFFFFFFFFFF0DCA : 4847                		swap	d7
(1) 1583/FFFFFFFFFFFF0DCC : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1584/FFFFFFFFFFFF0DCE : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1585/FFFFFFFFFFFF0DD0 : C044                		and.w	d4,d0
(1) 1586/FFFFFFFFFFFF0DD2 : C444                		and.w	d4,d2
(1) 1587/FFFFFFFFFFFF0DD4 : B042                		cmp.w	d2,d0
(1) 1588/FFFFFFFFFFFF0DD6 : 6766                		beq.s	.same_in
(1) 1589/FFFFFFFFFFFF0DD8 :                     	rept 3
(1) 1590/FFFFFFFFFFFF0DD8 :                     		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0DD8 :                     		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0DD8 :                     		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0DD8 :                     		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0DD8 :                     		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0DD8 :                     		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0DD8 :                     		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0DD8 :                     
(1) 1598/FFFFFFFFFFFF0DD8 :                     		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0DD8 :                     		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0DD8 :                     		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0DD8 :                     		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0DD8 :                     		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0DD8 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0DD8 :                     		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0DD8 :                     		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0DD8 :                     		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0DD8 :                     		rol.w	#4,d5
(1) 1608/FFFFFFFFFFFF0DD8 :                     	endm
(1) 1590/FFFFFFFFFFFF0DD8 : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0DDA : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0DDC : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0DDE : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0DE0 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0DE2 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0DE4 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0DE6 :                     
(1) 1598/FFFFFFFFFFFF0DE6 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0DE8 : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0DEA : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0DEC : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0DEE : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0DF0 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0DF0 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0DF2 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0DF4 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0DF6 : E95D                		rol.w	#4,d5
(1) 1590/FFFFFFFFFFFF0DF8 : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0DFA : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0DFC : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0DFE : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0E00 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0E02 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0E04 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0E06 :                     
(1) 1598/FFFFFFFFFFFF0E06 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0E08 : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0E0A : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0E0C : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0E0E : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0E10 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0E10 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0E12 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0E14 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0E16 : E95D                		rol.w	#4,d5
(1) 1590/FFFFFFFFFFFF0E18 : 3200                		move.w	d0,d1
(1) 1591/FFFFFFFFFFFF0E1A : 3604                		move.w	d4,d3
(1) 1592/FFFFFFFFFFFF0E1C : BB43                		eor.w	d5,d3
(1) 1593/FFFFFFFFFFFF0E1E : C043                		and.w	d3,d0
(1) 1594/FFFFFFFFFFFF0E20 : 3602                		move.w	d2,d3
(1) 1595/FFFFFFFFFFFF0E22 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1596/FFFFFFFFFFFF0E24 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1597/FFFFFFFFFFFF0E26 :                     
(1) 1598/FFFFFFFFFFFF0E26 : D246                		add.w	d6,d1		; ADD to current
(1) 1599/FFFFFFFFFFFF0E28 : B243                		cmp.w	d3,d1
(1) 1600/FFFFFFFFFFFF0E2A : 6504                		bcs.s	.max_out
(1) 1601/FFFFFFFFFFFF0E2C : 3202                		move.w	d2,d1
(1) 1602/FFFFFFFFFFFF0E2E : C245                		and.w	d5,d1
(1) 1603/FFFFFFFFFFFF0E30 :                     .max_out:
(1) 1604/FFFFFFFFFFFF0E30 : 5247                		addq.w	#1,d7
(1) 1605/FFFFFFFFFFFF0E32 : 8041                		or.w	d1,d0
(1) 1606/FFFFFFFFFFFF0E34 : E95E                		rol.w	#4,d6		; next << color
(1) 1607/FFFFFFFFFFFF0E36 : E95D                		rol.w	#4,d5
(1) 1609/FFFFFFFFFFFF0E38 : E95E                		rol.w	#4,d6
(1) 1610/FFFFFFFFFFFF0E3A : E95D                		rol.w	#4,d5
(1) 1611/FFFFFFFFFFFF0E3C : 3A80                		move.w	d0,(a5)
(1) 1612/FFFFFFFFFFFF0E3E :                     .same_in:
(1) 1613/FFFFFFFFFFFF0E3E : DAFC 0002           		adda	#2,a5		; Next index
(1) 1614/FFFFFFFFFFFF0E42 : D8FC 0002           		adda	#2,a4
(1) 1615/FFFFFFFFFFFF0E46 : 4847                		swap	d7
(1) 1616/FFFFFFFFFFFF0E48 : 51CF FF80           		dbf	d7,.next_in
(1) 1617/FFFFFFFFFFFF0E4C : 4847                		swap	d7
(1) 1618/FFFFFFFFFFFF0E4E : 4A47                		tst.w	d7
(1) 1619/FFFFFFFFFFFF0E50 : 6700 FEF4           		beq	.pfade_del
(1) 1620/FFFFFFFFFFFF0E54 :                     .fdin_nend:
(1) 1621/FFFFFFFFFFFF0E54 : 4E75                		rts
(1) 1622/FFFFFFFFFFFF0E56 :                     
(1) 1623/FFFFFFFFFFFF0E56 :                     ; --------------------------------------------------------
(1) 1624/FFFFFFFFFFFF0E56 :                     ; Video_WaitFade
(1) 1625/FFFFFFFFFFFF0E56 :                     ;
(1) 1626/FFFFFFFFFFFF0E56 :                     ; CPU-saving version of System_Render when
(1) 1627/FFFFFFFFFFFF0E56 :                     ; waiting for a fade-in/fade-out
(1) 1628/FFFFFFFFFFFF0E56 :                     ;
(1) 1629/FFFFFFFFFFFF0E56 :                     ; THIS IS REQUIRED FOR 32X as
(1) 1630/FFFFFFFFFFFF0E56 :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1631/FFFFFFFFFFFF0E56 :                     ; --------------------------------------------------------
(1) 1632/FFFFFFFFFFFF0E56 :                     
(1) 1633/FFFFFFFFFFFF0E56 :                     Video_WaitFade:
(1) 1634/FFFFFFFFFFFF0E56 :                     .loop:
(1) 1635/FFFFFFFFFFFF0E56 : 6100 09BE           		bsr	System_Render
(1) 1636/FFFFFFFFFFFF0E5A : 4DF8 CC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1640/FFFFFFFFFFFF0E5E : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1641/FFFFFFFFFFFF0E62 : 7C00                		moveq	#0,d6
(1) 1642/FFFFFFFFFFFF0E64 :                     .next_one:
(1) 1643/FFFFFFFFFFFF0E64 : 8C16                		or.b	palfd_req(a6),d6
(1) 1644/FFFFFFFFFFFF0E66 : DCFC 0008           		adda	#palfd_len,a6
(1) 1649/FFFFFFFFFFFF0E6A : 51CF FFF8           		dbf	d7,.next_one
(1) 1650/FFFFFFFFFFFF0E6E : 4A06                		tst.b	d6
(1) 1651/FFFFFFFFFFFF0E70 : 66E4                		bne.s	.loop
(1) 1652/FFFFFFFFFFFF0E72 : 4E75                		rts
(1) 1653/FFFFFFFFFFFF0E74 :                     
(1) 1654/FFFFFFFFFFFF0E74 :                     ; --------------------------------------------------------
(1) 1655/FFFFFFFFFFFF0E74 :                     ; Video_FadeIn_Full
(1) 1656/FFFFFFFFFFFF0E74 :                     ;
(1) 1657/FFFFFFFFFFFF0E74 :                     ; Overwrites first entry on each's PalFadeList
(1) 1658/FFFFFFFFFFFF0E74 :                     ; --------------------------------------------------------
(1) 1659/FFFFFFFFFFFF0E74 :                     
(1) 1660/FFFFFFFFFFFF0E74 :                     Video_FadeIn_Full:
(1) 1667/FFFFFFFFFFFF0E74 : 7002                		moveq	#2,d0
(1) 1668/FFFFFFFFFFFF0E76 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1669/FFFFFFFFFFFF0E7C : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1670/FFFFFFFFFFFF0E82 : 6116                		bsr	Video_MakeFade
(1) 1671/FFFFFFFFFFFF0E84 : 60D0                		bra	Video_WaitFade
(1) 1672/FFFFFFFFFFFF0E86 :                     
(1) 1673/FFFFFFFFFFFF0E86 :                     ; --------------------------------------------------------
(1) 1674/FFFFFFFFFFFF0E86 :                     ; Video_FadeIn_Full
(1) 1675/FFFFFFFFFFFF0E86 :                     ;
(1) 1676/FFFFFFFFFFFF0E86 :                     ; Overwrites first entry on each's PalFadeList
(1) 1677/FFFFFFFFFFFF0E86 :                     ; --------------------------------------------------------
(1) 1678/FFFFFFFFFFFF0E86 :                     
(1) 1679/FFFFFFFFFFFF0E86 :                     Video_FadeOut_Full:
(1) 1686/FFFFFFFFFFFF0E86 : 7001                		moveq	#1,d0
(1) 1687/FFFFFFFFFFFF0E88 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1688/FFFFFFFFFFFF0E8E : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1689/FFFFFFFFFFFF0E94 : 6104                		bsr	Video_MakeFade
(1) 1690/FFFFFFFFFFFF0E96 : 60BE                		bra	Video_WaitFade
(1) 1691/FFFFFFFFFFFF0E98 :                     
(1) 1692/FFFFFFFFFFFF0E98 :                     ; ============================================================
(1) 1693/FFFFFFFFFFFF0E98 :                     ; --------------------------------------------------------
(1) 1694/FFFFFFFFFFFF0E98 :                     ; Subroutines
(1) 1695/FFFFFFFFFFFF0E98 :                     ; --------------------------------------------------------
(1) 1696/FFFFFFFFFFFF0E98 :                     
(1) 1697/FFFFFFFFFFFF0E98 :                     ; --------------------------------------------------------
(1) 1698/FFFFFFFFFFFF0E98 :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1699/FFFFFFFFFFFF0E98 :                     ;
(1) 1700/FFFFFFFFFFFF0E98 :                     ; Make palette Fading (or other) request, for
(1) 1701/FFFFFFFFFFFF0E98 :                     ; both VDP and SVDP
(1) 1702/FFFFFFFFFFFF0E98 :                     ;
(1) 1703/FFFFFFFFFFFF0E98 :                     ; Input:
(1) 1704/FFFFFFFFFFFF0E98 :                     ; d0.w | Task number:
(1) 1705/FFFFFFFFFFFF0E98 :                     ;        0 - Fade-out
(1) 1706/FFFFFFFFFFFF0E98 :                     ;        1 - Fade-in
(1) 1707/FFFFFFFFFFFF0E98 :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1708/FFFFFFFFFFFF0E98 :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1709/FFFFFFFFFFFF0E98 :                     ; --------------------------------------------------------
(1) 1710/FFFFFFFFFFFF0E98 :                     
(1) 1711/FFFFFFFFFFFF0E98 :                     Video_MdMars_MakeFade:
(1) 1720/FFFFFFFFFFFF0E98 : 4E75                		rts
(1) 1721/FFFFFFFFFFFF0E9A :                     Video_MakeFade:
(1) 1722/FFFFFFFFFFFF0E9A : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1723/FFFFFFFFFFFF0E9E : 4DF8 CC1E           		lea	(RAM_PalFadeList).w,a6
(1) 1724/FFFFFFFFFFFF0EA2 : 3E38 DBFC           		move.w	(RAM_IndxPalFade).w,d7
(1) 1725/FFFFFFFFFFFF0EA6 : 5278 DBFC           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1726/FFFFFFFFFFFF0EAA : 6106                		bsr	vidMkFade_Go
(1) 1727/FFFFFFFFFFFF0EAC : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1728/FFFFFFFFFFFF0EB0 : 4E75                		rts
(1) 1729/FFFFFFFFFFFF0EB2 :                     vidMkFade_Go:
(1) 1730/FFFFFFFFFFFF0EB2 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1731/FFFFFFFFFFFF0EB8 : E74F                		lsl.w	#3,d7			; index * 8
(1) 1732/FFFFFFFFFFFF0EBA : DCC7                		adda	d7,a6
(1) 1733/FFFFFFFFFFFF0EBC : 2E01                		move.l	d1,d7
(1) 1734/FFFFFFFFFFFF0EBE : 2C02                		move.l	d2,d6
(1) 1735/FFFFFFFFFFFF0EC0 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1736/FFFFFFFFFFFF0EC2 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1737/FFFFFFFFFFFF0EC6 : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1738/FFFFFFFFFFFF0ECA : 4846                		swap	d6
(1) 1739/FFFFFFFFFFFF0ECC : 4847                		swap	d7
(1) 1740/FFFFFFFFFFFF0ECE : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1741/FFFFFFFFFFFF0ED2 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1742/FFFFFFFFFFFF0ED6 : 4E75                		rts
(1) 1743/FFFFFFFFFFFF0ED8 :                     
(1) 1744/FFFFFFFFFFFF0ED8 :                     ; --------------------------------------------------------
(1) 1745/FFFFFFFFFFFF0ED8 :                     ; Video_LoadPal, Video_FadePal
(1) 1746/FFFFFFFFFFFF0ED8 :                     ;
(1) 1747/FFFFFFFFFFFF0ED8 :                     ; Load VDP palette data, either current or for fading.
(1) 1748/FFFFFFFFFFFF0ED8 :                     ;
(1) 1749/FFFFFFFFFFFF0ED8 :                     ; Input:
(1) 1750/FFFFFFFFFFFF0ED8 :                     ; a0   | Palette data
(1) 1751/FFFFFFFFFFFF0ED8 :                     ; d0.w | Starting color index
(1) 1752/FFFFFFFFFFFF0ED8 :                     ; d1.w | Number of colors
(1) 1753/FFFFFFFFFFFF0ED8 :                     ; --------------------------------------------------------
(1) 1754/FFFFFFFFFFFF0ED8 :                     
(1) 1755/FFFFFFFFFFFF0ED8 :                     Video_FadePal:
(1) 1756/FFFFFFFFFFFF0ED8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1757/FFFFFFFFFFFF0EDC : 4DF8 D9EE           		lea	(RAM_PaletteFade).w,a6
(1) 1758/FFFFFFFFFFFF0EE0 : 6008                		bra.s	vidMd_Pal
(1) 1759/FFFFFFFFFFFF0EE2 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1760/FFFFFFFFFFFF0EE2 :                     ; 		rts
(1) 1761/FFFFFFFFFFFF0EE2 :                     Video_LoadPal:
(1) 1762/FFFFFFFFFFFF0EE2 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1763/FFFFFFFFFFFF0EE6 : 4DF8 D96E           		lea	(RAM_Palette).w,a6
(1) 1764/FFFFFFFFFFFF0EEA :                     ; 		bsr.s	vidMd_Pal
(1) 1765/FFFFFFFFFFFF0EEA :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1766/FFFFFFFFFFFF0EEA :                     ; 		rts
(1) 1767/FFFFFFFFFFFF0EEA :                     
(1) 1768/FFFFFFFFFFFF0EEA :                     ; --------------------------------------------------------
(1) 1769/FFFFFFFFFFFF0EEA :                     vidMd_Pal:
(1) 1770/FFFFFFFFFFFF0EEA : 2A48                		move.l	a0,a5
(1) 1771/FFFFFFFFFFFF0EEC : 7E00                		moveq	#0,d7
(1) 1772/FFFFFFFFFFFF0EEE : 3E00                		move.w	d0,d7
(1) 1773/FFFFFFFFFFFF0EF0 : DE47                		add.w	d7,d7
(1) 1774/FFFFFFFFFFFF0EF2 : DCC7                		adda	d7,a6
(1) 1775/FFFFFFFFFFFF0EF4 : 3E01                		move.w	d1,d7
(1) 1776/FFFFFFFFFFFF0EF6 : 5347                		subq.w	#1,d7
(1) 1777/FFFFFFFFFFFF0EF8 : 6B0E                		bmi.s	.bad
(1) 1778/FFFFFFFFFFFF0EFA : 3C02                		move.w	d2,d6
(1) 1779/FFFFFFFFFFFF0EFC : 0246 0001           		andi.w	#1,d6
(1) 1780/FFFFFFFFFFFF0F00 : E25E                		ror.w	#1,d6
(1) 1781/FFFFFFFFFFFF0F02 :                     .loop:
(1) 1782/FFFFFFFFFFFF0F02 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1783/FFFFFFFFFFFF0F04 : 51CF FFFC           		dbf	d7,.loop
(1) 1784/FFFFFFFFFFFF0F08 :                     .bad:
(1) 1785/FFFFFFFFFFFF0F08 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1786/FFFFFFFFFFFF0F0C : 4E75                		rts
(1) 1787/FFFFFFFFFFFF0F0E :                     
(1) 1788/FFFFFFFFFFFF0F0E :                     ; --------------------------------------------------------
(1) 1789/FFFFFFFFFFFF0F0E :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1790/FFFFFFFFFFFF0F0E :                     ;
(1) 1791/FFFFFFFFFFFF0F0E :                     ; Loads palettes on bulk with a list
(1) 1792/FFFFFFFFFFFF0F0E :                     ;
(1) 1793/FFFFFFFFFFFF0F0E :                     ; Input:
(1) 1794/FFFFFFFFFFFF0F0E :                     ; a0 | List of graphics to load:
(1) 1795/FFFFFFFFFFFF0F0E :                     ;        dc.w numof_entries
(1) 1796/FFFFFFFFFFFF0F0E :                     ;        dc.l palette_data
(1) 1797/FFFFFFFFFFFF0F0E :                     ;        dc.w start_at
(1) 1798/FFFFFFFFFFFF0F0E :                     ;        dc.w numof_colors
(1) 1799/FFFFFFFFFFFF0F0E :                     ;        ; ...more entries
(1) 1800/FFFFFFFFFFFF0F0E :                     ; --------------------------------------------------------
(1) 1801/FFFFFFFFFFFF0F0E :                     
(1) 1802/FFFFFFFFFFFF0F0E :                     Video_LoadPal_List:
(1) 1803/FFFFFFFFFFFF0F0E : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1804/FFFFFFFFFFFF0F12 : 2A48                		move.l	a0,a5
(1) 1805/FFFFFFFFFFFF0F14 : 3E1D                		move.w	(a5)+,d7
(1) 1806/FFFFFFFFFFFF0F16 : 6710                		beq.s	.invalid
(1) 1807/FFFFFFFFFFFF0F18 : 6B0E                		bmi.s	.invalid
(1) 1808/FFFFFFFFFFFF0F1A : 5347                		subq.w	#1,d7
(1) 1809/FFFFFFFFFFFF0F1C :                     .next_one:
(1) 1810/FFFFFFFFFFFF0F1C : 205D                		move.l	(a5)+,a0
(1) 1811/FFFFFFFFFFFF0F1E : 301D                		move.w	(a5)+,d0
(1) 1812/FFFFFFFFFFFF0F20 : 321D                		move.w	(a5)+,d1
(1) 1813/FFFFFFFFFFFF0F22 : 61BE                		bsr	Video_LoadPal
(1) 1814/FFFFFFFFFFFF0F24 : 51CF FFF6           		dbf	d7,.next_one
(1) 1815/FFFFFFFFFFFF0F28 :                     .invalid:
(1) 1816/FFFFFFFFFFFF0F28 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1817/FFFFFFFFFFFF0F2C : 4E75                		rts
(1) 1818/FFFFFFFFFFFF0F2E :                     
(1) 1819/FFFFFFFFFFFF0F2E :                     Video_FadePal_List:
(1) 1820/FFFFFFFFFFFF0F2E : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1821/FFFFFFFFFFFF0F32 : 2A48                		move.l	a0,a5
(1) 1822/FFFFFFFFFFFF0F34 : 3E1D                		move.w	(a5)+,d7
(1) 1823/FFFFFFFFFFFF0F36 : 6710                		beq.s	.invalid
(1) 1824/FFFFFFFFFFFF0F38 : 6B0E                		bmi.s	.invalid
(1) 1825/FFFFFFFFFFFF0F3A : 5347                		subq.w	#1,d7
(1) 1826/FFFFFFFFFFFF0F3C :                     .next_one:
(1) 1827/FFFFFFFFFFFF0F3C : 205D                		move.l	(a5)+,a0
(1) 1828/FFFFFFFFFFFF0F3E : 301D                		move.w	(a5)+,d0
(1) 1829/FFFFFFFFFFFF0F40 : 321D                		move.w	(a5)+,d1
(1) 1830/FFFFFFFFFFFF0F42 : 6194                		bsr	Video_FadePal
(1) 1831/FFFFFFFFFFFF0F44 : 51CF FFF6           		dbf	d7,.next_one
(1) 1832/FFFFFFFFFFFF0F48 :                     .invalid:
(1) 1833/FFFFFFFFFFFF0F48 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1834/FFFFFFFFFFFF0F4C : 4E75                		rts
(1) 1835/FFFFFFFFFFFF0F4E :                     
(1) 1836/FFFFFFFFFFFF0F4E :                     ; ====================================================================
(1) 1837/FFFFFFFFFFFF0F4E :                     ; ----------------------------------------------------------------
(1) 1838/FFFFFFFFFFFF0F4E :                     ; Text PRINT system.
(1) 1839/FFFFFFFFFFFF0F4E :                     ; ----------------------------------------------------------------
(1) 1840/FFFFFFFFFFFF0F4E :                     
(1) 1841/FFFFFFFFFFFF0F4E :                     ; --------------------------------------------------------
(1) 1842/FFFFFFFFFFFF0F4E :                     ; Video_PrintInit, Video_PrintInitW
(1) 1843/FFFFFFFFFFFF0F4E :                     ;
(1) 1844/FFFFFFFFFFFF0F4E :                     ; Initializes the default Graphics and Palette
(1) 1845/FFFFFFFFFFFF0F4E :                     ; for the font.
(1) 1846/FFFFFFFFFFFF0F4E :                     ;
(1) 1847/FFFFFFFFFFFF0F4E :                     ; Input:
(1) 1848/FFFFFFFFFFFF0F4E :                     ; d0.l | Graphics data
(1) 1849/FFFFFFFFFFFF0F4E :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1850/FFFFFFFFFFFF0F4E :                     ; d1.w | VRAM output location to load and use
(1) 1851/FFFFFFFFFFFF0F4E :                     ;        the ASCII text including attribute
(1) 1852/FFFFFFFFFFFF0F4E :                     ;        settings (Palette and Priority)
(1) 1853/FFFFFFFFFFFF0F4E :                     ;        Defualt values are:
(1) 1854/FFFFFFFFFFFF0F4E :                     ;        DEF_PrintVram for 8x8 and
(1) 1855/FFFFFFFFFFFF0F4E :                     ;        DEF_PrintVramW for 8x16
(1) 1856/FFFFFFFFFFFF0F4E :                     ;
(1) 1857/FFFFFFFFFFFF0F4E :                     ; Breaks:
(1) 1858/FFFFFFFFFFFF0F4E :                     ; d0-d3
(1) 1859/FFFFFFFFFFFF0F4E :                     ;
(1) 1860/FFFFFFFFFFFF0F4E :                     ; Notes:
(1) 1861/FFFFFFFFFFFF0F4E :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1862/FFFFFFFFFFFF0F4E :                     ; - Write your palette manually after this
(1) 1863/FFFFFFFFFFFF0F4E :                     ; --------------------------------------------------------
(1) 1864/FFFFFFFFFFFF0F4E :                     
(1) 1865/FFFFFFFFFFFF0F4E :                     Video_PrintInitW:
(1) 1866/FFFFFFFFFFFF0F4E : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1867/FFFFFFFFFFFF0F52 : 3601                		move.w	d1,d3
(1) 1868/FFFFFFFFFFFF0F54 : 0443 0040           		subi.w	#$20*2,d3
(1) 1869/FFFFFFFFFFFF0F58 : 31C3 DC02           		move.w	d3,(RAM_SetPrntVramW).w
(1) 1870/FFFFFFFFFFFF0F5C : 600E                		bra.s	vidPrint_Init
(1) 1871/FFFFFFFFFFFF0F5E :                     Video_PrintInit:
(1) 1872/FFFFFFFFFFFF0F5E : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1873/FFFFFFFFFFFF0F62 : 3601                		move.w	d1,d3
(1) 1874/FFFFFFFFFFFF0F64 : 0443 0020           		subi.w	#$20,d3
(1) 1875/FFFFFFFFFFFF0F68 : 31C3 DC00           		move.w	d3,(RAM_SetPrntVram).w
(1) 1876/FFFFFFFFFFFF0F6C :                     vidPrint_Init:
(1) 1877/FFFFFFFFFFFF0F6C : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1878/FFFFFFFFFFFF0F6E : 6000 F8E0           		bra	Video_LoadArt
(1) 1879/FFFFFFFFFFFF0F72 :                     
(1) 1880/FFFFFFFFFFFF0F72 :                     ; --------------------------------------------------------
(1) 1881/FFFFFFFFFFFF0F72 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1882/FFFFFFFFFFFF0F72 :                     ;
(1) 1883/FFFFFFFFFFFF0F72 :                     ; Loads default palette for the font
(1) 1884/FFFFFFFFFFFF0F72 :                     ; --------------------------------------------------------
(1) 1885/FFFFFFFFFFFF0F72 :                     
(1) 1886/FFFFFFFFFFFF0F72 :                     Video_PrintDefPal_Fade:
(1) 1887/FFFFFFFFFFFF0F72 : 2F0E                		move.l	a6,-(sp)
(1) 1888/FFFFFFFFFFFF0F74 : 4DF8 DA4E           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1889/FFFFFFFFFFFF0F78 : 6006                		bra.s	vid_FontDefPal
(1) 1890/FFFFFFFFFFFF0F7A :                     Video_PrintDefPal:
(1) 1891/FFFFFFFFFFFF0F7A : 2F0E                		move.l	a6,-(sp)
(1) 1892/FFFFFFFFFFFF0F7C : 4DF8 D9CE           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1893/FFFFFFFFFFFF0F80 :                     vid_FontDefPal:
(1) 1894/FFFFFFFFFFFF0F80 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1895/FFFFFFFFFFFF0F84 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1896/FFFFFFFFFFFF0F88 : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1897/FFFFFFFFFFFF0F8C : 2C5F                		move.l	(sp)+,a6
(1) 1898/FFFFFFFFFFFF0F8E : 4E75                		rts
(1) 1899/FFFFFFFFFFFF0F90 :                     
(1) 1900/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1901/FFFFFFFFFFFF0F90 :                     ; Video_Print, Video_PrintW
(1) 1902/FFFFFFFFFFFF0F90 :                     ;
(1) 1903/FFFFFFFFFFFF0F90 :                     ; Prints a text string, VDP side.
(1) 1904/FFFFFFFFFFFF0F90 :                     ;
(1) 1905/FFFFFFFFFFFF0F90 :                     ; Input:
(1) 1906/FFFFFFFFFFFF0F90 :                     ; a0   | String data
(1) 1907/FFFFFFFFFFFF0F90 :                     ; d0.w | X position
(1) 1908/FFFFFFFFFFFF0F90 :                     ; d1.w | Y position
(1) 1909/FFFFFFFFFFFF0F90 :                     ; d2.w | Screen VRAM location
(1) 1910/FFFFFFFFFFFF0F90 :                     ;        Foreground: DEF_VRAM_FG
(1) 1911/FFFFFFFFFFFF0F90 :                     ;        Background: DEF_VRAM_BG
(1) 1912/FFFFFFFFFFFF0F90 :                     ;        Window:     DEF_VRAM_WD
(1) 1913/FFFFFFFFFFFF0F90 :                     ;
(1) 1914/FFFFFFFFFFFF0F90 :                     ; d3.w | Screen width
(1) 1915/FFFFFFFFFFFF0F90 :                     ;        - $040 (DEF_HSIZE_32)
(1) 1916/FFFFFFFFFFFF0F90 :                     ;        - $080 (DEF_HSIZE_64)
(1) 1917/FFFFFFFFFFFF0F90 :                     ;        - $100 (DEF_HSIZE_128)
(1) 1918/FFFFFFFFFFFF0F90 :                     ;
(1) 1919/FFFFFFFFFFFF0F90 :                     ; Notes:
(1) 1920/FFFFFFFFFFFF0F90 :                     ; - Initialize your graphics and VRAM location
(1) 1921/FFFFFFFFFFFF0F90 :                     ;   with Video_PrintInit
(1) 1922/FFFFFFFFFFFF0F90 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1923/FFFFFFFFFFFF0F90 :                     ;   mode.
(1) 1924/FFFFFFFFFFFF0F90 :                     ; --------------------------------------------------------
(1) 1925/FFFFFFFFFFFF0F90 :                     
(1) 1926/FFFFFFFFFFFF0F90 :                     ; dc.l pstr(type,ram_location)
(1) 1927/FFFFFFFFFFFF0F90 :                     ;
(1) 1928/FFFFFFFFFFFF0F90 :                     ; type:
(1) 1929/FFFFFFFFFFFF0F90 :                     ; 0 - Byte
(1) 1930/FFFFFFFFFFFF0F90 :                     ; 1 - Word
(1) 1931/FFFFFFFFFFFF0F90 :                     ; 2 - 24-bit
(1) 1932/FFFFFFFFFFFF0F90 :                     ; 3 - Long
(1) 1933/FFFFFFFFFFFF0F90 :                     
(1) 1934/FFFFFFFFFFFF0F90 :                     Video_Print:
(1) 1935/FFFFFFFFFFFF0F90 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1936/FFFFFFFFFFFF0F94 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1937/FFFFFFFFFFFF0F9A : 3E02                		move.w	d2,d7
(1) 1938/FFFFFFFFFFFF0F9C : 3A00                		move.w	d0,d5
(1) 1939/FFFFFFFFFFFF0F9E : DA45                		add.w	d5,d5
(1) 1940/FFFFFFFFFFFF0FA0 : 3801                		move.w	d1,d4
(1) 1941/FFFFFFFFFFFF0FA2 : C8C3                		mulu.w	d3,d4
(1) 1942/FFFFFFFFFFFF0FA4 : DA44                		add.w	d4,d5
(1) 1943/FFFFFFFFFFFF0FA6 : DE45                		add.w	d5,d7
(1) 1944/FFFFFFFFFFFF0FA8 : 3C03                		move.w	d3,d6
(1) 1945/FFFFFFFFFFFF0FAA :                     
(1) 1946/FFFFFFFFFFFF0FAA : 7A00                		moveq	#0,d5
(1) 1947/FFFFFFFFFFFF0FAC : 3A07                		move.w	d7,d5
(1) 1948/FFFFFFFFFFFF0FAE : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1949/FFFFFFFFFFFF0FB2 : 8E7C 4000           		or.w	#$4000,d7
(1) 1950/FFFFFFFFFFFF0FB6 : E55D                		rol.w	#2,d5
(1) 1951/FFFFFFFFFFFF0FB8 : 0245 0003           		andi.w	#%11,d5
(1) 1952/FFFFFFFFFFFF0FBC : 4845                		swap	d5
(1) 1953/FFFFFFFFFFFF0FBE : 2A48                		move.l	a0,a5
(1) 1954/FFFFFFFFFFFF0FC0 :                     .loop:
(1) 1955/FFFFFFFFFFFF0FC0 : 3806                		move.w	d6,d4
(1) 1956/FFFFFFFFFFFF0FC2 : 5344                		subq.w	#1,d4
(1) 1957/FFFFFFFFFFFF0FC4 : CA44                		and.w	d4,d5
(1) 1958/FFFFFFFFFFFF0FC6 :                     
(1) 1959/FFFFFFFFFFFF0FC6 : 3807                		move.w	d7,d4
(1) 1960/FFFFFFFFFFFF0FC8 : D845                		add.w	d5,d4
(1) 1961/FFFFFFFFFFFF0FCA : 4845                		swap	d5
(1) 1962/FFFFFFFFFFFF0FCC : 3D44 0004           		move.w	d4,4(a6)
(1) 1963/FFFFFFFFFFFF0FD0 : 3D45 0004           		move.w	d5,4(a6)
(1) 1964/FFFFFFFFFFFF0FD4 : 4845                		swap	d5
(1) 1965/FFFFFFFFFFFF0FD6 :                     .q_loop:
(1) 1966/FFFFFFFFFFFF0FD6 : 181D                		move.b	(a5)+,d4
(1) 1967/FFFFFFFFFFFF0FD8 : 671C                		beq.s	.exit
(1) 1968/FFFFFFFFFFFF0FDA : 6B20                		bmi.s	.special
(1) 1969/FFFFFFFFFFFF0FDC : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1970/FFFFFFFFFFFF0FE0 : 670E                		beq.s	.next
(1) 1971/FFFFFFFFFFFF0FE2 :                     ; ------------------------------------------------
(1) 1972/FFFFFFFFFFFF0FE2 :                     ; Normal text
(1) 1973/FFFFFFFFFFFF0FE2 : 0244 00FF           		andi.w	#$FF,d4
(1) 1974/FFFFFFFFFFFF0FE6 : D878 DC00           		add.w	(RAM_SetPrntVram).w,d4
(1) 1975/FFFFFFFFFFFF0FEA : 3C84                		move.w	d4,(a6)
(1) 1976/FFFFFFFFFFFF0FEC : 5445                		addq.w	#2,d5
(1) 1977/FFFFFFFFFFFF0FEE : 60E6                		bra.s	.q_loop
(1) 1978/FFFFFFFFFFFF0FF0 :                     .next:
(1) 1979/FFFFFFFFFFFF0FF0 : 4245                		clr.w	d5
(1) 1980/FFFFFFFFFFFF0FF2 : DE46                		add.w	d6,d7			; Next line
(1) 1981/FFFFFFFFFFFF0FF4 : 60CA                		bra.s	.loop
(1) 1982/FFFFFFFFFFFF0FF6 :                     .exit:
(1) 1983/FFFFFFFFFFFF0FF6 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1984/FFFFFFFFFFFF0FFA : 4E75                		rts
(1) 1985/FFFFFFFFFFFF0FFC :                     ; ------------------------------------------------
(1) 1986/FFFFFFFFFFFF0FFC :                     ; Show value
(1) 1987/FFFFFFFFFFFF0FFC :                     ; d4 - $80|flags
(1) 1988/FFFFFFFFFFFF0FFC :                     .special:
(1) 1989/FFFFFFFFFFFF0FFC : 4846                		swap	d6
(1) 1990/FFFFFFFFFFFF0FFE : 1C04                		move.b	d4,d6
(1) 1991/FFFFFFFFFFFF1000 : E19C                		rol.l	#8,d4
(1) 1992/FFFFFFFFFFFF1002 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 1993/FFFFFFFFFFFF1004 : E19C                		rol.l	#8,d4
(1) 1994/FFFFFFFFFFFF1006 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 1995/FFFFFFFFFFFF1008 : E19C                		rol.l	#8,d4
(1) 1996/FFFFFFFFFFFF100A : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 1997/FFFFFFFFFFFF100C : 2844                		move.l	d4,a4
(1) 1998/FFFFFFFFFFFF100E : 0246 0003           		andi.w	#%11,d6
(1) 1999/FFFFFFFFFFFF1012 : 4847                		swap	d7
(1) 2000/FFFFFFFFFFFF1014 : 3E3C 0000           		move.w	#1-1,d7
(1) 2001/FFFFFFFFFFFF1018 : BC3C 0003           		cmp.b	#$03,d6
(1) 2002/FFFFFFFFFFFF101C : 6724                		beq.s	.show_long
(1) 2003/FFFFFFFFFFFF101E : BC3C 0002           		cmp.b	#$02,d6
(1) 2004/FFFFFFFFFFFF1022 : 6716                		beq.s	.show_24
(1) 2005/FFFFFFFFFFFF1024 : BC3C 0001           		cmp.b	#$01,d6
(1) 2006/FFFFFFFFFFFF1028 : 6708                		beq.s	.show_word
(1) 2007/FFFFFFFFFFFF102A :                     .show_byte:
(1) 2008/FFFFFFFFFFFF102A : 1814                		move.b	(a4),d4
(1) 2009/FFFFFFFFFFFF102C : 4844                		swap	d4
(1) 2010/FFFFFFFFFFFF102E : E19C                		rol.l	#8,d4
(1) 2011/FFFFFFFFFFFF1030 : 6014                		bra.s	.mk_value
(1) 2012/FFFFFFFFFFFF1032 :                     .show_word:
(1) 2013/FFFFFFFFFFFF1032 : 3814                		move.w	(a4),d4
(1) 2014/FFFFFFFFFFFF1034 : 4844                		swap	d4
(1) 2015/FFFFFFFFFFFF1036 : 5247                		addq.w	#1,d7
(1) 2016/FFFFFFFFFFFF1038 : 600C                		bra.s	.mk_value
(1) 2017/FFFFFFFFFFFF103A :                     .show_24:
(1) 2018/FFFFFFFFFFFF103A : 2814                		move.l	(a4),d4
(1) 2019/FFFFFFFFFFFF103C : E19C                		rol.l	#8,d4
(1) 2020/FFFFFFFFFFFF103E : 5447                		addq.w	#2,d7
(1) 2021/FFFFFFFFFFFF1040 : 6004                		bra.s	.mk_value
(1) 2022/FFFFFFFFFFFF1042 :                     .show_long:
(1) 2023/FFFFFFFFFFFF1042 : 2814                		move.l	(a4),d4
(1) 2024/FFFFFFFFFFFF1044 : 5647                		addq.w	#3,d7
(1) 2025/FFFFFFFFFFFF1046 :                     .mk_value:
(1) 2026/FFFFFFFFFFFF1046 : E99C                		rol.l	#4,d4
(1) 2027/FFFFFFFFFFFF1048 : 6110                		bsr.s	.show_nibbl
(1) 2028/FFFFFFFFFFFF104A : E99C                		rol.l	#4,d4
(1) 2029/FFFFFFFFFFFF104C : 610C                		bsr.s	.show_nibbl
(1) 2030/FFFFFFFFFFFF104E : 51CF FFF6           		dbf	d7,.mk_value
(1) 2031/FFFFFFFFFFFF1052 : 4846                		swap	d6
(1) 2032/FFFFFFFFFFFF1054 : 4847                		swap	d7
(1) 2033/FFFFFFFFFFFF1056 : 6000 FF68           		bra	.loop
(1) 2034/FFFFFFFFFFFF105A :                     .show_nibbl:
(1) 2035/FFFFFFFFFFFF105A : 2846                		move.l	d6,a4
(1) 2036/FFFFFFFFFFFF105C : 1C04                		move.b	d4,d6
(1) 2037/FFFFFFFFFFFF105E : 0246 000F           		andi.w	#$0F,d6
(1) 2038/FFFFFFFFFFFF1062 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2039/FFFFFFFFFFFF1066 : 6502                		bcs.s	.hex_incr
(1) 2040/FFFFFFFFFFFF1068 : 5E46                		addq.w	#7,d6
(1) 2041/FFFFFFFFFFFF106A : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2042/FFFFFFFFFFFF106E : DC78 DC00           		add.w	(RAM_SetPrntVram).w,d6
(1) 2043/FFFFFFFFFFFF1072 : 3C86                		move.w	d6,(a6)
(1) 2044/FFFFFFFFFFFF1074 : 5445                		addq.w	#2,d5
(1) 2045/FFFFFFFFFFFF1076 : 2C0C                		move.l	a4,d6
(1) 2046/FFFFFFFFFFFF1078 : 4E75                		rts
(1) 2047/FFFFFFFFFFFF107A :                     
(1) 2048/FFFFFFFFFFFF107A :                     ; --------------------------------------------------------
(1) 2049/FFFFFFFFFFFF107A :                     ; 8x16 version
(1) 2050/FFFFFFFFFFFF107A :                     ; --------------------------------------------------------
(1) 2051/FFFFFFFFFFFF107A :                     
(1) 2052/FFFFFFFFFFFF107A :                     Video_PrintW:
(1) 2053/FFFFFFFFFFFF107A : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2054/FFFFFFFFFFFF107E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2055/FFFFFFFFFFFF1084 :                     
(1) 2056/FFFFFFFFFFFF1084 : 3C38 DC02           		move.w	(RAM_SetPrntVramW).w,d6
(1) 2057/FFFFFFFFFFFF1088 : 3A38 DC16           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2058/FFFFFFFFFFFF108C : 0805 0002           		btst	#2,d5
(1) 2059/FFFFFFFFFFFF1090 : 670E                		beq.s	.no_dble_y
(1) 2060/FFFFFFFFFFFF1092 : 3E06                		move.w	d6,d7
(1) 2061/FFFFFFFFFFFF1094 : 0247 F800           		andi.w	#$F800,d7
(1) 2062/FFFFFFFFFFFF1098 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2063/FFFFFFFFFFFF109C : E24E                		lsr.w	#1,d6
(1) 2064/FFFFFFFFFFFF109E : 8C47                		or.w	d7,d6
(1) 2065/FFFFFFFFFFFF10A0 :                     .no_dble_y:
(1) 2066/FFFFFFFFFFFF10A0 : 4846                		swap	d6
(1) 2067/FFFFFFFFFFFF10A2 : 3E02                		move.w	d2,d7
(1) 2068/FFFFFFFFFFFF10A4 : 3A00                		move.w	d0,d5
(1) 2069/FFFFFFFFFFFF10A6 : DA45                		add.w	d5,d5
(1) 2070/FFFFFFFFFFFF10A8 : 3801                		move.w	d1,d4
(1) 2071/FFFFFFFFFFFF10AA : C8C3                		mulu.w	d3,d4
(1) 2072/FFFFFFFFFFFF10AC : DA44                		add.w	d4,d5
(1) 2073/FFFFFFFFFFFF10AE : DE45                		add.w	d5,d7
(1) 2074/FFFFFFFFFFFF10B0 : 3C03                		move.w	d3,d6
(1) 2075/FFFFFFFFFFFF10B2 :                     
(1) 2076/FFFFFFFFFFFF10B2 : 7A00                		moveq	#0,d5
(1) 2077/FFFFFFFFFFFF10B4 : 3A07                		move.w	d7,d5
(1) 2078/FFFFFFFFFFFF10B6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2079/FFFFFFFFFFFF10BA : 8E7C 4000           		or.w	#$4000,d7
(1) 2080/FFFFFFFFFFFF10BE : E55D                		rol.w	#2,d5
(1) 2081/FFFFFFFFFFFF10C0 : 0245 0003           		andi.w	#%11,d5
(1) 2082/FFFFFFFFFFFF10C4 : 4845                		swap	d5
(1) 2083/FFFFFFFFFFFF10C6 : 2A48                		move.l	a0,a5
(1) 2084/FFFFFFFFFFFF10C8 :                     	; d7 -      TEMP       | VDP write left
(1) 2085/FFFFFFFFFFFF10C8 :                     	; d6 -      TEMP       | Y next-line size
(1) 2086/FFFFFFFFFFFF10C8 :                     	; d5 - VDP write right | X current pos
(1) 2087/FFFFFFFFFFFF10C8 :                     	; d4 -                 | TEMP
(1) 2088/FFFFFFFFFFFF10C8 :                     .loop:
(1) 2089/FFFFFFFFFFFF10C8 : 3806                		move.w	d6,d4
(1) 2090/FFFFFFFFFFFF10CA : 5344                		subq.w	#1,d4
(1) 2091/FFFFFFFFFFFF10CC : CA44                		and.w	d4,d5
(1) 2092/FFFFFFFFFFFF10CE : 181D                		move.b	(a5)+,d4
(1) 2093/FFFFFFFFFFFF10D0 : 6776                		beq.s	.exit
(1) 2094/FFFFFFFFFFFF10D2 : 6B7A                		bmi.s	.special
(1) 2095/FFFFFFFFFFFF10D4 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2096/FFFFFFFFFFFF10D8 : 6766                		beq.s	.next
(1) 2097/FFFFFFFFFFFF10DA :                     ; ------------------------------------------------
(1) 2098/FFFFFFFFFFFF10DA :                     ; Normal text
(1) 2099/FFFFFFFFFFFF10DA : 0244 00FF           		andi.w	#$FF,d4
(1) 2100/FFFFFFFFFFFF10DE : 4847                		swap	d7
(1) 2101/FFFFFFFFFFFF10E0 : 3E38 DC16           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2102/FFFFFFFFFFFF10E4 : 0807 0002           		btst	#2,d7
(1) 2103/FFFFFFFFFFFF10E8 : 671E                		beq.s	.ver_normal
(1) 2104/FFFFFFFFFFFF10EA : 4846                		swap	d6
(1) 2105/FFFFFFFFFFFF10EC : D846                		add.w	d6,d4
(1) 2106/FFFFFFFFFFFF10EE : 4846                		swap	d6
(1) 2107/FFFFFFFFFFFF10F0 : 4844                		swap	d4
(1) 2108/FFFFFFFFFFFF10F2 : 4847                		swap	d7
(1) 2109/FFFFFFFFFFFF10F4 : 3807                		move.w	d7,d4
(1) 2110/FFFFFFFFFFFF10F6 : D845                		add.w	d5,d4
(1) 2111/FFFFFFFFFFFF10F8 : 4845                		swap	d5
(1) 2112/FFFFFFFFFFFF10FA : 3D44 0004           		move.w	d4,4(a6)
(1) 2113/FFFFFFFFFFFF10FE : 3D45 0004           		move.w	d5,4(a6)
(1) 2114/FFFFFFFFFFFF1102 : 4844                		swap	d4
(1) 2115/FFFFFFFFFFFF1104 : 3C84                		move.w	d4,(a6)
(1) 2116/FFFFFFFFFFFF1106 : 6032                		bra.s	.ver_cont
(1) 2117/FFFFFFFFFFFF1108 :                     .ver_normal:
(1) 2118/FFFFFFFFFFFF1108 : D844                		add.w	d4,d4
(1) 2119/FFFFFFFFFFFF110A : 4846                		swap	d6
(1) 2120/FFFFFFFFFFFF110C : D846                		add.w	d6,d4
(1) 2121/FFFFFFFFFFFF110E : 4846                		swap	d6
(1) 2122/FFFFFFFFFFFF1110 : 4844                		swap	d4
(1) 2123/FFFFFFFFFFFF1112 : 4847                		swap	d7
(1) 2124/FFFFFFFFFFFF1114 : 3807                		move.w	d7,d4
(1) 2125/FFFFFFFFFFFF1116 : D845                		add.w	d5,d4
(1) 2126/FFFFFFFFFFFF1118 : 4845                		swap	d5
(1) 2127/FFFFFFFFFFFF111A : 3D44 0004           		move.w	d4,4(a6)
(1) 2128/FFFFFFFFFFFF111E : 3D45 0004           		move.w	d5,4(a6)
(1) 2129/FFFFFFFFFFFF1122 : 4844                		swap	d4
(1) 2130/FFFFFFFFFFFF1124 : 3C84                		move.w	d4,(a6)
(1) 2131/FFFFFFFFFFFF1126 : 5244                		addq.w	#1,d4
(1) 2132/FFFFFFFFFFFF1128 : 4844                		swap	d4
(1) 2133/FFFFFFFFFFFF112A : D846                		add.w	d6,d4
(1) 2134/FFFFFFFFFFFF112C : 3D44 0004           		move.w	d4,4(a6)
(1) 2135/FFFFFFFFFFFF1130 : 3D45 0004           		move.w	d5,4(a6)
(1) 2136/FFFFFFFFFFFF1134 : 4844                		swap	d4
(1) 2137/FFFFFFFFFFFF1136 : 3C84                		move.w	d4,(a6)
(1) 2138/FFFFFFFFFFFF1138 : 4844                		swap	d4
(1) 2139/FFFFFFFFFFFF113A :                     
(1) 2140/FFFFFFFFFFFF113A :                     .ver_cont:
(1) 2141/FFFFFFFFFFFF113A : 4845                		swap	d5
(1) 2142/FFFFFFFFFFFF113C : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2143/FFFFFFFFFFFF113E : 6088                		bra.s	.loop
(1) 2144/FFFFFFFFFFFF1140 :                     .next:
(1) 2145/FFFFFFFFFFFF1140 : 4245                		clr.w	d5		; Clear X pos
(1) 2146/FFFFFFFFFFFF1142 : DE46                		add.w	d6,d7		; Next Y line
(1) 2147/FFFFFFFFFFFF1144 : DE46                		add.w	d6,d7		; twice
(1) 2148/FFFFFFFFFFFF1146 : 6080                		bra	.loop
(1) 2149/FFFFFFFFFFFF1148 :                     .exit:
(1) 2150/FFFFFFFFFFFF1148 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2151/FFFFFFFFFFFF114C : 4E75                		rts
(1) 2152/FFFFFFFFFFFF114E :                     ; ------------------------------------------------
(1) 2153/FFFFFFFFFFFF114E :                     ; Show value
(1) 2154/FFFFFFFFFFFF114E :                     ; d4 - $80|flags
(1) 2155/FFFFFFFFFFFF114E :                     .special:
(1) 2156/FFFFFFFFFFFF114E : 2646                		move.l	d6,a3
(1) 2157/FFFFFFFFFFFF1150 : 1C04                		move.b	d4,d6
(1) 2158/FFFFFFFFFFFF1152 : E19C                		rol.l	#8,d4
(1) 2159/FFFFFFFFFFFF1154 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2160/FFFFFFFFFFFF1156 : E19C                		rol.l	#8,d4
(1) 2161/FFFFFFFFFFFF1158 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2162/FFFFFFFFFFFF115A : E19C                		rol.l	#8,d4
(1) 2163/FFFFFFFFFFFF115C : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2164/FFFFFFFFFFFF115E : 2844                		move.l	d4,a4
(1) 2165/FFFFFFFFFFFF1160 : 0246 0003           		andi.w	#%11,d6
(1) 2166/FFFFFFFFFFFF1164 : 4847                		swap	d7
(1) 2167/FFFFFFFFFFFF1166 : 3E3C 0000           		move.w	#1-1,d7
(1) 2168/FFFFFFFFFFFF116A : BC3C 0003           		cmp.b	#$03,d6
(1) 2169/FFFFFFFFFFFF116E : 6724                		beq.s	.show_long
(1) 2170/FFFFFFFFFFFF1170 : BC3C 0002           		cmp.b	#$02,d6
(1) 2171/FFFFFFFFFFFF1174 : 6716                		beq.s	.show_24
(1) 2172/FFFFFFFFFFFF1176 : BC3C 0001           		cmp.b	#$01,d6
(1) 2173/FFFFFFFFFFFF117A : 6708                		beq.s	.show_word
(1) 2174/FFFFFFFFFFFF117C :                     .show_byte:
(1) 2175/FFFFFFFFFFFF117C : 1814                		move.b	(a4),d4
(1) 2176/FFFFFFFFFFFF117E : 4844                		swap	d4
(1) 2177/FFFFFFFFFFFF1180 : E19C                		rol.l	#8,d4
(1) 2178/FFFFFFFFFFFF1182 : 6014                		bra.s	.mk_value_in
(1) 2179/FFFFFFFFFFFF1184 :                     .show_word:
(1) 2180/FFFFFFFFFFFF1184 : 3814                		move.w	(a4),d4
(1) 2181/FFFFFFFFFFFF1186 : 4844                		swap	d4
(1) 2182/FFFFFFFFFFFF1188 : 5247                		addq.w	#1,d7
(1) 2183/FFFFFFFFFFFF118A : 600C                		bra.s	.mk_value_in
(1) 2184/FFFFFFFFFFFF118C :                     .show_24:
(1) 2185/FFFFFFFFFFFF118C : 2814                		move.l	(a4),d4
(1) 2186/FFFFFFFFFFFF118E : E19C                		rol.l	#8,d4
(1) 2187/FFFFFFFFFFFF1190 : 5447                		addq.w	#2,d7
(1) 2188/FFFFFFFFFFFF1192 : 6004                		bra.s	.mk_value_in
(1) 2189/FFFFFFFFFFFF1194 :                     .show_long:
(1) 2190/FFFFFFFFFFFF1194 : 2814                		move.l	(a4),d4
(1) 2191/FFFFFFFFFFFF1196 : 5647                		addq.w	#3,d7
(1) 2192/FFFFFFFFFFFF1198 :                     .mk_value_in:
(1) 2193/FFFFFFFFFFFF1198 : 2C0B                		move.l	a3,d6
(1) 2194/FFFFFFFFFFFF119A :                     
(1) 2195/FFFFFFFFFFFF119A :                     
(1) 2196/FFFFFFFFFFFF119A :                     	; d4 - value
(1) 2197/FFFFFFFFFFFF119A : 4846                		swap	d6
(1) 2198/FFFFFFFFFFFF119C :                     .mk_value:
(1) 2199/FFFFFFFFFFFF119C : E99C                		rol.l	#4,d4
(1) 2200/FFFFFFFFFFFF119E : 6110                		bsr.s	.show_nibbl
(1) 2201/FFFFFFFFFFFF11A0 : E99C                		rol.l	#4,d4
(1) 2202/FFFFFFFFFFFF11A2 : 610C                		bsr.s	.show_nibbl
(1) 2203/FFFFFFFFFFFF11A4 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2204/FFFFFFFFFFFF11A8 : 4846                		swap	d6
(1) 2205/FFFFFFFFFFFF11AA : 4847                		swap	d7
(1) 2206/FFFFFFFFFFFF11AC : 6000 FF1A           		bra	.loop
(1) 2207/FFFFFFFFFFFF11B0 :                     
(1) 2208/FFFFFFFFFFFF11B0 :                     	; d6 - Y next-line size | TEMP
(1) 2209/FFFFFFFFFFFF11B0 :                     .show_nibbl:
(1) 2210/FFFFFFFFFFFF11B0 : 2846                		move.l	d6,a4
(1) 2211/FFFFFFFFFFFF11B2 : 2644                		move.l	d4,a3
(1) 2212/FFFFFFFFFFFF11B4 : 3C38 DC16           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2213/FFFFFFFFFFFF11B8 : 0806 0002           		btst	#2,d6
(1) 2214/FFFFFFFFFFFF11BC : 6730                		beq.s	.nibbl_norm
(1) 2215/FFFFFFFFFFFF11BE :                     
(1) 2216/FFFFFFFFFFFF11BE : 616A                		bsr.s	.get_preval
(1) 2217/FFFFFFFFFFFF11C0 : 4847                		swap	d7
(1) 2218/FFFFFFFFFFFF11C2 : 3838 DC02           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2219/FFFFFFFFFFFF11C6 : 0244 07FF           		andi.w	#$7FF,d4
(1) 2220/FFFFFFFFFFFF11CA : E24C                		lsr.w	#1,d4
(1) 2221/FFFFFFFFFFFF11CC : DC44                		add.w	d4,d6
(1) 2222/FFFFFFFFFFFF11CE : 3838 DC02           		move.w	(RAM_SetPrntVramW).w,d4
(1) 2223/FFFFFFFFFFFF11D2 : 0244 F800           		andi.w	#$F800,d4
(1) 2224/FFFFFFFFFFFF11D6 : 8C44                		or.w	d4,d6
(1) 2225/FFFFFFFFFFFF11D8 : 3807                		move.w	d7,d4
(1) 2226/FFFFFFFFFFFF11DA : 4847                		swap	d7
(1) 2227/FFFFFFFFFFFF11DC : D845                		add.w	d5,d4
(1) 2228/FFFFFFFFFFFF11DE : 4845                		swap	d5
(1) 2229/FFFFFFFFFFFF11E0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2230/FFFFFFFFFFFF11E4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2231/FFFFFFFFFFFF11E8 : 4845                		swap	d5
(1) 2232/FFFFFFFFFFFF11EA : 3C86                		move.w	d6,(a6)
(1) 2233/FFFFFFFFFFFF11EC : 6034                		bra.s	.nibbl_cont
(1) 2234/FFFFFFFFFFFF11EE :                     
(1) 2235/FFFFFFFFFFFF11EE :                     .nibbl_norm:
(1) 2236/FFFFFFFFFFFF11EE : 613A                		bsr.s	.get_preval
(1) 2237/FFFFFFFFFFFF11F0 : DC46                		add.w	d6,d6
(1) 2238/FFFFFFFFFFFF11F2 : DC78 DC02           		add.w	(RAM_SetPrntVramW).w,d6
(1) 2239/FFFFFFFFFFFF11F6 : 4847                		swap	d7
(1) 2240/FFFFFFFFFFFF11F8 : 3807                		move.w	d7,d4
(1) 2241/FFFFFFFFFFFF11FA : 4847                		swap	d7
(1) 2242/FFFFFFFFFFFF11FC : D845                		add.w	d5,d4
(1) 2243/FFFFFFFFFFFF11FE : 4845                		swap	d5
(1) 2244/FFFFFFFFFFFF1200 : 3D44 0004           		move.w	d4,4(a6)
(1) 2245/FFFFFFFFFFFF1204 : 3D45 0004           		move.w	d5,4(a6)
(1) 2246/FFFFFFFFFFFF1208 : 4845                		swap	d5
(1) 2247/FFFFFFFFFFFF120A : 3C86                		move.w	d6,(a6)
(1) 2248/FFFFFFFFFFFF120C : 5246                		addq.w	#1,d6
(1) 2249/FFFFFFFFFFFF120E : 4846                		swap	d6
(1) 2250/FFFFFFFFFFFF1210 : D846                		add.w	d6,d4
(1) 2251/FFFFFFFFFFFF1212 : 4846                		swap	d6
(1) 2252/FFFFFFFFFFFF1214 : 4845                		swap	d5
(1) 2253/FFFFFFFFFFFF1216 : 3D44 0004           		move.w	d4,4(a6)
(1) 2254/FFFFFFFFFFFF121A : 3D45 0004           		move.w	d5,4(a6)
(1) 2255/FFFFFFFFFFFF121E : 4845                		swap	d5
(1) 2256/FFFFFFFFFFFF1220 : 3C86                		move.w	d6,(a6)
(1) 2257/FFFFFFFFFFFF1222 :                     .nibbl_cont:
(1) 2258/FFFFFFFFFFFF1222 : 5445                		addq.w	#2,d5
(1) 2259/FFFFFFFFFFFF1224 : 2C0C                		move.l	a4,d6
(1) 2260/FFFFFFFFFFFF1226 : 280B                		move.l	a3,d4
(1) 2261/FFFFFFFFFFFF1228 : 4E75                		rts
(1) 2262/FFFFFFFFFFFF122A :                     
(1) 2263/FFFFFFFFFFFF122A :                     .get_preval:
(1) 2264/FFFFFFFFFFFF122A : 1C04                		move.b	d4,d6
(1) 2265/FFFFFFFFFFFF122C : 0246 000F           		andi.w	#$0F,d6
(1) 2266/FFFFFFFFFFFF1230 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2267/FFFFFFFFFFFF1234 : 6502                		bcs.s	.hex_incr
(1) 2268/FFFFFFFFFFFF1236 : 5E46                		addq.w	#7,d6
(1) 2269/FFFFFFFFFFFF1238 :                     .hex_incr:
(1) 2270/FFFFFFFFFFFF1238 : DC7C 0030           		add.w	#"0",d6
(1) 2271/FFFFFFFFFFFF123C : 4E75                		rts
(1) 2272/FFFFFFFFFFFF123E :                     
(1) 2273/FFFFFFFFFFFF123E :                     ; ------------------------------------------------
(1) 2274/FFFFFFFFFFFF123E :                     ; Input:
(1) 2275/FFFFFFFFFFFF123E :                     ; d2.w | Layer:
(1) 2276/FFFFFFFFFFFF123E :                     ;        0 - Foreground
(1) 2277/FFFFFFFFFFFF123E :                     ;        1 - Background
(1) 2278/FFFFFFFFFFFF123E :                     ;        2 - WINDOW
(1) 2279/FFFFFFFFFFFF123E :                     ;
(1) 2280/FFFFFFFFFFFF123E :                     ; Returns:
(1) 2281/FFFFFFFFFFFF123E :                     ; d7 - VRAM location
(1) 2282/FFFFFFFFFFFF123E :                     ; d6 - Y jump size
(1) 2283/FFFFFFFFFFFF123E :                     ; ------------------------------------------------
(1) 2284/FFFFFFFFFFFF123E :                     
(1) 2285/FFFFFFFFFFFF123E :                     ; vidSub_PickLayer:
(1) 2286/FFFFFFFFFFFF123E :                     ; 		move.w	d2,d7
(1) 2287/FFFFFFFFFFFF123E :                     ; 		lsl.w	#2,d7
(1) 2288/FFFFFFFFFFFF123E :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2289/FFFFFFFFFFFF123E :                     ; 		lea	.filter_data(pc),a4
(1) 2290/FFFFFFFFFFFF123E :                     ; 		adda	d7,a4
(1) 2291/FFFFFFFFFFFF123E :                     ; 		moveq	#0,d7
(1) 2292/FFFFFFFFFFFF123E :                     ; 		moveq	#0,d5
(1) 2293/FFFFFFFFFFFF123E :                     ; 		move.b	(a4),d7
(1) 2294/FFFFFFFFFFFF123E :                     ; 		adda	d7,a5
(1) 2295/FFFFFFFFFFFF123E :                     ; 		move.b	1(a4),d6
(1) 2296/FFFFFFFFFFFF123E :                     ; 		move.b	2(a4),d5
(1) 2297/FFFFFFFFFFFF123E :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2298/FFFFFFFFFFFF123E :                     ; 		and.b	d6,d7		; filter
(1) 2299/FFFFFFFFFFFF123E :                     ; 		lsl.w	d5,d7		; shift left
(1) 2300/FFFFFFFFFFFF123E :                     ; 		move.w	#$40,d6
(1) 2301/FFFFFFFFFFFF123E :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2302/FFFFFFFFFFFF123E :                     ; 		andi.w	#%00000011,d6
(1) 2303/FFFFFFFFFFFF123E :                     ; 		add.w	d6,d6
(1) 2304/FFFFFFFFFFFF123E :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2305/FFFFFFFFFFFF123E :                     ; 		rts
(1) 2306/FFFFFFFFFFFF123E :                     ; .filter_data:
(1) 2307/FFFFFFFFFFFF123E :                     ; 		dc.b $00		; Reg slot
(1) 2308/FFFFFFFFFFFF123E :                     ; 		dc.b %00111000		; Filter bits
(1) 2309/FFFFFFFFFFFF123E :                     ; 		dc.b 10,0		; shift left, 0
(1) 2310/FFFFFFFFFFFF123E :                     ; 		dc.b $02
(1) 2311/FFFFFFFFFFFF123E :                     ; 		dc.b %00000111
(1) 2312/FFFFFFFFFFFF123E :                     ; 		dc.b 13,0
(1) 2313/FFFFFFFFFFFF123E :                     ; 		dc.b $01
(1) 2314/FFFFFFFFFFFF123E :                     ; 		dc.b %00111110
(1) 2315/FFFFFFFFFFFF123E :                     ; 		dc.b 10,0
(1) 2316/FFFFFFFFFFFF123E :                     ; .jump_sizes:	dc.w $040
(1) 2317/FFFFFFFFFFFF123E :                     ; 		dc.w $080
(1) 2318/FFFFFFFFFFFF123E :                     ; 		dc.w $080
(1) 2319/FFFFFFFFFFFF123E :                     ; 		dc.w $100
(1) 2320/FFFFFFFFFFFF123E :                     
(1) 2321/FFFFFFFFFFFF123E :                     ; ====================================================================
(1) 2322/FFFFFFFFFFFF123E :                     ; ----------------------------------------------------------------
(1) 2323/FFFFFFFFFFFF123E :                     ; VDP Sprites
(1) 2324/FFFFFFFFFFFF123E :                     ; ----------------------------------------------------------------
(1) 2325/FFFFFFFFFFFF123E :                     
(1) 2326/FFFFFFFFFFFF123E :                     ; --------------------------------------------------------
(1) 2327/FFFFFFFFFFFF123E :                     ; Video_SetSpr, Video_MakeSpr
(1) 2328/FFFFFFFFFFFF123E :                     ;
(1) 2329/FFFFFFFFFFFF123E :                     ; Sets or Makes a VDP Sprite piece
(1) 2330/FFFFFFFFFFFF123E :                     ;
(1) 2331/FFFFFFFFFFFF123E :                     ; Input:
(1) 2332/FFFFFFFFFFFF123E :                     ; a0   | Slot (0-80)
(1) 2333/FFFFFFFFFFFF123E :                     ; d0.w | X pos
(1) 2334/FFFFFFFFFFFF123E :                     ; d1.w | Y pos
(1) 2335/FFFFFFFFFFFF123E :                     ; d2.w | VRAM
(1) 2336/FFFFFFFFFFFF123E :                     ; d3.w | Size
(1) 2337/FFFFFFFFFFFF123E :                     ;
(1) 2338/FFFFFFFFFFFF123E :                     ; Returns:
(1) 2339/FFFFFFFFFFFF123E :                     ; bcc | OK
(1) 2340/FFFFFFFFFFFF123E :                     ; bcs | Ran out of slots (not sprites)
(1) 2341/FFFFFFFFFFFF123E :                     ; --------------------------------------------------------
(1) 2342/FFFFFFFFFFFF123E :                     
(1) 2343/FFFFFFFFFFFF123E :                     Video_SetSpr:
(1) 2344/FFFFFFFFFFFF123E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2345/FFFFFFFFFFFF1242 : 2E08                		move.l	a0,d7
(1) 2346/FFFFFFFFFFFF1244 : 7C00                		moveq	#0,d6
(1) 2347/FFFFFFFFFFFF1246 : 6020                		bra	vidMdSpr_MkSpr
(1) 2348/FFFFFFFFFFFF1248 :                     Video_MakeSpr:
(1) 2349/FFFFFFFFFFFF1248 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2350/FFFFFFFFFFFF124C : 7E00                		moveq	#0,d7
(1) 2351/FFFFFFFFFFFF124E : 4DF8 CDDE           		lea	(RAM_SprPzList).w,a6
(1) 2352/FFFFFFFFFFFF1252 : 7C4F                		moveq	#80-1,d6
(1) 2353/FFFFFFFFFFFF1254 :                     .chk_free:
(1) 2354/FFFFFFFFFFFF1254 : 0816 0007           		btst	#7,(a6)
(1) 2355/FFFFFFFFFFFF1258 : 670C                		beq.s	.mk_spr
(1) 2356/FFFFFFFFFFFF125A : 5247                		addq.w	#1,d7
(1) 2357/FFFFFFFFFFFF125C : DCFC 0008           		adda	#8,a6
(1) 2358/FFFFFFFFFFFF1260 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2359/FFFFFFFFFFFF1264 : 605C                		bra.s	vidMd_CError
(1) 2360/FFFFFFFFFFFF1266 :                     .mk_spr:
(1) 2361/FFFFFFFFFFFF1266 : 7C40                		moveq	#$40,d6
(1) 2362/FFFFFFFFFFFF1268 :                     vidMdSpr_MkSpr:
(1) 2363/FFFFFFFFFFFF1268 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2364/FFFFFFFFFFFF126E : BE7C 0050           		cmp.w	#80,d7
(1) 2365/FFFFFFFFFFFF1272 : 6C4E                		bge.s	vidMd_CError
(1) 2366/FFFFFFFFFFFF1274 : E74F                		lsl.w	#3,d7
(1) 2367/FFFFFFFFFFFF1276 : 0687 FFFF CDDE      		addi.l	#RAM_SprPzList,d7
(1) 2368/FFFFFFFFFFFF127C : 2C47                		move.l	d7,a6
(1) 2369/FFFFFFFFFFFF127E : 4846                		swap	d6
(1) 2370/FFFFFFFFFFFF1280 : 3E01                		move.w	d1,d7			; Y pos
(1) 2371/FFFFFFFFFFFF1282 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2372/FFFFFFFFFFFF1286 : 0838 0002 DC17      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2373/FFFFFFFFFFFF128C : 6704                		beq.s	.dont_add
(1) 2374/FFFFFFFFFFFF128E : 0647 0080           		addi.w	#$80,d7
(1) 2375/FFFFFFFFFFFF1292 :                     .dont_add:
(1) 2376/FFFFFFFFFFFF1292 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2377/FFFFFFFFFFFF1296 : 3C03                		move.w	d3,d6
(1) 2378/FFFFFFFFFFFF1298 : 0246 000F           		andi.w	#%1111,d6
(1) 2379/FFFFFFFFFFFF129C : E14E                		lsl.w	#8,d6
(1) 2380/FFFFFFFFFFFF129E : E54E                		lsl.w	#2,d6
(1) 2381/FFFFFFFFFFFF12A0 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2382/FFFFFFFFFFFF12A2 : 4846                		swap	d6
(1) 2383/FFFFFFFFFFFF12A4 : E14E                		lsl.w	#8,d6
(1) 2384/FFFFFFFFFFFF12A6 : 8E7C 8000           		or.w	#$8000,d7
(1) 2385/FFFFFFFFFFFF12AA : 8E46                		or.w	d6,d7
(1) 2386/FFFFFFFFFFFF12AC : 3CC7                		move.w	d7,(a6)+
(1) 2387/FFFFFFFFFFFF12AE : 3E00                		move.w	d0,d7
(1) 2388/FFFFFFFFFFFF12B0 : 0647 0080           		addi.w	#$80,d7
(1) 2389/FFFFFFFFFFFF12B4 : 3CC7                		move.w	d7,(a6)+
(1) 2390/FFFFFFFFFFFF12B6 : 3CC2                		move.w	d2,(a6)+
(1) 2391/FFFFFFFFFFFF12B8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2392/FFFFFFFFFFFF12BC : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2393/FFFFFFFFFFFF12C0 : 4E75                		rts
(1) 2394/FFFFFFFFFFFF12C2 :                     ; Carry error
(1) 2395/FFFFFFFFFFFF12C2 :                     vidMd_CError:
(1) 2396/FFFFFFFFFFFF12C2 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2397/FFFFFFFFFFFF12C6 : 003C 0001           		or	#1,ccr			; Return Error
(1) 2398/FFFFFFFFFFFF12CA :                     vidMd_CFreeze:
(1) 2399/FFFFFFFFFFFF12CA : 4E75                		rts
(1) 2400/FFFFFFFFFFFF12CC :                     
(1) 2401/FFFFFFFFFFFF12CC :                     ; --------------------------------------------------------
(1) 2402/FFFFFFFFFFFF12CC :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2403/FFFFFFFFFFFF12CC :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2404/FFFFFFFFFFFF12CC :                     ;
(1) 2405/FFFFFFFFFFFF12CC :                     ; Sets or Makes a VDP Sprite with map data
(1) 2406/FFFFFFFFFFFF12CC :                     ;
(1) 2407/FFFFFFFFFFFF12CC :                     ; Input:
(1) 2408/FFFFFFFFFFFF12CC :                     ; a0   | Slot (0-80)
(1) 2409/FFFFFFFFFFFF12CC :                     ; a1   | Map data
(1) 2410/FFFFFFFFFFFF12CC :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2411/FFFFFFFFFFFF12CC :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2412/FFFFFFFFFFFF12CC :                     ; d0.w | X position
(1) 2413/FFFFFFFFFFFF12CC :                     ; d1.w | Y position
(1) 2414/FFFFFFFFFFFF12CC :                     ; d2.w | VRAM output location
(1) 2415/FFFFFFFFFFFF12CC :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2416/FFFFFFFFFFFF12CC :                     ;        cell vram is ignored.
(1) 2417/FFFFFFFFFFFF12CC :                     ; d3.w | Frame number
(1) 2418/FFFFFFFFFFFF12CC :                     ;
(1) 2419/FFFFFFFFFFFF12CC :                     ; Returns:
(1) 2420/FFFFFFFFFFFF12CC :                     ; bcc | OK
(1) 2421/FFFFFFFFFFFF12CC :                     ; bcs | Ran out of slots (not sprites)
(1) 2422/FFFFFFFFFFFF12CC :                     ; --------------------------------------------------------
(1) 2423/FFFFFFFFFFFF12CC :                     
(1) 2424/FFFFFFFFFFFF12CC :                     Video_SetSprMap_DMA:
(1) 2425/FFFFFFFFFFFF12CC : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2426/FFFFFFFFFFFF12D0 : 6104                		bsr	Video_SetSprMap
(1) 2427/FFFFFFFFFFFF12D2 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2428/FFFFFFFFFFFF12D4 : 6012                		bra	vid_MkDmaNext
(1) 2429/FFFFFFFFFFFF12D6 :                     Video_SetSprMap:
(1) 2430/FFFFFFFFFFFF12D6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2431/FFFFFFFFFFFF12DA : 2E08                		move.l	a0,d7
(1) 2432/FFFFFFFFFFFF12DC : 7C00                		moveq	#0,d6
(1) 2433/FFFFFFFFFFFF12DE : 6036                		bra	vidMdSpr_MkSprMap
(1) 2434/FFFFFFFFFFFF12E0 :                     Video_MakeSprMap_DMA:
(1) 2435/FFFFFFFFFFFF12E0 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2436/FFFFFFFFFFFF12E4 : 6112                		bsr	Video_MakeSprMap
(1) 2437/FFFFFFFFFFFF12E6 : 650A                		bcs.s	vid_MkDmaCarry
(1) 2438/FFFFFFFFFFFF12E8 :                     vid_MkDmaNext:
(1) 2439/FFFFFFFFFFFF12E8 : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2440/FFFFFFFFFFFF12EA : 224B                		move.l	a3,a1
(1) 2441/FFFFFFFFFFFF12EC : 3003                		move.w	d3,d0
(1) 2442/FFFFFFFFFFFF12EE : 3202                		move.w	d2,d1
(1) 2443/FFFFFFFFFFFF12F0 : 6160                		bsr	vid_MkMapDma
(1) 2444/FFFFFFFFFFFF12F2 :                     vid_MkDmaCarry:
(1) 2445/FFFFFFFFFFFF12F2 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2446/FFFFFFFFFFFF12F6 : 4E75                		rts
(1) 2447/FFFFFFFFFFFF12F8 :                     
(1) 2448/FFFFFFFFFFFF12F8 :                     Video_MakeSprMap:
(1) 2449/FFFFFFFFFFFF12F8 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2450/FFFFFFFFFFFF12FC : 7E00                		moveq	#0,d7
(1) 2451/FFFFFFFFFFFF12FE : 4DF8 CC5E           		lea	(RAM_SprMapList).w,a6
(1) 2452/FFFFFFFFFFFF1302 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2453/FFFFFFFFFFFF1304 :                     .chk_free:
(1) 2454/FFFFFFFFFFFF1304 : 4A16                		tst.b	(a6)
(1) 2455/FFFFFFFFFFFF1306 : 670C                		beq.s	.mk_spr
(1) 2456/FFFFFFFFFFFF1308 : 5247                		addq.w	#1,d7
(1) 2457/FFFFFFFFFFFF130A : DCFC 0010           		adda	#$10,a6
(1) 2458/FFFFFFFFFFFF130E : 51CE FFF4           		dbf	d6,.chk_free
(1) 2459/FFFFFFFFFFFF1312 : 60AE                		bra	vidMd_CError
(1) 2460/FFFFFFFFFFFF1314 :                     .mk_spr:
(1) 2461/FFFFFFFFFFFF1314 : 7C40                		moveq	#$40,d6
(1) 2462/FFFFFFFFFFFF1316 :                     vidMdSpr_MkSprMap:
(1) 2463/FFFFFFFFFFFF1316 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2464/FFFFFFFFFFFF131C : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2465/FFFFFFFFFFFF1320 : 6CA0                		bge	vidMd_CError
(1) 2466/FFFFFFFFFFFF1322 : E98F                		lsl.l	#4,d7
(1) 2467/FFFFFFFFFFFF1324 : 0687 FFFF CC5E      		addi.l	#RAM_SprMapList,d7
(1) 2468/FFFFFFFFFFFF132A : 2C47                		move.l	d7,a6
(1) 2469/FFFFFFFFFFFF132C : 2E09                		move.l	a1,d7
(1) 2470/FFFFFFFFFFFF132E : 8C7C 0080           		or.w	#$80,d6
(1) 2471/FFFFFFFFFFFF1332 : 4846                		swap	d6
(1) 2472/FFFFFFFFFFFF1334 : E18E                		lsl.l	#8,d6
(1) 2473/FFFFFFFFFFFF1336 : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2474/FFFFFFFFFFFF133C : 8E86                		or.l	d6,d7
(1) 2475/FFFFFFFFFFFF133E : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2476/FFFFFFFFFFFF1340 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2477/FFFFFFFFFFFF1342 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2478/FFFFFFFFFFFF1344 : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2479/FFFFFFFFFFFF1346 : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2480/FFFFFFFFFFFF1348 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2481/FFFFFFFFFFFF134C : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2482/FFFFFFFFFFFF1350 : 4E75                		rts
(1) 2483/FFFFFFFFFFFF1352 :                     
(1) 2484/FFFFFFFFFFFF1352 :                     ; --------------------------------------------------------
(1) 2485/FFFFFFFFFFFF1352 :                     ; Input:
(1) 2486/FFFFFFFFFFFF1352 :                     ; a0   | DMA map data
(1) 2487/FFFFFFFFFFFF1352 :                     ; a1   | Graphics data
(1) 2488/FFFFFFFFFFFF1352 :                     ; d0.w | Current frame in DMA list
(1) 2489/FFFFFFFFFFFF1352 :                     ; d1.w | VRAM position
(1) 2490/FFFFFFFFFFFF1352 :                     ;
(1) 2491/FFFFFFFFFFFF1352 :                     ; USES:
(1) 2492/FFFFFFFFFFFF1352 :                     ; a6
(1) 2493/FFFFFFFFFFFF1352 :                     vid_MkMapDma:
(1) 2494/FFFFFFFFFFFF1352 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2495/FFFFFFFFFFFF1356 : 7800                		moveq	#0,d4
(1) 2496/FFFFFFFFFFFF1358 : 0240 00FF           		andi.w	#$FF,d0
(1) 2497/FFFFFFFFFFFF135C : D040                 		add.w	d0,d0
(1) 2498/FFFFFFFFFFFF135E : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2499/FFFFFFFFFFFF1362 : D0C4                 		adda	d4,a0
(1) 2500/FFFFFFFFFFFF1364 : 3818                 		move.w	(a0)+,d4
(1) 2501/FFFFFFFFFFFF1366 : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2502/FFFFFFFFFFFF1368 : 6B32                 		bmi.s	.no_dma
(1) 2503/FFFFFFFFFFFF136A : 5344                 		subq.w	#1,d4
(1) 2504/FFFFFFFFFFFF136C : 0241 07FF           		andi.w	#$07FF,d1
(1) 2505/FFFFFFFFFFFF1370 : EB49                		lsl.w	#5,d1
(1) 2506/FFFFFFFFFFFF1372 :                     .next_pz:
(1) 2507/FFFFFFFFFFFF1372 : 4844                		swap	d4
(1) 2508/FFFFFFFFFFFF1374 : 3818                		move.w	(a0)+,d4
(1) 2509/FFFFFFFFFFFF1376 : 3404                		move.w	d4,d2
(1) 2510/FFFFFFFFFFFF1378 : EE4A                		lsr.w	#7,d2
(1) 2511/FFFFFFFFFFFF137A : 0242 01E0           		andi.w	#$1E0,d2
(1) 2512/FFFFFFFFFFFF137E : D47C 0020           		add.w	#$20,d2
(1) 2513/FFFFFFFFFFFF1382 : 7000                		moveq	#0,d0
(1) 2514/FFFFFFFFFFFF1384 : 3004                		move.w	d4,d0
(1) 2515/FFFFFFFFFFFF1386 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2516/FFFFFFFFFFFF138A : EB48                		lsl.w	#5,d0
(1) 2517/FFFFFFFFFFFF138C : D089                		add.l	a1,d0
(1) 2518/FFFFFFFFFFFF138E : 6100 F70A           		bsr	Video_MakeDmaEntry
(1) 2519/FFFFFFFFFFFF1392 : D242                		add.w	d2,d1
(1) 2520/FFFFFFFFFFFF1394 : 4844                		swap	d4
(1) 2521/FFFFFFFFFFFF1396 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2522/FFFFFFFFFFFF139A : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2523/FFFFFFFFFFFF139C :                     .no_dma:
(1) 2524/FFFFFFFFFFFF139C : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2525/FFFFFFFFFFFF13A0 : 4E75                		rts
(1) 2526/FFFFFFFFFFFF13A2 :                     
(1) 2527/FFFFFFFFFFFF13A2 :                     ; ====================================================================
(1) 2528/FFFFFFFFFFFF13A2 :                     ; ----------------------------------------------------------------
(1) 2529/FFFFFFFFFFFF13A2 :                     ; Video routines for SEGA CD
(1) 2530/FFFFFFFFFFFF13A2 :                     ; ----------------------------------------------------------------
(1) 2531/FFFFFFFFFFFF13A2 :                     
(1) 2533/FFFFFFFFFFFF13A2 :                     
(1) 2534/FFFFFFFFFFFF13A2 :                     ; --------------------------------------------------------
(1) 2535/FFFFFFFFFFFF13A2 :                     ; EXAMPLE CODE to use stamps
(1) 2536/FFFFFFFFFFFF13A2 :                     ;
(1) 2537/FFFFFFFFFFFF13A2 :                     ; Single-buffer:
(1) 2538/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2539/FFFFFFFFFFFF13A2 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2540/FFFFFFFFFFFF13A2 :                     ; 		moveq	#0,d2						; Single buffer mode
(1) 2541/FFFFFFFFFFFF13A2 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2542/FFFFFFFFFFFF13A2 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2543/FFFFFFFFFFFF13A2 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2544/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2545/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2546/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2547/FFFFFFFFFFFF13A2 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2548/FFFFFFFFFFFF13A2 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2549/FFFFFFFFFFFF13A2 :                     
(1) 2550/FFFFFFFFFFFF13A2 :                     ; Double-buffer:
(1) 2551/FFFFFFFFFFFF13A2 :                     ; V32 H64
(1) 2552/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2553/FFFFFFFFFFFF13A2 :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2554/FFFFFFFFFFFF13A2 :                     ; 		moveq	#1,d2						; Double buffer mode
(1) 2555/FFFFFFFFFFFF13A2 :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2556/FFFFFFFFFFFF13A2 :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2557/FFFFFFFFFFFF13A2 :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2558/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2559/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2560/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2561/FFFFFFFFFFFF13A2 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2562/FFFFFFFFFFFF13A2 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2563/FFFFFFFFFFFF13A2 :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; X+$20
(1) 2564/FFFFFFFFFFFF13A2 :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Second Auto-VRAM set by _StampEnable
(1) 2565/FFFFFFFFFFFF13A2 :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2566/FFFFFFFFFFFF13A2 :                     
(1) 2567/FFFFFFFFFFFF13A2 :                     ; --------------------------------------------------------
(1) 2568/FFFFFFFFFFFF13A2 :                     ; Video_MdMcd_StampInit
(1) 2569/FFFFFFFFFFFF13A2 :                     ;
(1) 2570/FFFFFFFFFFFF13A2 :                     ; Make the first Stamp screens, Call this BEFORE entering
(1) 2571/FFFFFFFFFFFF13A2 :                     ; your main loop.
(1) 2572/FFFFFFFFFFFF13A2 :                     ; ** VDP DISPLAY MUST BE ENABLED **
(1) 2573/FFFFFFFFFFFF13A2 :                     ;
(1) 2574/FFFFFFFFFFFF13A2 :                     ; Breaks:
(1) 2575/FFFFFFFFFFFF13A2 :                     ; ALL
(1) 2576/FFFFFFFFFFFF13A2 :                     ; --------------------------------------------------------
(1) 2577/FFFFFFFFFFFF13A2 :                     
(1) 2578/FFFFFFFFFFFF13A2 :                     Video_MdMcd_StampInit:
(1) 2580/FFFFFFFFFFFF13A2 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2581/FFFFFFFFFFFF13A6 : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2582/FFFFFFFFFFFF13AA : 672A                		beq.s	.exit_now
(1) 2583/FFFFFFFFFFFF13AC : 426E 000E           		clr.w	mdstmp_currOutFlip(a6)
(1) 2584/FFFFFFFFFFFF13B0 : 6100 0A4E           		bsr	System_MdMcd_WaitWRAM
(1) 2585/FFFFFFFFFFFF13B4 : 6100 0214           		bsr	vidMdMcd_SendStampInfo
(1) 2586/FFFFFFFFFFFF13B8 : 6100 0A68           		bsr	System_MdMcd_GiveWRAM
(1) 2587/FFFFFFFFFFFF13BC : 6106                		bsr	.mk_initbuff
(1) 2588/FFFFFFFFFFFF13BE : 6104                		bsr	.mk_initbuff
(1) 2589/FFFFFFFFFFFF13C0 : 6100 0002           		bsr	.mk_initbuff
(1) 2590/FFFFFFFFFFFF13C4 :                     .mk_initbuff:
(1) 2591/FFFFFFFFFFFF13C4 : 6100 0450           		bsr	System_Render
(1) 2592/FFFFFFFFFFFF13C8 : 6110                		bsr	Video_MdMcd_StampRender
(1) 2593/FFFFFFFFFFFF13CA :                     .wait_finish:
(1) 2594/FFFFFFFFFFFF13CA : 6100 044A           		bsr	System_Render
(1) 2595/FFFFFFFFFFFF13CE : 610A                		bsr	Video_MdMcd_StampRender
(1) 2596/FFFFFFFFFFFF13D0 : 4A78 CC08           		tst.w	(RAM_MdMcd_StampSett+mdstmp_vramLen).w
(1) 2597/FFFFFFFFFFFF13D4 : 66F4                		bne.s	.wait_finish
(1) 2598/FFFFFFFFFFFF13D6 :                     .exit_now:
(1) 2600/FFFFFFFFFFFF13D6 : 6000 04BC           		bra	Sound_Update
(1) 2601/FFFFFFFFFFFF13DA :                     
(1) 2602/FFFFFFFFFFFF13DA :                     ; --------------------------------------------------------
(1) 2603/FFFFFFFFFFFF13DA :                     ; Video_MdMcd_StampRender
(1) 2604/FFFFFFFFFFFF13DA :                     ;
(1) 2605/FFFFFFFFFFFF13DA :                     ; Update new Stamp output, drops frames if not ready.
(1) 2606/FFFFFFFFFFFF13DA :                     ; ** Call this during VBlank ONLY.
(1) 2607/FFFFFFFFFFFF13DA :                     ;
(1) 2608/FFFFFFFFFFFF13DA :                     ; Returns:
(1) 2609/FFFFFFFFFFFF13DA :                     ; bcc | No changes
(1) 2610/FFFFFFFFFFFF13DA :                     ; bcs | Output buffer changed (DOUBLE-buffer ONLY)
(1) 2611/FFFFFFFFFFFF13DA :                     ;
(1) 2612/FFFFFFFFFFFF13DA :                     ; Breaks:
(1) 2613/FFFFFFFFFFFF13DA :                     ; ALL
(1) 2614/FFFFFFFFFFFF13DA :                     ; --------------------------------------------------------
(1) 2615/FFFFFFFFFFFF13DA :                     
(1) 2616/FFFFFFFFFFFF13DA :                     Video_MdMcd_StampRender:
(1) 2618/FFFFFFFFFFFF13DA : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2619/FFFFFFFFFFFF13DE : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2620/FFFFFFFFFFFF13E2 : 6700 0084           		beq	.not_yet
(1) 2621/FFFFFFFFFFFF13E6 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2622/FFFFFFFFFFFF13EA : 6646                		bne	.draw_cells
(1) 2623/FFFFFFFFFFFF13EC :                     ; 		bsr	System_MdMcd_WaitWRAM
(1) 2624/FFFFFFFFFFFF13EC :                     ; 		move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 2625/FFFFFFFFFFFF13EC :                     ; 		btst	#3,d7
(1) 2626/FFFFFFFFFFFF13EC :                     ; 		bne.s	.not_yet
(1) 2627/FFFFFFFFFFFF13EC : 6100 0A1E           		bsr	System_MdMcd_CheckWRAM
(1) 2628/FFFFFFFFFFFF13F0 : 6676                		bne	.not_yet
(1) 2629/FFFFFFFFFFFF13F2 : 6100 09B8           		bsr	System_MdMcd_SubWait
(1) 2630/FFFFFFFFFFFF13F6 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2631/FFFFFFFFFFFF13FA : 0247 0001           		andi.w	#%01,d7
(1) 2632/FFFFFFFFFFFF13FE : 33C7 0023 BFFE      		move.w	d7,(sysmcd_wram+WRAM_StampCurrFlip).l
(1) 2633/FFFFFFFFFFFF1404 : 33FC 0000 0023      		move.w	#0,(sysmcd_wram+WRAM_StampsDone).l
         FFFFFFFFFFFF140A : BFFC             
(1) 2634/FFFFFFFFFFFF140C : 0A6E 0001 000E      		eor.w	#1,mdstmp_currOutFlip(a6)
(1) 2635/FFFFFFFFFFFF1412 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2636/FFFFFFFFFFFF1416 : 6100 047C           		bsr	Sound_Update
(1) 2637/FFFFFFFFFFFF141A : 42AE 001A           		clr.l	mdstmp_buffIncr(a6)
(1) 2638/FFFFFFFFFFFF141E : 426E 000A           		clr.w	mdstmp_vramIncr(a6)
(1) 2639/FFFFFFFFFFFF1422 : 3D6E 0006 0008      		move.w	mdstmp_vramSize(a6),mdstmp_vramLen(a6)
(1) 2640/FFFFFFFFFFFF1428 : 6100 01A0           		bsr	vidMdMcd_SendStampInfo
(1) 2641/FFFFFFFFFFFF142C : 6100 00A4           		bsr	.make_cellbuff
(1) 2642/FFFFFFFFFFFF1430 : 6012                		bra	.first_step
(1) 2643/FFFFFFFFFFFF1432 :                     
(1) 2644/FFFFFFFFFFFF1432 :                     ; --------------------------------------------------------
(1) 2645/FFFFFFFFFFFF1432 :                     ; Next cell slice
(1) 2646/FFFFFFFFFFFF1432 :                     ; --------------------------------------------------------
(1) 2647/FFFFFFFFFFFF1432 :                     
(1) 2648/FFFFFFFFFFFF1432 :                     .draw_cells:
(1) 2649/FFFFFFFFFFFF1432 : 6100 096A           		bsr	System_MdMcd_Interrupt
(1) 2650/FFFFFFFFFFFF1436 :                     .wait_wram:
(1) 2651/FFFFFFFFFFFF1436 : 6100 045C           		bsr	Sound_Update
(1) 2652/FFFFFFFFFFFF143A : 6100 09D0           		bsr	System_MdMcd_CheckWRAM
(1) 2653/FFFFFFFFFFFF143E : 66F6                		bne	.wait_wram
(1) 2654/FFFFFFFFFFFF1440 : 6100 0090           		bsr	.make_cellbuff
(1) 2655/FFFFFFFFFFFF1444 :                     .first_step:
(1) 2656/FFFFFFFFFFFF1444 : 6100 09DC           		bsr	System_MdMcd_GiveWRAM
(1) 2657/FFFFFFFFFFFF1448 : 6128                		bsr	.mkdma_buff
(1) 2658/FFFFFFFFFFFF144A : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2659/FFFFFFFFFFFF144E : 6618                		bne.s	.not_yet
(1) 2660/FFFFFFFFFFFF1450 : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2661/FFFFFFFFFFFF1454 : 6100 043E           		bsr	Sound_Update
(1) 2662/FFFFFFFFFFFF1458 : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2663/FFFFFFFFFFFF145C : 670A                		beq.s	.not_yet
(1) 2664/FFFFFFFFFFFF145E : 6100 0434           		bsr	Sound_Update
(1) 2665/FFFFFFFFFFFF1462 : 003C 0001           		or	#1,ccr
(1) 2666/FFFFFFFFFFFF1466 : 4E75                		rts
(1) 2667/FFFFFFFFFFFF1468 :                     .not_yet:
(1) 2668/FFFFFFFFFFFF1468 : 6100 042A           		bsr	Sound_Update
(1) 2669/FFFFFFFFFFFF146C : 023C 001E           		and	#%11110,ccr
(1) 2670/FFFFFFFFFFFF1470 : 4E75                		rts
(1) 2671/FFFFFFFFFFFF1472 :                     
(1) 2672/FFFFFFFFFFFF1472 :                     ; --------------------------------------------------------
(1) 2673/FFFFFFFFFFFF1472 :                     
(1) 2674/FFFFFFFFFFFF1472 :                     .mkdma_buff:
(1) 2675/FFFFFFFFFFFF1472 : 202E 0012           		move.l	mdstmp_cellstorage(a6),d0
(1) 2676/FFFFFFFFFFFF1476 : 7200                		moveq	#0,d1
(1) 2677/FFFFFFFFFFFF1478 : 322E 0002           		move.w	mdstmp_vramMain(a6),d1
(1) 2678/FFFFFFFFFFFF147C : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2679/FFFFFFFFFFFF1480 : 670A                		beq.s	.first_one
(1) 2680/FFFFFFFFFFFF1482 : 0816 0006           		btst	#6,mdstmp_flags(a6)
(1) 2681/FFFFFFFFFFFF1486 : 6704                		beq.s	.first_one
(1) 2682/FFFFFFFFFFFF1488 : 322E 0004           		move.w	mdstmp_vramSec(a6),d1
(1) 2683/FFFFFFFFFFFF148C :                     .first_one:
(1) 2684/FFFFFFFFFFFF148C : D26E 000A           		add.w	mdstmp_vramIncr(a6),d1
(1) 2685/FFFFFFFFFFFF1490 : 362E 0008           		move.w	mdstmp_vramLen(a6),d3
(1) 2686/FFFFFFFFFFFF1494 : 342E 000C           		move.w	mdstmp_stmpoutb(a6),d2
(1) 2687/FFFFFFFFFFFF1498 : B46E 0006           		cmp.w	mdstmp_vramSize(a6),d2
(1) 2688/FFFFFFFFFFFF149C : 6704                		beq.s	.exact_size
(1) 2689/FFFFFFFFFFFF149E : B642                		cmp.w	d2,d3
(1) 2690/FFFFFFFFFFFF14A0 : 6E08                		bgt.s	.maximum
(1) 2691/FFFFFFFFFFFF14A2 :                     .exact_size:
(1) 2692/FFFFFFFFFFFF14A2 : 3403                		move.w	d3,d2
(1) 2693/FFFFFFFFFFFF14A4 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2694/FFFFFFFFFFFF14A8 : 6014                		bra.s	.not_done
(1) 2695/FFFFFFFFFFFF14AA :                     .maximum:
(1) 2696/FFFFFFFFFFFF14AA : 3602                		move.w	d2,d3
(1) 2697/FFFFFFFFFFFF14AC : D76E 000A           		addi.w	d3,mdstmp_vramIncr(a6)
(1) 2698/FFFFFFFFFFFF14B0 : 976E 0008           		subi.w	d3,mdstmp_vramLen(a6)
(1) 2699/FFFFFFFFFFFF14B4 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)	; Failsafe
(1) 2700/FFFFFFFFFFFF14B8 : 6A04                		bpl.s	.not_done
(1) 2701/FFFFFFFFFFFF14BA : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2702/FFFFFFFFFFFF14BE :                     .not_done:
(1) 2703/FFFFFFFFFFFF14BE : EB89                		lsl.l	#5,d1
(1) 2704/FFFFFFFFFFFF14C0 : EB8A                		lsl.l	#5,d2
(1) 2705/FFFFFFFFFFFF14C2 : 6100 F5D6           		bsr	Video_MakeDmaEntry
(1) 2707/FFFFFFFFFFFF14C6 : 6000 03CC           		bra	Sound_Update
(1) 2708/FFFFFFFFFFFF14CA :                     
(1) 2709/FFFFFFFFFFFF14CA :                     ; --------------------------------------------------------
(1) 2710/FFFFFFFFFFFF14CA :                     ; Get a slice of the dot-screen
(1) 2711/FFFFFFFFFFFF14CA :                     ; --------------------------------------------------------
(1) 2712/FFFFFFFFFFFF14CA :                     
(1) 2713/FFFFFFFFFFFF14CA :                     .out_locs:
(1) 2714/FFFFFFFFFFFF14CA : 0022 0000           		dc.l sysmcd_wram+WRAM_DotOutput_0
(1) 2715/FFFFFFFFFFFF14CE : 0022 8000           		dc.l sysmcd_wram+WRAM_DotOutput_1
(1) 2716/FFFFFFFFFFFF14D2 :                     .make_cellbuff:
(1) 2717/FFFFFFFFFFFF14D2 : 6100 03C0           		bsr	Sound_Update
(1) 2718/FFFFFFFFFFFF14D6 : 7E00                		moveq	#0,d7
(1) 2719/FFFFFFFFFFFF14D8 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2720/FFFFFFFFFFFF14DC : 0247 0001           		andi.w	#%01,d7
(1) 2721/FFFFFFFFFFFF14E0 : E58F                		lsl.l	#2,d7
(1) 2722/FFFFFFFFFFFF14E2 : 2E3B 70E6           		move.l	.out_locs(pc,d7.w),d7
(1) 2723/FFFFFFFFFFFF14E6 : DEAE 001A           		add.l	mdstmp_buffIncr(a6),d7
(1) 2724/FFFFFFFFFFFF14EA : 2A47                		move.l	d7,a5
(1) 2725/FFFFFFFFFFFF14EC : 7E00                		moveq	#0,d7
(1) 2726/FFFFFFFFFFFF14EE : 3E2E 000C           		move.w	mdstmp_stmpoutb(a6),d7
(1) 2727/FFFFFFFFFFFF14F2 : 2C07                		move.l	d7,d6
(1) 2728/FFFFFFFFFFFF14F4 : EB8E                		lsl.l	#5,d6
(1) 2729/FFFFFFFFFFFF14F6 : DDAE 001A           		add.l	d6,mdstmp_buffIncr(a6)
(1) 2730/FFFFFFFFFFFF14FA : 286E 0012           		movea.l	mdstmp_cellstorage(a6),a4
(1) 2731/FFFFFFFFFFFF14FE : 3C07                		move.w	d7,d6
(1) 2732/FFFFFFFFFFFF1500 : E84E                		lsr.w	#4,d6
(1) 2733/FFFFFFFFFFFF1502 : 5346                		subq.w	#1,d6
(1) 2734/FFFFFFFFFFFF1504 :                     .copy_mid:
(1) 2735/FFFFFFFFFFFF1504 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2736/FFFFFFFFFFFF1508 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2737/FFFFFFFFFFFF150C : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2738/FFFFFFFFFFFF1510 : 48EC 0F0F 0020      		movem.l	d0-d3/a0-a3,$20(a4)
(1) 2739/FFFFFFFFFFFF1516 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2740/FFFFFFFFFFFF151A : 48EC 0F0F 0040      		movem.l	d0-d3/a0-a3,$40(a4)
(1) 2741/FFFFFFFFFFFF1520 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2742/FFFFFFFFFFFF1524 : 48EC 0F0F 0060      		movem.l	d0-d3/a0-a3,$60(a4)
(1) 2743/FFFFFFFFFFFF152A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2744/FFFFFFFFFFFF152E : 48EC 0F0F 0080      		movem.l	d0-d3/a0-a3,$80(a4)
(1) 2745/FFFFFFFFFFFF1534 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2746/FFFFFFFFFFFF1538 : 48EC 0F0F 00A0      		movem.l	d0-d3/a0-a3,$A0(a4)
(1) 2747/FFFFFFFFFFFF153E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2748/FFFFFFFFFFFF1542 : 48EC 0F0F 00C0      		movem.l	d0-d3/a0-a3,$C0(a4)
(1) 2749/FFFFFFFFFFFF1548 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2750/FFFFFFFFFFFF154C : 48EC 0F0F 00E0      		movem.l	d0-d3/a0-a3,$E0(a4)
(1) 2751/FFFFFFFFFFFF1552 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2752/FFFFFFFFFFFF1556 : 48EC 0F0F 0100      		movem.l	d0-d3/a0-a3,$100(a4)
(1) 2753/FFFFFFFFFFFF155C : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2754/FFFFFFFFFFFF1560 : 48EC 0F0F 0120      		movem.l	d0-d3/a0-a3,$120(a4)
(1) 2755/FFFFFFFFFFFF1566 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2756/FFFFFFFFFFFF156A : 48EC 0F0F 0140      		movem.l	d0-d3/a0-a3,$140(a4)
(1) 2757/FFFFFFFFFFFF1570 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2758/FFFFFFFFFFFF1574 : 48EC 0F0F 0160      		movem.l	d0-d3/a0-a3,$160(a4)
(1) 2759/FFFFFFFFFFFF157A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2760/FFFFFFFFFFFF157E : 48EC 0F0F 0180      		movem.l	d0-d3/a0-a3,$180(a4)
(1) 2761/FFFFFFFFFFFF1584 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2762/FFFFFFFFFFFF1588 : 48EC 0F0F 01A0      		movem.l	d0-d3/a0-a3,$1A0(a4)
(1) 2763/FFFFFFFFFFFF158E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2764/FFFFFFFFFFFF1592 : 48EC 0F0F 01C0      		movem.l	d0-d3/a0-a3,$1C0(a4)
(1) 2765/FFFFFFFFFFFF1598 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2766/FFFFFFFFFFFF159C : 48EC 0F0F 01E0      		movem.l	d0-d3/a0-a3,$1E0(a4)
(1) 2767/FFFFFFFFFFFF15A2 : 49EC 0200           		lea	$200(a4),a4
(1) 2768/FFFFFFFFFFFF15A6 : 51CE FF5C           		dbf	d6,.copy_mid
(1) 2769/FFFFFFFFFFFF15AA : 6100 02E8           		bsr	Sound_Update
(1) 2770/FFFFFFFFFFFF15AE : 0247 000F           		andi.w	#%1111,d7
(1) 2771/FFFFFFFFFFFF15B2 : 6712                		beq.s	.no_lsb
(1) 2772/FFFFFFFFFFFF15B4 : 5347                		subq.w	#1,d7
(1) 2773/FFFFFFFFFFFF15B6 :                     .copy_lsb:
(1) 2774/FFFFFFFFFFFF15B6 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2775/FFFFFFFFFFFF15BA : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2776/FFFFFFFFFFFF15BE : 49EC 0020           		lea	$20(a4),a4
(1) 2777/FFFFFFFFFFFF15C2 : 51CF FFF2           		dbf	d7,.copy_lsb
(1) 2778/FFFFFFFFFFFF15C6 :                     .no_lsb:
(1) 2779/FFFFFFFFFFFF15C6 : 6000 02CC           		bra	Sound_Update
(1) 2780/FFFFFFFFFFFF15CA :                     
(1) 2781/FFFFFFFFFFFF15CA :                     ; --------------------------------------------------------
(1) 2782/FFFFFFFFFFFF15CA :                     
(1) 2783/FFFFFFFFFFFF15CA :                     vidMdMcd_SendStampInfo:
(1) 2784/FFFFFFFFFFFF15CA : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2785/FFFFFFFFFFFF15CE : 49F9 0023 A000      		lea	(sysmcd_wram+WRAM_MdStampList).l,a4
(1) 2786/FFFFFFFFFFFF15D4 : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 2787/FFFFFFFFFFFF15D8 :                     .copy_towram:
(1) 2788/FFFFFFFFFFFF15D8 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2789/FFFFFFFFFFFF15DC : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2790/FFFFFFFFFFFF15E0 : D8FC 0020           		adda	#$20,a4
(1) 2791/FFFFFFFFFFFF15E4 : 51CF FFF2           		dbf	d7,.copy_towram
(1) 2792/FFFFFFFFFFFF15E8 : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2793/FFFFFFFFFFFF15EC : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(1) 2794/FFFFFFFFFFFF15EE : 3C3C 0020           		move.w	#cdstamp_len,d6
(1) 2795/FFFFFFFFFFFF15F2 :                     .chk_spr:
(1) 2796/FFFFFFFFFFFF15F2 : 0815 0006           		btst	#6,cdstamp_flags(a5)
(1) 2797/FFFFFFFFFFFF15F6 : 6702                		beq.s	.not_sprtemp
(1) 2798/FFFFFFFFFFFF15F8 : 4215                		clr.b	cdstamp_flags(a5)
(1) 2799/FFFFFFFFFFFF15FA :                     .not_sprtemp:
(1) 2800/FFFFFFFFFFFF15FA : DAC6                		adda	d6,a5
(1) 2801/FFFFFFFFFFFF15FC : 51CF FFF4           		dbf	d7,.chk_spr
(1) 2802/FFFFFFFFFFFF1600 : 6000 0292           		bra	Sound_Update
(1) 2803/FFFFFFFFFFFF1604 :                     
(1) 2804/FFFFFFFFFFFF1604 :                     ; --------------------------------------------------------
(1) 2805/FFFFFFFFFFFF1604 :                     ; Video_MdMcd_StampEnable
(1) 2806/FFFFFFFFFFFF1604 :                     ;
(1) 2807/FFFFFFFFFFFF1604 :                     ; Init/Enable SCD Stamp rendering
(1) 2808/FFFFFFFFFFFF1604 :                     ;
(1) 2809/FFFFFFFFFFFF1604 :                     ; Input:
(1) 2810/FFFFFFFFFFFF1604 :                     ; a0   | RAM location to store cells
(1) 2811/FFFFFFFFFFFF1604 :                     ; d0.l | Dot-Screen Width and Height: splitw(width,height)
(1) 2812/FFFFFFFFFFFF1604 :                     ; d1.w | VRAM Main output
(1) 2813/FFFFFFFFFFFF1604 :                     ; d2.w | Use double-buffering: No(0) or Yes(1)
(1) 2814/FFFFFFFFFFFF1604 :                     ; d3.w | Size of out cells storage
(1) 2815/FFFFFFFFFFFF1604 :                     ;        Default tag: DEF_MaxStampCOut
(1) 2816/FFFFFFFFFFFF1604 :                     ;
(1) 2817/FFFFFFFFFFFF1604 :                     ; Notes:
(1) 2818/FFFFFFFFFFFF1604 :                     ; - Use only Width and Height aligned by 8
(1) 2819/FFFFFFFFFFFF1604 :                     ; - Width and Height will also be used to get the
(1) 2820/FFFFFFFFFFFF1604 :                     ;   the CENTER point in ALL Stamps.
(1) 2821/FFFFFFFFFFFF1604 :                     ; --------------------------------------------------------
(1) 2822/FFFFFFFFFFFF1604 :                     
(1) 2823/FFFFFFFFFFFF1604 :                     Video_MdMcd_StampEnable:
(1) 2824/FFFFFFFFFFFF1604 : 48E7 8306           		movem.l	d0/d6-d7/a5-a6,-(sp)
(1) 2825/FFFFFFFFFFFF1608 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2826/FFFFFFFFFFFF160C : 2A4E                		move.l	a6,a5
(1) 2827/FFFFFFFFFFFF160E : 3E3C 001D           		move.w	#mdstmp_len-1,d7
(1) 2828/FFFFFFFFFFFF1612 : 7C00                		moveq	#0,d6
(1) 2829/FFFFFFFFFFFF1614 :                     .clr_sett:
(1) 2830/FFFFFFFFFFFF1614 : 3AC6                		move.w	d6,(a5)+
(1) 2831/FFFFFFFFFFFF1616 : 51CF FFFC           		dbf	d7,.clr_sett
(1) 2832/FFFFFFFFFFFF161A : 3D43 000C           		move.w	d3,mdstmp_stmpoutb(a6)
(1) 2833/FFFFFFFFFFFF161E : 2D48 0012           		move.l	a0,mdstmp_cellstorage(a6)
(1) 2834/FFFFFFFFFFFF1622 : 3D41 0002           		move.w	d1,mdstmp_vramMain(a6)
(1) 2835/FFFFFFFFFFFF1626 : 7E00                		moveq	#0,d7
(1) 2836/FFFFFFFFFFFF1628 : 2C00                		move.l	d0,d6
(1) 2837/FFFFFFFFFFFF162A : 4846                		swap	d6
(1) 2838/FFFFFFFFFFFF162C : 3E00                		move.w	d0,d7
(1) 2839/FFFFFFFFFFFF162E : CEC6                		mulu.w	d6,d7
(1) 2840/FFFFFFFFFFFF1630 : EC8F                		lsr.l	#5+1,d7
(1) 2841/FFFFFFFFFFFF1632 : 3D47 0006           		move.w	d7,mdstmp_vramSize(a6)
(1) 2842/FFFFFFFFFFFF1636 : 0896 0000           		bclr	#0,mdstmp_flags(a6)
(1) 2843/FFFFFFFFFFFF163A : 4A42                		tst.w	d2
(1) 2844/FFFFFFFFFFFF163C : 670E                		beq.s	.dont_use
(1) 2845/FFFFFFFFFFFF163E : 3C2E 0002           		move.w	mdstmp_vramMain(a6),d6
(1) 2846/FFFFFFFFFFFF1642 : DC47                		add.w	d7,d6
(1) 2847/FFFFFFFFFFFF1644 : 3D46 0004           		move.w	d6,mdstmp_vramSec(a6)
(1) 2848/FFFFFFFFFFFF1648 : 08D6 0000           		bset	#0,mdstmp_flags(a6)
(1) 2849/FFFFFFFFFFFF164C :                     .dont_use:
(1) 2850/FFFFFFFFFFFF164C : 08D6 0007           		bset	#7,mdstmp_flags(a6)
(1) 2851/FFFFFFFFFFFF1650 : 2E00                		move.l	d0,d7
(1) 2852/FFFFFFFFFFFF1652 : 4847                		swap	d7
(1) 2853/FFFFFFFFFFFF1654 : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 2854/FFFFFFFFFFFF165A : 33C0 00A1 2012      		move.w	d0,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 2855/FFFFFFFFFFFF1660 : 6100 07C0           		bsr	System_MdMcd_GiveWRAM
(1) 2856/FFFFFFFFFFFF1664 : 303C 0018           		move.w	#$18,d0
(1) 2857/FFFFFFFFFFFF1668 : 6100 0756           		bsr	System_MdMcd_SubTask
(1) 2858/FFFFFFFFFFFF166C : 6100 0792           		bsr	System_MdMcd_WaitWRAM
(1) 2859/FFFFFFFFFFFF1670 : 4CDF 60C1           		movem.l	(sp)+,d0/d6-d7/a5-a6
(1) 2860/FFFFFFFFFFFF1674 : 4E75                		rts
(1) 2861/FFFFFFFFFFFF1676 :                     
(1) 2862/FFFFFFFFFFFF1676 :                     ; --------------------------------------------------------
(1) 2863/FFFFFFFFFFFF1676 :                     ; Video_MdMcd_StampDisable
(1) 2864/FFFFFFFFFFFF1676 :                     ;
(1) 2865/FFFFFFFFFFFF1676 :                     ; Disable SCD Stamp rendering
(1) 2866/FFFFFFFFFFFF1676 :                     ; --------------------------------------------------------
(1) 2867/FFFFFFFFFFFF1676 :                     
(1) 2868/FFFFFFFFFFFF1676 :                     Video_MdMcd_StampDisable:
(1) 2869/FFFFFFFFFFFF1676 : 48E7 8002           		movem.l	d0/a6,-(sp)
(1) 2870/FFFFFFFFFFFF167A : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2871/FFFFFFFFFFFF167E : 0896 0007           		bclr	#7,mdstmp_flags(a6)
(1) 2872/FFFFFFFFFFFF1682 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2873/FFFFFFFFFFFF1686 : 6100 079A           		bsr	System_MdMcd_GiveWRAM
(1) 2874/FFFFFFFFFFFF168A : 7019                		moveq	#$19,d0
(1) 2875/FFFFFFFFFFFF168C : 6100 0732           		bsr	System_MdMcd_SubTask
(1) 2876/FFFFFFFFFFFF1690 : 4CDF 4001           		movem.l	(sp)+,d0/a6
(1) 2877/FFFFFFFFFFFF1694 : 4E75                		rts
(1) 2878/FFFFFFFFFFFF1696 :                     
(1) 2879/FFFFFFFFFFFF1696 :                     ; --------------------------------------------------------
(1) 2880/FFFFFFFFFFFF1696 :                     ; Video_MdMcd_StampDotMap
(1) 2881/FFFFFFFFFFFF1696 :                     ;
(1) 2882/FFFFFFFFFFFF1696 :                     ; Show the stamp screen
(1) 2883/FFFFFFFFFFFF1696 :                     ;
(1) 2884/FFFFFFFFFFFF1696 :                     ; Input:
(1) 2885/FFFFFFFFFFFF1696 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 2886/FFFFFFFFFFFF1696 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 2887/FFFFFFFFFFFF1696 :                     ; d2.l | Screen Width/VRAM location:
(1) 2888/FFFFFFFFFFFF1696 :                     ;        splitw(sw_size,vram_loc)
(1) 2889/FFFFFFFFFFFF1696 :                     ; d3.w | VRAM start
(1) 2890/FFFFFFFFFFFF1696 :                     ; --------------------------------------------------------
(1) 2891/FFFFFFFFFFFF1696 :                     
(1) 2892/FFFFFFFFFFFF1696 :                     Video_MdMcd_StampDotMap:
(1) 2893/FFFFFFFFFFFF1696 : 48E7 1F0E           		movem.l	d3-d7/a4-a6,-(sp)
(1) 2894/FFFFFFFFFFFF169A : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2895/FFFFFFFFFFFF16A0 : 3E02                		move.w	d2,d7
(1) 2896/FFFFFFFFFFFF16A2 : 2C02                		move.l	d2,d6
(1) 2897/FFFFFFFFFFFF16A4 : 4846                		swap	d6
(1) 2898/FFFFFFFFFFFF16A6 : 3A00                		move.w	d0,d5
(1) 2899/FFFFFFFFFFFF16A8 : CAC6                		mulu.w	d6,d5
(1) 2900/FFFFFFFFFFFF16AA : 2800                		move.l	d0,d4
(1) 2901/FFFFFFFFFFFF16AC : 4844                		swap	d4
(1) 2902/FFFFFFFFFFFF16AE : D844                		add.w	d4,d4
(1) 2903/FFFFFFFFFFFF16B0 : DA44                		add.w	d4,d5
(1) 2904/FFFFFFFFFFFF16B2 : DE45                		add.w	d5,d7
(1) 2905/FFFFFFFFFFFF16B4 : 7A00                		moveq	#0,d5
(1) 2906/FFFFFFFFFFFF16B6 : 3A07                		move.w	d7,d5
(1) 2907/FFFFFFFFFFFF16B8 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2908/FFFFFFFFFFFF16BC : 8E7C 4000           		or.w	#$4000,d7
(1) 2909/FFFFFFFFFFFF16C0 : E55D                		rol.w	#2,d5
(1) 2910/FFFFFFFFFFFF16C2 : 0245 0003           		andi.w	#%11,d5
(1) 2911/FFFFFFFFFFFF16C6 : 4845                		swap	d5
(1) 2912/FFFFFFFFFFFF16C8 : 2A48                		move.l	a0,a5
(1) 2913/FFFFFFFFFFFF16CA : 2801                		move.l	d1,d4
(1) 2914/FFFFFFFFFFFF16CC : 4844                		swap	d4
(1) 2915/FFFFFFFFFFFF16CE : 5344                		subq.w	#1,d4
(1) 2916/FFFFFFFFFFFF16D0 : 6B30                		bmi.s	.bad_size
(1) 2917/FFFFFFFFFFFF16D2 :                     .x_loop:
(1) 2918/FFFFFFFFFFFF16D2 : 2844                		move.l	d4,a4
(1) 2919/FFFFFFFFFFFF16D4 : 3801                		move.w	d1,d4
(1) 2920/FFFFFFFFFFFF16D6 : 5344                		subq.w	#1,d4
(1) 2921/FFFFFFFFFFFF16D8 :                     .y_loop:
(1) 2922/FFFFFFFFFFFF16D8 : 4844                		swap	d4
(1) 2923/FFFFFFFFFFFF16DA : 3807                		move.w	d7,d4
(1) 2924/FFFFFFFFFFFF16DC : D845                		add.w	d5,d4
(1) 2925/FFFFFFFFFFFF16DE : 4845                		swap	d5
(1) 2926/FFFFFFFFFFFF16E0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2927/FFFFFFFFFFFF16E4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2928/FFFFFFFFFFFF16E8 : 4845                		swap	d5
(1) 2929/FFFFFFFFFFFF16EA : 3C83                		move.w	d3,(a6)
(1) 2930/FFFFFFFFFFFF16EC : 5243                		addq.w	#1,d3
(1) 2931/FFFFFFFFFFFF16EE : DA46                		add.w	d6,d5
(1) 2932/FFFFFFFFFFFF16F0 : 4844                		swap	d4
(1) 2933/FFFFFFFFFFFF16F2 : 51CC FFE4           		dbf	d4,.y_loop
(1) 2934/FFFFFFFFFFFF16F6 : DE7C 0002           		add.w	#2,d7
(1) 2935/FFFFFFFFFFFF16FA : 4245                		clr.w	d5
(1) 2936/FFFFFFFFFFFF16FC : 280C                		move.l	a4,d4
(1) 2937/FFFFFFFFFFFF16FE : 51CC FFD2           		dbf	d4,.x_loop
(1) 2938/FFFFFFFFFFFF1702 :                     .bad_size:
(1) 2939/FFFFFFFFFFFF1702 : 4CDF 70F8           		movem.l	(sp)+,d3-d7/a4-a6
(1) 2940/FFFFFFFFFFFF1706 : 4E75                		rts
(1) 2941/FFFFFFFFFFFF1708 :                     
(1) 2942/FFFFFFFFFFFF1708 :                     ; --------------------------------------------------------
(1) 2943/FFFFFFFFFFFF1708 :                     ; Video_MdMcd_StampSet
(1) 2944/FFFFFFFFFFFF1708 :                     ;
(1) 2945/FFFFFFFFFFFF1708 :                     ; Set or Make a Sega CD Stamp
(1) 2946/FFFFFFFFFFFF1708 :                     ;
(1) 2947/FFFFFFFFFFFF1708 :                     ; Input:
(1) 2948/FFFFFFFFFFFF1708 :                     ; a0   | Index slot (_SetStamp ONLY)
(1) 2949/FFFFFFFFFFFF1708 :                     ; a1   | Map slot to use
(1) 2950/FFFFFFFFFFFF1708 :                     ; d0.l | X/Y position:       splitw(x_pos,y_pos)
(1) 2951/FFFFFFFFFFFF1708 :                     ; d1.l | Rotation and Scale: splitw(rot,scale)
(1) 2952/FFFFFFFFFFFF1708 :                     ; d2.l | Width/Height:       split(width,height)
(1) 2953/FFFFFFFFFFFF1708 :                     ; d3.l | Center X/Y:         splitw(cx,cy)
(1) 2954/FFFFFFFFFFFF1708 :                     ;
(1) 2955/FFFFFFFFFFFF1708 :                     ; Returns:
(1) 2956/FFFFFFFFFFFF1708 :                     ; bcc | Wrote sucessfully
(1) 2957/FFFFFFFFFFFF1708 :                     ; bcs | Ran out of stamps
(1) 2958/FFFFFFFFFFFF1708 :                     ;
(1) 2959/FFFFFFFFFFFF1708 :                     ; Notes:
(1) 2960/FFFFFFFFFFFF1708 :                     ; - This resets the X/Y/Z position and rotations
(1) 2961/FFFFFFFFFFFF1708 :                     ; --------------------------------------------------------
(1) 2962/FFFFFFFFFFFF1708 :                     
(1) 2963/FFFFFFFFFFFF1708 :                     Video_MdMcd_SetStamp:
(1) 2964/FFFFFFFFFFFF1708 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2965/FFFFFFFFFFFF170C : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 2966/FFFFFFFFFFFF1710 : 2E08                		move.l	a0,d7
(1) 2967/FFFFFFFFFFFF1712 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 2968/FFFFFFFFFFFF1714 : 601E                		bra	vidMdMcd_MkStamp
(1) 2969/FFFFFFFFFFFF1716 :                     
(1) 2970/FFFFFFFFFFFF1716 :                     Video_MdMcd_MakeStamp:
(1) 2971/FFFFFFFFFFFF1716 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2972/FFFFFFFFFFFF171A : 7E00                		moveq	#0,d7
(1) 2973/FFFFFFFFFFFF171C : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 2974/FFFFFFFFFFFF1720 : 7C1F                		moveq	#MAX_MCDSTAMPS-1,d6
(1) 2975/FFFFFFFFFFFF1722 :                     .chk_free:
(1) 2976/FFFFFFFFFFFF1722 : 4A16                		tst.b	cdstamp_flags(a6)
(1) 2977/FFFFFFFFFFFF1724 : 670C                		beq.s	.mk_spr
(1) 2978/FFFFFFFFFFFF1726 : 5247                		addq.w	#1,d7
(1) 2979/FFFFFFFFFFFF1728 : DCFC 0020           		adda	#cdstamp_len,a6
(1) 2980/FFFFFFFFFFFF172C : 51CE FFF4           		dbf	d6,.chk_free
(1) 2981/FFFFFFFFFFFF1730 : 605C                		bra.s	vidMdMcd_CError
(1) 2982/FFFFFFFFFFFF1732 :                     .mk_spr:
(1) 2983/FFFFFFFFFFFF1732 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 2984/FFFFFFFFFFFF1734 :                     
(1) 2985/FFFFFFFFFFFF1734 :                     vidMdMcd_MkStamp:
(1) 2986/FFFFFFFFFFFF1734 : 0247 00FF           		andi.w	#$FF,d7
(1) 2987/FFFFFFFFFFFF1738 : 0C47 0020           		cmpi.w	#MAX_MCDSTAMPS,d7
(1) 2988/FFFFFFFFFFFF173C : 6C50                		bge.s	vidMdMcd_CError
(1) 2989/FFFFFFFFFFFF173E : EB4F                		lsl.w	#5,d7
(1) 2990/FFFFFFFFFFFF1740 : DCC7                		adda	d7,a6
(1) 2991/FFFFFFFFFFFF1742 : 3E09                		move.w	a1,d7
(1) 2992/FFFFFFFFFFFF1744 : 0247 00FF           		andi.w	#$FF,d7
(1) 2993/FFFFFFFFFFFF1748 : 1D47 0001           		move.b	d7,cdstamp_map(a6)
(1) 2994/FFFFFFFFFFFF174C : 2E00                		move.l	d0,d7
(1) 2995/FFFFFFFFFFFF174E : 4847                		swap	d7
(1) 2996/FFFFFFFFFFFF1750 : 3D40 0008           		move.w  d0,cdstamp_y(a6)
(1) 2997/FFFFFFFFFFFF1754 : 3D47 0006           		move.w  d7,cdstamp_x(a6)
(1) 2998/FFFFFFFFFFFF1758 : 2E02                		move.l	d2,d7
(1) 2999/FFFFFFFFFFFF175A : 4847                		swap	d7
(1) 3000/FFFFFFFFFFFF175C : 3D42 000C           		move.w  d2,cdstamp_hght(a6)
(1) 3001/FFFFFFFFFFFF1760 : 3D47 000A           		move.w  d7,cdstamp_wdth(a6)
(1) 3002/FFFFFFFFFFFF1764 : 2E03                		move.l	d3,d7
(1) 3003/FFFFFFFFFFFF1766 : 4847                		swap	d7
(1) 3004/FFFFFFFFFFFF1768 : 3D43 0004           		move.w  d3,cdstamp_cy(a6)
(1) 3005/FFFFFFFFFFFF176C : 3D47 0002           		move.w  d7,cdstamp_cx(a6)
(1) 3006/FFFFFFFFFFFF1770 :                     
(1) 3007/FFFFFFFFFFFF1770 : 2E01                		move.l	d1,d7
(1) 3008/FFFFFFFFFFFF1772 : 4847                		swap	d7
(1) 3009/FFFFFFFFFFFF1774 : 3D41 000E           		move.w	d1,cdstamp_scale(a6)
(1) 3010/FFFFFFFFFFFF1778 : 3D47 0010           		move.w	d7,cdstamp_rot(a6)
(1) 3011/FFFFFFFFFFFF177C :                     
(1) 3012/FFFFFFFFFFFF177C : 3E3C 0080           		move.w	#$80,d7
(1) 3013/FFFFFFFFFFFF1780 : 8E46                		or.w	d6,d7
(1) 3014/FFFFFFFFFFFF1782 : 1C87                		move.b	d7,cdstamp_flags(a6)	; TODO: add the RPT bit ($01)
(1) 3015/FFFFFFFFFFFF1784 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3016/FFFFFFFFFFFF1788 : 023C 001E           		andi	#%11110,ccr
(1) 3017/FFFFFFFFFFFF178C : 4E75                		rts
(1) 3018/FFFFFFFFFFFF178E :                     ; Carry error
(1) 3019/FFFFFFFFFFFF178E :                     vidMdMcd_CError:
(1) 3020/FFFFFFFFFFFF178E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3021/FFFFFFFFFFFF1792 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3022/FFFFFFFFFFFF1796 : 4E75                		rts
(1) 3023/FFFFFFFFFFFF1798 :                     
(1) 3024/FFFFFFFFFFFF1798 :                     ; --------------------------------------------------------
(1) 3025/FFFFFFFFFFFF1798 :                     
(1) 3026/FFFFFFFFFFFF1798 :                     vidMdMcd_RdStmpSlot:
(1) 3027/FFFFFFFFFFFF1798 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3028/FFFFFFFFFFFF179C : 7E00                		moveq	#0,d7
(1) 3029/FFFFFFFFFFFF179E : 3E00                		move.w	d0,d7
(1) 3030/FFFFFFFFFFFF17A0 :                     ; 		cmpi.w	#MAX_MCDSTAMPS,d0
(1) 3031/FFFFFFFFFFFF17A0 :                     ; 		bge.s	.got_full
(1) 3032/FFFFFFFFFFFF17A0 : EB4F                		lsl.w	#5,d7			; FIXED SIZE $20
(1) 3033/FFFFFFFFFFFF17A2 : DCC7                		adda	d7,a6
(1) 3034/FFFFFFFFFFFF17A4 :                     ; .got_full:
(1) 3035/FFFFFFFFFFFF17A4 : 4E75                		rts
(1) 3036/FFFFFFFFFFFF17A6 :                     
(1) 3037/FFFFFFFFFFFF17A6 :                     ; --------------------------------------------------------
(1) 3038/FFFFFFFFFFFF17A6 :                     ; Video_MdMcd_StampMap
(1) 3039/FFFFFFFFFFFF17A6 :                     ; --------------------------------------------------------
(1) 3040/FFFFFFFFFFFF17A6 :                     
(1) 3041/FFFFFFFFFFFF17A6 :                     Video_MdMcd_StampMap:
(1) 3042/FFFFFFFFFFFF17A6 : 4E75                		rts
(1) 3043/FFFFFFFFFFFF17A8 :                     
(1) 3044/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1) 3045/FFFFFFFFFFFF17A8 :                     
(1) 3047/FFFFFFFFFFFF17A8 :                     
(1) 3048/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1) 3049/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1) 3050/FFFFFFFFFFFF17A8 :                     ; Video routines for 32X
(1) 3051/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1) 3052/FFFFFFFFFFFF17A8 :                     
(1) 3785/FFFFFFFFFFFF17A8 :                     
     196/FFFFFFFFFFFF17A8 :                     		include	"system/md/system.asm"
(1)    1/FFFFFFFFFFFF17A8 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF17A8 :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF17A8 :                     ;
(1)    5/FFFFFFFFFFFF17A8 :                     ; including SCD, 32X and PICO.
(1)    6/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFF17A8 :                     
(1)    8/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1)    9/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF17A8 :                     ; Settings
(1)   11/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF17A8 :                     
(1)   13/FFFFFFFFFFFF17A8 : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/FFFFFFFFFFFF17A8 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/FFFFFFFFFFFF17A8 :                     
(1)   16/FFFFFFFFFFFF17A8 :                     ; ===================================================================
(1)   17/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF17A8 :                     ; Variables
(1)   19/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF17A8 :                     
(1)   21/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   22/FFFFFFFFFFFF17A8 :                     ; Controller buffer data
(1)   23/FFFFFFFFFFFF17A8 :                     ;
(1)   24/FFFFFFFFFFFF17A8 :                     ; MUST call System_Input during VBlank
(1)   25/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   26/FFFFFFFFFFFF17A8 :                     
(1)   27/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   28/FFFFFFFFFFFF17A8 :                     ; pad_id
(1)   29/FFFFFFFFFFFF17A8 :                     ;
(1)   30/FFFFFFFFFFFF17A8 :                     ; JoyID_MD:
(1)   31/FFFFFFFFFFFF17A8 :                     ; Read pad_ver separately to check if controller
(1)   32/FFFFFFFFFFFF17A8 :                     ; is 3button(0) or 6button(1)
(1)   33/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF17A8 :                     
(1)   35/FFFFFFFFFFFF17A8 : =$3                  JoyID_Mouse	equ $03
(1)   36/FFFFFFFFFFFF17A8 : =$D                  JoyID_MD	equ $0D
(1)   37/FFFFFFFFFFFF17A8 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/FFFFFFFFFFFF17A8 :                     
(1)   39/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF17A8 :                     ; Genesis controller
(1)   41/FFFFFFFFFFFF17A8 :                     ;
(1)   42/FFFFFFFFFFFF17A8 :                     ; Read these as WORD
(1)   43/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF17A8 :                     
(1)   45/FFFFFFFFFFFF17A8 :                     ; on_hold, on_press
(1)   46/FFFFFFFFFFFF17A8 : =$1                  JoyUp		equ $0001
(1)   47/FFFFFFFFFFFF17A8 : =$2                  JoyDown		equ $0002
(1)   48/FFFFFFFFFFFF17A8 : =$4                  JoyLeft		equ $0004
(1)   49/FFFFFFFFFFFF17A8 : =$8                  JoyRight	equ $0008
(1)   50/FFFFFFFFFFFF17A8 : =$10                 JoyB		equ $0010
(1)   51/FFFFFFFFFFFF17A8 : =$20                 JoyC		equ $0020
(1)   52/FFFFFFFFFFFF17A8 : =$40                 JoyA		equ $0040
(1)   53/FFFFFFFFFFFF17A8 : =$80                 JoyStart	equ $0080
(1)   54/FFFFFFFFFFFF17A8 : =$100                JoyZ		equ $0100
(1)   55/FFFFFFFFFFFF17A8 : =$200                JoyY		equ $0200
(1)   56/FFFFFFFFFFFF17A8 : =$400                JoyX		equ $0400
(1)   57/FFFFFFFFFFFF17A8 : =$800                JoyMode		equ $0800
(1)   58/FFFFFFFFFFFF17A8 : =$0                  bitJoyUp	equ 0
(1)   59/FFFFFFFFFFFF17A8 : =$1                  bitJoyDown	equ 1
(1)   60/FFFFFFFFFFFF17A8 : =$2                  bitJoyLeft	equ 2
(1)   61/FFFFFFFFFFFF17A8 : =$3                  bitJoyRight	equ 3
(1)   62/FFFFFFFFFFFF17A8 : =$4                  bitJoyB		equ 4
(1)   63/FFFFFFFFFFFF17A8 : =$5                  bitJoyC		equ 5
(1)   64/FFFFFFFFFFFF17A8 : =$6                  bitJoyA		equ 6
(1)   65/FFFFFFFFFFFF17A8 : =$7                  bitJoyStart	equ 7
(1)   66/FFFFFFFFFFFF17A8 : =$8                  bitJoyZ		equ 8
(1)   67/FFFFFFFFFFFF17A8 : =$9                  bitJoyY		equ 9
(1)   68/FFFFFFFFFFFF17A8 : =$A                  bitJoyX		equ 10
(1)   69/FFFFFFFFFFFF17A8 : =$B                  bitJoyMode	equ 11
(1)   70/FFFFFFFFFFFF17A8 :                     
(1)   71/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   72/FFFFFFFFFFFF17A8 :                     ; Mega Mouse ONLY
(1)   73/FFFFFFFFFFFF17A8 :                     ;
(1)   74/FFFFFFFFFFFF17A8 :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/FFFFFFFFFFFF17A8 :                     ; NOT screen position.
(1)   76/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF17A8 :                     
(1)   78/FFFFFFFFFFFF17A8 : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF17A8 : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF17A8 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF17A8 : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/FFFFFFFFFFFF17A8 : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF17A8 : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF17A8 : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF17A8 : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF17A8 :                     
(1)   87/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF17A8 :                     ; Sega PICO
(1)   89/FFFFFFFFFFFF17A8 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/FFFFFFFFFFFF17A8 :                     ; For reading the pen position use
(1)   91/FFFFFFFFFFFF17A8 :                     ; mouse_x and mouse_y
(1)   92/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)   93/FFFFFFFFFFFF17A8 :                     
(1)   94/FFFFFFFFFFFF17A8 : =$10                 JoyRED		equ $0010
(1)   95/FFFFFFFFFFFF17A8 : =$80                 JoyPEN		equ $0080
(1)   96/FFFFFFFFFFFF17A8 : =$4                  bitJoyRED	equ 4
(1)   97/FFFFFFFFFFFF17A8 : =$7                  bitJoyPEN	equ 7
(1)   98/FFFFFFFFFFFF17A8 :                     
(1)   99/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1)  100/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  101/FFFFFFFFFFFF17A8 :                     ; Structs
(1)  102/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF17A8 :                     
(1)  104/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)  105/FFFFFFFFFFFF17A8 :                     ; RAM_InputData
(1)  106/FFFFFFFFFFFF17A8 :                     
(1)  107/FFFFFFFFFFFF17A8 :                     ; *** MANUAL VARIABLES ***
(1)  108/FFFFFFFFFFFF17A8 : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/FFFFFFFFFFFF17A8 : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/FFFFFFFFFFFF17A8 : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/FFFFFFFFFFFF17A8 : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/FFFFFFFFFFFF17A8 : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/FFFFFFFFFFFF17A8 : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/FFFFFFFFFFFF17A8 : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/FFFFFFFFFFFF17A8 : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/FFFFFFFFFFFF17A8 : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/FFFFFFFFFFFF17A8 : =$10                 sizeof_input		equ $10
(1)  118/FFFFFFFFFFFF17A8 :                     
(1)  119/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)  120/FFFFFFFFFFFF17A8 :                     ; RAM_Objects
(1)  121/FFFFFFFFFFFF17A8 :                     ;
(1)  122/FFFFFFFFFFFF17A8 :                     ; Size must end as even
(1)  123/FFFFFFFFFFFF17A8 :                     ; ------------------------------------------------
(1)  124/FFFFFFFFFFFF17A8 :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; len			ds.l 0
(1)  148/FFFFFFFFFFFF17A8 : =$68                 			endstruct
(1)  149/FFFFFFFFFFFF17A8 :                     
(1)  150/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1)  151/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  152/FFFFFFFFFFFF17A8 :                     ; RAM section
(1)  153/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  154/FFFFFFFFFFFF17A8 :                     
(1)  155/FFFFFFFFFFFF17A8 : (MACRO)              			memory RAM_MdSystem
(1)  155/FFFFFFFFFFFF17A8 : =$FFFFFFFFFFFF17A8   GLBL_LASTPC     := *
(1)  155/    40BE :                                     dephase
(1)  155/FFFFFFFFFFFFDC18 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFDC18 : =$FFFFFFFFFFFFDC18   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFDC18 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFDD18 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFDD58 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFED98 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFED9C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFEDA0 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFEDA6 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFEDAC :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFEDB2 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFEDB4 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFEDB6 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFEDB8 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFEDBA :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFEDC0 : (MACRO)              			endmemory
(1)  169/    5266 :                     .here:          dephase
(1)  169/    5266 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/FFFFFFFFFFFF17A8 :                                     phase GLBL_LASTPC
(1)  170/FFFFFFFFFFFF17A8 :                     
(1)  171/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1)  172/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  173/FFFFFFFFFFFF17A8 :                     ; Label aliases
(1)  174/FFFFFFFFFFFF17A8 :                     ; ----------------------------------------------------------------
(1)  175/FFFFFFFFFFFF17A8 :                     
(1)  176/FFFFFFFFFFFF17A8 : =$FFFFFFFFFFFFDD18   Controller_1		equ RAM_InputData
(1)  177/FFFFFFFFFFFF17A8 : =$FFFFFFFFFFFFDD28   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/FFFFFFFFFFFF17A8 :                     
(1)  179/FFFFFFFFFFFF17A8 :                     ; ====================================================================
(1)  180/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)  181/FFFFFFFFFFFF17A8 :                     ; Init System
(1)  182/FFFFFFFFFFFF17A8 :                     ; 
(1)  183/FFFFFFFFFFFF17A8 :                     ; Uses:
(1)  184/FFFFFFFFFFFF17A8 :                     ; a0-a2,d0-d1
(1)  185/FFFFFFFFFFFF17A8 :                     ; --------------------------------------------------------
(1)  186/FFFFFFFFFFFF17A8 :                     
(1)  187/FFFFFFFFFFFF17A8 :                     System_Init:
(1)  188/FFFFFFFFFFFF17A8 : 007C 0700           		or.w	#$0700,sr
(1)  190/FFFFFFFFFFFF17AC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF17B2 : 1100             
(1)  191/FFFFFFFFFFFF17B4 :                     .wait:
(1)  192/FFFFFFFFFFFF17B4 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF17BA : 1100             
(1)  193/FFFFFFFFFFFF17BC : 66F6                		bne.s	.wait
(1)  194/FFFFFFFFFFFF17BE : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  195/FFFFFFFFFFFF17C0 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  196/FFFFFFFFFFFF17C6 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  197/FFFFFFFFFFFF17CC : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  198/FFFFFFFFFFFF17D2 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF17D8 : 1100             
(1)  200/FFFFFFFFFFFF17DA : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/FFFFFFFFFFFF17DE : 31C0 EDA0            		move.w	d0,(RAM_VBlankJump).w
(1)  202/FFFFFFFFFFFF17E2 : 31C0 EDA6           		move.w	d0,(RAM_HBlankJump).w
(1)  203/FFFFFFFFFFFF17E6 : 31C0 EDAC           		move.w	d0,(RAM_ExternalJump).w
(1)  204/FFFFFFFFFFFF17EA : 203C FFFF 1B62      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/FFFFFFFFFFFF17F0 : 223C FFFF 1B64      		move.l	#HInt_Default,d1
(1)  206/FFFFFFFFFFFF17F6 : 243C FFFF 1B66      		move.l	#ExtInt_Default,d2
(1)  207/FFFFFFFFFFFF17FC : 6100 0586           		bsr	System_SetIntJumps
(1)  208/FFFFFFFFFFFF1800 : 41F8 DD18           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/FFFFFFFFFFFF1804 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/FFFFFFFFFFFF1808 : 7000                		moveq	#0,d0
(1)  211/FFFFFFFFFFFF180A :                     .clrinput:
(1)  212/FFFFFFFFFFFF180A : 30C0                		move.w	d0,(a0)+
(1)  213/FFFFFFFFFFFF180C : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/FFFFFFFFFFFF1810 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/FFFFFFFFFFFF1814 : 4E75                		rts
(1)  216/FFFFFFFFFFFF1816 :                     
(1)  217/FFFFFFFFFFFF1816 :                     ; ====================================================================
(1)  218/FFFFFFFFFFFF1816 :                     ; --------------------------------------------------------
(1)  219/FFFFFFFFFFFF1816 :                     ; System_Render
(1)  220/FFFFFFFFFFFF1816 :                     ;
(1)  221/FFFFFFFFFFFF1816 :                     ; This will:
(1)  222/FFFFFFFFFFFF1816 :                     ; - Drop a frame if we got late on VBlank
(1)  223/FFFFFFFFFFFF1816 :                     ; - Process Palette fading buffers
(1)  224/FFFFFFFFFFFF1816 :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/FFFFFFFFFFFF1816 :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/FFFFFFFFFFFF1816 :                     ; - Check the sound driver for any changes/requests
(1)  227/FFFFFFFFFFFF1816 :                     ;   from Z80 (Sound_Update, several times)
(1)  228/FFFFFFFFFFFF1816 :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/FFFFFFFFFFFF1816 :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/FFFFFFFFFFFF1816 :                     ;
(1)  231/FFFFFFFFFFFF1816 :                     ; During VBlank:
(1)  232/FFFFFFFFFFFF1816 :                     ; - Read the Input data, (System_Input)
(1)  233/FFFFFFFFFFFF1816 :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/FFFFFFFFFFFF1816 :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/FFFFFFFFFFFF1816 :                     ;   (Video_Render)
(1)  236/FFFFFFFFFFFF1816 :                     ;
(1)  237/FFFFFFFFFFFF1816 :                     ; Notes:
(1)  238/FFFFFFFFFFFF1816 :                     ; - If VDP Display is disabled all of this
(1)  239/FFFFFFFFFFFF1816 :                     ;   will be skipped.
(1)  240/FFFFFFFFFFFF1816 :                     ; --------------------------------------------------------
(1)  241/FFFFFFFFFFFF1816 :                     
(1)  242/FFFFFFFFFFFF1816 :                     System_Render:
(1)  243/FFFFFFFFFFFF1816 : 3E38 DC12           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/FFFFFFFFFFFF181A : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/FFFFFFFFFFFF181E : 671C                		beq	.forgot_disp
(1)  246/FFFFFFFFFFFF1820 : 6100 F4C2           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/FFFFFFFFFFFF1824 :                     .wait_early:
(1)  248/FFFFFFFFFFFF1824 : 616E                		bsr	Sound_Update			; Update sound on wait
(1)  249/FFFFFFFFFFFF1826 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/FFFFFFFFFFFF182C : 0807 0003           		btst	#bitVBlk,d7
(1)  251/FFFFFFFFFFFF1830 : 66F2                		bne.s	.wait_early
(1)  252/FFFFFFFFFFFF1832 :                     	; ----------------------------------------
(1)  253/FFFFFFFFFFFF1832 :                     	; 32X/CD32X
(1)  286/FFFFFFFFFFFF1832 :                     ; ----------------------------------------
(1)  287/FFFFFFFFFFFF1832 : 610A                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/FFFFFFFFFFFF1834 :                     ; ----------------------------------------
(1)  294/FFFFFFFFFFFF1834 :                     .from_late:
(1)  296/FFFFFFFFFFFF1834 : 615E                		bsr	Sound_Update
(1)  302/FFFFFFFFFFFF1836 : 52B8 DBF8           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/FFFFFFFFFFFF183A : 6158                		bsr	Sound_Update
(1)  304/FFFFFFFFFFFF183C :                     .forgot_disp:
(1)  305/FFFFFFFFFFFF183C : 4E75                		rts
(1)  306/FFFFFFFFFFFF183E :                     ; ----------------------------------------
(1)  307/FFFFFFFFFFFF183E :                     ; Wait until beam reaches VBlank
(1)  308/FFFFFFFFFFFF183E :                     ; ----------------------------------------
(1)  309/FFFFFFFFFFFF183E :                     
(1)  310/FFFFFFFFFFFF183E : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/FFFFFFFFFFFF1840 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/FFFFFFFFFFFF1846 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/FFFFFFFFFFFF184A : 67F2                		beq.s	.wait_vblank
(1)  314/FFFFFFFFFFFF184C : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/FFFFFFFFFFFF184E : 6000 EB1A           		bra	Video_Render			; Render VDP Visuals
(1)  316/FFFFFFFFFFFF1852 :                     
(1)  317/FFFFFFFFFFFF1852 :                     ; ====================================================================
(1)  318/FFFFFFFFFFFF1852 :                     ; --------------------------------------------------------
(1)  319/FFFFFFFFFFFF1852 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/FFFFFFFFFFFF1852 :                     ; from ROM or RAM
(1)  321/FFFFFFFFFFFF1852 :                     ;
(1)  322/FFFFFFFFFFFF1852 :                     ; Call these labels BEFORE and AFTER your
(1)  323/FFFFFFFFFFFF1852 :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/FFFFFFFFFFFF1852 :                     ; FILL or COPY.
(1)  325/FFFFFFFFFFFF1852 :                     ;
(1)  326/FFFFFFFFFFFF1852 :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/FFFFFFFFFFFF1852 :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/FFFFFFFFFFFF1852 :                     ; GONNA USE TO STACK.
(1)  329/FFFFFFFFFFFF1852 :                     ; --------------------------------------------------------
(1)  330/FFFFFFFFFFFF1852 :                     
(1)  331/FFFFFFFFFFFF1852 :                     ; --------------------------------------------------------
(1)  332/FFFFFFFFFFFF1852 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/FFFFFFFFFFFF1852 :                     System_DmaEnter_ROM:
(1)  334/FFFFFFFFFFFF1852 : 6138                		bsr	System_DmaEnter_RAM
(1)  342/FFFFFFFFFFFF1854 : 4E75                		rts
(1)  343/FFFFFFFFFFFF1856 :                     
(1)  344/FFFFFFFFFFFF1856 :                     System_DmaExit_ROM:
(1)  352/FFFFFFFFFFFF1856 : 6038                		bra	System_DmaExit_RAM
(1)  353/FFFFFFFFFFFF1858 :                     
(1)  354/FFFFFFFFFFFF1858 :                     ; ------------------------------------------------
(1)  355/FFFFFFFFFFFF1858 :                     
(1)  356/FFFFFFFFFFFF1858 :                     sys_MarsSlvCmd:
(1)  357/FFFFFFFFFFFF1858 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/FFFFFFFFFFFF185E : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/FFFFFFFFFFFF1860 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/FFFFFFFFFFFF1866 : 8E06                		or.b	d6,d7
(1)  361/FFFFFFFFFFFF1868 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/FFFFFFFFFFFF186C : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/FFFFFFFFFFFF1872 : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
         FFFFFFFFFFFF1878 : 5103             
(1)  364/FFFFFFFFFFFF187A : 4E71                		nop
(1)  365/FFFFFFFFFFFF187C : 4E71                		nop
(1)  366/FFFFFFFFFFFF187E :                     .wait_exit:
(1)  367/FFFFFFFFFFFF187E : 4E71                		nop
(1)  368/FFFFFFFFFFFF1880 : 4E71                		nop
(1)  369/FFFFFFFFFFFF1882 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/FFFFFFFFFFFF1888 : 66F4                		bne.s	.wait_exit
(1)  371/FFFFFFFFFFFF188A : 4E75                		rts
(1)  372/FFFFFFFFFFFF188C :                     
(1)  373/FFFFFFFFFFFF188C :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF188C :                     ; *** EXTERNAL JUMPS ***
(1)  375/FFFFFFFFFFFF188C :                     ; --------------------------------------------------------
(1)  376/FFFFFFFFFFFF188C :                     
(1)  377/FFFFFFFFFFFF188C :                     System_DmaEnter_RAM:
(1)  378/FFFFFFFFFFFF188C : 6000 E8E2           		bra	gemaDmaPause
(1)  379/FFFFFFFFFFFF1890 :                     System_DmaExit_RAM:
(1)  380/FFFFFFFFFFFF1890 : 6000 E8FC           		bra	gemaDmaResume
(1)  381/FFFFFFFFFFFF1894 :                     
(1)  382/FFFFFFFFFFFF1894 :                     ; ====================================================================
(1)  383/FFFFFFFFFFFF1894 :                     ; --------------------------------------------------------
(1)  384/FFFFFFFFFFFF1894 :                     ; Update sound/sycronize with the Z80
(1)  385/FFFFFFFFFFFF1894 :                     ; --------------------------------------------------------
(1)  386/FFFFFFFFFFFF1894 :                     
(1)  387/FFFFFFFFFFFF1894 :                     Sound_Update:
(1)  388/FFFFFFFFFFFF1894 : 6000 E7F2           		bra	gemaUpdate
(1)  389/FFFFFFFFFFFF1898 :                     
(1)  390/FFFFFFFFFFFF1898 :                     ; ====================================================================
(1)  391/FFFFFFFFFFFF1898 :                     ; --------------------------------------------------------
(1)  392/FFFFFFFFFFFF1898 :                     ; Init sound driver
(1)  393/FFFFFFFFFFFF1898 :                     ; --------------------------------------------------------
(1)  394/FFFFFFFFFFFF1898 :                     
(1)  395/FFFFFFFFFFFF1898 :                     Sound_Init:
(1)  396/FFFFFFFFFFFF1898 : 6000 E766           		bra	gemaInit
(1)  397/FFFFFFFFFFFF189C :                     
(1)  398/FFFFFFFFFFFF189C :                     ; ====================================================================
(1)  399/FFFFFFFFFFFF189C :                     ; --------------------------------------------------------
(1)  400/FFFFFFFFFFFF189C :                     ; System_Input
(1)  401/FFFFFFFFFFFF189C :                     ;
(1)  402/FFFFFFFFFFFF189C :                     ; Reads data from the Controller ports
(1)  403/FFFFFFFFFFFF189C :                     ;
(1)  404/FFFFFFFFFFFF189C :                     ; Call this during VBlank only once per frame,
(1)  405/FFFFFFFFFFFF189C :                     ; System_Render already calls this.
(1)  406/FFFFFFFFFFFF189C :                     ;
(1)  407/FFFFFFFFFFFF189C :                     ; Uses:
(1)  408/FFFFFFFFFFFF189C :                     ; d5-d7,a5-a6
(1)  409/FFFFFFFFFFFF189C :                     ; --------------------------------------------------------
(1)  410/FFFFFFFFFFFF189C :                     
(1)  411/FFFFFFFFFFFF189C :                     ; ----------------------------------------
(1)  412/FFFFFFFFFFFF189C :                     ; PICO input is hard-coded to
(1)  413/FFFFFFFFFFFF189C :                     ; Controller_1
(1)  414/FFFFFFFFFFFF189C :                     ;
(1)  415/FFFFFFFFFFFF189C :                     ; on_hold/on_press:
(1)  416/FFFFFFFFFFFF189C :                     ; %P00BRLDU
(1)  417/FFFFFFFFFFFF189C :                     ; UDLR - Arrows
(1)  418/FFFFFFFFFFFF189C :                     ;    B - BIG button red (JoyB)
(1)  419/FFFFFFFFFFFF189C :                     ;    P - Pen press/click (JoyStart)
(1)  420/FFFFFFFFFFFF189C :                     ;
(1)  421/FFFFFFFFFFFF189C :                     ; mouse_x/mouse_y:
(1)  422/FFFFFFFFFFFF189C :                     ; Pen X/Y position
(1)  423/FFFFFFFFFFFF189C :                     ; ----------------------------------------
(1)  424/FFFFFFFFFFFF189C :                     
(1)  425/FFFFFFFFFFFF189C :                     System_Input:
(1)  472/FFFFFFFFFFFF189C :                     
(1)  473/FFFFFFFFFFFF189C :                     	; ----------------------------------------
(1)  474/FFFFFFFFFFFF189C :                     	; Normal Genesis controls
(1)  475/FFFFFFFFFFFF189C : 4DF8 DD18           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  476/FFFFFFFFFFFF18A0 : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  477/FFFFFFFFFFFF18A6 : 6108                		bsr.s	.this_one
(1)  478/FFFFFFFFFFFF18A8 : DAFC 0002           		adda	#2,a5
(1)  479/FFFFFFFFFFFF18AC : DCFC 0010           		adda	#sizeof_input,a6
(1)  480/FFFFFFFFFFFF18B0 :                     
(1)  481/FFFFFFFFFFFF18B0 :                     ; ----------------------------------------
(1)  482/FFFFFFFFFFFF18B0 :                     ; Read port
(1)  483/FFFFFFFFFFFF18B0 :                     ;
(1)  484/FFFFFFFFFFFF18B0 :                     ; a5 - Current port
(1)  485/FFFFFFFFFFFF18B0 :                     ; a6 - Output data
(1)  486/FFFFFFFFFFFF18B0 :                     ; ----------------------------------------
(1)  487/FFFFFFFFFFFF18B0 :                     
(1)  488/FFFFFFFFFFFF18B0 :                     .this_one:
(1)  489/FFFFFFFFFFFF18B0 : 611C                		bsr	.pick_id
(1)  490/FFFFFFFFFFFF18B2 : 1C87                		move.b	d7,pad_id(a6)
(1)  491/FFFFFFFFFFFF18B4 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  492/FFFFFFFFFFFF18B8 : 670E                		beq.s	.exit
(1)  493/FFFFFFFFFFFF18BA : 0247 000F           		andi.w	#$0F,d7
(1)  494/FFFFFFFFFFFF18BE : DE47                		add.w	d7,d7
(1)  495/FFFFFFFFFFFF18C0 : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  496/FFFFFFFFFFFF18C4 : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  497/FFFFFFFFFFFF18C8 :                     .exit:
(1)  498/FFFFFFFFFFFF18C8 : 422E 0001           		clr.b	pad_ver(a6)
(1)  499/FFFFFFFFFFFF18CC : 4E75                		rts
(1)  500/FFFFFFFFFFFF18CE :                     
(1)  501/FFFFFFFFFFFF18CE :                     ; ----------------------------------------
(1)  502/FFFFFFFFFFFF18CE :                     ; Grab ID
(1)  503/FFFFFFFFFFFF18CE :                     ; ----------------------------------------
(1)  504/FFFFFFFFFFFF18CE :                     
(1)  505/FFFFFFFFFFFF18CE :                     .pick_id:
(1)  506/FFFFFFFFFFFF18CE : 7E00                		moveq	#0,d7
(1)  507/FFFFFFFFFFFF18D0 : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  508/FFFFFFFFFFFF18D4 : 4E71                		nop
(1)  509/FFFFFFFFFFFF18D6 : 4E71                		nop
(1)  510/FFFFFFFFFFFF18D8 : 610A                		bsr	.read
(1)  511/FFFFFFFFFFFF18DA : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  512/FFFFFFFFFFFF18DE : 4E71                		nop
(1)  513/FFFFFFFFFFFF18E0 : 4E71                		nop
(1)  514/FFFFFFFFFFFF18E2 : DE47                		add.w	d7,d7
(1)  515/FFFFFFFFFFFF18E4 :                     .read:
(1)  516/FFFFFFFFFFFF18E4 : 1A15                		move.b	(a5),d5
(1)  517/FFFFFFFFFFFF18E6 : 1C05                		move.b	d5,d6
(1)  518/FFFFFFFFFFFF18E8 : 0206 000C           		andi.b	#%1100,d6
(1)  519/FFFFFFFFFFFF18EC : 6702                		beq.s	.step_1
(1)  520/FFFFFFFFFFFF18EE : 5247                		addq.w	#1,d7
(1)  521/FFFFFFFFFFFF18F0 :                     .step_1:
(1)  522/FFFFFFFFFFFF18F0 : DE47                		add.w	d7,d7
(1)  523/FFFFFFFFFFFF18F2 : 1C05                		move.b	d5,d6
(1)  524/FFFFFFFFFFFF18F4 : 0246 0003           		andi.w	#%0011,d6
(1)  525/FFFFFFFFFFFF18F8 : 6702                		beq.s	.step_2
(1)  526/FFFFFFFFFFFF18FA : 5247                		addq.w	#1,d7
(1)  527/FFFFFFFFFFFF18FC :                     .step_2:
(1)  528/FFFFFFFFFFFF18FC : 4E75                		rts
(1)  529/FFFFFFFFFFFF18FE :                     
(1)  530/FFFFFFFFFFFF18FE :                     ; ----------------------------------------
(1)  531/FFFFFFFFFFFF18FE :                     ; Grab ID
(1)  532/FFFFFFFFFFFF18FE :                     ; ----------------------------------------
(1)  533/FFFFFFFFFFFF18FE :                     
(1)  534/FFFFFFFFFFFF18FE :                     .list:
(1)  535/FFFFFFFFFFFF18FE : FFCA                		dc.w .exit-.list	; $00
(1)  536/FFFFFFFFFFFF1900 : FFCA                		dc.w .exit-.list
(1)  537/FFFFFFFFFFFF1902 : FFCA                		dc.w .exit-.list
(1)  538/FFFFFFFFFFFF1904 : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  539/FFFFFFFFFFFF1906 : FFCA                		dc.w .exit-.list	; $04
(1)  540/FFFFFFFFFFFF1908 : FFCA                		dc.w .exit-.list
(1)  541/FFFFFFFFFFFF190A : FFCA                		dc.w .exit-.list
(1)  542/FFFFFFFFFFFF190C : FFCA                		dc.w .exit-.list
(1)  543/FFFFFFFFFFFF190E : FFCA                		dc.w .exit-.list	; $08
(1)  544/FFFFFFFFFFFF1910 : FFCA                		dc.w .exit-.list
(1)  545/FFFFFFFFFFFF1912 : FFCA                		dc.w .exit-.list
(1)  546/FFFFFFFFFFFF1914 : FFCA                		dc.w .exit-.list
(1)  547/FFFFFFFFFFFF1916 : FFCA                		dc.w .exit-.list	; $0C
(1)  548/FFFFFFFFFFFF1918 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller (3 or 6 button)
(1)  549/FFFFFFFFFFFF191A : FFCA                		dc.w .exit-.list
(1)  550/FFFFFFFFFFFF191C : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  551/FFFFFFFFFFFF191E :                     
(1)  552/FFFFFFFFFFFF191E :                     ; ----------------------------------------
(1)  553/FFFFFFFFFFFF191E :                     ; ID $03
(1)  554/FFFFFFFFFFFF191E :                     ;
(1)  555/FFFFFFFFFFFF191E :                     ; Mega Mouse
(1)  556/FFFFFFFFFFFF191E :                     ; ----------------------------------------
(1)  557/FFFFFFFFFFFF191E :                     
(1)  558/FFFFFFFFFFFF191E :                     ; *** NOT TESTED ON HARDWARE ***
(1)  559/FFFFFFFFFFFF191E :                     ; *** NO RELEASED BITS ***
(1)  560/FFFFFFFFFFFF191E :                     
(1)  561/FFFFFFFFFFFF191E :                     .id_03:
(1)  562/FFFFFFFFFFFF191E : 1ABC 0020           		move.b	#$20,(a5)
(1)  563/FFFFFFFFFFFF1922 : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  564/FFFFFFFFFFFF1928 : 0815 0004           		btst	#4,(a5)
(1)  565/FFFFFFFFFFFF192C : 6700 0094           		beq.w	.invalid
(1)  566/FFFFFFFFFFFF1930 : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  567/FFFFFFFFFFFF1934 : 4E71                		nop
(1)  568/FFFFFFFFFFFF1936 : 4E71                		nop
(1)  569/FFFFFFFFFFFF1938 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  570/FFFFFFFFFFFF193C : 4E71                		nop
(1)  571/FFFFFFFFFFFF193E : 4E71                		nop
(1)  572/FFFFFFFFFFFF1940 : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  573/FFFFFFFFFFFF1944 : 4E71                		nop
(1)  574/FFFFFFFFFFFF1946 : 4E71                		nop
(1)  575/FFFFFFFFFFFF1948 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  576/FFFFFFFFFFFF194A : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  577/FFFFFFFFFFFF194E : 4E71                		nop
(1)  578/FFFFFFFFFFFF1950 : 4E71                		nop
(1)  579/FFFFFFFFFFFF1952 : 1E15                		move.b	(a5),d7
(1)  580/FFFFFFFFFFFF1954 : 0247 000F            		andi.w	#%1111,d7
(1)  581/FFFFFFFFFFFF1958 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  582/FFFFFFFFFFFF195C : BF46                		eor.w	d7,d6
(1)  583/FFFFFFFFFFFF195E : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  584/FFFFFFFFFFFF1962 : CC47                		and.w	d7,d6
(1)  585/FFFFFFFFFFFF1964 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  586/FFFFFFFFFFFF1968 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  587/FFFFFFFFFFFF196C : 4E71                		nop
(1)  588/FFFFFFFFFFFF196E : 4E71                		nop
(1)  589/FFFFFFFFFFFF1970 : 1E15                		move.b	(a5),d7
(1)  590/FFFFFFFFFFFF1972 : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  591/FFFFFFFFFFFF1976 : 0247 000F           		andi.w	#%1111,d7
(1)  592/FFFFFFFFFFFF197A : E94F                		lsl.w	#4,d7
(1)  593/FFFFFFFFFFFF197C : 4E71                		nop
(1)  594/FFFFFFFFFFFF197E : 1C15                		move.b	(a5),d6
(1)  595/FFFFFFFFFFFF1980 : 0246 000F           		andi.w	#%1111,d6
(1)  596/FFFFFFFFFFFF1984 : 8E46                		or.w	d6,d7
(1)  597/FFFFFFFFFFFF1986 : 0805 0000           		btst    #0,d5
(1)  598/FFFFFFFFFFFF198A : 6704                		beq.s	.x_neg
(1)  599/FFFFFFFFFFFF198C : 4407                		neg.b	d7
(1)  600/FFFFFFFFFFFF198E : 4447                		neg.w	d7
(1)  601/FFFFFFFFFFFF1990 :                     .x_neg:
(1)  602/FFFFFFFFFFFF1990 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  603/FFFFFFFFFFFF1994 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  604/FFFFFFFFFFFF1998 : 4E71                		nop
(1)  605/FFFFFFFFFFFF199A : 4E71                		nop
(1)  606/FFFFFFFFFFFF199C : 1E15                		move.b	(a5),d7
(1)  607/FFFFFFFFFFFF199E : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  608/FFFFFFFFFFFF19A2 : 0247 000F           		andi.w	#%1111,d7
(1)  609/FFFFFFFFFFFF19A6 : E94F                		lsl.w	#4,d7
(1)  610/FFFFFFFFFFFF19A8 : 4E71                		nop
(1)  611/FFFFFFFFFFFF19AA : 1C15                		move.b	(a5),d6
(1)  612/FFFFFFFFFFFF19AC : 0246 000F           		andi.w	#%1111,d6
(1)  613/FFFFFFFFFFFF19B0 : 8E46                		or.w	d6,d7
(1)  614/FFFFFFFFFFFF19B2 : 0805 0001           		btst    #1,d5
(1)  615/FFFFFFFFFFFF19B6 : 6704                		beq.s	.y_neg
(1)  616/FFFFFFFFFFFF19B8 : 4407                		neg.b	d7
(1)  617/FFFFFFFFFFFF19BA : 4447                		neg.w	d7
(1)  618/FFFFFFFFFFFF19BC :                     .y_neg:
(1)  619/FFFFFFFFFFFF19BC : 4447                		neg.w	d7		; Reverse Y
(1)  620/FFFFFFFFFFFF19BE : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  621/FFFFFFFFFFFF19C2 :                     
(1)  622/FFFFFFFFFFFF19C2 :                     .invalid:
(1)  623/FFFFFFFFFFFF19C2 : 1ABC 0060           		move.b	#$60,(a5)
(1)  624/FFFFFFFFFFFF19C6 : 4E75                		rts
(1)  625/FFFFFFFFFFFF19C8 :                     
(1)  626/FFFFFFFFFFFF19C8 :                     ; ----------------------------------------
(1)  627/FFFFFFFFFFFF19C8 :                     ; ID $0D
(1)  628/FFFFFFFFFFFF19C8 :                     ;
(1)  629/FFFFFFFFFFFF19C8 :                     ; Normal controller: 3 button or 6 button.
(1)  630/FFFFFFFFFFFF19C8 :                     ; ----------------------------------------
(1)  631/FFFFFFFFFFFF19C8 :                     
(1)  632/FFFFFFFFFFFF19C8 :                     .id_0D:
(1)  633/FFFFFFFFFFFF19C8 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  634/FFFFFFFFFFFF19CC : 4E71                		nop
(1)  635/FFFFFFFFFFFF19CE : 4E71                		nop
(1)  636/FFFFFFFFFFFF19D0 : 1A15                		move.b	(a5),d5
(1)  637/FFFFFFFFFFFF19D2 : 0245 003F           		andi.w	#%00111111,d5
(1)  638/FFFFFFFFFFFF19D6 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  639/FFFFFFFFFFFF19DA : 4E71                		nop
(1)  640/FFFFFFFFFFFF19DC : 4E71                		nop
(1)  641/FFFFFFFFFFFF19DE : 1E15                		move.b	(a5),d7		; The following flips are for
(1)  642/FFFFFFFFFFFF19E0 : E54F                		lsl.w	#2,d7		; the 6pad's internal counter:
(1)  643/FFFFFFFFFFFF19E2 : 0247 00C0           		andi.w	#%11000000,d7
(1)  644/FFFFFFFFFFFF19E6 : 8E45                		or.w	d5,d7
(1)  645/FFFFFFFFFFFF19E8 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  646/FFFFFFFFFFFF19EC : 4647                		not.w	d7
(1)  647/FFFFFFFFFFFF19EE : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  648/FFFFFFFFFFFF19F2 : 1805                		move.b	d5,d4
(1)  649/FFFFFFFFFFFF19F4 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  650/FFFFFFFFFFFF19F8 : BF05                		eor.b	d7,d5
(1)  651/FFFFFFFFFFFF19FA : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  652/FFFFFFFFFFFF19FE : CA07                		and.b	d7,d5
(1)  653/FFFFFFFFFFFF1A00 : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  654/FFFFFFFFFFFF1A04 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  655/FFFFFFFFFFFF1A08 : 1A07                		move.b	d7,d5
(1)  656/FFFFFFFFFFFF1A0A : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  657/FFFFFFFFFFFF1A0C : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  658/FFFFFFFFFFFF1A10 : B905                		eor.b	d4,d5
(1)  659/FFFFFFFFFFFF1A12 : CA04                		and.b	d4,d5
(1)  660/FFFFFFFFFFFF1A14 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  661/FFFFFFFFFFFF1A16 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  662/FFFFFFFFFFFF1A1A : 1D45 0007           		move.b	d5,on_release+1(a6)
(1)  663/FFFFFFFFFFFF1A1E : 0246 000F           		andi.w	#$F,d6
(1)  664/FFFFFFFFFFFF1A22 : E44E                		lsr.w	#2,d6
(1)  665/FFFFFFFFFFFF1A24 : 0246 0001           		andi.w	#1,d6
(1)  666/FFFFFFFFFFFF1A28 : 6724                		beq.s	.oldpad
(1)  667/FFFFFFFFFFFF1A2A : 4607                		not.b	d7
(1)  668/FFFFFFFFFFFF1A2C : 0247 000F            		andi.w	#%1111,d7
(1)  669/FFFFFFFFFFFF1A30 : 1C07                 		move.b	d7,d6
(1)  670/FFFFFFFFFFFF1A32 : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  671/FFFFFFFFFFFF1A36 : BB06                		eor.b	d5,d6
(1)  672/FFFFFFFFFFFF1A38 : CC05                		and.b	d5,d6
(1)  673/FFFFFFFFFFFF1A3A : 1D46 0006           		move.b	d6,on_release(a6)
(1)  674/FFFFFFFFFFFF1A3E : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  675/FFFFFFFFFFFF1A42 : BF05                		eor.b	d7,d5
(1)  676/FFFFFFFFFFFF1A44 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  677/FFFFFFFFFFFF1A48 : CA07                		and.b	d7,d5
(1)  678/FFFFFFFFFFFF1A4A : 1D45 0004           		move.b	d5,on_press(a6)
(1)  679/FFFFFFFFFFFF1A4E :                     .oldpad:
(1)  680/FFFFFFFFFFFF1A4E : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  681/FFFFFFFFFFFF1A52 : 4E75                		rts
(1)  683/FFFFFFFFFFFF1A54 :                     
(1)  684/FFFFFFFFFFFF1A54 :                     ; ============================================================
(1)  685/FFFFFFFFFFFF1A54 :                     ; --------------------------------------------------------
(1)  686/FFFFFFFFFFFF1A54 :                     ; System_SramInit
(1)  687/FFFFFFFFFFFF1A54 :                     ;
(1)  688/FFFFFFFFFFFF1A54 :                     ; Enable SRAM/BRAM support
(1)  689/FFFFFFFFFFFF1A54 :                     ;
(1)  690/FFFFFFFFFFFF1A54 :                     ; Input:
(1)  691/FFFFFFFFFFFF1A54 :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/FFFFFFFFFFFF1A54 :                     ;      dc.b "SAVE_NAME__",0
(1)  693/FFFFFFFFFFFF1A54 :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/FFFFFFFFFFFF1A54 :                     ;                            ; protection)
(1)  695/FFFFFFFFFFFF1A54 :                     ;      dc.w flags:
(1)  696/FFFFFFFFFFFF1A54 :                     ;            0 | Normal
(1)  697/FFFFFFFFFFFF1A54 :                     ;           -1 | Save protection
(1)  698/FFFFFFFFFFFF1A54 :                     ;
(1)  699/FFFFFFFFFFFF1A54 :                     ;
(1)  700/FFFFFFFFFFFF1A54 :                     ; Notes:
(1)  701/FFFFFFFFFFFF1A54 :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/FFFFFFFFFFFF1A54 :                     ;   your changes, then call System_SramSave to
(1)  703/FFFFFFFFFFFF1A54 :                     ;   save it into SRAM/BRAM.
(1)  704/FFFFFFFFFFFF1A54 :                     ;
(1)  705/FFFFFFFFFFFF1A54 :                     ; CD/CD32X ONLY:
(1)  706/FFFFFFFFFFFF1A54 :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/FFFFFFFFFFFF1A54 :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/FFFFFFFFFFFF1A54 :                     ;   OVERWRITE without warning any other save.
(1)  709/FFFFFFFFFFFF1A54 :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/FFFFFFFFFFFF1A54 :                     ;   PCM samples
(1)  711/FFFFFFFFFFFF1A54 :                     ; --------------------------------------------------------
(1)  712/FFFFFFFFFFFF1A54 :                     
(1)  713/FFFFFFFFFFFF1A54 :                     System_SramInit:
(1)  717/FFFFFFFFFFFF1A54 :                     
(1)  718/FFFFFFFFFFFF1A54 :                     	; ------------------------------------------------
(1)  719/FFFFFFFFFFFF1A54 :                     	; CD BRAM
(1)  720/FFFFFFFFFFFF1A54 :                     	; ------------------------------------------------
(1)  721/FFFFFFFFFFFF1A54 : 4A78 EDB2           		tst.w	(RAM_SaveEnable).w			; Already initialized?
(1)  722/FFFFFFFFFFFF1A58 : 6666                		bne	.already_set
(1)  723/FFFFFFFFFFFF1A5A :                     ; 	if MARSCD
(1)  724/FFFFFFFFFFFF1A5A :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l		; Set RV=1
(1)  725/FFFFFFFFFFFF1A5A :                     ; 	endif
(1)  726/FFFFFFFFFFFF1A5A : 6100 0350           		bsr	System_MdMcd_SubWait
(1)  727/FFFFFFFFFFFF1A5E : 4BFA 054E           		lea	def_SaveInfo(pc),a5			; Init+Load SRAM/BRAM feature
(1)  728/FFFFFFFFFFFF1A62 : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a6		; Copy-paste info
(1)  729/FFFFFFFFFFFF1A68 : 7E07                		moveq	#($10/2)-1,d7
(1)  730/FFFFFFFFFFFF1A6A :                     .copy_paste:
(1)  731/FFFFFFFFFFFF1A6A : 3CDD                		move.w	(a5)+,(a6)+
(1)  732/FFFFFFFFFFFF1A6C : 51CF FFFC           		dbf	d7,.copy_paste
(1)  733/FFFFFFFFFFFF1A70 : 7008                		moveq	#$08,d0					; Init BRAM support
(1)  734/FFFFFFFFFFFF1A72 : 6100 034C           		bsr	System_MdMcd_SubTask
(1)  735/FFFFFFFFFFFF1A76 : 6100 0334           		bsr	System_MdMcd_SubWait
(1)  736/FFFFFFFFFFFF1A7A :                     ; 	if MARSCD
(1)  737/FFFFFFFFFFFF1A7A :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l		; Set RV=0
(1)  738/FFFFFFFFFFFF1A7A :                     ; 	endif
(1)  739/FFFFFFFFFFFF1A7A : 31FC 0000 EDB2      		move.w	#0,(RAM_SaveEnable).w			; Disable SAVE R/W
(1)  740/FFFFFFFFFFFF1A80 : 0C79 FFFE 00A1      		cmp.w	#-2,(sysmcd_reg+mcd_dcomm_s).l		; Got -2 No RAM / Unformatted?
         FFFFFFFFFFFF1A86 : 2020             
(1)  741/FFFFFFFFFFFF1A88 : 6732                		beq.s	.cont_save
(1)  742/FFFFFFFFFFFF1A8A :                     .not_fail:
(1)  743/FFFFFFFFFFFF1A8A : 31FC 0001 EDB2      		move.w	#1,(RAM_SaveEnable).w			; Enable SAVE Read/Write
(1)  744/FFFFFFFFFFFF1A90 : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l		; Found the file?
         FFFFFFFFFFFF1A96 : 2020             
(1)  745/FFFFFFFFFFFF1A98 : 6622                		bne.s	.cont_save
(1)  746/FFFFFFFFFFFF1A9A : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  747/FFFFFFFFFFFF1A9E : 4DF8 DC18           		lea	(RAM_SaveData).w,a6			; If NOT found, Make SAVE template
(1)  748/FFFFFFFFFFFF1AA2 : 7C00                		moveq	#0,d6
(1)  749/FFFFFFFFFFFF1AA4 : 3E3C 00FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  750/FFFFFFFFFFFF1AA8 :                     .clr_sram:
(1)  751/FFFFFFFFFFFF1AA8 : 1CC6                		move.b	d6,(a6)+
(1)  752/FFFFFFFFFFFF1AAA : 51CF FFFC           		dbf	d7,.clr_sram
(1)  753/FFFFFFFFFFFF1AAE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  754/FFFFFFFFFFFF1AB2 : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE template
         FFFFFFFFFFFF1AB8 : DC18             
(1)  755/FFFFFFFFFFFF1ABA : 6106                		bsr	System_SramSave
(1)  756/FFFFFFFFFFFF1ABC :                     .cont_save:
(1)  757/FFFFFFFFFFFF1ABC : 614C                		bsr	System_SramLoad				; Get data from BRAM
(1)  758/FFFFFFFFFFFF1ABE :                     	; ------------------------------------------------
(1)  782/FFFFFFFFFFFF1ABE :                     .cant_use:
(1)  783/FFFFFFFFFFFF1ABE : 604A                		bra	System_SramLoad
(1)  784/FFFFFFFFFFFF1AC0 :                     .already_set:
(1)  785/FFFFFFFFFFFF1AC0 : 4E75                		rts
(1)  786/FFFFFFFFFFFF1AC2 :                     
(1)  787/FFFFFFFFFFFF1AC2 :                     ; --------------------------------------------------------
(1)  788/FFFFFFFFFFFF1AC2 :                     ; System_SramSave
(1)  789/FFFFFFFFFFFF1AC2 :                     ;
(1)  790/FFFFFFFFFFFF1AC2 :                     ; Returns:
(1)  791/FFFFFFFFFFFF1AC2 :                     ; bcc | Save OK
(1)  792/FFFFFFFFFFFF1AC2 :                     ; bcs | Save failed
(1)  793/FFFFFFFFFFFF1AC2 :                     ; --------------------------------------------------------
(1)  794/FFFFFFFFFFFF1AC2 :                     
(1)  795/FFFFFFFFFFFF1AC2 :                     System_SramSave:
(1)  799/FFFFFFFFFFFF1AC2 :                     
(1)  800/FFFFFFFFFFFF1AC2 :                     	; ------------------------------------------------
(1)  801/FFFFFFFFFFFF1AC2 :                     	; CD BRAM
(1)  802/FFFFFFFFFFFF1AC2 :                     	; ------------------------------------------------
(1)  803/FFFFFFFFFFFF1AC2 : 4A78 EDB2           		tst.w	(RAM_SaveEnable).w
(1)  804/FFFFFFFFFFFF1AC6 : 6740                		beq.s	.cant_use
(1)  805/FFFFFFFFFFFF1AC8 : 40E7                		move.w	sr,-(sp)
(1)  806/FFFFFFFFFFFF1ACA : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  807/FFFFFFFFFFFF1ACE : 4DF8 DC18           		lea	(RAM_SaveData).w,a6
(1)  808/FFFFFFFFFFFF1AD2 : 4BF9 0023 C000      		lea	(sysmcd_wram+WRAM_SaveDataCopy).l,a5
(1)  809/FFFFFFFFFFFF1AD8 : 3E3C 007F           		move.w	#(SET_SRAMSIZE/2)-1,d7
(1)  810/FFFFFFFFFFFF1ADC : 3C1E                .copy_save:	move.w	(a6)+,d6
(1)  811/FFFFFFFFFFFF1ADE : 3AC6                		move.w	d6,(a5)+
(1)  812/FFFFFFFFFFFF1AE0 : 51CF FFFA           		dbf	d7,.copy_save
(1)  813/FFFFFFFFFFFF1AE4 :                     ; 	if MARSCD
(1)  814/FFFFFFFFFFFF1AE4 :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  815/FFFFFFFFFFFF1AE4 :                     ; 	endif
(1)  816/FFFFFFFFFFFF1AE4 : 700A                		moveq	#$0A,d0
(1)  817/FFFFFFFFFFFF1AE6 : 6100 02D8           		bsr	System_MdMcd_SubTask
(1)  818/FFFFFFFFFFFF1AEA : 6100 0336           		bsr	System_MdMcd_GiveWRAM
(1)  819/FFFFFFFFFFFF1AEE : 6100 0310           		bsr	System_MdMcd_WaitWRAM
(1)  820/FFFFFFFFFFFF1AF2 :                     ; 	if MARSCD
(1)  821/FFFFFFFFFFFF1AF2 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  822/FFFFFFFFFFFF1AF2 :                     ; 	endif
(1)  823/FFFFFFFFFFFF1AF2 : 44FC 0000           		move	#0,ccr
(1)  824/FFFFFFFFFFFF1AF6 : 3E39 00A1 2020      		move.w	(sysmcd_reg+mcd_dcomm_s).l,d7	; Get status
(1)  825/FFFFFFFFFFFF1AFC : 6A04                		bpl.s	.save_good
(1)  826/FFFFFFFFFFFF1AFE : 44FC 0001           		move	#1,ccr
(1)  827/FFFFFFFFFFFF1B02 :                     .save_good:
(1)  828/FFFFFFFFFFFF1B02 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  829/FFFFFFFFFFFF1B06 : 46DF                		move.w	(sp)+,sr
(1)  830/FFFFFFFFFFFF1B08 :                     .cant_use:
(1)  831/FFFFFFFFFFFF1B08 :                     	; ------------------------------------------------
(1)  861/FFFFFFFFFFFF1B08 : 4E75                		rts
(1)  862/FFFFFFFFFFFF1B0A :                     
(1)  863/FFFFFFFFFFFF1B0A :                     ; --------------------------------------------------------
(1)  864/FFFFFFFFFFFF1B0A :                     ; System_SramLoad
(1)  865/FFFFFFFFFFFF1B0A :                     ;
(1)  866/FFFFFFFFFFFF1B0A :                     ; Returns:
(1)  867/FFFFFFFFFFFF1B0A :                     ; bcc | Save OK
(1)  868/FFFFFFFFFFFF1B0A :                     ; bcs | Save not found
(1)  869/FFFFFFFFFFFF1B0A :                     ; --------------------------------------------------------
(1)  870/FFFFFFFFFFFF1B0A :                     
(1)  871/FFFFFFFFFFFF1B0A :                     System_SramLoad:
(1)  875/FFFFFFFFFFFF1B0A :                     	; ------------------------------------------------
(1)  876/FFFFFFFFFFFF1B0A :                     	; CD BRAM
(1)  877/FFFFFFFFFFFF1B0A :                     	; ------------------------------------------------
(1)  878/FFFFFFFFFFFF1B0A : 4A78 EDB2           		tst.w	(RAM_SaveEnable).w
(1)  879/FFFFFFFFFFFF1B0E : 6730                		beq.s	.cant_use
(1)  880/FFFFFFFFFFFF1B10 : 40E7                		move.w	sr,-(sp)
(1)  881/FFFFFFFFFFFF1B12 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1)  882/FFFFFFFFFFFF1B16 :                     ; 	if MARSCD
(1)  883/FFFFFFFFFFFF1B16 :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l	; Set RV=1
(1)  884/FFFFFFFFFFFF1B16 :                     ; 	endif
(1)  885/FFFFFFFFFFFF1B16 : 7009                		moveq	#$09,d0
(1)  886/FFFFFFFFFFFF1B18 : 6100 02A6           		bsr	System_MdMcd_SubTask
(1)  887/FFFFFFFFFFFF1B1C : 6100 0304           		bsr	System_MdMcd_GiveWRAM
(1)  888/FFFFFFFFFFFF1B20 : 6100 02DE           		bsr	System_MdMcd_WaitWRAM
(1)  889/FFFFFFFFFFFF1B24 :                     ; 	if MARSCD
(1)  890/FFFFFFFFFFFF1B24 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l	; Set RV=0
(1)  891/FFFFFFFFFFFF1B24 :                     ; 	endif
(1)  892/FFFFFFFFFFFF1B24 : 4DF9 0023 C000      		lea	(sysmcd_wram+WRAM_SaveDataCopy).l,a6
(1)  893/FFFFFFFFFFFF1B2A : 4BF8 DC18           		lea	(RAM_SaveData).w,a5
(1)  894/FFFFFFFFFFFF1B2E : 3E3C 007F           		move.w	#(SET_SRAMSIZE/2)-1,d7
(1)  895/FFFFFFFFFFFF1B32 : 3C1E                .copy_save:	move.w	(a6)+,d6
(1)  896/FFFFFFFFFFFF1B34 : 3AC6                		move.w	d6,(a5)+
(1)  897/FFFFFFFFFFFF1B36 : 51CF FFFA           		dbf	d7,.copy_save
(1)  898/FFFFFFFFFFFF1B3A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1)  899/FFFFFFFFFFFF1B3E : 46DF                		move.w	(sp)+,sr
(1)  900/FFFFFFFFFFFF1B40 :                     .cant_use:
(1)  901/FFFFFFFFFFFF1B40 :                     	; ------------------------------------------------
(1)  934/FFFFFFFFFFFF1B40 : 4E75                		rts
(1)  935/FFFFFFFFFFFF1B42 :                     
(1)  936/FFFFFFFFFFFF1B42 :                     ; ============================================================
(1)  937/FFFFFFFFFFFF1B42 :                     ; --------------------------------------------------------
(1)  938/FFFFFFFFFFFF1B42 :                     ; System_Default
(1)  939/FFFFFFFFFFFF1B42 :                     ;
(1)  940/FFFFFFFFFFFF1B42 :                     ; Initializes current screen mode
(1)  941/FFFFFFFFFFFF1B42 :                     ;
(1)  942/FFFFFFFFFFFF1B42 :                     ; Uses:
(1)  943/FFFFFFFFFFFF1B42 :                     ; ALL
(1)  944/FFFFFFFFFFFF1B42 :                     ; --------------------------------------------------------
(1)  945/FFFFFFFFFFFF1B42 :                     
(1)  946/FFFFFFFFFFFF1B42 :                     System_Default:
(1)  947/FFFFFFFFFFFF1B42 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/FFFFFFFFFFFF1B46 : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/FFFFFFFFFFFF1B4A : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/FFFFFFFFFFFF1B4E : 7C00                		moveq	#0,d6
(1)  951/FFFFFFFFFFFF1B50 :                     .clr_loop:
(1)  952/FFFFFFFFFFFF1B50 : 1CC6                		move.b	d6,(a6)+
(1)  953/FFFFFFFFFFFF1B52 : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/FFFFFFFFFFFF1B56 : 6100 EB16           		bsr	Video_Clear
(1)  955/FFFFFFFFFFFF1B5A : 6100 E7A4           		bsr	Video_Default
(1)  956/FFFFFFFFFFFF1B5E : 6000 046E           		bra	Object_Init			; Reset all objects
(1)  957/FFFFFFFFFFFF1B62 :                     
(1)  958/FFFFFFFFFFFF1B62 :                     ; ====================================================================
(1)  959/FFFFFFFFFFFF1B62 :                     ; ----------------------------------------------------------------
(1)  960/FFFFFFFFFFFF1B62 :                     ; Default interrupts
(1)  961/FFFFFFFFFFFF1B62 :                     ; ----------------------------------------------------------------
(1)  962/FFFFFFFFFFFF1B62 :                     
(1)  963/FFFFFFFFFFFF1B62 :                     ; --------------------------------------------------------
(1)  964/FFFFFFFFFFFF1B62 :                     ; VBlank
(1)  965/FFFFFFFFFFFF1B62 :                     ; --------------------------------------------------------
(1)  966/FFFFFFFFFFFF1B62 :                     
(1)  967/FFFFFFFFFFFF1B62 :                     VInt_Default:
(1)  968/FFFFFFFFFFFF1B62 :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/FFFFFFFFFFFF1B62 :                     ; 		bsr	System_Input
(1)  970/FFFFFFFFFFFF1B62 :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/FFFFFFFFFFFF1B62 :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/FFFFFFFFFFFF1B62 : 4E73                		rte
(1)  973/FFFFFFFFFFFF1B64 :                     
(1)  974/FFFFFFFFFFFF1B64 :                     ; --------------------------------------------------------
(1)  975/FFFFFFFFFFFF1B64 :                     ; HBlank
(1)  976/FFFFFFFFFFFF1B64 :                     ; --------------------------------------------------------
(1)  977/FFFFFFFFFFFF1B64 :                     
(1)  978/FFFFFFFFFFFF1B64 :                     HInt_Default:
(1)  979/FFFFFFFFFFFF1B64 : 4E73                		rte
(1)  980/FFFFFFFFFFFF1B66 :                     
(1)  981/FFFFFFFFFFFF1B66 :                     ; --------------------------------------------------------
(1)  982/FFFFFFFFFFFF1B66 :                     ; External interrupt
(1)  983/FFFFFFFFFFFF1B66 :                     ; --------------------------------------------------------
(1)  984/FFFFFFFFFFFF1B66 :                     
(1)  985/FFFFFFFFFFFF1B66 :                     ExtInt_Default:
(1)  986/FFFFFFFFFFFF1B66 : 4E73                		rte
(1)  987/FFFFFFFFFFFF1B68 :                     
(1)  988/FFFFFFFFFFFF1B68 :                     ; ====================================================================
(1)  989/FFFFFFFFFFFF1B68 :                     ; ------------------------------------------------------------
(1)  990/FFFFFFFFFFFF1B68 :                     ; Subroutines
(1)  991/FFFFFFFFFFFF1B68 :                     ; ------------------------------------------------------------
(1)  992/FFFFFFFFFFFF1B68 :                     
(1)  993/FFFFFFFFFFFF1B68 :                     ; --------------------------------------------------------
(1)  994/FFFFFFFFFFFF1B68 :                     ; System_Random, System_Random_Seed
(1)  995/FFFFFFFFFFFF1B68 :                     ;
(1)  996/FFFFFFFFFFFF1B68 :                     ; Generate random value
(1)  997/FFFFFFFFFFFF1B68 :                     ;
(1)  998/FFFFFFFFFFFF1B68 :                     ; Input:
(1)  999/FFFFFFFFFFFF1B68 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/FFFFFFFFFFFF1B68 :                     ;
(1) 1001/FFFFFFFFFFFF1B68 :                     ; Returns:
(1) 1002/FFFFFFFFFFFF1B68 :                     ; d0.l | Result value
(1) 1003/FFFFFFFFFFFF1B68 :                     ; --------------------------------------------------------
(1) 1004/FFFFFFFFFFFF1B68 :                     
(1) 1005/FFFFFFFFFFFF1B68 :                     System_Random_Seed:
(1) 1006/FFFFFFFFFFFF1B68 : 2F04                		move.l	d4,-(sp)
(1) 1007/FFFFFFFFFFFF1B6A : 2800                		move.l	d0,d4
(1) 1008/FFFFFFFFFFFF1B6C : 6114                		bsr	sysRnd_MkValue
(1) 1009/FFFFFFFFFFFF1B6E : 281F                		move.l	(sp)+,d4
(1) 1010/FFFFFFFFFFFF1B70 : 4E75                		rts
(1) 1011/FFFFFFFFFFFF1B72 :                     System_Random:
(1) 1012/FFFFFFFFFFFF1B72 : 2F04                		move.l	d4,-(sp)
(1) 1013/FFFFFFFFFFFF1B74 : 2838 ED9C           		move.l	(RAM_SysRandom).w,d4
(1) 1014/FFFFFFFFFFFF1B78 : 6108                		bsr	sysRnd_MkValue
(1) 1015/FFFFFFFFFFFF1B7A : 21C4 ED9C           		move.l	d4,(RAM_SysRandom).w
(1) 1016/FFFFFFFFFFFF1B7E : 281F                		move.l	(sp)+,d4
(1) 1017/FFFFFFFFFFFF1B80 : 4E75                		rts
(1) 1018/FFFFFFFFFFFF1B82 :                     sysRnd_MkValue:
(1) 1019/FFFFFFFFFFFF1B82 : 4A84                		tst.l	d4
(1) 1020/FFFFFFFFFFFF1B84 : 660E                		bne.s	.has_seed
(1) 1021/FFFFFFFFFFFF1B86 : 2838 DBF8           		move.l	(RAM_FrameCount).w,d4
(1) 1022/FFFFFFFFFFFF1B8A : E1BC                		rol.l	d0,d4
(1) 1023/FFFFFFFFFFFF1B8C : E2BC                		ror.l	d1,d4
(1) 1024/FFFFFFFFFFFF1B8E : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/FFFFFFFFFFFF1B94 :                     .has_seed:
(1) 1026/FFFFFFFFFFFF1B94 : 2004                		move.l	d4,d0
(1) 1027/FFFFFFFFFFFF1B96 : E484                		asr.l	#2,d4
(1) 1028/FFFFFFFFFFFF1B98 : D880                		add.l	d0,d4
(1) 1029/FFFFFFFFFFFF1B9A : E79C                		rol.l	#3,d4
(1) 1030/FFFFFFFFFFFF1B9C : D880                		add.l	d0,d4
(1) 1031/FFFFFFFFFFFF1B9E : 3004                		move.w	d4,d0
(1) 1032/FFFFFFFFFFFF1BA0 : 4844                		swap	d4
(1) 1033/FFFFFFFFFFFF1BA2 : D044                		add.w	d4,d0
(1) 1034/FFFFFFFFFFFF1BA4 : 3800                		move.w	d0,d4
(1) 1035/FFFFFFFFFFFF1BA6 : E0BC                		ror.l	d0,d4
(1) 1036/FFFFFFFFFFFF1BA8 : 4844                		swap	d4
(1) 1037/FFFFFFFFFFFF1BAA : 4E75                		rts
(1) 1038/FFFFFFFFFFFF1BAC :                     
(1) 1039/FFFFFFFFFFFF1BAC :                     ; --------------------------------------------------------
(1) 1040/FFFFFFFFFFFF1BAC :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/FFFFFFFFFFFF1BAC :                     ;
(1) 1042/FFFFFFFFFFFF1BAC :                     ; Pick a random number using a maximum value,
(1) 1043/FFFFFFFFFFFF1BAC :                     ; uses System_Random
(1) 1044/FFFFFFFFFFFF1BAC :                     ;
(1) 1045/FFFFFFFFFFFF1BAC :                     ; Input:
(1) 1046/FFFFFFFFFFFF1BAC :                     ; d0.l | Maximum number to use + 1
(1) 1047/FFFFFFFFFFFF1BAC :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/FFFFFFFFFFFF1BAC :                     ;
(1) 1049/FFFFFFFFFFFF1BAC :                     ; Returns:
(1) 1050/FFFFFFFFFFFF1BAC :                     ; d0.w | Output value
(1) 1051/FFFFFFFFFFFF1BAC :                     ; --------------------------------------------------------
(1) 1052/FFFFFFFFFFFF1BAC :                     
(1) 1053/FFFFFFFFFFFF1BAC :                     System_DiceRoll_Seed:
(1) 1054/FFFFFFFFFFFF1BAC : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/FFFFFFFFFFFF1BB0 : 2A00                		move.l	d0,d5
(1) 1056/FFFFFFFFFFFF1BB2 : 2801                		move.l	d1,d4
(1) 1057/FFFFFFFFFFFF1BB4 : 61B2                		bsr	System_Random_Seed
(1) 1058/FFFFFFFFFFFF1BB6 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/FFFFFFFFFFFF1BBC : C0C5                		mulu.w	d5,d0
(1) 1060/FFFFFFFFFFFF1BBE : 4840                		swap	d0
(1) 1061/FFFFFFFFFFFF1BC0 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/FFFFFFFFFFFF1BC6 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/FFFFFFFFFFFF1BCA : 4E75                		rts
(1) 1064/FFFFFFFFFFFF1BCC :                     
(1) 1065/FFFFFFFFFFFF1BCC :                     System_DiceRoll:
(1) 1066/FFFFFFFFFFFF1BCC : 2F04                		move.l	d4,-(sp)
(1) 1067/FFFFFFFFFFFF1BCE : 2800                		move.l	d0,d4
(1) 1068/FFFFFFFFFFFF1BD0 : 61A0                		bsr	System_Random
(1) 1069/FFFFFFFFFFFF1BD2 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/FFFFFFFFFFFF1BD8 : C0C4                		mulu.w	d4,d0
(1) 1071/FFFFFFFFFFFF1BDA : 4840                		swap	d0
(1) 1072/FFFFFFFFFFFF1BDC : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/FFFFFFFFFFFF1BE2 : 281F                		move.l	(sp)+,d4
(1) 1074/FFFFFFFFFFFF1BE4 : 4E75                		rts
(1) 1075/FFFFFFFFFFFF1BE6 :                     
(1) 1076/FFFFFFFFFFFF1BE6 :                     ; --------------------------------------------------------
(1) 1077/FFFFFFFFFFFF1BE6 :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/FFFFFFFFFFFF1BE6 :                     ;
(1) 1079/FFFFFFFFFFFF1BE6 :                     ; Get Sine or Cosine value
(1) 1080/FFFFFFFFFFFF1BE6 :                     ;
(1) 1081/FFFFFFFFFFFF1BE6 :                     ; Input:
(1) 1082/FFFFFFFFFFFF1BE6 :                     ; d0.w | Tan value: 0-511
(1) 1083/FFFFFFFFFFFF1BE6 :                     ;
(1) 1084/FFFFFFFFFFFF1BE6 :                     ; Returns:
(1) 1085/FFFFFFFFFFFF1BE6 :                     ; d1.w | Result
(1) 1086/FFFFFFFFFFFF1BE6 :                     ; --------------------------------------------------------
(1) 1087/FFFFFFFFFFFF1BE6 :                     
(1) 1088/FFFFFFFFFFFF1BE6 :                     System_SineWave_Cos:
(1) 1089/FFFFFFFFFFFF1BE6 : 2F07                		move.l	d7,-(sp)
(1) 1090/FFFFFFFFFFFF1BE8 : 3E00                		move.w	d0,d7
(1) 1091/FFFFFFFFFFFF1BEA : 0647 0080           		addi.w  #$80,d7
(1) 1092/FFFFFFFFFFFF1BEE : 6004                		bra	sys_SineWave
(1) 1093/FFFFFFFFFFFF1BF0 :                     System_SineWave:
(1) 1094/FFFFFFFFFFFF1BF0 : 2F07                		move.l	d7,-(sp)
(1) 1095/FFFFFFFFFFFF1BF2 : 3E00                		move.w	d0,d7
(1) 1096/FFFFFFFFFFFF1BF4 :                     sys_SineWave:
(1) 1097/FFFFFFFFFFFF1BF4 : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/FFFFFFFFFFFF1BF8 : 3207                		move.w	d7,d1
(1) 1099/FFFFFFFFFFFF1BFA : 0807 0007           		btst	#7,d7
(1) 1100/FFFFFFFFFFFF1BFE : 6702                		beq.s	.loc_7EFA
(1) 1101/FFFFFFFFFFFF1C00 : 4641                		not.w	d1
(1) 1102/FFFFFFFFFFFF1C02 :                     .loc_7EFA:
(1) 1103/FFFFFFFFFFFF1C02 : 0241 007F           		andi.w  #$7F,d1
(1) 1104/FFFFFFFFFFFF1C06 : D241                		add.w	d1,d1
(1) 1105/FFFFFFFFFFFF1C08 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/FFFFFFFFFFFF1C0C : 0807 0008           		btst    #8,d7
(1) 1107/FFFFFFFFFFFF1C10 : 6702                		beq.s   .loc_7F0C
(1) 1108/FFFFFFFFFFFF1C12 : 4441                		neg.w   d1
(1) 1109/FFFFFFFFFFFF1C14 :                     .loc_7F0C:
(1) 1110/FFFFFFFFFFFF1C14 : 48C1                		ext.l	d1
(1) 1111/FFFFFFFFFFFF1C16 : 2E1F                		move.l (sp)+,d7
(1) 1112/FFFFFFFFFFFF1C18 : 4E75                		rts
(1) 1113/FFFFFFFFFFFF1C1A :                     
(1) 1114/FFFFFFFFFFFF1C1A :                     .sine_data:
(1) 1115/FFFFFFFFFFFF1C1A :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/FFFFFFFFFFFF1D1A :                     		align 2
(1) 1117/FFFFFFFFFFFF1D1C :                     
(1) 1118/FFFFFFFFFFFF1D1C :                     ; --------------------------------------------------------
(1) 1119/FFFFFFFFFFFF1D1C :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/FFFFFFFFFFFF1D1C :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/FFFFFFFFFFFF1D1C :                     ;
(1) 1122/FFFFFFFFFFFF1D1C :                     ; Increment/Decrement BCD value
(1) 1123/FFFFFFFFFFFF1D1C :                     ; for Scores, Lives, and such.
(1) 1124/FFFFFFFFFFFF1D1C :                     ;
(1) 1125/FFFFFFFFFFFF1D1C :                     ; Input:
(1) 1126/FFFFFFFFFFFF1D1C :                     ; d0.? | BCD value input
(1) 1127/FFFFFFFFFFFF1D1C :                     ; d1.l | Increment/Decrement by
(1) 1128/FFFFFFFFFFFF1D1C :                     ;
(1) 1129/FFFFFFFFFFFF1D1C :                     ; Returns:
(1) 1130/FFFFFFFFFFFF1D1C :                     ; d0.? | BCD value output
(1) 1131/FFFFFFFFFFFF1D1C :                     ; --------------------------------------------------------
(1) 1132/FFFFFFFFFFFF1D1C :                     
(1) 1133/FFFFFFFFFFFF1D1C :                     ; TODO: An overflow check
(1) 1134/FFFFFFFFFFFF1D1C :                     
(1) 1135/FFFFFFFFFFFF1D1C :                     System_BCD_SubB:
(1) 1136/FFFFFFFFFFFF1D1C : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/FFFFFFFFFFFF1D22 : 6006                		bra.s	System_BCD_SubL
(1) 1138/FFFFFFFFFFFF1D24 :                     System_BCD_SubW:
(1) 1139/FFFFFFFFFFFF1D24 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/FFFFFFFFFFFF1D2A :                     ; 		bra.s	System_BCD_SubL
(1) 1141/FFFFFFFFFFFF1D2A :                     System_BCD_SubL:
(1) 1142/FFFFFFFFFFFF1D2A : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/FFFFFFFFFFFF1D2E : 613C                		bsr	sysBCD_SpOut
(1) 1144/FFFFFFFFFFFF1D30 : 023C 0000           		and	#0,ccr
(1) 1145/FFFFFFFFFFFF1D34 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/FFFFFFFFFFFF1D36 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/FFFFFFFFFFFF1D38 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/FFFFFFFFFFFF1D3A : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/FFFFFFFFFFFF1D3C : 2016                		move.l	(a6),d0
(1) 1150/FFFFFFFFFFFF1D3E : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/FFFFFFFFFFFF1D42 : 4E75                		rts
(1) 1152/FFFFFFFFFFFF1D44 :                     System_BCD_AddB:
(1) 1153/FFFFFFFFFFFF1D44 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/FFFFFFFFFFFF1D4A : 6006                		bra.s	System_BCD_AddL
(1) 1155/FFFFFFFFFFFF1D4C :                     System_BCD_AddW:
(1) 1156/FFFFFFFFFFFF1D4C : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/FFFFFFFFFFFF1D52 :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/FFFFFFFFFFFF1D52 :                     System_BCD_AddL:
(1) 1159/FFFFFFFFFFFF1D52 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/FFFFFFFFFFFF1D56 : 6114                		bsr	sysBCD_SpOut
(1) 1161/FFFFFFFFFFFF1D58 : 023C 0000           		and	#0,ccr
(1) 1162/FFFFFFFFFFFF1D5C : CD0D                		abcd	-(a5),-(a6)
(1) 1163/FFFFFFFFFFFF1D5E : CD0D                		abcd	-(a5),-(a6)
(1) 1164/FFFFFFFFFFFF1D60 : CD0D                		abcd	-(a5),-(a6)
(1) 1165/FFFFFFFFFFFF1D62 : CD0D                		abcd	-(a5),-(a6)
(1) 1166/FFFFFFFFFFFF1D64 : 2016                		move.l	(a6),d0
(1) 1167/FFFFFFFFFFFF1D66 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/FFFFFFFFFFFF1D6A : 4E75                		rts
(1) 1169/FFFFFFFFFFFF1D6C :                     sysBCD_SpOut:
(1) 1170/FFFFFFFFFFFF1D6C : 598F                		subq.l	#4,sp
(1) 1171/FFFFFFFFFFFF1D6E : 2C4F                		move.l	sp,a6
(1) 1172/FFFFFFFFFFFF1D70 : 598F                		subq.l	#4,sp
(1) 1173/FFFFFFFFFFFF1D72 : 2A4F                		move.l	sp,a5
(1) 1174/FFFFFFFFFFFF1D74 : 2C80                		move.l	d0,(a6)
(1) 1175/FFFFFFFFFFFF1D76 : 2A81                		move.l	d1,(a5)
(1) 1176/FFFFFFFFFFFF1D78 : DCFC 0004           		adda	#4,a6
(1) 1177/FFFFFFFFFFFF1D7C : DAFC 0004           		adda	#4,a5
(1) 1178/FFFFFFFFFFFF1D80 : 508F                		addq.l	#8,sp
(1) 1179/FFFFFFFFFFFF1D82 : 4E75                		rts
(1) 1180/FFFFFFFFFFFF1D84 :                     
(1) 1181/FFFFFFFFFFFF1D84 :                     ; --------------------------------------------------------
(1) 1182/FFFFFFFFFFFF1D84 :                     ; System_SetIntJumps
(1) 1183/FFFFFFFFFFFF1D84 :                     ;
(1) 1184/FFFFFFFFFFFF1D84 :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/FFFFFFFFFFFF1D84 :                     ; generated by VDP
(1) 1186/FFFFFFFFFFFF1D84 :                     ;
(1) 1187/FFFFFFFFFFFF1D84 :                     ; Input:
(1) 1188/FFFFFFFFFFFF1D84 :                     ; d0.l | New VBlank location
(1) 1189/FFFFFFFFFFFF1D84 :                     ; d1.l | New HBlank location
(1) 1190/FFFFFFFFFFFF1D84 :                     ; d2.l | New External location
(1) 1191/FFFFFFFFFFFF1D84 :                     ;
(1) 1192/FFFFFFFFFFFF1D84 :                     ; Notes:
(1) 1193/FFFFFFFFFFFF1D84 :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/FFFFFFFFFFFF1D84 :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/FFFFFFFFFFFF1D84 :                     ; --------------------------------------------------------
(1) 1196/FFFFFFFFFFFF1D84 :                     
(1) 1197/FFFFFFFFFFFF1D84 :                     System_SetIntJumps:
(1) 1198/FFFFFFFFFFFF1D84 : 4A80                		tst.l	d0
(1) 1199/FFFFFFFFFFFF1D86 : 6704                		beq.s	.no_vint
(1) 1201/FFFFFFFFFFFF1D88 : 21C0 FD08           		move.l	d0,($FFFFFD06+2).w
(1) 1205/FFFFFFFFFFFF1D8C :                     .no_vint:
(1) 1206/FFFFFFFFFFFF1D8C : 4A81                		tst.l	d1
(1) 1207/FFFFFFFFFFFF1D8E : 6704                		beq.s	.no_hint
(1) 1209/FFFFFFFFFFFF1D90 : 21C1 FD0E           		move.l	d1,($FFFFFD0C+2).w
(1) 1213/FFFFFFFFFFFF1D94 :                     .no_hint:
(1) 1214/FFFFFFFFFFFF1D94 : 4A82                		tst.l	d2
(1) 1215/FFFFFFFFFFFF1D96 : 6704                		beq.s	.no_exint
(1) 1217/FFFFFFFFFFFF1D98 : 21C2 FD14           		move.l	d2,($FFFFFD12+2).w
(1) 1221/FFFFFFFFFFFF1D9C :                     .no_exint:
(1) 1222/FFFFFFFFFFFF1D9C : 4E75                		rts
(1) 1223/FFFFFFFFFFFF1D9E :                     
(1) 1224/FFFFFFFFFFFF1D9E :                     ; ====================================================================
(1) 1225/FFFFFFFFFFFF1D9E :                     ; ----------------------------------------------------------------
(1) 1226/FFFFFFFFFFFF1D9E :                     ; SEGA CD / CD32X ONLY
(1) 1227/FFFFFFFFFFFF1D9E :                     ; ----------------------------------------------------------------
(1) 1228/FFFFFFFFFFFF1D9E :                     
(1) 1229/FFFFFFFFFFFF1D9E :                     ; --------------------------------------------------------
(1) 1230/FFFFFFFFFFFF1D9E :                     ; System_MdMcd_Interrupt
(1) 1231/FFFFFFFFFFFF1D9E :                     ;
(1) 1232/FFFFFFFFFFFF1D9E :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/FFFFFFFFFFFF1D9E :                     ; VBlank.
(1) 1234/FFFFFFFFFFFF1D9E :                     ; --------------------------------------------------------
(1) 1235/FFFFFFFFFFFF1D9E :                     
(1) 1236/FFFFFFFFFFFF1D9E :                     System_MdMcd_Interrupt:
(1) 1237/FFFFFFFFFFFF1D9E : 2F07                		move.l	d7,-(sp)
(1) 1238/FFFFFFFFFFFF1DA0 :                     ; .wait_first:
(1) 1239/FFFFFFFFFFFF1DA0 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/FFFFFFFFFFFF1DA0 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/FFFFFFFFFFFF1DA0 :                     ; 		andi.w	#$C0,d7
(1) 1242/FFFFFFFFFFFF1DA0 :                     ; 		cmpi.w	#$C0,d7
(1) 1243/FFFFFFFFFFFF1DA0 :                     ; 		beq.s	.wait_first
(1) 1244/FFFFFFFFFFFF1DA0 :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/FFFFFFFFFFFF1DA0 : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
         FFFFFFFFFFFF1DA6 : 2000             
(1) 1246/FFFFFFFFFFFF1DA8 : 2E1F                		move.l	(sp)+,d7
(1) 1247/FFFFFFFFFFFF1DAA : 4E75                		rts
(1) 1248/FFFFFFFFFFFF1DAC :                     
(1) 1249/FFFFFFFFFFFF1DAC :                     ; --------------------------------------------------------
(1) 1250/FFFFFFFFFFFF1DAC :                     ; System_MdMcd_SubWait
(1) 1251/FFFFFFFFFFFF1DAC :                     ;
(1) 1252/FFFFFFFFFFFF1DAC :                     ; Waits until Sub-CPU finishes.
(1) 1253/FFFFFFFFFFFF1DAC :                     ;
(1) 1254/FFFFFFFFFFFF1DAC :                     ; Uses:
(1) 1255/FFFFFFFFFFFF1DAC :                     ; d7
(1) 1256/FFFFFFFFFFFF1DAC :                     ; --------------------------------------------------------
(1) 1257/FFFFFFFFFFFF1DAC :                     
(1) 1258/FFFFFFFFFFFF1DAC :                     System_MdMcd_SubWait:
(1) 1260/FFFFFFFFFFFF1DAC : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1261/FFFFFFFFFFFF1DB2 : 6BF8                		bmi.s	.wait_sub_o
(1) 1263/FFFFFFFFFFFF1DB4 : 4E75                		rts
(1) 1264/FFFFFFFFFFFF1DB6 :                     
(1) 1265/FFFFFFFFFFFF1DB6 :                     ; --------------------------------------------------------
(1) 1266/FFFFFFFFFFFF1DB6 :                     ; System_MdMcd_SubEnter
(1) 1267/FFFFFFFFFFFF1DB6 :                     ;
(1) 1268/FFFFFFFFFFFF1DB6 :                     ; Waits until Sub-CPU starts.
(1) 1269/FFFFFFFFFFFF1DB6 :                     ;
(1) 1270/FFFFFFFFFFFF1DB6 :                     ; Uses:
(1) 1271/FFFFFFFFFFFF1DB6 :                     ; d7
(1) 1272/FFFFFFFFFFFF1DB6 :                     ; --------------------------------------------------------
(1) 1273/FFFFFFFFFFFF1DB6 :                     
(1) 1274/FFFFFFFFFFFF1DB6 :                     System_MdMcd_SubEnter:
(1) 1276/FFFFFFFFFFFF1DB6 : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1277/FFFFFFFFFFFF1DBC : 6AF8                		bpl.s	.wait_sub_o
(1) 1279/FFFFFFFFFFFF1DBE : 4E75                		rts
(1) 1280/FFFFFFFFFFFF1DC0 :                     
(1) 1281/FFFFFFFFFFFF1DC0 :                     ; --------------------------------------------------------
(1) 1282/FFFFFFFFFFFF1DC0 :                     ; System_MdMcd_SubTask
(1) 1283/FFFFFFFFFFFF1DC0 :                     ;
(1) 1284/FFFFFFFFFFFF1DC0 :                     ; Request task to Sub-CPU
(1) 1285/FFFFFFFFFFFF1DC0 :                     ;
(1) 1286/FFFFFFFFFFFF1DC0 :                     ; Input:
(1) 1287/FFFFFFFFFFFF1DC0 :                     ; d0.b | Task number
(1) 1288/FFFFFFFFFFFF1DC0 :                     ;
(1) 1289/FFFFFFFFFFFF1DC0 :                     ; Uses:
(1) 1290/FFFFFFFFFFFF1DC0 :                     ; d7/a6
(1) 1291/FFFFFFFFFFFF1DC0 :                     ;
(1) 1292/FFFFFFFFFFFF1DC0 :                     ; Notes:
(1) 1293/FFFFFFFFFFFF1DC0 :                     ; This exits without waiting SUB to finish,
(1) 1294/FFFFFFFFFFFF1DC0 :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/FFFFFFFFFFFF1DC0 :                     ; --------------------------------------------------------
(1) 1296/FFFFFFFFFFFF1DC0 :                     
(1) 1297/FFFFFFFFFFFF1DC0 :                     System_MdMcd_SubTask:
(1) 1299/FFFFFFFFFFFF1DC0 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1300/FFFFFFFFFFFF1DC4 : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m).l,a6
(1) 1301/FFFFFFFFFFFF1DCA :                     .wait_first:
(1) 1302/FFFFFFFFFFFF1DCA : 61E0                		bsr	System_MdMcd_SubWait
(1) 1303/FFFFFFFFFFFF1DCC : 1E16                		move.b	(a6),d7
(1) 1304/FFFFFFFFFFFF1DCE : 0247 00C0           		andi.w	#$C0,d7
(1) 1305/FFFFFFFFFFFF1DD2 : 0C47 00C0           		cmpi.w	#$C0,d7
(1) 1306/FFFFFFFFFFFF1DD6 : 67F2                		beq.s	.wait_first
(1) 1307/FFFFFFFFFFFF1DD8 : 7C08                		moveq	#9-1,d6
(1) 1308/FFFFFFFFFFFF1DDA : 1C80                		move.b	d0,(a6)		; Set this command
(1) 1309/FFFFFFFFFFFF1DDC :                     .make_sure:
(1) 1310/FFFFFFFFFFFF1DDC : 1E16                		move.b	(a6),d7
(1) 1311/FFFFFFFFFFFF1DDE : BE00                		cmp.b	d0,d7
(1) 1312/FFFFFFFFFFFF1DE0 : 66E8                		bne.s	.wait_first
(1) 1313/FFFFFFFFFFFF1DE2 : 51CE FFF8           		dbf	d6,.make_sure
(1) 1314/FFFFFFFFFFFF1DE6 : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7	; Wait until SUB gets busy
(1) 1315/FFFFFFFFFFFF1DEA : 6AFA                		bpl.s	.wait_sub_i
(1) 1316/FFFFFFFFFFFF1DEC : 0247 00C0           		andi.w	#$C0,d7
(1) 1317/FFFFFFFFFFFF1DF0 : BE7C 00C0           		cmp.w	#$C0,d7
(1) 1318/FFFFFFFFFFFF1DF4 : 67D4                		beq.s	.wait_first
(1) 1319/FFFFFFFFFFFF1DF6 : 1CBC 0000           		move.b	#$00,(a6)
(1) 1320/FFFFFFFFFFFF1DFA : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1322/FFFFFFFFFFFF1DFE : 4E75                		rts
(1) 1323/FFFFFFFFFFFF1E00 :                     
(1) 1324/FFFFFFFFFFFF1E00 :                     ; --------------------------------------------------------
(1) 1325/FFFFFFFFFFFF1E00 :                     ; System_MdMcd_WaitWRAM
(1) 1326/FFFFFFFFFFFF1E00 :                     ;
(1) 1327/FFFFFFFFFFFF1E00 :                     ; Wait for Word-RAM permission.
(1) 1328/FFFFFFFFFFFF1E00 :                     ; --------------------------------------------------------
(1) 1329/FFFFFFFFFFFF1E00 :                     
(1) 1330/FFFFFFFFFFFF1E00 :                     System_MdMcd_WaitWRAM:
(1) 1331/FFFFFFFFFFFF1E00 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1E06 : 2003             
(1) 1332/FFFFFFFFFFFF1E08 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/FFFFFFFFFFFF1E0A : 4E75                		rts
(1) 1334/FFFFFFFFFFFF1E0C :                     
(1) 1335/FFFFFFFFFFFF1E0C :                     ; --------------------------------------------------------
(1) 1336/FFFFFFFFFFFF1E0C :                     ; System_MdMcd_CheckWRAM
(1) 1337/FFFFFFFFFFFF1E0C :                     ;
(1) 1338/FFFFFFFFFFFF1E0C :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/FFFFFFFFFFFF1E0C :                     ;
(1) 1340/FFFFFFFFFFFF1E0C :                     ; Returns:
(1) 1341/FFFFFFFFFFFF1E0C :                     ; beq | Word-RAM is available
(1) 1342/FFFFFFFFFFFF1E0C :                     ; bne | Word-RAM is locked
(1) 1343/FFFFFFFFFFFF1E0C :                     ; --------------------------------------------------------
(1) 1344/FFFFFFFFFFFF1E0C :                     
(1) 1345/FFFFFFFFFFFF1E0C :                     System_MdMcd_CheckWRAM:
(1) 1346/FFFFFFFFFFFF1E0C : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1E12 : 2003             
(1) 1347/FFFFFFFFFFFF1E14 : 6706                		beq.s	.no_ret
(1) 1348/FFFFFFFFFFFF1E16 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/FFFFFFFFFFFF1E1A : 4E75                		rts
(1) 1350/FFFFFFFFFFFF1E1C :                     .no_ret:
(1) 1351/FFFFFFFFFFFF1E1C : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/FFFFFFFFFFFF1E20 : 4E75                		rts
(1) 1353/FFFFFFFFFFFF1E22 :                     
(1) 1354/FFFFFFFFFFFF1E22 :                     ; --------------------------------------------------------
(1) 1355/FFFFFFFFFFFF1E22 :                     ; System_MdMcd_GiveWRAM
(1) 1356/FFFFFFFFFFFF1E22 :                     ;
(1) 1357/FFFFFFFFFFFF1E22 :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/FFFFFFFFFFFF1E22 :                     ; --------------------------------------------------------
(1) 1359/FFFFFFFFFFFF1E22 :                     
(1) 1360/FFFFFFFFFFFF1E22 :                     System_MdMcd_GiveWRAM:
(1) 1361/FFFFFFFFFFFF1E22 : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF1E28 : 2003             
(1) 1362/FFFFFFFFFFFF1E2A : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/FFFFFFFFFFFF1E2C : 4E75                		rts
(1) 1364/FFFFFFFFFFFF1E2E :                     
(1) 1365/FFFFFFFFFFFF1E2E :                     ; --------------------------------------------------------
(1) 1366/FFFFFFFFFFFF1E2E :                     ; System_MdMcd_ReadFileRAM
(1) 1367/FFFFFFFFFFFF1E2E :                     ;
(1) 1368/FFFFFFFFFFFF1E2E :                     ; Read file from disc and transfer output the
(1) 1369/FFFFFFFFFFFF1E2E :                     ; data to a1, uses communication ports.
(1) 1370/FFFFFFFFFFFF1E2E :                     ;
(1) 1371/FFFFFFFFFFFF1E2E :                     ; Input:
(1) 1372/FFFFFFFFFFFF1E2E :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/FFFFFFFFFFFF1E2E :                     ; a1   | Output location in RAM
(1) 1374/FFFFFFFFFFFF1E2E :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/FFFFFFFFFFFF1E2E :                     ;
(1) 1376/FFFFFFFFFFFF1E2E :                     ; Uses:
(1) 1377/FFFFFFFFFFFF1E2E :                     ; d7,a0-a1,a5-a6
(1) 1378/FFFFFFFFFFFF1E2E :                     ;
(1) 1379/FFFFFFFFFFFF1E2E :                     ; Notes:
(1) 1380/FFFFFFFFFFFF1E2E :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/FFFFFFFFFFFF1E2E :                     ; --------------------------------------------------------
(1) 1382/FFFFFFFFFFFF1E2E :                     
(1) 1383/FFFFFFFFFFFF1E2E :                     System_MdMcd_RdFile_RAM:
(1) 1385/FFFFFFFFFFFF1E2E : 48E7 C1C6           		movem.l	d0-d1/d7/a0-a1/a5-a6,-(sp)
(1) 1386/FFFFFFFFFFFF1E32 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1) 1387/FFFFFFFFFFFF1E38 : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1) 1388/FFFFFFFFFFFF1E3A : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1) 1389/FFFFFFFFFFFF1E3C : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1) 1390/FFFFFFFFFFFF1E3E : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1) 1391/FFFFFFFFFFFF1E40 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1392/FFFFFFFFFFFF1E42 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1393/FFFFFFFFFFFF1E44 : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1) 1394/FFFFFFFFFFFF1E48 : 3200                		move.w	d0,d1
(1) 1395/FFFFFFFFFFFF1E4A : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1) 1396/FFFFFFFFFFFF1E4C : 6100 FF72           		bsr	System_MdMcd_SubTask
(1) 1397/FFFFFFFFFFFF1E50 : 3001                		move.w	d1,d0
(1) 1398/FFFFFFFFFFFF1E52 :                     	; a0 - Output location
(1) 1399/FFFFFFFFFFFF1E52 :                     	; d0 - Number of $10-byte packets
(1) 1400/FFFFFFFFFFFF1E52 : E848                		lsr.w	#4,d0				; size >> 4
(1) 1401/FFFFFFFFFFFF1E54 : 5340                		subq.w	#1,d0				; -1
(1) 1402/FFFFFFFFFFFF1E56 : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1) 1403/FFFFFFFFFFFF1E5C : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1) 1404/FFFFFFFFFFFF1E62 : 08C7 0007           		bset	#7,d7
(1) 1405/FFFFFFFFFFFF1E66 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1406/FFFFFFFFFFFF1E6C : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1) 1407/FFFFFFFFFFFF1E72 : 0807 0004           		btst	#4,d7
(1) 1408/FFFFFFFFFFFF1E76 : 67F4                		beq.s	.copy_ram
(1) 1409/FFFFFFFFFFFF1E78 : 2A4E                		move.l	a6,a5
(1) 1410/FFFFFFFFFFFF1E7A : 32DD                		move.w	(a5)+,(a1)+
(1) 1411/FFFFFFFFFFFF1E7C : 32DD                		move.w	(a5)+,(a1)+
(1) 1412/FFFFFFFFFFFF1E7E : 32DD                		move.w	(a5)+,(a1)+
(1) 1413/FFFFFFFFFFFF1E80 : 32DD                		move.w	(a5)+,(a1)+
(1) 1414/FFFFFFFFFFFF1E82 : 32DD                		move.w	(a5)+,(a1)+
(1) 1415/FFFFFFFFFFFF1E84 : 32DD                		move.w	(a5)+,(a1)+
(1) 1416/FFFFFFFFFFFF1E86 : 32DD                		move.w	(a5)+,(a1)+
(1) 1417/FFFFFFFFFFFF1E88 : 32DD                		move.w	(a5)+,(a1)+
(1) 1418/FFFFFFFFFFFF1E8A : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1) 1419/FFFFFFFFFFFF1E90 : 08C7 0006           		bset	#6,d7
(1) 1420/FFFFFFFFFFFF1E94 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1421/FFFFFFFFFFFF1E9A : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1) 1422/FFFFFFFFFFFF1EA0 : 0807 0004           		btst	#4,d7
(1) 1423/FFFFFFFFFFFF1EA4 : 66F4                		bne.s	.wait_sub
(1) 1424/FFFFFFFFFFFF1EA6 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1) 1425/FFFFFFFFFFFF1EAC : 0887 0006           		bclr	#6,d7
(1) 1426/FFFFFFFFFFFF1EB0 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1427/FFFFFFFFFFFF1EB6 : 51C8 FFB4           		dbf	d0,.copy_ram
(1) 1428/FFFFFFFFFFFF1EBA : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1) 1429/FFFFFFFFFFFF1EC0 : 0887 0007           		bclr	#7,d7
(1) 1430/FFFFFFFFFFFF1EC4 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1431/FFFFFFFFFFFF1ECA : 4CDF 6383           		movem.l	(sp)+,d0-d1/d7/a0-a1/a5-a6
(1) 1433/FFFFFFFFFFFF1ECE : 4E75                		rts
(1) 1434/FFFFFFFFFFFF1ED0 :                     
(1) 1435/FFFFFFFFFFFF1ED0 :                     ; --------------------------------------------------------
(1) 1436/FFFFFFFFFFFF1ED0 :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/FFFFFFFFFFFF1ED0 :                     ;
(1) 1438/FFFFFFFFFFFF1ED0 :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/FFFFFFFFFFFF1ED0 :                     ; waits on finish.
(1) 1440/FFFFFFFFFFFF1ED0 :                     ;
(1) 1441/FFFFFFFFFFFF1ED0 :                     ; Input:
(1) 1442/FFFFFFFFFFFF1ED0 :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/FFFFFFFFFFFF1ED0 :                     ; a1   | Output location
(1) 1444/FFFFFFFFFFFF1ED0 :                     ;
(1) 1445/FFFFFFFFFFFF1ED0 :                     ; Notes:
(1) 1446/FFFFFFFFFFFF1ED0 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/FFFFFFFFFFFF1ED0 :                     ; --------------------------------------------------------
(1) 1448/FFFFFFFFFFFF1ED0 :                     
(1) 1449/FFFFFFFFFFFF1ED0 :                     System_MdMcd_RdFile_WRAM:
(1) 1451/FFFFFFFFFFFF1ED0 : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1452/FFFFFFFFFFFF1ED4 : 6100 FED6           		bsr	System_MdMcd_SubWait
(1) 1453/FFFFFFFFFFFF1ED8 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1) 1454/FFFFFFFFFFFF1EDE : 3AD8                		move.w	(a0)+,(a5)+				; $00 copy filename
(1) 1455/FFFFFFFFFFFF1EE0 : 3AD8                		move.w	(a0)+,(a5)+				; $02
(1) 1456/FFFFFFFFFFFF1EE2 : 3AD8                		move.w	(a0)+,(a5)+				; $04
(1) 1457/FFFFFFFFFFFF1EE4 : 3AD8                		move.w	(a0)+,(a5)+				; $06
(1) 1458/FFFFFFFFFFFF1EE6 : 3AD8                		move.w	(a0)+,(a5)+				; $08
(1) 1459/FFFFFFFFFFFF1EE8 : 3AD8                		move.w	(a0)+,(a5)+				; $0A
(1) 1460/FFFFFFFFFFFF1EEA : 1AFC 0000           		move.b	#0,(a5)+				; $0C: always 0
(1) 1461/FFFFFFFFFFFF1EEE : 1AFC 0000           		move.b	#0,(a5)+				; $0D
(1) 1462/FFFFFFFFFFFF1EF2 : 1AFC 0000           		move.b	#0,(a5)+				; $0E
(1) 1463/FFFFFFFFFFFF1EF6 : 1AFC 0000           		move.b	#0,(a5)+				; $0F
(1) 1464/FFFFFFFFFFFF1EFA : 6100 FF26           		bsr	System_MdMcd_GiveWRAM
(1) 1465/FFFFFFFFFFFF1EFE : 3F00                		move.w	d0,-(sp)
(1) 1466/FFFFFFFFFFFF1F00 : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1) 1467/FFFFFFFFFFFF1F04 : 6100 FEBA           		bsr	System_MdMcd_SubTask
(1) 1468/FFFFFFFFFFFF1F08 : 301F                		move.w	(sp)+,d0
(1) 1469/FFFFFFFFFFFF1F0A : 6100 FEA0           		bsr	System_MdMcd_SubWait
(1) 1470/FFFFFFFFFFFF1F0E : 6100 FEF0           		bsr	System_MdMcd_WaitWRAM
(1) 1471/FFFFFFFFFFFF1F12 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1473/FFFFFFFFFFFF1F16 : 4E75                		rts
(1) 1474/FFFFFFFFFFFF1F18 :                     
(1) 1475/FFFFFFFFFFFF1F18 :                     ; --------------------------------------------------------
(1) 1476/FFFFFFFFFFFF1F18 :                     ; System_MdMcd_CheckHome
(1) 1477/FFFFFFFFFFFF1F18 :                     ;
(1) 1478/FFFFFFFFFFFF1F18 :                     ; Checks if the player is holding A, B, C and
(1) 1479/FFFFFFFFFFFF1F18 :                     ; then presses the START button.
(1) 1480/FFFFFFFFFFFF1F18 :                     ;
(1) 1481/FFFFFFFFFFFF1F18 :                     ; Returns:
(1) 1482/FFFFFFFFFFFF1F18 :                     ; bcc | Combo input not pressed
(1) 1483/FFFFFFFFFFFF1F18 :                     ; bcs | User did the combo presses
(1) 1484/FFFFFFFFFFFF1F18 :                     ;
(1) 1485/FFFFFFFFFFFF1F18 :                     ; Notes:
(1) 1486/FFFFFFFFFFFF1F18 :                     ; If you call this from your Title Screen, carry
(1) 1487/FFFFFFFFFFFF1F18 :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/FFFFFFFFFFFF1F18 :                     ; for other modes change your Screen number to the
(1) 1489/FFFFFFFFFFFF1F18 :                     ; Title Screen and return.
(1) 1490/FFFFFFFFFFFF1F18 :                     ; --------------------------------------------------------
(1) 1491/FFFFFFFFFFFF1F18 :                     
(1) 1492/FFFFFFFFFFFF1F18 :                     System_MdMcd_CheckHome:
(1) 1493/FFFFFFFFFFFF1F18 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/FFFFFFFFFFFF1F1C : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(1) 1495/FFFFFFFFFFFF1F20 : 3C38 DD1A           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/FFFFFFFFFFFF1F24 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/FFFFFFFFFFFF1F28 : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/FFFFFFFFFFFF1F2C : 6610                		bne.s	.not_press
(1) 1499/FFFFFFFFFFFF1F2E : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/FFFFFFFFFFFF1F32 : 670A                		beq.s	.not_press
(1) 1501/FFFFFFFFFFFF1F34 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/FFFFFFFFFFFF1F38 : 003C 0001           		or	#1,ccr
(1) 1503/FFFFFFFFFFFF1F3C : 4E75                		rts
(1) 1504/FFFFFFFFFFFF1F3E :                     .not_press:
(1) 1505/FFFFFFFFFFFF1F3E : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/FFFFFFFFFFFF1F42 : 023C 001E           		and	#%11110,ccr
(1) 1507/FFFFFFFFFFFF1F46 : 4E75                		rts
(1) 1508/FFFFFFFFFFFF1F48 :                     
(1) 1509/FFFFFFFFFFFF1F48 :                     ; --------------------------------------------------------
(1) 1510/FFFFFFFFFFFF1F48 :                     ; System_MdMcd_ExitShell
(1) 1511/FFFFFFFFFFFF1F48 :                     ;
(1) 1512/FFFFFFFFFFFF1F48 :                     ; Exits the entire program and goes to
(1) 1513/FFFFFFFFFFFF1F48 :                     ; the BIOS/Shell.
(1) 1514/FFFFFFFFFFFF1F48 :                     ;
(1) 1515/FFFFFFFFFFFF1F48 :                     ; *** JUMP ONLY ***
(1) 1516/FFFFFFFFFFFF1F48 :                     ; --------------------------------------------------------
(1) 1517/FFFFFFFFFFFF1F48 :                     
(1) 1518/FFFFFFFFFFFF1F48 :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/FFFFFFFFFFFF1F48 :                     ; jmp $0284: Entry point
(1) 1520/FFFFFFFFFFFF1F48 :                     ; jmp $0288: CD player
(1) 1521/FFFFFFFFFFFF1F48 :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/FFFFFFFFFFFF1F48 :                     
(1) 1523/FFFFFFFFFFFF1F48 :                     System_MdMcd_ExitShell:
(1) 1525/FFFFFFFFFFFF1F48 : 6100 F72C           		bsr	Video_MdMcd_StampDisable
(1) 1526/FFFFFFFFFFFF1F4C : 6134                		bsr	System_MdMcd_CddaStop
(1) 1530/FFFFFFFFFFFF1F4E : 4EF8 028C           		jmp	$028C		; Exit jump
(1) 1534/FFFFFFFFFFFF1F52 :                     
(1) 1535/FFFFFFFFFFFF1F52 :                     ; ------------------------------------------------------------
(1) 1536/FFFFFFFFFFFF1F52 :                     ; CDDA PLAYBACK
(1) 1537/FFFFFFFFFFFF1F52 :                     ; ------------------------------------------------------------
(1) 1538/FFFFFFFFFFFF1F52 :                     
(1) 1539/FFFFFFFFFFFF1F52 :                     ; --------------------------------------------------------
(1) 1540/FFFFFFFFFFFF1F52 :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/FFFFFFFFFFFF1F52 :                     ;
(1) 1542/FFFFFFFFFFFF1F52 :                     ; Play CDDA track, normal or looped.
(1) 1543/FFFFFFFFFFFF1F52 :                     ;
(1) 1544/FFFFFFFFFFFF1F52 :                     ; Input:
(1) 1545/FFFFFFFFFFFF1F52 :                     ; d0.w | CD track number
(1) 1546/FFFFFFFFFFFF1F52 :                     ;
(1) 1547/FFFFFFFFFFFF1F52 :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/FFFFFFFFFFFF1F52 :                     ; and $11 for looped
(1) 1549/FFFFFFFFFFFF1F52 :                     ;
(1) 1550/FFFFFFFFFFFF1F52 :                     ; Uses:
(1) 1551/FFFFFFFFFFFF1F52 :                     ; d4
(1) 1552/FFFFFFFFFFFF1F52 :                     ;
(1) 1553/FFFFFFFFFFFF1F52 :                     ; Notes:
(1) 1554/FFFFFFFFFFFF1F52 :                     ; Tracks $00, $01 and any negative values are
(1) 1555/FFFFFFFFFFFF1F52 :                     ; ignored.
(1) 1556/FFFFFFFFFFFF1F52 :                     ; --------------------------------------------------------
(1) 1557/FFFFFFFFFFFF1F52 :                     
(1) 1558/FFFFFFFFFFFF1F52 :                     System_MdMcd_CddaPlay:
(1) 1559/FFFFFFFFFFFF1F52 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/FFFFFFFFFFFF1F56 : 383C 0010           		move.w	#$0010,d4
(1) 1561/FFFFFFFFFFFF1F5A : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/FFFFFFFFFFFF1F5C :                     System_MdMcd_CddaPlayL:
(1) 1563/FFFFFFFFFFFF1F5C : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/FFFFFFFFFFFF1F60 : 383C 0011           		move.w	#$0011,d4
(1) 1565/FFFFFFFFFFFF1F64 :                     sysMdMcd_SetCdda:
(1) 1567/FFFFFFFFFFFF1F64 : 4A40                		tst.w	d0
(1) 1568/FFFFFFFFFFFF1F66 : 6714                		beq.s	.fail_safe
(1) 1569/FFFFFFFFFFFF1F68 : 6B12                		bmi.s	.fail_safe
(1) 1570/FFFFFFFFFFFF1F6A : B07C 0001           		cmp.w	#$0001,d0
(1) 1571/FFFFFFFFFFFF1F6E : 670C                		beq.s	.fail_safe
(1) 1572/FFFFFFFFFFFF1F70 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1573/FFFFFFFFFFFF1F76 : 3004                		move.w	d4,d0
(1) 1574/FFFFFFFFFFFF1F78 : 6100 FE46           		bsr	System_MdMcd_SubTask
(1) 1575/FFFFFFFFFFFF1F7C :                     .fail_safe:
(1) 1577/FFFFFFFFFFFF1F7C : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/FFFFFFFFFFFF1F80 : 4E75                		rts
(1) 1579/FFFFFFFFFFFF1F82 :                     
(1) 1580/FFFFFFFFFFFF1F82 :                     ; --------------------------------------------------------
(1) 1581/FFFFFFFFFFFF1F82 :                     ; System_MdMcd_CdStop
(1) 1582/FFFFFFFFFFFF1F82 :                     ;
(1) 1583/FFFFFFFFFFFF1F82 :                     ; Stop CDDA track
(1) 1584/FFFFFFFFFFFF1F82 :                     ; --------------------------------------------------------
(1) 1585/FFFFFFFFFFFF1F82 :                     
(1) 1586/FFFFFFFFFFFF1F82 :                     System_MdMcd_CddaStop:
(1) 1588/FFFFFFFFFFFF1F82 : 2F00                		move.l	d0,-(sp)
(1) 1589/FFFFFFFFFFFF1F84 : 303C 0014           		move.w	#$0014,d0
(1) 1590/FFFFFFFFFFFF1F88 : 6100 FE36           		bsr	System_MdMcd_SubTask
(1) 1591/FFFFFFFFFFFF1F8C : 201F                		move.l	(sp)+,d0
(1) 1593/FFFFFFFFFFFF1F8E : 4E75                		rts
(1) 1594/FFFFFFFFFFFF1F90 :                     
(1) 1595/FFFFFFFFFFFF1F90 :                     ; --------------------------------------------------------
(1) 1596/FFFFFFFFFFFF1F90 :                     ; System_MdMcd_CdFade
(1) 1597/FFFFFFFFFFFF1F90 :                     ;
(1) 1598/FFFFFFFFFFFF1F90 :                     ; Fade the CDDA Volume
(1) 1599/FFFFFFFFFFFF1F90 :                     ;
(1) 1600/FFFFFFFFFFFF1F90 :                     ; Input:
(1) 1601/FFFFFFFFFFFF1F90 :                     ; d0.w | Target volume:
(1) 1602/FFFFFFFFFFFF1F90 :                     ;        $000-$400 - Min to Max
(1) 1603/FFFFFFFFFFFF1F90 :                     ; d1.w | Fading speed:
(1) 1604/FFFFFFFFFFFF1F90 :                     ;        $001-$200 - Slow to Fast
(1) 1605/FFFFFFFFFFFF1F90 :                     ;             $400 - Set quick
(1) 1606/FFFFFFFFFFFF1F90 :                     ;
(1) 1607/FFFFFFFFFFFF1F90 :                     ; This calls Sub-Task $16
(1) 1608/FFFFFFFFFFFF1F90 :                     ; --------------------------------------------------------
(1) 1609/FFFFFFFFFFFF1F90 :                     
(1) 1610/FFFFFFFFFFFF1F90 :                     System_MdMcd_CddaFade:
(1) 1612/FFFFFFFFFFFF1F90 : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1613/FFFFFFFFFFFF1F94 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1614/FFFFFFFFFFFF1F9A : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1615/FFFFFFFFFFFF1FA0 : 303C 0016           		move.w	#$0016,d0
(1) 1616/FFFFFFFFFFFF1FA4 : 6100 FE1A           		bsr	System_MdMcd_SubTask
(1) 1617/FFFFFFFFFFFF1FA8 : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1619/FFFFFFFFFFFF1FAC : 4E75                		rts
(1) 1620/FFFFFFFFFFFF1FAE :                     
(1) 1621/FFFFFFFFFFFF1FAE :                     ; --------------------------------------------------------
(1) 1622/FFFFFFFFFFFF1FAE :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/FFFFFFFFFFFF1FAE :                     ; --------------------------------------------------------
(1) 1624/FFFFFFFFFFFF1FAE :                     
(1) 1625/FFFFFFFFFFFF1FAE :                     def_SaveInfo:
(1) 1629/FFFFFFFFFFFF1FAE : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
         FFFFFFFFFFFF1FB4 : 4344 5F5F 5F00    
(1) 1631/FFFFFFFFFFFF1FBA : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/FFFFFFFFFFFF1FBC : 0000                		dc.w 0
(1) 1633/FFFFFFFFFFFF1FBE :                     		align 2
(1) 1634/FFFFFFFFFFFF1FC0 :                     
(1) 1635/FFFFFFFFFFFF1FC0 :                     ; ====================================================================
(1) 1636/FFFFFFFFFFFF1FC0 :                     ; ----------------------------------------------------------------
(1) 1637/FFFFFFFFFFFF1FC0 :                     ; 32X and CD32X ONLY
(1) 1638/FFFFFFFFFFFF1FC0 :                     ; ----------------------------------------------------------------
(1) 1639/FFFFFFFFFFFF1FC0 :                     
(1) 1640/FFFFFFFFFFFF1FC0 :                     ; --------------------------------------------------------
(1) 1641/FFFFFFFFFFFF1FC0 :                     ; System_MdMars_SendData
(1) 1642/FFFFFFFFFFFF1FC0 :                     ;
(1) 1643/FFFFFFFFFFFF1FC0 :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/FFFFFFFFFFFF1FC0 :                     ; using DREQ
(1) 1645/FFFFFFFFFFFF1FC0 :                     ;
(1) 1646/FFFFFFFFFFFF1FC0 :                     ; Input:
(1) 1647/FFFFFFFFFFFF1FC0 :                     ; a0   | Source data
(1) 1648/FFFFFFFFFFFF1FC0 :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/FFFFFFFFFFFF1FC0 :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/FFFFFFFFFFFF1FC0 :                     ;
(1) 1651/FFFFFFFFFFFF1FC0 :                     ; Returns:
(1) 1652/FFFFFFFFFFFF1FC0 :                     ; a1   | New output SDRAM location
(1) 1653/FFFFFFFFFFFF1FC0 :                     ;
(1) 1654/FFFFFFFFFFFF1FC0 :                     ; Uses:
(1) 1655/FFFFFFFFFFFF1FC0 :                     ; d0/a4-a5,d5-d7
(1) 1656/FFFFFFFFFFFF1FC0 :                     ;
(1) 1657/FFFFFFFFFFFF1FC0 :                     ; Notes:
(1) 1658/FFFFFFFFFFFF1FC0 :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/FFFFFFFFFFFF1FC0 :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/FFFFFFFFFFFF1FC0 :                     ; --------------------------------------------------------
(1) 1661/FFFFFFFFFFFF1FC0 :                     
(1) 1662/FFFFFFFFFFFF1FC0 :                     System_MdMars_SendData:
(1) 1687/FFFFFFFFFFFF1FC0 : 4E75                		rts
(1) 1688/FFFFFFFFFFFF1FC2 :                     
(1) 1689/FFFFFFFFFFFF1FC2 :                     ; ------------------------------------------------------------
(1) 1690/FFFFFFFFFFFF1FC2 :                     ; DREQ Genesis-to-32X code
(1) 1691/FFFFFFFFFFFF1FC2 :                     ; ------------------------------------------------------------
(1) 1692/FFFFFFFFFFFF1FC2 :                     
(1) 1763/FFFFFFFFFFFF1FC2 : 4E75                		rts
(1) 1764/FFFFFFFFFFFF1FC4 :                     
(1) 1765/FFFFFFFFFFFF1FC4 :                     ; ====================================================================
(1) 1766/FFFFFFFFFFFF1FC4 :                     ; ----------------------------------------------------------------
(1) 1767/FFFFFFFFFFFF1FC4 :                     ; SHARED for all
(1) 1768/FFFFFFFFFFFF1FC4 :                     ; ----------------------------------------------------------------
(1) 1769/FFFFFFFFFFFF1FC4 :                     
(1) 1770/FFFFFFFFFFFF1FC4 :                     ; --------------------------------------------------------
(1) 1771/FFFFFFFFFFFF1FC4 :                     ; System_SetDataBank
(1) 1772/FFFFFFFFFFFF1FC4 :                     ;
(1) 1773/FFFFFFFFFFFF1FC4 :                     ; Sets the data bank depending of the system
(1) 1774/FFFFFFFFFFFF1FC4 :                     ;
(1) 1775/FFFFFFFFFFFF1FC4 :                     ; Input:
(1) 1776/FFFFFFFFFFFF1FC4 :                     ; a0   | Pointer and filename:
(1) 1777/FFFFFFFFFFFF1FC4 :                     ;        dc.l bank_pointer
(1) 1778/FFFFFFFFFFFF1FC4 :                     ;        dc.b "FILENAME.BIN"
(1) 1779/FFFFFFFFFFFF1FC4 :                     ;
(1) 1780/FFFFFFFFFFFF1FC4 :                     ; Uses:
(1) 1781/FFFFFFFFFFFF1FC4 :                     ; a4-a5,d5-d7
(1) 1782/FFFFFFFFFFFF1FC4 :                     ;
(1) 1783/FFFFFFFFFFFF1FC4 :                     ; Notes:
(1) 1784/FFFFFFFFFFFF1FC4 :                     ; - ONLY call this if you have the opportunity to
(1) 1785/FFFFFFFFFFFF1FC4 :                     ;   do it.
(1) 1786/FFFFFFFFFFFF1FC4 :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/FFFFFFFFFFFF1FC4 :                     ;   to load from disc
(1) 1788/FFFFFFFFFFFF1FC4 :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/FFFFFFFFFFFF1FC4 :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/FFFFFFFFFFFF1FC4 :                     ; --------------------------------------------------------
(1) 1791/FFFFFFFFFFFF1FC4 :                     
(1) 1792/FFFFFFFFFFFF1FC4 :                     System_SetDataBank:
(1) 1794/FFFFFFFFFFFF1FC4 : D0FC 0004           		adda	#4,a0
(1) 1795/FFFFFFFFFFFF1FC8 : 6100 FF06           		bsr	System_MdMcd_RdFile_WRAM
(1) 1809/FFFFFFFFFFFF1FCC : 4E75                		rts
(1) 1810/FFFFFFFFFFFF1FCE :                     
(1) 1811/FFFFFFFFFFFF1FCE :                     ; ====================================================================
(1) 1812/FFFFFFFFFFFF1FCE :                     ; ----------------------------------------------------------------
(1) 1813/FFFFFFFFFFFF1FCE :                     ; Objects system
(1) 1814/FFFFFFFFFFFF1FCE :                     ; ----------------------------------------------------------------
(1) 1815/FFFFFFFFFFFF1FCE :                     
(1) 1816/FFFFFFFFFFFF1FCE :                     ; --------------------------------------------------------
(1) 1817/FFFFFFFFFFFF1FCE :                     ; Init/Clear Objects system
(1) 1818/FFFFFFFFFFFF1FCE :                     ; --------------------------------------------------------
(1) 1819/FFFFFFFFFFFF1FCE :                     
(1) 1820/FFFFFFFFFFFF1FCE :                     Object_Init:
(1) 1821/FFFFFFFFFFFF1FCE : 4DF8 DD58           		lea	(RAM_Objects).w,a6
(1) 1822/FFFFFFFFFFFF1FD2 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/FFFFFFFFFFFF1FD6 :                     .clr:
(1) 1824/FFFFFFFFFFFF1FD6 : 421E                		clr.b	(a6)+
(1) 1825/FFFFFFFFFFFF1FD8 : 51CF FFFC           		dbf	d7,.clr
(1) 1826/FFFFFFFFFFFF1FDC : 4E75                		rts
(1) 1827/FFFFFFFFFFFF1FDE :                     
(1) 1828/FFFFFFFFFFFF1FDE :                     ; --------------------------------------------------------
(1) 1829/FFFFFFFFFFFF1FDE :                     ; Process objects
(1) 1830/FFFFFFFFFFFF1FDE :                     ;
(1) 1831/FFFFFFFFFFFF1FDE :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/FFFFFFFFFFFF1FDE :                     ; --------------------------------------------------------
(1) 1833/FFFFFFFFFFFF1FDE :                     
(1) 1834/FFFFFFFFFFFF1FDE :                     Object_Run:
(1) 1835/FFFFFFFFFFFF1FDE : 4DF8 DD58           		lea	(RAM_Objects).w,a6
(1) 1836/FFFFFFFFFFFF1FE2 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/FFFFFFFFFFFF1FE6 :                     .next_one:
(1) 1838/FFFFFFFFFFFF1FE6 : 2C16                		move.l	obj_code(a6),d6
(1) 1839/FFFFFFFFFFFF1FE8 : 6708                		beq.s	.no_code	; Free slot
(1) 1840/FFFFFFFFFFFF1FEA : 2F07                		move.l	d7,-(sp)
(1) 1841/FFFFFFFFFFFF1FEC : 2A46                		move.l	d6,a5
(1) 1842/FFFFFFFFFFFF1FEE : 4E95                		jsr	(a5)
(1) 1843/FFFFFFFFFFFF1FF0 : 2E1F                		move.l	(sp)+,d7
(1) 1844/FFFFFFFFFFFF1FF2 :                     .no_code:
(1) 1845/FFFFFFFFFFFF1FF2 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/FFFFFFFFFFFF1FF6 : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/FFFFFFFFFFFF1FFA : 4E75                		rts
(1) 1848/FFFFFFFFFFFF1FFC :                     
(1) 1849/FFFFFFFFFFFF1FFC :                     ; --------------------------------------------------------
(1) 1850/FFFFFFFFFFFF1FFC :                     ; Object_Set, Object_Make
(1) 1851/FFFFFFFFFFFF1FFC :                     ;
(1) 1852/FFFFFFFFFFFF1FFC :                     ; Set a new object into a specific slot.
(1) 1853/FFFFFFFFFFFF1FFC :                     ;
(1) 1854/FFFFFFFFFFFF1FFC :                     ; Input:
(1) 1855/FFFFFFFFFFFF1FFC :                     ; d0.l | Object code pointer
(1) 1856/FFFFFFFFFFFF1FFC :                     ;        If 0: DELETE the object including it's memory
(1) 1857/FFFFFFFFFFFF1FFC :                     ; d1.w | Object slot
(1) 1858/FFFFFFFFFFFF1FFC :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1859/FFFFFFFFFFFF1FFC :                     ; d2.b | Object sub-type (obj_subid)
(1) 1860/FFFFFFFFFFFF1FFC :                     ;
(1) 1861/FFFFFFFFFFFF1FFC :                     ; Returns:
(1) 1862/FFFFFFFFFFFF1FFC :                     ; bcc | Found free slot
(1) 1863/FFFFFFFFFFFF1FFC :                     ; bcs | Ran-out of object slots
(1) 1864/FFFFFFFFFFFF1FFC :                     ;
(1) 1865/FFFFFFFFFFFF1FFC :                     ; Notes:
(1) 1866/FFFFFFFFFFFF1FFC :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/FFFFFFFFFFFF1FFC :                     ; but it will contain the remains of d2 when you
(1) 1868/FFFFFFFFFFFF1FFC :                     ; called this.
(1) 1869/FFFFFFFFFFFF1FFC :                     ; --------------------------------------------------------
(1) 1870/FFFFFFFFFFFF1FFC :                     
(1) 1871/FFFFFFFFFFFF1FFC :                     Object_Set:
(1) 1872/FFFFFFFFFFFF1FFC : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/FFFFFFFFFFFF2000 : 4DF8 DD58           		lea	(RAM_Objects).w,a6
(1) 1874/FFFFFFFFFFFF2004 : 7E00                		moveq	#0,d7
(1) 1875/FFFFFFFFFFFF2006 : 3E01                		move.w	d1,d7
(1) 1876/FFFFFFFFFFFF2008 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/FFFFFFFFFFFF200C : DCC7                		adda	d7,a6
(1) 1878/FFFFFFFFFFFF200E : 602C                		bra.s	objSet_Go
(1) 1879/FFFFFFFFFFFF2010 :                     
(1) 1880/FFFFFFFFFFFF2010 :                     Object_Make:
(1) 1881/FFFFFFFFFFFF2010 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/FFFFFFFFFFFF2014 : 4DF8 DD58           		lea	(RAM_Objects).w,a6
(1) 1883/FFFFFFFFFFFF2018 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/FFFFFFFFFFFF201C : 7C00                		moveq	#0,d6
(1) 1885/FFFFFFFFFFFF201E :                     .search:
(1) 1886/FFFFFFFFFFFF201E : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/FFFFFFFFFFFF2022 : 6C0E                		bge.s	objSet_Error
(1) 1888/FFFFFFFFFFFF2024 : 4A96                		tst.l	obj_code(a6)
(1) 1889/FFFFFFFFFFFF2026 : 6714                		beq.s	objSet_Go
(1) 1890/FFFFFFFFFFFF2028 : DCFC 0068           		adda	#obj_len,a6
(1) 1891/FFFFFFFFFFFF202C : 5246                		addq.w	#1,d6
(1) 1892/FFFFFFFFFFFF202E : 51CF FFEE           		dbf	d7,.search
(1) 1893/FFFFFFFFFFFF2032 :                     objSet_Error:
(1) 1894/FFFFFFFFFFFF2032 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/FFFFFFFFFFFF2036 : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/FFFFFFFFFFFF203A : 4E75                		rts
(1) 1897/FFFFFFFFFFFF203C :                     
(1) 1898/FFFFFFFFFFFF203C :                     objSet_Go:
(1) 1899/FFFFFFFFFFFF203C : 4A80                		tst.l	d0
(1) 1900/FFFFFFFFFFFF203E : 670A                		beq.s	.from_del
(1) 1901/FFFFFFFFFFFF2040 : 2E00                		move.l	d0,d7
(1) 1902/FFFFFFFFFFFF2042 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/FFFFFFFFFFFF2044 : 1D42 001D           		move.b	d2,obj_subid(a6)
(1) 1904/FFFFFFFFFFFF2048 : 600C                		bra.s	.exit_this
(1) 1905/FFFFFFFFFFFF204A :                     .from_del:
(1) 1906/FFFFFFFFFFFF204A : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/FFFFFFFFFFFF204C : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/FFFFFFFFFFFF2050 : 421D                .clr:		clr.b	(a5)+
(1) 1909/FFFFFFFFFFFF2052 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/FFFFFFFFFFFF2056 :                     .exit_this:
(1) 1911/FFFFFFFFFFFF2056 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/FFFFFFFFFFFF205A : 003C 0001           		or	#1,ccr
(1) 1913/FFFFFFFFFFFF205E : 4E75                		rts
(1) 1914/FFFFFFFFFFFF2060 :                     
(1) 1915/FFFFFFFFFFFF2060 :                     ; ====================================================================
(1) 1916/FFFFFFFFFFFF2060 :                     ; --------------------------------------------------------
(1) 1917/FFFFFFFFFFFF2060 :                     ; Object subroutines
(1) 1918/FFFFFFFFFFFF2060 :                     ;
(1) 1919/FFFFFFFFFFFF2060 :                     ; These can ONLY be called on the current object's code
(1) 1920/FFFFFFFFFFFF2060 :                     ; --------------------------------------------------------
(1) 1921/FFFFFFFFFFFF2060 :                     
(1) 1922/FFFFFFFFFFFF2060 :                     ; --------------------------------------------------------
(1) 1923/FFFFFFFFFFFF2060 :                     ; object_ResetVars
(1) 1924/FFFFFFFFFFFF2060 :                     ;
(1) 1925/FFFFFFFFFFFF2060 :                     ; Resets the current object's memory, call this
(1) 1926/FFFFFFFFFFFF2060 :                     ; at very beginning of your object's init code
(1) 1927/FFFFFFFFFFFF2060 :                     ;
(1) 1928/FFFFFFFFFFFF2060 :                     ; Input:
(1) 1929/FFFFFFFFFFFF2060 :                     ; a6 | This object
(1) 1930/FFFFFFFFFFFF2060 :                     ; --------------------------------------------------------
(1) 1931/FFFFFFFFFFFF2060 :                     
(1) 1932/FFFFFFFFFFFF2060 :                     object_ResetVars:
(1) 1933/FFFFFFFFFFFF2060 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/FFFFFFFFFFFF2064 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/FFFFFFFFFFFF2068 : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/FFFFFFFFFFFF206C : 7E00                		moveq	#0,d7
(1) 1937/FFFFFFFFFFFF206E : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/FFFFFFFFFFFF2070 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/FFFFFFFFFFFF2074 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/FFFFFFFFFFFF2078 : 4E75                		rts
(1) 1941/FFFFFFFFFFFF207A :                     
(1) 1942/FFFFFFFFFFFF207A :                     ; --------------------------------------------------------
(1) 1943/FFFFFFFFFFFF207A :                     ; object_ResetAnim
(1) 1944/FFFFFFFFFFFF207A :                     ;
(1) 1945/FFFFFFFFFFFF207A :                     ; Reset animation variables, call this BEFORE using
(1) 1946/FFFFFFFFFFFF207A :                     ; object_Animate.
(1) 1947/FFFFFFFFFFFF207A :                     ;
(1) 1948/FFFFFFFFFFFF207A :                     ; Input:
(1) 1949/FFFFFFFFFFFF207A :                     ; a6 | This object
(1) 1950/FFFFFFFFFFFF207A :                     ; --------------------------------------------------------
(1) 1951/FFFFFFFFFFFF207A :                     
(1) 1952/FFFFFFFFFFFF207A :                     object_ResetAnim:
(1) 1953/FFFFFFFFFFFF207A :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/FFFFFFFFFFFF207A :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/FFFFFFFFFFFF207A : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/FFFFFFFFFFFF2080 : 4E75                		rts
(1) 1957/FFFFFFFFFFFF2082 :                     
(1) 1958/FFFFFFFFFFFF2082 :                     ; --------------------------------------------------------
(1) 1959/FFFFFFFFFFFF2082 :                     ; object_Speed
(1) 1960/FFFFFFFFFFFF2082 :                     ;
(1) 1961/FFFFFFFFFFFF2082 :                     ; Moves the object using speed values set on
(1) 1962/FFFFFFFFFFFF2082 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/FFFFFFFFFFFF2082 :                     ;
(1) 1964/FFFFFFFFFFFF2082 :                     ; Input:
(1) 1965/FFFFFFFFFFFF2082 :                     ; a6 | This object
(1) 1966/FFFFFFFFFFFF2082 :                     ; --------------------------------------------------------
(1) 1967/FFFFFFFFFFFF2082 :                     
(1) 1968/FFFFFFFFFFFF2082 :                     object_Speed:
(1) 1969/FFFFFFFFFFFF2082 : 2F07                		move.l	d7,-(sp)
(1) 1970/FFFFFFFFFFFF2084 : 7E00                		moveq	#0,d7
(1) 1971/FFFFFFFFFFFF2086 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/FFFFFFFFFFFF208A : 48C7                		ext.l	d7
(1) 1973/FFFFFFFFFFFF208C : E187                		asl.l	#8,d7
(1) 1974/FFFFFFFFFFFF208E : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/FFFFFFFFFFFF2092 : 7E00                		moveq	#0,d7
(1) 1976/FFFFFFFFFFFF2094 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/FFFFFFFFFFFF2098 : 48C7                		ext.l	d7
(1) 1978/FFFFFFFFFFFF209A : E187                		asl.l	#8,d7
(1) 1979/FFFFFFFFFFFF209C : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/FFFFFFFFFFFF20A0 : 7E00                		moveq	#0,d7
(1) 1981/FFFFFFFFFFFF20A2 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/FFFFFFFFFFFF20A6 : 48C7                		ext.l	d7
(1) 1983/FFFFFFFFFFFF20A8 : E187                		asl.l	#8,d7
(1) 1984/FFFFFFFFFFFF20AA : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/FFFFFFFFFFFF20AE : 2E1F                		move.l	(sp)+,d7
(1) 1986/FFFFFFFFFFFF20B0 : 4E75                		rts
(1) 1987/FFFFFFFFFFFF20B2 :                     
(1) 1988/FFFFFFFFFFFF20B2 :                     ; --------------------------------------------------------
(1) 1989/FFFFFFFFFFFF20B2 :                     ; object_Animate
(1) 1990/FFFFFFFFFFFF20B2 :                     ;
(1) 1991/FFFFFFFFFFFF20B2 :                     ; Animates the sprite with a animation script,
(1) 1992/FFFFFFFFFFFF20B2 :                     ; modifies obj_frame with the frame to use.
(1) 1993/FFFFFFFFFFFF20B2 :                     ;
(1) 1994/FFFFFFFFFFFF20B2 :                     ; Input:
(1) 1995/FFFFFFFFFFFF20B2 :                     ; a6 | This object
(1) 1996/FFFFFFFFFFFF20B2 :                     ; a0 | Animation data
(1) 1997/FFFFFFFFFFFF20B2 :                     ; --------------------------------------------------------
(1) 1998/FFFFFFFFFFFF20B2 :                     
(1) 1999/FFFFFFFFFFFF20B2 :                     ; anim_data:
(1) 2000/FFFFFFFFFFFF20B2 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/FFFFFFFFFFFF20B2 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/FFFFFFFFFFFF20B2 :                     ; 	;...
(1) 2003/FFFFFFFFFFFF20B2 :                     ;
(1) 2004/FFFFFFFFFFFF20B2 :                     ; .frame_num:
(1) 2005/FFFFFFFFFFFF20B2 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/FFFFFFFFFFFF20B2 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/FFFFFFFFFFFF20B2 :                     ; 	dc.w command			; End-of-data command
(1) 2008/FFFFFFFFFFFF20B2 :                     ;
(1) 2009/FFFFFFFFFFFF20B2 :                     ; commands:
(1) 2010/FFFFFFFFFFFF20B2 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/FFFFFFFFFFFF20B2 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/FFFFFFFFFFFF20B2 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/FFFFFFFFFFFF20B2 :                     
(1) 2014/FFFFFFFFFFFF20B2 :                     object_Animate:
(1) 2015/FFFFFFFFFFFF20B2 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/FFFFFFFFFFFF20B6 : 7E00                		moveq	#0,d7
(1) 2017/FFFFFFFFFFFF20B8 : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/FFFFFFFFFFFF20BC : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/FFFFFFFFFFFF20C0 : 670E                 		beq.s	.sameThing
(1) 2020/FFFFFFFFFFFF20C2 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/FFFFFFFFFFFF20C8 : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/FFFFFFFFFFFF20CC : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/FFFFFFFFFFFF20D0 :                     .sameThing:
(1) 2024/FFFFFFFFFFFF20D0 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/FFFFFFFFFFFF20D4 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/FFFFFFFFFFFF20D8 : 6748                 		beq.s	.return
(1) 2027/FFFFFFFFFFFF20DA : DE47                 		add.w	d7,d7
(1) 2028/FFFFFFFFFFFF20DC : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/FFFFFFFFFFFF20E0 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/FFFFFFFFFFFF20E4 : 3E18                 		move.w	(a0)+,d7
(1) 2031/FFFFFFFFFFFF20E6 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/FFFFFFFFFFFF20EA : 670C                 		beq.s	.keepspd
(1) 2033/FFFFFFFFFFFF20EC : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/FFFFFFFFFFFF20F2 : 6A2E                 		bpl.s	.return
(1) 2035/FFFFFFFFFFFF20F4 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/FFFFFFFFFFFF20F8 :                     .keepspd:
(1) 2037/FFFFFFFFFFFF20F8 : 7C00                 		moveq	#0,d6
(1) 2038/FFFFFFFFFFFF20FA : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/FFFFFFFFFFFF20FE : DE47                 		add.w	d7,d7
(1) 2040/FFFFFFFFFFFF2100 : 3C10                 		move.w	(a0),d6
(1) 2041/FFFFFFFFFFFF2102 : D0C7                 		adda	d7,a0
(1) 2042/FFFFFFFFFFFF2104 : 3A10                 		move.w	(a0),d5
(1) 2043/FFFFFFFFFFFF2106 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/FFFFFFFFFFFF210A : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/FFFFFFFFFFFF210C : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/FFFFFFFFFFFF2110 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/FFFFFFFFFFFF2112 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/FFFFFFFFFFFF2116 : 671A                 		beq.s	.goToFrame
(1) 2049/FFFFFFFFFFFF2118 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/FFFFFFFFFFFF211C : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/FFFFFFFFFFFF2122 :                     .return:
(1) 2052/FFFFFFFFFFFF2122 : 601C                 		bra.s	.exit_anim
(1) 2053/FFFFFFFFFFFF2124 :                     .noAnim:
(1) 2054/FFFFFFFFFFFF2124 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/FFFFFFFFFFFF212A : 3A06                 		move.w	d6,d5
(1) 2056/FFFFFFFFFFFF212C : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/FFFFFFFFFFFF2130 : 600E                		bra.s	.exit_anim
(1) 2058/FFFFFFFFFFFF2132 :                     .goToFrame:
(1) 2059/FFFFFFFFFFFF2132 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/FFFFFFFFFFFF2136 : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/FFFFFFFFFFFF213C :                     .lastFrame:
(1) 2062/FFFFFFFFFFFF213C : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/FFFFFFFFFFFF2140 :                     .exit_anim:
(1) 2064/FFFFFFFFFFFF2140 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/FFFFFFFFFFFF2144 : 4E75                		rts
(1) 2066/FFFFFFFFFFFF2146 :                     
(1) 2067/FFFFFFFFFFFF2146 :                     ; --------------------------------------------------------
(1) 2068/FFFFFFFFFFFF2146 :                     ; object_Touch
(1) 2069/FFFFFFFFFFFF2146 :                     ;
(1) 2070/FFFFFFFFFFFF2146 :                     ; Detects collision with another Object
(1) 2071/FFFFFFFFFFFF2146 :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/FFFFFFFFFFFF2146 :                     ;
(1) 2073/FFFFFFFFFFFF2146 :                     ; Input:
(1) 2074/FFFFFFFFFFFF2146 :                     ; a6   | This object
(1) 2075/FFFFFFFFFFFF2146 :                     ;
(1) 2076/FFFFFFFFFFFF2146 :                     ; Returns:
(1) 2077/FFFFFFFFFFFF2146 :                     ; d0.l | If Nothing: 0
(1) 2078/FFFFFFFFFFFF2146 :                     ;        If Found:   The target's RAM location
(1) 2079/FFFFFFFFFFFF2146 :                     ; --------------------------------------------------------
(1) 2080/FFFFFFFFFFFF2146 :                     
(1) 2081/FFFFFFFFFFFF2146 :                     object_Touch:
(1) 2082/FFFFFFFFFFFF2146 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/FFFFFFFFFFFF214A : 7000                		moveq	#0,d0
(1) 2084/FFFFFFFFFFFF214C : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/FFFFFFFFFFFF2150 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/FFFFFFFFFFFF2154 : 8C45                		or.w	d5,d6
(1) 2087/FFFFFFFFFFFF2156 : 671E                		beq	.exit_this
(1) 2088/FFFFFFFFFFFF2158 : 4BF8 DD58           		lea	(RAM_Objects).w,a5
(1) 2089/FFFFFFFFFFFF215C : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/FFFFFFFFFFFF215E :                     .next:
(1) 2091/FFFFFFFFFFFF215E : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/FFFFFFFFFFFF2160 : 670A                		beq.s	.skip
(1) 2093/FFFFFFFFFFFF2162 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/FFFFFFFFFFFF2164 : 6706                		beq.s	.skip
(1) 2095/FFFFFFFFFFFF2166 : 6114                		bsr.s	.check_this
(1) 2096/FFFFFFFFFFFF2168 : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/FFFFFFFFFFFF216A : 660A                		bne.s	.exit_this
(1) 2098/FFFFFFFFFFFF216C : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/FFFFFFFFFFFF2170 : 51CF FFEC           		dbf	d7,.next
(1) 2100/FFFFFFFFFFFF2174 : 7000                		moveq	#0,d0
(1) 2101/FFFFFFFFFFFF2176 :                     .exit_this:
(1) 2102/FFFFFFFFFFFF2176 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/FFFFFFFFFFFF217A : 4E75                		rts
(1) 2104/FFFFFFFFFFFF217C :                     
(1) 2105/FFFFFFFFFFFF217C :                     ; main check
(1) 2106/FFFFFFFFFFFF217C :                     .check_this:
(1) 2107/FFFFFFFFFFFF217C : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/FFFFFFFFFFFF217E :                     	; d6 - Y current top
(1) 2109/FFFFFFFFFFFF217E :                     	; d5 - Y current bottom
(1) 2110/FFFFFFFFFFFF217E :                     	; d4 - Y target top
(1) 2111/FFFFFFFFFFFF217E :                     	; d3 - Y target bottom
(1) 2112/FFFFFFFFFFFF217E :                     	; Check X
(1) 2113/FFFFFFFFFFFF217E : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/FFFFFFFFFFFF2182 : 6700 00B4           		beq	.not_ytop
(1) 2115/FFFFFFFFFFFF2186 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/FFFFFFFFFFFF218A : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/FFFFFFFFFFFF218C : 3401                		move.w	d1,d2
(1) 2118/FFFFFFFFFFFF218E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/FFFFFFFFFFFF2190 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/FFFFFFFFFFFF2194 :                     ; 		lsl.w	#3,d1
(1) 2121/FFFFFFFFFFFF2194 :                     ; 		lsl.w	#3,d2
(1) 2122/FFFFFFFFFFFF2194 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/FFFFFFFFFFFF2196 : 9C41                		sub.w	d1,d6
(1) 2124/FFFFFFFFFFFF2198 : DA42                		add.w	d2,d5
(1) 2125/FFFFFFFFFFFF219A : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/FFFFFFFFFFFF219E : 6700 0098           		beq	.not_ytop
(1) 2127/FFFFFFFFFFFF21A2 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/FFFFFFFFFFFF21A6 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/FFFFFFFFFFFF21A8 : 3401                		move.w	d1,d2
(1) 2130/FFFFFFFFFFFF21AA : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/FFFFFFFFFFFF21AC : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/FFFFFFFFFFFF21B0 :                     ; 		lsl.w	#3,d1
(1) 2133/FFFFFFFFFFFF21B0 :                     ; 		lsl.w	#3,d2
(1) 2134/FFFFFFFFFFFF21B0 : 5342                		subq.w	#1,d2
(1) 2135/FFFFFFFFFFFF21B2 : 9841                		sub.w	d1,d4
(1) 2136/FFFFFFFFFFFF21B4 : D642                		add.w	d2,d3
(1) 2137/FFFFFFFFFFFF21B6 : B646                		cmp.w	d6,d3
(1) 2138/FFFFFFFFFFFF21B8 : 6D7E                		blt	.not_ytop
(1) 2139/FFFFFFFFFFFF21BA : B845                		cmp.w	d5,d4
(1) 2140/FFFFFFFFFFFF21BC : 6C7A                		bge	.not_ytop
(1) 2141/FFFFFFFFFFFF21BE :                     
(1) 2142/FFFFFFFFFFFF21BE :                     	; Check Y
(1) 2143/FFFFFFFFFFFF21BE : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/FFFFFFFFFFFF21C2 : 6774                		beq	.not_ytop
(1) 2145/FFFFFFFFFFFF21C4 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/FFFFFFFFFFFF21C8 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/FFFFFFFFFFFF21CA : 3401                		move.w	d1,d2
(1) 2148/FFFFFFFFFFFF21CC : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/FFFFFFFFFFFF21CE : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/FFFFFFFFFFFF21D2 :                     ; 		lsl.w	#3,d1
(1) 2151/FFFFFFFFFFFF21D2 :                     ; 		lsl.w	#3,d2
(1) 2152/FFFFFFFFFFFF21D2 : 5342                		subq.w	#1,d2
(1) 2153/FFFFFFFFFFFF21D4 : 9C41                		sub.w	d1,d6
(1) 2154/FFFFFFFFFFFF21D6 : DA42                		add.w	d2,d5
(1) 2155/FFFFFFFFFFFF21D8 : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/FFFFFFFFFFFF21DC : 675A                		beq	.not_ytop
(1) 2157/FFFFFFFFFFFF21DE : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/FFFFFFFFFFFF21E2 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/FFFFFFFFFFFF21E4 : 3401                		move.w	d1,d2
(1) 2160/FFFFFFFFFFFF21E6 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/FFFFFFFFFFFF21E8 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/FFFFFFFFFFFF21EC :                     ; 		lsl.w	#3,d1
(1) 2163/FFFFFFFFFFFF21EC :                     ; 		lsl.w	#3,d2
(1) 2164/FFFFFFFFFFFF21EC : 5342                		subq.w	#1,d2
(1) 2165/FFFFFFFFFFFF21EE : 9841                		sub.w	d1,d4
(1) 2166/FFFFFFFFFFFF21F0 : D642                		add.w	d2,d3
(1) 2167/FFFFFFFFFFFF21F2 : B646                		cmp.w	d6,d3
(1) 2168/FFFFFFFFFFFF21F4 : 6D42                		blt.s	.not_ytop
(1) 2169/FFFFFFFFFFFF21F6 : B845                		cmp.w	d5,d4
(1) 2170/FFFFFFFFFFFF21F8 : 6C3E                		bge.s	.not_ytop
(1) 2171/FFFFFFFFFFFF21FA :                     
(1) 2172/FFFFFFFFFFFF21FA :                     	; Special Z check
(1) 2173/FFFFFFFFFFFF21FA : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/FFFFFFFFFFFF21FE : 6736                		beq.s	.set_ok
(1) 2175/FFFFFFFFFFFF2200 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/FFFFFFFFFFFF2204 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/FFFFFFFFFFFF2206 : 3401                		move.w	d1,d2
(1) 2178/FFFFFFFFFFFF2208 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/FFFFFFFFFFFF220A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/FFFFFFFFFFFF220E :                     ; 		lsl.w	#3,d1
(1) 2181/FFFFFFFFFFFF220E :                     ; 		lsl.w	#3,d2
(1) 2182/FFFFFFFFFFFF220E : 5342                		subq.w	#1,d2
(1) 2183/FFFFFFFFFFFF2210 : 9C41                		sub.w	d1,d6
(1) 2184/FFFFFFFFFFFF2212 : DA42                		add.w	d2,d5
(1) 2185/FFFFFFFFFFFF2214 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/FFFFFFFFFFFF2218 : 671C                		beq.s	.set_ok
(1) 2187/FFFFFFFFFFFF221A : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/FFFFFFFFFFFF221E : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/FFFFFFFFFFFF2220 : 3401                		move.w	d1,d2
(1) 2190/FFFFFFFFFFFF2222 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/FFFFFFFFFFFF2224 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/FFFFFFFFFFFF2228 :                     ; 		lsl.w	#3,d1
(1) 2193/FFFFFFFFFFFF2228 :                     ; 		lsl.w	#3,d2
(1) 2194/FFFFFFFFFFFF2228 : 5342                		subq.w	#1,d2
(1) 2195/FFFFFFFFFFFF222A : 9841                		sub.w	d1,d4
(1) 2196/FFFFFFFFFFFF222C : D642                		add.w	d2,d3
(1) 2197/FFFFFFFFFFFF222E : B646                		cmp.w	d6,d3
(1) 2198/FFFFFFFFFFFF2230 : 6D06                		blt	.not_ytop
(1) 2199/FFFFFFFFFFFF2232 : B845                		cmp.w	d5,d4
(1) 2200/FFFFFFFFFFFF2234 : 6C02                		bge	.not_ytop
(1) 2201/FFFFFFFFFFFF2236 :                     .set_ok:
(1) 2202/FFFFFFFFFFFF2236 : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/FFFFFFFFFFFF2238 :                     .not_ytop:
(1) 2204/FFFFFFFFFFFF2238 : 4E75                		rts
(1) 2205/FFFFFFFFFFFF223A :                     
(1) 2206/FFFFFFFFFFFF223A :                     ; ============================================================
(1) 2207/FFFFFFFFFFFF223A :                     ; --------------------------------------------------------
(1) 2208/FFFFFFFFFFFF223A :                     ; object_GetSprInfo
(1) 2209/FFFFFFFFFFFF223A :                     ;
(1) 2210/FFFFFFFFFFFF223A :                     ; Call this before using
(1) 2211/FFFFFFFFFFFF223A :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/FFFFFFFFFFFF223A :                     ;
(1) 2213/FFFFFFFFFFFF223A :                     ; Input:
(1) 2214/FFFFFFFFFFFF223A :                     ; a6   | This object
(1) 2215/FFFFFFFFFFFF223A :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/FFFFFFFFFFFF223A :                     ;        - Set to 0 for 3D Sprites
(1) 2217/FFFFFFFFFFFF223A :                     ; d1.w | Flags
(1) 2218/FFFFFFFFFFFF223A :                     ;
(1) 2219/FFFFFFFFFFFF223A :                     ; Output:
(1) 2220/FFFFFFFFFFFF223A :                     ; d0.l | X and Y position
(1) 2221/FFFFFFFFFFFF223A :                     ; d1.l | Flags and Z Position
(1) 2222/FFFFFFFFFFFF223A :                     ; d4.w | Current frame
(1) 2223/FFFFFFFFFFFF223A :                     ; --------------------------------------------------------
(1) 2224/FFFFFFFFFFFF223A :                     
(1) 2225/FFFFFFFFFFFF223A :                     object_MdMars_GetSprInfo:
(1) 2240/FFFFFFFFFFFF223A : 4E75                		rts
(1) 2241/FFFFFFFFFFFF223C :                     
     197/FFFFFFFFFFFF223C :                     
     198/FFFFFFFFFFFF223C :                     ; --------------------------------------------------------
     199/FFFFFFFFFFFF223C :                     ; SCREEN MODE MAIN LOOP
     200/FFFFFFFFFFFF223C :                     ;
     201/FFFFFFFFFFFF223C :                     ;  MD/Pico: Direct ROM jump
     202/FFFFFFFFFFFF223C :                     ; CD/CD32X: Reads file from DISC and
     203/FFFFFFFFFFFF223C :                     ;           transfers code to RAM
     204/FFFFFFFFFFFF223C :                     ;      32X: Code is stored on ROM but runs in
     205/FFFFFFFFFFFF223C :                     ;           RAM to prevent bus-conflicts with the
     206/FFFFFFFFFFFF223C :                     ;           SH2's view of ROM at CS1
     207/FFFFFFFFFFFF223C :                     ;
     208/FFFFFFFFFFFF223C :                     ; - Returning in your current screen code loops here
     209/FFFFFFFFFFFF223C :                     ; - 32X/CD32X:
     210/FFFFFFFFFFFF223C :                     ;   This will turn OFF the 32X's current video mode
     211/FFFFFFFFFFFF223C :                     ; --------------------------------------------------------
     212/FFFFFFFFFFFF223C :                     
     213/FFFFFFFFFFFF223C :                     Md_ReadModes:
     214/FFFFFFFFFFFF223C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     216/FFFFFFFFFFFF2240 : 6100 F434           		bsr	Video_MdMcd_StampDisable	; Disable Stamps
     217/FFFFFFFFFFFF2244 : 6100 FD3C           		bsr	System_MdMcd_CddaStop		; Stop CDDA
     222/FFFFFFFFFFFF2248 : 7000                		moveq	#0,d0
     223/FFFFFFFFFFFF224A : 3038 EDB4           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     224/FFFFFFFFFFFF224E : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     225/FFFFFFFFFFFF2252 : E948                		lsl.w	#4,d0				; number*$10
     226/FFFFFFFFFFFF2254 : 41FB 0024           		lea	.pick_mode(pc,d0.w),a0		; Read list
     227/FFFFFFFFFFFF2258 :                     	; SCD/CD32X
     229/FFFFFFFFFFFF2258 : D0FC 0004           		adda	#4,a0				; a0 - Filename string
     230/FFFFFFFFFFFF225C : 6100 FB4E           		bsr	System_MdMcd_SubWait
     231/FFFFFFFFFFFF2260 : 43F9 FFFF 2C00      		lea	(RAM_UserCode).l,a1		; a1 - Output location
     232/FFFFFFFFFFFF2266 : 303C 8400           		move.w	#MAX_UserCode,d0		; Maximum code size
     233/FFFFFFFFFFFF226A : 6100 FBC2           		bsr	System_MdMcd_RdFile_RAM		; Load CODE from disc
     234/FFFFFFFFFFFF226E : 6100 FB3C           		bsr	System_MdMcd_SubWait		; Wait Sub-CPU
     235/FFFFFFFFFFFF2272 : 4EB9 FFFF 2C00      		jsr	(RAM_UserCode).l
     236/FFFFFFFFFFFF2278 :                     	; 32X Cartridge
     250/FFFFFFFFFFFF2278 : 60C2                		bra.s	Md_ReadModes			; Loop on rts
     251/FFFFFFFFFFFF227A :                     
     252/FFFFFFFFFFFF227A :                     ; ====================================================================
     253/FFFFFFFFFFFF227A :                     ; ---------------------------------------------
     254/FFFFFFFFFFFF227A :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     255/FFFFFFFFFFFF227A :                     ; ---------------------------------------------
     256/FFFFFFFFFFFF227A :                     
     257/FFFFFFFFFFFF227A :                     .pick_mode:
     258/FFFFFFFFFFFF227A :                     		include "game/screens.asm"
(1)    1/FFFFFFFFFFFF227A :                     ; ============================================================
(1)    2/FFFFFFFFFFFF227A :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF227A :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/FFFFFFFFFFFF227A :                     ;
(1)    5/FFFFFFFFFFFF227A :                     ; - Screen CODE includes: incl_code.asm
(1)    6/FFFFFFFFFFFF227A :                     ;
(1)    7/FFFFFFFFFFFF227A :                     ; - DATA Bank includes: incl_data.asm
(1)    8/FFFFFFFFFFFF227A :                     ;
(1)    9/FFFFFFFFFFFF227A :                     ; ** For CD/CD32X **
(1)   10/FFFFFFFFFFFF227A :                     ;    Add your ISO file entries for both
(1)   11/FFFFFFFFFFFF227A :                     ;    CODE and DATA in iso_files.asm
(1)   12/FFFFFFFFFFFF227A :                     ; --------------------------------------------------------
(1)   13/FFFFFFFFFFFF227A :                     
(1)   14/FFFFFFFFFFFF227A :                     ; Entry:
(1)   15/FFFFFFFFFFFF227A : 0005 C800           		dc.l Md_Screen00	; ****
(1)   16/FFFFFFFFFFFF227E : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2284 : 3030 2E42 494E    
(1)   17/FFFFFFFFFFFF228A : 0005 D000           		dc.l Md_Screen01	; ****
(1)   18/FFFFFFFFFFFF228E : 5343 5245 454E      		dc.b "SCREEN01.BIN"
         FFFFFFFFFFFF2294 : 3031 2E42 494E    
(1)   19/FFFFFFFFFFFF229A : 0005 D800           		dc.l Md_Screen02	; ****
(1)   20/FFFFFFFFFFFF229E : 5343 5245 454E      		dc.b "SCREEN02.BIN"
         FFFFFFFFFFFF22A4 : 3032 2E42 494E    
(1)   21/FFFFFFFFFFFF22AA : 0005 F000           		dc.l Md_Screen03	; ****
(1)   22/FFFFFFFFFFFF22AE : 5343 5245 454E      		dc.b "SCREEN03.BIN"
         FFFFFFFFFFFF22B4 : 3033 2E42 494E    
(1)   23/FFFFFFFFFFFF22BA : 0005 F800           		dc.l Md_Screen04	; ****
(1)   24/FFFFFFFFFFFF22BE : 5343 5245 454E      		dc.b "SCREEN04.BIN"
         FFFFFFFFFFFF22C4 : 3034 2E42 494E    
(1)   25/FFFFFFFFFFFF22CA : 0005 C800           		dc.l Md_Screen00	; ****
(1)   26/FFFFFFFFFFFF22CE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF22D4 : 3030 2E42 494E    
(1)   27/FFFFFFFFFFFF22DA : 0005 C800           		dc.l Md_Screen00	; ****
(1)   28/FFFFFFFFFFFF22DE : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF22E4 : 3030 2E42 494E    
(1)   29/FFFFFFFFFFFF22EA : 0006 0000           		dc.l Md_Screen07	; ****
(1)   30/FFFFFFFFFFFF22EE : 5343 5245 454E      		dc.b "SCREEN07.BIN"
         FFFFFFFFFFFF22F4 : 3037 2E42 494E    
(1)   31/FFFFFFFFFFFF22FA :                     
     259/FFFFFFFFFFFF22FA :                     
     260/FFFFFFFFFFFF22FA :                     ; ====================================================================
     261/FFFFFFFFFFFF22FA :                     
     263/FFFFFFFFFFFF22FA :                     .end:
     264/FFFFFFFFFFFF22FA : (MACRO)              		erreport "NIKONA RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     265/    4C10 :                     		dephase
     266/    4C10 :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     268/    4C10 :                     
     269/    4C10 :                     Md_SysCode_e:
     270/    4C10 :                     		align 2
     271/    4C10 :                     
     272/    4C10 :                     ; ===========================================================================
     273/    4C10 :                     ; ----------------------------------------------------------------
     274/    4C10 :                     ; DATA section shared on both Cartridge or Disc
     275/    4C10 :                     ; ----------------------------------------------------------------
     276/    4C10 :                     
     277/    4C10 :                     ; --------------------------------------------------------
     278/    4C10 :                     ; CD/CD32X ISO header and files
     279/    4C10 :                     ; --------------------------------------------------------
     280/    4C10 :                     
     282/    4C10 :                     		align $8000
     283/    8000 :                     		binclude "system/mcd/fshead.bin"		; Pre-generated ISO header
     284/    B800 : (MACRO)              		fs_mkList 0,IsoFileList,IsoFileList_e		; TWO pointers to the filelist
     284/    B800 :                     .fstrt:
     284/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     284/    B801 : 00                                  dc.b 0                                          ; Zero
     284/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     284/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     284/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     284/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     284/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     284/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     284/    B812 : 7D                                  dc.b (2024-1900)+1                              ; Year
     284/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     284/    B819 : 02                                  dc.b 2                                          ; File flags
     284/    B81A : 0000                                dc.b 0,0
     284/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     284/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     284/    B820 : 0100                                dc.b 1,0
     284/    B822 :                     .fend:
     285/    B822 : (MACRO)              		fs_mkList 1,IsoFileList,IsoFileList_e
     285/    B822 :                     .fstrt:
     285/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     285/    B823 : 00                                  dc.b 0                                          ; Zero
     285/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     285/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     285/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     285/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     285/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     285/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     285/    B834 : 7D                                  dc.b (2024-1900)+1                              ; Year
     285/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; **never done**
     285/    B83B : 02                                  dc.b 2                                          ; File flags
     285/    B83C : 0000                                dc.b 0,0
     285/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     285/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     285/    B842 : 0101                                dc.b 1,1
     285/    B844 :                     .fend:
     286/    B844 :                     IsoFileList:
     287/    B844 : (MACRO)              		fs_file "NKNA_SUB.BIN",MCD_SMPDATA,MCD_SMPDATA_e
     287/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     287/    B845 : 00                                  dc.b 0                                          ; zero
     287/    B846 : 1C00                                dc.b (MCD_SMPDATA>>11&$FF),(MCD_SMPDATA>>19&$FF)            ; MCD_SMPDATA sector, little
     287/    B848 : 0000                                dc.b (MCD_SMPDATA>>27&$FF),(MCD_SMPDATA>>35&$FF)
     287/    B84A : 0000 001C                           dc.l MCD_SMPDATA>>11                                  ; MCD_SMPDATA sector, big
     287/    B84E : 00D8                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>8&$FF)     ; Filesize, little
     287/    B850 : 0400                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)>>16&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>24&$FF)
     287/    B852 : 0004 D800                           dc.l MCD_SMPDATA_E-MCD_SMPDATA                                  ; Filesize, big
     287/    B856 : 7D                                  dc.b (2024-1900)+1                              ; Year
     287/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     287/    B85D : 00                                  dc.b 0                                          ; File flags
     287/    B85E : 0000                                dc.b 0,0
     287/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     287/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     287/    B864 : 0E                                  dc.b .flend-.flen
     287/    B865 : 4E4B 4E41 5F53      .flen:          dc.b "NKNA_SUB.BIN",";1"
             B86B : 5542 2E42 494E 
             B871 : 3B31             
     287/    B873 : 00                  .flend:         dc.b 0
     287/    B874 :                     .fend:
     288/    B874 : (MACRO)              		fs_file "NKNAMARS.BIN",MARS_RAMCODE,MARS_RAMCODE_EOF
     288/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     288/    B875 : 00                                  dc.b 0                                          ; zero
     288/    B876 : B800                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     288/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     288/    B87A : 0000 00B8                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     288/    B87E : 0008                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     288/    B880 : 0000                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     288/    B882 : 0000 0800                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     288/    B886 : 7D                                  dc.b (2024-1900)+1                              ; Year
     288/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     288/    B88D : 00                                  dc.b 0                                          ; File flags
     288/    B88E : 0000                                dc.b 0,0
     288/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     288/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     288/    B894 : 0E                                  dc.b .flend-.flen
     288/    B895 : 4E4B 4E41 4D41      .flen:          dc.b "NKNAMARS.BIN",";1"
             B89B : 5253 2E42 494E 
             B8A1 : 3B31             
     288/    B8A3 : 00                  .flend:         dc.b 0
     288/    B8A4 :                     .fend:
     289/    B8A4 : (MACRO)              		fs_file "GEMA_Z80.BIN",Z80_CODE_FILE,Z80_CODE_FILE_E
     289/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     289/    B8A5 : 00                                  dc.b 0                                          ; zero
     289/    B8A6 : 1800                                dc.b (Z80_CODE_FILE>>11&$FF),(Z80_CODE_FILE>>19&$FF)            ; Z80_CODE_FILE sector, little
     289/    B8A8 : 0000                                dc.b (Z80_CODE_FILE>>27&$FF),(Z80_CODE_FILE>>35&$FF)
     289/    B8AA : 0000 0018                           dc.l Z80_CODE_FILE>>11                                  ; Z80_CODE_FILE sector, big
     289/    B8AE : 0020                                dc.b ((Z80_CODE_FILE_E-Z80_CODE_FILE)&$FF),((Z80_CODE_FILE_E-Z80_CODE_FILE)>>8&$FF)     ; Filesize, little
     289/    B8B0 : 0000                                dc.b ((Z80_CODE_FILE_E-Z80_CODE_FILE)>>16&$FF),((Z80_CODE_FILE_E-Z80_CODE_FILE)>>24&$FF)
     289/    B8B2 : 0000 2000                           dc.l Z80_CODE_FILE_E-Z80_CODE_FILE                                  ; Filesize, big
     289/    B8B6 : 7D                                  dc.b (2024-1900)+1                              ; Year
     289/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     289/    B8BD : 00                                  dc.b 0                                          ; File flags
     289/    B8BE : 0000                                dc.b 0,0
     289/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     289/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     289/    B8C4 : 0E                                  dc.b .flend-.flen
     289/    B8C5 : 4745 4D41 5F5A      .flen:          dc.b "GEMA_Z80.BIN",";1"
             B8CB : 3830 2E42 494E 
             B8D1 : 3B31             
     289/    B8D3 : 00                  .flend:         dc.b 0
     289/    B8D4 :                     .fend:
     290/    B8D4 :                     	; ******
     291/    B8D4 :                     		include "game/iso_files.asm"
(1)    1/    B8D4 :                     ; ============================================================
(1)    2/    B8D4 :                     ; ----------------------------------------------------
(1)    3/    B8D4 :                     ; SCD/CD32X ONLY:
(1)    4/    B8D4 :                     ; Labels and filenames for the CODE and
(1)    5/    B8D4 :                     ; DATA banks.
(1)    6/    B8D4 :                     ; ----------------------------------------------------
(1)    7/    B8D4 :                     
(1)    8/    B8D4 :                     	;fs_file "ISO_FILE.BIN",Label_DataStart,Lable_DataEnd
(1)    9/    B8D4 :                     
(1)   10/    B8D4 : (MACRO)              	fs_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
(1)   10/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   10/    B8D5 : 00                                  dc.b 0                                          ; zero
(1)   10/    B8D6 : B900                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
(1)   10/    B8D8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
(1)   10/    B8DA : 0000 00B9                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
(1)   10/    B8DE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
(1)   10/    B8E0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
(1)   10/    B8E2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
(1)   10/    B8E6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   10/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   10/    B8ED : 00                                  dc.b 0                                          ; File flags
(1)   10/    B8EE : 0000                                dc.b 0,0
(1)   10/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   10/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   10/    B8F4 : 0E                                  dc.b .flend-.flen
(1)   10/    B8F5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8FB : 3030 2E42 494E 
             B901 : 3B31             
(1)   10/    B903 : 00                  .flend:         dc.b 0
(1)   10/    B904 :                     .fend:
(1)   11/    B904 : (MACRO)              	fs_file "SCREEN01.BIN",Md_Screen01,Md_Screen01_e
(1)   11/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   11/    B905 : 00                                  dc.b 0                                          ; zero
(1)   11/    B906 : BA00                                dc.b (MD_SCREEN01>>11&$FF),(MD_SCREEN01>>19&$FF)            ; MD_SCREEN01 sector, little
(1)   11/    B908 : 0000                                dc.b (MD_SCREEN01>>27&$FF),(MD_SCREEN01>>35&$FF)
(1)   11/    B90A : 0000 00BA                           dc.l MD_SCREEN01>>11                                  ; MD_SCREEN01 sector, big
(1)   11/    B90E : 0008                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>8&$FF)     ; Filesize, little
(1)   11/    B910 : 0000                                dc.b ((MD_SCREEN01_E-MD_SCREEN01)>>16&$FF),((MD_SCREEN01_E-MD_SCREEN01)>>24&$FF)
(1)   11/    B912 : 0000 0800                           dc.l MD_SCREEN01_E-MD_SCREEN01                                  ; Filesize, big
(1)   11/    B916 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   11/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   11/    B91D : 00                                  dc.b 0                                          ; File flags
(1)   11/    B91E : 0000                                dc.b 0,0
(1)   11/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   11/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   11/    B924 : 0E                                  dc.b .flend-.flen
(1)   11/    B925 : 5343 5245 454E      .flen:          dc.b "SCREEN01.BIN",";1"
             B92B : 3031 2E42 494E 
             B931 : 3B31             
(1)   11/    B933 : 00                  .flend:         dc.b 0
(1)   11/    B934 :                     .fend:
(1)   12/    B934 : (MACRO)              	fs_file "SCREEN02.BIN",Md_Screen02,Md_Screen02_e
(1)   12/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   12/    B935 : 00                                  dc.b 0                                          ; zero
(1)   12/    B936 : BB00                                dc.b (MD_SCREEN02>>11&$FF),(MD_SCREEN02>>19&$FF)            ; MD_SCREEN02 sector, little
(1)   12/    B938 : 0000                                dc.b (MD_SCREEN02>>27&$FF),(MD_SCREEN02>>35&$FF)
(1)   12/    B93A : 0000 00BB                           dc.l MD_SCREEN02>>11                                  ; MD_SCREEN02 sector, big
(1)   12/    B93E : 0018                                dc.b ((MD_SCREEN02_E-MD_SCREEN02)&$FF),((MD_SCREEN02_E-MD_SCREEN02)>>8&$FF)     ; Filesize, little
(1)   12/    B940 : 0000                                dc.b ((MD_SCREEN02_E-MD_SCREEN02)>>16&$FF),((MD_SCREEN02_E-MD_SCREEN02)>>24&$FF)
(1)   12/    B942 : 0000 1800                           dc.l MD_SCREEN02_E-MD_SCREEN02                                  ; Filesize, big
(1)   12/    B946 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   12/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   12/    B94D : 00                                  dc.b 0                                          ; File flags
(1)   12/    B94E : 0000                                dc.b 0,0
(1)   12/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   12/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   12/    B954 : 0E                                  dc.b .flend-.flen
(1)   12/    B955 : 5343 5245 454E      .flen:          dc.b "SCREEN02.BIN",";1"
             B95B : 3032 2E42 494E 
             B961 : 3B31             
(1)   12/    B963 : 00                  .flend:         dc.b 0
(1)   12/    B964 :                     .fend:
(1)   13/    B964 : (MACRO)              	fs_file "SCREEN03.BIN",Md_Screen03,Md_Screen03_e
(1)   13/    B964 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   13/    B965 : 00                                  dc.b 0                                          ; zero
(1)   13/    B966 : BE00                                dc.b (MD_SCREEN03>>11&$FF),(MD_SCREEN03>>19&$FF)            ; MD_SCREEN03 sector, little
(1)   13/    B968 : 0000                                dc.b (MD_SCREEN03>>27&$FF),(MD_SCREEN03>>35&$FF)
(1)   13/    B96A : 0000 00BE                           dc.l MD_SCREEN03>>11                                  ; MD_SCREEN03 sector, big
(1)   13/    B96E : 0008                                dc.b ((MD_SCREEN03_E-MD_SCREEN03)&$FF),((MD_SCREEN03_E-MD_SCREEN03)>>8&$FF)     ; Filesize, little
(1)   13/    B970 : 0000                                dc.b ((MD_SCREEN03_E-MD_SCREEN03)>>16&$FF),((MD_SCREEN03_E-MD_SCREEN03)>>24&$FF)
(1)   13/    B972 : 0000 0800                           dc.l MD_SCREEN03_E-MD_SCREEN03                                  ; Filesize, big
(1)   13/    B976 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   13/    B977 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   13/    B97D : 00                                  dc.b 0                                          ; File flags
(1)   13/    B97E : 0000                                dc.b 0,0
(1)   13/    B980 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   13/    B982 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   13/    B984 : 0E                                  dc.b .flend-.flen
(1)   13/    B985 : 5343 5245 454E      .flen:          dc.b "SCREEN03.BIN",";1"
             B98B : 3033 2E42 494E 
             B991 : 3B31             
(1)   13/    B993 : 00                  .flend:         dc.b 0
(1)   13/    B994 :                     .fend:
(1)   14/    B994 : (MACRO)              	fs_file "SCREEN04.BIN",Md_Screen04,Md_Screen04_e
(1)   14/    B994 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   14/    B995 : 00                                  dc.b 0                                          ; zero
(1)   14/    B996 : BF00                                dc.b (MD_SCREEN04>>11&$FF),(MD_SCREEN04>>19&$FF)            ; MD_SCREEN04 sector, little
(1)   14/    B998 : 0000                                dc.b (MD_SCREEN04>>27&$FF),(MD_SCREEN04>>35&$FF)
(1)   14/    B99A : 0000 00BF                           dc.l MD_SCREEN04>>11                                  ; MD_SCREEN04 sector, big
(1)   14/    B99E : 0008                                dc.b ((MD_SCREEN04_E-MD_SCREEN04)&$FF),((MD_SCREEN04_E-MD_SCREEN04)>>8&$FF)     ; Filesize, little
(1)   14/    B9A0 : 0000                                dc.b ((MD_SCREEN04_E-MD_SCREEN04)>>16&$FF),((MD_SCREEN04_E-MD_SCREEN04)>>24&$FF)
(1)   14/    B9A2 : 0000 0800                           dc.l MD_SCREEN04_E-MD_SCREEN04                                  ; Filesize, big
(1)   14/    B9A6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   14/    B9A7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   14/    B9AD : 00                                  dc.b 0                                          ; File flags
(1)   14/    B9AE : 0000                                dc.b 0,0
(1)   14/    B9B0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   14/    B9B2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   14/    B9B4 : 0E                                  dc.b .flend-.flen
(1)   14/    B9B5 : 5343 5245 454E      .flen:          dc.b "SCREEN04.BIN",";1"
             B9BB : 3034 2E42 494E 
             B9C1 : 3B31             
(1)   14/    B9C3 : 00                  .flend:         dc.b 0
(1)   14/    B9C4 :                     .fend:
(1)   15/    B9C4 : (MACRO)              	fs_file "SCREEN07.BIN",Md_Screen07,Md_Screen07_e
(1)   15/    B9C4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   15/    B9C5 : 00                                  dc.b 0                                          ; zero
(1)   15/    B9C6 : C000                                dc.b (MD_SCREEN07>>11&$FF),(MD_SCREEN07>>19&$FF)            ; MD_SCREEN07 sector, little
(1)   15/    B9C8 : 0000                                dc.b (MD_SCREEN07>>27&$FF),(MD_SCREEN07>>35&$FF)
(1)   15/    B9CA : 0000 00C0                           dc.l MD_SCREEN07>>11                                  ; MD_SCREEN07 sector, big
(1)   15/    B9CE : 0010                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>8&$FF)     ; Filesize, little
(1)   15/    B9D0 : 0000                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)>>16&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>24&$FF)
(1)   15/    B9D2 : 0000 1000                           dc.l MD_SCREEN07_E-MD_SCREEN07                                  ; Filesize, big
(1)   15/    B9D6 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   15/    B9D7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   15/    B9DD : 00                                  dc.b 0                                          ; File flags
(1)   15/    B9DE : 0000                                dc.b 0,0
(1)   15/    B9E0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   15/    B9E2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   15/    B9E4 : 0E                                  dc.b .flend-.flen
(1)   15/    B9E5 : 5343 5245 454E      .flen:          dc.b "SCREEN07.BIN",";1"
             B9EB : 3037 2E42 494E 
             B9F1 : 3B31             
(1)   15/    B9F3 : 00                  .flend:         dc.b 0
(1)   15/    B9F4 :                     .fend:
(1)   16/    B9F4 : (MACRO)              	fs_file "BNK_MAIN.BIN",DATA_BANK0,DATA_BANK0_e
(1)   16/    B9F4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   16/    B9F5 : 00                                  dc.b 0                                          ; zero
(1)   16/    B9F6 : C200                                dc.b (DATA_BANK0>>11&$FF),(DATA_BANK0>>19&$FF)            ; DATA_BANK0 sector, little
(1)   16/    B9F8 : 0000                                dc.b (DATA_BANK0>>27&$FF),(DATA_BANK0>>35&$FF)
(1)   16/    B9FA : 0000 00C2                           dc.l DATA_BANK0>>11                                  ; DATA_BANK0 sector, big
(1)   16/    B9FE : 0090                                dc.b ((DATA_BANK0_E-DATA_BANK0)&$FF),((DATA_BANK0_E-DATA_BANK0)>>8&$FF)     ; Filesize, little
(1)   16/    BA00 : 0200                                dc.b ((DATA_BANK0_E-DATA_BANK0)>>16&$FF),((DATA_BANK0_E-DATA_BANK0)>>24&$FF)
(1)   16/    BA02 : 0002 9000                           dc.l DATA_BANK0_E-DATA_BANK0                                  ; Filesize, big
(1)   16/    BA06 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   16/    BA07 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   16/    BA0D : 00                                  dc.b 0                                          ; File flags
(1)   16/    BA0E : 0000                                dc.b 0,0
(1)   16/    BA10 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   16/    BA12 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   16/    BA14 : 0E                                  dc.b .flend-.flen
(1)   16/    BA15 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MAIN.BIN",";1"
             BA1B : 494E 2E42 494E 
             BA21 : 3B31             
(1)   16/    BA23 : 00                  .flend:         dc.b 0
(1)   16/    BA24 :                     .fend:
(1)   17/    BA24 : (MACRO)              	fs_file "BNK_MARS.BIN",DATA_BANK1,DATA_BANK1_e
(1)   17/    BA24 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   17/    BA25 : 00                                  dc.b 0                                          ; zero
(1)   17/    BA26 : 1401                                dc.b (DATA_BANK1>>11&$FF),(DATA_BANK1>>19&$FF)            ; DATA_BANK1 sector, little
(1)   17/    BA28 : 0000                                dc.b (DATA_BANK1>>27&$FF),(DATA_BANK1>>35&$FF)
(1)   17/    BA2A : 0000 0114                           dc.l DATA_BANK1>>11                                  ; DATA_BANK1 sector, big
(1)   17/    BA2E : 0080                                dc.b ((DATA_BANK1_E-DATA_BANK1)&$FF),((DATA_BANK1_E-DATA_BANK1)>>8&$FF)     ; Filesize, little
(1)   17/    BA30 : 0100                                dc.b ((DATA_BANK1_E-DATA_BANK1)>>16&$FF),((DATA_BANK1_E-DATA_BANK1)>>24&$FF)
(1)   17/    BA32 : 0001 8000                           dc.l DATA_BANK1_E-DATA_BANK1                                  ; Filesize, big
(1)   17/    BA36 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   17/    BA37 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   17/    BA3D : 00                                  dc.b 0                                          ; File flags
(1)   17/    BA3E : 0000                                dc.b 0,0
(1)   17/    BA40 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   17/    BA42 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   17/    BA44 : 0E                                  dc.b .flend-.flen
(1)   17/    BA45 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MARS.BIN",";1"
             BA4B : 5253 2E42 494E 
             BA51 : 3B31             
(1)   17/    BA53 : 00                  .flend:         dc.b 0
(1)   17/    BA54 :                     .fend:
(1)   18/    BA54 : (MACRO)              	fs_file "STAMPS_0.BIN",DATA_BNKSTAMP,DATA_BNKSTAMP_e
(1)   18/    BA54 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   18/    BA55 : 00                                  dc.b 0                                          ; zero
(1)   18/    BA56 : 4401                                dc.b (DATA_BNKSTAMP>>11&$FF),(DATA_BNKSTAMP>>19&$FF)            ; DATA_BNKSTAMP sector, little
(1)   18/    BA58 : 0000                                dc.b (DATA_BNKSTAMP>>27&$FF),(DATA_BNKSTAMP>>35&$FF)
(1)   18/    BA5A : 0000 0144                           dc.l DATA_BNKSTAMP>>11                                  ; DATA_BNKSTAMP sector, big
(1)   18/    BA5E : 0068                                dc.b ((DATA_BNKSTAMP_E-DATA_BNKSTAMP)&$FF),((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>8&$FF)     ; Filesize, little
(1)   18/    BA60 : 0000                                dc.b ((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>16&$FF),((DATA_BNKSTAMP_E-DATA_BNKSTAMP)>>24&$FF)
(1)   18/    BA62 : 0000 6800                           dc.l DATA_BNKSTAMP_E-DATA_BNKSTAMP                                  ; Filesize, big
(1)   18/    BA66 : 7D                                  dc.b (2024-1900)+1                              ; Year
(1)   18/    BA67 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   18/    BA6D : 00                                  dc.b 0                                          ; File flags
(1)   18/    BA6E : 0000                                dc.b 0,0
(1)   18/    BA70 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   18/    BA72 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   18/    BA74 : 0E                                  dc.b .flend-.flen
(1)   18/    BA75 : 5354 414D 5053      .flen:          dc.b "STAMPS_0.BIN",";1"
             BA7B : 5F30 2E42 494E 
             BA81 : 3B31             
(1)   18/    BA83 : 00                  .flend:         dc.b 0
(1)   18/    BA84 :                     .fend:
(1)   19/    BA84 :                     
     292/    BA84 :                     	; ******
     293/    BA84 : (MACRO)              		fs_end
     293/    BA84 : 00                                  dc.b 0
     293/    BA85 :                                     align $800                      ; Filler sector
     294/    C000 :                     IsoFileList_e:
     296/    C000 :                     
     297/    C000 :                     ; ===========================================================================
     298/    C000 :                     ; --------------------------------------------------------
     299/    C000 :                     ; Z80 driver include
     300/    C000 :                     ;
     301/    C000 :                     ; SCD/CD32X: Stored on DISC
     302/    C000 :                     ; --------------------------------------------------------
     303/    C000 :                     
     305/    C000 :                     		align $800
     306/    C000 :                     Z80_CODE_FILE:
     307/  200000 :                     		phase sysmcd_wram
     311/  200000 :                     Z80_CODE:
     315/  200000 :                     		include "sound/driver/gema_zdrv.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; -------------------------------------------------------------------
(1)    3/  200000 :                     ; GEMA/Nikona Z80 code v1.0
(1)    4/  200000 :                     ; -------------------------------------------------------------------
(1)    5/  200000 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =8H                  MAX_TRFRPZ	equ 8		; !! Max transferRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** LIMTED to 32 ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of buffers
(1)   19/       0 :                     
(1)   20/       0 : =18H                 MAX_TBLSIZE	equ 18h		; Maximum size for chip tables (MINIMUM: 18h)
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 : =10H                 MAX_ZCMND	equ 10h		; Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   23/       0 :                     
(1)   24/       0 : =0H                  DBUG_DAC	equ 0		; *DEBUG* Set to 1 to check the DAC playback quality
(1)   25/       0 :                     
(1)   26/       0 :                     ; --------------------------------------------------------
(1)   27/       0 :                     ; Structs
(1)   28/       0 :                     ; --------------------------------------------------------
(1)   29/       0 :                     
(1)   30/       0 :                     ; trkBuff struct
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; trk_Status: %ERP- V--0
(1)   33/       0 :                     ; E - enabled
(1)   34/       0 :                     ; R - Init|Restart track
(1)   35/       0 :                     ; P - refill-on-playback
(1)   36/       0 :                     ; V - volume change flag
(1)   37/       0 :                     ; 0 - Use global sub-beats
(1)   38/       0 : =0H                  trk_Status	equ 00h	; ** Track Status and Flags (MUST BE at 00h)
(1)   39/       0 : =1H                  trk_SeqId	equ 01h ; ** Track ID to play.
(1)   40/       0 : =2H                  trk_SetBlk	equ 02h	; ** Start on this block
(1)   41/       0 : =3H                  trk_TickSet	equ 03h	; ** Ticks for this track
(1)   42/       0 : =4H                  trk_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   43/       0 : =6H                  trk_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   44/       0 : =8H                  trk_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   45/       0 : =0AH                 trk_Read	equ 0Ah	; [W] Track current pattern read
(1)   46/       0 : =0CH                 trk_Rows	equ 0Ch	; [W] Track row counter
(1)   47/       0 : =0EH                 trk_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   48/       0 : =10H                 trk_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   49/       0 : =11H                 trk_rowPause	equ 11h	; Row-pause timer
(1)   50/       0 : =12H                 trk_TickTmr	equ 12h	; Ticks timer
(1)   51/       0 : =13H                 trk_currBlk	equ 13h	; Current block
(1)   52/       0 : =14H                 trk_Priority	equ 14h ; Priority level for this buffer
(1)   53/       0 : =15H                 trk_BankHeads	equ 15h ; Header bank
(1)   54/       0 : =16H                 trk_BankBlk	equ 16h	; Block bank
(1)   55/       0 : =17H                 trk_MaxChnl	equ 17h ; MAX channels used in this track
(1)   56/       0 : =18H                 trk_VolFdTarget	equ 18h	; Target fade volume
(1)   57/       0 : =19H                 trk_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   58/       0 : =1CH                 trk_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   59/       0 : =1FH                 trk_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   60/       0 : =22H                 trk_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   61/       0 : =25H                 trk_ChnIndx	equ 25h	; CHANNEL INDEXES START HERE
(1)   62/       0 :                     
(1)   63/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   64/       0 :                     ;
(1)   65/       0 :                     ; chnl_Flags: E0LRevin
(1)   66/       0 :                     ; 	 E - Channel is active
(1)   67/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   68/       0 :                     ; 	 e - Effect*
(1)   69/       0 :                     ; 	 v - Volume*
(1)   70/       0 :                     ; 	 i - Intrument*
(1)   71/       0 :                     ; 	 n - Note*
(1)   72/       0 : =0H                  chnl_Flags	equ 0	; Playback flags: %E0LRevin ** MUST STAY AT 0
(1)   73/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   74/       0 : =2H                  chnl_Note	equ 2	; IT Musical note or command
(1)   75/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   76/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   77/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   78/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   79/       0 : =7H                  chnl_Type	equ 7	; Impulse update bits
(1)   80/       0 :                     
(1)   81/       0 :                     
(1)   82/       0 :                     ; Table struct
(1)   83/       0 :                     
(1)   84/       0 : =0H                  ztbl_Link	equ 00h		; !! current linked channel in trkChnls
(1)   85/       0 : =2H                  ztbl_Priority	equ 02h		; !! 00h-7Fh: Priority level or 80h+chipID Silence request
(1)   86/       0 : =3H                  ztbl_Chip	equ 03h		; Chip index (YM2612: direct KEY index) *MUST BE ON THE LIST*
(1)   87/       0 : =4H                  ztbl_MasterVol	equ 04h		; MASTER volume for this channel
(1)   88/       0 : =5H                  ztbl_FreqIndx	equ 05h		; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   89/       0 : =6H                  ztbl_PitchBend	equ 06h		; Pitchbend add/sub
(1)   90/       0 : =7H                  ztbl_Volume	equ 07h		; Current Volume: 00-max
(1)   91/       0 : =9H                  ztbl_EffBuff	equ 09h		; Effect buffer
(1)   92/       0 : =0AH                 ztbl_VarT0	equ 0Ah		; !! FM ins LSB or SCD PCM panning
(1)   93/       0 : =0BH                 ztbl_VarT1	equ 0Bh		; !! FM ins MSB
(1)   94/       0 : =0CH                 ztbl_FM_alfd	equ 0Ch		; !! copy of algorithm and feedback
(1)   95/       0 : =0DH                 ztbl_FM_pmam	equ 0Dh		; !! copy of PMS, AMS (panning ignored)
(1)   96/       0 : =0EH                 ztbl_FM_lfo	equ 0Eh		; !! copy of LFO
(1)   97/       0 : =0FH                 ztbl_FM_keys	equ 0Fh		; !! Current keys
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Variables
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)  104/       0 : =0H                  zopcNop		equ 00h
(1)  105/       0 : =8H                  zopcEx		equ 08h
(1)  106/       0 : =0C9H                zopcRet		equ 0C9h
(1)  107/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  108/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  109/       0 :                     
(1)  110/       0 :                     ; PSG
(1)  111/       0 : =0H                  COM		equ 0
(1)  112/       0 : =4H                  LEV		equ 4
(1)  113/       0 : =8H                  ATK		equ 8
(1)  114/       0 : =0CH                 DKY		equ 12
(1)  115/       0 : =10H                 SLV		equ 16
(1)  116/       0 : =14H                 RRT		equ 20
(1)  117/       0 : =18H                 MODE		equ 24
(1)  118/       0 : =1CH                 DTL		equ 28
(1)  119/       0 : =20H                 DTH		equ 32
(1)  120/       0 : =24H                 ALV		equ 36
(1)  121/       0 : =28H                 FLG		equ 40
(1)  122/       0 : =2CH                 TMR		equ 44
(1)  123/       0 : =30H                 PVOL		equ 48
(1)  124/       0 : =34H                 PARP		equ 52
(1)  125/       0 : =38H                 PTMR		equ 56
(1)  126/       0 :                     
(1)  127/       0 :                     ; ====================================================================
(1)  128/       0 :                     ; --------------------------------------------------------
(1)  129/       0 :                     ; Code starts here
(1)  130/       0 :                     ; --------------------------------------------------------
(1)  131/       0 :                     
(1)  132/       0 : F3                  		di			; Disable interrupts
(1)  133/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  134/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  135/       6 : 18 48               		jr	z80_init	; Jump to z80_init
(1)  136/       8 :                     
(1)  137/       8 :                     ; --------------------------------------------------------
(1)  138/       8 :                     ; RST 8 (dac_me)
(1)  139/       8 :                     ;
(1)  140/       8 :                     ; Writes wave data to DAC using data stored
(1)  141/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  142/       8 :                     ; instructions to keep the samplerate stable.
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Input (EXX):
(1)  145/       8 :                     ;  c - WAVE buffer MSB
(1)  146/       8 :                     ; de - Pitch (xx.00)
(1)  147/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  148/       8 :                     ;
(1)  149/       8 :                     ; Uses (EXX):
(1)  150/       8 :                     ; b
(1)  151/       8 :                     ;
(1)  152/       8 :                     ; Notes:
(1)  153/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  154/       8 :                     ; DAC playback
(1)  155/       8 :                     ;
(1)  156/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  157/       8 :                     ; --------------------------------------------------------
(1)  158/       8 :                     
(1)  159/       8 :                     ; EXX set:
(1)  160/       8 :                     ; af - temporal
(1)  161/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  162/       8 :                     ; de - pitch increment
(1)  163/       8 :                     ; hl - wave buffer position 00.00h
(1)  164/       8 :                     		org 8
(1)  165/       8 : D9                  dac_me:		exx			; * flip registers <-- Changes between EXX(play) and RET(stop)
(1)  166/       9 : 08                  		ex	af,af'		; Swap af
(1)  167/       A : 45                  		ld	b,l		; Save old hl buff
(1)  168/       B : 6C                  		ld	l,h		;
(1)  169/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  170/       D : 3E 2A               		ld	a,2Ah		;
(1)  171/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  172/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  173/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  174/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  175/      17 : 68                  		ld	l,b		;
(1)  176/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  177/      19 : 08                  		ex	af,af'		; Return af
(1)  178/      1A : D9                  		exx			; * return registers
(1)  179/      1B : C9                  		ret
(1)  180/      1C :                     
(1)  181/      1C :                     ; --------------------------------------------------------
(1)  182/      1C :                     ; 1Ch - Master tracklist pointer
(1)  183/      1C :                     gemaMstrListPos:
(1)  184/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  185/      1D : 00                  		db 0
(1)  186/      1E : 00                  		db 0
(1)  187/      1F : 00                  		db 0
(1)  188/      20 :                     
(1)  189/      20 :                     ; --------------------------------------------------------
(1)  190/      20 :                     ; RST 20h (dac_me)
(1)  191/      20 :                     ; *** self-modifiable code ***
(1)  192/      20 :                     ;
(1)  193/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  194/      20 :                     ; it playing.
(1)  195/      20 :                     ; --------------------------------------------------------
(1)  196/      20 :                     
(1)  197/      20 :                     		org 20h
(1)  198/      20 : F5                  dac_fill:	push	af		; Save af <-- Changes between PUSH AF(play) and RET(stop)
(1)  199/      21 : 3A E8 1B            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  200/      24 : D9                  		exx			; * swap regs
(1)  201/      25 : AC                  		xor	h		; Grab LSB.00
(1)  202/      26 : D9                  		exx			; * swap regs
(1)  203/      27 : E6 80               		and	80h		; Check if half-bit changed
(1)  204/      29 : C4 87 13            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  205/      2C : F1                  		pop	af		; Restore af
(1)  206/      2D : C9                  		ret
(1)  207/      2E :                     
(1)  208/      2E :                     ; --------------------------------------------------------
(1)  209/      2E :                     ; 02Eh - User read/write values
(1)  210/      2E : 00                  commZWrite	db 0			; 2Eh: cmd fifo wptr (from 68k)
(1)  211/      2F : 00                  commZRomBlk	db 0			; 2Fh: 68k ROM block flag
(1)  212/      30 : 00                  cdRamLen	db 0			; 30h: Size + status flag
(1)  213/      31 : 00 00               cdRamDst	db 0,0			; 31h: ** Z80 destination
(1)  214/      33 : 00 00               cdRamSrc	db 0,0			; 33h: ** 68k 24-bit source
(1)  215/      35 : 00                  cdRamSrcB	db 0			; 35h: **
(1)  216/      36 : 00                  mcdBlock	db 0			; 36h: Flag to BLOCK PCM transfers.
(1)  217/      37 : 00                  marsBlock	db 0			; 37h: Flag to BLOCK PWM transfers.
(1)  218/      38 :                     
(1)  219/      38 :                     ; --------------------------------------------------------
(1)  220/      38 :                     ; Z80 Interrupt at 0038h
(1)  221/      38 :                     ; --------------------------------------------------------
(1)  222/      38 :                     
(1)  223/      38 :                     		org 38h				; Align 38h
(1)  224/      38 : ED 73 FB 1B         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  225/      3C : F3                  		di				; Disable interrupt
(1)  226/      3D : C9                  		ret
(1)  227/      3E :                     
(1)  228/      3E :                     ; --------------------------------------------------------
(1)  229/      3E :                     ; 03Eh - More user settings
(1)  230/      3E : 00                  palMode		db 0				; 3Eh: PAL mode flag
(1)  231/      3F : 00                  commZRead	db 0				; cmd fifo READ pointer (here)
(1)  232/      40 :                     
(1)  233/      40 :                     ; --------------------------------------------------------
(1)  234/      40 :                     ; 68K Read/Write area at 40h
(1)  235/      40 :                     ; --------------------------------------------------------
(1)  236/      40 :                     
(1)  237/      40 :                     ; 		org 40h
(1)  238/      40 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1)  239/      50 :                     
(1)  240/      50 :                     ; --------------------------------------------------------
(1)  241/      50 :                     ; Initialize
(1)  242/      50 :                     ; --------------------------------------------------------
(1)  243/      50 :                     
(1)  244/      50 :                     z80_init:
(1)  245/      50 : CD 65 10            		call	gema_init		; Init values
(1)  246/      53 : FB                  		ei
(1)  247/      54 :                     
(1)  248/      54 :                     ; --------------------------------------------------------
(1)  249/      54 :                     ; MAIN LOOP
(1)  250/      54 :                     ; --------------------------------------------------------
(1)  251/      54 :                     
(1)  252/      54 :                     drv_loop:
(1)  253/      54 : CF                  		rst	8
(1)  254/      55 : CD D1 10            		call	get_tick		; Check tick on VBlank
(1)  255/      58 : E7                  		rst	20h			; Refill wave here
(1)  256/      59 : CF                  		rst	8
(1)  257/      5A : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  258/      5C : 3A FD 1B            		ld	a,(tickCnt)		; Decrement tick counter
(1)  259/      5F : D6 01               		sub	1
(1)  260/      61 : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  261/      63 : 32 FD 1B            		ld	(tickCnt),a
(1)  262/      66 : CD AC 11            		call	chip_env		; Process PSG and YM
(1)  263/      69 : CD D1 10            		call	get_tick		; Check for another tick
(1)  264/      6C : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  265/      6E :                     .noticks:
(1)  266/      6E : 3A F8 1C            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  267/      71 : D6 01               		sub	1
(1)  268/      73 : 38 06               		jr	c,.nobeats
(1)  269/      75 : CF                  		rst	8
(1)  270/      76 : 32 F8 1C            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  271/      79 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  272/      7B :                     .nobeats:
(1)  273/      7B : CF                  		rst	8
(1)  274/      7C : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  275/      7D : B7                  		or	a
(1)  276/      7E : 28 14               		jr	z,.neither
(1)  277/      80 : 32 F4 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  278/      83 : CF                  		rst	8
(1)  279/      84 : CD D1 10            		call	get_tick
(1)  280/      87 : CD 0B 06            		call	set_chips		; Send changes to sound chips
(1)  281/      8A : CD D1 10            		call	get_tick
(1)  282/      8D : CF                  		rst	8
(1)  283/      8E : CD 37 02            		call	upd_track		; Update track data
(1)  284/      91 : CD D1 10            		call	get_tick
(1)  285/      94 :                     .neither:
(1)  286/      94 : CF                  		rst	8
(1)  288/      95 : CD BD 0F            		call	zmars_send		; External communication with CD and 32X
(1)  290/      98 : CD D1 10            		call	get_tick
(1)  291/      9B :                     .next_cmd:
(1)  292/      9B : 3A 2E 00            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  293/      9E : 47                  		ld	b,a			; are in the same spot a == b
(1)  294/      9F : 3A 3F 00            		ld	a,(commZRead)
(1)  295/      A2 : B8                  		cp	b			; If equal, loop back.
(1)  296/      A3 : 28 AF               		jr	z,drv_loop
(1)  297/      A5 : CF                  		rst	8
(1)  298/      A6 : CD BE 00            		call	.grab_arg		; Read staring flag -1
(1)  299/      A9 : FE FF               		cp	-1			; Got START -1?
(1)  300/      AB : 20 A7               		jr	nz,drv_loop		; If not, end of commands
(1)  301/      AD : CD BE 00            		call	.grab_arg		; Read command number
(1)  302/      B0 : 87                  		add	a,a			; ID * 2
(1)  303/      B1 : 21 DD 00            		ld	hl,.list		; Index-jump...
(1)  304/      B4 : 16 00               		ld	d,0
(1)  305/      B6 : 5F                  		ld	e,a
(1)  306/      B7 : 19                  		add	hl,de
(1)  307/      B8 : 7E                  		ld	a,(hl)
(1)  308/      B9 : 23                  		inc	hl
(1)  309/      BA : 66                  		ld	h,(hl)
(1)  310/      BB : CF                  		rst	8
(1)  311/      BC : 6F                  		ld	l,a
(1)  312/      BD : E9                  		jp	(hl)
(1)  313/      BE :                     
(1)  314/      BE :                     ; --------------------------------------------------------
(1)  315/      BE :                     ; Read cmd byte, auto re-rolls to 3Fh
(1)  316/      BE :                     ; --------------------------------------------------------
(1)  317/      BE :                     
(1)  318/      BE :                     .grab_arg:
(1)  319/      BE : D5                  		push	de
(1)  320/      BF : E5                  		push	hl
(1)  321/      C0 :                     .getcbytel:
(1)  322/      C0 : 3A 2E 00            		ld	a,(commZWrite)
(1)  323/      C3 : 57                  		ld	d,a
(1)  324/      C4 : CF                  		rst	8
(1)  325/      C5 : 3A 3F 00            		ld	a,(commZRead)
(1)  326/      C8 : BA                  		cp	d		; commZ R/W indexes are the same?
(1)  327/      C9 : 28 F5               		jr	z,.getcbytel	; wait until these counters change.
(1)  328/      CB : 16 00               		ld	d,0
(1)  329/      CD : 5F                  		ld	e,a
(1)  330/      CE : 21 40 00            		ld	hl,commZfifo	; Read commZ list + index
(1)  331/      D1 : 19                  		add	hl,de
(1)  332/      D2 : CF                  		rst	8
(1)  333/      D3 : 3C                  		inc	a
(1)  334/      D4 : E6 0F               		and	MAX_ZCMND-1	; ** commZ list buffer limit
(1)  335/      D6 : 32 3F 00            		ld	(commZRead),a
(1)  336/      D9 : 7E                  		ld	a,(hl)		; a - got this byte from the buffer
(1)  337/      DA : E1                  		pop	hl
(1)  338/      DB : D1                  		pop	de
(1)  339/      DC : C9                  		ret
(1)  340/      DD :                     
(1)  341/      DD :                     ; --------------------------------------------------------
(1)  342/      DD :                     
(1)  343/      DD :                     .list:
(1)  344/      DD : ED 00               		dw .cmnd_0		; 00h - TESTING
(1)  345/      DF : F0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  346/      E1 : 09 01               		dw .cmnd_2		; 02h - Play by track number
(1)  347/      E3 : 43 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  348/      E5 : ED 00               		dw .cmnd_0		; 04h - **
(1)  349/      E7 : 81 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  350/      E9 : BA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  351/      EB : F3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  352/      ED :                     
(1)  353/      ED :                     ; --------------------------------------------------------
(1)  354/      ED :                     ; Command 00h
(1)  355/      ED :                     ;
(1)  356/      ED :                     ; Reserved for TESTING purposes.
(1)  357/      ED :                     ; --------------------------------------------------------
(1)  358/      ED :                     
(1)  359/      ED :                     .cmnd_0:
(1)  360/      ED : C3 9B 00            		jp	.next_cmd
(1)  361/      F0 :                     
(1)  362/      F0 :                     ; --------------------------------------------------------
(1)  363/      F0 :                     ; Command 01h:
(1)  364/      F0 :                     ;
(1)  365/      F0 :                     ; Set the Track MASTER-list.
(1)  366/      F0 :                     ; --------------------------------------------------------
(1)  367/      F0 :                     
(1)  368/      F0 :                     .cmnd_1:
(1)  369/      F0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  370/      F3 : CD BE 00            		call	.grab_arg		; $000000xx
(1)  371/      F6 : 77                  		ld	(hl),a
(1)  372/      F7 : 2B                  		dec	hl
(1)  373/      F8 : CD BE 00            		call	.grab_arg		; $0000xx00
(1)  374/      FB : 77                  		ld	(hl),a
(1)  375/      FC : 2B                  		dec	hl
(1)  376/      FD : CD BE 00            		call	.grab_arg		; $00xx0000
(1)  377/     100 : 77                  		ld	(hl),a
(1)  378/     101 : 2B                  		dec	hl
(1)  379/     102 : CD BE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  380/     105 : 77                  		ld	(hl),a
(1)  381/     106 : C3 9B 00            		jp	.next_cmd
(1)  382/     109 :                     
(1)  383/     109 :                     ; --------------------------------------------------------
(1)  384/     109 :                     ; Command 02h:
(1)  385/     109 :                     ;
(1)  386/     109 :                     ; Make new track by sequence number
(1)  387/     109 :                     ;
(1)  388/     109 :                     ; Arguments:
(1)  389/     109 :                     ; SeqID,BlockPos,SlotIndex(If -1 autofill)
(1)  390/     109 :                     ; --------------------------------------------------------
(1)  391/     109 :                     
(1)  392/     109 :                     .cmnd_2:
(1)  393/     109 : CD BE 00            		call	.grab_arg		; d1: Sequence ID
(1)  394/     10C : 4F                  		ld	c,a			; copy as c
(1)  395/     10D : CD BE 00            		call	.grab_arg		; d2: Block from
(1)  396/     110 : 47                  		ld	b,a			; copy as b
(1)  397/     111 : CF                  		rst	8
(1)  398/     112 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  399/     115 : FD 21 82 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  400/     119 : B7                  		or	a
(1)  401/     11A : FA 29 01            		jp	m,.srch_mode
(1)  402/     11D :                     ; 		cp	-1			; if d2 == -1, search
(1)  403/     11D :                     ; 		jr	z,.srch_mode
(1)  404/     11D : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  405/     11F : D2 9B 00            		jp	nc,.next_cmd
(1)  406/     122 : CF                  		rst	8
(1)  407/     123 : CD 11 02            		call	.cmnd_rdslot
(1)  408/     126 : C3 38 01            		jp	.wrtto_slot
(1)  409/     129 :                     ; -1
(1)  410/     129 :                     .srch_mode:
(1)  411/     129 : CD 24 02            		call	.srch_slot
(1)  412/     12C : FE FF               		cp	-1
(1)  413/     12E : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  414/     131 : CB 7E               		bit	7,(hl)			; Is this track free?
(1)  415/     133 : CA 38 01            		jp	z,.wrtto_slot
(1)  416/     136 : 18 F1               		jr	.srch_mode
(1)  417/     138 :                     .wrtto_slot:
(1)  418/     138 : 36 C0               		ld	(hl),0C0h		; ** Write trk_Status flags: Enable+Restart
(1)  419/     13A : 23                  		inc	hl
(1)  420/     13B : CF                  		rst	8
(1)  421/     13C : 71                  		ld	(hl),c			; ** write trk_SeqId
(1)  422/     13D : 23                  		inc	hl
(1)  423/     13E : 70                  		ld	(hl),b			; ** write trk_SetBlk
(1)  424/     13F : 79                  		ld	a,c
(1)  425/     140 : C3 9B 00            		jp	.next_cmd
(1)  426/     143 :                     
(1)  427/     143 :                     ; --------------------------------------------------------
(1)  428/     143 :                     ; Command 03h:
(1)  429/     143 :                     ;
(1)  430/     143 :                     ; Stop track with the same sequence number
(1)  431/     143 :                     ;
(1)  432/     143 :                     ; SeqID,SlotIndex(-1 allslots)
(1)  433/     143 :                     ; --------------------------------------------------------
(1)  434/     143 :                     
(1)  435/     143 :                     .cmnd_3:
(1)  436/     143 : CD BE 00            		call	.grab_arg			; d1: Sequence ID
(1)  437/     146 : 4F                  		ld	c,a				; copy to c
(1)  438/     147 : CD BE 00            		call	.grab_arg			; d0: Slot index
(1)  439/     14A : FD 21 82 1F         		ld	iy,nikona_BuffList		; iy - Slot buffer list
(1)  440/     14E : B7                  		or	a
(1)  441/     14F : FA 61 01            		jp	m,.srch_del
(1)  442/     152 :                     ; 		cp	-1				; if -1, search for all with same ID
(1)  443/     152 :                     ; 		jr	z,.srch_del
(1)  444/     152 : FE 03               		cp	MAX_SLOTS			; If maxed out slots
(1)  445/     154 : D2 9B 00            		jp	nc,.next_cmd
(1)  446/     157 : CF                  		rst	8
(1)  447/     158 : CD 11 02            		call	.cmnd_rdslot
(1)  448/     15B : CD 6E 01            		call	.wrtto_del
(1)  449/     15E : C3 9B 00            		jp	.next_cmd
(1)  450/     161 :                     ; -1
(1)  451/     161 :                     .srch_del:
(1)  452/     161 : CD 24 02            		call	.srch_slot
(1)  453/     164 : FE FF               		cp	-1
(1)  454/     166 : CA 9B 00            		jp	z,.next_cmd
(1)  455/     169 : CD 6E 01            		call	.wrtto_del
(1)  456/     16C : 18 F3               		jr	.srch_del
(1)  457/     16E :                     .wrtto_del:
(1)  458/     16E : CB 7E               		bit	7,(hl)
(1)  459/     170 : C8                  		ret	z
(1)  460/     171 : CB 79               		bit	7,c		; <-- lazy -1 check
(1)  461/     173 : 20 05               		jr	nz,.del_all
(1)  462/     175 : DD 7E 01            		ld	a,(ix+trk_SeqId)
(1)  463/     178 : B9                  		cp	c
(1)  464/     179 : C0                  		ret	nz
(1)  465/     17A :                     .del_all:
(1)  466/     17A : 36 FF               		ld	(hl),-1		; -1 flag, stop channel and clear slot
(1)  467/     17C : 23                  		inc	hl
(1)  468/     17D : 36 FF               		ld	(hl),-1		; Reset seqId
(1)  469/     17F : CF                  		rst	8
(1)  470/     180 : C9                  		ret
(1)  471/     181 :                     
(1)  472/     181 :                     ; --------------------------------------------------------
(1)  473/     181 :                     ; Command 05h:
(1)  474/     181 :                     ;
(1)  475/     181 :                     ; Fade volume (FadeIn/FadeOut)
(1)  476/     181 :                     ;
(1)  477/     181 :                     ; Arguments:
(1)  478/     181 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  479/     181 :                     ; --------------------------------------------------------
(1)  480/     181 :                     
(1)  481/     181 :                     .cmnd_5:
(1)  482/     181 : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  483/     184 : 4F                  		ld	c,a			; copy to c
(1)  484/     185 : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  485/     188 : FD 21 82 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  486/     18C : B7                  		or	a
(1)  487/     18D : FA 9F 01            		jp	m,.srch_fvol
(1)  488/     190 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  489/     190 :                     ; 		jr	z,.srch_fvol
(1)  490/     190 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  491/     192 : D2 9B 00            		jp	nc,.next_cmd
(1)  492/     195 : CF                  		rst	8
(1)  493/     196 : CD 11 02            		call	.cmnd_rdslot
(1)  494/     199 : CD AC 01            		call	.wrtto_fvol
(1)  495/     19C : C3 9B 00            		jp	.next_cmd
(1)  496/     19F :                     ; -1
(1)  497/     19F :                     .srch_fvol:
(1)  498/     19F : CD 24 02            		call	.srch_slot
(1)  499/     1A2 : FE FF               		cp	-1
(1)  500/     1A4 : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  501/     1A7 : CD AC 01            		call	.wrtto_fvol
(1)  502/     1AA : 18 F3               		jr	.srch_fvol
(1)  503/     1AC :                     .wrtto_fvol:
(1)  504/     1AC : CB 7E               		bit	7,(hl)			; Active?
(1)  505/     1AE : C8                  		ret	z
(1)  506/     1AF : CB DE               		set	3,(hl)			; Volume update flag
(1)  507/     1B1 : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  508/     1B4 : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  509/     1B8 : CF                  		rst	8
(1)  510/     1B9 : C9                  		ret
(1)  511/     1BA :                     
(1)  512/     1BA :                     ; --------------------------------------------------------
(1)  513/     1BA :                     ; Command 06h:
(1)  514/     1BA :                     ;
(1)  515/     1BA :                     ; Set track's master volume
(1)  516/     1BA :                     ;
(1)  517/     1BA :                     ; Arguments:
(1)  518/     1BA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  519/     1BA :                     ; --------------------------------------------------------
(1)  520/     1BA :                     
(1)  521/     1BA :                     .cmnd_6:
(1)  522/     1BA : CD BE 00            		call	.grab_arg		; d1: Master volume
(1)  523/     1BD : 4F                  		ld	c,a			; copy to c
(1)  524/     1BE : CD BE 00            		call	.grab_arg		; d0: Slot index
(1)  525/     1C1 : FD 21 82 1F         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  526/     1C5 : B7                  		or	a
(1)  527/     1C6 : FA D8 01            		jp	m,.srch_vol
(1)  528/     1C9 :                     ; 		cp	-1			; if -1, search for all with same ID
(1)  529/     1C9 :                     ; 		jr	z,.srch_vol
(1)  530/     1C9 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  531/     1CB : D2 9B 00            		jp	nc,.next_cmd
(1)  532/     1CE : CF                  		rst	8
(1)  533/     1CF : CD 11 02            		call	.cmnd_rdslot
(1)  534/     1D2 : CD E5 01            		call	.wrtto_vol
(1)  535/     1D5 : C3 9B 00            		jp	.next_cmd
(1)  536/     1D8 :                     ; -1
(1)  537/     1D8 :                     .srch_vol:
(1)  538/     1D8 : CD 24 02            		call	.srch_slot
(1)  539/     1DB : FE FF               		cp	-1
(1)  540/     1DD : CA 9B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  541/     1E0 : CD E5 01            		call	.wrtto_vol
(1)  542/     1E3 : 18 F3               		jr	.srch_vol
(1)  543/     1E5 :                     .wrtto_vol:
(1)  544/     1E5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  545/     1E7 : DD 71 0E            		ld	(ix+trk_VolMaster),c
(1)  546/     1EA : DD 71 18            		ld	(ix+trk_VolFdTarget),c
(1)  547/     1ED : DD 36 0F 00         		ld	(ix+trk_VolMaster+1),0
(1)  548/     1F1 : CF                  		rst	8
(1)  549/     1F2 : C9                  		ret
(1)  550/     1F3 :                     
(1)  551/     1F3 :                     ; --------------------------------------------------------
(1)  552/     1F3 :                     ; Command 07h:
(1)  553/     1F3 :                     ;
(1)  554/     1F3 :                     ; Set global sub-beats
(1)  555/     1F3 :                     ; --------------------------------------------------------
(1)  556/     1F3 :                     
(1)  557/     1F3 :                     .cmnd_7:
(1)  558/     1F3 : CD BE 00            		call	.grab_arg	; d0.w: $00xx
(1)  559/     1F6 : 4F                  		ld	c,a
(1)  560/     1F7 : CD BE 00            		call	.grab_arg	; d0.w: $xx00
(1)  561/     1FA : 67                  		ld	h,a
(1)  562/     1FB : 69                  		ld	l,c
(1)  563/     1FC : 3A 3E 00            		ld	a,(palMode)
(1)  564/     1FF : B7                  		or	a
(1)  565/     200 : 28 04               		jr	z,.not_pal
(1)  566/     202 : 11 28 00            		ld	de,40
(1)  567/     205 : 19                  		add	hl,de
(1)  568/     206 :                     .not_pal:
(1)  569/     206 : 7C                  		ld	a,h
(1)  570/     207 : 32 FA 1C            		ld	(sbeatPtck+1),a
(1)  571/     20A : 7D                  		ld	a,l
(1)  572/     20B : 32 F9 1C            		ld	(sbeatPtck),a
(1)  573/     20E : C3 9B 00            		jp	.next_cmd
(1)  574/     211 :                     
(1)  575/     211 :                     ; --------------------------------------------------------
(1)  576/     211 :                     ; Shared subs
(1)  577/     211 :                     ; --------------------------------------------------------
(1)  578/     211 :                     
(1)  579/     211 :                     .cmnd_rdslot:
(1)  580/     211 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  581/     212 : 87                  		add	a,a			; id*8
(1)  582/     213 : 87                  		add	a,a
(1)  583/     214 : 16 00               		ld	d,0
(1)  584/     216 : 5F                  		ld	e,a
(1)  585/     217 : FD 19               		add	iy,de
(1)  586/     219 : FD 7E 00            		ld	a,(iy)
(1)  587/     21C : FD 66 01            		ld	h,(iy+1)
(1)  588/     21F : 6F                  		ld	l,a
(1)  589/     220 : E5                  		push	hl
(1)  590/     221 : DD E1               		pop	ix
(1)  591/     223 : C9                  		ret
(1)  592/     224 :                     
(1)  593/     224 :                     ; ------------------------------------------------
(1)  594/     224 :                     ; iy - nikona_BuffList
(1)  595/     224 :                     
(1)  596/     224 :                     .srch_slot:
(1)  597/     224 : FD 7E 00            		ld	a,(iy)
(1)  598/     227 : FE FF               		cp	-1			; End of list?
(1)  599/     229 : C8                  		ret	z
(1)  600/     22A : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  601/     22D : 6F                  		ld	l,a
(1)  602/     22E : E5                  		push	hl
(1)  603/     22F : DD E1               		pop	ix
(1)  604/     231 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  605/     234 : FD 19               		add	iy,de			; Next entry for later
(1)  606/     236 : C9                  		ret
(1)  607/     237 :                     
(1)  608/     237 :                     ; ====================================================================
(1)  609/     237 :                     ; ----------------------------------------------------------------
(1)  610/     237 :                     ; MAIN Playback section
(1)  611/     237 :                     ; ----------------------------------------------------------------
(1)  612/     237 :                     
(1)  613/     237 :                     ; --------------------------------------------------------
(1)  614/     237 :                     ; Read mini-impulse-tracker data
(1)  615/     237 :                     ; --------------------------------------------------------
(1)  616/     237 :                     
(1)  617/     237 :                     upd_track:
(1)  618/     237 : E7                  		rst	20h			; Refill wave
(1)  619/     238 : CD D1 10            		call	get_tick		; Check for tick flag
(1)  620/     23B :                     	; ** MANUAL BUFF READ **
(1)  621/     23B : FD 21 F3 17         		ld	iy,trkBuff_0
(1)  622/     23F : CD 4F 02            		call	.read_track
(1)  623/     242 : CF                  		rst	8
(1)  624/     243 : FD 21 32 18         		ld	iy,trkBuff_1
(1)  625/     247 : CD 4F 02            		call	.read_track
(1)  626/     24A : FD 21 71 18         		ld	iy,trkBuff_2
(1)  627/     24E : CF                  		rst	8
(1)  628/     24F :                     
(1)  629/     24F :                     ; ----------------------------------------
(1)  630/     24F :                     ; iy - Track buffer
(1)  631/     24F :                     ; ----------------------------------------
(1)  632/     24F :                     
(1)  633/     24F :                     .read_track:
(1)  634/     24F :                     ; 		ld	l,(iy)			; hl - current track slot
(1)  635/     24F :                     ; 		ld	h,(iy+1)
(1)  636/     24F : CF                  		rst	8
(1)  637/     250 :                     ; 		push	hl
(1)  638/     250 :                     ; 		pop	iy			; change iy to hl
(1)  639/     250 : FD 46 00            		ld	b,(iy+trk_Status)	; b - Track status and settings
(1)  640/     253 : CB 78               		bit	7,b			; bit7: Track active?
(1)  641/     255 : C8                  		ret	z			; Return if not.
(1)  642/     256 : 78                  		ld	a,b
(1)  643/     257 : FE FF               		cp	-1			; Flag is -1?
(1)  644/     259 : C8                  		ret	z			; Return if mid-flag
(1)  645/     25A : CF                  		rst	8
(1)  646/     25B :                     	; ----------------------------------------
(1)  647/     25B :                     	; Track volume changes
(1)  648/     25B : FD 6E 0F            		ld	l,(iy+trk_VolMaster+1)
(1)  649/     25E : FD 66 0E            		ld	h,(iy+trk_VolMaster)
(1)  650/     261 : FD 4E 18            		ld	c,(iy+trk_VolFdTarget)
(1)  651/     264 : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  652/     267 : 79                  		ld	a,c
(1)  653/     268 : BC                  		cp	h
(1)  654/     269 : 28 1E               		jr	z,.keep_vol
(1)  655/     26B : 30 06               		jr	nc,.fade_out
(1)  656/     26D : 11 80 FF            		ld	de,-80h
(1)  657/     270 : 19                  		add	hl,de
(1)  658/     271 : 18 0C               		jr	.too_much
(1)  659/     273 :                     .fade_out:
(1)  660/     273 : 19                  		add	hl,de
(1)  661/     274 : CF                  		rst	8
(1)  662/     275 : 7C                  		ld	a,h
(1)  663/     276 : B9                  		cp	c
(1)  664/     277 : 38 06               		jr	c,.too_much
(1)  665/     279 : 61                  		ld	h,c
(1)  666/     27A : 2E 00               		ld	l,0
(1)  667/     27C : FD 71 18            		ld	(iy+trk_VolFdTarget),c
(1)  668/     27F :                     .too_much:
(1)  669/     27F : FD CB 00 DE         		set	3,(iy+trk_Status)	; Volume update flag
(1)  670/     283 : FD 75 0F            		ld	(iy+trk_VolMaster+1),l
(1)  671/     286 : FD 74 0E            		ld	(iy+trk_VolMaster),h
(1)  672/     289 :                     .keep_vol:
(1)  673/     289 :                     	; ----------------------------------------
(1)  674/     289 : 3A F4 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  675/     28C : CB 40               		bit	0,b			; bit0: This track uses Beats?
(1)  676/     28E : 28 03               		jr	z,.sfxmd
(1)  677/     290 : CB 4F               		bit	1,a			; BEAT passed?
(1)  678/     292 : C8                  		ret	z			; No BEAT.
(1)  679/     293 :                     .sfxmd:
(1)  680/     293 : CB 47               		bit	0,a			; TICK passed?
(1)  681/     295 : C8                  		ret	z			; No TICK.
(1)  682/     296 : CF                  		rst	8
(1)  683/     297 :                     	; ----------------------------------------
(1)  684/     297 :                     	; Start reading notes
(1)  685/     297 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  686/     299 : C4 21 05            		call	nz,.first_fill
(1)  687/     29C : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  688/     29E : C4 1A 05            		call	nz,.effect_fill
(1)  689/     2A1 : FD 7E 12            		ld	a,(iy+trk_TickTmr)	; TICK ex-timer for this track
(1)  690/     2A4 : 3D                  		dec	a
(1)  691/     2A5 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  692/     2A8 : B7                  		or	a			; Check a
(1)  693/     2A9 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  694/     2AA : CF                  		rst	8
(1)  695/     2AB : FD 7E 03            		ld	a,(iy+trk_TickSet)	; Set new tick timer
(1)  696/     2AE : FD 77 12            		ld	(iy+trk_TickTmr),a
(1)  697/     2B1 :                     	; ----------------------------------------
(1)  698/     2B1 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; bc - Set row counter
(1)  699/     2B4 : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  700/     2B7 : 79                  		ld	a,c			; Check rowcount
(1)  701/     2B8 : B0                  		or	b
(1)  702/     2B9 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  703/     2BB :                     	; ----------------------------------------
(1)  704/     2BB :                     	; Read next block
(1)  705/     2BB : CF                  		rst	8
(1)  706/     2BC : FD 7E 13            		ld	a,(iy+trk_currBlk)	; Next block
(1)  707/     2BF : 3C                  		inc	a
(1)  708/     2C0 : FD 77 13            		ld 	(iy+trk_currBlk),a
(1)  709/     2C3 : CD 32 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  710/     2C6 : FE FF               		cp	-1			; Track finished?
(1)  711/     2C8 : C8                  		ret	z
(1)  712/     2C9 : FD 4E 0C            		ld	c,(iy+trk_Rows)		; Set new rowcount to bc
(1)  713/     2CC : FD 46 0D            		ld	b,(iy+(trk_Rows+1))
(1)  714/     2CF :                     	; ----------------------------------------
(1)  715/     2CF :                     	; bc - Row count
(1)  716/     2CF :                     .row_active:
(1)  717/     2CF : CF                  		rst	8
(1)  718/     2D0 : FD 6E 0A            		ld	l,(iy+trk_Read)		; hl - CURRENT pattern to read
(1)  719/     2D3 : FD 66 0B            		ld	h,(iy+((trk_Read+1)))
(1)  720/     2D6 :                     
(1)  721/     2D6 :                     ; --------------------------------
(1)  722/     2D6 :                     ; Main read-loop
(1)  723/     2D6 :                     ; --------------------------------
(1)  724/     2D6 :                     
(1)  725/     2D6 :                     .next_note:
(1)  726/     2D6 : FD 7E 11            		ld	a,(iy+trk_rowPause)	; Check rowtimer
(1)  727/     2D9 : B7                  		or	a
(1)  728/     2DA : 20 16               		jr	nz,.decrow
(1)  729/     2DC : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  730/     2DD : B7                  		or	a
(1)  731/     2DE : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  732/     2E0 : FA FD 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  733/     2E3 : FD 77 11            		ld	(iy+trk_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  734/     2E6 :                     
(1)  735/     2E6 :                     ; --------------------------------
(1)  736/     2E6 :                     ; Exit
(1)  737/     2E6 :                     ; --------------------------------
(1)  738/     2E6 :                     
(1)  739/     2E6 :                     .exit:
(1)  740/     2E6 : CF                  		rst	8
(1)  741/     2E7 : CD FA 03            		call	.inc_cpatt		; * Increment patt pos
(1)  742/     2EA : FD 75 0A            		ld	(iy+trk_Read),l		; Update READ location
(1)  743/     2ED : FD 74 0B            		ld	(iy+((trk_Read+1))),h
(1)  744/     2F0 : 18 03               		jr	.decrow_e
(1)  745/     2F2 :                     .decrow:
(1)  746/     2F2 : FD 35 11            		dec	(iy+trk_rowPause)	; Decrement row-pause timer
(1)  747/     2F5 :                     .decrow_e:
(1)  748/     2F5 : 0B                  		dec	bc			; Decrement rowcount
(1)  749/     2F6 : FD 71 0C            		ld	(iy+trk_Rows),c		; Write last row to memory
(1)  750/     2F9 : FD 70 0D            		ld	(iy+(trk_Rows+1)),b
(1)  751/     2FC : C9                  		ret	; Exit.
(1)  752/     2FD :                     
(1)  753/     2FD :                     ; --------------------------------
(1)  754/     2FD :                     ; New note request
(1)  755/     2FD :                     ;
(1)  756/     2FD :                     ; a - %1tcccccc
(1)  757/     2FD :                     ;   | t - next byte has new type
(1)  758/     2FD :                     ;   | c - channel
(1)  759/     2FD :                     ; --------------------------------
(1)  760/     2FD :                     
(1)  761/     2FD :                     .has_note:
(1)  762/     2FD : CF                  		rst	8
(1)  763/     2FE : C5                  		push	bc			; Save rowcount
(1)  764/     2FF : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  765/     300 : CD FA 03            		call	.inc_cpatt		; * Increment patt pos
(1)  766/     303 : E5                  		push	hl			; Save hl patt pos
(1)  767/     304 : FD E5               		push	iy
(1)  768/     306 : E1                  		pop	hl
(1)  769/     307 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels buffer
(1)  770/     30B : 11 25 00            		ld	de,trk_ChnIndx		; <-- this clears d
(1)  771/     30E : CF                  		rst	8
(1)  772/     30F : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  773/     310 : 79                  		ld	a,c			; Get patt note position
(1)  774/     311 : E6 1F               		and	00011111b		; Filter index bits
(1)  775/     313 : 5F                  		ld	e,a			; Save as e
(1)  776/     314 : 19                  		add	hl,de			; Increment more by this pos
(1)  777/     315 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  778/     316 : B7                  		or	a
(1)  779/     317 : 28 0A               		jr	z,.srch_new		; If == 0, new index
(1)  780/     319 : E6 1F               		and	00011111b		; If already used, read that channel
(1)  781/     31B : 87                  		add	a,a
(1)  782/     31C : 87                  		add	a,a
(1)  783/     31D : 87                  		add	a,a
(1)  784/     31E : 5F                  		ld	e,a
(1)  785/     31F : DD 19               		add	ix,de
(1)  786/     321 : 18 2B               		jr	.cont_chnl
(1)  787/     323 :                     
(1)  788/     323 :                     ; Make NEW channel
(1)  789/     323 :                     ; ix - channel list start
(1)  790/     323 :                     .srch_new:
(1)  791/     323 : CF                  		rst	8
(1)  792/     324 : 06 1F               		ld	b,MAX_TRKCHN-1	; Max channels to check - 1
(1)  793/     326 : 16 00               		ld	d,0		; Reset out index
(1)  794/     328 :                     .next_chnl:
(1)  795/     328 : DD 7E 00            		ld	a,(ix)		; Read chnl_Flags
(1)  796/     32B : B7                  		or	a		; If plus, track channel is free
(1)  797/     32C : F2 43 03            		jp	p,.chnl_free
(1)  798/     32F : DD 23               		inc	ix		; Search next channel, increment by 8
(1)  799/     331 : DD 23               		inc	ix
(1)  800/     333 : DD 23               		inc	ix
(1)  801/     335 : DD 23               		inc	ix
(1)  802/     337 : CF                  		rst	8
(1)  803/     338 : DD 23               		inc	ix
(1)  804/     33A : DD 23               		inc	ix
(1)  805/     33C : DD 23               		inc	ix
(1)  806/     33E : DD 23               		inc	ix
(1)  807/     340 : 14                  		inc	d		; Increment out index
(1)  808/     341 : 10 E5               		djnz	.next_chnl
(1)  809/     343 :                     .chnl_free:
(1)  810/     343 : CF                  		rst	8
(1)  811/     344 : 7A                  		ld	a,d			; Read index we got
(1)  812/     345 : E6 1F               		and	00011111b		; Filter bits
(1)  813/     347 : F6 80               		or	10000000b		; + set as used
(1)  814/     349 : 77                  		ld	(hl),a			; Write index slot
(1)  815/     34A : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  816/     34E :                     .cont_chnl:
(1)  817/     34E :                     
(1)  818/     34E : E1                  		pop	hl			; Recover patt pos
(1)  819/     34F :                     	; ix - current channel
(1)  820/     34F : CF                  		rst	8
(1)  821/     350 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  822/     353 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  823/     355 : 28 08               		jr	z,.old_type
(1)  824/     357 : 7E                  		ld	a,(hl)
(1)  825/     358 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  826/     35B : 47                  		ld	b,a			; Set to b
(1)  827/     35C : CD FA 03            		call	.inc_cpatt		; Next patt pos
(1)  828/     35F :                     .old_type:
(1)  829/     35F :                     	; b - evinEVIN
(1)  830/     35F :                     	;     E-effect/V-volume/I-instrument/N-note
(1)  831/     35F :                     	;     evin: byte is already stored on track-channel buffer
(1)  832/     35F :                     	;     EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  833/     35F :                     
(1)  834/     35F : CF                  		rst	8
(1)  835/     360 : CB 40               		bit	0,b			; New NOTE?
(1)  836/     362 : 28 07               		jr	z,.no_note
(1)  837/     364 : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  838/     365 : DD 77 02            		ld	(ix+chnl_Note),a
(1)  839/     368 : CD FA 03            		call	.inc_cpatt
(1)  840/     36B :                     .no_note:
(1)  841/     36B : CB 48               		bit	1,b			; New INS?
(1)  842/     36D : 28 07               		jr	z,.no_ins
(1)  843/     36F : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  844/     370 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  845/     373 : CD FA 03            		call	.inc_cpatt
(1)  846/     376 :                     .no_ins:
(1)  847/     376 : CB 50               		bit	2,b			; New VOL?
(1)  848/     378 : 28 07               		jr	z,.no_vol
(1)  849/     37A : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  850/     37B : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  851/     37E : CD FA 03            		call	.inc_cpatt
(1)  852/     381 :                     .no_vol:
(1)  853/     381 : CB 58               		bit	3,b			; New EFFECT?
(1)  854/     383 : 28 0F               		jr	z,.no_eff
(1)  855/     385 : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  856/     386 : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  857/     389 : CD FA 03            		call	.inc_cpatt
(1)  858/     38C : CF                  		rst	8
(1)  859/     38D : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  860/     38E : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  861/     391 : CD FA 03            		call	.inc_cpatt
(1)  862/     394 :                     .no_eff:
(1)  863/     394 : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  864/     395 : 0F                  		rrca
(1)  865/     396 : 0F                  		rrca
(1)  866/     397 : 0F                  		rrca
(1)  867/     398 : 0F                  		rrca
(1)  868/     399 : E6 0F               		and	00001111b		; Filter bits
(1)  869/     39B : 4F                  		ld	c,a			; Save as c
(1)  870/     39C : 78                  		ld	a,b
(1)  871/     39D : E6 0F               		and	00001111b		; Filter again
(1)  872/     39F : B1                  		or	c			; Merge c with a
(1)  873/     3A0 : CF                  		rst	8
(1)  874/     3A1 : 4F                  		ld	c,a			; Save bit flags
(1)  875/     3A2 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  876/     3A5 : B1                  		or	c
(1)  877/     3A6 : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  878/     3A9 :                     	; Check for effects that affect
(1)  879/     3A9 :                     	; internal playback:
(1)  880/     3A9 :                     	; Jump, Ticks, etc.
(1)  881/     3A9 : C1                  		pop	bc		; Restore rowcount
(1)  882/     3AA : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  883/     3AD : E6 08               		and	1000b		; ONLY check for the EFFECT bit
(1)  884/     3AF : CA D6 02            		jp	z,.next_note
(1)  885/     3B2 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  886/     3B5 : B7                  		or	a		; 00h = invalid effect
(1)  887/     3B6 : CA D6 02            		jp	z,.next_note
(1)  888/     3B9 : FE 01               		cp	1		; Effect A: Tick set
(1)  889/     3BB : 28 0B               		jr	z,.eff_A
(1)  890/     3BD : FE 02               		cp	2		; Effect B: Position Jump
(1)  891/     3BF : 28 18               		jr	z,.eff_B
(1)  892/     3C1 : FE 03               		cp	3		; Effect C: Pattern break
(1)  893/     3C3 : 28 32               		jr	z,.eff_C	; <-- JUMP and exit.
(1)  894/     3C5 : C3 D6 02            		jp	.next_note
(1)  895/     3C8 :                     
(1)  896/     3C8 :                     ; ----------------------------------------
(1)  897/     3C8 :                     ; Effect A: Set ticks
(1)  898/     3C8 :                     ; ----------------------------------------
(1)  899/     3C8 :                     
(1)  900/     3C8 :                     .eff_A:
(1)  901/     3C8 : CF                  		rst	8
(1)  902/     3C9 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  903/     3CC : FD 73 03            		ld	(iy+trk_TickSet),e	; set for both Set and Timer.
(1)  904/     3CF : FD 73 12            		ld	(iy+trk_TickTmr),e
(1)  905/     3D2 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  906/     3D6 : C3 D6 02            		jp	.next_note
(1)  907/     3D9 :                     
(1)  908/     3D9 :                     ; ----------------------------------------
(1)  909/     3D9 :                     ; Effect B: jump to a new block
(1)  910/     3D9 :                     ; ----------------------------------------
(1)  911/     3D9 :                     
(1)  912/     3D9 :                     .eff_B:
(1)  913/     3D9 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  914/     3DC : FD 73 13            		ld 	(iy+trk_currBlk),e
(1)  915/     3DF : CF                  		rst	8
(1)  916/     3E0 : FD 36 11 00         		ld	(iy+trk_rowPause),0	; Reset rowpause
(1)  917/     3E4 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  918/     3E8 : FD CB 00 EE         		set	5,(iy+trk_Status)	; set fill-from-effect flag on exit
(1)  919/     3EC : 3E 80               		ld	a,80h
(1)  920/     3EE : FD 77 15            		ld	(iy+trk_BankHeads),a
(1)  921/     3F1 : FD 77 16            		ld	(iy+trk_BankBlk),a
(1)  922/     3F4 : C3 D6 02            		jp	.next_note
(1)  923/     3F7 :                     
(1)  924/     3F7 :                     ; ----------------------------------------
(1)  925/     3F7 :                     ; Effect C: Pattern break/exit
(1)  926/     3F7 :                     ;
(1)  927/     3F7 :                     ; Only used on SFX, arguments ignored.
(1)  928/     3F7 :                     ; ----------------------------------------
(1)  929/     3F7 :                     
(1)  930/     3F7 :                     .eff_C:
(1)  931/     3F7 : C3 0B 05            		jp	.track_end
(1)  932/     3FA :                     
(1)  933/     3FA :                     ; ----------------------------------------
(1)  934/     3FA :                     ; Increment the current patt position
(1)  935/     3FA :                     ; and recieve more data
(1)  936/     3FA :                     ;
(1)  937/     3FA :                     ; Breaks:
(1)  938/     3FA :                     ; a,e
(1)  939/     3FA :                     ; ----------------------------------------
(1)  940/     3FA :                     
(1)  941/     3FA :                     .inc_cpatt:
(1)  942/     3FA : FD 5E 08            		ld	e,(iy+trk_Cach)	; Read curret cache LSB
(1)  943/     3FD : 7D                  		ld	a,l
(1)  944/     3FE : 3C                  		inc	a
(1)  945/     3FF : E6 1F               		and	MAX_RCACH-1
(1)  946/     401 : FE 1E               		cp	MAX_RCACH-2	; RAN OUT of bytes (almost)?
(1)  947/     403 : 30 03               		jr	nc,.ran_out
(1)  948/     405 : B3                  		or	e
(1)  949/     406 : 6F                  		ld	l,a
(1)  950/     407 : C9                  		ret
(1)  951/     408 :                     .ran_out:
(1)  952/     408 : FD 6E 08            		ld	l,(iy+trk_Cach)
(1)  953/     40B : E5                  		push	hl
(1)  954/     40C : C5                  		push	bc
(1)  955/     40D : 06 00               		ld	b,0
(1)  956/     40F : 4F                  		ld	c,a
(1)  957/     410 : CF                  		rst	8
(1)  958/     411 : 5D                  		ld	e,l
(1)  959/     412 : 54                  		ld	d,h
(1)  960/     413 : FD 6E 19            		ld	l,(iy+trk_RomPattRead)
(1)  961/     416 : FD 66 1A            		ld	h,(iy+(trk_RomPattRead+1))
(1)  962/     419 : FD 7E 1B            		ld	a,(iy+(trk_RomPattRead+2))
(1)  963/     41C : 09                  		add	hl,bc
(1)  964/     41D : CE 00               		adc	a,0
(1)  965/     41F : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1)  966/     422 : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1)  967/     425 : CF                  		rst	8
(1)  968/     426 : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1)  969/     429 : 01 20 00            		ld	bc,MAX_RCACH
(1)  970/     42C : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1)  971/     42F : C1                  		pop	bc
(1)  972/     430 : E1                  		pop	hl
(1)  973/     431 : C9                  		ret
(1)  974/     432 :                     
(1)  975/     432 :                     ; ----------------------------------------
(1)  976/     432 :                     ; Set track pattern by trk_currBlk
(1)  977/     432 :                     ; ----------------------------------------
(1)  978/     432 :                     
(1)  979/     432 :                     .set_track:
(1)  980/     432 : FD 5E 04            		ld	e,(iy+trk_Blocks)
(1)  981/     435 : FD 56 05            		ld	d,(iy+(trk_Blocks+1))
(1)  982/     438 : FD 7E 13            		ld	a,(iy+trk_currBlk)
(1)  983/     43B : 4F                  		ld	c,a
(1)  984/     43C :                     
(1)  985/     43C : C5                  		push	bc
(1)  986/     43D : D5                  		push	de
(1)  987/     43E : CF                  		rst	8
(1)  988/     43F : 0F                  		rrca
(1)  989/     440 : 0F                  		rrca
(1)  990/     441 : 0F                  		rrca
(1)  991/     442 : E6 1F               		and	00011111b
(1)  992/     444 : FD 4E 16            		ld	c,(iy+trk_BankBlk)	; c - current block bank
(1)  993/     447 : CB 79               		bit	7,c			; First time?
(1)  994/     449 : 20 03               		jr	nz,.first_blk
(1)  995/     44B : B9                  		cp	c			; SAME instrument data?
(1)  996/     44C : 28 1E               		jr	z,.keep_blk
(1)  997/     44E :                     .first_blk:
(1)  998/     44E : CF                  		rst	8
(1)  999/     44F : FD 77 16            		ld	(iy+trk_BankBlk),a	; Save inst number
(1) 1000/     452 : 07                  		rlca
(1) 1001/     453 : 07                  		rlca
(1) 1002/     454 : 07                  		rlca
(1) 1003/     455 : 06 00               		ld	b,0
(1) 1004/     457 : 4F                  		ld	c,a
(1) 1005/     458 : FD 6E 22            		ld	l,(iy+trk_RomBlks)
(1) 1006/     45B : FD 66 23            		ld	h,(iy+(trk_RomBlks+1))
(1) 1007/     45E : FD 7E 24            		ld	a,(iy+(trk_RomBlks+2))
(1) 1008/     461 : E7                  		rst	20h
(1) 1009/     462 : CF                  		rst	8
(1) 1010/     463 : 09                  		add	hl,bc
(1) 1011/     464 : CE 00               		adc	a,0
(1) 1012/     466 : 01 08 00            		ld	bc,8			; 8 blocks stored
(1) 1013/     469 : CD F2 10            		call	transferRom		; ** ROM ACCESS **
(1) 1014/     46C :                     .keep_blk:
(1) 1015/     46C : E1                  		pop	hl
(1) 1016/     46D : C1                  		pop	bc
(1) 1017/     46E : 79                  		ld	a,c
(1) 1018/     46F : E6 07               		and	00000111b
(1) 1019/     471 : CF                  		rst	8
(1) 1020/     472 : 16 00               		ld	d,0
(1) 1021/     474 : 5F                  		ld	e,a
(1) 1022/     475 : 19                  		add	hl,de
(1) 1023/     476 : 7E                  		ld	a,(hl)			; Read byte
(1) 1024/     477 : FE FF               		cp	-1			; If block == -1, end track
(1) 1025/     479 : CA 0B 05            		jp	z,.track_end
(1) 1026/     47C : CF                  		rst	8
(1) 1027/     47D :                     
(1) 1028/     47D : FD 5E 06            		ld	e,(iy+trk_Patt)		; Read CACHE patt heads
(1) 1029/     480 : FD 56 07            		ld	d,(iy+(trk_Patt+1))
(1) 1030/     483 : 4F                  		ld	c,a
(1) 1031/     484 : D5                  		push	de
(1) 1032/     485 : C5                  		push	bc
(1) 1033/     486 : CF                  		rst	8
(1) 1034/     487 : 0F                  		rrca
(1) 1035/     488 : 0F                  		rrca
(1) 1036/     489 : 0F                  		rrca
(1) 1037/     48A : E6 1F               		and	00011111b
(1) 1038/     48C : FD 4E 15            		ld	c,(iy+trk_BankHeads)	; c - current intrument loaded
(1) 1039/     48F : CB 79               		bit	7,c			; First time?
(1) 1040/     491 : 20 03               		jr	nz,.first_head
(1) 1041/     493 : B9                  		cp	c			; SAME instrument data?
(1) 1042/     494 : 28 26               		jr	z,.keep_it
(1) 1043/     496 :                     .first_head:
(1) 1044/     496 : CF                  		rst	8
(1) 1045/     497 : FD 77 15            		ld	(iy+trk_BankHeads),a	; Save inst number
(1) 1046/     49A : 47                  		ld	b,a
(1) 1047/     49B : 0F                  		rrca
(1) 1048/     49C : 0F                  		rrca
(1) 1049/     49D : 0F                  		rrca
(1) 1050/     49E : E6 E0               		and	11100000b
(1) 1051/     4A0 : 4F                  		ld	c,a
(1) 1052/     4A1 : 78                  		ld	a,b
(1) 1053/     4A2 : 0F                  		rrca
(1) 1054/     4A3 : 0F                  		rrca
(1) 1055/     4A4 : 0F                  		rrca
(1) 1056/     4A5 : E6 03               		and	00000011b
(1) 1057/     4A7 : 47                  		ld	b,a
(1) 1058/     4A8 :                     
(1) 1059/     4A8 : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1060/     4AB : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1061/     4AE : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1062/     4B1 : E7                  		rst	20h
(1) 1063/     4B2 : CF                  		rst	8
(1) 1064/     4B3 : 09                  		add	hl,bc
(1) 1065/     4B4 : CE 00               		adc	a,0
(1) 1066/     4B6 : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1067/     4B9 : CD F2 10            		call	transferRom		; ** ROM ACCESS **
(1) 1068/     4BC :                     .keep_it:
(1) 1069/     4BC : C1                  		pop	bc
(1) 1070/     4BD : 79                  		ld	a,c
(1) 1071/     4BE : E6 07               		and	00000111b
(1) 1072/     4C0 : 87                  		add	a,a
(1) 1073/     4C1 : 87                  		add	a,a
(1) 1074/     4C2 : 57                  		ld	d,a
(1) 1075/     4C3 : CF                  		rst	8
(1) 1076/     4C4 : E6 FC               		and	11111100b
(1) 1077/     4C6 : 5F                  		ld	e,a
(1) 1078/     4C7 : 7A                  		ld	a,d
(1) 1079/     4C8 : E6 03               		and	00000011b
(1) 1080/     4CA : 57                  		ld	d,a
(1) 1081/     4CB : E1                  		pop	hl
(1) 1082/     4CC : 19                  		add	hl,de
(1) 1083/     4CD : 5E                  		ld	e,(hl)			; de - Pos
(1) 1084/     4CE : 23                  		inc	hl
(1) 1085/     4CF : CF                  		rst	8
(1) 1086/     4D0 : 56                  		ld	d,(hl)
(1) 1087/     4D1 : 23                  		inc	hl
(1) 1088/     4D2 : 7E                  		ld	a,(hl)
(1) 1089/     4D3 : 23                  		inc	hl
(1) 1090/     4D4 : FD 77 0C            		ld	(iy+trk_Rows),a
(1) 1091/     4D7 : 7E                  		ld	a,(hl)
(1) 1092/     4D8 : 23                  		inc	hl
(1) 1093/     4D9 : FD 77 0D            		ld	(iy+(trk_Rows+1)),a
(1) 1094/     4DC : FD 6E 1C            		ld	l,(iy+trk_RomPatt)	; Transfer FIRST patt
(1) 1095/     4DF : FD 66 1D            		ld	h,(iy+(trk_RomPatt+1))	; packet
(1) 1096/     4E2 : CF                  		rst	8
(1) 1097/     4E3 : FD 7E 1E            		ld	a,(iy+(trk_RomPatt+2))
(1) 1098/     4E6 : 19                  		add	hl,de
(1) 1099/     4E7 : CE 00               		adc	a,0
(1) 1100/     4E9 : FD 75 19            		ld	(iy+trk_RomPattRead),l
(1) 1101/     4EC : FD 74 1A            		ld	(iy+(trk_RomPattRead+1)),h
(1) 1102/     4EF : FD 77 1B            		ld	(iy+(trk_RomPattRead+2)),a
(1) 1103/     4F2 : FD 5E 08            		ld	e,(iy+trk_Cach)
(1) 1104/     4F5 : FD 56 09            		ld	d,(iy+(trk_Cach+1))
(1) 1105/     4F8 :                     
(1) 1106/     4F8 : FD 73 0A            		ld	(iy+trk_Read),e
(1) 1107/     4FB : FD 72 0B            		ld	(iy+(trk_Read+1)),d
(1) 1108/     4FE : 0E 20               		ld	c,MAX_RCACH
(1) 1109/     500 : FD 36 10 00         		ld	(iy+trk_cachHalf),0
(1) 1110/     504 : FD 36 11 00         		ld	(iy+trk_rowPause),0
(1) 1111/     508 : C3 F2 10            		jp	transferRom		; ** ROM access **
(1) 1112/     50B :                     
(1) 1113/     50B :                     ; ----------------------------------------
(1) 1114/     50B :                     ; **JUMP ONLY**
(1) 1115/     50B :                     .track_end:
(1) 1116/     50B : CD C6 05            		call	track_out
(1) 1117/     50E : CF                  		rst	8
(1) 1118/     50F : AF                  		xor	a
(1) 1119/     510 : FD 77 11            		ld	(iy+trk_rowPause),a
(1) 1120/     513 : FD 77 12            		ld	(iy+trk_TickTmr),a
(1) 1121/     516 : FD 77 00            		ld	(iy+trk_Status),a	; Disable track slot
(1) 1122/     519 : C9                  		ret
(1) 1123/     51A :                     
(1) 1124/     51A :                     ; ----------------------------------------
(1) 1125/     51A :                     ; Track refill
(1) 1126/     51A :                     ; ----------------------------------------
(1) 1127/     51A :                     
(1) 1128/     51A :                     .effect_fill:
(1) 1129/     51A : FD CB 00 AE         		res	5,(iy+trk_Status)	; Reset refill-from-effect flag
(1) 1130/     51E : C3 32 04            		jp	.set_track
(1) 1131/     521 :                     
(1) 1132/     521 :                     ; ----------------------------------------
(1) 1133/     521 :                     ; Track Start/Reset
(1) 1134/     521 :                     ;
(1) 1135/     521 :                     ; iy - Track buffer
(1) 1136/     521 :                     ; ----------------------------------------
(1) 1137/     521 :                     
(1) 1138/     521 :                     .first_fill:
(1) 1139/     521 : FD CB 00 B6         		res	6,(iy+trk_Status)	; Clear FILL flag
(1) 1140/     525 : CD C6 05            		call	track_out
(1) 1141/     528 : FD 36 12 01         		ld	(iy+trk_TickTmr),1	; Reset tick timer
(1) 1142/     52C : FD 7E 02            		ld	a,(iy+trk_SetBlk)	; Make start block as current block
(1) 1143/     52F : CF                  		rst	8
(1) 1144/     530 : FD 77 13            		ld 	(iy+trk_currBlk),a	; block
(1) 1145/     533 : FD 7E 01            		ld	a,(iy+trk_SeqId)
(1) 1146/     536 : FE FF               		cp	-1			; Sequence -1?
(1) 1147/     538 : C8                  		ret	z
(1) 1148/     539 : 87                  		add	a,a
(1) 1149/     53A : 87                  		add	a,a
(1) 1150/     53B : 16 00               		ld	d,0
(1) 1151/     53D : 5F                  		ld	e,a
(1) 1152/     53E : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1153/     541 : 23                  		inc	hl
(1) 1154/     542 : 7E                  		ld	a,(hl)		; $00xx0000
(1) 1155/     543 : 23                  		inc	hl
(1) 1156/     544 : 4E                  		ld	c,(hl)		; $0000xx00
(1) 1157/     545 : 23                  		inc	hl
(1) 1158/     546 : 6E                  		ld	l,(hl)		; $000000xx
(1) 1159/     547 : CF                  		rst	8
(1) 1160/     548 : 61                  		ld	h,c
(1) 1161/     549 : 19                  		add	hl,de
(1) 1162/     54A : CE 00               		adc	a,0
(1) 1163/     54C : 11 70 1F            		ld	de,trkInfoCach
(1) 1164/     54F : D5                  		push	de
(1) 1165/     550 : 01 04 00            		ld	bc,4
(1) 1166/     553 : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 1167/     556 : E1                  		pop	hl
(1) 1168/     557 : 7E                  		ld	a,(hl)
(1) 1169/     558 : 23                  		inc	hl
(1) 1170/     559 : CB 7F               		bit	7,a
(1) 1171/     55B : 28 04               		jr	z,.no_glbl
(1) 1172/     55D : FD CB 00 C6         		set	0,(iy+trk_Status)	; Enable GLOBAL sub-beats
(1) 1173/     561 :                     .no_glbl:
(1) 1174/     561 : CF                  		rst	8
(1) 1175/     562 : E6 7F               		and	01111111b
(1) 1176/     564 : FD 77 03            		ld	(iy+trk_TickSet),a
(1) 1177/     567 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1178/     568 : 23                  		inc	hl			; grab it's pointers
(1) 1179/     569 : 4E                  		ld	c,(hl)
(1) 1180/     56A : 23                  		inc	hl
(1) 1181/     56B : 6E                  		ld	l,(hl)
(1) 1182/     56C : 61                  		ld	h,c
(1) 1183/     56D : 11 60 1F            		ld	de,headerOut
(1) 1184/     570 : 0E 0E               		ld	c,0Eh
(1) 1185/     572 : CD F2 10            		call	transferRom		; ** ROM access **
(1) 1186/     575 :                     
(1) 1187/     575 :                     
(1) 1188/     575 :                     	; headerOut:
(1) 1189/     575 :                     	; dc.w numof_chnls
(1) 1190/     575 :                     	; dc.l .blk,.pat,.ins
(1) 1191/     575 :                     	; *** READING BACKWARDS
(1) 1192/     575 : DD 21 6D 1F         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1193/     579 : CF                  		rst	8
(1) 1194/     57A : CD B3 05            		call	.grab_rhead		; Instrument data
(1) 1195/     57D : FD 75 1F            		ld	(iy+trk_RomInst),l
(1) 1196/     580 : FD 74 20            		ld	(iy+(trk_RomInst+1)),h
(1) 1197/     583 : FD 70 21            		ld	(iy+(trk_RomInst+2)),b
(1) 1198/     586 : E7                  		rst	20h
(1) 1199/     587 : CF                  		rst	8
(1) 1200/     588 : CD B3 05            		call	.grab_rhead		; Pattern heads
(1) 1201/     58B : FD 75 1C            		ld	(iy+trk_RomPatt),l	; Save ROM patt base
(1) 1202/     58E : FD 74 1D            		ld	(iy+(trk_RomPatt+1)),h
(1) 1203/     591 : FD 70 1E            		ld	(iy+(trk_RomPatt+2)),b
(1) 1204/     594 : FD 36 15 80         		ld	(iy+trk_BankHeads),80h	; Reset pattern banking
(1) 1205/     598 : CF                  		rst	8
(1) 1206/     599 : CD B3 05            		call	.grab_rhead		; Block data
(1) 1207/     59C : FD 75 22            		ld	(iy+trk_RomBlks),l	; Save ROM patt base
(1) 1208/     59F : FD 74 23            		ld	(iy+(trk_RomBlks+1)),h
(1) 1209/     5A2 : FD 70 24            		ld	(iy+(trk_RomBlks+2)),b
(1) 1210/     5A5 : FD 36 16 80         		ld	(iy+trk_BankBlk),80h	; Reset pattern banking
(1) 1211/     5A9 : CF                  		rst	8
(1) 1212/     5AA : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1213/     5AD : FD 77 17            		ld	(iy+trk_MaxChnl),a
(1) 1214/     5B0 : C3 32 04            		jp	.set_track
(1) 1215/     5B3 :                     
(1) 1216/     5B3 :                     ; Read 68K pointer:
(1) 1217/     5B3 :                     ; hl - 00xxxx
(1) 1218/     5B3 :                     ;  b - xx0000
(1) 1219/     5B3 :                     .grab_rhead:
(1) 1220/     5B3 : DD 6E 00            		ld	l,(ix)
(1) 1221/     5B6 : DD 2B               		dec	ix
(1) 1222/     5B8 : DD 66 00            		ld	h,(ix)
(1) 1223/     5BB : CF                  		rst	8
(1) 1224/     5BC : DD 2B               		dec	ix
(1) 1225/     5BE : DD 46 00            		ld	b,(ix)
(1) 1226/     5C1 : DD 2B               		dec	ix
(1) 1227/     5C3 :                     ; 		ld	c,(ix)
(1) 1228/     5C3 : DD 2B               		dec	ix
(1) 1229/     5C5 : C9                  		ret
(1) 1230/     5C6 :                     
(1) 1231/     5C6 :                     ; ----------------------------------------
(1) 1232/     5C6 :                     ; Reset tracker channels
(1) 1233/     5C6 :                     ;
(1) 1234/     5C6 :                     ; iy - Track buffer
(1) 1235/     5C6 :                     ;
(1) 1236/     5C6 :                     ; Breaks:
(1) 1237/     5C6 :                     ; b ,de,hl,ix
(1) 1238/     5C6 :                     ; ----------------------------------------
(1) 1239/     5C6 :                     
(1) 1240/     5C6 :                     track_out:
(1) 1241/     5C6 : FD E5               		push	iy
(1) 1242/     5C8 : E1                  		pop	hl
(1) 1243/     5C9 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1244/     5CD : CF                  		rst	8
(1) 1245/     5CE : 11 25 00            		ld	de,trk_ChnIndx
(1) 1246/     5D1 : 19                  		add	hl,de
(1) 1247/     5D2 : 06 1A               		ld	b,MAX_TRKINDX
(1) 1248/     5D4 :                     .indx_del:
(1) 1249/     5D4 : 7E                  		ld	a,(hl)
(1) 1250/     5D5 : B7                  		or	a
(1) 1251/     5D6 : 28 2A               		jr	z,.nothin
(1) 1252/     5D8 : CF                  		rst	8
(1) 1253/     5D9 : DD E5               		push	ix
(1) 1254/     5DB : E6 1F               		and	00011111b
(1) 1255/     5DD : 87                  		add	a,a
(1) 1256/     5DE : 87                  		add	a,a
(1) 1257/     5DF : 87                  		add	a,a
(1) 1258/     5E0 : 5F                  		ld	e,a
(1) 1259/     5E1 : CF                  		rst	8
(1) 1260/     5E2 : DD 19               		add	ix,de
(1) 1261/     5E4 : AF                  		xor	a
(1) 1262/     5E5 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1263/     5E9 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1264/     5ED : DD 36 04 40         		ld	(ix+chnl_Vol),64
(1) 1265/     5F1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1266/     5F4 : CF                  		rst	8
(1) 1267/     5F5 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1268/     5F8 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1269/     5FB : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1270/     5FE : DD E1               		pop	ix
(1) 1271/     600 : 77                  		ld	(hl),a
(1) 1272/     601 : 00                  		nop
(1) 1273/     602 :                     .nothin:
(1) 1274/     602 : 23                  		inc	hl
(1) 1275/     603 : 10 CF               		djnz	.indx_del
(1) 1276/     605 : 3E 01               		ld	a,1
(1) 1277/     607 : 32 E0 1B            		ld	(marsUpd),a
(1) 1278/     60A : C9                  		ret
(1) 1279/     60B :                     
(1) 1280/     60B :                     ; ============================================================
(1) 1281/     60B :                     ; --------------------------------------------------------
(1) 1282/     60B :                     ; Process track channels to the sound chips
(1) 1283/     60B :                     ; --------------------------------------------------------
(1) 1284/     60B :                     
(1) 1285/     60B :                     set_chips:
(1) 1286/     60B : E7                  		rst	20h
(1) 1287/     60C : CD D1 10            		call	get_tick
(1) 1288/     60F :                     	; ** MANUAL BUFF READ **
(1) 1289/     60F : FD 21 F3 17         		ld	iy,trkBuff_0
(1) 1290/     613 : CD 53 06            		call	tblbuff_read
(1) 1291/     616 : FD 21 32 18         		ld	iy,trkBuff_1
(1) 1292/     61A : CD 53 06            		call	tblbuff_read
(1) 1293/     61D : FD 21 71 18         		ld	iy,trkBuff_2
(1) 1294/     621 : CD 53 06            		call	tblbuff_read
(1) 1295/     624 : CD D1 10            		call	get_tick
(1) 1296/     627 :                     proc_chips:
(1) 1297/     627 : E7                  		rst	20h
(1) 1298/     628 : CF                  		rst	8
(1) 1299/     629 : FD 21 C2 1B         		ld	iy,tblPSGN		; PSG Noise
(1) 1300/     62D : CD 20 08            		call	dtbl_singl
(1) 1301/     630 : CF                  		rst	8
(1) 1302/     631 : FD 21 FE 1B         		ld	iy,tblPSG		; PSG Squares
(1) 1303/     635 : CD 0A 08            		call	dtbl_multi
(1) 1304/     638 : CD D1 10            		call	get_tick
(1) 1305/     63B : CF                  		rst	8
(1) 1306/     63C : FD 21 6E 1A         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1307/     640 : CD 0A 08            		call	dtbl_multi
(1) 1308/     643 : CF                  		rst	8
(1) 1309/     644 : FD 21 00 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1310/     648 : CD 0A 08            		call	dtbl_multi
(1) 1311/     64B : CF                  		rst	8
(1) 1312/     64C : FD 21 48 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1313/     650 : C3 0A 08            		jp	dtbl_multi
(1) 1314/     653 :                     
(1) 1315/     653 :                     ; ----------------------------------------
(1) 1316/     653 :                     ; Read current track
(1) 1317/     653 :                     ;
(1) 1318/     653 :                     ; iy - Buffer
(1) 1319/     653 :                     tblbuff_read:
(1) 1320/     653 :                     ; 		ld	l,(iy)
(1) 1321/     653 :                     ; 		ld	h,(iy+1)
(1) 1322/     653 : CD D1 10            		call	get_tick
(1) 1323/     656 : CF                  		rst	8
(1) 1324/     657 :                     ; 		push	hl
(1) 1325/     657 :                     ; 		pop	iy
(1) 1326/     657 : FD 46 00            		ld	b,(iy+trk_Status)	; bit7: Track active?
(1) 1327/     65A : CB 78               		bit	7,b
(1) 1328/     65C : C8                  		ret	z
(1) 1329/     65D : 78                  		ld	a,b			; trk_Status == -1?
(1) 1330/     65E : FE FF               		cp	-1
(1) 1331/     660 : C2 6A 06            		jp	nz,.track_cont
(1) 1332/     663 : CD C6 05            		call	track_out
(1) 1333/     666 : FD 36 00 00         		ld	(iy+trk_Status),0
(1) 1334/     66A :                     .track_cont:
(1) 1335/     66A : E7                  		rst	20h			; Refill wave
(1) 1336/     66B : FD E5               		push	iy
(1) 1337/     66D : E1                  		pop	hl
(1) 1338/     66E : CF                  		rst	8
(1) 1339/     66F : DD 21 00 1E         		ld	ix,trkChnls
(1) 1340/     673 : 11 25 00            		ld	de,trk_ChnIndx
(1) 1341/     676 : 19                  		add	hl,de
(1) 1342/     677 : FD 7E 17            		ld	a,(iy+trk_MaxChnl)
(1) 1343/     67A : B7                  		or	a
(1) 1344/     67B : 20 02               		jr	nz,.valid
(1) 1345/     67D : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1346/     67F :                     .valid:
(1) 1347/     67F : CF                  		rst	8
(1) 1348/     680 : 47                  		ld	b,a
(1) 1349/     681 :                     .next_indx:
(1) 1350/     681 : 7E                  		ld	a,(hl)			; Read index
(1) 1351/     682 : B7                  		or	a
(1) 1352/     683 : 20 09               		jr	nz,.has_indx		; If non-zero: valid
(1) 1353/     685 : C5                  		push	bc			; ** wave sync
(1) 1354/     686 : 06 04               		ld	b,4
(1) 1355/     688 : 10 FE               		djnz	$
(1) 1356/     68A : C1                  		pop	bc			; **
(1) 1357/     68B : CF                  		rst	8
(1) 1358/     68C : 18 1C               		jr	.no_indx
(1) 1359/     68E :                     .has_indx:
(1) 1360/     68E : E6 1F               		and	00011111b
(1) 1361/     690 : 87                  		add	a,a
(1) 1362/     691 : 87                  		add	a,a
(1) 1363/     692 : 87                  		add	a,a
(1) 1364/     693 : CF                  		rst	8
(1) 1365/     694 : 16 00               		ld	d,0
(1) 1366/     696 : 5F                  		ld	e,a
(1) 1367/     697 : C5                  		push	bc
(1) 1368/     698 : E5                  		push	hl
(1) 1369/     699 : DD E5               		push	ix
(1) 1370/     69B : DD 19               		add	ix,de
(1) 1371/     69D : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1372/     6A0 : E6 0F               		and	00001111b
(1) 1373/     6A2 : C4 B2 06            		call	nz,.do_chip		; Call if non-zero
(1) 1374/     6A5 : CF                  		rst	8
(1) 1375/     6A6 : DD E1               		pop	ix
(1) 1376/     6A8 : E1                  		pop	hl
(1) 1377/     6A9 : C1                  		pop	bc
(1) 1378/     6AA :                     .no_indx:
(1) 1379/     6AA : 23                  		inc	hl
(1) 1380/     6AB : 10 D4               		djnz	.next_indx
(1) 1381/     6AD : FD CB 00 9E         		res	3,(iy+trk_Status)	; RESET Volume update bit
(1) 1382/     6B1 : C9                  		ret
(1) 1383/     6B2 :                     
(1) 1384/     6B2 :                     ; ----------------------------------------
(1) 1385/     6B2 :                     ; iy - Track buffer
(1) 1386/     6B2 :                     ; ix - Current channel
(1) 1387/     6B2 :                     
(1) 1388/     6B2 :                     .do_chip:
(1) 1389/     6B2 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1390/     6B5 : B7                  		or	a
(1) 1391/     6B6 : C8                  		ret	z			; If 0 == stop
(1) 1392/     6B7 : CF                  		rst	8
(1) 1393/     6B8 : 3D                  		dec	a			; inst-1
(1) 1394/     6B9 : E6 7F               		and	01111111b
(1) 1395/     6BB : 21 7A 1F            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1396/     6BE : E5                  		push	hl
(1) 1397/     6BF : 07                  		rlca
(1) 1398/     6C0 : 07                  		rlca
(1) 1399/     6C1 : 07                  		rlca
(1) 1400/     6C2 : 47                  		ld	b,a
(1) 1401/     6C3 : E6 F8               		and	11111000b
(1) 1402/     6C5 : 4F                  		ld	c,a
(1) 1403/     6C6 : 78                  		ld	a,b
(1) 1404/     6C7 : AF                  		xor	a
(1) 1405/     6C8 : E6 03               		and	00000011b
(1) 1406/     6CA : CF                  		rst	8
(1) 1407/     6CB : 47                  		ld	b,a
(1) 1408/     6CC : EB                  		ex	hl,de
(1) 1409/     6CD : FD 6E 1F            		ld	l,(iy+trk_RomInst)
(1) 1410/     6D0 : FD 66 20            		ld	h,(iy+(trk_RomInst+1))
(1) 1411/     6D3 : FD 7E 21            		ld	a,(iy+(trk_RomInst+2))
(1) 1412/     6D6 : 09                  		add	hl,bc
(1) 1413/     6D7 : CE 00               		adc	a,0
(1) 1414/     6D9 : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1415/     6DC : CD F2 10            		call	transferRom		; ** ROM access **
(1) 1416/     6DF : E1                  		pop	hl
(1) 1417/     6E0 : E5                  		push	hl			; <-- save hl
(1) 1418/     6E1 : CD FB 06            		call	.grab_link
(1) 1419/     6E4 : D1                  		pop	de			; --> recover as de
(1) 1420/     6E5 :                     	; hl - current table
(1) 1421/     6E5 :                     	; de - instrument data
(1) 1422/     6E5 : FE FF               		cp	-1			; Found any link?
(1) 1423/     6E7 : C8                  		ret	z
(1) 1424/     6E8 : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1425/     6E9 : 23                  		inc	hl
(1) 1426/     6EA : 23                  		inc	hl
(1) 1427/     6EB : 23                  		inc	hl
(1) 1428/     6EC : FD 7E 0E            		ld	a,(iy+trk_VolMaster)
(1) 1429/     6EF : 77                  		ld	(hl),a
(1) 1430/     6F0 : 01 0C 00            		ld	bc,10h-4		; Move to instr data
(1) 1431/     6F3 : 09                  		add	hl,bc
(1) 1432/     6F4 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1433/     6F5 : 01 08 00            		ld	bc,8
(1) 1434/     6F8 : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1435/     6FA : C9                  		ret
(1) 1436/     6FB :                     
(1) 1437/     6FB :                     ; ----------------------------------------
(1) 1438/     6FB :                     ; Search for a linked channel on the
(1) 1439/     6FB :                     ; chip table
(1) 1440/     6FB :                     ;
(1) 1441/     6FB :                     ; Input:
(1) 1442/     6FB :                     ; iy - Track buffer
(1) 1443/     6FB :                     ; ix - Current channel
(1) 1444/     6FB :                     ; hl - Intrument data
(1) 1445/     6FB :                     ;
(1) 1446/     6FB :                     ; Returns:
(1) 1447/     6FB :                     ; hl - Channel table to use
(1) 1448/     6FB :                     ;  a - Return value:
(1) 1449/     6FB :                     ;       0 - Found
(1) 1450/     6FB :                     ;      -1 - Not found
(1) 1451/     6FB :                     ; ----------------------------------------
(1) 1452/     6FB :                     
(1) 1453/     6FB :                     .grab_link:
(1) 1454/     6FB : 7E                  		ld	a,(hl)			; Check INSTRUMENT type
(1) 1455/     6FC : E6 F0               		and	11110000b		; Filter bits
(1) 1456/     6FE : 5F                  		ld	e,a			; e - NEW chip
(1) 1457/     6FF : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1458/     702 : E6 F0               		and	11110000b
(1) 1459/     704 : 28 76               		jr	z,.new_chip		; If 0: It's a NEW chip
(1) 1460/     706 : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1461/     707 : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1462/     709 : CF                  		rst	8
(1) 1463/     70A : 57                  		ld	d,a			; d - Chip to silence
(1) 1464/     70B : D5                  		push	de
(1) 1465/     70C : CD 26 07            		call	.srch_link		; Search OLD link
(1) 1466/     70F : D1                  		pop	de
(1) 1467/     710 : FE FF               		cp	-1
(1) 1468/     712 : 28 03               		jr	z,.dont_res
(1) 1469/     714 : CD A4 0F            		call	tblz_clear
(1) 1470/     717 :                     .dont_res:
(1) 1471/     717 : CF                  		rst	8
(1) 1472/     718 : 18 62               		jr	.new_chip
(1) 1473/     71A :                     .same_link:
(1) 1474/     71A : CD 26 07            		call	.srch_link		; Search link
(1) 1475/     71D : FE FF               		cp	-1
(1) 1476/     71F : C0                  		ret	nz
(1) 1477/     720 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1478/     723 : CF                  		rst	8
(1) 1479/     724 : 18 56               		jr	.new_chip
(1) 1480/     726 :                     
(1) 1481/     726 :                     ; ----------------------------------------
(1) 1482/     726 :                     ; ** RELINK **
(1) 1483/     726 :                     ; a - Chip to search for
(1) 1484/     726 :                     
(1) 1485/     726 :                     .srch_link:
(1) 1486/     726 : CD EE 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1487/     729 : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1488/     72B : C1                  		pop	bc
(1) 1489/     72C : B7                  		or	a			; Single table?
(1) 1490/     72D : FA 47 07            		jp	m,.singl_link
(1) 1491/     730 :                     .srch_lloop:
(1) 1492/     730 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1493/     731 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1494/     733 : 28 43               		jr	z,.refill
(1) 1495/     735 : B9                  		cp	c			; Same link LSB?
(1) 1496/     736 : 20 07               		jr	nz,.invldl
(1) 1497/     738 : 23                  		inc	hl
(1) 1498/     739 : CF                  		rst	8
(1) 1499/     73A : 7E                  		ld	a,(hl)
(1) 1500/     73B : 2B                  		dec	hl
(1) 1501/     73C : B8                  		cp	b			; Same link MSB?
(1) 1502/     73D : 28 16               		jr	z,.reroll
(1) 1503/     73F :                     .invldl:
(1) 1504/     73F : D5                  		push	de
(1) 1505/     740 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1506/     743 : 19                  		add	hl,de
(1) 1507/     744 : D1                  		pop	de
(1) 1508/     745 : 18 E9               		jr	.srch_lloop
(1) 1509/     747 :                     
(1) 1510/     747 :                     ; ----------------------
(1) 1511/     747 :                     ; PSGN/FM3/FM6
(1) 1512/     747 :                     .singl_link:
(1) 1513/     747 : 23                  		inc	hl			; Read MSB first
(1) 1514/     748 : 7E                  		ld	a,(hl)
(1) 1515/     749 : 2B                  		dec	hl
(1) 1516/     74A : CF                  		rst	8
(1) 1517/     74B : B8                  		cp	b			; MSB match?
(1) 1518/     74C : 20 2A               		jr	nz,.refill
(1) 1519/     74E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1520/     74F : B9                  		cp	c
(1) 1521/     750 : 20 26               		jr	nz,.refill
(1) 1522/     752 : C3 7A 07            		jp	.rnot_psg
(1) 1523/     755 :                     
(1) 1524/     755 :                     ; ----------------------------------------
(1) 1525/     755 :                     ; *** Special re-roll check for
(1) 1526/     755 :                     ; listed tables ***
(1) 1527/     755 :                     
(1) 1528/     755 :                     .reroll:
(1) 1529/     755 : E5                  		push	hl
(1) 1530/     756 : 01 03 00            		ld	bc,ztbl_Chip	; <-- fake iy+ztbl_Chip
(1) 1531/     759 : 09                  		add	hl,bc
(1) 1532/     75A : CF                  		rst	8
(1) 1533/     75B : 4E                  		ld	c,(hl)		; c - ID
(1) 1534/     75C : E1                  		pop	hl
(1) 1535/     75D : 7B                  		ld	a,e
(1) 1536/     75E : FE 80               		cp	80h		; PSG?
(1) 1537/     760 : 20 18               		jr	nz,.rnot_psg
(1) 1538/     762 :                     	; Special PSG3/PSGN check
(1) 1539/     762 : 3A F2 1C            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1540/     765 : E6 03               		and	011b
(1) 1541/     767 : FE 03               		cp	011b
(1) 1542/     769 : 20 0F               		jr	nz,.rnot_psg
(1) 1543/     76B : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1544/     76C : FE 02               		cp	2
(1) 1545/     76E : 20 0A               		jr	nz,.rnot_psg
(1) 1546/     770 : CF                  		rst	8
(1) 1547/     771 : D5                  		push	de
(1) 1548/     772 : 16 80               		ld	d,80h		; Force silence
(1) 1549/     774 : CD A4 0F            		call	tblz_clear
(1) 1550/     777 : D1                  		pop	de
(1) 1551/     778 :                     .refill:
(1) 1552/     778 : 18 71               		jr	.set_asfull
(1) 1553/     77A :                     .rnot_psg:
(1) 1554/     77A : AF                  		xor	a
(1) 1555/     77B : C9                  		ret
(1) 1556/     77C :                     
(1) 1557/     77C :                     ; ----------------------------------------
(1) 1558/     77C :                     ; *** NEW CHIP ***
(1) 1559/     77C :                     ; e - Chip to set
(1) 1560/     77C :                     
(1) 1561/     77C :                     .new_chip:
(1) 1562/     77C : 7B                  		ld	a,e			; Read NEW chip
(1) 1563/     77D : B7                  		or	a			; If non-minus, exit.
(1) 1564/     77E : F2 EB 07            		jp	p,.set_asfull
(1) 1565/     781 : CD EE 07            		call	.pick_tbl
(1) 1566/     784 : CF                  		rst	8
(1) 1567/     785 : FD 4E 14            		ld	c,(iy+trk_Priority)	; c - OUR priority level
(1) 1568/     788 : B7                  		or	a
(1) 1569/     789 : FA D9 07            		jp	m,.singl_free
(1) 1570/     78C : E5                  		push	hl			; Backup START table
(1) 1571/     78D :                     ; PASS 1
(1) 1572/     78D :                     .srch_free:
(1) 1573/     78D : 7E                  		ld	a,(hl)			; Read LSB
(1) 1574/     78E : FE FF               		cp	-1			; If -1, return -1
(1) 1575/     790 : 28 0B               		jr	z,.pass_2
(1) 1576/     792 : 23                  		inc	hl
(1) 1577/     793 : 46                  		ld	b,(hl)			; Read MSB
(1) 1578/     794 : 2B                  		dec	hl
(1) 1579/     795 :                     ; 		nop	; wave sync
(1) 1580/     795 :                     ; 		nop
(1) 1581/     795 :                     ; 		rst	8
(1) 1582/     795 :                     ; 		nop
(1) 1583/     795 :                     ; 		nop
(1) 1584/     795 : B0                  		or	b
(1) 1585/     796 : 28 24               		jr	z,.new_link_z
(1) 1586/     798 : CD B5 07            		call	.nextsrch_tbl
(1) 1587/     79B : 18 F0               		jr	.srch_free
(1) 1588/     79D :                     
(1) 1589/     79D :                     ; PASS 2
(1) 1590/     79D :                     ; Rewrite mode
(1) 1591/     79D :                     .pass_2:
(1) 1592/     79D : E1                  		pop	hl
(1) 1593/     79E :                     .next_prio:
(1) 1594/     79E : 7E                  		ld	a,(hl)		; Read LSB
(1) 1595/     79F : FE FF               		cp	-1		; If -1, return -1
(1) 1596/     7A1 : C8                  		ret	z
(1) 1597/     7A2 : 23                  		inc	hl
(1) 1598/     7A3 : 23                  		inc	hl
(1) 1599/     7A4 : 7E                  		ld	a,(hl)		; Read priority
(1) 1600/     7A5 : 2B                  		dec	hl
(1) 1601/     7A6 : 2B                  		dec	hl
(1) 1602/     7A7 : B7                  		or	a		; Failsafe zero priority overwrite
(1) 1603/     7A8 : 28 16               		jr	z,.new_link_o
(1) 1604/     7AA : B9                  		cp	c
(1) 1605/     7AB : 28 13               		jr	z,.new_link_o
(1) 1606/     7AD : 38 11               		jr	c,.new_link_o
(1) 1607/     7AF : CF                  		rst	8
(1) 1608/     7B0 : CD B5 07            		call	.nextsrch_tbl
(1) 1609/     7B3 : 18 E9               		jr	.next_prio
(1) 1610/     7B5 :                     .nextsrch_tbl:
(1) 1611/     7B5 : D5                  		push	de
(1) 1612/     7B6 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1613/     7B9 : 19                  		add	hl,de
(1) 1614/     7BA : D1                  		pop	de
(1) 1615/     7BB :                     ; 		nop	; wave sync
(1) 1616/     7BB :                     ; 		nop
(1) 1617/     7BB :                     ; 		rst	8
(1) 1618/     7BB :                     ; 		nop
(1) 1619/     7BB :                     ; 		nop
(1) 1620/     7BB : C9                  		ret
(1) 1621/     7BC :                     .new_link_z:
(1) 1622/     7BC : 33                  		inc	sp		; skip backup
(1) 1623/     7BD : 33                  		inc	sp
(1) 1624/     7BE : 18 08               		jr	.new_link
(1) 1625/     7C0 :                     
(1) 1626/     7C0 :                     ; OVERWRITE link
(1) 1627/     7C0 :                     .new_link_o:
(1) 1628/     7C0 : E5                  		push	hl
(1) 1629/     7C1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1630/     7C4 : CD A4 0F            		call	tblz_clear
(1) 1631/     7C7 : E1                  		pop	hl
(1) 1632/     7C8 :                     ; NEW link
(1) 1633/     7C8 :                     .new_link:
(1) 1634/     7C8 : CF                  		rst	8
(1) 1635/     7C9 : 23                  		inc	hl
(1) 1636/     7CA : 23                  		inc	hl
(1) 1637/     7CB :                     ; hl+2
(1) 1638/     7CB :                     .l_hiprio:
(1) 1639/     7CB : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1640/     7CE : DD E5               		push	ix
(1) 1641/     7D0 : D1                  		pop	de
(1) 1642/     7D1 : 71                  		ld	(hl),c		; Write priority
(1) 1643/     7D2 : 2B                  		dec	hl
(1) 1644/     7D3 : CF                  		rst	8
(1) 1645/     7D4 : 72                  		ld 	(hl),d		; MSB
(1) 1646/     7D5 : 2B                  		dec	hl
(1) 1647/     7D6 : 73                  		ld	(hl),e		; LSB
(1) 1648/     7D7 : AF                  		xor	a		; Return OK
(1) 1649/     7D8 : C9                  		ret
(1) 1650/     7D9 :                     
(1) 1651/     7D9 :                     ; Single slot
(1) 1652/     7D9 :                     ; c - priority
(1) 1653/     7D9 :                     ; e - chip
(1) 1654/     7D9 :                     .singl_free:
(1) 1655/     7D9 : 46                  		ld	b,(hl)
(1) 1656/     7DA : 23                  		inc	hl
(1) 1657/     7DB : 7E                  		ld	a,(hl)
(1) 1658/     7DC : 23                  		inc	hl
(1) 1659/     7DD : B0                  		or	b
(1) 1660/     7DE : 28 EB               		jr	z,.l_hiprio
(1) 1661/     7E0 : CF                  		rst	8
(1) 1662/     7E1 : 7E                  		ld	a,(hl)
(1) 1663/     7E2 : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1664/     7E3 : 28 E6               		jr	z,.l_hiprio
(1) 1665/     7E5 : B9                  		cp	c
(1) 1666/     7E6 : 28 E3               		jr	z,.l_hiprio
(1) 1667/     7E8 : 38 E1               		jr	c,.l_hiprio		; PRIORITY
(1) 1668/     7EA : CF                  		rst	8
(1) 1669/     7EB :                     .set_asfull:
(1) 1670/     7EB : 3E FF               		ld	a,-1			; Return -1
(1) 1671/     7ED : C9                  		ret
(1) 1672/     7EE :                     
(1) 1673/     7EE :                     ; Pick chip table
(1) 1674/     7EE :                     ; In:
(1) 1675/     7EE :                     ;  a - ID
(1) 1676/     7EE :                     ;
(1) 1677/     7EE :                     ; Out:
(1) 1678/     7EE :                     ;  a - Special bit + ID
(1) 1679/     7EE :                     ;
(1) 1680/     7EE :                     ; hl - Table
(1) 1681/     7EE :                     .pick_tbl:
(1) 1682/     7EE : D5                  		push	de
(1) 1683/     7EF : 0F                  		rrca
(1) 1684/     7F0 : 0F                  		rrca
(1) 1685/     7F1 : 0F                  		rrca
(1) 1686/     7F2 : 0F                  		rrca
(1) 1687/     7F3 : E6 07               		and	00000111b
(1) 1688/     7F5 : 87                  		add	a,a
(1) 1689/     7F6 : 21 60 1A            		ld	hl,tblList
(1) 1690/     7F9 : E5                  		push	hl
(1) 1691/     7FA : 16 00               		ld	d,0
(1) 1692/     7FC : 5F                  		ld	e,a
(1) 1693/     7FD : 19                  		add	hl,de
(1) 1694/     7FE : 5E                  		ld	e,(hl)
(1) 1695/     7FF : 23                  		inc	hl
(1) 1696/     800 : 7E                  		ld	a,(hl)
(1) 1697/     801 : 57                  		ld	d,a
(1) 1698/     802 : E6 80               		and	10000000b
(1) 1699/     804 : CB BA               		res	7,d
(1) 1700/     806 : E1                  		pop	hl
(1) 1701/     807 : 19                  		add	hl,de
(1) 1702/     808 : D1                  		pop	de
(1) 1703/     809 : C9                  		ret
(1) 1704/     80A :                     
(1) 1705/     80A :                     ; ============================================
(1) 1706/     80A :                     ; ----------------------------------------
(1) 1707/     80A :                     ; Process chip using it's table
(1) 1708/     80A :                     ;
(1) 1709/     80A :                     ; iy - table to read
(1) 1710/     80A :                     ; ----------------------------------------
(1) 1711/     80A :                     
(1) 1712/     80A :                     dtbl_multi:
(1) 1713/     80A : FD 7E 00            		ld	a,(iy)
(1) 1714/     80D : FE FF               		cp	-1
(1) 1715/     80F : C8                  		ret	z
(1) 1716/     810 : CD 20 08            		call	dtbl_singl
(1) 1717/     813 : CF                  		rst	8
(1) 1718/     814 : 11 18 00            		ld	de,MAX_TBLSIZE
(1) 1719/     817 : FD 19               		add	iy,de
(1) 1720/     819 : 06 04               		ld	b,4		; ** wave sync ** IMPORTANT
(1) 1721/     81B : 10 FE               		djnz	$
(1) 1722/     81D : CF                  		rst	8
(1) 1723/     81E : 18 EA               		jr	dtbl_multi
(1) 1724/     820 :                     dtbl_singl:
(1) 1725/     820 : FD 5E 00            		ld	e,(iy)		; Read link
(1) 1726/     823 : FD 56 01            		ld	d,(iy+1)
(1) 1727/     826 : 7A                  		ld	a,d		; If no-zero, active
(1) 1728/     827 : B3                  		or	e
(1) 1729/     828 : 20 60               		jr	nz,.linked
(1) 1730/     82A : FD 7E 02            		ld	a,(iy+2)	; Silence request?
(1) 1731/     82D : B7                  		or	a
(1) 1732/     82E : F0                  		ret	p		; Return if not.
(1) 1733/     82F : CF                  		rst	8
(1) 1734/     830 : FD 36 02 00         		ld	(iy+2),0	; Reset request on memory
(1) 1735/     834 :                     
(1) 1736/     834 :                     ; ----------------------------------------
(1) 1737/     834 :                     ; chip-silence request
(1) 1738/     834 :                     ; iy - Table
(1) 1739/     834 : E6 F0               		and	11110000b
(1) 1740/     836 : FE 80               		cp	80h
(1) 1741/     838 : 28 1E               		jr	z,.siln_psg
(1) 1742/     83A : FE 90               		cp	90h
(1) 1743/     83C : 28 16               		jr	z,.siln_psg_n
(1) 1744/     83E : FE A0               		cp	0A0h
(1) 1745/     840 : 28 42               		jr	z,.siln_fm
(1) 1746/     842 : FE B0               		cp	0B0h
(1) 1747/     844 : 28 3E               		jr	z,.siln_fm
(1) 1748/     846 : CF                  		rst	8
(1) 1749/     847 : FE C0               		cp	0C0h
(1) 1750/     849 : 28 36               		jr	z,.siln_dac
(1) 1751/     84B : FE D0               		cp	0D0h
(1) 1752/     84D : 28 10               		jr	z,.siln_pcm
(1) 1753/     84F : FE E0               		cp	0E0h
(1) 1754/     851 : 28 18               		jr	z,.siln_pwm
(1) 1755/     853 : C9                  		ret
(1) 1756/     854 :                     .siln_psg_n:
(1) 1757/     854 : AF                  		xor	a
(1) 1758/     855 : 32 F2 1C            		ld	(psgHatMode),a
(1) 1759/     858 :                     .siln_psg:
(1) 1760/     858 : CF                  		rst	8
(1) 1761/     859 : DD 21 4F 16         		ld	ix,psgcom
(1) 1762/     85D : 18 16               		jr	.rcyl_com
(1) 1763/     85F :                     
(1) 1764/     85F :                     ; --------------------------------
(1) 1765/     85F :                     
(1) 1766/     85F :                     .siln_pcm:
(1) 1767/     85F : 3E 01               		ld	a,1
(1) 1768/     861 : 32 E1 1B            		ld	(mcdUpd),a
(1) 1769/     864 : CF                  		rst	8
(1) 1770/     865 : DD 21 D7 15         		ld	ix,pcmcom
(1) 1771/     869 : 18 0A               		jr	.rcyl_com
(1) 1772/     86B :                     .siln_pwm:
(1) 1773/     86B : 3E 01               		ld	a,1
(1) 1774/     86D : 32 E0 1B            		ld	(marsUpd),a
(1) 1775/     870 : CF                  		rst	8
(1) 1776/     871 : DD 21 17 16         		ld	ix,pwmcom
(1) 1777/     875 :                     ; 		jr	.rcyl_com
(1) 1778/     875 :                     
(1) 1779/     875 :                     ; --------------------------------
(1) 1780/     875 :                     
(1) 1781/     875 :                     .rcyl_com:
(1) 1782/     875 : 06 00               		ld	b,0
(1) 1783/     877 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1784/     87A : DD 09               		add	ix,bc
(1) 1785/     87C : DD 36 00 04         		ld	(ix),100b	; key-cut
(1) 1786/     880 : C9                  		ret
(1) 1787/     881 :                     
(1) 1788/     881 :                     ; --------------------------------
(1) 1789/     881 :                     
(1) 1790/     881 :                     .siln_dac:
(1) 1791/     881 : CD 3E 13            		call	dac_off
(1) 1792/     884 :                     .siln_fm:
(1) 1793/     884 : CD 69 0A            		call	.fm_keyoff
(1) 1794/     887 : C3 71 0A            		jp	.fm_tloff
(1) 1795/     88A :                     
(1) 1796/     88A :                     ; ----------------------------------------
(1) 1797/     88A :                     ; Process channel now
(1) 1798/     88A :                     ; iy - Table
(1) 1799/     88A :                     ; ix - Tracker channel
(1) 1800/     88A :                     .linked:
(1) 1801/     88A : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1802/     88B : 47                  		ld	b,a		; b - flags to check
(1) 1803/     88C : E6 0F               		and	00001111b	; evin flags?
(1) 1804/     88E : C8                  		ret	z
(1) 1805/     88F : 78                  		ld	a,b
(1) 1806/     890 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1807/     892 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1808/     893 : FD E5               		push	iy		; table+10h instrment data
(1) 1809/     895 : D5                  		push	de
(1) 1810/     896 : DD E1               		pop	ix
(1) 1811/     898 : E1                  		pop	hl
(1) 1812/     899 : 11 10 00            		ld	de,10h		; Go to stored inst data
(1) 1813/     89C : 19                  		add	hl,de
(1) 1814/     89D :                     
(1) 1815/     89D :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1816/     89D :                     	; iy - Our chip table
(1) 1817/     89D :                     	; ix - Track channel
(1) 1818/     89D :                     	; hl - Intrument data
(1) 1819/     89D : CB 40               		bit	0,b		; Note
(1) 1820/     89F : C4 1C 0F            		call	nz,.note
(1) 1821/     8A2 : CB 48               		bit	1,b		; Intrument
(1) 1822/     8A4 : C4 6E 0D            		call	nz,.inst
(1) 1823/     8A7 : CF                  		rst	8
(1) 1824/     8A8 : CB 50               		bit	2,b		; Volume
(1) 1825/     8AA : C4 65 0D            		call	nz,.volu
(1) 1826/     8AD : CB 58               		bit	3,b		; Effect
(1) 1827/     8AF : C4 63 0C            		call	nz,.effc
(1) 1828/     8B2 :                     
(1) 1829/     8B2 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1830/     8B3 : E6 70               		and	01110000b	; Filter bits
(1) 1831/     8B5 : 0F                  		rrca
(1) 1832/     8B6 : 0F                  		rrca
(1) 1833/     8B7 : 0F                  		rrca
(1) 1834/     8B8 : CF                  		rst	8
(1) 1835/     8B9 : 16 00               		ld	d,0
(1) 1836/     8BB : 5F                  		ld	e,a
(1) 1837/     8BC : 21 C5 08            		ld	hl,.mk_list
(1) 1838/     8BF : 19                  		add	hl,de
(1) 1839/     8C0 : 7E                  		ld	a,(hl)
(1) 1840/     8C1 : 23                  		inc	hl
(1) 1841/     8C2 : 66                  		ld	h,(hl)
(1) 1842/     8C3 : 6F                  		ld	l,a
(1) 1843/     8C4 : E9                  		jp	(hl)
(1) 1844/     8C5 :                     ; --------------------------------
(1) 1845/     8C5 :                     .mk_list:
(1) 1846/     8C5 : 1B 09               		dw .mk_psg
(1) 1847/     8C7 : D3 08               		dw .mk_psgn
(1) 1848/     8C9 : 7F 09               		dw .mk_fm
(1) 1849/     8CB : FF 09               		dw .mk_fmspc
(1) 1850/     8CD : 53 0B               		dw .mk_dac
(1) 1851/     8CF : AA 0B               		dw .mk_pcm
(1) 1852/     8D1 : 42 0C               		dw .mk_pwm
(1) 1853/     8D3 :                     
(1) 1854/     8D3 :                     ; --------------------------------
(1) 1855/     8D3 :                     ; PSGN
(1) 1856/     8D3 :                     ; --------------------------------
(1) 1857/     8D3 :                     
(1) 1858/     8D3 :                     .mk_psgn:
(1) 1859/     8D3 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1860/     8D6 : DD E5               		push	ix
(1) 1861/     8D8 : DD 21 52 16         		ld	ix,psgcom+3	; Steal PSG3
(1) 1862/     8DC : CB 40               		bit	0,b
(1) 1863/     8DE : CA 6A 09            		jp	z,.psg_keyon
(1) 1864/     8E1 : CF                  		rst	8
(1) 1865/     8E2 : FE FE               		cp	-2
(1) 1866/     8E4 : 28 21               		jr	z,.kycut_psgn
(1) 1867/     8E6 : FE FF               		cp	-1
(1) 1868/     8E8 : 28 10               		jr	z,.kyoff_psgn
(1) 1869/     8EA : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1870/     8EE : 5F                  		ld	e,a
(1) 1871/     8EF : 3A F2 1C            		ld	a,(psgHatMode)	; Tone 3?
(1) 1872/     8F2 : E6 03               		and	011b
(1) 1873/     8F4 : FE 03               		cp	011b
(1) 1874/     8F6 : 20 72               		jr	nz,.psg_keyon	; Normal
(1) 1875/     8F8 : 18 42               		jr	.from_psgn	; Tone 3
(1) 1876/     8FA :                     
(1) 1877/     8FA :                     ; --------------------------------
(1) 1878/     8FA :                     ; PSG
(1) 1879/     8FA :                     ; --------------------------------
(1) 1880/     8FA :                     
(1) 1881/     8FA :                     ; -1
(1) 1882/     8FA :                     .kyoff_psgn:
(1) 1883/     8FA : CD 14 09            		call	.kypsgn_hatoff
(1) 1884/     8FD :                     .kyoff_psg:
(1) 1885/     8FD : 0E 02               		ld	c,010b
(1) 1886/     8FF : DD 71 00            		ld	(ix),c
(1) 1887/     902 : DD E1               		pop	ix
(1) 1888/     904 : C3 91 0F            		jp	.chnl_ulnkoff
(1) 1889/     907 :                     ; -2
(1) 1890/     907 :                     .kycut_psgn:
(1) 1891/     907 : CD 14 09            		call	.kypsgn_hatoff
(1) 1892/     90A :                     .kycut_psg:
(1) 1893/     90A : 0E 04               		ld	c,100b
(1) 1894/     90C : DD 71 00            		ld	(ix),c
(1) 1895/     90F : DD E1               		pop	ix
(1) 1896/     911 : C3 8B 0F            		jp	.chnl_ulnkcut
(1) 1897/     914 :                     .kypsgn_hatoff:
(1) 1898/     914 : 3E 00               		ld	a,000b
(1) 1899/     916 : 32 F2 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 1900/     919 : CF                  		rst	8
(1) 1901/     91A : C9                  		ret
(1) 1902/     91B :                     
(1) 1903/     91B :                     .mk_psg:
(1) 1904/     91B : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1905/     91E : DD E5               		push	ix
(1) 1906/     920 : CF                  		rst	8
(1) 1907/     921 : DD 21 4F 16         		ld	ix,psgcom	; ix - psgcom
(1) 1908/     925 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1909/     928 : 16 00               		ld	d,0
(1) 1910/     92A : DD 19               		add	ix,de
(1) 1911/     92C : CB 40               		bit	0,b
(1) 1912/     92E : 28 3A               		jr	z,.psg_keyon
(1) 1913/     930 : FE FE               		cp	-2
(1) 1914/     932 : 28 D6               		jr	z,.kycut_psg
(1) 1915/     934 : FE FF               		cp	-1
(1) 1916/     936 : 28 C5               		jr	z,.kyoff_psg
(1) 1917/     938 : DD 36 00 01         		ld	(ix+COM),001b	; Key ON
(1) 1918/     93C :                     .from_psgn:
(1) 1919/     93C : CF                  		rst	8
(1) 1920/     93D : 16 00               		ld	d,0			; de - note*2
(1) 1921/     93F : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; Freq index
(1) 1922/     942 : 21 27 14            		ld	hl,psgFreq_List-(36*2)	; <-- 48
(1) 1923/     945 : 19                  		add	hl,de
(1) 1924/     946 : 7E                  		ld	a,(hl)
(1) 1925/     947 : 23                  		inc	hl
(1) 1926/     948 : 66                  		ld	h,(hl)
(1) 1927/     949 : 6F                  		ld	l,a
(1) 1928/     94A : 3A 3E 00            		ld	a,(palMode)
(1) 1929/     94D : B7                  		or	a
(1) 1930/     94E : 28 01               		jr	z,.not_palp
(1) 1931/     950 : 2B                  		dec	hl
(1) 1932/     951 :                     .not_palp:
(1) 1933/     951 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1934/     954 : 07                  		rlca				; << 3
(1) 1935/     955 : 07                  		rlca
(1) 1936/     956 : CF                  		rst	8
(1) 1937/     957 : 07                  		rlca
(1) 1938/     958 : 57                  		ld	d,a
(1) 1939/     959 : E6 F8               		and	11111000b
(1) 1940/     95B : 5F                  		ld	e,a
(1) 1941/     95C : 7A                  		ld	a,d
(1) 1942/     95D : E6 07               		and	00000111b
(1) 1943/     95F : 57                  		ld	d,a
(1) 1944/     960 : 37                  		scf
(1) 1945/     961 : 3F                  		ccf
(1) 1946/     962 : ED 52               		sbc	hl,de
(1) 1947/     964 : DD 75 1C            		ld	(ix+DTL),l
(1) 1948/     967 : DD 74 20            		ld	(ix+DTH),h
(1) 1949/     96A :                     .psg_keyon:
(1) 1950/     96A : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1951/     96D : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1952/     970 : ED 44               		neg	a
(1) 1953/     972 : CF                  		rst	8
(1) 1954/     973 : 87                  		add	a,a
(1) 1955/     974 : 87                  		add	a,a
(1) 1956/     975 : 30 02               		jr	nc,.vmuch
(1) 1957/     977 : 3E FF               		ld	a,-1
(1) 1958/     979 :                     .vmuch:
(1) 1959/     979 : DD 77 30            		ld	(ix+PVOL),a
(1) 1960/     97C : DD E1               		pop	ix
(1) 1961/     97E : C9                  		ret
(1) 1962/     97F :                     
(1) 1963/     97F :                     ; --------------------------------
(1) 1964/     97F :                     ; FM
(1) 1965/     97F :                     ; --------------------------------
(1) 1966/     97F :                     
(1) 1967/     97F :                     .mk_fm:
(1) 1968/     97F : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 1969/     982 : CB 40               		bit	0,b			; NEW note?
(1) 1970/     984 : 28 65               		jr	z,.mkfm_set
(1) 1971/     986 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 1972/     989 : FE FE               		cp	-2
(1) 1973/     98B : CA 60 0A            		jp	z,.fm_cut
(1) 1974/     98E : FE FF               		cp	-1
(1) 1975/     990 : CA 5A 0A            		jp	z,.fm_off
(1) 1976/     993 :                     ; 		call	.fm_tloff
(1) 1977/     993 : CF                  		rst	8
(1) 1978/     994 : 79                  		ld	a,c
(1) 1979/     995 : FE 06               		cp	6
(1) 1980/     997 : 20 05               		jr	nz,.not_dac
(1) 1981/     999 : CD 3E 13            		call	dac_off
(1) 1982/     99C : 18 15               		jr	.not_dspc
(1) 1983/     99E :                     .not_dac:
(1) 1984/     99E :                     ; 		ld	a,c
(1) 1985/     99E : FE 02               		cp	2
(1) 1986/     9A0 : 20 11               		jr	nz,.not_dspc
(1) 1987/     9A2 : 3A F3 1C            		ld	a,(fmSpecial)
(1) 1988/     9A5 : B7                  		or	a
(1) 1989/     9A6 : 28 0B               		jr	z,.not_dspc
(1) 1990/     9A8 : 11 00 27            		ld	de,2700h		; CH3 off
(1) 1991/     9AB : CD 13 13            		call	fm_send_1
(1) 1992/     9AE : 3E 00               		ld	a,0
(1) 1993/     9B0 : 32 F3 1C            		ld	(fmSpecial),a
(1) 1994/     9B3 :                     .not_dspc:
(1) 1995/     9B3 : CD 69 0A            		call	.fm_keyoff
(1) 1996/     9B6 : C5                  		push	bc
(1) 1997/     9B7 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1998/     9BA : 47                  		ld	b,a
(1) 1999/     9BB : E6 1F               		and	00011111b
(1) 2000/     9BD : 5F                  		ld	e,a
(1) 2001/     9BE : 16 00               		ld	d,0
(1) 2002/     9C0 : 21 57 14            		ld	hl,fmFreq_List
(1) 2003/     9C3 : 19                  		add	hl,de
(1) 2004/     9C4 : 7E                  		ld	a,(hl)
(1) 2005/     9C5 : CF                  		rst	8
(1) 2006/     9C6 : 23                  		inc	hl
(1) 2007/     9C7 : 66                  		ld	h,(hl)
(1) 2008/     9C8 : 6F                  		ld	l,a
(1) 2009/     9C9 : 3A 3E 00            		ld	a,(palMode)
(1) 2010/     9CC : B7                  		or	a
(1) 2011/     9CD : 28 04               		jr	z,.not_pal
(1) 2012/     9CF : 11 04 00            		ld	de,4
(1) 2013/     9D2 : 19                  		add	hl,de
(1) 2014/     9D3 :                     .not_pal:
(1) 2015/     9D3 : 78                  		ld	a,b
(1) 2016/     9D4 : E6 E0               		and	11100000b
(1) 2017/     9D6 : 0F                  		rrca
(1) 2018/     9D7 : 0F                  		rrca
(1) 2019/     9D8 : B4                  		or	h
(1) 2020/     9D9 : 67                  		ld	h,a
(1) 2021/     9DA : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2022/     9DD : CF                  		rst	8
(1) 2023/     9DE : AF                  		xor	a			; Clear high
(1) 2024/     9DF : 3F                  		ccf				; Clear carry
(1) 2025/     9E0 : CB 23               		sla	e			; << 2
(1) 2026/     9E2 : CB 23               		sla	e
(1) 2027/     9E4 : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2028/     9E5 : 57                  		ld	d,a
(1) 2029/     9E6 : 19                  		add	hl,de
(1) 2030/     9E7 : CD 88 0A            		call	.fm_setfreq
(1) 2031/     9EA : C1                  		pop	bc
(1) 2032/     9EB :                     
(1) 2033/     9EB :                     ; --------------------------------
(1) 2034/     9EB :                     
(1) 2035/     9EB :                     .mkfm_set:
(1) 2039/     9EB : CD 1D 0B            		call	.fm_wrtalpan		; Panning and effects
(1) 2040/     9EE : CD 9F 0A            		call	.fm_wrtlvol		; FM volume control
(1) 2041/     9F1 : FD 7E 0F            		ld	a,(iy+ztbl_FM_keys)	; 0Fh - keys ***
(1) 2042/     9F4 : E6 F0               		and	11110000b
(1) 2043/     9F6 : B1                  		or	c			; Merge FM channel
(1) 2044/     9F7 : 5F                  		ld	e,a
(1) 2045/     9F8 : 16 28               		ld	d,28h
(1) 2046/     9FA : CD 13 13            		call	fm_send_1		; Set keys
(1) 2047/     9FD : CF                  		rst	8
(1) 2048/     9FE :                     .nofm_note:
(1) 2049/     9FE : C9                  		ret
(1) 2051/     9FF :                     
(1) 2052/     9FF :                     ; --------------------------------
(1) 2053/     9FF :                     ; FM3 special
(1) 2054/     9FF :                     ; --------------------------------
(1) 2055/     9FF :                     
(1) 2056/     9FF :                     .mk_fmspc:
(1) 2057/     9FF : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - KeyID (011b always)
(1) 2058/     A02 : CB 40               		bit	0,b		; NEW Note?
(1) 2059/     A04 : 28 E5               		jr	z,.mkfm_set
(1) 2060/     A06 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2061/     A09 : FE FE               		cp	-2
(1) 2062/     A0B : CA 60 0A            		jp	z,.fm_cut
(1) 2063/     A0E : FE FF               		cp	-1
(1) 2064/     A10 : CA 5A 0A            		jp	z,.fm_off
(1) 2065/     A13 : CD 69 0A            		call	.fm_keyoff
(1) 2066/     A16 : 21 DA 1B            		ld	hl,fmcach_list	; Read external freqs
(1) 2067/     A19 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2068/     A1C : E6 07               		and	0111b
(1) 2069/     A1E : 16 00               		ld	d,0
(1) 2070/     A20 : 87                  		add	a,a
(1) 2071/     A21 : 5F                  		ld	e,a
(1) 2072/     A22 : CF                  		rst	8
(1) 2073/     A23 : 19                  		add	hl,de
(1) 2074/     A24 : 7E                  		ld	a,(hl)
(1) 2075/     A25 : 23                  		inc	hl
(1) 2076/     A26 : 66                  		ld	h,(hl)
(1) 2077/     A27 : 6F                  		ld	l,a
(1) 2078/     A28 : CF                  		rst	8
(1) 2079/     A29 : 11 20 00            		ld	de,20h		; point to regs
(1) 2080/     A2C : 19                  		add	hl,de
(1) 2081/     A2D : DD E5               		push	ix
(1) 2082/     A2F : DD 21 52 0A         		ld	ix,.spcreglist
(1) 2083/     A33 : 06 08               		ld	b,8
(1) 2084/     A35 :                     .wr_spc:
(1) 2085/     A35 : DD 56 00            		ld	d,(ix)
(1) 2086/     A38 : 5E                  		ld	e,(hl)
(1) 2087/     A39 : CD 13 13            		call	fm_send_1
(1) 2088/     A3C : CF                  		rst	8
(1) 2089/     A3D : 23                  		inc	hl
(1) 2090/     A3E : DD 23               		inc	ix
(1) 2091/     A40 : 10 F3               		djnz	.wr_spc
(1) 2092/     A42 : DD E1               		pop	ix
(1) 2093/     A44 : 11 40 27            		ld	de,2740h	; CH3 on
(1) 2094/     A47 : CD 13 13            		call	fm_send_1
(1) 2095/     A4A : 3E 01               		ld	a,1
(1) 2096/     A4C : 32 F3 1C            		ld	(fmSpecial),a
(1) 2097/     A4F : C3 EB 09            		jp	.mkfm_set
(1) 2098/     A52 :                     .spcreglist:
(1) 2099/     A52 : AD A9               		db 0ADh,0A9h
(1) 2100/     A54 : AC A8               		db 0ACh,0A8h
(1) 2101/     A56 : AE AA               		db 0AEh,0AAh
(1) 2102/     A58 : A6 A2               		db 0A6h,0A2h
(1) 2103/     A5A :                     
(1) 2104/     A5A :                     ; ----------------------------------------
(1) 2105/     A5A :                     
(1) 2106/     A5A :                     .fm_off:
(1) 2107/     A5A : CD 69 0A            		call	.fm_keyoff
(1) 2108/     A5D : C3 91 0F            		jp	.chnl_ulnkoff
(1) 2109/     A60 :                     .fm_cut:
(1) 2110/     A60 : CD 69 0A            		call	.fm_keyoff
(1) 2111/     A63 : CD 71 0A            		call	.fm_tloff
(1) 2112/     A66 : C3 8B 0F            		jp	.chnl_ulnkcut
(1) 2113/     A69 :                     
(1) 2114/     A69 :                     ; ----------------------------------------
(1) 2115/     A69 :                     
(1) 2116/     A69 :                     .fm_keyoff:
(1) 2117/     A69 : 16 28               		ld	d,28h
(1) 2118/     A6B : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2119/     A6E : C3 13 13            		jp	fm_send_1
(1) 2120/     A71 :                     .fm_tloff:
(1) 2121/     A71 : 06 04               		ld	b,4
(1) 2122/     A73 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2123/     A76 : 79                  		ld	a,c
(1) 2124/     A77 : E6 03               		and	011b
(1) 2125/     A79 : F6 40               		or	40h	; TL regs
(1) 2126/     A7B : 1E 7F               		ld	e,7Fh
(1) 2127/     A7D :                     .tl_down:
(1) 2128/     A7D : 57                  		ld	d,a
(1) 2129/     A7E :                     ; 		ld	e,7Fh
(1) 2130/     A7E : CD 0F 13            		call	fm_autoreg
(1) 2131/     A81 : CF                  		rst	8
(1) 2132/     A82 : 7A                  		ld	a,d
(1) 2133/     A83 : C6 04               		add	a,4
(1) 2134/     A85 : 10 F6               		djnz	.tl_down
(1) 2135/     A87 : C9                  		ret
(1) 2136/     A88 :                     ; c - KeyID
(1) 2137/     A88 :                     .fm_setfreq:
(1) 2138/     A88 : 79                  		ld	a,c
(1) 2139/     A89 : E6 03               		and	011b
(1) 2140/     A8B : F6 A4               		or	0A4h
(1) 2141/     A8D : 57                  		ld	d,a
(1) 2142/     A8E : 5C                  		ld	e,h
(1) 2143/     A8F : CF                  		rst	8
(1) 2144/     A90 : CD 0F 13            		call	fm_autoreg
(1) 2145/     A93 : 79                  		ld	a,c
(1) 2146/     A94 : E6 03               		and	011b
(1) 2147/     A96 : F6 A0               		or	0A0h
(1) 2148/     A98 : 57                  		ld	d,a
(1) 2149/     A99 : 5D                  		ld	e,l
(1) 2150/     A9A : CD 0F 13            		call	fm_autoreg
(1) 2151/     A9D : CF                  		rst	8
(1) 2152/     A9E : C9                  		ret
(1) 2153/     A9F :                     
(1) 2154/     A9F :                     ; --------------------------------
(1) 2155/     A9F :                     ; WRITE TL volume
(1) 2156/     A9F :                     
(1) 2157/     A9F :                     .fm_wrtlvol:
(1) 2158/     A9F : 21 DA 1B            		ld	hl,fmcach_list
(1) 2159/     AA2 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2160/     AA5 : E6 07               		and	0111b
(1) 2161/     AA7 : 16 00               		ld	d,0
(1) 2162/     AA9 : CF                  		rst	8
(1) 2163/     AAA : 87                  		add	a,a
(1) 2164/     AAB : 5F                  		ld	e,a
(1) 2165/     AAC : 19                  		add	hl,de
(1) 2166/     AAD : 7E                  		ld	a,(hl)
(1) 2167/     AAE : 23                  		inc	hl
(1) 2168/     AAF : 66                  		ld	h,(hl)
(1) 2169/     AB0 : 6F                  		ld	l,a
(1) 2170/     AB1 : 23                  		inc	hl
(1) 2171/     AB2 : 23                  		inc	hl
(1) 2172/     AB3 : 23                  		inc	hl
(1) 2173/     AB4 : CF                  		rst	8
(1) 2174/     AB5 : 23                  		inc	hl		; Point to TL's
(1) 2175/     AB6 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2176/     AB9 : E6 03               		and	011b
(1) 2177/     ABB : F6 40               		or	40h		; TL registers
(1) 2178/     ABD : 57                  		ld	d,a
(1) 2179/     ABE :                     ; d - 40h+
(1) 2180/     ABE :                     ; hl - TL data
(1) 2181/     ABE :                     ; .fm_wrtlvol:
(1) 2182/     ABE : C5                  		push	bc
(1) 2183/     ABF : E5                  		push	hl
(1) 2184/     AC0 : 21 15 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2185/     AC3 : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; Read 0B0h copy
(1) 2186/     AC6 : E6 07               		and	0111b
(1) 2187/     AC8 : 06 00               		ld	b,0
(1) 2188/     ACA : 4F                  		ld	c,a
(1) 2189/     ACB : 09                  		add	hl,bc
(1) 2190/     ACC : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2191/     ACF : CF                  		rst	8
(1) 2192/     AD0 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2193/     AD3 : 4F                  		ld	c,a			; c - Current Volume
(1) 2194/     AD4 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2195/     AD5 : E1                  		pop	hl
(1) 2196/     AD6 : CB 08               		rrc	b			; OP1
(1) 2197/     AD8 : DC 03 0B            		call	c,.write_tl
(1) 2198/     ADB : 23                  		inc	hl
(1) 2199/     ADC : 14                  		inc	d
(1) 2200/     ADD : 14                  		inc	d
(1) 2201/     ADE : CF                  		rst	8
(1) 2202/     ADF : 14                  		inc	d
(1) 2203/     AE0 : 14                  		inc	d
(1) 2204/     AE1 : CB 08               		rrc	b			; OP2
(1) 2205/     AE3 : DC 03 0B            		call	c,.write_tl
(1) 2206/     AE6 : 23                  		inc	hl
(1) 2207/     AE7 : 14                  		inc	d
(1) 2208/     AE8 : 14                  		inc	d
(1) 2209/     AE9 : 14                  		inc	d
(1) 2210/     AEA : 14                  		inc	d
(1) 2211/     AEB : CB 08               		rrc	b			; OP3
(1) 2212/     AED : DC 03 0B            		call	c,.write_tl
(1) 2213/     AF0 : 23                  		inc	hl
(1) 2214/     AF1 : CF                  		rst	8
(1) 2215/     AF2 : 14                  		inc	d
(1) 2216/     AF3 : 14                  		inc	d
(1) 2217/     AF4 : 14                  		inc	d
(1) 2218/     AF5 : 14                  		inc	d
(1) 2219/     AF6 : CB 08               		rrc	b			; OP4
(1) 2220/     AF8 : DC 03 0B            		call	c,.write_tl
(1) 2221/     AFB : 23                  		inc	hl
(1) 2222/     AFC : 14                  		inc	d
(1) 2223/     AFD : 14                  		inc	d
(1) 2224/     AFE : 14                  		inc	d
(1) 2225/     AFF : 14                  		inc	d
(1) 2226/     B00 : CF                  		rst	8
(1) 2227/     B01 : C1                  		pop	bc
(1) 2228/     B02 : C9                  		ret
(1) 2229/     B03 :                     .write_tl:
(1) 2230/     B03 : 7E                  		ld	a,(hl)
(1) 2231/     B04 : 91                  		sub	a,c			; reg - volume
(1) 2232/     B05 : F2 0A 0B            		jp	p,.keep_tlmx
(1) 2233/     B08 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2234/     B0A :                     .keep_tlmx:
(1) 2235/     B0A : C5                  		push	bc
(1) 2236/     B0B : 5F                  		ld	e,a
(1) 2237/     B0C : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2238/     B0F : CD 0F 13            		call	fm_autoreg
(1) 2239/     B12 : CF                  		rst	8
(1) 2240/     B13 : C1                  		pop	bc
(1) 2241/     B14 : C9                  		ret
(1) 2242/     B15 :                     ; Jump carry list
(1) 2243/     B15 :                     .fm_cindx:
(1) 2244/     B15 : 08                  		db 1000b
(1) 2245/     B16 : 08                  		db 1000b
(1) 2246/     B17 : 08                  		db 1000b
(1) 2247/     B18 : 08                  		db 1000b
(1) 2248/     B19 : 0C                  		db 1100b
(1) 2249/     B1A : 0E                  		db 1110b
(1) 2250/     B1B : 0E                  		db 1110b
(1) 2251/     B1C : 0F                  		db 1111b
(1) 2252/     B1D :                     ; c - KeyId
(1) 2253/     B1D :                     .fm_wrtalpan:
(1) 2254/     B1D : FD 7E 0C            		ld	a,(iy+ztbl_FM_alfd)	; 0B0h algorithm
(1) 2255/     B20 : 5F                  		ld	e,a
(1) 2256/     B21 : 79                  		ld	a,c
(1) 2257/     B22 : E6 03               		and	011b
(1) 2258/     B24 : F6 B0               		or	0B0h
(1) 2259/     B26 : 57                  		ld	d,a
(1) 2260/     B27 : CD 0F 13            		call	fm_autoreg		; Write algorithm
(1) 2261/     B2A : CF                  		rst	8
(1) 2262/     B2B : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2263/     B2E : 2F                  		cpl				; REVERSE bits
(1) 2264/     B2F : E6 30               		and	00110000b
(1) 2265/     B31 : 07                  		rlca				; << 2
(1) 2266/     B32 : 07                  		rlca
(1) 2267/     B33 : 5F                  		ld	e,a			; save as e
(1) 2268/     B34 : FD 7E 0D            		ld	a,(iy+ztbl_FM_pmam)	; 0B4h %00aa0ppp
(1) 2269/     B37 : E6 3F               		and	00111111b
(1) 2270/     B39 : B3                  		or	e			; Merge panning
(1) 2271/     B3A : 5F                  		ld	e,a
(1) 2272/     B3B : 79                  		ld	a,c
(1) 2273/     B3C : CF                  		rst	8
(1) 2274/     B3D : E6 03               		and	011b
(1) 2275/     B3F : F6 B4               		or	0B4h
(1) 2276/     B41 : 57                  		ld	d,a
(1) 2277/     B42 : CD 0F 13            		call	fm_autoreg
(1) 2278/     B45 : FD 7E 0E            		ld	a,(iy+ztbl_FM_lfo)	; Read LFO
(1) 2279/     B48 : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2280/     B4A : 28 06               		jr	z,.no_lfo
(1) 2281/     B4C : 5F                  		ld	e,a
(1) 2282/     B4D : 16 22               		ld	d,22h
(1) 2283/     B4F : CD 13 13            		call	fm_send_1
(1) 2284/     B52 :                     .no_lfo:
(1) 2285/     B52 : C9                  		ret
(1) 2286/     B53 :                     
(1) 2287/     B53 :                     ; --------------------------------
(1) 2288/     B53 :                     ; DAC
(1) 2289/     B53 :                     ; --------------------------------
(1) 2290/     B53 :                     
(1) 2291/     B53 :                     .mk_dac:
(1) 2292/     B53 : CB 40               		bit	0,b
(1) 2293/     B55 : C8                  		ret	z
(1) 2294/     B56 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2295/     B59 : FE FE               		cp	-2
(1) 2296/     B5B : CA 7B 0B            		jp	z,.dac_cut
(1) 2297/     B5E : FE FF               		cp	-1
(1) 2298/     B60 : CA 81 0B            		jp	z,.dac_off
(1) 2299/     B63 : CD 84 0B            		call	.dac_pitch
(1) 2300/     B66 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2301/     B69 : 2F                  		cpl				; REVERSE bits
(1) 2302/     B6A : E6 30               		and	00110000b
(1) 2303/     B6C : 07                  		rlca
(1) 2304/     B6D : 07                  		rlca
(1) 2305/     B6E : CF                  		rst	8
(1) 2306/     B6F : 5F                  		ld	e,a
(1) 2307/     B70 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2308/     B72 : CD 1E 13            		call	fm_send_2
(1) 2309/     B75 :                     ; 		bit	0,b			; Note update?
(1) 2310/     B75 :                     ; 		ret	z
(1) 2311/     B75 : CD 3E 13            		call	dac_off
(1) 2312/     B78 : C3 53 13            		jp	dac_play
(1) 2313/     B7B :                     .dac_cut:
(1) 2314/     B7B : CD 3E 13            		call	dac_off
(1) 2315/     B7E : C3 91 0F            		jp	.chnl_ulnkoff
(1) 2316/     B81 :                     .dac_off:
(1) 2317/     B81 : C3 8B 0F            		jp	.chnl_ulnkcut
(1) 2318/     B84 :                     .dac_pitch:
(1) 2319/     B84 : 16 00               		ld	d,0		; Freq index
(1) 2320/     B86 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2321/     B89 : 21 CF 14            		ld	hl,wavFreq_List-(2*36)
(1) 2322/     B8C : 19                  		add	hl,de
(1) 2323/     B8D : 7E                  		ld	a,(hl)
(1) 2324/     B8E : 23                  		inc	hl
(1) 2325/     B8F : 66                  		ld	h,(hl)
(1) 2326/     B90 : 6F                  		ld	l,a
(1) 2327/     B91 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2328/     B94 : CF                  		rst	8
(1) 2329/     B95 : AF                  		xor	a		; Clear high
(1) 2330/     B96 : 3F                  		ccf			; Clear carry
(1) 2331/     B97 : CB 23               		sla	e		; << 3
(1) 2332/     B99 : CB 23               		sla	e
(1) 2333/     B9B : CB 23               		sla	e
(1) 2334/     B9D : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2335/     B9E : 57                  		ld	d,a
(1) 2336/     B9F : 19                  		add	hl,de
(1) 2337/     BA0 : 22 F8 1B            		ld	(wave_Pitch),hl
(1) 2338/     BA3 : D9                  		exx			; *
(1) 2339/     BA4 : ED 5B F8 1B         		ld	de,(wave_Pitch)	; *
(1) 2340/     BA8 : D9                  		exx			; *
(1) 2341/     BA9 : C9                  		ret
(1) 2342/     BAA :                     
(1) 2343/     BAA :                     ; --------------------------------
(1) 2344/     BAA :                     ; PCM
(1) 2345/     BAA :                     ; --------------------------------
(1) 2346/     BAA :                     
(1) 2347/     BAA :                     .mk_pcm:
(1) 2349/     BAA : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2350/     BAD : 16 00               		ld	d,0
(1) 2351/     BAF : FD 5E 03            		ld	e,(iy+ztbl_Chip)		; e - Channel ID
(1) 2352/     BB2 : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2353/     BB5 : DD E5               		push	ix
(1) 2354/     BB7 : DD 21 D7 15         		ld	ix,pcmcom
(1) 2355/     BBB : DD 19               		add	ix,de
(1) 2356/     BBD : FE FE               		cp	-2
(1) 2357/     BBF : CA 33 0C            		jp	z,.pcm_cut
(1) 2358/     BC2 : FE FF               		cp	-1
(1) 2359/     BC4 : CA 2C 0C            		jp	z,.pcm_off
(1) 2360/     BC7 : CF                  		rst	8
(1) 2361/     BC8 : CB 40               		bit	0,b			; Note flag?
(1) 2362/     BCA : 20 0D               		jr	nz,.pcm_note
(1) 2363/     BCC : CB 58               		bit	3,b			; Effect flag?
(1) 2364/     BCE : 20 05               		jr	nz,.pcm_effc
(1) 2365/     BD0 : CB 50               		bit	2,b			; Volume flag?
(1) 2366/     BD2 : 20 01               		jr	nz,.pcm_effc
(1) 2367/     BD4 : C9                  		ret
(1) 2368/     BD5 :                     
(1) 2369/     BD5 :                     ; --------------------------------
(1) 2370/     BD5 :                     
(1) 2371/     BD5 :                     .pcm_effc:
(1) 2372/     BD5 : 1E 09               		ld	e,00001001b
(1) 2373/     BD7 : 18 0C               		jr	.mkpcm_wrton
(1) 2374/     BD9 :                     .pcm_note:
(1) 2375/     BD9 : 79                  		ld	a,c			; <-- Lazy panning reset
(1) 2376/     BDA : E6 30               		and	00110000b		; Read LR bits
(1) 2377/     BDC : B7                  		or	a
(1) 2378/     BDD : 20 04               		jr	nz,.mp_reset
(1) 2379/     BDF : FD 36 0A 00         		ld	(iy+ztbl_VarT0),0	; If 0, reset panning on table
(1) 2380/     BE3 :                     .mp_reset:
(1) 2381/     BE3 : 1E 01               		ld	e,00000001b		; KeyON request
(1) 2382/     BE5 :                     .mkpcm_wrton:
(1) 2383/     BE5 : DD 73 00            		ld	(ix),e			; Write key-on bit
(1) 2384/     BE8 :                     .mkpcm_proc:
(1) 2385/     BE8 : CD 43 0C            		call	.readfreq_pcm
(1) 2386/     BEB : 11 08 00            		ld	de,8			; Go to Pitch
(1) 2387/     BEE : DD 19               		add	ix,de
(1) 2388/     BF0 : DD 74 00            		ld	(ix),h			; Set pitch
(1) 2389/     BF3 : DD 19               		add	ix,de
(1) 2390/     BF5 : DD 75 00            		ld	(ix),l
(1) 2391/     BF8 : DD 19               		add	ix,de
(1) 2392/     BFA : 0E FF               		ld	c,-1
(1) 2393/     BFC : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2394/     BFF : FE 40               		cp	40h
(1) 2395/     C01 : 28 11               		jr	z,.vpcm_siln
(1) 2396/     C03 : 30 0F               		jr	nc,.vpcm_siln
(1) 2397/     C05 : B7                  		or	a
(1) 2398/     C06 : FA 14 0C            		jp	m,.vpcm_siln
(1) 2399/     C09 : 87                  		add	a,a
(1) 2400/     C0A : 47                  		ld	b,a
(1) 2401/     C0B : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2402/     C0E : 87                  		add	a,a		; * 2
(1) 2403/     C0F : 3F                  		ccf
(1) 2404/     C10 : 98                  		sbc	a,b		; + MASTER vol
(1) 2405/     C11 : 87                  		add	a,a		; *2
(1) 2406/     C12 : 38 03               		jr	c,.vpcm_carry
(1) 2407/     C14 :                     .vpcm_siln:
(1) 2408/     C14 : AF                  		xor	a
(1) 2409/     C15 : 18 01               		jr	.vpcm_zero
(1) 2410/     C17 :                     .vpcm_carry:
(1) 2411/     C17 : 81                  		add	a,c
(1) 2412/     C18 :                     .vpcm_zero:
(1) 2413/     C18 : DD 77 00            		ld	(ix),a
(1) 2414/     C1B : DD 19               		add	ix,de
(1) 2415/     C1D : FD 7E 0A            		ld	a,(iy+ztbl_VarT0)	; MCD panning
(1) 2416/     C20 : 2F                  		cpl
(1) 2417/     C21 : DD 77 00            		ld	(ix),a
(1) 2419/     C24 : 3E 01               		ld	a,1
(1) 2420/     C26 : 32 E1 1B            		ld	(mcdUpd),a
(1) 2422/     C29 : DD E1               		pop	ix
(1) 2423/     C2B : C9                  		ret
(1) 2424/     C2C :                     
(1) 2425/     C2C :                     ; --------------------------------
(1) 2426/     C2C :                     ; -1
(1) 2427/     C2C :                     .pcm_off:
(1) 2428/     C2C : CF                  		rst	8
(1) 2429/     C2D : DD 36 00 02         		ld	(ix),010b
(1) 2430/     C31 : 18 05               		jr	.pcm_setcoff
(1) 2431/     C33 :                     ; -2
(1) 2432/     C33 :                     .pcm_cut:
(1) 2433/     C33 : CF                  		rst	8
(1) 2434/     C34 : DD 36 00 04         		ld	(ix),100b
(1) 2435/     C38 :                     .pcm_setcoff:
(1) 2436/     C38 : 3E 01               		ld	a,1
(1) 2437/     C3A : 32 E1 1B            		ld	(mcdUpd),a
(1) 2438/     C3D : DD E1               		pop	ix
(1) 2439/     C3F : C3 91 0F            		jp	.chnl_ulnkoff
(1) 2443/     C42 :                     
(1) 2444/     C42 :                     ; --------------------------------
(1) 2445/     C42 :                     ; PWM
(1) 2446/     C42 :                     ; --------------------------------
(1) 2447/     C42 :                     
(1) 2448/     C42 :                     .mk_pwm:
(1) 2532/     C42 : C9                  		ret
(1) 2534/     C43 :                     
(1) 2535/     C43 :                     ; --------------------------------
(1) 2536/     C43 :                     ; SHARED routine
(1) 2537/     C43 :                     
(1) 2538/     C43 :                     .readfreq_pcm:
(1) 2539/     C43 : 21 2F 15            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2540/     C46 : 18 03               		jr	.set_wavfreq
(1) 2541/     C48 :                     .readfreq_pwm:
(1) 2542/     C48 : 21 CF 14            		ld	hl,wavFreq_List-(2*36)
(1) 2543/     C4B :                     .set_wavfreq:
(1) 2544/     C4B : 16 00               		ld	d,0		; Freq index
(1) 2545/     C4D : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2546/     C50 : 19                  		add	hl,de
(1) 2547/     C51 : 7E                  		ld	a,(hl)
(1) 2548/     C52 : 23                  		inc	hl
(1) 2549/     C53 : 66                  		ld	h,(hl)
(1) 2550/     C54 : 6F                  		ld	l,a
(1) 2551/     C55 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2552/     C58 : CF                  		rst	8
(1) 2553/     C59 : AF                  		xor	a		; Clear high
(1) 2554/     C5A : 3F                  		ccf			; Clear carry
(1) 2555/     C5B : CB 23               		sla	e		; << 2
(1) 2556/     C5D : CB 23               		sla	e
(1) 2557/     C5F : 9F                  		sbc	a,a		; -1 if carry is set
(1) 2558/     C60 : 57                  		ld	d,a
(1) 2559/     C61 : 19                  		add	hl,de
(1) 2560/     C62 : C9                  		ret
(1) 2561/     C63 :                     
(1) 2562/     C63 :                     ; ----------------------------------------
(1) 2563/     C63 :                     ; NEW effect
(1) 2564/     C63 :                     ; ----------------------------------------
(1) 2565/     C63 :                     
(1) 2566/     C63 :                     .effc:
(1) 2567/     C63 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2568/     C66 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2569/     C69 : 57                  		ld	d,a
(1) 2570/     C6A : CF                  		rst	8
(1) 2571/     C6B : FE 04               		cp	4			; Effect D?
(1) 2572/     C6D : 28 0F               		jr	z,.effc_D
(1) 2573/     C6F : FE 05               		cp	5			; Effect E?
(1) 2574/     C71 : 28 4E               		jr	z,.effc_E
(1) 2575/     C73 : FE 06               		cp	6			; Effect F?
(1) 2576/     C75 : 28 5F               		jr	z,.effc_F
(1) 2577/     C77 : CF                  		rst	8
(1) 2578/     C78 : FE 18               		cp	24			; Effect X?
(1) 2579/     C7A : CA F7 0C            		jp	z,.effc_X
(1) 2580/     C7D : C9                  		ret
(1) 2581/     C7E :                     
(1) 2582/     C7E :                     ; ----------------------------------------
(1) 2583/     C7E :                     ; Effect D
(1) 2584/     C7E :                     ;
(1) 2585/     C7E :                     ; Volume slide down
(1) 2586/     C7E :                     ;
(1) 2587/     C7E :                     ; 0xh-Exh - Normal
(1) 2588/     C7E :                     ; Fxh-Fxh - Fine slide / 2
(1) 2589/     C7E :                     ; ----------------------------------------
(1) 2590/     C7E :                     
(1) 2591/     C7E :                     .effc_D:
(1) 2592/     C7E : CD EB 0C            		call	.save_arg
(1) 2593/     C81 : 79                  		ld	a,c		; Setting == 0?
(1) 2594/     C82 : B7                  		or	a
(1) 2595/     C83 : C8                  		ret	z
(1) 2596/     C84 : E6 F0               		and	0F0h
(1) 2597/     C86 : 28 0F               		jr	z,.norm_down	; 0xh
(1) 2598/     C88 : FE F0               		cp	0F0h
(1) 2599/     C8A : 28 0D               		jr	z,.fine_down	; Fxh
(1) 2600/     C8C : CF                  		rst	8
(1) 2601/     C8D : 79                  		ld	a,c
(1) 2602/     C8E : E6 0F               		and	00Fh
(1) 2603/     C90 : 28 1D               		jr	z,.norm_up	; x0h
(1) 2604/     C92 : FE 0F               		cp	00Fh
(1) 2605/     C94 : 28 17               		jr	z,.fine_up	; xFh
(1) 2606/     C96 : C9                  		ret
(1) 2607/     C97 :                     ; Go down
(1) 2608/     C97 :                     .norm_down:
(1) 2609/     C97 : CB 21               		sla	c
(1) 2610/     C99 :                     .fine_down:
(1) 2611/     C99 : CB 21               		sla	c
(1) 2612/     C9B : 79                  		ld	a,c
(1) 2613/     C9C : E6 3C               		and	00111100b
(1) 2614/     C9E : 4F                  		ld	c,a
(1) 2615/     C9F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2616/     CA2 : CF                  		rst	8
(1) 2617/     CA3 : 91                  		sub	a,c
(1) 2618/     CA4 : 1E C0               		ld	e,0C0h
(1) 2619/     CA6 : BB                  		cp	e
(1) 2620/     CA7 : D2 BD 0C            		jp	nc,.vol_dvld
(1) 2621/     CAA : 7B                  		ld	a,e
(1) 2622/     CAB : 18 10               		jr 	.vol_dvld
(1) 2623/     CAD :                     ; Go up
(1) 2624/     CAD :                     .fine_up:
(1) 2625/     CAD : CB 39               		srl	c
(1) 2626/     CAF :                     .norm_up:
(1) 2627/     CAF : CB 39               		srl	c
(1) 2628/     CB1 : 79                  		ld	a,c
(1) 2629/     CB2 : E6 3C               		and	00111100b
(1) 2630/     CB4 : 4F                  		ld	c,a
(1) 2631/     CB5 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Current volume
(1) 2632/     CB8 : CF                  		rst	8
(1) 2633/     CB9 : 81                  		add	a,c
(1) 2634/     CBA : 38 01               		jr	c,.vol_dvld
(1) 2635/     CBC : AF                  		xor	a
(1) 2636/     CBD :                     .vol_dvld:
(1) 2637/     CBD : FD 77 07            		ld	(iy+ztbl_Volume),a
(1) 2638/     CC0 : C9                  		ret
(1) 2639/     CC1 :                     
(1) 2640/     CC1 :                     ; ----------------------------------------
(1) 2641/     CC1 :                     ; Effect E
(1) 2642/     CC1 :                     ; ----------------------------------------
(1) 2643/     CC1 :                     
(1) 2644/     CC1 :                     .effc_E:
(1) 2645/     CC1 : CD EB 0C            		call	.save_arg
(1) 2646/     CC4 : 79                  		ld	a,c
(1) 2647/     CC5 : E6 F0               		and	0F0h
(1) 2648/     CC7 : FE F0               		cp	0F0h
(1) 2649/     CC9 : C8                  		ret	z
(1) 2650/     CCA : FE E0               		cp	0E0h
(1) 2651/     CCC : C8                  		ret	z
(1) 2652/     CCD : CF                  		rst	8
(1) 2653/     CCE : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2654/     CD1 : 91                  		sub	a,c
(1) 2655/     CD2 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2656/     CD5 : C9                  		ret
(1) 2657/     CD6 :                     
(1) 2658/     CD6 :                     ; ----------------------------------------
(1) 2659/     CD6 :                     ; Effect F
(1) 2660/     CD6 :                     ; ----------------------------------------
(1) 2661/     CD6 :                     
(1) 2662/     CD6 :                     .effc_F:
(1) 2663/     CD6 : CD EB 0C            		call	.save_arg
(1) 2664/     CD9 : 79                  		ld	a,c
(1) 2665/     CDA : E6 F0               		and	0F0h
(1) 2666/     CDC : FE F0               		cp	0F0h
(1) 2667/     CDE : C8                  		ret	z
(1) 2668/     CDF : FE E0               		cp	0E0h
(1) 2669/     CE1 : C8                  		ret	z
(1) 2670/     CE2 : CF                  		rst	8
(1) 2671/     CE3 : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)
(1) 2672/     CE6 : 81                  		add	a,c
(1) 2673/     CE7 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2674/     CEA : C9                  		ret
(1) 2675/     CEB :                     
(1) 2676/     CEB :                     ; --------------------------------
(1) 2677/     CEB :                     ; e - got arg
(1) 2678/     CEB :                     ; c - new arg
(1) 2679/     CEB :                     .save_arg:
(1) 2680/     CEB : FD 4E 09            		ld	c,(iy+ztbl_EffBuff)	; Current slide setting
(1) 2681/     CEE : 7B                  		ld	a,e			; EffArg is non-zero?
(1) 2682/     CEF : B7                  		or	a
(1) 2683/     CF0 : 28 04               		jr	z,.D_cont		; 00h = slide continue
(1) 2684/     CF2 : 4F                  		ld	c,a
(1) 2685/     CF3 : FD 71 09            		ld	(iy+ztbl_EffBuff),c	; Store NEW slide setting
(1) 2686/     CF6 :                     .D_cont:
(1) 2687/     CF6 : C9                  		ret
(1) 2688/     CF7 :                     
(1) 2689/     CF7 :                     ; ----------------------------------------
(1) 2690/     CF7 :                     ; Effect X
(1) 2691/     CF7 :                     ;
(1) 2692/     CF7 :                     ; Common panning values:
(1) 2693/     CF7 :                     ;  00h LEFT
(1) 2694/     CF7 :                     ;  80h MIDDLE
(1) 2695/     CF7 :                     ; 0FFh RIGHT
(1) 2696/     CF7 :                     ; ----------------------------------------
(1) 2697/     CF7 :                     
(1) 2698/     CF7 :                     .effc_X:
(1) 2699/     CF7 : 16 00               		ld	d,0
(1) 2700/     CF9 : 7E                  		ld	a,(hl)
(1) 2701/     CFA : E6 F0               		and	11110000b
(1) 2702/     CFC : FE 80               		cp	80h		; PSG?
(1) 2703/     CFE : 28 1D               		jr	z,.res_pan
(1) 2704/     D00 : FE 90               		cp	90h		; PSGN?
(1) 2705/     D02 : 28 19               		jr	z,.res_pan
(1) 2706/     D04 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2707/     D06 : CC 27 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2708/     D09 :                     
(1) 2709/     D09 :                     	; ----------------------------------------
(1) 2710/     D09 :                     	; Common panning bits: %00LR0000
(1) 2711/     D09 :                     	; (REVERSE: 0-on 1-off)
(1) 2712/     D09 : FD 36 09 00         		ld	(iy+ztbl_EffBuff),0
(1) 2713/     D0D : CF                  		rst	8
(1) 2714/     D0E : E5                  		push	hl
(1) 2715/     D0F : 21 3D 0D            		ld	hl,.comn_panlist
(1) 2716/     D12 : 7B                  		ld	a,e
(1) 2717/     D13 : 07                  		rlca
(1) 2718/     D14 : 07                  		rlca
(1) 2719/     D15 : 07                  		rlca
(1) 2720/     D16 : E6 07               		and	0111b
(1) 2721/     D18 :                     ; 		ld	d,0
(1) 2722/     D18 : 5F                  		ld	e,a
(1) 2723/     D19 : CF                  		rst	8
(1) 2724/     D1A : 19                  		add	hl,de
(1) 2725/     D1B : 56                  		ld	d,(hl)
(1) 2726/     D1C : E1                  		pop	hl
(1) 2727/     D1D :                     .res_pan:
(1) 2728/     D1D : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2729/     D20 : E6 CF               		and	11001111b
(1) 2730/     D22 : B2                  		or	d
(1) 2731/     D23 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2732/     D26 : C9                  		ret
(1) 2733/     D27 :                     
(1) 2734/     D27 :                     	; ----------------------------------------
(1) 2735/     D27 :                     	; MCD panning
(1) 2736/     D27 :                     .pan_mcd:
(1) 2737/     D27 : E5                  		push	hl
(1) 2738/     D28 : D5                  		push	de
(1) 2739/     D29 : 16 00               		ld	d,0
(1) 2740/     D2B : 21 45 0D            		ld	hl,.pcm_panlist
(1) 2741/     D2E : 7B                  		ld	a,e
(1) 2742/     D2F : E6 F8               		and	0F8h
(1) 2743/     D31 : 0F                  		rrca
(1) 2744/     D32 : 0F                  		rrca
(1) 2745/     D33 : 0F                  		rrca
(1) 2746/     D34 : 5F                  		ld	e,a
(1) 2747/     D35 : 19                  		add	hl,de
(1) 2748/     D36 : 7E                  		ld	a,(hl)
(1) 2749/     D37 : FD 77 0A            		ld	(iy+ztbl_VarT0),a
(1) 2750/     D3A : D1                  		pop	de
(1) 2751/     D3B : E1                  		pop	hl
(1) 2752/     D3C : C9                  		ret
(1) 2753/     D3D :                     
(1) 2754/     D3D :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2755/     D3D :                     ; 00LR0000b
(1) 2756/     D3D :                     .comn_panlist:
(1) 2757/     D3D : 10                  		db 00010000b
(1) 2758/     D3E : 10                  		db 00010000b
(1) 2759/     D3F : 10                  		db 00010000b
(1) 2760/     D40 : 00                  		db 00000000b
(1) 2761/     D41 : 00                  		db 00000000b
(1) 2762/     D42 : 20                  		db 00100000b
(1) 2763/     D43 : 20                  		db 00100000b
(1) 2764/     D44 : 20                  		db 00100000b
(1) 2765/     D45 :                     
(1) 2766/     D45 :                     ; REVERSE OUTPUT BITS
(1) 2767/     D45 :                     ; RRRR | LLLL
(1) 2768/     D45 :                     .pcm_panlist:
(1) 2769/     D45 : F0                  		db 0F0h	; 00h
(1) 2770/     D46 : E0                  		db 0E0h
(1) 2771/     D47 : D0                  		db 0D0h	; 10h
(1) 2772/     D48 : C0                  		db 0C0h
(1) 2773/     D49 : B0                  		db 0B0h	; 20h
(1) 2774/     D4A : A0                  		db 0A0h
(1) 2775/     D4B : 90                  		db 090h	; 30h
(1) 2776/     D4C : 80                  		db 080h
(1) 2777/     D4D : 70                  		db 070h	; 40h
(1) 2778/     D4E : 60                  		db 060h
(1) 2779/     D4F : 50                  		db 050h	; 50h
(1) 2780/     D50 : 40                  		db 040h
(1) 2781/     D51 : 30                  		db 030h	; 60h
(1) 2782/     D52 : 20                  		db 020h
(1) 2783/     D53 : 10                  		db 010h	; 70h
(1) 2784/     D54 : 00                  		db 000h
(1) 2785/     D55 : 00                  		db 000h ; 80h
(1) 2786/     D56 : 01                  		db 001h
(1) 2787/     D57 : 02                  		db 002h ; 90h
(1) 2788/     D58 : 03                  		db 003h
(1) 2789/     D59 : 04                  		db 004h ; A0h
(1) 2790/     D5A : 05                  		db 005h
(1) 2791/     D5B : 06                  		db 006h ; B0h
(1) 2792/     D5C : 07                  		db 007h
(1) 2793/     D5D : 08                  		db 008h ; C0h
(1) 2794/     D5E : 09                  		db 009h
(1) 2795/     D5F : 0A                  		db 00Ah ; D0h
(1) 2796/     D60 : 0B                  		db 00Bh
(1) 2797/     D61 : 0C                  		db 00Ch ; E0h
(1) 2798/     D62 : 0D                  		db 00Dh
(1) 2799/     D63 : 0E                  		db 00Eh ; F0h
(1) 2800/     D64 : 0F                  		db 00Fh
(1) 2801/     D65 :                     
(1) 2802/     D65 :                     ; ----------------------------------------
(1) 2803/     D65 :                     ; NEW volume
(1) 2804/     D65 :                     ; ----------------------------------------
(1) 2805/     D65 :                     
(1) 2806/     D65 :                     .volu:
(1) 2807/     D65 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2808/     D68 : D6 40               		sub	a,64
(1) 2809/     D6A : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2810/     D6D : C9                  		ret
(1) 2811/     D6E :                     
(1) 2812/     D6E :                     ; ----------------------------------------
(1) 2813/     D6E :                     ; NEW instrument
(1) 2814/     D6E :                     ; ----------------------------------------
(1) 2815/     D6E :                     
(1) 2816/     D6E :                     .inst:
(1) 2817/     D6E : 7E                  		ld	a,(hl)
(1) 2818/     D6F : E6 F0               		and	11110000b
(1) 2819/     D71 : FE 80               		cp	080h
(1) 2820/     D73 : 28 24               		jr	z,.ins_psg
(1) 2821/     D75 : FE 90               		cp	090h
(1) 2822/     D77 : 28 1A               		jr	z,.ins_psgn
(1) 2823/     D79 : FE A0               		cp	0A0h
(1) 2824/     D7B : 28 52               		jr	z,.ins_fm
(1) 2825/     D7D : CF                  		rst	8
(1) 2826/     D7E : FE B0               		cp	0B0h
(1) 2827/     D80 : 28 4D               		jr	z,.ins_fm
(1) 2828/     D82 : FE C0               		cp	0C0h
(1) 2829/     D84 : CA 4D 0E            		jp	z,.ins_dac
(1) 2830/     D87 : FE D0               		cp	0D0h
(1) 2831/     D89 : CA A1 0E            		jp	z,.ins_pcm
(1) 2832/     D8C : FE E0               		cp	0E0h
(1) 2833/     D8E : CA D9 0E            		jp	z,.ins_pwm
(1) 2834/     D91 : CF                  		rst	8
(1) 2835/     D92 :                     .invl_ins:
(1) 2836/     D92 : C9                  		ret
(1) 2837/     D93 :                     
(1) 2838/     D93 :                     ; ----------------------------------------
(1) 2839/     D93 :                     ; PSG
(1) 2840/     D93 :                     
(1) 2841/     D93 :                     .ins_psgn:
(1) 2842/     D93 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2843/     D94 : E6 07               		and	0111b
(1) 2844/     D96 : 32 F2 1C            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2845/     D99 :                     .ins_psg:
(1) 2846/     D99 : CF                  		rst	8
(1) 2847/     D9A : DD E5               		push	ix
(1) 2848/     D9C : E5                  		push	hl
(1) 2849/     D9D : 23                  		inc	hl		; Skip ID
(1) 2850/     D9E : DD 21 4F 16         		ld	ix,psgcom	; Read psg control
(1) 2851/     DA2 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2852/     DA5 : 16 00               		ld	d,0
(1) 2853/     DA7 : DD 19               		add	ix,de
(1) 2854/     DA9 : 7E                  		ld	a,(hl)
(1) 2855/     DAA : CF                  		rst	8
(1) 2856/     DAB : 23                  		inc	hl
(1) 2857/     DAC : 7E                  		ld	a,(hl)
(1) 2858/     DAD : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2859/     DB0 : 23                  		inc	hl
(1) 2860/     DB1 : 7E                  		ld	a,(hl)
(1) 2861/     DB2 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2862/     DB5 : 23                  		inc	hl
(1) 2863/     DB6 : 7E                  		ld	a,(hl)
(1) 2864/     DB7 : CF                  		rst	8
(1) 2865/     DB8 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2866/     DBB : 23                  		inc	hl
(1) 2867/     DBC : 7E                  		ld	a,(hl)
(1) 2868/     DBD : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2869/     DC0 : 23                  		inc	hl
(1) 2870/     DC1 : 7E                  		ld	a,(hl)
(1) 2871/     DC2 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2872/     DC5 : 23                  		inc	hl
(1) 2873/     DC6 : 7E                  		ld	a,(hl)
(1) 2874/     DC7 : CF                  		rst	8
(1) 2875/     DC8 : DD 77 34            		ld	(ix+PARP),a	; ARP
(1) 2876/     DCB : E1                  		pop	hl
(1) 2877/     DCC : DD E1               		pop	ix
(1) 2878/     DCE : C9                  		ret
(1) 2879/     DCF :                     
(1) 2880/     DCF :                     ; ----------------------------------------
(1) 2881/     DCF :                     ; FM/FM3
(1) 2882/     DCF :                     
(1) 2883/     DCF :                     .ins_fm:
(1) 2884/     DCF : DD E5               		push	ix
(1) 2885/     DD1 : E5                  		push	hl
(1) 2886/     DD2 : C5                  		push	bc
(1) 2887/     DD3 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2888/     DD6 : E6 07               		and	0111b
(1) 2889/     DD8 : 16 00               		ld	d,0
(1) 2890/     DDA : 87                  		add	a,a
(1) 2891/     DDB : 5F                  		ld	e,a
(1) 2892/     DDC : DD 21 DA 1B         		ld	ix,fmcach_list
(1) 2893/     DE0 : DD 19               		add	ix,de
(1) 2894/     DE2 : CF                  		rst	8
(1) 2895/     DE3 : DD 5E 00            		ld	e,(ix)
(1) 2896/     DE6 : DD 23               		inc	ix
(1) 2897/     DE8 : DD 56 00            		ld	d,(ix)
(1) 2898/     DEB :                     
(1) 2899/     DEB :                     ; 		ld	a,(iy+ztbl_VarT1)	; 0Bh: DON'T reload flag
(1) 2900/     DEB :                     ; 		cp	b
(1) 2901/     DEB :                     ; 		jr	z,.same_patch
(1) 2902/     DEB :                     ; 		ld	(iy+ztbl_VarT1),b
(1) 2903/     DEB : 23                  		inc	hl		; Skip id and pitch
(1) 2904/     DEC : 23                  		inc	hl
(1) 2905/     DED : 46                  		ld	b,(hl)
(1) 2906/     DEE : 23                  		inc	hl
(1) 2907/     DEF : 4E                  		ld	c,(hl)
(1) 2908/     DF0 : 23                  		inc	hl
(1) 2909/     DF1 : 6E                  		ld	l,(hl)
(1) 2910/     DF2 : 61                  		ld	h,c
(1) 2911/     DF3 :                     
(1) 2912/     DF3 : FD 7E 0A            		ld	a,(iy+ztbl_VarT0)
(1) 2913/     DF6 : BC                  		cp	h
(1) 2914/     DF7 : 20 07               		jr	nz,.new_romdat
(1) 2915/     DF9 : CF                  		rst	8
(1) 2916/     DFA : FD 7E 0B            		ld	a,(iy+ztbl_VarT1)
(1) 2917/     DFD : BD                  		cp	l
(1) 2918/     DFE : 28 38               		jr	z,.same_patch
(1) 2919/     E00 :                     .new_romdat:
(1) 2920/     E00 : FD 74 0A            		ld	(iy+ztbl_VarT0),h
(1) 2921/     E03 : FD 75 0B            		ld	(iy+ztbl_VarT1),l
(1) 2922/     E06 : 78                  		ld	a,b
(1) 2923/     E07 : 01 28 00            		ld	bc,28h		; <- size
(1) 2924/     E0A : D5                  		push	de
(1) 2925/     E0B : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 2926/     E0E :                     
(1) 2927/     E0E : E1                  		pop	hl
(1) 2928/     E0F : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2929/     E12 : 4F                  		ld	c,a		; c - FM Key ID
(1) 2930/     E13 :                     
(1) 2931/     E13 :                     	; hl - fmcach intrument
(1) 2932/     E13 :                     	; de - FM reg and data: 3000h
(1) 2933/     E13 :                     	;  c - FM keyChannel
(1) 2934/     E13 : 79                  		ld	a,c
(1) 2935/     E14 : E6 03               		and	011b
(1) 2936/     E16 : F6 30               		or	30h			; Start at reg 30h
(1) 2937/     E18 : 57                  		ld	d,a
(1) 2938/     E19 : 1E 00               		ld	e,0
(1) 2939/     E1B : CF                  		rst	8
(1) 2940/     E1C : 06 1C               		ld	b,7*4			; Write ALL base FM registers
(1) 2941/     E1E : CD 3D 0E            		call	.fm_setrlist
(1) 2942/     E21 : 7E                  		ld	a,(hl)			; 0B0h
(1) 2943/     E22 : FD 77 0C            		ld	(iy+ztbl_FM_alfd),a	; ** Save 0B0h
(1) 2944/     E25 : 23                  		inc	hl
(1) 2945/     E26 : 7E                  		ld	a,(hl)			; 0B4h
(1) 2946/     E27 : FD 77 0D            		ld	(iy+ztbl_FM_pmam),a	; ** Save 0B4h
(1) 2947/     E2A : 23                  		inc	hl
(1) 2948/     E2B : CF                  		rst	8
(1) 2949/     E2C : 7E                  		ld	a,(hl)
(1) 2950/     E2D : FD 77 0E            		ld	(iy+ztbl_FM_lfo),a	; LFO
(1) 2951/     E30 : 23                  		inc	hl
(1) 2952/     E31 : 7E                  		ld	a,(hl)			; 028h keys
(1) 2953/     E32 : E6 F0               		and	11110000b
(1) 2954/     E34 : CF                  		rst	8
(1) 2955/     E35 : FD 77 0F            		ld	(iy+ztbl_FM_keys),a	; ** Save keys
(1) 2956/     E38 :                     .same_patch:
(1) 2957/     E38 : C1                  		pop	bc
(1) 2958/     E39 : E1                  		pop	hl
(1) 2959/     E3A : DD E1               		pop	ix
(1) 2960/     E3C : C9                  		ret
(1) 2961/     E3D :                     ; b - numof_regs
(1) 2962/     E3D :                     .fm_setrlist:
(1) 2963/     E3D : 5E                  		ld	e,(hl)
(1) 2964/     E3E : 23                  		inc	hl
(1) 2965/     E3F : CD 0F 13            		call	fm_autoreg
(1) 2966/     E42 : 00                  		nop
(1) 2967/     E43 : 00                  		nop
(1) 2968/     E44 : CF                  		rst	8
(1) 2969/     E45 : 00                  		nop
(1) 2970/     E46 : 14                  		inc	d		; +4
(1) 2971/     E47 : 14                  		inc	d
(1) 2972/     E48 : 14                  		inc	d
(1) 2973/     E49 : 14                  		inc	d
(1) 2974/     E4A : 10 F1               		djnz	.fm_setrlist
(1) 2975/     E4C : C9                  		ret
(1) 2976/     E4D :                     
(1) 2977/     E4D :                     ; ----------------------------------------
(1) 2978/     E4D :                     
(1) 2979/     E4D :                     .ins_dac:
(1) 2980/     E4D : E5                  		push	hl
(1) 2981/     E4E : C5                  		push	bc
(1) 2982/     E4F : CD 3E 13            		call	dac_off
(1) 2983/     E52 : 7E                  		ld	a,(hl)
(1) 2984/     E53 : E6 0F               		and	00001111b
(1) 2985/     E55 : 32 FA 1B            		ld	(wave_Flags),a
(1) 2986/     E58 : CF                  		rst	8
(1) 2987/     E59 : 23                  		inc	hl
(1) 2988/     E5A : 23                  		inc	hl
(1) 2989/     E5B : 5E                  		ld	e,(hl)
(1) 2990/     E5C : 23                  		inc	hl
(1) 2991/     E5D : 7E                  		ld	a,(hl)
(1) 2992/     E5E : 23                  		inc	hl
(1) 2993/     E5F : 6E                  		ld	l,(hl)
(1) 2994/     E60 : 67                  		ld	h,a
(1) 2995/     E61 : E5                  		push	hl
(1) 2996/     E62 : 7B                  		ld	a,e
(1) 2997/     E63 : 01 06 00            		ld	bc,6		; Skip head
(1) 2998/     E66 : 09                  		add	hl,bc
(1) 2999/     E67 : CE 00               		adc	a,0
(1) 3000/     E69 : 22 EF 1B            		ld	(wave_Start),hl	; Set START point
(1) 3001/     E6C : 32 F1 1B            		ld	(wave_Start+2),a
(1) 3002/     E6F : E1                  		pop	hl
(1) 3003/     E70 : 7B                  		ld	a,e
(1) 3004/     E71 : 11 74 1F            		ld	de,sampleHead
(1) 3005/     E74 : 01 06 00            		ld	bc,6
(1) 3006/     E77 : D5                  		push	de
(1) 3007/     E78 : CF                  		rst	8
(1) 3008/     E79 : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 3009/     E7C : E1                  		pop	hl
(1) 3010/     E7D :                     	; hl - temporal header
(1) 3011/     E7D : 5E                  		ld	e,(hl)
(1) 3012/     E7E : 23                  		inc	hl
(1) 3013/     E7F : 56                  		ld	d,(hl)
(1) 3014/     E80 : 23                  		inc	hl
(1) 3015/     E81 : 7E                  		ld	a,(hl)
(1) 3016/     E82 : 23                  		inc	hl
(1) 3017/     E83 : ED 53 F2 1B         		ld	(wave_Len),de	; LEN
(1) 3018/     E87 : 32 F4 1B            		ld	(wave_Len+2),a
(1) 3019/     E8A : 5E                  		ld	e,(hl)
(1) 3020/     E8B : 23                  		inc	hl
(1) 3021/     E8C : CF                  		rst	8
(1) 3022/     E8D : 56                  		ld	d,(hl)
(1) 3023/     E8E : 23                  		inc	hl
(1) 3024/     E8F : 7E                  		ld	a,(hl)
(1) 3025/     E90 : 23                  		inc	hl
(1) 3026/     E91 : ED 53 F5 1B         		ld	(wave_Loop),de	; LOOP
(1) 3027/     E95 : 32 F7 1B            		ld	(wave_Loop+2),a
(1) 3028/     E98 : 11 06 28            		ld	de,2806h	; keys off
(1) 3029/     E9B : CD 13 13            		call	fm_send_1
(1) 3030/     E9E : C1                  		pop	bc
(1) 3031/     E9F : E1                  		pop	hl
(1) 3032/     EA0 :                     ; .same_dac:
(1) 3033/     EA0 : C9                  		ret
(1) 3034/     EA1 :                     
(1) 3035/     EA1 :                     ; ----------------------------------------
(1) 3036/     EA1 :                     
(1) 3037/     EA1 :                     .ins_pcm:
(1) 3038/     EA1 : DD E5               		push	ix
(1) 3039/     EA3 : E5                  		push	hl
(1) 3040/     EA4 : C5                  		push	bc
(1) 3041/     EA5 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3042/     EA6 : E6 01               		and	00000001b	; Read loop bit
(1) 3043/     EA8 : 0F                  		rrca			; Move to MSB
(1) 3044/     EA9 : CF                  		rst	8
(1) 3045/     EAA : 23                  		inc	hl		; Skip ID and Pitch
(1) 3046/     EAB : 23                  		inc	hl
(1) 3047/     EAC : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3048/     EAD : B3                  		or	e
(1) 3049/     EAE : 5F                  		ld	e,a
(1) 3050/     EAF : 23                  		inc	hl
(1) 3051/     EB0 : 7E                  		ld	a,(hl)
(1) 3052/     EB1 : 23                  		inc	hl
(1) 3053/     EB2 : 6E                  		ld	l,(hl)
(1) 3054/     EB3 : 67                  		ld	h,a
(1) 3055/     EB4 :                     	; d    - Loop enable bit
(1) 3056/     EB4 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3057/     EB4 : DD 21 D7 15         		ld	ix,pcmcom
(1) 3058/     EB8 : 06 00               		ld	b,0
(1) 3059/     EBA : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3060/     EBD : DD 09               		add	ix,bc
(1) 3061/     EBF : 01 28 00            		ld	bc,40		; Go to 40
(1) 3062/     EC2 : DD 09               		add	ix,bc
(1) 3063/     EC4 : 01 08 00            		ld	bc,8
(1) 3064/     EC7 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3065/     ECA : DD 09               		add	ix,bc
(1) 3066/     ECC : DD 74 00            		ld	(ix),h
(1) 3067/     ECF : DD 09               		add	ix,bc
(1) 3068/     ED1 : DD 75 00            		ld	(ix),l
(1) 3069/     ED4 : C1                  		pop	bc
(1) 3070/     ED5 : E1                  		pop	hl
(1) 3071/     ED6 : DD E1               		pop	ix
(1) 3072/     ED8 : C9                  		ret
(1) 3073/     ED9 :                     
(1) 3074/     ED9 :                     ; ----------------------------------------
(1) 3075/     ED9 :                     
(1) 3076/     ED9 :                     .ins_pwm:
(1) 3077/     ED9 : DD E5               		push	ix
(1) 3078/     EDB : E5                  		push	hl
(1) 3079/     EDC : C5                  		push	bc
(1) 3080/     EDD : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3081/     EDE : E6 03               		and	00000011b
(1) 3082/     EE0 : 0F                  		rrca
(1) 3083/     EE1 : 0F                  		rrca
(1) 3084/     EE2 : 4F                  		ld	c,a
(1) 3085/     EE3 : CF                  		rst	8
(1) 3086/     EE4 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3087/     EE5 : 23                  		inc	hl
(1) 3088/     EE6 : 56                  		ld	d,(hl)
(1) 3089/     EE7 : 23                  		inc	hl
(1) 3090/     EE8 : 5E                  		ld	e,(hl)
(1) 3091/     EE9 : 23                  		inc	hl
(1) 3092/     EEA : 7E                  		ld	a,(hl)
(1) 3093/     EEB : 23                  		inc	hl
(1) 3094/     EEC : 6E                  		ld	l,(hl)
(1) 3095/     EED : 67                  		ld	h,a
(1) 3096/     EEE : 79                  		ld	a,c
(1) 3097/     EEF : B2                  		or	d
(1) 3098/     EF0 : 57                  		ld	d,a
(1) 3099/     EF1 : CF                  		rst	8
(1) 3100/     EF2 :                     	; de,hl - 32-bit PWM pointer
(1) 3101/     EF2 : DD 21 17 16         		ld	ix,pwmcom
(1) 3102/     EF6 : 06 00               		ld	b,0
(1) 3103/     EF8 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3104/     EFB : DD 09               		add	ix,bc
(1) 3105/     EFD : 01 18 00            		ld	bc,24
(1) 3106/     F00 : DD 09               		add	ix,bc	; Move to PWOUTF
(1) 3107/     F02 : 01 08 00            		ld	bc,8
(1) 3108/     F05 : DD 72 00            		ld	(ix),d
(1) 3109/     F08 : DD 09               		add	ix,bc
(1) 3110/     F0A : DD 73 00            		ld	(ix),e
(1) 3111/     F0D : DD 09               		add	ix,bc
(1) 3112/     F0F : DD 74 00            		ld	(ix),h
(1) 3113/     F12 : DD 09               		add	ix,bc
(1) 3114/     F14 : DD 75 00            		ld	(ix),l
(1) 3115/     F17 : C1                  		pop	bc
(1) 3116/     F18 : E1                  		pop	hl
(1) 3117/     F19 : DD E1               		pop	ix
(1) 3118/     F1B : C9                  		ret
(1) 3119/     F1C :                     
(1) 3120/     F1C :                     ; ----------------------------------------
(1) 3121/     F1C :                     ; NEW note
(1) 3122/     F1C :                     ; ----------------------------------------
(1) 3123/     F1C :                     
(1) 3124/     F1C :                     .note:
(1) 3125/     F1C : 78                  		ld	a,b		; Volume bit?
(1) 3126/     F1D : E6 04               		and	0100b
(1) 3127/     F1F : 20 05               		jr	nz,.fm_hasvol
(1) 3128/     F21 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3129/     F25 : CF                  		rst	8
(1) 3130/     F26 :                     .fm_hasvol:
(1) 3131/     F26 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3132/     F29 : 4F                  		ld	c,a
(1) 3133/     F2A : FE FF               		cp	-1
(1) 3134/     F2C : C8                  		ret	z
(1) 3135/     F2D : FE FE               		cp	-2
(1) 3136/     F2F : C8                  		ret	z
(1) 3137/     F30 : E7                  		rst	20h
(1) 3138/     F31 : 7E                  		ld	a,(hl)
(1) 3139/     F32 : E6 F0               		and	11110000b
(1) 3140/     F34 : FE 80               		cp	80h
(1) 3141/     F36 : 28 16               		jr	z,.n_indx
(1) 3142/     F38 : CF                  		rst	8
(1) 3143/     F39 : FE 90               		cp	90h
(1) 3144/     F3B : 28 20               		jr	z,.n_psgn
(1) 3145/     F3D : FE A0               		cp	0A0h
(1) 3146/     F3F : 28 21               		jr	z,.n_fm
(1) 3147/     F41 :                     ; 		cp	0B0h		; ** Can't use notes on FM special **
(1) 3148/     F41 :                     ; 		jr	z,.n_fm
(1) 3149/     F41 : FE C0               		cp	0C0h
(1) 3150/     F43 : 28 09               		jr	z,.n_indx
(1) 3151/     F45 : FE D0               		cp	0D0h
(1) 3152/     F47 : 28 05               		jr	z,.n_indx
(1) 3153/     F49 : FE E0               		cp	0E0h
(1) 3154/     F4B : 28 01               		jr	z,.n_indx
(1) 3155/     F4D : C9                  		ret
(1) 3156/     F4E :                     
(1) 3157/     F4E :                     ; --------------------------------
(1) 3158/     F4E :                     
(1) 3159/     F4E :                     .n_indx:
(1) 3160/     F4E : 79                  		ld	a,c
(1) 3161/     F4F :                     .n_stfreq:
(1) 3162/     F4F : 23                  		inc	hl			; Skip ID
(1) 3163/     F50 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3164/     F51 : 2B                  		dec	hl
(1) 3165/     F52 : 83                  		add	a,e			; Note + pitch
(1) 3166/     F53 : CF                  		rst	8
(1) 3167/     F54 : 87                  		add	a,a			; * 2
(1) 3168/     F55 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3169/     F58 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0	; reset pitchbend
(1) 3170/     F5C : C9                  		ret
(1) 3171/     F5D :                     .n_psgn:
(1) 3172/     F5D : 79                  		ld	a,c
(1) 3173/     F5E : C6 0C               		add	a,12		; <-- Manual adjust for NOISE
(1) 3174/     F60 : 18 ED               		jr	.n_stfreq
(1) 3175/     F62 :                     
(1) 3176/     F62 :                     ; FM freqs
(1) 3177/     F62 :                     .n_fm:
(1) 3178/     F62 : 79                  		ld	a,c
(1) 3179/     F63 : 23                  		inc	hl		; Skip ID
(1) 3180/     F64 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3181/     F65 : 2B                  		dec	hl
(1) 3182/     F66 : CF                  		rst	8
(1) 3183/     F67 : 83                  		add	a,e		; Note + pitch
(1) 3184/     F68 :                     	; Search for octave and note...
(1) 3185/     F68 : 0E 00               		ld	c,0		; c - octave
(1) 3186/     F6A : 16 07               		ld	d,7
(1) 3187/     F6C :                     .get_oct:
(1) 3188/     F6C : 5F                  		ld	e,a		; e - note
(1) 3189/     F6D : D6 0C               		sub	12
(1) 3190/     F6F : FA 76 0F            		jp	m,.fnd_oct
(1) 3191/     F72 : 0C                  		inc	c
(1) 3192/     F73 : 15                  		dec	d
(1) 3193/     F74 : 20 F6               		jr	nz,.get_oct
(1) 3194/     F76 :                     .fnd_oct:
(1) 3195/     F76 : CF                  		rst	8
(1) 3196/     F77 : 7B                  		ld	a,e
(1) 3197/     F78 : 87                  		add	a,a		; Note * 2
(1) 3198/     F79 : E6 1F               		and	00011111b
(1) 3199/     F7B : CB 09               		rrc	c
(1) 3200/     F7D : CB 09               		rrc	c
(1) 3201/     F7F : CB 09               		rrc	c
(1) 3202/     F81 : CF                  		rst	8
(1) 3203/     F82 : B1                  		or	c
(1) 3204/     F83 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3205/     F86 : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 3206/     F8A : C9                  		ret
(1) 3207/     F8B :                     
(1) 3208/     F8B :                     ; ----------------------------------------
(1) 3209/     F8B :                     
(1) 3210/     F8B :                     .chnl_ulnkcut:
(1) 3211/     F8B : DD 4E 01            		ld	c,(ix+chnl_Chip)
(1) 3212/     F8E : C3 91 0F            		jp	.chnl_ulnk
(1) 3213/     F91 :                     .chnl_ulnkoff:
(1) 3214/     F91 :                     ; 		ld	c,0
(1) 3215/     F91 :                     
(1) 3216/     F91 :                     .chnl_ulnk:
(1) 3217/     F91 : AF                  		xor	a
(1) 3218/     F92 : CF                  		rst	8
(1) 3219/     F93 : FD 77 00            		ld	(iy),a				; Delete link, chip and prio
(1) 3220/     F96 : FD 77 01            		ld	(iy+1),a
(1) 3221/     F99 : FD 77 02            		ld	(iy+2),a
(1) 3222/     F9C : FD E5               		push	iy
(1) 3223/     F9E : E1                  		pop	hl
(1) 3224/     F9F : 23                  		inc	hl
(1) 3225/     FA0 : 23                  		inc	hl
(1) 3226/     FA1 : 23                  		inc	hl
(1) 3227/     FA2 : 18 08               		jr	tblz_clear_e
(1) 3228/     FA4 :                     
(1) 3229/     FA4 :                     ; ----------------------------------------
(1) 3230/     FA4 :                     ; Reset all table
(1) 3231/     FA4 :                     ;
(1) 3232/     FA4 :                     ; hl - Current channel table
(1) 3233/     FA4 :                     ; d - Silence chip
(1) 3234/     FA4 :                     ;
(1) 3235/     FA4 :                     ; Uses:
(1) 3236/     FA4 :                     ; b
(1) 3237/     FA4 :                     ; ----------------------------------------
(1) 3238/     FA4 :                     
(1) 3239/     FA4 :                     tblz_clear:
(1) 3240/     FA4 : CF                  		rst	8
(1) 3241/     FA5 : 36 00               		ld	(hl),0			; Delete link
(1) 3242/     FA7 : 23                  		inc	hl
(1) 3243/     FA8 : 36 00               		ld	(hl),0
(1) 3244/     FAA : 23                  		inc	hl
(1) 3245/     FAB : 72                  		ld	(hl),d			; Set "silence" chip ID.
(1) 3246/     FAC :                     tblz_clear_e:
(1) 3247/     FAC : 01 05 00            		ld	bc,8-3			; Go to 08h
(1) 3248/     FAF : CF                  		rst	8
(1) 3249/     FB0 : 09                  		add	hl,bc
(1) 3250/     FB1 : 06 04               		ld	b,8/2
(1) 3251/     FB3 :                     .clrfull:
(1) 3252/     FB3 : 36 00               		ld	(hl),0			; Reset settings 08-0Bh
(1) 3253/     FB5 : 23                  		inc	hl
(1) 3254/     FB6 : 36 00               		ld	(hl),0
(1) 3255/     FB8 : 23                  		inc	hl
(1) 3256/     FB9 : CF                  		rst	8
(1) 3257/     FBA : 10 F7               		djnz	.clrfull
(1) 3258/     FBC : C9                  		ret
(1) 3259/     FBD :                     
(1) 3260/     FBD :                     ; ============================================================
(1) 3261/     FBD :                     ; --------------------------------------------------------
(1) 3262/     FBD :                     ; Communication with the SCD and 32X
(1) 3263/     FBD :                     ;
(1) 3264/     FBD :                     ; SCD: Sends a level2 interrupt to Sub-CPU*
(1) 3265/     FBD :                     ; 32X: Interrupts Slave SH2 with CMD request
(1) 3266/     FBD :                     ;
(1) 3267/     FBD :                     ; *Originally meant for waiting VBlank, that's
(1) 3268/     FBD :                     ; the only one available for sending the table
(1) 3269/     FBD :                     ; --------------------------------------------------------
(1) 3270/     FBD :                     
(1) 3271/     FBD :                     ; NOTE: careful modifing this
(1) 3272/     FBD :                     
(1) 3273/     FBD :                     zmars_send:
(1) 3274/     FBD :                     	; ----------------------------------------
(1) 3275/     FBD :                     	; Send PCM table
(1) 3277/     FBD : 3A 36 00            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3278/     FC0 : B7                  		or	a
(1) 3279/     FC1 : C2 3C 10            		jp	nz,.mcdt_blocked
(1) 3280/     FC4 : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3281/     FC8 : 3A E1 1B            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3282/     FCB : B7                  		or	a
(1) 3283/     FCC : CA 46 10            		jp	z,.mcdt_noupd
(1) 3284/     FCF : AF                  		xor	a
(1) 3285/     FD0 : 32 E1 1B            		ld	(mcdUpd),a
(1) 3286/     FD3 : E7                  		rst	20h
(1) 3287/     FD4 : CD 4E 10            		call	.set_combank
(1) 3288/     FD7 : DD 21 D7 15         		ld	ix,pcmcom
(1) 3289/     FDB : 21 00 A0            		ld	hl,8000h|2000h
(1) 3290/     FDE :                     .wait_in:
(1) 3291/     FDE : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3292/     FE1 : B7                  		or	a
(1) 3293/     FE2 : FA DE 0F            		jp	m,.wait_in
(1) 3294/     FE5 : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3295/     FE8 : B7                  		or	a		; != 0
(1) 3296/     FE9 : 20 F3               		jr	nz,.wait_in
(1) 3297/     FEB : 0E C0               		ld	c,0C0h
(1) 3298/     FED : FD 71 00            		ld	(iy),c		; Set our entrance ID
(1) 3299/     FF0 : 06 10               		ld	b,16
(1) 3300/     FF2 :                     .make_sure:
(1) 3301/     FF2 : FD 7E 00            		ld	a,(iy)		; Check if did write
(1) 3302/     FF5 : B9                  		cp	c
(1) 3303/     FF6 : 20 E6               		jr	nz,.wait_in
(1) 3304/     FF8 : 10 F8               		djnz	.make_sure
(1) 3305/     FFA : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3306/     FFC : CF                  		rst	8
(1) 3307/     FFD :                     .test_sub:
(1) 3308/     FFD : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3309/    1000 : E6 C0               		and	0C0h
(1) 3310/    1002 : FE C0               		cp	0C0h
(1) 3311/    1004 : 20 F7               		jr	nz,.test_sub
(1) 3312/    1006 : FD CB 00 EE         		set	5,(iy)		; "MAIN" lock
(1) 3313/    100A : CF                  		rst	8
(1) 3314/    100B : 11 18 00            		ld	de,10h+8	; ix - MAIN comm ports
(1) 3315/    100E : 19                  		add	hl,de		; starting at 8
(1) 3316/    100F :                     	; ix - table
(1) 3317/    100F :                     	; hl - main data
(1) 3318/    100F : 0E 08               		ld	c,40h/8		; c - Packets to send
(1) 3319/    1011 :                     .mcd_nextp:
(1) 3320/    1011 : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3321/    1015 : 20 FA               		jr	nz,.mcd_nextp
(1) 3322/    1017 : 06 08               		ld	b,8		; 2words to write
(1) 3323/    1019 : E5                  		push	hl
(1) 3324/    101A :                     .copy_bytes:
(1) 3325/    101A : DD 7E 00            		ld	a,(ix)
(1) 3326/    101D : 77                  		ld	(hl),a
(1) 3327/    101E : DD 23               		inc	ix
(1) 3328/    1020 : 23                  		inc	hl
(1) 3329/    1021 : 10 F7               		djnz	.copy_bytes
(1) 3330/    1023 : E1                  		pop	hl
(1) 3331/    1024 : FD CB 00 E6         		set	4,(iy)		; PASS bit
(1) 3332/    1028 : CF                  		rst	8
(1) 3333/    1029 :                     .wait_sub:
(1) 3334/    1029 : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3335/    102D : 28 FA               		jr	z,.wait_sub
(1) 3336/    102F : FD CB 00 A6         		res	4,(iy)		; Clear PASS bit
(1) 3337/    1033 : CF                  		rst	8
(1) 3338/    1034 : 0D                  		dec	c
(1) 3339/    1035 : 20 DA               		jr	nz,.mcd_nextp
(1) 3340/    1037 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3341/    103B : CF                  		rst	8
(1) 3342/    103C :                     .mcdt_blocked:
(1) 3343/    103C : 21 D7 15            		ld	hl,pcmcom
(1) 3344/    103F : AF                  		xor	a
(1) 3345/    1040 : 06 08               		ld	b,8		; MAX PCM channels
(1) 3346/    1042 :                     .clr_pcm:
(1) 3347/    1042 : 77                  		ld	(hl),a
(1) 3348/    1043 : 23                  		inc	hl
(1) 3349/    1044 : 10 FC               		djnz	.clr_pcm
(1) 3350/    1046 :                     .mcdt_noupd:
(1) 3353/    1046 : CF                  		rst	8
(1) 3354/    1047 : 06 02               		ld	b,2		; ** wave sync for MCD only
(1) 3355/    1049 : 10 FE               		djnz	$
(1) 3356/    104B : 00                  		nop
(1) 3357/    104C : 00                  		nop
(1) 3359/    104D :                     	; ----------------------------------------
(1) 3360/    104D :                     	; Send PWM table
(1) 3463/    104D : C9                  		ret
(1) 3464/    104E :                     
(1) 3465/    104E :                     ; --------------------------------------------------------
(1) 3466/    104E :                     ; Set bank to $A10000 area
(1) 3468/    104E :                     .set_combank:
(1) 3469/    104E : 21 00 60            		ld	hl,6000h
(1) 3470/    1051 : 36 00               		ld	(hl),0
(1) 3471/    1053 : 36 01               		ld	(hl),1
(1) 3472/    1055 : 36 00               		ld	(hl),0
(1) 3473/    1057 : 36 00               		ld	(hl),0
(1) 3474/    1059 : CF                  		rst	8
(1) 3475/    105A : 36 00               		ld	(hl),0
(1) 3476/    105C : 36 00               		ld	(hl),0
(1) 3477/    105E : 36 01               		ld	(hl),1
(1) 3478/    1060 : 36 00               		ld	(hl),0
(1) 3479/    1062 : 36 01               		ld	(hl),1
(1) 3480/    1064 : C9                  		ret
(1) 3482/    1065 :                     
(1) 3483/    1065 :                     ; ====================================================================
(1) 3484/    1065 :                     ; ----------------------------------------------------------------
(1) 3485/    1065 :                     ; Subroutines
(1) 3486/    1065 :                     ; ----------------------------------------------------------------
(1) 3487/    1065 :                     
(1) 3488/    1065 :                     ; --------------------------------------------------------
(1) 3489/    1065 :                     ; Init sound engine
(1) 3490/    1065 :                     ; --------------------------------------------------------
(1) 3491/    1065 :                     
(1) 3492/    1065 :                     gema_init:
(1) 3493/    1065 : CD 4D 14            		call	gema_lastbank		; Set last bank slot, solves bus problem with 32X
(1) 3494/    1068 : CD 3E 13            		call	dac_off
(1) 3495/    106B : AF                  		xor	a
(1) 3496/    106C :                     ; 		ld	(marsUpd),a
(1) 3497/    106C :                     ; 		ld	(mcdUpd),a
(1) 3498/    106C : 32 30 00            		ld	(cdRamLen),a
(1) 3499/    106F : FD 21 82 1F         		ld	iy,nikona_BuffList
(1) 3500/    1073 : 0E 01               		ld	c,1			; Start at this priority
(1) 3501/    1075 :                     .setup_list:
(1) 3502/    1075 : FD 7E 00            		ld	a,(iy)
(1) 3503/    1078 : FE FF               		cp	-1
(1) 3504/    107A : 28 24               		jr	z,.end_setup
(1) 3505/    107C : FD 23               		inc	iy
(1) 3506/    107E : 6F                  		ld	l,a
(1) 3507/    107F : FD 66 00            		ld	h,(iy)
(1) 3508/    1082 : E5                  		push	hl
(1) 3509/    1083 : DD E1               		pop	ix
(1) 3510/    1085 : DD 71 14            		ld	(ix+trk_Priority),c
(1) 3511/    1088 : DD 36 01 FF         		ld	(ix+trk_SeqId),-1	; Reset sequence ID
(1) 3512/    108C : FD 23               		inc	iy
(1) 3513/    108E :                     	; iy - src
(1) 3514/    108E :                     	; hl - dst
(1) 3515/    108E : 11 04 00            		ld	de,trk_Blocks
(1) 3516/    1091 : 19                  		add	hl,de
(1) 3517/    1092 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3518/    1094 :                     .st_copy:
(1) 3519/    1094 : FD 7E 00            		ld	a,(iy)
(1) 3520/    1097 : 77                  		ld	(hl),a
(1) 3521/    1098 : FD 23               		inc	iy
(1) 3522/    109A : 23                  		inc	hl
(1) 3523/    109B : 10 F7               		djnz	.st_copy
(1) 3524/    109D : 0C                  		inc	c
(1) 3525/    109E : 18 D5               		jr	.setup_list
(1) 3526/    10A0 :                     .end_setup:
(1) 3527/    10A0 :                     
(1) 3528/    10A0 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3529/    10A3 : CD 13 13            		call	fm_send_1
(1) 3530/    10A6 : 11 00 27            		ld	de,2700h	; CH3 special and timers off
(1) 3531/    10A9 : CD 13 13            		call	fm_send_1
(1) 3532/    10AC :                     ; 		ld	de,2800h
(1) 3533/    10AC : 14                  		inc	d		; FM KEYS off
(1) 3534/    10AD : CD 13 13            		call	fm_send_1
(1) 3535/    10B0 : 1C                  		inc	e
(1) 3536/    10B1 : CD 13 13            		call	fm_send_1
(1) 3537/    10B4 : 1C                  		inc	e
(1) 3538/    10B5 : CD 13 13            		call	fm_send_1
(1) 3539/    10B8 : 1C                  		inc	e
(1) 3540/    10B9 : 1C                  		inc	e
(1) 3541/    10BA : CD 13 13            		call	fm_send_1
(1) 3542/    10BD : 1C                  		inc	e
(1) 3543/    10BE : CD 13 13            		call	fm_send_1
(1) 3544/    10C1 : 1C                  		inc	e
(1) 3545/    10C2 : CD 13 13            		call	fm_send_1
(1) 3546/    10C5 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3547/    10C8 : 36 9F               		ld	(hl),09Fh
(1) 3548/    10CA : 36 BF               		ld	(hl),0BFh
(1) 3549/    10CC : 36 DF               		ld	(hl),0DFh
(1) 3550/    10CE : 36 FF               		ld	(hl),0FFh
(1) 3551/    10D0 : C9                  		ret
(1) 3552/    10D1 :                     
(1) 3553/    10D1 :                     ; --------------------------------------------------------
(1) 3554/    10D1 :                     ; get_tick
(1) 3555/    10D1 :                     ;
(1) 3556/    10D1 :                     ; Checks if VBlank triggred a TICK
(1) 3557/    10D1 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3558/    10D1 :                     ; --------------------------------------------------------
(1) 3559/    10D1 :                     
(1) 3560/    10D1 :                     get_tick:
(1) 3561/    10D1 : F3                  		di				; Disable ints
(1) 3562/    10D2 : F5                  		push	af
(1) 3563/    10D3 : E5                  		push	hl
(1) 3564/    10D4 : 21 FC 1B            		ld	hl,tickFlag		; read last TICK flag
(1) 3565/    10D7 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3566/    10D8 : B7                  		or 	a
(1) 3567/    10D9 : 28 13               		jr	z,.ctnotick
(1) 3568/    10DB : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3569/    10DD : 23                  		inc	hl			; Move to tickCnt
(1) 3570/    10DE : 34                  		inc	(hl)			; and increment
(1) 3571/    10DF : CF                  		rst	8
(1) 3572/    10E0 : D5                  		push	de
(1) 3573/    10E1 : 2A F7 1C            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3574/    10E4 : ED 5B F9 1C         		ld	de,(sbeatPtck)
(1) 3575/    10E8 : CF                  		rst	8
(1) 3576/    10E9 : 19                  		add	hl,de
(1) 3577/    10EA : 22 F7 1C            		ld	(sbeatAcc),hl
(1) 3578/    10ED : D1                  		pop	de
(1) 3579/    10EE :                     .ctnotick:
(1) 3580/    10EE : E1                  		pop	hl
(1) 3581/    10EF : F1                  		pop	af
(1) 3582/    10F0 : FB                  		ei				; Enable ints again
(1) 3583/    10F1 : C9                  		ret
(1) 3584/    10F2 :                     
(1) 3585/    10F2 :                     ; --------------------------------------------------------
(1) 3586/    10F2 :                     ; transferRom
(1) 3587/    10F2 :                     ;
(1) 3588/    10F2 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3589/    10F2 :                     ; This also tells to 68k that we want to access ROM
(1) 3590/    10F2 :                     ;
(1) 3591/    10F2 :                     ; Input:
(1) 3592/    10F2 :                     ; a  | 68K Address $xx0000
(1) 3593/    10F2 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3594/    10F2 :                     ; hl | 68K Address $00xxxx
(1) 3595/    10F2 :                     ; de | Destination pointer
(1) 3596/    10F2 :                     ;
(1) 3597/    10F2 :                     ; Uses:
(1) 3598/    10F2 :                     ; b
(1) 3599/    10F2 :                     ;
(1) 3600/    10F2 :                     ; Notes:
(1) 3601/    10F2 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3602/    10F2 :                     ; sample has enough data before getting busy here.
(1) 3603/    10F2 :                     ; --------------------------------------------------------
(1) 3604/    10F2 :                     
(1) 3605/    10F2 :                     transferRom:
(1) 3606/    10F2 : DD E5               		push	ix
(1) 3607/    10F4 : DD 21 2F 00         		ld	ix,commZRomBlk	; ix - rom read/block flags
(1) 3608/    10F8 : FE FF               		cp	0FFh		; <-- WORKAROUND FOR $FF0000 area
(1) 3609/    10FA : 28 3D               		jr	z,.from_ram
(1) 3610/    10FC : CF                  		rst	8
(1) 3611/    10FD : 22 F5 1C            		ld	(x68ksrclsb),hl	; save hl copy
(1) 3612/    1100 : CB BC               		res	7,h
(1) 3613/    1102 : 06 00               		ld	b,0
(1) 3614/    1104 : 0B                  		dec	bc
(1) 3615/    1105 : 09                  		add	hl,bc
(1) 3616/    1106 : CB 7C               		bit	7,h
(1) 3617/    1108 : 20 0B               		jr	nz,.double
(1) 3618/    110A : 2A F5 1C            		ld	hl,(x68ksrclsb)
(1) 3619/    110D : 0C                  		inc	c
(1) 3620/    110E : 47                  		ld	b,a
(1) 3621/    110F : CD 59 11            		call	.transfer
(1) 3622/    1112 : DD E1               		pop	ix
(1) 3623/    1114 : C9                  		ret
(1) 3624/    1115 :                     .double:
(1) 3625/    1115 : CF                  		rst	8
(1) 3626/    1116 : 47                  		ld	b,a
(1) 3627/    1117 : C5                  		push	bc
(1) 3628/    1118 : E5                  		push	hl
(1) 3629/    1119 : 79                  		ld	a,c
(1) 3630/    111A : 95                  		sub	a,l
(1) 3631/    111B : 4F                  		ld	c,a
(1) 3632/    111C : 2A F5 1C            		ld	hl,(x68ksrclsb)
(1) 3633/    111F : CD 59 11            		call	.transfer
(1) 3634/    1122 : E1                  		pop	hl
(1) 3635/    1123 : C1                  		pop	bc
(1) 3636/    1124 :                     ; 		rst	8
(1) 3637/    1124 : 4D                  		ld	c,l
(1) 3638/    1125 : 0C                  		inc	c
(1) 3639/    1126 : 3A F6 1C            		ld	a,(x68ksrcmid)
(1) 3640/    1129 : E6 80               		and	80h
(1) 3641/    112B : C6 80               		add	a,80h
(1) 3642/    112D : 67                  		ld	h,a
(1) 3643/    112E : 2E 00               		ld	l,0
(1) 3644/    1130 : 30 01               		jr	nc,.x68knocarry
(1) 3645/    1132 : 04                  		inc	b
(1) 3646/    1133 :                     .x68knocarry:
(1) 3647/    1133 : CD 59 11            		call	.transfer
(1) 3648/    1136 : DD E1               		pop	ix
(1) 3649/    1138 : C9                  		ret
(1) 3650/    1139 :                     
(1) 3651/    1139 :                     ; ------------------------------------------------
(1) 3652/    1139 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3653/    1139 :                     ;
(1) 3654/    1139 :                     ; On the 68K side YOU MUST CALL
(1) 3655/    1139 :                     ; Sound_Update manually when you have
(1) 3656/    1139 :                     ; the oportunity to do so.
(1) 3657/    1139 :                     ; ------------------------------------------------
(1) 3658/    1139 :                     
(1) 3659/    1139 :                     .from_ram:
(1) 3660/    1139 : ED 53 31 00         		ld	(cdRamDst),de
(1) 3661/    113D : 22 33 00            		ld	(cdRamSrc),hl
(1) 3662/    1140 : 32 35 00            		ld	(cdRamSrcB),a
(1) 3663/    1143 : CD 4D 14            		call	gema_lastbank			; ** Set bank to $FF8000 area
(1) 3664/    1146 : CF                  		rst	8
(1) 3665/    1147 : 79                  		ld	a,c
(1) 3666/    1148 : 32 30 00            		ld	(cdRamLen),a
(1) 3667/    114B : 21 00 FF            		ld	hl,RAM_ZCdFlag_D&07FFFh+8000h	; ** 68K LABEL **
(1) 3668/    114E : 36 01               		ld	(hl),1				; WRITE flag
(1) 3669/    1150 :                     .wait:
(1) 3670/    1150 :                     	; Get stuck here until 68K finishes
(1) 3671/    1150 : 3A 30 00            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3672/    1153 : B7                  		or	a
(1) 3673/    1154 : 20 FA               		jr	nz,.wait
(1) 3674/    1156 : DD E1               		pop	ix
(1) 3675/    1158 : C9                  		ret
(1) 3676/    1159 :                     
(1) 3677/    1159 :                     ; ------------------------------------------------
(1) 3678/    1159 :                     ; b  - Source ROM bank
(1) 3679/    1159 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3680/    1159 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3681/    1159 :                     ; de - Destination address
(1) 3682/    1159 :                     ; ix - ROM-block flag
(1) 3683/    1159 :                     ; ------------------------------------------------
(1) 3684/    1159 :                     
(1) 3685/    1159 :                     .transfer:
(1) 3686/    1159 : CF                  		rst	8
(1) 3687/    115A : D5                  		push	de
(1) 3688/    115B : 11 00 60            		ld	de,6000h
(1) 3689/    115E : 7C                  		ld	a,h
(1) 3690/    115F : 07                  		rlca
(1) 3691/    1160 : 12                  		ld	(de),a
(1) 3692/    1161 : 78                  		ld	a,b
(1) 3693/    1162 : CF                  		rst	8
(1) 3694/    1163 : 12                  		ld	(de),a
(1) 3695/    1164 : 0F                  		rrca
(1) 3696/    1165 : 12                  		ld	(de),a
(1) 3697/    1166 : 0F                  		rrca
(1) 3698/    1167 : 12                  		ld	(de),a
(1) 3699/    1168 : 0F                  		rrca
(1) 3700/    1169 : 12                  		ld	(de),a
(1) 3701/    116A : 0F                  		rrca
(1) 3702/    116B : CF                  		rst	8
(1) 3703/    116C : 12                  		ld	(de),a
(1) 3704/    116D : 0F                  		rrca
(1) 3705/    116E : 12                  		ld	(de),a
(1) 3706/    116F : 0F                  		rrca
(1) 3707/    1170 : 12                  		ld	(de),a
(1) 3708/    1171 : 0F                  		rrca
(1) 3709/    1172 : 12                  		ld	(de),a
(1) 3710/    1173 : D1                  		pop	de
(1) 3711/    1174 : CB FC               		set	7,h
(1) 3712/    1176 : CF                  		rst	8
(1) 3713/    1177 :                     
(1) 3714/    1177 :                     	; Transfer ROM data in packets
(1) 3715/    1177 :                     	; while playing the cache'd sample
(1) 3716/    1177 :                     	; *** CRITICAL PROCESS ***
(1) 3717/    1177 :                     	;
(1) 3718/    1177 :                     	; pseudo-ref for ldir:
(1) 3719/    1177 :                     	; ld (de),(hl)	; load (hl) to (de) directly
(1) 3720/    1177 :                     	; inc de	; next de
(1) 3721/    1177 :                     	; inc hl	; next hl
(1) 3722/    1177 :                     	; dec bc	; decrement bc
(1) 3723/    1177 : 06 00               		ld	b,0
(1) 3724/    1179 : 79                  		ld	a,c		; a - Size counter
(1) 3725/    117A : D6 08               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3726/    117C : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3727/    117E :                     .x68kloop:
(1) 3728/    117E : CF                  		rst	8
(1) 3729/    117F : 00                  		nop
(1) 3730/    1180 : 0E 07               		ld	c,MAX_TRFRPZ-1
(1) 3731/    1182 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3732/    1186 : C4 A0 11            		call	nz,.x68klpwt
(1) 3733/    1189 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3734/    118B : CF                  		rst	8
(1) 3735/    118C : 00                  		nop
(1) 3736/    118D : D6 07               		sub	a,MAX_TRFRPZ-1
(1) 3737/    118F : D2 7E 11            		jp	nc,.x68kloop
(1) 3738/    1192 :                     ; last block
(1) 3739/    1192 :                     .x68klast:
(1) 3740/    1192 : C6 08               		add	a,MAX_TRFRPZ
(1) 3741/    1194 : 4F                  		ld	c,a
(1) 3742/    1195 : DD CB 00 46         		bit	0,(ix)		; Genesis requests BUS?
(1) 3743/    1199 : C4 A0 11            		call	nz,.x68klpwt
(1) 3744/    119C : ED B0               		ldir
(1) 3745/    119E : CF                  		rst	8
(1) 3746/    119F : C9                  		ret
(1) 3747/    11A0 :                     ; Wait here until Genesis unlocks ROM
(1) 3748/    11A0 :                     .x68klpwt:
(1) 3749/    11A0 : 00                  		nop	; WAVE SYNC
(1) 3750/    11A1 : 00                  		nop
(1) 3751/    11A2 :                     .x68kpwtlp:
(1) 3752/    11A2 : CF                  		rst	8
(1) 3753/    11A3 : 00                  		nop	; WAVE SYNC
(1) 3754/    11A4 : 00                  		nop
(1) 3755/    11A5 : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3756/    11A9 : 20 F7               		jr	nz,.x68kpwtlp
(1) 3757/    11AB : C9                  		ret
(1) 3758/    11AC :                     
(1) 3759/    11AC :                     ; ====================================================================
(1) 3760/    11AC :                     ; ----------------------------------------------------------------
(1) 3761/    11AC :                     ; Sound chip routines
(1) 3762/    11AC :                     ; ----------------------------------------------------------------
(1) 3763/    11AC :                     
(1) 3764/    11AC :                     ; --------------------------------------------------------
(1) 3765/    11AC :                     ; chip_env
(1) 3766/    11AC :                     ;
(1) 3767/    11AC :                     ; Process the PSG
(1) 3768/    11AC :                     ; --------------------------------------------------------
(1) 3769/    11AC :                     
(1) 3770/    11AC :                     chip_env:
(1) 3774/    11AC : FD 21 52 16         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3775/    11B0 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3776/    11B4 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3777/    11B6 : 06 04               		ld	b,4			; b - 4 channels
(1) 3778/    11B8 :                     .vloop:
(1) 3779/    11B8 : CF                  		rst	8
(1) 3780/    11B9 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3781/    11BC : FD 36 00 00         		ld	(iy+COM),0
(1) 3782/    11C0 :                     
(1) 3783/    11C0 :                     	; ----------------------------
(1) 3784/    11C0 :                     	; bit 2 - stop sound
(1) 3785/    11C0 : CB 53               		bit	2,e
(1) 3786/    11C2 : 28 0C               		jr	z,.ckof
(1) 3787/    11C4 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3788/    11C8 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3789/    11CC : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3790/    11D0 :                     .ckof:
(1) 3791/    11D0 :                     	; ----------------------------
(1) 3792/    11D0 :                     	; bit 1 - key off
(1) 3793/    11D0 : CB 4B               		bit	1,e
(1) 3794/    11D2 : 28 0F               		jr      z,.ckon
(1) 3795/    11D4 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3796/    11D7 : B7                  		or	a
(1) 3797/    11D8 : 28 09               		jr	z,.ckon
(1) 3798/    11DA : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3799/    11DE : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3800/    11E2 : CF                  		rst	8
(1) 3801/    11E3 :                     .ckon:
(1) 3802/    11E3 :                     	; ----------------------------
(1) 3803/    11E3 :                     	; bit 0 - key on
(1) 3804/    11E3 : CB 43               		bit	0,e
(1) 3805/    11E5 : 28 1A               		jr	z,.envproc
(1) 3806/    11E7 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3807/    11EB : 78                  		ld	a,b
(1) 3808/    11EC : FE 04               		cp	4			; NOISE channel?
(1) 3809/    11EE : 20 08               		jr	nz,.nskip
(1) 3810/    11F0 : CF                  		rst	8			; Set NOISE mode
(1) 3811/    11F1 : 3A F2 1C            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3812/    11F4 : B1                  		or	c
(1) 3813/    11F5 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3814/    11F8 :                     .nskip:
(1) 3815/    11F8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3816/    11FC : CF                  		rst	8
(1) 3817/    11FD : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3818/    1201 :                     .nblock:
(1) 3819/    1201 :                     
(1) 3820/    1201 :                     	; ----------------------------
(1) 3821/    1201 :                     	; Process effects
(1) 3822/    1201 :                     	; ----------------------------
(1) 3823/    1201 :                     .envproc:
(1) 3824/    1201 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3825/    1204 : B7                  		or	a			; no modes
(1) 3826/    1205 : CA 8B 12            		jp	z,.vedlp
(1) 3827/    1208 : FE 01               		cp 	001b			; Attack mode
(1) 3828/    120A : 20 2C               		jr	nz,.chk2
(1) 3829/    120C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3830/    1210 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3831/    1213 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3832/    1216 : B7                  		or	a
(1) 3833/    1217 : 28 16               		jr	z,.atkend
(1) 3834/    1219 : 57                  		ld	d,a			; c - attack rate
(1) 3835/    121A : 7B                  		ld	a,e			; a - attack level
(1) 3836/    121B : CF                  		rst	8
(1) 3837/    121C : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3838/    121F : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3839/    1220 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3840/    1222 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3841/    1224 : BB                  		cp	e			; attack rate == level?
(1) 3842/    1225 : 38 08               		jr	c,.atkend
(1) 3843/    1227 : 28 06               		jr	z,.atkend
(1) 3844/    1229 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3845/    122C : CF                  		rst	8
(1) 3846/    122D : 18 5C               		jr	.vedlp
(1) 3847/    122F :                     .atkend:
(1) 3848/    122F : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3849/    1232 :                     .atkzero:
(1) 3850/    1232 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3851/    1236 : 18 53               		jr	.vedlp
(1) 3852/    1238 :                     .chk2:
(1) 3853/    1238 :                     
(1) 3854/    1238 : FE 02               		cp	010b			; Decay mode
(1) 3855/    123A : 20 31               		jr	nz,.chk4
(1) 3856/    123C :                     .dectmr:
(1) 3857/    123C : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3858/    1240 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3859/    1243 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3860/    1246 : BB                  		cp	e
(1) 3861/    1247 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3862/    1249 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3863/    124B : CF                  		rst	8
(1) 3864/    124C : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3865/    124F : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3866/    1251 : BB                  		cp	e			; compare level
(1) 3867/    1252 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3868/    1254 : 18 08               		jr	.dksav
(1) 3869/    1256 :                     .dkadd:
(1) 3870/    1256 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3871/    1259 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3872/    125B : BB                  		cp	e			; compare level
(1) 3873/    125C : 30 05               		jr	nc,.dkyend
(1) 3874/    125E :                     .dksav:
(1) 3875/    125E : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3876/    1261 : 18 28               		jr	.vedlp
(1) 3877/    1263 :                     .dkyend:
(1) 3878/    1263 : CF                  		rst	8
(1) 3879/    1264 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3880/    1267 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3881/    126B : 18 1E               		jr	.vedlp
(1) 3882/    126D :                     .chk4:
(1) 3883/    126D : FE 04               		cp	100b			; Sustain phase
(1) 3884/    126F : 20 1A               		jr	nz,.vedlp
(1) 3885/    1271 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3886/    1275 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3887/    1278 : CF                  		rst	8
(1) 3888/    1279 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3889/    127C : 38 05               		jr	c,.killenv		; release done
(1) 3890/    127E : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3891/    1281 : 18 08               		jr	.vedlp
(1) 3892/    1283 :                     .killenv:
(1) 3893/    1283 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3894/    1287 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3895/    128B :                     .vedlp:
(1) 3896/    128B :                     	; ----------------------------
(1) 3897/    128B :                     	; PSG UPDATE
(1) 3898/    128B :                     	; ----------------------------
(1) 3899/    128B : FD 7E 28            		ld	a,(iy+FLG)
(1) 3900/    128E : B7                  		or	a
(1) 3901/    128F : 28 72               		jr	z,.noupd
(1) 3902/    1291 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3903/    1295 : 59                  		ld	e,c
(1) 3904/    1296 : 3A F2 1C            		ld	a,(psgHatMode)
(1) 3905/    1299 : 57                  		ld	d,a
(1) 3906/    129A : E6 03               		and	011b
(1) 3907/    129C : FE 03               		cp	011b
(1) 3908/    129E : 20 1D               		jr	nz,.normal
(1) 3909/    12A0 : CF                  		rst	8
(1) 3910/    12A1 : 78                  		ld	a,b		; Channel 4?
(1) 3911/    12A2 : FE 03               		cp	3
(1) 3912/    12A4 : 28 13               		jr	z,.silnc_3
(1) 3913/    12A6 : FE 04               		cp	4
(1) 3914/    12A8 : 20 18               		jr	nz,.do_nfreq
(1) 3915/    12AA : 3A F2 1C            		ld	a,(psgHatMode)
(1) 3916/    12AD : 57                  		ld	d,a
(1) 3917/    12AE : E6 03               		and	011b
(1) 3918/    12B0 : CF                  		rst	8
(1) 3919/    12B1 : FE 03               		cp	011b
(1) 3920/    12B3 : 20 30               		jr	nz,.vonly
(1) 3921/    12B5 : 1E C0               		ld	e,0C0h
(1) 3922/    12B7 : 18 09               		jr	.do_nfreq
(1) 3923/    12B9 :                     .silnc_3:
(1) 3924/    12B9 : 3E FF               		ld	a,-1
(1) 3925/    12BB : 18 32               		jr	.vlmuch
(1) 3926/    12BD :                     .normal:
(1) 3927/    12BD : 78                  		ld	a,b
(1) 3928/    12BE : FE 04               		cp	4
(1) 3929/    12C0 : 28 23               		jr	z,.vonly
(1) 3930/    12C2 :                     .do_nfreq:
(1) 3931/    12C2 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3932/    12C5 : FD 66 20            		ld	h,(iy+DTH)
(1) 3933/    12C8 :                     	; freq effects go here
(1) 3934/    12C8 :                     	; (save e FIRST.)
(1) 3935/    12C8 :                     	;	push	de
(1) 3936/    12C8 :                     	;	pop	de
(1) 3937/    12C8 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3938/    12C9 : E6 0F               		and	00001111b
(1) 3939/    12CB : B3                  		or	e		; OR with channel set in e
(1) 3940/    12CC : CF                  		rst	8
(1) 3941/    12CD : DD 77 00            		ld	(ix),a		; write it
(1) 3942/    12D0 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3943/    12D1 : 0F                  		rrca
(1) 3944/    12D2 : 0F                  		rrca
(1) 3945/    12D3 : 0F                  		rrca
(1) 3946/    12D4 : 0F                  		rrca
(1) 3947/    12D5 : E6 0F               		and	00001111b
(1) 3948/    12D7 : 5F                  		ld	e,a
(1) 3949/    12D8 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3950/    12D9 : CF                  		rst	8
(1) 3951/    12DA : 07                  		rlca
(1) 3952/    12DB : 07                  		rlca
(1) 3953/    12DC : 07                  		rlca
(1) 3954/    12DD : 07                  		rlca
(1) 3955/    12DE : E6 30               		and	00110000b
(1) 3956/    12E0 : B3                  		or	e
(1) 3957/    12E1 : DD 77 00            		ld	(ix),a
(1) 3958/    12E4 : CF                  		rst	8
(1) 3959/    12E5 :                     .vonly:
(1) 3960/    12E5 : FD 7E 30            		ld	a,(iy+PVOL)		; c - Level
(1) 3961/    12E8 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3962/    12EB : 30 02               		jr	nc,.vlmuch
(1) 3963/    12ED : 3E FF               		ld	a,-1
(1) 3964/    12EF :                     .vlmuch:
(1) 3965/    12EF : CB 3F               		srl	a			; (Level >> 4)
(1) 3966/    12F1 : CB 3F               		srl	a
(1) 3967/    12F3 : CB 3F               		srl	a
(1) 3968/    12F5 : CF                  		rst	8
(1) 3969/    12F6 : CB 3F               		srl	a
(1) 3970/    12F8 : E6 0F               		and	00001111b		; Filter volume value
(1) 3971/    12FA : B1                  		or	c			; and OR with current channel
(1) 3972/    12FB : F6 90               		or	90h			; Set volume-set mode
(1) 3974/    12FD : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3976/    1300 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3977/    1303 :                     .noupd:
(1) 3978/    1303 :                     	; ----------------------------
(1) 3979/    1303 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3980/    1305 : 79                  		ld	a,c
(1) 3981/    1306 : CF                  		rst	8
(1) 3982/    1307 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3983/    1309 : 4F                  		ld	c,a
(1) 3984/    130A : 05                  		dec	b
(1) 3985/    130B : C2 B8 11            		jp	nz,.vloop
(1) 3986/    130E : C9                  		ret
(1) 3987/    130F :                     
(1) 3988/    130F :                     ; ---------------------------------------------
(1) 3989/    130F :                     ; FM register writes
(1) 3990/    130F :                     ;
(1) 3991/    130F :                     ; Input:
(1) 3992/    130F :                     ; d - ctrl
(1) 3993/    130F :                     ; e - data
(1) 3994/    130F :                     ; ---------------------------------------------
(1) 3995/    130F :                     
(1) 3996/    130F :                     ; c - KeyID
(1) 3997/    130F :                     fm_autoreg:
(1) 3998/    130F : CB 51               		bit	2,c
(1) 3999/    1311 : 20 0B               		jr	nz,fm_send_2
(1) 4000/    1313 :                     
(1) 4001/    1313 :                     ; Channels 1-3 and global registers
(1) 4002/    1313 :                     fm_send_1:
(1) 4003/    1313 : 7A                  		ld	a,d
(1) 4004/    1314 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4005/    1317 : 00                  		nop
(1) 4006/    1318 : 7B                  		ld	a,e
(1) 4007/    1319 : 32 01 40            		ld	(Zym_data_1),a
(1) 4008/    131C : 00                  		nop
(1) 4009/    131D : C9                  		ret
(1) 4010/    131E :                     ; Channels 4-6
(1) 4011/    131E :                     fm_send_2:
(1) 4012/    131E : 7A                  		ld	a,d
(1) 4013/    131F : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 4014/    1322 : 00                  		nop
(1) 4015/    1323 : 7B                  		ld	a,e
(1) 4016/    1324 : 32 03 40            		ld	(Zym_data_2),a
(1) 4017/    1327 : 00                  		nop
(1) 4018/    1328 : C9                  		ret
(1) 4019/    1329 :                     
(1) 4020/    1329 :                     ; --------------------------------------------------------
(1) 4021/    1329 :                     ; brute-force WAVE ON/OFF playback
(1) 4022/    1329 :                     ; --------------------------------------------------------
(1) 4023/    1329 :                     
(1) 4024/    1329 :                     dac_on:
(1) 4025/    1329 : 3E 2B               		ld	a,2Bh
(1) 4026/    132B : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4027/    132E : 3E 80               		ld	a,80h
(1) 4028/    1330 : 32 01 40            		ld	(Zym_data_1),a
(1) 4029/    1333 : 3E D9               		ld 	a,zopcExx
(1) 4030/    1335 : 32 08 00            		ld	(dac_me),a
(1) 4031/    1338 : 3E F5               		ld 	a,zopcPushAf
(1) 4032/    133A : 32 20 00            		ld	(dac_fill),a
(1) 4033/    133D : C9                  		ret
(1) 4034/    133E :                     dac_off:
(1) 4035/    133E : 3E 2B               		ld	a,2Bh
(1) 4036/    1340 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4037/    1343 : 3E 00               		ld	a,00h
(1) 4038/    1345 : 32 01 40            		ld	(Zym_data_1),a
(1) 4039/    1348 : 3E C9               		ld 	a,zopcRet
(1) 4040/    134A : 32 08 00            		ld	(dac_me),a
(1) 4041/    134D : 3E C9               		ld 	a,zopcRet
(1) 4042/    134F : 32 20 00            		ld	(dac_fill),a
(1) 4043/    1352 : C9                  		ret
(1) 4044/    1353 :                     
(1) 4045/    1353 :                     ; --------------------------------------------------------
(1) 4046/    1353 :                     ; dac_play
(1) 4047/    1353 :                     ;
(1) 4048/    1353 :                     ; Plays a new sample
(1) 4049/    1353 :                     ;
(1) 4050/    1353 :                     ; NOTE:
(1) 4051/    1353 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4052/    1353 :                     ; getting here.
(1) 4053/    1353 :                     ; --------------------------------------------------------
(1) 4054/    1353 :                     
(1) 4055/    1353 :                     dac_play:
(1) 4056/    1353 : F3                  		di
(1) 4057/    1354 : CD 3E 13            		call	dac_off
(1) 4058/    1357 : D9                  		exx				; flip exx regs
(1) 4059/    1358 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4060/    135B : ED 5B F8 1B         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4061/    135F : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4062/    1362 : D9                  		exx				; move them back
(1) 4063/    1363 : 2A EF 1B            		ld	hl,(wave_Start)		; copy Start and length
(1) 4064/    1366 : 3A F1 1B            		ld 	a,(wave_Start+2)
(1) 4065/    1369 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4066/    136C : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4067/    136F : 2A F2 1B            		ld	hl,(wave_Len)
(1) 4068/    1372 : 3A F4 1B            		ld 	a,(wave_Len+2)
(1) 4069/    1375 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4070/    1378 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4071/    137B : AF                  		xor	a
(1) 4072/    137C : 32 E8 1B            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4073/    137F : CD 87 13            		call	dac_refill
(1) 4074/    1382 : CD 29 13            		call	dac_on
(1) 4075/    1385 : FB                  		ei
(1) 4076/    1386 : C9                  		ret
(1) 4077/    1387 :                     
(1) 4078/    1387 :                     ; --------------------------------------------------------
(1) 4079/    1387 :                     
(1) 4080/    1387 :                     dac_refill:
(1) 4081/    1387 : CF                  		rst	8
(1) 4082/    1388 : C5                  		push	bc
(1) 4083/    1389 : D5                  		push	de
(1) 4084/    138A : E5                  		push	hl
(1) 4085/    138B : 3A FA 1B            		ld	a,(wave_Flags)	; Already finished?
(1) 4086/    138E : FE 07               		cp	111b
(1) 4087/    1390 : D2 46 14            		jp	nc,.dacfill_end
(1) 4088/    1393 : 3A EE 1B            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4089/    1396 : 2A EC 1B            		ld	hl,(dDacCntr)
(1) 4090/    1399 : 01 80 00            		ld	bc,80h
(1) 4091/    139C : 37                  		scf
(1) 4092/    139D : 3F                  		ccf
(1) 4093/    139E : ED 42               		sbc	hl,bc
(1) 4094/    13A0 : DE 00               		sbc	a,0
(1) 4095/    13A2 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4096/    13A5 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4097/    13A8 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4098/    13AA : B7                  		or	a
(1) 4099/    13AB : FA D5 13            		jp	m,.dac_over
(1) 4100/    13AE : 3A E8 1B            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4101/    13B1 : 5F                  		ld	e,a
(1) 4102/    13B2 : C6 80               		add 	a,80h
(1) 4103/    13B4 : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4104/    13B7 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4105/    13BA : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4106/    13BD : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4107/    13C0 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4108/    13C3 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4109/    13C6 : 01 80 00            		ld	bc,80h
(1) 4110/    13C9 : 09                  		add	hl,bc
(1) 4111/    13CA : CE 00               		adc	a,0
(1) 4112/    13CC : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4113/    13CF : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4114/    13D2 : C3 49 14            		jp	.dacfill_ret
(1) 4115/    13D5 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4116/    13D5 :                     ; but the USER won't notice it.
(1) 4117/    13D5 :                     .dac_over:
(1) 4118/    13D5 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4119/    13D7 : 3A FA 1B            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4120/    13DA : E6 01               		and	001b
(1) 4121/    13DC : C2 FF 13            		jp	nz,.dacfill_loop
(1) 4122/    13DF : 7D                  		ld	a,l
(1) 4123/    13E0 : C6 80               		add	a,80h
(1) 4124/    13E2 : 4F                  		ld	c,a
(1) 4125/    13E3 : 06 00               		ld	b,0
(1) 4126/    13E5 : C5                  		push	bc
(1) 4127/    13E6 : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4128/    13E9 : 5F                  		ld	e,a
(1) 4129/    13EA : C6 80               		add	a,80h
(1) 4130/    13EC : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4131/    13EF : C1                  		pop	bc
(1) 4132/    13F0 : 79                  		ld	a,c
(1) 4133/    13F1 : B0                  		or	b
(1) 4134/    13F2 : 28 52               		jr	z,.dacfill_end
(1) 4135/    13F4 : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4136/    13F7 : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4137/    13FA : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4138/    13FD : 18 47               		jr	.dacfill_end
(1) 4139/    13FF :                     ; loop sample
(1) 4140/    13FF :                     .dacfill_loop:
(1) 4141/    13FF : C5                  		push	bc
(1) 4142/    1400 : D5                  		push	de
(1) 4143/    1401 : 3A F7 1B            		ld	a,(wave_Loop+2)
(1) 4144/    1404 : 4F                  		ld	c,a
(1) 4145/    1405 : ED 5B F5 1B         		ld	de,(wave_Loop)
(1) 4146/    1409 : 2A EF 1B            		ld	hl,(wave_Start)
(1) 4147/    140C : 3A F1 1B            		ld 	a,(wave_Start+2)
(1) 4148/    140F : 81                  		add	a,c
(1) 4149/    1410 : 19                  		add	hl,de
(1) 4150/    1411 : CE 00               		adc	a,0
(1) 4151/    1413 : 22 E9 1B            		ld	(dDacPntr),hl
(1) 4152/    1416 : 32 EB 1B            		ld	(dDacPntr+2),a
(1) 4153/    1419 : 2A F2 1B            		ld	hl,(wave_Len)
(1) 4154/    141C : 3A F4 1B            		ld 	a,(wave_Len+2)
(1) 4155/    141F : 91                  		sub	a,c
(1) 4156/    1420 : 37                  		scf
(1) 4157/    1421 : 3F                  		ccf
(1) 4158/    1422 : ED 52               		sbc	hl,de
(1) 4159/    1424 : DE 00               		sbc	a,0
(1) 4160/    1426 : 22 EC 1B            		ld	(dDacCntr),hl
(1) 4161/    1429 : 32 EE 1B            		ld	(dDacCntr+2),a
(1) 4162/    142C : D1                  		pop	de
(1) 4163/    142D : C1                  		pop	bc
(1) 4164/    142E : 78                  		ld	a,b
(1) 4165/    142F : B1                  		or	c
(1) 4166/    1430 : 28 17               		jr	z,.dacfill_ret
(1) 4167/    1432 : 3A E8 1B            		ld	a,(dDacFifoMid)
(1) 4168/    1435 : 5F                  		ld	e,a
(1) 4169/    1436 : C6 80               		add	a,80h
(1) 4170/    1438 : 32 E8 1B            		ld	(dDacFifoMid),a
(1) 4171/    143B : 2A E9 1B            		ld	hl,(dDacPntr)
(1) 4172/    143E : 3A EB 1B            		ld	a,(dDacPntr+2)
(1) 4173/    1441 : CD F2 10            		call	transferRom	; *** ROM ACCESS ***
(1) 4174/    1444 : 18 03               		jr	.dacfill_ret
(1) 4175/    1446 :                     .dacfill_end:
(1) 4176/    1446 : CD 3E 13            		call	dac_off		; DAC finished
(1) 4177/    1449 :                     .dacfill_ret:
(1) 4178/    1449 : E1                  		pop	hl
(1) 4179/    144A : D1                  		pop	de
(1) 4180/    144B : C1                  		pop	bc
(1) 4181/    144C : C9                  		ret
(1) 4182/    144D :                     
(1) 4183/    144D :                     ; ----------------------------------------------------------------
(1) 4184/    144D :                     ; gema_lastbank
(1) 4185/    144D :                     ;
(1) 4186/    144D :                     ; Two purposes:
(1) 4187/    144D :                     ; - Set the BANK to the very last part of memory for the
(1) 4188/    144D :                     ;   transferRom to read from RAM
(1) 4189/    144D :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4190/    144D :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4191/    144D :                     ;
(1) 4192/    144D :                     ; Uses:
(1) 4193/    144D :                     ; hl,b
(1) 4194/    144D :                     ; ----------------------------------------------------------------
(1) 4195/    144D :                     
(1) 4196/    144D :                     gema_lastbank:
(1) 4197/    144D : 21 00 60            		ld	hl,6000h
(1) 4198/    1450 : 06 09               		ld	b,9		; 9 bits
(1) 4199/    1452 :                     .write:
(1) 4200/    1452 : 36 01               		ld	(hl),1
(1) 4201/    1454 : 10 FC               		djnz	.write
(1) 4202/    1456 : C9                  		ret
(1) 4203/    1457 :                     
(1) 4204/    1457 :                     ; ====================================================================
(1) 4205/    1457 :                     ; ----------------------------------------------------------------
(1) 4206/    1457 :                     ; Frequency tables
(1) 4207/    1457 :                     ; ----------------------------------------------------------------
(1) 4208/    1457 :                     
(1) 4209/    1457 : 84 02               fmFreq_List:	dw 644
(1) 4210/    1459 : A9 02               		dw 681
(1) 4211/    145B : D2 02               		dw 722
(1) 4212/    145D : FD 02               		dw 765
(1) 4213/    145F : 2A 03               		dw 810
(1) 4214/    1461 : 5A 03               		dw 858
(1) 4215/    1463 : 8E 03               		dw 910
(1) 4216/    1465 : C4 03               		dw 964
(1) 4217/    1467 : FD 03               		dw 1021
(1) 4218/    1469 : 39 04               		dw 1081
(1) 4219/    146B : 7A 04               		dw 1146
(1) 4220/    146D : BE 04               		dw 1214
(1) 4221/    146F :                     
(1) 4222/    146F :                     ; ----------------------------------------
(1) 4223/    146F :                     ; DAC and PWM
(1) 4224/    146F :                     ; ----------------------------------------
(1) 4225/    146F :                     
(1) 4226/    146F :                     psgFreq_List:
(1) 4227/    146F :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4228/    146F :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4229/    146F :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4230/    146F : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1475 : FF FF FF FF FF FF 
             147B : FF FF FF FF FF FF 
             1481 : F8 03 BF 03 89 03 
(1) 4231/    1487 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             148D : CE 02 A5 02 80 02 
             1493 : 5C 02 3A 02 1A 02 
             1499 : FB 01 DF 01 C4 01 
(1) 4232/    149F : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             14A5 : 67 01 53 01 40 01 
             14AB : 2E 01 1D 01 0D 01 
             14B1 : FE 00 EF 00 E2 00 
(1) 4233/    14B7 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             14BD : B4 00 A9 00 A0 00 
             14C3 : 97 00 8F 00 87 00 
             14C9 : 7F 00 78 00 71 00 
(1) 4234/    14CF : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             14D5 : 5A 00 55 00 50 00 
             14DB : 4B 00 47 00 43 00 
             14E1 : 40 00 3C 00 39 00 
(1) 4235/    14E7 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             14ED : 2D 00 2B 00 28 00 
             14F3 : 26 00 24 00 22 00 
             14F9 : 20 00 1F 00 1D 00 
(1) 4236/    14FF : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             1505 : 17 00 16 00 15 00 
             150B : 13 00 12 00 11 00 
             1511 : 10 00 09 00 01 00 
(1) 4237/    1517 :                     
(1) 4238/    1517 :                     ; ----------------------------------------
(1) 4239/    1517 :                     ; DAC and PWM shared list
(1) 4240/    1517 :                     ; ----------------------------------------
(1) 4241/    1517 :                     
(1) 4242/    1517 :                     wavFreq_List:
(1) 4243/    1517 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4244/    1517 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4245/    1517 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4246/    1517 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4247/    1517 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0052h,0056h,005Ah,0060h,0066h,006Ch,0071h,0079h	; x-3 4000 ok
             151D : 4C 00 52 00 56 00 
             1523 : 5A 00 60 00 66 00 
             1529 : 6C 00 71 00 79 00 
(1) 4248/    152F : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,009Bh,00A2h,00AEh,00B4h,00C2h,00CCh,00D7h,00E4h,00F0h	; x-4 8000 ok
             1535 : 9B 00 A2 00 AE 00 
             153B : B4 00 C2 00 CC 00 
             1541 : D7 00 E4 00 F0 00 
(1) 4249/    1547 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,012Eh,0147h,015Bh,016Ch,0181h,0191h,01ACh,01C2h,01E0h	; x-5 16000 ok
             154D : 2E 01 47 01 5B 01 
             1553 : 6C 01 81 01 91 01 
             1559 : AC 01 C2 01 E0 01 
(1) 4250/    155F : 00 02 10 02 40 02   	dw 0200h,0210h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0320h,0350h,0380h,03C0h	; x-6 32000 wip
             1565 : 60 02 80 02 A0 02 
             156B : D0 02 F8 02 20 03 
             1571 : 50 03 80 03 C0 03 
(1) 4251/    1577 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4252/    1577 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4253/    1577 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4254/    1577 :                     
(1) 4255/    1577 :                     ; ----------------------------------------
(1) 4256/    1577 :                     ; SegaCD PCM
(1) 4257/    1577 :                     ; ----------------------------------------
(1) 4258/    1577 :                     wavFreq_CdPcm:
(1) 4259/    1577 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4260/    1577 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4261/    1577 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4262/    1577 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             157D : 28 01 3C 01 4C 01 
             1583 : 60 01 7C 01 88 01 
             1589 : AA 01 BC 01 DC 01 
(1) 4263/    158F : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             1595 : 58 02 7C 02 A0 02 
             159B : C8 02 FC 02 1C 03 
             15A1 : 54 03 7C 03 B8 03 
(1) 4264/    15A7 : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             15AD : AC 04 EC 04 40 05 
             15B3 : 90 05 E4 05 3C 06 
             15B9 : 98 06 04 07 60 07 
(1) 4265/    15BF : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             15C5 : 60 09 F0 09 64 0A 
             15CB : 04 0B AA 0B 60 0C 
             15D1 : 18 0D E4 0D B8 0E 
(1) 4266/    15D7 :                     ; 	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 unstable
(1) 4267/    15D7 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4268/    15D7 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4269/    15D7 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4270/    15D7 :                     
(1) 4271/    15D7 :                     ; ====================================================================
(1) 4272/    15D7 :                     ; ----------------------------------------------------------------
(1) 4273/    15D7 :                     ; Chip buffers
(1) 4274/    15D7 :                     ; ----------------------------------------------------------------
(1) 4275/    15D7 :                     
(1) 4276/    15D7 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             15DD : 00 00             
(1) 4277/    15DF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             15E5 : 00 00             
(1) 4278/    15E7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             15ED : 00 00             
(1) 4279/    15EF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Volume
             15F5 : 00 00             
(1) 4280/    15F7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - Panning %RRRRLLLL
             15FD : 00 00             
(1) 4281/    15FF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             1605 : 00 00             
(1) 4282/    1607 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             160D : 00 00             
(1) 4283/    160F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             1615 : 00 00             
(1) 4284/    1617 :                     
(1) 4285/    1617 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             161D : 00 00             
(1) 4286/    161F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             1625 : 00 00             
(1) 4287/    1627 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             162D : 00 00             
(1) 4288/    162F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1635 : 00 00             
(1) 4289/    1637 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             163D : 00 00             
(1) 4290/    163F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1645 : 00 00             
(1) 4291/    1647 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             164D : 00 00             
(1) 4292/    164F :                     
(1) 4293/    164F : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4294/    1653 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4295/    1657 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4296/    165B : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4297/    165F : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4298/    1663 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4299/    1667 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4300/    166B : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4301/    166F : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4302/    1673 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4303/    1677 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4304/    167B : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4305/    167F : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4306/    1683 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4307/    1687 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4308/    168B :                     
(1) 4309/    168B :                     ; --------------------------------------------------------
(1) 4310/    168B :                     ; FM instrument storage
(1) 4311/    168B :                     fmcach_1	ds 28h
(1) 4312/    16B3 :                     fmcach_2	ds 28h
(1) 4313/    16DB :                     fmcach_3	ds 28h
(1) 4314/    1703 :                     fmcach_4	ds 28h
(1) 4315/    172B :                     fmcach_5	ds 28h
(1) 4316/    1753 :                     fmcach_6	ds 28h
(1) 4317/    177B :                     
(1) 4318/    177B :                     ; ====================================================================
(1) 4319/    177B :                     ; ----------------------------------------------------------------
(1) 4320/    177B :                     ; Track buffers
(1) 4321/    177B :                     ; ----------------------------------------------------------------
(1) 4322/    177B :                     
(1) 4323/    177B :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4324/    179B :                     trkHdrs_1	ds 8*4
(1) 4325/    17BB :                     trkHdrs_2	ds 8*4
(1) 4326/    17DB :                     trkBlks_0	ds 8
(1) 4327/    17E3 :                     trkBlks_1	ds 8
(1) 4328/    17EB :                     trkBlks_2	ds 8
(1) 4329/    17F3 :                     trkBuff_0	ds trk_ChnIndx+MAX_TRKINDX
(1) 4330/    1832 :                     trkBuff_1	ds trk_ChnIndx+MAX_TRKINDX
(1) 4331/    1871 :                     trkBuff_2	ds trk_ChnIndx+MAX_TRKINDX
(1) 4332/    18B0 :                     
(1) 4333/    18B0 :                     ; ====================================================================
(1) 4334/    18B0 :                     ; --------------------------------------------------------
(1) 4335/    18B0 :                     ; Channel tables
(1) 4336/    18B0 :                     ;
(1) 4337/    18B0 :                     ; PSG   80h
(1) 4338/    18B0 :                     ; PSGN  90h
(1) 4339/    18B0 :                     ; FM   0A0h
(1) 4340/    18B0 :                     ; FM3  0B0h
(1) 4341/    18B0 :                     ; DAC  0C0h
(1) 4342/    18B0 :                     ; PCM  0D0h
(1) 4343/    18B0 :                     ; PWM  0E0h
(1) 4344/    18B0 :                     ; --------------------------------------------------------
(1) 4345/    18B0 :                     
(1) 4346/    1A60 :                     		org 1A60h			; <-- MUST BE x0h ALIGNED
(1) 4347/    1A60 : 9E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4348/    1A62 : 62 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4349/    1A64 : 0E 00               		dw tblFM-tblList		; 0A0h
(1) 4350/    1A66 : 6E 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4351/    1A68 : 86 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4352/    1A6A : A0 00               		dw tblPCM-tblList		; 0D0h
(1) 4353/    1A6C : E8 01               		dw tblPWM-tblList		; 0E0h
(1) 4354/    1A6E :                     ; 		dw 0				; 0F0h
(1) 4355/    1A6E : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1A74 : 00 00             
(1) 4356/    1A76 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A7C : 00 00             
(1) 4357/    1A7E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A84 : 00 00             
(1) 4358/    1A86 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1A8C : 00 00             
(1) 4359/    1A8E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A94 : 00 00             
(1) 4360/    1A96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1A9C : 00 00             
(1) 4361/    1A9E : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 4 <--
             1AA4 : 00 00             
(1) 4362/    1AA6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AAC : 00 00             
(1) 4363/    1AAE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AB4 : 00 00             
(1) 4364/    1AB6 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 5
             1ABC : 00 00             
(1) 4365/    1ABE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AC4 : 00 00             
(1) 4366/    1AC6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ACC : 00 00             
(1) 4367/    1ACE : 00 00 00 02 02 00   tblFM3:		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3 <--
             1AD4 : 00 00             
(1) 4368/    1AD6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1ADC : 00 00             
(1) 4369/    1ADE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AE4 : 00 00             
(1) 4370/    1AE6 : 00 00 00 06 06 00   tblFM6:		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 6 <--
             1AEC : 00 00             
(1) 4371/    1AEE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AF4 : 00 00             
(1) 4372/    1AF6 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1AFC : 00 00             
(1) 4373/    1AFE : FF FF               		dw -1	; end-of-list
(1) 4374/    1B00 : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B06 : 00 00             
(1) 4375/    1B08 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B0E : 00 00             
(1) 4376/    1B10 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B16 : 00 00             
(1) 4377/    1B18 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1B1E : 00 00             
(1) 4378/    1B20 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B26 : 00 00             
(1) 4379/    1B28 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B2E : 00 00             
(1) 4380/    1B30 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1B36 : 00 00             
(1) 4381/    1B38 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B3E : 00 00             
(1) 4382/    1B40 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B46 : 00 00             
(1) 4383/    1B48 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1B4E : 00 00             
(1) 4384/    1B50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B56 : 00 00             
(1) 4385/    1B58 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B5E : 00 00             
(1) 4386/    1B60 : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1B66 : 00 00             
(1) 4387/    1B68 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B6E : 00 00             
(1) 4388/    1B70 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B76 : 00 00             
(1) 4389/    1B78 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1B7E : 00 00             
(1) 4390/    1B80 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B86 : 00 00             
(1) 4391/    1B88 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8E : 00 00             
(1) 4392/    1B90 : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1B96 : 00 00             
(1) 4393/    1B98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9E : 00 00             
(1) 4394/    1BA0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BA6 : 00 00             
(1) 4395/    1BA8 : 00 00 00 07 07 00   		db 00h,00h,00h,07h,07h,00h,00h,00h	; Channel 7
             1BAE : 00 00             
(1) 4396/    1BB0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB6 : 00 00             
(1) 4397/    1BB8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BBE : 00 00             
(1) 4398/    1BC0 : FF FF               		dw -1	; end-of-list
(1) 4399/    1BC2 : 00 00 00 03 03 00   tblPSGN:	db 00h,00h,00h,03h,03h,00h,00h,00h	; Noise
             1BC8 : 00 00             
(1) 4400/    1BCA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD0 : 00 00             
(1) 4401/    1BD2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD8 : 00 00             
(1) 4402/    1BDA :                     ; --------------------------------------------------------
(1) 4403/    1BDA : 8B 16               fmcach_list:	dw fmcach_1
(1) 4404/    1BDC : B3 16               		dw fmcach_2
(1) 4405/    1BDE : DB 16               		dw fmcach_3
(1) 4406/    1BE0 : 00                  marsUpd		db 0		; Flag to request a PWM transfer
(1) 4407/    1BE1 : 00                  mcdUpd		db 0		; Flag to request a PCM transfer
(1) 4408/    1BE2 : 03 17               		dw fmcach_4	; Followup
(1) 4409/    1BE4 : 2B 17               		dw fmcach_5
(1) 4410/    1BE6 : 53 17               		dw fmcach_6
(1) 4411/    1BE8 : 00                  dDacFifoMid	db 0		; WAVE play halfway refill flag (00h/80h)
(1) 4412/    1BE9 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4413/    1BEC : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4414/    1BEF : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4415/    1BF1 : 00                  		db 0
(1) 4416/    1BF2 : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4417/    1BF4 : 00                  		db 0
(1) 4418/    1BF5 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4419/    1BF7 : 00                  		db 0
(1) 4420/    1BF8 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4421/    1BFA : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4422/    1BFB : 00                  tickSpSet	db 0		; **
(1) 4423/    1BFC : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4424/    1BFD : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4425/    1BFE :                     ; --------------------------------------------------------
(1) 4426/    1BFE : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C04 : 00 00             
(1) 4427/    1C06 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0C : 00 00             
(1) 4428/    1C0E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C14 : 00 00             
(1) 4429/    1C16 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C1C : 00 00             
(1) 4430/    1C1E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C24 : 00 00             
(1) 4431/    1C26 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C2C : 00 00             
(1) 4432/    1C2E : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C34 : 00 00             
(1) 4433/    1C36 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C3C : 00 00             
(1) 4434/    1C3E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C44 : 00 00             
(1) 4435/    1C46 : FF FF               		dw -1	; end-of-list
(1) 4436/    1C48 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C4E : 00 00             
(1) 4437/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4438/    1C58 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C5E : 00 00             
(1) 4439/    1C60 : 00 00 00 01 01 00   		db 00h,00h,00h,01h,01h,00h,00h,00h	; Channel 2
             1C66 : 00 00             
(1) 4440/    1C68 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C6E : 00 00             
(1) 4441/    1C70 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C76 : 00 00             
(1) 4442/    1C78 : 00 00 00 02 02 00   		db 00h,00h,00h,02h,02h,00h,00h,00h	; Channel 3
             1C7E : 00 00             
(1) 4443/    1C80 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C86 : 00 00             
(1) 4444/    1C88 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8E : 00 00             
(1) 4445/    1C90 : 00 00 00 03 03 00   		db 00h,00h,00h,03h,03h,00h,00h,00h	; Channel 4
             1C96 : 00 00             
(1) 4446/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4447/    1CA0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CA6 : 00 00             
(1) 4448/    1CA8 : 00 00 00 04 04 00   		db 00h,00h,00h,04h,04h,00h,00h,00h	; Channel 5
             1CAE : 00 00             
(1) 4449/    1CB0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB6 : 00 00             
(1) 4450/    1CB8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CBE : 00 00             
(1) 4451/    1CC0 : 00 00 00 05 05 00   		db 00h,00h,00h,05h,05h,00h,00h,00h	; Channel 6
             1CC6 : 00 00             
(1) 4452/    1CC8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CCE : 00 00             
(1) 4453/    1CD0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD6 : 00 00             
(1) 4454/    1CD8 : 00 00 00 06 06 00   		db 00h,00h,00h,06h,06h,00h,00h,00h	; Channel 7
             1CDE : 00 00             
(1) 4455/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4456/    1CE8 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CEE : 00 00             
(1) 4457/    1CF0 :                     ; 		db 00h,00h,00h,07h,00h,00h,00h,00h	; Channel 8
(1) 4458/    1CF0 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4459/    1CF0 :                     ; 		db 00h,00h,00h,00h,00h,00h,00h,00h
(1) 4460/    1CF0 : FF FF               		dw -1	; end-of-list
(1) 4461/    1CF2 :                     
(1) 4462/    1CF2 :                     ; ----------------------------------------------------------------
(1) 4463/    1CF2 :                     
(1) 4464/    1CF2 : 00                  psgHatMode	db 0		; Current PSGN mode
(1) 4465/    1CF3 : 00                  fmSpecial	db 0		; copy of FM3 enable bit
(1) 4466/    1CF4 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4467/    1CF5 : 00                  x68ksrclsb	db 0		; transferRom temporal LSB
(1) 4468/    1CF6 : 00                  x68ksrcmid	db 0		; transferRom temporal MID
(1) 4469/    1CF7 : 00 00               sbeatAcc	dw 0		; Accumulates on each tick to trigger the sub beats
(1) 4470/    1CF9 : D6 00               sbeatPtck	dw 214		; Default global subbeats (this-32 for PAL) 214=125
(1) 4471/    1CFB :                     		ds 1		; FREE BYTE
(1) 4472/    1CFC :                     
(1) 4473/    1CFC :                     ; ====================================================================
(1) 4474/    1CFC :                     ; ----------------------------------------------------------------
(1) 4475/    1CFC :                     ; Special aligned buffers
(1) 4476/    1CFC :                     ;
(1) 4477/    1CFC :                     ; Located at 1D00h
(1) 4478/    1CFC :                     ; ----------------------------------------------------------------
(1) 4479/    1CFC :                     
(1) 4480/    1D00 :                     		org 1D00h
(1) 4481/    1D00 :                     dWaveBuff	ds 100h		; WAVE data buffer: 100h bytes, updates every 80h
(1) 4482/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4483/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4484/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4485/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4486/    1F60 :                     ; --------------------------------------------------------
(1) 4487/    1F60 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4488/    1F6E :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4489/    1F70 :                     trkInfoCach	ds 4
(1) 4490/    1F74 :                     sampleHead	ds 006h
(1) 4491/    1F7A :                     instListOut	ds 8
(1) 4492/    1F82 :                     
(1) 4493/    1F82 :                     ; ====================================================================
(1) 4494/    1F82 :                     ; --------------------------------------------------------
(1) 4495/    1F82 :                     ; MASTER buffers list
(1) 4496/    1F82 :                     ;
(1) 4497/    1F82 :                     ; dw track_buffer
(1) 4498/    1F82 :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4499/    1F82 :                     ;
(1) 4500/    1F82 :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4501/    1F82 :                     ; --------------------------------------------------------
(1) 4502/    1F82 :                     
(1) 4503/    1F82 :                     nikona_BuffList:
(1) 4504/    1F82 : F3 17 DB 17 7B 17   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1F88 : 00 1F             
(1) 4505/    1F8A : 32 18 E3 17 9B 17   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1F90 : 20 1F             
(1) 4506/    1F92 : 71 18 EB 17 BB 17   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1F98 : 40 1F             
(1) 4507/    1F9A :                     nikona_BuffList_e:
(1) 4508/    1F9A : FF FF               	dw -1	; ENDOFLIST
(1) 4509/    1F9C :                     
(1) 4510/    1F9C :                     ; --------------------------------------------------------
(1) 4511/    1F9C :                     
(1) 4512/  201F9C :                     		dephase
(1) 4513/  201F9C :                     		cpu 68000		; [AS] Return to 68k
(1) 4514/  201F9C :                     		padding off		; [AS] NO padding
(1) 4515/  201F9C :                     		align 2
(1) 4516/  201F9C :                     
     319/  201F9C :                     Z80_CODE_END:
     323/    DF9C :                     		dephase
     324/    DF9C : (MACRO)              		fs_end
     324/    DF9C : 00                                  dc.b 0
     324/    DF9D :                                     align $800                      ; Filler sector
     326/    E000 :                     Z80_CODE_FILE_E:
     327/    E000 :                     
     328/    E000 :                     ; ====================================================================
     329/    E000 :                     ; --------------------------------------------------------
     330/    E000 :                     ; SEGA CD SUB-CPU data
     331/    E000 :                     ; --------------------------------------------------------
     332/    E000 :                     
     334/    E000 :                     		align $800
     335/    E000 :                     MCD_SMPDATA:
     336/   20000 :                     		phase $20000				; <-- MANUAL location on Sub-CPU area
     337/   20000 :                     	; ------------------------------------------------
     338/   20000 :                     		include "sound/smpl_pcm.asm"		; PCM samples
(1)    1/   20000 :                     ; ===========================================================================
(1)    2/   20000 :                     ; -------------------------------------------------------------------
(1)    3/   20000 :                     ; GEMA/Nikona PCM instruments for Sega CD and CD32X
(1)    4/   20000 :                     ;
(1)    5/   20000 :                     ; Stored on DISC and loaded to Sub-CPU on boot
(1)    6/   20000 :                     ;
(1)    7/   20000 :                     ; MACRO:
(1)    8/   20000 :                     ; gSmplData Label,"file_path",loop_start
(1)    9/   20000 :                     ;
(1)   10/   20000 :                     ; Set loop_start to 0 if not using it.
(1)   11/   20000 :                     ;
(1)   12/   20000 :                     ; BASE C-5 samplerate is 16000hz
(1)   13/   20000 :                     ; -------------------------------------------------------------------
(1)   14/   20000 :                     
(1)   15/   20000 :                     	align 4
(1)   16/   20000 :                     	;gSmplData Label,"file_path",loop_start
(1)   17/   20000 :                     ; -----------------------------------------------------------
(1)   18/   20000 :                     ; 	gSmplData PcmIns_test_L,"sound/instr/smpl/test_l.wav",0
(1)   19/   20000 :                     ; 	gSmplData PcmIns_test_R,"sound/instr/smpl/test_r.wav",0
(1)   20/   20000 : (MACRO)              	gSmplData PcmIns_TEST,"sound/instr/smpl/test_m.wav",0
(1)   20/   20000 : =$20000              PCMINS_TEST    label *
(1)   20/   20000 : F06B 00                     dc.b ((PCMINS_TEST_e-PCMINS_TEST_s)&$FF),(((PCMINS_TEST_e-PCMINS_TEST_s)>>8)&$FF),(((PCMINS_TEST_e-PCMINS_TEST_s)>>16)&$FF)
(1)   20/   20003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   20/   20006 :                     PCMINS_TEST_s:
(1)   20/   20006 :                             binclude "sound/instr/smpl/test_m.wav",$2C
(1)   20/   26BF6 :                     PCMINS_TEST_e:
(1)   21/   26BF6 :                     
(1)   22/   26BF6 : (MACRO)              	gSmplData PcmIns_Nadie_L,"sound/instr/smpl/nadie_l.wav",0
(1)   22/   26BF6 : =$26BF6              PCMINS_NADIE_L    label *
(1)   22/   26BF6 : A7DF 00                     dc.b ((PCMINS_NADIE_L_e-PCMINS_NADIE_L_s)&$FF),(((PCMINS_NADIE_L_e-PCMINS_NADIE_L_s)>>8)&$FF),(((PCMINS_NADIE_L_e-PCMINS_NADIE_L_s)>>16)&$FF)
(1)   22/   26BF9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   22/   26BFC :                     PCMINS_NADIE_L_s:
(1)   22/   26BFC :                             binclude "sound/instr/smpl/nadie_l.wav",$2C
(1)   22/   34BA3 :                     PCMINS_NADIE_L_e:
(1)   23/   34BA3 : (MACRO)              	gSmplData PcmIns_Nadie_R,"sound/instr/smpl/nadie_r.wav",0
(1)   23/   34BA3 : =$34BA3              PCMINS_NADIE_R    label *
(1)   23/   34BA3 : A7DF 00                     dc.b ((PCMINS_NADIE_R_e-PCMINS_NADIE_R_s)&$FF),(((PCMINS_NADIE_R_e-PCMINS_NADIE_R_s)>>8)&$FF),(((PCMINS_NADIE_R_e-PCMINS_NADIE_R_s)>>16)&$FF)
(1)   23/   34BA6 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   23/   34BA9 :                     PCMINS_NADIE_R_s:
(1)   23/   34BA9 :                             binclude "sound/instr/smpl/nadie_r.wav",$2C
(1)   23/   42B50 :                     PCMINS_NADIE_R_e:
(1)   24/   42B50 : (MACRO)              	gSmplData PcmIns_Piano,"sound/instr/smpl/piano_1.wav",0
(1)   24/   42B50 : =$42B50              PCMINS_PIANO    label *
(1)   24/   42B50 : 1647 00                     dc.b ((PCMINS_PIANO_e-PCMINS_PIANO_s)&$FF),(((PCMINS_PIANO_e-PCMINS_PIANO_s)>>8)&$FF),(((PCMINS_PIANO_e-PCMINS_PIANO_s)>>16)&$FF)
(1)   24/   42B53 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   24/   42B56 :                     PCMINS_PIANO_s:
(1)   24/   42B56 :                             binclude "sound/instr/smpl/piano_1.wav",$2C
(1)   24/   4726C :                     PCMINS_PIANO_e:
(1)   25/   4726C : (MACRO)              	gSmplData PcmIns_PKick,"sound/instr/smpl/wegot_kick.wav",0
(1)   25/   4726C : =$4726C              PCMINS_PKICK    label *
(1)   25/   4726C : 7407 00                     dc.b ((PCMINS_PKICK_e-PCMINS_PKICK_s)&$FF),(((PCMINS_PKICK_e-PCMINS_PKICK_s)>>8)&$FF),(((PCMINS_PKICK_e-PCMINS_PKICK_s)>>16)&$FF)
(1)   25/   4726F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   25/   47272 :                     PCMINS_PKICK_s:
(1)   25/   47272 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(1)   25/   479E6 :                     PCMINS_PKICK_e:
(1)   26/   479E6 : (MACRO)              	gSmplData PcmIns_PTom,"sound/instr/smpl/sauron_tom.wav",0
(1)   26/   479E6 : =$479E6              PCMINS_PTOM    label *
(1)   26/   479E6 : B40B 00                     dc.b ((PCMINS_PTOM_e-PCMINS_PTOM_s)&$FF),(((PCMINS_PTOM_e-PCMINS_PTOM_s)>>8)&$FF),(((PCMINS_PTOM_e-PCMINS_PTOM_s)>>16)&$FF)
(1)   26/   479E9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   26/   479EC :                     PCMINS_PTOM_s:
(1)   26/   479EC :                             binclude "sound/instr/smpl/sauron_tom.wav",$2C
(1)   26/   485A0 :                     PCMINS_PTOM_e:
(1)   27/   485A0 :                     
(1)   28/   485A0 : (MACRO)              	gSmplData PcmIns_MoveMe_Hit,"sound/instr/smpl/moveme_hit.wav",0
(1)   28/   485A0 : =$485A0              PCMINS_MOVEME_HIT    label *
(1)   28/   485A0 : F410 00                     dc.b ((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)&$FF),(((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)>>8)&$FF),(((PCMINS_MOVEME_HIT_e-PCMINS_MOVEME_HIT_s)>>16)&$FF)
(1)   28/   485A3 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   28/   485A6 :                     PCMINS_MOVEME_HIT_s:
(1)   28/   485A6 :                             binclude "sound/instr/smpl/moveme_hit.wav",$2C
(1)   28/   4969A :                     PCMINS_MOVEME_HIT_e:
(1)   29/   4969A : (MACRO)              	gSmplData PcmIns_MoveMe_Brass,"sound/instr/smpl/brass_moveme_m.wav",6478
(1)   29/   4969A : =$4969A              PCMINS_MOVEME_BRASS    label *
(1)   29/   4969A : E46B 00                     dc.b ((PCMINS_MOVEME_BRASS_e-PCMINS_MOVEME_BRASS_s)&$FF),(((PCMINS_MOVEME_BRASS_e-PCMINS_MOVEME_BRASS_s)>>8)&$FF),(((PCMINS_MOVEME_BRASS_e-PCMINS_MOVEME_BRASS_s)>>16)&$FF)
(1)   29/   4969D : 4E19 00                     dc.b ((6478)&$FF),(((6478)>>8)&$FF),(((6478)>>16)&$FF)
(1)   29/   496A0 :                     PCMINS_MOVEME_BRASS_s:
(1)   29/   496A0 :                             binclude "sound/instr/smpl/brass_moveme_m.wav",$2C
(1)   29/   50284 :                     PCMINS_MOVEME_BRASS_e:
(1)   30/   50284 : (MACRO)              	gSmplData PcmIns_Snare_moveme,"sound/instr/smpl/snare_moveme.wav",0
(1)   30/   50284 : =$50284              PCMINS_SNARE_MOVEME    label *
(1)   30/   50284 : 8409 00                     dc.b ((PCMINS_SNARE_MOVEME_e-PCMINS_SNARE_MOVEME_s)&$FF),(((PCMINS_SNARE_MOVEME_e-PCMINS_SNARE_MOVEME_s)>>8)&$FF),(((PCMINS_SNARE_MOVEME_e-PCMINS_SNARE_MOVEME_s)>>16)&$FF)
(1)   30/   50287 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   30/   5028A :                     PCMINS_SNARE_MOVEME_s:
(1)   30/   5028A :                             binclude "sound/instr/smpl/snare_moveme.wav",$2C
(1)   30/   50C0E :                     PCMINS_SNARE_MOVEME_e:
(1)   31/   50C0E : (MACRO)              	gSmplData PcmIns_Kick,"sound/instr/smpl/kick_moveme.wav",0
(1)   31/   50C0E : =$50C0E              PCMINS_KICK    label *
(1)   31/   50C0E : 7409 00                     dc.b ((PCMINS_KICK_e-PCMINS_KICK_s)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>8)&$FF),(((PCMINS_KICK_e-PCMINS_KICK_s)>>16)&$FF)
(1)   31/   50C11 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   31/   50C14 :                     PCMINS_KICK_s:
(1)   31/   50C14 :                             binclude "sound/instr/smpl/kick_moveme.wav",$2C
(1)   31/   51588 :                     PCMINS_KICK_e:
(1)   32/   51588 :                     
(1)   33/   51588 : (MACRO)              	gSmplData PcmIns_Sauron_01,"sound/instr/smpl/sauron/01.wav",0
(1)   33/   51588 : =$51588              PCMINS_SAURON_01    label *
(1)   33/   51588 : 040F 00                     dc.b ((PCMINS_SAURON_01_e-PCMINS_SAURON_01_s)&$FF),(((PCMINS_SAURON_01_e-PCMINS_SAURON_01_s)>>8)&$FF),(((PCMINS_SAURON_01_e-PCMINS_SAURON_01_s)>>16)&$FF)
(1)   33/   5158B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   33/   5158E :                     PCMINS_SAURON_01_s:
(1)   33/   5158E :                             binclude "sound/instr/smpl/sauron/01.wav",$2C
(1)   33/   52492 :                     PCMINS_SAURON_01_e:
(1)   34/   52492 : (MACRO)              	gSmplData PcmIns_Sauron_02,"sound/instr/smpl/sauron/02.wav",0
(1)   34/   52492 : =$52492              PCMINS_SAURON_02    label *
(1)   34/   52492 : 6E0C 00                     dc.b ((PCMINS_SAURON_02_e-PCMINS_SAURON_02_s)&$FF),(((PCMINS_SAURON_02_e-PCMINS_SAURON_02_s)>>8)&$FF),(((PCMINS_SAURON_02_e-PCMINS_SAURON_02_s)>>16)&$FF)
(1)   34/   52495 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   34/   52498 :                     PCMINS_SAURON_02_s:
(1)   34/   52498 :                             binclude "sound/instr/smpl/sauron/02.wav",$2C
(1)   34/   53106 :                     PCMINS_SAURON_02_e:
(1)   35/   53106 : (MACRO)              	gSmplData PcmIns_Sauron_03,"sound/instr/smpl/sauron/03.wav",0
(1)   35/   53106 : =$53106              PCMINS_SAURON_03    label *
(1)   35/   53106 : C80C 00                     dc.b ((PCMINS_SAURON_03_e-PCMINS_SAURON_03_s)&$FF),(((PCMINS_SAURON_03_e-PCMINS_SAURON_03_s)>>8)&$FF),(((PCMINS_SAURON_03_e-PCMINS_SAURON_03_s)>>16)&$FF)
(1)   35/   53109 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   35/   5310C :                     PCMINS_SAURON_03_s:
(1)   35/   5310C :                             binclude "sound/instr/smpl/sauron/03.wav",$2C
(1)   35/   53DD4 :                     PCMINS_SAURON_03_e:
(1)   36/   53DD4 : (MACRO)              	gSmplData PcmIns_Sauron_04,"sound/instr/smpl/sauron/04.wav",0
(1)   36/   53DD4 : =$53DD4              PCMINS_SAURON_04    label *
(1)   36/   53DD4 : DE23 00                     dc.b ((PCMINS_SAURON_04_e-PCMINS_SAURON_04_s)&$FF),(((PCMINS_SAURON_04_e-PCMINS_SAURON_04_s)>>8)&$FF),(((PCMINS_SAURON_04_e-PCMINS_SAURON_04_s)>>16)&$FF)
(1)   36/   53DD7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   36/   53DDA :                     PCMINS_SAURON_04_s:
(1)   36/   53DDA :                             binclude "sound/instr/smpl/sauron/04.wav",$2C
(1)   36/   561B8 :                     PCMINS_SAURON_04_e:
(1)   37/   561B8 : (MACRO)              	gSmplData PcmIns_Sauron_05,"sound/instr/smpl/sauron/05.wav",13988
(1)   37/   561B8 : =$561B8              PCMINS_SAURON_05    label *
(1)   37/   561B8 : B24D 00                     dc.b ((PCMINS_SAURON_05_e-PCMINS_SAURON_05_s)&$FF),(((PCMINS_SAURON_05_e-PCMINS_SAURON_05_s)>>8)&$FF),(((PCMINS_SAURON_05_e-PCMINS_SAURON_05_s)>>16)&$FF)
(1)   37/   561BB : A436 00                     dc.b ((13988)&$FF),(((13988)>>8)&$FF),(((13988)>>16)&$FF)
(1)   37/   561BE :                     PCMINS_SAURON_05_s:
(1)   37/   561BE :                             binclude "sound/instr/smpl/sauron/05.wav",$2C
(1)   37/   5AF70 :                     PCMINS_SAURON_05_e:
(1)   38/   5AF70 : (MACRO)              	gSmplData PcmIns_Sauron_06,"sound/instr/smpl/sauron/06.wav",0
(1)   38/   5AF70 : =$5AF70              PCMINS_SAURON_06    label *
(1)   38/   5AF70 : 8825 00                     dc.b ((PCMINS_SAURON_06_e-PCMINS_SAURON_06_s)&$FF),(((PCMINS_SAURON_06_e-PCMINS_SAURON_06_s)>>8)&$FF),(((PCMINS_SAURON_06_e-PCMINS_SAURON_06_s)>>16)&$FF)
(1)   38/   5AF73 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   38/   5AF76 :                     PCMINS_SAURON_06_s:
(1)   38/   5AF76 :                             binclude "sound/instr/smpl/sauron/06.wav",$2C
(1)   38/   5D4FE :                     PCMINS_SAURON_06_e:
(1)   39/   5D4FE : (MACRO)              	gSmplData PcmIns_Sauron_07,"sound/instr/smpl/sauron/07.wav",0
(1)   39/   5D4FE : =$5D4FE              PCMINS_SAURON_07    label *
(1)   39/   5D4FE : 9233 00                     dc.b ((PCMINS_SAURON_07_e-PCMINS_SAURON_07_s)&$FF),(((PCMINS_SAURON_07_e-PCMINS_SAURON_07_s)>>8)&$FF),(((PCMINS_SAURON_07_e-PCMINS_SAURON_07_s)>>16)&$FF)
(1)   39/   5D501 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   39/   5D504 :                     PCMINS_SAURON_07_s:
(1)   39/   5D504 :                             binclude "sound/instr/smpl/sauron/07.wav",$2C
(1)   39/   60896 :                     PCMINS_SAURON_07_e:
(1)   40/   60896 : (MACRO)              	gSmplData PcmIns_Sauron_08,"sound/instr/smpl/sauron/08.wav",0
(1)   40/   60896 : =$60896              PCMINS_SAURON_08    label *
(1)   40/   60896 : 0E1D 00                     dc.b ((PCMINS_SAURON_08_e-PCMINS_SAURON_08_s)&$FF),(((PCMINS_SAURON_08_e-PCMINS_SAURON_08_s)>>8)&$FF),(((PCMINS_SAURON_08_e-PCMINS_SAURON_08_s)>>16)&$FF)
(1)   40/   60899 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   40/   6089C :                     PCMINS_SAURON_08_s:
(1)   40/   6089C :                             binclude "sound/instr/smpl/sauron/08.wav",$2C
(1)   40/   625AA :                     PCMINS_SAURON_08_e:
(1)   41/   625AA : (MACRO)              	gSmplData PcmIns_Sauron_09,"sound/instr/smpl/sauron/09.wav",0
(1)   41/   625AA : =$625AA              PCMINS_SAURON_09    label *
(1)   41/   625AA : C41E 00                     dc.b ((PCMINS_SAURON_09_e-PCMINS_SAURON_09_s)&$FF),(((PCMINS_SAURON_09_e-PCMINS_SAURON_09_s)>>8)&$FF),(((PCMINS_SAURON_09_e-PCMINS_SAURON_09_s)>>16)&$FF)
(1)   41/   625AD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   41/   625B0 :                     PCMINS_SAURON_09_s:
(1)   41/   625B0 :                             binclude "sound/instr/smpl/sauron/09.wav",$2C
(1)   41/   64474 :                     PCMINS_SAURON_09_e:
(1)   42/   64474 : (MACRO)              	gSmplData PcmIns_Sauron_10,"sound/instr/smpl/sauron/10.wav",0
(1)   42/   64474 : =$64474              PCMINS_SAURON_10    label *
(1)   42/   64474 : 4238 00                     dc.b ((PCMINS_SAURON_10_e-PCMINS_SAURON_10_s)&$FF),(((PCMINS_SAURON_10_e-PCMINS_SAURON_10_s)>>8)&$FF),(((PCMINS_SAURON_10_e-PCMINS_SAURON_10_s)>>16)&$FF)
(1)   42/   64477 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   42/   6447A :                     PCMINS_SAURON_10_s:
(1)   42/   6447A :                             binclude "sound/instr/smpl/sauron/10.wav",$2C
(1)   42/   67CBC :                     PCMINS_SAURON_10_e:
(1)   43/   67CBC : (MACRO)              	gSmplData PcmIns_Sauron_11,"sound/instr/smpl/sauron/11.wav",0
(1)   43/   67CBC : =$67CBC              PCMINS_SAURON_11    label *
(1)   43/   67CBC : 743D 00                     dc.b ((PCMINS_SAURON_11_e-PCMINS_SAURON_11_s)&$FF),(((PCMINS_SAURON_11_e-PCMINS_SAURON_11_s)>>8)&$FF),(((PCMINS_SAURON_11_e-PCMINS_SAURON_11_s)>>16)&$FF)
(1)   43/   67CBF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   43/   67CC2 :                     PCMINS_SAURON_11_s:
(1)   43/   67CC2 :                             binclude "sound/instr/smpl/sauron/11.wav",$2C
(1)   43/   6BA36 :                     PCMINS_SAURON_11_e:
(1)   44/   6BA36 : (MACRO)              	gSmplData PcmIns_Sauron_12,"sound/instr/smpl/sauron/12.wav",0
(1)   44/   6BA36 : =$6BA36              PCMINS_SAURON_12    label *
(1)   44/   6BA36 : F217 00                     dc.b ((PCMINS_SAURON_12_e-PCMINS_SAURON_12_s)&$FF),(((PCMINS_SAURON_12_e-PCMINS_SAURON_12_s)>>8)&$FF),(((PCMINS_SAURON_12_e-PCMINS_SAURON_12_s)>>16)&$FF)
(1)   44/   6BA39 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(1)   44/   6BA3C :                     PCMINS_SAURON_12_s:
(1)   44/   6BA3C :                             binclude "sound/instr/smpl/sauron/12.wav",$2C
(1)   44/   6D22E :                     PCMINS_SAURON_12_e:
(1)   45/   6D22E :                     
(1)   46/   6D22E :                     
     339/   6D22E :                     	; ------------------------------------------------
     340/   6D22E : (MACRO)              .here:		erreport "SUB-CPU DATA",.here,$80000
     341/   5B22E :                     		dephase
     342/   5B22E :                     		phase MCD_SMPDATA+(.here-$20000)
     343/   5B22E : (MACRO)              		fs_end
     343/   5B22E : 00                                  dc.b 0
     343/   5B22F :                                     align $800                      ; Filler sector
     344/   5B800 :                     MCD_SMPDATA_E:
     345/   5B800 : (MACRO)              		fs_end
     345/   5B800 : 00                                  dc.b 0
     345/   5B801 :                                     align $800                      ; Filler sector
     347/   5C000 :                     
     348/   5C000 :                     ; ====================================================================
     349/   5C000 :                     ; ----------------------------------------------------------------
     350/   5C000 :                     ; SH2 code sent to SDRAM area
     351/   5C000 :                     ; ----------------------------------------------------------------
     352/   5C000 :                     
     354/   5C000 :                     		align $800
     358/   5C000 :                     MARS_RAMCODE:
     364/   5C000 :                     		align 4
     366/   5C000 :                     MARS_RAMCODE_E:
     368/   5C000 : (MACRO)              		fs_end
     368/   5C000 : 00                                  dc.b 0
     368/   5C001 :                                     align $800                      ; Filler sector
     369/   5C800 :                     MARS_RAMCODE_EOF:
     371/   5C800 :                     
     372/   5C800 :                     ; ====================================================================
     373/   5C800 :                     ; --------------------------------------------------------
     374/   5C800 :                     ; CODE BLOCK (banks)
     375/   5C800 :                     ; --------------------------------------------------------
     376/   5C800 :                     
     377/   5C800 :                     		include "game/incl_code.asm"
(1)    1/   5C800 :                     ; ============================================================
(1)    2/   5C800 :                     ; --------------------------------------------------------
(1)    3/   5C800 :                     ; CODE BANKS section
(1)    4/   5C800 :                     ;
(1)    5/   5C800 :                     ; Usage:
(1)    6/   5C800 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/   5C800 :                     ;
(1)    8/   5C800 :                     ; NOTES:
(1)    9/   5C800 :                     ; - Screen order is at game/screens.asm
(1)   10/   5C800 :                     ; - DATA banks are loaded separately inside the
(1)   11/   5C800 :                     ;   screen's code
(1)   12/   5C800 :                     ; --------------------------------------------------------
(1)   13/   5C800 :                     
(1)   14/   5C800 :                     	;screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/   5C800 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   15/   5C800 :                                     align $800              ; SCD/CD32X sector align
(1)   15/   5C800 : =$5C800              MD_SCREEN00 label *
(1)   15/   5C800 :                     
(1)   15/   5C800 :                     mctopscrn:
(1)   15/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   15/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   15/FFFFFFFFFFFF2C00 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   20/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   21/FFFFFFFFFFFF2C00 :                     
(2)   22/FFFFFFFFFFFF2C00 :                     ; 			memory 2		; Cell $0002
(2)   23/FFFFFFFFFFFF2C00 :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/FFFFFFFFFFFF2C00 :                     ; 			endmemory
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   5C800 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/   5C808 :                     .here:          dephase
(2)   35/   5C808 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 010C           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 EE42           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 DC1C           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 EEA8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0020 F910      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E336           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E318           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E338           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41FA 00F6           		lea	str_MenuText(pc),a0			; Print the title string
(2)   62/FFFFFFFFFFFF2C40 : 7001                		moveq	#1,d0					; X/Y positions 1,1
(2)   63/FFFFFFFFFFFF2C42 : 7201                		moveq	#1,d1
(2)   64/FFFFFFFFFFFF2C44 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)   65/FFFFFFFFFFFF2C48 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)   66/FFFFFFFFFFFF2C4C : 6100 E42C           		bsr	Video_PrintW
(2)   67/FFFFFFFFFFFF2C50 : 6100 00A8           		bsr	.print_cursor				; Draw counter
(2)   68/FFFFFFFFFFFF2C54 : 6100 DA66           		bsr	Video_DisplayOn
(2)   69/FFFFFFFFFFFF2C58 :                     	; ----------------------------------------------
(2)   70/FFFFFFFFFFFF2C58 : 6100 E21A           		bsr	Video_FadeIn_Full
(2)   71/FFFFFFFFFFFF2C5C :                     
(2)   72/FFFFFFFFFFFF2C5C :                     ; ====================================================================
(2)   73/FFFFFFFFFFFF2C5C :                     ; ------------------------------------------------------
(2)   74/FFFFFFFFFFFF2C5C :                     ; Loop
(2)   75/FFFFFFFFFFFF2C5C :                     ; ------------------------------------------------------
(2)   76/FFFFFFFFFFFF2C5C :                     
(2)   77/FFFFFFFFFFFF2C5C :                     .loop:
(2)   78/FFFFFFFFFFFF2C5C : 6100 EBB8           		bsr	System_Render
(2)   79/FFFFFFFFFFFF2C60 :                     
(2)   80/FFFFFFFFFFFF2C60 : 383C 0004           		move.w	#MAX_SC0_OPTIONS,d4
(2)   81/FFFFFFFFFFFF2C64 : 4DF8 DD18           		lea	(Controller_1).w,a6
(2)   82/FFFFFFFFFFFF2C68 : 4BF8 B800           		lea	(RAM_SC0_CurrOption).w,a5
(2)   83/FFFFFFFFFFFF2C6C : 3E2E 0004           		move.w	on_press(a6),d7
(2)   84/FFFFFFFFFFFF2C70 : 0807 0001           		btst	#bitJoyDown,d7
(2)   85/FFFFFFFFFFFF2C74 : 670A                		beq.s	.not_down
(2)   86/FFFFFFFFFFFF2C76 : 5255                		addq.w	#1,(a5)
(2)   87/FFFFFFFFFFFF2C78 : 3C15                		move.w	(a5),d6
(2)   88/FFFFFFFFFFFF2C7A : BC44                		cmp.w	d4,d6
(2)   89/FFFFFFFFFFFF2C7C : 6F02                		ble.s	.not_down
(2)   90/FFFFFFFFFFFF2C7E : 4255                		clr.w	(a5)
(2)   91/FFFFFFFFFFFF2C80 :                     .not_down:
(2)   92/FFFFFFFFFFFF2C80 : 3E2E 0004           		move.w	on_press(a6),d7
(2)   93/FFFFFFFFFFFF2C84 : 0807 0000           		btst	#bitJoyUp,d7
(2)   94/FFFFFFFFFFFF2C88 : 6708                		beq.s	.not_up
(2)   95/FFFFFFFFFFFF2C8A : 5355                		subq.w	#1,(a5)
(2)   96/FFFFFFFFFFFF2C8C : 4A55                		tst.w	(a5)
(2)   97/FFFFFFFFFFFF2C8E : 6A02                		bpl.s	.not_up
(2)   98/FFFFFFFFFFFF2C90 : 3A84                		move.w	d4,(a5)
(2)   99/FFFFFFFFFFFF2C92 :                     .not_up:
(2)  100/FFFFFFFFFFFF2C92 : 3015                		move.w	(a5),d0
(2)  101/FFFFFFFFFFFF2C94 : 322D 0002           		move.w	2(a5),d1
(2)  102/FFFFFFFFFFFF2C98 : B041                		cmp.w	d1,d0
(2)  103/FFFFFFFFFFFF2C9A : 6708                		beq.s	.no_change
(2)  104/FFFFFFFFFFFF2C9C : 6140                		bsr	.print_full
(2)  105/FFFFFFFFFFFF2C9E : 31F8 B800 B802      		move.w	(RAM_SC0_CurrOption).w,(RAM_SC0_OldOption).w
(2)  106/FFFFFFFFFFFF2CA4 :                     .no_change:
(2)  108/FFFFFFFFFFFF2CA4 : 6100 F272           		bsr	System_MdMcd_CheckHome
(2)  109/FFFFFFFFFFFF2CA8 : 652C                		bcs.s	.exit_shell
(2)  111/FFFFFFFFFFFF2CAA : 4DF8 DD18           		lea	(Controller_1).w,a6
(2)  112/FFFFFFFFFFFF2CAE : 3E2E 0004           		move.w	on_press(a6),d7
(2)  113/FFFFFFFFFFFF2CB2 : 0807 0007           		btst	#bitJoyStart,d7
(2)  114/FFFFFFFFFFFF2CB6 : 67A4                		beq.s	.loop
(2)  115/FFFFFFFFFFFF2CB8 : 6100 E1CC           		bsr	Video_FadeOut_Full
(2)  116/FFFFFFFFFFFF2CBC : 7000                		moveq	#0,d0
(2)  117/FFFFFFFFFFFF2CBE : 3038 B800           		move.w	(RAM_SC0_CurrOption).w,d0
(2)  118/FFFFFFFFFFFF2CC2 : D040                		add.w	d0,d0
(2)  119/FFFFFFFFFFFF2CC4 : 31FB 0006 EDB4      		move.w	.ex_mode(pc,d0.w),(RAM_ScreenMode).w
(2)  120/FFFFFFFFFFFF2CCA : 4E75                		rts
(2)  121/FFFFFFFFFFFF2CCC :                     
(2)  122/FFFFFFFFFFFF2CCC :                     .ex_mode:
(2)  123/FFFFFFFFFFFF2CCC : 0001                		dc.w 1
(2)  124/FFFFFFFFFFFF2CCE : 0002                		dc.w 2
(2)  125/FFFFFFFFFFFF2CD0 : 0003                		dc.w 3
(2)  126/FFFFFFFFFFFF2CD2 : 0004                		dc.w 4
(2)  127/FFFFFFFFFFFF2CD4 : 0007                		dc.w 7
(2)  128/FFFFFFFFFFFF2CD6 :                     
(2)  129/FFFFFFFFFFFF2CD6 :                     ; ------------------------------------------------------
(2)  130/FFFFFFFFFFFF2CD6 :                     
(2)  131/FFFFFFFFFFFF2CD6 :                     .exit_shell:
(2)  132/FFFFFFFFFFFF2CD6 : 6100 E1AE           		bsr	Video_FadeOut_Full
(2)  133/FFFFFFFFFFFF2CDA : 6000 F26C           		bra	System_MdMcd_ExitShell
(2)  134/FFFFFFFFFFFF2CDE :                     
(2)  135/FFFFFFFFFFFF2CDE :                     ; ------------------------------------------------------
(2)  136/FFFFFFFFFFFF2CDE :                     ; Show framecounter and input
(2)  137/FFFFFFFFFFFF2CDE :                     ; ------------------------------------------------------
(2)  138/FFFFFFFFFFFF2CDE :                     
(2)  139/FFFFFFFFFFFF2CDE :                     .print_full:
(2)  140/FFFFFFFFFFFF2CDE : 41FA 0048           		lea	str_MenuCursorOff(pc),a0
(2)  141/FFFFFFFFFFFF2CE2 : 7001                		moveq	#1,d0
(2)  142/FFFFFFFFFFFF2CE4 : 7205                		moveq	#5,d1
(2)  143/FFFFFFFFFFFF2CE6 : 3438 B802           		move.w	(RAM_SC0_OldOption).w,d2
(2)  144/FFFFFFFFFFFF2CEA : D442                		add.w	d2,d2
(2)  145/FFFFFFFFFFFF2CEC : D242                		add.w	d2,d1
(2)  146/FFFFFFFFFFFF2CEE : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  147/FFFFFFFFFFFF2CF2 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  148/FFFFFFFFFFFF2CF6 : 6100 E382           		bsr	Video_PrintW
(2)  149/FFFFFFFFFFFF2CFA :                     
(2)  150/FFFFFFFFFFFF2CFA :                     .print_cursor:
(2)  151/FFFFFFFFFFFF2CFA : 41FA 0032           		lea	str_MenuCursor(pc),a0
(2)  152/FFFFFFFFFFFF2CFE : 7001                		moveq	#1,d0
(2)  153/FFFFFFFFFFFF2D00 : 7205                		moveq	#5,d1
(2)  154/FFFFFFFFFFFF2D02 : 3438 B800           		move.w	(RAM_SC0_CurrOption).w,d2
(2)  155/FFFFFFFFFFFF2D06 : D442                		add.w	d2,d2
(2)  156/FFFFFFFFFFFF2D08 : D242                		add.w	d2,d1
(2)  157/FFFFFFFFFFFF2D0A : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  158/FFFFFFFFFFFF2D0E : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  159/FFFFFFFFFFFF2D12 : 6000 E366           		bra	Video_PrintW
(2)  160/FFFFFFFFFFFF2D16 :                     
(2)  161/FFFFFFFFFFFF2D16 :                     ; ====================================================================
(2)  162/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  163/FFFFFFFFFFFF2D16 :                     ; DATA asset locations
(2)  164/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  165/FFFFFFFFFFFF2D16 :                     
(2)  166/FFFFFFFFFFFF2D16 :                     file_scrn1_main:
(2)  167/FFFFFFFFFFFF2D16 : 0006 1000           		dc.l DATA_BANK0
(2)  168/FFFFFFFFFFFF2D1A : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D20 : 494E 2E42 494E 00 
(2)  169/FFFFFFFFFFFF2D27 :                     		align 2
(2)  170/FFFFFFFFFFFF2D28 :                     ; file_scrn1_mars:
(2)  171/FFFFFFFFFFFF2D28 :                     ; 		dc.l DATA_BANK1
(2)  172/FFFFFFFFFFFF2D28 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  173/FFFFFFFFFFFF2D28 :                     ; 		align 2
(2)  174/FFFFFFFFFFFF2D28 :                     
(2)  175/FFFFFFFFFFFF2D28 :                     ; ====================================================================
(2)  176/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  177/FFFFFFFFFFFF2D28 :                     ; Objects
(2)  178/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  179/FFFFFFFFFFFF2D28 :                     
(2)  180/FFFFFFFFFFFF2D28 :                     ; ====================================================================
(2)  181/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  182/FFFFFFFFFFFF2D28 :                     ; Custom VBlank
(2)  183/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D28 :                     
(2)  185/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D28 :                     ; Custom HBlank
(2)  187/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  188/FFFFFFFFFFFF2D28 :                     
(2)  189/FFFFFFFFFFFF2D28 :                     ; ====================================================================
(2)  190/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  191/FFFFFFFFFFFF2D28 :                     ; Includes for this screen
(2)  192/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  193/FFFFFFFFFFFF2D28 :                     
(2)  194/FFFFFFFFFFFF2D28 :                     ; ====================================================================
(2)  195/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  196/FFFFFFFFFFFF2D28 :                     ; Small data section
(2)  197/FFFFFFFFFFFF2D28 :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2D28 :                     
(2)  199/FFFFFFFFFFFF2D28 :                     str_MenuCursorOff:
(2)  200/FFFFFFFFFFFF2D28 : 2020 2000           		dc.b "   ",0
(2)  201/FFFFFFFFFFFF2D2C :                     		align 2
(2)  202/FFFFFFFFFFFF2D2E :                     str_MenuCursor:
(2)  203/FFFFFFFFFFFF2D2E : 2D2D 3E00           		dc.b "-->",0
(2)  204/FFFFFFFFFFFF2D32 :                     		align 2
(2)  205/FFFFFFFFFFFF2D34 :                     
(2)  206/FFFFFFFFFFFF2D34 :                     str_MenuText:
(2)  207/FFFFFFFFFFFF2D34 : 4E69 6B6F 6E61      		dc.b "Nikona test menu       ROM: \{DATE}",$0A
         FFFFFFFFFFFF2D3A : 2074 6573 7420 
         FFFFFFFFFFFF2D40 : 6D65 6E75 2020 
         FFFFFFFFFFFF2D46 : 2020 2020 2052 
         FFFFFFFFFFFF2D4C : 4F4D 3A20 3039 
         FFFFFFFFFFFF2D52 : 2F32 312F 3230 
         FFFFFFFFFFFF2D58 : 3234 0A          
(2)  208/FFFFFFFFFFFF2D5B : 0A                  		dc.b $0A
(2)  209/FFFFFFFFFFFF2D5C : 2020 2020 4765      		dc.b "    Genesis VDP",$0A
         FFFFFFFFFFFF2D62 : 6E65 7369 7320 
         FFFFFFFFFFFF2D68 : 5644 500A          
(2)  210/FFFFFFFFFFFF2D6C : 2020 2020 5365      		dc.b "    Sega CD stamps",$0A
         FFFFFFFFFFFF2D72 : 6761 2043 4420 
         FFFFFFFFFFFF2D78 : 7374 616D 7073 0A 
(2)  211/FFFFFFFFFFFF2D7F : 2020 2020 3332      		dc.b "    32X 2D mode",$0A
         FFFFFFFFFFFF2D85 : 5820 3244 206D 
         FFFFFFFFFFFF2D8B : 6F64 650A          
(2)  212/FFFFFFFFFFFF2D8F : 2020 2020 3332      		dc.b "    32X 3D mode",$0A
         FFFFFFFFFFFF2D95 : 5820 3344 206D 
         FFFFFFFFFFFF2D9B : 6F64 650A          
(2)  213/FFFFFFFFFFFF2D9F : 2020 2020 4745      		dc.b "    GEMA sound test"
         FFFFFFFFFFFF2DA5 : 4D41 2073 6F75 
         FFFFFFFFFFFF2DAB : 6E64 2074 6573 74 
(2)  214/FFFFFFFFFFFF2DB2 : 00                  		dc.b 0
(2)  215/FFFFFFFFFFFF2DB3 :                     		align 2
(2)  216/FFFFFFFFFFFF2DB4 :                     
(2)  217/FFFFFFFFFFFF2DB4 :                     ; str_InputMe:
(2)  218/FFFFFFFFFFFF2DB4 :                     ; 	if MARS|MARSCD
(2)  219/FFFFFFFFFFFF2DB4 :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm0)
(2)  220/FFFFFFFFFFFF2DB4 :                     ; 		dc.b " "
(2)  221/FFFFFFFFFFFF2DB4 :                     ; 		dc.l pstr_mem(0,sysmars_reg+comm1)
(2)  222/FFFFFFFFFFFF2DB4 :                     ; 		dc.b " "
(2)  223/FFFFFFFFFFFF2DB4 :                     ; 		dc.l pstr_mem(3,RAM_Framecount)
(2)  224/FFFFFFFFFFFF2DB4 :                     ; 	else
(2)  225/FFFFFFFFFFFF2DB4 :                     ; 		dc.b " "
(2)  226/FFFFFFFFFFFF2DB4 :                     ; 	endif
(2)  227/FFFFFFFFFFFF2DB4 :                     ; 		dc.b 0
(2)  228/FFFFFFFFFFFF2DB4 :                     ; 		align 2
(2)  229/FFFFFFFFFFFF2DB4 :                     
(2)  230/FFFFFFFFFFFF2DB4 :                     ; ====================================================================
(2)  231/FFFFFFFFFFFF2DB4 :                     
(1)   15/FFFFFFFFFFFF2DB4 :                     mcscrn_e:
(1)   15/   5C9B4 :                                     dephase
(1)   15/   5C9B4 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   15/   5C9B4 :                                     align $800
(1)   15/   5D000 :                     ; Md_Screen00_e:
(1)   15/   5D000 : =$5D000              MD_SCREEN00_E label *
(1)   15/   5D000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   16/   5D000 : (MACRO)              	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/   5D000 :                                     align $800              ; SCD/CD32X sector align
(1)   16/   5D000 : =$5D000              MD_SCREEN01 label *
(1)   16/   5D000 :                     
(1)   16/   5D000 :                     mctopscrn:
(1)   16/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   16/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   16/FFFFFFFFFFFF2C00 :                             include "game/code/screen_1.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   5D000 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $4C2
(2)   22/     4C4 :  (MACRO-2)           			endmemory
(2)   22/   5D4C2 :                     .here:          dephase
(2)   22/   5D4C2 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   22/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   23/FFFFFFFFFFFF2C00 :                     
(2)   24/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory $5A0
(2)   24/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   24/   5D000 :                                     dephase
(2)   24/     5A0 :                                     phase $5A0
(2)   24/     5A0 : =$5A0                GLBL_LASTORG    := *
(2)   25/     5A0 :                     vramLoc_Haruna		ds.b $24
(2)   26/     5C4 :                     vramLoc_Sisi		ds.b $10
(2)   27/     5D4 :  (MACRO-2)           			endmemory
(2)   27/   5D034 :                     .here:          dephase
(2)   27/   5D034 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   27/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   28/FFFFFFFFFFFF2C00 :                     
(2)   29/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   30/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   31/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   32/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   33/FFFFFFFFFFFF2C00 :                     
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   34/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   34/   5D000 :                                     dephase
(2)   34/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   34/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   35/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   36/FFFFFFFFFFFFB802 :                     RAM_SC1_PickDispl	ds.w 1
(2)   37/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   38/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   38/   5D008 :                     .here:          dephase
(2)   38/   5D008 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   38/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   39/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   42/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   43/FFFFFFFFFFFF2C00 :                     ; Init
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     
(2)   46/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   47/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   48/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   49/FFFFFFFFFFFF2C08 : 41FA 00FA           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   50/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   51/FFFFFFFFFFFF2C10 : 6100 EE42           		bsr	System_SramInit
(2)   52/FFFFFFFFFFFF2C14 : 52B8 DC1C           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   53/FFFFFFFFFFFF2C18 : 6100 EEA8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   54/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   55/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   56/FFFFFFFFFFFF2C1C : 203C 0020 F910      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   57/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C26 : 6100 E336           		bsr	Video_PrintInit
(2)   59/FFFFFFFFFFFF2C2A : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   60/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   61/FFFFFFFFFFFF2C34 : 6100 E318           		bsr	Video_PrintInitW
(2)   62/FFFFFFFFFFFF2C38 : 6100 E338           		bsr	Video_PrintDefPal_Fade
(2)   63/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   64/FFFFFFFFFFFF2C3C : 41F9 0022 6FB0      		lea	(Pal_Haruna),a0
(2)   65/FFFFFFFFFFFF2C42 : 7010                		moveq	#16,d0
(2)   66/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   67/FFFFFFFFFFFF2C46 : 6100 E290           		bsr	Video_FadePal
(2)   68/FFFFFFFFFFFF2C4A : 41F9 0022 7210      		lea	(Pal_Sisi),a0
(2)   69/FFFFFFFFFFFF2C50 : 7020                		moveq	#32,d0
(2)   70/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   71/FFFFFFFFFFFF2C54 : 6100 E282           		bsr	Video_FadePal
(2)   72/FFFFFFFFFFFF2C58 : 203C 0022 6A30      		move.l	#Art_Sisi,d0
(2)   73/FFFFFFFFFFFF2C5E : 323C B880           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   74/FFFFFFFFFFFF2C62 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   75/FFFFFFFFFFFF2C66 : 6100 DBE8           		bsr	Video_LoadArt
(2)   76/FFFFFFFFFFFF2C6A : 203C FFFF 2D16      		move.l	#obj_Player,d0
(2)   77/FFFFFFFFFFFF2C70 : 6100 F39E           		bsr	Object_Make
(2)   78/FFFFFFFFFFFF2C74 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C74 : 6178                		bsr	.show_counter				; Draw counter
(2)   80/FFFFFFFFFFFF2C76 : 6100 DA44           		bsr	Video_DisplayOn
(2)   81/FFFFFFFFFFFF2C7A : 6100 02D4           		bsr	Screen0_PickBackgrnd
(2)   82/FFFFFFFFFFFF2C7E :                     	; ----------------------------------------------
(2)   83/FFFFFFFFFFFF2C7E : 6100 F35E           		bsr	Object_Run
(2)   84/FFFFFFFFFFFF2C82 : 6100 D7E4           		bsr	Video_BuildSprites
(2)   85/FFFFFFFFFFFF2C86 : 6100 E1EC           		bsr	Video_FadeIn_Full
(2)   86/FFFFFFFFFFFF2C8A :                     
(2)   87/FFFFFFFFFFFF2C8A :                     ; ====================================================================
(2)   88/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   89/FFFFFFFFFFFF2C8A :                     ; Loop
(2)   90/FFFFFFFFFFFF2C8A :                     ; ------------------------------------------------------
(2)   91/FFFFFFFFFFFF2C8A :                     
(2)   92/FFFFFFFFFFFF2C8A :                     .loop:
(2)   93/FFFFFFFFFFFF2C8A : 6100 F352           		bsr	Object_Run
(2)   94/FFFFFFFFFFFF2C8E : 6100 D7D8           		bsr	Video_BuildSprites
(2)   95/FFFFFFFFFFFF2C92 : 6100 EB82           		bsr	System_Render
(2)   96/FFFFFFFFFFFF2C96 :                     
(2)   97/FFFFFFFFFFFF2C96 : 6156                		bsr	.show_counter				; Draw counter
(2)   98/FFFFFFFFFFFF2C98 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)   99/FFFFFFFFFFFF2C9C : 0247 0010           		andi.w	#JoyB,d7
(2)  100/FFFFFFFFFFFF2CA0 : 670E                		beq.s	.not_apress
(2)  101/FFFFFFFFFFFF2CA2 : 5278 B802           		addq.w	#1,(RAM_SC1_PickDispl).w
(2)  102/FFFFFFFFFFFF2CA6 : 0278 0001 B802      		andi.w	#1,(RAM_SC1_PickDispl).w
(2)  103/FFFFFFFFFFFF2CAC : 6100 02A2           		bsr	Screen0_PickBackgrnd
(2)  104/FFFFFFFFFFFF2CB0 :                     .not_apress:
(2)  105/FFFFFFFFFFFF2CB0 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  106/FFFFFFFFFFFF2CB4 : 0247 0020           		andi.w	#JoyC,d7
(2)  107/FFFFFFFFFFFF2CB8 : 670A                		beq.s	.not_b
(2)  108/FFFFFFFFFFFF2CBA : 203C FFFF 2E26      		move.l	#obj_Ball,d0
(2)  109/FFFFFFFFFFFF2CC0 : 6100 F34E           		bsr	Object_Make
(2)  110/FFFFFFFFFFFF2CC4 :                     .not_b:
(2)  111/FFFFFFFFFFFF2CC4 :                     
(2)  112/FFFFFFFFFFFF2CC4 :                     	; Check START button
(2)  113/FFFFFFFFFFFF2CC4 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  114/FFFFFFFFFFFF2CC8 : 0247 0080           		andi.w	#JoyStart,d7
(2)  115/FFFFFFFFFFFF2CCC : 67BC                		beq	.loop
(2)  116/FFFFFFFFFFFF2CCE : 6100 E1B6           		bsr	Video_FadeOut_Full
(2)  117/FFFFFFFFFFFF2CD2 :                     
(2)  118/FFFFFFFFFFFF2CD2 :                     	; Stop ALL sequences
(2)  119/FFFFFFFFFFFF2CD2 : 6100 D532           		bsr	gemaStopAll
(2)  120/FFFFFFFFFFFF2CD6 :                     	rept 4
(2)  121/FFFFFFFFFFFF2CD6 :                     		bsr	System_Render		; Wait 4 frames...
(2)  122/FFFFFFFFFFFF2CD6 :                     	endm
(2)  121/FFFFFFFFFFFF2CD6 : 6100 EB3E           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDA : 6100 EB3A           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CDE : 6100 EB36           		bsr	System_Render		; Wait 4 frames...
(2)  121/FFFFFFFFFFFF2CE2 : 6100 EB32           		bsr	System_Render		; Wait 4 frames...
(2)  123/FFFFFFFFFFFF2CE6 : 31FC 0000 EDB4      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  124/FFFFFFFFFFFF2CEC : 4E75                		rts				; <-- RTS
(2)  125/FFFFFFFFFFFF2CEE :                     
(2)  126/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  127/FFFFFFFFFFFF2CEE :                     ; Show framecounter and input
(2)  128/FFFFFFFFFFFF2CEE :                     ; ------------------------------------------------------
(2)  129/FFFFFFFFFFFF2CEE :                     
(2)  130/FFFFFFFFFFFF2CEE :                     .show_counter:
(2)  131/FFFFFFFFFFFF2CEE : 4E75                		rts
(2)  132/FFFFFFFFFFFF2CF0 : 41FA 0380           		lea	str_NewCountr0(pc),a0
(2)  133/FFFFFFFFFFFF2CF4 : 7001                		moveq	#1,d0
(2)  134/FFFFFFFFFFFF2CF6 : 7203                		moveq	#3,d1
(2)  135/FFFFFFFFFFFF2CF8 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  136/FFFFFFFFFFFF2CFC : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  137/FFFFFFFFFFFF2D00 : 6000 E378           		bra	Video_PrintW
(2)  138/FFFFFFFFFFFF2D04 :                     
(2)  139/FFFFFFFFFFFF2D04 :                     ; ====================================================================
(2)  140/FFFFFFFFFFFF2D04 :                     ; ------------------------------------------------------
(2)  141/FFFFFFFFFFFF2D04 :                     ; DATA asset locations
(2)  142/FFFFFFFFFFFF2D04 :                     ; ------------------------------------------------------
(2)  143/FFFFFFFFFFFF2D04 :                     
(2)  144/FFFFFFFFFFFF2D04 :                     file_scrn1_main:
(2)  145/FFFFFFFFFFFF2D04 : 0006 1000           		dc.l DATA_BANK0
(2)  146/FFFFFFFFFFFF2D08 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D0E : 494E 2E42 494E 00 
(2)  147/FFFFFFFFFFFF2D15 :                     		align 2
(2)  148/FFFFFFFFFFFF2D16 :                     ; file_scrn1_mars:
(2)  149/FFFFFFFFFFFF2D16 :                     ; 		dc.l DATA_BANK1
(2)  150/FFFFFFFFFFFF2D16 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  151/FFFFFFFFFFFF2D16 :                     ; 		align 2
(2)  152/FFFFFFFFFFFF2D16 :                     
(2)  153/FFFFFFFFFFFF2D16 :                     ; ====================================================================
(2)  154/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  155/FFFFFFFFFFFF2D16 :                     ; Objects
(2)  156/FFFFFFFFFFFF2D16 :                     ; ------------------------------------------------------
(2)  157/FFFFFFFFFFFF2D16 :                     
(2)  158/FFFFFFFFFFFF2D16 :                     ; --------------------------------------------------
(2)  159/FFFFFFFFFFFF2D16 :                     ; Test object
(2)  160/FFFFFFFFFFFF2D16 :                     ; --------------------------------------------------
(2)  161/FFFFFFFFFFFF2D16 :                     
(2)  162/FFFFFFFFFFFF2D16 :                     obj_Player:
(2)  163/FFFFFFFFFFFF2D16 : 7000                		moveq	#0,d0
(2)  164/FFFFFFFFFFFF2D18 : 102E 001C           		move.b	obj_index(a6),d0
(2)  165/FFFFFFFFFFFF2D1C : D040                		add.w	d0,d0
(2)  166/FFFFFFFFFFFF2D1E : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  167/FFFFFFFFFFFF2D22 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  168/FFFFFFFFFFFF2D26 :                     ; ----------------------------------------------
(2)  169/FFFFFFFFFFFF2D26 : 0004                .list:		dc.w .init-.list
(2)  170/FFFFFFFFFFFF2D28 : 002A                		dc.w .main-.list
(2)  171/FFFFFFFFFFFF2D2A :                     ; ----------------------------------------------
(2)  172/FFFFFFFFFFFF2D2A :                     .init:
(2)  173/FFFFFFFFFFFF2D2A : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  174/FFFFFFFFFFFF2D2E : 6100 F34A           		bsr	object_ResetAnim	; Init/Reset animation
(2)  175/FFFFFFFFFFFF2D32 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  176/FFFFFFFFFFFF2D38 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  177/FFFFFFFFFFFF2D3E : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  178/FFFFFFFFFFFF2D44 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  179/FFFFFFFFFFFF2D4A : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  180/FFFFFFFFFFFF2D50 :                     
(2)  181/FFFFFFFFFFFF2D50 :                     ; ----------------------------------------------
(2)  182/FFFFFFFFFFFF2D50 :                     .main:
(2)  183/FFFFFFFFFFFF2D50 : 41F8 DD18           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  184/FFFFFFFFFFFF2D54 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  185/FFFFFFFFFFFF2D58 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  186/FFFFFFFFFFFF2D5A : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  187/FFFFFFFFFFFF2D5C : 7400                		moveq	#0,d2
(2)  188/FFFFFFFFFFFF2D5E : 7600                		moveq	#0,d3
(2)  189/FFFFFFFFFFFF2D60 : 0807 0003           		btst	#bitJoyRight,d7
(2)  190/FFFFFFFFFFFF2D64 : 6706                		beq.s	.not_right
(2)  191/FFFFFFFFFFFF2D66 : 7001                		moveq	#1,d0			; X right
(2)  192/FFFFFFFFFFFF2D68 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  193/FFFFFFFFFFFF2D68 : 7402                		moveq	#2,d2
(2)  194/FFFFFFFFFFFF2D6A : 5243                		addq.w	#1,d3
(2)  195/FFFFFFFFFFFF2D6C :                     .not_right:
(2)  196/FFFFFFFFFFFF2D6C : 0807 0002           		btst	#bitJoyLeft,d7
(2)  197/FFFFFFFFFFFF2D70 : 6706                		beq.s	.not_left
(2)  198/FFFFFFFFFFFF2D72 : 70FF                		moveq	#-1,d0			; X left
(2)  199/FFFFFFFFFFFF2D74 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  200/FFFFFFFFFFFF2D74 : 7403                		moveq	#3,d2
(2)  201/FFFFFFFFFFFF2D76 : 5243                		addq.w	#1,d3
(2)  202/FFFFFFFFFFFF2D78 :                     .not_left:
(2)  203/FFFFFFFFFFFF2D78 : 0807 0001           		btst	#bitJoyDown,d7
(2)  204/FFFFFFFFFFFF2D7C : 6706                		beq.s	.not_down
(2)  205/FFFFFFFFFFFF2D7E : 7201                		moveq	#1,d1			; Y down
(2)  206/FFFFFFFFFFFF2D80 : 7400                		moveq	#0,d2
(2)  207/FFFFFFFFFFFF2D82 : 5243                		addq.w	#1,d3
(2)  208/FFFFFFFFFFFF2D84 :                     .not_down:
(2)  209/FFFFFFFFFFFF2D84 : 0807 0000           		btst	#bitJoyUp,d7
(2)  210/FFFFFFFFFFFF2D88 : 6706                		beq.s	.not_up
(2)  211/FFFFFFFFFFFF2D8A : 72FF                		moveq	#-1,d1			; Y up
(2)  212/FFFFFFFFFFFF2D8C : 7401                		moveq	#1,d2
(2)  213/FFFFFFFFFFFF2D8E : 5243                		addq.w	#1,d3
(2)  214/FFFFFFFFFFFF2D90 :                     .not_up:
(2)  215/FFFFFFFFFFFF2D90 :                     ; 	if MARS|MARSCD
(2)  216/FFFFFFFFFFFF2D90 :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  217/FFFFFFFFFFFF2D90 :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  218/FFFFFFFFFFFF2D90 :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  219/FFFFFFFFFFFF2D90 :                     ; 		add.w	d0,obj_x(a6)
(2)  220/FFFFFFFFFFFF2D90 :                     ; 		add.w	d1,obj_z(a6)
(2)  221/FFFFFFFFFFFF2D90 :                     ; 	else
(2)  222/FFFFFFFFFFFF2D90 :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  223/FFFFFFFFFFFF2D90 :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  224/FFFFFFFFFFFF2D90 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  225/FFFFFFFFFFFF2D94 : D36E 0008           		add.w	d1,obj_y(a6)
(2)  226/FFFFFFFFFFFF2D98 :                     ; 	endif
(2)  227/FFFFFFFFFFFF2D98 :                     
(2)  228/FFFFFFFFFFFF2D98 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  229/FFFFFFFFFFFF2D9C :                     
(2)  230/FFFFFFFFFFFF2D9C :                     ; ----------------------------------------------
(2)  231/FFFFFFFFFFFF2D9C :                     ; Show the object...
(2)  232/FFFFFFFFFFFF2D9C :                     
(2)  233/FFFFFFFFFFFF2D9C : 4A43                		tst.w	d3
(2)  234/FFFFFFFFFFFF2D9E : 6708                		beq.s	.no_anim
(2)  235/FFFFFFFFFFFF2DA0 : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  236/FFFFFFFFFFFF2DA4 : 6100 F30C           		bsr	object_Animate
(2)  237/FFFFFFFFFFFF2DA8 :                     .no_anim:
(2)  238/FFFFFFFFFFFF2DA8 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  239/FFFFFFFFFFFF2DA8 :                     ; 		bsr	object_Touch
(2)  240/FFFFFFFFFFFF2DA8 :                     ; 		tst.l	d0
(2)  241/FFFFFFFFFFFF2DA8 :                     ; 		beq.s	.lel
(2)  242/FFFFFFFFFFFF2DA8 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  243/FFFFFFFFFFFF2DA8 :                     ; .lel:
(2)  244/FFFFFFFFFFFF2DA8 :                     
(2)  245/FFFFFFFFFFFF2DA8 : 207C 0000 0000      		move.l	#0,a0
(2)  246/FFFFFFFFFFFF2DAE : 43F9 0022 6FD0      		lea	(Map_Haruna),a1
(2)  247/FFFFFFFFFFFF2DB4 : 45F9 0022 7180      		lea	(Plc_Haruna),a2
(2)  248/FFFFFFFFFFFF2DBA : 47F9 0022 3BB0      		lea	(Art_Haruna),a3
(2)  249/FFFFFFFFFFFF2DC0 : 7400                		moveq	#0,d2
(2)  250/FFFFFFFFFFFF2DC2 : 302E 0004           		move.w	obj_x(a6),d0
(2)  251/FFFFFFFFFFFF2DC6 : 322E 0008           		move.w	obj_y(a6),d1
(2)  252/FFFFFFFFFFFF2DCA : D078 D060           		add.w	(RAM_HorScroll+2).w,d0
(2)  253/FFFFFFFFFFFF2DCE : 9278 D420           		sub.w	(RAM_VerScroll+2).w,d1
(2)  254/FFFFFFFFFFFF2DD2 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  255/FFFFFFFFFFFF2DD6 : E14A                		lsl.w	#8,d2
(2)  256/FFFFFFFFFFFF2DD8 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  257/FFFFFFFFFFFF2DDA : D47C 25A0           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  258/FFFFFFFFFFFF2DDE : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  259/FFFFFFFFFFFF2DE2 : 6000 E4FC           		bra	Video_MakeSprMap_DMA
(2)  260/FFFFFFFFFFFF2DE6 :                     
(2)  261/FFFFFFFFFFFF2DE6 :                     ; ----------------------------------------------
(2)  262/FFFFFFFFFFFF2DE6 :                     
(2)  263/FFFFFFFFFFFF2DE6 :                     .anim_data:
(2)  264/FFFFFFFFFFFF2DE6 : 0008                		dc.w .anim_down-.anim_data
(2)  265/FFFFFFFFFFFF2DE8 : 0016                		dc.w .anim_up-.anim_data
(2)  266/FFFFFFFFFFFF2DEA : 0024                		dc.w .anim_right-.anim_data
(2)  267/FFFFFFFFFFFF2DEC : 0032                		dc.w .anim_left-.anim_data
(2)  268/FFFFFFFFFFFF2DEE :                     
(2)  269/FFFFFFFFFFFF2DEE :                     .anim_down:
(2)  270/FFFFFFFFFFFF2DEE : 0008                		dc.w 8
(2)  271/FFFFFFFFFFFF2DF0 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2DF6 : 0002             
(2)  272/FFFFFFFFFFFF2DF8 : FFFE                		dc.w -2
(2)  273/FFFFFFFFFFFF2DFA :                     		align 2
(2)  274/FFFFFFFFFFFF2DFC :                     .anim_up:
(2)  275/FFFFFFFFFFFF2DFC : 0008                		dc.w 8
(2)  276/FFFFFFFFFFFF2DFE : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2E04 : 0005             
(2)  277/FFFFFFFFFFFF2E06 : FFFE                		dc.w -2
(2)  278/FFFFFFFFFFFF2E08 :                     		align 2
(2)  279/FFFFFFFFFFFF2E0A :                     .anim_right:
(2)  280/FFFFFFFFFFFF2E0A : 0008                		dc.w 8
(2)  281/FFFFFFFFFFFF2E0C : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2E12 : 0008             
(2)  282/FFFFFFFFFFFF2E14 : FFFE                		dc.w -2
(2)  283/FFFFFFFFFFFF2E16 :                     		align 2
(2)  284/FFFFFFFFFFFF2E18 :                     .anim_left:
(2)  285/FFFFFFFFFFFF2E18 : 0008                		dc.w 8
(2)  286/FFFFFFFFFFFF2E1A : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E20 : 000B             
(2)  287/FFFFFFFFFFFF2E22 : FFFE                		dc.w -2
(2)  288/FFFFFFFFFFFF2E24 :                     		align 2
(2)  289/FFFFFFFFFFFF2E26 :                     
(2)  290/FFFFFFFFFFFF2E26 :                     ; --------------------------------------------------
(2)  291/FFFFFFFFFFFF2E26 :                     ; Test object
(2)  292/FFFFFFFFFFFF2E26 :                     ; --------------------------------------------------
(2)  293/FFFFFFFFFFFF2E26 :                     
(2)  294/FFFFFFFFFFFF2E26 :                     obj_Ball:
(2)  295/FFFFFFFFFFFF2E26 : 7000                		moveq	#0,d0
(2)  296/FFFFFFFFFFFF2E28 : 102E 001C           		move.b	obj_index(a6),d0
(2)  297/FFFFFFFFFFFF2E2C : D040                		add.w	d0,d0
(2)  298/FFFFFFFFFFFF2E2E : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  299/FFFFFFFFFFFF2E32 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  300/FFFFFFFFFFFF2E36 :                     ; ----------------------------------------------
(2)  301/FFFFFFFFFFFF2E36 : 0004                .list:		dc.w .init-.list
(2)  302/FFFFFFFFFFFF2E38 : 0072                		dc.w .main-.list
(2)  303/FFFFFFFFFFFF2E3A :                     ; ----------------------------------------------
(2)  304/FFFFFFFFFFFF2E3A :                     .init:
(2)  305/FFFFFFFFFFFF2E3A : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  306/FFFFFFFFFFFF2E3E : 6100 F23A           		bsr	object_ResetAnim	; Init/Reset animation
(2)  307/FFFFFFFFFFFF2E42 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  308/FFFFFFFFFFFF2E48 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  309/FFFFFFFFFFFF2E4E : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  310/FFFFFFFFFFFF2E54 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  311/FFFFFFFFFFFF2E5A :                     
(2)  312/FFFFFFFFFFFF2E5A : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  313/FFFFFFFFFFFF2E60 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  314/FFFFFFFFFFFF2E66 : 303C 0049           		move.w	#$48+1,d0
(2)  315/FFFFFFFFFFFF2E6A : 6100 ED60           		bsr	System_DiceRoll
(2)  316/FFFFFFFFFFFF2E6E : E348                		lsl.w	#1,d0
(2)  317/FFFFFFFFFFFF2E70 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  318/FFFFFFFFFFFF2E74 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  319/FFFFFFFFFFFF2E78 : E748                		lsl.w	#3,d0
(2)  320/FFFFFFFFFFFF2E7A : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  321/FFFFFFFFFFFF2E7E : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  322/FFFFFFFFFFFF2E82 :                     
(2)  323/FFFFFFFFFFFF2E82 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  324/FFFFFFFFFFFF2E88 : 6100 ECE8           		bsr	System_Random
(2)  325/FFFFFFFFFFFF2E8C : 2E38 ED9C           		move.l	(RAM_SysRandom).w,d7
(2)  326/FFFFFFFFFFFF2E90 : E24F                		lsr.w	#1,d7
(2)  327/FFFFFFFFFFFF2E92 : 640A                		bcc.s	.x_random
(2)  328/FFFFFFFFFFFF2E94 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  329/FFFFFFFFFFFF2E98 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  330/FFFFFFFFFFFF2E9E :                     .x_random:
(2)  331/FFFFFFFFFFFF2E9E : E24F                		lsr.w	#1,d7
(2)  332/FFFFFFFFFFFF2EA0 : 6404                		bcc.s	.y_random
(2)  333/FFFFFFFFFFFF2EA2 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  334/FFFFFFFFFFFF2EA6 :                     .y_random:
(2)  335/FFFFFFFFFFFF2EA6 : 4E75                		rts
(2)  336/FFFFFFFFFFFF2EA8 :                     
(2)  337/FFFFFFFFFFFF2EA8 :                     ; ----------------------------------------------
(2)  338/FFFFFFFFFFFF2EA8 :                     .main:
(2)  339/FFFFFFFFFFFF2EA8 : 3438 DC16           		move.w	(RAM_VdpRegSetC).w,d2
(2)  340/FFFFFFFFFFFF2EAC : 0802 0002           		btst	#2,d2
(2)  341/FFFFFFFFFFFF2EB0 : 660E                		bne.s	.y_fix
(2)  342/FFFFFFFFFFFF2EB2 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  343/FFFFFFFFFFFF2EB8 : 6D06                		blt.s	.y_fix
(2)  344/FFFFFFFFFFFF2EBA : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  345/FFFFFFFFFFFF2EC0 :                     .y_fix:
(2)  346/FFFFFFFFFFFF2EC0 :                     
(2)  347/FFFFFFFFFFFF2EC0 : 323C 00E0           		move.w	#224,d1
(2)  348/FFFFFFFFFFFF2EC4 : 3438 DC16           		move.w	(RAM_VdpRegSetC).w,d2
(2)  349/FFFFFFFFFFFF2EC8 : 0802 0002           		btst	#2,d2
(2)  350/FFFFFFFFFFFF2ECC : 6702                		beq.s	.y_double
(2)  351/FFFFFFFFFFFF2ECE : D241                		add.w	d1,d1
(2)  352/FFFFFFFFFFFF2ED0 :                     .y_double:
(2)  353/FFFFFFFFFFFF2ED0 : 303C 0140           		move.w	#320,d0
(2)  354/FFFFFFFFFFFF2ED4 : 342E 0004           		move.w	obj_x(a6),d2
(2)  355/FFFFFFFFFFFF2ED8 : 4A42                		tst.w	d2
(2)  356/FFFFFFFFFFFF2EDA : 6A0A                		bpl.s	.x_back
(2)  357/FFFFFFFFFFFF2EDC : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  358/FFFFFFFFFFFF2EE0 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  359/FFFFFFFFFFFF2EE6 :                     .x_back:
(2)  360/FFFFFFFFFFFF2EE6 : B440                		cmp.w	d0,d2
(2)  361/FFFFFFFFFFFF2EE8 : 6D0A                		blt.s	.x_foward
(2)  362/FFFFFFFFFFFF2EEA : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  363/FFFFFFFFFFFF2EEE : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  364/FFFFFFFFFFFF2EF4 :                     .x_foward:
(2)  365/FFFFFFFFFFFF2EF4 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  366/FFFFFFFFFFFF2EF8 :                     
(2)  367/FFFFFFFFFFFF2EF8 : 342E 0008           		move.w	obj_y(a6),d2
(2)  368/FFFFFFFFFFFF2EFC : 4A42                		tst.w	d2
(2)  369/FFFFFFFFFFFF2EFE : 6A04                		bpl.s	.y_back
(2)  370/FFFFFFFFFFFF2F00 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  371/FFFFFFFFFFFF2F04 :                     .y_back:
(2)  372/FFFFFFFFFFFF2F04 : B441                		cmp.w	d1,d2
(2)  373/FFFFFFFFFFFF2F06 : 6D04                		blt.s	.y_foward
(2)  374/FFFFFFFFFFFF2F08 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  375/FFFFFFFFFFFF2F0C :                     .y_foward:
(2)  376/FFFFFFFFFFFF2F0C : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  377/FFFFFFFFFFFF2F10 :                     
(2)  378/FFFFFFFFFFFF2F10 : 6100 F170           		bsr	object_Speed
(2)  379/FFFFFFFFFFFF2F14 :                     
(2)  380/FFFFFFFFFFFF2F14 :                     ; ----------------------------------------------
(2)  381/FFFFFFFFFFFF2F14 :                     ; Show the object...
(2)  382/FFFFFFFFFFFF2F14 :                     
(2)  383/FFFFFFFFFFFF2F14 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  384/FFFFFFFFFFFF2F18 : 6100 F198           		bsr	object_Animate
(2)  385/FFFFFFFFFFFF2F1C : 43F9 0022 7230      		lea	(Map_Sisi),a1
(2)  386/FFFFFFFFFFFF2F22 : 7400                		moveq	#0,d2
(2)  387/FFFFFFFFFFFF2F24 : 302E 0004           		move.w	obj_x(a6),d0
(2)  388/FFFFFFFFFFFF2F28 : 322E 0008           		move.w	obj_y(a6),d1
(2)  389/FFFFFFFFFFFF2F2C : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  390/FFFFFFFFFFFF2F30 : E14A                		lsl.w	#8,d2
(2)  391/FFFFFFFFFFFF2F32 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  392/FFFFFFFFFFFF2F34 : D47C 45C4           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  393/FFFFFFFFFFFF2F38 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  394/FFFFFFFFFFFF2F3C : 6000 E3BA           		bra	Video_MakeSprMap
(2)  395/FFFFFFFFFFFF2F40 :                     
(2)  396/FFFFFFFFFFFF2F40 :                     ; ----------------------------------------------
(2)  397/FFFFFFFFFFFF2F40 :                     
(2)  398/FFFFFFFFFFFF2F40 :                     .anim_data:
(2)  399/FFFFFFFFFFFF2F40 : 0002                		dc.w .maind-.anim_data
(2)  400/FFFFFFFFFFFF2F42 :                     .maind:
(2)  401/FFFFFFFFFFFF2F42 : 0008                		dc.w 8
(2)  402/FFFFFFFFFFFF2F44 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F4A : 0001             
(2)  403/FFFFFFFFFFFF2F4C : FFFE                		dc.w -2
(2)  404/FFFFFFFFFFFF2F4E :                     		align 2
(2)  405/FFFFFFFFFFFF2F50 :                     
(2)  406/FFFFFFFFFFFF2F50 :                     ; ====================================================================
(2)  407/FFFFFFFFFFFF2F50 :                     ; ------------------------------------------------------
(2)  408/FFFFFFFFFFFF2F50 :                     ; Subroutines
(2)  409/FFFFFFFFFFFF2F50 :                     ; ------------------------------------------------------
(2)  410/FFFFFFFFFFFF2F50 :                     
(2)  411/FFFFFFFFFFFF2F50 :                     Screen0_PickBackgrnd:
(2)  412/FFFFFFFFFFFF2F50 : 6100 E8C4           		bsr	System_Render
(2)  413/FFFFFFFFFFFF2F54 : 6100 D772           		bsr	Video_DisplayOff
(2)  414/FFFFFFFFFFFF2F58 : 6100 D734           		bsr	Video_ClearScreen
(2)  415/FFFFFFFFFFFF2F5C : 4A78 B802           		tst.w	(RAM_SC1_PickDispl).w
(2)  416/FFFFFFFFFFFF2F60 : 6600 0082           		bne	.pick_second
(2)  417/FFFFFFFFFFFF2F64 : 7001                		moveq	#1,d0
(2)  418/FFFFFFFFFFFF2F66 : 7200                		moveq	#%00,d1
(2)  419/FFFFFFFFFFFF2F68 : 6100 D7E0           		bsr	Video_Resolution
(2)  420/FFFFFFFFFFFF2F6C : 41FA 00EA           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  421/FFFFFFFFFFFF2F70 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  422/FFFFFFFFFFFF2F72 : 7201                		moveq	#1,d1
(2)  423/FFFFFFFFFFFF2F74 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  424/FFFFFFFFFFFF2F78 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  425/FFFFFFFFFFFF2F7C : 6100 E0FC           		bsr	Video_PrintW				; <-- Print BIG text
(2)  426/FFFFFFFFFFFF2F80 : 41FA 00E2           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  427/FFFFFFFFFFFF2F84 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  428/FFFFFFFFFFFF2F86 : 7219                		moveq	#25,d1
(2)  429/FFFFFFFFFFFF2F88 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  430/FFFFFFFFFFFF2F8C : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  431/FFFFFFFFFFFF2F90 : 6100 E0E8           		bsr	Video_PrintW
(2)  432/FFFFFFFFFFFF2F94 :                     
(2)  433/FFFFFFFFFFFF2F94 : 41F9 0022 7276      		lea	(Pal_TESTBG+color_indx(1)),a0		; a0 - Load palette (+2 skips first color)
(2)  434/FFFFFFFFFFFF2F9A : 7001                		moveq	#1,d0					; d0 - Start at $01
(2)  435/FFFFFFFFFFFF2F9C : 720F                		moveq	#15,d1					; d1 - 15 colors
(2)  436/FFFFFFFFFFFF2F9E : 6100 DF38           		bsr	Video_FadePal				; Load palette to FADE buffer
(2)  437/FFFFFFFFFFFF2FA2 : 6100 DF3E           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  438/FFFFFFFFFFFF2FA6 : 4278 D96E           		clr.w	(RAM_Palette).w
(2)  439/FFFFFFFFFFFF2FAA : 4278 D9EE           		clr.w	(RAM_PaletteFade).w
(2)  440/FFFFFFFFFFFF2FAE : 203C 0021 1D10      		move.l	#Art_TESTBG,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  441/FFFFFFFFFFFF2FB4 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  442/FFFFFFFFFFFF2FB8 : 343C 8620           		move.w	#Art_TESTBG_e-Art_TESTBG,d2		; d2 - Size: end-start
(2)  443/FFFFFFFFFFFF2FBC : 6100 D892           		bsr	Video_LoadArt
(2)  444/FFFFFFFFFFFF2FC0 : 41F9 0022 7294      		lea	(Map_TESTBG),a0				; a0 - Map data
(2)  445/FFFFFFFFFFFF2FC6 : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  446/FFFFFFFFFFFF2FCC : 223C 0028 001C      		move.l	#splitw(320/8,224/8),d1			; d1 - Width and Height
(2)  447/FFFFFFFFFFFF2FD2 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  448/FFFFFFFFFFFF2FD8 : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  449/FFFFFFFFFFFF2FDC : 6100 DBA2           		bsr	Video_LoadMap
(2)  450/FFFFFFFFFFFF2FE0 : 6000 D6DA           		bra	Video_DisplayOn
(2)  451/FFFFFFFFFFFF2FE4 :                     
(2)  452/FFFFFFFFFFFF2FE4 :                     .pick_second:
(2)  453/FFFFFFFFFFFF2FE4 : 7001                		moveq	#1,d0
(2)  454/FFFFFFFFFFFF2FE6 : 7202                		moveq	#%10,d1
(2)  455/FFFFFFFFFFFF2FE8 : 6100 D760           		bsr	Video_Resolution
(2)  456/FFFFFFFFFFFF2FEC : 41FA 006A           		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  457/FFFFFFFFFFFF2FF0 : 7010                		moveq	#16,d0					; X/Y positions 1,1
(2)  458/FFFFFFFFFFFF2FF2 : 7201                		moveq	#1,d1
(2)  459/FFFFFFFFFFFF2FF4 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  460/FFFFFFFFFFFF2FF8 : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  461/FFFFFFFFFFFF2FFC : 6100 E07C           		bsr	Video_PrintW
(2)  462/FFFFFFFFFFFF3000 : 41FA 0062           		lea	str_NikonaTest2(pc),a0			; Print the title string
(2)  463/FFFFFFFFFFFF3004 : 700F                		moveq	#15,d0					; X/Y positions 1,1
(2)  464/FFFFFFFFFFFF3006 : 721A                		moveq	#26,d1
(2)  465/FFFFFFFFFFFF3008 : 343C C000           		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  466/FFFFFFFFFFFF300C : 363C 0080           		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  467/FFFFFFFFFFFF3010 : 6100 E068           		bsr	Video_PrintW
(2)  468/FFFFFFFFFFFF3014 :                     
(2)  469/FFFFFFFFFFFF3014 : 41F9 0022 7B54      		lea	(Pal_TESTBG2),a0			; a0 - Load palette (+2 skips first color)
(2)  470/FFFFFFFFFFFF301A : 7000                		moveq	#0,d0					; d0 - Start at $01
(2)  471/FFFFFFFFFFFF301C : 7210                		moveq	#16,d1					; d1 - 15 colors
(2)  472/FFFFFFFFFFFF301E : 6100 DEC2           		bsr	Video_LoadPal				; Load palette to FADE buffer
(2)  473/FFFFFFFFFFFF3022 : 203C 0021 A330      		move.l	#Art_TESTBG2,d0				; d0 - Graphics pointer (NOT a0 here)
(2)  474/FFFFFFFFFFFF3028 : 323C 0040           		move.w	#cell_vram(vramLoc_Backgrnd),d1		; d1 - output VRAM location
(2)  475/FFFFFFFFFFFF302C : 343C 9880           		move.w	#Art_TESTBG2_e-Art_TESTBG2,d2		; d2 - Size: end-start
(2)  476/FFFFFFFFFFFF3030 : 6100 D81E           		bsr	Video_LoadArt
(2)  477/FFFFFFFFFFFF3034 : 41F9 0022 7B74      		lea	(Map_TESTBG2),a0			; a0 - Map data
(2)  478/FFFFFFFFFFFF303A : 203C 0000 0000      		move.l	#splitw(0,0),d0				; d0 - X/Y Positions 0,0
(2)  479/FFFFFFFFFFFF3040 : 223C 0028 0038      		move.l	#splitw(320/8,448/8),d1			; d1 - Width and Height
(2)  480/FFFFFFFFFFFF3046 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2	; d2 - Layer width / Layer output
(2)  481/FFFFFFFFFFFF304C : 363C 0002           		move.w	#vramLoc_Backgrnd,d3			; d3 - Starting cell
(2)  482/FFFFFFFFFFFF3050 : 6100 DBA4           		bsr	Video_LoadMapV
(2)  483/FFFFFFFFFFFF3054 : 6000 D666           		bra	Video_DisplayOn
(2)  484/FFFFFFFFFFFF3058 :                     
(2)  485/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  486/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  487/FFFFFFFFFFFF3058 :                     ; Custom VBlank
(2)  488/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  489/FFFFFFFFFFFF3058 :                     
(2)  490/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  491/FFFFFFFFFFFF3058 :                     ; Custom HBlank
(2)  492/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  493/FFFFFFFFFFFF3058 :                     
(2)  494/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  495/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  496/FFFFFFFFFFFF3058 :                     ; Includes for this screen
(2)  497/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  498/FFFFFFFFFFFF3058 :                     
(2)  499/FFFFFFFFFFFF3058 :                     ; ====================================================================
(2)  500/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  501/FFFFFFFFFFFF3058 :                     ; Small data section
(2)  502/FFFFFFFFFFFF3058 :                     ; ------------------------------------------------------
(2)  503/FFFFFFFFFFFF3058 :                     
(2)  504/FFFFFFFFFFFF3058 :                     str_NikonaTest:
(2)  505/FFFFFFFFFFFF3058 : 2A2A 2054 6F70      		dc.b "** Top **"
         FFFFFFFFFFFF305E : 202A 2A          
(2)  506/FFFFFFFFFFFF3061 : 00                  		dc.b 0
(2)  507/FFFFFFFFFFFF3062 :                     		align 2
(2)  508/FFFFFFFFFFFF3064 :                     str_NikonaTest2:
(2)  509/FFFFFFFFFFFF3064 : 2A2A 2042 6F74      		dc.b "** Bottom **"
         FFFFFFFFFFFF306A : 746F 6D20 2A2A    
(2)  510/FFFFFFFFFFFF3070 : 00                  		dc.b 0
(2)  511/FFFFFFFFFFFF3071 :                     		align 2
(2)  512/FFFFFFFFFFFF3072 :                     str_NewCountr0:
(2)  513/FFFFFFFFFFFF3072 : 83FF DBF8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  514/FFFFFFFFFFFF3076 : 00                  		dc.b 0
(2)  515/FFFFFFFFFFFF3077 :                     		align 2
(2)  516/FFFFFFFFFFFF3078 :                     
(2)  517/FFFFFFFFFFFF3078 :                     str_InputMe:
(2)  525/FFFFFFFFFFFF3078 : 20                  		dc.b " "
(2)  527/FFFFFFFFFFFF3079 : 00                  		dc.b 0
(2)  528/FFFFFFFFFFFF307A :                     		align 2
(2)  529/FFFFFFFFFFFF307C :                     
(2)  530/FFFFFFFFFFFF307C :                     Pal_TestStamp:
(2)  531/FFFFFFFFFFFF307C :                     ; 		dc.w 0
(2)  532/FFFFFFFFFFFF307C :                     ; ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  533/FFFFFFFFFFFF307C :                     ; 		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  534/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  535/FFFFFFFFFFFF307C :                     
(2)  536/FFFFFFFFFFFF307C :                     ; Object data:
(2)  537/FFFFFFFFFFFF307C :                     ; objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  538/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  539/FFFFFFFFFFFF307C :                     ; objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  540/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  541/FFFFFFFFFFFF307C :                     ; objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  542/FFFFFFFFFFFF307C :                     ; 		align 2
(2)  543/FFFFFFFFFFFF307C :                     
(2)  544/FFFFFFFFFFFF307C :                     ; ====================================================================
(2)  545/FFFFFFFFFFFF307C :                     
(1)   16/FFFFFFFFFFFF307C :                     mcscrn_e:
(1)   16/   5D47C :                                     dephase
(1)   16/   5D47C :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   16/   5D47C :                                     align $800
(1)   16/   5D800 :                     ; Md_Screen00_e:
(1)   16/   5D800 : =$5D800              MD_SCREEN01_E label *
(1)   16/   5D800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN01",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   17/   5D800 : (MACRO)              	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/   5D800 :                                     align $800              ; SCD/CD32X sector align
(1)   17/   5D800 : =$5D800              MD_SCREEN02 label *
(1)   17/   5D800 :                     
(1)   17/   5D800 :                     mctopscrn:
(1)   17/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   17/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   17/FFFFFFFFFFFF2C00 :                             include "game/code/screen_2.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2		; Cell $0002
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   5D800 :                                     dephase
(2)   20/       2 :                                     phase 2
(2)   20/       2 : =$2                  GLBL_LASTORG    := *
(2)   21/       2 :                     vramLoc_Backgrnd	ds.b $300
(2)   22/     302 :                     vramLoc_Haruna		ds.b $24
(2)   23/     326 :                     vramLoc_Sisi		ds.b $10
(2)   24/     336 :  (MACRO-2)           			endmemory
(2)   24/   5DB34 :                     .here:          dephase
(2)   24/   5DB34 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   5D800 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestFrame		ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_TempStampVars	ds.l 2
(2)   34/FFFFFFFFFFFFB80A :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB810 :  (MACRO-2)           			endmemory
(2)   35/   5D810 :                     .here:          dephase
(2)   35/   5D810 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   36/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     ; Init
(2)   41/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   44/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   45/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   46/FFFFFFFFFFFF2C08 : 41FA 0226           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   48/FFFFFFFFFFFF2C10 : 6100 EE42           		bsr	System_SramInit
(2)   49/FFFFFFFFFFFF2C14 : 52B8 DC1C           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/FFFFFFFFFFFF2C18 : 6100 EEA8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   52/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   53/FFFFFFFFFFFF2C1C : 203C 0020 F910      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d1
(2)   55/FFFFFFFFFFFF2C26 : 6100 E336           		bsr	Video_PrintInit
(2)   56/FFFFFFFFFFFF2C2A : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   57/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d1
(2)   58/FFFFFFFFFFFF2C34 : 6100 E318           		bsr	Video_PrintInitW
(2)   59/FFFFFFFFFFFF2C38 : 6100 E338           		bsr	Video_PrintDefPal_Fade
(2)   60/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   61/FFFFFFFFFFFF2C3C : 41F9 FFFF 339C      		lea	(Pal_StampTest),a0
(2)   62/FFFFFFFFFFFF2C42 : 7000                		moveq	#0,d0
(2)   63/FFFFFFFFFFFF2C44 : 7210                		moveq	#16,d1
(2)   64/FFFFFFFFFFFF2C46 : 6100 E290           		bsr	Video_FadePal
(2)   65/FFFFFFFFFFFF2C4A : 41F9 FFFF 30CE      		lea	(Pal_Haruna),a0
(2)   66/FFFFFFFFFFFF2C50 : 7010                		moveq	#16,d0
(2)   67/FFFFFFFFFFFF2C52 : 7210                		moveq	#16,d1
(2)   68/FFFFFFFFFFFF2C54 : 6100 E282           		bsr	Video_FadePal
(2)   69/FFFFFFFFFFFF2C58 : 41F9 FFFF 3334      		lea	(Pal_Sisi),a0
(2)   70/FFFFFFFFFFFF2C5E : 7020                		moveq	#32,d0
(2)   71/FFFFFFFFFFFF2C60 : 7210                		moveq	#16,d1
(2)   72/FFFFFFFFFFFF2C62 : 6100 E274           		bsr	Video_FadePal
(2)   73/FFFFFFFFFFFF2C66 : 203C 0022 6A30      		move.l	#Art_Sisi,d0
(2)   74/FFFFFFFFFFFF2C6C : 323C 64C0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)   75/FFFFFFFFFFFF2C70 : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)   76/FFFFFFFFFFFF2C74 : 6100 DBDA           		bsr	Video_LoadArt
(2)   77/FFFFFFFFFFFF2C78 :                     
(2)   78/FFFFFFFFFFFF2C78 : 41FA 0430           		lea	str_MidemeEsta(pc),a0
(2)   79/FFFFFFFFFFFF2C7C : 7000                		moveq	#0,d0
(2)   80/FFFFFFFFFFFF2C7E : 721A                		moveq	#26,d1
(2)   81/FFFFFFFFFFFF2C80 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   82/FFFFFFFFFFFF2C84 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   83/FFFFFFFFFFFF2C88 : 6100 E306           		bsr	Video_Print
(2)   84/FFFFFFFFFFFF2C8C :                     
(2)   85/FFFFFFFFFFFF2C8C :                     	; ----------------------------------------------
(2)   87/FFFFFFFFFFFF2C8C : 41FA 01B4           		lea	file_scrn2_stamps(pc),a0			; Load STAMPS bank from Disc
(2)   88/FFFFFFFFFFFF2C90 : 6100 F332           		bsr	System_SetDataBank
(2)   89/FFFFFFFFFFFF2C94 : 41F9 FFFF 3542      		lea	(SC2_OutCells),a0
(2)   90/FFFFFFFFFFFF2C9A : 203C 0100 00C0      		move.l	#splitw(256,192),d0				; Dot-screen Width/Height 128x128
(2)   91/FFFFFFFFFFFF2CA0 : 323C 0002           		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(2)   92/FFFFFFFFFFFF2CA4 : 7400                		moveq	#0,d2						; Single buffer mode
(2)   93/FFFFFFFFFFFF2CA6 : 363C 0060           		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(2)   94/FFFFFFFFFFFF2CAA :                     ; 		move.w	#$280,d3
(2)   95/FFFFFFFFFFFF2CAA : 41F9 FFFF 3542      		lea	(SC2_OutCells),a0				; Location for the temporal cells
(2)   96/FFFFFFFFFFFF2CB0 : 6100 E952           		bsr	Video_MdMcd_StampEnable
(2)   97/FFFFFFFFFFFF2CB4 : 203C 0000 0002      		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(2)   98/FFFFFFFFFFFF2CBA : 223C 0020 0018      		move.l	#splitw(256/8,192/8),d1				; Size 128x128 in cells
(2)   99/FFFFFFFFFFFF2CC0 : 243C 0080 E000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(2)  100/FFFFFFFFFFFF2CC6 : 3638 CC02           		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(2)  101/FFFFFFFFFFFF2CCA : 6100 E9CA           		bsr	Video_MdMcd_StampDotMap
(2)  102/FFFFFFFFFFFF2CCE :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; Map position 0,2
(2)  103/FFFFFFFFFFFF2CCE :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Auto-VRAM set by _StampEnable
(2)  104/FFFFFFFFFFFF2CCE :                     ; 		bsr	Video_MdMcd_StampDotMap
(2)  105/FFFFFFFFFFFF2CCE :                     
(2)  106/FFFFFFFFFFFF2CCE :                     	; TEMPORAL MAP
(2)  107/FFFFFFFFFFFF2CCE : 6100 F130           		bsr	System_MdMcd_WaitWRAM
(2)  108/FFFFFFFFFFFF2CD2 : 41FA 06EA           		lea	MapStamp_Test(pc),a0
(2)  109/FFFFFFFFFFFF2CD6 : 43F9 0023 0000      		lea	(sysmcd_wram+WRAM_MdMapTable).l,a1
(2)  110/FFFFFFFFFFFF2CDC : 3E3C 000B           		move.w	#((192/16))-1,d7
(2)  111/FFFFFFFFFFFF2CE0 :                     .y_draw:
(2)  112/FFFFFFFFFFFF2CE0 : 3C3C 000F           		move.w	#((256/16))-1,d6
(2)  113/FFFFFFFFFFFF2CE4 : 2449                		move.l	a1,a2
(2)  114/FFFFFFFFFFFF2CE6 :                     .x_draw:
(2)  115/FFFFFFFFFFFF2CE6 : 34D8                		move.w	(a0)+,(a2)+
(2)  116/FFFFFFFFFFFF2CE8 : 51CE FFFC           		dbf	d6,.x_draw
(2)  117/FFFFFFFFFFFF2CEC : D2FC 0020           		adda	#(256/16)*2,a1
(2)  118/FFFFFFFFFFFF2CF0 : 51CF FFEE           		dbf	d7,.y_draw
(2)  119/FFFFFFFFFFFF2CF4 :                     
(2)  120/FFFFFFFFFFFF2CF4 :                     ; 		movem.l	(a6)+,d0-d3/a0-a3
(2)  121/FFFFFFFFFFFF2CF4 :                     ; 		movem.l	d0-d3/a0-a3,(a5)
(2)  122/FFFFFFFFFFFF2CF4 :                     ; 		adda	#$20,a5
(2)  123/FFFFFFFFFFFF2CF4 :                     ; 		dbf	d7,.copy_paste
(2)  124/FFFFFFFFFFFF2CF4 :                     
(2)  125/FFFFFFFFFFFF2CF4 : 7000                		moveq	#0,d0
(2)  126/FFFFFFFFFFFF2CF6 : 7200                		moveq	#0,d1
(2)  127/FFFFFFFFFFFF2CF8 : 6100 DA50           		bsr	Video_Resolution
(2)  129/FFFFFFFFFFFF2CFC :                     	; ----------------------------------------------
(2)  130/FFFFFFFFFFFF2CFC : 6100 00DC           		bsr	.show_counter				; Draw counter
(2)  131/FFFFFFFFFFFF2D00 : 6100 D9BA           		bsr	Video_DisplayOn
(2)  132/FFFFFFFFFFFF2D04 :                     	; ----------------------------------------------
(2)  134/FFFFFFFFFFFF2D04 : 6100 00FC           		bsr	.make_stamp
(2)  135/FFFFFFFFFFFF2D08 :                     ; 		lea	(GemaTracks_Scr2),a0
(2)  136/FFFFFFFFFFFF2D08 :                     ; 		bsr	gemaSetMasterList
(2)  137/FFFFFFFFFFFF2D08 :                     ; 		bsr	System_Render
(2)  138/FFFFFFFFFFFF2D08 :                     ; 		move.w	#192,d0
(2)  139/FFFFFFFFFFFF2D08 :                     ; 		bsr	gemaSetBeats
(2)  140/FFFFFFFFFFFF2D08 :                     ; 		moveq	#-1,d0
(2)  141/FFFFFFFFFFFF2D08 :                     ; 		moveq	#0,d1
(2)  142/FFFFFFFFFFFF2D08 :                     ; 		moveq	#0,d2
(2)  143/FFFFFFFFFFFF2D08 :                     ; 		bsr	gemaPlaySeq
(2)  144/FFFFFFFFFFFF2D08 :                     ; 		moveq	#2,d0
(2)  145/FFFFFFFFFFFF2D08 :                     ; 		bsr	System_MdMcd_CddaPlayL
(2)  146/FFFFFFFFFFFF2D08 : 6100 E698           		bsr	Video_MdMcd_StampInit
(2)  148/FFFFFFFFFFFF2D0C : 6100 F2D0           		bsr	Object_Run
(2)  149/FFFFFFFFFFFF2D10 : 6100 D756           		bsr	Video_BuildSprites
(2)  150/FFFFFFFFFFFF2D14 : 6100 E15E           		bsr	Video_FadeIn_Full
(2)  151/FFFFFFFFFFFF2D18 :                     
(2)  152/FFFFFFFFFFFF2D18 :                     ; ====================================================================
(2)  153/FFFFFFFFFFFF2D18 :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2D18 :                     ; Loop
(2)  155/FFFFFFFFFFFF2D18 :                     ; ------------------------------------------------------
(2)  156/FFFFFFFFFFFF2D18 :                     
(2)  157/FFFFFFFFFFFF2D18 :                     .loop:
(2)  158/FFFFFFFFFFFF2D18 : 6100 EB7A           		bsr	Sound_Update
(2)  159/FFFFFFFFFFFF2D1C : 6100 EAF8           		bsr	System_Render
(2)  160/FFFFFFFFFFFF2D20 : 6100 F2BC           		bsr	Object_Run
(2)  161/FFFFFFFFFFFF2D24 : 6100 D742           		bsr	Video_BuildSprites
(2)  162/FFFFFFFFFFFF2D28 : 6100 EB6A           		bsr	Sound_Update
(2)  164/FFFFFFFFFFFF2D2C : 6100 E6AC           		bsr	Video_MdMcd_StampRender
(2)  165/FFFFFFFFFFFF2D30 : 6406                		bcc.s	.keep_frame
(2)  166/FFFFFFFFFFFF2D32 : 0678 0100 D060      		add.w	#$100,(RAM_HorScroll+2).w
(2)  167/FFFFFFFFFFFF2D38 :                     .keep_frame:
(2)  168/FFFFFFFFFFFF2D38 :                     
(2)  169/FFFFFFFFFFFF2D38 : 6100 00C8           		bsr	.make_stamp
(2)  170/FFFFFFFFFFFF2D3C : 4BF8 DD18           		lea	(Controller_1).w,a5
(2)  171/FFFFFFFFFFFF2D40 :                     ; 		move.w	on_press(a5),d7
(2)  172/FFFFFFFFFFFF2D40 : 3E2D 0002           		move.w	on_hold(a5),d7
(2)  173/FFFFFFFFFFFF2D44 : 0807 0003           		btst	#bitJoyRight,d7
(2)  174/FFFFFFFFFFFF2D48 : 6704                		beq.s	.not_right
(2)  175/FFFFFFFFFFFF2D4A : 5278 B802           		addq.w	#1,(RAM_TempStampVars).w
(2)  176/FFFFFFFFFFFF2D4E :                     .not_right:
(2)  177/FFFFFFFFFFFF2D4E : 0807 0002           		btst	#bitJoyLeft,d7
(2)  178/FFFFFFFFFFFF2D52 : 6704                		beq.s	.not_left
(2)  179/FFFFFFFFFFFF2D54 : 5378 B802           		subq.w	#1,(RAM_TempStampVars).w
(2)  180/FFFFFFFFFFFF2D58 :                     .not_left:
(2)  181/FFFFFFFFFFFF2D58 : 0807 0001           		btst	#bitJoyDown,d7
(2)  182/FFFFFFFFFFFF2D5C : 6704                		beq.s	.not_down
(2)  183/FFFFFFFFFFFF2D5E : 5278 B804           		addq.w	#1,(RAM_TempStampVars+2).w
(2)  184/FFFFFFFFFFFF2D62 :                     .not_down:
(2)  185/FFFFFFFFFFFF2D62 : 0807 0000           		btst	#bitJoyUp,d7
(2)  186/FFFFFFFFFFFF2D66 : 6704                		beq.s	.not_up
(2)  187/FFFFFFFFFFFF2D68 : 5378 B804           		subq.w	#1,(RAM_TempStampVars+2).w
(2)  188/FFFFFFFFFFFF2D6C :                     .not_up:
(2)  189/FFFFFFFFFFFF2D6C :                     
(2)  190/FFFFFFFFFFFF2D6C : 0807 000A           		btst	#bitJoyX,d7
(2)  191/FFFFFFFFFFFF2D70 : 6704                		beq.s	.not_xx
(2)  192/FFFFFFFFFFFF2D72 : 5278 B806           		addq.w	#1,(RAM_TempStampVars+4).w
(2)  193/FFFFFFFFFFFF2D76 :                     .not_xx:
(2)  194/FFFFFFFFFFFF2D76 : 0807 0009           		btst	#bitJoyY,d7
(2)  195/FFFFFFFFFFFF2D7A : 6708                		beq.s	.not_y
(2)  196/FFFFFFFFFFFF2D7C : 41F8 C800           		lea	(RAM_MdMcd_Stamps),a0
(2)  197/FFFFFFFFFFFF2D80 : 5368 0010           		subq.w	#1,cdstamp_rot(a0)
(2)  198/FFFFFFFFFFFF2D84 :                     .not_y:
(2)  199/FFFFFFFFFFFF2D84 :                     
(2)  200/FFFFFFFFFFFF2D84 : 0807 0006           		btst	#bitJoyA,d7
(2)  201/FFFFFFFFFFFF2D88 : 6704                		beq.s	.not_a
(2)  202/FFFFFFFFFFFF2D8A : 5378 B808           		subq.w	#1,(RAM_TempStampVars+6).w
(2)  203/FFFFFFFFFFFF2D8E :                     .not_a:
(2)  204/FFFFFFFFFFFF2D8E : 0807 0004           		btst	#bitJoyB,d7
(2)  205/FFFFFFFFFFFF2D92 : 6704                		beq.s	.not_bb
(2)  206/FFFFFFFFFFFF2D94 : 5278 B808           		addq.w	#1,(RAM_TempStampVars+6).w
(2)  207/FFFFFFFFFFFF2D98 :                     .not_bb:
(2)  209/FFFFFFFFFFFF2D98 : 6140                		bsr	.show_counter				; Draw counter
(2)  210/FFFFFFFFFFFF2D9A :                     
(2)  211/FFFFFFFFFFFF2D9A : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  212/FFFFFFFFFFFF2D9E : 0247 0020           		andi.w	#JoyC,d7
(2)  213/FFFFFFFFFFFF2DA2 : 670A                		beq.s	.not_b
(2)  214/FFFFFFFFFFFF2DA4 : 203C FFFF 2F64      		move.l	#obj_Ball,d0
(2)  215/FFFFFFFFFFFF2DAA : 6100 F264           		bsr	Object_Make
(2)  216/FFFFFFFFFFFF2DAE :                     .not_b:
(2)  217/FFFFFFFFFFFF2DAE :                     
(2)  218/FFFFFFFFFFFF2DAE :                     	; Check START button
(2)  219/FFFFFFFFFFFF2DAE : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  220/FFFFFFFFFFFF2DB2 : 0247 0080           		andi.w	#JoyStart,d7
(2)  221/FFFFFFFFFFFF2DB6 : 6700 FF60           		beq	.loop
(2)  222/FFFFFFFFFFFF2DBA : 6100 E0CA           		bsr	Video_FadeOut_Full
(2)  223/FFFFFFFFFFFF2DBE :                     
(2)  224/FFFFFFFFFFFF2DBE :                     	; Stop ALL sequences
(2)  225/FFFFFFFFFFFF2DBE : 6100 D446           		bsr	gemaStopAll
(2)  226/FFFFFFFFFFFF2DC2 :                     	rept 4
(2)  227/FFFFFFFFFFFF2DC2 :                     		bsr	System_Render		; Wait 4 frames...
(2)  228/FFFFFFFFFFFF2DC2 :                     	endm
(2)  227/FFFFFFFFFFFF2DC2 : 6100 EA52           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DC6 : 6100 EA4E           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DCA : 6100 EA4A           		bsr	System_Render		; Wait 4 frames...
(2)  227/FFFFFFFFFFFF2DCE : 6100 EA46           		bsr	System_Render		; Wait 4 frames...
(2)  229/FFFFFFFFFFFF2DD2 : 31FC 0000 EDB4      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  230/FFFFFFFFFFFF2DD8 : 4E75                		rts				; <-- RTS
(2)  231/FFFFFFFFFFFF2DDA :                     
(2)  232/FFFFFFFFFFFF2DDA :                     ; ------------------------------------------------------
(2)  233/FFFFFFFFFFFF2DDA :                     ; Show framecounter and input
(2)  234/FFFFFFFFFFFF2DDA :                     ; ------------------------------------------------------
(2)  235/FFFFFFFFFFFF2DDA :                     
(2)  236/FFFFFFFFFFFF2DDA :                     .show_counter:
(2)  238/FFFFFFFFFFFF2DDA : 41FA 02B2           		lea	str_NikonaTest(pc),a0
(2)  239/FFFFFFFFFFFF2DDE : 7001                		moveq	#1,d0
(2)  240/FFFFFFFFFFFF2DE0 : 7201                		moveq	#1,d1
(2)  241/FFFFFFFFFFFF2DE2 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  242/FFFFFFFFFFFF2DE6 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  243/FFFFFFFFFFFF2DEA : 6100 E1A4           		bsr	Video_Print
(2)  245/FFFFFFFFFFFF2DEE : 41FA 02B4           		lea	str_NewCountr0(pc),a0
(2)  246/FFFFFFFFFFFF2DF2 : 7017                		moveq	#23,d0
(2)  247/FFFFFFFFFFFF2DF4 : 7201                		moveq	#1,d1
(2)  248/FFFFFFFFFFFF2DF6 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  249/FFFFFFFFFFFF2DFA : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  250/FFFFFFFFFFFF2DFE : 6000 E190           		bra	Video_Print
(2)  251/FFFFFFFFFFFF2E02 :                     
(2)  252/FFFFFFFFFFFF2E02 :                     .make_stamp:
(2)  253/FFFFFFFFFFFF2E02 :                     ;  rts
(2)  255/FFFFFFFFFFFF2E02 : 207C 0000 0000      		move.l	#0,a0
(2)  256/FFFFFFFFFFFF2E08 : 227C 0000 0000      		move.l	#0,a1
(2)  257/FFFFFFFFFFFF2E0E : 2038 B802           		move.l	(RAM_TempStampVars).w,d0
(2)  258/FFFFFFFFFFFF2E12 : 2238 B806           		move.l	(RAM_TempStampVars+4).w,d1
(2)  259/FFFFFFFFFFFF2E16 : 243C 0100 00C0      		move.l	#splitw(256,192),d2
(2)  260/FFFFFFFFFFFF2E1C : 263C 0080 0060      		move.l	#splitw(256/2,192/2),d3			; Stamp X/Y center
(2)  261/FFFFFFFFFFFF2E22 : 7E1E                		moveq	#31-1,d7
(2)  262/FFFFFFFFFFFF2E24 :                     .pain_test:
(2)  263/FFFFFFFFFFFF2E24 : 6100 E8E2           		bsr	Video_MdMcd_SetStamp
(2)  264/FFFFFFFFFFFF2E28 : D2BC 0010 0000      		add.l	#$00100000,d1
(2)  265/FFFFFFFFFFFF2E2E :                     ; 		adda	#1,a0
(2)  266/FFFFFFFFFFFF2E2E :                     ; 		dbf	d7,.pain_test
(2)  268/FFFFFFFFFFFF2E2E : 4E75                		rts
(2)  269/FFFFFFFFFFFF2E30 :                     
(2)  270/FFFFFFFFFFFF2E30 :                     ; ====================================================================
(2)  271/FFFFFFFFFFFF2E30 :                     ; ------------------------------------------------------
(2)  272/FFFFFFFFFFFF2E30 :                     ; DATA asset locations
(2)  273/FFFFFFFFFFFF2E30 :                     ; ------------------------------------------------------
(2)  274/FFFFFFFFFFFF2E30 :                     
(2)  275/FFFFFFFFFFFF2E30 :                     file_scrn1_main:
(2)  276/FFFFFFFFFFFF2E30 : 0006 1000           		dc.l DATA_BANK0
(2)  277/FFFFFFFFFFFF2E34 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2E3A : 494E 2E42 494E 00 
(2)  278/FFFFFFFFFFFF2E41 :                     		align 2
(2)  279/FFFFFFFFFFFF2E42 :                     file_scrn2_stamps:
(2)  280/FFFFFFFFFFFF2E42 : FFFF FFFF           		dc.l -1
(2)  281/FFFFFFFFFFFF2E46 : 5354 414D 5053      		dc.b "STAMPS_0.BIN",0
         FFFFFFFFFFFF2E4C : 5F30 2E42 494E 00 
(2)  282/FFFFFFFFFFFF2E53 :                     		align 2
(2)  283/FFFFFFFFFFFF2E54 :                     
(2)  284/FFFFFFFFFFFF2E54 :                     ; ====================================================================
(2)  285/FFFFFFFFFFFF2E54 :                     ; ------------------------------------------------------
(2)  286/FFFFFFFFFFFF2E54 :                     ; Objects
(2)  287/FFFFFFFFFFFF2E54 :                     ; ------------------------------------------------------
(2)  288/FFFFFFFFFFFF2E54 :                     
(2)  289/FFFFFFFFFFFF2E54 :                     ; --------------------------------------------------
(2)  290/FFFFFFFFFFFF2E54 :                     ; Test object
(2)  291/FFFFFFFFFFFF2E54 :                     ; --------------------------------------------------
(2)  292/FFFFFFFFFFFF2E54 :                     
(2)  293/FFFFFFFFFFFF2E54 :                     obj_Player:
(2)  294/FFFFFFFFFFFF2E54 : 7000                		moveq	#0,d0
(2)  295/FFFFFFFFFFFF2E56 : 102E 001C           		move.b	obj_index(a6),d0
(2)  296/FFFFFFFFFFFF2E5A : D040                		add.w	d0,d0
(2)  297/FFFFFFFFFFFF2E5C : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  298/FFFFFFFFFFFF2E60 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  299/FFFFFFFFFFFF2E64 :                     ; ----------------------------------------------
(2)  300/FFFFFFFFFFFF2E64 : 0004                .list:		dc.w .init-.list
(2)  301/FFFFFFFFFFFF2E66 : 002A                		dc.w .main-.list
(2)  302/FFFFFFFFFFFF2E68 :                     ; ----------------------------------------------
(2)  303/FFFFFFFFFFFF2E68 :                     .init:
(2)  304/FFFFFFFFFFFF2E68 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  305/FFFFFFFFFFFF2E6C : 6100 F20C           		bsr	object_ResetAnim	; Init/Reset animation
(2)  306/FFFFFFFFFFFF2E70 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  307/FFFFFFFFFFFF2E76 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  308/FFFFFFFFFFFF2E7C : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  309/FFFFFFFFFFFF2E82 : 3D7C 0080 0004      		move.w	#256/2,obj_x(a6)	; Set Object's X/Y position
(2)  310/FFFFFFFFFFFF2E88 : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  311/FFFFFFFFFFFF2E8E :                     
(2)  312/FFFFFFFFFFFF2E8E :                     ; ----------------------------------------------
(2)  313/FFFFFFFFFFFF2E8E :                     .main:
(2)  314/FFFFFFFFFFFF2E8E : 41F8 DD18           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  315/FFFFFFFFFFFF2E92 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  316/FFFFFFFFFFFF2E96 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  317/FFFFFFFFFFFF2E98 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  318/FFFFFFFFFFFF2E9A : 7400                		moveq	#0,d2
(2)  319/FFFFFFFFFFFF2E9C : 7600                		moveq	#0,d3
(2)  320/FFFFFFFFFFFF2E9E : 0807 0003           		btst	#bitJoyRight,d7
(2)  321/FFFFFFFFFFFF2EA2 : 6706                		beq.s	.not_right
(2)  322/FFFFFFFFFFFF2EA4 : 7001                		moveq	#1,d0			; X right
(2)  323/FFFFFFFFFFFF2EA6 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  324/FFFFFFFFFFFF2EA6 : 7402                		moveq	#2,d2
(2)  325/FFFFFFFFFFFF2EA8 : 5243                		addq.w	#1,d3
(2)  326/FFFFFFFFFFFF2EAA :                     .not_right:
(2)  327/FFFFFFFFFFFF2EAA : 0807 0002           		btst	#bitJoyLeft,d7
(2)  328/FFFFFFFFFFFF2EAE : 6706                		beq.s	.not_left
(2)  329/FFFFFFFFFFFF2EB0 : 70FF                		moveq	#-1,d0			; X left
(2)  330/FFFFFFFFFFFF2EB2 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  331/FFFFFFFFFFFF2EB2 : 7403                		moveq	#3,d2
(2)  332/FFFFFFFFFFFF2EB4 : 5243                		addq.w	#1,d3
(2)  333/FFFFFFFFFFFF2EB6 :                     .not_left:
(2)  334/FFFFFFFFFFFF2EB6 : 0807 0001           		btst	#bitJoyDown,d7
(2)  335/FFFFFFFFFFFF2EBA : 6706                		beq.s	.not_down
(2)  336/FFFFFFFFFFFF2EBC : 7201                		moveq	#1,d1			; Y down
(2)  337/FFFFFFFFFFFF2EBE : 7400                		moveq	#0,d2
(2)  338/FFFFFFFFFFFF2EC0 : 5243                		addq.w	#1,d3
(2)  339/FFFFFFFFFFFF2EC2 :                     .not_down:
(2)  340/FFFFFFFFFFFF2EC2 : 0807 0000           		btst	#bitJoyUp,d7
(2)  341/FFFFFFFFFFFF2EC6 : 6706                		beq.s	.not_up
(2)  342/FFFFFFFFFFFF2EC8 : 72FF                		moveq	#-1,d1			; Y up
(2)  343/FFFFFFFFFFFF2ECA : 7401                		moveq	#1,d2
(2)  344/FFFFFFFFFFFF2ECC : 5243                		addq.w	#1,d3
(2)  345/FFFFFFFFFFFF2ECE :                     .not_up:
(2)  346/FFFFFFFFFFFF2ECE :                     ; 	if MARS|MARSCD
(2)  347/FFFFFFFFFFFF2ECE :                     ; 		lea	(RAM_MdMars_MdlCamera).w,a0
(2)  348/FFFFFFFFFFFF2ECE :                     ; 		add.l	d0,cam_x_pos(a0)
(2)  349/FFFFFFFFFFFF2ECE :                     ; 		add.l	d1,cam_z_pos(a0)
(2)  350/FFFFFFFFFFFF2ECE :                     ; 		add.w	d0,obj_x(a6)
(2)  351/FFFFFFFFFFFF2ECE :                     ; 		add.w	d1,obj_z(a6)
(2)  352/FFFFFFFFFFFF2ECE :                     ; 	else
(2)  353/FFFFFFFFFFFF2ECE :                     ; 		sub.w	d0,(RAM_HorScroll+2).w
(2)  354/FFFFFFFFFFFF2ECE :                     ; 		add.w	d1,(RAM_VerScroll+2).w
(2)  355/FFFFFFFFFFFF2ECE : D16E 0004           		add.w	d0,obj_x(a6)
(2)  356/FFFFFFFFFFFF2ED2 : D36E 0008           		add.w	d1,obj_y(a6)
(2)  357/FFFFFFFFFFFF2ED6 :                     ; 	endif
(2)  358/FFFFFFFFFFFF2ED6 :                     
(2)  359/FFFFFFFFFFFF2ED6 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  360/FFFFFFFFFFFF2EDA :                     
(2)  361/FFFFFFFFFFFF2EDA :                     ; ----------------------------------------------
(2)  362/FFFFFFFFFFFF2EDA :                     ; Show the object...
(2)  363/FFFFFFFFFFFF2EDA :                     
(2)  364/FFFFFFFFFFFF2EDA : 4A43                		tst.w	d3
(2)  365/FFFFFFFFFFFF2EDC : 6708                		beq.s	.no_anim
(2)  366/FFFFFFFFFFFF2EDE : 41FA 0044           		lea	.anim_data(pc),a0	; Do animation
(2)  367/FFFFFFFFFFFF2EE2 : 6100 F1CE           		bsr	object_Animate
(2)  368/FFFFFFFFFFFF2EE6 :                     .no_anim:
(2)  369/FFFFFFFFFFFF2EE6 :                     ; 		clr.l	(RAM_TestTouch).w
(2)  370/FFFFFFFFFFFF2EE6 :                     ; 		bsr	object_Touch
(2)  371/FFFFFFFFFFFF2EE6 :                     ; 		tst.l	d0
(2)  372/FFFFFFFFFFFF2EE6 :                     ; 		beq.s	.lel
(2)  373/FFFFFFFFFFFF2EE6 :                     ; 		move.l	d0,(RAM_TestTouch).w
(2)  374/FFFFFFFFFFFF2EE6 :                     ; .lel:
(2)  375/FFFFFFFFFFFF2EE6 :                     
(2)  376/FFFFFFFFFFFF2EE6 : 207C 0000 0000      		move.l	#0,a0
(2)  377/FFFFFFFFFFFF2EEC : 43F9 FFFF 30F0      		lea	(Map_Haruna),a1
(2)  378/FFFFFFFFFFFF2EF2 : 45F9 FFFF 32A2      		lea	(Plc_Haruna),a2
(2)  379/FFFFFFFFFFFF2EF8 : 47F9 0022 3BB0      		lea	(Art_Haruna),a3
(2)  380/FFFFFFFFFFFF2EFE : 7400                		moveq	#0,d2
(2)  381/FFFFFFFFFFFF2F00 : 302E 0004           		move.w	obj_x(a6),d0
(2)  382/FFFFFFFFFFFF2F04 : 322E 0008           		move.w	obj_y(a6),d1
(2)  383/FFFFFFFFFFFF2F08 : D078 D060           		add.w	(RAM_HorScroll+2).w,d0
(2)  384/FFFFFFFFFFFF2F0C : 9278 D420           		sub.w	(RAM_VerScroll+2).w,d1
(2)  385/FFFFFFFFFFFF2F10 : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  386/FFFFFFFFFFFF2F14 : E14A                		lsl.w	#8,d2
(2)  387/FFFFFFFFFFFF2F16 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  388/FFFFFFFFFFFF2F18 : D47C 2302           		add.w	#vramLoc_Haruna|$2000,d2 	; +VRAM+$2000(use second palette line)
(2)  389/FFFFFFFFFFFF2F1C : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  390/FFFFFFFFFFFF2F20 : 6000 E3BE           		bra	Video_MakeSprMap_DMA
(2)  391/FFFFFFFFFFFF2F24 :                     
(2)  392/FFFFFFFFFFFF2F24 :                     ; ----------------------------------------------
(2)  393/FFFFFFFFFFFF2F24 :                     
(2)  394/FFFFFFFFFFFF2F24 :                     .anim_data:
(2)  395/FFFFFFFFFFFF2F24 : 0008                		dc.w .anim_down-.anim_data
(2)  396/FFFFFFFFFFFF2F26 : 0016                		dc.w .anim_up-.anim_data
(2)  397/FFFFFFFFFFFF2F28 : 0024                		dc.w .anim_right-.anim_data
(2)  398/FFFFFFFFFFFF2F2A : 0032                		dc.w .anim_left-.anim_data
(2)  399/FFFFFFFFFFFF2F2C :                     
(2)  400/FFFFFFFFFFFF2F2C :                     .anim_down:
(2)  401/FFFFFFFFFFFF2F2C : 0008                		dc.w 8
(2)  402/FFFFFFFFFFFF2F2E : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2F34 : 0002             
(2)  403/FFFFFFFFFFFF2F36 : FFFE                		dc.w -2
(2)  404/FFFFFFFFFFFF2F38 :                     		align 2
(2)  405/FFFFFFFFFFFF2F3A :                     .anim_up:
(2)  406/FFFFFFFFFFFF2F3A : 0008                		dc.w 8
(2)  407/FFFFFFFFFFFF2F3C : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2F42 : 0005             
(2)  408/FFFFFFFFFFFF2F44 : FFFE                		dc.w -2
(2)  409/FFFFFFFFFFFF2F46 :                     		align 2
(2)  410/FFFFFFFFFFFF2F48 :                     .anim_right:
(2)  411/FFFFFFFFFFFF2F48 : 0008                		dc.w 8
(2)  412/FFFFFFFFFFFF2F4A : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2F50 : 0008             
(2)  413/FFFFFFFFFFFF2F52 : FFFE                		dc.w -2
(2)  414/FFFFFFFFFFFF2F54 :                     		align 2
(2)  415/FFFFFFFFFFFF2F56 :                     .anim_left:
(2)  416/FFFFFFFFFFFF2F56 : 0008                		dc.w 8
(2)  417/FFFFFFFFFFFF2F58 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2F5E : 000B             
(2)  418/FFFFFFFFFFFF2F60 : FFFE                		dc.w -2
(2)  419/FFFFFFFFFFFF2F62 :                     		align 2
(2)  420/FFFFFFFFFFFF2F64 :                     
(2)  421/FFFFFFFFFFFF2F64 :                     ; --------------------------------------------------
(2)  422/FFFFFFFFFFFF2F64 :                     ; Test object
(2)  423/FFFFFFFFFFFF2F64 :                     ; --------------------------------------------------
(2)  424/FFFFFFFFFFFF2F64 :                     
(2)  425/FFFFFFFFFFFF2F64 :                     obj_Ball:
(2)  426/FFFFFFFFFFFF2F64 : 7000                		moveq	#0,d0
(2)  427/FFFFFFFFFFFF2F66 : 102E 001C           		move.b	obj_index(a6),d0
(2)  428/FFFFFFFFFFFF2F6A : D040                		add.w	d0,d0
(2)  429/FFFFFFFFFFFF2F6C : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  430/FFFFFFFFFFFF2F70 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  431/FFFFFFFFFFFF2F74 :                     ; ----------------------------------------------
(2)  432/FFFFFFFFFFFF2F74 : 0004                .list:		dc.w .init-.list
(2)  433/FFFFFFFFFFFF2F76 : 0072                		dc.w .main-.list
(2)  434/FFFFFFFFFFFF2F78 :                     ; ----------------------------------------------
(2)  435/FFFFFFFFFFFF2F78 :                     .init:
(2)  436/FFFFFFFFFFFF2F78 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  437/FFFFFFFFFFFF2F7C : 6100 F0FC           		bsr	object_ResetAnim	; Init/Reset animation
(2)  438/FFFFFFFFFFFF2F80 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  439/FFFFFFFFFFFF2F86 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  440/FFFFFFFFFFFF2F8C : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  441/FFFFFFFFFFFF2F92 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  442/FFFFFFFFFFFF2F98 :                     
(2)  443/FFFFFFFFFFFF2F98 : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  444/FFFFFFFFFFFF2F9E : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  445/FFFFFFFFFFFF2FA4 : 303C 0049           		move.w	#$48+1,d0
(2)  446/FFFFFFFFFFFF2FA8 : 6100 EC22           		bsr	System_DiceRoll
(2)  447/FFFFFFFFFFFF2FAC : E348                		lsl.w	#1,d0
(2)  448/FFFFFFFFFFFF2FAE : D16E 0004           		add.w	d0,obj_x(a6)
(2)  449/FFFFFFFFFFFF2FB2 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  450/FFFFFFFFFFFF2FB6 : E748                		lsl.w	#3,d0
(2)  451/FFFFFFFFFFFF2FB8 : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  452/FFFFFFFFFFFF2FBC : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  453/FFFFFFFFFFFF2FC0 :                     
(2)  454/FFFFFFFFFFFF2FC0 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  455/FFFFFFFFFFFF2FC6 : 6100 EBAA           		bsr	System_Random
(2)  456/FFFFFFFFFFFF2FCA : 2E38 ED9C           		move.l	(RAM_SysRandom).w,d7
(2)  457/FFFFFFFFFFFF2FCE : E24F                		lsr.w	#1,d7
(2)  458/FFFFFFFFFFFF2FD0 : 640A                		bcc.s	.x_random
(2)  459/FFFFFFFFFFFF2FD2 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  460/FFFFFFFFFFFF2FD6 : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  461/FFFFFFFFFFFF2FDC :                     .x_random:
(2)  462/FFFFFFFFFFFF2FDC : E24F                		lsr.w	#1,d7
(2)  463/FFFFFFFFFFFF2FDE : 6404                		bcc.s	.y_random
(2)  464/FFFFFFFFFFFF2FE0 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  465/FFFFFFFFFFFF2FE4 :                     .y_random:
(2)  466/FFFFFFFFFFFF2FE4 : 4E75                		rts
(2)  467/FFFFFFFFFFFF2FE6 :                     
(2)  468/FFFFFFFFFFFF2FE6 :                     ; ----------------------------------------------
(2)  469/FFFFFFFFFFFF2FE6 :                     .main:
(2)  470/FFFFFFFFFFFF2FE6 : 3438 DC16           		move.w	(RAM_VdpRegSetC).w,d2
(2)  471/FFFFFFFFFFFF2FEA : 0802 0002           		btst	#2,d2
(2)  472/FFFFFFFFFFFF2FEE : 660E                		bne.s	.y_fix
(2)  473/FFFFFFFFFFFF2FF0 : 0C6E 00F0 0008      		cmpi.w	#240,obj_y(a6)
(2)  474/FFFFFFFFFFFF2FF6 : 6D06                		blt.s	.y_fix
(2)  475/FFFFFFFFFFFF2FF8 : 046E 00F0 0008      		sub.w	#240,obj_y(a6)
(2)  476/FFFFFFFFFFFF2FFE :                     .y_fix:
(2)  477/FFFFFFFFFFFF2FFE :                     
(2)  478/FFFFFFFFFFFF2FFE : 323C 00E0           		move.w	#224,d1
(2)  479/FFFFFFFFFFFF3002 : 3438 DC16           		move.w	(RAM_VdpRegSetC).w,d2
(2)  480/FFFFFFFFFFFF3006 : 0802 0002           		btst	#2,d2
(2)  481/FFFFFFFFFFFF300A : 6702                		beq.s	.y_double
(2)  482/FFFFFFFFFFFF300C : D241                		add.w	d1,d1
(2)  483/FFFFFFFFFFFF300E :                     .y_double:
(2)  484/FFFFFFFFFFFF300E : 303C 0100           		move.w	#256,d0
(2)  485/FFFFFFFFFFFF3012 : 342E 0004           		move.w	obj_x(a6),d2
(2)  486/FFFFFFFFFFFF3016 : 4A42                		tst.w	d2
(2)  487/FFFFFFFFFFFF3018 : 6A0A                		bpl.s	.x_back
(2)  488/FFFFFFFFFFFF301A : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  489/FFFFFFFFFFFF301E : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  490/FFFFFFFFFFFF3024 :                     .x_back:
(2)  491/FFFFFFFFFFFF3024 : B440                		cmp.w	d0,d2
(2)  492/FFFFFFFFFFFF3026 : 6D0A                		blt.s	.x_foward
(2)  493/FFFFFFFFFFFF3028 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  494/FFFFFFFFFFFF302C : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  495/FFFFFFFFFFFF3032 :                     .x_foward:
(2)  496/FFFFFFFFFFFF3032 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  497/FFFFFFFFFFFF3036 :                     
(2)  498/FFFFFFFFFFFF3036 : 342E 0008           		move.w	obj_y(a6),d2
(2)  499/FFFFFFFFFFFF303A : 4A42                		tst.w	d2
(2)  500/FFFFFFFFFFFF303C : 6A04                		bpl.s	.y_back
(2)  501/FFFFFFFFFFFF303E : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  502/FFFFFFFFFFFF3042 :                     .y_back:
(2)  503/FFFFFFFFFFFF3042 : B441                		cmp.w	d1,d2
(2)  504/FFFFFFFFFFFF3044 : 6D04                		blt.s	.y_foward
(2)  505/FFFFFFFFFFFF3046 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  506/FFFFFFFFFFFF304A :                     .y_foward:
(2)  507/FFFFFFFFFFFF304A : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  508/FFFFFFFFFFFF304E :                     
(2)  509/FFFFFFFFFFFF304E : 6100 F032           		bsr	object_Speed
(2)  510/FFFFFFFFFFFF3052 :                     
(2)  511/FFFFFFFFFFFF3052 :                     ; ----------------------------------------------
(2)  512/FFFFFFFFFFFF3052 :                     ; Show the object...
(2)  513/FFFFFFFFFFFF3052 :                     
(2)  514/FFFFFFFFFFFF3052 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  515/FFFFFFFFFFFF3056 : 6100 F05A           		bsr	object_Animate
(2)  516/FFFFFFFFFFFF305A : 43F9 FFFF 3356      		lea	(Map_Sisi),a1
(2)  517/FFFFFFFFFFFF3060 : 7400                		moveq	#0,d2
(2)  518/FFFFFFFFFFFF3062 : 302E 0004           		move.w	obj_x(a6),d0
(2)  519/FFFFFFFFFFFF3066 : 322E 0008           		move.w	obj_y(a6),d1
(2)  520/FFFFFFFFFFFF306A : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  521/FFFFFFFFFFFF306E : E14A                		lsl.w	#8,d2
(2)  522/FFFFFFFFFFFF3070 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  523/FFFFFFFFFFFF3072 : D47C 4326           		add.w	#vramLoc_Sisi|$4000,d2 	; +VRAM+$2000(use second palette line)
(2)  524/FFFFFFFFFFFF3076 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  525/FFFFFFFFFFFF307A : 6000 E27C           		bra	Video_MakeSprMap
(2)  526/FFFFFFFFFFFF307E :                     
(2)  527/FFFFFFFFFFFF307E :                     ; ----------------------------------------------
(2)  528/FFFFFFFFFFFF307E :                     
(2)  529/FFFFFFFFFFFF307E :                     .anim_data:
(2)  530/FFFFFFFFFFFF307E : 0002                		dc.w .maind-.anim_data
(2)  531/FFFFFFFFFFFF3080 :                     .maind:
(2)  532/FFFFFFFFFFFF3080 : 0008                		dc.w 8
(2)  533/FFFFFFFFFFFF3082 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF3088 : 0001             
(2)  534/FFFFFFFFFFFF308A : FFFE                		dc.w -2
(2)  535/FFFFFFFFFFFF308C :                     		align 2
(2)  536/FFFFFFFFFFFF308E :                     
(2)  537/FFFFFFFFFFFF308E :                     ; ====================================================================
(2)  538/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  539/FFFFFFFFFFFF308E :                     ; Subroutines
(2)  540/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  541/FFFFFFFFFFFF308E :                     
(2)  542/FFFFFFFFFFFF308E :                     ; ====================================================================
(2)  543/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  544/FFFFFFFFFFFF308E :                     ; Custom VBlank
(2)  545/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  546/FFFFFFFFFFFF308E :                     
(2)  547/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  548/FFFFFFFFFFFF308E :                     ; Custom HBlank
(2)  549/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  550/FFFFFFFFFFFF308E :                     
(2)  551/FFFFFFFFFFFF308E :                     ; ====================================================================
(2)  552/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  553/FFFFFFFFFFFF308E :                     ; Includes for this screen
(2)  554/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  555/FFFFFFFFFFFF308E :                     
(2)  556/FFFFFFFFFFFF308E :                     ; ====================================================================
(2)  557/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  558/FFFFFFFFFFFF308E :                     ; Small data section
(2)  559/FFFFFFFFFFFF308E :                     ; ------------------------------------------------------
(2)  560/FFFFFFFFFFFF308E :                     
(2)  562/FFFFFFFFFFFF308E :                     str_NikonaTest:
(2)  563/FFFFFFFFFFFF308E : 81FF B802           		dc.l pstr_mem(1,RAM_TempStampVars)
(2)  564/FFFFFFFFFFFF3092 : 20                  		dc.b " "
(2)  565/FFFFFFFFFFFF3093 : 81FF B804           		dc.l pstr_mem(1,RAM_TempStampVars+2)
(2)  566/FFFFFFFFFFFF3097 : 20                  		dc.b " "
(2)  567/FFFFFFFFFFFF3098 : 81FF B806           		dc.l pstr_mem(1,RAM_TempStampVars+4)
(2)  568/FFFFFFFFFFFF309C : 20                  		dc.b " "
(2)  569/FFFFFFFFFFFF309D : 81FF B808           		dc.l pstr_mem(1,RAM_TempStampVars+6)
(2)  570/FFFFFFFFFFFF30A1 : 20                  		dc.b " "
(2)  571/FFFFFFFFFFFF30A2 : 00                  		dc.b 0
(2)  572/FFFFFFFFFFFF30A3 :                     		align 2
(2)  574/FFFFFFFFFFFF30A4 :                     
(2)  575/FFFFFFFFFFFF30A4 :                     str_NewCountr0:
(2)  576/FFFFFFFFFFFF30A4 : 83FF DBF8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  577/FFFFFFFFFFFF30A8 : 00                  		dc.b 0
(2)  578/FFFFFFFFFFFF30A9 :                     		align 2
(2)  579/FFFFFFFFFFFF30AA :                     
(2)  580/FFFFFFFFFFFF30AA :                     str_MidemeEsta:
(2)  581/FFFFFFFFFFFF30AA : 306F 316F 326F      		dc.b "0o1o2o3o4o5o6o7o8o9oAoBoCoDoEoFo",$0A
         FFFFFFFFFFFF30B0 : 336F 346F 356F 
         FFFFFFFFFFFF30B6 : 366F 376F 386F 
         FFFFFFFFFFFF30BC : 396F 416F 426F 
         FFFFFFFFFFFF30C2 : 436F 446F 456F 
         FFFFFFFFFFFF30C8 : 466F 0A          
(2)  582/FFFFFFFFFFFF30CB : 00                  		dc.b 0
(2)  583/FFFFFFFFFFFF30CC :                     		align 2
(2)  584/FFFFFFFFFFFF30CE :                     
(2)  585/FFFFFFFFFFFF30CE :                     ; ----------------------------------------------------------------
(2)  586/FFFFFFFFFFFF30CE :                     ; Everything else...
(2)  587/FFFFFFFFFFFF30CE :                     ; ----------------------------------------------------------------
(2)  588/FFFFFFFFFFFF30CE :                     
(2)  589/FFFFFFFFFFFF30CE :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  590/FFFFFFFFFFFF30EE :                     		align 2
(2)  591/FFFFFFFFFFFF30F0 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  592/FFFFFFFFFFFF32A0 :                     		align 2
(2)  593/FFFFFFFFFFFF32A2 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  594/FFFFFFFFFFFF3332 :                     		align 2
(2)  595/FFFFFFFFFFFF3334 :                     
(2)  596/FFFFFFFFFFFF3334 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)  597/FFFFFFFFFFFF3354 :                     		align 2
(2)  598/FFFFFFFFFFFF3356 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)  599/FFFFFFFFFFFF339A :                     		align 2
(2)  600/FFFFFFFFFFFF339C :                     
(2)  601/FFFFFFFFFFFF339C :                     Pal_StampTest:
(2)  602/FFFFFFFFFFFF339C :                     		binclude "game/data/mcd/stamps/test/pal.bin"
(2)  603/FFFFFFFFFFFF33BC :                     		align 2
(2)  604/FFFFFFFFFFFF33BE :                     
(2)  605/FFFFFFFFFFFF33BE :                     ; ----------------------------------------------------------------
(2)  606/FFFFFFFFFFFF33BE :                     
(2)  607/FFFFFFFFFFFF33BE :                     MapStamp_Test:
(2)  608/FFFFFFFFFFFF33BE :                     		binclude "game/data/mcd/stamps/test/map.bin"
(2)  609/FFFFFFFFFFFF353E :                     		align 2
(2)  610/FFFFFFFFFFFF3540 :                     
(2)  611/FFFFFFFFFFFF3540 :                     ; ====================================================================
(2)  612/FFFFFFFFFFFF3540 :                     ; ------------------------------------------------------
(2)  613/FFFFFFFFFFFF3540 :                     ; Sound bank
(2)  614/FFFFFFFFFFFF3540 :                     ; ------------------------------------------------------
(2)  615/FFFFFFFFFFFF3540 :                     
(2)  616/FFFFFFFFFFFF3540 :                     ; 	if MCD|MARSCD
(2)  617/FFFFFFFFFFFF3540 :                     ; GemaTracks_Scr2:
(2)  618/FFFFFFFFFFFF3540 :                     ; 		gemaTrk 1,5,gtrk_NadieCd_2
(2)  619/FFFFFFFFFFFF3540 :                     ;
(2)  620/FFFFFFFFFFFF3540 :                     ; ; ----------------------------------------------------
(2)  621/FFFFFFFFFFFF3540 :                     ;
(2)  622/FFFFFFFFFFFF3540 :                     ; gtrk_NadieCd_2:
(2)  623/FFFFFFFFFFFF3540 :                     ; 		gemaHead .blk,.pat,.ins,11
(2)  624/FFFFFFFFFFFF3540 :                     ; .blk:
(2)  625/FFFFFFFFFFFF3540 :                     ; 		binclude "sound/tracks/nadie_cd_blk.bin"
(2)  626/FFFFFFFFFFFF3540 :                     ; .pat:
(2)  627/FFFFFFFFFFFF3540 :                     ; 		binclude "sound/tracks/nadie_cd_patt.bin"
(2)  628/FFFFFFFFFFFF3540 :                     ; .ins:
(2)  629/FFFFFFFFFFFF3540 :                     ; 		gInsPcm 0,PcmIns_Nadie_L,0
(2)  630/FFFFFFFFFFFF3540 :                     ; 		gInsFm -36,FmIns_Piano_Aqua
(2)  631/FFFFFFFFFFFF3540 :                     ; 		gInsFm -12,FmIns_HBeat_tom
(2)  632/FFFFFFFFFFFF3540 :                     ; 		gInsPcm -5,PcmIns_PKick,%00
(2)  633/FFFFFFFFFFFF3540 :                     ; 		gInsPsg 0,$30,$20,$00,$02,$04,0
(2)  634/FFFFFFFFFFFF3540 :                     ; 		gInsFm 0,FmIns_Trumpet_1
(2)  635/FFFFFFFFFFFF3540 :                     ; 		gInsPcm 0,PcmIns_Piano,%00
(2)  636/FFFFFFFFFFFF3540 :                     ; 		gInsPcm -12,PcmIns_PTom,%00
(2)  637/FFFFFFFFFFFF3540 :                     ; 		gInsNull
(2)  638/FFFFFFFFFFFF3540 :                     ; 		gInsPcm 0,PcmIns_Nadie_R,0
(2)  639/FFFFFFFFFFFF3540 :                     ;
(2)  640/FFFFFFFFFFFF3540 :                     ; ; ----------------------------------------------------
(2)  641/FFFFFFFFFFFF3540 :                     ;
(2)  642/FFFFFFFFFFFF3540 :                     ; FmIns_Piano_Aqua:
(2)  643/FFFFFFFFFFFF3540 :                     ; 		binclude "sound/instr/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  644/FFFFFFFFFFFF3540 :                     ; FmIns_HBeat_tom:
(2)  645/FFFFFFFFFFFF3540 :                     ; 		binclude "sound/instr/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  646/FFFFFFFFFFFF3540 :                     ; FmIns_Trumpet_1:
(2)  647/FFFFFFFFFFFF3540 :                     ; 		binclude "sound/instr/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  648/FFFFFFFFFFFF3540 :                     ; 	endif
(2)  649/FFFFFFFFFFFF3540 :                     
(2)  650/FFFFFFFFFFFF3540 :                     ; ====================================================================
(2)  651/FFFFFFFFFFFF3540 :                     ; ------------------------------------------------------
(2)  652/FFFFFFFFFFFF3540 :                     ; Stamp cell temporal storage
(2)  653/FFFFFFFFFFFF3540 :                     ; ------------------------------------------------------
(2)  654/FFFFFFFFFFFF3540 :                     
(2)  655/FFFFFFFFFFFF3540 :                     		align 2
(2)  656/FFFFFFFFFFFF3542 :                     SC2_OutCells:
(2)  657/FFFFFFFFFFFF3542 :                     		ds.b DEF_MaxStampCOut*$20	; <-- auto-label
(2)  658/FFFFFFFFFFFF4142 :                     
(1)   17/FFFFFFFFFFFF4142 :                     mcscrn_e:
(1)   17/   5ED42 :                                     dephase
(1)   17/   5ED42 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   17/   5ED42 :                                     align $800
(1)   17/   5F000 :                     ; Md_Screen00_e:
(1)   17/   5F000 : =$5F000              MD_SCREEN02_E label *
(1)   17/   5F000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN02",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   18/   5F000 : (MACRO)              	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/   5F000 :                                     align $800              ; SCD/CD32X sector align
(1)   18/   5F000 : =$5F000              MD_SCREEN03 label *
(1)   18/   5F000 :                     
(1)   18/   5F000 :                     mctopscrn:
(1)   18/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   18/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   18/FFFFFFFFFFFF2C00 :                             include "game/code/screen_3.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   5F000 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Haruna		ds.b $24
(2)   22/      25 :                     vramLoc_Sisi		ds.b $10
(2)   23/      35 :  (MACRO-2)           			endmemory
(2)   23/   5F034 :                     .here:          dephase
(2)   23/   5F034 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   23/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   24/FFFFFFFFFFFF2C00 :                     
(2)   25/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   28/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   29/FFFFFFFFFFFF2C00 :                     
(2)   30/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   30/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   30/   5F000 :                                     dephase
(2)   30/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   30/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   31/FFFFFFFFFFFFB800 :                     RAM_ThisSpeed		ds.w 1
(2)   32/FFFFFFFFFFFFB802 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   33/   5F008 :                     .here:          dephase
(2)   33/   5F008 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/FFFFFFFFFFFF2C00 :                     
(2)   36/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   37/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   38/FFFFFFFFFFFF2C00 :                     ; Init
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   42/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   43/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   44/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   78/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   79/FFFFFFFFFFFF2C08 : 41FA 00FC           		lea	file_scrn3_main(pc),a0			; Load MAIN DATA bank
(2)   80/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   81/FFFFFFFFFFFF2C10 : 6100 EE42           		bsr	System_SramInit
(2)   82/FFFFFFFFFFFF2C14 : 52B8 DC1C           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   83/FFFFFFFFFFFF2C18 : 6100 EEA8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   84/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   85/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   86/FFFFFFFFFFFF2C1C : 203C 0020 F910      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   87/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   88/FFFFFFFFFFFF2C26 : 6100 E336           		bsr	Video_PrintInit
(2)   89/FFFFFFFFFFFF2C2A : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   90/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   91/FFFFFFFFFFFF2C34 : 6100 E318           		bsr	Video_PrintInitW
(2)   92/FFFFFFFFFFFF2C38 : 6100 E338           		bsr	Video_PrintDefPal_Fade
(2)   93/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   94/FFFFFFFFFFFF2C3C : 203C FFFF 2D2A      		move.l	#obj_Player,d0
(2)   95/FFFFFFFFFFFF2C42 : 6100 F3CC           		bsr	Object_Make				; Make MD object
(2)   96/FFFFFFFFFFFF2C46 : 41F9 FFFF 2F2C      		lea	(objPal_Haruna),a0
(2)   97/FFFFFFFFFFFF2C4C : 7010                		moveq	#16,d0					; d0 - Start at color index 16
(2)   98/FFFFFFFFFFFF2C4E : 7210                		moveq	#16,d1					; d1 - Numof colors 16
(2)   99/FFFFFFFFFFFF2C50 : 6100 E286           		bsr	Video_FadePal
(2)  100/FFFFFFFFFFFF2C54 :                     ; 		lea	str_NikonaTest(pc),a0			; Print the title string
(2)  101/FFFFFFFFFFFF2C54 :                     ; 		moveq	#1,d0					; X/Y positions 1,1
(2)  102/FFFFFFFFFFFF2C54 :                     ; 		moveq	#1,d1
(2)  103/FFFFFFFFFFFF2C54 :                     ; 		move.w	#DEF_VRAM_FG,d2				; FG VRAM location
(2)  104/FFFFFFFFFFFF2C54 :                     ; 		move.w	#DEF_HSIZE_64,d3			; FG width
(2)  105/FFFFFFFFFFFF2C54 :                     ; 		bsr	Video_PrintW				; <-- Print BIG text
(2)  106/FFFFFFFFFFFF2C54 : 41F9 0022 7212      		lea	(Pal_Sisi+color_indx(1)),a0
(2)  107/FFFFFFFFFFFF2C5A : 7001                		moveq	#1,d0
(2)  108/FFFFFFFFFFFF2C5C : 720F                		moveq	#15,d1
(2)  109/FFFFFFFFFFFF2C5E : 6100 E278           		bsr	Video_FadePal
(2)  110/FFFFFFFFFFFF2C62 : 203C 0022 6A30      		move.l	#Art_Sisi,d0
(2)  111/FFFFFFFFFFFF2C68 : 323C 04A0           		move.w	#cell_vram(vramLoc_Sisi),d1
(2)  112/FFFFFFFFFFFF2C6C : 343C 0580           		move.w	#Art_Sisi_e-Art_Sisi,d2
(2)  113/FFFFFFFFFFFF2C70 : 6100 DBDE           		bsr	Video_LoadArt
(2)  114/FFFFFFFFFFFF2C74 :                     	; ----------------------------------------------
(2)  115/FFFFFFFFFFFF2C74 : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  116/FFFFFFFFFFFF2C7A : 6176                		bsr	.show_counter				; Draw counter
(2)  117/FFFFFFFFFFFF2C7C : 6100 DA3E           		bsr	Video_DisplayOn
(2)  118/FFFFFFFFFFFF2C80 :                     	; ----------------------------------------------
(2)  119/FFFFFFFFFFFF2C80 : 6100 F35C           		bsr	Object_Run
(2)  120/FFFFFFFFFFFF2C84 : 6100 E1EE           		bsr	Video_FadeIn_Full
(2)  121/FFFFFFFFFFFF2C88 :                     
(2)  122/FFFFFFFFFFFF2C88 :                     ; ====================================================================
(2)  123/FFFFFFFFFFFF2C88 :                     ; ------------------------------------------------------
(2)  124/FFFFFFFFFFFF2C88 :                     ; Loop
(2)  125/FFFFFFFFFFFF2C88 :                     ; ------------------------------------------------------
(2)  126/FFFFFFFFFFFF2C88 :                     
(2)  127/FFFFFFFFFFFF2C88 :                     .loop:
(2)  128/FFFFFFFFFFFF2C88 : 6100 F354           		bsr	Object_Run
(2)  129/FFFFFFFFFFFF2C8C : 6100 D7DA           		bsr	Video_BuildSprites
(2)  130/FFFFFFFFFFFF2C90 : 6100 EB84           		bsr	System_Render
(2)  131/FFFFFFFFFFFF2C94 :                     
(2)  132/FFFFFFFFFFFF2C94 : 615C                		bsr	.show_counter
(2)  133/FFFFFFFFFFFF2C96 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  134/FFFFFFFFFFFF2C9A : 0247 0010           		andi.w	#JoyB,d7
(2)  135/FFFFFFFFFFFF2C9E : 6714                		beq	.b_update
(2)  136/FFFFFFFFFFFF2CA0 : 0678 0001 B800      		add.w	#1,(RAM_ThisSpeed).w
(2)  137/FFFFFFFFFFFF2CA6 : 0C78 0010 B800      		cmp.w	#$10,(RAM_ThisSpeed).w
(2)  138/FFFFFFFFFFFF2CAC : 6606                		bne.s	.b_update
(2)  139/FFFFFFFFFFFF2CAE : 31FC 0001 B800      		move.w	#1,(RAM_ThisSpeed).w
(2)  140/FFFFFFFFFFFF2CB4 :                     .b_update:
(2)  141/FFFFFFFFFFFF2CB4 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  142/FFFFFFFFFFFF2CB8 : 0247 0020           		andi.w	#JoyC,d7
(2)  143/FFFFFFFFFFFF2CBC : 670A                		beq.s	.not_b
(2)  144/FFFFFFFFFFFF2CBE : 203C FFFF 2E08      		move.l	#obj_Ball,d0
(2)  145/FFFFFFFFFFFF2CC4 : 6100 F34A           		bsr	Object_Make
(2)  146/FFFFFFFFFFFF2CC8 :                     .not_b:
(2)  147/FFFFFFFFFFFF2CC8 :                     
(2)  148/FFFFFFFFFFFF2CC8 :                     ; 	if MARS|MARSCD
(2)  149/FFFFFFFFFFFF2CC8 :                     ; 		move.w	(Controller_1+on_press).w,d7
(2)  150/FFFFFFFFFFFF2CC8 :                     ; 		andi.w	#JoyA,d7
(2)  151/FFFFFFFFFFFF2CC8 :                     ; 		beq.s	.not_a
(2)  152/FFFFFFFFFFFF2CC8 :                     ; 		moveq	#1,d0					; 32X 3D mode
(2)  153/FFFFFFFFFFFF2CC8 :                     ; 		bsr	Video_MdMars_VideoMode
(2)  154/FFFFFFFFFFFF2CC8 :                     ; .not_a:
(2)  155/FFFFFFFFFFFF2CC8 :                     ; 	endif
(2)  156/FFFFFFFFFFFF2CC8 :                     
(2)  157/FFFFFFFFFFFF2CC8 :                     	; Check START button
(2)  158/FFFFFFFFFFFF2CC8 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  159/FFFFFFFFFFFF2CCC : 0247 0080           		andi.w	#JoyStart,d7
(2)  160/FFFFFFFFFFFF2CD0 : 67B6                		beq	.loop
(2)  161/FFFFFFFFFFFF2CD2 : 6100 E1B2           		bsr	Video_FadeOut_Full
(2)  162/FFFFFFFFFFFF2CD6 :                     	; Stop ALL sequences
(2)  163/FFFFFFFFFFFF2CD6 : 6100 D52E           		bsr	gemaStopAll
(2)  164/FFFFFFFFFFFF2CDA :                     	rept 4
(2)  165/FFFFFFFFFFFF2CDA :                     		bsr	System_Render		; Wait 4 frames...
(2)  166/FFFFFFFFFFFF2CDA :                     	endm
(2)  165/FFFFFFFFFFFF2CDA : 6100 EB3A           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2CDE : 6100 EB36           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2CE2 : 6100 EB32           		bsr	System_Render		; Wait 4 frames...
(2)  165/FFFFFFFFFFFF2CE6 : 6100 EB2E           		bsr	System_Render		; Wait 4 frames...
(2)  167/FFFFFFFFFFFF2CEA : 31FC 0000 EDB4      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  168/FFFFFFFFFFFF2CF0 : 4E75                		rts				; <-- RTS
(2)  169/FFFFFFFFFFFF2CF2 :                     
(2)  170/FFFFFFFFFFFF2CF2 :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2CF2 :                     ; Show framecounter and input
(2)  172/FFFFFFFFFFFF2CF2 :                     ; ------------------------------------------------------
(2)  173/FFFFFFFFFFFF2CF2 :                     
(2)  174/FFFFFFFFFFFF2CF2 :                     .show_counter:
(2)  175/FFFFFFFFFFFF2CF2 : 41FA 021A           		lea	str_NewCountr0(pc),a0
(2)  176/FFFFFFFFFFFF2CF6 : 7001                		moveq	#1,d0
(2)  177/FFFFFFFFFFFF2CF8 : 7218                		moveq	#24,d1
(2)  178/FFFFFFFFFFFF2CFA : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  179/FFFFFFFFFFFF2CFE : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  180/FFFFFFFFFFFF2D02 : 6000 E28C           		bra	Video_Print
(2)  181/FFFFFFFFFFFF2D06 :                     
(2)  182/FFFFFFFFFFFF2D06 :                     ; ====================================================================
(2)  183/FFFFFFFFFFFF2D06 :                     ; ------------------------------------------------------
(2)  184/FFFFFFFFFFFF2D06 :                     ; DATA asset locations
(2)  185/FFFFFFFFFFFF2D06 :                     ; ------------------------------------------------------
(2)  186/FFFFFFFFFFFF2D06 :                     
(2)  187/FFFFFFFFFFFF2D06 :                     file_scrn3_main:
(2)  188/FFFFFFFFFFFF2D06 : 0006 1000           		dc.l DATA_BANK0
(2)  189/FFFFFFFFFFFF2D0A : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2D10 : 494E 2E42 494E 00 
(2)  190/FFFFFFFFFFFF2D17 :                     		align 2
(2)  191/FFFFFFFFFFFF2D18 :                     file_scrn3_mars:
(2)  192/FFFFFFFFFFFF2D18 : 0008 A000           		dc.l DATA_BANK1
(2)  193/FFFFFFFFFFFF2D1C : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2D22 : 5253 2E42 494E 00 
(2)  194/FFFFFFFFFFFF2D29 :                     		align 2
(2)  195/FFFFFFFFFFFF2D2A :                     
(2)  196/FFFFFFFFFFFF2D2A :                     ; ====================================================================
(2)  197/FFFFFFFFFFFF2D2A :                     ; ------------------------------------------------------
(2)  198/FFFFFFFFFFFF2D2A :                     ; Objects
(2)  199/FFFFFFFFFFFF2D2A :                     ; ------------------------------------------------------
(2)  200/FFFFFFFFFFFF2D2A :                     
(2)  201/FFFFFFFFFFFF2D2A :                     ; --------------------------------------------------
(2)  202/FFFFFFFFFFFF2D2A :                     ; Test object
(2)  203/FFFFFFFFFFFF2D2A :                     ; --------------------------------------------------
(2)  204/FFFFFFFFFFFF2D2A :                     
(2)  205/FFFFFFFFFFFF2D2A :                     obj_Player:
(2)  206/FFFFFFFFFFFF2D2A : 7000                		moveq	#0,d0
(2)  207/FFFFFFFFFFFF2D2C : 102E 001C           		move.b	obj_index(a6),d0
(2)  208/FFFFFFFFFFFF2D30 : D040                		add.w	d0,d0
(2)  209/FFFFFFFFFFFF2D32 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  210/FFFFFFFFFFFF2D36 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  211/FFFFFFFFFFFF2D3A :                     ; ----------------------------------------------
(2)  212/FFFFFFFFFFFF2D3A : 0004                .list:		dc.w .init-.list
(2)  213/FFFFFFFFFFFF2D3C : 0030                		dc.w .main-.list
(2)  214/FFFFFFFFFFFF2D3E :                     ; ----------------------------------------------
(2)  215/FFFFFFFFFFFF2D3E :                     .init:
(2)  216/FFFFFFFFFFFF2D3E : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  217/FFFFFFFFFFFF2D42 : 6100 F336           		bsr	object_ResetAnim	; Init/Reset animation
(2)  218/FFFFFFFFFFFF2D46 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  219/FFFFFFFFFFFF2D4C : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  220/FFFFFFFFFFFF2D52 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  221/FFFFFFFFFFFF2D58 :                     
(2)  222/FFFFFFFFFFFF2D58 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  223/FFFFFFFFFFFF2D5E : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  224/FFFFFFFFFFFF2D64 : 08EE 0000 001F      		bset	#0,obj_attr(a6)		; Set X flip
(2)  225/FFFFFFFFFFFF2D6A :                     
(2)  226/FFFFFFFFFFFF2D6A :                     ; ----------------------------------------------
(2)  227/FFFFFFFFFFFF2D6A :                     .main:
(2)  228/FFFFFFFFFFFF2D6A : 41F8 DD18           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  229/FFFFFFFFFFFF2D6E : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  230/FFFFFFFFFFFF2D72 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  231/FFFFFFFFFFFF2D74 : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  232/FFFFFFFFFFFF2D76 : 7400                		moveq	#0,d2
(2)  233/FFFFFFFFFFFF2D78 : 7600                		moveq	#0,d3
(2)  234/FFFFFFFFFFFF2D7A :                     
(2)  235/FFFFFFFFFFFF2D7A :                     
(2)  236/FFFFFFFFFFFF2D7A : 0807 0003           		btst	#bitJoyRight,d7
(2)  237/FFFFFFFFFFFF2D7E : 6708                		beq.s	.not_right
(2)  238/FFFFFFFFFFFF2D80 : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  239/FFFFFFFFFFFF2D84 :                     
(2)  240/FFFFFFFFFFFF2D84 : 7402                		moveq	#2,d2
(2)  241/FFFFFFFFFFFF2D86 : 5243                		addq.w	#1,d3
(2)  242/FFFFFFFFFFFF2D88 :                     .not_right:
(2)  243/FFFFFFFFFFFF2D88 : 0807 0002           		btst	#bitJoyLeft,d7
(2)  244/FFFFFFFFFFFF2D8C : 670A                		beq.s	.not_left
(2)  245/FFFFFFFFFFFF2D8E : 3038 B800           		move.w	(RAM_ThisSpeed).w,d0	; X right
(2)  246/FFFFFFFFFFFF2D92 : 4440                		neg.w	d0
(2)  247/FFFFFFFFFFFF2D94 :                     ; 		moveq	#-1,d0			; X left
(2)  248/FFFFFFFFFFFF2D94 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  249/FFFFFFFFFFFF2D94 : 7403                		moveq	#3,d2
(2)  250/FFFFFFFFFFFF2D96 : 5243                		addq.w	#1,d3
(2)  251/FFFFFFFFFFFF2D98 :                     .not_left:
(2)  252/FFFFFFFFFFFF2D98 : 0807 0001           		btst	#bitJoyDown,d7
(2)  253/FFFFFFFFFFFF2D9C : 6708                		beq.s	.not_down
(2)  254/FFFFFFFFFFFF2D9E : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  255/FFFFFFFFFFFF2DA2 : 7400                		moveq	#0,d2
(2)  256/FFFFFFFFFFFF2DA4 : 5243                		addq.w	#1,d3
(2)  257/FFFFFFFFFFFF2DA6 :                     .not_down:
(2)  258/FFFFFFFFFFFF2DA6 : 0807 0000           		btst	#bitJoyUp,d7
(2)  259/FFFFFFFFFFFF2DAA : 670A                		beq.s	.not_up
(2)  260/FFFFFFFFFFFF2DAC : 3238 B800           		move.w	(RAM_ThisSpeed).w,d1
(2)  261/FFFFFFFFFFFF2DB0 : 4441                		neg.w	d1
(2)  262/FFFFFFFFFFFF2DB2 :                     ; 		moveq	#-1,d1			; Y up
(2)  263/FFFFFFFFFFFF2DB2 : 7401                		moveq	#1,d2
(2)  264/FFFFFFFFFFFF2DB4 : 5243                		addq.w	#1,d3
(2)  265/FFFFFFFFFFFF2DB6 :                     .not_up:
(2)  281/FFFFFFFFFFFF2DB6 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  282/FFFFFFFFFFFF2DBA :                     
(2)  283/FFFFFFFFFFFF2DBA :                     ; ----------------------------------------------
(2)  284/FFFFFFFFFFFF2DBA :                     ; Show the object...
(2)  285/FFFFFFFFFFFF2DBA :                     
(2)  286/FFFFFFFFFFFF2DBA : 4A43                		tst.w	d3
(2)  287/FFFFFFFFFFFF2DBC : 6708                		beq.s	.no_anim
(2)  288/FFFFFFFFFFFF2DBE : 41FA 0008           		lea	.anim_data(pc),a0	; Do animation
(2)  289/FFFFFFFFFFFF2DC2 : 6100 F2EE           		bsr	object_Animate
(2)  290/FFFFFFFFFFFF2DC6 :                     .no_anim:
(2)  304/FFFFFFFFFFFF2DC6 : 4E75                		rts
(2)  306/FFFFFFFFFFFF2DC8 :                     
(2)  307/FFFFFFFFFFFF2DC8 :                     ; ----------------------------------------------
(2)  308/FFFFFFFFFFFF2DC8 :                     
(2)  309/FFFFFFFFFFFF2DC8 :                     .anim_data:
(2)  310/FFFFFFFFFFFF2DC8 : 0008                		dc.w .anim_down-.anim_data
(2)  311/FFFFFFFFFFFF2DCA : 0016                		dc.w .anim_up-.anim_data
(2)  312/FFFFFFFFFFFF2DCC : 0024                		dc.w .anim_right-.anim_data
(2)  313/FFFFFFFFFFFF2DCE : 0032                		dc.w .anim_left-.anim_data
(2)  314/FFFFFFFFFFFF2DD0 :                     
(2)  315/FFFFFFFFFFFF2DD0 :                     .anim_down:
(2)  316/FFFFFFFFFFFF2DD0 : 0008                		dc.w 8
(2)  317/FFFFFFFFFFFF2DD2 : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2DD8 : 0002             
(2)  318/FFFFFFFFFFFF2DDA : FFFE                		dc.w -2
(2)  319/FFFFFFFFFFFF2DDC :                     		align 2
(2)  320/FFFFFFFFFFFF2DDE :                     .anim_up:
(2)  321/FFFFFFFFFFFF2DDE : 0008                		dc.w 8
(2)  322/FFFFFFFFFFFF2DE0 : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2DE6 : 0005             
(2)  323/FFFFFFFFFFFF2DE8 : FFFE                		dc.w -2
(2)  324/FFFFFFFFFFFF2DEA :                     		align 2
(2)  325/FFFFFFFFFFFF2DEC :                     .anim_right:
(2)  326/FFFFFFFFFFFF2DEC : 0008                		dc.w 8
(2)  327/FFFFFFFFFFFF2DEE : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2DF4 : 0008             
(2)  328/FFFFFFFFFFFF2DF6 : FFFE                		dc.w -2
(2)  329/FFFFFFFFFFFF2DF8 :                     		align 2
(2)  330/FFFFFFFFFFFF2DFA :                     .anim_left:
(2)  331/FFFFFFFFFFFF2DFA : 0008                		dc.w 8
(2)  332/FFFFFFFFFFFF2DFC : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2E02 : 000B             
(2)  333/FFFFFFFFFFFF2E04 : FFFE                		dc.w -2
(2)  334/FFFFFFFFFFFF2E06 :                     		align 2
(2)  335/FFFFFFFFFFFF2E08 :                     
(2)  336/FFFFFFFFFFFF2E08 :                     ; --------------------------------------------------
(2)  337/FFFFFFFFFFFF2E08 :                     ; Test object
(2)  338/FFFFFFFFFFFF2E08 :                     ; --------------------------------------------------
(2)  339/FFFFFFFFFFFF2E08 :                     
(2)  340/FFFFFFFFFFFF2E08 :                     obj_Ball:
(2)  341/FFFFFFFFFFFF2E08 : 7000                		moveq	#0,d0
(2)  342/FFFFFFFFFFFF2E0A : 102E 001C           		move.b	obj_index(a6),d0
(2)  343/FFFFFFFFFFFF2E0E : D040                		add.w	d0,d0
(2)  344/FFFFFFFFFFFF2E10 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  345/FFFFFFFFFFFF2E14 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  346/FFFFFFFFFFFF2E18 :                     ; ----------------------------------------------
(2)  347/FFFFFFFFFFFF2E18 : 0004                .list:		dc.w .init-.list
(2)  348/FFFFFFFFFFFF2E1A : 0072                		dc.w .main-.list
(2)  349/FFFFFFFFFFFF2E1C :                     ; ----------------------------------------------
(2)  350/FFFFFFFFFFFF2E1C :                     .init:
(2)  351/FFFFFFFFFFFF2E1C : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  352/FFFFFFFFFFFF2E20 : 6100 F258           		bsr	object_ResetAnim	; Init/Reset animation
(2)  353/FFFFFFFFFFFF2E24 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  354/FFFFFFFFFFFF2E2A : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  355/FFFFFFFFFFFF2E30 : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  356/FFFFFFFFFFFF2E36 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  357/FFFFFFFFFFFF2E3C :                     
(2)  358/FFFFFFFFFFFF2E3C : 3D7C 0020 0004      		move.w	#$20,obj_x(a6)	; Set Object's X/Y position
(2)  359/FFFFFFFFFFFF2E42 : 3D7C 0010 0008      		move.w	#$10,obj_y(a6)
(2)  360/FFFFFFFFFFFF2E48 : 303C 0049           		move.w	#$48+1,d0
(2)  361/FFFFFFFFFFFF2E4C : 6100 ED7E           		bsr	System_DiceRoll
(2)  362/FFFFFFFFFFFF2E50 : E348                		lsl.w	#1,d0
(2)  363/FFFFFFFFFFFF2E52 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  364/FFFFFFFFFFFF2E56 : D16E 0008           		add.w	d0,obj_y(a6)
(2)  365/FFFFFFFFFFFF2E5A : E748                		lsl.w	#3,d0
(2)  366/FFFFFFFFFFFF2E5C : 3D40 0016           		move.w	d0,obj_x_spd(a6)
(2)  367/FFFFFFFFFFFF2E60 : 3D40 0018           		move.w	d0,obj_y_spd(a6)
(2)  368/FFFFFFFFFFFF2E64 :                     
(2)  369/FFFFFFFFFFFF2E64 : 08EE 0000 001F      		bset	#0,obj_attr(a6)
(2)  370/FFFFFFFFFFFF2E6A : 6100 ED06           		bsr	System_Random
(2)  371/FFFFFFFFFFFF2E6E : 2E38 ED9C           		move.l	(RAM_SysRandom).w,d7
(2)  372/FFFFFFFFFFFF2E72 : E24F                		lsr.w	#1,d7
(2)  373/FFFFFFFFFFFF2E74 : 640A                		bcc.s	.x_random
(2)  374/FFFFFFFFFFFF2E76 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  375/FFFFFFFFFFFF2E7A : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  376/FFFFFFFFFFFF2E80 :                     .x_random:
(2)  377/FFFFFFFFFFFF2E80 : E24F                		lsr.w	#1,d7
(2)  378/FFFFFFFFFFFF2E82 : 6404                		bcc.s	.y_random
(2)  379/FFFFFFFFFFFF2E84 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  380/FFFFFFFFFFFF2E88 :                     .y_random:
(2)  381/FFFFFFFFFFFF2E88 : 4E75                		rts
(2)  382/FFFFFFFFFFFF2E8A :                     
(2)  383/FFFFFFFFFFFF2E8A :                     ; ----------------------------------------------
(2)  384/FFFFFFFFFFFF2E8A :                     .main:
(2)  385/FFFFFFFFFFFF2E8A : 323C 00E0           		move.w	#224,d1
(2)  386/FFFFFFFFFFFF2E8E : 303C 0140           		move.w	#320,d0
(2)  387/FFFFFFFFFFFF2E92 : 342E 0004           		move.w	obj_x(a6),d2
(2)  388/FFFFFFFFFFFF2E96 : 4A42                		tst.w	d2
(2)  389/FFFFFFFFFFFF2E98 : 6A0A                		bpl.s	.x_back
(2)  390/FFFFFFFFFFFF2E9A : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  391/FFFFFFFFFFFF2E9E : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  392/FFFFFFFFFFFF2EA4 :                     .x_back:
(2)  393/FFFFFFFFFFFF2EA4 : B440                		cmp.w	d0,d2
(2)  394/FFFFFFFFFFFF2EA6 : 6D0A                		blt.s	.x_foward
(2)  395/FFFFFFFFFFFF2EA8 : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  396/FFFFFFFFFFFF2EAC : 086E 0000 001F      		bchg	#0,obj_attr(a6)
(2)  397/FFFFFFFFFFFF2EB2 :                     .x_foward:
(2)  398/FFFFFFFFFFFF2EB2 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  399/FFFFFFFFFFFF2EB6 :                     
(2)  400/FFFFFFFFFFFF2EB6 : 342E 0008           		move.w	obj_y(a6),d2
(2)  401/FFFFFFFFFFFF2EBA : 4A42                		tst.w	d2
(2)  402/FFFFFFFFFFFF2EBC : 6A04                		bpl.s	.y_back
(2)  403/FFFFFFFFFFFF2EBE : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  404/FFFFFFFFFFFF2EC2 :                     .y_back:
(2)  405/FFFFFFFFFFFF2EC2 : B441                		cmp.w	d1,d2
(2)  406/FFFFFFFFFFFF2EC4 : 6D04                		blt.s	.y_foward
(2)  407/FFFFFFFFFFFF2EC6 : 446E 0018           		neg.w	obj_y_spd(a6)
(2)  408/FFFFFFFFFFFF2ECA :                     .y_foward:
(2)  409/FFFFFFFFFFFF2ECA : 3D42 0008           		move.w	d2,obj_y(a6)
(2)  410/FFFFFFFFFFFF2ECE :                     
(2)  411/FFFFFFFFFFFF2ECE : 6100 F1B2           		bsr	object_Speed
(2)  412/FFFFFFFFFFFF2ED2 :                     
(2)  413/FFFFFFFFFFFF2ED2 :                     ; ----------------------------------------------
(2)  414/FFFFFFFFFFFF2ED2 :                     ; Show the object...
(2)  415/FFFFFFFFFFFF2ED2 : 41FA 002A           		lea	.anim_data(pc),a0	; Do animation
(2)  416/FFFFFFFFFFFF2ED6 : 6100 F1DA           		bsr	object_Animate
(2)  417/FFFFFFFFFFFF2EDA :                     
(2)  431/FFFFFFFFFFFF2EDA : 43F9 0022 7230      		lea	(Map_Sisi),a1
(2)  432/FFFFFFFFFFFF2EE0 : 7400                		moveq	#0,d2
(2)  433/FFFFFFFFFFFF2EE2 : 302E 0004           		move.w	obj_x(a6),d0
(2)  434/FFFFFFFFFFFF2EE6 : 322E 0008           		move.w	obj_y(a6),d1
(2)  435/FFFFFFFFFFFF2EEA : 142E 001F           		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  436/FFFFFFFFFFFF2EEE : E14A                		lsl.w	#8,d2
(2)  437/FFFFFFFFFFFF2EF0 : E74A                		lsl.w	#3,d2				; %000vh000 00000000
(2)  438/FFFFFFFFFFFF2EF2 : D47C 0025           		add.w	#vramLoc_Sisi,d2
(2)  439/FFFFFFFFFFFF2EF6 : 362E 0020           		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  440/FFFFFFFFFFFF2EFA : 6000 E3FC           		bra	Video_MakeSprMap
(2)  442/FFFFFFFFFFFF2EFE :                     
(2)  443/FFFFFFFFFFFF2EFE :                     ; ----------------------------------------------
(2)  444/FFFFFFFFFFFF2EFE :                     
(2)  445/FFFFFFFFFFFF2EFE :                     .anim_data:
(2)  446/FFFFFFFFFFFF2EFE : 0002                		dc.w .maind-.anim_data
(2)  447/FFFFFFFFFFFF2F00 :                     .maind:
(2)  448/FFFFFFFFFFFF2F00 : 0008                		dc.w 8
(2)  449/FFFFFFFFFFFF2F02 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2F08 : 0001             
(2)  450/FFFFFFFFFFFF2F0A : FFFE                		dc.w -2
(2)  451/FFFFFFFFFFFF2F0C :                     		align 2
(2)  452/FFFFFFFFFFFF2F0E :                     
(2)  453/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  454/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  455/FFFFFFFFFFFF2F0E :                     ; Subroutines
(2)  456/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  457/FFFFFFFFFFFF2F0E :                     
(2)  458/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  459/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  460/FFFFFFFFFFFF2F0E :                     ; Includes for this screen
(2)  461/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  462/FFFFFFFFFFFF2F0E :                     
(2)  463/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  464/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  465/FFFFFFFFFFFF2F0E :                     ; Custom VBlank
(2)  466/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  467/FFFFFFFFFFFF2F0E :                     
(2)  468/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  469/FFFFFFFFFFFF2F0E :                     ; Custom HBlank
(2)  470/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  471/FFFFFFFFFFFF2F0E :                     
(2)  472/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  473/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  474/FFFFFFFFFFFF2F0E :                     ; Small data section
(2)  475/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  476/FFFFFFFFFFFF2F0E :                     
(2)  477/FFFFFFFFFFFF2F0E :                     ; str_NikonaTest:
(2)  478/FFFFFFFFFFFF2F0E :                     ; 		dc.b "32X 2D test"
(2)  479/FFFFFFFFFFFF2F0E :                     ; 		dc.b 0
(2)  480/FFFFFFFFFFFF2F0E :                     ; 		align 2
(2)  481/FFFFFFFFFFFF2F0E :                     str_NewCountr0:
(2)  488/FFFFFFFFFFFF2F0E : 81FF B800           		dc.l pstr_mem(1,RAM_ThisSpeed)
(2)  489/FFFFFFFFFFFF2F12 : 20                  		dc.b " "
(2)  490/FFFFFFFFFFFF2F13 : 83FF DBF8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  491/FFFFFFFFFFFF2F17 : 00                  		dc.b 0
(2)  492/FFFFFFFFFFFF2F18 :                     		align 2
(2)  493/FFFFFFFFFFFF2F1A :                     
(2)  494/FFFFFFFFFFFF2F1A :                     str_InputMe:
(2)  502/FFFFFFFFFFFF2F1A : 20                  		dc.b " "
(2)  504/FFFFFFFFFFFF2F1B : 00                  		dc.b 0
(2)  505/FFFFFFFFFFFF2F1C :                     		align 2
(2)  506/FFFFFFFFFFFF2F1E :                     
(2)  507/FFFFFFFFFFFF2F1E :                     Pal_TestStamp:
(2)  508/FFFFFFFFFFFF2F1E : 0000                		dc.w 0
(2)  509/FFFFFFFFFFFF2F20 :                     ; 		binclude "game/data/mcd/stamps/haruna/pal.bin",2
(2)  510/FFFFFFFFFFFF2F20 :                     		binclude "game/data/mcd/stamps/test/pal.bin",11*2
(2)  511/FFFFFFFFFFFF2F2A :                     		align 2
(2)  512/FFFFFFFFFFFF2F2C :                     
(2)  513/FFFFFFFFFFFF2F2C :                     ; Object data:
(2)  514/FFFFFFFFFFFF2F2C :                     objPal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)  515/FFFFFFFFFFFF2F4C :                     		align 2
(2)  516/FFFFFFFFFFFF2F4E :                     objMap_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)  517/FFFFFFFFFFFF30FE :                     		align 2
(2)  518/FFFFFFFFFFFF3100 :                     objPlc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)  519/FFFFFFFFFFFF3190 :                     		align 2
(2)  520/FFFFFFFFFFFF3192 :                     
(2)  521/FFFFFFFFFFFF3192 :                     ; ====================================================================
(2)  522/FFFFFFFFFFFF3192 :                     
(1)   18/FFFFFFFFFFFF3192 :                     mcscrn_e:
(1)   18/   5F592 :                                     dephase
(1)   18/   5F592 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   18/   5F592 :                                     align $800
(1)   18/   5F800 :                     ; Md_Screen00_e:
(1)   18/   5F800 : =$5F800              MD_SCREEN03_E label *
(1)   18/   5F800 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN03",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   19/   5F800 : (MACRO)              	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/   5F800 :                                     align $800              ; SCD/CD32X sector align
(1)   19/   5F800 : =$5F800              MD_SCREEN04 label *
(1)   19/   5F800 :                     
(1)   19/   5F800 :                     mctopscrn:
(1)   19/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   19/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   19/FFFFFFFFFFFF2C00 :                             include "game/code/screen_4.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   12/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   13/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     
(2)   16/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     ; VRAM Setup
(2)   18/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------
(2)   19/FFFFFFFFFFFF2C00 :                     
(2)   20/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 1		; Cell $0001
(2)   20/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   20/   5F800 :                                     dephase
(2)   20/       1 :                                     phase 1
(2)   20/       1 : =$1                  GLBL_LASTORG    := *
(2)   21/       1 :                     vramLoc_Backgrnd	ds.b $32A
(2)   22/     32B :                     vramLoc_Haruna		ds.b $12A
(2)   23/     455 :                     vramLoc_Haruna2		ds.b $12A
(2)   24/     57F :  (MACRO-2)           			endmemory
(2)   24/   5FD7E :                     .here:          dephase
(2)   24/   5FD7E :                                     ds.b -(.here-GLBL_LASTORG)
(2)   24/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   25/FFFFFFFFFFFF2C00 :                     
(2)   26/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   29/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   30/FFFFFFFFFFFF2C00 :                     
(2)   31/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   31/   5F800 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_TestTouch		ds.l 1
(2)   33/FFFFFFFFFFFFB804 :                     RAM_Camera_Xpos		ds.l 1
(2)   34/FFFFFFFFFFFFB808 :                     RAM_Camera_Zpos		ds.l 1
(2)   35/FFFFFFFFFFFFB80C :                     RAM_Camera_Rot		ds.w 1
(2)   36/FFFFFFFFFFFFB80E :                     RAM_Camera_TRot		ds.w 1
(2)   37/FFFFFFFFFFFFB810 :                     RAM_Camera_TRotD	ds.w 1
(2)   38/FFFFFFFFFFFFB812 :                     RAM_ModelPick		ds.w 1
(2)   39/FFFFFFFFFFFFB814 :                     .sizeof_this		ds.l 0
(2)   40/FFFFFFFFFFFFB818 :  (MACRO-2)           			endmemory
(2)   40/   5F818 :                     .here:          dephase
(2)   40/   5F818 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   40/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   41/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   42/FFFFFFFFFFFF2C00 :                     
(2)   43/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   44/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   45/FFFFFFFFFFFF2C00 :                     ; Init
(2)   46/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   47/FFFFFFFFFFFF2C00 :                     
(2)   48/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   49/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   50/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   51/FFFFFFFFFFFF2C08 :                     	; 32X only:
(2)   80/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   81/FFFFFFFFFFFF2C08 : 41FA 0098           		lea	file_scrn4_main(pc),a0			; Load MAIN DATA bank
(2)   82/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   83/FFFFFFFFFFFF2C10 : 6100 EE42           		bsr	System_SramInit
(2)   84/FFFFFFFFFFFF2C14 : 52B8 DC1C           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   85/FFFFFFFFFFFF2C18 : 6100 EEA8           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   86/FFFFFFFFFFFF2C1C :                     	; ----------------------------------------------
(2)   87/FFFFFFFFFFFF2C1C :                     	; Load PRINT
(2)   88/FFFFFFFFFFFF2C1C : 203C 0020 F910      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   89/FFFFFFFFFFFF2C22 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1			; Default_VRAM|Pallete 3
(2)   90/FFFFFFFFFFFF2C26 : 6100 E336           		bsr	Video_PrintInit
(2)   91/FFFFFFFFFFFF2C2A : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   92/FFFFFFFFFFFF2C30 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   93/FFFFFFFFFFFF2C34 : 6100 E318           		bsr	Video_PrintInitW
(2)   94/FFFFFFFFFFFF2C38 : 6100 E338           		bsr	Video_PrintDefPal_Fade
(2)   95/FFFFFFFFFFFF2C3C :                     	; ----------------------------------------------
(2)   96/FFFFFFFFFFFF2C3C : 203C FFFF 2CC6      		move.l	#obj_Player,d0
(2)   97/FFFFFFFFFFFF2C42 : 6100 F3CC           		bsr	Object_Make				; Make MD object
(2)   98/FFFFFFFFFFFF2C46 :                     	; ----------------------------------------------
(2)   99/FFFFFFFFFFFF2C46 : 6144                		bsr	.show_counter				; Draw counter
(2)  100/FFFFFFFFFFFF2C48 : 6100 DA72           		bsr	Video_DisplayOn
(2)  101/FFFFFFFFFFFF2C4C :                     	; ----------------------------------------------
(2)  102/FFFFFFFFFFFF2C4C : 6100 F390           		bsr	Object_Run
(2)  103/FFFFFFFFFFFF2C50 : 6100 E222           		bsr	Video_FadeIn_Full
(2)  104/FFFFFFFFFFFF2C54 :                     
(2)  105/FFFFFFFFFFFF2C54 :                     ; ====================================================================
(2)  106/FFFFFFFFFFFF2C54 :                     ; ------------------------------------------------------
(2)  107/FFFFFFFFFFFF2C54 :                     ; Loop
(2)  108/FFFFFFFFFFFF2C54 :                     ; ------------------------------------------------------
(2)  109/FFFFFFFFFFFF2C54 :                     
(2)  110/FFFFFFFFFFFF2C54 :                     .loop:
(2)  111/FFFFFFFFFFFF2C54 : 6100 F388           		bsr	Object_Run
(2)  112/FFFFFFFFFFFF2C58 : 6100 D80E           		bsr	Video_BuildSprites
(2)  113/FFFFFFFFFFFF2C5C : 6100 EBB8           		bsr	System_Render
(2)  114/FFFFFFFFFFFF2C60 :                     
(2)  115/FFFFFFFFFFFF2C60 : 612A                		bsr	.show_counter
(2)  136/FFFFFFFFFFFF2C62 :                     
(2)  137/FFFFFFFFFFFF2C62 :                     	; Check START button
(2)  138/FFFFFFFFFFFF2C62 : 3E38 DD1C           		move.w	(Controller_1+on_press).w,d7
(2)  139/FFFFFFFFFFFF2C66 : 0247 0080           		andi.w	#JoyStart,d7
(2)  140/FFFFFFFFFFFF2C6A : 67E8                		beq	.loop
(2)  141/FFFFFFFFFFFF2C6C : 6100 E218           		bsr	Video_FadeOut_Full
(2)  142/FFFFFFFFFFFF2C70 :                     
(2)  143/FFFFFFFFFFFF2C70 :                     	; Stop ALL sequences
(2)  144/FFFFFFFFFFFF2C70 : 6100 D594           		bsr	gemaStopAll
(2)  145/FFFFFFFFFFFF2C74 :                     	rept 4
(2)  146/FFFFFFFFFFFF2C74 :                     		bsr	System_Render		; Wait 4 frames...
(2)  147/FFFFFFFFFFFF2C74 :                     	endm
(2)  146/FFFFFFFFFFFF2C74 : 6100 EBA0           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2C78 : 6100 EB9C           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2C7C : 6100 EB98           		bsr	System_Render		; Wait 4 frames...
(2)  146/FFFFFFFFFFFF2C80 : 6100 EB94           		bsr	System_Render		; Wait 4 frames...
(2)  148/FFFFFFFFFFFF2C84 : 31FC 0000 EDB4      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  149/FFFFFFFFFFFF2C8A : 4E75                		rts				; <-- RTS
(2)  150/FFFFFFFFFFFF2C8C :                     
(2)  151/FFFFFFFFFFFF2C8C :                     ; ------------------------------------------------------
(2)  152/FFFFFFFFFFFF2C8C :                     ; Show framecounter and input
(2)  153/FFFFFFFFFFFF2C8C :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2C8C :                     
(2)  155/FFFFFFFFFFFF2C8C :                     .show_counter:
(2)  156/FFFFFFFFFFFF2C8C :                     ; 		lea	str_InputMe(pc),a0
(2)  157/FFFFFFFFFFFF2C8C :                     ; 		moveq	#1,d0
(2)  158/FFFFFFFFFFFF2C8C :                     ; 		moveq	#4,d1
(2)  159/FFFFFFFFFFFF2C8C :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  160/FFFFFFFFFFFF2C8C :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  161/FFFFFFFFFFFF2C8C :                     ; 		bsr	Video_Print
(2)  162/FFFFFFFFFFFF2C8C :                     
(2)  163/FFFFFFFFFFFF2C8C : 41FA 01B8           		lea	str_NewCountr0(pc),a0
(2)  164/FFFFFFFFFFFF2C90 : 7001                		moveq	#1,d0
(2)  165/FFFFFFFFFFFF2C92 : 7201                		moveq	#1,d1
(2)  166/FFFFFFFFFFFF2C94 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  167/FFFFFFFFFFFF2C98 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  168/FFFFFFFFFFFF2C9C : 6000 E2F2           		bra	Video_Print
(2)  169/FFFFFFFFFFFF2CA0 :                     
(2)  170/FFFFFFFFFFFF2CA0 :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2CA0 :                     
(2)  172/FFFFFFFFFFFF2CA0 :                     .pick_model:
(2)  184/FFFFFFFFFFFF2CA0 : 4E75                		rts
(2)  186/FFFFFFFFFFFF2CA2 :                     
(2)  187/FFFFFFFFFFFF2CA2 :                     ; ====================================================================
(2)  188/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  189/FFFFFFFFFFFF2CA2 :                     ; DATA asset locations
(2)  190/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  191/FFFFFFFFFFFF2CA2 :                     
(2)  192/FFFFFFFFFFFF2CA2 :                     file_scrn4_main:
(2)  193/FFFFFFFFFFFF2CA2 : 0006 1000           		dc.l DATA_BANK0
(2)  194/FFFFFFFFFFFF2CA6 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF2CAC : 494E 2E42 494E 00 
(2)  195/FFFFFFFFFFFF2CB3 :                     		align 2
(2)  196/FFFFFFFFFFFF2CB4 :                     file_scrn4_mars:
(2)  197/FFFFFFFFFFFF2CB4 : 0008 A000           		dc.l DATA_BANK1
(2)  198/FFFFFFFFFFFF2CB8 : 424E 4B5F 4D41      		dc.b "BNK_MARS.BIN",0
         FFFFFFFFFFFF2CBE : 5253 2E42 494E 00 
(2)  199/FFFFFFFFFFFF2CC5 :                     		align 2
(2)  200/FFFFFFFFFFFF2CC6 :                     
(2)  201/FFFFFFFFFFFF2CC6 :                     ; ====================================================================
(2)  202/FFFFFFFFFFFF2CC6 :                     ; ------------------------------------------------------
(2)  203/FFFFFFFFFFFF2CC6 :                     ; Objects
(2)  204/FFFFFFFFFFFF2CC6 :                     ; ------------------------------------------------------
(2)  205/FFFFFFFFFFFF2CC6 :                     
(2)  206/FFFFFFFFFFFF2CC6 :                     ; --------------------------------------------------
(2)  207/FFFFFFFFFFFF2CC6 :                     ; Test object
(2)  208/FFFFFFFFFFFF2CC6 :                     ; --------------------------------------------------
(2)  209/FFFFFFFFFFFF2CC6 :                     
(2)  210/FFFFFFFFFFFF2CC6 :                     obj_Player:
(2)  211/FFFFFFFFFFFF2CC6 : 7000                		moveq	#0,d0
(2)  212/FFFFFFFFFFFF2CC8 : 102E 001C           		move.b	obj_index(a6),d0
(2)  213/FFFFFFFFFFFF2CCC : D040                		add.w	d0,d0
(2)  214/FFFFFFFFFFFF2CCE : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  215/FFFFFFFFFFFF2CD2 : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  216/FFFFFFFFFFFF2CD6 :                     ; ----------------------------------------------
(2)  217/FFFFFFFFFFFF2CD6 : 0004                .list:		dc.w .init-.list
(2)  218/FFFFFFFFFFFF2CD8 : 002A                		dc.w .main-.list
(2)  219/FFFFFFFFFFFF2CDA :                     ; ----------------------------------------------
(2)  220/FFFFFFFFFFFF2CDA :                     .init:
(2)  221/FFFFFFFFFFFF2CDA : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  222/FFFFFFFFFFFF2CDE : 6100 F39A           		bsr	object_ResetAnim	; Init/Reset animation
(2)  223/FFFFFFFFFFFF2CE2 : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  224/FFFFFFFFFFFF2CE8 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  225/FFFFFFFFFFFF2CEE : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  226/FFFFFFFFFFFF2CF4 :                     
(2)  232/FFFFFFFFFFFF2CF4 : 3D7C 00A0 0004      		move.w	#320/2,obj_x(a6)	; Set Object's X/Y position
(2)  233/FFFFFFFFFFFF2CFA : 3D7C 0070 0008      		move.w	#224/2,obj_y(a6)
(2)  235/FFFFFFFFFFFF2D00 :                     
(2)  236/FFFFFFFFFFFF2D00 :                     ; ----------------------------------------------
(2)  237/FFFFFFFFFFFF2D00 :                     .main:
(2)  238/FFFFFFFFFFFF2D00 : 41F8 DD18           		lea	(Controller_1).w,a0	; a0 - Input 1 buffer
(2)  239/FFFFFFFFFFFF2D04 : 3E28 0002           		move.w	on_hold(a0),d7		; d7 - Read HOLDING buttons on Port 1
(2)  240/FFFFFFFFFFFF2D08 : 7000                		moveq	#0,d0			; d0 - Reset X increment
(2)  241/FFFFFFFFFFFF2D0A : 7200                		moveq	#0,d1			; d1 - Reset Y increment
(2)  242/FFFFFFFFFFFF2D0C : 7400                		moveq	#0,d2
(2)  243/FFFFFFFFFFFF2D0E : 7600                		moveq	#0,d3
(2)  244/FFFFFFFFFFFF2D10 : 0807 0003           		btst	#bitJoyRight,d7
(2)  245/FFFFFFFFFFFF2D14 : 6706                		beq.s	.not_right
(2)  246/FFFFFFFFFFFF2D16 : 7001                		moveq	#1,d0			; X right
(2)  247/FFFFFFFFFFFF2D18 :                     ; 		bset	#0,obj_attr(a6)		; Set X flip
(2)  248/FFFFFFFFFFFF2D18 : 7402                		moveq	#2,d2
(2)  249/FFFFFFFFFFFF2D1A : 5243                		addq.w	#1,d3
(2)  250/FFFFFFFFFFFF2D1C :                     .not_right:
(2)  251/FFFFFFFFFFFF2D1C : 0807 0002           		btst	#bitJoyLeft,d7
(2)  252/FFFFFFFFFFFF2D20 : 6706                		beq.s	.not_left
(2)  253/FFFFFFFFFFFF2D22 : 70FF                		moveq	#-1,d0			; X left
(2)  254/FFFFFFFFFFFF2D24 :                     ; 		bclr	#0,obj_attr(a6)		; Reset X flip
(2)  255/FFFFFFFFFFFF2D24 : 7403                		moveq	#3,d2
(2)  256/FFFFFFFFFFFF2D26 : 5243                		addq.w	#1,d3
(2)  257/FFFFFFFFFFFF2D28 :                     .not_left:
(2)  258/FFFFFFFFFFFF2D28 : 0807 0001           		btst	#bitJoyDown,d7
(2)  259/FFFFFFFFFFFF2D2C : 6706                		beq.s	.not_down
(2)  260/FFFFFFFFFFFF2D2E : 7201                		moveq	#1,d1			; Y down
(2)  261/FFFFFFFFFFFF2D30 : 7400                		moveq	#0,d2
(2)  262/FFFFFFFFFFFF2D32 : 5243                		addq.w	#1,d3
(2)  263/FFFFFFFFFFFF2D34 :                     .not_down:
(2)  264/FFFFFFFFFFFF2D34 : 0807 0000           		btst	#bitJoyUp,d7
(2)  265/FFFFFFFFFFFF2D38 : 6706                		beq.s	.not_up
(2)  266/FFFFFFFFFFFF2D3A : 72FF                		moveq	#-1,d1			; Y up
(2)  267/FFFFFFFFFFFF2D3C : 7401                		moveq	#1,d2
(2)  268/FFFFFFFFFFFF2D3E : 5243                		addq.w	#1,d3
(2)  269/FFFFFFFFFFFF2D40 :                     .not_up:
(2)  277/FFFFFFFFFFFF2D40 : 9178 D060           		sub.w	d0,(RAM_HorScroll+2).w
(2)  278/FFFFFFFFFFFF2D44 : D378 D420           		add.w	d1,(RAM_VerScroll+2).w
(2)  279/FFFFFFFFFFFF2D48 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  280/FFFFFFFFFFFF2D4C : D36E 0008           		add.w	d1,obj_y(a6)
(2)  282/FFFFFFFFFFFF2D50 :                     
(2)  283/FFFFFFFFFFFF2D50 : 3D42 0022           		move.w	d2,obj_anim_num(a6)
(2)  284/FFFFFFFFFFFF2D54 :                     
(2)  285/FFFFFFFFFFFF2D54 :                     ; ----------------------------------------------
(2)  286/FFFFFFFFFFFF2D54 :                     ; Show the object...
(2)  287/FFFFFFFFFFFF2D54 :                     
(2)  288/FFFFFFFFFFFF2D54 : 4A43                		tst.w	d3
(2)  289/FFFFFFFFFFFF2D56 : 6708                		beq.s	.no_anim
(2)  290/FFFFFFFFFFFF2D58 : 41FA 0018           		lea	.anim_data(pc),a0	; Do animation
(2)  291/FFFFFFFFFFFF2D5C : 6100 F354           		bsr	object_Animate
(2)  292/FFFFFFFFFFFF2D60 :                     .no_anim:
(2)  293/FFFFFFFFFFFF2D60 : 42B8 B800           		clr.l	(RAM_TestTouch).w
(2)  294/FFFFFFFFFFFF2D64 : 6100 F3E0           		bsr	object_Touch
(2)  295/FFFFFFFFFFFF2D68 : 4A80                		tst.l	d0
(2)  296/FFFFFFFFFFFF2D6A : 6704                		beq.s	.lel
(2)  297/FFFFFFFFFFFF2D6C : 21C0 B800           		move.l	d0,(RAM_TestTouch).w
(2)  298/FFFFFFFFFFFF2D70 :                     .lel:
(2)  299/FFFFFFFFFFFF2D70 :                     
(2)  310/FFFFFFFFFFFF2D70 : 4E75                		rts
(2)  311/FFFFFFFFFFFF2D72 :                     
(2)  312/FFFFFFFFFFFF2D72 :                     ; ----------------------------------------------
(2)  313/FFFFFFFFFFFF2D72 :                     
(2)  314/FFFFFFFFFFFF2D72 :                     .anim_data:
(2)  315/FFFFFFFFFFFF2D72 : 0008                		dc.w .anim_down-.anim_data
(2)  316/FFFFFFFFFFFF2D74 : 0016                		dc.w .anim_up-.anim_data
(2)  317/FFFFFFFFFFFF2D76 : 0024                		dc.w .anim_right-.anim_data
(2)  318/FFFFFFFFFFFF2D78 : 0032                		dc.w .anim_left-.anim_data
(2)  319/FFFFFFFFFFFF2D7A :                     
(2)  320/FFFFFFFFFFFF2D7A :                     .anim_down:
(2)  321/FFFFFFFFFFFF2D7A : 0008                		dc.w 8
(2)  322/FFFFFFFFFFFF2D7C : 0000 0001 0000      		dc.w 0,1,0,2
         FFFFFFFFFFFF2D82 : 0002             
(2)  323/FFFFFFFFFFFF2D84 : FFFE                		dc.w -2
(2)  324/FFFFFFFFFFFF2D86 :                     		align 2
(2)  325/FFFFFFFFFFFF2D88 :                     .anim_up:
(2)  326/FFFFFFFFFFFF2D88 : 0008                		dc.w 8
(2)  327/FFFFFFFFFFFF2D8A : 0003 0004 0003      		dc.w 3,4,3,5
         FFFFFFFFFFFF2D90 : 0005             
(2)  328/FFFFFFFFFFFF2D92 : FFFE                		dc.w -2
(2)  329/FFFFFFFFFFFF2D94 :                     		align 2
(2)  330/FFFFFFFFFFFF2D96 :                     .anim_right:
(2)  331/FFFFFFFFFFFF2D96 : 0008                		dc.w 8
(2)  332/FFFFFFFFFFFF2D98 : 0006 0007 0006      		dc.w 6,7,6,8
         FFFFFFFFFFFF2D9E : 0008             
(2)  333/FFFFFFFFFFFF2DA0 : FFFE                		dc.w -2
(2)  334/FFFFFFFFFFFF2DA2 :                     		align 2
(2)  335/FFFFFFFFFFFF2DA4 :                     .anim_left:
(2)  336/FFFFFFFFFFFF2DA4 : 0008                		dc.w 8
(2)  337/FFFFFFFFFFFF2DA6 : 0009 000A 0009      		dc.w 9,10,9,11
         FFFFFFFFFFFF2DAC : 000B             
(2)  338/FFFFFFFFFFFF2DAE : FFFE                		dc.w -2
(2)  339/FFFFFFFFFFFF2DB0 :                     		align 2
(2)  340/FFFFFFFFFFFF2DB2 :                     
(2)  341/FFFFFFFFFFFF2DB2 :                     ; --------------------------------------------------
(2)  342/FFFFFFFFFFFF2DB2 :                     ; Test object
(2)  343/FFFFFFFFFFFF2DB2 :                     ; --------------------------------------------------
(2)  344/FFFFFFFFFFFF2DB2 :                     
(2)  345/FFFFFFFFFFFF2DB2 :                     obj_Ball:
(2)  346/FFFFFFFFFFFF2DB2 : 7000                		moveq	#0,d0
(2)  347/FFFFFFFFFFFF2DB4 : 102E 001C           		move.b	obj_index(a6),d0
(2)  348/FFFFFFFFFFFF2DB8 : D040                		add.w	d0,d0
(2)  349/FFFFFFFFFFFF2DBA : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  350/FFFFFFFFFFFF2DBE : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  351/FFFFFFFFFFFF2DC2 :                     ; ----------------------------------------------
(2)  352/FFFFFFFFFFFF2DC2 : 0004                .list:		dc.w .init-.list
(2)  353/FFFFFFFFFFFF2DC4 : 0068                		dc.w .main-.list
(2)  354/FFFFFFFFFFFF2DC6 :                     ; ----------------------------------------------
(2)  355/FFFFFFFFFFFF2DC6 :                     .init:
(2)  356/FFFFFFFFFFFF2DC6 : 522E 001C           		addq.b	#1,obj_index(a6)
(2)  357/FFFFFFFFFFFF2DCA : 6100 F2AE           		bsr	object_ResetAnim	; Init/Reset animation
(2)  358/FFFFFFFFFFFF2DCE : 3D7C 0202 0010      		move.w	#$0202,obj_size_x(a6)
(2)  359/FFFFFFFFFFFF2DD4 : 3D7C 0303 0012      		move.w	#$0303,obj_size_y(a6)
(2)  360/FFFFFFFFFFFF2DDA : 3D7C 0101 0014      		move.w	#$0101,obj_size_z(a6)
(2)  361/FFFFFFFFFFFF2DE0 : 3D7C 0000 0022      		move.w	#0,obj_anim_num(a6)
(2)  362/FFFFFFFFFFFF2DE6 :                     
(2)  363/FFFFFFFFFFFF2DE6 : 3D7C FF80 0004      		move.w	#-$80,obj_x(a6)	; Set Object's X/Y position
(2)  364/FFFFFFFFFFFF2DEC : 3D7C FF80 000C      		move.w	#-$80,obj_z(a6)
(2)  365/FFFFFFFFFFFF2DF2 : 303C 0101           		move.w	#$100+1,d0
(2)  366/FFFFFFFFFFFF2DF6 : 6100 EDD4           		bsr	System_DiceRoll
(2)  367/FFFFFFFFFFFF2DFA : 3800                		move.w	d0,d4
(2)  368/FFFFFFFFFFFF2DFC : 303C 0081           		move.w	#$80+1,d0
(2)  369/FFFFFFFFFFFF2E00 : 6100 EDCA           		bsr	System_DiceRoll
(2)  370/FFFFFFFFFFFF2E04 : E348                		lsl.w	#1,d0
(2)  371/FFFFFFFFFFFF2E06 : E34C                		lsl.w	#1,d4
(2)  372/FFFFFFFFFFFF2E08 : D16E 0004           		add.w	d0,obj_x(a6)
(2)  373/FFFFFFFFFFFF2E0C : D96E 000C           		add.w	d4,obj_z(a6)
(2)  374/FFFFFFFFFFFF2E10 :                     
(2)  375/FFFFFFFFFFFF2E10 : 6100 ED60           		bsr	System_Random
(2)  376/FFFFFFFFFFFF2E14 : 2E38 ED9C           		move.l	(RAM_SysRandom).w,d7
(2)  377/FFFFFFFFFFFF2E18 : E24F                		lsr.w	#1,d7
(2)  378/FFFFFFFFFFFF2E1A : 6504                		bcs.s	.x_random
(2)  379/FFFFFFFFFFFF2E1C : 446E 0016           		neg.w	obj_x_spd(a6)
(2)  380/FFFFFFFFFFFF2E20 :                     .x_random:
(2)  381/FFFFFFFFFFFF2E20 : E24F                		lsr.w	#1,d7
(2)  382/FFFFFFFFFFFF2E22 : 6504                		bcs.s	.y_random
(2)  383/FFFFFFFFFFFF2E24 : 446E 001A           		neg.w	obj_z_spd(a6)
(2)  384/FFFFFFFFFFFF2E28 :                     .y_random:
(2)  385/FFFFFFFFFFFF2E28 : 4E75                		rts
(2)  386/FFFFFFFFFFFF2E2A :                     
(2)  387/FFFFFFFFFFFF2E2A :                     ; ----------------------------------------------
(2)  388/FFFFFFFFFFFF2E2A :                     .main:
(2)  389/FFFFFFFFFFFF2E2A :                     ; 		move.w	#224,d1
(2)  390/FFFFFFFFFFFF2E2A :                     ; 		move.w	#320,d0
(2)  391/FFFFFFFFFFFF2E2A :                     ; 		move.w	obj_x(a6),d2
(2)  392/FFFFFFFFFFFF2E2A :                     ; 		tst.w	d2
(2)  393/FFFFFFFFFFFF2E2A :                     ; 		bpl.s	.x_back
(2)  394/FFFFFFFFFFFF2E2A :                     ; 		neg.w	obj_x_spd(a6)
(2)  395/FFFFFFFFFFFF2E2A :                     ; 		bchg	#0,obj_attr(a6)
(2)  396/FFFFFFFFFFFF2E2A :                     ; .x_back:
(2)  397/FFFFFFFFFFFF2E2A :                     ; 		cmp.w	d0,d2
(2)  398/FFFFFFFFFFFF2E2A :                     ; 		blt.s	.x_foward
(2)  399/FFFFFFFFFFFF2E2A :                     ; 		neg.w	obj_x_spd(a6)
(2)  400/FFFFFFFFFFFF2E2A :                     ; 		bchg	#0,obj_attr(a6)
(2)  401/FFFFFFFFFFFF2E2A :                     ; .x_foward:
(2)  402/FFFFFFFFFFFF2E2A :                     ; 		move.w	d2,obj_x(a6)
(2)  403/FFFFFFFFFFFF2E2A :                     ;
(2)  404/FFFFFFFFFFFF2E2A :                     ; 		move.w	obj_y(a6),d2
(2)  405/FFFFFFFFFFFF2E2A :                     ; 		tst.w	d2
(2)  406/FFFFFFFFFFFF2E2A :                     ; 		bpl.s	.y_back
(2)  407/FFFFFFFFFFFF2E2A :                     ; 		neg.w	obj_y_spd(a6)
(2)  408/FFFFFFFFFFFF2E2A :                     ; .y_back:
(2)  409/FFFFFFFFFFFF2E2A :                     ; 		cmp.w	d1,d2
(2)  410/FFFFFFFFFFFF2E2A :                     ; 		blt.s	.y_foward
(2)  411/FFFFFFFFFFFF2E2A :                     ; 		neg.w	obj_y_spd(a6)
(2)  412/FFFFFFFFFFFF2E2A :                     ; .y_foward:
(2)  413/FFFFFFFFFFFF2E2A :                     ; 		move.w	d2,obj_y(a6)
(2)  414/FFFFFFFFFFFF2E2A :                     ;
(2)  415/FFFFFFFFFFFF2E2A :                     ; 		bsr	object_Speed
(2)  416/FFFFFFFFFFFF2E2A :                     
(2)  417/FFFFFFFFFFFF2E2A :                     ; ----------------------------------------------
(2)  418/FFFFFFFFFFFF2E2A :                     ; Show the object...
(2)  419/FFFFFFFFFFFF2E2A : 41FA 0008           		lea	.anim_data(pc),a0	; Do animation
(2)  420/FFFFFFFFFFFF2E2E : 6100 F282           		bsr	object_Animate
(2)  421/FFFFFFFFFFFF2E32 :                     
(2)  432/FFFFFFFFFFFF2E32 : 4E75                		rts
(2)  433/FFFFFFFFFFFF2E34 :                     ; 		lea	(Map_Sisi),a1
(2)  434/FFFFFFFFFFFF2E34 :                     ; 		moveq	#0,d2
(2)  435/FFFFFFFFFFFF2E34 :                     ; 		move.w	obj_x(a6),d0
(2)  436/FFFFFFFFFFFF2E34 :                     ; 		move.w	obj_y(a6),d1
(2)  437/FFFFFFFFFFFF2E34 :                     ; 		move.b	obj_attr(a6),d2			; <-- Quick attribute bits
(2)  438/FFFFFFFFFFFF2E34 :                     ; 		lsl.w	#8,d2
(2)  439/FFFFFFFFFFFF2E34 :                     ; 		lsl.w	#3,d2				; %000vh000 00000000
(2)  440/FFFFFFFFFFFF2E34 :                     ; 		add.w	#vramLoc_Sisi,d2
(2)  441/FFFFFFFFFFFF2E34 :                     ; 		move.w	obj_frame(a6),d3		; Current frame set by _Animate
(2)  442/FFFFFFFFFFFF2E34 :                     ; 		bra	Video_MakeSprMap
(2)  444/FFFFFFFFFFFF2E34 :                     
(2)  445/FFFFFFFFFFFF2E34 :                     ; ----------------------------------------------
(2)  446/FFFFFFFFFFFF2E34 :                     
(2)  447/FFFFFFFFFFFF2E34 :                     .anim_data:
(2)  448/FFFFFFFFFFFF2E34 : 0002                		dc.w .maind-.anim_data
(2)  449/FFFFFFFFFFFF2E36 :                     .maind:
(2)  450/FFFFFFFFFFFF2E36 : 0008                		dc.w 8
(2)  451/FFFFFFFFFFFF2E38 : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF2E3E : 0001             
(2)  452/FFFFFFFFFFFF2E40 : FFFE                		dc.w -2
(2)  453/FFFFFFFFFFFF2E42 :                     		align 2
(2)  454/FFFFFFFFFFFF2E44 :                     
(2)  455/FFFFFFFFFFFF2E44 :                     ; ====================================================================
(2)  456/FFFFFFFFFFFF2E44 :                     ; ------------------------------------------------------
(2)  457/FFFFFFFFFFFF2E44 :                     ; Subroutines
(2)  458/FFFFFFFFFFFF2E44 :                     ; ------------------------------------------------------
(2)  459/FFFFFFFFFFFF2E44 :                     
(2)  460/FFFFFFFFFFFF2E44 :                     Camera_Update:
(2)  492/FFFFFFFFFFFF2E44 : 4E75                		rts
(2)  493/FFFFFFFFFFFF2E46 :                     
(2)  494/FFFFFFFFFFFF2E46 :                     ; ====================================================================
(2)  495/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  496/FFFFFFFFFFFF2E46 :                     ; Includes for this screen
(2)  497/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  498/FFFFFFFFFFFF2E46 :                     
(2)  499/FFFFFFFFFFFF2E46 :                     ; ====================================================================
(2)  500/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  501/FFFFFFFFFFFF2E46 :                     ; Custom VBlank
(2)  502/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  503/FFFFFFFFFFFF2E46 :                     
(2)  504/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  505/FFFFFFFFFFFF2E46 :                     ; Custom HBlank
(2)  506/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  507/FFFFFFFFFFFF2E46 :                     
(2)  508/FFFFFFFFFFFF2E46 :                     ; ====================================================================
(2)  509/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  510/FFFFFFFFFFFF2E46 :                     ; Small data section
(2)  511/FFFFFFFFFFFF2E46 :                     ; ------------------------------------------------------
(2)  512/FFFFFFFFFFFF2E46 :                     
(2)  513/FFFFFFFFFFFF2E46 :                     str_NewCountr0:
(2)  531/FFFFFFFFFFFF2E46 : 83FF DBF8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  533/FFFFFFFFFFFF2E4A : 00                  		dc.b 0
(2)  534/FFFFFFFFFFFF2E4B :                     		align 2
(2)  535/FFFFFFFFFFFF2E4C :                     
(2)  536/FFFFFFFFFFFF2E4C :                     str_InputMe:
(2)  544/FFFFFFFFFFFF2E4C : 20                  		dc.b " "
(2)  546/FFFFFFFFFFFF2E4D : 00                  		dc.b 0
(2)  547/FFFFFFFFFFFF2E4E :                     		align 2
(2)  548/FFFFFFFFFFFF2E50 :                     
(2)  549/FFFFFFFFFFFF2E50 :                     ; ====================================================================
(2)  550/FFFFFFFFFFFF2E50 :                     
(1)   19/FFFFFFFFFFFF2E50 :                     mcscrn_e:
(1)   19/   5FA50 :                                     dephase
(1)   19/   5FA50 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   19/   5FA50 :                                     align $800
(1)   19/   60000 :                     ; Md_Screen00_e:
(1)   19/   60000 : =$60000              MD_SCREEN04_E label *
(1)   19/   60000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN04",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/   60000 : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   20/   60000 :                                     align $800              ; SCD/CD32X sector align
(1)   20/   60000 : =$60000              MD_SCREEN07 label *
(1)   20/   60000 :                     
(1)   20/   60000 :                     mctopscrn:
(1)   20/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; SCD/32X/CD32X code area
(1)   20/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   20/FFFFFFFFFFFF2C00 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; GEMA SOUND TESTER
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$7                  MAX_SNDPICK		equ 7
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; test 			struct
(2)   19/FFFFFFFFFFFF2C00 :                     ; x_pos			ds.w 1
(2)   20/FFFFFFFFFFFF2C00 :                     ; y_pos			ds.w 1
(2)   21/FFFFFFFFFFFF2C00 :                     ; 			endstuct
(2)   22/FFFFFFFFFFFF2C00 :                     
(2)   23/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   24/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   25/FFFFFFFFFFFF2C00 :                     ; This mode's RAM
(2)   26/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   27/FFFFFFFFFFFF2C00 :                     
(2)   28/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   28/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   28/   60000 :                                     dephase
(2)   28/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   28/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   29/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   30/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   31/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   32/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   33/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   34/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   35/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   36/FFFFFFFFFFFFB868 :                     
(2)   37/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   38/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   39/FFFFFFFFFFFFB86C :                     RAM_GemaArg0		ds.w 1
(2)   40/FFFFFFFFFFFFB86E :                     RAM_GemaArg1		ds.w 1
(2)   41/FFFFFFFFFFFFB870 :                     RAM_GemaArg2		ds.w 1
(2)   42/FFFFFFFFFFFFB872 :                     RAM_GemaArg3		ds.w 1
(2)   43/FFFFFFFFFFFFB874 :                     RAM_GemaArg4		ds.w 1
(2)   44/FFFFFFFFFFFFB876 :                     RAM_GemaArg5		ds.w 1
(2)   45/FFFFFFFFFFFFB878 :                     RAM_GemaArg6		ds.w 1
(2)   46/FFFFFFFFFFFFB87A :                     RAM_ChnlLinks		ds.w 26
(2)   47/FFFFFFFFFFFFB8AE :                     sizeof_thisbuff		ds.l 0
(2)   48/FFFFFFFFFFFFB8B4 :  (MACRO-2)           			endmemory
(2)   48/   600B4 :                     .here:          dephase
(2)   48/   600B4 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   48/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   49/FFFFFFFFFFFF2C00 :                     
(2)   50/FFFFFFFFFFFF2C00 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   51/FFFFFFFFFFFF2C00 :                     
(2)   52/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   53/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   54/FFFFFFFFFFFF2C00 :                     ; Init
(2)   55/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   56/FFFFFFFFFFFF2C00 :                     
(2)   57/FFFFFFFFFFFF2C00 : 6100 DAC6           		bsr	Video_DisplayOff
(2)   58/FFFFFFFFFFFF2C04 : 6100 EF3C           		bsr	System_Default
(2)   59/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   60/FFFFFFFFFFFF2C08 :                     	; Load assets
(2)   61/FFFFFFFFFFFF2C08 :                     
(2)   62/FFFFFFFFFFFF2C08 : 41FA 0432           		lea	file_scrn1_main(pc),a0		; ** LOAD BANK **
(2)   63/FFFFFFFFFFFF2C0C : 6100 F3B6           		bsr	System_SetDataBank
(2)   64/FFFFFFFFFFFF2C10 :                     	; ----------------------------------------------
(2)   65/FFFFFFFFFFFF2C10 : 203C 0020 F910      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   66/FFFFFFFFFFFF2C16 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   67/FFFFFFFFFFFF2C1A : 6100 E342           		bsr	Video_PrintInit
(2)   68/FFFFFFFFFFFF2C1E : 203C 0021 0510      		move.l	#ASCII_FONT_W,d0
(2)   69/FFFFFFFFFFFF2C24 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   70/FFFFFFFFFFFF2C28 : 6100 E324           		bsr	Video_PrintInitW
(2)   71/FFFFFFFFFFFF2C2C : 41F8 DA4E           		lea	(RAM_PaletteFade+$60).w,a0	; Palette line 4:
(2)   72/FFFFFFFFFFFF2C30 : 30FC 0000           		move.w	#$0000,(a0)+			; black (background)
(2)   73/FFFFFFFFFFFF2C34 : 30FC 0EEE           		move.w	#$0EEE,(a0)+			; white
(2)   74/FFFFFFFFFFFF2C38 : 30FC 0888           		move.w	#$0888,(a0)+			; gray
(2)   75/FFFFFFFFFFFF2C3C :                     
(2)   76/FFFFFFFFFFFF2C3C : 41FA 041C           		lea	str_TesterTitle(pc),a0
(2)   77/FFFFFFFFFFFF2C40 : 7001                		moveq	#1,d0
(2)   78/FFFFFFFFFFFF2C42 : 7201                		moveq	#1,d1
(2)   79/FFFFFFFFFFFF2C44 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   80/FFFFFFFFFFFF2C48 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   81/FFFFFFFFFFFF2C4C : 6100 E42C           		bsr	Video_PrintW
(2)   82/FFFFFFFFFFFF2C50 : 41FA 041C           		lea	str_TesterInfo(pc),a0
(2)   83/FFFFFFFFFFFF2C54 : 7001                		moveq	#1,d0
(2)   84/FFFFFFFFFFFF2C56 : 7204                		moveq	#4,d1
(2)   85/FFFFFFFFFFFF2C58 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   86/FFFFFFFFFFFF2C5C : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   87/FFFFFFFFFFFF2C60 : 6100 E32E           		bsr	Video_Print
(2)   88/FFFFFFFFFFFF2C64 : 41FA 04B2           		lea	str_VmInfo(pc),a0
(2)   89/FFFFFFFFFFFF2C68 : 7005                		moveq	#5,d0
(2)   90/FFFFFFFFFFFF2C6A : 720D                		moveq	#13,d1
(2)   91/FFFFFFFFFFFF2C6C : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)   92/FFFFFFFFFFFF2C70 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)   93/FFFFFFFFFFFF2C74 : 6100 E31A           		bsr	Video_Print
(2)   94/FFFFFFFFFFFF2C78 : 6100 0090           		bsr	.show_cursor
(2)   95/FFFFFFFFFFFF2C7C :                     
(2)   96/FFFFFFFFFFFF2C7C :                     	; ----------------------------------------------
(2)   97/FFFFFFFFFFFF2C7C : 6100 D3F8           		bsr	gemaReset				; Load default GEMA sound data
(2)   98/FFFFFFFFFFFF2C80 : 31FC 00D7 B878      		move.w	#215,(RAM_GemaArg6).w
(2)   99/FFFFFFFFFFFF2C86 : 303C 00D7           		move.w	#215,d0
(2)  100/FFFFFFFFFFFF2C8A : 6100 D5CE           		bsr	gemaSetBeats
(2)  101/FFFFFFFFFFFF2C8E :                     ; 		moveq	#1,d0
(2)  102/FFFFFFFFFFFF2C8E :                     ; 		bsr	gemaPlaySeq
(2)  103/FFFFFFFFFFFF2C8E :                     
(2)  104/FFFFFFFFFFFF2C8E :                     	; ----------------------------------------------
(2)  105/FFFFFFFFFFFF2C8E : 6100 00BA           		bsr	.show_me
(2)  106/FFFFFFFFFFFF2C92 : 6100 026C           		bsr	.gema_view
(2)  107/FFFFFFFFFFFF2C96 :                     ; 		bsr	.steal_vars
(2)  108/FFFFFFFFFFFF2C96 : 6100 F346           		bsr	Object_Run
(2)  109/FFFFFFFFFFFF2C9A :                     	; ----------------------------------------------
(2)  110/FFFFFFFFFFFF2C9A : 6100 DA20           		bsr	Video_DisplayOn
(2)  111/FFFFFFFFFFFF2C9E : 6100 E1D4           		bsr	Video_FadeIn_Full
(2)  112/FFFFFFFFFFFF2CA2 :                     
(2)  113/FFFFFFFFFFFF2CA2 :                     ; ====================================================================
(2)  114/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  115/FFFFFFFFFFFF2CA2 :                     ; Loop
(2)  116/FFFFFFFFFFFF2CA2 :                     ; ------------------------------------------------------
(2)  117/FFFFFFFFFFFF2CA2 :                     
(2)  118/FFFFFFFFFFFF2CA2 :                     .loop:
(2)  119/FFFFFFFFFFFF2CA2 : 6100 EB72           		bsr	System_Render
(2)  120/FFFFFFFFFFFF2CA6 : 6162                		bsr	.show_cursor
(2)  121/FFFFFFFFFFFF2CA8 : 6100 0256           		bsr	.gema_view
(2)  122/FFFFFFFFFFFF2CAC :                     
(2)  123/FFFFFFFFFFFF2CAC :                     ; 		bsr	Object_Run
(2)  124/FFFFFFFFFFFF2CAC :                     ; 		lea	str_Info(pc),a0
(2)  125/FFFFFFFFFFFF2CAC :                     ; 		moveq	#31,d0
(2)  126/FFFFFFFFFFFF2CAC :                     ; 		moveq	#2,d1
(2)  127/FFFFFFFFFFFF2CAC :                     ; 		move.w	#DEF_VRAM_FG,d2
(2)  128/FFFFFFFFFFFF2CAC :                     ; 		move.w	#DEF_HSIZE_64,d3
(2)  129/FFFFFFFFFFFF2CAC :                     ; 		bsr	Video_Print
(2)  130/FFFFFFFFFFFF2CAC :                     
(2)  131/FFFFFFFFFFFF2CAC :                     ; 	; Controls
(2)  132/FFFFFFFFFFFF2CAC :                     
(2)  133/FFFFFFFFFFFF2CAC : 4DF8 DD18           		lea	(Controller_1).w,a6
(2)  134/FFFFFFFFFFFF2CB0 : 4BF8 B868           		lea	(RAM_CurrPick).w,a5
(2)  135/FFFFFFFFFFFF2CB4 :                     	; UP/DOWN
(2)  136/FFFFFFFFFFFF2CB4 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  137/FFFFFFFFFFFF2CB8 : 0247 0070           		andi.w	#JoyA+JoyB+JoyC,d7
(2)  138/FFFFFFFFFFFF2CBC : 662A                		bne.s	.n_up
(2)  139/FFFFFFFFFFFF2CBE : 3E2E 0004           		move.w	on_press(a6),d7
(2)  140/FFFFFFFFFFFF2CC2 : 0807 0001           		btst	#bitJoyDown,d7
(2)  141/FFFFFFFFFFFF2CC6 : 670C                		beq.s	.n_down
(2)  142/FFFFFFFFFFFF2CC8 : 5255                		addq.w	#1,(a5)
(2)  143/FFFFFFFFFFFF2CCA : 0C55 0007           		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  144/FFFFFFFFFFFF2CCE : 6F02                		ble.s	.n_downd
(2)  145/FFFFFFFFFFFF2CD0 : 4255                		clr.w	(a5)
(2)  146/FFFFFFFFFFFF2CD2 :                     .n_downd:
(2)  147/FFFFFFFFFFFF2CD2 : 6176                		bsr.s	.show_me
(2)  148/FFFFFFFFFFFF2CD4 :                     .n_down:
(2)  149/FFFFFFFFFFFF2CD4 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  150/FFFFFFFFFFFF2CD8 : 0807 0000           		btst	#bitJoyUp,d7
(2)  151/FFFFFFFFFFFF2CDC : 670A                		beq.s	.n_up
(2)  152/FFFFFFFFFFFF2CDE : 5355                		subq.w	#1,(a5)
(2)  153/FFFFFFFFFFFF2CE0 : 6A04                		bpl.s	.n_ups
(2)  154/FFFFFFFFFFFF2CE2 : 3ABC 0007           		move.w	#MAX_SNDPICK,(a5)
(2)  155/FFFFFFFFFFFF2CE6 :                     .n_ups:
(2)  156/FFFFFFFFFFFF2CE6 : 6162                		bsr.s	.show_me
(2)  157/FFFFFFFFFFFF2CE8 :                     .n_up:
(2)  158/FFFFFFFFFFFF2CE8 : 3E38 B868           		move.w	(RAM_CurrPick).w,d7
(2)  159/FFFFFFFFFFFF2CEC : E54F                		lsl.w	#2,d7
(2)  160/FFFFFFFFFFFF2CEE : 4EBB 706E           		jsr	.jump_list(pc,d7.w)
(2)  161/FFFFFFFFFFFF2CF2 : 4A78 EDB4           		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  162/FFFFFFFFFFFF2CF6 : 6A10                		bpl.s	.n_cbtn
(2)  163/FFFFFFFFFFFF2CF8 : 6100 D50C           		bsr	gemaStopAll
(2)  164/FFFFFFFFFFFF2CFC : 6100 E188           		bsr	Video_FadeOut_Full
(2)  165/FFFFFFFFFFFF2D00 : 31FC 0000 EDB4      		move.w	#0,(RAM_ScreenMode).w	; Return to mode 0
(2)  166/FFFFFFFFFFFF2D06 : 4E75                		rts				; EXIT
(2)  167/FFFFFFFFFFFF2D08 :                     .n_cbtn:
(2)  168/FFFFFFFFFFFF2D08 : 6098                		bra	.loop
(2)  169/FFFFFFFFFFFF2D0A :                     
(2)  170/FFFFFFFFFFFF2D0A :                     ; ------------------------------------------------------
(2)  171/FFFFFFFFFFFF2D0A :                     
(2)  172/FFFFFFFFFFFF2D0A :                     .show_cursor:
(2)  173/FFFFFFFFFFFF2D0A : 3E38 B86A           		move.w	(RAM_LastPick).w,d7
(2)  174/FFFFFFFFFFFF2D0E : BE78 B868           		cmp.w	(RAM_CurrPick).w,d7
(2)  175/FFFFFFFFFFFF2D12 : 671E                		beq.s	.last_pick
(2)  176/FFFFFFFFFFFF2D14 : 41FA 033E           		lea	str_CursorDel(pc),a0
(2)  177/FFFFFFFFFFFF2D18 : 7001                		moveq	#1,d0
(2)  178/FFFFFFFFFFFF2D1A : 7204                		moveq	#4,d1
(2)  179/FFFFFFFFFFFF2D1C : D278 B86A           		add.w	(RAM_LastPick).w,d1
(2)  180/FFFFFFFFFFFF2D20 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  181/FFFFFFFFFFFF2D24 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  182/FFFFFFFFFFFF2D28 : 6100 E266           		bsr	Video_Print
(2)  183/FFFFFFFFFFFF2D2C : 31F8 B868 B86A      		move.w	(RAM_CurrPick).w,(RAM_LastPick).w
(2)  184/FFFFFFFFFFFF2D32 :                     .last_pick:
(2)  185/FFFFFFFFFFFF2D32 : 41FA 031A           		lea	str_Cursor(pc),a0
(2)  186/FFFFFFFFFFFF2D36 : 7001                		moveq	#1,d0
(2)  187/FFFFFFFFFFFF2D38 : 7204                		moveq	#4,d1
(2)  188/FFFFFFFFFFFF2D3A : D278 B868           		add.w	(RAM_CurrPick).w,d1
(2)  189/FFFFFFFFFFFF2D3E : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  190/FFFFFFFFFFFF2D42 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  191/FFFFFFFFFFFF2D46 : 6000 E248           		bra	Video_Print
(2)  192/FFFFFFFFFFFF2D4A :                     
(2)  193/FFFFFFFFFFFF2D4A :                     ; ------------------------------------------------------
(2)  194/FFFFFFFFFFFF2D4A :                     
(2)  195/FFFFFFFFFFFF2D4A :                     .show_me:
(2)  196/FFFFFFFFFFFF2D4A : 41FA 0748           		lea	str_ShowVars(pc),a0
(2)  197/FFFFFFFFFFFF2D4E : 7017                		moveq	#23,d0
(2)  198/FFFFFFFFFFFF2D50 : 7205                		moveq	#5,d1
(2)  199/FFFFFFFFFFFF2D52 : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  200/FFFFFFFFFFFF2D56 : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  201/FFFFFFFFFFFF2D5A : 6000 E234           		bra	Video_Print
(2)  202/FFFFFFFFFFFF2D5E :                     
(2)  203/FFFFFFFFFFFF2D5E :                     ; ------------------------------------------------------
(2)  204/FFFFFFFFFFFF2D5E :                     
(2)  205/FFFFFFFFFFFF2D5E :                     .jump_list:
(2)  206/FFFFFFFFFFFF2D5E : 6000 001E           		bra.w	.nothing
(2)  207/FFFFFFFFFFFF2D62 : 6000 002C           		bra.w	.option_1
(2)  208/FFFFFFFFFFFF2D66 : 6000 00AE           		bra.w	.option_2
(2)  209/FFFFFFFFFFFF2D6A : 6000 00C0           		bra.w	.option_3
(2)  210/FFFFFFFFFFFF2D6E : 6000 00D2           		bra.w	.option_4
(2)  211/FFFFFFFFFFFF2D72 : 6000 00E6           		bra.w	.option_5
(2)  212/FFFFFFFFFFFF2D76 : 6000 00F6           		bra.w	.option_6
(2)  213/FFFFFFFFFFFF2D7A : 6000 0144           		bra.w	.option_7
(2)  214/FFFFFFFFFFFF2D7E :                     
(2)  215/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  216/FFFFFFFFFFFF2D7E :                     ; OPTION 0
(2)  217/FFFFFFFFFFFF2D7E :                     ; ------------------------------------------------------
(2)  218/FFFFFFFFFFFF2D7E :                     
(2)  219/FFFFFFFFFFFF2D7E :                     .nothing:
(2)  220/FFFFFFFFFFFF2D7E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  221/FFFFFFFFFFFF2D82 : 0807 0007           		btst	#bitJoyStart,d7
(2)  222/FFFFFFFFFFFF2D86 : 6706                		beq.s	.no_press
(2)  223/FFFFFFFFFFFF2D88 : 61C0                		bsr.s	.show_me
(2)  224/FFFFFFFFFFFF2D8A : 6000 D420           		bra	gemaTest
(2)  225/FFFFFFFFFFFF2D8E :                     .no_press:
(2)  226/FFFFFFFFFFFF2D8E : 4E75                		rts
(2)  227/FFFFFFFFFFFF2D90 :                     
(2)  228/FFFFFFFFFFFF2D90 :                     ; ------------------------------------------------------
(2)  229/FFFFFFFFFFFF2D90 :                     ; OPTION 1
(2)  230/FFFFFFFFFFFF2D90 :                     ; ------------------------------------------------------
(2)  231/FFFFFFFFFFFF2D90 :                     
(2)  232/FFFFFFFFFFFF2D90 :                     .option_1:
(2)  233/FFFFFFFFFFFF2D90 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  234/FFFFFFFFFFFF2D94 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  235/FFFFFFFFFFFF2D98 : 0807 0007           		btst	#bitJoyStart,d7
(2)  236/FFFFFFFFFFFF2D9C : 671E                		beq.s	.option1_args
(2)  237/FFFFFFFFFFFF2D9E : 301D                		move.w	(a5)+,d0
(2)  238/FFFFFFFFFFFF2DA0 : 321D                		move.w	(a5)+,d1
(2)  239/FFFFFFFFFFFF2DA2 : 341D                		move.w	(a5)+,d2
(2)  240/FFFFFFFFFFFF2DA4 : 6100 D426           		bsr	gemaPlaySeq
(2)  241/FFFFFFFFFFFF2DA8 : 3038 B86E           		move.w	(RAM_GemaArg1).w,d0
(2)  242/FFFFFFFFFFFF2DAC : 3200                		move.w	d0,d1
(2)  243/FFFFFFFFFFFF2DAE : D241                		add.w	d1,d1
(2)  244/FFFFFFFFFFFF2DB0 : 41FA 0120           		lea	.extnal_beats(pc),a0
(2)  245/FFFFFFFFFFFF2DB4 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  246/FFFFFFFFFFFF2DB8 : 6000 D4A0           		bra	gemaSetBeats
(2)  247/FFFFFFFFFFFF2DBC :                     ; 		bra.s	.show_me
(2)  248/FFFFFFFFFFFF2DBC :                     .option1_args:
(2)  249/FFFFFFFFFFFF2DBC : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  250/FFFFFFFFFFFF2DC0 : 3C07                		move.w	d7,d6
(2)  251/FFFFFFFFFFFF2DC2 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(2)  252/FFFFFFFFFFFF2DC6 : 67C6                		beq.s	.no_press
(2)  253/FFFFFFFFFFFF2DC8 : 0807 0004           		btst	#bitJoyB,d7
(2)  254/FFFFFFFFFFFF2DCC : 6704                		beq.s	.d2_opt
(2)  255/FFFFFFFFFFFF2DCE : DAFC 0002           		adda	#2,a5
(2)  256/FFFFFFFFFFFF2DD2 :                     .d2_opt:
(2)  257/FFFFFFFFFFFF2DD2 : 0807 0005           		btst	#bitJoyC,d7
(2)  258/FFFFFFFFFFFF2DD6 : 6704                		beq.s	.d3_opt
(2)  259/FFFFFFFFFFFF2DD8 : DAFC 0004           		adda	#4,a5
(2)  260/FFFFFFFFFFFF2DDC :                     .d3_opt:
(2)  261/FFFFFFFFFFFF2DDC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  262/FFFFFFFFFFFF2DE0 : 0807 0003           		btst	#bitJoyRight,d7
(2)  263/FFFFFFFFFFFF2DE4 : 6706                		beq.s	.op1_right
(2)  264/FFFFFFFFFFFF2DE6 : 5255                		addq.w	#1,(a5)
(2)  265/FFFFFFFFFFFF2DE8 : 6000 FF60           		bra	.show_me
(2)  266/FFFFFFFFFFFF2DEC :                     .op1_right:
(2)  267/FFFFFFFFFFFF2DEC : 0807 0002           		btst	#bitJoyLeft,d7
(2)  268/FFFFFFFFFFFF2DF0 : 6706                		beq.s	.op1_left
(2)  269/FFFFFFFFFFFF2DF2 : 5355                		subq.w	#1,(a5)
(2)  270/FFFFFFFFFFFF2DF4 : 6000 FF54           		bra	.show_me
(2)  271/FFFFFFFFFFFF2DF8 :                     .op1_left:
(2)  272/FFFFFFFFFFFF2DF8 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  273/FFFFFFFFFFFF2DFC : 0807 0000           		btst	#bitJoyUp,d7
(2)  274/FFFFFFFFFFFF2E00 : 6706                		beq.s	.op1_down
(2)  275/FFFFFFFFFFFF2E02 : 5255                		addq.w	#1,(a5)
(2)  276/FFFFFFFFFFFF2E04 : 6000 FF44           		bra	.show_me
(2)  277/FFFFFFFFFFFF2E08 :                     .op1_down:
(2)  278/FFFFFFFFFFFF2E08 : 0807 0001           		btst	#bitJoyDown,d7
(2)  279/FFFFFFFFFFFF2E0C : 6706                		beq.s	.op1_up
(2)  280/FFFFFFFFFFFF2E0E : 5355                		subq.w	#1,(a5)
(2)  281/FFFFFFFFFFFF2E10 : 6000 FF38           		bra	.show_me
(2)  282/FFFFFFFFFFFF2E14 :                     .op1_up:
(2)  283/FFFFFFFFFFFF2E14 :                     
(2)  284/FFFFFFFFFFFF2E14 : 4E75                		rts
(2)  285/FFFFFFFFFFFF2E16 :                     
(2)  286/FFFFFFFFFFFF2E16 :                     ; ------------------------------------------------------
(2)  287/FFFFFFFFFFFF2E16 :                     ; OPTION 2
(2)  288/FFFFFFFFFFFF2E16 :                     ; ------------------------------------------------------
(2)  289/FFFFFFFFFFFF2E16 :                     
(2)  290/FFFFFFFFFFFF2E16 :                     .option_2:
(2)  291/FFFFFFFFFFFF2E16 : 4BF8 B86C           		lea	(RAM_GemaArg0).w,a5
(2)  292/FFFFFFFFFFFF2E1A : 3E2E 0004           		move.w	on_press(a6),d7
(2)  293/FFFFFFFFFFFF2E1E : 0807 0007           		btst	#bitJoyStart,d7
(2)  294/FFFFFFFFFFFF2E22 : 6798                		beq.s	.option1_args
(2)  295/FFFFFFFFFFFF2E24 : 301D                		move.w	(a5)+,d0
(2)  296/FFFFFFFFFFFF2E26 : 321D                		move.w	(a5)+,d1
(2)  297/FFFFFFFFFFFF2E28 : 6000 D3C0           		bra	gemaStopSeq
(2)  298/FFFFFFFFFFFF2E2C :                     
(2)  299/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  300/FFFFFFFFFFFF2E2C :                     ; OPTION 3
(2)  301/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  302/FFFFFFFFFFFF2E2C :                     
(2)  303/FFFFFFFFFFFF2E2C :                     .option_3:
(2)  304/FFFFFFFFFFFF2E2C : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  305/FFFFFFFFFFFF2E30 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  306/FFFFFFFFFFFF2E34 : 0807 0007           		btst	#bitJoyStart,d7
(2)  307/FFFFFFFFFFFF2E38 : 6782                		beq	.option1_args
(2)  308/FFFFFFFFFFFF2E3A : 301D                		move.w	(a5)+,d0
(2)  309/FFFFFFFFFFFF2E3C : 321D                		move.w	(a5)+,d1
(2)  310/FFFFFFFFFFFF2E3E : 6000 D3E2           		bra	gemaFadeSeq
(2)  311/FFFFFFFFFFFF2E42 :                     
(2)  312/FFFFFFFFFFFF2E42 :                     ; ------------------------------------------------------
(2)  313/FFFFFFFFFFFF2E42 :                     ; OPTION 4
(2)  314/FFFFFFFFFFFF2E42 :                     ; ------------------------------------------------------
(2)  315/FFFFFFFFFFFF2E42 :                     
(2)  316/FFFFFFFFFFFF2E42 :                     .option_4:
(2)  317/FFFFFFFFFFFF2E42 : 4BF8 B872           		lea	(RAM_GemaArg3).w,a5
(2)  318/FFFFFFFFFFFF2E46 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  319/FFFFFFFFFFFF2E4A : 0807 0007           		btst	#bitJoyStart,d7
(2)  320/FFFFFFFFFFFF2E4E : 6700 FF6C           		beq	.option1_args
(2)  321/FFFFFFFFFFFF2E52 : 301D                		move.w	(a5)+,d0
(2)  322/FFFFFFFFFFFF2E54 : 321D                		move.w	(a5)+,d1
(2)  323/FFFFFFFFFFFF2E56 : 6000 D3E6           		bra	gemaSetSeqVol
(2)  324/FFFFFFFFFFFF2E5A :                     
(2)  325/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  326/FFFFFFFFFFFF2E5A :                     ; OPTION 5
(2)  327/FFFFFFFFFFFF2E5A :                     ; ------------------------------------------------------
(2)  328/FFFFFFFFFFFF2E5A :                     
(2)  329/FFFFFFFFFFFF2E5A :                     .option_5:
(2)  330/FFFFFFFFFFFF2E5A : 3E2E 0004           		move.w	on_press(a6),d7
(2)  331/FFFFFFFFFFFF2E5E : 0807 0007           		btst	#bitJoyStart,d7
(2)  332/FFFFFFFFFFFF2E62 : 6708                		beq.s	.no_press2
(2)  333/FFFFFFFFFFFF2E64 : 6100 FEE4           		bsr	.show_me
(2)  334/FFFFFFFFFFFF2E68 : 6000 D39C           		bra	gemaStopAll
(2)  335/FFFFFFFFFFFF2E6C :                     .no_press2:
(2)  336/FFFFFFFFFFFF2E6C : 4E75                		rts
(2)  337/FFFFFFFFFFFF2E6E :                     
(2)  338/FFFFFFFFFFFF2E6E :                     ; ------------------------------------------------------
(2)  339/FFFFFFFFFFFF2E6E :                     ; OPTION 6
(2)  340/FFFFFFFFFFFF2E6E :                     ; ------------------------------------------------------
(2)  341/FFFFFFFFFFFF2E6E :                     
(2)  342/FFFFFFFFFFFF2E6E :                     .option_6:
(2)  343/FFFFFFFFFFFF2E6E : 4BF8 B878           		lea	(RAM_GemaArg6).w,a5
(2)  344/FFFFFFFFFFFF2E72 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  345/FFFFFFFFFFFF2E76 : 0247 0040           		andi.w	#JoyA,d7
(2)  346/FFFFFFFFFFFF2E7A : 67F0                		beq.s	.no_press2
(2)  347/FFFFFFFFFFFF2E7C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  348/FFFFFFFFFFFF2E80 : 0807 0003           		btst	#bitJoyRight,d7
(2)  349/FFFFFFFFFFFF2E84 : 6704                		beq.s	.op2_right
(2)  350/FFFFFFFFFFFF2E86 : 5255                		addq.w	#1,(a5)
(2)  351/FFFFFFFFFFFF2E88 : 602C                		bra	.show_me_2
(2)  352/FFFFFFFFFFFF2E8A :                     .op2_right:
(2)  353/FFFFFFFFFFFF2E8A : 0807 0002           		btst	#bitJoyLeft,d7
(2)  354/FFFFFFFFFFFF2E8E : 6704                		beq.s	.op2_left
(2)  355/FFFFFFFFFFFF2E90 : 5355                		subq.w	#1,(a5)
(2)  356/FFFFFFFFFFFF2E92 : 6122                		bsr	.show_me_2
(2)  357/FFFFFFFFFFFF2E94 :                     .op2_left:
(2)  358/FFFFFFFFFFFF2E94 : 3E2E 0002           		move.w	on_hold(a6),d7
(2)  359/FFFFFFFFFFFF2E98 : 0807 0001           		btst	#bitJoyDown,d7
(2)  360/FFFFFFFFFFFF2E9C : 6704                		beq.s	.op2_down
(2)  361/FFFFFFFFFFFF2E9E : 5255                		addq.w	#1,(a5)
(2)  362/FFFFFFFFFFFF2EA0 : 6114                		bsr	.show_me_2
(2)  363/FFFFFFFFFFFF2EA2 :                     .op2_down:
(2)  364/FFFFFFFFFFFF2EA2 : 0807 0000           		btst	#bitJoyUp,d7
(2)  365/FFFFFFFFFFFF2EA6 : 6704                		beq.s	.op2_up
(2)  366/FFFFFFFFFFFF2EA8 : 5355                		subq.w	#1,(a5)
(2)  367/FFFFFFFFFFFF2EAA : 610A                		bsr	.show_me_2
(2)  368/FFFFFFFFFFFF2EAC :                     .op2_up:
(2)  369/FFFFFFFFFFFF2EAC : 3E2E 0004           		move.w	on_press(a6),d7
(2)  370/FFFFFFFFFFFF2EB0 : 0807 0007           		btst	#bitJoyStart,d7
(2)  371/FFFFFFFFFFFF2EB4 : 67B6                		beq.s	.no_press2
(2)  372/FFFFFFFFFFFF2EB6 :                     .show_me_2:
(2)  373/FFFFFFFFFFFF2EB6 : 6100 FE92           		bsr	.show_me
(2)  374/FFFFFFFFFFFF2EBA : 3015                		move.w	(a5),d0
(2)  375/FFFFFFFFFFFF2EBC : 6000 D39C           		bra	gemaSetBeats
(2)  376/FFFFFFFFFFFF2EC0 :                     
(2)  377/FFFFFFFFFFFF2EC0 :                     ; ------------------------------------------------------
(2)  378/FFFFFFFFFFFF2EC0 :                     ; OPTION 7
(2)  379/FFFFFFFFFFFF2EC0 :                     ; ------------------------------------------------------
(2)  380/FFFFFFFFFFFF2EC0 :                     
(2)  381/FFFFFFFFFFFF2EC0 :                     .option_7:
(2)  382/FFFFFFFFFFFF2EC0 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  383/FFFFFFFFFFFF2EC4 : 0807 0007           		btst	#bitJoyStart,d7
(2)  384/FFFFFFFFFFFF2EC8 : 67A2                		beq.s	.no_press2
(2)  385/FFFFFFFFFFFF2ECA : 31FC FFFF EDB4      		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  386/FFFFFFFFFFFF2ED0 : 4E75                		rts
(2)  387/FFFFFFFFFFFF2ED2 :                     
(2)  388/FFFFFFFFFFFF2ED2 :                     ; ------------------------------------------------------
(2)  389/FFFFFFFFFFFF2ED2 :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  390/FFFFFFFFFFFF2ED2 :                     ; ------------------------------------------------------
(2)  391/FFFFFFFFFFFF2ED2 :                     
(2)  392/FFFFFFFFFFFF2ED2 :                     .extnal_beats:
(2)  393/FFFFFFFFFFFF2ED2 : 00C0                	dc.w 192
(2)  394/FFFFFFFFFFFF2ED4 : 00C0                	dc.w 192
(2)  395/FFFFFFFFFFFF2ED6 : 00C0                	dc.w 192
(2)  396/FFFFFFFFFFFF2ED8 : 00C0                	dc.w 192
(2)  397/FFFFFFFFFFFF2EDA : 00D7                	dc.w 215
(2)  398/FFFFFFFFFFFF2EDC : 00B8                	dc.w $00B8
(2)  399/FFFFFFFFFFFF2EDE : 00C0                	dc.w 192
(2)  400/FFFFFFFFFFFF2EE0 : 00C0                	dc.w 192
(2)  401/FFFFFFFFFFFF2EE2 : 00D7                	dc.w 215
(2)  402/FFFFFFFFFFFF2EE4 : 00D7                	dc.w 215
(2)  403/FFFFFFFFFFFF2EE6 : 00D7                	dc.w 215
(2)  404/FFFFFFFFFFFF2EE8 : 00D7                	dc.w 215
(2)  405/FFFFFFFFFFFF2EEA : 00D7                	dc.w 215
(2)  406/FFFFFFFFFFFF2EEC : 00D7                	dc.w 215
(2)  407/FFFFFFFFFFFF2EEE : 00D7                	dc.w 215
(2)  408/FFFFFFFFFFFF2EF0 : 00D7                	dc.w 215
(2)  409/FFFFFFFFFFFF2EF2 : 00D7                	dc.w 215
(2)  410/FFFFFFFFFFFF2EF4 : 00D7                	dc.w 215
(2)  411/FFFFFFFFFFFF2EF6 : 00D7                	dc.w 215
(2)  412/FFFFFFFFFFFF2EF8 : 00D7                	dc.w 215
(2)  413/FFFFFFFFFFFF2EFA : 00D7                	dc.w 215
(2)  414/FFFFFFFFFFFF2EFC : 00D7                	dc.w 215
(2)  415/FFFFFFFFFFFF2EFE : 00D7                	dc.w 215
(2)  416/FFFFFFFFFFFF2F00 :                     
(2)  417/FFFFFFFFFFFF2F00 :                     ; ------------------------------------------------------
(2)  418/FFFFFFFFFFFF2F00 :                     
(2)  419/FFFFFFFFFFFF2F00 :                     .gema_view:
(2)  420/FFFFFFFFFFFF2F00 : 41F9 00A0 1BFE      		lea	(z80_cpu+tblPSG),a0
(2)  421/FFFFFFFFFFFF2F06 : 43F8 B800           		lea	(RAM_GemaCache_PSG),a1
(2)  422/FFFFFFFFFFFF2F0A : 7E02                		moveq	#3-1,d7
(2)  423/FFFFFFFFFFFF2F0C : 6100 0096           		bsr	.copy_me
(2)  424/FFFFFFFFFFFF2F10 : 41F9 00A0 1BC2      		lea	(z80_cpu+tblPSGN),a0
(2)  425/FFFFFFFFFFFF2F16 : 43F8 B80C           		lea	(RAM_GemaCache_PSGN),a1
(2)  426/FFFFFFFFFFFF2F1A : 7E00                		moveq	#1-1,d7
(2)  427/FFFFFFFFFFFF2F1C : 6100 0086           		bsr	.copy_me
(2)  428/FFFFFFFFFFFF2F20 : 41F9 00A0 1A6E      		lea	(z80_cpu+tblFM),a0
(2)  429/FFFFFFFFFFFF2F26 : 43F8 B810           		lea	(RAM_GemaCache_FM),a1
(2)  430/FFFFFFFFFFFF2F2A : 7E05                		moveq	#6-1,d7
(2)  431/FFFFFFFFFFFF2F2C : 6176                		bsr	.copy_me
(2)  432/FFFFFFFFFFFF2F2E : 41F9 00A0 1B00      		lea	(z80_cpu+tblPCM),a0
(2)  433/FFFFFFFFFFFF2F34 : 43F8 B828           		lea	(RAM_GemaCache_PCM),a1
(2)  434/FFFFFFFFFFFF2F38 : 7E07                		moveq	#8-1,d7
(2)  435/FFFFFFFFFFFF2F3A : 6168                		bsr	.copy_me
(2)  436/FFFFFFFFFFFF2F3C : 41F9 00A0 1C48      		lea	(z80_cpu+tblPWM),a0
(2)  437/FFFFFFFFFFFF2F42 : 43F8 B848           		lea	(RAM_GemaCache_PWM),a1
(2)  438/FFFFFFFFFFFF2F46 : 7E07                		moveq	#8-1,d7
(2)  439/FFFFFFFFFFFF2F48 : 615A                		bsr	.copy_me
(2)  440/FFFFFFFFFFFF2F4A :                     
(2)  441/FFFFFFFFFFFF2F4A : 343C C000           		move.w	#DEF_VRAM_FG,d2
(2)  442/FFFFFFFFFFFF2F4E : 363C 0080           		move.w	#DEF_HSIZE_64,d3
(2)  443/FFFFFFFFFFFF2F52 : 47F8 B800           		lea	(RAM_GemaCache_PSG),a3
(2)  444/FFFFFFFFFFFF2F56 : 700A                		moveq	#10,d0
(2)  445/FFFFFFFFFFFF2F58 : 720D                		moveq	#13,d1
(2)  446/FFFFFFFFFFFF2F5A : 7E02                		moveq	#3-1,d7
(2)  447/FFFFFFFFFFFF2F5C : 6100 00BA           		bsr	.show_table
(2)  448/FFFFFFFFFFFF2F60 : 47F8 B810           		lea	(RAM_GemaCache_FM),a3
(2)  449/FFFFFFFFFFFF2F64 : 701A                		moveq	#26,d0
(2)  450/FFFFFFFFFFFF2F66 : 720D                		moveq	#13,d1
(2)  451/FFFFFFFFFFFF2F68 : 7E03                		moveq	#4-1,d7
(2)  452/FFFFFFFFFFFF2F6A : 6162                		bsr	.show_table_fm
(2)  453/FFFFFFFFFFFF2F6C : 47F8 B828           		lea	(RAM_GemaCache_PCM),a3
(2)  454/FFFFFFFFFFFF2F70 : 700A                		moveq	#10,d0
(2)  455/FFFFFFFFFFFF2F72 : 7214                		moveq	#13+7,d1
(2)  456/FFFFFFFFFFFF2F74 : 7E07                		moveq	#8-1,d7
(2)  457/FFFFFFFFFFFF2F76 : 6100 00A0           		bsr	.show_table
(2)  458/FFFFFFFFFFFF2F7A : 47F8 B848           		lea	(RAM_GemaCache_PWM),a3
(2)  459/FFFFFFFFFFFF2F7E : 701A                		moveq	#26,d0
(2)  460/FFFFFFFFFFFF2F80 : 7214                		moveq	#13+7,d1
(2)  461/FFFFFFFFFFFF2F82 : 7E06                		moveq	#7-1,d7
(2)  462/FFFFFFFFFFFF2F84 : 6100 0092           		bsr	.show_table
(2)  463/FFFFFFFFFFFF2F88 :                     
(2)  464/FFFFFFFFFFFF2F88 : 47F8 B820           		lea	(RAM_GemaCache_FM3),a3
(2)  465/FFFFFFFFFFFF2F8C : 701A                		moveq	#26,d0
(2)  466/FFFFFFFFFFFF2F8E : 7211                		moveq	#13+4,d1
(2)  467/FFFFFFFFFFFF2F90 : 7E01                		moveq	#2-1,d7
(2)  468/FFFFFFFFFFFF2F92 : 613A                		bsr	.show_table_fm
(2)  469/FFFFFFFFFFFF2F94 : D6FC 0004           		adda	#4,a3
(2)  470/FFFFFFFFFFFF2F98 :                     
(2)  471/FFFFFFFFFFFF2F98 : 47F8 B80C           		lea	(RAM_GemaCache_PSGN),a3
(2)  472/FFFFFFFFFFFF2F9C : 700A                		moveq	#10,d0
(2)  473/FFFFFFFFFFFF2F9E : 7210                		moveq	#13+3,d1
(2)  474/FFFFFFFFFFFF2FA0 : 7E00                		moveq	#1-1,d7
(2)  475/FFFFFFFFFFFF2FA2 : 6074                		bra	.show_table
(2)  476/FFFFFFFFFFFF2FA4 :                     
(2)  477/FFFFFFFFFFFF2FA4 :                     ; ----------------------------------------------
(2)  478/FFFFFFFFFFFF2FA4 :                     
(2)  479/FFFFFFFFFFFF2FA4 :                     .copy_me:
(2)  480/FFFFFFFFFFFF2FA4 : 7200                		moveq	#0,d1
(2)  481/FFFFFFFFFFFF2FA6 : 6100 D134           		bsr	sndLockZ80
(2)  482/FFFFFFFFFFFF2FAA : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  483/FFFFFFFFFFFF2FAE : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  484/FFFFFFFFFFFF2FB2 : 1010                		move.b	ztbl_Link(a0),d0
(2)  485/FFFFFFFFFFFF2FB4 : 6100 D13A           		bsr	sndUnlockZ80
(2)  486/FFFFFFFFFFFF2FB8 : 8002                		or.b	d2,d0
(2)  487/FFFFFFFFFFFF2FBA : 6602                		bne.s	.link_ok
(2)  488/FFFFFFFFFFFF2FBC : 72FF                		moveq	#-1,d1
(2)  489/FFFFFFFFFFFF2FBE :                     .link_ok:
(2)  490/FFFFFFFFFFFF2FBE : 3281                		move.w	d1,(a1)
(2)  491/FFFFFFFFFFFF2FC0 : D0FC 0018           		adda	#$18,a0
(2)  492/FFFFFFFFFFFF2FC4 : D2FC 0004           		adda	#4,a1
(2)  493/FFFFFFFFFFFF2FC8 : 51CF FFDA           		dbf	d7,.copy_me
(2)  494/FFFFFFFFFFFF2FCC : 4E75                		rts
(2)  495/FFFFFFFFFFFF2FCE :                     
(2)  496/FFFFFFFFFFFF2FCE :                     ; ----------------------------------------------
(2)  497/FFFFFFFFFFFF2FCE :                     
(2)  498/FFFFFFFFFFFF2FCE :                     .show_table_fm:
(2)  499/FFFFFFFFFFFF2FCE : 41F9 FFFF 344C      		lea	(strL_FmOnly),a0
(2)  500/FFFFFFFFFFFF2FD4 : 7C00                		moveq	#0,d6
(2)  501/FFFFFFFFFFFF2FD6 : 7A00                		moveq	#0,d5
(2)  502/FFFFFFFFFFFF2FD8 : 3C13                		move.w	(a3),d6
(2)  503/FFFFFFFFFFFF2FDA : 6A06                		bpl.s	.is_fmgood
(2)  504/FFFFFFFFFFFF2FDC : 6100 DFB2           		bsr	Video_Print
(2)  505/FFFFFFFFFFFF2FE0 : 602A                		bra.s	.from_fmbad
(2)  506/FFFFFFFFFFFF2FE2 :                     .is_fmgood:
(2)  507/FFFFFFFFFFFF2FE2 : 3A06                		move.w	d6,d5
(2)  508/FFFFFFFFFFFF2FE4 : D0FC 0004           		adda	#4,a0
(2)  509/FFFFFFFFFFFF2FE8 : 0246 001F           		andi.w	#%11111,d6
(2)  510/FFFFFFFFFFFF2FEC : E34E                		lsl.w	#1,d6
(2)  511/FFFFFFFFFFFF2FEE : D0C6                		adda	d6,a0
(2)  512/FFFFFFFFFFFF2FF0 : 6100 DF9E           		bsr	Video_Print
(2)  513/FFFFFFFFFFFF2FF4 : 3800                		move.w	d0,d4
(2)  514/FFFFFFFFFFFF2FF6 : 5440                		addq.w	#2,d0
(2)  515/FFFFFFFFFFFF2FF8 : 0245 00E0           		andi.w	#%11100000,d5
(2)  516/FFFFFFFFFFFF2FFC : E84D                		lsr.w	#4,d5
(2)  517/FFFFFFFFFFFF2FFE : 41F9 FFFF 3480      		lea	(strL_LazyVal),a0
(2)  518/FFFFFFFFFFFF3004 : D0C5                		adda	d5,a0
(2)  519/FFFFFFFFFFFF3006 : 6100 DF88           		bsr	Video_Print
(2)  520/FFFFFFFFFFFF300A : 3004                		move.w	d4,d0
(2)  521/FFFFFFFFFFFF300C :                     .from_fmbad:
(2)  522/FFFFFFFFFFFF300C : 5241                		addq.w	#1,d1
(2)  523/FFFFFFFFFFFF300E : D6FC 0004           		adda	#4,a3
(2)  524/FFFFFFFFFFFF3012 : 51CF FFBA           		dbf	d7,.show_table_fm
(2)  525/FFFFFFFFFFFF3016 : 4E75                		rts
(2)  526/FFFFFFFFFFFF3018 :                     
(2)  527/FFFFFFFFFFFF3018 :                     .show_table:
(2)  528/FFFFFFFFFFFF3018 : 41F9 FFFF 3268      		lea	(strL_NoteList),a0
(2)  529/FFFFFFFFFFFF301E : 7C00                		moveq	#0,d6
(2)  530/FFFFFFFFFFFF3020 : 3C13                		move.w	(a3),d6
(2)  531/FFFFFFFFFFFF3022 : 6B08                		bmi.s	.val_bad
(2)  532/FFFFFFFFFFFF3024 : D0FC 0004           		adda	#4,a0
(2)  533/FFFFFFFFFFFF3028 : DC46                		add.w	d6,d6
(2)  534/FFFFFFFFFFFF302A : D0C6                		adda	d6,a0
(2)  535/FFFFFFFFFFFF302C :                     .val_bad:
(2)  536/FFFFFFFFFFFF302C : 6100 DF62           		bsr	Video_Print
(2)  537/FFFFFFFFFFFF3030 : 5241                		addq.w	#1,d1
(2)  538/FFFFFFFFFFFF3032 : D6FC 0004           		adda	#4,a3
(2)  539/FFFFFFFFFFFF3036 : 51CF FFE0           		dbf	d7,.show_table
(2)  540/FFFFFFFFFFFF303A : 4E75                		rts
(2)  541/FFFFFFFFFFFF303C :                     
(2)  542/FFFFFFFFFFFF303C :                     ; ====================================================================
(2)  543/FFFFFFFFFFFF303C :                     ; ------------------------------------------------------
(2)  544/FFFFFFFFFFFF303C :                     ; DATA asset locations
(2)  545/FFFFFFFFFFFF303C :                     ; ------------------------------------------------------
(2)  546/FFFFFFFFFFFF303C :                     
(2)  547/FFFFFFFFFFFF303C :                     file_scrn1_main:
(2)  548/FFFFFFFFFFFF303C : 0006 1000           		dc.l DATA_BANK0
(2)  549/FFFFFFFFFFFF3040 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
         FFFFFFFFFFFF3046 : 494E 2E42 494E 00 
(2)  550/FFFFFFFFFFFF304D :                     		align 2
(2)  551/FFFFFFFFFFFF304E :                     
(2)  552/FFFFFFFFFFFF304E :                     ; ====================================================================
(2)  553/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  554/FFFFFFFFFFFF304E :                     ; Objects
(2)  555/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  556/FFFFFFFFFFFF304E :                     
(2)  557/FFFFFFFFFFFF304E :                     ; ; --------------------------------------------------
(2)  558/FFFFFFFFFFFF304E :                     ; ; Sisi
(2)  559/FFFFFFFFFFFF304E :                     ; ; --------------------------------------------------
(2)  560/FFFFFFFFFFFF304E :                     ;
(2)  561/FFFFFFFFFFFF304E :                     ; Object_Sisi:
(2)  562/FFFFFFFFFFFF304E :                     ; 		moveq	#0,d0
(2)  563/FFFFFFFFFFFF304E :                     ; 		move.b	obj_index(a6),d0
(2)  564/FFFFFFFFFFFF304E :                     ; 		add.w	d0,d0
(2)  565/FFFFFFFFFFFF304E :                     ; 		move.w	.list(pc,d0.w),d1
(2)  566/FFFFFFFFFFFF304E :                     ; 		jmp	.list(pc,d1.w)
(2)  567/FFFFFFFFFFFF304E :                     ; ; ----------------------------------------------
(2)  568/FFFFFFFFFFFF304E :                     ; .list:		dc.w .init-.list
(2)  569/FFFFFFFFFFFF304E :                     ; 		dc.w .main-.list
(2)  570/FFFFFFFFFFFF304E :                     ; ; ----------------------------------------------
(2)  571/FFFFFFFFFFFF304E :                     ; .init:
(2)  572/FFFFFFFFFFFF304E :                     ; 		move.b	#1,obj_index(a6)
(2)  573/FFFFFFFFFFFF304E :                     ; 		clr.w	obj_frame(a6)
(2)  574/FFFFFFFFFFFF304E :                     ; 		bsr	object_ResetAnim
(2)  575/FFFFFFFFFFFF304E :                     ;
(2)  576/FFFFFFFFFFFF304E :                     ; ; ----------------------------------------------
(2)  577/FFFFFFFFFFFF304E :                     ; .main:
(2)  578/FFFFFFFFFFFF304E :                     ; 		moveq	#0,d0
(2)  579/FFFFFFFFFFFF304E :                     ; 		move.w	(RAM_CurrPick).w,d1
(2)  580/FFFFFFFFFFFF304E :                     ; 		lsl.w	#3,d1
(2)  581/FFFFFFFFFFFF304E :                     ; 		addi.w	#$18,d0
(2)  582/FFFFFFFFFFFF304E :                     ; 		addi.w	#$20,d1
(2)  583/FFFFFFFFFFFF304E :                     ; 		move.w	d0,obj_x(a6)
(2)  584/FFFFFFFFFFFF304E :                     ; 		move.w	d1,obj_y(a6)
(2)  585/FFFFFFFFFFFF304E :                     ; .dont_link:
(2)  586/FFFFFFFFFFFF304E :                     ; 		lea	.anim_data(pc),a0
(2)  587/FFFFFFFFFFFF304E :                     ; 		bsr	object_Animate
(2)  588/FFFFFFFFFFFF304E :                     ; 		lea	(objMap_Sisi),a0
(2)  589/FFFFFFFFFFFF304E :                     ; 		move.w	obj_x(a6),d0
(2)  590/FFFFFFFFFFFF304E :                     ; 		move.w	obj_y(a6),d1
(2)  591/FFFFFFFFFFFF304E :                     ; 		move.w	#setVramST_Sisi,d2
(2)  592/FFFFFFFFFFFF304E :                     ; 		or.w	#$800,d2
(2)  593/FFFFFFFFFFFF304E :                     ; 		move.w	obj_frame(a6),d3
(2)  594/FFFFFFFFFFFF304E :                     ; 		bra	Video_MkSprMap
(2)  595/FFFFFFFFFFFF304E :                     ;
(2)  596/FFFFFFFFFFFF304E :                     ; ; ----------------------------------------------
(2)  597/FFFFFFFFFFFF304E :                     ;
(2)  598/FFFFFFFFFFFF304E :                     ; .anim_data:
(2)  599/FFFFFFFFFFFF304E :                     ; 		dc.w .anim_00-.anim_data
(2)  600/FFFFFFFFFFFF304E :                     ; 		dc.w .anim_00-.anim_data
(2)  601/FFFFFFFFFFFF304E :                     ; 		dc.w .anim_00-.anim_data
(2)  602/FFFFFFFFFFFF304E :                     ; 		dc.w .anim_00-.anim_data
(2)  603/FFFFFFFFFFFF304E :                     ; .anim_00:
(2)  604/FFFFFFFFFFFF304E :                     ; 		dc.w 8
(2)  605/FFFFFFFFFFFF304E :                     ; 		dc.w 0,1,2,1
(2)  606/FFFFFFFFFFFF304E :                     ; 		dc.w -2
(2)  607/FFFFFFFFFFFF304E :                     ; 		align 2
(2)  608/FFFFFFFFFFFF304E :                     
(2)  609/FFFFFFFFFFFF304E :                     ; ====================================================================
(2)  610/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  611/FFFFFFFFFFFF304E :                     ; Subroutines
(2)  612/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  613/FFFFFFFFFFFF304E :                     
(2)  614/FFFFFFFFFFFF304E :                     ; ====================================================================
(2)  615/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  616/FFFFFFFFFFFF304E :                     ; Includes for this screen
(2)  617/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  618/FFFFFFFFFFFF304E :                     
(2)  619/FFFFFFFFFFFF304E :                     ; ====================================================================
(2)  620/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  621/FFFFFFFFFFFF304E :                     ; Custom VBlank
(2)  622/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  623/FFFFFFFFFFFF304E :                     
(2)  624/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  625/FFFFFFFFFFFF304E :                     ; Custom HBlank
(2)  626/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  627/FFFFFFFFFFFF304E :                     
(2)  628/FFFFFFFFFFFF304E :                     ; ====================================================================
(2)  629/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  630/FFFFFFFFFFFF304E :                     ; Small data section
(2)  631/FFFFFFFFFFFF304E :                     ; ------------------------------------------------------
(2)  632/FFFFFFFFFFFF304E :                     
(2)  633/FFFFFFFFFFFF304E : 2D2D 3E00           str_Cursor:	dc.b "-->",0
(2)  634/FFFFFFFFFFFF3052 :                     		align 2
(2)  635/FFFFFFFFFFFF3054 : 2020 2000           str_CursorDel:	dc.b "   ",0
(2)  636/FFFFFFFFFFFF3058 :                     		align 2
(2)  637/FFFFFFFFFFFF305A :                     
(2)  638/FFFFFFFFFFFF305A :                     str_TesterTitle:
(2)  639/FFFFFFFFFFFF305A : 4745 4D41 2053      		dc.b "GEMA Sound driver",0
         FFFFFFFFFFFF3060 : 6F75 6E64 2064 
         FFFFFFFFFFFF3066 : 7269 7665 7200    
(2)  640/FFFFFFFFFFFF306C :                     		align 2
(2)  641/FFFFFFFFFFFF306E :                     str_TesterInfo:
(2)  642/FFFFFFFFFFFF306E : 2020 2020 6765      		dc.b "    gemaTest          Indx Seq. Blk.",$0A
         FFFFFFFFFFFF3074 : 6D61 5465 7374 
         FFFFFFFFFFFF307A : 2020 2020 2020 
         FFFFFFFFFFFF3080 : 2020 2020 496E 
         FFFFFFFFFFFF3086 : 6478 2053 6571 
         FFFFFFFFFFFF308C : 2E20 426C 6B2E 0A 
(2)  643/FFFFFFFFFFFF3093 : 2020 2020 6765      		dc.b "    gemaPlaySeq",$0A
         FFFFFFFFFFFF3099 : 6D61 506C 6179 
         FFFFFFFFFFFF309F : 5365 710A          
(2)  644/FFFFFFFFFFFF30A3 : 2020 2020 6765      		dc.b "    gemaStopSeq",$0A
         FFFFFFFFFFFF30A9 : 6D61 5374 6F70 
         FFFFFFFFFFFF30AF : 5365 710A          
(2)  645/FFFFFFFFFFFF30B3 : 2020 2020 6765      		dc.b "    gemaFadeSeq",$0A
         FFFFFFFFFFFF30B9 : 6D61 4661 6465 
         FFFFFFFFFFFF30BF : 5365 710A          
(2)  646/FFFFFFFFFFFF30C3 : 2020 2020 6765      		dc.b "    gemaSetSeqVol",$0A
         FFFFFFFFFFFF30C9 : 6D61 5365 7453 
         FFFFFFFFFFFF30CF : 6571 566F 6C0A    
(2)  647/FFFFFFFFFFFF30D5 : 2020 2020 6765      		dc.b "    gemaStopAll       Beat",$0A
         FFFFFFFFFFFF30DB : 6D61 5374 6F70 
         FFFFFFFFFFFF30E1 : 416C 6C20 2020 
         FFFFFFFFFFFF30E7 : 2020 2020 4265 
         FFFFFFFFFFFF30ED : 6174 0A          
(2)  648/FFFFFFFFFFFF30F0 : 2020 2020 6765      		dc.b "    gemaSetBeats",$0A
         FFFFFFFFFFFF30F6 : 6D61 5365 7442 
         FFFFFFFFFFFF30FC : 6561 7473 0A       
(2)  649/FFFFFFFFFFFF3101 : 2020 2020 4558      		dc.b "    EXIT to Screen 0",$0A
         FFFFFFFFFFFF3107 : 4954 2074 6F20 
         FFFFFFFFFFFF310D : 5363 7265 656E 
         FFFFFFFFFFFF3113 : 2030 0A          
(2)  650/FFFFFFFFFFFF3116 : 00                  		dc.b 0
(2)  651/FFFFFFFFFFFF3117 :                     		align 2
(2)  652/FFFFFFFFFFFF3118 :                     str_VmInfo:
(2)  653/FFFFFFFFFFFF3118 : 5053 4731 2030      		dc.b "PSG1 000         FM1 000",$0A
         FFFFFFFFFFFF311E : 3030 2020 2020 
         FFFFFFFFFFFF3124 : 2020 2020 2046 
         FFFFFFFFFFFF312A : 4D31 2030 3030 0A 
(2)  654/FFFFFFFFFFFF3131 : 5053 4732 2030      		dc.b "PSG2 000         FM2 000",$0A
         FFFFFFFFFFFF3137 : 3030 2020 2020 
         FFFFFFFFFFFF313D : 2020 2020 2046 
         FFFFFFFFFFFF3143 : 4D32 2030 3030 0A 
(2)  655/FFFFFFFFFFFF314A : 5053 4733 2030      		dc.b "PSG3 000         FM4 000",$0A
         FFFFFFFFFFFF3150 : 3030 2020 2020 
         FFFFFFFFFFFF3156 : 2020 2020 2046 
         FFFFFFFFFFFF315C : 4D34 2030 3030 0A 
(2)  656/FFFFFFFFFFFF3163 : 5053 474E 2030      		dc.b "PSGN 000         FM5 000",$0A
         FFFFFFFFFFFF3169 : 3030 2020 2020 
         FFFFFFFFFFFF316F : 2020 2020 2046 
         FFFFFFFFFFFF3175 : 4D35 2030 3030 0A 
(2)  657/FFFFFFFFFFFF317C : 2020 2020 2020      		dc.b "                 FM3 000",$0A
         FFFFFFFFFFFF3182 : 2020 2020 2020 
         FFFFFFFFFFFF3188 : 2020 2020 2046 
         FFFFFFFFFFFF318E : 4D33 2030 3030 0A 
(2)  658/FFFFFFFFFFFF3195 : 2020 2020 2020      		dc.b "                 FM6 000",$0A
         FFFFFFFFFFFF319B : 2020 2020 2020 
         FFFFFFFFFFFF31A1 : 2020 2020 2046 
         FFFFFFFFFFFF31A7 : 4D36 2030 3030 0A 
(2)  659/FFFFFFFFFFFF31AE : 0A                  		dc.b $0A
(2)  660/FFFFFFFFFFFF31AF : 5043 4D31 2030      		dc.b "PCM1 000        PWM1 000",$0A
         FFFFFFFFFFFF31B5 : 3030 2020 2020 
         FFFFFFFFFFFF31BB : 2020 2020 5057 
         FFFFFFFFFFFF31C1 : 4D31 2030 3030 0A 
(2)  661/FFFFFFFFFFFF31C8 : 5043 4D32 2030      		dc.b "PCM2 000        PWM2 000",$0A
         FFFFFFFFFFFF31CE : 3030 2020 2020 
         FFFFFFFFFFFF31D4 : 2020 2020 5057 
         FFFFFFFFFFFF31DA : 4D32 2030 3030 0A 
(2)  662/FFFFFFFFFFFF31E1 : 5043 4D33 2030      		dc.b "PCM3 000        PWM3 000",$0A
         FFFFFFFFFFFF31E7 : 3030 2020 2020 
         FFFFFFFFFFFF31ED : 2020 2020 5057 
         FFFFFFFFFFFF31F3 : 4D33 2030 3030 0A 
(2)  663/FFFFFFFFFFFF31FA : 5043 4D34 2030      		dc.b "PCM4 000        PWM4 000",$0A
         FFFFFFFFFFFF3200 : 3030 2020 2020 
         FFFFFFFFFFFF3206 : 2020 2020 5057 
         FFFFFFFFFFFF320C : 4D34 2030 3030 0A 
(2)  664/FFFFFFFFFFFF3213 : 5043 4D35 2030      		dc.b "PCM5 000        PWM5 000",$0A
         FFFFFFFFFFFF3219 : 3030 2020 2020 
         FFFFFFFFFFFF321F : 2020 2020 5057 
         FFFFFFFFFFFF3225 : 4D35 2030 3030 0A 
(2)  665/FFFFFFFFFFFF322C : 5043 4D36 2030      		dc.b "PCM6 000        PWM6 000",$0A
         FFFFFFFFFFFF3232 : 3030 2020 2020 
         FFFFFFFFFFFF3238 : 2020 2020 5057 
         FFFFFFFFFFFF323E : 4D36 2030 3030 0A 
(2)  666/FFFFFFFFFFFF3245 : 5043 4D37 2030      		dc.b "PCM7 000        PWM7 000",$0A
         FFFFFFFFFFFF324B : 3030 2020 2020 
         FFFFFFFFFFFF3251 : 2020 2020 5057 
         FFFFFFFFFFFF3257 : 4D37 2030 3030 0A 
(2)  667/FFFFFFFFFFFF325E : 5043 4D38 2030      		dc.b "PCM8 000";PWM8 000 00 00",$0A
         FFFFFFFFFFFF3264 : 3030             
(2)  668/FFFFFFFFFFFF3266 : 00                  		dc.b 0
(2)  669/FFFFFFFFFFFF3267 :                     		align 2
(2)  670/FFFFFFFFFFFF3268 :                     
(2)  671/FFFFFFFFFFFF3268 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  672/FFFFFFFFFFFF326C : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
         FFFFFFFFFFFF3272 : 3000 442D 3000 
         FFFFFFFFFFFF3278 : 4423 3000 452D 
         FFFFFFFFFFFF327E : 3000 462D 3000 
         FFFFFFFFFFFF3284 : 4623 3000 472D 
         FFFFFFFFFFFF328A : 3000 4723 3000 
         FFFFFFFFFFFF3290 : 412D 3000 4123 
         FFFFFFFFFFFF3296 : 3000 422D 3000    
(2)  673/FFFFFFFFFFFF329C : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
         FFFFFFFFFFFF32A2 : 3100 442D 3100 
         FFFFFFFFFFFF32A8 : 4423 3100 452D 
         FFFFFFFFFFFF32AE : 3100 462D 3100 
         FFFFFFFFFFFF32B4 : 4623 3100 472D 
         FFFFFFFFFFFF32BA : 3100 4723 3100 
         FFFFFFFFFFFF32C0 : 412D 3100 4123 
         FFFFFFFFFFFF32C6 : 3100 422D 3100    
(2)  674/FFFFFFFFFFFF32CC : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
         FFFFFFFFFFFF32D2 : 3200 442D 3200 
         FFFFFFFFFFFF32D8 : 4423 3200 452D 
         FFFFFFFFFFFF32DE : 3200 462D 3200 
         FFFFFFFFFFFF32E4 : 4623 3200 472D 
         FFFFFFFFFFFF32EA : 3200 4723 3200 
         FFFFFFFFFFFF32F0 : 412D 3200 4123 
         FFFFFFFFFFFF32F6 : 3200 422D 3200    
(2)  675/FFFFFFFFFFFF32FC : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
         FFFFFFFFFFFF3302 : 3300 442D 3300 
         FFFFFFFFFFFF3308 : 4423 3300 452D 
         FFFFFFFFFFFF330E : 3300 462D 3300 
         FFFFFFFFFFFF3314 : 4623 3300 472D 
         FFFFFFFFFFFF331A : 3300 4723 3300 
         FFFFFFFFFFFF3320 : 412D 3300 4123 
         FFFFFFFFFFFF3326 : 3300 422D 3300    
(2)  676/FFFFFFFFFFFF332C : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
         FFFFFFFFFFFF3332 : 3400 442D 3400 
         FFFFFFFFFFFF3338 : 4423 3400 452D 
         FFFFFFFFFFFF333E : 3400 462D 3400 
         FFFFFFFFFFFF3344 : 4623 3400 472D 
         FFFFFFFFFFFF334A : 3400 4723 3400 
         FFFFFFFFFFFF3350 : 412D 3400 4123 
         FFFFFFFFFFFF3356 : 3400 422D 3400    
(2)  677/FFFFFFFFFFFF335C : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
         FFFFFFFFFFFF3362 : 3500 442D 3500 
         FFFFFFFFFFFF3368 : 4423 3500 452D 
         FFFFFFFFFFFF336E : 3500 462D 3500 
         FFFFFFFFFFFF3374 : 4623 3500 472D 
         FFFFFFFFFFFF337A : 3500 4723 3500 
         FFFFFFFFFFFF3380 : 412D 3500 4123 
         FFFFFFFFFFFF3386 : 3500 422D 3500    
(2)  678/FFFFFFFFFFFF338C : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
         FFFFFFFFFFFF3392 : 3600 442D 3600 
         FFFFFFFFFFFF3398 : 4423 3600 452D 
         FFFFFFFFFFFF339E : 3600 462D 3600 
         FFFFFFFFFFFF33A4 : 4623 3600 472D 
         FFFFFFFFFFFF33AA : 3600 4723 3600 
         FFFFFFFFFFFF33B0 : 412D 3600 4123 
         FFFFFFFFFFFF33B6 : 3600 422D 3600    
(2)  679/FFFFFFFFFFFF33BC : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
         FFFFFFFFFFFF33C2 : 3700 442D 3700 
         FFFFFFFFFFFF33C8 : 4423 3700 452D 
         FFFFFFFFFFFF33CE : 3700 462D 3700 
         FFFFFFFFFFFF33D4 : 4623 3700 472D 
         FFFFFFFFFFFF33DA : 3700 4723 3700 
         FFFFFFFFFFFF33E0 : 412D 3700 4123 
         FFFFFFFFFFFF33E6 : 3700 422D 3700    
(2)  680/FFFFFFFFFFFF33EC : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
         FFFFFFFFFFFF33F2 : 3800 442D 3800 
         FFFFFFFFFFFF33F8 : 4423 3800 452D 
         FFFFFFFFFFFF33FE : 3800 462D 3800 
         FFFFFFFFFFFF3404 : 4623 3800 472D 
         FFFFFFFFFFFF340A : 3800 4723 3800 
         FFFFFFFFFFFF3410 : 412D 3800 4123 
         FFFFFFFFFFFF3416 : 3800 422D 3800    
(2)  681/FFFFFFFFFFFF341C : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
         FFFFFFFFFFFF3422 : 3900 442D 3900 
         FFFFFFFFFFFF3428 : 4423 3900 452D 
         FFFFFFFFFFFF342E : 3900 462D 3900 
         FFFFFFFFFFFF3434 : 4623 3900 472D 
         FFFFFFFFFFFF343A : 3900 4723 3900 
         FFFFFFFFFFFF3440 : 412D 3900 4123 
         FFFFFFFFFFFF3446 : 3900 422D 3900    
(2)  682/FFFFFFFFFFFF344C : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  683/FFFFFFFFFFFF3450 : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
         FFFFFFFFFFFF3456 : 2000 442D 2000 
         FFFFFFFFFFFF345C : 4423 2000 452D 
         FFFFFFFFFFFF3462 : 2000 462D 2000 
         FFFFFFFFFFFF3468 : 4623 2000 472D 
         FFFFFFFFFFFF346E : 2000 4723 2000 
         FFFFFFFFFFFF3474 : 412D 2000 4123 
         FFFFFFFFFFFF347A : 2000 422D 2000    
(2)  684/FFFFFFFFFFFF3480 : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
         FFFFFFFFFFFF3486 : 3300 3400 3500 
         FFFFFFFFFFFF348C : 3600 3700 3800 
         FFFFFFFFFFFF3492 : 3900             
(2)  685/FFFFFFFFFFFF3494 :                     
(2)  686/FFFFFFFFFFFF3494 :                     str_ShowVars:
(2)  687/FFFFFFFFFFFF3494 : 81FF B86C           		dc.l pstr_mem(1,RAM_GemaArg0)
(2)  688/FFFFFFFFFFFF3498 : 20                  		dc.b " "
(2)  689/FFFFFFFFFFFF3499 : 81FF B86E           		dc.l pstr_mem(1,RAM_GemaArg1)
(2)  690/FFFFFFFFFFFF349D : 20                  		dc.b " "
(2)  691/FFFFFFFFFFFF349E : 81FF B870           		dc.l pstr_mem(1,RAM_GemaArg2)
(2)  692/FFFFFFFFFFFF34A2 : 0A0A                		dc.b $0A,$0A
(2)  693/FFFFFFFFFFFF34A4 : 81FF B872           		dc.l pstr_mem(1,RAM_GemaArg3)
(2)  694/FFFFFFFFFFFF34A8 : 20                  		dc.b " "
(2)  695/FFFFFFFFFFFF34A9 : 81FF B874           		dc.l pstr_mem(1,RAM_GemaArg4)
(2)  696/FFFFFFFFFFFF34AD : 20                  		dc.b " "
(2)  697/FFFFFFFFFFFF34AE : 81FF B876           		dc.l pstr_mem(1,RAM_GemaArg5)
(2)  698/FFFFFFFFFFFF34B2 : 0A0A 0A             		dc.b $0A,$0A,$0A
(2)  699/FFFFFFFFFFFF34B5 : 81FF B878           		dc.l pstr_mem(1,RAM_GemaArg6)
(2)  700/FFFFFFFFFFFF34B9 : 00                  		dc.b 0
(2)  701/FFFFFFFFFFFF34BA :                     		align 2
(2)  702/FFFFFFFFFFFF34BC :                     str_Info:
(2)  703/FFFFFFFFFFFF34BC : 83FF DBF8           		dc.l pstr_mem(3,RAM_Framecount)
(2)  704/FFFFFFFFFFFF34C0 : 00                  		dc.b 0
(2)  705/FFFFFFFFFFFF34C1 :                     		align 2
(2)  706/FFFFFFFFFFFF34C2 :                     
(1)   20/FFFFFFFFFFFF34C2 :                     mcscrn_e:
(1)   20/   608C2 :                                     dephase
(1)   20/   608C2 :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)   20/   608C2 :                                     align $800
(1)   20/   61000 :                     ; Md_Screen00_e:
(1)   20/   61000 : =$61000              MD_SCREEN07_E label *
(1)   20/   61000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   21/   61000 :                     
     378/   61000 :                     
     379/   61000 :                     ; ====================================================================
     380/   61000 :                     ; ----------------------------------------------------------------
     381/   61000 :                     ; DATA BLOCK (banks)
     382/   61000 :                     ; ----------------------------------------------------------------
     383/   61000 :                     
     384/   61000 :                     		include "game/incl_data.asm"
(1)    1/   61000 :                     ; ===========================================================================
(1)    2/   61000 :                     ; ----------------------------------------------------------------
(1)    3/   61000 :                     ; 68K DATA BANKS
(1)    4/   61000 :                     ;
(1)    5/   61000 :                     ; Size limits:
(1)    6/   61000 :                     ;  $40000 for SegaCD's Word-RAM **compatible to all**
(1)    7/   61000 :                     ;  $80000 for Sega-Mapper(SSF2) bank
(1)    8/   61000 :                     ; $100000 for 32X Cartridge
(1)    9/   61000 :                     ; All 4MB for Genesis/Pico
(1)   10/   61000 :                     ;
(1)   11/   61000 :                     ; SCD/CD32:
(1)   12/   61000 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/   61000 :                     ;
(1)   14/   61000 :                     ; MACRO Usage:
(1)   15/   61000 :                     ;	data_dset LABEL_START
(1)   16/   61000 :                     ;	; your data
(1)   17/   61000 :                     ;	data_dend LABEL_END
(1)   18/   61000 :                     ; ----------------------------------------------------------------
(1)   19/   61000 :                     ; - For including VDP graphics:
(1)   20/   61000 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/   61000 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/   61000 :                     ;
(1)   23/   61000 :                     ; - For the SVDP graphics:
(1)   24/   61000 :                     ;
(1)   25/   61000 :                     ; 	mars_VramStart Label_test			; Start label
(1)   26/   61000 :                     ; example_0:
(1)   27/   61000 :                     ; 	include "your_svdp_graphics.bin"
(1)   28/   61000 :                     ; 	align 4						; Don't forget align by 4
(1)   29/   61000 :                     ; example_1:
(1)   30/   61000 :                     ; 	include "more_svdp.bin"
(1)   31/   61000 :                     ;	align 4
(1)   32/   61000 :                     ;	mars_VramEnd Label_end				; End label
(1)   33/   61000 :                     ; ----------------------------------------------------------------
(1)   34/   61000 :                     
(1)   35/   61000 :                     ; --------------------------------------------------------
(1)   36/   61000 :                     ; EXAMPLE INCLUDE
(1)   37/   61000 :                     ; --------------------------------------------------------
(1)   38/   61000 :                     ; 	data_dset DATA_BANKEXMPL
(1)   39/   61000 :                     ; 	; ------------------------------------------------
(1)   40/   61000 :                     ; 		include "your_data.asm"		; GEMA: Track data
(1)   41/   61000 :                     ; 		include "etc_stuff.asm"
(1)   42/   61000 :                     ; 	; ------------------------------------------------
(1)   43/   61000 :                     ; 	data_dend DATA_BANKEXMPL_e
(1)   44/   61000 :                     
(1)   45/   61000 :                     ; ============================================================
(1)   46/   61000 :                     ; --------------------------------------------------------
(1)   47/   61000 :                     ; MAIN bank
(1)   48/   61000 :                     ; --------------------------------------------------------
(1)   49/   61000 :                     
(1)   50/   61000 : (MACRO)              	data_dset DATA_BANK0
(1)   50/   61000 :                                     align $800
(1)   50/   61000 :                     ; MCD_DBANK0:
(1)   50/   61000 : =$61000              DATA_BANK0 label *
(1)   50/  200000 :                                     phase sysmcd_wram
(1)   50/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   51/  200000 :                     	; ------------------------------------------------
(1)   52/  200000 :                     		include "sound/tracks.asm"		; GEMA user sound data
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; -------------------------------------------------------------------
(2)    3/  200000 :                     ; GEMA/Nikona Track data
(2)    4/  200000 :                     ; -------------------------------------------------------------------
(2)    5/  200000 :                     
(2)    6/  200000 :                     MainGemaSeqList:
(2)    7/  200000 : (MACRO)              		gemaTrk 0,2,gtrk_Test
(2)    7/  200000 : 0220 0004                   dc.l ((0&$01)<<31)|((2&$7F)<<24)|(GTRK_TEST&$FFFFFF)
(2)    8/  200004 :                     ; ----------------------------------------------------
(2)    9/  200004 :                     gtrk_Test:
(2)   10/  200004 : (MACRO)              		gemaHead .blk,.pat,.ins,10
(2)   10/  200004 : 000A                        dc.w 10
(2)   10/  200006 : 0020 0012                   dc.l .BLK
(2)   10/  20000A : 0020 0025                   dc.l .PAT
(2)   10/  20000E : 0020 2581                   dc.l .INS
(2)   11/  200012 :                     .blk:		binclude "sound/tracks/mirror_blk.bin"
(2)   12/  200025 :                     .pat:		binclude "sound/tracks/mirror_patt.bin"
(2)   13/  202581 :                     .ins:
(2)   14/  202581 : (MACRO)              		gInsDac +11,DacIns_Timpani,0
(2)   14/  202581 : C00B 20AB                   dc.b $C0|0,+11,((DACINS_TIMPANI>>16)&$FF),((DACINS_TIMPANI>>8)&$FF)
(2)   14/  202585 : F500 0000                   dc.b DACINS_TIMPANI&$FF,0,0,0
(2)   15/  202589 : (MACRO)              		gInsNull
(2)   15/  202589 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   15/  20258D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   16/  202591 : (MACRO)              		gInsNull
(2)   16/  202591 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   16/  202595 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   17/  202599 : (MACRO)              		gInsDac +22,DacIns_Snare,0
(2)   17/  202599 : C016 209C                   dc.b $C0|0,+22,((DACINS_SNARE>>16)&$FF),((DACINS_SNARE>>8)&$FF)
(2)   17/  20259D : F300 0000                   dc.b DACINS_SNARE&$FF,0,0,0
(2)   18/  2025A1 : (MACRO)              		gInsDac 0,DacIns_Kick,0
(2)   18/  2025A1 : C000 2098                   dc.b $C0|0,0,((DACINS_KICK>>16)&$FF),((DACINS_KICK>>8)&$FF)
(2)   18/  2025A5 : 3D00 0000                   dc.b DACINS_KICK&$FF,0,0,0
(2)   19/  2025A9 : (MACRO)              		gInsFm +12,FmIns_Hats_1
(2)   19/  2025A9 : A00C 202A                   dc.b $A0,+12,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   19/  2025AD : A900 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   20/  2025B1 : (MACRO)              		gInsFm +12,FmIns_Hats_1
(2)   20/  2025B1 : A00C 202A                   dc.b $A0,+12,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   20/  2025B5 : A900 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   21/  2025B9 : (MACRO)              		gInsDac +11,DacIns_Kick,0
(2)   21/  2025B9 : C00B 2098                   dc.b $C0|0,+11,((DACINS_KICK>>16)&$FF),((DACINS_KICK>>8)&$FF)
(2)   21/  2025BD : 3D00 0000                   dc.b DACINS_KICK&$FF,0,0,0
(2)   22/  2025C1 : (MACRO)              		gInsFm -24,FmIns_Bass_Groove_1
(2)   22/  2025C1 : A0E8 2027                   dc.b $A0,-24,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)   22/  2025C5 : A900 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)   23/  2025C9 : (MACRO)              		gInsFm -12,FmIns_Trumpet_1
(2)   23/  2025C9 : A0F4 202D                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   23/  2025CD : 2900 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   24/  2025D1 : (MACRO)              		gInsDac +11,DacIns_Kick,0
(2)   24/  2025D1 : C00B 2098                   dc.b $C0|0,+11,((DACINS_KICK>>16)&$FF),((DACINS_KICK>>8)&$FF)
(2)   24/  2025D5 : 3D00 0000                   dc.b DACINS_KICK&$FF,0,0,0
(2)   25/  2025D9 : (MACRO)              		gInsPsg 0,$20,$20,$00,$00,$04,0
(2)   25/  2025D9 : 8000 2020                   dc.b $80,0,$20,$20
(2)   25/  2025DD : 0000 0400                   dc.b $00,$00,$04,0
(2)   26/  2025E1 : (MACRO)              		gInsFm -12,FmIns_Vibraphone_1
(2)   26/  2025E1 : A0F4 202A                   dc.b $A0,-12,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(2)   26/  2025E5 : 0900 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(2)   27/  2025E9 : (MACRO)              		gInsFm -12,FmIns_Flaute_1
(2)   27/  2025E9 : A0F4 2029                   dc.b $A0,-12,((FMINS_FLAUTE_1>>16)&$FF),((FMINS_FLAUTE_1>>8)&$FF)
(2)   27/  2025ED : E900 0000                   dc.b FMINS_FLAUTE_1&$FF,$00,$00,$00
(2)   28/  2025F1 : (MACRO)              		gInsFm +12,FmIns_Hats_1
(2)   28/  2025F1 : A00C 202A                   dc.b $A0,+12,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   28/  2025F5 : A900 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   29/  2025F9 : (MACRO)              		gInsFm -36,FmIns_Brass_7
(2)   29/  2025F9 : A0DC 202E                   dc.b $A0,-36,((FMINS_BRASS_7>>16)&$FF),((FMINS_BRASS_7>>8)&$FF)
(2)   29/  2025FD : 0900 0000                   dc.b FMINS_BRASS_7&$FF,$00,$00,$00
(2)   30/  202601 : (MACRO)              		gInsFm -12,FmIns_Bell_mid36
(2)   30/  202601 : A0F4 202A                   dc.b $A0,-12,((FMINS_BELL_MID36>>16)&$FF),((FMINS_BELL_MID36>>8)&$FF)
(2)   30/  202605 : C900 0000                   dc.b FMINS_BELL_MID36&$FF,$00,$00,$00
(2)   31/  202609 :                     
(2)   32/  202609 :                     ; ===========================================================================
(2)   33/  202609 :                     ; -------------------------------------------------------------------
(2)   34/  202609 :                     ; GEMA/Nikona FM instruments
(2)   35/  202609 :                     ; -------------------------------------------------------------------
(2)   36/  202609 :                     
(2)   37/  202609 :                     ; -----------------------------------------------------------
(2)   38/  202609 :                     ; Normal FM Instruments
(2)   39/  202609 :                     ; -----------------------------------------------------------
(2)   40/  202609 :                     
(2)   41/  202609 :                     FmIns_Bass_big_81:
(2)   42/  202609 :                     		binclude "sound/instr/fm/bin/bass_big_82.bin"
(2)   43/  202629 :                     FmIns_Bass_big_110:
(2)   44/  202629 :                     		binclude "sound/instr/fm/bin/bass_big_110.bin"
(2)   45/  202649 :                     FmIns_Bass_big_114:
(2)   46/  202649 :                     		binclude "sound/instr/fm/bin/bass_big_114.bin"
(2)   47/  202669 :                     FmIns_Bass_big_122:
(2)   48/  202669 :                     		binclude "sound/instr/fm/bin/bass_big_122.bin"
(2)   49/  202689 :                     FmIns_Bass_cave_47:
(2)   50/  202689 :                     		binclude "sound/instr/fm/bin/bass_cave_47.bin"
(2)   51/  2026A9 :                     FmIns_Bass_club_108:
(2)   52/  2026A9 :                     		binclude "sound/instr/fm/bin/bass_club_108.bin"
(2)   53/  2026C9 :                     FmIns_Bass_foot_75:
(2)   54/  2026C9 :                     		binclude "sound/instr/fm/bin/bass_foot_75.bin"
(2)   55/  2026E9 :                     FmIns_Bass_gem_26:
(2)   56/  2026E9 :                     		binclude "sound/instr/fm/bin/bass_gem_26.bin"
(2)   57/  202709 :                     FmIns_Bass_groove_119:
(2)   58/  202709 :                     		binclude "sound/instr/fm/bin/bass_groove_119.bin"
(2)   59/  202729 :                     FmIns_Bass_heavy_107:
(2)   60/  202729 :                     		binclude "sound/instr/fm/bin/bass_heavy_107.bin"
(2)   61/  202749 :                     FmIns_Bass_heavy_118:
(2)   62/  202749 :                     		binclude "sound/instr/fm/bin/bass_heavy_118.bin"
(2)   63/  202769 :                     FmIns_Bass_loud_117:
(2)   64/  202769 :                     		binclude "sound/instr/fm/bin/bass_loud_117.bin"
(2)   65/  202789 :                     FmIns_bass_low_46:
(2)   66/  202789 :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)   67/  2027A9 :                     FmIns_Bass_Groove_1:
(2)   68/  2027A9 :                     		binclude "sound/instr/fm/bin/bass_groove_1.bin"
(2)   69/  2027C9 :                     FmIns_bass_low_81:
(2)   70/  2027C9 :                     		binclude "sound/instr/fm/bin/bass_low_81.bin"
(2)   71/  2027E9 :                     FmIns_bass_low_103:
(2)   72/  2027E9 :                     		binclude "sound/instr/fm/bin/bass_low_103.bin"
(2)   73/  202809 :                     FmIns_bass_low_106:
(2)   74/  202809 :                     		binclude "sound/instr/fm/bin/bass_low_106.bin"
(2)   75/  202829 :                     FmIns_bass_low_126:
(2)   76/  202829 :                     		binclude "sound/instr/fm/bin/bass_low_126.bin"
(2)   77/  202849 :                     FmIns_bass_mid_19:
(2)   78/  202849 :                     		binclude "sound/instr/fm/bin/bass_mid_19.bin"
(2)   79/  202869 :                     FmIns_bass_mid_80:
(2)   80/  202869 :                     		binclude "sound/instr/fm/bin/bass_mid_80.bin"
(2)   81/  202889 :                     FmIns_bass_mid_111:
(2)   82/  202889 :                     		binclude "sound/instr/fm/bin/bass_mid_111.bin"
(2)   83/  2028A9 :                     FmIns_bass_power_123:
(2)   84/  2028A9 :                     		binclude "sound/instr/fm/bin/bass_power_123.bin"
(2)   85/  2028C9 :                     FmIns_bass_silent_53:
(2)   86/  2028C9 :                     		binclude "sound/instr/fm/bin/bass_silent_53.bin"
(2)   87/  2028E9 :                     FmIns_bass_slap_10:
(2)   88/  2028E9 :                     		binclude "sound/instr/fm/bin/bass_slap_10.bin"
(2)   89/  202909 :                     FmIns_bass_slap_105:
(2)   90/  202909 :                     		binclude "sound/instr/fm/bin/bass_slap_105.bin"
(2)   91/  202929 :                     FmIns_bass_synth_60:
(2)   92/  202929 :                     		binclude "sound/instr/fm/bin/bass_synth_60.bin"
(2)   93/  202949 :                     FmIns_bass_synth_61:
(2)   94/  202949 :                     		binclude "sound/instr/fm/bin/bass_synth_61.bin"
(2)   95/  202969 :                     FmIns_bass_synth_72:
(2)   96/  202969 :                     		binclude "sound/instr/fm/bin/bass_synth_72.bin"
(2)   97/  202989 :                     FmIns_bass_synth_73:
(2)   98/  202989 :                     		binclude "sound/instr/fm/bin/bass_synth_73.bin"
(2)   99/  2029A9 :                     FmIns_bass_vlow_74:
(2)  100/  2029A9 :                     		binclude "sound/instr/fm/bin/bass_vlow_74.bin"
(2)  101/  2029C9 :                     
(2)  102/  2029C9 :                     FmIns_Organ_drawbar:
(2)  103/  2029C9 :                     		binclude "sound/instr/fm/bin/organ_drawbar.bin"
(2)  104/  2029E9 :                     FmIns_Flaute_1:
(2)  105/  2029E9 :                     		binclude "sound/instr/fm/bin/flaute_1.bin"
(2)  106/  202A09 :                     FmIns_Vibraphone_1:
(2)  107/  202A09 :                     		binclude "sound/instr/fm/bin/vibraphone_1.bin"
(2)  108/  202A29 :                     FmIns_Vibraphone_2:
(2)  109/  202A29 :                     		binclude "sound/instr/fm/bin/vibraphone_2.bin"
(2)  110/  202A49 :                     FmIns_Xylophone:
(2)  111/  202A49 :                     		binclude "sound/instr/fm/bin/xylophone2_43.bin"
(2)  112/  202A69 :                     
(2)  113/  202A69 :                     FmIns_Bass_low81:
(2)  114/  202A69 :                     		binclude "sound/instr/fm/bin/bass_low_46.bin"
(2)  115/  202A89 :                     FmIns_Trumpet_15:
(2)  116/  202A89 :                     		binclude "sound/instr/fm/bin/trumpet_27.bin"
(2)  117/  202AA9 :                     
(2)  118/  202AA9 :                     FmIns_Hats_1:
(2)  119/  202AA9 :                     		binclude "sound/instr/fm/bin/hats_96.bin"
(2)  120/  202AC9 :                     
(2)  121/  202AC9 :                     FmIns_Bell_mid36:
(2)  122/  202AC9 :                     		binclude "sound/instr/fm/bin/bell_mid_36.bin"
(2)  123/  202AE9 :                     
(2)  124/  202AE9 :                     ; -----------------------------------------------------------
(2)  125/  202AE9 :                     ; Special FM3 Instruments
(2)  126/  202AE9 :                     ; -----------------------------------------------------------
(2)  127/  202AE9 :                     
(2)  128/  202AE9 :                     FmSpIns_clack_1:
(2)  129/  202AE9 :                     		binclude "sound/instr/fm/bin/fm3_clack_1.bin"
(2)  130/  202B11 :                     FmSpIns_cowbell_h:
(2)  131/  202B11 :                     		binclude "sound/instr/fm/bin/fm3_cowbell_h.bin"
(2)  132/  202B39 :                     FmSpIns_cowbell_l:
(2)  133/  202B39 :                     		binclude "sound/instr/fm/bin/fm3_cowbell_l.bin"
(2)  134/  202B61 :                     FmSpIns_hats_hq:
(2)  135/  202B61 :                     		binclude "sound/instr/fm/bin/fm3_hats_hq.bin"
(2)  136/  202B89 :                     FmSpIns_sfx_alien:
(2)  137/  202B89 :                     		binclude "sound/instr/fm/bin/fm3_sfx_alien.bin"
(2)  138/  202BB1 :                     FmSpIns_sfx_knckbuzz:
(2)  139/  202BB1 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knckbuzz.bin"
(2)  140/  202BD9 :                     FmSpIns_sfx_knock_h:
(2)  141/  202BD9 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_h.bin"
(2)  142/  202C01 :                     FmSpIns_sfx_knock_l:
(2)  143/  202C01 :                     		binclude "sound/instr/fm/bin/fm3_sfx_knock_l.bin"
(2)  144/  202C29 :                     FmSpIns_sfx_laser:
(2)  145/  202C29 :                     		binclude "sound/instr/fm/bin/fm3_sfx_laser.bin"
(2)  146/  202C51 :                     
(2)  147/  202C51 :                     ; ====================================================================
(2)  148/  202C51 :                     
(2)  149/  202C51 :                     ; FM3 Special
(2)  150/  202C51 :                     FmIns_Sp_OpenHat:
(2)  151/  202C51 :                     		binclude "sound/instr/fm/gsx/fm3_openhat.gsx",$2478,$28
(2)  152/  202C79 :                     FmIns_Sp_ClosedHat:
(2)  153/  202C79 :                     		binclude "sound/instr/fm/gsx/fm3_closedhat.gsx",$2478,$28
(2)  154/  202CA1 :                     FmIns_Sp_Cowbell:
(2)  155/  202CA1 :                     		binclude "sound/instr/fm/gsx/fm3_cowbell.gsx",$2478,$28
(2)  156/  202CC9 :                     FmIns_Drums_Kick1:
(2)  157/  202CC9 :                     		binclude "sound/instr/fm/gsx/drum_kick_gem.gsx",$2478,$20
(2)  158/  202CE9 :                     FmIns_Piano_Aqua:
(2)  159/  202CE9 :                     		binclude "sound/instr/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  160/  202D09 :                     FmIns_HBeat_tom:
(2)  161/  202D09 :                     		binclude "sound/instr/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  162/  202D29 :                     FmIns_Trumpet_1:
(2)  163/  202D29 :                     		binclude "sound/instr/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  164/  202D49 :                     FmIns_Bass_duck:
(2)  165/  202D49 :                     		binclude "sound/instr/fm/gsx/bass_duck.gsx",$2478,$20
(2)  166/  202D69 :                     FmIns_ClosedHat:
(2)  167/  202D69 :                     		binclude "sound/instr/fm/gsx/hats_closed.gsx",$2478,$20
(2)  168/  202D89 :                     FmIns_Trumpet_carnival:
(2)  169/  202D89 :                     		binclude "sound/instr/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(2)  170/  202DA9 :                     FmIns_Bass_club:
(2)  171/  202DA9 :                     		binclude "sound/instr/fm/gsx/OLD_bass_club.gsx",$2478,$20
(2)  172/  202DC9 :                     FmIns_Bass_groove_2:
(2)  173/  202DC9 :                     		binclude "sound/instr/fm/gsx/bass_groove_2.gsx",$2478,$20
(2)  174/  202DE9 :                     FmIns_PSynth_plus:
(2)  175/  202DE9 :                     		binclude "sound/instr/fm/gsx/psynth_plus.gsx",$2478,$20
(2)  176/  202E09 :                     
(2)  177/  202E09 :                     FmIns_Brass_7:
(2)  178/  202E09 :                     		binclude "sound/instr/fm/gsx/brass_7.gsx",$2478,$20
(2)  179/  202E29 :                     
(2)  180/  202E29 :                     ; ===========================================================================
(2)  181/  202E29 :                     ; -------------------------------------------------------------------
(2)  182/  202E29 :                     ; GEMA/Nikona DAC samples
(2)  183/  202E29 :                     ;
(2)  184/  202E29 :                     ; 16000hz base
(2)  185/  202E29 :                     ; -------------------------------------------------------------------
(2)  186/  202E29 :                     
(2)  187/  202E29 : (MACRO)              		gSmplData DacIns_Arena_01,"sound/instr/smpl/arena_01.wav",0
(2)  187/  202E29 : =$202E29             DACINS_ARENA_01    label *
(2)  187/  202E29 : E622 00                     dc.b ((DACINS_ARENA_01_e-DACINS_ARENA_01_s)&$FF),(((DACINS_ARENA_01_e-DACINS_ARENA_01_s)>>8)&$FF),(((DACINS_ARENA_01_e-DACINS_ARENA_01_s)>>16)&$FF)
(2)  187/  202E2C : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  187/  202E2F :                     DACINS_ARENA_01_s:
(2)  187/  202E2F :                             binclude "sound/instr/smpl/arena_01.wav",$2C
(2)  187/  205115 :                     DACINS_ARENA_01_e:
(2)  188/  205115 : (MACRO)              		gSmplData DacIns_Arena_02,"sound/instr/smpl/arena_02.wav",0
(2)  188/  205115 : =$205115             DACINS_ARENA_02    label *
(2)  188/  205115 : A423 00                     dc.b ((DACINS_ARENA_02_e-DACINS_ARENA_02_s)&$FF),(((DACINS_ARENA_02_e-DACINS_ARENA_02_s)>>8)&$FF),(((DACINS_ARENA_02_e-DACINS_ARENA_02_s)>>16)&$FF)
(2)  188/  205118 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  188/  20511B :                     DACINS_ARENA_02_s:
(2)  188/  20511B :                             binclude "sound/instr/smpl/arena_02.wav",$2C
(2)  188/  2074BF :                     DACINS_ARENA_02_e:
(2)  189/  2074BF : (MACRO)              		gSmplData DacIns_Arena_03,"sound/instr/smpl/arena_03.wav",0
(2)  189/  2074BF : =$2074BF             DACINS_ARENA_03    label *
(2)  189/  2074BF : 7823 00                     dc.b ((DACINS_ARENA_03_e-DACINS_ARENA_03_s)&$FF),(((DACINS_ARENA_03_e-DACINS_ARENA_03_s)>>8)&$FF),(((DACINS_ARENA_03_e-DACINS_ARENA_03_s)>>16)&$FF)
(2)  189/  2074C2 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  189/  2074C5 :                     DACINS_ARENA_03_s:
(2)  189/  2074C5 :                             binclude "sound/instr/smpl/arena_03.wav",$2C
(2)  189/  20983D :                     DACINS_ARENA_03_e:
(2)  190/  20983D : (MACRO)              		gSmplData DacIns_Kick,"sound/instr/smpl/kick.wav",0
(2)  190/  20983D : =$20983D             DACINS_KICK    label *
(2)  190/  20983D : B004 00                     dc.b ((DACINS_KICK_e-DACINS_KICK_s)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>8)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>16)&$FF)
(2)  190/  209840 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  190/  209843 :                     DACINS_KICK_s:
(2)  190/  209843 :                             binclude "sound/instr/smpl/kick.wav",$2C
(2)  190/  209CF3 :                     DACINS_KICK_e:
(2)  191/  209CF3 : (MACRO)              		gSmplData DacIns_Snare,"sound/instr/smpl/snare.wav",0
(2)  191/  209CF3 : =$209CF3             DACINS_SNARE    label *
(2)  191/  209CF3 : FC0E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)
(2)  191/  209CF6 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  191/  209CF9 :                     DACINS_SNARE_s:
(2)  191/  209CF9 :                             binclude "sound/instr/smpl/snare.wav",$2C
(2)  191/  20ABF5 :                     DACINS_SNARE_e:
(2)  192/  20ABF5 : (MACRO)              		gSmplData DacIns_Timpani,"sound/instr/smpl/timpani.wav",0
(2)  192/  20ABF5 : =$20ABF5             DACINS_TIMPANI    label *
(2)  192/  20ABF5 : D018 00                     dc.b ((DACINS_TIMPANI_e-DACINS_TIMPANI_s)&$FF),(((DACINS_TIMPANI_e-DACINS_TIMPANI_s)>>8)&$FF),(((DACINS_TIMPANI_e-DACINS_TIMPANI_s)>>16)&$FF)
(2)  192/  20ABF8 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  192/  20ABFB :                     DACINS_TIMPANI_s:
(2)  192/  20ABFB :                             binclude "sound/instr/smpl/timpani.wav",$2C
(2)  192/  20C4CB :                     DACINS_TIMPANI_e:
(2)  193/  20C4CB : (MACRO)              		gSmplData DacIns_wegot_kick,"sound/instr/smpl/wegot_kick.wav",0
(2)  193/  20C4CB : =$20C4CB             DACINS_WEGOT_KICK    label *
(2)  193/  20C4CB : 7407 00                     dc.b ((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>8)&$FF),(((DACINS_WEGOT_KICK_e-DACINS_WEGOT_KICK_s)>>16)&$FF)
(2)  193/  20C4CE : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  193/  20C4D1 :                     DACINS_WEGOT_KICK_s:
(2)  193/  20C4D1 :                             binclude "sound/instr/smpl/wegot_kick.wav",$2C
(2)  193/  20CC45 :                     DACINS_WEGOT_KICK_e:
(2)  194/  20CC45 : (MACRO)              		gSmplData DacIns_wegot_crash,"sound/instr/smpl/wegot_crash.wav",0
(2)  194/  20CC45 : =$20CC45             DACINS_WEGOT_CRASH    label *
(2)  194/  20CC45 : C42C 00                     dc.b ((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>8)&$FF),(((DACINS_WEGOT_CRASH_e-DACINS_WEGOT_CRASH_s)>>16)&$FF)
(2)  194/  20CC48 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)
(2)  194/  20CC4B :                     DACINS_WEGOT_CRASH_s:
(2)  194/  20CC4B :                             binclude "sound/instr/smpl/wegot_crash.wav",$2C
(2)  194/  20F90F :                     DACINS_WEGOT_CRASH_e:
(2)  195/  20F90F :                     
(1)   53/  20F90F :                     		include "game/data/bank_main.asm"
(2)    1/  20F90F :                     ; ===========================================================================
(2)    2/  20F90F :                     ; ----------------------------------------------------------------
(2)    3/  20F90F :                     ; BANK data
(2)    4/  20F90F :                     ; ----------------------------------------------------------------
(2)    5/  20F90F :                     
(2)    6/  20F90F : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/  20F90F :                     
(2)    6/  20F90F :                                     align 2
(2)    6/  20F910 : =$20F910             ASCII_FONT        label *
(2)    6/  20F910 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/  210510 :                                     align 2
(2)    6/  210510 :                     
(2)    7/  210510 : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/  210510 :                     
(2)    7/  210510 :                                     align 2
(2)    7/  210510 : =$210510             ASCII_FONT_W        label *
(2)    7/  210510 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/  211D10 :                                     align 2
(2)    7/  211D10 :                     
(2)    8/  211D10 : (MACRO)              		binclude_dma_e	Art_TESTBG,Art_TESTBG_e,"game/data/md/maps/test/art.bin"
(2)    8/  211D10 :                     
(2)    8/  211D10 :                                     align 2
(2)    8/  211D10 : =$211D10             ART_TESTBG        label *
(2)    8/  211D10 :                                     binclude "game/data/md/maps/test/art.bin"
(2)    8/  21A330 : =$21A330             ART_TESTBG_E          label *
(2)    8/  21A330 :                                     align 2
(2)    8/  21A330 :                     
(2)    9/  21A330 : (MACRO)              		binclude_dma_e	Art_TESTBG2,Art_TESTBG2_e,"game/data/md/maps/test2/art.bin"
(2)    9/  21A330 :                     
(2)    9/  21A330 :                                     align 2
(2)    9/  21A330 : =$21A330             ART_TESTBG2        label *
(2)    9/  21A330 :                                     binclude "game/data/md/maps/test2/art.bin"
(2)    9/  223BB0 : =$223BB0             ART_TESTBG2_E          label *
(2)    9/  223BB0 :                                     align 2
(2)    9/  223BB0 :                     
(2)   10/  223BB0 :                     
(2)   11/  223BB0 : (MACRO)              		binclude_dma	Art_Haruna,"game/data/md/sprites/haruna/art.bin"
(2)   11/  223BB0 :                     
(2)   11/  223BB0 :                                     align 2
(2)   11/  223BB0 : =$223BB0             ART_HARUNA        label *
(2)   11/  223BB0 :                                     binclude "game/data/md/sprites/haruna/art.bin"
(2)   11/  226A30 :                                     align 2
(2)   11/  226A30 :                     
(2)   12/  226A30 : (MACRO)              		binclude_dma_e	Art_Sisi,Art_Sisi_e,"game/data/md/sprites/sisi/art.bin"
(2)   12/  226A30 :                     
(2)   12/  226A30 :                                     align 2
(2)   12/  226A30 : =$226A30             ART_SISI        label *
(2)   12/  226A30 :                                     binclude "game/data/md/sprites/sisi/art.bin"
(2)   12/  226FB0 : =$226FB0             ART_SISI_E          label *
(2)   12/  226FB0 :                                     align 2
(2)   12/  226FB0 :                     
(2)   13/  226FB0 :                     
(2)   14/  226FB0 :                     ; ----------------------------------------------------------------
(2)   15/  226FB0 :                     ; Everything else...
(2)   16/  226FB0 :                     ; ----------------------------------------------------------------
(2)   17/  226FB0 :                     
(2)   18/  226FB0 :                     Pal_Haruna:	binclude "game/data/md/sprites/haruna/pal.bin"
(2)   19/  226FD0 :                     		align 2
(2)   20/  226FD0 :                     Map_Haruna:	binclude "game/data/md/sprites/haruna/map.bin"
(2)   21/  227180 :                     		align 2
(2)   22/  227180 :                     Plc_Haruna:	binclude "game/data/md/sprites/haruna/plc.bin"
(2)   23/  227210 :                     		align 2
(2)   24/  227210 :                     
(2)   25/  227210 :                     Pal_Sisi:	binclude "game/data/md/sprites/sisi/pal.bin"
(2)   26/  227230 :                     		align 2
(2)   27/  227230 :                     Map_Sisi:	binclude "game/data/md/sprites/sisi/map.bin"
(2)   28/  227274 :                     		align 2
(2)   29/  227274 :                     
(2)   30/  227274 :                     Pal_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   31/  227294 :                     		align 2
(2)   32/  227294 :                     Map_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   33/  227B54 :                     		align 2
(2)   34/  227B54 :                     Pal_TESTBG2:	binclude "game/data/md/maps/test2/pal.bin"
(2)   35/  227B74 :                     		align 2
(2)   36/  227B74 :                     Map_TESTBG2:	binclude "game/data/md/maps/test2/map.bin"
(2)   37/  228CF4 :                     		align 2
(2)   38/  228CF4 :                     
(1)   54/  228CF4 :                     	; ------------------------------------------------
(1)   55/  228CF4 : (MACRO)              	data_dend DATA_BANK0_e
(1)   55/  228CF4 : =$28CF4              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   55/  228CF4 :                     
(1)   55/  228CF4 :                     
(1)   55/   89CF4 :                                     dephase
(1)   55/   89CF4 :                     
(1)   55/   89CF4 : =$89CF4              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   55/   89CF4 : =$8A000              mpadlbl := (mlastpos&$FFF800)+$800
(1)   55/   89CF4 :  (MACRO-2)                           rompad mpadlbl
(1)   55/   89CF4 : =$30C                .this_sz := MPADLBL - *
(1)   55/   89CF4 : 0000 0000 0000                              dc.b [.this_sz]0
            89CFA : 0000 0000 0000 
            89D00 : 0000 0000 0000 
            89D06 : 0000 0000 0000 
            89D0C : 0000 0000 0000 
            89D12 : 0000 0000 0000 
            89D18 : 0000 0000 0000 
            89D1E : 0000 0000 0000 
            89D24 : 0000 0000 0000 
            89D2A : 0000 0000 0000 
            89D30 : 0000 0000 0000 
            89D36 : 0000 0000 0000 
            89D3C : 0000 0000 0000 
            89D42 : 0000 0000 0000 
            89D48 : 0000 0000 0000 
            89D4E : 0000 0000 0000 
            89D54 : 0000 0000 0000 
            89D5A : 0000 0000 0000 
            89D60 : 0000 0000 0000 
            89D66 : 0000 0000 0000 
            89D6C : 0000 0000 0000 
            89D72 : 0000 0000 0000 
            89D78 : 0000 0000 0000 
            89D7E : 0000 0000 0000 
            89D84 : 0000 0000 0000 
            89D8A : 0000 0000 0000 
            89D90 : 0000 0000 0000 
            89D96 : 0000 0000 0000 
            89D9C : 0000 0000 0000 
            89DA2 : 0000 0000 0000 
            89DA8 : 0000 0000 0000 
            89DAE : 0000 0000 0000 
            89DB4 : 0000 0000 0000 
            89DBA : 0000 0000 0000 
            89DC0 : 0000 0000 0000 
            89DC6 : 0000 0000 0000 
            89DCC : 0000 0000 0000 
            89DD2 : 0000 0000 0000 
            89DD8 : 0000 0000 0000 
            89DDE : 0000 0000 0000 
            89DE4 : 0000 0000 0000 
            89DEA : 0000 0000 0000 
            89DF0 : 0000 0000 0000 
            89DF6 : 0000 0000 0000 
            89DFC : 0000 0000 0000 
            89E02 : 0000 0000 0000 
            89E08 : 0000 0000 0000 
            89E0E : 0000 0000 0000 
            89E14 : 0000 0000 0000 
            89E1A : 0000 0000 0000 
            89E20 : 0000 0000 0000 
            89E26 : 0000 0000 0000 
            89E2C : 0000 0000 0000 
            89E32 : 0000 0000 0000 
            89E38 : 0000 0000 0000 
            89E3E : 0000 0000 0000 
            89E44 : 0000 0000 0000 
            89E4A : 0000 0000 0000 
            89E50 : 0000 0000 0000 
            89E56 : 0000 0000 0000 
            89E5C : 0000 0000 0000 
            89E62 : 0000 0000 0000 
            89E68 : 0000 0000 0000 
            89E6E : 0000 0000 0000 
            89E74 : 0000 0000 0000 
            89E7A : 0000 0000 0000 
            89E80 : 0000 0000 0000 
            89E86 : 0000 0000 0000 
            89E8C : 0000 0000 0000 
            89E92 : 0000 0000 0000 
            89E98 : 0000 0000 0000 
            89E9E : 0000 0000 0000 
            89EA4 : 0000 0000 0000 
            89EAA : 0000 0000 0000 
            89EB0 : 0000 0000 0000 
            89EB6 : 0000 0000 0000 
            89EBC : 0000 0000 0000 
            89EC2 : 0000 0000 0000 
            89EC8 : 0000 0000 0000 
            89ECE : 0000 0000 0000 
            89ED4 : 0000 0000 0000 
            89EDA : 0000 0000 0000 
            89EE0 : 0000 0000 0000 
            89EE6 : 0000 0000 0000 
            89EEC : 0000 0000 0000 
            89EF2 : 0000 0000 0000 
            89EF8 : 0000 0000 0000 
            89EFE : 0000 0000 0000 
            89F04 : 0000 0000 0000 
            89F0A : 0000 0000 0000 
            89F10 : 0000 0000 0000 
            89F16 : 0000 0000 0000 
            89F1C : 0000 0000 0000 
            89F22 : 0000 0000 0000 
            89F28 : 0000 0000 0000 
            89F2E : 0000 0000 0000 
            89F34 : 0000 0000 0000 
            89F3A : 0000 0000 0000 
            89F40 : 0000 0000 0000 
            89F46 : 0000 0000 0000 
            89F4C : 0000 0000 0000 
            89F52 : 0000 0000 0000 
            89F58 : 0000 0000 0000 
            89F5E : 0000 0000 0000 
            89F64 : 0000 0000 0000 
            89F6A : 0000 0000 0000 
            89F70 : 0000 0000 0000 
            89F76 : 0000 0000 0000 
            89F7C : 0000 0000 0000 
            89F82 : 0000 0000 0000 
            89F88 : 0000 0000 0000 
            89F8E : 0000 0000 0000 
            89F94 : 0000 0000 0000 
            89F9A : 0000 0000 0000 
            89FA0 : 0000 0000 0000 
            89FA6 : 0000 0000 0000 
            89FAC : 0000 0000 0000 
            89FB2 : 0000 0000 0000 
            89FB8 : 0000 0000 0000 
            89FBE : 0000 0000 0000 
            89FC4 : 0000 0000 0000 
            89FCA : 0000 0000 0000 
            89FD0 : 0000 0000 0000 
            89FD6 : 0000 0000 0000 
            89FDC : 0000 0000 0000 
            89FE2 : 0000 0000 0000 
            89FE8 : 0000 0000 0000 
            89FEE : 0000 0000 0000 
            89FF4 : 0000 0000 0000 
            89FFA : 0000 0000 0000    
(1)   55/   8A000 : =$8A000              DATA_BANK0_E label *  ; <-- CD/CD32X ONLY
(1)   55/   8A000 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   56/   8A000 :                     
(1)   57/   8A000 :                     ; ============================================================
(1)   58/   8A000 :                     ; --------------------------------------------------------
(1)   59/   8A000 :                     ; 32X stuff only
(1)   60/   8A000 :                     ; --------------------------------------------------------
(1)   61/   8A000 :                     
(1)   62/   8A000 : (MACRO)              	data_dset DATA_BANK1
(1)   62/   8A000 :                                     align $800
(1)   62/   8A000 :                     ; MCD_DBANK0:
(1)   62/   8A000 : =$8A000              DATA_BANK1 label *
(1)   62/  200000 :                                     phase sysmcd_wram
(1)   62/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   63/  200000 :                     	; ------------------------------------------------
(1)   64/  200000 :                     		include "game/data/bank_mars.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data
(2)    4/  200000 :                     ; ----------------------------------------------------------------
(2)    5/  200000 :                     
(2)    6/  200000 :                     PalMars_Test:
(2)    7/  200000 :                     		binclude "game/data/mars/maps/test/pal.bin"
(2)    8/  200180 :                     		align 2
(2)    9/  200180 :                     MapMars_Test:
(2)   10/  200180 :                     		binclude "game/data/mars/maps/test/map.bin"
(2)   11/  200580 :                     		align 2
(2)   12/  200580 :                     PalMars_Haruna:
(2)   13/  200580 :                     		binclude "game/data/mars/textures/haruna_pal.bin"
(2)   14/  2005A0 :                     		align 2
(2)   15/  2005A0 :                     PalMars_Sisi:
(2)   16/  2005A0 :                     		binclude "game/data/mars/sprites/sisi/pal.bin"
(2)   17/  2005C0 :                     		align 8
(2)   18/  2005C0 :                     
(2)   19/  2005C0 :                     ; ----------------------------------------------------
(2)   20/  2005C0 :                     
(2)   21/  2005C0 :                     PalMars_Test2:
(2)   22/  2005C0 :                     		binclude "game/data/mars/objects/test/mtrl/test_pal.bin"
(2)   23/  2006C0 :                     		binclude "game/data/mars/textures/doremi/pal.bin"	; FILLER
(2)   24/  2008C0 :                     		align 2
(2)   25/  2008C0 :                     
(2)   26/  2008C0 :                     ; ===========================================================
(2)   27/  2008C0 :                     ; ----------------------------------------------------
(2)   28/  2008C0 :                     ; 32X GRAPHICS BANKS
(2)   29/  2008C0 :                     ; ----------------------------------------------------
(2)   30/  2008C0 :                     
(2)   31/  2008C0 : (MACRO)              		mars_VramStart ArtMars_Test2D		; Graphics/Texture pack START
(2)   31/  2008C0 : =$2008C0             ARTMARS_TEST2D label *
(2)   31/       0 :                                     phase 0
(2)   32/       0 :                     ; ----------------------------------------------------
(2)   33/       0 :                     ArtMars_TestArt:
(2)   34/       0 :                     		binclude "game/data/mars/maps/test/art.bin"
(2)   35/    FD00 :                     		align 8
(2)   36/    FD00 :                     ArtMars_Sisi:
(2)   37/    FD00 :                     		binclude "game/data/mars/sprites/sisi/art.bin"
(2)   38/   10900 :                     		align 8
(2)   39/   10900 :                     Textr_Haruna:
(2)   40/   10900 :                     		binclude "game/data/mars/textures/haruna_art.bin"
(2)   41/   17200 :                     		align 8
(2)   42/   17200 :                     ; ----------------------------------------------------
(2)   43/   17200 : (MACRO)              		mars_VramEnd ArtMars_Test2D_e		; Graphics/Texture pack END
(2)   43/   17200 :                                     align 8
(2)   43/   17200 :                     .end:
(2)   43/   17200 :                     ;               if MOMPASS == 1
(2)   43/   17200 :  (MACRO-2)                                   erreport "32X VRAM DATA",.end,$18000
(2)   43/   17200 :                     ;               endif
(2)   43/  217AC0 :                                     dephase
(2)   43/  217AC0 : =$217AC0             ARTMARS_TEST2D_E label *
(2)   44/  217AC0 :                     
(2)   45/  217AC0 :                     
(1)   65/  217AC0 :                     	; ------------------------------------------------
(1)   66/  217AC0 : (MACRO)              	data_dend DATA_BANK1_e
(1)   66/  217AC0 : =$17AC0              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   66/  217AC0 :                     
(1)   66/  217AC0 :                     
(1)   66/   A1AC0 :                                     dephase
(1)   66/   A1AC0 :                     
(1)   66/   A1AC0 : =$A1AC0              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   66/   A1AC0 : =$A2000              mpadlbl := (mlastpos&$FFF800)+$800
(1)   66/   A1AC0 :  (MACRO-2)                           rompad mpadlbl
(1)   66/   A1AC0 : =$540                .this_sz := MPADLBL - *
(1)   66/   A1AC0 : 0000 0000 0000                              dc.b [.this_sz]0
            A1AC6 : 0000 0000 0000 
            A1ACC : 0000 0000 0000 
            A1AD2 : 0000 0000 0000 
            A1AD8 : 0000 0000 0000 
            A1ADE : 0000 0000 0000 
            A1AE4 : 0000 0000 0000 
            A1AEA : 0000 0000 0000 
            A1AF0 : 0000 0000 0000 
            A1AF6 : 0000 0000 0000 
            A1AFC : 0000 0000 0000 
            A1B02 : 0000 0000 0000 
            A1B08 : 0000 0000 0000 
            A1B0E : 0000 0000 0000 
            A1B14 : 0000 0000 0000 
            A1B1A : 0000 0000 0000 
            A1B20 : 0000 0000 0000 
            A1B26 : 0000 0000 0000 
            A1B2C : 0000 0000 0000 
            A1B32 : 0000 0000 0000 
            A1B38 : 0000 0000 0000 
            A1B3E : 0000 0000 0000 
            A1B44 : 0000 0000 0000 
            A1B4A : 0000 0000 0000 
            A1B50 : 0000 0000 0000 
            A1B56 : 0000 0000 0000 
            A1B5C : 0000 0000 0000 
            A1B62 : 0000 0000 0000 
            A1B68 : 0000 0000 0000 
            A1B6E : 0000 0000 0000 
            A1B74 : 0000 0000 0000 
            A1B7A : 0000 0000 0000 
            A1B80 : 0000 0000 0000 
            A1B86 : 0000 0000 0000 
            A1B8C : 0000 0000 0000 
            A1B92 : 0000 0000 0000 
            A1B98 : 0000 0000 0000 
            A1B9E : 0000 0000 0000 
            A1BA4 : 0000 0000 0000 
            A1BAA : 0000 0000 0000 
            A1BB0 : 0000 0000 0000 
            A1BB6 : 0000 0000 0000 
            A1BBC : 0000 0000 0000 
            A1BC2 : 0000 0000 0000 
            A1BC8 : 0000 0000 0000 
            A1BCE : 0000 0000 0000 
            A1BD4 : 0000 0000 0000 
            A1BDA : 0000 0000 0000 
            A1BE0 : 0000 0000 0000 
            A1BE6 : 0000 0000 0000 
            A1BEC : 0000 0000 0000 
            A1BF2 : 0000 0000 0000 
            A1BF8 : 0000 0000 0000 
            A1BFE : 0000 0000 0000 
            A1C04 : 0000 0000 0000 
            A1C0A : 0000 0000 0000 
            A1C10 : 0000 0000 0000 
            A1C16 : 0000 0000 0000 
            A1C1C : 0000 0000 0000 
            A1C22 : 0000 0000 0000 
            A1C28 : 0000 0000 0000 
            A1C2E : 0000 0000 0000 
            A1C34 : 0000 0000 0000 
            A1C3A : 0000 0000 0000 
            A1C40 : 0000 0000 0000 
            A1C46 : 0000 0000 0000 
            A1C4C : 0000 0000 0000 
            A1C52 : 0000 0000 0000 
            A1C58 : 0000 0000 0000 
            A1C5E : 0000 0000 0000 
            A1C64 : 0000 0000 0000 
            A1C6A : 0000 0000 0000 
            A1C70 : 0000 0000 0000 
            A1C76 : 0000 0000 0000 
            A1C7C : 0000 0000 0000 
            A1C82 : 0000 0000 0000 
            A1C88 : 0000 0000 0000 
            A1C8E : 0000 0000 0000 
            A1C94 : 0000 0000 0000 
            A1C9A : 0000 0000 0000 
            A1CA0 : 0000 0000 0000 
            A1CA6 : 0000 0000 0000 
            A1CAC : 0000 0000 0000 
            A1CB2 : 0000 0000 0000 
            A1CB8 : 0000 0000 0000 
            A1CBE : 0000 0000 0000 
            A1CC4 : 0000 0000 0000 
            A1CCA : 0000 0000 0000 
            A1CD0 : 0000 0000 0000 
            A1CD6 : 0000 0000 0000 
            A1CDC : 0000 0000 0000 
            A1CE2 : 0000 0000 0000 
            A1CE8 : 0000 0000 0000 
            A1CEE : 0000 0000 0000 
            A1CF4 : 0000 0000 0000 
            A1CFA : 0000 0000 0000 
            A1D00 : 0000 0000 0000 
            A1D06 : 0000 0000 0000 
            A1D0C : 0000 0000 0000 
            A1D12 : 0000 0000 0000 
            A1D18 : 0000 0000 0000 
            A1D1E : 0000 0000 0000 
            A1D24 : 0000 0000 0000 
            A1D2A : 0000 0000 0000 
            A1D30 : 0000 0000 0000 
            A1D36 : 0000 0000 0000 
            A1D3C : 0000 0000 0000 
            A1D42 : 0000 0000 0000 
            A1D48 : 0000 0000 0000 
            A1D4E : 0000 0000 0000 
            A1D54 : 0000 0000 0000 
            A1D5A : 0000 0000 0000 
            A1D60 : 0000 0000 0000 
            A1D66 : 0000 0000 0000 
            A1D6C : 0000 0000 0000 
            A1D72 : 0000 0000 0000 
            A1D78 : 0000 0000 0000 
            A1D7E : 0000 0000 0000 
            A1D84 : 0000 0000 0000 
            A1D8A : 0000 0000 0000 
            A1D90 : 0000 0000 0000 
            A1D96 : 0000 0000 0000 
            A1D9C : 0000 0000 0000 
            A1DA2 : 0000 0000 0000 
            A1DA8 : 0000 0000 0000 
            A1DAE : 0000 0000 0000 
            A1DB4 : 0000 0000 0000 
            A1DBA : 0000 0000 0000 
            A1DC0 : 0000 0000 0000 
            A1DC6 : 0000 0000 0000 
            A1DCC : 0000 0000 0000 
            A1DD2 : 0000 0000 0000 
            A1DD8 : 0000 0000 0000 
            A1DDE : 0000 0000 0000 
            A1DE4 : 0000 0000 0000 
            A1DEA : 0000 0000 0000 
            A1DF0 : 0000 0000 0000 
            A1DF6 : 0000 0000 0000 
            A1DFC : 0000 0000 0000 
            A1E02 : 0000 0000 0000 
            A1E08 : 0000 0000 0000 
            A1E0E : 0000 0000 0000 
            A1E14 : 0000 0000 0000 
            A1E1A : 0000 0000 0000 
            A1E20 : 0000 0000 0000 
            A1E26 : 0000 0000 0000 
            A1E2C : 0000 0000 0000 
            A1E32 : 0000 0000 0000 
            A1E38 : 0000 0000 0000 
            A1E3E : 0000 0000 0000 
            A1E44 : 0000 0000 0000 
            A1E4A : 0000 0000 0000 
            A1E50 : 0000 0000 0000 
            A1E56 : 0000 0000 0000 
            A1E5C : 0000 0000 0000 
            A1E62 : 0000 0000 0000 
            A1E68 : 0000 0000 0000 
            A1E6E : 0000 0000 0000 
            A1E74 : 0000 0000 0000 
            A1E7A : 0000 0000 0000 
            A1E80 : 0000 0000 0000 
            A1E86 : 0000 0000 0000 
            A1E8C : 0000 0000 0000 
            A1E92 : 0000 0000 0000 
            A1E98 : 0000 0000 0000 
            A1E9E : 0000 0000 0000 
            A1EA4 : 0000 0000 0000 
            A1EAA : 0000 0000 0000 
            A1EB0 : 0000 0000 0000 
            A1EB6 : 0000 0000 0000 
            A1EBC : 0000 0000 0000 
            A1EC2 : 0000 0000 0000 
            A1EC8 : 0000 0000 0000 
            A1ECE : 0000 0000 0000 
            A1ED4 : 0000 0000 0000 
            A1EDA : 0000 0000 0000 
            A1EE0 : 0000 0000 0000 
            A1EE6 : 0000 0000 0000 
            A1EEC : 0000 0000 0000 
            A1EF2 : 0000 0000 0000 
            A1EF8 : 0000 0000 0000 
            A1EFE : 0000 0000 0000 
            A1F04 : 0000 0000 0000 
            A1F0A : 0000 0000 0000 
            A1F10 : 0000 0000 0000 
            A1F16 : 0000 0000 0000 
            A1F1C : 0000 0000 0000 
            A1F22 : 0000 0000 0000 
            A1F28 : 0000 0000 0000 
            A1F2E : 0000 0000 0000 
            A1F34 : 0000 0000 0000 
            A1F3A : 0000 0000 0000 
            A1F40 : 0000 0000 0000 
            A1F46 : 0000 0000 0000 
            A1F4C : 0000 0000 0000 
            A1F52 : 0000 0000 0000 
            A1F58 : 0000 0000 0000 
            A1F5E : 0000 0000 0000 
            A1F64 : 0000 0000 0000 
            A1F6A : 0000 0000 0000 
            A1F70 : 0000 0000 0000 
            A1F76 : 0000 0000 0000 
            A1F7C : 0000 0000 0000 
            A1F82 : 0000 0000 0000 
            A1F88 : 0000 0000 0000 
            A1F8E : 0000 0000 0000 
            A1F94 : 0000 0000 0000 
            A1F9A : 0000 0000 0000 
            A1FA0 : 0000 0000 0000 
            A1FA6 : 0000 0000 0000 
            A1FAC : 0000 0000 0000 
            A1FB2 : 0000 0000 0000 
            A1FB8 : 0000 0000 0000 
            A1FBE : 0000 0000 0000 
            A1FC4 : 0000 0000 0000 
            A1FCA : 0000 0000 0000 
            A1FD0 : 0000 0000 0000 
            A1FD6 : 0000 0000 0000 
            A1FDC : 0000 0000 0000 
            A1FE2 : 0000 0000 0000 
            A1FE8 : 0000 0000 0000 
            A1FEE : 0000 0000 0000 
            A1FF4 : 0000 0000 0000 
            A1FFA : 0000 0000 0000    
(1)   66/   A2000 : =$A2000              DATA_BANK1_E label *  ; <-- CD/CD32X ONLY
(1)   66/   A2000 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   67/   A2000 :                     
(1)   68/   A2000 :                     ; ============================================================
(1)   69/   A2000 :                     ; --------------------------------------------------------
(1)   70/   A2000 :                     ; STAMP BANK test
(1)   71/   A2000 :                     ; --------------------------------------------------------
(1)   72/   A2000 :                     
(1)   73/   A2000 : (MACRO)              	data_dset DATA_BNKSTAMP
(1)   73/   A2000 :                                     align $800
(1)   73/   A2000 :                     ; MCD_DBANK0:
(1)   73/   A2000 : =$A2000              DATA_BNKSTAMP label *
(1)   73/  200000 :                                     phase sysmcd_wram
(1)   73/  200000 : =$200000             GLBL_MDATA_ST := *
(1)   74/  200000 :                     	; ------------------------------------------------
(1)   75/  200000 :                     		include "game/data/stamps_0.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data for STAMPS ONLY
(2)    4/  200000 :                     ;
(2)    5/  200000 :                     ; GRAPHICS go first, first $80 bytes are blank/free
(2)    6/  200000 :                     ; ----------------------------------------------------------------
(2)    7/  200000 :                     
(2)    8/       0 :                     		phase 0		; Labels start at 0
(2)    9/       0 :                     ; ===================================================================
(2)   10/       0 :                     ; ----------------------------------------------------------------
(2)   11/       0 :                     ; STAMP GRAPHICS GO FIRST
(2)   12/       0 :                     ; ----------------------------------------------------------------
(2)   13/       0 :                     
(2)   14/       0 : 00                  		dc.b 0
(2)   15/       1 :                     		align $80
(2)   16/      80 :                     		binclude "game/data/mcd/stamps/test/art.bin"
(2)   17/    6080 :                     ; 		binclude "game/data/mcd/stamps/haruna/art.bin"
(2)   18/    6080 :                     
(2)   19/    6080 :                     ; ===================================================================
(2)   20/  206080 :                     		dephase
(2)   21/  206080 :                     
(2)   22/  206080 :                     
(1)   76/  206080 :                     	; ------------------------------------------------
(1)   77/  206080 : (MACRO)              	data_dend DATA_BNKSTAMP_e
(1)   77/  206080 : =$6080               GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   77/  206080 :                     
(1)   77/  206080 :                     
(1)   77/   A8080 :                                     dephase
(1)   77/   A8080 :                     
(1)   77/   A8080 : =$A8080              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   77/   A8080 : =$A8800              mpadlbl := (mlastpos&$FFF800)+$800
(1)   77/   A8080 :  (MACRO-2)                           rompad mpadlbl
(1)   77/   A8080 : =$780                .this_sz := MPADLBL - *
(1)   77/   A8080 : 0000 0000 0000                              dc.b [.this_sz]0
            A8086 : 0000 0000 0000 
            A808C : 0000 0000 0000 
            A8092 : 0000 0000 0000 
            A8098 : 0000 0000 0000 
            A809E : 0000 0000 0000 
            A80A4 : 0000 0000 0000 
            A80AA : 0000 0000 0000 
            A80B0 : 0000 0000 0000 
            A80B6 : 0000 0000 0000 
            A80BC : 0000 0000 0000 
            A80C2 : 0000 0000 0000 
            A80C8 : 0000 0000 0000 
            A80CE : 0000 0000 0000 
            A80D4 : 0000 0000 0000 
            A80DA : 0000 0000 0000 
            A80E0 : 0000 0000 0000 
            A80E6 : 0000 0000 0000 
            A80EC : 0000 0000 0000 
            A80F2 : 0000 0000 0000 
            A80F8 : 0000 0000 0000 
            A80FE : 0000 0000 0000 
            A8104 : 0000 0000 0000 
            A810A : 0000 0000 0000 
            A8110 : 0000 0000 0000 
            A8116 : 0000 0000 0000 
            A811C : 0000 0000 0000 
            A8122 : 0000 0000 0000 
            A8128 : 0000 0000 0000 
            A812E : 0000 0000 0000 
            A8134 : 0000 0000 0000 
            A813A : 0000 0000 0000 
            A8140 : 0000 0000 0000 
            A8146 : 0000 0000 0000 
            A814C : 0000 0000 0000 
            A8152 : 0000 0000 0000 
            A8158 : 0000 0000 0000 
            A815E : 0000 0000 0000 
            A8164 : 0000 0000 0000 
            A816A : 0000 0000 0000 
            A8170 : 0000 0000 0000 
            A8176 : 0000 0000 0000 
            A817C : 0000 0000 0000 
            A8182 : 0000 0000 0000 
            A8188 : 0000 0000 0000 
            A818E : 0000 0000 0000 
            A8194 : 0000 0000 0000 
            A819A : 0000 0000 0000 
            A81A0 : 0000 0000 0000 
            A81A6 : 0000 0000 0000 
            A81AC : 0000 0000 0000 
            A81B2 : 0000 0000 0000 
            A81B8 : 0000 0000 0000 
            A81BE : 0000 0000 0000 
            A81C4 : 0000 0000 0000 
            A81CA : 0000 0000 0000 
            A81D0 : 0000 0000 0000 
            A81D6 : 0000 0000 0000 
            A81DC : 0000 0000 0000 
            A81E2 : 0000 0000 0000 
            A81E8 : 0000 0000 0000 
            A81EE : 0000 0000 0000 
            A81F4 : 0000 0000 0000 
            A81FA : 0000 0000 0000 
            A8200 : 0000 0000 0000 
            A8206 : 0000 0000 0000 
            A820C : 0000 0000 0000 
            A8212 : 0000 0000 0000 
            A8218 : 0000 0000 0000 
            A821E : 0000 0000 0000 
            A8224 : 0000 0000 0000 
            A822A : 0000 0000 0000 
            A8230 : 0000 0000 0000 
            A8236 : 0000 0000 0000 
            A823C : 0000 0000 0000 
            A8242 : 0000 0000 0000 
            A8248 : 0000 0000 0000 
            A824E : 0000 0000 0000 
            A8254 : 0000 0000 0000 
            A825A : 0000 0000 0000 
            A8260 : 0000 0000 0000 
            A8266 : 0000 0000 0000 
            A826C : 0000 0000 0000 
            A8272 : 0000 0000 0000 
            A8278 : 0000 0000 0000 
            A827E : 0000 0000 0000 
            A8284 : 0000 0000 0000 
            A828A : 0000 0000 0000 
            A8290 : 0000 0000 0000 
            A8296 : 0000 0000 0000 
            A829C : 0000 0000 0000 
            A82A2 : 0000 0000 0000 
            A82A8 : 0000 0000 0000 
            A82AE : 0000 0000 0000 
            A82B4 : 0000 0000 0000 
            A82BA : 0000 0000 0000 
            A82C0 : 0000 0000 0000 
            A82C6 : 0000 0000 0000 
            A82CC : 0000 0000 0000 
            A82D2 : 0000 0000 0000 
            A82D8 : 0000 0000 0000 
            A82DE : 0000 0000 0000 
            A82E4 : 0000 0000 0000 
            A82EA : 0000 0000 0000 
            A82F0 : 0000 0000 0000 
            A82F6 : 0000 0000 0000 
            A82FC : 0000 0000 0000 
            A8302 : 0000 0000 0000 
            A8308 : 0000 0000 0000 
            A830E : 0000 0000 0000 
            A8314 : 0000 0000 0000 
            A831A : 0000 0000 0000 
            A8320 : 0000 0000 0000 
            A8326 : 0000 0000 0000 
            A832C : 0000 0000 0000 
            A8332 : 0000 0000 0000 
            A8338 : 0000 0000 0000 
            A833E : 0000 0000 0000 
            A8344 : 0000 0000 0000 
            A834A : 0000 0000 0000 
            A8350 : 0000 0000 0000 
            A8356 : 0000 0000 0000 
            A835C : 0000 0000 0000 
            A8362 : 0000 0000 0000 
            A8368 : 0000 0000 0000 
            A836E : 0000 0000 0000 
            A8374 : 0000 0000 0000 
            A837A : 0000 0000 0000 
            A8380 : 0000 0000 0000 
            A8386 : 0000 0000 0000 
            A838C : 0000 0000 0000 
            A8392 : 0000 0000 0000 
            A8398 : 0000 0000 0000 
            A839E : 0000 0000 0000 
            A83A4 : 0000 0000 0000 
            A83AA : 0000 0000 0000 
            A83B0 : 0000 0000 0000 
            A83B6 : 0000 0000 0000 
            A83BC : 0000 0000 0000 
            A83C2 : 0000 0000 0000 
            A83C8 : 0000 0000 0000 
            A83CE : 0000 0000 0000 
            A83D4 : 0000 0000 0000 
            A83DA : 0000 0000 0000 
            A83E0 : 0000 0000 0000 
            A83E6 : 0000 0000 0000 
            A83EC : 0000 0000 0000 
            A83F2 : 0000 0000 0000 
            A83F8 : 0000 0000 0000 
            A83FE : 0000 0000 0000 
            A8404 : 0000 0000 0000 
            A840A : 0000 0000 0000 
            A8410 : 0000 0000 0000 
            A8416 : 0000 0000 0000 
            A841C : 0000 0000 0000 
            A8422 : 0000 0000 0000 
            A8428 : 0000 0000 0000 
            A842E : 0000 0000 0000 
            A8434 : 0000 0000 0000 
            A843A : 0000 0000 0000 
            A8440 : 0000 0000 0000 
            A8446 : 0000 0000 0000 
            A844C : 0000 0000 0000 
            A8452 : 0000 0000 0000 
            A8458 : 0000 0000 0000 
            A845E : 0000 0000 0000 
            A8464 : 0000 0000 0000 
            A846A : 0000 0000 0000 
            A8470 : 0000 0000 0000 
            A8476 : 0000 0000 0000 
            A847C : 0000 0000 0000 
            A8482 : 0000 0000 0000 
            A8488 : 0000 0000 0000 
            A848E : 0000 0000 0000 
            A8494 : 0000 0000 0000 
            A849A : 0000 0000 0000 
            A84A0 : 0000 0000 0000 
            A84A6 : 0000 0000 0000 
            A84AC : 0000 0000 0000 
            A84B2 : 0000 0000 0000 
            A84B8 : 0000 0000 0000 
            A84BE : 0000 0000 0000 
            A84C4 : 0000 0000 0000 
            A84CA : 0000 0000 0000 
            A84D0 : 0000 0000 0000 
            A84D6 : 0000 0000 0000 
            A84DC : 0000 0000 0000 
            A84E2 : 0000 0000 0000 
            A84E8 : 0000 0000 0000 
            A84EE : 0000 0000 0000 
            A84F4 : 0000 0000 0000 
            A84FA : 0000 0000 0000 
            A8500 : 0000 0000 0000 
            A8506 : 0000 0000 0000 
            A850C : 0000 0000 0000 
            A8512 : 0000 0000 0000 
            A8518 : 0000 0000 0000 
            A851E : 0000 0000 0000 
            A8524 : 0000 0000 0000 
            A852A : 0000 0000 0000 
            A8530 : 0000 0000 0000 
            A8536 : 0000 0000 0000 
            A853C : 0000 0000 0000 
            A8542 : 0000 0000 0000 
            A8548 : 0000 0000 0000 
            A854E : 0000 0000 0000 
            A8554 : 0000 0000 0000 
            A855A : 0000 0000 0000 
            A8560 : 0000 0000 0000 
            A8566 : 0000 0000 0000 
            A856C : 0000 0000 0000 
            A8572 : 0000 0000 0000 
            A8578 : 0000 0000 0000 
            A857E : 0000 0000 0000 
            A8584 : 0000 0000 0000 
            A858A : 0000 0000 0000 
            A8590 : 0000 0000 0000 
            A8596 : 0000 0000 0000 
            A859C : 0000 0000 0000 
            A85A2 : 0000 0000 0000 
            A85A8 : 0000 0000 0000 
            A85AE : 0000 0000 0000 
            A85B4 : 0000 0000 0000 
            A85BA : 0000 0000 0000 
            A85C0 : 0000 0000 0000 
            A85C6 : 0000 0000 0000 
            A85CC : 0000 0000 0000 
            A85D2 : 0000 0000 0000 
            A85D8 : 0000 0000 0000 
            A85DE : 0000 0000 0000 
            A85E4 : 0000 0000 0000 
            A85EA : 0000 0000 0000 
            A85F0 : 0000 0000 0000 
            A85F6 : 0000 0000 0000 
            A85FC : 0000 0000 0000 
            A8602 : 0000 0000 0000 
            A8608 : 0000 0000 0000 
            A860E : 0000 0000 0000 
            A8614 : 0000 0000 0000 
            A861A : 0000 0000 0000 
            A8620 : 0000 0000 0000 
            A8626 : 0000 0000 0000 
            A862C : 0000 0000 0000 
            A8632 : 0000 0000 0000 
            A8638 : 0000 0000 0000 
            A863E : 0000 0000 0000 
            A8644 : 0000 0000 0000 
            A864A : 0000 0000 0000 
            A8650 : 0000 0000 0000 
            A8656 : 0000 0000 0000 
            A865C : 0000 0000 0000 
            A8662 : 0000 0000 0000 
            A8668 : 0000 0000 0000 
            A866E : 0000 0000 0000 
            A8674 : 0000 0000 0000 
            A867A : 0000 0000 0000 
            A8680 : 0000 0000 0000 
            A8686 : 0000 0000 0000 
            A868C : 0000 0000 0000 
            A8692 : 0000 0000 0000 
            A8698 : 0000 0000 0000 
            A869E : 0000 0000 0000 
            A86A4 : 0000 0000 0000 
            A86AA : 0000 0000 0000 
            A86B0 : 0000 0000 0000 
            A86B6 : 0000 0000 0000 
            A86BC : 0000 0000 0000 
            A86C2 : 0000 0000 0000 
            A86C8 : 0000 0000 0000 
            A86CE : 0000 0000 0000 
            A86D4 : 0000 0000 0000 
            A86DA : 0000 0000 0000 
            A86E0 : 0000 0000 0000 
            A86E6 : 0000 0000 0000 
            A86EC : 0000 0000 0000 
            A86F2 : 0000 0000 0000 
            A86F8 : 0000 0000 0000 
            A86FE : 0000 0000 0000 
            A8704 : 0000 0000 0000 
            A870A : 0000 0000 0000 
            A8710 : 0000 0000 0000 
            A8716 : 0000 0000 0000 
            A871C : 0000 0000 0000 
            A8722 : 0000 0000 0000 
            A8728 : 0000 0000 0000 
            A872E : 0000 0000 0000 
            A8734 : 0000 0000 0000 
            A873A : 0000 0000 0000 
            A8740 : 0000 0000 0000 
            A8746 : 0000 0000 0000 
            A874C : 0000 0000 0000 
            A8752 : 0000 0000 0000 
            A8758 : 0000 0000 0000 
            A875E : 0000 0000 0000 
            A8764 : 0000 0000 0000 
            A876A : 0000 0000 0000 
            A8770 : 0000 0000 0000 
            A8776 : 0000 0000 0000 
            A877C : 0000 0000 0000 
            A8782 : 0000 0000 0000 
            A8788 : 0000 0000 0000 
            A878E : 0000 0000 0000 
            A8794 : 0000 0000 0000 
            A879A : 0000 0000 0000 
            A87A0 : 0000 0000 0000 
            A87A6 : 0000 0000 0000 
            A87AC : 0000 0000 0000 
            A87B2 : 0000 0000 0000 
            A87B8 : 0000 0000 0000 
            A87BE : 0000 0000 0000 
            A87C4 : 0000 0000 0000 
            A87CA : 0000 0000 0000 
            A87D0 : 0000 0000 0000 
            A87D6 : 0000 0000 0000 
            A87DC : 0000 0000 0000 
            A87E2 : 0000 0000 0000 
            A87E8 : 0000 0000 0000 
            A87EE : 0000 0000 0000 
            A87F4 : 0000 0000 0000 
            A87FA : 0000 0000 0000    
(1)   77/   A8800 : =$A8800              DATA_BNKSTAMP_E label *  ; <-- CD/CD32X ONLY
(1)   77/   A8800 :  (MACRO-2)                           erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE     ; <- Lowest size compatible for ALL
(1)   78/   A8800 :                     
     385/   A8800 :                     
     386/   A8800 :                     ; ====================================================================
     387/   A8800 :                     ; ----------------------------------------------------------------
     388/   A8800 :                     ; Cartridge-ONLY Section, direct label access
     389/   A8800 :                     ;
     390/   A8800 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     391/   A8800 :                     ; ----------------------------------------------------------------
     392/   A8800 :                     
     420/   A8800 :                     
     421/   A8800 :                     ; ====================================================================
     422/   A8800 :                     ; ------------------------------------------------
     423/   A8800 :                     ; End
     424/   A8800 :                     ; ------------------------------------------------
     425/   A8800 :                     
     426/   A8800 :                     ROM_END:
     427/   A8800 : 00                  		dc.b 0
     428/   A8801 :                     		align $8000
     429/   B0000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 09/21/2024 02:15:52 AM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*ARTMARS_SISI :                FD00 C | *ARTMARS_TEST2D :            2008C0 C |
*ARTMARS_TEST2D_E :          217AC0 C | *ARTMARS_TESTART :                0 C |
 ART_HARUNA :                223BB0 C |  ART_SISI :                  226A30 C |
 ART_SISI_E :                226FB0 C |  ART_TESTBG :                211D10 C |
 ART_TESTBG2 :               21A330 C |  ART_TESTBG2_E :             223BB0 C |
 ART_TESTBG_E :              21A330 C |  ASCII_FONT :                20F910 C |
 ASCII_FONT_W :              210510 C |  ATK :                            8 - |
*ATTRH :                        800 - | *ATTRPRIO :                    8000 - |
*ATTRV :                       1000 - | *BANKSET :                        4 - |
*BIGENDIAN :                      0 - | *BITATTRH :                       3 - |
*BITATTRPRIO :                    7 - | *BITATTRV :                       4 - |
*BITCLICKL :                      0 - | *BITCLICKM :                      2 - |
*BITCLICKR :                      1 - | *BITCLICKS :                      3 - |
 BITDISPENBL :                    6 - |  BITDMA :                         1 - |
 BITDMAENBL :                     4 - | *BITFIFOE :                       9 - |
*BITFIFOF :                       8 - | *BITHBLK :                        2 - |
*BITHINTENBL :                    4 - | *BITHVSTOP :                      1 - |
 BITJOYA :                        6 - |  BITJOYB :                        4 - |
 BITJOYC :                        5 - |  BITJOYDOWN :                     1 - |
 BITJOYLEFT :                     2 - | *BITJOYMODE :                     B - |
*BITJOYPEN :                      7 - | *BITJOYRED :                      4 - |
 BITJOYRIGHT :                    3 - |  BITJOYSTART :                    7 - |
 BITJOYUP :                       0 - |  BITJOYX :                        A - |
 BITJOYY :                        9 - | *BITJOYZ :                        8 - |
*BITMAPMD :                       1 - | *BITODD :                         4 - |
*BITPAL :                         0 - | *BITSPRCOL :                      5 - |
*BITSPROVR :                      6 - | *BITV30 :                         3 - |
 BITVBLK :                        3 - | *BITVINT :                        7 - |
*BITVINTENBL :                    5 - | *BITWRAMMODE :                    2 - |
*BRANCHEXT :                      0 - | *BRMDEL :                         5 - |
*BRMDIR :                         7 - | *BRMFORMAT :                      6 - |
 BRMINIT :                        0 - |  BRMREAD :                        3 - |
 BRMSERCH :                       2 - |  BRMSTAT :                        1 - |
*BRMVERIFY :                      8 - |  BRMWRITE :                       4 - |
*CASESENSITIVE :                  0 - | *CBTCHKDISC :                     4 - |
*CBTCHKSTAT :                     5 - | *CBTINIT :                        0 - |
*CBTINT :                         1 - | *CBTIPDISC :                      6 - |
*CBTIPSTAT :                      7 - | *CBTOPENDISC :                    2 - |
*CBTOPENSTAT :                    3 - | *CBTSPDISC :                      8 - |
*CBTSPSTAT :                      9 - | *CDBCHK :                        80 - |
*CDBPAUSE :                      84 - | *CDBSTAT :                       81 - |
*CDBTOCREAD :                    83 - | *CDBTOCWRITE :                   82 - |
 CDCACK :                        8D - |  CDCREAD :                       8B - |
*CDCSETMODE :                    96 - | *CDCSTART :                      87 - |
*CDCSTARTP :                     88 - |  CDCSTAT :                       8A - |
 CDCSTOP :                       89 - |  CDCTRN :                        8C - |
 CDPCM_CBLOCK :                  1E - |  CDPCM_CLEN :                    14 - |
 CDPCM_CREAD :                   18 - |  CDPCM_ENV :                     21 - |
 CDPCM_FLAGS :                    1 - |  CDPCM_LEN :                     22 - |
 CDPCM_LENGTH :                   C - |  CDPCM_LOOP :                    10 - |
 CDPCM_PAN :                     20 - |  CDPCM_PITCH :                   1C - |
 CDPCM_SLAST :                    8 - |  CDPCM_START :                    4 - |
 CDPCM_STATUS :                   0 - | *CDPCM_STRMF :                    2 - |
 CDPCM_STRMHALF :                 3 - |  CDRAMDST :                      31 C |
 CDRAMLEN :                      30 C |  CDRAMSRC :                      33 C |
 CDRAMSRCB :                     35 C |  CDREGION :                       0 - |
 CDSTAMP_CX :                     2 - |  CDSTAMP_CY :                     4 - |
 CDSTAMP_FLAGS :                  0 - |  CDSTAMP_HGHT :                   C - |
 CDSTAMP_LEN :                   20 - |  CDSTAMP_MAP :                    1 - |
 CDSTAMP_ROT :                   10 - |  CDSTAMP_SCALE :                  E - |
 CDSTAMP_WDTH :                   A - |  CDSTAMP_X :                      6 - |
 CDSTAMP_Y :                      8 - |  CDSUB_PCM_INIT :              6BF2 C |
 CDSUB_PCM_INIT.CLR_PWM :      6C06 C |  CDSUB_PCM_INIT.COPY_DATA :    6C50 C |
 CDSUB_PCM_INIT.DATA_BLK :     6C62 C |  CDSUB_PCM_INIT.DATA_BLK_E :   6CA2 C |
 CDSUB_PCM_INIT.WR_END :       6C12 C |  CDSUB_PCM_PROCESS :           6D84 C |
 CDSUB_PCM_PROCESS.EXIT_NOW :  6E00 C |  CDSUB_PCM_PROCESS.GET_TABLE : 6D9C C |
 CDSUB_PCM_PROCESS.NEXT_PACKET :                                       6DCC C |
*CDSUB_PCM_PROCESS.NOT_NOW :   6E0C C |  CDSUB_PCM_PROCESS.NO_REQ :    6D9A C |
*CDSUB_PCM_PROCESS.TRNSFR_MODE :                                       6DA6 C |
 CDSUB_PCM_PROCESS.WAIT_MAIN : 6DEE C |
 CDSUB_PCM_PROCESS.WAIT_START :                                        6DB6 C |
 CDSUB_PCM_READTABLE :         6CA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYOFF :                                    6CDE C |
 CDSUB_PCM_READTABLE.CDCOM_KEYON :                                     6CE4 C |
*CDSUB_PCM_READTABLE.DONT_UPD :                                        6CDC C |
 CDSUB_PCM_READTABLE.EFFECT_MOD :                                      6D56 C |
 CDSUB_PCM_READTABLE.EFFECT_ONLY :                                     6D50 C |
 CDSUB_PCM_READTABLE.GET_TBL : 6CB2 C |  CDSUB_PCM_READTABLE.NO_COMM : 6CCC C |
 CDSUB_PCM_READTABLE.NO_KEYCUT :                                       6CC4 C |
 CDSUB_PCM_READTABLE.NO_KEYOFF :                                       6CBC C |
 CDSUB_PCM_READTABLE.WRT_FLAGS :                                       6D46 C |
 CDSUB_PCM_STREAM :            6E0E C |  CDSUB_PCM_STREAM.END_POINT :  6F1E C |
*CDSUB_PCM_STREAM.FAKE_FILL :  6FB0 C |  CDSUB_PCM_STREAM.FILL_BLANK : 70A8 C |
 CDSUB_PCM_STREAM.FIRST_FILL : 6F9E C |  CDSUB_PCM_STREAM.FORCE_OFF :  6E6C C |
 CDSUB_PCM_STREAM.GET_ADDR :   6E28 C |  CDSUB_PCM_STREAM.KEEP_STRM :  6E5E C |
 CDSUB_PCM_STREAM.LAST_SMPL :  6F52 C |  CDSUB_PCM_STREAM.LOOP_BLKL :  70B4 C |
*CDSUB_PCM_STREAM.LOOP_POINT : 6EF6 C |  CDSUB_PCM_STREAM.LOOP_STRM :  6F06 C |
 CDSUB_PCM_STREAM.LOWHALF :    6EA8 C |
 CDSUB_PCM_STREAM.MAKE_BLK_STRM :                                      6ED0 C |
 CDSUB_PCM_STREAM.MAKE_LBLK :  7012 C |  CDSUB_PCM_STREAM.NON_STRM :   6EB2 C |
 CDSUB_PCM_STREAM.NON_UPD :    6E62 C |  CDSUB_PCM_STREAM.NOT_FLOAT :  6E72 C |
 CDSUB_PCM_STREAM.RAN_OUT :    6EDA C |
 CDSUB_PCM_STREAM.SET_ENDLOOP :                                        6FE8 C |
 CDSUB_PCM_STREAM.SET_LMARK :  6F26 C |
 CDSUB_PCM_STREAM.SET_LOOPPNT :                                        6FFA C |
 CDSUB_PCM_STREAM.SET_MKLOOP : 7000 C |
 CDSUB_PCM_STREAM.SET_NONSTOP :                                        6FEE C |
 CDSUB_PCM_STREAM.SMALL_SAMPL :                                        6FDC C |
*CDSUB_PCM_STREAM.STLEN_IT :   6F58 C |  CDSUB_PCM_STREAM.STOP_PCM :   6EC8 C |
 CDSUB_PCM_STREAM.STRLEN_IT :  6F0E C |  CDSUB_PCM_STREAM.UPDATE_SET : 6F62 C |
 CDSUB_PCM_STREAM.WAVE_BLKL :  7028 C |  CDSUB_PCM_WAIT :              6BE6 C |
 CDSUB_PCM_WAVTOPCM :          70DA C |
 CDSUB_PCM_WAVTOPCM.WAVE_LIST :                                        70E4 C |
 CDSUB_SINEWAVE :              6A98 C |  CDSUB_SINEWAVE.LOC_7EFA :     6AA8 C |
 CDSUB_SINEWAVE.LOC_7F0C :     6ABA C |  CDSUB_SINEWAVE.SINE_DATA :    6AC0 C |
 CDSUB_SINEWAVE_COS :          6A94 C |  CDSUB_STAMPDEFAULTS :         6BCC C |
 CDSUB_STAMPINITSTUFF :        6BC0 C |  CDSUB_STAMPRENDER :           6520 C |
 CDSUB_STAMPRENDER.CLEAR_FRAME :                                       6A30 C |
 CDSUB_STAMPRENDER.DOTC_0 :    6A5E C |  CDSUB_STAMPRENDER.DOT_0 :     69DA C |
 CDSUB_STAMPRENDER.EXIT_LAST : 663C C |
 CDSUB_STAMPRENDER.EXIT_RENDER :                                       65DE C |
 CDSUB_STAMPRENDER.FLIP_TURN : 6590 C |  CDSUB_STAMPRENDER.INVALID :   6896 C |
 CDSUB_STAMPRENDER.LOOP_LIST : 65F0 C |  CDSUB_STAMPRENDER.MAKE_LIST : 65E2 C |
 CDSUB_STAMPRENDER.MAKE_STAMP :                                        6608 C |
 CDSUB_STAMPRENDER.MAKE_TRACE :                                        670C C |
 CDSUB_STAMPRENDER.MK_VARS :   689C C |  CDSUB_STAMPRENDER.NEXT_LINE : 67B2 C |
 CDSUB_STAMPRENDER.NO_BREAK :  6556 C |  CDSUB_STAMPRENDER.NO_STAMP :  65FE C |
 CDSUB_STAMPRENDER.NO_XL :     6790 C |  CDSUB_STAMPRENDER.NO_YL :     6798 C |
 CDSUB_STAMPRENDER.PROCESS_TRACE :                                     6972 C |
 CDSUB_STAMPRENDER.RESET_OUT : 6646 C |  CDSUB_STAMPRENDER.RETRY :     660C C |
 CDSUB_STAMPRENDER.RETURN_RET :                                        65BA C |
 CDSUB_STAMPRENDER.SPLUS :     6804 C |  CDSUB_STAMPRENDER.SPLUSV :    675C C |
 CDSUB_STAMPRENDER.TRACE_BLANK :                                       663E C |
 CDSUB_STAMPRENDER.WAIT_DONE : 653E C |  CDSUB_STAMPRENDER.WAIT_RET :  6548 C |
 CDSUB_STAMPRENDER.WAIT_RETE : 65CE C |  CDSUB_STAMPRENDER.XL_P :      686E C |
 CDSUB_STAMPRENDER.XR_P :      687A C |  CDSUB_STAMPRENDER.YL_P :      6874 C |
 CDSUB_STAMPRENDER.YR_P :      6880 C |  CHIP_ENV :                    11AC C |
 CHIP_ENV.ATKEND :             122F C | *CHIP_ENV.ATKZERO :            1232 C |
 CHIP_ENV.CHK2 :               1238 C |  CHIP_ENV.CHK4 :               126D C |
 CHIP_ENV.CKOF :               11D0 C |  CHIP_ENV.CKON :               11E3 C |
*CHIP_ENV.DECTMR :             123C C |  CHIP_ENV.DKADD :              1256 C |
 CHIP_ENV.DKSAV :              125E C |  CHIP_ENV.DKYEND :             1263 C |
 CHIP_ENV.DO_NFREQ :           12C2 C |  CHIP_ENV.ENVPROC :            1201 C |
 CHIP_ENV.KILLENV :            1283 C | *CHIP_ENV.NBLOCK :             1201 C |
 CHIP_ENV.NORMAL :             12BD C |  CHIP_ENV.NOUPD :              1303 C |
 CHIP_ENV.NSKIP :              11F8 C |  CHIP_ENV.SILNC_3 :            12B9 C |
 CHIP_ENV.VEDLP :              128B C |  CHIP_ENV.VLMUCH :             12EF C |
 CHIP_ENV.VLOOP :              11B8 C |  CHIP_ENV.VONLY :              12E5 C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                     40 C |
 COMMZREAD :                     3F C |  COMMZROMBLK :                   2F C |
 COMMZWRITE :                    2E C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFDD18 - |
*CONTROLLER_2 :    FFFFFFFFFFFFDD28 - | *CS0 :                            0 - |
*CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CTREG :                          F - |
 CURRTICKBITS :                1CF4 C | *CUSTOM :                         0 - |
*CYCLE :                         32 - | *DACINS_ARENA_01 :           202E29 C |
*DACINS_ARENA_02 :           205115 C | *DACINS_ARENA_03 :           2074BF C |
 DACINS_KICK :               20983D C |  DACINS_SNARE :              209CF3 C |
 DACINS_TIMPANI :            20ABF5 C | *DACINS_WEGOT_CRASH :        20CC45 C |
*DACINS_WEGOT_KICK :         20C4CB C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     133E C |
 DAC_ON :                      1329 C |  DAC_PLAY :                    1353 C |
 DAC_REFILL :                  1387 C |  DAC_REFILL.DACFILL_END :      1446 C |
 DAC_REFILL.DACFILL_LOOP :     13FF C |  DAC_REFILL.DACFILL_RET :      1449 C |
 DAC_REFILL.DAC_OVER :         13D5 C |  DATA_BANK0 :                 61000 C |
 DATA_BANK0_E :               8A000 C |  DATA_BANK1 :                 8A000 C |
 DATA_BANK1_E :               A2000 C |  DATA_BNKSTAMP :              A2000 C |
 DATA_BNKSTAMP_E :            A8800 C |  DATE :                "09/21/2024" - |
 DBUG_DAC :                       0 - |  DDACCNTR :                    1BEC C |
 DDACFIFOMID :                 1BE8 C |  DDACPNTR :                    1BE9 C |
*DEF_HSIZE_128 :                100 - | *DEF_HSIZE_32 :                  40 - |
 DEF_HSIZE_64 :                  80 - |  DEF_MAXSTAMPCOUT :              60 - |
 DEF_PRINTPAL :                6000 - |  DEF_PRINTVRAM :                5A0 - |
 DEF_PRINTVRAMW :               4E0 - |  DEF_SAVEINFO :    FFFFFFFFFFFF1FAE C |
 DEF_VRAM_BG :                 E000 - |  DEF_VRAM_FG :                 C000 - |
 DEF_VRAM_HSCRL :              FC00 - |  DEF_VRAM_SPR :                F800 - |
 DEF_VRAM_WD :                 D000 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRVINIT :                       10 - |
*DRVOPEN :                        A - |  DRV_LOOP :                      54 C |
 DRV_LOOP.CMND_0 :               ED C |  DRV_LOOP.CMND_1 :               F0 C |
 DRV_LOOP.CMND_2 :              109 C |  DRV_LOOP.CMND_3 :              143 C |
 DRV_LOOP.CMND_5 :              181 C |  DRV_LOOP.CMND_6 :              1BA C |
 DRV_LOOP.CMND_7 :              1F3 C |  DRV_LOOP.CMND_RDSLOT :         211 C |
 DRV_LOOP.DEL_ALL :             17A C |  DRV_LOOP.GETCBYTEL :            C0 C |
 DRV_LOOP.GRAB_ARG :             BE C |  DRV_LOOP.LIST :                 DD C |
 DRV_LOOP.NEITHER :              94 C |  DRV_LOOP.NEXT_CMD :             9B C |
 DRV_LOOP.NOBEATS :              7B C |  DRV_LOOP.NOTICKS :              6E C |
 DRV_LOOP.NOT_PAL :             206 C |  DRV_LOOP.SRCH_DEL :            161 C |
 DRV_LOOP.SRCH_FVOL :           19F C |  DRV_LOOP.SRCH_MODE :           129 C |
 DRV_LOOP.SRCH_SLOT :           224 C |  DRV_LOOP.SRCH_VOL :            1D8 C |
 DRV_LOOP.WRTTO_DEL :           16E C |  DRV_LOOP.WRTTO_FVOL :          1AC C |
 DRV_LOOP.WRTTO_SLOT :          138 C |  DRV_LOOP.WRTTO_VOL :           1E5 C |
 DTBL_MULTI :                   80A C |  DTBL_SINGL :                   820 C |
 DTBL_SINGL.CHNL_ULNK :         F91 C |  DTBL_SINGL.CHNL_ULNKCUT :      F8B C |
 DTBL_SINGL.CHNL_ULNKOFF :      F91 C |  DTBL_SINGL.COMN_PANLIST :      D3D C |
 DTBL_SINGL.DAC_CUT :           B7B C |  DTBL_SINGL.DAC_OFF :           B81 C |
 DTBL_SINGL.DAC_PITCH :         B84 C |  DTBL_SINGL.D_CONT :            CF6 C |
 DTBL_SINGL.EFFC :              C63 C |  DTBL_SINGL.EFFC_D :            C7E C |
 DTBL_SINGL.EFFC_E :            CC1 C |  DTBL_SINGL.EFFC_F :            CD6 C |
 DTBL_SINGL.EFFC_X :            CF7 C |  DTBL_SINGL.FINE_DOWN :         C99 C |
 DTBL_SINGL.FINE_UP :           CAD C |  DTBL_SINGL.FM_CINDX :          B15 C |
 DTBL_SINGL.FM_CUT :            A60 C |  DTBL_SINGL.FM_HASVOL :         F26 C |
 DTBL_SINGL.FM_KEYOFF :         A69 C |  DTBL_SINGL.FM_OFF :            A5A C |
 DTBL_SINGL.FM_SETFREQ :        A88 C |  DTBL_SINGL.FM_SETRLIST :       E3D C |
 DTBL_SINGL.FM_TLOFF :          A71 C |  DTBL_SINGL.FM_WRTALPAN :       B1D C |
 DTBL_SINGL.FM_WRTLVOL :        A9F C |  DTBL_SINGL.FND_OCT :           F76 C |
 DTBL_SINGL.FROM_PSGN :         93C C |  DTBL_SINGL.GET_OCT :           F6C C |
 DTBL_SINGL.INST :              D6E C |  DTBL_SINGL.INS_DAC :           E4D C |
 DTBL_SINGL.INS_FM :            DCF C |  DTBL_SINGL.INS_PCM :           EA1 C |
 DTBL_SINGL.INS_PSG :           D99 C |  DTBL_SINGL.INS_PSGN :          D93 C |
 DTBL_SINGL.INS_PWM :           ED9 C | *DTBL_SINGL.INVL_INS :          D92 C |
 DTBL_SINGL.KEEP_TLMX :         B0A C |  DTBL_SINGL.KYCUT_PSG :         90A C |
 DTBL_SINGL.KYCUT_PSGN :        907 C |  DTBL_SINGL.KYOFF_PSG :         8FD C |
 DTBL_SINGL.KYOFF_PSGN :        8FA C |  DTBL_SINGL.KYPSGN_HATOFF :     914 C |
 DTBL_SINGL.LINKED :            88A C |  DTBL_SINGL.MKFM_SET :          9EB C |
*DTBL_SINGL.MKPCM_PROC :        BE8 C |  DTBL_SINGL.MKPCM_WRTON :       BE5 C |
 DTBL_SINGL.MK_DAC :            B53 C |  DTBL_SINGL.MK_FM :             97F C |
 DTBL_SINGL.MK_FMSPC :          9FF C |  DTBL_SINGL.MK_LIST :           8C5 C |
 DTBL_SINGL.MK_PCM :            BAA C |  DTBL_SINGL.MK_PSG :            91B C |
 DTBL_SINGL.MK_PSGN :           8D3 C |  DTBL_SINGL.MK_PWM :            C42 C |
 DTBL_SINGL.MP_RESET :          BE3 C |  DTBL_SINGL.NEW_ROMDAT :        E00 C |
*DTBL_SINGL.NOFM_NOTE :         9FE C |  DTBL_SINGL.NORM_DOWN :         C97 C |
 DTBL_SINGL.NORM_UP :           CAF C |  DTBL_SINGL.NOTE :              F1C C |
 DTBL_SINGL.NOT_DAC :           99E C |  DTBL_SINGL.NOT_DSPC :          9B3 C |
 DTBL_SINGL.NOT_PAL :           9D3 C |  DTBL_SINGL.NOT_PALP :          951 C |
 DTBL_SINGL.NO_LFO :            B52 C |  DTBL_SINGL.N_FM :              F62 C |
 DTBL_SINGL.N_INDX :            F4E C |  DTBL_SINGL.N_PSGN :            F5D C |
 DTBL_SINGL.N_STFREQ :          F4F C |  DTBL_SINGL.PAN_MCD :           D27 C |
 DTBL_SINGL.PCM_CUT :           C33 C |  DTBL_SINGL.PCM_EFFC :          BD5 C |
 DTBL_SINGL.PCM_NOTE :          BD9 C |  DTBL_SINGL.PCM_OFF :           C2C C |
 DTBL_SINGL.PCM_PANLIST :       D45 C |  DTBL_SINGL.PCM_SETCOFF :       C38 C |
 DTBL_SINGL.PSG_KEYON :         96A C |  DTBL_SINGL.RCYL_COM :          875 C |
 DTBL_SINGL.READFREQ_PCM :      C43 C | *DTBL_SINGL.READFREQ_PWM :      C48 C |
 DTBL_SINGL.RES_PAN :           D1D C |  DTBL_SINGL.SAME_PATCH :        E38 C |
 DTBL_SINGL.SAVE_ARG :          CEB C |  DTBL_SINGL.SET_WAVFREQ :       C4B C |
 DTBL_SINGL.SILN_DAC :          881 C |  DTBL_SINGL.SILN_FM :           884 C |
 DTBL_SINGL.SILN_PCM :          85F C |  DTBL_SINGL.SILN_PSG :          858 C |
 DTBL_SINGL.SILN_PSG_N :        854 C |  DTBL_SINGL.SILN_PWM :          86B C |
 DTBL_SINGL.SPCREGLIST :        A52 C |  DTBL_SINGL.TL_DOWN :           A7D C |
 DTBL_SINGL.VMUCH :             979 C |  DTBL_SINGL.VOLU :              D65 C |
 DTBL_SINGL.VOL_DVLD :          CBD C |  DTBL_SINGL.VPCM_CARRY :        C17 C |
 DTBL_SINGL.VPCM_SILN :         C14 C |  DTBL_SINGL.VPCM_ZERO :         C18 C |
 DTBL_SINGL.WRITE_TL :          B03 C |  DTBL_SINGL.WR_SPC :            A35 C |
 DTH :                           20 - |  DTL :                           1C - |
 DWAVEBUFF :                   1D00 C | *EMU :                            0 - |
 ENV :                            1 - |  EXTINT_DEFAULT :  FFFFFFFFFFFF1B66 C |
*EXT_3 :                          C - | *EXT_4 :                          E - |
 FALSE :                          0 - |  FDH :                            7 - |
 FDL :                            5 - |  FDRCHG :                        86 - |
 FDRSET :                        85 - | *FEN :                            2 - |
*FILEN_MARSCODE :              2908 C |  FILEN_Z80FILE :               28FA C |
 FILE_SUBDATA :                6080 C | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    168B C |  FMCACH_2 :                    16B3 C |
 FMCACH_3 :                    16DB C |  FMCACH_4 :                    1703 C |
 FMCACH_5 :                    172B C |  FMCACH_6 :                    1753 C |
 FMCACH_LIST :                 1BDA C |  FMFREQ_LIST :                 1457 C |
*FMINS_BASS_BIG_110 :        202629 C | *FMINS_BASS_BIG_114 :        202649 C |
*FMINS_BASS_BIG_122 :        202669 C | *FMINS_BASS_BIG_81 :         202609 C |
*FMINS_BASS_CAVE_47 :        202689 C | *FMINS_BASS_CLUB :           202DA9 C |
*FMINS_BASS_CLUB_108 :       2026A9 C | *FMINS_BASS_DUCK :           202D49 C |
*FMINS_BASS_FOOT_75 :        2026C9 C | *FMINS_BASS_GEM_26 :         2026E9 C |
 FMINS_BASS_GROOVE_1 :       2027A9 C | *FMINS_BASS_GROOVE_119 :     202709 C |
*FMINS_BASS_GROOVE_2 :       202DC9 C | *FMINS_BASS_HEAVY_107 :      202729 C |
*FMINS_BASS_HEAVY_118 :      202749 C | *FMINS_BASS_LOUD_117 :       202769 C |
*FMINS_BASS_LOW81 :          202A69 C | *FMINS_BASS_LOW_103 :        2027E9 C |
*FMINS_BASS_LOW_106 :        202809 C | *FMINS_BASS_LOW_126 :        202829 C |
*FMINS_BASS_LOW_46 :         202789 C | *FMINS_BASS_LOW_81 :         2027C9 C |
*FMINS_BASS_MID_111 :        202889 C | *FMINS_BASS_MID_19 :         202849 C |
*FMINS_BASS_MID_80 :         202869 C | *FMINS_BASS_POWER_123 :      2028A9 C |
*FMINS_BASS_SILENT_53 :      2028C9 C | *FMINS_BASS_SLAP_10 :        2028E9 C |
*FMINS_BASS_SLAP_105 :       202909 C | *FMINS_BASS_SYNTH_60 :       202929 C |
*FMINS_BASS_SYNTH_61 :       202949 C | *FMINS_BASS_SYNTH_72 :       202969 C |
*FMINS_BASS_SYNTH_73 :       202989 C | *FMINS_BASS_VLOW_74 :        2029A9 C |
 FMINS_BELL_MID36 :          202AC9 C |  FMINS_BRASS_7 :             202E09 C |
*FMINS_CLOSEDHAT :           202D69 C | *FMINS_DRUMS_KICK1 :         202CC9 C |
 FMINS_FLAUTE_1 :            2029E9 C |  FMINS_HATS_1 :              202AA9 C |
*FMINS_HBEAT_TOM :           202D09 C | *FMINS_ORGAN_DRAWBAR :       2029C9 C |
*FMINS_PIANO_AQUA :          202CE9 C | *FMINS_PSYNTH_PLUS :         202DE9 C |
*FMINS_SP_CLOSEDHAT :        202C79 C | *FMINS_SP_COWBELL :          202CA1 C |
*FMINS_SP_OPENHAT :          202C51 C |  FMINS_TRUMPET_1 :           202D29 C |
*FMINS_TRUMPET_15 :          202A89 C | *FMINS_TRUMPET_CARNIVAL :    202D89 C |
 FMINS_VIBRAPHONE_1 :        202A09 C | *FMINS_VIBRAPHONE_2 :        202A29 C |
*FMINS_XYLOPHONE :           202A49 C |  FMSPECIAL :                   1CF3 C |
*FMSPINS_CLACK_1 :           202AE9 C | *FMSPINS_COWBELL_H :         202B11 C |
*FMSPINS_COWBELL_L :         202B39 C | *FMSPINS_HATS_HQ :           202B61 C |
*FMSPINS_SFX_ALIEN :         202B89 C | *FMSPINS_SFX_KNCKBUZZ :      202BB1 C |
*FMSPINS_SFX_KNOCK_H :       202BD9 C | *FMSPINS_SFX_KNOCK_L :       202C01 C |
*FMSPINS_SFX_LASER :         202C29 C |  FM_AUTOREG :                  130F C |
 FM_SEND_1 :                   1313 C |  FM_SEND_2 :                   131E C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :    FFFFFFFFFFFF0170 C |
 GEMADMARESUME :   FFFFFFFFFFFF018E C |  GEMAFADESEQ :     FFFFFFFFFFFF0222 C |
 GEMAINIT :        FFFFFFFFFFFF0000 C |
 GEMAINIT.CLEANUP :                                        FFFFFFFFFFFF002C C |
 GEMAINIT.COPY :   FFFFFFFFFFFF003C C |
 GEMAINIT.NOT_PAL :                                        FFFFFFFFFFFF0062 C |
 GEMAINIT.WAIT :   FFFFFFFFFFFF0014 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :     FFFFFFFFFFFF01CC C |  GEMARESET :       FFFFFFFFFFFF0076 C |
 GEMASETBEATS :    FFFFFFFFFFFF025A C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01BA C |
 GEMASETSEQVOL :   FFFFFFFFFFFF023E C |  GEMASTOPALL :     FFFFFFFFFFFF0206 C |
 GEMASTOPSEQ :     FFFFFFFFFFFF01EA C |  GEMATEST :        FFFFFFFFFFFF01AC C |
 GEMAUPDATE :      FFFFFFFFFFFF0088 C |
 GEMAUPDATE.COPY_BYTES :                                   FFFFFFFFFFFF00C6 C |
 GEMAUPDATE.NO_SIZE :                                      FFFFFFFFFFFF00D4 C |
 GEMAUPDATE.NO_TASK :                                      FFFFFFFFFFFF00DA C |
 GEMA_INIT :                   1065 C |  GEMA_INIT.END_SETUP :         10A0 C |
 GEMA_INIT.SETUP_LIST :        1075 C |  GEMA_INIT.ST_COPY :           1094 C |
 GEMA_LASTBANK :               144D C |  GEMA_LASTBANK.WRITE :         1452 C |
 GET_TICK :                    10D1 C |  GET_TICK.CTNOTICK :           10EE C |
 GLBL_LASTORG :    FFFFFFFFFFFFB800 - |  GLBL_LASTPC :     FFFFFFFFFFFF2C00 - |
 GLBL_MDATA_RP :               6080 - |  GLBL_MDATA_ST :             200000 - |
 GTRK_TEST :                 200004 C |  GTRK_TEST.BLK :             200012 C |
 GTRK_TEST.INS :             202581 C |  GTRK_TEST.PAT :             200025 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   1F60 C |
 HEADEROUT_E :                 1F6E C | *HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF1B64 C |
*HIRQ_ON :                        4 - |  HTAG_CDSAVE :        "NIKONACD___" - |
 HTAG_CDVER :                   102 - |  HTAG_DATEINFO : "(C)USER 2024.???" - |
 HTAG_DISCID :        "NIKONACD   " - | *HTAG_DISCID_M :      "NIKONACD32X" - |
*HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
 HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
*HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
 HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
*HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
 HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
 HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 1F7A C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  IP_END :                       38E C |
 IP_START :                     356 C |  IP_START.WAIT :                366 C |
 IP_START.WAIT_VINT :           376 C |  ISOFILELIST :                 B844 C |
 ISOFILELIST_E :               C000 C |  ISO_FILELIST :                7AFC C |
 ISO_OUTPUT :                  C2FC C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
*JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
*JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
*JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
*JOYUP :                          1 - | *JOYX :                         400 - |
*JOYY :                         200 - | *JOYZ :                         100 - |
*LCHWIDTH :                      34 - | *LEDSET :                        95 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LSH :                            B - |  LSL :                            9 - |
*MACEXP :                         7 - |  MAINGEMASEQLIST :           200000 C |
*MAPMARS_TEST :              200180 C |  MAP_HARUNA :                226FD0 C |
 MAP_SISI :                  227230 C |  MAP_TESTBG :                227294 C |
 MAP_TESTBG2 :               227B74 C |  MARS :                           0 - |
 MARSBLOCK :                     37 C |  MARSCD :                         0 - |
 MARSUPD :                     1BE0 C |  MARS_RAMCODE :               5C000 C |
*MARS_RAMCODE_E :             5C000 C |  MARS_RAMCODE_EOF :           5C800 C |
 MAX_BUFFNTRY :                   8 - |  MAX_GLOBALS :                  800 - |
 MAX_MCDSTAMPS :                 20 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDMAPSPR :                  18 - |  MAX_MDOBJ :                     28 - |
 MAX_PALFDREQ :                   8 - |  MAX_RCACH :                     20 - |
 MAX_SC0_OPTIONS :                4 - |  MAX_SCRNBUFF :                1000 - |
 MAX_SLOTS :                      3 - |  MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   18 - |  MAX_TRFRPZ :                     8 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     10 - |
 MCD :                            1 - |  MCDBLOCK :                      36 C |
 MCDUPD :                      1BE1 C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    2800 C |
 MCD_MAIN.CLEANUP :            28A0 C |  MCD_MAIN.COPY_CODE :          28B4 C |
 MCD_MAIN.COPY_COLORS :        2818 C |  MCD_MAIN.COPY_NEW :           2886 C |
 MCD_MAIN.FADE_OUT :           281E C |  MCD_MAIN.LOOP_RAM :           28D0 C |
 MCD_MAIN.NEXT_COLOR :         2830 C |  MCD_MAIN.NOTHING :            2870 C |
 MCD_MAIN.NO_BLUE :            286C C |  MCD_MAIN.NO_GREEN :           2858 C |
 MCD_MAIN.NO_RED :             2844 C |  MCD_MAIN.WAIT_NEXT :          288C C |
 MCD_MEMORY :                     3 - |  MCD_SMPDATA :                 E000 C |
 MCD_SMPDATA_E :              5B800 C |  MDSTMP_BUFFINCR :               1A - |
 MDSTMP_CELLSTORAGE :            12 - |  MDSTMP_CURROUTFLIP :             E - |
*MDSTMP_DOTINCR :                16 - | *MDSTMP_FDROP :                  10 - |
 MDSTMP_FLAGS :                   0 - |  MDSTMP_LEN :                    1E - |
 MDSTMP_STMPOUTB :                C - |  MDSTMP_VRAMINCR :                A - |
 MDSTMP_VRAMLEN :                 8 - |  MDSTMP_VRAMMAIN :                2 - |
 MDSTMP_VRAMSEC :                 4 - |  MDSTMP_VRAMSIZE :                6 - |
*MD_BANK_SRAM :              A130F1 - |  MD_READMODES :    FFFFFFFFFFFF223C C |
 MD_READMODES.END :                                        FFFFFFFFFFFF22FA C |
 MD_READMODES.PICK_MODE :                                  FFFFFFFFFFFF227A C |
 MD_SCREEN00 :                5C800 C |  MD_SCREEN00_E :              5D000 C |
 MD_SCREEN01 :                5D000 C |  MD_SCREEN01_E :              5D800 C |
 MD_SCREEN02 :                5D800 C |  MD_SCREEN02_E :              5F000 C |
 MD_SCREEN03 :                5F000 C |  MD_SCREEN03_E :              5F800 C |
 MD_SCREEN04 :                5F800 C |  MD_SCREEN04_E :              60000 C |
 MD_SCREEN07 :                60000 C |  MD_SCREEN07_E :              61000 C |
 MD_SYSCODE :                  2916 C |  MD_SYSCODE_E :                4C10 C |
 MLASTPOS :                   A8080 - |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - |  MPADLBL :                    A8800 - |
 MPADLBL.THIS_SZ :              780 - | *MSCPAUSEOFF :                    4 - |
*MSCPAUSEON :                     3 - | *MSCPLAY :                       11 - |
 MSCPLAY1 :                      12 - |  MSCPLAYR :                      13 - |
*MSCPLAYT :                      14 - | *MSCSCANFF :                      5 - |
*MSCSCANFR :                      6 - | *MSCSCANOFF :                     7 - |
*MSCSEEK :                       15 - | *MSCSEEK1 :                      19 - |
*MSCSEEKT :                      16 - |  MSCSTOP :                        2 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             1F82 C |
*NIKONA_BUFFLIST_E :           1F9A C |  OBJECT_ANIMATE :  FFFFFFFFFFFF20B2 C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF2140 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF2132 C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF20F8 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF213C C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF2124 C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF2122 C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF20D0 C |
 OBJECT_INIT :     FFFFFFFFFFFF1FCE C |  OBJECT_INIT.CLR : FFFFFFFFFFFF1FD6 C |
 OBJECT_MAKE :     FFFFFFFFFFFF2010 C |
 OBJECT_MAKE.SEARCH :                                      FFFFFFFFFFFF201E C |
*OBJECT_MDMARS_GETSPRINFO :                                FFFFFFFFFFFF223A C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF207A C |
*OBJECT_RESETVARS :                                        FFFFFFFFFFFF2060 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF206E C |
 OBJECT_RUN :      FFFFFFFFFFFF1FDE C |
 OBJECT_RUN.NEXT_ONE :                                     FFFFFFFFFFFF1FE6 C |
 OBJECT_RUN.NO_CODE :                                      FFFFFFFFFFFF1FF2 C |
*OBJECT_SET :      FFFFFFFFFFFF1FFC C |  OBJECT_SPEED :    FFFFFFFFFFFF2082 C |
 OBJECT_TOUCH :    FFFFFFFFFFFF2146 C |
 OBJECT_TOUCH.CHECK_THIS :                                 FFFFFFFFFFFF217C C |
 OBJECT_TOUCH.EXIT_THIS :                                  FFFFFFFFFFFF2176 C |
 OBJECT_TOUCH.NEXT :                                       FFFFFFFFFFFF215E C |
 OBJECT_TOUCH.NOT_YTOP :                                   FFFFFFFFFFFF2238 C |
 OBJECT_TOUCH.SET_OK :                                     FFFFFFFFFFFF2236 C |
 OBJECT_TOUCH.SKIP :                                       FFFFFFFFFFFF216C C |
 OBJSET_ERROR :    FFFFFFFFFFFF2032 C |  OBJSET_GO :       FFFFFFFFFFFF203C C |
 OBJSET_GO.CLR :   FFFFFFFFFFFF2050 C |
 OBJSET_GO.EXIT_THIS :                                     FFFFFFFFFFFF2056 C |
 OBJSET_GO.FROM_DEL :                                      FFFFFFFFFFFF204A C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
 OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ONREG :                         11 - |
 ON_HOLD :                        2 - |  ON_PRESS :                       4 - |
 ON_RELEASE :                     6 - | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 - |
 PAD_VER :                        1 - |  PALFD_DELAY :                    1 - |
 PALFD_INCR :                     3 - |  PALFD_LEN :                      8 - |
 PALFD_NUM :                      6 - |  PALFD_REQ :                      0 - |
 PALFD_START :                    2 - | *PALFD_TARGET :                   4 - |
 PALFD_TIMER :                    5 - | *PALMARS_HARUNA :            200580 C |
*PALMARS_SISI :              2005A0 C | *PALMARS_TEST :              200000 C |
*PALMARS_TEST2 :             2005C0 C |  PALMODE :                       3E C |
 PAL_HARUNA :                226FB0 C |  PAL_SISI :                  227210 C |
 PAL_TESTBG :                227274 C |  PAL_TESTBG2 :               227B54 C |
 PAN :                            3 - |  PARP :                          34 - |
*PCM :                            0 - |  PCMCOM :                      15D7 C |
*PCMINS_KICK :                50C0E C | *PCMINS_MOVEME_BRASS :        4969A C |
*PCMINS_MOVEME_HIT :          485A0 C | *PCMINS_NADIE_L :             26BF6 C |
*PCMINS_NADIE_R :             34BA3 C | *PCMINS_PIANO :               42B50 C |
*PCMINS_PKICK :               4726C C | *PCMINS_PTOM :                479E6 C |
*PCMINS_SAURON_01 :           51588 C | *PCMINS_SAURON_02 :           52492 C |
*PCMINS_SAURON_03 :           53106 C | *PCMINS_SAURON_04 :           53DD4 C |
*PCMINS_SAURON_05 :           561B8 C | *PCMINS_SAURON_06 :           5AF70 C |
*PCMINS_SAURON_07 :           5D4FE C | *PCMINS_SAURON_08 :           60896 C |
*PCMINS_SAURON_09 :           625AA C | *PCMINS_SAURON_10 :           64474 C |
*PCMINS_SAURON_11 :           67CBC C | *PCMINS_SAURON_12 :           6BA36 C |
 PCMINS_SAURON_12_E.HERE :    6D22E C | *PCMINS_SNARE_MOVEME :        50284 C |
*PCMINS_TEST :                20000 C | *PEN :                           20 - |
 PICO :                           0 - |  PLC_HARUNA :                227180 C |
*PROC_CHIPS :                   627 C |  PSGCOM :                      164F C |
 PSGFREQ_LIST :                146F C |  PSGHATMODE :                  1CF2 C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PVOL :                          30 - |  PWMCOM :                      1617 C |
*PWMCTL :                        31 - | *PWMINTCLR :                     1C - |
*PWMIRQ_ON :                      1 - |  RAM_CDSUB_BRAMSTRINGS :       79A0 C |
 RAM_CDSUB_BRAMWORK :          7360 C |  RAM_CDSUB_CURRSAVEINFO :      7350 C |
 RAM_CDSUB_DOTCLEARFLAG :      7210 C |  RAM_CDSUB_FSBUFF :           14AFC C |
 RAM_CDSUB_PCMBUFF :           79AC C |  RAM_CDSUB_PCMENBL :           7218 C |
 RAM_CDSUB_PCMREQUPD :         7219 C |  RAM_CDSUB_PCMTABLE :          7ABC C |
 RAM_CDSUB_STAMPBUSY :         7208 C |  RAM_CDSUB_STAMPCBUFF :        7214 C |
 RAM_CDSUB_STAMPENBL :         7206 C |  RAM_CDSUB_STAMPH :            7204 C |
 RAM_CDSUB_STAMPINDXW :        7212 C |  RAM_CDSUB_STAMPLIST :         7250 C |
 RAM_CDSUB_STAMPNEXTRD :       720E C |  RAM_CDSUB_STAMPNEXTWR :       720C C |
 RAM_CDSUB_STAMPNUM :          7200 C |  RAM_CDSUB_STAMPOUTBOX :       7244 C |
*RAM_CDSUB_STAMPPENDING :      7216 C |  RAM_CDSUB_STAMPPROC :         721C C |
 RAM_CDSUB_STAMPREQUPD :       721A C |  RAM_CDSUB_STAMPSIZE :         720A C |
 RAM_CDSUB_STAMPW :            7202 C |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFEDAC C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFDBF8 C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFEDA6 C |  RAM_HORSCROLL :   FFFFFFFFFFFFD05E C |
 RAM_INDXPALFADE : FFFFFFFFFFFFDBFC C |  RAM_INPUTDATA :   FFFFFFFFFFFFDD18 C |
*RAM_MCDEXIT :     FFFFFFFFFFFFEDB8 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
*RAM_MDMARS_COMMBUFF :                                     FFFFFFFFFFFFC808 C |
*RAM_MDMARS_MPALFDLIST :                                   FFFFFFFFFFFFC810 C |
*RAM_MDMARS_PALFD :                                        FFFFFFFFFFFFC80C C |
 RAM_MDMCD_STAMPS :                                        FFFFFFFFFFFFC800 C |
 RAM_MDMCD_STAMPSETT :                                     FFFFFFFFFFFFCC00 C |
 RAM_MDMISC :      FFFFFFFFFFFFC800 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFDC18 C |
 RAM_MDVIDCLR_E :  FFFFFFFFFFFFDA72 C |  RAM_MDVIDEO :     FFFFFFFFFFFFCC1E C |
 RAM_MEGACD :              FFFFFD00 - |  RAM_OBJECTS :     FFFFFFFFFFFFDD58 C |
 RAM_PALETTE :     FFFFFFFFFFFFD96E C |  RAM_PALETTEFADE : FFFFFFFFFFFFD9EE C |
 RAM_PALFADELIST : FFFFFFFFFFFFCC1E C |  RAM_SAVEDATA :    FFFFFFFFFFFFDC18 C |
 RAM_SAVEENABLE :  FFFFFFFFFFFFEDB2 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFDC1C C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFDC18 C |  RAM_SCREENMODE :  FFFFFFFFFFFFEDB4 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFEDB6 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SETPRNTVRAM : FFFFFFFFFFFFDC00 C |
 RAM_SETPRNTVRAMW :                                        FFFFFFFFFFFFDC02 C |
 RAM_SOUNDBUFF :           FFFFFF00 - |  RAM_SPRITES :     FFFFFFFFFFFFD46E C |
 RAM_SPRLINKNUM :  FFFFFFFFFFFFDBFE C |  RAM_SPRMAPLIST :  FFFFFFFFFFFFCC5E C |
 RAM_SPRPZLIST :   FFFFFFFFFFFFCDDE C | *RAM_STACK :               FFFFFD00 - |
 RAM_SYSRANDOM :   FFFFFFFFFFFFED9C C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFED98 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFEDA0 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFDA6E C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFDA78 C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFDA70 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFDC0E C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFDC10 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFDC12 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFDC14 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFDC16 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFDC06 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFDC04 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFDC0C C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFDC0A C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFDC08 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFD41E C |  RAM_ZCDFLAG_D :           FFFFFF00 - |
*RCHWIDTH :                      36 - | *RELAXED :                        0 - |
*RES :                            2 - | *ROMPAUSEOFF :                    9 - |
*ROMPAUSEON :                     8 - | *ROMREAD :                       17 - |
*ROMREADE :                      21 - |  ROMREADN :                      20 - |
*ROMSEEK :                       18 - | *ROM_END :                    A8800 C |
 RRT :                           14 - |  SAMPLEHEAD :                  1F74 C |
 SBEATACC :                    1CF7 C |  SBEATPTCK :                   1CF9 C |
*SCDINIT :                       8E - | *SCDPQ :                         93 - |
*SCDPQL :                        94 - | *SCDREAD :                       92 - |
*SCDSTART :                      8F - | *SCDSTAT :                       91 - |
*SCDSTOP :                       90 - | *SCPU_BRAM :               FFFE8000 - |
 SCPU_CMDLIST :                60F4 C |  SCPU_DATA :                  20000 C |
 SCPU_INIT :                   602A C |  SCPU_INIT.DRV_INIT :          607E C |
 SCPU_IRQ :                    6094 C |  SCPU_IRQ.NOT_SOUND :          60A8 C |
 SCPU_MAIN :                   60B2 C |  SCPU_PCM :                FFFF0000 - |
 SCPU_RAM :                    7200 C |  SCPU_REG :                FFFF8000 - |
 SCPU_STAMP :                  608E C |  SCPU_TIMER :                  60AE C |
 SCPU_USER :                   60B0 C |  SCPU_WRAM :                  80000 - |
 SET_CHIPS :                    60B C | *SET_DEBUGMODE :                  0 - |
*SET_DEFAUTODMA :               480 - |  SET_INITMODE :                   7 - |
 SET_NULLVRAM :                 7FE - |  SET_RAMLIMIT :              FFFC00 - |
 SET_SRAMSIZE :                 100 - |  SET_STAMPPOV :                 100 - |
 SET_WRAMSIZE :               3C000 - | *SHIFT :                          2 - |
 SIZEOF_INPUT :                  10 - |  SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |
 SIZEOF_MDMISC :   FFFFFFFFFFFFCC1E C |  SIZEOF_MDRAM :    FFFFFFFFFFFFEDBA C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFEDBA C |  SIZEOF_MDVID :    FFFFFFFFFFFFDC18 C |
*SIZEOF_SAVEINFO : FFFFFFFFFFFFDC20 C | *SIZEOF_SUBCPU :              14B7C C |
 SLV :                           10 - |  SNDLOCKZ80 :      FFFFFFFFFFFF00DC C |
 SNDLOCKZ80.WAIT : FFFFFFFFFFFF00E4 C |  SNDREQ_ENTER :    FFFFFFFFFFFF00FA C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF011E C |
 SNDREQ_EXIT :     FFFFFFFFFFFF012E C | *SNDREQ_SADDR :    FFFFFFFFFFFF015A C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0162 C |  SNDREQ_SCMD :     FFFFFFFFFFFF0148 C |
 SNDREQ_SLONG :    FFFFFFFFFFFF0156 C |  SNDREQ_SWORD :    FFFFFFFFFFFF015E C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF00F0 C |  SOUND_INIT :      FFFFFFFFFFFF1898 C |
 SOUND_UPDATE :    FFFFFFFFFFFF1894 C |  SPCDDA_RESETVOLUME :          6382 C |
 SPINITFS :                    6490 C |  SPREADSECTORSN :              6408 C |
 SPREADSECTORSN.WAITTRANSFER : 6464 C |  SPREADSECTORSN.WAIT_READ :    644E C |
 SPREADSECTORSN.WAIT_STAT :    643C C |  SPSEARCHFILE :                64CC C |
 SPSEARCHFILE.CHK_STR :        64F6 C |  SPSEARCHFILE.FAILED_SRCH :    651A C |
 SPSEARCHFILE.FOUND_FILE :     6506 C |  SPSEARCHFILE.NEXT_FILE :      64D8 C |
 SPSEARCHFILE.NON_FILE :       6502 C |  SP_END :                      1A00 C |
 SP_START :                     800 C |  ST :                             D - |
 STANDBY :                        3 - | *STMPC_DX :                       C - |
*STMPC_DY :                      10 - |  STMPC_LEN :                     28 - |
 STMPC_ROT_COS :                 26 - |  STMPC_ROT_SIN :                 24 - |
 STMPC_TX :                      14 - |  STMPC_TY :                      18 - |
 STMPC_X :                        4 - |  STMPC_XC :                       0 - |
 STMPC_XMUL :                    1C - |  STMPC_Y :                        8 - |
 STMPC_YC :                       2 - |  STMPC_ZMUL :                    1E - |
 STMPC_ZMUL_COS :                22 - |  STMPC_ZMUL_SIN :                20 - |
*STMPI_FLAGS :                    A - |  STMPI_LEN :                      C - |
 STMPI_MAP :                      0 - |  STMPI_X :                        2 - |
 STMPI_XR :                       6 - |  STMPI_Y :                        4 - |
 STMPI_YD :                       8 - |  SUBTASK_CMND00 :              6134 C |
 SUBTASK_CMND01 :              6136 C |  SUBTASK_CMND01.EXIT_NOW :     61A0 C |
 SUBTASK_CMND01.NEXT_PACKET :  615A C |  SUBTASK_CMND01.WAIT_MAIN :    6178 C |
 SUBTASK_CMND01.WAIT_MAIN_O :  6194 C |  SUBTASK_CMND02 :              61A8 C |
 SUBTASK_CMND02.WAIT_RET :     61DC C |  SUBTASK_CMND04 :              61E8 C |
 SUBTASK_CMND04.EXIT_NOW :     6256 C |  SUBTASK_CMND04.NEXT_PACKET :  6218 C |
 SUBTASK_CMND04.WAIT_ENTER :   61F4 C |  SUBTASK_CMND04.WAIT_MAIN :    623E C |
 SUBTASK_CMND07 :              6258 C |  SUBTASK_CMND08 :              6264 C |
 SUBTASK_CMND08.BIG_FAIL :     62B8 C |  SUBTASK_CMND08.COPY_PASTE :   6276 C |
 SUBTASK_CMND09 :              62C6 C |  SUBTASK_CMND09.WAIT_DMNA :    62CA C |
 SUBTASK_CMND0A :              62F0 C |  SUBTASK_CMND0A.WAIT_DMNA :    62F4 C |
 SUBTASK_CMND10 :              633E C |  SUBTASK_CMND11 :              6354 C |
 SUBTASK_CMND14 :              636A C |  SUBTASK_CMND16 :              6374 C |
 SUBTASK_CMND17 :              6382 C |  SUBTASK_CMND18 :              63A4 C |
 SUBTASK_CMND19 :              63D8 C |  SUBTASK_CMND19.SET_RET :      63FE C |
 SUBTASK_RETERR_NOFILE :       6336 C |  SUBTSK_BRAMCALL :             631A C |
 SUBTSK_RETURNFAIL :           632E C |  SYSBCD_SPOUT :    FFFFFFFFFFFF1D6C C |
*SYSMARS_FRAMEBUFFER :       840000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
 SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF1F64 C |
 SYSMDMCD_SETCDDA.FAIL_SAFE :                              FFFFFFFFFFFF1F7C C |
 SYSRND_MKVALUE :  FFFFFFFFFFFF1B82 C |
 SYSRND_MKVALUE.HAS_SEED :                                 FFFFFFFFFFFF1B94 C |
*SYSTEM_BCD_ADDB : FFFFFFFFFFFF1D44 C |  SYSTEM_BCD_ADDL : FFFFFFFFFFFF1D52 C |
*SYSTEM_BCD_ADDW : FFFFFFFFFFFF1D4C C | *SYSTEM_BCD_SUBB : FFFFFFFFFFFF1D1C C |
 SYSTEM_BCD_SUBL : FFFFFFFFFFFF1D2A C | *SYSTEM_BCD_SUBW : FFFFFFFFFFFF1D24 C |
 SYSTEM_DEFAULT :  FFFFFFFFFFFF1B42 C |
 SYSTEM_DEFAULT.CLR_LOOP :                                 FFFFFFFFFFFF1B50 C |
 SYSTEM_DICEROLL : FFFFFFFFFFFF1BCC C |
*SYSTEM_DICEROLL_SEED :                                    FFFFFFFFFFFF1BAC C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF188C C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1852 C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF1890 C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF1856 C |
 SYSTEM_INIT :     FFFFFFFFFFFF17A8 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF180A C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF17B4 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF189C C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF18C8 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF191E C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF19C8 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF19C2 C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF18FE C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF1A4E C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF18CE C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF18E4 C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF18F0 C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF18FC C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF18B0 C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF1990 C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF19BC C |
*SYSTEM_MDMARS_SENDDATA :                                  FFFFFFFFFFFF1FC0 C |
*SYSTEM_MDMCD_CDDAFADE :                                   FFFFFFFFFFFF1F90 C |
*SYSTEM_MDMCD_CDDAPLAY :                                   FFFFFFFFFFFF1F52 C |
*SYSTEM_MDMCD_CDDAPLAYL :                                  FFFFFFFFFFFF1F5C C |
 SYSTEM_MDMCD_CDDASTOP :                                   FFFFFFFFFFFF1F82 C |
 SYSTEM_MDMCD_CHECKHOME :                                  FFFFFFFFFFFF1F18 C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                        FFFFFFFFFFFF1F3E C |
 SYSTEM_MDMCD_CHECKWRAM :                                  FFFFFFFFFFFF1E0C C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                           FFFFFFFFFFFF1E1C C |
 SYSTEM_MDMCD_EXITSHELL :                                  FFFFFFFFFFFF1F48 C |
 SYSTEM_MDMCD_GIVEWRAM :                                   FFFFFFFFFFFF1E22 C |
 SYSTEM_MDMCD_INTERRUPT :                                  FFFFFFFFFFFF1D9E C |
 SYSTEM_MDMCD_RDFILE_RAM :                                 FFFFFFFFFFFF1E2E C |
 SYSTEM_MDMCD_RDFILE_RAM.COPY_RAM :                        FFFFFFFFFFFF1E6C C |
 SYSTEM_MDMCD_RDFILE_RAM.WAIT_SUB :                        FFFFFFFFFFFF1E9A C |
 SYSTEM_MDMCD_RDFILE_WRAM :                                FFFFFFFFFFFF1ED0 C |
*SYSTEM_MDMCD_SUBENTER :                                   FFFFFFFFFFFF1DB6 C |
 SYSTEM_MDMCD_SUBENTER.WAIT_SUB_O :                        FFFFFFFFFFFF1DB6 C |
 SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF1DC0 C |
 SYSTEM_MDMCD_SUBTASK.MAKE_SURE :                          FFFFFFFFFFFF1DDC C |
 SYSTEM_MDMCD_SUBTASK.WAIT_FIRST :                         FFFFFFFFFFFF1DCA C |
 SYSTEM_MDMCD_SUBTASK.WAIT_SUB_I :                         FFFFFFFFFFFF1DE6 C |
 SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF1DAC C |
 SYSTEM_MDMCD_SUBWAIT.WAIT_SUB_O :                         FFFFFFFFFFFF1DAC C |
 SYSTEM_MDMCD_WAITWRAM :                                   FFFFFFFFFFFF1E00 C |
 SYSTEM_RANDOM :   FFFFFFFFFFFF1B72 C |
 SYSTEM_RANDOM_SEED :                                      FFFFFFFFFFFF1B68 C |
 SYSTEM_RENDER :   FFFFFFFFFFFF1816 C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF183C C |
*SYSTEM_RENDER.FROM_LATE :                                 FFFFFFFFFFFF1834 C |
 SYSTEM_RENDER.WAIT_EARLY :                                FFFFFFFFFFFF1824 C |
 SYSTEM_RENDER.WAIT_VBLANK :                               FFFFFFFFFFFF183E C |
 SYSTEM_SETDATABANK :                                      FFFFFFFFFFFF1FC4 C |
 SYSTEM_SETINTJUMPS :                                      FFFFFFFFFFFF1D84 C |
 SYSTEM_SETINTJUMPS.NO_EXINT :                             FFFFFFFFFFFF1D9C C |
 SYSTEM_SETINTJUMPS.NO_HINT :                              FFFFFFFFFFFF1D94 C |
 SYSTEM_SETINTJUMPS.NO_VINT :                              FFFFFFFFFFFF1D8C C |
*SYSTEM_SINEWAVE : FFFFFFFFFFFF1BF0 C |
*SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF1BE6 C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF1A54 C |
 SYSTEM_SRAMINIT.ALREADY_SET :                             FFFFFFFFFFFF1AC0 C |
*SYSTEM_SRAMINIT.CANT_USE :                                FFFFFFFFFFFF1ABE C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF1AA8 C |
 SYSTEM_SRAMINIT.CONT_SAVE :                               FFFFFFFFFFFF1ABC C |
 SYSTEM_SRAMINIT.COPY_PASTE :                              FFFFFFFFFFFF1A6A C |
*SYSTEM_SRAMINIT.NOT_FAIL :                                FFFFFFFFFFFF1A8A C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF1B0A C |
 SYSTEM_SRAMLOAD.CANT_USE :                                FFFFFFFFFFFF1B40 C |
 SYSTEM_SRAMLOAD.COPY_SAVE :                               FFFFFFFFFFFF1B32 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF1AC2 C |
 SYSTEM_SRAMSAVE.CANT_USE :                                FFFFFFFFFFFF1B08 C |
 SYSTEM_SRAMSAVE.COPY_SAVE :                               FFFFFFFFFFFF1ADC C |
 SYSTEM_SRAMSAVE.SAVE_GOOD :                               FFFFFFFFFFFF1B02 C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :  FFFFFFFFFFFF1858 C |
 SYS_MARSSLVCMD.WAIT_EXIT :                                FFFFFFFFFFFF187E C |
 SYS_SINEWAVE :    FFFFFFFFFFFF1BF4 C |
 SYS_SINEWAVE.LOC_7EFA :                                   FFFFFFFFFFFF1C02 C |
 SYS_SINEWAVE.LOC_7F0C :                                   FFFFFFFFFFFF1C14 C |
 SYS_SINEWAVE.SINE_DATA :                                  FFFFFFFFFFFF1C1A C |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 TAG_SRAMDATA :              "SAVE" - |  TBLBUFF_READ :                 653 C |
 TBLBUFF_READ.DONT_RES :        717 C |  TBLBUFF_READ.DO_CHIP :         6B2 C |
 TBLBUFF_READ.GRAB_LINK :       6FB C |  TBLBUFF_READ.HAS_INDX :        68E C |
 TBLBUFF_READ.INVLDL :          73F C |  TBLBUFF_READ.L_HIPRIO :        7CB C |
 TBLBUFF_READ.NEW_CHIP :        77C C |  TBLBUFF_READ.NEW_LINK :        7C8 C |
 TBLBUFF_READ.NEW_LINK_O :      7C0 C |  TBLBUFF_READ.NEW_LINK_Z :      7BC C |
 TBLBUFF_READ.NEXTSRCH_TBL :    7B5 C |  TBLBUFF_READ.NEXT_INDX :       681 C |
 TBLBUFF_READ.NEXT_PRIO :       79E C |  TBLBUFF_READ.NO_INDX :         6AA C |
 TBLBUFF_READ.PASS_2 :          79D C |  TBLBUFF_READ.PICK_TBL :        7EE C |
 TBLBUFF_READ.REFILL :          778 C |  TBLBUFF_READ.REROLL :          755 C |
 TBLBUFF_READ.RNOT_PSG :        77A C |  TBLBUFF_READ.SAME_LINK :       71A C |
 TBLBUFF_READ.SET_ASFULL :      7EB C |  TBLBUFF_READ.SINGL_FREE :      7D9 C |
 TBLBUFF_READ.SINGL_LINK :      747 C |  TBLBUFF_READ.SRCH_FREE :       78D C |
 TBLBUFF_READ.SRCH_LINK :       726 C |  TBLBUFF_READ.SRCH_LLOOP :      730 C |
 TBLBUFF_READ.TRACK_CONT :      66A C |  TBLBUFF_READ.VALID :           67F C |
 TBLFM :                       1A6E C |  TBLFM3 :                      1ACE C |
 TBLFM6 :                      1AE6 C |  TBLLIST :                     1A60 C |
 TBLPCM :                      1B00 C |  TBLPSG :                      1BFE C |
 TBLPSGN :                     1BC2 C |  TBLPWM :                      1C48 C |
 TBLZ_CLEAR :                   FA4 C |  TBLZ_CLEAR_E :                 FAC C |
 TBLZ_CLEAR_E.CLRFULL :         FB3 C | *TESTENTRY :                     1E - |
*TESTENTRYLOOP :                 1F - | *TEXTR_HARUNA :               10900 C |
 TH :                      20000000 - |  TICKCNT :                     1BFD C |
 TICKFLAG :                    1BFC C |  TICKSPSET :                   1BFB C |
*TIME :               "02:15:52 AM" - | *TIMERCTL :                      30 - |
*TMR :                           2C - |  TRACK_OUT :                    5C6 C |
 TRACK_OUT.INDX_DEL :           5D4 C |  TRACK_OUT.NOTHIN :             602 C |
 TRANSFERROM :                 10F2 C |  TRANSFERROM.DOUBLE :          1115 C |
 TRANSFERROM.FROM_RAM :        1139 C |  TRANSFERROM.TRANSFER :        1159 C |
 TRANSFERROM.WAIT :            1150 C |  TRANSFERROM.X68KLAST :        1192 C |
 TRANSFERROM.X68KLOOP :        117E C |  TRANSFERROM.X68KLPWT :        11A0 C |
 TRANSFERROM.X68KNOCARRY :     1133 C |  TRANSFERROM.X68KPWTLP :       11A2 C |
 TRKBLKS_0 :                   17DB C |  TRKBLKS_1 :                   17E3 C |
 TRKBLKS_2 :                   17EB C |  TRKBUFF_0 :                   17F3 C |
 TRKBUFF_1 :                   1832 C |  TRKBUFF_2 :                   1871 C |
 TRKCACH_0 :                   1F00 C |  TRKCACH_1 :                   1F20 C |
 TRKCACH_2 :                   1F40 C |  TRKCHNLS :                    1E00 C |
 TRKHDRS_0 :                   177B C |  TRKHDRS_1 :                   179B C |
 TRKHDRS_2 :                   17BB C |  TRKINFOCACH :                 1F70 C |
 TRK_BANKBLK :                   16 - |  TRK_BANKHEADS :                 15 - |
 TRK_BLOCKS :                     4 - |  TRK_CACH :                       8 - |
 TRK_CACHHALF :                  10 - |  TRK_CHNINDX :                   25 - |
 TRK_CURRBLK :                   13 - |  TRK_MAXCHNL :                   17 - |
 TRK_PATT :                       6 - |  TRK_PRIORITY :                  14 - |
 TRK_READ :                       A - |  TRK_ROMBLKS :                   22 - |
 TRK_ROMINST :                   1F - |  TRK_ROMPATT :                   1C - |
 TRK_ROMPATTREAD :               19 - |  TRK_ROWPAUSE :                  11 - |
 TRK_ROWS :                       C - |  TRK_SEQID :                      1 - |
 TRK_SETBLK :                     2 - |  TRK_STATUS :                     0 - |
 TRK_TICKSET :                    3 - |  TRK_TICKTMR :                   12 - |
 TRK_VOLFDTARGET :               18 - |  TRK_VOLMASTER :                  E - |
*TRUE :                           1 - | *TVMODE :                         0 - |
 UPD_TRACK :                    237 C |  UPD_TRACK.CHNL_FREE :          343 C |
 UPD_TRACK.CONT_CHNL :          34E C |  UPD_TRACK.DECROW :             2F2 C |
 UPD_TRACK.DECROW_E :           2F5 C |  UPD_TRACK.EFFECT_FILL :        51A C |
 UPD_TRACK.EFF_A :              3C8 C |  UPD_TRACK.EFF_B :              3D9 C |
 UPD_TRACK.EFF_C :              3F7 C |  UPD_TRACK.EXIT :               2E6 C |
 UPD_TRACK.FADE_OUT :           273 C |  UPD_TRACK.FIRST_BLK :          44E C |
 UPD_TRACK.FIRST_FILL :         521 C |  UPD_TRACK.FIRST_HEAD :         496 C |
 UPD_TRACK.GRAB_RHEAD :         5B3 C |  UPD_TRACK.HAS_NOTE :           2FD C |
 UPD_TRACK.INC_CPATT :          3FA C |  UPD_TRACK.KEEP_BLK :           46C C |
 UPD_TRACK.KEEP_IT :            4BC C |  UPD_TRACK.KEEP_VOL :           289 C |
 UPD_TRACK.NEXT_CHNL :          328 C |  UPD_TRACK.NEXT_NOTE :          2D6 C |
 UPD_TRACK.NO_EFF :             394 C |  UPD_TRACK.NO_GLBL :            561 C |
 UPD_TRACK.NO_INS :             376 C |  UPD_TRACK.NO_NOTE :            36B C |
 UPD_TRACK.NO_VOL :             381 C |  UPD_TRACK.OLD_TYPE :           35F C |
 UPD_TRACK.RAN_OUT :            408 C |  UPD_TRACK.READ_TRACK :         24F C |
 UPD_TRACK.ROW_ACTIVE :         2CF C |  UPD_TRACK.SET_TRACK :          432 C |
 UPD_TRACK.SFXMD :              293 C |  UPD_TRACK.SRCH_NEW :           323 C |
 UPD_TRACK.TOO_MUCH :           27F C |  UPD_TRACK.TRACK_END :          50B C |
*VBLK :                          80 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |
 VIDEO_BUILDSPRITES :                                      FFFFFFFFFFFF0468 C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                           FFFFFFFFFFFF0620 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R :                            FFFFFFFFFFFF05FE C |
 VIDEO_BUILDSPRITES.DONT_ADD :                             FFFFFFFFFFFF05D2 C |
 VIDEO_BUILDSPRITES.EX_VRAM :                              FFFFFFFFFFFF051E C |
 VIDEO_BUILDSPRITES.EX_VRAMS :                             FFFFFFFFFFFF0542 C |
 VIDEO_BUILDSPRITES.EX_YEXT :                              FFFFFFFFFFFF05A6 C |
 VIDEO_BUILDSPRITES.FIRST_SPR :                            FFFFFFFFFFFF0488 C |
*VIDEO_BUILDSPRITES.FREEZE :                               FFFFFFFFFFFF05F6 C |
 VIDEO_BUILDSPRITES.MK_PZ :                                FFFFFFFFFFFF04F4 C |
 VIDEO_BUILDSPRITES.NEXT :                                 FFFFFFFFFFFF04D0 C |
 VIDEO_BUILDSPRITES.NEXT_PZ :                              FFFFFFFFFFFF0490 C |
 VIDEO_BUILDSPRITES.NO_MAP :                               FFFFFFFFFFFF05E6 C |
 VIDEO_BUILDSPRITES.NO_PZ :                                FFFFFFFFFFFF05E2 C |
*VIDEO_BUILDSPRITES.NO_SLOT :                              FFFFFFFFFFFF05EC C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                           FFFFFFFFFFFF0634 C |
 VIDEO_BUILDSPRITES.NO_SLOT_R :                            FFFFFFFFFFFF0612 C |
 VIDEO_BUILDSPRITES.NO_SLOT_S :                            FFFFFFFFFFFF04C0 C |
 VIDEO_BUILDSPRITES.STOP_ALL :                             FFFFFFFFFFFF05F0 C |
 VIDEO_BUILDSPRITES.VRAM_H :                               FFFFFFFFFFFF0572 C |
 VIDEO_BUILDSPRITES.VRAM_V :                               FFFFFFFFFFFF055A C |
 VIDEO_CLEAR :     FFFFFFFFFFFF066E C |
 VIDEO_CLEAR.CLR_ME :                                      FFFFFFFFFFFF0678 C |
 VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF068E C |
 VIDEO_CLEARSCREEN.NOT_SMALL :                             FFFFFFFFFFFF06B4 C |
*VIDEO_COPY :      FFFFFFFFFFFF0A1E C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0A28 C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0A84 C |
 VIDEO_DEFAULT :   FFFFFFFFFFFF0300 C |
 VIDEO_DEFAULT.CLR_STAMPS :                                FFFFFFFFFFFF0308 C |
 VIDEO_DISPLAYOFF :                                        FFFFFFFFFFFF06C8 C |
 VIDEO_DISPLAYON : FFFFFFFFFFFF06BC C |  VIDEO_DMAOFF :    FFFFFFFFFFFF06E0 C |
 VIDEO_DMAON :     FFFFFFFFFFFF06D4 C |
 VIDEO_FADEIN_FULL :                                       FFFFFFFFFFFF0E74 C |
 VIDEO_FADEOUT_FULL :                                      FFFFFFFFFFFF0E86 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0ED8 C |
*VIDEO_FADEPAL_LIST :                                      FFFFFFFFFFFF0F2E C |
 VIDEO_FADEPAL_LIST.INVALID :                              FFFFFFFFFFFF0F48 C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F3C C |
 VIDEO_FILL :      FFFFFFFFFFFF09A6 C |  VIDEO_INIT :      FFFFFFFFFFFF0270 C |
 VIDEO_INIT.CLR_D :                                        FFFFFFFFFFFF02A6 C |
 VIDEO_INIT.CLR_PREQ :                                     FFFFFFFFFFFF02BE C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF027A C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF028C C |
 VIDEO_INIT.DEF_REGSET :                                   FFFFFFFFFFFF02F6 C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF02E4 C |
*VIDEO_INTENABLE : FFFFFFFFFFFF06F8 C |  VIDEO_LOADART :   FFFFFFFFFFFF0850 C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF092E C |
 VIDEO_LOADART.LAST_SET :                                  FFFFFFFFFFFF08A0 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF08A8 C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF08D2 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF092E C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF089A C |
 VIDEO_LOADART.RAM_WRITE :                                 FFFFFFFFFFFF0930 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF0944 C |
*VIDEO_LOADART_LIST :                                      FFFFFFFFFFFF0986 C |
 VIDEO_LOADART_LIST.INVALID :                              FFFFFFFFFFFF09A0 C |
 VIDEO_LOADART_LIST.NEXT_ONE :                             FFFFFFFFFFFF0992 C |
 VIDEO_LOADMAP :   FFFFFFFFFFFF0B80 C |
 VIDEO_LOADMAP.BAD_SIZE :                                  FFFFFFFFFFFF0BF0 C |
 VIDEO_LOADMAP.MK_CELL :                                   FFFFFFFFFFFF0BE0 C |
 VIDEO_LOADMAP.NON_BLANK :                                 FFFFFFFFFFFF0BDE C |
 VIDEO_LOADMAP.X_LOOP :                                    FFFFFFFFFFFF0BCE C |
 VIDEO_LOADMAP.Y_LOOP :                                    FFFFFFFFFFFF0BBA C |
 VIDEO_LOADMAPV :  FFFFFFFFFFFF0BF6 C |
 VIDEO_LOADMAPV.BAD_SIZE :                                 FFFFFFFFFFFF0C78 C |
 VIDEO_LOADMAPV.BAD_SIZE_D :                               FFFFFFFFFFFF0CE0 C |
 VIDEO_LOADMAPV.DBLE_MODE :                                FFFFFFFFFFFF0C7E C |
 VIDEO_LOADMAPV.MK_CELL :                                  FFFFFFFFFFFF0C62 C |
 VIDEO_LOADMAPV.MK_CELL_D :                                FFFFFFFFFFFF0CCA C |
 VIDEO_LOADMAPV.NON_BLANK :                                FFFFFFFFFFFF0C60 C |
 VIDEO_LOADMAPV.NON_BLANK_D :                              FFFFFFFFFFFF0CC2 C |
 VIDEO_LOADMAPV.X_LOOP :                                   FFFFFFFFFFFF0C3A C |
 VIDEO_LOADMAPV.X_LOOP_D :                                 FFFFFFFFFFFF0C98 C |
 VIDEO_LOADMAPV.Y_LOOP :                                   FFFFFFFFFFFF0C40 C |
 VIDEO_LOADMAPV.Y_LOOP_D :                                 FFFFFFFFFFFF0C9E C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0EE2 C |
*VIDEO_LOADPAL_LIST :                                      FFFFFFFFFFFF0F0E C |
 VIDEO_LOADPAL_LIST.INVALID :                              FFFFFFFFFFFF0F28 C |
 VIDEO_LOADPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0F1C C |
 VIDEO_MAKEDMAENTRY :                                      FFFFFFFFFFFF0A9A C |
 VIDEO_MAKEDMAENTRY.LAST_SET :                             FFFFFFFFFFFF0AEA C |
 VIDEO_MAKEDMAENTRY.MK_SET :                               FFFFFFFFFFFF0AF2 C |
 VIDEO_MAKEDMAENTRY.NORMAL :                               FFFFFFFFFFFF0AE4 C |
 VIDEO_MAKEDMAENTRY.NOT_WRAM :                             FFFFFFFFFFFF0B3E C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :                              FFFFFFFFFFFF0B7E C |
 VIDEO_MAKEFADE :  FFFFFFFFFFFF0E9A C | *VIDEO_MAKESPR :   FFFFFFFFFFFF1248 C |
 VIDEO_MAKESPR.CHK_FREE :                                  FFFFFFFFFFFF1254 C |
 VIDEO_MAKESPR.MK_SPR :                                    FFFFFFFFFFFF1266 C |
 VIDEO_MAKESPRMAP :                                        FFFFFFFFFFFF12F8 C |
 VIDEO_MAKESPRMAP.CHK_FREE :                               FFFFFFFFFFFF1304 C |
 VIDEO_MAKESPRMAP.MK_SPR :                                 FFFFFFFFFFFF1314 C |
 VIDEO_MAKESPRMAP_DMA :                                    FFFFFFFFFFFF12E0 C |
*VIDEO_MDMARS_MAKEFADE :                                   FFFFFFFFFFFF0E98 C |
*VIDEO_MDMCD_MAKESTAMP :                                   FFFFFFFFFFFF1716 C |
 VIDEO_MDMCD_MAKESTAMP.CHK_FREE :                          FFFFFFFFFFFF1722 C |
 VIDEO_MDMCD_MAKESTAMP.MK_SPR :                            FFFFFFFFFFFF1732 C |
 VIDEO_MDMCD_SETSTAMP :                                    FFFFFFFFFFFF1708 C |
 VIDEO_MDMCD_STAMPDISABLE :                                FFFFFFFFFFFF1676 C |
 VIDEO_MDMCD_STAMPDOTMAP :                                 FFFFFFFFFFFF1696 C |
 VIDEO_MDMCD_STAMPDOTMAP.BAD_SIZE :                        FFFFFFFFFFFF1702 C |
 VIDEO_MDMCD_STAMPDOTMAP.X_LOOP :                          FFFFFFFFFFFF16D2 C |
 VIDEO_MDMCD_STAMPDOTMAP.Y_LOOP :                          FFFFFFFFFFFF16D8 C |
 VIDEO_MDMCD_STAMPENABLE :                                 FFFFFFFFFFFF1604 C |
 VIDEO_MDMCD_STAMPENABLE.CLR_SETT :                        FFFFFFFFFFFF1614 C |
 VIDEO_MDMCD_STAMPENABLE.DONT_USE :                        FFFFFFFFFFFF164C C |
 VIDEO_MDMCD_STAMPINIT :                                   FFFFFFFFFFFF13A2 C |
 VIDEO_MDMCD_STAMPINIT.EXIT_NOW :                          FFFFFFFFFFFF13D6 C |
 VIDEO_MDMCD_STAMPINIT.MK_INITBUFF :                       FFFFFFFFFFFF13C4 C |
 VIDEO_MDMCD_STAMPINIT.WAIT_FINISH :                       FFFFFFFFFFFF13CA C |
*VIDEO_MDMCD_STAMPMAP :                                    FFFFFFFFFFFF17A6 C |
 VIDEO_MDMCD_STAMPRENDER :                                 FFFFFFFFFFFF13DA C |
 VIDEO_MDMCD_STAMPRENDER.COPY_LSB :                        FFFFFFFFFFFF15B6 C |
 VIDEO_MDMCD_STAMPRENDER.COPY_MID :                        FFFFFFFFFFFF1504 C |
 VIDEO_MDMCD_STAMPRENDER.DRAW_CELLS :                      FFFFFFFFFFFF1432 C |
 VIDEO_MDMCD_STAMPRENDER.EXACT_SIZE :                      FFFFFFFFFFFF14A2 C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_ONE :                       FFFFFFFFFFFF148C C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_STEP :                      FFFFFFFFFFFF1444 C |
 VIDEO_MDMCD_STAMPRENDER.MAKE_CELLBUFF :                   FFFFFFFFFFFF14D2 C |
 VIDEO_MDMCD_STAMPRENDER.MAXIMUM :                         FFFFFFFFFFFF14AA C |
 VIDEO_MDMCD_STAMPRENDER.MKDMA_BUFF :                      FFFFFFFFFFFF1472 C |
 VIDEO_MDMCD_STAMPRENDER.NOT_DONE :                        FFFFFFFFFFFF14BE C |
 VIDEO_MDMCD_STAMPRENDER.NOT_YET :                         FFFFFFFFFFFF1468 C |
 VIDEO_MDMCD_STAMPRENDER.NO_LSB :                          FFFFFFFFFFFF15C6 C |
 VIDEO_MDMCD_STAMPRENDER.OUT_LOCS :                        FFFFFFFFFFFF14CA C |
 VIDEO_MDMCD_STAMPRENDER.WAIT_WRAM :                       FFFFFFFFFFFF1436 C |
 VIDEO_PRINT :     FFFFFFFFFFFF0F90 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF0FF6 C |
 VIDEO_PRINT.HEX_INCR :                                    FFFFFFFFFFFF106A C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF0FC0 C |
 VIDEO_PRINT.MK_VALUE :                                    FFFFFFFFFFFF1046 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF0FF0 C |
 VIDEO_PRINT.Q_LOOP :                                      FFFFFFFFFFFF0FD6 C |
 VIDEO_PRINT.SHOW_24 :                                     FFFFFFFFFFFF103A C |
*VIDEO_PRINT.SHOW_BYTE :                                   FFFFFFFFFFFF102A C |
 VIDEO_PRINT.SHOW_LONG :                                   FFFFFFFFFFFF1042 C |
 VIDEO_PRINT.SHOW_NIBBL :                                  FFFFFFFFFFFF105A C |
 VIDEO_PRINT.SHOW_WORD :                                   FFFFFFFFFFFF1032 C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF0FFC C |
*VIDEO_PRINTDEFPAL :                                       FFFFFFFFFFFF0F7A C |
 VIDEO_PRINTDEFPAL_FADE :                                  FFFFFFFFFFFF0F72 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0F5E C |
 VIDEO_PRINTINITW :                                        FFFFFFFFFFFF0F4E C |
 VIDEO_PRINTW :    FFFFFFFFFFFF107A C |
 VIDEO_PRINTW.EXIT :                                       FFFFFFFFFFFF1148 C |
 VIDEO_PRINTW.GET_PREVAL :                                 FFFFFFFFFFFF122A C |
 VIDEO_PRINTW.HEX_INCR :                                   FFFFFFFFFFFF1238 C |
 VIDEO_PRINTW.LOOP :                                       FFFFFFFFFFFF10C8 C |
 VIDEO_PRINTW.MK_VALUE :                                   FFFFFFFFFFFF119C C |
 VIDEO_PRINTW.MK_VALUE_IN :                                FFFFFFFFFFFF1198 C |
 VIDEO_PRINTW.NEXT :                                       FFFFFFFFFFFF1140 C |
 VIDEO_PRINTW.NIBBL_CONT :                                 FFFFFFFFFFFF1222 C |
 VIDEO_PRINTW.NIBBL_NORM :                                 FFFFFFFFFFFF11EE C |
 VIDEO_PRINTW.NO_DBLE_Y :                                  FFFFFFFFFFFF10A0 C |
 VIDEO_PRINTW.SHOW_24 :                                    FFFFFFFFFFFF118C C |
*VIDEO_PRINTW.SHOW_BYTE :                                  FFFFFFFFFFFF117C C |
 VIDEO_PRINTW.SHOW_LONG :                                  FFFFFFFFFFFF1194 C |
 VIDEO_PRINTW.SHOW_NIBBL :                                 FFFFFFFFFFFF11B0 C |
 VIDEO_PRINTW.SHOW_WORD :                                  FFFFFFFFFFFF1184 C |
 VIDEO_PRINTW.SPECIAL :                                    FFFFFFFFFFFF114E C |
 VIDEO_PRINTW.VER_CONT :                                   FFFFFFFFFFFF113A C |
 VIDEO_PRINTW.VER_NORMAL :                                 FFFFFFFFFFFF1108 C |
 VIDEO_RENDER :    FFFFFFFFFFFF036A C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF045C C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF0466 C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF0434 C |
 VIDEO_RESOLUTION :                                        FFFFFFFFFFFF074A C |
 VIDEO_RESOLUTION.DOUBLE :                                 FFFFFFFFFFFF078C C |
 VIDEO_RESOLUTION.EX_BIT :                                 FFFFFFFFFFFF077E C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0CE4 C |
 VIDEO_RUNFADE.ALL_BLACK :                                 FFFFFFFFFFFF0DB0 C |
 VIDEO_RUNFADE.BUSY_TIMER :                                FFFFFFFFFFFF0D2A C |
 VIDEO_RUNFADE.FADE_IN :                                   FFFFFFFFFFFF0DBE C |
 VIDEO_RUNFADE.FADE_LIST :                                 FFFFFFFFFFFF0D36 C |
 VIDEO_RUNFADE.FADE_OUT :                                  FFFFFFFFFFFF0D4E C |
*VIDEO_RUNFADE.FDIN_NEND :                                 FFFFFFFFFFFF0E54 C |
*VIDEO_RUNFADE.FDOUT_NEND :                                FFFFFFFFFFFF0DBC C |
 VIDEO_RUNFADE.NEXT_COLOR :                                FFFFFFFFFFFF0D5C C |
 VIDEO_RUNFADE.NEXT_IN :                                   FFFFFFFFFFFF0DCA C |
 VIDEO_RUNFADE.NEXT_REQ :                                  FFFFFFFFFFFF0CE8 C |
 VIDEO_RUNFADE.NOTHING :                                   FFFFFFFFFFFF0D46 C |
 VIDEO_RUNFADE.NO_REQ :                                    FFFFFFFFFFFF0D30 C |
 VIDEO_RUNFADE.PFADE_DEL :                                 FFFFFFFFFFFF0D46 C |
 VIDEO_RUNFADE.SAME_IN :                                   FFFFFFFFFFFF0E3E C |
 VIDEO_SETMAPSIZE :                                        FFFFFFFFFFFF082A C |
*VIDEO_SETSPR :    FFFFFFFFFFFF123E C |  VIDEO_SETSPRMAP : FFFFFFFFFFFF12D6 C |
*VIDEO_SETSPRMAP_DMA :                                     FFFFFFFFFFFF12CC C |
 VIDEO_UPDMAPVRAM :                                        FFFFFFFFFFFF079E C |
 VIDEO_UPDSPRHVRAM :                                       FFFFFFFFFFFF07F0 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF0E56 C |
 VIDEO_WAITFADE.LOOP :                                     FFFFFFFFFFFF0E56 C |
 VIDEO_WAITFADE.NEXT_ONE :                                 FFFFFFFFFFFF0E64 C |
 VIDMDMCD_CERROR : FFFFFFFFFFFF178E C |
 VIDMDMCD_MKSTAMP :                                        FFFFFFFFFFFF1734 C |
*VIDMDMCD_RDSTMPSLOT :                                     FFFFFFFFFFFF1798 C |
 VIDMDMCD_SENDSTAMPINFO :                                  FFFFFFFFFFFF15CA C |
 VIDMDMCD_SENDSTAMPINFO.CHK_SPR :                          FFFFFFFFFFFF15F2 C |
 VIDMDMCD_SENDSTAMPINFO.COPY_TOWRAM :                      FFFFFFFFFFFF15D8 C |
 VIDMDMCD_SENDSTAMPINFO.NOT_SPRTEMP :                      FFFFFFFFFFFF15FA C |
 VIDMDSPR_MKSPR :  FFFFFFFFFFFF1268 C |
 VIDMDSPR_MKSPR.DONT_ADD :                                 FFFFFFFFFFFF1292 C |
 VIDMDSPR_MKSPRMAP :                                       FFFFFFFFFFFF1316 C |
 VIDMD_CERROR :    FFFFFFFFFFFF12C2 C | *VIDMD_CFREEZE :   FFFFFFFFFFFF12CA C |
 VIDMD_PAL :       FFFFFFFFFFFF0EEA C |  VIDMD_PAL.BAD :   FFFFFFFFFFFF0F08 C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0F02 C |  VIDMKFADE_GO :    FFFFFFFFFFFF0EB2 C |
 VIDPRINT_INIT :   FFFFFFFFFFFF0F6C C |
 VID_CHECKLASTSPR :                                        FFFFFFFFFFFF063C C |
 VID_CHECKLASTSPR.BLNK_FIRST :                             FFFFFFFFFFFF0656 C |
 VID_CHECKLASTSPR.LAST_ONE :                               FFFFFFFFFFFF065C C |
 VID_CHECKLASTSPR.SPR_EXIT :                               FFFFFFFFFFFF066C C |
*VID_FILLGO :      FFFFFFFFFFFF09AE C |  VID_FILLGO.DMAW : FFFFFFFFFFFF09B4 C |
 VID_FILLGO.DMA_W :                                        FFFFFFFFFFFF0A08 C |
 VID_FONTDEFPAL :  FFFFFFFFFFFF0F80 C |  VID_MKDMACARRY :  FFFFFFFFFFFF12F2 C |
 VID_MKDMANEXT :   FFFFFFFFFFFF12E8 C |  VID_MKMAPDMA :    FFFFFFFFFFFF1352 C |
 VID_MKMAPDMA.NEXT_PZ :                                    FFFFFFFFFFFF1372 C |
 VID_MKMAPDMA.NO_DMA :                                     FFFFFFFFFFFF139C C |
 VID_WRTREG01 :    FFFFFFFFFFFF06EA C | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :    FFFFFFFFFFFF1B62 C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1BFA C |  WAVE_LEN :                    1BF2 C |
 WAVE_LOOP :                   1BF5 C |  WAVE_PITCH :                  1BF8 C |
 WAVE_START :                  1BEF C |  WAVFREQ_CDPCM :               1577 C |
 WAVFREQ_LIST :                1517 C | *WONDERCHK :                     98 - |
*WONDERREQ :                     97 - |  WRAM_DOTOUTPUT_0 :           20000 - |
 WRAM_DOTOUTPUT_1 :           28000 - |  WRAM_MDMAPTABLE :            30000 - |
 WRAM_MDSTAMPLIST :           3A000 - |  WRAM_SAVEDATACOPY :          3C000 - |
 WRAM_STAMPCURRFLIP :         3BFFE - |  WRAM_STAMPSDONE :            3BFFC - |
 WRAM_TRACEBUFF :             3B000 - |  X68KSRCLSB :                  1CF5 C |
 X68KSRCMID :                  1CF6 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - |  Z80_CODE :                  200000 C |
 Z80_CODE_END :              201F9C C |  Z80_CODE_FILE :               C000 C |
 Z80_CODE_FILE_E :             E000 C |  Z80_CPU :                   A00000 - |
 Z80_INIT :                      50 C |  Z80_RESET :                 A11200 - |
*ZBANK :                       6000 - |  ZDRVFIFO :                      40 - |
 ZDRVFWRT :                      2E - | *ZDRVMARSBLK :                   37 - |
*ZDRVMCDBLK :                    36 - |  ZDRVRAMLEN :                    30 - |
 ZDRVRAMSRC :                    35 - |  ZDRVROMBLK :                    2F - |
 ZMARS_SEND :                   FBD C |  ZMARS_SEND.CLR_PCM :          1042 C |
 ZMARS_SEND.COPY_BYTES :       101A C |  ZMARS_SEND.MAKE_SURE :         FF2 C |
 ZMARS_SEND.MCDT_BLOCKED :     103C C |  ZMARS_SEND.MCDT_NOUPD :       1046 C |
 ZMARS_SEND.MCD_NEXTP :        1011 C |  ZMARS_SEND.SET_COMBANK :      104E C |
 ZMARS_SEND.TEST_SUB :          FFD C |  ZMARS_SEND.WAIT_IN :           FDE C |
 ZMARS_SEND.WAIT_SUB :         1029 C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZTBL_CHIP :                      3 - |
 ZTBL_EFFBUFF :                   9 - |  ZTBL_FM_ALFD :                   C - |
 ZTBL_FM_KEYS :                   F - |  ZTBL_FM_LFO :                    E - |
 ZTBL_FM_PMAM :                   D - |  ZTBL_FREQINDX :                  5 - |
 ZTBL_LINK :                      0 - |  ZTBL_MASTERVOL :                 4 - |
 ZTBL_PITCHBEND :                 6 - | *ZTBL_PRIORITY :                  2 - |
 ZTBL_VART0 :                     A - |  ZTBL_VART1 :                     B - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_ADRERR :                     5F40 - |
*_BOOTSTAT :                   5EA0 - |  _BURAM :                      5F16 - |
*_CCR :                    FFFFFE92 - |  _CDBIOS :                     5F22 - |
*_CDBOOT :                     5F1C - | *_CDSTAT :                     5E80 - |
*_CHKERR :                     5F52 - | *_CODERR :                     5F46 - |
*_DEVERR :                     5F4C - | *_DMACHANNEL0 :            FFFFFF8C - |
*_DMACHANNEL1 :            FFFFFF9C - | *_DMACOUNT0 :              FFFFFF88 - |
*_DMACOUNT1 :              FFFFFF98 - | *_DMADEST0 :               FFFFFF84 - |
*_DMADEST1 :               FFFFFF94 - | *_DMAOPERATION :           FFFFFFB0 - |
*_DMAREQACK0 :             FFFFFFB4 - | *_DMAREQACK1 :             FFFFFFB8 - |
*_DMASOURCE0 :             FFFFFF80 - | *_DMASOURCE1 :             FFFFFF90 - |
*_DMAVECTORE0 :            FFFFFFA4 - | *_DMAVECTORE1 :            FFFFFFAC - |
*_DMAVECTORN0 :            FFFFFFA0 - | *_DMAVECTORN1 :            FFFFFFA8 - |
*_FRAMEBUFFER :            24000000 - | *_FRC_H :                         2 - |
*_FRC_L :                         3 - | *_FRT :                    FFFFFE10 - |
*_HRH :                    FFFFFF10 - | *_HRL :                    FFFFFF14 - |
*_HRL32 :                  FFFFFF04 - | *_JR :                     FFFFFF00 - |
 _LEVEL1 :                     5F76 - | *_LEVEL2 :                     5F7C - |
 _LEVEL3 :                     5F82 - | *_LEVEL4 :                     5F88 - |
*_LEVEL5 :                     5F8E - | *_LEVEL6 :                     5F94 - |
*_LEVEL7 :                     5F9A - | *_NOCOD0 :                     5F6A - |
*_NOCOD1 :                     5F70 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SETJMPTBL :                  5F0A - | *_SPVERR :                     5F5E - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_TRACE :                      5F64 - |
*_TRAP00 :                     5FA0 - | *_TRAP01 :                     5FA6 - |
*_TRAP02 :                     5FAC - | *_TRAP03 :                     5FB2 - |
*_TRAP04 :                     5FB8 - | *_TRAP05 :                     5FBE - |
*_TRAP06 :                     5FC4 - | *_TRAP07 :                     5FCA - |
*_TRAP08 :                     5FD0 - | *_TRAP09 :                     5FD6 - |
*_TRAP10 :                     5FDC - | *_TRAP11 :                     5FE2 - |
*_TRAP12 :                     5FE8 - | *_TRAP13 :                     5FEE - |
*_TRAP14 :                     5FF4 - | *_TRAP15 :                     5FFA - |
*_TRPERR :                     5F58 - | *_USERCALL0 :                  5F28 - |
*_USERCALL1 :                  5F2E - | *_USERCALL2 :                  5F34 - |
*_USERCALL3 :                  5F3A - | *_USERMODE :                   5EA6 - |
*_VDPREG :                 20004100 - | *_WAITVSYNC :                  5F10 - |
 _WAITVSYNC.TABLE :            6020 C |

   1788 symbols
    479 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 09/21/2024 02:15:52 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | MARS_VRAMEND                         
MARS_VRAMSTART                        | MEMORY                               
REPORT                                | ROMPAD                               
SCREEN_CODE                           | VDP_SHOWME                           

     28 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 09/21/2024 02:15:52 AM


  Defined Structures/Unions:
  --------------------------

CDPCM
  0      (I8) STATUS
  1      (I8) FLAGS
  2      (I8) STRMF
  3      (I8) STRMHALF
  4      (I32) START
  8      (I32) SLAST
  C      (I32) LENGTH
 10      (I32) LOOP
 14      (I32) CLEN
 18      (I32) CREAD
 1C      (I16) PITCH
 1E      (I16) CBLOCK
 20      (I8) PAN
 21      (I8) ENV

CDSTAMP
  0      (I8) FLAGS
  1      (I8) MAP
  2      (I16) CX
  4      (I16) CY
  6      (I16) X
  8      (I16) Y
  A      (I16) WDTH
  C      (I16) HGHT
  E      (I16) SCALE
 10      (I16) ROT

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM

STMPC
  0      (I16) XC
  2      (I16) YC
  4      (I32) X
  8      (I32) Y
  C      (I32) DX
 10      (I32) DY
 14      (I32) TX
 18      (I32) TY
 1C      (I16) XMUL
 1E      (I16) ZMUL
 20      (I16) ZMUL_SIN
 22      (I16) ZMUL_COS
 24      (I16) ROT_SIN
 26      (I16) ROT_COS

STMPI
  0      (I16) MAP
  2      (I16) X
  4      (I16) Y
  6      (I16) XR
  8      (I16) YD
  A      (I16) FLAGS
7 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 09/21/2024 02:15:52 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 09/21/2024 02:15:52 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.33 seconds assembly time

  18912 lines source file
  20488 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
