 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 12/02/2024 11:55:36 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$0                  SET_INITMODE	equ 0		; Starting screen mode number on boot
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/Engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)GF64 2024.???"  HTAG_DATEINFO	equ "(C)GF64 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard for this.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SCD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MCD|MARSCD
(1)  231/       0 :                     	if MOMPASS>2
(1)  232/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  233/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if * >= $900000+$100000
(1)  240/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     	elseif MCD|MARSCD
(1)  245/       0 :                     		dephase
(1)  246/       0 :                     
(1)  247/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  248/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  249/       0 :                     		rompad mpadlbl
(1)  250/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  251/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  252/       0 :                     	endif
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     ; --------------------------------------------
(1)  256/       0 :                     
(1)  257/       0 :                     binclude_dma	macro lblstart,file
(1)  258/       0 :                     	if MARS
(1)  259/       0 :                     GLBL_LASTPHDMA	set *
(1)  260/       0 :                     	dephase
(1)  261/       0 :                     GLBL_PHASEDMA	set *
(1)  262/       0 :                     		endif
(1)  263/       0 :                     
(1)  264/       0 :                     		align 2
(1)  265/       0 :                     lblstart	label *
(1)  266/       0 :                     		binclude file
(1)  267/       0 :                     		align 2
(1)  268/       0 :                     
(1)  269/       0 :                     	if MARS
(1)  270/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  271/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  272/       0 :                     	endif
(1)  273/       0 :                     		endm
(1)  274/       0 :                     
(1)  275/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  276/       0 :                     	if MARS
(1)  277/       0 :                     GLBL_LASTPHDMA	set *
(1)  278/       0 :                     	dephase
(1)  279/       0 :                     GLBL_PHASEDMA	set *
(1)  280/       0 :                     		endif
(1)  281/       0 :                     
(1)  282/       0 :                     		align 2
(1)  283/       0 :                     lblstart	label *
(1)  284/       0 :                     		binclude file
(1)  285/       0 :                     lblend		label *
(1)  286/       0 :                     		align 2
(1)  287/       0 :                     
(1)  288/       0 :                     	if MARS
(1)  289/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  290/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  291/       0 :                     	endif
(1)  292/       0 :                     		endm
(1)  293/       0 :                     
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     ; 32X graphics pack Enter/Exit
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     mars_VramStart	macro thelabel
(1)  299/       0 :                     thelabel label *
(1)  300/       0 :                     		phase 0
(1)  301/       0 :                     		endm
(1)  302/       0 :                     
(1)  303/       0 :                     mars_VramEnd	macro thelabel
(1)  304/       0 :                     		align 8
(1)  305/       0 :                     .end:
(1)  306/       0 :                     ; 		if MOMPASS == 1
(1)  307/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  308/       0 :                     ; 		endif
(1)  309/       0 :                     		dephase
(1)  310/       0 :                     thelabel label *
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     ; Fill CD sectors
(1)  315/       0 :                     ; --------------------------------------------
(1)  316/       0 :                     
(1)  317/       0 :                     fillSectors macro num
(1)  318/       0 :                     	rept num
(1)  319/       0 :                     		align $800-1
(1)  320/       0 :                     		dc.b 0
(1)  321/       0 :                     	endm
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; ====================================================================
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     ; Nikona CODE macros
(1)  327/       0 :                     ; ------------------------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     ; VDP color debug
(1)  331/       0 :                     ; --------------------------------------------
(1)  332/       0 :                     
(1)  333/       0 :                     vdp_showme	macro color
(1)  334/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  335/       0 :                     		move.w	#color,(vdp_data).l
(1)  336/       0 :                     		endm
(1)  337/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   55/FFFFFFFFFFFFC800 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFD7F8 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFE99A :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFE9A0 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)   60/    39A0 :                     .here:          dephase
(1)   60/    39A0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C :                     ; 		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFD7F8 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFD7F8 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFD7F8 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFD7F8 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFD7F8 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFD7F8 :                     
(1)    6/FFFFFFFFFFFFD7F8 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFD7FC :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFD800 :                     
      80/FFFFFFFFFFFFD800 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFD800 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFD804 :                     ; 		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFD804 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     154/       0 :                     		include	"system/head_pico.asm"			; Pico header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0204           		dc.l Pico_Entry		; Entry
(1)    8/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)    9/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   10/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   19/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l Pico_Error
(1)   32/      68 : FFFF E98C           		dc.l RAM_ExternalJump	; PICO: User interrupt
(1)   33/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-is-full interrupt
(1)   34/      70 : FFFF E986           		dc.l RAM_HBlankJump	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   36/      78 : FFFF E980           		dc.l RAM_VBlankJump	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l Pico_Error
(1)   38/      80 : 0000 0200           		dc.l Pico_Error
(1)   39/      84 : 0000 0200           		dc.l Pico_Error
(1)   40/      88 : 0000 0200           		dc.l Pico_Error
(1)   41/      8C : 0000 0200           		dc.l Pico_Error
(1)   42/      90 : 0000 0200           		dc.l Pico_Error
(1)   43/      94 : 0000 0200           		dc.l Pico_Error
(1)   44/      98 : 0000 0200           		dc.l Pico_Error
(1)   45/      9C : 0000 0200           		dc.l Pico_Error
(1)   46/      A0 : 0000 0200           		dc.l Pico_Error
(1)   47/      A4 : 0000 0200           		dc.l Pico_Error
(1)   48/      A8 : 0000 0200           		dc.l Pico_Error
(1)   49/      AC : 0000 0200           		dc.l Pico_Error
(1)   50/      B0 : 0000 0200           		dc.l Pico_Error
(1)   51/      B4 : 0000 0200           		dc.l Pico_Error
(1)   52/      B8 : 0000 0200           		dc.l Pico_Error
(1)   53/      BC : 0000 0200           		dc.l Pico_Error
(1)   54/      C0 : 0000 0200           		dc.l Pico_Error
(1)   55/      C4 : 0000 0200           		dc.l Pico_Error
(1)   56/      C8 : 0000 0200           		dc.l Pico_Error
(1)   57/      CC : 0000 0200           		dc.l Pico_Error
(1)   58/      D0 : 0000 0200           		dc.l Pico_Error
(1)   59/      D4 : 0000 0200           		dc.l Pico_Error
(1)   60/      D8 : 0000 0200           		dc.l Pico_Error
(1)   61/      DC : 0000 0200           		dc.l Pico_Error
(1)   62/      E0 : 0000 0200           		dc.l Pico_Error
(1)   63/      E4 : 0000 0200           		dc.l Pico_Error
(1)   64/      E8 : 0000 0200           		dc.l Pico_Error
(1)   65/      EC : 0000 0200           		dc.l Pico_Error
(1)   66/      F0 : 0000 0200           		dc.l Pico_Error
(1)   67/      F4 : 0000 0200           		dc.l Pico_Error
(1)   68/      F8 : 0000 0200           		dc.l Pico_Error
(1)   69/      FC : 0000 0200           		dc.l Pico_Error
(1)   70/     100 : 5345 4741 2050      		dc.b HTAG_SYS_PICO;"SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   71/     110 : 2843 2947 4636      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_PICO;"Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b HTAG_NOV_PICO;"Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0006 9372           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; PICO can't use SRAM
(1)   82/     1B4 : 2020 2020           		dc.l $20202020
(1)   83/     1B8 : 2020 2020           		dc.l $20202020
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; All of these do nothing for now.
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     Pico_ErrBus:				; Bus error
(1)   95/     200 :                     Pico_ErrAddr:				; Address error
(1)   96/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)   99/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     Pico_Trace:				; Trace
(1)  102/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     Pico_ErrorEx:				; Error exception
(1)  105/     200 :                     Pico_Error:
(1)  106/     200 : 4E73                		rte
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; PICO-specific interrupts
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     Pico_UserInt:
(1)  114/     202 :                     Pico_PcmInt:				; <-- Interrupt when the PCM chip gets full
(1)  115/     202 :                     Pico_UnkInt:
(1)  116/     202 : 4E73                		rte
(1)  117/     204 :                     
(1)  118/     204 :                     ; ====================================================================
(1)  119/     204 :                     ; ----------------------------------------------------------------
(1)  120/     204 :                     ; Entry point
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     
(1)  123/     204 :                     Pico_Entry:
(1)  124/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  125/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  126/     20E : 203C 5345 4741      		move.l	#"SEGA",d0		; Activate PICO system by
(1)  127/     214 : 01C8 0000           		movep.l	d0,(a0)			; writing this string to $800019 in odd writes
(1)  128/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Test VDP to unlock Video
(1)  129/     21E :                     	; --------------------------------
(1)  130/     21E : 7000                		moveq	#0,d0
(1)  131/     220 : 2C40                		movea.l	d0,a6
(1)  132/     222 : 4E66                		move.l	a6,usp
(1)  133/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  134/     22A : 223C FFFF E99A      		move.l	#sizeof_mdram,d1
(1)  135/     230 : 7000                		moveq	#0,d0
(1)  136/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  137/     234 : B1C1                		cmp.l	d1,a0
(1)  138/     236 : 65FA                		bcs.s	.loop_ram
(1)  139/     238 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  140/     23E : 3E2E 0004           .wait_dma:	move.w	4(a6),d7		; Check if DMA is active.
(1)  141/     242 : 0807 0001           		btst	#1,d7
(1)  142/     246 : 66F6                		bne.s	.wait_dma
(1)  143/     248 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)	; Clear palette
              24E : 0004             
(1)  144/     250 : 7E3F                		moveq	#64-1,d7
(1)  145/     252 : 7C00                		moveq	#0,d6
(1)  146/     254 :                     .palclear:
(1)  147/     254 : 3C86                		move.w	d6,(a6)
(1)  148/     256 : 51CF FFFC           		dbf	d7,.palclear
(1)  149/     25A : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              260 : 0000             
(1)  150/     262 :                     
     155/     262 : 6100 13D6           		bsr	Sound_init				; Init Sound driver FIRST
     156/     266 : 6100 01A6           		bsr	Video_init				;  ''  Video
     157/     26A : 6100 130E           		bsr	System_Init				;  ''  Values
     158/     26E : 31FC 0000 E994      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     159/     274 : 6000 19BE           		bra.w	Md_ReadModes				; Go to SCREEN LOOP section
     160/     278 :                     
     161/     278 :                     ; ---------------------------------------------
     162/     278 :                     ; MD
     163/     278 :                     ; ---------------------------------------------
     174/     278 :                     
     175/     278 :                     ; ====================================================================
     176/     278 :                     ; --------------------------------------------------------
     177/     278 :                     ; SYSTEM routines
     178/     278 :                     ;
     179/     278 :                     ; MD/PICO:  Normal ROM locations
     180/     278 :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     181/     278 :                     ;           with the SH2's view of ROM
     182/     278 :                     ; CD/CD32X: Loaded into RAM for safe access.
     183/     278 :                     ; --------------------------------------------------------
     184/     278 :                     
     189/     278 :                     ; ---------------------------------------------
     190/     278 :                     
     191/     278 :                     		include	"sound/drv/gema_macros.asm"
(1)    1/     278 :                     ; ===========================================================================
(1)    2/     278 :                     ; ------------------------------------------------------------
(1)    3/     278 :                     ; GEMA MACROS
(1)    4/     278 :                     ;
(1)    5/     278 :                     ; Variables used:
(1)    6/     278 :                     ; MCD, MARS, MARSCD
(1)    7/     278 :                     ; ------------------------------------------------------------
(1)    8/     278 :                     
(1)    9/     278 :                     ; ----------------------------------------------------
(1)   10/     278 :                     ; gSmplData - Special include for .wav files,
(1)   11/     278 :                     ;
(1)   12/     278 :                     ; labl | Label used in this sample
(1)   13/     278 :                     ; file | WAV file location
(1)   14/     278 :                     ; loop | Loop start point
(1)   15/     278 :                     ; ----------------------------------------------------
(1)   16/     278 :                     
(1)   17/     278 :                     gSmplData macro labl,file,loop
(1)   18/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   19/     278 :                     		align 4
(1)   20/     278 :                     	endif
(1)   21/     278 :                     labl	label *
(1)   22/     278 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   23/     278 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   24/     278 :                     labl_s:
(1)   25/     278 :                     	binclude file,$2C	; dc.b (data)
(1)   26/     278 :                     labl_e:
(1)   27/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   28/     278 :                     		align 4
(1)   29/     278 :                     	endif
(1)   30/     278 :                     	endm
(1)   31/     278 :                     
(1)   32/     278 :                     ; ----------------------------------------------------
(1)   33/     278 :                     ; gSmplRaw - Special include for raw files
(1)   34/     278 :                     ;
(1)   35/     278 :                     ; labl | Label used in this sample
(1)   36/     278 :                     ; file | RAW file location
(1)   37/     278 :                     ; loop | Loop start point
(1)   38/     278 :                     ; ----------------------------------------------------
(1)   39/     278 :                     
(1)   40/     278 :                     gSmplRaw macro labl,file,loop
(1)   41/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   42/     278 :                     		align 4
(1)   43/     278 :                     	endif
(1)   44/     278 :                     labl	label *
(1)   45/     278 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   46/     278 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   47/     278 :                     labl_s:
(1)   48/     278 :                     	binclude file		; dc.b (data)
(1)   49/     278 :                     labl_e:
(1)   50/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   51/     278 :                     		align 4
(1)   52/     278 :                     	endif
(1)   53/     278 :                     	endm
(1)   54/     278 :                     
(1)   55/     278 :                     ; ----------------------------------------------------
(1)   56/     278 :                     ; gemaTrk - Sequence entry in the current master
(1)   57/     278 :                     ;           list
(1)   58/     278 :                     ;
(1)   59/     278 :                     ; enblt | Disable/Enable global beats on this Sequence:
(1)   60/     278 :                     ;         0 - Don't use beats
(1)   61/     278 :                     ;         1 - Use beats
(1)   62/     278 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   63/     278 :                     ;   loc | Direct 24-bit location of the sequence data
(1)   64/     278 :                     ; ----------------------------------------------------
(1)   65/     278 :                     
(1)   66/     278 :                     gemaTrk macro enblt,ticks,loc
(1)   67/     278 :                     	dc.l ((enblt&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   68/     278 :                     	endm
(1)   69/     278 :                     
(1)   70/     278 :                     ; ----------------------------------------------------
(1)   71/     278 :                     ; gemaHead - Sequence data header
(1)   72/     278 :                     ;
(1)   73/     278 :                     ; blk_data  | Block data pointer
(1)   74/     278 :                     ; patt_data | Pattern data pointer
(1)   75/     278 :                     ; ins_list  | instrument list pointer
(1)   76/     278 :                     ; num_chnls | Number of channels used in the track
(1)   77/     278 :                     ;             If 0: Read ALL channels
(1)   78/     278 :                     ;                   (NOT recommended, UNSTABLE)
(1)   79/     278 :                     ;
(1)   80/     278 :                     ; Note:
(1)   81/     278 :                     ; Pointers are in 68k map area
(1)   82/     278 :                     ; ----------------------------------------------------
(1)   83/     278 :                     
(1)   84/     278 :                     gemaHead macro blk,pat,ins,num
(1)   85/     278 :                     	dc.w num
(1)   86/     278 :                     	dc.l blk
(1)   87/     278 :                     	dc.l pat
(1)   88/     278 :                     	dc.l ins
(1)   89/     278 :                     	endm
(1)   90/     278 :                     
(1)   91/     278 :                     ; ------------------------------------------------------------
(1)   92/     278 :                     ; Instrument macros, instrument_num-1
(1)   93/     278 :                     ; (ex. Instrument 1 is 0 here)
(1)   94/     278 :                     ;
(1)   95/     278 :                     ; Note:
(1)   96/     278 :                     ; UNUSED instruments MUST use gInsNull or
(1)   97/     278 :                     ; the Z80 gets unexpected results and probably crash.
(1)   98/     278 :                     ; ------------------------------------------------------------
(1)   99/     278 :                     
(1)  100/     278 :                     ; ----------------------------------------------------
(1)  101/     278 :                     ; gInsNull - Null instrument
(1)  102/     278 :                     ;
(1)  103/     278 :                     ; You MUST use this on unused instruments.
(1)  104/     278 :                     ; ----------------------------------------------------
(1)  105/     278 :                     
(1)  106/     278 :                     gInsNull macro
(1)  107/     278 :                     	dc.b $00,$00,$00,$00
(1)  108/     278 :                     	dc.b $00,$00,$00,$00
(1)  109/     278 :                     	endm
(1)  110/     278 :                     
(1)  111/     278 :                     ; ----------------------------------------------------
(1)  112/     278 :                     ; gInsPsg - PSG tone
(1)  113/     278 :                     ;
(1)  114/     278 :                     ; pitch | Pitch/Octave
(1)  115/     278 :                     ; alv   | Attack level
(1)  116/     278 :                     ; atk   | Attack rate
(1)  117/     278 :                     ; slv   | Sustain
(1)  118/     278 :                     ; dky   | Decay rate (up)
(1)  119/     278 :                     ; rrt   | Release rate (down)
(1)  120/     278 :                     ; vib   | Set to 0, reserved for vibrato
(1)  121/     278 :                     ; ----------------------------------------------------
(1)  122/     278 :                     
(1)  123/     278 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  124/     278 :                     	dc.b $80,pitch,alv,atk
(1)  125/     278 :                     	dc.b slv,dky,rrt,vib
(1)  126/     278 :                     	endm
(1)  127/     278 :                     
(1)  128/     278 :                     ; ----------------------------------------------------
(1)  129/     278 :                     ; gInsPsg - PSG noise
(1)  130/     278 :                     ;
(1)  131/     278 :                     ; pitch | Pitch/Octave
(1)  132/     278 :                     ; alv   | Attack level
(1)  133/     278 :                     ; atk   | Attack rate
(1)  134/     278 :                     ; slv   | Sustain
(1)  135/     278 :                     ; dky   | Decay rate (up)
(1)  136/     278 :                     ; rrt   | Release rate (down)
(1)  137/     278 :                     ; vib   | Set to 0, reserved for vibrato
(1)  138/     278 :                     ; mode  | Noise mode: %tmm
(1)  139/     278 :                     ;         t - Bass(0)|Noise(1)
(1)  140/     278 :                     ;         m - Clock(00)|Clock/2(01)|Clock/4(10)|Tone3(11)
(1)  141/     278 :                     ;
(1)  142/     278 :                     ; Note:
(1)  143/     278 :                     ; Using Tone3 will turn OFF channel 3.
(1)  144/     278 :                     ; ----------------------------------------------------
(1)  145/     278 :                     
(1)  146/     278 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  147/     278 :                     	dc.b $90|mode,pitch,alv,atk
(1)  148/     278 :                     	dc.b slv,dky,rrt,vib
(1)  149/     278 :                     	endm
(1)  150/     278 :                     
(1)  151/     278 :                     ; ----------------------------------------------------
(1)  152/     278 :                     ; gInsFm - YM2612 FM normal instrument/patch
(1)  153/     278 :                     ;
(1)  154/     278 :                     ; pitch | Pitch/Octave
(1)  155/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  156/     278 :                     ; ----------------------------------------------------
(1)  157/     278 :                     
(1)  158/     278 :                     gInsFm macro pitch,fmins
(1)  159/     278 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  160/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  161/     278 :                     	endm
(1)  162/     278 :                     
(1)  163/     278 :                     ; ----------------------------------------------------
(1)  164/     278 :                     ; gInsFm - YM2612 FM special instrument/patch
(1)  165/     278 :                     ;
(1)  166/     278 :                     ; pitch | UNUSED, value ignored (set to 0)
(1)  167/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  168/     278 :                     ; ----------------------------------------------------
(1)  169/     278 :                     
(1)  170/     278 :                     gInsFm3	macro pitch,fmins
(1)  171/     278 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  172/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  173/     278 :                     	endm
(1)  174/     278 :                     
(1)  175/     278 :                     ; ----------------------------------------------------
(1)  176/     278 :                     ; gInsDac - DAC instrument
(1)  177/     278 :                     ;
(1)  178/     278 :                     ; pitch | Pitch/Octave
(1)  179/     278 :                     ; start | 24-bit pointer
(1)  180/     278 :                     ; flags | Flags: %0000000l
(1)  181/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  182/     278 :                     ; ----------------------------------------------------
(1)  183/     278 :                     
(1)  184/     278 :                     gInsDac	macro pitch,start,flags
(1)  185/     278 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  186/     278 :                     	dc.b start&$FF,0,0,0
(1)  187/     278 :                     	endm
(1)  188/     278 :                     
(1)  189/     278 :                     ; ----------------------------------------------------
(1)  190/     278 :                     ; gInsPcm - RF5C164 PCM Sample (SEGA CD)
(1)  191/     278 :                     ;
(1)  192/     278 :                     ; pitch | Pitch/Octave
(1)  193/     278 :                     ; start | 24-bit direct pointer to
(1)  194/     278 :                     ;         Sub-CPU's memory area.
(1)  195/     278 :                     ; flags | Flags: %0000000l
(1)  196/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  197/     278 :                     ; ----------------------------------------------------
(1)  198/     278 :                     
(1)  199/     278 :                     gInsPcm	macro pitch,start,flags
(1)  200/     278 :                      if MCD|MARSCD
(1)  201/     278 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  202/     278 :                     	dc.b start&$FF,0,0,0
(1)  203/     278 :                      else
(1)  204/     278 :                     	dc.b $00,$00,$00,$00
(1)  205/     278 :                     	dc.b $00,$00,$00,$00
(1)  206/     278 :                      endif
(1)  207/     278 :                     	endm
(1)  208/     278 :                     
(1)  209/     278 :                     ; ----------------------------------------------------
(1)  210/     278 :                     ; gInsPwm - PWM Sample (SEGA 32X)
(1)  211/     278 :                     ;
(1)  212/     278 :                     ; pitch | Pitch/Octave
(1)  213/     278 :                     ; start | 32-bit pointer to
(1)  214/     278 :                     ;         SH2's map view: CS1(ROM) or CS3(SDRAM)
(1)  215/     278 :                     ; flags | Flags: %000000sl
(1)  216/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  217/     278 :                     ;         | s - Sample data is in Stereo: No(0)/Yes(1)
(1)  218/     278 :                     ; ----------------------------------------------------
(1)  219/     278 :                     
(1)  220/     278 :                     gInsPwm	macro pitch,start,flags
(1)  221/     278 :                      if MARS|MARSCD
(1)  222/     278 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  223/     278 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  224/     278 :                      else
(1)  225/     278 :                     	dc.b $00,$00,$00,$00
(1)  226/     278 :                     	dc.b $00,$00,$00,$00
(1)  227/     278 :                      endif
(1)  228/     278 :                     	endm
(1)  229/     278 :                     
     192/     278 :                     		include	"sound/drv/gema.asm"
(1)    1/     278 :                     ; ===========================================================================
(1)    2/     278 :                     ; -------------------------------------------------------------------
(1)    3/     278 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     278 :                     ; by GenesisFan64 2023-2024
(1)    5/     278 :                     ; -------------------------------------------------------------------
(1)    6/     278 :                     
(1)    7/     278 :                     ; ====================================================================
(1)    8/     278 :                     ; --------------------------------------------------------
(1)    9/     278 :                     ; Variables
(1)   10/     278 :                     ; --------------------------------------------------------
(1)   11/     278 :                     
(1)   12/     278 :                     ; z80_cpu	equ $A00000			; Z80 CPU area
(1)   13/     278 :                     ; z80_bus 	equ $A11100			; only read bit 0 (bit 8 as WORD)
(1)   14/     278 :                     ; z80_reset	equ $A11200			; WRITE only: $0000 reset/$0100 cancel
(1)   15/     278 : =$1F60               zDrvFifo	equ $1F60;commZfifo		; FIFO command storage
(1)   16/     278 : =$1F80               zDrvFWrt	equ $1F80;commZWrite		; FIFO command index
(1)   17/     278 : =$1F81               zDrvRomBlk	equ $1F81;commZRomBlk		; ROM block flag
(1)   18/     278 : =$1F86               zDrvRamSrc	equ $1F82+4;cdRamSrcB		; !! RAM-read source+dest pointers
(1)   19/     278 : =$1F87               zDrvRamLen	equ $1F87;cdRamLen		; RAM-read length + flag
(1)   20/     278 : =$1F88               zDrvPalMode	equ $1F88;palMode		; PAL speed flag
(1)   21/     278 : =$1F89               zDrvMarsBlk	equ $1F89;marsBlock		; Flag to disable 32X's PWM
(1)   22/     278 : =$1F8A               zDrvMcdBlk	equ $1F8A;mcdBlock		; Flag to disable SegaCD's PCM
(1)   23/     278 : =$20                 zDrvMaxCmnd	equ $20;MAX_ZCMND		; Command fifo size
(1)   24/     278 :                     
(1)   25/     278 :                     ; ====================================================================
(1)   26/     278 :                     ; --------------------------------------------------------
(1)   27/     278 :                     ; Labels
(1)   28/     278 :                     ; --------------------------------------------------------
(1)   29/     278 :                     
(1)   30/     278 : =$FFFFFF00           RAM_ZCdFlagD	equ RAM_SoundBuff		; transferRom flag (shared with Z80)
(1)   31/     278 :                     
(1)   32/     278 :                     ; ====================================================================
(1)   33/     278 :                     ; --------------------------------------------------------
(1)   34/     278 :                     ; Initialize Sound
(1)   35/     278 :                     ; --------------------------------------------------------
(1)   36/     278 :                     
(1)   37/     278 :                     gemaInit:
(1)   39/     278 :                     		; Pico driver init goes here
(1)   40/     278 :                     
(1)   71/     278 :                     
(1)   72/     278 :                     ; ====================================================================
(1)   73/     278 :                     ; ----------------------------------------------------------------
(1)   74/     278 :                     ; gemaReset
(1)   75/     278 :                     ;
(1)   76/     278 :                     ; Reset ALL sound to defaults
(1)   77/     278 :                     ; ----------------------------------------------------------------
(1)   78/     278 :                     
(1)   79/     278 :                     gemaReset:
(1)   80/     278 : 6100 012C           		bsr	gemaStopAll
(1)   81/     27C : 41F8 45E4           		lea	(MainGemaSeqList),a0
(1)   82/     280 : 6100 00D0           		bsr	gemaSetMasterList
(1)   83/     284 : 7E07                		moveq	#7,d7				; Make sure it finishes.
(1)   84/     286 : 51CF FFFE           		dbf	d7,*
(1)   85/     28A : 4E75                		rts
(1)   86/     28C :                     
(1)   87/     28C :                     ; ====================================================================
(1)   88/     28C :                     ; ------------------------------------------------
(1)   89/     28C :                     ; sndLockZ80
(1)   90/     28C :                     ;
(1)   91/     28C :                     ; Stop Z80, unlocks bus
(1)   92/     28C :                     ; ------------------------------------------------
(1)   93/     28C :                     
(1)   94/     28C :                     sndLockZ80:
(1)  101/     28C : 4E75                		rts
(1)  102/     28E :                     
(1)  103/     28E :                     ; ------------------------------------------------
(1)  104/     28E :                     ; sndUnlockZ80
(1)  105/     28E :                     ;
(1)  106/     28E :                     ; Resume Z80, locks bus
(1)  107/     28E :                     ; ------------------------------------------------
(1)  108/     28E :                     
(1)  109/     28E :                     sndUnlockZ80:
(1)  113/     28E : 4E75                		rts
(1)  114/     290 :                     
(1)  115/     290 :                     ; ====================================================================
(1)  116/     290 :                     ; ----------------------------------------------------------------
(1)  117/     290 :                     ; gemaSendRam
(1)  118/     290 :                     ;
(1)  119/     290 :                     ; If you are reading data from 68000's RAM you MUST call
(1)  120/     290 :                     ; this a lot during display, commonly during the VBlank waiting
(1)  121/     290 :                     ; loop.
(1)  122/     290 :                     ;
(1)  123/     290 :                     ; This checks if the Z80 wants to read from RAM, then here
(1)  124/     290 :                     ; we manually write the bytes to the Z80
(1)  125/     290 :                     ;
(1)  126/     290 :                     ; SCD/CD32X:
(1)  127/     290 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  128/     290 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  129/     290 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  130/     290 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set.
(1)  131/     290 :                     ; ----------------------------------------------------------------
(1)  132/     290 :                     
(1)  133/     290 :                     gemaSendRam:
(1)  134/     290 : 4A38 FF00           		tst.b	(RAM_ZCdFlagD).w		; Z80 WROTE the flag?
(1)  135/     294 : 674C                		beq.s	.no_task
(1)  136/     296 : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear flag here
(1)  137/     29A : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  138/     29E : 61EC                		bsr	sndLockZ80
(1)  139/     2A0 : 7E00                		moveq	#0,d7
(1)  140/     2A2 : 1E39 00A0 1F87      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Len == 0?
(1)  141/     2A8 : 6732                		beq.s	.no_size			; Invalid size, do nothing
(1)  142/     2AA : 5347                		subq.w	#1,d7				; dbf -1
(1)  143/     2AC : 4DF9 00A0 1F87      		lea	(z80_cpu+(zDrvRamSrc+1)),a6	; a6 - SRC location and DST, backwards
(1)  144/     2B2 : 4BF9 00A0 0000      		lea	(z80_cpu),a5			; a5 - Z80 area
(1)  145/     2B8 : 1C26                		move.b	-(a6),d6			; d6 - Source in 68K area
(1)  146/     2BA : 4846                		swap	d6
(1)  147/     2BC : 1C26                		move.b	-(a6),d6
(1)  148/     2BE : E14E                		lsl.w	#8,d6
(1)  149/     2C0 : 1C26                		move.b	-(a6),d6
(1)  150/     2C2 : 7A00                		moveq	#0,d5
(1)  151/     2C4 : 1A26                		move.b	-(a6),d5			; d5 - Destination in Z80 area
(1)  152/     2C6 : E14D                		lsl.w	#8,d5
(1)  153/     2C8 : 1A26                		move.b	-(a6),d5
(1)  154/     2CA : DBC5                		add.l	d5,a5				; Add base to destination
(1)  155/     2CC : 2846                		move.l	d6,a4
(1)  156/     2CE :                     .copy_bytes:
(1)  157/     2CE : 1ADC                		move.b	(a4)+,(a5)+
(1)  158/     2D0 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  159/     2D4 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; clear LEN and Z80 resumes
              2DA : 1F87             
(1)  160/     2DC :                     .no_size:
(1)  161/     2DC : 61B0                		bsr	sndUnlockZ80
(1)  162/     2DE : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  163/     2E2 :                     .no_task:
(1)  164/     2E2 : 4E75                		rts
(1)  165/     2E4 :                     
(1)  166/     2E4 :                     ; ====================================================================
(1)  167/     2E4 :                     ; ------------------------------------------------
(1)  168/     2E4 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  169/     2E4 :                     ; ------------------------------------------------
(1)  170/     2E4 :                     
(1)  171/     2E4 :                     sndReq_Enter:
(1)  175/     2E4 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  176/     2E8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  177/     2EC : 40E7                		move.w	sr,-(sp)			; and sr too
(1)  178/     2EE : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  179/     2F2 : DEFC 0016           		adda	#(4*4)+2+4,sp			; Go back to the RTS jump
(1)  180/     2F6 : 4BF9 00A0 1F80      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  181/     2FC : 4DF9 00A0 1F60      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  182/     302 :                     .wait:
(1)  187/     302 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  188/     304 : 4886                		ext.w	d6				; extend to 16 bits
(1)  189/     306 : 4E75                		rts
(1)  190/     308 :                     ; JUMP ONLY
(1)  191/     308 :                     sndReq_Exit:
(1)  195/     308 : 9EFC 001A           		suba	#8+2+(4*4),sp
(1)  196/     30C : 46DF                		move.w	(sp)+,sr
(1)  197/     30E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  198/     312 : DEFC 0008           		adda	#8,sp
(1)  199/     316 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  200/     31A : 4E75                		rts
(1)  201/     31C :                     
(1)  202/     31C :                     ; ------------------------------------------------
(1)  203/     31C :                     ; Send request id and arguments
(1)  204/     31C :                     ;
(1)  205/     31C :                     ; Input:
(1)  206/     31C :                     ; d7 - byte to write
(1)  207/     31C :                     ; d6 - index pointer
(1)  208/     31C :                     ; a5 - commZWrite, update index
(1)  209/     31C :                     ; a6 - commZfifo command list
(1)  210/     31C :                     ;
(1)  211/     31C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  212/     31C :                     ; ------------------------------------------------
(1)  213/     31C :                     
(1)  214/     31C :                     sndReq_scmd:
(1)  215/     31C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; Command-start flag
(1)  216/     322 : 5206                		addq.b	#1,d6				; Next fifo position
(1)  217/     324 : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  218/     328 : 600C                		bra.s	sndReq_sbyte
(1)  219/     32A :                     sndReq_slong:
(1)  220/     32A : 610A                		bsr	sndReq_sbyte
(1)  221/     32C : E09F                		ror.l	#8,d7
(1)  222/     32E :                     ; 24-bit address
(1)  223/     32E :                     sndReq_saddr:
(1)  224/     32E : 6106                		bsr	sndReq_sbyte
(1)  225/     330 : E09F                		ror.l	#8,d7
(1)  226/     332 :                     sndReq_sword:
(1)  227/     332 : 6102                		bsr	sndReq_sbyte
(1)  228/     334 : E09F                		ror.l	#8,d7
(1)  229/     336 :                     sndReq_sbyte:
(1)  230/     336 : 1D87 6000           		move.b	d7,(a6,d6.w)			; Write byte
(1)  231/     33A : 5206                		addq.b	#1,d6				; Next fifo pos
(1)  232/     33C : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  233/     340 : 1A86                		move.b	d6,(a5)				; Update commZWrite
(1)  234/     342 : 4E75                		rts
(1)  235/     344 :                     
(1)  236/     344 :                     ; ====================================================================
(1)  237/     344 :                     ; ------------------------------------------------
(1)  238/     344 :                     ; USER calls area
(1)  239/     344 :                     ; ------------------------------------------------
(1)  240/     344 :                     
(1)  241/     344 :                     ; --------------------------------------------------------
(1)  242/     344 :                     ; gemaDmaPause
(1)  243/     344 :                     ;
(1)  244/     344 :                     ; Call this BEFORE doing any DMA transfer
(1)  245/     344 :                     ;
(1)  246/     344 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  247/     344 :                     ; --------------------------------------------------------
(1)  248/     344 :                     
(1)  249/     344 :                     gemaDmaPause:
(1)  259/     344 : 4E75                		rts
(1)  260/     346 :                     
(1)  261/     346 :                     ; --------------------------------------------------------
(1)  262/     346 :                     ; gemaDmaResume
(1)  263/     346 :                     ;
(1)  264/     346 :                     ; Call this AFTER finishing DMA transfer
(1)  265/     346 :                     ;
(1)  266/     346 :                     ; 32X: Reset the RV bit manually BEFORE calling this.
(1)  267/     346 :                     ; --------------------------------------------------------
(1)  268/     346 :                     
(1)  269/     346 :                     gemaDmaResume:
(1)  279/     346 : 4E75                		rts
(1)  280/     348 :                     
(1)  281/     348 :                     ; --------------------------------------------------------
(1)  282/     348 :                     ; gemaTest
(1)  283/     348 :                     ;
(1)  284/     348 :                     ; For TESTING only
(1)  285/     348 :                     ; --------------------------------------------------------
(1)  286/     348 :                     
(1)  287/     348 :                     gemaTest:
(1)  288/     348 : 619A                		bsr	sndReq_Enter
(1)  289/     34A : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  290/     34E : 61CC                		bsr	sndReq_scmd
(1)  291/     350 : 60B6                		bra 	sndReq_Exit
(1)  292/     352 :                     
(1)  293/     352 :                     ; --------------------------------------------------------
(1)  294/     352 :                     ; gemaSetMasterList
(1)  295/     352 :                     ;
(1)  296/     352 :                     ; Sets the master sequence list
(1)  297/     352 :                     ;
(1)  298/     352 :                     ; Input:
(1)  299/     352 :                     ; a0 | 68k pointer
(1)  300/     352 :                     ;
(1)  301/     352 :                     ; Notes:
(1)  302/     352 :                     ; - ALL TRACKS MUST BE STOPPED, CALL gemaStopAll FIRST
(1)  303/     352 :                     ; and wait a frame maximum.
(1)  304/     352 :                     ; --------------------------------------------------------
(1)  305/     352 :                     
(1)  306/     352 :                     gemaSetMasterList:
(1)  307/     352 : 6190                		bsr	sndReq_Enter
(1)  308/     354 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  309/     358 : 61C2                		bsr	sndReq_scmd
(1)  310/     35A : 2E08                		move.l	a0,d7
(1)  311/     35C : 61CC                		bsr	sndReq_slong
(1)  312/     35E : 60A8                		bra 	sndReq_Exit
(1)  313/     360 :                     
(1)  314/     360 :                     ; --------------------------------------------------------
(1)  315/     360 :                     ; gemaPlaySeq
(1)  316/     360 :                     ;
(1)  317/     360 :                     ; Play a sequence
(1)  318/     360 :                     ;
(1)  319/     360 :                     ; Input:
(1)  320/     360 :                     ; d0.b | Sequence number
(1)  321/     360 :                     ; d1.b | Starting block
(1)  322/     360 :                     ; d2.b | Playback slot number: 0-2
(1)  323/     360 :                     ;        If set to -1:
(1)  324/     360 :                     ;        Auto-search free slot (same as gemaPlaySeqAuto)
(1)  325/     360 :                     ; --------------------------------------------------------
(1)  326/     360 :                     
(1)  327/     360 :                     gemaPlaySeq:
(1)  328/     360 : 6182                		bsr	sndReq_Enter
(1)  329/     362 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  330/     366 : 61B4                		bsr	sndReq_scmd
(1)  331/     368 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  332/     36A : 61CA                		bsr	sndReq_sbyte
(1)  333/     36C : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  334/     36E : 61C6                		bsr	sndReq_sbyte
(1)  335/     370 : 1E02                		move.b	d2,d7		; d2.b Slot
(1)  336/     372 : 61C2                		bsr	sndReq_sbyte
(1)  337/     374 : 6092                		bra 	sndReq_Exit
(1)  338/     376 :                     
(1)  339/     376 :                     ; --------------------------------------------------------
(1)  340/     376 :                     ; gemaPlaySeqAuto
(1)  341/     376 :                     ;
(1)  342/     376 :                     ; Play a sequence into a free slot, if all get full
(1)  343/     376 :                     ; it will overwrite the last one.
(1)  344/     376 :                     ;
(1)  345/     376 :                     ; Input:
(1)  346/     376 :                     ; d0.b | Sequence number
(1)  347/     376 :                     ; d1.b | Starting block
(1)  348/     376 :                     ; --------------------------------------------------------
(1)  349/     376 :                     
(1)  350/     376 :                     gemaPlaySeqAuto:
(1)  351/     376 : 6100 FF6C           		bsr	sndReq_Enter
(1)  352/     37A : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  353/     37E : 619C                		bsr	sndReq_scmd
(1)  354/     380 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  355/     382 : 61B2                		bsr	sndReq_sbyte
(1)  356/     384 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  357/     386 : 61AE                		bsr	sndReq_sbyte
(1)  358/     388 : 7EFF                		moveq	#-1,d7		; d2.b Slot
(1)  359/     38A : 61AA                		bsr	sndReq_sbyte
(1)  360/     38C : 6000 FF7A           		bra 	sndReq_Exit
(1)  361/     390 :                     
(1)  362/     390 :                     ; --------------------------------------------------------
(1)  363/     390 :                     ; gemaStopSeq
(1)  364/     390 :                     ;
(1)  365/     390 :                     ; Stops tracks with the same sequence number
(1)  366/     390 :                     ;
(1)  367/     390 :                     ; Input:
(1)  368/     390 :                     ; d0.b | Sequence number to search
(1)  369/     390 :                     ;        If -1: Stop all tracks with any sequence
(1)  370/     390 :                     ; d1.b | Playback slot number
(1)  371/     390 :                     ;        If -1: Stop all slots
(1)  372/     390 :                     ;
(1)  373/     390 :                     ; If both d0 and d1 are -1 it acts like gemaStopAll
(1)  374/     390 :                     ; --------------------------------------------------------
(1)  375/     390 :                     
(1)  376/     390 :                     gemaStopSeq:
(1)  377/     390 : 6100 FF52           		bsr	sndReq_Enter
(1)  378/     394 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  379/     398 : 6182                		bsr	sndReq_scmd
(1)  380/     39A : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  381/     39C : 6198                		bsr	sndReq_sbyte
(1)  382/     39E : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  383/     3A0 : 6194                		bsr	sndReq_sbyte
(1)  384/     3A2 : 6000 FF64           		bra 	sndReq_Exit
(1)  385/     3A6 :                     
(1)  386/     3A6 :                     ; --------------------------------------------------------
(1)  387/     3A6 :                     ; gemaStopAll
(1)  388/     3A6 :                     ;
(1)  389/     3A6 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  390/     3A6 :                     ; --------------------------------------------------------
(1)  391/     3A6 :                     
(1)  392/     3A6 :                     gemaStopAll:
(1)  393/     3A6 : 6100 FF3C           		bsr	sndReq_Enter
(1)  394/     3AA : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  395/     3AE : 6100 FF6C           		bsr	sndReq_scmd
(1)  396/     3B2 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  397/     3B4 : 6180                		bsr	sndReq_sbyte
(1)  398/     3B6 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  399/     3B8 : 6100 FF7C           		bsr	sndReq_sbyte
(1)  400/     3BC : 6000 FF4A           		bra 	sndReq_Exit
(1)  401/     3C0 :                     
(1)  402/     3C0 :                     ; --------------------------------------------------------
(1)  403/     3C0 :                     ; gemaFadeSeq
(1)  404/     3C0 :                     ;
(1)  405/     3C0 :                     ; Set Master volume to a track slot.
(1)  406/     3C0 :                     ;
(1)  407/     3C0 :                     ; Input:
(1)  408/     3C0 :                     ; d0.b | Target volume
(1)  409/     3C0 :                     ; d1.b | Playback slot number
(1)  410/     3C0 :                     ;        If -1: Apply to all slots
(1)  411/     3C0 :                     ;
(1)  412/     3C0 :                     ; Notes:
(1)  413/     3C0 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  414/     3C0 :                     ; - v1.0: This only works on (re)start
(1)  415/     3C0 :                     ;   or during new notes on playback.
(1)  416/     3C0 :                     ; --------------------------------------------------------
(1)  417/     3C0 :                     
(1)  418/     3C0 :                     gemaFadeSeq:
(1)  419/     3C0 : 6100 FF22           		bsr	sndReq_Enter
(1)  420/     3C4 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  421/     3C8 : 6100 FF52           		bsr	sndReq_scmd
(1)  422/     3CC : 1E00                		move.b	d0,d7		; d0.b Target volume
(1)  423/     3CE : 6100 FF66           		bsr	sndReq_sbyte
(1)  424/     3D2 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  425/     3D4 : 6100 FF60           		bsr	sndReq_sbyte
(1)  426/     3D8 : 6000 FF2E           		bra 	sndReq_Exit
(1)  427/     3DC :                     
(1)  428/     3DC :                     ; --------------------------------------------------------
(1)  429/     3DC :                     ; gemaSetSeqVol
(1)  430/     3DC :                     ;
(1)  431/     3DC :                     ; Set Master volume to a Seq slot.
(1)  432/     3DC :                     ;
(1)  433/     3DC :                     ; Input:
(1)  434/     3DC :                     ; d0.b | Master volume: $00-max $40-min
(1)  435/     3DC :                     ; d1.b | Playback slot number
(1)  436/     3DC :                     ;        If -1: Set to all slots
(1)  437/     3DC :                     ;
(1)  438/     3DC :                     ; Notes:
(1)  439/     3DC :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  440/     3DC :                     ; - v1.0: This only works on (re)start
(1)  441/     3DC :                     ;   or during new notes on playback.
(1)  442/     3DC :                     ; --------------------------------------------------------
(1)  443/     3DC :                     
(1)  444/     3DC :                     gemaSetSeqVol:
(1)  445/     3DC : 6100 FF06           		bsr	sndReq_Enter
(1)  446/     3E0 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  447/     3E4 : 6100 FF36           		bsr	sndReq_scmd
(1)  448/     3E8 : 1E00                		move.b	d0,d7		; d1.b Volume data <--
(1)  449/     3EA : 6100 FF4A           		bsr	sndReq_sbyte
(1)  450/     3EE : 1E01                		move.b	d1,d7		; d0.b Slot
(1)  451/     3F0 : 6100 FF44           		bsr	sndReq_sbyte
(1)  452/     3F4 : 6000 FF12           		bra 	sndReq_Exit
(1)  453/     3F8 :                     
(1)  454/     3F8 :                     ; --------------------------------------------------------
(1)  455/     3F8 :                     ; gemaSetBeats
(1)  456/     3F8 :                     ;
(1)  457/     3F8 :                     ; Set global sub-beats
(1)  458/     3F8 :                     ;
(1)  459/     3F8 :                     ; Input:
(1)  460/     3F8 :                     ; d0.w | Sub-beats value
(1)  461/     3F8 :                     ;
(1)  462/     3F8 :                     ; Note:
(1)  463/     3F8 :                     ; If the Z80 is running in PAL mode the number will
(1)  464/     3F8 :                     ; change inside the Z80 to match the PAL's speed.
(1)  465/     3F8 :                     ; --------------------------------------------------------
(1)  466/     3F8 :                     
(1)  467/     3F8 :                     gemaSetBeats:
(1)  468/     3F8 : 6100 FEEA           		bsr	sndReq_Enter
(1)  469/     3FC : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  470/     400 : 6100 FF1A           		bsr	sndReq_scmd
(1)  471/     404 : 3E00                		move.w	d0,d7		; d0.w Sub-beat value
(1)  472/     406 : 6100 FF2A           		bsr	sndReq_sword
(1)  473/     40A : 6000 FEFC           		bra 	sndReq_Exit
(1)  474/     40E :                     
     193/     40E :                     		include	"system/md/video.asm"
(1)    1/     40E :                     ; ===========================================================================
(1)    2/     40E :                     ; ----------------------------------------------------------------
(1)    3/     40E :                     ; Genesis VDP section
(1)    4/     40E :                     ; ----------------------------------------------------------------
(1)    5/     40E :                     
(1)    6/     40E :                     ; ====================================================================
(1)    7/     40E :                     ; --------------------------------------------------------
(1)    8/     40E :                     ; Settings
(1)    9/     40E :                     ; --------------------------------------------------------
(1)   10/     40E :                     
(1)   11/     40E : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/     40E : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/     40E : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/     40E :                     
(1)   15/     40E : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/     40E : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/     40E : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/     40E : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/     40E : =$6000               DEF_PrintPal		equ $6000
(1)   20/     40E :                     
(1)   21/     40E : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/     40E :                     
(1)   23/     40E :                     ; ===================================================================
(1)   24/     40E :                     ; --------------------------------------------------------
(1)   25/     40E :                     ; Variables
(1)   26/     40E :                     ; --------------------------------------------------------
(1)   27/     40E :                     
(1)   28/     40E :                     ; VDPATT_PL0		equ $0000
(1)   29/     40E : =$2000               VDPATTR_PL1		equ $2000
(1)   30/     40E : =$4000               VDPATTR_PL2		equ $4000
(1)   31/     40E : =$6000               VDPATTR_PL3		equ $6000
(1)   32/     40E : =$8000               VDPATTR_HI		equ $8000
(1)   33/     40E :                     
(1)   34/     40E :                     ; ------------------------------------------------
(1)   35/     40E :                     ; Use these if you are not planning changing
(1)   36/     40E :                     ; the VRAM locations of the scrolling area(s)
(1)   37/     40E :                     ; ------------------------------------------------
(1)   38/     40E : =$C000               DEF_VRAM_FG		equ $C000
(1)   39/     40E : =$E000               DEF_VRAM_BG		equ $E000
(1)   40/     40E : =$D000               DEF_VRAM_WD		equ $D000
(1)   41/     40E : =$F800               DEF_VRAM_SPR		equ $F800
(1)   42/     40E : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   43/     40E :                     
(1)   44/     40E :                     ; ------------------------------------------------
(1)   45/     40E :                     ; H sizes for the current layer
(1)   46/     40E :                     ;
(1)   47/     40E :                     ; Note:
(1)   48/     40E :                     ; WINDOW's width changes between H32 and H40
(1)   49/     40E :                     ; resolution modes.
(1)   50/     40E :                     ; ------------------------------------------------
(1)   51/     40E : =$40                 DEF_HSIZE_32		equ $040
(1)   52/     40E : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   53/     40E : =$100                DEF_HSIZE_128		equ $100
(1)   54/     40E :                     
(1)   55/     40E :                     ; ------------------------------------------------
(1)   56/     40E :                     ; VDP registers
(1)   57/     40E :                     ; ------------------------------------------------
(1)   58/     40E :                     ; $80
(1)   59/     40E : =$2                  HVStop			equ $02
(1)   60/     40E : =$10                 HintEnbl		equ $10
(1)   61/     40E : =$1                  bitHVStop		equ 1
(1)   62/     40E : =$4                  bitHintEnbl		equ 4
(1)   63/     40E :                     ; $81
(1)   64/     40E : =$40                 DispEnbl 		equ $40
(1)   65/     40E : =$20                 VintEnbl 		equ $20
(1)   66/     40E : =$10                 DmaEnbl			equ $10
(1)   67/     40E : =$6                  bitDispEnbl		equ 6
(1)   68/     40E : =$5                  bitVintEnbl		equ 5
(1)   69/     40E : =$4                  bitDmaEnbl		equ 4
(1)   70/     40E : =$3                  bitV30			equ 3
(1)   71/     40E :                     
(1)   72/     40E :                     ; ------------------------------------------------
(1)   73/     40E :                     ; VDP VRAM bits
(1)   74/     40E :                     ; ------------------------------------------------
(1)   75/     40E :                     ; BYTE read:
(1)   76/     40E : =$7                  bitAttrPrio		equ 7
(1)   77/     40E : =$4                  bitAttrV		equ 4
(1)   78/     40E : =$3                  bitAttrH		equ 3
(1)   79/     40E :                     ; WORD read:
(1)   80/     40E : =$8000               AttrPrio		equ $8000
(1)   81/     40E : =$1000               AttrV			equ $1000
(1)   82/     40E : =$800                AttrH			equ $0800
(1)   83/     40E :                     
(1)   84/     40E :                     ; ------------------------------------------------
(1)   85/     40E :                     ; vdp_ctrl READ bits
(1)   86/     40E :                     ; Read as WORD
(1)   87/     40E :                     ; ------------------------------------------------
(1)   88/     40E : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   89/     40E : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   90/     40E : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   91/     40E : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   92/     40E : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   93/     40E : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   94/     40E : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   95/     40E : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   96/     40E : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   97/     40E : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   98/     40E :                     
(1)   99/     40E :                     ; ====================================================================
(1)  100/     40E :                     ; ----------------------------------------------------------------
(1)  101/     40E :                     ; Structs
(1)  102/     40E :                     ; ----------------------------------------------------------------
(1)  103/     40E :                     
(1)  104/     40E :                     ; ------------------------------------------------
(1)  105/     40E :                     ; RAM_PalFadeList
(1)  106/       0 :                     palfd			struct
(1)  107/       0 :                     req			ds.b 1
(1)  108/       1 :                     delay			ds.b 1
(1)  109/       2 :                     start			ds.b 1
(1)  110/       3 :                     incr			ds.b 1
(1)  111/       4 :                     target			ds.b 1
(1)  112/       5 :                     timer			ds.b 1
(1)  113/       6 :                     num			ds.w 1
(1)  114/       8 :                     ; len		ds.l 0
(1)  115/     40E : =$8                  			endstruct
(1)  116/     40E :                     
(1)  117/     40E :                     ; ------------------------------------------------
(1)  118/     40E :                     ; RAM_MdMcd_Stamps
(1)  119/     40E :                     
(1)  120/       0 :                     mdstmp		struct
(1)  121/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  122/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  123/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  124/       6 :                     vramSize	ds.w 1
(1)  125/       8 :                     vramLen		ds.w 1		; temporals
(1)  126/       A :                     vramIncr	ds.w 1		; ''
(1)  127/       C :                     stmpoutb	ds.w 1
(1)  128/       E :                     currOutFlip	ds.w 1
(1)  129/      10 :                     fdrop		ds.w 1
(1)  130/      12 :                     cellstorage	ds.l 1
(1)  131/      16 :                     dotIncr		ds.l 1
(1)  132/      1A :                     buffIncr	ds.l 1
(1)  133/      1E :                     ; len		ds.l 0
(1)  134/     40E : =$1E                 		endstruct
(1)  135/     40E :                     
(1)  136/     40E :                     ; ====================================================================
(1)  137/     40E :                     ; ----------------------------------------------------------------
(1)  138/     40E :                     ; RAM section
(1)  139/     40E :                     ; ----------------------------------------------------------------
(1)  140/     40E :                     
(1)  141/     40E : (MACRO)              			memory RAM_MdVideo
(1)  141/     40E : =$40E                GLBL_LASTPC     := *
(1)  141/     40E :                                     dephase
(1)  141/FFFFFFFFFFFFC800 :                                     phase RAM_MDVIDEO
(1)  141/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)  142/FFFFFFFFFFFFC800 :                     	; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFFC800 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  144/FFFFFFFFFFFFC840 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  145/FFFFFFFFFFFFC9C0 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  146/FFFFFFFFFFFFCC40 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  147/FFFFFFFFFFFFD000 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  148/FFFFFFFFFFFFD050 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  149/FFFFFFFFFFFFD550 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  150/FFFFFFFFFFFFD5D0 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  151/FFFFFFFFFFFFD650 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  152/FFFFFFFFFFFFD650 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  153/FFFFFFFFFFFFD652 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  154/FFFFFFFFFFFFD654 :                     RAM_SprOffsetX		ds.w 1				; X spriteset position
(1)  155/FFFFFFFFFFFFD656 :                     RAM_SprOffsetY		ds.w 1				; Y spriteset position
(1)  156/FFFFFFFFFFFFD658 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  157/FFFFFFFFFFFFD65C :                     
(1)  158/FFFFFFFFFFFFD65C :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  159/FFFFFFFFFFFFD65C :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  160/FFFFFFFFFFFFD7DC :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  161/FFFFFFFFFFFFD7E0 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  162/FFFFFFFFFFFFD7E2 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  163/FFFFFFFFFFFFD7E4 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  164/FFFFFFFFFFFFD7E6 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  165/FFFFFFFFFFFFD7E8 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  166/FFFFFFFFFFFFD7EA :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  167/FFFFFFFFFFFFD7EC :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  168/FFFFFFFFFFFFD7EE :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  169/FFFFFFFFFFFFD7F0 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  170/FFFFFFFFFFFFD7F2 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  171/FFFFFFFFFFFFD7F4 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  172/FFFFFFFFFFFFD7F6 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  173/FFFFFFFFFFFFD7F8 :                     sizeof_mdvid		ds.l 0
(1)  174/FFFFFFFFFFFFD7FC : (MACRO)              			endmemory
(1)  174/    140A :                     .here:          dephase
(1)  174/    140A :                                     ds.b -(.here-GLBL_LASTORG)
(1)  174/     40E :                                     phase GLBL_LASTPC
(1)  175/     40E :                     
(1)  176/     40E :                     ; ====================================================================
(1)  177/     40E :                     ; ----------------------------------------------------------------
(1)  178/     40E :                     ; Initialize Genesis video
(1)  179/     40E :                     ;
(1)  180/     40E :                     ; Uses:
(1)  181/     40E :                     ; d5-d7/a5-a6
(1)  182/     40E :                     ; ----------------------------------------------------------------
(1)  183/     40E :                     
(1)  184/     40E :                     Video_Init:
(1)  185/     40E : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  186/     412 : 7C00                		moveq	#0,d6
(1)  187/     414 : 3E3C 0FF7           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  188/     418 :                     .clr_ram:
(1)  189/     418 : 1CC6                		move.b	d6,(a6)+
(1)  190/     41A : 51CF FFFC           		dbf	d7,.clr_ram
(1)  191/     41E : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  192/     422 : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  193/     426 : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  194/     42A :                     .copy_dma:
(1)  195/     42A : 2CD5                		move.l	(a5),(a6)+
(1)  196/     42C : 2CED 0004           		move.l	4(a5),(a6)+
(1)  197/     430 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  198/     434 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  199/     438 : 51CF FFF0           		dbf	d7,.copy_dma
(1)  200/     43C : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  201/     440 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  202/     444 :                     .clr_d:
(1)  203/     444 : 429E                		clr.l	(a6)+
(1)  204/     446 : 429E                		clr.l	(a6)+
(1)  205/     448 : 429E                		clr.l	(a6)+
(1)  206/     44A : 429E                		clr.l	(a6)+
(1)  207/     44C : 51CF FFF6           		dbf	d7,.clr_d
(1)  208/     450 :                     
(1)  209/     450 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  210/     454 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1)  211/     458 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  212/     45C :                     .clr_preq:
(1)  213/     45C : 429E                		clr.l	(a6)+
(1)  214/     45E : 429E                		clr.l	(a6)+
(1)  215/     460 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  225/     464 : 4CBA 000F 002A      		movem.w	.def_regset(pc),d0-d3
(1)  226/     46A : 48B8 000F D7F0      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  227/     470 : 23F8 D7F0 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
              476 : 0004             
(1)  228/     478 : 23F8 D7F4 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
              47E : 0004             
(1)  229/     480 : 6018                		bra	Video_Default
(1)  230/     482 :                     
(1)  231/     482 :                     ; --------------------------------------------------------
(1)  232/     482 :                     ; DMA blast base entry
(1)  233/     482 :                     .dma_entry:
(1)  234/     482 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  235/     486 : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  236/     48C : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  237/     490 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  238/     492 :                     		align 2
(1)  239/     492 :                     .def_regset:
(1)  240/     492 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
              498 : 8C00             
(1)  241/     49A :                     		align 2
(1)  242/     49A :                     
(1)  243/     49A :                     ; --------------------------------------------------------
(1)  244/     49A :                     ; Video_Default
(1)  245/     49A :                     ; --------------------------------------------------------
(1)  246/     49A :                     
(1)  247/     49A :                     Video_Default:
(1)  257/     49A : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
              4A0 : 00C0 0004          
(1)  258/     4A4 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
              4AA : 0004             
(1)  259/     4AC : 31FC C000 D7E4      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  260/     4B2 : 31FC E000 D7E6      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  261/     4B8 : 31FC D000 D7E8      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  262/     4BE : 31FC F800 D7EA      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  263/     4C4 : 31FC FC00 D7EC      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  264/     4CA : 31FC 1000 D7EE      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  265/     4D0 : 6100 0444           		bsr	Video_UpdMapVram
(1)  266/     4D4 : 6100 0492           		bsr	Video_UpdSprHVram
(1)  267/     4D8 : 7001                		moveq	#1,d0					; Size H64 V32
(1)  268/     4DA : 7200                		moveq	#0,d1
(1)  269/     4DC : 6100 04C4           		bsr	Video_SetMapSize
(1)  270/     4E0 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  271/     4E2 : 7200                		moveq	#0,d1
(1)  272/     4E4 : 6000 03DC           		bra	Video_Resolution
(1)  273/     4E8 :                     
(1)  274/     4E8 :                     ; ====================================================================
(1)  275/     4E8 :                     ; --------------------------------------------------------
(1)  276/     4E8 :                     ; Video_Render
(1)  277/     4E8 :                     ;
(1)  278/     4E8 :                     ; Call this during VBlank to update the VDP visuals
(1)  279/     4E8 :                     ; and process the DMA BLAST list, also resets a
(1)  280/     4E8 :                     ; few variables.
(1)  281/     4E8 :                     ; (This is already called on System_Render)
(1)  282/     4E8 :                     ;
(1)  283/     4E8 :                     ; Uses:
(1)  284/     4E8 :                     ; ALL
(1)  285/     4E8 :                     ; --------------------------------------------------------
(1)  286/     4E8 :                     
(1)  287/     4E8 :                     Video_Render:
(1)  288/     4E8 : 6100 0362           		bsr	Video_DmaOn
(1)  289/     4EC : 6100 1140           		bsr	System_DmaEnter_RAM
(1)  290/     4F0 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  291/     4F6 : 3E38 D7EA           		move.w	(RAM_VdpVramSpr).w,d7
(1)  292/     4FA : 3A38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  293/     4FE : 3C07                		move.w	d7,d6
(1)  294/     500 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  295/     504 : 0047 4000           		ori.w	#$4000,d7
(1)  296/     508 : E55E                		rol.w	#2,d6
(1)  297/     50A : 0246 0003           		andi.w	#%11,d6
(1)  298/     50E : 8C7C 0080           		or.w	#$80,d6
(1)  299/     512 : 3805                		move.w	d5,d4
(1)  300/     514 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  301/     518 : 0045 4000           		ori.w	#$4000,d5
(1)  302/     51C : E55C                		rol.w	#2,d4
(1)  303/     51E : 0244 0003           		andi.w	#%11,d4
(1)  304/     522 : 887C 0080           		or.w	#$80,d4
(1)  305/     526 : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  306/     52C : 2CBC 96E8 9528      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  307/     532 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  308/     536 : 3C87                		move.w	d7,(a6)
(1)  309/     538 : 3F06                		move.w	d6,-(sp)
(1)  310/     53A : 3C9F                		move.w	(sp)+,(a6)
(1)  311/     53C : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  312/     542 : 2CBC 96E6 9520      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  313/     548 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  314/     54C : 3C85                		move.w	d5,(a6)
(1)  315/     54E : 3F04                		move.w	d4,-(sp)
(1)  316/     550 : 3C9F                		move.w	(sp)+,(a6)
(1)  317/     552 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  318/     558 : 2CBC 96E8 9500      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  319/     55E : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  320/     562 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  321/     566 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  322/     56A : 3C9F                		move.w	(sp)+,(a6)
(1)  323/     56C : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  324/     572 : 2CBC 96EA 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  325/     578 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  326/     57C : 3CBC C000           		move.w	#$C000,(a6)
(1)  327/     580 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  328/     584 : 3C9F                		move.w	(sp)+,(a6)
(1)  329/     586 : 6100 10AA           		bsr	System_DmaExit_RAM
(1)  330/     58A : 6100 02CC           		bsr	Video_DmaOff
(1)  331/     58E :                     
(1)  332/     58E :                     ; --------------------------------------------------------
(1)  333/     58E :                     ; Struct:
(1)  334/     58E :                     ; dc.w $94xx,$93xx		; Size
(1)  335/     58E :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  336/     58E :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  337/     58E :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  338/     58E : 4A78 D652           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  339/     592 : 6642                		bne.s	.exit
(1)  340/     594 : 4A78 D650           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  341/     598 : 673C                		beq.s	.exit
(1)  342/     59A : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  343/     5A0 : 47F8 D65C           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  344/     5A4 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  345/     5A8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  346/     5AC : 3887                		move.w	d7,(a4)
(1)  347/     5AE : 6100 1044           		bsr	System_DmaEnter_ROM
(1)  348/     5B2 : 4A78 D650           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  349/     5B6 : 6714                		beq.s	.end
(1)  350/     5B8 : 289B                		move.l	(a3)+,(a4)			; Size
(1)  351/     5BA : 289B                		move.l	(a3)+,(a4)			; Source
(1)  352/     5BC : 389B                		move.w	(a3)+,(a4)
(1)  353/     5BE :                     	; CD/CD32X
(1)  366/     5BE : 389B                		move.w	(a3)+,(a4)			; Normal VDP control write
(1)  367/     5C0 : 389B                		move.w	(a3)+,(a4)			; *** CPU freezes ***
(1)  368/     5C2 : D6FC 0002           		adda	#2,a3
(1)  370/     5C6 : 5378 D650           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  371/     5CA : 60E6                		bra.s	.next
(1)  372/     5CC :                     .end:
(1)  373/     5CC : 6100 102A           		bsr	System_DmaExit_ROM
(1)  374/     5D0 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  375/     5D4 : 3887                		move.w	d7,(a4)
(1)  376/     5D6 :                     .exit:
(1)  377/     5D6 : 4E75                		rts
(1)  378/     5D8 :                     
(1)  379/     5D8 :                     ; ====================================================================
(1)  380/     5D8 :                     ; --------------------------------------------------------
(1)  381/     5D8 :                     ; Video_BuildSprites
(1)  382/     5D8 :                     ;
(1)  383/     5D8 :                     ; Build VDP Sprite pieces and maps
(1)  384/     5D8 :                     ; --------------------------------------------------------
(1)  385/     5D8 :                     
(1)  386/     5D8 :                     Video_BuildSprites:
(1)  387/     5D8 : 31FC 0001 D7E2      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  388/     5DE : 4DF8 D050           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  389/     5E2 : 3C38 D7E2           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  390/     5E6 : BC7C 0050           		cmp.w	#80,d6
(1)  391/     5EA : 6C00 017C           		bge	.stop_all
(1)  392/     5EE : 3A06                		move.w	d6,d5
(1)  393/     5F0 : 5345                		subq.w	#1,d5
(1)  394/     5F2 : 6B04                		bmi	.first_spr
(1)  395/     5F4 : E74D                		lsl.w	#3,d5
(1)  396/     5F6 : DCC5                		adda	d5,a6
(1)  397/     5F8 :                     .first_spr:
(1)  398/     5F8 : 4BF8 C9C0           		lea	(RAM_SprPzList).w,a5
(1)  399/     5FC : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  400/     600 :                     .next_pz:
(1)  401/     600 : 0C46 0050           		cmpi.w	#80,d6
(1)  402/     604 : 6E00 0162           		bgt	.stop_all
(1)  403/     608 : 0815 0007           		btst	#7,(a5)
(1)  404/     60C : 6722                		beq	.no_slot_s
(1)  405/     60E : 3015                		move.w	(a5),d0				; This slot is used?
(1)  406/     610 : 3200                		move.w	d0,d1
(1)  407/     612 : 0241 3C00           		andi.w	#$3C00,d1
(1)  408/     616 : E449                		lsr.w	#2,d1
(1)  409/     618 : D246                		add.w	d6,d1
(1)  410/     61A : 342D 0004           		move.w	4(a5),d2
(1)  411/     61E : 362D 0002           		move.w	2(a5),d3
(1)  412/     622 : 0240 03FF           		andi.w	#$03FF,d0
(1)  413/     626 : 3CC0                		move.w	d0,(a6)+
(1)  414/     628 : 3CC1                		move.w	d1,(a6)+
(1)  415/     62A : 3CC2                		move.w	d2,(a6)+
(1)  416/     62C : 3CC3                		move.w	d3,(a6)+
(1)  417/     62E : 5246                		addq.w	#1,d6
(1)  418/     630 :                     .no_slot_s:
(1)  419/     630 : DAFC 0008           		adda	#$08,a5
(1)  420/     634 : 51CF FFCA           		dbf	d7,.next_pz
(1)  421/     638 : 4BF8 C840           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  422/     63C : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  423/     640 :                     .next:
(1)  424/     640 : 0815 0007           		btst	#7,(a5)
(1)  425/     644 : 6700 0118           		beq	.no_map
(1)  426/     648 : 2055                		move.l	(a5),a0
(1)  427/     64A : 4847                		swap	d7
(1)  428/     64C : 7000                		moveq	#0,d0
(1)  429/     64E : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  430/     652 : D040                		add.w	d0,d0
(1)  431/     654 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  432/     658 : 41F0 0000           		lea	(a0,d0.w),a0
(1)  433/     65C : 3A18                		move.w	(a0)+,d5
(1)  434/     65E : 6700 00FE           		beq	.no_map
(1)  435/     662 : 5345                		subq.w	#1,d5
(1)  436/     664 :                     .mk_pz:
(1)  437/     664 : 0C46 0050           		cmpi.w	#80,d6
(1)  438/     668 : 6E00 00FE           		bgt	.stop_all
(1)  439/     66C : 4845                		swap	d5
(1)  440/     66E : 4846                		swap	d6
(1)  441/     670 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  442/     672 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  443/     674 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  444/     676 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  445/     67C : 6710                		beq.s	.ex_vram
(1)  446/     67E : 3801                		move.w	d1,d4
(1)  447/     680 : 0241 000C           		andi.w	#%1100,d1
(1)  448/     684 : 0244 0003           		andi.w	#%0011,d4
(1)  449/     688 : E24C                		lsr.w	#1,d4
(1)  450/     68A : 8244                		or.w	d4,d1
(1)  451/     68C : E24A                		lsr.w	#1,d2
(1)  452/     68E :                     .ex_vram:
(1)  453/     68E : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  454/     692 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  455/     694 : 4880                		ext.w	d0
(1)  456/     696 : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  457/     69A : 3805                		move.w	d5,d4
(1)  458/     69C : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  459/     6A2 : 670E                		beq.s	.ex_vrams
(1)  460/     6A4 : 3805                		move.w	d5,d4
(1)  461/     6A6 : 0244 F800           		andi.w	#$F800,d4
(1)  462/     6AA : 0245 07FF           		andi.w	#$07FF,d5
(1)  463/     6AE : E24D                		lsr.w	#1,d5
(1)  464/     6B0 : 8A44                		or.w	d4,d5
(1)  465/     6B2 :                     .ex_vrams:
(1)  466/     6B2 : 3805                		move.w	d5,d4
(1)  467/     6B4 : 0244 1000           		andi.w	#$1000,d4
(1)  468/     6B8 : 6710                		beq.s	.vram_v
(1)  469/     6BA : 4440                		neg.w	d0
(1)  470/     6BC : 0440 0008           		subi.w	#8,d0
(1)  471/     6C0 : 3C01                		move.w	d1,d6
(1)  472/     6C2 : 0246 0003           		andi.w	#%0011,d6
(1)  473/     6C6 : E74E                		lsl.w	#3,d6
(1)  474/     6C8 : 9046                		sub.w	d6,d0
(1)  475/     6CA :                     .vram_v:
(1)  476/     6CA : 3805                		move.w	d5,d4
(1)  477/     6CC : 0244 0800           		andi.w	#$0800,d4
(1)  478/     6D0 : 6710                		beq.s	.vram_h
(1)  479/     6D2 : 4443                		neg.w	d3
(1)  480/     6D4 : 0443 0008           		subi.w	#8,d3
(1)  481/     6D8 : 3C01                		move.w	d1,d6
(1)  482/     6DA : 0246 000C           		andi.w	#%1100,d6
(1)  483/     6DE : DC46                		add.w	d6,d6
(1)  484/     6E0 : 9646                		sub.w	d6,d3
(1)  485/     6E2 :                     .vram_h:
(1)  486/     6E2 : D445                		add.w	d5,d2
(1)  487/     6E4 : 4845                		swap	d5
(1)  488/     6E6 : 4846                		swap	d6
(1)  489/     6E8 : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  490/     6EC : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  491/     6F0 : D078 D656           		add.w	(RAM_SprOffsetY).w,d0
(1)  492/     6F4 : 9678 D654           		sub.w	(RAM_SprOffsetX).w,d3
(1)  493/     6F8 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  494/     6FC : 6C5C                		bge.s	.no_pz
(1)  495/     6FE : 3801                		move.w	d1,d4
(1)  496/     700 : 0244 000C           		andi.w	#%1100,d4
(1)  497/     704 : D844                		add.w	d4,d4
(1)  498/     706 : D87C 0008           		add.w	#8,d4
(1)  499/     70A : 3E03                		move.w	d3,d7
(1)  500/     70C : DE44                		add.w	d4,d7
(1)  501/     70E : 6B4A                		bmi.s	.no_pz
(1)  502/     710 : 383C 00F0           		move.w	#240,d4
(1)  503/     714 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  504/     71A : 6702                		beq.s	.ex_yext
(1)  505/     71C : D844                		add.w	d4,d4
(1)  506/     71E :                     .ex_yext:
(1)  507/     71E : B044                		cmp.w	d4,d0
(1)  508/     720 : 6C38                		bge.s	.no_pz
(1)  509/     722 : 3801                		move.w	d1,d4
(1)  510/     724 : 0244 0003           		andi.w	#%0011,d4
(1)  511/     728 : E74C                		lsl.w	#3,d4
(1)  512/     72A : D87C 0008           		add.w	#8,d4
(1)  513/     72E : 3E00                		move.w	d0,d7
(1)  514/     730 : DE44                		add.w	d4,d7
(1)  515/     732 : 6B26                		bmi.s	.no_pz
(1)  516/     734 : E149                		lsl.w	#8,d1			; Size + Link
(1)  517/     736 : 8246                		or.w	d6,d1
(1)  518/     738 : 0640 0080           		addi.w	#$80,d0
(1)  519/     73C : 3838 D7F6           		move.w	(RAM_VdpRegSetC).w,d4
(1)  520/     740 : 0804 0002           		btst	#2,d4
(1)  521/     744 : 6704                		beq.s	.dont_add
(1)  522/     746 : 0640 0080           		addi.w	#$80,d0
(1)  523/     74A :                     .dont_add:
(1)  524/     74A : 0643 0080           		addi.w	#$80,d3
(1)  525/     74E : 3CC0                		move.w	d0,(a6)+
(1)  526/     750 : 3CC1                		move.w	d1,(a6)+
(1)  527/     752 : 3CC2                		move.w	d2,(a6)+
(1)  528/     754 : 3CC3                		move.w	d3,(a6)+
(1)  529/     756 : DC7C 0001           		add.w	#1,d6
(1)  530/     75A :                     .no_pz:
(1)  531/     75A : 51CD FF08           		dbf	d5,.mk_pz
(1)  532/     75E :                     .no_map:
(1)  533/     75E : DAFC 0010           		adda	#$10,a5
(1)  534/     762 : 4847                		swap	d7
(1)  535/     764 :                     .no_slot:
(1)  536/     764 : 51CF FEDA           		dbf	d7,.next
(1)  537/     768 :                     .stop_all:
(1)  538/     768 : 614A                		bsr	vid_CheckLastSpr
(1)  539/     76A : 31C6 D7E2           		move.w	d6,(RAM_SprLinkNum).w
(1)  540/     76E :                     
(1)  541/     76E :                     ; --------------------------------------------------------
(1)  542/     76E :                     ; Reset slots
(1)  543/     76E :                     ; --------------------------------------------------------
(1)  544/     76E :                     
(1)  545/     76E :                     .freeze:
(1)  546/     76E : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1)  547/     772 : 7E4F                		moveq	#80-1,d7
(1)  548/     774 : 7C08                		moveq	#$08,d6
(1)  549/     776 :                     .chk_spr_r:
(1)  550/     776 : 1A16                		move.b	(a6),d5
(1)  551/     778 : 0805 0007           		btst	#7,d5
(1)  552/     77C : 670C                		beq.s	.no_slot_r
(1)  553/     77E : 0805 0006           		btst	#6,d5
(1)  554/     782 : 6706                		beq.s	.no_slot_r
(1)  555/     784 : 4296                		clr.l	(a6)
(1)  556/     786 : 42AE 0004           		clr.l	4(a6)
(1)  557/     78A :                     .no_slot_r:
(1)  558/     78A : DCC6                		adda	d6,a6
(1)  559/     78C : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  560/     790 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  561/     794 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  562/     796 : 7C10                		moveq	#$10,d6
(1)  563/     798 :                     .chk_spr_mr:
(1)  564/     798 : 1A16                		move.b	(a6),d5
(1)  565/     79A : 0805 0007           		btst	#7,d5
(1)  566/     79E : 670C                		beq.s	.no_slot_mr
(1)  567/     7A0 : 0805 0006           		btst	#6,d5
(1)  568/     7A4 : 6706                		beq.s	.no_slot_mr
(1)  569/     7A6 : 4296                		clr.l	(a6)
(1)  570/     7A8 : 42AE 0004           		clr.l	4(a6)
(1)  571/     7AC :                     .no_slot_mr:
(1)  572/     7AC : DCC6                		adda	d6,a6
(1)  573/     7AE : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  574/     7B2 : 4E75                		rts
(1)  575/     7B4 :                     
(1)  576/     7B4 :                     ; --------------------------------------------------------
(1)  577/     7B4 :                     ; d6 - Current link
(1)  578/     7B4 :                     
(1)  579/     7B4 :                     vid_CheckLastSpr:
(1)  580/     7B4 : 4DF8 D050           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  581/     7B8 : 0C46 0001           		cmpi.w	#1,d6
(1)  582/     7BC : 6710                		beq.s	.blnk_first
(1)  583/     7BE : 0C46 0050           		cmpi.w	#80,d6
(1)  584/     7C2 : 6E10                		bgt.s	.last_one
(1)  585/     7C4 : 3E06                		move.w	d6,d7
(1)  586/     7C6 : 0447 0001           		subi.w	#1,d7
(1)  587/     7CA : E74F                		lsl.w	#3,d7
(1)  588/     7CC : DCC7                		adda	d7,a6
(1)  589/     7CE :                     .blnk_first:
(1)  590/     7CE : 429E                		clr.l	(a6)+
(1)  591/     7D0 : 429E                		clr.l	(a6)+
(1)  592/     7D2 : 6010                		bra.s	.spr_exit
(1)  593/     7D4 :                     .last_one:
(1)  594/     7D4 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  595/     7D8 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  596/     7DC : 0247 0F00           		andi.w	#$0F00,d7
(1)  597/     7E0 : 3D47 0002           		move.w	d7,2(a6)
(1)  598/     7E4 :                     .spr_exit:
(1)  599/     7E4 : 4E75                		rts
(1)  600/     7E6 :                     
(1)  601/     7E6 :                     ; ====================================================================
(1)  602/     7E6 :                     ; --------------------------------------------------------
(1)  603/     7E6 :                     ; Subroutines
(1)  604/     7E6 :                     ; --------------------------------------------------------
(1)  605/     7E6 :                     
(1)  606/     7E6 :                     ; --------------------------------------------------------
(1)  607/     7E6 :                     ; Video_Clear
(1)  608/     7E6 :                     ;
(1)  609/     7E6 :                     ; Clears VDP VRAM and other RAM sections
(1)  610/     7E6 :                     ;
(1)  611/     7E6 :                     ; Breaks:
(1)  612/     7E6 :                     ; ALL
(1)  613/     7E6 :                     ; --------------------------------------------------------
(1)  614/     7E6 :                     
(1)  615/     7E6 :                     Video_Clear:
(1)  624/     7E6 : 7C00                		moveq	#0,d6
(1)  625/     7E8 : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  626/     7EC : 3E3C 0E57           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  627/     7F0 :                     .clr_me:
(1)  628/     7F0 : 1CC6                		move.b	d6,(a6)+
(1)  629/     7F2 : 51CF FFFC           		dbf	d7,.clr_me
(1)  630/     7F6 : 303C 0000           		move.w	#0,d0
(1)  631/     7FA : 323C 0000           		move.w	#0,d1
(1)  632/     7FE : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  633/     802 : 6100 02D6           		bsr	Video_Fill
(1)  634/     806 :                     
(1)  635/     806 :                     ; --------------------------------------------------------
(1)  636/     806 :                     ; Video_ClearScreen
(1)  637/     806 :                     ;
(1)  638/     806 :                     ; Clears ALL 3 map layers.
(1)  639/     806 :                     ; --------------------------------------------------------
(1)  640/     806 :                     
(1)  641/     806 :                     Video_ClearScreen:
(1)  642/     806 : 7000                		moveq	#0,d0
(1)  643/     808 : 3238 D7E4           		move.w	(RAM_VdpVramFG).w,d1
(1)  644/     80C : 3438 D7EE           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  645/     810 : 6100 02C8           		bsr	Video_Fill
(1)  646/     814 : 3238 D7E6           		move.w	(RAM_VdpVramBG).w,d1
(1)  647/     818 : 6100 02C0           		bsr	Video_Fill
(1)  648/     81C : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  649/     820 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  650/     824 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  651/     828 : 6702                		beq.s	.not_small
(1)  652/     82A : D442                		add.w	d2,d2			; Size $1000
(1)  653/     82C :                     .not_small:
(1)  654/     82C : 3238 D7E8           		move.w	(RAM_VdpVramWD).w,d1
(1)  655/     830 : 6000 02A8           		bra	Video_Fill
(1)  656/     834 :                     
(1)  657/     834 :                     ; --------------------------------------------------------
(1)  658/     834 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  659/     834 :                     ;
(1)  660/     834 :                     ; Enable/Disable VDP Display
(1)  661/     834 :                     ; --------------------------------------------------------
(1)  662/     834 :                     
(1)  663/     834 :                     Video_DisplayOn:
(1)  664/     834 : 3F07                		move.w	d7,-(sp)
(1)  665/     836 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  666/     83A : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  667/     83E : 6022                		bra.s	vid_WrtReg01
(1)  668/     840 :                     Video_DisplayOff:
(1)  669/     840 : 3F07                		move.w	d7,-(sp)
(1)  670/     842 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  671/     846 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  672/     84A : 6016                		bra.s	vid_WrtReg01
(1)  673/     84C :                     
(1)  674/     84C :                     ; --------------------------------------------------------
(1)  675/     84C :                     ; Video_DmaOn, Video_DmaOff
(1)  676/     84C :                     ;
(1)  677/     84C :                     ; Enable/Disable DMA
(1)  678/     84C :                     ; --------------------------------------------------------
(1)  679/     84C :                     
(1)  680/     84C :                     Video_DmaOn:
(1)  681/     84C : 3F07                		move.w	d7,-(sp)
(1)  682/     84E : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  683/     852 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  684/     856 : 600A                		bra.s	vid_WrtReg01
(1)  685/     858 :                     Video_DmaOff:
(1)  686/     858 : 3F07                		move.w	d7,-(sp)
(1)  687/     85A : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  688/     85E : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  689/     862 :                     
(1)  690/     862 :                     ; ------------------------------------------------
(1)  691/     862 :                     
(1)  692/     862 :                     vid_WrtReg01:
(1)  693/     862 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  694/     868 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  695/     86C : 3E1F                		move.w	(sp)+,d7
(1)  696/     86E : 4E75                		rts
(1)  697/     870 :                     
(1)  698/     870 :                     ; --------------------------------------------------------
(1)  699/     870 :                     ; Video_IntEnable
(1)  700/     870 :                     ;
(1)  701/     870 :                     ; Enable or Disable VBlank, HBlank and External
(1)  702/     870 :                     ; interrupts
(1)  703/     870 :                     ;
(1)  704/     870 :                     ; Input:
(1)  705/     870 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  706/     870 :                     ;      | %00000EHV
(1)  707/     870 :                     ;      | E - External
(1)  708/     870 :                     ;      | H - HBlank
(1)  709/     870 :                     ;      | V - VBlank
(1)  710/     870 :                     ;
(1)  711/     870 :                     ; Notes:
(1)  712/     870 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  713/     870 :                     ; --------------------------------------------------------
(1)  714/     870 :                     
(1)  715/     870 :                     Video_IntEnable:
(1)  716/     870 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  717/     874 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  718/     878 : 3C00                		move.w	d0,d6
(1)  719/     87A : 0246 0001           		andi.w	#1,d6			; %--V
(1)  720/     87E : EB4E                		lsl.w	#5,d6
(1)  721/     880 : 8E46                		or.w	d6,d7
(1)  722/     882 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  723/     886 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  724/     88C : 3E38 D7F0           		move.w	(RAM_VdpRegSet0).w,d7
(1)  725/     890 : 3C00                		move.w	d0,d6
(1)  726/     892 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  727/     896 : E74E                		lsl.w	#3,d6
(1)  728/     898 : 8E46                		or.w	d6,d7
(1)  729/     89A : 31C7 D7F0           		move.w	d7,(RAM_VdpRegSet0).w
(1)  730/     89E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  731/     8A4 : 3E38 D7F4           		move.w	(RAM_VdpRegSetB).w,d7
(1)  732/     8A8 : 3C00                		move.w	d0,d6			; %E--
(1)  733/     8AA : 0246 0004           		andi.w	#%100,d6
(1)  734/     8AE : DC46                		add.w	d6,d6
(1)  735/     8B0 : 8E46                		or.w	d6,d7
(1)  736/     8B2 : 31C7 D7F4           		move.w	d7,(RAM_VdpRegSetB).w
(1)  737/     8B6 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  738/     8BC : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  739/     8C0 : 4E75                		rts
(1)  740/     8C2 :                     
(1)  741/     8C2 :                     ; --------------------------------------------------------
(1)  742/     8C2 :                     ; Video_Resolution
(1)  743/     8C2 :                     ;
(1)  744/     8C2 :                     ; Set video resolution
(1)  745/     8C2 :                     ;
(1)  746/     8C2 :                     ; Input:
(1)  747/     8C2 :                     ; d0.w | $00 - Horizontal 256
(1)  748/     8C2 :                     ;      | $01 - Horizontal 320
(1)  749/     8C2 :                     ;
(1)  750/     8C2 :                     ; d1.w | $00 - Vertical 224
(1)  751/     8C2 :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  752/     8C2 :                     ;      | $02 - Double resolution mode
(1)  753/     8C2 :                     ;      | $03 - INVALID
(1)  754/     8C2 :                     ; --------------------------------------------------------
(1)  755/     8C2 :                     
(1)  756/     8C2 :                     Video_Resolution:
(1)  757/     8C2 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  758/     8C6 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  759/     8CA : 0207 00F7           		andi.b	#%11110111,d7
(1)  760/     8CE : 3C01                		move.w	d1,d6
(1)  761/     8D0 : CC7C 0001           		and.w	#1,d6
(1)  762/     8D4 : E74E                		lsl.w	#3,d6
(1)  763/     8D6 : 8E46                		or.w	d6,d7
(1)  764/     8D8 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  765/     8DE : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  766/     8E2 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1)  767/     8E6 : 0207 0078           		andi.b	#%01111000,d7
(1)  768/     8EA : 3C00                		move.w	d0,d6
(1)  769/     8EC : CC7C 0001           		and.w	#$01,d6
(1)  770/     8F0 : 6704                		beq.s	.ex_bit
(1)  771/     8F2 : 8C7C 0081           		or.w	#$81,d6
(1)  772/     8F6 :                     .ex_bit:
(1)  773/     8F6 : 8E46                		or.w	d6,d7
(1)  774/     8F8 : 3C01                		move.w	d1,d6
(1)  775/     8FA : CC7C 0002           		and.w	#%010,d6
(1)  776/     8FE : 6704                		beq.s	.double
(1)  777/     900 : 8C7C 0004           		or.w	#%100,d6
(1)  778/     904 :                     .double:
(1)  779/     904 : 8E46                		or.w	d6,d7
(1)  780/     906 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  781/     90C : 31C7 D7F6           		move.w	d7,(RAM_VdpRegSetC).w
(1)  782/     910 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  783/     914 : 4E75                		rts
(1)  784/     916 :                     
(1)  785/     916 :                     ; --------------------------------------------------------
(1)  786/     916 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  787/     916 :                     ;
(1)  788/     916 :                     ; Update VRAM locations for FG, BG, Window and
(1)  789/     916 :                     ; the Horizontal scroll
(1)  790/     916 :                     ; --------------------------------------------------------
(1)  791/     916 :                     
(1)  792/     916 :                     Video_UpdMapVram:
(1)  793/     916 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  794/     91A : 3E3C 8200           		move.w	#$8200,d7
(1)  795/     91E : 3C38 D7E4           		move.w	(RAM_VdpVramFG).w,d6
(1)  796/     922 : E04E                		lsr.w	#8,d6
(1)  797/     924 : E44E                		lsr.w	#2,d6
(1)  798/     926 : 0246 0038           		andi.w	#%00111000,d6
(1)  799/     92A : 8E46                		or.w	d6,d7
(1)  800/     92C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  801/     932 : 3E3C 8300           		move.w	#$8300,d7
(1)  802/     936 : 3C38 D7E8           		move.w	(RAM_VdpVramWD).w,d6
(1)  803/     93A : E04E                		lsr.w	#8,d6
(1)  804/     93C : E44E                		lsr.w	#2,d6
(1)  805/     93E : 0246 003E           		andi.w	#%00111110,d6
(1)  806/     942 : 8E46                		or.w	d6,d7
(1)  807/     944 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  808/     94A : 3E3C 8400           		move.w	#$8400,d7
(1)  809/     94E : 3C38 D7E6           		move.w	(RAM_VdpVramBG).w,d6
(1)  810/     952 : E04E                		lsr.w	#8,d6
(1)  811/     954 : EA4E                		lsr.w	#5,d6
(1)  812/     956 : 0246 0007           		andi.w	#%00000111,d6
(1)  813/     95A : 8E46                		or.w	d6,d7
(1)  814/     95C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  815/     962 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  816/     966 : 4E75                		rts
(1)  817/     968 :                     
(1)  818/     968 :                     Video_UpdSprHVram:
(1)  819/     968 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  820/     96C : 3E3C 8500           		move.w	#$8500,d7
(1)  821/     970 : 3C38 D7EA           		move.w	(RAM_VdpVramSpr).w,d6
(1)  822/     974 : E04E                		lsr.w	#8,d6
(1)  823/     976 : E24E                		lsr.w	#1,d6
(1)  824/     978 : 0246 007F           		andi.w	#%01111111,d6
(1)  825/     97C : 8E46                		or.w	d6,d7
(1)  826/     97E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  827/     984 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  828/     988 : 3C38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  829/     98C : E04E                		lsr.w	#8,d6
(1)  830/     98E : E44E                		lsr.w	#2,d6
(1)  831/     990 : 0246 003F           		andi.w	#%00111111,d6
(1)  832/     994 : 8E46                		or.w	d6,d7
(1)  833/     996 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  834/     99C : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  835/     9A0 : 4E75                		rts
(1)  836/     9A2 :                     
(1)  837/     9A2 :                     ; --------------------------------------------------------
(1)  838/     9A2 :                     ; Video_SetMapSize
(1)  839/     9A2 :                     ;
(1)  840/     9A2 :                     ; Set MAP size(s) to FG and BG
(1)  841/     9A2 :                     ;
(1)  842/     9A2 :                     ; Input:
(1)  843/     9A2 :                     ; d0.w | Width: %00 - H32
(1)  844/     9A2 :                     ;      |        %01 - H40
(1)  845/     9A2 :                     ;      |        %11 - H128
(1)  846/     9A2 :                     ;
(1)  847/     9A2 :                     ; d1.w | Height: %00 - V32
(1)  848/     9A2 :                     ;      |         %01 - V40
(1)  849/     9A2 :                     ;      |         %11 - V128
(1)  850/     9A2 :                     ;
(1)  851/     9A2 :                     ; Notes:
(1)  852/     9A2 :                     ; Maximum size for a single layer size
(1)  853/     9A2 :                     ; is $1000
(1)  854/     9A2 :                     ; --------------------------------------------------------
(1)  855/     9A2 :                     
(1)  856/     9A2 :                     Video_SetMapSize:
(1)  857/     9A2 : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  858/     9A6 : 3E3C 9000           		move.w	#$9000,d7
(1)  859/     9AA : 3C00                		move.w	d0,d6
(1)  860/     9AC : 3A01                		move.w	d1,d5
(1)  861/     9AE : 0246 0003           		andi.w	#%11,d6
(1)  862/     9B2 : 0245 0003           		andi.w	#%11,d5
(1)  863/     9B6 : E94D                		lsl.w	#4,d5
(1)  864/     9B8 : 8C45                		or.w	d5,d6
(1)  865/     9BA : 8E46                		or.w	d6,d7
(1)  866/     9BC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  867/     9C2 : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  868/     9C6 : 4E75                		rts
(1)  869/     9C8 :                     
(1)  870/     9C8 :                     ; --------------------------------------------------------
(1)  871/     9C8 :                     ; Video_LoadArt
(1)  872/     9C8 :                     ;
(1)  873/     9C8 :                     ; Loads VDP graphics using DMA
(1)  874/     9C8 :                     ;
(1)  875/     9C8 :                     ; Input:
(1)  876/     9C8 :                     ; d0.l | Graphics data (NOT a0)
(1)  877/     9C8 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  878/     9C8 :                     ; d2.w | Size:          cell_vram(size)
(1)  879/     9C8 :                     ;
(1)  880/     9C8 :                     ; Notes:
(1)  881/     9C8 :                     ; - For a faster load: call this during VBlank or
(1)  882/     9C8 :                     ;   disable VDP Display temporally.
(1)  883/     9C8 :                     ;
(1)  884/     9C8 :                     ; * 32X Cartridge ONLY:
(1)  885/     9C8 :                     ; - This sets RV bit, make sure your code is
(1)  886/     9C8 :                     ;   running on RAM (already doing here) and the
(1)  887/     9C8 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  888/     9C8 :                     ; --------------------------------------------------------
(1)  889/     9C8 :                     
(1)  890/     9C8 :                     Video_LoadArt:
(1)  891/     9C8 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  892/     9CC : 2E00                		move.l	d0,d7
(1)  893/     9CE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  894/     9D4 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  895/     9DA : 6736                		beq.s	.normal
(1)  896/     9DC : 2A00                		move.l	d0,d5
(1)  897/     9DE : DA42                		add.w	d2,d5
(1)  898/     9E0 : 6430                		bcc.s	.normal
(1)  899/     9E2 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  900/     9E4 : 3C01                		move.w	d1,d6
(1)  901/     9E6 : 2E05                		move.l	d5,d7		; Top
(1)  902/     9E8 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  903/     9EE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  904/     9F4 : 9E80                		sub.l	d0,d7
(1)  905/     9F6 : 6128                		bsr.s	.mk_set
(1)  906/     9F8 : 2A00                		move.l	d0,d5		; Bottom
(1)  907/     9FA : 0685 0001 0000      		addi.l	#$010000,d5
(1)  908/     A00 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  909/     A06 : 2C05                		move.l	d5,d6
(1)  910/     A08 : 9C80                		sub.l	d0,d6
(1)  911/     A0A : 3E02                		move.w	d2,d7
(1)  912/     A0C : 9E46                		sub.w	d6,d7
(1)  913/     A0E : DC41                		add.w	d1,d6
(1)  914/     A10 : 6006                		bra.s	.last_set
(1)  915/     A12 :                     .normal:
(1)  916/     A12 : 2A00                		move.l	d0,d5
(1)  917/     A14 : 3C01                		move.w	d1,d6
(1)  918/     A16 : 3E02                		move.w	d2,d7
(1)  919/     A18 :                     .last_set:
(1)  920/     A18 : 6106                		bsr.s	.mk_set
(1)  921/     A1A : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  922/     A1E : 4E75                		rts
(1)  923/     A20 :                     
(1)  924/     A20 :                     ; d7 - size
(1)  925/     A20 :                     ; d6 - vram
(1)  926/     A20 :                     ; d5 - data
(1)  927/     A20 :                     .mk_set:
(1)  928/     A20 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  929/     A26 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  930/     A2C : 6734                		beq.s	.bad_size
(1)  931/     A2E : 4846                		swap	d6
(1)  932/     A30 : 4845                		swap	d5
(1)  933/     A32 : 3C05                		move.w	d5,d6
(1)  934/     A34 : 4845                		swap	d5
(1)  943/     A36 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  944/     A3C : 2F07                		move.l	d7,-(sp)		; <--
(1)  945/     A3E : 6100 FE0C           		bsr	Video_DmaOn
(1)  946/     A42 : 2E1F                		move.l	(sp)+,d7
(1)  947/     A44 : 0246 00FF           		andi.w	#$FF,d6
(1)  948/     A48 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  949/     A4C : 6716                		beq.s	.ram_write
(1)  950/     A4E : 4846                		swap	d6
(1)  951/     A50 : 6126                		bsr.s	.shared_setup
(1)  952/     A52 : 6100 0BA0           		bsr	System_DmaEnter_ROM
(1)  953/     A56 : 3C86                		move.w	d6,(a6)			; First write
(1)  954/     A58 : 3C87                		move.w	d7,(a6)			; Second write
(1)  955/     A5A : 6100 0B9C           		bsr	System_DmaExit_ROM
(1)  956/     A5E : 6100 FDF8           		bsr	Video_DmaOff
(1)  957/     A62 :                     	; Word-RAM patch
(1)  978/     A62 :                     .bad_size:
(1)  979/     A62 : 4E75                		rts
(1)  980/     A64 :                     
(1)  981/     A64 :                     ; --------------------------------------------------------
(1)  982/     A64 :                     
(1)  983/     A64 :                     .ram_write:
(1)  984/     A64 : 4846                		swap	d6
(1)  985/     A66 : 6110                		bsr.s	.shared_setup
(1)  986/     A68 : 6100 0BC4           		bsr	System_DmaEnter_RAM
(1)  987/     A6C : 3C86                		move.w	d6,(a6)			; First write
(1)  988/     A6E : 3C87                		move.w	d7,(a6)			; Second write
(1)  989/     A70 : 6100 0BC0           		bsr	System_DmaExit_RAM
(1)  990/     A74 : 6000 FDE2           		bra	Video_DmaOff
(1)  991/     A78 :                     
(1)  992/     A78 :                     ; --------------------------------------------------------
(1)  993/     A78 :                     
(1)  994/     A78 :                     .shared_setup:
(1)  995/     A78 : EF8F                		lsl.l	#7,d7
(1)  996/     A7A : E04F                		lsr.w	#8,d7
(1)  997/     A7C : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  998/     A82 : 2C87                		move.l	d7,(a6)
(1)  999/     A84 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1000/     A86 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1) 1001/     A8C : 1E05                 		move.b	d5,d7
(1) 1002/     A8E : E08D                 		lsr.l	#8,d5
(1) 1003/     A90 : 4847                 		swap	d7
(1) 1004/     A92 : 1E05                 		move.b	d5,d7
(1) 1005/     A94 : 2C87                 		move.l	d7,(a6)
(1) 1006/     A96 : 3E3C 9700            		move.w	#$9700,d7
(1) 1007/     A9A : E08D                 		lsr.l	#8,d5
(1) 1008/     A9C : 1E05                 		move.b	d5,d7
(1) 1009/     A9E : 3C87                 		move.w	d7,(a6)
(1) 1010/     AA0 : 3E06                		move.w	d6,d7			; Destination
(1) 1011/     AA2 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1012/     AA8 : 0046 4000           		ori.w	#$4000,d6
(1) 1013/     AAC : E04F                		lsr.w	#8,d7
(1) 1014/     AAE : EC4F                		lsr.w	#6,d7
(1) 1015/     AB0 : 0247 0003           		andi.w	#%11,d7
(1) 1016/     AB4 : 0047 0080           		ori.w	#$80,d7
(1) 1017/     AB8 : 4E75                		rts
(1) 1018/     ABA :                     
(1) 1019/     ABA :                     ; --------------------------------------------------------
(1) 1020/     ABA :                     ; Video_LoadArt_List
(1) 1021/     ABA :                     ;
(1) 1022/     ABA :                     ; Loads VDP graphics on bulk
(1) 1023/     ABA :                     ;
(1) 1024/     ABA :                     ; Input:
(1) 1025/     ABA :                     ; a0 | List of graphics to load:
(1) 1026/     ABA :                     ;        dc.w numof_entries
(1) 1027/     ABA :                     ;        dc.l ART_DATA
(1) 1028/     ABA :                     ;        dc.w cell_vram(vram_pos)
(1) 1029/     ABA :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1030/     ABA :                     ;        ; ...more entries
(1) 1031/     ABA :                     ;
(1) 1032/     ABA :                     ; Note:
(1) 1033/     ABA :                     ; CPU heavy.
(1) 1034/     ABA :                     ; --------------------------------------------------------
(1) 1035/     ABA :                     
(1) 1036/     ABA :                     Video_LoadArt_List:
(1) 1037/     ABA : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1038/     ABE : 3E18                		move.w	(a0)+,d7
(1) 1039/     AC0 : 6712                		beq.s	.invalid
(1) 1040/     AC2 : 6B10                		bmi.s	.invalid
(1) 1041/     AC4 : 5347                		subq.w	#1,d7
(1) 1042/     AC6 :                     .next_one:
(1) 1043/     AC6 : 2018                		move.l	(a0)+,d0
(1) 1044/     AC8 : 3218                		move.w	(a0)+,d1
(1) 1045/     ACA : 3418                		move.w	(a0)+,d2
(1) 1046/     ACC : 6100 FEFA           		bsr	Video_LoadArt
(1) 1047/     AD0 : 51CF FFF4           		dbf	d7,.next_one
(1) 1048/     AD4 :                     .invalid:
(1) 1049/     AD4 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1050/     AD8 : 4E75                		rts
(1) 1051/     ADA :                     
(1) 1052/     ADA :                     ; --------------------------------------------------------
(1) 1053/     ADA :                     ; Video_Fill
(1) 1054/     ADA :                     ;
(1) 1055/     ADA :                     ; Fill data to VRAM
(1) 1056/     ADA :                     ;
(1) 1057/     ADA :                     ; Input:
(1) 1058/     ADA :                     ; d0.b | BYTE to fill
(1) 1059/     ADA :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1060/     ADA :                     ; d2.w | Size:             cell_vram(size)
(1) 1061/     ADA :                     ;
(1) 1062/     ADA :                     ; Notes:
(1) 1063/     ADA :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1064/     ADA :                     ;   invalid.
(1) 1065/     ADA :                     ; --------------------------------------------------------
(1) 1066/     ADA :                     
(1) 1067/     ADA :                     ; Video_Fill_Incr:
(1) 1068/     ADA :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1069/     ADA :                     ; 		move.w	d3,d6
(1) 1070/     ADA :                     ; 		bra.s	vid_FillGo
(1) 1071/     ADA :                     Video_Fill:
(1) 1072/     ADA : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1073/     ADE : 3C3C 0001           		move.w	#1,d6
(1) 1074/     AE2 :                     vid_FillGo:
(1) 1075/     AE2 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1076/     AE8 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1077/     AEA : 0807 0001           		btst	#bitDma,d7
(1) 1078/     AEE : 66F8                		bne.s	.dmaw
(1) 1079/     AF0 : 6100 FD5A           		bsr	Video_DmaOn
(1) 1080/     AF4 : 0246 00FF           		andi.w	#$FF,d6
(1) 1081/     AF8 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1082/     AFC : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1083/     AFE : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1084/     B00 : 0447 0001           		subi.w	#1,d7
(1) 1085/     B04 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1086/     B0A : 1C07                		move.b	d7,d6
(1) 1087/     B0C : 4846                		swap	d6
(1) 1088/     B0E : E04F                		lsr.w	#8,d7
(1) 1089/     B10 : 1C07                		move.b	d7,d6
(1) 1090/     B12 : 4846                		swap	d6
(1) 1091/     B14 : 2C86                		move.l	d6,(a6)
(1) 1092/     B16 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1093/     B1A : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1094/     B1C : 3C01                		move.w	d1,d6
(1) 1095/     B1E : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1096/     B22 : 0046 4000           		ori.w	#$4000,d6
(1) 1097/     B26 : 4846                		swap	d6
(1) 1098/     B28 : 3C07                		move.w	d7,d6
(1) 1099/     B2A : E04E                		lsr.w	#8,d6
(1) 1100/     B2C : EC4E                		lsr.w	#6,d6
(1) 1101/     B2E : 0246 0003           		andi.w	#%11,d6
(1) 1102/     B32 : 0046 0080           		ori.w	#$80,d6
(1) 1103/     B36 : 2C86                		move.l	d6,(a6)
(1) 1104/     B38 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1105/     B3C : 3E16                .dma_w:		move.w	(a6),d7
(1) 1106/     B3E : 0807 0001           		btst	#bitDma,d7
(1) 1107/     B42 : 66F8                		bne.s	.dma_w
(1) 1108/     B44 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1109/     B48 : 6100 FD0E           		bsr	Video_DmaOff
(1) 1110/     B4C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1111/     B50 : 4E75                		rts
(1) 1112/     B52 :                     
(1) 1113/     B52 :                     ; --------------------------------------------------------
(1) 1114/     B52 :                     ; Video_Copy
(1) 1115/     B52 :                     ;
(1) 1116/     B52 :                     ; Copy VRAM data to another location inside VRAM
(1) 1117/     B52 :                     ;
(1) 1118/     B52 :                     ; Input:
(1) 1119/     B52 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1120/     B52 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1121/     B52 :                     ; d2.w | Size
(1) 1122/     B52 :                     ; --------------------------------------------------------
(1) 1123/     B52 :                     
(1) 1124/     B52 :                     Video_Copy:
(1) 1125/     B52 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1126/     B56 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1127/     B5C : 3E16                .dmaw:		move.w	(a6),d7
(1) 1128/     B5E : 0807 0001           		btst	#bitDma,d7
(1) 1129/     B62 : 66F8                		bne.s	.dmaw
(1) 1130/     B64 : 6100 FCE6           		bsr	Video_DmaOn
(1) 1131/     B68 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1132/     B6C : 3E02                		move.w	d2,d7			; SIZE
(1) 1133/     B6E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1134/     B74 : 1C07                		move.b	d7,d6
(1) 1135/     B76 : 4846                		swap	d6
(1) 1136/     B78 : E04F                		lsr.w	#8,d7
(1) 1137/     B7A : 1C07                		move.b	d7,d6
(1) 1138/     B7C : 4846                		swap	d6
(1) 1139/     B7E : 2C86                		move.l	d6,(a6)
(1) 1140/     B80 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1141/     B86 : 3E00                		move.w	d0,d7
(1) 1142/     B88 : 1C07                		move.b	d7,d6
(1) 1143/     B8A : 4846                		swap	d6
(1) 1144/     B8C : E04F                		lsr.w	#8,d7
(1) 1145/     B8E : 1C07                		move.b	d7,d6
(1) 1146/     B90 : 2C86                		move.l	d6,(a6)
(1) 1147/     B92 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1148/     B96 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1149/     B98 : 3C07                		move.w	d7,d6
(1) 1150/     B9A : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1151/     B9E : 0046 4000           		ori.w	#$4000,d6
(1) 1152/     BA2 : 4846                		swap	d6
(1) 1153/     BA4 : 3C07                		move.w	d7,d6
(1) 1154/     BA6 : E04E                		lsr.w	#8,d6
(1) 1155/     BA8 : EC4E                		lsr.w	#6,d6
(1) 1156/     BAA : 0246 0003           		andi.w	#%11,d6
(1) 1157/     BAE : 0046 00C0           		ori.w	#$C0,d6
(1) 1158/     BB2 : 2C86                		move.l	d6,(a6)
(1) 1159/     BB4 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1160/     BB8 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1161/     BBA : 0807 0001           		btst	#bitDma,d7
(1) 1162/     BBE : 66F8                		bne.s	.dma_w
(1) 1163/     BC0 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1164/     BC4 : 6100 FC92           		bsr	Video_DmaOff
(1) 1165/     BC8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1166/     BCC : 4E75                		rts
(1) 1167/     BCE :                     
(1) 1168/     BCE :                     ; --------------------------------------------------------
(1) 1169/     BCE :                     ; Video_MakeDmaEntry
(1) 1170/     BCE :                     ;
(1) 1171/     BCE :                     ; Makes a new entry to the DMA BLAST list
(1) 1172/     BCE :                     ; to be processed on the next VBlank
(1) 1173/     BCE :                     ;
(1) 1174/     BCE :                     ; Input:
(1) 1175/     BCE :                     ; d0.l | Graphics data location
(1) 1176/     BCE :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1177/     BCE :                     ; d2.w | Size
(1) 1178/     BCE :                     ;
(1) 1179/     BCE :                     ; Notes:
(1) 1180/     BCE :                     ; - Call this during DISPLAY only
(1) 1181/     BCE :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1182/     BCE :                     ;
(1) 1183/     BCE :                     ; * SCD/CD32X ONLY:
(1) 1184/     BCE :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1185/     BCE :                     ;   if not reading from WORD-RAM
(1) 1186/     BCE :                     ; --------------------------------------------------------
(1) 1187/     BCE :                     
(1) 1188/     BCE :                     Video_MakeDmaEntry:
(1) 1189/     BCE : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1190/     BD2 : 2E00                		move.l	d0,d7
(1) 1191/     BD4 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1192/     BDA : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1193/     BE0 : 6736                		beq.s	.normal
(1) 1194/     BE2 : 2A00                		move.l	d0,d5
(1) 1195/     BE4 : DA42                		add.w	d2,d5
(1) 1196/     BE6 : 6430                		bcc.s	.normal
(1) 1197/     BE8 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1198/     BEA : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1199/     BEC : 2E05                		move.l	d5,d7
(1) 1200/     BEE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1201/     BF4 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1202/     BFA : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1203/     BFC : 6128                		bsr.s	.mk_set
(1) 1204/     BFE : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1205/     C00 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1206/     C06 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1207/     C0C : 2C05                		move.l	d5,d6
(1) 1208/     C0E : 9C80                		sub.l	d0,d6
(1) 1209/     C10 : 3E02                		move.w	d2,d7
(1) 1210/     C12 : 9E46                		sub.w	d6,d7
(1) 1211/     C14 : DC41                		add.w	d1,d6
(1) 1212/     C16 : 6006                		bra.s	.last_set
(1) 1213/     C18 :                     .normal:
(1) 1214/     C18 : 2A00                		move.l	d0,d5
(1) 1215/     C1A : 3C01                		move.w	d1,d6
(1) 1216/     C1C : 3E02                		move.w	d2,d7
(1) 1217/     C1E :                     .last_set:
(1) 1218/     C1E : 6106                		bsr.s	.mk_set
(1) 1219/     C20 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1220/     C24 : 4E75                		rts
(1) 1221/     C26 :                     
(1) 1222/     C26 :                     ; d7 - size
(1) 1223/     C26 :                     ; d6 - vram
(1) 1224/     C26 :                     ; d5 - data
(1) 1225/     C26 :                     .mk_set:
(1) 1226/     C26 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1227/     C2C : 4847                		swap	d7
(1) 1228/     C2E : 3E38 D650           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1229/     C32 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1230/     C36 : 6C5A                		bge	.ran_out
(1) 1231/     C38 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1232/     C3A : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6
(1) 1233/     C3E : DCC7                		adda	d7,a6
(1) 1234/     C40 : 4847                		swap	d7
(1) 1235/     C42 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1236/     C48 : 6748                		beq.s	.ran_out		; If == 0, bad
(1) 1237/     C4A : 4A47                		tst.w	d7
(1) 1238/     C4C : 6B44                		bmi.s	.ran_out		; If negative, bad
(1) 1239/     C4E : 31FC 0001 D652      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1240/     C54 : 5278 D650           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1241/     C58 : E24F                		lsr.w	#1,d7
(1) 1242/     C5A : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1252/     C5E : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1253/     C60 : 2E05                  		move.l	d5,d7
(1) 1254/     C62 : 4847                  		swap	d7
(1) 1255/     C64 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1256/     C68 : 1D47 0009            		move.b	d7,9(a6)
(1) 1257/     C6C : 3E06                		move.w	d6,d7			; Destination
(1) 1258/     C6E : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1259/     C74 : 0046 4000           		ori.w	#$4000,d6
(1) 1260/     C78 : E04F                		lsr.w	#8,d7
(1) 1261/     C7A : EC4F                		lsr.w	#6,d7
(1) 1262/     C7C : 0247 0003           		andi.w	#%11,d7
(1) 1263/     C80 : 0047 0080           		ori.w	#$80,d7
(1) 1264/     C84 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1265/     C88 : 3D47 000C           		move.w	d7,$C(a6)
(1) 1273/     C8C : 31FC 0000 D652      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1274/     C92 :                     .ran_out:
(1) 1275/     C92 : 4E75                		rts
(1) 1276/     C94 :                     
(1) 1277/     C94 :                     ; ====================================================================
(1) 1278/     C94 :                     ; --------------------------------------------------------
(1) 1279/     C94 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1280/     C94 :                     ;
(1) 1281/     C94 :                     ; Write map data to VDP
(1) 1282/     C94 :                     ;
(1) 1283/     C94 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1284/     C94 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1285/     C94 :                     ;
(1) 1286/     C94 :                     ; Input:
(1) 1287/     C94 :                     ; a0   | Map data
(1) 1288/     C94 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1289/     C94 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1290/     C94 :                     ; d2.l | Screen Width/VRAM location:
(1) 1291/     C94 :                     ;        splitw(sw_size,vram_loc)
(1) 1292/     C94 :                     ; d3.w | VRAM-cell increment
(1) 1293/     C94 :                     ;
(1) 1294/     C94 :                     ; Notes:
(1) 1295/     C94 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1296/     C94 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1297/     C94 :                     ; * SCD/CD32X ONLY:
(1) 1298/     C94 :                     ; - For making the dot-screen map see
(1) 1299/     C94 :                     ;   Video_MdMcd_StampDotMap
(1) 1300/     C94 :                     ; --------------------------------------------------------
(1) 1301/     C94 :                     
(1) 1302/     C94 :                     Video_LoadMap:
(1) 1303/     C94 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1304/     C98 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1305/     C9E :                     
(1) 1306/     C9E : 2C02                		move.l	d2,d6
(1) 1307/     CA0 : 4846                		swap	d6
(1) 1308/     CA2 : 3A00                		move.w	d0,d5
(1) 1309/     CA4 : CAC6                		mulu.w	d6,d5
(1) 1310/     CA6 : 2800                		move.l	d0,d4
(1) 1311/     CA8 : 4844                		swap	d4
(1) 1312/     CAA : D844                		add.w	d4,d4
(1) 1313/     CAC : DA44                		add.w	d4,d5
(1) 1314/     CAE : 3E02                		move.w	d2,d7
(1) 1315/     CB0 : DE45                		add.w	d5,d7
(1) 1316/     CB2 : 7A00                		moveq	#0,d5
(1) 1317/     CB4 : 3A07                		move.w	d7,d5
(1) 1318/     CB6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1319/     CBA : 8E7C 4000           		or.w	#$4000,d7
(1) 1320/     CBE : E55D                		rol.w	#2,d5
(1) 1321/     CC0 : 0245 0003           		andi.w	#%11,d5
(1) 1322/     CC4 : 4845                		swap	d5
(1) 1323/     CC6 : 2A48                		move.l	a0,a5
(1) 1324/     CC8 : 3801                		move.w	d1,d4
(1) 1325/     CCA : 5344                		subq.w	#1,d4
(1) 1326/     CCC : 6B36                		bmi.s	.bad_size
(1) 1327/     CCE :                     .y_loop:
(1) 1328/     CCE : 2844                		move.l	d4,a4
(1) 1329/     CD0 : 4845                		swap	d5
(1) 1330/     CD2 : 3D47 0004           		move.w	d7,4(a6)
(1) 1331/     CD6 : 3D45 0004           		move.w	d5,4(a6)
(1) 1332/     CDA : 4845                		swap	d5
(1) 1333/     CDC : 2801                		move.l	d1,d4
(1) 1334/     CDE : 4844                		swap	d4
(1) 1335/     CE0 : 5344                		subq.w	#1,d4
(1) 1336/     CE2 :                     .x_loop:
(1) 1337/     CE2 : 4844                		swap	d4
(1) 1338/     CE4 : 381D                		move.w	(a5)+,d4
(1) 1339/     CE6 : B87C FFFF           		cmp.w	#-1,d4
(1) 1340/     CEA : 6606                		bne.s	.non_blank
(1) 1341/     CEC : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1342/     CF0 : 6002                		bra.s	.mk_cell
(1) 1343/     CF2 :                     .non_blank:
(1) 1344/     CF2 : D843                		add.w	d3,d4
(1) 1345/     CF4 :                     .mk_cell:
(1) 1346/     CF4 : 3C84                		move.w	d4,(a6)
(1) 1347/     CF6 : 4844                		swap	d4
(1) 1348/     CF8 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1349/     CFC : DE46                		add.w	d6,d7
(1) 1350/     CFE : 280C                		move.l	a4,d4
(1) 1351/     D00 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1352/     D04 :                     .bad_size:
(1) 1353/     D04 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1354/     D08 : 4E75                		rts
(1) 1355/     D0A :                     ; ------------------------------------------------
(1) 1356/     D0A :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1357/     D0A :                     ; d2.l | Screen Width/VRAM location:
(1) 1358/     D0A :                     ; d3.w | VRAM-cell increment
(1) 1359/     D0A :                     
(1) 1360/     D0A :                     Video_LoadMapV:
(1) 1361/     D0A : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1362/     D0E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1363/     D14 : 2C02                		move.l	d2,d6
(1) 1364/     D16 : 4846                		swap	d6
(1) 1365/     D18 : 3A00                		move.w	d0,d5
(1) 1366/     D1A : CAC6                		mulu.w	d6,d5
(1) 1367/     D1C : 2800                		move.l	d0,d4
(1) 1368/     D1E : 4844                		swap	d4
(1) 1369/     D20 : D844                		add.w	d4,d4
(1) 1370/     D22 : DA44                		add.w	d4,d5
(1) 1371/     D24 : 3E02                		move.w	d2,d7
(1) 1372/     D26 : DE45                		add.w	d5,d7
(1) 1373/     D28 : 7A00                		moveq	#0,d5
(1) 1374/     D2A : 3A07                		move.w	d7,d5
(1) 1375/     D2C : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1376/     D30 : 8E7C 4000           		or.w	#$4000,d7
(1) 1377/     D34 : E55D                		rol.w	#2,d5
(1) 1378/     D36 : 0245 0003           		andi.w	#%11,d5
(1) 1379/     D3A : 4845                		swap	d5
(1) 1380/     D3C : 2A48                		move.l	a0,a5
(1) 1381/     D3E : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1382/     D44 : 664C                		bne.s	.dble_mode
(1) 1383/     D46 : 2801                		move.l	d1,d4
(1) 1384/     D48 : 4844                		swap	d4
(1) 1385/     D4A : 5344                		subq.w	#1,d4
(1) 1386/     D4C : 6B3E                		bmi.s	.bad_size
(1) 1387/     D4E :                     .x_loop:
(1) 1388/     D4E : 2844                		move.l	d4,a4
(1) 1389/     D50 : 3801                		move.w	d1,d4
(1) 1390/     D52 : 5344                		subq.w	#1,d4
(1) 1391/     D54 :                     .y_loop:
(1) 1392/     D54 : 4844                		swap	d4
(1) 1393/     D56 : 3807                		move.w	d7,d4
(1) 1394/     D58 : D845                		add.w	d5,d4
(1) 1395/     D5A : 4845                		swap	d5
(1) 1396/     D5C : 3D44 0004           		move.w	d4,4(a6)
(1) 1397/     D60 : 3D45 0004           		move.w	d5,4(a6)
(1) 1398/     D64 : 4845                		swap	d5
(1) 1399/     D66 : 381D                		move.w	(a5)+,d4
(1) 1400/     D68 : B87C FFFF           		cmp.w	#-1,d4
(1) 1401/     D6C : 6606                		bne.s	.non_blank
(1) 1402/     D6E : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1403/     D72 : 6002                		bra.s	.mk_cell
(1) 1404/     D74 :                     .non_blank:
(1) 1405/     D74 : D843                		add.w	d3,d4
(1) 1406/     D76 :                     .mk_cell:
(1) 1407/     D76 : 3C84                		move.w	d4,(a6)
(1) 1408/     D78 : DA46                		add.w	d6,d5
(1) 1409/     D7A : 4844                		swap	d4
(1) 1410/     D7C : 51CC FFD6           		dbf	d4,.y_loop
(1) 1411/     D80 : DE7C 0002           		add.w	#2,d7
(1) 1412/     D84 : 4245                		clr.w	d5
(1) 1413/     D86 : 280C                		move.l	a4,d4
(1) 1414/     D88 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1415/     D8C :                     .bad_size:
(1) 1416/     D8C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1417/     D90 : 4E75                		rts
(1) 1418/     D92 :                     
(1) 1419/     D92 :                     ; ------------------------------------------------
(1) 1420/     D92 :                     
(1) 1421/     D92 :                     .dble_mode:
(1) 1422/     D92 : 2F01                		move.l	d1,-(sp)
(1) 1423/     D94 :                     
(1) 1424/     D94 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1425/     D96 : 3803                		move.w	d3,d4
(1) 1426/     D98 : 0244 F800           		andi.w	#$F800,d4
(1) 1427/     D9C : 0243 07FF           		andi.w	#$7FF,d3
(1) 1428/     DA0 : E24B                		lsr.w	#1,d3
(1) 1429/     DA2 : 8644                		or.w	d4,d3
(1) 1430/     DA4 :                     
(1) 1431/     DA4 : 2801                		move.l	d1,d4
(1) 1432/     DA6 : 4844                		swap	d4
(1) 1433/     DA8 : 5344                		subq.w	#1,d4
(1) 1434/     DAA : 6B48                		bmi.s	.bad_size_d
(1) 1435/     DAC :                     .x_loop_d:
(1) 1436/     DAC : 2844                		move.l	d4,a4
(1) 1437/     DAE : 3801                		move.w	d1,d4
(1) 1438/     DB0 : 5344                		subq.w	#1,d4
(1) 1439/     DB2 :                     .y_loop_d:
(1) 1440/     DB2 : 4844                		swap	d4
(1) 1441/     DB4 : 3807                		move.w	d7,d4
(1) 1442/     DB6 : D845                		add.w	d5,d4
(1) 1443/     DB8 : 4845                		swap	d5
(1) 1444/     DBA : 3D44 0004           		move.w	d4,4(a6)
(1) 1445/     DBE : 3D45 0004           		move.w	d5,4(a6)
(1) 1446/     DC2 : 4845                		swap	d5
(1) 1447/     DC4 : 381D                		move.w	(a5)+,d4
(1) 1448/     DC6 : DAFC 0002           		adda	#2,a5
(1) 1449/     DCA : B87C FFFF           		cmp.w	#-1,d4
(1) 1450/     DCE : 6606                		bne.s	.non_blank_d
(1) 1451/     DD0 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1452/     DD4 : 6008                		bra.s	.mk_cell_d
(1) 1453/     DD6 :                     .non_blank_d:
(1) 1454/     DD6 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1455/     DDA : E24C                		lsr.w	#1,d4
(1) 1456/     DDC : D843                		add.w	d3,d4
(1) 1457/     DDE :                     .mk_cell_d:
(1) 1458/     DDE : 3C84                		move.w	d4,(a6)
(1) 1459/     DE0 : DA46                		add.w	d6,d5
(1) 1460/     DE2 : 4844                		swap	d4
(1) 1461/     DE4 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1462/     DE8 : DE7C 0002           		add.w	#2,d7
(1) 1463/     DEC : 4245                		clr.w	d5
(1) 1464/     DEE : 280C                		move.l	a4,d4
(1) 1465/     DF0 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1466/     DF4 :                     .bad_size_d:
(1) 1467/     DF4 : 221F                		move.l	(sp)+,d1
(1) 1468/     DF6 : 6094                		bra	.bad_size
(1) 1469/     DF8 :                     
(1) 1470/     DF8 :                     ; ====================================================================
(1) 1471/     DF8 :                     ; ----------------------------------------------------------------
(1) 1472/     DF8 :                     ; Palette fading section
(1) 1473/     DF8 :                     ; ----------------------------------------------------------------
(1) 1474/     DF8 :                     
(1) 1475/     DF8 :                     ; --------------------------------------------------------
(1) 1476/     DF8 :                     ; Video_RunFade
(1) 1477/     DF8 :                     ;
(1) 1478/     DF8 :                     ; Process Palette changes (fade and effects)
(1) 1479/     DF8 :                     ; --------------------------------------------------------
(1) 1480/     DF8 :                     
(1) 1481/     DF8 :                     Video_RunFade:
(1) 1482/     DF8 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1483/     DFC :                     .next_req:
(1) 1484/     DFC : 1016                		move.b	palfd_req(a6),d0
(1) 1485/     DFE : 6744                		beq.s	.no_req
(1) 1486/     E00 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1487/     E04 : 6A38                		bpl.s	.busy_timer
(1) 1488/     E06 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1489/     E0C : 4BF8 D550           		lea	(RAM_Palette).w,a5
(1) 1490/     E10 : 49F8 D5D0           		lea	(RAM_PaletteFade).w,a4
(1) 1491/     E14 : 7E00                		moveq	#0,d7
(1) 1492/     E16 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1493/     E1A : DE47                		add.w	d7,d7
(1) 1494/     E1C : DAC7                		adda	d7,a5
(1) 1495/     E1E : D8C7                		adda	d7,a4
(1) 1496/     E20 : 7C00                		moveq	#0,d6
(1) 1497/     E22 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1498/     E26 : 6716                		beq.s	.busy_timer
(1) 1499/     E28 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1500/     E2C : DC46                		add.w	d6,d6		; * 2
(1) 1501/     E2E : 5347                		subq.w	#1,d7
(1) 1502/     E30 : 0240 00FF           		andi.w	#$FF,d0
(1) 1503/     E34 : D040                		add.w	d0,d0
(1) 1504/     E36 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1505/     E3A : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1506/     E3E :                     .busy_timer:
(1) 1507/     E3E : DCFC 0008           		adda	#palfd_len,a6
(1) 1508/     E42 : 60B8                		bra.s	.next_req
(1) 1509/     E44 :                     .no_req:
(1) 1510/     E44 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w
(1) 1511/     E48 : 4E75                		rts
(1) 1512/     E4A :                     
(1) 1513/     E4A :                     ; ------------------------------------------------
(1) 1514/     E4A :                     
(1) 1515/     E4A :                     .fade_list:
(1) 1516/     E4A : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1517/     E4C : 0018                		dc.w .fade_out-.fade_list
(1) 1518/     E4E : 0088                		dc.w .fade_in-.fade_list
(1) 1519/     E50 : 0010                		dc.w .nothing-.fade_list
(1) 1520/     E52 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1521/     E54 : 0010                		dc.w .nothing-.fade_list
(1) 1522/     E56 : 0010                		dc.w .nothing-.fade_list
(1) 1523/     E58 : 0010                		dc.w .nothing-.fade_list
(1) 1524/     E5A :                     
(1) 1525/     E5A :                     ; ----------------------------------------------------
(1) 1526/     E5A :                     ; Fade request $00: Null/exit.
(1) 1527/     E5A :                     ; ----------------------------------------------------
(1) 1528/     E5A :                     
(1) 1529/     E5A :                     .nothing:
(1) 1530/     E5A :                     .pfade_del:
(1) 1531/     E5A : 4216                		clr.b	palfd_req(a6)
(1) 1532/     E5C : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1533/     E60 : 4E75                		rts
(1) 1534/     E62 :                     
(1) 1535/     E62 :                     ; ----------------------------------------------------
(1) 1536/     E62 :                     ; Fade request $01: fade-out to black
(1) 1537/     E62 :                     ; Quick.
(1) 1538/     E62 :                     ;
(1) 1539/     E62 :                     ; d7 - Num colors
(1) 1540/     E62 :                     ; d6 - Increment*2
(1) 1541/     E62 :                     ; ----------------------------------------------------
(1) 1542/     E62 :                     
(1) 1543/     E62 :                     .fade_out:
(1) 1544/     E62 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1545/     E66 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1546/     E6A : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1547/     E6E : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1548/     E70 :                     .next_color:
(1) 1549/     E70 : 3015                		move.w	(a5),d0
(1) 1550/     E72 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1551/     E74 :                     	rept 3
(1) 1552/     E74 :                     		move.w	d0,d1
(1) 1553/     E74 :                     		and.w	d5,d1			; Filter TARGET
(1) 1554/     E74 :                     		beq.s	.no_chng
(1) 1555/     E74 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E74 :                     		sub.w	d6,d1
(1) 1557/     E74 :                     		bpl.s	.blck_alrdy
(1) 1558/     E74 :                     		clr.w	d1
(1) 1559/     E74 :                     .blck_alrdy:
(1) 1560/     E74 :                     		addq.w	#1,d3			; Color changed
(1) 1561/     E74 :                     .no_chng:
(1) 1562/     E74 :                     		or.w	d1,d0
(1) 1563/     E74 :                     		rol.w	#4,d6			; next << color
(1) 1564/     E74 :                     		rol.w	#4,d5
(1) 1565/     E74 :                     		rol.w	#4,d4
(1) 1566/     E74 :                     	endm
(1) 1552/     E74 : 3200                		move.w	d0,d1
(1) 1553/     E76 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     E78 : 670A                		beq.s	.no_chng
(1) 1555/     E7A : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E7C : 9246                		sub.w	d6,d1
(1) 1557/     E7E : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     E80 : 4241                		clr.w	d1
(1) 1559/     E82 :                     .blck_alrdy:
(1) 1560/     E82 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     E84 :                     .no_chng:
(1) 1562/     E84 : 8041                		or.w	d1,d0
(1) 1563/     E86 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     E88 : E95D                		rol.w	#4,d5
(1) 1565/     E8A : E95C                		rol.w	#4,d4
(1) 1552/     E8C : 3200                		move.w	d0,d1
(1) 1553/     E8E : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     E90 : 670A                		beq.s	.no_chng
(1) 1555/     E92 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E94 : 9246                		sub.w	d6,d1
(1) 1557/     E96 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     E98 : 4241                		clr.w	d1
(1) 1559/     E9A :                     .blck_alrdy:
(1) 1560/     E9A : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     E9C :                     .no_chng:
(1) 1562/     E9C : 8041                		or.w	d1,d0
(1) 1563/     E9E : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     EA0 : E95D                		rol.w	#4,d5
(1) 1565/     EA2 : E95C                		rol.w	#4,d4
(1) 1552/     EA4 : 3200                		move.w	d0,d1
(1) 1553/     EA6 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     EA8 : 670A                		beq.s	.no_chng
(1) 1555/     EAA : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     EAC : 9246                		sub.w	d6,d1
(1) 1557/     EAE : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     EB0 : 4241                		clr.w	d1
(1) 1559/     EB2 :                     .blck_alrdy:
(1) 1560/     EB2 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     EB4 :                     .no_chng:
(1) 1562/     EB4 : 8041                		or.w	d1,d0
(1) 1563/     EB6 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     EB8 : E95D                		rol.w	#4,d5
(1) 1565/     EBA : E95C                		rol.w	#4,d4
(1) 1567/     EBC :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1568/     EBC : E95E                		rol.w	#4,d6
(1) 1569/     EBE : E95D                		rol.w	#4,d5
(1) 1570/     EC0 : E95C                		rol.w	#4,d4
(1) 1571/     EC2 : 3A80                		move.w	d0,(a5)
(1) 1572/     EC4 :                     .all_black:
(1) 1573/     EC4 : DAFC 0002           		adda	#2,a5
(1) 1574/     EC8 : 51CF FFA6           		dbf	d7,.next_color
(1) 1575/     ECC : 4A43                		tst.w	d3
(1) 1576/     ECE : 678A                		beq	.pfade_del
(1) 1577/     ED0 :                     .fdout_nend:
(1) 1578/     ED0 : 4E75                		rts
(1) 1579/     ED2 :                     
(1) 1580/     ED2 :                     ; ----------------------------------------------------
(1) 1581/     ED2 :                     ; Fade request $02
(1) 1582/     ED2 :                     ; Fade-in
(1) 1583/     ED2 :                     ; ----------------------------------------------------
(1) 1584/     ED2 :                     
(1) 1585/     ED2 :                     .fade_in:
(1) 1586/     ED2 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1587/     ED6 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1588/     EDA : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1589/     EDE :                     .next_in:
(1) 1590/     EDE : 4847                		swap	d7
(1) 1591/     EE0 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1592/     EE2 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1593/     EE4 : C044                		and.w	d4,d0
(1) 1594/     EE6 : C444                		and.w	d4,d2
(1) 1595/     EE8 : B042                		cmp.w	d2,d0
(1) 1596/     EEA : 6766                		beq.s	.same_in
(1) 1597/     EEC :                     	rept 3
(1) 1598/     EEC :                     		move.w	d0,d1
(1) 1599/     EEC :                     		move.w	d4,d3
(1) 1600/     EEC :                     		eor.w	d5,d3
(1) 1601/     EEC :                     		and.w	d3,d0
(1) 1602/     EEC :                     		move.w	d2,d3
(1) 1603/     EEC :                     		and.w	d5,d1		; filter CURRENT color
(1) 1604/     EEC :                     		and.w	d5,d3		; filter TARGET color
(1) 1605/     EEC :                     
(1) 1606/     EEC :                     		add.w	d6,d1		; ADD to current
(1) 1607/     EEC :                     		cmp.w	d3,d1
(1) 1608/     EEC :                     		bcs.s	.max_out
(1) 1609/     EEC :                     		move.w	d2,d1
(1) 1610/     EEC :                     		and.w	d5,d1
(1) 1611/     EEC :                     .max_out:
(1) 1612/     EEC :                     		addq.w	#1,d7
(1) 1613/     EEC :                     		or.w	d1,d0
(1) 1614/     EEC :                     		rol.w	#4,d6		; next << color
(1) 1615/     EEC :                     		rol.w	#4,d5
(1) 1616/     EEC :                     	endm
(1) 1598/     EEC : 3200                		move.w	d0,d1
(1) 1599/     EEE : 3604                		move.w	d4,d3
(1) 1600/     EF0 : BB43                		eor.w	d5,d3
(1) 1601/     EF2 : C043                		and.w	d3,d0
(1) 1602/     EF4 : 3602                		move.w	d2,d3
(1) 1603/     EF6 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     EF8 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     EFA :                     
(1) 1606/     EFA : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     EFC : B243                		cmp.w	d3,d1
(1) 1608/     EFE : 6504                		bcs.s	.max_out
(1) 1609/     F00 : 3202                		move.w	d2,d1
(1) 1610/     F02 : C245                		and.w	d5,d1
(1) 1611/     F04 :                     .max_out:
(1) 1612/     F04 : 5247                		addq.w	#1,d7
(1) 1613/     F06 : 8041                		or.w	d1,d0
(1) 1614/     F08 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F0A : E95D                		rol.w	#4,d5
(1) 1598/     F0C : 3200                		move.w	d0,d1
(1) 1599/     F0E : 3604                		move.w	d4,d3
(1) 1600/     F10 : BB43                		eor.w	d5,d3
(1) 1601/     F12 : C043                		and.w	d3,d0
(1) 1602/     F14 : 3602                		move.w	d2,d3
(1) 1603/     F16 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     F18 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     F1A :                     
(1) 1606/     F1A : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     F1C : B243                		cmp.w	d3,d1
(1) 1608/     F1E : 6504                		bcs.s	.max_out
(1) 1609/     F20 : 3202                		move.w	d2,d1
(1) 1610/     F22 : C245                		and.w	d5,d1
(1) 1611/     F24 :                     .max_out:
(1) 1612/     F24 : 5247                		addq.w	#1,d7
(1) 1613/     F26 : 8041                		or.w	d1,d0
(1) 1614/     F28 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F2A : E95D                		rol.w	#4,d5
(1) 1598/     F2C : 3200                		move.w	d0,d1
(1) 1599/     F2E : 3604                		move.w	d4,d3
(1) 1600/     F30 : BB43                		eor.w	d5,d3
(1) 1601/     F32 : C043                		and.w	d3,d0
(1) 1602/     F34 : 3602                		move.w	d2,d3
(1) 1603/     F36 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     F38 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     F3A :                     
(1) 1606/     F3A : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     F3C : B243                		cmp.w	d3,d1
(1) 1608/     F3E : 6504                		bcs.s	.max_out
(1) 1609/     F40 : 3202                		move.w	d2,d1
(1) 1610/     F42 : C245                		and.w	d5,d1
(1) 1611/     F44 :                     .max_out:
(1) 1612/     F44 : 5247                		addq.w	#1,d7
(1) 1613/     F46 : 8041                		or.w	d1,d0
(1) 1614/     F48 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F4A : E95D                		rol.w	#4,d5
(1) 1617/     F4C : E95E                		rol.w	#4,d6
(1) 1618/     F4E : E95D                		rol.w	#4,d5
(1) 1619/     F50 : 3A80                		move.w	d0,(a5)
(1) 1620/     F52 :                     .same_in:
(1) 1621/     F52 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1622/     F56 : D8FC 0002           		adda	#2,a4
(1) 1623/     F5A : 4847                		swap	d7
(1) 1624/     F5C : 51CF FF80           		dbf	d7,.next_in
(1) 1625/     F60 : 4847                		swap	d7
(1) 1626/     F62 : 4A47                		tst.w	d7
(1) 1627/     F64 : 6700 FEF4           		beq	.pfade_del
(1) 1628/     F68 :                     .fdin_nend:
(1) 1629/     F68 : 4E75                		rts
(1) 1630/     F6A :                     
(1) 1631/     F6A :                     ; --------------------------------------------------------
(1) 1632/     F6A :                     ; Video_WaitFade
(1) 1633/     F6A :                     ;
(1) 1634/     F6A :                     ; CPU-saving version of System_Render when
(1) 1635/     F6A :                     ; waiting for a fade-in/fade-out
(1) 1636/     F6A :                     ;
(1) 1637/     F6A :                     ; THIS IS REQUIRED FOR 32X as
(1) 1638/     F6A :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1639/     F6A :                     ; --------------------------------------------------------
(1) 1640/     F6A :                     
(1) 1641/     F6A :                     Video_WaitFade:
(1) 1642/     F6A :                     .loop:
(1) 1643/     F6A : 6100 064E           		bsr	System_Render
(1) 1644/     F6E : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1648/     F72 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1649/     F76 : 7C00                		moveq	#0,d6
(1) 1650/     F78 :                     .next_one:
(1) 1651/     F78 : 8C16                		or.b	palfd_req(a6),d6
(1) 1652/     F7A : DCFC 0008           		adda	#palfd_len,a6
(1) 1657/     F7E : 51CF FFF8           		dbf	d7,.next_one
(1) 1658/     F82 : 4A06                		tst.b	d6
(1) 1659/     F84 : 66E4                		bne.s	.loop
(1) 1660/     F86 : 4E75                		rts
(1) 1661/     F88 :                     
(1) 1662/     F88 :                     ; --------------------------------------------------------
(1) 1663/     F88 :                     ; Video_FadeIn_Full
(1) 1664/     F88 :                     ;
(1) 1665/     F88 :                     ; Overwrites first entry on each's PalFadeList
(1) 1666/     F88 :                     ; --------------------------------------------------------
(1) 1667/     F88 :                     
(1) 1668/     F88 :                     Video_FadeIn_Full:
(1) 1675/     F88 : 7002                		moveq	#2,d0
(1) 1676/     F8A : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1677/     F90 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1678/     F96 : 6116                		bsr	Video_MakeFade
(1) 1679/     F98 : 60D0                		bra	Video_WaitFade
(1) 1680/     F9A :                     
(1) 1681/     F9A :                     ; --------------------------------------------------------
(1) 1682/     F9A :                     ; Video_FadeIn_Full
(1) 1683/     F9A :                     ;
(1) 1684/     F9A :                     ; Overwrites first entry on each's PalFadeList
(1) 1685/     F9A :                     ; --------------------------------------------------------
(1) 1686/     F9A :                     
(1) 1687/     F9A :                     Video_FadeOut_Full:
(1) 1694/     F9A : 7001                		moveq	#1,d0
(1) 1695/     F9C : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1696/     FA2 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1697/     FA8 : 6104                		bsr	Video_MakeFade
(1) 1698/     FAA : 60BE                		bra	Video_WaitFade
(1) 1699/     FAC :                     
(1) 1700/     FAC :                     ; ============================================================
(1) 1701/     FAC :                     ; --------------------------------------------------------
(1) 1702/     FAC :                     ; Subroutines
(1) 1703/     FAC :                     ; --------------------------------------------------------
(1) 1704/     FAC :                     
(1) 1705/     FAC :                     ; --------------------------------------------------------
(1) 1706/     FAC :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1707/     FAC :                     ;
(1) 1708/     FAC :                     ; Make palette Fading (or other) request, for
(1) 1709/     FAC :                     ; both VDP and SVDP
(1) 1710/     FAC :                     ;
(1) 1711/     FAC :                     ; Input:
(1) 1712/     FAC :                     ; d0.w | Task number:
(1) 1713/     FAC :                     ;        0 - Fade-out
(1) 1714/     FAC :                     ;        1 - Fade-in
(1) 1715/     FAC :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1716/     FAC :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1717/     FAC :                     ; --------------------------------------------------------
(1) 1718/     FAC :                     
(1) 1719/     FAC :                     Video_MdMars_MakeFade:
(1) 1728/     FAC : 4E75                		rts
(1) 1729/     FAE :                     Video_MakeFade:
(1) 1730/     FAE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1731/     FB2 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1732/     FB6 : 3E38 D7E0           		move.w	(RAM_IndxPalFade).w,d7
(1) 1733/     FBA : 5278 D7E0           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1734/     FBE : 6106                		bsr	vidMkFade_Go
(1) 1735/     FC0 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1736/     FC4 : 4E75                		rts
(1) 1737/     FC6 :                     vidMkFade_Go:
(1) 1738/     FC6 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1739/     FCC : E74F                		lsl.w	#3,d7			; index * 8
(1) 1740/     FCE : DCC7                		adda	d7,a6
(1) 1741/     FD0 : 2E01                		move.l	d1,d7
(1) 1742/     FD2 : 2C02                		move.l	d2,d6
(1) 1743/     FD4 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1744/     FD6 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1745/     FDA : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1746/     FDE : 4846                		swap	d6
(1) 1747/     FE0 : 4847                		swap	d7
(1) 1748/     FE2 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1749/     FE6 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1750/     FEA : 4E75                		rts
(1) 1751/     FEC :                     
(1) 1752/     FEC :                     ; --------------------------------------------------------
(1) 1753/     FEC :                     ; Video_LoadPal, Video_FadePal
(1) 1754/     FEC :                     ;
(1) 1755/     FEC :                     ; Load VDP palette data, either current or for fading.
(1) 1756/     FEC :                     ;
(1) 1757/     FEC :                     ; Input:
(1) 1758/     FEC :                     ; a0   | Palette data
(1) 1759/     FEC :                     ; d0.w | Starting color index
(1) 1760/     FEC :                     ; d1.w | Number of colors
(1) 1761/     FEC :                     ; --------------------------------------------------------
(1) 1762/     FEC :                     
(1) 1763/     FEC :                     Video_FadePal:
(1) 1764/     FEC : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1765/     FF0 : 4DF8 D5D0           		lea	(RAM_PaletteFade).w,a6
(1) 1766/     FF4 : 6008                		bra.s	vidMd_Pal
(1) 1767/     FF6 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1768/     FF6 :                     ; 		rts
(1) 1769/     FF6 :                     Video_LoadPal:
(1) 1770/     FF6 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1771/     FFA : 4DF8 D550           		lea	(RAM_Palette).w,a6
(1) 1772/     FFE :                     ; 		bsr.s	vidMd_Pal
(1) 1773/     FFE :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1774/     FFE :                     ; 		rts
(1) 1775/     FFE :                     
(1) 1776/     FFE :                     ; --------------------------------------------------------
(1) 1777/     FFE :                     vidMd_Pal:
(1) 1778/     FFE : 2A48                		move.l	a0,a5
(1) 1779/    1000 : 7E00                		moveq	#0,d7
(1) 1780/    1002 : 3E00                		move.w	d0,d7
(1) 1781/    1004 : DE47                		add.w	d7,d7
(1) 1782/    1006 : DCC7                		adda	d7,a6
(1) 1783/    1008 : 3E01                		move.w	d1,d7
(1) 1784/    100A : 5347                		subq.w	#1,d7
(1) 1785/    100C : 6B0E                		bmi.s	.bad
(1) 1786/    100E : 3C02                		move.w	d2,d6
(1) 1787/    1010 : 0246 0001           		andi.w	#1,d6
(1) 1788/    1014 : E25E                		ror.w	#1,d6
(1) 1789/    1016 :                     .loop:
(1) 1790/    1016 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1791/    1018 : 51CF FFFC           		dbf	d7,.loop
(1) 1792/    101C :                     .bad:
(1) 1793/    101C : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1794/    1020 : 4E75                		rts
(1) 1795/    1022 :                     
(1) 1796/    1022 :                     ; --------------------------------------------------------
(1) 1797/    1022 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1798/    1022 :                     ;
(1) 1799/    1022 :                     ; Loads palettes on bulk with a list
(1) 1800/    1022 :                     ;
(1) 1801/    1022 :                     ; Input:
(1) 1802/    1022 :                     ; a0 | List of graphics to load:
(1) 1803/    1022 :                     ;        dc.w numof_entries
(1) 1804/    1022 :                     ;        dc.l palette_data
(1) 1805/    1022 :                     ;        dc.w start_at
(1) 1806/    1022 :                     ;        dc.w numof_colors
(1) 1807/    1022 :                     ;        ; ...more entries
(1) 1808/    1022 :                     ; --------------------------------------------------------
(1) 1809/    1022 :                     
(1) 1810/    1022 :                     Video_LoadPal_List:
(1) 1811/    1022 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1812/    1026 : 2A48                		move.l	a0,a5
(1) 1813/    1028 : 3E1D                		move.w	(a5)+,d7
(1) 1814/    102A : 6710                		beq.s	.invalid
(1) 1815/    102C : 6B0E                		bmi.s	.invalid
(1) 1816/    102E : 5347                		subq.w	#1,d7
(1) 1817/    1030 :                     .next_one:
(1) 1818/    1030 : 205D                		move.l	(a5)+,a0
(1) 1819/    1032 : 301D                		move.w	(a5)+,d0
(1) 1820/    1034 : 321D                		move.w	(a5)+,d1
(1) 1821/    1036 : 61BE                		bsr	Video_LoadPal
(1) 1822/    1038 : 51CF FFF6           		dbf	d7,.next_one
(1) 1823/    103C :                     .invalid:
(1) 1824/    103C : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1825/    1040 : 4E75                		rts
(1) 1826/    1042 :                     
(1) 1827/    1042 :                     Video_FadePal_List:
(1) 1828/    1042 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1829/    1046 : 2A48                		move.l	a0,a5
(1) 1830/    1048 : 3E1D                		move.w	(a5)+,d7
(1) 1831/    104A : 6710                		beq.s	.invalid
(1) 1832/    104C : 6B0E                		bmi.s	.invalid
(1) 1833/    104E : 5347                		subq.w	#1,d7
(1) 1834/    1050 :                     .next_one:
(1) 1835/    1050 : 205D                		move.l	(a5)+,a0
(1) 1836/    1052 : 301D                		move.w	(a5)+,d0
(1) 1837/    1054 : 321D                		move.w	(a5)+,d1
(1) 1838/    1056 : 6194                		bsr	Video_FadePal
(1) 1839/    1058 : 51CF FFF6           		dbf	d7,.next_one
(1) 1840/    105C :                     .invalid:
(1) 1841/    105C : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1842/    1060 : 4E75                		rts
(1) 1843/    1062 :                     
(1) 1844/    1062 :                     ; ====================================================================
(1) 1845/    1062 :                     ; ----------------------------------------------------------------
(1) 1846/    1062 :                     ; Text PRINT system.
(1) 1847/    1062 :                     ; ----------------------------------------------------------------
(1) 1848/    1062 :                     
(1) 1849/    1062 :                     ; --------------------------------------------------------
(1) 1850/    1062 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1851/    1062 :                     ;
(1) 1852/    1062 :                     ; Initializes the default Graphics and Palette
(1) 1853/    1062 :                     ; for the font.
(1) 1854/    1062 :                     ;
(1) 1855/    1062 :                     ; Input:
(1) 1856/    1062 :                     ; d0.l | Graphics data
(1) 1857/    1062 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1858/    1062 :                     ; d1.w | VRAM output location to load and use
(1) 1859/    1062 :                     ;        the ASCII text including attribute
(1) 1860/    1062 :                     ;        settings (Palette and Priority)
(1) 1861/    1062 :                     ;        Defualt values are:
(1) 1862/    1062 :                     ;        DEF_PrintVram for 8x8 and
(1) 1863/    1062 :                     ;        DEF_PrintVramW for 8x16
(1) 1864/    1062 :                     ;
(1) 1865/    1062 :                     ; Breaks:
(1) 1866/    1062 :                     ; d0-d3
(1) 1867/    1062 :                     ;
(1) 1868/    1062 :                     ; Notes:
(1) 1869/    1062 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1870/    1062 :                     ; - Write your palette manually after this
(1) 1871/    1062 :                     ; --------------------------------------------------------
(1) 1872/    1062 :                     
(1) 1873/    1062 :                     Video_PrintInitW:
(1) 1874/    1062 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1875/    1066 : 6004                		bra.s	vidPrint_Init
(1) 1876/    1068 :                     Video_PrintInit:
(1) 1877/    1068 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1878/    106C :                     vidPrint_Init:
(1) 1879/    106C : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1880/    106E : 6000 F958           		bra	Video_LoadArt
(1) 1881/    1072 :                     
(1) 1882/    1072 :                     ; --------------------------------------------------------
(1) 1883/    1072 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1884/    1072 :                     ;
(1) 1885/    1072 :                     ; Loads default palette for the font
(1) 1886/    1072 :                     ; --------------------------------------------------------
(1) 1887/    1072 :                     
(1) 1888/    1072 :                     Video_PrintDefPal_Fade:
(1) 1889/    1072 : 2F0E                		move.l	a6,-(sp)
(1) 1890/    1074 : 4DF8 D630           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1891/    1078 : 6006                		bra.s	vid_FontDefPal
(1) 1892/    107A :                     Video_PrintDefPal:
(1) 1893/    107A : 2F0E                		move.l	a6,-(sp)
(1) 1894/    107C : 4DF8 D5B0           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1895/    1080 :                     vid_FontDefPal:
(1) 1896/    1080 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1897/    1084 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1898/    1088 : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1899/    108C : 2C5F                		move.l	(sp)+,a6
(1) 1900/    108E : 4E75                		rts
(1) 1901/    1090 :                     
(1) 1902/    1090 :                     ; --------------------------------------------------------
(1) 1903/    1090 :                     ; Video_Print, Video_PrintW
(1) 1904/    1090 :                     ;
(1) 1905/    1090 :                     ; Prints a text string, VDP side.
(1) 1906/    1090 :                     ;
(1) 1907/    1090 :                     ; Input:
(1) 1908/    1090 :                     ; a0   | String data
(1) 1909/    1090 :                     ; d0.w | X position
(1) 1910/    1090 :                     ; d1.w | Y position
(1) 1911/    1090 :                     ; d2.w | Font VRAM location
(1) 1912/    1090 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1913/    1090 :                     ;        splitw(width,vram_out)
(1) 1914/    1090 :                     ;
(1) 1915/    1090 :                     ; * Font VRAM location
(1) 1916/    1090 :                     ; Default 8x8:  DEF_PrintVram
(1) 1917/    1090 :                     ; Default 8x16: DEF_PrintVramW
(1) 1918/    1090 :                     ;
(1) 1919/    1090 :                     ; * Screen VRAM
(1) 1920/    1090 :                     ; Foreground: DEF_VRAM_FG
(1) 1921/    1090 :                     ; Background: DEF_VRAM_BG
(1) 1922/    1090 :                     ; Window:     DEF_VRAM_WD
(1) 1923/    1090 :                     ;
(1) 1924/    1090 :                     ; * Screen Width
(1) 1925/    1090 :                     ; $040 (DEF_HSIZE_32)
(1) 1926/    1090 :                     ; $080 (DEF_HSIZE_64)
(1) 1927/    1090 :                     ; $100 (DEF_HSIZE_128)
(1) 1928/    1090 :                     ;
(1) 1929/    1090 :                     ; Notes:
(1) 1930/    1090 :                     ; - Initialize your graphics and VRAM location
(1) 1931/    1090 :                     ;   with Video_PrintInit
(1) 1932/    1090 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1933/    1090 :                     ;   mode.
(1) 1934/    1090 :                     ; --------------------------------------------------------
(1) 1935/    1090 :                     
(1) 1936/    1090 :                     ; dc.l pstr(type,ram_location)
(1) 1937/    1090 :                     ;
(1) 1938/    1090 :                     ; type:
(1) 1939/    1090 :                     ; 0 - Byte
(1) 1940/    1090 :                     ; 1 - Word
(1) 1941/    1090 :                     ; 2 - 24-bit
(1) 1942/    1090 :                     ; 3 - Long
(1) 1943/    1090 :                     
(1) 1944/    1090 :                     Video_Print:
(1) 1945/    1090 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1946/    1094 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1947/    109A : 3E03                		move.w	d3,d7
(1) 1948/    109C : 3A00                		move.w	d0,d5
(1) 1949/    109E : DA45                		add.w	d5,d5
(1) 1950/    10A0 : 3801                		move.w	d1,d4
(1) 1951/    10A2 : 4843                		swap	d3
(1) 1952/    10A4 : C8C3                		mulu.w	d3,d4
(1) 1953/    10A6 : DA44                		add.w	d4,d5
(1) 1954/    10A8 : DE45                		add.w	d5,d7
(1) 1955/    10AA : 3C03                		move.w	d3,d6
(1) 1956/    10AC : 4843                		swap	d3
(1) 1957/    10AE : 7A00                		moveq	#0,d5
(1) 1958/    10B0 : 3A07                		move.w	d7,d5
(1) 1959/    10B2 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1960/    10B6 : 8E7C 4000           		or.w	#$4000,d7
(1) 1961/    10BA : E55D                		rol.w	#2,d5
(1) 1962/    10BC : 0245 0003           		andi.w	#%11,d5
(1) 1963/    10C0 : 4845                		swap	d5
(1) 1964/    10C2 : 2A48                		move.l	a0,a5
(1) 1965/    10C4 :                     .loop:
(1) 1966/    10C4 : 3806                		move.w	d6,d4
(1) 1967/    10C6 : 5344                		subq.w	#1,d4
(1) 1968/    10C8 : CA44                		and.w	d4,d5
(1) 1969/    10CA :                     
(1) 1970/    10CA : 3807                		move.w	d7,d4
(1) 1971/    10CC : D845                		add.w	d5,d4
(1) 1972/    10CE : 4845                		swap	d5
(1) 1973/    10D0 : 3D44 0004           		move.w	d4,4(a6)
(1) 1974/    10D4 : 3D45 0004           		move.w	d5,4(a6)
(1) 1975/    10D8 : 4845                		swap	d5
(1) 1976/    10DA :                     .q_loop:
(1) 1977/    10DA : 181D                		move.b	(a5)+,d4
(1) 1978/    10DC : 671E                		beq.s	.exit
(1) 1979/    10DE : 6B22                		bmi.s	.special
(1) 1980/    10E0 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1981/    10E4 : 6710                		beq.s	.next
(1) 1982/    10E6 :                     ; ------------------------------------------------
(1) 1983/    10E6 :                     ; Normal text
(1) 1984/    10E6 : 0244 00FF           		andi.w	#$FF,d4
(1) 1985/    10EA :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1986/    10EA : D842                		add.w	d2,d4
(1) 1987/    10EC : 0444 0020           		subi.w	#$20,d4
(1) 1988/    10F0 : 3C84                		move.w	d4,(a6)
(1) 1989/    10F2 : 5445                		addq.w	#2,d5
(1) 1990/    10F4 : 60E4                		bra.s	.q_loop
(1) 1991/    10F6 :                     .next:
(1) 1992/    10F6 : 4245                		clr.w	d5
(1) 1993/    10F8 : DE46                		add.w	d6,d7			; Next line
(1) 1994/    10FA : 60C8                		bra.s	.loop
(1) 1995/    10FC :                     .exit:
(1) 1996/    10FC : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1997/    1100 : 4E75                		rts
(1) 1998/    1102 :                     ; ------------------------------------------------
(1) 1999/    1102 :                     ; Show value
(1) 2000/    1102 :                     ; d4 - $80|flags
(1) 2001/    1102 :                     .special:
(1) 2002/    1102 : 4846                		swap	d6
(1) 2003/    1104 : 1C04                		move.b	d4,d6
(1) 2004/    1106 : E19C                		rol.l	#8,d4
(1) 2005/    1108 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2006/    110A : E19C                		rol.l	#8,d4
(1) 2007/    110C : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2008/    110E : E19C                		rol.l	#8,d4
(1) 2009/    1110 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2010/    1112 : 2844                		move.l	d4,a4
(1) 2011/    1114 : 6100 01B6           		bsr	vid_PrintTVal
(1) 2012/    1118 : 60AA                		bra	.loop
(1) 2013/    111A :                     
(1) 2014/    111A :                     ; --------------------------------------------------------
(1) 2015/    111A :                     ; 8x16 version
(1) 2016/    111A :                     ; --------------------------------------------------------
(1) 2017/    111A :                     
(1) 2018/    111A :                     Video_PrintW:
(1) 2019/    111A : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2020/    111E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2021/    1124 :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2022/    1124 : 3C02                		move.w	d2,d6
(1) 2023/    1126 : 0446 0040           		subi.w	#$20*2,d6
(1) 2024/    112A : 3A38 D7F6           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2025/    112E : 0805 0002           		btst	#2,d5
(1) 2026/    1132 : 670E                		beq.s	.no_dble_y
(1) 2027/    1134 : 3E06                		move.w	d6,d7
(1) 2028/    1136 : 0247 F800           		andi.w	#$F800,d7
(1) 2029/    113A : 0246 07FF           		andi.w	#$7FF,d6
(1) 2030/    113E : E24E                		lsr.w	#1,d6
(1) 2031/    1140 : 8C47                		or.w	d7,d6
(1) 2032/    1142 :                     .no_dble_y:
(1) 2033/    1142 : 4846                		swap	d6
(1) 2034/    1144 : 3E03                		move.w	d3,d7
(1) 2035/    1146 : 3A00                		move.w	d0,d5
(1) 2036/    1148 : DA45                		add.w	d5,d5
(1) 2037/    114A : 3801                		move.w	d1,d4
(1) 2038/    114C : 4843                		swap	d3
(1) 2039/    114E : C8C3                		mulu.w	d3,d4
(1) 2040/    1150 : DA44                		add.w	d4,d5
(1) 2041/    1152 : DE45                		add.w	d5,d7
(1) 2042/    1154 : 3C03                		move.w	d3,d6
(1) 2043/    1156 : 4843                		swap	d3
(1) 2044/    1158 :                     
(1) 2045/    1158 : 7A00                		moveq	#0,d5
(1) 2046/    115A : 3A07                		move.w	d7,d5
(1) 2047/    115C : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2048/    1160 : 8E7C 4000           		or.w	#$4000,d7
(1) 2049/    1164 : E55D                		rol.w	#2,d5
(1) 2050/    1166 : 0245 0003           		andi.w	#%11,d5
(1) 2051/    116A : 4845                		swap	d5
(1) 2052/    116C : 2A48                		move.l	a0,a5
(1) 2053/    116E :                     	; d7 -      TEMP       | VDP write left
(1) 2054/    116E :                     	; d6 -      TEMP       | Y next-line size
(1) 2055/    116E :                     	; d5 - VDP write right | X current pos
(1) 2056/    116E :                     	; d4 -                 | TEMP
(1) 2057/    116E :                     .loop:
(1) 2058/    116E : 3806                		move.w	d6,d4
(1) 2059/    1170 : 5344                		subq.w	#1,d4
(1) 2060/    1172 : CA44                		and.w	d4,d5
(1) 2061/    1174 : 181D                		move.b	(a5)+,d4
(1) 2062/    1176 : 6776                		beq.s	.exit
(1) 2063/    1178 : 6B7A                		bmi.s	.special
(1) 2064/    117A : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2065/    117E : 6766                		beq.s	.next
(1) 2066/    1180 :                     ; ------------------------------------------------
(1) 2067/    1180 :                     ; Normal text
(1) 2068/    1180 : 0244 00FF           		andi.w	#$FF,d4
(1) 2069/    1184 : 4847                		swap	d7
(1) 2070/    1186 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2071/    118A : 0807 0002           		btst	#2,d7
(1) 2072/    118E : 671E                		beq.s	.ver_normal
(1) 2073/    1190 : 4846                		swap	d6
(1) 2074/    1192 : D846                		add.w	d6,d4
(1) 2075/    1194 : 4846                		swap	d6
(1) 2076/    1196 : 4844                		swap	d4
(1) 2077/    1198 : 4847                		swap	d7
(1) 2078/    119A : 3807                		move.w	d7,d4
(1) 2079/    119C : D845                		add.w	d5,d4
(1) 2080/    119E : 4845                		swap	d5
(1) 2081/    11A0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2082/    11A4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2083/    11A8 : 4844                		swap	d4
(1) 2084/    11AA : 3C84                		move.w	d4,(a6)
(1) 2085/    11AC : 6032                		bra.s	.ver_cont
(1) 2086/    11AE :                     .ver_normal:
(1) 2087/    11AE : D844                		add.w	d4,d4
(1) 2088/    11B0 : 4846                		swap	d6
(1) 2089/    11B2 : D846                		add.w	d6,d4
(1) 2090/    11B4 : 4846                		swap	d6
(1) 2091/    11B6 : 4844                		swap	d4
(1) 2092/    11B8 : 4847                		swap	d7
(1) 2093/    11BA : 3807                		move.w	d7,d4
(1) 2094/    11BC : D845                		add.w	d5,d4
(1) 2095/    11BE : 4845                		swap	d5
(1) 2096/    11C0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2097/    11C4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2098/    11C8 : 4844                		swap	d4
(1) 2099/    11CA : 3C84                		move.w	d4,(a6)
(1) 2100/    11CC : 5244                		addq.w	#1,d4
(1) 2101/    11CE : 4844                		swap	d4
(1) 2102/    11D0 : D846                		add.w	d6,d4
(1) 2103/    11D2 : 3D44 0004           		move.w	d4,4(a6)
(1) 2104/    11D6 : 3D45 0004           		move.w	d5,4(a6)
(1) 2105/    11DA : 4844                		swap	d4
(1) 2106/    11DC : 3C84                		move.w	d4,(a6)
(1) 2107/    11DE : 4844                		swap	d4
(1) 2108/    11E0 :                     
(1) 2109/    11E0 :                     .ver_cont:
(1) 2110/    11E0 : 4845                		swap	d5
(1) 2111/    11E2 : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2112/    11E4 : 6088                		bra.s	.loop
(1) 2113/    11E6 :                     .next:
(1) 2114/    11E6 : 4245                		clr.w	d5		; Clear X pos
(1) 2115/    11E8 : DE46                		add.w	d6,d7		; Next Y line
(1) 2116/    11EA : DE46                		add.w	d6,d7		; twice
(1) 2117/    11EC : 6080                		bra	.loop
(1) 2118/    11EE :                     .exit:
(1) 2119/    11EE : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2120/    11F2 : 4E75                		rts
(1) 2121/    11F4 :                     ; ------------------------------------------------
(1) 2122/    11F4 :                     ; Show value
(1) 2123/    11F4 :                     ; d4 - $80|flags
(1) 2124/    11F4 :                     .special:
(1) 2125/    11F4 : 2646                		move.l	d6,a3
(1) 2126/    11F6 : 1C04                		move.b	d4,d6
(1) 2127/    11F8 : E19C                		rol.l	#8,d4
(1) 2128/    11FA : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2129/    11FC : E19C                		rol.l	#8,d4
(1) 2130/    11FE : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2131/    1200 : E19C                		rol.l	#8,d4
(1) 2132/    1202 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2133/    1204 : 2844                		move.l	d4,a4
(1) 2134/    1206 : 6100 0130           		bsr	vid_PrintTValW
(1) 2135/    120A : 6000 FF62           		bra	.loop
(1) 2136/    120E :                     
(1) 2137/    120E :                     ; --------------------------------------------------------
(1) 2138/    120E :                     ; Video_PrintVal, Video_PrintValW
(1) 2139/    120E :                     ;
(1) 2140/    120E :                     ; Prints a memory value
(1) 2141/    120E :                     ;
(1) 2142/    120E :                     ; Input:
(1) 2143/    120E :                     ; a0   | Memory location to read
(1) 2144/    120E :                     ; a1   | Type:
(1) 2145/    120E :                     ;        0 - Byte
(1) 2146/    120E :                     ;        1 - Word
(1) 2147/    120E :                     ;        2 - Longword but as a 24-bit address
(1) 2148/    120E :                     ;        3 - Full Longword
(1) 2149/    120E :                     ;
(1) 2150/    120E :                     ; d0.w | X position
(1) 2151/    120E :                     ; d1.w | Y position
(1) 2152/    120E :                     ; d2.w | Font VRAM location
(1) 2153/    120E :                     ; d3.l | Screen width / Screen VRAM location:
(1) 2154/    120E :                     ;        splitw(width,vram_out)
(1) 2155/    120E :                     ;
(1) 2156/    120E :                     ; * Font VRAM location
(1) 2157/    120E :                     ; Default 8x8:  DEF_PrintVram
(1) 2158/    120E :                     ; Default 8x16: DEF_PrintVramW
(1) 2159/    120E :                     ;
(1) 2160/    120E :                     ; * Screen VRAM
(1) 2161/    120E :                     ; Foreground: DEF_VRAM_FG
(1) 2162/    120E :                     ; Background: DEF_VRAM_BG
(1) 2163/    120E :                     ; Window:     DEF_VRAM_WD
(1) 2164/    120E :                     ;
(1) 2165/    120E :                     ; * Screen Width
(1) 2166/    120E :                     ; $040 (DEF_HSIZE_32)
(1) 2167/    120E :                     ; $080 (DEF_HSIZE_64)
(1) 2168/    120E :                     ; $100 (DEF_HSIZE_128)
(1) 2169/    120E :                     ;
(1) 2170/    120E :                     ; Notes:
(1) 2171/    120E :                     ; - Initialize your graphics and VRAM location
(1) 2172/    120E :                     ;   with Video_PrintInit
(1) 2173/    120E :                     ; - Only Video_PrintW can be used in double-interlace
(1) 2174/    120E :                     ;   mode.
(1) 2175/    120E :                     ; --------------------------------------------------------
(1) 2176/    120E :                     
(1) 2177/    120E :                     Video_PrintVal:
(1) 2178/    120E : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 2179/    1212 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2180/    1218 : 3E03                		move.w	d3,d7
(1) 2181/    121A : 3A00                		move.w	d0,d5
(1) 2182/    121C : DA45                		add.w	d5,d5
(1) 2183/    121E : 3801                		move.w	d1,d4
(1) 2184/    1220 : 4843                		swap	d3
(1) 2185/    1222 : C8C3                		mulu.w	d3,d4
(1) 2186/    1224 : DA44                		add.w	d4,d5
(1) 2187/    1226 : DE45                		add.w	d5,d7
(1) 2188/    1228 : 3C03                		move.w	d3,d6
(1) 2189/    122A : 4843                		swap	d3
(1) 2190/    122C : 7A00                		moveq	#0,d5
(1) 2191/    122E : 3A07                		move.w	d7,d5
(1) 2192/    1230 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2193/    1234 : 8E7C 4000           		or.w	#$4000,d7
(1) 2194/    1238 : E55D                		rol.w	#2,d5
(1) 2195/    123A : 0245 0003           		andi.w	#%11,d5
(1) 2196/    123E : 4845                		swap	d5
(1) 2197/    1240 : 2A48                		move.l	a0,a5
(1) 2198/    1242 :                     .loop:
(1) 2199/    1242 : 3806                		move.w	d6,d4
(1) 2200/    1244 : 5344                		subq.w	#1,d4
(1) 2201/    1246 : CA44                		and.w	d4,d5
(1) 2202/    1248 :                     
(1) 2203/    1248 : 3807                		move.w	d7,d4
(1) 2204/    124A : D845                		add.w	d5,d4
(1) 2205/    124C : 4845                		swap	d5
(1) 2206/    124E : 3D44 0004           		move.w	d4,4(a6)
(1) 2207/    1252 : 3D45 0004           		move.w	d5,4(a6)
(1) 2208/    1256 : 4845                		swap	d5
(1) 2209/    1258 :                     .q_loop:
(1) 2210/    1258 : 2848                		move.l	a0,a4
(1) 2211/    125A : 3C09                		move.w	a1,d6
(1) 2212/    125C : 616E                		bsr	vid_PrintTVal
(1) 2213/    125E : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 2214/    1262 : 4E75                		rts
(1) 2215/    1264 :                     
(1) 2216/    1264 :                     ; --------------------------------------------------------
(1) 2217/    1264 :                     ; 8x16 version
(1) 2218/    1264 :                     ; --------------------------------------------------------
(1) 2219/    1264 :                     
(1) 2220/    1264 :                     Video_PrintValW:
(1) 2221/    1264 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2222/    1268 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2223/    126E :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2224/    126E : 3C02                		move.w	d2,d6
(1) 2225/    1270 : 0446 0040           		subi.w	#$20*2,d6
(1) 2226/    1274 : 3A38 D7F6           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2227/    1278 : 0805 0002           		btst	#2,d5
(1) 2228/    127C : 670E                		beq.s	.no_dble_y
(1) 2229/    127E : 3E06                		move.w	d6,d7
(1) 2230/    1280 : 0247 F800           		andi.w	#$F800,d7
(1) 2231/    1284 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2232/    1288 : E24E                		lsr.w	#1,d6
(1) 2233/    128A : 8C47                		or.w	d7,d6
(1) 2234/    128C :                     .no_dble_y:
(1) 2235/    128C : 4846                		swap	d6
(1) 2236/    128E : 3E03                		move.w	d3,d7
(1) 2237/    1290 : 3A00                		move.w	d0,d5
(1) 2238/    1292 : DA45                		add.w	d5,d5
(1) 2239/    1294 : 3801                		move.w	d1,d4
(1) 2240/    1296 : 4843                		swap	d3
(1) 2241/    1298 : C8C3                		mulu.w	d3,d4
(1) 2242/    129A : DA44                		add.w	d4,d5
(1) 2243/    129C : DE45                		add.w	d5,d7
(1) 2244/    129E : 3C03                		move.w	d3,d6
(1) 2245/    12A0 : 4843                		swap	d3
(1) 2246/    12A2 :                     
(1) 2247/    12A2 : 7A00                		moveq	#0,d5
(1) 2248/    12A4 : 3A07                		move.w	d7,d5
(1) 2249/    12A6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2250/    12AA : 8E7C 4000           		or.w	#$4000,d7
(1) 2251/    12AE : E55D                		rol.w	#2,d5
(1) 2252/    12B0 : 0245 0003           		andi.w	#%11,d5
(1) 2253/    12B4 : 4845                		swap	d5
(1) 2254/    12B6 : 2A48                		move.l	a0,a5
(1) 2255/    12B8 :                     	; d7 -      TEMP       | VDP write left
(1) 2256/    12B8 :                     	; d6 -      TEMP       | Y next-line size
(1) 2257/    12B8 :                     	; d5 - VDP write right | X current pos
(1) 2258/    12B8 :                     	; d4 -                 | TEMP
(1) 2259/    12B8 :                     .loop:
(1) 2260/    12B8 : 3806                		move.w	d6,d4
(1) 2261/    12BA : 5344                		subq.w	#1,d4
(1) 2262/    12BC : CA44                		and.w	d4,d5
(1) 2263/    12BE : 2646                		move.l	d6,a3
(1) 2264/    12C0 : 2848                		move.l	a0,a4
(1) 2265/    12C2 : 3C09                		move.w	a1,d6
(1) 2266/    12C4 : 6172                		bsr	vid_PrintTValW
(1) 2267/    12C6 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2268/    12CA : 4E75                		rts
(1) 2269/    12CC :                     
(1) 2270/    12CC :                     ; ------------------------------------------------
(1) 2271/    12CC :                     ; a4 - Memory value
(1) 2272/    12CC :                     ; d6 - Type
(1) 2273/    12CC :                     
(1) 2274/    12CC :                     vid_PrintTVal:
(1) 2275/    12CC : 0246 0003           		andi.w	#%11,d6
(1) 2276/    12D0 : 4847                		swap	d7
(1) 2277/    12D2 : 3E3C 0000           		move.w	#1-1,d7
(1) 2278/    12D6 : BC3C 0003           		cmp.b	#$03,d6
(1) 2279/    12DA : 6724                		beq.s	.show_long
(1) 2280/    12DC : BC3C 0002           		cmp.b	#$02,d6
(1) 2281/    12E0 : 6716                		beq.s	.show_24
(1) 2282/    12E2 : BC3C 0001           		cmp.b	#$01,d6
(1) 2283/    12E6 : 6708                		beq.s	.show_word
(1) 2284/    12E8 :                     .show_byte:
(1) 2285/    12E8 : 1814                		move.b	(a4),d4
(1) 2286/    12EA : 4844                		swap	d4
(1) 2287/    12EC : E19C                		rol.l	#8,d4
(1) 2288/    12EE : 6014                		bra.s	.mk_value
(1) 2289/    12F0 :                     .show_word:
(1) 2290/    12F0 : 3814                		move.w	(a4),d4
(1) 2291/    12F2 : 4844                		swap	d4
(1) 2292/    12F4 : 5247                		addq.w	#1,d7
(1) 2293/    12F6 : 600C                		bra.s	.mk_value
(1) 2294/    12F8 :                     .show_24:
(1) 2295/    12F8 : 2814                		move.l	(a4),d4
(1) 2296/    12FA : E19C                		rol.l	#8,d4
(1) 2297/    12FC : 5447                		addq.w	#2,d7
(1) 2298/    12FE : 6004                		bra.s	.mk_value
(1) 2299/    1300 :                     .show_long:
(1) 2300/    1300 : 2814                		move.l	(a4),d4
(1) 2301/    1302 : 5647                		addq.w	#3,d7
(1) 2302/    1304 :                     .mk_value:
(1) 2303/    1304 : E99C                		rol.l	#4,d4
(1) 2304/    1306 : 610E                		bsr.s	.show_nibbl
(1) 2305/    1308 : E99C                		rol.l	#4,d4
(1) 2306/    130A : 610A                		bsr.s	.show_nibbl
(1) 2307/    130C : 51CF FFF6           		dbf	d7,.mk_value
(1) 2308/    1310 : 4846                		swap	d6
(1) 2309/    1312 : 4847                		swap	d7
(1) 2310/    1314 : 4E75                		rts
(1) 2311/    1316 :                     .show_nibbl:
(1) 2312/    1316 : 2846                		move.l	d6,a4
(1) 2313/    1318 : 1C04                		move.b	d4,d6
(1) 2314/    131A : 0246 000F           		andi.w	#$0F,d6
(1) 2315/    131E : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2316/    1322 : 6502                		bcs.s	.hex_incr
(1) 2317/    1324 : 5E46                		addq.w	#7,d6
(1) 2318/    1326 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2319/    132A :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2320/    132A : DC42                		add.w	d2,d6
(1) 2321/    132C : 0446 0020           		subi.w	#$20,d6
(1) 2322/    1330 : 3C86                		move.w	d6,(a6)
(1) 2323/    1332 : 5445                		addq.w	#2,d5
(1) 2324/    1334 : 2C0C                		move.l	a4,d6
(1) 2325/    1336 : 4E75                		rts
(1) 2326/    1338 :                     
(1) 2327/    1338 :                     ; ------------------------------------------------
(1) 2328/    1338 :                     
(1) 2329/    1338 :                     vid_PrintTValW:
(1) 2330/    1338 : 0246 0003           		andi.w	#%11,d6
(1) 2331/    133C : 4847                		swap	d7
(1) 2332/    133E : 3E3C 0000           		move.w	#1-1,d7
(1) 2333/    1342 : BC3C 0003           		cmp.b	#$03,d6
(1) 2334/    1346 : 6724                		beq.s	.show_long
(1) 2335/    1348 : BC3C 0002           		cmp.b	#$02,d6
(1) 2336/    134C : 6716                		beq.s	.show_24
(1) 2337/    134E : BC3C 0001           		cmp.b	#$01,d6
(1) 2338/    1352 : 6708                		beq.s	.show_word
(1) 2339/    1354 :                     .show_byte:
(1) 2340/    1354 : 1814                		move.b	(a4),d4
(1) 2341/    1356 : 4844                		swap	d4
(1) 2342/    1358 : E19C                		rol.l	#8,d4
(1) 2343/    135A : 6014                		bra.s	.mk_value_in
(1) 2344/    135C :                     .show_word:
(1) 2345/    135C : 3814                		move.w	(a4),d4
(1) 2346/    135E : 4844                		swap	d4
(1) 2347/    1360 : 5247                		addq.w	#1,d7
(1) 2348/    1362 : 600C                		bra.s	.mk_value_in
(1) 2349/    1364 :                     .show_24:
(1) 2350/    1364 : 2814                		move.l	(a4),d4
(1) 2351/    1366 : E19C                		rol.l	#8,d4
(1) 2352/    1368 : 5447                		addq.w	#2,d7
(1) 2353/    136A : 6004                		bra.s	.mk_value_in
(1) 2354/    136C :                     .show_long:
(1) 2355/    136C : 2814                		move.l	(a4),d4
(1) 2356/    136E : 5647                		addq.w	#3,d7
(1) 2357/    1370 :                     .mk_value_in:
(1) 2358/    1370 : 2C0B                		move.l	a3,d6
(1) 2359/    1372 :                     
(1) 2360/    1372 :                     
(1) 2361/    1372 :                     	; d4 - value
(1) 2362/    1372 : 4846                		swap	d6
(1) 2363/    1374 :                     .mk_value:
(1) 2364/    1374 : E99C                		rol.l	#4,d4
(1) 2365/    1376 : 610E                		bsr.s	.show_nibbl
(1) 2366/    1378 : E99C                		rol.l	#4,d4
(1) 2367/    137A : 610A                		bsr.s	.show_nibbl
(1) 2368/    137C : 51CF FFF6           		dbf	d7,.mk_value
(1) 2369/    1380 : 4846                		swap	d6
(1) 2370/    1382 : 4847                		swap	d7
(1) 2371/    1384 : 4E75                		rts
(1) 2372/    1386 :                     
(1) 2373/    1386 :                     	; d6 - Y next-line size | TEMP
(1) 2374/    1386 :                     .show_nibbl:
(1) 2375/    1386 : 2846                		move.l	d6,a4
(1) 2376/    1388 : 2644                		move.l	d4,a3
(1) 2377/    138A : 3C38 D7F6           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2378/    138E : 0806 0002           		btst	#2,d6
(1) 2379/    1392 : 6730                		beq.s	.nibbl_norm
(1) 2380/    1394 :                     
(1) 2381/    1394 :                     	; TODO CHECAR ESTO
(1) 2382/    1394 : 616C                		bsr.s	.get_preval
(1) 2383/    1396 : 0446 0020           		subi.w	#$20,d6
(1) 2384/    139A : 4847                		swap	d7
(1) 2385/    139C :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2386/    139C : 3802                		move.w	d2,d4
(1) 2387/    139E : 0244 07FF           		andi.w	#$7FF,d4
(1) 2388/    13A2 : E24C                		lsr.w	#1,d4
(1) 2389/    13A4 : DC44                		add.w	d4,d6
(1) 2390/    13A6 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2391/    13A6 : 3802                		move.w	d2,d4
(1) 2392/    13A8 : 0244 F800           		andi.w	#$F800,d4
(1) 2393/    13AC : 8C44                		or.w	d4,d6
(1) 2394/    13AE : 3807                		move.w	d7,d4
(1) 2395/    13B0 : 4847                		swap	d7
(1) 2396/    13B2 : D845                		add.w	d5,d4
(1) 2397/    13B4 : 4845                		swap	d5
(1) 2398/    13B6 : 3D44 0004           		move.w	d4,4(a6)
(1) 2399/    13BA : 3D45 0004           		move.w	d5,4(a6)
(1) 2400/    13BE : 4845                		swap	d5
(1) 2401/    13C0 : 3C86                		move.w	d6,(a6)
(1) 2402/    13C2 : 6036                		bra.s	.nibbl_cont
(1) 2403/    13C4 :                     
(1) 2404/    13C4 :                     .nibbl_norm:
(1) 2405/    13C4 : 613C                		bsr.s	.get_preval
(1) 2406/    13C6 : 0446 0020           		subi.w	#$20,d6
(1) 2407/    13CA : DC46                		add.w	d6,d6
(1) 2408/    13CC : DC42                		add.w	d2,d6
(1) 2409/    13CE : 4847                		swap	d7
(1) 2410/    13D0 : 3807                		move.w	d7,d4
(1) 2411/    13D2 : 4847                		swap	d7
(1) 2412/    13D4 : D845                		add.w	d5,d4
(1) 2413/    13D6 : 4845                		swap	d5
(1) 2414/    13D8 : 3D44 0004           		move.w	d4,4(a6)
(1) 2415/    13DC : 3D45 0004           		move.w	d5,4(a6)
(1) 2416/    13E0 : 4845                		swap	d5
(1) 2417/    13E2 : 3C86                		move.w	d6,(a6)
(1) 2418/    13E4 : 5246                		addq.w	#1,d6
(1) 2419/    13E6 : 4846                		swap	d6
(1) 2420/    13E8 : D846                		add.w	d6,d4
(1) 2421/    13EA : 4846                		swap	d6
(1) 2422/    13EC : 4845                		swap	d5
(1) 2423/    13EE : 3D44 0004           		move.w	d4,4(a6)
(1) 2424/    13F2 : 3D45 0004           		move.w	d5,4(a6)
(1) 2425/    13F6 : 4845                		swap	d5
(1) 2426/    13F8 : 3C86                		move.w	d6,(a6)
(1) 2427/    13FA :                     .nibbl_cont:
(1) 2428/    13FA : 5445                		addq.w	#2,d5
(1) 2429/    13FC : 2C0C                		move.l	a4,d6
(1) 2430/    13FE : 280B                		move.l	a3,d4
(1) 2431/    1400 : 4E75                		rts
(1) 2432/    1402 :                     
(1) 2433/    1402 :                     .get_preval:
(1) 2434/    1402 : 1C04                		move.b	d4,d6
(1) 2435/    1404 : 0246 000F           		andi.w	#$0F,d6
(1) 2436/    1408 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2437/    140C : 6502                		bcs.s	.hex_incr
(1) 2438/    140E : 5E46                		addq.w	#7,d6
(1) 2439/    1410 :                     .hex_incr:
(1) 2440/    1410 : DC7C 0030           		add.w	#"0",d6
(1) 2441/    1414 : 4E75                		rts
(1) 2442/    1416 :                     
(1) 2443/    1416 :                     ; ====================================================================
(1) 2444/    1416 :                     ; ----------------------------------------------------------------
(1) 2445/    1416 :                     ; VDP Sprites
(1) 2446/    1416 :                     ; ----------------------------------------------------------------
(1) 2447/    1416 :                     
(1) 2448/    1416 :                     ; --------------------------------------------------------
(1) 2449/    1416 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2450/    1416 :                     ;
(1) 2451/    1416 :                     ; Sets or Makes a VDP Sprite piece
(1) 2452/    1416 :                     ;
(1) 2453/    1416 :                     ; Input:
(1) 2454/    1416 :                     ; a0   | Slot (0-80)
(1) 2455/    1416 :                     ; d0.w | X pos
(1) 2456/    1416 :                     ; d1.w | Y pos
(1) 2457/    1416 :                     ; d2.w | VRAM
(1) 2458/    1416 :                     ; d3.w | Size
(1) 2459/    1416 :                     ;
(1) 2460/    1416 :                     ; Returns:
(1) 2461/    1416 :                     ; bcc | OK
(1) 2462/    1416 :                     ; bcs | Ran out of slots (not sprites)
(1) 2463/    1416 :                     ; --------------------------------------------------------
(1) 2464/    1416 :                     
(1) 2465/    1416 :                     Video_SetSpr:
(1) 2466/    1416 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2467/    141A : 2E08                		move.l	a0,d7
(1) 2468/    141C : 7C00                		moveq	#0,d6
(1) 2469/    141E : 6020                		bra	vidMdSpr_MkSpr
(1) 2470/    1420 :                     Video_MakeSpr:
(1) 2471/    1420 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2472/    1424 : 7E00                		moveq	#0,d7
(1) 2473/    1426 : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1) 2474/    142A : 7C4F                		moveq	#80-1,d6
(1) 2475/    142C :                     .chk_free:
(1) 2476/    142C : 0816 0007           		btst	#7,(a6)
(1) 2477/    1430 : 670C                		beq.s	.mk_spr
(1) 2478/    1432 : 5247                		addq.w	#1,d7
(1) 2479/    1434 : DCFC 0008           		adda	#8,a6
(1) 2480/    1438 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2481/    143C : 605C                		bra.s	vidMd_CError
(1) 2482/    143E :                     .mk_spr:
(1) 2483/    143E : 7C40                		moveq	#$40,d6
(1) 2484/    1440 :                     vidMdSpr_MkSpr:
(1) 2485/    1440 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2486/    1446 : BE7C 0050           		cmp.w	#80,d7
(1) 2487/    144A : 6C4E                		bge.s	vidMd_CError
(1) 2488/    144C : E74F                		lsl.w	#3,d7
(1) 2489/    144E : 0687 FFFF C9C0      		addi.l	#RAM_SprPzList,d7
(1) 2490/    1454 : 2C47                		move.l	d7,a6
(1) 2491/    1456 : 4846                		swap	d6
(1) 2492/    1458 : 3E01                		move.w	d1,d7			; Y pos
(1) 2493/    145A : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2494/    145E : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2495/    1464 : 6704                		beq.s	.dont_add
(1) 2496/    1466 : 0647 0080           		addi.w	#$80,d7
(1) 2497/    146A :                     .dont_add:
(1) 2498/    146A : 0247 03FF           		andi.w	#$3FF,d7
(1) 2499/    146E : 3C03                		move.w	d3,d6
(1) 2500/    1470 : 0246 000F           		andi.w	#%1111,d6
(1) 2501/    1474 : E14E                		lsl.w	#8,d6
(1) 2502/    1476 : E54E                		lsl.w	#2,d6
(1) 2503/    1478 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2504/    147A : 4846                		swap	d6
(1) 2505/    147C : E14E                		lsl.w	#8,d6
(1) 2506/    147E : 8E7C 8000           		or.w	#$8000,d7
(1) 2507/    1482 : 8E46                		or.w	d6,d7
(1) 2508/    1484 : 3CC7                		move.w	d7,(a6)+
(1) 2509/    1486 : 3E00                		move.w	d0,d7
(1) 2510/    1488 : 0647 0080           		addi.w	#$80,d7
(1) 2511/    148C : 3CC7                		move.w	d7,(a6)+
(1) 2512/    148E : 3CC2                		move.w	d2,(a6)+
(1) 2513/    1490 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2514/    1494 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2515/    1498 : 4E75                		rts
(1) 2516/    149A :                     ; Carry error
(1) 2517/    149A :                     vidMd_CError:
(1) 2518/    149A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2519/    149E : 003C 0001           		or	#1,ccr			; Return Error
(1) 2520/    14A2 :                     vidMd_CFreeze:
(1) 2521/    14A2 : 4E75                		rts
(1) 2522/    14A4 :                     
(1) 2523/    14A4 :                     ; --------------------------------------------------------
(1) 2524/    14A4 :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2525/    14A4 :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2526/    14A4 :                     ;
(1) 2527/    14A4 :                     ; Sets or Makes a VDP Sprite with map data
(1) 2528/    14A4 :                     ;
(1) 2529/    14A4 :                     ; Input:
(1) 2530/    14A4 :                     ; a0   | Slot (0-80)
(1) 2531/    14A4 :                     ; a1   | Map data
(1) 2532/    14A4 :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2533/    14A4 :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2534/    14A4 :                     ; d0.w | X position
(1) 2535/    14A4 :                     ; d1.w | Y position
(1) 2536/    14A4 :                     ; d2.w | VRAM output location
(1) 2537/    14A4 :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2538/    14A4 :                     ;        cell vram is ignored.
(1) 2539/    14A4 :                     ; d3.w | Frame number
(1) 2540/    14A4 :                     ;
(1) 2541/    14A4 :                     ; Returns:
(1) 2542/    14A4 :                     ; bcc | OK
(1) 2543/    14A4 :                     ; bcs | Ran out of slots (not sprites)
(1) 2544/    14A4 :                     ; --------------------------------------------------------
(1) 2545/    14A4 :                     
(1) 2546/    14A4 :                     Video_SetSprMap_DMA:
(1) 2547/    14A4 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2548/    14A8 : 6104                		bsr	Video_SetSprMap
(1) 2549/    14AA : 651E                		bcs.s	vid_MkDmaCarry
(1) 2550/    14AC : 6012                		bra	vid_MkDmaNext
(1) 2551/    14AE :                     Video_SetSprMap:
(1) 2552/    14AE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2553/    14B2 : 2E08                		move.l	a0,d7
(1) 2554/    14B4 : 7C00                		moveq	#0,d6
(1) 2555/    14B6 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2556/    14B8 :                     Video_MakeSprMap_DMA:
(1) 2557/    14B8 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2558/    14BC : 6112                		bsr	Video_MakeSprMap
(1) 2559/    14BE : 650A                		bcs.s	vid_MkDmaCarry
(1) 2560/    14C0 :                     vid_MkDmaNext:
(1) 2561/    14C0 : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2562/    14C2 : 224B                		move.l	a3,a1
(1) 2563/    14C4 : 3003                		move.w	d3,d0
(1) 2564/    14C6 : 3202                		move.w	d2,d1
(1) 2565/    14C8 : 6160                		bsr	vid_MkMapDma
(1) 2566/    14CA :                     vid_MkDmaCarry:
(1) 2567/    14CA : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2568/    14CE : 4E75                		rts
(1) 2569/    14D0 :                     
(1) 2570/    14D0 :                     Video_MakeSprMap:
(1) 2571/    14D0 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2572/    14D4 : 7E00                		moveq	#0,d7
(1) 2573/    14D6 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1) 2574/    14DA : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2575/    14DC :                     .chk_free:
(1) 2576/    14DC : 4A16                		tst.b	(a6)
(1) 2577/    14DE : 670C                		beq.s	.mk_spr
(1) 2578/    14E0 : 5247                		addq.w	#1,d7
(1) 2579/    14E2 : DCFC 0010           		adda	#$10,a6
(1) 2580/    14E6 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2581/    14EA : 60AE                		bra	vidMd_CError
(1) 2582/    14EC :                     .mk_spr:
(1) 2583/    14EC : 7C40                		moveq	#$40,d6
(1) 2584/    14EE :                     vidMdSpr_MkSprMap:
(1) 2585/    14EE : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2586/    14F4 : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2587/    14F8 : 6CA0                		bge	vidMd_CError
(1) 2588/    14FA : E98F                		lsl.l	#4,d7
(1) 2589/    14FC : 0687 FFFF C840      		addi.l	#RAM_SprMapList,d7
(1) 2590/    1502 : 2C47                		move.l	d7,a6
(1) 2591/    1504 : 2E09                		move.l	a1,d7
(1) 2592/    1506 : 8C7C 0080           		or.w	#$80,d6
(1) 2593/    150A : 4846                		swap	d6
(1) 2594/    150C : E18E                		lsl.l	#8,d6
(1) 2595/    150E : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2596/    1514 : 8E86                		or.l	d6,d7
(1) 2597/    1516 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2598/    1518 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2599/    151A : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2600/    151C : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2601/    151E : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2602/    1520 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2603/    1524 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2604/    1528 : 4E75                		rts
(1) 2605/    152A :                     
(1) 2606/    152A :                     ; --------------------------------------------------------
(1) 2607/    152A :                     ; Input:
(1) 2608/    152A :                     ; a0   | DMA map data
(1) 2609/    152A :                     ; a1   | Graphics data
(1) 2610/    152A :                     ; d0.w | Current frame in DMA list
(1) 2611/    152A :                     ; d1.w | VRAM position
(1) 2612/    152A :                     ;
(1) 2613/    152A :                     ; USES:
(1) 2614/    152A :                     ; a6
(1) 2615/    152A :                     vid_MkMapDma:
(1) 2616/    152A : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2617/    152E : 7800                		moveq	#0,d4
(1) 2618/    1530 : 0240 00FF           		andi.w	#$FF,d0
(1) 2619/    1534 : D040                 		add.w	d0,d0
(1) 2620/    1536 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2621/    153A : D0C4                 		adda	d4,a0
(1) 2622/    153C : 3818                 		move.w	(a0)+,d4
(1) 2623/    153E : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2624/    1540 : 6B32                 		bmi.s	.no_dma
(1) 2625/    1542 : 5344                 		subq.w	#1,d4
(1) 2626/    1544 : 0241 07FF           		andi.w	#$07FF,d1
(1) 2627/    1548 : EB49                		lsl.w	#5,d1
(1) 2628/    154A :                     .next_pz:
(1) 2629/    154A : 4844                		swap	d4
(1) 2630/    154C : 3818                		move.w	(a0)+,d4
(1) 2631/    154E : 3404                		move.w	d4,d2
(1) 2632/    1550 : EE4A                		lsr.w	#7,d2
(1) 2633/    1552 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2634/    1556 : D47C 0020           		add.w	#$20,d2
(1) 2635/    155A : 7000                		moveq	#0,d0
(1) 2636/    155C : 3004                		move.w	d4,d0
(1) 2637/    155E : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2638/    1562 : EB48                		lsl.w	#5,d0
(1) 2639/    1564 : D089                		add.l	a1,d0
(1) 2640/    1566 : 6100 F666           		bsr	Video_MakeDmaEntry
(1) 2641/    156A : D242                		add.w	d2,d1
(1) 2642/    156C : 4844                		swap	d4
(1) 2643/    156E : 51CC FFDA           		dbf	d4,.next_pz
(1) 2644/    1572 : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2645/    1574 :                     .no_dma:
(1) 2646/    1574 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2647/    1578 : 4E75                		rts
(1) 2648/    157A :                     
(1) 2649/    157A :                     ; ====================================================================
(1) 2650/    157A :                     ; ----------------------------------------------------------------
(1) 2651/    157A :                     ; Video routines for SEGA CD
(1) 2652/    157A :                     ; ----------------------------------------------------------------
(1) 2653/    157A :                     
(1) 3169/    157A :                     
(1) 3170/    157A :                     ; ====================================================================
(1) 3171/    157A :                     ; ----------------------------------------------------------------
(1) 3172/    157A :                     ; Video routines for 32X
(1) 3173/    157A :                     ; ----------------------------------------------------------------
(1) 3174/    157A :                     
(1) 3907/    157A :                     
     194/    157A :                     		include	"system/md/system.asm"
(1)    1/    157A :                     ; ===========================================================================
(1)    2/    157A :                     ; ----------------------------------------------------------------
(1)    3/    157A :                     ; Genesis system routines
(1)    4/    157A :                     ;
(1)    5/    157A :                     ; including SCD, 32X and PICO.
(1)    6/    157A :                     ; ----------------------------------------------------------------
(1)    7/    157A :                     
(1)    8/    157A :                     ; ====================================================================
(1)    9/    157A :                     ; --------------------------------------------------------
(1)   10/    157A :                     ; Settings
(1)   11/    157A :                     ; --------------------------------------------------------
(1)   12/    157A :                     
(1)   13/    157A : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/    157A : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/    157A :                     
(1)   16/    157A :                     ; ===================================================================
(1)   17/    157A :                     ; --------------------------------------------------------
(1)   18/    157A :                     ; Variables
(1)   19/    157A :                     ; --------------------------------------------------------
(1)   20/    157A :                     
(1)   21/    157A :                     ; ------------------------------------------------
(1)   22/    157A :                     ; Controller buffer data
(1)   23/    157A :                     ;
(1)   24/    157A :                     ; MUST call System_Input during VBlank
(1)   25/    157A :                     ; ------------------------------------------------
(1)   26/    157A :                     
(1)   27/    157A :                     ; ------------------------------------------------
(1)   28/    157A :                     ; pad_id
(1)   29/    157A :                     ;
(1)   30/    157A :                     ; JoyID_MD:
(1)   31/    157A :                     ; Read pad_ver separately to check if controller
(1)   32/    157A :                     ; is 3button(0) or 6button(1)
(1)   33/    157A :                     ; ------------------------------------------------
(1)   34/    157A :                     
(1)   35/    157A : =$3                  JoyID_Mouse	equ $03
(1)   36/    157A : =$D                  JoyID_MD	equ $0D
(1)   37/    157A : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/    157A :                     
(1)   39/    157A :                     ; ------------------------------------------------
(1)   40/    157A :                     ; Genesis controller
(1)   41/    157A :                     ;
(1)   42/    157A :                     ; Read these as WORD
(1)   43/    157A :                     ; ------------------------------------------------
(1)   44/    157A :                     
(1)   45/    157A :                     ; on_hold, on_press
(1)   46/    157A : =$1                  JoyUp		equ $0001
(1)   47/    157A : =$2                  JoyDown		equ $0002
(1)   48/    157A : =$4                  JoyLeft		equ $0004
(1)   49/    157A : =$8                  JoyRight	equ $0008
(1)   50/    157A : =$10                 JoyB		equ $0010
(1)   51/    157A : =$20                 JoyC		equ $0020
(1)   52/    157A : =$40                 JoyA		equ $0040
(1)   53/    157A : =$80                 JoyStart	equ $0080
(1)   54/    157A : =$100                JoyZ		equ $0100
(1)   55/    157A : =$200                JoyY		equ $0200
(1)   56/    157A : =$400                JoyX		equ $0400
(1)   57/    157A : =$800                JoyMode		equ $0800
(1)   58/    157A : =$0                  bitJoyUp	equ 0
(1)   59/    157A : =$1                  bitJoyDown	equ 1
(1)   60/    157A : =$2                  bitJoyLeft	equ 2
(1)   61/    157A : =$3                  bitJoyRight	equ 3
(1)   62/    157A : =$4                  bitJoyB		equ 4
(1)   63/    157A : =$5                  bitJoyC		equ 5
(1)   64/    157A : =$6                  bitJoyA		equ 6
(1)   65/    157A : =$7                  bitJoyStart	equ 7
(1)   66/    157A : =$8                  bitJoyZ		equ 8
(1)   67/    157A : =$9                  bitJoyY		equ 9
(1)   68/    157A : =$A                  bitJoyX		equ 10
(1)   69/    157A : =$B                  bitJoyMode	equ 11
(1)   70/    157A :                     
(1)   71/    157A :                     ; ------------------------------------------------
(1)   72/    157A :                     ; Mega Mouse ONLY
(1)   73/    157A :                     ;
(1)   74/    157A :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/    157A :                     ; NOT screen position.
(1)   76/    157A :                     ; ------------------------------------------------
(1)   77/    157A :                     
(1)   78/    157A : =$1                  ClickR		equ $0001
(1)   79/    157A : =$2                  ClickL		equ $0002
(1)   80/    157A : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/    157A : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/    157A : =$0                  bitClickL	equ 0
(1)   83/    157A : =$1                  bitClickR	equ 1
(1)   84/    157A : =$2                  bitClickM	equ 2
(1)   85/    157A : =$3                  bitClickS	equ 3
(1)   86/    157A :                     
(1)   87/    157A :                     ; ------------------------------------------------
(1)   88/    157A :                     ; Sega PICO
(1)   89/    157A :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/    157A :                     ; For reading the pen position use
(1)   91/    157A :                     ; mouse_x and mouse_y
(1)   92/    157A :                     ; ------------------------------------------------
(1)   93/    157A :                     
(1)   94/    157A : =$10                 JoyRED		equ $0010
(1)   95/    157A : =$80                 JoyPEN		equ $0080
(1)   96/    157A : =$4                  bitJoyRED	equ 4
(1)   97/    157A : =$7                  bitJoyPEN	equ 7
(1)   98/    157A :                     
(1)   99/    157A :                     ; ====================================================================
(1)  100/    157A :                     ; ----------------------------------------------------------------
(1)  101/    157A :                     ; Structs
(1)  102/    157A :                     ; ----------------------------------------------------------------
(1)  103/    157A :                     
(1)  104/    157A :                     ; ------------------------------------------------
(1)  105/    157A :                     ; RAM_InputData
(1)  106/    157A :                     
(1)  107/    157A :                     ; *** MANUAL VARIABLES ***
(1)  108/    157A : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/    157A : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/    157A : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/    157A : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/    157A : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/    157A : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/    157A : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/    157A : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/    157A : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/    157A : =$10                 sizeof_input		equ $10
(1)  118/    157A :                     
(1)  119/    157A :                     ; ------------------------------------------------
(1)  120/    157A :                     ; RAM_Objects
(1)  121/    157A :                     ;
(1)  122/    157A :                     ; Size must end as even
(1)  123/    157A :                     ; ------------------------------------------------
(1)  124/    157A :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; obj_len		ds.l 0
(1)  148/    157A : =$68                 			endstruct
(1)  149/    157A :                     
(1)  150/    157A :                     ; ====================================================================
(1)  151/    157A :                     ; ----------------------------------------------------------------
(1)  152/    157A :                     ; RAM section
(1)  153/    157A :                     ; ----------------------------------------------------------------
(1)  154/    157A :                     
(1)  155/    157A : (MACRO)              			memory RAM_MdSystem
(1)  155/    157A : =$157A               GLBL_LASTPC     := *
(1)  155/    157A :                                     dephase
(1)  155/FFFFFFFFFFFFD7F8 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFD7F8 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFD8F8 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFD938 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFE978 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFE97C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFE980 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFE986 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFE98C :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFE992 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFE994 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFE996 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFE998 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFE99A :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)  169/    2722 :                     .here:          dephase
(1)  169/    2722 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/    157A :                                     phase GLBL_LASTPC
(1)  170/    157A :                     
(1)  171/    157A :                     ; ====================================================================
(1)  172/    157A :                     ; ----------------------------------------------------------------
(1)  173/    157A :                     ; Label aliases
(1)  174/    157A :                     ; ----------------------------------------------------------------
(1)  175/    157A :                     
(1)  176/    157A : =$FFFFFFFFFFFFD8F8   Controller_1		equ RAM_InputData
(1)  177/    157A : =$FFFFFFFFFFFFD908   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/    157A :                     
(1)  179/    157A :                     ; ====================================================================
(1)  180/    157A :                     ; --------------------------------------------------------
(1)  181/    157A :                     ; Init System
(1)  182/    157A :                     ; 
(1)  183/    157A :                     ; Uses:
(1)  184/    157A :                     ; a0-a2,d0-d1
(1)  185/    157A :                     ; --------------------------------------------------------
(1)  186/    157A :                     
(1)  187/    157A :                     System_Init:
(1)  188/    157A : 007C 0700           		or.w	#$0700,sr
(1)  200/    157E : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/    1582 : 31C0 E980            		move.w	d0,(RAM_VBlankJump).w
(1)  202/    1586 : 31C0 E986           		move.w	d0,(RAM_HBlankJump).w
(1)  203/    158A : 31C0 E98C           		move.w	d0,(RAM_ExternalJump).w
(1)  204/    158E : 203C 0000 16E2      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/    1594 : 223C 0000 16E4      		move.l	#HInt_Default,d1
(1)  206/    159A : 243C 0000 16E6      		move.l	#ExtInt_Default,d2
(1)  207/    15A0 : 6100 0360           		bsr	System_SetIntJumps
(1)  208/    15A4 : 41F8 D8F8           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/    15A8 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/    15AC : 7000                		moveq	#0,d0
(1)  211/    15AE :                     .clrinput:
(1)  212/    15AE : 30C0                		move.w	d0,(a0)+
(1)  213/    15B0 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/    15B4 : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/    15B8 : 4E75                		rts
(1)  216/    15BA :                     
(1)  217/    15BA :                     ; ====================================================================
(1)  218/    15BA :                     ; --------------------------------------------------------
(1)  219/    15BA :                     ; System_Render
(1)  220/    15BA :                     ;
(1)  221/    15BA :                     ; This will:
(1)  222/    15BA :                     ; - Drop a frame if we got late on VBlank
(1)  223/    15BA :                     ; - Process Palette fading buffers
(1)  224/    15BA :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/    15BA :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/    15BA :                     ; - Check the sound driver for any changes/requests
(1)  227/    15BA :                     ;   from Z80 (Sound_Update, several times)
(1)  228/    15BA :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/    15BA :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/    15BA :                     ;
(1)  231/    15BA :                     ; During VBlank:
(1)  232/    15BA :                     ; - Read the Input data, (System_Input)
(1)  233/    15BA :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/    15BA :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/    15BA :                     ;   (Video_Render)
(1)  236/    15BA :                     ;
(1)  237/    15BA :                     ; Notes:
(1)  238/    15BA :                     ; - If VDP Display is disabled all of this
(1)  239/    15BA :                     ;   will be skipped.
(1)  240/    15BA :                     ; --------------------------------------------------------
(1)  241/    15BA :                     
(1)  242/    15BA :                     System_Render:
(1)  243/    15BA : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/    15BE : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/    15C2 : 671A                		beq	.forgot_disp
(1)  246/    15C4 : 6100 F832           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/    15C8 :                     .wait_early:
(1)  248/    15C8 : 616C                		bsr	Sound_Update			; Update sound on wait
(1)  249/    15CA : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/    15D0 : 0807 0003           		btst	#bitVBlk,d7
(1)  251/    15D4 : 66F2                		bne.s	.wait_early
(1)  252/    15D6 :                     	; ----------------------------------------
(1)  253/    15D6 :                     	; 32X/CD32X
(1)  286/    15D6 :                     ; ----------------------------------------
(1)  287/    15D6 : 6108                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/    15D8 :                     ; ----------------------------------------
(1)  294/    15D8 :                     .from_late:
(1)  302/    15D8 : 52B8 D7DC           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/    15DC : 6158                		bsr	Sound_Update
(1)  304/    15DE :                     .forgot_disp:
(1)  305/    15DE : 4E75                		rts
(1)  306/    15E0 :                     ; ----------------------------------------
(1)  307/    15E0 :                     ; Wait until beam reaches VBlank
(1)  308/    15E0 :                     ; ----------------------------------------
(1)  309/    15E0 :                     
(1)  310/    15E0 : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/    15E2 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/    15E8 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/    15EC : 67F2                		beq.s	.wait_vblank
(1)  314/    15EE : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/    15F0 : 6000 EEF6           		bra	Video_Render			; Render VDP Visuals
(1)  316/    15F4 :                     
(1)  317/    15F4 :                     ; ====================================================================
(1)  318/    15F4 :                     ; --------------------------------------------------------
(1)  319/    15F4 :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/    15F4 :                     ; from ROM or RAM
(1)  321/    15F4 :                     ;
(1)  322/    15F4 :                     ; Call these labels BEFORE and AFTER your
(1)  323/    15F4 :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/    15F4 :                     ; FILL or COPY.
(1)  325/    15F4 :                     ;
(1)  326/    15F4 :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/    15F4 :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/    15F4 :                     ; GONNA USE TO STACK.
(1)  329/    15F4 :                     ; --------------------------------------------------------
(1)  330/    15F4 :                     
(1)  331/    15F4 :                     ; --------------------------------------------------------
(1)  332/    15F4 :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/    15F4 :                     System_DmaEnter_ROM:
(1)  334/    15F4 : 6138                		bsr	System_DmaEnter_RAM
(1)  342/    15F6 : 4E75                		rts
(1)  343/    15F8 :                     
(1)  344/    15F8 :                     System_DmaExit_ROM:
(1)  352/    15F8 : 6038                		bra	System_DmaExit_RAM
(1)  353/    15FA :                     
(1)  354/    15FA :                     ; ------------------------------------------------
(1)  355/    15FA :                     
(1)  356/    15FA :                     sys_MarsSlvCmd:
(1)  357/    15FA : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/    1600 : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/    1602 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/    1608 : 8E06                		or.b	d6,d7
(1)  361/    160A : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/    160E : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/    1614 : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
             161A : 5103             
(1)  364/    161C : 4E71                		nop
(1)  365/    161E : 4E71                		nop
(1)  366/    1620 :                     .wait_exit:
(1)  367/    1620 : 4E71                		nop
(1)  368/    1622 : 4E71                		nop
(1)  369/    1624 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/    162A : 66F4                		bne.s	.wait_exit
(1)  371/    162C : 4E75                		rts
(1)  372/    162E :                     
(1)  373/    162E :                     ; --------------------------------------------------------
(1)  374/    162E :                     ; *** EXTERNAL JUMPS ***
(1)  375/    162E :                     ; --------------------------------------------------------
(1)  376/    162E :                     
(1)  377/    162E :                     System_DmaEnter_RAM:
(1)  378/    162E : 6000 ED14           		bra	gemaDmaPause
(1)  379/    1632 :                     System_DmaExit_RAM:
(1)  380/    1632 : 6000 ED12           		bra	gemaDmaResume
(1)  381/    1636 :                     
(1)  382/    1636 :                     ; ====================================================================
(1)  383/    1636 :                     ; --------------------------------------------------------
(1)  384/    1636 :                     ; Update sound/sycronize with the Z80
(1)  385/    1636 :                     ; --------------------------------------------------------
(1)  386/    1636 :                     
(1)  387/    1636 :                     Sound_Update:
(1)  388/    1636 : 6000 EC58           		bra	gemaSendRam
(1)  389/    163A :                     
(1)  390/    163A :                     ; ====================================================================
(1)  391/    163A :                     ; --------------------------------------------------------
(1)  392/    163A :                     ; Init sound driver
(1)  393/    163A :                     ; --------------------------------------------------------
(1)  394/    163A :                     
(1)  395/    163A :                     Sound_Init:
(1)  396/    163A : 6000 EC3C           		bra	gemaInit
(1)  397/    163E :                     
(1)  398/    163E :                     ; ====================================================================
(1)  399/    163E :                     ; --------------------------------------------------------
(1)  400/    163E :                     ; System_Input
(1)  401/    163E :                     ;
(1)  402/    163E :                     ; Reads data from the Controller ports
(1)  403/    163E :                     ;
(1)  404/    163E :                     ; Call this during VBlank only once per frame,
(1)  405/    163E :                     ; System_Render already calls this.
(1)  406/    163E :                     ;
(1)  407/    163E :                     ; Uses:
(1)  408/    163E :                     ; d5-d7,a5-a6
(1)  409/    163E :                     ; --------------------------------------------------------
(1)  410/    163E :                     
(1)  411/    163E :                     ; ----------------------------------------
(1)  412/    163E :                     ; PICO input is hard-coded to
(1)  413/    163E :                     ; Controller_1
(1)  414/    163E :                     ;
(1)  415/    163E :                     ; on_hold/on_press:
(1)  416/    163E :                     ; %P00BRLDU
(1)  417/    163E :                     ; UDLR - Arrows
(1)  418/    163E :                     ;    B - BIG button red (JoyB)
(1)  419/    163E :                     ;    P - Pen press/click (JoyStart)
(1)  420/    163E :                     ;
(1)  421/    163E :                     ; mouse_x/mouse_y:
(1)  422/    163E :                     ; Pen X/Y position
(1)  423/    163E :                     ; ----------------------------------------
(1)  424/    163E :                     
(1)  425/    163E :                     System_Input:
(1)  427/    163E : 4DF8 D8F8           		lea	(RAM_InputData).w,a6
(1)  428/    1642 : 4BF9 0080 0003      		lea	($800003).l,a5
(1)  429/    1648 : 7E00                		moveq	#0,d7
(1)  430/    164A : 1E15                		move.b	(a5),d7			; $800003: %P00BRLDU
(1)  431/    164C : 0A47 00FF           		eori.w	#$FF,d7
(1)  432/    1650 : 3C07                		move.w	d7,d6
(1)  433/    1652 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  434/    1656 : BB47                		eor.w	d5,d7
(1)  435/    1658 : CE45                		and.w	d5,d7
(1)  436/    165A : 3D47 0006           		move.w	d7,on_release(a6)
(1)  437/    165E : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  438/    1662 : 0A45 00FF           		eori.w	#$FF,d5
(1)  439/    1666 : CA46                		and.w	d6,d5
(1)  440/    1668 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  441/    166C : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  442/    1670 : 1E2D 0002           		move.b	2(a5),d7
(1)  443/    1674 : E14F                		lsl.w	#8,d7
(1)  444/    1676 : 1E2D 0004           		move.b	4(a5),d7
(1)  445/    167A : 9E7C 003C           		sub.w	#$3C,d7
(1)  446/    167E : 6A02                		bpl.s	.x_valid	 	; Failsafe negative X
(1)  447/    1680 : 4247                		clr.w	d7
(1)  448/    1682 :                     .x_valid:
(1)  449/    1682 : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  450/    1686 :                     	; $0000-$00EF - Tablet
(1)  451/    1686 :                     	; $0100-$01EF - Storyware
(1)  452/    1686 : 7E00                		moveq	#0,d7
(1)  453/    1688 : 1C2D 0006           		move.b	6(a5),d6
(1)  454/    168C : E14E                		lsl.w	#8,d6
(1)  455/    168E : 1C2D 0008           		move.b	8(a5),d6
(1)  456/    1692 : 0446 01FC           		subi.w	#$1FC,d6
(1)  457/    1696 : 6B02                		bmi.s	.bad_y
(1)  458/    1698 : 3E06                		move.w	d6,d7
(1)  459/    169A :                     .bad_y:
(1)  460/    169A : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  461/    169E : 1C2D 000A           		move.b	10(a5),d6
(1)  462/    16A2 : 7E00                		moveq	#0,d7
(1)  463/    16A4 : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  464/    16A6 :                     .page_it:
(1)  465/    16A6 : E24E                		lsr.w	#1,d6
(1)  466/    16A8 : 6402                		bcc.s	.no_bit
(1)  467/    16AA : 5247                		addq.w	#1,d7
(1)  468/    16AC :                     .no_bit:
(1)  469/    16AC : 51CD FFF8           		dbf	d5,.page_it
(1)  470/    16B0 : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  683/    16B4 :                     
(1)  684/    16B4 :                     ; ============================================================
(1)  685/    16B4 :                     ; --------------------------------------------------------
(1)  686/    16B4 :                     ; System_SramInit
(1)  687/    16B4 :                     ;
(1)  688/    16B4 :                     ; Enable SRAM/BRAM support
(1)  689/    16B4 :                     ;
(1)  690/    16B4 :                     ; Input:
(1)  691/    16B4 :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/    16B4 :                     ;      dc.b "SAVE_NAME__",0
(1)  693/    16B4 :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/    16B4 :                     ;                            ; protection)
(1)  695/    16B4 :                     ;      dc.w flags:
(1)  696/    16B4 :                     ;            0 | Normal
(1)  697/    16B4 :                     ;           -1 | Save protection
(1)  698/    16B4 :                     ;
(1)  699/    16B4 :                     ;
(1)  700/    16B4 :                     ; Notes:
(1)  701/    16B4 :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/    16B4 :                     ;   your changes, then call System_SramSave to
(1)  703/    16B4 :                     ;   save it into SRAM/BRAM.
(1)  704/    16B4 :                     ;
(1)  705/    16B4 :                     ; CD/CD32X ONLY:
(1)  706/    16B4 :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/    16B4 :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/    16B4 :                     ;   OVERWRITE without warning any other save.
(1)  709/    16B4 :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/    16B4 :                     ;   PCM samples
(1)  711/    16B4 :                     ; --------------------------------------------------------
(1)  712/    16B4 :                     
(1)  713/    16B4 :                     System_SramInit:
(1)  715/    16B4 : 4E71                		nop						; Pico can't use save data
(1)  782/    16B6 :                     .cant_use:
(1)  783/    16B6 : 6006                		bra	System_SramLoad
(1)  784/    16B8 :                     .already_set:
(1)  785/    16B8 : 4E75                		rts
(1)  786/    16BA :                     
(1)  787/    16BA :                     ; --------------------------------------------------------
(1)  788/    16BA :                     ; System_SramSave
(1)  789/    16BA :                     ;
(1)  790/    16BA :                     ; Returns:
(1)  791/    16BA :                     ; bcc | Save OK
(1)  792/    16BA :                     ; bcs | Save failed
(1)  793/    16BA :                     ; --------------------------------------------------------
(1)  794/    16BA :                     
(1)  795/    16BA :                     System_SramSave:
(1)  797/    16BA : 4E71                		nop			; Pico can't use save data
(1)  861/    16BC : 4E75                		rts
(1)  862/    16BE :                     
(1)  863/    16BE :                     ; --------------------------------------------------------
(1)  864/    16BE :                     ; System_SramLoad
(1)  865/    16BE :                     ;
(1)  866/    16BE :                     ; Returns:
(1)  867/    16BE :                     ; bcc | Save OK
(1)  868/    16BE :                     ; bcs | Save not found
(1)  869/    16BE :                     ; --------------------------------------------------------
(1)  870/    16BE :                     
(1)  871/    16BE :                     System_SramLoad:
(1)  873/    16BE : 4E71                		nop			; Pico can't use save data
(1)  934/    16C0 : 4E75                		rts
(1)  935/    16C2 :                     
(1)  936/    16C2 :                     ; ============================================================
(1)  937/    16C2 :                     ; --------------------------------------------------------
(1)  938/    16C2 :                     ; System_Default
(1)  939/    16C2 :                     ;
(1)  940/    16C2 :                     ; Initializes current screen mode
(1)  941/    16C2 :                     ;
(1)  942/    16C2 :                     ; Uses:
(1)  943/    16C2 :                     ; ALL
(1)  944/    16C2 :                     ; --------------------------------------------------------
(1)  945/    16C2 :                     
(1)  946/    16C2 :                     System_Default:
(1)  947/    16C2 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/    16C6 : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/    16CA : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/    16CE : 7C00                		moveq	#0,d6
(1)  951/    16D0 :                     .clr_loop:
(1)  952/    16D0 : 1CC6                		move.b	d6,(a6)+
(1)  953/    16D2 : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/    16D6 : 6100 F10E           		bsr	Video_Clear
(1)  955/    16DA : 6100 EDBE           		bsr	Video_Default
(1)  956/    16DE : 6000 02E6           		bra	Object_Init			; Reset all objects
(1)  957/    16E2 :                     
(1)  958/    16E2 :                     ; ====================================================================
(1)  959/    16E2 :                     ; ----------------------------------------------------------------
(1)  960/    16E2 :                     ; Default interrupts
(1)  961/    16E2 :                     ; ----------------------------------------------------------------
(1)  962/    16E2 :                     
(1)  963/    16E2 :                     ; --------------------------------------------------------
(1)  964/    16E2 :                     ; VBlank
(1)  965/    16E2 :                     ; --------------------------------------------------------
(1)  966/    16E2 :                     
(1)  967/    16E2 :                     VInt_Default:
(1)  968/    16E2 :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/    16E2 :                     ; 		bsr	System_Input
(1)  970/    16E2 :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/    16E2 :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/    16E2 : 4E73                		rte
(1)  973/    16E4 :                     
(1)  974/    16E4 :                     ; --------------------------------------------------------
(1)  975/    16E4 :                     ; HBlank
(1)  976/    16E4 :                     ; --------------------------------------------------------
(1)  977/    16E4 :                     
(1)  978/    16E4 :                     HInt_Default:
(1)  979/    16E4 : 4E73                		rte
(1)  980/    16E6 :                     
(1)  981/    16E6 :                     ; --------------------------------------------------------
(1)  982/    16E6 :                     ; External interrupt
(1)  983/    16E6 :                     ; --------------------------------------------------------
(1)  984/    16E6 :                     
(1)  985/    16E6 :                     ExtInt_Default:
(1)  986/    16E6 : 4E73                		rte
(1)  987/    16E8 :                     
(1)  988/    16E8 :                     ; ====================================================================
(1)  989/    16E8 :                     ; ------------------------------------------------------------
(1)  990/    16E8 :                     ; Subroutines
(1)  991/    16E8 :                     ; ------------------------------------------------------------
(1)  992/    16E8 :                     
(1)  993/    16E8 :                     ; --------------------------------------------------------
(1)  994/    16E8 :                     ; System_Random, System_Random_Seed
(1)  995/    16E8 :                     ;
(1)  996/    16E8 :                     ; Generate random value
(1)  997/    16E8 :                     ;
(1)  998/    16E8 :                     ; Input:
(1)  999/    16E8 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/    16E8 :                     ;
(1) 1001/    16E8 :                     ; Returns:
(1) 1002/    16E8 :                     ; d0.l | Result value
(1) 1003/    16E8 :                     ; --------------------------------------------------------
(1) 1004/    16E8 :                     
(1) 1005/    16E8 :                     System_Random_Seed:
(1) 1006/    16E8 : 2F04                		move.l	d4,-(sp)
(1) 1007/    16EA : 2800                		move.l	d0,d4
(1) 1008/    16EC : 6114                		bsr	sysRnd_MkValue
(1) 1009/    16EE : 281F                		move.l	(sp)+,d4
(1) 1010/    16F0 : 4E75                		rts
(1) 1011/    16F2 :                     System_Random:
(1) 1012/    16F2 : 2F04                		move.l	d4,-(sp)
(1) 1013/    16F4 : 2838 E97C           		move.l	(RAM_SysRandom).w,d4
(1) 1014/    16F8 : 6108                		bsr	sysRnd_MkValue
(1) 1015/    16FA : 21C4 E97C           		move.l	d4,(RAM_SysRandom).w
(1) 1016/    16FE : 281F                		move.l	(sp)+,d4
(1) 1017/    1700 : 4E75                		rts
(1) 1018/    1702 :                     sysRnd_MkValue:
(1) 1019/    1702 : 4A84                		tst.l	d4
(1) 1020/    1704 : 660E                		bne.s	.has_seed
(1) 1021/    1706 : 2838 D7DC           		move.l	(RAM_FrameCount).w,d4
(1) 1022/    170A : E1BC                		rol.l	d0,d4
(1) 1023/    170C : E2BC                		ror.l	d1,d4
(1) 1024/    170E : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/    1714 :                     .has_seed:
(1) 1026/    1714 : 2004                		move.l	d4,d0
(1) 1027/    1716 : E484                		asr.l	#2,d4
(1) 1028/    1718 : D880                		add.l	d0,d4
(1) 1029/    171A : E79C                		rol.l	#3,d4
(1) 1030/    171C : D880                		add.l	d0,d4
(1) 1031/    171E : 3004                		move.w	d4,d0
(1) 1032/    1720 : 4844                		swap	d4
(1) 1033/    1722 : D044                		add.w	d4,d0
(1) 1034/    1724 : 3800                		move.w	d0,d4
(1) 1035/    1726 : E0BC                		ror.l	d0,d4
(1) 1036/    1728 : 4844                		swap	d4
(1) 1037/    172A : 4E75                		rts
(1) 1038/    172C :                     
(1) 1039/    172C :                     ; --------------------------------------------------------
(1) 1040/    172C :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/    172C :                     ;
(1) 1042/    172C :                     ; Pick a random number using a maximum value,
(1) 1043/    172C :                     ; uses System_Random
(1) 1044/    172C :                     ;
(1) 1045/    172C :                     ; Input:
(1) 1046/    172C :                     ; d0.l | Maximum number to use + 1
(1) 1047/    172C :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/    172C :                     ;
(1) 1049/    172C :                     ; Returns:
(1) 1050/    172C :                     ; d0.w | Output value
(1) 1051/    172C :                     ; --------------------------------------------------------
(1) 1052/    172C :                     
(1) 1053/    172C :                     System_DiceRoll_Seed:
(1) 1054/    172C : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/    1730 : 2A00                		move.l	d0,d5
(1) 1056/    1732 : 2801                		move.l	d1,d4
(1) 1057/    1734 : 61B2                		bsr	System_Random_Seed
(1) 1058/    1736 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/    173C : C0C5                		mulu.w	d5,d0
(1) 1060/    173E : 4840                		swap	d0
(1) 1061/    1740 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/    1746 : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/    174A : 4E75                		rts
(1) 1064/    174C :                     
(1) 1065/    174C :                     System_DiceRoll:
(1) 1066/    174C : 2F04                		move.l	d4,-(sp)
(1) 1067/    174E : 2800                		move.l	d0,d4
(1) 1068/    1750 : 61A0                		bsr	System_Random
(1) 1069/    1752 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/    1758 : C0C4                		mulu.w	d4,d0
(1) 1071/    175A : 4840                		swap	d0
(1) 1072/    175C : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/    1762 : 281F                		move.l	(sp)+,d4
(1) 1074/    1764 : 4E75                		rts
(1) 1075/    1766 :                     
(1) 1076/    1766 :                     ; --------------------------------------------------------
(1) 1077/    1766 :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/    1766 :                     ;
(1) 1079/    1766 :                     ; Get Sine or Cosine value
(1) 1080/    1766 :                     ;
(1) 1081/    1766 :                     ; Input:
(1) 1082/    1766 :                     ; d0.w | Tan value: 0-511
(1) 1083/    1766 :                     ;
(1) 1084/    1766 :                     ; Returns:
(1) 1085/    1766 :                     ; d1.w | Result
(1) 1086/    1766 :                     ; --------------------------------------------------------
(1) 1087/    1766 :                     
(1) 1088/    1766 :                     System_SineWave_Cos:
(1) 1089/    1766 : 2F07                		move.l	d7,-(sp)
(1) 1090/    1768 : 3E00                		move.w	d0,d7
(1) 1091/    176A : 0647 0080           		addi.w  #$80,d7
(1) 1092/    176E : 6004                		bra	sys_SineWave
(1) 1093/    1770 :                     System_SineWave:
(1) 1094/    1770 : 2F07                		move.l	d7,-(sp)
(1) 1095/    1772 : 3E00                		move.w	d0,d7
(1) 1096/    1774 :                     sys_SineWave:
(1) 1097/    1774 : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/    1778 : 3207                		move.w	d7,d1
(1) 1099/    177A : 0807 0007           		btst	#7,d7
(1) 1100/    177E : 6702                		beq.s	.loc_7EFA
(1) 1101/    1780 : 4641                		not.w	d1
(1) 1102/    1782 :                     .loc_7EFA:
(1) 1103/    1782 : 0241 007F           		andi.w  #$7F,d1
(1) 1104/    1786 : D241                		add.w	d1,d1
(1) 1105/    1788 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/    178C : 0807 0008           		btst    #8,d7
(1) 1107/    1790 : 6702                		beq.s   .loc_7F0C
(1) 1108/    1792 : 4441                		neg.w   d1
(1) 1109/    1794 :                     .loc_7F0C:
(1) 1110/    1794 : 48C1                		ext.l	d1
(1) 1111/    1796 : 2E1F                		move.l (sp)+,d7
(1) 1112/    1798 : 4E75                		rts
(1) 1113/    179A :                     
(1) 1114/    179A :                     .sine_data:
(1) 1115/    179A :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/    189A :                     		align 2
(1) 1117/    189A :                     
(1) 1118/    189A :                     ; --------------------------------------------------------
(1) 1119/    189A :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/    189A :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/    189A :                     ;
(1) 1122/    189A :                     ; Increment/Decrement BCD value
(1) 1123/    189A :                     ; for Scores, Lives, and such.
(1) 1124/    189A :                     ;
(1) 1125/    189A :                     ; Input:
(1) 1126/    189A :                     ; d0.? | BCD value input
(1) 1127/    189A :                     ; d1.l | Increment/Decrement by
(1) 1128/    189A :                     ;
(1) 1129/    189A :                     ; Returns:
(1) 1130/    189A :                     ; d0.? | BCD value output
(1) 1131/    189A :                     ; --------------------------------------------------------
(1) 1132/    189A :                     
(1) 1133/    189A :                     ; TODO: An overflow check
(1) 1134/    189A :                     
(1) 1135/    189A :                     System_BCD_SubB:
(1) 1136/    189A : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/    18A0 : 6006                		bra.s	System_BCD_SubL
(1) 1138/    18A2 :                     System_BCD_SubW:
(1) 1139/    18A2 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/    18A8 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/    18A8 :                     System_BCD_SubL:
(1) 1142/    18A8 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/    18AC : 613C                		bsr	sysBCD_SpOut
(1) 1144/    18AE : 023C 0000           		and	#0,ccr
(1) 1145/    18B2 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/    18B4 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/    18B6 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/    18B8 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/    18BA : 2016                		move.l	(a6),d0
(1) 1150/    18BC : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/    18C0 : 4E75                		rts
(1) 1152/    18C2 :                     System_BCD_AddB:
(1) 1153/    18C2 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/    18C8 : 6006                		bra.s	System_BCD_AddL
(1) 1155/    18CA :                     System_BCD_AddW:
(1) 1156/    18CA : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/    18D0 :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/    18D0 :                     System_BCD_AddL:
(1) 1159/    18D0 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/    18D4 : 6114                		bsr	sysBCD_SpOut
(1) 1161/    18D6 : 023C 0000           		and	#0,ccr
(1) 1162/    18DA : CD0D                		abcd	-(a5),-(a6)
(1) 1163/    18DC : CD0D                		abcd	-(a5),-(a6)
(1) 1164/    18DE : CD0D                		abcd	-(a5),-(a6)
(1) 1165/    18E0 : CD0D                		abcd	-(a5),-(a6)
(1) 1166/    18E2 : 2016                		move.l	(a6),d0
(1) 1167/    18E4 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/    18E8 : 4E75                		rts
(1) 1169/    18EA :                     sysBCD_SpOut:
(1) 1170/    18EA : 598F                		subq.l	#4,sp
(1) 1171/    18EC : 2C4F                		move.l	sp,a6
(1) 1172/    18EE : 598F                		subq.l	#4,sp
(1) 1173/    18F0 : 2A4F                		move.l	sp,a5
(1) 1174/    18F2 : 2C80                		move.l	d0,(a6)
(1) 1175/    18F4 : 2A81                		move.l	d1,(a5)
(1) 1176/    18F6 : DCFC 0004           		adda	#4,a6
(1) 1177/    18FA : DAFC 0004           		adda	#4,a5
(1) 1178/    18FE : 508F                		addq.l	#8,sp
(1) 1179/    1900 : 4E75                		rts
(1) 1180/    1902 :                     
(1) 1181/    1902 :                     ; --------------------------------------------------------
(1) 1182/    1902 :                     ; System_SetIntJumps
(1) 1183/    1902 :                     ;
(1) 1184/    1902 :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/    1902 :                     ; generated by VDP
(1) 1186/    1902 :                     ;
(1) 1187/    1902 :                     ; Input:
(1) 1188/    1902 :                     ; d0.l | New VBlank location
(1) 1189/    1902 :                     ; d1.l | New HBlank location
(1) 1190/    1902 :                     ; d2.l | New External location
(1) 1191/    1902 :                     ;
(1) 1192/    1902 :                     ; Notes:
(1) 1193/    1902 :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/    1902 :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/    1902 :                     ; --------------------------------------------------------
(1) 1196/    1902 :                     
(1) 1197/    1902 :                     System_SetIntJumps:
(1) 1198/    1902 : 4A80                		tst.l	d0
(1) 1199/    1904 : 6704                		beq.s	.no_vint
(1) 1203/    1906 : 21C0 E982            		move.l	d0,(RAM_VBlankJump+2).w
(1) 1205/    190A :                     .no_vint:
(1) 1206/    190A : 4A81                		tst.l	d1
(1) 1207/    190C : 6704                		beq.s	.no_hint
(1) 1211/    190E : 21C1 E988            		move.l	d1,(RAM_HBlankJump+2).w
(1) 1213/    1912 :                     .no_hint:
(1) 1214/    1912 : 4A82                		tst.l	d2
(1) 1215/    1914 : 6704                		beq.s	.no_exint
(1) 1219/    1916 : 21C2 E98E            		move.l	d2,(RAM_ExternalJump+2).w
(1) 1221/    191A :                     .no_exint:
(1) 1222/    191A : 4E75                		rts
(1) 1223/    191C :                     
(1) 1224/    191C :                     ; ====================================================================
(1) 1225/    191C :                     ; ----------------------------------------------------------------
(1) 1226/    191C :                     ; SEGA CD / CD32X ONLY
(1) 1227/    191C :                     ; ----------------------------------------------------------------
(1) 1228/    191C :                     
(1) 1229/    191C :                     ; --------------------------------------------------------
(1) 1230/    191C :                     ; System_MdMcd_Interrupt
(1) 1231/    191C :                     ;
(1) 1232/    191C :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/    191C :                     ; VBlank.
(1) 1234/    191C :                     ; --------------------------------------------------------
(1) 1235/    191C :                     
(1) 1236/    191C :                     System_MdMcd_Interrupt:
(1) 1237/    191C : 2F07                		move.l	d7,-(sp)
(1) 1238/    191E :                     ; .wait_first:
(1) 1239/    191E :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/    191E :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/    191E :                     ; 		andi.w	#$C0,d7
(1) 1242/    191E :                     ; 		cmpi.w	#$C0,d7
(1) 1243/    191E :                     ; 		beq.s	.wait_first
(1) 1244/    191E :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/    191E : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
             1924 : 2000             
(1) 1246/    1926 : 2E1F                		move.l	(sp)+,d7
(1) 1247/    1928 : 4E75                		rts
(1) 1248/    192A :                     
(1) 1249/    192A :                     ; --------------------------------------------------------
(1) 1250/    192A :                     ; System_MdMcd_SubWait
(1) 1251/    192A :                     ;
(1) 1252/    192A :                     ; Waits until Sub-CPU finishes.
(1) 1253/    192A :                     ;
(1) 1254/    192A :                     ; Uses:
(1) 1255/    192A :                     ; d7
(1) 1256/    192A :                     ; --------------------------------------------------------
(1) 1257/    192A :                     
(1) 1258/    192A :                     System_MdMcd_SubWait:
(1) 1263/    192A : 4E75                		rts
(1) 1264/    192C :                     
(1) 1265/    192C :                     ; --------------------------------------------------------
(1) 1266/    192C :                     ; System_MdMcd_SubEnter
(1) 1267/    192C :                     ;
(1) 1268/    192C :                     ; Waits until Sub-CPU starts.
(1) 1269/    192C :                     ;
(1) 1270/    192C :                     ; Uses:
(1) 1271/    192C :                     ; d7
(1) 1272/    192C :                     ; --------------------------------------------------------
(1) 1273/    192C :                     
(1) 1274/    192C :                     System_MdMcd_SubEnter:
(1) 1279/    192C : 4E75                		rts
(1) 1280/    192E :                     
(1) 1281/    192E :                     ; --------------------------------------------------------
(1) 1282/    192E :                     ; System_MdMcd_SubTask
(1) 1283/    192E :                     ;
(1) 1284/    192E :                     ; Request task to Sub-CPU
(1) 1285/    192E :                     ;
(1) 1286/    192E :                     ; Input:
(1) 1287/    192E :                     ; d0.b | Task number
(1) 1288/    192E :                     ;
(1) 1289/    192E :                     ; Uses:
(1) 1290/    192E :                     ; d7/a6
(1) 1291/    192E :                     ;
(1) 1292/    192E :                     ; Notes:
(1) 1293/    192E :                     ; This exits without waiting SUB to finish,
(1) 1294/    192E :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/    192E :                     ; --------------------------------------------------------
(1) 1296/    192E :                     
(1) 1297/    192E :                     System_MdMcd_SubTask:
(1) 1322/    192E : 4E75                		rts
(1) 1323/    1930 :                     
(1) 1324/    1930 :                     ; --------------------------------------------------------
(1) 1325/    1930 :                     ; System_MdMcd_WaitWRAM
(1) 1326/    1930 :                     ;
(1) 1327/    1930 :                     ; Wait for Word-RAM permission.
(1) 1328/    1930 :                     ; --------------------------------------------------------
(1) 1329/    1930 :                     
(1) 1330/    1930 :                     System_MdMcd_WaitWRAM:
(1) 1331/    1930 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             1936 : 2003             
(1) 1332/    1938 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/    193A : 4E75                		rts
(1) 1334/    193C :                     
(1) 1335/    193C :                     ; --------------------------------------------------------
(1) 1336/    193C :                     ; System_MdMcd_CheckWRAM
(1) 1337/    193C :                     ;
(1) 1338/    193C :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/    193C :                     ;
(1) 1340/    193C :                     ; Returns:
(1) 1341/    193C :                     ; beq | Word-RAM is available
(1) 1342/    193C :                     ; bne | Word-RAM is locked
(1) 1343/    193C :                     ; --------------------------------------------------------
(1) 1344/    193C :                     
(1) 1345/    193C :                     System_MdMcd_CheckWRAM:
(1) 1346/    193C : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             1942 : 2003             
(1) 1347/    1944 : 6706                		beq.s	.no_ret
(1) 1348/    1946 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/    194A : 4E75                		rts
(1) 1350/    194C :                     .no_ret:
(1) 1351/    194C : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/    1950 : 4E75                		rts
(1) 1353/    1952 :                     
(1) 1354/    1952 :                     ; --------------------------------------------------------
(1) 1355/    1952 :                     ; System_MdMcd_GiveWRAM
(1) 1356/    1952 :                     ;
(1) 1357/    1952 :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/    1952 :                     ; --------------------------------------------------------
(1) 1359/    1952 :                     
(1) 1360/    1952 :                     System_MdMcd_GiveWRAM:
(1) 1361/    1952 : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
             1958 : 2003             
(1) 1362/    195A : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/    195C : 4E75                		rts
(1) 1364/    195E :                     
(1) 1365/    195E :                     ; --------------------------------------------------------
(1) 1366/    195E :                     ; System_MdMcd_ReadFileRAM
(1) 1367/    195E :                     ;
(1) 1368/    195E :                     ; Read file from disc and transfer output the
(1) 1369/    195E :                     ; data to a1, uses communication ports.
(1) 1370/    195E :                     ;
(1) 1371/    195E :                     ; Input:
(1) 1372/    195E :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/    195E :                     ; a1   | Output location in RAM
(1) 1374/    195E :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/    195E :                     ;
(1) 1376/    195E :                     ; Uses:
(1) 1377/    195E :                     ; d7,a0-a1,a5-a6
(1) 1378/    195E :                     ;
(1) 1379/    195E :                     ; Notes:
(1) 1380/    195E :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/    195E :                     ; --------------------------------------------------------
(1) 1382/    195E :                     
(1) 1383/    195E :                     System_MdMcd_RdFile_RAM:
(1) 1433/    195E : 4E75                		rts
(1) 1434/    1960 :                     
(1) 1435/    1960 :                     ; --------------------------------------------------------
(1) 1436/    1960 :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/    1960 :                     ;
(1) 1438/    1960 :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/    1960 :                     ; waits on finish.
(1) 1440/    1960 :                     ;
(1) 1441/    1960 :                     ; Input:
(1) 1442/    1960 :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/    1960 :                     ; a1   | Output location
(1) 1444/    1960 :                     ;
(1) 1445/    1960 :                     ; Notes:
(1) 1446/    1960 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/    1960 :                     ; --------------------------------------------------------
(1) 1448/    1960 :                     
(1) 1449/    1960 :                     System_MdMcd_RdFile_WRAM:
(1) 1473/    1960 : 4E75                		rts
(1) 1474/    1962 :                     
(1) 1475/    1962 :                     ; --------------------------------------------------------
(1) 1476/    1962 :                     ; System_MdMcd_CheckHome
(1) 1477/    1962 :                     ;
(1) 1478/    1962 :                     ; Checks if the player is holding A, B, C and
(1) 1479/    1962 :                     ; then presses the START button.
(1) 1480/    1962 :                     ;
(1) 1481/    1962 :                     ; Returns:
(1) 1482/    1962 :                     ; bcc | Combo input not pressed
(1) 1483/    1962 :                     ; bcs | User did the combo presses
(1) 1484/    1962 :                     ;
(1) 1485/    1962 :                     ; Notes:
(1) 1486/    1962 :                     ; If you call this from your Title Screen, carry
(1) 1487/    1962 :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/    1962 :                     ; for other modes change your Screen number to the
(1) 1489/    1962 :                     ; Title Screen and return.
(1) 1490/    1962 :                     ; --------------------------------------------------------
(1) 1491/    1962 :                     
(1) 1492/    1962 :                     System_MdMcd_CheckHome:
(1) 1493/    1962 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/    1966 : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(1) 1495/    196A : 3C38 D8FA           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/    196E : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/    1972 : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/    1976 : 6610                		bne.s	.not_press
(1) 1499/    1978 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/    197C : 670A                		beq.s	.not_press
(1) 1501/    197E : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/    1982 : 003C 0001           		or	#1,ccr
(1) 1503/    1986 : 4E75                		rts
(1) 1504/    1988 :                     .not_press:
(1) 1505/    1988 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/    198C : 023C 001E           		and	#%11110,ccr
(1) 1507/    1990 : 4E75                		rts
(1) 1508/    1992 :                     
(1) 1509/    1992 :                     ; --------------------------------------------------------
(1) 1510/    1992 :                     ; System_MdMcd_ExitShell
(1) 1511/    1992 :                     ;
(1) 1512/    1992 :                     ; Exits the entire program and goes to
(1) 1513/    1992 :                     ; the BIOS/Shell.
(1) 1514/    1992 :                     ;
(1) 1515/    1992 :                     ; *** JUMP ONLY ***
(1) 1516/    1992 :                     ; --------------------------------------------------------
(1) 1517/    1992 :                     
(1) 1518/    1992 :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/    1992 :                     ; jmp $0284: Entry point
(1) 1520/    1992 :                     ; jmp $0288: CD player
(1) 1521/    1992 :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/    1992 :                     
(1) 1523/    1992 :                     System_MdMcd_ExitShell:
(1) 1532/    1992 : 4E75                		rts
(1) 1534/    1994 :                     
(1) 1535/    1994 :                     ; ------------------------------------------------------------
(1) 1536/    1994 :                     ; CDDA PLAYBACK
(1) 1537/    1994 :                     ; ------------------------------------------------------------
(1) 1538/    1994 :                     
(1) 1539/    1994 :                     ; --------------------------------------------------------
(1) 1540/    1994 :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/    1994 :                     ;
(1) 1542/    1994 :                     ; Play CDDA track, normal or looped.
(1) 1543/    1994 :                     ;
(1) 1544/    1994 :                     ; Input:
(1) 1545/    1994 :                     ; d0.w | CD track number
(1) 1546/    1994 :                     ;
(1) 1547/    1994 :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/    1994 :                     ; and $11 for looped
(1) 1549/    1994 :                     ;
(1) 1550/    1994 :                     ; Uses:
(1) 1551/    1994 :                     ; d4
(1) 1552/    1994 :                     ;
(1) 1553/    1994 :                     ; Notes:
(1) 1554/    1994 :                     ; Tracks $00, $01 and any negative values are
(1) 1555/    1994 :                     ; ignored.
(1) 1556/    1994 :                     ; --------------------------------------------------------
(1) 1557/    1994 :                     
(1) 1558/    1994 :                     System_MdMcd_CddaPlay:
(1) 1559/    1994 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/    1998 : 383C 0010           		move.w	#$0010,d4
(1) 1561/    199C : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/    199E :                     System_MdMcd_CddaPlayL:
(1) 1563/    199E : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/    19A2 : 383C 0011           		move.w	#$0011,d4
(1) 1565/    19A6 :                     sysMdMcd_SetCdda:
(1) 1577/    19A6 : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/    19AA : 4E75                		rts
(1) 1579/    19AC :                     
(1) 1580/    19AC :                     ; --------------------------------------------------------
(1) 1581/    19AC :                     ; System_MdMcd_CdStop
(1) 1582/    19AC :                     ;
(1) 1583/    19AC :                     ; Stop CDDA track
(1) 1584/    19AC :                     ; --------------------------------------------------------
(1) 1585/    19AC :                     
(1) 1586/    19AC :                     System_MdMcd_CddaStop:
(1) 1593/    19AC : 4E75                		rts
(1) 1594/    19AE :                     
(1) 1595/    19AE :                     ; --------------------------------------------------------
(1) 1596/    19AE :                     ; System_MdMcd_CdFade
(1) 1597/    19AE :                     ;
(1) 1598/    19AE :                     ; Fade the CDDA Volume
(1) 1599/    19AE :                     ;
(1) 1600/    19AE :                     ; Input:
(1) 1601/    19AE :                     ; d0.w | Target volume:
(1) 1602/    19AE :                     ;        $000-$400 - Min to Max
(1) 1603/    19AE :                     ; d1.w | Fading speed:
(1) 1604/    19AE :                     ;        $001-$200 - Slow to Fast
(1) 1605/    19AE :                     ;             $400 - Set quick
(1) 1606/    19AE :                     ;
(1) 1607/    19AE :                     ; This calls Sub-Task $16
(1) 1608/    19AE :                     ; --------------------------------------------------------
(1) 1609/    19AE :                     
(1) 1610/    19AE :                     System_MdMcd_CddaFade:
(1) 1619/    19AE : 4E75                		rts
(1) 1620/    19B0 :                     
(1) 1621/    19B0 :                     ; --------------------------------------------------------
(1) 1622/    19B0 :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/    19B0 :                     ; --------------------------------------------------------
(1) 1624/    19B0 :                     
(1) 1625/    19B0 :                     def_SaveInfo:
(1) 1629/    19B0 : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
             19B6 : 4344 5F5F 5F00    
(1) 1631/    19BC : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/    19BE : 0000                		dc.w 0
(1) 1633/    19C0 :                     		align 2
(1) 1634/    19C0 :                     
(1) 1635/    19C0 :                     ; ====================================================================
(1) 1636/    19C0 :                     ; ----------------------------------------------------------------
(1) 1637/    19C0 :                     ; 32X and CD32X ONLY
(1) 1638/    19C0 :                     ; ----------------------------------------------------------------
(1) 1639/    19C0 :                     
(1) 1640/    19C0 :                     ; --------------------------------------------------------
(1) 1641/    19C0 :                     ; System_MdMars_SendData
(1) 1642/    19C0 :                     ;
(1) 1643/    19C0 :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/    19C0 :                     ; using DREQ
(1) 1645/    19C0 :                     ;
(1) 1646/    19C0 :                     ; Input:
(1) 1647/    19C0 :                     ; a0   | Source data
(1) 1648/    19C0 :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/    19C0 :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/    19C0 :                     ;
(1) 1651/    19C0 :                     ; Returns:
(1) 1652/    19C0 :                     ; a1   | New output SDRAM location
(1) 1653/    19C0 :                     ;
(1) 1654/    19C0 :                     ; Uses:
(1) 1655/    19C0 :                     ; d0/a4-a5,d5-d7
(1) 1656/    19C0 :                     ;
(1) 1657/    19C0 :                     ; Notes:
(1) 1658/    19C0 :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/    19C0 :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/    19C0 :                     ; --------------------------------------------------------
(1) 1661/    19C0 :                     
(1) 1662/    19C0 :                     System_MdMars_SendData:
(1) 1687/    19C0 : 4E75                		rts
(1) 1688/    19C2 :                     
(1) 1689/    19C2 :                     ; ------------------------------------------------------------
(1) 1690/    19C2 :                     ; DREQ Genesis-to-32X code
(1) 1691/    19C2 :                     ; ------------------------------------------------------------
(1) 1692/    19C2 :                     
(1) 1763/    19C2 : 4E75                		rts
(1) 1764/    19C4 :                     
(1) 1765/    19C4 :                     ; ====================================================================
(1) 1766/    19C4 :                     ; ----------------------------------------------------------------
(1) 1767/    19C4 :                     ; SHARED for all
(1) 1768/    19C4 :                     ; ----------------------------------------------------------------
(1) 1769/    19C4 :                     
(1) 1770/    19C4 :                     ; --------------------------------------------------------
(1) 1771/    19C4 :                     ; System_SetDataBank
(1) 1772/    19C4 :                     ;
(1) 1773/    19C4 :                     ; Sets the data bank depending of the system
(1) 1774/    19C4 :                     ;
(1) 1775/    19C4 :                     ; Input:
(1) 1776/    19C4 :                     ; a0   | Pointer and filename:
(1) 1777/    19C4 :                     ;        dc.l bank_pointer
(1) 1778/    19C4 :                     ;        dc.b "FILENAME.BIN"
(1) 1779/    19C4 :                     ;
(1) 1780/    19C4 :                     ; Uses:
(1) 1781/    19C4 :                     ; a4-a5,d5-d7
(1) 1782/    19C4 :                     ;
(1) 1783/    19C4 :                     ; Notes:
(1) 1784/    19C4 :                     ; - ONLY call this if you have the opportunity to
(1) 1785/    19C4 :                     ;   do it.
(1) 1786/    19C4 :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/    19C4 :                     ;   to load from disc
(1) 1788/    19C4 :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/    19C4 :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/    19C4 :                     ; --------------------------------------------------------
(1) 1791/    19C4 :                     
(1) 1792/    19C4 :                     System_SetDataBank:
(1) 1809/    19C4 : 4E75                		rts
(1) 1810/    19C6 :                     
(1) 1811/    19C6 :                     ; ====================================================================
(1) 1812/    19C6 :                     ; ----------------------------------------------------------------
(1) 1813/    19C6 :                     ; Objects system
(1) 1814/    19C6 :                     ; ----------------------------------------------------------------
(1) 1815/    19C6 :                     
(1) 1816/    19C6 :                     ; --------------------------------------------------------
(1) 1817/    19C6 :                     ; Init/Clear Objects system
(1) 1818/    19C6 :                     ; --------------------------------------------------------
(1) 1819/    19C6 :                     
(1) 1820/    19C6 :                     Object_Init:
(1) 1821/    19C6 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1822/    19CA : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/    19CE :                     .clr:
(1) 1824/    19CE : 421E                		clr.b	(a6)+
(1) 1825/    19D0 : 51CF FFFC           		dbf	d7,.clr
(1) 1826/    19D4 : 4E75                		rts
(1) 1827/    19D6 :                     
(1) 1828/    19D6 :                     ; --------------------------------------------------------
(1) 1829/    19D6 :                     ; Process objects
(1) 1830/    19D6 :                     ;
(1) 1831/    19D6 :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/    19D6 :                     ; --------------------------------------------------------
(1) 1833/    19D6 :                     
(1) 1834/    19D6 :                     Object_Run:
(1) 1835/    19D6 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1836/    19DA : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/    19DE :                     .next_one:
(1) 1838/    19DE : 2C16                		move.l	obj_code(a6),d6
(1) 1839/    19E0 : 6708                		beq.s	.no_code	; Free slot
(1) 1840/    19E2 : 2F07                		move.l	d7,-(sp)
(1) 1841/    19E4 : 2A46                		move.l	d6,a5
(1) 1842/    19E6 : 4E95                		jsr	(a5)
(1) 1843/    19E8 : 2E1F                		move.l	(sp)+,d7
(1) 1844/    19EA :                     .no_code:
(1) 1845/    19EA : DCFC 0068           		adda	#obj_len,a6
(1) 1846/    19EE : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/    19F2 : 4E75                		rts
(1) 1848/    19F4 :                     
(1) 1849/    19F4 :                     ; --------------------------------------------------------
(1) 1850/    19F4 :                     ; Object_Set, Object_Make
(1) 1851/    19F4 :                     ;
(1) 1852/    19F4 :                     ; Set a new object into a specific slot.
(1) 1853/    19F4 :                     ;
(1) 1854/    19F4 :                     ; Input:
(1) 1855/    19F4 :                     ; d0.l | Object code pointer
(1) 1856/    19F4 :                     ;        If 0: DELETE the object including it's memory
(1) 1857/    19F4 :                     ; d1.b | Object sub-type (obj_subid)
(1) 1858/    19F4 :                     ; d2.w | Object slot
(1) 1859/    19F4 :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1860/    19F4 :                     ;
(1) 1861/    19F4 :                     ; Returns:
(1) 1862/    19F4 :                     ; bcc | Found free slot
(1) 1863/    19F4 :                     ; bcs | Ran-out of object slots
(1) 1864/    19F4 :                     ;
(1) 1865/    19F4 :                     ; Notes:
(1) 1866/    19F4 :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/    19F4 :                     ; but it will contain the remains of d2 when you
(1) 1868/    19F4 :                     ; called this.
(1) 1869/    19F4 :                     ; --------------------------------------------------------
(1) 1870/    19F4 :                     
(1) 1871/    19F4 :                     Object_Set:
(1) 1872/    19F4 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/    19F8 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1874/    19FC : 7E00                		moveq	#0,d7
(1) 1875/    19FE : 3E02                		move.w	d2,d7
(1) 1876/    1A00 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/    1A04 : DCC7                		adda	d7,a6
(1) 1878/    1A06 : 602C                		bra.s	objSet_Go
(1) 1879/    1A08 :                     
(1) 1880/    1A08 :                     Object_Make:
(1) 1881/    1A08 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/    1A0C : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1883/    1A10 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/    1A14 : 7C00                		moveq	#0,d6
(1) 1885/    1A16 :                     .search:
(1) 1886/    1A16 : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/    1A1A : 6C0E                		bge.s	objSet_Error
(1) 1888/    1A1C : 4A96                		tst.l	obj_code(a6)
(1) 1889/    1A1E : 6714                		beq.s	objSet_Go
(1) 1890/    1A20 : DCFC 0068           		adda	#obj_len,a6
(1) 1891/    1A24 : 5246                		addq.w	#1,d6
(1) 1892/    1A26 : 51CF FFEE           		dbf	d7,.search
(1) 1893/    1A2A :                     objSet_Error:
(1) 1894/    1A2A : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/    1A2E : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/    1A32 : 4E75                		rts
(1) 1897/    1A34 :                     
(1) 1898/    1A34 :                     objSet_Go:
(1) 1899/    1A34 : 4A80                		tst.l	d0
(1) 1900/    1A36 : 670A                		beq.s	.from_del
(1) 1901/    1A38 : 2E00                		move.l	d0,d7
(1) 1902/    1A3A : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/    1A3C : 1D41 001D           		move.b	d1,obj_subid(a6)
(1) 1904/    1A40 : 600C                		bra.s	.exit_this
(1) 1905/    1A42 :                     .from_del:
(1) 1906/    1A42 : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/    1A44 : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/    1A48 : 421D                .clr:		clr.b	(a5)+
(1) 1909/    1A4A : 51CF FFFC           		dbf	d7,.clr
(1) 1910/    1A4E :                     .exit_this:
(1) 1911/    1A4E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/    1A52 : 003C 0001           		or	#1,ccr
(1) 1913/    1A56 : 4E75                		rts
(1) 1914/    1A58 :                     
(1) 1915/    1A58 :                     ; ====================================================================
(1) 1916/    1A58 :                     ; --------------------------------------------------------
(1) 1917/    1A58 :                     ; Object subroutines
(1) 1918/    1A58 :                     ;
(1) 1919/    1A58 :                     ; These can ONLY be called on the current object's code
(1) 1920/    1A58 :                     ; --------------------------------------------------------
(1) 1921/    1A58 :                     
(1) 1922/    1A58 :                     ; --------------------------------------------------------
(1) 1923/    1A58 :                     ; object_ResetVars
(1) 1924/    1A58 :                     ;
(1) 1925/    1A58 :                     ; Resets the current object's memory, call this
(1) 1926/    1A58 :                     ; at very beginning of your object's init code
(1) 1927/    1A58 :                     ;
(1) 1928/    1A58 :                     ; Input:
(1) 1929/    1A58 :                     ; a6 | This object
(1) 1930/    1A58 :                     ; --------------------------------------------------------
(1) 1931/    1A58 :                     
(1) 1932/    1A58 :                     object_ResetVars:
(1) 1933/    1A58 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/    1A5C : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/    1A60 : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/    1A64 : 7E00                		moveq	#0,d7
(1) 1937/    1A66 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/    1A68 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/    1A6C : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/    1A70 : 4E75                		rts
(1) 1941/    1A72 :                     
(1) 1942/    1A72 :                     ; --------------------------------------------------------
(1) 1943/    1A72 :                     ; object_ResetAnim
(1) 1944/    1A72 :                     ;
(1) 1945/    1A72 :                     ; Reset animation variables, call this BEFORE using
(1) 1946/    1A72 :                     ; object_Animate.
(1) 1947/    1A72 :                     ;
(1) 1948/    1A72 :                     ; Input:
(1) 1949/    1A72 :                     ; a6 | This object
(1) 1950/    1A72 :                     ; --------------------------------------------------------
(1) 1951/    1A72 :                     
(1) 1952/    1A72 :                     object_ResetAnim:
(1) 1953/    1A72 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/    1A72 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/    1A72 : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/    1A78 : 4E75                		rts
(1) 1957/    1A7A :                     
(1) 1958/    1A7A :                     ; --------------------------------------------------------
(1) 1959/    1A7A :                     ; object_Speed
(1) 1960/    1A7A :                     ;
(1) 1961/    1A7A :                     ; Moves the object using speed values set on
(1) 1962/    1A7A :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/    1A7A :                     ;
(1) 1964/    1A7A :                     ; Input:
(1) 1965/    1A7A :                     ; a6 | This object
(1) 1966/    1A7A :                     ; --------------------------------------------------------
(1) 1967/    1A7A :                     
(1) 1968/    1A7A :                     object_Speed:
(1) 1969/    1A7A : 2F07                		move.l	d7,-(sp)
(1) 1970/    1A7C : 7E00                		moveq	#0,d7
(1) 1971/    1A7E : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/    1A82 : 48C7                		ext.l	d7
(1) 1973/    1A84 : E187                		asl.l	#8,d7
(1) 1974/    1A86 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/    1A8A : 7E00                		moveq	#0,d7
(1) 1976/    1A8C : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/    1A90 : 48C7                		ext.l	d7
(1) 1978/    1A92 : E187                		asl.l	#8,d7
(1) 1979/    1A94 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/    1A98 : 7E00                		moveq	#0,d7
(1) 1981/    1A9A : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/    1A9E : 48C7                		ext.l	d7
(1) 1983/    1AA0 : E187                		asl.l	#8,d7
(1) 1984/    1AA2 : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/    1AA6 : 2E1F                		move.l	(sp)+,d7
(1) 1986/    1AA8 : 4E75                		rts
(1) 1987/    1AAA :                     
(1) 1988/    1AAA :                     ; --------------------------------------------------------
(1) 1989/    1AAA :                     ; object_Animate
(1) 1990/    1AAA :                     ;
(1) 1991/    1AAA :                     ; Animates the sprite with a animation script,
(1) 1992/    1AAA :                     ; modifies obj_frame with the frame to use.
(1) 1993/    1AAA :                     ;
(1) 1994/    1AAA :                     ; Input:
(1) 1995/    1AAA :                     ; a6 | This object
(1) 1996/    1AAA :                     ; a0 | Animation data
(1) 1997/    1AAA :                     ; --------------------------------------------------------
(1) 1998/    1AAA :                     
(1) 1999/    1AAA :                     ; anim_data:
(1) 2000/    1AAA :                     ; 	dc.w .frame_1-anim_data
(1) 2001/    1AAA :                     ; 	dc.w .frame_2-anim_data
(1) 2002/    1AAA :                     ; 	;...
(1) 2003/    1AAA :                     ;
(1) 2004/    1AAA :                     ; .frame_num:
(1) 2005/    1AAA :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/    1AAA :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/    1AAA :                     ; 	dc.w command			; End-of-data command
(1) 2008/    1AAA :                     ;
(1) 2009/    1AAA :                     ; commands:
(1) 2010/    1AAA :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/    1AAA :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/    1AAA :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/    1AAA :                     
(1) 2014/    1AAA :                     object_Animate:
(1) 2015/    1AAA : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/    1AAE : 7E00                		moveq	#0,d7
(1) 2017/    1AB0 : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/    1AB4 : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/    1AB8 : 670E                 		beq.s	.sameThing
(1) 2020/    1ABA : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/    1AC0 : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/    1AC4 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/    1AC8 :                     .sameThing:
(1) 2024/    1AC8 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/    1ACC : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/    1AD0 : 6748                 		beq.s	.return
(1) 2027/    1AD2 : DE47                 		add.w	d7,d7
(1) 2028/    1AD4 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/    1AD8 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/    1ADC : 3E18                 		move.w	(a0)+,d7
(1) 2031/    1ADE : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/    1AE2 : 670C                 		beq.s	.keepspd
(1) 2033/    1AE4 : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/    1AEA : 6A2E                 		bpl.s	.return
(1) 2035/    1AEC : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/    1AF0 :                     .keepspd:
(1) 2037/    1AF0 : 7C00                 		moveq	#0,d6
(1) 2038/    1AF2 : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/    1AF6 : DE47                 		add.w	d7,d7
(1) 2040/    1AF8 : 3C10                 		move.w	(a0),d6
(1) 2041/    1AFA : D0C7                 		adda	d7,a0
(1) 2042/    1AFC : 3A10                 		move.w	(a0),d5
(1) 2043/    1AFE : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/    1B02 : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/    1B04 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/    1B08 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/    1B0A : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/    1B0E : 671A                 		beq.s	.goToFrame
(1) 2049/    1B10 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/    1B14 : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/    1B1A :                     .return:
(1) 2052/    1B1A : 601C                 		bra.s	.exit_anim
(1) 2053/    1B1C :                     .noAnim:
(1) 2054/    1B1C : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/    1B22 : 3A06                 		move.w	d6,d5
(1) 2056/    1B24 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/    1B28 : 600E                		bra.s	.exit_anim
(1) 2058/    1B2A :                     .goToFrame:
(1) 2059/    1B2A : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/    1B2E : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/    1B34 :                     .lastFrame:
(1) 2062/    1B34 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/    1B38 :                     .exit_anim:
(1) 2064/    1B38 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/    1B3C : 4E75                		rts
(1) 2066/    1B3E :                     
(1) 2067/    1B3E :                     ; --------------------------------------------------------
(1) 2068/    1B3E :                     ; object_Touch
(1) 2069/    1B3E :                     ;
(1) 2070/    1B3E :                     ; Detects collision with another Object
(1) 2071/    1B3E :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/    1B3E :                     ;
(1) 2073/    1B3E :                     ; Input:
(1) 2074/    1B3E :                     ; a6   | This object
(1) 2075/    1B3E :                     ;
(1) 2076/    1B3E :                     ; Returns:
(1) 2077/    1B3E :                     ; d0.l | If Nothing: 0
(1) 2078/    1B3E :                     ;        If Found:   The target's RAM location
(1) 2079/    1B3E :                     ; --------------------------------------------------------
(1) 2080/    1B3E :                     
(1) 2081/    1B3E :                     object_Touch:
(1) 2082/    1B3E : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/    1B42 : 7000                		moveq	#0,d0
(1) 2084/    1B44 : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/    1B48 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/    1B4C : 8C45                		or.w	d5,d6
(1) 2087/    1B4E : 671E                		beq	.exit_this
(1) 2088/    1B50 : 4BF8 D938           		lea	(RAM_Objects).w,a5
(1) 2089/    1B54 : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/    1B56 :                     .next:
(1) 2091/    1B56 : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/    1B58 : 670A                		beq.s	.skip
(1) 2093/    1B5A : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/    1B5C : 6706                		beq.s	.skip
(1) 2095/    1B5E : 6114                		bsr.s	.check_this
(1) 2096/    1B60 : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/    1B62 : 660A                		bne.s	.exit_this
(1) 2098/    1B64 : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/    1B68 : 51CF FFEC           		dbf	d7,.next
(1) 2100/    1B6C : 7000                		moveq	#0,d0
(1) 2101/    1B6E :                     .exit_this:
(1) 2102/    1B6E : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/    1B72 : 4E75                		rts
(1) 2104/    1B74 :                     
(1) 2105/    1B74 :                     ; main check
(1) 2106/    1B74 :                     .check_this:
(1) 2107/    1B74 : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/    1B76 :                     	; d6 - Y current top
(1) 2109/    1B76 :                     	; d5 - Y current bottom
(1) 2110/    1B76 :                     	; d4 - Y target top
(1) 2111/    1B76 :                     	; d3 - Y target bottom
(1) 2112/    1B76 :                     	; Check X
(1) 2113/    1B76 : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/    1B7A : 6700 00B4           		beq	.not_ytop
(1) 2115/    1B7E : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/    1B82 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/    1B84 : 3401                		move.w	d1,d2
(1) 2118/    1B86 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/    1B88 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/    1B8C :                     ; 		lsl.w	#3,d1
(1) 2121/    1B8C :                     ; 		lsl.w	#3,d2
(1) 2122/    1B8C : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/    1B8E : 9C41                		sub.w	d1,d6
(1) 2124/    1B90 : DA42                		add.w	d2,d5
(1) 2125/    1B92 : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/    1B96 : 6700 0098           		beq	.not_ytop
(1) 2127/    1B9A : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/    1B9E : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/    1BA0 : 3401                		move.w	d1,d2
(1) 2130/    1BA2 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/    1BA4 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/    1BA8 :                     ; 		lsl.w	#3,d1
(1) 2133/    1BA8 :                     ; 		lsl.w	#3,d2
(1) 2134/    1BA8 : 5342                		subq.w	#1,d2
(1) 2135/    1BAA : 9841                		sub.w	d1,d4
(1) 2136/    1BAC : D642                		add.w	d2,d3
(1) 2137/    1BAE : B646                		cmp.w	d6,d3
(1) 2138/    1BB0 : 6D7E                		blt	.not_ytop
(1) 2139/    1BB2 : B845                		cmp.w	d5,d4
(1) 2140/    1BB4 : 6C7A                		bge	.not_ytop
(1) 2141/    1BB6 :                     
(1) 2142/    1BB6 :                     	; Check Y
(1) 2143/    1BB6 : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/    1BBA : 6774                		beq	.not_ytop
(1) 2145/    1BBC : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/    1BC0 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/    1BC2 : 3401                		move.w	d1,d2
(1) 2148/    1BC4 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/    1BC6 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/    1BCA :                     ; 		lsl.w	#3,d1
(1) 2151/    1BCA :                     ; 		lsl.w	#3,d2
(1) 2152/    1BCA : 5342                		subq.w	#1,d2
(1) 2153/    1BCC : 9C41                		sub.w	d1,d6
(1) 2154/    1BCE : DA42                		add.w	d2,d5
(1) 2155/    1BD0 : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/    1BD4 : 675A                		beq	.not_ytop
(1) 2157/    1BD6 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/    1BDA : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/    1BDC : 3401                		move.w	d1,d2
(1) 2160/    1BDE : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/    1BE0 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/    1BE4 :                     ; 		lsl.w	#3,d1
(1) 2163/    1BE4 :                     ; 		lsl.w	#3,d2
(1) 2164/    1BE4 : 5342                		subq.w	#1,d2
(1) 2165/    1BE6 : 9841                		sub.w	d1,d4
(1) 2166/    1BE8 : D642                		add.w	d2,d3
(1) 2167/    1BEA : B646                		cmp.w	d6,d3
(1) 2168/    1BEC : 6D42                		blt.s	.not_ytop
(1) 2169/    1BEE : B845                		cmp.w	d5,d4
(1) 2170/    1BF0 : 6C3E                		bge.s	.not_ytop
(1) 2171/    1BF2 :                     
(1) 2172/    1BF2 :                     	; Special Z check
(1) 2173/    1BF2 : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/    1BF6 : 6736                		beq.s	.set_ok
(1) 2175/    1BF8 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/    1BFC : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/    1BFE : 3401                		move.w	d1,d2
(1) 2178/    1C00 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/    1C02 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/    1C06 :                     ; 		lsl.w	#3,d1
(1) 2181/    1C06 :                     ; 		lsl.w	#3,d2
(1) 2182/    1C06 : 5342                		subq.w	#1,d2
(1) 2183/    1C08 : 9C41                		sub.w	d1,d6
(1) 2184/    1C0A : DA42                		add.w	d2,d5
(1) 2185/    1C0C : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/    1C10 : 671C                		beq.s	.set_ok
(1) 2187/    1C12 : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/    1C16 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/    1C18 : 3401                		move.w	d1,d2
(1) 2190/    1C1A : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/    1C1C : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/    1C20 :                     ; 		lsl.w	#3,d1
(1) 2193/    1C20 :                     ; 		lsl.w	#3,d2
(1) 2194/    1C20 : 5342                		subq.w	#1,d2
(1) 2195/    1C22 : 9841                		sub.w	d1,d4
(1) 2196/    1C24 : D642                		add.w	d2,d3
(1) 2197/    1C26 : B646                		cmp.w	d6,d3
(1) 2198/    1C28 : 6D06                		blt	.not_ytop
(1) 2199/    1C2A : B845                		cmp.w	d5,d4
(1) 2200/    1C2C : 6C02                		bge	.not_ytop
(1) 2201/    1C2E :                     .set_ok:
(1) 2202/    1C2E : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/    1C30 :                     .not_ytop:
(1) 2204/    1C30 : 4E75                		rts
(1) 2205/    1C32 :                     
(1) 2206/    1C32 :                     ; ============================================================
(1) 2207/    1C32 :                     ; --------------------------------------------------------
(1) 2208/    1C32 :                     ; object_GetSprInfo
(1) 2209/    1C32 :                     ;
(1) 2210/    1C32 :                     ; Call this before using
(1) 2211/    1C32 :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/    1C32 :                     ;
(1) 2213/    1C32 :                     ; Input:
(1) 2214/    1C32 :                     ; a6   | This object
(1) 2215/    1C32 :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/    1C32 :                     ;        - Set to 0 for 3D Sprites
(1) 2217/    1C32 :                     ; d1.w | Flags
(1) 2218/    1C32 :                     ;
(1) 2219/    1C32 :                     ; Output:
(1) 2220/    1C32 :                     ; d0.l | X and Y position
(1) 2221/    1C32 :                     ; d1.l | Flags and Z Position
(1) 2222/    1C32 :                     ; d4.w | Current frame
(1) 2223/    1C32 :                     ; --------------------------------------------------------
(1) 2224/    1C32 :                     
(1) 2225/    1C32 :                     object_MdMars_GetSprInfo:
(1) 2240/    1C32 : 4E75                		rts
(1) 2241/    1C34 :                     
     195/    1C34 :                     
     196/    1C34 :                     ; --------------------------------------------------------
     197/    1C34 :                     ; SCREEN MODE MAIN LOOP
     198/    1C34 :                     ;
     199/    1C34 :                     ;  MD/Pico: Direct ROM jump
     200/    1C34 :                     ; CD/CD32X: Reads file from DISC and
     201/    1C34 :                     ;           transfers code to RAM
     202/    1C34 :                     ;      32X: Code is stored on ROM but runs in
     203/    1C34 :                     ;           RAM to prevent bus-conflicts with the
     204/    1C34 :                     ;           SH2's view of ROM at CS1
     205/    1C34 :                     ;
     206/    1C34 :                     ; - Returning in your current screen code loops here
     207/    1C34 :                     ; - 32X/CD32X:
     208/    1C34 :                     ;   This will turn OFF the 32X's current video mode
     209/    1C34 :                     ; --------------------------------------------------------
     210/    1C34 :                     
     211/    1C34 :                     Md_ReadModes:
     212/    1C34 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     220/    1C38 : 7000                		moveq	#0,d0
     221/    1C3A : 3038 E994           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     222/    1C3E : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     223/    1C42 : E948                		lsl.w	#4,d0				; number*$10
     224/    1C44 : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0		; Read list
     225/    1C48 :                     	; SCD/CD32X
     245/    1C48 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0		; a0 - ROM location
     246/    1C4C : 4E90                		jsr	(a0)
     248/    1C4E : 60E4                		bra.s	Md_ReadModes			; Loop on rts
     249/    1C50 :                     
     250/    1C50 :                     ; ====================================================================
     251/    1C50 :                     ; ---------------------------------------------
     252/    1C50 :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     253/    1C50 :                     ; ---------------------------------------------
     254/    1C50 :                     
     255/    1C50 :                     .pick_mode:
     256/    1C50 :                     		include "game/screens.asm"
(1)    1/    1C50 :                     ; ============================================================
(1)    2/    1C50 :                     ; --------------------------------------------------------
(1)    3/    1C50 :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/    1C50 :                     ;
(1)    5/    1C50 :                     ; - Screen CODE includes: incl_code.asm
(1)    6/    1C50 :                     ;
(1)    7/    1C50 :                     ; - DATA Bank includes: incl_data.asm
(1)    8/    1C50 :                     ;
(1)    9/    1C50 :                     ; ** For CD/CD32X **
(1)   10/    1C50 :                     ;    Add your ISO file entries for both
(1)   11/    1C50 :                     ;    CODE and DATA in iso_files.asm
(1)   12/    1C50 :                     ; --------------------------------------------------------
(1)   13/    1C50 :                     
(1)   14/    1C50 :                     ; Entry:
(1)   15/    1C50 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   16/    1C54 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1C5A : 3030 2E42 494E    
(1)   17/    1C60 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   18/    1C64 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1C6A : 3030 2E42 494E    
(1)   19/    1C70 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   20/    1C74 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1C7A : 3030 2E42 494E    
(1)   21/    1C80 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   22/    1C84 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1C8A : 3030 2E42 494E    
(1)   23/    1C90 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   24/    1C94 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1C9A : 3030 2E42 494E    
(1)   25/    1CA0 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   26/    1CA4 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1CAA : 3030 2E42 494E    
(1)   27/    1CB0 : 0000 3C5C           		dc.l Md_Screen00	; ****
(1)   28/    1CB4 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1CBA : 3030 2E42 494E    
(1)   29/    1CC0 : 0000 3D2A           		dc.l Md_Screen07	; ****
(1)   30/    1CC4 : 5343 5245 454E      		dc.b "SCREEN07.BIN"
             1CCA : 3037 2E42 494E    
(1)   31/    1CD0 :                     
     257/    1CD0 :                     
     258/    1CD0 :                     ; ====================================================================
     259/    1CD0 :                     
     266/    1CD0 :                     
     267/    1CD0 :                     Md_SysCode_e:
     268/    1CD0 :                     		align 2
     269/    1CD0 :                     
     270/    1CD0 :                     ; ===========================================================================
     271/    1CD0 :                     ; ----------------------------------------------------------------
     272/    1CD0 :                     ; DATA section shared on both Cartridge or Disc
     273/    1CD0 :                     ; ----------------------------------------------------------------
     274/    1CD0 :                     
     275/    1CD0 :                     ; --------------------------------------------------------
     276/    1CD0 :                     ; CD/CD32X ISO header and files
     277/    1CD0 :                     ; --------------------------------------------------------
     278/    1CD0 :                     
     294/    1CD0 :                     
     295/    1CD0 :                     ; ===========================================================================
     296/    1CD0 :                     ; --------------------------------------------------------
     297/    1CD0 :                     ; Z80 driver include
     298/    1CD0 :                     ;
     299/    1CD0 :                     ; SCD/CD32X: Stored on DISC
     300/    1CD0 :                     ; --------------------------------------------------------
     301/    1CD0 :                     
     309/    1CD0 :                     Z80_CODE:
     313/    1CD0 :                     		include "sound/drv/gema_zdrv.asm"
(1)    1/    1CD0 :                     ; ===========================================================================
(1)    2/    1CD0 :                     ; -------------------------------------------------------------------
(1)    3/    1CD0 :                     ; GEMA Z80 code
(1)    4/    1CD0 :                     ; -------------------------------------------------------------------
(1)    5/    1CD0 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =9H                  MAX_TRFRPZ	equ 9		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** MSB alinged ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE LSB ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size **HARDCODED
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of track buffers
(1)   19/       0 : =20H                 MAX_ZCMND	equ 20h		; !! Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip table arrays
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; seq_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  seq_Status	equ 00h	; ** Slot Status and flags (MUST BE at 00h)
(1)   36/       0 : =1H                  seq_Num		equ 01h ; ** Sequence number
(1)   37/       0 : =2H                  seq_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  seq_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  seq_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  seq_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  seq_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 seq_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 seq_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 seq_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 seq_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 seq_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 seq_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 seq_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 seq_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 seq_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 seq_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 seq_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 seq_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 seq_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 seq_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 seq_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 seq_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 seq_ChnIndx	equ 25h	; CHANNEL INDEXING START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 :                     
(1)   70/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   71/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   72/       0 : =2H                  chnl_Note	equ 2	; IT Music note or command
(1)   73/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   74/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   75/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   76/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   77/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   78/       0 :                     
(1)   79/       0 :                     
(1)   80/       0 :                     ; Table struct
(1)   81/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h			; !! Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   88/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   89/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   96/       0 : =0H                  zopcNop		equ 00h
(1)   97/       0 : =8H                  zopcEx		equ 08h
(1)   98/       0 : =0C9H                zopcRet		equ 0C9h
(1)   99/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  100/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG
(1)  103/       0 : =0H                  COM		equ 0
(1)  104/       0 : =4H                  LEV		equ 4
(1)  105/       0 : =8H                  ATK		equ 8
(1)  106/       0 : =0CH                 DKY		equ 12
(1)  107/       0 : =10H                 SLV		equ 16
(1)  108/       0 : =14H                 RRT		equ 20
(1)  109/       0 : =18H                 MODE		equ 24
(1)  110/       0 : =1CH                 DTL		equ 28
(1)  111/       0 : =20H                 DTH		equ 32
(1)  112/       0 : =24H                 ALV		equ 36
(1)  113/       0 : =28H                 FLG		equ 40
(1)  114/       0 : =2CH                 ARP		equ 44
(1)  115/       0 : =30H                 MVOL		equ 48
(1)  116/       0 : =34H                 EFFV		equ 52
(1)  117/       0 : =38H                 PTMR		equ 56
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrupts
(1)  125/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  127/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ;
(1)  132/       8 :                     ; Writes wave data to DAC using data stored
(1)  133/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  134/       8 :                     ; instructions to keep the samplerate stable.
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Input (EXX):
(1)  137/       8 :                     ;  c - WAVE buffer MSB
(1)  138/       8 :                     ; de - Pitch (xx.00)
(1)  139/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Uses (EXX):
(1)  142/       8 :                     ; b
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Notes:
(1)  145/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  146/       8 :                     ; DAC playback
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  149/       8 :                     ; --------------------------------------------------------
(1)  150/       8 :                     
(1)  151/       8 :                     ; EXX set:
(1)  152/       8 :                     ; af - temporal
(1)  153/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  154/       8 :                     ; de - pitch increment
(1)  155/       8 :                     ; hl - wave buffer position 00.00h
(1)  156/       8 :                     		org 8
(1)  157/       8 : D9                  dac_me:		exx			; * flip registers | Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save old hl buff
(1)  160/       B : 6C                  		ld	l,h		;
(1)  161/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  162/       D : 3E 2A               		ld	a,2Ah		;
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  167/      17 : 68                  		ld	l,b		;
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; * return regs
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     
(1)  189/      20 :                     		org 20h
(1)  190/      20 : F5                  dac_fill:	push	af		; Save af | Changes between PUSH AF(play) and RET(stop)
(1)  191/      21 : 3A 37 00            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  192/      24 : D9                  		exx			; * flip registers
(1)  193/      25 : AC                  		xor	h		; Grab LSB.00
(1)  194/      26 : D9                  		exx			; * restore regs
(1)  195/      27 : E6 80               		and	80h		; Check if LSB 7th bit changed
(1)  196/      29 : C4 3C 12            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  197/      2C : F1                  		pop	af		; Restore af
(1)  198/      2D : C9                  		ret
(1)  199/      2E :                     
(1)  200/      2E :                     ; --------------------------------------------------------
(1)  201/      2E :                     ; 02Eh - User read/write values
(1)  202/      2E :                     
(1)  203/      2E : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  204/      2F : 00                  psgHatMode	db 0			; Current PSGN mode
(1)  205/      30 : 00                  fmSpecial	db 0			; copy of FM3 enable bit
(1)  206/      31 : 00 00               sbeatAcc	dw 0			; Accumulates on each tick to trigger the sub beats
(1)  207/      33 : D6 00               sbeatPtck	dw 214			; Default global subbeats (this-32 for PAL) 214=125
(1)  208/      35 : 00                  x68ksrclsb	db 0			; readRom temporal LSB
(1)  209/      36 : 00                  x68ksrcmid	db 0			; readRom temporal MID
(1)  210/      37 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  211/      38 :                     
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     ; Z80 Interrupt at 0038h
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     
(1)  216/      38 :                     		org 38h				; Align 38h
(1)  217/      38 : ED 73 F6 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  218/      3C : F3                  		di				; Disable interrupt
(1)  219/      3D : C9                  		ret
(1)  220/      3E :                     
(1)  221/      3E :                     ; --------------------------------------------------------
(1)  222/      3E :                     ; Initialize
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     
(1)  225/      3E :                     z80_init:
(1)  226/      3E : CD 15 0F            		call	gema_init		; Init values
(1)  227/      41 :                     
(1)  228/      41 :                     ; --------------------------------------------------------
(1)  229/      41 :                     ; MAIN LOOP
(1)  230/      41 :                     ; --------------------------------------------------------
(1)  231/      41 :                     
(1)  232/      41 :                     drv_loop:
(1)  233/      41 : CF                  		rst	8
(1)  234/      42 : CD 87 0F            		call	get_tick		; Check tick on VBlank
(1)  235/      45 : E7                  		rst	20h			; Refill wave here
(1)  236/      46 : CF                  		rst	8
(1)  237/      47 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  238/      49 : 3A F8 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  239/      4C : D6 01               		sub	1
(1)  240/      4E : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  241/      50 : 32 F8 1C            		ld	(tickCnt),a
(1)  242/      53 : CD 61 10            		call	chip_env		; Process PSG and YM
(1)  243/      56 : CD 87 0F            		call	get_tick		; Check for another tick
(1)  244/      59 : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  245/      5B :                     .noticks:
(1)  246/      5B : 3A 32 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  247/      5E : D6 01               		sub	1
(1)  248/      60 : 38 06               		jr	c,.nobeats
(1)  249/      62 : CF                  		rst	8
(1)  250/      63 : 32 32 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  251/      66 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  252/      68 :                     .nobeats:
(1)  253/      68 : CF                  		rst	8
(1)  254/      69 : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  255/      6A : B7                  		or	a
(1)  256/      6B : 28 15               		jr	z,.neither
(1)  257/      6D : 32 F9 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  258/      70 : E7                  		rst	20h
(1)  259/      71 : CF                  		rst	8
(1)  260/      72 : CD 87 0F            		call	get_tick
(1)  261/      75 : CD FE 05            		call	set_chips		; Process sound chips
(1)  262/      78 : CD 87 0F            		call	get_tick
(1)  263/      7B : CF                  		rst	8
(1)  264/      7C : CD 22 02            		call	upd_seq			; Read sequences
(1)  265/      7F : CD 87 0F            		call	get_tick
(1)  266/      82 :                     .neither:
(1)  267/      82 : E7                  		rst	20h
(1)  268/      83 : CF                  		rst	8
(1)  272/      84 : CD 87 0F            		call	get_tick
(1)  273/      87 :                     .next_cmd:
(1)  274/      87 : 3A 80 1F            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  275/      8A : 47                  		ld	b,a			; are in the same spot a == b
(1)  276/      8B : 3A 2E 00            		ld	a,(commZRead)
(1)  277/      8E : B8                  		cp	b			; If equal, no changes.
(1)  278/      8F : 28 B0               		jr	z,drv_loop
(1)  279/      91 : CF                  		rst	8
(1)  280/      92 : CD AA 00            		call	.grab_arg		; Get command start flag -1
(1)  281/      95 : FE FF               		cp	-1
(1)  282/      97 : 20 A8               		jr	nz,drv_loop		; If not, end of command
(1)  283/      99 : CD AA 00            		call	.grab_arg		; Read command number
(1)  284/      9C : 87                  		add	a,a			; num*2
(1)  285/      9D : 21 C9 00            		ld	hl,.list		; Index-jump
(1)  286/      A0 : 16 00               		ld	d,0
(1)  287/      A2 : 5F                  		ld	e,a
(1)  288/      A3 : 19                  		add	hl,de
(1)  289/      A4 : 7E                  		ld	a,(hl)
(1)  290/      A5 : 23                  		inc	hl
(1)  291/      A6 : 66                  		ld	h,(hl)
(1)  292/      A7 : CF                  		rst	8
(1)  293/      A8 : 6F                  		ld	l,a
(1)  294/      A9 : E9                  		jp	(hl)			; Jump to label
(1)  295/      AA :                     
(1)  296/      AA :                     ; --------------------------------------------------------
(1)  297/      AA :                     ; Read cmd byte
(1)  298/      AA :                     ; --------------------------------------------------------
(1)  299/      AA :                     
(1)  300/      AA :                     .grab_arg:
(1)  301/      AA : D5                  		push	de
(1)  302/      AB : E5                  		push	hl
(1)  303/      AC :                     .getcbytel:
(1)  304/      AC : 3A 80 1F            		ld	a,(commZWrite)
(1)  305/      AF : 57                  		ld	d,a
(1)  306/      B0 : CF                  		rst	8
(1)  307/      B1 : 3A 2E 00            		ld	a,(commZRead)
(1)  308/      B4 : BA                  		cp	d			; commZ R/W indexes are the same?
(1)  309/      B5 : 28 F5               		jr	z,.getcbytel		; wait until these counters change.
(1)  310/      B7 : 16 00               		ld	d,0
(1)  311/      B9 : 5F                  		ld	e,a
(1)  312/      BA : 21 60 1F            		ld	hl,commZfifo		; Read commZ list + index
(1)  313/      BD : 19                  		add	hl,de
(1)  314/      BE : CF                  		rst	8
(1)  315/      BF : 3C                  		inc	a
(1)  316/      C0 : E6 1F               		and	MAX_ZCMND-1		; ** commZ list buffer limit
(1)  317/      C2 : 32 2E 00            		ld	(commZRead),a
(1)  318/      C5 : 7E                  		ld	a,(hl)			; a - got this byte from the buffer
(1)  319/      C6 : E1                  		pop	hl
(1)  320/      C7 : D1                  		pop	de
(1)  321/      C8 : C9                  		ret
(1)  322/      C9 :                     
(1)  323/      C9 :                     ; --------------------------------------------------------
(1)  324/      C9 :                     
(1)  325/      C9 :                     .list:
(1)  326/      C9 : D9 00               		dw .cmnd_0		; 00h - TESTING
(1)  327/      CB : DC 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  328/      CD : F5 00               		dw .cmnd_2		; 02h - Play by track number
(1)  329/      CF : 2F 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  330/      D1 : D9 00               		dw .cmnd_0		; 04h - (free)
(1)  331/      D3 : 6D 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  332/      D5 : A6 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  333/      D7 : DF 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  334/      D9 :                     
(1)  335/      D9 :                     ; --------------------------------------------------------
(1)  336/      D9 :                     ; Command 00h
(1)  337/      D9 :                     ;
(1)  338/      D9 :                     ; Reserved for TESTING purposes.
(1)  339/      D9 :                     ; --------------------------------------------------------
(1)  340/      D9 :                     
(1)  341/      D9 :                     .cmnd_0:
(1)  342/      D9 : C3 87 00            		jp	.next_cmd
(1)  343/      DC :                     
(1)  344/      DC :                     ; --------------------------------------------------------
(1)  345/      DC :                     ; Command 01h:
(1)  346/      DC :                     ;
(1)  347/      DC :                     ; Set the Track MASTER-list.
(1)  348/      DC :                     ; --------------------------------------------------------
(1)  349/      DC :                     
(1)  350/      DC :                     .cmnd_1:
(1)  351/      DC : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  352/      DF : CD AA 00            		call	.grab_arg		; $000000xx
(1)  353/      E2 : 77                  		ld	(hl),a
(1)  354/      E3 : 2B                  		dec	hl
(1)  355/      E4 : CD AA 00            		call	.grab_arg		; $0000xx00
(1)  356/      E7 : 77                  		ld	(hl),a
(1)  357/      E8 : 2B                  		dec	hl
(1)  358/      E9 : CD AA 00            		call	.grab_arg		; $00xx0000
(1)  359/      EC : 77                  		ld	(hl),a
(1)  360/      ED : 2B                  		dec	hl
(1)  361/      EE : CD AA 00            		call	.grab_arg		; $xx000000 (filler)
(1)  362/      F1 : 77                  		ld	(hl),a
(1)  363/      F2 : C3 87 00            		jp	.next_cmd
(1)  364/      F5 :                     
(1)  365/      F5 :                     ; --------------------------------------------------------
(1)  366/      F5 :                     ; Command 02h:
(1)  367/      F5 :                     ;
(1)  368/      F5 :                     ; Make new track by sequence number
(1)  369/      F5 :                     ;
(1)  370/      F5 :                     ; SeqID, BlockPos, SlotIndex(If -1 autofill)
(1)  371/      F5 :                     ; --------------------------------------------------------
(1)  372/      F5 :                     
(1)  373/      F5 :                     .cmnd_2:
(1)  374/      F5 : CD AA 00            		call	.grab_arg		; d1: Sequence ID
(1)  375/      F8 : 4F                  		ld	c,a			; copy to c
(1)  376/      F9 : CD AA 00            		call	.grab_arg		; d2: Block from
(1)  377/      FC : 47                  		ld	b,a			; copy to b
(1)  378/      FD : CF                  		rst	8
(1)  379/      FE : CD AA 00            		call	.grab_arg		; d0: Slot index
(1)  380/     101 : FD 21 CD 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  381/     105 : B7                  		or	a
(1)  382/     106 : FA 15 01            		jp	m,.srch_mode		; If negative, search for all with same ID
(1)  383/     109 : FE 03               		cp	MAX_SLOTS
(1)  384/     10B : D2 87 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  385/     10E : CF                  		rst	8
(1)  386/     10F : CD FD 01            		call	.cmnd_rdslot
(1)  387/     112 : C3 24 01            		jp	.wrtto_slot
(1)  388/     115 :                     ; -1
(1)  389/     115 :                     .srch_mode:
(1)  390/     115 : CD 0F 02            		call	.srch_slot		; Read this slot
(1)  391/     118 : FE FF               		cp	-1
(1)  392/     11A : CA 87 00            		jp	z,.next_cmd		; if -1, exit.
(1)  393/     11D : CB 7E               		bit	7,(hl)			; Is this track active?
(1)  394/     11F : CA 24 01            		jp	z,.wrtto_slot
(1)  395/     122 : 18 F1               		jr	.srch_mode		; Check next one
(1)  396/     124 :                     .wrtto_slot:
(1)  397/     124 : 36 C0               		ld	(hl),11000000b		; ** Write seq_Status (Enable+FirstFill)
(1)  398/     126 : 23                  		inc	hl
(1)  399/     127 : CF                  		rst	8
(1)  400/     128 : 71                  		ld	(hl),c			; ** seq_Num
(1)  401/     129 : 23                  		inc	hl
(1)  402/     12A : 70                  		ld	(hl),b			; ** seq_SetBlk
(1)  403/     12B : 79                  		ld	a,c
(1)  404/     12C : C3 87 00            		jp	.next_cmd
(1)  405/     12F :                     
(1)  406/     12F :                     ; --------------------------------------------------------
(1)  407/     12F :                     ; Command 03h:
(1)  408/     12F :                     ;
(1)  409/     12F :                     ; Stop track with the same sequence number
(1)  410/     12F :                     ;
(1)  411/     12F :                     ; SeqID,SlotIndex(If -1, stop all)
(1)  412/     12F :                     ; --------------------------------------------------------
(1)  413/     12F :                     
(1)  414/     12F :                     .cmnd_3:
(1)  415/     12F : CD AA 00            		call	.grab_arg		; d1: Sequence ID
(1)  416/     132 : 4F                  		ld	c,a			; copy to c
(1)  417/     133 : CD AA 00            		call	.grab_arg		; d0: Slot index
(1)  418/     136 : FD 21 CD 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  419/     13A : B7                  		or	a
(1)  420/     13B : FA 4D 01            		jp	m,.srch_del		; If negative, search for all with same ID
(1)  421/     13E : FE 03               		cp	MAX_SLOTS
(1)  422/     140 : D2 87 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  423/     143 : CF                  		rst	8
(1)  424/     144 : CD FD 01            		call	.cmnd_rdslot
(1)  425/     147 : CD 5A 01            		call	.wrtto_del
(1)  426/     14A : C3 87 00            		jp	.next_cmd
(1)  427/     14D :                     ; -1
(1)  428/     14D :                     .srch_del:
(1)  429/     14D : CD 0F 02            		call	.srch_slot		; Read this slot
(1)  430/     150 : FE FF               		cp	-1
(1)  431/     152 : CA 87 00            		jp	z,.next_cmd		; if -1, exit.
(1)  432/     155 : CD 5A 01            		call	.wrtto_del
(1)  433/     158 : 18 F3               		jr	.srch_del
(1)  434/     15A :                     .wrtto_del:
(1)  435/     15A : CB 7E               		bit	7,(hl)			; Slot is active?
(1)  436/     15C : C8                  		ret	z
(1)  437/     15D : CB 79               		bit	7,c			; seq is -1? (lazy bit check)
(1)  438/     15F : 20 05               		jr	nz,.del_all
(1)  439/     161 : DD 7E 01            		ld	a,(ix+seq_Num)
(1)  440/     164 : B9                  		cp	c			; Is this the same seq?
(1)  441/     165 : C0                  		ret	nz			; Return if not.
(1)  442/     166 :                     .del_all:
(1)  443/     166 : 36 FF               		ld	(hl),-1			; stop channel and clear slot
(1)  444/     168 : 23                  		inc	hl
(1)  445/     169 : 36 FF               		ld	(hl),-1			; Reset seqId
(1)  446/     16B : CF                  		rst	8
(1)  447/     16C : C9                  		ret
(1)  448/     16D :                     
(1)  449/     16D :                     ; --------------------------------------------------------
(1)  450/     16D :                     ; Command 05h:
(1)  451/     16D :                     ;
(1)  452/     16D :                     ; Fade volume (FadeIn/FadeOut)
(1)  453/     16D :                     ;
(1)  454/     16D :                     ; Arguments:
(1)  455/     16D :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  456/     16D :                     ; --------------------------------------------------------
(1)  457/     16D :                     
(1)  458/     16D :                     .cmnd_5:
(1)  459/     16D : CD AA 00            		call	.grab_arg		; d1: Master volume
(1)  460/     170 : 4F                  		ld	c,a			; copy to c
(1)  461/     171 : CD AA 00            		call	.grab_arg		; d0: Slot index
(1)  462/     174 : FD 21 CD 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  463/     178 : B7                  		or	a
(1)  464/     179 : FA 8B 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  465/     17C : FE 03               		cp	MAX_SLOTS
(1)  466/     17E : D2 87 00            		jp	nc,.next_cmd		; Exit If maxed out slots
(1)  467/     181 : CF                  		rst	8
(1)  468/     182 : CD FD 01            		call	.cmnd_rdslot
(1)  469/     185 : CD 98 01            		call	.wrtto_fvol
(1)  470/     188 : C3 87 00            		jp	.next_cmd
(1)  471/     18B :                     ; -1
(1)  472/     18B :                     .srch_fvol:
(1)  473/     18B : CD 0F 02            		call	.srch_slot
(1)  474/     18E : FE FF               		cp	-1
(1)  475/     190 : CA 87 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  476/     193 : CD 98 01            		call	.wrtto_fvol
(1)  477/     196 : 18 F3               		jr	.srch_fvol
(1)  478/     198 :                     .wrtto_fvol:
(1)  479/     198 : CB 7E               		bit	7,(hl)			; Active?
(1)  480/     19A : C8                  		ret	z
(1)  481/     19B : CB DE               		set	3,(hl)			; Volume update flag
(1)  482/     19D : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  483/     1A0 : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  484/     1A4 : CF                  		rst	8
(1)  485/     1A5 : C9                  		ret
(1)  486/     1A6 :                     
(1)  487/     1A6 :                     ; --------------------------------------------------------
(1)  488/     1A6 :                     ; Command 06h:
(1)  489/     1A6 :                     ;
(1)  490/     1A6 :                     ; Set track's master volume
(1)  491/     1A6 :                     ;
(1)  492/     1A6 :                     ; Arguments:
(1)  493/     1A6 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  494/     1A6 :                     ; --------------------------------------------------------
(1)  495/     1A6 :                     
(1)  496/     1A6 :                     .cmnd_6:
(1)  497/     1A6 : CD AA 00            		call	.grab_arg		; d1: Master volume
(1)  498/     1A9 : 4F                  		ld	c,a			; copy to c
(1)  499/     1AA : CD AA 00            		call	.grab_arg		; d0: Slot index
(1)  500/     1AD : FD 21 CD 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  501/     1B1 : B7                  		or	a
(1)  502/     1B2 : FA C4 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  503/     1B5 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  504/     1B7 : D2 87 00            		jp	nc,.next_cmd
(1)  505/     1BA : CF                  		rst	8
(1)  506/     1BB : CD FD 01            		call	.cmnd_rdslot
(1)  507/     1BE : CD D1 01            		call	.wrtto_vol
(1)  508/     1C1 : C3 87 00            		jp	.next_cmd
(1)  509/     1C4 :                     ; -1
(1)  510/     1C4 :                     .srch_vol:
(1)  511/     1C4 : CD 0F 02            		call	.srch_slot
(1)  512/     1C7 : FE FF               		cp	-1
(1)  513/     1C9 : CA 87 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  514/     1CC : CD D1 01            		call	.wrtto_vol
(1)  515/     1CF : 18 F3               		jr	.srch_vol
(1)  516/     1D1 :                     .wrtto_vol:
(1)  517/     1D1 : CB DE               		set	3,(hl)			; Volume update flag
(1)  518/     1D3 : DD 71 0E            		ld	(ix+seq_VolMaster),c
(1)  519/     1D6 : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  520/     1D9 : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  521/     1DD : CF                  		rst	8
(1)  522/     1DE : C9                  		ret
(1)  523/     1DF :                     
(1)  524/     1DF :                     ; --------------------------------------------------------
(1)  525/     1DF :                     ; Command 07h:
(1)  526/     1DF :                     ;
(1)  527/     1DF :                     ; Set global sub-beats
(1)  528/     1DF :                     ; --------------------------------------------------------
(1)  529/     1DF :                     
(1)  530/     1DF :                     .cmnd_7:
(1)  531/     1DF : CD AA 00            		call	.grab_arg		; d0.w: $00xx
(1)  532/     1E2 : 4F                  		ld	c,a
(1)  533/     1E3 : CD AA 00            		call	.grab_arg		; d0.w: $xx00
(1)  534/     1E6 : 67                  		ld	h,a
(1)  535/     1E7 : 69                  		ld	l,c
(1)  536/     1E8 : 3A 88 1F            		ld	a,(palMode)		; PAL speed mode?
(1)  537/     1EB : B7                  		or	a
(1)  538/     1EC : 28 04               		jr	z,.not_pal
(1)  539/     1EE : 11 28 00            		ld	de,40			; Add 40
(1)  540/     1F1 : 19                  		add	hl,de
(1)  541/     1F2 :                     .not_pal:
(1)  542/     1F2 : 7C                  		ld	a,h
(1)  543/     1F3 : 32 34 00            		ld	(sbeatPtck+1),a
(1)  544/     1F6 : 7D                  		ld	a,l
(1)  545/     1F7 : 32 33 00            		ld	(sbeatPtck),a
(1)  546/     1FA : C3 87 00            		jp	.next_cmd
(1)  547/     1FD :                     
(1)  548/     1FD :                     ; --------------------------------------------------------
(1)  549/     1FD :                     ; Shared subs
(1)  550/     1FD :                     ; --------------------------------------------------------
(1)  551/     1FD :                     
(1)  552/     1FD :                     .cmnd_rdslot:
(1)  553/     1FD : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  554/     1FE : 87                  		add	a,a			; id*8
(1)  555/     1FF : 87                  		add	a,a
(1)  556/     200 : 16 00               		ld	d,0
(1)  557/     202 : 5F                  		ld	e,a
(1)  558/     203 : FD 19               		add	iy,de
(1)  559/     205 : FD 6E 00            		ld	l,(iy)
(1)  560/     208 : FD 66 01            		ld	h,(iy+1)
(1)  561/     20B : E5                  		push	hl
(1)  562/     20C : DD E1               		pop	ix
(1)  563/     20E : C9                  		ret
(1)  564/     20F :                     
(1)  565/     20F :                     ; ------------------------------------------------
(1)  566/     20F :                     ; iy - nikona_BuffList
(1)  567/     20F :                     
(1)  568/     20F :                     .srch_slot:
(1)  569/     20F : FD 7E 00            		ld	a,(iy)
(1)  570/     212 : FE FF               		cp	-1			; End of list?
(1)  571/     214 : C8                  		ret	z
(1)  572/     215 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  573/     218 : 6F                  		ld	l,a
(1)  574/     219 : E5                  		push	hl
(1)  575/     21A : DD E1               		pop	ix
(1)  576/     21C : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  577/     21F : FD 19               		add	iy,de			; Next entry for later
(1)  578/     221 : C9                  		ret
(1)  579/     222 :                     
(1)  580/     222 :                     ; ====================================================================
(1)  581/     222 :                     ; ----------------------------------------------------------------
(1)  582/     222 :                     ; MAIN Playback section
(1)  583/     222 :                     ; ----------------------------------------------------------------
(1)  584/     222 :                     
(1)  585/     222 :                     ; --------------------------------------------------------
(1)  586/     222 :                     ; Read mini-impulse-tracker data
(1)  587/     222 :                     ; --------------------------------------------------------
(1)  588/     222 :                     
(1)  589/     222 :                     upd_seq:
(1)  590/     222 : E7                  		rst	20h
(1)  591/     223 : CD 87 0F            		call	get_tick		; Check for tick flag
(1)  592/     226 : FD 21 DE 16         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1)  593/     22A : CD 38 02            		call	.read_seq
(1)  594/     22D : FD 21 1D 17         		ld	iy,trkBuff_1
(1)  595/     231 : CD 38 02            		call	.read_seq
(1)  596/     234 : FD 21 5C 17         		ld	iy,trkBuff_2
(1)  597/     238 :                     
(1)  598/     238 :                     ; ----------------------------------------
(1)  599/     238 :                     ; Read sequence
(1)  600/     238 :                     ;
(1)  601/     238 :                     ; iy - Current sequence buffer
(1)  602/     238 :                     ; ----------------------------------------
(1)  603/     238 :                     
(1)  604/     238 :                     .read_seq:
(1)  605/     238 : CF                  		rst	8
(1)  606/     239 : 00                  		nop
(1)  607/     23A : 00                  		nop
(1)  608/     23B : FD 46 00            		ld	b,(iy+seq_Status)	; b - Track status and settings
(1)  609/     23E : CB 78               		bit	7,b			; bit7: Track active?
(1)  610/     240 : C8                  		ret	z			; Return if not.
(1)  611/     241 : 78                  		ld	a,b
(1)  612/     242 : FE FF               		cp	-1			; Status is -1?
(1)  613/     244 : C8                  		ret	z			; then skip this
(1)  614/     245 : CF                  		rst	8
(1)  615/     246 :                     	; ----------------------------------------
(1)  616/     246 :                     	; Track volume changes
(1)  617/     246 : FD 6E 0F            		ld	l,(iy+seq_VolMaster+1)
(1)  618/     249 : FD 66 0E            		ld	h,(iy+seq_VolMaster)
(1)  619/     24C : FD 4E 18            		ld	c,(iy+seq_VolFdTarget)
(1)  620/     24F : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  621/     252 : 79                  		ld	a,c
(1)  622/     253 : BC                  		cp	h
(1)  623/     254 : 28 1E               		jr	z,.keep_vol
(1)  624/     256 : 30 06               		jr	nc,.fade_out
(1)  625/     258 : 11 80 FF            		ld	de,-80h
(1)  626/     25B : 19                  		add	hl,de
(1)  627/     25C : 18 0C               		jr	.too_much
(1)  628/     25E :                     .fade_out:
(1)  629/     25E : 19                  		add	hl,de
(1)  630/     25F : CF                  		rst	8
(1)  631/     260 : 7C                  		ld	a,h
(1)  632/     261 : B9                  		cp	c
(1)  633/     262 : 38 06               		jr	c,.too_much
(1)  634/     264 : 61                  		ld	h,c
(1)  635/     265 : 2E 00               		ld	l,0
(1)  636/     267 : FD 71 18            		ld	(iy+seq_VolFdTarget),c
(1)  637/     26A :                     .too_much:
(1)  638/     26A : FD CB 00 DE         		set	3,(iy+seq_Status)	; Volume update flag
(1)  639/     26E : FD 75 0F            		ld	(iy+seq_VolMaster+1),l
(1)  640/     271 : FD 74 0E            		ld	(iy+seq_VolMaster),h
(1)  641/     274 :                     .keep_vol:
(1)  642/     274 :                     	; ----------------------------------------
(1)  643/     274 : 3A F9 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  644/     277 : CB 40               		bit	0,b			; bit0: This seq uses Beats?
(1)  645/     279 : 28 03               		jr	z,.sfxmd
(1)  646/     27B : CB 4F               		bit	1,a			; BEAT passed?
(1)  647/     27D : C8                  		ret	z			; No BEAT.
(1)  648/     27E :                     .sfxmd:
(1)  649/     27E : CB 47               		bit	0,a			; TICK passed?
(1)  650/     280 : C8                  		ret	z			; No TICK.
(1)  651/     281 : CF                  		rst	8
(1)  652/     282 :                     	; ----------------------------------------
(1)  653/     282 :                     	; Start reading notes
(1)  654/     282 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  655/     284 : C4 0F 05            		call	nz,.first_fill
(1)  656/     287 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  657/     289 : C4 08 05            		call	nz,.effect_fill
(1)  658/     28C : FD 7E 12            		ld	a,(iy+seq_TickTmr)	; TICK ex-timer for this seq
(1)  659/     28F : 3D                  		dec	a
(1)  660/     290 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  661/     293 : B7                  		or	a			; Check a
(1)  662/     294 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  663/     295 : CF                  		rst	8
(1)  664/     296 : FD 7E 03            		ld	a,(iy+seq_TickSet)	; Set new tick timer
(1)  665/     299 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  666/     29C :                     	; ----------------------------------------
(1)  667/     29C : FD 4E 0C            		ld	c,(iy+seq_Rows)		; bc - Set row counter
(1)  668/     29F : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  669/     2A2 : 79                  		ld	a,c			; Check rowcount
(1)  670/     2A3 : B0                  		or	b
(1)  671/     2A4 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  672/     2A6 :                     	; ----------------------------------------
(1)  673/     2A6 :                     	; Read next block
(1)  674/     2A6 : CF                  		rst	8
(1)  675/     2A7 : FD 7E 13            		ld	a,(iy+seq_currBlk)	; Next block
(1)  676/     2AA : 3C                  		inc	a
(1)  677/     2AB : FD 77 13            		ld 	(iy+seq_currBlk),a
(1)  678/     2AE : CD 2B 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  679/     2B1 : FE FF               		cp	-1			; Track finished?
(1)  680/     2B3 : C8                  		ret	z
(1)  681/     2B4 : FD 4E 0C            		ld	c,(iy+seq_Rows)		; Set new rowcount to bc
(1)  682/     2B7 : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  683/     2BA :                     	; ----------------------------------------
(1)  684/     2BA :                     	; bc - Row count
(1)  685/     2BA :                     .row_active:
(1)  686/     2BA : CF                  		rst	8
(1)  687/     2BB : FD 6E 0A            		ld	l,(iy+seq_Read)		; hl - CURRENT pattern to read
(1)  688/     2BE : FD 66 0B            		ld	h,(iy+((seq_Read+1)))
(1)  689/     2C1 :                     
(1)  690/     2C1 :                     ; --------------------------------
(1)  691/     2C1 :                     ; Main read-loop
(1)  692/     2C1 :                     ; --------------------------------
(1)  693/     2C1 :                     
(1)  694/     2C1 :                     .next_note:
(1)  695/     2C1 : FD 7E 11            		ld	a,(iy+seq_rowPause)	; Check row timer
(1)  696/     2C4 : B7                  		or	a
(1)  697/     2C5 : 20 16               		jr	nz,.dec_row
(1)  698/     2C7 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  699/     2C8 : B7                  		or	a
(1)  700/     2C9 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  701/     2CB : FA E8 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  702/     2CE : FD 77 11            		ld	(iy+seq_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  703/     2D1 :                     
(1)  704/     2D1 :                     ; --------------------------------
(1)  705/     2D1 :                     ; Exit
(1)  706/     2D1 :                     ; --------------------------------
(1)  707/     2D1 :                     
(1)  708/     2D1 :                     .exit:
(1)  709/     2D1 : CF                  		rst	8
(1)  710/     2D2 : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  711/     2D5 : FD 75 0A            		ld	(iy+seq_Read),l		; Update READ location
(1)  712/     2D8 : FD 74 0B            		ld	(iy+((seq_Read+1))),h
(1)  713/     2DB : 18 03               		jr	.dec_row_e
(1)  714/     2DD :                     .dec_row:
(1)  715/     2DD : FD 35 11            		dec	(iy+seq_rowPause)	; Decrement row-pause timer
(1)  716/     2E0 :                     .dec_row_e:
(1)  717/     2E0 : 0B                  		dec	bc			; Decrement rowcount
(1)  718/     2E1 : FD 71 0C            		ld	(iy+seq_Rows),c		; Write last row to memory
(1)  719/     2E4 : FD 70 0D            		ld	(iy+(seq_Rows+1)),b
(1)  720/     2E7 : C9                  		ret	; Exit sequence
(1)  721/     2E8 :                     
(1)  722/     2E8 :                     ; --------------------------------
(1)  723/     2E8 :                     ; New note request
(1)  724/     2E8 :                     ;
(1)  725/     2E8 :                     ; a - %1tcccccc
(1)  726/     2E8 :                     ;   | t - next byte has new type
(1)  727/     2E8 :                     ;   | c - channel
(1)  728/     2E8 :                     ; --------------------------------
(1)  729/     2E8 :                     
(1)  730/     2E8 :                     .has_note:
(1)  731/     2E8 : CF                  		rst	8
(1)  732/     2E9 : C5                  		push	bc			; Save rowcount
(1)  733/     2EA : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  734/     2EB : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  735/     2EE : E5                  		push	hl			; Save hl patt pos
(1)  736/     2EF : FD E5               		push	iy			; copy iy to hl
(1)  737/     2F1 : E1                  		pop	hl
(1)  738/     2F2 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels playback list
(1)  739/     2F6 : 11 25 00            		ld	de,seq_ChnIndx		; <-- this clears d
(1)  740/     2F9 : CF                  		rst	8
(1)  741/     2FA : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  742/     2FB : 79                  		ld	a,c			; Get patt note index
(1)  743/     2FC : E6 1F               		and	00011111b		; Filter bits
(1)  744/     2FE : 5F                  		ld	e,a			; Save as e
(1)  745/     2FF : 19                  		add	hl,de			; Increment more by this pos
(1)  746/     300 :                     	; hl - trkChnls+index
(1)  747/     300 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  748/     301 : B7                  		or	a
(1)  749/     302 : 28 15               		jr	z,.srch_new		; If == 0, search new one
(1)  750/     304 : E6 1F               		and	00011111b		; If already taken, read that channel
(1)  751/     306 : 87                  		add	a,a
(1)  752/     307 : 87                  		add	a,a
(1)  753/     308 : 87                  		add	a,a
(1)  754/     309 : 5F                  		ld	e,a
(1)  755/     30A : DD 19               		add	ix,de
(1)  756/     30C : DD 7E 00            		ld	a,(ix)			; Check status (chnl_Flags)
(1)  757/     30F : B7                  		or	a
(1)  758/     310 : F2 15 03            		jp	p,.srch_reroll
(1)  759/     313 : 18 31               		jr	.cont_chnl
(1)  760/     315 :                     ; Make NEW channel
(1)  761/     315 :                     ; ix - channel list start
(1)  762/     315 :                     .srch_reroll:
(1)  763/     315 : DD 36 00 00         		ld	(ix),0
(1)  764/     319 :                     .srch_new:
(1)  765/     319 : CF                  		rst	8
(1)  766/     31A : 06 1F               		ld	b,MAX_TRKCHN-1		; Max channels to check - 1
(1)  767/     31C : 16 00               		ld	d,0			; Reset out index
(1)  768/     31E :                     .next_chnl:
(1)  769/     31E : DD 7E 00            		ld	a,(ix)			; Read chnl_Flags
(1)  770/     321 : B7                  		or	a			; If plus, track channel is free
(1)  771/     322 : F2 3C 03            		jp	p,.chnl_free
(1)  772/     325 : DD 23               		inc	ix			; Search next channel, increment by 8
(1)  773/     327 : DD 23               		inc	ix
(1)  774/     329 : DD 23               		inc	ix
(1)  775/     32B : CF                  		rst	8
(1)  776/     32C : DD 23               		inc	ix
(1)  777/     32E : DD 23               		inc	ix
(1)  778/     330 : DD 23               		inc	ix
(1)  779/     332 : DD 23               		inc	ix
(1)  780/     334 : DD 23               		inc	ix
(1)  781/     336 : CF                  		rst	8
(1)  782/     337 : 14                  		inc	d			; Increment out index
(1)  783/     338 : 00                  		nop
(1)  784/     339 : 00                  		nop
(1)  785/     33A : 10 E2               		djnz	.next_chnl
(1)  786/     33C :                     .chnl_free:
(1)  787/     33C : 7A                  		ld	a,d			; Read index we got
(1)  788/     33D : E6 1F               		and	00011111b		; Filter bits
(1)  789/     33F : F6 80               		or	10000000b		; and set as used
(1)  790/     341 : 77                  		ld	(hl),a			; Write index slot
(1)  791/     342 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  792/     346 :                     .cont_chnl:
(1)  793/     346 : E1                  		pop	hl			; Recover patt pos
(1)  794/     347 : CF                  		rst	8
(1)  795/     348 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  796/     34B :                     
(1)  797/     34B :                     	; ix - Current channel
(1)  798/     34B :                     	; c  - Channel and type bits (7-6)
(1)  799/     34B :                     	; b  - Flags: evinEVIN
(1)  800/     34B :                     	;      E-effect/V-volume/I-instrument/N-note
(1)  801/     34B :                     	;      evin: byte is already stored on track-channel buffer
(1)  802/     34B :                     	;      EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  803/     34B : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  804/     34D : 28 08               		jr	z,.old_type
(1)  805/     34F : 7E                  		ld	a,(hl)
(1)  806/     350 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  807/     353 : 47                  		ld	b,a			; Set to b
(1)  808/     354 : CD F3 03            		call	.inc_cpatt		; Next patt pos
(1)  809/     357 :                     .old_type:
(1)  810/     357 : CF                  		rst	8
(1)  811/     358 : CB 40               		bit	0,b			; New NOTE?
(1)  812/     35A : 28 07               		jr	z,.no_note
(1)  813/     35C : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  814/     35D : DD 77 02            		ld	(ix+chnl_Note),a
(1)  815/     360 : CD F3 03            		call	.inc_cpatt
(1)  816/     363 :                     .no_note:
(1)  817/     363 : CB 48               		bit	1,b			; New INS?
(1)  818/     365 : 28 07               		jr	z,.no_ins
(1)  819/     367 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  820/     368 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  821/     36B : CD F3 03            		call	.inc_cpatt
(1)  822/     36E :                     .no_ins:
(1)  823/     36E : CF                  		rst	8
(1)  824/     36F : CB 50               		bit	2,b			; New VOL?
(1)  825/     371 : 28 07               		jr	z,.no_vol
(1)  826/     373 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  827/     374 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  828/     377 : CD F3 03            		call	.inc_cpatt
(1)  829/     37A :                     .no_vol:
(1)  830/     37A : CB 58               		bit	3,b			; New EFFECT?
(1)  831/     37C : 28 0F               		jr	z,.no_eff
(1)  832/     37E : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  833/     37F : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  834/     382 : CD F3 03            		call	.inc_cpatt
(1)  835/     385 : CF                  		rst	8
(1)  836/     386 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  837/     387 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  838/     38A : CD F3 03            		call	.inc_cpatt
(1)  839/     38D :                     .no_eff:
(1)  840/     38D : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  841/     38E : 0F                  		rrca
(1)  842/     38F : 0F                  		rrca
(1)  843/     390 : 0F                  		rrca
(1)  844/     391 : 0F                  		rrca
(1)  845/     392 : E6 0F               		and	00001111b		; Filter bits
(1)  846/     394 : 4F                  		ld	c,a			; Save as c
(1)  847/     395 : 78                  		ld	a,b
(1)  848/     396 : E6 0F               		and	00001111b		; Filter again
(1)  849/     398 : B1                  		or	c			; Merge c with a
(1)  850/     399 : CF                  		rst	8
(1)  851/     39A : 4F                  		ld	c,a			; Save bit flags
(1)  852/     39B : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  853/     39E : B1                  		or	c
(1)  854/     39F : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  855/     3A2 : C1                  		pop	bc			; Restore rowcount
(1)  856/     3A3 :                     	; ----------------------------------------
(1)  857/     3A3 :                     	; Effects that affect internal playback
(1)  858/     3A3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  859/     3A6 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  860/     3A8 : CA C1 02            		jp	z,.next_note
(1)  861/     3AB : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  862/     3AE : B7                  		or	a			; 00h = invalid effect
(1)  863/     3AF : CA C1 02            		jp	z,.next_note
(1)  864/     3B2 : FE 01               		cp	1			; Effect A: Tick set
(1)  865/     3B4 : 28 0B               		jr	z,.eff_A
(1)  866/     3B6 : FE 02               		cp	2			; Effect B: Position Jump
(1)  867/     3B8 : 28 18               		jr	z,.eff_B
(1)  868/     3BA : FE 03               		cp	3			; Effect C: Pattern break
(1)  869/     3BC : 28 32               		jr	z,.eff_C
(1)  870/     3BE : C3 C1 02            		jp	.next_note
(1)  871/     3C1 :                     
(1)  872/     3C1 :                     ; ----------------------------------------
(1)  873/     3C1 :                     ; Effect A: Set ticks
(1)  874/     3C1 :                     ; ----------------------------------------
(1)  875/     3C1 :                     
(1)  876/     3C1 :                     .eff_A:
(1)  877/     3C1 : CF                  		rst	8
(1)  878/     3C2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  879/     3C5 : FD 73 03            		ld	(iy+seq_TickSet),e	; set for both Set and Timer.
(1)  880/     3C8 : FD 73 12            		ld	(iy+seq_TickTmr),e
(1)  881/     3CB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  882/     3CF : C3 C1 02            		jp	.next_note
(1)  883/     3D2 :                     
(1)  884/     3D2 :                     ; ----------------------------------------
(1)  885/     3D2 :                     ; Effect B: jump to a new block
(1)  886/     3D2 :                     ; ----------------------------------------
(1)  887/     3D2 :                     
(1)  888/     3D2 :                     .eff_B:
(1)  889/     3D2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  890/     3D5 : FD 73 13            		ld 	(iy+seq_currBlk),e
(1)  891/     3D8 : CF                  		rst	8
(1)  892/     3D9 : FD 36 11 00         		ld	(iy+seq_rowPause),0	; Reset rowpause
(1)  893/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  894/     3E1 : FD CB 00 EE         		set	5,(iy+seq_Status)	; set fill-from-effect flag on exit
(1)  895/     3E5 : 3E 80               		ld	a,80h
(1)  896/     3E7 : FD 77 15            		ld	(iy+seq_BankHeads),a
(1)  897/     3EA : FD 77 16            		ld	(iy+seq_BankBlk),a
(1)  898/     3ED : C3 C1 02            		jp	.next_note
(1)  899/     3F0 :                     
(1)  900/     3F0 :                     ; ----------------------------------------
(1)  901/     3F0 :                     ; Effect C: Pattern break/exit
(1)  902/     3F0 :                     ;
(1)  903/     3F0 :                     ; Only used on SFX, arguments ignored.
(1)  904/     3F0 :                     ; ----------------------------------------
(1)  905/     3F0 :                     
(1)  906/     3F0 :                     .eff_C:
(1)  907/     3F0 : C3 02 05            		jp	.track_end
(1)  908/     3F3 :                     
(1)  909/     3F3 :                     ; ----------------------------------------
(1)  910/     3F3 :                     ; Increment the current patt position
(1)  911/     3F3 :                     ; and recieve more data
(1)  912/     3F3 :                     ;
(1)  913/     3F3 :                     ; Breaks:
(1)  914/     3F3 :                     ; a,e
(1)  915/     3F3 :                     ; ----------------------------------------
(1)  916/     3F3 :                     
(1)  917/     3F3 :                     .inc_cpatt:
(1)  918/     3F3 : FD 5E 08            		ld	e,(iy+seq_Cach)		; Read curret cache LSB
(1)  919/     3F6 : 7D                  		ld	a,l
(1)  920/     3F7 : 3C                  		inc	a
(1)  921/     3F8 : E6 1F               		and	MAX_RCACH-1
(1)  922/     3FA : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  923/     3FC : 30 03               		jr	nc,.ran_out
(1)  924/     3FE : B3                  		or	e
(1)  925/     3FF : 6F                  		ld	l,a
(1)  926/     400 : C9                  		ret
(1)  927/     401 :                     .ran_out:
(1)  928/     401 : FD 6E 08            		ld	l,(iy+seq_Cach)
(1)  929/     404 : E5                  		push	hl
(1)  930/     405 : C5                  		push	bc
(1)  931/     406 : 06 00               		ld	b,0
(1)  932/     408 : 4F                  		ld	c,a
(1)  933/     409 : CF                  		rst	8
(1)  934/     40A : 5D                  		ld	e,l
(1)  935/     40B : 54                  		ld	d,h
(1)  936/     40C : FD 6E 19            		ld	l,(iy+seq_RomPattRead)
(1)  937/     40F : FD 66 1A            		ld	h,(iy+(seq_RomPattRead+1))
(1)  938/     412 : FD 7E 1B            		ld	a,(iy+(seq_RomPattRead+2))
(1)  939/     415 : 09                  		add	hl,bc
(1)  940/     416 : CE 00               		adc	a,0
(1)  941/     418 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1)  942/     41B : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1)  943/     41E : CF                  		rst	8
(1)  944/     41F : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1)  945/     422 : 01 20 00            		ld	bc,MAX_RCACH
(1)  946/     425 : CD A8 0F            		call	readRom		; *** ROM ACCESS ***
(1)  947/     428 : C1                  		pop	bc
(1)  948/     429 : E1                  		pop	hl
(1)  949/     42A : C9                  		ret
(1)  950/     42B :                     
(1)  951/     42B :                     ; ----------------------------------------
(1)  952/     42B :                     ; Set track pattern by seq_currBlk
(1)  953/     42B :                     ; ----------------------------------------
(1)  954/     42B :                     
(1)  955/     42B :                     .set_track:
(1)  956/     42B :                     	; ----------------------------------------
(1)  957/     42B :                     	; Make block id list
(1)  958/     42B : FD 5E 04            		ld	e,(iy+seq_Blocks)
(1)  959/     42E : FD 56 05            		ld	d,(iy+(seq_Blocks+1))
(1)  960/     431 : FD 7E 13            		ld	a,(iy+seq_currBlk)
(1)  961/     434 : 4F                  		ld	c,a
(1)  962/     435 : C5                  		push	bc
(1)  963/     436 : D5                  		push	de
(1)  964/     437 : CF                  		rst	8
(1)  965/     438 : 0F                  		rrca
(1)  966/     439 : 0F                  		rrca
(1)  967/     43A : 0F                  		rrca
(1)  968/     43B : E6 1F               		and	00011111b
(1)  969/     43D : FD 4E 16            		ld	c,(iy+seq_BankBlk)	; c - current block bank
(1)  970/     440 : CB 79               		bit	7,c			; First time?
(1)  971/     442 : 20 03               		jr	nz,.first_blk
(1)  972/     444 : B9                  		cp	c			; SAME instrument data?
(1)  973/     445 : 28 1C               		jr	z,.keep_blk
(1)  974/     447 :                     .first_blk:
(1)  975/     447 : CF                  		rst	8
(1)  976/     448 : FD 77 16            		ld	(iy+seq_BankBlk),a	; Save inst number
(1)  977/     44B : 07                  		rlca
(1)  978/     44C : 07                  		rlca
(1)  979/     44D : 07                  		rlca
(1)  980/     44E : 06 00               		ld	b,0
(1)  981/     450 : 4F                  		ld	c,a
(1)  982/     451 : FD 6E 22            		ld	l,(iy+seq_RomBlks)
(1)  983/     454 : FD 66 23            		ld	h,(iy+(seq_RomBlks+1))
(1)  984/     457 : FD 7E 24            		ld	a,(iy+(seq_RomBlks+2))
(1)  985/     45A : 09                  		add	hl,bc
(1)  986/     45B : CE 00               		adc	a,0
(1)  987/     45D : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  988/     460 : CD A8 0F            		call	readRom			; ** ROM ACCESS **
(1)  989/     463 :                     .keep_blk:
(1)  990/     463 : E1                  		pop	hl
(1)  991/     464 : C1                  		pop	bc
(1)  992/     465 : 79                  		ld	a,c
(1)  993/     466 : E6 07               		and	00000111b
(1)  994/     468 : CF                  		rst	8
(1)  995/     469 : 16 00               		ld	d,0
(1)  996/     46B : 5F                  		ld	e,a
(1)  997/     46C : 19                  		add	hl,de
(1)  998/     46D :                     	; ----------------------------------------
(1)  999/     46D : 7E                  		ld	a,(hl)			; Read block byte
(1) 1000/     46E : FE FF               		cp	-1			; If block == -1, end track
(1) 1001/     470 : CA 02 05            		jp	z,.track_end
(1) 1002/     473 : CF                  		rst	8
(1) 1003/     474 :                     	; ----------------------------------------
(1) 1004/     474 : FD 5E 06            		ld	e,(iy+seq_Patt)		; Read CACHE patt heads
(1) 1005/     477 : FD 56 07            		ld	d,(iy+(seq_Patt+1))
(1) 1006/     47A : 4F                  		ld	c,a
(1) 1007/     47B : D5                  		push	de
(1) 1008/     47C : C5                  		push	bc
(1) 1009/     47D : CF                  		rst	8
(1) 1010/     47E : 0F                  		rrca
(1) 1011/     47F : 0F                  		rrca
(1) 1012/     480 : 0F                  		rrca
(1) 1013/     481 : E6 1F               		and	00011111b
(1) 1014/     483 : FD 4E 15            		ld	c,(iy+seq_BankHeads)	; c - current intrument loaded
(1) 1015/     486 : CB 79               		bit	7,c			; First time?
(1) 1016/     488 : 20 03               		jr	nz,.first_head
(1) 1017/     48A : B9                  		cp	c			; SAME instrument data?
(1) 1018/     48B : 28 26               		jr	z,.keep_it
(1) 1019/     48D :                     .first_head:
(1) 1020/     48D : CF                  		rst	8
(1) 1021/     48E : FD 77 15            		ld	(iy+seq_BankHeads),a	; Save inst number
(1) 1022/     491 : 47                  		ld	b,a
(1) 1023/     492 : 0F                  		rrca
(1) 1024/     493 : 0F                  		rrca
(1) 1025/     494 : 0F                  		rrca
(1) 1026/     495 : E6 E0               		and	11100000b
(1) 1027/     497 : 4F                  		ld	c,a
(1) 1028/     498 : 78                  		ld	a,b
(1) 1029/     499 : 0F                  		rrca
(1) 1030/     49A : 0F                  		rrca
(1) 1031/     49B : 0F                  		rrca
(1) 1032/     49C : E6 03               		and	00000011b
(1) 1033/     49E : 47                  		ld	b,a
(1) 1034/     49F :                     	; ----------------------------------------
(1) 1035/     49F : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1036/     4A2 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1037/     4A5 : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1038/     4A8 : E7                  		rst	20h
(1) 1039/     4A9 : CF                  		rst	8
(1) 1040/     4AA : 09                  		add	hl,bc
(1) 1041/     4AB : CE 00               		adc	a,0
(1) 1042/     4AD : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1043/     4B0 : CD A8 0F            		call	readRom			; ** ROM ACCESS **
(1) 1044/     4B3 :                     .keep_it:
(1) 1045/     4B3 : C1                  		pop	bc
(1) 1046/     4B4 : 79                  		ld	a,c
(1) 1047/     4B5 : E6 07               		and	00000111b
(1) 1048/     4B7 : 87                  		add	a,a
(1) 1049/     4B8 : 87                  		add	a,a
(1) 1050/     4B9 : 57                  		ld	d,a
(1) 1051/     4BA : CF                  		rst	8
(1) 1052/     4BB : E6 FC               		and	11111100b
(1) 1053/     4BD : 5F                  		ld	e,a
(1) 1054/     4BE : 7A                  		ld	a,d
(1) 1055/     4BF : E6 03               		and	00000011b
(1) 1056/     4C1 : 57                  		ld	d,a
(1) 1057/     4C2 : E1                  		pop	hl
(1) 1058/     4C3 : 19                  		add	hl,de
(1) 1059/     4C4 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1060/     4C5 : 23                  		inc	hl
(1) 1061/     4C6 : CF                  		rst	8
(1) 1062/     4C7 : 56                  		ld	d,(hl)
(1) 1063/     4C8 : 23                  		inc	hl
(1) 1064/     4C9 : 7E                  		ld	a,(hl)
(1) 1065/     4CA : 23                  		inc	hl
(1) 1066/     4CB : FD 77 0C            		ld	(iy+seq_Rows),a
(1) 1067/     4CE : 7E                  		ld	a,(hl)
(1) 1068/     4CF : 23                  		inc	hl
(1) 1069/     4D0 : FD 77 0D            		ld	(iy+(seq_Rows+1)),a
(1) 1070/     4D3 : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1071/     4D6 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1072/     4D9 : CF                  		rst	8
(1) 1073/     4DA : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1074/     4DD : 19                  		add	hl,de
(1) 1075/     4DE : CE 00               		adc	a,0
(1) 1076/     4E0 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1) 1077/     4E3 : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1) 1078/     4E6 : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1) 1079/     4E9 : FD 5E 08            		ld	e,(iy+seq_Cach)
(1) 1080/     4EC : FD 56 09            		ld	d,(iy+(seq_Cach+1))
(1) 1081/     4EF : FD 73 0A            		ld	(iy+seq_Read),e
(1) 1082/     4F2 : FD 72 0B            		ld	(iy+(seq_Read+1)),d
(1) 1083/     4F5 : 0E 20               		ld	c,MAX_RCACH
(1) 1084/     4F7 : FD 36 10 00         		ld	(iy+seq_cachHalf),0
(1) 1085/     4FB : FD 36 11 00         		ld	(iy+seq_rowPause),0
(1) 1086/     4FF : C3 A8 0F            		jp	readRom			; ** ROM access **
(1) 1087/     502 :                     
(1) 1088/     502 :                     ; ----------------------------------------
(1) 1089/     502 :                     ; **JUMP ONLY**
(1) 1090/     502 :                     .track_end:
(1) 1091/     502 : CF                  		rst	8
(1) 1092/     503 : FD 36 00 FF         		ld	(iy+seq_Status),-1	; Disable track slot
(1) 1093/     507 : C9                  		ret
(1) 1094/     508 :                     
(1) 1095/     508 :                     ; ----------------------------------------
(1) 1096/     508 :                     ; Track refill
(1) 1097/     508 :                     ; ----------------------------------------
(1) 1098/     508 :                     
(1) 1099/     508 :                     .effect_fill:
(1) 1100/     508 : FD CB 00 AE         		res	5,(iy+seq_Status)	; Reset refill-from-effect flag
(1) 1101/     50C : C3 2B 04            		jp	.set_track
(1) 1102/     50F :                     
(1) 1103/     50F :                     ; ----------------------------------------
(1) 1104/     50F :                     ; Track Start/Reset
(1) 1105/     50F :                     ;
(1) 1106/     50F :                     ; iy - Track buffer
(1) 1107/     50F :                     ; ----------------------------------------
(1) 1108/     50F :                     
(1) 1109/     50F :                     .first_fill:
(1) 1110/     50F : FD CB 00 B6         		res	6,(iy+seq_Status)	; Clear FILL flag
(1) 1111/     513 : CD B0 05            		call	track_out
(1) 1112/     516 : FD 36 12 01         		ld	(iy+seq_TickTmr),1	; Reset tick timer
(1) 1113/     51A : FD 7E 02            		ld	a,(iy+seq_SetBlk)	; Make start block as current block
(1) 1114/     51D : CF                  		rst	8
(1) 1115/     51E : FD 77 13            		ld 	(iy+seq_currBlk),a	; block
(1) 1116/     521 : FD 7E 01            		ld	a,(iy+seq_Num)
(1) 1117/     524 : FE FF               		cp	-1			; Sequence -1?
(1) 1118/     526 : C8                  		ret	z
(1) 1119/     527 : 87                  		add	a,a
(1) 1120/     528 : 87                  		add	a,a
(1) 1121/     529 : 16 00               		ld	d,0
(1) 1122/     52B : 5F                  		ld	e,a
(1) 1123/     52C : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1124/     52F : 23                  		inc	hl
(1) 1125/     530 : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1126/     531 : 23                  		inc	hl
(1) 1127/     532 : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1128/     533 : 23                  		inc	hl
(1) 1129/     534 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1130/     535 : CF                  		rst	8
(1) 1131/     536 : 61                  		ld	h,c
(1) 1132/     537 : 19                  		add	hl,de
(1) 1133/     538 : CE 00               		adc	a,0
(1) 1134/     53A : 11 56 16            		ld	de,trkInfoCach
(1) 1135/     53D : D5                  		push	de
(1) 1136/     53E : 01 04 00            		ld	bc,4
(1) 1137/     541 : CD A8 0F            		call	readRom			; *** ROM ACCESS ***
(1) 1138/     544 : E1                  		pop	hl
(1) 1139/     545 : 7E                  		ld	a,(hl)
(1) 1140/     546 : 23                  		inc	hl
(1) 1141/     547 : CB 7F               		bit	7,a
(1) 1142/     549 : 28 04               		jr	z,.no_glbl
(1) 1143/     54B : FD CB 00 C6         		set	0,(iy+seq_Status)	; Enable GLOBAL sub-beats
(1) 1144/     54F :                     .no_glbl:
(1) 1145/     54F : CF                  		rst	8
(1) 1146/     550 : E6 7F               		and	01111111b
(1) 1147/     552 : FD 77 03            		ld	(iy+seq_TickSet),a
(1) 1148/     555 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1149/     556 : 23                  		inc	hl			; grab it's pointers
(1) 1150/     557 : 4E                  		ld	c,(hl)
(1) 1151/     558 : 23                  		inc	hl
(1) 1152/     559 : 6E                  		ld	l,(hl)
(1) 1153/     55A : 61                  		ld	h,c
(1) 1154/     55B : 11 AF 17            		ld	de,headerOut
(1) 1155/     55E : 0E 0E               		ld	c,0Eh
(1) 1156/     560 : CD A8 0F            		call	readRom		; ** ROM access **
(1) 1157/     563 :                     
(1) 1158/     563 :                     	; headerOut:
(1) 1159/     563 :                     	; dc.w numof_chnls
(1) 1160/     563 :                     	; dc.l .blk,.pat,.ins
(1) 1161/     563 :                     	; *** READING BACKWARDS
(1) 1162/     563 : DD 21 BC 17         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1163/     567 : CD 9D 05            		call	.grab_rhead		; Instrument data
(1) 1164/     56A : FD 75 1F            		ld	(iy+seq_RomInst),l
(1) 1165/     56D : FD 74 20            		ld	(iy+(seq_RomInst+1)),h
(1) 1166/     570 : FD 70 21            		ld	(iy+(seq_RomInst+2)),b
(1) 1167/     573 : CD 9D 05            		call	.grab_rhead		; Pattern heads
(1) 1168/     576 : FD 75 1C            		ld	(iy+seq_RomPatt),l	; Save ROM patt base
(1) 1169/     579 : FD 74 1D            		ld	(iy+(seq_RomPatt+1)),h
(1) 1170/     57C : FD 70 1E            		ld	(iy+(seq_RomPatt+2)),b
(1) 1171/     57F : FD 36 15 80         		ld	(iy+seq_BankHeads),80h	; Reset pattern banking
(1) 1172/     583 : CD 9D 05            		call	.grab_rhead		; Block data
(1) 1173/     586 : FD 75 22            		ld	(iy+seq_RomBlks),l	; Save ROM patt base
(1) 1174/     589 : FD 74 23            		ld	(iy+(seq_RomBlks+1)),h
(1) 1175/     58C : FD 70 24            		ld	(iy+(seq_RomBlks+2)),b
(1) 1176/     58F : FD 36 16 80         		ld	(iy+seq_BankBlk),80h	; Reset pattern banking
(1) 1177/     593 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1178/     596 : FD 77 17            		ld	(iy+seq_MaxChnl),a
(1) 1179/     599 : CF                  		rst	8
(1) 1180/     59A : C3 2B 04            		jp	.set_track
(1) 1181/     59D :                     
(1) 1182/     59D :                     ; Read 68K pointer:
(1) 1183/     59D :                     ; hl - 00xxxx
(1) 1184/     59D :                     ;  b - xx0000
(1) 1185/     59D :                     .grab_rhead:
(1) 1186/     59D : DD 6E 00            		ld	l,(ix)
(1) 1187/     5A0 : DD 2B               		dec	ix
(1) 1188/     5A2 : DD 66 00            		ld	h,(ix)
(1) 1189/     5A5 : CF                  		rst	8
(1) 1190/     5A6 : DD 2B               		dec	ix
(1) 1191/     5A8 : DD 46 00            		ld	b,(ix)
(1) 1192/     5AB : DD 2B               		dec	ix
(1) 1193/     5AD :                     ; 		ld	c,(ix)
(1) 1194/     5AD : DD 2B               		dec	ix
(1) 1195/     5AF : C9                  		ret
(1) 1196/     5B0 :                     
(1) 1197/     5B0 :                     ; ----------------------------------------
(1) 1198/     5B0 :                     ; Reset tracker channels
(1) 1199/     5B0 :                     ;
(1) 1200/     5B0 :                     ; iy - Track buffer
(1) 1201/     5B0 :                     ;
(1) 1202/     5B0 :                     ; Breaks:
(1) 1203/     5B0 :                     ; b ,de,hl,ix
(1) 1204/     5B0 :                     ; ----------------------------------------
(1) 1205/     5B0 :                     
(1) 1206/     5B0 :                     track_out:
(1) 1207/     5B0 : FD E5               		push	iy
(1) 1208/     5B2 : E1                  		pop	hl
(1) 1209/     5B3 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1210/     5B7 : CF                  		rst	8
(1) 1211/     5B8 : 11 25 00            		ld	de,seq_ChnIndx
(1) 1212/     5BB : 19                  		add	hl,de
(1) 1213/     5BC : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1214/     5BF : B7                  		or	a
(1) 1215/     5C0 : 20 02               		jr	nz,.valid
(1) 1216/     5C2 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1217/     5C4 :                     .valid:
(1) 1218/     5C4 : 47                  		ld	b,a
(1) 1219/     5C5 :                     .indx_del:
(1) 1220/     5C5 : 7E                  		ld	a,(hl)
(1) 1221/     5C6 : B7                  		or	a
(1) 1222/     5C7 : 28 29               		jr	z,.nothin
(1) 1223/     5C9 : CF                  		rst	8
(1) 1224/     5CA : DD E5               		push	ix
(1) 1225/     5CC : E6 1F               		and	00011111b
(1) 1226/     5CE : 87                  		add	a,a
(1) 1227/     5CF : 87                  		add	a,a
(1) 1228/     5D0 : 87                  		add	a,a
(1) 1229/     5D1 : 5F                  		ld	e,a
(1) 1230/     5D2 : CF                  		rst	8
(1) 1231/     5D3 : DD 19               		add	ix,de
(1) 1232/     5D5 : AF                  		xor	a
(1) 1233/     5D6 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1234/     5DA : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1235/     5DE : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1236/     5E1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1237/     5E4 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1238/     5E7 : CF                  		rst	8
(1) 1239/     5E8 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1240/     5EB : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1241/     5EE : DD E1               		pop	ix
(1) 1242/     5F0 : 77                  		ld	(hl),a
(1) 1243/     5F1 : 00                  		nop
(1) 1244/     5F2 :                     .nothin:
(1) 1245/     5F2 : 23                  		inc	hl
(1) 1246/     5F3 : 10 D0               		djnz	.indx_del
(1) 1247/     5F5 : 3E 01               		ld	a,1
(1) 1248/     5F7 : 32 A1 17            		ld	(marsUpd),a
(1) 1249/     5FA : 32 A2 17            		ld	(mcdUpd),a
(1) 1250/     5FD : C9                  		ret
(1) 1251/     5FE :                     
(1) 1252/     5FE :                     ; ============================================================
(1) 1253/     5FE :                     ; --------------------------------------------------------
(1) 1254/     5FE :                     ; Process track channels to the sound chips
(1) 1255/     5FE :                     ; --------------------------------------------------------
(1) 1256/     5FE :                     
(1) 1257/     5FE :                     set_chips:
(1) 1258/     5FE : CD 87 0F            		call	get_tick
(1) 1259/     601 : FD 21 DE 16         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1) 1260/     605 : CD 3E 06            		call	tblbuff_read
(1) 1261/     608 : E7                  		rst	20h
(1) 1262/     609 : FD 21 1D 17         		ld	iy,trkBuff_1
(1) 1263/     60D : CD 3E 06            		call	tblbuff_read
(1) 1264/     610 : CF                  		rst	8
(1) 1265/     611 : FD 21 5C 17         		ld	iy,trkBuff_2
(1) 1266/     615 : CD 3E 06            		call	tblbuff_read
(1) 1267/     618 : CD 87 0F            		call	get_tick
(1) 1268/     61B : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1269/     61F : CD 00 08            		call	dtbl_singl
(1) 1270/     622 : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1271/     626 : CD EC 07            		call	dtbl_multi
(1) 1272/     629 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1273/     62D : CD EC 07            		call	dtbl_multi
(1) 1274/     630 : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1275/     634 : CD EC 07            		call	dtbl_multi
(1) 1276/     637 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1277/     63B : C3 EC 07            		jp	dtbl_multi
(1) 1278/     63E :                     
(1) 1279/     63E :                     ; ----------------------------------------
(1) 1280/     63E :                     ; Read current track
(1) 1281/     63E :                     ;
(1) 1282/     63E :                     ; iy - Buffer
(1) 1283/     63E :                     tblbuff_read:
(1) 1284/     63E : CF                  		rst	8
(1) 1285/     63F : FD 46 00            		ld	b,(iy+seq_Status)	; bit7: Track active?
(1) 1286/     642 : CB 78               		bit	7,b
(1) 1287/     644 : C8                  		ret	z
(1) 1288/     645 : 78                  		ld	a,b			; seq_Status == -1?
(1) 1289/     646 : FE FF               		cp	-1
(1) 1290/     648 : C2 56 06            		jp	nz,.track_cont
(1) 1291/     64B : CD B0 05            		call	track_out
(1) 1292/     64E : FD 36 00 00         		ld	(iy+seq_Status),0
(1) 1293/     652 : FD 36 01 FF         		ld	(iy+seq_Num),-1
(1) 1294/     656 :                     .track_cont:
(1) 1295/     656 : FD E5               		push	iy
(1) 1296/     658 : E1                  		pop	hl
(1) 1297/     659 : CF                  		rst	8
(1) 1298/     65A : DD 21 00 1E         		ld	ix,trkChnls
(1) 1299/     65E : 11 25 00            		ld	de,seq_ChnIndx
(1) 1300/     661 : 19                  		add	hl,de
(1) 1301/     662 : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1302/     665 : B7                  		or	a
(1) 1303/     666 : 20 02               		jr	nz,.valid
(1) 1304/     668 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1305/     66A :                     .valid:
(1) 1306/     66A : CF                  		rst	8
(1) 1307/     66B : 47                  		ld	b,a
(1) 1308/     66C :                     .next_indx:
(1) 1309/     66C : 7E                  		ld	a,(hl)			; Read index
(1) 1310/     66D : B7                  		or	a
(1) 1311/     66E : 20 02               		jr	nz,.has_indx		; If non-zero: valid
(1) 1312/     670 : 18 1C               		jr	.no_indx
(1) 1313/     672 :                     .has_indx:
(1) 1314/     672 : E6 1F               		and	00011111b
(1) 1315/     674 : 87                  		add	a,a
(1) 1316/     675 : 87                  		add	a,a
(1) 1317/     676 : 87                  		add	a,a
(1) 1318/     677 : CF                  		rst	8
(1) 1319/     678 : 16 00               		ld	d,0
(1) 1320/     67A : 5F                  		ld	e,a
(1) 1321/     67B : C5                  		push	bc			; Save bc, hl and ix
(1) 1322/     67C : E5                  		push	hl
(1) 1323/     67D : DD E5               		push	ix
(1) 1324/     67F : DD 19               		add	ix,de
(1) 1325/     681 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1326/     684 : E6 0F               		and	00001111b
(1) 1327/     686 : C4 96 06            		call	nz,.do_chip		; Call if non-zero
(1) 1328/     689 : CF                  		rst	8
(1) 1329/     68A : DD E1               		pop	ix
(1) 1330/     68C : E1                  		pop	hl
(1) 1331/     68D : C1                  		pop	bc
(1) 1332/     68E :                     .no_indx:
(1) 1333/     68E : 23                  		inc	hl
(1) 1334/     68F : 10 DB               		djnz	.next_indx
(1) 1335/     691 : FD CB 00 9E         		res	3,(iy+seq_Status)	; RESET Volume update bit
(1) 1336/     695 : C9                  		ret
(1) 1337/     696 :                     
(1) 1338/     696 :                     ; ----------------------------------------
(1) 1339/     696 :                     ; iy - Track buffer
(1) 1340/     696 :                     ; ix - Current channel
(1) 1341/     696 :                     
(1) 1342/     696 :                     .do_chip:
(1) 1343/     696 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1344/     699 : B7                  		or	a
(1) 1345/     69A : C8                  		ret	z			; If 0 == stop
(1) 1346/     69B : 3D                  		dec	a			; inst-1
(1) 1347/     69C : E6 7F               		and	01111111b
(1) 1348/     69E : 21 C5 17            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1349/     6A1 : E5                  		push	hl
(1) 1350/     6A2 : CF                  		rst	8
(1) 1351/     6A3 : 07                  		rlca
(1) 1352/     6A4 : 07                  		rlca
(1) 1353/     6A5 : 07                  		rlca
(1) 1354/     6A6 : 47                  		ld	b,a
(1) 1355/     6A7 : E6 F8               		and	11111000b
(1) 1356/     6A9 : 4F                  		ld	c,a
(1) 1357/     6AA : 78                  		ld	a,b
(1) 1358/     6AB : AF                  		xor	a
(1) 1359/     6AC : E6 03               		and	00000011b
(1) 1360/     6AE : CF                  		rst	8
(1) 1361/     6AF : 47                  		ld	b,a
(1) 1362/     6B0 : EB                  		ex	hl,de
(1) 1363/     6B1 : FD 6E 1F            		ld	l,(iy+seq_RomInst)
(1) 1364/     6B4 : FD 66 20            		ld	h,(iy+(seq_RomInst+1))
(1) 1365/     6B7 : FD 7E 21            		ld	a,(iy+(seq_RomInst+2))
(1) 1366/     6BA : 09                  		add	hl,bc
(1) 1367/     6BB : CE 00               		adc	a,0
(1) 1368/     6BD : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1369/     6C0 : CD A8 0F            		call	readRom			; ** ROM access **
(1) 1370/     6C3 : E1                  		pop	hl
(1) 1371/     6C4 : E5                  		push	hl			; <-- save hl
(1) 1372/     6C5 : CD E0 06            		call	.grab_link
(1) 1373/     6C8 : D1                  		pop	de			; --> recover as de
(1) 1374/     6C9 :                     	; hl - current table
(1) 1375/     6C9 :                     	; de - instrument data
(1) 1376/     6C9 : FE FF               		cp	-1			; Found any link?
(1) 1377/     6CB : C8                  		ret	z
(1) 1378/     6CC : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1379/     6CD : 23                  		inc	hl
(1) 1380/     6CE : 23                  		inc	hl
(1) 1381/     6CF : 23                  		inc	hl
(1) 1382/     6D0 : CF                  		rst	8
(1) 1383/     6D1 : FD 7E 0E            		ld	a,(iy+seq_VolMaster)
(1) 1384/     6D4 : 77                  		ld	(hl),a
(1) 1385/     6D5 : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1386/     6D8 : 09                  		add	hl,bc
(1) 1387/     6D9 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1388/     6DA : 01 08 00            		ld	bc,8
(1) 1389/     6DD : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1390/     6DF : C9                  		ret
(1) 1391/     6E0 :                     
(1) 1392/     6E0 :                     ; ----------------------------------------
(1) 1393/     6E0 :                     ; Search for a linked channel on the
(1) 1394/     6E0 :                     ; chip table
(1) 1395/     6E0 :                     ;
(1) 1396/     6E0 :                     ; Input:
(1) 1397/     6E0 :                     ; iy - Track buffer
(1) 1398/     6E0 :                     ; ix - Current channel
(1) 1399/     6E0 :                     ; hl - Intrument data
(1) 1400/     6E0 :                     ;
(1) 1401/     6E0 :                     ; Returns:
(1) 1402/     6E0 :                     ; hl | Channel table to use
(1) 1403/     6E0 :                     ;  a | Return value:
(1) 1404/     6E0 :                     ;       0 | Found
(1) 1405/     6E0 :                     ;      -1 | Not found
(1) 1406/     6E0 :                     ; ----------------------------------------
(1) 1407/     6E0 :                     
(1) 1408/     6E0 :                     .grab_link:
(1) 1409/     6E0 : 7E                  		ld	a,(hl)
(1) 1410/     6E1 : E6 F0               		and	11110000b
(1) 1411/     6E3 : 5F                  		ld	e,a			; e - NEW chip
(1) 1412/     6E4 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1413/     6E7 : E6 F0               		and	11110000b
(1) 1414/     6E9 : 28 72               		jr	z,.new_chip		; If current is blank, it's a NEW chip
(1) 1415/     6EB : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1416/     6EC : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1417/     6EE : CF                  		rst	8
(1) 1418/     6EF : 57                  		ld	d,a			; d - Chip to silence
(1) 1419/     6F0 : D5                  		push	de
(1) 1420/     6F1 : CD 0B 07            		call	.srch_link		; Search OLD link
(1) 1421/     6F4 : D1                  		pop	de
(1) 1422/     6F5 : FE FF               		cp	-1
(1) 1423/     6F7 : 28 03               		jr	z,.dont_res
(1) 1424/     6F9 : CD 05 0F            		call	tblz_clear
(1) 1425/     6FC :                     .dont_res:
(1) 1426/     6FC : CF                  		rst	8
(1) 1427/     6FD : 18 5E               		jr	.new_chip
(1) 1428/     6FF :                     .same_link:
(1) 1429/     6FF : CD 0B 07            		call	.srch_link		; Search link
(1) 1430/     702 : FE FF               		cp	-1
(1) 1431/     704 : C0                  		ret	nz
(1) 1432/     705 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1433/     708 : CF                  		rst	8
(1) 1434/     709 : 18 52               		jr	.new_chip
(1) 1435/     70B :                     
(1) 1436/     70B :                     ; ----------------------------------------
(1) 1437/     70B :                     ; Search same link
(1) 1438/     70B :                     ;
(1) 1439/     70B :                     ; a - Chip to search for
(1) 1440/     70B :                     ; e - NEW chip
(1) 1441/     70B :                     ; ----------------------------------------
(1) 1442/     70B :                     
(1) 1443/     70B :                     .srch_link:
(1) 1444/     70B : CD D0 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1445/     70E : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1446/     710 : C1                  		pop	bc
(1) 1447/     711 : B7                  		or	a			; Single table?
(1) 1448/     712 : FA 29 07            		jp	m,.singl_link
(1) 1449/     715 :                     .srch_lloop:
(1) 1450/     715 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1451/     716 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1452/     718 : 28 3F               		jr	z,.not_samel
(1) 1453/     71A : B9                  		cp	c			; Same link LSB?
(1) 1454/     71B : 20 07               		jr	nz,.invldl
(1) 1455/     71D : 23                  		inc	hl
(1) 1456/     71E : CF                  		rst	8
(1) 1457/     71F : 7E                  		ld	a,(hl)
(1) 1458/     720 : 2B                  		dec	hl
(1) 1459/     721 : B8                  		cp	b			; Same link MSB?
(1) 1460/     722 : 28 13               		jr	z,.got_link
(1) 1461/     724 :                     .invldl:
(1) 1462/     724 : CD C9 07            		call	.nextsrch_tbl
(1) 1463/     727 : 18 EC               		jr	.srch_lloop
(1) 1464/     729 :                     
(1) 1465/     729 :                     ; --------------------------------
(1) 1466/     729 :                     ; PSGN/FM3/FM6
(1) 1467/     729 :                     ; --------------------------------
(1) 1468/     729 :                     
(1) 1469/     729 :                     .singl_link:
(1) 1470/     729 : 23                  		inc	hl			; Read MSB first
(1) 1471/     72A : 7E                  		ld	a,(hl)
(1) 1472/     72B : 2B                  		dec	hl
(1) 1473/     72C : CF                  		rst	8
(1) 1474/     72D : B8                  		cp	b			; MSB match?
(1) 1475/     72E : 20 29               		jr	nz,.not_samel
(1) 1476/     730 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1477/     731 : B9                  		cp	c
(1) 1478/     732 : 20 25               		jr	nz,.not_samel
(1) 1479/     734 : C3 5B 07            		jp	.rnot_psg
(1) 1480/     737 :                     
(1) 1481/     737 :                     ; ----------------------------------------
(1) 1482/     737 :                     ; Got the link, do special checks
(1) 1483/     737 :                     ; ----------------------------------------
(1) 1484/     737 :                     
(1) 1485/     737 :                     .got_link:
(1) 1486/     737 : E5                  		push	hl
(1) 1487/     738 : 23                  		inc	hl
(1) 1488/     739 : 23                  		inc	hl
(1) 1489/     73A : 23                  		inc	hl		; <-- ztbl_Chip
(1) 1490/     73B : CF                  		rst	8
(1) 1491/     73C : 4E                  		ld	c,(hl)		; c - ID
(1) 1492/     73D : E1                  		pop	hl
(1) 1493/     73E :                     	; PSG3/PSGN check
(1) 1494/     73E : 7B                  		ld	a,e
(1) 1495/     73F : FE 80               		cp	80h		; PSG?
(1) 1496/     741 : 20 18               		jr	nz,.rnot_psg
(1) 1497/     743 : 3A 2F 00            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1498/     746 : E6 03               		and	011b
(1) 1499/     748 : FE 03               		cp	011b
(1) 1500/     74A : 20 0F               		jr	nz,.rnot_psg
(1) 1501/     74C : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1502/     74D : FE 02               		cp	2
(1) 1503/     74F : 20 0A               		jr	nz,.rnot_psg
(1) 1504/     751 : CF                  		rst	8
(1) 1505/     752 : D5                  		push	de
(1) 1506/     753 : 16 80               		ld	d,80h		; Force silence
(1) 1507/     755 : CD 05 0F            		call	tblz_clear
(1) 1508/     758 : D1                  		pop	de
(1) 1509/     759 :                     .not_samel:
(1) 1510/     759 : 18 52               		jr	.set_asfull
(1) 1511/     75B :                     .rnot_psg:
(1) 1512/     75B : AF                  		xor	a
(1) 1513/     75C : C9                  		ret
(1) 1514/     75D :                     
(1) 1515/     75D :                     ; ----------------------------------------
(1) 1516/     75D :                     ; *** NEW CHIP ***
(1) 1517/     75D :                     ;
(1) 1518/     75D :                     ; Input:
(1) 1519/     75D :                     ; e - Chip to set
(1) 1520/     75D :                     ; ----------------------------------------
(1) 1521/     75D :                     
(1) 1522/     75D :                     .new_chip:
(1) 1523/     75D : 7B                  		ld	a,e			; Read NEW chip
(1) 1524/     75E : B7                  		or	a
(1) 1525/     75F : F2 AD 07            		jp	p,.set_asfull		; If Null, mark as full
(1) 1526/     762 : CD D0 07            		call	.pick_tbl		; Pick chip table
(1) 1527/     765 : CF                  		rst	8
(1) 1528/     766 : FD 4E 14            		ld	c,(iy+seq_Priority)	; c - Seq priority level
(1) 1529/     769 : B7                  		or	a			; Chip is single?
(1) 1530/     76A : FA 98 07            		jp	m,.singl_free
(1) 1531/     76D : E5                  		push	hl			; Backup START table
(1) 1532/     76E :                     ; PASS 1
(1) 1533/     76E :                     .srch_free:
(1) 1534/     76E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1535/     76F : FE FF               		cp	-1			; If -1, return -1
(1) 1536/     771 : 28 0F               		jr	z,.pass_2
(1) 1537/     773 : 23                  		inc	hl
(1) 1538/     774 : 46                  		ld	b,(hl)			; Read MSB
(1) 1539/     775 : 2B                  		dec	hl
(1) 1540/     776 : B0                  		or	b
(1) 1541/     777 : 28 05               		jr	z,.found_tnew
(1) 1542/     779 : CD C9 07            		call	.nextsrch_tbl
(1) 1543/     77C : 18 F0               		jr	.srch_free
(1) 1544/     77E :                     .found_tnew:
(1) 1545/     77E : 33                  		inc	sp			; skip backup
(1) 1546/     77F : 33                  		inc	sp
(1) 1547/     780 : 18 36               		jr	.new_link
(1) 1548/     782 :                     ; PASS 2
(1) 1549/     782 :                     .pass_2:
(1) 1550/     782 : E1                  		pop	hl			; Recover START
(1) 1551/     783 :                     .next_prio:
(1) 1552/     783 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1553/     784 : FE FF               		cp	-1			; If -1, return -1
(1) 1554/     786 : C8                  		ret	z
(1) 1555/     787 : 23                  		inc	hl
(1) 1556/     788 : 23                  		inc	hl
(1) 1557/     789 : 7E                  		ld	a,(hl)			; Read priority
(1) 1558/     78A : 2B                  		dec	hl
(1) 1559/     78B : 2B                  		dec	hl
(1) 1560/     78C : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1561/     78D : 28 21               		jr	z,.ovrw_link
(1) 1562/     78F : B9                  		cp	c
(1) 1563/     790 : 38 1E               		jr	c,.ovrw_link		; PRIORITY
(1) 1564/     792 : CF                  		rst	8
(1) 1565/     793 : CD C9 07            		call	.nextsrch_tbl
(1) 1566/     796 : 18 EB               		jr	.next_prio
(1) 1567/     798 :                     
(1) 1568/     798 :                     ; ----------------------------------------
(1) 1569/     798 :                     ; Single slot PSGN/FM3/FM6
(1) 1570/     798 :                     ;
(1) 1571/     798 :                     ; c - priority
(1) 1572/     798 :                     ; e - chip
(1) 1573/     798 :                     ; ----------------------------------------
(1) 1574/     798 :                     
(1) 1575/     798 :                     .singl_free:
(1) 1576/     798 : E5                  		push	hl
(1) 1577/     799 : 46                  		ld	b,(hl)
(1) 1578/     79A : 23                  		inc	hl
(1) 1579/     79B : 7E                  		ld	a,(hl)
(1) 1580/     79C : 23                  		inc	hl
(1) 1581/     79D : 56                  		ld	d,(hl)		; this prio
(1) 1582/     79E : E1                  		pop	hl
(1) 1583/     79F : B0                  		or	b
(1) 1584/     7A0 : 28 0E               		jr	z,.ovrw_link
(1) 1585/     7A2 : CF                  		rst	8
(1) 1586/     7A3 : 7A                  		ld	a,d
(1) 1587/     7A4 : B7                  		or	a
(1) 1588/     7A5 : 28 09               		jr	z,.ovrw_link
(1) 1589/     7A7 : B9                  		cp	c
(1) 1590/     7A8 : 38 06               		jr	c,.ovrw_link	; PRIORITY
(1) 1591/     7AA : 28 04               		jr	z,.ovrw_link	; <-- ALWAYS overwrite
(1) 1592/     7AC : CF                  		rst	8
(1) 1593/     7AD :                     .set_asfull:
(1) 1594/     7AD : 3E FF               		ld	a,-1		; Return -1
(1) 1595/     7AF : C9                  		ret
(1) 1596/     7B0 :                     
(1) 1597/     7B0 :                     ; ----------------------------------------
(1) 1598/     7B0 :                     
(1) 1599/     7B0 :                     .ovrw_link:
(1) 1600/     7B0 : E5                  		push	hl
(1) 1601/     7B1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1602/     7B4 : CD 05 0F            		call	tblz_clear
(1) 1603/     7B7 : E1                  		pop	hl
(1) 1604/     7B8 :                     .new_link:
(1) 1605/     7B8 : CF                  		rst	8
(1) 1606/     7B9 : 23                  		inc	hl
(1) 1607/     7BA : 23                  		inc	hl
(1) 1608/     7BB :                     ; hl+2
(1) 1609/     7BB :                     .l_hiprio:
(1) 1610/     7BB : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1611/     7BE : DD E5               		push	ix
(1) 1612/     7C0 : D1                  		pop	de
(1) 1613/     7C1 : 71                  		ld	(hl),c		; Write priority
(1) 1614/     7C2 : 2B                  		dec	hl
(1) 1615/     7C3 : CF                  		rst	8
(1) 1616/     7C4 : 72                  		ld 	(hl),d		; MSB
(1) 1617/     7C5 : 2B                  		dec	hl
(1) 1618/     7C6 : 73                  		ld	(hl),e		; LSB
(1) 1619/     7C7 : AF                  		xor	a		; Return OK
(1) 1620/     7C8 : C9                  		ret
(1) 1621/     7C9 :                     
(1) 1622/     7C9 :                     ; ----------------------------------------
(1) 1623/     7C9 :                     
(1) 1624/     7C9 :                     .nextsrch_tbl:
(1) 1625/     7C9 : D5                  		push	de
(1) 1626/     7CA : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1627/     7CD : 19                  		add	hl,de
(1) 1628/     7CE : D1                  		pop	de
(1) 1629/     7CF : C9                  		ret
(1) 1630/     7D0 :                     
(1) 1631/     7D0 :                     ; ----------------------------------------
(1) 1632/     7D0 :                     ; Pick chip table
(1) 1633/     7D0 :                     ;
(1) 1634/     7D0 :                     ; Input:
(1) 1635/     7D0 :                     ; a  - Chip ID
(1) 1636/     7D0 :                     ;
(1) 1637/     7D0 :                     ; Output:
(1) 1638/     7D0 :                     ; hl - Current table
(1) 1639/     7D0 :                     ; a  - bit 7 only: multi or single table
(1) 1640/     7D0 :                     ; ----------------------------------------
(1) 1641/     7D0 :                     
(1) 1642/     7D0 :                     .pick_tbl:
(1) 1643/     7D0 : D5                  		push	de
(1) 1644/     7D1 : 0F                  		rrca
(1) 1645/     7D2 : 0F                  		rrca
(1) 1646/     7D3 : 0F                  		rrca
(1) 1647/     7D4 : 0F                  		rrca
(1) 1648/     7D5 : E6 07               		and	00000111b
(1) 1649/     7D7 : 87                  		add	a,a
(1) 1650/     7D8 : 21 00 1B            		ld	hl,tblList
(1) 1651/     7DB : E5                  		push	hl
(1) 1652/     7DC : 16 00               		ld	d,0
(1) 1653/     7DE : 5F                  		ld	e,a
(1) 1654/     7DF : 19                  		add	hl,de
(1) 1655/     7E0 : 5E                  		ld	e,(hl)
(1) 1656/     7E1 : 23                  		inc	hl
(1) 1657/     7E2 : 7E                  		ld	a,(hl)
(1) 1658/     7E3 : 57                  		ld	d,a
(1) 1659/     7E4 : E6 80               		and	10000000b
(1) 1660/     7E6 : CB BA               		res	7,d
(1) 1661/     7E8 : E1                  		pop	hl
(1) 1662/     7E9 : 19                  		add	hl,de
(1) 1663/     7EA : D1                  		pop	de
(1) 1664/     7EB : C9                  		ret
(1) 1665/     7EC :                     
(1) 1666/     7EC :                     ; ============================================
(1) 1667/     7EC :                     ; ----------------------------------------
(1) 1668/     7EC :                     ; Process chip using it's table
(1) 1669/     7EC :                     ;
(1) 1670/     7EC :                     ; iy - table to read
(1) 1671/     7EC :                     ; ----------------------------------------
(1) 1672/     7EC :                     
(1) 1673/     7EC :                     dtbl_multi:
(1) 1674/     7EC : FD 7E 00            		ld	a,(iy)
(1) 1675/     7EF : FE FF               		cp	-1
(1) 1676/     7F1 : C8                  		ret	z
(1) 1677/     7F2 : CF                  		rst	8
(1) 1678/     7F3 : CD 00 08            		call	dtbl_singl
(1) 1679/     7F6 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1680/     7F9 : FD 19               		add	iy,de
(1) 1681/     7FB : CF                  		rst	8
(1) 1682/     7FC : 00                  		nop
(1) 1683/     7FD : 00                  		nop
(1) 1684/     7FE : 18 EC               		jr	dtbl_multi
(1) 1685/     800 :                     dtbl_singl:
(1) 1686/     800 : FD 5E 00            		ld	e,(iy)			; Read link
(1) 1687/     803 : FD 56 01            		ld	d,(iy+1)
(1) 1688/     806 : 7A                  		ld	a,d			; If no-zero, active
(1) 1689/     807 : B3                  		or	e
(1) 1690/     808 : 20 60               		jr	nz,.linked
(1) 1691/     80A : FD 7E 02            		ld	a,(iy+ztbl_Priority)	; Silence request?
(1) 1692/     80D : B7                  		or	a
(1) 1693/     80E : F0                  		ret	p			; Return if not.
(1) 1694/     80F : CF                  		rst	8
(1) 1695/     810 : FD 36 02 00         		ld	(iy+ztbl_Priority),0	; Reset request on memory
(1) 1696/     814 :                     
(1) 1697/     814 :                     ; ----------------------------------------
(1) 1698/     814 :                     ; chip-silence request
(1) 1699/     814 :                     ; iy - Table
(1) 1700/     814 :                     
(1) 1701/     814 : 06 00               		ld	b,0
(1) 1702/     816 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1703/     819 : E6 F0               		and	11110000b
(1) 1704/     81B : FE 80               		cp	80h
(1) 1705/     81D : 28 1E               		jr	z,.siln_psg
(1) 1706/     81F : FE 90               		cp	90h
(1) 1707/     821 : 28 16               		jr	z,.siln_psg_n
(1) 1708/     823 : FE A0               		cp	0A0h
(1) 1709/     825 : 28 3D               		jr	z,.siln_fm
(1) 1710/     827 : FE B0               		cp	0B0h
(1) 1711/     829 : 28 39               		jr	z,.siln_fm
(1) 1712/     82B : CF                  		rst	8
(1) 1713/     82C : FE C0               		cp	0C0h
(1) 1714/     82E : 28 31               		jr	z,.siln_dac
(1) 1715/     830 : FE D0               		cp	0D0h
(1) 1716/     832 : 28 0F               		jr	z,.siln_pcm
(1) 1717/     834 : FE E0               		cp	0E0h
(1) 1718/     836 : 28 1C               		jr	z,.siln_pwm
(1) 1719/     838 : C9                  		ret
(1) 1720/     839 :                     .siln_psg_n:
(1) 1721/     839 : AF                  		xor	a
(1) 1722/     83A : 32 2F 00            		ld	(psgHatMode),a
(1) 1723/     83D :                     .siln_psg:
(1) 1724/     83D : CF                  		rst	8
(1) 1725/     83E : 21 1E 15            		ld	hl,psgcom
(1) 1726/     841 : 18 1A               		jr	.rcyl_com
(1) 1727/     843 :                     
(1) 1728/     843 :                     ; --------------------------------
(1) 1729/     843 :                     
(1) 1730/     843 :                     .siln_pcm:
(1) 1731/     843 : 3E 01               		ld	a,1
(1) 1732/     845 : 32 A2 17            		ld	(mcdUpd),a
(1) 1733/     848 : CF                  		rst	8
(1) 1734/     849 : 21 C6 14            		ld	hl,pcmcom+32
(1) 1735/     84C : 09                  		add	hl,bc
(1) 1736/     84D : 36 FF               		ld	(hl),-1
(1) 1737/     84F : 21 A6 14            		ld	hl,pcmcom
(1) 1738/     852 : 18 09               		jr	.rcyl_com
(1) 1739/     854 :                     .siln_pwm:
(1) 1740/     854 : 3E 01               		ld	a,1
(1) 1741/     856 : 32 A1 17            		ld	(marsUpd),a
(1) 1742/     859 : CF                  		rst	8
(1) 1743/     85A : 21 E6 14            		ld	hl,pwmcom
(1) 1744/     85D :                     .rcyl_com:
(1) 1745/     85D : 09                  		add	hl,bc
(1) 1746/     85E : 36 04               		ld	(hl),100b	; key-cut
(1) 1747/     860 : C9                  		ret
(1) 1748/     861 :                     
(1) 1749/     861 :                     ; --------------------------------
(1) 1750/     861 :                     
(1) 1751/     861 :                     .siln_dac:
(1) 1752/     861 : CD F3 11            		call	dac_off
(1) 1753/     864 :                     .siln_fm:
(1) 1754/     864 : CD 6B 0A            		call	.fm_tloff
(1) 1755/     867 : C3 63 0A            		jp	.fm_keyoff
(1) 1756/     86A :                     
(1) 1757/     86A :                     ; ----------------------------------------
(1) 1758/     86A :                     ; Process channel now
(1) 1759/     86A :                     ; iy - Table
(1) 1760/     86A :                     ; ix - Tracker channel
(1) 1761/     86A :                     .linked:
(1) 1762/     86A : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1763/     86B : 47                  		ld	b,a		; b - flags to check
(1) 1764/     86C : E6 0F               		and	00001111b	; evin flags?
(1) 1765/     86E : C8                  		ret	z
(1) 1766/     86F : 78                  		ld	a,b
(1) 1767/     870 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1768/     872 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1769/     873 : CF                  		rst	8
(1) 1770/     874 : FD E5               		push	iy		; table+10h instrment data
(1) 1771/     876 : D5                  		push	de
(1) 1772/     877 : DD E1               		pop	ix
(1) 1773/     879 : E1                  		pop	hl
(1) 1774/     87A : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1775/     87D : 19                  		add	hl,de
(1) 1776/     87E :                     	; --------------------------------
(1) 1777/     87E :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1778/     87E :                     	; iy - Our chip table
(1) 1779/     87E :                     	; ix - Track channel
(1) 1780/     87E :                     	; hl - Intrument data
(1) 1781/     87E : 78                  		ld	a,b		; Note and/or Inst?
(1) 1782/     87F : E6 03               		and	0011b
(1) 1783/     881 : C4 AC 08            		call	nz,.reset_effc	; Reset effects
(1) 1784/     884 : CB 50               		bit	2,b		; Volume
(1) 1785/     886 : C4 13 0D            		call	nz,.volu
(1) 1786/     889 : CF                  		rst	8
(1) 1787/     88A : CB 40               		bit	0,b		; Note
(1) 1788/     88C : C4 B2 0E            		call	nz,.note
(1) 1789/     88F : CB 48               		bit	1,b		; Intrument
(1) 1790/     891 : C4 1C 0D            		call	nz,.inst
(1) 1791/     894 : CB 58               		bit	3,b		; Effect
(1) 1792/     896 : C4 28 0C            		call	nz,.effc
(1) 1793/     899 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1794/     89A : E6 70               		and	01110000b	; Filter bits
(1) 1795/     89C : 0F                  		rrca
(1) 1796/     89D : CF                  		rst	8
(1) 1797/     89E : 0F                  		rrca
(1) 1798/     89F : 0F                  		rrca
(1) 1799/     8A0 : 16 00               		ld	d,0
(1) 1800/     8A2 : 5F                  		ld	e,a
(1) 1801/     8A3 : 21 B9 08            		ld	hl,.mk_list
(1) 1802/     8A6 : 19                  		add	hl,de
(1) 1803/     8A7 : 7E                  		ld	a,(hl)
(1) 1804/     8A8 : 23                  		inc	hl
(1) 1805/     8A9 : 66                  		ld	h,(hl)
(1) 1806/     8AA : 6F                  		ld	l,a
(1) 1807/     8AB : E9                  		jp	(hl)
(1) 1808/     8AC :                     .reset_effc:
(1) 1809/     8AC : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1810/     8B0 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1811/     8B4 : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1812/     8B8 : C9                  		ret
(1) 1813/     8B9 :                     
(1) 1814/     8B9 :                     ; --------------------------------
(1) 1815/     8B9 :                     .mk_list:
(1) 1816/     8B9 : C7 08               		dw .mk_psg
(1) 1817/     8BB : C7 08               		dw .mk_psg
(1) 1818/     8BD : 7A 09               		dw .mk_fm
(1) 1819/     8BF : FE 09               		dw .mk_fm_sp
(1) 1820/     8C1 : B2 0B               		dw .mk_dac
(1) 1821/     8C3 : 08 0C               		dw .mk_pcm
(1) 1822/     8C5 : 09 0C               		dw .mk_pwm
(1) 1823/     8C7 :                     
(1) 1824/     8C7 :                     ; --------------------------------
(1) 1825/     8C7 :                     ; PSG and PSGN
(1) 1826/     8C7 :                     ; --------------------------------
(1) 1827/     8C7 :                     
(1) 1828/     8C7 :                     .mk_psg:
(1) 1829/     8C7 : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1830/     8CA : DD E5               		push	ix			; * Save ix
(1) 1831/     8CC : CF                  		rst	8
(1) 1832/     8CD : DD 21 1E 15         		ld	ix,psgcom		; ix - psgcom
(1) 1833/     8D1 : 16 00               		ld	d,0
(1) 1834/     8D3 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1835/     8D6 : DD 19               		add	ix,de			; Get com index
(1) 1836/     8D8 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1837/     8D9 : E6 03               		and	0011b
(1) 1838/     8DB : 28 4A               		jr	z,.psgc_proc		; Process only
(1) 1839/     8DD : 79                  		ld	a,c			; c - Note
(1) 1840/     8DE : B7                  		or	a
(1) 1841/     8DF : C8                  		ret	z
(1) 1842/     8E0 : CF                  		rst	8
(1) 1843/     8E1 : FE FE               		cp	-2			; Key cut?
(1) 1844/     8E3 : 28 32               		jr	z,.kycut_psg
(1) 1845/     8E5 : FE FF               		cp	-1			; Key off?
(1) 1846/     8E7 : 28 22               		jr	z,.kyoff_psg
(1) 1847/     8E9 : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1848/     8ED : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1849/     8EE : 11 00 00            		ld	de,0			; Clear de
(1) 1850/     8F1 : FE 03               		cp	3			; NOISE channel?
(1) 1851/     8F3 : 20 0E               		jr	nz,.not_ns
(1) 1852/     8F5 : CF                  		rst	8
(1) 1853/     8F6 : 3A 2F 00            		ld	a,(psgHatMode)		; Tone 3?
(1) 1854/     8F9 : E6 03               		and	011b
(1) 1855/     8FB : FE 03               		cp	011b
(1) 1856/     8FD : C2 4A 09            		jp	nz,.psg_keyon		; Normal
(1) 1857/     900 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1858/     903 :                     .not_ns:
(1) 1859/     903 : CD 65 09            		call	.psg_getfreq
(1) 1860/     906 : 18 26               		jr	.psgc_keyon
(1) 1861/     908 :                     
(1) 1862/     908 :                     ; --------------------------------
(1) 1863/     908 :                     ; -1
(1) 1864/     908 :                     .kyoff_psgn:
(1) 1865/     908 : CD 20 09            		call	.kypsgn_hatoff
(1) 1866/     90B :                     .kyoff_psg:
(1) 1867/     90B : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1868/     90F : DD E1               		pop	ix			; * Restore ix
(1) 1869/     911 : C3 FE 0E            		jp	.chnl_ulnk
(1) 1870/     914 :                     
(1) 1871/     914 :                     ; --------------------------------
(1) 1872/     914 :                     ; -2
(1) 1873/     914 :                     .kycut_psgn:
(1) 1874/     914 : CD 20 09            		call	.kypsgn_hatoff
(1) 1875/     917 :                     .kycut_psg:
(1) 1876/     917 : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1877/     91B : DD E1               		pop	ix			; * Restore ix
(1) 1878/     91D : C3 FE 0E            		jp	.chnl_ulnk
(1) 1879/     920 :                     
(1) 1880/     920 :                     
(1) 1881/     920 :                     .kypsgn_hatoff:
(1) 1882/     920 : 3E 00               		ld	a,000b
(1) 1883/     922 : 32 2F 00            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1884/     925 : CF                  		rst	8
(1) 1885/     926 : C9                  		ret
(1) 1886/     927 :                     
(1) 1887/     927 :                     ; --------------------------------
(1) 1888/     927 :                     ; hl - current freq
(1) 1889/     927 :                     ; ix - psgcom
(1) 1890/     927 :                     ; b - flags
(1) 1891/     927 :                     
(1) 1892/     927 :                     .psgc_proc:
(1) 1893/     927 : CF                  		rst	8
(1) 1894/     928 : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1895/     92B : DD 66 20            		ld	h,(ix+DTH)
(1) 1896/     92E :                     .psgc_keyon:
(1) 1897/     92E : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1898/     931 : B7                  		or	a
(1) 1899/     932 : CA 44 09            		jp	z,.no_req
(1) 1900/     935 : ED 44               		neg	a
(1) 1901/     937 : 5F                  		ld	e,a
(1) 1902/     938 : 4F                  		ld	c,a
(1) 1903/     939 : AF                  		xor	a
(1) 1904/     93A : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1905/     93D : 3F                  		ccf
(1) 1906/     93E : CB 21               		sla	c
(1) 1907/     940 : 9F                  		sbc	a,a
(1) 1908/     941 : 57                  		ld	d,a
(1) 1909/     942 : CF                  		rst	8
(1) 1910/     943 : 19                  		add	hl,de
(1) 1911/     944 :                     .no_req:
(1) 1912/     944 : DD 75 1C            		ld	(ix+DTL),l
(1) 1913/     947 : DD 74 20            		ld	(ix+DTH),h
(1) 1914/     94A :                     .psg_keyon:
(1) 1915/     94A : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1916/     94D : 87                  		add	a,a
(1) 1917/     94E : 5F                  		ld	e,a
(1) 1918/     94F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1919/     952 : 93                  		sub	a,e
(1) 1920/     953 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1921/     956 : ED 44               		neg	a
(1) 1922/     958 : CF                  		rst	8
(1) 1923/     959 : 87                  		add	a,a
(1) 1924/     95A : 87                  		add	a,a
(1) 1925/     95B : 30 02               		jr	nc,.vmuch
(1) 1926/     95D : 3E FF               		ld	a,-1
(1) 1927/     95F :                     .vmuch:
(1) 1928/     95F : DD 77 30            		ld	(ix+MVOL),a
(1) 1929/     962 : DD E1               		pop	ix			; * Restore ix
(1) 1930/     964 : C9                  		ret
(1) 1931/     965 :                     
(1) 1932/     965 :                     ; --------------------------------
(1) 1933/     965 :                     ; de - increment
(1) 1934/     965 :                     
(1) 1935/     965 :                     .psg_getfreq:
(1) 1936/     965 : 21 DC 12            		ld	hl,psgFreq_List-(36*2)
(1) 1937/     968 : 19                  		add	hl,de
(1) 1938/     969 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1939/     96C : 19                  		add	hl,de
(1) 1940/     96D : 7E                  		ld	a,(hl)
(1) 1941/     96E : 23                  		inc	hl
(1) 1942/     96F : CF                  		rst	8
(1) 1943/     970 : 66                  		ld	h,(hl)
(1) 1944/     971 : 6F                  		ld	l,a
(1) 1945/     972 : 3A 88 1F            		ld	a,(palMode)
(1) 1946/     975 : B7                  		or	a
(1) 1947/     976 : 28 01               		jr	z,.fnot_pal
(1) 1948/     978 : 2B                  		dec	hl
(1) 1949/     979 :                     .fnot_pal:
(1) 1950/     979 : C9                  		ret
(1) 1951/     97A :                     
(1) 1952/     97A :                     ; --------------------------------
(1) 1953/     97A :                     ; FM
(1) 1954/     97A :                     ; --------------------------------
(1) 1955/     97A :                     
(1) 1956/     97A :                     .mk_fm:
(1) 1957/     97A : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1958/     97D : 78                  		ld	a,b			; Get NOTE and/or INS?
(1) 1959/     97E : E6 03               		and	0011b
(1) 1960/     980 : 28 32               		jr	z,.mkfm_proc		; Process only
(1) 1961/     982 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1962/     985 : B7                  		or	a
(1) 1963/     986 : C8                  		ret	z
(1) 1964/     987 : FE FE               		cp	-2			; Key-cut?
(1) 1965/     989 : CA 57 0A            		jp	z,.fm_cut
(1) 1966/     98C : CF                  		rst	8
(1) 1967/     98D : FE FF               		cp	-1			; Key-off?
(1) 1968/     98F : CA 4E 0A            		jp	z,.fm_off
(1) 1969/     992 : CD 63 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1970/     995 : 79                  		ld	a,c
(1) 1971/     996 : FE 06               		cp	6			; Check FM6
(1) 1972/     998 : 20 05               		jr	nz,.not_dac
(1) 1973/     99A : CD F3 11            		call	dac_off			; Turn DAC off
(1) 1974/     99D : 18 15               		jr	.mkfm_proc
(1) 1975/     99F :                     .not_dac:
(1) 1976/     99F : FE 02               		cp	2			; Check FM3
(1) 1977/     9A1 : 20 11               		jr	nz,.mkfm_proc
(1) 1978/     9A3 : 3A 30 00            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1979/     9A6 : B7                  		or	a
(1) 1980/     9A7 : 28 0B               		jr	z,.mkfm_proc
(1) 1981/     9A9 : CF                  		rst	8
(1) 1982/     9AA : AF                  		xor	a
(1) 1983/     9AB : 32 30 00            		ld	(fmSpecial),a
(1) 1984/     9AE : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1985/     9B1 : CD C8 11            		call	fm_send_1
(1) 1986/     9B4 :                     .mkfm_proc:
(1) 1987/     9B4 : CF                  		rst	8
(1) 1988/     9B5 : C5                  		push	bc
(1) 1989/     9B6 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1990/     9B9 : 47                  		ld	b,a
(1) 1991/     9BA : E6 1F               		and	00011111b
(1) 1992/     9BC : 5F                  		ld	e,a
(1) 1993/     9BD : 16 00               		ld	d,0
(1) 1994/     9BF : 21 0C 13            		ld	hl,fmFreq_List
(1) 1995/     9C2 : 19                  		add	hl,de
(1) 1996/     9C3 : 7E                  		ld	a,(hl)
(1) 1997/     9C4 : CF                  		rst	8
(1) 1998/     9C5 : 23                  		inc	hl
(1) 1999/     9C6 : 66                  		ld	h,(hl)
(1) 2000/     9C7 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2001/     9C8 : 3A 88 1F            		ld	a,(palMode)		; PAL speed check
(1) 2002/     9CB : B7                  		or	a
(1) 2003/     9CC : 28 04               		jr	z,.not_pal
(1) 2004/     9CE : 11 04 00            		ld	de,4			; freq + 4
(1) 2005/     9D1 : 19                  		add	hl,de
(1) 2006/     9D2 :                     .not_pal:
(1) 2007/     9D2 : 78                  		ld	a,b
(1) 2008/     9D3 : E6 E0               		and	11100000b
(1) 2009/     9D5 : 0F                  		rrca
(1) 2010/     9D6 : 0F                  		rrca
(1) 2011/     9D7 : B4                  		or	h
(1) 2012/     9D8 : 67                  		ld	h,a
(1) 2013/     9D9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2014/     9DC : CF                  		rst	8
(1) 2015/     9DD : AF                  		xor	a			; clear high
(1) 2016/     9DE : 3F                  		ccf				; clear carry
(1) 2017/     9DF : CB 23               		sla	e			; pitchbend << 2
(1) 2018/     9E1 : 00                  		nop				; **
(1) 2019/     9E2 : 9F                  		sbc	a,a			; get carry MSB
(1) 2020/     9E3 : 57                  		ld	d,a
(1) 2021/     9E4 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2022/     9E5 : 79                  		ld	a,c
(1) 2023/     9E6 : E6 03               		and	011b
(1) 2024/     9E8 : F6 A4               		or	0A4h
(1) 2025/     9EA : 57                  		ld	d,a
(1) 2026/     9EB : 5C                  		ld	e,h
(1) 2027/     9EC : CF                  		rst	8
(1) 2028/     9ED : CD C4 11            		call	fm_autoreg
(1) 2029/     9F0 : 79                  		ld	a,c
(1) 2030/     9F1 : E6 03               		and	011b
(1) 2031/     9F3 : F6 A0               		or	0A0h
(1) 2032/     9F5 : 57                  		ld	d,a
(1) 2033/     9F6 : 5D                  		ld	e,l
(1) 2034/     9F7 : CD C4 11            		call	fm_autoreg
(1) 2035/     9FA : C1                  		pop	bc
(1) 2036/     9FB : C3 99 0A            		jp	.mkfm_set
(1) 2037/     9FE :                     
(1) 2038/     9FE :                     ; --------------------------------
(1) 2039/     9FE :                     ; FM3 special
(1) 2040/     9FE :                     ; --------------------------------
(1) 2041/     9FE :                     
(1) 2042/     9FE :                     ; TODO: Do to PAL freq increment
(1) 2043/     9FE :                     
(1) 2044/     9FE :                     .mk_fm_sp:
(1) 2045/     9FE : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2046/     A00 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2047/     A01 : E6 03               		and	0011b
(1) 2048/     A03 : CA 99 0A            		jp	z,.mkfm_set		; Process only
(1) 2049/     A06 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2050/     A09 : B7                  		or	a
(1) 2051/     A0A : C8                  		ret	z
(1) 2052/     A0B : FE FE               		cp	-2
(1) 2053/     A0D : CA 57 0A            		jp	z,.fm_cut
(1) 2054/     A10 : FE FF               		cp	-1
(1) 2055/     A12 : CA 4E 0A            		jp	z,.fm_off
(1) 2056/     A15 : CD 63 0A            		call	.fm_keyoff
(1) 2057/     A18 : CF                  		rst	8
(1) 2058/     A19 : 21 AA 15            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2059/     A1C : 11 20 00            		ld	de,20h			; point to regs
(1) 2060/     A1F : 19                  		add	hl,de
(1) 2061/     A20 : DD E5               		push	ix
(1) 2062/     A22 : DD 21 46 0A         		ld	ix,.this_regs
(1) 2063/     A26 : 06 08               		ld	b,8
(1) 2064/     A28 :                     .wr_spc:
(1) 2065/     A28 : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2066/     A2B : 5E                  		ld	e,(hl)
(1) 2067/     A2C : CD C8 11            		call	fm_send_1
(1) 2068/     A2F : CF                  		rst	8
(1) 2069/     A30 : 23                  		inc	hl
(1) 2070/     A31 : DD 23               		inc	ix
(1) 2071/     A33 : 10 F3               		djnz	.wr_spc
(1) 2072/     A35 : DD E1               		pop	ix
(1) 2073/     A37 : CD 99 0A            		call	.mkfm_set
(1) 2074/     A3A : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2075/     A3D : CD C8 11            		call	fm_send_1
(1) 2076/     A40 : 3E 01               		ld	a,1
(1) 2077/     A42 : 32 30 00            		ld	(fmSpecial),a
(1) 2078/     A45 : C9                  		ret
(1) 2079/     A46 :                     .this_regs:
(1) 2080/     A46 : AD A9               		db 0ADh,0A9h
(1) 2081/     A48 : AC A8               		db 0ACh,0A8h
(1) 2082/     A4A : AE AA               		db 0AEh,0AAh
(1) 2083/     A4C : A6 A2               		db 0A6h,0A2h
(1) 2084/     A4E :                     
(1) 2085/     A4E :                     ; ----------------------------------------
(1) 2086/     A4E :                     
(1) 2087/     A4E :                     .fm_off:
(1) 2088/     A4E : CD 82 0A            		call	.fm_clrrsave
(1) 2089/     A51 : CD 63 0A            		call	.fm_keyoff
(1) 2090/     A54 : C3 FE 0E            		jp	.chnl_ulnk
(1) 2091/     A57 :                     .fm_cut:
(1) 2092/     A57 : CD 82 0A            		call	.fm_clrrsave
(1) 2093/     A5A : CD 63 0A            		call	.fm_keyoff
(1) 2094/     A5D : CD 6B 0A            		call	.fm_tloff
(1) 2095/     A60 : C3 FE 0E            		jp	.chnl_ulnk
(1) 2096/     A63 :                     
(1) 2097/     A63 :                     ; ----------------------------------------
(1) 2098/     A63 :                     ; iy - current FM table
(1) 2099/     A63 :                     
(1) 2100/     A63 :                     .fm_keyoff:
(1) 2101/     A63 : 16 28               		ld	d,28h
(1) 2102/     A65 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2103/     A68 : C3 C8 11            		jp	fm_send_1
(1) 2104/     A6B :                     
(1) 2105/     A6B :                     .fm_tloff:
(1) 2106/     A6B : 06 04               		ld	b,4
(1) 2107/     A6D : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2108/     A70 : 79                  		ld	a,c
(1) 2109/     A71 : E6 03               		and	011b
(1) 2110/     A73 : F6 40               		or	40h		; TL regs
(1) 2111/     A75 : 1E 7F               		ld	e,7Fh
(1) 2112/     A77 :                     .tl_down:
(1) 2113/     A77 : 57                  		ld	d,a
(1) 2114/     A78 :                     		; e - 7Fh
(1) 2115/     A78 : CD C4 11            		call	fm_autoreg
(1) 2116/     A7B : CF                  		rst	8
(1) 2117/     A7C : 7A                  		ld	a,d
(1) 2118/     A7D : C6 04               		add	a,4
(1) 2119/     A7F : 10 F6               		djnz	.tl_down
(1) 2120/     A81 : C9                  		ret
(1) 2121/     A82 :                     
(1) 2122/     A82 :                     .fm_clrrsave:
(1) 2123/     A82 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2124/     A85 : E6 07               		and	0111b
(1) 2125/     A87 : 87                  		add	a,a
(1) 2126/     A88 : 87                  		add	a,a
(1) 2127/     A89 : 21 4A 16            		ld	hl,fmlist_rsave
(1) 2128/     A8C : 16 00               		ld	d,0
(1) 2129/     A8E : 5F                  		ld	e,a
(1) 2130/     A8F : 19                  		add	hl,de
(1) 2131/     A90 : 36 00               		ld	(hl),0
(1) 2132/     A92 : 23                  		inc	hl
(1) 2133/     A93 : 36 00               		ld	(hl),0
(1) 2134/     A95 : 23                  		inc	hl
(1) 2135/     A96 : 36 00               		ld	(hl),0
(1) 2136/     A98 : C9                  		ret
(1) 2137/     A99 :                     
(1) 2138/     A99 :                     ; ----------------------------------------
(1) 2139/     A99 :                     
(1) 2140/     A99 :                     .mkfm_set:
(1) 2141/     A99 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2142/     A9C : CD A2 0B            		call	.get_fmcach
(1) 2143/     A9F : E5                  		push	hl			; Save TOP
(1) 2144/     AA0 : 11 1C 00            		ld	de,1Ch			; Go to 1Ch (regs B0, B4...)
(1) 2145/     AA3 : 19                  		add	hl,de
(1) 2146/     AA4 : 46                  		ld	b,(hl)			; b - 0B0h algorithm
(1) 2147/     AA5 : E1                  		pop	hl			; Recover TOP
(1) 2148/     AA6 : CF                  		rst	8
(1) 2149/     AA7 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2150/     AAA : 79                  		ld	a,c
(1) 2151/     AAB : E6 03               		and	011b
(1) 2152/     AAD : F6 30               		or	30h			; Start at reg 30h
(1) 2153/     AAF : 57                  		ld	d,a
(1) 2154/     AB0 :                     	; hl - reg data
(1) 2155/     AB0 :                     	; b  - 0B0h algorithm
(1) 2156/     AB0 :                     	;  c - current FM channel 0-6
(1) 2157/     AB0 :                     	; d  - Starting FM reg
(1) 2158/     AB0 : CD 02 0B            		call	.mkfm_wregs		; 30h+
(1) 2159/     AB3 : CD 2B 0B            		call	.mkfm_tlvol		; 40h+
(1) 2160/     AB6 : CD 02 0B            		call	.mkfm_wregs		; 50h+
(1) 2161/     AB9 : CD 02 0B            		call	.mkfm_wregs		; 60h+
(1) 2162/     ABC : CD 02 0B            		call	.mkfm_wregs		; 70h+
(1) 2163/     ABF : CD 02 0B            		call	.mkfm_wregs		; 80h+
(1) 2164/     AC2 : CD 02 0B            		call	.mkfm_wregs		; 90h+
(1) 2165/     AC5 : 78                  		ld	a,b			; 0B0h algorithm
(1) 2166/     AC6 : 23                  		inc	hl
(1) 2167/     AC7 : 5F                  		ld	e,a
(1) 2168/     AC8 : 79                  		ld	a,c
(1) 2169/     AC9 : E6 03               		and	011b
(1) 2170/     ACB : F6 B0               		or	0B0h
(1) 2171/     ACD : 57                  		ld	d,a
(1) 2172/     ACE : CD C4 11            		call	fm_autoreg		; Write algorithm
(1) 2173/     AD1 : CF                  		rst	8
(1) 2174/     AD2 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2175/     AD5 : 2F                  		cpl				; REVERSE bits
(1) 2176/     AD6 : E6 30               		and	00110000b
(1) 2177/     AD8 : 07                  		rlca				; << 2
(1) 2178/     AD9 : 07                  		rlca
(1) 2179/     ADA : 5F                  		ld	e,a			; save as e
(1) 2180/     ADB : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2181/     ADC : 23                  		inc	hl
(1) 2182/     ADD : E6 3F               		and	00111111b
(1) 2183/     ADF : B3                  		or	e			; Merge panning
(1) 2184/     AE0 : 5F                  		ld	e,a
(1) 2185/     AE1 : 79                  		ld	a,c
(1) 2186/     AE2 : CF                  		rst	8
(1) 2187/     AE3 : E6 03               		and	011b
(1) 2188/     AE5 : F6 B4               		or	0B4h
(1) 2189/     AE7 : 57                  		ld	d,a
(1) 2190/     AE8 : CD C4 11            		call	fm_autoreg
(1) 2191/     AEB : 7E                  		ld	a,(hl)			; 022h
(1) 2192/     AEC : 23                  		inc	hl
(1) 2193/     AED : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2194/     AEF : 28 06               		jr	z,.no_lfo
(1) 2195/     AF1 : 5F                  		ld	e,a
(1) 2196/     AF2 : 16 22               		ld	d,22h
(1) 2197/     AF4 : CD C8 11            		call	fm_send_1
(1) 2198/     AF7 :                     .no_lfo:
(1) 2199/     AF7 :                     
(1) 2200/     AF7 :                     
(1) 2201/     AF7 : CF                  		rst	8
(1) 2202/     AF8 : 7E                  		ld	a,(hl)			; 028h
(1) 2203/     AF9 : E6 F0               		and	11110000b
(1) 2204/     AFB : B1                  		or	c			; Merge FM channel
(1) 2205/     AFC : 5F                  		ld	e,a
(1) 2206/     AFD : 16 28               		ld	d,28h
(1) 2207/     AFF : C3 C8 11            		jp	fm_send_1		; Set keys
(1) 2208/     B02 :                     
(1) 2209/     B02 :                     ; ----------------------------------------
(1) 2210/     B02 :                     
(1) 2211/     B02 :                     .mkfm_wregs:
(1) 2212/     B02 : CF                  		rst	8
(1) 2213/     B03 : 5E                  		ld	e,(hl)
(1) 2214/     B04 : 23                  		inc	hl
(1) 2215/     B05 : CD C4 11            		call	fm_autoreg
(1) 2216/     B08 : 14                  		inc	d
(1) 2217/     B09 : 14                  		inc	d
(1) 2218/     B0A : 14                  		inc	d
(1) 2219/     B0B : 14                  		inc	d
(1) 2220/     B0C : 5E                  		ld	e,(hl)
(1) 2221/     B0D : 23                  		inc	hl
(1) 2222/     B0E : CF                  		rst	8
(1) 2223/     B0F : CD C4 11            		call	fm_autoreg
(1) 2224/     B12 : 14                  		inc	d
(1) 2225/     B13 : 14                  		inc	d
(1) 2226/     B14 : 14                  		inc	d
(1) 2227/     B15 : 14                  		inc	d
(1) 2228/     B16 : 5E                  		ld	e,(hl)
(1) 2229/     B17 : 23                  		inc	hl
(1) 2230/     B18 : CD C4 11            		call	fm_autoreg
(1) 2231/     B1B : 14                  		inc	d
(1) 2232/     B1C : CF                  		rst	8
(1) 2233/     B1D : 14                  		inc	d
(1) 2234/     B1E : 14                  		inc	d
(1) 2235/     B1F : 14                  		inc	d
(1) 2236/     B20 : 5E                  		ld	e,(hl)
(1) 2237/     B21 : 23                  		inc	hl
(1) 2238/     B22 : CD C4 11            		call	fm_autoreg
(1) 2239/     B25 : 14                  		inc	d
(1) 2240/     B26 : 14                  		inc	d
(1) 2241/     B27 : 14                  		inc	d
(1) 2242/     B28 : 14                  		inc	d
(1) 2243/     B29 : CF                  		rst	8
(1) 2244/     B2A : C9                  		ret
(1) 2245/     B2B :                     
(1) 2246/     B2B :                     ; ----------------------------------------
(1) 2247/     B2B :                     ; Write 40+ TL w/volume
(1) 2248/     B2B :                     
(1) 2249/     B2B :                     ; hl - TL reg data
(1) 2250/     B2B :                     ; b - current 0B0h
(1) 2251/     B2B :                     ; d - 40h+
(1) 2252/     B2B :                     
(1) 2253/     B2B :                     .mkfm_tlvol:
(1) 2254/     B2B : 78                  		ld	a,b			; Read 0B0h copy
(1) 2255/     B2C : C5                  		push	bc
(1) 2256/     B2D : E5                  		push	hl
(1) 2257/     B2E : 21 9A 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2258/     B31 : E6 07               		and	0111b
(1) 2259/     B33 : 06 00               		ld	b,0
(1) 2260/     B35 : 4F                  		ld	c,a
(1) 2261/     B36 : 09                  		add	hl,bc
(1) 2262/     B37 : CF                  		rst	8
(1) 2263/     B38 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2264/     B3B : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2265/     B3E : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2266/     B41 : 4F                  		ld	c,a			; c - Current Volume
(1) 2267/     B42 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2268/     B43 : E1                  		pop	hl
(1) 2269/     B44 : CB 08               		rrc	b			; OP1
(1) 2270/     B46 : DC 7D 0B            		call	c,.write_tl
(1) 2271/     B49 : D4 8F 0B            		call	nc,.write_ntl
(1) 2272/     B4C : 23                  		inc	hl
(1) 2273/     B4D : 14                  		inc	d
(1) 2274/     B4E : 14                  		inc	d
(1) 2275/     B4F : CF                  		rst	8
(1) 2276/     B50 : 14                  		inc	d
(1) 2277/     B51 : 14                  		inc	d
(1) 2278/     B52 : CB 08               		rrc	b			; OP2
(1) 2279/     B54 : DC 7D 0B            		call	c,.write_tl
(1) 2280/     B57 : D4 8F 0B            		call	nc,.write_ntl
(1) 2281/     B5A : 23                  		inc	hl
(1) 2282/     B5B : 14                  		inc	d
(1) 2283/     B5C : 14                  		inc	d
(1) 2284/     B5D : 14                  		inc	d
(1) 2285/     B5E : 14                  		inc	d
(1) 2286/     B5F : CB 08               		rrc	b			; OP3
(1) 2287/     B61 : DC 7D 0B            		call	c,.write_tl
(1) 2288/     B64 : D4 8F 0B            		call	nc,.write_ntl
(1) 2289/     B67 : 23                  		inc	hl
(1) 2290/     B68 : CF                  		rst	8
(1) 2291/     B69 : 14                  		inc	d
(1) 2292/     B6A : 14                  		inc	d
(1) 2293/     B6B : 14                  		inc	d
(1) 2294/     B6C : 14                  		inc	d
(1) 2295/     B6D : CB 08               		rrc	b			; OP4
(1) 2296/     B6F : DC 7D 0B            		call	c,.write_tl
(1) 2297/     B72 : D4 8F 0B            		call	nc,.write_ntl
(1) 2298/     B75 : 23                  		inc	hl
(1) 2299/     B76 : 14                  		inc	d
(1) 2300/     B77 : 14                  		inc	d
(1) 2301/     B78 : 14                  		inc	d
(1) 2302/     B79 : 14                  		inc	d
(1) 2303/     B7A : CF                  		rst	8
(1) 2304/     B7B : C1                  		pop	bc
(1) 2305/     B7C : C9                  		ret
(1) 2306/     B7D :                     
(1) 2307/     B7D :                     ; --------------------------------
(1) 2308/     B7D :                     
(1) 2309/     B7D :                     .write_tl:
(1) 2310/     B7D : 7E                  		ld	a,(hl)
(1) 2311/     B7E : 91                  		sub	a,c			; reg - volume
(1) 2312/     B7F : F2 84 0B            		jp	p,.keep_tlmx
(1) 2313/     B82 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2314/     B84 :                     .keep_tlmx:
(1) 2315/     B84 : C5                  		push	bc
(1) 2316/     B85 : 5F                  		ld	e,a
(1) 2317/     B86 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2318/     B89 : CD C4 11            		call	fm_autoreg
(1) 2319/     B8C : CF                  		rst	8
(1) 2320/     B8D : C1                  		pop	bc
(1) 2321/     B8E : C9                  		ret
(1) 2322/     B8F :                     
(1) 2323/     B8F :                     .write_ntl:
(1) 2324/     B8F : C5                  		push	bc
(1) 2325/     B90 : 5E                  		ld	e,(hl)
(1) 2326/     B91 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2327/     B94 : CD C4 11            		call	fm_autoreg
(1) 2328/     B97 : CF                  		rst	8
(1) 2329/     B98 : C1                  		pop	bc
(1) 2330/     B99 : C9                  		ret
(1) 2331/     B9A :                     
(1) 2332/     B9A :                     ; --------------------------------
(1) 2333/     B9A :                     ; Jump carry list
(1) 2334/     B9A :                     .fm_cindx:
(1) 2335/     B9A : 08                  		db 1000b
(1) 2336/     B9B : 08                  		db 1000b
(1) 2337/     B9C : 08                  		db 1000b
(1) 2338/     B9D : 08                  		db 1000b
(1) 2339/     B9E : 0C                  		db 1100b
(1) 2340/     B9F : 0E                  		db 1110b
(1) 2341/     BA0 : 0E                  		db 1110b
(1) 2342/     BA1 : 0F                  		db 1111b
(1) 2343/     BA2 :                     
(1) 2344/     BA2 :                     ; --------------------------------
(1) 2345/     BA2 :                     ; Input:
(1) 2346/     BA2 :                     ; a - FM id (0-2,4-6)
(1) 2347/     BA2 :                     ;
(1) 2348/     BA2 :                     ; Ouput:
(1) 2349/     BA2 :                     ; hl - instrument data
(1) 2350/     BA2 :                     ;
(1) 2351/     BA2 :                     ; Uses:
(1) 2352/     BA2 :                     ; de
(1) 2353/     BA2 :                     ; --------------------------------
(1) 2354/     BA2 :                     
(1) 2355/     BA2 :                     .get_fmcach:
(1) 2356/     BA2 : 21 9B 17            		ld	hl,fmcach_list
(1) 2357/     BA5 : E6 07               		and	0111b
(1) 2358/     BA7 : 16 00               		ld	d,0
(1) 2359/     BA9 : 87                  		add	a,a
(1) 2360/     BAA : 5F                  		ld	e,a
(1) 2361/     BAB : CF                  		rst	8
(1) 2362/     BAC : 19                  		add	hl,de
(1) 2363/     BAD : 7E                  		ld	a,(hl)
(1) 2364/     BAE : 23                  		inc	hl
(1) 2365/     BAF : 66                  		ld	h,(hl)
(1) 2366/     BB0 : 6F                  		ld	l,a
(1) 2367/     BB1 : C9                  		ret
(1) 2368/     BB2 :                     
(1) 2369/     BB2 :                     ; --------------------------------
(1) 2370/     BB2 :                     ; DAC
(1) 2371/     BB2 :                     ; --------------------------------
(1) 2372/     BB2 :                     
(1) 2373/     BB2 :                     .mk_dac:
(1) 2374/     BB2 : 78                  		ld	a,b
(1) 2375/     BB3 : E6 03               		and	0011b
(1) 2376/     BB5 : 28 21               		jr	z,.dac_proc
(1) 2377/     BB7 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2378/     BBA : B7                  		or	a
(1) 2379/     BBB : C8                  		ret	z
(1) 2380/     BBC : FE FE               		cp	-2
(1) 2381/     BBE : CA CC 0B            		jp	z,.dac_cut
(1) 2382/     BC1 : FE FF               		cp	-1
(1) 2383/     BC3 : CA D2 0B            		jp	z,.dac_off
(1) 2384/     BC6 : CD D8 0B            		call	.dac_proc
(1) 2385/     BC9 : C3 08 12            		jp	dac_play
(1) 2386/     BCC :                     .dac_cut:
(1) 2387/     BCC : CD F3 11            		call	dac_off
(1) 2388/     BCF : C3 FE 0E            		jp	.chnl_ulnk
(1) 2389/     BD2 :                     .dac_off:
(1) 2390/     BD2 : CD F3 11            		call	dac_off
(1) 2391/     BD5 : C3 FE 0E            		jp	.chnl_ulnk
(1) 2392/     BD8 :                     .dac_proc:
(1) 2393/     BD8 : 16 00               		ld	d,0			; Freq index
(1) 2394/     BDA : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2395/     BDD : 21 84 13            		ld	hl,wavFreq_List-(2*36)
(1) 2396/     BE0 : 19                  		add	hl,de
(1) 2397/     BE1 : 7E                  		ld	a,(hl)
(1) 2398/     BE2 : 23                  		inc	hl
(1) 2399/     BE3 : 66                  		ld	h,(hl)
(1) 2400/     BE4 : 6F                  		ld	l,a
(1) 2401/     BE5 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2402/     BE8 : CF                  		rst	8
(1) 2403/     BE9 : AF                  		xor	a			; Clear high
(1) 2404/     BEA : 3F                  		ccf				; Clear carry
(1) 2405/     BEB : CB 23               		sla	e			; << 1
(1) 2406/     BED : 9F                  		sbc	a,a			; Get carry MSB
(1) 2407/     BEE : 57                  		ld	d,a
(1) 2408/     BEF : 19                  		add	hl,de
(1) 2409/     BF0 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2410/     BF3 : D9                  		exx				; *
(1) 2411/     BF4 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2412/     BF8 : D9                  		exx				; *
(1) 2413/     BF9 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2414/     BFC : 2F                  		cpl				; REVERSE bits
(1) 2415/     BFD : E6 30               		and	00110000b
(1) 2416/     BFF : 07                  		rlca
(1) 2417/     C00 : 07                  		rlca
(1) 2418/     C01 : CF                  		rst	8
(1) 2419/     C02 : 5F                  		ld	e,a
(1) 2420/     C03 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2421/     C05 : C3 D3 11            		jp	fm_send_2
(1) 2422/     C08 :                     
(1) 2423/     C08 :                     ; --------------------------------
(1) 2424/     C08 :                     ; PCM
(1) 2425/     C08 :                     ; --------------------------------
(1) 2426/     C08 :                     
(1) 2427/     C08 :                     .mk_pcm:
(1) 2505/     C08 : C9                  		ret
(1) 2507/     C09 :                     
(1) 2508/     C09 :                     ; --------------------------------
(1) 2509/     C09 :                     ; PWM
(1) 2510/     C09 :                     ; --------------------------------
(1) 2511/     C09 :                     
(1) 2512/     C09 :                     .mk_pwm:
(1) 2594/     C09 : C9                  		ret
(1) 2596/     C0A :                     
(1) 2597/     C0A :                     ; --------------------------------
(1) 2598/     C0A :                     ; SHARED routine
(1) 2599/     C0A :                     
(1) 2600/     C0A :                     .readfreq_pcm:
(1) 2601/     C0A : 21 E6 13            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2602/     C0D : 18 03               		jr	.set_wavfreq
(1) 2603/     C0F :                     .readfreq_pwm:
(1) 2604/     C0F : 21 84 13            		ld	hl,wavFreq_List-(2*36)
(1) 2605/     C12 :                     .set_wavfreq:
(1) 2606/     C12 : 16 00               		ld	d,0			; Freq index
(1) 2607/     C14 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2608/     C17 : 19                  		add	hl,de
(1) 2609/     C18 : 7E                  		ld	a,(hl)
(1) 2610/     C19 : 23                  		inc	hl
(1) 2611/     C1A : 66                  		ld	h,(hl)
(1) 2612/     C1B : 6F                  		ld	l,a
(1) 2613/     C1C : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2614/     C1F : CF                  		rst	8
(1) 2615/     C20 : AF                  		xor	a			; Clear high
(1) 2616/     C21 : 3F                  		ccf				; Clear carry
(1) 2617/     C22 : CB 23               		sla	e			; Get carry MSB
(1) 2618/     C24 : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2619/     C25 : 57                  		ld	d,a
(1) 2620/     C26 : 19                  		add	hl,de
(1) 2621/     C27 : C9                  		ret
(1) 2622/     C28 :                     
(1) 2623/     C28 :                     ; ----------------------------------------
(1) 2624/     C28 :                     ; NEW effect
(1) 2625/     C28 :                     ; ----------------------------------------
(1) 2626/     C28 :                     
(1) 2627/     C28 :                     .effc:
(1) 2628/     C28 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2629/     C2B : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2630/     C2E : 57                  		ld	d,a
(1) 2631/     C2F : CF                  		rst	8
(1) 2632/     C30 : FE 04               		cp	4			; Effect D?
(1) 2633/     C32 : 28 0F               		jr	z,.effc_D
(1) 2634/     C34 : FE 05               		cp	5			; Effect E?
(1) 2635/     C36 : 28 44               		jr	z,.effc_E
(1) 2636/     C38 : FE 06               		cp	6			; Effect F?
(1) 2637/     C3A : 28 4F               		jr	z,.effc_F
(1) 2638/     C3C : CF                  		rst	8
(1) 2639/     C3D : FE 18               		cp	24			; Effect X?
(1) 2640/     C3F : CA 9C 0C            		jp	z,.effc_X
(1) 2641/     C42 : C9                  		ret
(1) 2642/     C43 :                     
(1) 2643/     C43 :                     ; ----------------------------------------
(1) 2644/     C43 :                     ; Effect D: Volume slide up/down
(1) 2645/     C43 :                     ;
(1) 2646/     C43 :                     ; 00h - DON'T USE HERE
(1) 2647/     C43 :                     ;       (Original: Keep effect)
(1) 2648/     C43 :                     ; 0xh - Slide down normal
(1) 2649/     C43 :                     ; Fxh - Slide down fine
(1) 2650/     C43 :                     ; xFh - Slide up normal
(1) 2651/     C43 :                     ; x0h - Slide up fine
(1) 2652/     C43 :                     ; ----------------------------------------
(1) 2653/     C43 :                     
(1) 2654/     C43 :                     .effc_D:
(1) 2655/     C43 : 7B                  		ld	a,e
(1) 2656/     C44 : 0F                  		rrca
(1) 2657/     C45 : 0F                  		rrca
(1) 2658/     C46 : 0F                  		rrca
(1) 2659/     C47 : 0F                  		rrca
(1) 2660/     C48 : E6 0F               		and	0Fh
(1) 2661/     C4A : 4F                  		ld	c,a
(1) 2662/     C4B :                     	; e - DOWN value: ????dddd
(1) 2663/     C4B :                     	; c - UP value:   0000uuuu
(1) 2664/     C4B :                     
(1) 2665/     C4B : 7B                  		ld	a,e
(1) 2666/     C4C : B7                  		or	a
(1) 2667/     C4D : C8                  		ret	z
(1) 2668/     C4E : E6 F0               		and	0F0h		; 0Xh
(1) 2669/     C50 : 28 1D               		jr	z,.D_down
(1) 2670/     C52 : FE F0               		cp	0F0h		; FXh
(1) 2671/     C54 : 28 14               		jr	z,.D_downhf
(1) 2672/     C56 : 7B                  		ld	a,e
(1) 2673/     C57 : E6 0F               		and	00Fh		; X0h
(1) 2674/     C59 : 28 06               		jr	z,.D_up
(1) 2675/     C5B : FE 0F               		cp	00Fh		; XFh
(1) 2676/     C5D : C0                  		ret	nz
(1) 2677/     C5E :                     ; 		jr	z,.D_uphf
(1) 2678/     C5E :                     ; Go UP
(1) 2679/     C5E :                     .D_uphf:
(1) 2680/     C5E : 79                  		ld	a,c
(1) 2681/     C5F : 18 02               		jr	.setefU_D
(1) 2682/     C61 :                     .D_up:
(1) 2683/     C61 : 79                  		ld	a,c
(1) 2684/     C62 : 87                  		add	a,a
(1) 2685/     C63 :                     .setefU_D:
(1) 2686/     C63 : 5F                  		ld	e,a
(1) 2687/     C64 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2688/     C67 : 93                  		sub	a,e
(1) 2689/     C68 : 18 0E               		jr	.setef_mcD
(1) 2690/     C6A :                     ; Go DOWN
(1) 2691/     C6A :                     .D_downhf:
(1) 2692/     C6A : 7B                  		ld	a,e
(1) 2693/     C6B : E6 0F               		and	0Fh
(1) 2694/     C6D : 18 04               		jr	.setef_D
(1) 2695/     C6F :                     .D_down:
(1) 2696/     C6F : 7B                  		ld	a,e
(1) 2697/     C70 : E6 0F               		and	0Fh
(1) 2698/     C72 : 87                  		add	a,a
(1) 2699/     C73 :                     .setef_D:
(1) 2700/     C73 : 5F                  		ld	e,a
(1) 2701/     C74 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2702/     C77 : 83                  		add	a,e
(1) 2703/     C78 :                     ; 		jr	.setef_mcD
(1) 2704/     C78 :                     
(1) 2705/     C78 :                     ; Write slide
(1) 2706/     C78 :                     .setef_mcD:
(1) 2707/     C78 : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2708/     C7B : C9                  		ret
(1) 2709/     C7C :                     
(1) 2710/     C7C :                     ; ----------------------------------------
(1) 2711/     C7C :                     ; Effect E
(1) 2712/     C7C :                     ; ----------------------------------------
(1) 2713/     C7C :                     
(1) 2714/     C7C :                     .effc_E:
(1) 2715/     C7C : 7B                  		ld	a,e
(1) 2716/     C7D : E6 F0               		and	0F0h
(1) 2717/     C7F : FE F0               		cp	0F0h
(1) 2718/     C81 : C8                  		ret	z
(1) 2719/     C82 : FE E0               		cp	0E0h
(1) 2720/     C84 : C8                  		ret	z
(1) 2721/     C85 : CF                  		rst	8
(1) 2722/     C86 : 7B                  		ld	a,e
(1) 2723/     C87 : ED 44               		neg	a
(1) 2724/     C89 : 18 0B               		jr	.wrt_EF
(1) 2725/     C8B :                     
(1) 2726/     C8B :                     ; ----------------------------------------
(1) 2727/     C8B :                     ; Effect F
(1) 2728/     C8B :                     ; ----------------------------------------
(1) 2729/     C8B :                     
(1) 2730/     C8B :                     .effc_F:
(1) 2731/     C8B : 7B                  		ld	a,e
(1) 2732/     C8C : E6 F0               		and	0F0h
(1) 2733/     C8E : FE F0               		cp	0F0h
(1) 2734/     C90 : C8                  		ret	z
(1) 2735/     C91 : FE E0               		cp	0E0h
(1) 2736/     C93 : C8                  		ret	z
(1) 2737/     C94 : CF                  		rst	8
(1) 2738/     C95 : 7B                  		ld	a,e
(1) 2739/     C96 :                     .wrt_EF:
(1) 2740/     C96 : 87                  		add	a,a
(1) 2741/     C97 : 87                  		add	a,a
(1) 2742/     C98 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2743/     C9B : C9                  		ret
(1) 2744/     C9C :                     
(1) 2745/     C9C :                     ; ----------------------------------------
(1) 2746/     C9C :                     ; Effect X
(1) 2747/     C9C :                     ;
(1) 2748/     C9C :                     ; Common panning values:
(1) 2749/     C9C :                     ;  00h LEFT
(1) 2750/     C9C :                     ;  80h MIDDLE
(1) 2751/     C9C :                     ; 0FFh RIGHT
(1) 2752/     C9C :                     ; ----------------------------------------
(1) 2753/     C9C :                     
(1) 2754/     C9C :                     .effc_X:
(1) 2755/     C9C : 16 00               		ld	d,0
(1) 2756/     C9E : 7E                  		ld	a,(hl)
(1) 2757/     C9F : E6 F0               		and	11110000b
(1) 2758/     CA1 : FE 80               		cp	80h		; PSG?
(1) 2759/     CA3 : 28 19               		jr	z,.res_pan
(1) 2760/     CA5 : FE 90               		cp	90h		; PSGN?
(1) 2761/     CA7 : 28 15               		jr	z,.res_pan
(1) 2762/     CA9 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2763/     CAB : CC C8 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2764/     CAE :                     
(1) 2765/     CAE :                     	; ----------------------------------------
(1) 2766/     CAE :                     	; Common panning bits: %00LR0000
(1) 2767/     CAE :                     	; (REVERSE: 0-on 1-off)
(1) 2768/     CAE : CF                  		rst	8
(1) 2769/     CAF : E5                  		push	hl
(1) 2770/     CB0 : 21 EB 0C            		ld	hl,.comn_panlist
(1) 2771/     CB3 : 7B                  		ld	a,e
(1) 2772/     CB4 : 07                  		rlca
(1) 2773/     CB5 : 07                  		rlca
(1) 2774/     CB6 : 07                  		rlca
(1) 2775/     CB7 : E6 07               		and	0111b
(1) 2776/     CB9 :                     ; 		ld	d,0
(1) 2777/     CB9 : 5F                  		ld	e,a
(1) 2778/     CBA : CF                  		rst	8
(1) 2779/     CBB : 19                  		add	hl,de
(1) 2780/     CBC : 56                  		ld	d,(hl)
(1) 2781/     CBD : E1                  		pop	hl
(1) 2782/     CBE :                     .res_pan:
(1) 2783/     CBE : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2784/     CC1 : E6 CF               		and	11001111b
(1) 2785/     CC3 : B2                  		or	d
(1) 2786/     CC4 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2787/     CC7 : C9                  		ret
(1) 2788/     CC8 :                     
(1) 2789/     CC8 :                     	; ----------------------------------------
(1) 2790/     CC8 :                     	; MCD panning
(1) 2791/     CC8 :                     .pan_mcd:
(1) 2792/     CC8 : E5                  		push	hl
(1) 2793/     CC9 : D5                  		push	de
(1) 2794/     CCA : 16 00               		ld	d,0
(1) 2795/     CCC : 21 F3 0C            		ld	hl,.pcm_panlist
(1) 2796/     CCF : 7B                  		ld	a,e
(1) 2797/     CD0 : E6 F8               		and	0F8h
(1) 2798/     CD2 : 0F                  		rrca
(1) 2799/     CD3 : 0F                  		rrca
(1) 2800/     CD4 : 0F                  		rrca
(1) 2801/     CD5 : 5F                  		ld	e,a
(1) 2802/     CD6 : 19                  		add	hl,de
(1) 2803/     CD7 : 7E                  		ld	a,(hl)
(1) 2804/     CD8 : 21 C6 14            		ld	hl,pcmcom+32
(1) 2805/     CDB : 16 00               		ld	d,0
(1) 2806/     CDD : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2807/     CE0 : 19                  		add	hl,de
(1) 2808/     CE1 : 2F                  		cpl
(1) 2809/     CE2 : 77                  		ld	(hl),a
(1) 2810/     CE3 : D1                  		pop	de
(1) 2811/     CE4 : E1                  		pop	hl
(1) 2812/     CE5 : 3E 01               		ld	a,1
(1) 2813/     CE7 : 32 A2 17            		ld	(mcdUpd),a
(1) 2814/     CEA : C9                  		ret
(1) 2815/     CEB :                     
(1) 2816/     CEB :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2817/     CEB :                     ; 00LR0000b
(1) 2818/     CEB :                     .comn_panlist:
(1) 2819/     CEB : 10                  		db 00010000b
(1) 2820/     CEC : 10                  		db 00010000b
(1) 2821/     CED : 10                  		db 00010000b
(1) 2822/     CEE : 00                  		db 00000000b
(1) 2823/     CEF : 00                  		db 00000000b
(1) 2824/     CF0 : 20                  		db 00100000b
(1) 2825/     CF1 : 20                  		db 00100000b
(1) 2826/     CF2 : 20                  		db 00100000b
(1) 2827/     CF3 :                     
(1) 2828/     CF3 :                     ; REVERSE OUTPUT BITS
(1) 2829/     CF3 :                     ; RRRR | LLLL
(1) 2830/     CF3 :                     .pcm_panlist:
(1) 2831/     CF3 : F0                  		db 0F0h	; 00h
(1) 2832/     CF4 : E0                  		db 0E0h
(1) 2833/     CF5 : D0                  		db 0D0h	; 10h
(1) 2834/     CF6 : C0                  		db 0C0h
(1) 2835/     CF7 : B0                  		db 0B0h	; 20h
(1) 2836/     CF8 : A0                  		db 0A0h
(1) 2837/     CF9 : 90                  		db 090h	; 30h
(1) 2838/     CFA : 80                  		db 080h
(1) 2839/     CFB : 70                  		db 070h	; 40h
(1) 2840/     CFC : 60                  		db 060h
(1) 2841/     CFD : 50                  		db 050h	; 50h
(1) 2842/     CFE : 40                  		db 040h
(1) 2843/     CFF : 30                  		db 030h	; 60h
(1) 2844/     D00 : 20                  		db 020h
(1) 2845/     D01 : 10                  		db 010h	; 70h
(1) 2846/     D02 : 00                  		db 000h
(1) 2847/     D03 : 00                  		db 000h ; 80h
(1) 2848/     D04 : 01                  		db 001h
(1) 2849/     D05 : 02                  		db 002h ; 90h
(1) 2850/     D06 : 03                  		db 003h
(1) 2851/     D07 : 04                  		db 004h ; A0h
(1) 2852/     D08 : 05                  		db 005h
(1) 2853/     D09 : 06                  		db 006h ; B0h
(1) 2854/     D0A : 07                  		db 007h
(1) 2855/     D0B : 08                  		db 008h ; C0h
(1) 2856/     D0C : 09                  		db 009h
(1) 2857/     D0D : 0A                  		db 00Ah ; D0h
(1) 2858/     D0E : 0B                  		db 00Bh
(1) 2859/     D0F : 0C                  		db 00Ch ; E0h
(1) 2860/     D10 : 0D                  		db 00Dh
(1) 2861/     D11 : 0E                  		db 00Eh ; F0h
(1) 2862/     D12 : 0F                  		db 00Fh
(1) 2863/     D13 :                     
(1) 2864/     D13 :                     ; ----------------------------------------
(1) 2865/     D13 :                     ; NEW volume
(1) 2866/     D13 :                     ; ----------------------------------------
(1) 2867/     D13 :                     
(1) 2868/     D13 :                     .volu:
(1) 2869/     D13 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2870/     D16 : D6 40               		sub	a,64
(1) 2871/     D18 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2872/     D1B : C9                  		ret
(1) 2873/     D1C :                     
(1) 2874/     D1C :                     ; ----------------------------------------
(1) 2875/     D1C :                     ; NEW instrument
(1) 2876/     D1C :                     ; ----------------------------------------
(1) 2877/     D1C :                     
(1) 2878/     D1C :                     .inst:
(1) 2879/     D1C : 7E                  		ld	a,(hl)
(1) 2880/     D1D : E6 F0               		and	11110000b
(1) 2881/     D1F : FE 80               		cp	080h
(1) 2882/     D21 : 28 24               		jr	z,.ins_psg
(1) 2883/     D23 : FE 90               		cp	090h
(1) 2884/     D25 : 28 1A               		jr	z,.ins_psgn
(1) 2885/     D27 : FE A0               		cp	0A0h
(1) 2886/     D29 : 28 52               		jr	z,.ins_fm
(1) 2887/     D2B : CF                  		rst	8
(1) 2888/     D2C : FE B0               		cp	0B0h
(1) 2889/     D2E : 28 4D               		jr	z,.ins_fm
(1) 2890/     D30 : FE C0               		cp	0C0h
(1) 2891/     D32 : CA D9 0D            		jp	z,.ins_dac
(1) 2892/     D35 : FE D0               		cp	0D0h
(1) 2893/     D37 : CA 2D 0E            		jp	z,.ins_pcm
(1) 2894/     D3A : FE E0               		cp	0E0h
(1) 2895/     D3C : CA 6A 0E            		jp	z,.ins_pwm
(1) 2896/     D3F : CF                  		rst	8
(1) 2897/     D40 :                     .invl_ins:
(1) 2898/     D40 : C9                  		ret
(1) 2899/     D41 :                     
(1) 2900/     D41 :                     ; ----------------------------------------
(1) 2901/     D41 :                     ; PSG
(1) 2902/     D41 :                     
(1) 2903/     D41 :                     .ins_psgn:
(1) 2904/     D41 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2905/     D42 : E6 07               		and	0111b
(1) 2906/     D44 : 32 2F 00            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2907/     D47 :                     .ins_psg:
(1) 2908/     D47 : CF                  		rst	8
(1) 2909/     D48 : DD E5               		push	ix
(1) 2910/     D4A : E5                  		push	hl
(1) 2911/     D4B : 23                  		inc	hl		; Skip ID
(1) 2912/     D4C : DD 21 1E 15         		ld	ix,psgcom	; Read psg control
(1) 2913/     D50 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2914/     D53 : 16 00               		ld	d,0
(1) 2915/     D55 : DD 19               		add	ix,de
(1) 2916/     D57 : 7E                  		ld	a,(hl)
(1) 2917/     D58 : CF                  		rst	8
(1) 2918/     D59 : 23                  		inc	hl
(1) 2919/     D5A : 7E                  		ld	a,(hl)
(1) 2920/     D5B : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2921/     D5E : 23                  		inc	hl
(1) 2922/     D5F : 7E                  		ld	a,(hl)
(1) 2923/     D60 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2924/     D63 : 23                  		inc	hl
(1) 2925/     D64 : 7E                  		ld	a,(hl)
(1) 2926/     D65 : CF                  		rst	8
(1) 2927/     D66 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2928/     D69 : 23                  		inc	hl
(1) 2929/     D6A : 7E                  		ld	a,(hl)
(1) 2930/     D6B : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2931/     D6E : 23                  		inc	hl
(1) 2932/     D6F : 7E                  		ld	a,(hl)
(1) 2933/     D70 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2934/     D73 : 23                  		inc	hl
(1) 2935/     D74 : 7E                  		ld	a,(hl)
(1) 2936/     D75 : CF                  		rst	8
(1) 2937/     D76 : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2938/     D79 : E1                  		pop	hl
(1) 2939/     D7A : DD E1               		pop	ix
(1) 2940/     D7C : C9                  		ret
(1) 2941/     D7D :                     
(1) 2942/     D7D :                     ; ----------------------------------------
(1) 2943/     D7D :                     ; FM/FM3
(1) 2944/     D7D :                     
(1) 2945/     D7D :                     .ins_fm:
(1) 2946/     D7D : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2947/     D80 : E6 07               		and	0111b
(1) 2948/     D82 : 16 00               		ld	d,0
(1) 2949/     D84 : 87                  		add	a,a
(1) 2950/     D85 : 5F                  		ld	e,a
(1) 2951/     D86 : DD E5               		push	ix
(1) 2952/     D88 : E5                  		push	hl
(1) 2953/     D89 : C5                  		push	bc
(1) 2954/     D8A : DD 21 9B 17         		ld	ix,fmcach_list
(1) 2955/     D8E : DD 19               		add	ix,de
(1) 2956/     D90 : CF                  		rst	8
(1) 2957/     D91 : DD 5E 00            		ld	e,(ix)
(1) 2958/     D94 : DD 23               		inc	ix
(1) 2959/     D96 : DD 56 00            		ld	d,(ix)
(1) 2960/     D99 :                     
(1) 2961/     D99 : DD 21 4A 16         		ld	ix,fmlist_rsave
(1) 2962/     D9D : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2963/     DA0 : 87                  		add	a,a
(1) 2964/     DA1 : 87                  		add	a,a
(1) 2965/     DA2 : 06 00               		ld	b,0
(1) 2966/     DA4 : 4F                  		ld	c,a
(1) 2967/     DA5 : DD 09               		add	ix,bc
(1) 2968/     DA7 : 23                  		inc	hl			; Skip id and pitch
(1) 2969/     DA8 : 23                  		inc	hl
(1) 2970/     DA9 : 46                  		ld	b,(hl)
(1) 2971/     DAA : 23                  		inc	hl
(1) 2972/     DAB : 7E                  		ld	a,(hl)
(1) 2973/     DAC : 23                  		inc	hl
(1) 2974/     DAD : 6E                  		ld	l,(hl)
(1) 2975/     DAE : 67                  		ld	h,a
(1) 2976/     DAF :                     	;   ix - last MID and LOW bytes
(1) 2977/     DAF :                     	;   de - current FM cache
(1) 2978/     DAF :                     	; b,hl - 24-bit ROM address
(1) 2979/     DAF : DD 7E 02            		ld	a,(ix+2)
(1) 2980/     DB2 : B8                  		cp	b
(1) 2981/     DB3 : 20 0E               		jr	nz,.new_romdat
(1) 2982/     DB5 : CF                  		rst	8
(1) 2983/     DB6 : DD 7E 01            		ld	a,(ix+1)
(1) 2984/     DB9 : BC                  		cp	h
(1) 2985/     DBA : 20 07               		jr	nz,.new_romdat
(1) 2986/     DBC : DD 7E 00            		ld	a,(ix)
(1) 2987/     DBF : BD                  		cp	l
(1) 2988/     DC0 : 28 12               		jr	z,.same_patch
(1) 2989/     DC2 : CF                  		rst	8
(1) 2990/     DC3 :                     .new_romdat:
(1) 2991/     DC3 : DD 70 02            		ld	(ix+2),b
(1) 2992/     DC6 : DD 74 01            		ld	(ix+1),h
(1) 2993/     DC9 : DD 75 00            		ld	(ix),l
(1) 2994/     DCC : 78                  		ld	a,b
(1) 2995/     DCD : 01 28 00            		ld	bc,28h			; <- size
(1) 2996/     DD0 : CD A8 0F            		call	readRom			; *** ROM ACCESS ***
(1) 2997/     DD3 : E7                  		rst	20h
(1) 2998/     DD4 :                     .same_patch:
(1) 2999/     DD4 : C1                  		pop	bc
(1) 3000/     DD5 : E1                  		pop	hl
(1) 3001/     DD6 : DD E1               		pop	ix
(1) 3002/     DD8 : C9                  		ret
(1) 3003/     DD9 :                     
(1) 3004/     DD9 :                     ; ----------------------------------------
(1) 3005/     DD9 :                     
(1) 3006/     DD9 :                     .ins_dac:
(1) 3007/     DD9 : E5                  		push	hl
(1) 3008/     DDA : C5                  		push	bc
(1) 3009/     DDB : CD F3 11            		call	dac_off
(1) 3010/     DDE : 7E                  		ld	a,(hl)
(1) 3011/     DDF : E6 0F               		and	00001111b
(1) 3012/     DE1 : 32 F5 1C            		ld	(wave_Flags),a
(1) 3013/     DE4 : CF                  		rst	8
(1) 3014/     DE5 : 23                  		inc	hl
(1) 3015/     DE6 : 23                  		inc	hl
(1) 3016/     DE7 : 5E                  		ld	e,(hl)
(1) 3017/     DE8 : 23                  		inc	hl
(1) 3018/     DE9 : 7E                  		ld	a,(hl)
(1) 3019/     DEA : 23                  		inc	hl
(1) 3020/     DEB : 6E                  		ld	l,(hl)
(1) 3021/     DEC : 67                  		ld	h,a
(1) 3022/     DED : E5                  		push	hl
(1) 3023/     DEE : 7B                  		ld	a,e
(1) 3024/     DEF : 01 06 00            		ld	bc,6		; Skip head
(1) 3025/     DF2 : 09                  		add	hl,bc
(1) 3026/     DF3 : CE 00               		adc	a,0
(1) 3027/     DF5 : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 3028/     DF8 : 32 EC 1C            		ld	(wave_Start+2),a
(1) 3029/     DFB : E1                  		pop	hl
(1) 3030/     DFC : 7B                  		ld	a,e
(1) 3031/     DFD : 11 BF 17            		ld	de,sampleHead
(1) 3032/     E00 : 01 06 00            		ld	bc,6
(1) 3033/     E03 : D5                  		push	de
(1) 3034/     E04 : CF                  		rst	8
(1) 3035/     E05 : CD A8 0F            		call	readRom	; *** ROM ACCESS ***
(1) 3036/     E08 : E1                  		pop	hl
(1) 3037/     E09 :                     	; hl - temporal header
(1) 3038/     E09 : 5E                  		ld	e,(hl)
(1) 3039/     E0A : 23                  		inc	hl
(1) 3040/     E0B : 56                  		ld	d,(hl)
(1) 3041/     E0C : 23                  		inc	hl
(1) 3042/     E0D : 7E                  		ld	a,(hl)
(1) 3043/     E0E : 23                  		inc	hl
(1) 3044/     E0F : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3045/     E13 : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3046/     E16 : 5E                  		ld	e,(hl)
(1) 3047/     E17 : 23                  		inc	hl
(1) 3048/     E18 : CF                  		rst	8
(1) 3049/     E19 : 56                  		ld	d,(hl)
(1) 3050/     E1A : 23                  		inc	hl
(1) 3051/     E1B : 7E                  		ld	a,(hl)
(1) 3052/     E1C : 23                  		inc	hl
(1) 3053/     E1D : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3054/     E21 : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3055/     E24 : 11 06 28            		ld	de,2806h	; keys off
(1) 3056/     E27 : CD C8 11            		call	fm_send_1
(1) 3057/     E2A : C1                  		pop	bc
(1) 3058/     E2B : E1                  		pop	hl
(1) 3059/     E2C :                     ; .same_dac:
(1) 3060/     E2C : C9                  		ret
(1) 3061/     E2D :                     
(1) 3062/     E2D :                     ; ----------------------------------------
(1) 3063/     E2D :                     
(1) 3064/     E2D :                     .ins_pcm:
(1) 3065/     E2D : DD E5               		push	ix
(1) 3066/     E2F : E5                  		push	hl
(1) 3067/     E30 : C5                  		push	bc
(1) 3068/     E31 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3069/     E32 : E6 01               		and	00000001b	; Read loop bit
(1) 3070/     E34 : 0F                  		rrca			; Move to MSB
(1) 3071/     E35 : CF                  		rst	8
(1) 3072/     E36 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3073/     E37 : 23                  		inc	hl
(1) 3074/     E38 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3075/     E39 : B3                  		or	e
(1) 3076/     E3A : 5F                  		ld	e,a
(1) 3077/     E3B : 23                  		inc	hl
(1) 3078/     E3C : 7E                  		ld	a,(hl)
(1) 3079/     E3D : 23                  		inc	hl
(1) 3080/     E3E : 6E                  		ld	l,(hl)
(1) 3081/     E3F : 67                  		ld	h,a
(1) 3082/     E40 :                     	; d    - Loop enable bit
(1) 3083/     E40 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3084/     E40 : DD 21 A6 14         		ld	ix,pcmcom
(1) 3085/     E44 : 06 00               		ld	b,0
(1) 3086/     E46 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3087/     E49 : DD 09               		add	ix,bc
(1) 3088/     E4B : 01 28 00            		ld	bc,40		; Go to 40
(1) 3089/     E4E : DD 09               		add	ix,bc
(1) 3090/     E50 : 01 08 00            		ld	bc,8
(1) 3091/     E53 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3092/     E56 : DD 09               		add	ix,bc
(1) 3093/     E58 : DD 74 00            		ld	(ix),h
(1) 3094/     E5B : DD 09               		add	ix,bc
(1) 3095/     E5D : DD 75 00            		ld	(ix),l
(1) 3096/     E60 : C1                  		pop	bc
(1) 3097/     E61 : E1                  		pop	hl
(1) 3098/     E62 : DD E1               		pop	ix
(1) 3099/     E64 : 3E 01               		ld	a,1
(1) 3100/     E66 : 32 A2 17            		ld	(mcdUpd),a
(1) 3101/     E69 : C9                  		ret
(1) 3102/     E6A :                     
(1) 3103/     E6A :                     ; ----------------------------------------
(1) 3104/     E6A :                     
(1) 3105/     E6A :                     .ins_pwm:
(1) 3106/     E6A : DD E5               		push	ix
(1) 3107/     E6C : E5                  		push	hl
(1) 3108/     E6D : C5                  		push	bc
(1) 3109/     E6E : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3110/     E6F : E6 03               		and	00000011b
(1) 3111/     E71 : 0F                  		rrca
(1) 3112/     E72 : 0F                  		rrca
(1) 3113/     E73 : 4F                  		ld	c,a
(1) 3114/     E74 : CF                  		rst	8
(1) 3115/     E75 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3116/     E76 : 23                  		inc	hl
(1) 3117/     E77 : 56                  		ld	d,(hl)
(1) 3118/     E78 : 23                  		inc	hl
(1) 3119/     E79 : 5E                  		ld	e,(hl)
(1) 3120/     E7A : 23                  		inc	hl
(1) 3121/     E7B : 7E                  		ld	a,(hl)
(1) 3122/     E7C : 23                  		inc	hl
(1) 3123/     E7D : 6E                  		ld	l,(hl)
(1) 3124/     E7E : 67                  		ld	h,a
(1) 3125/     E7F : 79                  		ld	a,c
(1) 3126/     E80 : B2                  		or	d
(1) 3127/     E81 : 57                  		ld	d,a
(1) 3128/     E82 : CF                  		rst	8
(1) 3129/     E83 :                     	; de,hl - 32-bit PWM pointer
(1) 3130/     E83 : DD 21 E6 14         		ld	ix,pwmcom
(1) 3131/     E87 : 06 00               		ld	b,0
(1) 3132/     E89 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3133/     E8C : DD 09               		add	ix,bc
(1) 3134/     E8E : 01 18 00            		ld	bc,24
(1) 3135/     E91 : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3136/     E93 : 01 08 00            		ld	bc,8
(1) 3137/     E96 : DD 72 00            		ld	(ix),d
(1) 3138/     E99 : DD 09               		add	ix,bc
(1) 3139/     E9B : DD 73 00            		ld	(ix),e
(1) 3140/     E9E : DD 09               		add	ix,bc
(1) 3141/     EA0 : DD 74 00            		ld	(ix),h
(1) 3142/     EA3 : DD 09               		add	ix,bc
(1) 3143/     EA5 : DD 75 00            		ld	(ix),l
(1) 3144/     EA8 : C1                  		pop	bc
(1) 3145/     EA9 : E1                  		pop	hl
(1) 3146/     EAA : DD E1               		pop	ix
(1) 3147/     EAC : 3E 01               		ld	a,1
(1) 3148/     EAE : 32 A1 17            		ld	(marsUpd),a
(1) 3149/     EB1 : C9                  		ret
(1) 3150/     EB2 :                     
(1) 3151/     EB2 :                     ; ----------------------------------------
(1) 3152/     EB2 :                     ; NEW note
(1) 3153/     EB2 :                     ; ----------------------------------------
(1) 3154/     EB2 :                     
(1) 3155/     EB2 :                     .note:
(1) 3156/     EB2 : 78                  		ld	a,b			; Volume bit?
(1) 3157/     EB3 : E6 04               		and	0100b
(1) 3158/     EB5 : 20 05               		jr	nz,.fm_hasvol
(1) 3159/     EB7 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3160/     EBB : CF                  		rst	8
(1) 3161/     EBC :                     .fm_hasvol:
(1) 3162/     EBC : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3163/     EBF : 4F                  		ld	c,a
(1) 3164/     EC0 : FE FF               		cp	-1
(1) 3165/     EC2 : C8                  		ret	z
(1) 3166/     EC3 : FE FE               		cp	-2
(1) 3167/     EC5 : C8                  		ret	z
(1) 3168/     EC6 : CF                  		rst	8
(1) 3169/     EC7 : 7E                  		ld	a,(hl)
(1) 3170/     EC8 : E6 F0               		and	11110000b
(1) 3171/     ECA : FE A0               		cp	0A0h
(1) 3172/     ECC : 28 0B               		jr	z,.n_fm
(1) 3173/     ECE :                     
(1) 3174/     ECE :                     ; --------------------------------
(1) 3175/     ECE :                     
(1) 3176/     ECE :                     .n_indx:
(1) 3177/     ECE : 79                  		ld	a,c
(1) 3178/     ECF :                     .n_stfreq:
(1) 3179/     ECF : 23                  		inc	hl			; Skip ID
(1) 3180/     ED0 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3181/     ED1 : 2B                  		dec	hl
(1) 3182/     ED2 : 83                  		add	a,e			; Note + pitch
(1) 3183/     ED3 : CF                  		rst	8
(1) 3184/     ED4 : 87                  		add	a,a			; * 2
(1) 3185/     ED5 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3186/     ED8 : C9                  		ret
(1) 3187/     ED9 :                     
(1) 3188/     ED9 :                     ; --------------------------------
(1) 3189/     ED9 :                     ; FM custom search
(1) 3190/     ED9 :                     
(1) 3191/     ED9 :                     .n_fm:
(1) 3192/     ED9 : 79                  		ld	a,c
(1) 3193/     EDA : 23                  		inc	hl		; Skip ID
(1) 3194/     EDB : 5E                  		ld	e,(hl)		; Read pitch
(1) 3195/     EDC : 2B                  		dec	hl
(1) 3196/     EDD : CF                  		rst	8
(1) 3197/     EDE : 83                  		add	a,e		; Note + pitch
(1) 3198/     EDF :                     	; Search for octave and note...
(1) 3199/     EDF : 0E 00               		ld	c,0		; c - octave
(1) 3200/     EE1 : 16 07               		ld	d,7
(1) 3201/     EE3 :                     .get_oct:
(1) 3202/     EE3 : 5F                  		ld	e,a		; e - note
(1) 3203/     EE4 : D6 0C               		sub	12
(1) 3204/     EE6 : FA ED 0E            		jp	m,.fnd_oct
(1) 3205/     EE9 : 0C                  		inc	c
(1) 3206/     EEA : 15                  		dec	d
(1) 3207/     EEB : 20 F6               		jr	nz,.get_oct
(1) 3208/     EED :                     .fnd_oct:
(1) 3209/     EED : CF                  		rst	8
(1) 3210/     EEE : 7B                  		ld	a,e
(1) 3211/     EEF : 87                  		add	a,a			; Note * 2
(1) 3212/     EF0 : E6 1F               		and	00011111b
(1) 3213/     EF2 : CB 09               		rrc	c
(1) 3214/     EF4 : CB 09               		rrc	c
(1) 3215/     EF6 : CB 09               		rrc	c
(1) 3216/     EF8 : CF                  		rst	8
(1) 3217/     EF9 : B1                  		or	c
(1) 3218/     EFA : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3219/     EFD : C9                  		ret
(1) 3220/     EFE :                     
(1) 3221/     EFE :                     ; ----------------------------------------
(1) 3222/     EFE :                     ; Unlock channel
(1) 3223/     EFE :                     ; ----------------------------------------
(1) 3224/     EFE :                     
(1) 3225/     EFE :                     .chnl_ulnk:
(1) 3226/     EFE : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3227/     F01 : CF                  		rst	8
(1) 3228/     F02 : FD E5               		push	iy
(1) 3229/     F04 : E1                  		pop	hl
(1) 3230/     F05 :                     
(1) 3231/     F05 :                     ; ----------------------------------------
(1) 3232/     F05 :                     ; Reset all table
(1) 3233/     F05 :                     ;
(1) 3234/     F05 :                     ; Input:
(1) 3235/     F05 :                     ; hl - Channel table
(1) 3236/     F05 :                     ; d  - Silence chip
(1) 3237/     F05 :                     ;
(1) 3238/     F05 :                     ; Uses:
(1) 3239/     F05 :                     ; b,de,hl
(1) 3240/     F05 :                     ; ----------------------------------------
(1) 3241/     F05 :                     
(1) 3242/     F05 :                     tblz_clear:
(1) 3243/     F05 : 06 0E               		ld	b,MAX_TBLSIZE-4
(1) 3244/     F07 : AF                  		xor	a
(1) 3245/     F08 : 77                  		ld	(hl),a			; 0 - Delete link
(1) 3246/     F09 : 23                  		inc	hl
(1) 3247/     F0A : 77                  		ld	(hl),a
(1) 3248/     F0B : 23                  		inc	hl
(1) 3249/     F0C : 72                  		ld	(hl),d			; 2 - Write silence request
(1) 3250/     F0D : 23                  		inc	hl
(1) 3251/     F0E : 23                  		inc	hl			; 3 - skip ID
(1) 3252/     F0F :                     .clr_all:
(1) 3253/     F0F : 77                  		ld	(hl),a
(1) 3254/     F10 : 23                  		inc	hl
(1) 3255/     F11 : 10 FC               		djnz	.clr_all
(1) 3256/     F13 : C9                  		ret
(1) 3257/     F14 :                     
(1) 3258/     F14 :                     ; ============================================================
(1) 3259/     F14 :                     ; --------------------------------------------------------
(1) 3260/     F14 :                     ; Communication with the SCD and 32X
(1) 3261/     F14 :                     ;
(1) 3262/     F14 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3263/     F14 :                     ;    | Uses: commM,comm18-1F
(1) 3264/     F14 :                     ;    |
(1) 3265/     F14 :                     ; 32X: Interrupts Slave SH2
(1) 3266/     F14 :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3267/     F14 :                     ;    | two bits of comm14
(1) 3268/     F14 :                     ; --------------------------------------------------------
(1) 3269/     F14 :                     
(1) 3270/     F14 :                     zmars_send:
(1) 3271/     F14 :                     	; ----------------------------------------
(1) 3272/     F14 :                     	; Send PCM table
(1) 3358/     F14 :                     	; ----------------------------------------
(1) 3359/     F14 :                     	; Send PWM table
(1) 3446/     F14 : C9                  		ret
(1) 3447/     F15 :                     
(1) 3448/     F15 :                     ; --------------------------------------------------------
(1) 3449/     F15 :                     ; Set bank to $A10000 area
(1) 3465/     F15 :                     
(1) 3466/     F15 :                     ; ====================================================================
(1) 3467/     F15 :                     ; ----------------------------------------------------------------
(1) 3468/     F15 :                     ; Subroutines
(1) 3469/     F15 :                     ; ----------------------------------------------------------------
(1) 3470/     F15 :                     
(1) 3471/     F15 :                     ; --------------------------------------------------------
(1) 3472/     F15 :                     ; Init sound engine
(1) 3473/     F15 :                     ; --------------------------------------------------------
(1) 3474/     F15 :                     
(1) 3475/     F15 :                     gema_init:
(1) 3476/     F15 : CD 02 13            		call	gema_lastbank		; Set last bank slot, solves problem with 32X
(1) 3477/     F18 : CD F3 11            		call	dac_off
(1) 3478/     F1B : AF                  		xor	a
(1) 3479/     F1C : 32 A1 17            		ld	(marsUpd),a
(1) 3480/     F1F : 32 A2 17            		ld	(mcdUpd),a
(1) 3481/     F22 : 32 87 1F            		ld	(cdRamLen),a
(1) 3482/     F25 : FD 21 CD 17         		ld	iy,nikona_BuffList
(1) 3483/     F29 : 0E 01               		ld	c,1			; Start at this priority
(1) 3484/     F2B :                     .setup_list:
(1) 3485/     F2B : FD 7E 00            		ld	a,(iy)
(1) 3486/     F2E : FE FF               		cp	-1
(1) 3487/     F30 : 28 24               		jr	z,.end_setup
(1) 3488/     F32 : FD 23               		inc	iy
(1) 3489/     F34 : 6F                  		ld	l,a
(1) 3490/     F35 : FD 66 00            		ld	h,(iy)
(1) 3491/     F38 : E5                  		push	hl
(1) 3492/     F39 : DD E1               		pop	ix
(1) 3493/     F3B : DD 71 14            		ld	(ix+seq_Priority),c
(1) 3494/     F3E : DD 36 01 FF         		ld	(ix+seq_Num),-1	; Reset sequence ID
(1) 3495/     F42 : FD 23               		inc	iy
(1) 3496/     F44 :                     	; iy - src
(1) 3497/     F44 :                     	; hl - dst
(1) 3498/     F44 : 11 04 00            		ld	de,seq_Blocks
(1) 3499/     F47 : 19                  		add	hl,de
(1) 3500/     F48 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3501/     F4A :                     .st_copy:
(1) 3502/     F4A : FD 7E 00            		ld	a,(iy)
(1) 3503/     F4D : 77                  		ld	(hl),a
(1) 3504/     F4E : FD 23               		inc	iy
(1) 3505/     F50 : 23                  		inc	hl
(1) 3506/     F51 : 10 F7               		djnz	.st_copy
(1) 3507/     F53 : 0C                  		inc	c
(1) 3508/     F54 : 18 D5               		jr	.setup_list
(1) 3509/     F56 :                     .end_setup:
(1) 3510/     F56 :                     
(1) 3511/     F56 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3512/     F59 : CD C8 11            		call	fm_send_1
(1) 3513/     F5C : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3514/     F5F : CD C8 11            		call	fm_send_1
(1) 3515/     F62 :                     ; 		ld	de,2800h
(1) 3516/     F62 : 14                  		inc	d		; FM KEYS off
(1) 3517/     F63 : CD C8 11            		call	fm_send_1
(1) 3518/     F66 : 1C                  		inc	e
(1) 3519/     F67 : CD C8 11            		call	fm_send_1
(1) 3520/     F6A : 1C                  		inc	e
(1) 3521/     F6B : CD C8 11            		call	fm_send_1
(1) 3522/     F6E : 1C                  		inc	e
(1) 3523/     F6F : 1C                  		inc	e
(1) 3524/     F70 : CD C8 11            		call	fm_send_1
(1) 3525/     F73 : 1C                  		inc	e
(1) 3526/     F74 : CD C8 11            		call	fm_send_1
(1) 3527/     F77 : 1C                  		inc	e
(1) 3528/     F78 : CD C8 11            		call	fm_send_1
(1) 3529/     F7B : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3530/     F7E : 36 9F               		ld	(hl),09Fh
(1) 3531/     F80 : 36 BF               		ld	(hl),0BFh
(1) 3532/     F82 : 36 DF               		ld	(hl),0DFh
(1) 3533/     F84 : 36 FF               		ld	(hl),0FFh
(1) 3534/     F86 : C9                  		ret
(1) 3535/     F87 :                     
(1) 3536/     F87 :                     ; --------------------------------------------------------
(1) 3537/     F87 :                     ; get_tick
(1) 3538/     F87 :                     ;
(1) 3539/     F87 :                     ; Checks if VBlank triggred a TICK
(1) 3540/     F87 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3541/     F87 :                     ; --------------------------------------------------------
(1) 3542/     F87 :                     
(1) 3543/     F87 :                     get_tick:
(1) 3544/     F87 : F3                  		di				; Disable ints
(1) 3545/     F88 : F5                  		push	af
(1) 3546/     F89 : E5                  		push	hl
(1) 3547/     F8A : 21 F7 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3548/     F8D : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3549/     F8E : B7                  		or 	a
(1) 3550/     F8F : 28 13               		jr	z,.ctnotick
(1) 3551/     F91 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3552/     F93 : 23                  		inc	hl			; Move to tickCnt
(1) 3553/     F94 : 34                  		inc	(hl)			; and increment
(1) 3554/     F95 : CF                  		rst	8
(1) 3555/     F96 : D5                  		push	de
(1) 3556/     F97 : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3557/     F9A : ED 5B 33 00         		ld	de,(sbeatPtck)
(1) 3558/     F9E : CF                  		rst	8
(1) 3559/     F9F : 19                  		add	hl,de
(1) 3560/     FA0 : 22 31 00            		ld	(sbeatAcc),hl
(1) 3561/     FA3 : D1                  		pop	de
(1) 3562/     FA4 :                     .ctnotick:
(1) 3563/     FA4 : E1                  		pop	hl
(1) 3564/     FA5 : F1                  		pop	af
(1) 3565/     FA6 : FB                  		ei				; Enable ints again
(1) 3566/     FA7 : C9                  		ret
(1) 3567/     FA8 :                     
(1) 3568/     FA8 :                     ; --------------------------------------------------------
(1) 3569/     FA8 :                     ; readRom
(1) 3570/     FA8 :                     ;
(1) 3571/     FA8 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3572/     FA8 :                     ; This also tells to 68k that we want to access ROM
(1) 3573/     FA8 :                     ;
(1) 3574/     FA8 :                     ; Input:
(1) 3575/     FA8 :                     ; a  | 68K Address $xx0000
(1) 3576/     FA8 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3577/     FA8 :                     ; hl | 68K Address $00xxxx
(1) 3578/     FA8 :                     ; de | Destination pointer
(1) 3579/     FA8 :                     ;
(1) 3580/     FA8 :                     ; Uses:
(1) 3581/     FA8 :                     ; b
(1) 3582/     FA8 :                     ;
(1) 3583/     FA8 :                     ; Notes:
(1) 3584/     FA8 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3585/     FA8 :                     ; sample has enough data before getting busy here.
(1) 3586/     FA8 :                     ; --------------------------------------------------------
(1) 3587/     FA8 :                     
(1) 3588/     FA8 :                     readRom:
(1) 3589/     FA8 : DD E5               		push	ix
(1) 3590/     FAA : DD 21 81 1F         		ld	ix,commZRomBlk		; ix - rom read/block flags
(1) 3591/     FAE : FE FF               		cp	0FFh			; Reading from 68k's RAM?
(1) 3592/     FB0 : 28 3D               		jr	z,.from_ram
(1) 3593/     FB2 : CF                  		rst	8
(1) 3594/     FB3 : 22 35 00            		ld	(x68ksrclsb),hl		; Backup midlow address
(1) 3595/     FB6 : CB BC               		res	7,h			; Reset MSB bit 7
(1) 3596/     FB8 : 06 00               		ld	b,0			; Clear b
(1) 3597/     FBA : 0B                  		dec	bc			; len-1
(1) 3598/     FBB : 09                  		add	hl,bc			; Add len to the mid and low to this temp address
(1) 3599/     FBC : CB 7C               		bit	7,h			; Did it cross the bank?
(1) 3600/     FBE : 20 0B               		jr	nz,.double		; Then it's a double transfer
(1) 3601/     FC0 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore hl
(1) 3602/     FC3 : 0C                  		inc	c			; len+1
(1) 3603/     FC4 : 47                  		ld	b,a			; b - $xx0000
(1) 3604/     FC5 : CD 0F 10            		call	.transfer
(1) 3605/     FC8 : DD E1               		pop	ix
(1) 3606/     FCA : C9                  		ret
(1) 3607/     FCB :                     .double:
(1) 3608/     FCB : CF                  		rst	8
(1) 3609/     FCC : 47                  		ld	b,a			; b - $xx0000
(1) 3610/     FCD : C5                  		push	bc			; Backup len and midlow address
(1) 3611/     FCE : E5                  		push	hl
(1) 3612/     FCF : 79                  		ld	a,c			; len - LSB
(1) 3613/     FD0 : 95                  		sub	a,l
(1) 3614/     FD1 : 4F                  		ld	c,a			; Save new size
(1) 3615/     FD2 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore TOP
(1) 3616/     FD5 : CD 0F 10            		call	.transfer
(1) 3617/     FD8 : E1                  		pop	hl			; Restore len and midlow address
(1) 3618/     FD9 : C1                  		pop	bc
(1) 3619/     FDA : 4D                  		ld	c,l			; Get second len
(1) 3620/     FDB : 0C                  		inc	c
(1) 3621/     FDC : 3A 36 00            		ld	a,(x68ksrcmid)
(1) 3622/     FDF : E6 80               		and	80h
(1) 3623/     FE1 : C6 80               		add	a,80h
(1) 3624/     FE3 : 67                  		ld	h,a
(1) 3625/     FE4 : 2E 00               		ld	l,0
(1) 3626/     FE6 : 30 01               		jr	nc,.x68knocarry
(1) 3627/     FE8 : 04                  		inc	b			; Next $xx0000
(1) 3628/     FE9 :                     .x68knocarry:
(1) 3629/     FE9 : CD 0F 10            		call	.transfer
(1) 3630/     FEC : DD E1               		pop	ix
(1) 3631/     FEE : C9                  		ret
(1) 3632/     FEF :                     
(1) 3633/     FEF :                     ; ------------------------------------------------
(1) 3634/     FEF :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3635/     FEF :                     ;
(1) 3636/     FEF :                     ; On the 68K side YOU MUST CALL
(1) 3637/     FEF :                     ; gemaSendRam manually and every time, normally
(1) 3638/     FEF :                     ; from a Vblank wait-loop.
(1) 3639/     FEF :                     ; ------------------------------------------------
(1) 3640/     FEF :                     
(1) 3641/     FEF :                     .from_ram:
(1) 3642/     FEF : ED 53 82 1F         		ld	(cdRamDst),de			; Show variables
(1) 3643/     FF3 : 22 84 1F            		ld	(cdRamSrc),hl
(1) 3644/     FF6 : 32 86 1F            		ld	(cdRamSrcB),a
(1) 3645/     FF9 : CD 02 13            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3646/     FFC : CF                  		rst	8
(1) 3647/     FFD : 79                  		ld	a,c
(1) 3648/     FFE : 32 87 1F            		ld	(cdRamLen),a			; Show length
(1) 3649/    1001 : 21 00 FF            		ld	hl,RAM_ZCdFlagD&07FFFh+8000h	; ** 68K LABEL **
(1) 3650/    1004 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3651/    1006 :                     .wait:
(1) 3652/    1006 : 3A 87 1F            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3653/    1009 : B7                  		or	a
(1) 3654/    100A : 20 FA               		jr	nz,.wait
(1) 3655/    100C : DD E1               		pop	ix
(1) 3656/    100E : C9                  		ret
(1) 3657/    100F :                     
(1) 3658/    100F :                     ; ------------------------------------------------
(1) 3659/    100F :                     ; b  - Source ROM $xx0000
(1) 3660/    100F :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3661/    100F :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3662/    100F :                     ; de - Output location
(1) 3663/    100F :                     ; ix - ROM-block flag
(1) 3664/    100F :                     ; ------------------------------------------------
(1) 3665/    100F :                     
(1) 3666/    100F :                     .transfer:
(1) 3667/    100F : CF                  		rst	8
(1) 3668/    1010 : E5                  		push	hl
(1) 3669/    1011 : 7C                  		ld	a,h
(1) 3670/    1012 : 21 00 60            		ld	hl,6000h
(1) 3671/    1015 : 07                  		rlca
(1) 3672/    1016 : 77                  		ld	(hl),a
(1) 3673/    1017 : 78                  		ld	a,b
(1) 3674/    1018 : CF                  		rst	8
(1) 3675/    1019 : 77                  		ld	(hl),a
(1) 3676/    101A : 0F                  		rrca
(1) 3677/    101B : 77                  		ld	(hl),a
(1) 3678/    101C : 0F                  		rrca
(1) 3679/    101D : 77                  		ld	(hl),a
(1) 3680/    101E : 0F                  		rrca
(1) 3681/    101F : 77                  		ld	(hl),a
(1) 3682/    1020 : 0F                  		rrca
(1) 3683/    1021 : CF                  		rst	8
(1) 3684/    1022 : 77                  		ld	(hl),a
(1) 3685/    1023 : 0F                  		rrca
(1) 3686/    1024 : 77                  		ld	(hl),a
(1) 3687/    1025 : 0F                  		rrca
(1) 3688/    1026 : 77                  		ld	(hl),a
(1) 3689/    1027 : 0F                  		rrca
(1) 3690/    1028 : 77                  		ld	(hl),a
(1) 3691/    1029 : E1                  		pop	hl
(1) 3692/    102A : CB FC               		set	7,h
(1) 3693/    102C : CF                  		rst	8
(1) 3694/    102D :                     	; Transfer ROM data in packets
(1) 3695/    102D :                     	; while playing the cache'd sample
(1) 3696/    102D :                     	; *** CRITICAL PROCESS ***
(1) 3697/    102D :                     	;
(1) 3698/    102D :                     	; pseudo-ref for ldir:
(1) 3699/    102D :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3700/    102D :                     	; inc de	; incr de + 1
(1) 3701/    102D :                     	; inc hl	; incr hl + 1
(1) 3702/    102D :                     	; dec bc	; decr bc - 1
(1) 3703/    102D : 06 00               		ld	b,0
(1) 3704/    102F : 79                  		ld	a,c		; a - Size counter
(1) 3705/    1030 : D6 09               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3706/    1032 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3707/    1034 :                     .x68kloop:
(1) 3708/    1034 : CF                  		rst	8
(1) 3709/    1035 : 00                  		nop
(1) 3710/    1036 : 0E 08               		ld	c,MAX_TRFRPZ-1
(1) 3711/    1038 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3712/    103C : C4 56 10            		call	nz,.x68klpwt
(1) 3713/    103F : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3714/    1041 : CF                  		rst	8
(1) 3715/    1042 : 00                  		nop
(1) 3716/    1043 : D6 08               		sub	a,MAX_TRFRPZ-1
(1) 3717/    1045 : D2 34 10            		jp	nc,.x68kloop
(1) 3718/    1048 :                     ; last block
(1) 3719/    1048 :                     .x68klast:
(1) 3720/    1048 : C6 09               		add	a,MAX_TRFRPZ
(1) 3721/    104A : 4F                  		ld	c,a
(1) 3722/    104B : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3723/    104F : C4 56 10            		call	nz,.x68klpwt
(1) 3724/    1052 : ED B0               		ldir
(1) 3725/    1054 : CF                  		rst	8
(1) 3726/    1055 : C9                  		ret
(1) 3727/    1056 :                     
(1) 3728/    1056 :                     ; Wait here until Genesis unlocks ROM
(1) 3729/    1056 :                     .x68klpwt:
(1) 3730/    1056 : 00                  		nop
(1) 3731/    1057 : 00                  		nop
(1) 3736/    1058 : CF                  		rst	8
(1) 3741/    1059 : 00                  		nop
(1) 3742/    105A : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3743/    105E : 20 F6               		jr	nz,.x68klpwt
(1) 3744/    1060 : C9                  		ret
(1) 3745/    1061 :                     
(1) 3746/    1061 :                     ; ====================================================================
(1) 3747/    1061 :                     ; ----------------------------------------------------------------
(1) 3748/    1061 :                     ; Sound chip routines
(1) 3749/    1061 :                     ; ----------------------------------------------------------------
(1) 3750/    1061 :                     
(1) 3751/    1061 :                     ; --------------------------------------------------------
(1) 3752/    1061 :                     ; chip_env
(1) 3753/    1061 :                     ;
(1) 3754/    1061 :                     ; Process the PSG
(1) 3755/    1061 :                     ; --------------------------------------------------------
(1) 3756/    1061 :                     
(1) 3757/    1061 :                     chip_env:
(1) 3761/    1061 : FD 21 21 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3762/    1065 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3763/    1069 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3764/    106B : 06 04               		ld	b,4			; b - 4 channels
(1) 3765/    106D :                     .vloop:
(1) 3766/    106D : CF                  		rst	8
(1) 3767/    106E : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3768/    1071 : FD 36 00 00         		ld	(iy+COM),0
(1) 3769/    1075 :                     
(1) 3770/    1075 :                     	; ----------------------------
(1) 3771/    1075 :                     	; bit 2 - stop sound
(1) 3772/    1075 : CB 53               		bit	2,e
(1) 3773/    1077 : 28 0C               		jr	z,.ckof
(1) 3774/    1079 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3775/    107D : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3776/    1081 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3777/    1085 :                     .ckof:
(1) 3778/    1085 :                     	; ----------------------------
(1) 3779/    1085 :                     	; bit 1 - key off
(1) 3780/    1085 : CB 4B               		bit	1,e
(1) 3781/    1087 : 28 0F               		jr      z,.ckon
(1) 3782/    1089 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3783/    108C : B7                  		or	a
(1) 3784/    108D : 28 09               		jr	z,.ckon
(1) 3785/    108F : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3786/    1093 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3787/    1097 : CF                  		rst	8
(1) 3788/    1098 :                     .ckon:
(1) 3789/    1098 :                     	; ----------------------------
(1) 3790/    1098 :                     	; bit 0 - key on
(1) 3791/    1098 : CB 43               		bit	0,e
(1) 3792/    109A : 28 1A               		jr	z,.envproc
(1) 3793/    109C : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3794/    10A0 : 78                  		ld	a,b
(1) 3795/    10A1 : FE 04               		cp	4			; NOISE channel?
(1) 3796/    10A3 : 20 08               		jr	nz,.nskip
(1) 3797/    10A5 : CF                  		rst	8			; Set NOISE mode
(1) 3798/    10A6 : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3799/    10A9 : B1                  		or	c
(1) 3800/    10AA : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3801/    10AD :                     .nskip:
(1) 3802/    10AD : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3803/    10B1 : CF                  		rst	8
(1) 3804/    10B2 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3805/    10B6 :                     .nblock:
(1) 3806/    10B6 :                     
(1) 3807/    10B6 :                     	; ----------------------------
(1) 3808/    10B6 :                     	; Process effects
(1) 3809/    10B6 :                     	; ----------------------------
(1) 3810/    10B6 :                     .envproc:
(1) 3811/    10B6 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3812/    10B9 : B7                  		or	a			; no modes
(1) 3813/    10BA : CA 40 11            		jp	z,.vedlp
(1) 3814/    10BD : FE 01               		cp 	001b			; Attack mode
(1) 3815/    10BF : 20 2C               		jr	nz,.chk2
(1) 3816/    10C1 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3817/    10C5 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3818/    10C8 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3819/    10CB : B7                  		or	a
(1) 3820/    10CC : 28 16               		jr	z,.atkend
(1) 3821/    10CE : 57                  		ld	d,a			; c - attack rate
(1) 3822/    10CF : 7B                  		ld	a,e			; a - attack level
(1) 3823/    10D0 : CF                  		rst	8
(1) 3824/    10D1 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3825/    10D4 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3826/    10D5 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3827/    10D7 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3828/    10D9 : BB                  		cp	e			; attack rate == level?
(1) 3829/    10DA : 38 08               		jr	c,.atkend
(1) 3830/    10DC : 28 06               		jr	z,.atkend
(1) 3831/    10DE : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3832/    10E1 : CF                  		rst	8
(1) 3833/    10E2 : 18 5C               		jr	.vedlp
(1) 3834/    10E4 :                     .atkend:
(1) 3835/    10E4 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3836/    10E7 :                     .atkzero:
(1) 3837/    10E7 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3838/    10EB : 18 53               		jr	.vedlp
(1) 3839/    10ED :                     .chk2:
(1) 3840/    10ED :                     
(1) 3841/    10ED : FE 02               		cp	010b			; Decay mode
(1) 3842/    10EF : 20 31               		jr	nz,.chk4
(1) 3843/    10F1 :                     .dectmr:
(1) 3844/    10F1 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3845/    10F5 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3846/    10F8 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3847/    10FB : BB                  		cp	e
(1) 3848/    10FC : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3849/    10FE : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3850/    1100 : CF                  		rst	8
(1) 3851/    1101 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3852/    1104 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3853/    1106 : BB                  		cp	e			; compare level
(1) 3854/    1107 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3855/    1109 : 18 08               		jr	.dksav
(1) 3856/    110B :                     .dkadd:
(1) 3857/    110B : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3858/    110E : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3859/    1110 : BB                  		cp	e			; compare level
(1) 3860/    1111 : 30 05               		jr	nc,.dkyend
(1) 3861/    1113 :                     .dksav:
(1) 3862/    1113 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3863/    1116 : 18 28               		jr	.vedlp
(1) 3864/    1118 :                     .dkyend:
(1) 3865/    1118 : CF                  		rst	8
(1) 3866/    1119 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3867/    111C : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3868/    1120 : 18 1E               		jr	.vedlp
(1) 3869/    1122 :                     .chk4:
(1) 3870/    1122 : FE 04               		cp	100b			; Sustain phase
(1) 3871/    1124 : 20 1A               		jr	nz,.vedlp
(1) 3872/    1126 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3873/    112A : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3874/    112D : CF                  		rst	8
(1) 3875/    112E : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3876/    1131 : 38 05               		jr	c,.killenv		; release done
(1) 3877/    1133 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3878/    1136 : 18 08               		jr	.vedlp
(1) 3879/    1138 :                     .killenv:
(1) 3880/    1138 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3881/    113C : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3882/    1140 :                     .vedlp:
(1) 3883/    1140 :                     	; ----------------------------
(1) 3884/    1140 :                     	; PSG UPDATE
(1) 3885/    1140 :                     	; ----------------------------
(1) 3886/    1140 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3887/    1143 : B7                  		or	a
(1) 3888/    1144 : 28 72               		jr	z,.noupd
(1) 3889/    1146 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3890/    114A : 59                  		ld	e,c
(1) 3891/    114B : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3892/    114E : 57                  		ld	d,a
(1) 3893/    114F : E6 03               		and	011b
(1) 3894/    1151 : FE 03               		cp	011b
(1) 3895/    1153 : 20 1D               		jr	nz,.normal
(1) 3896/    1155 : CF                  		rst	8
(1) 3897/    1156 : 78                  		ld	a,b		; Channel 4?
(1) 3898/    1157 : FE 03               		cp	3
(1) 3899/    1159 : 28 13               		jr	z,.silnc_3
(1) 3900/    115B : FE 04               		cp	4
(1) 3901/    115D : 20 18               		jr	nz,.do_nfreq
(1) 3902/    115F : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3903/    1162 : 57                  		ld	d,a
(1) 3904/    1163 : E6 03               		and	011b
(1) 3905/    1165 : CF                  		rst	8
(1) 3906/    1166 : FE 03               		cp	011b
(1) 3907/    1168 : 20 30               		jr	nz,.vonly
(1) 3908/    116A : 1E C0               		ld	e,0C0h
(1) 3909/    116C : 18 09               		jr	.do_nfreq
(1) 3910/    116E :                     .silnc_3:
(1) 3911/    116E : 3E FF               		ld	a,-1
(1) 3912/    1170 : 18 32               		jr	.vlmuch
(1) 3913/    1172 :                     .normal:
(1) 3914/    1172 : 78                  		ld	a,b
(1) 3915/    1173 : FE 04               		cp	4
(1) 3916/    1175 : 28 23               		jr	z,.vonly
(1) 3917/    1177 :                     .do_nfreq:
(1) 3918/    1177 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3919/    117A : FD 66 20            		ld	h,(iy+DTH)
(1) 3920/    117D :                     	; freq effects go here
(1) 3921/    117D :                     	; (save e FIRST.)
(1) 3922/    117D :                     	;	push	de
(1) 3923/    117D :                     	;	pop	de
(1) 3924/    117D : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3925/    117E : E6 0F               		and	00001111b
(1) 3926/    1180 : B3                  		or	e		; OR with channel set in e
(1) 3927/    1181 : CF                  		rst	8
(1) 3928/    1182 : DD 77 00            		ld	(ix),a		; write it
(1) 3929/    1185 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3930/    1186 : 0F                  		rrca
(1) 3931/    1187 : 0F                  		rrca
(1) 3932/    1188 : 0F                  		rrca
(1) 3933/    1189 : 0F                  		rrca
(1) 3934/    118A : E6 0F               		and	00001111b
(1) 3935/    118C : 5F                  		ld	e,a
(1) 3936/    118D : 7C                  		ld	a,h		; Grab MSB bits
(1) 3937/    118E : CF                  		rst	8
(1) 3938/    118F : 07                  		rlca
(1) 3939/    1190 : 07                  		rlca
(1) 3940/    1191 : 07                  		rlca
(1) 3941/    1192 : 07                  		rlca
(1) 3942/    1193 : E6 30               		and	00110000b
(1) 3943/    1195 : B3                  		or	e
(1) 3944/    1196 : DD 77 00            		ld	(ix),a
(1) 3945/    1199 : CF                  		rst	8
(1) 3946/    119A :                     .vonly:
(1) 3947/    119A : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3948/    119D : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3949/    11A0 : 30 02               		jr	nc,.vlmuch
(1) 3950/    11A2 : 3E FF               		ld	a,-1
(1) 3951/    11A4 :                     .vlmuch:
(1) 3952/    11A4 : CB 3F               		srl	a			; (Level >> 4)
(1) 3953/    11A6 : CB 3F               		srl	a
(1) 3954/    11A8 : CB 3F               		srl	a
(1) 3955/    11AA : CF                  		rst	8
(1) 3956/    11AB : CB 3F               		srl	a
(1) 3957/    11AD : E6 0F               		and	00001111b		; Filter volume value
(1) 3958/    11AF : B1                  		or	c			; and OR with current channel
(1) 3959/    11B0 : F6 90               		or	90h			; Set volume-set mode
(1) 3960/    11B2 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3961/    11B5 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3962/    11B8 :                     .noupd:
(1) 3963/    11B8 :                     	; ----------------------------
(1) 3964/    11B8 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3965/    11BA : 79                  		ld	a,c
(1) 3966/    11BB : CF                  		rst	8
(1) 3967/    11BC : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3968/    11BE : 4F                  		ld	c,a
(1) 3969/    11BF : 05                  		dec	b
(1) 3970/    11C0 : C2 6D 10            		jp	nz,.vloop
(1) 3971/    11C3 : C9                  		ret
(1) 3972/    11C4 :                     
(1) 3973/    11C4 :                     ; ---------------------------------------------
(1) 3974/    11C4 :                     ; FM register writes
(1) 3975/    11C4 :                     ;
(1) 3976/    11C4 :                     ; Input:
(1) 3977/    11C4 :                     ; d - ctrl
(1) 3978/    11C4 :                     ; e - data
(1) 3979/    11C4 :                     ; ---------------------------------------------
(1) 3980/    11C4 :                     
(1) 3981/    11C4 :                     ; c - KeyID
(1) 3982/    11C4 :                     fm_autoreg:
(1) 3983/    11C4 : CB 51               		bit	2,c
(1) 3984/    11C6 : 20 0B               		jr	nz,fm_send_2
(1) 3985/    11C8 :                     
(1) 3986/    11C8 :                     ; Channels 1-3 and global registers
(1) 3987/    11C8 :                     fm_send_1:
(1) 3988/    11C8 : 7A                  		ld	a,d
(1) 3989/    11C9 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3990/    11CC : 00                  		nop
(1) 3991/    11CD : 7B                  		ld	a,e
(1) 3992/    11CE : 32 01 40            		ld	(Zym_data_1),a
(1) 3993/    11D1 : 00                  		nop
(1) 3994/    11D2 : C9                  		ret
(1) 3995/    11D3 :                     ; Channels 4-6
(1) 3996/    11D3 :                     fm_send_2:
(1) 3997/    11D3 : 7A                  		ld	a,d
(1) 3998/    11D4 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3999/    11D7 : 00                  		nop
(1) 4000/    11D8 : 7B                  		ld	a,e
(1) 4001/    11D9 : 32 03 40            		ld	(Zym_data_2),a
(1) 4002/    11DC : 00                  		nop
(1) 4003/    11DD : C9                  		ret
(1) 4004/    11DE :                     
(1) 4005/    11DE :                     ; --------------------------------------------------------
(1) 4006/    11DE :                     ; brute-force WAVE ON/OFF playback
(1) 4007/    11DE :                     ; --------------------------------------------------------
(1) 4008/    11DE :                     
(1) 4009/    11DE :                     dac_on:
(1) 4010/    11DE : 3E 2B               		ld	a,2Bh
(1) 4011/    11E0 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4012/    11E3 : 3E 80               		ld	a,80h
(1) 4013/    11E5 : 32 01 40            		ld	(Zym_data_1),a
(1) 4014/    11E8 : 3E D9               		ld 	a,zopcExx
(1) 4015/    11EA : 32 08 00            		ld	(dac_me),a
(1) 4016/    11ED : 3E F5               		ld 	a,zopcPushAf
(1) 4017/    11EF : 32 20 00            		ld	(dac_fill),a
(1) 4018/    11F2 : C9                  		ret
(1) 4019/    11F3 :                     dac_off:
(1) 4020/    11F3 : 3E 2B               		ld	a,2Bh
(1) 4021/    11F5 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4022/    11F8 : 3E 00               		ld	a,00h
(1) 4023/    11FA : 32 01 40            		ld	(Zym_data_1),a
(1) 4024/    11FD : 3E C9               		ld 	a,zopcRet
(1) 4025/    11FF : 32 08 00            		ld	(dac_me),a
(1) 4026/    1202 : 3E C9               		ld 	a,zopcRet
(1) 4027/    1204 : 32 20 00            		ld	(dac_fill),a
(1) 4028/    1207 : C9                  		ret
(1) 4029/    1208 :                     
(1) 4030/    1208 :                     ; --------------------------------------------------------
(1) 4031/    1208 :                     ; dac_play
(1) 4032/    1208 :                     ;
(1) 4033/    1208 :                     ; Plays a new sample
(1) 4034/    1208 :                     ;
(1) 4035/    1208 :                     ; NOTE:
(1) 4036/    1208 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4037/    1208 :                     ; getting here.
(1) 4038/    1208 :                     ; --------------------------------------------------------
(1) 4039/    1208 :                     
(1) 4040/    1208 :                     dac_play:
(1) 4041/    1208 : F3                  		di
(1) 4042/    1209 : CD F3 11            		call	dac_off
(1) 4043/    120C : D9                  		exx				; flip exx regs
(1) 4044/    120D : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4045/    1210 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4046/    1214 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4047/    1217 : D9                  		exx				; move them back
(1) 4048/    1218 : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4049/    121B : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4050/    121E : 22 A9 17            		ld	(dDacPntr),hl
(1) 4051/    1221 : 32 AB 17            		ld	(dDacPntr+2),a
(1) 4052/    1224 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4053/    1227 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4054/    122A : 22 AC 17            		ld	(dDacCntr),hl
(1) 4055/    122D : 32 AE 17            		ld	(dDacCntr+2),a
(1) 4056/    1230 : AF                  		xor	a
(1) 4057/    1231 : 32 37 00            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4058/    1234 : CD 3C 12            		call	dac_refill
(1) 4059/    1237 : CD DE 11            		call	dac_on
(1) 4060/    123A : FB                  		ei
(1) 4061/    123B : C9                  		ret
(1) 4062/    123C :                     
(1) 4063/    123C :                     ; --------------------------------------------------------
(1) 4064/    123C :                     
(1) 4065/    123C :                     dac_refill:
(1) 4066/    123C : CF                  		rst	8
(1) 4067/    123D : C5                  		push	bc
(1) 4068/    123E : D5                  		push	de
(1) 4069/    123F : E5                  		push	hl
(1) 4070/    1240 : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4071/    1243 : FE 07               		cp	111b
(1) 4072/    1245 : D2 FB 12            		jp	nc,.dacfill_end
(1) 4073/    1248 : 3A AE 17            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4074/    124B : 2A AC 17            		ld	hl,(dDacCntr)
(1) 4075/    124E : 01 80 00            		ld	bc,80h
(1) 4076/    1251 : 37                  		scf
(1) 4077/    1252 : 3F                  		ccf
(1) 4078/    1253 : ED 42               		sbc	hl,bc
(1) 4079/    1255 : DE 00               		sbc	a,0
(1) 4080/    1257 : 32 AE 17            		ld	(dDacCntr+2),a
(1) 4081/    125A : 22 AC 17            		ld	(dDacCntr),hl
(1) 4082/    125D : 16 1D               		ld	d,dWaveBuff>>8
(1) 4083/    125F : B7                  		or	a
(1) 4084/    1260 : FA 8A 12            		jp	m,.dac_over
(1) 4085/    1263 : 3A 37 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4086/    1266 : 5F                  		ld	e,a
(1) 4087/    1267 : C6 80               		add 	a,80h
(1) 4088/    1269 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4089/    126C : 2A A9 17            		ld	hl,(dDacPntr)
(1) 4090/    126F : 3A AB 17            		ld	a,(dDacPntr+2)
(1) 4091/    1272 : CD A8 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4092/    1275 : 2A A9 17            		ld	hl,(dDacPntr)
(1) 4093/    1278 : 3A AB 17            		ld	a,(dDacPntr+2)
(1) 4094/    127B : 01 80 00            		ld	bc,80h
(1) 4095/    127E : 09                  		add	hl,bc
(1) 4096/    127F : CE 00               		adc	a,0
(1) 4097/    1281 : 22 A9 17            		ld	(dDacPntr),hl
(1) 4098/    1284 : 32 AB 17            		ld	(dDacPntr+2),a
(1) 4099/    1287 : C3 FE 12            		jp	.dacfill_ret
(1) 4100/    128A :                     ; NOTE: This doesn't finish at the exact END point
(1) 4101/    128A :                     ; but the USER won't notice it.
(1) 4102/    128A :                     .dac_over:
(1) 4103/    128A : 16 1D               		ld	d,dWaveBuff>>8
(1) 4104/    128C : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4105/    128F : E6 01               		and	001b
(1) 4106/    1291 : C2 B4 12            		jp	nz,.dacfill_loop
(1) 4107/    1294 : 7D                  		ld	a,l
(1) 4108/    1295 : C6 80               		add	a,80h
(1) 4109/    1297 : 4F                  		ld	c,a
(1) 4110/    1298 : 06 00               		ld	b,0
(1) 4111/    129A : C5                  		push	bc
(1) 4112/    129B : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4113/    129E : 5F                  		ld	e,a
(1) 4114/    129F : C6 80               		add	a,80h
(1) 4115/    12A1 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4116/    12A4 : C1                  		pop	bc
(1) 4117/    12A5 : 79                  		ld	a,c
(1) 4118/    12A6 : B0                  		or	b
(1) 4119/    12A7 : 28 52               		jr	z,.dacfill_end
(1) 4120/    12A9 : 2A A9 17            		ld	hl,(dDacPntr)
(1) 4121/    12AC : 3A AB 17            		ld	a,(dDacPntr+2)
(1) 4122/    12AF : CD A8 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4123/    12B2 : 18 47               		jr	.dacfill_end
(1) 4124/    12B4 :                     ; loop sample
(1) 4125/    12B4 :                     .dacfill_loop:
(1) 4126/    12B4 : C5                  		push	bc
(1) 4127/    12B5 : D5                  		push	de
(1) 4128/    12B6 : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4129/    12B9 : 4F                  		ld	c,a
(1) 4130/    12BA : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4131/    12BE : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4132/    12C1 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4133/    12C4 : 81                  		add	a,c
(1) 4134/    12C5 : 19                  		add	hl,de
(1) 4135/    12C6 : CE 00               		adc	a,0
(1) 4136/    12C8 : 22 A9 17            		ld	(dDacPntr),hl
(1) 4137/    12CB : 32 AB 17            		ld	(dDacPntr+2),a
(1) 4138/    12CE : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4139/    12D1 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4140/    12D4 : 91                  		sub	a,c
(1) 4141/    12D5 : 37                  		scf
(1) 4142/    12D6 : 3F                  		ccf
(1) 4143/    12D7 : ED 52               		sbc	hl,de
(1) 4144/    12D9 : DE 00               		sbc	a,0
(1) 4145/    12DB : 22 AC 17            		ld	(dDacCntr),hl
(1) 4146/    12DE : 32 AE 17            		ld	(dDacCntr+2),a
(1) 4147/    12E1 : D1                  		pop	de
(1) 4148/    12E2 : C1                  		pop	bc
(1) 4149/    12E3 : 78                  		ld	a,b
(1) 4150/    12E4 : B1                  		or	c
(1) 4151/    12E5 : 28 17               		jr	z,.dacfill_ret
(1) 4152/    12E7 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4153/    12EA : 5F                  		ld	e,a
(1) 4154/    12EB : C6 80               		add	a,80h
(1) 4155/    12ED : 32 37 00            		ld	(dDacFifoMid),a
(1) 4156/    12F0 : 2A A9 17            		ld	hl,(dDacPntr)
(1) 4157/    12F3 : 3A AB 17            		ld	a,(dDacPntr+2)
(1) 4158/    12F6 : CD A8 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4159/    12F9 : 18 03               		jr	.dacfill_ret
(1) 4160/    12FB :                     .dacfill_end:
(1) 4161/    12FB : CD F3 11            		call	dac_off		; DAC finished
(1) 4162/    12FE :                     .dacfill_ret:
(1) 4163/    12FE : E1                  		pop	hl
(1) 4164/    12FF : D1                  		pop	de
(1) 4165/    1300 : C1                  		pop	bc
(1) 4166/    1301 : C9                  		ret
(1) 4167/    1302 :                     
(1) 4168/    1302 :                     ; ----------------------------------------------------------------
(1) 4169/    1302 :                     ; gema_lastbank
(1) 4170/    1302 :                     ;
(1) 4171/    1302 :                     ; Two purposes:
(1) 4172/    1302 :                     ; - Set the BANK to the very last part of memory for the
(1) 4173/    1302 :                     ;   readRom to read from RAM
(1) 4174/    1302 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4175/    1302 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4176/    1302 :                     ;
(1) 4177/    1302 :                     ; Uses:
(1) 4178/    1302 :                     ; hl,b
(1) 4179/    1302 :                     ; ----------------------------------------------------------------
(1) 4180/    1302 :                     
(1) 4181/    1302 :                     gema_lastbank:
(1) 4182/    1302 : 21 00 60            		ld	hl,6000h
(1) 4183/    1305 : 06 09               		ld	b,9		; 9 bits
(1) 4184/    1307 :                     .write:
(1) 4185/    1307 : 36 01               		ld	(hl),1
(1) 4186/    1309 : 10 FC               		djnz	.write
(1) 4187/    130B : C9                  		ret
(1) 4188/    130C :                     
(1) 4189/    130C :                     ; ====================================================================
(1) 4190/    130C :                     ; ----------------------------------------------------------------
(1) 4191/    130C :                     ; Frequency tables
(1) 4192/    130C :                     ; ----------------------------------------------------------------
(1) 4193/    130C :                     
(1) 4194/    130C : 84 02               fmFreq_List:	dw 644
(1) 4195/    130E : A9 02               		dw 681
(1) 4196/    1310 : D2 02               		dw 722
(1) 4197/    1312 : FD 02               		dw 765
(1) 4198/    1314 : 2A 03               		dw 810
(1) 4199/    1316 : 5A 03               		dw 858
(1) 4200/    1318 : 8E 03               		dw 910
(1) 4201/    131A : C4 03               		dw 964
(1) 4202/    131C : FD 03               		dw 1021
(1) 4203/    131E : 39 04               		dw 1081
(1) 4204/    1320 : 7A 04               		dw 1146
(1) 4205/    1322 : BE 04               		dw 1214
(1) 4206/    1324 :                     
(1) 4207/    1324 :                     ; ----------------------------------------
(1) 4208/    1324 :                     ; DAC and PWM
(1) 4209/    1324 :                     ; ----------------------------------------
(1) 4210/    1324 :                     
(1) 4211/    1324 :                     psgFreq_List:
(1) 4212/    1324 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4213/    1324 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4214/    1324 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4215/    1324 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             132A : FF FF FF FF FF FF 
             1330 : FF FF FF FF FF FF 
             1336 : F8 03 BF 03 89 03 
(1) 4216/    133C : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1342 : CE 02 A5 02 80 02 
             1348 : 5C 02 3A 02 1A 02 
             134E : FB 01 DF 01 C4 01 
(1) 4217/    1354 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             135A : 67 01 53 01 40 01 
             1360 : 2E 01 1D 01 0D 01 
             1366 : FE 00 EF 00 E2 00 
(1) 4218/    136C : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1372 : B4 00 A9 00 A0 00 
             1378 : 97 00 8F 00 87 00 
             137E : 7F 00 78 00 71 00 
(1) 4219/    1384 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             138A : 5A 00 55 00 50 00 
             1390 : 4B 00 47 00 43 00 
             1396 : 40 00 3C 00 39 00 
(1) 4220/    139C : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             13A2 : 2D 00 2B 00 28 00 
             13A8 : 26 00 24 00 22 00 
             13AE : 20 00 1F 00 1D 00 
(1) 4221/    13B4 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             13BA : 17 00 16 00 15 00 
             13C0 : 13 00 12 00 11 00 
             13C6 : 10 00 09 00 01 00 
(1) 4222/    13CC :                     
(1) 4223/    13CC :                     ; ----------------------------------------
(1) 4224/    13CC :                     ; DAC and PWM shared list
(1) 4225/    13CC :                     ; ----------------------------------------
(1) 4226/    13CC :                     
(1) 4227/    13CC :                     wavFreq_List:
(1) 4228/    13CC :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4229/    13CC :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4230/    13CC :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4231/    13CC :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4232/    13CC : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             13D2 : 4C 00 51 00 56 00 
             13D8 : 5B 00 60 00 66 00 
             13DE : 6C 00 73 00 79 00 
(1) 4233/    13E4 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             13EA : 99 00 A2 00 AC 00 
             13F0 : B6 00 C1 00 CC 00 
             13F6 : D8 00 E5 00 F2 00 
(1) 4234/    13FC : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             1402 : 32 01 45 01 58 01 
             1408 : 6C 01 82 01 98 01 
             140E : AE 01 C7 01 E0 01 
(1) 4235/    1414 : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             141A : 60 02 80 02 A0 02 
             1420 : D0 02 F8 02 28 03 
             1426 : 52 03 90 03 C8 03 
(1) 4236/    142C : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4237/    142E :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4238/    142E :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4239/    142E :                     
(1) 4240/    142E :                     ; ----------------------------------------
(1) 4241/    142E :                     ; SegaCD PCM
(1) 4242/    142E :                     ; ----------------------------------------
(1) 4243/    142E :                     wavFreq_CdPcm:
(1) 4244/    142E :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4245/    142E :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4246/    142E :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4247/    142E : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1434 : 28 01 3C 01 4C 01 
             143A : 60 01 7C 01 88 01 
             1440 : AA 01 BC 01 DC 01 
(1) 4248/    1446 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             144C : 58 02 7C 02 A0 02 
             1452 : C8 02 FC 02 1C 03 
             1458 : 54 03 7C 03 B8 03 
(1) 4249/    145E : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1464 : AC 04 EC 04 40 05 
             146A : 90 05 E4 05 3C 06 
             1470 : 98 06 04 07 60 07 
(1) 4250/    1476 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             147C : 60 09 F0 09 64 0A 
             1482 : 04 0B AA 0B 60 0C 
             1488 : 18 0D E4 0D B8 0E 
(1) 4251/    148E : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             1494 : 80 12 9C 13 C8 14 
             149A : 24 16 4C 17 DC 18 
             14A0 : 38 1A E0 1B 94 1D 
(1) 4252/    14A6 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4253/    14A6 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4254/    14A6 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4255/    14A6 :                     
(1) 4256/    14A6 :                     ; ====================================================================
(1) 4257/    14A6 :                     ; ----------------------------------------------------------------
(1) 4258/    14A6 :                     ; Chip buffers
(1) 4259/    14A6 :                     ; ----------------------------------------------------------------
(1) 4260/    14A6 :                     
(1) 4261/    14A6 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14AC : 00 00             
(1) 4262/    14AE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             14B4 : 00 00             
(1) 4263/    14B6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14BC : 00 00             
(1) 4264/    14BE : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             14C4 : FF FF             
(1) 4265/    14C6 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             14CC : FF FF             
(1) 4266/    14CE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             14D4 : 00 00             
(1) 4267/    14D6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14DC : 00 00             
(1) 4268/    14DE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14E4 : 00 00             
(1) 4269/    14E6 :                     
(1) 4270/    14E6 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14EC : 00 00             
(1) 4271/    14EE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14F4 : 00 00             
(1) 4272/    14F6 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14FC : 00 00             
(1) 4273/    14FE : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1504 : 00 00             
(1) 4274/    1506 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             150C : 00 00             
(1) 4275/    150E : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1514 : 00 00             
(1) 4276/    1516 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             151C : 00 00             
(1) 4277/    151E :                     
(1) 4278/    151E : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4279/    1522 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4280/    1526 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4281/    152A : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4282/    152E : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4283/    1532 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4284/    1536 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4285/    153A : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4286/    153E : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4287/    1542 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4288/    1546 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4289/    154A : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4290/    154E : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4291/    1552 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4292/    1556 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4293/    155A :                     
(1) 4294/    155A :                     ; --------------------------------------------------------
(1) 4295/    155A :                     fmcach_1	ds 28h
(1) 4296/    1582 :                     fmcach_2	ds 28h
(1) 4297/    15AA :                     fmcach_3	ds 28h
(1) 4298/    15D2 :                     fmcach_4	ds 28h
(1) 4299/    15FA :                     fmcach_5	ds 28h
(1) 4300/    1622 :                     fmcach_6	ds 28h
(1) 4301/    164A :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4302/    1656 :                     trkInfoCach	ds 4
(1) 4303/    165A :                     		ds 4*3		; _rsave followup
(1) 4304/    1666 :                     
(1) 4305/    1666 :                     ; ====================================================================
(1) 4306/    1666 :                     ; ----------------------------------------------------------------
(1) 4307/    1666 :                     ; Track buffers
(1) 4308/    1666 :                     ; ----------------------------------------------------------------
(1) 4309/    1666 :                     
(1) 4310/    1666 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4311/    1686 :                     trkHdrs_1	ds 8*4
(1) 4312/    16A6 :                     trkHdrs_2	ds 8*4
(1) 4313/    16C6 :                     trkBlks_0	ds 8
(1) 4314/    16CE :                     trkBlks_1	ds 8
(1) 4315/    16D6 :                     trkBlks_2	ds 8
(1) 4316/    16DE :                     trkBuff_0	ds seq_ChnIndx+MAX_TRKINDX
(1) 4317/    171D :                     trkBuff_1	ds seq_ChnIndx+MAX_TRKINDX
(1) 4318/    175C :                     trkBuff_2	ds seq_ChnIndx+MAX_TRKINDX
(1) 4319/    179B : 5A 15               fmcach_list:	dw fmcach_1
(1) 4320/    179D : 82 15               		dw fmcach_2
(1) 4321/    179F : AA 15               		dw fmcach_3
(1) 4322/    17A1 : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4323/    17A2 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4324/    17A3 : D2 15               		dw fmcach_4		; Followup
(1) 4325/    17A5 : FA 15               		dw fmcach_5
(1) 4326/    17A7 : 22 16               		dw fmcach_6
(1) 4327/    17A9 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4328/    17AC : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4329/    17AF :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4330/    17BD :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4331/    17BF :                     sampleHead	ds 006h
(1) 4332/    17C5 :                     instListOut	ds 8
(1) 4333/    17CD :                     
(1) 4334/    17CD :                     ; ====================================================================
(1) 4335/    17CD :                     ; --------------------------------------------------------
(1) 4336/    17CD :                     ; MASTER buffers list
(1) 4337/    17CD :                     ;
(1) 4338/    17CD :                     ; dw track_buffer
(1) 4339/    17CD :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4340/    17CD :                     ;
(1) 4341/    17CD :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4342/    17CD :                     ; --------------------------------------------------------
(1) 4343/    17CD :                     
(1) 4344/    17CD :                     nikona_BuffList:
(1) 4345/    17CD : DE 16 C6 16 66 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             17D3 : 00 1F             
(1) 4346/    17D5 : 1D 17 CE 16 86 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             17DB : 20 1F             
(1) 4347/    17DD : 5C 17 D6 16 A6 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             17E3 : 40 1F             
(1) 4348/    17E5 :                     nikona_BuffList_e:
(1) 4349/    17E5 : FF FF               	dw -1	; ENDOFLIST
(1) 4350/    17E7 :                     
(1) 4351/    17E7 :                     ; ====================================================================
(1) 4352/    17E7 :                     ; --------------------------------------------------------
(1) 4353/    17E7 :                     ; Channel tables
(1) 4354/    17E7 :                     ;
(1) 4355/    17E7 :                     ; PSG   80h
(1) 4356/    17E7 :                     ; PSGN  90h
(1) 4357/    17E7 :                     ; FM   0A0h
(1) 4358/    17E7 :                     ; FM3  0B0h
(1) 4359/    17E7 :                     ; DAC  0C0h
(1) 4360/    17E7 :                     ; PCM  0D0h
(1) 4361/    17E7 :                     ; PWM  0E0h
(1) 4362/    17E7 :                     ; --------------------------------------------------------
(1) 4363/    17E7 :                     
(1) 4364/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4365/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4366/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4367/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4368/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4369/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4370/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4371/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4372/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4373/    1B0E :                     ; --------------------------------------------------------
(1) 4374/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4375/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4376/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4377/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4378/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4379/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4380/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4381/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4382/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4383/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4384/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4385/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4386/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4387/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4388/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4389/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4390/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4391/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4392/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4393/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4394/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4395/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4396/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4397/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4398/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4399/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4400/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4401/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4402/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4403/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4404/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4405/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4406/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4407/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4408/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4409/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4410/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4411/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4412/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4413/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4414/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4415/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4416/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4417/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4418/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4419/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4420/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4421/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4422/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4423/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4424/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4425/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4426/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4427/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4428/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4429/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4430/    1CEA :                     ; ----------------------------------------------------------------
(1) 4431/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4432/    1CEC : 00                  		db 0
(1) 4433/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4434/    1CEF : 00                  		db 0
(1) 4435/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4436/    1CF2 : 00                  		db 0
(1) 4437/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4438/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4439/    1CF6 :                     
(1) 4440/    1CF6 : 00                  tickSpSet	db 0		; **
(1) 4441/    1CF7 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4442/    1CF8 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4443/    1CF9 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4444/    1CFA :                     
(1) 4445/    1CFA :                     ; ====================================================================
(1) 4446/    1CFA :                     ; ----------------------------------------------------------------
(1) 4447/    1CFA :                     ; Special aligned buffers
(1) 4448/    1CFA :                     ;
(1) 4449/    1CFA :                     ; Located at 1D00h
(1) 4450/    1CFA :                     ; ----------------------------------------------------------------
(1) 4451/    1CFA :                     
(1) 4452/    1D00 :                     		org 1D00h
(1) 4453/    1D00 :                     dWaveBuff	ds 100h				; WAVE data buffer: 100h bytes
(1) 4454/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4455/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4456/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4457/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4458/    1F60 :                     
(1) 4459/    1F60 :                     ; ====================================================================
(1) 4460/    1F60 :                     ; ----------------------------------------------------------------
(1) 4461/    1F60 :                     ; Control area
(1) 4462/    1F60 :                     ; * MANUAL ORDER, check gema.asm *
(1) 4463/    1F60 :                     ; ----------------------------------------------------------------
(1) 4464/    1F60 :                     
(1) 4465/    1F60 :                     		org 1F60h
(1) 4466/    1F60 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1) 4467/    1F80 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(1) 4468/    1F81 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(1) 4469/    1F82 : 00 00               cdRamDst	db 0,0				; ** Z80 destination
(1) 4470/    1F84 : 00 00               cdRamSrc	db 0,0				; ** 68k 24-bit source
(1) 4471/    1F86 : 00                  cdRamSrcB	db 0				; **
(1) 4472/    1F87 : 00                  cdRamLen	db 0				; Size + status flag
(1) 4473/    1F88 : 00                  palMode		db 0				; PAL mode flag
(1) 4474/    1F89 : 00                  mcdBlock	db 0				; Flag to BLOCK PCM transfers.
(1) 4475/    1F8A : 00                  marsBlock	db 0				; Flag to BLOCK PWM transfers.
(1) 4476/    1F8B :                     
(1) 4477/    1F8B :                     ; --------------------------------------------------------
(1) 4478/    3C5B :                     		dephase
(1) 4479/    3C5B :                     		cpu 68000		; [AS] Return to 68k
(1) 4480/    3C5B :                     		padding off		; [AS] NO padding
(1) 4481/    3C5B :                     		align 2
(1) 4482/    3C5C :                     
     317/    3C5C :                     Z80_CODE_END:
     324/    3C5C :                     Z80_CODE_FILE_E:
     325/    3C5C :                     
     326/    3C5C :                     ; ====================================================================
     327/    3C5C :                     ; --------------------------------------------------------
     328/    3C5C :                     ; SEGA CD SUB-CPU data
     329/    3C5C :                     ; --------------------------------------------------------
     330/    3C5C :                     
     345/    3C5C :                     
     346/    3C5C :                     ; ====================================================================
     347/    3C5C :                     ; ----------------------------------------------------------------
     348/    3C5C :                     ; SH2 code sent to SDRAM area
     349/    3C5C :                     ; ----------------------------------------------------------------
     350/    3C5C :                     
     356/    3C5C :                     MARS_RAMCODE:
     362/    3C5C :                     		align 4
     364/    3C5C :                     MARS_RAMCODE_E:
     369/    3C5C :                     
     370/    3C5C :                     ; ====================================================================
     371/    3C5C :                     ; --------------------------------------------------------
     372/    3C5C :                     ; CODE BLOCK (banks)
     373/    3C5C :                     ; --------------------------------------------------------
     374/    3C5C :                     
     375/    3C5C :                     		include "game/incl_code.asm"
(1)    1/    3C5C :                     ; ============================================================
(1)    2/    3C5C :                     ; --------------------------------------------------------
(1)    3/    3C5C :                     ; CODE BANKS section
(1)    4/    3C5C :                     ;
(1)    5/    3C5C :                     ; Usage:
(1)    6/    3C5C :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/    3C5C :                     ;
(1)    8/    3C5C :                     ; NOTES:
(1)    9/    3C5C :                     ; - Screen order is at game/screens.asm
(1)   10/    3C5C :                     ; - DATA banks are loaded separately inside the
(1)   11/    3C5C :                     ;   screen's code
(1)   12/    3C5C :                     ; --------------------------------------------------------
(1)   13/    3C5C :                     
(1)   14/    3C5C : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   14/    3C5C : =$3C5C               MD_SCREEN00 label *
(1)   14/    3C5C :                     
(1)   14/    3C5C :                     mctopscrn:
(1)   14/    3C5C :                     mcscrn_s:
(1)   14/    3C5C :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/    3C5C :                     ; ===========================================================================
(2)    2/    3C5C :                     ; ----------------------------------------------------------------
(2)    3/    3C5C :                     ; SCREEN CODE
(2)    4/    3C5C :                     ; ----------------------------------------------------------------
(2)    5/    3C5C :                     
(2)    6/    3C5C :                     ; ====================================================================
(2)    7/    3C5C :                     ; ------------------------------------------------------
(2)    8/    3C5C :                     ; Variables
(2)    9/    3C5C :                     ; ------------------------------------------------------
(2)   10/    3C5C :                     
(2)   11/    3C5C : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/    3C5C :                     
(2)   13/    3C5C :                     ; ====================================================================
(2)   14/    3C5C :                     ; ------------------------------------------------------
(2)   15/    3C5C :                     ; Structs
(2)   16/    3C5C :                     ; ------------------------------------------------------
(2)   17/    3C5C :                     
(2)   18/    3C5C :                     ; ----------------------------------------------
(2)   19/    3C5C :                     ; VRAM Setup
(2)   20/    3C5C :                     ; ----------------------------------------------
(2)   21/    3C5C :                     
(2)   22/    3C5C :                     ; 			memory 2		; Cell $0002
(2)   23/    3C5C :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/    3C5C :                     ; 			endmemory
(2)   25/    3C5C :                     
(2)   26/    3C5C :                     ; ====================================================================
(2)   27/    3C5C :                     ; ------------------------------------------------------
(2)   28/    3C5C :                     ; This screen's RAM
(2)   29/    3C5C :                     ; ------------------------------------------------------
(2)   30/    3C5C :                     
(2)   31/    3C5C :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/    3C5C : =$3C5C               GLBL_LASTPC     := *
(2)   31/    3C5C :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/    3C64 :                     .here:          dephase
(2)   35/    3C64 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/    3C5C :                                     phase GLBL_LASTPC
(2)   36/    3C5C :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/    3C5C :                     
(2)   38/    3C5C :                     ; ====================================================================
(2)   39/    3C5C :                     ; ------------------------------------------------------
(2)   40/    3C5C :                     ; Init
(2)   41/    3C5C :                     ; ------------------------------------------------------
(2)   42/    3C5C :                     
(2)   43/    3C5C : 6100 CBE2           		bsr	Video_DisplayOff			; Disable VDP Display
(2)   44/    3C60 : 6100 DA60           		bsr	System_Default				; Default system settings
(2)   45/    3C64 :                     	; ----------------------------------------------
(2)   46/    3C64 :                     	; Init/Load save
(2)   47/    3C64 : 6100 DA4E           		bsr	System_SramInit				; Init/Load
(2)   48/    3C68 : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   49/    3C6C : 6100 DA4C           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   50/    3C70 :                     	; ----------------------------------------------
(2)   51/    3C70 :                     	; Init Print
(2)   52/    3C70 : 41FA 008E           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   53/    3C74 : 6100 DD4E           		bsr	System_SetDataBank
(2)   54/    3C78 : 203C 0003 1A14      		move.l	#ASCII_FONT,d0
(2)   55/    3C7E : 323C 05A0           		move.w	#DEF_PrintVram,d1
(2)   56/    3C82 : 6100 D3E4           		bsr	Video_PrintInit
(2)   57/    3C86 : 203C 0003 2614      		move.l	#ASCII_FONT_W,d0
(2)   58/    3C8C : 323C 04E0           		move.w	#DEF_PrintVramW,d1
(2)   59/    3C90 : 6100 D3D0           		bsr	Video_PrintInitW
(2)   60/    3C94 : 6100 D3DC           		bsr	Video_PrintDefPal_Fade
(2)   61/    3C98 :                     	; ----------------------------------------------
(2)   62/    3C98 : 41FA 0078           		lea	str_MenuText(pc),a0
(2)   63/    3C9C : 7001                		moveq	#1,d0					; X/Y position 1,1
(2)   64/    3C9E : 7201                		moveq	#1,d1
(2)   65/    3CA0 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; FG VRAM location
(2)   66/    3CA4 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)   67/    3CAA : 6100 D46E           		bsr	Video_PrintW
(2)   68/    3CAE : 6128                		bsr	.loop_print				; Draw counter
(2)   69/    3CB0 :                     	; ----------------------------------------------
(2)   70/    3CB0 : 6100 CB82           		bsr	Video_DisplayOn				; Enable VDP Display
(2)   71/    3CB4 : 6100 D2D2           		bsr	Video_FadeIn_Full			; Full fade-in w/Delay
(2)   72/    3CB8 :                     
(2)   73/    3CB8 :                     ; ====================================================================
(2)   74/    3CB8 :                     ; ------------------------------------------------------
(2)   75/    3CB8 :                     ; Loop
(2)   76/    3CB8 :                     ; ------------------------------------------------------
(2)   77/    3CB8 :                     
(2)   78/    3CB8 :                     .loop:
(2)   79/    3CB8 : 6100 D900           		bsr	System_Render
(2)   80/    3CBC : 611A                		bsr	.loop_print
(2)   81/    3CBE :                     
(2)   82/    3CBE :                     	; CD only, check ABC+Start "home" combo
(2)   87/    3CBE : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)   88/    3CC2 : 3E2E 0004           		move.w	on_press(a6),d7
(2)   89/    3CC6 : 0807 0007           		btst	#bitJoyStart,d7
(2)   90/    3CCA : 67EC                		beq.s	.loop
(2)   91/    3CCC : 6100 D2CC           		bsr	Video_FadeOut_Full
(2)   92/    3CD0 : 31FC 0007 E994      		move.w	#7,(RAM_ScreenMode).w			; Go to Screen $07: GEMA tester
(2)   93/    3CD6 : 4E75                		rts
(2)   94/    3CD8 :                     
(2)   95/    3CD8 :                     ; ------------------------------------------------------
(2)   96/    3CD8 :                     ; Show framecounter and input
(2)   97/    3CD8 :                     ; ------------------------------------------------------
(2)   98/    3CD8 :                     
(2)   99/    3CD8 :                     .loop_print:
(2)  100/    3CD8 : 41F8 D7DC           		lea	(RAM_Framecount),a0			; Memory location to print
(2)  101/    3CDC : 227C 0000 0003      		move.l	#3,a1					; Display type 3
(2)  102/    3CE2 : 7001                		moveq	#1,d0					; X pos: 1
(2)  103/    3CE4 : 7204                		moveq	#4,d1					; Y pos: 2
(2)  104/    3CE6 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; VRAM ascii location w/attr
(2)  105/    3CEA : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; VRAM output location and width size
(2)  106/    3CF0 : 6100 D572           		bsr	Video_PrintValW
(2)  107/    3CF4 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2		; small VRAM ver
(2)  108/    3CF8 : 0640 0009           		addi.w	#8+1,d0					; X pos + 9
(2)  109/    3CFC : 6000 D510           		bra	Video_PrintVal
(2)  110/    3D00 :                     
(2)  111/    3D00 :                     ; ------------------------------------------------------
(2)  112/    3D00 :                     ; SCD ONLY
(2)  113/    3D00 :                     ; ------------------------------------------------------
(2)  114/    3D00 :                     
(2)  120/    3D00 :                     
(2)  121/    3D00 :                     ; ------------------------------------------------------
(2)  122/    3D00 :                     ; BANK data location
(2)  123/    3D00 :                     ; ------------------------------------------------------
(2)  124/    3D00 :                     
(2)  125/    3D00 :                     file_scrn1_main:
(2)  126/    3D00 : 0000 45E4           		dc.l DATA_BANK0
(2)  127/    3D04 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             3D0A : 494E 2E42 494E 00 
(2)  128/    3D11 :                     		align 2
(2)  129/    3D12 :                     
(2)  130/    3D12 :                     ; ====================================================================
(2)  131/    3D12 :                     ; ------------------------------------------------------
(2)  132/    3D12 :                     ; Objects
(2)  133/    3D12 :                     ; ------------------------------------------------------
(2)  134/    3D12 :                     
(2)  135/    3D12 :                     ; ====================================================================
(2)  136/    3D12 :                     ; ------------------------------------------------------
(2)  137/    3D12 :                     ; Custom VBlank
(2)  138/    3D12 :                     ; ------------------------------------------------------
(2)  139/    3D12 :                     
(2)  140/    3D12 :                     ; ------------------------------------------------------
(2)  141/    3D12 :                     ; Custom HBlank
(2)  142/    3D12 :                     ; ------------------------------------------------------
(2)  143/    3D12 :                     
(2)  144/    3D12 :                     ; ====================================================================
(2)  145/    3D12 :                     ; ------------------------------------------------------
(2)  146/    3D12 :                     ; Includes for this screen
(2)  147/    3D12 :                     ; ------------------------------------------------------
(2)  148/    3D12 :                     
(2)  149/    3D12 :                     ; ====================================================================
(2)  150/    3D12 :                     ; ------------------------------------------------------
(2)  151/    3D12 :                     ; Small data section
(2)  152/    3D12 :                     ; ------------------------------------------------------
(2)  153/    3D12 :                     
(2)  154/    3D12 :                     str_MenuText:
(2)  155/    3D12 : 4E69 6B6F 6E61      		dc.b "Nikona screen template",$0A
             3D18 : 2073 6372 6565 
             3D1E : 6E20 7465 6D70 
             3D24 : 6C61 7465 0A       
(2)  156/    3D29 : 00                  		dc.b 0
(2)  157/    3D2A :                     		align 2
(2)  158/    3D2A :                     
(2)  159/    3D2A :                     ; ====================================================================
(2)  160/    3D2A :                     
(1)   14/    3D2A :                     mcscrn_e:
(1)   14/    3D2A :                     ; Md_Screen00_e:
(1)   14/    3D2A : =$3D2A               MD_SCREEN00_E label *
(1)   14/    3D2A :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   15/    3D2A :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/    3D2A :                     ; 	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/    3D2A :                     ; 	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/    3D2A :                     ; 	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/    3D2A : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   19/    3D2A : =$3D2A               MD_SCREEN07 label *
(1)   19/    3D2A :                     
(1)   19/    3D2A :                     mctopscrn:
(1)   19/    3D2A :                     mcscrn_s:
(1)   19/    3D2A :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/    3D2A :                     ; ===========================================================================
(2)    2/    3D2A :                     ; ----------------------------------------------------------------
(2)    3/    3D2A :                     ; GEMA SOUND TESTER
(2)    4/    3D2A :                     ; ----------------------------------------------------------------
(2)    5/    3D2A :                     
(2)    6/    3D2A :                     ; ====================================================================
(2)    7/    3D2A :                     ; ------------------------------------------------------
(2)    8/    3D2A :                     ; Settings
(2)    9/    3D2A :                     ; ------------------------------------------------------
(2)   10/    3D2A :                     
(2)   11/    3D2A : =$0                  VIEW_GEMAINFO		equ False		; ** Using this causes loss of DAC quality **
(2)   12/    3D2A : =$1                  VIEW_FAIRY		equ True		; Show status Dodo/Mifi/Fifi
(2)   13/    3D2A :                     
(2)   14/    3D2A :                     ; ====================================================================
(2)   15/    3D2A :                     ; ------------------------------------------------------
(2)   16/    3D2A :                     ; Variables
(2)   17/    3D2A :                     ; ------------------------------------------------------
(2)   18/    3D2A :                     
(2)   19/    3D2A : =$7                  MAX_SNDPICK		equ 7
(2)   20/    3D2A : =$10                 SET_SNDVIEWY		equ 16
(2)   21/    3D2A :                     
(2)   22/    3D2A :                     ; ====================================================================
(2)   23/    3D2A :                     ; ------------------------------------------------------
(2)   24/    3D2A :                     ; Structs
(2)   25/    3D2A :                     ; ------------------------------------------------------
(2)   26/    3D2A :                     
(2)   27/    3D2A :  (MACRO-2)           			memory 2
(2)   27/    3D2A : =$3D2A               GLBL_LASTPC     := *
(2)   27/    3D2A :                                     dephase
(2)   27/       2 :                                     phase 2
(2)   27/       2 : =$2                  GLBL_LASTORG    := *
(2)   28/       2 :                     setVram_Dodo		ds.b $30
(2)   29/      32 :                     setVram_Mimi		ds.b $30
(2)   30/      62 :                     setVram_Fifi		ds.b $30
(2)   31/      92 :  (MACRO-2)           			endmemory
(2)   31/    3DBA :                     .here:          dephase
(2)   31/    3DBA :                                     ds.b -(.here-GLBL_LASTORG)
(2)   31/    3D2A :                                     phase GLBL_LASTPC
(2)   32/    3D2A :                     
(2)   33/    3D2A :                     ; ====================================================================
(2)   34/    3D2A :                     ; ------------------------------------------------------
(2)   35/    3D2A :                     ; This mode's RAM
(2)   36/    3D2A :                     ; ------------------------------------------------------
(2)   37/    3D2A :                     
(2)   38/    3D2A :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   38/    3D2A : =$3D2A               GLBL_LASTPC     := *
(2)   38/    3D2A :                                     dephase
(2)   38/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   38/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   39/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   40/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   41/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   42/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   43/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   44/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   45/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   46/FFFFFFFFFFFFB868 :                     
(2)   47/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   48/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   49/FFFFFFFFFFFFB86C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   50/FFFFFFFFFFFFB86E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   51/FFFFFFFFFFFFB870 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   52/FFFFFFFFFFFFB872 :                     RAM_GemaStatus		ds.w 4
(2)   53/FFFFFFFFFFFFB87A :                     RAM_FairyVars		ds.w 1
(2)   54/FFFFFFFFFFFFB87C :                     RAM_CurrBeats		ds.w 1
(2)   55/FFFFFFFFFFFFB87E :                     RAM_Copy_fmSpecial	ds.w 1
(2)   56/FFFFFFFFFFFFB880 :                     RAM_Copy_HasDac		ds.w 1
(2)   57/FFFFFFFFFFFFB882 :                     
(2)   58/FFFFFFFFFFFFB882 :                     sizeof_thisbuff		ds.l 0
(2)   59/FFFFFFFFFFFFB888 :  (MACRO-2)           			endmemory
(2)   59/    3DB2 :                     .here:          dephase
(2)   59/    3DB2 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   59/    3D2A :                                     phase GLBL_LASTPC
(2)   60/    3D2A :                     
(2)   61/    3D2A :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   62/    3D2A :                     
(2)   63/    3D2A :                     ; ====================================================================
(2)   64/    3D2A :                     ; ------------------------------------------------------
(2)   65/    3D2A :                     ; Init
(2)   66/    3D2A :                     ; ------------------------------------------------------
(2)   67/    3D2A :                     
(2)   68/    3D2A : 6100 CB14           		bsr	Video_DisplayOff
(2)   69/    3D2E : 6100 D992           		bsr	System_Default
(2)   70/    3D32 :                     	; ----------------------------------------------
(2)   71/    3D32 :                     	; Load assets
(2)   72/    3D32 : 41FA 02FC           		lea	file_tscrn_main(pc),a0		; ** LOAD BANK **
(2)   73/    3D36 : 6100 DC8C           		bsr	System_SetDataBank
(2)   74/    3D3A :                     	; ----------------------------------------------
(2)   75/    3D3A : 203C 0003 1A14      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   76/    3D40 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   77/    3D44 : 6100 D322           		bsr	Video_PrintInit
(2)   78/    3D48 : 203C 0003 2614      		move.l	#ASCII_FONT_W,d0
(2)   79/    3D4E : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   80/    3D52 : 6100 D30E           		bsr	Video_PrintInitW
(2)   81/    3D56 : 41F8 D610           		lea	(RAM_PaletteFade+$40).w,a0
(2)   82/    3D5A : 30BC 0000           		move.w	#$0000,(a0)
(2)   83/    3D5E : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   84/    3D64 : 317C 00A0 0004      		move.w	#$00A0,4(a0)
(2)   85/    3D6A : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   86/    3D70 : D0FC 0020           		adda	#$20,a0
(2)   87/    3D74 : 30BC 0000           		move.w	#$0000,(a0)
(2)   88/    3D78 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)   89/    3D7E : 317C 0AAA 0004      		move.w	#$0AAA,4(a0)
(2)   90/    3D84 : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)   91/    3D8A : 41F9 0003 4F96      		lea	(objPal_Dodo+2),a0
(2)   92/    3D90 : 7001                		moveq	#1,d0
(2)   93/    3D92 : 323C 000F           		move.w	#15,d1
(2)   94/    3D96 : 6100 D254           		bsr	Video_FadePal
(2)   95/    3D9A : 41FA 03F0           		lea	ArtList_Stuff(pc),a0
(2)   96/    3D9E : 6100 CD1A           		bsr	Video_LoadArt_List
(2)   97/    3DA2 :                     	; ----------------------------------------------
(2)   98/    3DA2 : 41FA 0402           		lea	str_TesterTitle(pc),a0
(2)   99/    3DA6 : 7006                		moveq	#6,d0
(2)  100/    3DA8 : 7202                		moveq	#2,d1
(2)  101/    3DAA : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  102/    3DAE : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  103/    3DB4 : 6100 D364           		bsr	Video_PrintW
(2)  104/    3DB8 : 41FA 040A           		lea	str_TesterInfo(pc),a0
(2)  106/    3DBC : 7006                		moveq	#6,d0
(2)  110/    3DBE : 7207                		moveq	#7,d1
(2)  111/    3DC0 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  112/    3DC4 : 6100 D2CA           		bsr	Video_Print
(2)  113/    3DC8 : 41FA 0416           		lea	str_Instruc(pc),a0
(2)  114/    3DCC : 7002                		moveq	#2,d0
(2)  115/    3DCE : 7215                		moveq	#21,d1
(2)  116/    3DD0 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  117/    3DD4 : 6100 D2BA           		bsr	Video_Print
(2)  118/    3DD8 : 6100 017A           		bsr	.gema_viewinit
(2)  119/    3DDC :                     ; 		bsr	.show_cursor
(2)  120/    3DDC :                     	; ----------------------------------------------
(2)  121/    3DDC : 6100 C49A           		bsr	gemaReset				; Load default GEMA sound data
(2)  122/    3DE0 :                     ; 		moveq	#1,d0
(2)  123/    3DE0 :                     ; 		moveq	#%10,d1
(2)  124/    3DE0 :                     ; 		bsr	Video_Resolution
(2)  125/    3DE0 :                     	; ----------------------------------------------
(2)  126/    3DE0 : 6100 0132           		bsr	.show_me
(2)  127/    3DE4 : 6100 0186           		bsr	.gema_view
(2)  128/    3DE8 :                     ; 		bsr	.steal_vars
(2)  129/    3DE8 :                     	; ----------------------------------------------
(2)  130/    3DE8 : 6100 CA4A           		bsr	Video_DisplayOn
(2)  131/    3DEC : 6100 DBE8           		bsr	Object_Run
(2)  132/    3DF0 : 6100 C7E6           		bsr	Video_BuildSprites
(2)  133/    3DF4 : 6100 D7C4           		bsr	System_Render
(2)  134/    3DF8 : 6100 D18E           		bsr	Video_FadeIn_Full
(2)  135/    3DFC :                     
(2)  136/    3DFC :                     ; ====================================================================
(2)  137/    3DFC :                     ; ------------------------------------------------------
(2)  138/    3DFC :                     ; Loop
(2)  139/    3DFC :                     ; ------------------------------------------------------
(2)  140/    3DFC :                     
(2)  141/    3DFC :                     .loop:
(2)  142/    3DFC : 6100 D7BC           		bsr	System_Render
(2)  143/    3E00 :                     ; 		bsr	.show_cursor
(2)  144/    3E00 : 6100 016A           		bsr	.gema_view
(2)  145/    3E04 : 6100 DBD0           		bsr	Object_Run
(2)  146/    3E08 : 6100 C7CE           		bsr	Video_BuildSprites
(2)  147/    3E0C :                     
(2)  148/    3E0C :                     	; NEW controls
(2)  149/    3E0C : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)  150/    3E10 :                     	; LEFT/RIGHT
(2)  151/    3E10 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  152/    3E14 : 3C07                		move.w	d7,d6
(2)  153/    3E16 : 0246 0080           		andi.w	#JoyStart,d6
(2)  154/    3E1A : 6600 00C4           		bne	.exit_this
(2)  155/    3E1E : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  156/    3E22 : 6718                		beq.s	.lr_seq
(2)  157/    3E24 : 7001                		moveq	#1,d0
(2)  158/    3E26 : 0247 0004           		andi.w	#JoyLeft,d7
(2)  159/    3E2A : 6708                		beq.s	.lr_right
(2)  160/    3E2C : 4A78 B86E           		tst.w	(RAM_GemaSeq).w
(2)  161/    3E30 : 670A                		beq.s	.lr_seq
(2)  162/    3E32 : 4440                		neg.w	d0
(2)  163/    3E34 :                     .lr_right:
(2)  164/    3E34 : D178 B86E           		add.w	d0,(RAM_GemaSeq).w
(2)  165/    3E38 : 6100 00DA           		bsr	.show_me
(2)  166/    3E3C :                     .lr_seq:
(2)  167/    3E3C :                     
(2)  168/    3E3C :                     	; UP/DOWN
(2)  169/    3E3C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  170/    3E40 : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  171/    3E44 : 6718                		beq.s	.ud_seq
(2)  172/    3E46 : 7001                		moveq	#1,d0
(2)  173/    3E48 :                     ; 		andi.w	#JoyUp,d7
(2)  174/    3E48 : 0247 0001           		andi.w	#JoyUp,d7
(2)  175/    3E4C : 6708                		beq.s	.ud_right
(2)  176/    3E4E : 4A78 B870           		tst.w	(RAM_GemaBlk).w
(2)  177/    3E52 : 670A                		beq.s	.ud_seq
(2)  178/    3E54 : 4440                		neg.w	d0
(2)  179/    3E56 :                     .ud_right:
(2)  180/    3E56 : D178 B870           		add.w	d0,(RAM_GemaBlk).w
(2)  181/    3E5A : 6100 00B8           		bsr	.show_me
(2)  182/    3E5E :                     .ud_seq:
(2)  183/    3E5E :                     
(2)  184/    3E5E :                     	; X/Y
(2)  185/    3E5E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  186/    3E62 : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  187/    3E66 : 6718                		beq.s	.xy_seq
(2)  188/    3E68 : 7001                		moveq	#1,d0
(2)  189/    3E6A : 0247 0400           		andi.w	#JoyX,d7
(2)  190/    3E6E : 6708                		beq.s	.xy_right
(2)  191/    3E70 : 4A78 B86C           		tst.w	(RAM_GemaIndx).w
(2)  192/    3E74 : 670A                		beq.s	.xy_seq
(2)  193/    3E76 : 4440                		neg.w	d0
(2)  194/    3E78 :                     .xy_right:
(2)  195/    3E78 : D178 B86C           		add.w	d0,(RAM_GemaIndx).w
(2)  196/    3E7C : 6100 0096           		bsr	.show_me
(2)  197/    3E80 :                     .xy_seq:
(2)  198/    3E80 :                     
(2)  199/    3E80 :                     	; C BUTTON
(2)  200/    3E80 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  201/    3E84 : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  202/    3E88 : 672E                		beq.s	.c_press
(2)  203/    3E8A : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  204/    3E8E :                     
(2)  205/    3E8E : 341D                		move.w	(a5)+,d2
(2)  206/    3E90 : 0247 0100           		andi.w	#JoyZ,d7
(2)  207/    3E94 : 6702                		beq.s	.not_auto
(2)  208/    3E96 : 74FF                		moveq	#-1,d2
(2)  209/    3E98 :                     .not_auto:
(2)  210/    3E98 : 301D                		move.w	(a5)+,d0
(2)  211/    3E9A : 321D                		move.w	(a5)+,d1
(2)  212/    3E9C : 6100 C4C2           		bsr	gemaPlaySeq
(2)  213/    3EA0 :                     
(2)  214/    3EA0 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  215/    3EA4 : 3200                		move.w	d0,d1
(2)  216/    3EA6 : D241                		add.w	d1,d1
(2)  217/    3EA8 : 41FA 02B2           		lea	exgema_beats(pc),a0
(2)  218/    3EAC : 3030 1000           		move.w	(a0,d1.w),d0
(2)  219/    3EB0 : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  220/    3EB4 : 6100 C542           		bsr	gemaSetBeats
(2)  221/    3EB8 :                     .c_press:
(2)  222/    3EB8 :                     	; B BUTTON
(2)  223/    3EB8 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  224/    3EBC : 0247 0010           		andi.w	#JoyB,d7
(2)  225/    3EC0 : 670C                		beq.s	.b_press
(2)  226/    3EC2 : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  227/    3EC6 : 321D                		move.w	(a5)+,d1
(2)  228/    3EC8 : 301D                		move.w	(a5)+,d0
(2)  229/    3ECA : 6100 C4C4           		bsr	gemaStopSeq
(2)  230/    3ECE :                     .b_press:
(2)  231/    3ECE : 3E2E 0004           		move.w	on_press(a6),d7
(2)  232/    3ED2 : 0247 0040           		andi.w	#JoyA,d7
(2)  233/    3ED6 : 6704                		beq.s	.a_press
(2)  234/    3ED8 : 6100 C4CC           		bsr	gemaStopAll
(2)  235/    3EDC :                     .a_press:
(2)  236/    3EDC :                     
(2)  237/    3EDC :                     
(2)  238/    3EDC :                     ; 		move.w	on_hold(a6),d7
(2)  239/    3EDC :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  240/    3EDC :                     ; 		bne.s	.n_up
(2)  241/    3EDC :                     ; 		move.w	on_press(a6),d7
(2)  242/    3EDC :                     ; 		btst	#bitJoyDown,d7
(2)  243/    3EDC :                     ; 		beq.s	.n_down
(2)  244/    3EDC :                     ; 		addq.w	#1,(a5)
(2)  245/    3EDC :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  246/    3EDC :                     ; 		ble.s	.n_downd
(2)  247/    3EDC :                     ; 		clr.w	(a5)
(2)  248/    3EDC :                     ; .n_downd:
(2)  249/    3EDC :                     ; 		bsr.s	.show_me
(2)  250/    3EDC :                     ; .n_down:
(2)  251/    3EDC :                     ; 		move.w	on_press(a6),d7
(2)  252/    3EDC :                     ; 		btst	#bitJoyUp,d7
(2)  253/    3EDC :                     ; 		beq.s	.n_up
(2)  254/    3EDC :                     ; 		subq.w	#1,(a5)
(2)  255/    3EDC :                     ; 		bpl.s	.n_ups
(2)  256/    3EDC :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  257/    3EDC :                     ; .n_ups:
(2)  258/    3EDC :                     ; 		bsr.s	.show_me
(2)  259/    3EDC :                     ; .n_up:
(2)  260/    3EDC :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  261/    3EDC :                     ; 		lsl.w	#2,d7
(2)  262/    3EDC :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  263/    3EDC :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  264/    3EDC :                     ; 		bpl.s	.n_cbtn
(2)  265/    3EDC :                     
(2)  266/    3EDC :                     ; .n_cbtn:
(2)  267/    3EDC : 6000 FF1E           		bra	.loop
(2)  268/    3EE0 :                     
(2)  269/    3EE0 :                     .exit_this:
(2)  270/    3EE0 : 6100 D0B8           		bsr	Video_FadeOut_Full
(2)  271/    3EE4 :                     	; Stop ALL sequences
(2)  272/    3EE4 : 6100 C4C0           		bsr	gemaStopAll
(2)  273/    3EE8 :                     	rept 4
(2)  274/    3EE8 :                     		bsr	System_Render		; Wait 4 frames...
(2)  275/    3EE8 :                     	endm
(2)  274/    3EE8 : 6100 D6D0           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3EEC : 6100 D6CC           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3EF0 : 6100 D6C8           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3EF4 : 6100 D6C4           		bsr	System_Render		; Wait 4 frames...
(2)  276/    3EF8 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  277/    3EFE : 4E75                		rts				; <-- RTS
(2)  278/    3F00 :                     
(2)  279/    3F00 :                     ; ------------------------------------------------------
(2)  280/    3F00 :                     
(2)  281/    3F00 :                     .exit_shell:
(2)  282/    3F00 : 6100 D098           		bsr	Video_FadeOut_Full
(2)  283/    3F04 : 6100 C4A0           		bsr	gemaStopAll
(2)  284/    3F08 : 6100 D6B0           		bsr	System_Render
(2)  285/    3F0C : 6100 D6AC           		bsr	System_Render
(2)  286/    3F10 : 6000 DA80           		bra	System_MdMcd_ExitShell
(2)  287/    3F14 :                     
(2)  288/    3F14 :                     ; ------------------------------------------------------
(2)  289/    3F14 :                     
(2)  290/    3F14 :                     .show_me:
(2)  291/    3F14 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  292/    3F18 : 3200                		move.w	d0,d1
(2)  293/    3F1A : D241                		add.w	d1,d1
(2)  294/    3F1C : 41FA 023E           		lea	exgema_beats(pc),a0
(2)  295/    3F20 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  296/    3F24 : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  297/    3F28 :                     
(2)  298/    3F28 : 41FA 06AE           		lea	str_ShowBeats(pc),a0
(2)  300/    3F2C : 700D                		moveq	#13,d0
(2)  304/    3F2E : 720C                		moveq	#12,d1
(2)  305/    3F30 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  306/    3F34 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  307/    3F3A : 6100 D154           		bsr	Video_Print
(2)  308/    3F3E : 41FA 0684           		lea	str_ShowVars(pc),a0
(2)  310/    3F42 : 7007                		moveq	#7,d0
(2)  314/    3F44 : 7209                		moveq	#9,d1
(2)  315/    3F46 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  316/    3F4A : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  317/    3F50 : 6000 D1C8           		bra	Video_PrintW
(2)  318/    3F54 :                     
(2)  319/    3F54 :                     ; ; ------------------------------------------------------
(2)  320/    3F54 :                     ;
(2)  321/    3F54 :                     ; .jump_list:
(2)  322/    3F54 :                     ; 		bra.w	.nothing
(2)  323/    3F54 :                     ; 		bra.w	.option_1
(2)  324/    3F54 :                     ; 		bra.w	.option_2
(2)  325/    3F54 :                     ; 		bra.w	.option_3
(2)  326/    3F54 :                     ; 		bra.w	.option_4
(2)  327/    3F54 :                     ; 		bra.w	.option_5
(2)  328/    3F54 :                     ; 		bra.w	.option_6
(2)  329/    3F54 :                     ; 		bra.w	.option_7
(2)  330/    3F54 :                     ;
(2)  331/    3F54 :                     ; ; ------------------------------------------------------
(2)  332/    3F54 :                     ; ; OPTION 0
(2)  333/    3F54 :                     ; ; ------------------------------------------------------
(2)  334/    3F54 :                     ;
(2)  335/    3F54 :                     ; .nothing:
(2)  336/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  337/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  338/    3F54 :                     ; 		beq.s	.no_press
(2)  339/    3F54 :                     ; 		bsr.s	.show_me
(2)  340/    3F54 :                     ; 		bra	gemaTest
(2)  341/    3F54 :                     ; .no_press:
(2)  342/    3F54 :                     ; 		rts
(2)  343/    3F54 :                     ;
(2)  344/    3F54 :                     ; ------------------------------------------------------
(2)  345/    3F54 :                     ; OPTION 1
(2)  346/    3F54 :                     ; ------------------------------------------------------
(2)  347/    3F54 :                     
(2)  348/    3F54 :                     ; 		bra.s	.show_me
(2)  349/    3F54 :                     ; .option1_args:
(2)  350/    3F54 :                     ; 		move.w	on_hold(a6),d7
(2)  351/    3F54 :                     ; 		move.w	d7,d6
(2)  352/    3F54 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  353/    3F54 :                     ; 		beq.s	.no_press
(2)  354/    3F54 :                     ; 		btst	#bitJoyB,d7
(2)  355/    3F54 :                     ; 		beq.s	.d2_opt
(2)  356/    3F54 :                     ; 		adda	#2,a5
(2)  357/    3F54 :                     ; .d2_opt:
(2)  358/    3F54 :                     ; 		btst	#bitJoyC,d7
(2)  359/    3F54 :                     ; 		beq.s	.d3_opt
(2)  360/    3F54 :                     ; 		adda	#4,a5
(2)  361/    3F54 :                     ; .d3_opt:
(2)  362/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  363/    3F54 :                     ; 		btst	#bitJoyRight,d7
(2)  364/    3F54 :                     ; 		beq.s	.op1_right
(2)  365/    3F54 :                     ; 		addq.w	#1,(a5)
(2)  366/    3F54 :                     ; 		bra	.show_me
(2)  367/    3F54 :                     ; .op1_right:
(2)  368/    3F54 :                     ; 		btst	#bitJoyLeft,d7
(2)  369/    3F54 :                     ; 		beq.s	.op1_left
(2)  370/    3F54 :                     ; 		subq.w	#1,(a5)
(2)  371/    3F54 :                     ; 		bra	.show_me
(2)  372/    3F54 :                     ; .op1_left:
(2)  373/    3F54 :                     ; 		move.w	on_hold(a6),d7
(2)  374/    3F54 :                     ; 		btst	#bitJoyUp,d7
(2)  375/    3F54 :                     ; 		beq.s	.op1_down
(2)  376/    3F54 :                     ; 		addq.w	#1,(a5)
(2)  377/    3F54 :                     ; 		bra	.show_me
(2)  378/    3F54 :                     ; .op1_down:
(2)  379/    3F54 :                     ; 		btst	#bitJoyDown,d7
(2)  380/    3F54 :                     ; 		beq.s	.op1_up
(2)  381/    3F54 :                     ; 		subq.w	#1,(a5)
(2)  382/    3F54 :                     ; 		bra	.show_me
(2)  383/    3F54 :                     ; .op1_up:
(2)  384/    3F54 :                     ;
(2)  385/    3F54 :                     ; 		rts
(2)  386/    3F54 :                     ;
(2)  387/    3F54 :                     ; ; ------------------------------------------------------
(2)  388/    3F54 :                     ; ; OPTION 2
(2)  389/    3F54 :                     ; ; ------------------------------------------------------
(2)  390/    3F54 :                     ;
(2)  391/    3F54 :                     ; .option_2:
(2)  392/    3F54 :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  393/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  394/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  395/    3F54 :                     ; 		beq.s	.option1_args
(2)  396/    3F54 :                     ; 		move.w	(a5)+,d0
(2)  397/    3F54 :                     ; 		move.w	(a5)+,d1
(2)  398/    3F54 :                     ; 		bra	gemaStopSeq
(2)  399/    3F54 :                     ;
(2)  400/    3F54 :                     ; ; ------------------------------------------------------
(2)  401/    3F54 :                     ; ; OPTION 3
(2)  402/    3F54 :                     ; ; ------------------------------------------------------
(2)  403/    3F54 :                     ;
(2)  404/    3F54 :                     ; .option_3:
(2)  405/    3F54 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  406/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  407/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  408/    3F54 :                     ; 		beq	.option1_args
(2)  409/    3F54 :                     ; 		move.w	(a5)+,d0
(2)  410/    3F54 :                     ; 		move.w	(a5)+,d1
(2)  411/    3F54 :                     ; 		bra	gemaFadeSeq
(2)  412/    3F54 :                     ;
(2)  413/    3F54 :                     ; ; ------------------------------------------------------
(2)  414/    3F54 :                     ; ; OPTION 4
(2)  415/    3F54 :                     ; ; ------------------------------------------------------
(2)  416/    3F54 :                     ;
(2)  417/    3F54 :                     ; .option_4:
(2)  418/    3F54 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  419/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  420/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  421/    3F54 :                     ; 		beq	.option1_args
(2)  422/    3F54 :                     ; 		move.w	(a5)+,d0
(2)  423/    3F54 :                     ; 		move.w	(a5)+,d1
(2)  424/    3F54 :                     ; 		bra	gemaSetSeqVol
(2)  425/    3F54 :                     ;
(2)  426/    3F54 :                     ; ; ------------------------------------------------------
(2)  427/    3F54 :                     ; ; OPTION 5
(2)  428/    3F54 :                     ; ; ------------------------------------------------------
(2)  429/    3F54 :                     ;
(2)  430/    3F54 :                     ; .option_5:
(2)  431/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  432/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  433/    3F54 :                     ; 		beq.s	.no_press2
(2)  434/    3F54 :                     ; 		bsr	.show_me
(2)  435/    3F54 :                     ; 		bra	gemaStopAll
(2)  436/    3F54 :                     ; .no_press2:
(2)  437/    3F54 :                     ; 		rts
(2)  438/    3F54 :                     ;
(2)  439/    3F54 :                     ; ; ------------------------------------------------------
(2)  440/    3F54 :                     ; ; OPTION 6
(2)  441/    3F54 :                     ; ; ------------------------------------------------------
(2)  442/    3F54 :                     ;
(2)  443/    3F54 :                     ; .option_6:
(2)  444/    3F54 :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  445/    3F54 :                     ; 		move.w	on_hold(a6),d7
(2)  446/    3F54 :                     ; 		andi.w	#JoyA,d7
(2)  447/    3F54 :                     ; 		beq.s	.no_press2
(2)  448/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  449/    3F54 :                     ; 		btst	#bitJoyRight,d7
(2)  450/    3F54 :                     ; 		beq.s	.op2_right
(2)  451/    3F54 :                     ; 		addq.w	#1,(a5)
(2)  452/    3F54 :                     ; 		bra	.show_me_2
(2)  453/    3F54 :                     ; .op2_right:
(2)  454/    3F54 :                     ; 		btst	#bitJoyLeft,d7
(2)  455/    3F54 :                     ; 		beq.s	.op2_left
(2)  456/    3F54 :                     ; 		subq.w	#1,(a5)
(2)  457/    3F54 :                     ; 		bsr	.show_me_2
(2)  458/    3F54 :                     ; .op2_left:
(2)  459/    3F54 :                     ; 		move.w	on_hold(a6),d7
(2)  460/    3F54 :                     ; 		btst	#bitJoyDown,d7
(2)  461/    3F54 :                     ; 		beq.s	.op2_down
(2)  462/    3F54 :                     ; 		addq.w	#1,(a5)
(2)  463/    3F54 :                     ; 		bsr	.show_me_2
(2)  464/    3F54 :                     ; .op2_down:
(2)  465/    3F54 :                     ; 		btst	#bitJoyUp,d7
(2)  466/    3F54 :                     ; 		beq.s	.op2_up
(2)  467/    3F54 :                     ; 		subq.w	#1,(a5)
(2)  468/    3F54 :                     ; 		bsr	.show_me_2
(2)  469/    3F54 :                     ; .op2_up:
(2)  470/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  471/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  472/    3F54 :                     ; 		beq.s	.no_press2
(2)  473/    3F54 :                     ; .show_me_2:
(2)  474/    3F54 :                     ; 		bsr	.show_me
(2)  475/    3F54 :                     ; 		move.w	(a5),d0
(2)  476/    3F54 :                     ; 		bra	gemaSetBeats
(2)  477/    3F54 :                     ;
(2)  478/    3F54 :                     ; ; ------------------------------------------------------
(2)  479/    3F54 :                     ; ; OPTION 7
(2)  480/    3F54 :                     ; ; ------------------------------------------------------
(2)  481/    3F54 :                     ;
(2)  482/    3F54 :                     ; .option_7:
(2)  483/    3F54 :                     ; 		move.w	on_press(a6),d7
(2)  484/    3F54 :                     ; 		btst	#bitJoyStart,d7
(2)  485/    3F54 :                     ; 		beq.s	.no_press2
(2)  486/    3F54 :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  487/    3F54 :                     ; 		rts
(2)  488/    3F54 :                     
(2)  489/    3F54 :                     ; ------------------------------------------------------
(2)  490/    3F54 :                     
(2)  491/    3F54 :                     .gema_viewinit:
(2)  493/    3F54 : 203C 0000 4042      		move.l	#obj_Fairy,d0		; <-- If you don't like the fairies comment out or
(2)  494/    3F5A : 7200                		moveq	#0,d1			; delete all of this
(2)  495/    3F5C : 6100 DAAA           		bsr	Object_Make		;
(2)  496/    3F60 : 5241                		addq.w	#1,d1			;
(2)  497/    3F62 : 6100 DAA4           		bsr	Object_Make		;
(2)  498/    3F66 : 5241                		addq.w	#1,d1			;
(2)  499/    3F68 : 6100 DA9E           		bsr	Object_Make		; <-- until here
(2)  501/    3F6C :                     
(2)  510/    3F6C :                     
(2)  511/    3F6C :                     .gema_view:
(2)  513/    3F6C : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
             3F72 : 1100             
(2)  514/    3F74 : 43F8 B872           		lea	(RAM_GemaStatus),a1
(2)  515/    3F78 : 7000                		moveq	#0,d0
(2)  516/    3F7A : 7200                		moveq	#0,d1
(2)  517/    3F7C : 7400                		moveq	#0,d2
(2)  518/    3F7E : 0839 0000 00A1      .wait:		btst	#0,(z80_bus).l
             3F84 : 1100             
(2)  519/    3F86 : 66F6                		bne.s	.wait
(2)  520/    3F88 : 1039 00A0 16DE      		move.b	(z80_cpu+trkBuff_0),d0
(2)  521/    3F8E : 1239 00A0 171D      		move.b	(z80_cpu+trkBuff_1),d1
(2)  522/    3F94 : 1439 00A0 175C      		move.b	(z80_cpu+trkBuff_2),d2
(2)  523/    3F9A : 6100 C2F2           		bsr	sndUnlockZ80
(2)  524/    3F9E : 32C0                		move.w	d0,(a1)+
(2)  525/    3FA0 : 32C1                		move.w	d1,(a1)+
(2)  526/    3FA2 : 32C2                		move.w	d2,(a1)+
(2)  528/    3FA4 :                     
(2)  558/    3FA4 :                     
(2)  619/    3FA4 :                     
(2)  620/    3FA4 : 4E75                		rts
(2)  621/    3FA6 :                     
(2)  622/    3FA6 :                     ; ----------------------------------------------
(2)  623/    3FA6 :                     
(2)  624/    3FA6 :                     .copy_me:
(2)  625/    3FA6 : 7200                		moveq	#0,d1
(2)  626/    3FA8 :                     ; 		bsr	sndLockZ80
(2)  627/    3FA8 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  628/    3FAC : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  629/    3FB0 : 1010                		move.b	ztbl_Link(a0),d0
(2)  630/    3FB2 :                     ; 		bsr	sndUnlockZ80
(2)  631/    3FB2 : 8002                		or.b	d2,d0
(2)  632/    3FB4 : 6602                		bne.s	.link_ok
(2)  633/    3FB6 : 72FF                		moveq	#-1,d1
(2)  634/    3FB8 :                     .link_ok:
(2)  635/    3FB8 : 3281                		move.w	d1,(a1)
(2)  636/    3FBA : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  637/    3FBE : D2FC 0004           		adda	#4,a1
(2)  638/    3FC2 : 51CF FFE2           		dbf	d7,.copy_me
(2)  639/    3FC6 : 4E75                		rts
(2)  640/    3FC8 :                     
(2)  641/    3FC8 :                     ; ----------------------------------------------
(2)  642/    3FC8 :                     
(2)  643/    3FC8 :                     .show_table_fm:
(2)  644/    3FC8 : 41F8 4568           		lea	(strL_FmOnly),a0
(2)  645/    3FCC : 7C00                		moveq	#0,d6
(2)  646/    3FCE : 7A00                		moveq	#0,d5
(2)  647/    3FD0 : 3C13                		move.w	(a3),d6
(2)  648/    3FD2 : 6A06                		bpl.s	.is_fmgood
(2)  649/    3FD4 : 6100 D0BA           		bsr	Video_Print
(2)  650/    3FD8 : 6028                		bra.s	.from_fmbad
(2)  651/    3FDA :                     .is_fmgood:
(2)  652/    3FDA : 3A06                		move.w	d6,d5
(2)  653/    3FDC : D0FC 0004           		adda	#4,a0
(2)  654/    3FE0 : 0246 001F           		andi.w	#%00011111,d6
(2)  655/    3FE4 : E34E                		lsl.w	#1,d6
(2)  656/    3FE6 : D0C6                		adda	d6,a0
(2)  657/    3FE8 : 6100 D0A6           		bsr	Video_Print
(2)  658/    3FEC : 3800                		move.w	d0,d4
(2)  659/    3FEE : 5440                		addq.w	#2,d0
(2)  660/    3FF0 : 0245 00E0           		andi.w	#%11100000,d5
(2)  661/    3FF4 : E84D                		lsr.w	#4,d5
(2)  662/    3FF6 : 41F8 45A8           		lea	(strL_LazyVal),a0
(2)  663/    3FFA : D0C5                		adda	d5,a0
(2)  664/    3FFC : 6100 D092           		bsr	Video_Print
(2)  665/    4000 : 3004                		move.w	d4,d0
(2)  666/    4002 :                     .from_fmbad:
(2)  667/    4002 :                     ; 		addq.w	#1,d1
(2)  668/    4002 : 5840                		addq.w	#4,d0
(2)  669/    4004 : D6FC 0004           		adda	#4,a3
(2)  670/    4008 : 51CF FFBE           		dbf	d7,.show_table_fm
(2)  671/    400C : 4E75                		rts
(2)  672/    400E :                     
(2)  673/    400E :                     .show_table:
(2)  674/    400E : 41F8 4264           		lea	(strL_NoteList),a0
(2)  675/    4012 : 7C00                		moveq	#0,d6
(2)  676/    4014 : 3C13                		move.w	(a3),d6
(2)  677/    4016 : 6B08                		bmi.s	.val_bad
(2)  678/    4018 : D0FC 0004           		adda	#4,a0
(2)  679/    401C : DC46                		add.w	d6,d6
(2)  680/    401E : D0C6                		adda	d6,a0
(2)  681/    4020 :                     .val_bad:
(2)  682/    4020 : 6100 D06E           		bsr	Video_Print
(2)  683/    4024 :                     ; 		addq.w	#1,d1
(2)  684/    4024 : 5840                		addq.w	#4,d0
(2)  685/    4026 : D6FC 0004           		adda	#4,a3
(2)  686/    402A : 51CF FFE2           		dbf	d7,.show_table
(2)  687/    402E : 4E75                		rts
(2)  688/    4030 :                     
(2)  689/    4030 :                     ; ====================================================================
(2)  690/    4030 :                     ; ------------------------------------------------------
(2)  691/    4030 :                     ; DATA asset locations
(2)  692/    4030 :                     ; ------------------------------------------------------
(2)  693/    4030 :                     
(2)  694/    4030 :                     file_tscrn_main:
(2)  695/    4030 : 0000 45E4           		dc.l DATA_BANK0
(2)  696/    4034 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             403A : 494E 2E42 494E 00 
(2)  697/    4041 :                     		align 2
(2)  698/    4042 :                     ; file_tscrn_mars:
(2)  699/    4042 :                     ; 		dc.l DATA_BANK1
(2)  700/    4042 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  701/    4042 :                     ; 		align 2
(2)  702/    4042 :                     
(2)  703/    4042 :                     ; ====================================================================
(2)  704/    4042 :                     ; ------------------------------------------------------
(2)  705/    4042 :                     ; Objects
(2)  706/    4042 :                     ; ------------------------------------------------------
(2)  707/    4042 :                     
(2)  708/    4042 :                     ; ====================================================================
(2)  709/    4042 :                     ; ------------------------------------------------------
(2)  710/    4042 :                     ; Objects
(2)  711/    4042 :                     ; ------------------------------------------------------
(2)  712/    4042 :                     
(2)  713/    4042 :                     ; --------------------------------------------------
(2)  714/    4042 :                     ; Sisi
(2)  715/    4042 :                     ; --------------------------------------------------
(2)  716/    4042 :                     
(2)  717/    4042 :                     obj_Fairy:
(2)  718/    4042 : 7000                		moveq	#0,d0
(2)  719/    4044 : 102E 001C           		move.b	obj_index(a6),d0
(2)  720/    4048 : D040                		add.w	d0,d0
(2)  721/    404A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  722/    404E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  723/    4052 :                     ; ----------------------------------------------
(2)  724/    4052 : 0004                .list:		dc.w .init-.list
(2)  725/    4054 : 003A                		dc.w .main-.list
(2)  726/    4056 :                     ; ----------------------------------------------
(2)  727/    4056 :                     .init:
(2)  728/    4056 : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  729/    405C : 426E 0020           		clr.w	obj_frame(a6)
(2)  730/    4060 : 6100 DA10           		bsr	object_ResetAnim
(2)  731/    4064 :                     
(2)  732/    4064 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  733/    4068 : 3C07                		move.w	d7,d6
(2)  734/    406A : E54E                		lsl.w	#2,d6
(2)  735/    406C : 41FA 00E2           		lea	.fixd_pos(pc),a0
(2)  736/    4070 : 43EE 0028           		lea	obj_ram(a6),a1
(2)  737/    4074 : D0C6                		adda	d6,a0
(2)  738/    4076 : 32D8                		move.w	(a0)+,(a1)+
(2)  739/    4078 : 32D8                		move.w	(a0)+,(a1)+
(2)  740/    407A :                     
(2)  741/    407A : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  742/    407E : CEFC 002A           		mulu.w	#42,d7
(2)  743/    4082 : EB4F                		lsl.w	#5,d7
(2)  744/    4084 : 2007                		move.l	d7,d0
(2)  745/    4086 : 6100 D6C4           		bsr	System_DiceRoll
(2)  746/    408A :                     ; 		neg.w	d7
(2)  747/    408A : 32C0                		move.w	d0,(a1)+
(2)  748/    408C :                     
(2)  749/    408C :                     ; ----------------------------------------------
(2)  750/    408C :                     .main:
(2)  751/    408C : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  752/    4090 : 49F8 B872           		lea	(RAM_GemaStatus).w,a4
(2)  753/    4094 :                     	; a5
(2)  754/    4094 :                     	; 0 - X base
(2)  755/    4094 :                     	; 2 - Y base
(2)  756/    4094 :                     	; 4 - Tan
(2)  757/    4094 : 7600                		moveq	#0,d3
(2)  758/    4096 : 162E 001D           		move.b	obj_subid(a6),d3
(2)  759/    409A : D643                		add.w	d3,d3
(2)  760/    409C : D8C3                		adda	d3,a4
(2)  761/    409E :                     ; 		lsl.w	#3,d3
(2)  762/    409E : 3415                		move.w	(a5),d2
(2)  763/    40A0 : 362D 0002           		move.w	2(a5),d3
(2)  764/    40A4 : 383C 0002           		move.w	#2,d4			; Multiply
(2)  765/    40A8 : 082C 0007 0001      		btst	#7,1(a4)
(2)  766/    40AE : 6704                		beq.s	.not_enbls
(2)  767/    40B0 : 383C 0004           		move.w	#4,d4
(2)  768/    40B4 :                     .not_enbls:
(2)  769/    40B4 : 302D 0004           		move.w	4(a5),d0
(2)  770/    40B8 : E848                		lsr.w	#4,d0
(2)  771/    40BA : 6100 D6B4           		bsr	System_SineWave
(2)  772/    40BE : C3C4                		muls.w	d4,d1
(2)  773/    40C0 : E041                		asr.w	#8,d1
(2)  774/    40C2 : 9441                		sub.w	d1,d2
(2)  775/    40C4 : 302D 0004           		move.w	4(a5),d0
(2)  776/    40C8 : E848                		lsr.w	#4,d0
(2)  777/    40CA : 082C 0000 0001      		btst	#0,1(a4)
(2)  778/    40D0 : 6702                		beq.s	.not_enbl2
(2)  779/    40D2 : D040                		add.w	d0,d0
(2)  780/    40D4 :                     .not_enbl2:
(2)  781/    40D4 : 6100 D690           		bsr	System_SineWave_Cos
(2)  782/    40D8 : C3C4                		muls.w	d4,d1
(2)  783/    40DA : E041                		asr.w	#8,d1
(2)  784/    40DC : 9641                		sub.w	d1,d3
(2)  785/    40DE :                     
(2)  786/    40DE : 383C 0040           		move.w	#$40,d4
(2)  787/    40E2 : 082C 0007 0001      		btst	#7,1(a4)
(2)  788/    40E8 : 6704                		beq.s	.not_enbl
(2)  789/    40EA : 383C 0090           		move.w	#$90,d4
(2)  790/    40EE :                     .not_enbl:
(2)  791/    40EE : D96D 0004           		addi.w	d4,4(a5)
(2)  792/    40F2 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  793/    40F6 : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  794/    40FA :                     
(2)  795/    40FA :                     .not_mouse:
(2)  796/    40FA : 41FA 002E           		lea	.anim_data(pc),a0
(2)  797/    40FE : 6100 D9AA           		bsr	object_Animate
(2)  798/    4102 :                     
(2)  799/    4102 : 7000                		moveq	#0,d0
(2)  800/    4104 : 102E 001D           		move.b	obj_subid(a6),d0
(2)  801/    4108 : E748                		lsl.w	#3,d0
(2)  802/    410A : 41FB 002C           		lea	.sub_ids(pc,d0.w),a0
(2)  803/    410E : 3428 0004           		move.w	4(a0),d2
(2)  804/    4112 : 2250                		move.l	(a0),a1
(2)  805/    4114 : 207C 0000 0000      		move.l	#0,a0
(2)  806/    411A : 302E 0004           		move.w	obj_x(a6),d0
(2)  807/    411E : 322E 0008           		move.w	obj_y(a6),d1
(2)  808/    4122 : 362E 0020           		move.w	obj_frame(a6),d3
(2)  809/    4126 : 6000 D3A8           		bra	Video_MakeSprMap
(2)  810/    412A :                     
(2)  811/    412A :                     ; ----------------------------------------------
(2)  812/    412A :                     
(2)  813/    412A :                     .anim_data:
(2)  814/    412A : 0002                		dc.w .anim_00-.anim_data
(2)  815/    412C :                     .anim_00:
(2)  816/    412C : 0008                		dc.w 8
(2)  817/    412E : 0000 0001 0002      		dc.w 0,1,2,1
             4134 : 0001             
(2)  818/    4136 : FFFE                		dc.w -2
(2)  819/    4138 :                     		align 2
(2)  820/    4138 :                     .sub_ids:
(2)  821/    4138 : 0003 4FB4           		dc.l objMap_Dodo
(2)  822/    413C : 0002 0000           		dc.w setVram_Dodo,0
(2)  823/    4140 : 0003 4FD8           		dc.l objMap_Mimi
(2)  824/    4144 : 0032 0000           		dc.w setVram_Mimi,0
(2)  825/    4148 : 0003 4FFC           		dc.l objMap_Fifi
(2)  826/    414C : 0062 0000           		dc.w setVram_Fifi,0
(2)  827/    4150 :                     		align 2
(2)  828/    4150 :                     
(2)  829/    4150 :                     .fixd_pos:
(2)  830/    4150 : 00B8 0050           		dc.w $B8,$50
(2)  831/    4154 : 00DC 0050           		dc.w $B8+$24,$50
(2)  832/    4158 : 0100 0050           		dc.w $B8+$48,$50
(2)  833/    415C :                     		align 2
(2)  834/    415C :                     
(2)  835/    415C :                     ; ====================================================================
(2)  836/    415C :                     ; ------------------------------------------------------
(2)  837/    415C :                     ; Subroutines
(2)  838/    415C :                     ; ------------------------------------------------------
(2)  839/    415C :                     
(2)  840/    415C :                     ; ====================================================================
(2)  841/    415C :                     ; ------------------------------------------------------
(2)  842/    415C :                     ; Includes for this screen
(2)  843/    415C :                     ; ------------------------------------------------------
(2)  844/    415C :                     
(2)  845/    415C :                     ; ====================================================================
(2)  846/    415C :                     ; ------------------------------------------------------
(2)  847/    415C :                     ; Custom VBlank
(2)  848/    415C :                     ; ------------------------------------------------------
(2)  849/    415C :                     
(2)  850/    415C :                     ; ------------------------------------------------------
(2)  851/    415C :                     ; Custom HBlank
(2)  852/    415C :                     ; ------------------------------------------------------
(2)  853/    415C :                     
(2)  854/    415C :                     ; ====================================================================
(2)  855/    415C :                     ; ------------------------------------------------------
(2)  856/    415C :                     ; Small data section
(2)  857/    415C :                     ; ------------------------------------------------------
(2)  858/    415C :                     
(2)  859/    415C :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  860/    415C :                     exgema_beats:
(2)  861/    415C : 00D6                	dc.w 214
(2)  862/    415E : 00D6                	dc.w 214
(2)  863/    4160 : 00D6                	dc.w 214
(2)  864/    4162 : 00C0                	dc.w 192
(2)  865/    4164 : 00C0                	dc.w 192
(2)  866/    4166 : 00D6                	dc.w 214
(2)  867/    4168 : 00B8                	dc.w $00B8
(2)  868/    416A : 00C0                	dc.w 192
(2)  869/    416C : 00C0                	dc.w 192
(2)  870/    416E : 00D6                	dc.w 214
(2)  871/    4170 : 00D6                	dc.w 214
(2)  872/    4172 : 00D6                	dc.w 214
(2)  873/    4174 : 00D6                	dc.w 214
(2)  874/    4176 : 00D6                	dc.w 214
(2)  875/    4178 : 00D6                	dc.w 214
(2)  876/    417A : 00D6                	dc.w 214
(2)  877/    417C : 00D6                	dc.w 214
(2)  878/    417E : 00D6                	dc.w 214
(2)  879/    4180 : 00D6                	dc.w 214
(2)  880/    4182 : 00D6                	dc.w 214
(2)  881/    4184 : 00D6                	dc.w 214
(2)  882/    4186 : 00D6                	dc.w 214
(2)  883/    4188 : 00D6                	dc.w 214
(2)  884/    418A : 00D6                	dc.w 214
(2)  885/    418C :                     
(2)  886/    418C :                     ArtList_Stuff:
(2)  887/    418C : 0003                		dc.w 3
(2)  888/    418E : 0003 3E14           		dc.l Art_FairyDodo
(2)  889/    4192 : 0040                		dc.w cell_vram(setVram_Dodo)
(2)  890/    4194 : 0600                		dc.w cell_vram($30)
(2)  891/    4196 : 0003 4414           		dc.l Art_FairyMimi
(2)  892/    419A : 0640                		dc.w cell_vram(setVram_Mimi)
(2)  893/    419C : 0600                		dc.w cell_vram($30)
(2)  894/    419E : 0003 4A14           		dc.l Art_FairyFifi
(2)  895/    41A2 : 0C40                		dc.w cell_vram(setVram_Fifi)
(2)  896/    41A4 : 0600                		dc.w cell_vram($30)
(2)  897/    41A6 :                     
(2)  898/    41A6 :                     str_TesterTitle:
(2)  899/    41A6 : 4745 4D41 2053      		dc.b "GEMA Sound Driver       V1.0",0
             41AC : 6F75 6E64 2044 
             41B2 : 7269 7665 7220 
             41B8 : 2020 2020 2020 
             41BE : 5631 2E30 00       
(2)  900/    41C3 :                     		align 2
(2)  901/    41C4 :                     str_TesterInfo:
(2)  902/    41C4 : 5365 7123 2042      		dc.b "Seq# Blk# Indx",$0A
             41CA : 6C6B 2320 496E 
             41D0 : 6478 0A          
(2)  903/    41D3 : 0A0A 0A0A           		dc.b $0A,$0A,$0A,$0A
(2)  904/    41D7 : 4265 6174 733A 20   		dc.b "Beats: "
(2)  905/    41DE : 00                  		dc.b 0
(2)  906/    41DF :                     		align 2
(2)  907/    41E0 :                     str_Instruc:
(2)  908/    41E0 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
             41E6 : 6571 2E20 4E75 
             41EC : 6D23 2020 2058 
             41F2 : 5920 2D20 5472 
             41F8 : 6163 6B20 696E 
             41FE : 6465 780A          
(2)  909/    4202 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
             4208 : 6571 2E20 426C 
             420E : 6B23 0A          
(2)  910/    4211 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
             4217 : 544F 5020 414C 
             421D : 4C0A             
(2)  911/    421F : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
             4225 : 544F 5020 5365 
             422B : 712E 0A          
(2)  912/    422E : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill"
             4234 : 4C41 5920 5365 
             423A : 712E 2020 2020 
             4240 : 5A20 2D20 504C 
             4246 : 4159 2061 7574 
             424C : 6F2D 6669 6C6C    
(2)  913/    4252 : 00                  		dc.b 0
(2)  914/    4253 :                     		align 2
(2)  915/    4254 :                     
(2)  916/    4254 :                     str_VmInfo:
(2)  917/    4254 : 5053 470A           		dc.b "PSG",$0A
(2)  918/    4258 : 464D 0A             		dc.b "FM",$0A
(2)  919/    425B : 5043 4D0A           		dc.b "PCM",$0A
(2)  920/    425F : 5057 4D             		dc.b "PWM"
(2)  921/    4262 : 00                  		dc.b 0
(2)  922/    4263 :                     		align 2
(2)  923/    4264 :                     
(2)  924/    4264 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  925/    4268 : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
             426E : 3000 442D 3000 
             4274 : 4423 3000 452D 
             427A : 3000 462D 3000 
             4280 : 4623 3000 472D 
             4286 : 3000 4723 3000 
             428C : 412D 3000 4123 
             4292 : 3000 422D 3000    
(2)  926/    4298 : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
             429E : 3100 442D 3100 
             42A4 : 4423 3100 452D 
             42AA : 3100 462D 3100 
             42B0 : 4623 3100 472D 
             42B6 : 3100 4723 3100 
             42BC : 412D 3100 4123 
             42C2 : 3100 422D 3100    
(2)  927/    42C8 : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
             42CE : 3200 442D 3200 
             42D4 : 4423 3200 452D 
             42DA : 3200 462D 3200 
             42E0 : 4623 3200 472D 
             42E6 : 3200 4723 3200 
             42EC : 412D 3200 4123 
             42F2 : 3200 422D 3200    
(2)  928/    42F8 : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
             42FE : 3300 442D 3300 
             4304 : 4423 3300 452D 
             430A : 3300 462D 3300 
             4310 : 4623 3300 472D 
             4316 : 3300 4723 3300 
             431C : 412D 3300 4123 
             4322 : 3300 422D 3300    
(2)  929/    4328 : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
             432E : 3400 442D 3400 
             4334 : 4423 3400 452D 
             433A : 3400 462D 3400 
             4340 : 4623 3400 472D 
             4346 : 3400 4723 3400 
             434C : 412D 3400 4123 
             4352 : 3400 422D 3400    
(2)  930/    4358 : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
             435E : 3500 442D 3500 
             4364 : 4423 3500 452D 
             436A : 3500 462D 3500 
             4370 : 4623 3500 472D 
             4376 : 3500 4723 3500 
             437C : 412D 3500 4123 
             4382 : 3500 422D 3500    
(2)  931/    4388 : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
             438E : 3600 442D 3600 
             4394 : 4423 3600 452D 
             439A : 3600 462D 3600 
             43A0 : 4623 3600 472D 
             43A6 : 3600 4723 3600 
             43AC : 412D 3600 4123 
             43B2 : 3600 422D 3600    
(2)  932/    43B8 : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
             43BE : 3700 442D 3700 
             43C4 : 4423 3700 452D 
             43CA : 3700 462D 3700 
             43D0 : 4623 3700 472D 
             43D6 : 3700 4723 3700 
             43DC : 412D 3700 4123 
             43E2 : 3700 422D 3700    
(2)  933/    43E8 : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
             43EE : 3800 442D 3800 
             43F4 : 4423 3800 452D 
             43FA : 3800 462D 3800 
             4400 : 4623 3800 472D 
             4406 : 3800 4723 3800 
             440C : 412D 3800 4123 
             4412 : 3800 422D 3800    
(2)  934/    4418 : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
             441E : 3900 442D 3900 
             4424 : 4423 3900 452D 
             442A : 3900 462D 3900 
             4430 : 4623 3900 472D 
             4436 : 3900 4723 3900 
             443C : 412D 3900 4123 
             4442 : 3900 422D 3900    
(2)  935/    4448 : 3F2D 4100 3F2D      		dc.b "?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0
             444E : 4100 3F2D 4100 
             4454 : 3F2D 4100 3F2D 
             445A : 4100 3F2D 4100 
             4460 : 3F2D 4100 3F2D 
             4466 : 4100 3F2D 4100 
             446C : 3F2D 4100 3F2D 
             4472 : 4100 3F2D 4100    
(2)  936/    4478 : 3F2D 4200 3F2D      		dc.b "?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0
             447E : 4200 3F2D 4200 
             4484 : 3F2D 4200 3F2D 
             448A : 4200 3F2D 4200 
             4490 : 3F2D 4200 3F2D 
             4496 : 4200 3F2D 4200 
             449C : 3F2D 4200 3F2D 
             44A2 : 4200 3F2D 4200    
(2)  937/    44A8 : 3F2D 4300 3F2D      		dc.b "?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0
             44AE : 4300 3F2D 4300 
             44B4 : 3F2D 4300 3F2D 
             44BA : 4300 3F2D 4300 
             44C0 : 3F2D 4300 3F2D 
             44C6 : 4300 3F2D 4300 
             44CC : 3F2D 4300 3F2D 
             44D2 : 4300 3F2D 4300    
(2)  938/    44D8 : 3F2D 4400 3F2D      		dc.b "?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0
             44DE : 4400 3F2D 4400 
             44E4 : 3F2D 4400 3F2D 
             44EA : 4400 3F2D 4400 
             44F0 : 3F2D 4400 3F2D 
             44F6 : 4400 3F2D 4400 
             44FC : 3F2D 4400 3F2D 
             4502 : 4400 3F2D 4400    
(2)  939/    4508 : 3F2D 4500 3F2D      		dc.b "?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0
             450E : 4500 3F2D 4500 
             4514 : 3F2D 4500 3F2D 
             451A : 4500 3F2D 4500 
             4520 : 3F2D 4500 3F2D 
             4526 : 4500 3F2D 4500 
             452C : 3F2D 4500 3F2D 
             4532 : 4500 3F2D 4500    
(2)  940/    4538 : 3F2D 4600 3F2D      		dc.b "?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0
             453E : 4600 3F2D 4600 
             4544 : 3F2D 4600 3F2D 
             454A : 4600 3F2D 4600 
             4550 : 3F2D 4600 3F2D 
             4556 : 4600 3F2D 4600 
             455C : 3F2D 4600 3F2D 
             4562 : 4600 3F2D 4600    
(2)  941/    4568 : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  942/    456C : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
             4572 : 2000 442D 2000 
             4578 : 4423 2000 452D 
             457E : 2000 462D 2000 
             4584 : 4623 2000 472D 
             458A : 2000 4723 2000 
             4590 : 412D 2000 4123 
             4596 : 2000 422D 2000    
(2)  943/    459C : 3F2D 2000 3F2D      		dc.b "?- ",0,"?- ",0,"?- ",0
             45A2 : 2000 3F2D 2000    
(2)  944/    45A8 : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
             45AE : 3300 3400 3500 
             45B4 : 3600 3700 3800 
             45BA : 3900             
(2)  945/    45BC :                     
(2)  946/    45BC : 464D 3300           str_Speci:	dc.b "FM3",0
(2)  947/    45C0 : 4441 4300           str_Sampl:	dc.b "DAC",0
(2)  948/    45C4 :                     
(2)  949/    45C4 :                     str_ShowVars:
(2)  950/    45C4 : 80FF B86F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  951/    45C8 : 2020 20             		dc.b "   "
(2)  952/    45CB : 80FF B871           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  953/    45CF : 2020 20             		dc.b "   "
(2)  954/    45D2 : 80FF B86D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  955/    45D6 : 00                  		dc.b 0
(2)  956/    45D7 :                     		align 2
(2)  957/    45D8 :                     str_ShowBeats:
(2)  958/    45D8 : 81FF B87C           		dc.l pstr_mem(1,RAM_CurrBeats)
(2)  959/    45DC : 00                  		dc.b 0
(2)  960/    45DD :                     		align 2
(2)  961/    45DE :                     
(2)  962/    45DE :                     str_Info:
(2)  963/    45DE : 83FF D7DC           		dc.l pstr_mem(3,RAM_Framecount)
(2)  964/    45E2 : 00                  		dc.b 0
(2)  965/    45E3 :                     		align 2
(2)  966/    45E4 :                     
(1)   19/    45E4 :                     mcscrn_e:
(1)   19/    45E4 :                     ; Md_Screen00_e:
(1)   19/    45E4 : =$45E4               MD_SCREEN07_E label *
(1)   19/    45E4 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/    45E4 :                     
     376/    45E4 :                     
     377/    45E4 :                     ; ====================================================================
     378/    45E4 :                     ; ----------------------------------------------------------------
     379/    45E4 :                     ; DATA BLOCK (banks)
     380/    45E4 :                     ; ----------------------------------------------------------------
     381/    45E4 :                     
     382/    45E4 :                     		include "game/incl_data.asm"
(1)    1/    45E4 :                     ; ===========================================================================
(1)    2/    45E4 :                     ; ----------------------------------------------------------------
(1)    3/    45E4 :                     ; 68K DATA BANKS
(1)    4/    45E4 :                     ;
(1)    5/    45E4 :                     ; Size limitations:
(1)    6/    45E4 :                     ;  $40000 for SegaCD's Word-RAM
(1)    7/    45E4 :                     ;  $80000 for Sega-Mapper(SSF2) bank *not tested*
(1)    8/    45E4 :                     ; $100000 for 32X Cartridge
(1)    9/    45E4 :                     ; All 4MB for Genesis/Pico
(1)   10/    45E4 :                     ;
(1)   11/    45E4 :                     ; SCD/CD32:
(1)   12/    45E4 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/    45E4 :                     ;
(1)   14/    45E4 :                     ; MACRO Usage:
(1)   15/    45E4 :                     ;	data_dset LABEL_START
(1)   16/    45E4 :                     ;	; your data
(1)   17/    45E4 :                     ;	data_dend LABEL_END
(1)   18/    45E4 :                     ; ----------------------------------------------------------------
(1)   19/    45E4 :                     ; - For including VDP graphics:
(1)   20/    45E4 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/    45E4 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/    45E4 :                     ;
(1)   23/    45E4 :                     ; - For the SVDP graphics:
(1)   24/    45E4 :                     ; 	mars_VramStart Label_test			; Start label
(1)   25/    45E4 :                     ; example_0:
(1)   26/    45E4 :                     ; 	include "your_svdp_graphics.bin"
(1)   27/    45E4 :                     ; 	align 4						; Don't forget align by 4
(1)   28/    45E4 :                     ; example_1:
(1)   29/    45E4 :                     ; 	include "more_svdp.bin"
(1)   30/    45E4 :                     ;	align 4
(1)   31/    45E4 :                     ;	mars_VramEnd Label_end				; End label
(1)   32/    45E4 :                     ; ----------------------------------------------------------------
(1)   33/    45E4 :                     
(1)   34/    45E4 :                     ; ============================================================
(1)   35/    45E4 :                     ; --------------------------------------------------------
(1)   36/    45E4 :                     ; MAIN bank
(1)   37/    45E4 :                     ; --------------------------------------------------------
(1)   38/    45E4 :                     
(1)   39/    45E4 : (MACRO)              	data_dset DATA_BANK0
(1)   39/    45E4 :                     ; MCD_DBANK0:
(1)   39/    45E4 : =$45E4               DATA_BANK0 label *
(1)   39/    45E4 : =$45E4               GLBL_MDATA_ST := *
(1)   40/    45E4 :                     		include "sound/data.asm"		; GEMA sound data
(2)    1/    45E4 :                     ; ===========================================================================
(2)    2/    45E4 :                     ; -------------------------------------------------------------------
(2)    3/    45E4 :                     ; Main sound data
(2)    4/    45E4 :                     ; -------------------------------------------------------------------
(2)    5/    45E4 :                     
(2)    6/    45E4 :                     MainGemaSeqList:
(2)    7/    45E4 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)    7/    45E4 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)    8/    45E8 : (MACRO)              	gemaTrk 0,6,gtrk_SfxAll	; $0F
(2)    8/    45E8 : 0600 4624                   dc.l ((0&$01)<<31)|((6&$7F)<<24)|(GTRK_SFXALL&$FFFFFF)
(2)    9/    45EC : (MACRO)              	gemaTrk 1,6,gtrk_Test1
(2)    9/    45EC : 8600 5225                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST1&$FFFFFF)
(2)   10/    45F0 : (MACRO)              	gemaTrk 1,3,gtrk_Test2
(2)   10/    45F0 : 8300 6231                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST2&$FFFFFF)
(2)   11/    45F4 : (MACRO)              	gemaTrk 1,3,gtrk_Test3
(2)   11/    45F4 : 8301 2355                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST3&$FFFFFF)
(2)   12/    45F8 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   12/    45F8 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   13/    45FC : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   13/    45FC : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   14/    4600 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   14/    4600 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   15/    4604 : (MACRO)              	gemaTrk 1,6,gtrk_Test0	; $08
(2)   15/    4604 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   16/    4608 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   16/    4608 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   17/    460C : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   17/    460C : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   18/    4610 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   18/    4610 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   19/    4614 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   19/    4614 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   20/    4618 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   20/    4618 : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   21/    461C : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   21/    461C : 8600 46FF                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   22/    4620 : (MACRO)              	gemaTrk 0,6,gtrk_SfxAll	; $0F
(2)   22/    4620 : 0600 4624                   dc.l ((0&$01)<<31)|((6&$7F)<<24)|(GTRK_SFXALL&$FFFFFF)
(2)   23/    4624 :                     
(2)   24/    4624 :                     ; ----------------------------------------------------
(2)   25/    4624 :                     
(2)   26/    4624 :                     gtrk_SfxAll:
(2)   27/    4624 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   27/    4624 : 0004                        dc.w 4
(2)   27/    4626 : 0000 4632                   dc.l .BLK
(2)   27/    462A : 0000 4636                   dc.l .PAT
(2)   27/    462E : 0000 46DF                   dc.l .INS
(2)   28/    4632 :                     .blk:	binclude "sound/seq/sfxall_blk.bin"
(2)   29/    4636 :                     .pat:	binclude "sound/seq/sfxall_patt.bin"
(2)   30/    46DF :                     .ins:
(2)   31/    46DF : (MACRO)              	gInsFm -12,FmIns_sfx_smash
(2)   31/    46DF : A0F4 01A9                   dc.b $A0,-12,((FMINS_SFX_SMASH>>16)&$FF),((FMINS_SFX_SMASH>>8)&$FF)
(2)   31/    46E3 : 7B00 0000                   dc.b FMINS_SFX_SMASH&$FF,$00,$00,$00
(2)   32/    46E7 : (MACRO)              	gInsFm -12,FmIns_sfx_smash
(2)   32/    46E7 : A0F4 01A9                   dc.b $A0,-12,((FMINS_SFX_SMASH>>16)&$FF),((FMINS_SFX_SMASH>>8)&$FF)
(2)   32/    46EB : 7B00 0000                   dc.b FMINS_SFX_SMASH&$FF,$00,$00,$00
(2)   33/    46EF : (MACRO)              	gInsFm -12,FmIns_sfx_explode
(2)   33/    46EF : A0F4 01A7                   dc.b $A0,-12,((FMINS_SFX_EXPLODE>>16)&$FF),((FMINS_SFX_EXPLODE>>8)&$FF)
(2)   33/    46F3 : 0300 0000                   dc.b FMINS_SFX_EXPLODE&$FF,$00,$00,$00
(2)   34/    46F7 : (MACRO)              	gInsFm 0,FmIns_Bell_low13
(2)   34/    46F7 : A000 01A5                   dc.b $A0,0,((FMINS_BELL_LOW13>>16)&$FF),((FMINS_BELL_LOW13>>8)&$FF)
(2)   34/    46FB : 1B00 0000                   dc.b FMINS_BELL_LOW13&$FF,$00,$00,$00
(2)   35/    46FF :                     
(2)   36/    46FF :                     ; ----------------------------------------------------
(2)   37/    46FF :                     gtrk_Test0:
(2)   38/    46FF :                     ; 	gemaHead .blk,.pat,.ins,4
(2)   39/    46FF :                     ; .blk:	binclude "sound/seq/test_2_blk.bin"
(2)   40/    46FF :                     ; .pat:	binclude "sound/seq/test_2_patt.bin"
(2)   41/    46FF :                     ; .ins:
(2)   42/    46FF :                     ; 	gInsDac 0,DacIns_sxbeats,0
(2)   43/    46FF :                     ; 	gInsDac 0,DacIns_sxbeats2,0
(2)   44/    46FF :                     ; 	gInsDac 0,DacIns_drumsetA,0
(2)   45/    46FF :                     
(2)   46/    46FF : (MACRO)              	gemaHead .blk,.pat,.ins,10
(2)   46/    46FF : 000A                        dc.w 10
(2)   46/    4701 : 0000 470D                   dc.l .BLK
(2)   46/    4705 : 0000 4712                   dc.l .PAT
(2)   46/    4709 : 0000 51E5                   dc.l .INS
(2)   47/    470D :                     .blk:	binclude "sound/seq/carillon_blk.bin"
(2)   48/    4712 :                     .pat:	binclude "sound/seq/carillon_patt.bin"
(2)   49/    51E5 :                     .ins:
(2)   50/    51E5 : (MACRO)              	gInsFm -12,FmIns_Guitar_bball
(2)   50/    51E5 : A0F4 01A9                   dc.b $A0,-12,((FMINS_GUITAR_BBALL>>16)&$FF),((FMINS_GUITAR_BBALL>>8)&$FF)
(2)   50/    51E9 : BB00 0000                   dc.b FMINS_GUITAR_BBALL&$FF,$00,$00,$00
(2)   51/    51ED : (MACRO)              	gInsNull;gInsFm -24,FmIns_Bell_mid36
(2)   51/    51ED : 0000 0000                   dc.b $00,$00,$00,$00
(2)   51/    51F1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   52/    51F5 : (MACRO)              	gInsFm 0,FmIns_Trumpet_carnival
(2)   52/    51F5 : A000 01A8                   dc.b $A0,0,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(2)   52/    51F9 : BB00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(2)   53/    51FD : (MACRO)              	gInsFm -12,FmIns_Trumpet_bus
(2)   53/    51FD : A0F4 01A4                   dc.b $A0,-12,((FMINS_TRUMPET_BUS>>16)&$FF),((FMINS_TRUMPET_BUS>>8)&$FF)
(2)   53/    5201 : 7B00 0000                   dc.b FMINS_TRUMPET_BUS&$FF,$00,$00,$00
(2)   54/    5205 : (MACRO)              	gInsDac 0,DacIns_Kick_2,0
(2)   54/    5205 : C000 02EF                   dc.b $C0|0,0,((DACINS_KICK_2>>16)&$FF),((DACINS_KICK_2>>8)&$FF)
(2)   54/    5209 : FC00 0000                   dc.b DACINS_KICK_2&$FF,0,0,0
(2)   55/    520D : (MACRO)              	gInsDac +12,DacIns_Snare_2,0
(2)   55/    520D : C00C 02F8                   dc.b $C0|0,+12,((DACINS_SNARE_2>>16)&$FF),((DACINS_SNARE_2>>8)&$FF)
(2)   55/    5211 : 5A00 0000                   dc.b DACINS_SNARE_2&$FF,0,0,0
(2)   56/    5215 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(2)   56/    5215 : A000 01A4                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   56/    5219 : 9B00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   57/    521D : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(2)   57/    521D : B000 01A7                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   57/    5221 : 8300 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   58/    5225 :                     
(2)   59/    5225 :                     ; ----------------------------------------------------
(2)   60/    5225 :                     gtrk_Test1:
(2)   61/    5225 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   61/    5225 : 0004                        dc.w 4
(2)   61/    5227 : 0000 5233                   dc.l .BLK
(2)   61/    522B : 0000 5258                   dc.l .PAT
(2)   61/    522F : 0000 61C9                   dc.l .INS
(2)   62/    5233 :                     .blk:	binclude "sound/seq/sauron_blk.bin"
(2)   63/    5258 :                     .pat:	binclude "sound/seq/sauron_patt.bin"
(2)   64/    61C9 :                     .ins:
(2)   65/    61C9 : (MACRO)              	gInsPcm -12,PcmIns_sauron_01,0
(2)   65/    61C9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   65/    61CD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   66/    61D1 : (MACRO)              	gInsPcm -12,PcmIns_sauron_02,0
(2)   66/    61D1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   66/    61D5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   67/    61D9 : (MACRO)              	gInsPcm -12,PcmIns_sauron_03,0
(2)   67/    61D9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   67/    61DD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   68/    61E1 : (MACRO)              	gInsPcm -12,PcmIns_sauron_04,0
(2)   68/    61E1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   68/    61E5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   69/    61E9 : (MACRO)              	gInsPcm -12,PcmIns_sauron_05,1
(2)   69/    61E9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   69/    61ED : 0000 0000                   dc.b $00,$00,$00,$00
(2)   70/    61F1 : (MACRO)              	gInsPcm -12,PcmIns_sauron_06,0
(2)   70/    61F1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   70/    61F5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   71/    61F9 : (MACRO)              	gInsPcm -12,PcmIns_sauron_07,0
(2)   71/    61F9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   71/    61FD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   72/    6201 : (MACRO)              	gInsPcm -12,PcmIns_sauron_08,0
(2)   72/    6201 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   72/    6205 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   73/    6209 : (MACRO)              	gInsPcm -12,PcmIns_sauron_09,0
(2)   73/    6209 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   73/    620D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   74/    6211 : (MACRO)              	gInsPcm -12,PcmIns_sauron_10,0
(2)   74/    6211 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   74/    6215 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   75/    6219 : (MACRO)              	gInsPcm -12,PcmIns_sauron_11,0
(2)   75/    6219 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   75/    621D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/    6221 : (MACRO)              	gInsPcm -12,PcmIns_sauron_12,0
(2)   76/    6221 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/    6225 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    6229 : (MACRO)              	gInsNull
(2)   77/    6229 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    622D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   78/    6231 :                     
(2)   79/    6231 :                     ; 		gemaHead .blk,.pat,.ins,10
(2)   80/    6231 :                     ; .blk:		binclude "sound/seq/test_blk.bin"
(2)   81/    6231 :                     ; .pat:		binclude "sound/seq/test_patt.bin"
(2)   82/    6231 :                     ; .ins:
(2)   83/    6231 :                     ; 		gInsPcm 0,PcmIns_TEST,0
(2)   84/    6231 :                     
(2)   85/    6231 :                     ; ----------------------------------------------------
(2)   86/    6231 :                     gtrk_Test2:
(2)   87/    6231 : (MACRO)              	gemaHead .blk,.pat,.ins,16
(2)   87/    6231 : 0010                        dc.w 16
(2)   87/    6233 : 0000 623F                   dc.l .BLK
(2)   87/    6237 : 0000 6262                   dc.l .PAT
(2)   87/    623B : 0001 22CD                   dc.l .INS
(2)   88/    623F :                     .blk:	binclude "sound/seq/trnthem_blk.bin"
(2)   89/    6262 :                     .pat:	binclude "sound/seq/trnthem_patt.bin"
(2)   90/   122CD :                     .ins:
(2)   91/   122CD : (MACRO)              	gInsPwm -12,PwmIns_trnthem_01,1
(2)   91/   122CD : 0000 0000                   dc.b $00,$00,$00,$00
(2)   91/   122D1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   92/   122D5 : (MACRO)              	gInsFm -24,FmIns_Hats_1
(2)   92/   122D5 : A0E8 01A4                   dc.b $A0,-24,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   92/   122D9 : 9B00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   93/   122DD : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(2)   93/   122DD : B000 01A7                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   93/   122E1 : 8300 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   94/   122E5 : (MACRO)              	gInsFm -24,FmIns_Trumpet_1
(2)   94/   122E5 : A0E8 01A8                   dc.b $A0,-24,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   94/   122E9 : 5B00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   95/   122ED : (MACRO)              	gInsPcm -12,PcmIns_trnthem_05,0
(2)   95/   122ED : 0000 0000                   dc.b $00,$00,$00,$00
(2)   95/   122F1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   96/   122F5 : (MACRO)              	gInsPcm -12,PcmIns_trnthem_06,0
(2)   96/   122F5 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   96/   122F9 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   97/   122FD : (MACRO)              	gInsFm -56,FmIns_Bass_club_108
(2)   97/   122FD : A0C8 01A0                   dc.b $A0,-56,((FMINS_BASS_CLUB_108>>16)&$FF),((FMINS_BASS_CLUB_108>>8)&$FF)
(2)   97/   12301 : 3B00 0000                   dc.b FMINS_BASS_CLUB_108&$FF,$00,$00,$00
(2)   98/   12305 : (MACRO)              	gInsFm -56,FmIns_Bass_club_108
(2)   98/   12305 : A0C8 01A0                   dc.b $A0,-56,((FMINS_BASS_CLUB_108>>16)&$FF),((FMINS_BASS_CLUB_108>>8)&$FF)
(2)   98/   12309 : 3B00 0000                   dc.b FMINS_BASS_CLUB_108&$FF,$00,$00,$00
(2)   99/   1230D : (MACRO)              	gInsFm -56,FmIns_Bass_Groove_1
(2)   99/   1230D : A0C8 01A1                   dc.b $A0,-56,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)   99/   12311 : 3B00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)  100/   12315 : (MACRO)              	gInsPcm -12,PcmIns_trnthem_10,1
(2)  100/   12315 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  100/   12319 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  101/   1231D : (MACRO)              	gInsPwm -12,PwmIns_trnthem_11,0
(2)  101/   1231D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  101/   12321 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  102/   12325 : (MACRO)              	gInsPwm -12,PwmIns_trnthem_12,0
(2)  102/   12325 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  102/   12329 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  103/   1232D : (MACRO)              	gInsNull
(2)  103/   1232D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  103/   12331 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  104/   12335 : (MACRO)              	gInsNull
(2)  104/   12335 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  104/   12339 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  105/   1233D : (MACRO)              	gInsNull
(2)  105/   1233D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  105/   12341 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  106/   12345 : (MACRO)              	gInsNull
(2)  106/   12345 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  106/   12349 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  107/   1234D : (MACRO)              	gInsPcm 0,PcmIns_trnthem_20,0
(2)  107/   1234D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  107/   12351 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  108/   12355 :                     
(2)  109/   12355 :                     ; -----------------------------------------------------------
(2)  110/   12355 :                     
(2)  111/   12355 :                     gtrk_Test3:
(2)  112/   12355 : (MACRO)              	gemaHead .blk,.pat,.ins,16
(2)  112/   12355 : 0010                        dc.w 16
(2)  112/   12357 : 0001 2363                   dc.l .BLK
(2)  112/   1235B : 0001 2374                   dc.l .PAT
(2)  112/   1235F : 0001 9F13                   dc.l .INS
(2)  113/   12363 :                     .blk:	binclude "sound/seq/box_blk.bin"
(2)  114/   12374 :                     .pat:	binclude "sound/seq/box_patt.bin"
(2)  115/   19F13 :                     .ins:
(2)  116/   19F13 : (MACRO)              	gInsFm -24,FmIns_Organ_drawbar
(2)  116/   19F13 : A0E8 01A3                   dc.b $A0,-24,((FMINS_ORGAN_DRAWBAR>>16)&$FF),((FMINS_ORGAN_DRAWBAR>>8)&$FF)
(2)  116/   19F17 : 5B00 0000                   dc.b FMINS_ORGAN_DRAWBAR&$FF,$00,$00,$00
(2)  117/   19F1B : (MACRO)              	gInsNull
(2)  117/   19F1B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  117/   19F1F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  118/   19F23 : (MACRO)              	gInsPcm +24,PcmIns_Kick,0
(2)  118/   19F23 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  118/   19F27 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  119/   19F2B : (MACRO)              	gInsNull
(2)  119/   19F2B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  119/   19F2F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  120/   19F33 : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  120/   19F33 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  120/   19F37 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  121/   19F3B : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  121/   19F3B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  121/   19F3F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  122/   19F43 : (MACRO)              	gInsNull
(2)  122/   19F43 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  122/   19F47 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  123/   19F4B : (MACRO)              	gInsNull
(2)  123/   19F4B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  123/   19F4F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  124/   19F53 : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  124/   19F53 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  124/   19F57 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  125/   19F5B : (MACRO)              	gInsPcm +24,PcmIns_BBoxSnare,0
(2)  125/   19F5B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  125/   19F5F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  126/   19F63 : (MACRO)              	gInsFm -12,FmIns_Bass_Groove_1
(2)  126/   19F63 : A0F4 01A1                   dc.b $A0,-12,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)  126/   19F67 : 3B00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)  127/   19F6B : (MACRO)              	gInsNull
(2)  127/   19F6B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  127/   19F6F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  128/   19F73 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(2)  128/   19F73 : A0F4 01A8                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)  128/   19F77 : 5B00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)  129/   19F7B : (MACRO)              	gInsPcm 0,PcmIns_Trumpet1,0
(2)  129/   19F7B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  129/   19F7F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/   19F83 : (MACRO)              	gInsNull
(2)  130/   19F83 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/   19F87 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  131/   19F8B : (MACRO)              	gInsFm -24,FmIns_Vibraphone_1
(2)  131/   19F8B : A0E8 01A3                   dc.b $A0,-24,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(2)  131/   19F8F : BB00 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(2)  132/   19F93 : (MACRO)              	gInsNull
(2)  132/   19F93 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  132/   19F97 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  133/   19F9B :                     
(2)  134/   19F9B :                     ; ===========================================================================
(2)  135/   19F9B :                     ; -------------------------------------------------------------------
(2)  136/   19F9B :                     ; GEMA/Nikona FM instruments
(2)  137/   19F9B :                     ; -------------------------------------------------------------------
(2)  138/   19F9B :                     
(2)  139/   19F9B :                     ; -----------------------------------------------------------
(2)  140/   19F9B :                     ; Normal FM Instruments
(2)  141/   19F9B :                     ; -----------------------------------------------------------
(2)  142/   19F9B :                     
(2)  143/   19F9B :                     FmIns_Bass_big_81:
(2)  144/   19F9B :                     		binclude "sound/ins/fm/bin/bass_big_82.bin"
(2)  145/   19FBB :                     FmIns_Bass_big_110:
(2)  146/   19FBB :                     		binclude "sound/ins/fm/bin/bass_big_110.bin"
(2)  147/   19FDB :                     FmIns_Bass_big_114:
(2)  148/   19FDB :                     		binclude "sound/ins/fm/bin/bass_big_114.bin"
(2)  149/   19FFB :                     FmIns_Bass_big_122:
(2)  150/   19FFB :                     		binclude "sound/ins/fm/bin/bass_big_122.bin"
(2)  151/   1A01B :                     FmIns_Bass_cave_47:
(2)  152/   1A01B :                     		binclude "sound/ins/fm/bin/bass_cave_47.bin"
(2)  153/   1A03B :                     FmIns_Bass_club_108:
(2)  154/   1A03B :                     		binclude "sound/ins/fm/bin/bass_club_108.bin"
(2)  155/   1A05B :                     FmIns_Bass_foot_75:
(2)  156/   1A05B :                     		binclude "sound/ins/fm/bin/bass_foot_75.bin"
(2)  157/   1A07B :                     FmIns_Bass_gem_26:
(2)  158/   1A07B :                     		binclude "sound/ins/fm/bin/bass_gem_26.bin"
(2)  159/   1A09B :                     FmIns_Bass_groove_119:
(2)  160/   1A09B :                     		binclude "sound/ins/fm/bin/bass_groove_119.bin"
(2)  161/   1A0BB :                     FmIns_Bass_heavy_107:
(2)  162/   1A0BB :                     		binclude "sound/ins/fm/bin/bass_heavy_107.bin"
(2)  163/   1A0DB :                     FmIns_Bass_heavy_118:
(2)  164/   1A0DB :                     		binclude "sound/ins/fm/bin/bass_heavy_118.bin"
(2)  165/   1A0FB :                     FmIns_Bass_loud_117:
(2)  166/   1A0FB :                     		binclude "sound/ins/fm/bin/bass_loud_117.bin"
(2)  167/   1A11B :                     FmIns_bass_low_46:
(2)  168/   1A11B :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(2)  169/   1A13B :                     FmIns_Bass_Groove_1:
(2)  170/   1A13B :                     		binclude "sound/ins/fm/bin/bass_groove_1.bin"
(2)  171/   1A15B :                     FmIns_bass_low_81:
(2)  172/   1A15B :                     		binclude "sound/ins/fm/bin/bass_low_81.bin"
(2)  173/   1A17B :                     FmIns_bass_low_103:
(2)  174/   1A17B :                     		binclude "sound/ins/fm/bin/bass_low_103.bin"
(2)  175/   1A19B :                     FmIns_bass_low_106:
(2)  176/   1A19B :                     		binclude "sound/ins/fm/bin/bass_low_106.bin"
(2)  177/   1A1BB :                     FmIns_bass_low_126:
(2)  178/   1A1BB :                     		binclude "sound/ins/fm/bin/bass_low_126.bin"
(2)  179/   1A1DB :                     FmIns_bass_mid_19:
(2)  180/   1A1DB :                     		binclude "sound/ins/fm/bin/bass_mid_19.bin"
(2)  181/   1A1FB :                     FmIns_bass_mid_80:
(2)  182/   1A1FB :                     		binclude "sound/ins/fm/bin/bass_mid_80.bin"
(2)  183/   1A21B :                     FmIns_bass_mid_111:
(2)  184/   1A21B :                     		binclude "sound/ins/fm/bin/bass_mid_111.bin"
(2)  185/   1A23B :                     FmIns_bass_power_123:
(2)  186/   1A23B :                     		binclude "sound/ins/fm/bin/bass_power_123.bin"
(2)  187/   1A25B :                     FmIns_bass_silent_53:
(2)  188/   1A25B :                     		binclude "sound/ins/fm/bin/bass_silent_53.bin"
(2)  189/   1A27B :                     FmIns_bass_slap_10:
(2)  190/   1A27B :                     		binclude "sound/ins/fm/bin/bass_slap_10.bin"
(2)  191/   1A29B :                     FmIns_bass_slap_105:
(2)  192/   1A29B :                     		binclude "sound/ins/fm/bin/bass_slap_105.bin"
(2)  193/   1A2BB :                     FmIns_bass_synth_60:
(2)  194/   1A2BB :                     		binclude "sound/ins/fm/bin/bass_synth_60.bin"
(2)  195/   1A2DB :                     FmIns_bass_synth_61:
(2)  196/   1A2DB :                     		binclude "sound/ins/fm/bin/bass_synth_61.bin"
(2)  197/   1A2FB :                     FmIns_bass_synth_72:
(2)  198/   1A2FB :                     		binclude "sound/ins/fm/bin/bass_synth_72.bin"
(2)  199/   1A31B :                     FmIns_bass_synth_73:
(2)  200/   1A31B :                     		binclude "sound/ins/fm/bin/bass_synth_73.bin"
(2)  201/   1A33B :                     FmIns_bass_vlow_74:
(2)  202/   1A33B :                     		binclude "sound/ins/fm/bin/bass_vlow_74.bin"
(2)  203/   1A35B :                     FmIns_Organ_drawbar:
(2)  204/   1A35B :                     		binclude "sound/ins/fm/bin/organ_drawbar.bin"
(2)  205/   1A37B :                     FmIns_Flaute_1:
(2)  206/   1A37B :                     		binclude "sound/ins/fm/bin/flaute_1.bin"
(2)  207/   1A39B :                     FmIns_Flaute_2:
(2)  208/   1A39B :                     		binclude "sound/ins/fm/bin/flaute_2.bin"
(2)  209/   1A3BB :                     FmIns_Vibraphone_1:
(2)  210/   1A3BB :                     		binclude "sound/ins/fm/bin/vibraphone_1.bin"
(2)  211/   1A3DB :                     FmIns_Vibraphone_2:
(2)  212/   1A3DB :                     		binclude "sound/ins/fm/bin/vibraphone_2.bin"
(2)  213/   1A3FB :                     FmIns_Xylophone:
(2)  214/   1A3FB :                     		binclude "sound/ins/fm/bin/xylophone2_43.bin"
(2)  215/   1A41B :                     FmIns_Bass_low81:
(2)  216/   1A41B :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(2)  217/   1A43B :                     FmIns_Trumpet_low:
(2)  218/   1A43B :                     		binclude "sound/ins/fm/bin/trumpet_low.bin"
(2)  219/   1A45B :                     FmIns_Trumpet_genie:
(2)  220/   1A45B :                     		binclude "sound/ins/fm/bin/trumpet_genie.bin"
(2)  221/   1A47B :                     FmIns_Trumpet_bus:
(2)  222/   1A47B :                     		binclude "sound/ins/fm/bin/trumpet_bus.bin"
(2)  223/   1A49B :                     FmIns_Hats_1:
(2)  224/   1A49B :                     		binclude "sound/ins/fm/bin/hats_96.bin"
(2)  225/   1A4BB :                     FmIns_Bell_mid36:
(2)  226/   1A4BB :                     		binclude "sound/ins/fm/bin/bell_mid_36.bin"
(2)  227/   1A4DB :                     FmIns_Bell_62:
(2)  228/   1A4DB :                     		binclude "sound/ins/fm/bin/bell_62.bin"
(2)  229/   1A4FB :                     FmIns_Bell_93:
(2)  230/   1A4FB :                     		binclude "sound/ins/fm/bin/bell_93.bin"
(2)  231/   1A51B :                     FmIns_Bell_low13:
(2)  232/   1A51B :                     		binclude "sound/ins/fm/bin/bell_low_13.bin"
(2)  233/   1A53B :                     
(2)  234/   1A53B :                     FmIns_Drum_Kick:
(2)  235/   1A53B :                     		binclude "sound/ins/fm/bin/kick_low.bin"
(2)  236/   1A55B :                     FmIns_Tick:
(2)  237/   1A55B :                     		binclude "sound/ins/fm/bin/tick_44.bin"
(2)  238/   1A57B :                     
(2)  239/   1A57B :                     ; -----------------------------------------------------------
(2)  240/   1A57B :                     ; Special FM3 Instruments
(2)  241/   1A57B :                     ; -----------------------------------------------------------
(2)  242/   1A57B :                     
(2)  243/   1A57B :                     FmSpIns_clack_1:
(2)  244/   1A57B :                     		binclude "sound/ins/fm/bin/fm3_clack_1.bin"
(2)  245/   1A5A3 :                     FmSpIns_cowbell_h:
(2)  246/   1A5A3 :                     		binclude "sound/ins/fm/bin/fm3_cowbell_h.bin"
(2)  247/   1A5CB :                     FmSpIns_cowbell_l:
(2)  248/   1A5CB :                     		binclude "sound/ins/fm/bin/fm3_cowbell_l.bin"
(2)  249/   1A5F3 :                     FmSpIns_hats_hq:
(2)  250/   1A5F3 :                     		binclude "sound/ins/fm/bin/fm3_hats_hq.bin"
(2)  251/   1A61B :                     FmSpIns_sfx_alien:
(2)  252/   1A61B :                     		binclude "sound/ins/fm/bin/fm3_sfx_alien.bin"
(2)  253/   1A643 :                     FmSpIns_sfx_knckbuzz:
(2)  254/   1A643 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knckbuzz.bin"
(2)  255/   1A66B :                     FmSpIns_sfx_knock_h:
(2)  256/   1A66B :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_h.bin"
(2)  257/   1A693 :                     FmSpIns_sfx_knock_l:
(2)  258/   1A693 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_l.bin"
(2)  259/   1A6BB :                     FmSpIns_sfx_laser:
(2)  260/   1A6BB :                     		binclude "sound/ins/fm/bin/fm3_sfx_laser.bin"
(2)  261/   1A6E3 :                     
(2)  262/   1A6E3 :                     ; -----------------------------------------------------------
(2)  263/   1A6E3 :                     ; FM sound effects
(2)  264/   1A6E3 :                     ; -----------------------------------------------------------
(2)  265/   1A6E3 :                     
(2)  266/   1A6E3 :                     FmIns_sfx_punch:
(2)  267/   1A6E3 :                     		binclude "sound/ins/fm/bin/sfx_punch.bin"
(2)  268/   1A703 :                     FmIns_sfx_explode:
(2)  269/   1A703 :                     		binclude "sound/ins/fm/bin/sfx_explode.bin"
(2)  270/   1A723 :                     FmIns_sfx_slash:
(2)  271/   1A723 :                     		binclude "sound/ins/fm/bin/sfx_slash.bin"
(2)  272/   1A743 :                     FmIns_sfx_alien1:
(2)  273/   1A743 :                     		binclude "sound/ins/fm/bin/sfx_alien_83.bin"
(2)  274/   1A763 :                     FmIns_sfx_alien2:
(2)  275/   1A763 :                     		binclude "sound/ins/fm/bin/sfx_alien_84.bin"
(2)  276/   1A783 :                     
(2)  277/   1A783 :                     ; ====================================================================
(2)  278/   1A783 :                     
(2)  279/   1A783 :                     ; FM3 Special
(2)  280/   1A783 :                     FmIns_Sp_OpenHat:
(2)  281/   1A783 :                     		binclude "sound/ins/fm/gsx/fm3_openhat.gsx",$2478,$28
(2)  282/   1A7AB :                     FmIns_Sp_ClosedHat:
(2)  283/   1A7AB :                     		binclude "sound/ins/fm/gsx/fm3_closedhat.gsx",$2478,$28
(2)  284/   1A7D3 :                     FmIns_Sp_Cowbell:
(2)  285/   1A7D3 :                     		binclude "sound/ins/fm/gsx/fm3_cowbell.gsx",$2478,$28
(2)  286/   1A7FB :                     FmIns_Drums_Kick1:
(2)  287/   1A7FB :                     		binclude "sound/ins/fm/gsx/drum_kick_gem.gsx",$2478,$20
(2)  288/   1A81B :                     FmIns_Piano_Aqua:
(2)  289/   1A81B :                     		binclude "sound/ins/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  290/   1A83B :                     FmIns_HBeat_tom:
(2)  291/   1A83B :                     		binclude "sound/ins/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  292/   1A85B :                     FmIns_Trumpet_1:
(2)  293/   1A85B :                     		binclude "sound/ins/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  294/   1A87B :                     FmIns_Bass_duck:
(2)  295/   1A87B :                     		binclude "sound/ins/fm/gsx/bass_duck.gsx",$2478,$20
(2)  296/   1A89B :                     FmIns_ClosedHat:
(2)  297/   1A89B :                     		binclude "sound/ins/fm/gsx/hats_closed.gsx",$2478,$20
(2)  298/   1A8BB :                     FmIns_Trumpet_carnival:
(2)  299/   1A8BB :                     		binclude "sound/ins/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(2)  300/   1A8DB :                     FmIns_Bass_club:
(2)  301/   1A8DB :                     		binclude "sound/ins/fm/gsx/OLD_bass_club.gsx",$2478,$20
(2)  302/   1A8FB :                     FmIns_Bass_groove_2:
(2)  303/   1A8FB :                     		binclude "sound/ins/fm/gsx/bass_groove_2.gsx",$2478,$20
(2)  304/   1A91B :                     FmIns_PSynth_plus:
(2)  305/   1A91B :                     		binclude "sound/ins/fm/gsx/psynth_plus.gsx",$2478,$20
(2)  306/   1A93B :                     FmIns_Brass_7:
(2)  307/   1A93B :                     		binclude "sound/ins/fm/gsx/brass_7.gsx",$2478,$20
(2)  308/   1A95B :                     
(2)  309/   1A95B :                     FmIns_sfx_punch_2:
(2)  310/   1A95B :                     		binclude "sound/ins/fm/gsx/fmsfx_punch.gsx",$2478,$20
(2)  311/   1A97B :                     FmIns_sfx_smash:
(2)  312/   1A97B :                     		binclude "sound/ins/fm/gsx/fmsfx_smash.gsx",$2478,$20
(2)  313/   1A99B :                     
(2)  314/   1A99B :                     FmIns_bass_italo:
(2)  315/   1A99B :                     		binclude "sound/ins/fm/gsx/bass_italo.gsx",$2478,$20
(2)  316/   1A9BB :                     FmIns_Guitar_bball:
(2)  317/   1A9BB :                     		binclude "sound/ins/fm/gsx/guitar_bball.gsx",$2478,$20
(2)  318/   1A9DB :                     
(2)  319/   1A9DB :                     ; ===========================================================================
(2)  320/   1A9DB :                     ; -------------------------------------------------------------------
(2)  321/   1A9DB :                     ; GEMA/Nikona DAC samples
(2)  322/   1A9DB :                     ;
(2)  323/   1A9DB :                     ; 16000hz base
(2)  324/   1A9DB :                     ; -------------------------------------------------------------------
(2)  325/   1A9DB :                     
(2)  326/   1A9DB :                     		align $800
(2)  327/   1B000 :                     		;gSmplData Label,"file_path",loop_start
(2)  328/   1B000 :                     ; -----------------------------------------------------------
(2)  330/   1B000 : (MACRO)              		gSmplData DacIns_sxbeats,"sound/ins/smpl/sxbeats.wav",0
(2)  330/   1B000 : =$1B000              DACINS_SXBEATS    label *
(2)  330/   1B000 : 743C 00                     dc.b ((DACINS_SXBEATS_e-DACINS_SXBEATS_s)&$FF),(((DACINS_SXBEATS_e-DACINS_SXBEATS_s)>>8)&$FF),(((DACINS_SXBEATS_e-DACINS_SXBEATS_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  330/   1B003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  330/   1B006 :                     DACINS_SXBEATS_s:
(2)  330/   1B006 :                             binclude "sound/ins/smpl/sxbeats.wav",$2C       ; dc.b (data)
(2)  330/   1EC7A :                     DACINS_SXBEATS_e:
(2)  331/   1EC7A : (MACRO)              		gSmplData DacIns_sxbeats2,"sound/ins/smpl/sxbeats2.wav",0
(2)  331/   1EC7A : =$1EC7A              DACINS_SXBEATS2    label *
(2)  331/   1EC7A : 1A79 00                     dc.b ((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)&$FF),(((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)>>8)&$FF),(((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  331/   1EC7D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  331/   1EC80 :                     DACINS_SXBEATS2_s:
(2)  331/   1EC80 :                             binclude "sound/ins/smpl/sxbeats2.wav",$2C       ; dc.b (data)
(2)  331/   2659A :                     DACINS_SXBEATS2_e:
(2)  332/   2659A : (MACRO)              		gSmplData DacIns_drumsetA,"sound/ins/smpl/drumsetA.wav",0
(2)  332/   2659A : =$2659A              DACINS_DRUMSETA    label *
(2)  332/   2659A : A476 00                     dc.b ((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)&$FF),(((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)>>8)&$FF),(((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  332/   2659D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  332/   265A0 :                     DACINS_DRUMSETA_s:
(2)  332/   265A0 :                             binclude "sound/ins/smpl/drumsetA.wav",$2C       ; dc.b (data)
(2)  332/   2DC44 :                     DACINS_DRUMSETA_e:
(2)  334/   2DC44 :                     ; 		gSmplData DacIns_trnthem_10,"sound/ins/smpl/trnthem/10.wav",3033
(2)  335/   2DC44 :                     ; 		gSmplData DacIns_trnthem_20,"sound/ins/smpl/trnthem/20.wav",14309
(2)  336/   2DC44 : (MACRO)              		gSmplData DacIns_Kick,"sound/ins/smpl/kick.wav",0
(2)  336/   2DC44 : =$2DC44              DACINS_KICK    label *
(2)  336/   2DC44 : B004 00                     dc.b ((DACINS_KICK_e-DACINS_KICK_s)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>8)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  336/   2DC47 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  336/   2DC4A :                     DACINS_KICK_s:
(2)  336/   2DC4A :                             binclude "sound/ins/smpl/kick.wav",$2C       ; dc.b (data)
(2)  336/   2E0FA :                     DACINS_KICK_e:
(2)  337/   2E0FA : (MACRO)              		gSmplData DacIns_Snare,"sound/ins/smpl/snare.wav",0
(2)  337/   2E0FA : =$2E0FA              DACINS_SNARE    label *
(2)  337/   2E0FA : FC0E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  337/   2E0FD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  337/   2E100 :                     DACINS_SNARE_s:
(2)  337/   2E100 :                             binclude "sound/ins/smpl/snare.wav",$2C       ; dc.b (data)
(2)  337/   2EFFC :                     DACINS_SNARE_e:
(2)  338/   2EFFC : (MACRO)              		gSmplData DacIns_Kick_2,"sound/ins/smpl/kick_2.wav",0
(2)  338/   2EFFC : =$2EFFC              DACINS_KICK_2    label *
(2)  338/   2EFFC : 5808 00                     dc.b ((DACINS_KICK_2_e-DACINS_KICK_2_s)&$FF),(((DACINS_KICK_2_e-DACINS_KICK_2_s)>>8)&$FF),(((DACINS_KICK_2_e-DACINS_KICK_2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  338/   2EFFF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  338/   2F002 :                     DACINS_KICK_2_s:
(2)  338/   2F002 :                             binclude "sound/ins/smpl/kick_2.wav",$2C       ; dc.b (data)
(2)  338/   2F85A :                     DACINS_KICK_2_e:
(2)  339/   2F85A : (MACRO)              		gSmplData DacIns_Snare_2,"sound/ins/smpl/snare_2.wav",0
(2)  339/   2F85A : =$2F85A              DACINS_SNARE_2    label *
(2)  339/   2F85A : B321 00                     dc.b ((DACINS_SNARE_2_e-DACINS_SNARE_2_s)&$FF),(((DACINS_SNARE_2_e-DACINS_SNARE_2_s)>>8)&$FF),(((DACINS_SNARE_2_e-DACINS_SNARE_2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  339/   2F85D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  339/   2F860 :                     DACINS_SNARE_2_s:
(2)  339/   2F860 :                             binclude "sound/ins/smpl/snare_2.wav",$2C       ; dc.b (data)
(2)  339/   31A13 :                     DACINS_SNARE_2_e:
(2)  340/   31A13 :                     ; 		gSmplData DacIns_Timpani,"sound/ins/smpl/timpani.wav",0
(2)  341/   31A13 :                     ; 		gSmplData DacIns_wegot_kick,"sound/ins/smpl/wegot_kick.wav",0
(2)  342/   31A13 :                     ; 		gSmplData DacIns_wegot_crash,"sound/ins/smpl/wegot_crash.wav",0
(2)  343/   31A13 :                     
(1)   41/   31A13 :                     		include "game/data/bank_main.asm"
(2)    1/   31A13 :                     ; ===========================================================================
(2)    2/   31A13 :                     ; ----------------------------------------------------------------
(2)    3/   31A13 :                     ; BANK data
(2)    4/   31A13 :                     ; ----------------------------------------------------------------
(2)    5/   31A13 :                     
(2)    6/   31A13 : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/   31A13 :                     
(2)    6/   31A13 :                                     align 2
(2)    6/   31A14 : =$31A14              ASCII_FONT        label *
(2)    6/   31A14 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/   32614 :                                     align 2
(2)    6/   32614 :                     
(2)    7/   32614 : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/   32614 :                     
(2)    7/   32614 :                                     align 2
(2)    7/   32614 : =$32614              ASCII_FONT_W        label *
(2)    7/   32614 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/   33E14 :                                     align 2
(2)    7/   33E14 :                     
(2)    8/   33E14 : (MACRO)              		binclude_dma	Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)    8/   33E14 :                     
(2)    8/   33E14 :                                     align 2
(2)    8/   33E14 : =$33E14              ART_FAIRYDODO        label *
(2)    8/   33E14 :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)    8/   34414 :                                     align 2
(2)    8/   34414 :                     
(2)    9/   34414 : (MACRO)              		binclude_dma	Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)    9/   34414 :                     
(2)    9/   34414 :                                     align 2
(2)    9/   34414 : =$34414              ART_FAIRYMIMI        label *
(2)    9/   34414 :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)    9/   34A14 :                                     align 2
(2)    9/   34A14 :                     
(2)   10/   34A14 : (MACRO)              		binclude_dma	Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   10/   34A14 :                     
(2)   10/   34A14 :                                     align 2
(2)   10/   34A14 : =$34A14              ART_FAIRYFIFI        label *
(2)   10/   34A14 :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   10/   34F94 :                                     align 2
(2)   10/   34F94 :                     
(2)   11/   34F94 :                     
(2)   12/   34F94 :                     ; ----------------------------------------------------------------
(2)   13/   34F94 :                     ; Everything else...
(2)   14/   34F94 :                     ; ----------------------------------------------------------------
(2)   15/   34F94 :                     
(2)   16/   34F94 :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   17/   34FB4 :                     		align 2
(2)   18/   34FB4 :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   19/   34FD8 :                     		align 2
(2)   20/   34FD8 :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   21/   34FFC :                     		align 2
(2)   22/   34FFC :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   23/   35038 :                     		align 2
(2)   24/   35038 :                     
(1)   42/   35038 : (MACRO)              	data_dend DATA_BANK0_e
(1)   42/   35038 : =$30A54              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   42/   35038 :                     
(1)   42/   35038 :                     
(1)   43/   35038 :                     
     383/   35038 :                     
     384/   35038 :                     ; ====================================================================
     385/   35038 :                     ; ----------------------------------------------------------------
     386/   35038 :                     ; Cartridge-ONLY Section, direct label access
     387/   35038 :                     ;
     388/   35038 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     389/   35038 :                     ; ----------------------------------------------------------------
     390/   35038 :                     
     392/   35038 :                     
     393/   35038 :                     ; --------------------------------------------------------
     394/   35038 :                     ; ROM only DMA graphics data
     395/   35038 :                     ; --------------------------------------------------------
     396/   35038 :                     
     397/   35038 :                     		include "game/data/ROM_dma_vdp.asm"
(1)    1/   35038 :                     ; ===========================================================================
(1)    2/   35038 :                     ; ----------------------------------------------------------------
(1)    3/   35038 :                     ; DMA Genesis graphics for Cartridge ONLY
(1)    4/   35038 :                     ; ----------------------------------------------------------------
(1)    5/   35038 :                     		align 2
(1)    6/   35038 :                     ; --------------------------------------------------------
(1)    7/   35038 :                     
     398/   35038 :                     
     399/   35038 :                     ; --------------------------------------------------------
     400/   35038 :                     ; ROM-only 32X data
     401/   35038 :                     ;
     402/   35038 :                     ; In the case of RV bit (during DMA):
     403/   35038 :                     ; Only the PWM samples are protected, everything else
     404/   35038 :                     ; will be trashed.
     405/   35038 :                     ; --------------------------------------------------------
     406/   35038 :                     
     407/ 2035038 :                     		phase CS1+*
     408/ 2035038 :                     ; ------------------------------------------------
     409/ 2035038 :                     		align 4
     410/ 2035038 :                     		include "game/data/mars/objects/list_ROM.asm"	; 3D objects
(1)    1/ 2035038 :                     ; ===========================================================================
(1)    2/ 2035038 :                     ; ----------------------------------------------------------------
(1)    3/ 2035038 :                     ; Special include for the 3D models, ROM-ONLY VERSION
(1)    4/ 2035038 :                     ;
(1)    5/ 2035038 :                     ; THIS CAN'T BE USED ON SCD/CD32X
(1)    6/ 2035038 :                     ; ----------------------------------------------------------------
(1)    7/ 2035038 :                     
(1)    8/ 2035038 :                     ; 		include "game/data/mars/objects/test/head.asm"
(1)    9/ 2035038 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(1)   10/ 2035038 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(1)   11/ 2035038 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(1)   12/ 2035038 :                     
     411/ 2035038 :                     		include "sound/ROM_smpl_pwm.asm"		; PWM samples
(1)    1/ 2035038 :                     ; ===========================================================================
(1)    2/ 2035038 :                     ; -------------------------------------------------------------------
(1)    3/ 2035038 :                     ; GEMA/Nikona PWM instruments on Cartridge ONLY
(1)    4/ 2035038 :                     ;
(1)    5/ 2035038 :                     ; - Samples located here CANNOT be used on CD32X
(1)    6/ 2035038 :                     ; - If the Genesis does DMA that requires the RV bit this
(1)    7/ 2035038 :                     ;   section will get protected ASAP before the DMA starts
(1)    8/ 2035038 :                     ;
(1)    9/ 2035038 :                     ; MACRO:
(1)   10/ 2035038 :                     ; gSmplData Label,"file_path",loop_start
(1)   11/ 2035038 :                     ; Set loop_start to 0 if not using it.
(1)   12/ 2035038 :                     ;
(1)   13/ 2035038 :                     ; BASE C-5 samplerate is 16000hz
(1)   14/ 2035038 :                     ; -------------------------------------------------------------------
(1)   15/ 2035038 :                     
(1)   16/ 2035038 :                     	align 4
(1)   17/ 2035038 :                     	;gSmplData Label,"file_path",loop_start
(1)   18/ 2035038 :                     ; -----------------------------------------------------------
(1)   19/ 2035038 :                     ; 	gSmplData PwmIns_Nadie,"sound/ins/smpl/inga_st.wav",0
(1)   20/ 2035038 : (MACRO)              	gSmplData PwmIns_Piano,"sound/ins/smpl/piano_1.wav",0
(1)   20/ 2035038 : =$2035038            PWMINS_PIANO    label *
(1)   20/ 2035038 : 1647 00                     dc.b ((PWMINS_PIANO_e-PWMINS_PIANO_s)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>8)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   20/ 203503B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   20/ 203503E :                     PWMINS_PIANO_s:
(1)   20/ 203503E :                             binclude "sound/ins/smpl/piano_1.wav",$2C       ; dc.b (data)
(1)   20/ 2039754 :                     PWMINS_PIANO_e:
(1)   21/ 2039754 : (MACRO)              	gSmplData PwmIns_PKick,"sound/ins/smpl/wegot_kick.wav",0
(1)   21/ 2039754 : =$2039754            PWMINS_PKICK    label *
(1)   21/ 2039754 : 7407 00                     dc.b ((PWMINS_PKICK_e-PWMINS_PKICK_s)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>8)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   21/ 2039757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   21/ 203975A :                     PWMINS_PKICK_s:
(1)   21/ 203975A :                             binclude "sound/ins/smpl/wegot_kick.wav",$2C       ; dc.b (data)
(1)   21/ 2039ECE :                     PWMINS_PKICK_e:
(1)   22/ 2039ECE : (MACRO)              	gSmplData PwmIns_PTom,"sound/ins/smpl/sauron_tom.wav",0
(1)   22/ 2039ECE : =$2039ECE            PWMINS_PTOM    label *
(1)   22/ 2039ECE : B40B 00                     dc.b ((PWMINS_PTOM_e-PWMINS_PTOM_s)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>8)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   22/ 2039ED1 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   22/ 2039ED4 :                     PWMINS_PTOM_s:
(1)   22/ 2039ED4 :                             binclude "sound/ins/smpl/sauron_tom.wav",$2C       ; dc.b (data)
(1)   22/ 203AA88 :                     PWMINS_PTOM_e:
(1)   23/ 203AA88 :                     
(1)   24/ 203AA88 : (MACRO)              	gSmplData PwmIns_sxbeats,"sound/ins/smpl/sxbeats.wav",0
(1)   24/ 203AA88 : =$203AA88            PWMINS_SXBEATS    label *
(1)   24/ 203AA88 : 743C 00                     dc.b ((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)&$FF),(((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)>>8)&$FF),(((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   24/ 203AA8B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   24/ 203AA8E :                     PWMINS_SXBEATS_s:
(1)   24/ 203AA8E :                             binclude "sound/ins/smpl/sxbeats.wav",$2C       ; dc.b (data)
(1)   24/ 203E702 :                     PWMINS_SXBEATS_e:
(1)   25/ 203E702 : (MACRO)              	gSmplData PwmIns_sxbeats2,"sound/ins/smpl/sxbeats2.wav",0
(1)   25/ 203E702 : =$203E702            PWMINS_SXBEATS2    label *
(1)   25/ 203E702 : 1A79 00                     dc.b ((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)&$FF),(((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)>>8)&$FF),(((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   25/ 203E705 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   25/ 203E708 :                     PWMINS_SXBEATS2_s:
(1)   25/ 203E708 :                             binclude "sound/ins/smpl/sxbeats2.wav",$2C       ; dc.b (data)
(1)   25/ 2046022 :                     PWMINS_SXBEATS2_e:
(1)   26/ 2046022 : (MACRO)              	gSmplData PwmIns_drumsetA,"sound/ins/smpl/drumsetA.wav",0
(1)   26/ 2046022 : =$2046022            PWMINS_DRUMSETA    label *
(1)   26/ 2046022 : A476 00                     dc.b ((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)&$FF),(((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)>>8)&$FF),(((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   26/ 2046025 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   26/ 2046028 :                     PWMINS_DRUMSETA_s:
(1)   26/ 2046028 :                             binclude "sound/ins/smpl/drumsetA.wav",$2C       ; dc.b (data)
(1)   26/ 204D6CC :                     PWMINS_DRUMSETA_e:
(1)   27/ 204D6CC :                     
(1)   28/ 204D6CC : (MACRO)               	gSmplData PwmIns_sauron_01,"sound/ins/smpl/sauron/01.wav",0
(1)   28/ 204D6CC : =$204D6CC            PWMINS_SAURON_01    label *
(1)   28/ 204D6CC : 040F 00                     dc.b ((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)&$FF),(((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)>>8)&$FF),(((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   28/ 204D6CF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   28/ 204D6D2 :                     PWMINS_SAURON_01_s:
(1)   28/ 204D6D2 :                             binclude "sound/ins/smpl/sauron/01.wav",$2C       ; dc.b (data)
(1)   28/ 204E5D6 :                     PWMINS_SAURON_01_e:
(1)   29/ 204E5D6 : (MACRO)               	gSmplData PwmIns_sauron_02,"sound/ins/smpl/sauron/02.wav",0
(1)   29/ 204E5D6 : =$204E5D6            PWMINS_SAURON_02    label *
(1)   29/ 204E5D6 : 6E0C 00                     dc.b ((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)&$FF),(((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)>>8)&$FF),(((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   29/ 204E5D9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   29/ 204E5DC :                     PWMINS_SAURON_02_s:
(1)   29/ 204E5DC :                             binclude "sound/ins/smpl/sauron/02.wav",$2C       ; dc.b (data)
(1)   29/ 204F24A :                     PWMINS_SAURON_02_e:
(1)   30/ 204F24A : (MACRO)                	gSmplData PwmIns_sauron_03,"sound/ins/smpl/sauron/03.wav",0
(1)   30/ 204F24A : =$204F24A            PWMINS_SAURON_03    label *
(1)   30/ 204F24A : C80C 00                     dc.b ((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)&$FF),(((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)>>8)&$FF),(((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   30/ 204F24D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   30/ 204F250 :                     PWMINS_SAURON_03_s:
(1)   30/ 204F250 :                             binclude "sound/ins/smpl/sauron/03.wav",$2C       ; dc.b (data)
(1)   30/ 204FF18 :                     PWMINS_SAURON_03_e:
(1)   31/ 204FF18 : (MACRO)                	gSmplData PwmIns_sauron_04,"sound/ins/smpl/sauron/04.wav",0
(1)   31/ 204FF18 : =$204FF18            PWMINS_SAURON_04    label *
(1)   31/ 204FF18 : DE23 00                     dc.b ((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)&$FF),(((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)>>8)&$FF),(((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   31/ 204FF1B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   31/ 204FF1E :                     PWMINS_SAURON_04_s:
(1)   31/ 204FF1E :                             binclude "sound/ins/smpl/sauron/04.wav",$2C       ; dc.b (data)
(1)   31/ 20522FC :                     PWMINS_SAURON_04_e:
(1)   32/ 20522FC : (MACRO)               	gSmplData PwmIns_sauron_05,"sound/ins/smpl/sauron/05.wav",13988
(1)   32/ 20522FC : =$20522FC            PWMINS_SAURON_05    label *
(1)   32/ 20522FC : B24D 00                     dc.b ((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)&$FF),(((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)>>8)&$FF),(((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   32/ 20522FF : A436 00                     dc.b ((13988)&$FF),(((13988)>>8)&$FF),(((13988)>>16)&$FF)                                  ; dc.b 4,5,6 Start 13988
(1)   32/ 2052302 :                     PWMINS_SAURON_05_s:
(1)   32/ 2052302 :                             binclude "sound/ins/smpl/sauron/05.wav",$2C       ; dc.b (data)
(1)   32/ 20570B4 :                     PWMINS_SAURON_05_e:
(1)   33/ 20570B4 : (MACRO)                	gSmplData PwmIns_sauron_06,"sound/ins/smpl/sauron/06.wav",0
(1)   33/ 20570B4 : =$20570B4            PWMINS_SAURON_06    label *
(1)   33/ 20570B4 : 8825 00                     dc.b ((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)&$FF),(((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)>>8)&$FF),(((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   33/ 20570B7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   33/ 20570BA :                     PWMINS_SAURON_06_s:
(1)   33/ 20570BA :                             binclude "sound/ins/smpl/sauron/06.wav",$2C       ; dc.b (data)
(1)   33/ 2059642 :                     PWMINS_SAURON_06_e:
(1)   34/ 2059642 : (MACRO)               	gSmplData PwmIns_sauron_07,"sound/ins/smpl/sauron/07.wav",0
(1)   34/ 2059642 : =$2059642            PWMINS_SAURON_07    label *
(1)   34/ 2059642 : 9233 00                     dc.b ((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)&$FF),(((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)>>8)&$FF),(((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   34/ 2059645 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   34/ 2059648 :                     PWMINS_SAURON_07_s:
(1)   34/ 2059648 :                             binclude "sound/ins/smpl/sauron/07.wav",$2C       ; dc.b (data)
(1)   34/ 205C9DA :                     PWMINS_SAURON_07_e:
(1)   35/ 205C9DA : (MACRO)                	gSmplData PwmIns_sauron_08,"sound/ins/smpl/sauron/08.wav",0
(1)   35/ 205C9DA : =$205C9DA            PWMINS_SAURON_08    label *
(1)   35/ 205C9DA : 0E1D 00                     dc.b ((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)&$FF),(((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)>>8)&$FF),(((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   35/ 205C9DD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   35/ 205C9E0 :                     PWMINS_SAURON_08_s:
(1)   35/ 205C9E0 :                             binclude "sound/ins/smpl/sauron/08.wav",$2C       ; dc.b (data)
(1)   35/ 205E6EE :                     PWMINS_SAURON_08_e:
(1)   36/ 205E6EE : (MACRO)               	gSmplData PwmIns_sauron_09,"sound/ins/smpl/sauron/09.wav",0
(1)   36/ 205E6EE : =$205E6EE            PWMINS_SAURON_09    label *
(1)   36/ 205E6EE : C41E 00                     dc.b ((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)&$FF),(((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)>>8)&$FF),(((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   36/ 205E6F1 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   36/ 205E6F4 :                     PWMINS_SAURON_09_s:
(1)   36/ 205E6F4 :                             binclude "sound/ins/smpl/sauron/09.wav",$2C       ; dc.b (data)
(1)   36/ 20605B8 :                     PWMINS_SAURON_09_e:
(1)   37/ 20605B8 : (MACRO)                	gSmplData PwmIns_sauron_10,"sound/ins/smpl/sauron/10.wav",0
(1)   37/ 20605B8 : =$20605B8            PWMINS_SAURON_10    label *
(1)   37/ 20605B8 : 4238 00                     dc.b ((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)&$FF),(((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)>>8)&$FF),(((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   37/ 20605BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   37/ 20605BE :                     PWMINS_SAURON_10_s:
(1)   37/ 20605BE :                             binclude "sound/ins/smpl/sauron/10.wav",$2C       ; dc.b (data)
(1)   37/ 2063E00 :                     PWMINS_SAURON_10_e:
(1)   38/ 2063E00 : (MACRO)               	gSmplData PwmIns_sauron_11,"sound/ins/smpl/sauron/11.wav",0
(1)   38/ 2063E00 : =$2063E00            PWMINS_SAURON_11    label *
(1)   38/ 2063E00 : 743D 00                     dc.b ((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)&$FF),(((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)>>8)&$FF),(((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   38/ 2063E03 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   38/ 2063E06 :                     PWMINS_SAURON_11_s:
(1)   38/ 2063E06 :                             binclude "sound/ins/smpl/sauron/11.wav",$2C       ; dc.b (data)
(1)   38/ 2067B7A :                     PWMINS_SAURON_11_e:
(1)   39/ 2067B7A : (MACRO)               	gSmplData PwmIns_sauron_12,"sound/ins/smpl/sauron/12.wav",0
(1)   39/ 2067B7A : =$2067B7A            PWMINS_SAURON_12    label *
(1)   39/ 2067B7A : F217 00                     dc.b ((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)&$FF),(((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)>>8)&$FF),(((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   39/ 2067B7D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   39/ 2067B80 :                     PWMINS_SAURON_12_s:
(1)   39/ 2067B80 :                             binclude "sound/ins/smpl/sauron/12.wav",$2C       ; dc.b (data)
(1)   39/ 2069372 :                     PWMINS_SAURON_12_e:
(1)   40/ 2069372 :                     
     412/ 2069372 :                     ; ------------------------------------------------
     413/   69372 :                     		dephase
     414/   69372 :                     
     415/   69372 :                     ; ----------------------------------------------------------------
     416/   69372 :                     
     418/   69372 :                     
     419/   69372 :                     ; ====================================================================
     420/   69372 :                     ; ------------------------------------------------
     421/   69372 :                     ; End
     422/   69372 :                     ; ------------------------------------------------
     423/   69372 :                     
     424/   69372 :                     ROM_END:
     425/   69372 : 00                  		dc.b 0
     426/   69373 :                     		align $8000
     427/   70000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 12/02/2024 11:55:36 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - | *ARCHITECTURE :      "x86_64-Linux" - |
 ARP :                           2C - |  ART_FAIRYDODO :              33E14 C |
 ART_FAIRYFIFI :              34A14 C |  ART_FAIRYMIMI :              34414 C |
 ASCII_FONT :                 31A14 C |  ASCII_FONT_W :               32614 C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - | *BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                    1F82 C |
 CDRAMLEN :                    1F87 C |  CDRAMSRC :                    1F84 C |
 CDRAMSRCB :                   1F86 C |  CHIP_ENV :                    1061 C |
 CHIP_ENV.ATKEND :             10E4 C | *CHIP_ENV.ATKZERO :            10E7 C |
 CHIP_ENV.CHK2 :               10ED C |  CHIP_ENV.CHK4 :               1122 C |
 CHIP_ENV.CKOF :               1085 C |  CHIP_ENV.CKON :               1098 C |
*CHIP_ENV.DECTMR :             10F1 C |  CHIP_ENV.DKADD :              110B C |
 CHIP_ENV.DKSAV :              1113 C |  CHIP_ENV.DKYEND :             1118 C |
 CHIP_ENV.DO_NFREQ :           1177 C |  CHIP_ENV.ENVPROC :            10B6 C |
 CHIP_ENV.KILLENV :            1138 C | *CHIP_ENV.NBLOCK :             10B6 C |
 CHIP_ENV.NORMAL :             1172 C |  CHIP_ENV.NOUPD :              11B8 C |
 CHIP_ENV.NSKIP :              10AD C |  CHIP_ENV.SILNC_3 :            116E C |
 CHIP_ENV.VEDLP :              1140 C |  CHIP_ENV.VLMUCH :             11A4 C |
 CHIP_ENV.VLOOP :              106D C |  CHIP_ENV.VONLY :              119A C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                   1F60 C |
 COMMZREAD :                     2E C |  COMMZROMBLK :                 1F81 C |
 COMMZWRITE :                  1F80 C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFD8F8 - |
*CONTROLLER_2 :    FFFFFFFFFFFFD908 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CURRTICKBITS :                1CF9 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_DRUMSETA :            2659A C | *DACINS_KICK :                2DC44 C |
 DACINS_KICK_2 :              2EFFC C | *DACINS_SNARE :               2E0FA C |
 DACINS_SNARE_2 :             2F85A C | *DACINS_SXBEATS :             1B000 C |
*DACINS_SXBEATS2 :            1EC7A C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     11F3 C |
 DAC_ON :                      11DE C |  DAC_PLAY :                    1208 C |
 DAC_REFILL :                  123C C |  DAC_REFILL.DACFILL_END :      12FB C |
 DAC_REFILL.DACFILL_LOOP :     12B4 C |  DAC_REFILL.DACFILL_RET :      12FE C |
 DAC_REFILL.DAC_OVER :         128A C |  DATA_BANK0 :                  45E4 C |
*DATE :                "12/02/2024" - |  DDACCNTR :                    17AC C |
 DDACFIFOMID :                   37 C |  DDACPNTR :                    17A9 C |
*DEF_HSIZE_128 :                100 - | *DEF_HSIZE_32 :                  40 - |
 DEF_HSIZE_64 :                  80 - | *DEF_MAXSTAMPCOUT :              60 - |
 DEF_PRINTPAL :                6000 - |  DEF_PRINTVRAM :                5A0 - |
 DEF_PRINTVRAMW :               4E0 - | *DEF_SAVEINFO :                19B0 C |
 DEF_VRAM_BG :                 E000 - |  DEF_VRAM_FG :                 C000 - |
 DEF_VRAM_HSCRL :              FC00 - |  DEF_VRAM_SPR :                F800 - |
 DEF_VRAM_WD :                 D000 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      41 C |
 DRV_LOOP.CMND_0 :               D9 C |  DRV_LOOP.CMND_1 :               DC C |
 DRV_LOOP.CMND_2 :               F5 C |  DRV_LOOP.CMND_3 :              12F C |
 DRV_LOOP.CMND_5 :              16D C |  DRV_LOOP.CMND_6 :              1A6 C |
 DRV_LOOP.CMND_7 :              1DF C |  DRV_LOOP.CMND_RDSLOT :         1FD C |
 DRV_LOOP.DEL_ALL :             166 C |  DRV_LOOP.GETCBYTEL :            AC C |
 DRV_LOOP.GRAB_ARG :             AA C |  DRV_LOOP.LIST :                 C9 C |
 DRV_LOOP.NEITHER :              82 C |  DRV_LOOP.NEXT_CMD :             87 C |
 DRV_LOOP.NOBEATS :              68 C |  DRV_LOOP.NOTICKS :              5B C |
 DRV_LOOP.NOT_PAL :             1F2 C |  DRV_LOOP.SRCH_DEL :            14D C |
 DRV_LOOP.SRCH_FVOL :           18B C |  DRV_LOOP.SRCH_MODE :           115 C |
 DRV_LOOP.SRCH_SLOT :           20F C |  DRV_LOOP.SRCH_VOL :            1C4 C |
 DRV_LOOP.WRTTO_DEL :           15A C |  DRV_LOOP.WRTTO_FVOL :          198 C |
 DRV_LOOP.WRTTO_SLOT :          124 C |  DRV_LOOP.WRTTO_VOL :           1D1 C |
 DTBL_MULTI :                   7EC C |  DTBL_SINGL :                   800 C |
 DTBL_SINGL.CHNL_ULNK :         EFE C |  DTBL_SINGL.COMN_PANLIST :      CEB C |
 DTBL_SINGL.DAC_CUT :           BCC C |  DTBL_SINGL.DAC_OFF :           BD2 C |
 DTBL_SINGL.DAC_PROC :          BD8 C |  DTBL_SINGL.D_DOWN :            C6F C |
 DTBL_SINGL.D_DOWNHF :          C6A C |  DTBL_SINGL.D_UP :              C61 C |
*DTBL_SINGL.D_UPHF :            C5E C |  DTBL_SINGL.EFFC :              C28 C |
 DTBL_SINGL.EFFC_D :            C43 C |  DTBL_SINGL.EFFC_E :            C7C C |
 DTBL_SINGL.EFFC_F :            C8B C |  DTBL_SINGL.EFFC_X :            C9C C |
 DTBL_SINGL.FM_CINDX :          B9A C |  DTBL_SINGL.FM_CLRRSAVE :       A82 C |
 DTBL_SINGL.FM_CUT :            A57 C |  DTBL_SINGL.FM_HASVOL :         EBC C |
 DTBL_SINGL.FM_KEYOFF :         A63 C |  DTBL_SINGL.FM_OFF :            A4E C |
 DTBL_SINGL.FM_TLOFF :          A6B C |  DTBL_SINGL.FND_OCT :           EED C |
 DTBL_SINGL.FNOT_PAL :          979 C |  DTBL_SINGL.GET_FMCACH :        BA2 C |
 DTBL_SINGL.GET_OCT :           EE3 C |  DTBL_SINGL.INST :              D1C C |
 DTBL_SINGL.INS_DAC :           DD9 C |  DTBL_SINGL.INS_FM :            D7D C |
 DTBL_SINGL.INS_PCM :           E2D C |  DTBL_SINGL.INS_PSG :           D47 C |
 DTBL_SINGL.INS_PSGN :          D41 C |  DTBL_SINGL.INS_PWM :           E6A C |
*DTBL_SINGL.INVL_INS :          D40 C |  DTBL_SINGL.KEEP_TLMX :         B84 C |
 DTBL_SINGL.KYCUT_PSG :         917 C | *DTBL_SINGL.KYCUT_PSGN :        914 C |
 DTBL_SINGL.KYOFF_PSG :         90B C | *DTBL_SINGL.KYOFF_PSGN :        908 C |
 DTBL_SINGL.KYPSGN_HATOFF :     920 C |  DTBL_SINGL.LINKED :            86A C |
 DTBL_SINGL.MKFM_PROC :         9B4 C |  DTBL_SINGL.MKFM_SET :          A99 C |
 DTBL_SINGL.MKFM_TLVOL :        B2B C |  DTBL_SINGL.MKFM_WREGS :        B02 C |
 DTBL_SINGL.MK_DAC :            BB2 C |  DTBL_SINGL.MK_FM :             97A C |
 DTBL_SINGL.MK_FM_SP :          9FE C |  DTBL_SINGL.MK_LIST :           8B9 C |
 DTBL_SINGL.MK_PCM :            C08 C |  DTBL_SINGL.MK_PSG :            8C7 C |
 DTBL_SINGL.MK_PWM :            C09 C |  DTBL_SINGL.NEW_ROMDAT :        DC3 C |
 DTBL_SINGL.NOTE :              EB2 C |  DTBL_SINGL.NOT_DAC :           99F C |
 DTBL_SINGL.NOT_NS :            903 C |  DTBL_SINGL.NOT_PAL :           9D2 C |
 DTBL_SINGL.NO_LFO :            AF7 C |  DTBL_SINGL.NO_REQ :            944 C |
 DTBL_SINGL.N_FM :              ED9 C | *DTBL_SINGL.N_INDX :            ECE C |
*DTBL_SINGL.N_STFREQ :          ECF C |  DTBL_SINGL.PAN_MCD :           CC8 C |
 DTBL_SINGL.PCM_PANLIST :       CF3 C |  DTBL_SINGL.PSGC_KEYON :        92E C |
 DTBL_SINGL.PSGC_PROC :         927 C |  DTBL_SINGL.PSG_GETFREQ :       965 C |
 DTBL_SINGL.PSG_KEYON :         94A C |  DTBL_SINGL.RCYL_COM :          85D C |
*DTBL_SINGL.READFREQ_PCM :      C0A C | *DTBL_SINGL.READFREQ_PWM :      C0F C |
 DTBL_SINGL.RESET_EFFC :        8AC C |  DTBL_SINGL.RES_PAN :           CBE C |
 DTBL_SINGL.SAME_PATCH :        DD4 C |  DTBL_SINGL.SETEFU_D :          C63 C |
 DTBL_SINGL.SETEF_D :           C73 C |  DTBL_SINGL.SETEF_MCD :         C78 C |
 DTBL_SINGL.SET_WAVFREQ :       C12 C |  DTBL_SINGL.SILN_DAC :          861 C |
 DTBL_SINGL.SILN_FM :           864 C |  DTBL_SINGL.SILN_PCM :          843 C |
 DTBL_SINGL.SILN_PSG :          83D C |  DTBL_SINGL.SILN_PSG_N :        839 C |
 DTBL_SINGL.SILN_PWM :          854 C |  DTBL_SINGL.THIS_REGS :         A46 C |
 DTBL_SINGL.TL_DOWN :           A77 C |  DTBL_SINGL.VMUCH :             95F C |
 DTBL_SINGL.VOLU :              D13 C |  DTBL_SINGL.WRITE_NTL :         B8F C |
 DTBL_SINGL.WRITE_TL :          B7D C |  DTBL_SINGL.WRT_EF :            C96 C |
 DTBL_SINGL.WR_SPC :            A28 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EFFV :                          34 - |  EMU :                            1 - |
 EXTINT_DEFAULT :              16E6 C |  EXT_3 :                          C - |
*EXT_4 :                          E - |  FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    155A C |  FMCACH_2 :                    1582 C |
 FMCACH_3 :                    15AA C |  FMCACH_4 :                    15D2 C |
 FMCACH_5 :                    15FA C |  FMCACH_6 :                    1622 C |
 FMCACH_LIST :                 179B C |  FMFREQ_LIST :                 130C C |
*FMINS_BASS_BIG_110 :         19FBB C | *FMINS_BASS_BIG_114 :         19FDB C |
*FMINS_BASS_BIG_122 :         19FFB C | *FMINS_BASS_BIG_81 :          19F9B C |
*FMINS_BASS_CAVE_47 :         1A01B C | *FMINS_BASS_CLUB :            1A8DB C |
 FMINS_BASS_CLUB_108 :        1A03B C | *FMINS_BASS_DUCK :            1A87B C |
*FMINS_BASS_FOOT_75 :         1A05B C | *FMINS_BASS_GEM_26 :          1A07B C |
 FMINS_BASS_GROOVE_1 :        1A13B C | *FMINS_BASS_GROOVE_119 :      1A09B C |
*FMINS_BASS_GROOVE_2 :        1A8FB C | *FMINS_BASS_HEAVY_107 :       1A0BB C |
*FMINS_BASS_HEAVY_118 :       1A0DB C | *FMINS_BASS_ITALO :           1A99B C |
*FMINS_BASS_LOUD_117 :        1A0FB C | *FMINS_BASS_LOW81 :           1A41B C |
*FMINS_BASS_LOW_103 :         1A17B C | *FMINS_BASS_LOW_106 :         1A19B C |
*FMINS_BASS_LOW_126 :         1A1BB C | *FMINS_BASS_LOW_46 :          1A11B C |
*FMINS_BASS_LOW_81 :          1A15B C | *FMINS_BASS_MID_111 :         1A21B C |
*FMINS_BASS_MID_19 :          1A1DB C | *FMINS_BASS_MID_80 :          1A1FB C |
*FMINS_BASS_POWER_123 :       1A23B C | *FMINS_BASS_SILENT_53 :       1A25B C |
*FMINS_BASS_SLAP_10 :         1A27B C | *FMINS_BASS_SLAP_105 :        1A29B C |
*FMINS_BASS_SYNTH_60 :        1A2BB C | *FMINS_BASS_SYNTH_61 :        1A2DB C |
*FMINS_BASS_SYNTH_72 :        1A2FB C | *FMINS_BASS_SYNTH_73 :        1A31B C |
*FMINS_BASS_VLOW_74 :         1A33B C | *FMINS_BELL_62 :              1A4DB C |
*FMINS_BELL_93 :              1A4FB C |  FMINS_BELL_LOW13 :           1A51B C |
*FMINS_BELL_MID36 :           1A4BB C | *FMINS_BRASS_7 :              1A93B C |
*FMINS_CLOSEDHAT :            1A89B C | *FMINS_DRUMS_KICK1 :          1A7FB C |
*FMINS_DRUM_KICK :            1A53B C | *FMINS_FLAUTE_1 :             1A37B C |
*FMINS_FLAUTE_2 :             1A39B C |  FMINS_GUITAR_BBALL :         1A9BB C |
 FMINS_HATS_1 :               1A49B C | *FMINS_HBEAT_TOM :            1A83B C |
 FMINS_ORGAN_DRAWBAR :        1A35B C | *FMINS_PIANO_AQUA :           1A81B C |
*FMINS_PSYNTH_PLUS :          1A91B C | *FMINS_SFX_ALIEN1 :           1A743 C |
*FMINS_SFX_ALIEN2 :           1A763 C |  FMINS_SFX_EXPLODE :          1A703 C |
*FMINS_SFX_PUNCH :            1A6E3 C | *FMINS_SFX_PUNCH_2 :          1A95B C |
*FMINS_SFX_SLASH :            1A723 C |  FMINS_SFX_SMASH :            1A97B C |
*FMINS_SP_CLOSEDHAT :         1A7AB C | *FMINS_SP_COWBELL :           1A7D3 C |
 FMINS_SP_OPENHAT :           1A783 C | *FMINS_TICK :                 1A55B C |
 FMINS_TRUMPET_1 :            1A85B C |  FMINS_TRUMPET_BUS :          1A47B C |
 FMINS_TRUMPET_CARNIVAL :     1A8BB C | *FMINS_TRUMPET_GENIE :        1A45B C |
*FMINS_TRUMPET_LOW :          1A43B C |  FMINS_VIBRAPHONE_1 :         1A3BB C |
*FMINS_VIBRAPHONE_2 :         1A3DB C | *FMINS_XYLOPHONE :            1A3FB C |
 FMLIST_RSAVE :                164A C |  FMSPECIAL :                     30 C |
*FMSPINS_CLACK_1 :            1A57B C | *FMSPINS_COWBELL_H :          1A5A3 C |
*FMSPINS_COWBELL_L :          1A5CB C | *FMSPINS_HATS_HQ :            1A5F3 C |
*FMSPINS_SFX_ALIEN :          1A61B C | *FMSPINS_SFX_KNCKBUZZ :       1A643 C |
*FMSPINS_SFX_KNOCK_H :        1A66B C | *FMSPINS_SFX_KNOCK_L :        1A693 C |
*FMSPINS_SFX_LASER :          1A6BB C |  FM_AUTOREG :                  11C4 C |
 FM_SEND_1 :                   11C8 C |  FM_SEND_2 :                   11D3 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 344 C |
 GEMADMARESUME :                346 C | *GEMAFADESEQ :                  3C0 C |
 GEMAINIT :                     278 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :                  360 C | *GEMAPLAYSEQAUTO :              376 C |
 GEMARESET :                    278 C |  GEMASENDRAM :                  290 C |
 GEMASENDRAM.COPY_BYTES :       2CE C |  GEMASENDRAM.NO_SIZE :          2DC C |
 GEMASENDRAM.NO_TASK :          2E2 C |  GEMASETBEATS :                 3F8 C |
 GEMASETMASTERLIST :            352 C | *GEMASETSEQVOL :                3DC C |
 GEMASTOPALL :                  3A6 C |  GEMASTOPSEQ :                  390 C |
*GEMATEST :                     348 C |  GEMA_INIT :                    F15 C |
 GEMA_INIT.END_SETUP :          F56 C |  GEMA_INIT.SETUP_LIST :         F2B C |
 GEMA_INIT.ST_COPY :            F4A C |  GEMA_LASTBANK :               1302 C |
 GEMA_LASTBANK.WRITE :         1307 C |  GET_TICK :                     F87 C |
 GET_TICK.CTNOTICK :            FA4 C |  GLBL_LASTORG :    FFFFFFFFFFFFB800 - |
 GLBL_LASTPC :                 3D2A - | *GLBL_MDATA_RP :              30A54 - |
 GLBL_MDATA_ST :               45E4 - |  GTRK_SFXALL :                 4624 C |
 GTRK_SFXALL.BLK :             4632 C |  GTRK_SFXALL.INS :             46DF C |
 GTRK_SFXALL.PAT :             4636 C |  GTRK_TEST0 :                  46FF C |
 GTRK_TEST0.BLK :              470D C |  GTRK_TEST0.INS :              51E5 C |
 GTRK_TEST0.PAT :              4712 C |  GTRK_TEST1 :                  5225 C |
 GTRK_TEST1.BLK :              5233 C |  GTRK_TEST1.INS :              61C9 C |
 GTRK_TEST1.PAT :              5258 C |  GTRK_TEST2 :                  6231 C |
 GTRK_TEST2.BLK :              623F C |  GTRK_TEST2.INS :             122CD C |
 GTRK_TEST2.PAT :              6262 C |  GTRK_TEST3 :                 12355 C |
 GTRK_TEST3.BLK :             12363 C |  GTRK_TEST3.INS :             19F13 C |
 GTRK_TEST3.PAT :             12374 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
 HEADEROUT :                   17AF C |  HEADEROUT_E :                 17BD C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                16E4 C | *HIRQ_ON :                        4 - |
 HTAG_CDSAVE :        "NIKONACD___" - | *HTAG_CDVER :                   102 - |
 HTAG_DATEINFO : "(C)GF64 2024.???" - | *HTAG_DISCID :        "NIKONACD   " - |
*HTAG_DISCID_M :      "NIKONACD32X" - | *HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
 HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
 HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
*HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
*HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
 HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 17C5 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - | *MACEXP :                         7 - |
 MAINGEMASEQLIST :             45E4 C |  MARS :                           0 - |
*MARSBLOCK :                   1F8A C |  MARSCD :                         0 - |
 MARSUPD :                     17A1 C | *MARS_RAMCODE :                3C5C C |
*MARS_RAMCODE_E :              3C5C C |  MAX_BUFFNTRY :                   8 - |
 MAX_GLOBALS :                  800 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDMAPSPR :                  18 - |  MAX_MDOBJ :                     28 - |
 MAX_PALFDREQ :                   8 - |  MAX_RCACH :                     20 - |
*MAX_SC0_OPTIONS :                4 - |  MAX_SCRNBUFF :                1000 - |
 MAX_SLOTS :                      3 - | *MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   12 - |  MAX_TRFRPZ :                     9 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     20 - |
 MCD :                            0 - | *MCDBLOCK :                    1F89 C |
 MCDUPD :                      17A2 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MEMORY :                     3 - |
*MDSTMP_BUFFINCR :               1A - | *MDSTMP_CELLSTORAGE :            12 - |
*MDSTMP_CURROUTFLIP :             E - | *MDSTMP_DOTINCR :                16 - |
*MDSTMP_FDROP :                  10 - | *MDSTMP_FLAGS :                   0 - |
*MDSTMP_LEN :                    1E - | *MDSTMP_STMPOUTB :                C - |
*MDSTMP_VRAMINCR :                A - | *MDSTMP_VRAMLEN :                 8 - |
*MDSTMP_VRAMMAIN :                2 - | *MDSTMP_VRAMSEC :                 4 - |
*MDSTMP_VRAMSIZE :                6 - | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :                1C34 C |  MD_READMODES.PICK_MODE :      1C50 C |
 MD_SCREEN00 :                 3C5C C | *MD_SCREEN00_E :               3D2A C |
 MD_SCREEN07 :                 3D2A C | *MD_SCREEN07_E :               45E4 C |
*MD_SYSCODE_E :                1CD0 C |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - |  MVOL :                          30 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             17CD C |
*NIKONA_BUFFLIST_E :           17E5 C |  OBJECT_ANIMATE :              1AAA C |
 OBJECT_ANIMATE.EXIT_ANIM :    1B38 C |  OBJECT_ANIMATE.GOTOFRAME :    1B2A C |
 OBJECT_ANIMATE.KEEPSPD :      1AF0 C |  OBJECT_ANIMATE.LASTFRAME :    1B34 C |
 OBJECT_ANIMATE.NOANIM :       1B1C C |  OBJECT_ANIMATE.RETURN :       1B1A C |
 OBJECT_ANIMATE.SAMETHING :    1AC8 C |  OBJECT_INIT :                 19C6 C |
 OBJECT_INIT.CLR :             19CE C |  OBJECT_MAKE :                 1A08 C |
 OBJECT_MAKE.SEARCH :          1A16 C | *OBJECT_MDMARS_GETSPRINFO :    1C32 C |
 OBJECT_RESETANIM :            1A72 C | *OBJECT_RESETVARS :            1A58 C |
 OBJECT_RESETVARS.CLR_RAM :    1A66 C |  OBJECT_RUN :                  19D6 C |
 OBJECT_RUN.NEXT_ONE :         19DE C |  OBJECT_RUN.NO_CODE :          19EA C |
*OBJECT_SET :                  19F4 C | *OBJECT_SPEED :                1A7A C |
*OBJECT_TOUCH :                1B3E C |  OBJECT_TOUCH.CHECK_THIS :     1B74 C |
 OBJECT_TOUCH.EXIT_THIS :      1B6E C |  OBJECT_TOUCH.NEXT :           1B56 C |
 OBJECT_TOUCH.NOT_YTOP :       1C30 C |  OBJECT_TOUCH.SET_OK :         1C2E C |
 OBJECT_TOUCH.SKIP :           1B64 C |  OBJMAP_DODO :                34FB4 C |
 OBJMAP_FIFI :                34FFC C |  OBJMAP_MIMI :                34FD8 C |
 OBJPAL_DODO :                34F94 C |  OBJSET_ERROR :                1A2A C |
 OBJSET_GO :                   1A34 C |  OBJSET_GO.CLR :               1A48 C |
 OBJSET_GO.EXIT_THIS :         1A4E C |  OBJSET_GO.FROM_DEL :          1A42 C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
*OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ON_HOLD :                        2 - |
 ON_PRESS :                       4 - |  ON_RELEASE :                     6 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*PAD_ID :                         0 - | *PAD_VER :                        1 - |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMODE :                     1F88 C |  PCMCOM :                      14A6 C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.PALCLEAR :          254 C |  PICO_ENTRY.WAIT_DMA :          23E C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
*PICO_USERINT :                 202 C |  PSGCOM :                      151E C |
 PSGFREQ_LIST :                1324 C |  PSGHATMODE :                    2F C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PWMCOM :                      14E6 C | *PWMCTL :                        31 - |
*PWMINS_DRUMSETA :          2046022 C | *PWMINS_PIANO :             2035038 C |
*PWMINS_PKICK :             2039754 C | *PWMINS_PTOM :              2039ECE C |
*PWMINS_SAURON_01 :         204D6CC C | *PWMINS_SAURON_02 :         204E5D6 C |
*PWMINS_SAURON_03 :         204F24A C | *PWMINS_SAURON_04 :         204FF18 C |
*PWMINS_SAURON_05 :         20522FC C | *PWMINS_SAURON_06 :         20570B4 C |
*PWMINS_SAURON_07 :         2059642 C | *PWMINS_SAURON_08 :         205C9DA C |
*PWMINS_SAURON_09 :         205E6EE C | *PWMINS_SAURON_10 :         20605B8 C |
*PWMINS_SAURON_11 :         2063E00 C | *PWMINS_SAURON_12 :         2067B7A C |
*PWMINS_SXBEATS :           203AA88 C | *PWMINS_SXBEATS2 :          203E702 C |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFE98C C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFD7DC C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFE986 C |  RAM_HORSCROLL :   FFFFFFFFFFFFCC40 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFD7E0 C |  RAM_INPUTDATA :   FFFFFFFFFFFFD8F8 C |
*RAM_MCDEXIT :     FFFFFFFFFFFFE998 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFD7F8 C |  RAM_MDVIDCLR_E :  FFFFFFFFFFFFD658 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFC800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJECTS :     FFFFFFFFFFFFD938 C |  RAM_PALETTE :     FFFFFFFFFFFFD550 C |
 RAM_PALETTEFADE : FFFFFFFFFFFFD5D0 C |  RAM_PALFADELIST : FFFFFFFFFFFFC800 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFD7F8 C | *RAM_SAVEENABLE :  FFFFFFFFFFFFE992 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFD7FC C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFD7F8 C |  RAM_SCREENMODE :  FFFFFFFFFFFFE994 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFE996 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFD050 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFD7E2 C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFC840 C |  RAM_SPROFFSETX :  FFFFFFFFFFFFD654 C |
 RAM_SPROFFSETY :  FFFFFFFFFFFFD656 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFC9C0 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDOM :   FFFFFFFFFFFFE97C C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFE978 C | *RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
*RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFE980 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFD650 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFD65C C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFD652 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFD7EE C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFD7F0 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFD7F2 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFD7F4 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFD7F6 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFD7E6 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFD7E4 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFD7EC C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFD7EA C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFD7E8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFD000 C |  RAM_ZCDFLAGD :            FFFFFF00 - |
*RCHWIDTH :                      36 - |  READROM :                      FA8 C |
 READROM.DOUBLE :               FCB C |  READROM.FROM_RAM :             FEF C |
 READROM.TRANSFER :            100F C |  READROM.WAIT :                1006 C |
 READROM.X68KLAST :            1048 C |  READROM.X68KLOOP :            1034 C |
 READROM.X68KLPWT :            1056 C |  READROM.X68KNOCARRY :          FE9 C |
*RELAXED :                        0 - | *RES :                            2 - |
 ROM_END :                    69372 C |  RRT :                           14 - |
 SAMPLEHEAD :                  17BF C |  SBEATACC :                      31 C |
 SBEATPTCK :                     33 C |  SEQ_BANKBLK :                   16 - |
 SEQ_BANKHEADS :                 15 - |  SEQ_BLOCKS :                     4 - |
 SEQ_CACH :                       8 - |  SEQ_CACHHALF :                  10 - |
 SEQ_CHNINDX :                   25 - |  SEQ_CURRBLK :                   13 - |
 SEQ_MAXCHNL :                   17 - |  SEQ_NUM :                        1 - |
 SEQ_PATT :                       6 - |  SEQ_PRIORITY :                  14 - |
 SEQ_READ :                       A - |  SEQ_ROMBLKS :                   22 - |
 SEQ_ROMINST :                   1F - |  SEQ_ROMPATT :                   1C - |
 SEQ_ROMPATTREAD :               19 - |  SEQ_ROWPAUSE :                  11 - |
 SEQ_ROWS :                       C - |  SEQ_SETBLK :                     2 - |
 SEQ_STATUS :                     0 - |  SEQ_TICKSET :                    3 - |
 SEQ_TICKTMR :                   12 - |  SEQ_VOLFDTARGET :               18 - |
 SEQ_VOLMASTER :                  E - |  SET_CHIPS :                    5FE C |
*SET_DEBUGMODE :                  0 - | *SET_DEFAUTODMA :               480 - |
 SET_INITMODE :                   0 - |  SET_NULLVRAM :                 7FE - |
 SET_RAMLIMIT :              FFFC00 - | *SET_SNDVIEWY :                  10 - |
 SET_SRAMSIZE :                 100 - | *SET_WRAMSIZE :               3C000 - |
*SHIFT :                          2 - |  SIZEOF_INPUT :                  10 - |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFE99A C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFE99A C |  SIZEOF_MDVID :    FFFFFFFFFFFFD7F8 C |
*SIZEOF_SAVEINFO : FFFFFFFFFFFFD800 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   28C C |  SNDREQ_ENTER :                 2E4 C |
*SNDREQ_ENTER.WAIT :            302 C |  SNDREQ_EXIT :                  308 C |
*SNDREQ_SADDR :                 32E C |  SNDREQ_SBYTE :                 336 C |
 SNDREQ_SCMD :                  31C C |  SNDREQ_SLONG :                 32A C |
 SNDREQ_SWORD :                 332 C |  SNDUNLOCKZ80 :                 28E C |
 SOUND_INIT :                  163A C |  SOUND_UPDATE :                1636 C |
 STANDBY :                        3 - |  SYSBCD_SPOUT :                18EA C |
*SYSMARS_FRAMEBUFFER :       840000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
*SYSMCD_WRAM :               200000 - |  SYSMDMCD_SETCDDA :            19A6 C |
 SYSRND_MKVALUE :              1702 C |  SYSRND_MKVALUE.HAS_SEED :     1714 C |
*SYSTEM_BCD_ADDB :             18C2 C |  SYSTEM_BCD_ADDL :             18D0 C |
*SYSTEM_BCD_ADDW :             18CA C | *SYSTEM_BCD_SUBB :             189A C |
 SYSTEM_BCD_SUBL :             18A8 C | *SYSTEM_BCD_SUBW :             18A2 C |
 SYSTEM_DEFAULT :              16C2 C |  SYSTEM_DEFAULT.CLR_LOOP :     16D0 C |
 SYSTEM_DICEROLL :             174C C | *SYSTEM_DICEROLL_SEED :        172C C |
 SYSTEM_DMAENTER_RAM :         162E C |  SYSTEM_DMAENTER_ROM :         15F4 C |
 SYSTEM_DMAEXIT_RAM :          1632 C |  SYSTEM_DMAEXIT_ROM :          15F8 C |
 SYSTEM_INIT :                 157A C |  SYSTEM_INIT.CLRINPUT :        15AE C |
 SYSTEM_INPUT :                163E C |  SYSTEM_INPUT.BAD_Y :          169A C |
 SYSTEM_INPUT.NO_BIT :         16AC C |  SYSTEM_INPUT.PAGE_IT :        16A6 C |
 SYSTEM_INPUT.X_VALID :        1682 C | *SYSTEM_MDMARS_SENDDATA :      19C0 C |
*SYSTEM_MDMCD_CDDAFADE :       19AE C | *SYSTEM_MDMCD_CDDAPLAY :       1994 C |
*SYSTEM_MDMCD_CDDAPLAYL :      199E C | *SYSTEM_MDMCD_CDDASTOP :       19AC C |
*SYSTEM_MDMCD_CHECKHOME :      1962 C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                                    1988 C |
*SYSTEM_MDMCD_CHECKWRAM :      193C C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                                       194C C |
 SYSTEM_MDMCD_EXITSHELL :      1992 C |  SYSTEM_MDMCD_GIVEWRAM :       1952 C |
*SYSTEM_MDMCD_INTERRUPT :      191C C | *SYSTEM_MDMCD_RDFILE_RAM :     195E C |
*SYSTEM_MDMCD_RDFILE_WRAM :    1960 C | *SYSTEM_MDMCD_SUBENTER :       192C C |
*SYSTEM_MDMCD_SUBTASK :        192E C | *SYSTEM_MDMCD_SUBWAIT :        192A C |
 SYSTEM_MDMCD_WAITWRAM :       1930 C |  SYSTEM_RANDOM :               16F2 C |
 SYSTEM_RANDOM_SEED :          16E8 C |  SYSTEM_RENDER :               15BA C |
 SYSTEM_RENDER.FORGOT_DISP :   15DE C | *SYSTEM_RENDER.FROM_LATE :     15D8 C |
 SYSTEM_RENDER.WAIT_EARLY :    15C8 C |  SYSTEM_RENDER.WAIT_VBLANK :   15E0 C |
 SYSTEM_SETDATABANK :          19C4 C |  SYSTEM_SETINTJUMPS :          1902 C |
 SYSTEM_SETINTJUMPS.NO_EXINT : 191A C |  SYSTEM_SETINTJUMPS.NO_HINT :  1912 C |
 SYSTEM_SETINTJUMPS.NO_VINT :  190A C |  SYSTEM_SINEWAVE :             1770 C |
 SYSTEM_SINEWAVE_COS :         1766 C |  SYSTEM_SRAMINIT :             16B4 C |
*SYSTEM_SRAMINIT.ALREADY_SET : 16B8 C | *SYSTEM_SRAMINIT.CANT_USE :    16B6 C |
 SYSTEM_SRAMLOAD :             16BE C |  SYSTEM_SRAMSAVE :             16BA C |
*SYS_CTRL_1 :                A10009 - | *SYS_CTRL_2 :                A1000B - |
*SYS_CTRL_3 :                A1000D - | *SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :              15FA C |
 SYS_MARSSLVCMD.WAIT_EXIT :    1620 C |  SYS_SINEWAVE :                1774 C |
 SYS_SINEWAVE.LOC_7EFA :       1782 C |  SYS_SINEWAVE.LOC_7F0C :       1794 C |
 SYS_SINEWAVE.SINE_DATA :      179A C | *SYS_SRAM :                  200000 - |
*SYS_TMSS :                  A14000 - | *TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 63E C |  TBLBUFF_READ.DONT_RES :        6FC C |
 TBLBUFF_READ.DO_CHIP :         696 C |  TBLBUFF_READ.FOUND_TNEW :      77E C |
 TBLBUFF_READ.GOT_LINK :        737 C |  TBLBUFF_READ.GRAB_LINK :       6E0 C |
 TBLBUFF_READ.HAS_INDX :        672 C |  TBLBUFF_READ.INVLDL :          724 C |
*TBLBUFF_READ.L_HIPRIO :        7BB C |  TBLBUFF_READ.NEW_CHIP :        75D C |
 TBLBUFF_READ.NEW_LINK :        7B8 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |
 TBLBUFF_READ.NEXT_INDX :       66C C |  TBLBUFF_READ.NEXT_PRIO :       783 C |
 TBLBUFF_READ.NOT_SAMEL :       759 C |  TBLBUFF_READ.NO_INDX :         68E C |
 TBLBUFF_READ.OVRW_LINK :       7B0 C |  TBLBUFF_READ.PASS_2 :          782 C |
 TBLBUFF_READ.PICK_TBL :        7D0 C |  TBLBUFF_READ.RNOT_PSG :        75B C |
 TBLBUFF_READ.SAME_LINK :       6FF C |  TBLBUFF_READ.SET_ASFULL :      7AD C |
 TBLBUFF_READ.SINGL_FREE :      798 C |  TBLBUFF_READ.SINGL_LINK :      729 C |
 TBLBUFF_READ.SRCH_FREE :       76E C |  TBLBUFF_READ.SRCH_LINK :       70B C |
 TBLBUFF_READ.SRCH_LLOOP :      715 C |  TBLBUFF_READ.TRACK_CONT :      656 C |
 TBLBUFF_READ.VALID :           66A C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                   F05 C |
 TBLZ_CLEAR.CLR_ALL :           F0F C |  TH :                      20000000 - |
 TICKCNT :                     1CF8 C |  TICKFLAG :                    1CF7 C |
 TICKSPSET :                   1CF6 C | *TIME :               "11:55:36 PM" - |
*TIMERCTL :                      30 - |  TRACK_OUT :                    5B0 C |
 TRACK_OUT.INDX_DEL :           5C5 C |  TRACK_OUT.NOTHIN :             5F2 C |
 TRACK_OUT.VALID :              5C4 C |  TRKBLKS_0 :                   16C6 C |
 TRKBLKS_1 :                   16CE C |  TRKBLKS_2 :                   16D6 C |
 TRKBUFF_0 :                   16DE C |  TRKBUFF_1 :                   171D C |
 TRKBUFF_2 :                   175C C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1666 C |
 TRKHDRS_1 :                   1686 C |  TRKHDRS_2 :                   16A6 C |
 TRKINFOCACH :                 1656 C |  TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_SEQ :                      222 C |
 UPD_SEQ.CHNL_FREE :            33C C |  UPD_SEQ.CONT_CHNL :            346 C |
 UPD_SEQ.DEC_ROW :              2DD C |  UPD_SEQ.DEC_ROW_E :            2E0 C |
 UPD_SEQ.EFFECT_FILL :          508 C |  UPD_SEQ.EFF_A :                3C1 C |
 UPD_SEQ.EFF_B :                3D2 C |  UPD_SEQ.EFF_C :                3F0 C |
 UPD_SEQ.EXIT :                 2D1 C |  UPD_SEQ.FADE_OUT :             25E C |
 UPD_SEQ.FIRST_BLK :            447 C |  UPD_SEQ.FIRST_FILL :           50F C |
 UPD_SEQ.FIRST_HEAD :           48D C |  UPD_SEQ.GRAB_RHEAD :           59D C |
 UPD_SEQ.HAS_NOTE :             2E8 C |  UPD_SEQ.INC_CPATT :            3F3 C |
 UPD_SEQ.KEEP_BLK :             463 C |  UPD_SEQ.KEEP_IT :              4B3 C |
 UPD_SEQ.KEEP_VOL :             274 C |  UPD_SEQ.NEXT_CHNL :            31E C |
 UPD_SEQ.NEXT_NOTE :            2C1 C |  UPD_SEQ.NO_EFF :               38D C |
 UPD_SEQ.NO_GLBL :              54F C |  UPD_SEQ.NO_INS :               36E C |
 UPD_SEQ.NO_NOTE :              363 C |  UPD_SEQ.NO_VOL :               37A C |
 UPD_SEQ.OLD_TYPE :             357 C |  UPD_SEQ.RAN_OUT :              401 C |
 UPD_SEQ.READ_SEQ :             238 C |  UPD_SEQ.ROW_ACTIVE :           2BA C |
 UPD_SEQ.SET_TRACK :            42B C |  UPD_SEQ.SFXMD :                27E C |
 UPD_SEQ.SRCH_NEW :             319 C |  UPD_SEQ.SRCH_REROLL :          315 C |
 UPD_SEQ.TOO_MUCH :             26A C |  UPD_SEQ.TRACK_END :            502 C |
*VBLK :                          80 - | *VDPATTR_HI :                  8000 - |
*VDPATTR_PL1 :                 2000 - | *VDPATTR_PL2 :                 4000 - |
*VDPATTR_PL3 :                 6000 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_BUILDSPRITES :           5D8 C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                                        798 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R : 776 C |  VIDEO_BUILDSPRITES.DONT_ADD :  74A C |
 VIDEO_BUILDSPRITES.EX_VRAM :   68E C |  VIDEO_BUILDSPRITES.EX_VRAMS :  6B2 C |
 VIDEO_BUILDSPRITES.EX_YEXT :   71E C |  VIDEO_BUILDSPRITES.FIRST_SPR : 5F8 C |
*VIDEO_BUILDSPRITES.FREEZE :    76E C |  VIDEO_BUILDSPRITES.MK_PZ :     664 C |
 VIDEO_BUILDSPRITES.NEXT :      640 C |  VIDEO_BUILDSPRITES.NEXT_PZ :   600 C |
 VIDEO_BUILDSPRITES.NO_MAP :    75E C |  VIDEO_BUILDSPRITES.NO_PZ :     75A C |
*VIDEO_BUILDSPRITES.NO_SLOT :   764 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                                        7AC C |
 VIDEO_BUILDSPRITES.NO_SLOT_R : 78A C |  VIDEO_BUILDSPRITES.NO_SLOT_S : 630 C |
 VIDEO_BUILDSPRITES.STOP_ALL :  768 C |  VIDEO_BUILDSPRITES.VRAM_H :    6E2 C |
 VIDEO_BUILDSPRITES.VRAM_V :    6CA C |  VIDEO_CLEAR :                  7E6 C |
 VIDEO_CLEAR.CLR_ME :           7F0 C | *VIDEO_CLEARSCREEN :            806 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :  82C C | *VIDEO_COPY :                   B52 C |
 VIDEO_COPY.DMAW :              B5C C |  VIDEO_COPY.DMA_W :             BB8 C |
 VIDEO_DEFAULT :                49A C |  VIDEO_DISPLAYOFF :             840 C |
 VIDEO_DISPLAYON :              834 C |  VIDEO_DMAOFF :                 858 C |
 VIDEO_DMAON :                  84C C |  VIDEO_FADEIN_FULL :            F88 C |
 VIDEO_FADEOUT_FULL :           F9A C |  VIDEO_FADEPAL :                FEC C |
*VIDEO_FADEPAL_LIST :          1042 C |  VIDEO_FADEPAL_LIST.INVALID :  105C C |
 VIDEO_FADEPAL_LIST.NEXT_ONE : 1050 C |  VIDEO_FILL :                   ADA C |
 VIDEO_INIT :                   40E C |  VIDEO_INIT.CLR_D :             444 C |
 VIDEO_INIT.CLR_PREQ :          45C C |  VIDEO_INIT.CLR_RAM :           418 C |
 VIDEO_INIT.COPY_DMA :          42A C |  VIDEO_INIT.DEF_REGSET :        492 C |
 VIDEO_INIT.DMA_ENTRY :         482 C | *VIDEO_INTENABLE :              870 C |
 VIDEO_LOADART :                9C8 C |  VIDEO_LOADART.BAD_SIZE :       A62 C |
 VIDEO_LOADART.LAST_SET :       A18 C |  VIDEO_LOADART.MK_SET :         A20 C |
 VIDEO_LOADART.NORMAL :         A12 C |  VIDEO_LOADART.RAM_WRITE :      A64 C |
 VIDEO_LOADART.SHARED_SETUP :   A78 C |  VIDEO_LOADART_LIST :           ABA C |
 VIDEO_LOADART_LIST.INVALID :   AD4 C |  VIDEO_LOADART_LIST.NEXT_ONE :  AC6 C |
*VIDEO_LOADMAP :                C94 C |  VIDEO_LOADMAP.BAD_SIZE :       D04 C |
 VIDEO_LOADMAP.MK_CELL :        CF4 C |  VIDEO_LOADMAP.NON_BLANK :      CF2 C |
 VIDEO_LOADMAP.X_LOOP :         CE2 C |  VIDEO_LOADMAP.Y_LOOP :         CCE C |
*VIDEO_LOADMAPV :               D0A C |  VIDEO_LOADMAPV.BAD_SIZE :      D8C C |
 VIDEO_LOADMAPV.BAD_SIZE_D :    DF4 C |  VIDEO_LOADMAPV.DBLE_MODE :     D92 C |
 VIDEO_LOADMAPV.MK_CELL :       D76 C |  VIDEO_LOADMAPV.MK_CELL_D :     DDE C |
 VIDEO_LOADMAPV.NON_BLANK :     D74 C |  VIDEO_LOADMAPV.NON_BLANK_D :   DD6 C |
 VIDEO_LOADMAPV.X_LOOP :        D4E C |  VIDEO_LOADMAPV.X_LOOP_D :      DAC C |
 VIDEO_LOADMAPV.Y_LOOP :        D54 C |  VIDEO_LOADMAPV.Y_LOOP_D :      DB2 C |
 VIDEO_LOADPAL :                FF6 C | *VIDEO_LOADPAL_LIST :          1022 C |
 VIDEO_LOADPAL_LIST.INVALID :  103C C |  VIDEO_LOADPAL_LIST.NEXT_ONE : 1030 C |
 VIDEO_MAKEDMAENTRY :           BCE C |  VIDEO_MAKEDMAENTRY.LAST_SET :  C1E C |
 VIDEO_MAKEDMAENTRY.MK_SET :    C26 C |  VIDEO_MAKEDMAENTRY.NORMAL :    C18 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :   C92 C |  VIDEO_MAKEFADE :               FAE C |
*VIDEO_MAKESPR :               1420 C |  VIDEO_MAKESPR.CHK_FREE :      142C C |
 VIDEO_MAKESPR.MK_SPR :        143E C |  VIDEO_MAKESPRMAP :            14D0 C |
 VIDEO_MAKESPRMAP.CHK_FREE :   14DC C |  VIDEO_MAKESPRMAP.MK_SPR :     14EC C |
*VIDEO_MAKESPRMAP_DMA :        14B8 C | *VIDEO_MDMARS_MAKEFADE :        FAC C |
 VIDEO_PRINT :                 1090 C |  VIDEO_PRINT.EXIT :            10FC C |
 VIDEO_PRINT.LOOP :            10C4 C |  VIDEO_PRINT.NEXT :            10F6 C |
 VIDEO_PRINT.Q_LOOP :          10DA C |  VIDEO_PRINT.SPECIAL :         1102 C |
*VIDEO_PRINTDEFPAL :           107A C |  VIDEO_PRINTDEFPAL_FADE :      1072 C |
 VIDEO_PRINTINIT :             1068 C |  VIDEO_PRINTINITW :            1062 C |
 VIDEO_PRINTVAL :              120E C | *VIDEO_PRINTVAL.LOOP :         1242 C |
*VIDEO_PRINTVAL.Q_LOOP :       1258 C |  VIDEO_PRINTVALW :             1264 C |
*VIDEO_PRINTVALW.LOOP :        12B8 C |  VIDEO_PRINTVALW.NO_DBLE_Y :   128C C |
 VIDEO_PRINTW :                111A C |  VIDEO_PRINTW.EXIT :           11EE C |
 VIDEO_PRINTW.LOOP :           116E C |  VIDEO_PRINTW.NEXT :           11E6 C |
 VIDEO_PRINTW.NO_DBLE_Y :      1142 C |  VIDEO_PRINTW.SPECIAL :        11F4 C |
 VIDEO_PRINTW.VER_CONT :       11E0 C |  VIDEO_PRINTW.VER_NORMAL :     11AE C |
 VIDEO_RENDER :                 4E8 C |  VIDEO_RENDER.END :             5CC C |
 VIDEO_RENDER.EXIT :            5D6 C |  VIDEO_RENDER.NEXT :            5B2 C |
 VIDEO_RESOLUTION :             8C2 C |  VIDEO_RESOLUTION.DOUBLE :      904 C |
 VIDEO_RESOLUTION.EX_BIT :      8F6 C |  VIDEO_RUNFADE :                DF8 C |
 VIDEO_RUNFADE.ALL_BLACK :      EC4 C |  VIDEO_RUNFADE.BUSY_TIMER :     E3E C |
 VIDEO_RUNFADE.FADE_IN :        ED2 C |  VIDEO_RUNFADE.FADE_LIST :      E4A C |
 VIDEO_RUNFADE.FADE_OUT :       E62 C | *VIDEO_RUNFADE.FDIN_NEND :      F68 C |
*VIDEO_RUNFADE.FDOUT_NEND :     ED0 C |  VIDEO_RUNFADE.NEXT_COLOR :     E70 C |
 VIDEO_RUNFADE.NEXT_IN :        EDE C |  VIDEO_RUNFADE.NEXT_REQ :       DFC C |
 VIDEO_RUNFADE.NOTHING :        E5A C |  VIDEO_RUNFADE.NO_REQ :         E44 C |
 VIDEO_RUNFADE.PFADE_DEL :      E5A C |  VIDEO_RUNFADE.SAME_IN :        F52 C |
 VIDEO_SETMAPSIZE :             9A2 C | *VIDEO_SETSPR :                1416 C |
 VIDEO_SETSPRMAP :             14AE C | *VIDEO_SETSPRMAP_DMA :         14A4 C |
 VIDEO_UPDMAPVRAM :             916 C |  VIDEO_UPDSPRHVRAM :            968 C |
 VIDEO_WAITFADE :               F6A C |  VIDEO_WAITFADE.LOOP :          F6A C |
 VIDEO_WAITFADE.NEXT_ONE :      F78 C |  VIDMDSPR_MKSPR :              1440 C |
 VIDMDSPR_MKSPR.DONT_ADD :     146A C |  VIDMDSPR_MKSPRMAP :           14EE C |
 VIDMD_CERROR :                149A C | *VIDMD_CFREEZE :               14A2 C |
 VIDMD_PAL :                    FFE C |  VIDMD_PAL.BAD :               101C C |
 VIDMD_PAL.LOOP :              1016 C |  VIDMKFADE_GO :                 FC6 C |
 VIDPRINT_INIT :               106C C |  VID_CHECKLASTSPR :             7B4 C |
 VID_CHECKLASTSPR.BLNK_FIRST :  7CE C |  VID_CHECKLASTSPR.LAST_ONE :    7D4 C |
 VID_CHECKLASTSPR.SPR_EXIT :    7E4 C | *VID_FILLGO :                   AE2 C |
 VID_FILLGO.DMAW :              AE8 C |  VID_FILLGO.DMA_W :             B3C C |
 VID_FONTDEFPAL :              1080 C |  VID_MKDMACARRY :              14CA C |
 VID_MKDMANEXT :               14C0 C |  VID_MKMAPDMA :                152A C |
 VID_MKMAPDMA.NEXT_PZ :        154A C |  VID_MKMAPDMA.NO_DMA :         1574 C |
 VID_PRINTTVAL :               12CC C |  VID_PRINTTVAL.HEX_INCR :      1326 C |
 VID_PRINTTVAL.MK_VALUE :      1304 C |  VID_PRINTTVAL.SHOW_24 :       12F8 C |
*VID_PRINTTVAL.SHOW_BYTE :     12E8 C |  VID_PRINTTVAL.SHOW_LONG :     1300 C |
 VID_PRINTTVAL.SHOW_NIBBL :    1316 C |  VID_PRINTTVAL.SHOW_WORD :     12F0 C |
 VID_PRINTTVALW :              1338 C |  VID_PRINTTVALW.GET_PREVAL :   1402 C |
 VID_PRINTTVALW.HEX_INCR :     1410 C |  VID_PRINTTVALW.MK_VALUE :     1374 C |
 VID_PRINTTVALW.MK_VALUE_IN :  1370 C |  VID_PRINTTVALW.NIBBL_CONT :   13FA C |
 VID_PRINTTVALW.NIBBL_NORM :   13C4 C |  VID_PRINTTVALW.SHOW_24 :      1364 C |
*VID_PRINTTVALW.SHOW_BYTE :    1354 C |  VID_PRINTTVALW.SHOW_LONG :    136C C |
 VID_PRINTTVALW.SHOW_NIBBL :   1386 C |  VID_PRINTTVALW.SHOW_WORD :    135C C |
 VID_WRTREG01 :                 862 C |  VIEW_FAIRY :                     1 - |
 VIEW_GEMAINFO :                  0 - | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :                16E2 C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1CF5 C |  WAVE_LEN :                    1CED C |
 WAVE_LOOP :                   1CF0 C |  WAVE_PITCH :                  1CF3 C |
 WAVE_START :                  1CEA C |  WAVFREQ_CDPCM :               142E C |
 WAVFREQ_LIST :                13CC C |  X68KSRCLSB :                    35 C |
 X68KSRCMID :                    36 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - | *Z80_CODE :                    1CD0 C |
*Z80_CODE_END :                3C5C C | *Z80_CODE_FILE_E :             3C5C C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                    1F60 - |  ZDRVFWRT :                    1F80 - |
*ZDRVMARSBLK :                 1F89 - |  ZDRVMAXCMND :                   20 - |
*ZDRVMCDBLK :                  1F8A - | *ZDRVPALMODE :                 1F88 - |
 ZDRVRAMLEN :                  1F87 - |  ZDRVRAMSRC :                  1F86 - |
*ZDRVROMBLK :                  1F81 - | *ZMARS_SEND :                   F14 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_FREQINDX :                  5 - |
 ZTBL_INSTCACH :                  A - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
 ZTBL_PRIORITY :                  2 - |  ZTBL_VOLSLIDE :                  8 - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1315 symbols
    441 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 12/02/2024 11:55:36 PM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | GSMPLRAW                             
MARS_VRAMEND                          | MARS_VRAMSTART                       
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     29 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 12/02/2024 11:55:36 PM


  Defined Structures/Unions:
  --------------------------

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM
3 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 12/02/2024 11:55:36 PM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 12/02/2024 11:55:36 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

  14621 lines source file
  15553 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
