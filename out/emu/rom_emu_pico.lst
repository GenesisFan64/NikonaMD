 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 11/12/2024 05:52:25 PM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD
       3/       0 :                     ; by GenesisFan64 2023-2024
       4/       0 :                     ;
       5/       0 :                     ; A devkit for developing software on the SEGA 16-bit family
       6/       0 :                     ; of systems: Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ; ===========================================================================
       8/       0 :                     
       9/       0 :                     ; ====================================================================
      10/       0 :                     ; ----------------------------------------------------------------
      11/       0 :                     ; NIKONA SETTINGS
      12/       0 :                     ; ----------------------------------------------------------------
      13/       0 :                     
      14/       0 : =$0                  SET_INITMODE	equ 0		; Starting screen mode number on boot
      15/       0 :                     
      16/       0 :                     ; ====================================================================
      17/       0 :                     ; ----------------------------------------------------------------
      18/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      19/       0 :                     ; ----------------------------------------------------------------
      20/       0 :                     
      21/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      22/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      23/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      24/       0 :                     
      25/       0 :                     ; ----------------------------------------------------
      26/       0 :                     ; SCD, 32X and CD32X ONLY
      27/       0 :                     ;
      28/       0 :                     ; These sections are unused(free) on Genesis/Pico
      29/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      30/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      31/       0 :                     
      32/       0 :                     ; ====================================================================
      33/       0 :                     ; ----------------------------------------------------------------
      34/       0 :                     ; AS Assembler starting settings
      35/       0 :                     ; ----------------------------------------------------------------
      36/       0 :                     
      37/       0 :                     		cpu 		68000		; Starting CPU is 68000
      38/       0 :                     		padding		off		; Don't pad dc.b
      39/       0 :                     		listing 	purecode
      40/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      41/       0 :                     		page 		0
      42/       0 :                     
      43/       0 :                     ; ====================================================================
      44/       0 :                     ; ----------------------------------------------------------------
      45/       0 :                     ; Includes
      46/       0 :                     ; ----------------------------------------------------------------
      47/       0 :                     
      48/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; DO NOT CHANGE THE SIZE OF THE STRINGS
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; if not this will NOT boot on hardware.
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Volume and System(SDK/Engine) name
(1)   25/       0 :                     ;
(1)   26/       0 :                     ; Note:
(1)   27/       0 :                     ; Leave HTAG_SYSNAME as is if you haven't modified
(1)   28/       0 :                     ; any of the Nikona SDK files (/system folder)
(1)   29/       0 :                     ; --------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   32/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   33/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   34/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   35/       0 :                     
(1)   36/       0 :                     ; --------------------------------------------------------
(1)   37/       0 :                     ; Release date
(1)   38/       0 :                     ;
(1)   39/       0 :                     ; "(C)name year.month"
(1)   40/       0 :                     ; --------------------------------------------------------
(1)   41/       0 :                     
(1)   42/       0 : ="(C)GF64 2024.???"  HTAG_DATEINFO	equ "(C)GF64 2024.???"
(1)   43/       0 :                     
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     ; "Domestic" Name, Your game's name in your language
(1)   46/       0 :                     ; --------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   49/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   50/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   51/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   52/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     ; "Overseas" Name, Your game's name in English
(1)   56/       0 :                     ; --------------------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   59/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   60/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   61/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   62/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; Serial number
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; "id anything-vv"
(1)   68/       0 :                     ;
(1)   69/       0 :                     ; id:
(1)   70/       0 :                     ; GM - Game
(1)   71/       0 :                     ; AI - Educative
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; anything:
(1)   74/       0 :                     ; Your own serial format, there's no standard.
(1)   75/       0 :                     ;
(1)   76/       0 :                     ; vv:
(1)   77/       0 :                     ; Version number: 00 to 99
(1)   78/       0 :                     ; --------------------------------------------------------
(1)   79/       0 :                     
(1)   80/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   81/       0 :                     
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     ; Regions supported
(1)   84/       0 :                     ; --------------------------------------------------------
(1)   85/       0 :                     
(1)   86/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   87/       0 :                     
(1)   88/       0 :                     ; --------------------------------------------------------
(1)   89/       0 :                     ; Save data settings
(1)   90/       0 :                     ;
(1)   91/       0 :                     ; Only UPPERCASE and _ are allowed.
(1)   92/       0 :                     ; --------------------------------------------------------
(1)   93/       0 :                     
(1)   94/       0 : =$100                SET_SRAMSIZE	equ $100		; SRAM/BRAM filesize, must be "blocks" of $40 bytes ($20 w/Protection)
(1)   95/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SCD internal save name
(1)   96/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name
(1)   97/       0 :                     
      49/       0 :                     		include	"macros.asm"		; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ====================================================================
(1)    9/       0 :                     ; ------------------------------------------------------------
(1)   10/       0 :                     ; AS Functions
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $12341234
(1)   14/       0 :                     
(1)   15/       0 :                     ; Common functions
(1)   16/       0 :                     cell_vram	function a,(a<<5)					; Cell position to real VRAM position
(1)   17/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   18/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   19/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   20/       0 :                     
(1)   21/       0 : =$3C000              SET_WRAMSIZE	equ $3C000
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reference labels
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1		; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory ; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; **never done**
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2024-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ------------------------------------------------------------
(1)  155/       0 :                     ; Make filler sector at the end-of-file
(1)  156/       0 :                     ; ------------------------------------------------------------
(1)  157/       0 :                     
(1)  158/       0 :                     fs_end		macro
(1)  159/       0 :                     		dc.b 0
(1)  160/       0 :                     		align $800			; Filler sector
(1)  161/       0 :                     		endm
(1)  162/       0 :                     
(1)  163/       0 :                     ; ====================================================================
(1)  164/       0 :                     ; ------------------------------------------------------------
(1)  165/       0 :                     ; Nikona storage macros
(1)  166/       0 :                     ; ------------------------------------------------------------
(1)  167/       0 :                     
(1)  168/       0 :                     ; --------------------------------------------
(1)  169/       0 :                     ; Screen mode code
(1)  170/       0 :                     ;
(1)  171/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  172/       0 :                     ; --------------------------------------------
(1)  173/       0 :                     
(1)  174/       0 :                     screen_code macro lblstart,lblend,path
(1)  175/       0 :                     	if MCD|MARSCD
(1)  176/       0 :                     		align $800		; SCD/CD32X sector align
(1)  177/       0 :                     	elseif MARS
(1)  178/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  179/       0 :                     		align 4
(1)  180/       0 :                     	endif
(1)  181/       0 :                     lblstart label *
(1)  182/       0 :                     	if MARS
(1)  183/       0 :                     		dephase
(1)  184/       0 :                     	endif
(1)  185/       0 :                     
(1)  186/       0 :                     mctopscrn:
(1)  187/       0 :                     	if MARS|MCD|MARSCD
(1)  188/       0 :                     		phase RAM_UserCode	; SCD/32X/CD32X code area
(1)  189/       0 :                     	endif
(1)  190/       0 :                     mcscrn_s:
(1)  191/       0 :                     	include path;"game/screenX/code.asm"
(1)  192/       0 :                     mcscrn_e:
(1)  193/       0 :                     	if MARS
(1)  194/       0 :                     		dephase	; dephase RAM section
(1)  195/       0 :                     		dephase ; dephase $880000+ section
(1)  196/       0 :                     	elseif MCD|MARSCD
(1)  197/       0 :                     		dephase
(1)  198/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)
(1)  199/       0 :                     		align $800
(1)  200/       0 :                     	endif
(1)  201/       0 :                     ; Md_Screen00_e:
(1)  202/       0 :                     lblend label *
(1)  203/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  204/       0 :                     	endm
(1)  205/       0 :                     
(1)  206/       0 :                     ; --------------------------------------------
(1)  207/       0 :                     ; Data bank
(1)  208/       0 :                     ; --------------------------------------------
(1)  209/       0 :                     
(1)  210/       0 :                     data_dset macro startlbl
(1)  211/       0 :                     	if MCD|MARSCD
(1)  212/       0 :                     		align $800
(1)  213/       0 :                     	endif
(1)  214/       0 :                     ; MCD_DBANK0:
(1)  215/       0 :                     startlbl label *
(1)  216/       0 :                     	if MCD|MARSCD
(1)  217/       0 :                     		phase sysmcd_wram
(1)  218/       0 :                     	elseif MARS
(1)  219/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  220/       0 :                     		align 4
(1)  221/       0 :                     	endif
(1)  222/       0 :                     GLBL_MDATA_ST := *
(1)  223/       0 :                     	endm
(1)  224/       0 :                     
(1)  225/       0 :                     ; --------------------------------------------
(1)  226/       0 :                     
(1)  227/       0 :                     data_dend macro endlbl
(1)  228/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; save size for _dend
(1)  229/       0 :                     
(1)  230/       0 :                     	if MCD|MARSCD
(1)  231/       0 :                     	if MOMPASS>2
(1)  232/       0 :                     		if GLBL_MDATA_RP > SET_WRAMSIZE
(1)  233/       0 :                     			warning "SCD/CD32X: THIS BANK SIZE IS TOO LARGE for WORD-RAM"
(1)  234/       0 :                     		endif
(1)  235/       0 :                     	endif
(1)  236/       0 :                     	endif
(1)  237/       0 :                     
(1)  238/       0 :                     	if MARS
(1)  239/       0 :                     		if * >= $900000+$100000
(1)  240/       0 :                     			warning "32X: THIS DATA BANK IS TOO LARGE for $900000"
(1)  241/       0 :                     		endif
(1)  242/       0 :                     
(1)  243/       0 :                     		dephase
(1)  244/       0 :                     	elseif MCD|MARSCD
(1)  245/       0 :                     		dephase
(1)  246/       0 :                     
(1)  247/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  248/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800
(1)  249/       0 :                     		rompad mpadlbl
(1)  250/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  251/       0 :                     		erreport "68K DATA BANK",GLBL_MDATA_RP,SET_WRAMSIZE	; <- Lowest size compatible for ALL
(1)  252/       0 :                     	endif
(1)  253/       0 :                     	endm
(1)  254/       0 :                     
(1)  255/       0 :                     ; --------------------------------------------
(1)  256/       0 :                     
(1)  257/       0 :                     binclude_dma	macro lblstart,file
(1)  258/       0 :                     	if MARS
(1)  259/       0 :                     GLBL_LASTPHDMA	set *
(1)  260/       0 :                     	dephase
(1)  261/       0 :                     GLBL_PHASEDMA	set *
(1)  262/       0 :                     		endif
(1)  263/       0 :                     
(1)  264/       0 :                     		align 2
(1)  265/       0 :                     lblstart	label *
(1)  266/       0 :                     		binclude file
(1)  267/       0 :                     		align 2
(1)  268/       0 :                     
(1)  269/       0 :                     	if MARS
(1)  270/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  271/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  272/       0 :                     	endif
(1)  273/       0 :                     		endm
(1)  274/       0 :                     
(1)  275/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  276/       0 :                     	if MARS
(1)  277/       0 :                     GLBL_LASTPHDMA	set *
(1)  278/       0 :                     	dephase
(1)  279/       0 :                     GLBL_PHASEDMA	set *
(1)  280/       0 :                     		endif
(1)  281/       0 :                     
(1)  282/       0 :                     		align 2
(1)  283/       0 :                     lblstart	label *
(1)  284/       0 :                     		binclude file
(1)  285/       0 :                     lblend		label *
(1)  286/       0 :                     		align 2
(1)  287/       0 :                     
(1)  288/       0 :                     	if MARS
(1)  289/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  290/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  291/       0 :                     	endif
(1)  292/       0 :                     		endm
(1)  293/       0 :                     
(1)  294/       0 :                     ; --------------------------------------------
(1)  295/       0 :                     ; 32X graphics pack Enter/Exit
(1)  296/       0 :                     ; --------------------------------------------
(1)  297/       0 :                     
(1)  298/       0 :                     mars_VramStart	macro thelabel
(1)  299/       0 :                     thelabel label *
(1)  300/       0 :                     		phase 0
(1)  301/       0 :                     		endm
(1)  302/       0 :                     
(1)  303/       0 :                     mars_VramEnd	macro thelabel
(1)  304/       0 :                     		align 8
(1)  305/       0 :                     .end:
(1)  306/       0 :                     ; 		if MOMPASS == 1
(1)  307/       0 :                     			erreport "32X VRAM DATA",.end,$18000
(1)  308/       0 :                     ; 		endif
(1)  309/       0 :                     		dephase
(1)  310/       0 :                     thelabel label *
(1)  311/       0 :                     		endm
(1)  312/       0 :                     
(1)  313/       0 :                     ; --------------------------------------------
(1)  314/       0 :                     ; Fill CD sectors
(1)  315/       0 :                     ; --------------------------------------------
(1)  316/       0 :                     
(1)  317/       0 :                     fillSectors macro num
(1)  318/       0 :                     	rept num
(1)  319/       0 :                     		align $800-1
(1)  320/       0 :                     		dc.b 0
(1)  321/       0 :                     	endm
(1)  322/       0 :                     	endm
(1)  323/       0 :                     
(1)  324/       0 :                     ; ====================================================================
(1)  325/       0 :                     ; ------------------------------------------------------------
(1)  326/       0 :                     ; Nikona CODE macros
(1)  327/       0 :                     ; ------------------------------------------------------------
(1)  328/       0 :                     
(1)  329/       0 :                     ; --------------------------------------------
(1)  330/       0 :                     ; VDP color debug
(1)  331/       0 :                     ; --------------------------------------------
(1)  332/       0 :                     
(1)  333/       0 :                     vdp_showme	macro color
(1)  334/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  335/       0 :                     		move.w	#color,(vdp_data).l
(1)  336/       0 :                     		endm
(1)  337/       0 :                     
      50/       0 :                     		include	"system/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)  240/       0 :                     
      51/       0 :                     		include	"system/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      52/       0 :                     		include	"system/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      53/       0 :                     		include	"system/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (9 writes)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; video data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; video control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      54/       0 :                     		include	"system/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; RESERVED RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Buffer data used by Boot ROM
(1)    7/       0 :                     ;                   * FREE on Cartridge
(1)    8/       0 :                     ; $FFFC00-$FFFD00 | Stack area a7
(1)    9/       0 :                     ; $FFFD00-$FFFDFF | RESERVED for the Sega CD Vector jumps
(1)   10/       0 :                     ;                   * FREE on Cartridge
(1)   11/       0 :                     ; $FFFE00-$FFFFFF | USED by the BIOS as temporals
(1)   12/       0 :                     ;                   * FREE on Cartridge
(1)   13/       0 :                     ; ----------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : =$FFFC00             SET_RAMLIMIT		equ $FFFC00
(1)   16/       0 :                     
(1)   17/       0 :                     ; --------------------------------------------------------
(1)   18/       0 :                     ; MAIN USER RAM
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     
(1)   21/       0 : (MACRO)              			memory $FFFF0000
(1)   21/       0 : =$0                  GLBL_LASTPC     := *
(1)   21/       0 :                                     dephase
(1)   21/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   21/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   22/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   24/FFFFFFFFFFFFB000 :                     .end:
(1)   25/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   25/    B000 :                     .here:          dephase
(1)   25/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   25/       0 :                                     phase GLBL_LASTPC
(1)   29/       0 :                     
(1)   30/       0 :                     ; ------------------------------------------------
(1)   31/       0 :                     ; Nikona .w section of RAM
(1)   32/       0 :                     ;
(1)   33/       0 :                     ; MUST BE AFTER $FF8000
(1)   34/       0 :                     ; ------------------------------------------------
(1)   35/       0 :                     
(1)   36/       0 : (MACRO)              			memory $FFFFB000
(1)   36/       0 : =$0                  GLBL_LASTPC     := *
(1)   36/       0 :                                     dephase
(1)   36/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   36/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   37/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   38/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   39/FFFFFFFFFFFFC800 :                     
(1)   40/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   41/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   50/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   51/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   55/FFFFFFFFFFFFC800 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   56/FFFFFFFFFFFFD7F8 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   57/FFFFFFFFFFFFE99A :                     sizeof_MdRam		ds.l 0
(1)   59/FFFFFFFFFFFFE9A0 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)   60/    39A0 :                     .here:          dephase
(1)   60/    39A0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   60/       0 :                                     phase GLBL_LASTPC
(1)   64/       0 :                     
(1)   65/       0 :                     ; --------------------------------------------------------
(1)   66/       0 :                     ; SCD and 32X special section
(1)   67/       0 :                     ; --------------------------------------------------------
(1)   68/       0 :                     
(1)   98/       0 :                     
(1)   99/       0 :                     ; --------------------------------------------------------
(1)  100/       0 :                     ; Fixed areas
(1)  101/       0 :                     ; --------------------------------------------------------
(1)  102/       0 :                     
(1)  103/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  104/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  105/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  106/       0 :                     
      55/       0 :                     
      56/       0 :                     ; ====================================================================
      57/       0 :                     ; ----------------------------------------------------------------
      58/       0 :                     ; GLOBAL variables
      59/       0 :                     ; ----------------------------------------------------------------
      60/       0 :                     
      61/       0 : (MACRO)              		memory RAM_MdGlobal
      61/       0 : =$0                  GLBL_LASTPC     := *
      61/       0 :                                     dephase
      61/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      61/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      62/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      63/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    8/FFFFFFFFFFFFB000 :                     ; USER SETTINGS
(1)    9/FFFFFFFFFFFFB000 :                     ;
(1)   10/FFFFFFFFFFFFB000 :                     ; Example:
(1)   11/FFFFFFFFFFFFB000 :                     ; setting_tagname	equ value
(1)   12/FFFFFFFFFFFFB000 :                     ; SET_DEBUGMODE		equ True
(1)   13/FFFFFFFFFFFFB000 :                     ; SET_PLAYERNAME	equ "NIKONA"
(1)   14/FFFFFFFFFFFFB000 :                     ;
(1)   15/FFFFFFFFFFFFB000 :                     ; setting_tagname:
(1)   16/FFFFFFFFFFFFB000 :                     ; Any name you want but careful with any conflicting names
(1)   17/FFFFFFFFFFFFB000 :                     ; within the Nikona-internal code
(1)   18/FFFFFFFFFFFFB000 :                     ;
(1)   19/FFFFFFFFFFFFB000 :                     ; Notes:
(1)   20/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   21/FFFFFFFFFFFFB000 :                     ; during build
(1)   22/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   23/FFFFFFFFFFFFB000 :                     
(1)   24/FFFFFFFFFFFFB000 : =$0                  SET_DEBUGMODE		equ False
(1)   25/FFFFFFFFFFFFB000 :                     
(1)   26/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)   27/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM memory (RAM_Global)
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here, for
(1)   31/FFFFFFFFFFFFB000 :                     ; storing temporals on your current screen use RAM_ScrnBuff
(1)   32/FFFFFFFFFFFFB000 :                     ;
(1)   33/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   34/FFFFFFFFFFFFB000 :                     ;
(1)   35/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpL ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   36/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpW ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   37/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExmpB ds.b 6 ; Reserve 6 BYTES
(1)   38/FFFFFFFFFFFFB000 :                     ;
(1)   39/FFFFFFFFFFFFB000 :                     ; Careful with BYTES, everything needs to be even-aligned
(1)   40/FFFFFFFFFFFFB000 :                     ; or your will get an ADDRESS ERROR.
(1)   41/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   42/FFFFFFFFFFFFB000 :                     
(1)   43/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   44/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   45/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   46/FFFFFFFFFFFFB007 :                     
(1)   47/FFFFFFFFFFFFB007 :                     ; --------------------------------------------------------
(1)   48/FFFFFFFFFFFFB007 :                     			align 2
(1)   49/FFFFFFFFFFFFB008 :                     
      64/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      65/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      69/FFFFFFFFFFFFB00C :                     ; 		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      70/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      70/       C :                     .here:          dephase
      70/       C :                                     ds.b -(.here-GLBL_LASTORG)
      70/       0 :                                     phase GLBL_LASTPC
      71/       0 :                     
      72/       0 :                     ; ====================================================================
      73/       0 :                     ; ----------------------------------------------------------------
      74/       0 :                     ; SAVE data structure
      75/       0 :                     ; ----------------------------------------------------------------
      76/       0 :                     
      77/       0 : (MACRO)              		memory RAM_SaveData
      77/       0 : =$0                  GLBL_LASTPC     := *
      77/       0 :                                     dephase
      77/FFFFFFFFFFFFD7F8 :                                     phase RAM_SAVEDATA
      77/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
      78/FFFFFFFFFFFFD7F8 :                     	; ------------------------------------------------
      79/FFFFFFFFFFFFD7F8 :                     		include "game/savemem.asm"
(1)    1/FFFFFFFFFFFFD7F8 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFD7F8 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFD7F8 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFD7F8 :                     
(1)    6/FFFFFFFFFFFFD7F8 :                     RAM_Save_TAG		ds.b 4		; ** RESERVED **
(1)    7/FFFFFFFFFFFFD7FC :                     RAM_Save_Counter	ds.l 1		; Temporal
(1)    8/FFFFFFFFFFFFD800 :                     
      80/FFFFFFFFFFFFD800 :                     	; ------------------------------------------------
      81/FFFFFFFFFFFFD800 :                     sizeof_SaveInfo	ds.l 0
      85/FFFFFFFFFFFFD804 :                     ; 		erreport "USER Globals",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      86/FFFFFFFFFFFFD804 : (MACRO)              		endmemory
      86/       C :                     .here:          dephase
      86/       C :                                     ds.b -(.here-GLBL_LASTORG)
      86/       0 :                                     phase GLBL_LASTPC
      87/       0 :                     
      88/       0 :                     ; ====================================================================
      89/       0 :                     ; ----------------------------------------------------------------
      90/       0 :                     ; Init procedures for all systems
      91/       0 :                     ; ----------------------------------------------------------------
      92/       0 :                     
      93/       0 :                     		!org 0						; Start at 0
      94/       0 :                     ; ---------------------------------------------
      95/       0 :                     ; SEGA 32X
      96/       0 :                     ; ---------------------------------------------
      97/       0 :                     
     154/       0 :                     		include	"system/head_pico.asm"			; Pico header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; PICO header
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : FFFF FD00           		dc.l RAM_Stack		; Stack point
(1)    7/       4 : 0000 0204           		dc.l Pico_Entry		; Entry
(1)    8/       8 : 0000 0200           		dc.l Pico_ErrBus	; Bus error
(1)    9/       C : 0000 0200           		dc.l Pico_ErrAddr	; Address error
(1)   10/      10 : 0000 0200           		dc.l Pico_ErrIll	; ILLEGAL Instruction
(1)   11/      14 : 0000 0200           		dc.l Pico_ErrZDiv	; Divide by 0
(1)   12/      18 : 0000 0200           		dc.l Pico_ErrChk	; CHK Instruction
(1)   13/      1C : 0000 0200           		dc.l Pico_ErrTrapV	; TRAPV Instruction
(1)   14/      20 : 0000 0200           		dc.l Pico_ErrPrivl	; Privilege violation
(1)   15/      24 : 0000 0200           		dc.l Pico_Trace		; Trace
(1)   16/      28 : 0000 0200           		dc.l Pico_Line1010	; Line 1010 Emulator
(1)   17/      2C : 0000 0200           		dc.l Pico_Line1111	; Line 1111 Emulator
(1)   18/      30 : 0000 0200           		dc.l Pico_ErrorEx	; Error exception
(1)   19/      34 : 0000 0200           		dc.l Pico_ErrorEx
(1)   20/      38 : 0000 0200           		dc.l Pico_ErrorEx
(1)   21/      3C : 0000 0200           		dc.l Pico_ErrorEx
(1)   22/      40 : 0000 0200           		dc.l Pico_ErrorEx
(1)   23/      44 : 0000 0200           		dc.l Pico_ErrorEx
(1)   24/      48 : 0000 0200           		dc.l Pico_ErrorEx
(1)   25/      4C : 0000 0200           		dc.l Pico_ErrorEx
(1)   26/      50 : 0000 0200           		dc.l Pico_ErrorEx
(1)   27/      54 : 0000 0200           		dc.l Pico_ErrorEx
(1)   28/      58 : 0000 0200           		dc.l Pico_ErrorEx
(1)   29/      5C : 0000 0200           		dc.l Pico_ErrorEx
(1)   30/      60 : 0000 0200           		dc.l Pico_ErrorEx
(1)   31/      64 : 0000 0200           		dc.l Pico_Error
(1)   32/      68 : FFFF E98C           		dc.l RAM_ExternalJump	; PICO: User interrupt
(1)   33/      6C : 0000 0202           		dc.l Pico_PcmInt	; PICO: PCM-is-full interrupt
(1)   34/      70 : FFFF E986           		dc.l RAM_HBlankJump	; RAM jump for HBlank (JMP xxxx xxxx)
(1)   35/      74 : 0000 0202           		dc.l Pico_UnkInt	; PICO: Unknown
(1)   36/      78 : FFFF E980           		dc.l RAM_VBlankJump	; RAM jump for VBlank (JMP xxxx xxxx)
(1)   37/      7C : 0000 0200           		dc.l Pico_Error
(1)   38/      80 : 0000 0200           		dc.l Pico_Error
(1)   39/      84 : 0000 0200           		dc.l Pico_Error
(1)   40/      88 : 0000 0200           		dc.l Pico_Error
(1)   41/      8C : 0000 0200           		dc.l Pico_Error
(1)   42/      90 : 0000 0200           		dc.l Pico_Error
(1)   43/      94 : 0000 0200           		dc.l Pico_Error
(1)   44/      98 : 0000 0200           		dc.l Pico_Error
(1)   45/      9C : 0000 0200           		dc.l Pico_Error
(1)   46/      A0 : 0000 0200           		dc.l Pico_Error
(1)   47/      A4 : 0000 0200           		dc.l Pico_Error
(1)   48/      A8 : 0000 0200           		dc.l Pico_Error
(1)   49/      AC : 0000 0200           		dc.l Pico_Error
(1)   50/      B0 : 0000 0200           		dc.l Pico_Error
(1)   51/      B4 : 0000 0200           		dc.l Pico_Error
(1)   52/      B8 : 0000 0200           		dc.l Pico_Error
(1)   53/      BC : 0000 0200           		dc.l Pico_Error
(1)   54/      C0 : 0000 0200           		dc.l Pico_Error
(1)   55/      C4 : 0000 0200           		dc.l Pico_Error
(1)   56/      C8 : 0000 0200           		dc.l Pico_Error
(1)   57/      CC : 0000 0200           		dc.l Pico_Error
(1)   58/      D0 : 0000 0200           		dc.l Pico_Error
(1)   59/      D4 : 0000 0200           		dc.l Pico_Error
(1)   60/      D8 : 0000 0200           		dc.l Pico_Error
(1)   61/      DC : 0000 0200           		dc.l Pico_Error
(1)   62/      E0 : 0000 0200           		dc.l Pico_Error
(1)   63/      E4 : 0000 0200           		dc.l Pico_Error
(1)   64/      E8 : 0000 0200           		dc.l Pico_Error
(1)   65/      EC : 0000 0200           		dc.l Pico_Error
(1)   66/      F0 : 0000 0200           		dc.l Pico_Error
(1)   67/      F4 : 0000 0200           		dc.l Pico_Error
(1)   68/      F8 : 0000 0200           		dc.l Pico_Error
(1)   69/      FC : 0000 0200           		dc.l Pico_Error
(1)   70/     100 : 5345 4741 2050      		dc.b HTAG_SYS_PICO;"SEGA PICO       "
              106 : 4943 4F20 2020 
              10C : 2020 2020          
(1)   71/     110 : 2843 2947 4636      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   72/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_PICO;"Nikona PICO                                     "
              126 : 2050 4943 4F20 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   73/     150 : 4E69 6B6F 6E61      		dc.b HTAG_NOV_PICO;"Nikona PICO                                     "
              156 : 2050 4943 4F20 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   74/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02"
              186 : 4542 5245 572D 
              18C : 3032             
(1)   75/     18E : 0000                		dc.w 0
(1)   76/     190 : 2020 2020 2020      		dc.b "                "
              196 : 2020 2020 2020 
              19C : 2020 2020          
(1)   77/     1A0 : 0000 0000           		dc.l 0
(1)   78/     1A4 : 0006 9372           		dc.l ROM_END
(1)   79/     1A8 : 00FF 0000           		dc.l $FF0000
(1)   80/     1AC : 00FF FFFF           		dc.l $FFFFFF
(1)   81/     1B0 : 2020 2020           		dc.l $20202020		; PICO can't use SRAM
(1)   82/     1B4 : 2020 2020           		dc.l $20202020
(1)   83/     1B8 : 2020 2020           		dc.l $20202020
(1)   84/     1BC :                     		align $1F0
(1)   85/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   86/     200 :                     
(1)   87/     200 :                     ; ====================================================================
(1)   88/     200 :                     ; ----------------------------------------------------------------
(1)   89/     200 :                     ; Error handlers
(1)   90/     200 :                     ;
(1)   91/     200 :                     ; All of these do nothing for now.
(1)   92/     200 :                     ; ----------------------------------------------------------------
(1)   93/     200 :                     
(1)   94/     200 :                     Pico_ErrBus:				; Bus error
(1)   95/     200 :                     Pico_ErrAddr:				; Address error
(1)   96/     200 :                     Pico_ErrIll:				; ILLEGAL Instruction
(1)   97/     200 :                     Pico_ErrZDiv:				; Divide by 0
(1)   98/     200 :                     Pico_ErrChk:				; CHK Instruction
(1)   99/     200 :                     Pico_ErrTrapV:				; TRAPV Instruction
(1)  100/     200 :                     Pico_ErrPrivl:				; Privilege violation
(1)  101/     200 :                     Pico_Trace:				; Trace
(1)  102/     200 :                     Pico_Line1010:				; Line 1010 Emulator
(1)  103/     200 :                     Pico_Line1111:				; Line 1111 Emulator
(1)  104/     200 :                     Pico_ErrorEx:				; Error exception
(1)  105/     200 :                     Pico_Error:
(1)  106/     200 : 4E73                		rte
(1)  107/     202 :                     
(1)  108/     202 :                     ; ====================================================================
(1)  109/     202 :                     ; ----------------------------------------------------------------
(1)  110/     202 :                     ; PICO-specific interrupts
(1)  111/     202 :                     ; ----------------------------------------------------------------
(1)  112/     202 :                     
(1)  113/     202 :                     Pico_UserInt:
(1)  114/     202 :                     Pico_PcmInt:				; <-- Interrupt when the PCM chip gets full
(1)  115/     202 :                     Pico_UnkInt:
(1)  116/     202 : 4E73                		rte
(1)  117/     204 :                     
(1)  118/     204 :                     ; ====================================================================
(1)  119/     204 :                     ; ----------------------------------------------------------------
(1)  120/     204 :                     ; Entry point
(1)  121/     204 :                     ; ----------------------------------------------------------------
(1)  122/     204 :                     
(1)  123/     204 :                     Pico_Entry:
(1)  124/     204 : 46FC 2700           		move	#$2700,sr		; Disable interrputs
(1)  125/     208 : 41F9 0080 0019      		lea	($800019),a0
(1)  126/     20E : 203C 5345 4741      		move.l	#"SEGA",d0		; Activate PICO system by
(1)  127/     214 : 01C8 0000           		movep.l	d0,(a0)			; writing this string to $800019 in odd writes
(1)  128/     218 : 4A79 00C0 0004      		tst.w	(vdp_ctrl).l		; Test VDP to unlock Video
(1)  129/     21E :                     	; --------------------------------
(1)  130/     21E : 7000                		moveq	#0,d0
(1)  131/     220 : 2C40                		movea.l	d0,a6
(1)  132/     222 : 4E66                		move.l	a6,usp
(1)  133/     224 : 41F9 FFFF 0000      		lea	($FFFF0000),a0		; Clean our "work" RAM
(1)  134/     22A : 223C FFFF E99A      		move.l	#sizeof_mdram,d1
(1)  135/     230 : 7000                		moveq	#0,d0
(1)  136/     232 : 30C0                .loop_ram:	move.w	d0,(a0)+
(1)  137/     234 : B1C1                		cmp.l	d1,a0
(1)  138/     236 : 65FA                		bcs.s	.loop_ram
(1)  139/     238 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)  140/     23E : 3E2E 0004           .wait_dma:	move.w	4(a6),d7		; Check if DMA is active.
(1)  141/     242 : 0807 0001           		btst	#1,d7
(1)  142/     246 : 66F6                		bne.s	.wait_dma
(1)  143/     248 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)	; Clear palette
              24E : 0004             
(1)  144/     250 : 7E3F                		moveq	#64-1,d7
(1)  145/     252 : 7C00                		moveq	#0,d6
(1)  146/     254 :                     .palclear:
(1)  147/     254 : 3C86                		move.w	d6,(a6)
(1)  148/     256 : 51CF FFFC           		dbf	d7,.palclear
(1)  149/     25A : 4CF9 7FFF 00FF      		movem.l	($FF0000),d0-a6		; Clean registers using zeros from RAM
              260 : 0000             
(1)  150/     262 :                     
     155/     262 : 6100 130E           		bsr	Sound_init				; Init Sound driver FIRST
     156/     266 : 6100 01A6           		bsr	Video_init				;  ''  Video
     157/     26A : 6100 1246           		bsr	System_Init				;  ''  Values
     158/     26E : 31FC 0000 E994      		move.w	#SET_INITMODE,(RAM_ScreenMode).w	; Reset screen mode
     159/     274 : 6000 18F6           		bra.w	Md_ReadModes				; Go to SCREEN LOOP section
     160/     278 :                     
     161/     278 :                     ; ---------------------------------------------
     162/     278 :                     ; MD
     163/     278 :                     ; ---------------------------------------------
     174/     278 :                     
     175/     278 :                     ; ====================================================================
     176/     278 :                     ; --------------------------------------------------------
     177/     278 :                     ; SYSTEM routines
     178/     278 :                     ;
     179/     278 :                     ; MD/PICO:  Normal ROM locations
     180/     278 :                     ; 32X:      Loaded into RAM to prevent bus-conflicts
     181/     278 :                     ;           with the SH2's view of ROM
     182/     278 :                     ; CD/CD32X: Loaded into RAM for safe access.
     183/     278 :                     ; --------------------------------------------------------
     184/     278 :                     
     189/     278 :                     ; ---------------------------------------------
     190/     278 :                     
     191/     278 :                     		include	"sound/drv/gema_macros.asm"
(1)    1/     278 :                     ; ===========================================================================
(1)    2/     278 :                     ; ------------------------------------------------------------
(1)    3/     278 :                     ; GEMA MACROS
(1)    4/     278 :                     ;
(1)    5/     278 :                     ; Variables used:
(1)    6/     278 :                     ; MCD, MARS, MARSCD
(1)    7/     278 :                     ; ------------------------------------------------------------
(1)    8/     278 :                     
(1)    9/     278 :                     ; ----------------------------------------------------
(1)   10/     278 :                     ; gSmplData - Special include for .wav files,
(1)   11/     278 :                     ;
(1)   12/     278 :                     ; labl | Label used in this sample
(1)   13/     278 :                     ; file | WAV file location
(1)   14/     278 :                     ; loop | Loop start point
(1)   15/     278 :                     ; ----------------------------------------------------
(1)   16/     278 :                     
(1)   17/     278 :                     gSmplData macro labl,file,loop
(1)   18/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   19/     278 :                     		align 4
(1)   20/     278 :                     	endif
(1)   21/     278 :                     labl	label *
(1)   22/     278 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   23/     278 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   24/     278 :                     labl_s:
(1)   25/     278 :                     	binclude file,$2C	; dc.b (data)
(1)   26/     278 :                     labl_e:
(1)   27/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   28/     278 :                     		align 4
(1)   29/     278 :                     	endif
(1)   30/     278 :                     	endm
(1)   31/     278 :                     
(1)   32/     278 :                     ; ----------------------------------------------------
(1)   33/     278 :                     ; gSmplRaw - Special include for raw files
(1)   34/     278 :                     ;
(1)   35/     278 :                     ; labl | Label used in this sample
(1)   36/     278 :                     ; file | RAW file location
(1)   37/     278 :                     ; loop | Loop start point
(1)   38/     278 :                     ; ----------------------------------------------------
(1)   39/     278 :                     
(1)   40/     278 :                     gSmplRaw macro labl,file,loop
(1)   41/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   42/     278 :                     		align 4
(1)   43/     278 :                     	endif
(1)   44/     278 :                     labl	label *
(1)   45/     278 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   46/     278 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   47/     278 :                     labl_s:
(1)   48/     278 :                     	binclude file		; dc.b (data)
(1)   49/     278 :                     labl_e:
(1)   50/     278 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   51/     278 :                     		align 4
(1)   52/     278 :                     	endif
(1)   53/     278 :                     	endm
(1)   54/     278 :                     
(1)   55/     278 :                     ; ----------------------------------------------------
(1)   56/     278 :                     ; gemaTrk - Sequence entry in the current master
(1)   57/     278 :                     ;           list
(1)   58/     278 :                     ;
(1)   59/     278 :                     ; enblt | Disable/Enable global beats on this Sequence:
(1)   60/     278 :                     ;         0 - Don't use beats
(1)   61/     278 :                     ;         1 - Use beats
(1)   62/     278 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   63/     278 :                     ;   loc | Direct 24-bit location of the sequence data
(1)   64/     278 :                     ; ----------------------------------------------------
(1)   65/     278 :                     
(1)   66/     278 :                     gemaTrk macro enblt,ticks,loc
(1)   67/     278 :                     	dc.l ((enblt&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   68/     278 :                     	endm
(1)   69/     278 :                     
(1)   70/     278 :                     ; ----------------------------------------------------
(1)   71/     278 :                     ; gemaHead - Sequence data header
(1)   72/     278 :                     ;
(1)   73/     278 :                     ; blk_data  | Block data pointer
(1)   74/     278 :                     ; patt_data | Pattern data pointer
(1)   75/     278 :                     ; ins_list  | instrument list pointer
(1)   76/     278 :                     ; num_chnls | Number of channels used in the track
(1)   77/     278 :                     ;             If 0: Read ALL channels
(1)   78/     278 :                     ;                   (NOT recommended, UNSTABLE)
(1)   79/     278 :                     ;
(1)   80/     278 :                     ; Note:
(1)   81/     278 :                     ; Pointers are in 68k map area
(1)   82/     278 :                     ; ----------------------------------------------------
(1)   83/     278 :                     
(1)   84/     278 :                     gemaHead macro blk,pat,ins,num
(1)   85/     278 :                     	dc.w num
(1)   86/     278 :                     	dc.l blk
(1)   87/     278 :                     	dc.l pat
(1)   88/     278 :                     	dc.l ins
(1)   89/     278 :                     	endm
(1)   90/     278 :                     
(1)   91/     278 :                     ; ------------------------------------------------------------
(1)   92/     278 :                     ; Instrument macros, instrument_num-1
(1)   93/     278 :                     ; (ex. Instrument 1 is 0 here)
(1)   94/     278 :                     ;
(1)   95/     278 :                     ; Note:
(1)   96/     278 :                     ; UNUSED instruments MUST use gInsNull or
(1)   97/     278 :                     ; the Z80 gets unexpected results and probably crash.
(1)   98/     278 :                     ; ------------------------------------------------------------
(1)   99/     278 :                     
(1)  100/     278 :                     ; ----------------------------------------------------
(1)  101/     278 :                     ; gInsNull - Null instrument
(1)  102/     278 :                     ;
(1)  103/     278 :                     ; You MUST use this on unused instruments.
(1)  104/     278 :                     ; ----------------------------------------------------
(1)  105/     278 :                     
(1)  106/     278 :                     gInsNull macro
(1)  107/     278 :                     	dc.b $00,$00,$00,$00
(1)  108/     278 :                     	dc.b $00,$00,$00,$00
(1)  109/     278 :                     	endm
(1)  110/     278 :                     
(1)  111/     278 :                     ; ----------------------------------------------------
(1)  112/     278 :                     ; gInsPsg - PSG tone
(1)  113/     278 :                     ;
(1)  114/     278 :                     ; pitch | Pitch/Octave
(1)  115/     278 :                     ; alv   | Attack level
(1)  116/     278 :                     ; atk   | Attack rate
(1)  117/     278 :                     ; slv   | Sustain
(1)  118/     278 :                     ; dky   | Decay rate (up)
(1)  119/     278 :                     ; rrt   | Release rate (down)
(1)  120/     278 :                     ; vib   | Set to 0, reserved for vibrato
(1)  121/     278 :                     ; ----------------------------------------------------
(1)  122/     278 :                     
(1)  123/     278 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  124/     278 :                     	dc.b $80,pitch,alv,atk
(1)  125/     278 :                     	dc.b slv,dky,rrt,vib
(1)  126/     278 :                     	endm
(1)  127/     278 :                     
(1)  128/     278 :                     ; ----------------------------------------------------
(1)  129/     278 :                     ; gInsPsg - PSG noise
(1)  130/     278 :                     ;
(1)  131/     278 :                     ; pitch | Pitch/Octave
(1)  132/     278 :                     ; alv   | Attack level
(1)  133/     278 :                     ; atk   | Attack rate
(1)  134/     278 :                     ; slv   | Sustain
(1)  135/     278 :                     ; dky   | Decay rate (up)
(1)  136/     278 :                     ; rrt   | Release rate (down)
(1)  137/     278 :                     ; vib   | Set to 0, reserved for vibrato
(1)  138/     278 :                     ; mode  | Noise mode: %tmm
(1)  139/     278 :                     ;         t - Bass(0)|Noise(1)
(1)  140/     278 :                     ;         m - Clock(00)|Clock/2(01)|Clock/4(10)|Tone3(11)
(1)  141/     278 :                     ;
(1)  142/     278 :                     ; Note:
(1)  143/     278 :                     ; Using Tone3 will turn OFF channel 3.
(1)  144/     278 :                     ; ----------------------------------------------------
(1)  145/     278 :                     
(1)  146/     278 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  147/     278 :                     	dc.b $90|mode,pitch,alv,atk
(1)  148/     278 :                     	dc.b slv,dky,rrt,vib
(1)  149/     278 :                     	endm
(1)  150/     278 :                     
(1)  151/     278 :                     ; ----------------------------------------------------
(1)  152/     278 :                     ; gInsFm - YM2612 FM normal instrument/patch
(1)  153/     278 :                     ;
(1)  154/     278 :                     ; pitch | Pitch/Octave
(1)  155/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  156/     278 :                     ; ----------------------------------------------------
(1)  157/     278 :                     
(1)  158/     278 :                     gInsFm macro pitch,fmins
(1)  159/     278 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  160/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  161/     278 :                     	endm
(1)  162/     278 :                     
(1)  163/     278 :                     ; ----------------------------------------------------
(1)  164/     278 :                     ; gInsFm - YM2612 FM special instrument/patch
(1)  165/     278 :                     ;
(1)  166/     278 :                     ; pitch | UNUSED, value ignored (set to 0)
(1)  167/     278 :                     ; fmins | 24-bit pointer to FM patch data
(1)  168/     278 :                     ; ----------------------------------------------------
(1)  169/     278 :                     
(1)  170/     278 :                     gInsFm3	macro pitch,fmins
(1)  171/     278 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  172/     278 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  173/     278 :                     	endm
(1)  174/     278 :                     
(1)  175/     278 :                     ; ----------------------------------------------------
(1)  176/     278 :                     ; gInsDac - DAC instrument
(1)  177/     278 :                     ;
(1)  178/     278 :                     ; pitch | Pitch/Octave
(1)  179/     278 :                     ; start | 24-bit pointer
(1)  180/     278 :                     ; flags | Flags: %0000000l
(1)  181/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  182/     278 :                     ; ----------------------------------------------------
(1)  183/     278 :                     
(1)  184/     278 :                     gInsDac	macro pitch,start,flags
(1)  185/     278 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  186/     278 :                     	dc.b start&$FF,0,0,0
(1)  187/     278 :                     	endm
(1)  188/     278 :                     
(1)  189/     278 :                     ; ----------------------------------------------------
(1)  190/     278 :                     ; gInsPcm - RF5C164 PCM Sample (SEGA CD)
(1)  191/     278 :                     ;
(1)  192/     278 :                     ; pitch | Pitch/Octave
(1)  193/     278 :                     ; start | 24-bit direct pointer to
(1)  194/     278 :                     ;         Sub-CPU's memory area.
(1)  195/     278 :                     ; flags | Flags: %0000000l
(1)  196/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  197/     278 :                     ; ----------------------------------------------------
(1)  198/     278 :                     
(1)  199/     278 :                     gInsPcm	macro pitch,start,flags
(1)  200/     278 :                      if MCD|MARSCD
(1)  201/     278 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  202/     278 :                     	dc.b start&$FF,0,0,0
(1)  203/     278 :                      else
(1)  204/     278 :                     	dc.b $00,$00,$00,$00
(1)  205/     278 :                     	dc.b $00,$00,$00,$00
(1)  206/     278 :                      endif
(1)  207/     278 :                     	endm
(1)  208/     278 :                     
(1)  209/     278 :                     ; ----------------------------------------------------
(1)  210/     278 :                     ; gInsPwm - PWM Sample (SEGA 32X)
(1)  211/     278 :                     ;
(1)  212/     278 :                     ; pitch | Pitch/Octave
(1)  213/     278 :                     ; start | 32-bit pointer to
(1)  214/     278 :                     ;         SH2's map view: CS1(ROM) or CS3(SDRAM)
(1)  215/     278 :                     ; flags | Flags: %000000sl
(1)  216/     278 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  217/     278 :                     ;         | s - Sample data is in Stereo: No(0)/Yes(1)
(1)  218/     278 :                     ; ----------------------------------------------------
(1)  219/     278 :                     
(1)  220/     278 :                     gInsPwm	macro pitch,start,flags
(1)  221/     278 :                      if MARS|MARSCD
(1)  222/     278 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  223/     278 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  224/     278 :                      else
(1)  225/     278 :                     	dc.b $00,$00,$00,$00
(1)  226/     278 :                     	dc.b $00,$00,$00,$00
(1)  227/     278 :                      endif
(1)  228/     278 :                     	endm
(1)  229/     278 :                     
     192/     278 :                     		include	"sound/drv/gema.asm"
(1)    1/     278 :                     ; ===========================================================================
(1)    2/     278 :                     ; -------------------------------------------------------------------
(1)    3/     278 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/     278 :                     ; by GenesisFan64 2023-2024
(1)    5/     278 :                     ; -------------------------------------------------------------------
(1)    6/     278 :                     
(1)    7/     278 :                     ; ====================================================================
(1)    8/     278 :                     ; --------------------------------------------------------
(1)    9/     278 :                     ; Variables
(1)   10/     278 :                     ; --------------------------------------------------------
(1)   11/     278 :                     
(1)   12/     278 :                     ; z80_cpu	equ $A00000			; Z80 CPU area
(1)   13/     278 :                     ; z80_bus 	equ $A11100			; only read bit 0 (bit 8 as WORD)
(1)   14/     278 :                     ; z80_reset	equ $A11200			; WRITE only: $0000 reset/$0100 cancel
(1)   15/     278 : =$1F60               zDrvFifo	equ $1F60;commZfifo		; FIFO command storage
(1)   16/     278 : =$1F80               zDrvFWrt	equ $1F80;commZWrite		; FIFO command index
(1)   17/     278 : =$1F81               zDrvRomBlk	equ $1F81;commZRomBlk		; ROM block flag
(1)   18/     278 : =$1F86               zDrvRamSrc	equ $1F82+4;cdRamSrcB		; !! RAM-read source+dest pointers
(1)   19/     278 : =$1F87               zDrvRamLen	equ $1F87;cdRamLen		; RAM-read length + flag
(1)   20/     278 : =$1F88               zDrvPalMode	equ $1F88;palMode		; PAL speed flag
(1)   21/     278 : =$1F89               zDrvMarsBlk	equ $1F89;marsBlock		; Flag to disable 32X's PWM
(1)   22/     278 : =$1F8A               zDrvMcdBlk	equ $1F8A;mcdBlock		; Flag to disable SegaCD's PCM
(1)   23/     278 : =$20                 zDrvMaxCmnd	equ $20;MAX_ZCMND		; Command fifo size
(1)   24/     278 :                     
(1)   25/     278 :                     ; ====================================================================
(1)   26/     278 :                     ; --------------------------------------------------------
(1)   27/     278 :                     ; Labels
(1)   28/     278 :                     ; --------------------------------------------------------
(1)   29/     278 :                     
(1)   30/     278 : =$FFFFFF00           RAM_ZCdFlagD	equ RAM_SoundBuff		; transferRom flag (shared with Z80)
(1)   31/     278 :                     
(1)   32/     278 :                     ; ====================================================================
(1)   33/     278 :                     ; --------------------------------------------------------
(1)   34/     278 :                     ; Initialize Sound
(1)   35/     278 :                     ; --------------------------------------------------------
(1)   36/     278 :                     
(1)   37/     278 :                     gemaInit:
(1)   39/     278 :                     		; Pico driver init goes here
(1)   40/     278 :                     
(1)   71/     278 :                     
(1)   72/     278 :                     ; ====================================================================
(1)   73/     278 :                     ; ----------------------------------------------------------------
(1)   74/     278 :                     ; gemaReset
(1)   75/     278 :                     ;
(1)   76/     278 :                     ; Reset ALL sound to defaults
(1)   77/     278 :                     ; ----------------------------------------------------------------
(1)   78/     278 :                     
(1)   79/     278 :                     gemaReset:
(1)   80/     278 : 6100 012C           		bsr	gemaStopAll
(1)   81/     27C : 41F8 4534           		lea	(MainGemaSeqList),a0
(1)   82/     280 : 6100 00D0           		bsr	gemaSetMasterList
(1)   83/     284 : 7E07                		moveq	#7,d7				; Make sure it finishes.
(1)   84/     286 : 51CF FFFE           		dbf	d7,*
(1)   85/     28A : 4E75                		rts
(1)   86/     28C :                     
(1)   87/     28C :                     ; ====================================================================
(1)   88/     28C :                     ; ------------------------------------------------
(1)   89/     28C :                     ; sndLockZ80
(1)   90/     28C :                     ;
(1)   91/     28C :                     ; Stop Z80, unlocks bus
(1)   92/     28C :                     ; ------------------------------------------------
(1)   93/     28C :                     
(1)   94/     28C :                     sndLockZ80:
(1)  101/     28C : 4E75                		rts
(1)  102/     28E :                     
(1)  103/     28E :                     ; ------------------------------------------------
(1)  104/     28E :                     ; sndUnlockZ80
(1)  105/     28E :                     ;
(1)  106/     28E :                     ; Resume Z80, locks bus
(1)  107/     28E :                     ; ------------------------------------------------
(1)  108/     28E :                     
(1)  109/     28E :                     sndUnlockZ80:
(1)  113/     28E : 4E75                		rts
(1)  114/     290 :                     
(1)  115/     290 :                     ; ====================================================================
(1)  116/     290 :                     ; ----------------------------------------------------------------
(1)  117/     290 :                     ; gemaSendRam
(1)  118/     290 :                     ;
(1)  119/     290 :                     ; If you are reading data from 68000's RAM you MUST call
(1)  120/     290 :                     ; this a lot during display, commonly during the VBlank waiting
(1)  121/     290 :                     ; loop.
(1)  122/     290 :                     ;
(1)  123/     290 :                     ; This checks if the Z80 wants to read from RAM, then here
(1)  124/     290 :                     ; we manually write the bytes to the Z80
(1)  125/     290 :                     ;
(1)  126/     290 :                     ; SCD/CD32X:
(1)  127/     290 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  128/     290 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  129/     290 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  130/     290 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set.
(1)  131/     290 :                     ; ----------------------------------------------------------------
(1)  132/     290 :                     
(1)  133/     290 :                     gemaSendRam:
(1)  134/     290 : 4A38 FF00           		tst.b	(RAM_ZCdFlagD).w		; Z80 WROTE the flag?
(1)  135/     294 : 674C                		beq.s	.no_task
(1)  136/     296 : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear flag here
(1)  137/     29A : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  138/     29E : 61EC                		bsr	sndLockZ80
(1)  139/     2A0 : 7E00                		moveq	#0,d7
(1)  140/     2A2 : 1E39 00A0 1F87      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Len == 0?
(1)  141/     2A8 : 6732                		beq.s	.no_size			; Invalid size, do nothing
(1)  142/     2AA : 5347                		subq.w	#1,d7				; dbf -1
(1)  143/     2AC : 4DF9 00A0 1F87      		lea	(z80_cpu+(zDrvRamSrc+1)),a6	; a6 - SRC location and DST, backwards
(1)  144/     2B2 : 4BF9 00A0 0000      		lea	(z80_cpu),a5			; a5 - Z80 area
(1)  145/     2B8 : 1C26                		move.b	-(a6),d6			; d6 - Source in 68K area
(1)  146/     2BA : 4846                		swap	d6
(1)  147/     2BC : 1C26                		move.b	-(a6),d6
(1)  148/     2BE : E14E                		lsl.w	#8,d6
(1)  149/     2C0 : 1C26                		move.b	-(a6),d6
(1)  150/     2C2 : 7A00                		moveq	#0,d5
(1)  151/     2C4 : 1A26                		move.b	-(a6),d5			; d5 - Destination in Z80 area
(1)  152/     2C6 : E14D                		lsl.w	#8,d5
(1)  153/     2C8 : 1A26                		move.b	-(a6),d5
(1)  154/     2CA : DBC5                		add.l	d5,a5				; Add base to destination
(1)  155/     2CC : 2846                		move.l	d6,a4
(1)  156/     2CE :                     .copy_bytes:
(1)  157/     2CE : 1ADC                		move.b	(a4)+,(a5)+
(1)  158/     2D0 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  159/     2D4 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; clear LEN and Z80 resumes
              2DA : 1F87             
(1)  160/     2DC :                     .no_size:
(1)  161/     2DC : 61B0                		bsr	sndUnlockZ80
(1)  162/     2DE : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  163/     2E2 :                     .no_task:
(1)  164/     2E2 : 4E75                		rts
(1)  165/     2E4 :                     
(1)  166/     2E4 :                     ; ====================================================================
(1)  167/     2E4 :                     ; ------------------------------------------------
(1)  168/     2E4 :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  169/     2E4 :                     ; ------------------------------------------------
(1)  170/     2E4 :                     
(1)  171/     2E4 :                     sndReq_Enter:
(1)  175/     2E4 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  176/     2E8 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  177/     2EC : 40E7                		move.w	sr,-(sp)			; and sr too
(1)  178/     2EE : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  179/     2F2 : DEFC 0016           		adda	#(4*4)+2+4,sp			; Go back to the RTS jump
(1)  180/     2F6 : 4BF9 00A0 1F80      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  181/     2FC : 4DF9 00A0 1F60      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  182/     302 :                     .wait:
(1)  187/     302 : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  188/     304 : 4886                		ext.w	d6				; extend to 16 bits
(1)  189/     306 : 4E75                		rts
(1)  190/     308 :                     ; JUMP ONLY
(1)  191/     308 :                     sndReq_Exit:
(1)  195/     308 : 9EFC 001A           		suba	#8+2+(4*4),sp
(1)  196/     30C : 46DF                		move.w	(sp)+,sr
(1)  197/     30E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  198/     312 : DEFC 0008           		adda	#8,sp
(1)  199/     316 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  200/     31A : 4E75                		rts
(1)  201/     31C :                     
(1)  202/     31C :                     ; ------------------------------------------------
(1)  203/     31C :                     ; Send request id and arguments
(1)  204/     31C :                     ;
(1)  205/     31C :                     ; Input:
(1)  206/     31C :                     ; d7 - byte to write
(1)  207/     31C :                     ; d6 - index pointer
(1)  208/     31C :                     ; a5 - commZWrite, update index
(1)  209/     31C :                     ; a6 - commZfifo command list
(1)  210/     31C :                     ;
(1)  211/     31C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  212/     31C :                     ; ------------------------------------------------
(1)  213/     31C :                     
(1)  214/     31C :                     sndReq_scmd:
(1)  215/     31C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; Command-start flag
(1)  216/     322 : 5206                		addq.b	#1,d6				; Next fifo position
(1)  217/     324 : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  218/     328 : 600C                		bra.s	sndReq_sbyte
(1)  219/     32A :                     sndReq_slong:
(1)  220/     32A : 610A                		bsr	sndReq_sbyte
(1)  221/     32C : E09F                		ror.l	#8,d7
(1)  222/     32E :                     ; 24-bit address
(1)  223/     32E :                     sndReq_saddr:
(1)  224/     32E : 6106                		bsr	sndReq_sbyte
(1)  225/     330 : E09F                		ror.l	#8,d7
(1)  226/     332 :                     sndReq_sword:
(1)  227/     332 : 6102                		bsr	sndReq_sbyte
(1)  228/     334 : E09F                		ror.l	#8,d7
(1)  229/     336 :                     sndReq_sbyte:
(1)  230/     336 : 1D87 6000           		move.b	d7,(a6,d6.w)			; Write byte
(1)  231/     33A : 5206                		addq.b	#1,d6				; Next fifo pos
(1)  232/     33C : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  233/     340 : 1A86                		move.b	d6,(a5)				; Update commZWrite
(1)  234/     342 : 4E75                		rts
(1)  235/     344 :                     
(1)  236/     344 :                     ; ====================================================================
(1)  237/     344 :                     ; ------------------------------------------------
(1)  238/     344 :                     ; USER calls area
(1)  239/     344 :                     ; ------------------------------------------------
(1)  240/     344 :                     
(1)  241/     344 :                     ; --------------------------------------------------------
(1)  242/     344 :                     ; gemaDmaPause
(1)  243/     344 :                     ;
(1)  244/     344 :                     ; Call this BEFORE doing any DMA transfer
(1)  245/     344 :                     ;
(1)  246/     344 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  247/     344 :                     ; --------------------------------------------------------
(1)  248/     344 :                     
(1)  249/     344 :                     gemaDmaPause:
(1)  259/     344 : 4E75                		rts
(1)  260/     346 :                     
(1)  261/     346 :                     ; --------------------------------------------------------
(1)  262/     346 :                     ; gemaDmaResume
(1)  263/     346 :                     ;
(1)  264/     346 :                     ; Call this AFTER finishing DMA transfer
(1)  265/     346 :                     ;
(1)  266/     346 :                     ; 32X: Reset the RV bit manually BEFORE calling this.
(1)  267/     346 :                     ; --------------------------------------------------------
(1)  268/     346 :                     
(1)  269/     346 :                     gemaDmaResume:
(1)  279/     346 : 4E75                		rts
(1)  280/     348 :                     
(1)  281/     348 :                     ; --------------------------------------------------------
(1)  282/     348 :                     ; gemaTest
(1)  283/     348 :                     ;
(1)  284/     348 :                     ; For TESTING only
(1)  285/     348 :                     ; --------------------------------------------------------
(1)  286/     348 :                     
(1)  287/     348 :                     gemaTest:
(1)  288/     348 : 619A                		bsr	sndReq_Enter
(1)  289/     34A : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  290/     34E : 61CC                		bsr	sndReq_scmd
(1)  291/     350 : 60B6                		bra 	sndReq_Exit
(1)  292/     352 :                     
(1)  293/     352 :                     ; --------------------------------------------------------
(1)  294/     352 :                     ; gemaSetMasterList
(1)  295/     352 :                     ;
(1)  296/     352 :                     ; Sets the master sequence list
(1)  297/     352 :                     ;
(1)  298/     352 :                     ; Input:
(1)  299/     352 :                     ; a0 | 68k pointer
(1)  300/     352 :                     ;
(1)  301/     352 :                     ; Notes:
(1)  302/     352 :                     ; - ALL TRACKS MUST BE STOPPED, CALL gemaStopAll FIRST
(1)  303/     352 :                     ; and wait a frame maximum.
(1)  304/     352 :                     ; --------------------------------------------------------
(1)  305/     352 :                     
(1)  306/     352 :                     gemaSetMasterList:
(1)  307/     352 : 6190                		bsr	sndReq_Enter
(1)  308/     354 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  309/     358 : 61C2                		bsr	sndReq_scmd
(1)  310/     35A : 2E08                		move.l	a0,d7
(1)  311/     35C : 61CC                		bsr	sndReq_slong
(1)  312/     35E : 60A8                		bra 	sndReq_Exit
(1)  313/     360 :                     
(1)  314/     360 :                     ; --------------------------------------------------------
(1)  315/     360 :                     ; gemaPlaySeq
(1)  316/     360 :                     ;
(1)  317/     360 :                     ; Play a sequence
(1)  318/     360 :                     ;
(1)  319/     360 :                     ; Input:
(1)  320/     360 :                     ; d0.b | Sequence number
(1)  321/     360 :                     ; d1.b | Starting block
(1)  322/     360 :                     ; d2.b | Playback slot number: 0-2
(1)  323/     360 :                     ;        If set to -1:
(1)  324/     360 :                     ;        Auto-search free slot (same as gemaPlaySeqAuto)
(1)  325/     360 :                     ; --------------------------------------------------------
(1)  326/     360 :                     
(1)  327/     360 :                     gemaPlaySeq:
(1)  328/     360 : 6182                		bsr	sndReq_Enter
(1)  329/     362 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  330/     366 : 61B4                		bsr	sndReq_scmd
(1)  331/     368 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  332/     36A : 61CA                		bsr	sndReq_sbyte
(1)  333/     36C : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  334/     36E : 61C6                		bsr	sndReq_sbyte
(1)  335/     370 : 1E02                		move.b	d2,d7		; d2.b Slot
(1)  336/     372 : 61C2                		bsr	sndReq_sbyte
(1)  337/     374 : 6092                		bra 	sndReq_Exit
(1)  338/     376 :                     
(1)  339/     376 :                     ; --------------------------------------------------------
(1)  340/     376 :                     ; gemaPlaySeqAuto
(1)  341/     376 :                     ;
(1)  342/     376 :                     ; Play a sequence into a free slot, if all get full
(1)  343/     376 :                     ; it will overwrite the last one.
(1)  344/     376 :                     ;
(1)  345/     376 :                     ; Input:
(1)  346/     376 :                     ; d0.b | Sequence number
(1)  347/     376 :                     ; d1.b | Starting block
(1)  348/     376 :                     ; --------------------------------------------------------
(1)  349/     376 :                     
(1)  350/     376 :                     gemaPlaySeqAuto:
(1)  351/     376 : 6100 FF6C           		bsr	sndReq_Enter
(1)  352/     37A : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  353/     37E : 619C                		bsr	sndReq_scmd
(1)  354/     380 : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  355/     382 : 61B2                		bsr	sndReq_sbyte
(1)  356/     384 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  357/     386 : 61AE                		bsr	sndReq_sbyte
(1)  358/     388 : 7EFF                		moveq	#-1,d7		; d2.b Slot
(1)  359/     38A : 61AA                		bsr	sndReq_sbyte
(1)  360/     38C : 6000 FF7A           		bra 	sndReq_Exit
(1)  361/     390 :                     
(1)  362/     390 :                     ; --------------------------------------------------------
(1)  363/     390 :                     ; gemaStopSeq
(1)  364/     390 :                     ;
(1)  365/     390 :                     ; Stops tracks with the same sequence number
(1)  366/     390 :                     ;
(1)  367/     390 :                     ; Input:
(1)  368/     390 :                     ; d0.b | Sequence number to search
(1)  369/     390 :                     ;        If -1: Stop all tracks with any sequence
(1)  370/     390 :                     ; d1.b | Playback slot number
(1)  371/     390 :                     ;        If -1: Stop all slots
(1)  372/     390 :                     ;
(1)  373/     390 :                     ; If both d0 and d1 are -1 it acts like gemaStopAll
(1)  374/     390 :                     ; --------------------------------------------------------
(1)  375/     390 :                     
(1)  376/     390 :                     gemaStopSeq:
(1)  377/     390 : 6100 FF52           		bsr	sndReq_Enter
(1)  378/     394 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  379/     398 : 6182                		bsr	sndReq_scmd
(1)  380/     39A : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  381/     39C : 6198                		bsr	sndReq_sbyte
(1)  382/     39E : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  383/     3A0 : 6194                		bsr	sndReq_sbyte
(1)  384/     3A2 : 6000 FF64           		bra 	sndReq_Exit
(1)  385/     3A6 :                     
(1)  386/     3A6 :                     ; --------------------------------------------------------
(1)  387/     3A6 :                     ; gemaStopAll
(1)  388/     3A6 :                     ;
(1)  389/     3A6 :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  390/     3A6 :                     ; --------------------------------------------------------
(1)  391/     3A6 :                     
(1)  392/     3A6 :                     gemaStopAll:
(1)  393/     3A6 : 6100 FF3C           		bsr	sndReq_Enter
(1)  394/     3AA : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  395/     3AE : 6100 FF6C           		bsr	sndReq_scmd
(1)  396/     3B2 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  397/     3B4 : 6180                		bsr	sndReq_sbyte
(1)  398/     3B6 : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  399/     3B8 : 6100 FF7C           		bsr	sndReq_sbyte
(1)  400/     3BC : 6000 FF4A           		bra 	sndReq_Exit
(1)  401/     3C0 :                     
(1)  402/     3C0 :                     ; --------------------------------------------------------
(1)  403/     3C0 :                     ; gemaFadeSeq
(1)  404/     3C0 :                     ;
(1)  405/     3C0 :                     ; Set Master volume to a track slot.
(1)  406/     3C0 :                     ;
(1)  407/     3C0 :                     ; Input:
(1)  408/     3C0 :                     ; d0.b | Target volume
(1)  409/     3C0 :                     ; d1.b | Playback slot number
(1)  410/     3C0 :                     ;        If -1: Apply to all slots
(1)  411/     3C0 :                     ;
(1)  412/     3C0 :                     ; Notes:
(1)  413/     3C0 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  414/     3C0 :                     ; - v1.0: This only works on (re)start
(1)  415/     3C0 :                     ;   or during new notes on playback.
(1)  416/     3C0 :                     ; --------------------------------------------------------
(1)  417/     3C0 :                     
(1)  418/     3C0 :                     gemaFadeSeq:
(1)  419/     3C0 : 6100 FF22           		bsr	sndReq_Enter
(1)  420/     3C4 : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  421/     3C8 : 6100 FF52           		bsr	sndReq_scmd
(1)  422/     3CC : 1E00                		move.b	d0,d7		; d0.b Target volume
(1)  423/     3CE : 6100 FF66           		bsr	sndReq_sbyte
(1)  424/     3D2 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  425/     3D4 : 6100 FF60           		bsr	sndReq_sbyte
(1)  426/     3D8 : 6000 FF2E           		bra 	sndReq_Exit
(1)  427/     3DC :                     
(1)  428/     3DC :                     ; --------------------------------------------------------
(1)  429/     3DC :                     ; gemaSetSeqVol
(1)  430/     3DC :                     ;
(1)  431/     3DC :                     ; Set Master volume to a Seq slot.
(1)  432/     3DC :                     ;
(1)  433/     3DC :                     ; Input:
(1)  434/     3DC :                     ; d0.b | Master volume: $00-max $40-min
(1)  435/     3DC :                     ; d1.b | Playback slot number
(1)  436/     3DC :                     ;        If -1: Set to all slots
(1)  437/     3DC :                     ;
(1)  438/     3DC :                     ; Notes:
(1)  439/     3DC :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  440/     3DC :                     ; - v1.0: This only works on (re)start
(1)  441/     3DC :                     ;   or during new notes on playback.
(1)  442/     3DC :                     ; --------------------------------------------------------
(1)  443/     3DC :                     
(1)  444/     3DC :                     gemaSetSeqVol:
(1)  445/     3DC : 6100 FF06           		bsr	sndReq_Enter
(1)  446/     3E0 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  447/     3E4 : 6100 FF36           		bsr	sndReq_scmd
(1)  448/     3E8 : 1E00                		move.b	d0,d7		; d1.b Volume data <--
(1)  449/     3EA : 6100 FF4A           		bsr	sndReq_sbyte
(1)  450/     3EE : 1E01                		move.b	d1,d7		; d0.b Slot
(1)  451/     3F0 : 6100 FF44           		bsr	sndReq_sbyte
(1)  452/     3F4 : 6000 FF12           		bra 	sndReq_Exit
(1)  453/     3F8 :                     
(1)  454/     3F8 :                     ; --------------------------------------------------------
(1)  455/     3F8 :                     ; gemaSetBeats
(1)  456/     3F8 :                     ;
(1)  457/     3F8 :                     ; Set global sub-beats
(1)  458/     3F8 :                     ;
(1)  459/     3F8 :                     ; Input:
(1)  460/     3F8 :                     ; d0.w | Sub-beats value
(1)  461/     3F8 :                     ;
(1)  462/     3F8 :                     ; Note:
(1)  463/     3F8 :                     ; If the Z80 is running in PAL mode the number will
(1)  464/     3F8 :                     ; change inside the Z80 to match the PAL's speed.
(1)  465/     3F8 :                     ; --------------------------------------------------------
(1)  466/     3F8 :                     
(1)  467/     3F8 :                     gemaSetBeats:
(1)  468/     3F8 : 6100 FEEA           		bsr	sndReq_Enter
(1)  469/     3FC : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  470/     400 : 6100 FF1A           		bsr	sndReq_scmd
(1)  471/     404 : 3E00                		move.w	d0,d7		; d0.w Sub-beat value
(1)  472/     406 : 6100 FF2A           		bsr	sndReq_sword
(1)  473/     40A : 6000 FEFC           		bra 	sndReq_Exit
(1)  474/     40E :                     
     193/     40E :                     		include	"system/md/video.asm"
(1)    1/     40E :                     ; ===========================================================================
(1)    2/     40E :                     ; ----------------------------------------------------------------
(1)    3/     40E :                     ; Genesis VDP section
(1)    4/     40E :                     ; ----------------------------------------------------------------
(1)    5/     40E :                     
(1)    6/     40E :                     ; ====================================================================
(1)    7/     40E :                     ; --------------------------------------------------------
(1)    8/     40E :                     ; Settings
(1)    9/     40E :                     ; --------------------------------------------------------
(1)   10/     40E :                     
(1)   11/     40E : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/     40E : =$18                 MAX_MDMAPSPR		equ 24		; VDP Sprites with map data
(1)   13/     40E : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/     40E :                     
(1)   15/     40E : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/     40E : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/     40E : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/     40E : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/     40E : =$6000               DEF_PrintPal		equ $6000
(1)   20/     40E :                     
(1)   21/     40E : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/     40E :                     
(1)   23/     40E :                     ; ===================================================================
(1)   24/     40E :                     ; --------------------------------------------------------
(1)   25/     40E :                     ; Variables
(1)   26/     40E :                     ; --------------------------------------------------------
(1)   27/     40E :                     
(1)   28/     40E :                     ; VDPATT_PL0		equ $0000
(1)   29/     40E : =$2000               VDPATTR_PL1		equ $2000
(1)   30/     40E : =$4000               VDPATTR_PL2		equ $4000
(1)   31/     40E : =$6000               VDPATTR_PL3		equ $6000
(1)   32/     40E : =$8000               VDPATTR_HI		equ $8000
(1)   33/     40E :                     
(1)   34/     40E :                     ; ------------------------------------------------
(1)   35/     40E :                     ; Use these if you are not planning changing
(1)   36/     40E :                     ; the VRAM locations of the scrolling area(s)
(1)   37/     40E :                     ; ------------------------------------------------
(1)   38/     40E : =$C000               DEF_VRAM_FG		equ $C000
(1)   39/     40E : =$E000               DEF_VRAM_BG		equ $E000
(1)   40/     40E : =$D000               DEF_VRAM_WD		equ $D000
(1)   41/     40E : =$F800               DEF_VRAM_SPR		equ $F800
(1)   42/     40E : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   43/     40E :                     
(1)   44/     40E :                     ; ------------------------------------------------
(1)   45/     40E :                     ; H sizes for the current layer
(1)   46/     40E :                     ;
(1)   47/     40E :                     ; Note:
(1)   48/     40E :                     ; WINDOW's width changes between H32 and H40
(1)   49/     40E :                     ; resolution modes.
(1)   50/     40E :                     ; ------------------------------------------------
(1)   51/     40E : =$40                 DEF_HSIZE_32		equ $040
(1)   52/     40E : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   53/     40E : =$100                DEF_HSIZE_128		equ $100
(1)   54/     40E :                     
(1)   55/     40E :                     ; ------------------------------------------------
(1)   56/     40E :                     ; VDP registers
(1)   57/     40E :                     ; ------------------------------------------------
(1)   58/     40E :                     ; $80
(1)   59/     40E : =$2                  HVStop			equ $02
(1)   60/     40E : =$10                 HintEnbl		equ $10
(1)   61/     40E : =$1                  bitHVStop		equ 1
(1)   62/     40E : =$4                  bitHintEnbl		equ 4
(1)   63/     40E :                     ; $81
(1)   64/     40E : =$40                 DispEnbl 		equ $40
(1)   65/     40E : =$20                 VintEnbl 		equ $20
(1)   66/     40E : =$10                 DmaEnbl			equ $10
(1)   67/     40E : =$6                  bitDispEnbl		equ 6
(1)   68/     40E : =$5                  bitVintEnbl		equ 5
(1)   69/     40E : =$4                  bitDmaEnbl		equ 4
(1)   70/     40E : =$3                  bitV30			equ 3
(1)   71/     40E :                     
(1)   72/     40E :                     ; ------------------------------------------------
(1)   73/     40E :                     ; VDP VRAM bits
(1)   74/     40E :                     ; ------------------------------------------------
(1)   75/     40E :                     ; BYTE read:
(1)   76/     40E : =$7                  bitAttrPrio		equ 7
(1)   77/     40E : =$4                  bitAttrV		equ 4
(1)   78/     40E : =$3                  bitAttrH		equ 3
(1)   79/     40E :                     ; WORD read:
(1)   80/     40E : =$8000               AttrPrio		equ $8000
(1)   81/     40E : =$1000               AttrV			equ $1000
(1)   82/     40E : =$800                AttrH			equ $0800
(1)   83/     40E :                     
(1)   84/     40E :                     ; ------------------------------------------------
(1)   85/     40E :                     ; vdp_ctrl READ bits
(1)   86/     40E :                     ; Read as WORD
(1)   87/     40E :                     ; ------------------------------------------------
(1)   88/     40E : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   89/     40E : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   90/     40E : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   91/     40E : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   92/     40E : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   93/     40E : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   94/     40E : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   95/     40E : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   96/     40E : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   97/     40E : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)   98/     40E :                     
(1)   99/     40E :                     ; ====================================================================
(1)  100/     40E :                     ; ----------------------------------------------------------------
(1)  101/     40E :                     ; Structs
(1)  102/     40E :                     ; ----------------------------------------------------------------
(1)  103/     40E :                     
(1)  104/     40E :                     ; ------------------------------------------------
(1)  105/     40E :                     ; RAM_PalFadeList
(1)  106/       0 :                     palfd			struct
(1)  107/       0 :                     req			ds.b 1
(1)  108/       1 :                     delay			ds.b 1
(1)  109/       2 :                     start			ds.b 1
(1)  110/       3 :                     incr			ds.b 1
(1)  111/       4 :                     target			ds.b 1
(1)  112/       5 :                     timer			ds.b 1
(1)  113/       6 :                     num			ds.w 1
(1)  114/       8 :                     ; len		ds.l 0
(1)  115/     40E : =$8                  			endstruct
(1)  116/     40E :                     
(1)  117/     40E :                     ; ------------------------------------------------
(1)  118/     40E :                     ; RAM_MdMcd_Stamps
(1)  119/     40E :                     
(1)  120/       0 :                     mdstmp		struct
(1)  121/       0 :                     flags		ds.w 1		; Flags settings/status
(1)  122/       2 :                     vramMain	ds.w 1		; Main VRAM output *full*
(1)  123/       4 :                     vramSec		ds.w 1		; Secondary VRAM output *full*
(1)  124/       6 :                     vramSize	ds.w 1
(1)  125/       8 :                     vramLen		ds.w 1		; temporals
(1)  126/       A :                     vramIncr	ds.w 1		; ''
(1)  127/       C :                     stmpoutb	ds.w 1
(1)  128/       E :                     currOutFlip	ds.w 1
(1)  129/      10 :                     fdrop		ds.w 1
(1)  130/      12 :                     cellstorage	ds.l 1
(1)  131/      16 :                     dotIncr		ds.l 1
(1)  132/      1A :                     buffIncr	ds.l 1
(1)  133/      1E :                     ; len		ds.l 0
(1)  134/     40E : =$1E                 		endstruct
(1)  135/     40E :                     
(1)  136/     40E :                     ; ====================================================================
(1)  137/     40E :                     ; ----------------------------------------------------------------
(1)  138/     40E :                     ; RAM section
(1)  139/     40E :                     ; ----------------------------------------------------------------
(1)  140/     40E :                     
(1)  141/     40E : (MACRO)              			memory RAM_MdVideo
(1)  141/     40E : =$40E                GLBL_LASTPC     := *
(1)  141/     40E :                                     dephase
(1)  141/FFFFFFFFFFFFC800 :                                     phase RAM_MDVIDEO
(1)  141/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)  142/FFFFFFFFFFFFC800 :                     	; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFFC800 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  144/FFFFFFFFFFFFC840 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  145/FFFFFFFFFFFFC9C0 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  146/FFFFFFFFFFFFCC40 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  147/FFFFFFFFFFFFD000 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  148/FFFFFFFFFFFFD050 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  149/FFFFFFFFFFFFD550 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  150/FFFFFFFFFFFFD5D0 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  151/FFFFFFFFFFFFD650 :                     ; RAM_VidPrntList		ds.w 3*24			; Video_Print list: Address, Type
(1)  152/FFFFFFFFFFFFD650 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  153/FFFFFFFFFFFFD652 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  154/FFFFFFFFFFFFD654 :                     RAM_SprOffsetX		ds.w 1				; X spriteset position
(1)  155/FFFFFFFFFFFFD656 :                     RAM_SprOffsetY		ds.w 1				; Y spriteset position
(1)  156/FFFFFFFFFFFFD658 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  157/FFFFFFFFFFFFD65C :                     
(1)  158/FFFFFFFFFFFFD65C :                     	; *** Variables NOT cleared DURING SCREEN CHANGES:
(1)  159/FFFFFFFFFFFFD65C :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  160/FFFFFFFFFFFFD7DC :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  161/FFFFFFFFFFFFD7E0 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  162/FFFFFFFFFFFFD7E2 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  163/FFFFFFFFFFFFD7E4 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  164/FFFFFFFFFFFFD7E6 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  165/FFFFFFFFFFFFD7E8 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  166/FFFFFFFFFFFFD7EA :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  167/FFFFFFFFFFFFD7EC :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  168/FFFFFFFFFFFFD7EE :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  169/FFFFFFFFFFFFD7F0 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  170/FFFFFFFFFFFFD7F2 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  171/FFFFFFFFFFFFD7F4 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  172/FFFFFFFFFFFFD7F6 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  173/FFFFFFFFFFFFD7F8 :                     sizeof_mdvid		ds.l 0
(1)  174/FFFFFFFFFFFFD7FC : (MACRO)              			endmemory
(1)  174/    140A :                     .here:          dephase
(1)  174/    140A :                                     ds.b -(.here-GLBL_LASTORG)
(1)  174/     40E :                                     phase GLBL_LASTPC
(1)  175/     40E :                     
(1)  176/     40E :                     ; ====================================================================
(1)  177/     40E :                     ; ----------------------------------------------------------------
(1)  178/     40E :                     ; Initialize Genesis video
(1)  179/     40E :                     ;
(1)  180/     40E :                     ; Uses:
(1)  181/     40E :                     ; d5-d7/a5-a6
(1)  182/     40E :                     ; ----------------------------------------------------------------
(1)  183/     40E :                     
(1)  184/     40E :                     Video_Init:
(1)  185/     40E : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  186/     412 : 7C00                		moveq	#0,d6
(1)  187/     414 : 3E3C 0FF7           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  188/     418 :                     .clr_ram:
(1)  189/     418 : 1CC6                		move.b	d6,(a6)+
(1)  190/     41A : 51CF FFFC           		dbf	d7,.clr_ram
(1)  191/     41E : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6			; Reset the DMA blast list
(1)  192/     422 : 4BFA 005E           		lea	.dma_entry(pc),a5
(1)  193/     426 : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  194/     42A :                     .copy_dma:
(1)  195/     42A : 2CD5                		move.l	(a5),(a6)+
(1)  196/     42C : 2CED 0004           		move.l	4(a5),(a6)+
(1)  197/     430 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  198/     434 : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  199/     438 : 51CF FFF0           		dbf	d7,.copy_dma
(1)  200/     43C : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  201/     440 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  202/     444 :                     .clr_d:
(1)  203/     444 : 429E                		clr.l	(a6)+
(1)  204/     446 : 429E                		clr.l	(a6)+
(1)  205/     448 : 429E                		clr.l	(a6)+
(1)  206/     44A : 429E                		clr.l	(a6)+
(1)  207/     44C : 51CF FFF6           		dbf	d7,.clr_d
(1)  208/     450 :                     
(1)  209/     450 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w			; Reset all these indexes
(1)  210/     454 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1)  211/     458 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  212/     45C :                     .clr_preq:
(1)  213/     45C : 429E                		clr.l	(a6)+
(1)  214/     45E : 429E                		clr.l	(a6)+
(1)  215/     460 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  225/     464 : 4CBA 000F 002A      		movem.w	.def_regset(pc),d0-d3
(1)  226/     46A : 48B8 000F D7F0      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  227/     470 : 23F8 D7F0 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
              476 : 0004             
(1)  228/     478 : 23F8 D7F4 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
              47E : 0004             
(1)  229/     480 : 6018                		bra	Video_Default
(1)  230/     482 :                     
(1)  231/     482 :                     ; --------------------------------------------------------
(1)  232/     482 :                     ; DMA blast base entry
(1)  233/     482 :                     .dma_entry:
(1)  234/     482 : 9400 9300           		dc.w $9400,$9300		; Size
(1)  235/     486 : 9600 9500 9700      		dc.w $9600,$9500,$9700		; Source
(1)  236/     48C : 4000 0080           		dc.l $40000080 			; VDP write with DMA
(1)  237/     490 : 0000                		dc.w $0000			; Patch for the first 4 pixels (SCD/CD32X only)
(1)  238/     492 :                     		align 2
(1)  239/     492 :                     .def_regset:
(1)  240/     492 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
              498 : 8C00             
(1)  241/     49A :                     		align 2
(1)  242/     49A :                     
(1)  243/     49A :                     ; --------------------------------------------------------
(1)  244/     49A :                     ; Video_Default
(1)  245/     49A :                     ; --------------------------------------------------------
(1)  246/     49A :                     
(1)  247/     49A :                     Video_Default:
(1)  257/     49A : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l
              4A0 : 00C0 0004          
(1)  258/     4A4 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02 (failsafe)
              4AA : 0004             
(1)  259/     4AC : 31FC C000 D7E4      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  260/     4B2 : 31FC E000 D7E6      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  261/     4B8 : 31FC D000 D7E8      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  262/     4BE : 31FC F800 D7EA      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  263/     4C4 : 31FC FC00 D7EC      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  264/     4CA : 31FC 1000 D7EE      		move.w	#$1000,(RAM_VdpMapSize).w		; Map size for FG/BG
(1)  265/     4D0 : 6100 0444           		bsr	Video_UpdMapVram
(1)  266/     4D4 : 6100 0492           		bsr	Video_UpdSprHVram
(1)  267/     4D8 : 7001                		moveq	#1,d0					; Size H64 V32
(1)  268/     4DA : 7200                		moveq	#0,d1
(1)  269/     4DC : 6100 04C4           		bsr	Video_SetMapSize
(1)  270/     4E0 : 7001                		moveq	#1,d0					; Resolution 320x224
(1)  271/     4E2 : 7200                		moveq	#0,d1
(1)  272/     4E4 : 6000 03DC           		bra	Video_Resolution
(1)  273/     4E8 :                     
(1)  274/     4E8 :                     ; ====================================================================
(1)  275/     4E8 :                     ; --------------------------------------------------------
(1)  276/     4E8 :                     ; Video_Render
(1)  277/     4E8 :                     ;
(1)  278/     4E8 :                     ; Call this during VBlank to update the VDP visuals
(1)  279/     4E8 :                     ; and process the DMA BLAST list, also resets a
(1)  280/     4E8 :                     ; few variables.
(1)  281/     4E8 :                     ; (This is already called on System_Render)
(1)  282/     4E8 :                     ;
(1)  283/     4E8 :                     ; Uses:
(1)  284/     4E8 :                     ; ALL
(1)  285/     4E8 :                     ; --------------------------------------------------------
(1)  286/     4E8 :                     
(1)  287/     4E8 :                     Video_Render:
(1)  288/     4E8 : 6100 0362           		bsr	Video_DmaOn
(1)  289/     4EC : 6100 1078           		bsr	System_DmaEnter_RAM
(1)  290/     4F0 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  291/     4F6 : 3E38 D7EA           		move.w	(RAM_VdpVramSpr).w,d7
(1)  292/     4FA : 3A38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  293/     4FE : 3C07                		move.w	d7,d6
(1)  294/     500 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  295/     504 : 0047 4000           		ori.w	#$4000,d7
(1)  296/     508 : E55E                		rol.w	#2,d6
(1)  297/     50A : 0246 0003           		andi.w	#%11,d6
(1)  298/     50E : 8C7C 0080           		or.w	#$80,d6
(1)  299/     512 : 3805                		move.w	d5,d4
(1)  300/     514 : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  301/     518 : 0045 4000           		ori.w	#$4000,d5
(1)  302/     51C : E55C                		rol.w	#2,d4
(1)  303/     51E : 0244 0003           		andi.w	#%11,d4
(1)  304/     522 : 887C 0080           		or.w	#$80,d4
(1)  305/     526 : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  306/     52C : 2CBC 96E8 9528      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  307/     532 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  308/     536 : 3C87                		move.w	d7,(a6)
(1)  309/     538 : 3F06                		move.w	d6,-(sp)
(1)  310/     53A : 3C9F                		move.w	(sp)+,(a6)
(1)  311/     53C : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  312/     542 : 2CBC 96E6 9520      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  313/     548 : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  314/     54C : 3C85                		move.w	d5,(a6)
(1)  315/     54E : 3F04                		move.w	d4,-(sp)
(1)  316/     550 : 3C9F                		move.w	(sp)+,(a6)
(1)  317/     552 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  318/     558 : 2CBC 96E8 9500      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  319/     55E : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  320/     562 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  321/     566 : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  322/     56A : 3C9F                		move.w	(sp)+,(a6)
(1)  323/     56C : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  324/     572 : 2CBC 96EA 95A8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  325/     578 : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  326/     57C : 3CBC C000           		move.w	#$C000,(a6)
(1)  327/     580 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  328/     584 : 3C9F                		move.w	(sp)+,(a6)
(1)  329/     586 : 6100 0FE2           		bsr	System_DmaExit_RAM
(1)  330/     58A : 6100 02CC           		bsr	Video_DmaOff
(1)  331/     58E :                     
(1)  332/     58E :                     ; --------------------------------------------------------
(1)  333/     58E :                     ; Struct:
(1)  334/     58E :                     ; dc.w $94xx,$93xx		; Size
(1)  335/     58E :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  336/     58E :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  337/     58E :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  338/     58E : 4A78 D652           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  339/     592 : 6642                		bne.s	.exit
(1)  340/     594 : 4A78 D650           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  341/     598 : 673C                		beq.s	.exit
(1)  342/     59A : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  343/     5A0 : 47F8 D65C           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  344/     5A4 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  345/     5A8 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  346/     5AC : 3887                		move.w	d7,(a4)
(1)  347/     5AE : 6100 0F7C           		bsr	System_DmaEnter_ROM
(1)  348/     5B2 : 4A78 D650           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  349/     5B6 : 6714                		beq.s	.end
(1)  350/     5B8 : 289B                		move.l	(a3)+,(a4)			; Size
(1)  351/     5BA : 289B                		move.l	(a3)+,(a4)			; Source
(1)  352/     5BC : 389B                		move.w	(a3)+,(a4)
(1)  353/     5BE :                     	; CD/CD32X
(1)  366/     5BE : 389B                		move.w	(a3)+,(a4)			; Normal VDP control write
(1)  367/     5C0 : 389B                		move.w	(a3)+,(a4)			; *** CPU freezes ***
(1)  368/     5C2 : D6FC 0002           		adda	#2,a3
(1)  370/     5C6 : 5378 D650           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  371/     5CA : 60E6                		bra.s	.next
(1)  372/     5CC :                     .end:
(1)  373/     5CC : 6100 0F62           		bsr	System_DmaExit_ROM
(1)  374/     5D0 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  375/     5D4 : 3887                		move.w	d7,(a4)
(1)  376/     5D6 :                     .exit:
(1)  377/     5D6 : 4E75                		rts
(1)  378/     5D8 :                     
(1)  379/     5D8 :                     ; ====================================================================
(1)  380/     5D8 :                     ; --------------------------------------------------------
(1)  381/     5D8 :                     ; Video_BuildSprites
(1)  382/     5D8 :                     ;
(1)  383/     5D8 :                     ; Build VDP Sprite pieces and maps
(1)  384/     5D8 :                     ; --------------------------------------------------------
(1)  385/     5D8 :                     
(1)  386/     5D8 :                     Video_BuildSprites:
(1)  387/     5D8 : 31FC 0001 D7E2      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  388/     5DE : 4DF8 D050           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  389/     5E2 : 3C38 D7E2           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  390/     5E6 : BC7C 0050           		cmp.w	#80,d6
(1)  391/     5EA : 6C00 017C           		bge	.stop_all
(1)  392/     5EE : 3A06                		move.w	d6,d5
(1)  393/     5F0 : 5345                		subq.w	#1,d5
(1)  394/     5F2 : 6B04                		bmi	.first_spr
(1)  395/     5F4 : E74D                		lsl.w	#3,d5
(1)  396/     5F6 : DCC5                		adda	d5,a6
(1)  397/     5F8 :                     .first_spr:
(1)  398/     5F8 : 4BF8 C9C0           		lea	(RAM_SprPzList).w,a5
(1)  399/     5FC : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  400/     600 :                     .next_pz:
(1)  401/     600 : 0C46 0050           		cmpi.w	#80,d6
(1)  402/     604 : 6E00 0162           		bgt	.stop_all
(1)  403/     608 : 0815 0007           		btst	#7,(a5)
(1)  404/     60C : 6722                		beq	.no_slot_s
(1)  405/     60E : 3015                		move.w	(a5),d0				; This slot is used?
(1)  406/     610 : 3200                		move.w	d0,d1
(1)  407/     612 : 0241 3C00           		andi.w	#$3C00,d1
(1)  408/     616 : E449                		lsr.w	#2,d1
(1)  409/     618 : D246                		add.w	d6,d1
(1)  410/     61A : 342D 0004           		move.w	4(a5),d2
(1)  411/     61E : 362D 0002           		move.w	2(a5),d3
(1)  412/     622 : 0240 03FF           		andi.w	#$03FF,d0
(1)  413/     626 : 3CC0                		move.w	d0,(a6)+
(1)  414/     628 : 3CC1                		move.w	d1,(a6)+
(1)  415/     62A : 3CC2                		move.w	d2,(a6)+
(1)  416/     62C : 3CC3                		move.w	d3,(a6)+
(1)  417/     62E : 5246                		addq.w	#1,d6
(1)  418/     630 :                     .no_slot_s:
(1)  419/     630 : DAFC 0008           		adda	#$08,a5
(1)  420/     634 : 51CF FFCA           		dbf	d7,.next_pz
(1)  421/     638 : 4BF8 C840           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  422/     63C : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  423/     640 :                     .next:
(1)  424/     640 : 0815 0007           		btst	#7,(a5)
(1)  425/     644 : 6700 0118           		beq	.no_map
(1)  426/     648 : 2055                		move.l	(a5),a0
(1)  427/     64A : 4847                		swap	d7
(1)  428/     64C : 7000                		moveq	#0,d0
(1)  429/     64E : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  430/     652 : D040                		add.w	d0,d0
(1)  431/     654 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  432/     658 : 41F0 0000           		lea	(a0,d0.w),a0
(1)  433/     65C : 3A18                		move.w	(a0)+,d5
(1)  434/     65E : 6700 00FE           		beq	.no_map
(1)  435/     662 : 5345                		subq.w	#1,d5
(1)  436/     664 :                     .mk_pz:
(1)  437/     664 : 0C46 0050           		cmpi.w	#80,d6
(1)  438/     668 : 6E00 00FE           		bgt	.stop_all
(1)  439/     66C : 4845                		swap	d5
(1)  440/     66E : 4846                		swap	d6
(1)  441/     670 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  442/     672 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  443/     674 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  444/     676 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  445/     67C : 6710                		beq.s	.ex_vram
(1)  446/     67E : 3801                		move.w	d1,d4
(1)  447/     680 : 0241 000C           		andi.w	#%1100,d1
(1)  448/     684 : 0244 0003           		andi.w	#%0011,d4
(1)  449/     688 : E24C                		lsr.w	#1,d4
(1)  450/     68A : 8244                		or.w	d4,d1
(1)  451/     68C : E24A                		lsr.w	#1,d2
(1)  452/     68E :                     .ex_vram:
(1)  453/     68E : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  454/     692 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  455/     694 : 4880                		ext.w	d0
(1)  456/     696 : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  457/     69A : 3805                		move.w	d5,d4
(1)  458/     69C : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  459/     6A2 : 670E                		beq.s	.ex_vrams
(1)  460/     6A4 : 3805                		move.w	d5,d4
(1)  461/     6A6 : 0244 F800           		andi.w	#$F800,d4
(1)  462/     6AA : 0245 07FF           		andi.w	#$07FF,d5
(1)  463/     6AE : E24D                		lsr.w	#1,d5
(1)  464/     6B0 : 8A44                		or.w	d4,d5
(1)  465/     6B2 :                     .ex_vrams:
(1)  466/     6B2 : 3805                		move.w	d5,d4
(1)  467/     6B4 : 0244 1000           		andi.w	#$1000,d4
(1)  468/     6B8 : 6710                		beq.s	.vram_v
(1)  469/     6BA : 4440                		neg.w	d0
(1)  470/     6BC : 0440 0008           		subi.w	#8,d0
(1)  471/     6C0 : 3C01                		move.w	d1,d6
(1)  472/     6C2 : 0246 0003           		andi.w	#%0011,d6
(1)  473/     6C6 : E74E                		lsl.w	#3,d6
(1)  474/     6C8 : 9046                		sub.w	d6,d0
(1)  475/     6CA :                     .vram_v:
(1)  476/     6CA : 3805                		move.w	d5,d4
(1)  477/     6CC : 0244 0800           		andi.w	#$0800,d4
(1)  478/     6D0 : 6710                		beq.s	.vram_h
(1)  479/     6D2 : 4443                		neg.w	d3
(1)  480/     6D4 : 0443 0008           		subi.w	#8,d3
(1)  481/     6D8 : 3C01                		move.w	d1,d6
(1)  482/     6DA : 0246 000C           		andi.w	#%1100,d6
(1)  483/     6DE : DC46                		add.w	d6,d6
(1)  484/     6E0 : 9646                		sub.w	d6,d3
(1)  485/     6E2 :                     .vram_h:
(1)  486/     6E2 : D445                		add.w	d5,d2
(1)  487/     6E4 : 4845                		swap	d5
(1)  488/     6E6 : 4846                		swap	d6
(1)  489/     6E8 : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  490/     6EC : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  491/     6F0 : D078 D656           		add.w	(RAM_SprOffsetY).w,d0
(1)  492/     6F4 : 9678 D654           		sub.w	(RAM_SprOffsetX).w,d3
(1)  493/     6F8 : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  494/     6FC : 6C5C                		bge.s	.no_pz
(1)  495/     6FE : 3801                		move.w	d1,d4
(1)  496/     700 : 0244 000C           		andi.w	#%1100,d4
(1)  497/     704 : D844                		add.w	d4,d4
(1)  498/     706 : D87C 0008           		add.w	#8,d4
(1)  499/     70A : 3E03                		move.w	d3,d7
(1)  500/     70C : DE44                		add.w	d4,d7
(1)  501/     70E : 6B4A                		bmi.s	.no_pz
(1)  502/     710 : 383C 00F0           		move.w	#240,d4
(1)  503/     714 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  504/     71A : 6702                		beq.s	.ex_yext
(1)  505/     71C : D844                		add.w	d4,d4
(1)  506/     71E :                     .ex_yext:
(1)  507/     71E : B044                		cmp.w	d4,d0
(1)  508/     720 : 6C38                		bge.s	.no_pz
(1)  509/     722 : 3801                		move.w	d1,d4
(1)  510/     724 : 0244 0003           		andi.w	#%0011,d4
(1)  511/     728 : E74C                		lsl.w	#3,d4
(1)  512/     72A : D87C 0008           		add.w	#8,d4
(1)  513/     72E : 3E00                		move.w	d0,d7
(1)  514/     730 : DE44                		add.w	d4,d7
(1)  515/     732 : 6B26                		bmi.s	.no_pz
(1)  516/     734 : E149                		lsl.w	#8,d1			; Size + Link
(1)  517/     736 : 8246                		or.w	d6,d1
(1)  518/     738 : 0640 0080           		addi.w	#$80,d0
(1)  519/     73C : 3838 D7F6           		move.w	(RAM_VdpRegSetC).w,d4
(1)  520/     740 : 0804 0002           		btst	#2,d4
(1)  521/     744 : 6704                		beq.s	.dont_add
(1)  522/     746 : 0640 0080           		addi.w	#$80,d0
(1)  523/     74A :                     .dont_add:
(1)  524/     74A : 0643 0080           		addi.w	#$80,d3
(1)  525/     74E : 3CC0                		move.w	d0,(a6)+
(1)  526/     750 : 3CC1                		move.w	d1,(a6)+
(1)  527/     752 : 3CC2                		move.w	d2,(a6)+
(1)  528/     754 : 3CC3                		move.w	d3,(a6)+
(1)  529/     756 : DC7C 0001           		add.w	#1,d6
(1)  530/     75A :                     .no_pz:
(1)  531/     75A : 51CD FF08           		dbf	d5,.mk_pz
(1)  532/     75E :                     .no_map:
(1)  533/     75E : DAFC 0010           		adda	#$10,a5
(1)  534/     762 : 4847                		swap	d7
(1)  535/     764 :                     .no_slot:
(1)  536/     764 : 51CF FEDA           		dbf	d7,.next
(1)  537/     768 :                     .stop_all:
(1)  538/     768 : 614A                		bsr	vid_CheckLastSpr
(1)  539/     76A : 31C6 D7E2           		move.w	d6,(RAM_SprLinkNum).w
(1)  540/     76E :                     
(1)  541/     76E :                     ; --------------------------------------------------------
(1)  542/     76E :                     ; Reset slots
(1)  543/     76E :                     ; --------------------------------------------------------
(1)  544/     76E :                     
(1)  545/     76E :                     .freeze:
(1)  546/     76E : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1)  547/     772 : 7E4F                		moveq	#80-1,d7
(1)  548/     774 : 7C08                		moveq	#$08,d6
(1)  549/     776 :                     .chk_spr_r:
(1)  550/     776 : 1A16                		move.b	(a6),d5
(1)  551/     778 : 0805 0007           		btst	#7,d5
(1)  552/     77C : 670C                		beq.s	.no_slot_r
(1)  553/     77E : 0805 0006           		btst	#6,d5
(1)  554/     782 : 6706                		beq.s	.no_slot_r
(1)  555/     784 : 4296                		clr.l	(a6)
(1)  556/     786 : 42AE 0004           		clr.l	4(a6)
(1)  557/     78A :                     .no_slot_r:
(1)  558/     78A : DCC6                		adda	d6,a6
(1)  559/     78C : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  560/     790 : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1)  561/     794 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  562/     796 : 7C10                		moveq	#$10,d6
(1)  563/     798 :                     .chk_spr_mr:
(1)  564/     798 : 1A16                		move.b	(a6),d5
(1)  565/     79A : 0805 0007           		btst	#7,d5
(1)  566/     79E : 670C                		beq.s	.no_slot_mr
(1)  567/     7A0 : 0805 0006           		btst	#6,d5
(1)  568/     7A4 : 6706                		beq.s	.no_slot_mr
(1)  569/     7A6 : 4296                		clr.l	(a6)
(1)  570/     7A8 : 42AE 0004           		clr.l	4(a6)
(1)  571/     7AC :                     .no_slot_mr:
(1)  572/     7AC : DCC6                		adda	d6,a6
(1)  573/     7AE : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  574/     7B2 : 4E75                		rts
(1)  575/     7B4 :                     
(1)  576/     7B4 :                     ; --------------------------------------------------------
(1)  577/     7B4 :                     ; d6 - Current link
(1)  578/     7B4 :                     
(1)  579/     7B4 :                     vid_CheckLastSpr:
(1)  580/     7B4 : 4DF8 D050           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  581/     7B8 : 0C46 0001           		cmpi.w	#1,d6
(1)  582/     7BC : 6710                		beq.s	.blnk_first
(1)  583/     7BE : 0C46 0050           		cmpi.w	#80,d6
(1)  584/     7C2 : 6E10                		bgt.s	.last_one
(1)  585/     7C4 : 3E06                		move.w	d6,d7
(1)  586/     7C6 : 0447 0001           		subi.w	#1,d7
(1)  587/     7CA : E74F                		lsl.w	#3,d7
(1)  588/     7CC : DCC7                		adda	d7,a6
(1)  589/     7CE :                     .blnk_first:
(1)  590/     7CE : 429E                		clr.l	(a6)+
(1)  591/     7D0 : 429E                		clr.l	(a6)+
(1)  592/     7D2 : 6010                		bra.s	.spr_exit
(1)  593/     7D4 :                     .last_one:
(1)  594/     7D4 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  595/     7D8 : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  596/     7DC : 0247 0F00           		andi.w	#$0F00,d7
(1)  597/     7E0 : 3D47 0002           		move.w	d7,2(a6)
(1)  598/     7E4 :                     .spr_exit:
(1)  599/     7E4 : 4E75                		rts
(1)  600/     7E6 :                     
(1)  601/     7E6 :                     ; ====================================================================
(1)  602/     7E6 :                     ; --------------------------------------------------------
(1)  603/     7E6 :                     ; Subroutines
(1)  604/     7E6 :                     ; --------------------------------------------------------
(1)  605/     7E6 :                     
(1)  606/     7E6 :                     ; --------------------------------------------------------
(1)  607/     7E6 :                     ; Video_Clear
(1)  608/     7E6 :                     ;
(1)  609/     7E6 :                     ; Clears VDP VRAM and other RAM sections
(1)  610/     7E6 :                     ;
(1)  611/     7E6 :                     ; Breaks:
(1)  612/     7E6 :                     ; ALL
(1)  613/     7E6 :                     ; --------------------------------------------------------
(1)  614/     7E6 :                     
(1)  615/     7E6 :                     Video_Clear:
(1)  624/     7E6 : 7C00                		moveq	#0,d6
(1)  625/     7E8 : 4DF8 C800           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  626/     7EC : 3E3C 0E57           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  627/     7F0 :                     .clr_me:
(1)  628/     7F0 : 1CC6                		move.b	d6,(a6)+
(1)  629/     7F2 : 51CF FFFC           		dbf	d7,.clr_me
(1)  630/     7F6 : 303C 0000           		move.w	#0,d0
(1)  631/     7FA : 323C 0000           		move.w	#0,d1
(1)  632/     7FE : 343C FFC0           		move.w	#cell_vram($7FE),d2
(1)  633/     802 : 6100 02D6           		bsr	Video_Fill
(1)  634/     806 :                     
(1)  635/     806 :                     ; --------------------------------------------------------
(1)  636/     806 :                     ; Video_ClearScreen
(1)  637/     806 :                     ;
(1)  638/     806 :                     ; Clears ALL 3 map layers.
(1)  639/     806 :                     ; --------------------------------------------------------
(1)  640/     806 :                     
(1)  641/     806 :                     Video_ClearScreen:
(1)  642/     806 : 7000                		moveq	#0,d0
(1)  643/     808 : 3238 D7E4           		move.w	(RAM_VdpVramFG).w,d1
(1)  644/     80C : 3438 D7EE           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  645/     810 : 6100 02C8           		bsr	Video_Fill
(1)  646/     814 : 3238 D7E6           		move.w	(RAM_VdpVramBG).w,d1
(1)  647/     818 : 6100 02C0           		bsr	Video_Fill
(1)  648/     81C : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  649/     820 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  650/     824 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  651/     828 : 6702                		beq.s	.not_small
(1)  652/     82A : D442                		add.w	d2,d2			; Size $1000
(1)  653/     82C :                     .not_small:
(1)  654/     82C : 3238 D7E8           		move.w	(RAM_VdpVramWD).w,d1
(1)  655/     830 : 6000 02A8           		bra	Video_Fill
(1)  656/     834 :                     
(1)  657/     834 :                     ; --------------------------------------------------------
(1)  658/     834 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  659/     834 :                     ;
(1)  660/     834 :                     ; Enable/Disable VDP Display
(1)  661/     834 :                     ; --------------------------------------------------------
(1)  662/     834 :                     
(1)  663/     834 :                     Video_DisplayOn:
(1)  664/     834 : 3F07                		move.w	d7,-(sp)
(1)  665/     836 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  666/     83A : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  667/     83E : 6022                		bra.s	vid_WrtReg01
(1)  668/     840 :                     Video_DisplayOff:
(1)  669/     840 : 3F07                		move.w	d7,-(sp)
(1)  670/     842 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  671/     846 : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  672/     84A : 6016                		bra.s	vid_WrtReg01
(1)  673/     84C :                     
(1)  674/     84C :                     ; --------------------------------------------------------
(1)  675/     84C :                     ; Video_DmaOn, Video_DmaOff
(1)  676/     84C :                     ;
(1)  677/     84C :                     ; Enable/Disable DMA
(1)  678/     84C :                     ; --------------------------------------------------------
(1)  679/     84C :                     
(1)  680/     84C :                     Video_DmaOn:
(1)  681/     84C : 3F07                		move.w	d7,-(sp)
(1)  682/     84E : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  683/     852 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  684/     856 : 600A                		bra.s	vid_WrtReg01
(1)  685/     858 :                     Video_DmaOff:
(1)  686/     858 : 3F07                		move.w	d7,-(sp)
(1)  687/     85A : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  688/     85E : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  689/     862 :                     
(1)  690/     862 :                     ; ------------------------------------------------
(1)  691/     862 :                     
(1)  692/     862 :                     vid_WrtReg01:
(1)  693/     862 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  694/     868 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  695/     86C : 3E1F                		move.w	(sp)+,d7
(1)  696/     86E : 4E75                		rts
(1)  697/     870 :                     
(1)  698/     870 :                     ; --------------------------------------------------------
(1)  699/     870 :                     ; Video_IntEnable
(1)  700/     870 :                     ;
(1)  701/     870 :                     ; Enable or Disable VBlank, HBlank and External
(1)  702/     870 :                     ; interrupts
(1)  703/     870 :                     ;
(1)  704/     870 :                     ; Input:
(1)  705/     870 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  706/     870 :                     ;      | %00000EHV
(1)  707/     870 :                     ;      | E - External
(1)  708/     870 :                     ;      | H - HBlank
(1)  709/     870 :                     ;      | V - VBlank
(1)  710/     870 :                     ;
(1)  711/     870 :                     ; Notes:
(1)  712/     870 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  713/     870 :                     ; --------------------------------------------------------
(1)  714/     870 :                     
(1)  715/     870 :                     Video_IntEnable:
(1)  716/     870 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  717/     874 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  718/     878 : 3C00                		move.w	d0,d6
(1)  719/     87A : 0246 0001           		andi.w	#1,d6			; %--V
(1)  720/     87E : EB4E                		lsl.w	#5,d6
(1)  721/     880 : 8E46                		or.w	d6,d7
(1)  722/     882 : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  723/     886 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  724/     88C : 3E38 D7F0           		move.w	(RAM_VdpRegSet0).w,d7
(1)  725/     890 : 3C00                		move.w	d0,d6
(1)  726/     892 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  727/     896 : E74E                		lsl.w	#3,d6
(1)  728/     898 : 8E46                		or.w	d6,d7
(1)  729/     89A : 31C7 D7F0           		move.w	d7,(RAM_VdpRegSet0).w
(1)  730/     89E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  731/     8A4 : 3E38 D7F4           		move.w	(RAM_VdpRegSetB).w,d7
(1)  732/     8A8 : 3C00                		move.w	d0,d6			; %E--
(1)  733/     8AA : 0246 0004           		andi.w	#%100,d6
(1)  734/     8AE : DC46                		add.w	d6,d6
(1)  735/     8B0 : 8E46                		or.w	d6,d7
(1)  736/     8B2 : 31C7 D7F4           		move.w	d7,(RAM_VdpRegSetB).w
(1)  737/     8B6 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  738/     8BC : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  739/     8C0 : 4E75                		rts
(1)  740/     8C2 :                     
(1)  741/     8C2 :                     ; --------------------------------------------------------
(1)  742/     8C2 :                     ; Video_Resolution
(1)  743/     8C2 :                     ;
(1)  744/     8C2 :                     ; Set video resolution
(1)  745/     8C2 :                     ;
(1)  746/     8C2 :                     ; Input:
(1)  747/     8C2 :                     ; d0.w | $00 - Horizontal 256
(1)  748/     8C2 :                     ;      | $01 - Horizontal 320
(1)  749/     8C2 :                     ;
(1)  750/     8C2 :                     ; d1.w | $00 - Vertical 224
(1)  751/     8C2 :                     ;      | $01 - Vertical 240 (PAL ONLY)
(1)  752/     8C2 :                     ;      | $02 - Double resolution mode
(1)  753/     8C2 :                     ;      | $03 - INVALID
(1)  754/     8C2 :                     ; --------------------------------------------------------
(1)  755/     8C2 :                     
(1)  756/     8C2 :                     Video_Resolution:
(1)  757/     8C2 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  758/     8C6 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  759/     8CA : 0207 00F7           		andi.b	#%11110111,d7
(1)  760/     8CE : 3C01                		move.w	d1,d6
(1)  761/     8D0 : CC7C 0001           		and.w	#1,d6
(1)  762/     8D4 : E74E                		lsl.w	#3,d6
(1)  763/     8D6 : 8E46                		or.w	d6,d7
(1)  764/     8D8 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  765/     8DE : 31C7 D7F2           		move.w	d7,(RAM_VdpRegSet1).w
(1)  766/     8E2 : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1)  767/     8E6 : 0207 0078           		andi.b	#%01111000,d7
(1)  768/     8EA : 3C00                		move.w	d0,d6
(1)  769/     8EC : CC7C 0001           		and.w	#$01,d6
(1)  770/     8F0 : 6704                		beq.s	.ex_bit
(1)  771/     8F2 : 8C7C 0081           		or.w	#$81,d6
(1)  772/     8F6 :                     .ex_bit:
(1)  773/     8F6 : 8E46                		or.w	d6,d7
(1)  774/     8F8 : 3C01                		move.w	d1,d6
(1)  775/     8FA : CC7C 0002           		and.w	#%010,d6
(1)  776/     8FE : 6704                		beq.s	.double
(1)  777/     900 : 8C7C 0004           		or.w	#%100,d6
(1)  778/     904 :                     .double:
(1)  779/     904 : 8E46                		or.w	d6,d7
(1)  780/     906 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  781/     90C : 31C7 D7F6           		move.w	d7,(RAM_VdpRegSetC).w
(1)  782/     910 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  783/     914 : 4E75                		rts
(1)  784/     916 :                     
(1)  785/     916 :                     ; --------------------------------------------------------
(1)  786/     916 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  787/     916 :                     ;
(1)  788/     916 :                     ; Update VRAM locations for FG, BG, Window and
(1)  789/     916 :                     ; the Horizontal scroll
(1)  790/     916 :                     ; --------------------------------------------------------
(1)  791/     916 :                     
(1)  792/     916 :                     Video_UpdMapVram:
(1)  793/     916 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  794/     91A : 3E3C 8200           		move.w	#$8200,d7
(1)  795/     91E : 3C38 D7E4           		move.w	(RAM_VdpVramFG).w,d6
(1)  796/     922 : E04E                		lsr.w	#8,d6
(1)  797/     924 : E44E                		lsr.w	#2,d6
(1)  798/     926 : 0246 0038           		andi.w	#%00111000,d6
(1)  799/     92A : 8E46                		or.w	d6,d7
(1)  800/     92C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  801/     932 : 3E3C 8300           		move.w	#$8300,d7
(1)  802/     936 : 3C38 D7E8           		move.w	(RAM_VdpVramWD).w,d6
(1)  803/     93A : E04E                		lsr.w	#8,d6
(1)  804/     93C : E44E                		lsr.w	#2,d6
(1)  805/     93E : 0246 003E           		andi.w	#%00111110,d6
(1)  806/     942 : 8E46                		or.w	d6,d7
(1)  807/     944 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  808/     94A : 3E3C 8400           		move.w	#$8400,d7
(1)  809/     94E : 3C38 D7E6           		move.w	(RAM_VdpVramBG).w,d6
(1)  810/     952 : E04E                		lsr.w	#8,d6
(1)  811/     954 : EA4E                		lsr.w	#5,d6
(1)  812/     956 : 0246 0007           		andi.w	#%00000111,d6
(1)  813/     95A : 8E46                		or.w	d6,d7
(1)  814/     95C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  815/     962 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  816/     966 : 4E75                		rts
(1)  817/     968 :                     
(1)  818/     968 :                     Video_UpdSprHVram:
(1)  819/     968 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  820/     96C : 3E3C 8500           		move.w	#$8500,d7
(1)  821/     970 : 3C38 D7EA           		move.w	(RAM_VdpVramSpr).w,d6
(1)  822/     974 : E04E                		lsr.w	#8,d6
(1)  823/     976 : E24E                		lsr.w	#1,d6
(1)  824/     978 : 0246 007F           		andi.w	#%01111111,d6
(1)  825/     97C : 8E46                		or.w	d6,d7
(1)  826/     97E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  827/     984 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  828/     988 : 3C38 D7EC           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  829/     98C : E04E                		lsr.w	#8,d6
(1)  830/     98E : E44E                		lsr.w	#2,d6
(1)  831/     990 : 0246 003F           		andi.w	#%00111111,d6
(1)  832/     994 : 8E46                		or.w	d6,d7
(1)  833/     996 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  834/     99C : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  835/     9A0 : 4E75                		rts
(1)  836/     9A2 :                     
(1)  837/     9A2 :                     ; --------------------------------------------------------
(1)  838/     9A2 :                     ; Video_SetMapSize
(1)  839/     9A2 :                     ;
(1)  840/     9A2 :                     ; Set MAP size(s) to FG and BG
(1)  841/     9A2 :                     ;
(1)  842/     9A2 :                     ; Input:
(1)  843/     9A2 :                     ; d0.w | Width: %00 - H32
(1)  844/     9A2 :                     ;      |        %01 - H40
(1)  845/     9A2 :                     ;      |        %11 - H128
(1)  846/     9A2 :                     ;
(1)  847/     9A2 :                     ; d1.w | Height: %00 - V32
(1)  848/     9A2 :                     ;      |         %01 - V40
(1)  849/     9A2 :                     ;      |         %11 - V128
(1)  850/     9A2 :                     ;
(1)  851/     9A2 :                     ; Notes:
(1)  852/     9A2 :                     ; Maximum size for a single layer size
(1)  853/     9A2 :                     ; is $1000
(1)  854/     9A2 :                     ; --------------------------------------------------------
(1)  855/     9A2 :                     
(1)  856/     9A2 :                     Video_SetMapSize:
(1)  857/     9A2 : 48A7 0700           		movem.w	d5-d7,-(sp)
(1)  858/     9A6 : 3E3C 9000           		move.w	#$9000,d7
(1)  859/     9AA : 3C00                		move.w	d0,d6
(1)  860/     9AC : 3A01                		move.w	d1,d5
(1)  861/     9AE : 0246 0003           		andi.w	#%11,d6
(1)  862/     9B2 : 0245 0003           		andi.w	#%11,d5
(1)  863/     9B6 : E94D                		lsl.w	#4,d5
(1)  864/     9B8 : 8C45                		or.w	d5,d6
(1)  865/     9BA : 8E46                		or.w	d6,d7
(1)  866/     9BC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  867/     9C2 : 4C9F 00E0           		movem.w	(sp)+,d5-d7
(1)  868/     9C6 : 4E75                		rts
(1)  869/     9C8 :                     
(1)  870/     9C8 :                     ; --------------------------------------------------------
(1)  871/     9C8 :                     ; Video_LoadArt
(1)  872/     9C8 :                     ;
(1)  873/     9C8 :                     ; Loads VDP graphics using DMA
(1)  874/     9C8 :                     ;
(1)  875/     9C8 :                     ; Input:
(1)  876/     9C8 :                     ; d0.l | Graphics data (NOT a0)
(1)  877/     9C8 :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1)  878/     9C8 :                     ; d2.w | Size:          cell_vram(size)
(1)  879/     9C8 :                     ;
(1)  880/     9C8 :                     ; Notes:
(1)  881/     9C8 :                     ; - For a faster load: call this during VBlank or
(1)  882/     9C8 :                     ;   disable VDP Display temporally.
(1)  883/     9C8 :                     ;
(1)  884/     9C8 :                     ; * 32X Cartridge ONLY:
(1)  885/     9C8 :                     ; - This sets RV bit, make sure your code is
(1)  886/     9C8 :                     ;   running on RAM (already doing here) and the
(1)  887/     9C8 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  888/     9C8 :                     ; --------------------------------------------------------
(1)  889/     9C8 :                     
(1)  890/     9C8 :                     Video_LoadArt:
(1)  891/     9C8 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  892/     9CC : 2E00                		move.l	d0,d7
(1)  893/     9CE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  894/     9D4 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  895/     9DA : 6736                		beq.s	.normal
(1)  896/     9DC : 2A00                		move.l	d0,d5
(1)  897/     9DE : DA42                		add.w	d2,d5
(1)  898/     9E0 : 6430                		bcc.s	.normal
(1)  899/     9E2 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  900/     9E4 : 3C01                		move.w	d1,d6
(1)  901/     9E6 : 2E05                		move.l	d5,d7		; Top
(1)  902/     9E8 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  903/     9EE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  904/     9F4 : 9E80                		sub.l	d0,d7
(1)  905/     9F6 : 6128                		bsr.s	.mk_set
(1)  906/     9F8 : 2A00                		move.l	d0,d5		; Bottom
(1)  907/     9FA : 0685 0001 0000      		addi.l	#$010000,d5
(1)  908/     A00 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  909/     A06 : 2C05                		move.l	d5,d6
(1)  910/     A08 : 9C80                		sub.l	d0,d6
(1)  911/     A0A : 3E02                		move.w	d2,d7
(1)  912/     A0C : 9E46                		sub.w	d6,d7
(1)  913/     A0E : DC41                		add.w	d1,d6
(1)  914/     A10 : 6006                		bra.s	.last_set
(1)  915/     A12 :                     .normal:
(1)  916/     A12 : 2A00                		move.l	d0,d5
(1)  917/     A14 : 3C01                		move.w	d1,d6
(1)  918/     A16 : 3E02                		move.w	d2,d7
(1)  919/     A18 :                     .last_set:
(1)  920/     A18 : 6106                		bsr.s	.mk_set
(1)  921/     A1A : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  922/     A1E : 4E75                		rts
(1)  923/     A20 :                     
(1)  924/     A20 :                     ; d7 - size
(1)  925/     A20 :                     ; d6 - vram
(1)  926/     A20 :                     ; d5 - data
(1)  927/     A20 :                     .mk_set:
(1)  928/     A20 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  929/     A26 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  930/     A2C : 6734                		beq.s	.bad_size
(1)  931/     A2E : 4846                		swap	d6
(1)  932/     A30 : 4845                		swap	d5
(1)  933/     A32 : 3C05                		move.w	d5,d6
(1)  934/     A34 : 4845                		swap	d5
(1)  943/     A36 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  944/     A3C : 2F07                		move.l	d7,-(sp)		; <--
(1)  945/     A3E : 6100 FE0C           		bsr	Video_DmaOn
(1)  946/     A42 : 2E1F                		move.l	(sp)+,d7
(1)  947/     A44 : 0246 00FF           		andi.w	#$FF,d6
(1)  948/     A48 : BC3C 00FF           		cmp.b	#$FF,d6
(1)  949/     A4C : 6716                		beq.s	.ram_write
(1)  950/     A4E : 4846                		swap	d6
(1)  951/     A50 : 6126                		bsr.s	.shared_setup
(1)  952/     A52 : 6100 0AD8           		bsr	System_DmaEnter_ROM
(1)  953/     A56 : 3C86                		move.w	d6,(a6)			; First write
(1)  954/     A58 : 3C87                		move.w	d7,(a6)			; Second write
(1)  955/     A5A : 6100 0AD4           		bsr	System_DmaExit_ROM
(1)  956/     A5E : 6100 FDF8           		bsr	Video_DmaOff
(1)  957/     A62 :                     	; Word-RAM patch
(1)  978/     A62 :                     .bad_size:
(1)  979/     A62 : 4E75                		rts
(1)  980/     A64 :                     
(1)  981/     A64 :                     ; --------------------------------------------------------
(1)  982/     A64 :                     
(1)  983/     A64 :                     .ram_write:
(1)  984/     A64 : 4846                		swap	d6
(1)  985/     A66 : 6110                		bsr.s	.shared_setup
(1)  986/     A68 : 6100 0AFC           		bsr	System_DmaEnter_RAM
(1)  987/     A6C : 3C86                		move.w	d6,(a6)			; First write
(1)  988/     A6E : 3C87                		move.w	d7,(a6)			; Second write
(1)  989/     A70 : 6100 0AF8           		bsr	System_DmaExit_RAM
(1)  990/     A74 : 6000 FDE2           		bra	Video_DmaOff
(1)  991/     A78 :                     
(1)  992/     A78 :                     ; --------------------------------------------------------
(1)  993/     A78 :                     
(1)  994/     A78 :                     .shared_setup:
(1)  995/     A78 : EF8F                		lsl.l	#7,d7
(1)  996/     A7A : E04F                		lsr.w	#8,d7
(1)  997/     A7C : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  998/     A82 : 2C87                		move.l	d7,(a6)
(1)  999/     A84 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1000/     A86 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1) 1001/     A8C : 1E05                 		move.b	d5,d7
(1) 1002/     A8E : E08D                 		lsr.l	#8,d5
(1) 1003/     A90 : 4847                 		swap	d7
(1) 1004/     A92 : 1E05                 		move.b	d5,d7
(1) 1005/     A94 : 2C87                 		move.l	d7,(a6)
(1) 1006/     A96 : 3E3C 9700            		move.w	#$9700,d7
(1) 1007/     A9A : E08D                 		lsr.l	#8,d5
(1) 1008/     A9C : 1E05                 		move.b	d5,d7
(1) 1009/     A9E : 3C87                 		move.w	d7,(a6)
(1) 1010/     AA0 : 3E06                		move.w	d6,d7			; Destination
(1) 1011/     AA2 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1012/     AA8 : 0046 4000           		ori.w	#$4000,d6
(1) 1013/     AAC : E04F                		lsr.w	#8,d7
(1) 1014/     AAE : EC4F                		lsr.w	#6,d7
(1) 1015/     AB0 : 0247 0003           		andi.w	#%11,d7
(1) 1016/     AB4 : 0047 0080           		ori.w	#$80,d7
(1) 1017/     AB8 : 4E75                		rts
(1) 1018/     ABA :                     
(1) 1019/     ABA :                     ; --------------------------------------------------------
(1) 1020/     ABA :                     ; Video_LoadArt_List
(1) 1021/     ABA :                     ;
(1) 1022/     ABA :                     ; Loads VDP graphics on bulk
(1) 1023/     ABA :                     ;
(1) 1024/     ABA :                     ; Input:
(1) 1025/     ABA :                     ; a0 | List of graphics to load:
(1) 1026/     ABA :                     ;        dc.w numof_entries
(1) 1027/     ABA :                     ;        dc.l ART_DATA
(1) 1028/     ABA :                     ;        dc.w cell_vram(vram_pos)
(1) 1029/     ABA :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_vram(size)
(1) 1030/     ABA :                     ;        ; ...more entries
(1) 1031/     ABA :                     ;
(1) 1032/     ABA :                     ; Note:
(1) 1033/     ABA :                     ; CPU heavy.
(1) 1034/     ABA :                     ; --------------------------------------------------------
(1) 1035/     ABA :                     
(1) 1036/     ABA :                     Video_LoadArt_List:
(1) 1037/     ABA : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1038/     ABE : 3E18                		move.w	(a0)+,d7
(1) 1039/     AC0 : 6712                		beq.s	.invalid
(1) 1040/     AC2 : 6B10                		bmi.s	.invalid
(1) 1041/     AC4 : 5347                		subq.w	#1,d7
(1) 1042/     AC6 :                     .next_one:
(1) 1043/     AC6 : 2018                		move.l	(a0)+,d0
(1) 1044/     AC8 : 3218                		move.w	(a0)+,d1
(1) 1045/     ACA : 3418                		move.w	(a0)+,d2
(1) 1046/     ACC : 6100 FEFA           		bsr	Video_LoadArt
(1) 1047/     AD0 : 51CF FFF4           		dbf	d7,.next_one
(1) 1048/     AD4 :                     .invalid:
(1) 1049/     AD4 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1050/     AD8 : 4E75                		rts
(1) 1051/     ADA :                     
(1) 1052/     ADA :                     ; --------------------------------------------------------
(1) 1053/     ADA :                     ; Video_Fill
(1) 1054/     ADA :                     ;
(1) 1055/     ADA :                     ; Fill data to VRAM
(1) 1056/     ADA :                     ;
(1) 1057/     ADA :                     ; Input:
(1) 1058/     ADA :                     ; d0.b | BYTE to fill
(1) 1059/     ADA :                     ; d1.w | VRAM destination: cell_vram(dest)
(1) 1060/     ADA :                     ; d2.w | Size:             cell_vram(size)
(1) 1061/     ADA :                     ;
(1) 1062/     ADA :                     ; Notes:
(1) 1063/     ADA :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1064/     ADA :                     ;   invalid.
(1) 1065/     ADA :                     ; --------------------------------------------------------
(1) 1066/     ADA :                     
(1) 1067/     ADA :                     ; Video_Fill_Incr:
(1) 1068/     ADA :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1069/     ADA :                     ; 		move.w	d3,d6
(1) 1070/     ADA :                     ; 		bra.s	vid_FillGo
(1) 1071/     ADA :                     Video_Fill:
(1) 1072/     ADA : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1073/     ADE : 3C3C 0001           		move.w	#1,d6
(1) 1074/     AE2 :                     vid_FillGo:
(1) 1075/     AE2 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1076/     AE8 : 3E16                .dmaw:		move.w	(a6),d7
(1) 1077/     AEA : 0807 0001           		btst	#bitDma,d7
(1) 1078/     AEE : 66F8                		bne.s	.dmaw
(1) 1079/     AF0 : 6100 FD5A           		bsr	Video_DmaOn
(1) 1080/     AF4 : 0246 00FF           		andi.w	#$FF,d6
(1) 1081/     AF8 : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1082/     AFC : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1083/     AFE : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1084/     B00 : 0447 0001           		subi.w	#1,d7
(1) 1085/     B04 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1086/     B0A : 1C07                		move.b	d7,d6
(1) 1087/     B0C : 4846                		swap	d6
(1) 1088/     B0E : E04F                		lsr.w	#8,d7
(1) 1089/     B10 : 1C07                		move.b	d7,d6
(1) 1090/     B12 : 4846                		swap	d6
(1) 1091/     B14 : 2C86                		move.l	d6,(a6)
(1) 1092/     B16 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1093/     B1A : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1094/     B1C : 3C01                		move.w	d1,d6
(1) 1095/     B1E : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1096/     B22 : 0046 4000           		ori.w	#$4000,d6
(1) 1097/     B26 : 4846                		swap	d6
(1) 1098/     B28 : 3C07                		move.w	d7,d6
(1) 1099/     B2A : E04E                		lsr.w	#8,d6
(1) 1100/     B2C : EC4E                		lsr.w	#6,d6
(1) 1101/     B2E : 0246 0003           		andi.w	#%11,d6
(1) 1102/     B32 : 0046 0080           		ori.w	#$80,d6
(1) 1103/     B36 : 2C86                		move.l	d6,(a6)
(1) 1104/     B38 : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1105/     B3C : 3E16                .dma_w:		move.w	(a6),d7
(1) 1106/     B3E : 0807 0001           		btst	#bitDma,d7
(1) 1107/     B42 : 66F8                		bne.s	.dma_w
(1) 1108/     B44 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1109/     B48 : 6100 FD0E           		bsr	Video_DmaOff
(1) 1110/     B4C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1111/     B50 : 4E75                		rts
(1) 1112/     B52 :                     
(1) 1113/     B52 :                     ; --------------------------------------------------------
(1) 1114/     B52 :                     ; Video_Copy
(1) 1115/     B52 :                     ;
(1) 1116/     B52 :                     ; Copy VRAM data to another location inside VRAM
(1) 1117/     B52 :                     ;
(1) 1118/     B52 :                     ; Input:
(1) 1119/     B52 :                     ; d0.w | VRAM Source: cell_vram(src)
(1) 1120/     B52 :                     ; d1.w | VRAM Destination: cell_vram(dest)
(1) 1121/     B52 :                     ; d2.w | Size
(1) 1122/     B52 :                     ; --------------------------------------------------------
(1) 1123/     B52 :                     
(1) 1124/     B52 :                     Video_Copy:
(1) 1125/     B52 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1126/     B56 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1127/     B5C : 3E16                .dmaw:		move.w	(a6),d7
(1) 1128/     B5E : 0807 0001           		btst	#bitDma,d7
(1) 1129/     B62 : 66F8                		bne.s	.dmaw
(1) 1130/     B64 : 6100 FCE6           		bsr	Video_DmaOn
(1) 1131/     B68 : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1132/     B6C : 3E02                		move.w	d2,d7			; SIZE
(1) 1133/     B6E : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1134/     B74 : 1C07                		move.b	d7,d6
(1) 1135/     B76 : 4846                		swap	d6
(1) 1136/     B78 : E04F                		lsr.w	#8,d7
(1) 1137/     B7A : 1C07                		move.b	d7,d6
(1) 1138/     B7C : 4846                		swap	d6
(1) 1139/     B7E : 2C86                		move.l	d6,(a6)
(1) 1140/     B80 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1141/     B86 : 3E00                		move.w	d0,d7
(1) 1142/     B88 : 1C07                		move.b	d7,d6
(1) 1143/     B8A : 4846                		swap	d6
(1) 1144/     B8C : E04F                		lsr.w	#8,d7
(1) 1145/     B8E : 1C07                		move.b	d7,d6
(1) 1146/     B90 : 2C86                		move.l	d6,(a6)
(1) 1147/     B92 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1148/     B96 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1149/     B98 : 3C07                		move.w	d7,d6
(1) 1150/     B9A : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1151/     B9E : 0046 4000           		ori.w	#$4000,d6
(1) 1152/     BA2 : 4846                		swap	d6
(1) 1153/     BA4 : 3C07                		move.w	d7,d6
(1) 1154/     BA6 : E04E                		lsr.w	#8,d6
(1) 1155/     BA8 : EC4E                		lsr.w	#6,d6
(1) 1156/     BAA : 0246 0003           		andi.w	#%11,d6
(1) 1157/     BAE : 0046 00C0           		ori.w	#$C0,d6
(1) 1158/     BB2 : 2C86                		move.l	d6,(a6)
(1) 1159/     BB4 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1160/     BB8 : 3E16                .dma_w:		move.w	(a6),d7
(1) 1161/     BBA : 0807 0001           		btst	#bitDma,d7
(1) 1162/     BBE : 66F8                		bne.s	.dma_w
(1) 1163/     BC0 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1164/     BC4 : 6100 FC92           		bsr	Video_DmaOff
(1) 1165/     BC8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1166/     BCC : 4E75                		rts
(1) 1167/     BCE :                     
(1) 1168/     BCE :                     ; --------------------------------------------------------
(1) 1169/     BCE :                     ; Video_MakeDmaEntry
(1) 1170/     BCE :                     ;
(1) 1171/     BCE :                     ; Makes a new entry to the DMA BLAST list
(1) 1172/     BCE :                     ; to be processed on the next VBlank
(1) 1173/     BCE :                     ;
(1) 1174/     BCE :                     ; Input:
(1) 1175/     BCE :                     ; d0.l | Graphics data location
(1) 1176/     BCE :                     ; d1.w | VRAM location: cell_vram(vram_pos)
(1) 1177/     BCE :                     ; d2.w | Size
(1) 1178/     BCE :                     ;
(1) 1179/     BCE :                     ; Notes:
(1) 1180/     BCE :                     ; - Call this during DISPLAY only
(1) 1181/     BCE :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1182/     BCE :                     ;
(1) 1183/     BCE :                     ; * SCD/CD32X ONLY:
(1) 1184/     BCE :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1185/     BCE :                     ;   if not reading from WORD-RAM
(1) 1186/     BCE :                     ; --------------------------------------------------------
(1) 1187/     BCE :                     
(1) 1188/     BCE :                     Video_MakeDmaEntry:
(1) 1189/     BCE : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1190/     BD2 : 2E00                		move.l	d0,d7
(1) 1191/     BD4 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1192/     BDA : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1193/     BE0 : 6736                		beq.s	.normal
(1) 1194/     BE2 : 2A00                		move.l	d0,d5
(1) 1195/     BE4 : DA42                		add.w	d2,d5
(1) 1196/     BE6 : 6430                		bcc.s	.normal
(1) 1197/     BE8 : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1198/     BEA : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1199/     BEC : 2E05                		move.l	d5,d7
(1) 1200/     BEE : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1201/     BF4 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1202/     BFA : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1203/     BFC : 6128                		bsr.s	.mk_set
(1) 1204/     BFE : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1205/     C00 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1206/     C06 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1207/     C0C : 2C05                		move.l	d5,d6
(1) 1208/     C0E : 9C80                		sub.l	d0,d6
(1) 1209/     C10 : 3E02                		move.w	d2,d7
(1) 1210/     C12 : 9E46                		sub.w	d6,d7
(1) 1211/     C14 : DC41                		add.w	d1,d6
(1) 1212/     C16 : 6006                		bra.s	.last_set
(1) 1213/     C18 :                     .normal:
(1) 1214/     C18 : 2A00                		move.l	d0,d5
(1) 1215/     C1A : 3C01                		move.w	d1,d6
(1) 1216/     C1C : 3E02                		move.w	d2,d7
(1) 1217/     C1E :                     .last_set:
(1) 1218/     C1E : 6106                		bsr.s	.mk_set
(1) 1219/     C20 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1220/     C24 : 4E75                		rts
(1) 1221/     C26 :                     
(1) 1222/     C26 :                     ; d7 - size
(1) 1223/     C26 :                     ; d6 - vram
(1) 1224/     C26 :                     ; d5 - data
(1) 1225/     C26 :                     .mk_set:
(1) 1226/     C26 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1227/     C2C : 4847                		swap	d7
(1) 1228/     C2E : 3E38 D650           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1229/     C32 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1230/     C36 : 6C5A                		bge	.ran_out
(1) 1231/     C38 : E94F                		lsl.w	#4,d7			; Size $10
(1) 1232/     C3A : 4DF8 D65C           		lea	(RAM_VdpDmaList).w,a6
(1) 1233/     C3E : DCC7                		adda	d7,a6
(1) 1234/     C40 : 4847                		swap	d7
(1) 1235/     C42 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1236/     C48 : 6748                		beq.s	.ran_out		; If == 0, bad
(1) 1237/     C4A : 4A47                		tst.w	d7
(1) 1238/     C4C : 6B44                		bmi.s	.ran_out		; If negative, bad
(1) 1239/     C4E : 31FC 0001 D652      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1240/     C54 : 5278 D650           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1241/     C58 : E24F                		lsr.w	#1,d7
(1) 1242/     C5A : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1252/     C5E : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1253/     C60 : 2E05                  		move.l	d5,d7
(1) 1254/     C62 : 4847                  		swap	d7
(1) 1255/     C64 : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1256/     C68 : 1D47 0009            		move.b	d7,9(a6)
(1) 1257/     C6C : 3E06                		move.w	d6,d7			; Destination
(1) 1258/     C6E : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1259/     C74 : 0046 4000           		ori.w	#$4000,d6
(1) 1260/     C78 : E04F                		lsr.w	#8,d7
(1) 1261/     C7A : EC4F                		lsr.w	#6,d7
(1) 1262/     C7C : 0247 0003           		andi.w	#%11,d7
(1) 1263/     C80 : 0047 0080           		ori.w	#$80,d7
(1) 1264/     C84 : 3D46 000A           		move.w	d6,$A(a6)
(1) 1265/     C88 : 3D47 000C           		move.w	d7,$C(a6)
(1) 1273/     C8C : 31FC 0000 D652      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1274/     C92 :                     .ran_out:
(1) 1275/     C92 : 4E75                		rts
(1) 1276/     C94 :                     
(1) 1277/     C94 :                     ; ====================================================================
(1) 1278/     C94 :                     ; --------------------------------------------------------
(1) 1279/     C94 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1280/     C94 :                     ;
(1) 1281/     C94 :                     ; Write map data to VDP
(1) 1282/     C94 :                     ;
(1) 1283/     C94 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1284/     C94 :                     ; _LoadMapV: Top to Bottom / Left to Right
(1) 1285/     C94 :                     ;
(1) 1286/     C94 :                     ; Input:
(1) 1287/     C94 :                     ; a0   | Map data
(1) 1288/     C94 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1289/     C94 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1290/     C94 :                     ; d2.l | Screen Width/VRAM location:
(1) 1291/     C94 :                     ;        splitw(sw_size,vram_loc)
(1) 1292/     C94 :                     ; d3.w | VRAM-cell increment
(1) 1293/     C94 :                     ;
(1) 1294/     C94 :                     ; Notes:
(1) 1295/     C94 :                     ; - Data starts from 0, Map data $FFFF(-1) is
(1) 1296/     C94 :                     ;   used to place the BLANK tile, see SET_NullVram.
(1) 1297/     C94 :                     ; * SCD/CD32X ONLY:
(1) 1298/     C94 :                     ; - For making the dot-screen map see
(1) 1299/     C94 :                     ;   Video_MdMcd_StampDotMap
(1) 1300/     C94 :                     ; --------------------------------------------------------
(1) 1301/     C94 :                     
(1) 1302/     C94 :                     Video_LoadMap:
(1) 1303/     C94 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1304/     C98 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1305/     C9E :                     
(1) 1306/     C9E : 2C02                		move.l	d2,d6
(1) 1307/     CA0 : 4846                		swap	d6
(1) 1308/     CA2 : 3A00                		move.w	d0,d5
(1) 1309/     CA4 : CAC6                		mulu.w	d6,d5
(1) 1310/     CA6 : 2800                		move.l	d0,d4
(1) 1311/     CA8 : 4844                		swap	d4
(1) 1312/     CAA : D844                		add.w	d4,d4
(1) 1313/     CAC : DA44                		add.w	d4,d5
(1) 1314/     CAE : 3E02                		move.w	d2,d7
(1) 1315/     CB0 : DE45                		add.w	d5,d7
(1) 1316/     CB2 : 7A00                		moveq	#0,d5
(1) 1317/     CB4 : 3A07                		move.w	d7,d5
(1) 1318/     CB6 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1319/     CBA : 8E7C 4000           		or.w	#$4000,d7
(1) 1320/     CBE : E55D                		rol.w	#2,d5
(1) 1321/     CC0 : 0245 0003           		andi.w	#%11,d5
(1) 1322/     CC4 : 4845                		swap	d5
(1) 1323/     CC6 : 2A48                		move.l	a0,a5
(1) 1324/     CC8 : 3801                		move.w	d1,d4
(1) 1325/     CCA : 5344                		subq.w	#1,d4
(1) 1326/     CCC : 6B36                		bmi.s	.bad_size
(1) 1327/     CCE :                     .y_loop:
(1) 1328/     CCE : 2844                		move.l	d4,a4
(1) 1329/     CD0 : 4845                		swap	d5
(1) 1330/     CD2 : 3D47 0004           		move.w	d7,4(a6)
(1) 1331/     CD6 : 3D45 0004           		move.w	d5,4(a6)
(1) 1332/     CDA : 4845                		swap	d5
(1) 1333/     CDC : 2801                		move.l	d1,d4
(1) 1334/     CDE : 4844                		swap	d4
(1) 1335/     CE0 : 5344                		subq.w	#1,d4
(1) 1336/     CE2 :                     .x_loop:
(1) 1337/     CE2 : 4844                		swap	d4
(1) 1338/     CE4 : 381D                		move.w	(a5)+,d4
(1) 1339/     CE6 : B87C FFFF           		cmp.w	#-1,d4
(1) 1340/     CEA : 6606                		bne.s	.non_blank
(1) 1341/     CEC : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1342/     CF0 : 6002                		bra.s	.mk_cell
(1) 1343/     CF2 :                     .non_blank:
(1) 1344/     CF2 : D843                		add.w	d3,d4
(1) 1345/     CF4 :                     .mk_cell:
(1) 1346/     CF4 : 3C84                		move.w	d4,(a6)
(1) 1347/     CF6 : 4844                		swap	d4
(1) 1348/     CF8 : 51CC FFE8           		dbf	d4,.x_loop
(1) 1349/     CFC : DE46                		add.w	d6,d7
(1) 1350/     CFE : 280C                		move.l	a4,d4
(1) 1351/     D00 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1352/     D04 :                     .bad_size:
(1) 1353/     D04 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1354/     D08 : 4E75                		rts
(1) 1355/     D0A :                     ; ------------------------------------------------
(1) 1356/     D0A :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1357/     D0A :                     ; d2.l | Screen Width/VRAM location:
(1) 1358/     D0A :                     ; d3.w | VRAM-cell increment
(1) 1359/     D0A :                     
(1) 1360/     D0A :                     Video_LoadMapV:
(1) 1361/     D0A : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1362/     D0E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1363/     D14 : 2C02                		move.l	d2,d6
(1) 1364/     D16 : 4846                		swap	d6
(1) 1365/     D18 : 3A00                		move.w	d0,d5
(1) 1366/     D1A : CAC6                		mulu.w	d6,d5
(1) 1367/     D1C : 2800                		move.l	d0,d4
(1) 1368/     D1E : 4844                		swap	d4
(1) 1369/     D20 : D844                		add.w	d4,d4
(1) 1370/     D22 : DA44                		add.w	d4,d5
(1) 1371/     D24 : 3E02                		move.w	d2,d7
(1) 1372/     D26 : DE45                		add.w	d5,d7
(1) 1373/     D28 : 7A00                		moveq	#0,d5
(1) 1374/     D2A : 3A07                		move.w	d7,d5
(1) 1375/     D2C : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1376/     D30 : 8E7C 4000           		or.w	#$4000,d7
(1) 1377/     D34 : E55D                		rol.w	#2,d5
(1) 1378/     D36 : 0245 0003           		andi.w	#%11,d5
(1) 1379/     D3A : 4845                		swap	d5
(1) 1380/     D3C : 2A48                		move.l	a0,a5
(1) 1381/     D3E : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1382/     D44 : 664C                		bne.s	.dble_mode
(1) 1383/     D46 : 2801                		move.l	d1,d4
(1) 1384/     D48 : 4844                		swap	d4
(1) 1385/     D4A : 5344                		subq.w	#1,d4
(1) 1386/     D4C : 6B3E                		bmi.s	.bad_size
(1) 1387/     D4E :                     .x_loop:
(1) 1388/     D4E : 2844                		move.l	d4,a4
(1) 1389/     D50 : 3801                		move.w	d1,d4
(1) 1390/     D52 : 5344                		subq.w	#1,d4
(1) 1391/     D54 :                     .y_loop:
(1) 1392/     D54 : 4844                		swap	d4
(1) 1393/     D56 : 3807                		move.w	d7,d4
(1) 1394/     D58 : D845                		add.w	d5,d4
(1) 1395/     D5A : 4845                		swap	d5
(1) 1396/     D5C : 3D44 0004           		move.w	d4,4(a6)
(1) 1397/     D60 : 3D45 0004           		move.w	d5,4(a6)
(1) 1398/     D64 : 4845                		swap	d5
(1) 1399/     D66 : 381D                		move.w	(a5)+,d4
(1) 1400/     D68 : B87C FFFF           		cmp.w	#-1,d4
(1) 1401/     D6C : 6606                		bne.s	.non_blank
(1) 1402/     D6E : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1403/     D72 : 6002                		bra.s	.mk_cell
(1) 1404/     D74 :                     .non_blank:
(1) 1405/     D74 : D843                		add.w	d3,d4
(1) 1406/     D76 :                     .mk_cell:
(1) 1407/     D76 : 3C84                		move.w	d4,(a6)
(1) 1408/     D78 : DA46                		add.w	d6,d5
(1) 1409/     D7A : 4844                		swap	d4
(1) 1410/     D7C : 51CC FFD6           		dbf	d4,.y_loop
(1) 1411/     D80 : DE7C 0002           		add.w	#2,d7
(1) 1412/     D84 : 4245                		clr.w	d5
(1) 1413/     D86 : 280C                		move.l	a4,d4
(1) 1414/     D88 : 51CC FFC4           		dbf	d4,.x_loop
(1) 1415/     D8C :                     .bad_size:
(1) 1416/     D8C : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1417/     D90 : 4E75                		rts
(1) 1418/     D92 :                     
(1) 1419/     D92 :                     ; ------------------------------------------------
(1) 1420/     D92 :                     
(1) 1421/     D92 :                     .dble_mode:
(1) 1422/     D92 : 2F01                		move.l	d1,-(sp)
(1) 1423/     D94 :                     
(1) 1424/     D94 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1425/     D96 : 3803                		move.w	d3,d4
(1) 1426/     D98 : 0244 F800           		andi.w	#$F800,d4
(1) 1427/     D9C : 0243 07FF           		andi.w	#$7FF,d3
(1) 1428/     DA0 : E24B                		lsr.w	#1,d3
(1) 1429/     DA2 : 8644                		or.w	d4,d3
(1) 1430/     DA4 :                     
(1) 1431/     DA4 : 2801                		move.l	d1,d4
(1) 1432/     DA6 : 4844                		swap	d4
(1) 1433/     DA8 : 5344                		subq.w	#1,d4
(1) 1434/     DAA : 6B48                		bmi.s	.bad_size_d
(1) 1435/     DAC :                     .x_loop_d:
(1) 1436/     DAC : 2844                		move.l	d4,a4
(1) 1437/     DAE : 3801                		move.w	d1,d4
(1) 1438/     DB0 : 5344                		subq.w	#1,d4
(1) 1439/     DB2 :                     .y_loop_d:
(1) 1440/     DB2 : 4844                		swap	d4
(1) 1441/     DB4 : 3807                		move.w	d7,d4
(1) 1442/     DB6 : D845                		add.w	d5,d4
(1) 1443/     DB8 : 4845                		swap	d5
(1) 1444/     DBA : 3D44 0004           		move.w	d4,4(a6)
(1) 1445/     DBE : 3D45 0004           		move.w	d5,4(a6)
(1) 1446/     DC2 : 4845                		swap	d5
(1) 1447/     DC4 : 381D                		move.w	(a5)+,d4
(1) 1448/     DC6 : DAFC 0002           		adda	#2,a5
(1) 1449/     DCA : B87C FFFF           		cmp.w	#-1,d4
(1) 1450/     DCE : 6606                		bne.s	.non_blank_d
(1) 1451/     DD0 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1452/     DD4 : 6008                		bra.s	.mk_cell_d
(1) 1453/     DD6 :                     .non_blank_d:
(1) 1454/     DD6 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1455/     DDA : E24C                		lsr.w	#1,d4
(1) 1456/     DDC : D843                		add.w	d3,d4
(1) 1457/     DDE :                     .mk_cell_d:
(1) 1458/     DDE : 3C84                		move.w	d4,(a6)
(1) 1459/     DE0 : DA46                		add.w	d6,d5
(1) 1460/     DE2 : 4844                		swap	d4
(1) 1461/     DE4 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1462/     DE8 : DE7C 0002           		add.w	#2,d7
(1) 1463/     DEC : 4245                		clr.w	d5
(1) 1464/     DEE : 280C                		move.l	a4,d4
(1) 1465/     DF0 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1466/     DF4 :                     .bad_size_d:
(1) 1467/     DF4 : 221F                		move.l	(sp)+,d1
(1) 1468/     DF6 : 6094                		bra	.bad_size
(1) 1469/     DF8 :                     
(1) 1470/     DF8 :                     ; ====================================================================
(1) 1471/     DF8 :                     ; ----------------------------------------------------------------
(1) 1472/     DF8 :                     ; Palette fading section
(1) 1473/     DF8 :                     ; ----------------------------------------------------------------
(1) 1474/     DF8 :                     
(1) 1475/     DF8 :                     ; --------------------------------------------------------
(1) 1476/     DF8 :                     ; Video_RunFade
(1) 1477/     DF8 :                     ;
(1) 1478/     DF8 :                     ; Process Palette changes (fade and effects)
(1) 1479/     DF8 :                     ; --------------------------------------------------------
(1) 1480/     DF8 :                     
(1) 1481/     DF8 :                     Video_RunFade:
(1) 1482/     DF8 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1483/     DFC :                     .next_req:
(1) 1484/     DFC : 1016                		move.b	palfd_req(a6),d0
(1) 1485/     DFE : 6744                		beq.s	.no_req
(1) 1486/     E00 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1487/     E04 : 6A38                		bpl.s	.busy_timer
(1) 1488/     E06 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1489/     E0C : 4BF8 D550           		lea	(RAM_Palette).w,a5
(1) 1490/     E10 : 49F8 D5D0           		lea	(RAM_PaletteFade).w,a4
(1) 1491/     E14 : 7E00                		moveq	#0,d7
(1) 1492/     E16 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1493/     E1A : DE47                		add.w	d7,d7
(1) 1494/     E1C : DAC7                		adda	d7,a5
(1) 1495/     E1E : D8C7                		adda	d7,a4
(1) 1496/     E20 : 7C00                		moveq	#0,d6
(1) 1497/     E22 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1498/     E26 : 6716                		beq.s	.busy_timer
(1) 1499/     E28 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1500/     E2C : DC46                		add.w	d6,d6		; * 2
(1) 1501/     E2E : 5347                		subq.w	#1,d7
(1) 1502/     E30 : 0240 00FF           		andi.w	#$FF,d0
(1) 1503/     E34 : D040                		add.w	d0,d0
(1) 1504/     E36 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1505/     E3A : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1506/     E3E :                     .busy_timer:
(1) 1507/     E3E : DCFC 0008           		adda	#palfd_len,a6
(1) 1508/     E42 : 60B8                		bra.s	.next_req
(1) 1509/     E44 :                     .no_req:
(1) 1510/     E44 : 4278 D7E0           		clr.w	(RAM_IndxPalFade).w
(1) 1511/     E48 : 4E75                		rts
(1) 1512/     E4A :                     
(1) 1513/     E4A :                     ; ------------------------------------------------
(1) 1514/     E4A :                     
(1) 1515/     E4A :                     .fade_list:
(1) 1516/     E4A : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1517/     E4C : 0018                		dc.w .fade_out-.fade_list
(1) 1518/     E4E : 0088                		dc.w .fade_in-.fade_list
(1) 1519/     E50 : 0010                		dc.w .nothing-.fade_list
(1) 1520/     E52 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1521/     E54 : 0010                		dc.w .nothing-.fade_list
(1) 1522/     E56 : 0010                		dc.w .nothing-.fade_list
(1) 1523/     E58 : 0010                		dc.w .nothing-.fade_list
(1) 1524/     E5A :                     
(1) 1525/     E5A :                     ; ----------------------------------------------------
(1) 1526/     E5A :                     ; Fade request $00: Null/exit.
(1) 1527/     E5A :                     ; ----------------------------------------------------
(1) 1528/     E5A :                     
(1) 1529/     E5A :                     .nothing:
(1) 1530/     E5A :                     .pfade_del:
(1) 1531/     E5A : 4216                		clr.b	palfd_req(a6)
(1) 1532/     E5C : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1533/     E60 : 4E75                		rts
(1) 1534/     E62 :                     
(1) 1535/     E62 :                     ; ----------------------------------------------------
(1) 1536/     E62 :                     ; Fade request $01: fade-out to black
(1) 1537/     E62 :                     ; Quick.
(1) 1538/     E62 :                     ;
(1) 1539/     E62 :                     ; d7 - Num colors
(1) 1540/     E62 :                     ; d6 - Increment*2
(1) 1541/     E62 :                     ; ----------------------------------------------------
(1) 1542/     E62 :                     
(1) 1543/     E62 :                     .fade_out:
(1) 1544/     E62 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1545/     E66 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1546/     E6A : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1547/     E6E : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1548/     E70 :                     .next_color:
(1) 1549/     E70 : 3015                		move.w	(a5),d0
(1) 1550/     E72 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1551/     E74 :                     	rept 3
(1) 1552/     E74 :                     		move.w	d0,d1
(1) 1553/     E74 :                     		and.w	d5,d1			; Filter TARGET
(1) 1554/     E74 :                     		beq.s	.no_chng
(1) 1555/     E74 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E74 :                     		sub.w	d6,d1
(1) 1557/     E74 :                     		bpl.s	.blck_alrdy
(1) 1558/     E74 :                     		clr.w	d1
(1) 1559/     E74 :                     .blck_alrdy:
(1) 1560/     E74 :                     		addq.w	#1,d3			; Color changed
(1) 1561/     E74 :                     .no_chng:
(1) 1562/     E74 :                     		or.w	d1,d0
(1) 1563/     E74 :                     		rol.w	#4,d6			; next << color
(1) 1564/     E74 :                     		rol.w	#4,d5
(1) 1565/     E74 :                     		rol.w	#4,d4
(1) 1566/     E74 :                     	endm
(1) 1552/     E74 : 3200                		move.w	d0,d1
(1) 1553/     E76 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     E78 : 670A                		beq.s	.no_chng
(1) 1555/     E7A : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E7C : 9246                		sub.w	d6,d1
(1) 1557/     E7E : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     E80 : 4241                		clr.w	d1
(1) 1559/     E82 :                     .blck_alrdy:
(1) 1560/     E82 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     E84 :                     .no_chng:
(1) 1562/     E84 : 8041                		or.w	d1,d0
(1) 1563/     E86 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     E88 : E95D                		rol.w	#4,d5
(1) 1565/     E8A : E95C                		rol.w	#4,d4
(1) 1552/     E8C : 3200                		move.w	d0,d1
(1) 1553/     E8E : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     E90 : 670A                		beq.s	.no_chng
(1) 1555/     E92 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     E94 : 9246                		sub.w	d6,d1
(1) 1557/     E96 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     E98 : 4241                		clr.w	d1
(1) 1559/     E9A :                     .blck_alrdy:
(1) 1560/     E9A : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     E9C :                     .no_chng:
(1) 1562/     E9C : 8041                		or.w	d1,d0
(1) 1563/     E9E : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     EA0 : E95D                		rol.w	#4,d5
(1) 1565/     EA2 : E95C                		rol.w	#4,d4
(1) 1552/     EA4 : 3200                		move.w	d0,d1
(1) 1553/     EA6 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/     EA8 : 670A                		beq.s	.no_chng
(1) 1555/     EAA : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/     EAC : 9246                		sub.w	d6,d1
(1) 1557/     EAE : 6A02                		bpl.s	.blck_alrdy
(1) 1558/     EB0 : 4241                		clr.w	d1
(1) 1559/     EB2 :                     .blck_alrdy:
(1) 1560/     EB2 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/     EB4 :                     .no_chng:
(1) 1562/     EB4 : 8041                		or.w	d1,d0
(1) 1563/     EB6 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/     EB8 : E95D                		rol.w	#4,d5
(1) 1565/     EBA : E95C                		rol.w	#4,d4
(1) 1567/     EBC :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1568/     EBC : E95E                		rol.w	#4,d6
(1) 1569/     EBE : E95D                		rol.w	#4,d5
(1) 1570/     EC0 : E95C                		rol.w	#4,d4
(1) 1571/     EC2 : 3A80                		move.w	d0,(a5)
(1) 1572/     EC4 :                     .all_black:
(1) 1573/     EC4 : DAFC 0002           		adda	#2,a5
(1) 1574/     EC8 : 51CF FFA6           		dbf	d7,.next_color
(1) 1575/     ECC : 4A43                		tst.w	d3
(1) 1576/     ECE : 678A                		beq	.pfade_del
(1) 1577/     ED0 :                     .fdout_nend:
(1) 1578/     ED0 : 4E75                		rts
(1) 1579/     ED2 :                     
(1) 1580/     ED2 :                     ; ----------------------------------------------------
(1) 1581/     ED2 :                     ; Fade request $02
(1) 1582/     ED2 :                     ; Fade-in
(1) 1583/     ED2 :                     ; ----------------------------------------------------
(1) 1584/     ED2 :                     
(1) 1585/     ED2 :                     .fade_in:
(1) 1586/     ED2 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1587/     ED6 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1588/     EDA : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1589/     EDE :                     .next_in:
(1) 1590/     EDE : 4847                		swap	d7
(1) 1591/     EE0 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1592/     EE2 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1593/     EE4 : C044                		and.w	d4,d0
(1) 1594/     EE6 : C444                		and.w	d4,d2
(1) 1595/     EE8 : B042                		cmp.w	d2,d0
(1) 1596/     EEA : 6766                		beq.s	.same_in
(1) 1597/     EEC :                     	rept 3
(1) 1598/     EEC :                     		move.w	d0,d1
(1) 1599/     EEC :                     		move.w	d4,d3
(1) 1600/     EEC :                     		eor.w	d5,d3
(1) 1601/     EEC :                     		and.w	d3,d0
(1) 1602/     EEC :                     		move.w	d2,d3
(1) 1603/     EEC :                     		and.w	d5,d1		; filter CURRENT color
(1) 1604/     EEC :                     		and.w	d5,d3		; filter TARGET color
(1) 1605/     EEC :                     
(1) 1606/     EEC :                     		add.w	d6,d1		; ADD to current
(1) 1607/     EEC :                     		cmp.w	d3,d1
(1) 1608/     EEC :                     		bcs.s	.max_out
(1) 1609/     EEC :                     		move.w	d2,d1
(1) 1610/     EEC :                     		and.w	d5,d1
(1) 1611/     EEC :                     .max_out:
(1) 1612/     EEC :                     		addq.w	#1,d7
(1) 1613/     EEC :                     		or.w	d1,d0
(1) 1614/     EEC :                     		rol.w	#4,d6		; next << color
(1) 1615/     EEC :                     		rol.w	#4,d5
(1) 1616/     EEC :                     	endm
(1) 1598/     EEC : 3200                		move.w	d0,d1
(1) 1599/     EEE : 3604                		move.w	d4,d3
(1) 1600/     EF0 : BB43                		eor.w	d5,d3
(1) 1601/     EF2 : C043                		and.w	d3,d0
(1) 1602/     EF4 : 3602                		move.w	d2,d3
(1) 1603/     EF6 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     EF8 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     EFA :                     
(1) 1606/     EFA : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     EFC : B243                		cmp.w	d3,d1
(1) 1608/     EFE : 6504                		bcs.s	.max_out
(1) 1609/     F00 : 3202                		move.w	d2,d1
(1) 1610/     F02 : C245                		and.w	d5,d1
(1) 1611/     F04 :                     .max_out:
(1) 1612/     F04 : 5247                		addq.w	#1,d7
(1) 1613/     F06 : 8041                		or.w	d1,d0
(1) 1614/     F08 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F0A : E95D                		rol.w	#4,d5
(1) 1598/     F0C : 3200                		move.w	d0,d1
(1) 1599/     F0E : 3604                		move.w	d4,d3
(1) 1600/     F10 : BB43                		eor.w	d5,d3
(1) 1601/     F12 : C043                		and.w	d3,d0
(1) 1602/     F14 : 3602                		move.w	d2,d3
(1) 1603/     F16 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     F18 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     F1A :                     
(1) 1606/     F1A : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     F1C : B243                		cmp.w	d3,d1
(1) 1608/     F1E : 6504                		bcs.s	.max_out
(1) 1609/     F20 : 3202                		move.w	d2,d1
(1) 1610/     F22 : C245                		and.w	d5,d1
(1) 1611/     F24 :                     .max_out:
(1) 1612/     F24 : 5247                		addq.w	#1,d7
(1) 1613/     F26 : 8041                		or.w	d1,d0
(1) 1614/     F28 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F2A : E95D                		rol.w	#4,d5
(1) 1598/     F2C : 3200                		move.w	d0,d1
(1) 1599/     F2E : 3604                		move.w	d4,d3
(1) 1600/     F30 : BB43                		eor.w	d5,d3
(1) 1601/     F32 : C043                		and.w	d3,d0
(1) 1602/     F34 : 3602                		move.w	d2,d3
(1) 1603/     F36 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/     F38 : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/     F3A :                     
(1) 1606/     F3A : D246                		add.w	d6,d1		; ADD to current
(1) 1607/     F3C : B243                		cmp.w	d3,d1
(1) 1608/     F3E : 6504                		bcs.s	.max_out
(1) 1609/     F40 : 3202                		move.w	d2,d1
(1) 1610/     F42 : C245                		and.w	d5,d1
(1) 1611/     F44 :                     .max_out:
(1) 1612/     F44 : 5247                		addq.w	#1,d7
(1) 1613/     F46 : 8041                		or.w	d1,d0
(1) 1614/     F48 : E95E                		rol.w	#4,d6		; next << color
(1) 1615/     F4A : E95D                		rol.w	#4,d5
(1) 1617/     F4C : E95E                		rol.w	#4,d6
(1) 1618/     F4E : E95D                		rol.w	#4,d5
(1) 1619/     F50 : 3A80                		move.w	d0,(a5)
(1) 1620/     F52 :                     .same_in:
(1) 1621/     F52 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1622/     F56 : D8FC 0002           		adda	#2,a4
(1) 1623/     F5A : 4847                		swap	d7
(1) 1624/     F5C : 51CF FF80           		dbf	d7,.next_in
(1) 1625/     F60 : 4847                		swap	d7
(1) 1626/     F62 : 4A47                		tst.w	d7
(1) 1627/     F64 : 6700 FEF4           		beq	.pfade_del
(1) 1628/     F68 :                     .fdin_nend:
(1) 1629/     F68 : 4E75                		rts
(1) 1630/     F6A :                     
(1) 1631/     F6A :                     ; --------------------------------------------------------
(1) 1632/     F6A :                     ; Video_WaitFade
(1) 1633/     F6A :                     ;
(1) 1634/     F6A :                     ; CPU-saving version of System_Render when
(1) 1635/     F6A :                     ; waiting for a fade-in/fade-out
(1) 1636/     F6A :                     ;
(1) 1637/     F6A :                     ; THIS IS REQUIRED FOR 32X as
(1) 1638/     F6A :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1639/     F6A :                     ; --------------------------------------------------------
(1) 1640/     F6A :                     
(1) 1641/     F6A :                     Video_WaitFade:
(1) 1642/     F6A :                     .loop:
(1) 1643/     F6A : 6100 0586           		bsr	System_Render
(1) 1644/     F6E : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1648/     F72 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1649/     F76 : 7C00                		moveq	#0,d6
(1) 1650/     F78 :                     .next_one:
(1) 1651/     F78 : 8C16                		or.b	palfd_req(a6),d6
(1) 1652/     F7A : DCFC 0008           		adda	#palfd_len,a6
(1) 1657/     F7E : 51CF FFF8           		dbf	d7,.next_one
(1) 1658/     F82 : 4A06                		tst.b	d6
(1) 1659/     F84 : 66E4                		bne.s	.loop
(1) 1660/     F86 : 4E75                		rts
(1) 1661/     F88 :                     
(1) 1662/     F88 :                     ; --------------------------------------------------------
(1) 1663/     F88 :                     ; Video_FadeIn_Full
(1) 1664/     F88 :                     ;
(1) 1665/     F88 :                     ; Overwrites first entry on each's PalFadeList
(1) 1666/     F88 :                     ; --------------------------------------------------------
(1) 1667/     F88 :                     
(1) 1668/     F88 :                     Video_FadeIn_Full:
(1) 1675/     F88 : 7002                		moveq	#2,d0
(1) 1676/     F8A : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1677/     F90 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1678/     F96 : 6116                		bsr	Video_MakeFade
(1) 1679/     F98 : 60D0                		bra	Video_WaitFade
(1) 1680/     F9A :                     
(1) 1681/     F9A :                     ; --------------------------------------------------------
(1) 1682/     F9A :                     ; Video_FadeIn_Full
(1) 1683/     F9A :                     ;
(1) 1684/     F9A :                     ; Overwrites first entry on each's PalFadeList
(1) 1685/     F9A :                     ; --------------------------------------------------------
(1) 1686/     F9A :                     
(1) 1687/     F9A :                     Video_FadeOut_Full:
(1) 1694/     F9A : 7001                		moveq	#1,d0
(1) 1695/     F9C : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1696/     FA2 : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1697/     FA8 : 6104                		bsr	Video_MakeFade
(1) 1698/     FAA : 60BE                		bra	Video_WaitFade
(1) 1699/     FAC :                     
(1) 1700/     FAC :                     ; ============================================================
(1) 1701/     FAC :                     ; --------------------------------------------------------
(1) 1702/     FAC :                     ; Subroutines
(1) 1703/     FAC :                     ; --------------------------------------------------------
(1) 1704/     FAC :                     
(1) 1705/     FAC :                     ; --------------------------------------------------------
(1) 1706/     FAC :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1707/     FAC :                     ;
(1) 1708/     FAC :                     ; Make palette Fading (or other) request, for
(1) 1709/     FAC :                     ; both VDP and SVDP
(1) 1710/     FAC :                     ;
(1) 1711/     FAC :                     ; Input:
(1) 1712/     FAC :                     ; d0.w | Task number:
(1) 1713/     FAC :                     ;        0 - Fade-out
(1) 1714/     FAC :                     ;        1 - Fade-in
(1) 1715/     FAC :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1716/     FAC :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1717/     FAC :                     ; --------------------------------------------------------
(1) 1718/     FAC :                     
(1) 1719/     FAC :                     Video_MdMars_MakeFade:
(1) 1728/     FAC : 4E75                		rts
(1) 1729/     FAE :                     Video_MakeFade:
(1) 1730/     FAE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1731/     FB2 : 4DF8 C800           		lea	(RAM_PalFadeList).w,a6
(1) 1732/     FB6 : 3E38 D7E0           		move.w	(RAM_IndxPalFade).w,d7
(1) 1733/     FBA : 5278 D7E0           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1734/     FBE : 6106                		bsr	vidMkFade_Go
(1) 1735/     FC0 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1736/     FC4 : 4E75                		rts
(1) 1737/     FC6 :                     vidMkFade_Go:
(1) 1738/     FC6 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1739/     FCC : E74F                		lsl.w	#3,d7			; index * 8
(1) 1740/     FCE : DCC7                		adda	d7,a6
(1) 1741/     FD0 : 2E01                		move.l	d1,d7
(1) 1742/     FD2 : 2C02                		move.l	d2,d6
(1) 1743/     FD4 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1744/     FD6 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1745/     FDA : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1746/     FDE : 4846                		swap	d6
(1) 1747/     FE0 : 4847                		swap	d7
(1) 1748/     FE2 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1749/     FE6 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1750/     FEA : 4E75                		rts
(1) 1751/     FEC :                     
(1) 1752/     FEC :                     ; --------------------------------------------------------
(1) 1753/     FEC :                     ; Video_LoadPal, Video_FadePal
(1) 1754/     FEC :                     ;
(1) 1755/     FEC :                     ; Load VDP palette data, either current or for fading.
(1) 1756/     FEC :                     ;
(1) 1757/     FEC :                     ; Input:
(1) 1758/     FEC :                     ; a0   | Palette data
(1) 1759/     FEC :                     ; d0.w | Starting color index
(1) 1760/     FEC :                     ; d1.w | Number of colors
(1) 1761/     FEC :                     ; --------------------------------------------------------
(1) 1762/     FEC :                     
(1) 1763/     FEC :                     Video_FadePal:
(1) 1764/     FEC : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1765/     FF0 : 4DF8 D5D0           		lea	(RAM_PaletteFade).w,a6
(1) 1766/     FF4 : 6008                		bra.s	vidMd_Pal
(1) 1767/     FF6 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1768/     FF6 :                     ; 		rts
(1) 1769/     FF6 :                     Video_LoadPal:
(1) 1770/     FF6 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1771/     FFA : 4DF8 D550           		lea	(RAM_Palette).w,a6
(1) 1772/     FFE :                     ; 		bsr.s	vidMd_Pal
(1) 1773/     FFE :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1774/     FFE :                     ; 		rts
(1) 1775/     FFE :                     
(1) 1776/     FFE :                     ; --------------------------------------------------------
(1) 1777/     FFE :                     vidMd_Pal:
(1) 1778/     FFE : 2A48                		move.l	a0,a5
(1) 1779/    1000 : 7E00                		moveq	#0,d7
(1) 1780/    1002 : 3E00                		move.w	d0,d7
(1) 1781/    1004 : DE47                		add.w	d7,d7
(1) 1782/    1006 : DCC7                		adda	d7,a6
(1) 1783/    1008 : 3E01                		move.w	d1,d7
(1) 1784/    100A : 5347                		subq.w	#1,d7
(1) 1785/    100C : 6B0E                		bmi.s	.bad
(1) 1786/    100E : 3C02                		move.w	d2,d6
(1) 1787/    1010 : 0246 0001           		andi.w	#1,d6
(1) 1788/    1014 : E25E                		ror.w	#1,d6
(1) 1789/    1016 :                     .loop:
(1) 1790/    1016 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1791/    1018 : 51CF FFFC           		dbf	d7,.loop
(1) 1792/    101C :                     .bad:
(1) 1793/    101C : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1794/    1020 : 4E75                		rts
(1) 1795/    1022 :                     
(1) 1796/    1022 :                     ; --------------------------------------------------------
(1) 1797/    1022 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1798/    1022 :                     ;
(1) 1799/    1022 :                     ; Loads palettes on bulk with a list
(1) 1800/    1022 :                     ;
(1) 1801/    1022 :                     ; Input:
(1) 1802/    1022 :                     ; a0 | List of graphics to load:
(1) 1803/    1022 :                     ;        dc.w numof_entries
(1) 1804/    1022 :                     ;        dc.l palette_data
(1) 1805/    1022 :                     ;        dc.w start_at
(1) 1806/    1022 :                     ;        dc.w numof_colors
(1) 1807/    1022 :                     ;        ; ...more entries
(1) 1808/    1022 :                     ; --------------------------------------------------------
(1) 1809/    1022 :                     
(1) 1810/    1022 :                     Video_LoadPal_List:
(1) 1811/    1022 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1812/    1026 : 2A48                		move.l	a0,a5
(1) 1813/    1028 : 3E1D                		move.w	(a5)+,d7
(1) 1814/    102A : 6710                		beq.s	.invalid
(1) 1815/    102C : 6B0E                		bmi.s	.invalid
(1) 1816/    102E : 5347                		subq.w	#1,d7
(1) 1817/    1030 :                     .next_one:
(1) 1818/    1030 : 205D                		move.l	(a5)+,a0
(1) 1819/    1032 : 301D                		move.w	(a5)+,d0
(1) 1820/    1034 : 321D                		move.w	(a5)+,d1
(1) 1821/    1036 : 61BE                		bsr	Video_LoadPal
(1) 1822/    1038 : 51CF FFF6           		dbf	d7,.next_one
(1) 1823/    103C :                     .invalid:
(1) 1824/    103C : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1825/    1040 : 4E75                		rts
(1) 1826/    1042 :                     
(1) 1827/    1042 :                     Video_FadePal_List:
(1) 1828/    1042 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1829/    1046 : 2A48                		move.l	a0,a5
(1) 1830/    1048 : 3E1D                		move.w	(a5)+,d7
(1) 1831/    104A : 6710                		beq.s	.invalid
(1) 1832/    104C : 6B0E                		bmi.s	.invalid
(1) 1833/    104E : 5347                		subq.w	#1,d7
(1) 1834/    1050 :                     .next_one:
(1) 1835/    1050 : 205D                		move.l	(a5)+,a0
(1) 1836/    1052 : 301D                		move.w	(a5)+,d0
(1) 1837/    1054 : 321D                		move.w	(a5)+,d1
(1) 1838/    1056 : 6194                		bsr	Video_FadePal
(1) 1839/    1058 : 51CF FFF6           		dbf	d7,.next_one
(1) 1840/    105C :                     .invalid:
(1) 1841/    105C : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1842/    1060 : 4E75                		rts
(1) 1843/    1062 :                     
(1) 1844/    1062 :                     ; ====================================================================
(1) 1845/    1062 :                     ; ----------------------------------------------------------------
(1) 1846/    1062 :                     ; Text PRINT system.
(1) 1847/    1062 :                     ; ----------------------------------------------------------------
(1) 1848/    1062 :                     
(1) 1849/    1062 :                     ; --------------------------------------------------------
(1) 1850/    1062 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1851/    1062 :                     ;
(1) 1852/    1062 :                     ; Initializes the default Graphics and Palette
(1) 1853/    1062 :                     ; for the font.
(1) 1854/    1062 :                     ;
(1) 1855/    1062 :                     ; Input:
(1) 1856/    1062 :                     ; d0.l | Graphics data
(1) 1857/    1062 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1858/    1062 :                     ; d1.w | VRAM output location to load and use
(1) 1859/    1062 :                     ;        the ASCII text including attribute
(1) 1860/    1062 :                     ;        settings (Palette and Priority)
(1) 1861/    1062 :                     ;        Defualt values are:
(1) 1862/    1062 :                     ;        DEF_PrintVram for 8x8 and
(1) 1863/    1062 :                     ;        DEF_PrintVramW for 8x16
(1) 1864/    1062 :                     ;
(1) 1865/    1062 :                     ; Breaks:
(1) 1866/    1062 :                     ; d0-d3
(1) 1867/    1062 :                     ;
(1) 1868/    1062 :                     ; Notes:
(1) 1869/    1062 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1870/    1062 :                     ; - Write your palette manually after this
(1) 1871/    1062 :                     ; --------------------------------------------------------
(1) 1872/    1062 :                     
(1) 1873/    1062 :                     Video_PrintInitW:
(1) 1874/    1062 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1875/    1066 : 6004                		bra.s	vidPrint_Init
(1) 1876/    1068 :                     Video_PrintInit:
(1) 1877/    1068 : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1878/    106C :                     vidPrint_Init:
(1) 1879/    106C : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1880/    106E : 6000 F958           		bra	Video_LoadArt
(1) 1881/    1072 :                     
(1) 1882/    1072 :                     ; --------------------------------------------------------
(1) 1883/    1072 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1884/    1072 :                     ;
(1) 1885/    1072 :                     ; Loads default palette for the font
(1) 1886/    1072 :                     ; --------------------------------------------------------
(1) 1887/    1072 :                     
(1) 1888/    1072 :                     Video_PrintDefPal_Fade:
(1) 1889/    1072 : 2F0E                		move.l	a6,-(sp)
(1) 1890/    1074 : 4DF8 D630           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1891/    1078 : 6006                		bra.s	vid_FontDefPal
(1) 1892/    107A :                     Video_PrintDefPal:
(1) 1893/    107A : 2F0E                		move.l	a6,-(sp)
(1) 1894/    107C : 4DF8 D5B0           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1895/    1080 :                     vid_FontDefPal:
(1) 1896/    1080 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1897/    1084 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1898/    1088 : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1899/    108C : 2C5F                		move.l	(sp)+,a6
(1) 1900/    108E : 4E75                		rts
(1) 1901/    1090 :                     
(1) 1902/    1090 :                     ; --------------------------------------------------------
(1) 1903/    1090 :                     ; Video_Print, Video_PrintW
(1) 1904/    1090 :                     ;
(1) 1905/    1090 :                     ; Prints a text string, VDP side.
(1) 1906/    1090 :                     ;
(1) 1907/    1090 :                     ; Input:
(1) 1908/    1090 :                     ; a0   | String data
(1) 1909/    1090 :                     ; d0.w | X position
(1) 1910/    1090 :                     ; d1.w | Y position
(1) 1911/    1090 :                     ; d2.w | Font VRAM location
(1) 1912/    1090 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1913/    1090 :                     ;        splitw(width,vram_out)
(1) 1914/    1090 :                     ;
(1) 1915/    1090 :                     ; * Font VRAM location
(1) 1916/    1090 :                     ; Default 8x8:  DEF_PrintVram
(1) 1917/    1090 :                     ; Default 8x16: DEF_PrintVramW
(1) 1918/    1090 :                     ;
(1) 1919/    1090 :                     ; * Screen VRAM
(1) 1920/    1090 :                     ; Foreground: DEF_VRAM_FG
(1) 1921/    1090 :                     ; Background: DEF_VRAM_BG
(1) 1922/    1090 :                     ; Window:     DEF_VRAM_WD
(1) 1923/    1090 :                     ;
(1) 1924/    1090 :                     ; * Screen Width
(1) 1925/    1090 :                     ; $040 (DEF_HSIZE_32)
(1) 1926/    1090 :                     ; $080 (DEF_HSIZE_64)
(1) 1927/    1090 :                     ; $100 (DEF_HSIZE_128)
(1) 1928/    1090 :                     ;
(1) 1929/    1090 :                     ; Notes:
(1) 1930/    1090 :                     ; - Initialize your graphics and VRAM location
(1) 1931/    1090 :                     ;   with Video_PrintInit
(1) 1932/    1090 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1933/    1090 :                     ;   mode.
(1) 1934/    1090 :                     ; --------------------------------------------------------
(1) 1935/    1090 :                     
(1) 1936/    1090 :                     ; dc.l pstr(type,ram_location)
(1) 1937/    1090 :                     ;
(1) 1938/    1090 :                     ; type:
(1) 1939/    1090 :                     ; 0 - Byte
(1) 1940/    1090 :                     ; 1 - Word
(1) 1941/    1090 :                     ; 2 - 24-bit
(1) 1942/    1090 :                     ; 3 - Long
(1) 1943/    1090 :                     
(1) 1944/    1090 :                     Video_Print:
(1) 1945/    1090 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1946/    1094 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1947/    109A : 3E03                		move.w	d3,d7
(1) 1948/    109C : 3A00                		move.w	d0,d5
(1) 1949/    109E : DA45                		add.w	d5,d5
(1) 1950/    10A0 : 3801                		move.w	d1,d4
(1) 1951/    10A2 : 4843                		swap	d3
(1) 1952/    10A4 : C8C3                		mulu.w	d3,d4
(1) 1953/    10A6 : DA44                		add.w	d4,d5
(1) 1954/    10A8 : DE45                		add.w	d5,d7
(1) 1955/    10AA : 3C03                		move.w	d3,d6
(1) 1956/    10AC : 4843                		swap	d3
(1) 1957/    10AE : 7A00                		moveq	#0,d5
(1) 1958/    10B0 : 3A07                		move.w	d7,d5
(1) 1959/    10B2 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1960/    10B6 : 8E7C 4000           		or.w	#$4000,d7
(1) 1961/    10BA : E55D                		rol.w	#2,d5
(1) 1962/    10BC : 0245 0003           		andi.w	#%11,d5
(1) 1963/    10C0 : 4845                		swap	d5
(1) 1964/    10C2 : 2A48                		move.l	a0,a5
(1) 1965/    10C4 :                     .loop:
(1) 1966/    10C4 : 3806                		move.w	d6,d4
(1) 1967/    10C6 : 5344                		subq.w	#1,d4
(1) 1968/    10C8 : CA44                		and.w	d4,d5
(1) 1969/    10CA :                     
(1) 1970/    10CA : 3807                		move.w	d7,d4
(1) 1971/    10CC : D845                		add.w	d5,d4
(1) 1972/    10CE : 4845                		swap	d5
(1) 1973/    10D0 : 3D44 0004           		move.w	d4,4(a6)
(1) 1974/    10D4 : 3D45 0004           		move.w	d5,4(a6)
(1) 1975/    10D8 : 4845                		swap	d5
(1) 1976/    10DA :                     .q_loop:
(1) 1977/    10DA : 181D                		move.b	(a5)+,d4
(1) 1978/    10DC : 671E                		beq.s	.exit
(1) 1979/    10DE : 6B22                		bmi.s	.special
(1) 1980/    10E0 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1981/    10E4 : 6710                		beq.s	.next
(1) 1982/    10E6 :                     ; ------------------------------------------------
(1) 1983/    10E6 :                     ; Normal text
(1) 1984/    10E6 : 0244 00FF           		andi.w	#$FF,d4
(1) 1985/    10EA :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1986/    10EA : D842                		add.w	d2,d4
(1) 1987/    10EC : 0444 0020           		subi.w	#$20,d4
(1) 1988/    10F0 : 3C84                		move.w	d4,(a6)
(1) 1989/    10F2 : 5445                		addq.w	#2,d5
(1) 1990/    10F4 : 60E4                		bra.s	.q_loop
(1) 1991/    10F6 :                     .next:
(1) 1992/    10F6 : 4245                		clr.w	d5
(1) 1993/    10F8 : DE46                		add.w	d6,d7			; Next line
(1) 1994/    10FA : 60C8                		bra.s	.loop
(1) 1995/    10FC :                     .exit:
(1) 1996/    10FC : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1997/    1100 : 4E75                		rts
(1) 1998/    1102 :                     ; ------------------------------------------------
(1) 1999/    1102 :                     ; Show value
(1) 2000/    1102 :                     ; d4 - $80|flags
(1) 2001/    1102 :                     .special:
(1) 2002/    1102 : 4846                		swap	d6
(1) 2003/    1104 : 1C04                		move.b	d4,d6
(1) 2004/    1106 : E19C                		rol.l	#8,d4
(1) 2005/    1108 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2006/    110A : E19C                		rol.l	#8,d4
(1) 2007/    110C : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2008/    110E : E19C                		rol.l	#8,d4
(1) 2009/    1110 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2010/    1112 : 2844                		move.l	d4,a4
(1) 2011/    1114 : 0246 0003           		andi.w	#%11,d6
(1) 2012/    1118 : 4847                		swap	d7
(1) 2013/    111A : 3E3C 0000           		move.w	#1-1,d7
(1) 2014/    111E : BC3C 0003           		cmp.b	#$03,d6
(1) 2015/    1122 : 6724                		beq.s	.show_long
(1) 2016/    1124 : BC3C 0002           		cmp.b	#$02,d6
(1) 2017/    1128 : 6716                		beq.s	.show_24
(1) 2018/    112A : BC3C 0001           		cmp.b	#$01,d6
(1) 2019/    112E : 6708                		beq.s	.show_word
(1) 2020/    1130 :                     .show_byte:
(1) 2021/    1130 : 1814                		move.b	(a4),d4
(1) 2022/    1132 : 4844                		swap	d4
(1) 2023/    1134 : E19C                		rol.l	#8,d4
(1) 2024/    1136 : 6014                		bra.s	.mk_value
(1) 2025/    1138 :                     .show_word:
(1) 2026/    1138 : 3814                		move.w	(a4),d4
(1) 2027/    113A : 4844                		swap	d4
(1) 2028/    113C : 5247                		addq.w	#1,d7
(1) 2029/    113E : 600C                		bra.s	.mk_value
(1) 2030/    1140 :                     .show_24:
(1) 2031/    1140 : 2814                		move.l	(a4),d4
(1) 2032/    1142 : E19C                		rol.l	#8,d4
(1) 2033/    1144 : 5447                		addq.w	#2,d7
(1) 2034/    1146 : 6004                		bra.s	.mk_value
(1) 2035/    1148 :                     .show_long:
(1) 2036/    1148 : 2814                		move.l	(a4),d4
(1) 2037/    114A : 5647                		addq.w	#3,d7
(1) 2038/    114C :                     .mk_value:
(1) 2039/    114C : E99C                		rol.l	#4,d4
(1) 2040/    114E : 6110                		bsr.s	.show_nibbl
(1) 2041/    1150 : E99C                		rol.l	#4,d4
(1) 2042/    1152 : 610C                		bsr.s	.show_nibbl
(1) 2043/    1154 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2044/    1158 : 4846                		swap	d6
(1) 2045/    115A : 4847                		swap	d7
(1) 2046/    115C : 6000 FF66           		bra	.loop
(1) 2047/    1160 :                     .show_nibbl:
(1) 2048/    1160 : 2846                		move.l	d6,a4
(1) 2049/    1162 : 1C04                		move.b	d4,d6
(1) 2050/    1164 : 0246 000F           		andi.w	#$0F,d6
(1) 2051/    1168 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2052/    116C : 6502                		bcs.s	.hex_incr
(1) 2053/    116E : 5E46                		addq.w	#7,d6
(1) 2054/    1170 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2055/    1174 :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2056/    1174 : DC42                		add.w	d2,d6
(1) 2057/    1176 : 0446 0020           		subi.w	#$20,d6
(1) 2058/    117A : 3C86                		move.w	d6,(a6)
(1) 2059/    117C : 5445                		addq.w	#2,d5
(1) 2060/    117E : 2C0C                		move.l	a4,d6
(1) 2061/    1180 : 4E75                		rts
(1) 2062/    1182 :                     
(1) 2063/    1182 :                     ; --------------------------------------------------------
(1) 2064/    1182 :                     ; 8x16 version
(1) 2065/    1182 :                     ; --------------------------------------------------------
(1) 2066/    1182 :                     
(1) 2067/    1182 :                     Video_PrintW:
(1) 2068/    1182 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2069/    1186 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2070/    118C :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2071/    118C : 3C02                		move.w	d2,d6
(1) 2072/    118E : 0446 0040           		subi.w	#$20*2,d6
(1) 2073/    1192 : 3A38 D7F6           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2074/    1196 : 0805 0002           		btst	#2,d5
(1) 2075/    119A : 670E                		beq.s	.no_dble_y
(1) 2076/    119C : 3E06                		move.w	d6,d7
(1) 2077/    119E : 0247 F800           		andi.w	#$F800,d7
(1) 2078/    11A2 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2079/    11A6 : E24E                		lsr.w	#1,d6
(1) 2080/    11A8 : 8C47                		or.w	d7,d6
(1) 2081/    11AA :                     .no_dble_y:
(1) 2082/    11AA : 4846                		swap	d6
(1) 2083/    11AC : 3E03                		move.w	d3,d7
(1) 2084/    11AE : 3A00                		move.w	d0,d5
(1) 2085/    11B0 : DA45                		add.w	d5,d5
(1) 2086/    11B2 : 3801                		move.w	d1,d4
(1) 2087/    11B4 : 4843                		swap	d3
(1) 2088/    11B6 : C8C3                		mulu.w	d3,d4
(1) 2089/    11B8 : DA44                		add.w	d4,d5
(1) 2090/    11BA : DE45                		add.w	d5,d7
(1) 2091/    11BC : 3C03                		move.w	d3,d6
(1) 2092/    11BE : 4843                		swap	d3
(1) 2093/    11C0 :                     
(1) 2094/    11C0 : 7A00                		moveq	#0,d5
(1) 2095/    11C2 : 3A07                		move.w	d7,d5
(1) 2096/    11C4 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2097/    11C8 : 8E7C 4000           		or.w	#$4000,d7
(1) 2098/    11CC : E55D                		rol.w	#2,d5
(1) 2099/    11CE : 0245 0003           		andi.w	#%11,d5
(1) 2100/    11D2 : 4845                		swap	d5
(1) 2101/    11D4 : 2A48                		move.l	a0,a5
(1) 2102/    11D6 :                     	; d7 -      TEMP       | VDP write left
(1) 2103/    11D6 :                     	; d6 -      TEMP       | Y next-line size
(1) 2104/    11D6 :                     	; d5 - VDP write right | X current pos
(1) 2105/    11D6 :                     	; d4 -                 | TEMP
(1) 2106/    11D6 :                     .loop:
(1) 2107/    11D6 : 3806                		move.w	d6,d4
(1) 2108/    11D8 : 5344                		subq.w	#1,d4
(1) 2109/    11DA : CA44                		and.w	d4,d5
(1) 2110/    11DC : 181D                		move.b	(a5)+,d4
(1) 2111/    11DE : 6776                		beq.s	.exit
(1) 2112/    11E0 : 6B7A                		bmi.s	.special
(1) 2113/    11E2 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2114/    11E6 : 6766                		beq.s	.next
(1) 2115/    11E8 :                     ; ------------------------------------------------
(1) 2116/    11E8 :                     ; Normal text
(1) 2117/    11E8 : 0244 00FF           		andi.w	#$FF,d4
(1) 2118/    11EC : 4847                		swap	d7
(1) 2119/    11EE : 3E38 D7F6           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2120/    11F2 : 0807 0002           		btst	#2,d7
(1) 2121/    11F6 : 671E                		beq.s	.ver_normal
(1) 2122/    11F8 : 4846                		swap	d6
(1) 2123/    11FA : D846                		add.w	d6,d4
(1) 2124/    11FC : 4846                		swap	d6
(1) 2125/    11FE : 4844                		swap	d4
(1) 2126/    1200 : 4847                		swap	d7
(1) 2127/    1202 : 3807                		move.w	d7,d4
(1) 2128/    1204 : D845                		add.w	d5,d4
(1) 2129/    1206 : 4845                		swap	d5
(1) 2130/    1208 : 3D44 0004           		move.w	d4,4(a6)
(1) 2131/    120C : 3D45 0004           		move.w	d5,4(a6)
(1) 2132/    1210 : 4844                		swap	d4
(1) 2133/    1212 : 3C84                		move.w	d4,(a6)
(1) 2134/    1214 : 6032                		bra.s	.ver_cont
(1) 2135/    1216 :                     .ver_normal:
(1) 2136/    1216 : D844                		add.w	d4,d4
(1) 2137/    1218 : 4846                		swap	d6
(1) 2138/    121A : D846                		add.w	d6,d4
(1) 2139/    121C : 4846                		swap	d6
(1) 2140/    121E : 4844                		swap	d4
(1) 2141/    1220 : 4847                		swap	d7
(1) 2142/    1222 : 3807                		move.w	d7,d4
(1) 2143/    1224 : D845                		add.w	d5,d4
(1) 2144/    1226 : 4845                		swap	d5
(1) 2145/    1228 : 3D44 0004           		move.w	d4,4(a6)
(1) 2146/    122C : 3D45 0004           		move.w	d5,4(a6)
(1) 2147/    1230 : 4844                		swap	d4
(1) 2148/    1232 : 3C84                		move.w	d4,(a6)
(1) 2149/    1234 : 5244                		addq.w	#1,d4
(1) 2150/    1236 : 4844                		swap	d4
(1) 2151/    1238 : D846                		add.w	d6,d4
(1) 2152/    123A : 3D44 0004           		move.w	d4,4(a6)
(1) 2153/    123E : 3D45 0004           		move.w	d5,4(a6)
(1) 2154/    1242 : 4844                		swap	d4
(1) 2155/    1244 : 3C84                		move.w	d4,(a6)
(1) 2156/    1246 : 4844                		swap	d4
(1) 2157/    1248 :                     
(1) 2158/    1248 :                     .ver_cont:
(1) 2159/    1248 : 4845                		swap	d5
(1) 2160/    124A : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2161/    124C : 6088                		bra.s	.loop
(1) 2162/    124E :                     .next:
(1) 2163/    124E : 4245                		clr.w	d5		; Clear X pos
(1) 2164/    1250 : DE46                		add.w	d6,d7		; Next Y line
(1) 2165/    1252 : DE46                		add.w	d6,d7		; twice
(1) 2166/    1254 : 6080                		bra	.loop
(1) 2167/    1256 :                     .exit:
(1) 2168/    1256 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2169/    125A : 4E75                		rts
(1) 2170/    125C :                     ; ------------------------------------------------
(1) 2171/    125C :                     ; Show value
(1) 2172/    125C :                     ; d4 - $80|flags
(1) 2173/    125C :                     .special:
(1) 2174/    125C : 2646                		move.l	d6,a3
(1) 2175/    125E : 1C04                		move.b	d4,d6
(1) 2176/    1260 : E19C                		rol.l	#8,d4
(1) 2177/    1262 : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2178/    1264 : E19C                		rol.l	#8,d4
(1) 2179/    1266 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2180/    1268 : E19C                		rol.l	#8,d4
(1) 2181/    126A : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2182/    126C : 2844                		move.l	d4,a4
(1) 2183/    126E : 0246 0003           		andi.w	#%11,d6
(1) 2184/    1272 : 4847                		swap	d7
(1) 2185/    1274 : 3E3C 0000           		move.w	#1-1,d7
(1) 2186/    1278 : BC3C 0003           		cmp.b	#$03,d6
(1) 2187/    127C : 6724                		beq.s	.show_long
(1) 2188/    127E : BC3C 0002           		cmp.b	#$02,d6
(1) 2189/    1282 : 6716                		beq.s	.show_24
(1) 2190/    1284 : BC3C 0001           		cmp.b	#$01,d6
(1) 2191/    1288 : 6708                		beq.s	.show_word
(1) 2192/    128A :                     .show_byte:
(1) 2193/    128A : 1814                		move.b	(a4),d4
(1) 2194/    128C : 4844                		swap	d4
(1) 2195/    128E : E19C                		rol.l	#8,d4
(1) 2196/    1290 : 6014                		bra.s	.mk_value_in
(1) 2197/    1292 :                     .show_word:
(1) 2198/    1292 : 3814                		move.w	(a4),d4
(1) 2199/    1294 : 4844                		swap	d4
(1) 2200/    1296 : 5247                		addq.w	#1,d7
(1) 2201/    1298 : 600C                		bra.s	.mk_value_in
(1) 2202/    129A :                     .show_24:
(1) 2203/    129A : 2814                		move.l	(a4),d4
(1) 2204/    129C : E19C                		rol.l	#8,d4
(1) 2205/    129E : 5447                		addq.w	#2,d7
(1) 2206/    12A0 : 6004                		bra.s	.mk_value_in
(1) 2207/    12A2 :                     .show_long:
(1) 2208/    12A2 : 2814                		move.l	(a4),d4
(1) 2209/    12A4 : 5647                		addq.w	#3,d7
(1) 2210/    12A6 :                     .mk_value_in:
(1) 2211/    12A6 : 2C0B                		move.l	a3,d6
(1) 2212/    12A8 :                     
(1) 2213/    12A8 :                     
(1) 2214/    12A8 :                     	; d4 - value
(1) 2215/    12A8 : 4846                		swap	d6
(1) 2216/    12AA :                     .mk_value:
(1) 2217/    12AA : E99C                		rol.l	#4,d4
(1) 2218/    12AC : 6110                		bsr.s	.show_nibbl
(1) 2219/    12AE : E99C                		rol.l	#4,d4
(1) 2220/    12B0 : 610C                		bsr.s	.show_nibbl
(1) 2221/    12B2 : 51CF FFF6           		dbf	d7,.mk_value
(1) 2222/    12B6 : 4846                		swap	d6
(1) 2223/    12B8 : 4847                		swap	d7
(1) 2224/    12BA : 6000 FF1A           		bra	.loop
(1) 2225/    12BE :                     
(1) 2226/    12BE :                     	; d6 - Y next-line size | TEMP
(1) 2227/    12BE :                     .show_nibbl:
(1) 2228/    12BE : 2846                		move.l	d6,a4
(1) 2229/    12C0 : 2644                		move.l	d4,a3
(1) 2230/    12C2 : 3C38 D7F6           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2231/    12C6 : 0806 0002           		btst	#2,d6
(1) 2232/    12CA : 6730                		beq.s	.nibbl_norm
(1) 2233/    12CC :                     
(1) 2234/    12CC :                     	; TODO CHECAR ESTO
(1) 2235/    12CC : 616C                		bsr.s	.get_preval
(1) 2236/    12CE : 0446 0020           		subi.w	#$20,d6
(1) 2237/    12D2 : 4847                		swap	d7
(1) 2238/    12D4 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2239/    12D4 : 3802                		move.w	d2,d4
(1) 2240/    12D6 : 0244 07FF           		andi.w	#$7FF,d4
(1) 2241/    12DA : E24C                		lsr.w	#1,d4
(1) 2242/    12DC : DC44                		add.w	d4,d6
(1) 2243/    12DE :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2244/    12DE : 3802                		move.w	d2,d4
(1) 2245/    12E0 : 0244 F800           		andi.w	#$F800,d4
(1) 2246/    12E4 : 8C44                		or.w	d4,d6
(1) 2247/    12E6 : 3807                		move.w	d7,d4
(1) 2248/    12E8 : 4847                		swap	d7
(1) 2249/    12EA : D845                		add.w	d5,d4
(1) 2250/    12EC : 4845                		swap	d5
(1) 2251/    12EE : 3D44 0004           		move.w	d4,4(a6)
(1) 2252/    12F2 : 3D45 0004           		move.w	d5,4(a6)
(1) 2253/    12F6 : 4845                		swap	d5
(1) 2254/    12F8 : 3C86                		move.w	d6,(a6)
(1) 2255/    12FA : 6036                		bra.s	.nibbl_cont
(1) 2256/    12FC :                     
(1) 2257/    12FC :                     .nibbl_norm:
(1) 2258/    12FC : 613C                		bsr.s	.get_preval
(1) 2259/    12FE : 0446 0020           		subi.w	#$20,d6
(1) 2260/    1302 : DC46                		add.w	d6,d6
(1) 2261/    1304 : DC42                		add.w	d2,d6
(1) 2262/    1306 : 4847                		swap	d7
(1) 2263/    1308 : 3807                		move.w	d7,d4
(1) 2264/    130A : 4847                		swap	d7
(1) 2265/    130C : D845                		add.w	d5,d4
(1) 2266/    130E : 4845                		swap	d5
(1) 2267/    1310 : 3D44 0004           		move.w	d4,4(a6)
(1) 2268/    1314 : 3D45 0004           		move.w	d5,4(a6)
(1) 2269/    1318 : 4845                		swap	d5
(1) 2270/    131A : 3C86                		move.w	d6,(a6)
(1) 2271/    131C : 5246                		addq.w	#1,d6
(1) 2272/    131E : 4846                		swap	d6
(1) 2273/    1320 : D846                		add.w	d6,d4
(1) 2274/    1322 : 4846                		swap	d6
(1) 2275/    1324 : 4845                		swap	d5
(1) 2276/    1326 : 3D44 0004           		move.w	d4,4(a6)
(1) 2277/    132A : 3D45 0004           		move.w	d5,4(a6)
(1) 2278/    132E : 4845                		swap	d5
(1) 2279/    1330 : 3C86                		move.w	d6,(a6)
(1) 2280/    1332 :                     .nibbl_cont:
(1) 2281/    1332 : 5445                		addq.w	#2,d5
(1) 2282/    1334 : 2C0C                		move.l	a4,d6
(1) 2283/    1336 : 280B                		move.l	a3,d4
(1) 2284/    1338 : 4E75                		rts
(1) 2285/    133A :                     
(1) 2286/    133A :                     .get_preval:
(1) 2287/    133A : 1C04                		move.b	d4,d6
(1) 2288/    133C : 0246 000F           		andi.w	#$0F,d6
(1) 2289/    1340 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2290/    1344 : 6502                		bcs.s	.hex_incr
(1) 2291/    1346 : 5E46                		addq.w	#7,d6
(1) 2292/    1348 :                     .hex_incr:
(1) 2293/    1348 : DC7C 0030           		add.w	#"0",d6
(1) 2294/    134C : 4E75                		rts
(1) 2295/    134E :                     
(1) 2296/    134E :                     ; ------------------------------------------------
(1) 2297/    134E :                     ; Input:
(1) 2298/    134E :                     ; d2.w | Layer:
(1) 2299/    134E :                     ;        0 - Foreground
(1) 2300/    134E :                     ;        1 - Background
(1) 2301/    134E :                     ;        2 - WINDOW
(1) 2302/    134E :                     ;
(1) 2303/    134E :                     ; Returns:
(1) 2304/    134E :                     ; d7 - VRAM location
(1) 2305/    134E :                     ; d6 - Y jump size
(1) 2306/    134E :                     ; ------------------------------------------------
(1) 2307/    134E :                     
(1) 2308/    134E :                     ; vidSub_PickLayer:
(1) 2309/    134E :                     ; 		move.w	d2,d7
(1) 2310/    134E :                     ; 		lsl.w	#2,d7
(1) 2311/    134E :                     ; 		lea	(RAM_VdpRegs+$02).w,a5
(1) 2312/    134E :                     ; 		lea	.filter_data(pc),a4
(1) 2313/    134E :                     ; 		adda	d7,a4
(1) 2314/    134E :                     ; 		moveq	#0,d7
(1) 2315/    134E :                     ; 		moveq	#0,d5
(1) 2316/    134E :                     ; 		move.b	(a4),d7
(1) 2317/    134E :                     ; 		adda	d7,a5
(1) 2318/    134E :                     ; 		move.b	1(a4),d6
(1) 2319/    134E :                     ; 		move.b	2(a4),d5
(1) 2320/    134E :                     ; 		move.b	(a5),d7		; d7 - Reg
(1) 2321/    134E :                     ; 		and.b	d6,d7		; filter
(1) 2322/    134E :                     ; 		lsl.w	d5,d7		; shift left
(1) 2323/    134E :                     ; 		move.w	#$40,d6
(1) 2324/    134E :                     ; 		move.b	(RAM_VdpRegs+$10).w,d6
(1) 2325/    134E :                     ; 		andi.w	#%00000011,d6
(1) 2326/    134E :                     ; 		add.w	d6,d6
(1) 2327/    134E :                     ; 		move.w	.jump_sizes(pc,d6.w),d6
(1) 2328/    134E :                     ; 		rts
(1) 2329/    134E :                     ; .filter_data:
(1) 2330/    134E :                     ; 		dc.b $00		; Reg slot
(1) 2331/    134E :                     ; 		dc.b %00111000		; Filter bits
(1) 2332/    134E :                     ; 		dc.b 10,0		; shift left, 0
(1) 2333/    134E :                     ; 		dc.b $02
(1) 2334/    134E :                     ; 		dc.b %00000111
(1) 2335/    134E :                     ; 		dc.b 13,0
(1) 2336/    134E :                     ; 		dc.b $01
(1) 2337/    134E :                     ; 		dc.b %00111110
(1) 2338/    134E :                     ; 		dc.b 10,0
(1) 2339/    134E :                     ; .jump_sizes:	dc.w $040
(1) 2340/    134E :                     ; 		dc.w $080
(1) 2341/    134E :                     ; 		dc.w $080
(1) 2342/    134E :                     ; 		dc.w $100
(1) 2343/    134E :                     
(1) 2344/    134E :                     ; ====================================================================
(1) 2345/    134E :                     ; ----------------------------------------------------------------
(1) 2346/    134E :                     ; VDP Sprites
(1) 2347/    134E :                     ; ----------------------------------------------------------------
(1) 2348/    134E :                     
(1) 2349/    134E :                     ; --------------------------------------------------------
(1) 2350/    134E :                     ; Video_SetSpr, Video_MakeSpr
(1) 2351/    134E :                     ;
(1) 2352/    134E :                     ; Sets or Makes a VDP Sprite piece
(1) 2353/    134E :                     ;
(1) 2354/    134E :                     ; Input:
(1) 2355/    134E :                     ; a0   | Slot (0-80)
(1) 2356/    134E :                     ; d0.w | X pos
(1) 2357/    134E :                     ; d1.w | Y pos
(1) 2358/    134E :                     ; d2.w | VRAM
(1) 2359/    134E :                     ; d3.w | Size
(1) 2360/    134E :                     ;
(1) 2361/    134E :                     ; Returns:
(1) 2362/    134E :                     ; bcc | OK
(1) 2363/    134E :                     ; bcs | Ran out of slots (not sprites)
(1) 2364/    134E :                     ; --------------------------------------------------------
(1) 2365/    134E :                     
(1) 2366/    134E :                     Video_SetSpr:
(1) 2367/    134E : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2368/    1352 : 2E08                		move.l	a0,d7
(1) 2369/    1354 : 7C00                		moveq	#0,d6
(1) 2370/    1356 : 6020                		bra	vidMdSpr_MkSpr
(1) 2371/    1358 :                     Video_MakeSpr:
(1) 2372/    1358 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2373/    135C : 7E00                		moveq	#0,d7
(1) 2374/    135E : 4DF8 C9C0           		lea	(RAM_SprPzList).w,a6
(1) 2375/    1362 : 7C4F                		moveq	#80-1,d6
(1) 2376/    1364 :                     .chk_free:
(1) 2377/    1364 : 0816 0007           		btst	#7,(a6)
(1) 2378/    1368 : 670C                		beq.s	.mk_spr
(1) 2379/    136A : 5247                		addq.w	#1,d7
(1) 2380/    136C : DCFC 0008           		adda	#8,a6
(1) 2381/    1370 : 51CE FFF2           		dbf	d6,.chk_free
(1) 2382/    1374 : 605C                		bra.s	vidMd_CError
(1) 2383/    1376 :                     .mk_spr:
(1) 2384/    1376 : 7C40                		moveq	#$40,d6
(1) 2385/    1378 :                     vidMdSpr_MkSpr:
(1) 2386/    1378 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2387/    137E : BE7C 0050           		cmp.w	#80,d7
(1) 2388/    1382 : 6C4E                		bge.s	vidMd_CError
(1) 2389/    1384 : E74F                		lsl.w	#3,d7
(1) 2390/    1386 : 0687 FFFF C9C0      		addi.l	#RAM_SprPzList,d7
(1) 2391/    138C : 2C47                		move.l	d7,a6
(1) 2392/    138E : 4846                		swap	d6
(1) 2393/    1390 : 3E01                		move.w	d1,d7			; Y pos
(1) 2394/    1392 : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2395/    1396 : 0838 0002 D7F7      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2396/    139C : 6704                		beq.s	.dont_add
(1) 2397/    139E : 0647 0080           		addi.w	#$80,d7
(1) 2398/    13A2 :                     .dont_add:
(1) 2399/    13A2 : 0247 03FF           		andi.w	#$3FF,d7
(1) 2400/    13A6 : 3C03                		move.w	d3,d6
(1) 2401/    13A8 : 0246 000F           		andi.w	#%1111,d6
(1) 2402/    13AC : E14E                		lsl.w	#8,d6
(1) 2403/    13AE : E54E                		lsl.w	#2,d6
(1) 2404/    13B0 : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2405/    13B2 : 4846                		swap	d6
(1) 2406/    13B4 : E14E                		lsl.w	#8,d6
(1) 2407/    13B6 : 8E7C 8000           		or.w	#$8000,d7
(1) 2408/    13BA : 8E46                		or.w	d6,d7
(1) 2409/    13BC : 3CC7                		move.w	d7,(a6)+
(1) 2410/    13BE : 3E00                		move.w	d0,d7
(1) 2411/    13C0 : 0647 0080           		addi.w	#$80,d7
(1) 2412/    13C4 : 3CC7                		move.w	d7,(a6)+
(1) 2413/    13C6 : 3CC2                		move.w	d2,(a6)+
(1) 2414/    13C8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2415/    13CC : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2416/    13D0 : 4E75                		rts
(1) 2417/    13D2 :                     ; Carry error
(1) 2418/    13D2 :                     vidMd_CError:
(1) 2419/    13D2 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2420/    13D6 : 003C 0001           		or	#1,ccr			; Return Error
(1) 2421/    13DA :                     vidMd_CFreeze:
(1) 2422/    13DA : 4E75                		rts
(1) 2423/    13DC :                     
(1) 2424/    13DC :                     ; --------------------------------------------------------
(1) 2425/    13DC :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2426/    13DC :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2427/    13DC :                     ;
(1) 2428/    13DC :                     ; Sets or Makes a VDP Sprite with map data
(1) 2429/    13DC :                     ;
(1) 2430/    13DC :                     ; Input:
(1) 2431/    13DC :                     ; a0   | Slot (0-80)
(1) 2432/    13DC :                     ; a1   | Map data
(1) 2433/    13DC :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2434/    13DC :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2435/    13DC :                     ; d0.w | X position
(1) 2436/    13DC :                     ; d1.w | Y position
(1) 2437/    13DC :                     ; d2.w | VRAM output location
(1) 2438/    13DC :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2439/    13DC :                     ;        cell vram is ignored.
(1) 2440/    13DC :                     ; d3.w | Frame number
(1) 2441/    13DC :                     ;
(1) 2442/    13DC :                     ; Returns:
(1) 2443/    13DC :                     ; bcc | OK
(1) 2444/    13DC :                     ; bcs | Ran out of slots (not sprites)
(1) 2445/    13DC :                     ; --------------------------------------------------------
(1) 2446/    13DC :                     
(1) 2447/    13DC :                     Video_SetSprMap_DMA:
(1) 2448/    13DC : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2449/    13E0 : 6104                		bsr	Video_SetSprMap
(1) 2450/    13E2 : 651E                		bcs.s	vid_MkDmaCarry
(1) 2451/    13E4 : 6012                		bra	vid_MkDmaNext
(1) 2452/    13E6 :                     Video_SetSprMap:
(1) 2453/    13E6 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2454/    13EA : 2E08                		move.l	a0,d7
(1) 2455/    13EC : 7C00                		moveq	#0,d6
(1) 2456/    13EE : 6036                		bra	vidMdSpr_MkSprMap
(1) 2457/    13F0 :                     Video_MakeSprMap_DMA:
(1) 2458/    13F0 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2459/    13F4 : 6112                		bsr	Video_MakeSprMap
(1) 2460/    13F6 : 650A                		bcs.s	vid_MkDmaCarry
(1) 2461/    13F8 :                     vid_MkDmaNext:
(1) 2462/    13F8 : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2463/    13FA : 224B                		move.l	a3,a1
(1) 2464/    13FC : 3003                		move.w	d3,d0
(1) 2465/    13FE : 3202                		move.w	d2,d1
(1) 2466/    1400 : 6160                		bsr	vid_MkMapDma
(1) 2467/    1402 :                     vid_MkDmaCarry:
(1) 2468/    1402 : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2469/    1406 : 4E75                		rts
(1) 2470/    1408 :                     
(1) 2471/    1408 :                     Video_MakeSprMap:
(1) 2472/    1408 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2473/    140C : 7E00                		moveq	#0,d7
(1) 2474/    140E : 4DF8 C840           		lea	(RAM_SprMapList).w,a6
(1) 2475/    1412 : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2476/    1414 :                     .chk_free:
(1) 2477/    1414 : 4A16                		tst.b	(a6)
(1) 2478/    1416 : 670C                		beq.s	.mk_spr
(1) 2479/    1418 : 5247                		addq.w	#1,d7
(1) 2480/    141A : DCFC 0010           		adda	#$10,a6
(1) 2481/    141E : 51CE FFF4           		dbf	d6,.chk_free
(1) 2482/    1422 : 60AE                		bra	vidMd_CError
(1) 2483/    1424 :                     .mk_spr:
(1) 2484/    1424 : 7C40                		moveq	#$40,d6
(1) 2485/    1426 :                     vidMdSpr_MkSprMap:
(1) 2486/    1426 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2487/    142C : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2488/    1430 : 6CA0                		bge	vidMd_CError
(1) 2489/    1432 : E98F                		lsl.l	#4,d7
(1) 2490/    1434 : 0687 FFFF C840      		addi.l	#RAM_SprMapList,d7
(1) 2491/    143A : 2C47                		move.l	d7,a6
(1) 2492/    143C : 2E09                		move.l	a1,d7
(1) 2493/    143E : 8C7C 0080           		or.w	#$80,d6
(1) 2494/    1442 : 4846                		swap	d6
(1) 2495/    1444 : E18E                		lsl.l	#8,d6
(1) 2496/    1446 : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2497/    144C : 8E86                		or.l	d6,d7
(1) 2498/    144E : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2499/    1450 : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2500/    1452 : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2501/    1454 : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2502/    1456 : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2503/    1458 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2504/    145C : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2505/    1460 : 4E75                		rts
(1) 2506/    1462 :                     
(1) 2507/    1462 :                     ; --------------------------------------------------------
(1) 2508/    1462 :                     ; Input:
(1) 2509/    1462 :                     ; a0   | DMA map data
(1) 2510/    1462 :                     ; a1   | Graphics data
(1) 2511/    1462 :                     ; d0.w | Current frame in DMA list
(1) 2512/    1462 :                     ; d1.w | VRAM position
(1) 2513/    1462 :                     ;
(1) 2514/    1462 :                     ; USES:
(1) 2515/    1462 :                     ; a6
(1) 2516/    1462 :                     vid_MkMapDma:
(1) 2517/    1462 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2518/    1466 : 7800                		moveq	#0,d4
(1) 2519/    1468 : 0240 00FF           		andi.w	#$FF,d0
(1) 2520/    146C : D040                 		add.w	d0,d0
(1) 2521/    146E : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2522/    1472 : D0C4                 		adda	d4,a0
(1) 2523/    1474 : 3818                 		move.w	(a0)+,d4
(1) 2524/    1476 : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2525/    1478 : 6B32                 		bmi.s	.no_dma
(1) 2526/    147A : 5344                 		subq.w	#1,d4
(1) 2527/    147C : 0241 07FF           		andi.w	#$07FF,d1
(1) 2528/    1480 : EB49                		lsl.w	#5,d1
(1) 2529/    1482 :                     .next_pz:
(1) 2530/    1482 : 4844                		swap	d4
(1) 2531/    1484 : 3818                		move.w	(a0)+,d4
(1) 2532/    1486 : 3404                		move.w	d4,d2
(1) 2533/    1488 : EE4A                		lsr.w	#7,d2
(1) 2534/    148A : 0242 01E0           		andi.w	#$1E0,d2
(1) 2535/    148E : D47C 0020           		add.w	#$20,d2
(1) 2536/    1492 : 7000                		moveq	#0,d0
(1) 2537/    1494 : 3004                		move.w	d4,d0
(1) 2538/    1496 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2539/    149A : EB48                		lsl.w	#5,d0
(1) 2540/    149C : D089                		add.l	a1,d0
(1) 2541/    149E : 6100 F72E           		bsr	Video_MakeDmaEntry
(1) 2542/    14A2 : D242                		add.w	d2,d1
(1) 2543/    14A4 : 4844                		swap	d4
(1) 2544/    14A6 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2545/    14AA : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2546/    14AC :                     .no_dma:
(1) 2547/    14AC : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2548/    14B0 : 4E75                		rts
(1) 2549/    14B2 :                     
(1) 2550/    14B2 :                     ; ====================================================================
(1) 2551/    14B2 :                     ; ----------------------------------------------------------------
(1) 2552/    14B2 :                     ; Video routines for SEGA CD
(1) 2553/    14B2 :                     ; ----------------------------------------------------------------
(1) 2554/    14B2 :                     
(1) 3070/    14B2 :                     
(1) 3071/    14B2 :                     ; ====================================================================
(1) 3072/    14B2 :                     ; ----------------------------------------------------------------
(1) 3073/    14B2 :                     ; Video routines for 32X
(1) 3074/    14B2 :                     ; ----------------------------------------------------------------
(1) 3075/    14B2 :                     
(1) 3808/    14B2 :                     
     194/    14B2 :                     		include	"system/md/system.asm"
(1)    1/    14B2 :                     ; ===========================================================================
(1)    2/    14B2 :                     ; ----------------------------------------------------------------
(1)    3/    14B2 :                     ; Genesis system routines
(1)    4/    14B2 :                     ;
(1)    5/    14B2 :                     ; including SCD, 32X and PICO.
(1)    6/    14B2 :                     ; ----------------------------------------------------------------
(1)    7/    14B2 :                     
(1)    8/    14B2 :                     ; ====================================================================
(1)    9/    14B2 :                     ; --------------------------------------------------------
(1)   10/    14B2 :                     ; Settings
(1)   11/    14B2 :                     ; --------------------------------------------------------
(1)   12/    14B2 :                     
(1)   13/    14B2 : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects/scripts
(1)   14/    14B2 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/    14B2 :                     
(1)   16/    14B2 :                     ; ===================================================================
(1)   17/    14B2 :                     ; --------------------------------------------------------
(1)   18/    14B2 :                     ; Variables
(1)   19/    14B2 :                     ; --------------------------------------------------------
(1)   20/    14B2 :                     
(1)   21/    14B2 :                     ; ------------------------------------------------
(1)   22/    14B2 :                     ; Controller buffer data
(1)   23/    14B2 :                     ;
(1)   24/    14B2 :                     ; MUST call System_Input during VBlank
(1)   25/    14B2 :                     ; ------------------------------------------------
(1)   26/    14B2 :                     
(1)   27/    14B2 :                     ; ------------------------------------------------
(1)   28/    14B2 :                     ; pad_id
(1)   29/    14B2 :                     ;
(1)   30/    14B2 :                     ; JoyID_MD:
(1)   31/    14B2 :                     ; Read pad_ver separately to check if controller
(1)   32/    14B2 :                     ; is 3button(0) or 6button(1)
(1)   33/    14B2 :                     ; ------------------------------------------------
(1)   34/    14B2 :                     
(1)   35/    14B2 : =$3                  JoyID_Mouse	equ $03
(1)   36/    14B2 : =$D                  JoyID_MD	equ $0D
(1)   37/    14B2 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/    14B2 :                     
(1)   39/    14B2 :                     ; ------------------------------------------------
(1)   40/    14B2 :                     ; Genesis controller
(1)   41/    14B2 :                     ;
(1)   42/    14B2 :                     ; Read these as WORD
(1)   43/    14B2 :                     ; ------------------------------------------------
(1)   44/    14B2 :                     
(1)   45/    14B2 :                     ; on_hold, on_press
(1)   46/    14B2 : =$1                  JoyUp		equ $0001
(1)   47/    14B2 : =$2                  JoyDown		equ $0002
(1)   48/    14B2 : =$4                  JoyLeft		equ $0004
(1)   49/    14B2 : =$8                  JoyRight	equ $0008
(1)   50/    14B2 : =$10                 JoyB		equ $0010
(1)   51/    14B2 : =$20                 JoyC		equ $0020
(1)   52/    14B2 : =$40                 JoyA		equ $0040
(1)   53/    14B2 : =$80                 JoyStart	equ $0080
(1)   54/    14B2 : =$100                JoyZ		equ $0100
(1)   55/    14B2 : =$200                JoyY		equ $0200
(1)   56/    14B2 : =$400                JoyX		equ $0400
(1)   57/    14B2 : =$800                JoyMode		equ $0800
(1)   58/    14B2 : =$0                  bitJoyUp	equ 0
(1)   59/    14B2 : =$1                  bitJoyDown	equ 1
(1)   60/    14B2 : =$2                  bitJoyLeft	equ 2
(1)   61/    14B2 : =$3                  bitJoyRight	equ 3
(1)   62/    14B2 : =$4                  bitJoyB		equ 4
(1)   63/    14B2 : =$5                  bitJoyC		equ 5
(1)   64/    14B2 : =$6                  bitJoyA		equ 6
(1)   65/    14B2 : =$7                  bitJoyStart	equ 7
(1)   66/    14B2 : =$8                  bitJoyZ		equ 8
(1)   67/    14B2 : =$9                  bitJoyY		equ 9
(1)   68/    14B2 : =$A                  bitJoyX		equ 10
(1)   69/    14B2 : =$B                  bitJoyMode	equ 11
(1)   70/    14B2 :                     
(1)   71/    14B2 :                     ; ------------------------------------------------
(1)   72/    14B2 :                     ; Mega Mouse ONLY
(1)   73/    14B2 :                     ;
(1)   74/    14B2 :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/    14B2 :                     ; NOT screen position.
(1)   76/    14B2 :                     ; ------------------------------------------------
(1)   77/    14B2 :                     
(1)   78/    14B2 : =$1                  ClickR		equ $0001
(1)   79/    14B2 : =$2                  ClickL		equ $0002
(1)   80/    14B2 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/    14B2 : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/    14B2 : =$0                  bitClickL	equ 0
(1)   83/    14B2 : =$1                  bitClickR	equ 1
(1)   84/    14B2 : =$2                  bitClickM	equ 2
(1)   85/    14B2 : =$3                  bitClickS	equ 3
(1)   86/    14B2 :                     
(1)   87/    14B2 :                     ; ------------------------------------------------
(1)   88/    14B2 :                     ; Sega PICO
(1)   89/    14B2 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/    14B2 :                     ; For reading the pen position use
(1)   91/    14B2 :                     ; mouse_x and mouse_y
(1)   92/    14B2 :                     ; ------------------------------------------------
(1)   93/    14B2 :                     
(1)   94/    14B2 : =$10                 JoyRED		equ $0010
(1)   95/    14B2 : =$80                 JoyPEN		equ $0080
(1)   96/    14B2 : =$4                  bitJoyRED	equ 4
(1)   97/    14B2 : =$7                  bitJoyPEN	equ 7
(1)   98/    14B2 :                     
(1)   99/    14B2 :                     ; ====================================================================
(1)  100/    14B2 :                     ; ----------------------------------------------------------------
(1)  101/    14B2 :                     ; Structs
(1)  102/    14B2 :                     ; ----------------------------------------------------------------
(1)  103/    14B2 :                     
(1)  104/    14B2 :                     ; ------------------------------------------------
(1)  105/    14B2 :                     ; RAM_InputData
(1)  106/    14B2 :                     
(1)  107/    14B2 :                     ; *** MANUAL VARIABLES ***
(1)  108/    14B2 : =$0                  pad_id			equ $00;ds.b 1			; Controller ID
(1)  109/    14B2 : =$1                  pad_ver			equ $01;ds.b 1			; Controller type/revision
(1)  110/    14B2 : =$2                  on_hold			equ $02;ds.w 1			; User HOLD bits
(1)  111/    14B2 : =$4                  on_press		equ $04;ds.w 1			; User PRESSED bits
(1)  112/    14B2 : =$6                  on_release		equ $06;ds.w 1			; User RELEASED bits
(1)  113/    14B2 : =$8                  mouse_x			equ $08;ds.w 1			; Mouse/Pen X speed
(1)  114/    14B2 : =$A                  mouse_y			equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  115/    14B2 : =$C                  ext_3			equ $0C;ds.w 1
(1)  116/    14B2 : =$E                  ext_4			equ $0E;ds.w 1
(1)  117/    14B2 : =$10                 sizeof_input		equ $10
(1)  118/    14B2 :                     
(1)  119/    14B2 :                     ; ------------------------------------------------
(1)  120/    14B2 :                     ; RAM_Objects
(1)  121/    14B2 :                     ;
(1)  122/    14B2 :                     ; Size must end as even
(1)  123/    14B2 :                     ; ------------------------------------------------
(1)  124/    14B2 :                     
(1)  125/       0 :                     obj			struct
(1)  126/       0 :                     code			ds.l 1		; Object code, If 0 == blank slot
(1)  127/       4 :                     x			ds.l 1		; Object X Position $xxxx.0000
(1)  128/       8 :                     y			ds.l 1		; Object Y Position $yyyy.0000
(1)  129/       C :                     z			ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  130/      10 :                     size_x			ds.w 1		; Object size Left/Right
(1)  131/      12 :                     size_y			ds.w 1		; Object size Up/Down
(1)  132/      14 :                     size_z			ds.w 1		; Object size Zback/Zfront starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  133/      16 :                     x_spd			ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  134/      18 :                     y_spd			ds.w 1		; Object Y Speed $yy.00 ''
(1)  135/      1A :                     z_spd			ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  136/      1C :                     index			ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  137/      1D :                     subid			ds.b 1		; Object Sub-ID for custom placement settings
(1)  138/      1E :                     status			ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  139/      1F :                     attr			ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  140/      20 :                     					; ** object_Animate ONLY:
(1)  141/      20 :                     frame			ds.w 1		; ** Current frame, object_Animate outputs here
(1)  142/      22 :                     anim_num		ds.w 1		; ** Animation number to use
(1)  143/      24 :                     anim_indx		ds.w 1		; ** Animation script index
(1)  144/      26 :                     anim_icur		ds.b 1		; ** Current animation id
(1)  145/      27 :                     anim_spd		ds.b 1		; ** Animation delay set on animation script
(1)  146/      28 :                     ram			ds.b $40	; Object's own RAM
(1)  147/      68 :                     ; obj_len		ds.l 0
(1)  148/    14B2 : =$68                 			endstruct
(1)  149/    14B2 :                     
(1)  150/    14B2 :                     ; ====================================================================
(1)  151/    14B2 :                     ; ----------------------------------------------------------------
(1)  152/    14B2 :                     ; RAM section
(1)  153/    14B2 :                     ; ----------------------------------------------------------------
(1)  154/    14B2 :                     
(1)  155/    14B2 : (MACRO)              			memory RAM_MdSystem
(1)  155/    14B2 : =$14B2               GLBL_LASTPC     := *
(1)  155/    14B2 :                                     dephase
(1)  155/FFFFFFFFFFFFD7F8 :                                     phase RAM_MDSYSTEM
(1)  155/FFFFFFFFFFFFD7F8 : =$FFFFFFFFFFFFD7F8   GLBL_LASTORG    := *
(1)  156/FFFFFFFFFFFFD7F8 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  157/FFFFFFFFFFFFD8F8 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  158/FFFFFFFFFFFFD938 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  159/FFFFFFFFFFFFE978 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  160/FFFFFFFFFFFFE97C :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  161/FFFFFFFFFFFFE980 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  162/FFFFFFFFFFFFE986 :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  163/FFFFFFFFFFFFE98C :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFE992 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  165/FFFFFFFFFFFFE994 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  166/FFFFFFFFFFFFE996 :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  167/FFFFFFFFFFFFE998 :                     RAM_McdExit		ds.w 1
(1)  168/FFFFFFFFFFFFE99A :                     sizeof_mdsys		ds.l 0
(1)  169/FFFFFFFFFFFFE9A0 : (MACRO)              			endmemory
(1)  169/    265A :                     .here:          dephase
(1)  169/    265A :                                     ds.b -(.here-GLBL_LASTORG)
(1)  169/    14B2 :                                     phase GLBL_LASTPC
(1)  170/    14B2 :                     
(1)  171/    14B2 :                     ; ====================================================================
(1)  172/    14B2 :                     ; ----------------------------------------------------------------
(1)  173/    14B2 :                     ; Label aliases
(1)  174/    14B2 :                     ; ----------------------------------------------------------------
(1)  175/    14B2 :                     
(1)  176/    14B2 : =$FFFFFFFFFFFFD8F8   Controller_1		equ RAM_InputData
(1)  177/    14B2 : =$FFFFFFFFFFFFD908   Controller_2		equ RAM_InputData+sizeof_input
(1)  178/    14B2 :                     
(1)  179/    14B2 :                     ; ====================================================================
(1)  180/    14B2 :                     ; --------------------------------------------------------
(1)  181/    14B2 :                     ; Init System
(1)  182/    14B2 :                     ; 
(1)  183/    14B2 :                     ; Uses:
(1)  184/    14B2 :                     ; a0-a2,d0-d1
(1)  185/    14B2 :                     ; --------------------------------------------------------
(1)  186/    14B2 :                     
(1)  187/    14B2 :                     System_Init:
(1)  188/    14B2 : 007C 0700           		or.w	#$0700,sr
(1)  200/    14B6 : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode for the Interrupt jumps
(1)  201/    14BA : 31C0 E980            		move.w	d0,(RAM_VBlankJump).w
(1)  202/    14BE : 31C0 E986           		move.w	d0,(RAM_HBlankJump).w
(1)  203/    14C2 : 31C0 E98C           		move.w	d0,(RAM_ExternalJump).w
(1)  204/    14C6 : 203C 0000 161A      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  205/    14CC : 223C 0000 161C      		move.l	#HInt_Default,d1
(1)  206/    14D2 : 243C 0000 161E      		move.l	#ExtInt_Default,d2
(1)  207/    14D8 : 6100 0360           		bsr	System_SetIntJumps
(1)  208/    14DC : 41F8 D8F8           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  209/    14E0 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  210/    14E4 : 7000                		moveq	#0,d0
(1)  211/    14E6 :                     .clrinput:
(1)  212/    14E6 : 30C0                		move.w	d0,(a0)+
(1)  213/    14E8 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  214/    14EC : 027C F8FF           		andi.w	#$F8FF,sr
(1)  215/    14F0 : 4E75                		rts
(1)  216/    14F2 :                     
(1)  217/    14F2 :                     ; ====================================================================
(1)  218/    14F2 :                     ; --------------------------------------------------------
(1)  219/    14F2 :                     ; System_Render
(1)  220/    14F2 :                     ;
(1)  221/    14F2 :                     ; This will:
(1)  222/    14F2 :                     ; - Drop a frame if we got late on VBlank
(1)  223/    14F2 :                     ; - Process Palette fading buffers
(1)  224/    14F2 :                     ;   (Video_MdMars_RunFade, CPU-INTENSIVE IF PROCESSING
(1)  225/    14F2 :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  226/    14F2 :                     ; - Check the sound driver for any changes/requests
(1)  227/    14F2 :                     ;   from Z80 (Sound_Update, several times)
(1)  228/    14F2 :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  229/    14F2 :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  230/    14F2 :                     ;
(1)  231/    14F2 :                     ; During VBlank:
(1)  232/    14F2 :                     ; - Read the Input data, (System_Input)
(1)  233/    14F2 :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  234/    14F2 :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  235/    14F2 :                     ;   (Video_Render)
(1)  236/    14F2 :                     ;
(1)  237/    14F2 :                     ; Notes:
(1)  238/    14F2 :                     ; - If VDP Display is disabled all of this
(1)  239/    14F2 :                     ;   will be skipped.
(1)  240/    14F2 :                     ; --------------------------------------------------------
(1)  241/    14F2 :                     
(1)  242/    14F2 :                     System_Render:
(1)  243/    14F2 : 3E38 D7F2           		move.w	(RAM_VdpRegSet1).w,d7
(1)  244/    14F6 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  245/    14FA : 671A                		beq	.forgot_disp
(1)  246/    14FC : 6100 F8FA           		bsr	Video_RunFade			; Process VDP palette fade
(1)  247/    1500 :                     .wait_early:
(1)  248/    1500 : 616C                		bsr	Sound_Update			; Update sound on wait
(1)  249/    1502 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  250/    1508 : 0807 0003           		btst	#bitVBlk,d7
(1)  251/    150C : 66F2                		bne.s	.wait_early
(1)  252/    150E :                     	; ----------------------------------------
(1)  253/    150E :                     	; 32X/CD32X
(1)  286/    150E :                     ; ----------------------------------------
(1)  287/    150E : 6108                		bsr	.wait_vblank			; <-- Genesis normal VBlank wait
(1)  288/    1510 :                     ; ----------------------------------------
(1)  294/    1510 :                     .from_late:
(1)  302/    1510 : 52B8 D7DC           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  303/    1514 : 6158                		bsr	Sound_Update
(1)  304/    1516 :                     .forgot_disp:
(1)  305/    1516 : 4E75                		rts
(1)  306/    1518 :                     ; ----------------------------------------
(1)  307/    1518 :                     ; Wait until beam reaches VBlank
(1)  308/    1518 :                     ; ----------------------------------------
(1)  309/    1518 :                     
(1)  310/    1518 : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  311/    151A : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  312/    1520 : 0807 0003           		btst	#bitVBlk,d7
(1)  313/    1524 : 67F2                		beq.s	.wait_vblank
(1)  314/    1526 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  315/    1528 : 6000 EFBE           		bra	Video_Render			; Render VDP Visuals
(1)  316/    152C :                     
(1)  317/    152C :                     ; ====================================================================
(1)  318/    152C :                     ; --------------------------------------------------------
(1)  319/    152C :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  320/    152C :                     ; from ROM or RAM
(1)  321/    152C :                     ;
(1)  322/    152C :                     ; Call these labels BEFORE and AFTER your
(1)  323/    152C :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  324/    152C :                     ; FILL or COPY.
(1)  325/    152C :                     ;
(1)  326/    152C :                     ; This is where you put your Sound driver's Z80 stop
(1)  327/    152C :                     ; or pause calls here, SAVE THE REGISTERS THAT YOU
(1)  328/    152C :                     ; GONNA USE TO STACK.
(1)  329/    152C :                     ; --------------------------------------------------------
(1)  330/    152C :                     
(1)  331/    152C :                     ; --------------------------------------------------------
(1)  332/    152C :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  333/    152C :                     System_DmaEnter_ROM:
(1)  334/    152C : 6138                		bsr	System_DmaEnter_RAM
(1)  342/    152E : 4E75                		rts
(1)  343/    1530 :                     
(1)  344/    1530 :                     System_DmaExit_ROM:
(1)  352/    1530 : 6038                		bra	System_DmaExit_RAM
(1)  353/    1532 :                     
(1)  354/    1532 :                     ; ------------------------------------------------
(1)  355/    1532 :                     
(1)  356/    1532 :                     sys_MarsSlvCmd:
(1)  357/    1532 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  358/    1538 : 66F8                		bne.s	sys_MarsSlvCmd
(1)  359/    153A : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  360/    1540 : 8E06                		or.b	d6,d7
(1)  361/    1542 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  362/    1546 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  363/    154C : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
             1552 : 5103             
(1)  364/    1554 : 4E71                		nop
(1)  365/    1556 : 4E71                		nop
(1)  366/    1558 :                     .wait_exit:
(1)  367/    1558 : 4E71                		nop
(1)  368/    155A : 4E71                		nop
(1)  369/    155C : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  370/    1562 : 66F4                		bne.s	.wait_exit
(1)  371/    1564 : 4E75                		rts
(1)  372/    1566 :                     
(1)  373/    1566 :                     ; --------------------------------------------------------
(1)  374/    1566 :                     ; *** EXTERNAL JUMPS ***
(1)  375/    1566 :                     ; --------------------------------------------------------
(1)  376/    1566 :                     
(1)  377/    1566 :                     System_DmaEnter_RAM:
(1)  378/    1566 : 6000 EDDC           		bra	gemaDmaPause
(1)  379/    156A :                     System_DmaExit_RAM:
(1)  380/    156A : 6000 EDDA           		bra	gemaDmaResume
(1)  381/    156E :                     
(1)  382/    156E :                     ; ====================================================================
(1)  383/    156E :                     ; --------------------------------------------------------
(1)  384/    156E :                     ; Update sound/sycronize with the Z80
(1)  385/    156E :                     ; --------------------------------------------------------
(1)  386/    156E :                     
(1)  387/    156E :                     Sound_Update:
(1)  388/    156E : 6000 ED20           		bra	gemaSendRam
(1)  389/    1572 :                     
(1)  390/    1572 :                     ; ====================================================================
(1)  391/    1572 :                     ; --------------------------------------------------------
(1)  392/    1572 :                     ; Init sound driver
(1)  393/    1572 :                     ; --------------------------------------------------------
(1)  394/    1572 :                     
(1)  395/    1572 :                     Sound_Init:
(1)  396/    1572 : 6000 ED04           		bra	gemaInit
(1)  397/    1576 :                     
(1)  398/    1576 :                     ; ====================================================================
(1)  399/    1576 :                     ; --------------------------------------------------------
(1)  400/    1576 :                     ; System_Input
(1)  401/    1576 :                     ;
(1)  402/    1576 :                     ; Reads data from the Controller ports
(1)  403/    1576 :                     ;
(1)  404/    1576 :                     ; Call this during VBlank only once per frame,
(1)  405/    1576 :                     ; System_Render already calls this.
(1)  406/    1576 :                     ;
(1)  407/    1576 :                     ; Uses:
(1)  408/    1576 :                     ; d5-d7,a5-a6
(1)  409/    1576 :                     ; --------------------------------------------------------
(1)  410/    1576 :                     
(1)  411/    1576 :                     ; ----------------------------------------
(1)  412/    1576 :                     ; PICO input is hard-coded to
(1)  413/    1576 :                     ; Controller_1
(1)  414/    1576 :                     ;
(1)  415/    1576 :                     ; on_hold/on_press:
(1)  416/    1576 :                     ; %P00BRLDU
(1)  417/    1576 :                     ; UDLR - Arrows
(1)  418/    1576 :                     ;    B - BIG button red (JoyB)
(1)  419/    1576 :                     ;    P - Pen press/click (JoyStart)
(1)  420/    1576 :                     ;
(1)  421/    1576 :                     ; mouse_x/mouse_y:
(1)  422/    1576 :                     ; Pen X/Y position
(1)  423/    1576 :                     ; ----------------------------------------
(1)  424/    1576 :                     
(1)  425/    1576 :                     System_Input:
(1)  427/    1576 : 4DF8 D8F8           		lea	(RAM_InputData).w,a6
(1)  428/    157A : 4BF9 0080 0003      		lea	($800003).l,a5
(1)  429/    1580 : 7E00                		moveq	#0,d7
(1)  430/    1582 : 1E15                		move.b	(a5),d7			; $800003: %P00BRLDU
(1)  431/    1584 : 0A47 00FF           		eori.w	#$FF,d7
(1)  432/    1588 : 3C07                		move.w	d7,d6
(1)  433/    158A : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  434/    158E : BB47                		eor.w	d5,d7
(1)  435/    1590 : CE45                		and.w	d5,d7
(1)  436/    1592 : 3D47 0006           		move.w	d7,on_release(a6)
(1)  437/    1596 : 3A2E 0002           		move.w	on_hold(a6),d5
(1)  438/    159A : 0A45 00FF           		eori.w	#$FF,d5
(1)  439/    159E : CA46                		and.w	d6,d5
(1)  440/    15A0 : 3D45 0004           		move.w	d5,on_press(a6)
(1)  441/    15A4 : 3D46 0002           		move.w	d6,on_hold(a6)
(1)  442/    15A8 : 1E2D 0002           		move.b	2(a5),d7
(1)  443/    15AC : E14F                		lsl.w	#8,d7
(1)  444/    15AE : 1E2D 0004           		move.b	4(a5),d7
(1)  445/    15B2 : 9E7C 003C           		sub.w	#$3C,d7
(1)  446/    15B6 : 6A02                		bpl.s	.x_valid	 	; Failsafe negative X
(1)  447/    15B8 : 4247                		clr.w	d7
(1)  448/    15BA :                     .x_valid:
(1)  449/    15BA : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  450/    15BE :                     	; $0000-$00EF - Tablet
(1)  451/    15BE :                     	; $0100-$01EF - Storyware
(1)  452/    15BE : 7E00                		moveq	#0,d7
(1)  453/    15C0 : 1C2D 0006           		move.b	6(a5),d6
(1)  454/    15C4 : E14E                		lsl.w	#8,d6
(1)  455/    15C6 : 1C2D 0008           		move.b	8(a5),d6
(1)  456/    15CA : 0446 01FC           		subi.w	#$1FC,d6
(1)  457/    15CE : 6B02                		bmi.s	.bad_y
(1)  458/    15D0 : 3E06                		move.w	d6,d7
(1)  459/    15D2 :                     .bad_y:
(1)  460/    15D2 : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  461/    15D6 : 1C2D 000A           		move.b	10(a5),d6
(1)  462/    15DA : 7E00                		moveq	#0,d7
(1)  463/    15DC : 7A05                		moveq	#6-1,d5		; 6 pages
(1)  464/    15DE :                     .page_it:
(1)  465/    15DE : E24E                		lsr.w	#1,d6
(1)  466/    15E0 : 6402                		bcc.s	.no_bit
(1)  467/    15E2 : 5247                		addq.w	#1,d7
(1)  468/    15E4 :                     .no_bit:
(1)  469/    15E4 : 51CD FFF8           		dbf	d5,.page_it
(1)  470/    15E8 : 1D47 000C           		move.b	d7,ext_3(a6)
(1)  683/    15EC :                     
(1)  684/    15EC :                     ; ============================================================
(1)  685/    15EC :                     ; --------------------------------------------------------
(1)  686/    15EC :                     ; System_SramInit
(1)  687/    15EC :                     ;
(1)  688/    15EC :                     ; Enable SRAM/BRAM support
(1)  689/    15EC :                     ;
(1)  690/    15EC :                     ; Input:
(1)  691/    15EC :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  692/    15EC :                     ;      dc.b "SAVE_NAME__",0
(1)  693/    15EC :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  694/    15EC :                     ;                            ; protection)
(1)  695/    15EC :                     ;      dc.w flags:
(1)  696/    15EC :                     ;            0 | Normal
(1)  697/    15EC :                     ;           -1 | Save protection
(1)  698/    15EC :                     ;
(1)  699/    15EC :                     ;
(1)  700/    15EC :                     ; Notes:
(1)  701/    15EC :                     ; - ONLY use the RAM_SaveData section to modify
(1)  702/    15EC :                     ;   your changes, then call System_SramSave to
(1)  703/    15EC :                     ;   save it into SRAM/BRAM.
(1)  704/    15EC :                     ;
(1)  705/    15EC :                     ; CD/CD32X ONLY:
(1)  706/    15EC :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  707/    15EC :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  708/    15EC :                     ;   OVERWRITE without warning any other save.
(1)  709/    15EC :                     ; - Call gemaStopAll FIRST if any track uses
(1)  710/    15EC :                     ;   PCM samples
(1)  711/    15EC :                     ; --------------------------------------------------------
(1)  712/    15EC :                     
(1)  713/    15EC :                     System_SramInit:
(1)  715/    15EC : 4E71                		nop						; Pico can't use save data
(1)  782/    15EE :                     .cant_use:
(1)  783/    15EE : 6006                		bra	System_SramLoad
(1)  784/    15F0 :                     .already_set:
(1)  785/    15F0 : 4E75                		rts
(1)  786/    15F2 :                     
(1)  787/    15F2 :                     ; --------------------------------------------------------
(1)  788/    15F2 :                     ; System_SramSave
(1)  789/    15F2 :                     ;
(1)  790/    15F2 :                     ; Returns:
(1)  791/    15F2 :                     ; bcc | Save OK
(1)  792/    15F2 :                     ; bcs | Save failed
(1)  793/    15F2 :                     ; --------------------------------------------------------
(1)  794/    15F2 :                     
(1)  795/    15F2 :                     System_SramSave:
(1)  797/    15F2 : 4E71                		nop			; Pico can't use save data
(1)  861/    15F4 : 4E75                		rts
(1)  862/    15F6 :                     
(1)  863/    15F6 :                     ; --------------------------------------------------------
(1)  864/    15F6 :                     ; System_SramLoad
(1)  865/    15F6 :                     ;
(1)  866/    15F6 :                     ; Returns:
(1)  867/    15F6 :                     ; bcc | Save OK
(1)  868/    15F6 :                     ; bcs | Save not found
(1)  869/    15F6 :                     ; --------------------------------------------------------
(1)  870/    15F6 :                     
(1)  871/    15F6 :                     System_SramLoad:
(1)  873/    15F6 : 4E71                		nop			; Pico can't use save data
(1)  934/    15F8 : 4E75                		rts
(1)  935/    15FA :                     
(1)  936/    15FA :                     ; ============================================================
(1)  937/    15FA :                     ; --------------------------------------------------------
(1)  938/    15FA :                     ; System_Default
(1)  939/    15FA :                     ;
(1)  940/    15FA :                     ; Initializes current screen mode
(1)  941/    15FA :                     ;
(1)  942/    15FA :                     ; Uses:
(1)  943/    15FA :                     ; ALL
(1)  944/    15FA :                     ; --------------------------------------------------------
(1)  945/    15FA :                     
(1)  946/    15FA :                     System_Default:
(1)  947/    15FA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  948/    15FE : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  949/    1602 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  950/    1606 : 7C00                		moveq	#0,d6
(1)  951/    1608 :                     .clr_loop:
(1)  952/    1608 : 1CC6                		move.b	d6,(a6)+
(1)  953/    160A : 51CF FFFC           		dbf	d7,.clr_loop
(1)  954/    160E : 6100 F1D6           		bsr	Video_Clear
(1)  955/    1612 : 6100 EE86           		bsr	Video_Default
(1)  956/    1616 : 6000 02E6           		bra	Object_Init			; Reset all objects
(1)  957/    161A :                     
(1)  958/    161A :                     ; ====================================================================
(1)  959/    161A :                     ; ----------------------------------------------------------------
(1)  960/    161A :                     ; Default interrupts
(1)  961/    161A :                     ; ----------------------------------------------------------------
(1)  962/    161A :                     
(1)  963/    161A :                     ; --------------------------------------------------------
(1)  964/    161A :                     ; VBlank
(1)  965/    161A :                     ; --------------------------------------------------------
(1)  966/    161A :                     
(1)  967/    161A :                     VInt_Default:
(1)  968/    161A :                     ; 		movem.l	d0-a6,-(sp)
(1)  969/    161A :                     ; 		bsr	System_Input
(1)  970/    161A :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1)  971/    161A :                     ; 		movem.l	(sp)+,d0-a6
(1)  972/    161A : 4E73                		rte
(1)  973/    161C :                     
(1)  974/    161C :                     ; --------------------------------------------------------
(1)  975/    161C :                     ; HBlank
(1)  976/    161C :                     ; --------------------------------------------------------
(1)  977/    161C :                     
(1)  978/    161C :                     HInt_Default:
(1)  979/    161C : 4E73                		rte
(1)  980/    161E :                     
(1)  981/    161E :                     ; --------------------------------------------------------
(1)  982/    161E :                     ; External interrupt
(1)  983/    161E :                     ; --------------------------------------------------------
(1)  984/    161E :                     
(1)  985/    161E :                     ExtInt_Default:
(1)  986/    161E : 4E73                		rte
(1)  987/    1620 :                     
(1)  988/    1620 :                     ; ====================================================================
(1)  989/    1620 :                     ; ------------------------------------------------------------
(1)  990/    1620 :                     ; Subroutines
(1)  991/    1620 :                     ; ------------------------------------------------------------
(1)  992/    1620 :                     
(1)  993/    1620 :                     ; --------------------------------------------------------
(1)  994/    1620 :                     ; System_Random, System_Random_Seed
(1)  995/    1620 :                     ;
(1)  996/    1620 :                     ; Generate random value
(1)  997/    1620 :                     ;
(1)  998/    1620 :                     ; Input:
(1)  999/    1620 :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1000/    1620 :                     ;
(1) 1001/    1620 :                     ; Returns:
(1) 1002/    1620 :                     ; d0.l | Result value
(1) 1003/    1620 :                     ; --------------------------------------------------------
(1) 1004/    1620 :                     
(1) 1005/    1620 :                     System_Random_Seed:
(1) 1006/    1620 : 2F04                		move.l	d4,-(sp)
(1) 1007/    1622 : 2800                		move.l	d0,d4
(1) 1008/    1624 : 6114                		bsr	sysRnd_MkValue
(1) 1009/    1626 : 281F                		move.l	(sp)+,d4
(1) 1010/    1628 : 4E75                		rts
(1) 1011/    162A :                     System_Random:
(1) 1012/    162A : 2F04                		move.l	d4,-(sp)
(1) 1013/    162C : 2838 E97C           		move.l	(RAM_SysRandom).w,d4
(1) 1014/    1630 : 6108                		bsr	sysRnd_MkValue
(1) 1015/    1632 : 21C4 E97C           		move.l	d4,(RAM_SysRandom).w
(1) 1016/    1636 : 281F                		move.l	(sp)+,d4
(1) 1017/    1638 : 4E75                		rts
(1) 1018/    163A :                     sysRnd_MkValue:
(1) 1019/    163A : 4A84                		tst.l	d4
(1) 1020/    163C : 660E                		bne.s	.has_seed
(1) 1021/    163E : 2838 D7DC           		move.l	(RAM_FrameCount).w,d4
(1) 1022/    1642 : E1BC                		rol.l	d0,d4
(1) 1023/    1644 : E2BC                		ror.l	d1,d4
(1) 1024/    1646 : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1025/    164C :                     .has_seed:
(1) 1026/    164C : 2004                		move.l	d4,d0
(1) 1027/    164E : E484                		asr.l	#2,d4
(1) 1028/    1650 : D880                		add.l	d0,d4
(1) 1029/    1652 : E79C                		rol.l	#3,d4
(1) 1030/    1654 : D880                		add.l	d0,d4
(1) 1031/    1656 : 3004                		move.w	d4,d0
(1) 1032/    1658 : 4844                		swap	d4
(1) 1033/    165A : D044                		add.w	d4,d0
(1) 1034/    165C : 3800                		move.w	d0,d4
(1) 1035/    165E : E0BC                		ror.l	d0,d4
(1) 1036/    1660 : 4844                		swap	d4
(1) 1037/    1662 : 4E75                		rts
(1) 1038/    1664 :                     
(1) 1039/    1664 :                     ; --------------------------------------------------------
(1) 1040/    1664 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1041/    1664 :                     ;
(1) 1042/    1664 :                     ; Pick a random number using a maximum value,
(1) 1043/    1664 :                     ; uses System_Random
(1) 1044/    1664 :                     ;
(1) 1045/    1664 :                     ; Input:
(1) 1046/    1664 :                     ; d0.l | Maximum number to use + 1
(1) 1047/    1664 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1048/    1664 :                     ;
(1) 1049/    1664 :                     ; Returns:
(1) 1050/    1664 :                     ; d0.w | Output value
(1) 1051/    1664 :                     ; --------------------------------------------------------
(1) 1052/    1664 :                     
(1) 1053/    1664 :                     System_DiceRoll_Seed:
(1) 1054/    1664 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1055/    1668 : 2A00                		move.l	d0,d5
(1) 1056/    166A : 2801                		move.l	d1,d4
(1) 1057/    166C : 61B2                		bsr	System_Random_Seed
(1) 1058/    166E : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1059/    1674 : C0C5                		mulu.w	d5,d0
(1) 1060/    1676 : 4840                		swap	d0
(1) 1061/    1678 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1062/    167E : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1063/    1682 : 4E75                		rts
(1) 1064/    1684 :                     
(1) 1065/    1684 :                     System_DiceRoll:
(1) 1066/    1684 : 2F04                		move.l	d4,-(sp)
(1) 1067/    1686 : 2800                		move.l	d0,d4
(1) 1068/    1688 : 61A0                		bsr	System_Random
(1) 1069/    168A : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1070/    1690 : C0C4                		mulu.w	d4,d0
(1) 1071/    1692 : 4840                		swap	d0
(1) 1072/    1694 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1073/    169A : 281F                		move.l	(sp)+,d4
(1) 1074/    169C : 4E75                		rts
(1) 1075/    169E :                     
(1) 1076/    169E :                     ; --------------------------------------------------------
(1) 1077/    169E :                     ; System_SineWave, System_SineWave_Cos
(1) 1078/    169E :                     ;
(1) 1079/    169E :                     ; Get Sine or Cosine value
(1) 1080/    169E :                     ;
(1) 1081/    169E :                     ; Input:
(1) 1082/    169E :                     ; d0.w | Tan value: 0-511
(1) 1083/    169E :                     ;
(1) 1084/    169E :                     ; Returns:
(1) 1085/    169E :                     ; d1.w | Result
(1) 1086/    169E :                     ; --------------------------------------------------------
(1) 1087/    169E :                     
(1) 1088/    169E :                     System_SineWave_Cos:
(1) 1089/    169E : 2F07                		move.l	d7,-(sp)
(1) 1090/    16A0 : 3E00                		move.w	d0,d7
(1) 1091/    16A2 : 0647 0080           		addi.w  #$80,d7
(1) 1092/    16A6 : 6004                		bra	sys_SineWave
(1) 1093/    16A8 :                     System_SineWave:
(1) 1094/    16A8 : 2F07                		move.l	d7,-(sp)
(1) 1095/    16AA : 3E00                		move.w	d0,d7
(1) 1096/    16AC :                     sys_SineWave:
(1) 1097/    16AC : 0247 01FF           		andi.w	#$1FF,d7
(1) 1098/    16B0 : 3207                		move.w	d7,d1
(1) 1099/    16B2 : 0807 0007           		btst	#7,d7
(1) 1100/    16B6 : 6702                		beq.s	.loc_7EFA
(1) 1101/    16B8 : 4641                		not.w	d1
(1) 1102/    16BA :                     .loc_7EFA:
(1) 1103/    16BA : 0241 007F           		andi.w  #$7F,d1
(1) 1104/    16BE : D241                		add.w	d1,d1
(1) 1105/    16C0 : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1106/    16C4 : 0807 0008           		btst    #8,d7
(1) 1107/    16C8 : 6702                		beq.s   .loc_7F0C
(1) 1108/    16CA : 4441                		neg.w   d1
(1) 1109/    16CC :                     .loc_7F0C:
(1) 1110/    16CC : 48C1                		ext.l	d1
(1) 1111/    16CE : 2E1F                		move.l (sp)+,d7
(1) 1112/    16D0 : 4E75                		rts
(1) 1113/    16D2 :                     
(1) 1114/    16D2 :                     .sine_data:
(1) 1115/    16D2 :                     		binclude "system/md/data/sine_data.bin"
(1) 1116/    17D2 :                     		align 2
(1) 1117/    17D2 :                     
(1) 1118/    17D2 :                     ; --------------------------------------------------------
(1) 1119/    17D2 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1120/    17D2 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1121/    17D2 :                     ;
(1) 1122/    17D2 :                     ; Increment/Decrement BCD value
(1) 1123/    17D2 :                     ; for Scores, Lives, and such.
(1) 1124/    17D2 :                     ;
(1) 1125/    17D2 :                     ; Input:
(1) 1126/    17D2 :                     ; d0.? | BCD value input
(1) 1127/    17D2 :                     ; d1.l | Increment/Decrement by
(1) 1128/    17D2 :                     ;
(1) 1129/    17D2 :                     ; Returns:
(1) 1130/    17D2 :                     ; d0.? | BCD value output
(1) 1131/    17D2 :                     ; --------------------------------------------------------
(1) 1132/    17D2 :                     
(1) 1133/    17D2 :                     ; TODO: An overflow check
(1) 1134/    17D2 :                     
(1) 1135/    17D2 :                     System_BCD_SubB:
(1) 1136/    17D2 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1137/    17D8 : 6006                		bra.s	System_BCD_SubL
(1) 1138/    17DA :                     System_BCD_SubW:
(1) 1139/    17DA : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1140/    17E0 :                     ; 		bra.s	System_BCD_SubL
(1) 1141/    17E0 :                     System_BCD_SubL:
(1) 1142/    17E0 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1143/    17E4 : 613C                		bsr	sysBCD_SpOut
(1) 1144/    17E6 : 023C 0000           		and	#0,ccr
(1) 1145/    17EA : 8D0D                		sbcd	-(a5),-(a6)
(1) 1146/    17EC : 8D0D                		sbcd	-(a5),-(a6)
(1) 1147/    17EE : 8D0D                		sbcd	-(a5),-(a6)
(1) 1148/    17F0 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1149/    17F2 : 2016                		move.l	(a6),d0
(1) 1150/    17F4 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1151/    17F8 : 4E75                		rts
(1) 1152/    17FA :                     System_BCD_AddB:
(1) 1153/    17FA : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1154/    1800 : 6006                		bra.s	System_BCD_AddL
(1) 1155/    1802 :                     System_BCD_AddW:
(1) 1156/    1802 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1157/    1808 :                     ; 		bsr.s	System_BCD_AddL
(1) 1158/    1808 :                     System_BCD_AddL:
(1) 1159/    1808 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1160/    180C : 6114                		bsr	sysBCD_SpOut
(1) 1161/    180E : 023C 0000           		and	#0,ccr
(1) 1162/    1812 : CD0D                		abcd	-(a5),-(a6)
(1) 1163/    1814 : CD0D                		abcd	-(a5),-(a6)
(1) 1164/    1816 : CD0D                		abcd	-(a5),-(a6)
(1) 1165/    1818 : CD0D                		abcd	-(a5),-(a6)
(1) 1166/    181A : 2016                		move.l	(a6),d0
(1) 1167/    181C : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1168/    1820 : 4E75                		rts
(1) 1169/    1822 :                     sysBCD_SpOut:
(1) 1170/    1822 : 598F                		subq.l	#4,sp
(1) 1171/    1824 : 2C4F                		move.l	sp,a6
(1) 1172/    1826 : 598F                		subq.l	#4,sp
(1) 1173/    1828 : 2A4F                		move.l	sp,a5
(1) 1174/    182A : 2C80                		move.l	d0,(a6)
(1) 1175/    182C : 2A81                		move.l	d1,(a5)
(1) 1176/    182E : DCFC 0004           		adda	#4,a6
(1) 1177/    1832 : DAFC 0004           		adda	#4,a5
(1) 1178/    1836 : 508F                		addq.l	#8,sp
(1) 1179/    1838 : 4E75                		rts
(1) 1180/    183A :                     
(1) 1181/    183A :                     ; --------------------------------------------------------
(1) 1182/    183A :                     ; System_SetIntJumps
(1) 1183/    183A :                     ;
(1) 1184/    183A :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1185/    183A :                     ; generated by VDP
(1) 1186/    183A :                     ;
(1) 1187/    183A :                     ; Input:
(1) 1188/    183A :                     ; d0.l | New VBlank location
(1) 1189/    183A :                     ; d1.l | New HBlank location
(1) 1190/    183A :                     ; d2.l | New External location
(1) 1191/    183A :                     ;
(1) 1192/    183A :                     ; Notes:
(1) 1193/    183A :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1194/    183A :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1195/    183A :                     ; --------------------------------------------------------
(1) 1196/    183A :                     
(1) 1197/    183A :                     System_SetIntJumps:
(1) 1198/    183A : 4A80                		tst.l	d0
(1) 1199/    183C : 6704                		beq.s	.no_vint
(1) 1203/    183E : 21C0 E982            		move.l	d0,(RAM_VBlankJump+2).w
(1) 1205/    1842 :                     .no_vint:
(1) 1206/    1842 : 4A81                		tst.l	d1
(1) 1207/    1844 : 6704                		beq.s	.no_hint
(1) 1211/    1846 : 21C1 E988            		move.l	d1,(RAM_HBlankJump+2).w
(1) 1213/    184A :                     .no_hint:
(1) 1214/    184A : 4A82                		tst.l	d2
(1) 1215/    184C : 6704                		beq.s	.no_exint
(1) 1219/    184E : 21C2 E98E            		move.l	d2,(RAM_ExternalJump+2).w
(1) 1221/    1852 :                     .no_exint:
(1) 1222/    1852 : 4E75                		rts
(1) 1223/    1854 :                     
(1) 1224/    1854 :                     ; ====================================================================
(1) 1225/    1854 :                     ; ----------------------------------------------------------------
(1) 1226/    1854 :                     ; SEGA CD / CD32X ONLY
(1) 1227/    1854 :                     ; ----------------------------------------------------------------
(1) 1228/    1854 :                     
(1) 1229/    1854 :                     ; --------------------------------------------------------
(1) 1230/    1854 :                     ; System_MdMcd_Interrupt
(1) 1231/    1854 :                     ;
(1) 1232/    1854 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1233/    1854 :                     ; VBlank.
(1) 1234/    1854 :                     ; --------------------------------------------------------
(1) 1235/    1854 :                     
(1) 1236/    1854 :                     System_MdMcd_Interrupt:
(1) 1237/    1854 : 2F07                		move.l	d7,-(sp)
(1) 1238/    1856 :                     ; .wait_first:
(1) 1239/    1856 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1240/    1856 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1241/    1856 :                     ; 		andi.w	#$C0,d7
(1) 1242/    1856 :                     ; 		cmpi.w	#$C0,d7
(1) 1243/    1856 :                     ; 		beq.s	.wait_first
(1) 1244/    1856 :                     ; 		bset	#0,(sysmcd_reg).l		; Request Level 1
(1) 1245/    1856 : 13FC 0081 00A1      		move.b	#$81,(sysmcd_reg).l
             185C : 2000             
(1) 1246/    185E : 2E1F                		move.l	(sp)+,d7
(1) 1247/    1860 : 4E75                		rts
(1) 1248/    1862 :                     
(1) 1249/    1862 :                     ; --------------------------------------------------------
(1) 1250/    1862 :                     ; System_MdMcd_SubWait
(1) 1251/    1862 :                     ;
(1) 1252/    1862 :                     ; Waits until Sub-CPU finishes.
(1) 1253/    1862 :                     ;
(1) 1254/    1862 :                     ; Uses:
(1) 1255/    1862 :                     ; d7
(1) 1256/    1862 :                     ; --------------------------------------------------------
(1) 1257/    1862 :                     
(1) 1258/    1862 :                     System_MdMcd_SubWait:
(1) 1263/    1862 : 4E75                		rts
(1) 1264/    1864 :                     
(1) 1265/    1864 :                     ; --------------------------------------------------------
(1) 1266/    1864 :                     ; System_MdMcd_SubEnter
(1) 1267/    1864 :                     ;
(1) 1268/    1864 :                     ; Waits until Sub-CPU starts.
(1) 1269/    1864 :                     ;
(1) 1270/    1864 :                     ; Uses:
(1) 1271/    1864 :                     ; d7
(1) 1272/    1864 :                     ; --------------------------------------------------------
(1) 1273/    1864 :                     
(1) 1274/    1864 :                     System_MdMcd_SubEnter:
(1) 1279/    1864 : 4E75                		rts
(1) 1280/    1866 :                     
(1) 1281/    1866 :                     ; --------------------------------------------------------
(1) 1282/    1866 :                     ; System_MdMcd_SubTask
(1) 1283/    1866 :                     ;
(1) 1284/    1866 :                     ; Request task to Sub-CPU
(1) 1285/    1866 :                     ;
(1) 1286/    1866 :                     ; Input:
(1) 1287/    1866 :                     ; d0.b | Task number
(1) 1288/    1866 :                     ;
(1) 1289/    1866 :                     ; Uses:
(1) 1290/    1866 :                     ; d7/a6
(1) 1291/    1866 :                     ;
(1) 1292/    1866 :                     ; Notes:
(1) 1293/    1866 :                     ; This exits without waiting SUB to finish,
(1) 1294/    1866 :                     ; call System_MdMcd_SubWait after this if required.
(1) 1295/    1866 :                     ; --------------------------------------------------------
(1) 1296/    1866 :                     
(1) 1297/    1866 :                     System_MdMcd_SubTask:
(1) 1322/    1866 : 4E75                		rts
(1) 1323/    1868 :                     
(1) 1324/    1868 :                     ; --------------------------------------------------------
(1) 1325/    1868 :                     ; System_MdMcd_WaitWRAM
(1) 1326/    1868 :                     ;
(1) 1327/    1868 :                     ; Wait for Word-RAM permission.
(1) 1328/    1868 :                     ; --------------------------------------------------------
(1) 1329/    1868 :                     
(1) 1330/    1868 :                     System_MdMcd_WaitWRAM:
(1) 1331/    1868 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             186E : 2003             
(1) 1332/    1870 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1333/    1872 : 4E75                		rts
(1) 1334/    1874 :                     
(1) 1335/    1874 :                     ; --------------------------------------------------------
(1) 1336/    1874 :                     ; System_MdMcd_CheckWRAM
(1) 1337/    1874 :                     ;
(1) 1338/    1874 :                     ; Checks if Word-RAM is set to MAIN in return
(1) 1339/    1874 :                     ;
(1) 1340/    1874 :                     ; Returns:
(1) 1341/    1874 :                     ; beq | Word-RAM is available
(1) 1342/    1874 :                     ; bne | Word-RAM is locked
(1) 1343/    1874 :                     ; --------------------------------------------------------
(1) 1344/    1874 :                     
(1) 1345/    1874 :                     System_MdMcd_CheckWRAM:
(1) 1346/    1874 : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
             187A : 2003             
(1) 1347/    187C : 6706                		beq.s	.no_ret
(1) 1348/    187E : 003C 0004           		or	#%00100,ccr	; beq
(1) 1349/    1882 : 4E75                		rts
(1) 1350/    1884 :                     .no_ret:
(1) 1351/    1884 : 023C 001B           		and	#%11011,ccr	; bne
(1) 1352/    1888 : 4E75                		rts
(1) 1353/    188A :                     
(1) 1354/    188A :                     ; --------------------------------------------------------
(1) 1355/    188A :                     ; System_MdMcd_GiveWRAM
(1) 1356/    188A :                     ;
(1) 1357/    188A :                     ; Give Word-RAM to SubCPU (DMNA)
(1) 1358/    188A :                     ; --------------------------------------------------------
(1) 1359/    188A :                     
(1) 1360/    188A :                     System_MdMcd_GiveWRAM:
(1) 1361/    188A : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
             1890 : 2003             
(1) 1362/    1892 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1363/    1894 : 4E75                		rts
(1) 1364/    1896 :                     
(1) 1365/    1896 :                     ; --------------------------------------------------------
(1) 1366/    1896 :                     ; System_MdMcd_ReadFileRAM
(1) 1367/    1896 :                     ;
(1) 1368/    1896 :                     ; Read file from disc and transfer output the
(1) 1369/    1896 :                     ; data to a1, uses communication ports.
(1) 1370/    1896 :                     ;
(1) 1371/    1896 :                     ; Input:
(1) 1372/    1896 :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1373/    1896 :                     ; a1   | Output location in RAM
(1) 1374/    1896 :                     ; d0.w | Size, $10-aligned sizes only
(1) 1375/    1896 :                     ;
(1) 1376/    1896 :                     ; Uses:
(1) 1377/    1896 :                     ; d7,a0-a1,a5-a6
(1) 1378/    1896 :                     ;
(1) 1379/    1896 :                     ; Notes:
(1) 1380/    1896 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1381/    1896 :                     ; --------------------------------------------------------
(1) 1382/    1896 :                     
(1) 1383/    1896 :                     System_MdMcd_RdFile_RAM:
(1) 1433/    1896 : 4E75                		rts
(1) 1434/    1898 :                     
(1) 1435/    1898 :                     ; --------------------------------------------------------
(1) 1436/    1898 :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1437/    1898 :                     ;
(1) 1438/    1898 :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1439/    1898 :                     ; waits on finish.
(1) 1440/    1898 :                     ;
(1) 1441/    1898 :                     ; Input:
(1) 1442/    1898 :                     ; a0   | Filename string "FILENAME.BIN",0
(1) 1443/    1898 :                     ; a1   | Output location
(1) 1444/    1898 :                     ;
(1) 1445/    1898 :                     ; Notes:
(1) 1446/    1898 :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1447/    1898 :                     ; --------------------------------------------------------
(1) 1448/    1898 :                     
(1) 1449/    1898 :                     System_MdMcd_RdFile_WRAM:
(1) 1473/    1898 : 4E75                		rts
(1) 1474/    189A :                     
(1) 1475/    189A :                     ; --------------------------------------------------------
(1) 1476/    189A :                     ; System_MdMcd_CheckHome
(1) 1477/    189A :                     ;
(1) 1478/    189A :                     ; Checks if the player is holding A, B, C and
(1) 1479/    189A :                     ; then presses the START button.
(1) 1480/    189A :                     ;
(1) 1481/    189A :                     ; Returns:
(1) 1482/    189A :                     ; bcc | Combo input not pressed
(1) 1483/    189A :                     ; bcs | User did the combo presses
(1) 1484/    189A :                     ;
(1) 1485/    189A :                     ; Notes:
(1) 1486/    189A :                     ; If you call this from your Title Screen, carry
(1) 1487/    189A :                     ; should JUMP (not call) to System_MdMcd_ExitShell,
(1) 1488/    189A :                     ; for other modes change your Screen number to the
(1) 1489/    189A :                     ; Title Screen and return.
(1) 1490/    189A :                     ; --------------------------------------------------------
(1) 1491/    189A :                     
(1) 1492/    189A :                     System_MdMcd_CheckHome:
(1) 1493/    189A : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1494/    189E : 3E38 D8FC           		move.w	(Controller_1+on_press).w,d7
(1) 1495/    18A2 : 3C38 D8FA           		move.w	(Controller_1+on_hold).w,d6
(1) 1496/    18A6 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1497/    18AA : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1498/    18AE : 6610                		bne.s	.not_press
(1) 1499/    18B0 : 0247 0080           		andi.w	#JoyStart,d7
(1) 1500/    18B4 : 670A                		beq.s	.not_press
(1) 1501/    18B6 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1502/    18BA : 003C 0001           		or	#1,ccr
(1) 1503/    18BE : 4E75                		rts
(1) 1504/    18C0 :                     .not_press:
(1) 1505/    18C0 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1506/    18C4 : 023C 001E           		and	#%11110,ccr
(1) 1507/    18C8 : 4E75                		rts
(1) 1508/    18CA :                     
(1) 1509/    18CA :                     ; --------------------------------------------------------
(1) 1510/    18CA :                     ; System_MdMcd_ExitShell
(1) 1511/    18CA :                     ;
(1) 1512/    18CA :                     ; Exits the entire program and goes to
(1) 1513/    18CA :                     ; the BIOS/Shell.
(1) 1514/    18CA :                     ;
(1) 1515/    18CA :                     ; *** JUMP ONLY ***
(1) 1516/    18CA :                     ; --------------------------------------------------------
(1) 1517/    18CA :                     
(1) 1518/    18CA :                     ; jmp $0280: Hot restart, Stops PSG and Clears VDP
(1) 1519/    18CA :                     ; jmp $0284: Entry point
(1) 1520/    18CA :                     ; jmp $0288: CD player
(1) 1521/    18CA :                     ; jmp $028C: CD player, resets SP (safer)
(1) 1522/    18CA :                     
(1) 1523/    18CA :                     System_MdMcd_ExitShell:
(1) 1532/    18CA : 4E75                		rts
(1) 1534/    18CC :                     
(1) 1535/    18CC :                     ; ------------------------------------------------------------
(1) 1536/    18CC :                     ; CDDA PLAYBACK
(1) 1537/    18CC :                     ; ------------------------------------------------------------
(1) 1538/    18CC :                     
(1) 1539/    18CC :                     ; --------------------------------------------------------
(1) 1540/    18CC :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1541/    18CC :                     ;
(1) 1542/    18CC :                     ; Play CDDA track, normal or looped.
(1) 1543/    18CC :                     ;
(1) 1544/    18CC :                     ; Input:
(1) 1545/    18CC :                     ; d0.w | CD track number
(1) 1546/    18CC :                     ;
(1) 1547/    18CC :                     ; This calls Sub-Task $10 for normal playback
(1) 1548/    18CC :                     ; and $11 for looped
(1) 1549/    18CC :                     ;
(1) 1550/    18CC :                     ; Uses:
(1) 1551/    18CC :                     ; d4
(1) 1552/    18CC :                     ;
(1) 1553/    18CC :                     ; Notes:
(1) 1554/    18CC :                     ; Tracks $00, $01 and any negative values are
(1) 1555/    18CC :                     ; ignored.
(1) 1556/    18CC :                     ; --------------------------------------------------------
(1) 1557/    18CC :                     
(1) 1558/    18CC :                     System_MdMcd_CddaPlay:
(1) 1559/    18CC : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1560/    18D0 : 383C 0010           		move.w	#$0010,d4
(1) 1561/    18D4 : 6008                		bra	sysMdMcd_SetCdda
(1) 1562/    18D6 :                     System_MdMcd_CddaPlayL:
(1) 1563/    18D6 : 48E7 8102           		movem.l	d0/d7/a6,-(sp)
(1) 1564/    18DA : 383C 0011           		move.w	#$0011,d4
(1) 1565/    18DE :                     sysMdMcd_SetCdda:
(1) 1577/    18DE : 4CDF 4081           		movem.l	(sp)+,d0/d7/a6
(1) 1578/    18E2 : 4E75                		rts
(1) 1579/    18E4 :                     
(1) 1580/    18E4 :                     ; --------------------------------------------------------
(1) 1581/    18E4 :                     ; System_MdMcd_CdStop
(1) 1582/    18E4 :                     ;
(1) 1583/    18E4 :                     ; Stop CDDA track
(1) 1584/    18E4 :                     ; --------------------------------------------------------
(1) 1585/    18E4 :                     
(1) 1586/    18E4 :                     System_MdMcd_CddaStop:
(1) 1593/    18E4 : 4E75                		rts
(1) 1594/    18E6 :                     
(1) 1595/    18E6 :                     ; --------------------------------------------------------
(1) 1596/    18E6 :                     ; System_MdMcd_CdFade
(1) 1597/    18E6 :                     ;
(1) 1598/    18E6 :                     ; Fade the CDDA Volume
(1) 1599/    18E6 :                     ;
(1) 1600/    18E6 :                     ; Input:
(1) 1601/    18E6 :                     ; d0.w | Target volume:
(1) 1602/    18E6 :                     ;        $000-$400 - Min to Max
(1) 1603/    18E6 :                     ; d1.w | Fading speed:
(1) 1604/    18E6 :                     ;        $001-$200 - Slow to Fast
(1) 1605/    18E6 :                     ;             $400 - Set quick
(1) 1606/    18E6 :                     ;
(1) 1607/    18E6 :                     ; This calls Sub-Task $16
(1) 1608/    18E6 :                     ; --------------------------------------------------------
(1) 1609/    18E6 :                     
(1) 1610/    18E6 :                     System_MdMcd_CddaFade:
(1) 1619/    18E6 : 4E75                		rts
(1) 1620/    18E8 :                     
(1) 1621/    18E8 :                     ; --------------------------------------------------------
(1) 1622/    18E8 :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1623/    18E8 :                     ; --------------------------------------------------------
(1) 1624/    18E8 :                     
(1) 1625/    18E8 :                     def_SaveInfo:
(1) 1629/    18E8 : 4E49 4B4F 4E41      		dc.b HTAG_CDSAVE,0
             18EE : 4344 5F5F 5F00    
(1) 1631/    18F4 : 0004                		dc.w (SET_SRAMSIZE/$40)
(1) 1632/    18F6 : 0000                		dc.w 0
(1) 1633/    18F8 :                     		align 2
(1) 1634/    18F8 :                     
(1) 1635/    18F8 :                     ; ====================================================================
(1) 1636/    18F8 :                     ; ----------------------------------------------------------------
(1) 1637/    18F8 :                     ; 32X and CD32X ONLY
(1) 1638/    18F8 :                     ; ----------------------------------------------------------------
(1) 1639/    18F8 :                     
(1) 1640/    18F8 :                     ; --------------------------------------------------------
(1) 1641/    18F8 :                     ; System_MdMars_SendData
(1) 1642/    18F8 :                     ;
(1) 1643/    18F8 :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1644/    18F8 :                     ; using DREQ
(1) 1645/    18F8 :                     ;
(1) 1646/    18F8 :                     ; Input:
(1) 1647/    18F8 :                     ; a0   | Source data
(1) 1648/    18F8 :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1649/    18F8 :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1650/    18F8 :                     ;
(1) 1651/    18F8 :                     ; Returns:
(1) 1652/    18F8 :                     ; a1   | New output SDRAM location
(1) 1653/    18F8 :                     ;
(1) 1654/    18F8 :                     ; Uses:
(1) 1655/    18F8 :                     ; d0/a4-a5,d5-d7
(1) 1656/    18F8 :                     ;
(1) 1657/    18F8 :                     ; Notes:
(1) 1658/    18F8 :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1659/    18F8 :                     ; - POPULAR 32X EMULATORS WILL GET STUCK HERE
(1) 1660/    18F8 :                     ; --------------------------------------------------------
(1) 1661/    18F8 :                     
(1) 1662/    18F8 :                     System_MdMars_SendData:
(1) 1687/    18F8 : 4E75                		rts
(1) 1688/    18FA :                     
(1) 1689/    18FA :                     ; ------------------------------------------------------------
(1) 1690/    18FA :                     ; DREQ Genesis-to-32X code
(1) 1691/    18FA :                     ; ------------------------------------------------------------
(1) 1692/    18FA :                     
(1) 1763/    18FA : 4E75                		rts
(1) 1764/    18FC :                     
(1) 1765/    18FC :                     ; ====================================================================
(1) 1766/    18FC :                     ; ----------------------------------------------------------------
(1) 1767/    18FC :                     ; SHARED for all
(1) 1768/    18FC :                     ; ----------------------------------------------------------------
(1) 1769/    18FC :                     
(1) 1770/    18FC :                     ; --------------------------------------------------------
(1) 1771/    18FC :                     ; System_SetDataBank
(1) 1772/    18FC :                     ;
(1) 1773/    18FC :                     ; Sets the data bank depending of the system
(1) 1774/    18FC :                     ;
(1) 1775/    18FC :                     ; Input:
(1) 1776/    18FC :                     ; a0   | Pointer and filename:
(1) 1777/    18FC :                     ;        dc.l bank_pointer
(1) 1778/    18FC :                     ;        dc.b "FILENAME.BIN"
(1) 1779/    18FC :                     ;
(1) 1780/    18FC :                     ; Uses:
(1) 1781/    18FC :                     ; a4-a5,d5-d7
(1) 1782/    18FC :                     ;
(1) 1783/    18FC :                     ; Notes:
(1) 1784/    18FC :                     ; - ONLY call this if you have the opportunity to
(1) 1785/    18FC :                     ;   do it.
(1) 1786/    18FC :                     ; - SEGA CD / CD32X: This sets the WORD-RAM
(1) 1787/    18FC :                     ;   to load from disc
(1) 1788/    18FC :                     ;   * DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1789/    18FC :                     ;   Call Video_Mcd_StampDisable If neeeded. *
(1) 1790/    18FC :                     ; --------------------------------------------------------
(1) 1791/    18FC :                     
(1) 1792/    18FC :                     System_SetDataBank:
(1) 1809/    18FC : 4E75                		rts
(1) 1810/    18FE :                     
(1) 1811/    18FE :                     ; ====================================================================
(1) 1812/    18FE :                     ; ----------------------------------------------------------------
(1) 1813/    18FE :                     ; Objects system
(1) 1814/    18FE :                     ; ----------------------------------------------------------------
(1) 1815/    18FE :                     
(1) 1816/    18FE :                     ; --------------------------------------------------------
(1) 1817/    18FE :                     ; Init/Clear Objects system
(1) 1818/    18FE :                     ; --------------------------------------------------------
(1) 1819/    18FE :                     
(1) 1820/    18FE :                     Object_Init:
(1) 1821/    18FE : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1822/    1902 : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1823/    1906 :                     .clr:
(1) 1824/    1906 : 421E                		clr.b	(a6)+
(1) 1825/    1908 : 51CF FFFC           		dbf	d7,.clr
(1) 1826/    190C : 4E75                		rts
(1) 1827/    190E :                     
(1) 1828/    190E :                     ; --------------------------------------------------------
(1) 1829/    190E :                     ; Process objects
(1) 1830/    190E :                     ;
(1) 1831/    190E :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1832/    190E :                     ; --------------------------------------------------------
(1) 1833/    190E :                     
(1) 1834/    190E :                     Object_Run:
(1) 1835/    190E : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1836/    1912 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1837/    1916 :                     .next_one:
(1) 1838/    1916 : 2C16                		move.l	obj_code(a6),d6
(1) 1839/    1918 : 6708                		beq.s	.no_code	; Free slot
(1) 1840/    191A : 2F07                		move.l	d7,-(sp)
(1) 1841/    191C : 2A46                		move.l	d6,a5
(1) 1842/    191E : 4E95                		jsr	(a5)
(1) 1843/    1920 : 2E1F                		move.l	(sp)+,d7
(1) 1844/    1922 :                     .no_code:
(1) 1845/    1922 : DCFC 0068           		adda	#obj_len,a6
(1) 1846/    1926 : 51CF FFEE           		dbf	d7,.next_one
(1) 1847/    192A : 4E75                		rts
(1) 1848/    192C :                     
(1) 1849/    192C :                     ; --------------------------------------------------------
(1) 1850/    192C :                     ; Object_Set, Object_Make
(1) 1851/    192C :                     ;
(1) 1852/    192C :                     ; Set a new object into a specific slot.
(1) 1853/    192C :                     ;
(1) 1854/    192C :                     ; Input:
(1) 1855/    192C :                     ; d0.l | Object code pointer
(1) 1856/    192C :                     ;        If 0: DELETE the object including it's memory
(1) 1857/    192C :                     ; d1.b | Object sub-type (obj_subid)
(1) 1858/    192C :                     ; d2.w | Object slot
(1) 1859/    192C :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1860/    192C :                     ;
(1) 1861/    192C :                     ; Returns:
(1) 1862/    192C :                     ; bcc | Found free slot
(1) 1863/    192C :                     ; bcs | Ran-out of object slots
(1) 1864/    192C :                     ;
(1) 1865/    192C :                     ; Notes:
(1) 1866/    192C :                     ; If you are not using obj_subid you can ignore it,
(1) 1867/    192C :                     ; but it will contain the remains of d2 when you
(1) 1868/    192C :                     ; called this.
(1) 1869/    192C :                     ; --------------------------------------------------------
(1) 1870/    192C :                     
(1) 1871/    192C :                     Object_Set:
(1) 1872/    192C : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1873/    1930 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1874/    1934 : 7E00                		moveq	#0,d7
(1) 1875/    1936 : 3E02                		move.w	d2,d7
(1) 1876/    1938 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1877/    193C : DCC7                		adda	d7,a6
(1) 1878/    193E : 602C                		bra.s	objSet_Go
(1) 1879/    1940 :                     
(1) 1880/    1940 :                     Object_Make:
(1) 1881/    1940 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1882/    1944 : 4DF8 D938           		lea	(RAM_Objects).w,a6
(1) 1883/    1948 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1884/    194C : 7C00                		moveq	#0,d6
(1) 1885/    194E :                     .search:
(1) 1886/    194E : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1887/    1952 : 6C0E                		bge.s	objSet_Error
(1) 1888/    1954 : 4A96                		tst.l	obj_code(a6)
(1) 1889/    1956 : 6714                		beq.s	objSet_Go
(1) 1890/    1958 : DCFC 0068           		adda	#obj_len,a6
(1) 1891/    195C : 5246                		addq.w	#1,d6
(1) 1892/    195E : 51CF FFEE           		dbf	d7,.search
(1) 1893/    1962 :                     objSet_Error:
(1) 1894/    1962 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1895/    1966 : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1896/    196A : 4E75                		rts
(1) 1897/    196C :                     
(1) 1898/    196C :                     objSet_Go:
(1) 1899/    196C : 4A80                		tst.l	d0
(1) 1900/    196E : 670A                		beq.s	.from_del
(1) 1901/    1970 : 2E00                		move.l	d0,d7
(1) 1902/    1972 : 2C87                		move.l	d7,obj_code(a6)
(1) 1903/    1974 : 1D41 001D           		move.b	d1,obj_subid(a6)
(1) 1904/    1978 : 600C                		bra.s	.exit_this
(1) 1905/    197A :                     .from_del:
(1) 1906/    197A : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1907/    197C : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1908/    1980 : 421D                .clr:		clr.b	(a5)+
(1) 1909/    1982 : 51CF FFFC           		dbf	d7,.clr
(1) 1910/    1986 :                     .exit_this:
(1) 1911/    1986 : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1912/    198A : 003C 0001           		or	#1,ccr
(1) 1913/    198E : 4E75                		rts
(1) 1914/    1990 :                     
(1) 1915/    1990 :                     ; ====================================================================
(1) 1916/    1990 :                     ; --------------------------------------------------------
(1) 1917/    1990 :                     ; Object subroutines
(1) 1918/    1990 :                     ;
(1) 1919/    1990 :                     ; These can ONLY be called on the current object's code
(1) 1920/    1990 :                     ; --------------------------------------------------------
(1) 1921/    1990 :                     
(1) 1922/    1990 :                     ; --------------------------------------------------------
(1) 1923/    1990 :                     ; object_ResetVars
(1) 1924/    1990 :                     ;
(1) 1925/    1990 :                     ; Resets the current object's memory, call this
(1) 1926/    1990 :                     ; at very beginning of your object's init code
(1) 1927/    1990 :                     ;
(1) 1928/    1990 :                     ; Input:
(1) 1929/    1990 :                     ; a6 | This object
(1) 1930/    1990 :                     ; --------------------------------------------------------
(1) 1931/    1990 :                     
(1) 1932/    1990 :                     object_ResetVars:
(1) 1933/    1990 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1934/    1994 : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1935/    1998 : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1936/    199C : 7E00                		moveq	#0,d7
(1) 1937/    199E : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 1938/    19A0 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 1939/    19A4 : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 1940/    19A8 : 4E75                		rts
(1) 1941/    19AA :                     
(1) 1942/    19AA :                     ; --------------------------------------------------------
(1) 1943/    19AA :                     ; object_ResetAnim
(1) 1944/    19AA :                     ;
(1) 1945/    19AA :                     ; Reset animation variables, call this BEFORE using
(1) 1946/    19AA :                     ; object_Animate.
(1) 1947/    19AA :                     ;
(1) 1948/    19AA :                     ; Input:
(1) 1949/    19AA :                     ; a6 | This object
(1) 1950/    19AA :                     ; --------------------------------------------------------
(1) 1951/    19AA :                     
(1) 1952/    19AA :                     object_ResetAnim:
(1) 1953/    19AA :                     ;  		clr.w	obj_anim_indx(a6)
(1) 1954/    19AA :                     ;  		clr.b	obj_anim_spd(a6)
(1) 1955/    19AA : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 1956/    19B0 : 4E75                		rts
(1) 1957/    19B2 :                     
(1) 1958/    19B2 :                     ; --------------------------------------------------------
(1) 1959/    19B2 :                     ; object_Speed
(1) 1960/    19B2 :                     ;
(1) 1961/    19B2 :                     ; Moves the object using speed values set on
(1) 1962/    19B2 :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y.
(1) 1963/    19B2 :                     ;
(1) 1964/    19B2 :                     ; Input:
(1) 1965/    19B2 :                     ; a6 | This object
(1) 1966/    19B2 :                     ; --------------------------------------------------------
(1) 1967/    19B2 :                     
(1) 1968/    19B2 :                     object_Speed:
(1) 1969/    19B2 : 2F07                		move.l	d7,-(sp)
(1) 1970/    19B4 : 7E00                		moveq	#0,d7
(1) 1971/    19B6 : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 1972/    19BA : 48C7                		ext.l	d7
(1) 1973/    19BC : E187                		asl.l	#8,d7
(1) 1974/    19BE : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 1975/    19C2 : 7E00                		moveq	#0,d7
(1) 1976/    19C4 : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 1977/    19C8 : 48C7                		ext.l	d7
(1) 1978/    19CA : E187                		asl.l	#8,d7
(1) 1979/    19CC : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 1980/    19D0 : 7E00                		moveq	#0,d7
(1) 1981/    19D2 : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 1982/    19D6 : 48C7                		ext.l	d7
(1) 1983/    19D8 : E187                		asl.l	#8,d7
(1) 1984/    19DA : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 1985/    19DE : 2E1F                		move.l	(sp)+,d7
(1) 1986/    19E0 : 4E75                		rts
(1) 1987/    19E2 :                     
(1) 1988/    19E2 :                     ; --------------------------------------------------------
(1) 1989/    19E2 :                     ; object_Animate
(1) 1990/    19E2 :                     ;
(1) 1991/    19E2 :                     ; Animates the sprite with a animation script,
(1) 1992/    19E2 :                     ; modifies obj_frame with the frame to use.
(1) 1993/    19E2 :                     ;
(1) 1994/    19E2 :                     ; Input:
(1) 1995/    19E2 :                     ; a6 | This object
(1) 1996/    19E2 :                     ; a0 | Animation data
(1) 1997/    19E2 :                     ; --------------------------------------------------------
(1) 1998/    19E2 :                     
(1) 1999/    19E2 :                     ; anim_data:
(1) 2000/    19E2 :                     ; 	dc.w .frame_1-anim_data
(1) 2001/    19E2 :                     ; 	dc.w .frame_2-anim_data
(1) 2002/    19E2 :                     ; 	;...
(1) 2003/    19E2 :                     ;
(1) 2004/    19E2 :                     ; .frame_num:
(1) 2005/    19E2 :                     ; 	dc.w speed			; Animation speed/delay
(1) 2006/    19E2 :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2007/    19E2 :                     ; 	dc.w command			; End-of-data command
(1) 2008/    19E2 :                     ;
(1) 2009/    19E2 :                     ; commands:
(1) 2010/    19E2 :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2011/    19E2 :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2012/    19E2 :                     ; dc.w -3,to_indx	; Jump to index
(1) 2013/    19E2 :                     
(1) 2014/    19E2 :                     object_Animate:
(1) 2015/    19E2 : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2016/    19E6 : 7E00                		moveq	#0,d7
(1) 2017/    19E8 : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2018/    19EC : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2019/    19F0 : 670E                 		beq.s	.sameThing
(1) 2020/    19F2 : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2021/    19F8 : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2022/    19FC : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2023/    1A00 :                     .sameThing:
(1) 2024/    1A00 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2025/    1A04 : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2026/    1A08 : 6748                 		beq.s	.return
(1) 2027/    1A0A : DE47                 		add.w	d7,d7
(1) 2028/    1A0C : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2029/    1A10 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2030/    1A14 : 3E18                 		move.w	(a0)+,d7
(1) 2031/    1A16 : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2032/    1A1A : 670C                 		beq.s	.keepspd
(1) 2033/    1A1C : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2034/    1A22 : 6A2E                 		bpl.s	.return
(1) 2035/    1A24 : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2036/    1A28 :                     .keepspd:
(1) 2037/    1A28 : 7C00                 		moveq	#0,d6
(1) 2038/    1A2A : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2039/    1A2E : DE47                 		add.w	d7,d7
(1) 2040/    1A30 : 3C10                 		move.w	(a0),d6
(1) 2041/    1A32 : D0C7                 		adda	d7,a0
(1) 2042/    1A34 : 3A10                 		move.w	(a0),d5
(1) 2043/    1A36 : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2044/    1A3A : 6730                 		beq.s	.lastFrame	; finish
(1) 2045/    1A3C : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2046/    1A40 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2047/    1A42 : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2048/    1A46 : 671A                 		beq.s	.goToFrame
(1) 2049/    1A48 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2050/    1A4C : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2051/    1A52 :                     .return:
(1) 2052/    1A52 : 601C                 		bra.s	.exit_anim
(1) 2053/    1A54 :                     .noAnim:
(1) 2054/    1A54 : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2055/    1A5A : 3A06                 		move.w	d6,d5
(1) 2056/    1A5C : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2057/    1A60 : 600E                		bra.s	.exit_anim
(1) 2058/    1A62 :                     .goToFrame:
(1) 2059/    1A62 : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2060/    1A66 : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2061/    1A6C :                     .lastFrame:
(1) 2062/    1A6C : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2063/    1A70 :                     .exit_anim:
(1) 2064/    1A70 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2065/    1A74 : 4E75                		rts
(1) 2066/    1A76 :                     
(1) 2067/    1A76 :                     ; --------------------------------------------------------
(1) 2068/    1A76 :                     ; object_Touch
(1) 2069/    1A76 :                     ;
(1) 2070/    1A76 :                     ; Detects collision with another Object
(1) 2071/    1A76 :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2072/    1A76 :                     ;
(1) 2073/    1A76 :                     ; Input:
(1) 2074/    1A76 :                     ; a6   | This object
(1) 2075/    1A76 :                     ;
(1) 2076/    1A76 :                     ; Returns:
(1) 2077/    1A76 :                     ; d0.l | If Nothing: 0
(1) 2078/    1A76 :                     ;        If Found:   The target's RAM location
(1) 2079/    1A76 :                     ; --------------------------------------------------------
(1) 2080/    1A76 :                     
(1) 2081/    1A76 :                     object_Touch:
(1) 2082/    1A76 : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2083/    1A7A : 7000                		moveq	#0,d0
(1) 2084/    1A7C : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2085/    1A80 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2086/    1A84 : 8C45                		or.w	d5,d6
(1) 2087/    1A86 : 671E                		beq	.exit_this
(1) 2088/    1A88 : 4BF8 D938           		lea	(RAM_Objects).w,a5
(1) 2089/    1A8C : 7E27                		moveq	#MAX_MDOBJ-1,d7
(1) 2090/    1A8E :                     .next:
(1) 2091/    1A8E : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2092/    1A90 : 670A                		beq.s	.skip
(1) 2093/    1A92 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2094/    1A94 : 6706                		beq.s	.skip
(1) 2095/    1A96 : 6114                		bsr.s	.check_this
(1) 2096/    1A98 : 4A40                		tst.w	d0			; Exit if Found.
(1) 2097/    1A9A : 660A                		bne.s	.exit_this
(1) 2098/    1A9C : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2099/    1AA0 : 51CF FFEC           		dbf	d7,.next
(1) 2100/    1AA4 : 7000                		moveq	#0,d0
(1) 2101/    1AA6 :                     .exit_this:
(1) 2102/    1AA6 : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2103/    1AAA : 4E75                		rts
(1) 2104/    1AAC :                     
(1) 2105/    1AAC :                     ; main check
(1) 2106/    1AAC :                     .check_this:
(1) 2107/    1AAC : 7000                		moveq	#0,d0			; Reset Return
(1) 2108/    1AAE :                     	; d6 - Y current top
(1) 2109/    1AAE :                     	; d5 - Y current bottom
(1) 2110/    1AAE :                     	; d4 - Y target top
(1) 2111/    1AAE :                     	; d3 - Y target bottom
(1) 2112/    1AAE :                     	; Check X
(1) 2113/    1AAE : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2114/    1AB2 : 6700 00B4           		beq	.not_ytop
(1) 2115/    1AB6 : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2116/    1ABA : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2117/    1ABC : 3401                		move.w	d1,d2
(1) 2118/    1ABE : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2119/    1AC0 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2120/    1AC4 :                     ; 		lsl.w	#3,d1
(1) 2121/    1AC4 :                     ; 		lsl.w	#3,d2
(1) 2122/    1AC4 : 5342                		subq.w	#1,d2			; X right adjust
(1) 2123/    1AC6 : 9C41                		sub.w	d1,d6
(1) 2124/    1AC8 : DA42                		add.w	d2,d5
(1) 2125/    1ACA : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2126/    1ACE : 6700 0098           		beq	.not_ytop
(1) 2127/    1AD2 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2128/    1AD6 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2129/    1AD8 : 3401                		move.w	d1,d2
(1) 2130/    1ADA : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2131/    1ADC : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2132/    1AE0 :                     ; 		lsl.w	#3,d1
(1) 2133/    1AE0 :                     ; 		lsl.w	#3,d2
(1) 2134/    1AE0 : 5342                		subq.w	#1,d2
(1) 2135/    1AE2 : 9841                		sub.w	d1,d4
(1) 2136/    1AE4 : D642                		add.w	d2,d3
(1) 2137/    1AE6 : B646                		cmp.w	d6,d3
(1) 2138/    1AE8 : 6D7E                		blt	.not_ytop
(1) 2139/    1AEA : B845                		cmp.w	d5,d4
(1) 2140/    1AEC : 6C7A                		bge	.not_ytop
(1) 2141/    1AEE :                     
(1) 2142/    1AEE :                     	; Check Y
(1) 2143/    1AEE : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2144/    1AF2 : 6774                		beq	.not_ytop
(1) 2145/    1AF4 : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2146/    1AF8 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2147/    1AFA : 3401                		move.w	d1,d2
(1) 2148/    1AFC : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2149/    1AFE : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2150/    1B02 :                     ; 		lsl.w	#3,d1
(1) 2151/    1B02 :                     ; 		lsl.w	#3,d2
(1) 2152/    1B02 : 5342                		subq.w	#1,d2
(1) 2153/    1B04 : 9C41                		sub.w	d1,d6
(1) 2154/    1B06 : DA42                		add.w	d2,d5
(1) 2155/    1B08 : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2156/    1B0C : 675A                		beq	.not_ytop
(1) 2157/    1B0E : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2158/    1B12 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2159/    1B14 : 3401                		move.w	d1,d2
(1) 2160/    1B16 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2161/    1B18 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2162/    1B1C :                     ; 		lsl.w	#3,d1
(1) 2163/    1B1C :                     ; 		lsl.w	#3,d2
(1) 2164/    1B1C : 5342                		subq.w	#1,d2
(1) 2165/    1B1E : 9841                		sub.w	d1,d4
(1) 2166/    1B20 : D642                		add.w	d2,d3
(1) 2167/    1B22 : B646                		cmp.w	d6,d3
(1) 2168/    1B24 : 6D42                		blt.s	.not_ytop
(1) 2169/    1B26 : B845                		cmp.w	d5,d4
(1) 2170/    1B28 : 6C3E                		bge.s	.not_ytop
(1) 2171/    1B2A :                     
(1) 2172/    1B2A :                     	; Special Z check
(1) 2173/    1B2A : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2174/    1B2E : 6736                		beq.s	.set_ok
(1) 2175/    1B30 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2176/    1B34 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2177/    1B36 : 3401                		move.w	d1,d2
(1) 2178/    1B38 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2179/    1B3A : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2180/    1B3E :                     ; 		lsl.w	#3,d1
(1) 2181/    1B3E :                     ; 		lsl.w	#3,d2
(1) 2182/    1B3E : 5342                		subq.w	#1,d2
(1) 2183/    1B40 : 9C41                		sub.w	d1,d6
(1) 2184/    1B42 : DA42                		add.w	d2,d5
(1) 2185/    1B44 : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2186/    1B48 : 671C                		beq.s	.set_ok
(1) 2187/    1B4A : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2188/    1B4E : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2189/    1B50 : 3401                		move.w	d1,d2
(1) 2190/    1B52 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2191/    1B54 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2192/    1B58 :                     ; 		lsl.w	#3,d1
(1) 2193/    1B58 :                     ; 		lsl.w	#3,d2
(1) 2194/    1B58 : 5342                		subq.w	#1,d2
(1) 2195/    1B5A : 9841                		sub.w	d1,d4
(1) 2196/    1B5C : D642                		add.w	d2,d3
(1) 2197/    1B5E : B646                		cmp.w	d6,d3
(1) 2198/    1B60 : 6D06                		blt	.not_ytop
(1) 2199/    1B62 : B845                		cmp.w	d5,d4
(1) 2200/    1B64 : 6C02                		bge	.not_ytop
(1) 2201/    1B66 :                     .set_ok:
(1) 2202/    1B66 : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2203/    1B68 :                     .not_ytop:
(1) 2204/    1B68 : 4E75                		rts
(1) 2205/    1B6A :                     
(1) 2206/    1B6A :                     ; ============================================================
(1) 2207/    1B6A :                     ; --------------------------------------------------------
(1) 2208/    1B6A :                     ; object_GetSprInfo
(1) 2209/    1B6A :                     ;
(1) 2210/    1B6A :                     ; Call this before using
(1) 2211/    1B6A :                     ; Video_MdMars_MakeSpr2D or Video_MdMars_MakeSpr3D
(1) 2212/    1B6A :                     ;
(1) 2213/    1B6A :                     ; Input:
(1) 2214/    1B6A :                     ; a6   | This object
(1) 2215/    1B6A :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2216/    1B6A :                     ;        - Set to 0 for 3D Sprites
(1) 2217/    1B6A :                     ; d1.w | Flags
(1) 2218/    1B6A :                     ;
(1) 2219/    1B6A :                     ; Output:
(1) 2220/    1B6A :                     ; d0.l | X and Y position
(1) 2221/    1B6A :                     ; d1.l | Flags and Z Position
(1) 2222/    1B6A :                     ; d4.w | Current frame
(1) 2223/    1B6A :                     ; --------------------------------------------------------
(1) 2224/    1B6A :                     
(1) 2225/    1B6A :                     object_MdMars_GetSprInfo:
(1) 2240/    1B6A : 4E75                		rts
(1) 2241/    1B6C :                     
     195/    1B6C :                     
     196/    1B6C :                     ; --------------------------------------------------------
     197/    1B6C :                     ; SCREEN MODE MAIN LOOP
     198/    1B6C :                     ;
     199/    1B6C :                     ;  MD/Pico: Direct ROM jump
     200/    1B6C :                     ; CD/CD32X: Reads file from DISC and
     201/    1B6C :                     ;           transfers code to RAM
     202/    1B6C :                     ;      32X: Code is stored on ROM but runs in
     203/    1B6C :                     ;           RAM to prevent bus-conflicts with the
     204/    1B6C :                     ;           SH2's view of ROM at CS1
     205/    1B6C :                     ;
     206/    1B6C :                     ; - Returning in your current screen code loops here
     207/    1B6C :                     ; - 32X/CD32X:
     208/    1B6C :                     ;   This will turn OFF the 32X's current video mode
     209/    1B6C :                     ; --------------------------------------------------------
     210/    1B6C :                     
     211/    1B6C :                     Md_ReadModes:
     212/    1B6C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     220/    1B70 : 7000                		moveq	#0,d0
     221/    1B72 : 3038 E994           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     222/    1B76 : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     223/    1B7A : E948                		lsl.w	#4,d0				; number*$10
     224/    1B7C : 41FB 000A           		lea	.pick_mode(pc,d0.w),a0		; Read list
     225/    1B80 :                     	; SCD/CD32X
     245/    1B80 : 207B 0006           		movea.l	.pick_mode(pc,d0.w),a0		; a0 - ROM location
     246/    1B84 : 4E90                		jsr	(a0)
     248/    1B86 : 60E4                		bra.s	Md_ReadModes			; Loop on rts
     249/    1B88 :                     
     250/    1B88 :                     ; ====================================================================
     251/    1B88 :                     ; ---------------------------------------------
     252/    1B88 :                     ; ADD YOUR SCREEN MODE JUMPS GO HERE
     253/    1B88 :                     ; ---------------------------------------------
     254/    1B88 :                     
     255/    1B88 :                     .pick_mode:
     256/    1B88 :                     		include "game/screens.asm"
(1)    1/    1B88 :                     ; ============================================================
(1)    2/    1B88 :                     ; --------------------------------------------------------
(1)    3/    1B88 :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/    1B88 :                     ;
(1)    5/    1B88 :                     ; - Screen CODE includes: incl_code.asm
(1)    6/    1B88 :                     ;
(1)    7/    1B88 :                     ; - DATA Bank includes: incl_data.asm
(1)    8/    1B88 :                     ;
(1)    9/    1B88 :                     ; ** For CD/CD32X **
(1)   10/    1B88 :                     ;    Add your ISO file entries for both
(1)   11/    1B88 :                     ;    CODE and DATA in iso_files.asm
(1)   12/    1B88 :                     ; --------------------------------------------------------
(1)   13/    1B88 :                     
(1)   14/    1B88 :                     ; Entry:
(1)   15/    1B88 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   16/    1B8C : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1B92 : 3030 2E42 494E    
(1)   17/    1B98 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   18/    1B9C : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BA2 : 3030 2E42 494E    
(1)   19/    1BA8 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   20/    1BAC : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BB2 : 3030 2E42 494E    
(1)   21/    1BB8 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   22/    1BBC : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BC2 : 3030 2E42 494E    
(1)   23/    1BC8 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   24/    1BCC : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BD2 : 3030 2E42 494E    
(1)   25/    1BD8 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   26/    1BDC : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BE2 : 3030 2E42 494E    
(1)   27/    1BE8 : 0000 3B94           		dc.l Md_Screen00	; ****
(1)   28/    1BEC : 5343 5245 454E      		dc.b "SCREEN00.BIN"
             1BF2 : 3030 2E42 494E    
(1)   29/    1BF8 : 0000 3C7A           		dc.l Md_Screen07	; ****
(1)   30/    1BFC : 5343 5245 454E      		dc.b "SCREEN07.BIN"
             1C02 : 3037 2E42 494E    
(1)   31/    1C08 :                     
     257/    1C08 :                     
     258/    1C08 :                     ; ====================================================================
     259/    1C08 :                     
     266/    1C08 :                     
     267/    1C08 :                     Md_SysCode_e:
     268/    1C08 :                     		align 2
     269/    1C08 :                     
     270/    1C08 :                     ; ===========================================================================
     271/    1C08 :                     ; ----------------------------------------------------------------
     272/    1C08 :                     ; DATA section shared on both Cartridge or Disc
     273/    1C08 :                     ; ----------------------------------------------------------------
     274/    1C08 :                     
     275/    1C08 :                     ; --------------------------------------------------------
     276/    1C08 :                     ; CD/CD32X ISO header and files
     277/    1C08 :                     ; --------------------------------------------------------
     278/    1C08 :                     
     294/    1C08 :                     
     295/    1C08 :                     ; ===========================================================================
     296/    1C08 :                     ; --------------------------------------------------------
     297/    1C08 :                     ; Z80 driver include
     298/    1C08 :                     ;
     299/    1C08 :                     ; SCD/CD32X: Stored on DISC
     300/    1C08 :                     ; --------------------------------------------------------
     301/    1C08 :                     
     309/    1C08 :                     Z80_CODE:
     313/    1C08 :                     		include "sound/drv/gema_zdrv.asm"
(1)    1/    1C08 :                     ; ===========================================================================
(1)    2/    1C08 :                     ; -------------------------------------------------------------------
(1)    3/    1C08 :                     ; GEMA Z80 code
(1)    4/    1C08 :                     ; -------------------------------------------------------------------
(1)    5/    1C08 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =9H                  MAX_TRFRPZ	equ 9		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** MSB alinged ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE LSB ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size **HARDCODED
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of track buffers
(1)   19/       0 : =20H                 MAX_ZCMND	equ 20h		; !! Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip table arrays
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; seq_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  seq_Status	equ 00h	; ** Slot Status and flags (MUST BE at 00h)
(1)   36/       0 : =1H                  seq_Num		equ 01h ; ** Sequence number
(1)   37/       0 : =2H                  seq_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  seq_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  seq_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  seq_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  seq_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 seq_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 seq_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 seq_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 seq_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 seq_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 seq_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 seq_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 seq_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 seq_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 seq_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 seq_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 seq_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 seq_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 seq_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 seq_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 seq_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 seq_ChnIndx	equ 25h	; CHANNEL INDEXING START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 :                     
(1)   70/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   71/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   72/       0 : =2H                  chnl_Note	equ 2	; IT Music note or command
(1)   73/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   74/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   75/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   76/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   77/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   78/       0 :                     
(1)   79/       0 :                     
(1)   80/       0 :                     ; Table struct
(1)   81/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h			; !! Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   88/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   89/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   96/       0 : =0H                  zopcNop		equ 00h
(1)   97/       0 : =8H                  zopcEx		equ 08h
(1)   98/       0 : =0C9H                zopcRet		equ 0C9h
(1)   99/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  100/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG
(1)  103/       0 : =0H                  COM		equ 0
(1)  104/       0 : =4H                  LEV		equ 4
(1)  105/       0 : =8H                  ATK		equ 8
(1)  106/       0 : =0CH                 DKY		equ 12
(1)  107/       0 : =10H                 SLV		equ 16
(1)  108/       0 : =14H                 RRT		equ 20
(1)  109/       0 : =18H                 MODE		equ 24
(1)  110/       0 : =1CH                 DTL		equ 28
(1)  111/       0 : =20H                 DTH		equ 32
(1)  112/       0 : =24H                 ALV		equ 36
(1)  113/       0 : =28H                 FLG		equ 40
(1)  114/       0 : =2CH                 ARP		equ 44
(1)  115/       0 : =30H                 MVOL		equ 48
(1)  116/       0 : =34H                 EFFV		equ 52
(1)  117/       0 : =38H                 PTMR		equ 56
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrupts
(1)  125/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  127/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ;
(1)  132/       8 :                     ; Writes wave data to DAC using data stored
(1)  133/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  134/       8 :                     ; instructions to keep the samplerate stable.
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Input (EXX):
(1)  137/       8 :                     ;  c - WAVE buffer MSB
(1)  138/       8 :                     ; de - Pitch (xx.00)
(1)  139/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Uses (EXX):
(1)  142/       8 :                     ; b
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Notes:
(1)  145/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  146/       8 :                     ; DAC playback
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  149/       8 :                     ; --------------------------------------------------------
(1)  150/       8 :                     
(1)  151/       8 :                     ; EXX set:
(1)  152/       8 :                     ; af - temporal
(1)  153/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  154/       8 :                     ; de - pitch increment
(1)  155/       8 :                     ; hl - wave buffer position 00.00h
(1)  156/       8 :                     		org 8
(1)  157/       8 : D9                  dac_me:		exx			; * flip registers | Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save old hl buff
(1)  160/       B : 6C                  		ld	l,h		;
(1)  161/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  162/       D : 3E 2A               		ld	a,2Ah		;
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  167/      17 : 68                  		ld	l,b		;
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; * return regs
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     
(1)  189/      20 :                     		org 20h
(1)  190/      20 : F5                  dac_fill:	push	af		; Save af | Changes between PUSH AF(play) and RET(stop)
(1)  191/      21 : 3A 37 00            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  192/      24 : D9                  		exx			; * flip registers
(1)  193/      25 : AC                  		xor	h		; Grab LSB.00
(1)  194/      26 : D9                  		exx			; * restore regs
(1)  195/      27 : E6 80               		and	80h		; Check if LSB 7th bit changed
(1)  196/      29 : C4 3D 12            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  197/      2C : F1                  		pop	af		; Restore af
(1)  198/      2D : C9                  		ret
(1)  199/      2E :                     
(1)  200/      2E :                     ; --------------------------------------------------------
(1)  201/      2E :                     ; 02Eh - User read/write values
(1)  202/      2E :                     
(1)  203/      2E : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  204/      2F : 00                  psgHatMode	db 0			; Current PSGN mode
(1)  205/      30 : 00                  fmSpecial	db 0			; copy of FM3 enable bit
(1)  206/      31 : 00 00               sbeatAcc	dw 0			; Accumulates on each tick to trigger the sub beats
(1)  207/      33 : D6 00               sbeatPtck	dw 214			; Default global subbeats (this-32 for PAL) 214=125
(1)  208/      35 : 00                  x68ksrclsb	db 0			; readRom temporal LSB
(1)  209/      36 : 00                  x68ksrcmid	db 0			; readRom temporal MID
(1)  210/      37 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  211/      38 :                     
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     ; Z80 Interrupt at 0038h
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     
(1)  216/      38 :                     		org 38h				; Align 38h
(1)  217/      38 : ED 73 F6 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  218/      3C : F3                  		di				; Disable interrupt
(1)  219/      3D : C9                  		ret
(1)  220/      3E :                     
(1)  221/      3E :                     ; --------------------------------------------------------
(1)  222/      3E :                     ; Initialize
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     
(1)  225/      3E :                     z80_init:
(1)  226/      3E : CD 16 0F            		call	gema_init		; Init values
(1)  227/      41 :                     
(1)  228/      41 :                     ; --------------------------------------------------------
(1)  229/      41 :                     ; MAIN LOOP
(1)  230/      41 :                     ; --------------------------------------------------------
(1)  231/      41 :                     
(1)  232/      41 :                     drv_loop:
(1)  233/      41 : CF                  		rst	8
(1)  234/      42 : CD 88 0F            		call	get_tick		; Check tick on VBlank
(1)  235/      45 : E7                  		rst	20h			; Refill wave here
(1)  236/      46 : CF                  		rst	8
(1)  237/      47 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  238/      49 : 3A F8 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  239/      4C : D6 01               		sub	1
(1)  240/      4E : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  241/      50 : 32 F8 1C            		ld	(tickCnt),a
(1)  242/      53 : CD 62 10            		call	chip_env		; Process PSG and YM
(1)  243/      56 : CD 88 0F            		call	get_tick		; Check for another tick
(1)  244/      59 : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  245/      5B :                     .noticks:
(1)  246/      5B : 3A 32 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  247/      5E : D6 01               		sub	1
(1)  248/      60 : 38 06               		jr	c,.nobeats
(1)  249/      62 : CF                  		rst	8
(1)  250/      63 : 32 32 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  251/      66 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  252/      68 :                     .nobeats:
(1)  253/      68 : CF                  		rst	8
(1)  254/      69 : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  255/      6A : B7                  		or	a
(1)  256/      6B : 28 14               		jr	z,.neither
(1)  257/      6D : 32 F9 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  258/      70 : CF                  		rst	8
(1)  259/      71 : CD 88 0F            		call	get_tick
(1)  260/      74 : CD FC 05            		call	set_chips		; Process sound chips
(1)  261/      77 : CD 88 0F            		call	get_tick
(1)  262/      7A : CF                  		rst	8
(1)  263/      7B : CD 20 02            		call	upd_seq			; Read sequences
(1)  264/      7E : CD 88 0F            		call	get_tick
(1)  265/      81 :                     .neither:
(1)  266/      81 : CF                  		rst	8
(1)  270/      82 : CD 88 0F            		call	get_tick
(1)  271/      85 :                     .next_cmd:
(1)  272/      85 : 3A 80 1F            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  273/      88 : 47                  		ld	b,a			; are in the same spot a == b
(1)  274/      89 : 3A 2E 00            		ld	a,(commZRead)
(1)  275/      8C : B8                  		cp	b			; If equal, no changes.
(1)  276/      8D : 28 B2               		jr	z,drv_loop
(1)  277/      8F : CF                  		rst	8
(1)  278/      90 : CD A8 00            		call	.grab_arg		; Get command start flag -1
(1)  279/      93 : FE FF               		cp	-1
(1)  280/      95 : 20 AA               		jr	nz,drv_loop		; If not, end of command
(1)  281/      97 : CD A8 00            		call	.grab_arg		; Read command number
(1)  282/      9A : 87                  		add	a,a			; num*2
(1)  283/      9B : 21 C7 00            		ld	hl,.list		; Index-jump
(1)  284/      9E : 16 00               		ld	d,0
(1)  285/      A0 : 5F                  		ld	e,a
(1)  286/      A1 : 19                  		add	hl,de
(1)  287/      A2 : 7E                  		ld	a,(hl)
(1)  288/      A3 : 23                  		inc	hl
(1)  289/      A4 : 66                  		ld	h,(hl)
(1)  290/      A5 : CF                  		rst	8
(1)  291/      A6 : 6F                  		ld	l,a
(1)  292/      A7 : E9                  		jp	(hl)			; Jump to label
(1)  293/      A8 :                     
(1)  294/      A8 :                     ; --------------------------------------------------------
(1)  295/      A8 :                     ; Read cmd byte
(1)  296/      A8 :                     ; --------------------------------------------------------
(1)  297/      A8 :                     
(1)  298/      A8 :                     .grab_arg:
(1)  299/      A8 : D5                  		push	de
(1)  300/      A9 : E5                  		push	hl
(1)  301/      AA :                     .getcbytel:
(1)  302/      AA : 3A 80 1F            		ld	a,(commZWrite)
(1)  303/      AD : 57                  		ld	d,a
(1)  304/      AE : CF                  		rst	8
(1)  305/      AF : 3A 2E 00            		ld	a,(commZRead)
(1)  306/      B2 : BA                  		cp	d			; commZ R/W indexes are the same?
(1)  307/      B3 : 28 F5               		jr	z,.getcbytel		; wait until these counters change.
(1)  308/      B5 : 16 00               		ld	d,0
(1)  309/      B7 : 5F                  		ld	e,a
(1)  310/      B8 : 21 60 1F            		ld	hl,commZfifo		; Read commZ list + index
(1)  311/      BB : 19                  		add	hl,de
(1)  312/      BC : CF                  		rst	8
(1)  313/      BD : 3C                  		inc	a
(1)  314/      BE : E6 1F               		and	MAX_ZCMND-1		; ** commZ list buffer limit
(1)  315/      C0 : 32 2E 00            		ld	(commZRead),a
(1)  316/      C3 : 7E                  		ld	a,(hl)			; a - got this byte from the buffer
(1)  317/      C4 : E1                  		pop	hl
(1)  318/      C5 : D1                  		pop	de
(1)  319/      C6 : C9                  		ret
(1)  320/      C7 :                     
(1)  321/      C7 :                     ; --------------------------------------------------------
(1)  322/      C7 :                     
(1)  323/      C7 :                     .list:
(1)  324/      C7 : D7 00               		dw .cmnd_0		; 00h - TESTING
(1)  325/      C9 : DA 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  326/      CB : F3 00               		dw .cmnd_2		; 02h - Play by track number
(1)  327/      CD : 2D 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  328/      CF : D7 00               		dw .cmnd_0		; 04h - (free)
(1)  329/      D1 : 6B 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  330/      D3 : A4 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  331/      D5 : DD 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  332/      D7 :                     
(1)  333/      D7 :                     ; --------------------------------------------------------
(1)  334/      D7 :                     ; Command 00h
(1)  335/      D7 :                     ;
(1)  336/      D7 :                     ; Reserved for TESTING purposes.
(1)  337/      D7 :                     ; --------------------------------------------------------
(1)  338/      D7 :                     
(1)  339/      D7 :                     .cmnd_0:
(1)  340/      D7 : C3 85 00            		jp	.next_cmd
(1)  341/      DA :                     
(1)  342/      DA :                     ; --------------------------------------------------------
(1)  343/      DA :                     ; Command 01h:
(1)  344/      DA :                     ;
(1)  345/      DA :                     ; Set the Track MASTER-list.
(1)  346/      DA :                     ; --------------------------------------------------------
(1)  347/      DA :                     
(1)  348/      DA :                     .cmnd_1:
(1)  349/      DA : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  350/      DD : CD A8 00            		call	.grab_arg		; $000000xx
(1)  351/      E0 : 77                  		ld	(hl),a
(1)  352/      E1 : 2B                  		dec	hl
(1)  353/      E2 : CD A8 00            		call	.grab_arg		; $0000xx00
(1)  354/      E5 : 77                  		ld	(hl),a
(1)  355/      E6 : 2B                  		dec	hl
(1)  356/      E7 : CD A8 00            		call	.grab_arg		; $00xx0000
(1)  357/      EA : 77                  		ld	(hl),a
(1)  358/      EB : 2B                  		dec	hl
(1)  359/      EC : CD A8 00            		call	.grab_arg		; $xx000000 (filler)
(1)  360/      EF : 77                  		ld	(hl),a
(1)  361/      F0 : C3 85 00            		jp	.next_cmd
(1)  362/      F3 :                     
(1)  363/      F3 :                     ; --------------------------------------------------------
(1)  364/      F3 :                     ; Command 02h:
(1)  365/      F3 :                     ;
(1)  366/      F3 :                     ; Make new track by sequence number
(1)  367/      F3 :                     ;
(1)  368/      F3 :                     ; SeqID, BlockPos, SlotIndex(If -1 autofill)
(1)  369/      F3 :                     ; --------------------------------------------------------
(1)  370/      F3 :                     
(1)  371/      F3 :                     .cmnd_2:
(1)  372/      F3 : CD A8 00            		call	.grab_arg		; d1: Sequence ID
(1)  373/      F6 : 4F                  		ld	c,a			; copy to c
(1)  374/      F7 : CD A8 00            		call	.grab_arg		; d2: Block from
(1)  375/      FA : 47                  		ld	b,a			; copy to b
(1)  376/      FB : CF                  		rst	8
(1)  377/      FC : CD A8 00            		call	.grab_arg		; d0: Slot index
(1)  378/      FF : FD 21 CE 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  379/     103 : B7                  		or	a
(1)  380/     104 : FA 13 01            		jp	m,.srch_mode		; If negative, search for all with same ID
(1)  381/     107 : FE 03               		cp	MAX_SLOTS
(1)  382/     109 : D2 85 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  383/     10C : CF                  		rst	8
(1)  384/     10D : CD FB 01            		call	.cmnd_rdslot
(1)  385/     110 : C3 22 01            		jp	.wrtto_slot
(1)  386/     113 :                     ; -1
(1)  387/     113 :                     .srch_mode:
(1)  388/     113 : CD 0D 02            		call	.srch_slot		; Read this slot
(1)  389/     116 : FE FF               		cp	-1
(1)  390/     118 : CA 85 00            		jp	z,.next_cmd		; if -1, exit.
(1)  391/     11B : CB 7E               		bit	7,(hl)			; Is this track active?
(1)  392/     11D : CA 22 01            		jp	z,.wrtto_slot
(1)  393/     120 : 18 F1               		jr	.srch_mode		; Check next one
(1)  394/     122 :                     .wrtto_slot:
(1)  395/     122 : 36 C0               		ld	(hl),11000000b		; ** Write seq_Status (Enable+FirstFill)
(1)  396/     124 : 23                  		inc	hl
(1)  397/     125 : CF                  		rst	8
(1)  398/     126 : 71                  		ld	(hl),c			; ** seq_Num
(1)  399/     127 : 23                  		inc	hl
(1)  400/     128 : 70                  		ld	(hl),b			; ** seq_SetBlk
(1)  401/     129 : 79                  		ld	a,c
(1)  402/     12A : C3 85 00            		jp	.next_cmd
(1)  403/     12D :                     
(1)  404/     12D :                     ; --------------------------------------------------------
(1)  405/     12D :                     ; Command 03h:
(1)  406/     12D :                     ;
(1)  407/     12D :                     ; Stop track with the same sequence number
(1)  408/     12D :                     ;
(1)  409/     12D :                     ; SeqID,SlotIndex(If -1, stop all)
(1)  410/     12D :                     ; --------------------------------------------------------
(1)  411/     12D :                     
(1)  412/     12D :                     .cmnd_3:
(1)  413/     12D : CD A8 00            		call	.grab_arg		; d1: Sequence ID
(1)  414/     130 : 4F                  		ld	c,a			; copy to c
(1)  415/     131 : CD A8 00            		call	.grab_arg		; d0: Slot index
(1)  416/     134 : FD 21 CE 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  417/     138 : B7                  		or	a
(1)  418/     139 : FA 4B 01            		jp	m,.srch_del		; If negative, search for all with same ID
(1)  419/     13C : FE 03               		cp	MAX_SLOTS
(1)  420/     13E : D2 85 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  421/     141 : CF                  		rst	8
(1)  422/     142 : CD FB 01            		call	.cmnd_rdslot
(1)  423/     145 : CD 58 01            		call	.wrtto_del
(1)  424/     148 : C3 85 00            		jp	.next_cmd
(1)  425/     14B :                     ; -1
(1)  426/     14B :                     .srch_del:
(1)  427/     14B : CD 0D 02            		call	.srch_slot		; Read this slot
(1)  428/     14E : FE FF               		cp	-1
(1)  429/     150 : CA 85 00            		jp	z,.next_cmd		; if -1, exit.
(1)  430/     153 : CD 58 01            		call	.wrtto_del
(1)  431/     156 : 18 F3               		jr	.srch_del
(1)  432/     158 :                     .wrtto_del:
(1)  433/     158 : CB 7E               		bit	7,(hl)			; Slot is active?
(1)  434/     15A : C8                  		ret	z
(1)  435/     15B : CB 79               		bit	7,c			; seq is -1? (lazy bit check)
(1)  436/     15D : 20 05               		jr	nz,.del_all
(1)  437/     15F : DD 7E 01            		ld	a,(ix+seq_Num)
(1)  438/     162 : B9                  		cp	c			; Is this the same seq?
(1)  439/     163 : C0                  		ret	nz			; Return if not.
(1)  440/     164 :                     .del_all:
(1)  441/     164 : 36 FF               		ld	(hl),-1			; stop channel and clear slot
(1)  442/     166 : 23                  		inc	hl
(1)  443/     167 : 36 FF               		ld	(hl),-1			; Reset seqId
(1)  444/     169 : CF                  		rst	8
(1)  445/     16A : C9                  		ret
(1)  446/     16B :                     
(1)  447/     16B :                     ; --------------------------------------------------------
(1)  448/     16B :                     ; Command 05h:
(1)  449/     16B :                     ;
(1)  450/     16B :                     ; Fade volume (FadeIn/FadeOut)
(1)  451/     16B :                     ;
(1)  452/     16B :                     ; Arguments:
(1)  453/     16B :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  454/     16B :                     ; --------------------------------------------------------
(1)  455/     16B :                     
(1)  456/     16B :                     .cmnd_5:
(1)  457/     16B : CD A8 00            		call	.grab_arg		; d1: Master volume
(1)  458/     16E : 4F                  		ld	c,a			; copy to c
(1)  459/     16F : CD A8 00            		call	.grab_arg		; d0: Slot index
(1)  460/     172 : FD 21 CE 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  461/     176 : B7                  		or	a
(1)  462/     177 : FA 89 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  463/     17A : FE 03               		cp	MAX_SLOTS
(1)  464/     17C : D2 85 00            		jp	nc,.next_cmd		; Exit If maxed out slots
(1)  465/     17F : CF                  		rst	8
(1)  466/     180 : CD FB 01            		call	.cmnd_rdslot
(1)  467/     183 : CD 96 01            		call	.wrtto_fvol
(1)  468/     186 : C3 85 00            		jp	.next_cmd
(1)  469/     189 :                     ; -1
(1)  470/     189 :                     .srch_fvol:
(1)  471/     189 : CD 0D 02            		call	.srch_slot
(1)  472/     18C : FE FF               		cp	-1
(1)  473/     18E : CA 85 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  474/     191 : CD 96 01            		call	.wrtto_fvol
(1)  475/     194 : 18 F3               		jr	.srch_fvol
(1)  476/     196 :                     .wrtto_fvol:
(1)  477/     196 : CB 7E               		bit	7,(hl)			; Active?
(1)  478/     198 : C8                  		ret	z
(1)  479/     199 : CB DE               		set	3,(hl)			; Volume update flag
(1)  480/     19B : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  481/     19E : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  482/     1A2 : CF                  		rst	8
(1)  483/     1A3 : C9                  		ret
(1)  484/     1A4 :                     
(1)  485/     1A4 :                     ; --------------------------------------------------------
(1)  486/     1A4 :                     ; Command 06h:
(1)  487/     1A4 :                     ;
(1)  488/     1A4 :                     ; Set track's master volume
(1)  489/     1A4 :                     ;
(1)  490/     1A4 :                     ; Arguments:
(1)  491/     1A4 :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  492/     1A4 :                     ; --------------------------------------------------------
(1)  493/     1A4 :                     
(1)  494/     1A4 :                     .cmnd_6:
(1)  495/     1A4 : CD A8 00            		call	.grab_arg		; d1: Master volume
(1)  496/     1A7 : 4F                  		ld	c,a			; copy to c
(1)  497/     1A8 : CD A8 00            		call	.grab_arg		; d0: Slot index
(1)  498/     1AB : FD 21 CE 17         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  499/     1AF : B7                  		or	a
(1)  500/     1B0 : FA C2 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  501/     1B3 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  502/     1B5 : D2 85 00            		jp	nc,.next_cmd
(1)  503/     1B8 : CF                  		rst	8
(1)  504/     1B9 : CD FB 01            		call	.cmnd_rdslot
(1)  505/     1BC : CD CF 01            		call	.wrtto_vol
(1)  506/     1BF : C3 85 00            		jp	.next_cmd
(1)  507/     1C2 :                     ; -1
(1)  508/     1C2 :                     .srch_vol:
(1)  509/     1C2 : CD 0D 02            		call	.srch_slot
(1)  510/     1C5 : FE FF               		cp	-1
(1)  511/     1C7 : CA 85 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  512/     1CA : CD CF 01            		call	.wrtto_vol
(1)  513/     1CD : 18 F3               		jr	.srch_vol
(1)  514/     1CF :                     .wrtto_vol:
(1)  515/     1CF : CB DE               		set	3,(hl)			; Volume update flag
(1)  516/     1D1 : DD 71 0E            		ld	(ix+seq_VolMaster),c
(1)  517/     1D4 : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  518/     1D7 : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  519/     1DB : CF                  		rst	8
(1)  520/     1DC : C9                  		ret
(1)  521/     1DD :                     
(1)  522/     1DD :                     ; --------------------------------------------------------
(1)  523/     1DD :                     ; Command 07h:
(1)  524/     1DD :                     ;
(1)  525/     1DD :                     ; Set global sub-beats
(1)  526/     1DD :                     ; --------------------------------------------------------
(1)  527/     1DD :                     
(1)  528/     1DD :                     .cmnd_7:
(1)  529/     1DD : CD A8 00            		call	.grab_arg		; d0.w: $00xx
(1)  530/     1E0 : 4F                  		ld	c,a
(1)  531/     1E1 : CD A8 00            		call	.grab_arg		; d0.w: $xx00
(1)  532/     1E4 : 67                  		ld	h,a
(1)  533/     1E5 : 69                  		ld	l,c
(1)  534/     1E6 : 3A 88 1F            		ld	a,(palMode)		; PAL speed mode?
(1)  535/     1E9 : B7                  		or	a
(1)  536/     1EA : 28 04               		jr	z,.not_pal
(1)  537/     1EC : 11 28 00            		ld	de,40			; Add 40
(1)  538/     1EF : 19                  		add	hl,de
(1)  539/     1F0 :                     .not_pal:
(1)  540/     1F0 : 7C                  		ld	a,h
(1)  541/     1F1 : 32 34 00            		ld	(sbeatPtck+1),a
(1)  542/     1F4 : 7D                  		ld	a,l
(1)  543/     1F5 : 32 33 00            		ld	(sbeatPtck),a
(1)  544/     1F8 : C3 85 00            		jp	.next_cmd
(1)  545/     1FB :                     
(1)  546/     1FB :                     ; --------------------------------------------------------
(1)  547/     1FB :                     ; Shared subs
(1)  548/     1FB :                     ; --------------------------------------------------------
(1)  549/     1FB :                     
(1)  550/     1FB :                     .cmnd_rdslot:
(1)  551/     1FB : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  552/     1FC : 87                  		add	a,a			; id*8
(1)  553/     1FD : 87                  		add	a,a
(1)  554/     1FE : 16 00               		ld	d,0
(1)  555/     200 : 5F                  		ld	e,a
(1)  556/     201 : FD 19               		add	iy,de
(1)  557/     203 : FD 6E 00            		ld	l,(iy)
(1)  558/     206 : FD 66 01            		ld	h,(iy+1)
(1)  559/     209 : E5                  		push	hl
(1)  560/     20A : DD E1               		pop	ix
(1)  561/     20C : C9                  		ret
(1)  562/     20D :                     
(1)  563/     20D :                     ; ------------------------------------------------
(1)  564/     20D :                     ; iy - nikona_BuffList
(1)  565/     20D :                     
(1)  566/     20D :                     .srch_slot:
(1)  567/     20D : FD 7E 00            		ld	a,(iy)
(1)  568/     210 : FE FF               		cp	-1			; End of list?
(1)  569/     212 : C8                  		ret	z
(1)  570/     213 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  571/     216 : 6F                  		ld	l,a
(1)  572/     217 : E5                  		push	hl
(1)  573/     218 : DD E1               		pop	ix
(1)  574/     21A : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  575/     21D : FD 19               		add	iy,de			; Next entry for later
(1)  576/     21F : C9                  		ret
(1)  577/     220 :                     
(1)  578/     220 :                     ; ====================================================================
(1)  579/     220 :                     ; ----------------------------------------------------------------
(1)  580/     220 :                     ; MAIN Playback section
(1)  581/     220 :                     ; ----------------------------------------------------------------
(1)  582/     220 :                     
(1)  583/     220 :                     ; --------------------------------------------------------
(1)  584/     220 :                     ; Read mini-impulse-tracker data
(1)  585/     220 :                     ; --------------------------------------------------------
(1)  586/     220 :                     
(1)  587/     220 :                     upd_seq:
(1)  588/     220 : E7                  		rst	20h
(1)  589/     221 : CD 88 0F            		call	get_tick		; Check for tick flag
(1)  590/     224 : FD 21 DF 16         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1)  591/     228 : CD 36 02            		call	.read_seq
(1)  592/     22B : FD 21 1E 17         		ld	iy,trkBuff_1
(1)  593/     22F : CD 36 02            		call	.read_seq
(1)  594/     232 : FD 21 5D 17         		ld	iy,trkBuff_2
(1)  595/     236 :                     
(1)  596/     236 :                     ; ----------------------------------------
(1)  597/     236 :                     ; Read sequence
(1)  598/     236 :                     ;
(1)  599/     236 :                     ; iy - Current sequence buffer
(1)  600/     236 :                     ; ----------------------------------------
(1)  601/     236 :                     
(1)  602/     236 :                     .read_seq:
(1)  603/     236 : CF                  		rst	8
(1)  604/     237 : 00                  		nop
(1)  605/     238 : 00                  		nop
(1)  606/     239 : FD 46 00            		ld	b,(iy+seq_Status)	; b - Track status and settings
(1)  607/     23C : CB 78               		bit	7,b			; bit7: Track active?
(1)  608/     23E : C8                  		ret	z			; Return if not.
(1)  609/     23F : 78                  		ld	a,b
(1)  610/     240 : FE FF               		cp	-1			; Status is -1?
(1)  611/     242 : C8                  		ret	z			; then skip this
(1)  612/     243 : CF                  		rst	8
(1)  613/     244 :                     	; ----------------------------------------
(1)  614/     244 :                     	; Track volume changes
(1)  615/     244 : FD 6E 0F            		ld	l,(iy+seq_VolMaster+1)
(1)  616/     247 : FD 66 0E            		ld	h,(iy+seq_VolMaster)
(1)  617/     24A : FD 4E 18            		ld	c,(iy+seq_VolFdTarget)
(1)  618/     24D : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  619/     250 : 79                  		ld	a,c
(1)  620/     251 : BC                  		cp	h
(1)  621/     252 : 28 1E               		jr	z,.keep_vol
(1)  622/     254 : 30 06               		jr	nc,.fade_out
(1)  623/     256 : 11 80 FF            		ld	de,-80h
(1)  624/     259 : 19                  		add	hl,de
(1)  625/     25A : 18 0C               		jr	.too_much
(1)  626/     25C :                     .fade_out:
(1)  627/     25C : 19                  		add	hl,de
(1)  628/     25D : CF                  		rst	8
(1)  629/     25E : 7C                  		ld	a,h
(1)  630/     25F : B9                  		cp	c
(1)  631/     260 : 38 06               		jr	c,.too_much
(1)  632/     262 : 61                  		ld	h,c
(1)  633/     263 : 2E 00               		ld	l,0
(1)  634/     265 : FD 71 18            		ld	(iy+seq_VolFdTarget),c
(1)  635/     268 :                     .too_much:
(1)  636/     268 : FD CB 00 DE         		set	3,(iy+seq_Status)	; Volume update flag
(1)  637/     26C : FD 75 0F            		ld	(iy+seq_VolMaster+1),l
(1)  638/     26F : FD 74 0E            		ld	(iy+seq_VolMaster),h
(1)  639/     272 :                     .keep_vol:
(1)  640/     272 :                     	; ----------------------------------------
(1)  641/     272 : 3A F9 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  642/     275 : CB 40               		bit	0,b			; bit0: This seq uses Beats?
(1)  643/     277 : 28 03               		jr	z,.sfxmd
(1)  644/     279 : CB 4F               		bit	1,a			; BEAT passed?
(1)  645/     27B : C8                  		ret	z			; No BEAT.
(1)  646/     27C :                     .sfxmd:
(1)  647/     27C : CB 47               		bit	0,a			; TICK passed?
(1)  648/     27E : C8                  		ret	z			; No TICK.
(1)  649/     27F : CF                  		rst	8
(1)  650/     280 :                     	; ----------------------------------------
(1)  651/     280 :                     	; Start reading notes
(1)  652/     280 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  653/     282 : C4 0D 05            		call	nz,.first_fill
(1)  654/     285 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  655/     287 : C4 06 05            		call	nz,.effect_fill
(1)  656/     28A : FD 7E 12            		ld	a,(iy+seq_TickTmr)	; TICK ex-timer for this seq
(1)  657/     28D : 3D                  		dec	a
(1)  658/     28E : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  659/     291 : B7                  		or	a			; Check a
(1)  660/     292 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  661/     293 : CF                  		rst	8
(1)  662/     294 : FD 7E 03            		ld	a,(iy+seq_TickSet)	; Set new tick timer
(1)  663/     297 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  664/     29A :                     	; ----------------------------------------
(1)  665/     29A : FD 4E 0C            		ld	c,(iy+seq_Rows)		; bc - Set row counter
(1)  666/     29D : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  667/     2A0 : 79                  		ld	a,c			; Check rowcount
(1)  668/     2A1 : B0                  		or	b
(1)  669/     2A2 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  670/     2A4 :                     	; ----------------------------------------
(1)  671/     2A4 :                     	; Read next block
(1)  672/     2A4 : CF                  		rst	8
(1)  673/     2A5 : FD 7E 13            		ld	a,(iy+seq_currBlk)	; Next block
(1)  674/     2A8 : 3C                  		inc	a
(1)  675/     2A9 : FD 77 13            		ld 	(iy+seq_currBlk),a
(1)  676/     2AC : CD 29 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  677/     2AF : FE FF               		cp	-1			; Track finished?
(1)  678/     2B1 : C8                  		ret	z
(1)  679/     2B2 : FD 4E 0C            		ld	c,(iy+seq_Rows)		; Set new rowcount to bc
(1)  680/     2B5 : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  681/     2B8 :                     	; ----------------------------------------
(1)  682/     2B8 :                     	; bc - Row count
(1)  683/     2B8 :                     .row_active:
(1)  684/     2B8 : CF                  		rst	8
(1)  685/     2B9 : FD 6E 0A            		ld	l,(iy+seq_Read)		; hl - CURRENT pattern to read
(1)  686/     2BC : FD 66 0B            		ld	h,(iy+((seq_Read+1)))
(1)  687/     2BF :                     
(1)  688/     2BF :                     ; --------------------------------
(1)  689/     2BF :                     ; Main read-loop
(1)  690/     2BF :                     ; --------------------------------
(1)  691/     2BF :                     
(1)  692/     2BF :                     .next_note:
(1)  693/     2BF : FD 7E 11            		ld	a,(iy+seq_rowPause)	; Check row timer
(1)  694/     2C2 : B7                  		or	a
(1)  695/     2C3 : 20 16               		jr	nz,.dec_row
(1)  696/     2C5 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  697/     2C6 : B7                  		or	a
(1)  698/     2C7 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  699/     2C9 : FA E6 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  700/     2CC : FD 77 11            		ld	(iy+seq_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  701/     2CF :                     
(1)  702/     2CF :                     ; --------------------------------
(1)  703/     2CF :                     ; Exit
(1)  704/     2CF :                     ; --------------------------------
(1)  705/     2CF :                     
(1)  706/     2CF :                     .exit:
(1)  707/     2CF : CF                  		rst	8
(1)  708/     2D0 : CD F1 03            		call	.inc_cpatt		; * Increment patt pos
(1)  709/     2D3 : FD 75 0A            		ld	(iy+seq_Read),l		; Update READ location
(1)  710/     2D6 : FD 74 0B            		ld	(iy+((seq_Read+1))),h
(1)  711/     2D9 : 18 03               		jr	.dec_row_e
(1)  712/     2DB :                     .dec_row:
(1)  713/     2DB : FD 35 11            		dec	(iy+seq_rowPause)	; Decrement row-pause timer
(1)  714/     2DE :                     .dec_row_e:
(1)  715/     2DE : 0B                  		dec	bc			; Decrement rowcount
(1)  716/     2DF : FD 71 0C            		ld	(iy+seq_Rows),c		; Write last row to memory
(1)  717/     2E2 : FD 70 0D            		ld	(iy+(seq_Rows+1)),b
(1)  718/     2E5 : C9                  		ret	; Exit sequence
(1)  719/     2E6 :                     
(1)  720/     2E6 :                     ; --------------------------------
(1)  721/     2E6 :                     ; New note request
(1)  722/     2E6 :                     ;
(1)  723/     2E6 :                     ; a - %1tcccccc
(1)  724/     2E6 :                     ;   | t - next byte has new type
(1)  725/     2E6 :                     ;   | c - channel
(1)  726/     2E6 :                     ; --------------------------------
(1)  727/     2E6 :                     
(1)  728/     2E6 :                     .has_note:
(1)  729/     2E6 : CF                  		rst	8
(1)  730/     2E7 : C5                  		push	bc			; Save rowcount
(1)  731/     2E8 : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  732/     2E9 : CD F1 03            		call	.inc_cpatt		; * Increment patt pos
(1)  733/     2EC : E5                  		push	hl			; Save hl patt pos
(1)  734/     2ED : FD E5               		push	iy			; copy iy to hl
(1)  735/     2EF : E1                  		pop	hl
(1)  736/     2F0 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels playback list
(1)  737/     2F4 : 11 25 00            		ld	de,seq_ChnIndx		; <-- this clears d
(1)  738/     2F7 : CF                  		rst	8
(1)  739/     2F8 : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  740/     2F9 : 79                  		ld	a,c			; Get patt note index
(1)  741/     2FA : E6 1F               		and	00011111b		; Filter bits
(1)  742/     2FC : 5F                  		ld	e,a			; Save as e
(1)  743/     2FD : 19                  		add	hl,de			; Increment more by this pos
(1)  744/     2FE :                     	; hl - trkChnls+index
(1)  745/     2FE : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  746/     2FF : B7                  		or	a
(1)  747/     300 : 28 15               		jr	z,.srch_new		; If == 0, search new one
(1)  748/     302 : E6 1F               		and	00011111b		; If already taken, read that channel
(1)  749/     304 : 87                  		add	a,a
(1)  750/     305 : 87                  		add	a,a
(1)  751/     306 : 87                  		add	a,a
(1)  752/     307 : 5F                  		ld	e,a
(1)  753/     308 : DD 19               		add	ix,de
(1)  754/     30A : DD 7E 00            		ld	a,(ix)			; Check status (chnl_Flags)
(1)  755/     30D : B7                  		or	a
(1)  756/     30E : F2 13 03            		jp	p,.srch_reroll
(1)  757/     311 : 18 31               		jr	.cont_chnl
(1)  758/     313 :                     ; Make NEW channel
(1)  759/     313 :                     ; ix - channel list start
(1)  760/     313 :                     .srch_reroll:
(1)  761/     313 : DD 36 00 00         		ld	(ix),0
(1)  762/     317 :                     .srch_new:
(1)  763/     317 : CF                  		rst	8
(1)  764/     318 : 06 1F               		ld	b,MAX_TRKCHN-1		; Max channels to check - 1
(1)  765/     31A : 16 00               		ld	d,0			; Reset out index
(1)  766/     31C :                     .next_chnl:
(1)  767/     31C : DD 7E 00            		ld	a,(ix)			; Read chnl_Flags
(1)  768/     31F : B7                  		or	a			; If plus, track channel is free
(1)  769/     320 : F2 3A 03            		jp	p,.chnl_free
(1)  770/     323 : DD 23               		inc	ix			; Search next channel, increment by 8
(1)  771/     325 : DD 23               		inc	ix
(1)  772/     327 : DD 23               		inc	ix
(1)  773/     329 : CF                  		rst	8
(1)  774/     32A : DD 23               		inc	ix
(1)  775/     32C : DD 23               		inc	ix
(1)  776/     32E : DD 23               		inc	ix
(1)  777/     330 : DD 23               		inc	ix
(1)  778/     332 : DD 23               		inc	ix
(1)  779/     334 : CF                  		rst	8
(1)  780/     335 : 14                  		inc	d			; Increment out index
(1)  781/     336 : 00                  		nop
(1)  782/     337 : 00                  		nop
(1)  783/     338 : 10 E2               		djnz	.next_chnl
(1)  784/     33A :                     .chnl_free:
(1)  785/     33A : 7A                  		ld	a,d			; Read index we got
(1)  786/     33B : E6 1F               		and	00011111b		; Filter bits
(1)  787/     33D : F6 80               		or	10000000b		; and set as used
(1)  788/     33F : 77                  		ld	(hl),a			; Write index slot
(1)  789/     340 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  790/     344 :                     .cont_chnl:
(1)  791/     344 : E1                  		pop	hl			; Recover patt pos
(1)  792/     345 : CF                  		rst	8
(1)  793/     346 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  794/     349 :                     
(1)  795/     349 :                     	; ix - Current channel
(1)  796/     349 :                     	; c  - Channel and type bits (7-6)
(1)  797/     349 :                     	; b  - Flags: evinEVIN
(1)  798/     349 :                     	;      E-effect/V-volume/I-instrument/N-note
(1)  799/     349 :                     	;      evin: byte is already stored on track-channel buffer
(1)  800/     349 :                     	;      EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  801/     349 : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  802/     34B : 28 08               		jr	z,.old_type
(1)  803/     34D : 7E                  		ld	a,(hl)
(1)  804/     34E : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  805/     351 : 47                  		ld	b,a			; Set to b
(1)  806/     352 : CD F1 03            		call	.inc_cpatt		; Next patt pos
(1)  807/     355 :                     .old_type:
(1)  808/     355 : CF                  		rst	8
(1)  809/     356 : CB 40               		bit	0,b			; New NOTE?
(1)  810/     358 : 28 07               		jr	z,.no_note
(1)  811/     35A : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  812/     35B : DD 77 02            		ld	(ix+chnl_Note),a
(1)  813/     35E : CD F1 03            		call	.inc_cpatt
(1)  814/     361 :                     .no_note:
(1)  815/     361 : CB 48               		bit	1,b			; New INS?
(1)  816/     363 : 28 07               		jr	z,.no_ins
(1)  817/     365 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  818/     366 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  819/     369 : CD F1 03            		call	.inc_cpatt
(1)  820/     36C :                     .no_ins:
(1)  821/     36C : CF                  		rst	8
(1)  822/     36D : CB 50               		bit	2,b			; New VOL?
(1)  823/     36F : 28 07               		jr	z,.no_vol
(1)  824/     371 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  825/     372 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  826/     375 : CD F1 03            		call	.inc_cpatt
(1)  827/     378 :                     .no_vol:
(1)  828/     378 : CB 58               		bit	3,b			; New EFFECT?
(1)  829/     37A : 28 0F               		jr	z,.no_eff
(1)  830/     37C : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  831/     37D : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  832/     380 : CD F1 03            		call	.inc_cpatt
(1)  833/     383 : CF                  		rst	8
(1)  834/     384 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  835/     385 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  836/     388 : CD F1 03            		call	.inc_cpatt
(1)  837/     38B :                     .no_eff:
(1)  838/     38B : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  839/     38C : 0F                  		rrca
(1)  840/     38D : 0F                  		rrca
(1)  841/     38E : 0F                  		rrca
(1)  842/     38F : 0F                  		rrca
(1)  843/     390 : E6 0F               		and	00001111b		; Filter bits
(1)  844/     392 : 4F                  		ld	c,a			; Save as c
(1)  845/     393 : 78                  		ld	a,b
(1)  846/     394 : E6 0F               		and	00001111b		; Filter again
(1)  847/     396 : B1                  		or	c			; Merge c with a
(1)  848/     397 : CF                  		rst	8
(1)  849/     398 : 4F                  		ld	c,a			; Save bit flags
(1)  850/     399 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  851/     39C : B1                  		or	c
(1)  852/     39D : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  853/     3A0 : C1                  		pop	bc			; Restore rowcount
(1)  854/     3A1 :                     	; ----------------------------------------
(1)  855/     3A1 :                     	; Effects that affect internal playback
(1)  856/     3A1 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  857/     3A4 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  858/     3A6 : CA BF 02            		jp	z,.next_note
(1)  859/     3A9 : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  860/     3AC : B7                  		or	a			; 00h = invalid effect
(1)  861/     3AD : CA BF 02            		jp	z,.next_note
(1)  862/     3B0 : FE 01               		cp	1			; Effect A: Tick set
(1)  863/     3B2 : 28 0B               		jr	z,.eff_A
(1)  864/     3B4 : FE 02               		cp	2			; Effect B: Position Jump
(1)  865/     3B6 : 28 18               		jr	z,.eff_B
(1)  866/     3B8 : FE 03               		cp	3			; Effect C: Pattern break
(1)  867/     3BA : 28 32               		jr	z,.eff_C
(1)  868/     3BC : C3 BF 02            		jp	.next_note
(1)  869/     3BF :                     
(1)  870/     3BF :                     ; ----------------------------------------
(1)  871/     3BF :                     ; Effect A: Set ticks
(1)  872/     3BF :                     ; ----------------------------------------
(1)  873/     3BF :                     
(1)  874/     3BF :                     .eff_A:
(1)  875/     3BF : CF                  		rst	8
(1)  876/     3C0 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  877/     3C3 : FD 73 03            		ld	(iy+seq_TickSet),e	; set for both Set and Timer.
(1)  878/     3C6 : FD 73 12            		ld	(iy+seq_TickTmr),e
(1)  879/     3C9 : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  880/     3CD : C3 BF 02            		jp	.next_note
(1)  881/     3D0 :                     
(1)  882/     3D0 :                     ; ----------------------------------------
(1)  883/     3D0 :                     ; Effect B: jump to a new block
(1)  884/     3D0 :                     ; ----------------------------------------
(1)  885/     3D0 :                     
(1)  886/     3D0 :                     .eff_B:
(1)  887/     3D0 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  888/     3D3 : FD 73 13            		ld 	(iy+seq_currBlk),e
(1)  889/     3D6 : CF                  		rst	8
(1)  890/     3D7 : FD 36 11 00         		ld	(iy+seq_rowPause),0	; Reset rowpause
(1)  891/     3DB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  892/     3DF : FD CB 00 EE         		set	5,(iy+seq_Status)	; set fill-from-effect flag on exit
(1)  893/     3E3 : 3E 80               		ld	a,80h
(1)  894/     3E5 : FD 77 15            		ld	(iy+seq_BankHeads),a
(1)  895/     3E8 : FD 77 16            		ld	(iy+seq_BankBlk),a
(1)  896/     3EB : C3 BF 02            		jp	.next_note
(1)  897/     3EE :                     
(1)  898/     3EE :                     ; ----------------------------------------
(1)  899/     3EE :                     ; Effect C: Pattern break/exit
(1)  900/     3EE :                     ;
(1)  901/     3EE :                     ; Only used on SFX, arguments ignored.
(1)  902/     3EE :                     ; ----------------------------------------
(1)  903/     3EE :                     
(1)  904/     3EE :                     .eff_C:
(1)  905/     3EE : C3 00 05            		jp	.track_end
(1)  906/     3F1 :                     
(1)  907/     3F1 :                     ; ----------------------------------------
(1)  908/     3F1 :                     ; Increment the current patt position
(1)  909/     3F1 :                     ; and recieve more data
(1)  910/     3F1 :                     ;
(1)  911/     3F1 :                     ; Breaks:
(1)  912/     3F1 :                     ; a,e
(1)  913/     3F1 :                     ; ----------------------------------------
(1)  914/     3F1 :                     
(1)  915/     3F1 :                     .inc_cpatt:
(1)  916/     3F1 : FD 5E 08            		ld	e,(iy+seq_Cach)		; Read curret cache LSB
(1)  917/     3F4 : 7D                  		ld	a,l
(1)  918/     3F5 : 3C                  		inc	a
(1)  919/     3F6 : E6 1F               		and	MAX_RCACH-1
(1)  920/     3F8 : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  921/     3FA : 30 03               		jr	nc,.ran_out
(1)  922/     3FC : B3                  		or	e
(1)  923/     3FD : 6F                  		ld	l,a
(1)  924/     3FE : C9                  		ret
(1)  925/     3FF :                     .ran_out:
(1)  926/     3FF : FD 6E 08            		ld	l,(iy+seq_Cach)
(1)  927/     402 : E5                  		push	hl
(1)  928/     403 : C5                  		push	bc
(1)  929/     404 : 06 00               		ld	b,0
(1)  930/     406 : 4F                  		ld	c,a
(1)  931/     407 : CF                  		rst	8
(1)  932/     408 : 5D                  		ld	e,l
(1)  933/     409 : 54                  		ld	d,h
(1)  934/     40A : FD 6E 19            		ld	l,(iy+seq_RomPattRead)
(1)  935/     40D : FD 66 1A            		ld	h,(iy+(seq_RomPattRead+1))
(1)  936/     410 : FD 7E 1B            		ld	a,(iy+(seq_RomPattRead+2))
(1)  937/     413 : 09                  		add	hl,bc
(1)  938/     414 : CE 00               		adc	a,0
(1)  939/     416 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1)  940/     419 : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1)  941/     41C : CF                  		rst	8
(1)  942/     41D : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1)  943/     420 : 01 20 00            		ld	bc,MAX_RCACH
(1)  944/     423 : CD A9 0F            		call	readRom		; *** ROM ACCESS ***
(1)  945/     426 : C1                  		pop	bc
(1)  946/     427 : E1                  		pop	hl
(1)  947/     428 : C9                  		ret
(1)  948/     429 :                     
(1)  949/     429 :                     ; ----------------------------------------
(1)  950/     429 :                     ; Set track pattern by seq_currBlk
(1)  951/     429 :                     ; ----------------------------------------
(1)  952/     429 :                     
(1)  953/     429 :                     .set_track:
(1)  954/     429 :                     	; ----------------------------------------
(1)  955/     429 :                     	; Make block id list
(1)  956/     429 : FD 5E 04            		ld	e,(iy+seq_Blocks)
(1)  957/     42C : FD 56 05            		ld	d,(iy+(seq_Blocks+1))
(1)  958/     42F : FD 7E 13            		ld	a,(iy+seq_currBlk)
(1)  959/     432 : 4F                  		ld	c,a
(1)  960/     433 : C5                  		push	bc
(1)  961/     434 : D5                  		push	de
(1)  962/     435 : CF                  		rst	8
(1)  963/     436 : 0F                  		rrca
(1)  964/     437 : 0F                  		rrca
(1)  965/     438 : 0F                  		rrca
(1)  966/     439 : E6 1F               		and	00011111b
(1)  967/     43B : FD 4E 16            		ld	c,(iy+seq_BankBlk)	; c - current block bank
(1)  968/     43E : CB 79               		bit	7,c			; First time?
(1)  969/     440 : 20 03               		jr	nz,.first_blk
(1)  970/     442 : B9                  		cp	c			; SAME instrument data?
(1)  971/     443 : 28 1C               		jr	z,.keep_blk
(1)  972/     445 :                     .first_blk:
(1)  973/     445 : CF                  		rst	8
(1)  974/     446 : FD 77 16            		ld	(iy+seq_BankBlk),a	; Save inst number
(1)  975/     449 : 07                  		rlca
(1)  976/     44A : 07                  		rlca
(1)  977/     44B : 07                  		rlca
(1)  978/     44C : 06 00               		ld	b,0
(1)  979/     44E : 4F                  		ld	c,a
(1)  980/     44F : FD 6E 22            		ld	l,(iy+seq_RomBlks)
(1)  981/     452 : FD 66 23            		ld	h,(iy+(seq_RomBlks+1))
(1)  982/     455 : FD 7E 24            		ld	a,(iy+(seq_RomBlks+2))
(1)  983/     458 : 09                  		add	hl,bc
(1)  984/     459 : CE 00               		adc	a,0
(1)  985/     45B : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  986/     45E : CD A9 0F            		call	readRom			; ** ROM ACCESS **
(1)  987/     461 :                     .keep_blk:
(1)  988/     461 : E1                  		pop	hl
(1)  989/     462 : C1                  		pop	bc
(1)  990/     463 : 79                  		ld	a,c
(1)  991/     464 : E6 07               		and	00000111b
(1)  992/     466 : CF                  		rst	8
(1)  993/     467 : 16 00               		ld	d,0
(1)  994/     469 : 5F                  		ld	e,a
(1)  995/     46A : 19                  		add	hl,de
(1)  996/     46B :                     	; ----------------------------------------
(1)  997/     46B : 7E                  		ld	a,(hl)			; Read block byte
(1)  998/     46C : FE FF               		cp	-1			; If block == -1, end track
(1)  999/     46E : CA 00 05            		jp	z,.track_end
(1) 1000/     471 : CF                  		rst	8
(1) 1001/     472 :                     	; ----------------------------------------
(1) 1002/     472 : FD 5E 06            		ld	e,(iy+seq_Patt)		; Read CACHE patt heads
(1) 1003/     475 : FD 56 07            		ld	d,(iy+(seq_Patt+1))
(1) 1004/     478 : 4F                  		ld	c,a
(1) 1005/     479 : D5                  		push	de
(1) 1006/     47A : C5                  		push	bc
(1) 1007/     47B : CF                  		rst	8
(1) 1008/     47C : 0F                  		rrca
(1) 1009/     47D : 0F                  		rrca
(1) 1010/     47E : 0F                  		rrca
(1) 1011/     47F : E6 1F               		and	00011111b
(1) 1012/     481 : FD 4E 15            		ld	c,(iy+seq_BankHeads)	; c - current intrument loaded
(1) 1013/     484 : CB 79               		bit	7,c			; First time?
(1) 1014/     486 : 20 03               		jr	nz,.first_head
(1) 1015/     488 : B9                  		cp	c			; SAME instrument data?
(1) 1016/     489 : 28 26               		jr	z,.keep_it
(1) 1017/     48B :                     .first_head:
(1) 1018/     48B : CF                  		rst	8
(1) 1019/     48C : FD 77 15            		ld	(iy+seq_BankHeads),a	; Save inst number
(1) 1020/     48F : 47                  		ld	b,a
(1) 1021/     490 : 0F                  		rrca
(1) 1022/     491 : 0F                  		rrca
(1) 1023/     492 : 0F                  		rrca
(1) 1024/     493 : E6 E0               		and	11100000b
(1) 1025/     495 : 4F                  		ld	c,a
(1) 1026/     496 : 78                  		ld	a,b
(1) 1027/     497 : 0F                  		rrca
(1) 1028/     498 : 0F                  		rrca
(1) 1029/     499 : 0F                  		rrca
(1) 1030/     49A : E6 03               		and	00000011b
(1) 1031/     49C : 47                  		ld	b,a
(1) 1032/     49D :                     	; ----------------------------------------
(1) 1033/     49D : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1034/     4A0 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1035/     4A3 : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1036/     4A6 : E7                  		rst	20h
(1) 1037/     4A7 : CF                  		rst	8
(1) 1038/     4A8 : 09                  		add	hl,bc
(1) 1039/     4A9 : CE 00               		adc	a,0
(1) 1040/     4AB : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1041/     4AE : CD A9 0F            		call	readRom			; ** ROM ACCESS **
(1) 1042/     4B1 :                     .keep_it:
(1) 1043/     4B1 : C1                  		pop	bc
(1) 1044/     4B2 : 79                  		ld	a,c
(1) 1045/     4B3 : E6 07               		and	00000111b
(1) 1046/     4B5 : 87                  		add	a,a
(1) 1047/     4B6 : 87                  		add	a,a
(1) 1048/     4B7 : 57                  		ld	d,a
(1) 1049/     4B8 : CF                  		rst	8
(1) 1050/     4B9 : E6 FC               		and	11111100b
(1) 1051/     4BB : 5F                  		ld	e,a
(1) 1052/     4BC : 7A                  		ld	a,d
(1) 1053/     4BD : E6 03               		and	00000011b
(1) 1054/     4BF : 57                  		ld	d,a
(1) 1055/     4C0 : E1                  		pop	hl
(1) 1056/     4C1 : 19                  		add	hl,de
(1) 1057/     4C2 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1058/     4C3 : 23                  		inc	hl
(1) 1059/     4C4 : CF                  		rst	8
(1) 1060/     4C5 : 56                  		ld	d,(hl)
(1) 1061/     4C6 : 23                  		inc	hl
(1) 1062/     4C7 : 7E                  		ld	a,(hl)
(1) 1063/     4C8 : 23                  		inc	hl
(1) 1064/     4C9 : FD 77 0C            		ld	(iy+seq_Rows),a
(1) 1065/     4CC : 7E                  		ld	a,(hl)
(1) 1066/     4CD : 23                  		inc	hl
(1) 1067/     4CE : FD 77 0D            		ld	(iy+(seq_Rows+1)),a
(1) 1068/     4D1 : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1069/     4D4 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1070/     4D7 : CF                  		rst	8
(1) 1071/     4D8 : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1072/     4DB : 19                  		add	hl,de
(1) 1073/     4DC : CE 00               		adc	a,0
(1) 1074/     4DE : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1) 1075/     4E1 : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1) 1076/     4E4 : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1) 1077/     4E7 : FD 5E 08            		ld	e,(iy+seq_Cach)
(1) 1078/     4EA : FD 56 09            		ld	d,(iy+(seq_Cach+1))
(1) 1079/     4ED : FD 73 0A            		ld	(iy+seq_Read),e
(1) 1080/     4F0 : FD 72 0B            		ld	(iy+(seq_Read+1)),d
(1) 1081/     4F3 : 0E 20               		ld	c,MAX_RCACH
(1) 1082/     4F5 : FD 36 10 00         		ld	(iy+seq_cachHalf),0
(1) 1083/     4F9 : FD 36 11 00         		ld	(iy+seq_rowPause),0
(1) 1084/     4FD : C3 A9 0F            		jp	readRom			; ** ROM access **
(1) 1085/     500 :                     
(1) 1086/     500 :                     ; ----------------------------------------
(1) 1087/     500 :                     ; **JUMP ONLY**
(1) 1088/     500 :                     .track_end:
(1) 1089/     500 : CF                  		rst	8
(1) 1090/     501 : FD 36 00 FF         		ld	(iy+seq_Status),-1	; Disable track slot
(1) 1091/     505 : C9                  		ret
(1) 1092/     506 :                     
(1) 1093/     506 :                     ; ----------------------------------------
(1) 1094/     506 :                     ; Track refill
(1) 1095/     506 :                     ; ----------------------------------------
(1) 1096/     506 :                     
(1) 1097/     506 :                     .effect_fill:
(1) 1098/     506 : FD CB 00 AE         		res	5,(iy+seq_Status)	; Reset refill-from-effect flag
(1) 1099/     50A : C3 29 04            		jp	.set_track
(1) 1100/     50D :                     
(1) 1101/     50D :                     ; ----------------------------------------
(1) 1102/     50D :                     ; Track Start/Reset
(1) 1103/     50D :                     ;
(1) 1104/     50D :                     ; iy - Track buffer
(1) 1105/     50D :                     ; ----------------------------------------
(1) 1106/     50D :                     
(1) 1107/     50D :                     .first_fill:
(1) 1108/     50D : FD CB 00 B6         		res	6,(iy+seq_Status)	; Clear FILL flag
(1) 1109/     511 : CD AE 05            		call	track_out
(1) 1110/     514 : FD 36 12 01         		ld	(iy+seq_TickTmr),1	; Reset tick timer
(1) 1111/     518 : FD 7E 02            		ld	a,(iy+seq_SetBlk)	; Make start block as current block
(1) 1112/     51B : CF                  		rst	8
(1) 1113/     51C : FD 77 13            		ld 	(iy+seq_currBlk),a	; block
(1) 1114/     51F : FD 7E 01            		ld	a,(iy+seq_Num)
(1) 1115/     522 : FE FF               		cp	-1			; Sequence -1?
(1) 1116/     524 : C8                  		ret	z
(1) 1117/     525 : 87                  		add	a,a
(1) 1118/     526 : 87                  		add	a,a
(1) 1119/     527 : 16 00               		ld	d,0
(1) 1120/     529 : 5F                  		ld	e,a
(1) 1121/     52A : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1122/     52D : 23                  		inc	hl
(1) 1123/     52E : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1124/     52F : 23                  		inc	hl
(1) 1125/     530 : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1126/     531 : 23                  		inc	hl
(1) 1127/     532 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1128/     533 : CF                  		rst	8
(1) 1129/     534 : 61                  		ld	h,c
(1) 1130/     535 : 19                  		add	hl,de
(1) 1131/     536 : CE 00               		adc	a,0
(1) 1132/     538 : 11 57 16            		ld	de,trkInfoCach
(1) 1133/     53B : D5                  		push	de
(1) 1134/     53C : 01 04 00            		ld	bc,4
(1) 1135/     53F : CD A9 0F            		call	readRom			; *** ROM ACCESS ***
(1) 1136/     542 : E1                  		pop	hl
(1) 1137/     543 : 7E                  		ld	a,(hl)
(1) 1138/     544 : 23                  		inc	hl
(1) 1139/     545 : CB 7F               		bit	7,a
(1) 1140/     547 : 28 04               		jr	z,.no_glbl
(1) 1141/     549 : FD CB 00 C6         		set	0,(iy+seq_Status)	; Enable GLOBAL sub-beats
(1) 1142/     54D :                     .no_glbl:
(1) 1143/     54D : CF                  		rst	8
(1) 1144/     54E : E6 7F               		and	01111111b
(1) 1145/     550 : FD 77 03            		ld	(iy+seq_TickSet),a
(1) 1146/     553 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1147/     554 : 23                  		inc	hl			; grab it's pointers
(1) 1148/     555 : 4E                  		ld	c,(hl)
(1) 1149/     556 : 23                  		inc	hl
(1) 1150/     557 : 6E                  		ld	l,(hl)
(1) 1151/     558 : 61                  		ld	h,c
(1) 1152/     559 : 11 B0 17            		ld	de,headerOut
(1) 1153/     55C : 0E 0E               		ld	c,0Eh
(1) 1154/     55E : CD A9 0F            		call	readRom		; ** ROM access **
(1) 1155/     561 :                     
(1) 1156/     561 :                     	; headerOut:
(1) 1157/     561 :                     	; dc.w numof_chnls
(1) 1158/     561 :                     	; dc.l .blk,.pat,.ins
(1) 1159/     561 :                     	; *** READING BACKWARDS
(1) 1160/     561 : DD 21 BD 17         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1161/     565 : CD 9B 05            		call	.grab_rhead		; Instrument data
(1) 1162/     568 : FD 75 1F            		ld	(iy+seq_RomInst),l
(1) 1163/     56B : FD 74 20            		ld	(iy+(seq_RomInst+1)),h
(1) 1164/     56E : FD 70 21            		ld	(iy+(seq_RomInst+2)),b
(1) 1165/     571 : CD 9B 05            		call	.grab_rhead		; Pattern heads
(1) 1166/     574 : FD 75 1C            		ld	(iy+seq_RomPatt),l	; Save ROM patt base
(1) 1167/     577 : FD 74 1D            		ld	(iy+(seq_RomPatt+1)),h
(1) 1168/     57A : FD 70 1E            		ld	(iy+(seq_RomPatt+2)),b
(1) 1169/     57D : FD 36 15 80         		ld	(iy+seq_BankHeads),80h	; Reset pattern banking
(1) 1170/     581 : CD 9B 05            		call	.grab_rhead		; Block data
(1) 1171/     584 : FD 75 22            		ld	(iy+seq_RomBlks),l	; Save ROM patt base
(1) 1172/     587 : FD 74 23            		ld	(iy+(seq_RomBlks+1)),h
(1) 1173/     58A : FD 70 24            		ld	(iy+(seq_RomBlks+2)),b
(1) 1174/     58D : FD 36 16 80         		ld	(iy+seq_BankBlk),80h	; Reset pattern banking
(1) 1175/     591 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1176/     594 : FD 77 17            		ld	(iy+seq_MaxChnl),a
(1) 1177/     597 : CF                  		rst	8
(1) 1178/     598 : C3 29 04            		jp	.set_track
(1) 1179/     59B :                     
(1) 1180/     59B :                     ; Read 68K pointer:
(1) 1181/     59B :                     ; hl - 00xxxx
(1) 1182/     59B :                     ;  b - xx0000
(1) 1183/     59B :                     .grab_rhead:
(1) 1184/     59B : DD 6E 00            		ld	l,(ix)
(1) 1185/     59E : DD 2B               		dec	ix
(1) 1186/     5A0 : DD 66 00            		ld	h,(ix)
(1) 1187/     5A3 : CF                  		rst	8
(1) 1188/     5A4 : DD 2B               		dec	ix
(1) 1189/     5A6 : DD 46 00            		ld	b,(ix)
(1) 1190/     5A9 : DD 2B               		dec	ix
(1) 1191/     5AB :                     ; 		ld	c,(ix)
(1) 1192/     5AB : DD 2B               		dec	ix
(1) 1193/     5AD : C9                  		ret
(1) 1194/     5AE :                     
(1) 1195/     5AE :                     ; ----------------------------------------
(1) 1196/     5AE :                     ; Reset tracker channels
(1) 1197/     5AE :                     ;
(1) 1198/     5AE :                     ; iy - Track buffer
(1) 1199/     5AE :                     ;
(1) 1200/     5AE :                     ; Breaks:
(1) 1201/     5AE :                     ; b ,de,hl,ix
(1) 1202/     5AE :                     ; ----------------------------------------
(1) 1203/     5AE :                     
(1) 1204/     5AE :                     track_out:
(1) 1205/     5AE : FD E5               		push	iy
(1) 1206/     5B0 : E1                  		pop	hl
(1) 1207/     5B1 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1208/     5B5 : CF                  		rst	8
(1) 1209/     5B6 : 11 25 00            		ld	de,seq_ChnIndx
(1) 1210/     5B9 : 19                  		add	hl,de
(1) 1211/     5BA : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1212/     5BD : B7                  		or	a
(1) 1213/     5BE : 20 02               		jr	nz,.valid
(1) 1214/     5C0 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1215/     5C2 :                     .valid:
(1) 1216/     5C2 : 47                  		ld	b,a
(1) 1217/     5C3 :                     .indx_del:
(1) 1218/     5C3 : 7E                  		ld	a,(hl)
(1) 1219/     5C4 : B7                  		or	a
(1) 1220/     5C5 : 28 29               		jr	z,.nothin
(1) 1221/     5C7 : CF                  		rst	8
(1) 1222/     5C8 : DD E5               		push	ix
(1) 1223/     5CA : E6 1F               		and	00011111b
(1) 1224/     5CC : 87                  		add	a,a
(1) 1225/     5CD : 87                  		add	a,a
(1) 1226/     5CE : 87                  		add	a,a
(1) 1227/     5CF : 5F                  		ld	e,a
(1) 1228/     5D0 : CF                  		rst	8
(1) 1229/     5D1 : DD 19               		add	ix,de
(1) 1230/     5D3 : AF                  		xor	a
(1) 1231/     5D4 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1232/     5D8 : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1233/     5DC : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1234/     5DF : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1235/     5E2 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1236/     5E5 : CF                  		rst	8
(1) 1237/     5E6 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1238/     5E9 : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1239/     5EC : DD E1               		pop	ix
(1) 1240/     5EE : 77                  		ld	(hl),a
(1) 1241/     5EF : 00                  		nop
(1) 1242/     5F0 :                     .nothin:
(1) 1243/     5F0 : 23                  		inc	hl
(1) 1244/     5F1 : 10 D0               		djnz	.indx_del
(1) 1245/     5F3 : 3E 01               		ld	a,1
(1) 1246/     5F5 : 32 A2 17            		ld	(marsUpd),a
(1) 1247/     5F8 : 32 A3 17            		ld	(mcdUpd),a
(1) 1248/     5FB : C9                  		ret
(1) 1249/     5FC :                     
(1) 1250/     5FC :                     ; ============================================================
(1) 1251/     5FC :                     ; --------------------------------------------------------
(1) 1252/     5FC :                     ; Process track channels to the sound chips
(1) 1253/     5FC :                     ; --------------------------------------------------------
(1) 1254/     5FC :                     
(1) 1255/     5FC :                     set_chips:
(1) 1256/     5FC : CD 88 0F            		call	get_tick
(1) 1257/     5FF : FD 21 DF 16         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1) 1258/     603 : CD 3D 06            		call	tblbuff_read
(1) 1259/     606 : E7                  		rst	20h
(1) 1260/     607 : FD 21 1E 17         		ld	iy,trkBuff_1
(1) 1261/     60B : CD 3D 06            		call	tblbuff_read
(1) 1262/     60E : CF                  		rst	8
(1) 1263/     60F : FD 21 5D 17         		ld	iy,trkBuff_2
(1) 1264/     613 : CD 3D 06            		call	tblbuff_read
(1) 1265/     616 : CD 88 0F            		call	get_tick
(1) 1266/     619 : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1267/     61D : CD 00 08            		call	dtbl_singl
(1) 1268/     620 : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1269/     624 : CD EC 07            		call	dtbl_multi
(1) 1270/     627 : E7                  		rst	20h
(1) 1271/     628 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1272/     62C : CD EC 07            		call	dtbl_multi
(1) 1273/     62F : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1274/     633 : CD EC 07            		call	dtbl_multi
(1) 1275/     636 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1276/     63A : C3 EC 07            		jp	dtbl_multi
(1) 1277/     63D :                     
(1) 1278/     63D :                     ; ----------------------------------------
(1) 1279/     63D :                     ; Read current track
(1) 1280/     63D :                     ;
(1) 1281/     63D :                     ; iy - Buffer
(1) 1282/     63D :                     tblbuff_read:
(1) 1283/     63D : CF                  		rst	8
(1) 1284/     63E : FD 46 00            		ld	b,(iy+seq_Status)	; bit7: Track active?
(1) 1285/     641 : CB 78               		bit	7,b
(1) 1286/     643 : C8                  		ret	z
(1) 1287/     644 : 78                  		ld	a,b			; seq_Status == -1?
(1) 1288/     645 : FE FF               		cp	-1
(1) 1289/     647 : C2 55 06            		jp	nz,.track_cont
(1) 1290/     64A : CD AE 05            		call	track_out
(1) 1291/     64D : FD 36 00 00         		ld	(iy+seq_Status),0
(1) 1292/     651 : FD 36 01 FF         		ld	(iy+seq_Num),-1
(1) 1293/     655 :                     .track_cont:
(1) 1294/     655 : FD E5               		push	iy
(1) 1295/     657 : E1                  		pop	hl
(1) 1296/     658 : CF                  		rst	8
(1) 1297/     659 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1298/     65D : 11 25 00            		ld	de,seq_ChnIndx
(1) 1299/     660 : 19                  		add	hl,de
(1) 1300/     661 : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1301/     664 : B7                  		or	a
(1) 1302/     665 : 20 02               		jr	nz,.valid
(1) 1303/     667 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1304/     669 :                     .valid:
(1) 1305/     669 : CF                  		rst	8
(1) 1306/     66A : 47                  		ld	b,a
(1) 1307/     66B :                     .next_indx:
(1) 1308/     66B : 7E                  		ld	a,(hl)			; Read index
(1) 1309/     66C : B7                  		or	a
(1) 1310/     66D : 20 03               		jr	nz,.has_indx		; If non-zero: valid
(1) 1311/     66F : E7                  		rst	20h
(1) 1312/     670 : 18 1C               		jr	.no_indx
(1) 1313/     672 :                     .has_indx:
(1) 1314/     672 : E6 1F               		and	00011111b
(1) 1315/     674 : 87                  		add	a,a
(1) 1316/     675 : 87                  		add	a,a
(1) 1317/     676 : 87                  		add	a,a
(1) 1318/     677 : CF                  		rst	8
(1) 1319/     678 : 16 00               		ld	d,0
(1) 1320/     67A : 5F                  		ld	e,a
(1) 1321/     67B : C5                  		push	bc			; Save bc, hl and ix
(1) 1322/     67C : E5                  		push	hl
(1) 1323/     67D : DD E5               		push	ix
(1) 1324/     67F : DD 19               		add	ix,de
(1) 1325/     681 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1326/     684 : E6 0F               		and	00001111b
(1) 1327/     686 : C4 96 06            		call	nz,.do_chip		; Call if non-zero
(1) 1328/     689 : CF                  		rst	8
(1) 1329/     68A : DD E1               		pop	ix
(1) 1330/     68C : E1                  		pop	hl
(1) 1331/     68D : C1                  		pop	bc
(1) 1332/     68E :                     .no_indx:
(1) 1333/     68E : 23                  		inc	hl
(1) 1334/     68F : 10 DA               		djnz	.next_indx
(1) 1335/     691 : FD CB 00 9E         		res	3,(iy+seq_Status)	; RESET Volume update bit
(1) 1336/     695 : C9                  		ret
(1) 1337/     696 :                     
(1) 1338/     696 :                     ; ----------------------------------------
(1) 1339/     696 :                     ; iy - Track buffer
(1) 1340/     696 :                     ; ix - Current channel
(1) 1341/     696 :                     
(1) 1342/     696 :                     .do_chip:
(1) 1343/     696 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1344/     699 : B7                  		or	a
(1) 1345/     69A : C8                  		ret	z			; If 0 == stop
(1) 1346/     69B : 3D                  		dec	a			; inst-1
(1) 1347/     69C : E6 7F               		and	01111111b
(1) 1348/     69E : 21 C6 17            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1349/     6A1 : E5                  		push	hl
(1) 1350/     6A2 : CF                  		rst	8
(1) 1351/     6A3 : 07                  		rlca
(1) 1352/     6A4 : 07                  		rlca
(1) 1353/     6A5 : 07                  		rlca
(1) 1354/     6A6 : 47                  		ld	b,a
(1) 1355/     6A7 : E6 F8               		and	11111000b
(1) 1356/     6A9 : 4F                  		ld	c,a
(1) 1357/     6AA : 78                  		ld	a,b
(1) 1358/     6AB : AF                  		xor	a
(1) 1359/     6AC : E6 03               		and	00000011b
(1) 1360/     6AE : CF                  		rst	8
(1) 1361/     6AF : 47                  		ld	b,a
(1) 1362/     6B0 : EB                  		ex	hl,de
(1) 1363/     6B1 : FD 6E 1F            		ld	l,(iy+seq_RomInst)
(1) 1364/     6B4 : FD 66 20            		ld	h,(iy+(seq_RomInst+1))
(1) 1365/     6B7 : FD 7E 21            		ld	a,(iy+(seq_RomInst+2))
(1) 1366/     6BA : 09                  		add	hl,bc
(1) 1367/     6BB : CE 00               		adc	a,0
(1) 1368/     6BD : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1369/     6C0 : CD A9 0F            		call	readRom			; ** ROM access **
(1) 1370/     6C3 : E1                  		pop	hl
(1) 1371/     6C4 : E5                  		push	hl			; <-- save hl
(1) 1372/     6C5 : CD E0 06            		call	.grab_link
(1) 1373/     6C8 : D1                  		pop	de			; --> recover as de
(1) 1374/     6C9 :                     	; hl - current table
(1) 1375/     6C9 :                     	; de - instrument data
(1) 1376/     6C9 : FE FF               		cp	-1			; Found any link?
(1) 1377/     6CB : C8                  		ret	z
(1) 1378/     6CC : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1379/     6CD : 23                  		inc	hl
(1) 1380/     6CE : 23                  		inc	hl
(1) 1381/     6CF : 23                  		inc	hl
(1) 1382/     6D0 : CF                  		rst	8
(1) 1383/     6D1 : FD 7E 0E            		ld	a,(iy+seq_VolMaster)
(1) 1384/     6D4 : 77                  		ld	(hl),a
(1) 1385/     6D5 : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1386/     6D8 : 09                  		add	hl,bc
(1) 1387/     6D9 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1388/     6DA : 01 08 00            		ld	bc,8
(1) 1389/     6DD : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1390/     6DF : C9                  		ret
(1) 1391/     6E0 :                     
(1) 1392/     6E0 :                     ; ----------------------------------------
(1) 1393/     6E0 :                     ; Search for a linked channel on the
(1) 1394/     6E0 :                     ; chip table
(1) 1395/     6E0 :                     ;
(1) 1396/     6E0 :                     ; Input:
(1) 1397/     6E0 :                     ; iy - Track buffer
(1) 1398/     6E0 :                     ; ix - Current channel
(1) 1399/     6E0 :                     ; hl - Intrument data
(1) 1400/     6E0 :                     ;
(1) 1401/     6E0 :                     ; Returns:
(1) 1402/     6E0 :                     ; hl | Channel table to use
(1) 1403/     6E0 :                     ;  a | Return value:
(1) 1404/     6E0 :                     ;       0 | Found
(1) 1405/     6E0 :                     ;      -1 | Not found
(1) 1406/     6E0 :                     ; ----------------------------------------
(1) 1407/     6E0 :                     
(1) 1408/     6E0 :                     .grab_link:
(1) 1409/     6E0 : 7E                  		ld	a,(hl)
(1) 1410/     6E1 : E6 F0               		and	11110000b
(1) 1411/     6E3 : 5F                  		ld	e,a			; e - NEW chip
(1) 1412/     6E4 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1413/     6E7 : E6 F0               		and	11110000b
(1) 1414/     6E9 : 28 72               		jr	z,.new_chip		; If current is blank, it's a NEW chip
(1) 1415/     6EB : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1416/     6EC : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1417/     6EE : CF                  		rst	8
(1) 1418/     6EF : 57                  		ld	d,a			; d - Chip to silence
(1) 1419/     6F0 : D5                  		push	de
(1) 1420/     6F1 : CD 0B 07            		call	.srch_link		; Search OLD link
(1) 1421/     6F4 : D1                  		pop	de
(1) 1422/     6F5 : FE FF               		cp	-1
(1) 1423/     6F7 : 28 03               		jr	z,.dont_res
(1) 1424/     6F9 : CD 06 0F            		call	tblz_clear
(1) 1425/     6FC :                     .dont_res:
(1) 1426/     6FC : CF                  		rst	8
(1) 1427/     6FD : 18 5E               		jr	.new_chip
(1) 1428/     6FF :                     .same_link:
(1) 1429/     6FF : CD 0B 07            		call	.srch_link		; Search link
(1) 1430/     702 : FE FF               		cp	-1
(1) 1431/     704 : C0                  		ret	nz
(1) 1432/     705 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1433/     708 : CF                  		rst	8
(1) 1434/     709 : 18 52               		jr	.new_chip
(1) 1435/     70B :                     
(1) 1436/     70B :                     ; ----------------------------------------
(1) 1437/     70B :                     ; Search same link
(1) 1438/     70B :                     ;
(1) 1439/     70B :                     ; a - Chip to search for
(1) 1440/     70B :                     ; e - NEW chip
(1) 1441/     70B :                     ; ----------------------------------------
(1) 1442/     70B :                     
(1) 1443/     70B :                     .srch_link:
(1) 1444/     70B : CD D0 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1445/     70E : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1446/     710 : C1                  		pop	bc
(1) 1447/     711 : B7                  		or	a			; Single table?
(1) 1448/     712 : FA 29 07            		jp	m,.singl_link
(1) 1449/     715 :                     .srch_lloop:
(1) 1450/     715 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1451/     716 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1452/     718 : 28 3F               		jr	z,.not_samel
(1) 1453/     71A : B9                  		cp	c			; Same link LSB?
(1) 1454/     71B : 20 07               		jr	nz,.invldl
(1) 1455/     71D : 23                  		inc	hl
(1) 1456/     71E : CF                  		rst	8
(1) 1457/     71F : 7E                  		ld	a,(hl)
(1) 1458/     720 : 2B                  		dec	hl
(1) 1459/     721 : B8                  		cp	b			; Same link MSB?
(1) 1460/     722 : 28 13               		jr	z,.got_link
(1) 1461/     724 :                     .invldl:
(1) 1462/     724 : CD C9 07            		call	.nextsrch_tbl
(1) 1463/     727 : 18 EC               		jr	.srch_lloop
(1) 1464/     729 :                     
(1) 1465/     729 :                     ; --------------------------------
(1) 1466/     729 :                     ; PSGN/FM3/FM6
(1) 1467/     729 :                     ; --------------------------------
(1) 1468/     729 :                     
(1) 1469/     729 :                     .singl_link:
(1) 1470/     729 : 23                  		inc	hl			; Read MSB first
(1) 1471/     72A : 7E                  		ld	a,(hl)
(1) 1472/     72B : 2B                  		dec	hl
(1) 1473/     72C : CF                  		rst	8
(1) 1474/     72D : B8                  		cp	b			; MSB match?
(1) 1475/     72E : 20 29               		jr	nz,.not_samel
(1) 1476/     730 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1477/     731 : B9                  		cp	c
(1) 1478/     732 : 20 25               		jr	nz,.not_samel
(1) 1479/     734 : C3 5B 07            		jp	.rnot_psg
(1) 1480/     737 :                     
(1) 1481/     737 :                     ; ----------------------------------------
(1) 1482/     737 :                     ; Got the link, do special checks
(1) 1483/     737 :                     ; ----------------------------------------
(1) 1484/     737 :                     
(1) 1485/     737 :                     .got_link:
(1) 1486/     737 : E5                  		push	hl
(1) 1487/     738 : 23                  		inc	hl
(1) 1488/     739 : 23                  		inc	hl
(1) 1489/     73A : 23                  		inc	hl		; <-- ztbl_Chip
(1) 1490/     73B : CF                  		rst	8
(1) 1491/     73C : 4E                  		ld	c,(hl)		; c - ID
(1) 1492/     73D : E1                  		pop	hl
(1) 1493/     73E :                     	; PSG3/PSGN check
(1) 1494/     73E : 7B                  		ld	a,e
(1) 1495/     73F : FE 80               		cp	80h		; PSG?
(1) 1496/     741 : 20 18               		jr	nz,.rnot_psg
(1) 1497/     743 : 3A 2F 00            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1498/     746 : E6 03               		and	011b
(1) 1499/     748 : FE 03               		cp	011b
(1) 1500/     74A : 20 0F               		jr	nz,.rnot_psg
(1) 1501/     74C : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1502/     74D : FE 02               		cp	2
(1) 1503/     74F : 20 0A               		jr	nz,.rnot_psg
(1) 1504/     751 : CF                  		rst	8
(1) 1505/     752 : D5                  		push	de
(1) 1506/     753 : 16 80               		ld	d,80h		; Force silence
(1) 1507/     755 : CD 06 0F            		call	tblz_clear
(1) 1508/     758 : D1                  		pop	de
(1) 1509/     759 :                     .not_samel:
(1) 1510/     759 : 18 52               		jr	.set_asfull
(1) 1511/     75B :                     .rnot_psg:
(1) 1512/     75B : AF                  		xor	a
(1) 1513/     75C : C9                  		ret
(1) 1514/     75D :                     
(1) 1515/     75D :                     ; ----------------------------------------
(1) 1516/     75D :                     ; *** NEW CHIP ***
(1) 1517/     75D :                     ;
(1) 1518/     75D :                     ; Input:
(1) 1519/     75D :                     ; e - Chip to set
(1) 1520/     75D :                     ; ----------------------------------------
(1) 1521/     75D :                     
(1) 1522/     75D :                     .new_chip:
(1) 1523/     75D : 7B                  		ld	a,e			; Read NEW chip
(1) 1524/     75E : B7                  		or	a
(1) 1525/     75F : F2 AD 07            		jp	p,.set_asfull		; If Null, mark as full
(1) 1526/     762 : CD D0 07            		call	.pick_tbl		; Pick chip table
(1) 1527/     765 : CF                  		rst	8
(1) 1528/     766 : FD 4E 14            		ld	c,(iy+seq_Priority)	; c - Seq priority level
(1) 1529/     769 : B7                  		or	a			; Chip is single?
(1) 1530/     76A : FA 98 07            		jp	m,.singl_free
(1) 1531/     76D : E5                  		push	hl			; Backup START table
(1) 1532/     76E :                     ; PASS 1
(1) 1533/     76E :                     .srch_free:
(1) 1534/     76E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1535/     76F : FE FF               		cp	-1			; If -1, return -1
(1) 1536/     771 : 28 0F               		jr	z,.pass_2
(1) 1537/     773 : 23                  		inc	hl
(1) 1538/     774 : 46                  		ld	b,(hl)			; Read MSB
(1) 1539/     775 : 2B                  		dec	hl
(1) 1540/     776 : B0                  		or	b
(1) 1541/     777 : 28 05               		jr	z,.found_tnew
(1) 1542/     779 : CD C9 07            		call	.nextsrch_tbl
(1) 1543/     77C : 18 F0               		jr	.srch_free
(1) 1544/     77E :                     .found_tnew:
(1) 1545/     77E : 33                  		inc	sp			; skip backup
(1) 1546/     77F : 33                  		inc	sp
(1) 1547/     780 : 18 36               		jr	.new_link
(1) 1548/     782 :                     ; PASS 2
(1) 1549/     782 :                     .pass_2:
(1) 1550/     782 : E1                  		pop	hl			; Recover START
(1) 1551/     783 :                     .next_prio:
(1) 1552/     783 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1553/     784 : FE FF               		cp	-1			; If -1, return -1
(1) 1554/     786 : C8                  		ret	z
(1) 1555/     787 : 23                  		inc	hl
(1) 1556/     788 : 23                  		inc	hl
(1) 1557/     789 : 7E                  		ld	a,(hl)			; Read priority
(1) 1558/     78A : 2B                  		dec	hl
(1) 1559/     78B : 2B                  		dec	hl
(1) 1560/     78C : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1561/     78D : 28 21               		jr	z,.ovrw_link
(1) 1562/     78F : B9                  		cp	c
(1) 1563/     790 : 38 1E               		jr	c,.ovrw_link		; PRIORITY
(1) 1564/     792 : CF                  		rst	8
(1) 1565/     793 : CD C9 07            		call	.nextsrch_tbl
(1) 1566/     796 : 18 EB               		jr	.next_prio
(1) 1567/     798 :                     
(1) 1568/     798 :                     ; ----------------------------------------
(1) 1569/     798 :                     ; Single slot PSGN/FM3/FM6
(1) 1570/     798 :                     ;
(1) 1571/     798 :                     ; c - priority
(1) 1572/     798 :                     ; e - chip
(1) 1573/     798 :                     ; ----------------------------------------
(1) 1574/     798 :                     
(1) 1575/     798 :                     .singl_free:
(1) 1576/     798 : E5                  		push	hl
(1) 1577/     799 : 46                  		ld	b,(hl)
(1) 1578/     79A : 23                  		inc	hl
(1) 1579/     79B : 7E                  		ld	a,(hl)
(1) 1580/     79C : 23                  		inc	hl
(1) 1581/     79D : 56                  		ld	d,(hl)		; this prio
(1) 1582/     79E : E1                  		pop	hl
(1) 1583/     79F : B0                  		or	b
(1) 1584/     7A0 : 28 0E               		jr	z,.ovrw_link
(1) 1585/     7A2 : CF                  		rst	8
(1) 1586/     7A3 : 7A                  		ld	a,d
(1) 1587/     7A4 : B7                  		or	a
(1) 1588/     7A5 : 28 09               		jr	z,.ovrw_link
(1) 1589/     7A7 : B9                  		cp	c
(1) 1590/     7A8 : 38 06               		jr	c,.ovrw_link	; PRIORITY
(1) 1591/     7AA : 28 04               		jr	z,.ovrw_link	; <-- ALWAYS overwrite
(1) 1592/     7AC : CF                  		rst	8
(1) 1593/     7AD :                     .set_asfull:
(1) 1594/     7AD : 3E FF               		ld	a,-1		; Return -1
(1) 1595/     7AF : C9                  		ret
(1) 1596/     7B0 :                     
(1) 1597/     7B0 :                     ; ----------------------------------------
(1) 1598/     7B0 :                     
(1) 1599/     7B0 :                     .ovrw_link:
(1) 1600/     7B0 : E5                  		push	hl
(1) 1601/     7B1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1602/     7B4 : CD 06 0F            		call	tblz_clear
(1) 1603/     7B7 : E1                  		pop	hl
(1) 1604/     7B8 :                     .new_link:
(1) 1605/     7B8 : CF                  		rst	8
(1) 1606/     7B9 : 23                  		inc	hl
(1) 1607/     7BA : 23                  		inc	hl
(1) 1608/     7BB :                     ; hl+2
(1) 1609/     7BB :                     .l_hiprio:
(1) 1610/     7BB : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1611/     7BE : DD E5               		push	ix
(1) 1612/     7C0 : D1                  		pop	de
(1) 1613/     7C1 : 71                  		ld	(hl),c		; Write priority
(1) 1614/     7C2 : 2B                  		dec	hl
(1) 1615/     7C3 : CF                  		rst	8
(1) 1616/     7C4 : 72                  		ld 	(hl),d		; MSB
(1) 1617/     7C5 : 2B                  		dec	hl
(1) 1618/     7C6 : 73                  		ld	(hl),e		; LSB
(1) 1619/     7C7 : AF                  		xor	a		; Return OK
(1) 1620/     7C8 : C9                  		ret
(1) 1621/     7C9 :                     
(1) 1622/     7C9 :                     ; ----------------------------------------
(1) 1623/     7C9 :                     
(1) 1624/     7C9 :                     .nextsrch_tbl:
(1) 1625/     7C9 : D5                  		push	de
(1) 1626/     7CA : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1627/     7CD : 19                  		add	hl,de
(1) 1628/     7CE : D1                  		pop	de
(1) 1629/     7CF : C9                  		ret
(1) 1630/     7D0 :                     
(1) 1631/     7D0 :                     ; ----------------------------------------
(1) 1632/     7D0 :                     ; Pick chip table
(1) 1633/     7D0 :                     ;
(1) 1634/     7D0 :                     ; Input:
(1) 1635/     7D0 :                     ; a  - Chip ID
(1) 1636/     7D0 :                     ;
(1) 1637/     7D0 :                     ; Output:
(1) 1638/     7D0 :                     ; hl - Current table
(1) 1639/     7D0 :                     ; a  - bit 7 only: multi or single table
(1) 1640/     7D0 :                     ; ----------------------------------------
(1) 1641/     7D0 :                     
(1) 1642/     7D0 :                     .pick_tbl:
(1) 1643/     7D0 : D5                  		push	de
(1) 1644/     7D1 : 0F                  		rrca
(1) 1645/     7D2 : 0F                  		rrca
(1) 1646/     7D3 : 0F                  		rrca
(1) 1647/     7D4 : 0F                  		rrca
(1) 1648/     7D5 : E6 07               		and	00000111b
(1) 1649/     7D7 : 87                  		add	a,a
(1) 1650/     7D8 : 21 00 1B            		ld	hl,tblList
(1) 1651/     7DB : E5                  		push	hl
(1) 1652/     7DC : 16 00               		ld	d,0
(1) 1653/     7DE : 5F                  		ld	e,a
(1) 1654/     7DF : 19                  		add	hl,de
(1) 1655/     7E0 : 5E                  		ld	e,(hl)
(1) 1656/     7E1 : 23                  		inc	hl
(1) 1657/     7E2 : 7E                  		ld	a,(hl)
(1) 1658/     7E3 : 57                  		ld	d,a
(1) 1659/     7E4 : E6 80               		and	10000000b
(1) 1660/     7E6 : CB BA               		res	7,d
(1) 1661/     7E8 : E1                  		pop	hl
(1) 1662/     7E9 : 19                  		add	hl,de
(1) 1663/     7EA : D1                  		pop	de
(1) 1664/     7EB : C9                  		ret
(1) 1665/     7EC :                     
(1) 1666/     7EC :                     ; ============================================
(1) 1667/     7EC :                     ; ----------------------------------------
(1) 1668/     7EC :                     ; Process chip using it's table
(1) 1669/     7EC :                     ;
(1) 1670/     7EC :                     ; iy - table to read
(1) 1671/     7EC :                     ; ----------------------------------------
(1) 1672/     7EC :                     
(1) 1673/     7EC :                     dtbl_multi:
(1) 1674/     7EC : FD 7E 00            		ld	a,(iy)
(1) 1675/     7EF : FE FF               		cp	-1
(1) 1676/     7F1 : C8                  		ret	z
(1) 1677/     7F2 : CF                  		rst	8
(1) 1678/     7F3 : CD 00 08            		call	dtbl_singl
(1) 1679/     7F6 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1680/     7F9 : FD 19               		add	iy,de
(1) 1681/     7FB : CF                  		rst	8
(1) 1682/     7FC : 00                  		nop
(1) 1683/     7FD : 00                  		nop
(1) 1684/     7FE : 18 EC               		jr	dtbl_multi
(1) 1685/     800 :                     dtbl_singl:
(1) 1686/     800 : FD 5E 00            		ld	e,(iy)			; Read link
(1) 1687/     803 : FD 56 01            		ld	d,(iy+1)
(1) 1688/     806 : 7A                  		ld	a,d			; If no-zero, active
(1) 1689/     807 : B3                  		or	e
(1) 1690/     808 : 20 60               		jr	nz,.linked
(1) 1691/     80A : FD 7E 02            		ld	a,(iy+ztbl_Priority)	; Silence request?
(1) 1692/     80D : B7                  		or	a
(1) 1693/     80E : F0                  		ret	p			; Return if not.
(1) 1694/     80F : CF                  		rst	8
(1) 1695/     810 : FD 36 02 00         		ld	(iy+ztbl_Priority),0	; Reset request on memory
(1) 1696/     814 :                     
(1) 1697/     814 :                     ; ----------------------------------------
(1) 1698/     814 :                     ; chip-silence request
(1) 1699/     814 :                     ; iy - Table
(1) 1700/     814 :                     
(1) 1701/     814 : 06 00               		ld	b,0
(1) 1702/     816 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1703/     819 : E6 F0               		and	11110000b
(1) 1704/     81B : FE 80               		cp	80h
(1) 1705/     81D : 28 1E               		jr	z,.siln_psg
(1) 1706/     81F : FE 90               		cp	90h
(1) 1707/     821 : 28 16               		jr	z,.siln_psg_n
(1) 1708/     823 : FE A0               		cp	0A0h
(1) 1709/     825 : 28 3D               		jr	z,.siln_fm
(1) 1710/     827 : FE B0               		cp	0B0h
(1) 1711/     829 : 28 39               		jr	z,.siln_fm
(1) 1712/     82B : CF                  		rst	8
(1) 1713/     82C : FE C0               		cp	0C0h
(1) 1714/     82E : 28 31               		jr	z,.siln_dac
(1) 1715/     830 : FE D0               		cp	0D0h
(1) 1716/     832 : 28 0F               		jr	z,.siln_pcm
(1) 1717/     834 : FE E0               		cp	0E0h
(1) 1718/     836 : 28 1C               		jr	z,.siln_pwm
(1) 1719/     838 : C9                  		ret
(1) 1720/     839 :                     .siln_psg_n:
(1) 1721/     839 : AF                  		xor	a
(1) 1722/     83A : 32 2F 00            		ld	(psgHatMode),a
(1) 1723/     83D :                     .siln_psg:
(1) 1724/     83D : CF                  		rst	8
(1) 1725/     83E : 21 1F 15            		ld	hl,psgcom
(1) 1726/     841 : 18 1A               		jr	.rcyl_com
(1) 1727/     843 :                     
(1) 1728/     843 :                     ; --------------------------------
(1) 1729/     843 :                     
(1) 1730/     843 :                     .siln_pcm:
(1) 1731/     843 : 3E 01               		ld	a,1
(1) 1732/     845 : 32 A3 17            		ld	(mcdUpd),a
(1) 1733/     848 : CF                  		rst	8
(1) 1734/     849 : 21 C7 14            		ld	hl,pcmcom+32
(1) 1735/     84C : 09                  		add	hl,bc
(1) 1736/     84D : 36 FF               		ld	(hl),-1
(1) 1737/     84F : 21 A7 14            		ld	hl,pcmcom
(1) 1738/     852 : 18 09               		jr	.rcyl_com
(1) 1739/     854 :                     .siln_pwm:
(1) 1740/     854 : 3E 01               		ld	a,1
(1) 1741/     856 : 32 A2 17            		ld	(marsUpd),a
(1) 1742/     859 : CF                  		rst	8
(1) 1743/     85A : 21 E7 14            		ld	hl,pwmcom
(1) 1744/     85D :                     .rcyl_com:
(1) 1745/     85D : 09                  		add	hl,bc
(1) 1746/     85E : 36 04               		ld	(hl),100b	; key-cut
(1) 1747/     860 : C9                  		ret
(1) 1748/     861 :                     
(1) 1749/     861 :                     ; --------------------------------
(1) 1750/     861 :                     
(1) 1751/     861 :                     .siln_dac:
(1) 1752/     861 : CD F4 11            		call	dac_off
(1) 1753/     864 :                     .siln_fm:
(1) 1754/     864 : CD 6B 0A            		call	.fm_tloff
(1) 1755/     867 : C3 63 0A            		jp	.fm_keyoff
(1) 1756/     86A :                     
(1) 1757/     86A :                     ; ----------------------------------------
(1) 1758/     86A :                     ; Process channel now
(1) 1759/     86A :                     ; iy - Table
(1) 1760/     86A :                     ; ix - Tracker channel
(1) 1761/     86A :                     .linked:
(1) 1762/     86A : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1763/     86B : 47                  		ld	b,a		; b - flags to check
(1) 1764/     86C : E6 0F               		and	00001111b	; evin flags?
(1) 1765/     86E : C8                  		ret	z
(1) 1766/     86F : 78                  		ld	a,b
(1) 1767/     870 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1768/     872 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1769/     873 : CF                  		rst	8
(1) 1770/     874 : FD E5               		push	iy		; table+10h instrment data
(1) 1771/     876 : D5                  		push	de
(1) 1772/     877 : DD E1               		pop	ix
(1) 1773/     879 : E1                  		pop	hl
(1) 1774/     87A : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1775/     87D : 19                  		add	hl,de
(1) 1776/     87E :                     	; --------------------------------
(1) 1777/     87E :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1778/     87E :                     	; iy - Our chip table
(1) 1779/     87E :                     	; ix - Track channel
(1) 1780/     87E :                     	; hl - Intrument data
(1) 1781/     87E : 78                  		ld	a,b		; Note and/or Inst?
(1) 1782/     87F : E6 03               		and	0011b
(1) 1783/     881 : C4 AC 08            		call	nz,.reset_effc	; Reset effects
(1) 1784/     884 : CB 50               		bit	2,b		; Volume
(1) 1785/     886 : C4 14 0D            		call	nz,.volu
(1) 1786/     889 : CF                  		rst	8
(1) 1787/     88A : CB 40               		bit	0,b		; Note
(1) 1788/     88C : C4 B3 0E            		call	nz,.note
(1) 1789/     88F : CB 48               		bit	1,b		; Intrument
(1) 1790/     891 : C4 1D 0D            		call	nz,.inst
(1) 1791/     894 : CB 58               		bit	3,b		; Effect
(1) 1792/     896 : C4 29 0C            		call	nz,.effc
(1) 1793/     899 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1794/     89A : E6 70               		and	01110000b	; Filter bits
(1) 1795/     89C : 0F                  		rrca
(1) 1796/     89D : CF                  		rst	8
(1) 1797/     89E : 0F                  		rrca
(1) 1798/     89F : 0F                  		rrca
(1) 1799/     8A0 : 16 00               		ld	d,0
(1) 1800/     8A2 : 5F                  		ld	e,a
(1) 1801/     8A3 : 21 B9 08            		ld	hl,.mk_list
(1) 1802/     8A6 : 19                  		add	hl,de
(1) 1803/     8A7 : 7E                  		ld	a,(hl)
(1) 1804/     8A8 : 23                  		inc	hl
(1) 1805/     8A9 : 66                  		ld	h,(hl)
(1) 1806/     8AA : 6F                  		ld	l,a
(1) 1807/     8AB : E9                  		jp	(hl)
(1) 1808/     8AC :                     .reset_effc:
(1) 1809/     8AC : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1810/     8B0 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1811/     8B4 : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1812/     8B8 : C9                  		ret
(1) 1813/     8B9 :                     
(1) 1814/     8B9 :                     ; --------------------------------
(1) 1815/     8B9 :                     .mk_list:
(1) 1816/     8B9 : C7 08               		dw .mk_psg
(1) 1817/     8BB : C7 08               		dw .mk_psg
(1) 1818/     8BD : 7A 09               		dw .mk_fm
(1) 1819/     8BF : FE 09               		dw .mk_fm_sp
(1) 1820/     8C1 : B3 0B               		dw .mk_dac
(1) 1821/     8C3 : 09 0C               		dw .mk_pcm
(1) 1822/     8C5 : 0A 0C               		dw .mk_pwm
(1) 1823/     8C7 :                     
(1) 1824/     8C7 :                     ; --------------------------------
(1) 1825/     8C7 :                     ; PSG and PSGN
(1) 1826/     8C7 :                     ; --------------------------------
(1) 1827/     8C7 :                     
(1) 1828/     8C7 :                     .mk_psg:
(1) 1829/     8C7 : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1830/     8CA : DD E5               		push	ix			; * Save ix
(1) 1831/     8CC : CF                  		rst	8
(1) 1832/     8CD : DD 21 1F 15         		ld	ix,psgcom		; ix - psgcom
(1) 1833/     8D1 : 16 00               		ld	d,0
(1) 1834/     8D3 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1835/     8D6 : DD 19               		add	ix,de			; Get com index
(1) 1836/     8D8 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1837/     8D9 : E6 03               		and	0011b
(1) 1838/     8DB : 28 4A               		jr	z,.psgc_proc		; Process only
(1) 1839/     8DD : 79                  		ld	a,c			; c - Note
(1) 1840/     8DE : B7                  		or	a
(1) 1841/     8DF : C8                  		ret	z
(1) 1842/     8E0 : CF                  		rst	8
(1) 1843/     8E1 : FE FE               		cp	-2			; Key cut?
(1) 1844/     8E3 : 28 32               		jr	z,.kycut_psg
(1) 1845/     8E5 : FE FF               		cp	-1			; Key off?
(1) 1846/     8E7 : 28 22               		jr	z,.kyoff_psg
(1) 1847/     8E9 : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1848/     8ED : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1849/     8EE : 11 00 00            		ld	de,0			; Clear de
(1) 1850/     8F1 : FE 03               		cp	3			; NOISE channel?
(1) 1851/     8F3 : 20 0E               		jr	nz,.not_ns
(1) 1852/     8F5 : CF                  		rst	8
(1) 1853/     8F6 : 3A 2F 00            		ld	a,(psgHatMode)		; Tone 3?
(1) 1854/     8F9 : E6 03               		and	011b
(1) 1855/     8FB : FE 03               		cp	011b
(1) 1856/     8FD : C2 4A 09            		jp	nz,.psg_keyon		; Normal
(1) 1857/     900 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1858/     903 :                     .not_ns:
(1) 1859/     903 : CD 65 09            		call	.psg_getfreq
(1) 1860/     906 : 18 26               		jr	.psgc_keyon
(1) 1861/     908 :                     
(1) 1862/     908 :                     ; --------------------------------
(1) 1863/     908 :                     ; -1
(1) 1864/     908 :                     .kyoff_psgn:
(1) 1865/     908 : CD 20 09            		call	.kypsgn_hatoff
(1) 1866/     90B :                     .kyoff_psg:
(1) 1867/     90B : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1868/     90F : DD E1               		pop	ix			; * Restore ix
(1) 1869/     911 : C3 FF 0E            		jp	.chnl_ulnk
(1) 1870/     914 :                     
(1) 1871/     914 :                     ; --------------------------------
(1) 1872/     914 :                     ; -2
(1) 1873/     914 :                     .kycut_psgn:
(1) 1874/     914 : CD 20 09            		call	.kypsgn_hatoff
(1) 1875/     917 :                     .kycut_psg:
(1) 1876/     917 : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1877/     91B : DD E1               		pop	ix			; * Restore ix
(1) 1878/     91D : C3 FF 0E            		jp	.chnl_ulnk
(1) 1879/     920 :                     
(1) 1880/     920 :                     
(1) 1881/     920 :                     .kypsgn_hatoff:
(1) 1882/     920 : 3E 00               		ld	a,000b
(1) 1883/     922 : 32 2F 00            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1884/     925 : CF                  		rst	8
(1) 1885/     926 : C9                  		ret
(1) 1886/     927 :                     
(1) 1887/     927 :                     ; --------------------------------
(1) 1888/     927 :                     ; hl - current freq
(1) 1889/     927 :                     ; ix - psgcom
(1) 1890/     927 :                     ; b - flags
(1) 1891/     927 :                     
(1) 1892/     927 :                     .psgc_proc:
(1) 1893/     927 : CF                  		rst	8
(1) 1894/     928 : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1895/     92B : DD 66 20            		ld	h,(ix+DTH)
(1) 1896/     92E :                     .psgc_keyon:
(1) 1897/     92E : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1898/     931 : B7                  		or	a
(1) 1899/     932 : CA 44 09            		jp	z,.no_req
(1) 1900/     935 : ED 44               		neg	a
(1) 1901/     937 : 5F                  		ld	e,a
(1) 1902/     938 : 4F                  		ld	c,a
(1) 1903/     939 : AF                  		xor	a
(1) 1904/     93A : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1905/     93D : 3F                  		ccf
(1) 1906/     93E : CB 21               		sla	c
(1) 1907/     940 : 9F                  		sbc	a,a
(1) 1908/     941 : 57                  		ld	d,a
(1) 1909/     942 : CF                  		rst	8
(1) 1910/     943 : 19                  		add	hl,de
(1) 1911/     944 :                     .no_req:
(1) 1912/     944 : DD 75 1C            		ld	(ix+DTL),l
(1) 1913/     947 : DD 74 20            		ld	(ix+DTH),h
(1) 1914/     94A :                     .psg_keyon:
(1) 1915/     94A : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1916/     94D : 87                  		add	a,a
(1) 1917/     94E : 5F                  		ld	e,a
(1) 1918/     94F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1919/     952 : 93                  		sub	a,e
(1) 1920/     953 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1921/     956 : ED 44               		neg	a
(1) 1922/     958 : CF                  		rst	8
(1) 1923/     959 : 87                  		add	a,a
(1) 1924/     95A : 87                  		add	a,a
(1) 1925/     95B : 30 02               		jr	nc,.vmuch
(1) 1926/     95D : 3E FF               		ld	a,-1
(1) 1927/     95F :                     .vmuch:
(1) 1928/     95F : DD 77 30            		ld	(ix+MVOL),a
(1) 1929/     962 : DD E1               		pop	ix			; * Restore ix
(1) 1930/     964 : C9                  		ret
(1) 1931/     965 :                     
(1) 1932/     965 :                     ; --------------------------------
(1) 1933/     965 :                     ; de - increment
(1) 1934/     965 :                     
(1) 1935/     965 :                     .psg_getfreq:
(1) 1936/     965 : 21 DD 12            		ld	hl,psgFreq_List-(36*2)
(1) 1937/     968 : 19                  		add	hl,de
(1) 1938/     969 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1939/     96C : 19                  		add	hl,de
(1) 1940/     96D : 7E                  		ld	a,(hl)
(1) 1941/     96E : 23                  		inc	hl
(1) 1942/     96F : CF                  		rst	8
(1) 1943/     970 : 66                  		ld	h,(hl)
(1) 1944/     971 : 6F                  		ld	l,a
(1) 1945/     972 : 3A 88 1F            		ld	a,(palMode)
(1) 1946/     975 : B7                  		or	a
(1) 1947/     976 : 28 01               		jr	z,.fnot_pal
(1) 1948/     978 : 2B                  		dec	hl
(1) 1949/     979 :                     .fnot_pal:
(1) 1950/     979 : C9                  		ret
(1) 1951/     97A :                     
(1) 1952/     97A :                     ; --------------------------------
(1) 1953/     97A :                     ; FM
(1) 1954/     97A :                     ; --------------------------------
(1) 1955/     97A :                     
(1) 1956/     97A :                     .mk_fm:
(1) 1957/     97A : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1958/     97D : 78                  		ld	a,b			; Get NOTE and/or INS?
(1) 1959/     97E : E6 03               		and	0011b
(1) 1960/     980 : 28 32               		jr	z,.mkfm_proc		; Process only
(1) 1961/     982 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1962/     985 : B7                  		or	a
(1) 1963/     986 : C8                  		ret	z
(1) 1964/     987 : FE FE               		cp	-2			; Key-cut?
(1) 1965/     989 : CA 57 0A            		jp	z,.fm_cut
(1) 1966/     98C : CF                  		rst	8
(1) 1967/     98D : FE FF               		cp	-1			; Key-off?
(1) 1968/     98F : CA 4E 0A            		jp	z,.fm_off
(1) 1969/     992 : CD 63 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1970/     995 : 79                  		ld	a,c
(1) 1971/     996 : FE 06               		cp	6			; Check FM6
(1) 1972/     998 : 20 05               		jr	nz,.not_dac
(1) 1973/     99A : CD F4 11            		call	dac_off			; Turn DAC off
(1) 1974/     99D : 18 15               		jr	.mkfm_proc
(1) 1975/     99F :                     .not_dac:
(1) 1976/     99F : FE 02               		cp	2			; Check FM3
(1) 1977/     9A1 : 20 11               		jr	nz,.mkfm_proc
(1) 1978/     9A3 : 3A 30 00            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1979/     9A6 : B7                  		or	a
(1) 1980/     9A7 : 28 0B               		jr	z,.mkfm_proc
(1) 1981/     9A9 : CF                  		rst	8
(1) 1982/     9AA : AF                  		xor	a
(1) 1983/     9AB : 32 30 00            		ld	(fmSpecial),a
(1) 1984/     9AE : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1985/     9B1 : CD C9 11            		call	fm_send_1
(1) 1986/     9B4 :                     .mkfm_proc:
(1) 1987/     9B4 : CF                  		rst	8
(1) 1988/     9B5 : C5                  		push	bc
(1) 1989/     9B6 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1990/     9B9 : 47                  		ld	b,a
(1) 1991/     9BA : E6 1F               		and	00011111b
(1) 1992/     9BC : 5F                  		ld	e,a
(1) 1993/     9BD : 16 00               		ld	d,0
(1) 1994/     9BF : 21 0D 13            		ld	hl,fmFreq_List
(1) 1995/     9C2 : 19                  		add	hl,de
(1) 1996/     9C3 : 7E                  		ld	a,(hl)
(1) 1997/     9C4 : CF                  		rst	8
(1) 1998/     9C5 : 23                  		inc	hl
(1) 1999/     9C6 : 66                  		ld	h,(hl)
(1) 2000/     9C7 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2001/     9C8 : 3A 88 1F            		ld	a,(palMode)		; PAL speed check
(1) 2002/     9CB : B7                  		or	a
(1) 2003/     9CC : 28 04               		jr	z,.not_pal
(1) 2004/     9CE : 11 04 00            		ld	de,4			; freq + 4
(1) 2005/     9D1 : 19                  		add	hl,de
(1) 2006/     9D2 :                     .not_pal:
(1) 2007/     9D2 : 78                  		ld	a,b
(1) 2008/     9D3 : E6 E0               		and	11100000b
(1) 2009/     9D5 : 0F                  		rrca
(1) 2010/     9D6 : 0F                  		rrca
(1) 2011/     9D7 : B4                  		or	h
(1) 2012/     9D8 : 67                  		ld	h,a
(1) 2013/     9D9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2014/     9DC : CF                  		rst	8
(1) 2015/     9DD : AF                  		xor	a			; clear high
(1) 2016/     9DE : 3F                  		ccf				; clear carry
(1) 2017/     9DF : CB 23               		sla	e			; pitchbend << 2
(1) 2018/     9E1 : 00                  		nop				; **
(1) 2019/     9E2 : 9F                  		sbc	a,a			; get carry MSB
(1) 2020/     9E3 : 57                  		ld	d,a
(1) 2021/     9E4 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2022/     9E5 : 79                  		ld	a,c
(1) 2023/     9E6 : E6 03               		and	011b
(1) 2024/     9E8 : F6 A4               		or	0A4h
(1) 2025/     9EA : 57                  		ld	d,a
(1) 2026/     9EB : 5C                  		ld	e,h
(1) 2027/     9EC : CF                  		rst	8
(1) 2028/     9ED : CD C5 11            		call	fm_autoreg
(1) 2029/     9F0 : 79                  		ld	a,c
(1) 2030/     9F1 : E6 03               		and	011b
(1) 2031/     9F3 : F6 A0               		or	0A0h
(1) 2032/     9F5 : 57                  		ld	d,a
(1) 2033/     9F6 : 5D                  		ld	e,l
(1) 2034/     9F7 : CD C5 11            		call	fm_autoreg
(1) 2035/     9FA : C1                  		pop	bc
(1) 2036/     9FB : C3 99 0A            		jp	.mkfm_set
(1) 2037/     9FE :                     
(1) 2038/     9FE :                     ; --------------------------------
(1) 2039/     9FE :                     ; FM3 special
(1) 2040/     9FE :                     ; --------------------------------
(1) 2041/     9FE :                     
(1) 2042/     9FE :                     .mk_fm_sp:
(1) 2043/     9FE : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2044/     A00 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2045/     A01 : E6 03               		and	0011b
(1) 2046/     A03 : CA 99 0A            		jp	z,.mkfm_set		; Process only
(1) 2047/     A06 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2048/     A09 : B7                  		or	a
(1) 2049/     A0A : C8                  		ret	z
(1) 2050/     A0B : FE FE               		cp	-2
(1) 2051/     A0D : CA 57 0A            		jp	z,.fm_cut
(1) 2052/     A10 : FE FF               		cp	-1
(1) 2053/     A12 : CA 4E 0A            		jp	z,.fm_off
(1) 2054/     A15 : CD 63 0A            		call	.fm_keyoff
(1) 2055/     A18 : CF                  		rst	8
(1) 2056/     A19 : 21 AB 15            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2057/     A1C : 11 20 00            		ld	de,20h			; point to regs
(1) 2058/     A1F : 19                  		add	hl,de
(1) 2059/     A20 : DD E5               		push	ix
(1) 2060/     A22 : DD 21 46 0A         		ld	ix,.this_regs
(1) 2061/     A26 : 06 08               		ld	b,8
(1) 2062/     A28 :                     .wr_spc:
(1) 2063/     A28 : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2064/     A2B : 5E                  		ld	e,(hl)
(1) 2065/     A2C : CD C9 11            		call	fm_send_1
(1) 2066/     A2F : CF                  		rst	8
(1) 2067/     A30 : 23                  		inc	hl
(1) 2068/     A31 : DD 23               		inc	ix
(1) 2069/     A33 : 10 F3               		djnz	.wr_spc
(1) 2070/     A35 : DD E1               		pop	ix
(1) 2071/     A37 : CD 99 0A            		call	.mkfm_set
(1) 2072/     A3A : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2073/     A3D : CD C9 11            		call	fm_send_1
(1) 2074/     A40 : 3E 01               		ld	a,1
(1) 2075/     A42 : 32 30 00            		ld	(fmSpecial),a
(1) 2076/     A45 : C9                  		ret
(1) 2077/     A46 :                     .this_regs:
(1) 2078/     A46 : AD A9               		db 0ADh,0A9h
(1) 2079/     A48 : AC A8               		db 0ACh,0A8h
(1) 2080/     A4A : AE AA               		db 0AEh,0AAh
(1) 2081/     A4C : A6 A2               		db 0A6h,0A2h
(1) 2082/     A4E :                     
(1) 2083/     A4E :                     ; ----------------------------------------
(1) 2084/     A4E :                     
(1) 2085/     A4E :                     .fm_off:
(1) 2086/     A4E : CD 82 0A            		call	.fm_clrrsave
(1) 2087/     A51 : CD 63 0A            		call	.fm_keyoff
(1) 2088/     A54 : C3 FF 0E            		jp	.chnl_ulnk
(1) 2089/     A57 :                     .fm_cut:
(1) 2090/     A57 : CD 82 0A            		call	.fm_clrrsave
(1) 2091/     A5A : CD 63 0A            		call	.fm_keyoff
(1) 2092/     A5D : CD 6B 0A            		call	.fm_tloff
(1) 2093/     A60 : C3 FF 0E            		jp	.chnl_ulnk
(1) 2094/     A63 :                     
(1) 2095/     A63 :                     ; ----------------------------------------
(1) 2096/     A63 :                     ; iy - current FM table
(1) 2097/     A63 :                     
(1) 2098/     A63 :                     .fm_keyoff:
(1) 2099/     A63 : 16 28               		ld	d,28h
(1) 2100/     A65 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2101/     A68 : C3 C9 11            		jp	fm_send_1
(1) 2102/     A6B :                     
(1) 2103/     A6B :                     .fm_tloff:
(1) 2104/     A6B : 06 04               		ld	b,4
(1) 2105/     A6D : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2106/     A70 : 79                  		ld	a,c
(1) 2107/     A71 : E6 03               		and	011b
(1) 2108/     A73 : F6 40               		or	40h		; TL regs
(1) 2109/     A75 : 1E 7F               		ld	e,7Fh
(1) 2110/     A77 :                     .tl_down:
(1) 2111/     A77 : 57                  		ld	d,a
(1) 2112/     A78 :                     		; e - 7Fh
(1) 2113/     A78 : CD C5 11            		call	fm_autoreg
(1) 2114/     A7B : CF                  		rst	8
(1) 2115/     A7C : 7A                  		ld	a,d
(1) 2116/     A7D : C6 04               		add	a,4
(1) 2117/     A7F : 10 F6               		djnz	.tl_down
(1) 2118/     A81 : C9                  		ret
(1) 2119/     A82 :                     
(1) 2120/     A82 :                     .fm_clrrsave:
(1) 2121/     A82 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2122/     A85 : E6 07               		and	0111b
(1) 2123/     A87 : 87                  		add	a,a
(1) 2124/     A88 : 87                  		add	a,a
(1) 2125/     A89 : 21 4B 16            		ld	hl,fmlist_rsave
(1) 2126/     A8C : 16 00               		ld	d,0
(1) 2127/     A8E : 5F                  		ld	e,a
(1) 2128/     A8F : 19                  		add	hl,de
(1) 2129/     A90 : 36 00               		ld	(hl),0
(1) 2130/     A92 : 23                  		inc	hl
(1) 2131/     A93 : 36 00               		ld	(hl),0
(1) 2132/     A95 : 23                  		inc	hl
(1) 2133/     A96 : 36 00               		ld	(hl),0
(1) 2134/     A98 : C9                  		ret
(1) 2135/     A99 :                     
(1) 2136/     A99 :                     ; ----------------------------------------
(1) 2137/     A99 :                     
(1) 2138/     A99 :                     .mkfm_set:
(1) 2139/     A99 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2140/     A9C : CD A3 0B            		call	.get_fmcach
(1) 2141/     A9F : E5                  		push	hl			; Save TOP
(1) 2142/     AA0 : 11 1C 00            		ld	de,1Ch			; Go to 1Ch (regs B0, B4...)
(1) 2143/     AA3 : 19                  		add	hl,de
(1) 2144/     AA4 : 46                  		ld	b,(hl)			; b - 0B0h algorithm
(1) 2145/     AA5 : E1                  		pop	hl			; Recover TOP
(1) 2146/     AA6 : CF                  		rst	8
(1) 2147/     AA7 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2148/     AAA : 79                  		ld	a,c
(1) 2149/     AAB : E6 03               		and	011b
(1) 2150/     AAD : F6 30               		or	30h			; Start at reg 30h
(1) 2151/     AAF : 57                  		ld	d,a
(1) 2152/     AB0 :                     	; hl - reg data
(1) 2153/     AB0 :                     	; b  - 0B0h algorithm
(1) 2154/     AB0 :                     	;  c - current FM channel 0-6
(1) 2155/     AB0 :                     	; d  - Starting FM reg
(1) 2156/     AB0 : CD 03 0B            		call	.mkfm_wregs		; 30h+
(1) 2157/     AB3 : CD 2C 0B            		call	.mkfm_tlvol		; 40h+
(1) 2158/     AB6 : CD 03 0B            		call	.mkfm_wregs		; 50h+
(1) 2159/     AB9 : CD 03 0B            		call	.mkfm_wregs		; 60h+
(1) 2160/     ABC : CD 03 0B            		call	.mkfm_wregs		; 70h+
(1) 2161/     ABF : CD 03 0B            		call	.mkfm_wregs		; 80h+
(1) 2162/     AC2 : CD 03 0B            		call	.mkfm_wregs		; 90h+
(1) 2163/     AC5 : E7                  		rst	20h
(1) 2164/     AC6 : 78                  		ld	a,b			; 0B0h algorithm
(1) 2165/     AC7 : 23                  		inc	hl
(1) 2166/     AC8 : 5F                  		ld	e,a
(1) 2167/     AC9 : 79                  		ld	a,c
(1) 2168/     ACA : E6 03               		and	011b
(1) 2169/     ACC : F6 B0               		or	0B0h
(1) 2170/     ACE : 57                  		ld	d,a
(1) 2171/     ACF : CD C5 11            		call	fm_autoreg		; Write algorithm
(1) 2172/     AD2 : CF                  		rst	8
(1) 2173/     AD3 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2174/     AD6 : 2F                  		cpl				; REVERSE bits
(1) 2175/     AD7 : E6 30               		and	00110000b
(1) 2176/     AD9 : 07                  		rlca				; << 2
(1) 2177/     ADA : 07                  		rlca
(1) 2178/     ADB : 5F                  		ld	e,a			; save as e
(1) 2179/     ADC : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2180/     ADD : 23                  		inc	hl
(1) 2181/     ADE : E6 3F               		and	00111111b
(1) 2182/     AE0 : B3                  		or	e			; Merge panning
(1) 2183/     AE1 : 5F                  		ld	e,a
(1) 2184/     AE2 : 79                  		ld	a,c
(1) 2185/     AE3 : CF                  		rst	8
(1) 2186/     AE4 : E6 03               		and	011b
(1) 2187/     AE6 : F6 B4               		or	0B4h
(1) 2188/     AE8 : 57                  		ld	d,a
(1) 2189/     AE9 : CD C5 11            		call	fm_autoreg
(1) 2190/     AEC : 7E                  		ld	a,(hl)			; 022h
(1) 2191/     AED : 23                  		inc	hl
(1) 2192/     AEE : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2193/     AF0 : 28 06               		jr	z,.no_lfo
(1) 2194/     AF2 : 5F                  		ld	e,a
(1) 2195/     AF3 : 16 22               		ld	d,22h
(1) 2196/     AF5 : CD C9 11            		call	fm_send_1
(1) 2197/     AF8 :                     .no_lfo:
(1) 2198/     AF8 :                     
(1) 2199/     AF8 :                     
(1) 2200/     AF8 : CF                  		rst	8
(1) 2201/     AF9 : 7E                  		ld	a,(hl)			; 028h
(1) 2202/     AFA : E6 F0               		and	11110000b
(1) 2203/     AFC : B1                  		or	c			; Merge FM channel
(1) 2204/     AFD : 5F                  		ld	e,a
(1) 2205/     AFE : 16 28               		ld	d,28h
(1) 2206/     B00 : C3 C9 11            		jp	fm_send_1		; Set keys
(1) 2207/     B03 :                     
(1) 2208/     B03 :                     ; ----------------------------------------
(1) 2209/     B03 :                     
(1) 2210/     B03 :                     .mkfm_wregs:
(1) 2211/     B03 : CF                  		rst	8
(1) 2212/     B04 : 5E                  		ld	e,(hl)
(1) 2213/     B05 : 23                  		inc	hl
(1) 2214/     B06 : CD C5 11            		call	fm_autoreg
(1) 2215/     B09 : 14                  		inc	d
(1) 2216/     B0A : 14                  		inc	d
(1) 2217/     B0B : 14                  		inc	d
(1) 2218/     B0C : 14                  		inc	d
(1) 2219/     B0D : 5E                  		ld	e,(hl)
(1) 2220/     B0E : 23                  		inc	hl
(1) 2221/     B0F : CF                  		rst	8
(1) 2222/     B10 : CD C5 11            		call	fm_autoreg
(1) 2223/     B13 : 14                  		inc	d
(1) 2224/     B14 : 14                  		inc	d
(1) 2225/     B15 : 14                  		inc	d
(1) 2226/     B16 : 14                  		inc	d
(1) 2227/     B17 : 5E                  		ld	e,(hl)
(1) 2228/     B18 : 23                  		inc	hl
(1) 2229/     B19 : CD C5 11            		call	fm_autoreg
(1) 2230/     B1C : 14                  		inc	d
(1) 2231/     B1D : CF                  		rst	8
(1) 2232/     B1E : 14                  		inc	d
(1) 2233/     B1F : 14                  		inc	d
(1) 2234/     B20 : 14                  		inc	d
(1) 2235/     B21 : 5E                  		ld	e,(hl)
(1) 2236/     B22 : 23                  		inc	hl
(1) 2237/     B23 : CD C5 11            		call	fm_autoreg
(1) 2238/     B26 : 14                  		inc	d
(1) 2239/     B27 : 14                  		inc	d
(1) 2240/     B28 : 14                  		inc	d
(1) 2241/     B29 : 14                  		inc	d
(1) 2242/     B2A : CF                  		rst	8
(1) 2243/     B2B : C9                  		ret
(1) 2244/     B2C :                     
(1) 2245/     B2C :                     ; ----------------------------------------
(1) 2246/     B2C :                     ; Write 40+ TL w/volume
(1) 2247/     B2C :                     
(1) 2248/     B2C :                     ; hl - TL reg data
(1) 2249/     B2C :                     ; b - current 0B0h
(1) 2250/     B2C :                     ; d - 40h+
(1) 2251/     B2C :                     
(1) 2252/     B2C :                     .mkfm_tlvol:
(1) 2253/     B2C : 78                  		ld	a,b			; Read 0B0h copy
(1) 2254/     B2D : C5                  		push	bc
(1) 2255/     B2E : E5                  		push	hl
(1) 2256/     B2F : 21 9B 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2257/     B32 : E6 07               		and	0111b
(1) 2258/     B34 : 06 00               		ld	b,0
(1) 2259/     B36 : 4F                  		ld	c,a
(1) 2260/     B37 : 09                  		add	hl,bc
(1) 2261/     B38 : CF                  		rst	8
(1) 2262/     B39 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2263/     B3C : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2264/     B3F : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2265/     B42 : 4F                  		ld	c,a			; c - Current Volume
(1) 2266/     B43 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2267/     B44 : E1                  		pop	hl
(1) 2268/     B45 : CB 08               		rrc	b			; OP1
(1) 2269/     B47 : DC 7E 0B            		call	c,.write_tl
(1) 2270/     B4A : D4 90 0B            		call	nc,.write_ntl
(1) 2271/     B4D : 23                  		inc	hl
(1) 2272/     B4E : 14                  		inc	d
(1) 2273/     B4F : 14                  		inc	d
(1) 2274/     B50 : CF                  		rst	8
(1) 2275/     B51 : 14                  		inc	d
(1) 2276/     B52 : 14                  		inc	d
(1) 2277/     B53 : CB 08               		rrc	b			; OP2
(1) 2278/     B55 : DC 7E 0B            		call	c,.write_tl
(1) 2279/     B58 : D4 90 0B            		call	nc,.write_ntl
(1) 2280/     B5B : 23                  		inc	hl
(1) 2281/     B5C : 14                  		inc	d
(1) 2282/     B5D : 14                  		inc	d
(1) 2283/     B5E : 14                  		inc	d
(1) 2284/     B5F : 14                  		inc	d
(1) 2285/     B60 : CB 08               		rrc	b			; OP3
(1) 2286/     B62 : DC 7E 0B            		call	c,.write_tl
(1) 2287/     B65 : D4 90 0B            		call	nc,.write_ntl
(1) 2288/     B68 : 23                  		inc	hl
(1) 2289/     B69 : CF                  		rst	8
(1) 2290/     B6A : 14                  		inc	d
(1) 2291/     B6B : 14                  		inc	d
(1) 2292/     B6C : 14                  		inc	d
(1) 2293/     B6D : 14                  		inc	d
(1) 2294/     B6E : CB 08               		rrc	b			; OP4
(1) 2295/     B70 : DC 7E 0B            		call	c,.write_tl
(1) 2296/     B73 : D4 90 0B            		call	nc,.write_ntl
(1) 2297/     B76 : 23                  		inc	hl
(1) 2298/     B77 : 14                  		inc	d
(1) 2299/     B78 : 14                  		inc	d
(1) 2300/     B79 : 14                  		inc	d
(1) 2301/     B7A : 14                  		inc	d
(1) 2302/     B7B : CF                  		rst	8
(1) 2303/     B7C : C1                  		pop	bc
(1) 2304/     B7D : C9                  		ret
(1) 2305/     B7E :                     
(1) 2306/     B7E :                     ; --------------------------------
(1) 2307/     B7E :                     
(1) 2308/     B7E :                     .write_tl:
(1) 2309/     B7E : 7E                  		ld	a,(hl)
(1) 2310/     B7F : 91                  		sub	a,c			; reg - volume
(1) 2311/     B80 : F2 85 0B            		jp	p,.keep_tlmx
(1) 2312/     B83 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2313/     B85 :                     .keep_tlmx:
(1) 2314/     B85 : C5                  		push	bc
(1) 2315/     B86 : 5F                  		ld	e,a
(1) 2316/     B87 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2317/     B8A : CD C5 11            		call	fm_autoreg
(1) 2318/     B8D : CF                  		rst	8
(1) 2319/     B8E : C1                  		pop	bc
(1) 2320/     B8F : C9                  		ret
(1) 2321/     B90 :                     
(1) 2322/     B90 :                     .write_ntl:
(1) 2323/     B90 : C5                  		push	bc
(1) 2324/     B91 : 5E                  		ld	e,(hl)
(1) 2325/     B92 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2326/     B95 : CD C5 11            		call	fm_autoreg
(1) 2327/     B98 : CF                  		rst	8
(1) 2328/     B99 : C1                  		pop	bc
(1) 2329/     B9A : C9                  		ret
(1) 2330/     B9B :                     
(1) 2331/     B9B :                     ; --------------------------------
(1) 2332/     B9B :                     ; Jump carry list
(1) 2333/     B9B :                     .fm_cindx:
(1) 2334/     B9B : 08                  		db 1000b
(1) 2335/     B9C : 08                  		db 1000b
(1) 2336/     B9D : 08                  		db 1000b
(1) 2337/     B9E : 08                  		db 1000b
(1) 2338/     B9F : 0C                  		db 1100b
(1) 2339/     BA0 : 0E                  		db 1110b
(1) 2340/     BA1 : 0E                  		db 1110b
(1) 2341/     BA2 : 0F                  		db 1111b
(1) 2342/     BA3 :                     
(1) 2343/     BA3 :                     ; --------------------------------
(1) 2344/     BA3 :                     ; Input:
(1) 2345/     BA3 :                     ; a - FM id (0-2,4-6)
(1) 2346/     BA3 :                     ;
(1) 2347/     BA3 :                     ; Ouput:
(1) 2348/     BA3 :                     ; hl - instrument data
(1) 2349/     BA3 :                     ;
(1) 2350/     BA3 :                     ; Uses:
(1) 2351/     BA3 :                     ; de
(1) 2352/     BA3 :                     ; --------------------------------
(1) 2353/     BA3 :                     
(1) 2354/     BA3 :                     .get_fmcach:
(1) 2355/     BA3 : 21 9C 17            		ld	hl,fmcach_list
(1) 2356/     BA6 : E6 07               		and	0111b
(1) 2357/     BA8 : 16 00               		ld	d,0
(1) 2358/     BAA : 87                  		add	a,a
(1) 2359/     BAB : 5F                  		ld	e,a
(1) 2360/     BAC : CF                  		rst	8
(1) 2361/     BAD : 19                  		add	hl,de
(1) 2362/     BAE : 7E                  		ld	a,(hl)
(1) 2363/     BAF : 23                  		inc	hl
(1) 2364/     BB0 : 66                  		ld	h,(hl)
(1) 2365/     BB1 : 6F                  		ld	l,a
(1) 2366/     BB2 : C9                  		ret
(1) 2367/     BB3 :                     
(1) 2368/     BB3 :                     ; --------------------------------
(1) 2369/     BB3 :                     ; DAC
(1) 2370/     BB3 :                     ; --------------------------------
(1) 2371/     BB3 :                     
(1) 2372/     BB3 :                     .mk_dac:
(1) 2373/     BB3 : 78                  		ld	a,b
(1) 2374/     BB4 : E6 03               		and	0011b
(1) 2375/     BB6 : 28 21               		jr	z,.dac_proc
(1) 2376/     BB8 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2377/     BBB : B7                  		or	a
(1) 2378/     BBC : C8                  		ret	z
(1) 2379/     BBD : FE FE               		cp	-2
(1) 2380/     BBF : CA CD 0B            		jp	z,.dac_cut
(1) 2381/     BC2 : FE FF               		cp	-1
(1) 2382/     BC4 : CA D3 0B            		jp	z,.dac_off
(1) 2383/     BC7 : CD D9 0B            		call	.dac_proc
(1) 2384/     BCA : C3 09 12            		jp	dac_play
(1) 2385/     BCD :                     .dac_cut:
(1) 2386/     BCD : CD F4 11            		call	dac_off
(1) 2387/     BD0 : C3 FF 0E            		jp	.chnl_ulnk
(1) 2388/     BD3 :                     .dac_off:
(1) 2389/     BD3 : CD F4 11            		call	dac_off
(1) 2390/     BD6 : C3 FF 0E            		jp	.chnl_ulnk
(1) 2391/     BD9 :                     .dac_proc:
(1) 2392/     BD9 : 16 00               		ld	d,0			; Freq index
(1) 2393/     BDB : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2394/     BDE : 21 85 13            		ld	hl,wavFreq_List-(2*36)
(1) 2395/     BE1 : 19                  		add	hl,de
(1) 2396/     BE2 : 7E                  		ld	a,(hl)
(1) 2397/     BE3 : 23                  		inc	hl
(1) 2398/     BE4 : 66                  		ld	h,(hl)
(1) 2399/     BE5 : 6F                  		ld	l,a
(1) 2400/     BE6 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2401/     BE9 : CF                  		rst	8
(1) 2402/     BEA : AF                  		xor	a			; Clear high
(1) 2403/     BEB : 3F                  		ccf				; Clear carry
(1) 2404/     BEC : CB 23               		sla	e			; << 1
(1) 2405/     BEE : 9F                  		sbc	a,a			; Get carry MSB
(1) 2406/     BEF : 57                  		ld	d,a
(1) 2407/     BF0 : 19                  		add	hl,de
(1) 2408/     BF1 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2409/     BF4 : D9                  		exx				; *
(1) 2410/     BF5 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2411/     BF9 : D9                  		exx				; *
(1) 2412/     BFA : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2413/     BFD : 2F                  		cpl				; REVERSE bits
(1) 2414/     BFE : E6 30               		and	00110000b
(1) 2415/     C00 : 07                  		rlca
(1) 2416/     C01 : 07                  		rlca
(1) 2417/     C02 : CF                  		rst	8
(1) 2418/     C03 : 5F                  		ld	e,a
(1) 2419/     C04 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2420/     C06 : C3 D4 11            		jp	fm_send_2
(1) 2421/     C09 :                     
(1) 2422/     C09 :                     ; --------------------------------
(1) 2423/     C09 :                     ; PCM
(1) 2424/     C09 :                     ; --------------------------------
(1) 2425/     C09 :                     
(1) 2426/     C09 :                     .mk_pcm:
(1) 2504/     C09 : C9                  		ret
(1) 2506/     C0A :                     
(1) 2507/     C0A :                     ; --------------------------------
(1) 2508/     C0A :                     ; PWM
(1) 2509/     C0A :                     ; --------------------------------
(1) 2510/     C0A :                     
(1) 2511/     C0A :                     .mk_pwm:
(1) 2593/     C0A : C9                  		ret
(1) 2595/     C0B :                     
(1) 2596/     C0B :                     ; --------------------------------
(1) 2597/     C0B :                     ; SHARED routine
(1) 2598/     C0B :                     
(1) 2599/     C0B :                     .readfreq_pcm:
(1) 2600/     C0B : 21 E7 13            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2601/     C0E : 18 03               		jr	.set_wavfreq
(1) 2602/     C10 :                     .readfreq_pwm:
(1) 2603/     C10 : 21 85 13            		ld	hl,wavFreq_List-(2*36)
(1) 2604/     C13 :                     .set_wavfreq:
(1) 2605/     C13 : 16 00               		ld	d,0			; Freq index
(1) 2606/     C15 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2607/     C18 : 19                  		add	hl,de
(1) 2608/     C19 : 7E                  		ld	a,(hl)
(1) 2609/     C1A : 23                  		inc	hl
(1) 2610/     C1B : 66                  		ld	h,(hl)
(1) 2611/     C1C : 6F                  		ld	l,a
(1) 2612/     C1D : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2613/     C20 : CF                  		rst	8
(1) 2614/     C21 : AF                  		xor	a			; Clear high
(1) 2615/     C22 : 3F                  		ccf				; Clear carry
(1) 2616/     C23 : CB 23               		sla	e			; Get carry MSB
(1) 2617/     C25 : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2618/     C26 : 57                  		ld	d,a
(1) 2619/     C27 : 19                  		add	hl,de
(1) 2620/     C28 : C9                  		ret
(1) 2621/     C29 :                     
(1) 2622/     C29 :                     ; ----------------------------------------
(1) 2623/     C29 :                     ; NEW effect
(1) 2624/     C29 :                     ; ----------------------------------------
(1) 2625/     C29 :                     
(1) 2626/     C29 :                     .effc:
(1) 2627/     C29 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2628/     C2C : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2629/     C2F : 57                  		ld	d,a
(1) 2630/     C30 : CF                  		rst	8
(1) 2631/     C31 : FE 04               		cp	4			; Effect D?
(1) 2632/     C33 : 28 0F               		jr	z,.effc_D
(1) 2633/     C35 : FE 05               		cp	5			; Effect E?
(1) 2634/     C37 : 28 44               		jr	z,.effc_E
(1) 2635/     C39 : FE 06               		cp	6			; Effect F?
(1) 2636/     C3B : 28 4F               		jr	z,.effc_F
(1) 2637/     C3D : CF                  		rst	8
(1) 2638/     C3E : FE 18               		cp	24			; Effect X?
(1) 2639/     C40 : CA 9D 0C            		jp	z,.effc_X
(1) 2640/     C43 : C9                  		ret
(1) 2641/     C44 :                     
(1) 2642/     C44 :                     ; ----------------------------------------
(1) 2643/     C44 :                     ; Effect D: Volume slide up/down
(1) 2644/     C44 :                     ;
(1) 2645/     C44 :                     ; 00h - DON'T USE HERE
(1) 2646/     C44 :                     ;       (Original: Keep effect)
(1) 2647/     C44 :                     ; 0xh - Slide down normal
(1) 2648/     C44 :                     ; Fxh - Slide down fine
(1) 2649/     C44 :                     ; xFh - Slide up normal
(1) 2650/     C44 :                     ; x0h - Slide up fine
(1) 2651/     C44 :                     ; ----------------------------------------
(1) 2652/     C44 :                     
(1) 2653/     C44 :                     .effc_D:
(1) 2654/     C44 : 7B                  		ld	a,e
(1) 2655/     C45 : 0F                  		rrca
(1) 2656/     C46 : 0F                  		rrca
(1) 2657/     C47 : 0F                  		rrca
(1) 2658/     C48 : 0F                  		rrca
(1) 2659/     C49 : E6 0F               		and	0Fh
(1) 2660/     C4B : 4F                  		ld	c,a
(1) 2661/     C4C :                     	; e - DOWN value: ????dddd
(1) 2662/     C4C :                     	; c - UP value:   0000uuuu
(1) 2663/     C4C :                     
(1) 2664/     C4C : 7B                  		ld	a,e
(1) 2665/     C4D : B7                  		or	a
(1) 2666/     C4E : C8                  		ret	z
(1) 2667/     C4F : E6 F0               		and	0F0h		; 0Xh
(1) 2668/     C51 : 28 1D               		jr	z,.D_down
(1) 2669/     C53 : FE F0               		cp	0F0h		; FXh
(1) 2670/     C55 : 28 14               		jr	z,.D_downhf
(1) 2671/     C57 : 7B                  		ld	a,e
(1) 2672/     C58 : E6 0F               		and	00Fh		; X0h
(1) 2673/     C5A : 28 06               		jr	z,.D_up
(1) 2674/     C5C : FE 0F               		cp	00Fh		; XFh
(1) 2675/     C5E : C0                  		ret	nz
(1) 2676/     C5F :                     ; 		jr	z,.D_uphf
(1) 2677/     C5F :                     ; Go UP
(1) 2678/     C5F :                     .D_uphf:
(1) 2679/     C5F : 79                  		ld	a,c
(1) 2680/     C60 : 18 02               		jr	.setefU_D
(1) 2681/     C62 :                     .D_up:
(1) 2682/     C62 : 79                  		ld	a,c
(1) 2683/     C63 : 87                  		add	a,a
(1) 2684/     C64 :                     .setefU_D:
(1) 2685/     C64 : 5F                  		ld	e,a
(1) 2686/     C65 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2687/     C68 : 93                  		sub	a,e
(1) 2688/     C69 : 18 0E               		jr	.setef_mcD
(1) 2689/     C6B :                     ; Go DOWN
(1) 2690/     C6B :                     .D_downhf:
(1) 2691/     C6B : 7B                  		ld	a,e
(1) 2692/     C6C : E6 0F               		and	0Fh
(1) 2693/     C6E : 18 04               		jr	.setef_D
(1) 2694/     C70 :                     .D_down:
(1) 2695/     C70 : 7B                  		ld	a,e
(1) 2696/     C71 : E6 0F               		and	0Fh
(1) 2697/     C73 : 87                  		add	a,a
(1) 2698/     C74 :                     .setef_D:
(1) 2699/     C74 : 5F                  		ld	e,a
(1) 2700/     C75 : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2701/     C78 : 83                  		add	a,e
(1) 2702/     C79 :                     ; 		jr	.setef_mcD
(1) 2703/     C79 :                     
(1) 2704/     C79 :                     ; Write slide
(1) 2705/     C79 :                     .setef_mcD:
(1) 2706/     C79 : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2707/     C7C : C9                  		ret
(1) 2708/     C7D :                     
(1) 2709/     C7D :                     ; ----------------------------------------
(1) 2710/     C7D :                     ; Effect E
(1) 2711/     C7D :                     ; ----------------------------------------
(1) 2712/     C7D :                     
(1) 2713/     C7D :                     .effc_E:
(1) 2714/     C7D : 7B                  		ld	a,e
(1) 2715/     C7E : E6 F0               		and	0F0h
(1) 2716/     C80 : FE F0               		cp	0F0h
(1) 2717/     C82 : C8                  		ret	z
(1) 2718/     C83 : FE E0               		cp	0E0h
(1) 2719/     C85 : C8                  		ret	z
(1) 2720/     C86 : CF                  		rst	8
(1) 2721/     C87 : 7B                  		ld	a,e
(1) 2722/     C88 : ED 44               		neg	a
(1) 2723/     C8A : 18 0B               		jr	.wrt_EF
(1) 2724/     C8C :                     
(1) 2725/     C8C :                     ; ----------------------------------------
(1) 2726/     C8C :                     ; Effect F
(1) 2727/     C8C :                     ; ----------------------------------------
(1) 2728/     C8C :                     
(1) 2729/     C8C :                     .effc_F:
(1) 2730/     C8C : 7B                  		ld	a,e
(1) 2731/     C8D : E6 F0               		and	0F0h
(1) 2732/     C8F : FE F0               		cp	0F0h
(1) 2733/     C91 : C8                  		ret	z
(1) 2734/     C92 : FE E0               		cp	0E0h
(1) 2735/     C94 : C8                  		ret	z
(1) 2736/     C95 : CF                  		rst	8
(1) 2737/     C96 : 7B                  		ld	a,e
(1) 2738/     C97 :                     .wrt_EF:
(1) 2739/     C97 : 87                  		add	a,a
(1) 2740/     C98 : 87                  		add	a,a
(1) 2741/     C99 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2742/     C9C : C9                  		ret
(1) 2743/     C9D :                     
(1) 2744/     C9D :                     ; ----------------------------------------
(1) 2745/     C9D :                     ; Effect X
(1) 2746/     C9D :                     ;
(1) 2747/     C9D :                     ; Common panning values:
(1) 2748/     C9D :                     ;  00h LEFT
(1) 2749/     C9D :                     ;  80h MIDDLE
(1) 2750/     C9D :                     ; 0FFh RIGHT
(1) 2751/     C9D :                     ; ----------------------------------------
(1) 2752/     C9D :                     
(1) 2753/     C9D :                     .effc_X:
(1) 2754/     C9D : 16 00               		ld	d,0
(1) 2755/     C9F : 7E                  		ld	a,(hl)
(1) 2756/     CA0 : E6 F0               		and	11110000b
(1) 2757/     CA2 : FE 80               		cp	80h		; PSG?
(1) 2758/     CA4 : 28 19               		jr	z,.res_pan
(1) 2759/     CA6 : FE 90               		cp	90h		; PSGN?
(1) 2760/     CA8 : 28 15               		jr	z,.res_pan
(1) 2761/     CAA : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2762/     CAC : CC C9 0C            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2763/     CAF :                     
(1) 2764/     CAF :                     	; ----------------------------------------
(1) 2765/     CAF :                     	; Common panning bits: %00LR0000
(1) 2766/     CAF :                     	; (REVERSE: 0-on 1-off)
(1) 2767/     CAF : CF                  		rst	8
(1) 2768/     CB0 : E5                  		push	hl
(1) 2769/     CB1 : 21 EC 0C            		ld	hl,.comn_panlist
(1) 2770/     CB4 : 7B                  		ld	a,e
(1) 2771/     CB5 : 07                  		rlca
(1) 2772/     CB6 : 07                  		rlca
(1) 2773/     CB7 : 07                  		rlca
(1) 2774/     CB8 : E6 07               		and	0111b
(1) 2775/     CBA :                     ; 		ld	d,0
(1) 2776/     CBA : 5F                  		ld	e,a
(1) 2777/     CBB : CF                  		rst	8
(1) 2778/     CBC : 19                  		add	hl,de
(1) 2779/     CBD : 56                  		ld	d,(hl)
(1) 2780/     CBE : E1                  		pop	hl
(1) 2781/     CBF :                     .res_pan:
(1) 2782/     CBF : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2783/     CC2 : E6 CF               		and	11001111b
(1) 2784/     CC4 : B2                  		or	d
(1) 2785/     CC5 : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2786/     CC8 : C9                  		ret
(1) 2787/     CC9 :                     
(1) 2788/     CC9 :                     	; ----------------------------------------
(1) 2789/     CC9 :                     	; MCD panning
(1) 2790/     CC9 :                     .pan_mcd:
(1) 2791/     CC9 : E5                  		push	hl
(1) 2792/     CCA : D5                  		push	de
(1) 2793/     CCB : 16 00               		ld	d,0
(1) 2794/     CCD : 21 F4 0C            		ld	hl,.pcm_panlist
(1) 2795/     CD0 : 7B                  		ld	a,e
(1) 2796/     CD1 : E6 F8               		and	0F8h
(1) 2797/     CD3 : 0F                  		rrca
(1) 2798/     CD4 : 0F                  		rrca
(1) 2799/     CD5 : 0F                  		rrca
(1) 2800/     CD6 : 5F                  		ld	e,a
(1) 2801/     CD7 : 19                  		add	hl,de
(1) 2802/     CD8 : 7E                  		ld	a,(hl)
(1) 2803/     CD9 : 21 C7 14            		ld	hl,pcmcom+32
(1) 2804/     CDC : 16 00               		ld	d,0
(1) 2805/     CDE : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2806/     CE1 : 19                  		add	hl,de
(1) 2807/     CE2 : 2F                  		cpl
(1) 2808/     CE3 : 77                  		ld	(hl),a
(1) 2809/     CE4 : D1                  		pop	de
(1) 2810/     CE5 : E1                  		pop	hl
(1) 2811/     CE6 : 3E 01               		ld	a,1
(1) 2812/     CE8 : 32 A3 17            		ld	(mcdUpd),a
(1) 2813/     CEB : C9                  		ret
(1) 2814/     CEC :                     
(1) 2815/     CEC :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2816/     CEC :                     ; 00LR0000b
(1) 2817/     CEC :                     .comn_panlist:
(1) 2818/     CEC : 10                  		db 00010000b
(1) 2819/     CED : 10                  		db 00010000b
(1) 2820/     CEE : 10                  		db 00010000b
(1) 2821/     CEF : 00                  		db 00000000b
(1) 2822/     CF0 : 00                  		db 00000000b
(1) 2823/     CF1 : 20                  		db 00100000b
(1) 2824/     CF2 : 20                  		db 00100000b
(1) 2825/     CF3 : 20                  		db 00100000b
(1) 2826/     CF4 :                     
(1) 2827/     CF4 :                     ; REVERSE OUTPUT BITS
(1) 2828/     CF4 :                     ; RRRR | LLLL
(1) 2829/     CF4 :                     .pcm_panlist:
(1) 2830/     CF4 : F0                  		db 0F0h	; 00h
(1) 2831/     CF5 : E0                  		db 0E0h
(1) 2832/     CF6 : D0                  		db 0D0h	; 10h
(1) 2833/     CF7 : C0                  		db 0C0h
(1) 2834/     CF8 : B0                  		db 0B0h	; 20h
(1) 2835/     CF9 : A0                  		db 0A0h
(1) 2836/     CFA : 90                  		db 090h	; 30h
(1) 2837/     CFB : 80                  		db 080h
(1) 2838/     CFC : 70                  		db 070h	; 40h
(1) 2839/     CFD : 60                  		db 060h
(1) 2840/     CFE : 50                  		db 050h	; 50h
(1) 2841/     CFF : 40                  		db 040h
(1) 2842/     D00 : 30                  		db 030h	; 60h
(1) 2843/     D01 : 20                  		db 020h
(1) 2844/     D02 : 10                  		db 010h	; 70h
(1) 2845/     D03 : 00                  		db 000h
(1) 2846/     D04 : 00                  		db 000h ; 80h
(1) 2847/     D05 : 01                  		db 001h
(1) 2848/     D06 : 02                  		db 002h ; 90h
(1) 2849/     D07 : 03                  		db 003h
(1) 2850/     D08 : 04                  		db 004h ; A0h
(1) 2851/     D09 : 05                  		db 005h
(1) 2852/     D0A : 06                  		db 006h ; B0h
(1) 2853/     D0B : 07                  		db 007h
(1) 2854/     D0C : 08                  		db 008h ; C0h
(1) 2855/     D0D : 09                  		db 009h
(1) 2856/     D0E : 0A                  		db 00Ah ; D0h
(1) 2857/     D0F : 0B                  		db 00Bh
(1) 2858/     D10 : 0C                  		db 00Ch ; E0h
(1) 2859/     D11 : 0D                  		db 00Dh
(1) 2860/     D12 : 0E                  		db 00Eh ; F0h
(1) 2861/     D13 : 0F                  		db 00Fh
(1) 2862/     D14 :                     
(1) 2863/     D14 :                     ; ----------------------------------------
(1) 2864/     D14 :                     ; NEW volume
(1) 2865/     D14 :                     ; ----------------------------------------
(1) 2866/     D14 :                     
(1) 2867/     D14 :                     .volu:
(1) 2868/     D14 : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2869/     D17 : D6 40               		sub	a,64
(1) 2870/     D19 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2871/     D1C : C9                  		ret
(1) 2872/     D1D :                     
(1) 2873/     D1D :                     ; ----------------------------------------
(1) 2874/     D1D :                     ; NEW instrument
(1) 2875/     D1D :                     ; ----------------------------------------
(1) 2876/     D1D :                     
(1) 2877/     D1D :                     .inst:
(1) 2878/     D1D : 7E                  		ld	a,(hl)
(1) 2879/     D1E : E6 F0               		and	11110000b
(1) 2880/     D20 : FE 80               		cp	080h
(1) 2881/     D22 : 28 24               		jr	z,.ins_psg
(1) 2882/     D24 : FE 90               		cp	090h
(1) 2883/     D26 : 28 1A               		jr	z,.ins_psgn
(1) 2884/     D28 : FE A0               		cp	0A0h
(1) 2885/     D2A : 28 52               		jr	z,.ins_fm
(1) 2886/     D2C : CF                  		rst	8
(1) 2887/     D2D : FE B0               		cp	0B0h
(1) 2888/     D2F : 28 4D               		jr	z,.ins_fm
(1) 2889/     D31 : FE C0               		cp	0C0h
(1) 2890/     D33 : CA DA 0D            		jp	z,.ins_dac
(1) 2891/     D36 : FE D0               		cp	0D0h
(1) 2892/     D38 : CA 2E 0E            		jp	z,.ins_pcm
(1) 2893/     D3B : FE E0               		cp	0E0h
(1) 2894/     D3D : CA 6B 0E            		jp	z,.ins_pwm
(1) 2895/     D40 : CF                  		rst	8
(1) 2896/     D41 :                     .invl_ins:
(1) 2897/     D41 : C9                  		ret
(1) 2898/     D42 :                     
(1) 2899/     D42 :                     ; ----------------------------------------
(1) 2900/     D42 :                     ; PSG
(1) 2901/     D42 :                     
(1) 2902/     D42 :                     .ins_psgn:
(1) 2903/     D42 : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2904/     D43 : E6 07               		and	0111b
(1) 2905/     D45 : 32 2F 00            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2906/     D48 :                     .ins_psg:
(1) 2907/     D48 : CF                  		rst	8
(1) 2908/     D49 : DD E5               		push	ix
(1) 2909/     D4B : E5                  		push	hl
(1) 2910/     D4C : 23                  		inc	hl		; Skip ID
(1) 2911/     D4D : DD 21 1F 15         		ld	ix,psgcom	; Read psg control
(1) 2912/     D51 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2913/     D54 : 16 00               		ld	d,0
(1) 2914/     D56 : DD 19               		add	ix,de
(1) 2915/     D58 : 7E                  		ld	a,(hl)
(1) 2916/     D59 : CF                  		rst	8
(1) 2917/     D5A : 23                  		inc	hl
(1) 2918/     D5B : 7E                  		ld	a,(hl)
(1) 2919/     D5C : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2920/     D5F : 23                  		inc	hl
(1) 2921/     D60 : 7E                  		ld	a,(hl)
(1) 2922/     D61 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2923/     D64 : 23                  		inc	hl
(1) 2924/     D65 : 7E                  		ld	a,(hl)
(1) 2925/     D66 : CF                  		rst	8
(1) 2926/     D67 : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2927/     D6A : 23                  		inc	hl
(1) 2928/     D6B : 7E                  		ld	a,(hl)
(1) 2929/     D6C : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2930/     D6F : 23                  		inc	hl
(1) 2931/     D70 : 7E                  		ld	a,(hl)
(1) 2932/     D71 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2933/     D74 : 23                  		inc	hl
(1) 2934/     D75 : 7E                  		ld	a,(hl)
(1) 2935/     D76 : CF                  		rst	8
(1) 2936/     D77 : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2937/     D7A : E1                  		pop	hl
(1) 2938/     D7B : DD E1               		pop	ix
(1) 2939/     D7D : C9                  		ret
(1) 2940/     D7E :                     
(1) 2941/     D7E :                     ; ----------------------------------------
(1) 2942/     D7E :                     ; FM/FM3
(1) 2943/     D7E :                     
(1) 2944/     D7E :                     .ins_fm:
(1) 2945/     D7E : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2946/     D81 : E6 07               		and	0111b
(1) 2947/     D83 : 16 00               		ld	d,0
(1) 2948/     D85 : 87                  		add	a,a
(1) 2949/     D86 : 5F                  		ld	e,a
(1) 2950/     D87 : DD E5               		push	ix
(1) 2951/     D89 : E5                  		push	hl
(1) 2952/     D8A : C5                  		push	bc
(1) 2953/     D8B : DD 21 9C 17         		ld	ix,fmcach_list
(1) 2954/     D8F : DD 19               		add	ix,de
(1) 2955/     D91 : CF                  		rst	8
(1) 2956/     D92 : DD 5E 00            		ld	e,(ix)
(1) 2957/     D95 : DD 23               		inc	ix
(1) 2958/     D97 : DD 56 00            		ld	d,(ix)
(1) 2959/     D9A :                     
(1) 2960/     D9A : DD 21 4B 16         		ld	ix,fmlist_rsave
(1) 2961/     D9E : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2962/     DA1 : 87                  		add	a,a
(1) 2963/     DA2 : 87                  		add	a,a
(1) 2964/     DA3 : 06 00               		ld	b,0
(1) 2965/     DA5 : 4F                  		ld	c,a
(1) 2966/     DA6 : DD 09               		add	ix,bc
(1) 2967/     DA8 : 23                  		inc	hl			; Skip id and pitch
(1) 2968/     DA9 : 23                  		inc	hl
(1) 2969/     DAA : 46                  		ld	b,(hl)
(1) 2970/     DAB : 23                  		inc	hl
(1) 2971/     DAC : 7E                  		ld	a,(hl)
(1) 2972/     DAD : 23                  		inc	hl
(1) 2973/     DAE : 6E                  		ld	l,(hl)
(1) 2974/     DAF : 67                  		ld	h,a
(1) 2975/     DB0 :                     	;   ix - last MID and LOW bytes
(1) 2976/     DB0 :                     	;   de - current FM cache
(1) 2977/     DB0 :                     	; b,hl - 24-bit ROM address
(1) 2978/     DB0 : DD 7E 02            		ld	a,(ix+2)
(1) 2979/     DB3 : B8                  		cp	b
(1) 2980/     DB4 : 20 0E               		jr	nz,.new_romdat
(1) 2981/     DB6 : CF                  		rst	8
(1) 2982/     DB7 : DD 7E 01            		ld	a,(ix+1)
(1) 2983/     DBA : BC                  		cp	h
(1) 2984/     DBB : 20 07               		jr	nz,.new_romdat
(1) 2985/     DBD : DD 7E 00            		ld	a,(ix)
(1) 2986/     DC0 : BD                  		cp	l
(1) 2987/     DC1 : 28 12               		jr	z,.same_patch
(1) 2988/     DC3 : CF                  		rst	8
(1) 2989/     DC4 :                     .new_romdat:
(1) 2990/     DC4 : DD 70 02            		ld	(ix+2),b
(1) 2991/     DC7 : DD 74 01            		ld	(ix+1),h
(1) 2992/     DCA : DD 75 00            		ld	(ix),l
(1) 2993/     DCD : 78                  		ld	a,b
(1) 2994/     DCE : 01 28 00            		ld	bc,28h			; <- size
(1) 2995/     DD1 : CD A9 0F            		call	readRom			; *** ROM ACCESS ***
(1) 2996/     DD4 : E7                  		rst	20h
(1) 2997/     DD5 :                     .same_patch:
(1) 2998/     DD5 : C1                  		pop	bc
(1) 2999/     DD6 : E1                  		pop	hl
(1) 3000/     DD7 : DD E1               		pop	ix
(1) 3001/     DD9 : C9                  		ret
(1) 3002/     DDA :                     
(1) 3003/     DDA :                     ; ----------------------------------------
(1) 3004/     DDA :                     
(1) 3005/     DDA :                     .ins_dac:
(1) 3006/     DDA : E5                  		push	hl
(1) 3007/     DDB : C5                  		push	bc
(1) 3008/     DDC : CD F4 11            		call	dac_off
(1) 3009/     DDF : 7E                  		ld	a,(hl)
(1) 3010/     DE0 : E6 0F               		and	00001111b
(1) 3011/     DE2 : 32 F5 1C            		ld	(wave_Flags),a
(1) 3012/     DE5 : CF                  		rst	8
(1) 3013/     DE6 : 23                  		inc	hl
(1) 3014/     DE7 : 23                  		inc	hl
(1) 3015/     DE8 : 5E                  		ld	e,(hl)
(1) 3016/     DE9 : 23                  		inc	hl
(1) 3017/     DEA : 7E                  		ld	a,(hl)
(1) 3018/     DEB : 23                  		inc	hl
(1) 3019/     DEC : 6E                  		ld	l,(hl)
(1) 3020/     DED : 67                  		ld	h,a
(1) 3021/     DEE : E5                  		push	hl
(1) 3022/     DEF : 7B                  		ld	a,e
(1) 3023/     DF0 : 01 06 00            		ld	bc,6		; Skip head
(1) 3024/     DF3 : 09                  		add	hl,bc
(1) 3025/     DF4 : CE 00               		adc	a,0
(1) 3026/     DF6 : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 3027/     DF9 : 32 EC 1C            		ld	(wave_Start+2),a
(1) 3028/     DFC : E1                  		pop	hl
(1) 3029/     DFD : 7B                  		ld	a,e
(1) 3030/     DFE : 11 C0 17            		ld	de,sampleHead
(1) 3031/     E01 : 01 06 00            		ld	bc,6
(1) 3032/     E04 : D5                  		push	de
(1) 3033/     E05 : CF                  		rst	8
(1) 3034/     E06 : CD A9 0F            		call	readRom	; *** ROM ACCESS ***
(1) 3035/     E09 : E1                  		pop	hl
(1) 3036/     E0A :                     	; hl - temporal header
(1) 3037/     E0A : 5E                  		ld	e,(hl)
(1) 3038/     E0B : 23                  		inc	hl
(1) 3039/     E0C : 56                  		ld	d,(hl)
(1) 3040/     E0D : 23                  		inc	hl
(1) 3041/     E0E : 7E                  		ld	a,(hl)
(1) 3042/     E0F : 23                  		inc	hl
(1) 3043/     E10 : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3044/     E14 : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3045/     E17 : 5E                  		ld	e,(hl)
(1) 3046/     E18 : 23                  		inc	hl
(1) 3047/     E19 : CF                  		rst	8
(1) 3048/     E1A : 56                  		ld	d,(hl)
(1) 3049/     E1B : 23                  		inc	hl
(1) 3050/     E1C : 7E                  		ld	a,(hl)
(1) 3051/     E1D : 23                  		inc	hl
(1) 3052/     E1E : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3053/     E22 : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3054/     E25 : 11 06 28            		ld	de,2806h	; keys off
(1) 3055/     E28 : CD C9 11            		call	fm_send_1
(1) 3056/     E2B : C1                  		pop	bc
(1) 3057/     E2C : E1                  		pop	hl
(1) 3058/     E2D :                     ; .same_dac:
(1) 3059/     E2D : C9                  		ret
(1) 3060/     E2E :                     
(1) 3061/     E2E :                     ; ----------------------------------------
(1) 3062/     E2E :                     
(1) 3063/     E2E :                     .ins_pcm:
(1) 3064/     E2E : DD E5               		push	ix
(1) 3065/     E30 : E5                  		push	hl
(1) 3066/     E31 : C5                  		push	bc
(1) 3067/     E32 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3068/     E33 : E6 01               		and	00000001b	; Read loop bit
(1) 3069/     E35 : 0F                  		rrca			; Move to MSB
(1) 3070/     E36 : CF                  		rst	8
(1) 3071/     E37 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3072/     E38 : 23                  		inc	hl
(1) 3073/     E39 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3074/     E3A : B3                  		or	e
(1) 3075/     E3B : 5F                  		ld	e,a
(1) 3076/     E3C : 23                  		inc	hl
(1) 3077/     E3D : 7E                  		ld	a,(hl)
(1) 3078/     E3E : 23                  		inc	hl
(1) 3079/     E3F : 6E                  		ld	l,(hl)
(1) 3080/     E40 : 67                  		ld	h,a
(1) 3081/     E41 :                     	; d    - Loop enable bit
(1) 3082/     E41 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3083/     E41 : DD 21 A7 14         		ld	ix,pcmcom
(1) 3084/     E45 : 06 00               		ld	b,0
(1) 3085/     E47 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3086/     E4A : DD 09               		add	ix,bc
(1) 3087/     E4C : 01 28 00            		ld	bc,40		; Go to 40
(1) 3088/     E4F : DD 09               		add	ix,bc
(1) 3089/     E51 : 01 08 00            		ld	bc,8
(1) 3090/     E54 : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3091/     E57 : DD 09               		add	ix,bc
(1) 3092/     E59 : DD 74 00            		ld	(ix),h
(1) 3093/     E5C : DD 09               		add	ix,bc
(1) 3094/     E5E : DD 75 00            		ld	(ix),l
(1) 3095/     E61 : C1                  		pop	bc
(1) 3096/     E62 : E1                  		pop	hl
(1) 3097/     E63 : DD E1               		pop	ix
(1) 3098/     E65 : 3E 01               		ld	a,1
(1) 3099/     E67 : 32 A3 17            		ld	(mcdUpd),a
(1) 3100/     E6A : C9                  		ret
(1) 3101/     E6B :                     
(1) 3102/     E6B :                     ; ----------------------------------------
(1) 3103/     E6B :                     
(1) 3104/     E6B :                     .ins_pwm:
(1) 3105/     E6B : DD E5               		push	ix
(1) 3106/     E6D : E5                  		push	hl
(1) 3107/     E6E : C5                  		push	bc
(1) 3108/     E6F : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3109/     E70 : E6 03               		and	00000011b
(1) 3110/     E72 : 0F                  		rrca
(1) 3111/     E73 : 0F                  		rrca
(1) 3112/     E74 : 4F                  		ld	c,a
(1) 3113/     E75 : CF                  		rst	8
(1) 3114/     E76 : 23                  		inc	hl		; Skip ID and Pitch
(1) 3115/     E77 : 23                  		inc	hl
(1) 3116/     E78 : 56                  		ld	d,(hl)
(1) 3117/     E79 : 23                  		inc	hl
(1) 3118/     E7A : 5E                  		ld	e,(hl)
(1) 3119/     E7B : 23                  		inc	hl
(1) 3120/     E7C : 7E                  		ld	a,(hl)
(1) 3121/     E7D : 23                  		inc	hl
(1) 3122/     E7E : 6E                  		ld	l,(hl)
(1) 3123/     E7F : 67                  		ld	h,a
(1) 3124/     E80 : 79                  		ld	a,c
(1) 3125/     E81 : B2                  		or	d
(1) 3126/     E82 : 57                  		ld	d,a
(1) 3127/     E83 : CF                  		rst	8
(1) 3128/     E84 :                     	; de,hl - 32-bit PWM pointer
(1) 3129/     E84 : DD 21 E7 14         		ld	ix,pwmcom
(1) 3130/     E88 : 06 00               		ld	b,0
(1) 3131/     E8A : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3132/     E8D : DD 09               		add	ix,bc
(1) 3133/     E8F : 01 18 00            		ld	bc,24
(1) 3134/     E92 : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3135/     E94 : 01 08 00            		ld	bc,8
(1) 3136/     E97 : DD 72 00            		ld	(ix),d
(1) 3137/     E9A : DD 09               		add	ix,bc
(1) 3138/     E9C : DD 73 00            		ld	(ix),e
(1) 3139/     E9F : DD 09               		add	ix,bc
(1) 3140/     EA1 : DD 74 00            		ld	(ix),h
(1) 3141/     EA4 : DD 09               		add	ix,bc
(1) 3142/     EA6 : DD 75 00            		ld	(ix),l
(1) 3143/     EA9 : C1                  		pop	bc
(1) 3144/     EAA : E1                  		pop	hl
(1) 3145/     EAB : DD E1               		pop	ix
(1) 3146/     EAD : 3E 01               		ld	a,1
(1) 3147/     EAF : 32 A2 17            		ld	(marsUpd),a
(1) 3148/     EB2 : C9                  		ret
(1) 3149/     EB3 :                     
(1) 3150/     EB3 :                     ; ----------------------------------------
(1) 3151/     EB3 :                     ; NEW note
(1) 3152/     EB3 :                     ; ----------------------------------------
(1) 3153/     EB3 :                     
(1) 3154/     EB3 :                     .note:
(1) 3155/     EB3 : 78                  		ld	a,b			; Volume bit?
(1) 3156/     EB4 : E6 04               		and	0100b
(1) 3157/     EB6 : 20 05               		jr	nz,.fm_hasvol
(1) 3158/     EB8 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3159/     EBC : CF                  		rst	8
(1) 3160/     EBD :                     .fm_hasvol:
(1) 3161/     EBD : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3162/     EC0 : 4F                  		ld	c,a
(1) 3163/     EC1 : FE FF               		cp	-1
(1) 3164/     EC3 : C8                  		ret	z
(1) 3165/     EC4 : FE FE               		cp	-2
(1) 3166/     EC6 : C8                  		ret	z
(1) 3167/     EC7 : CF                  		rst	8
(1) 3168/     EC8 : 7E                  		ld	a,(hl)
(1) 3169/     EC9 : E6 F0               		and	11110000b
(1) 3170/     ECB : FE A0               		cp	0A0h
(1) 3171/     ECD : 28 0B               		jr	z,.n_fm
(1) 3172/     ECF :                     
(1) 3173/     ECF :                     ; --------------------------------
(1) 3174/     ECF :                     
(1) 3175/     ECF :                     .n_indx:
(1) 3176/     ECF : 79                  		ld	a,c
(1) 3177/     ED0 :                     .n_stfreq:
(1) 3178/     ED0 : 23                  		inc	hl			; Skip ID
(1) 3179/     ED1 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3180/     ED2 : 2B                  		dec	hl
(1) 3181/     ED3 : 83                  		add	a,e			; Note + pitch
(1) 3182/     ED4 : CF                  		rst	8
(1) 3183/     ED5 : 87                  		add	a,a			; * 2
(1) 3184/     ED6 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3185/     ED9 : C9                  		ret
(1) 3186/     EDA :                     
(1) 3187/     EDA :                     ; --------------------------------
(1) 3188/     EDA :                     ; FM custom search
(1) 3189/     EDA :                     
(1) 3190/     EDA :                     .n_fm:
(1) 3191/     EDA : 79                  		ld	a,c
(1) 3192/     EDB : 23                  		inc	hl		; Skip ID
(1) 3193/     EDC : 5E                  		ld	e,(hl)		; Read pitch
(1) 3194/     EDD : 2B                  		dec	hl
(1) 3195/     EDE : CF                  		rst	8
(1) 3196/     EDF : 83                  		add	a,e		; Note + pitch
(1) 3197/     EE0 :                     	; Search for octave and note...
(1) 3198/     EE0 : 0E 00               		ld	c,0		; c - octave
(1) 3199/     EE2 : 16 07               		ld	d,7
(1) 3200/     EE4 :                     .get_oct:
(1) 3201/     EE4 : 5F                  		ld	e,a		; e - note
(1) 3202/     EE5 : D6 0C               		sub	12
(1) 3203/     EE7 : FA EE 0E            		jp	m,.fnd_oct
(1) 3204/     EEA : 0C                  		inc	c
(1) 3205/     EEB : 15                  		dec	d
(1) 3206/     EEC : 20 F6               		jr	nz,.get_oct
(1) 3207/     EEE :                     .fnd_oct:
(1) 3208/     EEE : CF                  		rst	8
(1) 3209/     EEF : 7B                  		ld	a,e
(1) 3210/     EF0 : 87                  		add	a,a			; Note * 2
(1) 3211/     EF1 : E6 1F               		and	00011111b
(1) 3212/     EF3 : CB 09               		rrc	c
(1) 3213/     EF5 : CB 09               		rrc	c
(1) 3214/     EF7 : CB 09               		rrc	c
(1) 3215/     EF9 : CF                  		rst	8
(1) 3216/     EFA : B1                  		or	c
(1) 3217/     EFB : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3218/     EFE : C9                  		ret
(1) 3219/     EFF :                     
(1) 3220/     EFF :                     ; ----------------------------------------
(1) 3221/     EFF :                     ; Unlock channel
(1) 3222/     EFF :                     ; ----------------------------------------
(1) 3223/     EFF :                     
(1) 3224/     EFF :                     .chnl_ulnk:
(1) 3225/     EFF : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3226/     F02 : CF                  		rst	8
(1) 3227/     F03 : FD E5               		push	iy
(1) 3228/     F05 : E1                  		pop	hl
(1) 3229/     F06 :                     
(1) 3230/     F06 :                     ; ----------------------------------------
(1) 3231/     F06 :                     ; Reset all table
(1) 3232/     F06 :                     ;
(1) 3233/     F06 :                     ; Input:
(1) 3234/     F06 :                     ; hl - Channel table
(1) 3235/     F06 :                     ; d  - Silence chip
(1) 3236/     F06 :                     ;
(1) 3237/     F06 :                     ; Uses:
(1) 3238/     F06 :                     ; b,de,hl
(1) 3239/     F06 :                     ; ----------------------------------------
(1) 3240/     F06 :                     
(1) 3241/     F06 :                     tblz_clear:
(1) 3242/     F06 : 06 0E               		ld	b,MAX_TBLSIZE-4
(1) 3243/     F08 : AF                  		xor	a
(1) 3244/     F09 : 77                  		ld	(hl),a			; 0 - Delete link
(1) 3245/     F0A : 23                  		inc	hl
(1) 3246/     F0B : 77                  		ld	(hl),a
(1) 3247/     F0C : 23                  		inc	hl
(1) 3248/     F0D : 72                  		ld	(hl),d			; 2 - Write silence request
(1) 3249/     F0E : 23                  		inc	hl
(1) 3250/     F0F : 23                  		inc	hl			; 3 - skip ID
(1) 3251/     F10 :                     .clr_all:
(1) 3252/     F10 : 77                  		ld	(hl),a
(1) 3253/     F11 : 23                  		inc	hl
(1) 3254/     F12 : 10 FC               		djnz	.clr_all
(1) 3255/     F14 : C9                  		ret
(1) 3256/     F15 :                     
(1) 3257/     F15 :                     ; ============================================================
(1) 3258/     F15 :                     ; --------------------------------------------------------
(1) 3259/     F15 :                     ; Communication with the SCD and 32X
(1) 3260/     F15 :                     ;
(1) 3261/     F15 :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3262/     F15 :                     ;    | Uses: commM,comm18-1F
(1) 3263/     F15 :                     ;    |
(1) 3264/     F15 :                     ; 32X: Interrupts Slave SH2
(1) 3265/     F15 :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3266/     F15 :                     ;    | two bits of comm14
(1) 3267/     F15 :                     ; --------------------------------------------------------
(1) 3268/     F15 :                     
(1) 3269/     F15 :                     zmars_send:
(1) 3270/     F15 :                     	; ----------------------------------------
(1) 3271/     F15 :                     	; Send PCM table
(1) 3357/     F15 :                     	; ----------------------------------------
(1) 3358/     F15 :                     	; Send PWM table
(1) 3445/     F15 : C9                  		ret
(1) 3446/     F16 :                     
(1) 3447/     F16 :                     ; --------------------------------------------------------
(1) 3448/     F16 :                     ; Set bank to $A10000 area
(1) 3464/     F16 :                     
(1) 3465/     F16 :                     ; ====================================================================
(1) 3466/     F16 :                     ; ----------------------------------------------------------------
(1) 3467/     F16 :                     ; Subroutines
(1) 3468/     F16 :                     ; ----------------------------------------------------------------
(1) 3469/     F16 :                     
(1) 3470/     F16 :                     ; --------------------------------------------------------
(1) 3471/     F16 :                     ; Init sound engine
(1) 3472/     F16 :                     ; --------------------------------------------------------
(1) 3473/     F16 :                     
(1) 3474/     F16 :                     gema_init:
(1) 3475/     F16 : CD 03 13            		call	gema_lastbank		; Set last bank slot, solves problem with 32X
(1) 3476/     F19 : CD F4 11            		call	dac_off
(1) 3477/     F1C : AF                  		xor	a
(1) 3478/     F1D : 32 A2 17            		ld	(marsUpd),a
(1) 3479/     F20 : 32 A3 17            		ld	(mcdUpd),a
(1) 3480/     F23 : 32 87 1F            		ld	(cdRamLen),a
(1) 3481/     F26 : FD 21 CE 17         		ld	iy,nikona_BuffList
(1) 3482/     F2A : 0E 01               		ld	c,1			; Start at this priority
(1) 3483/     F2C :                     .setup_list:
(1) 3484/     F2C : FD 7E 00            		ld	a,(iy)
(1) 3485/     F2F : FE FF               		cp	-1
(1) 3486/     F31 : 28 24               		jr	z,.end_setup
(1) 3487/     F33 : FD 23               		inc	iy
(1) 3488/     F35 : 6F                  		ld	l,a
(1) 3489/     F36 : FD 66 00            		ld	h,(iy)
(1) 3490/     F39 : E5                  		push	hl
(1) 3491/     F3A : DD E1               		pop	ix
(1) 3492/     F3C : DD 71 14            		ld	(ix+seq_Priority),c
(1) 3493/     F3F : DD 36 01 FF         		ld	(ix+seq_Num),-1	; Reset sequence ID
(1) 3494/     F43 : FD 23               		inc	iy
(1) 3495/     F45 :                     	; iy - src
(1) 3496/     F45 :                     	; hl - dst
(1) 3497/     F45 : 11 04 00            		ld	de,seq_Blocks
(1) 3498/     F48 : 19                  		add	hl,de
(1) 3499/     F49 : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3500/     F4B :                     .st_copy:
(1) 3501/     F4B : FD 7E 00            		ld	a,(iy)
(1) 3502/     F4E : 77                  		ld	(hl),a
(1) 3503/     F4F : FD 23               		inc	iy
(1) 3504/     F51 : 23                  		inc	hl
(1) 3505/     F52 : 10 F7               		djnz	.st_copy
(1) 3506/     F54 : 0C                  		inc	c
(1) 3507/     F55 : 18 D5               		jr	.setup_list
(1) 3508/     F57 :                     .end_setup:
(1) 3509/     F57 :                     
(1) 3510/     F57 : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3511/     F5A : CD C9 11            		call	fm_send_1
(1) 3512/     F5D : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3513/     F60 : CD C9 11            		call	fm_send_1
(1) 3514/     F63 :                     ; 		ld	de,2800h
(1) 3515/     F63 : 14                  		inc	d		; FM KEYS off
(1) 3516/     F64 : CD C9 11            		call	fm_send_1
(1) 3517/     F67 : 1C                  		inc	e
(1) 3518/     F68 : CD C9 11            		call	fm_send_1
(1) 3519/     F6B : 1C                  		inc	e
(1) 3520/     F6C : CD C9 11            		call	fm_send_1
(1) 3521/     F6F : 1C                  		inc	e
(1) 3522/     F70 : 1C                  		inc	e
(1) 3523/     F71 : CD C9 11            		call	fm_send_1
(1) 3524/     F74 : 1C                  		inc	e
(1) 3525/     F75 : CD C9 11            		call	fm_send_1
(1) 3526/     F78 : 1C                  		inc	e
(1) 3527/     F79 : CD C9 11            		call	fm_send_1
(1) 3528/     F7C : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3529/     F7F : 36 9F               		ld	(hl),09Fh
(1) 3530/     F81 : 36 BF               		ld	(hl),0BFh
(1) 3531/     F83 : 36 DF               		ld	(hl),0DFh
(1) 3532/     F85 : 36 FF               		ld	(hl),0FFh
(1) 3533/     F87 : C9                  		ret
(1) 3534/     F88 :                     
(1) 3535/     F88 :                     ; --------------------------------------------------------
(1) 3536/     F88 :                     ; get_tick
(1) 3537/     F88 :                     ;
(1) 3538/     F88 :                     ; Checks if VBlank triggred a TICK
(1) 3539/     F88 :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3540/     F88 :                     ; --------------------------------------------------------
(1) 3541/     F88 :                     
(1) 3542/     F88 :                     get_tick:
(1) 3543/     F88 : F3                  		di				; Disable ints
(1) 3544/     F89 : F5                  		push	af
(1) 3545/     F8A : E5                  		push	hl
(1) 3546/     F8B : 21 F7 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3547/     F8E : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3548/     F8F : B7                  		or 	a
(1) 3549/     F90 : 28 13               		jr	z,.ctnotick
(1) 3550/     F92 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3551/     F94 : 23                  		inc	hl			; Move to tickCnt
(1) 3552/     F95 : 34                  		inc	(hl)			; and increment
(1) 3553/     F96 : CF                  		rst	8
(1) 3554/     F97 : D5                  		push	de
(1) 3555/     F98 : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3556/     F9B : ED 5B 33 00         		ld	de,(sbeatPtck)
(1) 3557/     F9F : CF                  		rst	8
(1) 3558/     FA0 : 19                  		add	hl,de
(1) 3559/     FA1 : 22 31 00            		ld	(sbeatAcc),hl
(1) 3560/     FA4 : D1                  		pop	de
(1) 3561/     FA5 :                     .ctnotick:
(1) 3562/     FA5 : E1                  		pop	hl
(1) 3563/     FA6 : F1                  		pop	af
(1) 3564/     FA7 : FB                  		ei				; Enable ints again
(1) 3565/     FA8 : C9                  		ret
(1) 3566/     FA9 :                     
(1) 3567/     FA9 :                     ; --------------------------------------------------------
(1) 3568/     FA9 :                     ; readRom
(1) 3569/     FA9 :                     ;
(1) 3570/     FA9 :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3571/     FA9 :                     ; This also tells to 68k that we want to access ROM
(1) 3572/     FA9 :                     ;
(1) 3573/     FA9 :                     ; Input:
(1) 3574/     FA9 :                     ; a  | 68K Address $xx0000
(1) 3575/     FA9 :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3576/     FA9 :                     ; hl | 68K Address $00xxxx
(1) 3577/     FA9 :                     ; de | Destination pointer
(1) 3578/     FA9 :                     ;
(1) 3579/     FA9 :                     ; Uses:
(1) 3580/     FA9 :                     ; b
(1) 3581/     FA9 :                     ;
(1) 3582/     FA9 :                     ; Notes:
(1) 3583/     FA9 :                     ; call RST 20h first, so the currenty playing DAC
(1) 3584/     FA9 :                     ; sample has enough data before getting busy here.
(1) 3585/     FA9 :                     ; --------------------------------------------------------
(1) 3586/     FA9 :                     
(1) 3587/     FA9 :                     readRom:
(1) 3588/     FA9 : DD E5               		push	ix
(1) 3589/     FAB : DD 21 81 1F         		ld	ix,commZRomBlk		; ix - rom read/block flags
(1) 3590/     FAF : FE FF               		cp	0FFh			; Reading from 68k's RAM?
(1) 3591/     FB1 : 28 3D               		jr	z,.from_ram
(1) 3592/     FB3 : CF                  		rst	8
(1) 3593/     FB4 : 22 35 00            		ld	(x68ksrclsb),hl		; Backup midlow address
(1) 3594/     FB7 : CB BC               		res	7,h			; Reset MSB bit 7
(1) 3595/     FB9 : 06 00               		ld	b,0			; Clear b
(1) 3596/     FBB : 0B                  		dec	bc			; len-1
(1) 3597/     FBC : 09                  		add	hl,bc			; Add len to the mid and low to this temp address
(1) 3598/     FBD : CB 7C               		bit	7,h			; Did it cross the bank?
(1) 3599/     FBF : 20 0B               		jr	nz,.double		; Then it's a double transfer
(1) 3600/     FC1 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore hl
(1) 3601/     FC4 : 0C                  		inc	c			; len+1
(1) 3602/     FC5 : 47                  		ld	b,a			; b - $xx0000
(1) 3603/     FC6 : CD 10 10            		call	.transfer
(1) 3604/     FC9 : DD E1               		pop	ix
(1) 3605/     FCB : C9                  		ret
(1) 3606/     FCC :                     .double:
(1) 3607/     FCC : CF                  		rst	8
(1) 3608/     FCD : 47                  		ld	b,a			; b - $xx0000
(1) 3609/     FCE : C5                  		push	bc			; Backup len and midlow address
(1) 3610/     FCF : E5                  		push	hl
(1) 3611/     FD0 : 79                  		ld	a,c			; len - LSB
(1) 3612/     FD1 : 95                  		sub	a,l
(1) 3613/     FD2 : 4F                  		ld	c,a			; Save new size
(1) 3614/     FD3 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore TOP
(1) 3615/     FD6 : CD 10 10            		call	.transfer
(1) 3616/     FD9 : E1                  		pop	hl			; Restore len and midlow address
(1) 3617/     FDA : C1                  		pop	bc
(1) 3618/     FDB : 4D                  		ld	c,l			; Get second len
(1) 3619/     FDC : 0C                  		inc	c
(1) 3620/     FDD : 3A 36 00            		ld	a,(x68ksrcmid)
(1) 3621/     FE0 : E6 80               		and	80h
(1) 3622/     FE2 : C6 80               		add	a,80h
(1) 3623/     FE4 : 67                  		ld	h,a
(1) 3624/     FE5 : 2E 00               		ld	l,0
(1) 3625/     FE7 : 30 01               		jr	nc,.x68knocarry
(1) 3626/     FE9 : 04                  		inc	b			; Next $xx0000
(1) 3627/     FEA :                     .x68knocarry:
(1) 3628/     FEA : CD 10 10            		call	.transfer
(1) 3629/     FED : DD E1               		pop	ix
(1) 3630/     FEF : C9                  		ret
(1) 3631/     FF0 :                     
(1) 3632/     FF0 :                     ; ------------------------------------------------
(1) 3633/     FF0 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3634/     FF0 :                     ;
(1) 3635/     FF0 :                     ; On the 68K side YOU MUST CALL
(1) 3636/     FF0 :                     ; gemaSendRam manually and every time, normally
(1) 3637/     FF0 :                     ; from a Vblank wait-loop.
(1) 3638/     FF0 :                     ; ------------------------------------------------
(1) 3639/     FF0 :                     
(1) 3640/     FF0 :                     .from_ram:
(1) 3641/     FF0 : ED 53 82 1F         		ld	(cdRamDst),de			; Show variables
(1) 3642/     FF4 : 22 84 1F            		ld	(cdRamSrc),hl
(1) 3643/     FF7 : 32 86 1F            		ld	(cdRamSrcB),a
(1) 3644/     FFA : CD 03 13            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3645/     FFD : CF                  		rst	8
(1) 3646/     FFE : 79                  		ld	a,c
(1) 3647/     FFF : 32 87 1F            		ld	(cdRamLen),a			; Show length
(1) 3648/    1002 : 21 00 FF            		ld	hl,RAM_ZCdFlagD&07FFFh+8000h	; ** 68K LABEL **
(1) 3649/    1005 : 36 01               		ld	(hl),1				; WRITE flag
(1) 3650/    1007 :                     .wait:
(1) 3651/    1007 : 3A 87 1F            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3652/    100A : B7                  		or	a
(1) 3653/    100B : 20 FA               		jr	nz,.wait
(1) 3654/    100D : DD E1               		pop	ix
(1) 3655/    100F : C9                  		ret
(1) 3656/    1010 :                     
(1) 3657/    1010 :                     ; ------------------------------------------------
(1) 3658/    1010 :                     ; b  - Source ROM $xx0000
(1) 3659/    1010 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3660/    1010 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3661/    1010 :                     ; de - Output location
(1) 3662/    1010 :                     ; ix - ROM-block flag
(1) 3663/    1010 :                     ; ------------------------------------------------
(1) 3664/    1010 :                     
(1) 3665/    1010 :                     .transfer:
(1) 3666/    1010 : CF                  		rst	8
(1) 3667/    1011 : E5                  		push	hl
(1) 3668/    1012 : 7C                  		ld	a,h
(1) 3669/    1013 : 21 00 60            		ld	hl,6000h
(1) 3670/    1016 : 07                  		rlca
(1) 3671/    1017 : 77                  		ld	(hl),a
(1) 3672/    1018 : 78                  		ld	a,b
(1) 3673/    1019 : CF                  		rst	8
(1) 3674/    101A : 77                  		ld	(hl),a
(1) 3675/    101B : 0F                  		rrca
(1) 3676/    101C : 77                  		ld	(hl),a
(1) 3677/    101D : 0F                  		rrca
(1) 3678/    101E : 77                  		ld	(hl),a
(1) 3679/    101F : 0F                  		rrca
(1) 3680/    1020 : 77                  		ld	(hl),a
(1) 3681/    1021 : 0F                  		rrca
(1) 3682/    1022 : CF                  		rst	8
(1) 3683/    1023 : 77                  		ld	(hl),a
(1) 3684/    1024 : 0F                  		rrca
(1) 3685/    1025 : 77                  		ld	(hl),a
(1) 3686/    1026 : 0F                  		rrca
(1) 3687/    1027 : 77                  		ld	(hl),a
(1) 3688/    1028 : 0F                  		rrca
(1) 3689/    1029 : 77                  		ld	(hl),a
(1) 3690/    102A : E1                  		pop	hl
(1) 3691/    102B : CB FC               		set	7,h
(1) 3692/    102D : CF                  		rst	8
(1) 3693/    102E :                     	; Transfer ROM data in packets
(1) 3694/    102E :                     	; while playing the cache'd sample
(1) 3695/    102E :                     	; *** CRITICAL PROCESS ***
(1) 3696/    102E :                     	;
(1) 3697/    102E :                     	; pseudo-ref for ldir:
(1) 3698/    102E :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3699/    102E :                     	; inc de	; incr de + 1
(1) 3700/    102E :                     	; inc hl	; incr hl + 1
(1) 3701/    102E :                     	; dec bc	; decr bc - 1
(1) 3702/    102E : 06 00               		ld	b,0
(1) 3703/    1030 : 79                  		ld	a,c		; a - Size counter
(1) 3704/    1031 : D6 09               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3705/    1033 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3706/    1035 :                     .x68kloop:
(1) 3707/    1035 : CF                  		rst	8
(1) 3708/    1036 : 00                  		nop
(1) 3709/    1037 : 0E 08               		ld	c,MAX_TRFRPZ-1
(1) 3710/    1039 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3711/    103D : C4 57 10            		call	nz,.x68klpwt
(1) 3712/    1040 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3713/    1042 : CF                  		rst	8
(1) 3714/    1043 : 00                  		nop
(1) 3715/    1044 : D6 08               		sub	a,MAX_TRFRPZ-1
(1) 3716/    1046 : D2 35 10            		jp	nc,.x68kloop
(1) 3717/    1049 :                     ; last block
(1) 3718/    1049 :                     .x68klast:
(1) 3719/    1049 : C6 09               		add	a,MAX_TRFRPZ
(1) 3720/    104B : 4F                  		ld	c,a
(1) 3721/    104C : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3722/    1050 : C4 57 10            		call	nz,.x68klpwt
(1) 3723/    1053 : ED B0               		ldir
(1) 3724/    1055 : CF                  		rst	8
(1) 3725/    1056 : C9                  		ret
(1) 3726/    1057 :                     
(1) 3727/    1057 :                     ; Wait here until Genesis unlocks ROM
(1) 3728/    1057 :                     .x68klpwt:
(1) 3729/    1057 : 00                  		nop
(1) 3730/    1058 : 00                  		nop
(1) 3735/    1059 : CF                  		rst	8
(1) 3740/    105A : 00                  		nop
(1) 3741/    105B : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3742/    105F : 20 F6               		jr	nz,.x68klpwt
(1) 3743/    1061 : C9                  		ret
(1) 3744/    1062 :                     
(1) 3745/    1062 :                     ; ====================================================================
(1) 3746/    1062 :                     ; ----------------------------------------------------------------
(1) 3747/    1062 :                     ; Sound chip routines
(1) 3748/    1062 :                     ; ----------------------------------------------------------------
(1) 3749/    1062 :                     
(1) 3750/    1062 :                     ; --------------------------------------------------------
(1) 3751/    1062 :                     ; chip_env
(1) 3752/    1062 :                     ;
(1) 3753/    1062 :                     ; Process the PSG
(1) 3754/    1062 :                     ; --------------------------------------------------------
(1) 3755/    1062 :                     
(1) 3756/    1062 :                     chip_env:
(1) 3760/    1062 : FD 21 22 15         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3761/    1066 : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3762/    106A : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3763/    106C : 06 04               		ld	b,4			; b - 4 channels
(1) 3764/    106E :                     .vloop:
(1) 3765/    106E : CF                  		rst	8
(1) 3766/    106F : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3767/    1072 : FD 36 00 00         		ld	(iy+COM),0
(1) 3768/    1076 :                     
(1) 3769/    1076 :                     	; ----------------------------
(1) 3770/    1076 :                     	; bit 2 - stop sound
(1) 3771/    1076 : CB 53               		bit	2,e
(1) 3772/    1078 : 28 0C               		jr	z,.ckof
(1) 3773/    107A : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3774/    107E : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3775/    1082 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3776/    1086 :                     .ckof:
(1) 3777/    1086 :                     	; ----------------------------
(1) 3778/    1086 :                     	; bit 1 - key off
(1) 3779/    1086 : CB 4B               		bit	1,e
(1) 3780/    1088 : 28 0F               		jr      z,.ckon
(1) 3781/    108A : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3782/    108D : B7                  		or	a
(1) 3783/    108E : 28 09               		jr	z,.ckon
(1) 3784/    1090 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3785/    1094 : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3786/    1098 : CF                  		rst	8
(1) 3787/    1099 :                     .ckon:
(1) 3788/    1099 :                     	; ----------------------------
(1) 3789/    1099 :                     	; bit 0 - key on
(1) 3790/    1099 : CB 43               		bit	0,e
(1) 3791/    109B : 28 1A               		jr	z,.envproc
(1) 3792/    109D : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3793/    10A1 : 78                  		ld	a,b
(1) 3794/    10A2 : FE 04               		cp	4			; NOISE channel?
(1) 3795/    10A4 : 20 08               		jr	nz,.nskip
(1) 3796/    10A6 : CF                  		rst	8			; Set NOISE mode
(1) 3797/    10A7 : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3798/    10AA : B1                  		or	c
(1) 3799/    10AB : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3800/    10AE :                     .nskip:
(1) 3801/    10AE : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3802/    10B2 : CF                  		rst	8
(1) 3803/    10B3 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3804/    10B7 :                     .nblock:
(1) 3805/    10B7 :                     
(1) 3806/    10B7 :                     	; ----------------------------
(1) 3807/    10B7 :                     	; Process effects
(1) 3808/    10B7 :                     	; ----------------------------
(1) 3809/    10B7 :                     .envproc:
(1) 3810/    10B7 : FD 7E 18            		ld	a,(iy+MODE)
(1) 3811/    10BA : B7                  		or	a			; no modes
(1) 3812/    10BB : CA 41 11            		jp	z,.vedlp
(1) 3813/    10BE : FE 01               		cp 	001b			; Attack mode
(1) 3814/    10C0 : 20 2C               		jr	nz,.chk2
(1) 3815/    10C2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3816/    10C6 : FD 5E 24            		ld	e,(iy+ALV)
(1) 3817/    10C9 : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3818/    10CC : B7                  		or	a
(1) 3819/    10CD : 28 16               		jr	z,.atkend
(1) 3820/    10CF : 57                  		ld	d,a			; c - attack rate
(1) 3821/    10D0 : 7B                  		ld	a,e			; a - attack level
(1) 3822/    10D1 : CF                  		rst	8
(1) 3823/    10D2 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3824/    10D5 : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3825/    10D6 : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3826/    10D8 : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3827/    10DA : BB                  		cp	e			; attack rate == level?
(1) 3828/    10DB : 38 08               		jr	c,.atkend
(1) 3829/    10DD : 28 06               		jr	z,.atkend
(1) 3830/    10DF : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3831/    10E2 : CF                  		rst	8
(1) 3832/    10E3 : 18 5C               		jr	.vedlp
(1) 3833/    10E5 :                     .atkend:
(1) 3834/    10E5 : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3835/    10E8 :                     .atkzero:
(1) 3836/    10E8 : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3837/    10EC : 18 53               		jr	.vedlp
(1) 3838/    10EE :                     .chk2:
(1) 3839/    10EE :                     
(1) 3840/    10EE : FE 02               		cp	010b			; Decay mode
(1) 3841/    10F0 : 20 31               		jr	nz,.chk4
(1) 3842/    10F2 :                     .dectmr:
(1) 3843/    10F2 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3844/    10F6 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3845/    10F9 : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3846/    10FC : BB                  		cp	e
(1) 3847/    10FD : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3848/    10FF : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3849/    1101 : CF                  		rst	8
(1) 3850/    1102 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3851/    1105 : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3852/    1107 : BB                  		cp	e			; compare level
(1) 3853/    1108 : 38 0F               		jr	c,.dkyend		; and finish
(1) 3854/    110A : 18 08               		jr	.dksav
(1) 3855/    110C :                     .dkadd:
(1) 3856/    110C : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3857/    110F : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3858/    1111 : BB                  		cp	e			; compare level
(1) 3859/    1112 : 30 05               		jr	nc,.dkyend
(1) 3860/    1114 :                     .dksav:
(1) 3861/    1114 : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3862/    1117 : 18 28               		jr	.vedlp
(1) 3863/    1119 :                     .dkyend:
(1) 3864/    1119 : CF                  		rst	8
(1) 3865/    111A : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3866/    111D : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3867/    1121 : 18 1E               		jr	.vedlp
(1) 3868/    1123 :                     .chk4:
(1) 3869/    1123 : FE 04               		cp	100b			; Sustain phase
(1) 3870/    1125 : 20 1A               		jr	nz,.vedlp
(1) 3871/    1127 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3872/    112B : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3873/    112E : CF                  		rst	8
(1) 3874/    112F : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3875/    1132 : 38 05               		jr	c,.killenv		; release done
(1) 3876/    1134 : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3877/    1137 : 18 08               		jr	.vedlp
(1) 3878/    1139 :                     .killenv:
(1) 3879/    1139 : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3880/    113D : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3881/    1141 :                     .vedlp:
(1) 3882/    1141 :                     	; ----------------------------
(1) 3883/    1141 :                     	; PSG UPDATE
(1) 3884/    1141 :                     	; ----------------------------
(1) 3885/    1141 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3886/    1144 : B7                  		or	a
(1) 3887/    1145 : 28 72               		jr	z,.noupd
(1) 3888/    1147 : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3889/    114B : 59                  		ld	e,c
(1) 3890/    114C : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3891/    114F : 57                  		ld	d,a
(1) 3892/    1150 : E6 03               		and	011b
(1) 3893/    1152 : FE 03               		cp	011b
(1) 3894/    1154 : 20 1D               		jr	nz,.normal
(1) 3895/    1156 : CF                  		rst	8
(1) 3896/    1157 : 78                  		ld	a,b		; Channel 4?
(1) 3897/    1158 : FE 03               		cp	3
(1) 3898/    115A : 28 13               		jr	z,.silnc_3
(1) 3899/    115C : FE 04               		cp	4
(1) 3900/    115E : 20 18               		jr	nz,.do_nfreq
(1) 3901/    1160 : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3902/    1163 : 57                  		ld	d,a
(1) 3903/    1164 : E6 03               		and	011b
(1) 3904/    1166 : CF                  		rst	8
(1) 3905/    1167 : FE 03               		cp	011b
(1) 3906/    1169 : 20 30               		jr	nz,.vonly
(1) 3907/    116B : 1E C0               		ld	e,0C0h
(1) 3908/    116D : 18 09               		jr	.do_nfreq
(1) 3909/    116F :                     .silnc_3:
(1) 3910/    116F : 3E FF               		ld	a,-1
(1) 3911/    1171 : 18 32               		jr	.vlmuch
(1) 3912/    1173 :                     .normal:
(1) 3913/    1173 : 78                  		ld	a,b
(1) 3914/    1174 : FE 04               		cp	4
(1) 3915/    1176 : 28 23               		jr	z,.vonly
(1) 3916/    1178 :                     .do_nfreq:
(1) 3917/    1178 : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3918/    117B : FD 66 20            		ld	h,(iy+DTH)
(1) 3919/    117E :                     	; freq effects go here
(1) 3920/    117E :                     	; (save e FIRST.)
(1) 3921/    117E :                     	;	push	de
(1) 3922/    117E :                     	;	pop	de
(1) 3923/    117E : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3924/    117F : E6 0F               		and	00001111b
(1) 3925/    1181 : B3                  		or	e		; OR with channel set in e
(1) 3926/    1182 : CF                  		rst	8
(1) 3927/    1183 : DD 77 00            		ld	(ix),a		; write it
(1) 3928/    1186 : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3929/    1187 : 0F                  		rrca
(1) 3930/    1188 : 0F                  		rrca
(1) 3931/    1189 : 0F                  		rrca
(1) 3932/    118A : 0F                  		rrca
(1) 3933/    118B : E6 0F               		and	00001111b
(1) 3934/    118D : 5F                  		ld	e,a
(1) 3935/    118E : 7C                  		ld	a,h		; Grab MSB bits
(1) 3936/    118F : CF                  		rst	8
(1) 3937/    1190 : 07                  		rlca
(1) 3938/    1191 : 07                  		rlca
(1) 3939/    1192 : 07                  		rlca
(1) 3940/    1193 : 07                  		rlca
(1) 3941/    1194 : E6 30               		and	00110000b
(1) 3942/    1196 : B3                  		or	e
(1) 3943/    1197 : DD 77 00            		ld	(ix),a
(1) 3944/    119A : CF                  		rst	8
(1) 3945/    119B :                     .vonly:
(1) 3946/    119B : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3947/    119E : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3948/    11A1 : 30 02               		jr	nc,.vlmuch
(1) 3949/    11A3 : 3E FF               		ld	a,-1
(1) 3950/    11A5 :                     .vlmuch:
(1) 3951/    11A5 : CB 3F               		srl	a			; (Level >> 4)
(1) 3952/    11A7 : CB 3F               		srl	a
(1) 3953/    11A9 : CB 3F               		srl	a
(1) 3954/    11AB : CF                  		rst	8
(1) 3955/    11AC : CB 3F               		srl	a
(1) 3956/    11AE : E6 0F               		and	00001111b		; Filter volume value
(1) 3957/    11B0 : B1                  		or	c			; and OR with current channel
(1) 3958/    11B1 : F6 90               		or	90h			; Set volume-set mode
(1) 3959/    11B3 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3960/    11B6 : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3961/    11B9 :                     .noupd:
(1) 3962/    11B9 :                     	; ----------------------------
(1) 3963/    11B9 : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3964/    11BB : 79                  		ld	a,c
(1) 3965/    11BC : CF                  		rst	8
(1) 3966/    11BD : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3967/    11BF : 4F                  		ld	c,a
(1) 3968/    11C0 : 05                  		dec	b
(1) 3969/    11C1 : C2 6E 10            		jp	nz,.vloop
(1) 3970/    11C4 : C9                  		ret
(1) 3971/    11C5 :                     
(1) 3972/    11C5 :                     ; ---------------------------------------------
(1) 3973/    11C5 :                     ; FM register writes
(1) 3974/    11C5 :                     ;
(1) 3975/    11C5 :                     ; Input:
(1) 3976/    11C5 :                     ; d - ctrl
(1) 3977/    11C5 :                     ; e - data
(1) 3978/    11C5 :                     ; ---------------------------------------------
(1) 3979/    11C5 :                     
(1) 3980/    11C5 :                     ; c - KeyID
(1) 3981/    11C5 :                     fm_autoreg:
(1) 3982/    11C5 : CB 51               		bit	2,c
(1) 3983/    11C7 : 20 0B               		jr	nz,fm_send_2
(1) 3984/    11C9 :                     
(1) 3985/    11C9 :                     ; Channels 1-3 and global registers
(1) 3986/    11C9 :                     fm_send_1:
(1) 3987/    11C9 : 7A                  		ld	a,d
(1) 3988/    11CA : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3989/    11CD : 00                  		nop
(1) 3990/    11CE : 7B                  		ld	a,e
(1) 3991/    11CF : 32 01 40            		ld	(Zym_data_1),a
(1) 3992/    11D2 : 00                  		nop
(1) 3993/    11D3 : C9                  		ret
(1) 3994/    11D4 :                     ; Channels 4-6
(1) 3995/    11D4 :                     fm_send_2:
(1) 3996/    11D4 : 7A                  		ld	a,d
(1) 3997/    11D5 : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3998/    11D8 : 00                  		nop
(1) 3999/    11D9 : 7B                  		ld	a,e
(1) 4000/    11DA : 32 03 40            		ld	(Zym_data_2),a
(1) 4001/    11DD : 00                  		nop
(1) 4002/    11DE : C9                  		ret
(1) 4003/    11DF :                     
(1) 4004/    11DF :                     ; --------------------------------------------------------
(1) 4005/    11DF :                     ; brute-force WAVE ON/OFF playback
(1) 4006/    11DF :                     ; --------------------------------------------------------
(1) 4007/    11DF :                     
(1) 4008/    11DF :                     dac_on:
(1) 4009/    11DF : 3E 2B               		ld	a,2Bh
(1) 4010/    11E1 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4011/    11E4 : 3E 80               		ld	a,80h
(1) 4012/    11E6 : 32 01 40            		ld	(Zym_data_1),a
(1) 4013/    11E9 : 3E D9               		ld 	a,zopcExx
(1) 4014/    11EB : 32 08 00            		ld	(dac_me),a
(1) 4015/    11EE : 3E F5               		ld 	a,zopcPushAf
(1) 4016/    11F0 : 32 20 00            		ld	(dac_fill),a
(1) 4017/    11F3 : C9                  		ret
(1) 4018/    11F4 :                     dac_off:
(1) 4019/    11F4 : 3E 2B               		ld	a,2Bh
(1) 4020/    11F6 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4021/    11F9 : 3E 00               		ld	a,00h
(1) 4022/    11FB : 32 01 40            		ld	(Zym_data_1),a
(1) 4023/    11FE : 3E C9               		ld 	a,zopcRet
(1) 4024/    1200 : 32 08 00            		ld	(dac_me),a
(1) 4025/    1203 : 3E C9               		ld 	a,zopcRet
(1) 4026/    1205 : 32 20 00            		ld	(dac_fill),a
(1) 4027/    1208 : C9                  		ret
(1) 4028/    1209 :                     
(1) 4029/    1209 :                     ; --------------------------------------------------------
(1) 4030/    1209 :                     ; dac_play
(1) 4031/    1209 :                     ;
(1) 4032/    1209 :                     ; Plays a new sample
(1) 4033/    1209 :                     ;
(1) 4034/    1209 :                     ; NOTE:
(1) 4035/    1209 :                     ; Set wave_Flags and wave_Pitch externally
(1) 4036/    1209 :                     ; getting here.
(1) 4037/    1209 :                     ; --------------------------------------------------------
(1) 4038/    1209 :                     
(1) 4039/    1209 :                     dac_play:
(1) 4040/    1209 : F3                  		di
(1) 4041/    120A : CD F4 11            		call	dac_off
(1) 4042/    120D : D9                  		exx				; flip exx regs
(1) 4043/    120E : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4044/    1211 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4045/    1215 : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4046/    1218 : D9                  		exx				; move them back
(1) 4047/    1219 : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4048/    121C : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4049/    121F : 22 AA 17            		ld	(dDacPntr),hl
(1) 4050/    1222 : 32 AC 17            		ld	(dDacPntr+2),a
(1) 4051/    1225 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4052/    1228 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4053/    122B : 22 AD 17            		ld	(dDacCntr),hl
(1) 4054/    122E : 32 AF 17            		ld	(dDacCntr+2),a
(1) 4055/    1231 : AF                  		xor	a
(1) 4056/    1232 : 32 37 00            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4057/    1235 : CD 3D 12            		call	dac_refill
(1) 4058/    1238 : CD DF 11            		call	dac_on
(1) 4059/    123B : FB                  		ei
(1) 4060/    123C : C9                  		ret
(1) 4061/    123D :                     
(1) 4062/    123D :                     ; --------------------------------------------------------
(1) 4063/    123D :                     
(1) 4064/    123D :                     dac_refill:
(1) 4065/    123D : CF                  		rst	8
(1) 4066/    123E : C5                  		push	bc
(1) 4067/    123F : D5                  		push	de
(1) 4068/    1240 : E5                  		push	hl
(1) 4069/    1241 : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4070/    1244 : FE 07               		cp	111b
(1) 4071/    1246 : D2 FC 12            		jp	nc,.dacfill_end
(1) 4072/    1249 : 3A AF 17            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4073/    124C : 2A AD 17            		ld	hl,(dDacCntr)
(1) 4074/    124F : 01 80 00            		ld	bc,80h
(1) 4075/    1252 : 37                  		scf
(1) 4076/    1253 : 3F                  		ccf
(1) 4077/    1254 : ED 42               		sbc	hl,bc
(1) 4078/    1256 : DE 00               		sbc	a,0
(1) 4079/    1258 : 32 AF 17            		ld	(dDacCntr+2),a
(1) 4080/    125B : 22 AD 17            		ld	(dDacCntr),hl
(1) 4081/    125E : 16 1D               		ld	d,dWaveBuff>>8
(1) 4082/    1260 : B7                  		or	a
(1) 4083/    1261 : FA 8B 12            		jp	m,.dac_over
(1) 4084/    1264 : 3A 37 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4085/    1267 : 5F                  		ld	e,a
(1) 4086/    1268 : C6 80               		add 	a,80h
(1) 4087/    126A : 32 37 00            		ld	(dDacFifoMid),a
(1) 4088/    126D : 2A AA 17            		ld	hl,(dDacPntr)
(1) 4089/    1270 : 3A AC 17            		ld	a,(dDacPntr+2)
(1) 4090/    1273 : CD A9 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4091/    1276 : 2A AA 17            		ld	hl,(dDacPntr)
(1) 4092/    1279 : 3A AC 17            		ld	a,(dDacPntr+2)
(1) 4093/    127C : 01 80 00            		ld	bc,80h
(1) 4094/    127F : 09                  		add	hl,bc
(1) 4095/    1280 : CE 00               		adc	a,0
(1) 4096/    1282 : 22 AA 17            		ld	(dDacPntr),hl
(1) 4097/    1285 : 32 AC 17            		ld	(dDacPntr+2),a
(1) 4098/    1288 : C3 FF 12            		jp	.dacfill_ret
(1) 4099/    128B :                     ; NOTE: This doesn't finish at the exact END point
(1) 4100/    128B :                     ; but the USER won't notice it.
(1) 4101/    128B :                     .dac_over:
(1) 4102/    128B : 16 1D               		ld	d,dWaveBuff>>8
(1) 4103/    128D : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4104/    1290 : E6 01               		and	001b
(1) 4105/    1292 : C2 B5 12            		jp	nz,.dacfill_loop
(1) 4106/    1295 : 7D                  		ld	a,l
(1) 4107/    1296 : C6 80               		add	a,80h
(1) 4108/    1298 : 4F                  		ld	c,a
(1) 4109/    1299 : 06 00               		ld	b,0
(1) 4110/    129B : C5                  		push	bc
(1) 4111/    129C : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4112/    129F : 5F                  		ld	e,a
(1) 4113/    12A0 : C6 80               		add	a,80h
(1) 4114/    12A2 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4115/    12A5 : C1                  		pop	bc
(1) 4116/    12A6 : 79                  		ld	a,c
(1) 4117/    12A7 : B0                  		or	b
(1) 4118/    12A8 : 28 52               		jr	z,.dacfill_end
(1) 4119/    12AA : 2A AA 17            		ld	hl,(dDacPntr)
(1) 4120/    12AD : 3A AC 17            		ld	a,(dDacPntr+2)
(1) 4121/    12B0 : CD A9 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4122/    12B3 : 18 47               		jr	.dacfill_end
(1) 4123/    12B5 :                     ; loop sample
(1) 4124/    12B5 :                     .dacfill_loop:
(1) 4125/    12B5 : C5                  		push	bc
(1) 4126/    12B6 : D5                  		push	de
(1) 4127/    12B7 : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4128/    12BA : 4F                  		ld	c,a
(1) 4129/    12BB : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4130/    12BF : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4131/    12C2 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4132/    12C5 : 81                  		add	a,c
(1) 4133/    12C6 : 19                  		add	hl,de
(1) 4134/    12C7 : CE 00               		adc	a,0
(1) 4135/    12C9 : 22 AA 17            		ld	(dDacPntr),hl
(1) 4136/    12CC : 32 AC 17            		ld	(dDacPntr+2),a
(1) 4137/    12CF : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4138/    12D2 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4139/    12D5 : 91                  		sub	a,c
(1) 4140/    12D6 : 37                  		scf
(1) 4141/    12D7 : 3F                  		ccf
(1) 4142/    12D8 : ED 52               		sbc	hl,de
(1) 4143/    12DA : DE 00               		sbc	a,0
(1) 4144/    12DC : 22 AD 17            		ld	(dDacCntr),hl
(1) 4145/    12DF : 32 AF 17            		ld	(dDacCntr+2),a
(1) 4146/    12E2 : D1                  		pop	de
(1) 4147/    12E3 : C1                  		pop	bc
(1) 4148/    12E4 : 78                  		ld	a,b
(1) 4149/    12E5 : B1                  		or	c
(1) 4150/    12E6 : 28 17               		jr	z,.dacfill_ret
(1) 4151/    12E8 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4152/    12EB : 5F                  		ld	e,a
(1) 4153/    12EC : C6 80               		add	a,80h
(1) 4154/    12EE : 32 37 00            		ld	(dDacFifoMid),a
(1) 4155/    12F1 : 2A AA 17            		ld	hl,(dDacPntr)
(1) 4156/    12F4 : 3A AC 17            		ld	a,(dDacPntr+2)
(1) 4157/    12F7 : CD A9 0F            		call	readRom	; *** ROM ACCESS ***
(1) 4158/    12FA : 18 03               		jr	.dacfill_ret
(1) 4159/    12FC :                     .dacfill_end:
(1) 4160/    12FC : CD F4 11            		call	dac_off		; DAC finished
(1) 4161/    12FF :                     .dacfill_ret:
(1) 4162/    12FF : E1                  		pop	hl
(1) 4163/    1300 : D1                  		pop	de
(1) 4164/    1301 : C1                  		pop	bc
(1) 4165/    1302 : C9                  		ret
(1) 4166/    1303 :                     
(1) 4167/    1303 :                     ; ----------------------------------------------------------------
(1) 4168/    1303 :                     ; gema_lastbank
(1) 4169/    1303 :                     ;
(1) 4170/    1303 :                     ; Two purposes:
(1) 4171/    1303 :                     ; - Set the BANK to the very last part of memory for the
(1) 4172/    1303 :                     ;   readRom to read from RAM
(1) 4173/    1303 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4174/    1303 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4175/    1303 :                     ;
(1) 4176/    1303 :                     ; Uses:
(1) 4177/    1303 :                     ; hl,b
(1) 4178/    1303 :                     ; ----------------------------------------------------------------
(1) 4179/    1303 :                     
(1) 4180/    1303 :                     gema_lastbank:
(1) 4181/    1303 : 21 00 60            		ld	hl,6000h
(1) 4182/    1306 : 06 09               		ld	b,9		; 9 bits
(1) 4183/    1308 :                     .write:
(1) 4184/    1308 : 36 01               		ld	(hl),1
(1) 4185/    130A : 10 FC               		djnz	.write
(1) 4186/    130C : C9                  		ret
(1) 4187/    130D :                     
(1) 4188/    130D :                     ; ====================================================================
(1) 4189/    130D :                     ; ----------------------------------------------------------------
(1) 4190/    130D :                     ; Frequency tables
(1) 4191/    130D :                     ; ----------------------------------------------------------------
(1) 4192/    130D :                     
(1) 4193/    130D : 84 02               fmFreq_List:	dw 644
(1) 4194/    130F : A9 02               		dw 681
(1) 4195/    1311 : D2 02               		dw 722
(1) 4196/    1313 : FD 02               		dw 765
(1) 4197/    1315 : 2A 03               		dw 810
(1) 4198/    1317 : 5A 03               		dw 858
(1) 4199/    1319 : 8E 03               		dw 910
(1) 4200/    131B : C4 03               		dw 964
(1) 4201/    131D : FD 03               		dw 1021
(1) 4202/    131F : 39 04               		dw 1081
(1) 4203/    1321 : 7A 04               		dw 1146
(1) 4204/    1323 : BE 04               		dw 1214
(1) 4205/    1325 :                     
(1) 4206/    1325 :                     ; ----------------------------------------
(1) 4207/    1325 :                     ; DAC and PWM
(1) 4208/    1325 :                     ; ----------------------------------------
(1) 4209/    1325 :                     
(1) 4210/    1325 :                     psgFreq_List:
(1) 4211/    1325 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4212/    1325 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4213/    1325 :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4214/    1325 : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             132B : FF FF FF FF FF FF 
             1331 : FF FF FF FF FF FF 
             1337 : F8 03 BF 03 89 03 
(1) 4215/    133D : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1343 : CE 02 A5 02 80 02 
             1349 : 5C 02 3A 02 1A 02 
             134F : FB 01 DF 01 C4 01 
(1) 4216/    1355 : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             135B : 67 01 53 01 40 01 
             1361 : 2E 01 1D 01 0D 01 
             1367 : FE 00 EF 00 E2 00 
(1) 4217/    136D : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             1373 : B4 00 A9 00 A0 00 
             1379 : 97 00 8F 00 87 00 
             137F : 7F 00 78 00 71 00 
(1) 4218/    1385 : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             138B : 5A 00 55 00 50 00 
             1391 : 4B 00 47 00 43 00 
             1397 : 40 00 3C 00 39 00 
(1) 4219/    139D : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             13A3 : 2D 00 2B 00 28 00 
             13A9 : 26 00 24 00 22 00 
             13AF : 20 00 1F 00 1D 00 
(1) 4220/    13B5 : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             13BB : 17 00 16 00 15 00 
             13C1 : 13 00 12 00 11 00 
             13C7 : 10 00 09 00 01 00 
(1) 4221/    13CD :                     
(1) 4222/    13CD :                     ; ----------------------------------------
(1) 4223/    13CD :                     ; DAC and PWM shared list
(1) 4224/    13CD :                     ; ----------------------------------------
(1) 4225/    13CD :                     
(1) 4226/    13CD :                     wavFreq_List:
(1) 4227/    13CD :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4228/    13CD :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4229/    13CD :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4230/    13CD :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4231/    13CD : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             13D3 : 4C 00 51 00 56 00 
             13D9 : 5B 00 60 00 66 00 
             13DF : 6C 00 73 00 79 00 
(1) 4232/    13E5 : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             13EB : 99 00 A2 00 AC 00 
             13F1 : B6 00 C1 00 CC 00 
             13F7 : D8 00 E5 00 F2 00 
(1) 4233/    13FD : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             1403 : 32 01 45 01 58 01 
             1409 : 6C 01 82 01 98 01 
             140F : AE 01 C7 01 E0 01 
(1) 4234/    1415 : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             141B : 60 02 80 02 A0 02 
             1421 : D0 02 F8 02 28 03 
             1427 : 52 03 90 03 C8 03 
(1) 4235/    142D : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4236/    142F :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4237/    142F :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4238/    142F :                     
(1) 4239/    142F :                     ; ----------------------------------------
(1) 4240/    142F :                     ; SegaCD PCM
(1) 4241/    142F :                     ; ----------------------------------------
(1) 4242/    142F :                     wavFreq_CdPcm:
(1) 4243/    142F :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4244/    142F :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4245/    142F :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4246/    142F : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             1435 : 28 01 3C 01 4C 01 
             143B : 60 01 7C 01 88 01 
             1441 : AA 01 BC 01 DC 01 
(1) 4247/    1447 : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             144D : 58 02 7C 02 A0 02 
             1453 : C8 02 FC 02 1C 03 
             1459 : 54 03 7C 03 B8 03 
(1) 4248/    145F : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             1465 : AC 04 EC 04 40 05 
             146B : 90 05 E4 05 3C 06 
             1471 : 98 06 04 07 60 07 
(1) 4249/    1477 : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             147D : 60 09 F0 09 64 0A 
             1483 : 04 0B AA 0B 60 0C 
             1489 : 18 0D E4 0D B8 0E 
(1) 4250/    148F : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             1495 : 80 12 9C 13 C8 14 
             149B : 24 16 4C 17 DC 18 
             14A1 : 38 1A E0 1B 94 1D 
(1) 4251/    14A7 :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4252/    14A7 :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4253/    14A7 :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4254/    14A7 :                     
(1) 4255/    14A7 :                     ; ====================================================================
(1) 4256/    14A7 :                     ; ----------------------------------------------------------------
(1) 4257/    14A7 :                     ; Chip buffers
(1) 4258/    14A7 :                     ; ----------------------------------------------------------------
(1) 4259/    14A7 :                     
(1) 4260/    14A7 : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14AD : 00 00             
(1) 4261/    14AF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             14B5 : 00 00             
(1) 4262/    14B7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14BD : 00 00             
(1) 4263/    14BF : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             14C5 : FF FF             
(1) 4264/    14C7 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             14CD : FF FF             
(1) 4265/    14CF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             14D5 : 00 00             
(1) 4266/    14D7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             14DD : 00 00             
(1) 4267/    14DF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             14E5 : 00 00             
(1) 4268/    14E7 :                     
(1) 4269/    14E7 : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             14ED : 00 00             
(1) 4270/    14EF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             14F5 : 00 00             
(1) 4271/    14F7 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             14FD : 00 00             
(1) 4272/    14FF : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             1505 : 00 00             
(1) 4273/    1507 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             150D : 00 00             
(1) 4274/    150F : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1515 : 00 00             
(1) 4275/    1517 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             151D : 00 00             
(1) 4276/    151F :                     
(1) 4277/    151F : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4278/    1523 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4279/    1527 : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4280/    152B : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4281/    152F : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4282/    1533 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4283/    1537 : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4284/    153B : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4285/    153F : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4286/    1543 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4287/    1547 : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4288/    154B : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4289/    154F : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4290/    1553 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4291/    1557 : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4292/    155B :                     
(1) 4293/    155B :                     ; --------------------------------------------------------
(1) 4294/    155B :                     fmcach_1	ds 28h
(1) 4295/    1583 :                     fmcach_2	ds 28h
(1) 4296/    15AB :                     fmcach_3	ds 28h
(1) 4297/    15D3 :                     fmcach_4	ds 28h
(1) 4298/    15FB :                     fmcach_5	ds 28h
(1) 4299/    1623 :                     fmcach_6	ds 28h
(1) 4300/    164B :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4301/    1657 :                     trkInfoCach	ds 4
(1) 4302/    165B :                     		ds 4*3		; _rsave followup
(1) 4303/    1667 :                     
(1) 4304/    1667 :                     ; ====================================================================
(1) 4305/    1667 :                     ; ----------------------------------------------------------------
(1) 4306/    1667 :                     ; Track buffers
(1) 4307/    1667 :                     ; ----------------------------------------------------------------
(1) 4308/    1667 :                     
(1) 4309/    1667 :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4310/    1687 :                     trkHdrs_1	ds 8*4
(1) 4311/    16A7 :                     trkHdrs_2	ds 8*4
(1) 4312/    16C7 :                     trkBlks_0	ds 8
(1) 4313/    16CF :                     trkBlks_1	ds 8
(1) 4314/    16D7 :                     trkBlks_2	ds 8
(1) 4315/    16DF :                     trkBuff_0	ds seq_ChnIndx+MAX_TRKINDX
(1) 4316/    171E :                     trkBuff_1	ds seq_ChnIndx+MAX_TRKINDX
(1) 4317/    175D :                     trkBuff_2	ds seq_ChnIndx+MAX_TRKINDX
(1) 4318/    179C : 5B 15               fmcach_list:	dw fmcach_1
(1) 4319/    179E : 83 15               		dw fmcach_2
(1) 4320/    17A0 : AB 15               		dw fmcach_3
(1) 4321/    17A2 : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4322/    17A3 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4323/    17A4 : D3 15               		dw fmcach_4		; Followup
(1) 4324/    17A6 : FB 15               		dw fmcach_5
(1) 4325/    17A8 : 23 16               		dw fmcach_6
(1) 4326/    17AA : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4327/    17AD : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4328/    17B0 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4329/    17BE :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4330/    17C0 :                     sampleHead	ds 006h
(1) 4331/    17C6 :                     instListOut	ds 8
(1) 4332/    17CE :                     
(1) 4333/    17CE :                     ; ====================================================================
(1) 4334/    17CE :                     ; --------------------------------------------------------
(1) 4335/    17CE :                     ; MASTER buffers list
(1) 4336/    17CE :                     ;
(1) 4337/    17CE :                     ; dw track_buffer
(1) 4338/    17CE :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4339/    17CE :                     ;
(1) 4340/    17CE :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4341/    17CE :                     ; --------------------------------------------------------
(1) 4342/    17CE :                     
(1) 4343/    17CE :                     nikona_BuffList:
(1) 4344/    17CE : DF 16 C7 16 67 16   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             17D4 : 00 1F             
(1) 4345/    17D6 : 1E 17 CF 16 87 16   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             17DC : 20 1F             
(1) 4346/    17DE : 5D 17 D7 16 A7 16   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             17E4 : 40 1F             
(1) 4347/    17E6 :                     nikona_BuffList_e:
(1) 4348/    17E6 : FF FF               	dw -1	; ENDOFLIST
(1) 4349/    17E8 :                     
(1) 4350/    17E8 :                     ; ====================================================================
(1) 4351/    17E8 :                     ; --------------------------------------------------------
(1) 4352/    17E8 :                     ; Channel tables
(1) 4353/    17E8 :                     ;
(1) 4354/    17E8 :                     ; PSG   80h
(1) 4355/    17E8 :                     ; PSGN  90h
(1) 4356/    17E8 :                     ; FM   0A0h
(1) 4357/    17E8 :                     ; FM3  0B0h
(1) 4358/    17E8 :                     ; DAC  0C0h
(1) 4359/    17E8 :                     ; PCM  0D0h
(1) 4360/    17E8 :                     ; PWM  0E0h
(1) 4361/    17E8 :                     ; --------------------------------------------------------
(1) 4362/    17E8 :                     
(1) 4363/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4364/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4365/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4366/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4367/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4368/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4369/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4370/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4371/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4372/    1B0E :                     ; --------------------------------------------------------
(1) 4373/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4374/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4375/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4376/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4377/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4378/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4379/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4380/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4381/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4382/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4383/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4384/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4385/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4386/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4387/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4388/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4389/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4390/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4391/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4392/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4393/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4394/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4395/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4396/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4397/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4398/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4399/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4400/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4401/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4402/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4403/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4404/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4405/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4406/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4407/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4408/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4409/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4410/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4411/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4412/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4413/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4414/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4415/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4416/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4417/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4418/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4419/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4420/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4421/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4422/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4423/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4424/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4425/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4426/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4427/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4428/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4429/    1CEA :                     ; ----------------------------------------------------------------
(1) 4430/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4431/    1CEC : 00                  		db 0
(1) 4432/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4433/    1CEF : 00                  		db 0
(1) 4434/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4435/    1CF2 : 00                  		db 0
(1) 4436/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4437/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4438/    1CF6 :                     
(1) 4439/    1CF6 : 00                  tickSpSet	db 0		; **
(1) 4440/    1CF7 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4441/    1CF8 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4442/    1CF9 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4443/    1CFA :                     
(1) 4444/    1CFA :                     ; ====================================================================
(1) 4445/    1CFA :                     ; ----------------------------------------------------------------
(1) 4446/    1CFA :                     ; Special aligned buffers
(1) 4447/    1CFA :                     ;
(1) 4448/    1CFA :                     ; Located at 1D00h
(1) 4449/    1CFA :                     ; ----------------------------------------------------------------
(1) 4450/    1CFA :                     
(1) 4451/    1D00 :                     		org 1D00h
(1) 4452/    1D00 :                     dWaveBuff	ds 100h				; WAVE data buffer: 100h bytes
(1) 4453/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4454/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4455/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4456/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4457/    1F60 :                     
(1) 4458/    1F60 :                     ; ====================================================================
(1) 4459/    1F60 :                     ; ----------------------------------------------------------------
(1) 4460/    1F60 :                     ; Control area
(1) 4461/    1F60 :                     ; * MANUAL ORDER, check gema.asm *
(1) 4462/    1F60 :                     ; ----------------------------------------------------------------
(1) 4463/    1F60 :                     
(1) 4464/    1F60 :                     		org 1F60h
(1) 4465/    1F60 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1) 4466/    1F80 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(1) 4467/    1F81 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(1) 4468/    1F82 : 00 00               cdRamDst	db 0,0				; ** Z80 destination
(1) 4469/    1F84 : 00 00               cdRamSrc	db 0,0				; ** 68k 24-bit source
(1) 4470/    1F86 : 00                  cdRamSrcB	db 0				; **
(1) 4471/    1F87 : 00                  cdRamLen	db 0				; Size + status flag
(1) 4472/    1F88 : 00                  palMode		db 0				; PAL mode flag
(1) 4473/    1F89 : 00                  mcdBlock	db 0				; Flag to BLOCK PCM transfers.
(1) 4474/    1F8A : 00                  marsBlock	db 0				; Flag to BLOCK PWM transfers.
(1) 4475/    1F8B :                     
(1) 4476/    1F8B :                     ; --------------------------------------------------------
(1) 4477/    3B93 :                     		dephase
(1) 4478/    3B93 :                     		cpu 68000		; [AS] Return to 68k
(1) 4479/    3B93 :                     		padding off		; [AS] NO padding
(1) 4480/    3B93 :                     		align 2
(1) 4481/    3B94 :                     
     317/    3B94 :                     Z80_CODE_END:
     324/    3B94 :                     Z80_CODE_FILE_E:
     325/    3B94 :                     
     326/    3B94 :                     ; ====================================================================
     327/    3B94 :                     ; --------------------------------------------------------
     328/    3B94 :                     ; SEGA CD SUB-CPU data
     329/    3B94 :                     ; --------------------------------------------------------
     330/    3B94 :                     
     345/    3B94 :                     
     346/    3B94 :                     ; ====================================================================
     347/    3B94 :                     ; ----------------------------------------------------------------
     348/    3B94 :                     ; SH2 code sent to SDRAM area
     349/    3B94 :                     ; ----------------------------------------------------------------
     350/    3B94 :                     
     356/    3B94 :                     MARS_RAMCODE:
     362/    3B94 :                     		align 4
     364/    3B94 :                     MARS_RAMCODE_E:
     369/    3B94 :                     
     370/    3B94 :                     ; ====================================================================
     371/    3B94 :                     ; --------------------------------------------------------
     372/    3B94 :                     ; CODE BLOCK (banks)
     373/    3B94 :                     ; --------------------------------------------------------
     374/    3B94 :                     
     375/    3B94 :                     		include "game/incl_code.asm"
(1)    1/    3B94 :                     ; ============================================================
(1)    2/    3B94 :                     ; --------------------------------------------------------
(1)    3/    3B94 :                     ; CODE BANKS section
(1)    4/    3B94 :                     ;
(1)    5/    3B94 :                     ; Usage:
(1)    6/    3B94 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/    3B94 :                     ;
(1)    8/    3B94 :                     ; NOTES:
(1)    9/    3B94 :                     ; - Screen order is at game/screens.asm
(1)   10/    3B94 :                     ; - DATA banks are loaded separately inside the
(1)   11/    3B94 :                     ;   screen's code
(1)   12/    3B94 :                     ; --------------------------------------------------------
(1)   13/    3B94 :                     
(1)   14/    3B94 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   14/    3B94 : =$3B94               MD_SCREEN00 label *
(1)   14/    3B94 :                     
(1)   14/    3B94 :                     mctopscrn:
(1)   14/    3B94 :                     mcscrn_s:
(1)   14/    3B94 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/    3B94 :                     ; ===========================================================================
(2)    2/    3B94 :                     ; ----------------------------------------------------------------
(2)    3/    3B94 :                     ; SCREEN CODE
(2)    4/    3B94 :                     ; ----------------------------------------------------------------
(2)    5/    3B94 :                     
(2)    6/    3B94 :                     ; ====================================================================
(2)    7/    3B94 :                     ; ------------------------------------------------------
(2)    8/    3B94 :                     ; Variables
(2)    9/    3B94 :                     ; ------------------------------------------------------
(2)   10/    3B94 :                     
(2)   11/    3B94 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/    3B94 :                     
(2)   13/    3B94 :                     ; ====================================================================
(2)   14/    3B94 :                     ; ------------------------------------------------------
(2)   15/    3B94 :                     ; Structs
(2)   16/    3B94 :                     ; ------------------------------------------------------
(2)   17/    3B94 :                     
(2)   18/    3B94 :                     ; ----------------------------------------------
(2)   19/    3B94 :                     ; VRAM Setup
(2)   20/    3B94 :                     ; ----------------------------------------------
(2)   21/    3B94 :                     
(2)   22/    3B94 :                     ; 			memory 2		; Cell $0002
(2)   23/    3B94 :                     ; vramLoc_Backgrnd	ds.b $4C2
(2)   24/    3B94 :                     ; 			endmemory
(2)   25/    3B94 :                     
(2)   26/    3B94 :                     ; ====================================================================
(2)   27/    3B94 :                     ; ------------------------------------------------------
(2)   28/    3B94 :                     ; This screen's RAM
(2)   29/    3B94 :                     ; ------------------------------------------------------
(2)   30/    3B94 :                     
(2)   31/    3B94 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   31/    3B94 : =$3B94               GLBL_LASTPC     := *
(2)   31/    3B94 :                                     dephase
(2)   31/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   31/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   32/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   33/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   34/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   35/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   35/    3B9C :                     .here:          dephase
(2)   35/    3B9C :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/    3B94 :                                     phase GLBL_LASTPC
(2)   36/    3B94 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   37/    3B94 :                     
(2)   38/    3B94 :                     ; ====================================================================
(2)   39/    3B94 :                     ; ------------------------------------------------------
(2)   40/    3B94 :                     ; Init
(2)   41/    3B94 :                     ; ------------------------------------------------------
(2)   42/    3B94 :                     
(2)   43/    3B94 : 6100 CCAA           		bsr	Video_DisplayOff
(2)   44/    3B98 : 6100 DA60           		bsr	System_Default
(2)   45/    3B9C :                     	; ----------------------------------------------
(2)   46/    3B9C : 41FA 00A2           		lea	file_scrn1_main(pc),a0			; Load MAIN DATA bank
(2)   47/    3BA0 : 6100 DD5A           		bsr	System_SetDataBank
(2)   48/    3BA4 : 6100 DA46           		bsr	System_SramInit
(2)   49/    3BA8 : 52B8 D7FC           		addq.l	#1,(RAM_Save_Counter).w			; Temporal counter
(2)   50/    3BAC : 6100 DA44           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   51/    3BB0 :                     	; ----------------------------------------------
(2)   52/    3BB0 :                     	; Load PRINT
(2)   53/    3BB0 : 203C 0003 1A14      		move.l	#ASCII_FONT,d0				; d0 - Font data
(2)   54/    3BB6 : 323C 05A0           		move.w	#DEF_PrintVram,d1
(2)   55/    3BBA : 6100 D4AC           		bsr	Video_PrintInit
(2)   56/    3BBE : 203C 0003 2614      		move.l	#ASCII_FONT_W,d0
(2)   57/    3BC4 : 323C 04E0           		move.w	#DEF_PrintVramW,d1
(2)   58/    3BC8 : 6100 D498           		bsr	Video_PrintInitW
(2)   59/    3BCC : 6100 D4A4           		bsr	Video_PrintDefPal_Fade
(2)   60/    3BD0 :                     	; ----------------------------------------------
(2)   61/    3BD0 : 41FA 0080           		lea	str_MenuText(pc),a0			; Print the title string
(2)   62/    3BD4 : 7001                		moveq	#1,d0					; X/Y positions 1,1
(2)   63/    3BD6 : 7201                		moveq	#1,d1
(2)   64/    3BD8 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; FG VRAM location
(2)   65/    3BDC : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)   66/    3BE2 : 6100 D59E           		bsr	Video_PrintW
(2)   67/    3BE6 : 6142                		bsr	.print_cursor				; Draw counter
(2)   68/    3BE8 : 6100 CC4A           		bsr	Video_DisplayOn
(2)   69/    3BEC :                     	; ----------------------------------------------
(2)   70/    3BEC : 6100 D39A           		bsr	Video_FadeIn_Full
(2)   71/    3BF0 :                     
(2)   72/    3BF0 :                     ; ====================================================================
(2)   73/    3BF0 :                     ; ------------------------------------------------------
(2)   74/    3BF0 :                     ; Loop
(2)   75/    3BF0 :                     ; ------------------------------------------------------
(2)   76/    3BF0 :                     
(2)   77/    3BF0 :                     .loop:
(2)   78/    3BF0 : 6100 D900           		bsr	System_Render
(2)   79/    3BF4 : 6134                		bsr	.print_cursor
(2)   80/    3BF6 :                     
(2)   85/    3BF6 : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)   86/    3BFA : 3E2E 0004           		move.w	on_press(a6),d7
(2)   87/    3BFE : 0807 0007           		btst	#bitJoyStart,d7
(2)   88/    3C02 : 67EC                		beq.s	.loop
(2)   89/    3C04 : 6100 D394           		bsr	Video_FadeOut_Full
(2)   90/    3C08 : 7000                		moveq	#0,d0
(2)   91/    3C0A : 3038 B800           		move.w	(RAM_SC0_CurrOption).w,d0
(2)   92/    3C0E : D040                		add.w	d0,d0
(2)   93/    3C10 : 31FB 0006 E994      		move.w	.ex_mode(pc,d0.w),(RAM_ScreenMode).w
(2)   94/    3C16 : 4E75                		rts
(2)   95/    3C18 :                     
(2)   96/    3C18 :                     .ex_mode:
(2)   97/    3C18 : 0007                		dc.w 7
(2)   98/    3C1A : 0007                		dc.w 7
(2)   99/    3C1C : 0007                		dc.w 7
(2)  100/    3C1E : 0007                		dc.w 7
(2)  101/    3C20 : 0007                		dc.w 7
(2)  102/    3C22 :                     
(2)  103/    3C22 :                     ; ------------------------------------------------------
(2)  104/    3C22 :                     
(2)  105/    3C22 :                     .exit_shell:
(2)  106/    3C22 : 6100 D376           		bsr	Video_FadeOut_Full
(2)  107/    3C26 : 6000 DCA2           		bra	System_MdMcd_ExitShell
(2)  108/    3C2A :                     
(2)  109/    3C2A :                     ; ------------------------------------------------------
(2)  110/    3C2A :                     ; Show framecounter and input
(2)  111/    3C2A :                     ; ------------------------------------------------------
(2)  112/    3C2A :                     
(2)  113/    3C2A :                     .print_cursor:
(2)  114/    3C2A : 41FA 003E           		lea	str_InputMe(pc),a0
(2)  115/    3C2E : 7001                		moveq	#1,d0
(2)  116/    3C30 : 7203                		moveq	#3,d1
(2)  117/    3C32 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  118/    3C36 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)  119/    3C3C : 6000 D544           		bra	Video_PrintW
(2)  120/    3C40 :                     
(2)  121/    3C40 :                     ; ====================================================================
(2)  122/    3C40 :                     ; ------------------------------------------------------
(2)  123/    3C40 :                     ; DATA asset locations
(2)  124/    3C40 :                     ; ------------------------------------------------------
(2)  125/    3C40 :                     
(2)  126/    3C40 :                     file_scrn1_main:
(2)  127/    3C40 : 0000 4534           		dc.l DATA_BANK0
(2)  128/    3C44 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             3C4A : 494E 2E42 494E 00 
(2)  129/    3C51 :                     		align 2
(2)  130/    3C52 :                     ; file_scrn1_mars:
(2)  131/    3C52 :                     ; 		dc.l DATA_BANK1
(2)  132/    3C52 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  133/    3C52 :                     ; 		align 2
(2)  134/    3C52 :                     
(2)  135/    3C52 :                     ; ====================================================================
(2)  136/    3C52 :                     ; ------------------------------------------------------
(2)  137/    3C52 :                     ; Objects
(2)  138/    3C52 :                     ; ------------------------------------------------------
(2)  139/    3C52 :                     
(2)  140/    3C52 :                     ; ====================================================================
(2)  141/    3C52 :                     ; ------------------------------------------------------
(2)  142/    3C52 :                     ; Custom VBlank
(2)  143/    3C52 :                     ; ------------------------------------------------------
(2)  144/    3C52 :                     
(2)  145/    3C52 :                     ; ------------------------------------------------------
(2)  146/    3C52 :                     ; Custom HBlank
(2)  147/    3C52 :                     ; ------------------------------------------------------
(2)  148/    3C52 :                     
(2)  149/    3C52 :                     ; ====================================================================
(2)  150/    3C52 :                     ; ------------------------------------------------------
(2)  151/    3C52 :                     ; Includes for this screen
(2)  152/    3C52 :                     ; ------------------------------------------------------
(2)  153/    3C52 :                     
(2)  154/    3C52 :                     ; ====================================================================
(2)  155/    3C52 :                     ; ------------------------------------------------------
(2)  156/    3C52 :                     ; Small data section
(2)  157/    3C52 :                     ; ------------------------------------------------------
(2)  158/    3C52 :                     
(2)  159/    3C52 :                     ; str_MenuCursorOff:
(2)  160/    3C52 :                     ; 		dc.b "   ",0
(2)  161/    3C52 :                     ; 		align 2
(2)  162/    3C52 :                     ; str_MenuCursor:
(2)  163/    3C52 :                     ; 		dc.b "-->",0
(2)  164/    3C52 :                     ; 		align 2
(2)  165/    3C52 :                     
(2)  166/    3C52 :                     str_MenuText:
(2)  167/    3C52 : 4E69 6B6F 6E61      		dc.b "Nikona screen template",$0A
             3C58 : 2073 6372 6565 
             3C5E : 6E20 7465 6D70 
             3C64 : 6C61 7465 0A       
(2)  168/    3C69 : 00                  		dc.b 0
(2)  169/    3C6A :                     		align 2
(2)  170/    3C6A :                     str_InputMe:
(2)  171/    3C6A : 83FF D7DC           		dc.l pstr_mem(3,RAM_Framecount)
(2)  172/    3C6E : 20                  		dc.b " "
(2)  173/    3C6F : 81FF D8FA           		dc.l pstr_mem(1,Controller_1+on_hold)
(2)  174/    3C73 : 20                  		dc.b " "
(2)  175/    3C74 : 81FF D90A           		dc.l pstr_mem(1,Controller_2+on_hold)
(2)  176/    3C78 : 00                  		dc.b 0
(2)  177/    3C79 :                     		align 2
(2)  178/    3C7A :                     
(2)  179/    3C7A :                     ; ====================================================================
(2)  180/    3C7A :                     
(1)   14/    3C7A :                     mcscrn_e:
(1)   14/    3C7A :                     ; Md_Screen00_e:
(1)   14/    3C7A : =$3C7A               MD_SCREEN00_E label *
(1)   14/    3C7A :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   15/    3C7A :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/    3C7A :                     ; 	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/    3C7A :                     ; 	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/    3C7A :                     ; 	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/    3C7A : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   19/    3C7A : =$3C7A               MD_SCREEN07 label *
(1)   19/    3C7A :                     
(1)   19/    3C7A :                     mctopscrn:
(1)   19/    3C7A :                     mcscrn_s:
(1)   19/    3C7A :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/    3C7A :                     ; ===========================================================================
(2)    2/    3C7A :                     ; ----------------------------------------------------------------
(2)    3/    3C7A :                     ; GEMA SOUND TESTER
(2)    4/    3C7A :                     ; ----------------------------------------------------------------
(2)    5/    3C7A :                     
(2)    6/    3C7A :                     ; ====================================================================
(2)    7/    3C7A :                     ; ------------------------------------------------------
(2)    8/    3C7A :                     ; Settings
(2)    9/    3C7A :                     ; ------------------------------------------------------
(2)   10/    3C7A :                     
(2)   11/    3C7A : =$0                  VIEW_GEMAINFO		equ False		; ** Using this causes loss of DAC quality **
(2)   12/    3C7A : =$1                  VIEW_FAIRY		equ True		; Show status Dodo/Mifi/Fifi
(2)   13/    3C7A :                     
(2)   14/    3C7A :                     ; ====================================================================
(2)   15/    3C7A :                     ; ------------------------------------------------------
(2)   16/    3C7A :                     ; Variables
(2)   17/    3C7A :                     ; ------------------------------------------------------
(2)   18/    3C7A :                     
(2)   19/    3C7A : =$7                  MAX_SNDPICK		equ 7
(2)   20/    3C7A : =$10                 SET_SNDVIEWY		equ 16
(2)   21/    3C7A :                     
(2)   22/    3C7A :                     ; ====================================================================
(2)   23/    3C7A :                     ; ------------------------------------------------------
(2)   24/    3C7A :                     ; Structs
(2)   25/    3C7A :                     ; ------------------------------------------------------
(2)   26/    3C7A :                     
(2)   27/    3C7A :  (MACRO-2)           			memory 2
(2)   27/    3C7A : =$3C7A               GLBL_LASTPC     := *
(2)   27/    3C7A :                                     dephase
(2)   27/       2 :                                     phase 2
(2)   27/       2 : =$2                  GLBL_LASTORG    := *
(2)   28/       2 :                     setVram_Dodo		ds.b $30
(2)   29/      32 :                     setVram_Mimi		ds.b $30
(2)   30/      62 :                     setVram_Fifi		ds.b $30
(2)   31/      92 :  (MACRO-2)           			endmemory
(2)   31/    3D0A :                     .here:          dephase
(2)   31/    3D0A :                                     ds.b -(.here-GLBL_LASTORG)
(2)   31/    3C7A :                                     phase GLBL_LASTPC
(2)   32/    3C7A :                     
(2)   33/    3C7A :                     ; ====================================================================
(2)   34/    3C7A :                     ; ------------------------------------------------------
(2)   35/    3C7A :                     ; This mode's RAM
(2)   36/    3C7A :                     ; ------------------------------------------------------
(2)   37/    3C7A :                     
(2)   38/    3C7A :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   38/    3C7A : =$3C7A               GLBL_LASTPC     := *
(2)   38/    3C7A :                                     dephase
(2)   38/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   38/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   39/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   40/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   41/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   42/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   43/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   44/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   45/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   46/FFFFFFFFFFFFB868 :                     
(2)   47/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   48/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   49/FFFFFFFFFFFFB86C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   50/FFFFFFFFFFFFB86E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   51/FFFFFFFFFFFFB870 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   52/FFFFFFFFFFFFB872 :                     RAM_GemaStatus		ds.w 4
(2)   53/FFFFFFFFFFFFB87A :                     RAM_FairyVars		ds.w 1
(2)   54/FFFFFFFFFFFFB87C :                     RAM_CurrBeats		ds.w 1
(2)   55/FFFFFFFFFFFFB87E :                     RAM_Copy_fmSpecial	ds.w 1
(2)   56/FFFFFFFFFFFFB880 :                     RAM_Copy_HasDac		ds.w 1
(2)   57/FFFFFFFFFFFFB882 :                     
(2)   58/FFFFFFFFFFFFB882 :                     sizeof_thisbuff		ds.l 0
(2)   59/FFFFFFFFFFFFB888 :  (MACRO-2)           			endmemory
(2)   59/    3D02 :                     .here:          dephase
(2)   59/    3D02 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   59/    3C7A :                                     phase GLBL_LASTPC
(2)   60/    3C7A :                     
(2)   61/    3C7A :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   62/    3C7A :                     
(2)   63/    3C7A :                     ; ====================================================================
(2)   64/    3C7A :                     ; ------------------------------------------------------
(2)   65/    3C7A :                     ; Init
(2)   66/    3C7A :                     ; ------------------------------------------------------
(2)   67/    3C7A :                     
(2)   68/    3C7A : 6100 CBC4           		bsr	Video_DisplayOff
(2)   69/    3C7E : 6100 D97A           		bsr	System_Default
(2)   70/    3C82 :                     	; ----------------------------------------------
(2)   71/    3C82 :                     	; Load assets
(2)   72/    3C82 : 41FA 02FC           		lea	file_tscrn_main(pc),a0		; ** LOAD BANK **
(2)   73/    3C86 : 6100 DC74           		bsr	System_SetDataBank
(2)   74/    3C8A :                     	; ----------------------------------------------
(2)   75/    3C8A : 203C 0003 1A14      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   76/    3C90 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   77/    3C94 : 6100 D3D2           		bsr	Video_PrintInit
(2)   78/    3C98 : 203C 0003 2614      		move.l	#ASCII_FONT_W,d0
(2)   79/    3C9E : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   80/    3CA2 : 6100 D3BE           		bsr	Video_PrintInitW
(2)   81/    3CA6 : 41F8 D610           		lea	(RAM_PaletteFade+$40).w,a0
(2)   82/    3CAA : 30BC 0000           		move.w	#$0000,(a0)
(2)   83/    3CAE : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   84/    3CB4 : 317C 00A0 0004      		move.w	#$00A0,4(a0)
(2)   85/    3CBA : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   86/    3CC0 : D0FC 0020           		adda	#$20,a0
(2)   87/    3CC4 : 30BC 0000           		move.w	#$0000,(a0)
(2)   88/    3CC8 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)   89/    3CCE : 317C 0AAA 0004      		move.w	#$0AAA,4(a0)
(2)   90/    3CD4 : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)   91/    3CDA : 41F9 0003 4F96      		lea	(objPal_Dodo+2),a0
(2)   92/    3CE0 : 7001                		moveq	#1,d0
(2)   93/    3CE2 : 323C 000F           		move.w	#15,d1
(2)   94/    3CE6 : 6100 D304           		bsr	Video_FadePal
(2)   95/    3CEA : 41FA 03F0           		lea	ArtList_Stuff(pc),a0
(2)   96/    3CEE : 6100 CDCA           		bsr	Video_LoadArt_List
(2)   97/    3CF2 :                     	; ----------------------------------------------
(2)   98/    3CF2 : 41FA 0402           		lea	str_TesterTitle(pc),a0
(2)   99/    3CF6 : 7006                		moveq	#6,d0
(2)  100/    3CF8 : 7202                		moveq	#2,d1
(2)  101/    3CFA : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  102/    3CFE : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  103/    3D04 : 6100 D47C           		bsr	Video_PrintW
(2)  104/    3D08 : 41FA 040A           		lea	str_TesterInfo(pc),a0
(2)  106/    3D0C : 7006                		moveq	#6,d0
(2)  110/    3D0E : 7207                		moveq	#7,d1
(2)  111/    3D10 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  112/    3D14 : 6100 D37A           		bsr	Video_Print
(2)  113/    3D18 : 41FA 0416           		lea	str_Instruc(pc),a0
(2)  114/    3D1C : 7002                		moveq	#2,d0
(2)  115/    3D1E : 7215                		moveq	#21,d1
(2)  116/    3D20 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  117/    3D24 : 6100 D36A           		bsr	Video_Print
(2)  118/    3D28 : 6100 017A           		bsr	.gema_viewinit
(2)  119/    3D2C :                     ; 		bsr	.show_cursor
(2)  120/    3D2C :                     	; ----------------------------------------------
(2)  121/    3D2C : 6100 C54A           		bsr	gemaReset				; Load default GEMA sound data
(2)  122/    3D30 :                     ; 		moveq	#1,d0
(2)  123/    3D30 :                     ; 		moveq	#%10,d1
(2)  124/    3D30 :                     ; 		bsr	Video_Resolution
(2)  125/    3D30 :                     	; ----------------------------------------------
(2)  126/    3D30 : 6100 0132           		bsr	.show_me
(2)  127/    3D34 : 6100 0186           		bsr	.gema_view
(2)  128/    3D38 :                     ; 		bsr	.steal_vars
(2)  129/    3D38 :                     	; ----------------------------------------------
(2)  130/    3D38 : 6100 CAFA           		bsr	Video_DisplayOn
(2)  131/    3D3C : 6100 DBD0           		bsr	Object_Run
(2)  132/    3D40 : 6100 C896           		bsr	Video_BuildSprites
(2)  133/    3D44 : 6100 D7AC           		bsr	System_Render
(2)  134/    3D48 : 6100 D23E           		bsr	Video_FadeIn_Full
(2)  135/    3D4C :                     
(2)  136/    3D4C :                     ; ====================================================================
(2)  137/    3D4C :                     ; ------------------------------------------------------
(2)  138/    3D4C :                     ; Loop
(2)  139/    3D4C :                     ; ------------------------------------------------------
(2)  140/    3D4C :                     
(2)  141/    3D4C :                     .loop:
(2)  142/    3D4C : 6100 D7A4           		bsr	System_Render
(2)  143/    3D50 :                     ; 		bsr	.show_cursor
(2)  144/    3D50 : 6100 016A           		bsr	.gema_view
(2)  145/    3D54 : 6100 DBB8           		bsr	Object_Run
(2)  146/    3D58 : 6100 C87E           		bsr	Video_BuildSprites
(2)  147/    3D5C :                     
(2)  148/    3D5C :                     	; NEW controls
(2)  149/    3D5C : 4DF8 D8F8           		lea	(Controller_1).w,a6
(2)  150/    3D60 :                     	; LEFT/RIGHT
(2)  151/    3D60 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  152/    3D64 : 3C07                		move.w	d7,d6
(2)  153/    3D66 : 0246 0080           		andi.w	#JoyStart,d6
(2)  154/    3D6A : 6600 00C4           		bne	.exit_this
(2)  155/    3D6E : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  156/    3D72 : 6718                		beq.s	.lr_seq
(2)  157/    3D74 : 7001                		moveq	#1,d0
(2)  158/    3D76 : 0247 0004           		andi.w	#JoyLeft,d7
(2)  159/    3D7A : 6708                		beq.s	.lr_right
(2)  160/    3D7C : 4A78 B86E           		tst.w	(RAM_GemaSeq).w
(2)  161/    3D80 : 670A                		beq.s	.lr_seq
(2)  162/    3D82 : 4440                		neg.w	d0
(2)  163/    3D84 :                     .lr_right:
(2)  164/    3D84 : D178 B86E           		add.w	d0,(RAM_GemaSeq).w
(2)  165/    3D88 : 6100 00DA           		bsr	.show_me
(2)  166/    3D8C :                     .lr_seq:
(2)  167/    3D8C :                     
(2)  168/    3D8C :                     	; UP/DOWN
(2)  169/    3D8C : 3E2E 0004           		move.w	on_press(a6),d7
(2)  170/    3D90 : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  171/    3D94 : 6718                		beq.s	.ud_seq
(2)  172/    3D96 : 7001                		moveq	#1,d0
(2)  173/    3D98 :                     ; 		andi.w	#JoyUp,d7
(2)  174/    3D98 : 0247 0001           		andi.w	#JoyUp,d7
(2)  175/    3D9C : 6708                		beq.s	.ud_right
(2)  176/    3D9E : 4A78 B870           		tst.w	(RAM_GemaBlk).w
(2)  177/    3DA2 : 670A                		beq.s	.ud_seq
(2)  178/    3DA4 : 4440                		neg.w	d0
(2)  179/    3DA6 :                     .ud_right:
(2)  180/    3DA6 : D178 B870           		add.w	d0,(RAM_GemaBlk).w
(2)  181/    3DAA : 6100 00B8           		bsr	.show_me
(2)  182/    3DAE :                     .ud_seq:
(2)  183/    3DAE :                     
(2)  184/    3DAE :                     	; X/Y
(2)  185/    3DAE : 3E2E 0004           		move.w	on_press(a6),d7
(2)  186/    3DB2 : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  187/    3DB6 : 6718                		beq.s	.xy_seq
(2)  188/    3DB8 : 7001                		moveq	#1,d0
(2)  189/    3DBA : 0247 0400           		andi.w	#JoyX,d7
(2)  190/    3DBE : 6708                		beq.s	.xy_right
(2)  191/    3DC0 : 4A78 B86C           		tst.w	(RAM_GemaIndx).w
(2)  192/    3DC4 : 670A                		beq.s	.xy_seq
(2)  193/    3DC6 : 4440                		neg.w	d0
(2)  194/    3DC8 :                     .xy_right:
(2)  195/    3DC8 : D178 B86C           		add.w	d0,(RAM_GemaIndx).w
(2)  196/    3DCC : 6100 0096           		bsr	.show_me
(2)  197/    3DD0 :                     .xy_seq:
(2)  198/    3DD0 :                     
(2)  199/    3DD0 :                     	; C BUTTON
(2)  200/    3DD0 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  201/    3DD4 : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  202/    3DD8 : 672E                		beq.s	.c_press
(2)  203/    3DDA : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  204/    3DDE :                     
(2)  205/    3DDE : 341D                		move.w	(a5)+,d2
(2)  206/    3DE0 : 0247 0100           		andi.w	#JoyZ,d7
(2)  207/    3DE4 : 6702                		beq.s	.not_auto
(2)  208/    3DE6 : 74FF                		moveq	#-1,d2
(2)  209/    3DE8 :                     .not_auto:
(2)  210/    3DE8 : 301D                		move.w	(a5)+,d0
(2)  211/    3DEA : 321D                		move.w	(a5)+,d1
(2)  212/    3DEC : 6100 C572           		bsr	gemaPlaySeq
(2)  213/    3DF0 :                     
(2)  214/    3DF0 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  215/    3DF4 : 3200                		move.w	d0,d1
(2)  216/    3DF6 : D241                		add.w	d1,d1
(2)  217/    3DF8 : 41FA 02B2           		lea	exgema_beats(pc),a0
(2)  218/    3DFC : 3030 1000           		move.w	(a0,d1.w),d0
(2)  219/    3E00 : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  220/    3E04 : 6100 C5F2           		bsr	gemaSetBeats
(2)  221/    3E08 :                     .c_press:
(2)  222/    3E08 :                     	; B BUTTON
(2)  223/    3E08 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  224/    3E0C : 0247 0010           		andi.w	#JoyB,d7
(2)  225/    3E10 : 670C                		beq.s	.b_press
(2)  226/    3E12 : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  227/    3E16 : 321D                		move.w	(a5)+,d1
(2)  228/    3E18 : 301D                		move.w	(a5)+,d0
(2)  229/    3E1A : 6100 C574           		bsr	gemaStopSeq
(2)  230/    3E1E :                     .b_press:
(2)  231/    3E1E : 3E2E 0004           		move.w	on_press(a6),d7
(2)  232/    3E22 : 0247 0040           		andi.w	#JoyA,d7
(2)  233/    3E26 : 6704                		beq.s	.a_press
(2)  234/    3E28 : 6100 C57C           		bsr	gemaStopAll
(2)  235/    3E2C :                     .a_press:
(2)  236/    3E2C :                     
(2)  237/    3E2C :                     
(2)  238/    3E2C :                     ; 		move.w	on_hold(a6),d7
(2)  239/    3E2C :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  240/    3E2C :                     ; 		bne.s	.n_up
(2)  241/    3E2C :                     ; 		move.w	on_press(a6),d7
(2)  242/    3E2C :                     ; 		btst	#bitJoyDown,d7
(2)  243/    3E2C :                     ; 		beq.s	.n_down
(2)  244/    3E2C :                     ; 		addq.w	#1,(a5)
(2)  245/    3E2C :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  246/    3E2C :                     ; 		ble.s	.n_downd
(2)  247/    3E2C :                     ; 		clr.w	(a5)
(2)  248/    3E2C :                     ; .n_downd:
(2)  249/    3E2C :                     ; 		bsr.s	.show_me
(2)  250/    3E2C :                     ; .n_down:
(2)  251/    3E2C :                     ; 		move.w	on_press(a6),d7
(2)  252/    3E2C :                     ; 		btst	#bitJoyUp,d7
(2)  253/    3E2C :                     ; 		beq.s	.n_up
(2)  254/    3E2C :                     ; 		subq.w	#1,(a5)
(2)  255/    3E2C :                     ; 		bpl.s	.n_ups
(2)  256/    3E2C :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  257/    3E2C :                     ; .n_ups:
(2)  258/    3E2C :                     ; 		bsr.s	.show_me
(2)  259/    3E2C :                     ; .n_up:
(2)  260/    3E2C :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  261/    3E2C :                     ; 		lsl.w	#2,d7
(2)  262/    3E2C :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  263/    3E2C :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  264/    3E2C :                     ; 		bpl.s	.n_cbtn
(2)  265/    3E2C :                     
(2)  266/    3E2C :                     ; .n_cbtn:
(2)  267/    3E2C : 6000 FF1E           		bra	.loop
(2)  268/    3E30 :                     
(2)  269/    3E30 :                     .exit_this:
(2)  270/    3E30 : 6100 D168           		bsr	Video_FadeOut_Full
(2)  271/    3E34 :                     	; Stop ALL sequences
(2)  272/    3E34 : 6100 C570           		bsr	gemaStopAll
(2)  273/    3E38 :                     	rept 4
(2)  274/    3E38 :                     		bsr	System_Render		; Wait 4 frames...
(2)  275/    3E38 :                     	endm
(2)  274/    3E38 : 6100 D6B8           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3E3C : 6100 D6B4           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3E40 : 6100 D6B0           		bsr	System_Render		; Wait 4 frames...
(2)  274/    3E44 : 6100 D6AC           		bsr	System_Render		; Wait 4 frames...
(2)  276/    3E48 : 31FC 0000 E994      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  277/    3E4E : 4E75                		rts				; <-- RTS
(2)  278/    3E50 :                     
(2)  279/    3E50 :                     ; ------------------------------------------------------
(2)  280/    3E50 :                     
(2)  281/    3E50 :                     .exit_shell:
(2)  282/    3E50 : 6100 D148           		bsr	Video_FadeOut_Full
(2)  283/    3E54 : 6100 C550           		bsr	gemaStopAll
(2)  284/    3E58 : 6100 D698           		bsr	System_Render
(2)  285/    3E5C : 6100 D694           		bsr	System_Render
(2)  286/    3E60 : 6000 DA68           		bra	System_MdMcd_ExitShell
(2)  287/    3E64 :                     
(2)  288/    3E64 :                     ; ------------------------------------------------------
(2)  289/    3E64 :                     
(2)  290/    3E64 :                     .show_me:
(2)  291/    3E64 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  292/    3E68 : 3200                		move.w	d0,d1
(2)  293/    3E6A : D241                		add.w	d1,d1
(2)  294/    3E6C : 41FA 023E           		lea	exgema_beats(pc),a0
(2)  295/    3E70 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  296/    3E74 : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  297/    3E78 :                     
(2)  298/    3E78 : 41FA 06AE           		lea	str_ShowBeats(pc),a0
(2)  300/    3E7C : 700D                		moveq	#13,d0
(2)  304/    3E7E : 720C                		moveq	#12,d1
(2)  305/    3E80 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  306/    3E84 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  307/    3E8A : 6100 D204           		bsr	Video_Print
(2)  308/    3E8E : 41FA 0684           		lea	str_ShowVars(pc),a0
(2)  310/    3E92 : 7007                		moveq	#7,d0
(2)  314/    3E94 : 7209                		moveq	#9,d1
(2)  315/    3E96 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  316/    3E9A : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  317/    3EA0 : 6000 D2E0           		bra	Video_PrintW
(2)  318/    3EA4 :                     
(2)  319/    3EA4 :                     ; ; ------------------------------------------------------
(2)  320/    3EA4 :                     ;
(2)  321/    3EA4 :                     ; .jump_list:
(2)  322/    3EA4 :                     ; 		bra.w	.nothing
(2)  323/    3EA4 :                     ; 		bra.w	.option_1
(2)  324/    3EA4 :                     ; 		bra.w	.option_2
(2)  325/    3EA4 :                     ; 		bra.w	.option_3
(2)  326/    3EA4 :                     ; 		bra.w	.option_4
(2)  327/    3EA4 :                     ; 		bra.w	.option_5
(2)  328/    3EA4 :                     ; 		bra.w	.option_6
(2)  329/    3EA4 :                     ; 		bra.w	.option_7
(2)  330/    3EA4 :                     ;
(2)  331/    3EA4 :                     ; ; ------------------------------------------------------
(2)  332/    3EA4 :                     ; ; OPTION 0
(2)  333/    3EA4 :                     ; ; ------------------------------------------------------
(2)  334/    3EA4 :                     ;
(2)  335/    3EA4 :                     ; .nothing:
(2)  336/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  337/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  338/    3EA4 :                     ; 		beq.s	.no_press
(2)  339/    3EA4 :                     ; 		bsr.s	.show_me
(2)  340/    3EA4 :                     ; 		bra	gemaTest
(2)  341/    3EA4 :                     ; .no_press:
(2)  342/    3EA4 :                     ; 		rts
(2)  343/    3EA4 :                     ;
(2)  344/    3EA4 :                     ; ------------------------------------------------------
(2)  345/    3EA4 :                     ; OPTION 1
(2)  346/    3EA4 :                     ; ------------------------------------------------------
(2)  347/    3EA4 :                     
(2)  348/    3EA4 :                     ; 		bra.s	.show_me
(2)  349/    3EA4 :                     ; .option1_args:
(2)  350/    3EA4 :                     ; 		move.w	on_hold(a6),d7
(2)  351/    3EA4 :                     ; 		move.w	d7,d6
(2)  352/    3EA4 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  353/    3EA4 :                     ; 		beq.s	.no_press
(2)  354/    3EA4 :                     ; 		btst	#bitJoyB,d7
(2)  355/    3EA4 :                     ; 		beq.s	.d2_opt
(2)  356/    3EA4 :                     ; 		adda	#2,a5
(2)  357/    3EA4 :                     ; .d2_opt:
(2)  358/    3EA4 :                     ; 		btst	#bitJoyC,d7
(2)  359/    3EA4 :                     ; 		beq.s	.d3_opt
(2)  360/    3EA4 :                     ; 		adda	#4,a5
(2)  361/    3EA4 :                     ; .d3_opt:
(2)  362/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  363/    3EA4 :                     ; 		btst	#bitJoyRight,d7
(2)  364/    3EA4 :                     ; 		beq.s	.op1_right
(2)  365/    3EA4 :                     ; 		addq.w	#1,(a5)
(2)  366/    3EA4 :                     ; 		bra	.show_me
(2)  367/    3EA4 :                     ; .op1_right:
(2)  368/    3EA4 :                     ; 		btst	#bitJoyLeft,d7
(2)  369/    3EA4 :                     ; 		beq.s	.op1_left
(2)  370/    3EA4 :                     ; 		subq.w	#1,(a5)
(2)  371/    3EA4 :                     ; 		bra	.show_me
(2)  372/    3EA4 :                     ; .op1_left:
(2)  373/    3EA4 :                     ; 		move.w	on_hold(a6),d7
(2)  374/    3EA4 :                     ; 		btst	#bitJoyUp,d7
(2)  375/    3EA4 :                     ; 		beq.s	.op1_down
(2)  376/    3EA4 :                     ; 		addq.w	#1,(a5)
(2)  377/    3EA4 :                     ; 		bra	.show_me
(2)  378/    3EA4 :                     ; .op1_down:
(2)  379/    3EA4 :                     ; 		btst	#bitJoyDown,d7
(2)  380/    3EA4 :                     ; 		beq.s	.op1_up
(2)  381/    3EA4 :                     ; 		subq.w	#1,(a5)
(2)  382/    3EA4 :                     ; 		bra	.show_me
(2)  383/    3EA4 :                     ; .op1_up:
(2)  384/    3EA4 :                     ;
(2)  385/    3EA4 :                     ; 		rts
(2)  386/    3EA4 :                     ;
(2)  387/    3EA4 :                     ; ; ------------------------------------------------------
(2)  388/    3EA4 :                     ; ; OPTION 2
(2)  389/    3EA4 :                     ; ; ------------------------------------------------------
(2)  390/    3EA4 :                     ;
(2)  391/    3EA4 :                     ; .option_2:
(2)  392/    3EA4 :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  393/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  394/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  395/    3EA4 :                     ; 		beq.s	.option1_args
(2)  396/    3EA4 :                     ; 		move.w	(a5)+,d0
(2)  397/    3EA4 :                     ; 		move.w	(a5)+,d1
(2)  398/    3EA4 :                     ; 		bra	gemaStopSeq
(2)  399/    3EA4 :                     ;
(2)  400/    3EA4 :                     ; ; ------------------------------------------------------
(2)  401/    3EA4 :                     ; ; OPTION 3
(2)  402/    3EA4 :                     ; ; ------------------------------------------------------
(2)  403/    3EA4 :                     ;
(2)  404/    3EA4 :                     ; .option_3:
(2)  405/    3EA4 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  406/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  407/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  408/    3EA4 :                     ; 		beq	.option1_args
(2)  409/    3EA4 :                     ; 		move.w	(a5)+,d0
(2)  410/    3EA4 :                     ; 		move.w	(a5)+,d1
(2)  411/    3EA4 :                     ; 		bra	gemaFadeSeq
(2)  412/    3EA4 :                     ;
(2)  413/    3EA4 :                     ; ; ------------------------------------------------------
(2)  414/    3EA4 :                     ; ; OPTION 4
(2)  415/    3EA4 :                     ; ; ------------------------------------------------------
(2)  416/    3EA4 :                     ;
(2)  417/    3EA4 :                     ; .option_4:
(2)  418/    3EA4 :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  419/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  420/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  421/    3EA4 :                     ; 		beq	.option1_args
(2)  422/    3EA4 :                     ; 		move.w	(a5)+,d0
(2)  423/    3EA4 :                     ; 		move.w	(a5)+,d1
(2)  424/    3EA4 :                     ; 		bra	gemaSetSeqVol
(2)  425/    3EA4 :                     ;
(2)  426/    3EA4 :                     ; ; ------------------------------------------------------
(2)  427/    3EA4 :                     ; ; OPTION 5
(2)  428/    3EA4 :                     ; ; ------------------------------------------------------
(2)  429/    3EA4 :                     ;
(2)  430/    3EA4 :                     ; .option_5:
(2)  431/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  432/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  433/    3EA4 :                     ; 		beq.s	.no_press2
(2)  434/    3EA4 :                     ; 		bsr	.show_me
(2)  435/    3EA4 :                     ; 		bra	gemaStopAll
(2)  436/    3EA4 :                     ; .no_press2:
(2)  437/    3EA4 :                     ; 		rts
(2)  438/    3EA4 :                     ;
(2)  439/    3EA4 :                     ; ; ------------------------------------------------------
(2)  440/    3EA4 :                     ; ; OPTION 6
(2)  441/    3EA4 :                     ; ; ------------------------------------------------------
(2)  442/    3EA4 :                     ;
(2)  443/    3EA4 :                     ; .option_6:
(2)  444/    3EA4 :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  445/    3EA4 :                     ; 		move.w	on_hold(a6),d7
(2)  446/    3EA4 :                     ; 		andi.w	#JoyA,d7
(2)  447/    3EA4 :                     ; 		beq.s	.no_press2
(2)  448/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  449/    3EA4 :                     ; 		btst	#bitJoyRight,d7
(2)  450/    3EA4 :                     ; 		beq.s	.op2_right
(2)  451/    3EA4 :                     ; 		addq.w	#1,(a5)
(2)  452/    3EA4 :                     ; 		bra	.show_me_2
(2)  453/    3EA4 :                     ; .op2_right:
(2)  454/    3EA4 :                     ; 		btst	#bitJoyLeft,d7
(2)  455/    3EA4 :                     ; 		beq.s	.op2_left
(2)  456/    3EA4 :                     ; 		subq.w	#1,(a5)
(2)  457/    3EA4 :                     ; 		bsr	.show_me_2
(2)  458/    3EA4 :                     ; .op2_left:
(2)  459/    3EA4 :                     ; 		move.w	on_hold(a6),d7
(2)  460/    3EA4 :                     ; 		btst	#bitJoyDown,d7
(2)  461/    3EA4 :                     ; 		beq.s	.op2_down
(2)  462/    3EA4 :                     ; 		addq.w	#1,(a5)
(2)  463/    3EA4 :                     ; 		bsr	.show_me_2
(2)  464/    3EA4 :                     ; .op2_down:
(2)  465/    3EA4 :                     ; 		btst	#bitJoyUp,d7
(2)  466/    3EA4 :                     ; 		beq.s	.op2_up
(2)  467/    3EA4 :                     ; 		subq.w	#1,(a5)
(2)  468/    3EA4 :                     ; 		bsr	.show_me_2
(2)  469/    3EA4 :                     ; .op2_up:
(2)  470/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  471/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  472/    3EA4 :                     ; 		beq.s	.no_press2
(2)  473/    3EA4 :                     ; .show_me_2:
(2)  474/    3EA4 :                     ; 		bsr	.show_me
(2)  475/    3EA4 :                     ; 		move.w	(a5),d0
(2)  476/    3EA4 :                     ; 		bra	gemaSetBeats
(2)  477/    3EA4 :                     ;
(2)  478/    3EA4 :                     ; ; ------------------------------------------------------
(2)  479/    3EA4 :                     ; ; OPTION 7
(2)  480/    3EA4 :                     ; ; ------------------------------------------------------
(2)  481/    3EA4 :                     ;
(2)  482/    3EA4 :                     ; .option_7:
(2)  483/    3EA4 :                     ; 		move.w	on_press(a6),d7
(2)  484/    3EA4 :                     ; 		btst	#bitJoyStart,d7
(2)  485/    3EA4 :                     ; 		beq.s	.no_press2
(2)  486/    3EA4 :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  487/    3EA4 :                     ; 		rts
(2)  488/    3EA4 :                     
(2)  489/    3EA4 :                     ; ------------------------------------------------------
(2)  490/    3EA4 :                     
(2)  491/    3EA4 :                     .gema_viewinit:
(2)  493/    3EA4 : 203C 0000 3F92      		move.l	#obj_Fairy,d0		; <-- If you don't like the fairies comment out or
(2)  494/    3EAA : 7200                		moveq	#0,d1			; delete all of this
(2)  495/    3EAC : 6100 DA92           		bsr	Object_Make		;
(2)  496/    3EB0 : 5241                		addq.w	#1,d1			;
(2)  497/    3EB2 : 6100 DA8C           		bsr	Object_Make		;
(2)  498/    3EB6 : 5241                		addq.w	#1,d1			;
(2)  499/    3EB8 : 6100 DA86           		bsr	Object_Make		; <-- until here
(2)  501/    3EBC :                     
(2)  510/    3EBC :                     
(2)  511/    3EBC :                     .gema_view:
(2)  513/    3EBC : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
             3EC2 : 1100             
(2)  514/    3EC4 : 43F8 B872           		lea	(RAM_GemaStatus),a1
(2)  515/    3EC8 : 7000                		moveq	#0,d0
(2)  516/    3ECA : 7200                		moveq	#0,d1
(2)  517/    3ECC : 7400                		moveq	#0,d2
(2)  518/    3ECE : 0839 0000 00A1      .wait:		btst	#0,(z80_bus).l
             3ED4 : 1100             
(2)  519/    3ED6 : 66F6                		bne.s	.wait
(2)  520/    3ED8 : 1039 00A0 16DF      		move.b	(z80_cpu+trkBuff_0),d0
(2)  521/    3EDE : 1239 00A0 171E      		move.b	(z80_cpu+trkBuff_1),d1
(2)  522/    3EE4 : 1439 00A0 175D      		move.b	(z80_cpu+trkBuff_2),d2
(2)  523/    3EEA : 6100 C3A2           		bsr	sndUnlockZ80
(2)  524/    3EEE : 32C0                		move.w	d0,(a1)+
(2)  525/    3EF0 : 32C1                		move.w	d1,(a1)+
(2)  526/    3EF2 : 32C2                		move.w	d2,(a1)+
(2)  528/    3EF4 :                     
(2)  558/    3EF4 :                     
(2)  619/    3EF4 :                     
(2)  620/    3EF4 : 4E75                		rts
(2)  621/    3EF6 :                     
(2)  622/    3EF6 :                     ; ----------------------------------------------
(2)  623/    3EF6 :                     
(2)  624/    3EF6 :                     .copy_me:
(2)  625/    3EF6 : 7200                		moveq	#0,d1
(2)  626/    3EF8 :                     ; 		bsr	sndLockZ80
(2)  627/    3EF8 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  628/    3EFC : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  629/    3F00 : 1010                		move.b	ztbl_Link(a0),d0
(2)  630/    3F02 :                     ; 		bsr	sndUnlockZ80
(2)  631/    3F02 : 8002                		or.b	d2,d0
(2)  632/    3F04 : 6602                		bne.s	.link_ok
(2)  633/    3F06 : 72FF                		moveq	#-1,d1
(2)  634/    3F08 :                     .link_ok:
(2)  635/    3F08 : 3281                		move.w	d1,(a1)
(2)  636/    3F0A : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  637/    3F0E : D2FC 0004           		adda	#4,a1
(2)  638/    3F12 : 51CF FFE2           		dbf	d7,.copy_me
(2)  639/    3F16 : 4E75                		rts
(2)  640/    3F18 :                     
(2)  641/    3F18 :                     ; ----------------------------------------------
(2)  642/    3F18 :                     
(2)  643/    3F18 :                     .show_table_fm:
(2)  644/    3F18 : 41F8 44B8           		lea	(strL_FmOnly),a0
(2)  645/    3F1C : 7C00                		moveq	#0,d6
(2)  646/    3F1E : 7A00                		moveq	#0,d5
(2)  647/    3F20 : 3C13                		move.w	(a3),d6
(2)  648/    3F22 : 6A06                		bpl.s	.is_fmgood
(2)  649/    3F24 : 6100 D16A           		bsr	Video_Print
(2)  650/    3F28 : 6028                		bra.s	.from_fmbad
(2)  651/    3F2A :                     .is_fmgood:
(2)  652/    3F2A : 3A06                		move.w	d6,d5
(2)  653/    3F2C : D0FC 0004           		adda	#4,a0
(2)  654/    3F30 : 0246 001F           		andi.w	#%00011111,d6
(2)  655/    3F34 : E34E                		lsl.w	#1,d6
(2)  656/    3F36 : D0C6                		adda	d6,a0
(2)  657/    3F38 : 6100 D156           		bsr	Video_Print
(2)  658/    3F3C : 3800                		move.w	d0,d4
(2)  659/    3F3E : 5440                		addq.w	#2,d0
(2)  660/    3F40 : 0245 00E0           		andi.w	#%11100000,d5
(2)  661/    3F44 : E84D                		lsr.w	#4,d5
(2)  662/    3F46 : 41F8 44F8           		lea	(strL_LazyVal),a0
(2)  663/    3F4A : D0C5                		adda	d5,a0
(2)  664/    3F4C : 6100 D142           		bsr	Video_Print
(2)  665/    3F50 : 3004                		move.w	d4,d0
(2)  666/    3F52 :                     .from_fmbad:
(2)  667/    3F52 :                     ; 		addq.w	#1,d1
(2)  668/    3F52 : 5840                		addq.w	#4,d0
(2)  669/    3F54 : D6FC 0004           		adda	#4,a3
(2)  670/    3F58 : 51CF FFBE           		dbf	d7,.show_table_fm
(2)  671/    3F5C : 4E75                		rts
(2)  672/    3F5E :                     
(2)  673/    3F5E :                     .show_table:
(2)  674/    3F5E : 41F8 41B4           		lea	(strL_NoteList),a0
(2)  675/    3F62 : 7C00                		moveq	#0,d6
(2)  676/    3F64 : 3C13                		move.w	(a3),d6
(2)  677/    3F66 : 6B08                		bmi.s	.val_bad
(2)  678/    3F68 : D0FC 0004           		adda	#4,a0
(2)  679/    3F6C : DC46                		add.w	d6,d6
(2)  680/    3F6E : D0C6                		adda	d6,a0
(2)  681/    3F70 :                     .val_bad:
(2)  682/    3F70 : 6100 D11E           		bsr	Video_Print
(2)  683/    3F74 :                     ; 		addq.w	#1,d1
(2)  684/    3F74 : 5840                		addq.w	#4,d0
(2)  685/    3F76 : D6FC 0004           		adda	#4,a3
(2)  686/    3F7A : 51CF FFE2           		dbf	d7,.show_table
(2)  687/    3F7E : 4E75                		rts
(2)  688/    3F80 :                     
(2)  689/    3F80 :                     ; ====================================================================
(2)  690/    3F80 :                     ; ------------------------------------------------------
(2)  691/    3F80 :                     ; DATA asset locations
(2)  692/    3F80 :                     ; ------------------------------------------------------
(2)  693/    3F80 :                     
(2)  694/    3F80 :                     file_tscrn_main:
(2)  695/    3F80 : 0000 4534           		dc.l DATA_BANK0
(2)  696/    3F84 : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN",0
             3F8A : 494E 2E42 494E 00 
(2)  697/    3F91 :                     		align 2
(2)  698/    3F92 :                     ; file_tscrn_mars:
(2)  699/    3F92 :                     ; 		dc.l DATA_BANK1
(2)  700/    3F92 :                     ; 		dc.b "BNK_MARS.BIN",0
(2)  701/    3F92 :                     ; 		align 2
(2)  702/    3F92 :                     
(2)  703/    3F92 :                     ; ====================================================================
(2)  704/    3F92 :                     ; ------------------------------------------------------
(2)  705/    3F92 :                     ; Objects
(2)  706/    3F92 :                     ; ------------------------------------------------------
(2)  707/    3F92 :                     
(2)  708/    3F92 :                     ; ====================================================================
(2)  709/    3F92 :                     ; ------------------------------------------------------
(2)  710/    3F92 :                     ; Objects
(2)  711/    3F92 :                     ; ------------------------------------------------------
(2)  712/    3F92 :                     
(2)  713/    3F92 :                     ; --------------------------------------------------
(2)  714/    3F92 :                     ; Sisi
(2)  715/    3F92 :                     ; --------------------------------------------------
(2)  716/    3F92 :                     
(2)  717/    3F92 :                     obj_Fairy:
(2)  718/    3F92 : 7000                		moveq	#0,d0
(2)  719/    3F94 : 102E 001C           		move.b	obj_index(a6),d0
(2)  720/    3F98 : D040                		add.w	d0,d0
(2)  721/    3F9A : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  722/    3F9E : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  723/    3FA2 :                     ; ----------------------------------------------
(2)  724/    3FA2 : 0004                .list:		dc.w .init-.list
(2)  725/    3FA4 : 003A                		dc.w .main-.list
(2)  726/    3FA6 :                     ; ----------------------------------------------
(2)  727/    3FA6 :                     .init:
(2)  728/    3FA6 : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  729/    3FAC : 426E 0020           		clr.w	obj_frame(a6)
(2)  730/    3FB0 : 6100 D9F8           		bsr	object_ResetAnim
(2)  731/    3FB4 :                     
(2)  732/    3FB4 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  733/    3FB8 : 3C07                		move.w	d7,d6
(2)  734/    3FBA : E54E                		lsl.w	#2,d6
(2)  735/    3FBC : 41FA 00E2           		lea	.fixd_pos(pc),a0
(2)  736/    3FC0 : 43EE 0028           		lea	obj_ram(a6),a1
(2)  737/    3FC4 : D0C6                		adda	d6,a0
(2)  738/    3FC6 : 32D8                		move.w	(a0)+,(a1)+
(2)  739/    3FC8 : 32D8                		move.w	(a0)+,(a1)+
(2)  740/    3FCA :                     
(2)  741/    3FCA : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  742/    3FCE : CEFC 002A           		mulu.w	#42,d7
(2)  743/    3FD2 : EB4F                		lsl.w	#5,d7
(2)  744/    3FD4 : 2007                		move.l	d7,d0
(2)  745/    3FD6 : 6100 D6AC           		bsr	System_DiceRoll
(2)  746/    3FDA :                     ; 		neg.w	d7
(2)  747/    3FDA : 32C0                		move.w	d0,(a1)+
(2)  748/    3FDC :                     
(2)  749/    3FDC :                     ; ----------------------------------------------
(2)  750/    3FDC :                     .main:
(2)  751/    3FDC : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  752/    3FE0 : 49F8 B872           		lea	(RAM_GemaStatus).w,a4
(2)  753/    3FE4 :                     	; a5
(2)  754/    3FE4 :                     	; 0 - X base
(2)  755/    3FE4 :                     	; 2 - Y base
(2)  756/    3FE4 :                     	; 4 - Tan
(2)  757/    3FE4 : 7600                		moveq	#0,d3
(2)  758/    3FE6 : 162E 001D           		move.b	obj_subid(a6),d3
(2)  759/    3FEA : D643                		add.w	d3,d3
(2)  760/    3FEC : D8C3                		adda	d3,a4
(2)  761/    3FEE :                     ; 		lsl.w	#3,d3
(2)  762/    3FEE : 3415                		move.w	(a5),d2
(2)  763/    3FF0 : 362D 0002           		move.w	2(a5),d3
(2)  764/    3FF4 : 383C 0002           		move.w	#2,d4			; Multiply
(2)  765/    3FF8 : 082C 0007 0001      		btst	#7,1(a4)
(2)  766/    3FFE : 6704                		beq.s	.not_enbls
(2)  767/    4000 : 383C 0004           		move.w	#4,d4
(2)  768/    4004 :                     .not_enbls:
(2)  769/    4004 : 302D 0004           		move.w	4(a5),d0
(2)  770/    4008 : E848                		lsr.w	#4,d0
(2)  771/    400A : 6100 D69C           		bsr	System_SineWave
(2)  772/    400E : C3C4                		muls.w	d4,d1
(2)  773/    4010 : E041                		asr.w	#8,d1
(2)  774/    4012 : 9441                		sub.w	d1,d2
(2)  775/    4014 : 302D 0004           		move.w	4(a5),d0
(2)  776/    4018 : E848                		lsr.w	#4,d0
(2)  777/    401A : 082C 0000 0001      		btst	#0,1(a4)
(2)  778/    4020 : 6702                		beq.s	.not_enbl2
(2)  779/    4022 : D040                		add.w	d0,d0
(2)  780/    4024 :                     .not_enbl2:
(2)  781/    4024 : 6100 D678           		bsr	System_SineWave_Cos
(2)  782/    4028 : C3C4                		muls.w	d4,d1
(2)  783/    402A : E041                		asr.w	#8,d1
(2)  784/    402C : 9641                		sub.w	d1,d3
(2)  785/    402E :                     
(2)  786/    402E : 383C 0040           		move.w	#$40,d4
(2)  787/    4032 : 082C 0007 0001      		btst	#7,1(a4)
(2)  788/    4038 : 6704                		beq.s	.not_enbl
(2)  789/    403A : 383C 0090           		move.w	#$90,d4
(2)  790/    403E :                     .not_enbl:
(2)  791/    403E : D96D 0004           		addi.w	d4,4(a5)
(2)  792/    4042 : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  793/    4046 : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  794/    404A :                     
(2)  795/    404A :                     .not_mouse:
(2)  796/    404A : 41FA 002E           		lea	.anim_data(pc),a0
(2)  797/    404E : 6100 D992           		bsr	object_Animate
(2)  798/    4052 :                     
(2)  799/    4052 : 7000                		moveq	#0,d0
(2)  800/    4054 : 102E 001D           		move.b	obj_subid(a6),d0
(2)  801/    4058 : E748                		lsl.w	#3,d0
(2)  802/    405A : 41FB 002C           		lea	.sub_ids(pc,d0.w),a0
(2)  803/    405E : 3428 0004           		move.w	4(a0),d2
(2)  804/    4062 : 2250                		move.l	(a0),a1
(2)  805/    4064 : 207C 0000 0000      		move.l	#0,a0
(2)  806/    406A : 302E 0004           		move.w	obj_x(a6),d0
(2)  807/    406E : 322E 0008           		move.w	obj_y(a6),d1
(2)  808/    4072 : 362E 0020           		move.w	obj_frame(a6),d3
(2)  809/    4076 : 6000 D390           		bra	Video_MakeSprMap
(2)  810/    407A :                     
(2)  811/    407A :                     ; ----------------------------------------------
(2)  812/    407A :                     
(2)  813/    407A :                     .anim_data:
(2)  814/    407A : 0002                		dc.w .anim_00-.anim_data
(2)  815/    407C :                     .anim_00:
(2)  816/    407C : 0008                		dc.w 8
(2)  817/    407E : 0000 0001 0002      		dc.w 0,1,2,1
             4084 : 0001             
(2)  818/    4086 : FFFE                		dc.w -2
(2)  819/    4088 :                     		align 2
(2)  820/    4088 :                     .sub_ids:
(2)  821/    4088 : 0003 4FB4           		dc.l objMap_Dodo
(2)  822/    408C : 0002 0000           		dc.w setVram_Dodo,0
(2)  823/    4090 : 0003 4FD8           		dc.l objMap_Mimi
(2)  824/    4094 : 0032 0000           		dc.w setVram_Mimi,0
(2)  825/    4098 : 0003 4FFC           		dc.l objMap_Fifi
(2)  826/    409C : 0062 0000           		dc.w setVram_Fifi,0
(2)  827/    40A0 :                     		align 2
(2)  828/    40A0 :                     
(2)  829/    40A0 :                     .fixd_pos:
(2)  830/    40A0 : 00B8 0050           		dc.w $B8,$50
(2)  831/    40A4 : 00DC 0050           		dc.w $B8+$24,$50
(2)  832/    40A8 : 0100 0050           		dc.w $B8+$48,$50
(2)  833/    40AC :                     		align 2
(2)  834/    40AC :                     
(2)  835/    40AC :                     ; ====================================================================
(2)  836/    40AC :                     ; ------------------------------------------------------
(2)  837/    40AC :                     ; Subroutines
(2)  838/    40AC :                     ; ------------------------------------------------------
(2)  839/    40AC :                     
(2)  840/    40AC :                     ; ====================================================================
(2)  841/    40AC :                     ; ------------------------------------------------------
(2)  842/    40AC :                     ; Includes for this screen
(2)  843/    40AC :                     ; ------------------------------------------------------
(2)  844/    40AC :                     
(2)  845/    40AC :                     ; ====================================================================
(2)  846/    40AC :                     ; ------------------------------------------------------
(2)  847/    40AC :                     ; Custom VBlank
(2)  848/    40AC :                     ; ------------------------------------------------------
(2)  849/    40AC :                     
(2)  850/    40AC :                     ; ------------------------------------------------------
(2)  851/    40AC :                     ; Custom HBlank
(2)  852/    40AC :                     ; ------------------------------------------------------
(2)  853/    40AC :                     
(2)  854/    40AC :                     ; ====================================================================
(2)  855/    40AC :                     ; ------------------------------------------------------
(2)  856/    40AC :                     ; Small data section
(2)  857/    40AC :                     ; ------------------------------------------------------
(2)  858/    40AC :                     
(2)  859/    40AC :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  860/    40AC :                     exgema_beats:
(2)  861/    40AC : 00D6                	dc.w 214
(2)  862/    40AE : 00D6                	dc.w 214
(2)  863/    40B0 : 00D6                	dc.w 214
(2)  864/    40B2 : 00C0                	dc.w 192
(2)  865/    40B4 : 00C0                	dc.w 192
(2)  866/    40B6 : 00D6                	dc.w 214
(2)  867/    40B8 : 00B8                	dc.w $00B8
(2)  868/    40BA : 00C0                	dc.w 192
(2)  869/    40BC : 00C0                	dc.w 192
(2)  870/    40BE : 00D6                	dc.w 214
(2)  871/    40C0 : 00D6                	dc.w 214
(2)  872/    40C2 : 00D6                	dc.w 214
(2)  873/    40C4 : 00D6                	dc.w 214
(2)  874/    40C6 : 00D6                	dc.w 214
(2)  875/    40C8 : 00D6                	dc.w 214
(2)  876/    40CA : 00D6                	dc.w 214
(2)  877/    40CC : 00D6                	dc.w 214
(2)  878/    40CE : 00D6                	dc.w 214
(2)  879/    40D0 : 00D6                	dc.w 214
(2)  880/    40D2 : 00D6                	dc.w 214
(2)  881/    40D4 : 00D6                	dc.w 214
(2)  882/    40D6 : 00D6                	dc.w 214
(2)  883/    40D8 : 00D6                	dc.w 214
(2)  884/    40DA : 00D6                	dc.w 214
(2)  885/    40DC :                     
(2)  886/    40DC :                     ArtList_Stuff:
(2)  887/    40DC : 0003                		dc.w 3
(2)  888/    40DE : 0003 3E14           		dc.l Art_FairyDodo
(2)  889/    40E2 : 0040                		dc.w cell_vram(setVram_Dodo)
(2)  890/    40E4 : 0600                		dc.w cell_vram($30)
(2)  891/    40E6 : 0003 4414           		dc.l Art_FairyMimi
(2)  892/    40EA : 0640                		dc.w cell_vram(setVram_Mimi)
(2)  893/    40EC : 0600                		dc.w cell_vram($30)
(2)  894/    40EE : 0003 4A14           		dc.l Art_FairyFifi
(2)  895/    40F2 : 0C40                		dc.w cell_vram(setVram_Fifi)
(2)  896/    40F4 : 0600                		dc.w cell_vram($30)
(2)  897/    40F6 :                     
(2)  898/    40F6 :                     str_TesterTitle:
(2)  899/    40F6 : 4745 4D41 2053      		dc.b "GEMA Sound Driver       V1.0",0
             40FC : 6F75 6E64 2044 
             4102 : 7269 7665 7220 
             4108 : 2020 2020 2020 
             410E : 5631 2E30 00       
(2)  900/    4113 :                     		align 2
(2)  901/    4114 :                     str_TesterInfo:
(2)  902/    4114 : 5365 7123 2042      		dc.b "Seq# Blk# Indx",$0A
             411A : 6C6B 2320 496E 
             4120 : 6478 0A          
(2)  903/    4123 : 0A0A 0A0A           		dc.b $0A,$0A,$0A,$0A
(2)  904/    4127 : 4265 6174 733A 20   		dc.b "Beats: "
(2)  905/    412E : 00                  		dc.b 0
(2)  906/    412F :                     		align 2
(2)  907/    4130 :                     str_Instruc:
(2)  908/    4130 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
             4136 : 6571 2E20 4E75 
             413C : 6D23 2020 2058 
             4142 : 5920 2D20 5472 
             4148 : 6163 6B20 696E 
             414E : 6465 780A          
(2)  909/    4152 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
             4158 : 6571 2E20 426C 
             415E : 6B23 0A          
(2)  910/    4161 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
             4167 : 544F 5020 414C 
             416D : 4C0A             
(2)  911/    416F : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
             4175 : 544F 5020 5365 
             417B : 712E 0A          
(2)  912/    417E : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill"
             4184 : 4C41 5920 5365 
             418A : 712E 2020 2020 
             4190 : 5A20 2D20 504C 
             4196 : 4159 2061 7574 
             419C : 6F2D 6669 6C6C    
(2)  913/    41A2 : 00                  		dc.b 0
(2)  914/    41A3 :                     		align 2
(2)  915/    41A4 :                     
(2)  916/    41A4 :                     str_VmInfo:
(2)  917/    41A4 : 5053 470A           		dc.b "PSG",$0A
(2)  918/    41A8 : 464D 0A             		dc.b "FM",$0A
(2)  919/    41AB : 5043 4D0A           		dc.b "PCM",$0A
(2)  920/    41AF : 5057 4D             		dc.b "PWM"
(2)  921/    41B2 : 00                  		dc.b 0
(2)  922/    41B3 :                     		align 2
(2)  923/    41B4 :                     
(2)  924/    41B4 : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  925/    41B8 : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
             41BE : 3000 442D 3000 
             41C4 : 4423 3000 452D 
             41CA : 3000 462D 3000 
             41D0 : 4623 3000 472D 
             41D6 : 3000 4723 3000 
             41DC : 412D 3000 4123 
             41E2 : 3000 422D 3000    
(2)  926/    41E8 : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
             41EE : 3100 442D 3100 
             41F4 : 4423 3100 452D 
             41FA : 3100 462D 3100 
             4200 : 4623 3100 472D 
             4206 : 3100 4723 3100 
             420C : 412D 3100 4123 
             4212 : 3100 422D 3100    
(2)  927/    4218 : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
             421E : 3200 442D 3200 
             4224 : 4423 3200 452D 
             422A : 3200 462D 3200 
             4230 : 4623 3200 472D 
             4236 : 3200 4723 3200 
             423C : 412D 3200 4123 
             4242 : 3200 422D 3200    
(2)  928/    4248 : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
             424E : 3300 442D 3300 
             4254 : 4423 3300 452D 
             425A : 3300 462D 3300 
             4260 : 4623 3300 472D 
             4266 : 3300 4723 3300 
             426C : 412D 3300 4123 
             4272 : 3300 422D 3300    
(2)  929/    4278 : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
             427E : 3400 442D 3400 
             4284 : 4423 3400 452D 
             428A : 3400 462D 3400 
             4290 : 4623 3400 472D 
             4296 : 3400 4723 3400 
             429C : 412D 3400 4123 
             42A2 : 3400 422D 3400    
(2)  930/    42A8 : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
             42AE : 3500 442D 3500 
             42B4 : 4423 3500 452D 
             42BA : 3500 462D 3500 
             42C0 : 4623 3500 472D 
             42C6 : 3500 4723 3500 
             42CC : 412D 3500 4123 
             42D2 : 3500 422D 3500    
(2)  931/    42D8 : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
             42DE : 3600 442D 3600 
             42E4 : 4423 3600 452D 
             42EA : 3600 462D 3600 
             42F0 : 4623 3600 472D 
             42F6 : 3600 4723 3600 
             42FC : 412D 3600 4123 
             4302 : 3600 422D 3600    
(2)  932/    4308 : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
             430E : 3700 442D 3700 
             4314 : 4423 3700 452D 
             431A : 3700 462D 3700 
             4320 : 4623 3700 472D 
             4326 : 3700 4723 3700 
             432C : 412D 3700 4123 
             4332 : 3700 422D 3700    
(2)  933/    4338 : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
             433E : 3800 442D 3800 
             4344 : 4423 3800 452D 
             434A : 3800 462D 3800 
             4350 : 4623 3800 472D 
             4356 : 3800 4723 3800 
             435C : 412D 3800 4123 
             4362 : 3800 422D 3800    
(2)  934/    4368 : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
             436E : 3900 442D 3900 
             4374 : 4423 3900 452D 
             437A : 3900 462D 3900 
             4380 : 4623 3900 472D 
             4386 : 3900 4723 3900 
             438C : 412D 3900 4123 
             4392 : 3900 422D 3900    
(2)  935/    4398 : 3F2D 4100 3F2D      		dc.b "?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0
             439E : 4100 3F2D 4100 
             43A4 : 3F2D 4100 3F2D 
             43AA : 4100 3F2D 4100 
             43B0 : 3F2D 4100 3F2D 
             43B6 : 4100 3F2D 4100 
             43BC : 3F2D 4100 3F2D 
             43C2 : 4100 3F2D 4100    
(2)  936/    43C8 : 3F2D 4200 3F2D      		dc.b "?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0
             43CE : 4200 3F2D 4200 
             43D4 : 3F2D 4200 3F2D 
             43DA : 4200 3F2D 4200 
             43E0 : 3F2D 4200 3F2D 
             43E6 : 4200 3F2D 4200 
             43EC : 3F2D 4200 3F2D 
             43F2 : 4200 3F2D 4200    
(2)  937/    43F8 : 3F2D 4300 3F2D      		dc.b "?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0
             43FE : 4300 3F2D 4300 
             4404 : 3F2D 4300 3F2D 
             440A : 4300 3F2D 4300 
             4410 : 3F2D 4300 3F2D 
             4416 : 4300 3F2D 4300 
             441C : 3F2D 4300 3F2D 
             4422 : 4300 3F2D 4300    
(2)  938/    4428 : 3F2D 4400 3F2D      		dc.b "?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0
             442E : 4400 3F2D 4400 
             4434 : 3F2D 4400 3F2D 
             443A : 4400 3F2D 4400 
             4440 : 3F2D 4400 3F2D 
             4446 : 4400 3F2D 4400 
             444C : 3F2D 4400 3F2D 
             4452 : 4400 3F2D 4400    
(2)  939/    4458 : 3F2D 4500 3F2D      		dc.b "?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0
             445E : 4500 3F2D 4500 
             4464 : 3F2D 4500 3F2D 
             446A : 4500 3F2D 4500 
             4470 : 3F2D 4500 3F2D 
             4476 : 4500 3F2D 4500 
             447C : 3F2D 4500 3F2D 
             4482 : 4500 3F2D 4500    
(2)  940/    4488 : 3F2D 4600 3F2D      		dc.b "?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0
             448E : 4600 3F2D 4600 
             4494 : 3F2D 4600 3F2D 
             449A : 4600 3F2D 4600 
             44A0 : 3F2D 4600 3F2D 
             44A6 : 4600 3F2D 4600 
             44AC : 3F2D 4600 3F2D 
             44B2 : 4600 3F2D 4600    
(2)  941/    44B8 : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  942/    44BC : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
             44C2 : 2000 442D 2000 
             44C8 : 4423 2000 452D 
             44CE : 2000 462D 2000 
             44D4 : 4623 2000 472D 
             44DA : 2000 4723 2000 
             44E0 : 412D 2000 4123 
             44E6 : 2000 422D 2000    
(2)  943/    44EC : 3F2D 2000 3F2D      		dc.b "?- ",0,"?- ",0,"?- ",0
             44F2 : 2000 3F2D 2000    
(2)  944/    44F8 : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
             44FE : 3300 3400 3500 
             4504 : 3600 3700 3800 
             450A : 3900             
(2)  945/    450C :                     
(2)  946/    450C : 464D 3300           str_Speci:	dc.b "FM3",0
(2)  947/    4510 : 4441 4300           str_Sampl:	dc.b "DAC",0
(2)  948/    4514 :                     
(2)  949/    4514 :                     str_ShowVars:
(2)  950/    4514 : 80FF B86F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  951/    4518 : 2020 20             		dc.b "   "
(2)  952/    451B : 80FF B871           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  953/    451F : 2020 20             		dc.b "   "
(2)  954/    4522 : 80FF B86D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  955/    4526 : 00                  		dc.b 0
(2)  956/    4527 :                     		align 2
(2)  957/    4528 :                     str_ShowBeats:
(2)  958/    4528 : 81FF B87C           		dc.l pstr_mem(1,RAM_CurrBeats)
(2)  959/    452C : 00                  		dc.b 0
(2)  960/    452D :                     		align 2
(2)  961/    452E :                     
(2)  962/    452E :                     str_Info:
(2)  963/    452E : 83FF D7DC           		dc.l pstr_mem(3,RAM_Framecount)
(2)  964/    4532 : 00                  		dc.b 0
(2)  965/    4533 :                     		align 2
(2)  966/    4534 :                     
(1)   19/    4534 :                     mcscrn_e:
(1)   19/    4534 :                     ; Md_Screen00_e:
(1)   19/    4534 : =$4534               MD_SCREEN07_E label *
(1)   19/    4534 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/    4534 :                     
     376/    4534 :                     
     377/    4534 :                     ; ====================================================================
     378/    4534 :                     ; ----------------------------------------------------------------
     379/    4534 :                     ; DATA BLOCK (banks)
     380/    4534 :                     ; ----------------------------------------------------------------
     381/    4534 :                     
     382/    4534 :                     		include "game/incl_data.asm"
(1)    1/    4534 :                     ; ===========================================================================
(1)    2/    4534 :                     ; ----------------------------------------------------------------
(1)    3/    4534 :                     ; 68K DATA BANKS
(1)    4/    4534 :                     ;
(1)    5/    4534 :                     ; Size limitations:
(1)    6/    4534 :                     ;  $40000 for SegaCD's Word-RAM
(1)    7/    4534 :                     ;  $80000 for Sega-Mapper(SSF2) bank *not tested*
(1)    8/    4534 :                     ; $100000 for 32X Cartridge
(1)    9/    4534 :                     ; All 4MB for Genesis/Pico
(1)   10/    4534 :                     ;
(1)   11/    4534 :                     ; SCD/CD32:
(1)   12/    4534 :                     ; Add your BANK entries and filenames on iso_files.asm
(1)   13/    4534 :                     ;
(1)   14/    4534 :                     ; MACRO Usage:
(1)   15/    4534 :                     ;	data_dset LABEL_START
(1)   16/    4534 :                     ;	; your data
(1)   17/    4534 :                     ;	data_dend LABEL_END
(1)   18/    4534 :                     ; ----------------------------------------------------------------
(1)   19/    4534 :                     ; - For including VDP graphics:
(1)   20/    4534 :                     ;	binclude_dma LABEL_START,filepath		; Single label
(1)   21/    4534 :                     ;	binclude_dma_e LABEL_START,LABEL_END,filepath	; Start and End labels
(1)   22/    4534 :                     ;
(1)   23/    4534 :                     ; - For the SVDP graphics:
(1)   24/    4534 :                     ; 	mars_VramStart Label_test			; Start label
(1)   25/    4534 :                     ; example_0:
(1)   26/    4534 :                     ; 	include "your_svdp_graphics.bin"
(1)   27/    4534 :                     ; 	align 4						; Don't forget align by 4
(1)   28/    4534 :                     ; example_1:
(1)   29/    4534 :                     ; 	include "more_svdp.bin"
(1)   30/    4534 :                     ;	align 4
(1)   31/    4534 :                     ;	mars_VramEnd Label_end				; End label
(1)   32/    4534 :                     ; ----------------------------------------------------------------
(1)   33/    4534 :                     
(1)   34/    4534 :                     ; ============================================================
(1)   35/    4534 :                     ; --------------------------------------------------------
(1)   36/    4534 :                     ; MAIN bank
(1)   37/    4534 :                     ; --------------------------------------------------------
(1)   38/    4534 :                     
(1)   39/    4534 : (MACRO)              	data_dset DATA_BANK0
(1)   39/    4534 :                     ; MCD_DBANK0:
(1)   39/    4534 : =$4534               DATA_BANK0 label *
(1)   39/    4534 : =$4534               GLBL_MDATA_ST := *
(1)   40/    4534 :                     		include "sound/data.asm"		; GEMA sound data
(2)    1/    4534 :                     ; ===========================================================================
(2)    2/    4534 :                     ; -------------------------------------------------------------------
(2)    3/    4534 :                     ; Main sound data
(2)    4/    4534 :                     ; -------------------------------------------------------------------
(2)    5/    4534 :                     
(2)    6/    4534 :                     MainGemaSeqList:
(2)    7/    4534 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)    7/    4534 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)    8/    4538 : (MACRO)              	gemaTrk 0,6,gtrk_SfxAll	; $0F
(2)    8/    4538 : 0600 4574                   dc.l ((0&$01)<<31)|((6&$7F)<<24)|(GTRK_SFXALL&$FFFFFF)
(2)    9/    453C : (MACRO)              	gemaTrk 1,6,gtrk_Test1
(2)    9/    453C : 8600 5175                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST1&$FFFFFF)
(2)   10/    4540 : (MACRO)              	gemaTrk 1,3,gtrk_Test2
(2)   10/    4540 : 8300 6181                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST2&$FFFFFF)
(2)   11/    4544 : (MACRO)              	gemaTrk 1,3,gtrk_Test3
(2)   11/    4544 : 8301 22A5                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST3&$FFFFFF)
(2)   12/    4548 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   12/    4548 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   13/    454C : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   13/    454C : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   14/    4550 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   14/    4550 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   15/    4554 : (MACRO)              	gemaTrk 1,6,gtrk_Test0	; $08
(2)   15/    4554 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   16/    4558 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   16/    4558 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   17/    455C : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   17/    455C : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   18/    4560 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   18/    4560 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   19/    4564 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   19/    4564 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   20/    4568 : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   20/    4568 : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   21/    456C : (MACRO)              	gemaTrk 1,6,gtrk_Test0
(2)   21/    456C : 8600 464F                   dc.l ((1&$01)<<31)|((6&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(2)   22/    4570 : (MACRO)              	gemaTrk 0,6,gtrk_SfxAll	; $0F
(2)   22/    4570 : 0600 4574                   dc.l ((0&$01)<<31)|((6&$7F)<<24)|(GTRK_SFXALL&$FFFFFF)
(2)   23/    4574 :                     
(2)   24/    4574 :                     ; ----------------------------------------------------
(2)   25/    4574 :                     
(2)   26/    4574 :                     gtrk_SfxAll:
(2)   27/    4574 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   27/    4574 : 0004                        dc.w 4
(2)   27/    4576 : 0000 4582                   dc.l .BLK
(2)   27/    457A : 0000 4586                   dc.l .PAT
(2)   27/    457E : 0000 462F                   dc.l .INS
(2)   28/    4582 :                     .blk:	binclude "sound/seq/sfxall_blk.bin"
(2)   29/    4586 :                     .pat:	binclude "sound/seq/sfxall_patt.bin"
(2)   30/    462F :                     .ins:
(2)   31/    462F : (MACRO)              	gInsFm -12,FmIns_sfx_smash
(2)   31/    462F : A0F4 01A8                   dc.b $A0,-12,((FMINS_SFX_SMASH>>16)&$FF),((FMINS_SFX_SMASH>>8)&$FF)
(2)   31/    4633 : CB00 0000                   dc.b FMINS_SFX_SMASH&$FF,$00,$00,$00
(2)   32/    4637 : (MACRO)              	gInsFm -12,FmIns_sfx_smash
(2)   32/    4637 : A0F4 01A8                   dc.b $A0,-12,((FMINS_SFX_SMASH>>16)&$FF),((FMINS_SFX_SMASH>>8)&$FF)
(2)   32/    463B : CB00 0000                   dc.b FMINS_SFX_SMASH&$FF,$00,$00,$00
(2)   33/    463F : (MACRO)              	gInsFm -12,FmIns_sfx_explode
(2)   33/    463F : A0F4 01A6                   dc.b $A0,-12,((FMINS_SFX_EXPLODE>>16)&$FF),((FMINS_SFX_EXPLODE>>8)&$FF)
(2)   33/    4643 : 5300 0000                   dc.b FMINS_SFX_EXPLODE&$FF,$00,$00,$00
(2)   34/    4647 : (MACRO)              	gInsFm 0,FmIns_Bell_low13
(2)   34/    4647 : A000 01A4                   dc.b $A0,0,((FMINS_BELL_LOW13>>16)&$FF),((FMINS_BELL_LOW13>>8)&$FF)
(2)   34/    464B : 6B00 0000                   dc.b FMINS_BELL_LOW13&$FF,$00,$00,$00
(2)   35/    464F :                     
(2)   36/    464F :                     ; ----------------------------------------------------
(2)   37/    464F :                     gtrk_Test0:
(2)   38/    464F :                     ; 	gemaHead .blk,.pat,.ins,4
(2)   39/    464F :                     ; .blk:	binclude "sound/seq/test_2_blk.bin"
(2)   40/    464F :                     ; .pat:	binclude "sound/seq/test_2_patt.bin"
(2)   41/    464F :                     ; .ins:
(2)   42/    464F :                     ; 	gInsDac 0,DacIns_sxbeats,0
(2)   43/    464F :                     ; 	gInsDac 0,DacIns_sxbeats2,0
(2)   44/    464F :                     ; 	gInsDac 0,DacIns_drumsetA,0
(2)   45/    464F :                     
(2)   46/    464F : (MACRO)              	gemaHead .blk,.pat,.ins,10
(2)   46/    464F : 000A                        dc.w 10
(2)   46/    4651 : 0000 465D                   dc.l .BLK
(2)   46/    4655 : 0000 4662                   dc.l .PAT
(2)   46/    4659 : 0000 5135                   dc.l .INS
(2)   47/    465D :                     .blk:	binclude "sound/seq/carillon_blk.bin"
(2)   48/    4662 :                     .pat:	binclude "sound/seq/carillon_patt.bin"
(2)   49/    5135 :                     .ins:
(2)   50/    5135 : (MACRO)              	gInsFm -12,FmIns_Guitar_bball
(2)   50/    5135 : A0F4 01A9                   dc.b $A0,-12,((FMINS_GUITAR_BBALL>>16)&$FF),((FMINS_GUITAR_BBALL>>8)&$FF)
(2)   50/    5139 : 0B00 0000                   dc.b FMINS_GUITAR_BBALL&$FF,$00,$00,$00
(2)   51/    513D : (MACRO)              	gInsNull;gInsFm -24,FmIns_Bell_mid36
(2)   51/    513D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   51/    5141 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   52/    5145 : (MACRO)              	gInsFm 0,FmIns_Trumpet_carnival
(2)   52/    5145 : A000 01A8                   dc.b $A0,0,((FMINS_TRUMPET_CARNIVAL>>16)&$FF),((FMINS_TRUMPET_CARNIVAL>>8)&$FF)
(2)   52/    5149 : 0B00 0000                   dc.b FMINS_TRUMPET_CARNIVAL&$FF,$00,$00,$00
(2)   53/    514D : (MACRO)              	gInsFm -12,FmIns_Trumpet_bus
(2)   53/    514D : A0F4 01A3                   dc.b $A0,-12,((FMINS_TRUMPET_BUS>>16)&$FF),((FMINS_TRUMPET_BUS>>8)&$FF)
(2)   53/    5151 : CB00 0000                   dc.b FMINS_TRUMPET_BUS&$FF,$00,$00,$00
(2)   54/    5155 : (MACRO)              	gInsDac 0,DacIns_Kick_2,0
(2)   54/    5155 : C000 02EF                   dc.b $C0|0,0,((DACINS_KICK_2>>16)&$FF),((DACINS_KICK_2>>8)&$FF)
(2)   54/    5159 : FC00 0000                   dc.b DACINS_KICK_2&$FF,0,0,0
(2)   55/    515D : (MACRO)              	gInsDac +12,DacIns_Snare_2,0
(2)   55/    515D : C00C 02F8                   dc.b $C0|0,+12,((DACINS_SNARE_2>>16)&$FF),((DACINS_SNARE_2>>8)&$FF)
(2)   55/    5161 : 5A00 0000                   dc.b DACINS_SNARE_2&$FF,0,0,0
(2)   56/    5165 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(2)   56/    5165 : A000 01A3                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   56/    5169 : EB00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   57/    516D : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(2)   57/    516D : B000 01A6                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   57/    5171 : D300 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   58/    5175 :                     
(2)   59/    5175 :                     ; ----------------------------------------------------
(2)   60/    5175 :                     gtrk_Test1:
(2)   61/    5175 : (MACRO)              	gemaHead .blk,.pat,.ins,4
(2)   61/    5175 : 0004                        dc.w 4
(2)   61/    5177 : 0000 5183                   dc.l .BLK
(2)   61/    517B : 0000 51A8                   dc.l .PAT
(2)   61/    517F : 0000 6119                   dc.l .INS
(2)   62/    5183 :                     .blk:	binclude "sound/seq/sauron_blk.bin"
(2)   63/    51A8 :                     .pat:	binclude "sound/seq/sauron_patt.bin"
(2)   64/    6119 :                     .ins:
(2)   65/    6119 : (MACRO)              	gInsPcm -12,PcmIns_sauron_01,0
(2)   65/    6119 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   65/    611D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   66/    6121 : (MACRO)              	gInsPcm -12,PcmIns_sauron_02,0
(2)   66/    6121 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   66/    6125 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   67/    6129 : (MACRO)              	gInsPcm -12,PcmIns_sauron_03,0
(2)   67/    6129 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   67/    612D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   68/    6131 : (MACRO)              	gInsPcm -12,PcmIns_sauron_04,0
(2)   68/    6131 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   68/    6135 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   69/    6139 : (MACRO)              	gInsPcm -12,PcmIns_sauron_05,1
(2)   69/    6139 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   69/    613D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   70/    6141 : (MACRO)              	gInsPcm -12,PcmIns_sauron_06,0
(2)   70/    6141 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   70/    6145 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   71/    6149 : (MACRO)              	gInsPcm -12,PcmIns_sauron_07,0
(2)   71/    6149 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   71/    614D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   72/    6151 : (MACRO)              	gInsPcm -12,PcmIns_sauron_08,0
(2)   72/    6151 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   72/    6155 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   73/    6159 : (MACRO)              	gInsPcm -12,PcmIns_sauron_09,0
(2)   73/    6159 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   73/    615D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   74/    6161 : (MACRO)              	gInsPcm -12,PcmIns_sauron_10,0
(2)   74/    6161 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   74/    6165 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   75/    6169 : (MACRO)              	gInsPcm -12,PcmIns_sauron_11,0
(2)   75/    6169 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   75/    616D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/    6171 : (MACRO)              	gInsPcm -12,PcmIns_sauron_12,0
(2)   76/    6171 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   76/    6175 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    6179 : (MACRO)              	gInsNull
(2)   77/    6179 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   77/    617D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   78/    6181 :                     
(2)   79/    6181 :                     ; 		gemaHead .blk,.pat,.ins,10
(2)   80/    6181 :                     ; .blk:		binclude "sound/seq/test_blk.bin"
(2)   81/    6181 :                     ; .pat:		binclude "sound/seq/test_patt.bin"
(2)   82/    6181 :                     ; .ins:
(2)   83/    6181 :                     ; 		gInsPcm 0,PcmIns_TEST,0
(2)   84/    6181 :                     
(2)   85/    6181 :                     ; ----------------------------------------------------
(2)   86/    6181 :                     gtrk_Test2:
(2)   87/    6181 : (MACRO)              	gemaHead .blk,.pat,.ins,16
(2)   87/    6181 : 0010                        dc.w 16
(2)   87/    6183 : 0000 618F                   dc.l .BLK
(2)   87/    6187 : 0000 61B2                   dc.l .PAT
(2)   87/    618B : 0001 221D                   dc.l .INS
(2)   88/    618F :                     .blk:	binclude "sound/seq/trnthem_blk.bin"
(2)   89/    61B2 :                     .pat:	binclude "sound/seq/trnthem_patt.bin"
(2)   90/   1221D :                     .ins:
(2)   91/   1221D : (MACRO)              	gInsPwm -12,PwmIns_trnthem_01,1
(2)   91/   1221D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   91/   12221 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   92/   12225 : (MACRO)              	gInsFm -24,FmIns_Hats_1
(2)   92/   12225 : A0E8 01A3                   dc.b $A0,-24,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(2)   92/   12229 : EB00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(2)   93/   1222D : (MACRO)              	gInsFm3 0,FmIns_Sp_OpenHat
(2)   93/   1222D : B000 01A6                   dc.b $B0,0,((FMINS_SP_OPENHAT>>16)&$FF),((FMINS_SP_OPENHAT>>8)&$FF)
(2)   93/   12231 : D300 0000                   dc.b FMINS_SP_OPENHAT&$FF,$00,$00,$00
(2)   94/   12235 : (MACRO)              	gInsFm -24,FmIns_Trumpet_1
(2)   94/   12235 : A0E8 01A7                   dc.b $A0,-24,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)   94/   12239 : AB00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)   95/   1223D : (MACRO)              	gInsPcm -12,PcmIns_trnthem_05,0
(2)   95/   1223D : 0000 0000                   dc.b $00,$00,$00,$00
(2)   95/   12241 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   96/   12245 : (MACRO)              	gInsPcm -12,PcmIns_trnthem_06,0
(2)   96/   12245 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   96/   12249 : 0000 0000                   dc.b $00,$00,$00,$00
(2)   97/   1224D : (MACRO)              	gInsFm -56,FmIns_Bass_club_108
(2)   97/   1224D : A0C8 019F                   dc.b $A0,-56,((FMINS_BASS_CLUB_108>>16)&$FF),((FMINS_BASS_CLUB_108>>8)&$FF)
(2)   97/   12251 : 8B00 0000                   dc.b FMINS_BASS_CLUB_108&$FF,$00,$00,$00
(2)   98/   12255 : (MACRO)              	gInsFm -56,FmIns_Bass_club_108
(2)   98/   12255 : A0C8 019F                   dc.b $A0,-56,((FMINS_BASS_CLUB_108>>16)&$FF),((FMINS_BASS_CLUB_108>>8)&$FF)
(2)   98/   12259 : 8B00 0000                   dc.b FMINS_BASS_CLUB_108&$FF,$00,$00,$00
(2)   99/   1225D : (MACRO)              	gInsFm -56,FmIns_Bass_Groove_1
(2)   99/   1225D : A0C8 01A0                   dc.b $A0,-56,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)   99/   12261 : 8B00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)  100/   12265 : (MACRO)              	gInsPcm -12,PcmIns_trnthem_10,1
(2)  100/   12265 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  100/   12269 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  101/   1226D : (MACRO)              	gInsPwm -12,PwmIns_trnthem_11,0
(2)  101/   1226D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  101/   12271 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  102/   12275 : (MACRO)              	gInsPwm -12,PwmIns_trnthem_12,0
(2)  102/   12275 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  102/   12279 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  103/   1227D : (MACRO)              	gInsNull
(2)  103/   1227D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  103/   12281 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  104/   12285 : (MACRO)              	gInsNull
(2)  104/   12285 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  104/   12289 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  105/   1228D : (MACRO)              	gInsNull
(2)  105/   1228D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  105/   12291 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  106/   12295 : (MACRO)              	gInsNull
(2)  106/   12295 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  106/   12299 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  107/   1229D : (MACRO)              	gInsPcm 0,PcmIns_trnthem_20,0
(2)  107/   1229D : 0000 0000                   dc.b $00,$00,$00,$00
(2)  107/   122A1 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  108/   122A5 :                     
(2)  109/   122A5 :                     ; -----------------------------------------------------------
(2)  110/   122A5 :                     
(2)  111/   122A5 :                     gtrk_Test3:
(2)  112/   122A5 : (MACRO)              	gemaHead .blk,.pat,.ins,16
(2)  112/   122A5 : 0010                        dc.w 16
(2)  112/   122A7 : 0001 22B3                   dc.l .BLK
(2)  112/   122AB : 0001 22C4                   dc.l .PAT
(2)  112/   122AF : 0001 9E63                   dc.l .INS
(2)  113/   122B3 :                     .blk:	binclude "sound/seq/box_blk.bin"
(2)  114/   122C4 :                     .pat:	binclude "sound/seq/box_patt.bin"
(2)  115/   19E63 :                     .ins:
(2)  116/   19E63 : (MACRO)              	gInsFm -24,FmIns_Organ_drawbar
(2)  116/   19E63 : A0E8 01A2                   dc.b $A0,-24,((FMINS_ORGAN_DRAWBAR>>16)&$FF),((FMINS_ORGAN_DRAWBAR>>8)&$FF)
(2)  116/   19E67 : AB00 0000                   dc.b FMINS_ORGAN_DRAWBAR&$FF,$00,$00,$00
(2)  117/   19E6B : (MACRO)              	gInsNull
(2)  117/   19E6B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  117/   19E6F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  118/   19E73 : (MACRO)              	gInsPcm +24,PcmIns_Kick,0
(2)  118/   19E73 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  118/   19E77 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  119/   19E7B : (MACRO)              	gInsNull
(2)  119/   19E7B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  119/   19E7F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  120/   19E83 : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  120/   19E83 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  120/   19E87 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  121/   19E8B : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  121/   19E8B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  121/   19E8F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  122/   19E93 : (MACRO)              	gInsNull
(2)  122/   19E93 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  122/   19E97 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  123/   19E9B : (MACRO)              	gInsNull
(2)  123/   19E9B : 0000 0000                   dc.b $00,$00,$00,$00
(2)  123/   19E9F : 0000 0000                   dc.b $00,$00,$00,$00
(2)  124/   19EA3 : (MACRO)              	gInsPcm +24,PcmIns_BBoxHats,0
(2)  124/   19EA3 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  124/   19EA7 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  125/   19EAB : (MACRO)              	gInsPcm +24,PcmIns_BBoxSnare,0
(2)  125/   19EAB : 0000 0000                   dc.b $00,$00,$00,$00
(2)  125/   19EAF : 0000 0000                   dc.b $00,$00,$00,$00
(2)  126/   19EB3 : (MACRO)              	gInsFm -12,FmIns_Bass_Groove_1
(2)  126/   19EB3 : A0F4 01A0                   dc.b $A0,-12,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(2)  126/   19EB7 : 8B00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(2)  127/   19EBB : (MACRO)              	gInsNull
(2)  127/   19EBB : 0000 0000                   dc.b $00,$00,$00,$00
(2)  127/   19EBF : 0000 0000                   dc.b $00,$00,$00,$00
(2)  128/   19EC3 : (MACRO)              	gInsFm -12,FmIns_Trumpet_1
(2)  128/   19EC3 : A0F4 01A7                   dc.b $A0,-12,((FMINS_TRUMPET_1>>16)&$FF),((FMINS_TRUMPET_1>>8)&$FF)
(2)  128/   19EC7 : AB00 0000                   dc.b FMINS_TRUMPET_1&$FF,$00,$00,$00
(2)  129/   19ECB : (MACRO)              	gInsPcm 0,PcmIns_Trumpet1,0
(2)  129/   19ECB : 0000 0000                   dc.b $00,$00,$00,$00
(2)  129/   19ECF : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/   19ED3 : (MACRO)              	gInsNull
(2)  130/   19ED3 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  130/   19ED7 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  131/   19EDB : (MACRO)              	gInsFm -24,FmIns_Vibraphone_1
(2)  131/   19EDB : A0E8 01A3                   dc.b $A0,-24,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(2)  131/   19EDF : 0B00 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(2)  132/   19EE3 : (MACRO)              	gInsNull
(2)  132/   19EE3 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  132/   19EE7 : 0000 0000                   dc.b $00,$00,$00,$00
(2)  133/   19EEB :                     
(2)  134/   19EEB :                     ; ===========================================================================
(2)  135/   19EEB :                     ; -------------------------------------------------------------------
(2)  136/   19EEB :                     ; GEMA/Nikona FM instruments
(2)  137/   19EEB :                     ; -------------------------------------------------------------------
(2)  138/   19EEB :                     
(2)  139/   19EEB :                     ; -----------------------------------------------------------
(2)  140/   19EEB :                     ; Normal FM Instruments
(2)  141/   19EEB :                     ; -----------------------------------------------------------
(2)  142/   19EEB :                     
(2)  143/   19EEB :                     FmIns_Bass_big_81:
(2)  144/   19EEB :                     		binclude "sound/ins/fm/bin/bass_big_82.bin"
(2)  145/   19F0B :                     FmIns_Bass_big_110:
(2)  146/   19F0B :                     		binclude "sound/ins/fm/bin/bass_big_110.bin"
(2)  147/   19F2B :                     FmIns_Bass_big_114:
(2)  148/   19F2B :                     		binclude "sound/ins/fm/bin/bass_big_114.bin"
(2)  149/   19F4B :                     FmIns_Bass_big_122:
(2)  150/   19F4B :                     		binclude "sound/ins/fm/bin/bass_big_122.bin"
(2)  151/   19F6B :                     FmIns_Bass_cave_47:
(2)  152/   19F6B :                     		binclude "sound/ins/fm/bin/bass_cave_47.bin"
(2)  153/   19F8B :                     FmIns_Bass_club_108:
(2)  154/   19F8B :                     		binclude "sound/ins/fm/bin/bass_club_108.bin"
(2)  155/   19FAB :                     FmIns_Bass_foot_75:
(2)  156/   19FAB :                     		binclude "sound/ins/fm/bin/bass_foot_75.bin"
(2)  157/   19FCB :                     FmIns_Bass_gem_26:
(2)  158/   19FCB :                     		binclude "sound/ins/fm/bin/bass_gem_26.bin"
(2)  159/   19FEB :                     FmIns_Bass_groove_119:
(2)  160/   19FEB :                     		binclude "sound/ins/fm/bin/bass_groove_119.bin"
(2)  161/   1A00B :                     FmIns_Bass_heavy_107:
(2)  162/   1A00B :                     		binclude "sound/ins/fm/bin/bass_heavy_107.bin"
(2)  163/   1A02B :                     FmIns_Bass_heavy_118:
(2)  164/   1A02B :                     		binclude "sound/ins/fm/bin/bass_heavy_118.bin"
(2)  165/   1A04B :                     FmIns_Bass_loud_117:
(2)  166/   1A04B :                     		binclude "sound/ins/fm/bin/bass_loud_117.bin"
(2)  167/   1A06B :                     FmIns_bass_low_46:
(2)  168/   1A06B :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(2)  169/   1A08B :                     FmIns_Bass_Groove_1:
(2)  170/   1A08B :                     		binclude "sound/ins/fm/bin/bass_groove_1.bin"
(2)  171/   1A0AB :                     FmIns_bass_low_81:
(2)  172/   1A0AB :                     		binclude "sound/ins/fm/bin/bass_low_81.bin"
(2)  173/   1A0CB :                     FmIns_bass_low_103:
(2)  174/   1A0CB :                     		binclude "sound/ins/fm/bin/bass_low_103.bin"
(2)  175/   1A0EB :                     FmIns_bass_low_106:
(2)  176/   1A0EB :                     		binclude "sound/ins/fm/bin/bass_low_106.bin"
(2)  177/   1A10B :                     FmIns_bass_low_126:
(2)  178/   1A10B :                     		binclude "sound/ins/fm/bin/bass_low_126.bin"
(2)  179/   1A12B :                     FmIns_bass_mid_19:
(2)  180/   1A12B :                     		binclude "sound/ins/fm/bin/bass_mid_19.bin"
(2)  181/   1A14B :                     FmIns_bass_mid_80:
(2)  182/   1A14B :                     		binclude "sound/ins/fm/bin/bass_mid_80.bin"
(2)  183/   1A16B :                     FmIns_bass_mid_111:
(2)  184/   1A16B :                     		binclude "sound/ins/fm/bin/bass_mid_111.bin"
(2)  185/   1A18B :                     FmIns_bass_power_123:
(2)  186/   1A18B :                     		binclude "sound/ins/fm/bin/bass_power_123.bin"
(2)  187/   1A1AB :                     FmIns_bass_silent_53:
(2)  188/   1A1AB :                     		binclude "sound/ins/fm/bin/bass_silent_53.bin"
(2)  189/   1A1CB :                     FmIns_bass_slap_10:
(2)  190/   1A1CB :                     		binclude "sound/ins/fm/bin/bass_slap_10.bin"
(2)  191/   1A1EB :                     FmIns_bass_slap_105:
(2)  192/   1A1EB :                     		binclude "sound/ins/fm/bin/bass_slap_105.bin"
(2)  193/   1A20B :                     FmIns_bass_synth_60:
(2)  194/   1A20B :                     		binclude "sound/ins/fm/bin/bass_synth_60.bin"
(2)  195/   1A22B :                     FmIns_bass_synth_61:
(2)  196/   1A22B :                     		binclude "sound/ins/fm/bin/bass_synth_61.bin"
(2)  197/   1A24B :                     FmIns_bass_synth_72:
(2)  198/   1A24B :                     		binclude "sound/ins/fm/bin/bass_synth_72.bin"
(2)  199/   1A26B :                     FmIns_bass_synth_73:
(2)  200/   1A26B :                     		binclude "sound/ins/fm/bin/bass_synth_73.bin"
(2)  201/   1A28B :                     FmIns_bass_vlow_74:
(2)  202/   1A28B :                     		binclude "sound/ins/fm/bin/bass_vlow_74.bin"
(2)  203/   1A2AB :                     FmIns_Organ_drawbar:
(2)  204/   1A2AB :                     		binclude "sound/ins/fm/bin/organ_drawbar.bin"
(2)  205/   1A2CB :                     FmIns_Flaute_1:
(2)  206/   1A2CB :                     		binclude "sound/ins/fm/bin/flaute_1.bin"
(2)  207/   1A2EB :                     FmIns_Flaute_2:
(2)  208/   1A2EB :                     		binclude "sound/ins/fm/bin/flaute_2.bin"
(2)  209/   1A30B :                     FmIns_Vibraphone_1:
(2)  210/   1A30B :                     		binclude "sound/ins/fm/bin/vibraphone_1.bin"
(2)  211/   1A32B :                     FmIns_Vibraphone_2:
(2)  212/   1A32B :                     		binclude "sound/ins/fm/bin/vibraphone_2.bin"
(2)  213/   1A34B :                     FmIns_Xylophone:
(2)  214/   1A34B :                     		binclude "sound/ins/fm/bin/xylophone2_43.bin"
(2)  215/   1A36B :                     FmIns_Bass_low81:
(2)  216/   1A36B :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(2)  217/   1A38B :                     FmIns_Trumpet_low:
(2)  218/   1A38B :                     		binclude "sound/ins/fm/bin/trumpet_low.bin"
(2)  219/   1A3AB :                     FmIns_Trumpet_genie:
(2)  220/   1A3AB :                     		binclude "sound/ins/fm/bin/trumpet_genie.bin"
(2)  221/   1A3CB :                     FmIns_Trumpet_bus:
(2)  222/   1A3CB :                     		binclude "sound/ins/fm/bin/trumpet_bus.bin"
(2)  223/   1A3EB :                     FmIns_Hats_1:
(2)  224/   1A3EB :                     		binclude "sound/ins/fm/bin/hats_96.bin"
(2)  225/   1A40B :                     FmIns_Bell_mid36:
(2)  226/   1A40B :                     		binclude "sound/ins/fm/bin/bell_mid_36.bin"
(2)  227/   1A42B :                     FmIns_Bell_62:
(2)  228/   1A42B :                     		binclude "sound/ins/fm/bin/bell_62.bin"
(2)  229/   1A44B :                     FmIns_Bell_93:
(2)  230/   1A44B :                     		binclude "sound/ins/fm/bin/bell_93.bin"
(2)  231/   1A46B :                     FmIns_Bell_low13:
(2)  232/   1A46B :                     		binclude "sound/ins/fm/bin/bell_low_13.bin"
(2)  233/   1A48B :                     
(2)  234/   1A48B :                     FmIns_Drum_Kick:
(2)  235/   1A48B :                     		binclude "sound/ins/fm/bin/kick_low.bin"
(2)  236/   1A4AB :                     FmIns_Tick:
(2)  237/   1A4AB :                     		binclude "sound/ins/fm/bin/tick_44.bin"
(2)  238/   1A4CB :                     
(2)  239/   1A4CB :                     ; -----------------------------------------------------------
(2)  240/   1A4CB :                     ; Special FM3 Instruments
(2)  241/   1A4CB :                     ; -----------------------------------------------------------
(2)  242/   1A4CB :                     
(2)  243/   1A4CB :                     FmSpIns_clack_1:
(2)  244/   1A4CB :                     		binclude "sound/ins/fm/bin/fm3_clack_1.bin"
(2)  245/   1A4F3 :                     FmSpIns_cowbell_h:
(2)  246/   1A4F3 :                     		binclude "sound/ins/fm/bin/fm3_cowbell_h.bin"
(2)  247/   1A51B :                     FmSpIns_cowbell_l:
(2)  248/   1A51B :                     		binclude "sound/ins/fm/bin/fm3_cowbell_l.bin"
(2)  249/   1A543 :                     FmSpIns_hats_hq:
(2)  250/   1A543 :                     		binclude "sound/ins/fm/bin/fm3_hats_hq.bin"
(2)  251/   1A56B :                     FmSpIns_sfx_alien:
(2)  252/   1A56B :                     		binclude "sound/ins/fm/bin/fm3_sfx_alien.bin"
(2)  253/   1A593 :                     FmSpIns_sfx_knckbuzz:
(2)  254/   1A593 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knckbuzz.bin"
(2)  255/   1A5BB :                     FmSpIns_sfx_knock_h:
(2)  256/   1A5BB :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_h.bin"
(2)  257/   1A5E3 :                     FmSpIns_sfx_knock_l:
(2)  258/   1A5E3 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_l.bin"
(2)  259/   1A60B :                     FmSpIns_sfx_laser:
(2)  260/   1A60B :                     		binclude "sound/ins/fm/bin/fm3_sfx_laser.bin"
(2)  261/   1A633 :                     
(2)  262/   1A633 :                     ; -----------------------------------------------------------
(2)  263/   1A633 :                     ; FM sound effects
(2)  264/   1A633 :                     ; -----------------------------------------------------------
(2)  265/   1A633 :                     
(2)  266/   1A633 :                     FmIns_sfx_punch:
(2)  267/   1A633 :                     		binclude "sound/ins/fm/bin/sfx_punch.bin"
(2)  268/   1A653 :                     FmIns_sfx_explode:
(2)  269/   1A653 :                     		binclude "sound/ins/fm/bin/sfx_explode.bin"
(2)  270/   1A673 :                     FmIns_sfx_slash:
(2)  271/   1A673 :                     		binclude "sound/ins/fm/bin/sfx_slash.bin"
(2)  272/   1A693 :                     FmIns_sfx_alien1:
(2)  273/   1A693 :                     		binclude "sound/ins/fm/bin/sfx_alien_83.bin"
(2)  274/   1A6B3 :                     FmIns_sfx_alien2:
(2)  275/   1A6B3 :                     		binclude "sound/ins/fm/bin/sfx_alien_84.bin"
(2)  276/   1A6D3 :                     
(2)  277/   1A6D3 :                     ; ====================================================================
(2)  278/   1A6D3 :                     
(2)  279/   1A6D3 :                     ; FM3 Special
(2)  280/   1A6D3 :                     FmIns_Sp_OpenHat:
(2)  281/   1A6D3 :                     		binclude "sound/ins/fm/gsx/fm3_openhat.gsx",$2478,$28
(2)  282/   1A6FB :                     FmIns_Sp_ClosedHat:
(2)  283/   1A6FB :                     		binclude "sound/ins/fm/gsx/fm3_closedhat.gsx",$2478,$28
(2)  284/   1A723 :                     FmIns_Sp_Cowbell:
(2)  285/   1A723 :                     		binclude "sound/ins/fm/gsx/fm3_cowbell.gsx",$2478,$28
(2)  286/   1A74B :                     FmIns_Drums_Kick1:
(2)  287/   1A74B :                     		binclude "sound/ins/fm/gsx/drum_kick_gem.gsx",$2478,$20
(2)  288/   1A76B :                     FmIns_Piano_Aqua:
(2)  289/   1A76B :                     		binclude "sound/ins/fm/gsx/piano_aqua.gsx",$2478,$20
(2)  290/   1A78B :                     FmIns_HBeat_tom:
(2)  291/   1A78B :                     		binclude "sound/ins/fm/gsx/nadia_tom.gsx",$2478,$20
(2)  292/   1A7AB :                     FmIns_Trumpet_1:
(2)  293/   1A7AB :                     		binclude "sound/ins/fm/gsx/trumpet_1.gsx",$2478,$20
(2)  294/   1A7CB :                     FmIns_Bass_duck:
(2)  295/   1A7CB :                     		binclude "sound/ins/fm/gsx/bass_duck.gsx",$2478,$20
(2)  296/   1A7EB :                     FmIns_ClosedHat:
(2)  297/   1A7EB :                     		binclude "sound/ins/fm/gsx/hats_closed.gsx",$2478,$20
(2)  298/   1A80B :                     FmIns_Trumpet_carnival:
(2)  299/   1A80B :                     		binclude "sound/ins/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(2)  300/   1A82B :                     FmIns_Bass_club:
(2)  301/   1A82B :                     		binclude "sound/ins/fm/gsx/OLD_bass_club.gsx",$2478,$20
(2)  302/   1A84B :                     FmIns_Bass_groove_2:
(2)  303/   1A84B :                     		binclude "sound/ins/fm/gsx/bass_groove_2.gsx",$2478,$20
(2)  304/   1A86B :                     FmIns_PSynth_plus:
(2)  305/   1A86B :                     		binclude "sound/ins/fm/gsx/psynth_plus.gsx",$2478,$20
(2)  306/   1A88B :                     FmIns_Brass_7:
(2)  307/   1A88B :                     		binclude "sound/ins/fm/gsx/brass_7.gsx",$2478,$20
(2)  308/   1A8AB :                     
(2)  309/   1A8AB :                     FmIns_sfx_punch_2:
(2)  310/   1A8AB :                     		binclude "sound/ins/fm/gsx/fmsfx_punch.gsx",$2478,$20
(2)  311/   1A8CB :                     FmIns_sfx_smash:
(2)  312/   1A8CB :                     		binclude "sound/ins/fm/gsx/fmsfx_smash.gsx",$2478,$20
(2)  313/   1A8EB :                     
(2)  314/   1A8EB :                     FmIns_bass_italo:
(2)  315/   1A8EB :                     		binclude "sound/ins/fm/gsx/bass_italo.gsx",$2478,$20
(2)  316/   1A90B :                     FmIns_Guitar_bball:
(2)  317/   1A90B :                     		binclude "sound/ins/fm/gsx/guitar_bball.gsx",$2478,$20
(2)  318/   1A92B :                     
(2)  319/   1A92B :                     ; ===========================================================================
(2)  320/   1A92B :                     ; -------------------------------------------------------------------
(2)  321/   1A92B :                     ; GEMA/Nikona DAC samples
(2)  322/   1A92B :                     ;
(2)  323/   1A92B :                     ; 16000hz base
(2)  324/   1A92B :                     ; -------------------------------------------------------------------
(2)  325/   1A92B :                     
(2)  326/   1A92B :                     		align $800
(2)  327/   1B000 :                     		;gSmplData Label,"file_path",loop_start
(2)  328/   1B000 :                     ; -----------------------------------------------------------
(2)  330/   1B000 : (MACRO)              		gSmplData DacIns_sxbeats,"sound/ins/smpl/sxbeats.wav",0
(2)  330/   1B000 : =$1B000              DACINS_SXBEATS    label *
(2)  330/   1B000 : 743C 00                     dc.b ((DACINS_SXBEATS_e-DACINS_SXBEATS_s)&$FF),(((DACINS_SXBEATS_e-DACINS_SXBEATS_s)>>8)&$FF),(((DACINS_SXBEATS_e-DACINS_SXBEATS_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  330/   1B003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  330/   1B006 :                     DACINS_SXBEATS_s:
(2)  330/   1B006 :                             binclude "sound/ins/smpl/sxbeats.wav",$2C       ; dc.b (data)
(2)  330/   1EC7A :                     DACINS_SXBEATS_e:
(2)  331/   1EC7A : (MACRO)              		gSmplData DacIns_sxbeats2,"sound/ins/smpl/sxbeats2.wav",0
(2)  331/   1EC7A : =$1EC7A              DACINS_SXBEATS2    label *
(2)  331/   1EC7A : 1A79 00                     dc.b ((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)&$FF),(((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)>>8)&$FF),(((DACINS_SXBEATS2_e-DACINS_SXBEATS2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  331/   1EC7D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  331/   1EC80 :                     DACINS_SXBEATS2_s:
(2)  331/   1EC80 :                             binclude "sound/ins/smpl/sxbeats2.wav",$2C       ; dc.b (data)
(2)  331/   2659A :                     DACINS_SXBEATS2_e:
(2)  332/   2659A : (MACRO)              		gSmplData DacIns_drumsetA,"sound/ins/smpl/drumsetA.wav",0
(2)  332/   2659A : =$2659A              DACINS_DRUMSETA    label *
(2)  332/   2659A : A476 00                     dc.b ((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)&$FF),(((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)>>8)&$FF),(((DACINS_DRUMSETA_e-DACINS_DRUMSETA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  332/   2659D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  332/   265A0 :                     DACINS_DRUMSETA_s:
(2)  332/   265A0 :                             binclude "sound/ins/smpl/drumsetA.wav",$2C       ; dc.b (data)
(2)  332/   2DC44 :                     DACINS_DRUMSETA_e:
(2)  334/   2DC44 :                     ; 		gSmplData DacIns_trnthem_10,"sound/ins/smpl/trnthem/10.wav",3033
(2)  335/   2DC44 :                     ; 		gSmplData DacIns_trnthem_20,"sound/ins/smpl/trnthem/20.wav",14309
(2)  336/   2DC44 : (MACRO)              		gSmplData DacIns_Kick,"sound/ins/smpl/kick.wav",0
(2)  336/   2DC44 : =$2DC44              DACINS_KICK    label *
(2)  336/   2DC44 : B004 00                     dc.b ((DACINS_KICK_e-DACINS_KICK_s)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>8)&$FF),(((DACINS_KICK_e-DACINS_KICK_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  336/   2DC47 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  336/   2DC4A :                     DACINS_KICK_s:
(2)  336/   2DC4A :                             binclude "sound/ins/smpl/kick.wav",$2C       ; dc.b (data)
(2)  336/   2E0FA :                     DACINS_KICK_e:
(2)  337/   2E0FA : (MACRO)              		gSmplData DacIns_Snare,"sound/ins/smpl/snare.wav",0
(2)  337/   2E0FA : =$2E0FA              DACINS_SNARE    label *
(2)  337/   2E0FA : FC0E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  337/   2E0FD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  337/   2E100 :                     DACINS_SNARE_s:
(2)  337/   2E100 :                             binclude "sound/ins/smpl/snare.wav",$2C       ; dc.b (data)
(2)  337/   2EFFC :                     DACINS_SNARE_e:
(2)  338/   2EFFC : (MACRO)              		gSmplData DacIns_Kick_2,"sound/ins/smpl/kick_2.wav",0
(2)  338/   2EFFC : =$2EFFC              DACINS_KICK_2    label *
(2)  338/   2EFFC : 5808 00                     dc.b ((DACINS_KICK_2_e-DACINS_KICK_2_s)&$FF),(((DACINS_KICK_2_e-DACINS_KICK_2_s)>>8)&$FF),(((DACINS_KICK_2_e-DACINS_KICK_2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  338/   2EFFF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  338/   2F002 :                     DACINS_KICK_2_s:
(2)  338/   2F002 :                             binclude "sound/ins/smpl/kick_2.wav",$2C       ; dc.b (data)
(2)  338/   2F85A :                     DACINS_KICK_2_e:
(2)  339/   2F85A : (MACRO)              		gSmplData DacIns_Snare_2,"sound/ins/smpl/snare_2.wav",0
(2)  339/   2F85A : =$2F85A              DACINS_SNARE_2    label *
(2)  339/   2F85A : B321 00                     dc.b ((DACINS_SNARE_2_e-DACINS_SNARE_2_s)&$FF),(((DACINS_SNARE_2_e-DACINS_SNARE_2_s)>>8)&$FF),(((DACINS_SNARE_2_e-DACINS_SNARE_2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(2)  339/   2F85D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(2)  339/   2F860 :                     DACINS_SNARE_2_s:
(2)  339/   2F860 :                             binclude "sound/ins/smpl/snare_2.wav",$2C       ; dc.b (data)
(2)  339/   31A13 :                     DACINS_SNARE_2_e:
(2)  340/   31A13 :                     ; 		gSmplData DacIns_Timpani,"sound/ins/smpl/timpani.wav",0
(2)  341/   31A13 :                     ; 		gSmplData DacIns_wegot_kick,"sound/ins/smpl/wegot_kick.wav",0
(2)  342/   31A13 :                     ; 		gSmplData DacIns_wegot_crash,"sound/ins/smpl/wegot_crash.wav",0
(2)  343/   31A13 :                     
(1)   41/   31A13 :                     		include "game/data/bank_main.asm"
(2)    1/   31A13 :                     ; ===========================================================================
(2)    2/   31A13 :                     ; ----------------------------------------------------------------
(2)    3/   31A13 :                     ; BANK data
(2)    4/   31A13 :                     ; ----------------------------------------------------------------
(2)    5/   31A13 :                     
(2)    6/   31A13 : (MACRO)              		binclude_dma	ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)    6/   31A13 :                     
(2)    6/   31A13 :                                     align 2
(2)    6/   31A14 : =$31A14              ASCII_FONT        label *
(2)    6/   31A14 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)    6/   32614 :                                     align 2
(2)    6/   32614 :                     
(2)    7/   32614 : (MACRO)              		binclude_dma	ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)    7/   32614 :                     
(2)    7/   32614 :                                     align 2
(2)    7/   32614 : =$32614              ASCII_FONT_W        label *
(2)    7/   32614 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)    7/   33E14 :                                     align 2
(2)    7/   33E14 :                     
(2)    8/   33E14 :                     
(2)    9/   33E14 : (MACRO)              		binclude_dma	Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)    9/   33E14 :                     
(2)    9/   33E14 :                                     align 2
(2)    9/   33E14 : =$33E14              ART_FAIRYDODO        label *
(2)    9/   33E14 :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)    9/   34414 :                                     align 2
(2)    9/   34414 :                     
(2)   10/   34414 : (MACRO)              		binclude_dma	Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)   10/   34414 :                     
(2)   10/   34414 :                                     align 2
(2)   10/   34414 : =$34414              ART_FAIRYMIMI        label *
(2)   10/   34414 :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)   10/   34A14 :                                     align 2
(2)   10/   34A14 :                     
(2)   11/   34A14 : (MACRO)              		binclude_dma	Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   11/   34A14 :                     
(2)   11/   34A14 :                                     align 2
(2)   11/   34A14 : =$34A14              ART_FAIRYFIFI        label *
(2)   11/   34A14 :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   11/   34F94 :                                     align 2
(2)   11/   34F94 :                     
(2)   12/   34F94 :                     
(2)   13/   34F94 :                     ; ----------------------------------------------------------------
(2)   14/   34F94 :                     ; Everything else...
(2)   15/   34F94 :                     ; ----------------------------------------------------------------
(2)   16/   34F94 :                     
(2)   17/   34F94 :                     
(2)   18/   34F94 :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   19/   34FB4 :                     		align 2
(2)   20/   34FB4 :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   21/   34FD8 :                     		align 2
(2)   22/   34FD8 :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   23/   34FFC :                     		align 2
(2)   24/   34FFC :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   25/   35038 :                     		align 2
(2)   26/   35038 :                     
(1)   42/   35038 : (MACRO)              	data_dend DATA_BANK0_e
(1)   42/   35038 : =$30B04              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; save size for _dend
(1)   42/   35038 :                     
(1)   42/   35038 :                     
(1)   43/   35038 :                     
     383/   35038 :                     
     384/   35038 :                     ; ====================================================================
     385/   35038 :                     ; ----------------------------------------------------------------
     386/   35038 :                     ; Cartridge-ONLY Section, direct label access
     387/   35038 :                     ;
     388/   35038 :                     ; Genesis, 32X Cartridge and Pico ONLY.
     389/   35038 :                     ; ----------------------------------------------------------------
     390/   35038 :                     
     392/   35038 :                     
     393/   35038 :                     ; --------------------------------------------------------
     394/   35038 :                     ; ROM only DMA graphics data
     395/   35038 :                     ; --------------------------------------------------------
     396/   35038 :                     
     397/   35038 :                     		include "game/data/ROM_dma_vdp.asm"
(1)    1/   35038 :                     ; ===========================================================================
(1)    2/   35038 :                     ; ----------------------------------------------------------------
(1)    3/   35038 :                     ; DMA Genesis graphics for Cartridge ONLY
(1)    4/   35038 :                     ; ----------------------------------------------------------------
(1)    5/   35038 :                     		align 2
(1)    6/   35038 :                     ; --------------------------------------------------------
(1)    7/   35038 :                     
     398/   35038 :                     
     399/   35038 :                     ; --------------------------------------------------------
     400/   35038 :                     ; ROM-only 32X data
     401/   35038 :                     ;
     402/   35038 :                     ; In the case of RV bit (during DMA):
     403/   35038 :                     ; Only the PWM samples are protected, everything else
     404/   35038 :                     ; will be trashed.
     405/   35038 :                     ; --------------------------------------------------------
     406/   35038 :                     
     407/ 2035038 :                     		phase CS1+*
     408/ 2035038 :                     ; ------------------------------------------------
     409/ 2035038 :                     		align 4
     410/ 2035038 :                     		include "game/data/mars/objects/list_ROM.asm"	; 3D objects
(1)    1/ 2035038 :                     ; ===========================================================================
(1)    2/ 2035038 :                     ; ----------------------------------------------------------------
(1)    3/ 2035038 :                     ; Special include for the 3D models, ROM-ONLY VERSION
(1)    4/ 2035038 :                     ;
(1)    5/ 2035038 :                     ; THIS CAN'T BE USED ON SCD/CD32X
(1)    6/ 2035038 :                     ; ----------------------------------------------------------------
(1)    7/ 2035038 :                     
(1)    8/ 2035038 :                     ; 		include "game/data/mars/objects/test/head.asm"
(1)    9/ 2035038 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(1)   10/ 2035038 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(1)   11/ 2035038 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(1)   12/ 2035038 :                     
     411/ 2035038 :                     		include "sound/ROM_smpl_pwm.asm"		; PWM samples
(1)    1/ 2035038 :                     ; ===========================================================================
(1)    2/ 2035038 :                     ; -------------------------------------------------------------------
(1)    3/ 2035038 :                     ; GEMA/Nikona PWM instruments on Cartridge ONLY
(1)    4/ 2035038 :                     ;
(1)    5/ 2035038 :                     ; - Samples located here CANNOT be used on CD32X
(1)    6/ 2035038 :                     ; - If the Genesis does DMA that requires the RV bit this
(1)    7/ 2035038 :                     ;   section will get protected ASAP before the DMA starts
(1)    8/ 2035038 :                     ;
(1)    9/ 2035038 :                     ; MACRO:
(1)   10/ 2035038 :                     ; gSmplData Label,"file_path",loop_start
(1)   11/ 2035038 :                     ; Set loop_start to 0 if not using it.
(1)   12/ 2035038 :                     ;
(1)   13/ 2035038 :                     ; BASE C-5 samplerate is 16000hz
(1)   14/ 2035038 :                     ; -------------------------------------------------------------------
(1)   15/ 2035038 :                     
(1)   16/ 2035038 :                     	align 4
(1)   17/ 2035038 :                     	;gSmplData Label,"file_path",loop_start
(1)   18/ 2035038 :                     ; -----------------------------------------------------------
(1)   19/ 2035038 :                     ; 	gSmplData PwmIns_Nadie,"sound/ins/smpl/inga_st.wav",0
(1)   20/ 2035038 : (MACRO)              	gSmplData PwmIns_Piano,"sound/ins/smpl/piano_1.wav",0
(1)   20/ 2035038 : =$2035038            PWMINS_PIANO    label *
(1)   20/ 2035038 : 1647 00                     dc.b ((PWMINS_PIANO_e-PWMINS_PIANO_s)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>8)&$FF),(((PWMINS_PIANO_e-PWMINS_PIANO_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   20/ 203503B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   20/ 203503E :                     PWMINS_PIANO_s:
(1)   20/ 203503E :                             binclude "sound/ins/smpl/piano_1.wav",$2C       ; dc.b (data)
(1)   20/ 2039754 :                     PWMINS_PIANO_e:
(1)   21/ 2039754 : (MACRO)              	gSmplData PwmIns_PKick,"sound/ins/smpl/wegot_kick.wav",0
(1)   21/ 2039754 : =$2039754            PWMINS_PKICK    label *
(1)   21/ 2039754 : 7407 00                     dc.b ((PWMINS_PKICK_e-PWMINS_PKICK_s)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>8)&$FF),(((PWMINS_PKICK_e-PWMINS_PKICK_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   21/ 2039757 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   21/ 203975A :                     PWMINS_PKICK_s:
(1)   21/ 203975A :                             binclude "sound/ins/smpl/wegot_kick.wav",$2C       ; dc.b (data)
(1)   21/ 2039ECE :                     PWMINS_PKICK_e:
(1)   22/ 2039ECE : (MACRO)              	gSmplData PwmIns_PTom,"sound/ins/smpl/sauron_tom.wav",0
(1)   22/ 2039ECE : =$2039ECE            PWMINS_PTOM    label *
(1)   22/ 2039ECE : B40B 00                     dc.b ((PWMINS_PTOM_e-PWMINS_PTOM_s)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>8)&$FF),(((PWMINS_PTOM_e-PWMINS_PTOM_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   22/ 2039ED1 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   22/ 2039ED4 :                     PWMINS_PTOM_s:
(1)   22/ 2039ED4 :                             binclude "sound/ins/smpl/sauron_tom.wav",$2C       ; dc.b (data)
(1)   22/ 203AA88 :                     PWMINS_PTOM_e:
(1)   23/ 203AA88 :                     
(1)   24/ 203AA88 : (MACRO)              	gSmplData PwmIns_sxbeats,"sound/ins/smpl/sxbeats.wav",0
(1)   24/ 203AA88 : =$203AA88            PWMINS_SXBEATS    label *
(1)   24/ 203AA88 : 743C 00                     dc.b ((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)&$FF),(((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)>>8)&$FF),(((PWMINS_SXBEATS_e-PWMINS_SXBEATS_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   24/ 203AA8B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   24/ 203AA8E :                     PWMINS_SXBEATS_s:
(1)   24/ 203AA8E :                             binclude "sound/ins/smpl/sxbeats.wav",$2C       ; dc.b (data)
(1)   24/ 203E702 :                     PWMINS_SXBEATS_e:
(1)   25/ 203E702 : (MACRO)              	gSmplData PwmIns_sxbeats2,"sound/ins/smpl/sxbeats2.wav",0
(1)   25/ 203E702 : =$203E702            PWMINS_SXBEATS2    label *
(1)   25/ 203E702 : 1A79 00                     dc.b ((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)&$FF),(((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)>>8)&$FF),(((PWMINS_SXBEATS2_e-PWMINS_SXBEATS2_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   25/ 203E705 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   25/ 203E708 :                     PWMINS_SXBEATS2_s:
(1)   25/ 203E708 :                             binclude "sound/ins/smpl/sxbeats2.wav",$2C       ; dc.b (data)
(1)   25/ 2046022 :                     PWMINS_SXBEATS2_e:
(1)   26/ 2046022 : (MACRO)              	gSmplData PwmIns_drumsetA,"sound/ins/smpl/drumsetA.wav",0
(1)   26/ 2046022 : =$2046022            PWMINS_DRUMSETA    label *
(1)   26/ 2046022 : A476 00                     dc.b ((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)&$FF),(((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)>>8)&$FF),(((PWMINS_DRUMSETA_e-PWMINS_DRUMSETA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   26/ 2046025 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   26/ 2046028 :                     PWMINS_DRUMSETA_s:
(1)   26/ 2046028 :                             binclude "sound/ins/smpl/drumsetA.wav",$2C       ; dc.b (data)
(1)   26/ 204D6CC :                     PWMINS_DRUMSETA_e:
(1)   27/ 204D6CC :                     
(1)   28/ 204D6CC : (MACRO)               	gSmplData PwmIns_sauron_01,"sound/ins/smpl/sauron/01.wav",0
(1)   28/ 204D6CC : =$204D6CC            PWMINS_SAURON_01    label *
(1)   28/ 204D6CC : 040F 00                     dc.b ((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)&$FF),(((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)>>8)&$FF),(((PWMINS_SAURON_01_e-PWMINS_SAURON_01_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   28/ 204D6CF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   28/ 204D6D2 :                     PWMINS_SAURON_01_s:
(1)   28/ 204D6D2 :                             binclude "sound/ins/smpl/sauron/01.wav",$2C       ; dc.b (data)
(1)   28/ 204E5D6 :                     PWMINS_SAURON_01_e:
(1)   29/ 204E5D6 : (MACRO)               	gSmplData PwmIns_sauron_02,"sound/ins/smpl/sauron/02.wav",0
(1)   29/ 204E5D6 : =$204E5D6            PWMINS_SAURON_02    label *
(1)   29/ 204E5D6 : 6E0C 00                     dc.b ((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)&$FF),(((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)>>8)&$FF),(((PWMINS_SAURON_02_e-PWMINS_SAURON_02_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   29/ 204E5D9 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   29/ 204E5DC :                     PWMINS_SAURON_02_s:
(1)   29/ 204E5DC :                             binclude "sound/ins/smpl/sauron/02.wav",$2C       ; dc.b (data)
(1)   29/ 204F24A :                     PWMINS_SAURON_02_e:
(1)   30/ 204F24A : (MACRO)                	gSmplData PwmIns_sauron_03,"sound/ins/smpl/sauron/03.wav",0
(1)   30/ 204F24A : =$204F24A            PWMINS_SAURON_03    label *
(1)   30/ 204F24A : C80C 00                     dc.b ((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)&$FF),(((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)>>8)&$FF),(((PWMINS_SAURON_03_e-PWMINS_SAURON_03_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   30/ 204F24D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   30/ 204F250 :                     PWMINS_SAURON_03_s:
(1)   30/ 204F250 :                             binclude "sound/ins/smpl/sauron/03.wav",$2C       ; dc.b (data)
(1)   30/ 204FF18 :                     PWMINS_SAURON_03_e:
(1)   31/ 204FF18 : (MACRO)                	gSmplData PwmIns_sauron_04,"sound/ins/smpl/sauron/04.wav",0
(1)   31/ 204FF18 : =$204FF18            PWMINS_SAURON_04    label *
(1)   31/ 204FF18 : DE23 00                     dc.b ((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)&$FF),(((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)>>8)&$FF),(((PWMINS_SAURON_04_e-PWMINS_SAURON_04_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   31/ 204FF1B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   31/ 204FF1E :                     PWMINS_SAURON_04_s:
(1)   31/ 204FF1E :                             binclude "sound/ins/smpl/sauron/04.wav",$2C       ; dc.b (data)
(1)   31/ 20522FC :                     PWMINS_SAURON_04_e:
(1)   32/ 20522FC : (MACRO)               	gSmplData PwmIns_sauron_05,"sound/ins/smpl/sauron/05.wav",13988
(1)   32/ 20522FC : =$20522FC            PWMINS_SAURON_05    label *
(1)   32/ 20522FC : B24D 00                     dc.b ((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)&$FF),(((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)>>8)&$FF),(((PWMINS_SAURON_05_e-PWMINS_SAURON_05_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   32/ 20522FF : A436 00                     dc.b ((13988)&$FF),(((13988)>>8)&$FF),(((13988)>>16)&$FF)                                  ; dc.b 4,5,6 Start 13988
(1)   32/ 2052302 :                     PWMINS_SAURON_05_s:
(1)   32/ 2052302 :                             binclude "sound/ins/smpl/sauron/05.wav",$2C       ; dc.b (data)
(1)   32/ 20570B4 :                     PWMINS_SAURON_05_e:
(1)   33/ 20570B4 : (MACRO)                	gSmplData PwmIns_sauron_06,"sound/ins/smpl/sauron/06.wav",0
(1)   33/ 20570B4 : =$20570B4            PWMINS_SAURON_06    label *
(1)   33/ 20570B4 : 8825 00                     dc.b ((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)&$FF),(((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)>>8)&$FF),(((PWMINS_SAURON_06_e-PWMINS_SAURON_06_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   33/ 20570B7 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   33/ 20570BA :                     PWMINS_SAURON_06_s:
(1)   33/ 20570BA :                             binclude "sound/ins/smpl/sauron/06.wav",$2C       ; dc.b (data)
(1)   33/ 2059642 :                     PWMINS_SAURON_06_e:
(1)   34/ 2059642 : (MACRO)               	gSmplData PwmIns_sauron_07,"sound/ins/smpl/sauron/07.wav",0
(1)   34/ 2059642 : =$2059642            PWMINS_SAURON_07    label *
(1)   34/ 2059642 : 9233 00                     dc.b ((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)&$FF),(((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)>>8)&$FF),(((PWMINS_SAURON_07_e-PWMINS_SAURON_07_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   34/ 2059645 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   34/ 2059648 :                     PWMINS_SAURON_07_s:
(1)   34/ 2059648 :                             binclude "sound/ins/smpl/sauron/07.wav",$2C       ; dc.b (data)
(1)   34/ 205C9DA :                     PWMINS_SAURON_07_e:
(1)   35/ 205C9DA : (MACRO)                	gSmplData PwmIns_sauron_08,"sound/ins/smpl/sauron/08.wav",0
(1)   35/ 205C9DA : =$205C9DA            PWMINS_SAURON_08    label *
(1)   35/ 205C9DA : 0E1D 00                     dc.b ((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)&$FF),(((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)>>8)&$FF),(((PWMINS_SAURON_08_e-PWMINS_SAURON_08_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   35/ 205C9DD : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   35/ 205C9E0 :                     PWMINS_SAURON_08_s:
(1)   35/ 205C9E0 :                             binclude "sound/ins/smpl/sauron/08.wav",$2C       ; dc.b (data)
(1)   35/ 205E6EE :                     PWMINS_SAURON_08_e:
(1)   36/ 205E6EE : (MACRO)               	gSmplData PwmIns_sauron_09,"sound/ins/smpl/sauron/09.wav",0
(1)   36/ 205E6EE : =$205E6EE            PWMINS_SAURON_09    label *
(1)   36/ 205E6EE : C41E 00                     dc.b ((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)&$FF),(((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)>>8)&$FF),(((PWMINS_SAURON_09_e-PWMINS_SAURON_09_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   36/ 205E6F1 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   36/ 205E6F4 :                     PWMINS_SAURON_09_s:
(1)   36/ 205E6F4 :                             binclude "sound/ins/smpl/sauron/09.wav",$2C       ; dc.b (data)
(1)   36/ 20605B8 :                     PWMINS_SAURON_09_e:
(1)   37/ 20605B8 : (MACRO)                	gSmplData PwmIns_sauron_10,"sound/ins/smpl/sauron/10.wav",0
(1)   37/ 20605B8 : =$20605B8            PWMINS_SAURON_10    label *
(1)   37/ 20605B8 : 4238 00                     dc.b ((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)&$FF),(((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)>>8)&$FF),(((PWMINS_SAURON_10_e-PWMINS_SAURON_10_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   37/ 20605BB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   37/ 20605BE :                     PWMINS_SAURON_10_s:
(1)   37/ 20605BE :                             binclude "sound/ins/smpl/sauron/10.wav",$2C       ; dc.b (data)
(1)   37/ 2063E00 :                     PWMINS_SAURON_10_e:
(1)   38/ 2063E00 : (MACRO)               	gSmplData PwmIns_sauron_11,"sound/ins/smpl/sauron/11.wav",0
(1)   38/ 2063E00 : =$2063E00            PWMINS_SAURON_11    label *
(1)   38/ 2063E00 : 743D 00                     dc.b ((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)&$FF),(((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)>>8)&$FF),(((PWMINS_SAURON_11_e-PWMINS_SAURON_11_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   38/ 2063E03 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   38/ 2063E06 :                     PWMINS_SAURON_11_s:
(1)   38/ 2063E06 :                             binclude "sound/ins/smpl/sauron/11.wav",$2C       ; dc.b (data)
(1)   38/ 2067B7A :                     PWMINS_SAURON_11_e:
(1)   39/ 2067B7A : (MACRO)               	gSmplData PwmIns_sauron_12,"sound/ins/smpl/sauron/12.wav",0
(1)   39/ 2067B7A : =$2067B7A            PWMINS_SAURON_12    label *
(1)   39/ 2067B7A : F217 00                     dc.b ((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)&$FF),(((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)>>8)&$FF),(((PWMINS_SAURON_12_e-PWMINS_SAURON_12_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(1)   39/ 2067B7D : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(1)   39/ 2067B80 :                     PWMINS_SAURON_12_s:
(1)   39/ 2067B80 :                             binclude "sound/ins/smpl/sauron/12.wav",$2C       ; dc.b (data)
(1)   39/ 2069372 :                     PWMINS_SAURON_12_e:
(1)   40/ 2069372 :                     
     412/ 2069372 :                     ; ------------------------------------------------
     413/   69372 :                     		dephase
     414/   69372 :                     
     415/   69372 :                     ; ----------------------------------------------------------------
     416/   69372 :                     
     418/   69372 :                     
     419/   69372 :                     ; ====================================================================
     420/   69372 :                     ; ------------------------------------------------
     421/   69372 :                     ; End
     422/   69372 :                     ; ------------------------------------------------
     423/   69372 :                     
     424/   69372 :                     ROM_END:
     425/   69372 : 00                  		dc.b 0
     426/   69373 :                     		align $8000
     427/   70000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 11/12/2024 05:52:25 PM


  Symbol Table (* = unused):
  --------------------------

*ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - | *ARCHITECTURE :      "x86_64-Linux" - |
 ARP :                           2C - |  ART_FAIRYDODO :              33E14 C |
 ART_FAIRYFIFI :              34A14 C |  ART_FAIRYMIMI :              34414 C |
 ASCII_FONT :                 31A14 C |  ASCII_FONT_W :               32614 C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - | *BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - | *BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - |  CDRAMDST :                    1F82 C |
 CDRAMLEN :                    1F87 C |  CDRAMSRC :                    1F84 C |
 CDRAMSRCB :                   1F86 C |  CHIP_ENV :                    1062 C |
 CHIP_ENV.ATKEND :             10E5 C | *CHIP_ENV.ATKZERO :            10E8 C |
 CHIP_ENV.CHK2 :               10EE C |  CHIP_ENV.CHK4 :               1123 C |
 CHIP_ENV.CKOF :               1086 C |  CHIP_ENV.CKON :               1099 C |
*CHIP_ENV.DECTMR :             10F2 C |  CHIP_ENV.DKADD :              110C C |
 CHIP_ENV.DKSAV :              1114 C |  CHIP_ENV.DKYEND :             1119 C |
 CHIP_ENV.DO_NFREQ :           1178 C |  CHIP_ENV.ENVPROC :            10B7 C |
 CHIP_ENV.KILLENV :            1139 C | *CHIP_ENV.NBLOCK :             10B7 C |
 CHIP_ENV.NORMAL :             1173 C |  CHIP_ENV.NOUPD :              11B9 C |
 CHIP_ENV.NSKIP :              10AE C |  CHIP_ENV.SILNC_3 :            116F C |
 CHIP_ENV.VEDLP :              1141 C |  CHIP_ENV.VLMUCH :             11A5 C |
 CHIP_ENV.VLOOP :              106E C |  CHIP_ENV.VONLY :              119B C |
 CHNL_CHIP :                      1 - |  CHNL_EFFARG :                    6 - |
 CHNL_EFFID :                     5 - |  CHNL_FLAGS :                     0 - |
 CHNL_INS :                       3 - |  CHNL_NOTE :                      2 - |
 CHNL_TYPE :                      7 - |  CHNL_VOL :                       4 - |
*CLICKL :                         2 - | *CLICKM :                         4 - |
*CLICKR :                         1 - | *CLICKS :                         8 - |
*CMDINTCLR :                     1A - | *CMDIRQ_ON :                      2 - |
 COM :                            0 - | *COMM0 :                         20 - |
*COMM1 :                         21 - | *COMM10 :                        2A - |
*COMM11 :                        2B - | *COMM12 :                        2C - |
*COMM13 :                        2D - |  COMM14 :                        2E - |
*COMM15 :                        2F - | *COMM2 :                         22 - |
*COMM3 :                         23 - | *COMM4 :                         24 - |
*COMM5 :                         25 - | *COMM6 :                         26 - |
*COMM7 :                         27 - | *COMM8 :                         28 - |
*COMM9 :                         29 - |  COMMZFIFO :                   1F60 C |
 COMMZREAD :                     2E C |  COMMZROMBLK :                 1F81 C |
 COMMZWRITE :                  1F80 C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CONTROLLER_1 :    FFFFFFFFFFFFD8F8 - |
 CONTROLLER_2 :    FFFFFFFFFFFFD908 - | *CS0 :                            0 - |
 CS1 :                      2000000 - |  CS2 :                      4000000 - |
*CS3 :                      6000000 - |  CURRTICKBITS :                1CF9 C |
*CUSTOM :                         0 - | *CYCLE :                         32 - |
*DACINS_DRUMSETA :            2659A C | *DACINS_KICK :                2DC44 C |
 DACINS_KICK_2 :              2EFFC C | *DACINS_SNARE :               2E0FA C |
 DACINS_SNARE_2 :             2F85A C | *DACINS_SXBEATS :             1B000 C |
*DACINS_SXBEATS2 :            1EC7A C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     11F4 C |
 DAC_ON :                      11DF C |  DAC_PLAY :                    1209 C |
 DAC_REFILL :                  123D C |  DAC_REFILL.DACFILL_END :      12FC C |
 DAC_REFILL.DACFILL_LOOP :     12B5 C |  DAC_REFILL.DACFILL_RET :      12FF C |
 DAC_REFILL.DAC_OVER :         128B C |  DATA_BANK0 :                  4534 C |
*DATE :                "11/12/2024" - |  DDACCNTR :                    17AD C |
 DDACFIFOMID :                   37 C |  DDACPNTR :                    17AA C |
*DEF_HSIZE_128 :                100 - | *DEF_HSIZE_32 :                  40 - |
 DEF_HSIZE_64 :                  80 - | *DEF_MAXSTAMPCOUT :              60 - |
 DEF_PRINTPAL :                6000 - |  DEF_PRINTVRAM :                5A0 - |
 DEF_PRINTVRAMW :               4E0 - | *DEF_SAVEINFO :                18E8 C |
 DEF_VRAM_BG :                 E000 - |  DEF_VRAM_FG :                 C000 - |
 DEF_VRAM_HSCRL :              FC00 - |  DEF_VRAM_SPR :                F800 - |
 DEF_VRAM_WD :                 D000 - | *DISPENBL :                      40 - |
 DKY :                            C - | *DMAENBL :                       10 - |
*DREQCTL :                        6 - | *DREQDEST :                       C - |
*DREQFIFO :                      12 - | *DREQLEN :                       10 - |
*DREQSOURCE :                     8 - |  DRV_LOOP :                      41 C |
 DRV_LOOP.CMND_0 :               D7 C |  DRV_LOOP.CMND_1 :               DA C |
 DRV_LOOP.CMND_2 :               F3 C |  DRV_LOOP.CMND_3 :              12D C |
 DRV_LOOP.CMND_5 :              16B C |  DRV_LOOP.CMND_6 :              1A4 C |
 DRV_LOOP.CMND_7 :              1DD C |  DRV_LOOP.CMND_RDSLOT :         1FB C |
 DRV_LOOP.DEL_ALL :             164 C |  DRV_LOOP.GETCBYTEL :            AA C |
 DRV_LOOP.GRAB_ARG :             A8 C |  DRV_LOOP.LIST :                 C7 C |
 DRV_LOOP.NEITHER :              81 C |  DRV_LOOP.NEXT_CMD :             85 C |
 DRV_LOOP.NOBEATS :              68 C |  DRV_LOOP.NOTICKS :              5B C |
 DRV_LOOP.NOT_PAL :             1F0 C |  DRV_LOOP.SRCH_DEL :            14B C |
 DRV_LOOP.SRCH_FVOL :           189 C |  DRV_LOOP.SRCH_MODE :           113 C |
 DRV_LOOP.SRCH_SLOT :           20D C |  DRV_LOOP.SRCH_VOL :            1C2 C |
 DRV_LOOP.WRTTO_DEL :           158 C |  DRV_LOOP.WRTTO_FVOL :          196 C |
 DRV_LOOP.WRTTO_SLOT :          122 C |  DRV_LOOP.WRTTO_VOL :           1CF C |
 DTBL_MULTI :                   7EC C |  DTBL_SINGL :                   800 C |
 DTBL_SINGL.CHNL_ULNK :         EFF C |  DTBL_SINGL.COMN_PANLIST :      CEC C |
 DTBL_SINGL.DAC_CUT :           BCD C |  DTBL_SINGL.DAC_OFF :           BD3 C |
 DTBL_SINGL.DAC_PROC :          BD9 C |  DTBL_SINGL.D_DOWN :            C70 C |
 DTBL_SINGL.D_DOWNHF :          C6B C |  DTBL_SINGL.D_UP :              C62 C |
*DTBL_SINGL.D_UPHF :            C5F C |  DTBL_SINGL.EFFC :              C29 C |
 DTBL_SINGL.EFFC_D :            C44 C |  DTBL_SINGL.EFFC_E :            C7D C |
 DTBL_SINGL.EFFC_F :            C8C C |  DTBL_SINGL.EFFC_X :            C9D C |
 DTBL_SINGL.FM_CINDX :          B9B C |  DTBL_SINGL.FM_CLRRSAVE :       A82 C |
 DTBL_SINGL.FM_CUT :            A57 C |  DTBL_SINGL.FM_HASVOL :         EBD C |
 DTBL_SINGL.FM_KEYOFF :         A63 C |  DTBL_SINGL.FM_OFF :            A4E C |
 DTBL_SINGL.FM_TLOFF :          A6B C |  DTBL_SINGL.FND_OCT :           EEE C |
 DTBL_SINGL.FNOT_PAL :          979 C |  DTBL_SINGL.GET_FMCACH :        BA3 C |
 DTBL_SINGL.GET_OCT :           EE4 C |  DTBL_SINGL.INST :              D1D C |
 DTBL_SINGL.INS_DAC :           DDA C |  DTBL_SINGL.INS_FM :            D7E C |
 DTBL_SINGL.INS_PCM :           E2E C |  DTBL_SINGL.INS_PSG :           D48 C |
 DTBL_SINGL.INS_PSGN :          D42 C |  DTBL_SINGL.INS_PWM :           E6B C |
*DTBL_SINGL.INVL_INS :          D41 C |  DTBL_SINGL.KEEP_TLMX :         B85 C |
 DTBL_SINGL.KYCUT_PSG :         917 C | *DTBL_SINGL.KYCUT_PSGN :        914 C |
 DTBL_SINGL.KYOFF_PSG :         90B C | *DTBL_SINGL.KYOFF_PSGN :        908 C |
 DTBL_SINGL.KYPSGN_HATOFF :     920 C |  DTBL_SINGL.LINKED :            86A C |
 DTBL_SINGL.MKFM_PROC :         9B4 C |  DTBL_SINGL.MKFM_SET :          A99 C |
 DTBL_SINGL.MKFM_TLVOL :        B2C C |  DTBL_SINGL.MKFM_WREGS :        B03 C |
 DTBL_SINGL.MK_DAC :            BB3 C |  DTBL_SINGL.MK_FM :             97A C |
 DTBL_SINGL.MK_FM_SP :          9FE C |  DTBL_SINGL.MK_LIST :           8B9 C |
 DTBL_SINGL.MK_PCM :            C09 C |  DTBL_SINGL.MK_PSG :            8C7 C |
 DTBL_SINGL.MK_PWM :            C0A C |  DTBL_SINGL.NEW_ROMDAT :        DC4 C |
 DTBL_SINGL.NOTE :              EB3 C |  DTBL_SINGL.NOT_DAC :           99F C |
 DTBL_SINGL.NOT_NS :            903 C |  DTBL_SINGL.NOT_PAL :           9D2 C |
 DTBL_SINGL.NO_LFO :            AF8 C |  DTBL_SINGL.NO_REQ :            944 C |
 DTBL_SINGL.N_FM :              EDA C | *DTBL_SINGL.N_INDX :            ECF C |
*DTBL_SINGL.N_STFREQ :          ED0 C |  DTBL_SINGL.PAN_MCD :           CC9 C |
 DTBL_SINGL.PCM_PANLIST :       CF4 C |  DTBL_SINGL.PSGC_KEYON :        92E C |
 DTBL_SINGL.PSGC_PROC :         927 C |  DTBL_SINGL.PSG_GETFREQ :       965 C |
 DTBL_SINGL.PSG_KEYON :         94A C |  DTBL_SINGL.RCYL_COM :          85D C |
*DTBL_SINGL.READFREQ_PCM :      C0B C | *DTBL_SINGL.READFREQ_PWM :      C10 C |
 DTBL_SINGL.RESET_EFFC :        8AC C |  DTBL_SINGL.RES_PAN :           CBF C |
 DTBL_SINGL.SAME_PATCH :        DD5 C |  DTBL_SINGL.SETEFU_D :          C64 C |
 DTBL_SINGL.SETEF_D :           C74 C |  DTBL_SINGL.SETEF_MCD :         C79 C |
 DTBL_SINGL.SET_WAVFREQ :       C13 C |  DTBL_SINGL.SILN_DAC :          861 C |
 DTBL_SINGL.SILN_FM :           864 C |  DTBL_SINGL.SILN_PCM :          843 C |
 DTBL_SINGL.SILN_PSG :          83D C |  DTBL_SINGL.SILN_PSG_N :        839 C |
 DTBL_SINGL.SILN_PWM :          854 C |  DTBL_SINGL.THIS_REGS :         A46 C |
 DTBL_SINGL.TL_DOWN :           A77 C |  DTBL_SINGL.VMUCH :             95F C |
 DTBL_SINGL.VOLU :              D14 C |  DTBL_SINGL.WRITE_NTL :         B90 C |
 DTBL_SINGL.WRITE_TL :          B7E C |  DTBL_SINGL.WRT_EF :            C97 C |
 DTBL_SINGL.WR_SPC :            A28 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EFFV :                          34 - |  EMU :                            1 - |
 EXTINT_DEFAULT :              161E C |  EXT_3 :                          C - |
*EXT_4 :                          E - |  FALSE :                          0 - |
*FEN :                            2 - | *FILLDATA :                       8 - |
*FILLLENGTH :                     4 - | *FILLSTART :                      6 - |
 FLG :                           28 - | *FM :                            80 - |
 FMCACH_1 :                    155B C |  FMCACH_2 :                    1583 C |
 FMCACH_3 :                    15AB C |  FMCACH_4 :                    15D3 C |
 FMCACH_5 :                    15FB C |  FMCACH_6 :                    1623 C |
 FMCACH_LIST :                 179C C |  FMFREQ_LIST :                 130D C |
*FMINS_BASS_BIG_110 :         19F0B C | *FMINS_BASS_BIG_114 :         19F2B C |
*FMINS_BASS_BIG_122 :         19F4B C | *FMINS_BASS_BIG_81 :          19EEB C |
*FMINS_BASS_CAVE_47 :         19F6B C | *FMINS_BASS_CLUB :            1A82B C |
 FMINS_BASS_CLUB_108 :        19F8B C | *FMINS_BASS_DUCK :            1A7CB C |
*FMINS_BASS_FOOT_75 :         19FAB C | *FMINS_BASS_GEM_26 :          19FCB C |
 FMINS_BASS_GROOVE_1 :        1A08B C | *FMINS_BASS_GROOVE_119 :      19FEB C |
*FMINS_BASS_GROOVE_2 :        1A84B C | *FMINS_BASS_HEAVY_107 :       1A00B C |
*FMINS_BASS_HEAVY_118 :       1A02B C | *FMINS_BASS_ITALO :           1A8EB C |
*FMINS_BASS_LOUD_117 :        1A04B C | *FMINS_BASS_LOW81 :           1A36B C |
*FMINS_BASS_LOW_103 :         1A0CB C | *FMINS_BASS_LOW_106 :         1A0EB C |
*FMINS_BASS_LOW_126 :         1A10B C | *FMINS_BASS_LOW_46 :          1A06B C |
*FMINS_BASS_LOW_81 :          1A0AB C | *FMINS_BASS_MID_111 :         1A16B C |
*FMINS_BASS_MID_19 :          1A12B C | *FMINS_BASS_MID_80 :          1A14B C |
*FMINS_BASS_POWER_123 :       1A18B C | *FMINS_BASS_SILENT_53 :       1A1AB C |
*FMINS_BASS_SLAP_10 :         1A1CB C | *FMINS_BASS_SLAP_105 :        1A1EB C |
*FMINS_BASS_SYNTH_60 :        1A20B C | *FMINS_BASS_SYNTH_61 :        1A22B C |
*FMINS_BASS_SYNTH_72 :        1A24B C | *FMINS_BASS_SYNTH_73 :        1A26B C |
*FMINS_BASS_VLOW_74 :         1A28B C | *FMINS_BELL_62 :              1A42B C |
*FMINS_BELL_93 :              1A44B C |  FMINS_BELL_LOW13 :           1A46B C |
*FMINS_BELL_MID36 :           1A40B C | *FMINS_BRASS_7 :              1A88B C |
*FMINS_CLOSEDHAT :            1A7EB C | *FMINS_DRUMS_KICK1 :          1A74B C |
*FMINS_DRUM_KICK :            1A48B C | *FMINS_FLAUTE_1 :             1A2CB C |
*FMINS_FLAUTE_2 :             1A2EB C |  FMINS_GUITAR_BBALL :         1A90B C |
 FMINS_HATS_1 :               1A3EB C | *FMINS_HBEAT_TOM :            1A78B C |
 FMINS_ORGAN_DRAWBAR :        1A2AB C | *FMINS_PIANO_AQUA :           1A76B C |
*FMINS_PSYNTH_PLUS :          1A86B C | *FMINS_SFX_ALIEN1 :           1A693 C |
*FMINS_SFX_ALIEN2 :           1A6B3 C |  FMINS_SFX_EXPLODE :          1A653 C |
*FMINS_SFX_PUNCH :            1A633 C | *FMINS_SFX_PUNCH_2 :          1A8AB C |
*FMINS_SFX_SLASH :            1A673 C |  FMINS_SFX_SMASH :            1A8CB C |
*FMINS_SP_CLOSEDHAT :         1A6FB C | *FMINS_SP_COWBELL :           1A723 C |
 FMINS_SP_OPENHAT :           1A6D3 C | *FMINS_TICK :                 1A4AB C |
 FMINS_TRUMPET_1 :            1A7AB C |  FMINS_TRUMPET_BUS :          1A3CB C |
 FMINS_TRUMPET_CARNIVAL :     1A80B C | *FMINS_TRUMPET_GENIE :        1A3AB C |
*FMINS_TRUMPET_LOW :          1A38B C |  FMINS_VIBRAPHONE_1 :         1A30B C |
*FMINS_VIBRAPHONE_2 :         1A32B C | *FMINS_XYLOPHONE :            1A34B C |
 FMLIST_RSAVE :                164B C |  FMSPECIAL :                     30 C |
*FMSPINS_CLACK_1 :            1A4CB C | *FMSPINS_COWBELL_H :          1A4F3 C |
*FMSPINS_COWBELL_L :          1A51B C | *FMSPINS_HATS_HQ :            1A543 C |
*FMSPINS_SFX_ALIEN :          1A56B C | *FMSPINS_SFX_KNCKBUZZ :       1A593 C |
*FMSPINS_SFX_KNOCK_H :        1A5BB C | *FMSPINS_SFX_KNOCK_L :        1A5E3 C |
*FMSPINS_SFX_LASER :          1A60B C |  FM_AUTOREG :                  11C5 C |
 FM_SEND_1 :                   11C9 C |  FM_SEND_2 :                   11D4 C |
*FRAMECTL :                       B - | *FS :                             1 - |
*FULLPMMU :                       1 - |  GEMADMAPAUSE :                 344 C |
 GEMADMARESUME :                346 C | *GEMAFADESEQ :                  3C0 C |
 GEMAINIT :                     278 C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :                  360 C | *GEMAPLAYSEQAUTO :              376 C |
 GEMARESET :                    278 C |  GEMASENDRAM :                  290 C |
 GEMASENDRAM.COPY_BYTES :       2CE C |  GEMASENDRAM.NO_SIZE :          2DC C |
 GEMASENDRAM.NO_TASK :          2E2 C |  GEMASETBEATS :                 3F8 C |
 GEMASETMASTERLIST :            352 C | *GEMASETSEQVOL :                3DC C |
 GEMASTOPALL :                  3A6 C |  GEMASTOPSEQ :                  390 C |
*GEMATEST :                     348 C |  GEMA_INIT :                    F16 C |
 GEMA_INIT.END_SETUP :          F57 C |  GEMA_INIT.SETUP_LIST :         F2C C |
 GEMA_INIT.ST_COPY :            F4B C |  GEMA_LASTBANK :               1303 C |
 GEMA_LASTBANK.WRITE :         1308 C |  GET_TICK :                     F88 C |
 GET_TICK.CTNOTICK :            FA5 C |  GLBL_LASTORG :    FFFFFFFFFFFFB800 - |
 GLBL_LASTPC :                 3C7A - | *GLBL_MDATA_RP :              30B04 - |
 GLBL_MDATA_ST :               4534 - |  GTRK_SFXALL :                 4574 C |
 GTRK_SFXALL.BLK :             4582 C |  GTRK_SFXALL.INS :             462F C |
 GTRK_SFXALL.PAT :             4586 C |  GTRK_TEST0 :                  464F C |
 GTRK_TEST0.BLK :              465D C |  GTRK_TEST0.INS :              5135 C |
 GTRK_TEST0.PAT :              4662 C |  GTRK_TEST1 :                  5175 C |
 GTRK_TEST1.BLK :              5183 C |  GTRK_TEST1.INS :              6119 C |
 GTRK_TEST1.PAT :              51A8 C |  GTRK_TEST2 :                  6181 C |
 GTRK_TEST2.BLK :              618F C |  GTRK_TEST2.INS :             1221D C |
 GTRK_TEST2.PAT :              61B2 C |  GTRK_TEST3 :                 122A5 C |
 GTRK_TEST3.BLK :             122B3 C |  GTRK_TEST3.INS :             19E63 C |
 GTRK_TEST3.PAT :             122C4 C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *HBLK :                          40 - |
 HEADEROUT :                   17B0 C |  HEADEROUT_E :                 17BE C |
*HINTCLR :                       18 - | *HINTENBL :                      10 - |
 HINT_DEFAULT :                161C C | *HIRQ_ON :                        4 - |
 HTAG_CDSAVE :        "NIKONACD___" - | *HTAG_CDVER :                   102 - |
 HTAG_DATEINFO : "(C)GF64 2024.???" - | *HTAG_DISCID :        "NIKONACD   " - |
*HTAG_DISCID_M :      "NIKONACD32X" - | *HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
*HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
 HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
*HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
 HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
*HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
*HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
 HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 17C6 C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
*LCHWIDTH :                      34 - |  LEV :                            4 - |
*LISTON :                         3 - | *MACEXP :                         7 - |
 MAINGEMASEQLIST :             4534 C |  MARS :                           0 - |
*MARSBLOCK :                   1F8A C |  MARSCD :                         0 - |
 MARSUPD :                     17A2 C | *MARS_RAMCODE :                3B94 C |
*MARS_RAMCODE_E :              3B94 C |  MAX_BUFFNTRY :                   8 - |
 MAX_GLOBALS :                  800 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDMAPSPR :                  18 - |  MAX_MDOBJ :                     28 - |
 MAX_PALFDREQ :                   8 - |  MAX_RCACH :                     20 - |
*MAX_SC0_OPTIONS :                4 - |  MAX_SCRNBUFF :                1000 - |
 MAX_SLOTS :                      3 - | *MAX_SNDPICK :                    7 - |
*MAX_STACKSIZE :                200 - |  MAX_SYSCODE :                 2C00 - |
 MAX_TBLSIZE :                   12 - |  MAX_TRFRPZ :                     9 - |
 MAX_TRKCHN :                    20 - |  MAX_TRKINDX :                   1A - |
 MAX_USERCODE :                8400 - |  MAX_ZCMND :                     20 - |
 MCD :                            0 - | *MCDBLOCK :                    1F89 C |
 MCDUPD :                      17A3 C | *MCD_COMM_M :                     E - |
*MCD_COMM_S :                     F - | *MCD_DCOMM_M :                   10 - |
*MCD_DCOMM_S :                   20 - | *MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MEMORY :                     3 - |
*MDSTMP_BUFFINCR :               1A - | *MDSTMP_CELLSTORAGE :            12 - |
*MDSTMP_CURROUTFLIP :             E - | *MDSTMP_DOTINCR :                16 - |
*MDSTMP_FDROP :                  10 - | *MDSTMP_FLAGS :                   0 - |
*MDSTMP_LEN :                    1E - | *MDSTMP_STMPOUTB :                C - |
*MDSTMP_VRAMINCR :                A - | *MDSTMP_VRAMLEN :                 8 - |
*MDSTMP_VRAMMAIN :                2 - | *MDSTMP_VRAMSEC :                 4 - |
*MDSTMP_VRAMSIZE :                6 - | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :                1B6C C |  MD_READMODES.PICK_MODE :      1B88 C |
 MD_SCREEN00 :                 3B94 C | *MD_SCREEN00_E :               3C7A C |
 MD_SCREEN07 :                 3C7A C | *MD_SCREEN07_E :               4534 C |
*MD_SYSCODE_E :                1C08 C |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
*MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - |  MVOL :                          30 - |
*NESTMAX :                      100 - |  NIKONA_BUFFLIST :             17CE C |
*NIKONA_BUFFLIST_E :           17E6 C |  OBJECT_ANIMATE :              19E2 C |
 OBJECT_ANIMATE.EXIT_ANIM :    1A70 C |  OBJECT_ANIMATE.GOTOFRAME :    1A62 C |
 OBJECT_ANIMATE.KEEPSPD :      1A28 C |  OBJECT_ANIMATE.LASTFRAME :    1A6C C |
 OBJECT_ANIMATE.NOANIM :       1A54 C |  OBJECT_ANIMATE.RETURN :       1A52 C |
 OBJECT_ANIMATE.SAMETHING :    1A00 C |  OBJECT_INIT :                 18FE C |
 OBJECT_INIT.CLR :             1906 C |  OBJECT_MAKE :                 1940 C |
 OBJECT_MAKE.SEARCH :          194E C | *OBJECT_MDMARS_GETSPRINFO :    1B6A C |
 OBJECT_RESETANIM :            19AA C | *OBJECT_RESETVARS :            1990 C |
 OBJECT_RESETVARS.CLR_RAM :    199E C |  OBJECT_RUN :                  190E C |
 OBJECT_RUN.NEXT_ONE :         1916 C |  OBJECT_RUN.NO_CODE :          1922 C |
*OBJECT_SET :                  192C C | *OBJECT_SPEED :                19B2 C |
*OBJECT_TOUCH :                1A76 C |  OBJECT_TOUCH.CHECK_THIS :     1AAC C |
 OBJECT_TOUCH.EXIT_THIS :      1AA6 C |  OBJECT_TOUCH.NEXT :           1A8E C |
 OBJECT_TOUCH.NOT_YTOP :       1B68 C |  OBJECT_TOUCH.SET_OK :         1B66 C |
 OBJECT_TOUCH.SKIP :           1A9C C |  OBJMAP_DODO :                34FB4 C |
 OBJMAP_FIFI :                34FFC C |  OBJMAP_MIMI :                34FD8 C |
 OBJPAL_DODO :                34F94 C |  OBJSET_ERROR :                1962 C |
 OBJSET_GO :                   196C C |  OBJSET_GO.CLR :               1980 C |
 OBJSET_GO.EXIT_THIS :         1986 C |  OBJSET_GO.FROM_DEL :          197A C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
*OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ON_HOLD :                        2 - |
 ON_PRESS :                       4 - |  ON_RELEASE :                     6 - |
*PACKING :                        0 - | *PADDING :                        0 - |
*PAD_ID :                         0 - | *PAD_VER :                        1 - |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMODE :                     1F88 C |  PCMCOM :                      14A7 C |
*PEN :                           20 - |  PICO :                           1 - |
 PICO_ENTRY :                   204 C |  PICO_ENTRY.LOOP_RAM :          232 C |
 PICO_ENTRY.PALCLEAR :          254 C |  PICO_ENTRY.WAIT_DMA :          23E C |
 PICO_ERRADDR :                 200 C |  PICO_ERRBUS :                  200 C |
 PICO_ERRCHK :                  200 C |  PICO_ERRILL :                  200 C |
 PICO_ERROR :                   200 C |  PICO_ERROREX :                 200 C |
 PICO_ERRPRIVL :                200 C |  PICO_ERRTRAPV :                200 C |
 PICO_ERRZDIV :                 200 C |  PICO_LINE1010 :                200 C |
 PICO_LINE1111 :                200 C |  PICO_PCMINT :                  202 C |
 PICO_TRACE :                   200 C |  PICO_UNKINT :                  202 C |
*PICO_USERINT :                 202 C |  PSGCOM :                      151F C |
 PSGFREQ_LIST :                1325 C |  PSGHATMODE :                    2F C |
*PSG_CTRL :                  C00011 - |  PTMR :                          38 - |
 PWMCOM :                      14E7 C | *PWMCTL :                        31 - |
*PWMINS_DRUMSETA :          2046022 C | *PWMINS_PIANO :             2035038 C |
*PWMINS_PKICK :             2039754 C | *PWMINS_PTOM :              2039ECE C |
*PWMINS_SAURON_01 :         204D6CC C | *PWMINS_SAURON_02 :         204E5D6 C |
*PWMINS_SAURON_03 :         204F24A C | *PWMINS_SAURON_04 :         204FF18 C |
*PWMINS_SAURON_05 :         20522FC C | *PWMINS_SAURON_06 :         20570B4 C |
*PWMINS_SAURON_07 :         2059642 C | *PWMINS_SAURON_08 :         205C9DA C |
*PWMINS_SAURON_09 :         205E6EE C | *PWMINS_SAURON_10 :         20605B8 C |
*PWMINS_SAURON_11 :         2063E00 C | *PWMINS_SAURON_12 :         2067B7A C |
*PWMINS_SXBEATS :           203AA88 C | *PWMINS_SXBEATS2 :          203E702 C |
*PWMINTCLR :                     1C - | *PWMIRQ_ON :                      1 - |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFE98C C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFD7DC C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFE986 C |  RAM_HORSCROLL :   FFFFFFFFFFFFCC40 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFD7E0 C |  RAM_INPUTDATA :   FFFFFFFFFFFFD8F8 C |
*RAM_MCDEXIT :     FFFFFFFFFFFFE998 C |  RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDSYSTEM :    FFFFFFFFFFFFD7F8 C |  RAM_MDVIDCLR_E :  FFFFFFFFFFFFD658 C |
 RAM_MDVIDEO :     FFFFFFFFFFFFC800 C |  RAM_MEGACD :              FFFFFD00 - |
 RAM_OBJECTS :     FFFFFFFFFFFFD938 C |  RAM_PALETTE :     FFFFFFFFFFFFD550 C |
 RAM_PALETTEFADE : FFFFFFFFFFFFD5D0 C |  RAM_PALFADELIST : FFFFFFFFFFFFC800 C |
 RAM_SAVEDATA :    FFFFFFFFFFFFD7F8 C | *RAM_SAVEENABLE :  FFFFFFFFFFFFE992 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFD7FC C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFD7F8 C |  RAM_SCREENMODE :  FFFFFFFFFFFFE994 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFE996 C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFD050 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFD7E2 C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFC840 C |  RAM_SPROFFSETX :  FFFFFFFFFFFFD654 C |
 RAM_SPROFFSETY :  FFFFFFFFFFFFD656 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFC9C0 C |
 RAM_STACK :               FFFFFD00 - |  RAM_SYSRANDOM :   FFFFFFFFFFFFE97C C |
*RAM_SYSRANDVAL :  FFFFFFFFFFFFE978 C | *RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |
*RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFE980 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFD650 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFD65C C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFD652 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFD7EE C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFD7F0 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFD7F2 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFD7F4 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFD7F6 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFD7E6 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFD7E4 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFD7EC C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFD7EA C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFD7E8 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFD000 C |  RAM_ZCDFLAGD :            FFFFFF00 - |
*RCHWIDTH :                      36 - |  READROM :                      FA9 C |
 READROM.DOUBLE :               FCC C |  READROM.FROM_RAM :             FF0 C |
 READROM.TRANSFER :            1010 C |  READROM.WAIT :                1007 C |
 READROM.X68KLAST :            1049 C |  READROM.X68KLOOP :            1035 C |
 READROM.X68KLPWT :            1057 C |  READROM.X68KNOCARRY :          FEA C |
*RELAXED :                        0 - | *RES :                            2 - |
 ROM_END :                    69372 C |  RRT :                           14 - |
 SAMPLEHEAD :                  17C0 C |  SBEATACC :                      31 C |
 SBEATPTCK :                     33 C |  SEQ_BANKBLK :                   16 - |
 SEQ_BANKHEADS :                 15 - |  SEQ_BLOCKS :                     4 - |
 SEQ_CACH :                       8 - |  SEQ_CACHHALF :                  10 - |
 SEQ_CHNINDX :                   25 - |  SEQ_CURRBLK :                   13 - |
 SEQ_MAXCHNL :                   17 - |  SEQ_NUM :                        1 - |
 SEQ_PATT :                       6 - |  SEQ_PRIORITY :                  14 - |
 SEQ_READ :                       A - |  SEQ_ROMBLKS :                   22 - |
 SEQ_ROMINST :                   1F - |  SEQ_ROMPATT :                   1C - |
 SEQ_ROMPATTREAD :               19 - |  SEQ_ROWPAUSE :                  11 - |
 SEQ_ROWS :                       C - |  SEQ_SETBLK :                     2 - |
 SEQ_STATUS :                     0 - |  SEQ_TICKSET :                    3 - |
 SEQ_TICKTMR :                   12 - |  SEQ_VOLFDTARGET :               18 - |
 SEQ_VOLMASTER :                  E - |  SET_CHIPS :                    5FC C |
*SET_DEBUGMODE :                  0 - | *SET_DEFAUTODMA :               480 - |
 SET_INITMODE :                   0 - |  SET_NULLVRAM :                 7FE - |
 SET_RAMLIMIT :              FFFC00 - | *SET_SNDVIEWY :                  10 - |
 SET_SRAMSIZE :                 100 - | *SET_WRAMSIZE :               3C000 - |
*SHIFT :                          2 - |  SIZEOF_INPUT :                  10 - |
 SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFE99A C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFE99A C |  SIZEOF_MDVID :    FFFFFFFFFFFFD7F8 C |
*SIZEOF_SAVEINFO : FFFFFFFFFFFFD800 C |  SLV :                           10 - |
 SNDLOCKZ80 :                   28C C |  SNDREQ_ENTER :                 2E4 C |
*SNDREQ_ENTER.WAIT :            302 C |  SNDREQ_EXIT :                  308 C |
*SNDREQ_SADDR :                 32E C |  SNDREQ_SBYTE :                 336 C |
 SNDREQ_SCMD :                  31C C |  SNDREQ_SLONG :                 32A C |
 SNDREQ_SWORD :                 332 C |  SNDUNLOCKZ80 :                 28E C |
 SOUND_INIT :                  1572 C |  SOUND_UPDATE :                156E C |
 STANDBY :                        3 - |  SYSBCD_SPOUT :                1822 C |
*SYSMARS_FRAMEBUFFER :       840000 - | *SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
*SYSMCD_WRAM :               200000 - |  SYSMDMCD_SETCDDA :            18DE C |
 SYSRND_MKVALUE :              163A C |  SYSRND_MKVALUE.HAS_SEED :     164C C |
*SYSTEM_BCD_ADDB :             17FA C |  SYSTEM_BCD_ADDL :             1808 C |
*SYSTEM_BCD_ADDW :             1802 C | *SYSTEM_BCD_SUBB :             17D2 C |
 SYSTEM_BCD_SUBL :             17E0 C | *SYSTEM_BCD_SUBW :             17DA C |
 SYSTEM_DEFAULT :              15FA C |  SYSTEM_DEFAULT.CLR_LOOP :     1608 C |
 SYSTEM_DICEROLL :             1684 C | *SYSTEM_DICEROLL_SEED :        1664 C |
 SYSTEM_DMAENTER_RAM :         1566 C |  SYSTEM_DMAENTER_ROM :         152C C |
 SYSTEM_DMAEXIT_RAM :          156A C |  SYSTEM_DMAEXIT_ROM :          1530 C |
 SYSTEM_INIT :                 14B2 C |  SYSTEM_INIT.CLRINPUT :        14E6 C |
 SYSTEM_INPUT :                1576 C |  SYSTEM_INPUT.BAD_Y :          15D2 C |
 SYSTEM_INPUT.NO_BIT :         15E4 C |  SYSTEM_INPUT.PAGE_IT :        15DE C |
 SYSTEM_INPUT.X_VALID :        15BA C | *SYSTEM_MDMARS_SENDDATA :      18F8 C |
*SYSTEM_MDMCD_CDDAFADE :       18E6 C | *SYSTEM_MDMCD_CDDAPLAY :       18CC C |
*SYSTEM_MDMCD_CDDAPLAYL :      18D6 C | *SYSTEM_MDMCD_CDDASTOP :       18E4 C |
*SYSTEM_MDMCD_CHECKHOME :      189A C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                                    18C0 C |
*SYSTEM_MDMCD_CHECKWRAM :      1874 C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                                       1884 C |
 SYSTEM_MDMCD_EXITSHELL :      18CA C |  SYSTEM_MDMCD_GIVEWRAM :       188A C |
*SYSTEM_MDMCD_INTERRUPT :      1854 C | *SYSTEM_MDMCD_RDFILE_RAM :     1896 C |
*SYSTEM_MDMCD_RDFILE_WRAM :    1898 C | *SYSTEM_MDMCD_SUBENTER :       1864 C |
*SYSTEM_MDMCD_SUBTASK :        1866 C | *SYSTEM_MDMCD_SUBWAIT :        1862 C |
 SYSTEM_MDMCD_WAITWRAM :       1868 C |  SYSTEM_RANDOM :               162A C |
 SYSTEM_RANDOM_SEED :          1620 C |  SYSTEM_RENDER :               14F2 C |
 SYSTEM_RENDER.FORGOT_DISP :   1516 C | *SYSTEM_RENDER.FROM_LATE :     1510 C |
 SYSTEM_RENDER.WAIT_EARLY :    1500 C |  SYSTEM_RENDER.WAIT_VBLANK :   1518 C |
 SYSTEM_SETDATABANK :          18FC C |  SYSTEM_SETINTJUMPS :          183A C |
 SYSTEM_SETINTJUMPS.NO_EXINT : 1852 C |  SYSTEM_SETINTJUMPS.NO_HINT :  184A C |
 SYSTEM_SETINTJUMPS.NO_VINT :  1842 C |  SYSTEM_SINEWAVE :             16A8 C |
 SYSTEM_SINEWAVE_COS :         169E C |  SYSTEM_SRAMINIT :             15EC C |
*SYSTEM_SRAMINIT.ALREADY_SET : 15F0 C | *SYSTEM_SRAMINIT.CANT_USE :    15EE C |
 SYSTEM_SRAMLOAD :             15F6 C |  SYSTEM_SRAMSAVE :             15F2 C |
*SYS_CTRL_1 :                A10009 - | *SYS_CTRL_2 :                A1000B - |
*SYS_CTRL_3 :                A1000D - | *SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
*SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :              1532 C |
 SYS_MARSSLVCMD.WAIT_EXIT :    1558 C |  SYS_SINEWAVE :                16AC C |
 SYS_SINEWAVE.LOC_7EFA :       16BA C |  SYS_SINEWAVE.LOC_7F0C :       16CC C |
 SYS_SINEWAVE.SINE_DATA :      16D2 C | *SYS_SRAM :                  200000 - |
*SYS_TMSS :                  A14000 - | *TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 63D C |  TBLBUFF_READ.DONT_RES :        6FC C |
 TBLBUFF_READ.DO_CHIP :         696 C |  TBLBUFF_READ.FOUND_TNEW :      77E C |
 TBLBUFF_READ.GOT_LINK :        737 C |  TBLBUFF_READ.GRAB_LINK :       6E0 C |
 TBLBUFF_READ.HAS_INDX :        672 C |  TBLBUFF_READ.INVLDL :          724 C |
*TBLBUFF_READ.L_HIPRIO :        7BB C |  TBLBUFF_READ.NEW_CHIP :        75D C |
 TBLBUFF_READ.NEW_LINK :        7B8 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |
 TBLBUFF_READ.NEXT_INDX :       66B C |  TBLBUFF_READ.NEXT_PRIO :       783 C |
 TBLBUFF_READ.NOT_SAMEL :       759 C |  TBLBUFF_READ.NO_INDX :         68E C |
 TBLBUFF_READ.OVRW_LINK :       7B0 C |  TBLBUFF_READ.PASS_2 :          782 C |
 TBLBUFF_READ.PICK_TBL :        7D0 C |  TBLBUFF_READ.RNOT_PSG :        75B C |
 TBLBUFF_READ.SAME_LINK :       6FF C |  TBLBUFF_READ.SET_ASFULL :      7AD C |
 TBLBUFF_READ.SINGL_FREE :      798 C |  TBLBUFF_READ.SINGL_LINK :      729 C |
 TBLBUFF_READ.SRCH_FREE :       76E C |  TBLBUFF_READ.SRCH_LINK :       70B C |
 TBLBUFF_READ.SRCH_LLOOP :      715 C |  TBLBUFF_READ.TRACK_CONT :      655 C |
 TBLBUFF_READ.VALID :           669 C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                   F06 C |
 TBLZ_CLEAR.CLR_ALL :           F10 C |  TH :                      20000000 - |
 TICKCNT :                     1CF8 C |  TICKFLAG :                    1CF7 C |
 TICKSPSET :                   1CF6 C | *TIME :               "05:52:25 PM" - |
*TIMERCTL :                      30 - |  TRACK_OUT :                    5AE C |
 TRACK_OUT.INDX_DEL :           5C3 C |  TRACK_OUT.NOTHIN :             5F0 C |
 TRACK_OUT.VALID :              5C2 C |  TRKBLKS_0 :                   16C7 C |
 TRKBLKS_1 :                   16CF C |  TRKBLKS_2 :                   16D7 C |
 TRKBUFF_0 :                   16DF C |  TRKBUFF_1 :                   171E C |
 TRKBUFF_2 :                   175D C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   1667 C |
 TRKHDRS_1 :                   1687 C |  TRKHDRS_2 :                   16A7 C |
 TRKINFOCACH :                 1657 C |  TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_SEQ :                      220 C |
 UPD_SEQ.CHNL_FREE :            33A C |  UPD_SEQ.CONT_CHNL :            344 C |
 UPD_SEQ.DEC_ROW :              2DB C |  UPD_SEQ.DEC_ROW_E :            2DE C |
 UPD_SEQ.EFFECT_FILL :          506 C |  UPD_SEQ.EFF_A :                3BF C |
 UPD_SEQ.EFF_B :                3D0 C |  UPD_SEQ.EFF_C :                3EE C |
 UPD_SEQ.EXIT :                 2CF C |  UPD_SEQ.FADE_OUT :             25C C |
 UPD_SEQ.FIRST_BLK :            445 C |  UPD_SEQ.FIRST_FILL :           50D C |
 UPD_SEQ.FIRST_HEAD :           48B C |  UPD_SEQ.GRAB_RHEAD :           59B C |
 UPD_SEQ.HAS_NOTE :             2E6 C |  UPD_SEQ.INC_CPATT :            3F1 C |
 UPD_SEQ.KEEP_BLK :             461 C |  UPD_SEQ.KEEP_IT :              4B1 C |
 UPD_SEQ.KEEP_VOL :             272 C |  UPD_SEQ.NEXT_CHNL :            31C C |
 UPD_SEQ.NEXT_NOTE :            2BF C |  UPD_SEQ.NO_EFF :               38B C |
 UPD_SEQ.NO_GLBL :              54D C |  UPD_SEQ.NO_INS :               36C C |
 UPD_SEQ.NO_NOTE :              361 C |  UPD_SEQ.NO_VOL :               378 C |
 UPD_SEQ.OLD_TYPE :             355 C |  UPD_SEQ.RAN_OUT :              3FF C |
 UPD_SEQ.READ_SEQ :             236 C |  UPD_SEQ.ROW_ACTIVE :           2B8 C |
 UPD_SEQ.SET_TRACK :            429 C |  UPD_SEQ.SFXMD :                27C C |
 UPD_SEQ.SRCH_NEW :             317 C |  UPD_SEQ.SRCH_REROLL :          313 C |
 UPD_SEQ.TOO_MUCH :             268 C |  UPD_SEQ.TRACK_END :            500 C |
*VBLK :                          80 - | *VDPATTR_HI :                  8000 - |
*VDPATTR_PL1 :                 2000 - | *VDPATTR_PL2 :                 4000 - |
*VDPATTR_PL3 :                 6000 - | *VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |  VIDEO_BUILDSPRITES :           5D8 C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                                        798 C |
 VIDEO_BUILDSPRITES.CHK_SPR_R : 776 C |  VIDEO_BUILDSPRITES.DONT_ADD :  74A C |
 VIDEO_BUILDSPRITES.EX_VRAM :   68E C |  VIDEO_BUILDSPRITES.EX_VRAMS :  6B2 C |
 VIDEO_BUILDSPRITES.EX_YEXT :   71E C |  VIDEO_BUILDSPRITES.FIRST_SPR : 5F8 C |
*VIDEO_BUILDSPRITES.FREEZE :    76E C |  VIDEO_BUILDSPRITES.MK_PZ :     664 C |
 VIDEO_BUILDSPRITES.NEXT :      640 C |  VIDEO_BUILDSPRITES.NEXT_PZ :   600 C |
 VIDEO_BUILDSPRITES.NO_MAP :    75E C |  VIDEO_BUILDSPRITES.NO_PZ :     75A C |
*VIDEO_BUILDSPRITES.NO_SLOT :   764 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                                        7AC C |
 VIDEO_BUILDSPRITES.NO_SLOT_R : 78A C |  VIDEO_BUILDSPRITES.NO_SLOT_S : 630 C |
 VIDEO_BUILDSPRITES.STOP_ALL :  768 C |  VIDEO_BUILDSPRITES.VRAM_H :    6E2 C |
 VIDEO_BUILDSPRITES.VRAM_V :    6CA C |  VIDEO_CLEAR :                  7E6 C |
 VIDEO_CLEAR.CLR_ME :           7F0 C | *VIDEO_CLEARSCREEN :            806 C |
 VIDEO_CLEARSCREEN.NOT_SMALL :  82C C | *VIDEO_COPY :                   B52 C |
 VIDEO_COPY.DMAW :              B5C C |  VIDEO_COPY.DMA_W :             BB8 C |
 VIDEO_DEFAULT :                49A C |  VIDEO_DISPLAYOFF :             840 C |
 VIDEO_DISPLAYON :              834 C |  VIDEO_DMAOFF :                 858 C |
 VIDEO_DMAON :                  84C C |  VIDEO_FADEIN_FULL :            F88 C |
 VIDEO_FADEOUT_FULL :           F9A C |  VIDEO_FADEPAL :                FEC C |
*VIDEO_FADEPAL_LIST :          1042 C |  VIDEO_FADEPAL_LIST.INVALID :  105C C |
 VIDEO_FADEPAL_LIST.NEXT_ONE : 1050 C |  VIDEO_FILL :                   ADA C |
 VIDEO_INIT :                   40E C |  VIDEO_INIT.CLR_D :             444 C |
 VIDEO_INIT.CLR_PREQ :          45C C |  VIDEO_INIT.CLR_RAM :           418 C |
 VIDEO_INIT.COPY_DMA :          42A C |  VIDEO_INIT.DEF_REGSET :        492 C |
 VIDEO_INIT.DMA_ENTRY :         482 C | *VIDEO_INTENABLE :              870 C |
 VIDEO_LOADART :                9C8 C |  VIDEO_LOADART.BAD_SIZE :       A62 C |
 VIDEO_LOADART.LAST_SET :       A18 C |  VIDEO_LOADART.MK_SET :         A20 C |
 VIDEO_LOADART.NORMAL :         A12 C |  VIDEO_LOADART.RAM_WRITE :      A64 C |
 VIDEO_LOADART.SHARED_SETUP :   A78 C |  VIDEO_LOADART_LIST :           ABA C |
 VIDEO_LOADART_LIST.INVALID :   AD4 C |  VIDEO_LOADART_LIST.NEXT_ONE :  AC6 C |
*VIDEO_LOADMAP :                C94 C |  VIDEO_LOADMAP.BAD_SIZE :       D04 C |
 VIDEO_LOADMAP.MK_CELL :        CF4 C |  VIDEO_LOADMAP.NON_BLANK :      CF2 C |
 VIDEO_LOADMAP.X_LOOP :         CE2 C |  VIDEO_LOADMAP.Y_LOOP :         CCE C |
*VIDEO_LOADMAPV :               D0A C |  VIDEO_LOADMAPV.BAD_SIZE :      D8C C |
 VIDEO_LOADMAPV.BAD_SIZE_D :    DF4 C |  VIDEO_LOADMAPV.DBLE_MODE :     D92 C |
 VIDEO_LOADMAPV.MK_CELL :       D76 C |  VIDEO_LOADMAPV.MK_CELL_D :     DDE C |
 VIDEO_LOADMAPV.NON_BLANK :     D74 C |  VIDEO_LOADMAPV.NON_BLANK_D :   DD6 C |
 VIDEO_LOADMAPV.X_LOOP :        D4E C |  VIDEO_LOADMAPV.X_LOOP_D :      DAC C |
 VIDEO_LOADMAPV.Y_LOOP :        D54 C |  VIDEO_LOADMAPV.Y_LOOP_D :      DB2 C |
 VIDEO_LOADPAL :                FF6 C | *VIDEO_LOADPAL_LIST :          1022 C |
 VIDEO_LOADPAL_LIST.INVALID :  103C C |  VIDEO_LOADPAL_LIST.NEXT_ONE : 1030 C |
 VIDEO_MAKEDMAENTRY :           BCE C |  VIDEO_MAKEDMAENTRY.LAST_SET :  C1E C |
 VIDEO_MAKEDMAENTRY.MK_SET :    C26 C |  VIDEO_MAKEDMAENTRY.NORMAL :    C18 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :   C92 C |  VIDEO_MAKEFADE :               FAE C |
*VIDEO_MAKESPR :               1358 C |  VIDEO_MAKESPR.CHK_FREE :      1364 C |
 VIDEO_MAKESPR.MK_SPR :        1376 C |  VIDEO_MAKESPRMAP :            1408 C |
 VIDEO_MAKESPRMAP.CHK_FREE :   1414 C |  VIDEO_MAKESPRMAP.MK_SPR :     1424 C |
*VIDEO_MAKESPRMAP_DMA :        13F0 C | *VIDEO_MDMARS_MAKEFADE :        FAC C |
 VIDEO_PRINT :                 1090 C |  VIDEO_PRINT.EXIT :            10FC C |
 VIDEO_PRINT.HEX_INCR :        1170 C |  VIDEO_PRINT.LOOP :            10C4 C |
 VIDEO_PRINT.MK_VALUE :        114C C |  VIDEO_PRINT.NEXT :            10F6 C |
 VIDEO_PRINT.Q_LOOP :          10DA C |  VIDEO_PRINT.SHOW_24 :         1140 C |
*VIDEO_PRINT.SHOW_BYTE :       1130 C |  VIDEO_PRINT.SHOW_LONG :       1148 C |
 VIDEO_PRINT.SHOW_NIBBL :      1160 C |  VIDEO_PRINT.SHOW_WORD :       1138 C |
 VIDEO_PRINT.SPECIAL :         1102 C | *VIDEO_PRINTDEFPAL :           107A C |
 VIDEO_PRINTDEFPAL_FADE :      1072 C |  VIDEO_PRINTINIT :             1068 C |
 VIDEO_PRINTINITW :            1062 C |  VIDEO_PRINTW :                1182 C |
 VIDEO_PRINTW.EXIT :           1256 C |  VIDEO_PRINTW.GET_PREVAL :     133A C |
 VIDEO_PRINTW.HEX_INCR :       1348 C |  VIDEO_PRINTW.LOOP :           11D6 C |
 VIDEO_PRINTW.MK_VALUE :       12AA C |  VIDEO_PRINTW.MK_VALUE_IN :    12A6 C |
 VIDEO_PRINTW.NEXT :           124E C |  VIDEO_PRINTW.NIBBL_CONT :     1332 C |
 VIDEO_PRINTW.NIBBL_NORM :     12FC C |  VIDEO_PRINTW.NO_DBLE_Y :      11AA C |
 VIDEO_PRINTW.SHOW_24 :        129A C | *VIDEO_PRINTW.SHOW_BYTE :      128A C |
 VIDEO_PRINTW.SHOW_LONG :      12A2 C |  VIDEO_PRINTW.SHOW_NIBBL :     12BE C |
 VIDEO_PRINTW.SHOW_WORD :      1292 C |  VIDEO_PRINTW.SPECIAL :        125C C |
 VIDEO_PRINTW.VER_CONT :       1248 C |  VIDEO_PRINTW.VER_NORMAL :     1216 C |
 VIDEO_RENDER :                 4E8 C |  VIDEO_RENDER.END :             5CC C |
 VIDEO_RENDER.EXIT :            5D6 C |  VIDEO_RENDER.NEXT :            5B2 C |
 VIDEO_RESOLUTION :             8C2 C |  VIDEO_RESOLUTION.DOUBLE :      904 C |
 VIDEO_RESOLUTION.EX_BIT :      8F6 C |  VIDEO_RUNFADE :                DF8 C |
 VIDEO_RUNFADE.ALL_BLACK :      EC4 C |  VIDEO_RUNFADE.BUSY_TIMER :     E3E C |
 VIDEO_RUNFADE.FADE_IN :        ED2 C |  VIDEO_RUNFADE.FADE_LIST :      E4A C |
 VIDEO_RUNFADE.FADE_OUT :       E62 C | *VIDEO_RUNFADE.FDIN_NEND :      F68 C |
*VIDEO_RUNFADE.FDOUT_NEND :     ED0 C |  VIDEO_RUNFADE.NEXT_COLOR :     E70 C |
 VIDEO_RUNFADE.NEXT_IN :        EDE C |  VIDEO_RUNFADE.NEXT_REQ :       DFC C |
 VIDEO_RUNFADE.NOTHING :        E5A C |  VIDEO_RUNFADE.NO_REQ :         E44 C |
 VIDEO_RUNFADE.PFADE_DEL :      E5A C |  VIDEO_RUNFADE.SAME_IN :        F52 C |
 VIDEO_SETMAPSIZE :             9A2 C | *VIDEO_SETSPR :                134E C |
 VIDEO_SETSPRMAP :             13E6 C | *VIDEO_SETSPRMAP_DMA :         13DC C |
 VIDEO_UPDMAPVRAM :             916 C |  VIDEO_UPDSPRHVRAM :            968 C |
 VIDEO_WAITFADE :               F6A C |  VIDEO_WAITFADE.LOOP :          F6A C |
 VIDEO_WAITFADE.NEXT_ONE :      F78 C |  VIDMDSPR_MKSPR :              1378 C |
 VIDMDSPR_MKSPR.DONT_ADD :     13A2 C |  VIDMDSPR_MKSPRMAP :           1426 C |
 VIDMD_CERROR :                13D2 C | *VIDMD_CFREEZE :               13DA C |
 VIDMD_PAL :                    FFE C |  VIDMD_PAL.BAD :               101C C |
 VIDMD_PAL.LOOP :              1016 C |  VIDMKFADE_GO :                 FC6 C |
 VIDPRINT_INIT :               106C C |  VID_CHECKLASTSPR :             7B4 C |
 VID_CHECKLASTSPR.BLNK_FIRST :  7CE C |  VID_CHECKLASTSPR.LAST_ONE :    7D4 C |
 VID_CHECKLASTSPR.SPR_EXIT :    7E4 C | *VID_FILLGO :                   AE2 C |
 VID_FILLGO.DMAW :              AE8 C |  VID_FILLGO.DMA_W :             B3C C |
 VID_FONTDEFPAL :              1080 C |  VID_MKDMACARRY :              1402 C |
 VID_MKDMANEXT :               13F8 C |  VID_MKMAPDMA :                1462 C |
 VID_MKMAPDMA.NEXT_PZ :        1482 C |  VID_MKMAPDMA.NO_DMA :         14AC C |
 VID_WRTREG01 :                 862 C |  VIEW_FAIRY :                     1 - |
 VIEW_GEMAINFO :                  0 - | *VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :                161A C |
*VIRQ_ON :                        8 - | *VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1CF5 C |  WAVE_LEN :                    1CED C |
 WAVE_LOOP :                   1CF0 C |  WAVE_PITCH :                  1CF3 C |
 WAVE_START :                  1CEA C |  WAVFREQ_CDPCM :               142F C |
 WAVFREQ_LIST :                13CD C |  X68KSRCLSB :                    35 C |
 X68KSRCMID :                    36 C | *YM_CTRL_1 :                 A04000 - |
*YM_CTRL_2 :                 A04002 - | *YM_DATA_1 :                 A04001 - |
*YM_DATA_2 :                 A04003 - | *Z80SYNTAX :                      0 - |
 Z80_BUS :                   A11100 - | *Z80_CODE :                    1C08 C |
*Z80_CODE_END :                3B94 C | *Z80_CODE_FILE_E :             3B94 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
*Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                    1F60 - |  ZDRVFWRT :                    1F80 - |
*ZDRVMARSBLK :                 1F89 - |  ZDRVMAXCMND :                   20 - |
*ZDRVMCDBLK :                  1F8A - | *ZDRVPALMODE :                 1F88 - |
 ZDRVRAMLEN :                  1F87 - |  ZDRVRAMSRC :                  1F86 - |
*ZDRVROMBLK :                  1F81 - | *ZMARS_SEND :                   F15 C |
*ZOPCEX :                         8 - |  ZOPCEXX :                       D9 - |
*ZOPCNOP :                        0 - |  ZOPCPUSHAF :                    F5 - |
 ZOPCRET :                       C9 - |  ZPSG_CTRL :                   7F11 - |
 ZTBL_CHIP :                      3 - |  ZTBL_FREQINDX :                  5 - |
 ZTBL_INSTCACH :                  A - |  ZTBL_LINK :                      0 - |
 ZTBL_MASTERVOL :                 4 - |  ZTBL_PITCHBEND :                 6 - |
 ZTBL_PRIORITY :                  2 - |  ZTBL_VOLSLIDE :                  8 - |
 ZTBL_VOLUME :                    7 - |  ZYM_CTRL_1 :                  4000 - |
 ZYM_CTRL_2 :                  4002 - |  ZYM_DATA_1 :                  4001 - |
 ZYM_DATA_2 :                  4003 - | *_CCR :                    FFFFFE92 - |
*_DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
*_DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - | *_DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - | *_FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
*_FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
*_JR :                     FFFFFF00 - | *_OCR_H :                         4 - |
*_OCR_L :                         5 - | *_OVERWRITE :              24020000 - |
*_PALETTE :                20004200 - | *_SERIAL :                 FFFFFE00 - |
*_SYSREG :                 20004000 - | *_TCR :                           6 - |
*_TCSR :                          1 - | *_TIER :                          0 - |
*_TOCR :                          7 - | *_VDPREG :                 20004100 - |

   1307 symbols
    437 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 11/12/2024 05:52:25 PM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
DATA_DEND                             | DATA_DSET                            
ENDMEMORY                             | ERREPORT                             
FILLSECTORS                           | FS_END                               
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | GSMPLRAW                             
MARS_VRAMEND                          | MARS_VRAMSTART                       
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     29 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 11/12/2024 05:52:25 PM


  Defined Structures/Unions:
  --------------------------

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM
3 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 11/12/2024 05:52:25 PM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_VRAM                            
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 11/12/2024 05:52:25 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.14 seconds assembly time

  14543 lines source file
  15475 lines incl. macro expansions
      4 passes
      0 errors
      0 warnings
