 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 1 - 01/04/2025 05:20:08 AM


       1/       0 :                     ; ===========================================================================
       2/       0 :                     ; NikonaMD by GenesisFan64 2023-2025
       3/       0 :                     ;
       4/       0 :                     ; A devkit in assembly for developing software on the SEGA 16-bit
       5/       0 :                     ; family of systems:
       6/       0 :                     ; Genesis, Sega CD, Sega 32X, Sega CD32X and Sega Pico.
       7/       0 :                     ;
       8/       0 :                     ; DO NOT MODIFY THE nikona FOLDER AS IT WILL GET UPDATED WITH THE
       9/       0 :                     ; LATEST BUGFIXES AND CHANGES WITHOUT INTERFERING YOUR GAME CODE
      10/       0 :                     ; ===========================================================================
      11/       0 :                     
      12/       0 :                     ; ====================================================================
      13/       0 :                     ; ----------------------------------------------------------------
      14/       0 :                     ; NIKONA SETTINGS
      15/       0 :                     ; ----------------------------------------------------------------
      16/       0 :                     
      17/       0 : =$0                  SET_FIRSTSCRN	equ 0		; Starting screen mode number on boot
      18/       0 :                     
      19/       0 :                     ; ====================================================================
      20/       0 :                     ; ----------------------------------------------------------------
      21/       0 :                     ; 68000 RAM SIZES (MAIN-CPU in SegaCD/CD32X)
      22/       0 :                     ; ----------------------------------------------------------------
      23/       0 :                     
      24/       0 : =$200                MAX_StackSize	equ $0200	; Maximum Stack a7
      25/       0 : =$800                MAX_Globals	equ $0800	; USER Global variables
      26/       0 : =$1000               MAX_ScrnBuff	equ $1000	; Current Screen's variables
      27/       0 :                     
      28/       0 :                     ; ----------------------------------------------------
      29/       0 :                     ; SCD, 32X and CD32X ONLY
      30/       0 :                     ;
      31/       0 :                     ; These sections are unused/free on Genesis/Pico
      32/       0 : =$2C00               MAX_SysCode	equ $2C00	; SCD/32X/CD32X: Nikona lib
      33/       0 : =$8400               MAX_UserCode	equ $8400	; SCD/32X/CD32X: Current SCREEN's CODE+small DATA
      34/       0 :                     
      35/       0 :                     ; ====================================================================
      36/       0 :                     ; ----------------------------------------------------------------
      37/       0 :                     ; AS Assembler starting settings
      38/       0 :                     ; ----------------------------------------------------------------
      39/       0 :                     
      40/       0 :                     		cpu 		68000		; Starting CPU is 68000
      41/       0 :                     		padding		off		; Don't pad dc.b
      42/       0 :                     		listing 	purecode
      43/       0 :                     		supmode 	on 		; Supervisor mode (68000)
      44/       0 :                     		page 		0
      45/       0 :                     
      46/       0 :                     ; ====================================================================
      47/       0 :                     ; ----------------------------------------------------------------
      48/       0 :                     ; Includes
      49/       0 :                     ; ----------------------------------------------------------------
      50/       0 :                     
      51/       0 :                     		include	"rominfo.asm"		; ROM info
(1)    1/       0 :                     ; ====================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; ROM/DISC Info
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; ** DO NOT CHANGE THE SIZE OF THE STRINGS **
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; --------------------------------------------------------
(1)    9/       0 :                     ; System tags
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; First 4 letters MUST contain "SEGA" or " SEGA"
(1)   12/       0 :                     ; or this will NOT boot on hardware
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 : ="SEGA GENESIS    "  HTAG_SYS_MD	equ "SEGA GENESIS    "
(1)   16/       0 : ="SEGA GENESIS    "  HTAG_SYS_MCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   17/       0 : ="SEGA 32X        "  HTAG_SYS_MARS	equ "SEGA 32X        "
(1)   18/       0 : ="SEGA GENESIS    "  HTAG_SYS_MARSCD	equ "SEGA GENESIS    "	; Same as cartridge
(1)   19/       0 : ="SEGA PICO       "  HTAG_SYS_PICO	equ "SEGA PICO       "
(1)   20/       0 :                     
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     ; SCD/CD32X ONLY: Volume and System(SDK/Engine) name
(1)   23/       0 :                     ;
(1)   24/       0 :                     ; Note:
(1)   25/       0 :                     ; Leave the names as is if you haven't modified
(1)   26/       0 :                     ; any of the Nikona SDK files (/nikona folder)
(1)   27/       0 :                     ; --------------------------------------------------------
(1)   28/       0 :                     
(1)   29/       0 : ="NIKONACD   "       HTAG_DISCID	equ "NIKONACD   "	; SCD Disc Volume name
(1)   30/       0 : ="NIKONACD32X"       HTAG_DISCID_M	equ "NIKONACD32X"	; CD32X Disc Volume name
(1)   31/       0 : ="NIKONA-SDK "       HTAG_SYSNAME	equ "NIKONA-SDK "
(1)   32/       0 : =$102                HTAG_CDVER	equ $0100|$02		; $0100|Version: $00-$FF
(1)   33/       0 :                     
(1)   34/       0 :                     ; --------------------------------------------------------
(1)   35/       0 :                     ; Release date
(1)   36/       0 :                     ;
(1)   37/       0 :                     ; "(C)NAME year.month"
(1)   38/       0 :                     ; --------------------------------------------------------
(1)   39/       0 :                     
(1)   40/       0 : ="(C)GF64 2024.???"  HTAG_DATEINFO	equ "(C)GF64 2024.???"
(1)   41/       0 :                     
(1)   42/       0 :                     ; --------------------------------------------------------
(1)   43/       0 :                     ; "Domestic" Name: Your game's name in your language
(1)   44/       0 :                     ; --------------------------------------------------------
(1)   45/       0 :                     
(1)   46/       0 : ="Nikona MD     ..   HTAG_NDM_MD	equ "Nikona MD                                       "
(1)   47/       0 : ="Nikona MCD    ..   HTAG_NDM_MCD	equ "Nikona MCD                                      "
(1)   48/       0 : ="Nikona SUPER32..   HTAG_NDM_MARS	equ "Nikona SUPER32X                                 "
(1)   49/       0 : ="Nikona CD32X  ..   HTAG_NDM_MARSCD	equ "Nikona CD32X                                    "
(1)   50/       0 : ="Nikona PICO   ..   HTAG_NDM_PICO	equ "Nikona PICO                                     "
(1)   51/       0 :                     
(1)   52/       0 :                     ; --------------------------------------------------------
(1)   53/       0 :                     ; "Overseas" Name: Your game's name in english
(1)   54/       0 :                     ; --------------------------------------------------------
(1)   55/       0 :                     
(1)   56/       0 : ="Nikona GENESIS..   HTAG_NOV_MD	equ "Nikona GENESIS                                  "
(1)   57/       0 : ="Nikona SCD    ..   HTAG_NOV_MCD	equ "Nikona SCD                                      "
(1)   58/       0 : ="Nikona 32X    ..   HTAG_NOV_MARS	equ "Nikona 32X                                      "
(1)   59/       0 : ="Nikona CD32X  ..   HTAG_NOV_MARSCD	equ "Nikona CD32X                                    "
(1)   60/       0 : ="Nikona PICO   ..   HTAG_NOV_PICO	equ "Nikona PICO                                     "
(1)   61/       0 :                     
(1)   62/       0 :                     ; --------------------------------------------------------
(1)   63/       0 :                     ; Serial number
(1)   64/       0 :                     ;
(1)   65/       0 :                     ; "id anything-vv"
(1)   66/       0 :                     ;
(1)   67/       0 :                     ; id:
(1)   68/       0 :                     ; GM - Game
(1)   69/       0 :                     ; AI - Educative
(1)   70/       0 :                     ;
(1)   71/       0 :                     ; anything:
(1)   72/       0 :                     ; Your own serial format, there's no standard for this.
(1)   73/       0 :                     ;
(1)   74/       0 :                     ; vv:
(1)   75/       0 :                     ; Version number: 00 to 99
(1)   76/       0 :                     ; --------------------------------------------------------
(1)   77/       0 :                     
(1)   78/       0 : ="GM HOMEBREW-02"    HTAG_SERIAL	equ "GM HOMEBREW-02"
(1)   79/       0 :                     
(1)   80/       0 :                     ; --------------------------------------------------------
(1)   81/       0 :                     ; Regions supported
(1)   82/       0 :                     ; --------------------------------------------------------
(1)   83/       0 :                     
(1)   84/       0 : ="F               "  HTAG_REGIONS	equ "F               "
(1)   85/       0 :                     
(1)   86/       0 :                     ; --------------------------------------------------------
(1)   87/       0 :                     ; Save data settings, applies to both
(1)   88/       0 :                     ; Cartridge and CD
(1)   89/       0 :                     ;
(1)   90/       0 :                     ; For compatibility the size must be in sizes of $40
(1)   91/       0 :                     ; (or $20 w/BRAM's protection)
(1)   92/       0 :                     ; Size also affects the save copy stored on RAM
(1)   93/       0 :                     ;
(1)   94/       0 :                     ; BRAM name note: Only UPPERCASE and _ are allowed.
(1)   95/       0 :                     ; --------------------------------------------------------
(1)   96/       0 :                     
(1)   97/       0 : =$1                  SET_ENBLSAVE	equ True		; Disable/Enable saving support
(1)   98/       0 : =$200                SET_SRAMSIZE	equ $200		; SRAM/BRAM filesize
(1)   99/       0 : ="NIKONACD___"       HTAG_CDSAVE	equ "NIKONACD___"	; SCD internal save name
(1)  100/       0 : ="NIKONACD32X"       HTAG_MARSCDSAV	equ "NIKONACD32X"	; CD32X internal save name
(1)  101/       0 :                     
      52/       0 :                     		include	"nikona/macros.asm"	; Assembler macros
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; MACROS Section
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; *** THIS MUST BE INCLUDED AT START OF THE CODE ***
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : =$3F800              MAX_WramBank	equ $3F800	; Maxium WRAM available to use + filler $120
(1)    9/       0 :                     
(1)   10/       0 :                     ; ====================================================================
(1)   11/       0 :                     ; ------------------------------------------------------------
(1)   12/       0 :                     ; AS Functions
(1)   13/       0 :                     ; ------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     splitw		function l,r,(((l))<<16&$FFFF0000|((r))&$FFFF)		; Two WORDS stored in a single LONG: $11112222
(1)   16/       0 :                     
(1)   17/       0 :                     ; Common functions
(1)   18/       0 :                     cell_num	function a,(a<<5)					; Value in VDP cells
(1)   19/       0 :                     color_indx	function a,a<<1						; Applies to both VDP and SuperVDP
(1)   20/       0 :                     pstr_mem	function a,b,((a|$80)<<24)|b&$FFFFFF			; PRINT memory: pstr_mem(type,mem_pos)
(1)   21/       0 :                     full_loc	function a,-(-a)&$FFFFFFFF
(1)   22/       0 :                     
(1)   23/       0 :                     ; ====================================================================
(1)   24/       0 :                     ; ------------------------------------------------------------
(1)   25/       0 :                     ; Macros
(1)   26/       0 :                     ; ------------------------------------------------------------
(1)   27/       0 :                     
(1)   28/       0 :                     ; --------------------------------------------
(1)   29/       0 :                     ; Memory reserve
(1)   30/       0 :                     ;
(1)   31/       0 :                     ; Example:
(1)   32/       0 :                     ; 		memory RAM_Somewhere
(1)   33/       0 :                     ; RAM_ThisLong	ds.l 1
(1)   34/       0 :                     ; RAM_ThisWord	ds.w 1
(1)   35/       0 :                     ; RAM_ThisByte	ds.b 1				; <-- careful with alignment
(1)   36/       0 :                     ; 		endmemory 			; finish
(1)   37/       0 :                     ; --------------------------------------------
(1)   38/       0 :                     
(1)   39/       0 :                     memory		macro thisinput			; Reserve memory address
(1)   40/       0 :                     GLBL_LASTPC	:= *
(1)   41/       0 :                     		dephase
(1)   42/       0 :                     		phase thisinput
(1)   43/       0 :                     GLBL_LASTORG	:= *
(1)   44/       0 :                     		endm
(1)   45/       0 :                     
(1)   46/       0 :                     ; --------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     endmemory	macro				; Then finish.
(1)   49/       0 :                     .here:		dephase
(1)   50/       0 :                     		ds.b -(.here-GLBL_LASTORG)
(1)   51/       0 :                     		phase GLBL_LASTPC
(1)   52/       0 :                     		endm
(1)   53/       0 :                     
(1)   54/       0 :                     ; --------------------------------------------
(1)   55/       0 :                     ; Report memory usage
(1)   56/       0 :                     ; --------------------------------------------
(1)   57/       0 :                     
(1)   58/       0 :                     report		macro text,this,that
(1)   59/       0 :                     	if MOMPASS == 2
(1)   60/       0 :                     		if that == -1
(1)   61/       0 :                     			message text+": \{(this)&$FFFFFF}"
(1)   62/       0 :                     		else
(1)   63/       0 :                     			if this > that
(1)   64/       0 :                     				warning "RAN OUT OF "+text+" SPACE (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   65/       0 :                     			else
(1)   66/       0 :                     				message text+" uses \{(this)&$FFFFFF} of \{(that)&$FFFFFF}"
(1)   67/       0 :                     			endif
(1)   68/       0 :                     		endif
(1)   69/       0 :                     	endif
(1)   70/       0 :                     		endm
(1)   71/       0 :                     
(1)   72/       0 :                     ; --------------------------------------------
(1)   73/       0 :                     ; Same as report but only show on error
(1)   74/       0 :                     ; --------------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     erreport	macro text,this,that
(1)   77/       0 :                     	if MOMPASS == 2
(1)   78/       0 :                     		if this > that
(1)   79/       0 :                     			error "RAN OUT OF "+text+" (\{(this)&$FFFFFF} of \{(that)&$FFFFFF})"
(1)   80/       0 :                     		endif
(1)   81/       0 :                     	endif
(1)   82/       0 :                     		endm
(1)   83/       0 :                     
(1)   84/       0 :                     ; --------------------------------------------
(1)   85/       0 :                     ; ZERO Fill padding
(1)   86/       0 :                     ; --------------------------------------------
(1)   87/       0 :                     
(1)   88/       0 :                     rompad		macro target
(1)   89/       0 :                     .this_sz := target - *
(1)   90/       0 :                     		if .this_sz < 0
(1)   91/       0 :                     			error "Too much data at $\{target} ($\{(-.this_sz)} bytes)"
(1)   92/       0 :                     		else
(1)   93/       0 :                     			dc.b [.this_sz]0
(1)   94/       0 :                     		endif
(1)   95/       0 :                     	endm
(1)   96/       0 :                     
(1)   97/       0 :                     ; ====================================================================
(1)   98/       0 :                     ; ------------------------------------------------------------
(1)   99/       0 :                     ; Filesystem macros
(1)  100/       0 :                     ;
(1)  101/       0 :                     ; NOTE: A pre-generated ISO head is required
(1)  102/       0 :                     ;       at $8000 until $B7FF
(1)  103/       0 :                     ; ------------------------------------------------------------
(1)  104/       0 :                     
(1)  105/       0 :                     ; ------------------------------------------------------------
(1)  106/       0 :                     ; FS setup
(1)  107/       0 :                     ; ------------------------------------------------------------
(1)  108/       0 :                     
(1)  109/       0 :                     fs_mkList	macro type,start,end
(1)  110/       0 :                     .fstrt:
(1)  111/       0 :                     		dc.b .fend-.fstrt				; Block size
(1)  112/       0 :                     		dc.b 0						; Zero
(1)  113/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little endian
(1)  114/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  115/       0 :                     		dc.l start>>11					; Start sector, big endian
(1)  116/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little endian
(1)  117/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  118/       0 :                     		dc.l end-start					; Filesize, big endian
(1)  119/       0 :                     		dc.b (2025-1900)+1				; Year
(1)  120/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  121/       0 :                     		dc.b 2						; File flags
(1)  122/       0 :                     		dc.b 0,0
(1)  123/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  124/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  125/       0 :                     		dc.b 1,type
(1)  126/       0 :                     .fend:
(1)  127/       0 :                     		endm
(1)  128/       0 :                     
(1)  129/       0 :                     ; ------------------------------------------------------------
(1)  130/       0 :                     ; FS File
(1)  131/       0 :                     ; ------------------------------------------------------------
(1)  132/       0 :                     
(1)  133/       0 :                     fs_file		macro filename,start,end
(1)  134/       0 :                     .fstrt:		dc.b .fend-.fstrt				; Block size
(1)  135/       0 :                     		dc.b 0						; zero
(1)  136/       0 :                     		dc.b (start>>11&$FF),(start>>19&$FF)		; Start sector, little
(1)  137/       0 :                     		dc.b (start>>27&$FF),(start>>35&$FF)
(1)  138/       0 :                     		dc.l start>>11					; Start sector, big
(1)  139/       0 :                     		dc.b ((end-start)&$FF),((end-start)>>8&$FF)	; Filesize, little
(1)  140/       0 :                     		dc.b ((end-start)>>16&$FF),((end-start)>>24&$FF)
(1)  141/       0 :                     		dc.l end-start					; Filesize, big
(1)  142/       0 :                     		dc.b (2025-1900)+1				; Year
(1)  143/       0 :                     		dc.b 0,0,0,0,0,0				; (filler)
(1)  144/       0 :                     		dc.b 0						; File flags
(1)  145/       0 :                     		dc.b 0,0
(1)  146/       0 :                     		dc.b 1,0					; Volume sequence number, little
(1)  147/       0 :                     		dc.b 0,1					; Volume sequence number, big
(1)  148/       0 :                     		dc.b .flend-.flen
(1)  149/       0 :                     .flen:		dc.b filename,";1"
(1)  150/       0 :                     .flend:		dc.b 0
(1)  151/       0 :                     .fend:
(1)  152/       0 :                     		endm
(1)  153/       0 :                     
(1)  154/       0 :                     ; ====================================================================
(1)  155/       0 :                     ; ------------------------------------------------------------
(1)  156/       0 :                     ; Nikona macros
(1)  157/       0 :                     ; ------------------------------------------------------------
(1)  158/       0 :                     
(1)  159/       0 :                     ; --------------------------------------------
(1)  160/       0 :                     ; Screen mode code
(1)  161/       0 :                     ;
(1)  162/       0 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)  163/       0 :                     ; --------------------------------------------
(1)  164/       0 :                     
(1)  165/       0 :                     screen_code macro lblstart,lblend,path
(1)  166/       0 :                     	if MCD|MARSCD
(1)  167/       0 :                     		align $800		; SCD/CD32X sector align
(1)  168/       0 :                     	elseif MARS
(1)  169/       0 :                     		phase $880000+*		; 32X ROM-area
(1)  170/       0 :                     		align 4
(1)  171/       0 :                     	endif
(1)  172/       0 :                     lblstart label *			; Register start label
(1)  173/       0 :                     	if MARS
(1)  174/       0 :                     		dephase			; 32X dephase
(1)  175/       0 :                     	endif
(1)  176/       0 :                     mctopscrn:
(1)  177/       0 :                     	if MARS|MCD|MARSCD
(1)  178/       0 :                     		phase RAM_UserCode	; Phase code to RAM area
(1)  179/       0 :                     	endif
(1)  180/       0 :                     mcscrn_s:
(1)  181/       0 :                     	include path;"game/screenX/code.asm"
(1)  182/       0 :                     mcscrn_e:
(1)  183/       0 :                     	if MARS
(1)  184/       0 :                     		dephase			; dephase RAM section
(1)  185/       0 :                     	elseif MCD|MARSCD
(1)  186/       0 :                     		dephase
(1)  187/       0 :                     		phase mctopscrn+(mcscrn_e-RAM_UserCode)	; Add the used bytes
(1)  188/       0 :                     		align $800
(1)  189/       0 :                     	endif
(1)  190/       0 :                     lblend label *
(1)  191/       0 :                     	erreport "SCREEN CODE: lblstart",mcscrn_e-mcscrn_s,MAX_UserCode
(1)  192/       0 :                     	endm
(1)  193/       0 :                     
(1)  194/       0 :                     ; --------------------------------------------
(1)  195/       0 :                     ; Data bank START
(1)  196/       0 :                     ; --------------------------------------------
(1)  197/       0 :                     
(1)  198/       0 :                     data_bank macro startlbl
(1)  199/       0 :                     	if MCD|MARSCD
(1)  200/       0 :                     		align $800		; Sector alignment
(1)  201/       0 :                     	elseif MARS
(1)  202/       0 :                     		align 4			; 32X alignment
(1)  203/       0 :                     	endif
(1)  204/       0 :                     startlbl label *			; Register label
(1)  205/       0 :                     	if MCD|MARSCD			; Set PHASE
(1)  206/       0 :                     		phase sysmcd_wram
(1)  207/       0 :                     	elseif MARS
(1)  208/       0 :                     		phase $900000+(startlbl&$0FFFFF)
(1)  209/       0 :                     	endif
(1)  210/       0 :                     GLBL_MDATA_ST := *			; Save current pos globally
(1)  211/       0 :                     	endm
(1)  212/       0 :                     
(1)  213/       0 :                     ; --------------------------------------------
(1)  214/       0 :                     ; Data bank END
(1)  215/       0 :                     ; --------------------------------------------
(1)  216/       0 :                     
(1)  217/       0 :                     dend_bank macro endlbl
(1)  218/       0 :                     GLBL_MDATA_RP := *-GLBL_MDATA_ST	; Get used size to report
(1)  219/       0 :                     
(1)  220/       0 :                     	; Set 32X bank end
(1)  221/       0 :                     	if MARS
(1)  222/       0 :                     		if GLBL_MDATA_RP >= $900000+$100000
(1)  223/       0 :                     			error "32X: RAN OUT OF MEMORY FOR A SINGLE 1MB BANK"
(1)  224/       0 :                     		endif
(1)  225/       0 :                     		dephase			; Dephase $900000
(1)  226/       0 :                     
(1)  227/       0 :                     	; Set MCD/CD32X data end
(1)  228/       0 :                     	elseif MCD|MARSCD
(1)  229/       0 :                     		dephase			; Dephase WRAM
(1)  230/       0 :                     mlastpos := *	; <-- CD/CD32X ONLY
(1)  231/       0 :                     mpadlbl	:= (mlastpos&$FFF800)+$800	; Fill sectors
(1)  232/       0 :                     		rompad mpadlbl
(1)  233/       0 :                     endlbl label *	; <-- CD/CD32X ONLY
(1)  234/       0 :                     
(1)  235/       0 :                     		if GLBL_MDATA_RP > MAX_WramBank
(1)  236/       0 :                     			error "SCD/CD32X: DATA BANK IS TOO LARGE: $\{GLBL_MDATA_RP} of $\{MAX_WramBank}"
(1)  237/       0 :                     		endif
(1)  238/       0 :                     	endif
(1)  239/       0 :                     	endm
(1)  240/       0 :                     
(1)  241/       0 :                     ; --------------------------------------------
(1)  242/       0 :                     ; SCD Stamp Start/End
(1)  243/       0 :                     ; --------------------------------------------
(1)  244/       0 :                     
(1)  245/       0 :                     mcdStampData	macro
(1)  246/       0 :                     		phase 0
(1)  247/       0 :                     		ds.b $80
(1)  248/       0 :                     		endm
(1)  249/       0 :                     
(1)  250/       0 :                     mcdStampDEnd	macro
(1)  251/       0 :                     		align 2
(1)  252/       0 :                     .end:
(1)  253/       0 :                     		erreport "This SCD Stamp data",.end,$3F800
(1)  254/       0 :                     		dephase
(1)  255/       0 :                     		endm
(1)  256/       0 :                     
(1)  257/       0 :                     ; --------------------------------------------
(1)  258/       0 :                     ; 32X graphics data Start/End
(1)  259/       0 :                     ; --------------------------------------------
(1)  260/       0 :                     
(1)  261/       0 :                     marsVramData	macro
(1)  262/       0 :                     		phase 0
(1)  263/       0 :                     		endm
(1)  264/       0 :                     
(1)  265/       0 :                     marsVramDEnd	macro
(1)  266/       0 :                     		align 8
(1)  267/       0 :                     .end:
(1)  268/       0 :                     		erreport "This 32X graphics data",.end,$18000
(1)  269/       0 :                     		dephase
(1)  270/       0 :                     		endm
(1)  271/       0 :                     
(1)  272/       0 :                     ; --------------------------------------------
(1)  273/       0 :                     ; Fill CD sectors
(1)  274/       0 :                     ; --------------------------------------------
(1)  275/       0 :                     
(1)  276/       0 :                     fillSectors macro num
(1)  277/       0 :                     	rept num
(1)  278/       0 :                     		align $800-1
(1)  279/       0 :                     		dc.b 0
(1)  280/       0 :                     	endm
(1)  281/       0 :                     	endm
(1)  282/       0 :                     
(1)  283/       0 :                     ; --------------------------------------------
(1)  284/       0 :                     ; binclude VDP graphics
(1)  285/       0 :                     ; --------------------------------------------
(1)  286/       0 :                     
(1)  287/       0 :                     binclude_dma	macro lblstart,file
(1)  288/       0 :                     	; 32X: Temporally show ROM position
(1)  289/       0 :                     	if MARS
(1)  290/       0 :                     GLBL_LASTPHDMA	set *
(1)  291/       0 :                     	dephase
(1)  292/       0 :                     GLBL_PHASEDMA	set *
(1)  293/       0 :                     		endif
(1)  294/       0 :                     
(1)  295/       0 :                     		align 2
(1)  296/       0 :                     lblstart	label *
(1)  297/       0 :                     		binclude file
(1)  298/       0 :                     		align 2
(1)  299/       0 :                     	; 32X: Return to last phase
(1)  300/       0 :                     	if MARS
(1)  301/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  302/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  303/       0 :                     	endif
(1)  304/       0 :                     		endm
(1)  305/       0 :                     
(1)  306/       0 :                     ; --------------------------------------------
(1)  307/       0 :                     ; binclude VDP graphics w/End label
(1)  308/       0 :                     ; --------------------------------------------
(1)  309/       0 :                     
(1)  310/       0 :                     binclude_dma_e	macro lblstart,lblend,file
(1)  311/       0 :                     	; 32X: Temporally show ROM position
(1)  312/       0 :                     	if MARS
(1)  313/       0 :                     GLBL_LASTPHDMA	set *
(1)  314/       0 :                     	dephase
(1)  315/       0 :                     GLBL_PHASEDMA	set *
(1)  316/       0 :                     		endif
(1)  317/       0 :                     		align 2
(1)  318/       0 :                     lblstart	label *
(1)  319/       0 :                     		binclude file
(1)  320/       0 :                     lblend		label *
(1)  321/       0 :                     		align 2
(1)  322/       0 :                     	; 32X: Return to last phase
(1)  323/       0 :                     	if MARS
(1)  324/       0 :                     GLBL_ENDPHDMA	set *-GLBL_PHASEDMA
(1)  325/       0 :                     		phase GLBL_LASTPHDMA+GLBL_ENDPHDMA
(1)  326/       0 :                     	endif
(1)  327/       0 :                     		endm
(1)  328/       0 :                     
(1)  329/       0 :                     ; ====================================================================
(1)  330/       0 :                     ; ------------------------------------------------------------
(1)  331/       0 :                     ; Nikona CODE macros
(1)  332/       0 :                     ; ------------------------------------------------------------
(1)  333/       0 :                     
(1)  334/       0 :                     ; --------------------------------------------
(1)  335/       0 :                     ; VDP color debug
(1)  336/       0 :                     ; --------------------------------------------
(1)  337/       0 :                     
(1)  338/       0 :                     vdp_showme	macro color
(1)  339/       0 :                     		move.l	#$C0000000,(vdp_ctrl).l
(1)  340/       0 :                     		move.w	#color,(vdp_data).l
(1)  341/       0 :                     		endm
(1)  342/       0 :                     
      53/       0 :                     		include	"nikona/mcd/map.asm"	; Sega CD hardware map (shared with Sub-CPU)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD SUB-CPU MAP
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ----------------------------------------------------------------
(1)    7/       0 :                     ; SEGA CD map
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     
(1)   10/       0 : =$200000             sysmcd_wram	equ	$200000
(1)   11/       0 : =$A12000             sysmcd_reg	equ	$A12000
(1)   12/       0 :                     
(1)   13/       0 :                     ; ------------------------------------------------
(1)   14/       0 :                     ; Register area
(1)   15/       0 :                     ;
(1)   16/       0 :                     ; MAIN-CPU: $A12000 (sysmcd_reg)
(1)   17/       0 :                     ; SUB-CPU:  $FF8000 (scpu_reg)
(1)   18/       0 :                     ; ------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 :                     ; -------------
(1)   21/       0 :                     ; bits
(1)   22/       0 : =$2                  bitWRamMode	equ 2		;2M | 1M
(1)   23/       0 :                     
(1)   24/       0 :                     ; -------------
(1)   25/       0 :                     ; Registers
(1)   26/       0 : =$3                  mcd_memory	equ $03
(1)   27/       0 : =$6                  mcd_hint	equ $06		; [W] HBlank RAM redirection-jump (MAIN CPU ONLY)
(1)   28/       0 : =$E                  mcd_comm_m	equ $0E		; [B] Comm port MAIN R/W | SUB READ ONLY
(1)   29/       0 : =$F                  mcd_comm_s	equ $0F		; [B] Comm port SUB R/W  | MAIN READ ONLY
(1)   30/       0 : =$10                 mcd_dcomm_m	equ $10		; [S: $0E] Communication MAIN
(1)   31/       0 : =$20                 mcd_dcomm_s	equ $20		; [S: $0E] Communication SUB
(1)   32/       0 : =$32                 mcd_intmask	equ $32		;
(1)   33/       0 :                     
(1)   34/       0 :                     ; ====================================================================
(1)   35/       0 :                     
      54/       0 :                     		include	"nikona/mars/map.asm"	; 32X hardware map (shared with SH2)
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SH2 MAP
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Variables are shared with 68K
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 :                     ; ----------------------------------------------------------------
(1)    9/       0 :                     ; 32X map
(1)   10/       0 :                     ; ----------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 : =$A130EC             sysmars_id		equ	$A130EC		; 32X's ID: "MARS"
(1)   13/       0 : =$A15100             sysmars_reg		equ	$A15100		; MARS 32X registers area
(1)   14/       0 : =$A15180             sysmars_svdp		equ	$A15180		; SVDP registers
(1)   15/       0 : =$840000             sysmars_framebuffer	equ	$840000
(1)   16/       0 : =$860000             sysmars_overwrite	equ	$860000
(1)   17/       0 :                     
(1)   18/       0 :                     ; ------------------------------------------------------------
(1)   19/       0 :                     ; SH2 MAP
(1)   20/       0 :                     ; ------------------------------------------------------------
(1)   21/       0 :                     
(1)   22/       0 : =$0                  CS0		equ	$00000000	; Boot ROM & System registers
(1)   23/       0 : =$2000000            CS1		equ	$02000000	; ROM view (CARTRIDGE ONLY, BLOCKED if RV=1)
(1)   24/       0 : =$4000000            CS2		equ	$04000000	; Framebuffer/Overwrite area
(1)   25/       0 : =$6000000            CS3		equ	$06000000	; SDRAM
(1)   26/       0 : =$20000000           TH		equ	$20000000	; Cache-Thru OR Value
(1)   27/       0 : =$20004000           _sysreg		equ	$00004000|TH	; 32X system registers
(1)   28/       0 : =$20004100           _vdpreg		equ	$00004100|TH	; SuperVDP registers
(1)   29/       0 : =$20004200           _palette	equ	$00004200|TH	; Palette RAM for Pixel-Packed or RLE mode
(1)   30/       0 : =$24000000           _framebuffer:	equ	CS2|TH		; Framebuffer: First 240 words are the linetable
(1)   31/       0 : =$24020000           _overwrite:	equ	CS2|TH+$20000	; Overwrite:   Same but any 0 value writes are ignored
(1)   32/       0 :                     
(1)   33/       0 :                     ; ------------------------------------------------------------
(1)   34/       0 :                     ; Variables
(1)   35/       0 :                     ; ------------------------------------------------------------
(1)   36/       0 :                     
(1)   37/       0 :                     ; ------------------------------------------------
(1)   38/       0 :                     ; System
(1)   39/       0 :                     ;
(1)   40/       0 :                     ; _sysreg / sysmars_reg
(1)   41/       0 :                     ; ------------------------------------------------
(1)   42/       0 :                     
(1)   43/       0 : =$0                  adapter		equ	$00		; adapter control register
(1)   44/       0 : =$1                  intmask		equ	$01		; SH2 CPU ONLY: interrupts mask
(1)   45/       0 : =$3                  standby		equ	$03		; CMD interrupt request bit by MD side (slave|master) (BYTE)
(1)   46/       0 : =$4                  bankset		equ	$04		; 68K ONLY: $900000 bank
(1)   47/       0 : =$6                  dreqctl		equ	$06		; DREQ control (WORD)
(1)   48/       0 : =$8                  dreqsource	equ	$08		; DREQ source address
(1)   49/       0 : =$C                  dreqdest	equ	$0C		; DREQ destination address
(1)   50/       0 : =$10                 dreqlen		equ	$10		; DREQ length
(1)   51/       0 : =$12                 dreqfifo	equ	$12		; DREQ FIFO
(1)   52/       0 : =$14                 vresintclr	equ	$14		; VRES interrupt clear
(1)   53/       0 : =$16                 vintclr		equ	$16		; V interrupt clear
(1)   54/       0 : =$18                 hintclr		equ	$18		; H interrupt clear
(1)   55/       0 : =$1A                 cmdintclr	equ	$1a		; CMD interrupt clear
(1)   56/       0 : =$1C                 pwmintclr	equ	$1C		; PWM interrupt clear
(1)   57/       0 : =$20                 comm0		equ	$20		; Communication ports
(1)   58/       0 : =$21                 comm1		equ	$21		; ** ALL CPUs can see this ports: including Z80
(1)   59/       0 : =$22                 comm2		equ	$22		; only be careful with the read/write directions. **
(1)   60/       0 : =$23                 comm3		equ	$23		;
(1)   61/       0 : =$24                 comm4		equ	$24		;
(1)   62/       0 : =$25                 comm5		equ	$25		;
(1)   63/       0 : =$26                 comm6		equ	$26		;
(1)   64/       0 : =$27                 comm7		equ	$27		;
(1)   65/       0 : =$28                 comm8		equ	$28		;
(1)   66/       0 : =$29                 comm9		equ	$29		;
(1)   67/       0 : =$2A                 comm10		equ	$2A		;
(1)   68/       0 : =$2B                 comm11		equ	$2B		;
(1)   69/       0 : =$2C                 comm12		equ	$2C		;
(1)   70/       0 : =$2D                 comm13		equ	$2D		;
(1)   71/       0 : =$2E                 comm14		equ	$2E		;
(1)   72/       0 : =$2F                 comm15		equ	$2F		;
(1)   73/       0 : =$30                 timerctl	equ	$30		; PWM Timer Control
(1)   74/       0 : =$31                 pwmctl		equ	$31		; PWM Control
(1)   75/       0 : =$32                 cycle		equ	$32		; PWM Cycle
(1)   76/       0 : =$34                 lchwidth	equ	$34		; PWM L ch Width
(1)   77/       0 : =$36                 rchwidth	equ	$36		; PWM R ch Width
(1)   78/       0 : =$38                 monowidth	equ	$38		; PWM Monaural Width
(1)   79/       0 :                     
(1)   80/       0 :                     ; adapter
(1)   81/       0 : =$1                  ADEN		equ	%00000001	; MARS Enabled: No/Yes
(1)   82/       0 : =$2                  RES		equ	%00000010	; SH2 Reset: Yes/Cancelled
(1)   83/       0 : =$80                 FM		equ	%10000000	; SuperVDP permission: MD or SH
(1)   84/       0 :                     
(1)   85/       0 :                     ; framectl
(1)   86/       0 : =$1                  FS		equ	%00000001	; Current framebuffer DRAM pixel data
(1)   87/       0 : =$2                  FEN		equ	%00000010	; Can write to Framebuffer: Yes/No
(1)   88/       0 :                     
(1)   89/       0 :                     ; vdpsts
(1)   90/       0 : =$80                 VBLK		equ	%10000000	; VBlank bit
(1)   91/       0 : =$40                 HBLK		equ	%01000000	; HBlank bit
(1)   92/       0 : =$20                 PEN		equ	%00100000	; Can write to Palette: Yes/No
(1)   93/       0 :                     
(1)   94/       0 :                     ; intmask
(1)   95/       0 : =$8                  VIRQ_ON		equ	$08		; IRQ masks for IRQ mask register
(1)   96/       0 : =$4                  HIRQ_ON		equ	$04
(1)   97/       0 : =$2                  CMDIRQ_ON	equ	$02
(1)   98/       0 : =$1                  PWMIRQ_ON	equ	$01
(1)   99/       0 :                     
(1)  100/       0 :                     ; ------------------------------------------------
(1)  101/       0 :                     ; Super VDP
(1)  102/       0 :                     ;
(1)  103/       0 :                     ; _vdpreg
(1)  104/       0 :                     ; ------------------------------------------------
(1)  105/       0 :                     
(1)  106/       0 : =$0                  tvmode		equ	$00		; TV mode
(1)  107/       0 : =$1                  bitmapmd	equ	$01		; Bitmap mode
(1)  108/       0 : =$2                  shift		equ	$02		; Lineshift bit
(1)  109/       0 : =$4                  filllength	equ	$04		; Auto Fill Length register
(1)  110/       0 : =$6                  fillstart	equ	$06		; Auto Fill Start Address register
(1)  111/       0 : =$8                  filldata	equ	$08		; Auto Fill Data register
(1)  112/       0 : =$A                  vdpsts		equ	$0A		; VDP Status register
(1)  113/       0 : =$B                  framectl	equ	$0B		; Frame Buffer Control register
(1)  114/       0 :                     
(1)  115/       0 :                     ; ------------------------------------------------------------
(1)  116/       0 :                     ; SH2 internal registers
(1)  117/       0 :                     ;
(1)  118/       0 :                     ; DREQ and PWM are directly connected to
(1)  119/       0 :                     ; their specific channel:
(1)  120/       0 :                     ; Channel 0: DREQ
(1)  121/       0 :                     ; Channel 1: PWM
(1)  122/       0 :                     ; ------------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : =$FFFFFE00           _SERIAL		equ	$FFFFFE00	; Serial Control
(1)  125/       0 : =$FFFFFE10           _FRT		equ	$FFFFFE10	; Free run timer
(1)  126/       0 : =$0                  _TIER		equ	$00		; Timer interrupt enable register
(1)  127/       0 : =$1                  _TCSR		equ	$01		; Timer control & status register
(1)  128/       0 : =$2                  _FRC_H		equ	$02		; Free running counter High
(1)  129/       0 : =$3                  _FRC_L		equ	$03		; Free running counter Low
(1)  130/       0 : =$4                  _OCR_H		equ	$04		; Output compare register High
(1)  131/       0 : =$5                  _OCR_L		equ	$05		; Output compare register Low
(1)  132/       0 : =$6                  _TCR		equ	$06		; Timer control register
(1)  133/       0 : =$7                  _TOCR		equ	$07		; Timer output compare control register
(1)  134/       0 : =$FFFFFE92           _CCR		equ	$FFFFFE92	; Cache register (WORD)
(1)  135/       0 : =$FFFFFF00           _JR		equ	$FFFFFF00	; DIVU (--- / val)
(1)  136/       0 : =$FFFFFF04           _HRL32		equ	$FFFFFF04	; DIVU (val / ---) or RIGHT-long result on Read.
(1)  137/       0 : =$FFFFFF10           _HRH		equ	$FFFFFF10	; DIVU Result: LEFT long
(1)  138/       0 : =$FFFFFF14           _HRL		equ	$FFFFFF14	; DIVU Result: RIGHT long
(1)  139/       0 : =$FFFFFF80           _DMASOURCE0	equ	$FFFFFF80	; DMA source address 0
(1)  140/       0 : =$FFFFFF84           _DMADEST0	equ	$FFFFFF84	; DMA destination address 0
(1)  141/       0 : =$FFFFFF88           _DMACOUNT0	equ	$FFFFFF88	; DMA transfer count 0
(1)  142/       0 : =$FFFFFF8C           _DMACHANNEL0	equ	$FFFFFF8C	; DMA channel control 0
(1)  143/       0 : =$FFFFFF90           _DMASOURCE1	equ	$FFFFFF90	; DMA source address 1
(1)  144/       0 : =$FFFFFF94           _DMADEST1	equ	$FFFFFF94	; DMA destination address 1
(1)  145/       0 : =$FFFFFF98           _DMACOUNT1	equ	$FFFFFF98	; DMA transfer count 1
(1)  146/       0 : =$FFFFFF9C           _DMACHANNEL1	equ	$FFFFFF9C	; DMA channel control 1
(1)  147/       0 : =$FFFFFFA0           _DMAVECTORN0	equ	$FFFFFFA0	; DMA vector number N0
(1)  148/       0 : =$FFFFFFA4           _DMAVECTORE0	equ	$FFFFFFA4	; DMA vector number E0
(1)  149/       0 : =$FFFFFFA8           _DMAVECTORN1	equ	$FFFFFFA8	; DMA vector number N1
(1)  150/       0 : =$FFFFFFAC           _DMAVECTORE1	equ	$FFFFFFAC	; DMA vector number E1
(1)  151/       0 : =$FFFFFFB0           _DMAOPERATION	equ	$FFFFFFB0	; DMA operation
(1)  152/       0 : =$FFFFFFB4           _DMAREQACK0	equ	$FFFFFFB4	; DMA request/ack select control 0
(1)  153/       0 : =$FFFFFFB8           _DMAREQACK1	equ	$FFFFFFB8	; DMA request/ack select control 1
(1)  154/       0 :                     
      55/       0 :                     		include	"nikona/md/map.asm"	; Genesis hardware map and other areas
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis / Pico 68000 map
(1)    4/       0 :                     ; ----------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 : =$200000             sys_sram	equ	$200000		; Second half of 4MB rom or external RAM (Normal or save data)
(1)    7/       0 : =$A00000             z80_cpu		equ	$A00000		; Z80 CPU area, size: $2000
(1)    8/       0 : =$A04000             ym_ctrl_1	equ	$A04000		; YM2612 reg 1
(1)    9/       0 : =$A04001             ym_data_1	equ	$A04001		; YM2612 reg 2
(1)   10/       0 : =$A04002             ym_ctrl_2	equ	$A04002		; YM2612 reg 1
(1)   11/       0 : =$A04003             ym_data_2	equ	$A04003		; YM2612 reg 2
(1)   12/       0 : =$A10001             sys_io		equ	$A10001		; bits: OVRSEAS(7)|PAL(6)|DISK(5)|VER(3-0)
(1)   13/       0 : =$A10003             sys_data_1	equ	$A10003		; Port 1 DATA
(1)   14/       0 : =$A10005             sys_data_2	equ	$A10005		; Port 2 DATA
(1)   15/       0 : =$A10007             sys_data_3	equ	$A10007		; Modem DATA
(1)   16/       0 : =$A10009             sys_ctrl_1	equ	$A10009		; Port 1 CTRL
(1)   17/       0 : =$A1000B             sys_ctrl_2	equ	$A1000B		; Port 2 CTRL
(1)   18/       0 : =$A1000D             sys_ctrl_3	equ	$A1000D		; Modem CTRL
(1)   19/       0 : =$A11100             z80_bus 	equ	$A11100		; only use bit 0 (bit 8 as WORD)
(1)   20/       0 : =$A11200             z80_reset	equ	$A11200		; WRITE only ($0000 reset/$0100 cancel)
(1)   21/       0 : =$A130F1             md_bank_sram	equ	$A130F1		; Make SRAM visible at $200000
(1)   22/       0 : =$A14000             sys_tmss	equ	$A14000		; write "SEGA" here for ver > 0
(1)   23/       0 : =$C00000             vdp_data	equ	$C00000		; video data port
(1)   24/       0 : =$C00004             vdp_ctrl	equ	$C00004		; video control port
(1)   25/       0 : =$C00011             psg_ctrl	equ	$C00011		; PSG control
(1)   26/       0 :                     
(1)   27/       0 :                     ; ----------------------------------------------------------------
(1)   28/       0 :                     ; Genesis / Mega drive Z80 map
(1)   29/       0 :                     ; ----------------------------------------------------------------
(1)   30/       0 :                     
(1)   31/       0 : =$4000               zym_ctrl_1	equ	$4000		; YM2612 reg 1
(1)   32/       0 : =$4001               zym_data_1	equ	$4001		; YM2612 reg 2
(1)   33/       0 : =$4002               zym_ctrl_2	equ	$4002		; YM2612 reg 1
(1)   34/       0 : =$4003               zym_data_2	equ	$4003		; YM2612 reg 2
(1)   35/       0 : =$6000               zbank		equ	$6000		; Z80 ROM BANK: %XXXXXXXX X0000000 00000000 (write 9 times)
(1)   36/       0 :                     ; zvdp_data	equ	$7F00		; VDP data port
(1)   37/       0 :                     ; zvdp_ctrl	equ	$7F04		; VDP control port
(1)   38/       0 : =$7F11               zpsg_ctrl	equ	$7F11		; PSG control
(1)   39/       0 :                     
      56/       0 :                     		include	"nikona/ram.asm"	; Genesis RAM sections
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; ----------------------------------------------------------------
(1)    3/       0 :                     ; Genesis/Pico 68000 RAM section (SCD: "MAIN-CPU")
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Used RAM areas:
(1)    6/       0 :                     ; $FFF700-$FFFC00 | Used by Boot ROM *
(1)    7/       0 :                     ; $FFFC00-$FFFD00 | Boot ROM's stack area a7
(1)    8/       0 :                     ; $FFFD00-$FFFDB3 | RESERVED for the Sega CD Vector jumps
(1)    9/       0 :                     ; $FFFDB4-$FFFFFF | Used by Boot ROM *
(1)   10/       0 :                     ;
(1)   11/       0 :                     ; * Free on Cartridge
(1)   12/       0 :                     ; ----------------------------------------------------------------
(1)   13/       0 :                     
(1)   14/       0 : =$FFFC00             SET_RAMLIMIT		equ $00FFFC00
(1)   15/       0 :                     
(1)   16/       0 :                     ; --------------------------------------------------------
(1)   17/       0 :                     ; MAIN USER RAM
(1)   18/       0 :                     ; --------------------------------------------------------
(1)   19/       0 :                     
(1)   20/       0 : (MACRO)              			memory $FFFF0000
(1)   20/       0 : =$0                  GLBL_LASTPC     := *
(1)   20/       0 :                                     dephase
(1)   20/FFFFFFFFFFFF0000 :                                     phase $FFFF0000
(1)   20/FFFFFFFFFFFF0000 : =$FFFFFFFFFFFF0000   GLBL_LASTORG    := *
(1)   21/FFFFFFFFFFFF0000 :                     RAM_SystemCode		ds.b MAX_SysCode	; CD/32X/CD32X only
(1)   22/FFFFFFFFFFFF2C00 :                     RAM_UserCode		ds.b MAX_UserCode	; CD/32X/CD32X only
(1)   23/FFFFFFFFFFFFB000 :                     .end:
(1)   24/FFFFFFFFFFFFB000 : (MACRO)              			endmemory
(1)   24/    B000 :                     .here:          dephase
(1)   24/    B000 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   24/       0 :                                     phase GLBL_LASTPC
(1)   28/       0 :                     
(1)   29/       0 :                     ; ------------------------------------------------
(1)   30/       0 :                     ; Nikona .w section of RAM
(1)   31/       0 :                     ;
(1)   32/       0 :                     ; MUST BE AFTER $FF8000
(1)   33/       0 :                     ; ------------------------------------------------
(1)   34/       0 :                     
(1)   35/       0 : (MACRO)              			memory $FFFFB000
(1)   35/       0 : =$0                  GLBL_LASTPC     := *
(1)   35/       0 :                                     dephase
(1)   35/FFFFFFFFFFFFB000 :                                     phase $FFFFB000
(1)   35/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
(1)   36/FFFFFFFFFFFFB000 :                     RAM_MdGlobal		ds.b MAX_Globals
(1)   37/FFFFFFFFFFFFB800 :                     RAM_ScrnBuff		ds.b MAX_ScrnBuff
(1)   38/FFFFFFFFFFFFC800 :                     
(1)   39/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   40/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   49/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   50/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   52/FFFFFFFFFFFFC800 :                     RAM_MdMisc		ds.b sizeof_mdmisc-RAM_MdMisc
(1)   54/FFFFFFFFFFFFD880 :                     RAM_MdVideo		ds.b sizeof_mdvid-RAM_MdVideo	; $FF8000
(1)   55/FFFFFFFFFFFFE878 :                     RAM_MdSystem		ds.b sizeof_mdsys-RAM_MdSystem	;
(1)   56/FFFFFFFFFFFFFB1E :                     sizeof_MdRam		ds.l 0
(1)   58/FFFFFFFFFFFFFB24 :                     ; ------------------------------------------------
(1)   59/FFFFFFFFFFFFFB24 : (MACRO)              			endmemory
(1)   59/    4B24 :                     .here:          dephase
(1)   59/    4B24 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   59/       0 :                                     phase GLBL_LASTPC
(1)   63/       0 :                     
(1)   64/       0 :                     ; --------------------------------------------------------
(1)   65/       0 :                     ; SCD and 32X special section
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     
(1)   69/       0 : (MACRO)              			memory RAM_MdMisc
(1)   69/       0 : =$0                  GLBL_LASTPC     := *
(1)   69/       0 :                                     dephase
(1)   69/FFFFFFFFFFFFC800 :                                     phase RAM_MDMISC
(1)   69/FFFFFFFFFFFFC800 : =$FFFFFFFFFFFFC800   GLBL_LASTORG    := *
(1)   70/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   71/FFFFFFFFFFFFC800 :                     ; * FIRST PASS LABELS *
(1)   80/FFFFFFFFFFFFC800 :                     ; ----------------------------------------
(1)   81/FFFFFFFFFFFFC800 :                     ; * AUTOMATIC SIZES *
(1)   83/FFFFFFFFFFFFC800 :                     RAM_MdMcd_Stamps	ds.b $20*MAX_MCDSTAMPS		; SCD Stamps
(1)   84/FFFFFFFFFFFFCC00 :                     RAM_MdMcd_StampSett	ds.b mdstmp_len			; SCD Stamp dot-screen control
(1)   87/FFFFFFFFFFFFCC1E :                     RAM_MdMars_IndxPalFd	ds.w 1				; ''
(1)   88/FFFFFFFFFFFFCC20 :                     RAM_MdMars_PalFd	ds.w 256			; Target 32X palette for FadeIn/Out
(1)   89/FFFFFFFFFFFFCE20 :                     RAM_MdMars_MPalFdList	ds.b palfd_len*MAX_PALFDREQ	; '' same but for 32X
(1)   90/FFFFFFFFFFFFCE60 :                     RAM_MdMars_CommBuff	ds.b Dreq_len			; 32X DREQ-RAM size
(1)   92/FFFFFFFFFFFFD880 :                     sizeof_mdmisc		ds.l 0
(1)   93/FFFFFFFFFFFFD884 :                     ; ----------------------------------------
(1)   95/FFFFFFFFFFFFD884 : (MACRO)              			endmemory
(1)   95/    1084 :                     .here:          dephase
(1)   95/    1084 :                                     ds.b -(.here-GLBL_LASTORG)
(1)   95/       0 :                                     phase GLBL_LASTPC
(1)   97/       0 :                     
(1)   98/       0 :                     ; --------------------------------------------------------
(1)   99/       0 :                     ; Fixed areas
(1)  100/       0 :                     ; --------------------------------------------------------
(1)  101/       0 :                     
(1)  102/       0 : =$FFFFFD00           RAM_Stack		equ RAM_MegaCd		; <-- Goes backwards
(1)  103/       0 : =$FFFFFD00           RAM_MegaCd		equ $FFFFFD00		; SCD's vector jumps
(1)  104/       0 : =$FFFFFF00           RAM_SoundBuff		equ $FFFFFF00
(1)  105/       0 :                     
      57/       0 :                     		include	"nikona/shared.asm"	; Shared variables and specials
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; Shared variables
(1)    4/       0 :                     ; -------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     ; ====================================================================
(1)    7/       0 :                     ; ----------------------------------------------------------------
(1)    8/       0 :                     ; MCD SECTION
(1)    9/       0 :                     ; ----------------------------------------------------------------
(1)   10/       0 :                     
(1)   12/       0 :                     
(1)   13/       0 :                     ; --------------------------------------------------------
(1)   14/       0 :                     ; Settings
(1)   15/       0 :                     ; --------------------------------------------------------
(1)   16/       0 :                     
(1)   17/       0 : =$20                 MAX_MCDSTAMPS	equ 32		; !! Maximum SCD Stamps
(1)   18/       0 :                     
(1)   19/       0 :                     ; --------------------------------------------------------
(1)   20/       0 :                     ; Structs
(1)   21/       0 :                     ; --------------------------------------------------------
(1)   22/       0 :                     
(1)   23/       0 :                     ; Stamp data buffer
(1)   24/       0 :                     ; Fixed size of $20 bytes
(1)   25/       0 :                     
(1)   26/       0 :                     cdstamp		struct
(1)   27/       0 :                     flags		ds.b 1		; Flags
(1)   28/       1 :                     map		ds.b 1		; Map slot index (in WRAM_MdStampList)
(1)   29/       2 :                     cx		ds.w 1		; Center Texture X
(1)   30/       4 :                     cy		ds.w 1		; Center Texture Y
(1)   31/       6 :                     x		ds.w 1		; Stamp X position
(1)   32/       8 :                     y		ds.w 1		; Stamp Y position
(1)   33/       A :                     wdth		ds.w 1		; Stamp width
(1)   34/       C :                     hght		ds.w 1		; Stamp height
(1)   35/       E :                     scale		ds.w 1
(1)   36/      10 :                     rot		ds.w 1
(1)   37/      12 :                     		ds.w 1
(1)   38/      14 :                     		ds.w 1
(1)   39/      16 :                     		ds.w 1
(1)   40/      18 :                     		ds.w 1
(1)   41/      1A :                     		ds.w 1
(1)   42/      1C :                     		ds.w 1
(1)   43/      1E :                     		ds.w 1
(1)   44/      20 :                     ; len		ds.l 0
(1)   45/       0 : =$20                 		endstruct
(1)   46/       0 :                     
(1)   47/       0 :                     ; ============================================================
(1)   48/       0 :                     
(1)   50/       0 :                     
(1)   51/       0 :                     ; ====================================================================
(1)   52/       0 :                     ; ----------------------------------------------------------------
(1)   53/       0 :                     ; 32X SECTION
(1)   54/       0 :                     ; ----------------------------------------------------------------
(1)   55/       0 :                     
(1)   57/       0 :                     
(1)   58/       0 :                     ; --------------------------------------------------------
(1)   59/       0 :                     ; Settings
(1)   60/       0 :                     ; --------------------------------------------------------
(1)   61/       0 :                     
(1)   62/       0 : =$20                 MAX_MARSSPR	equ 32		; !! Maximum 2D-mode Sprites
(1)   63/       0 : =$18                 MAX_MARSMSPR	equ 24		; !! Maximum 3D-mode Sprites
(1)   64/       0 : =$28                 MAX_MARSOBJ	equ 40		; !! Maximum 3D-mode Objects (models)
(1)   65/       0 :                     
(1)   66/       0 :                     ; --------------------------------------------------------
(1)   67/       0 :                     ; Structs
(1)   68/       0 :                     ; --------------------------------------------------------
(1)   69/       0 :                     
(1)   70/       0 :                     ; ----------------------------------------
(1)   71/       0 :                     ; RAM_MdMars_ScrlSett
(1)   72/       0 :                     ;
(1)   73/       0 :                     ; Maximum size: $20 bytes
(1)   74/       0 :                     ; ----------------------------------------
(1)   75/       0 :                     
(1)   76/       0 :                     sscrl		struct
(1)   77/       0 :                     x_pos		ds.l 1		; $xxxx.0000
(1)   78/       4 :                     y_pos		ds.l 1		; $yyyy.0000
(1)   79/       8 :                     vram		ds.l 1		; VRAM
(1)   80/       0 : =$C                  		endstruct
(1)   81/       0 :                     
(1)   82/       0 :                     ; ----------------------------------------
(1)   83/       0 :                     ; RAM_MdMars_SuperSpr
(1)   84/       0 :                     ;
(1)   85/       0 :                     ; sspr_Flags: %ET0000yx
(1)   86/       0 :                     ;	| E - Enabled sprite
(1)   87/       0 :                     ;	| T - Delete on next frame (68k clears bit)
(1)   88/       0 :                     ; 	| x - Flip X
(1)   89/       0 :                     ; 	| y - Flip Y
(1)   90/       0 :                     ; sspr_Size: $xxyy
(1)   91/       0 :                     ; 	| xx - Width/8
(1)   92/       0 :                     ; 	| yy - Height/8
(1)   93/       0 :                     ;
(1)   94/       0 :                     ; Maximum size: $10 bytes
(1)   95/       0 :                     ; ----------------------------------------
(1)   96/       0 :                     
(1)   97/       0 :                     sspr		struct
(1)   98/       0 :                     flags		ds.b 1		; %ET0000yx
(1)   99/       1 :                     		ds.b 1
(1)  100/       2 :                     frame		ds.w 1		; Current frame
(1)  101/       4 :                     size		ds.w 1		; Size in cells $XXYY
(1)  102/       6 :                     indx		ds.w 1		; 256-index color
(1)  103/       8 :                     x_pos		ds.w 1		; X position
(1)  104/       A :                     y_pos		ds.w 1		; Y position
(1)  105/       C :                     vram		ds.l 1		; Graphics VRAM position (in RAM_Mars_VramData)
(1)  106/      10 :                     ; len		ds.l 0
(1)  107/       0 : =$10                 		endstruct
(1)  108/       0 :                     
(1)  109/       0 :                     ; ----------------------------------------
(1)  110/       0 :                     ; RAM_MdMars_Models
(1)  111/       0 :                     ;
(1)  112/       0 :                     ; X/Y/Z pixels are in 10mm steps
(1)  113/       0 :                     ; (1 meter = $100)
(1)  114/       0 :                     ;
(1)  115/       0 :                     ; Maximum size: $20 bytes
(1)  116/       0 :                     ; ----------------------------------------
(1)  117/       0 :                     
(1)  118/       0 :                     mmdl		struct
(1)  119/       0 :                     		ds.w 1
(1)  120/       2 :                     		ds.w 1
(1)  121/       4 :                     data		ds.l 1		; Model data pointer, 0: No model
(1)  122/       8 :                     x_pos		ds.l 1		; X position
(1)  123/       C :                     y_pos		ds.l 1		; Y position
(1)  124/      10 :                     z_pos		ds.l 1		; Z position
(1)  125/      14 :                     x_rot		ds.l 1		; X rotation
(1)  126/      18 :                     z_rot		ds.l 1		; Y rotation
(1)  127/      1C :                     y_rot		ds.l 1		; Z rotation
(1)  128/      20 :                     ; len		ds.l 0
(1)  129/       0 : =$20                 		endstruct
(1)  130/       0 :                     
(1)  131/       0 :                     ; ----------------------------------------
(1)  132/       0 :                     ; RAM_MdMars_MSprites
(1)  133/       0 :                     ;
(1)  134/       0 :                     ; X/Y/Z pixels are in 10mm steps
(1)  135/       0 :                     ; (1 meter = $100)
(1)  136/       0 :                     ;
(1)  137/       0 :                     ; Maximum size: $20 bytes
(1)  138/       0 :                     ; ----------------------------------------
(1)  139/       0 :                     
(1)  140/       0 :                     mspr		struct
(1)  141/       0 :                     flags		ds.b 1		; %EIF00000 E-enable | I-Normal/3D-field | F-Face to the camera
(1)  142/       1 :                     indx		ds.b 1		; Palette starting index
(1)  143/       2 :                     size_w		ds.b 1		; Size width
(1)  144/       3 :                     size_h		ds.b 1		; Size height
(1)  145/       4 :                     src_w		ds.b 1		; Texture frame width
(1)  146/       5 :                     src_h		ds.b 1		; Texture frame height
(1)  147/       6 :                     srcwdth		ds.b 1		; Texture width
(1)  148/       7 :                     frame_x		ds.b 1		; X frame
(1)  149/       8 :                     frame_y		ds.b 1		; Y frame
(1)  150/       9 :                     		ds.b 1
(1)  151/       A :                     		ds.b 1
(1)  152/       B :                     		ds.b 1
(1)  153/       C :                     		ds.b 1
(1)  154/       D :                     		ds.b 1
(1)  155/       E :                     		ds.b 1
(1)  156/       F :                     		ds.b 1
(1)  157/      10 :                     x_pos		ds.w 1		; X position
(1)  158/      12 :                     y_pos		ds.w 1		; Y position
(1)  159/      14 :                     z_pos		ds.w 1		; Z position
(1)  160/      16 :                     x_rot		ds.w 1		; X rotation
(1)  161/      18 :                     z_rot		ds.w 1		; Y rotation
(1)  162/      1A :                     y_rot		ds.w 1		; Z rotation
(1)  163/      1C :                     vram		ds.l 1		; VRAM texture location
(1)  164/      20 :                     ; len		ds.l 0
(1)  165/       0 : =$20                 		endstruct
(1)  166/       0 :                     
(1)  167/       0 :                     ; ----------------------------------------
(1)  168/       0 :                     ; RAM_MdMars_MdlCamera
(1)  169/       0 :                     ;
(1)  170/       0 :                     ; X/Y/Z pixels are in 10mm steps
(1)  171/       0 :                     ; (1 meter = $100)
(1)  172/       0 :                     ;
(1)  173/       0 :                     ; Maximum size: $20 bytes
(1)  174/       0 :                     ; ----------------------------------------
(1)  175/       0 :                     
(1)  176/       0 :                     mcam		struct
(1)  177/       0 :                     x_pos		ds.l 1		; X position
(1)  178/       4 :                     y_pos		ds.l 1		; Y position
(1)  179/       8 :                     z_pos		ds.l 1		; Z position
(1)  180/       C :                     x_rot		ds.l 1		; X rotation
(1)  181/      10 :                     y_rot		ds.l 1		; Y rotation
(1)  182/      14 :                     z_rot		ds.l 1		; Z rotation
(1)  183/      18 :                     ; len		ds.l 0
(1)  184/       0 : =$18                 		endstruct
(1)  185/       0 :                     
(1)  186/       0 :                     ; ----------------------------------------------------------------
(1)  187/       0 :                     ; DREQ RAM section
(1)  188/       0 :                     ;
(1)  189/       0 :                     ; To read these labels...
(1)  190/       0 :                     ;
(1)  191/       0 :                     ; On the Genesis:
(1)  192/       0 :                     ; 	lea	(RAM_MdMars_Comm+DREQ_LABEL).w,aN
(1)  193/       0 :                     ; On the 32X, uses r0:
(1)  194/       0 :                     ; 	mov	#DREQ_LABEL,rN
(1)  195/       0 :                     ; 	mov	@(marsGbl_DreqRead,gbr),r0
(1)  196/       0 :                     ;	add	r0,rN
(1)  197/       0 :                     ; ----------------------------------------------------------------
(1)  198/       0 :                     
(1)  199/       0 :                     Dreq		struct
(1)  200/       0 :                     Palette		ds.w 256				; 256-color palette *DON'T MOVE THIS*
(1)  201/     200 :                     Buff0		ds.b $20				; Buffer 0 | $020 bytes
(1)  202/     220 :                     Buff1		ds.b $400				; Buffer 1 | $400 bytes
(1)  203/     620 :                     Buff2		ds.b $400				; Buffer 2 | $400 bytes
(1)  204/     A20 :                     ; len		ds.l 0
(1)  205/       0 : =$A20                		endstruct
(1)  209/       0 :                     
(1)  210/       0 :                     ; ====================================================================
(1)  211/       0 :                     ; ----------------------------------------------------------------
(1)  212/       0 :                     ; Mode 1: 2D scrolling with sprites
(1)  213/       0 :                     ; ----------------------------------------------------------------
(1)  214/       0 :                     
(1)  215/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  215/       0 : =$0                  GLBL_LASTPC     := *
(1)  215/       0 :                                     dephase
(1)  215/FFFFFFFFFFFFCE60 :                                     phase RAM_MDMARS_COMMBUFF
(1)  215/FFFFFFFFFFFFCE60 : =$FFFFFFFFFFFFCE60   GLBL_LASTORG    := *
(1)  216/FFFFFFFFFFFFCE60 :                     			ds.w 256			; Pallete
(1)  217/FFFFFFFFFFFFD060 :                     RAM_MdMars_ScrlSett	ds.b $10
(1)  218/FFFFFFFFFFFFD070 :                     			ds.b $10			; Free
(1)  219/FFFFFFFFFFFFD080 :                     RAM_MdMars_ScrlData	ds.w (512/16)*(256/16)
(1)  220/FFFFFFFFFFFFD480 :                     RAM_MdMars_SuperSpr	ds.b sspr_len*MAX_MARSSPR
(1)  221/FFFFFFFFFFFFD680 :                     .sizeof_this		ds.l 0
(1)  222/FFFFFFFFFFFFD684 : (MACRO)              			endmemory
(1)  222/     824 :                     .here:          dephase
(1)  222/     824 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  222/       0 :                                     phase GLBL_LASTPC
(1)  223/       0 : (MACRO)              			erreport "The 2D DREQ MEMORY",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  224/       0 :                     
(1)  225/       0 :                     ; ====================================================================
(1)  226/       0 :                     ; ----------------------------------------------------------------
(1)  227/       0 :                     ; Mode 2: 3D polygons mode
(1)  228/       0 :                     ; ----------------------------------------------------------------
(1)  229/       0 :                     
(1)  230/       0 : (MACRO)              			memory RAM_MdMars_CommBuff
(1)  230/       0 : =$0                  GLBL_LASTPC     := *
(1)  230/       0 :                                     dephase
(1)  230/FFFFFFFFFFFFCE60 :                                     phase RAM_MDMARS_COMMBUFF
(1)  230/FFFFFFFFFFFFCE60 : =$FFFFFFFFFFFFCE60   GLBL_LASTORG    := *
(1)  231/FFFFFFFFFFFFCE60 :                     			ds.w 256			; pallete skip
(1)  232/FFFFFFFFFFFFD060 :                     RAM_MdMars_MdlCamera	ds.b $20
(1)  233/FFFFFFFFFFFFD080 :                     RAM_MdMars_MSprites	ds.b mspr_len*MAX_MARSMSPR	; $400
(1)  234/FFFFFFFFFFFFD380 :                     RAM_MdMars_Models	ds.b mmdl_len*MAX_MARSOBJ	; $400
(1)  235/FFFFFFFFFFFFD880 :                     .sizeof_this		ds.l 0
(1)  236/FFFFFFFFFFFFD884 : (MACRO)              			endmemory
(1)  236/     A24 :                     .here:          dephase
(1)  236/     A24 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  236/       0 :                                     phase GLBL_LASTPC
(1)  237/       0 : (MACRO)              			erreport "The 3D DREQ MEMORY",.sizeof_this-RAM_MdMars_CommBuff,Dreq_len
(1)  238/       0 :                     
(1)  239/       0 :                     ; ============================================================
(1)  240/       0 :                     
(1)  242/       0 :                     
      58/       0 :                     
      59/       0 :                     ; ====================================================================
      60/       0 :                     ; ----------------------------------------------------------------
      61/       0 :                     ; GLOBAL variables
      62/       0 :                     ; ----------------------------------------------------------------
      63/       0 :                     
      64/       0 : (MACRO)              		memory RAM_MdGlobal
      64/       0 : =$0                  GLBL_LASTPC     := *
      64/       0 :                                     dephase
      64/FFFFFFFFFFFFB000 :                                     phase RAM_MDGLOBAL
      64/FFFFFFFFFFFFB000 : =$FFFFFFFFFFFFB000   GLBL_LASTORG    := *
      65/FFFFFFFFFFFFB000 :                     	; ------------------------------------------------
      66/FFFFFFFFFFFFB000 :                     		include "game/globals.asm"
(1)    1/FFFFFFFFFFFFB000 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFB000 :                     ; GLOBAL settings and variables
(1)    4/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFB000 :                     
(1)    6/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFFB000 :                     ; Variable example:
(1)    8/FFFFFFFFFFFFB000 :                     ;
(1)    9/FFFFFFFFFFFFB000 :                     ; example_value		equ $1234
(1)   10/FFFFFFFFFFFFB000 :                     ; example_bool		equ True
(1)   11/FFFFFFFFFFFFB000 :                     ; example_string	equ "NIKONA"
(1)   12/FFFFFFFFFFFFB000 :                     ;
(1)   13/FFFFFFFFFFFFB000 :                     ; You can use any name you want but be careful with any
(1)   14/FFFFFFFFFFFFB000 :                     ; conflicting names used by the Nikona code
(1)   15/FFFFFFFFFFFFB000 :                     ; "equ" es permanent, "set" is temporal can get rewritten
(1)   16/FFFFFFFFFFFFB000 :                     ; later on during build
(1)   17/FFFFFFFFFFFFB000 :                     ;
(1)   18/FFFFFFFFFFFFB000 :                     ; RAM memory labels at RAM_Global
(1)   19/FFFFFFFFFFFFB000 :                     ;
(1)   20/FFFFFFFFFFFFB000 :                     ; Your Score, Lives, Level number, etc. go here.
(1)   21/FFFFFFFFFFFFB000 :                     ; for storing temporals on your current screen use RAM_ScrnBuff
(1)   22/FFFFFFFFFFFFB000 :                     ;
(1)   23/FFFFFFFFFFFFB000 :                     ; Examples:
(1)   24/FFFFFFFFFFFFB000 :                     ;
(1)   25/FFFFFFFFFFFFB000 :                     ; RAM_YourName		ds.X N ; X: size b, w, l | N: number of items
(1)   26/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExL		ds.l 8 ; Reserve 8 LONGS ($20 bytes)
(1)   27/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExW		ds.w 5 ; Reserve 5 WORDS ($0A bytes)
(1)   28/FFFFFFFFFFFFB000 :                     ; RAM_Glbl_ExB		ds.b 6 ; Reserve 6 BYTES
(1)   29/FFFFFFFFFFFFB000 :                     ;
(1)   30/FFFFFFFFFFFFB000 :                     ; Be careful will aligment or you will get an ADDRESS ERROR
(1)   31/FFFFFFFFFFFFB000 :                     ; on real hardware, also with any conflicting names.
(1)   32/FFFFFFFFFFFFB000 :                     ; ----------------------------------------------------------------
(1)   33/FFFFFFFFFFFFB000 :                     
(1)   34/FFFFFFFFFFFFB000 :                     RAM_Glbl_Example_L	ds.l 1		; 1 long (4 bytes)
(1)   35/FFFFFFFFFFFFB004 :                     RAM_Glbl_Example_W	ds.w 1		; 1 word (2 bytes)
(1)   36/FFFFFFFFFFFFB006 :                     RAM_Glbl_Example_B	ds.b 1		; 1 byte
(1)   37/FFFFFFFFFFFFB007 :                     
      67/FFFFFFFFFFFFB007 :                     		align 2
      68/FFFFFFFFFFFFB008 :                     	; ------------------------------------------------
      69/FFFFFFFFFFFFB008 :                     sizeof_MdGlbl	ds.l 0
      73/FFFFFFFFFFFFB00C : (MACRO)              		erreport "USER Globals",(sizeof_MdGlbl-RAM_MdGlobal),MAX_Globals	; Report error if ran out
      74/FFFFFFFFFFFFB00C : (MACRO)              		endmemory
      74/       C :                     .here:          dephase
      74/       C :                                     ds.b -(.here-GLBL_LASTORG)
      74/       0 :                                     phase GLBL_LASTPC
      75/       0 :                     
      76/       0 :                     ; ====================================================================
      77/       0 :                     ; ----------------------------------------------------------------
      78/       0 :                     ; SAVE data structure
      79/       0 :                     ; ----------------------------------------------------------------
      80/       0 :                     
      81/       0 : (MACRO)              		memory RAM_SaveData
      81/       0 : =$0                  GLBL_LASTPC     := *
      81/       0 :                                     dephase
      81/FFFFFFFFFFFFE878 :                                     phase RAM_SAVEDATA
      81/FFFFFFFFFFFFE878 : =$FFFFFFFFFFFFE878   GLBL_LASTORG    := *
      82/FFFFFFFFFFFFE878 :                     	; ------------------------------------------------
      83/FFFFFFFFFFFFE878 :                     		include "game/savestruct.asm"
(1)    1/FFFFFFFFFFFFE878 :                     ; ====================================================================
(1)    2/FFFFFFFFFFFFE878 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFFE878 :                     ; Save file struct
(1)    4/FFFFFFFFFFFFE878 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFFE878 :                     
(1)    6/FFFFFFFFFFFFE878 :                     RAM_Save_TAG		ds.b 4		; ** DO NOT REMOVE **
(1)    7/FFFFFFFFFFFFE87C :                     RAM_Save_Counter	ds.l 1		; Temporal counter
(1)    8/FFFFFFFFFFFFE880 :                     
      84/FFFFFFFFFFFFE880 :                     		align 2
      85/FFFFFFFFFFFFE882 :                     	; ------------------------------------------------
      86/FFFFFFFFFFFFE882 :                     sizeof_SaveInfo	ds.l 0
      90/FFFFFFFFFFFFE888 :                     ; 		erreport "SAVE struct",(sizeof_SaveInfo-RAM_SaveData),SET_SRAMSIZE	; Report error if ran out
      91/FFFFFFFFFFFFE888 : (MACRO)              		endmemory
      91/      10 :                     .here:          dephase
      91/      10 :                                     ds.b -(.here-GLBL_LASTORG)
      91/       0 :                                     phase GLBL_LASTPC
      92/       0 :                     
      93/       0 :                     ; ====================================================================
      94/       0 :                     ; ----------------------------------------------------------------
      95/       0 :                     ; Init procedures for all systems
      96/       0 :                     ; ----------------------------------------------------------------
      97/       0 :                     
      98/       0 :                     		!org 0						; Start at 0
      99/       0 :                     
     100/       0 :                     ; ---------------------------------------------
     101/       0 :                     ; SEGA 32X
     102/       0 :                     ; ---------------------------------------------
     103/       0 :                     
     123/       0 :                     		include	"nikona/head_mcd.asm"			; Sega CD header
(1)    1/       0 :                     ; ===========================================================================
(1)    2/       0 :                     ; -------------------------------------------------------------------
(1)    3/       0 :                     ; SEGA CD header
(1)    4/       0 :                     ;
(1)    5/       0 :                     ; Header shared for both CD and CD32X
(1)    6/       0 :                     ; -------------------------------------------------------------------
(1)    7/       0 :                     
(1)    8/       0 : 5345 4741 4449      		dc.b "SEGADISCSYSTEM  "			; Disc Type (Must be SEGADISCSYSTEM)
                6 : 5343 5359 5354 
                C : 454D 2020          
(1)   10/      10 : 4E49 4B4F 4E41      		dc.b HTAG_DISCID_M,0			; Volume Name
               16 : 4344 3332 5800    
(1)   14/      1C : 0102                		dc.w HTAG_CDVER				; Volume Version
(1)   15/      1E : 0001                		dc.w $0001				; Volume Type
(1)   16/      20 : 4E49 4B4F 4E41      		dc.b HTAG_SYSNAME,0			; System Name
               26 : 2D53 444B 2000    
(1)   17/      2C : 0000                		dc.w 0					; System Version, Type
(1)   18/      2E : 0000                		dc.w 0
(1)   19/      30 : 0000 0200           		dc.l IP_Start
(1)   20/      34 : 0000 0800           		dc.l IP_End
(1)   21/      38 : 0000 0000           		dc.l 0
(1)   22/      3C : 0000 0000           		dc.l 0
(1)   23/      40 : 0000 1000           		dc.l SP_Start
(1)   24/      44 : 0000 2180           		dc.l SP_End
(1)   25/      48 : 0000 0000           		dc.l 0
(1)   26/      4C : 0000 0000           		dc.l 0
(1)   27/      50 :                     		align $100
(1)   28/     100 : 5345 4741 2047      		dc.b HTAG_SYS_MCD;"SEGA GENESIS    "			; Stays same as Genesis
              106 : 454E 4553 4953 
              10C : 2020 2020          
(1)   29/     110 : 2843 2947 4636      		dc.b HTAG_DATEINFO;"(C)GF64 2024.???"
              116 : 3420 3230 3234 
              11C : 2E3F 3F3F          
(1)   31/     120 : 4E69 6B6F 6E61      		dc.b HTAG_NDM_MARSCD;"Nikona CD32X                                    "
              126 : 2043 4433 3258 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 2020 2020 2020 
              13E : 2020 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
(1)   32/     150 : 4E69 6B6F 6E61                      dc.b HTAG_NOV_MARSCD;"Nikona CD32X                                    "
              156 : 2043 4433 3258 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 2020 2020 2020 
              16E : 2020 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
(1)   37/     180 : 474D 2048 4F4D      		dc.b HTAG_SERIAL;"GM HOMEBREW-02  "
              186 : 4542 5245 572D 
              18C : 3032             
(1)   38/     18E : 4A36 4D20 2020      		dc.b "J6M             "
              194 : 2020 2020 2020 
              19A : 2020 2020          
(1)   39/     19E :                     		align $1F0
(1)   40/     1F0 : 4620 2020 2020      		dc.b HTAG_REGIONS;"F               "
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
(1)   41/     200 :                     
(1)   42/     200 :                     ; ====================================================================
(1)   43/     200 :                     ; ----------------------------------------------------------------
(1)   44/     200 :                     ; IP
(1)   45/     200 :                     ; ----------------------------------------------------------------
(1)   46/     200 :                     
(1)   47/     200 :                     IP_Start:
(1)   53/     200 :                     		binclude "nikona/mcd/region/usa.bin"	; <-- Default
(1)   55/     784 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Get Z80 bus
              78A : 1100             
(1)   56/     78C : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
              792 : 1200             
(1)   57/     794 :                     .wait:
(1)   58/     794 : 0839 0000 00A1      		btst	#0,(z80_bus).l
              79A : 1100             
(1)   59/     79C : 66F6                		bne.s	.wait
(1)   60/     79E : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1)   61/     7A4 : 302E 0004           .wait_vint:	move.w	4(a6),d0
(1)   62/     7A8 : 0800 0003           		btst	#3,d0
(1)   63/     7AC : 67F6                		beq.s	.wait_vint
(1)   64/     7AE : 13FC 0000 00A1      		move.b	#0,(sysmcd_reg+mcd_comm_m).l	; Clear MAIN comm
              7B4 : 200E             
(1)   65/     7B6 : 33FC FD0C 00A1      		move.w	#$FD0C,(sysmcd_reg+mcd_hint).l	; Relocate HBlank jump
              7BC : 2006             
(1)   66/     7BE : 4EF9 00FF 2E00      		jmp	($FF0600+MCD_Main).l
(1)   67/     7C4 :                     		align $800
(1)   68/     800 :                     IP_End:
(1)   69/     800 :                     		ds.b $260				; Filler
(1)   70/     A60 :                     
(1)   71/     A60 :                     ; ====================================================================
(1)   72/     A60 :                     ; ----------------------------------------------------------------
(1)   73/     A60 :                     ; SP
(1)   74/     A60 :                     ; ----------------------------------------------------------------
(1)   75/     A60 :                     
(1)   76/     A60 :                     		align $800
(1)   77/    1000 :                     SP_Start:
(1)   78/    1000 :                     		include "nikona/mcd/subcpu.asm"
(2)    1/    1000 :                     ; ===========================================================================
(2)    2/    1000 :                     ; -------------------------------------------------------------------
(2)    3/    1000 :                     ; SegaCD SUB-CPU
(2)    4/    1000 :                     ;
(2)    5/    1000 :                     ; Loaded on BOOT
(2)    6/    1000 :                     ; -------------------------------------------------------------------
(2)    7/    1000 :                     
(2)    8/    1000 : =$100                SET_PCMBLK		equ $100	; $100 or $80
(2)    9/    1000 : =$F00                SET_PCMLAST		equ $F00	;
(2)   10/    1000 : =$100                SET_STAMPPOV		equ 256
(2)   11/    1000 :                     ; MAX_MCDSTAMPS		equ 64		; see shared.asm
(2)   12/    1000 :                     
(2)   13/    1000 :                     ; Dot output size: (WIDTH/8)*(HEIGHT/8)*$20
(2)   14/    1000 :                     ; Map slots: $4000 bytes
(2)   15/    1000 :                     ; Trace data: $2000 ($800 bytes * 4)
(2)   16/    1000 :                     ; Stamp list: ($20*MAX_MCDSTAMPS)
(2)   17/    1000 :                     ; Dot-screen: $9600 320x240 max
(2)   18/    1000 : =$20000              WRAM_DotOutput_0	equ $20000
(2)   19/    1000 : =$28000              WRAM_DotOutput_1	equ $28000
(2)   20/    1000 : =$30000              WRAM_MdMapTable		equ $30000
(2)   21/    1000 : =$3A000              WRAM_MdStampList	equ $3A000
(2)   22/    1000 : =$3B000              WRAM_TraceBuff		equ $3B000	; Size $780*2 ($F00)
(2)   23/    1000 : =$3BFFC              WRAM_StampsDone		equ $3BFFC
(2)   24/    1000 : =$3BFFE              WRAM_StampCurrFlip	equ $3BFFE
(2)   25/    1000 :                     
(2)   26/    1000 :                     ; ====================================================================
(2)   27/    1000 :                     ; ----------------------------------------------------------------
(2)   28/    1000 :                     ; Variables
(2)   29/    1000 :                     ; ----------------------------------------------------------------
(2)   30/    1000 :                     
(2)   31/    1000 : =$80000              SCPU_wram	equ $00080000
(2)   32/    1000 : =$FFFE8000           SCPU_bram	equ $FFFE8000
(2)   33/    1000 : =$FFFF0000           SCPU_pcm	equ $FFFF0000
(2)   34/    1000 :                     ; SCPU_pcmram	equ $FFFF2001
(2)   35/    1000 : =$FFFF8000           SCPU_reg	equ $FFFF8000
(2)   36/    1000 :                     
(2)   37/    1000 : =$0                  PCM		equ $00
(2)   38/    1000 : =$1                  ENV		equ $01		; Envelope (Volume)
(2)   39/    1000 : =$3                  PAN		equ $03		; Panning (%bbbbaaaa, aaaa = left, bbbb = right)
(2)   40/    1000 : =$5                  FDL		equ $05		; Sample rate $00xx
(2)   41/    1000 : =$7                  FDH		equ $07		; Sample rate $xx00
(2)   42/    1000 : =$9                  LSL		equ $09		; Loop address $xx00
(2)   43/    1000 : =$B                  LSH		equ $0B		; Loop address $00xx
(2)   44/    1000 : =$D                  ST		equ $0D		; Start address (only $x0, $x000)
(2)   45/    1000 : =$F                  CTREG		equ $0F		; Control register ($80 - Bank select, $C0 - Channel select)
(2)   46/    1000 : =$11                 ONREG		equ $11		; Channel On/Off (BITS: 1 - off, 0 - on)
(2)   47/    1000 :                     
(2)   48/    1000 :                     ; ====================================================================
(2)   49/    1000 :                     ; ----------------------------------------------------------------
(2)   50/    1000 :                     ; Structs
(2)   51/    1000 :                     ; ----------------------------------------------------------------
(2)   52/    1000 :                     
(2)   53/       0 :                     cdpcm		struct
(2)   54/       0 :                     status		ds.b 1		; Status bits
(2)   55/       1 :                     flags		ds.b 1		; Playback flags: %0000000L
(2)   56/       2 :                     start		ds.l 1
(2)   57/       6 :                     length		ds.l 1
(2)   58/       A :                     loop		ds.l 1
(2)   59/       E :                     clen		ds.l 1
(2)   60/      12 :                     cread		ds.l 1
(2)   61/      16 :                     strmhalf	ds.w 1		; Halfway MSB $00/$04/$08/$0C
(2)   62/      18 :                     pitch		ds.w 1
(2)   63/      1A :                     cblk		ds.w 1
(2)   64/      1C :                     cout		ds.w 1
(2)   65/      1E :                     pan		ds.b 1
(2)   66/      1F :                     env		ds.b 1
(2)   67/      20 :                     ; len		ds.l 0
(2)   68/    1000 : =$20                 		endstruct
(2)   69/    1000 :                     
(2)   70/       0 :                     stmpc		struct
(2)   71/       0 :                     XC		ds.w 1
(2)   72/       2 :                     YC		ds.w 1
(2)   73/       4 :                     X		ds.l 1
(2)   74/       8 :                     Y		ds.l 1
(2)   75/       C :                     DX		ds.l 1
(2)   76/      10 :                     DY		ds.l 1
(2)   77/      14 :                     TX		ds.l 1
(2)   78/      18 :                     TY		ds.l 1
(2)   79/      1C :                     xmul		ds.w 1
(2)   80/      1E :                     zmul		ds.w 1
(2)   81/      20 :                     zmul_sin	ds.w 1
(2)   82/      22 :                     zmul_cos	ds.w 1
(2)   83/      24 :                     rot_sin		ds.w 1
(2)   84/      26 :                     rot_cos		ds.w 1
(2)   85/      28 :                     ; len		ds.l 0
(2)   86/    1000 : =$28                 		endstruct
(2)   87/    1000 :                     
(2)   88/       0 :                     stmpi		struct
(2)   89/       0 :                     map		ds.w 1
(2)   90/       2 :                     x		ds.w 1
(2)   91/       4 :                     y		ds.w 1
(2)   92/       6 :                     xr		ds.w 1
(2)   93/       8 :                     yd		ds.w 1
(2)   94/       A :                     flags		ds.w 1
(2)   95/       C :                     ; len		ds.l 0
(2)   96/    1000 : =$C                  		endstruct
(2)   97/    1000 :                     
(2)   98/    1000 :                     ; ====================================================================
(2)   99/    1000 :                     ; ----------------------------------------------------------------
(2)  100/    1000 :                     ; Includes
(2)  101/    1000 :                     ; ----------------------------------------------------------------
(2)  102/    1000 :                     
(2)  103/    1000 :                     		include "nikona/mcd/cdbios.asm"
(3)    1/    1000 :                     ; ===========================================================================
(3)    2/    1000 :                     ; -------------------------------------------------------------------
(3)    3/    1000 :                     ; CD BIOS VARIABLES
(3)    4/    1000 :                     ; -------------------------------------------------------------------
(3)    5/    1000 :                     
(3)    6/    1000 : =$2                  MSCSTOP           equ	$0002
(3)    7/    1000 : =$3                  MSCPAUSEON        equ	$0003
(3)    8/    1000 : =$4                  MSCPAUSEOFF       equ	$0004
(3)    9/    1000 : =$5                  MSCSCANFF         equ	$0005
(3)   10/    1000 : =$6                  MSCSCANFR         equ	$0006
(3)   11/    1000 : =$7                  MSCSCANOFF        equ	$0007
(3)   12/    1000 : =$8                  ROMPAUSEON        equ	$0008
(3)   13/    1000 : =$9                  ROMPAUSEOFF       equ	$0009
(3)   14/    1000 : =$A                  DRVOPEN           equ	$000A
(3)   15/    1000 :                     
(3)   16/    1000 : =$10                 DRVINIT           equ	$0010
(3)   17/    1000 : =$11                 MSCPLAY           equ	$0011
(3)   18/    1000 : =$12                 MSCPLAY1          equ	$0012
(3)   19/    1000 : =$13                 MSCPLAYR          equ	$0013
(3)   20/    1000 : =$14                 MSCPLAYT          equ	$0014
(3)   21/    1000 : =$15                 MSCSEEK           equ	$0015
(3)   22/    1000 : =$16                 MSCSEEKT          equ	$0016
(3)   23/    1000 : =$17                 ROMREAD           equ	$0017
(3)   24/    1000 : =$18                 ROMSEEK           equ	$0018
(3)   25/    1000 : =$19                 MSCSEEK1          equ	$0019
(3)   26/    1000 :                     
(3)   27/    1000 : =$1E                 TESTENTRY         equ	$001E
(3)   28/    1000 : =$1F                 TESTENTRYLOOP     equ	$001F
(3)   29/    1000 : =$20                 ROMREADN          equ	$0020
(3)   30/    1000 : =$21                 ROMREADE          equ	$0021
(3)   31/    1000 :                     
(3)   32/    1000 : =$80                 CDBCHK            equ	$0080
(3)   33/    1000 : =$81                 CDBSTAT           equ	$0081
(3)   34/    1000 : =$82                 CDBTOCWRITE       equ	$0082
(3)   35/    1000 : =$83                 CDBTOCREAD        equ	$0083
(3)   36/    1000 : =$84                 CDBPAUSE          equ	$0084
(3)   37/    1000 : =$85                 FDRSET            equ	$0085
(3)   38/    1000 : =$86                 FDRCHG            equ	$0086
(3)   39/    1000 : =$87                 CDCSTART          equ	$0087
(3)   40/    1000 : =$88                 CDCSTARTP         equ	$0088
(3)   41/    1000 : =$89                 CDCSTOP           equ	$0089
(3)   42/    1000 : =$8A                 CDCSTAT           equ	$008A
(3)   43/    1000 : =$8B                 CDCREAD           equ	$008B
(3)   44/    1000 : =$8C                 CDCTRN            equ	$008C
(3)   45/    1000 : =$8D                 CDCACK            equ	$008D
(3)   46/    1000 : =$8E                 SCDINIT           equ	$008E
(3)   47/    1000 : =$8F                 SCDSTART          equ	$008F
(3)   48/    1000 : =$90                 SCDSTOP           equ	$0090
(3)   49/    1000 : =$91                 SCDSTAT           equ	$0091
(3)   50/    1000 : =$92                 SCDREAD           equ	$0092
(3)   51/    1000 : =$93                 SCDPQ             equ	$0093
(3)   52/    1000 : =$94                 SCDPQL            equ	$0094
(3)   53/    1000 : =$95                 LEDSET            equ	$0095
(3)   54/    1000 : =$96                 CDCSETMODE        equ	$0096
(3)   55/    1000 : =$97                 WONDERREQ         equ	$0097
(3)   56/    1000 : =$98                 WONDERCHK         equ	$0098
(3)   57/    1000 :                     
(3)   58/    1000 : =$0                  CBTINIT           equ	$0000
(3)   59/    1000 : =$1                  CBTINT            equ	$0001
(3)   60/    1000 : =$2                  CBTOPENDISC       equ	$0002
(3)   61/    1000 : =$3                  CBTOPENSTAT       equ	$0003
(3)   62/    1000 : =$4                  CBTCHKDISC        equ	$0004
(3)   63/    1000 : =$5                  CBTCHKSTAT        equ	$0005
(3)   64/    1000 : =$6                  CBTIPDISC         equ	$0006
(3)   65/    1000 : =$7                  CBTIPSTAT         equ	$0007
(3)   66/    1000 : =$8                  CBTSPDISC         equ	$0008
(3)   67/    1000 : =$9                  CBTSPSTAT         equ	$0009
(3)   68/    1000 :                     
(3)   69/    1000 : =$0                  BRMINIT           equ	$0000
(3)   70/    1000 : =$1                  BRMSTAT           equ	$0001
(3)   71/    1000 : =$2                  BRMSERCH          equ	$0002
(3)   72/    1000 : =$3                  BRMREAD           equ	$0003
(3)   73/    1000 : =$4                  BRMWRITE          equ	$0004
(3)   74/    1000 : =$5                  BRMDEL            equ	$0005
(3)   75/    1000 : =$6                  BRMFORMAT         equ	$0006
(3)   76/    1000 : =$7                  BRMDIR            equ	$0007
(3)   77/    1000 : =$8                  BRMVERIFY         equ	$0008
(3)   78/    1000 :                     
(3)   79/    1000 :                     ;-----------------------------------------------------------------------
(3)   80/    1000 :                     ; BIOS ENTRY POINTS
(3)   81/    1000 :                     ;-----------------------------------------------------------------------
(3)   82/    1000 :                     
(3)   83/    1000 : =$5F40               _ADRERR           equ	$00005F40
(3)   84/    1000 : =$5EA0               _BOOTSTAT         equ	$00005EA0
(3)   85/    1000 : =$5F16               _BURAM            equ	$00005F16
(3)   86/    1000 : =$5F22               _CDBIOS           equ	$00005F22
(3)   87/    1000 : =$5F1C               _CDBOOT           equ	$00005F1C
(3)   88/    1000 : =$5E80               _CDSTAT           equ	$00005E80
(3)   89/    1000 : =$5F52               _CHKERR           equ	$00005F52
(3)   90/    1000 : =$5F46               _CODERR           equ	$00005F46
(3)   91/    1000 : =$5F4C               _DEVERR           equ	$00005F4C
(3)   92/    1000 : =$5F76               _LEVEL1           equ	$00005F76
(3)   93/    1000 : =$5F7C               _LEVEL2           equ	$00005F7C
(3)   94/    1000 : =$5F82               _LEVEL3           equ	$00005F82 ;TIMER INTERRUPT
(3)   95/    1000 : =$5F88               _LEVEL4           equ	$00005F88
(3)   96/    1000 : =$5F8E               _LEVEL5           equ	$00005F8E
(3)   97/    1000 : =$5F94               _LEVEL6           equ	$00005F94
(3)   98/    1000 : =$5F9A               _LEVEL7           equ	$00005F9A
(3)   99/    1000 : =$5F6A               _NOCOD0           equ	$00005F6A
(3)  100/    1000 : =$5F70               _NOCOD1           equ	$00005F70
(3)  101/    1000 : =$5F0A               _SETJMPTBL        equ	$00005F0A
(3)  102/    1000 : =$5F5E               _SPVERR           equ	$00005F5E
(3)  103/    1000 : =$5F64               _TRACE            equ	$00005F64
(3)  104/    1000 : =$5FA0               _TRAP00           equ	$00005FA0
(3)  105/    1000 : =$5FA6               _TRAP01           equ	$00005FA6
(3)  106/    1000 : =$5FAC               _TRAP02           equ	$00005FAC
(3)  107/    1000 : =$5FB2               _TRAP03           equ	$00005FB2
(3)  108/    1000 : =$5FB8               _TRAP04           equ	$00005FB8
(3)  109/    1000 : =$5FBE               _TRAP05           equ	$00005FBE
(3)  110/    1000 : =$5FC4               _TRAP06           equ	$00005FC4
(3)  111/    1000 : =$5FCA               _TRAP07           equ	$00005FCA
(3)  112/    1000 : =$5FD0               _TRAP08           equ	$00005FD0
(3)  113/    1000 : =$5FD6               _TRAP09           equ	$00005FD6
(3)  114/    1000 : =$5FDC               _TRAP10           equ	$00005FDC
(3)  115/    1000 : =$5FE2               _TRAP11           equ	$00005FE2
(3)  116/    1000 : =$5FE8               _TRAP12           equ	$00005FE8
(3)  117/    1000 : =$5FEE               _TRAP13           equ	$00005FEE
(3)  118/    1000 : =$5FF4               _TRAP14           equ	$00005FF4
(3)  119/    1000 : =$5FFA               _TRAP15           equ	$00005FFA
(3)  120/    1000 : =$5F58               _TRPERR           equ	$00005F58
(3)  121/    1000 : =$5F28               _USERCALL0        equ	$00005F28 ;INIT
(3)  122/    1000 : =$5F2E               _USERCALL1        equ	$00005F2E ;MAIN
(3)  123/    1000 : =$5F34               _USERCALL2        equ	$00005F34 ;VINT
(3)  124/    1000 : =$5F3A               _USERCALL3        equ	$00005F3A ;NOT DEFINED
(3)  125/    1000 : =$5EA6               _USERMODE         equ	$00005EA6
(3)  126/    1000 : =$5F10               _WAITVSYNC        equ	$00005F10
(3)  127/    1000 :                     
(2)  104/    1000 :                     
(2)  105/    1000 :                     ; ====================================================================
(2)  106/    1000 :                     ; ----------------------------------------------------------------
(2)  107/    1000 :                     ; MAIN CODE
(2)  108/    1000 :                     ; ----------------------------------------------------------------
(2)  109/    1000 :                     
(2)  110/    6000 :                     		phase $6000
(2)  111/    6000 : 4D41 494E 2D4E      		dc.b "MAIN-NIKONA",0
             6006 : 494B 4F4E 4100    
(2)  112/    600C : 0100 0000           		dc.w $0100,0
(2)  113/    6010 : 0000 0000           		dc.l 0
(2)  114/    6014 : 0000 0000           		dc.l 0
(2)  115/    6018 : 0000 0020           		dc.l $20
(2)  116/    601C : 0000 0000           		dc.l 0
(2)  117/    6020 :                     .table:
(2)  118/    6020 : 000A                		dc.w SCPU_Init-.table
(2)  119/    6022 : 00AE                		dc.w SCPU_Main-.table
(2)  120/    6024 : 008A                		dc.w SCPU_IRQ-.table
(2)  121/    6026 : 00AC                		dc.w SCPU_User-.table
(2)  122/    6028 : 0000                		dc.w 0
(2)  123/    602A :                     
(2)  124/    602A :                     ; ====================================================================
(2)  125/    602A :                     ; ----------------------------------------------------------------
(2)  126/    602A :                     ; Init
(2)  127/    602A :                     ; ----------------------------------------------------------------
(2)  128/    602A :                     
(2)  129/    602A :                     SCPU_Init:
(2)  130/    602A : 08B8 0003 8033      		bclr	#3,(SCPU_reg+$33).w		; Disable Timer interrupt
(2)  131/    6030 : 11FC 0030 8031      		move.b	#$30,(SCPU_reg+$31).w		; Set timer value
(2)  132/    6036 : 23FC 0000 60CA      		move.l	#SCPU_Timer,(_LEVEL3+2).l	; Write LEVEL 3 jump
             603C : 0000 5F84          
(2)  133/    6040 : 23FC 0000 60A4      		move.l	#SCPU_Stamp,(_LEVEL1+2).l	; Write LEVEL 1 jump
             6046 : 0000 5F78          
(2)  134/    604A : 6100 03DC           		bsr	spCdda_ResetVolume		; Reset CDDA Volume
(2)  135/    604E : 6100 0C2E           		bsr	CdSub_PCM_Init			; Init PCM
(2)  136/    6052 : 13FC 0000 FFFF      		move.b	#0,(SCPU_reg+mcd_memory).l	; Reset Memory mode
             6058 : 8003             
(2)  137/    605A : 41F8 7180           		lea	(SCPU_RAM),a0
(2)  138/    605E : 7000                		moveq	#0,d0
(2)  139/    6060 : 323C 3FFF           		move.w	#($10000/4)-1,d1
(2)  140/    6064 : 30C0                .clr_ram:	move.w	d0,(a0)+
(2)  141/    6066 : 51C9 FFFC           		dbf	d1,.clr_ram
(2)  142/    606A : 41FA 0028           		lea	.drv_init(pc),a0
(2)  143/    606E : 303C 0010           		move.w	#DRVINIT,d0
(2)  144/    6072 : 4EB8 5F22           		jsr	_CDBIOS
(2)  145/    6076 : 6100 04BE           		bsr	spInitFS			; Init ISO Filenikona
(2)  146/    607A : 41FA 001A           		lea	.sub_file(pc),a0		; Search and load the PCM samples
(2)  147/    607E : 6100 04F2           		bsr	spSearchFile
(2)  148/    6082 : 41F9 0004 0000      		lea	(SCPU_DATA),a0
(2)  149/    6088 : 6100 0424           		bsr	spReadSectorsN
(2)  150/    608C : 11FC 0000 800F      		move.b	#0,(SCPU_reg+mcd_comm_s).w	; Report we are free.
(2)  151/    6092 :                     ; 		bset	#3,(SCPU_reg+$33).w		; Enable Timer interrupt
(2)  152/    6092 : 4E75                		rts
(2)  153/    6094 :                     
(2)  154/    6094 :                     ; --------------------------------------------------------
(2)  155/    6094 :                     
(2)  156/    6094 : 01FF                .drv_init:	dc.b $01,$FF
(2)  157/    6096 :                     		align 2
(2)  158/    6096 : 4E4B 4E41 5F53      .sub_file:	dc.b "NKNA_SUB.BIN",0
             609C : 5542 2E42 494E 00 
(2)  159/    60A3 :                     		align 2
(2)  160/    60A4 :                     
(2)  161/    60A4 :                     ; =====================================================================
(2)  162/    60A4 :                     ; ----------------------------------------------------------------
(2)  163/    60A4 :                     ; Level 1 IRQ
(2)  164/    60A4 :                     ; ----------------------------------------------------------------
(2)  165/    60A4 :                     
(2)  166/    60A4 :                     SCPU_Stamp:
(2)  167/    60A4 : 4278 7188           		clr.w	(RAM_CdSub_StampBusy).w
(2)  168/    60A8 : 4E73                		rte
(2)  169/    60AA :                     
(2)  170/    60AA :                     ; =====================================================================
(2)  171/    60AA :                     ; ----------------------------------------------------------------
(2)  172/    60AA :                     ; Level 2 IRQ
(2)  173/    60AA :                     ;
(2)  174/    60AA :                     ; WARNING:
(2)  175/    60AA :                     ; The SEGA screen calls this on every frame
(2)  176/    60AA :                     ; ----------------------------------------------------------------
(2)  177/    60AA :                     
(2)  178/    60AA :                     SCPU_IRQ:
(2)  179/    60AA : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Read MAIN comm
(2)  180/    60AE : 0240 00C0           		andi.w	#$C0,d0
(2)  181/    60B2 : 0C40 00C0           		cmpi.w	#$C0,d0
(2)  182/    60B6 : 6606                		bne	.not_sound
(2)  183/    60B8 : 5238 719B           		addq.b	#1,(RAM_CdSub_PcmReqUpd).w
(2)  184/    60BC : 4E75                		rts
(2)  185/    60BE :                     .not_sound:
(2)  186/    60BE : 0C40 0080           		cmpi.w	#$80,d0
(2)  187/    60C2 : 6604                		bne.s	.not_req
(2)  188/    60C4 : 50F8 719C           		st.b	(RAM_CdSub_StampReqUpd).w
(2)  189/    60C8 :                     .not_req:
(2)  190/    60C8 : 4E75                		rts
(2)  191/    60CA :                     
(2)  192/    60CA :                     ; =====================================================================
(2)  193/    60CA :                     ; ----------------------------------------------------------------
(2)  194/    60CA :                     ; Level 3 IRQ
(2)  195/    60CA :                     ; ----------------------------------------------------------------
(2)  196/    60CA :                     
(2)  197/    60CA :                     SCPU_Timer:
(2)  198/    60CA : 4E73                		rte
(2)  199/    60CC :                     
(2)  200/    60CC :                     ; =====================================================================
(2)  201/    60CC :                     ; ----------------------------------------------------------------
(2)  202/    60CC :                     ; User interrupt
(2)  203/    60CC :                     ; ----------------------------------------------------------------
(2)  204/    60CC :                     
(2)  205/    60CC :                     SCPU_User:
(2)  206/    60CC : 4E75                		rts
(2)  207/    60CE :                     
(2)  208/    60CE :                     ; ====================================================================
(2)  209/    60CE :                     ; ----------------------------------------------------------------
(2)  210/    60CE :                     ; Main
(2)  211/    60CE :                     ;
(2)  212/    60CE :                     ; mcd_comm_m READ ONLY: %BBlpiiii
(2)  213/    60CE :                     ; BB | %01 Busy/Lock bit
(2)  214/    60CE :                     ;      %11 GEMA driver: table transfer request from Z80
(2)  215/    60CE :                     ; l  | If BB == %11: transfer LOCK bit
(2)  216/    60CE :                     ; p  | If BB == %11: transfer PASS bit, else: one extra bit for i
(2)  217/    60CE :                     ; i  | Current Sub-Task
(2)  218/    60CE :                     ;
(2)  219/    60CE :                     ; mcd_comm_s READ/WRITE: %Bbsseeee
(2)  220/    60CE :                     ; B | Sub-CPU is busy
(2)  221/    60CE :                     ; b | IRQ entrance
(2)  222/    60CE :                     ; s | Misc. status bits
(2)  223/    60CE :                     ; e | Error flag
(2)  224/    60CE :                     ;
(2)  225/    60CE :                     ; Uses:
(2)  226/    60CE :                     ; ALL
(2)  227/    60CE :                     ; ----------------------------------------------------------------
(2)  228/    60CE :                     
(2)  229/    60CE :                     SCPU_Main:
(2)  230/    60CE : 6100 0C08           		bsr	CdSub_PCM_Process
(2)  231/    60D2 : 6100 04F2           		bsr	CdSub_StampRender
(2)  232/    60D6 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0	; Read MAIN comm
(2)  233/    60DA : 1200                		move.b	d0,d1
(2)  234/    60DC : 0241 00C0           		andi.w	#$C0,d1
(2)  235/    60E0 : 0C01 00C0           		cmpi.b	#$C0,d1				; Middle of IRQ task?
(2)  236/    60E4 : 67E8                		beq.s	SCPU_Main
(2)  237/    60E6 : 0240 001F           		andi.w	#%00011111,d0
(2)  238/    60EA : 67E2                		beq.s	SCPU_Main
(2)  239/    60EC : 08F8 0007 800F      		bset	#7,(SCPU_reg+mcd_comm_s).w	; Tell MAIN we are BUSY
(2)  240/    60F2 : D040                		add.w	d0,d0				; Task index*2
(2)  241/    60F4 : 323B 000E           		move.w	SCPU_cmdlist(pc,d0.w),d1
(2)  242/    60F8 : 4EBB 100A           		jsr	SCPU_cmdlist(pc,d1.w)
(2)  243/    60FC : 08B8 0007 800F      		bclr	#7,(SCPU_reg+mcd_comm_s).w	; Tell MAIN we are done
(2)  244/    6102 : 60CA                		bra	SCPU_Main
(2)  245/    6104 :                     
(2)  246/    6104 :                     ; =====================================================================
(2)  247/    6104 :                     ; ----------------------------------------------------------------
(2)  248/    6104 :                     ; Commands list
(2)  249/    6104 :                     ; ----------------------------------------------------------------
(2)  250/    6104 :                     
(2)  251/    6104 :                     ; Struct
(2)  252/    6104 :                     ; $01-$07: Common data tasks
(2)  253/    6104 :                     ; $08-$0F: BRAM tasks
(2)  254/    6104 :                     ; $10-$17: CDDA Playback control
(2)  255/    6104 :                     ; $18-$1F: Stamps
(2)  256/    6104 :                     
(2)  257/    6104 :                     SCPU_cmdlist:
(2)  258/    6104 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $00 | **INVALID**
(2)  259/    6106 : 0042                		dc.w SubTask_cmnd01-SCPU_cmdlist	; $01 | Read file from disc, copy data through mcd_dcomm_s
(2)  260/    6108 : 00B4                		dc.w SubTask_cmnd02-SCPU_cmdlist	; $02 | Read file from disc, outputs to WORD-RAM
(2)  261/    610A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $03
(2)  262/    610C : 00F4                		dc.w SubTask_cmnd04-SCPU_cmdlist	; $04
(2)  263/    610E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $05
(2)  264/    6110 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $06
(2)  265/    6112 : 0164                		dc.w SubTask_cmnd07-SCPU_cmdlist	; $07 | Set 2M WORD-RAM permission to MAIN
(2)  266/    6114 :                     
(2)  267/    6114 : 0170                		dc.w SubTask_cmnd08-SCPU_cmdlist	; $08 | BRAM support Initialize (MUST CALL FIRST)
(2)  268/    6116 : 01D2                		dc.w SubTask_cmnd09-SCPU_cmdlist	; $09 | BRAM Read data
(2)  269/    6118 : 024A                		dc.w SubTask_cmnd0A-SCPU_cmdlist	; $0A | BRAM Save data
(2)  270/    611A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0B
(2)  271/    611C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0C
(2)  272/    611E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0D
(2)  273/    6120 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0E
(2)  274/    6122 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $0F
(2)  275/    6124 :                     
(2)  276/    6124 : 02E0                		dc.w SubTask_cmnd10-SCPU_cmdlist	; $10 | Play CDDA once
(2)  277/    6126 : 02F6                		dc.w SubTask_cmnd11-SCPU_cmdlist	; $11 | Play CDDA and loop
(2)  278/    6128 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $12 |
(2)  279/    612A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $13 |
(2)  280/    612C : 030C                		dc.w SubTask_cmnd14-SCPU_cmdlist	; $14 | Stop CDDA
(2)  281/    612E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $15 |
(2)  282/    6130 : 0316                		dc.w SubTask_cmnd16-SCPU_cmdlist	; $16 | CDDA fade-out
(2)  283/    6132 : 0324                		dc.w SubTask_cmnd17-SCPU_cmdlist	; $17 | CDDA Reset volumes
(2)  284/    6134 :                     
(2)  285/    6134 : 0346                		dc.w SubTask_cmnd18-SCPU_cmdlist	; $18 | Enable Stamps
(2)  286/    6136 : 037A                		dc.w SubTask_cmnd19-SCPU_cmdlist	; $19 | Disable Stamps
(2)  287/    6138 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1A |
(2)  288/    613A : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1B |
(2)  289/    613C : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1C |
(2)  290/    613E : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1D |
(2)  291/    6140 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1E |
(2)  292/    6142 : 0040                		dc.w SubTask_cmnd00-SCPU_cmdlist	; $1F |
(2)  293/    6144 :                     
(2)  294/    6144 :                     ; =====================================================================
(2)  295/    6144 :                     ; ----------------------------------------------------------------
(2)  296/    6144 :                     ; Commands $01-$0F
(2)  297/    6144 :                     ;
(2)  298/    6144 :                     ; General purpose data transfering
(2)  299/    6144 :                     ; ----------------------------------------------------------------
(2)  300/    6144 :                     
(2)  301/    6144 :                     ; --------------------------------------------------------
(2)  302/    6144 :                     ; NULL COMMAND
(2)  303/    6144 :                     ; --------------------------------------------------------
(2)  304/    6144 :                     
(2)  305/    6144 :                     SubTask_cmnd00:
(2)  306/    6144 : 4E75                		rts
(2)  307/    6146 :                     
(2)  308/    6146 :                     ; --------------------------------------------------------
(2)  309/    6146 :                     ; Command $01
(2)  310/    6146 :                     ;
(2)  311/    6146 :                     ; Read data from disc and transfer the output data
(2)  312/    6146 :                     ; through mcd_dcomm_s as packets of $10 bytes.
(2)  313/    6146 :                     ;
(2)  314/    6146 :                     ; Input:
(2)  315/    6146 :                     ; mcd_comm_m  | %lp------
(2)  316/    6146 :                     ;               l - LOCK bit set by MAIN-CPU
(2)  317/    6146 :                     ;               p - PASS bit
(2)  318/    6146 :                     ; mcd_dcomm_m | "FILENAME.BIN",0
(2)  319/    6146 :                     ;               Filename string 8.3 zero terminated
(2)  320/    6146 :                     ;
(2)  321/    6146 :                     ; Returns:
(2)  322/    6146 :                     ; mcd_comm_s  | %--ep----
(2)  323/    6146 :                     ;               p - SUB-CPU reports that data passed
(2)  324/    6146 :                     ;               e - Flag: 0 - Found file
(2)  325/    6146 :                     ;                         1 - File NOT found
(2)  326/    6146 :                     ; mcd_dcomm_s | $00-$10
(2)  327/    6146 :                     ;               Current data packet.
(2)  328/    6146 :                     ; --------------------------------------------------------
(2)  329/    6146 :                     
(2)  330/    6146 :                     SubTask_cmnd01:
(2)  331/    6146 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - Filename
(2)  332/    614A : 6100 0426           		bsr	spSearchFile
(2)  333/    614E : 6500 028C           		bcs	SubTask_RetErr_NoFile
(2)  334/    6152 : 4A81                		tst.l	d1
(2)  335/    6154 : 6700 0286           		beq	SubTask_RetErr_NoFile
(2)  336/    6158 : 41F9 0000 BC12      		lea	(RAM_CdSub_GotData).l,a0		; Temporal OUTPUT location
(2)  337/    615E : 2F08                		move.l	a0,-(sp)
(2)  338/    6160 : 6100 034C           		bsr	spReadSectorsN
(2)  339/    6164 : 205F                		move.l	(sp)+,a0			; a0 - Read temporal location
(2)  340/    6166 : 45F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a2	; a1 - Output data packets
(2)  341/    616A :                     .next_packet:
(2)  342/    616A : 224A                		move.l	a2,a1
(2)  343/    616C :                     	rept $10/2
(2)  344/    616C :                     		move.w	(a0)+,(a1)+			; WORD writes
(2)  345/    616C :                     	endm
(2)  344/    616C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    616E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6170 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6172 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6174 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6176 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    6178 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  344/    617A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes
(2)  346/    617C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Sub PASS the data.
(2)  347/    6180 : 08C7 0004           		bset	#4,d7
(2)  348/    6184 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  349/    6188 : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Read MAIN comm
(2)  350/    618C : 0807 0007           		btst	#7,d7				; Locked?
(2)  351/    6190 : 671E                		beq.s	.exit_now
(2)  352/    6192 : 0807 0006           		btst	#6,d7				; MAIN got the data?
(2)  353/    6196 : 67F0                		beq.s	.wait_main
(2)  354/    6198 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7	; Clear Sub PASS bit.
(2)  355/    619C : 0887 0004           		bclr	#4,d7
(2)  356/    61A0 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  357/    61A4 : 1E38 800E           .wait_main_o:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN response
(2)  358/    61A8 : 0807 0006           		btst	#6,d7
(2)  359/    61AC : 66F6                		bne.s	.wait_main_o
(2)  360/    61AE : 60BA                		bra.s	.next_packet
(2)  361/    61B0 :                     ; Finished:
(2)  362/    61B0 :                     .exit_now:
(2)  363/    61B0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  364/    61B6 : 4E75                		rts
(2)  365/    61B8 :                     
(2)  366/    61B8 :                     ; --------------------------------------------------------
(2)  367/    61B8 :                     ; Command $02
(2)  368/    61B8 :                     ;
(2)  369/    61B8 :                     ; Read data from disc directly to WORD-RAM,
(2)  370/    61B8 :                     ; REQUIRES THE DMNA BIT TO BE SET BY MAIN-CPU
(2)  371/    61B8 :                     ;
(2)  372/    61B8 :                     ; Input:
(2)  373/    61B8 :                     ; mcd_dcomm_m | $00-$0C - "FILENAME.BIN",0
(2)  374/    61B8 :                     ;             |           Filename string 8.3 incl. zero
(2)  375/    61B8 :                     ;             |
(2)  376/    61B8 :                     ;             | $0D - Destination increment * $800
(2)  377/    61B8 :                     ;             | $0E -
(2)  378/    61B8 :                     ;             | $0F -
(2)  379/    61B8 :                     ;
(2)  380/    61B8 :                     ; Note:
(2)  381/    61B8 :                     ; DO NOT CALL THIS IF STAMPS ARE IN THE MIDDLE
(2)  382/    61B8 :                     ; OF RENDERING
(2)  383/    61B8 :                     ; --------------------------------------------------------
(2)  384/    61B8 :                     
(2)  385/    61B8 :                     SubTask_cmnd02:
(2)  386/    61B8 : 1E39 FFFF 8003      		move.b	(SCPU_reg+mcd_memory).l,d7	; Wait until MAIN sets Word-RAM to SUB. (DMNA)
(2)  387/    61BE : 0807 0001           		btst	#1,d7
(2)  388/    61C2 : 67F4                		beq.s	SubTask_cmnd02
(2)  389/    61C4 :                     
(2)  390/    61C4 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; a0 - filename
(2)  391/    61C8 : 6100 03A8           		bsr	spSearchFile
(2)  392/    61CC : 6500 020E           		bcs	SubTask_RetErr_NoFile
(2)  393/    61D0 : 4A81                		tst.l	d1
(2)  394/    61D2 : 6700 0208           		beq	SubTask_RetErr_NoFile
(2)  395/    61D6 : 41F9 0008 0000      		lea	(SCPU_wram),a0
(2)  396/    61DC : 7E00                		moveq	#0,d7
(2)  397/    61DE : 1E38 801D           		move.b	(SCPU_reg+mcd_dcomm_m+$0D).w,d7
(2)  398/    61E2 : E14F                		lsl.w	#8,d7
(2)  399/    61E4 : E74F                		lsl.w	#3,d7
(2)  400/    61E6 : D1C7                		add.l	d7,a0
(2)  401/    61E8 : 6100 02C4           		bsr	spReadSectorsN
(2)  402/    61EC : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN (RET=1)
             61F2 : 8003             
(2)  403/    61F4 : 67F6                		beq.s	.wait_ret
(2)  404/    61F6 : 4E75                		rts
(2)  405/    61F8 :                     
(2)  406/    61F8 :                     ; --------------------------------------------------------
(2)  407/    61F8 :                     ; Command $04
(2)  408/    61F8 :                     ;
(2)  409/    61F8 :                     ; Transfer memory from MAIN-CPU to SUB-CPU in
(2)  410/    61F8 :                     ; packets of 10-bytes.
(2)  411/    61F8 :                     ;
(2)  412/    61F8 :                     ; Input:
(2)  413/    61F8 :                     ; mcd_comm_m  | %lp------
(2)  414/    61F8 :                     ;               l - LOCK bit
(2)  415/    61F8 :                     ;               p - PASS bit
(2)  416/    61F8 :                     ; mcd_dcomm_m | BEFORE mcd_comm_s returns first PASS:
(2)  417/    61F8 :                     ;               $00-$03    - Output Destination in Sub-CPU
(2)  418/    61F8 :                     ;                         area
(2)  419/    61F8 :                     ;               AFTER mcd_comm_s returns first PASS:
(2)  420/    61F8 :                     ;               $00-$08 - Data packet
(2)  421/    61F8 :                     ;
(2)  422/    61F8 :                     ; Returns:
(2)  423/    61F8 :                     ; mcd_comm_s  | %-------p
(2)  424/    61F8 :                     ;               p - SUB-CPU got the data packet
(2)  425/    61F8 :                     ; --------------------------------------------------------
(2)  426/    61F8 :                     
(2)  427/    61F8 :                     SubTask_cmnd04:
(2)  428/    61F8 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  429/    61FC : 08C7 0004           		bset	#4,d7
(2)  430/    6200 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  431/    6204 :                     .wait_enter:
(2)  432/    6204 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait for MAIN
(2)  433/    6208 : 0807 0007           		btst	#7,d7
(2)  434/    620C : 67F6                		beq.s	.wait_enter
(2)  435/    620E : 45F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a2
(2)  436/    6212 : 3E12                		move.w	(a2),d7				; a1 - Destination
(2)  437/    6214 : 4847                		swap	d7
(2)  438/    6216 : 3E2A 0002           		move.w	2(a2),d7
(2)  439/    621A : 2247                		move.l	d7,a1
(2)  440/    621C : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  441/    6220 : 0887 0004           		bclr	#4,d7
(2)  442/    6224 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  443/    6228 :                     .next_packet:
(2)  444/    6228 : 1E38 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d7
(2)  445/    622C : 0807 0007           		btst	#7,d7
(2)  446/    6230 : 6734                		beq.s	.exit_now
(2)  447/    6232 : 0807 0006           		btst	#6,d7
(2)  448/    6236 : 67F0                		beq.s	.next_packet
(2)  449/    6238 : 204A                		move.l	a2,a0
(2)  450/    623A :                     	rept 8/2
(2)  451/    623A :                     		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  452/    623A :                     	endm
(2)  451/    623A : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    623C : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    623E : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  451/    6240 : 32D8                		move.w	(a0)+,(a1)+			; WORD writes to be safe...
(2)  453/    6242 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  454/    6246 : 08C7 0004           		bset	#4,d7
(2)  455/    624A : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  456/    624E : 1E38 800E           .wait_main:	move.b	(SCPU_reg+mcd_comm_m).w,d7	; Wait MAIN
(2)  457/    6252 : 0807 0006           		btst	#6,d7
(2)  458/    6256 : 66F6                		bne.s	.wait_main
(2)  459/    6258 : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2)  460/    625C : 0887 0004           		bclr	#4,d7
(2)  461/    6260 : 11C7 800F           		move.b	d7,(SCPU_reg+mcd_comm_s).w
(2)  462/    6264 : 60C2                		bra	.next_packet
(2)  463/    6266 :                     .exit_now:
(2)  464/    6266 : 4E75                		rts
(2)  465/    6268 :                     
(2)  466/    6268 :                     ; --------------------------------------------------------
(2)  467/    6268 :                     ; Command $07
(2)  468/    6268 :                     ;
(2)  469/    6268 :                     ; Set Word-RAM permission to MAIN-CPU
(2)  470/    6268 :                     ; --------------------------------------------------------
(2)  471/    6268 :                     
(2)  472/    6268 :                     SubTask_cmnd07:
(2)  473/    6268 : 08F9 0000 FFFF      		bset	#0,(SCPU_reg+mcd_memory).l	; Set WORD-RAM to MAIN, RET=1
             626E : 8003             
(2)  474/    6270 : 67F6                		beq.s	SubTask_cmnd07
(2)  475/    6272 : 4E75                		rts
(2)  476/    6274 :                     
(2)  477/    6274 :                     ; =====================================================================
(2)  478/    6274 :                     ; ----------------------------------------------------------------
(2)  479/    6274 :                     ; Commands $08-$0F
(2)  480/    6274 :                     ;
(2)  481/    6274 :                     ; BRAM Management
(2)  482/    6274 :                     ;
(2)  483/    6274 :                     ; IF using CD32X: RV MUST BE ENABLED
(2)  484/    6274 :                     ; ----------------------------------------------------------------
(2)  485/    6274 :                     
(2)  486/    6274 :                     ; --------------------------------------------------------
(2)  487/    6274 :                     ; Command $08
(2)  488/    6274 :                     ;
(2)  489/    6274 :                     ; Init or check if SAVE file exists
(2)  490/    6274 :                     ;
(2)  491/    6274 :                     ; Input:
(2)  492/    6274 :                     ; mcd_dcomm_m | $00-$0B: dc.b "STR_SAVEDAT",0
(2)  493/    6274 :                     ;             |     $0C: Save Size / $40
(2)  494/    6274 :                     ;             |     $0E: Flags
(2)  495/    6274 :                     ;
(2)  496/    6274 :                     ; Returns:
(2)  497/    6274 :                     ; mcd_dcomm_s | $00.w:  0 | OK
(2)  498/    6274 :                     ;             |        -1 | File not found
(2)  499/    6274 :                     ;             |        -2 | Format error or
(2)  500/    6274 :                     ;             |             No enough space
(2)  501/    6274 :                     ;             | $02.w: Back-up size
(2)  502/    6274 :                     ;             | $04.w: Flags
(2)  503/    6274 :                     ; --------------------------------------------------------
(2)  504/    6274 :                     
(2)  505/    6274 :                     SubTask_cmnd08:
(2)  506/    6274 : 6100 014C           		bsr	SubTsk_BramCall
(2)  507/    6278 : 654E                		bcs	.big_fail
(2)  508/    627A : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0	; Copy Info
(2)  509/    627E : 43F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a1
(2)  510/    6284 : 7E07                		moveq	#($10/2)-1,d7
(2)  511/    6286 :                     .copy_paste:
(2)  512/    6286 : 32D8                		move.w	(a0)+,(a1)+
(2)  513/    6288 : 51CF FFFC           		dbf	d7,.copy_paste
(2)  514/    628C : 43F9 0001 4AE2      		lea	(RAM_CdSub_BramStrings).l,a1	; Get string data
(2)  515/    6292 : 7001                		moveq	#BRMSTAT,d0
(2)  516/    6294 : 4EB8 5F16           		jsr	_BURAM
(2)  517/    6298 : 3E38 801C           		move.w	(SCPU_reg+mcd_dcomm_m+$0C).w,d7
(2)  518/    629C : B047                		cmp.w	d7,d0				; Enough space to save in BRAM?
(2)  519/    629E : 6D28                		blt.s	.big_fail
(2)  520/    62A0 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  521/    62A6 : 303C 0002           		move.w	#BRMSERCH,d0			; Search our file ("SERCH")
(2)  522/    62AA : 4EB8 5F16           		jsr	_BURAM
(2)  523/    62AE : 6500 0124           		bcs	SubTsk_ReturnFail		; If not found return -1
(2)  524/    62B2 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  525/    62B6 : 0241 00FF           		andi.w	#$FF,d1
(2)  526/    62BA : 3CBC 0000           		move.w	#0,(a6)				; Report OK
(2)  527/    62BE : 3D40 0002           		move.w	d0,2(a6)			; Number of blocks of this save
(2)  528/    62C2 : 3D41 0004           		move.w	d1,4(a6)			; Mode: 0=normal -1=Protected
(2)  529/    62C6 : 4E75                		rts
(2)  530/    62C8 :                     
(2)  531/    62C8 :                     ; No RAM / No Format
(2)  532/    62C8 :                     .big_fail:
(2)  533/    62C8 : 4DF8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a6
(2)  534/    62CC : 3CBC FFFE           		move.w	#-2,(a6)			; Report FAIL
(2)  535/    62D0 : 3D40 0002           		move.w	d0,2(a6)			; Number of block of this save
(2)  536/    62D4 : 4E75                		rts
(2)  537/    62D6 :                     
(2)  538/    62D6 :                     ; --------------------------------------------------------
(2)  539/    62D6 :                     ; Command $09
(2)  540/    62D6 :                     ;
(2)  541/    62D6 :                     ; READ Save data
(2)  542/    62D6 :                     ;
(2)  543/    62D6 :                     ; Uses:
(2)  544/    62D6 :                     ; mcd_comm_m  | bits 7 and 4
(2)  545/    62D6 :                     ; mcd_comm_s  | bit 4
(2)  546/    62D6 :                     ; mcd_dcomm_s | Data packets to send
(2)  547/    62D6 :                     ;
(2)  548/    62D6 :                     ; Returns:
(2)  549/    62D6 :                     ; mcd_dcomm_s | $00.w:
(2)  550/    62D6 :                     ;             |  0 - OK
(2)  551/    62D6 :                     ;             | -1 - Not found / Fatal error
(2)  552/    62D6 :                     ;             | ** Overwriten later on
(2)  553/    62D6 :                     ; --------------------------------------------------------
(2)  554/    62D6 :                     
(2)  555/    62D6 :                     SubTask_cmnd09:
(2)  556/    62D6 : 31FC 0000 8020      		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  557/    62DC : 6100 00E4           		bsr	SubTsk_BramCall
(2)  558/    62E0 : 6500 00F2           		bcs	SubTsk_ReturnFail
(2)  559/    62E4 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  560/    62EA : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  561/    62F0 : 7200                		moveq	#0,d1
(2)  562/    62F2 : 303C 0003           		move.w	#BRMREAD,d0
(2)  563/    62F6 : 4EB8 5F16           		jsr	_BURAM
(2)  564/    62FA : 6500 00D8           		bcs	SubTsk_ReturnFail
(2)  565/    62FE : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clear SIGNAL
(2)  566/    6304 : 0838 0004 800E      .wait_lock:	btst	#4,(SCPU_reg+mcd_comm_m).w	; Wait LOCK
(2)  567/    630A : 66F8                		bne.s	.wait_lock
(2)  568/    630C : 41F8 8020           		lea	(SCPU_reg+mcd_dcomm_s).w,a0
(2)  569/    6310 : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  570/    6316 : 303C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d0
(2)  571/    631A : 2448                .send_data:	move.l	a0,a2
(2)  572/    631C : 34D9                		move.w	(a1)+,(a2)+
(2)  573/    631E : 34D9                		move.w	(a1)+,(a2)+
(2)  574/    6320 : 34D9                		move.w	(a1)+,(a2)+
(2)  575/    6322 : 34D9                		move.w	(a1)+,(a2)+
(2)  576/    6324 : 34D9                		move.w	(a1)+,(a2)+
(2)  577/    6326 : 34D9                		move.w	(a1)+,(a2)+
(2)  578/    6328 : 34D9                		move.w	(a1)+,(a2)+
(2)  579/    632A : 34D9                		move.w	(a1)+,(a2)+
(2)  580/    632C : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2)  581/    6332 : 0838 0004 800E      .wait_signi:	btst	#4,(SCPU_reg+mcd_comm_m).w
(2)  582/    6338 : 67F8                		beq.s	.wait_signi
(2)  583/    633A : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2)  584/    6340 : 0838 0004 800E      .wait_signo:	btst	#4,(SCPU_reg+mcd_comm_m).w
(2)  585/    6346 : 66F8                		bne.s	.wait_signo
(2)  586/    6348 : 51C8 FFD0           		dbf	d0,.send_data
(2)  587/    634C : 4E75                		rts
(2)  588/    634E :                     
(2)  589/    634E :                     ; --------------------------------------------------------
(2)  590/    634E :                     ; Command $0A
(2)  591/    634E :                     ;
(2)  592/    634E :                     ; WRITE Save data
(2)  593/    634E :                     ;
(2)  594/    634E :                     ; Uses:
(2)  595/    634E :                     ; mcd_comm_m  | bits 7 and 4
(2)  596/    634E :                     ; mcd_comm_s  | bit 4
(2)  597/    634E :                     ; mcd_dcomm_m | Data packets to recieve
(2)  598/    634E :                     ;
(2)  599/    634E :                     ; Returns:
(2)  600/    634E :                     ; mcd_dcomm_s | $00.w:
(2)  601/    634E :                     ;             |  0 - OK
(2)  602/    634E :                     ;             | -1 - Not found
(2)  603/    634E :                     ; --------------------------------------------------------
(2)  604/    634E :                     
(2)  605/    634E :                     SubTask_cmnd0A:
(2)  606/    634E : 31FC 0000 8020      		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  607/    6354 : 616C                		bsr	SubTsk_BramCall
(2)  608/    6356 : 657C                		bcs	SubTsk_ReturnFail
(2)  609/    6358 :                     
(2)  610/    6358 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clean SIGNAL
(2)  611/    635E : 0838 0007 800E      .wait_lock:	btst	#7,(SCPU_reg+mcd_comm_m).w	; Wait LOCK
(2)  612/    6364 : 67F8                		beq.s	.wait_lock
(2)  613/    6366 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  614/    636A : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  615/    6370 : 0838 0007 800E      .main_loop:	btst	#7,(SCPU_reg+mcd_comm_m).w	; LOCKED?
(2)  616/    6376 : 6730                		beq.s	.exit_now
(2)  617/    6378 : 0838 0004 800E      		btst	#4,(SCPU_reg+mcd_comm_m).w	; PASS?
(2)  618/    637E : 67F0                		beq.s	.main_loop
(2)  619/    6380 : 2448                		move.l	a0,a2
(2)  620/    6382 : 32DA                		move.w	(a2)+,(a1)+
(2)  621/    6384 : 32DA                		move.w	(a2)+,(a1)+
(2)  622/    6386 : 32DA                		move.w	(a2)+,(a1)+
(2)  623/    6388 : 32DA                		move.w	(a2)+,(a1)+
(2)  624/    638A : 32DA                		move.w	(a2)+,(a1)+
(2)  625/    638C : 32DA                		move.w	(a2)+,(a1)+
(2)  626/    638E : 32DA                		move.w	(a2)+,(a1)+
(2)  627/    6390 : 32DA                		move.w	(a2)+,(a1)+
(2)  628/    6392 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w	; Set SIGNAL
(2)  629/    6398 : 0838 0004 800E      .wait_pass:	btst	#4,(SCPU_reg+mcd_comm_m).w	; Wait PASS clear
(2)  630/    639E : 66F8                		bne.s	.wait_pass
(2)  631/    63A0 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w	; Clear SIGNAL
(2)  632/    63A6 : 60C8                		bra.s	.main_loop
(2)  633/    63A8 :                     .exit_now:
(2)  634/    63A8 : 41F9 0001 4492      		lea	(RAM_CdSub_CurrSaveInfo).l,a0
(2)  635/    63AE : 43F9 0001 4AEE      		lea	(RAM_CdSub_SramCopy).l,a1
(2)  636/    63B4 : 7200                		moveq	#0,d1
(2)  637/    63B6 : 303C 0004           		move.w	#BRMWRITE,d0
(2)  638/    63BA : 4EB8 5F16           		jsr	_BURAM
(2)  639/    63BE : 6514                		bcs	SubTsk_ReturnFail
(2)  640/    63C0 : 4E75                		rts
(2)  641/    63C2 :                     
(2)  642/    63C2 :                     ; --------------------------------------------------------
(2)  643/    63C2 :                     
(2)  644/    63C2 :                     SubTsk_BramCall:
(2)  645/    63C2 : 41F9 0001 44A2      		lea	(RAM_CdSub_BramWork).l,a0
(2)  646/    63C8 : 43F9 0001 4AE2      		lea	(RAM_CdSub_BramStrings).l,a1
(2)  647/    63CE : 7000                		moveq	#BRMINIT,d0
(2)  648/    63D0 : 4EF8 5F16           		jmp	_BURAM
(2)  649/    63D4 :                     
(2)  650/    63D4 :                     SubTsk_ReturnFail:
(2)  651/    63D4 : 31FC FFFF 8020      		move.w	#-1,(SCPU_reg+mcd_dcomm_s).w
(2)  652/    63DA : 4E75                		rts
(2)  653/    63DC :                     ; SubTsk_ReturnOk:
(2)  654/    63DC :                     ; 		move.w	#0,(SCPU_reg+mcd_dcomm_s).w
(2)  655/    63DC :                     ; 		rts
(2)  656/    63DC :                     
(2)  657/    63DC :                     SubTask_RetErr_NoFile:
(2)  658/    63DC : 11FC 0001 800F      		move.b	#%00000001,(SCPU_reg+mcd_comm_s).w	; SET ERROR %0001
(2)  659/    63E2 :                     ; 	; *** REMOVE THIS ON RELEASE ***
(2)  660/    63E2 :                     ; 		move.w	#4,d1					; READY off | ACCESS blink
(2)  661/    63E2 :                     ; 		move.w	#LEDSET,d0
(2)  662/    63E2 :                     ; 		jmp	(_CDBIOS).w
(2)  663/    63E2 :                     ; 	; ***
(2)  664/    63E2 : 4E75                		rts
(2)  665/    63E4 :                     
(2)  666/    63E4 :                     ; =====================================================================
(2)  667/    63E4 :                     ; ----------------------------------------------------------------
(2)  668/    63E4 :                     ; Commands $10-$17
(2)  669/    63E4 :                     ;
(2)  670/    63E4 :                     ; CDDA
(2)  671/    63E4 :                     ; ----------------------------------------------------------------
(2)  672/    63E4 :                     
(2)  673/    63E4 :                     ; --------------------------------------------------------
(2)  674/    63E4 :                     ; Command $10
(2)  675/    63E4 :                     ;
(2)  676/    63E4 :                     ; Play CDDA Track, stops on finish.
(2)  677/    63E4 :                     ;
(2)  678/    63E4 :                     ; Input:
(2)  679/    63E4 :                     ; mcd_dcomm_m | dc.w track_num
(2)  680/    63E4 :                     ;               - DO NOT USE TRACK 1
(2)  681/    63E4 :                     ;               - TRACK 0 IS INVALID
(2)  682/    63E4 :                     ; --------------------------------------------------------
(2)  683/    63E4 :                     
(2)  684/    63E4 :                     SubTask_cmnd10:
(2)  685/    63E4 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  686/    63E8 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  687/    63EC : 613A                		bsr	spCdda_ResetVolume
(2)  688/    63EE : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  689/    63F2 : 303C 0012           		move.w	#MSCPLAY1,d0
(2)  690/    63F6 : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  691/    63FA :                     
(2)  692/    63FA :                     ; --------------------------------------------------------
(2)  693/    63FA :                     ; Command $11
(2)  694/    63FA :                     ;
(2)  695/    63FA :                     ; Play CDDA Track, loops indefiniely.
(2)  696/    63FA :                     ;
(2)  697/    63FA :                     ; Input:
(2)  698/    63FA :                     ; mcd_dcomm_m | dc.w track_num
(2)  699/    63FA :                     ;               - DO NOT USE TRACK 1
(2)  700/    63FA :                     ;               - TRACK 0 IS INVALID
(2)  701/    63FA :                     ; --------------------------------------------------------
(2)  702/    63FA :                     
(2)  703/    63FA :                     SubTask_cmnd11:
(2)  704/    63FA : 303C 0002           		move.w	#MSCSTOP,d0
(2)  705/    63FE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  706/    6402 : 6124                		bsr	spCdda_ResetVolume
(2)  707/    6404 : 41F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a0
(2)  708/    6408 : 303C 0013           		move.w	#MSCPLAYR,d0
(2)  709/    640C : 4EF8 5F22           		jmp	(_CDBIOS).w
(2)  710/    6410 :                     
(2)  711/    6410 :                     ; --------------------------------------------------------
(2)  712/    6410 :                     ; Command $14
(2)  713/    6410 :                     ;
(2)  714/    6410 :                     ; Stop CDDA Track
(2)  715/    6410 :                     ; --------------------------------------------------------
(2)  716/    6410 :                     
(2)  717/    6410 :                     SubTask_cmnd14:
(2)  718/    6410 : 303C 0002           		move.w	#MSCSTOP,d0
(2)  719/    6414 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  720/    6418 : 600E                		bra	spCdda_ResetVolume
(2)  721/    641A :                     
(2)  722/    641A :                     ; --------------------------------------------------------
(2)  723/    641A :                     ; Command $16
(2)  724/    641A :                     ;
(2)  725/    641A :                     ; Fade-out/Fade-in CD Volume
(2)  726/    641A :                     ;
(2)  727/    641A :                     ; Input:
(2)  728/    641A :                     ; mcd_dcomm_m | dc.w target_vol,fade_speed
(2)  729/    641A :                     ;               - Target volume: $000-$400 Max-Min
(2)  730/    641A :                     ;               - Fade Speed:    $001-$200 Slow-Fast
(2)  731/    641A :                     ;                                     $400 Set once
(2)  732/    641A :                     ; --------------------------------------------------------
(2)  733/    641A :                     
(2)  734/    641A :                     SubTask_cmnd16:
(2)  735/    641A : 2238 8010           		move.l	(SCPU_reg+mcd_dcomm_m).w,d1
(2)  736/    641E : 303C 0086           		move.w	#FDRCHG,d0
(2)  737/    6422 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  738/    6426 : 4E75                		rts
(2)  739/    6428 :                     
(2)  740/    6428 :                     ; --------------------------------------------------------
(2)  741/    6428 :                     ; Command $17
(2)  742/    6428 :                     ;
(2)  743/    6428 :                     ; CDDA Fade-out
(2)  744/    6428 :                     ; --------------------------------------------------------
(2)  745/    6428 :                     
(2)  746/    6428 :                     SubTask_cmnd17:
(2)  747/    6428 :                     ; 		move.l	#$0380,d1
(2)  748/    6428 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  749/    6428 :                     ; 		jsr	(_CDBIOS).w
(2)  750/    6428 :                     ; 		move.l	#$0380|$8000,d1
(2)  751/    6428 :                     ; 		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  752/    6428 :                     ; 		jsr	(_CDBIOS).w
(2)  753/    6428 :                     ; 		rts
(2)  754/    6428 :                     
(2)  755/    6428 :                     ; --------------------------------------------------------
(2)  756/    6428 :                     ; CDDA subroutines:
(2)  757/    6428 :                     
(2)  758/    6428 :                     spCdda_ResetVolume:
(2)  759/    6428 : 48E7 C0C0           		movem.l	d0-d1/a0-a1,-(sp)
(2)  760/    642C : 323C 0400           		move.w	#$0400,d1
(2)  761/    6430 : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music volume
(2)  762/    6434 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  763/    6438 : 323C 8400           		move.w	#$0400|$8000,d1
(2)  764/    643C : 303C 0085           		move.w	#FDRSET,d0			; Set CDDA music master volume
(2)  765/    6440 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  766/    6444 : 4CDF 0303           		movem.l	(sp)+,d0-d1/a0-a1
(2)  767/    6448 : 4E75                		rts
(2)  768/    644A :                     
(2)  769/    644A :                     ; =====================================================================
(2)  770/    644A :                     ; ----------------------------------------------------------------
(2)  771/    644A :                     ; Commands $18-$1F
(2)  772/    644A :                     ;
(2)  773/    644A :                     ; Stamp rendering
(2)  774/    644A :                     ; ----------------------------------------------------------------
(2)  775/    644A :                     
(2)  776/    644A :                     ; --------------------------------------------------------
(2)  777/    644A :                     ; Command $18
(2)  778/    644A :                     ;
(2)  779/    644A :                     ; Init/Enable Stamps
(2)  780/    644A :                     ;
(2)  781/    644A :                     ; Input:
(2)  782/    644A :                     ; mcd_dcomm_m | dc.w width,height
(2)  783/    644A :                     ;               - Stamp Dot-Screen Width
(2)  784/    644A :                     ;               - Stamp Dot-Screen Height
(2)  785/    644A :                     ; --------------------------------------------------------
(2)  786/    644A :                     
(2)  787/    644A :                     SubTask_cmnd18:
(2)  788/    644A : 43F8 8010           		lea	(SCPU_reg+mcd_dcomm_m).w,a1
(2)  789/    644E : 3011                		move.w	(a1),d0
(2)  790/    6450 : 3229 0002           		move.w	2(a1),d1
(2)  791/    6454 : 31C0 7182           		move.w	d0,(RAM_CdSub_StampW).w
(2)  792/    6458 : 31C1 7184           		move.w	d1,(RAM_CdSub_StampH).w
(2)  793/    645C : 31FC 0000 718A      		move.w	#%000,(RAM_CdSub_StampSize).w	; Stamp type/size: 1x1 screen | 16x16 dot | RPT
(2)  794/    6462 : 6100 07F4           		bsr	CdSub_StampResetVcell
(2)  795/    6466 : 6100 07FC           		bsr	CdSub_StampDefaults
(2)  796/    646A : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  797/    6470 : 31FC 0001 7186      		move.w	#1,(RAM_CdSub_StampEnbl).w	; Enable Stamp rendering
(2)  798/    6476 : 08F8 0001 8033      		bset	#1,(SCPU_reg+$33).w
(2)  799/    647C : 4E75                		rts
(2)  800/    647E :                     
(2)  801/    647E :                     ; --------------------------------------------------------
(2)  802/    647E :                     ; Command $19
(2)  803/    647E :                     ;
(2)  804/    647E :                     ; Disable Stamps, DMNA must bet set.
(2)  805/    647E :                     ; --------------------------------------------------------
(2)  806/    647E :                     
(2)  807/    647E :                     SubTask_cmnd19:
(2)  808/    647E : 08B8 0001 8033      		bclr	#1,(SCPU_reg+$33).w
(2)  809/    6484 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2)  810/    6488 : 0207 0007            		andi.b	#%00111,d7
(2)  811/    648C : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w		; Restore WRAM write mode
(2)  812/    6490 : 33FC 0000 000B      		move.w	#0,(SCPU_wram+WRAM_StampCurrFlip).l
             6496 : BFFE             
(2)  813/    6498 : 31FC 0000 7186      		move.w	#0,(RAM_CdSub_StampEnbl).w		; Disable Stamp rendering
(2)  814/    649E : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2)  815/    64A4 : 08F8 0000 8003      .set_ret:	bset	#0,(SCPU_reg+mcd_memory).w
(2)  816/    64AA : 67F8                		beq.s	.set_ret
(2)  817/    64AC : 4E75                		rts
(2)  818/    64AE :                     
(2)  819/    64AE :                     ; =====================================================================
(2)  820/    64AE :                     ; ----------------------------------------------------------------
(2)  821/    64AE :                     ; Subroutines
(2)  822/    64AE :                     ; ----------------------------------------------------------------
(2)  823/    64AE :                     
(2)  824/    64AE :                     ; --------------------------------------------------------
(2)  825/    64AE :                     ; CD-ROM data
(2)  826/    64AE :                     ; --------------------------------------------------------
(2)  827/    64AE :                     
(2)  828/    64AE :                     ; ------------------------------------------------
(2)  829/    64AE :                     ; spReadSectorsN
(2)  830/    64AE :                     ;
(2)  831/    64AE :                     ; Input:
(2)  832/    64AE :                     ; a0 - Destination
(2)  833/    64AE :                     ; d0 - Sector start
(2)  834/    64AE :                     ; d1 - Number of sectors
(2)  835/    64AE :                     ; ------------------------------------------------
(2)  836/    64AE :                     
(2)  837/    64AE :                     spReadSectorsN:
(2)  838/    64AE : 4BF9 0001 4412      		lea	(RAM_CdSub_FsBuff).l,a5
(2)  839/    64B4 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(2)  840/    64BA : 0281 0000 FFFF      		andi.l	#$FFFF,d1
(2)  841/    64C0 : 2A80                		move.l	d0,(a5)
(2)  842/    64C2 : 2B41 0004           		move.l	d1,4(a5)
(2)  843/    64C6 : 2B48 0008           		move.l	a0,8(a5)
(2)  844/    64CA : 11FC 0003 8004      		move.b	#%011,(SCPU_reg+4).w		; Set CDC device to "Sub CPU"
(2)  845/    64D0 : 303C 0089           		move.w	#CDCSTOP,d0			; Stop CDC
(2)  846/    64D4 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  847/    64D8 : 204D                		move.l	a5,a0
(2)  848/    64DA : 303C 0020           		move.w	#ROMREADN,d0			; Read sector by count
(2)  849/    64DE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  850/    64E2 :                     .wait_STAT:
(2)  851/    64E2 : 2F0D                		move.l	a5,-(sp)
(2)  852/    64E4 : 6100 07F2           		bsr	CdSub_PCM_Process
(2)  853/    64E8 : 2A5F                		move.l	(sp)+,a5
(2)  854/    64EA : 303C 008A           		move.w	#CDCSTAT,d0			; Get CDC Status
(2)  855/    64EE : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  856/    64F2 : 65EE                 		bcs.s	.wait_STAT
(2)  857/    64F4 :                     .wait_READ:
(2)  858/    64F4 : 2F0D                		move.l	a5,-(sp)
(2)  859/    64F6 : 6100 07E0           		bsr	CdSub_PCM_Process
(2)  860/    64FA : 2A5F                		move.l	(sp)+,a5
(2)  861/    64FC : 303C 008B           		move.w	#CDCREAD,d0			; CDC Read mode
(2)  862/    6500 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  863/    6504 : 65EE                		bcs.s	.wait_READ
(2)  864/    6506 : 2B40 0010           		move.l	d0,$10(a5)
(2)  865/    650A :                     .WaitTransfer:
(2)  866/    650A : 206D 0008           		movea.l	8(a5),a0			; a0 - DATA Destination
(2)  867/    650E : 43ED 0010           		lea	$10(a5),a1			; a1 - HEADER out
(2)  868/    6512 : 303C 008C           		move.w	#CDCTRN,d0			; CDC Transfer data
(2)  869/    6516 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  870/    651A : 65EE                		bcs.s	.waitTransfer
(2)  871/    651C : 303C 008D           		move.w	#CDCACK,d0			; Finish read
(2)  872/    6520 : 4EB8 5F22           		jsr	(_CDBIOS).w
(2)  873/    6524 : 06AD 0000 0800      		addi.l	#$800,8(a5)
             652A : 0008             
(2)  874/    652C : 5295                		addq.l	#1,(a5)
(2)  875/    652E : 53AD 0004           		subq.l	#1,4(a5)
(2)  876/    6532 : 66AE                		bne.s	.wait_STAT
(2)  877/    6534 : 4E75                		rts
(2)  878/    6536 :                     
(2)  879/    6536 :                     ; ------------------------------------------------
(2)  880/    6536 :                     ; ISO9660 Driver
(2)  881/    6536 :                     ; ------------------------------------------------
(2)  882/    6536 :                     
(2)  883/    6536 :                     spInitFS:
(2)  884/    6536 : 48E7 FFFE           		movem.l	d0-d7/a0-a6,-(a7)
(2)  885/    653A : 7010                		moveq	#$10,d0			; Read sector number $10 (At $8000)
(2)  886/    653C : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  887/    653E : 41F9 0000 7412      		lea	(RAM_CdSub_IsoFiles).l,a0
(2)  888/    6544 : 2F08                		move.l	a0,-(sp)
(2)  889/    6546 : 6100 FF66           		bsr	spReadSectorsN
(2)  890/    654A : 205F                		move.l	(sp)+,a0		; Now use the actual output
(2)  891/    654C : 43E8 009C           		lea	$9C(a0),a1
(2)  892/    6550 : 1029 0006           		move.b	6(a1),d0		; Read sector where filelist is located.
(2)  893/    6554 : E188                		lsl.l	#8,d0
(2)  894/    6556 : 1029 0007           		move.b	7(a1),d0
(2)  895/    655A : E188                		lsl.l	#8,d0
(2)  896/    655C : 1029 0008           		move.b	8(a1),d0
(2)  897/    6560 : E188                		lsl.l	#8,d0
(2)  898/    6562 : 1029 0009           		move.b	9(a1),d0
(2)  899/    6566 : 7208                		moveq	#8,d1			; Read 8 sectors
(2)  900/    6568 : 6100 FF44           		bsr	spReadSectorsN
(2)  901/    656C : 4CDF 7FFF           		movem.l	(a7)+,d0-d7/a0-a6
(2)  902/    6570 : 4E75                		rts
(2)  903/    6572 :                     
(2)  904/    6572 :                     ; --------------------------------------------------------
(2)  905/    6572 :                     ; spSearchFile
(2)  906/    6572 :                     ;
(2)  907/    6572 :                     ; Search a file on the disc
(2)  908/    6572 :                     ; FILELIST MUST BE LOADED WITH spInitFS ON INIT.
(2)  909/    6572 :                     ;
(2)  910/    6572 :                     ; Input:
(2)  911/    6572 :                     ; a0   | Filename string with zero termination
(2)  912/    6572 :                     ;
(2)  913/    6572 :                     ; Returns:
(2)  914/    6572 :                     ; bcs  | File NOT found / error
(2)  915/    6572 :                     ; bcc  | File found
(2)  916/    6572 :                     ;
(2)  917/    6572 :                     ; bcc:
(2)  918/    6572 :                     ; d0.l | Start sector
(2)  919/    6572 :                     ; d1.l | Number of sectors
(2)  920/    6572 :                     ; d2.l | Filesize
(2)  921/    6572 :                     ;
(2)  922/    6572 :                     ; Breaks:
(2)  923/    6572 :                     ; d4-d7,a6
(2)  924/    6572 :                     ; --------------------------------------------------------
(2)  925/    6572 :                     
(2)  926/    6572 :                     spSearchFile:
(2)  927/    6572 : 49F9 0000 7412      		lea	(RAM_CdSub_IsoFiles).l,a4	; a4 - Root filelist
(2)  928/    6578 : 7000                		moveq	#0,d0
(2)  929/    657A : 7200                		moveq	#0,d1
(2)  930/    657C : 7400                		moveq	#0,d2
(2)  931/    657E :                     .next_file:
(2)  932/    657E : 1E14                		move.b	(a4),d7			; d7 - Block size
(2)  933/    6580 : 673E                		beq.s	.failed_srch
(2)  934/    6582 : 0247 00FF           		andi.w	#$FF,d7
(2)  935/    6586 : 264C                		move.l	a4,a3			; a3 - Current file block
(2)  936/    6588 : D6FC 0019           		adda	#$19,a3			; Go to flags
(2)  937/    658C : 1C13                		move.b	(a3),d6
(2)  938/    658E : 6618                		bne.s	.non_file		; $00: iso_file, non-Zero: iso_setfs
(2)  939/    6590 : D6FC 0007           		adda	#$07,a3			; Go to Filename string
(2)  940/    6594 : 7C00                		moveq	#0,d6
(2)  941/    6596 : 1C1B                		move.b	(a3)+,d6
(2)  942/    6598 : 5946                		subq.w	#3+1,d6
(2)  943/    659A : 2448                		move.l	a0,a2			; a2 - string to seach for
(2)  944/    659C :                     .chk_str:
(2)  945/    659C : 1A1B                		move.b	(a3)+,d5
(2)  946/    659E : BA1A                		cmp.b	(a2)+,d5
(2)  947/    65A0 : 6606                		bne.s	.non_file
(2)  948/    65A2 : 51CE FFF8           		dbf	d6,.chk_str
(2)  949/    65A6 : 6004                		bra.s	.found_file
(2)  950/    65A8 :                     .non_file:
(2)  951/    65A8 : D8C7                		adda	d7,a4			; Next block
(2)  952/    65AA : 60D2                		bra.s	.next_file
(2)  953/    65AC :                     .found_file:
(2)  954/    65AC : 202C 0006           		move.l	$06(a4),d0		; d0 - Sector position
(2)  955/    65B0 : 222C 000E           		move.l	$0E(a4),d1		; d1 - Number of sectors
(2)  956/    65B4 : 2401                		move.l	d1,d2			; d2 - ORIGINAL filesize
(2)  957/    65B6 : E089                		lsr.l	#8,d1			; bitshift d1
(2)  958/    65B8 : E689                		lsr.l	#3,d1
(2)  959/    65BA : 44FC 0000           		move	#0,ccr
(2)  960/    65BE : 4E75                		rts
(2)  961/    65C0 :                     .failed_srch:
(2)  962/    65C0 : 44FC 0001           		move	#1,ccr
(2)  963/    65C4 : 4E75                		rts
(2)  964/    65C6 :                     
(2)  965/    65C6 :                     ; =====================================================================
(2)  966/    65C6 :                     ; ----------------------------------------------------------------
(2)  967/    65C6 :                     ; Stamps rendering
(2)  968/    65C6 :                     ; ----------------------------------------------------------------
(2)  969/    65C6 :                     
(2)  970/    65C6 :                     CdSub_StampRender:
(2)  971/    65C6 : 3E38 7186           		move.w	(RAM_CdSub_StampEnbl).w,d7	; Stamp rendering enabled?
(2)  972/    65CA : 6700 00AA           		beq	.exit_render
(2)  973/    65CE : 0839 0001 FFFF      		btst	#1,(SCPU_reg+mcd_memory).l	; Word-RAM allowed (DMNA)?
             65D4 : 8003             
(2)  974/    65D6 : 6700 009E           		beq	.exit_render
(2)  975/    65DA :                     ; 		bset	#7,(SCPU_reg+mcd_comm_s).w
(2)  976/    65DA : 4A38 719C           		tst.b	(RAM_CdSub_StampReqUpd).w	; MAIN wants WRAM?
(2)  977/    65DE : 671A                		beq	.no_break
(2)  978/    65E0 : 4238 719C           		clr.b	(RAM_CdSub_StampReqUpd).w
(2)  979/    65E4 :                     .wait_done:
(2)  980/    65E4 : 6100 06F2           		bsr	CdSub_PCM_Process
(2)  981/    65E8 : 1E38 8058           		move.b	($FFFF8058).w,d7
(2)  982/    65EC : 6BF6                		bmi.s	.wait_done
(2)  983/    65EE :                     ; 		bset	#3,(SCPU_reg+mcd_comm_s).w
(2)  984/    65EE :                     ; 		tst.b	(RAM_CdSub_StampBusy).w
(2)  985/    65EE :                     ; 		bne.s	.wait_done
(2)  986/    65EE : 08F9 0000 FFFF      .wait_ret:	bset	#0,(SCPU_reg+mcd_memory).l	; Return Word-RAM to MAIN
             65F4 : 8003             
(2)  987/    65F6 : 67F6                		beq.s	.wait_ret
(2)  988/    65F8 : 607C                		bra	.exit_render			; Exit
(2)  989/    65FA :                     .no_break:
(2)  990/    65FA :                     
(2)  991/    65FA :                     ; ----------------------------------------
(2)  992/    65FA :                     ; Genesis request
(2)  993/    65FA :                     ; ----------------------------------------
(2)  994/    65FA :                     
(2)  995/    65FA : 3E39 000B BFFE      		move.w	(SCPU_wram+WRAM_StampCurrFlip).l,d7
(2)  996/    6600 : 3C38 7194           		move.w	(RAM_CdSub_StampCBuff).w,d6
(2)  997/    6604 : BE46                		cmp.w	d6,d7
(2)  998/    6606 : 6726                		beq	.flip_turn
(2)  999/    6608 : 31C7 7194           		move.w	d7,(RAM_CdSub_StampCBuff).w
(2) 1000/    660C :                     ; 		move.w	#0,(SCPU_wram+WRAM_StampsDone).l
(2) 1001/    660C :                     ; 		bclr	#3,(SCPU_reg+mcd_comm_s).w
(2) 1002/    660C : 6100 06CA           		bsr	CdSub_PCM_Process
(2) 1003/    6610 : 6168                		bsr	.make_list
(2) 1004/    6612 : 6100 06C4           		bsr	CdSub_PCM_Process
(2) 1005/    6616 : 6100 00BE           		bsr	.trace_blank
(2) 1006/    661A : 31FC 0000 718E      		move.w	#0,(RAM_CdSub_StampNextRd).w		; Start the engine
(2) 1007/    6620 : 31FC 0780 718C      		move.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1008/    6626 : 50F8 7190           		st.b	(RAM_CdSub_DotClearFlag).w
(2) 1009/    662A : 6100 06AC           		bsr	CdSub_PCM_Process
(2) 1010/    662E :                     .flip_turn:
(2) 1011/    662E :                     
(2) 1012/    662E :                     ; ----------------------------------------
(2) 1013/    662E :                     ; Main engine
(2) 1014/    662E :                     ; ----------------------------------------
(2) 1015/    662E :                     
(2) 1016/    662E :                     ; 		move.w	(SCPU_wram+WRAM_StampsDone).l,d7
(2) 1017/    662E : 1E38 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d7
(2) 1018/    6632 : 0807 0003           		btst	#3,d7
(2) 1019/    6636 : 6620                		bne	.return_ret
(2) 1020/    6638 :                     ; 		move.b	($FFFF8058).w,d7
(2) 1021/    6638 :                     ; 		bmi.s	.exit_render
(2) 1022/    6638 : 4A38 7188           		tst.b	(RAM_CdSub_StampBusy).w			; Check if current Stamp finished
(2) 1023/    663C : 6638                		bne	.exit_render
(2) 1024/    663E : 6100 0698           		bsr	CdSub_PCM_Process
(2) 1025/    6642 : 6100 03C6           		bsr	.process_trace
(2) 1026/    6646 : 0A78 0780 718E      		eori.w	#$780,(RAM_CdSub_StampNextRd).w
(2) 1027/    664C : 6100 068A           		bsr	CdSub_PCM_Process
(2) 1028/    6650 : 614E                		bsr	.make_stamp
(2) 1029/    6652 : 4A78 7180           		tst.w	(RAM_CdSub_StampNum).w
(2) 1030/    6656 : 661E                		bne	.exit_render
(2) 1031/    6658 :                     ; 		move.w	#1,(SCPU_wram+WRAM_StampsDone).l
(2) 1032/    6658 :                     
(2) 1033/    6658 :                     ; ------------------------------------------------
(2) 1034/    6658 :                     ; All stamps are checked
(2) 1035/    6658 :                     ; ------------------------------------------------
(2) 1036/    6658 :                     
(2) 1037/    6658 :                     .return_ret:
(2) 1038/    6658 :                     ; 		move.b	($FFFF8058).w,d7
(2) 1039/    6658 :                     ; 		bmi.s	.return_ret
(2) 1040/    6658 : 6100 067E           		bsr	CdSub_PCM_Process
(2) 1041/    665C : 4A38 7188           		tst.b	(RAM_CdSub_StampBusy).w
(2) 1042/    6660 : 66F6                		bne	.return_ret
(2) 1043/    6662 : 6100 0600           		bsr	CdSub_StampDefaults
(2) 1044/    6666 :                     ; 		bclr	#7,(SCPU_reg+mcd_comm_s).w
(2) 1045/    6666 : 31FC FFFF 7194      		move.w	#-1,(RAM_CdSub_StampCBuff).w
(2) 1046/    666C : 08F9 0000 FFFF      .wait_rete:	bset	#0,(SCPU_reg+mcd_memory).l		; Set RET
             6672 : 8003             
(2) 1047/    6674 : 67F6                		beq.s	.wait_rete
(2) 1048/    6676 :                     ; 		bset	#3,(SCPU_reg+mcd_comm_s).w
(2) 1049/    6676 :                     
(2) 1050/    6676 :                     ; ------------------------------------------------
(2) 1051/    6676 :                     ; Exit
(2) 1052/    6676 :                     ; ------------------------------------------------
(2) 1053/    6676 :                     
(2) 1054/    6676 :                     .exit_render:
(2) 1055/    6676 : 6000 0660           		bra	CdSub_PCM_Process
(2) 1056/    667A :                     
(2) 1057/    667A :                     ; =====================================================================
(2) 1058/    667A :                     ; ------------------------------------------------
(2) 1059/    667A :                     ; Make a list of available stamps to use
(2) 1060/    667A :                     ; ------------------------------------------------
(2) 1061/    667A :                     
(2) 1062/    667A :                     .make_list:
(2) 1063/    667A : 41F9 000B A000      		lea	(SCPU_wram+WRAM_MdStampList).l,a0
(2) 1064/    6680 : 43F9 0000 71D2      		lea	(RAM_CdSub_StampList).l,a1
(2) 1065/    6686 : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(2) 1066/    6688 :                     .loop_list:
(2) 1067/    6688 : 1C10                		move.b	cdstamp_flags(a0),d6		; %Et00000R
(2) 1068/    668A : 0806 0007           		btst	#7,d6
(2) 1069/    668E : 6706                		beq.s	.no_stamp
(2) 1070/    6690 : 2288                		move.l	a0,(a1)
(2) 1071/    6692 : D2FC 0008           		adda	#8,a1
(2) 1072/    6696 :                     .no_stamp:
(2) 1073/    6696 : D0FC 0020           		adda	#$20,a0
(2) 1074/    669A : 51CF FFEC           		dbf	d7,.loop_list
(2) 1075/    669E : 4E75                		rts
(2) 1076/    66A0 :                     
(2) 1077/    66A0 :                     ; ------------------------------------------------
(2) 1078/    66A0 :                     ; Make stamp from the generated list
(2) 1079/    66A0 :                     ; ------------------------------------------------
(2) 1080/    66A0 :                     
(2) 1081/    66A0 :                     .make_stamp:
(2) 1082/    66A0 : 4278 7180           		clr.w	(RAM_CdSub_StampNum).w
(2) 1083/    66A4 :                     .retry:
(2) 1084/    66A4 : 7E00                		moveq	#0,d7
(2) 1085/    66A6 : 3E38 7192           		move.w	(RAM_CdSub_StampIndxW).w,d7
(2) 1086/    66AA : 5278 7192           		addq.w	#1,(RAM_CdSub_StampIndxW).w
(2) 1087/    66AE : 3C07                		move.w	d7,d6
(2) 1088/    66B0 : E74F                		lsl.w	#3,d7
(2) 1089/    66B2 : 41F9 0000 71D2      		lea	(RAM_CdSub_StampList).l,a0
(2) 1090/    66B8 : 2030 7000           		move.l	(a0,d7.w),d0
(2) 1091/    66BC : 6716                		beq.s	.exit_last
(2) 1092/    66BE : 42B0 7000           		clr.l	(a0,d7.w)
(2) 1093/    66C2 : 2040                		move.l	d0,a0
(2) 1094/    66C4 : 6100 00DE           		bsr	.make_trace
(2) 1095/    66C8 : 65DA                		bcs	.retry
(2) 1096/    66CA : 5278 7180           		addq.w	#1,(RAM_CdSub_StampNum).w
(2) 1097/    66CE : 0A78 0780 718C      		eori.w	#$780,(RAM_CdSub_StampNextWr).w
(2) 1098/    66D4 :                     .exit_last:
(2) 1099/    66D4 : 4E75                		rts
(2) 1100/    66D6 :                     
(2) 1101/    66D6 :                     ; =====================================================================
(2) 1102/    66D6 :                     ; ------------------------------------------------
(2) 1103/    66D6 :                     ; Clear all the dot-screen
(2) 1104/    66D6 :                     ;
(2) 1105/    66D6 :                     ; Uses:
(2) 1106/    66D6 :                     ; a1,d0
(2) 1107/    66D6 :                     ; ------------------------------------------------
(2) 1108/    66D6 :                     
(2) 1109/    66D6 :                     .trace_blank:
(2) 1110/    66D6 : 41F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a0
(2) 1111/    66DC : 700F                		moveq	#(256/16)-1,d0
(2) 1112/    66DE :                     .reset_out:
(2) 1113/    66DE :                     	rept 16
(2) 1114/    66DE :                     		move.l	#$FFF8,(a0)+
(2) 1115/    66DE :                     		move.l	#0,(a0)+
(2) 1116/    66DE :                     	endm
(2) 1114/    66DE : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66E4 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    66EA : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66F0 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    66F6 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    66FC : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6702 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6708 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    670E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6714 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    671A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6720 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6726 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    672C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6732 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6738 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    673E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6744 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    674A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6750 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6756 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    675C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6762 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6768 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    676E : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6774 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    677A : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6780 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6786 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    678C : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1114/    6792 : 20FC 0000 FFF8      		move.l	#$FFF8,(a0)+
(2) 1115/    6798 : 20FC 0000 0000      		move.l	#0,(a0)+
(2) 1117/    679E : 51C8 FF3E           		dbf	d0,.reset_out
(2) 1118/    67A2 : 4E75                		rts
(2) 1119/    67A4 :                     
(2) 1120/    67A4 :                     ; =====================================================================
(2) 1121/    67A4 :                     ; ------------------------------------------------
(2) 1122/    67A4 :                     ; Make the trace data
(2) 1123/    67A4 :                     ;
(2) 1124/    67A4 :                     ; Input:
(2) 1125/    67A4 :                     ; a0 - Current stamp
(2) 1126/    67A4 :                     ; a1 - Output trace location
(2) 1127/    67A4 :                     ; a6 - Stamp math buffer
(2) 1128/    67A4 :                     ; d1.w - Center X
(2) 1129/    67A4 :                     ; d2.w - Center Y
(2) 1130/    67A4 :                     ; ------------------------------------------------
(2) 1131/    67A4 :                     
(2) 1132/    67A4 :                     .make_trace:
(2) 1133/    67A4 : 4DF9 0000 719E      		lea	(RAM_CdSub_StampProc).l,a6
(2) 1134/    67AA : 4BF8 71C6           		lea	(RAM_CdSub_StampOutBox).w,a5
(2) 1135/    67AE : 7E00                		moveq	#0,d7
(2) 1136/    67B0 : 1E28 0001           		move.b	cdstamp_map(a0),d7
(2) 1137/    67B4 : E18F                		lsl.l	#8,d7
(2) 1138/    67B6 : E78F                		lsl.l	#3,d7
(2) 1139/    67B8 : DEBC 0003 0000      		add.l	#WRAM_MdMapTable,d7
(2) 1140/    67BE : E48F                		lsr.l	#2,d7
(2) 1141/    67C0 : 3A87                		move.w	d7,stmpi_map(a5)
(2) 1142/    67C2 : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1143/    67C6 : BC7C FC00           		cmp.w	#-$400,d6
(2) 1144/    67CA : 6D00 0162           		blt	.invalid
(2) 1145/    67CE : BC7C 0100           		cmp.w	#$100,d6
(2) 1146/    67D2 : 6C00 015A           		bge	.invalid
(2) 1147/    67D6 :                     
(2) 1148/    67D6 :                     	; ------------------------------------------------
(2) 1149/    67D6 :                     	; Trace texture
(2) 1150/    67D6 : 7200                		moveq	#0,d1
(2) 1151/    67D8 : 7400                		moveq	#0,d2
(2) 1152/    67DA : 3228 000A           		move.w	cdstamp_wdth(a0),d1
(2) 1153/    67DE : 3428 000C           		move.w	cdstamp_hght(a0),d2
(2) 1154/    67E2 : 3628 000E           		move.w	cdstamp_scale(a0),d3
(2) 1155/    67E6 : 3803                		move.w	d3,d4
(2) 1156/    67E8 : C7FC 0100           		muls.w	#SET_STAMPPOV,d3
(2) 1157/    67EC : E083                		asr.l	#8,d3
(2) 1158/    67EE : 4A43                		tst.w	d3
(2) 1159/    67F0 : 6A02                		bpl.s	.splusv
(2) 1160/    67F2 : E683                		asr.l	#3,d3
(2) 1161/    67F4 :                     .splusv:
(2) 1162/    67F4 : 0641 0030           		addi.w	#48,d1
(2) 1163/    67F8 : 0642 0030           		addi.w	#48,d2
(2) 1164/    67FC : D243                		add.w	d3,d1
(2) 1165/    67FE : D443                		add.w	d3,d2
(2) 1166/    6800 : 3638 7182           		move.w	(RAM_CdSub_StampW).w,d3
(2) 1167/    6804 : 3838 7184           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1168/    6808 : E249                		lsr.w	#1,d1
(2) 1169/    680A : E24A                		lsr.w	#1,d2
(2) 1170/    680C : E24B                		lsr.w	#1,d3
(2) 1171/    680E : E24C                		lsr.w	#1,d4
(2) 1172/    6810 : 4443                		neg.w	d3
(2) 1173/    6812 : 4444                		neg.w	d4
(2) 1174/    6814 : 3E28 0006           		move.w	cdstamp_x(a0),d7
(2) 1175/    6818 : 3C28 0008           		move.w	cdstamp_y(a0),d6
(2) 1176/    681C : 9E41                		sub.w	d1,d7
(2) 1177/    681E : 9C42                		sub.w	d2,d6
(2) 1178/    6820 : BE43                		cmp.w	d3,d7
(2) 1179/    6822 : 6C04                		bge.s	.no_xl
(2) 1180/    6824 : 9E43                		sub.w	d3,d7
(2) 1181/    6826 : D247                		add.w	d7,d1
(2) 1182/    6828 :                     .no_xl:
(2) 1183/    6828 : BC44                		cmp.w	d4,d6
(2) 1184/    682A : 6C04                		bge.s	.no_yl
(2) 1185/    682C : 9C44                		sub.w	d4,d6
(2) 1186/    682E : D446                		add.w	d6,d2
(2) 1187/    6830 :                     .no_yl:
(2) 1188/    6830 :                     ; 		addi.w	#8,d1
(2) 1189/    6830 :                     ; 		addi.w	#8,d2
(2) 1190/    6830 :                     ; 		move.w	#SET_STAMPPOV,d7
(2) 1191/    6830 :                     ; 		add.w	cdstamp_scale(a0),d7
(2) 1192/    6830 :                     ; 		muls.w	d7,d2
(2) 1193/    6830 :                     ; 		muls.w	d7,d1
(2) 1194/    6830 :                     ; 		asr.l	#8,d2
(2) 1195/    6830 :                     ; 		asr.l	#8,d1
(2) 1196/    6830 :                     
(2) 1197/    6830 : 4441                		neg.w	d1
(2) 1198/    6832 : 4442                		neg.w	d2
(2) 1199/    6834 : 6100 00FE           		bsr	.mk_vars
(2) 1200/    6838 : 49F9 000B B000      		lea	(SCPU_wram+WRAM_TraceBuff).l,a4
(2) 1201/    683E : 3C38 718C           		move.w	(RAM_CdSub_StampNextWr).w,d6
(2) 1202/    6842 : D8C6                		adda	d6,a4
(2) 1203/    6844 : 3E38 7184           		move.w	(RAM_CdSub_StampH).w,d7
(2) 1204/    6848 : 5347                		subq.w	#1,d7
(2) 1205/    684A :                     .next_line:
(2) 1206/    684A : 3C16                		move.w	stmpc_XC(a6),d6
(2) 1207/    684C : CDC2                		muls.w	d2,d6
(2) 1208/    684E : DCAE 0004           		add.l	stmpc_X(a6),d6
(2) 1209/    6852 : EA86                		asr.l	#5,d6
(2) 1210/    6854 : 38C6                		move.w	d6,(a4)+			; X pos
(2) 1211/    6856 : 3C2E 0002           		move.w	stmpc_YC(a6),d6
(2) 1212/    685A : CDC2                		muls.w	d2,d6
(2) 1213/    685C : 9CAE 0008           		sub.l	stmpc_Y(a6),d6
(2) 1214/    6860 : EA86                		asr.l	#5,d6
(2) 1215/    6862 : 38C6                		move.w	d6,(a4)+			; Y pos
(2) 1216/    6864 : 2C2E 0014           		move.l	stmpc_TX(a6),d6
(2) 1217/    6868 : EA86                		asr.l	#5,d6
(2) 1218/    686A : 38C6                		move.w	d6,(a4)+			; X Delta
(2) 1219/    686C : 2C2E 0018           		move.l	stmpc_TY(a6),d6
(2) 1220/    6870 : EA86                		asr.l	#5,d6
(2) 1221/    6872 : 38C6                		move.w	d6,(a4)+			; Y Delta
(2) 1222/    6874 :                     
(2) 1223/    6874 : 5242                		addq.w	#1,d2
(2) 1224/    6876 : 51CF FFD2           		dbf	d7,.next_line
(2) 1225/    687A :                     
(2) 1226/    687A :                     	; ------------------------------------------------
(2) 1227/    687A :                     	; Expand out size
(2) 1228/    687A : 3E28 000A           		move.w	cdstamp_wdth(a0),d7
(2) 1229/    687E : 3C28 000C           		move.w	cdstamp_hght(a0),d6
(2) 1230/    6882 : 0647 0030           		addi.w	#48,d7
(2) 1231/    6886 : 0646 0030           		addi.w	#48,d6
(2) 1232/    688A : 3A28 000E           		move.w	cdstamp_scale(a0),d5
(2) 1233/    688E : 3805                		move.w	d5,d4
(2) 1234/    6890 : CBFC 0100           		muls.w	#SET_STAMPPOV,d5
(2) 1235/    6894 : E085                		asr.l	#8,d5
(2) 1236/    6896 : 4A44                		tst.w	d4
(2) 1237/    6898 : 6A02                		bpl.s	.splus
(2) 1238/    689A : E685                		asr.l	#3,d5
(2) 1239/    689C :                     .splus:
(2) 1240/    689C : DE45                		add.w	d5,d7
(2) 1241/    689E : DC45                		add.w	d5,d6
(2) 1242/    68A0 : 3A07                		move.w	d7,d5
(2) 1243/    68A2 : 3806                		move.w	d6,d4
(2) 1244/    68A4 : 3028 0006           		move.w	cdstamp_x(a0),d0
(2) 1245/    68A8 : 3228 0008           		move.w	cdstamp_y(a0),d1
(2) 1246/    68AC : E24D                		lsr.w	#1,d5
(2) 1247/    68AE : E24C                		lsr.w	#1,d4
(2) 1248/    68B0 : 9045                		sub.w	d5,d0
(2) 1249/    68B2 : 9244                		sub.w	d4,d1
(2) 1250/    68B4 : 3400                		move.w	d0,d2
(2) 1251/    68B6 : 3601                		move.w	d1,d3
(2) 1252/    68B8 : D447                		add.w	d7,d2
(2) 1253/    68BA : D646                		add.w	d6,d3
(2) 1254/    68BC : 3838 7182           		move.w	(RAM_CdSub_StampW).w,d4		; Add center
(2) 1255/    68C0 : 3A38 7184           		move.w	(RAM_CdSub_StampH).w,d5
(2) 1256/    68C4 : 3E04                		move.w	d4,d7
(2) 1257/    68C6 : 3C05                		move.w	d5,d6
(2) 1258/    68C8 : E24F                		lsr.w	#1,d7
(2) 1259/    68CA : E24E                		lsr.w	#1,d6
(2) 1260/    68CC : D047                		add.w	d7,d0
(2) 1261/    68CE : D246                		add.w	d6,d1
(2) 1262/    68D0 : D447                		add.w	d7,d2
(2) 1263/    68D2 : D646                		add.w	d6,d3
(2) 1264/    68D4 :                     
(2) 1265/    68D4 :                     
(2) 1266/    68D4 :                     ; 		muls.w	d5,d2
(2) 1267/    68D4 :                     ; 		muls.w	d5,d3
(2) 1268/    68D4 :                     ; 		asr.l	#8,d2
(2) 1269/    68D4 :                     ; 		asr.l	#8,d3
(2) 1270/    68D4 :                     
(2) 1271/    68D4 :                     	; d0 - X Left
(2) 1272/    68D4 :                     	; d1 - Y top
(2) 1273/    68D4 :                     	; d2 - X right
(2) 1274/    68D4 :                     	; d3 - Y down
(2) 1275/    68D4 :                     ; 		move.w	(RAM_CdSub_StampW).w,d4
(2) 1276/    68D4 :                     ; 		move.w	(RAM_CdSub_StampH).w,d5
(2) 1277/    68D4 : 0444 0010           		subi.w	#16,d4
(2) 1278/    68D8 : 0445 0010           		subi.w	#16,d5
(2) 1279/    68DC : 3E02                		move.w	d2,d7
(2) 1280/    68DE : 0447 0010           		subi.w	#16,d7
(2) 1281/    68E2 : 4A47                		tst.w	d7
(2) 1282/    68E4 : 6B48                		bmi.s	.invalid
(2) 1283/    68E6 : 3E03                		move.w	d3,d7
(2) 1284/    68E8 : 0447 0010           		subi.w	#16,d7
(2) 1285/    68EC : 4A47                		tst.w	d7
(2) 1286/    68EE : 6B3E                		bmi.s	.invalid
(2) 1287/    68F0 : B044                		cmp.w	d4,d0
(2) 1288/    68F2 : 6C3A                		bge.s	.invalid
(2) 1289/    68F4 : B245                		cmp.w	d5,d1
(2) 1290/    68F6 : 6C36                		bge.s	.invalid
(2) 1291/    68F8 : 0644 0010           		addi.w	#16,d4
(2) 1292/    68FC : 0645 0010           		addi.w	#16,d5
(2) 1293/    6900 : 4A40                		tst.w	d0
(2) 1294/    6902 : 6A02                		bpl.s	.xl_p
(2) 1295/    6904 : 4240                		clr.w	d0
(2) 1296/    6906 : 4A41                .xl_p:		tst.w	d1
(2) 1297/    6908 : 6A02                		bpl.s	.yl_p
(2) 1298/    690A : 4241                		clr.w	d1
(2) 1299/    690C : B444                .yl_p:		cmp.w	d4,d2
(2) 1300/    690E : 6D02                		blt.s	.xr_p
(2) 1301/    6910 : 3404                		move.w	d4,d2
(2) 1302/    6912 : B645                .xr_p:		cmp.w	d5,d3
(2) 1303/    6914 : 6D02                		blt.s	.yr_p
(2) 1304/    6916 : 3605                		move.w	d5,d3
(2) 1305/    6918 :                     .yr_p:
(2) 1306/    6918 : 3B40 0002           		move.w	d0,stmpi_x(a5)
(2) 1307/    691C : 3B41 0004           		move.w	d1,stmpi_y(a5)
(2) 1308/    6920 : 3B42 0006           		move.w	d2,stmpi_xr(a5)
(2) 1309/    6924 : 3B43 0008           		move.w	d3,stmpi_yd(a5)
(2) 1310/    6928 : 023C 001E           		and	#%11110,ccr
(2) 1311/    692C : 4E75                		rts
(2) 1312/    692E :                     
(2) 1313/    692E :                     .invalid:
(2) 1314/    692E : 003C 0001           		or	#1,ccr
(2) 1315/    6932 : 4E75                		rts
(2) 1316/    6934 :                     
(2) 1317/    6934 :                     ; ------------------------------------------------
(2) 1318/    6934 :                     
(2) 1319/    6934 :                     .mk_vars:
(2) 1320/    6934 : 3E28 0010           		move.w	cdstamp_rot(a0),d7
(2) 1321/    6938 : 3A07                		move.w	d7,d5
(2) 1322/    693A : 6100 01F4           		bsr	CdSub_SineWave
(2) 1323/    693E : 3C07                		move.w	d7,d6
(2) 1324/    6940 : 3E05                		move.w	d5,d7
(2) 1325/    6942 : 6100 01E8           		bsr	CdSub_SineWave_Cos
(2) 1326/    6946 : 3D46 0024           		move.w	d6,stmpc_rot_sin(a6)
(2) 1327/    694A : 3D47 0026           		move.w	d7,stmpc_rot_cos(a6)
(2) 1328/    694E :                     
(2) 1329/    694E : 383C 0000           		move.w	#0,d4
(2) 1330/    6952 : 3A3C 0000           		move.w	#0,d5
(2) 1331/    6956 : 3C28 000E           		move.w	cdstamp_scale(a0),d6
(2) 1332/    695A : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1333/    695E : 9E46                		sub.w	d6,d7
(2) 1334/    6960 : 3D47 001E           		move.w	d7,stmpc_zmul(a6)	; Z multi
(2) 1335/    6964 :                     ; 		move.w	d4,d7
(2) 1336/    6964 :                     ; 		move.w	d7,stmpc_xmul(a6)	; X multi
(2) 1337/    6964 : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1338/    6968 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1339/    696C : E087                		asr.l	#8,d7
(2) 1340/    696E : 3D47 0022           		move.w	d7,stmpc_zmul_cos(a6)
(2) 1341/    6972 : 3E2E 001E           		move.w	stmpc_zmul(a6),d7
(2) 1342/    6976 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1343/    697A : E087                		asr.l	#8,d7
(2) 1344/    697C : 3D47 0020           		move.w	d7,stmpc_zmul_sin(a6)
(2) 1345/    6980 : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1346/    6984 : 9E46                		sub.w	d6,d7
(2) 1347/    6986 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1348/    698A : E087                		asr.l	#8,d7
(2) 1349/    698C : 3C87                		move.w	d7,stmpc_XC(a6)
(2) 1350/    698E : 3E3C 0100           		move.w	#SET_STAMPPOV,d7
(2) 1351/    6992 : 9E46                		sub.w	d6,d7
(2) 1352/    6994 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1353/    6998 : E087                		asr.l	#8,d7
(2) 1354/    699A : 3D47 0002           		move.w	d7,stmpc_YC(a6)
(2) 1355/    699E :                     
(2) 1356/    699E : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1357/    69A2 : CFEE 0026           		muls.w	stmpc_rot_cos(a6),d7
(2) 1358/    69A6 : 3C05                		move.w	d5,d6
(2) 1359/    69A8 : CDEE 0024           		muls.w	stmpc_rot_sin(a6),d6
(2) 1360/    69AC : DE86                		add.l	d6,d7
(2) 1361/    69AE : 7C00                		moveq	#0,d6
(2) 1362/    69B0 : 3C28 0002           		move.w	cdstamp_cx(a0),d6
(2) 1363/    69B4 : E18E                		lsl.l	#8,d6
(2) 1364/    69B6 : DE86                		add.l	d6,d7
(2) 1365/    69B8 : 2D47 0004           		move.l	d7,stmpc_X(a6)
(2) 1366/    69BC : 3E2E 001C           		move.w	stmpc_xmul(a6),d7
(2) 1367/    69C0 : CFEE 0024           		muls.w	stmpc_rot_sin(a6),d7
(2) 1368/    69C4 : 3C05                		move.w	d5,d6
(2) 1369/    69C6 : CDEE 0026           		muls.w	stmpc_rot_cos(a6),d6
(2) 1370/    69CA : 9E86                		sub.l	d6,d7
(2) 1371/    69CC : 7C00                		moveq	#0,d6
(2) 1372/    69CE : 3C28 0004           		move.w	cdstamp_cy(a0),d6
(2) 1373/    69D2 : E18E                		lsl.l	#8,d6
(2) 1374/    69D4 : 9E86                		sub.l	d6,d7
(2) 1375/    69D6 : 2D47 0008           		move.l	d7,stmpc_Y(a6)
(2) 1376/    69DA :                     
(2) 1377/    69DA : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1378/    69DE : CFC1                		muls.w	d1,d7
(2) 1379/    69E0 : DFAE 0004           		add.l	d7,stmpc_X(a6)
(2) 1380/    69E4 : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1381/    69E8 : CFC1                		muls.w	d1,d7
(2) 1382/    69EA : DFAE 0008           		add.l	d7,stmpc_Y(a6)
(2) 1383/    69EE :                     
(2) 1384/    69EE : 3E2E 0022           		move.w	stmpc_zmul_cos(a6),d7
(2) 1385/    69F2 : 48C7                		ext.l	d7
(2) 1386/    69F4 : E187                		asl.l	#8,d7
(2) 1387/    69F6 : 2D47 0014           		move.l	d7,stmpc_TX(a6)
(2) 1388/    69FA : 3E2E 0020           		move.w	stmpc_zmul_sin(a6),d7
(2) 1389/    69FE : 4447                		neg.w	d7
(2) 1390/    6A00 : 48C7                		ext.l	d7
(2) 1391/    6A02 : E187                		asl.l	#8,d7
(2) 1392/    6A04 : 2D47 0018           		move.l	d7,stmpc_TY(a6)
(2) 1393/    6A08 : 4E75                		rts
(2) 1394/    6A0A :                     
(2) 1395/    6A0A :                     ; =====================================================================
(2) 1396/    6A0A :                     ; ------------------------------------------------
(2) 1397/    6A0A :                     ; Send trace to ASIC
(2) 1398/    6A0A :                     ;
(2) 1399/    6A0A :                     ; Input:
(2) 1400/    6A0A :                     ; d0.w | Map location / 2
(2) 1401/    6A0A :                     ; d1.w | X pos
(2) 1402/    6A0A :                     ; d2.w | Y pos
(2) 1403/    6A0A :                     ; d3.w | Width
(2) 1404/    6A0A :                     ; d4.w | Height
(2) 1405/    6A0A :                     ;
(2) 1406/    6A0A :                     ; Uses:
(2) 1407/    6A0A :                     ; d5-d7
(2) 1408/    6A0A :                     ; ------------------------------------------------
(2) 1409/    6A0A :                     
(2) 1410/    6A0A :                     .process_trace:
(2) 1411/    6A0A : 6100 02CC           		bsr	CdSub_PCM_Process
(2) 1412/    6A0E : 08B8 0000 7190      		bclr	#0,(RAM_CdSub_DotClearFlag).w	; Clear dotscreen flag?
(2) 1413/    6A14 : 6600 00B2           		bne	.clear_frame
(2) 1414/    6A18 : 41F8 71C6           		lea	(RAM_CdSub_StampOutBox).w,a0
(2) 1415/    6A1C : 3010                		move.w	stmpi_map(a0),d0
(2) 1416/    6A1E : 3228 0002           		move.w	stmpi_x(a0),d1			; X left
(2) 1417/    6A22 : 3428 0004           		move.w	stmpi_y(a0),d2			; Y top
(2) 1418/    6A26 : 3628 0006           		move.w  stmpi_xr(a0),d3			; X right
(2) 1419/    6A2A : 3828 0008           		move.w  stmpi_yd(a0),d4			; Y bottom
(2) 1420/    6A2E : 9641                		sub.w	d1,d3				; XR-XL
(2) 1421/    6A30 : 9842                		sub.w	d2,d4				; YB-YT
(2) 1422/    6A32 : 7C02                		moveq	#%10,d6				; Overwrite mode
(2) 1423/    6A34 : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1424/    6A38 : 0207 0007            		andi.b	#%00111,d7
(2) 1425/    6A3C : 0246 0003            		andi.w	#%11,d6
(2) 1426/    6A40 : E74E                 		lsl.w	#3,d6
(2) 1427/    6A42 : 8E46                 		or.w	d6,d7
(2) 1428/    6A44 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1429/    6A48 : 7C00                 		moveq	#0,d6				; RPT bit
(2) 1430/    6A4A : 3E38 718A            		move.w	(RAM_CdSub_StampSize).w,d7
(2) 1431/    6A4E : 0247 0006            		andi.w	#%110,d7
(2) 1432/    6A52 : 0246 0001            		andi.w	#%001,d6
(2) 1433/    6A56 : 8E46                 		or.w	d6,d7
(2) 1434/    6A58 : 31C7 8058           		move.w	d7,($FFFF8058).w		; Stamp data size
(2) 1435/    6A5C : 31C0 805A           		move.w  d0,($FFFF805A).w		; d0 - Stamp map location
(2) 1436/    6A60 :                     
(2) 1437/    6A60 :                     	; X,Y,W,H
(2) 1438/    6A60 : 2E3C 0002 0000      		move.l	#WRAM_DotOutput_0,d7
(2) 1439/    6A66 : 4A78 7194           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1440/    6A6A : 6706                		beq.s	.dot_0
(2) 1441/    6A6C : 2E3C 0002 8000      		move.l	#WRAM_DotOutput_1,d7
(2) 1442/    6A72 :                     .dot_0:
(2) 1443/    6A72 : 7C00                		moveq	#0,d6
(2) 1444/    6A74 : 3A01                		move.w	d1,d5
(2) 1445/    6A76 : E645                		asr.w	#3,d5
(2) 1446/    6A78 : 3C38 7184           		move.w	(RAM_CdSub_StampH).w,d6
(2) 1447/    6A7C : CDC5                		muls.w	d5,d6
(2) 1448/    6A7E : E586                		asl.l	#2,d6
(2) 1449/    6A80 : DE86                		add.l	d6,d7
(2) 1450/    6A82 : 2A02                		move.l	d2,d5
(2) 1451/    6A84 : 0245 FFF8           		andi.w	#-8,d5
(2) 1452/    6A88 : E58D                		lsl.l	#2,d5
(2) 1453/    6A8A : DE85                		add.l	d5,d7
(2) 1454/    6A8C : 0281 0000 0007      		andi.l	#%111,d1
(2) 1455/    6A92 : 0282 0000 0007      		andi.l	#%111,d2
(2) 1456/    6A98 : E74A                		lsl.w	#3,d2
(2) 1457/    6A9A : 8242                		or.w	d2,d1
(2) 1458/    6A9C : E48F                		lsr.l	#2,d7
(2) 1459/    6A9E : 31C1 8060           		move.w  d1,($FFFF8060).w		; Output image buffer offset
(2) 1460/    6AA2 : 31C7 805E           		move.w  d7,($FFFF805E).w		; Output image buffer start address
(2) 1461/    6AA6 : 31C3 8062           		move.w	d3,($FFFF8062).w		; Image buffer H dot
(2) 1462/    6AAA : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1463/    6AAE : 7E00                		moveq	#0,d7
(2) 1464/    6AB0 : 3E38 718E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1465/    6AB4 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1466/    6ABA : E48F                		lsr.l	#2,d7
(2) 1467/    6ABC : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1468/    6AC0 : 50F8 7188           		st.b	(RAM_CdSub_StampBusy).w
(2) 1469/    6AC4 : 6000 0212           		bra	CdSub_PCM_Process
(2) 1470/    6AC8 :                     
(2) 1471/    6AC8 :                     ; ----------------------------------------------------------------
(2) 1472/    6AC8 :                     ; FIRST FRAME ONLY
(2) 1473/    6AC8 :                     
(2) 1474/    6AC8 :                     .clear_frame:
(2) 1475/    6AC8 : 6100 020E           		bsr	CdSub_PCM_Process
(2) 1476/    6ACC : 1E38 8003            		move.b	(SCPU_reg+mcd_memory).w,d7
(2) 1477/    6AD0 : 0207 0007            		andi.b	#%00111,d7
(2) 1478/    6AD4 : 11C7 8003            		move.b	d7,(SCPU_reg+mcd_memory).w	; Set Normal or Overwrite
(2) 1479/    6AD8 : 31FC 0000 8058      		move.w	#0,($FFFF8058).w		; Stamp data size
(2) 1480/    6ADE : 31FC 0000 805A      		move.w  #0,($FFFF805A).w		; d0 - Stamp map location
(2) 1481/    6AE4 : 2C3C 0002 0000      		move.l	#WRAM_DotOutput_0,d6
(2) 1482/    6AEA : 4A78 7194           		tst.w	(RAM_CdSub_StampCBuff).w
(2) 1483/    6AEE : 6706                		beq.s	.dotc_0
(2) 1484/    6AF0 : 2C3C 0002 8000      		move.l	#WRAM_DotOutput_1,d6
(2) 1485/    6AF6 :                     .dotc_0:
(2) 1486/    6AF6 : E48E                		lsr.l	#2,d6
(2) 1487/    6AF8 : 31C6 805E           		move.w  d6,($FFFF805E).w		; Output image buffer start address
(2) 1488/    6AFC : 31FC 0000 8060      		move.w  #0,($FFFF8060).w		; Output image buffer offset
(2) 1489/    6B02 : 3A38 7182           		move.w	(RAM_CdSub_StampW).w,d5
(2) 1490/    6B06 : 3838 7184           		move.w	(RAM_CdSub_StampH).w,d4
(2) 1491/    6B0A : 31C5 8062           		move.w	d5,($FFFF8062).w		; Image buffer H dot
(2) 1492/    6B0E : 31C4 8064           		move.w	d4,($FFFF8064).w		; Image buffer V dot **
(2) 1493/    6B12 : 7E00                		moveq	#0,d7
(2) 1494/    6B14 : 3E38 718E           		move.w	(RAM_CdSub_StampNextRd).w,d7
(2) 1495/    6B18 : DEBC 0003 B000      		add.l	#WRAM_TraceBuff,d7
(2) 1496/    6B1E : E48F                		lsr.l	#2,d7
(2) 1497/    6B20 : 31C7 8066           		move.w  d7,($FFFF8066).w		; Image trace vector base address (START)
(2) 1498/    6B24 : 50F8 7188           		st.b	(RAM_CdSub_StampBusy).w
(2) 1499/    6B28 : 6000 01AE           		bra	CdSub_PCM_Process
(2) 1500/    6B2C :                     
(2) 1501/    6B2C :                     ; =====================================================================
(2) 1502/    6B2C :                     ; ----------------------------------------------------------------
(2) 1503/    6B2C :                     ;
(2) 1504/    6B2C :                     ; ----------------------------------------------------------------
(2) 1505/    6B2C :                     
(2) 1506/    6B2C :                     CdSub_SineWave_Cos:
(2) 1507/    6B2C : 0647 0080           		addi.w  #$80,d7
(2) 1508/    6B30 :                     CdSub_SineWave:
(2) 1509/    6B30 : 2F06                		move.l	d6,-(sp)
(2) 1510/    6B32 : 0247 01FF           		andi.w	#$1FF,d7
(2) 1511/    6B36 : 3C07                		move.w	d7,d6
(2) 1512/    6B38 : 0807 0007           		btst	#7,d7
(2) 1513/    6B3C : 6702                		beq.s	.loc_7EFA
(2) 1514/    6B3E : 4646                		not.w	d6
(2) 1515/    6B40 :                     .loc_7EFA:
(2) 1516/    6B40 : 0246 007F           		andi.w  #$7F,d6
(2) 1517/    6B44 : E34E                		lsl.w   #1,d6
(2) 1518/    6B46 : 3C3B 6010           		move.w  .sine_data(pc,d6.w),d6
(2) 1519/    6B4A : 0807 0008           		btst    #8,d7
(2) 1520/    6B4E : 6702                		beq.s   .loc_7F0C
(2) 1521/    6B50 : 4446                		neg.w   d6
(2) 1522/    6B52 :                     .loc_7F0C:
(2) 1523/    6B52 : 3E06                		move.w  d6,d7
(2) 1524/    6B54 : 2C1F                		move.l  (sp)+,d6
(2) 1525/    6B56 : 4E75                		rts
(2) 1526/    6B58 :                     
(2) 1527/    6B58 :                     ; ------------------------------------------------
(2) 1528/    6B58 :                     
(2) 1529/    6B58 :                     .sine_data:
(2) 1530/    6B58 :                     		binclude "nikona/md/data/sine_data.bin"
(2) 1531/    6C58 :                     		align 2
(2) 1532/    6C58 :                     
(2) 1533/    6C58 :                     ; =====================================================================
(2) 1534/    6C58 :                     ; ------------------------------------------------
(2) 1535/    6C58 :                     ; Flip output Dotscreen
(2) 1536/    6C58 :                     ; ------------------------------------------------
(2) 1537/    6C58 :                     
(2) 1538/    6C58 :                     CdSub_StampResetVcell:
(2) 1539/    6C58 : 3C38 7184           		move.w  (RAM_CdSub_StampH).w,d6		; Image V cell size
(2) 1540/    6C5C : E64E                		lsr.w	#3,d6
(2) 1541/    6C5E : 5346                		subq.w	#1,d6
(2) 1542/    6C60 : 31C6 805C           		move.w  d6,($FFFF805C).w
(2) 1543/    6C64 :                     CdSub_StampDefaults:
(2) 1544/    6C64 : 4278 7192           		clr.w	(RAM_CdSub_StampIndxW).w
(2) 1545/    6C68 : 4278 718C           		clr.w	(RAM_CdSub_StampNextWr).w
(2) 1546/    6C6C : 4278 718E           		clr.w	(RAM_CdSub_StampNextRd).w
(2) 1547/    6C70 : 4278 7190           		clr.w	(RAM_CdSub_DotClearFlag).w
(2) 1548/    6C74 : 4278 7188           		clr.w	(RAM_CdSub_StampBusy).w
(2) 1549/    6C78 : 4278 7180           		clr.w	(RAM_CdSub_StampNum).w
(2) 1550/    6C7C : 4E75                		rts
(2) 1551/    6C7E :                     
(2) 1552/    6C7E :                     ; =====================================================================
(2) 1553/    6C7E :                     ; ----------------------------------------------------------------
(2) 1554/    6C7E :                     ; PCM sound
(2) 1555/    6C7E :                     ; ----------------------------------------------------------------
(2) 1556/    6C7E :                     
(2) 1557/    6C7E :                     ; --------------------------------------------------------
(2) 1558/    6C7E :                     ; CdSub_PCM_Init
(2) 1559/    6C7E :                     ; --------------------------------------------------------
(2) 1560/    6C7E :                     
(2) 1561/    6C7E :                     ; PCM WAVE RAM setup:
(2) 1562/    6C7E :                     ; $0000-$7FFF | Streaming data blocks, $1000 each
(2) 1563/    6C7E :                     ; $8000-$8FFF | Silence block "emergency stop"
(2) 1564/    6C7E :                     
(2) 1565/    6C7E :                     CdSub_PCM_Init:
(2) 1566/    6C7E : 4DF9 FFFF 0000      		lea	(SCPU_pcm),a6		; a6 - PCM registers
(2) 1567/    6C84 : 1D7C 00FF 0011      		move.b	#-1,ONREG(a6)
(2) 1568/    6C8A : 7000                		moveq	#0,d0			; d0 - BLANK byte
(2) 1569/    6C8C : 72FF                		moveq	#-1,d1			; d1 - LOOP byte
(2) 1570/    6C8E : 343C 0080           		move.w	#$80,d2			; d2 - Current BANK
(2) 1571/    6C92 : 7E10                		moveq	#$0F+1,d7		; $0000-$9FFF
(2) 1572/    6C94 : 4BEE 2000           		lea	$2000(a6),a5		; a5 - WAVE RAM
(2) 1573/    6C98 :                     .clr_pwm:
(2) 1574/    6C98 : 1D42 000F           		move.b	d2,CTREG(a6)
(2) 1575/    6C9C : 4E71                		nop
(2) 1576/    6C9E : 4E71                		nop
(2) 1577/    6CA0 : 284D                		move.l	a5,a4
(2) 1578/    6CA2 : 3C3C 0FEF           		move.w	#$0FF0-1,d6
(2) 1579/    6CA6 : 38C0                .wr_end:	move.w	d0,(a4)+
(2) 1580/    6CA8 : 51CE FFFC           		dbf	d6,.wr_end
(2) 1581/    6CAC :                     	rept $10
(2) 1582/    6CAC :                     		move.w	d1,(a4)+
(2) 1583/    6CAC :                     	endm
(2) 1582/    6CAC : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CAE : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB0 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB2 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB4 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB6 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CB8 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBA : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBC : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CBE : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC0 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC2 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC4 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC6 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CC8 : 38C1                		move.w	d1,(a4)+
(2) 1582/    6CCA : 38C1                		move.w	d1,(a4)+
(2) 1584/    6CCC : 5202                		addq.b	#$01,d2
(2) 1585/    6CCE : 51CF FFC8           		dbf	d7,.clr_pwm
(2) 1586/    6CD2 : 50F8 719A           		st.b	(RAM_CdSub_PcmEnbl).w
(2) 1587/    6CD6 : 4E75                		rts
(2) 1588/    6CD8 :                     
(2) 1589/    6CD8 :                     ; ============================================================
(2) 1590/    6CD8 :                     ; --------------------------------------------------------
(2) 1591/    6CD8 :                     ; CdSub_PCM_Process
(2) 1592/    6CD8 :                     ;
(2) 1593/    6CD8 :                     ; Checks for playback changes
(2) 1594/    6CD8 :                     ; --------------------------------------------------------
(2) 1595/    6CD8 :                     
(2) 1596/    6CD8 :                     CdSub_PCM_Process:
(2) 1597/    6CD8 : 6100 0280           		bsr	CdSub_PCM_Stream
(2) 1598/    6CDC : 4A38 719B           		tst.b	(RAM_CdSub_PcmReqUpd).w
(2) 1599/    6CE0 : 6726                		beq.s	.no_req
(2) 1600/    6CE2 : 6126                		bsr	.get_table
(2) 1601/    6CE4 : 6100 0274           		bsr	CdSub_PCM_Stream
(2) 1602/    6CE8 : 6100 00A4           		bsr	CdSub_PCM_ReadTable
(2) 1603/    6CEC : 6100 026C           		bsr	CdSub_PCM_Stream
(2) 1604/    6CF0 : 6100 0268           		bsr	CdSub_PCM_Stream
(2) 1605/    6CF4 : 6100 0264           		bsr	CdSub_PCM_Stream
(2) 1606/    6CF8 : 13F8 719A FFFF      		move.b	(RAM_CdSub_PcmEnbl).w,(SCPU_pcm+ONREG).l
             6CFE : 0011             
(2) 1607/    6D00 : 617A                		bsr	CdSub_PCM_Wait
(2) 1608/    6D02 : 5338 719B           		subq.b	#1,(RAM_CdSub_PcmReqUpd).w
(2) 1609/    6D06 : 60D0                		bra	CdSub_PCM_Process
(2) 1610/    6D08 :                     .no_req:
(2) 1611/    6D08 : 4E75                		rts
(2) 1612/    6D0A :                     
(2) 1613/    6D0A :                     ; ------------------------------------------------
(2) 1614/    6D0A :                     ; Get PCM table from Z80
(2) 1615/    6D0A :                     ; ------------------------------------------------
(2) 1616/    6D0A :                     
(2) 1617/    6D0A :                     .get_table:
(2) 1618/    6D0A : 43F9 0000 73D2      		lea	(RAM_CdSub_PcmTable).l,a1		; a1 - PCM Table output
(2) 1619/    6D10 : 45F8 8018           		lea	(SCPU_reg+mcd_dcomm_m+8).w,a2		; a2 - Data input
(2) 1620/    6D14 :                     .trnsfr_mode:
(2) 1621/    6D14 : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0		; Tell Z80 we are here.
(2) 1622/    6D18 : 0240 000F           		andi.w	#%00001111,d0				; Flag $Cx
(2) 1623/    6D1C : 803C 00C0           		or.b	#%11000000,d0
(2) 1624/    6D20 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1625/    6D24 :                     .wait_start:
(2) 1626/    6D24 : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; Z80 lock bit set?
(2) 1627/    6D28 : 0800 0005           		btst	#5,d0
(2) 1628/    6D2C : 67F6                		beq.s	.wait_start
(2) 1629/    6D2E : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1630/    6D32 : 0240 00C0           		andi.w	#%11000000,d0
(2) 1631/    6D36 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1632/    6D3A :                     .next_packet:
(2) 1633/    6D3A : 1039 FFFF 800E      		move.b	(SCPU_reg+mcd_comm_m).l,d0		; Read MAIN comm
(2) 1634/    6D40 : 0800 0005           		btst	#5,d0					; Still LOCKed?
(2) 1635/    6D44 : 6728                		beq.s	.exit_now				; If not, finish.
(2) 1636/    6D46 : 0800 0004           		btst	#4,d0					; PASS bit set?
(2) 1637/    6D4A : 67EE                		beq.s	.next_packet
(2) 1638/    6D4C : 204A                		move.l	a2,a0
(2) 1639/    6D4E :                     	rept $08/2
(2) 1640/    6D4E :                     		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1641/    6D4E :                     	endm
(2) 1640/    6D4E : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D50 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D52 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1640/    6D54 : 32D8                		move.w	(a0)+,(a1)+				; Copying as WORDs
(2) 1642/    6D56 : 08F8 0004 800F      		bset	#4,(SCPU_reg+mcd_comm_s).w
(2) 1643/    6D5C :                     .wait_main:
(2) 1644/    6D5C : 1038 800E           		move.b	(SCPU_reg+mcd_comm_m).w,d0		; PASS bit cleared?
(2) 1645/    6D60 : 0800 0004           		btst	#4,d0
(2) 1646/    6D64 : 66F6                		bne.s	.wait_main
(2) 1647/    6D66 : 08B8 0004 800F      		bclr	#4,(SCPU_reg+mcd_comm_s).w
(2) 1648/    6D6C : 60CC                		bra	.next_packet
(2) 1649/    6D6E :                     .exit_now:
(2) 1650/    6D6E : 1038 800F           		move.b	(SCPU_reg+mcd_comm_s).w,d0
(2) 1651/    6D72 : 0240 000F           		andi.w	#%00001111,d0
(2) 1652/    6D76 : 11C0 800F           		move.b	d0,(SCPU_reg+mcd_comm_s).w
(2) 1653/    6D7A :                     .not_now:
(2) 1654/    6D7A : 4E75                		rts
(2) 1655/    6D7C :                     
(2) 1656/    6D7C :                     ; --------------------------------------------------------
(2) 1657/    6D7C :                     ; CdSub_PCM_Wait
(2) 1658/    6D7C :                     ;
(2) 1659/    6D7C :                     ; Call this after writing to the PCM's register
(2) 1660/    6D7C :                     ; (NOT required for FF2001+ memory writes)
(2) 1661/    6D7C :                     ; --------------------------------------------------------
(2) 1662/    6D7C :                     
(2) 1663/    6D7C :                     CdSub_PCM_Wait:
(2) 1664/    6D7C : 48E7 FFFE           		movem.l d0-a6,-(sp)
(2) 1665/    6D80 : 4CDF 7FFF           		movem.l (sp)+,d0-a6
(2) 1666/    6D84 : 48E7 F800           		movem.l d0-d4,-(sp)
(2) 1667/    6D88 : 4CDF 001F           		movem.l (sp)+,d0-d4
(2) 1668/    6D8C : 4E75                		rts
(2) 1669/    6D8E :                     
(2) 1670/    6D8E :                     ; --------------------------------------------------------
(2) 1671/    6D8E :                     ; CdSub_PCM_ReadTable
(2) 1672/    6D8E :                     ; --------------------------------------------------------
(2) 1673/    6D8E :                     
(2) 1674/    6D8E :                     CdSub_PCM_ReadTable:
(2) 1675/    6D8E : 4DF9 0000 72D2      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1676/    6D94 : 4BF9 0000 73D2      		lea	(RAM_CdSub_PcmTable).l,a5
(2) 1677/    6D9A : 49F9 FFFF 0000      		lea	(SCPU_pcm),a4
(2) 1678/    6DA0 : 7E07                		moveq	#8-1,d7				; 8 channels
(2) 1679/    6DA2 : 7C00                		moveq	#0,d6				; Starting channel number
(2) 1680/    6DA4 :                     .get_tbl:
(2) 1681/    6DA4 : 1A15                		move.b	(a5),d5
(2) 1682/    6DA6 : 0885 0003           		bclr	#3,d5				; Update only?
(2) 1683/    6DAA : 6708                		beq.s	.no_updset
(2) 1684/    6DAC : 6100 014C           		bsr	.get_chnlset
(2) 1685/    6DB0 : 6100 016A           		bsr	.update_set
(2) 1686/    6DB4 :                     .no_updset:
(2) 1687/    6DB4 : 0885 0002           		bclr	#2,d5				; Key-cut?
(2) 1688/    6DB8 : 6704                		beq.s	.no_keyoff
(2) 1689/    6DBA : 6100 00E6           		bsr	.cdcom_keycut
(2) 1690/    6DBE :                     .no_keyoff:
(2) 1691/    6DBE : 0885 0001           		bclr	#1,d5				; Key-off?
(2) 1692/    6DC2 : 6704                		beq.s	.no_keycut
(2) 1693/    6DC4 : 6100 00DC           		bsr	.cdcom_keyoff
(2) 1694/    6DC8 :                     .no_keycut:
(2) 1695/    6DC8 : 0885 0000           		bclr	#0,d5				; Key-on?
(2) 1696/    6DCC : 6702                		beq.s	.no_comm
(2) 1697/    6DCE : 6110                		bsr	.cdcom_keyon
(2) 1698/    6DD0 :                     .no_comm:
(2) 1699/    6DD0 : 1AFC 0000           		move.b	#0,(a5)+
(2) 1700/    6DD4 : DCFC 0020           		adda	#cdpcm_len,a6			; Next PCM buffer
(2) 1701/    6DD8 : 5246                		addq.w	#1,d6
(2) 1702/    6DDA : 51CF FFC8           		dbf	d7,.get_tbl
(2) 1703/    6DDE : 4E75                		rts
(2) 1704/    6DE0 :                     
(2) 1705/    6DE0 :                     ; --------------------------------------------------------
(2) 1706/    6DE0 :                     ; pcmcom:b
(2) 1707/    6DE0 :                     ; 0 - Playback bits: %0000PCOK /Pitchbend/keyCut/keyOff/KeyOn
(2) 1708/    6DE0 :                     ; 8 - Pitch MSB
(2) 1709/    6DE0 :                     ; 16 - Pitch LSB
(2) 1710/    6DE0 :                     ; 24 - Volume
(2) 1711/    6DE0 :                     ; 32 - Panning %RRRRLLLL
(2) 1712/    6DE0 :                     ; 40 - LoopEnable bit | 24-bit sample location in Sub-CPU area
(2) 1713/    6DE0 :                     ; 48
(2) 1714/    6DE0 :                     ; 56
(2) 1715/    6DE0 :                     ;
(2) 1716/    6DE0 :                     ; a0 - table
(2) 1717/    6DE0 :                     
(2) 1718/    6DE0 :                     .cdcom_keyon:
(2) 1719/    6DE0 : 6100 00C0           		bsr	.cdcom_keycut
(2) 1720/    6DE4 : 6100 0114           		bsr	.get_chnlset
(2) 1721/    6DE8 : 7000                		moveq	#0,d0
(2) 1722/    6DEA : 1028 0028           		move.b	40(a0),d0		; 40
(2) 1723/    6DEE : 1600                		move.b	d0,d3
(2) 1724/    6DF0 : 0240 007F           		andi.w	#$7F,d0
(2) 1725/    6DF4 : 4840                		swap	d0
(2) 1726/    6DF6 : 1028 0030           		move.b	48(a0),d0		; 48
(2) 1727/    6DFA : E148                		lsl.w	#8,d0
(2) 1728/    6DFC : 1028 0038           		move.b	56(a0),d0		; 56
(2) 1729/    6E00 : 2440                		move.l	d0,a2
(2) 1730/    6E02 : 7000                		moveq	#0,d0
(2) 1731/    6E04 : 7200                		moveq	#0,d1			; Read LEN
(2) 1732/    6E06 : 101A                		move.b	(a2)+,d0
(2) 1733/    6E08 : E158                		rol.w	#8,d0
(2) 1734/    6E0A : 101A                		move.b	(a2)+,d0
(2) 1735/    6E0C : E058                		ror.w	#8,d0
(2) 1736/    6E0E : 121A                		move.b	(a2)+,d1
(2) 1737/    6E10 : 4841                		swap	d1
(2) 1738/    6E12 : 8081                		or.l	d1,d0
(2) 1739/    6E14 : 2D40 0006           		move.l	d0,cdpcm_length(a6)
(2) 1740/    6E18 : 7200                		moveq	#0,d1
(2) 1741/    6E1A : 7000                		moveq	#0,d0
(2) 1742/    6E1C : 101A                		move.b	(a2)+,d0
(2) 1743/    6E1E : E158                		rol.w	#8,d0
(2) 1744/    6E20 : 101A                		move.b	(a2)+,d0
(2) 1745/    6E22 : E058                		ror.w	#8,d0
(2) 1746/    6E24 : 121A                		move.b	(a2)+,d1
(2) 1747/    6E26 : 4841                		swap	d1
(2) 1748/    6E28 : 8081                		or.l	d1,d0
(2) 1749/    6E2A : 2D40 000A           		move.l	d0,cdpcm_loop(a6)
(2) 1750/    6E2E : 2D4A 0002           		move.l	a2,cdpcm_start(a6)
(2) 1751/    6E32 : E31B                		rol.b	#1,d3
(2) 1752/    6E34 : 0203 0001           		andi.b	#1,d3
(2) 1753/    6E38 : 1D43 0001           		move.b	d3,cdpcm_flags(a6)
(2) 1754/    6E3C :                     
(2) 1755/    6E3C :                     	; Setup stream
(2) 1756/    6E3C : 2D6E 0002 0012      		move.l	cdpcm_start(a6),cdpcm_cread(a6)
(2) 1757/    6E42 : 2D6E 0006 000E      		move.l	cdpcm_length(a6),cdpcm_clen(a6)
(2) 1758/    6E48 : 3D7C 0000 001C      		move.w	#0,cdpcm_cout(a6)
(2) 1759/    6E4E : 3D7C 0010 001A      		move.w	#($1000/SET_PCMBLK),cdpcm_cblk(a6)
(2) 1760/    6E54 : 6100 00C6           		bsr	.update_set
(2) 1761/    6E58 :                     	; Start/End
(2) 1762/    6E58 : 7000                		moveq	#0,d0
(2) 1763/    6E5A : 1006                		move.b	d6,d0
(2) 1764/    6E5C : E948                		lsl.w	#4,d0
(2) 1765/    6E5E : 1940 000D           		move.b	d0,ST(a4)
(2) 1766/    6E62 : E148                		lsl.w	#8,d0
(2) 1767/    6E64 : 0CAE 0000 0FF0      		cmp.l	#$1000-$10,cdpcm_length(a6)
             6E6A : 0006             
(2) 1768/    6E6C : 6506                		bcs.s	.small_sampl
(2) 1769/    6E6E : 08D6 0006           		bset	#6,cdpcm_status(a6)
(2) 1770/    6E72 : 601A                		bra.s	.cont_tloop
(2) 1771/    6E74 :                     .small_sampl:
(2) 1772/    6E74 : 0896 0006           		bclr	#6,cdpcm_status(a6)
(2) 1773/    6E78 : 7200                		moveq	#0,d1
(2) 1774/    6E7A : 3200                		move.w	d0,d1
(2) 1775/    6E7C : 303C 8000           		move.w	#$8000,d0
(2) 1776/    6E80 : 082E 0000 0001      		btst	#0,cdpcm_flags(a6)
(2) 1777/    6E86 : 6706                		beq.s	.cont_tloop
(2) 1778/    6E88 : 202E 000A           		move.l	cdpcm_loop(a6),d0
(2) 1779/    6E8C : D081                		add.l	d1,d0
(2) 1780/    6E8E :                     .cont_tloop:
(2) 1781/    6E8E : 1940 0009           		move.b	d0,LSL(a4)
(2) 1782/    6E92 : E048                		lsr.w	#8,d0
(2) 1783/    6E94 : 1940 000B           		move.b	d0,LSH(a4)
(2) 1784/    6E98 : 0DB8 719A           		bclr	d6,(RAM_CdSub_PcmEnbl).w
(2) 1785/    6E9C : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1786/    6EA0 : 4E75                		rts
(2) 1787/    6EA2 :                     .cdcom_keyoff:
(2) 1788/    6EA2 :                     ; 		bset	d6,(RAM_CdSub_PcmEnbl).w
(2) 1789/    6EA2 :                     ; 		move.b	(RAM_CdSub_PcmEnbl).w,ONREG(a4)
(2) 1790/    6EA2 :                     ; 		rts
(2) 1791/    6EA2 :                     .cdcom_keycut:
(2) 1792/    6EA2 : 426E 001A           		clr.w	cdpcm_cblk(a6)
(2) 1793/    6EA6 : 4216                		clr.b	cdpcm_status(a6)
(2) 1794/    6EA8 : 0DF8 719A           		bset	d6,(RAM_CdSub_PcmEnbl).w
(2) 1795/    6EAC : 1978 719A 0011      		move.b	(RAM_CdSub_PcmEnbl).w,ONREG(a4)
(2) 1796/    6EB2 : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1797/    6EB4 : 803C 00C0           		or.b	#$C0,d0
(2) 1798/    6EB8 : 1940 000F           		move.b	d0,CTREG(a4)
(2) 1799/    6EBC : 6100 FEBE           		bsr	CdSub_PCM_Wait
(2) 1800/    6EC0 : 197C 0080 000D      		move.b	#$80,ST(a4)
(2) 1801/    6EC6 : 6100 FEB4           		bsr	CdSub_PCM_Wait
(2) 1802/    6ECA : 303C 8000           		move.w	#$8000,d0
(2) 1803/    6ECE : 1940 0009           		move.b	d0,LSL(a4)
(2) 1804/    6ED2 : 6100 FEA8           		bsr	CdSub_PCM_Wait
(2) 1805/    6ED6 : E048                		lsr.w	#8,d0
(2) 1806/    6ED8 : 1940 000B           		move.b	d0,LSH(a4)
(2) 1807/    6EDC : 6100 FE9E           		bsr	CdSub_PCM_Wait
(2) 1808/    6EE0 : 3D7C 0010 001A      		move.w	#$1000/SET_PCMBLK,cdpcm_cblk(a6)
(2) 1809/    6EE6 : 3D7C 0000 001C      		move.w	#0,cdpcm_cout(a6)
(2) 1810/    6EEC : 2D7C 0000 0000      		move.l	#0,cdpcm_clen(a6)
             6EF2 : 000E             
(2) 1811/    6EF4 : 08D6 0007           		bset	#7,cdpcm_status(a6)
(2) 1812/    6EF8 : 4E75                		rts
(2) 1813/    6EFA :                     .get_chnlset:
(2) 1814/    6EFA : 204D                		move.l	a5,a0
(2) 1815/    6EFC : 1028 0008           		move.b	8(a0),d0		; 8 - Pitch MSB
(2) 1816/    6F00 : E148                		lsl.w	#8,d0
(2) 1817/    6F02 : 1028 0010           		move.b	16(a0),d0		; 16 - Pitch LSB
(2) 1818/    6F06 : 1228 0018           		move.b	24(a0),d1		; 24 - Volume
(2) 1819/    6F0A : 1428 0020           		move.b	32(a0),d2		; 32 - Panning
(2) 1820/    6F0E : 3D40 0018           		move.w	d0,cdpcm_pitch(a6)
(2) 1821/    6F12 : 1D41 001F           		move.b	d1,cdpcm_env(a6)
(2) 1822/    6F16 : 1D42 001E           		move.b	d2,cdpcm_pan(a6)
(2) 1823/    6F1A : 4E75                		rts
(2) 1824/    6F1C :                     
(2) 1825/    6F1C :                     ; ------------------------------------------------
(2) 1826/    6F1C :                     ; Channel changes
(2) 1827/    6F1C :                     ;
(2) 1828/    6F1C :                     ; *DISABLE TIMER INTERRUPT*
(2) 1829/    6F1C :                     ; ------------------------------------------------
(2) 1830/    6F1C :                     
(2) 1831/    6F1C :                     .update_set:
(2) 1832/    6F1C : 1006                		move.b	d6,d0			; Set PCM to control mode
(2) 1833/    6F1E : 803C 00C0           		or.b	#$C0,d0
(2) 1834/    6F22 : 1940 000F           		move.b	d0,CTREG(a4)
(2) 1835/    6F26 : 6100 FE54           		bsr	CdSub_PCM_Wait
(2) 1836/    6F2A : 302E 0018           		move.w	cdpcm_pitch(a6),d0	; Write frequency
(2) 1837/    6F2E : 1940 0005           		move.b	d0,FDL(a4)
(2) 1838/    6F32 : 6100 FE48           		bsr	CdSub_PCM_Wait
(2) 1839/    6F36 : E048                		lsr.w	#8,d0
(2) 1840/    6F38 : 1940 0007           		move.b	d0,FDH(a4)
(2) 1841/    6F3C : 6100 FE3E           		bsr	CdSub_PCM_Wait
(2) 1842/    6F40 : 102E 001E           		move.b	cdpcm_pan(a6),d0	; Panning
(2) 1843/    6F44 : 1940 0003           		move.b	d0,PAN(a4)
(2) 1844/    6F48 : 6100 FE32           		bsr	CdSub_PCM_Wait
(2) 1845/    6F4C : 102E 001F           		move.b	cdpcm_env(a6),d0	; Envelope
(2) 1846/    6F50 : 1940 0001           		move.b	d0,ENV(a4)
(2) 1847/    6F54 : 6100 FE26           		bsr	CdSub_PCM_Wait
(2) 1848/    6F58 : 4E75                		rts
(2) 1849/    6F5A :                     
(2) 1850/    6F5A :                     ; ============================================================
(2) 1851/    6F5A :                     ; --------------------------------------------------------
(2) 1852/    6F5A :                     ; CdSub_PCM_Stream
(2) 1853/    6F5A :                     ; --------------------------------------------------------
(2) 1854/    6F5A :                     
(2) 1855/    6F5A :                     CdSub_PCM_Stream:
(2) 1856/    6F5A : 4DF9 0000 72D2      		lea	(RAM_CdSub_PcmBuff).l,a6
(2) 1857/    6F60 : 4BF9 FFFF 0000      		lea	(SCPU_pcm),a5
(2) 1858/    6F66 : 49ED 0021           		lea	$21(a5),a4
(2) 1859/    6F6A : 7E07                		moveq	#8-1,d7					; 8 channels
(2) 1860/    6F6C : 7C00                		moveq	#0,d6					; Starting channel number
(2) 1861/    6F6E :                     .pick_stream:
(2) 1862/    6F6E : 4A16                		tst.b	cdpcm_status(a6)			; Streaming enabled?
(2) 1863/    6F70 : 6A6A                		bpl	.no_strm
(2) 1864/    6F72 : 4A6E 001A           		tst.w	cdpcm_cblk(a6)				; Blocks counter
(2) 1865/    6F76 : 6626                		bne.s	.mid_blocks
(2) 1866/    6F78 : 0816 0006           		btst	#6,cdpcm_status(a6)			; Larger sample?
(2) 1867/    6F7C : 675E                		beq	.no_strm				; Finish now then.
(2) 1868/    6F7E : 102C 0002           		move.b	2(a4),d0				; d0 - PCM current position
(2) 1869/    6F82 : 1214                		move.b	(a4),d1
(2) 1870/    6F84 : E148                		lsl.w	#8,d0
(2) 1871/    6F86 : 1001                		move.b	d1,d0
(2) 1872/    6F88 : 322E 001C           		move.w	cdpcm_cout(a6),d1			; d1 - Buffer's pos
(2) 1873/    6F8C : 343C 0800           		move.w	#$1000/2,d2				; Only check halfs
(2) 1874/    6F90 : C042                		and.w	d2,d0
(2) 1875/    6F92 : C242                		and.w	d2,d1
(2) 1876/    6F94 : B141                		eor.w	d0,d1					; Check if halfs changed
(2) 1877/    6F96 : 6744                		beq.s	.no_strm
(2) 1878/    6F98 : 3D7C 0008 001A      		move.w	#($1000/SET_PCMBLK)/2,cdpcm_cblk(a6)	; Make new blocks, half.
(2) 1879/    6F9E :                     .mid_blocks:
(2) 1880/    6F9E : 046E 0001 001A      		subi.w	#1,cdpcm_cblk(a6)			; Count 1 block
(2) 1881/    6FA4 : 363C 00FF           		move.w	#SET_PCMBLK-1,d3			; d3 - Block size
(2) 1882/    6FA8 : 382E 001C           		move.w	cdpcm_cout(a6),d4			; d4 - Current buffer output
(2) 1883/    6FAC : B87C 0F00           		cmp.w	#SET_PCMLAST,d4				; Are we in the last block?
(2) 1884/    6FB0 : 6604                		bne.s	.not_last
(2) 1885/    6FB2 : 0443 0010           		subi.w	#$10,d3					; Skip loop bytes
(2) 1886/    6FB6 :                     .not_last:
(2) 1887/    6FB6 : 206E 0012           		move.l	cdpcm_cread(a6),a0			; a0 - Current Wave data to read
(2) 1888/    6FBA : 222E 000E           		move.l	cdpcm_clen(a6),d1			; d1 - Current wave size
(2) 1889/    6FBE : 612C                		bsr	.make_block
(2) 1890/    6FC0 : 2D41 000E           		move.l	d1,cdpcm_clen(a6)			; Save next wave size
(2) 1891/    6FC4 : 2D48 0012           		move.l	a0,cdpcm_cread(a6)			; Save next wave pos
(2) 1892/    6FC8 : 4A81                		tst.l	d1					; Size is zero? (non-looping only)
(2) 1893/    6FCA : 6604                		bne.s	.next_one
(2) 1894/    6FCC : 08D6 0005           		bset	#5,cdpcm_status(a6)			; Report as finished
(2) 1895/    6FD0 :                     .next_one:
(2) 1896/    6FD0 : 066E 0100 001C      		add.w	#SET_PCMBLK,cdpcm_cout(a6)		; Next output block
(2) 1897/    6FD6 : 026E 0FFF 001C      		andi.w	#$0FFF,cdpcm_cout(a6)			; w/Limit
(2) 1898/    6FDC :                     .no_strm:
(2) 1899/    6FDC : DCFC 0020           		adda	#cdpcm_len,a6				; Next PCM buffer
(2) 1900/    6FE0 : 5246                		addq.w	#1,d6					; Next PCM channel number
(2) 1901/    6FE2 : D8FC 0004           		adda	#4,a4					; Next PCM read
(2) 1902/    6FE6 : 51CF FF86           		dbf	d7,.pick_stream
(2) 1903/    6FEA : 4E75                		rts
(2) 1904/    6FEC :                     
(2) 1905/    6FEC :                     ; --------------------------------------------------------
(2) 1906/    6FEC :                     ; Fill wave block
(2) 1907/    6FEC :                     ;
(2) 1908/    6FEC :                     ; Input:
(2) 1909/    6FEC :                     ; a6 - Current channel buffer
(2) 1910/    6FEC :                     ; a5 - PCM chip
(2) 1911/    6FEC :                     ; a0 - wave data to write
(2) 1912/    6FEC :                     ; d1 - channel current length
(2) 1913/    6FEC :                     ; d3 - block size - 1
(2) 1914/    6FEC :                     ; d4 - output location in wave ram & $0FFF
(2) 1915/    6FEC :                     ; d6 - current channel
(2) 1916/    6FEC :                     ; --------------------------------------------------------
(2) 1917/    6FEC :                     
(2) 1918/    6FEC :                     .make_block:
(2) 1919/    6FEC : 1006                		move.b	d6,d0			; Set PCM memory mode + current channel
(2) 1920/    6FEE : 803C 0080           		or.b	#$80,d0
(2) 1921/    6FF2 : 1B40 000F           		move.b	d0,CTREG(a5)
(2) 1922/    6FF6 : 6100 FD84           		bsr	CdSub_PCM_Wait
(2) 1923/    6FFA : 43ED 2000           		lea	$2000(a5),a1		; a1 - WAVE RAM output
(2) 1924/    6FFE : D844                		add.w	d4,d4			; Pos * 2
(2) 1925/    7000 : D2C4                		adda	d4,a1			; add to a1
(2) 1926/    7002 : 3803                		move.w	d3,d4			; d4 - block size - 1
(2) 1927/    7004 : 7000                		moveq	#0,d0
(2) 1928/    7006 : 4A81                		tst.l	d1
(2) 1929/    7008 : 673C                		beq.s	.last_bytes
(2) 1930/    700A : 082E 0000 0001      		btst	#0,cdpcm_flags(a6)	; Looping enabled?
(2) 1931/    7010 : 6722                		beq	.end_point
(2) 1932/    7012 :                     
(2) 1933/    7012 :                     ; ----------------------------------------
(2) 1934/    7012 :                     ; Wave loops
(2) 1935/    7012 :                     ; ----------------------------------------
(2) 1936/    7012 :                     
(2) 1937/    7012 :                     .loop_point:
(2) 1938/    7012 : 5381                		subq.l	#1,d1			; Decrement current len
(2) 1939/    7014 : 6610                		bne.s	.strlen_it
(2) 1940/    7016 : 206E 0002           		movea.l	cdpcm_start(a6),a0	; a2 - WAVE start
(2) 1941/    701A : 242E 000A           		move.l	cdpcm_loop(a6),d2	; d0 - Loop start point
(2) 1942/    701E : D1C2                		add.l	d2,a0
(2) 1943/    7020 : 222E 0006           		move.l	cdpcm_length(a6),d1	; d2 - NEW length to set
(2) 1944/    7024 : 9282                		sub.l	d2,d1
(2) 1945/    7026 :                     .strlen_it:
(2) 1946/    7026 : 1018                		move.b	(a0)+,d0		; Write wave data and
(2) 1947/    7028 : 103B 0024           		move.b	.wave_list(pc,d0.w),d0
(2) 1948/    702C : 32C0                		move.w	d0,(a1)+
(2) 1949/    702E : 51CC FFE2           		dbf	d4,.loop_point
(2) 1950/    7032 : 4E75                		rts
(2) 1951/    7034 :                     
(2) 1952/    7034 :                     ; ----------------------------------------
(2) 1953/    7034 :                     ; Wave doesn't loop
(2) 1954/    7034 :                     ; ----------------------------------------
(2) 1955/    7034 :                     
(2) 1956/    7034 :                     .end_point:
(2) 1957/    7034 : 5381                		subq.l	#1,d1			; Count length
(2) 1958/    7036 : 670E                		beq.s	.last_bytes		; If == 0, finished
(2) 1959/    7038 : 1018                		move.b	(a0)+,d0
(2) 1960/    703A : 103B 0012           		move.b	.wave_list(pc,d0.w),d0
(2) 1961/    703E : 32C0                		move.w	d0,(a1)+
(2) 1962/    7040 : 51CC FFF2           		dbf	d4,.end_point
(2) 1963/    7044 : 4E75                		rts
(2) 1964/    7046 :                     .last_bytes:
(2) 1965/    7046 : 32C0                		move.w	d0,(a1)+
(2) 1966/    7048 : 51CC FFFC           		dbf	d4,.last_bytes
(2) 1967/    704C : 4E75                		rts
(2) 1968/    704E :                     
(2) 1969/    704E :                     ; =====================================================================
(2) 1970/    704E :                     ; ----------------------------------------------------------------
(2) 1971/    704E :                     ; WAV to PCM table conversion
(2) 1972/    704E :                     ; ----------------------------------------------------------------
(2) 1973/    704E :                     
(2) 1974/    704E :                     .wave_list:
(2) 1975/    704E : FEFE FDFC FBFA      	dc.b $FE,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0
             7054 : F9F8 F7F6 F5F4 
             705A : F3F2 F1F0          
(2) 1976/    705E : EFEE EDEC EBEA      	dc.b $EF,$EE,$ED,$EC,$EB,$EA,$E9,$E8,$E7,$E6,$E5,$E4,$E3,$E2,$E1,$E0
             7064 : E9E8 E7E6 E5E4 
             706A : E3E2 E1E0          
(2) 1977/    706E : DFDE DDDC DBDA      	dc.b $DF,$DE,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D6,$D5,$D4,$D3,$D2,$D1,$D0
             7074 : D9D8 D7D6 D5D4 
             707A : D3D2 D1D0          
(2) 1978/    707E : CFCE CDCC CBCA      	dc.b $CF,$CE,$CD,$CC,$CB,$CA,$C9,$C8,$C7,$C6,$C5,$C4,$C3,$C2,$C1,$C0
             7084 : C9C8 C7C6 C5C4 
             708A : C3C2 C1C0          
(2) 1979/    708E : BFBE BDBC BBBA      	dc.b $BF,$BE,$BD,$BC,$BB,$BA,$B9,$B8,$B7,$B6,$B5,$B4,$B3,$B2,$B1,$B0
             7094 : B9B8 B7B6 B5B4 
             709A : B3B2 B1B0          
(2) 1980/    709E : AFAE ADAC ABAA      	dc.b $AF,$AE,$AD,$AC,$AB,$AA,$A9,$A8,$A7,$A6,$A5,$A4,$A3,$A2,$A1,$A0
             70A4 : A9A8 A7A6 A5A4 
             70AA : A3A2 A1A0          
(2) 1981/    70AE : 9F9E 9D9C 9B9A      	dc.b $9F,$9E,$9D,$9C,$9B,$9A,$99,$98,$97,$96,$95,$94,$93,$92,$91,$90
             70B4 : 9998 9796 9594 
             70BA : 9392 9190          
(2) 1982/    70BE : 8F8E 8D8C 8B8A      	dc.b $8F,$8E,$8D,$8C,$8B,$8A,$89,$88,$87,$86,$85,$84,$83,$82,$81,$80
             70C4 : 8988 8786 8584 
             70CA : 8382 8180          
(2) 1983/    70CE : 0001 0203 0405      	dc.b $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
             70D4 : 0607 0809 0A0B 
             70DA : 0C0D 0E0F          
(2) 1984/    70DE : 1011 1213 1415      	dc.b $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F
             70E4 : 1617 1819 1A1B 
             70EA : 1C1D 1E1F          
(2) 1985/    70EE : 2021 2223 2425      	dc.b $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F
             70F4 : 2627 2829 2A2B 
             70FA : 2C2D 2E2F          
(2) 1986/    70FE : 3031 3233 3435      	dc.b $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3A,$3B,$3C,$3D,$3E,$3F
             7104 : 3637 3839 3A3B 
             710A : 3C3D 3E3F          
(2) 1987/    710E : 4041 4243 4445      	dc.b $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$4F
             7114 : 4647 4849 4A4B 
             711A : 4C4D 4E4F          
(2) 1988/    711E : 5051 5253 5455      	dc.b $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5A,$5B,$5C,$5D,$5E,$5F
             7124 : 5657 5859 5A5B 
             712A : 5C5D 5E5F          
(2) 1989/    712E : 6061 6263 6465      	dc.b $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6A,$6B,$6C,$6D,$6E,$6F
             7134 : 6667 6869 6A6B 
             713A : 6C6D 6E6F          
(2) 1990/    713E : 7071 7273 7475      	dc.b $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7A,$7B,$7C,$7D,$7E,$7F
             7144 : 7677 7879 7A7B 
             714A : 7C7D 7E7F          
(2) 1991/    714E :                     	align 2
(2) 1992/    714E :                     
(2) 1993/    714E :                     ; ====================================================================
(2) 1994/    714E :                     ; ----------------------------------------------------------------
(2) 1995/    714E :                     ; Short .w variables
(2) 1996/    714E :                     ; ----------------------------------------------------------------
(2) 1997/    714E :                     
(2) 1998/    714E :                     			align $80
(2) 1999/    7180 :                     SCPU_RAM:
(2) 2000/    7180 : (MACRO)              			memory SCPU_RAM
(2) 2000/    7180 : =$7180               GLBL_LASTPC     := *
(2) 2000/    2180 :                                     dephase
(2) 2000/    7180 :                                     phase SCPU_RAM
(2) 2000/    7180 : =$7180               GLBL_LASTORG    := *
(2) 2001/    7180 :                     RAM_CdSub_StampNum	ds.w 1
(2) 2002/    7182 :                     RAM_CdSub_StampW	ds.w 1				; Safer W/H reads
(2) 2003/    7184 :                     RAM_CdSub_StampH	ds.w 1				; ''
(2) 2004/    7186 :                     RAM_CdSub_StampEnbl	ds.w 1				; Flag to Disable/Enable Stamp rendering *IMPORTANT*
(2) 2005/    7188 :                     RAM_CdSub_StampBusy	ds.w 1				; Stamp is busy drawing, Level 1 clears this
(2) 2006/    718A :                     RAM_CdSub_StampSize	ds.w 1				; %msr m-Map size: 1x1/16x16 s-Stamp 16x16/32x32 r-Repeat No/Yes
(2) 2007/    718C :                     RAM_CdSub_StampNextWr	ds.w 1
(2) 2008/    718E :                     RAM_CdSub_StampNextRd	ds.w 1
(2) 2009/    7190 :                     RAM_CdSub_DotClearFlag	ds.w 1
(2) 2010/    7192 :                     RAM_CdSub_StampIndxW	ds.w 1
(2) 2011/    7194 :                     RAM_CdSub_StampCBuff	ds.w 1
(2) 2012/    7196 :                     RAM_CdSub_StampPending	ds.w 1
(2) 2013/    7198 :                     RAM_CdSub_IrqIndex	ds.w 1
(2) 2014/    719A :                     RAM_CdSub_PcmEnbl	ds.b 1				; PCM Enable bits
(2) 2015/    719B :                     RAM_CdSub_PcmReqUpd	ds.b 1				; PCM new data request
(2) 2016/    719C :                     RAM_CdSub_StampReqUpd	ds.b 1
(2) 2017/    719D :                     RAM_CdSub_PcmMkNew	ds.b 1
(2) 2018/    719E :                     			align 2
(2) 2019/    719E :                     
(2) 2020/    719E :                     ; ----------------------------------------------------------------
(2) 2021/    719E :                     ; Buffers after $8000
(2) 2022/    719E :                     
(2) 2023/    719E :                     RAM_CdSub_StampProc	ds.b stmpc_len
(2) 2024/    71C6 :                     RAM_CdSub_StampOutBox	ds.b stmpi_len
(2) 2025/    71D2 :                     RAM_CdSub_StampList	ds.l 2*MAX_MCDSTAMPS		; Location and Z sort pos
(2) 2026/    72D2 :                     RAM_CdSub_PcmBuff	ds.b 8*cdpcm_len		; PCM Streaming buffer
(2) 2027/    73D2 :                     RAM_CdSub_PcmTable	ds.b 8*8			; PCM table recieved from Z80
(2) 2028/    7412 :                     RAM_CdSub_IsoFiles	ds.b $800*(8+1)			; 8 sectors + dummy $120
(2) 2029/    BC12 :                     RAM_CdSub_GotData	ds.b $800*($10+1)		; 10 sectors + dummy $120
(2) 2030/   14412 :                     
(2) 2031/   14412 :                     ; ====================================================================
(2) 2032/   14412 :                     ; ----------------------------------------------------------------
(2) 2033/   14412 :                     ; BIOS call input/output buffers
(2) 2034/   14412 :                     ; ----------------------------------------------------------------
(2) 2035/   14412 :                     
(2) 2036/   14412 :                     RAM_CdSub_FsBuff	ds.l $20
(2) 2037/   14492 :                     RAM_CdSub_CurrSaveInfo	ds.b $10
(2) 2038/   144A2 :                     RAM_CdSub_BramWork	ds.b $640
(2) 2039/   14AE2 :                     RAM_CdSub_BramStrings	ds.b $C
(2) 2040/   14AEE :                     RAM_CdSub_SramCopy	ds.b SET_SRAMSIZE
(2) 2041/   14CEE :                     sizeof_subcpu		ds.l 0
(2) 2042/   14CF0 : (MACRO)              			endmemory
(2) 2042/    FCF0 :                     .here:          dephase
(2) 2042/    FCF0 :                                     ds.b -(.here-GLBL_LASTORG)
(2) 2042/    7180 :                                     phase GLBL_LASTPC
(2) 2043/    7180 : (MACRO)              			erreport "SUB-CPU IP",sizeof_subcpu,$20000
(2) 2044/    7180 :                     
(2) 2045/    7180 :                     ; ====================================================================
(2) 2046/    7180 :                     ; ----------------------------------------------------------------
(2) 2047/    7180 :                     ; SUB-CPU data
(2) 2048/    7180 :                     ; ----------------------------------------------------------------
(2) 2049/    7180 :                     
(2) 2050/    2180 :                     			dephase
(2) 2051/   40000 :                     			phase $40000		; <-- MANUAL location on Sub-CPU area
(2) 2052/   40000 :                     SCPU_DATA:
(2) 2053/    2180 :                     			dephase
(2) 2054/    2180 :                     			dephase
(2) 2055/    2180 :                     
(1)   79/    2180 :                     SP_End:
(1)   80/    2180 :                     		align 2
(1)   81/    2180 :                     
(1)   82/    2180 :                     ; ====================================================================
(1)   83/    2180 :                     ; ----------------------------------------------------------------
(1)   84/    2180 :                     ; Super-jump
(1)   85/    2180 :                     ; ----------------------------------------------------------------
(1)   86/    2180 :                     
(1)   87/    2180 :                     		align $2800
(1)   88/    2800 :                     MCD_Main:
(1)   89/    2800 :                     	; --------------------------------
(1)   90/    2800 :                     	; Quick fade-out
(1)   91/    2800 :                     	; --------------------------------
(1)   92/    2800 : 4DF9 00C0 0000      		lea	(vdp_data),a6
(1)   93/    2806 : 2D7C 0000 0020      		move.l	#$00000020,4(a6)	; Copy ALL palette colors
             280C : 0004             
(1)   94/    280E : 4BF8 FF80           		lea	($FFFFFF80).w,a5
(1)   95/    2812 : 204D                		move.l	a5,a0
(1)   96/    2814 : 323C 003F           		move.w	#64-1,d1
(1)   97/    2818 :                     .copy_colors:
(1)   98/    2818 : 30D6                		move.w	(a6),(a0)+
(1)   99/    281A : 51C9 FFFC           		dbf	d1,.copy_colors
(1)  100/    281E :                     .fade_out:
(1)  101/    281E : 302E 0004           		move.w	4(a6),d0		; Wait VBlank
(1)  102/    2822 : 0800 0003           		btst	#3,d0
(1)  103/    2826 : 67F6                		beq.s	.fade_out
(1)  104/    2828 : 204D                		move.l	a5,a0
(1)  105/    282A : 3C3C 003F           		move.w	#64-1,d6		; Check all 64 colors
(1)  106/    282E : 7E00                		moveq	#0,d7			; Exit flag
(1)  107/    2830 :                     .next_color:
(1)  108/    2830 : 3010                		move.w	(a0),d0
(1)  109/    2832 : 673C                		beq.s	.nothing
(1)  110/    2834 : 3200                		move.w	d0,d1
(1)  111/    2836 : 0240 0EE0           		andi.w	#$EE0,d0
(1)  112/    283A : 0241 000E           		andi.w	#$00E,d1
(1)  113/    283E : 6704                		beq.s	.no_red
(1)  114/    2840 : 5541                		subq.w	#2,d1
(1)  115/    2842 : 5247                		addq.w	#1,d7
(1)  116/    2844 :                     .no_red:
(1)  117/    2844 : 8041                		or.w	d1,d0
(1)  118/    2846 : 3200                		move.w	d0,d1
(1)  119/    2848 : 0240 0E0E           		andi.w	#$E0E,d0
(1)  120/    284C : 0241 00E0           		andi.w	#$0E0,d1
(1)  121/    2850 : 6706                		beq.s	.no_green
(1)  122/    2852 : 0441 0020           		subi.w	#$020,d1
(1)  123/    2856 : 5247                		addq.w	#1,d7
(1)  124/    2858 :                     .no_green:
(1)  125/    2858 : 8041                		or.w	d1,d0
(1)  126/    285A : 3200                		move.w	d0,d1
(1)  127/    285C : 0240 00EE           		andi.w	#$0EE,d0
(1)  128/    2860 : 0241 0E00           		andi.w	#$E00,d1
(1)  129/    2864 : 6706                		beq.s	.no_blue
(1)  130/    2866 : 0441 0200           		subi.w	#$200,d1
(1)  131/    286A : 5247                		addq.w	#1,d7
(1)  132/    286C :                     .no_blue:
(1)  133/    286C : 8041                		or.w	d1,d0
(1)  134/    286E : 3080                		move.w	d0,(a0)
(1)  135/    2870 :                     .nothing:
(1)  136/    2870 : D0FC 0002           		adda	#2,a0
(1)  137/    2874 : 51CE FFBA           		dbf	d6,.next_color
(1)  138/    2878 : 2D7C C000 0000      		move.l	#$C0000000,4(a6)
             287E : 0004             
(1)  139/    2880 : 3C3C 003F           		move.w	#64-1,d6
(1)  140/    2884 : 204D                		move.l	a5,a0
(1)  141/    2886 :                     .copy_new:
(1)  142/    2886 : 3C98                		move.w	(a0)+,(a6)
(1)  143/    2888 : 51CE FFFC           		dbf	d6,.copy_new
(1)  144/    288C :                     .wait_next:
(1)  145/    288C : 302E 0004           		move.w	4(a6),d0
(1)  146/    2890 : 0800 0003           		btst	#3,d0
(1)  147/    2894 : 66F6                		bne.s	.wait_next
(1)  148/    2896 :                     	; --------------------------------
(1)  149/    2896 : 4A47                		tst.w	d7
(1)  150/    2898 : 6684                		bne.s	.fade_out
(1)  151/    289A : 204D                		move.l	a5,a0
(1)  152/    289C : 7C00                		moveq	#0,d6
(1)  153/    289E : 7E3F                		moveq	#64-1,d7
(1)  154/    28A0 :                     .cleanup:
(1)  155/    28A0 : 30C6                		move.w	d6,(a0)+
(1)  156/    28A2 : 51CF FFFC           		dbf	d7,.cleanup
(1)  157/    28A6 :                     
     124/    28A6 : 41FA 02A6           		lea	Md_SysCode(pc),a0			; Copy NIKONA code to RAM
     125/    28AA : 43F9 FFFF 0000      		lea	(RAM_SystemCode),a1
     126/    28B0 : 303C 2BCD           		move.w	#((Md_SysCode_e-Md_SysCode))-1,d0
     127/    28B4 :                     .copy_code:
     128/    28B4 : 12D8                		move.b	(a0)+,(a1)+
     129/    28B6 : 51C8 FFFC           		dbf	d0,.copy_code
     130/    28BA :                     	; ** CD32X boot code **
     132/    28BA : 41FA 0284           		lea	filen_marscode(pc),a0			; Load SH2 from disc to WORD-RAM
     133/    28BE : 4EB9 FFFF 264E      		jsr	(System_MdMcd_RdFile_WRAM).l
     134/    28C4 :                     		include "nikona/mcd/marscd.asm"			; Initialize 32X side
(1)    1/    28C4 :                     ; ===========================================================================
(1)    2/    28C4 :                     ; -------------------------------------------------------------------
(1)    3/    28C4 :                     ; 32X BOOT FOR SEGA CD, modified from original.
(1)    4/    28C4 :                     ;
(1)    5/    28C4 :                     ; SH2 CODE MUST BE ALREADY LOADED ON WORD-RAM AND WITH
(1)    6/    28C4 :                     ; PERMISSION SET TO MAIN.
(1)    7/    28C4 :                     ; -------------------------------------------------------------------
(1)    8/    28C4 :                     
(1)    9/    28C4 : 4BF9 00A1 5100      		lea	(sysmars_reg).l,a5
(1)   10/    28CA : 0CB9 4D41 5253      		cmp.l	#"MARS",(sysmars_id).l	; Check MARS ID
             28D0 : 00A1 30EC          
(1)   11/    28D4 : 6600 00AA           		bne	MarsError
(1)   12/    28D8 :                     .sh_wait:
(1)   13/    28D8 : 7000                		moveq	#0,d0
(1)   14/    28DA : 082D 0007 0001      		btst.b	#7,adapter+1(a5)	; Wait for SH2 reset
(1)   15/    28E0 : 67F6                		beq.b	.sh_wait
(1)   16/    28E2 : 082D 0000 0001      		btst.b	#0,adapter+1(a5)	; Check Adapter mode
(1)   17/    28E8 : 6600 008C           		bne	Hot_Start		; If already enabled, it's a Hot Start
(1)   18/    28EC :                     .cold_start:
(1)   19/    28EC : 1B7C 0001 0001      		move.b	#%01,adapter+1(a5)	; Turn ON the 32X and Reset SH2
(1)   20/    28F2 : 3E3C 4AE2           		move.w	#19170,d7		; 8
(1)   21/    28F6 :                     .res_wait:
(1)   22/    28F6 : 51CF FFFE           		dbra	d7,.res_wait		; 12*d7+10
(1)   23/    28FA : 2B40 0020           		move.l	d0,comm0(a5)
(1)   24/    28FE : 2B40 0024           		move.l	d0,comm4(a5)
(1)   25/    2902 : 1B7C 0003 0001      		move.b	#%11,adapter+1(a5)	; Adapter enable + Cancel/Stop SH2 Reset
(1)   26/    2908 :                     ; 		vdp_showme $0EE
(1)   27/    2908 :                     .fm3
(1)   28/    2908 : 0895 0007           		bclr.b	#7,(a5)			; Set SVDP to Genesis
(1)   29/    290C : 66FA                		bne.b	.fm3
(1)   30/    290E : 3B40 0002           		move.w	d0,$02(a5)		; Interrupt Reg.
(1)   31/    2912 : 3B40 0004           		move.w	d0,$04(a5)		; Bank Reg.
(1)   32/    2916 : 3B40 0006           		move.w	d0,$06(a5)		; DREQ Control Reg.
(1)   33/    291A : 2B40 0008           		move.l	d0,$08(a5)		; DREQ Source Address Reg.
(1)   34/    291E : 2B40 000C           		move.l	d0,$0C(a5)		; DREQ Destination Address Reg.
(1)   35/    2922 : 3B40 0010           		move.w	d0,$10(a5)		; DREQ Length Reg.
(1)   36/    2926 : 3B40 0030           		move.w	d0,$30(a5)		; PWM Control
(1)   37/    292A : 3B40 0032           		move.w	d0,$32(a5)		; PWM fs Reg.
(1)   38/    292E : 3B40 0038           		move.w	d0,$38(a5)		; PWM Mono Reg.
(1)   39/    2932 : 3B40 0080           		move.w	d0,$80(a5)		; SVDP: Bitmap Mode Reg
(1)   40/    2936 : 3B40 0082           		move.w	d0,$82(a5)		; SVDP: Shift Reg
(1)   41/    293A :                     .fs0:
(1)   42/    293A : 08AD 0000 008B      		bclr.b	#0,$8B(a5)		; FS = 0
(1)   43/    2940 : 66F8                		bne.b	.fs0
(1)   44/    2942 : 6144                		bsr	FrameClear
(1)   45/    2944 :                     .fs1:
(1)   46/    2944 : 08ED 0000 008B      		bset.b	#0,$8B(a5)		; FS = 1
(1)   47/    294A : 67F8                		beq.b	.fs1
(1)   48/    294C : 613A                		bsr	FrameClear
(1)   49/    294E : 08AD 0000 008B      		bclr.b	#0,$8B(a5)		; FS = 0
(1)   50/    2954 : 6172                		bsr	PaletteClear		; ----	Palette RAM Clear
(1)   51/    2956 : 303C 0080           		move	#$80,d0			; ----	SH2 Check
(1)   52/    295A : 222D 0020           		move.l	$20(a5),d1		; SDRAM Self Check
(1)   53/    295E : B2BC 5344 4552      		cmp.l	#"SDER",d1
(1)   54/    2964 : 671A                		beq	MarsError
(1)   55/    2966 : 7000                		moveq	#0,d0			; ----	Communication Reg. Clear
(1)   56/    2968 : 2B40 0028           		move.l	d0,$28(a5)		; 8
(1)   57/    296C : 2B40 002C           		move.l	d0,$2C(a5)		; 12
(1)   58/    2970 : 44FC 0000           		move	#0,ccr			; Complete
(1)   59/    2974 : 607A                		bra.s	IcdAllEnd
(1)   60/    2976 :                     Hot_Start:
(1)   61/    2976 : 3B40 0006           		move.w	d0,6(a5)		; DREQ Control Reg.
(1)   62/    297A : 303C 8000           		move.w	#$8000,d0
(1)   63/    297E : 6070                		bra.s	IcdAllEnd
(1)   64/    2980 :                     
(1)   65/    2980 :                     ; ----------------------------------------------------------------
(1)   66/    2980 :                     ; No 32X detected
(1)   67/    2980 :                     ; ----------------------------------------------------------------
(1)   68/    2980 :                     
(1)   69/    2980 :                     MarsError:
(1)   70/    2980 : 44FC 0001           		move	#1,ccr			; Return error carryflag
(1)   71/    2984 : 4E75                		rts
(1)   72/    2986 :                     
(1)   73/    2986 :                     ; ----------------------------------------------------------------
(1)   74/    2986 :                     ; Clear framebuffer
(1)   75/    2986 :                     ; ----------------------------------------------------------------
(1)   76/    2986 :                     
(1)   77/    2986 :                     		align 4
(1)   78/    2988 :                     FrameClear:
(1)   79/    2988 : 48E7 C140           		movem.l	d0/d1/d7/a1,-(a7)
(1)   80/    298C : 43F9 00A1 5180      		lea	($A15180).l,a1
(1)   81/    2992 :                     .fm1
(1)   82/    2992 : 08A9 0007 FF80      		bclr.b	#7,-$80(a1)		; MD access
(1)   83/    2998 : 66F8                		bne.b	.fm1
(1)   84/    299A : 3E3C 00FF           		move.w	#($20000/$200-1),d7
(1)   85/    299E : 7000                		moveq	#0,d0
(1)   86/    29A0 : 7200                		moveq	#0,d1
(1)   87/    29A2 : 337C FFFF 0004      		move.w	#-1,$4(a1)		; Fill Length Reg.
(1)   88/    29A8 :                     .fill0:
(1)   89/    29A8 : 3341 0006           		move.w	d1,$6(a1)		; Fill Start Address Reg.
(1)   90/    29AC : 3340 0008           		move.w	d0,$8(a1)		; Fill Data Reg.
(1)   91/    29B0 : 4E71                		nop
(1)   92/    29B2 :                     .fen0:
(1)   93/    29B2 : 0829 0001 000B      		btst.b	#1,$B(a1)		; FEN = 0 ?
(1)   94/    29B8 : 66F8                		bne.b	.fen0
(1)   95/    29BA : D27C 0100           		add.w	#$100,d1		; Address = +200H
(1)   96/    29BE : 51CF FFE8           		dbra	d7,.fill0
(1)   97/    29C2 : 4CDF 0283           		movem.l	(a7)+,d0/d1/d7/a1
(1)   98/    29C6 : 4E75                		rts
(1)   99/    29C8 :                     
(1)  100/    29C8 :                     ; ----------------------------------------------------------------
(1)  101/    29C8 :                     ; Palette RAM Clear
(1)  102/    29C8 :                     ; ----------------------------------------------------------------
(1)  103/    29C8 :                     
(1)  104/    29C8 :                     PaletteClear:
(1)  105/    29C8 : 48E7 8180           		movem.l	d0/d7/a0,-(a7)
(1)  106/    29CC : 41F9 00A1 5200      		lea	($A15200).l,a0
(1)  107/    29D2 :                     .fm2
(1)  108/    29D2 : 08A8 0007 FF00      		bclr.b	#7,-$100(a0)		; MD access
(1)  109/    29D8 : 66F8                		bne.b	.fm2
(1)  110/    29DA : 3E3C 001F           		move.w	#(256/2/4-1),d7
(1)  111/    29DE :                     .pl:
(1)  112/    29DE : 20C0                		move.l	d0,(a0)+
(1)  113/    29E0 : 20C0                		move.l	d0,(a0)+
(1)  114/    29E2 : 20C0                		move.l	d0,(a0)+
(1)  115/    29E4 : 20C0                		move.l	d0,(a0)+
(1)  116/    29E6 : 51CF FFF6           		dbra	d7,.pl
(1)  117/    29EA : 4CDF 0181           		movem.l	(a7)+,d0/d7/a0
(1)  118/    29EE : 4E75                		rts
(1)  119/    29F0 :                     
(1)  120/    29F0 :                     ; ===================================================================
(1)  121/    29F0 :                     ; Start
(1)  122/    29F0 :                     ;
(1)  123/    29F0 :                     ; bcc  | 32X active
(1)  124/    29F0 :                     ; bcs  | No 32X detected
(1)  125/    29F0 :                     ; d0.w | %h0000000 00000000
(1)  126/    29F0 :                     ;         h - Cold Start / Hot Start
(1)  127/    29F0 :                     ; ===================================================================
(1)  128/    29F0 :                     
(1)  129/    29F0 :                     IcdAllEnd:
(1)  130/    29F0 : 65FE                		bcs	*				; <-- Nothing
(1)  131/    29F2 : 4A40                		tst.w	d0
(1)  132/    29F4 : 6B00 00AE           		bmi	.soft_reset
(1)  133/    29F8 :                     
(1)  134/    29F8 :                     	; ------------------------------------------------
(1)  135/    29F8 :                     	; Send the entire SH2 code in split sections
(1)  136/    29F8 :                     	; ------------------------------------------------
(1)  137/    29F8 : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6
(1)  138/    29FE :                     .wait_fb:
(1)  139/    29FE : 0896 0007           		bclr	#7,(a6)				; Set FM bit to MD
(1)  140/    2A02 : 66FA                		bne.s	.wait_fb			; Wait until it accepts.
(1)  141/    2A04 :                     	; --------------------------------
(1)  142/    2A04 :                     	; FRAMEBUFFER 1
(1)  143/    2A04 : 082E 0007 008A      .wait_f1fb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  144/    2A0A : 67F8                		beq.s	.wait_f1fb
(1)  145/    2A0C : 08EE 0000 008B      .wait_f1:	bset	#0,$80+$0B(a6)			; Set BUFFER 1
(1)  146/    2A12 : 67F8                		beq.s	.wait_f1
(1)  147/    2A14 : 41F9 0021 FFC8      		lea	($200000+($20000-$38)).l,a0	; Read SECOND half of SH2 code
(1)  148/    2A1A : 43F9 0084 0000      		lea	($840000).l,a1
(1)  149/    2A20 : 2E3C 0000 7FFF      		move.l	#(($20000)/4)-1,d7		; Thie size for this section
(1)  150/    2A26 :                     .send_half:
(1)  151/    2A26 : 22D8                		move.l	(a0)+,(a1)+
(1)  152/    2A28 : 51CF FFFC           		dbf	d7,.send_half
(1)  153/    2A2C :                     	; --------------------------------
(1)  154/    2A2C :                     	; FRAMEBUFFER 0
(1)  155/    2A2C : 082E 0007 008A      .wait_f0fb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  156/    2A32 : 67F8                		beq.s	.wait_f0fb
(1)  157/    2A34 : 08AE 0000 008B      .wait_f0:	bclr	#0,$80+$0B(a6)			; Set BUFFER 0
(1)  158/    2A3A : 66F8                		bne.s	.wait_f0
(1)  159/    2A3C : 41FA 0074           		lea	MarsInitHeader(pc),a0		; Read Module
(1)  160/    2A40 : 43F9 0084 0000      		lea	($840000).l,a1
(1)  161/    2A46 : 3E3C 000D           		move.w	#$0E-1,d7
(1)  162/    2A4A :                     .send_head:
(1)  163/    2A4A : 22D8                		move.l	(a0)+,(a1)+
(1)  164/    2A4C : 51CF FFFC           		dbf	d7,.send_head
(1)  165/    2A50 : 41F9 0020 0000      		lea	($200000).l,a0			; Read the FIRST half of SH2
(1)  166/    2A56 : 2E3C 0000 7FF1      		move.l	#(($20000-$38)/4)-1,d7		; Size for this section
(1)  167/    2A5C :                     .send_code:
(1)  168/    2A5C : 22D8                		move.l	(a0)+,(a1)+
(1)  169/    2A5E : 51CF FFFC           		dbf	d7,.send_code
(1)  170/    2A62 :                     	; --------------------------------
(1)  171/    2A62 : 082E 0007 008A      .wait_cdfb:	btst	#7,$80+$0A(a6)			; Wait for SVDP's VBlank
(1)  172/    2A68 : 67F8                		beq.s	.wait_cdfb
(1)  173/    2A6A : 08D6 0007           .wait_adapter:	bset	#7,(a6)				; Set FM bit to 32X
(1)  174/    2A6E : 67FA                		beq.s	.wait_adapter
(1)  175/    2A70 : 4DF9 00A1 5100      		lea	($A15100).l,a6
(1)  176/    2A76 : 2D7C 5F43 445F      		move.l	#"_CD_",$20(a6)			; Write CD boot flag
             2A7C : 0020             
(1)  177/    2A7E : 0CAE 4D5F 4F4B      .master:	cmp.l	#"M_OK",$20(a6)			; Check _OK flags
             2A84 : 0020             
(1)  178/    2A86 : 66F6                		bne.s	.master
(1)  179/    2A88 : 0CAE 535F 4F4B      .slave:		cmp.l	#"S_OK",$24(a6)
             2A8E : 0024             
(1)  180/    2A90 : 66F6                		bne.s	.slave
(1)  181/    2A92 : 202E 0020           .wait_mstr:	move.l	$20(a6),d0			; Status tags cleared?
(1)  182/    2A96 : 66FA                		bne.s	.wait_mstr
(1)  183/    2A98 : 202E 0024           .wait_slv:	move.l	$24(a6),d0
(1)  184/    2A9C : 66FA                		bne.s	.wait_slv
(1)  185/    2A9E : 7000                		moveq	#0,d0				; Clear both Master and Slave comm's
(1)  186/    2AA0 : 2D40 002C           		move.l	d0,comm12(a6)
(1)  187/    2AA4 :                     .soft_reset:
(1)  188/    2AA4 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  189/    2AAA : 2CBC 8004 8104      		move.l	#$80048104,(a6)			; Default top VDP regs
(1)  197/    2AB0 :                     ; 		vdp_showme $000
(1)  198/    2AB0 : 6038                		bra	MarsJumpHere
(1)  199/    2AB2 :                     
(1)  200/    2AB2 :                     ; ----------------------------------------------------------------
(1)  201/    2AB2 :                     ; MARS CD header
(1)  202/    2AB2 :                     ; ----------------------------------------------------------------
(1)  203/    2AB2 :                     MarsInitHeader:
(1)  204/    2AB2 : 4D41 5253 204E      		dc.b "MARS NIKONA-SDK "			; Module name
             2AB8 : 494B 4F4E 412D 
             2ABE : 5344 4B20          
(1)  205/    2AC2 : 0000 0000           		dc.l $00000000				; Version
(1)  206/    2AC6 : 0000 0000           		dc.l $00000000				; Not Used
(1)  207/    2ACA : 0600 0000           		dc.l $06000000				; SDRAM area
(1)  209/    2ACE : 0020 0000           		dc.l $200000				; DUMMY size for emulation
(1)  213/    2AD2 : 0600 07AC           		dc.l SH2_M_Entry			; Master SH2 PC (SH2 area)
(1)  214/    2AD6 : 0600 0EA4           		dc.l SH2_S_Entry			; Slave SH2 PC (SH2 area)
(1)  215/    2ADA : 0600 0000           		dc.l SH2_Master				; Master SH2 default VBR
(1)  216/    2ADE : 0600 0128           		dc.l SH2_Slave				; Slave SH2 default VBR
(1)  217/    2AE2 : 0000 0000           		dc.l $00000000				; Not Used
(1)  218/    2AE6 : 0000 0000           		dc.l $00000000				; Not Used
(1)  219/    2AEA :                     		align 2
(1)  220/    2AEA :                     ; ----------------------------------------------------------------
(1)  221/    2AEA :                     MarsJumpHere:
(1)  222/    2AEA : 08F9 0000 00A1      		bset	#0,(sysmars_reg+dreqctl+1).l	; Permanent RV=1
             2AF0 : 5107             
(1)  223/    2AF2 :                     
     136/    2AF2 : 41FA 003E           		lea	filen_z80file(pc),a0			; Load Z80 data to Word-RAM
     137/    2AF6 : 4EB9 FFFF 264E      		jsr	(System_MdMcd_RdFile_WRAM).l		; Sound_Init will read from there.
     138/    2AFC : 41F8 D880           		lea	(RAM_MdVideo).w,a0			; Clean our "work" RAM starting from here
     139/    2B00 : 223C FFFF FB1E      		move.l	#sizeof_mdram,d1
     140/    2B06 : 7000                		moveq	#0,d0
     141/    2B08 : 30C0                .loop_ram:	move.w	d0,(a0)+
     142/    2B0A : B1C1                		cmp.l	d1,a0
     143/    2B0C : 65FA                		bcs.s	.loop_ram
     144/    2B0E : 4EB9 FFFF 2522      		jsr	(System_MdMcd_SubWait).l		; Wait until Sub-CPU finishes
     145/    2B14 : 4EB9 FFFF 1F54      		jsr	(Sound_Init).l				; Init Sound driver (FIRST)
     146/    2B1A : 4EB9 FFFF 0296      		jsr	(Video_Init).l				; Init Video
     147/    2B20 : 4EB9 FFFF 1E08      		jsr	(System_Init).l				; Init System
     148/    2B26 : 31FC 0000 FB18      		move.w	#SET_FIRSTSCRN,(RAM_ScreenMode).w	; Reset screen mode
     149/    2B2C : 4EF9 FFFF 2AF2      		jmp	(Md_ReadModes).l			; Go to SCREEN LOAD section
     150/    2B32 : 4745 4D41 5F5A      filen_z80file:	dc.b "GEMA_Z80.BIN",0
             2B38 : 3830 2E42 494E 00 
     151/    2B3F :                     		align 2
     152/    2B40 : 4E4B 4E41 4D41      filen_marscode:	dc.b "NKNAMARS.BIN",0
             2B46 : 5253 2E42 494E 00 
     153/    2B4D :                     		align 2
     154/    2B4E :                     
     155/    2B4E :                     ; ---------------------------------------------
     156/    2B4E :                     ; SEGA PICO
     157/    2B4E :                     ; ---------------------------------------------
     179/    2B4E :                     
     180/    2B4E :                     ; ====================================================================
     181/    2B4E :                     ; --------------------------------------------------------
     182/    2B4E :                     ; SYSTEM routines
     183/    2B4E :                     ;
     184/    2B4E :                     ; MD/PICO:  Normal ROM locations
     185/    2B4E :                     ; 32X:      Loaded into RAM to prevent problems with SH2
     186/    2B4E :                     ; CD/CD32X: Loaded into RAM normally
     187/    2B4E :                     ; --------------------------------------------------------
     188/    2B4E :                     
     190/    2B4E :                     Md_SysCode:
     191/FFFFFFFFFFFF0000 :                     		phase RAM_SystemCode
     193/FFFFFFFFFFFF0000 :                     ; ---------------------------------------------
     194/FFFFFFFFFFFF0000 :                     
     195/FFFFFFFFFFFF0000 :                     		include	"sound/drv/gema_macros.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA MACROS
(1)    4/FFFFFFFFFFFF0000 :                     ;
(1)    5/FFFFFFFFFFFF0000 :                     ; Variables used:
(1)    6/FFFFFFFFFFFF0000 :                     ; MCD, MARS, MARSCD
(1)    7/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)    8/FFFFFFFFFFFF0000 :                     
(1)    9/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   10/FFFFFFFFFFFF0000 :                     ; gSmplData - Special include for .wav files,
(1)   11/FFFFFFFFFFFF0000 :                     ;
(1)   12/FFFFFFFFFFFF0000 :                     ; labl | Label for this sample
(1)   13/FFFFFFFFFFFF0000 :                     ; file | WAV file location
(1)   14/FFFFFFFFFFFF0000 :                     ; loop | Loop start point
(1)   15/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   16/FFFFFFFFFFFF0000 :                     
(1)   17/FFFFFFFFFFFF0000 :                     gSmplData macro labl,file,loop
(1)   18/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   19/FFFFFFFFFFFF0000 :                     		align 4
(1)   20/FFFFFFFFFFFF0000 :                     	endif
(1)   21/FFFFFFFFFFFF0000 :                     labl	label *
(1)   22/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   23/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   24/FFFFFFFFFFFF0000 :                     labl_s:
(1)   25/FFFFFFFFFFFF0000 :                     	binclude file,$2C	; dc.b (data)
(1)   26/FFFFFFFFFFFF0000 :                     labl_e:
(1)   27/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   28/FFFFFFFFFFFF0000 :                     		align 4
(1)   29/FFFFFFFFFFFF0000 :                     	endif
(1)   30/FFFFFFFFFFFF0000 :                     	endm
(1)   31/FFFFFFFFFFFF0000 :                     
(1)   32/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   33/FFFFFFFFFFFF0000 :                     ; gSmplRaw - Special include for raw files
(1)   34/FFFFFFFFFFFF0000 :                     ;
(1)   35/FFFFFFFFFFFF0000 :                     ; labl | Label for this sample
(1)   36/FFFFFFFFFFFF0000 :                     ; file | RAW file location
(1)   37/FFFFFFFFFFFF0000 :                     ; loop | Loop start point
(1)   38/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   39/FFFFFFFFFFFF0000 :                     
(1)   40/FFFFFFFFFFFF0000 :                     gSmplRaw macro labl,file,loop
(1)   41/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   42/FFFFFFFFFFFF0000 :                     		align 4
(1)   43/FFFFFFFFFFFF0000 :                     	endif
(1)   44/FFFFFFFFFFFF0000 :                     labl	label *
(1)   45/FFFFFFFFFFFF0000 :                     	dc.b ((labl_e-labl_s)&$FF),(((labl_e-labl_s)>>8)&$FF),(((labl_e-labl_s)>>16)&$FF)	; dc.b 1,2,3 Length
(1)   46/FFFFFFFFFFFF0000 :                     	dc.b ((loop)&$FF),(((loop)>>8)&$FF),(((loop)>>16)&$FF)					; dc.b 4,5,6 Start loop
(1)   47/FFFFFFFFFFFF0000 :                     labl_s:
(1)   48/FFFFFFFFFFFF0000 :                     	binclude file		; dc.b (data)
(1)   49/FFFFFFFFFFFF0000 :                     labl_e:
(1)   50/FFFFFFFFFFFF0000 :                     	if MARS|MARSCD		; <-- label align for 32X
(1)   51/FFFFFFFFFFFF0000 :                     		align 4
(1)   52/FFFFFFFFFFFF0000 :                     	endif
(1)   53/FFFFFFFFFFFF0000 :                     	endm
(1)   54/FFFFFFFFFFFF0000 :                     
(1)   55/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   56/FFFFFFFFFFFF0000 :                     ; gemaTrk - Sequence entry in the current master
(1)   57/FFFFFFFFFFFF0000 :                     ;           list
(1)   58/FFFFFFFFFFFF0000 :                     ;
(1)   59/FFFFFFFFFFFF0000 :                     ; enblt | Disable/Enable global beats on this Sequence:
(1)   60/FFFFFFFFFFFF0000 :                     ;         0 - Don't use beats
(1)   61/FFFFFFFFFFFF0000 :                     ;         1 - Use beats
(1)   62/FFFFFFFFFFFF0000 :                     ; ticks | Ticks (Default tempo: 150-NTSC 120-PAL)
(1)   63/FFFFFFFFFFFF0000 :                     ;   loc | Direct 24-bit location of the sequence data
(1)   64/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   65/FFFFFFFFFFFF0000 :                     
(1)   66/FFFFFFFFFFFF0000 :                     gemaTrk macro enblt,ticks,loc
(1)   67/FFFFFFFFFFFF0000 :                     	dc.l ((enblt&$01)<<31)|((ticks&$7F)<<24)|(loc&$FFFFFF)
(1)   68/FFFFFFFFFFFF0000 :                     	endm
(1)   69/FFFFFFFFFFFF0000 :                     
(1)   70/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   71/FFFFFFFFFFFF0000 :                     ; gemaHead - Sequence data header
(1)   72/FFFFFFFFFFFF0000 :                     ;
(1)   73/FFFFFFFFFFFF0000 :                     ; blk_data  | Block data pointer
(1)   74/FFFFFFFFFFFF0000 :                     ; patt_data | Pattern data pointer
(1)   75/FFFFFFFFFFFF0000 :                     ; ins_list  | instrument list pointer
(1)   76/FFFFFFFFFFFF0000 :                     ; num_chnls | Number of channels used in the seq
(1)   77/FFFFFFFFFFFF0000 :                     ;             If 0: Read ALL channels
(1)   78/FFFFFFFFFFFF0000 :                     ;                   (NOT recommended, UNSTABLE)
(1)   79/FFFFFFFFFFFF0000 :                     ;
(1)   80/FFFFFFFFFFFF0000 :                     ; Note:
(1)   81/FFFFFFFFFFFF0000 :                     ; Pointers are in 68k map area
(1)   82/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)   83/FFFFFFFFFFFF0000 :                     
(1)   84/FFFFFFFFFFFF0000 :                     gemaHead macro blk,pat,ins,num
(1)   85/FFFFFFFFFFFF0000 :                     	dc.w num
(1)   86/FFFFFFFFFFFF0000 :                     	dc.l blk
(1)   87/FFFFFFFFFFFF0000 :                     	dc.l pat
(1)   88/FFFFFFFFFFFF0000 :                     	dc.l ins
(1)   89/FFFFFFFFFFFF0000 :                     	endm
(1)   90/FFFFFFFFFFFF0000 :                     
(1)   91/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   92/FFFFFFFFFFFF0000 :                     ; Instrument macros, instrument_num-1
(1)   93/FFFFFFFFFFFF0000 :                     ; (ex. Instrument 1 is 0 here)
(1)   94/FFFFFFFFFFFF0000 :                     ;
(1)   95/FFFFFFFFFFFF0000 :                     ; Note:
(1)   96/FFFFFFFFFFFF0000 :                     ; UNUSED instruments MUST use gInsNull or
(1)   97/FFFFFFFFFFFF0000 :                     ; the Z80 gets unexpected results and probably crash.
(1)   98/FFFFFFFFFFFF0000 :                     ; ------------------------------------------------------------
(1)   99/FFFFFFFFFFFF0000 :                     
(1)  100/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  101/FFFFFFFFFFFF0000 :                     ; gInsNull - Null instrument
(1)  102/FFFFFFFFFFFF0000 :                     ;
(1)  103/FFFFFFFFFFFF0000 :                     ; You MUST use this on unused instruments.
(1)  104/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  105/FFFFFFFFFFFF0000 :                     
(1)  106/FFFFFFFFFFFF0000 :                     gInsNull macro
(1)  107/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  108/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  109/FFFFFFFFFFFF0000 :                     	endm
(1)  110/FFFFFFFFFFFF0000 :                     
(1)  111/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  112/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG tone
(1)  113/FFFFFFFFFFFF0000 :                     ;
(1)  114/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  115/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  116/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  117/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  118/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  119/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  120/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, reserved for vibrato
(1)  121/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  122/FFFFFFFFFFFF0000 :                     
(1)  123/FFFFFFFFFFFF0000 :                     gInsPsg	macro pitch,alv,atk,slv,dky,rrt,vib
(1)  124/FFFFFFFFFFFF0000 :                     	dc.b $80,pitch,alv,atk
(1)  125/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  126/FFFFFFFFFFFF0000 :                     	endm
(1)  127/FFFFFFFFFFFF0000 :                     
(1)  128/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  129/FFFFFFFFFFFF0000 :                     ; gInsPsg - PSG noise
(1)  130/FFFFFFFFFFFF0000 :                     ;
(1)  131/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  132/FFFFFFFFFFFF0000 :                     ; alv   | Attack level
(1)  133/FFFFFFFFFFFF0000 :                     ; atk   | Attack rate
(1)  134/FFFFFFFFFFFF0000 :                     ; slv   | Sustain
(1)  135/FFFFFFFFFFFF0000 :                     ; dky   | Decay rate (up)
(1)  136/FFFFFFFFFFFF0000 :                     ; rrt   | Release rate (down)
(1)  137/FFFFFFFFFFFF0000 :                     ; vib   | Set to 0, reserved for vibrato
(1)  138/FFFFFFFFFFFF0000 :                     ; mode  | Noise mode: %tmm
(1)  139/FFFFFFFFFFFF0000 :                     ;         t - Bass(0)|Noise(1)
(1)  140/FFFFFFFFFFFF0000 :                     ;         m - Clock(00)|Clock/2(01)|Clock/4(10)|Tone3(11)
(1)  141/FFFFFFFFFFFF0000 :                     ;
(1)  142/FFFFFFFFFFFF0000 :                     ; Note:
(1)  143/FFFFFFFFFFFF0000 :                     ; Using Tone3 will turn OFF channel 3.
(1)  144/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  145/FFFFFFFFFFFF0000 :                     
(1)  146/FFFFFFFFFFFF0000 :                     gInsPsgN macro pitch,alv,atk,slv,dky,rrt,vib,mode
(1)  147/FFFFFFFFFFFF0000 :                     	dc.b $90|mode,pitch,alv,atk
(1)  148/FFFFFFFFFFFF0000 :                     	dc.b slv,dky,rrt,vib
(1)  149/FFFFFFFFFFFF0000 :                     	endm
(1)  150/FFFFFFFFFFFF0000 :                     
(1)  151/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  152/FFFFFFFFFFFF0000 :                     ; gInsFm - YM2612 FM normal instrument/patch
(1)  153/FFFFFFFFFFFF0000 :                     ;
(1)  154/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  155/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  156/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  157/FFFFFFFFFFFF0000 :                     
(1)  158/FFFFFFFFFFFF0000 :                     gInsFm macro pitch,fmins
(1)  159/FFFFFFFFFFFF0000 :                     	dc.b $A0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  160/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  161/FFFFFFFFFFFF0000 :                     	endm
(1)  162/FFFFFFFFFFFF0000 :                     
(1)  163/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  164/FFFFFFFFFFFF0000 :                     ; gInsFm - YM2612 FM special instrument/patch
(1)  165/FFFFFFFFFFFF0000 :                     ;
(1)  166/FFFFFFFFFFFF0000 :                     ; pitch | UNUSED, value ignored (set to 0)
(1)  167/FFFFFFFFFFFF0000 :                     ; fmins | 24-bit pointer to FM patch data
(1)  168/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  169/FFFFFFFFFFFF0000 :                     
(1)  170/FFFFFFFFFFFF0000 :                     gInsFm3	macro pitch,fmins
(1)  171/FFFFFFFFFFFF0000 :                     	dc.b $B0,pitch,((fmins>>16)&$FF),((fmins>>8)&$FF)
(1)  172/FFFFFFFFFFFF0000 :                     	dc.b fmins&$FF,$00,$00,$00
(1)  173/FFFFFFFFFFFF0000 :                     	endm
(1)  174/FFFFFFFFFFFF0000 :                     
(1)  175/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  176/FFFFFFFFFFFF0000 :                     ; gInsDac - DAC instrument
(1)  177/FFFFFFFFFFFF0000 :                     ;
(1)  178/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  179/FFFFFFFFFFFF0000 :                     ; start | 24-bit pointer
(1)  180/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  181/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  182/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  183/FFFFFFFFFFFF0000 :                     
(1)  184/FFFFFFFFFFFF0000 :                     gInsDac	macro pitch,start,flags
(1)  185/FFFFFFFFFFFF0000 :                     	dc.b $C0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  186/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  187/FFFFFFFFFFFF0000 :                     	endm
(1)  188/FFFFFFFFFFFF0000 :                     
(1)  189/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  190/FFFFFFFFFFFF0000 :                     ; gInsPcm - RF5C164 PCM Sample (SEGA CD)
(1)  191/FFFFFFFFFFFF0000 :                     ;
(1)  192/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  193/FFFFFFFFFFFF0000 :                     ; start | 24-bit direct pointer to
(1)  194/FFFFFFFFFFFF0000 :                     ;         Sub-CPU's memory area.
(1)  195/FFFFFFFFFFFF0000 :                     ; flags | Flags: %0000000l
(1)  196/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  197/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  198/FFFFFFFFFFFF0000 :                     
(1)  199/FFFFFFFFFFFF0000 :                     gInsPcm	macro pitch,start,flags
(1)  200/FFFFFFFFFFFF0000 :                      if MCD|MARSCD
(1)  201/FFFFFFFFFFFF0000 :                     	dc.b $D0|flags,pitch,((start>>16)&$FF),((start>>8)&$FF)
(1)  202/FFFFFFFFFFFF0000 :                     	dc.b start&$FF,0,0,0
(1)  203/FFFFFFFFFFFF0000 :                      else
(1)  204/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  205/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  206/FFFFFFFFFFFF0000 :                      endif
(1)  207/FFFFFFFFFFFF0000 :                     	endm
(1)  208/FFFFFFFFFFFF0000 :                     
(1)  209/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  210/FFFFFFFFFFFF0000 :                     ; gInsPwm - PWM Sample (SEGA 32X)
(1)  211/FFFFFFFFFFFF0000 :                     ;
(1)  212/FFFFFFFFFFFF0000 :                     ; pitch | Pitch/Octave
(1)  213/FFFFFFFFFFFF0000 :                     ; start | 32-bit pointer to
(1)  214/FFFFFFFFFFFF0000 :                     ;         SH2's map view: CS1(ROM) or CS3(SDRAM)
(1)  215/FFFFFFFFFFFF0000 :                     ; flags | Flags: %000000sl
(1)  216/FFFFFFFFFFFF0000 :                     ;         | l - Enable loop: No(0)/Yes(1)
(1)  217/FFFFFFFFFFFF0000 :                     ;         | s - Sample data is in Stereo: No(0)/Yes(1)
(1)  218/FFFFFFFFFFFF0000 :                     ; ----------------------------------------------------
(1)  219/FFFFFFFFFFFF0000 :                     
(1)  220/FFFFFFFFFFFF0000 :                     gInsPwm	macro pitch,start,flags
(1)  221/FFFFFFFFFFFF0000 :                      if MARS|MARSCD
(1)  222/FFFFFFFFFFFF0000 :                     	dc.b $E0|flags,pitch,((start>>24)&$FF),((start>>16)&$FF)
(1)  223/FFFFFFFFFFFF0000 :                     	dc.b ((start>>8)&$FF),start&$FF,0,0
(1)  224/FFFFFFFFFFFF0000 :                      else
(1)  225/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  226/FFFFFFFFFFFF0000 :                     	dc.b $00,$00,$00,$00
(1)  227/FFFFFFFFFFFF0000 :                      endif
(1)  228/FFFFFFFFFFFF0000 :                     	endm
(1)  229/FFFFFFFFFFFF0000 :                     
     196/FFFFFFFFFFFF0000 :                     		include	"sound/drv/gema.asm"
(1)    1/FFFFFFFFFFFF0000 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0000 :                     ; GEMA/Nikona Sound Driver v1.0
(1)    4/FFFFFFFFFFFF0000 :                     ; by GenesisFan64 2023-2024
(1)    5/FFFFFFFFFFFF0000 :                     ; -------------------------------------------------------------------
(1)    6/FFFFFFFFFFFF0000 :                     
(1)    7/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)    8/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)    9/FFFFFFFFFFFF0000 :                     ; Variables
(1)   10/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   11/FFFFFFFFFFFF0000 :                     
(1)   12/FFFFFFFFFFFF0000 :                     ; z80_cpu	equ $A00000			; Z80 CPU area
(1)   13/FFFFFFFFFFFF0000 :                     ; z80_bus 	equ $A11100			; only read bit 0 (bit 8 as WORD)
(1)   14/FFFFFFFFFFFF0000 :                     ; z80_reset	equ $A11200			; WRITE only: $0000 reset/$0100 cancel
(1)   15/FFFFFFFFFFFF0000 : =$1F60               zDrvFifo	equ $1F60;commZfifo		; FIFO command storage
(1)   16/FFFFFFFFFFFF0000 : =$1F80               zDrvFWrt	equ $1F80;commZWrite		; FIFO command index
(1)   17/FFFFFFFFFFFF0000 : =$1F81               zDrvRomBlk	equ $1F81;commZRomBlk		; ROM block flag
(1)   18/FFFFFFFFFFFF0000 : =$1F86               zDrvRamSrc	equ $1F82+4;cdRamSrcB		; !! RAM-read source+dest pointers
(1)   19/FFFFFFFFFFFF0000 : =$1F87               zDrvRamLen	equ $1F87;cdRamLen		; RAM-read length + flag
(1)   20/FFFFFFFFFFFF0000 : =$1F88               zDrvPalMode	equ $1F88;palMode		; PAL speed flag
(1)   21/FFFFFFFFFFFF0000 : =$1F89               zDrvMarsBlk	equ $1F89;marsBlock		; Flag to disable 32X's PWM
(1)   22/FFFFFFFFFFFF0000 : =$1F8A               zDrvMcdBlk	equ $1F8A;mcdBlock		; Flag to disable SegaCD's PCM
(1)   23/FFFFFFFFFFFF0000 : =$20                 zDrvMaxCmnd	equ $20;MAX_ZCMND		; Command fifo size
(1)   24/FFFFFFFFFFFF0000 :                     
(1)   25/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   26/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0000 :                     ; Labels
(1)   28/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   29/FFFFFFFFFFFF0000 :                     
(1)   30/FFFFFFFFFFFF0000 : =$FFFFFF00           RAM_ZCdFlagD	equ RAM_SoundBuff			; transferRom flag shared with Z80
(1)   31/FFFFFFFFFFFF0000 :                     
(1)   32/FFFFFFFFFFFF0000 :                     ; ====================================================================
(1)   33/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   34/FFFFFFFFFFFF0000 :                     ; Initialize Sound
(1)   35/FFFFFFFFFFFF0000 :                     ; --------------------------------------------------------
(1)   36/FFFFFFFFFFFF0000 :                     
(1)   37/FFFFFFFFFFFF0000 :                     gemaInit:
(1)   42/FFFFFFFFFFFF0000 : 41F9 0020 0000      		lea	(Z80_CODE).l,a0			; a0 - Z80 code (on $880000)
(1)   43/FFFFFFFFFFFF0006 : 303C 1F8B           		move.w	#(Z80_CODE_END-Z80_CODE)-1,d0	; d0 - Size
(1)   44/FFFFFFFFFFFF000A : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 stop
         FFFFFFFFFFFF0010 : 1100             
(1)   45/FFFFFFFFFFFF0012 : 33FC 0100 00A1      		move.w	#$0100,(z80_reset).l		; Z80 reset
         FFFFFFFFFFFF0018 : 1200             
(1)   46/FFFFFFFFFFFF001A :                     .wait:
(1)   47/FFFFFFFFFFFF001A : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Did it stop?
         FFFFFFFFFFFF0020 : 1100             
(1)   48/FFFFFFFFFFFF0022 : 66F6                		bne.s	.wait
(1)   49/FFFFFFFFFFFF0024 : 43F9 00A0 0000      		lea	(z80_cpu).l,a1			; a1 - output Z80 memory
(1)   50/FFFFFFFFFFFF002A : 383C 1FFF           		move.w	#$2000-1,d4
(1)   51/FFFFFFFFFFFF002E :                     .copy_drvr:
(1)   52/FFFFFFFFFFFF002E : 12D8                		move.b	(a0)+,(a1)+
(1)   53/FFFFFFFFFFFF0030 : 5344                		subq.w	#1,d4
(1)   54/FFFFFFFFFFFF0032 : 51C8 FFFA           		dbf	d0,.copy_drvr			; Pass 1: copy data
(1)   55/FFFFFFFFFFFF0036 : 5240                		addq.w	#1,d0
(1)   56/FFFFFFFFFFFF0038 : 12C0                .clear_rest:	move.b	d0,(a1)+
(1)   57/FFFFFFFFFFFF003A : 51CC FFFC           		dbf	d4,.clear_rest			; Pass 2: clear remains
(1)   58/FFFFFFFFFFFF003E : 33FC 0000 00A1      		move.w	#0,(z80_reset).l		; Reset Z80 again
         FFFFFFFFFFFF0044 : 1200             
(1)   59/FFFFFFFFFFFF0046 :                     
(1)   60/FFFFFFFFFFFF0046 : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear ramRead flag here
(1)   61/FFFFFFFFFFFF004A : 1039 00A1 0001      		move.b	(sys_io).l,d0			; Check for PAL speed
(1)   62/FFFFFFFFFFFF0050 : 0800 0006           		btst	#6,d0
(1)   63/FFFFFFFFFFFF0054 : 6708                		beq.s	.not_pal
(1)   64/FFFFFFFFFFFF0056 : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvPalMode).l	; Tell Z80 we are running slower
         FFFFFFFFFFFF005C : 1F88             
(1)   65/FFFFFFFFFFFF005E :                     .not_pal:
(1)   66/FFFFFFFFFFFF005E : 4E71                		nop
(1)   67/FFFFFFFFFFFF0060 : 4E71                		nop
(1)   68/FFFFFFFFFFFF0062 : 33FC 0100 00A1      		move.w	#$100,(z80_reset).l
         FFFFFFFFFFFF0068 : 1200             
(1)   69/FFFFFFFFFFFF006A : 33FC 0000 00A1      		move.w	#0,(z80_bus).l			; Start Z80
         FFFFFFFFFFFF0070 : 1100             
(1)   71/FFFFFFFFFFFF0072 :                     
(1)   72/FFFFFFFFFFFF0072 :                     ; ====================================================================
(1)   73/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)   74/FFFFFFFFFFFF0072 :                     ; gemaReset
(1)   75/FFFFFFFFFFFF0072 :                     ;
(1)   76/FFFFFFFFFFFF0072 :                     ; Reset ALL sound to defaults
(1)   77/FFFFFFFFFFFF0072 :                     ; ----------------------------------------------------------------
(1)   78/FFFFFFFFFFFF0072 :                     
(1)   79/FFFFFFFFFFFF0072 :                     gemaReset:
(1)   80/FFFFFFFFFFFF0072 : 6100 01B8           		bsr	gemaStopAll
(1)   81/FFFFFFFFFFFF0076 : 41F9 0020 0000      		lea	(MainGemaSeqList),a0
(1)   82/FFFFFFFFFFFF007C : 6100 0140           		bsr	gemaSetMasterList
(1)   83/FFFFFFFFFFFF0080 : 7E08                		moveq	#8,d7				; Make sure it finishes.
(1)   84/FFFFFFFFFFFF0082 : 51CF FFFE           		dbf	d7,*
(1)   85/FFFFFFFFFFFF0086 : 4E75                		rts
(1)   86/FFFFFFFFFFFF0088 :                     
(1)   87/FFFFFFFFFFFF0088 :                     ; ====================================================================
(1)   88/FFFFFFFFFFFF0088 :                     ; ------------------------------------------------
(1)   89/FFFFFFFFFFFF0088 :                     ; sndLockZ80
(1)   90/FFFFFFFFFFFF0088 :                     ;
(1)   91/FFFFFFFFFFFF0088 :                     ; Stop Z80, unlocks bus
(1)   92/FFFFFFFFFFFF0088 :                     ; ------------------------------------------------
(1)   93/FFFFFFFFFFFF0088 :                     
(1)   94/FFFFFFFFFFFF0088 :                     sndLockZ80:
(1)   96/FFFFFFFFFFFF0088 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF008E : 1100             
(1)   97/FFFFFFFFFFFF0090 :                     .wait:
(1)   98/FFFFFFFFFFFF0090 : 0839 0000 00A1      		btst	#0,(z80_bus).l
         FFFFFFFFFFFF0096 : 1100             
(1)   99/FFFFFFFFFFFF0098 : 66F6                		bne.s	.wait
(1)  101/FFFFFFFFFFFF009A : 4E75                		rts
(1)  102/FFFFFFFFFFFF009C :                     
(1)  103/FFFFFFFFFFFF009C :                     ; ------------------------------------------------
(1)  104/FFFFFFFFFFFF009C :                     ; sndUnlockZ80
(1)  105/FFFFFFFFFFFF009C :                     ;
(1)  106/FFFFFFFFFFFF009C :                     ; Resume Z80, locks bus
(1)  107/FFFFFFFFFFFF009C :                     ; ------------------------------------------------
(1)  108/FFFFFFFFFFFF009C :                     
(1)  109/FFFFFFFFFFFF009C :                     sndUnlockZ80:
(1)  111/FFFFFFFFFFFF009C : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF00A2 : 1100             
(1)  113/FFFFFFFFFFFF00A4 : 4E75                		rts
(1)  114/FFFFFFFFFFFF00A6 :                     
(1)  115/FFFFFFFFFFFF00A6 :                     ; ====================================================================
(1)  116/FFFFFFFFFFFF00A6 :                     ; ----------------------------------------------------------------
(1)  117/FFFFFFFFFFFF00A6 :                     ; gemaSendRam
(1)  118/FFFFFFFFFFFF00A6 :                     ;
(1)  119/FFFFFFFFFFFF00A6 :                     ; If you are reading data from 68000's RAM you MUST call
(1)  120/FFFFFFFFFFFF00A6 :                     ; this a lot during display, commonly during the VBlank waiting
(1)  121/FFFFFFFFFFFF00A6 :                     ; loop.
(1)  122/FFFFFFFFFFFF00A6 :                     ;
(1)  123/FFFFFFFFFFFF00A6 :                     ; This checks if the Z80 wants to read from RAM, then here
(1)  124/FFFFFFFFFFFF00A6 :                     ; we manually write the bytes to the Z80
(1)  125/FFFFFFFFFFFF00A6 :                     ;
(1)  126/FFFFFFFFFFFF00A6 :                     ; SCD/CD32X:
(1)  127/FFFFFFFFFFFF00A6 :                     ; - DAC samples are safe to read from WORD-RAM, but NOT
(1)  128/FFFFFFFFFFFF00A6 :                     ;   when Stamps are being used, use PCM samples instead.
(1)  129/FFFFFFFFFFFF00A6 :                     ; - Be careful when loading new data with gemaSetMasterList to
(1)  130/FFFFFFFFFFFF00A6 :                     ;   WORD-RAM, make sure MAIN-CPU has the permission set.
(1)  131/FFFFFFFFFFFF00A6 :                     ; ----------------------------------------------------------------
(1)  132/FFFFFFFFFFFF00A6 :                     
(1)  133/FFFFFFFFFFFF00A6 :                     gemaSendRam:
(1)  134/FFFFFFFFFFFF00A6 : 4A38 FF00           		tst.b	(RAM_ZCdFlagD).w		; Z80 WROTE the flag?
(1)  135/FFFFFFFFFFFF00AA : 674C                		beq.s	.no_task
(1)  136/FFFFFFFFFFFF00AC : 4238 FF00           		clr.b	(RAM_ZCdFlagD).w		; Clear flag here
(1)  137/FFFFFFFFFFFF00B0 : 48E7 070E           		movem.l	a4-a6/d5-d7,-(sp)
(1)  138/FFFFFFFFFFFF00B4 : 61D2                		bsr	sndLockZ80
(1)  139/FFFFFFFFFFFF00B6 : 7E00                		moveq	#0,d7
(1)  140/FFFFFFFFFFFF00B8 : 1E39 00A0 1F87      		move.b	(z80_cpu+zDrvRamLen).l,d7	; Len == 0?
(1)  141/FFFFFFFFFFFF00BE : 6732                		beq.s	.no_size			; Invalid size, do nothing
(1)  142/FFFFFFFFFFFF00C0 : 5347                		subq.w	#1,d7				; dbf -1
(1)  143/FFFFFFFFFFFF00C2 : 4DF9 00A0 1F87      		lea	(z80_cpu+(zDrvRamSrc+1)),a6	; a6 - SRC location and DST, backwards
(1)  144/FFFFFFFFFFFF00C8 : 4BF9 00A0 0000      		lea	(z80_cpu),a5			; a5 - Z80 area
(1)  145/FFFFFFFFFFFF00CE : 1C26                		move.b	-(a6),d6			; d6 - Source in 68K area
(1)  146/FFFFFFFFFFFF00D0 : 4846                		swap	d6
(1)  147/FFFFFFFFFFFF00D2 : 1C26                		move.b	-(a6),d6
(1)  148/FFFFFFFFFFFF00D4 : E14E                		lsl.w	#8,d6
(1)  149/FFFFFFFFFFFF00D6 : 1C26                		move.b	-(a6),d6
(1)  150/FFFFFFFFFFFF00D8 : 7A00                		moveq	#0,d5
(1)  151/FFFFFFFFFFFF00DA : 1A26                		move.b	-(a6),d5			; d5 - Destination in Z80 area
(1)  152/FFFFFFFFFFFF00DC : E14D                		lsl.w	#8,d5
(1)  153/FFFFFFFFFFFF00DE : 1A26                		move.b	-(a6),d5
(1)  154/FFFFFFFFFFFF00E0 : DBC5                		add.l	d5,a5				; Add base to destination
(1)  155/FFFFFFFFFFFF00E2 : 2846                		move.l	d6,a4
(1)  156/FFFFFFFFFFFF00E4 :                     .copy_bytes:
(1)  157/FFFFFFFFFFFF00E4 : 1ADC                		move.b	(a4)+,(a5)+
(1)  158/FFFFFFFFFFFF00E6 : 51CF FFFC           		dbf	d7,.copy_bytes
(1)  159/FFFFFFFFFFFF00EA : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRamLen).l	; clear LEN and Z80 resumes
         FFFFFFFFFFFF00F0 : 1F87             
(1)  160/FFFFFFFFFFFF00F2 :                     .no_size:
(1)  161/FFFFFFFFFFFF00F2 : 61A8                		bsr	sndUnlockZ80
(1)  162/FFFFFFFFFFFF00F4 : 4CDF 70E0           		movem.l	(sp)+,a4-a6/d5-d7
(1)  163/FFFFFFFFFFFF00F8 :                     .no_task:
(1)  164/FFFFFFFFFFFF00F8 : 4E75                		rts
(1)  165/FFFFFFFFFFFF00FA :                     
(1)  166/FFFFFFFFFFFF00FA :                     ; ====================================================================
(1)  167/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  168/FFFFFFFFFFFF00FA :                     ; 68K-to-Z80 sound request enter/exit routines
(1)  169/FFFFFFFFFFFF00FA :                     ; ------------------------------------------------
(1)  170/FFFFFFFFFFFF00FA :                     
(1)  171/FFFFFFFFFFFF00FA :                     sndReq_Enter:
(1)  173/FFFFFFFFFFFF00FA : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l		; Request Z80 Stop
         FFFFFFFFFFFF0100 : 1100             
(1)  175/FFFFFFFFFFFF0102 : 9EFC 0004           		suba	#4,sp				; Extra jump return
(1)  176/FFFFFFFFFFFF0106 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)		; Save these regs to the stack
(1)  177/FFFFFFFFFFFF010A : 40E7                		move.w	sr,-(sp)			; and sr too
(1)  178/FFFFFFFFFFFF010C : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  179/FFFFFFFFFFFF0110 : DEFC 0016           		adda	#(4*4)+2+4,sp			; Go back to the RTS jump
(1)  180/FFFFFFFFFFFF0114 : 4BF9 00A0 1F80      		lea	(z80_cpu+zDrvFWrt).l,a5		; a5 - commZWrite
(1)  181/FFFFFFFFFFFF011A : 4DF9 00A0 1F60      		lea	(z80_cpu+zDrvFifo).l,a6		; a6 - fifo command list
(1)  182/FFFFFFFFFFFF0120 :                     .wait:
(1)  184/FFFFFFFFFFFF0120 : 0839 0000 00A1      		btst	#0,(z80_bus).l			; Wait for Z80
         FFFFFFFFFFFF0126 : 1100             
(1)  185/FFFFFFFFFFFF0128 : 66F6                		bne.s	.wait
(1)  187/FFFFFFFFFFFF012A : 1C15                		move.b	(a5),d6				; d6 - index fifo position
(1)  188/FFFFFFFFFFFF012C : 4886                		ext.w	d6				; extend to 16 bits
(1)  189/FFFFFFFFFFFF012E : 4E75                		rts
(1)  190/FFFFFFFFFFFF0130 :                     ; JUMP ONLY
(1)  191/FFFFFFFFFFFF0130 :                     sndReq_Exit:
(1)  193/FFFFFFFFFFFF0130 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l
         FFFFFFFFFFFF0136 : 1100             
(1)  195/FFFFFFFFFFFF0138 : 9EFC 001A           		suba	#8+2+(4*4),sp
(1)  196/FFFFFFFFFFFF013C : 46DF                		move.w	(sp)+,sr
(1)  197/FFFFFFFFFFFF013E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6		; And pop those back
(1)  198/FFFFFFFFFFFF0142 : DEFC 0008           		adda	#8,sp
(1)  199/FFFFFFFFFFFF0146 : 027C F8FF           		andi.w	#$F8FF,sr			; Enable interrupts
(1)  200/FFFFFFFFFFFF014A : 4E75                		rts
(1)  201/FFFFFFFFFFFF014C :                     
(1)  202/FFFFFFFFFFFF014C :                     ; ------------------------------------------------
(1)  203/FFFFFFFFFFFF014C :                     ; Send request id and arguments
(1)  204/FFFFFFFFFFFF014C :                     ;
(1)  205/FFFFFFFFFFFF014C :                     ; Input:
(1)  206/FFFFFFFFFFFF014C :                     ; d7 - byte to write
(1)  207/FFFFFFFFFFFF014C :                     ; d6 - index pointer
(1)  208/FFFFFFFFFFFF014C :                     ; a5 - commZWrite, update index
(1)  209/FFFFFFFFFFFF014C :                     ; a6 - commZfifo command list
(1)  210/FFFFFFFFFFFF014C :                     ;
(1)  211/FFFFFFFFFFFF014C :                     ; *** CALL sndReq_Enter FIRST ***
(1)  212/FFFFFFFFFFFF014C :                     ; ------------------------------------------------
(1)  213/FFFFFFFFFFFF014C :                     
(1)  214/FFFFFFFFFFFF014C :                     sndReq_scmd:
(1)  215/FFFFFFFFFFFF014C : 1DBC 00FF 6000      		move.b	#-1,(a6,d6.w)			; Command-start flag
(1)  216/FFFFFFFFFFFF0152 : 5206                		addq.b	#1,d6				; Next fifo position
(1)  217/FFFFFFFFFFFF0154 : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  218/FFFFFFFFFFFF0158 : 600C                		bra.s	sndReq_sbyte
(1)  219/FFFFFFFFFFFF015A :                     sndReq_slong:
(1)  220/FFFFFFFFFFFF015A : 610A                		bsr	sndReq_sbyte
(1)  221/FFFFFFFFFFFF015C : E09F                		ror.l	#8,d7
(1)  222/FFFFFFFFFFFF015E :                     ; 24-bit address
(1)  223/FFFFFFFFFFFF015E :                     sndReq_saddr:
(1)  224/FFFFFFFFFFFF015E : 6106                		bsr	sndReq_sbyte
(1)  225/FFFFFFFFFFFF0160 : E09F                		ror.l	#8,d7
(1)  226/FFFFFFFFFFFF0162 :                     sndReq_sword:
(1)  227/FFFFFFFFFFFF0162 : 6102                		bsr	sndReq_sbyte
(1)  228/FFFFFFFFFFFF0164 : E09F                		ror.l	#8,d7
(1)  229/FFFFFFFFFFFF0166 :                     sndReq_sbyte:
(1)  230/FFFFFFFFFFFF0166 : 1D87 6000           		move.b	d7,(a6,d6.w)			; Write byte
(1)  231/FFFFFFFFFFFF016A : 5206                		addq.b	#1,d6				; Next fifo pos
(1)  232/FFFFFFFFFFFF016C : 0206 001F           		andi.b	#zDrvMaxCmnd-1,d6
(1)  233/FFFFFFFFFFFF0170 : 1A86                		move.b	d6,(a5)				; Update commZWrite
(1)  234/FFFFFFFFFFFF0172 : 4E75                		rts
(1)  235/FFFFFFFFFFFF0174 :                     
(1)  236/FFFFFFFFFFFF0174 :                     ; ====================================================================
(1)  237/FFFFFFFFFFFF0174 :                     ; ------------------------------------------------
(1)  238/FFFFFFFFFFFF0174 :                     ; USER calls area
(1)  239/FFFFFFFFFFFF0174 :                     ; ------------------------------------------------
(1)  240/FFFFFFFFFFFF0174 :                     
(1)  241/FFFFFFFFFFFF0174 :                     ; --------------------------------------------------------
(1)  242/FFFFFFFFFFFF0174 :                     ; gemaDmaPause
(1)  243/FFFFFFFFFFFF0174 :                     ;
(1)  244/FFFFFFFFFFFF0174 :                     ; Call this BEFORE doing any DMA transfer
(1)  245/FFFFFFFFFFFF0174 :                     ;
(1)  246/FFFFFFFFFFFF0174 :                     ; 32X: Set RV bit manually AFTER calling this.
(1)  247/FFFFFFFFFFFF0174 :                     ; --------------------------------------------------------
(1)  248/FFFFFFFFFFFF0174 :                     
(1)  249/FFFFFFFFFFFF0174 :                     gemaDmaPause:
(1)  251/FFFFFFFFFFFF0174 : 2F07                		move.l	d7,-(sp)
(1)  252/FFFFFFFFFFFF0176 : 6100 FF10           		bsr	sndLockZ80
(1)  253/FFFFFFFFFFFF017A : 13FC 0001 00A0      		move.b	#1,(z80_cpu+zDrvRomBlk).l	; Set ROM-busy flag
         FFFFFFFFFFFF0180 : 1F81             
(1)  254/FFFFFFFFFFFF0182 : 6100 FF18           		bsr	sndUnlockZ80
(1)  255/FFFFFFFFFFFF0186 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  256/FFFFFFFFFFFF018A : 51CF FFFE           		dbf	d7,*
(1)  257/FFFFFFFFFFFF018E : 2E1F                		move.l	(sp)+,d7
(1)  259/FFFFFFFFFFFF0190 : 4E75                		rts
(1)  260/FFFFFFFFFFFF0192 :                     
(1)  261/FFFFFFFFFFFF0192 :                     ; --------------------------------------------------------
(1)  262/FFFFFFFFFFFF0192 :                     ; gemaDmaResume
(1)  263/FFFFFFFFFFFF0192 :                     ;
(1)  264/FFFFFFFFFFFF0192 :                     ; Call this AFTER finishing DMA transfer
(1)  265/FFFFFFFFFFFF0192 :                     ;
(1)  266/FFFFFFFFFFFF0192 :                     ; 32X: Reset the RV bit manually BEFORE calling this.
(1)  267/FFFFFFFFFFFF0192 :                     ; --------------------------------------------------------
(1)  268/FFFFFFFFFFFF0192 :                     
(1)  269/FFFFFFFFFFFF0192 :                     gemaDmaResume:
(1)  271/FFFFFFFFFFFF0192 : 2F07                		move.l	d7,-(sp)
(1)  272/FFFFFFFFFFFF0194 : 6100 FEF2           		bsr	sndLockZ80
(1)  273/FFFFFFFFFFFF0198 : 13FC 0000 00A0      		move.b	#0,(z80_cpu+zDrvRomBlk).l	; Clear ROM-busy flag
         FFFFFFFFFFFF019E : 1F81             
(1)  274/FFFFFFFFFFFF01A0 : 6100 FEFA           		bsr	sndUnlockZ80
(1)  275/FFFFFFFFFFFF01A4 : 3E3C 0060           		move.w	#96,d7				; Small delay
(1)  276/FFFFFFFFFFFF01A8 : 51CF FFFE           		dbf	d7,*
(1)  277/FFFFFFFFFFFF01AC : 2E1F                		move.l	(sp)+,d7
(1)  279/FFFFFFFFFFFF01AE : 4E75                		rts
(1)  280/FFFFFFFFFFFF01B0 :                     
(1)  281/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  282/FFFFFFFFFFFF01B0 :                     ; gemaTest
(1)  283/FFFFFFFFFFFF01B0 :                     ;
(1)  284/FFFFFFFFFFFF01B0 :                     ; For TESTING only
(1)  285/FFFFFFFFFFFF01B0 :                     ; --------------------------------------------------------
(1)  286/FFFFFFFFFFFF01B0 :                     
(1)  287/FFFFFFFFFFFF01B0 :                     gemaTest:
(1)  288/FFFFFFFFFFFF01B0 : 6100 FF48           		bsr	sndReq_Enter
(1)  289/FFFFFFFFFFFF01B4 : 3E3C 0000           		move.w	#$00,d7		; Command $00
(1)  290/FFFFFFFFFFFF01B8 : 6192                		bsr	sndReq_scmd
(1)  291/FFFFFFFFFFFF01BA : 6000 FF74           		bra 	sndReq_Exit
(1)  292/FFFFFFFFFFFF01BE :                     
(1)  293/FFFFFFFFFFFF01BE :                     ; --------------------------------------------------------
(1)  294/FFFFFFFFFFFF01BE :                     ; gemaSetMasterList
(1)  295/FFFFFFFFFFFF01BE :                     ;
(1)  296/FFFFFFFFFFFF01BE :                     ; Sets the master sequence list
(1)  297/FFFFFFFFFFFF01BE :                     ;
(1)  298/FFFFFFFFFFFF01BE :                     ; Input:
(1)  299/FFFFFFFFFFFF01BE :                     ; a0 | 68k pointer
(1)  300/FFFFFFFFFFFF01BE :                     ;
(1)  301/FFFFFFFFFFFF01BE :                     ; Notes:
(1)  302/FFFFFFFFFFFF01BE :                     ; - ALL TRACKS MUST BE STOPPED, CALL gemaStopAll FIRST
(1)  303/FFFFFFFFFFFF01BE :                     ; with a separate delay
(1)  304/FFFFFFFFFFFF01BE :                     ; --------------------------------------------------------
(1)  305/FFFFFFFFFFFF01BE :                     
(1)  306/FFFFFFFFFFFF01BE :                     gemaSetMasterList:
(1)  307/FFFFFFFFFFFF01BE : 6100 FF3A           		bsr	sndReq_Enter
(1)  308/FFFFFFFFFFFF01C2 : 3E3C 0001           		move.w	#$01,d7		; Command $01
(1)  309/FFFFFFFFFFFF01C6 : 6184                		bsr	sndReq_scmd
(1)  310/FFFFFFFFFFFF01C8 : 2E08                		move.l	a0,d7
(1)  311/FFFFFFFFFFFF01CA : 618E                		bsr	sndReq_slong
(1)  312/FFFFFFFFFFFF01CC : 6000 FF62           		bra 	sndReq_Exit
(1)  313/FFFFFFFFFFFF01D0 :                     
(1)  314/FFFFFFFFFFFF01D0 :                     ; --------------------------------------------------------
(1)  315/FFFFFFFFFFFF01D0 :                     ; gemaPlaySeq
(1)  316/FFFFFFFFFFFF01D0 :                     ;
(1)  317/FFFFFFFFFFFF01D0 :                     ; Play a sequence
(1)  318/FFFFFFFFFFFF01D0 :                     ;
(1)  319/FFFFFFFFFFFF01D0 :                     ; Input:
(1)  320/FFFFFFFFFFFF01D0 :                     ; d0.b | Sequence number
(1)  321/FFFFFFFFFFFF01D0 :                     ; d1.b | Starting block
(1)  322/FFFFFFFFFFFF01D0 :                     ; d2.b | Playback slot number: 0-2
(1)  323/FFFFFFFFFFFF01D0 :                     ;        If set to -1:
(1)  324/FFFFFFFFFFFF01D0 :                     ;        Auto-search free slot (same as gemaPlaySeqAuto)
(1)  325/FFFFFFFFFFFF01D0 :                     ; --------------------------------------------------------
(1)  326/FFFFFFFFFFFF01D0 :                     
(1)  327/FFFFFFFFFFFF01D0 :                     gemaPlaySeq:
(1)  328/FFFFFFFFFFFF01D0 : 6100 FF28           		bsr	sndReq_Enter
(1)  329/FFFFFFFFFFFF01D4 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  330/FFFFFFFFFFFF01D8 : 6100 FF72           		bsr	sndReq_scmd
(1)  331/FFFFFFFFFFFF01DC : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  332/FFFFFFFFFFFF01DE : 6186                		bsr	sndReq_sbyte
(1)  333/FFFFFFFFFFFF01E0 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  334/FFFFFFFFFFFF01E2 : 6182                		bsr	sndReq_sbyte
(1)  335/FFFFFFFFFFFF01E4 : 1E02                		move.b	d2,d7		; d2.b Slot
(1)  336/FFFFFFFFFFFF01E6 : 6100 FF7E           		bsr	sndReq_sbyte
(1)  337/FFFFFFFFFFFF01EA : 6000 FF44           		bra 	sndReq_Exit
(1)  338/FFFFFFFFFFFF01EE :                     
(1)  339/FFFFFFFFFFFF01EE :                     ; --------------------------------------------------------
(1)  340/FFFFFFFFFFFF01EE :                     ; gemaPlaySeqAuto
(1)  341/FFFFFFFFFFFF01EE :                     ;
(1)  342/FFFFFFFFFFFF01EE :                     ; Play a sequence into a free slot, if all get full
(1)  343/FFFFFFFFFFFF01EE :                     ; it will overwrite the last one.
(1)  344/FFFFFFFFFFFF01EE :                     ;
(1)  345/FFFFFFFFFFFF01EE :                     ; Input:
(1)  346/FFFFFFFFFFFF01EE :                     ; d0.b | Sequence number
(1)  347/FFFFFFFFFFFF01EE :                     ; d1.b | Starting block
(1)  348/FFFFFFFFFFFF01EE :                     ; --------------------------------------------------------
(1)  349/FFFFFFFFFFFF01EE :                     
(1)  350/FFFFFFFFFFFF01EE :                     gemaPlaySeqAuto:
(1)  351/FFFFFFFFFFFF01EE : 6100 FF0A           		bsr	sndReq_Enter
(1)  352/FFFFFFFFFFFF01F2 : 3E3C 0002           		move.w	#$02,d7		; Command $02
(1)  353/FFFFFFFFFFFF01F6 : 6100 FF54           		bsr	sndReq_scmd
(1)  354/FFFFFFFFFFFF01FA : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  355/FFFFFFFFFFFF01FC : 6100 FF68           		bsr	sndReq_sbyte
(1)  356/FFFFFFFFFFFF0200 : 1E01                		move.b	d1,d7		; d1.b Block <--
(1)  357/FFFFFFFFFFFF0202 : 6100 FF62           		bsr	sndReq_sbyte
(1)  358/FFFFFFFFFFFF0206 : 7EFF                		moveq	#-1,d7		; d2.b Slot
(1)  359/FFFFFFFFFFFF0208 : 6100 FF5C           		bsr	sndReq_sbyte
(1)  360/FFFFFFFFFFFF020C : 6000 FF22           		bra 	sndReq_Exit
(1)  361/FFFFFFFFFFFF0210 :                     
(1)  362/FFFFFFFFFFFF0210 :                     ; --------------------------------------------------------
(1)  363/FFFFFFFFFFFF0210 :                     ; gemaStopSeq
(1)  364/FFFFFFFFFFFF0210 :                     ;
(1)  365/FFFFFFFFFFFF0210 :                     ; Stops tracks with the same sequence number
(1)  366/FFFFFFFFFFFF0210 :                     ;
(1)  367/FFFFFFFFFFFF0210 :                     ; Input:
(1)  368/FFFFFFFFFFFF0210 :                     ; d0.b | Sequence number to search
(1)  369/FFFFFFFFFFFF0210 :                     ;        If -1: Stop all tracks with any sequence
(1)  370/FFFFFFFFFFFF0210 :                     ; d1.b | Playback slot number
(1)  371/FFFFFFFFFFFF0210 :                     ;        If -1: Stop all slots
(1)  372/FFFFFFFFFFFF0210 :                     ;
(1)  373/FFFFFFFFFFFF0210 :                     ; If both d0 and d1 are -1 it acts like gemaStopAll
(1)  374/FFFFFFFFFFFF0210 :                     ; --------------------------------------------------------
(1)  375/FFFFFFFFFFFF0210 :                     
(1)  376/FFFFFFFFFFFF0210 :                     gemaStopSeq:
(1)  377/FFFFFFFFFFFF0210 : 6100 FEE8           		bsr	sndReq_Enter
(1)  378/FFFFFFFFFFFF0214 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  379/FFFFFFFFFFFF0218 : 6100 FF32           		bsr	sndReq_scmd
(1)  380/FFFFFFFFFFFF021C : 1E00                		move.b	d0,d7		; d0.b Seq number
(1)  381/FFFFFFFFFFFF021E : 6100 FF46           		bsr	sndReq_sbyte
(1)  382/FFFFFFFFFFFF0222 : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  383/FFFFFFFFFFFF0224 : 6100 FF40           		bsr	sndReq_sbyte
(1)  384/FFFFFFFFFFFF0228 : 6000 FF06           		bra 	sndReq_Exit
(1)  385/FFFFFFFFFFFF022C :                     
(1)  386/FFFFFFFFFFFF022C :                     ; --------------------------------------------------------
(1)  387/FFFFFFFFFFFF022C :                     ; gemaStopAll
(1)  388/FFFFFFFFFFFF022C :                     ;
(1)  389/FFFFFFFFFFFF022C :                     ; Stops ALL tracks, quick version of gemaStopTrack.
(1)  390/FFFFFFFFFFFF022C :                     ; --------------------------------------------------------
(1)  391/FFFFFFFFFFFF022C :                     
(1)  392/FFFFFFFFFFFF022C :                     gemaStopAll:
(1)  393/FFFFFFFFFFFF022C : 6100 FECC           		bsr	sndReq_Enter
(1)  394/FFFFFFFFFFFF0230 : 3E3C 0003           		move.w	#$03,d7		; Command $03
(1)  395/FFFFFFFFFFFF0234 : 6100 FF16           		bsr	sndReq_scmd
(1)  396/FFFFFFFFFFFF0238 : 7EFF                		moveq	#-1,d7		; d0.b Seq number
(1)  397/FFFFFFFFFFFF023A : 6100 FF2A           		bsr	sndReq_sbyte
(1)  398/FFFFFFFFFFFF023E : 7EFF                		moveq	#-1,d7		; d1.b Slot
(1)  399/FFFFFFFFFFFF0240 : 6100 FF24           		bsr	sndReq_sbyte
(1)  400/FFFFFFFFFFFF0244 : 6000 FEEA           		bra 	sndReq_Exit
(1)  401/FFFFFFFFFFFF0248 :                     
(1)  402/FFFFFFFFFFFF0248 :                     ; --------------------------------------------------------
(1)  403/FFFFFFFFFFFF0248 :                     ; gemaFadeSeq
(1)  404/FFFFFFFFFFFF0248 :                     ;
(1)  405/FFFFFFFFFFFF0248 :                     ; Set Master volume to a track slot.
(1)  406/FFFFFFFFFFFF0248 :                     ;
(1)  407/FFFFFFFFFFFF0248 :                     ; Input:
(1)  408/FFFFFFFFFFFF0248 :                     ; d0.b | Target volume
(1)  409/FFFFFFFFFFFF0248 :                     ; d1.b | Playback slot number
(1)  410/FFFFFFFFFFFF0248 :                     ;        If -1: Apply to all slots
(1)  411/FFFFFFFFFFFF0248 :                     ;
(1)  412/FFFFFFFFFFFF0248 :                     ; Notes:
(1)  413/FFFFFFFFFFFF0248 :                     ; - DO NOT MIX THIS WITH gemaSetTrackVol
(1)  414/FFFFFFFFFFFF0248 :                     ; - v1.0: This only works on (re)start
(1)  415/FFFFFFFFFFFF0248 :                     ;   or during new notes on playback.
(1)  416/FFFFFFFFFFFF0248 :                     ; --------------------------------------------------------
(1)  417/FFFFFFFFFFFF0248 :                     
(1)  418/FFFFFFFFFFFF0248 :                     gemaFadeSeq:
(1)  419/FFFFFFFFFFFF0248 : 6100 FEB0           		bsr	sndReq_Enter
(1)  420/FFFFFFFFFFFF024C : 3E3C 0005           		move.w	#$05,d7		; Command $05
(1)  421/FFFFFFFFFFFF0250 : 6100 FEFA           		bsr	sndReq_scmd
(1)  422/FFFFFFFFFFFF0254 : 1E00                		move.b	d0,d7		; d0.b Target volume
(1)  423/FFFFFFFFFFFF0256 : 6100 FF0E           		bsr	sndReq_sbyte
(1)  424/FFFFFFFFFFFF025A : 1E01                		move.b	d1,d7		; d1.b Slot
(1)  425/FFFFFFFFFFFF025C : 6100 FF08           		bsr	sndReq_sbyte
(1)  426/FFFFFFFFFFFF0260 : 6000 FECE           		bra 	sndReq_Exit
(1)  427/FFFFFFFFFFFF0264 :                     
(1)  428/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  429/FFFFFFFFFFFF0264 :                     ; gemaSetSeqVol
(1)  430/FFFFFFFFFFFF0264 :                     ;
(1)  431/FFFFFFFFFFFF0264 :                     ; Set Master volume to a Seq slot.
(1)  432/FFFFFFFFFFFF0264 :                     ;
(1)  433/FFFFFFFFFFFF0264 :                     ; Input:
(1)  434/FFFFFFFFFFFF0264 :                     ; d0.b | Master volume: $00-max $40-min
(1)  435/FFFFFFFFFFFF0264 :                     ; d1.b | Playback slot number
(1)  436/FFFFFFFFFFFF0264 :                     ;        If -1: Set to all slots
(1)  437/FFFFFFFFFFFF0264 :                     ;
(1)  438/FFFFFFFFFFFF0264 :                     ; Notes:
(1)  439/FFFFFFFFFFFF0264 :                     ; - DO NOT MIX THIS WITH gemaFadeSeq
(1)  440/FFFFFFFFFFFF0264 :                     ; - v1.0: This only works on (re)start
(1)  441/FFFFFFFFFFFF0264 :                     ;   or during new notes on playback.
(1)  442/FFFFFFFFFFFF0264 :                     ; --------------------------------------------------------
(1)  443/FFFFFFFFFFFF0264 :                     
(1)  444/FFFFFFFFFFFF0264 :                     gemaSetSeqVol:
(1)  445/FFFFFFFFFFFF0264 : 6100 FE94           		bsr	sndReq_Enter
(1)  446/FFFFFFFFFFFF0268 : 3E3C 0006           		move.w	#$06,d7		; Command $06
(1)  447/FFFFFFFFFFFF026C : 6100 FEDE           		bsr	sndReq_scmd
(1)  448/FFFFFFFFFFFF0270 : 1E00                		move.b	d0,d7		; d1.b Volume data <--
(1)  449/FFFFFFFFFFFF0272 : 6100 FEF2           		bsr	sndReq_sbyte
(1)  450/FFFFFFFFFFFF0276 : 1E01                		move.b	d1,d7		; d0.b Slot
(1)  451/FFFFFFFFFFFF0278 : 6100 FEEC           		bsr	sndReq_sbyte
(1)  452/FFFFFFFFFFFF027C : 6000 FEB2           		bra 	sndReq_Exit
(1)  453/FFFFFFFFFFFF0280 :                     
(1)  454/FFFFFFFFFFFF0280 :                     ; --------------------------------------------------------
(1)  455/FFFFFFFFFFFF0280 :                     ; gemaSetBeats
(1)  456/FFFFFFFFFFFF0280 :                     ;
(1)  457/FFFFFFFFFFFF0280 :                     ; Set global sub-beats
(1)  458/FFFFFFFFFFFF0280 :                     ;
(1)  459/FFFFFFFFFFFF0280 :                     ; Input:
(1)  460/FFFFFFFFFFFF0280 :                     ; d0.w | Sub-beats value
(1)  461/FFFFFFFFFFFF0280 :                     ;
(1)  462/FFFFFFFFFFFF0280 :                     ; Note:
(1)  463/FFFFFFFFFFFF0280 :                     ; If the Z80 is running in PAL mode the number will
(1)  464/FFFFFFFFFFFF0280 :                     ; change inside the Z80 to match the PAL's speed.
(1)  465/FFFFFFFFFFFF0280 :                     ; --------------------------------------------------------
(1)  466/FFFFFFFFFFFF0280 :                     
(1)  467/FFFFFFFFFFFF0280 :                     gemaSetBeats:
(1)  468/FFFFFFFFFFFF0280 : 6100 FE78           		bsr	sndReq_Enter
(1)  469/FFFFFFFFFFFF0284 : 3E3C 0007           		move.w	#$07,d7		; Command $07
(1)  470/FFFFFFFFFFFF0288 : 6100 FEC2           		bsr	sndReq_scmd
(1)  471/FFFFFFFFFFFF028C : 3E00                		move.w	d0,d7		; d0.w Sub-beat value
(1)  472/FFFFFFFFFFFF028E : 6100 FED2           		bsr	sndReq_sword
(1)  473/FFFFFFFFFFFF0292 : 6000 FE9C           		bra 	sndReq_Exit
(1)  474/FFFFFFFFFFFF0296 :                     
     197/FFFFFFFFFFFF0296 :                     		include	"nikona/md/video.asm"
(1)    1/FFFFFFFFFFFF0296 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF0296 :                     ; Genesis VDP section
(1)    4/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)    5/FFFFFFFFFFFF0296 :                     
(1)    6/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)    7/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)    8/FFFFFFFFFFFF0296 :                     ; Settings
(1)    9/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF0296 :                     
(1)   11/FFFFFFFFFFFF0296 : =$18                 MAX_MDDMATSK		equ 24		; DMA BLAST entries
(1)   12/FFFFFFFFFFFF0296 : =$18                 MAX_MDMAPSPR		equ 24		; VDP sprites with map data
(1)   13/FFFFFFFFFFFF0296 : =$8                  MAX_PALFDREQ		equ 8		; Maximum Pal-fading requests both VDP/SVDP, includes full fade
(1)   14/FFFFFFFFFFFF0296 :                     
(1)   15/FFFFFFFFFFFF0296 : =$7FE                SET_NullVram		equ $07FE	; Default Blank cell
(1)   16/FFFFFFFFFFFF0296 : =$480                SET_DefAutoDma		equ $0480	; Default VRAM location for automatic-DMA output
(1)   17/FFFFFFFFFFFF0296 : =$5A0                DEF_PrintVram		equ $05A0	; Default VRAM location of the PRINT text graphics
(1)   18/FFFFFFFFFFFF0296 : =$4E0                DEF_PrintVramW		equ $04E0
(1)   19/FFFFFFFFFFFF0296 : =$6000               DEF_PrintPal		equ $6000
(1)   20/FFFFFFFFFFFF0296 :                     
(1)   21/FFFFFFFFFFFF0296 : =$60                 DEF_MaxStampCOut	equ $60		; Maximum backup cells for the SCD Stamps
(1)   22/FFFFFFFFFFFF0296 :                     
(1)   23/FFFFFFFFFFFF0296 :                     ; ===================================================================
(1)   24/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   25/FFFFFFFFFFFF0296 :                     ; Variables
(1)   26/FFFFFFFFFFFF0296 :                     ; --------------------------------------------------------
(1)   27/FFFFFFFFFFFF0296 :                     
(1)   28/FFFFFFFFFFFF0296 :                     ; VATTR_PAL0		equ $0000
(1)   29/FFFFFFFFFFFF0296 : =$800                VATTR_FLIPH		equ $0800
(1)   30/FFFFFFFFFFFF0296 : =$1000               VATTR_FLIPV		equ $1000
(1)   31/FFFFFFFFFFFF0296 : =$2000               VATTR_PAL1		equ $2000
(1)   32/FFFFFFFFFFFF0296 : =$4000               VATTR_PAL2		equ $4000
(1)   33/FFFFFFFFFFFF0296 : =$6000               VATTR_PAL3		equ $6000
(1)   34/FFFFFFFFFFFF0296 : =$8000               VATTR_HI		equ $8000
(1)   35/FFFFFFFFFFFF0296 :                     
(1)   36/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   37/FFFFFFFFFFFF0296 :                     ; Use these if you are not planning changing
(1)   38/FFFFFFFFFFFF0296 :                     ; the VRAM locations of the scrolling area(s)
(1)   39/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF0296 : =$C000               DEF_VRAM_FG		equ $C000
(1)   41/FFFFFFFFFFFF0296 : =$E000               DEF_VRAM_BG		equ $E000
(1)   42/FFFFFFFFFFFF0296 : =$D000               DEF_VRAM_WD		equ $D000
(1)   43/FFFFFFFFFFFF0296 : =$F800               DEF_VRAM_SPR		equ $F800
(1)   44/FFFFFFFFFFFF0296 : =$FC00               DEF_VRAM_HSCRL		equ $FC00
(1)   45/FFFFFFFFFFFF0296 :                     
(1)   46/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   47/FFFFFFFFFFFF0296 :                     ; H sizes for the current layer
(1)   48/FFFFFFFFFFFF0296 :                     ;
(1)   49/FFFFFFFFFFFF0296 :                     ; Note:
(1)   50/FFFFFFFFFFFF0296 :                     ; WINDOW's width changes between H32 and H40
(1)   51/FFFFFFFFFFFF0296 :                     ; resolution modes.
(1)   52/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   53/FFFFFFFFFFFF0296 : =$40                 DEF_HSIZE_32		equ $040
(1)   54/FFFFFFFFFFFF0296 : =$80                 DEF_HSIZE_64		equ $080	; Default
(1)   55/FFFFFFFFFFFF0296 : =$100                DEF_HSIZE_128		equ $100
(1)   56/FFFFFFFFFFFF0296 :                     
(1)   57/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   58/FFFFFFFFFFFF0296 :                     ; VDP registers
(1)   59/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   60/FFFFFFFFFFFF0296 :                     ; $80
(1)   61/FFFFFFFFFFFF0296 : =$2                  HVStop			equ $02
(1)   62/FFFFFFFFFFFF0296 : =$10                 HintEnbl		equ $10
(1)   63/FFFFFFFFFFFF0296 : =$1                  bitHVStop		equ 1
(1)   64/FFFFFFFFFFFF0296 : =$4                  bitHintEnbl		equ 4
(1)   65/FFFFFFFFFFFF0296 :                     ; $81
(1)   66/FFFFFFFFFFFF0296 : =$40                 DispEnbl 		equ $40
(1)   67/FFFFFFFFFFFF0296 : =$20                 VintEnbl 		equ $20
(1)   68/FFFFFFFFFFFF0296 : =$10                 DmaEnbl			equ $10
(1)   69/FFFFFFFFFFFF0296 : =$6                  bitDispEnbl		equ 6
(1)   70/FFFFFFFFFFFF0296 : =$5                  bitVintEnbl		equ 5
(1)   71/FFFFFFFFFFFF0296 : =$4                  bitDmaEnbl		equ 4
(1)   72/FFFFFFFFFFFF0296 : =$3                  bitV30			equ 3
(1)   73/FFFFFFFFFFFF0296 :                     
(1)   74/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   75/FFFFFFFFFFFF0296 :                     ; VDP VRAM bits
(1)   76/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF0296 :                     ; BYTE read:
(1)   78/FFFFFFFFFFFF0296 : =$7                  bitAttrPrio		equ 7
(1)   79/FFFFFFFFFFFF0296 : =$4                  bitAttrV		equ 4
(1)   80/FFFFFFFFFFFF0296 : =$3                  bitAttrH		equ 3
(1)   81/FFFFFFFFFFFF0296 :                     ; WORD read:
(1)   82/FFFFFFFFFFFF0296 : =$8000               AttrPrio		equ $8000
(1)   83/FFFFFFFFFFFF0296 : =$1000               AttrV			equ $1000
(1)   84/FFFFFFFFFFFF0296 : =$800                AttrH			equ $0800
(1)   85/FFFFFFFFFFFF0296 :                     
(1)   86/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   87/FFFFFFFFFFFF0296 :                     ; vdp_ctrl READ bits
(1)   88/FFFFFFFFFFFF0296 :                     ; Read as WORD
(1)   89/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)   90/FFFFFFFFFFFF0296 : =$9                  bitFifoE		equ 9		; VDP DMA FIFO empty
(1)   91/FFFFFFFFFFFF0296 : =$8                  bitFifoF		equ 8		; VDP DMA FIFO full
(1)   92/FFFFFFFFFFFF0296 : =$7                  bitVInt			equ 7		; Vertical interrupt (NOT confused with bitVBlk)
(1)   93/FFFFFFFFFFFF0296 : =$6                  bitSprOvr		equ 6		; Sprite overflow
(1)   94/FFFFFFFFFFFF0296 : =$5                  bitSprCol		equ 5		; Sprite collision (leftover feature)
(1)   95/FFFFFFFFFFFF0296 : =$4                  bitOdd			equ 4		; EVEN or ODD frame displayed on interlace mode
(1)   96/FFFFFFFFFFFF0296 : =$3                  bitVBlk			equ 3		; Inside VBlank
(1)   97/FFFFFFFFFFFF0296 : =$2                  bitHBlk			equ 2		; Inside HBlank
(1)   98/FFFFFFFFFFFF0296 : =$1                  bitDma			equ 1		; DMA active bit, only works on FILL and COPY
(1)   99/FFFFFFFFFFFF0296 : =$0                  bitPal			equ 0		; VDP PAL-speed mode flag
(1)  100/FFFFFFFFFFFF0296 :                     
(1)  101/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  102/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  103/FFFFFFFFFFFF0296 :                     ; Structs
(1)  104/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  105/FFFFFFFFFFFF0296 :                     
(1)  106/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)  107/FFFFFFFFFFFF0296 :                     ; RAM_PalFadeList
(1)  108/       0 :                     palfd			struct
(1)  109/       0 :                     req			ds.b 1
(1)  110/       1 :                     delay			ds.b 1
(1)  111/       2 :                     start			ds.b 1
(1)  112/       3 :                     incr			ds.b 1
(1)  113/       4 :                     target			ds.b 1
(1)  114/       5 :                     timer			ds.b 1
(1)  115/       6 :                     num			ds.w 1
(1)  116/       8 :                     ; len			ds.l 0
(1)  117/FFFFFFFFFFFF0296 : =$8                  			endstruct
(1)  118/FFFFFFFFFFFF0296 :                     
(1)  119/FFFFFFFFFFFF0296 :                     ; ------------------------------------------------
(1)  120/FFFFFFFFFFFF0296 :                     ; RAM_MdMcd_Stamps
(1)  121/FFFFFFFFFFFF0296 :                     
(1)  122/       0 :                     mdstmp			struct
(1)  123/       0 :                     flags			ds.w 1		; Flags settings/status
(1)  124/       2 :                     vramMain		ds.w 1		; Main VRAM output *full*
(1)  125/       4 :                     vramSec			ds.w 1		; Secondary VRAM output *full*
(1)  126/       6 :                     vramSize		ds.w 1
(1)  127/       8 :                     vramLen			ds.w 1		; temporals
(1)  128/       A :                     vramIncr		ds.w 1		; ''
(1)  129/       C :                     stmpoutb		ds.w 1
(1)  130/       E :                     currOutFlip		ds.w 1
(1)  131/      10 :                     fdrop			ds.w 1
(1)  132/      12 :                     cellstorage		ds.l 1
(1)  133/      16 :                     dotIncr			ds.l 1
(1)  134/      1A :                     buffIncr		ds.l 1
(1)  135/      1E :                     ; len			ds.l 0
(1)  136/FFFFFFFFFFFF0296 : =$1E                 			endstruct
(1)  137/FFFFFFFFFFFF0296 :                     
(1)  138/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  139/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  140/FFFFFFFFFFFF0296 :                     ; RAM section
(1)  141/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  142/FFFFFFFFFFFF0296 :                     ; Some 32X labels are in system/shared.asm
(1)  143/FFFFFFFFFFFF0296 :                     
(1)  144/FFFFFFFFFFFF0296 : (MACRO)              			memory RAM_MdVideo
(1)  144/FFFFFFFFFFFF0296 : =$FFFFFFFFFFFF0296   GLBL_LASTPC     := *
(1)  144/    2DE4 :                                     dephase
(1)  144/FFFFFFFFFFFFD880 :                                     phase RAM_MDVIDEO
(1)  144/FFFFFFFFFFFFD880 : =$FFFFFFFFFFFFD880   GLBL_LASTORG    := *
(1)  145/FFFFFFFFFFFFD880 :                     	; *** Variables cleared when changing screen modes ***
(1)  146/FFFFFFFFFFFFD880 :                     RAM_PalFadeList		ds.b palfd_len*MAX_PALFDREQ	; Pal-fade request and buffers
(1)  147/FFFFFFFFFFFFD8C0 :                     RAM_SprMapList		ds.b $10*MAX_MDMAPSPR		; List of mapped-sprite data
(1)  148/FFFFFFFFFFFFDA40 :                     RAM_SprPzList		ds.b $08*80			; List of sprite pieces to build
(1)  149/FFFFFFFFFFFFDCC0 :                     RAM_HorScroll		ds.l 240			; DMA Horizontal scroll data
(1)  150/FFFFFFFFFFFFE080 :                     RAM_VerScroll		ds.l 320/16			; DMA Vertical scroll data
(1)  151/FFFFFFFFFFFFE0D0 :                     RAM_Sprites		ds.w 8*80			; DMA Sprites
(1)  152/FFFFFFFFFFFFE5D0 :                     RAM_Palette		ds.w 64				; DMA Palette
(1)  153/FFFFFFFFFFFFE650 :                     RAM_PaletteFade		ds.w 64				; Target MD palette for FadeIn/Out
(1)  154/FFFFFFFFFFFFE6D0 :                     RAM_VdpDmaIndx		ds.w 1				; Current index in DMA BLAST list
(1)  155/FFFFFFFFFFFFE6D2 :                     RAM_VdpDmaMod		ds.w 1				; Mid-write flag
(1)  156/FFFFFFFFFFFFE6D4 :                     RAM_SprOffsetX		ds.w 1				; X spriteset position
(1)  157/FFFFFFFFFFFFE6D6 :                     RAM_SprOffsetY		ds.w 1				; Y spriteset position
(1)  158/FFFFFFFFFFFFE6D8 :                     RAM_MdVidClr_e		ds.l 0				; <-- END POINT for Video_Clear
(1)  159/FFFFFFFFFFFFE6DC :                     	; *** Variables kept when changing screen modes ***
(1)  160/FFFFFFFFFFFFE6DC :                     RAM_VdpDmaList		ds.b $10*MAX_MDDMATSK		; DMA BLAST list for VBlank
(1)  161/FFFFFFFFFFFFE85C :                     RAM_FrameCount		ds.l 1				; Frame-counter
(1)  162/FFFFFFFFFFFFE860 :                     RAM_IndxPalFade		ds.w 1				; Current index in the pal-fade request list
(1)  163/FFFFFFFFFFFFE862 :                     RAM_SprLinkNum		ds.w 1				; Current link number for the sprite-building routines
(1)  164/FFFFFFFFFFFFE864 :                     RAM_VdpVramFG		ds.w 1				; Full VRAM location for FG
(1)  165/FFFFFFFFFFFFE866 :                     RAM_VdpVramBG		ds.w 1				; '' BG
(1)  166/FFFFFFFFFFFFE868 :                     RAM_VdpVramWD		ds.w 1				; '' Window
(1)  167/FFFFFFFFFFFFE86A :                     RAM_VdpVramSpr		ds.w 1				; '' Sprites
(1)  168/FFFFFFFFFFFFE86C :                     RAM_VdpVramHScrl	ds.w 1				; '' Horizontal scroll
(1)  169/FFFFFFFFFFFFE86E :                     RAM_VdpMapSize		ds.w 1				; BG/FG Size
(1)  170/FFFFFFFFFFFFE870 :                     RAM_VdpRegSet0		ds.w 1				; * VDP Register $80
(1)  171/FFFFFFFFFFFFE872 :                     RAM_VdpRegSet1		ds.w 1				; * VDP Register $81
(1)  172/FFFFFFFFFFFFE874 :                     RAM_VdpRegSetB		ds.w 1				; * VDP Register $8B
(1)  173/FFFFFFFFFFFFE876 :                     RAM_VdpRegSetC		ds.w 1				; * VDP Register $8C
(1)  174/FFFFFFFFFFFFE878 :                     sizeof_mdvid		ds.l 0
(1)  175/FFFFFFFFFFFFE87C : (MACRO)              			endmemory
(1)  175/    3DE0 :                     .here:          dephase
(1)  175/    3DE0 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  175/FFFFFFFFFFFF0296 :                                     phase GLBL_LASTPC
(1)  176/FFFFFFFFFFFF0296 :                     
(1)  177/FFFFFFFFFFFF0296 :                     ; ====================================================================
(1)  178/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  179/FFFFFFFFFFFF0296 :                     ; Video_Init
(1)  180/FFFFFFFFFFFF0296 :                     ;
(1)  181/FFFFFFFFFFFF0296 :                     ; Initialize Genesis video, call this once.
(1)  182/FFFFFFFFFFFF0296 :                     ;
(1)  183/FFFFFFFFFFFF0296 :                     ; Uses:
(1)  184/FFFFFFFFFFFF0296 :                     ; d5-d7/a5-a6
(1)  185/FFFFFFFFFFFF0296 :                     ; ----------------------------------------------------------------
(1)  186/FFFFFFFFFFFF0296 :                     
(1)  187/FFFFFFFFFFFF0296 :                     Video_Init:
(1)  188/FFFFFFFFFFFF0296 : 4DF8 D880           		lea	(RAM_MdVideo).w,a6			; Clear ALL Video RAM section
(1)  189/FFFFFFFFFFFF029A : 7C00                		moveq	#0,d6
(1)  190/FFFFFFFFFFFF029C : 3E3C 0FF7           		move.w	#(sizeof_mdvid-RAM_MdVideo)-1,d7
(1)  191/FFFFFFFFFFFF02A0 :                     .clr_ram:
(1)  192/FFFFFFFFFFFF02A0 : 1CC6                		move.b	d6,(a6)+
(1)  193/FFFFFFFFFFFF02A2 : 51CF FFFC           		dbf	d7,.clr_ram
(1)  194/FFFFFFFFFFFF02A6 : 4DF8 E6DC           		lea	(RAM_VdpDmaList).w,a6			; Write base DMA registers
(1)  195/FFFFFFFFFFFF02AA : 4BFA 0072           		lea	.dma_entry(pc),a5
(1)  196/FFFFFFFFFFFF02AE : 3E3C 0017           		move.w	#MAX_MDDMATSK-1,d7
(1)  197/FFFFFFFFFFFF02B2 :                     .copy_dma:
(1)  198/FFFFFFFFFFFF02B2 : 2CD5                		move.l	(a5),(a6)+
(1)  199/FFFFFFFFFFFF02B4 : 2CED 0004           		move.l	4(a5),(a6)+
(1)  200/FFFFFFFFFFFF02B8 : 2CED 0008           		move.l	8(a5),(a6)+
(1)  201/FFFFFFFFFFFF02BC : 2CED 000C           		move.l	$C(a5),(a6)+
(1)  202/FFFFFFFFFFFF02C0 : 51CF FFF0           		dbf	d7,.copy_dma
(1)  203/FFFFFFFFFFFF02C4 : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6			; Delete Mapped sprite entries
(1)  204/FFFFFFFFFFFF02C8 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  205/FFFFFFFFFFFF02CC :                     .clr_d:
(1)  206/FFFFFFFFFFFF02CC : 429E                		clr.l	(a6)+
(1)  207/FFFFFFFFFFFF02CE : 429E                		clr.l	(a6)+
(1)  208/FFFFFFFFFFFF02D0 : 429E                		clr.l	(a6)+
(1)  209/FFFFFFFFFFFF02D2 : 429E                		clr.l	(a6)+
(1)  210/FFFFFFFFFFFF02D4 : 51CF FFF6           		dbf	d7,.clr_d
(1)  211/FFFFFFFFFFFF02D8 : 4278 E860           		clr.w	(RAM_IndxPalFade).w			; Reset all VDP palfade requests
(1)  212/FFFFFFFFFFFF02DC : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1)  213/FFFFFFFFFFFF02E0 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  214/FFFFFFFFFFFF02E4 :                     .clr_preq:
(1)  215/FFFFFFFFFFFF02E4 : 429E                		clr.l	(a6)+
(1)  216/FFFFFFFFFFFF02E6 : 429E                		clr.l	(a6)+
(1)  217/FFFFFFFFFFFF02E8 : 51CF FFFA           		dbf	d7,.clr_preq
(1)  219/FFFFFFFFFFFF02EC : 4278 CC1E           		clr.w	(RAM_MdMars_IndxPalFd).w		; Reset all 32X palfade requests
(1)  220/FFFFFFFFFFFF02F0 : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1)  221/FFFFFFFFFFFF02F4 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1)  222/FFFFFFFFFFFF02F8 :                     .clr_mreq:
(1)  223/FFFFFFFFFFFF02F8 : 429E                		clr.l	(a6)+
(1)  224/FFFFFFFFFFFF02FA : 429E                		clr.l	(a6)+
(1)  225/FFFFFFFFFFFF02FC : 51CF FFFA           		dbf	d7,.clr_mreq
(1)  227/FFFFFFFFFFFF0300 : 4CBA 000F 002C      		movem.w	.def_regset(pc),d0-d3			; Set default VDP regs $80,$81,$8B,$8C
(1)  228/FFFFFFFFFFFF0306 : 48B8 000F E870      		movem.w	d0-d3,(RAM_VdpRegSet0).w
(1)  229/FFFFFFFFFFFF030C : 23F8 E870 00C0      		move.l	(RAM_VdpRegSet0).w,(vdp_ctrl).l
         FFFFFFFFFFFF0312 : 0004             
(1)  230/FFFFFFFFFFFF0314 : 23F8 E874 00C0      		move.l	(RAM_VdpRegSetB).w,(vdp_ctrl).l
         FFFFFFFFFFFF031A : 0004             
(1)  231/FFFFFFFFFFFF031C : 601C                		bra	Video_Default
(1)  232/FFFFFFFFFFFF031E :                     
(1)  233/FFFFFFFFFFFF031E :                     ; --------------------------------------------------------
(1)  234/FFFFFFFFFFFF031E :                     ; DMA blast base entry
(1)  235/FFFFFFFFFFFF031E :                     .dma_entry:
(1)  236/FFFFFFFFFFFF031E : 9400 9300           		dc.w $9400,$9300			; Size
(1)  237/FFFFFFFFFFFF0322 : 9600 9500 9700      		dc.w $9600,$9500,$9700			; Source
(1)  238/FFFFFFFFFFFF0328 : 4000 0080           		dc.l $40000080 				; VDP write with DMA
(1)  239/FFFFFFFFFFFF032C : 0000                		dc.w $0000				; Patch for the first 4 pixels (SCD/CD32X only)
(1)  240/FFFFFFFFFFFF032E :                     		align 2
(1)  241/FFFFFFFFFFFF0330 :                     .def_regset:
(1)  242/FFFFFFFFFFFF0330 : 8004 8104 8B00      		dc.w $8004,$8104,$8B00,$8C00
         FFFFFFFFFFFF0336 : 8C00             
(1)  243/FFFFFFFFFFFF0338 :                     		align 2
(1)  244/FFFFFFFFFFFF033A :                     
(1)  245/FFFFFFFFFFFF033A :                     ; --------------------------------------------------------
(1)  246/FFFFFFFFFFFF033A :                     ; Video_Default
(1)  247/FFFFFFFFFFFF033A :                     ;
(1)  248/FFFFFFFFFFFF033A :                     ; Reset VDP settings to defaults
(1)  249/FFFFFFFFFFFF033A :                     ; SCD: Clears ALL Stamps
(1)  250/FFFFFFFFFFFF033A :                     ; --------------------------------------------------------
(1)  251/FFFFFFFFFFFF033A :                     
(1)  252/FFFFFFFFFFFF033A :                     Video_Default:
(1)  253/FFFFFFFFFFFF033A : 23FC 9100 9200      		move.l	#$91009200,(vdp_ctrl).l			; Clear WINDOW
         FFFFFFFFFFFF0340 : 00C0 0004          
(1)  254/FFFFFFFFFFFF0344 : 33FC 8F02 00C0      		move.w	#$8F00|$02,(vdp_ctrl).l			; VDP increment $02
         FFFFFFFFFFFF034A : 0004             
(1)  255/FFFFFFFFFFFF034C : 31FC C000 E864      		move.w	#DEF_VRAM_FG,(RAM_VdpVramFG).w
(1)  256/FFFFFFFFFFFF0352 : 31FC E000 E866      		move.w	#DEF_VRAM_BG,(RAM_VdpVramBG).w
(1)  257/FFFFFFFFFFFF0358 : 31FC D000 E868      		move.w	#DEF_VRAM_WD,(RAM_VdpVramWD).w
(1)  258/FFFFFFFFFFFF035E : 31FC F800 E86A      		move.w	#DEF_VRAM_SPR,(RAM_VdpVramSpr).w
(1)  259/FFFFFFFFFFFF0364 : 31FC FC00 E86C      		move.w	#DEF_VRAM_HSCRL,(RAM_VdpVramHScrl).w
(1)  260/FFFFFFFFFFFF036A : 6100 045A           		bsr	Video_UpdMapVram
(1)  261/FFFFFFFFFFFF036E : 6100 04A8           		bsr	Video_UpdSprHVram
(1)  262/FFFFFFFFFFFF0372 : 7001                		moveq	#%0001,d0				; Size H64 V32
(1)  263/FFFFFFFFFFFF0374 : 6100 04DC           		bsr	Video_SetMapSize
(1)  264/FFFFFFFFFFFF0378 : 7001                		moveq	#%0001,d0				; Resolution 320x224
(1)  265/FFFFFFFFFFFF037A : 6000 03FA           		bra	Video_Resolution
(1)  266/FFFFFFFFFFFF037E :                     
(1)  267/FFFFFFFFFFFF037E :                     ; ====================================================================
(1)  268/FFFFFFFFFFFF037E :                     ; --------------------------------------------------------
(1)  269/FFFFFFFFFFFF037E :                     ; Video_Render
(1)  270/FFFFFFFFFFFF037E :                     ;
(1)  271/FFFFFFFFFFFF037E :                     ; Call this during VBlank to update the VDP visuals
(1)  272/FFFFFFFFFFFF037E :                     ; and process the DMA BLAST list, also resets a
(1)  273/FFFFFFFFFFFF037E :                     ; few variables.
(1)  274/FFFFFFFFFFFF037E :                     ; (This is already called on System_Render)
(1)  275/FFFFFFFFFFFF037E :                     ;
(1)  276/FFFFFFFFFFFF037E :                     ; Uses:
(1)  277/FFFFFFFFFFFF037E :                     ; ALL
(1)  278/FFFFFFFFFFFF037E :                     ; --------------------------------------------------------
(1)  279/FFFFFFFFFFFF037E :                     
(1)  280/FFFFFFFFFFFF037E :                     Video_Render:
(1)  281/FFFFFFFFFFFF037E : 6100 0380           		bsr	Video_DmaOn
(1)  282/FFFFFFFFFFFF0382 : 6100 1BC4           		bsr	System_DmaEnter_RAM
(1)  283/FFFFFFFFFFFF0386 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  284/FFFFFFFFFFFF038C : 3E38 E86A           		move.w	(RAM_VdpVramSpr).w,d7
(1)  285/FFFFFFFFFFFF0390 : 3A38 E86C           		move.w	(RAM_VdpVramHScrl).w,d5
(1)  286/FFFFFFFFFFFF0394 : 3C07                		move.w	d7,d6
(1)  287/FFFFFFFFFFFF0396 : 0247 3FFF           		andi.w	#$3FFF,d7
(1)  288/FFFFFFFFFFFF039A : 0047 4000           		ori.w	#$4000,d7
(1)  289/FFFFFFFFFFFF039E : E55E                		rol.w	#2,d6
(1)  290/FFFFFFFFFFFF03A0 : 0246 0003           		andi.w	#%11,d6
(1)  291/FFFFFFFFFFFF03A4 : 8C7C 0080           		or.w	#$80,d6
(1)  292/FFFFFFFFFFFF03A8 : 3805                		move.w	d5,d4
(1)  293/FFFFFFFFFFFF03AA : 0245 3FFF           		andi.w	#$3FFF,d5
(1)  294/FFFFFFFFFFFF03AE : 0045 4000           		ori.w	#$4000,d5
(1)  295/FFFFFFFFFFFF03B2 : E55C                		rol.w	#2,d4
(1)  296/FFFFFFFFFFFF03B4 : 0244 0003           		andi.w	#%11,d4
(1)  297/FFFFFFFFFFFF03B8 : 887C 0080           		or.w	#$80,d4
(1)  298/FFFFFFFFFFFF03BC : 2CBC 9401 9340      		move.l	#$94019340,(a6)			; Size $280/2
(1)  299/FFFFFFFFFFFF03C2 : 2CBC 96F0 9568      		move.l	#$96009500|(RAM_Sprites<<7&$FF0000)|(RAM_Sprites>>1&$FF),(a6)
(1)  300/FFFFFFFFFFFF03C8 : 3CBC 977F           		move.w	#$9700|(RAM_Sprites>>17&$7F),(a6)
(1)  301/FFFFFFFFFFFF03CC : 3C87                		move.w	d7,(a6)
(1)  302/FFFFFFFFFFFF03CE : 3F06                		move.w	d6,-(sp)
(1)  303/FFFFFFFFFFFF03D0 : 3C9F                		move.w	(sp)+,(a6)
(1)  304/FFFFFFFFFFFF03D2 : 2CBC 9401 93E0      		move.l	#$940193E0,(a6)			; Size $3C0/2
(1)  305/FFFFFFFFFFFF03D8 : 2CBC 96EE 9560      		move.l	#$96009500|(RAM_HorScroll<<7&$FF0000)|(RAM_HorScroll>>1&$FF),(a6)
(1)  306/FFFFFFFFFFFF03DE : 3CBC 977F           		move.w	#$9700|(RAM_HorScroll>>17&$7F),(a6)
(1)  307/FFFFFFFFFFFF03E2 : 3C85                		move.w	d5,(a6)
(1)  308/FFFFFFFFFFFF03E4 : 3F04                		move.w	d4,-(sp)
(1)  309/FFFFFFFFFFFF03E6 : 3C9F                		move.w	(sp)+,(a6)
(1)  310/FFFFFFFFFFFF03E8 : 2CBC 9400 9328      		move.l	#$94009328,(a6)
(1)  311/FFFFFFFFFFFF03EE : 2CBC 96F0 9540      		move.l	#$96009500|(RAM_VerScroll<<7&$FF0000)|(RAM_VerScroll>>1&$FF),(a6)
(1)  312/FFFFFFFFFFFF03F4 : 3CBC 977F           		move.w	#$9700|(RAM_VerScroll>>17&$7F),(a6)
(1)  313/FFFFFFFFFFFF03F8 : 3CBC 4000           		move.w	#$4000,(a6)
(1)  314/FFFFFFFFFFFF03FC : 3F3C 0090           		move.w	#$0010|$80,-(sp)
(1)  315/FFFFFFFFFFFF0400 : 3C9F                		move.w	(sp)+,(a6)
(1)  316/FFFFFFFFFFFF0402 : 2CBC 9400 9340      		move.l	#$94009340,(a6)
(1)  317/FFFFFFFFFFFF0408 : 2CBC 96F2 95E8      		move.l	#$96009500|(RAM_Palette<<7&$FF0000)|(RAM_Palette>>1&$FF),(a6)
(1)  318/FFFFFFFFFFFF040E : 3CBC 977F           		move.w	#$9700|(RAM_Palette>>17&$7F),(a6)
(1)  319/FFFFFFFFFFFF0412 : 3CBC C000           		move.w	#$C000,(a6)
(1)  320/FFFFFFFFFFFF0416 : 3F3C 0080           		move.w	#$0000|$80,-(sp)
(1)  321/FFFFFFFFFFFF041A : 3C9F                		move.w	(sp)+,(a6)
(1)  322/FFFFFFFFFFFF041C : 6100 1B2E           		bsr	System_DmaExit_RAM
(1)  323/FFFFFFFFFFFF0420 : 6100 02EA           		bsr	Video_DmaOff
(1)  324/FFFFFFFFFFFF0424 :                     
(1)  325/FFFFFFFFFFFF0424 :                     ; --------------------------------------------------------
(1)  326/FFFFFFFFFFFF0424 :                     ; Struct:
(1)  327/FFFFFFFFFFFF0424 :                     ; dc.w $94xx,$93xx		; Size
(1)  328/FFFFFFFFFFFF0424 :                     ; dc.w $96xx,$95xx,$97xx	; Source
(1)  329/FFFFFFFFFFFF0424 :                     ; dc.l $4xxx008x 		; VDP destination with DMA bit
(1)  330/FFFFFFFFFFFF0424 :                     ; dc.w $xxxx			; SegaCD/CD32X only: Patch for the first 4 pixels
(1)  331/FFFFFFFFFFFF0424 : 4A78 E6D2           		tst.w	(RAM_VdpDmaMod).w		; Got mid-write?
(1)  332/FFFFFFFFFFFF0428 : 6650                		bne.s	.exit
(1)  333/FFFFFFFFFFFF042A : 4A78 E6D0           		tst.w	(RAM_VdpDmaIndx).w		; Any requests?
(1)  334/FFFFFFFFFFFF042E : 674A                		beq.s	.exit
(1)  335/FFFFFFFFFFFF0430 : 49F9 00C0 0004      		lea	(vdp_ctrl).l,a4			; a4 - vdp_ctrl
(1)  336/FFFFFFFFFFFF0436 : 47F8 E6DC           		lea	(RAM_VdpDmaList).w,a3		; a3 - Blast list
(1)  337/FFFFFFFFFFFF043A : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7		; DMA Enable + VDP Display OFF
(1)  338/FFFFFFFFFFFF043E : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  339/FFFFFFFFFFFF0442 : 3887                		move.w	d7,(a4)
(1)  340/FFFFFFFFFFFF0444 : 6100 1AC8           		bsr	System_DmaEnter_ROM
(1)  341/FFFFFFFFFFFF0448 : 4A78 E6D0           .next:		tst.w	(RAM_VdpDmaIndx).w
(1)  342/FFFFFFFFFFFF044C : 6722                		beq.s	.end
(1)  343/FFFFFFFFFFFF044E : 289B                		move.l	(a3)+,(a4)			; Size
(1)  344/FFFFFFFFFFFF0450 : 289B                		move.l	(a3)+,(a4)			; Source
(1)  345/FFFFFFFFFFFF0452 : 389B                		move.w	(a3)+,(a4)
(1)  346/FFFFFFFFFFFF0454 :                     	; CD/CD32X
(1)  348/FFFFFFFFFFFF0454 : 361B                		move.w	(a3)+,d3			; Destination
(1)  349/FFFFFFFFFFFF0456 : 341B                		move.w	(a3)+,d2
(1)  350/FFFFFFFFFFFF0458 : 3F02                		move.w	d2,-(sp)			; Use stack for this write
(1)  351/FFFFFFFFFFFF045A : 3883                		move.w	d3,(a4)
(1)  352/FFFFFFFFFFFF045C : 389F                		move.w	(sp)+,(a4)			; *** CPU freezes ***
(1)  353/FFFFFFFFFFFF045E : 0242 FF7F           		andi.w	#$FF7F,d2			; Remove DMA bit
(1)  354/FFFFFFFFFFFF0462 : 3883                		move.w	d3,(a4)				; Set VDP control normally
(1)  355/FFFFFFFFFFFF0464 : 3882                		move.w	d2,(a4)
(1)  356/FFFFFFFFFFFF0466 : 395B FFFC           		move.w	(a3)+,-4(a4)			; Write the patch data
(1)  357/FFFFFFFFFFFF046A :                     	; Cartridge
(1)  363/FFFFFFFFFFFF046A : 5378 E6D0           		subq.w	#1,(RAM_VdpDmaIndx).w
(1)  364/FFFFFFFFFFFF046E : 60D8                		bra.s	.next
(1)  365/FFFFFFFFFFFF0470 :                     .end:
(1)  366/FFFFFFFFFFFF0470 : 6100 1AA0           		bsr	System_DmaExit_ROM
(1)  367/FFFFFFFFFFFF0474 : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7		; Restore reg $81 setting
(1)  368/FFFFFFFFFFFF0478 : 3887                		move.w	d7,(a4)
(1)  369/FFFFFFFFFFFF047A :                     .exit:
(1)  370/FFFFFFFFFFFF047A : 4E75                		rts
(1)  371/FFFFFFFFFFFF047C :                     
(1)  372/FFFFFFFFFFFF047C :                     ; ====================================================================
(1)  373/FFFFFFFFFFFF047C :                     ; --------------------------------------------------------
(1)  374/FFFFFFFFFFFF047C :                     ; Video_BuildSprites
(1)  375/FFFFFFFFFFFF047C :                     ;
(1)  376/FFFFFFFFFFFF047C :                     ; Build VDP Sprite pieces and maps
(1)  377/FFFFFFFFFFFF047C :                     ; --------------------------------------------------------
(1)  378/FFFFFFFFFFFF047C :                     
(1)  379/FFFFFFFFFFFF047C :                     Video_BuildSprites:
(1)  380/FFFFFFFFFFFF047C : 31FC 0001 E862      		move.w	#1,(RAM_SprLinkNum).w		; Reset SPRITE LINK number
(1)  381/FFFFFFFFFFFF0482 : 4DF8 E0D0           		lea	(RAM_Sprites).w,a6		; a6 - Genesis sprites
(1)  382/FFFFFFFFFFFF0486 : 3C38 E862           		move.w	(RAM_SprLinkNum).w,d6		; d6 - Starting sprite link
(1)  383/FFFFFFFFFFFF048A : BC7C 0050           		cmp.w	#80,d6
(1)  384/FFFFFFFFFFFF048E : 6C00 017C           		bge	.stop_all
(1)  385/FFFFFFFFFFFF0492 : 3A06                		move.w	d6,d5
(1)  386/FFFFFFFFFFFF0494 : 5345                		subq.w	#1,d5
(1)  387/FFFFFFFFFFFF0496 : 6B04                		bmi	.first_spr
(1)  388/FFFFFFFFFFFF0498 : E74D                		lsl.w	#3,d5
(1)  389/FFFFFFFFFFFF049A : DCC5                		adda	d5,a6
(1)  390/FFFFFFFFFFFF049C :                     .first_spr:
(1)  391/FFFFFFFFFFFF049C : 4BF8 DA40           		lea	(RAM_SprPzList).w,a5
(1)  392/FFFFFFFFFFFF04A0 : 3E3C 004F           		move.w	#80-1,d7			; Loop all pieces
(1)  393/FFFFFFFFFFFF04A4 :                     .next_pz:
(1)  394/FFFFFFFFFFFF04A4 : 0C46 0050           		cmpi.w	#80,d6
(1)  395/FFFFFFFFFFFF04A8 : 6E00 0162           		bgt	.stop_all
(1)  396/FFFFFFFFFFFF04AC : 0815 0007           		btst	#7,(a5)
(1)  397/FFFFFFFFFFFF04B0 : 6722                		beq	.no_slot_s
(1)  398/FFFFFFFFFFFF04B2 : 3015                		move.w	(a5),d0				; This slot is used?
(1)  399/FFFFFFFFFFFF04B4 : 3200                		move.w	d0,d1
(1)  400/FFFFFFFFFFFF04B6 : 0241 3C00           		andi.w	#$3C00,d1
(1)  401/FFFFFFFFFFFF04BA : E449                		lsr.w	#2,d1
(1)  402/FFFFFFFFFFFF04BC : D246                		add.w	d6,d1
(1)  403/FFFFFFFFFFFF04BE : 342D 0004           		move.w	4(a5),d2
(1)  404/FFFFFFFFFFFF04C2 : 362D 0002           		move.w	2(a5),d3
(1)  405/FFFFFFFFFFFF04C6 : 0240 03FF           		andi.w	#$03FF,d0
(1)  406/FFFFFFFFFFFF04CA : 3CC0                		move.w	d0,(a6)+
(1)  407/FFFFFFFFFFFF04CC : 3CC1                		move.w	d1,(a6)+
(1)  408/FFFFFFFFFFFF04CE : 3CC2                		move.w	d2,(a6)+
(1)  409/FFFFFFFFFFFF04D0 : 3CC3                		move.w	d3,(a6)+
(1)  410/FFFFFFFFFFFF04D2 : 5246                		addq.w	#1,d6
(1)  411/FFFFFFFFFFFF04D4 :                     .no_slot_s:
(1)  412/FFFFFFFFFFFF04D4 : DAFC 0008           		adda	#$08,a5
(1)  413/FFFFFFFFFFFF04D8 : 51CF FFCA           		dbf	d7,.next_pz
(1)  414/FFFFFFFFFFFF04DC : 4BF8 D8C0           		lea	(RAM_SprMapList).w,a5	; Sprite with map data
(1)  415/FFFFFFFFFFFF04E0 : 3E3C 0017           		move.w	#MAX_MDMAPSPR-1,d7
(1)  416/FFFFFFFFFFFF04E4 :                     .next:
(1)  417/FFFFFFFFFFFF04E4 : 0815 0007           		btst	#7,(a5)
(1)  418/FFFFFFFFFFFF04E8 : 6700 0118           		beq	.no_map
(1)  419/FFFFFFFFFFFF04EC : 2055                		move.l	(a5),a0
(1)  420/FFFFFFFFFFFF04EE : 4847                		swap	d7
(1)  421/FFFFFFFFFFFF04F0 : 7000                		moveq	#0,d0
(1)  422/FFFFFFFFFFFF04F2 : 302D 0004           		move.w	$04(a5),d0		; Read frame number
(1)  423/FFFFFFFFFFFF04F6 : D040                		add.w	d0,d0
(1)  424/FFFFFFFFFFFF04F8 : 3030 0000           		move.w	(a0,d0.w),d0
(1)  425/FFFFFFFFFFFF04FC : 41F0 0000           		lea	(a0,d0.w),a0
(1)  426/FFFFFFFFFFFF0500 : 3A18                		move.w	(a0)+,d5
(1)  427/FFFFFFFFFFFF0502 : 6700 00FE           		beq	.no_map
(1)  428/FFFFFFFFFFFF0506 : 5345                		subq.w	#1,d5
(1)  429/FFFFFFFFFFFF0508 :                     .mk_pz:
(1)  430/FFFFFFFFFFFF0508 : 0C46 0050           		cmpi.w	#80,d6
(1)  431/FFFFFFFFFFFF050C : 6E00 00FE           		bgt	.stop_all
(1)  432/FFFFFFFFFFFF0510 : 4845                		swap	d5
(1)  433/FFFFFFFFFFFF0512 : 4846                		swap	d6
(1)  434/FFFFFFFFFFFF0514 : 1018                		move.b	(a0)+,d0		; d0 - Y pos
(1)  435/FFFFFFFFFFFF0516 : 1218                		move.b	(a0)+,d1		; d1 - Size
(1)  436/FFFFFFFFFFFF0518 : 3410                		move.w	(a0),d2			; d2 - VRAM main
(1)  437/FFFFFFFFFFFF051A : 0838 0002 E877      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  438/FFFFFFFFFFFF0520 : 6710                		beq.s	.ex_vram
(1)  439/FFFFFFFFFFFF0522 : 3801                		move.w	d1,d4
(1)  440/FFFFFFFFFFFF0524 : 0241 000C           		andi.w	#%1100,d1
(1)  441/FFFFFFFFFFFF0528 : 0244 0003           		andi.w	#%0011,d4
(1)  442/FFFFFFFFFFFF052C : E24C                		lsr.w	#1,d4
(1)  443/FFFFFFFFFFFF052E : 8244                		or.w	d4,d1
(1)  444/FFFFFFFFFFFF0530 : E24A                		lsr.w	#1,d2
(1)  445/FFFFFFFFFFFF0532 :                     .ex_vram:
(1)  446/FFFFFFFFFFFF0532 : D0FC 0004           		adda	#4,a0			; <-- Reserved for VRAM double-interlace
(1)  447/FFFFFFFFFFFF0536 : 3618                		move.w	(a0)+,d3		; d3 - X pos
(1)  448/FFFFFFFFFFFF0538 : 4880                		ext.w	d0
(1)  449/FFFFFFFFFFFF053A : 3A2D 0006           		move.w	$06(a5),d5		; Read VRAM
(1)  450/FFFFFFFFFFFF053E : 3805                		move.w	d5,d4
(1)  451/FFFFFFFFFFFF0540 : 0838 0002 E877      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  452/FFFFFFFFFFFF0546 : 670E                		beq.s	.ex_vrams
(1)  453/FFFFFFFFFFFF0548 : 3805                		move.w	d5,d4
(1)  454/FFFFFFFFFFFF054A : 0244 F800           		andi.w	#$F800,d4
(1)  455/FFFFFFFFFFFF054E : 0245 07FF           		andi.w	#$07FF,d5
(1)  456/FFFFFFFFFFFF0552 : E24D                		lsr.w	#1,d5
(1)  457/FFFFFFFFFFFF0554 : 8A44                		or.w	d4,d5
(1)  458/FFFFFFFFFFFF0556 :                     .ex_vrams:
(1)  459/FFFFFFFFFFFF0556 : 3805                		move.w	d5,d4
(1)  460/FFFFFFFFFFFF0558 : 0244 1000           		andi.w	#$1000,d4
(1)  461/FFFFFFFFFFFF055C : 6710                		beq.s	.vram_v
(1)  462/FFFFFFFFFFFF055E : 4440                		neg.w	d0
(1)  463/FFFFFFFFFFFF0560 : 0440 0008           		subi.w	#8,d0
(1)  464/FFFFFFFFFFFF0564 : 3C01                		move.w	d1,d6
(1)  465/FFFFFFFFFFFF0566 : 0246 0003           		andi.w	#%0011,d6
(1)  466/FFFFFFFFFFFF056A : E74E                		lsl.w	#3,d6
(1)  467/FFFFFFFFFFFF056C : 9046                		sub.w	d6,d0
(1)  468/FFFFFFFFFFFF056E :                     .vram_v:
(1)  469/FFFFFFFFFFFF056E : 3805                		move.w	d5,d4
(1)  470/FFFFFFFFFFFF0570 : 0244 0800           		andi.w	#$0800,d4
(1)  471/FFFFFFFFFFFF0574 : 6710                		beq.s	.vram_h
(1)  472/FFFFFFFFFFFF0576 : 4443                		neg.w	d3
(1)  473/FFFFFFFFFFFF0578 : 0443 0008           		subi.w	#8,d3
(1)  474/FFFFFFFFFFFF057C : 3C01                		move.w	d1,d6
(1)  475/FFFFFFFFFFFF057E : 0246 000C           		andi.w	#%1100,d6
(1)  476/FFFFFFFFFFFF0582 : DC46                		add.w	d6,d6
(1)  477/FFFFFFFFFFFF0584 : 9646                		sub.w	d6,d3
(1)  478/FFFFFFFFFFFF0586 :                     .vram_h:
(1)  479/FFFFFFFFFFFF0586 : D445                		add.w	d5,d2
(1)  480/FFFFFFFFFFFF0588 : 4845                		swap	d5
(1)  481/FFFFFFFFFFFF058A : 4846                		swap	d6
(1)  482/FFFFFFFFFFFF058C : D06D 000A           		add.w	$0A(a5),d0		; Add Y pos
(1)  483/FFFFFFFFFFFF0590 : D66D 0008           		add.w	$08(a5),d3		; Add X pos
(1)  484/FFFFFFFFFFFF0594 : D078 E6D6           		add.w	(RAM_SprOffsetY).w,d0
(1)  485/FFFFFFFFFFFF0598 : 9678 E6D4           		sub.w	(RAM_SprOffsetX).w,d3
(1)  486/FFFFFFFFFFFF059C : B67C 0140           		cmp.w	#320,d3			; X/Y wrap
(1)  487/FFFFFFFFFFFF05A0 : 6C5C                		bge.s	.no_pz
(1)  488/FFFFFFFFFFFF05A2 : 3801                		move.w	d1,d4
(1)  489/FFFFFFFFFFFF05A4 : 0244 000C           		andi.w	#%1100,d4
(1)  490/FFFFFFFFFFFF05A8 : D844                		add.w	d4,d4
(1)  491/FFFFFFFFFFFF05AA : D87C 0008           		add.w	#8,d4
(1)  492/FFFFFFFFFFFF05AE : 3E03                		move.w	d3,d7
(1)  493/FFFFFFFFFFFF05B0 : DE44                		add.w	d4,d7
(1)  494/FFFFFFFFFFFF05B2 : 6B4A                		bmi.s	.no_pz
(1)  495/FFFFFFFFFFFF05B4 : 383C 00F0           		move.w	#240,d4
(1)  496/FFFFFFFFFFFF05B8 : 0838 0002 E877      		btst	#2,(RAM_VdpRegSetC+1).w
(1)  497/FFFFFFFFFFFF05BE : 6702                		beq.s	.ex_yext
(1)  498/FFFFFFFFFFFF05C0 : D844                		add.w	d4,d4
(1)  499/FFFFFFFFFFFF05C2 :                     .ex_yext:
(1)  500/FFFFFFFFFFFF05C2 : B044                		cmp.w	d4,d0
(1)  501/FFFFFFFFFFFF05C4 : 6C38                		bge.s	.no_pz
(1)  502/FFFFFFFFFFFF05C6 : 3801                		move.w	d1,d4
(1)  503/FFFFFFFFFFFF05C8 : 0244 0003           		andi.w	#%0011,d4
(1)  504/FFFFFFFFFFFF05CC : E74C                		lsl.w	#3,d4
(1)  505/FFFFFFFFFFFF05CE : D87C 0008           		add.w	#8,d4
(1)  506/FFFFFFFFFFFF05D2 : 3E00                		move.w	d0,d7
(1)  507/FFFFFFFFFFFF05D4 : DE44                		add.w	d4,d7
(1)  508/FFFFFFFFFFFF05D6 : 6B26                		bmi.s	.no_pz
(1)  509/FFFFFFFFFFFF05D8 : E149                		lsl.w	#8,d1			; Size + Link
(1)  510/FFFFFFFFFFFF05DA : 8246                		or.w	d6,d1
(1)  511/FFFFFFFFFFFF05DC : 0640 0080           		addi.w	#$80,d0
(1)  512/FFFFFFFFFFFF05E0 : 3838 E876           		move.w	(RAM_VdpRegSetC).w,d4
(1)  513/FFFFFFFFFFFF05E4 : 0804 0002           		btst	#2,d4
(1)  514/FFFFFFFFFFFF05E8 : 6704                		beq.s	.dont_add
(1)  515/FFFFFFFFFFFF05EA : 0640 0080           		addi.w	#$80,d0
(1)  516/FFFFFFFFFFFF05EE :                     .dont_add:
(1)  517/FFFFFFFFFFFF05EE : 0643 0080           		addi.w	#$80,d3
(1)  518/FFFFFFFFFFFF05F2 : 3CC0                		move.w	d0,(a6)+
(1)  519/FFFFFFFFFFFF05F4 : 3CC1                		move.w	d1,(a6)+
(1)  520/FFFFFFFFFFFF05F6 : 3CC2                		move.w	d2,(a6)+
(1)  521/FFFFFFFFFFFF05F8 : 3CC3                		move.w	d3,(a6)+
(1)  522/FFFFFFFFFFFF05FA : DC7C 0001           		add.w	#1,d6
(1)  523/FFFFFFFFFFFF05FE :                     .no_pz:
(1)  524/FFFFFFFFFFFF05FE : 51CD FF08           		dbf	d5,.mk_pz
(1)  525/FFFFFFFFFFFF0602 :                     .no_map:
(1)  526/FFFFFFFFFFFF0602 : DAFC 0010           		adda	#$10,a5
(1)  527/FFFFFFFFFFFF0606 : 4847                		swap	d7
(1)  528/FFFFFFFFFFFF0608 :                     .no_slot:
(1)  529/FFFFFFFFFFFF0608 : 51CF FEDA           		dbf	d7,.next
(1)  530/FFFFFFFFFFFF060C :                     .stop_all:
(1)  531/FFFFFFFFFFFF060C : 614A                		bsr	vid_CheckLastSpr
(1)  532/FFFFFFFFFFFF060E : 31C6 E862           		move.w	d6,(RAM_SprLinkNum).w
(1)  533/FFFFFFFFFFFF0612 :                     
(1)  534/FFFFFFFFFFFF0612 :                     ; --------------------------------------------------------
(1)  535/FFFFFFFFFFFF0612 :                     ; Reset slots
(1)  536/FFFFFFFFFFFF0612 :                     ; --------------------------------------------------------
(1)  537/FFFFFFFFFFFF0612 :                     
(1)  538/FFFFFFFFFFFF0612 : 4DF8 DA40           		lea	(RAM_SprPzList).w,a6
(1)  539/FFFFFFFFFFFF0616 : 7E4F                		moveq	#80-1,d7
(1)  540/FFFFFFFFFFFF0618 : 7C08                		moveq	#$08,d6
(1)  541/FFFFFFFFFFFF061A :                     .chk_spr_r:
(1)  542/FFFFFFFFFFFF061A : 1A16                		move.b	(a6),d5
(1)  543/FFFFFFFFFFFF061C : 0805 0007           		btst	#7,d5
(1)  544/FFFFFFFFFFFF0620 : 670C                		beq.s	.no_slot_r
(1)  545/FFFFFFFFFFFF0622 : 0805 0006           		btst	#6,d5
(1)  546/FFFFFFFFFFFF0626 : 6706                		beq.s	.no_slot_r
(1)  547/FFFFFFFFFFFF0628 : 4296                		clr.l	(a6)
(1)  548/FFFFFFFFFFFF062A : 42AE 0004           		clr.l	4(a6)
(1)  549/FFFFFFFFFFFF062E :                     .no_slot_r:
(1)  550/FFFFFFFFFFFF062E : DCC6                		adda	d6,a6
(1)  551/FFFFFFFFFFFF0630 : 51CF FFE8           		dbf	d7,.chk_spr_r
(1)  552/FFFFFFFFFFFF0634 : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6
(1)  553/FFFFFFFFFFFF0638 : 7E17                		moveq	#MAX_MDMAPSPR-1,d7
(1)  554/FFFFFFFFFFFF063A : 7C10                		moveq	#$10,d6
(1)  555/FFFFFFFFFFFF063C :                     .chk_spr_mr:
(1)  556/FFFFFFFFFFFF063C : 1A16                		move.b	(a6),d5
(1)  557/FFFFFFFFFFFF063E : 0805 0007           		btst	#7,d5
(1)  558/FFFFFFFFFFFF0642 : 670C                		beq.s	.no_slot_mr
(1)  559/FFFFFFFFFFFF0644 : 0805 0006           		btst	#6,d5
(1)  560/FFFFFFFFFFFF0648 : 6706                		beq.s	.no_slot_mr
(1)  561/FFFFFFFFFFFF064A : 4296                		clr.l	(a6)
(1)  562/FFFFFFFFFFFF064C : 42AE 0004           		clr.l	4(a6)
(1)  563/FFFFFFFFFFFF0650 :                     .no_slot_mr:
(1)  564/FFFFFFFFFFFF0650 : DCC6                		adda	d6,a6
(1)  565/FFFFFFFFFFFF0652 : 51CF FFE8           		dbf	d7,.chk_spr_mr
(1)  566/FFFFFFFFFFFF0656 : 4E75                		rts
(1)  567/FFFFFFFFFFFF0658 :                     
(1)  568/FFFFFFFFFFFF0658 :                     ; --------------------------------------------------------
(1)  569/FFFFFFFFFFFF0658 :                     ; d6 - Current link
(1)  570/FFFFFFFFFFFF0658 :                     
(1)  571/FFFFFFFFFFFF0658 :                     vid_CheckLastSpr:
(1)  572/FFFFFFFFFFFF0658 : 4DF8 E0D0           		lea	(RAM_Sprites).w,a6	; Check last sprite piece
(1)  573/FFFFFFFFFFFF065C : 0C46 0001           		cmpi.w	#1,d6
(1)  574/FFFFFFFFFFFF0660 : 6710                		beq.s	.blnk_first
(1)  575/FFFFFFFFFFFF0662 : 0C46 0050           		cmpi.w	#80,d6
(1)  576/FFFFFFFFFFFF0666 : 6E10                		bgt.s	.last_one
(1)  577/FFFFFFFFFFFF0668 : 3E06                		move.w	d6,d7
(1)  578/FFFFFFFFFFFF066A : 0447 0001           		subi.w	#1,d7
(1)  579/FFFFFFFFFFFF066E : E74F                		lsl.w	#3,d7
(1)  580/FFFFFFFFFFFF0670 : DCC7                		adda	d7,a6
(1)  581/FFFFFFFFFFFF0672 :                     .blnk_first:
(1)  582/FFFFFFFFFFFF0672 : 429E                		clr.l	(a6)+
(1)  583/FFFFFFFFFFFF0674 : 429E                		clr.l	(a6)+
(1)  584/FFFFFFFFFFFF0676 : 6010                		bra.s	.spr_exit
(1)  585/FFFFFFFFFFFF0678 :                     .last_one:
(1)  586/FFFFFFFFFFFF0678 : DCFC 0278           		adda	#79*8,a6		; Go to last sprite
(1)  587/FFFFFFFFFFFF067C : 3E2E 0002           		move.w	2(a6),d7		; Set last link to 0
(1)  588/FFFFFFFFFFFF0680 : 0247 0F00           		andi.w	#$0F00,d7
(1)  589/FFFFFFFFFFFF0684 : 3D47 0002           		move.w	d7,2(a6)
(1)  590/FFFFFFFFFFFF0688 :                     .spr_exit:
(1)  591/FFFFFFFFFFFF0688 : 4E75                		rts
(1)  592/FFFFFFFFFFFF068A :                     
(1)  593/FFFFFFFFFFFF068A :                     ; ====================================================================
(1)  594/FFFFFFFFFFFF068A :                     ; --------------------------------------------------------
(1)  595/FFFFFFFFFFFF068A :                     ; Subroutines
(1)  596/FFFFFFFFFFFF068A :                     ; --------------------------------------------------------
(1)  597/FFFFFFFFFFFF068A :                     
(1)  598/FFFFFFFFFFFF068A :                     ; --------------------------------------------------------
(1)  599/FFFFFFFFFFFF068A :                     ; Video_Clear
(1)  600/FFFFFFFFFFFF068A :                     ;
(1)  601/FFFFFFFFFFFF068A :                     ; Clears ALL VDP VRAM and other RAM sections
(1)  602/FFFFFFFFFFFF068A :                     ;
(1)  603/FFFFFFFFFFFF068A :                     ; Breaks:
(1)  604/FFFFFFFFFFFF068A :                     ; ALL
(1)  605/FFFFFFFFFFFF068A :                     ; --------------------------------------------------------
(1)  606/FFFFFFFFFFFF068A :                     
(1)  607/FFFFFFFFFFFF068A :                     Video_Clear:
(1)  609/FFFFFFFFFFFF068A : 4DF8 CE60           		lea	(RAM_MdMars_CommBuff).w,a6		; ****
(1)  610/FFFFFFFFFFFF068E : 3E3C 050F           		move.w	#(Dreq_len/2)-1,d7
(1)  611/FFFFFFFFFFFF0692 : 7C00                		moveq	#0,d6
(1)  612/FFFFFFFFFFFF0694 :                     .pmnext:
(1)  613/FFFFFFFFFFFF0694 : 3CC6                		move.w	d6,(a6)+
(1)  614/FFFFFFFFFFFF0696 : 51CF FFFC           		dbf	d7,.pmnext
(1)  616/FFFFFFFFFFFF069A : 7C00                		moveq	#0,d6
(1)  617/FFFFFFFFFFFF069C : 4DF8 D880           		lea	(RAM_MdVideo).w,a6			; Clear half of Video RAM section
(1)  618/FFFFFFFFFFFF06A0 : 3E3C 0E57           		move.w	#(RAM_MdVidClr_e-RAM_MdVideo)-1,d7
(1)  619/FFFFFFFFFFFF06A4 :                     .clr_me:
(1)  620/FFFFFFFFFFFF06A4 : 1CC6                		move.b	d6,(a6)+
(1)  621/FFFFFFFFFFFF06A6 : 51CF FFFC           		dbf	d7,.clr_me
(1)  622/FFFFFFFFFFFF06AA : 303C 0000           		move.w	#0,d0
(1)  623/FFFFFFFFFFFF06AE : 323C 0000           		move.w	#0,d1
(1)  624/FFFFFFFFFFFF06B2 : 343C FFC0           		move.w	#cell_num($7FE),d2
(1)  625/FFFFFFFFFFFF06B6 : 6100 0344           		bsr	Video_Fill
(1)  626/FFFFFFFFFFFF06BA :                     
(1)  627/FFFFFFFFFFFF06BA :                     ; --------------------------------------------------------
(1)  628/FFFFFFFFFFFF06BA :                     ; Video_ClearScreen
(1)  629/FFFFFFFFFFFF06BA :                     ;
(1)  630/FFFFFFFFFFFF06BA :                     ; Clears ALL 3 map layers entirely
(1)  631/FFFFFFFFFFFF06BA :                     ; --------------------------------------------------------
(1)  632/FFFFFFFFFFFF06BA :                     
(1)  633/FFFFFFFFFFFF06BA :                     Video_ClearScreen:
(1)  634/FFFFFFFFFFFF06BA : 7000                		moveq	#0,d0
(1)  635/FFFFFFFFFFFF06BC : 3238 E864           		move.w	(RAM_VdpVramFG).w,d1
(1)  636/FFFFFFFFFFFF06C0 : 3438 E86E           		move.w	(RAM_VdpMapSize).w,d2	; FG/BG size
(1)  637/FFFFFFFFFFFF06C4 : 6100 0336           		bsr	Video_Fill
(1)  638/FFFFFFFFFFFF06C8 : 3238 E866           		move.w	(RAM_VdpVramBG).w,d1
(1)  639/FFFFFFFFFFFF06CC : 6100 032E           		bsr	Video_Fill
(1)  640/FFFFFFFFFFFF06D0 : 343C 0800           		move.w	#$800,d2		; WD Size
(1)  641/FFFFFFFFFFFF06D4 : 3E38 E876           		move.w	(RAM_VdpRegSetC).w,d7	; Current $8Cxx
(1)  642/FFFFFFFFFFFF06D8 : 0247 0081           		andi.w	#%10000001,d7		; Check if we are in H40
(1)  643/FFFFFFFFFFFF06DC : 6702                		beq.s	.not_small
(1)  644/FFFFFFFFFFFF06DE : D442                		add.w	d2,d2			; Size $1000
(1)  645/FFFFFFFFFFFF06E0 :                     .not_small:
(1)  646/FFFFFFFFFFFF06E0 : 3238 E868           		move.w	(RAM_VdpVramWD).w,d1
(1)  647/FFFFFFFFFFFF06E4 : 6000 0316           		bra	Video_Fill
(1)  648/FFFFFFFFFFFF06E8 :                     
(1)  649/FFFFFFFFFFFF06E8 :                     ; --------------------------------------------------------
(1)  650/FFFFFFFFFFFF06E8 :                     ; Video_DisplayOn, Video_DisplayOff
(1)  651/FFFFFFFFFFFF06E8 :                     ;
(1)  652/FFFFFFFFFFFF06E8 :                     ; Enable or Disable VDP Display
(1)  653/FFFFFFFFFFFF06E8 :                     ; --------------------------------------------------------
(1)  654/FFFFFFFFFFFF06E8 :                     
(1)  655/FFFFFFFFFFFF06E8 :                     Video_DisplayOn:
(1)  656/FFFFFFFFFFFF06E8 : 3F07                		move.w	d7,-(sp)
(1)  657/FFFFFFFFFFFF06EA : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  658/FFFFFFFFFFFF06EE : 08C7 0006           		bset	#bitDispEnbl,d7
(1)  659/FFFFFFFFFFFF06F2 : 6022                		bra.s	vid_WrtReg01
(1)  660/FFFFFFFFFFFF06F4 :                     Video_DisplayOff:
(1)  661/FFFFFFFFFFFF06F4 : 3F07                		move.w	d7,-(sp)
(1)  662/FFFFFFFFFFFF06F6 : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  663/FFFFFFFFFFFF06FA : 0887 0006           		bclr	#bitDispEnbl,d7
(1)  664/FFFFFFFFFFFF06FE : 6016                		bra.s	vid_WrtReg01
(1)  665/FFFFFFFFFFFF0700 :                     
(1)  666/FFFFFFFFFFFF0700 :                     ; --------------------------------------------------------
(1)  667/FFFFFFFFFFFF0700 :                     ; Video_DmaOn, Video_DmaOff
(1)  668/FFFFFFFFFFFF0700 :                     ;
(1)  669/FFFFFFFFFFFF0700 :                     ; Enable or Disable DMA
(1)  670/FFFFFFFFFFFF0700 :                     ;
(1)  671/FFFFFFFFFFFF0700 :                     ; Note:
(1)  672/FFFFFFFFFFFF0700 :                     ; Various routines that use DMA already call these
(1)  673/FFFFFFFFFFFF0700 :                     ; --------------------------------------------------------
(1)  674/FFFFFFFFFFFF0700 :                     
(1)  675/FFFFFFFFFFFF0700 :                     Video_DmaOn:
(1)  676/FFFFFFFFFFFF0700 : 3F07                		move.w	d7,-(sp)
(1)  677/FFFFFFFFFFFF0702 : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  678/FFFFFFFFFFFF0706 : 08C7 0004           		bset	#bitDmaEnbl,d7
(1)  679/FFFFFFFFFFFF070A : 600A                		bra.s	vid_WrtReg01
(1)  680/FFFFFFFFFFFF070C :                     Video_DmaOff:
(1)  681/FFFFFFFFFFFF070C : 3F07                		move.w	d7,-(sp)
(1)  682/FFFFFFFFFFFF070E : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  683/FFFFFFFFFFFF0712 : 0887 0004           		bclr	#bitDmaEnbl,d7
(1)  684/FFFFFFFFFFFF0716 :                     
(1)  685/FFFFFFFFFFFF0716 :                     ; ------------------------------------------------
(1)  686/FFFFFFFFFFFF0716 :                     
(1)  687/FFFFFFFFFFFF0716 :                     vid_WrtReg01:
(1)  688/FFFFFFFFFFFF0716 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  689/FFFFFFFFFFFF071C : 31C7 E872           		move.w	d7,(RAM_VdpRegSet1).w
(1)  690/FFFFFFFFFFFF0720 : 3E1F                		move.w	(sp)+,d7
(1)  691/FFFFFFFFFFFF0722 : 4E75                		rts
(1)  692/FFFFFFFFFFFF0724 :                     
(1)  693/FFFFFFFFFFFF0724 :                     ; --------------------------------------------------------
(1)  694/FFFFFFFFFFFF0724 :                     ; Video_IntEnable
(1)  695/FFFFFFFFFFFF0724 :                     ;
(1)  696/FFFFFFFFFFFF0724 :                     ; Enable or Disable VBlank, HBlank and External
(1)  697/FFFFFFFFFFFF0724 :                     ; interrupts
(1)  698/FFFFFFFFFFFF0724 :                     ;
(1)  699/FFFFFFFFFFFF0724 :                     ; Input:
(1)  700/FFFFFFFFFFFF0724 :                     ; d0.b | Enable these interrupts generated by VDP:
(1)  701/FFFFFFFFFFFF0724 :                     ;      | %00000ehv
(1)  702/FFFFFFFFFFFF0724 :                     ;      | E - External
(1)  703/FFFFFFFFFFFF0724 :                     ;      | H - HBlank
(1)  704/FFFFFFFFFFFF0724 :                     ;      | V - VBlank
(1)  705/FFFFFFFFFFFF0724 :                     ;
(1)  706/FFFFFFFFFFFF0724 :                     ; Notes:
(1)  707/FFFFFFFFFFFF0724 :                     ; Set your interrupt locations with System_SetIntJumps
(1)  708/FFFFFFFFFFFF0724 :                     ; --------------------------------------------------------
(1)  709/FFFFFFFFFFFF0724 :                     
(1)  710/FFFFFFFFFFFF0724 :                     Video_IntEnable:
(1)  711/FFFFFFFFFFFF0724 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  712/FFFFFFFFFFFF0728 : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  713/FFFFFFFFFFFF072C : 3C00                		move.w	d0,d6
(1)  714/FFFFFFFFFFFF072E : 0246 0001           		andi.w	#1,d6			; %--V
(1)  715/FFFFFFFFFFFF0732 : EB4E                		lsl.w	#5,d6
(1)  716/FFFFFFFFFFFF0734 : 8E46                		or.w	d6,d7
(1)  717/FFFFFFFFFFFF0736 : 31C7 E872           		move.w	d7,(RAM_VdpRegSet1).w
(1)  718/FFFFFFFFFFFF073A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  719/FFFFFFFFFFFF0740 : 3E38 E870           		move.w	(RAM_VdpRegSet0).w,d7
(1)  720/FFFFFFFFFFFF0744 : 3C00                		move.w	d0,d6
(1)  721/FFFFFFFFFFFF0746 : 0246 0002           		andi.w	#%10,d6			; %-H-
(1)  722/FFFFFFFFFFFF074A : E74E                		lsl.w	#3,d6
(1)  723/FFFFFFFFFFFF074C : 8E46                		or.w	d6,d7
(1)  724/FFFFFFFFFFFF074E : 31C7 E870           		move.w	d7,(RAM_VdpRegSet0).w
(1)  725/FFFFFFFFFFFF0752 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  726/FFFFFFFFFFFF0758 : 3E38 E874           		move.w	(RAM_VdpRegSetB).w,d7
(1)  727/FFFFFFFFFFFF075C : 3C00                		move.w	d0,d6			; %E--
(1)  728/FFFFFFFFFFFF075E : 0246 0004           		andi.w	#%100,d6
(1)  729/FFFFFFFFFFFF0762 : DC46                		add.w	d6,d6
(1)  730/FFFFFFFFFFFF0764 : 8E46                		or.w	d6,d7
(1)  731/FFFFFFFFFFFF0766 : 31C7 E874           		move.w	d7,(RAM_VdpRegSetB).w
(1)  732/FFFFFFFFFFFF076A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  733/FFFFFFFFFFFF0770 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  734/FFFFFFFFFFFF0774 : 4E75                		rts
(1)  735/FFFFFFFFFFFF0776 :                     
(1)  736/FFFFFFFFFFFF0776 :                     ; --------------------------------------------------------
(1)  737/FFFFFFFFFFFF0776 :                     ; Video_Resolution
(1)  738/FFFFFFFFFFFF0776 :                     ;
(1)  739/FFFFFFFFFFFF0776 :                     ; Set video resolution
(1)  740/FFFFFFFFFFFF0776 :                     ;
(1)  741/FFFFFFFFFFFF0776 :                     ; Input:
(1)  742/FFFFFFFFFFFF0776 :                     ; d0.b | Vertical and Horizontal modes:
(1)  743/FFFFFFFFFFFF0776 :                     ;      | %0000iivh
(1)  744/FFFFFFFFFFFF0776 :                     ;      |
(1)  745/FFFFFFFFFFFF0776 :                     ;      | h:  Horizontal 256/320
(1)  746/FFFFFFFFFFFF0776 :                     ;      | v:  Vertical 224/240 (PAL ONLY, NTSC always 0)
(1)  747/FFFFFFFFFFFF0776 :                     ;      | ii: Interlace mode
(1)  748/FFFFFFFFFFFF0776 :                     ;      | %00 - None
(1)  749/FFFFFFFFFFFF0776 :                     ;      | %01 - Enable
(1)  750/FFFFFFFFFFFF0776 :                     ;      | %10 - INVALID
(1)  751/FFFFFFFFFFFF0776 :                     ;      | %11 - Double (Vertical 448/480)
(1)  752/FFFFFFFFFFFF0776 :                     ; --------------------------------------------------------
(1)  753/FFFFFFFFFFFF0776 :                     
(1)  754/FFFFFFFFFFFF0776 :                     Video_Resolution:
(1)  755/FFFFFFFFFFFF0776 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  756/FFFFFFFFFFFF077A : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  757/FFFFFFFFFFFF077E : 0207 00F7           		andi.b	#%11110111,d7
(1)  758/FFFFFFFFFFFF0782 : 3C00                		move.w	d0,d6
(1)  759/FFFFFFFFFFFF0784 : CC7C 0002           		and.w	#%0010,d6
(1)  760/FFFFFFFFFFFF0788 : E54E                		lsl.w	#2,d6
(1)  761/FFFFFFFFFFFF078A : 8E46                		or.w	d6,d7
(1)  762/FFFFFFFFFFFF078C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  763/FFFFFFFFFFFF0792 : 31C7 E872           		move.w	d7,(RAM_VdpRegSet1).w
(1)  764/FFFFFFFFFFFF0796 : 3E38 E876           		move.w	(RAM_VdpRegSetC).w,d7
(1)  765/FFFFFFFFFFFF079A : 0207 0078           		andi.b	#%01111000,d7
(1)  766/FFFFFFFFFFFF079E : 3C00                		move.w	d0,d6
(1)  767/FFFFFFFFFFFF07A0 : CC7C 0001           		and.w	#%0001,d6
(1)  768/FFFFFFFFFFFF07A4 : 6704                		beq.s	.ex_bit
(1)  769/FFFFFFFFFFFF07A6 : 8C7C 0081           		or.w	#%10000001,d6
(1)  770/FFFFFFFFFFFF07AA :                     .ex_bit:
(1)  771/FFFFFFFFFFFF07AA : 8E46                		or.w	d6,d7
(1)  772/FFFFFFFFFFFF07AC : 3C00                		move.w	d0,d6
(1)  773/FFFFFFFFFFFF07AE : 0246 000C           		andi.w	#%1100,d6
(1)  774/FFFFFFFFFFFF07B2 : E24E                		lsr.w	#1,d6
(1)  775/FFFFFFFFFFFF07B4 : 8E46                		or.w	d6,d7
(1)  776/FFFFFFFFFFFF07B6 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  777/FFFFFFFFFFFF07BC : 31C7 E876           		move.w	d7,(RAM_VdpRegSetC).w
(1)  778/FFFFFFFFFFFF07C0 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  779/FFFFFFFFFFFF07C4 : 4E75                		rts
(1)  780/FFFFFFFFFFFF07C6 :                     
(1)  781/FFFFFFFFFFFF07C6 :                     ; --------------------------------------------------------
(1)  782/FFFFFFFFFFFF07C6 :                     ; Video_UpdMapVram, Video_UpdSprHVram
(1)  783/FFFFFFFFFFFF07C6 :                     ;
(1)  784/FFFFFFFFFFFF07C6 :                     ; Update VRAM locations for FG, BG, Window and
(1)  785/FFFFFFFFFFFF07C6 :                     ; the Horizontal scroll
(1)  786/FFFFFFFFFFFF07C6 :                     ; --------------------------------------------------------
(1)  787/FFFFFFFFFFFF07C6 :                     
(1)  788/FFFFFFFFFFFF07C6 :                     Video_UpdMapVram:
(1)  789/FFFFFFFFFFFF07C6 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  790/FFFFFFFFFFFF07CA : 3E3C 8200           		move.w	#$8200,d7
(1)  791/FFFFFFFFFFFF07CE : 3C38 E864           		move.w	(RAM_VdpVramFG).w,d6
(1)  792/FFFFFFFFFFFF07D2 : E04E                		lsr.w	#8,d6
(1)  793/FFFFFFFFFFFF07D4 : E44E                		lsr.w	#2,d6
(1)  794/FFFFFFFFFFFF07D6 : 0246 0038           		andi.w	#%00111000,d6
(1)  795/FFFFFFFFFFFF07DA : 8E46                		or.w	d6,d7
(1)  796/FFFFFFFFFFFF07DC : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  797/FFFFFFFFFFFF07E2 : 3E3C 8300           		move.w	#$8300,d7
(1)  798/FFFFFFFFFFFF07E6 : 3C38 E868           		move.w	(RAM_VdpVramWD).w,d6
(1)  799/FFFFFFFFFFFF07EA : E04E                		lsr.w	#8,d6
(1)  800/FFFFFFFFFFFF07EC : E44E                		lsr.w	#2,d6
(1)  801/FFFFFFFFFFFF07EE : 0246 003E           		andi.w	#%00111110,d6
(1)  802/FFFFFFFFFFFF07F2 : 8E46                		or.w	d6,d7
(1)  803/FFFFFFFFFFFF07F4 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  804/FFFFFFFFFFFF07FA : 3E3C 8400           		move.w	#$8400,d7
(1)  805/FFFFFFFFFFFF07FE : 3C38 E866           		move.w	(RAM_VdpVramBG).w,d6
(1)  806/FFFFFFFFFFFF0802 : E04E                		lsr.w	#8,d6
(1)  807/FFFFFFFFFFFF0804 : EA4E                		lsr.w	#5,d6
(1)  808/FFFFFFFFFFFF0806 : 0246 0007           		andi.w	#%00000111,d6
(1)  809/FFFFFFFFFFFF080A : 8E46                		or.w	d6,d7
(1)  810/FFFFFFFFFFFF080C : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  811/FFFFFFFFFFFF0812 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  812/FFFFFFFFFFFF0816 : 4E75                		rts
(1)  813/FFFFFFFFFFFF0818 :                     Video_UpdSprHVram:
(1)  814/FFFFFFFFFFFF0818 : 48E7 0300           		movem.l	d6-d7,-(sp)
(1)  815/FFFFFFFFFFFF081C : 3E3C 8500           		move.w	#$8500,d7
(1)  816/FFFFFFFFFFFF0820 : 3C38 E86A           		move.w	(RAM_VdpVramSpr).w,d6
(1)  817/FFFFFFFFFFFF0824 : E04E                		lsr.w	#8,d6
(1)  818/FFFFFFFFFFFF0826 : E24E                		lsr.w	#1,d6
(1)  819/FFFFFFFFFFFF0828 : 0246 007F           		andi.w	#%01111111,d6
(1)  820/FFFFFFFFFFFF082C : 8E46                		or.w	d6,d7
(1)  821/FFFFFFFFFFFF082E : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  822/FFFFFFFFFFFF0834 : 3E3C 8D00           		move.w	#$8D00,d7
(1)  823/FFFFFFFFFFFF0838 : 3C38 E86C           		move.w	(RAM_VdpVramHScrl).w,d6
(1)  824/FFFFFFFFFFFF083C : E04E                		lsr.w	#8,d6
(1)  825/FFFFFFFFFFFF083E : E44E                		lsr.w	#2,d6
(1)  826/FFFFFFFFFFFF0840 : 0246 003F           		andi.w	#%00111111,d6
(1)  827/FFFFFFFFFFFF0844 : 8E46                		or.w	d6,d7
(1)  828/FFFFFFFFFFFF0846 : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  829/FFFFFFFFFFFF084C : 4CDF 00C0           		movem.l	(sp)+,d6-d7
(1)  830/FFFFFFFFFFFF0850 : 4E75                		rts
(1)  831/FFFFFFFFFFFF0852 :                     
(1)  832/FFFFFFFFFFFF0852 :                     ; --------------------------------------------------------
(1)  833/FFFFFFFFFFFF0852 :                     ; Video_SetMapSize
(1)  834/FFFFFFFFFFFF0852 :                     ;
(1)  835/FFFFFFFFFFFF0852 :                     ; Set MAP size to FG and BG
(1)  836/FFFFFFFFFFFF0852 :                     ;
(1)  837/FFFFFFFFFFFF0852 :                     ; Input:
(1)  838/FFFFFFFFFFFF0852 :                     ; d0.b | Map size:
(1)  839/FFFFFFFFFFFF0852 :                     ;      | %0000vvhh
(1)  840/FFFFFFFFFFFF0852 :                     ;      |
(1)  841/FFFFFFFFFFFF0852 :                     ;      | both vv and hh
(1)  842/FFFFFFFFFFFF0852 :                     ;      | 00 - 32
(1)  843/FFFFFFFFFFFF0852 :                     ;      | 01 - 64
(1)  844/FFFFFFFFFFFF0852 :                     ;      | 10 - INVALID
(1)  845/FFFFFFFFFFFF0852 :                     ;      | 11 - 128
(1)  846/FFFFFFFFFFFF0852 :                     ; --------------------------------------------------------
(1)  847/FFFFFFFFFFFF0852 :                     
(1)  848/FFFFFFFFFFFF0852 :                     Video_SetMapSize:
(1)  849/FFFFFFFFFFFF0852 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1)  850/FFFFFFFFFFFF0856 : 3E00                		move.w	d0,d7
(1)  851/FFFFFFFFFFFF0858 : 0247 000F           		andi.w	#%1111,d7
(1)  852/FFFFFFFFFFFF085C : DE47                		add.w	d7,d7
(1)  853/FFFFFFFFFFFF085E : 3E3B 7026           		move.w	.size_tbl(pc,d7.w),d7
(1)  854/FFFFFFFFFFFF0862 : 31C7 E86E           		move.w	d7,(RAM_VdpMapSize).w
(1)  855/FFFFFFFFFFFF0866 : 3E00                		move.w	d0,d7
(1)  856/FFFFFFFFFFFF0868 : 3C07                		move.w	d7,d6
(1)  857/FFFFFFFFFFFF086A : 0247 0003           		andi.w	#%0011,d7
(1)  858/FFFFFFFFFFFF086E : 0246 000C           		andi.w	#%1100,d6
(1)  859/FFFFFFFFFFFF0872 : E54E                		lsl.w	#2,d6
(1)  860/FFFFFFFFFFFF0874 : 8E7C 9000           		or.w	#$9000,d7
(1)  861/FFFFFFFFFFFF0878 : 8E46                		or.w	d6,d7
(1)  862/FFFFFFFFFFFF087A : 33C7 00C0 0004      		move.w	d7,(vdp_ctrl).l
(1)  863/FFFFFFFFFFFF0880 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1)  864/FFFFFFFFFFFF0884 : 4E75                		rts
(1)  865/FFFFFFFFFFFF0886 :                     .size_tbl:
(1)  866/FFFFFFFFFFFF0886 : 0800 1000 1800      		dc.w $0800,$1000,$1800,$2000
         FFFFFFFFFFFF088C : 2000             
(1)  867/FFFFFFFFFFFF088E : 1000 2000 3000      		dc.w $1000,$2000,$3000,$4000
         FFFFFFFFFFFF0894 : 4000             
(1)  868/FFFFFFFFFFFF0896 : 1800 3000 4800      		dc.w $1800,$3000,$4800,$6000
         FFFFFFFFFFFF089C : 6000             
(1)  869/FFFFFFFFFFFF089E : 2000 4000 6000      		dc.w $2000,$4000,$6000,$8000
         FFFFFFFFFFFF08A4 : 8000             
(1)  870/FFFFFFFFFFFF08A6 :                     
(1)  871/FFFFFFFFFFFF08A6 :                     ; --------------------------------------------------------
(1)  872/FFFFFFFFFFFF08A6 :                     ; Video_LoadArt
(1)  873/FFFFFFFFFFFF08A6 :                     ;
(1)  874/FFFFFFFFFFFF08A6 :                     ; Loads VDP graphics using DMA
(1)  875/FFFFFFFFFFFF08A6 :                     ;
(1)  876/FFFFFFFFFFFF08A6 :                     ; Input:
(1)  877/FFFFFFFFFFFF08A6 :                     ; d0.l | Graphics data *NOT a0*
(1)  878/FFFFFFFFFFFF08A6 :                     ; d1.w | VRAM location: cell_num(vram_pos)
(1)  879/FFFFFFFFFFFF08A6 :                     ; d2.w | Size:          cell_num(size)
(1)  880/FFFFFFFFFFFF08A6 :                     ;
(1)  881/FFFFFFFFFFFF08A6 :                     ; Notes:
(1)  882/FFFFFFFFFFFF08A6 :                     ; - For a faster load: call this during VBlank or
(1)  883/FFFFFFFFFFFF08A6 :                     ;   disable VDP Display temporally.
(1)  884/FFFFFFFFFFFF08A6 :                     ;
(1)  885/FFFFFFFFFFFF08A6 :                     ; * 32X Cartridge ONLY:
(1)  886/FFFFFFFFFFFF08A6 :                     ; - This sets RV bit, make sure your code is
(1)  887/FFFFFFFFFFFF08A6 :                     ;   running on RAM (already doing here) and the
(1)  888/FFFFFFFFFFFF08A6 :                     ;   SH2 is not reading from it's ROM area CS1
(1)  889/FFFFFFFFFFFF08A6 :                     ; --------------------------------------------------------
(1)  890/FFFFFFFFFFFF08A6 :                     
(1)  891/FFFFFFFFFFFF08A6 :                     Video_LoadArt:
(1)  892/FFFFFFFFFFFF08A6 : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)
(1)  893/FFFFFFFFFFFF08AA : 2E00                		move.l	d0,d7
(1)  894/FFFFFFFFFFFF08AC : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  895/FFFFFFFFFFFF08B2 : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1)  896/FFFFFFFFFFFF08B8 : 6736                		beq.s	.normal
(1)  897/FFFFFFFFFFFF08BA : 2A00                		move.l	d0,d5
(1)  898/FFFFFFFFFFFF08BC : DA42                		add.w	d2,d5
(1)  899/FFFFFFFFFFFF08BE : 6430                		bcc.s	.normal
(1)  900/FFFFFFFFFFFF08C0 : 2A00                		move.l	d0,d5		; <-- DOUBLE TRANSFER
(1)  901/FFFFFFFFFFFF08C2 : 3C01                		move.w	d1,d6
(1)  902/FFFFFFFFFFFF08C4 : 2E05                		move.l	d5,d7		; Top
(1)  903/FFFFFFFFFFFF08C6 : 0687 0001 0000      		addi.l	#$010000,d7
(1)  904/FFFFFFFFFFFF08CC : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1)  905/FFFFFFFFFFFF08D2 : 9E80                		sub.l	d0,d7
(1)  906/FFFFFFFFFFFF08D4 : 6128                		bsr.s	.mk_set
(1)  907/FFFFFFFFFFFF08D6 : 2A00                		move.l	d0,d5		; Bottom
(1)  908/FFFFFFFFFFFF08D8 : 0685 0001 0000      		addi.l	#$010000,d5
(1)  909/FFFFFFFFFFFF08DE : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1)  910/FFFFFFFFFFFF08E4 : 2C05                		move.l	d5,d6
(1)  911/FFFFFFFFFFFF08E6 : 9C80                		sub.l	d0,d6
(1)  912/FFFFFFFFFFFF08E8 : 3E02                		move.w	d2,d7
(1)  913/FFFFFFFFFFFF08EA : 9E46                		sub.w	d6,d7
(1)  914/FFFFFFFFFFFF08EC : DC41                		add.w	d1,d6
(1)  915/FFFFFFFFFFFF08EE : 6006                		bra.s	.last_set
(1)  916/FFFFFFFFFFFF08F0 :                     .normal:
(1)  917/FFFFFFFFFFFF08F0 : 2A00                		move.l	d0,d5
(1)  918/FFFFFFFFFFFF08F2 : 3C01                		move.w	d1,d6
(1)  919/FFFFFFFFFFFF08F4 : 3E02                		move.w	d2,d7
(1)  920/FFFFFFFFFFFF08F6 :                     .last_set:
(1)  921/FFFFFFFFFFFF08F6 : 6106                		bsr.s	.mk_set
(1)  922/FFFFFFFFFFFF08F8 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6
(1)  923/FFFFFFFFFFFF08FC : 4E75                		rts
(1)  924/FFFFFFFFFFFF08FE :                     
(1)  925/FFFFFFFFFFFF08FE :                     ; d7 - size
(1)  926/FFFFFFFFFFFF08FE :                     ; d6 - vram
(1)  927/FFFFFFFFFFFF08FE :                     ; d5 - data
(1)  928/FFFFFFFFFFFF08FE :                     .mk_set:
(1)  929/FFFFFFFFFFFF08FE : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1)  930/FFFFFFFFFFFF0904 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7
(1)  931/FFFFFFFFFFFF090A : 6778                		beq.s	.bad_size
(1)  932/FFFFFFFFFFFF090C : 4846                		swap	d6
(1)  933/FFFFFFFFFFFF090E : 4845                		swap	d5
(1)  934/FFFFFFFFFFFF0910 : 3C05                		move.w	d5,d6
(1)  935/FFFFFFFFFFFF0912 : 4845                		swap	d5
(1)  937/FFFFFFFFFFFF0914 : 0246 00F0           		andi.w	#$F0,d6
(1)  938/FFFFFFFFFFFF0918 : 0C06 0020           		cmpi.b	#$20,d6
(1)  939/FFFFFFFFFFFF091C : 660A                		bne.s	.non_wram
(1)  940/FFFFFFFFFFFF091E : 48E7 0600           		movem.l	d5-d6,-(sp)		; Copy data and vram to stack
(1)  941/FFFFFFFFFFFF0922 : 0685 0000 0002      		addi.l	#2,d5
(1)  942/FFFFFFFFFFFF0928 :                     .non_wram:
(1)  944/FFFFFFFFFFFF0928 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1)  945/FFFFFFFFFFFF092E : 2F07                		move.l	d7,-(sp)		; <--
(1)  946/FFFFFFFFFFFF0930 : 6100 FDCE           		bsr	Video_DmaOn
(1)  947/FFFFFFFFFFFF0934 : 2E1F                		move.l	(sp)+,d7
(1)  948/FFFFFFFFFFFF0936 : 0246 00FF           		andi.w	#$FF,d6
(1)  949/FFFFFFFFFFFF093A : BC3C 00FF           		cmp.b	#$FF,d6
(1)  950/FFFFFFFFFFFF093E : 6746                		beq.s	.ram_write
(1)  951/FFFFFFFFFFFF0940 : 4846                		swap	d6
(1)  952/FFFFFFFFFFFF0942 : 6156                		bsr.s	.shared_setup
(1)  953/FFFFFFFFFFFF0944 : 6100 15C8           		bsr	System_DmaEnter_ROM
(1)  954/FFFFFFFFFFFF0948 : 3C86                		move.w	d6,(a6)			; First write
(1)  955/FFFFFFFFFFFF094A : 3C87                		move.w	d7,(a6)			; Second write
(1)  956/FFFFFFFFFFFF094C : 6100 15C4           		bsr	System_DmaExit_ROM
(1)  957/FFFFFFFFFFFF0950 : 6100 FDBA           		bsr	Video_DmaOff
(1)  958/FFFFFFFFFFFF0954 :                     	; Word-RAM patch
(1)  960/FFFFFFFFFFFF0954 : 4CDF 0060           		movem.l	(sp)+,d5-d6		; --> Get data as d7
(1)  961/FFFFFFFFFFFF0958 : 0C06 0020           		cmpi.b	#$20,d6			; Word-RAM?
(1)  962/FFFFFFFFFFFF095C : 6626                		bne.s	.non_wram_l
(1)  963/FFFFFFFFFFFF095E : 4846                		swap	d6
(1)  964/FFFFFFFFFFFF0960 : 3E06                		move.w	d6,d7			; Destination
(1)  965/FFFFFFFFFFFF0962 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1)  966/FFFFFFFFFFFF0968 : 0046 4000           		ori.w	#$4000,d6
(1)  967/FFFFFFFFFFFF096C : E04F                		lsr.w	#8,d7
(1)  968/FFFFFFFFFFFF096E : EC4F                		lsr.w	#6,d7
(1)  969/FFFFFFFFFFFF0970 : 0247 0003           		andi.w	#%11,d7
(1)  970/FFFFFFFFFFFF0974 : 3C86                		move.w	d6,(a6)			; VDP destination
(1)  971/FFFFFFFFFFFF0976 : 3C87                		move.w	d7,(a6)			;
(1)  972/FFFFFFFFFFFF0978 : 2E0E                		move.l	a6,d7
(1)  973/FFFFFFFFFFFF097A : 2C45                		move.l	d5,a6
(1)  974/FFFFFFFFFFFF097C : 3C16                		move.w	(a6),d6
(1)  975/FFFFFFFFFFFF097E : 2C47                		move.l	d7,a6
(1)  976/FFFFFFFFFFFF0980 : 3D46 FFFC           		move.w	d6,-4(a6)		; DATA port -4
(1)  977/FFFFFFFFFFFF0984 :                     .non_wram_l:
(1)  979/FFFFFFFFFFFF0984 :                     .bad_size:
(1)  980/FFFFFFFFFFFF0984 : 4E75                		rts
(1)  981/FFFFFFFFFFFF0986 :                     
(1)  982/FFFFFFFFFFFF0986 :                     ; --------------------------------------------------------
(1)  983/FFFFFFFFFFFF0986 :                     
(1)  984/FFFFFFFFFFFF0986 :                     .ram_write:
(1)  985/FFFFFFFFFFFF0986 : 4846                		swap	d6
(1)  986/FFFFFFFFFFFF0988 : 6110                		bsr.s	.shared_setup
(1)  987/FFFFFFFFFFFF098A : 6100 15BC           		bsr	System_DmaEnter_RAM
(1)  988/FFFFFFFFFFFF098E : 3C86                		move.w	d6,(a6)			; First write
(1)  989/FFFFFFFFFFFF0990 : 3C87                		move.w	d7,(a6)			; Second write
(1)  990/FFFFFFFFFFFF0992 : 6100 15B8           		bsr	System_DmaExit_RAM
(1)  991/FFFFFFFFFFFF0996 : 6000 FD74           		bra	Video_DmaOff
(1)  992/FFFFFFFFFFFF099A :                     
(1)  993/FFFFFFFFFFFF099A :                     ; --------------------------------------------------------
(1)  994/FFFFFFFFFFFF099A :                     
(1)  995/FFFFFFFFFFFF099A :                     .shared_setup:
(1)  996/FFFFFFFFFFFF099A : EF8F                		lsl.l	#7,d7
(1)  997/FFFFFFFFFFFF099C : E04F                		lsr.w	#8,d7
(1)  998/FFFFFFFFFFFF099E : 0087 9400 9300      		ori.l	#$94009300,d7
(1)  999/FFFFFFFFFFFF09A4 : 2C87                		move.l	d7,(a6)
(1) 1000/FFFFFFFFFFFF09A6 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1001/FFFFFFFFFFFF09A8 : 2E3C 9600 9500       		move.l	#$96009500,d7
(1) 1002/FFFFFFFFFFFF09AE : 1E05                 		move.b	d5,d7
(1) 1003/FFFFFFFFFFFF09B0 : E08D                 		lsr.l	#8,d5
(1) 1004/FFFFFFFFFFFF09B2 : 4847                 		swap	d7
(1) 1005/FFFFFFFFFFFF09B4 : 1E05                 		move.b	d5,d7
(1) 1006/FFFFFFFFFFFF09B6 : 2C87                 		move.l	d7,(a6)
(1) 1007/FFFFFFFFFFFF09B8 : 3E3C 9700            		move.w	#$9700,d7
(1) 1008/FFFFFFFFFFFF09BC : E08D                 		lsr.l	#8,d5
(1) 1009/FFFFFFFFFFFF09BE : 1E05                 		move.b	d5,d7
(1) 1010/FFFFFFFFFFFF09C0 : 3C87                 		move.w	d7,(a6)
(1) 1011/FFFFFFFFFFFF09C2 : 3E06                		move.w	d6,d7			; Destination
(1) 1012/FFFFFFFFFFFF09C4 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1013/FFFFFFFFFFFF09CA : 0046 4000           		ori.w	#$4000,d6
(1) 1014/FFFFFFFFFFFF09CE : E04F                		lsr.w	#8,d7
(1) 1015/FFFFFFFFFFFF09D0 : EC4F                		lsr.w	#6,d7
(1) 1016/FFFFFFFFFFFF09D2 : 0247 0003           		andi.w	#%11,d7
(1) 1017/FFFFFFFFFFFF09D6 : 0047 0080           		ori.w	#$80,d7
(1) 1018/FFFFFFFFFFFF09DA : 4E75                		rts
(1) 1019/FFFFFFFFFFFF09DC :                     
(1) 1020/FFFFFFFFFFFF09DC :                     ; --------------------------------------------------------
(1) 1021/FFFFFFFFFFFF09DC :                     ; Video_LoadArt_List
(1) 1022/FFFFFFFFFFFF09DC :                     ;
(1) 1023/FFFFFFFFFFFF09DC :                     ; Loads VDP graphics on bulk
(1) 1024/FFFFFFFFFFFF09DC :                     ;
(1) 1025/FFFFFFFFFFFF09DC :                     ; Input:
(1) 1026/FFFFFFFFFFFF09DC :                     ; a0 | List of graphics to load:
(1) 1027/FFFFFFFFFFFF09DC :                     ;        dc.w numof_entries
(1) 1028/FFFFFFFFFFFF09DC :                     ;        dc.l ART_DATA
(1) 1029/FFFFFFFFFFFF09DC :                     ;        dc.w cell_num(vram_pos)
(1) 1030/FFFFFFFFFFFF09DC :                     ;        dc.w ART_DATA_end-ART_DATA OR cell_num(size)
(1) 1031/FFFFFFFFFFFF09DC :                     ;        ; ...more entries
(1) 1032/FFFFFFFFFFFF09DC :                     ;
(1) 1033/FFFFFFFFFFFF09DC :                     ; Note:
(1) 1034/FFFFFFFFFFFF09DC :                     ; CPU heavy.
(1) 1035/FFFFFFFFFFFF09DC :                     ; --------------------------------------------------------
(1) 1036/FFFFFFFFFFFF09DC :                     
(1) 1037/FFFFFFFFFFFF09DC :                     Video_LoadArt_List:
(1) 1038/FFFFFFFFFFFF09DC : 48E7 E100           		movem.l	d0-d2/d7,-(sp)
(1) 1039/FFFFFFFFFFFF09E0 : 3E18                		move.w	(a0)+,d7
(1) 1040/FFFFFFFFFFFF09E2 : 6712                		beq.s	.invalid
(1) 1041/FFFFFFFFFFFF09E4 : 6B10                		bmi.s	.invalid
(1) 1042/FFFFFFFFFFFF09E6 : 5347                		subq.w	#1,d7
(1) 1043/FFFFFFFFFFFF09E8 :                     .next_one:
(1) 1044/FFFFFFFFFFFF09E8 : 2018                		move.l	(a0)+,d0
(1) 1045/FFFFFFFFFFFF09EA : 3218                		move.w	(a0)+,d1
(1) 1046/FFFFFFFFFFFF09EC : 3418                		move.w	(a0)+,d2
(1) 1047/FFFFFFFFFFFF09EE : 6100 FEB6           		bsr	Video_LoadArt
(1) 1048/FFFFFFFFFFFF09F2 : 51CF FFF4           		dbf	d7,.next_one
(1) 1049/FFFFFFFFFFFF09F6 :                     .invalid:
(1) 1050/FFFFFFFFFFFF09F6 : 4CDF 0087           		movem.l	(sp)+,d0-d2/d7
(1) 1051/FFFFFFFFFFFF09FA : 4E75                		rts
(1) 1052/FFFFFFFFFFFF09FC :                     
(1) 1053/FFFFFFFFFFFF09FC :                     ; --------------------------------------------------------
(1) 1054/FFFFFFFFFFFF09FC :                     ; Video_Fill
(1) 1055/FFFFFFFFFFFF09FC :                     ;
(1) 1056/FFFFFFFFFFFF09FC :                     ; Fill data to VRAM
(1) 1057/FFFFFFFFFFFF09FC :                     ;
(1) 1058/FFFFFFFFFFFF09FC :                     ; Input:
(1) 1059/FFFFFFFFFFFF09FC :                     ; d0.b | BYTE to fill
(1) 1060/FFFFFFFFFFFF09FC :                     ; d1.w | VRAM destination: cell_num(dest)
(1) 1061/FFFFFFFFFFFF09FC :                     ; d2.w | Size:             cell_num(size)
(1) 1062/FFFFFFFFFFFF09FC :                     ;
(1) 1063/FFFFFFFFFFFF09FC :                     ; Notes:
(1) 1064/FFFFFFFFFFFF09FC :                     ; - FILL writes in this order: $56781234, Size $0001 is
(1) 1065/FFFFFFFFFFFF09FC :                     ;   invalid.
(1) 1066/FFFFFFFFFFFF09FC :                     ; --------------------------------------------------------
(1) 1067/FFFFFFFFFFFF09FC :                     
(1) 1068/FFFFFFFFFFFF09FC :                     ; Video_Fill_Incr:
(1) 1069/FFFFFFFFFFFF09FC :                     ; 		movem.l	d6-d7/a6,-(sp)
(1) 1070/FFFFFFFFFFFF09FC :                     ; 		move.w	d3,d6
(1) 1071/FFFFFFFFFFFF09FC :                     ; 		bra.s	vid_FillGo
(1) 1072/FFFFFFFFFFFF09FC :                     Video_Fill:
(1) 1073/FFFFFFFFFFFF09FC : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1074/FFFFFFFFFFFF0A00 : 3C3C 0001           		move.w	#1,d6
(1) 1075/FFFFFFFFFFFF0A04 :                     vid_FillGo:
(1) 1076/FFFFFFFFFFFF0A04 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1077/FFFFFFFFFFFF0A0A : 3E16                .dmaw:		move.w	(a6),d7
(1) 1078/FFFFFFFFFFFF0A0C : 0807 0001           		btst	#bitDma,d7
(1) 1079/FFFFFFFFFFFF0A10 : 66F8                		bne.s	.dmaw
(1) 1080/FFFFFFFFFFFF0A12 : 6100 FCEC           		bsr	Video_DmaOn
(1) 1081/FFFFFFFFFFFF0A16 : 0246 00FF           		andi.w	#$FF,d6
(1) 1082/FFFFFFFFFFFF0A1A : 8C7C 8F00           		or.w	#$8F00,d6
(1) 1083/FFFFFFFFFFFF0A1E : 3C86                		move.w	d6,(a6)		; Set increment to $01
(1) 1084/FFFFFFFFFFFF0A20 : 3E02                		move.w	d2,d7		; d2 - Size
(1) 1085/FFFFFFFFFFFF0A22 : 0447 0001           		subi.w	#1,d7
(1) 1086/FFFFFFFFFFFF0A26 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1087/FFFFFFFFFFFF0A2C : 1C07                		move.b	d7,d6
(1) 1088/FFFFFFFFFFFF0A2E : 4846                		swap	d6
(1) 1089/FFFFFFFFFFFF0A30 : E04F                		lsr.w	#8,d7
(1) 1090/FFFFFFFFFFFF0A32 : 1C07                		move.b	d7,d6
(1) 1091/FFFFFFFFFFFF0A34 : 4846                		swap	d6
(1) 1092/FFFFFFFFFFFF0A36 : 2C86                		move.l	d6,(a6)
(1) 1093/FFFFFFFFFFFF0A38 : 3CBC 9780           		move.w	#$9780,(a6)	; DMA Fill mode
(1) 1094/FFFFFFFFFFFF0A3C : 3E01                		move.w	d1,d7		; d1 - Destination
(1) 1095/FFFFFFFFFFFF0A3E : 3C01                		move.w	d1,d6
(1) 1096/FFFFFFFFFFFF0A40 : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1097/FFFFFFFFFFFF0A44 : 0046 4000           		ori.w	#$4000,d6
(1) 1098/FFFFFFFFFFFF0A48 : 4846                		swap	d6
(1) 1099/FFFFFFFFFFFF0A4A : 3C07                		move.w	d7,d6
(1) 1100/FFFFFFFFFFFF0A4C : E04E                		lsr.w	#8,d6
(1) 1101/FFFFFFFFFFFF0A4E : EC4E                		lsr.w	#6,d6
(1) 1102/FFFFFFFFFFFF0A50 : 0246 0003           		andi.w	#%11,d6
(1) 1103/FFFFFFFFFFFF0A54 : 0046 0080           		ori.w	#$80,d6
(1) 1104/FFFFFFFFFFFF0A58 : 2C86                		move.l	d6,(a6)
(1) 1105/FFFFFFFFFFFF0A5A : 3D40 FFFC           		move.w	d0,-4(a6)
(1) 1106/FFFFFFFFFFFF0A5E : 3E16                .dma_w:		move.w	(a6),d7
(1) 1107/FFFFFFFFFFFF0A60 : 0807 0001           		btst	#bitDma,d7
(1) 1108/FFFFFFFFFFFF0A64 : 66F8                		bne.s	.dma_w
(1) 1109/FFFFFFFFFFFF0A66 : 3CBC 8F02           		move.w	#$8F02,(a6)
(1) 1110/FFFFFFFFFFFF0A6A : 6100 FCA0           		bsr	Video_DmaOff
(1) 1111/FFFFFFFFFFFF0A6E : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1112/FFFFFFFFFFFF0A72 : 4E75                		rts
(1) 1113/FFFFFFFFFFFF0A74 :                     
(1) 1114/FFFFFFFFFFFF0A74 :                     ; --------------------------------------------------------
(1) 1115/FFFFFFFFFFFF0A74 :                     ; Video_Copy
(1) 1116/FFFFFFFFFFFF0A74 :                     ;
(1) 1117/FFFFFFFFFFFF0A74 :                     ; Copy VRAM data to another location inside VRAM
(1) 1118/FFFFFFFFFFFF0A74 :                     ;
(1) 1119/FFFFFFFFFFFF0A74 :                     ; Input:
(1) 1120/FFFFFFFFFFFF0A74 :                     ; d0.w | VRAM Source: cell_num(src)
(1) 1121/FFFFFFFFFFFF0A74 :                     ; d1.w | VRAM Destination: cell_num(dest)
(1) 1122/FFFFFFFFFFFF0A74 :                     ; d2.w | Size
(1) 1123/FFFFFFFFFFFF0A74 :                     ; --------------------------------------------------------
(1) 1124/FFFFFFFFFFFF0A74 :                     
(1) 1125/FFFFFFFFFFFF0A74 :                     Video_Copy:
(1) 1126/FFFFFFFFFFFF0A74 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1127/FFFFFFFFFFFF0A78 : 4DF9 00C0 0004      		lea	(vdp_ctrl).l,a6
(1) 1128/FFFFFFFFFFFF0A7E : 3E16                .dmaw:		move.w	(a6),d7
(1) 1129/FFFFFFFFFFFF0A80 : 0807 0001           		btst	#bitDma,d7
(1) 1130/FFFFFFFFFFFF0A84 : 66F8                		bne.s	.dmaw
(1) 1131/FFFFFFFFFFFF0A86 : 6100 FC78           		bsr	Video_DmaOn
(1) 1132/FFFFFFFFFFFF0A8A : 3CBC 8F01           		move.w	#$8F01,(a6)		; Increment $01
(1) 1133/FFFFFFFFFFFF0A8E : 3E02                		move.w	d2,d7			; SIZE
(1) 1134/FFFFFFFFFFFF0A90 : 2C3C 9400 9300      		move.l	#$94009300,d6
(1) 1135/FFFFFFFFFFFF0A96 : 1C07                		move.b	d7,d6
(1) 1136/FFFFFFFFFFFF0A98 : 4846                		swap	d6
(1) 1137/FFFFFFFFFFFF0A9A : E04F                		lsr.w	#8,d7
(1) 1138/FFFFFFFFFFFF0A9C : 1C07                		move.b	d7,d6
(1) 1139/FFFFFFFFFFFF0A9E : 4846                		swap	d6
(1) 1140/FFFFFFFFFFFF0AA0 : 2C86                		move.l	d6,(a6)
(1) 1141/FFFFFFFFFFFF0AA2 : 2C3C 9600 9500      		move.l	#$96009500,d6		; SOURCE
(1) 1142/FFFFFFFFFFFF0AA8 : 3E00                		move.w	d0,d7
(1) 1143/FFFFFFFFFFFF0AAA : 1C07                		move.b	d7,d6
(1) 1144/FFFFFFFFFFFF0AAC : 4846                		swap	d6
(1) 1145/FFFFFFFFFFFF0AAE : E04F                		lsr.w	#8,d7
(1) 1146/FFFFFFFFFFFF0AB0 : 1C07                		move.b	d7,d6
(1) 1147/FFFFFFFFFFFF0AB2 : 2C86                		move.l	d6,(a6)
(1) 1148/FFFFFFFFFFFF0AB4 : 3CBC 97C0           		move.w	#$97C0,(a6)		; DMA Copy mode
(1) 1149/FFFFFFFFFFFF0AB8 : 2E01                		move.l	d1,d7			; DESTINATION
(1) 1150/FFFFFFFFFFFF0ABA : 3C07                		move.w	d7,d6
(1) 1151/FFFFFFFFFFFF0ABC : 0246 3FFF           		andi.w	#$3FFF,d6
(1) 1152/FFFFFFFFFFFF0AC0 : 0046 4000           		ori.w	#$4000,d6
(1) 1153/FFFFFFFFFFFF0AC4 : 4846                		swap	d6
(1) 1154/FFFFFFFFFFFF0AC6 : 3C07                		move.w	d7,d6
(1) 1155/FFFFFFFFFFFF0AC8 : E04E                		lsr.w	#8,d6
(1) 1156/FFFFFFFFFFFF0ACA : EC4E                		lsr.w	#6,d6
(1) 1157/FFFFFFFFFFFF0ACC : 0246 0003           		andi.w	#%11,d6
(1) 1158/FFFFFFFFFFFF0AD0 : 0046 00C0           		ori.w	#$C0,d6
(1) 1159/FFFFFFFFFFFF0AD4 : 2C86                		move.l	d6,(a6)
(1) 1160/FFFFFFFFFFFF0AD6 : 3D41 FFFC           		move.w	d1,-4(a6)
(1) 1161/FFFFFFFFFFFF0ADA : 3E16                .dma_w:		move.w	(a6),d7
(1) 1162/FFFFFFFFFFFF0ADC : 0807 0001           		btst	#bitDma,d7
(1) 1163/FFFFFFFFFFFF0AE0 : 66F8                		bne.s	.dma_w
(1) 1164/FFFFFFFFFFFF0AE2 : 3CBC 8F02           		move.w	#$8F02,(a6)		; Increment $02
(1) 1165/FFFFFFFFFFFF0AE6 : 6100 FC24           		bsr	Video_DmaOff
(1) 1166/FFFFFFFFFFFF0AEA : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1167/FFFFFFFFFFFF0AEE : 4E75                		rts
(1) 1168/FFFFFFFFFFFF0AF0 :                     
(1) 1169/FFFFFFFFFFFF0AF0 :                     ; --------------------------------------------------------
(1) 1170/FFFFFFFFFFFF0AF0 :                     ; Video_MakeDmaEntry
(1) 1171/FFFFFFFFFFFF0AF0 :                     ;
(1) 1172/FFFFFFFFFFFF0AF0 :                     ; Makes a new entry to the DMA BLAST list
(1) 1173/FFFFFFFFFFFF0AF0 :                     ; to be processed on the next VBlank
(1) 1174/FFFFFFFFFFFF0AF0 :                     ;
(1) 1175/FFFFFFFFFFFF0AF0 :                     ; Input:
(1) 1176/FFFFFFFFFFFF0AF0 :                     ; d0.l | Graphics data location
(1) 1177/FFFFFFFFFFFF0AF0 :                     ; d1.w | VRAM location: cell_num(vram_pos)
(1) 1178/FFFFFFFFFFFF0AF0 :                     ; d2.w | Size
(1) 1179/FFFFFFFFFFFF0AF0 :                     ;
(1) 1180/FFFFFFFFFFFF0AF0 :                     ; Notes:
(1) 1181/FFFFFFFFFFFF0AF0 :                     ; - Call this during DISPLAY only
(1) 1182/FFFFFFFFFFFF0AF0 :                     ; - For loading graphics quickly use Video_LoadArt
(1) 1183/FFFFFFFFFFFF0AF0 :                     ;
(1) 1184/FFFFFFFFFFFF0AF0 :                     ; * SCD/CD32X ONLY:
(1) 1185/FFFFFFFFFFFF0AF0 :                     ; - The 4-pixel patch is ALWAYS applied even
(1) 1186/FFFFFFFFFFFF0AF0 :                     ;   if not reading from WORD-RAM
(1) 1187/FFFFFFFFFFFF0AF0 :                     ; --------------------------------------------------------
(1) 1188/FFFFFFFFFFFF0AF0 :                     
(1) 1189/FFFFFFFFFFFF0AF0 :                     Video_MakeDmaEntry:
(1) 1190/FFFFFFFFFFFF0AF0 : 48E7 0702           		movem.l	d5-d7/a6,-(sp)
(1) 1191/FFFFFFFFFFFF0AF4 : 2E00                		move.l	d0,d7
(1) 1192/FFFFFFFFFFFF0AF6 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1193/FFFFFFFFFFFF0AFC : BEBC 00FF 0000      		cmp.l	#$FF0000,d7
(1) 1194/FFFFFFFFFFFF0B02 : 6736                		beq.s	.normal
(1) 1195/FFFFFFFFFFFF0B04 : 2A00                		move.l	d0,d5
(1) 1196/FFFFFFFFFFFF0B06 : DA42                		add.w	d2,d5
(1) 1197/FFFFFFFFFFFF0B08 : 6430                		bcc.s	.normal
(1) 1198/FFFFFFFFFFFF0B0A : 2A00                		move.l	d0,d5		; d5 - TOP point
(1) 1199/FFFFFFFFFFFF0B0C : 3C01                		move.w	d1,d6		; d6 - VRAM position
(1) 1200/FFFFFFFFFFFF0B0E : 2E05                		move.l	d5,d7
(1) 1201/FFFFFFFFFFFF0B10 : 0287 00FF 0000      		andi.l	#$FF0000,d7
(1) 1202/FFFFFFFFFFFF0B16 : 0687 0001 0000      		addi.l	#$010000,d7
(1) 1203/FFFFFFFFFFFF0B1C : 9E80                		sub.l	d0,d7		; d7 - TOP Size
(1) 1204/FFFFFFFFFFFF0B1E : 6128                		bsr.s	.mk_set
(1) 1205/FFFFFFFFFFFF0B20 : 2A00                		move.l	d0,d5		; d5 - BOTTOM point
(1) 1206/FFFFFFFFFFFF0B22 : 0685 0001 0000      		addi.l	#$010000,d5
(1) 1207/FFFFFFFFFFFF0B28 : 0285 00FF 0000      		andi.l	#$FF0000,d5
(1) 1208/FFFFFFFFFFFF0B2E : 2C05                		move.l	d5,d6
(1) 1209/FFFFFFFFFFFF0B30 : 9C80                		sub.l	d0,d6
(1) 1210/FFFFFFFFFFFF0B32 : 3E02                		move.w	d2,d7
(1) 1211/FFFFFFFFFFFF0B34 : 9E46                		sub.w	d6,d7
(1) 1212/FFFFFFFFFFFF0B36 : DC41                		add.w	d1,d6
(1) 1213/FFFFFFFFFFFF0B38 : 6006                		bra.s	.last_set
(1) 1214/FFFFFFFFFFFF0B3A :                     .normal:
(1) 1215/FFFFFFFFFFFF0B3A : 2A00                		move.l	d0,d5
(1) 1216/FFFFFFFFFFFF0B3C : 3C01                		move.w	d1,d6
(1) 1217/FFFFFFFFFFFF0B3E : 3E02                		move.w	d2,d7
(1) 1218/FFFFFFFFFFFF0B40 :                     .last_set:
(1) 1219/FFFFFFFFFFFF0B40 : 6106                		bsr.s	.mk_set
(1) 1220/FFFFFFFFFFFF0B42 : 4CDF 40E0           		movem.l	(sp)+,d5-d7/a6
(1) 1221/FFFFFFFFFFFF0B46 : 4E75                		rts
(1) 1222/FFFFFFFFFFFF0B48 :                     
(1) 1223/FFFFFFFFFFFF0B48 :                     ; d7 - size
(1) 1224/FFFFFFFFFFFF0B48 :                     ; d6 - vram
(1) 1225/FFFFFFFFFFFF0B48 :                     ; d5 - data
(1) 1226/FFFFFFFFFFFF0B48 :                     .mk_set:
(1) 1227/FFFFFFFFFFFF0B48 : 0285 00FF FFFF        		andi.l	#$FFFFFF,d5
(1) 1228/FFFFFFFFFFFF0B4E : 4847                		swap	d7
(1) 1229/FFFFFFFFFFFF0B50 : 3E38 E6D0           		move.w	(RAM_VdpDmaIndx).w,d7
(1) 1230/FFFFFFFFFFFF0B54 : 0C47 0018           		cmpi.w	#MAX_MDDMATSK,d7
(1) 1231/FFFFFFFFFFFF0B58 : 6C7A                		bge	.ran_out
(1) 1232/FFFFFFFFFFFF0B5A : E94F                		lsl.w	#4,d7			; Size $10
(1) 1233/FFFFFFFFFFFF0B5C : 4DF8 E6DC           		lea	(RAM_VdpDmaList).w,a6
(1) 1234/FFFFFFFFFFFF0B60 : DCC7                		adda	d7,a6
(1) 1235/FFFFFFFFFFFF0B62 : 4847                		swap	d7
(1) 1236/FFFFFFFFFFFF0B64 : 0287 0000 FFFE      		andi.l	#$0000FFFE,d7		; d7 - Size
(1) 1237/FFFFFFFFFFFF0B6A : 6768                		beq.s	.ran_out		; If == 0, bad
(1) 1238/FFFFFFFFFFFF0B6C : 4A47                		tst.w	d7
(1) 1239/FFFFFFFFFFFF0B6E : 6B64                		bmi.s	.ran_out		; If negative, bad
(1) 1240/FFFFFFFFFFFF0B70 : 31FC 0001 E6D2      		move.w	#1,(RAM_VdpDmaMod).w
(1) 1241/FFFFFFFFFFFF0B76 : 5278 E6D0           		addq.w	#1,(RAM_VdpDmaIndx).w
(1) 1242/FFFFFFFFFFFF0B7A : E24F                		lsr.w	#1,d7
(1) 1243/FFFFFFFFFFFF0B7C : 0F8E 0001           		movep.w	d7,1(a6)
(1) 1245/FFFFFFFFFFFF0B80 : 2F05                  		move.l	d5,-(sp)		; Save TOP point
(1) 1246/FFFFFFFFFFFF0B82 : 2E05                  		move.l	d5,d7
(1) 1247/FFFFFFFFFFFF0B84 : 0287 00F0 0000        		andi.l	#$F00000,d7
(1) 1248/FFFFFFFFFFFF0B8A : 0C87 0020 0000        		cmpi.l	#$200000,d7
(1) 1249/FFFFFFFFFFFF0B90 : 6602                  		bne.s	.not_wram
(1) 1250/FFFFFFFFFFFF0B92 : 5485                  		addq.l	#2,d5			; WORD-RAM patch
(1) 1251/FFFFFFFFFFFF0B94 :                     .not_wram:
(1) 1253/FFFFFFFFFFFF0B94 : E28D                  		lsr.l	#1,d5			; d5 - Source
(1) 1254/FFFFFFFFFFFF0B96 : 2E05                  		move.l	d5,d7
(1) 1255/FFFFFFFFFFFF0B98 : 4847                  		swap	d7
(1) 1256/FFFFFFFFFFFF0B9A : 0B8E 0005            		movep.w	d5,5(a6)
(1) 1257/FFFFFFFFFFFF0B9E : 1D47 0009            		move.b	d7,9(a6)
(1) 1258/FFFFFFFFFFFF0BA2 : 3E06                		move.w	d6,d7			; Destination
(1) 1259/FFFFFFFFFFFF0BA4 : 0286 0000 3FFF      		andi.l	#$3FFF,d6
(1) 1260/FFFFFFFFFFFF0BAA : 0046 4000           		ori.w	#$4000,d6
(1) 1261/FFFFFFFFFFFF0BAE : E04F                		lsr.w	#8,d7
(1) 1262/FFFFFFFFFFFF0BB0 : EC4F                		lsr.w	#6,d7
(1) 1263/FFFFFFFFFFFF0BB2 : 0247 0003           		andi.w	#%11,d7
(1) 1264/FFFFFFFFFFFF0BB6 : 0047 0080           		ori.w	#$80,d7
(1) 1265/FFFFFFFFFFFF0BBA : 3D46 000A           		move.w	d6,$A(a6)
(1) 1266/FFFFFFFFFFFF0BBE : 3D47 000C           		move.w	d7,$C(a6)
(1) 1268/FFFFFFFFFFFF0BC2 : 2E0E                		move.l	a6,d7			; Save a6
(1) 1269/FFFFFFFFFFFF0BC4 : 2C5F                		move.l	(sp)+,a6		; Restore TOP point
(1) 1270/FFFFFFFFFFFF0BC6 : 3C16                		move.w	(a6),d6			; Read the first 4 pixels to d6
(1) 1271/FFFFFFFFFFFF0BC8 : 2C47                		move.l	d7,a6			; Restore a6
(1) 1272/FFFFFFFFFFFF0BCA : 3D46 000E           		move.w	d6,$E(a6)		; Write pixels copy
(1) 1274/FFFFFFFFFFFF0BCE : 31FC 0000 E6D2      		move.w	#0,(RAM_VdpDmaMod).w
(1) 1275/FFFFFFFFFFFF0BD4 :                     .ran_out:
(1) 1276/FFFFFFFFFFFF0BD4 : 4E75                		rts
(1) 1277/FFFFFFFFFFFF0BD6 :                     
(1) 1278/FFFFFFFFFFFF0BD6 :                     ; ====================================================================
(1) 1279/FFFFFFFFFFFF0BD6 :                     ; --------------------------------------------------------
(1) 1280/FFFFFFFFFFFF0BD6 :                     ; Video_LoadMap, Video_LoadMapV
(1) 1281/FFFFFFFFFFFF0BD6 :                     ;
(1) 1282/FFFFFFFFFFFF0BD6 :                     ; Write map data to VDP
(1) 1283/FFFFFFFFFFFF0BD6 :                     ;
(1) 1284/FFFFFFFFFFFF0BD6 :                     ; _LoadMap:  Left to Right / Top to Bottom
(1) 1285/FFFFFFFFFFFF0BD6 :                     ; _LoadMapV: Top to Bottom / Left to Right, double-res safe
(1) 1286/FFFFFFFFFFFF0BD6 :                     ;
(1) 1287/FFFFFFFFFFFF0BD6 :                     ; Input:
(1) 1288/FFFFFFFFFFFF0BD6 :                     ; a0   | Map data
(1) 1289/FFFFFFFFFFFF0BD6 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 1290/FFFFFFFFFFFF0BD6 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1291/FFFFFFFFFFFF0BD6 :                     ; d2.l | Screen Width/VRAM location:
(1) 1292/FFFFFFFFFFFF0BD6 :                     ;        splitw(sw_size,vram_map_loc)
(1) 1293/FFFFFFFFFFFF0BD6 :                     ; d3.w | VRAM-cell increment
(1) 1294/FFFFFFFFFFFF0BD6 :                     ;
(1) 1295/FFFFFFFFFFFF0BD6 :                     ; Notes:
(1) 1296/FFFFFFFFFFFF0BD6 :                     ; - Data starts from 0, tile $FFFF(-1) is
(1) 1297/FFFFFFFFFFFF0BD6 :                     ;   used to place the BLANK tile (see SET_NullVram)
(1) 1298/FFFFFFFFFFFF0BD6 :                     ; - SCD/CD32X NOTE:
(1) 1299/FFFFFFFFFFFF0BD6 :                     ;   For making the dot-screen map for
(1) 1300/FFFFFFFFFFFF0BD6 :                     ;   the Stamps use Video_MdMcd_StampDotMap
(1) 1301/FFFFFFFFFFFF0BD6 :                     ; --------------------------------------------------------
(1) 1302/FFFFFFFFFFFF0BD6 :                     
(1) 1303/FFFFFFFFFFFF0BD6 :                     Video_LoadMap:
(1) 1304/FFFFFFFFFFFF0BD6 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1305/FFFFFFFFFFFF0BDA : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1306/FFFFFFFFFFFF0BE0 :                     
(1) 1307/FFFFFFFFFFFF0BE0 : 2C02                		move.l	d2,d6
(1) 1308/FFFFFFFFFFFF0BE2 : 4846                		swap	d6
(1) 1309/FFFFFFFFFFFF0BE4 : 3A00                		move.w	d0,d5
(1) 1310/FFFFFFFFFFFF0BE6 : CAC6                		mulu.w	d6,d5
(1) 1311/FFFFFFFFFFFF0BE8 : 2800                		move.l	d0,d4
(1) 1312/FFFFFFFFFFFF0BEA : 4844                		swap	d4
(1) 1313/FFFFFFFFFFFF0BEC : D844                		add.w	d4,d4
(1) 1314/FFFFFFFFFFFF0BEE : DA44                		add.w	d4,d5
(1) 1315/FFFFFFFFFFFF0BF0 : 3E02                		move.w	d2,d7
(1) 1316/FFFFFFFFFFFF0BF2 : DE45                		add.w	d5,d7
(1) 1317/FFFFFFFFFFFF0BF4 : 7A00                		moveq	#0,d5
(1) 1318/FFFFFFFFFFFF0BF6 : 3A07                		move.w	d7,d5
(1) 1319/FFFFFFFFFFFF0BF8 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1320/FFFFFFFFFFFF0BFC : 8E7C 4000           		or.w	#$4000,d7
(1) 1321/FFFFFFFFFFFF0C00 : E55D                		rol.w	#2,d5
(1) 1322/FFFFFFFFFFFF0C02 : 0245 0003           		andi.w	#%11,d5
(1) 1323/FFFFFFFFFFFF0C06 : 4845                		swap	d5
(1) 1324/FFFFFFFFFFFF0C08 : 2A48                		move.l	a0,a5
(1) 1325/FFFFFFFFFFFF0C0A : 3801                		move.w	d1,d4
(1) 1326/FFFFFFFFFFFF0C0C : 5344                		subq.w	#1,d4
(1) 1327/FFFFFFFFFFFF0C0E : 6B36                		bmi.s	.bad_size
(1) 1328/FFFFFFFFFFFF0C10 :                     .y_loop:
(1) 1329/FFFFFFFFFFFF0C10 : 2844                		move.l	d4,a4
(1) 1330/FFFFFFFFFFFF0C12 : 4845                		swap	d5
(1) 1331/FFFFFFFFFFFF0C14 : 3D47 0004           		move.w	d7,4(a6)
(1) 1332/FFFFFFFFFFFF0C18 : 3D45 0004           		move.w	d5,4(a6)
(1) 1333/FFFFFFFFFFFF0C1C : 4845                		swap	d5
(1) 1334/FFFFFFFFFFFF0C1E : 2801                		move.l	d1,d4
(1) 1335/FFFFFFFFFFFF0C20 : 4844                		swap	d4
(1) 1336/FFFFFFFFFFFF0C22 : 5344                		subq.w	#1,d4
(1) 1337/FFFFFFFFFFFF0C24 :                     .x_loop:
(1) 1338/FFFFFFFFFFFF0C24 : 4844                		swap	d4
(1) 1339/FFFFFFFFFFFF0C26 : 381D                		move.w	(a5)+,d4
(1) 1340/FFFFFFFFFFFF0C28 : B87C FFFF           		cmp.w	#-1,d4
(1) 1341/FFFFFFFFFFFF0C2C : 6606                		bne.s	.non_blank
(1) 1342/FFFFFFFFFFFF0C2E : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1343/FFFFFFFFFFFF0C32 : 6002                		bra.s	.mk_cell
(1) 1344/FFFFFFFFFFFF0C34 :                     .non_blank:
(1) 1345/FFFFFFFFFFFF0C34 : D843                		add.w	d3,d4
(1) 1346/FFFFFFFFFFFF0C36 :                     .mk_cell:
(1) 1347/FFFFFFFFFFFF0C36 : 3C84                		move.w	d4,(a6)
(1) 1348/FFFFFFFFFFFF0C38 : 4844                		swap	d4
(1) 1349/FFFFFFFFFFFF0C3A : 51CC FFE8           		dbf	d4,.x_loop
(1) 1350/FFFFFFFFFFFF0C3E : DE46                		add.w	d6,d7
(1) 1351/FFFFFFFFFFFF0C40 : 280C                		move.l	a4,d4
(1) 1352/FFFFFFFFFFFF0C42 : 51CC FFCC           		dbf	d4,.y_loop
(1) 1353/FFFFFFFFFFFF0C46 :                     .bad_size:
(1) 1354/FFFFFFFFFFFF0C46 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1355/FFFFFFFFFFFF0C4A : 4E75                		rts
(1) 1356/FFFFFFFFFFFF0C4C :                     
(1) 1357/FFFFFFFFFFFF0C4C :                     ; ------------------------------------------------
(1) 1358/FFFFFFFFFFFF0C4C :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 1359/FFFFFFFFFFFF0C4C :                     ; d2.l | Screen Width/VRAM location:
(1) 1360/FFFFFFFFFFFF0C4C :                     ; d3.w | VRAM-cell increment
(1) 1361/FFFFFFFFFFFF0C4C :                     
(1) 1362/FFFFFFFFFFFF0C4C :                     Video_LoadMapV:
(1) 1363/FFFFFFFFFFFF0C4C : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1364/FFFFFFFFFFFF0C50 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1365/FFFFFFFFFFFF0C56 : 2C02                		move.l	d2,d6
(1) 1366/FFFFFFFFFFFF0C58 : 4846                		swap	d6
(1) 1367/FFFFFFFFFFFF0C5A : 3A00                		move.w	d0,d5
(1) 1368/FFFFFFFFFFFF0C5C : CAC6                		mulu.w	d6,d5
(1) 1369/FFFFFFFFFFFF0C5E : 2800                		move.l	d0,d4
(1) 1370/FFFFFFFFFFFF0C60 : 4844                		swap	d4
(1) 1371/FFFFFFFFFFFF0C62 : D844                		add.w	d4,d4
(1) 1372/FFFFFFFFFFFF0C64 : DA44                		add.w	d4,d5
(1) 1373/FFFFFFFFFFFF0C66 : 3E02                		move.w	d2,d7
(1) 1374/FFFFFFFFFFFF0C68 : DE45                		add.w	d5,d7
(1) 1375/FFFFFFFFFFFF0C6A : 7A00                		moveq	#0,d5
(1) 1376/FFFFFFFFFFFF0C6C : 3A07                		move.w	d7,d5
(1) 1377/FFFFFFFFFFFF0C6E : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1378/FFFFFFFFFFFF0C72 : 8E7C 4000           		or.w	#$4000,d7
(1) 1379/FFFFFFFFFFFF0C76 : E55D                		rol.w	#2,d5
(1) 1380/FFFFFFFFFFFF0C78 : 0245 0003           		andi.w	#%11,d5
(1) 1381/FFFFFFFFFFFF0C7C : 4845                		swap	d5
(1) 1382/FFFFFFFFFFFF0C7E : 2A48                		move.l	a0,a5
(1) 1383/FFFFFFFFFFFF0C80 : 0838 0002 E877      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 1384/FFFFFFFFFFFF0C86 : 664C                		bne.s	.dble_mode
(1) 1385/FFFFFFFFFFFF0C88 : 2801                		move.l	d1,d4
(1) 1386/FFFFFFFFFFFF0C8A : 4844                		swap	d4
(1) 1387/FFFFFFFFFFFF0C8C : 5344                		subq.w	#1,d4
(1) 1388/FFFFFFFFFFFF0C8E : 6B3E                		bmi.s	.bad_size
(1) 1389/FFFFFFFFFFFF0C90 :                     .x_loop:
(1) 1390/FFFFFFFFFFFF0C90 : 2844                		move.l	d4,a4
(1) 1391/FFFFFFFFFFFF0C92 : 3801                		move.w	d1,d4
(1) 1392/FFFFFFFFFFFF0C94 : 5344                		subq.w	#1,d4
(1) 1393/FFFFFFFFFFFF0C96 :                     .y_loop:
(1) 1394/FFFFFFFFFFFF0C96 : 4844                		swap	d4
(1) 1395/FFFFFFFFFFFF0C98 : 3807                		move.w	d7,d4
(1) 1396/FFFFFFFFFFFF0C9A : D845                		add.w	d5,d4
(1) 1397/FFFFFFFFFFFF0C9C : 4845                		swap	d5
(1) 1398/FFFFFFFFFFFF0C9E : 3D44 0004           		move.w	d4,4(a6)
(1) 1399/FFFFFFFFFFFF0CA2 : 3D45 0004           		move.w	d5,4(a6)
(1) 1400/FFFFFFFFFFFF0CA6 : 4845                		swap	d5
(1) 1401/FFFFFFFFFFFF0CA8 : 381D                		move.w	(a5)+,d4
(1) 1402/FFFFFFFFFFFF0CAA : B87C FFFF           		cmp.w	#-1,d4
(1) 1403/FFFFFFFFFFFF0CAE : 6606                		bne.s	.non_blank
(1) 1404/FFFFFFFFFFFF0CB0 : 383C 07FE           		move.w	#SET_NullVram,d4
(1) 1405/FFFFFFFFFFFF0CB4 : 6002                		bra.s	.mk_cell
(1) 1406/FFFFFFFFFFFF0CB6 :                     .non_blank:
(1) 1407/FFFFFFFFFFFF0CB6 : D843                		add.w	d3,d4
(1) 1408/FFFFFFFFFFFF0CB8 :                     .mk_cell:
(1) 1409/FFFFFFFFFFFF0CB8 : 3C84                		move.w	d4,(a6)
(1) 1410/FFFFFFFFFFFF0CBA : DA46                		add.w	d6,d5
(1) 1411/FFFFFFFFFFFF0CBC : 4844                		swap	d4
(1) 1412/FFFFFFFFFFFF0CBE : 51CC FFD6           		dbf	d4,.y_loop
(1) 1413/FFFFFFFFFFFF0CC2 : DE7C 0002           		add.w	#2,d7
(1) 1414/FFFFFFFFFFFF0CC6 : 4245                		clr.w	d5
(1) 1415/FFFFFFFFFFFF0CC8 : 280C                		move.l	a4,d4
(1) 1416/FFFFFFFFFFFF0CCA : 51CC FFC4           		dbf	d4,.x_loop
(1) 1417/FFFFFFFFFFFF0CCE :                     .bad_size:
(1) 1418/FFFFFFFFFFFF0CCE : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 1419/FFFFFFFFFFFF0CD2 : 4E75                		rts
(1) 1420/FFFFFFFFFFFF0CD4 :                     
(1) 1421/FFFFFFFFFFFF0CD4 :                     ; ------------------------------------------------
(1) 1422/FFFFFFFFFFFF0CD4 :                     
(1) 1423/FFFFFFFFFFFF0CD4 :                     .dble_mode:
(1) 1424/FFFFFFFFFFFF0CD4 : 2F01                		move.l	d1,-(sp)
(1) 1425/FFFFFFFFFFFF0CD6 : E249                		lsr.w	#1,d1			; <-- lazy patch
(1) 1426/FFFFFFFFFFFF0CD8 : 3803                		move.w	d3,d4
(1) 1427/FFFFFFFFFFFF0CDA : 0244 F800           		andi.w	#$F800,d4
(1) 1428/FFFFFFFFFFFF0CDE : 0243 07FF           		andi.w	#$7FF,d3
(1) 1429/FFFFFFFFFFFF0CE2 : E24B                		lsr.w	#1,d3
(1) 1430/FFFFFFFFFFFF0CE4 : 8644                		or.w	d4,d3
(1) 1431/FFFFFFFFFFFF0CE6 : 2801                		move.l	d1,d4
(1) 1432/FFFFFFFFFFFF0CE8 : 4844                		swap	d4
(1) 1433/FFFFFFFFFFFF0CEA : 5344                		subq.w	#1,d4
(1) 1434/FFFFFFFFFFFF0CEC : 6B48                		bmi.s	.bad_size_d
(1) 1435/FFFFFFFFFFFF0CEE :                     .x_loop_d:
(1) 1436/FFFFFFFFFFFF0CEE : 2844                		move.l	d4,a4
(1) 1437/FFFFFFFFFFFF0CF0 : 3801                		move.w	d1,d4
(1) 1438/FFFFFFFFFFFF0CF2 : 5344                		subq.w	#1,d4
(1) 1439/FFFFFFFFFFFF0CF4 :                     .y_loop_d:
(1) 1440/FFFFFFFFFFFF0CF4 : 4844                		swap	d4
(1) 1441/FFFFFFFFFFFF0CF6 : 3807                		move.w	d7,d4
(1) 1442/FFFFFFFFFFFF0CF8 : D845                		add.w	d5,d4
(1) 1443/FFFFFFFFFFFF0CFA : 4845                		swap	d5
(1) 1444/FFFFFFFFFFFF0CFC : 3D44 0004           		move.w	d4,4(a6)
(1) 1445/FFFFFFFFFFFF0D00 : 3D45 0004           		move.w	d5,4(a6)
(1) 1446/FFFFFFFFFFFF0D04 : 4845                		swap	d5
(1) 1447/FFFFFFFFFFFF0D06 : 381D                		move.w	(a5)+,d4
(1) 1448/FFFFFFFFFFFF0D08 : DAFC 0002           		adda	#2,a5
(1) 1449/FFFFFFFFFFFF0D0C : B87C FFFF           		cmp.w	#-1,d4
(1) 1450/FFFFFFFFFFFF0D10 : 6606                		bne.s	.non_blank_d
(1) 1451/FFFFFFFFFFFF0D12 : 383C 03FF           		move.w	#SET_NullVram/2,d4
(1) 1452/FFFFFFFFFFFF0D16 : 6008                		bra.s	.mk_cell_d
(1) 1453/FFFFFFFFFFFF0D18 :                     .non_blank_d:
(1) 1454/FFFFFFFFFFFF0D18 : 0244 07FF           		andi.w	#$7FF,d4
(1) 1455/FFFFFFFFFFFF0D1C : E24C                		lsr.w	#1,d4
(1) 1456/FFFFFFFFFFFF0D1E : D843                		add.w	d3,d4
(1) 1457/FFFFFFFFFFFF0D20 :                     .mk_cell_d:
(1) 1458/FFFFFFFFFFFF0D20 : 3C84                		move.w	d4,(a6)
(1) 1459/FFFFFFFFFFFF0D22 : DA46                		add.w	d6,d5
(1) 1460/FFFFFFFFFFFF0D24 : 4844                		swap	d4
(1) 1461/FFFFFFFFFFFF0D26 : 51CC FFCC           		dbf	d4,.y_loop_d
(1) 1462/FFFFFFFFFFFF0D2A : DE7C 0002           		add.w	#2,d7
(1) 1463/FFFFFFFFFFFF0D2E : 4245                		clr.w	d5
(1) 1464/FFFFFFFFFFFF0D30 : 280C                		move.l	a4,d4
(1) 1465/FFFFFFFFFFFF0D32 : 51CC FFBA           		dbf	d4,.x_loop_d
(1) 1466/FFFFFFFFFFFF0D36 :                     .bad_size_d:
(1) 1467/FFFFFFFFFFFF0D36 : 221F                		move.l	(sp)+,d1
(1) 1468/FFFFFFFFFFFF0D38 : 6094                		bra	.bad_size
(1) 1469/FFFFFFFFFFFF0D3A :                     
(1) 1470/FFFFFFFFFFFF0D3A :                     ; ====================================================================
(1) 1471/FFFFFFFFFFFF0D3A :                     ; ----------------------------------------------------------------
(1) 1472/FFFFFFFFFFFF0D3A :                     ; Palette fading section
(1) 1473/FFFFFFFFFFFF0D3A :                     ; ----------------------------------------------------------------
(1) 1474/FFFFFFFFFFFF0D3A :                     
(1) 1475/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1476/FFFFFFFFFFFF0D3A :                     ; Video_RunFade
(1) 1477/FFFFFFFFFFFF0D3A :                     ;
(1) 1478/FFFFFFFFFFFF0D3A :                     ; Process Palette changes (fade and effects)
(1) 1479/FFFFFFFFFFFF0D3A :                     ; --------------------------------------------------------
(1) 1480/FFFFFFFFFFFF0D3A :                     
(1) 1481/FFFFFFFFFFFF0D3A :                     Video_RunFade:
(1) 1482/FFFFFFFFFFFF0D3A : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1483/FFFFFFFFFFFF0D3E :                     .next_req:
(1) 1484/FFFFFFFFFFFF0D3E : 1016                		move.b	palfd_req(a6),d0
(1) 1485/FFFFFFFFFFFF0D40 : 6744                		beq.s	.no_req
(1) 1486/FFFFFFFFFFFF0D42 : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 1487/FFFFFFFFFFFF0D46 : 6A38                		bpl.s	.busy_timer
(1) 1488/FFFFFFFFFFFF0D48 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 1489/FFFFFFFFFFFF0D4E : 4BF8 E5D0           		lea	(RAM_Palette).w,a5
(1) 1490/FFFFFFFFFFFF0D52 : 49F8 E650           		lea	(RAM_PaletteFade).w,a4
(1) 1491/FFFFFFFFFFFF0D56 : 7E00                		moveq	#0,d7
(1) 1492/FFFFFFFFFFFF0D58 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 1493/FFFFFFFFFFFF0D5C : DE47                		add.w	d7,d7
(1) 1494/FFFFFFFFFFFF0D5E : DAC7                		adda	d7,a5
(1) 1495/FFFFFFFFFFFF0D60 : D8C7                		adda	d7,a4
(1) 1496/FFFFFFFFFFFF0D62 : 7C00                		moveq	#0,d6
(1) 1497/FFFFFFFFFFFF0D64 : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 1498/FFFFFFFFFFFF0D68 : 6716                		beq.s	.busy_timer
(1) 1499/FFFFFFFFFFFF0D6A : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 1500/FFFFFFFFFFFF0D6E : DC46                		add.w	d6,d6		; * 2
(1) 1501/FFFFFFFFFFFF0D70 : 5347                		subq.w	#1,d7
(1) 1502/FFFFFFFFFFFF0D72 : 0240 00FF           		andi.w	#$FF,d0
(1) 1503/FFFFFFFFFFFF0D76 : D040                		add.w	d0,d0
(1) 1504/FFFFFFFFFFFF0D78 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 1505/FFFFFFFFFFFF0D7C : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 1506/FFFFFFFFFFFF0D80 :                     .busy_timer:
(1) 1507/FFFFFFFFFFFF0D80 : DCFC 0008           		adda	#palfd_len,a6
(1) 1508/FFFFFFFFFFFF0D84 : 60B8                		bra.s	.next_req
(1) 1509/FFFFFFFFFFFF0D86 :                     .no_req:
(1) 1510/FFFFFFFFFFFF0D86 : 4278 E860           		clr.w	(RAM_IndxPalFade).w
(1) 1511/FFFFFFFFFFFF0D8A : 4E75                		rts
(1) 1512/FFFFFFFFFFFF0D8C :                     
(1) 1513/FFFFFFFFFFFF0D8C :                     ; ------------------------------------------------
(1) 1514/FFFFFFFFFFFF0D8C :                     
(1) 1515/FFFFFFFFFFFF0D8C :                     .fade_list:
(1) 1516/FFFFFFFFFFFF0D8C : 0010                		dc.w .nothing-.fade_list	; $00
(1) 1517/FFFFFFFFFFFF0D8E : 0018                		dc.w .fade_out-.fade_list
(1) 1518/FFFFFFFFFFFF0D90 : 0088                		dc.w .fade_in-.fade_list
(1) 1519/FFFFFFFFFFFF0D92 : 0010                		dc.w .nothing-.fade_list
(1) 1520/FFFFFFFFFFFF0D94 : 0010                		dc.w .nothing-.fade_list	; $04
(1) 1521/FFFFFFFFFFFF0D96 : 0010                		dc.w .nothing-.fade_list
(1) 1522/FFFFFFFFFFFF0D98 : 0010                		dc.w .nothing-.fade_list
(1) 1523/FFFFFFFFFFFF0D9A : 0010                		dc.w .nothing-.fade_list
(1) 1524/FFFFFFFFFFFF0D9C :                     
(1) 1525/FFFFFFFFFFFF0D9C :                     ; ----------------------------------------------------
(1) 1526/FFFFFFFFFFFF0D9C :                     ; Fade request $00: Null/exit.
(1) 1527/FFFFFFFFFFFF0D9C :                     ; ----------------------------------------------------
(1) 1528/FFFFFFFFFFFF0D9C :                     
(1) 1529/FFFFFFFFFFFF0D9C :                     .nothing:
(1) 1530/FFFFFFFFFFFF0D9C :                     .pfade_del:
(1) 1531/FFFFFFFFFFFF0D9C : 4216                		clr.b	palfd_req(a6)
(1) 1532/FFFFFFFFFFFF0D9E : 422E 0005           		clr.b	palfd_timer(a6)
(1) 1533/FFFFFFFFFFFF0DA2 : 4E75                		rts
(1) 1534/FFFFFFFFFFFF0DA4 :                     
(1) 1535/FFFFFFFFFFFF0DA4 :                     ; ----------------------------------------------------
(1) 1536/FFFFFFFFFFFF0DA4 :                     ; Fade request $01: fade-out to black
(1) 1537/FFFFFFFFFFFF0DA4 :                     ; Quick.
(1) 1538/FFFFFFFFFFFF0DA4 :                     ;
(1) 1539/FFFFFFFFFFFF0DA4 :                     ; d7 - Num colors
(1) 1540/FFFFFFFFFFFF0DA4 :                     ; d6 - Increment*2
(1) 1541/FFFFFFFFFFFF0DA4 :                     ; ----------------------------------------------------
(1) 1542/FFFFFFFFFFFF0DA4 :                     
(1) 1543/FFFFFFFFFFFF0DA4 :                     .fade_out:
(1) 1544/FFFFFFFFFFFF0DA4 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1545/FFFFFFFFFFFF0DA8 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1546/FFFFFFFFFFFF0DAC : 383C EEE0           		move.w	#%1110111011100000,d4	; d4 - Others filter + extra
(1) 1547/FFFFFFFFFFFF0DB0 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 1548/FFFFFFFFFFFF0DB2 :                     .next_color:
(1) 1549/FFFFFFFFFFFF0DB2 : 3015                		move.w	(a5),d0
(1) 1550/FFFFFFFFFFFF0DB4 : 6750                		beq.s	.all_black		; Skip if all black
(1) 1551/FFFFFFFFFFFF0DB6 :                     	rept 3
(1) 1552/FFFFFFFFFFFF0DB6 :                     		move.w	d0,d1
(1) 1553/FFFFFFFFFFFF0DB6 :                     		and.w	d5,d1			; Filter TARGET
(1) 1554/FFFFFFFFFFFF0DB6 :                     		beq.s	.no_chng
(1) 1555/FFFFFFFFFFFF0DB6 :                     		and.w	d4,d0			; Filter OTHERS
(1) 1556/FFFFFFFFFFFF0DB6 :                     		sub.w	d6,d1
(1) 1557/FFFFFFFFFFFF0DB6 :                     		bpl.s	.blck_alrdy
(1) 1558/FFFFFFFFFFFF0DB6 :                     		clr.w	d1
(1) 1559/FFFFFFFFFFFF0DB6 :                     .blck_alrdy:
(1) 1560/FFFFFFFFFFFF0DB6 :                     		addq.w	#1,d3			; Color changed
(1) 1561/FFFFFFFFFFFF0DB6 :                     .no_chng:
(1) 1562/FFFFFFFFFFFF0DB6 :                     		or.w	d1,d0
(1) 1563/FFFFFFFFFFFF0DB6 :                     		rol.w	#4,d6			; next << color
(1) 1564/FFFFFFFFFFFF0DB6 :                     		rol.w	#4,d5
(1) 1565/FFFFFFFFFFFF0DB6 :                     		rol.w	#4,d4
(1) 1566/FFFFFFFFFFFF0DB6 :                     	endm
(1) 1552/FFFFFFFFFFFF0DB6 : 3200                		move.w	d0,d1
(1) 1553/FFFFFFFFFFFF0DB8 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/FFFFFFFFFFFF0DBA : 670A                		beq.s	.no_chng
(1) 1555/FFFFFFFFFFFF0DBC : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/FFFFFFFFFFFF0DBE : 9246                		sub.w	d6,d1
(1) 1557/FFFFFFFFFFFF0DC0 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/FFFFFFFFFFFF0DC2 : 4241                		clr.w	d1
(1) 1559/FFFFFFFFFFFF0DC4 :                     .blck_alrdy:
(1) 1560/FFFFFFFFFFFF0DC4 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/FFFFFFFFFFFF0DC6 :                     .no_chng:
(1) 1562/FFFFFFFFFFFF0DC6 : 8041                		or.w	d1,d0
(1) 1563/FFFFFFFFFFFF0DC8 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/FFFFFFFFFFFF0DCA : E95D                		rol.w	#4,d5
(1) 1565/FFFFFFFFFFFF0DCC : E95C                		rol.w	#4,d4
(1) 1552/FFFFFFFFFFFF0DCE : 3200                		move.w	d0,d1
(1) 1553/FFFFFFFFFFFF0DD0 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/FFFFFFFFFFFF0DD2 : 670A                		beq.s	.no_chng
(1) 1555/FFFFFFFFFFFF0DD4 : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/FFFFFFFFFFFF0DD6 : 9246                		sub.w	d6,d1
(1) 1557/FFFFFFFFFFFF0DD8 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/FFFFFFFFFFFF0DDA : 4241                		clr.w	d1
(1) 1559/FFFFFFFFFFFF0DDC :                     .blck_alrdy:
(1) 1560/FFFFFFFFFFFF0DDC : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/FFFFFFFFFFFF0DDE :                     .no_chng:
(1) 1562/FFFFFFFFFFFF0DDE : 8041                		or.w	d1,d0
(1) 1563/FFFFFFFFFFFF0DE0 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/FFFFFFFFFFFF0DE2 : E95D                		rol.w	#4,d5
(1) 1565/FFFFFFFFFFFF0DE4 : E95C                		rol.w	#4,d4
(1) 1552/FFFFFFFFFFFF0DE6 : 3200                		move.w	d0,d1
(1) 1553/FFFFFFFFFFFF0DE8 : C245                		and.w	d5,d1			; Filter TARGET
(1) 1554/FFFFFFFFFFFF0DEA : 670A                		beq.s	.no_chng
(1) 1555/FFFFFFFFFFFF0DEC : C044                		and.w	d4,d0			; Filter OTHERS
(1) 1556/FFFFFFFFFFFF0DEE : 9246                		sub.w	d6,d1
(1) 1557/FFFFFFFFFFFF0DF0 : 6A02                		bpl.s	.blck_alrdy
(1) 1558/FFFFFFFFFFFF0DF2 : 4241                		clr.w	d1
(1) 1559/FFFFFFFFFFFF0DF4 :                     .blck_alrdy:
(1) 1560/FFFFFFFFFFFF0DF4 : 5243                		addq.w	#1,d3			; Color changed
(1) 1561/FFFFFFFFFFFF0DF6 :                     .no_chng:
(1) 1562/FFFFFFFFFFFF0DF6 : 8041                		or.w	d1,d0
(1) 1563/FFFFFFFFFFFF0DF8 : E95E                		rol.w	#4,d6			; next << color
(1) 1564/FFFFFFFFFFFF0DFA : E95D                		rol.w	#4,d5
(1) 1565/FFFFFFFFFFFF0DFC : E95C                		rol.w	#4,d4
(1) 1567/FFFFFFFFFFFF0DFE :                     	; we got $Exxx, rotate back to $xxxE:
(1) 1568/FFFFFFFFFFFF0DFE : E95E                		rol.w	#4,d6
(1) 1569/FFFFFFFFFFFF0E00 : E95D                		rol.w	#4,d5
(1) 1570/FFFFFFFFFFFF0E02 : E95C                		rol.w	#4,d4
(1) 1571/FFFFFFFFFFFF0E04 : 3A80                		move.w	d0,(a5)
(1) 1572/FFFFFFFFFFFF0E06 :                     .all_black:
(1) 1573/FFFFFFFFFFFF0E06 : DAFC 0002           		adda	#2,a5
(1) 1574/FFFFFFFFFFFF0E0A : 51CF FFA6           		dbf	d7,.next_color
(1) 1575/FFFFFFFFFFFF0E0E : 4A43                		tst.w	d3
(1) 1576/FFFFFFFFFFFF0E10 : 678A                		beq	.pfade_del
(1) 1577/FFFFFFFFFFFF0E12 :                     .fdout_nend:
(1) 1578/FFFFFFFFFFFF0E12 : 4E75                		rts
(1) 1579/FFFFFFFFFFFF0E14 :                     
(1) 1580/FFFFFFFFFFFF0E14 :                     ; ----------------------------------------------------
(1) 1581/FFFFFFFFFFFF0E14 :                     ; Fade request $02
(1) 1582/FFFFFFFFFFFF0E14 :                     ; Fade-in
(1) 1583/FFFFFFFFFFFF0E14 :                     ; ----------------------------------------------------
(1) 1584/FFFFFFFFFFFF0E14 :                     
(1) 1585/FFFFFFFFFFFF0E14 :                     .fade_in:
(1) 1586/FFFFFFFFFFFF0E14 : 0246 000E           		andi.w	#%0000000000001110,d6	; d6 - Max increment
(1) 1587/FFFFFFFFFFFF0E18 : 3A3C 000E           		move.w	#%0000000000001110,d5	; d5 - Target filter
(1) 1588/FFFFFFFFFFFF0E1C : 383C 0EEE           		move.w	#$0EEE,d4		; d4 - Filter bits
(1) 1589/FFFFFFFFFFFF0E20 :                     .next_in:
(1) 1590/FFFFFFFFFFFF0E20 : 4847                		swap	d7
(1) 1591/FFFFFFFFFFFF0E22 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 1592/FFFFFFFFFFFF0E24 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 1593/FFFFFFFFFFFF0E26 : C044                		and.w	d4,d0
(1) 1594/FFFFFFFFFFFF0E28 : C444                		and.w	d4,d2
(1) 1595/FFFFFFFFFFFF0E2A : B042                		cmp.w	d2,d0
(1) 1596/FFFFFFFFFFFF0E2C : 6766                		beq.s	.same_in
(1) 1597/FFFFFFFFFFFF0E2E :                     	rept 3
(1) 1598/FFFFFFFFFFFF0E2E :                     		move.w	d0,d1
(1) 1599/FFFFFFFFFFFF0E2E :                     		move.w	d4,d3
(1) 1600/FFFFFFFFFFFF0E2E :                     		eor.w	d5,d3
(1) 1601/FFFFFFFFFFFF0E2E :                     		and.w	d3,d0
(1) 1602/FFFFFFFFFFFF0E2E :                     		move.w	d2,d3
(1) 1603/FFFFFFFFFFFF0E2E :                     		and.w	d5,d1		; filter CURRENT color
(1) 1604/FFFFFFFFFFFF0E2E :                     		and.w	d5,d3		; filter TARGET color
(1) 1605/FFFFFFFFFFFF0E2E :                     
(1) 1606/FFFFFFFFFFFF0E2E :                     		add.w	d6,d1		; ADD to current
(1) 1607/FFFFFFFFFFFF0E2E :                     		cmp.w	d3,d1
(1) 1608/FFFFFFFFFFFF0E2E :                     		bcs.s	.max_out
(1) 1609/FFFFFFFFFFFF0E2E :                     		move.w	d2,d1
(1) 1610/FFFFFFFFFFFF0E2E :                     		and.w	d5,d1
(1) 1611/FFFFFFFFFFFF0E2E :                     .max_out:
(1) 1612/FFFFFFFFFFFF0E2E :                     		addq.w	#1,d7
(1) 1613/FFFFFFFFFFFF0E2E :                     		or.w	d1,d0
(1) 1614/FFFFFFFFFFFF0E2E :                     		rol.w	#4,d6		; next << color
(1) 1615/FFFFFFFFFFFF0E2E :                     		rol.w	#4,d5
(1) 1616/FFFFFFFFFFFF0E2E :                     	endm
(1) 1598/FFFFFFFFFFFF0E2E : 3200                		move.w	d0,d1
(1) 1599/FFFFFFFFFFFF0E30 : 3604                		move.w	d4,d3
(1) 1600/FFFFFFFFFFFF0E32 : BB43                		eor.w	d5,d3
(1) 1601/FFFFFFFFFFFF0E34 : C043                		and.w	d3,d0
(1) 1602/FFFFFFFFFFFF0E36 : 3602                		move.w	d2,d3
(1) 1603/FFFFFFFFFFFF0E38 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/FFFFFFFFFFFF0E3A : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/FFFFFFFFFFFF0E3C :                     
(1) 1606/FFFFFFFFFFFF0E3C : D246                		add.w	d6,d1		; ADD to current
(1) 1607/FFFFFFFFFFFF0E3E : B243                		cmp.w	d3,d1
(1) 1608/FFFFFFFFFFFF0E40 : 6504                		bcs.s	.max_out
(1) 1609/FFFFFFFFFFFF0E42 : 3202                		move.w	d2,d1
(1) 1610/FFFFFFFFFFFF0E44 : C245                		and.w	d5,d1
(1) 1611/FFFFFFFFFFFF0E46 :                     .max_out:
(1) 1612/FFFFFFFFFFFF0E46 : 5247                		addq.w	#1,d7
(1) 1613/FFFFFFFFFFFF0E48 : 8041                		or.w	d1,d0
(1) 1614/FFFFFFFFFFFF0E4A : E95E                		rol.w	#4,d6		; next << color
(1) 1615/FFFFFFFFFFFF0E4C : E95D                		rol.w	#4,d5
(1) 1598/FFFFFFFFFFFF0E4E : 3200                		move.w	d0,d1
(1) 1599/FFFFFFFFFFFF0E50 : 3604                		move.w	d4,d3
(1) 1600/FFFFFFFFFFFF0E52 : BB43                		eor.w	d5,d3
(1) 1601/FFFFFFFFFFFF0E54 : C043                		and.w	d3,d0
(1) 1602/FFFFFFFFFFFF0E56 : 3602                		move.w	d2,d3
(1) 1603/FFFFFFFFFFFF0E58 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/FFFFFFFFFFFF0E5A : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/FFFFFFFFFFFF0E5C :                     
(1) 1606/FFFFFFFFFFFF0E5C : D246                		add.w	d6,d1		; ADD to current
(1) 1607/FFFFFFFFFFFF0E5E : B243                		cmp.w	d3,d1
(1) 1608/FFFFFFFFFFFF0E60 : 6504                		bcs.s	.max_out
(1) 1609/FFFFFFFFFFFF0E62 : 3202                		move.w	d2,d1
(1) 1610/FFFFFFFFFFFF0E64 : C245                		and.w	d5,d1
(1) 1611/FFFFFFFFFFFF0E66 :                     .max_out:
(1) 1612/FFFFFFFFFFFF0E66 : 5247                		addq.w	#1,d7
(1) 1613/FFFFFFFFFFFF0E68 : 8041                		or.w	d1,d0
(1) 1614/FFFFFFFFFFFF0E6A : E95E                		rol.w	#4,d6		; next << color
(1) 1615/FFFFFFFFFFFF0E6C : E95D                		rol.w	#4,d5
(1) 1598/FFFFFFFFFFFF0E6E : 3200                		move.w	d0,d1
(1) 1599/FFFFFFFFFFFF0E70 : 3604                		move.w	d4,d3
(1) 1600/FFFFFFFFFFFF0E72 : BB43                		eor.w	d5,d3
(1) 1601/FFFFFFFFFFFF0E74 : C043                		and.w	d3,d0
(1) 1602/FFFFFFFFFFFF0E76 : 3602                		move.w	d2,d3
(1) 1603/FFFFFFFFFFFF0E78 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 1604/FFFFFFFFFFFF0E7A : C645                		and.w	d5,d3		; filter TARGET color
(1) 1605/FFFFFFFFFFFF0E7C :                     
(1) 1606/FFFFFFFFFFFF0E7C : D246                		add.w	d6,d1		; ADD to current
(1) 1607/FFFFFFFFFFFF0E7E : B243                		cmp.w	d3,d1
(1) 1608/FFFFFFFFFFFF0E80 : 6504                		bcs.s	.max_out
(1) 1609/FFFFFFFFFFFF0E82 : 3202                		move.w	d2,d1
(1) 1610/FFFFFFFFFFFF0E84 : C245                		and.w	d5,d1
(1) 1611/FFFFFFFFFFFF0E86 :                     .max_out:
(1) 1612/FFFFFFFFFFFF0E86 : 5247                		addq.w	#1,d7
(1) 1613/FFFFFFFFFFFF0E88 : 8041                		or.w	d1,d0
(1) 1614/FFFFFFFFFFFF0E8A : E95E                		rol.w	#4,d6		; next << color
(1) 1615/FFFFFFFFFFFF0E8C : E95D                		rol.w	#4,d5
(1) 1617/FFFFFFFFFFFF0E8E : E95E                		rol.w	#4,d6
(1) 1618/FFFFFFFFFFFF0E90 : E95D                		rol.w	#4,d5
(1) 1619/FFFFFFFFFFFF0E92 : 3A80                		move.w	d0,(a5)
(1) 1620/FFFFFFFFFFFF0E94 :                     .same_in:
(1) 1621/FFFFFFFFFFFF0E94 : DAFC 0002           		adda	#2,a5		; Next index
(1) 1622/FFFFFFFFFFFF0E98 : D8FC 0002           		adda	#2,a4
(1) 1623/FFFFFFFFFFFF0E9C : 4847                		swap	d7
(1) 1624/FFFFFFFFFFFF0E9E : 51CF FF80           		dbf	d7,.next_in
(1) 1625/FFFFFFFFFFFF0EA2 : 4847                		swap	d7
(1) 1626/FFFFFFFFFFFF0EA4 : 4A47                		tst.w	d7
(1) 1627/FFFFFFFFFFFF0EA6 : 6700 FEF4           		beq	.pfade_del
(1) 1628/FFFFFFFFFFFF0EAA :                     .fdin_nend:
(1) 1629/FFFFFFFFFFFF0EAA : 4E75                		rts
(1) 1630/FFFFFFFFFFFF0EAC :                     
(1) 1631/FFFFFFFFFFFF0EAC :                     ; --------------------------------------------------------
(1) 1632/FFFFFFFFFFFF0EAC :                     ; Video_WaitFade
(1) 1633/FFFFFFFFFFFF0EAC :                     ;
(1) 1634/FFFFFFFFFFFF0EAC :                     ; CPU-saving version of System_Render when
(1) 1635/FFFFFFFFFFFF0EAC :                     ; waiting for a fade-in/fade-out
(1) 1636/FFFFFFFFFFFF0EAC :                     ;
(1) 1637/FFFFFFFFFFFF0EAC :                     ; THIS IS REQUIRED FOR 32X as
(1) 1638/FFFFFFFFFFFF0EAC :                     ; fading all 32X's 256 colors is too heavy for the 68000.
(1) 1639/FFFFFFFFFFFF0EAC :                     ; --------------------------------------------------------
(1) 1640/FFFFFFFFFFFF0EAC :                     
(1) 1641/FFFFFFFFFFFF0EAC :                     Video_WaitFade:
(1) 1642/FFFFFFFFFFFF0EAC :                     .loop:
(1) 1643/FFFFFFFFFFFF0EAC : 6100 0FD2           		bsr	System_Render
(1) 1644/FFFFFFFFFFFF0EB0 : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1646/FFFFFFFFFFFF0EB4 : 4BF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a5
(1) 1648/FFFFFFFFFFFF0EB8 : 3E3C 0007           		move.w	#MAX_PALFDREQ-1,d7
(1) 1649/FFFFFFFFFFFF0EBC : 7C00                		moveq	#0,d6
(1) 1650/FFFFFFFFFFFF0EBE :                     .next_one:
(1) 1651/FFFFFFFFFFFF0EBE : 8C16                		or.b	palfd_req(a6),d6
(1) 1652/FFFFFFFFFFFF0EC0 : DCFC 0008           		adda	#palfd_len,a6
(1) 1654/FFFFFFFFFFFF0EC4 : 8C15                		or.b	palfd_req(a5),d6
(1) 1655/FFFFFFFFFFFF0EC6 : DAFC 0008           		adda	#palfd_len,a5
(1) 1657/FFFFFFFFFFFF0ECA : 51CF FFF2           		dbf	d7,.next_one
(1) 1658/FFFFFFFFFFFF0ECE : 4A06                		tst.b	d6
(1) 1659/FFFFFFFFFFFF0ED0 : 66DA                		bne.s	.loop
(1) 1660/FFFFFFFFFFFF0ED2 : 4E75                		rts
(1) 1661/FFFFFFFFFFFF0ED4 :                     
(1) 1662/FFFFFFFFFFFF0ED4 :                     ; --------------------------------------------------------
(1) 1663/FFFFFFFFFFFF0ED4 :                     ; Video_FadeIn_Full
(1) 1664/FFFFFFFFFFFF0ED4 :                     ;
(1) 1665/FFFFFFFFFFFF0ED4 :                     ; Overwrites first entry on each's PalFadeList
(1) 1666/FFFFFFFFFFFF0ED4 :                     ; --------------------------------------------------------
(1) 1667/FFFFFFFFFFFF0ED4 :                     
(1) 1668/FFFFFFFFFFFF0ED4 :                     Video_FadeIn_Full:
(1) 1670/FFFFFFFFFFFF0ED4 : 7002                		moveq	#2,d0
(1) 1671/FFFFFFFFFFFF0ED6 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1672/FFFFFFFFFFFF0EDC : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1673/FFFFFFFFFFFF0EE2 : 6134                		bsr	Video_MdMars_MakeFade
(1) 1675/FFFFFFFFFFFF0EE4 : 7002                		moveq	#2,d0
(1) 1676/FFFFFFFFFFFF0EE6 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1677/FFFFFFFFFFFF0EEC : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1678/FFFFFFFFFFFF0EF2 : 613C                		bsr	Video_MakeFade
(1) 1679/FFFFFFFFFFFF0EF4 : 60B6                		bra	Video_WaitFade
(1) 1680/FFFFFFFFFFFF0EF6 :                     
(1) 1681/FFFFFFFFFFFF0EF6 :                     ; --------------------------------------------------------
(1) 1682/FFFFFFFFFFFF0EF6 :                     ; Video_FadeIn_Full
(1) 1683/FFFFFFFFFFFF0EF6 :                     ;
(1) 1684/FFFFFFFFFFFF0EF6 :                     ; Overwrites first entry on each's PalFadeList
(1) 1685/FFFFFFFFFFFF0EF6 :                     ; --------------------------------------------------------
(1) 1686/FFFFFFFFFFFF0EF6 :                     
(1) 1687/FFFFFFFFFFFF0EF6 :                     Video_FadeOut_Full:
(1) 1689/FFFFFFFFFFFF0EF6 : 7001                		moveq	#1,d0
(1) 1690/FFFFFFFFFFFF0EF8 : 223C 0000 0100      		move.l	#splitw(0,256),d1
(1) 1691/FFFFFFFFFFFF0EFE : 243C 0000 0002      		move.l	#splitw(0,2),d2
(1) 1692/FFFFFFFFFFFF0F04 : 6112                		bsr	Video_MdMars_MakeFade
(1) 1694/FFFFFFFFFFFF0F06 : 7001                		moveq	#1,d0
(1) 1695/FFFFFFFFFFFF0F08 : 223C 0000 0040      		move.l	#splitw(0,64),d1
(1) 1696/FFFFFFFFFFFF0F0E : 243C 0000 0001      		move.l	#splitw(0,1),d2
(1) 1697/FFFFFFFFFFFF0F14 : 611A                		bsr	Video_MakeFade
(1) 1698/FFFFFFFFFFFF0F16 : 6094                		bra	Video_WaitFade
(1) 1699/FFFFFFFFFFFF0F18 :                     
(1) 1700/FFFFFFFFFFFF0F18 :                     ; ============================================================
(1) 1701/FFFFFFFFFFFF0F18 :                     ; --------------------------------------------------------
(1) 1702/FFFFFFFFFFFF0F18 :                     ; Subroutines
(1) 1703/FFFFFFFFFFFF0F18 :                     ; --------------------------------------------------------
(1) 1704/FFFFFFFFFFFF0F18 :                     
(1) 1705/FFFFFFFFFFFF0F18 :                     ; --------------------------------------------------------
(1) 1706/FFFFFFFFFFFF0F18 :                     ; Video_MakeFade, Video_MdMars_MakeFade
(1) 1707/FFFFFFFFFFFF0F18 :                     ;
(1) 1708/FFFFFFFFFFFF0F18 :                     ; Make palette Fading (or other) request, for
(1) 1709/FFFFFFFFFFFF0F18 :                     ; both VDP and SVDP
(1) 1710/FFFFFFFFFFFF0F18 :                     ;
(1) 1711/FFFFFFFFFFFF0F18 :                     ; Input:
(1) 1712/FFFFFFFFFFFF0F18 :                     ; d0.w | Task number:
(1) 1713/FFFFFFFFFFFF0F18 :                     ;        0 - Fade-out
(1) 1714/FFFFFFFFFFFF0F18 :                     ;        1 - Fade-in
(1) 1715/FFFFFFFFFFFF0F18 :                     ; d1.l | Start at/Number of colors: splitw(start,num)
(1) 1716/FFFFFFFFFFFF0F18 :                     ; d2.l | Delay/Increment: splitw(delay,incr)
(1) 1717/FFFFFFFFFFFF0F18 :                     ; --------------------------------------------------------
(1) 1718/FFFFFFFFFFFF0F18 :                     
(1) 1719/FFFFFFFFFFFF0F18 :                     Video_MdMars_MakeFade:
(1) 1721/FFFFFFFFFFFF0F18 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1722/FFFFFFFFFFFF0F1C : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 1723/FFFFFFFFFFFF0F20 : 3E38 CC1E           		move.w	(RAM_MdMars_IndxPalFd).w,d7
(1) 1724/FFFFFFFFFFFF0F24 : 5278 CC1E           		addq.w	#1,(RAM_MdMars_IndxPalFd).w
(1) 1725/FFFFFFFFFFFF0F28 : 611E                		bsr	vidMkFade_Go
(1) 1726/FFFFFFFFFFFF0F2A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1728/FFFFFFFFFFFF0F2E : 4E75                		rts
(1) 1729/FFFFFFFFFFFF0F30 :                     Video_MakeFade:
(1) 1730/FFFFFFFFFFFF0F30 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 1731/FFFFFFFFFFFF0F34 : 4DF8 D880           		lea	(RAM_PalFadeList).w,a6
(1) 1732/FFFFFFFFFFFF0F38 : 3E38 E860           		move.w	(RAM_IndxPalFade).w,d7
(1) 1733/FFFFFFFFFFFF0F3C : 5278 E860           		addq.w	#1,(RAM_IndxPalFade).w
(1) 1734/FFFFFFFFFFFF0F40 : 6106                		bsr	vidMkFade_Go
(1) 1735/FFFFFFFFFFFF0F42 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 1736/FFFFFFFFFFFF0F46 : 4E75                		rts
(1) 1737/FFFFFFFFFFFF0F48 :                     vidMkFade_Go:
(1) 1738/FFFFFFFFFFFF0F48 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 1739/FFFFFFFFFFFF0F4E : E74F                		lsl.w	#3,d7			; index * 8
(1) 1740/FFFFFFFFFFFF0F50 : DCC7                		adda	d7,a6
(1) 1741/FFFFFFFFFFFF0F52 : 2E01                		move.l	d1,d7
(1) 1742/FFFFFFFFFFFF0F54 : 2C02                		move.l	d2,d6
(1) 1743/FFFFFFFFFFFF0F56 : 1C80                		move.b	d0,palfd_req(a6)
(1) 1744/FFFFFFFFFFFF0F58 : 3D47 0006           		move.w	d7,palfd_num(a6)
(1) 1745/FFFFFFFFFFFF0F5C : 1D46 0003           		move.b	d6,palfd_incr(a6)
(1) 1746/FFFFFFFFFFFF0F60 : 4846                		swap	d6
(1) 1747/FFFFFFFFFFFF0F62 : 4847                		swap	d7
(1) 1748/FFFFFFFFFFFF0F64 : 1D47 0002           		move.b	d7,palfd_start(a6)
(1) 1749/FFFFFFFFFFFF0F68 : 1D46 0001           		move.b	d6,palfd_delay(a6)
(1) 1750/FFFFFFFFFFFF0F6C : 4E75                		rts
(1) 1751/FFFFFFFFFFFF0F6E :                     
(1) 1752/FFFFFFFFFFFF0F6E :                     ; --------------------------------------------------------
(1) 1753/FFFFFFFFFFFF0F6E :                     ; Video_LoadPal, Video_FadePal
(1) 1754/FFFFFFFFFFFF0F6E :                     ;
(1) 1755/FFFFFFFFFFFF0F6E :                     ; Load VDP palette data, either current or for fading.
(1) 1756/FFFFFFFFFFFF0F6E :                     ;
(1) 1757/FFFFFFFFFFFF0F6E :                     ; Input:
(1) 1758/FFFFFFFFFFFF0F6E :                     ; a0   | Palette data
(1) 1759/FFFFFFFFFFFF0F6E :                     ; d0.w | Starting color index
(1) 1760/FFFFFFFFFFFF0F6E :                     ; d1.w | Number of colors
(1) 1761/FFFFFFFFFFFF0F6E :                     ; --------------------------------------------------------
(1) 1762/FFFFFFFFFFFF0F6E :                     
(1) 1763/FFFFFFFFFFFF0F6E :                     Video_FadePal:
(1) 1764/FFFFFFFFFFFF0F6E : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1765/FFFFFFFFFFFF0F72 : 4DF8 E650           		lea	(RAM_PaletteFade).w,a6
(1) 1766/FFFFFFFFFFFF0F76 : 6008                		bra.s	vidMd_Pal
(1) 1767/FFFFFFFFFFFF0F78 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1768/FFFFFFFFFFFF0F78 :                     ; 		rts
(1) 1769/FFFFFFFFFFFF0F78 :                     Video_LoadPal:
(1) 1770/FFFFFFFFFFFF0F78 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1771/FFFFFFFFFFFF0F7C : 4DF8 E5D0           		lea	(RAM_Palette).w,a6
(1) 1772/FFFFFFFFFFFF0F80 :                     ; 		bsr.s	vidMd_Pal
(1) 1773/FFFFFFFFFFFF0F80 :                     ; 		movem.l	(sp)+,d6-d7/a5-a6
(1) 1774/FFFFFFFFFFFF0F80 :                     ; 		rts
(1) 1775/FFFFFFFFFFFF0F80 :                     
(1) 1776/FFFFFFFFFFFF0F80 :                     ; --------------------------------------------------------
(1) 1777/FFFFFFFFFFFF0F80 :                     vidMd_Pal:
(1) 1778/FFFFFFFFFFFF0F80 : 2A48                		move.l	a0,a5
(1) 1779/FFFFFFFFFFFF0F82 : 7E00                		moveq	#0,d7
(1) 1780/FFFFFFFFFFFF0F84 : 3E00                		move.w	d0,d7
(1) 1781/FFFFFFFFFFFF0F86 : DE47                		add.w	d7,d7
(1) 1782/FFFFFFFFFFFF0F88 : DCC7                		adda	d7,a6
(1) 1783/FFFFFFFFFFFF0F8A : 3E01                		move.w	d1,d7
(1) 1784/FFFFFFFFFFFF0F8C : 5347                		subq.w	#1,d7
(1) 1785/FFFFFFFFFFFF0F8E : 6B0E                		bmi.s	.bad
(1) 1786/FFFFFFFFFFFF0F90 : 3C02                		move.w	d2,d6
(1) 1787/FFFFFFFFFFFF0F92 : 0246 0001           		andi.w	#1,d6
(1) 1788/FFFFFFFFFFFF0F96 : E25E                		ror.w	#1,d6
(1) 1789/FFFFFFFFFFFF0F98 :                     .loop:
(1) 1790/FFFFFFFFFFFF0F98 : 3CDD                		move.w	(a5)+,(a6)+
(1) 1791/FFFFFFFFFFFF0F9A : 51CF FFFC           		dbf	d7,.loop
(1) 1792/FFFFFFFFFFFF0F9E :                     .bad:
(1) 1793/FFFFFFFFFFFF0F9E : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1794/FFFFFFFFFFFF0FA2 : 4E75                		rts
(1) 1795/FFFFFFFFFFFF0FA4 :                     
(1) 1796/FFFFFFFFFFFF0FA4 :                     ; --------------------------------------------------------
(1) 1797/FFFFFFFFFFFF0FA4 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 1798/FFFFFFFFFFFF0FA4 :                     ;
(1) 1799/FFFFFFFFFFFF0FA4 :                     ; Loads palettes on bulk with a list
(1) 1800/FFFFFFFFFFFF0FA4 :                     ;
(1) 1801/FFFFFFFFFFFF0FA4 :                     ; Input:
(1) 1802/FFFFFFFFFFFF0FA4 :                     ; a0 | List of graphics to load:
(1) 1803/FFFFFFFFFFFF0FA4 :                     ;        dc.w numof_entries
(1) 1804/FFFFFFFFFFFF0FA4 :                     ;        dc.l palette_data
(1) 1805/FFFFFFFFFFFF0FA4 :                     ;        dc.w start_at
(1) 1806/FFFFFFFFFFFF0FA4 :                     ;        dc.w numof_colors
(1) 1807/FFFFFFFFFFFF0FA4 :                     ;        ; ...more entries
(1) 1808/FFFFFFFFFFFF0FA4 :                     ; --------------------------------------------------------
(1) 1809/FFFFFFFFFFFF0FA4 :                     
(1) 1810/FFFFFFFFFFFF0FA4 :                     Video_LoadPal_List:
(1) 1811/FFFFFFFFFFFF0FA4 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1812/FFFFFFFFFFFF0FA8 : 2A48                		move.l	a0,a5
(1) 1813/FFFFFFFFFFFF0FAA : 3E1D                		move.w	(a5)+,d7
(1) 1814/FFFFFFFFFFFF0FAC : 6710                		beq.s	.invalid
(1) 1815/FFFFFFFFFFFF0FAE : 6B0E                		bmi.s	.invalid
(1) 1816/FFFFFFFFFFFF0FB0 : 5347                		subq.w	#1,d7
(1) 1817/FFFFFFFFFFFF0FB2 :                     .next_one:
(1) 1818/FFFFFFFFFFFF0FB2 : 205D                		move.l	(a5)+,a0
(1) 1819/FFFFFFFFFFFF0FB4 : 301D                		move.w	(a5)+,d0
(1) 1820/FFFFFFFFFFFF0FB6 : 321D                		move.w	(a5)+,d1
(1) 1821/FFFFFFFFFFFF0FB8 : 61BE                		bsr	Video_LoadPal
(1) 1822/FFFFFFFFFFFF0FBA : 51CF FFF6           		dbf	d7,.next_one
(1) 1823/FFFFFFFFFFFF0FBE :                     .invalid:
(1) 1824/FFFFFFFFFFFF0FBE : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1825/FFFFFFFFFFFF0FC2 : 4E75                		rts
(1) 1826/FFFFFFFFFFFF0FC4 :                     
(1) 1827/FFFFFFFFFFFF0FC4 :                     Video_FadePal_List:
(1) 1828/FFFFFFFFFFFF0FC4 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 1829/FFFFFFFFFFFF0FC8 : 2A48                		move.l	a0,a5
(1) 1830/FFFFFFFFFFFF0FCA : 3E1D                		move.w	(a5)+,d7
(1) 1831/FFFFFFFFFFFF0FCC : 6710                		beq.s	.invalid
(1) 1832/FFFFFFFFFFFF0FCE : 6B0E                		bmi.s	.invalid
(1) 1833/FFFFFFFFFFFF0FD0 : 5347                		subq.w	#1,d7
(1) 1834/FFFFFFFFFFFF0FD2 :                     .next_one:
(1) 1835/FFFFFFFFFFFF0FD2 : 205D                		move.l	(a5)+,a0
(1) 1836/FFFFFFFFFFFF0FD4 : 301D                		move.w	(a5)+,d0
(1) 1837/FFFFFFFFFFFF0FD6 : 321D                		move.w	(a5)+,d1
(1) 1838/FFFFFFFFFFFF0FD8 : 6194                		bsr	Video_FadePal
(1) 1839/FFFFFFFFFFFF0FDA : 51CF FFF6           		dbf	d7,.next_one
(1) 1840/FFFFFFFFFFFF0FDE :                     .invalid:
(1) 1841/FFFFFFFFFFFF0FDE : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 1842/FFFFFFFFFFFF0FE2 : 4E75                		rts
(1) 1843/FFFFFFFFFFFF0FE4 :                     
(1) 1844/FFFFFFFFFFFF0FE4 :                     ; ====================================================================
(1) 1845/FFFFFFFFFFFF0FE4 :                     ; ----------------------------------------------------------------
(1) 1846/FFFFFFFFFFFF0FE4 :                     ; Text PRINT system.
(1) 1847/FFFFFFFFFFFF0FE4 :                     ; ----------------------------------------------------------------
(1) 1848/FFFFFFFFFFFF0FE4 :                     
(1) 1849/FFFFFFFFFFFF0FE4 :                     ; --------------------------------------------------------
(1) 1850/FFFFFFFFFFFF0FE4 :                     ; Video_PrintInit, Video_PrintInitW
(1) 1851/FFFFFFFFFFFF0FE4 :                     ;
(1) 1852/FFFFFFFFFFFF0FE4 :                     ; Initializes the default Graphics and Palette
(1) 1853/FFFFFFFFFFFF0FE4 :                     ; for the font.
(1) 1854/FFFFFFFFFFFF0FE4 :                     ;
(1) 1855/FFFFFFFFFFFF0FE4 :                     ; Input:
(1) 1856/FFFFFFFFFFFF0FE4 :                     ; d0.l | Graphics data
(1) 1857/FFFFFFFFFFFF0FE4 :                     ;        $20 (" ") to $7F ("[DEL]")
(1) 1858/FFFFFFFFFFFF0FE4 :                     ;        * Default labels:
(1) 1859/FFFFFFFFFFFF0FE4 :                     ;        ASCII_FONT   for 8x8
(1) 1860/FFFFFFFFFFFF0FE4 :                     ;        ASCII_FONT_W for 8x16
(1) 1861/FFFFFFFFFFFF0FE4 :                     ;
(1) 1862/FFFFFFFFFFFF0FE4 :                     ; d1.w | VRAM output location to load and use
(1) 1863/FFFFFFFFFFFF0FE4 :                     ;        the ASCII text including attribute
(1) 1864/FFFFFFFFFFFF0FE4 :                     ;        settings (Palette and Priority)
(1) 1865/FFFFFFFFFFFF0FE4 :                     ;        * Defualt values:
(1) 1866/FFFFFFFFFFFF0FE4 :                     ;        DEF_PrintVram  for 8x8
(1) 1867/FFFFFFFFFFFF0FE4 :                     ;        DEF_PrintVramW for 8x16
(1) 1868/FFFFFFFFFFFF0FE4 :                     ;
(1) 1869/FFFFFFFFFFFF0FE4 :                     ; Breaks:
(1) 1870/FFFFFFFFFFFF0FE4 :                     ; d0-d3
(1) 1871/FFFFFFFFFFFF0FE4 :                     ;
(1) 1872/FFFFFFFFFFFF0FE4 :                     ; Notes:
(1) 1873/FFFFFFFFFFFF0FE4 :                     ; - Only call this when the VDP DISPLAY is OFF
(1) 1874/FFFFFFFFFFFF0FE4 :                     ; - Write your palette manually after this
(1) 1875/FFFFFFFFFFFF0FE4 :                     ; --------------------------------------------------------
(1) 1876/FFFFFFFFFFFF0FE4 :                     
(1) 1877/FFFFFFFFFFFF0FE4 :                     Video_PrintInitW:
(1) 1878/FFFFFFFFFFFF0FE4 : 343C 1800           		move.w	#($60*$20)*2,d2			; Graphics data from " " to "[DEL]"
(1) 1879/FFFFFFFFFFFF0FE8 : 6004                		bra.s	vidPrint_Init
(1) 1880/FFFFFFFFFFFF0FEA :                     Video_PrintInit:
(1) 1881/FFFFFFFFFFFF0FEA : 343C 0C00           		move.w	#($60*$20),d2			; Graphics data from " " to "[DEL]"
(1) 1882/FFFFFFFFFFFF0FEE :                     vidPrint_Init:
(1) 1883/FFFFFFFFFFFF0FEE : EB49                		lsl.w	#5,d1				; VRAM location to real position
(1) 1884/FFFFFFFFFFFF0FF0 : 6000 F8B4           		bra	Video_LoadArt
(1) 1885/FFFFFFFFFFFF0FF4 :                     
(1) 1886/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1) 1887/FFFFFFFFFFFF0FF4 :                     ; Video_PrintDefPal, Video_PrintDefPal_Fade
(1) 1888/FFFFFFFFFFFF0FF4 :                     ;
(1) 1889/FFFFFFFFFFFF0FF4 :                     ; Loads default palette for the font
(1) 1890/FFFFFFFFFFFF0FF4 :                     ; --------------------------------------------------------
(1) 1891/FFFFFFFFFFFF0FF4 :                     
(1) 1892/FFFFFFFFFFFF0FF4 :                     Video_PrintDefPal_Fade:
(1) 1893/FFFFFFFFFFFF0FF4 : 2F0E                		move.l	a6,-(sp)
(1) 1894/FFFFFFFFFFFF0FF6 : 4DF8 E6B0           		lea	(RAM_PaletteFade+$60).w,a6		; Palette line 4:
(1) 1895/FFFFFFFFFFFF0FFA : 6006                		bra.s	vid_FontDefPal
(1) 1896/FFFFFFFFFFFF0FFC :                     Video_PrintDefPal:
(1) 1897/FFFFFFFFFFFF0FFC : 2F0E                		move.l	a6,-(sp)
(1) 1898/FFFFFFFFFFFF0FFE : 4DF8 E630           		lea	(RAM_Palette+$60).w,a6			; Palette line 4
(1) 1899/FFFFFFFFFFFF1002 :                     vid_FontDefPal:
(1) 1900/FFFFFFFFFFFF1002 : 3CFC 0000           		move.w	#$0000,(a6)+				; black (background)
(1) 1901/FFFFFFFFFFFF1006 : 3CFC 0EEE           		move.w	#$0EEE,(a6)+				; white
(1) 1902/FFFFFFFFFFFF100A : 3CFC 0888           		move.w	#$0888,(a6)+				; gray
(1) 1903/FFFFFFFFFFFF100E : 2C5F                		move.l	(sp)+,a6
(1) 1904/FFFFFFFFFFFF1010 : 4E75                		rts
(1) 1905/FFFFFFFFFFFF1012 :                     
(1) 1906/FFFFFFFFFFFF1012 :                     ; --------------------------------------------------------
(1) 1907/FFFFFFFFFFFF1012 :                     ; Video_Print, Video_PrintW
(1) 1908/FFFFFFFFFFFF1012 :                     ;
(1) 1909/FFFFFFFFFFFF1012 :                     ; Prints a text string, VDP side.
(1) 1910/FFFFFFFFFFFF1012 :                     ;
(1) 1911/FFFFFFFFFFFF1012 :                     ; Input:
(1) 1912/FFFFFFFFFFFF1012 :                     ; a0   | String data
(1) 1913/FFFFFFFFFFFF1012 :                     ; d0.w | X position
(1) 1914/FFFFFFFFFFFF1012 :                     ; d1.w | Y position
(1) 1915/FFFFFFFFFFFF1012 :                     ; d2.w | Font VRAM location
(1) 1916/FFFFFFFFFFFF1012 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 1917/FFFFFFFFFFFF1012 :                     ;        splitw(width,vram_out)
(1) 1918/FFFFFFFFFFFF1012 :                     ;
(1) 1919/FFFFFFFFFFFF1012 :                     ; * Font VRAM location
(1) 1920/FFFFFFFFFFFF1012 :                     ; Default 8x8:  DEF_PrintVram
(1) 1921/FFFFFFFFFFFF1012 :                     ; Default 8x16: DEF_PrintVramW
(1) 1922/FFFFFFFFFFFF1012 :                     ;
(1) 1923/FFFFFFFFFFFF1012 :                     ; * Screen VRAM
(1) 1924/FFFFFFFFFFFF1012 :                     ; Foreground: DEF_VRAM_FG
(1) 1925/FFFFFFFFFFFF1012 :                     ; Background: DEF_VRAM_BG
(1) 1926/FFFFFFFFFFFF1012 :                     ; Window:     DEF_VRAM_WD
(1) 1927/FFFFFFFFFFFF1012 :                     ;
(1) 1928/FFFFFFFFFFFF1012 :                     ; * Screen Width
(1) 1929/FFFFFFFFFFFF1012 :                     ; $040 (DEF_HSIZE_32)
(1) 1930/FFFFFFFFFFFF1012 :                     ; $080 (DEF_HSIZE_64)
(1) 1931/FFFFFFFFFFFF1012 :                     ; $100 (DEF_HSIZE_128)
(1) 1932/FFFFFFFFFFFF1012 :                     ;
(1) 1933/FFFFFFFFFFFF1012 :                     ; Notes:
(1) 1934/FFFFFFFFFFFF1012 :                     ; - Initialize your graphics and VRAM location
(1) 1935/FFFFFFFFFFFF1012 :                     ;   with Video_PrintInit
(1) 1936/FFFFFFFFFFFF1012 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 1937/FFFFFFFFFFFF1012 :                     ;   mode.
(1) 1938/FFFFFFFFFFFF1012 :                     ; --------------------------------------------------------
(1) 1939/FFFFFFFFFFFF1012 :                     
(1) 1940/FFFFFFFFFFFF1012 :                     ; dc.l pstr(type,ram_location)
(1) 1941/FFFFFFFFFFFF1012 :                     ;
(1) 1942/FFFFFFFFFFFF1012 :                     ; type:
(1) 1943/FFFFFFFFFFFF1012 :                     ; 0 - Byte
(1) 1944/FFFFFFFFFFFF1012 :                     ; 1 - Word
(1) 1945/FFFFFFFFFFFF1012 :                     ; 2 - 24-bit
(1) 1946/FFFFFFFFFFFF1012 :                     ; 3 - Long
(1) 1947/FFFFFFFFFFFF1012 :                     
(1) 1948/FFFFFFFFFFFF1012 :                     Video_Print:
(1) 1949/FFFFFFFFFFFF1012 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 1950/FFFFFFFFFFFF1016 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 1951/FFFFFFFFFFFF101C : 3E03                		move.w	d3,d7
(1) 1952/FFFFFFFFFFFF101E : 3A00                		move.w	d0,d5
(1) 1953/FFFFFFFFFFFF1020 : DA45                		add.w	d5,d5
(1) 1954/FFFFFFFFFFFF1022 : 3801                		move.w	d1,d4
(1) 1955/FFFFFFFFFFFF1024 : 4843                		swap	d3
(1) 1956/FFFFFFFFFFFF1026 : C8C3                		mulu.w	d3,d4
(1) 1957/FFFFFFFFFFFF1028 : DA44                		add.w	d4,d5
(1) 1958/FFFFFFFFFFFF102A : DE45                		add.w	d5,d7
(1) 1959/FFFFFFFFFFFF102C : 3C03                		move.w	d3,d6
(1) 1960/FFFFFFFFFFFF102E : 4843                		swap	d3
(1) 1961/FFFFFFFFFFFF1030 : 7A00                		moveq	#0,d5
(1) 1962/FFFFFFFFFFFF1032 : 3A07                		move.w	d7,d5
(1) 1963/FFFFFFFFFFFF1034 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 1964/FFFFFFFFFFFF1038 : 8E7C 4000           		or.w	#$4000,d7
(1) 1965/FFFFFFFFFFFF103C : E55D                		rol.w	#2,d5
(1) 1966/FFFFFFFFFFFF103E : 0245 0003           		andi.w	#%11,d5
(1) 1967/FFFFFFFFFFFF1042 : 4845                		swap	d5
(1) 1968/FFFFFFFFFFFF1044 : 2A48                		move.l	a0,a5
(1) 1969/FFFFFFFFFFFF1046 :                     .loop:
(1) 1970/FFFFFFFFFFFF1046 : 3806                		move.w	d6,d4
(1) 1971/FFFFFFFFFFFF1048 : 5344                		subq.w	#1,d4
(1) 1972/FFFFFFFFFFFF104A : CA44                		and.w	d4,d5
(1) 1973/FFFFFFFFFFFF104C :                     
(1) 1974/FFFFFFFFFFFF104C : 3807                		move.w	d7,d4
(1) 1975/FFFFFFFFFFFF104E : D845                		add.w	d5,d4
(1) 1976/FFFFFFFFFFFF1050 : 4845                		swap	d5
(1) 1977/FFFFFFFFFFFF1052 : 3D44 0004           		move.w	d4,4(a6)
(1) 1978/FFFFFFFFFFFF1056 : 3D45 0004           		move.w	d5,4(a6)
(1) 1979/FFFFFFFFFFFF105A : 4845                		swap	d5
(1) 1980/FFFFFFFFFFFF105C :                     .q_loop:
(1) 1981/FFFFFFFFFFFF105C : 181D                		move.b	(a5)+,d4
(1) 1982/FFFFFFFFFFFF105E : 671E                		beq.s	.exit
(1) 1983/FFFFFFFFFFFF1060 : 6B22                		bmi.s	.special
(1) 1984/FFFFFFFFFFFF1062 : 0C04 000A           		cmpi.b	#$0A,d4
(1) 1985/FFFFFFFFFFFF1066 : 6710                		beq.s	.next
(1) 1986/FFFFFFFFFFFF1068 :                     ; ------------------------------------------------
(1) 1987/FFFFFFFFFFFF1068 :                     ; Normal text
(1) 1988/FFFFFFFFFFFF1068 : 0244 00FF           		andi.w	#$FF,d4
(1) 1989/FFFFFFFFFFFF106C :                     ; 		add.w	(RAM_SetPrntVram).w,d4
(1) 1990/FFFFFFFFFFFF106C : D842                		add.w	d2,d4
(1) 1991/FFFFFFFFFFFF106E : 0444 0020           		subi.w	#$20,d4
(1) 1992/FFFFFFFFFFFF1072 : 3C84                		move.w	d4,(a6)
(1) 1993/FFFFFFFFFFFF1074 : 5445                		addq.w	#2,d5
(1) 1994/FFFFFFFFFFFF1076 : 60E4                		bra.s	.q_loop
(1) 1995/FFFFFFFFFFFF1078 :                     .next:
(1) 1996/FFFFFFFFFFFF1078 : 4245                		clr.w	d5
(1) 1997/FFFFFFFFFFFF107A : DE46                		add.w	d6,d7			; Next line
(1) 1998/FFFFFFFFFFFF107C : 60C8                		bra.s	.loop
(1) 1999/FFFFFFFFFFFF107E :                     .exit:
(1) 2000/FFFFFFFFFFFF107E : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 2001/FFFFFFFFFFFF1082 : 4E75                		rts
(1) 2002/FFFFFFFFFFFF1084 :                     ; ------------------------------------------------
(1) 2003/FFFFFFFFFFFF1084 :                     ; Show value
(1) 2004/FFFFFFFFFFFF1084 :                     ; d4 - $80|flags
(1) 2005/FFFFFFFFFFFF1084 :                     .special:
(1) 2006/FFFFFFFFFFFF1084 : 4846                		swap	d6
(1) 2007/FFFFFFFFFFFF1086 : 1C04                		move.b	d4,d6
(1) 2008/FFFFFFFFFFFF1088 : E19C                		rol.l	#8,d4
(1) 2009/FFFFFFFFFFFF108A : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2010/FFFFFFFFFFFF108C : E19C                		rol.l	#8,d4
(1) 2011/FFFFFFFFFFFF108E : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2012/FFFFFFFFFFFF1090 : E19C                		rol.l	#8,d4
(1) 2013/FFFFFFFFFFFF1092 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2014/FFFFFFFFFFFF1094 : 2844                		move.l	d4,a4
(1) 2015/FFFFFFFFFFFF1096 : 6100 01B6           		bsr	vid_PrintTVal
(1) 2016/FFFFFFFFFFFF109A : 60AA                		bra	.loop
(1) 2017/FFFFFFFFFFFF109C :                     
(1) 2018/FFFFFFFFFFFF109C :                     ; --------------------------------------------------------
(1) 2019/FFFFFFFFFFFF109C :                     ; 8x16 version
(1) 2020/FFFFFFFFFFFF109C :                     ; --------------------------------------------------------
(1) 2021/FFFFFFFFFFFF109C :                     
(1) 2022/FFFFFFFFFFFF109C :                     Video_PrintW:
(1) 2023/FFFFFFFFFFFF109C : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2024/FFFFFFFFFFFF10A0 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2025/FFFFFFFFFFFF10A6 :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2026/FFFFFFFFFFFF10A6 : 3C02                		move.w	d2,d6
(1) 2027/FFFFFFFFFFFF10A8 : 0446 0040           		subi.w	#$20*2,d6
(1) 2028/FFFFFFFFFFFF10AC : 3A38 E876           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2029/FFFFFFFFFFFF10B0 : 0805 0002           		btst	#2,d5
(1) 2030/FFFFFFFFFFFF10B4 : 670E                		beq.s	.no_dble_y
(1) 2031/FFFFFFFFFFFF10B6 : 3E06                		move.w	d6,d7
(1) 2032/FFFFFFFFFFFF10B8 : 0247 F800           		andi.w	#$F800,d7
(1) 2033/FFFFFFFFFFFF10BC : 0246 07FF           		andi.w	#$7FF,d6
(1) 2034/FFFFFFFFFFFF10C0 : E24E                		lsr.w	#1,d6
(1) 2035/FFFFFFFFFFFF10C2 : 8C47                		or.w	d7,d6
(1) 2036/FFFFFFFFFFFF10C4 :                     .no_dble_y:
(1) 2037/FFFFFFFFFFFF10C4 : 4846                		swap	d6
(1) 2038/FFFFFFFFFFFF10C6 : 3E03                		move.w	d3,d7
(1) 2039/FFFFFFFFFFFF10C8 : 3A00                		move.w	d0,d5
(1) 2040/FFFFFFFFFFFF10CA : DA45                		add.w	d5,d5
(1) 2041/FFFFFFFFFFFF10CC : 3801                		move.w	d1,d4
(1) 2042/FFFFFFFFFFFF10CE : 4843                		swap	d3
(1) 2043/FFFFFFFFFFFF10D0 : C8C3                		mulu.w	d3,d4
(1) 2044/FFFFFFFFFFFF10D2 : DA44                		add.w	d4,d5
(1) 2045/FFFFFFFFFFFF10D4 : DE45                		add.w	d5,d7
(1) 2046/FFFFFFFFFFFF10D6 : 3C03                		move.w	d3,d6
(1) 2047/FFFFFFFFFFFF10D8 : 4843                		swap	d3
(1) 2048/FFFFFFFFFFFF10DA :                     
(1) 2049/FFFFFFFFFFFF10DA : 7A00                		moveq	#0,d5
(1) 2050/FFFFFFFFFFFF10DC : 3A07                		move.w	d7,d5
(1) 2051/FFFFFFFFFFFF10DE : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2052/FFFFFFFFFFFF10E2 : 8E7C 4000           		or.w	#$4000,d7
(1) 2053/FFFFFFFFFFFF10E6 : E55D                		rol.w	#2,d5
(1) 2054/FFFFFFFFFFFF10E8 : 0245 0003           		andi.w	#%11,d5
(1) 2055/FFFFFFFFFFFF10EC : 4845                		swap	d5
(1) 2056/FFFFFFFFFFFF10EE : 2A48                		move.l	a0,a5
(1) 2057/FFFFFFFFFFFF10F0 :                     	; d7 -      TEMP       | VDP write left
(1) 2058/FFFFFFFFFFFF10F0 :                     	; d6 -      TEMP       | Y next-line size
(1) 2059/FFFFFFFFFFFF10F0 :                     	; d5 - VDP write right | X current pos
(1) 2060/FFFFFFFFFFFF10F0 :                     	; d4 -                 | TEMP
(1) 2061/FFFFFFFFFFFF10F0 :                     .loop:
(1) 2062/FFFFFFFFFFFF10F0 : 3806                		move.w	d6,d4
(1) 2063/FFFFFFFFFFFF10F2 : 5344                		subq.w	#1,d4
(1) 2064/FFFFFFFFFFFF10F4 : CA44                		and.w	d4,d5
(1) 2065/FFFFFFFFFFFF10F6 : 181D                		move.b	(a5)+,d4
(1) 2066/FFFFFFFFFFFF10F8 : 6776                		beq.s	.exit
(1) 2067/FFFFFFFFFFFF10FA : 6B7A                		bmi.s	.special
(1) 2068/FFFFFFFFFFFF10FC : 0C04 000A           		cmpi.b	#$0A,d4
(1) 2069/FFFFFFFFFFFF1100 : 6766                		beq.s	.next
(1) 2070/FFFFFFFFFFFF1102 :                     ; ------------------------------------------------
(1) 2071/FFFFFFFFFFFF1102 :                     ; Normal text
(1) 2072/FFFFFFFFFFFF1102 : 0244 00FF           		andi.w	#$FF,d4
(1) 2073/FFFFFFFFFFFF1106 : 4847                		swap	d7
(1) 2074/FFFFFFFFFFFF1108 : 3E38 E876           		move.w	(RAM_VdpRegSetC).w,d7
(1) 2075/FFFFFFFFFFFF110C : 0807 0002           		btst	#2,d7
(1) 2076/FFFFFFFFFFFF1110 : 671E                		beq.s	.ver_normal
(1) 2077/FFFFFFFFFFFF1112 : 4846                		swap	d6
(1) 2078/FFFFFFFFFFFF1114 : D846                		add.w	d6,d4
(1) 2079/FFFFFFFFFFFF1116 : 4846                		swap	d6
(1) 2080/FFFFFFFFFFFF1118 : 4844                		swap	d4
(1) 2081/FFFFFFFFFFFF111A : 4847                		swap	d7
(1) 2082/FFFFFFFFFFFF111C : 3807                		move.w	d7,d4
(1) 2083/FFFFFFFFFFFF111E : D845                		add.w	d5,d4
(1) 2084/FFFFFFFFFFFF1120 : 4845                		swap	d5
(1) 2085/FFFFFFFFFFFF1122 : 3D44 0004           		move.w	d4,4(a6)
(1) 2086/FFFFFFFFFFFF1126 : 3D45 0004           		move.w	d5,4(a6)
(1) 2087/FFFFFFFFFFFF112A : 4844                		swap	d4
(1) 2088/FFFFFFFFFFFF112C : 3C84                		move.w	d4,(a6)
(1) 2089/FFFFFFFFFFFF112E : 6032                		bra.s	.ver_cont
(1) 2090/FFFFFFFFFFFF1130 :                     .ver_normal:
(1) 2091/FFFFFFFFFFFF1130 : D844                		add.w	d4,d4
(1) 2092/FFFFFFFFFFFF1132 : 4846                		swap	d6
(1) 2093/FFFFFFFFFFFF1134 : D846                		add.w	d6,d4
(1) 2094/FFFFFFFFFFFF1136 : 4846                		swap	d6
(1) 2095/FFFFFFFFFFFF1138 : 4844                		swap	d4
(1) 2096/FFFFFFFFFFFF113A : 4847                		swap	d7
(1) 2097/FFFFFFFFFFFF113C : 3807                		move.w	d7,d4
(1) 2098/FFFFFFFFFFFF113E : D845                		add.w	d5,d4
(1) 2099/FFFFFFFFFFFF1140 : 4845                		swap	d5
(1) 2100/FFFFFFFFFFFF1142 : 3D44 0004           		move.w	d4,4(a6)
(1) 2101/FFFFFFFFFFFF1146 : 3D45 0004           		move.w	d5,4(a6)
(1) 2102/FFFFFFFFFFFF114A : 4844                		swap	d4
(1) 2103/FFFFFFFFFFFF114C : 3C84                		move.w	d4,(a6)
(1) 2104/FFFFFFFFFFFF114E : 5244                		addq.w	#1,d4
(1) 2105/FFFFFFFFFFFF1150 : 4844                		swap	d4
(1) 2106/FFFFFFFFFFFF1152 : D846                		add.w	d6,d4
(1) 2107/FFFFFFFFFFFF1154 : 3D44 0004           		move.w	d4,4(a6)
(1) 2108/FFFFFFFFFFFF1158 : 3D45 0004           		move.w	d5,4(a6)
(1) 2109/FFFFFFFFFFFF115C : 4844                		swap	d4
(1) 2110/FFFFFFFFFFFF115E : 3C84                		move.w	d4,(a6)
(1) 2111/FFFFFFFFFFFF1160 : 4844                		swap	d4
(1) 2112/FFFFFFFFFFFF1162 :                     
(1) 2113/FFFFFFFFFFFF1162 :                     .ver_cont:
(1) 2114/FFFFFFFFFFFF1162 : 4845                		swap	d5
(1) 2115/FFFFFFFFFFFF1164 : 5445                		addq.w	#2,d5		; Next VDP X pos
(1) 2116/FFFFFFFFFFFF1166 : 6088                		bra.s	.loop
(1) 2117/FFFFFFFFFFFF1168 :                     .next:
(1) 2118/FFFFFFFFFFFF1168 : 4245                		clr.w	d5		; Clear X pos
(1) 2119/FFFFFFFFFFFF116A : DE46                		add.w	d6,d7		; Next Y line
(1) 2120/FFFFFFFFFFFF116C : DE46                		add.w	d6,d7		; twice
(1) 2121/FFFFFFFFFFFF116E : 6080                		bra	.loop
(1) 2122/FFFFFFFFFFFF1170 :                     .exit:
(1) 2123/FFFFFFFFFFFF1170 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2124/FFFFFFFFFFFF1174 : 4E75                		rts
(1) 2125/FFFFFFFFFFFF1176 :                     ; ------------------------------------------------
(1) 2126/FFFFFFFFFFFF1176 :                     ; Show value
(1) 2127/FFFFFFFFFFFF1176 :                     ; d4 - $80|flags
(1) 2128/FFFFFFFFFFFF1176 :                     .special:
(1) 2129/FFFFFFFFFFFF1176 : 2646                		move.l	d6,a3
(1) 2130/FFFFFFFFFFFF1178 : 1C04                		move.b	d4,d6
(1) 2131/FFFFFFFFFFFF117A : E19C                		rol.l	#8,d4
(1) 2132/FFFFFFFFFFFF117C : 181D                		move.b	(a5)+,d4	; $00xx0000
(1) 2133/FFFFFFFFFFFF117E : E19C                		rol.l	#8,d4
(1) 2134/FFFFFFFFFFFF1180 : 181D                		move.b	(a5)+,d4	; $0000xx00
(1) 2135/FFFFFFFFFFFF1182 : E19C                		rol.l	#8,d4
(1) 2136/FFFFFFFFFFFF1184 : 181D                		move.b	(a5)+,d4	; $000000xx
(1) 2137/FFFFFFFFFFFF1186 : 2844                		move.l	d4,a4
(1) 2138/FFFFFFFFFFFF1188 : 6100 0130           		bsr	vid_PrintTValW
(1) 2139/FFFFFFFFFFFF118C : 6000 FF62           		bra	.loop
(1) 2140/FFFFFFFFFFFF1190 :                     
(1) 2141/FFFFFFFFFFFF1190 :                     ; --------------------------------------------------------
(1) 2142/FFFFFFFFFFFF1190 :                     ; Video_PrintVal, Video_PrintValW
(1) 2143/FFFFFFFFFFFF1190 :                     ;
(1) 2144/FFFFFFFFFFFF1190 :                     ; Prints a memory value
(1) 2145/FFFFFFFFFFFF1190 :                     ;
(1) 2146/FFFFFFFFFFFF1190 :                     ; Input:
(1) 2147/FFFFFFFFFFFF1190 :                     ; a0   | Memory location to read
(1) 2148/FFFFFFFFFFFF1190 :                     ; a1   | Type:
(1) 2149/FFFFFFFFFFFF1190 :                     ;        0 - Byte
(1) 2150/FFFFFFFFFFFF1190 :                     ;        1 - Word
(1) 2151/FFFFFFFFFFFF1190 :                     ;        2 - Longword but as a 24-bit address
(1) 2152/FFFFFFFFFFFF1190 :                     ;        3 - Full Longword
(1) 2153/FFFFFFFFFFFF1190 :                     ;
(1) 2154/FFFFFFFFFFFF1190 :                     ; d0.w | X position
(1) 2155/FFFFFFFFFFFF1190 :                     ; d1.w | Y position
(1) 2156/FFFFFFFFFFFF1190 :                     ; d2.w | Font VRAM location
(1) 2157/FFFFFFFFFFFF1190 :                     ; d3.l | Screen width / Screen VRAM location:
(1) 2158/FFFFFFFFFFFF1190 :                     ;        splitw(width,vram_out)
(1) 2159/FFFFFFFFFFFF1190 :                     ;
(1) 2160/FFFFFFFFFFFF1190 :                     ; * Font VRAM location
(1) 2161/FFFFFFFFFFFF1190 :                     ; Default 8x8:  DEF_PrintVram
(1) 2162/FFFFFFFFFFFF1190 :                     ; Default 8x16: DEF_PrintVramW
(1) 2163/FFFFFFFFFFFF1190 :                     ;
(1) 2164/FFFFFFFFFFFF1190 :                     ; * Screen VRAM
(1) 2165/FFFFFFFFFFFF1190 :                     ; Foreground: DEF_VRAM_FG
(1) 2166/FFFFFFFFFFFF1190 :                     ; Background: DEF_VRAM_BG
(1) 2167/FFFFFFFFFFFF1190 :                     ; Window:     DEF_VRAM_WD
(1) 2168/FFFFFFFFFFFF1190 :                     ;
(1) 2169/FFFFFFFFFFFF1190 :                     ; * Screen Width
(1) 2170/FFFFFFFFFFFF1190 :                     ; $040 (DEF_HSIZE_32)
(1) 2171/FFFFFFFFFFFF1190 :                     ; $080 (DEF_HSIZE_64)
(1) 2172/FFFFFFFFFFFF1190 :                     ; $100 (DEF_HSIZE_128)
(1) 2173/FFFFFFFFFFFF1190 :                     ;
(1) 2174/FFFFFFFFFFFF1190 :                     ; Notes:
(1) 2175/FFFFFFFFFFFF1190 :                     ; - Initialize your graphics and VRAM location
(1) 2176/FFFFFFFFFFFF1190 :                     ;   with Video_PrintInit
(1) 2177/FFFFFFFFFFFF1190 :                     ; - Only Video_PrintW can be used in double-interlace
(1) 2178/FFFFFFFFFFFF1190 :                     ;   mode.
(1) 2179/FFFFFFFFFFFF1190 :                     ; --------------------------------------------------------
(1) 2180/FFFFFFFFFFFF1190 :                     
(1) 2181/FFFFFFFFFFFF1190 :                     Video_PrintVal:
(1) 2182/FFFFFFFFFFFF1190 : 48E7 0F0E           		movem.l	d4-d7/a4-a6,-(sp)
(1) 2183/FFFFFFFFFFFF1194 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2184/FFFFFFFFFFFF119A : 3E03                		move.w	d3,d7
(1) 2185/FFFFFFFFFFFF119C : 3A00                		move.w	d0,d5
(1) 2186/FFFFFFFFFFFF119E : DA45                		add.w	d5,d5
(1) 2187/FFFFFFFFFFFF11A0 : 3801                		move.w	d1,d4
(1) 2188/FFFFFFFFFFFF11A2 : 4843                		swap	d3
(1) 2189/FFFFFFFFFFFF11A4 : C8C3                		mulu.w	d3,d4
(1) 2190/FFFFFFFFFFFF11A6 : DA44                		add.w	d4,d5
(1) 2191/FFFFFFFFFFFF11A8 : DE45                		add.w	d5,d7
(1) 2192/FFFFFFFFFFFF11AA : 3C03                		move.w	d3,d6
(1) 2193/FFFFFFFFFFFF11AC : 4843                		swap	d3
(1) 2194/FFFFFFFFFFFF11AE : 7A00                		moveq	#0,d5
(1) 2195/FFFFFFFFFFFF11B0 : 3A07                		move.w	d7,d5
(1) 2196/FFFFFFFFFFFF11B2 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2197/FFFFFFFFFFFF11B6 : 8E7C 4000           		or.w	#$4000,d7
(1) 2198/FFFFFFFFFFFF11BA : E55D                		rol.w	#2,d5
(1) 2199/FFFFFFFFFFFF11BC : 0245 0003           		andi.w	#%11,d5
(1) 2200/FFFFFFFFFFFF11C0 : 4845                		swap	d5
(1) 2201/FFFFFFFFFFFF11C2 : 2A48                		move.l	a0,a5
(1) 2202/FFFFFFFFFFFF11C4 :                     .loop:
(1) 2203/FFFFFFFFFFFF11C4 : 3806                		move.w	d6,d4
(1) 2204/FFFFFFFFFFFF11C6 : 5344                		subq.w	#1,d4
(1) 2205/FFFFFFFFFFFF11C8 : CA44                		and.w	d4,d5
(1) 2206/FFFFFFFFFFFF11CA :                     
(1) 2207/FFFFFFFFFFFF11CA : 3807                		move.w	d7,d4
(1) 2208/FFFFFFFFFFFF11CC : D845                		add.w	d5,d4
(1) 2209/FFFFFFFFFFFF11CE : 4845                		swap	d5
(1) 2210/FFFFFFFFFFFF11D0 : 3D44 0004           		move.w	d4,4(a6)
(1) 2211/FFFFFFFFFFFF11D4 : 3D45 0004           		move.w	d5,4(a6)
(1) 2212/FFFFFFFFFFFF11D8 : 4845                		swap	d5
(1) 2213/FFFFFFFFFFFF11DA :                     .q_loop:
(1) 2214/FFFFFFFFFFFF11DA : 2848                		move.l	a0,a4
(1) 2215/FFFFFFFFFFFF11DC : 3C09                		move.w	a1,d6
(1) 2216/FFFFFFFFFFFF11DE : 616E                		bsr	vid_PrintTVal
(1) 2217/FFFFFFFFFFFF11E0 : 4CDF 70F0           		movem.l	(sp)+,d4-d7/a4-a6
(1) 2218/FFFFFFFFFFFF11E4 : 4E75                		rts
(1) 2219/FFFFFFFFFFFF11E6 :                     
(1) 2220/FFFFFFFFFFFF11E6 :                     ; --------------------------------------------------------
(1) 2221/FFFFFFFFFFFF11E6 :                     ; 8x16 version
(1) 2222/FFFFFFFFFFFF11E6 :                     ; --------------------------------------------------------
(1) 2223/FFFFFFFFFFFF11E6 :                     
(1) 2224/FFFFFFFFFFFF11E6 :                     Video_PrintValW:
(1) 2225/FFFFFFFFFFFF11E6 : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 2226/FFFFFFFFFFFF11EA : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 2227/FFFFFFFFFFFF11F0 :                     ; 		move.w	(RAM_SetPrntVramW).w,d6
(1) 2228/FFFFFFFFFFFF11F0 : 3C02                		move.w	d2,d6
(1) 2229/FFFFFFFFFFFF11F2 : 0446 0040           		subi.w	#$20*2,d6
(1) 2230/FFFFFFFFFFFF11F6 : 3A38 E876           		move.w	(RAM_VdpRegSetC).w,d5
(1) 2231/FFFFFFFFFFFF11FA : 0805 0002           		btst	#2,d5
(1) 2232/FFFFFFFFFFFF11FE : 670E                		beq.s	.no_dble_y
(1) 2233/FFFFFFFFFFFF1200 : 3E06                		move.w	d6,d7
(1) 2234/FFFFFFFFFFFF1202 : 0247 F800           		andi.w	#$F800,d7
(1) 2235/FFFFFFFFFFFF1206 : 0246 07FF           		andi.w	#$7FF,d6
(1) 2236/FFFFFFFFFFFF120A : E24E                		lsr.w	#1,d6
(1) 2237/FFFFFFFFFFFF120C : 8C47                		or.w	d7,d6
(1) 2238/FFFFFFFFFFFF120E :                     .no_dble_y:
(1) 2239/FFFFFFFFFFFF120E : 4846                		swap	d6
(1) 2240/FFFFFFFFFFFF1210 : 3E03                		move.w	d3,d7
(1) 2241/FFFFFFFFFFFF1212 : 3A00                		move.w	d0,d5
(1) 2242/FFFFFFFFFFFF1214 : DA45                		add.w	d5,d5
(1) 2243/FFFFFFFFFFFF1216 : 3801                		move.w	d1,d4
(1) 2244/FFFFFFFFFFFF1218 : 4843                		swap	d3
(1) 2245/FFFFFFFFFFFF121A : C8C3                		mulu.w	d3,d4
(1) 2246/FFFFFFFFFFFF121C : DA44                		add.w	d4,d5
(1) 2247/FFFFFFFFFFFF121E : DE45                		add.w	d5,d7
(1) 2248/FFFFFFFFFFFF1220 : 3C03                		move.w	d3,d6
(1) 2249/FFFFFFFFFFFF1222 : 4843                		swap	d3
(1) 2250/FFFFFFFFFFFF1224 :                     
(1) 2251/FFFFFFFFFFFF1224 : 7A00                		moveq	#0,d5
(1) 2252/FFFFFFFFFFFF1226 : 3A07                		move.w	d7,d5
(1) 2253/FFFFFFFFFFFF1228 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 2254/FFFFFFFFFFFF122C : 8E7C 4000           		or.w	#$4000,d7
(1) 2255/FFFFFFFFFFFF1230 : E55D                		rol.w	#2,d5
(1) 2256/FFFFFFFFFFFF1232 : 0245 0003           		andi.w	#%11,d5
(1) 2257/FFFFFFFFFFFF1236 : 4845                		swap	d5
(1) 2258/FFFFFFFFFFFF1238 : 2A48                		move.l	a0,a5
(1) 2259/FFFFFFFFFFFF123A :                     	; d7 -      TEMP       | VDP write left
(1) 2260/FFFFFFFFFFFF123A :                     	; d6 -      TEMP       | Y next-line size
(1) 2261/FFFFFFFFFFFF123A :                     	; d5 - VDP write right | X current pos
(1) 2262/FFFFFFFFFFFF123A :                     	; d4 -                 | TEMP
(1) 2263/FFFFFFFFFFFF123A :                     .loop:
(1) 2264/FFFFFFFFFFFF123A : 3806                		move.w	d6,d4
(1) 2265/FFFFFFFFFFFF123C : 5344                		subq.w	#1,d4
(1) 2266/FFFFFFFFFFFF123E : CA44                		and.w	d4,d5
(1) 2267/FFFFFFFFFFFF1240 : 2646                		move.l	d6,a3
(1) 2268/FFFFFFFFFFFF1242 : 2848                		move.l	a0,a4
(1) 2269/FFFFFFFFFFFF1244 : 3C09                		move.w	a1,d6
(1) 2270/FFFFFFFFFFFF1246 : 6172                		bsr	vid_PrintTValW
(1) 2271/FFFFFFFFFFFF1248 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 2272/FFFFFFFFFFFF124C : 4E75                		rts
(1) 2273/FFFFFFFFFFFF124E :                     
(1) 2274/FFFFFFFFFFFF124E :                     ; ------------------------------------------------
(1) 2275/FFFFFFFFFFFF124E :                     ; a4 - Memory value
(1) 2276/FFFFFFFFFFFF124E :                     ; d6 - Type
(1) 2277/FFFFFFFFFFFF124E :                     
(1) 2278/FFFFFFFFFFFF124E :                     vid_PrintTVal:
(1) 2279/FFFFFFFFFFFF124E : 0246 0003           		andi.w	#%11,d6
(1) 2280/FFFFFFFFFFFF1252 : 4847                		swap	d7
(1) 2281/FFFFFFFFFFFF1254 : 3E3C 0000           		move.w	#1-1,d7
(1) 2282/FFFFFFFFFFFF1258 : BC3C 0003           		cmp.b	#$03,d6
(1) 2283/FFFFFFFFFFFF125C : 6724                		beq.s	.show_long
(1) 2284/FFFFFFFFFFFF125E : BC3C 0002           		cmp.b	#$02,d6
(1) 2285/FFFFFFFFFFFF1262 : 6716                		beq.s	.show_24
(1) 2286/FFFFFFFFFFFF1264 : BC3C 0001           		cmp.b	#$01,d6
(1) 2287/FFFFFFFFFFFF1268 : 6708                		beq.s	.show_word
(1) 2288/FFFFFFFFFFFF126A :                     .show_byte:
(1) 2289/FFFFFFFFFFFF126A : 1814                		move.b	(a4),d4
(1) 2290/FFFFFFFFFFFF126C : 4844                		swap	d4
(1) 2291/FFFFFFFFFFFF126E : E19C                		rol.l	#8,d4
(1) 2292/FFFFFFFFFFFF1270 : 6014                		bra.s	.mk_value
(1) 2293/FFFFFFFFFFFF1272 :                     .show_word:
(1) 2294/FFFFFFFFFFFF1272 : 3814                		move.w	(a4),d4
(1) 2295/FFFFFFFFFFFF1274 : 4844                		swap	d4
(1) 2296/FFFFFFFFFFFF1276 : 5247                		addq.w	#1,d7
(1) 2297/FFFFFFFFFFFF1278 : 600C                		bra.s	.mk_value
(1) 2298/FFFFFFFFFFFF127A :                     .show_24:
(1) 2299/FFFFFFFFFFFF127A : 2814                		move.l	(a4),d4
(1) 2300/FFFFFFFFFFFF127C : E19C                		rol.l	#8,d4
(1) 2301/FFFFFFFFFFFF127E : 5447                		addq.w	#2,d7
(1) 2302/FFFFFFFFFFFF1280 : 6004                		bra.s	.mk_value
(1) 2303/FFFFFFFFFFFF1282 :                     .show_long:
(1) 2304/FFFFFFFFFFFF1282 : 2814                		move.l	(a4),d4
(1) 2305/FFFFFFFFFFFF1284 : 5647                		addq.w	#3,d7
(1) 2306/FFFFFFFFFFFF1286 :                     .mk_value:
(1) 2307/FFFFFFFFFFFF1286 : E99C                		rol.l	#4,d4
(1) 2308/FFFFFFFFFFFF1288 : 610E                		bsr.s	.show_nibbl
(1) 2309/FFFFFFFFFFFF128A : E99C                		rol.l	#4,d4
(1) 2310/FFFFFFFFFFFF128C : 610A                		bsr.s	.show_nibbl
(1) 2311/FFFFFFFFFFFF128E : 51CF FFF6           		dbf	d7,.mk_value
(1) 2312/FFFFFFFFFFFF1292 : 4846                		swap	d6
(1) 2313/FFFFFFFFFFFF1294 : 4847                		swap	d7
(1) 2314/FFFFFFFFFFFF1296 : 4E75                		rts
(1) 2315/FFFFFFFFFFFF1298 :                     .show_nibbl:
(1) 2316/FFFFFFFFFFFF1298 : 2846                		move.l	d6,a4
(1) 2317/FFFFFFFFFFFF129A : 1C04                		move.b	d4,d6
(1) 2318/FFFFFFFFFFFF129C : 0246 000F           		andi.w	#$0F,d6
(1) 2319/FFFFFFFFFFFF12A0 : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2320/FFFFFFFFFFFF12A4 : 6502                		bcs.s	.hex_incr
(1) 2321/FFFFFFFFFFFF12A6 : 5E46                		addq.w	#7,d6
(1) 2322/FFFFFFFFFFFF12A8 : DC7C 0030           .hex_incr:	add.w	#"0",d6
(1) 2323/FFFFFFFFFFFF12AC :                     ; 		add.w	(RAM_SetPrntVram).w,d6
(1) 2324/FFFFFFFFFFFF12AC : DC42                		add.w	d2,d6
(1) 2325/FFFFFFFFFFFF12AE : 0446 0020           		subi.w	#$20,d6
(1) 2326/FFFFFFFFFFFF12B2 : 3C86                		move.w	d6,(a6)
(1) 2327/FFFFFFFFFFFF12B4 : 5445                		addq.w	#2,d5
(1) 2328/FFFFFFFFFFFF12B6 : 2C0C                		move.l	a4,d6
(1) 2329/FFFFFFFFFFFF12B8 : 4E75                		rts
(1) 2330/FFFFFFFFFFFF12BA :                     
(1) 2331/FFFFFFFFFFFF12BA :                     ; ------------------------------------------------
(1) 2332/FFFFFFFFFFFF12BA :                     
(1) 2333/FFFFFFFFFFFF12BA :                     vid_PrintTValW:
(1) 2334/FFFFFFFFFFFF12BA : 0246 0003           		andi.w	#%11,d6
(1) 2335/FFFFFFFFFFFF12BE : 4847                		swap	d7
(1) 2336/FFFFFFFFFFFF12C0 : 3E3C 0000           		move.w	#1-1,d7
(1) 2337/FFFFFFFFFFFF12C4 : BC3C 0003           		cmp.b	#$03,d6
(1) 2338/FFFFFFFFFFFF12C8 : 6724                		beq.s	.show_long
(1) 2339/FFFFFFFFFFFF12CA : BC3C 0002           		cmp.b	#$02,d6
(1) 2340/FFFFFFFFFFFF12CE : 6716                		beq.s	.show_24
(1) 2341/FFFFFFFFFFFF12D0 : BC3C 0001           		cmp.b	#$01,d6
(1) 2342/FFFFFFFFFFFF12D4 : 6708                		beq.s	.show_word
(1) 2343/FFFFFFFFFFFF12D6 :                     .show_byte:
(1) 2344/FFFFFFFFFFFF12D6 : 1814                		move.b	(a4),d4
(1) 2345/FFFFFFFFFFFF12D8 : 4844                		swap	d4
(1) 2346/FFFFFFFFFFFF12DA : E19C                		rol.l	#8,d4
(1) 2347/FFFFFFFFFFFF12DC : 6014                		bra.s	.mk_value_in
(1) 2348/FFFFFFFFFFFF12DE :                     .show_word:
(1) 2349/FFFFFFFFFFFF12DE : 3814                		move.w	(a4),d4
(1) 2350/FFFFFFFFFFFF12E0 : 4844                		swap	d4
(1) 2351/FFFFFFFFFFFF12E2 : 5247                		addq.w	#1,d7
(1) 2352/FFFFFFFFFFFF12E4 : 600C                		bra.s	.mk_value_in
(1) 2353/FFFFFFFFFFFF12E6 :                     .show_24:
(1) 2354/FFFFFFFFFFFF12E6 : 2814                		move.l	(a4),d4
(1) 2355/FFFFFFFFFFFF12E8 : E19C                		rol.l	#8,d4
(1) 2356/FFFFFFFFFFFF12EA : 5447                		addq.w	#2,d7
(1) 2357/FFFFFFFFFFFF12EC : 6004                		bra.s	.mk_value_in
(1) 2358/FFFFFFFFFFFF12EE :                     .show_long:
(1) 2359/FFFFFFFFFFFF12EE : 2814                		move.l	(a4),d4
(1) 2360/FFFFFFFFFFFF12F0 : 5647                		addq.w	#3,d7
(1) 2361/FFFFFFFFFFFF12F2 :                     .mk_value_in:
(1) 2362/FFFFFFFFFFFF12F2 : 2C0B                		move.l	a3,d6
(1) 2363/FFFFFFFFFFFF12F4 :                     
(1) 2364/FFFFFFFFFFFF12F4 :                     
(1) 2365/FFFFFFFFFFFF12F4 :                     	; d4 - value
(1) 2366/FFFFFFFFFFFF12F4 : 4846                		swap	d6
(1) 2367/FFFFFFFFFFFF12F6 :                     .mk_value:
(1) 2368/FFFFFFFFFFFF12F6 : E99C                		rol.l	#4,d4
(1) 2369/FFFFFFFFFFFF12F8 : 610E                		bsr.s	.show_nibbl
(1) 2370/FFFFFFFFFFFF12FA : E99C                		rol.l	#4,d4
(1) 2371/FFFFFFFFFFFF12FC : 610A                		bsr.s	.show_nibbl
(1) 2372/FFFFFFFFFFFF12FE : 51CF FFF6           		dbf	d7,.mk_value
(1) 2373/FFFFFFFFFFFF1302 : 4846                		swap	d6
(1) 2374/FFFFFFFFFFFF1304 : 4847                		swap	d7
(1) 2375/FFFFFFFFFFFF1306 : 4E75                		rts
(1) 2376/FFFFFFFFFFFF1308 :                     
(1) 2377/FFFFFFFFFFFF1308 :                     	; d6 - Y next-line size | TEMP
(1) 2378/FFFFFFFFFFFF1308 :                     .show_nibbl:
(1) 2379/FFFFFFFFFFFF1308 : 2846                		move.l	d6,a4
(1) 2380/FFFFFFFFFFFF130A : 2644                		move.l	d4,a3
(1) 2381/FFFFFFFFFFFF130C : 3C38 E876           		move.w	(RAM_VdpRegSetC).w,d6
(1) 2382/FFFFFFFFFFFF1310 : 0806 0002           		btst	#2,d6
(1) 2383/FFFFFFFFFFFF1314 : 6730                		beq.s	.nibbl_norm
(1) 2384/FFFFFFFFFFFF1316 :                     
(1) 2385/FFFFFFFFFFFF1316 :                     	; TODO CHECAR ESTO
(1) 2386/FFFFFFFFFFFF1316 : 616C                		bsr.s	.get_preval
(1) 2387/FFFFFFFFFFFF1318 : 0446 0020           		subi.w	#$20,d6
(1) 2388/FFFFFFFFFFFF131C : 4847                		swap	d7
(1) 2389/FFFFFFFFFFFF131E :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2390/FFFFFFFFFFFF131E : 3802                		move.w	d2,d4
(1) 2391/FFFFFFFFFFFF1320 : 0244 07FF           		andi.w	#$7FF,d4
(1) 2392/FFFFFFFFFFFF1324 : E24C                		lsr.w	#1,d4
(1) 2393/FFFFFFFFFFFF1326 : DC44                		add.w	d4,d6
(1) 2394/FFFFFFFFFFFF1328 :                     ; 		move.w	(RAM_SetPrntVramW).w,d4
(1) 2395/FFFFFFFFFFFF1328 : 3802                		move.w	d2,d4
(1) 2396/FFFFFFFFFFFF132A : 0244 F800           		andi.w	#$F800,d4
(1) 2397/FFFFFFFFFFFF132E : 8C44                		or.w	d4,d6
(1) 2398/FFFFFFFFFFFF1330 : 3807                		move.w	d7,d4
(1) 2399/FFFFFFFFFFFF1332 : 4847                		swap	d7
(1) 2400/FFFFFFFFFFFF1334 : D845                		add.w	d5,d4
(1) 2401/FFFFFFFFFFFF1336 : 4845                		swap	d5
(1) 2402/FFFFFFFFFFFF1338 : 3D44 0004           		move.w	d4,4(a6)
(1) 2403/FFFFFFFFFFFF133C : 3D45 0004           		move.w	d5,4(a6)
(1) 2404/FFFFFFFFFFFF1340 : 4845                		swap	d5
(1) 2405/FFFFFFFFFFFF1342 : 3C86                		move.w	d6,(a6)
(1) 2406/FFFFFFFFFFFF1344 : 6036                		bra.s	.nibbl_cont
(1) 2407/FFFFFFFFFFFF1346 :                     
(1) 2408/FFFFFFFFFFFF1346 :                     .nibbl_norm:
(1) 2409/FFFFFFFFFFFF1346 : 613C                		bsr.s	.get_preval
(1) 2410/FFFFFFFFFFFF1348 : 0446 0020           		subi.w	#$20,d6
(1) 2411/FFFFFFFFFFFF134C : DC46                		add.w	d6,d6
(1) 2412/FFFFFFFFFFFF134E : DC42                		add.w	d2,d6
(1) 2413/FFFFFFFFFFFF1350 : 4847                		swap	d7
(1) 2414/FFFFFFFFFFFF1352 : 3807                		move.w	d7,d4
(1) 2415/FFFFFFFFFFFF1354 : 4847                		swap	d7
(1) 2416/FFFFFFFFFFFF1356 : D845                		add.w	d5,d4
(1) 2417/FFFFFFFFFFFF1358 : 4845                		swap	d5
(1) 2418/FFFFFFFFFFFF135A : 3D44 0004           		move.w	d4,4(a6)
(1) 2419/FFFFFFFFFFFF135E : 3D45 0004           		move.w	d5,4(a6)
(1) 2420/FFFFFFFFFFFF1362 : 4845                		swap	d5
(1) 2421/FFFFFFFFFFFF1364 : 3C86                		move.w	d6,(a6)
(1) 2422/FFFFFFFFFFFF1366 : 5246                		addq.w	#1,d6
(1) 2423/FFFFFFFFFFFF1368 : 4846                		swap	d6
(1) 2424/FFFFFFFFFFFF136A : D846                		add.w	d6,d4
(1) 2425/FFFFFFFFFFFF136C : 4846                		swap	d6
(1) 2426/FFFFFFFFFFFF136E : 4845                		swap	d5
(1) 2427/FFFFFFFFFFFF1370 : 3D44 0004           		move.w	d4,4(a6)
(1) 2428/FFFFFFFFFFFF1374 : 3D45 0004           		move.w	d5,4(a6)
(1) 2429/FFFFFFFFFFFF1378 : 4845                		swap	d5
(1) 2430/FFFFFFFFFFFF137A : 3C86                		move.w	d6,(a6)
(1) 2431/FFFFFFFFFFFF137C :                     .nibbl_cont:
(1) 2432/FFFFFFFFFFFF137C : 5445                		addq.w	#2,d5
(1) 2433/FFFFFFFFFFFF137E : 2C0C                		move.l	a4,d6
(1) 2434/FFFFFFFFFFFF1380 : 280B                		move.l	a3,d4
(1) 2435/FFFFFFFFFFFF1382 : 4E75                		rts
(1) 2436/FFFFFFFFFFFF1384 :                     
(1) 2437/FFFFFFFFFFFF1384 :                     .get_preval:
(1) 2438/FFFFFFFFFFFF1384 : 1C04                		move.b	d4,d6
(1) 2439/FFFFFFFFFFFF1386 : 0246 000F           		andi.w	#$0F,d6
(1) 2440/FFFFFFFFFFFF138A : 0C46 000A           		cmpi.w	#$0A,d6
(1) 2441/FFFFFFFFFFFF138E : 6502                		bcs.s	.hex_incr
(1) 2442/FFFFFFFFFFFF1390 : 5E46                		addq.w	#7,d6
(1) 2443/FFFFFFFFFFFF1392 :                     .hex_incr:
(1) 2444/FFFFFFFFFFFF1392 : DC7C 0030           		add.w	#"0",d6
(1) 2445/FFFFFFFFFFFF1396 : 4E75                		rts
(1) 2446/FFFFFFFFFFFF1398 :                     
(1) 2447/FFFFFFFFFFFF1398 :                     ; ====================================================================
(1) 2448/FFFFFFFFFFFF1398 :                     ; ----------------------------------------------------------------
(1) 2449/FFFFFFFFFFFF1398 :                     ; VDP Sprites
(1) 2450/FFFFFFFFFFFF1398 :                     ; ----------------------------------------------------------------
(1) 2451/FFFFFFFFFFFF1398 :                     
(1) 2452/FFFFFFFFFFFF1398 :                     ; --------------------------------------------------------
(1) 2453/FFFFFFFFFFFF1398 :                     ; Video_SetSpr, Video_MakeSpr
(1) 2454/FFFFFFFFFFFF1398 :                     ;
(1) 2455/FFFFFFFFFFFF1398 :                     ; Sets or Makes a VDP Sprite piece
(1) 2456/FFFFFFFFFFFF1398 :                     ;
(1) 2457/FFFFFFFFFFFF1398 :                     ; Input:
(1) 2458/FFFFFFFFFFFF1398 :                     ; a0   | Slot (0-80) for _SetSpr
(1) 2459/FFFFFFFFFFFF1398 :                     ; d0.w | X pos
(1) 2460/FFFFFFFFFFFF1398 :                     ; d1.w | Y pos
(1) 2461/FFFFFFFFFFFF1398 :                     ; d2.w | VRAM
(1) 2462/FFFFFFFFFFFF1398 :                     ; d3.w | Size
(1) 2463/FFFFFFFFFFFF1398 :                     ;
(1) 2464/FFFFFFFFFFFF1398 :                     ; Returns:
(1) 2465/FFFFFFFFFFFF1398 :                     ; bcc | OK
(1) 2466/FFFFFFFFFFFF1398 :                     ; bcs | Ran out of slots (not sprites)
(1) 2467/FFFFFFFFFFFF1398 :                     ; --------------------------------------------------------
(1) 2468/FFFFFFFFFFFF1398 :                     
(1) 2469/FFFFFFFFFFFF1398 :                     Video_SetSpr:
(1) 2470/FFFFFFFFFFFF1398 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2471/FFFFFFFFFFFF139C : 2E08                		move.l	a0,d7
(1) 2472/FFFFFFFFFFFF139E : 7C00                		moveq	#0,d6
(1) 2473/FFFFFFFFFFFF13A0 : 6020                		bra	vidMdSpr_MkSpr
(1) 2474/FFFFFFFFFFFF13A2 :                     Video_MakeSpr:
(1) 2475/FFFFFFFFFFFF13A2 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2476/FFFFFFFFFFFF13A6 : 7E00                		moveq	#0,d7
(1) 2477/FFFFFFFFFFFF13A8 : 4DF8 DA40           		lea	(RAM_SprPzList).w,a6
(1) 2478/FFFFFFFFFFFF13AC : 7C4F                		moveq	#80-1,d6
(1) 2479/FFFFFFFFFFFF13AE :                     .chk_free:
(1) 2480/FFFFFFFFFFFF13AE : 0816 0007           		btst	#7,(a6)
(1) 2481/FFFFFFFFFFFF13B2 : 670C                		beq.s	.mk_spr
(1) 2482/FFFFFFFFFFFF13B4 : 5247                		addq.w	#1,d7
(1) 2483/FFFFFFFFFFFF13B6 : DCFC 0008           		adda	#8,a6
(1) 2484/FFFFFFFFFFFF13BA : 51CE FFF2           		dbf	d6,.chk_free
(1) 2485/FFFFFFFFFFFF13BE : 605C                		bra.s	vidMd_CError
(1) 2486/FFFFFFFFFFFF13C0 :                     .mk_spr:
(1) 2487/FFFFFFFFFFFF13C0 : 7C40                		moveq	#$40,d6
(1) 2488/FFFFFFFFFFFF13C2 :                     vidMdSpr_MkSpr:
(1) 2489/FFFFFFFFFFFF13C2 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2490/FFFFFFFFFFFF13C8 : BE7C 0050           		cmp.w	#80,d7
(1) 2491/FFFFFFFFFFFF13CC : 6C4E                		bge.s	vidMd_CError
(1) 2492/FFFFFFFFFFFF13CE : E74F                		lsl.w	#3,d7
(1) 2493/FFFFFFFFFFFF13D0 : 0687 FFFF DA40      		addi.l	#RAM_SprPzList,d7
(1) 2494/FFFFFFFFFFFF13D6 : 2C47                		move.l	d7,a6
(1) 2495/FFFFFFFFFFFF13D8 : 4846                		swap	d6
(1) 2496/FFFFFFFFFFFF13DA : 3E01                		move.w	d1,d7			; Y pos
(1) 2497/FFFFFFFFFFFF13DC : 0647 0080           		addi.w	#$80,d7			; +$80
(1) 2498/FFFFFFFFFFFF13E0 : 0838 0002 E877      		btst	#2,(RAM_VdpRegSetC+1).w
(1) 2499/FFFFFFFFFFFF13E6 : 6704                		beq.s	.dont_add
(1) 2500/FFFFFFFFFFFF13E8 : 0647 0080           		addi.w	#$80,d7
(1) 2501/FFFFFFFFFFFF13EC :                     .dont_add:
(1) 2502/FFFFFFFFFFFF13EC : 0247 03FF           		andi.w	#$3FF,d7
(1) 2503/FFFFFFFFFFFF13F0 : 3C03                		move.w	d3,d6
(1) 2504/FFFFFFFFFFFF13F2 : 0246 000F           		andi.w	#%1111,d6
(1) 2505/FFFFFFFFFFFF13F6 : E14E                		lsl.w	#8,d6
(1) 2506/FFFFFFFFFFFF13F8 : E54E                		lsl.w	#2,d6
(1) 2507/FFFFFFFFFFFF13FA : 8E46                		or.w	d6,d7			; %00ssssyyyyyyyyyy
(1) 2508/FFFFFFFFFFFF13FC : 4846                		swap	d6
(1) 2509/FFFFFFFFFFFF13FE : E14E                		lsl.w	#8,d6
(1) 2510/FFFFFFFFFFFF1400 : 8E7C 8000           		or.w	#$8000,d7
(1) 2511/FFFFFFFFFFFF1404 : 8E46                		or.w	d6,d7
(1) 2512/FFFFFFFFFFFF1406 : 3CC7                		move.w	d7,(a6)+
(1) 2513/FFFFFFFFFFFF1408 : 3E00                		move.w	d0,d7
(1) 2514/FFFFFFFFFFFF140A : 0647 0080           		addi.w	#$80,d7
(1) 2515/FFFFFFFFFFFF140E : 3CC7                		move.w	d7,(a6)+
(1) 2516/FFFFFFFFFFFF1410 : 3CC2                		move.w	d2,(a6)+
(1) 2517/FFFFFFFFFFFF1412 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2518/FFFFFFFFFFFF1416 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2519/FFFFFFFFFFFF141A : 4E75                		rts
(1) 2520/FFFFFFFFFFFF141C :                     ; Carry error
(1) 2521/FFFFFFFFFFFF141C :                     vidMd_CError:
(1) 2522/FFFFFFFFFFFF141C : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2523/FFFFFFFFFFFF1420 : 003C 0001           		or	#1,ccr			; Return Error
(1) 2524/FFFFFFFFFFFF1424 :                     vidMd_CFreeze:
(1) 2525/FFFFFFFFFFFF1424 : 4E75                		rts
(1) 2526/FFFFFFFFFFFF1426 :                     
(1) 2527/FFFFFFFFFFFF1426 :                     ; --------------------------------------------------------
(1) 2528/FFFFFFFFFFFF1426 :                     ; Video_SetSprMap, Video_MakeSprMap
(1) 2529/FFFFFFFFFFFF1426 :                     ; Video_SetSprMap_DMA, Video_MakeSprMap_DMA
(1) 2530/FFFFFFFFFFFF1426 :                     ;
(1) 2531/FFFFFFFFFFFF1426 :                     ; Sets or Makes a VDP Sprite with map data
(1) 2532/FFFFFFFFFFFF1426 :                     ;
(1) 2533/FFFFFFFFFFFF1426 :                     ; Input:
(1) 2534/FFFFFFFFFFFF1426 :                     ; a0   | Slot (0-80) for _SetSprMap/_SetSprMap_DMA
(1) 2535/FFFFFFFFFFFF1426 :                     ; a1   | Map data
(1) 2536/FFFFFFFFFFFF1426 :                     ; a2   | PLC data (_DMA/_DMA_Auto ONLY)
(1) 2537/FFFFFFFFFFFF1426 :                     ; a3   | Graphics data (_DMA/_DMA_Auto ONLY)
(1) 2538/FFFFFFFFFFFF1426 :                     ; d0.w | X position
(1) 2539/FFFFFFFFFFFF1426 :                     ; d1.w | Y position
(1) 2540/FFFFFFFFFFFF1426 :                     ; d2.w | VRAM output location
(1) 2541/FFFFFFFFFFFF1426 :                     ;        For _DMA_Auto: VRAM's attribute bits,
(1) 2542/FFFFFFFFFFFF1426 :                     ;        cell vram is ignored.
(1) 2543/FFFFFFFFFFFF1426 :                     ; d3.w | Frame number
(1) 2544/FFFFFFFFFFFF1426 :                     ;
(1) 2545/FFFFFFFFFFFF1426 :                     ; Returns:
(1) 2546/FFFFFFFFFFFF1426 :                     ; bcc | OK
(1) 2547/FFFFFFFFFFFF1426 :                     ; bcs | Ran out of slots (not sprites)
(1) 2548/FFFFFFFFFFFF1426 :                     ; --------------------------------------------------------
(1) 2549/FFFFFFFFFFFF1426 :                     
(1) 2550/FFFFFFFFFFFF1426 :                     Video_SetSprMap_DMA:
(1) 2551/FFFFFFFFFFFF1426 : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2552/FFFFFFFFFFFF142A : 6104                		bsr	Video_SetSprMap
(1) 2553/FFFFFFFFFFFF142C : 651E                		bcs.s	vid_MkDmaCarry
(1) 2554/FFFFFFFFFFFF142E : 6012                		bra	vid_MkDmaNext
(1) 2555/FFFFFFFFFFFF1430 :                     Video_SetSprMap:
(1) 2556/FFFFFFFFFFFF1430 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2557/FFFFFFFFFFFF1434 : 2E08                		move.l	a0,d7
(1) 2558/FFFFFFFFFFFF1436 : 7C00                		moveq	#0,d6
(1) 2559/FFFFFFFFFFFF1438 : 6036                		bra	vidMdSpr_MkSprMap
(1) 2560/FFFFFFFFFFFF143A :                     Video_MakeSprMap_DMA:
(1) 2561/FFFFFFFFFFFF143A : 48E7 F0E0           		movem.l	d0-d3/a0-a2,-(sp)
(1) 2562/FFFFFFFFFFFF143E : 6112                		bsr	Video_MakeSprMap
(1) 2563/FFFFFFFFFFFF1440 : 650A                		bcs.s	vid_MkDmaCarry
(1) 2564/FFFFFFFFFFFF1442 :                     vid_MkDmaNext:
(1) 2565/FFFFFFFFFFFF1442 : 204A                		move.l	a2,a0			; Redirect these regs
(1) 2566/FFFFFFFFFFFF1444 : 224B                		move.l	a3,a1
(1) 2567/FFFFFFFFFFFF1446 : 3003                		move.w	d3,d0
(1) 2568/FFFFFFFFFFFF1448 : 3202                		move.w	d2,d1
(1) 2569/FFFFFFFFFFFF144A : 6160                		bsr	vid_MkMapDma
(1) 2570/FFFFFFFFFFFF144C :                     vid_MkDmaCarry:
(1) 2571/FFFFFFFFFFFF144C : 4CDF 070F           		movem.l	(sp)+,d0-d3/a0-a2
(1) 2572/FFFFFFFFFFFF1450 : 4E75                		rts
(1) 2573/FFFFFFFFFFFF1452 :                     
(1) 2574/FFFFFFFFFFFF1452 :                     Video_MakeSprMap:
(1) 2575/FFFFFFFFFFFF1452 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 2576/FFFFFFFFFFFF1456 : 7E00                		moveq	#0,d7
(1) 2577/FFFFFFFFFFFF1458 : 4DF8 D8C0           		lea	(RAM_SprMapList).w,a6
(1) 2578/FFFFFFFFFFFF145C : 7C17                		moveq	#MAX_MDMAPSPR-1,d6
(1) 2579/FFFFFFFFFFFF145E :                     .chk_free:
(1) 2580/FFFFFFFFFFFF145E : 4A16                		tst.b	(a6)
(1) 2581/FFFFFFFFFFFF1460 : 670C                		beq.s	.mk_spr
(1) 2582/FFFFFFFFFFFF1462 : 5247                		addq.w	#1,d7
(1) 2583/FFFFFFFFFFFF1464 : DCFC 0010           		adda	#$10,a6
(1) 2584/FFFFFFFFFFFF1468 : 51CE FFF4           		dbf	d6,.chk_free
(1) 2585/FFFFFFFFFFFF146C : 60AE                		bra	vidMd_CError
(1) 2586/FFFFFFFFFFFF146E :                     .mk_spr:
(1) 2587/FFFFFFFFFFFF146E : 7C40                		moveq	#$40,d6
(1) 2588/FFFFFFFFFFFF1470 :                     vidMdSpr_MkSprMap:
(1) 2589/FFFFFFFFFFFF1470 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 2590/FFFFFFFFFFFF1476 : BE7C 0018           		cmp.w	#MAX_MDMAPSPR,d7
(1) 2591/FFFFFFFFFFFF147A : 6CA0                		bge	vidMd_CError
(1) 2592/FFFFFFFFFFFF147C : E98F                		lsl.l	#4,d7
(1) 2593/FFFFFFFFFFFF147E : 0687 FFFF D8C0      		addi.l	#RAM_SprMapList,d7
(1) 2594/FFFFFFFFFFFF1484 : 2C47                		move.l	d7,a6
(1) 2595/FFFFFFFFFFFF1486 : 2E09                		move.l	a1,d7
(1) 2596/FFFFFFFFFFFF1488 : 8C7C 0080           		or.w	#$80,d6
(1) 2597/FFFFFFFFFFFF148C : 4846                		swap	d6
(1) 2598/FFFFFFFFFFFF148E : E18E                		lsl.l	#8,d6
(1) 2599/FFFFFFFFFFFF1490 : CEBC 00FF FFFF      		and.l	#$FFFFFF,d7
(1) 2600/FFFFFFFFFFFF1496 : 8E86                		or.l	d6,d7
(1) 2601/FFFFFFFFFFFF1498 : 2CC7                		move.l	d7,(a6)+		; $00 - Map data
(1) 2602/FFFFFFFFFFFF149A : 3CC3                		move.w	d3,(a6)+		; $04 - Frame
(1) 2603/FFFFFFFFFFFF149C : 3CC2                		move.w	d2,(a6)+		; $06 - VRAM
(1) 2604/FFFFFFFFFFFF149E : 3CC0                		move.w	d0,(a6)+		; $08 - X pos
(1) 2605/FFFFFFFFFFFF14A0 : 3CC1                		move.w	d1,(a6)+		; $0A - Y pos
(1) 2606/FFFFFFFFFFFF14A2 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 2607/FFFFFFFFFFFF14A6 : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 2608/FFFFFFFFFFFF14AA : 4E75                		rts
(1) 2609/FFFFFFFFFFFF14AC :                     
(1) 2610/FFFFFFFFFFFF14AC :                     ; --------------------------------------------------------
(1) 2611/FFFFFFFFFFFF14AC :                     ; Input:
(1) 2612/FFFFFFFFFFFF14AC :                     ; a0   | DMA map data
(1) 2613/FFFFFFFFFFFF14AC :                     ; a1   | Graphics data
(1) 2614/FFFFFFFFFFFF14AC :                     ; d0.w | Current frame in DMA list
(1) 2615/FFFFFFFFFFFF14AC :                     ; d1.w | VRAM position
(1) 2616/FFFFFFFFFFFF14AC :                     ;
(1) 2617/FFFFFFFFFFFF14AC :                     ; USES:
(1) 2618/FFFFFFFFFFFF14AC :                     ; a6
(1) 2619/FFFFFFFFFFFF14AC :                     vid_MkMapDma:
(1) 2620/FFFFFFFFFFFF14AC : 48E7 0F02           		movem.l	d4-d7/a6,-(sp)		; SAVE a6
(1) 2621/FFFFFFFFFFFF14B0 : 7800                		moveq	#0,d4
(1) 2622/FFFFFFFFFFFF14B2 : 0240 00FF           		andi.w	#$FF,d0
(1) 2623/FFFFFFFFFFFF14B6 : D040                 		add.w	d0,d0
(1) 2624/FFFFFFFFFFFF14B8 : 3830 0000           		move.w	(a0,d0.w),d4
(1) 2625/FFFFFFFFFFFF14BC : D0C4                 		adda	d4,a0
(1) 2626/FFFFFFFFFFFF14BE : 3818                 		move.w	(a0)+,d4
(1) 2627/FFFFFFFFFFFF14C0 : 6734                 		beq.s	.no_dma			; If no valid entries, exit.
(1) 2628/FFFFFFFFFFFF14C2 : 6B32                 		bmi.s	.no_dma
(1) 2629/FFFFFFFFFFFF14C4 : 5344                 		subq.w	#1,d4
(1) 2630/FFFFFFFFFFFF14C6 : 0241 07FF           		andi.w	#$07FF,d1
(1) 2631/FFFFFFFFFFFF14CA : EB49                		lsl.w	#5,d1
(1) 2632/FFFFFFFFFFFF14CC :                     .next_pz:
(1) 2633/FFFFFFFFFFFF14CC : 4844                		swap	d4
(1) 2634/FFFFFFFFFFFF14CE : 3818                		move.w	(a0)+,d4
(1) 2635/FFFFFFFFFFFF14D0 : 3404                		move.w	d4,d2
(1) 2636/FFFFFFFFFFFF14D2 : EE4A                		lsr.w	#7,d2
(1) 2637/FFFFFFFFFFFF14D4 : 0242 01E0           		andi.w	#$1E0,d2
(1) 2638/FFFFFFFFFFFF14D8 : D47C 0020           		add.w	#$20,d2
(1) 2639/FFFFFFFFFFFF14DC : 7000                		moveq	#0,d0
(1) 2640/FFFFFFFFFFFF14DE : 3004                		move.w	d4,d0
(1) 2641/FFFFFFFFFFFF14E0 : 0240 0FFF           		andi.w	#$FFF,d0
(1) 2642/FFFFFFFFFFFF14E4 : EB48                		lsl.w	#5,d0
(1) 2643/FFFFFFFFFFFF14E6 : D089                		add.l	a1,d0
(1) 2644/FFFFFFFFFFFF14E8 : 6100 F606           		bsr	Video_MakeDmaEntry
(1) 2645/FFFFFFFFFFFF14EC : D242                		add.w	d2,d1
(1) 2646/FFFFFFFFFFFF14EE : 4844                		swap	d4
(1) 2647/FFFFFFFFFFFF14F0 : 51CC FFDA           		dbf	d4,.next_pz
(1) 2648/FFFFFFFFFFFF14F4 : EA49                		lsr.w	#5,d1			; Get d1 back
(1) 2649/FFFFFFFFFFFF14F6 :                     .no_dma:
(1) 2650/FFFFFFFFFFFF14F6 : 4CDF 40F0           		movem.l	(sp)+,d4-d7/a6		; Restore a6
(1) 2651/FFFFFFFFFFFF14FA : 4E75                		rts
(1) 2652/FFFFFFFFFFFF14FC :                     
(1) 2653/FFFFFFFFFFFF14FC :                     ; ====================================================================
(1) 2654/FFFFFFFFFFFF14FC :                     ; ----------------------------------------------------------------
(1) 2655/FFFFFFFFFFFF14FC :                     ; Video routines for SEGA CD
(1) 2656/FFFFFFFFFFFF14FC :                     ; ----------------------------------------------------------------
(1) 2657/FFFFFFFFFFFF14FC :                     
(1) 2659/FFFFFFFFFFFF14FC :                     
(1) 2660/FFFFFFFFFFFF14FC :                     ; --------------------------------------------------------
(1) 2661/FFFFFFFFFFFF14FC :                     ; EXAMPLE CODE to use stamps
(1) 2662/FFFFFFFFFFFF14FC :                     ;
(1) 2663/FFFFFFFFFFFF14FC :                     ; Single-buffer:
(1) 2664/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2665/FFFFFFFFFFFF14FC :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2666/FFFFFFFFFFFF14FC :                     ; 		moveq	#0,d2						; Single buffer mode
(1) 2667/FFFFFFFFFFFF14FC :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2668/FFFFFFFFFFFF14FC :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2669/FFFFFFFFFFFF14FC :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2670/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2671/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2672/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2673/FFFFFFFFFFFF14FC :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2674/FFFFFFFFFFFF14FC :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2675/FFFFFFFFFFFF14FC :                     
(1) 2676/FFFFFFFFFFFF14FC :                     ; Double-buffer:
(1) 2677/FFFFFFFFFFFF14FC :                     ; V32 H64
(1) 2678/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(128,128),d0				; Dot-screen Width/Height 128x128
(1) 2679/FFFFFFFFFFFF14FC :                     ; 		move.w	#vramLoc_Backgrnd,d1				; VRAM location
(1) 2680/FFFFFFFFFFFF14FC :                     ; 		moveq	#1,d2						; Double buffer mode
(1) 2681/FFFFFFFFFFFF14FC :                     ; 		move.w	#DEF_MaxStampCOut,d3				; Size of temporal cells
(1) 2682/FFFFFFFFFFFF14FC :                     ; 		lea	(SC2_OutCells),a0				; Location for the temporal cells
(1) 2683/FFFFFFFFFFFF14FC :                     ; 		bsr	Video_MdMcd_StampEnable
(1) 2684/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw($0000,$0002),d0				; Map position 0,2
(1) 2685/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(128/8,128/8),d1				; Size 128x128 in cells
(1) 2686/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2		; Map scroll width / Foreground
(1) 2687/FFFFFFFFFFFF14FC :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramMain).w,d3	; Get Auto-VRAM set by _StampEnable
(1) 2688/FFFFFFFFFFFF14FC :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2689/FFFFFFFFFFFF14FC :                     ; 		move.l	#splitw($0000+$20,$0002),d0			; X+$20
(1) 2690/FFFFFFFFFFFF14FC :                     ; 		move.w	(RAM_MdMcd_StampSett+mdstmp_vramSec).w,d3	; Get Second Auto-VRAM set by _StampEnable
(1) 2691/FFFFFFFFFFFF14FC :                     ; 		bsr	Video_MdMcd_StampDotMap
(1) 2692/FFFFFFFFFFFF14FC :                     
(1) 2693/FFFFFFFFFFFF14FC :                     ; --------------------------------------------------------
(1) 2694/FFFFFFFFFFFF14FC :                     ; Video_MdMcd_StampInit
(1) 2695/FFFFFFFFFFFF14FC :                     ;
(1) 2696/FFFFFFFFFFFF14FC :                     ; Make the first Stamp screens, Call this BEFORE entering
(1) 2697/FFFFFFFFFFFF14FC :                     ; your main loop.
(1) 2698/FFFFFFFFFFFF14FC :                     ; ** VDP DISPLAY MUST BE ENABLED **
(1) 2699/FFFFFFFFFFFF14FC :                     ;
(1) 2700/FFFFFFFFFFFF14FC :                     ; Breaks:
(1) 2701/FFFFFFFFFFFF14FC :                     ; ALL
(1) 2702/FFFFFFFFFFFF14FC :                     ; --------------------------------------------------------
(1) 2703/FFFFFFFFFFFF14FC :                     
(1) 2704/FFFFFFFFFFFF14FC :                     Video_MdMcd_StampInit:
(1) 2706/FFFFFFFFFFFF14FC : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2707/FFFFFFFFFFFF1500 : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2708/FFFFFFFFFFFF1504 : 672A                		beq.s	.exit_now
(1) 2709/FFFFFFFFFFFF1506 : 426E 000E           		clr.w	mdstmp_currOutFlip(a6)
(1) 2710/FFFFFFFFFFFF150A : 6100 1072           		bsr	System_MdMcd_WaitWRAM
(1) 2711/FFFFFFFFFFFF150E : 6100 0214           		bsr	vidMdMcd_SendStampInfo
(1) 2712/FFFFFFFFFFFF1512 : 6100 108C           		bsr	System_MdMcd_GiveWRAM
(1) 2713/FFFFFFFFFFFF1516 : 6106                		bsr	.mk_initbuff
(1) 2714/FFFFFFFFFFFF1518 : 6104                		bsr	.mk_initbuff
(1) 2715/FFFFFFFFFFFF151A : 6100 0002           		bsr	.mk_initbuff
(1) 2716/FFFFFFFFFFFF151E :                     .mk_initbuff:
(1) 2717/FFFFFFFFFFFF151E : 6100 0960           		bsr	System_Render
(1) 2718/FFFFFFFFFFFF1522 : 6110                		bsr	Video_MdMcd_StampRender
(1) 2719/FFFFFFFFFFFF1524 :                     .wait_finish:
(1) 2720/FFFFFFFFFFFF1524 : 6100 095A           		bsr	System_Render
(1) 2721/FFFFFFFFFFFF1528 : 610A                		bsr	Video_MdMcd_StampRender
(1) 2722/FFFFFFFFFFFF152A : 4A78 CC08           		tst.w	(RAM_MdMcd_StampSett+mdstmp_vramLen).w
(1) 2723/FFFFFFFFFFFF152E : 66F4                		bne.s	.wait_finish
(1) 2724/FFFFFFFFFFFF1530 :                     .exit_now:
(1) 2726/FFFFFFFFFFFF1530 : 6000 0A1E           		bra	Sound_Update
(1) 2727/FFFFFFFFFFFF1534 :                     
(1) 2728/FFFFFFFFFFFF1534 :                     ; --------------------------------------------------------
(1) 2729/FFFFFFFFFFFF1534 :                     ; Video_MdMcd_StampRender
(1) 2730/FFFFFFFFFFFF1534 :                     ;
(1) 2731/FFFFFFFFFFFF1534 :                     ; Update new Stamp output, drops frames if not ready.
(1) 2732/FFFFFFFFFFFF1534 :                     ; ** Call this during VBlank ONLY.
(1) 2733/FFFFFFFFFFFF1534 :                     ;
(1) 2734/FFFFFFFFFFFF1534 :                     ; Returns:
(1) 2735/FFFFFFFFFFFF1534 :                     ; bcc | No changes
(1) 2736/FFFFFFFFFFFF1534 :                     ; bcs | Output buffer changed (DOUBLE-buffer ONLY)
(1) 2737/FFFFFFFFFFFF1534 :                     ;
(1) 2738/FFFFFFFFFFFF1534 :                     ; Breaks:
(1) 2739/FFFFFFFFFFFF1534 :                     ; ALL
(1) 2740/FFFFFFFFFFFF1534 :                     ; --------------------------------------------------------
(1) 2741/FFFFFFFFFFFF1534 :                     
(1) 2742/FFFFFFFFFFFF1534 :                     Video_MdMcd_StampRender:
(1) 2744/FFFFFFFFFFFF1534 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2745/FFFFFFFFFFFF1538 : 0816 0007           		btst	#7,mdstmp_flags(a6)
(1) 2746/FFFFFFFFFFFF153C : 6700 0084           		beq	.not_yet
(1) 2747/FFFFFFFFFFFF1540 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2748/FFFFFFFFFFFF1544 : 6646                		bne	.draw_cells
(1) 2749/FFFFFFFFFFFF1546 :                     ; 		bsr	System_MdMcd_WaitWRAM
(1) 2750/FFFFFFFFFFFF1546 :                     ; 		move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 2751/FFFFFFFFFFFF1546 :                     ; 		btst	#3,d7
(1) 2752/FFFFFFFFFFFF1546 :                     ; 		bne.s	.not_yet
(1) 2753/FFFFFFFFFFFF1546 : 6100 1042           		bsr	System_MdMcd_CheckWRAM
(1) 2754/FFFFFFFFFFFF154A : 6676                		bne	.not_yet
(1) 2755/FFFFFFFFFFFF154C : 6100 0FD4           		bsr	System_MdMcd_SubWait
(1) 2756/FFFFFFFFFFFF1550 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2757/FFFFFFFFFFFF1554 : 0247 0001           		andi.w	#%01,d7
(1) 2758/FFFFFFFFFFFF1558 : 33C7 0023 BFFE      		move.w	d7,(sysmcd_wram+WRAM_StampCurrFlip).l
(1) 2759/FFFFFFFFFFFF155E : 33FC 0000 0023      		move.w	#0,(sysmcd_wram+WRAM_StampsDone).l
         FFFFFFFFFFFF1564 : BFFC             
(1) 2760/FFFFFFFFFFFF1566 : 0A6E 0001 000E      		eor.w	#1,mdstmp_currOutFlip(a6)
(1) 2761/FFFFFFFFFFFF156C : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2762/FFFFFFFFFFFF1570 : 6100 09DE           		bsr	Sound_Update
(1) 2763/FFFFFFFFFFFF1574 : 42AE 001A           		clr.l	mdstmp_buffIncr(a6)
(1) 2764/FFFFFFFFFFFF1578 : 426E 000A           		clr.w	mdstmp_vramIncr(a6)
(1) 2765/FFFFFFFFFFFF157C : 3D6E 0006 0008      		move.w	mdstmp_vramSize(a6),mdstmp_vramLen(a6)
(1) 2766/FFFFFFFFFFFF1582 : 6100 01A0           		bsr	vidMdMcd_SendStampInfo
(1) 2767/FFFFFFFFFFFF1586 : 6100 00A4           		bsr	.make_cellbuff
(1) 2768/FFFFFFFFFFFF158A : 6012                		bra	.first_step
(1) 2769/FFFFFFFFFFFF158C :                     
(1) 2770/FFFFFFFFFFFF158C :                     ; --------------------------------------------------------
(1) 2771/FFFFFFFFFFFF158C :                     ; Next cell slice
(1) 2772/FFFFFFFFFFFF158C :                     ; --------------------------------------------------------
(1) 2773/FFFFFFFFFFFF158C :                     
(1) 2774/FFFFFFFFFFFF158C :                     .draw_cells:
(1) 2775/FFFFFFFFFFFF158C : 6100 0F86           		bsr	System_MdMcd_Interrupt
(1) 2776/FFFFFFFFFFFF1590 :                     .wait_wram:
(1) 2777/FFFFFFFFFFFF1590 : 6100 09BE           		bsr	Sound_Update
(1) 2778/FFFFFFFFFFFF1594 : 6100 0FF4           		bsr	System_MdMcd_CheckWRAM
(1) 2779/FFFFFFFFFFFF1598 : 66F6                		bne	.wait_wram
(1) 2780/FFFFFFFFFFFF159A : 6100 0090           		bsr	.make_cellbuff
(1) 2781/FFFFFFFFFFFF159E :                     .first_step:
(1) 2782/FFFFFFFFFFFF159E : 6100 1000           		bsr	System_MdMcd_GiveWRAM
(1) 2783/FFFFFFFFFFFF15A2 : 6128                		bsr	.mkdma_buff
(1) 2784/FFFFFFFFFFFF15A4 : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)
(1) 2785/FFFFFFFFFFFF15A8 : 6618                		bne.s	.not_yet
(1) 2786/FFFFFFFFFFFF15AA : 0856 0006           		bchg	#6,mdstmp_flags(a6)		; Change buffer
(1) 2787/FFFFFFFFFFFF15AE : 6100 09A0           		bsr	Sound_Update
(1) 2788/FFFFFFFFFFFF15B2 : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2789/FFFFFFFFFFFF15B6 : 670A                		beq.s	.not_yet
(1) 2790/FFFFFFFFFFFF15B8 : 6100 0996           		bsr	Sound_Update
(1) 2791/FFFFFFFFFFFF15BC : 003C 0001           		or	#1,ccr
(1) 2792/FFFFFFFFFFFF15C0 : 4E75                		rts
(1) 2793/FFFFFFFFFFFF15C2 :                     .not_yet:
(1) 2794/FFFFFFFFFFFF15C2 : 6100 098C           		bsr	Sound_Update
(1) 2795/FFFFFFFFFFFF15C6 : 023C 001E           		and	#%11110,ccr
(1) 2796/FFFFFFFFFFFF15CA : 4E75                		rts
(1) 2797/FFFFFFFFFFFF15CC :                     
(1) 2798/FFFFFFFFFFFF15CC :                     ; --------------------------------------------------------
(1) 2799/FFFFFFFFFFFF15CC :                     
(1) 2800/FFFFFFFFFFFF15CC :                     .mkdma_buff:
(1) 2801/FFFFFFFFFFFF15CC : 202E 0012           		move.l	mdstmp_cellstorage(a6),d0
(1) 2802/FFFFFFFFFFFF15D0 : 7200                		moveq	#0,d1
(1) 2803/FFFFFFFFFFFF15D2 : 322E 0002           		move.w	mdstmp_vramMain(a6),d1
(1) 2804/FFFFFFFFFFFF15D6 : 0816 0000           		btst	#0,mdstmp_flags(a6)
(1) 2805/FFFFFFFFFFFF15DA : 670A                		beq.s	.first_one
(1) 2806/FFFFFFFFFFFF15DC : 0816 0006           		btst	#6,mdstmp_flags(a6)
(1) 2807/FFFFFFFFFFFF15E0 : 6704                		beq.s	.first_one
(1) 2808/FFFFFFFFFFFF15E2 : 322E 0004           		move.w	mdstmp_vramSec(a6),d1
(1) 2809/FFFFFFFFFFFF15E6 :                     .first_one:
(1) 2810/FFFFFFFFFFFF15E6 : D26E 000A           		add.w	mdstmp_vramIncr(a6),d1
(1) 2811/FFFFFFFFFFFF15EA : 362E 0008           		move.w	mdstmp_vramLen(a6),d3
(1) 2812/FFFFFFFFFFFF15EE : 342E 000C           		move.w	mdstmp_stmpoutb(a6),d2
(1) 2813/FFFFFFFFFFFF15F2 : B46E 0006           		cmp.w	mdstmp_vramSize(a6),d2
(1) 2814/FFFFFFFFFFFF15F6 : 6704                		beq.s	.exact_size
(1) 2815/FFFFFFFFFFFF15F8 : B642                		cmp.w	d2,d3
(1) 2816/FFFFFFFFFFFF15FA : 6E08                		bgt.s	.maximum
(1) 2817/FFFFFFFFFFFF15FC :                     .exact_size:
(1) 2818/FFFFFFFFFFFF15FC : 3403                		move.w	d3,d2
(1) 2819/FFFFFFFFFFFF15FE : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2820/FFFFFFFFFFFF1602 : 6014                		bra.s	.not_done
(1) 2821/FFFFFFFFFFFF1604 :                     .maximum:
(1) 2822/FFFFFFFFFFFF1604 : 3602                		move.w	d2,d3
(1) 2823/FFFFFFFFFFFF1606 : D76E 000A           		addi.w	d3,mdstmp_vramIncr(a6)
(1) 2824/FFFFFFFFFFFF160A : 976E 0008           		subi.w	d3,mdstmp_vramLen(a6)
(1) 2825/FFFFFFFFFFFF160E : 4A6E 0008           		tst.w	mdstmp_vramLen(a6)	; Failsafe
(1) 2826/FFFFFFFFFFFF1612 : 6A04                		bpl.s	.not_done
(1) 2827/FFFFFFFFFFFF1614 : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2828/FFFFFFFFFFFF1618 :                     .not_done:
(1) 2829/FFFFFFFFFFFF1618 : EB89                		lsl.l	#5,d1
(1) 2830/FFFFFFFFFFFF161A : EB8A                		lsl.l	#5,d2
(1) 2831/FFFFFFFFFFFF161C : 6100 F4D2           		bsr	Video_MakeDmaEntry
(1) 2833/FFFFFFFFFFFF1620 : 6000 092E           		bra	Sound_Update
(1) 2834/FFFFFFFFFFFF1624 :                     
(1) 2835/FFFFFFFFFFFF1624 :                     ; --------------------------------------------------------
(1) 2836/FFFFFFFFFFFF1624 :                     ; Get a slice of the dot-screen
(1) 2837/FFFFFFFFFFFF1624 :                     ; --------------------------------------------------------
(1) 2838/FFFFFFFFFFFF1624 :                     
(1) 2839/FFFFFFFFFFFF1624 :                     .out_locs:
(1) 2840/FFFFFFFFFFFF1624 : 0022 0000           		dc.l sysmcd_wram+WRAM_DotOutput_0
(1) 2841/FFFFFFFFFFFF1628 : 0022 8000           		dc.l sysmcd_wram+WRAM_DotOutput_1
(1) 2842/FFFFFFFFFFFF162C :                     .make_cellbuff:
(1) 2843/FFFFFFFFFFFF162C : 6100 0922           		bsr	Sound_Update
(1) 2844/FFFFFFFFFFFF1630 : 7E00                		moveq	#0,d7
(1) 2845/FFFFFFFFFFFF1632 : 3E2E 000E           		move.w	mdstmp_currOutFlip(a6),d7
(1) 2846/FFFFFFFFFFFF1636 : 0247 0001           		andi.w	#%01,d7
(1) 2847/FFFFFFFFFFFF163A : E58F                		lsl.l	#2,d7
(1) 2848/FFFFFFFFFFFF163C : 2E3B 70E6           		move.l	.out_locs(pc,d7.w),d7
(1) 2849/FFFFFFFFFFFF1640 : DEAE 001A           		add.l	mdstmp_buffIncr(a6),d7
(1) 2850/FFFFFFFFFFFF1644 : 2A47                		move.l	d7,a5
(1) 2851/FFFFFFFFFFFF1646 : 7E00                		moveq	#0,d7
(1) 2852/FFFFFFFFFFFF1648 : 3E2E 000C           		move.w	mdstmp_stmpoutb(a6),d7
(1) 2853/FFFFFFFFFFFF164C : 2C07                		move.l	d7,d6
(1) 2854/FFFFFFFFFFFF164E : EB8E                		lsl.l	#5,d6
(1) 2855/FFFFFFFFFFFF1650 : DDAE 001A           		add.l	d6,mdstmp_buffIncr(a6)
(1) 2856/FFFFFFFFFFFF1654 : 286E 0012           		movea.l	mdstmp_cellstorage(a6),a4
(1) 2857/FFFFFFFFFFFF1658 : 3C07                		move.w	d7,d6
(1) 2858/FFFFFFFFFFFF165A : E84E                		lsr.w	#4,d6
(1) 2859/FFFFFFFFFFFF165C : 5346                		subq.w	#1,d6
(1) 2860/FFFFFFFFFFFF165E :                     .copy_mid:
(1) 2861/FFFFFFFFFFFF165E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2862/FFFFFFFFFFFF1662 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2863/FFFFFFFFFFFF1666 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2864/FFFFFFFFFFFF166A : 48EC 0F0F 0020      		movem.l	d0-d3/a0-a3,$20(a4)
(1) 2865/FFFFFFFFFFFF1670 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2866/FFFFFFFFFFFF1674 : 48EC 0F0F 0040      		movem.l	d0-d3/a0-a3,$40(a4)
(1) 2867/FFFFFFFFFFFF167A : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2868/FFFFFFFFFFFF167E : 48EC 0F0F 0060      		movem.l	d0-d3/a0-a3,$60(a4)
(1) 2869/FFFFFFFFFFFF1684 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2870/FFFFFFFFFFFF1688 : 48EC 0F0F 0080      		movem.l	d0-d3/a0-a3,$80(a4)
(1) 2871/FFFFFFFFFFFF168E : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2872/FFFFFFFFFFFF1692 : 48EC 0F0F 00A0      		movem.l	d0-d3/a0-a3,$A0(a4)
(1) 2873/FFFFFFFFFFFF1698 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2874/FFFFFFFFFFFF169C : 48EC 0F0F 00C0      		movem.l	d0-d3/a0-a3,$C0(a4)
(1) 2875/FFFFFFFFFFFF16A2 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2876/FFFFFFFFFFFF16A6 : 48EC 0F0F 00E0      		movem.l	d0-d3/a0-a3,$E0(a4)
(1) 2877/FFFFFFFFFFFF16AC : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2878/FFFFFFFFFFFF16B0 : 48EC 0F0F 0100      		movem.l	d0-d3/a0-a3,$100(a4)
(1) 2879/FFFFFFFFFFFF16B6 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2880/FFFFFFFFFFFF16BA : 48EC 0F0F 0120      		movem.l	d0-d3/a0-a3,$120(a4)
(1) 2881/FFFFFFFFFFFF16C0 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2882/FFFFFFFFFFFF16C4 : 48EC 0F0F 0140      		movem.l	d0-d3/a0-a3,$140(a4)
(1) 2883/FFFFFFFFFFFF16CA : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2884/FFFFFFFFFFFF16CE : 48EC 0F0F 0160      		movem.l	d0-d3/a0-a3,$160(a4)
(1) 2885/FFFFFFFFFFFF16D4 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2886/FFFFFFFFFFFF16D8 : 48EC 0F0F 0180      		movem.l	d0-d3/a0-a3,$180(a4)
(1) 2887/FFFFFFFFFFFF16DE : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2888/FFFFFFFFFFFF16E2 : 48EC 0F0F 01A0      		movem.l	d0-d3/a0-a3,$1A0(a4)
(1) 2889/FFFFFFFFFFFF16E8 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2890/FFFFFFFFFFFF16EC : 48EC 0F0F 01C0      		movem.l	d0-d3/a0-a3,$1C0(a4)
(1) 2891/FFFFFFFFFFFF16F2 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2892/FFFFFFFFFFFF16F6 : 48EC 0F0F 01E0      		movem.l	d0-d3/a0-a3,$1E0(a4)
(1) 2893/FFFFFFFFFFFF16FC : 49EC 0200           		lea	$200(a4),a4
(1) 2894/FFFFFFFFFFFF1700 : 51CE FF5C           		dbf	d6,.copy_mid
(1) 2895/FFFFFFFFFFFF1704 : 6100 084A           		bsr	Sound_Update
(1) 2896/FFFFFFFFFFFF1708 : 0247 000F           		andi.w	#%1111,d7
(1) 2897/FFFFFFFFFFFF170C : 6712                		beq.s	.no_lsb
(1) 2898/FFFFFFFFFFFF170E : 5347                		subq.w	#1,d7
(1) 2899/FFFFFFFFFFFF1710 :                     .copy_lsb:
(1) 2900/FFFFFFFFFFFF1710 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2901/FFFFFFFFFFFF1714 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2902/FFFFFFFFFFFF1718 : 49EC 0020           		lea	$20(a4),a4
(1) 2903/FFFFFFFFFFFF171C : 51CF FFF2           		dbf	d7,.copy_lsb
(1) 2904/FFFFFFFFFFFF1720 :                     .no_lsb:
(1) 2905/FFFFFFFFFFFF1720 : 6000 082E           		bra	Sound_Update
(1) 2906/FFFFFFFFFFFF1724 :                     
(1) 2907/FFFFFFFFFFFF1724 :                     ; --------------------------------------------------------
(1) 2908/FFFFFFFFFFFF1724 :                     
(1) 2909/FFFFFFFFFFFF1724 :                     vidMdMcd_SendStampInfo:
(1) 2910/FFFFFFFFFFFF1724 : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2911/FFFFFFFFFFFF1728 : 49F9 0023 A000      		lea	(sysmcd_wram+WRAM_MdStampList).l,a4
(1) 2912/FFFFFFFFFFFF172E : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 2913/FFFFFFFFFFFF1732 :                     .copy_towram:
(1) 2914/FFFFFFFFFFFF1732 : 4CDD 0F0F           		movem.l	(a5)+,d0-d3/a0-a3
(1) 2915/FFFFFFFFFFFF1736 : 48D4 0F0F           		movem.l	d0-d3/a0-a3,(a4)
(1) 2916/FFFFFFFFFFFF173A : D8FC 0020           		adda	#$20,a4
(1) 2917/FFFFFFFFFFFF173E : 51CF FFF2           		dbf	d7,.copy_towram
(1) 2918/FFFFFFFFFFFF1742 : 4BF8 C800           		lea	(RAM_MdMcd_Stamps).w,a5
(1) 2919/FFFFFFFFFFFF1746 : 7E1F                		moveq	#MAX_MCDSTAMPS-1,d7
(1) 2920/FFFFFFFFFFFF1748 : 3C3C 0020           		move.w	#cdstamp_len,d6
(1) 2921/FFFFFFFFFFFF174C :                     .chk_spr:
(1) 2922/FFFFFFFFFFFF174C : 0815 0006           		btst	#6,cdstamp_flags(a5)
(1) 2923/FFFFFFFFFFFF1750 : 6702                		beq.s	.not_sprtemp
(1) 2924/FFFFFFFFFFFF1752 : 4215                		clr.b	cdstamp_flags(a5)
(1) 2925/FFFFFFFFFFFF1754 :                     .not_sprtemp:
(1) 2926/FFFFFFFFFFFF1754 : DAC6                		adda	d6,a5
(1) 2927/FFFFFFFFFFFF1756 : 51CF FFF4           		dbf	d7,.chk_spr
(1) 2928/FFFFFFFFFFFF175A : 6000 07F4           		bra	Sound_Update
(1) 2929/FFFFFFFFFFFF175E :                     
(1) 2930/FFFFFFFFFFFF175E :                     ; --------------------------------------------------------
(1) 2931/FFFFFFFFFFFF175E :                     ; Video_MdMcd_StampEnable
(1) 2932/FFFFFFFFFFFF175E :                     ;
(1) 2933/FFFFFFFFFFFF175E :                     ; Init/Enable SCD Stamp rendering
(1) 2934/FFFFFFFFFFFF175E :                     ;
(1) 2935/FFFFFFFFFFFF175E :                     ; Input:
(1) 2936/FFFFFFFFFFFF175E :                     ; a0   | RAM location to store cells
(1) 2937/FFFFFFFFFFFF175E :                     ; d0.l | Dot-Screen Width and Height: splitw(width,height)
(1) 2938/FFFFFFFFFFFF175E :                     ; d1.w | VRAM Main output
(1) 2939/FFFFFFFFFFFF175E :                     ; d2.w | Use double-buffering: No(0) or Yes(1)
(1) 2940/FFFFFFFFFFFF175E :                     ; d3.w | Size of out cells storage
(1) 2941/FFFFFFFFFFFF175E :                     ;        Default tag: DEF_MaxStampCOut
(1) 2942/FFFFFFFFFFFF175E :                     ;
(1) 2943/FFFFFFFFFFFF175E :                     ; Notes:
(1) 2944/FFFFFFFFFFFF175E :                     ; - Use only Width and Height aligned by 8
(1) 2945/FFFFFFFFFFFF175E :                     ; - Width and Height will also be used to get the
(1) 2946/FFFFFFFFFFFF175E :                     ;   the CENTER point in ALL Stamps.
(1) 2947/FFFFFFFFFFFF175E :                     ; --------------------------------------------------------
(1) 2948/FFFFFFFFFFFF175E :                     
(1) 2949/FFFFFFFFFFFF175E :                     Video_MdMcd_StampEnable:
(1) 2950/FFFFFFFFFFFF175E : 48E7 8306           		movem.l	d0/d6-d7/a5-a6,-(sp)
(1) 2951/FFFFFFFFFFFF1762 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2952/FFFFFFFFFFFF1766 : 2A4E                		move.l	a6,a5
(1) 2953/FFFFFFFFFFFF1768 : 3E3C 001D           		move.w	#mdstmp_len-1,d7
(1) 2954/FFFFFFFFFFFF176C : 7C00                		moveq	#0,d6
(1) 2955/FFFFFFFFFFFF176E :                     .clr_sett:
(1) 2956/FFFFFFFFFFFF176E : 3AC6                		move.w	d6,(a5)+
(1) 2957/FFFFFFFFFFFF1770 : 51CF FFFC           		dbf	d7,.clr_sett
(1) 2958/FFFFFFFFFFFF1774 : 3D43 000C           		move.w	d3,mdstmp_stmpoutb(a6)
(1) 2959/FFFFFFFFFFFF1778 : 2D48 0012           		move.l	a0,mdstmp_cellstorage(a6)
(1) 2960/FFFFFFFFFFFF177C : 3D41 0002           		move.w	d1,mdstmp_vramMain(a6)
(1) 2961/FFFFFFFFFFFF1780 : 7E00                		moveq	#0,d7
(1) 2962/FFFFFFFFFFFF1782 : 2C00                		move.l	d0,d6
(1) 2963/FFFFFFFFFFFF1784 : 4846                		swap	d6
(1) 2964/FFFFFFFFFFFF1786 : 3E00                		move.w	d0,d7
(1) 2965/FFFFFFFFFFFF1788 : CEC6                		mulu.w	d6,d7
(1) 2966/FFFFFFFFFFFF178A : EC8F                		lsr.l	#5+1,d7
(1) 2967/FFFFFFFFFFFF178C : 3D47 0006           		move.w	d7,mdstmp_vramSize(a6)
(1) 2968/FFFFFFFFFFFF1790 : 0896 0000           		bclr	#0,mdstmp_flags(a6)
(1) 2969/FFFFFFFFFFFF1794 : 4A42                		tst.w	d2
(1) 2970/FFFFFFFFFFFF1796 : 670E                		beq.s	.dont_use
(1) 2971/FFFFFFFFFFFF1798 : 3C2E 0002           		move.w	mdstmp_vramMain(a6),d6
(1) 2972/FFFFFFFFFFFF179C : DC47                		add.w	d7,d6
(1) 2973/FFFFFFFFFFFF179E : 3D46 0004           		move.w	d6,mdstmp_vramSec(a6)
(1) 2974/FFFFFFFFFFFF17A2 : 08D6 0000           		bset	#0,mdstmp_flags(a6)
(1) 2975/FFFFFFFFFFFF17A6 :                     .dont_use:
(1) 2976/FFFFFFFFFFFF17A6 : 08D6 0007           		bset	#7,mdstmp_flags(a6)
(1) 2977/FFFFFFFFFFFF17AA : 2E00                		move.l	d0,d7
(1) 2978/FFFFFFFFFFFF17AC : 4847                		swap	d7
(1) 2979/FFFFFFFFFFFF17AE : 33C7 00A1 2010      		move.w	d7,(sysmcd_reg+mcd_dcomm_m).l
(1) 2980/FFFFFFFFFFFF17B4 : 33C0 00A1 2012      		move.w	d0,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 2981/FFFFFFFFFFFF17BA : 6100 0DE4           		bsr	System_MdMcd_GiveWRAM
(1) 2982/FFFFFFFFFFFF17BE : 303C 0018           		move.w	#$18,d0
(1) 2983/FFFFFFFFFFFF17C2 : 6100 0D7A           		bsr	System_MdMcd_SubTask
(1) 2984/FFFFFFFFFFFF17C6 : 6100 0DB6           		bsr	System_MdMcd_WaitWRAM
(1) 2985/FFFFFFFFFFFF17CA : 4CDF 60C1           		movem.l	(sp)+,d0/d6-d7/a5-a6
(1) 2986/FFFFFFFFFFFF17CE : 4E75                		rts
(1) 2987/FFFFFFFFFFFF17D0 :                     
(1) 2988/FFFFFFFFFFFF17D0 :                     ; --------------------------------------------------------
(1) 2989/FFFFFFFFFFFF17D0 :                     ; Video_MdMcd_StampDisable
(1) 2990/FFFFFFFFFFFF17D0 :                     ;
(1) 2991/FFFFFFFFFFFF17D0 :                     ; Disable SCD Stamp rendering
(1) 2992/FFFFFFFFFFFF17D0 :                     ; --------------------------------------------------------
(1) 2993/FFFFFFFFFFFF17D0 :                     
(1) 2994/FFFFFFFFFFFF17D0 :                     Video_MdMcd_StampDisable:
(1) 2995/FFFFFFFFFFFF17D0 : 48E7 8002           		movem.l	d0/a6,-(sp)
(1) 2996/FFFFFFFFFFFF17D4 : 4DF8 CC00           		lea	(RAM_MdMcd_StampSett).w,a6
(1) 2997/FFFFFFFFFFFF17D8 : 0896 0007           		bclr	#7,mdstmp_flags(a6)
(1) 2998/FFFFFFFFFFFF17DC : 426E 0008           		clr.w	mdstmp_vramLen(a6)
(1) 2999/FFFFFFFFFFFF17E0 : 6100 0DBE           		bsr	System_MdMcd_GiveWRAM
(1) 3000/FFFFFFFFFFFF17E4 : 7019                		moveq	#$19,d0
(1) 3001/FFFFFFFFFFFF17E6 : 6100 0D56           		bsr	System_MdMcd_SubTask
(1) 3002/FFFFFFFFFFFF17EA : 4CDF 4001           		movem.l	(sp)+,d0/a6
(1) 3003/FFFFFFFFFFFF17EE : 4E75                		rts
(1) 3004/FFFFFFFFFFFF17F0 :                     
(1) 3005/FFFFFFFFFFFF17F0 :                     ; --------------------------------------------------------
(1) 3006/FFFFFFFFFFFF17F0 :                     ; Video_MdMcd_StampDotMap
(1) 3007/FFFFFFFFFFFF17F0 :                     ;
(1) 3008/FFFFFFFFFFFF17F0 :                     ; Show the stamp screen
(1) 3009/FFFFFFFFFFFF17F0 :                     ;
(1) 3010/FFFFFFFFFFFF17F0 :                     ; Input:
(1) 3011/FFFFFFFFFFFF17F0 :                     ; d0.l | X/Y Position: splitw(x_pos,y_pos)
(1) 3012/FFFFFFFFFFFF17F0 :                     ; d1.l | Width/Height: splitw(width/8,height/8)
(1) 3013/FFFFFFFFFFFF17F0 :                     ; d2.l | Screen Width/VRAM location:
(1) 3014/FFFFFFFFFFFF17F0 :                     ;        splitw(sw_size,vram_loc)
(1) 3015/FFFFFFFFFFFF17F0 :                     ; d3.w | VRAM start
(1) 3016/FFFFFFFFFFFF17F0 :                     ; --------------------------------------------------------
(1) 3017/FFFFFFFFFFFF17F0 :                     
(1) 3018/FFFFFFFFFFFF17F0 :                     Video_MdMcd_StampDotMap:
(1) 3019/FFFFFFFFFFFF17F0 : 48E7 1F0E           		movem.l	d3-d7/a4-a6,-(sp)
(1) 3020/FFFFFFFFFFFF17F4 : 4DF9 00C0 0000      		lea	(vdp_data).l,a6
(1) 3021/FFFFFFFFFFFF17FA : 3E02                		move.w	d2,d7
(1) 3022/FFFFFFFFFFFF17FC : 2C02                		move.l	d2,d6
(1) 3023/FFFFFFFFFFFF17FE : 4846                		swap	d6
(1) 3024/FFFFFFFFFFFF1800 : 3A00                		move.w	d0,d5
(1) 3025/FFFFFFFFFFFF1802 : CAC6                		mulu.w	d6,d5
(1) 3026/FFFFFFFFFFFF1804 : 2800                		move.l	d0,d4
(1) 3027/FFFFFFFFFFFF1806 : 4844                		swap	d4
(1) 3028/FFFFFFFFFFFF1808 : D844                		add.w	d4,d4
(1) 3029/FFFFFFFFFFFF180A : DA44                		add.w	d4,d5
(1) 3030/FFFFFFFFFFFF180C : DE45                		add.w	d5,d7
(1) 3031/FFFFFFFFFFFF180E : 7A00                		moveq	#0,d5
(1) 3032/FFFFFFFFFFFF1810 : 3A07                		move.w	d7,d5
(1) 3033/FFFFFFFFFFFF1812 : 0247 3FFF           		andi.w	#$3FFF,d7
(1) 3034/FFFFFFFFFFFF1816 : 8E7C 4000           		or.w	#$4000,d7
(1) 3035/FFFFFFFFFFFF181A : E55D                		rol.w	#2,d5
(1) 3036/FFFFFFFFFFFF181C : 0245 0003           		andi.w	#%11,d5
(1) 3037/FFFFFFFFFFFF1820 : 4845                		swap	d5
(1) 3038/FFFFFFFFFFFF1822 : 2A48                		move.l	a0,a5
(1) 3039/FFFFFFFFFFFF1824 : 2801                		move.l	d1,d4
(1) 3040/FFFFFFFFFFFF1826 : 4844                		swap	d4
(1) 3041/FFFFFFFFFFFF1828 : 5344                		subq.w	#1,d4
(1) 3042/FFFFFFFFFFFF182A : 6B30                		bmi.s	.bad_size
(1) 3043/FFFFFFFFFFFF182C :                     .x_loop:
(1) 3044/FFFFFFFFFFFF182C : 2844                		move.l	d4,a4
(1) 3045/FFFFFFFFFFFF182E : 3801                		move.w	d1,d4
(1) 3046/FFFFFFFFFFFF1830 : 5344                		subq.w	#1,d4
(1) 3047/FFFFFFFFFFFF1832 :                     .y_loop:
(1) 3048/FFFFFFFFFFFF1832 : 4844                		swap	d4
(1) 3049/FFFFFFFFFFFF1834 : 3807                		move.w	d7,d4
(1) 3050/FFFFFFFFFFFF1836 : D845                		add.w	d5,d4
(1) 3051/FFFFFFFFFFFF1838 : 4845                		swap	d5
(1) 3052/FFFFFFFFFFFF183A : 3D44 0004           		move.w	d4,4(a6)
(1) 3053/FFFFFFFFFFFF183E : 3D45 0004           		move.w	d5,4(a6)
(1) 3054/FFFFFFFFFFFF1842 : 4845                		swap	d5
(1) 3055/FFFFFFFFFFFF1844 : 3C83                		move.w	d3,(a6)
(1) 3056/FFFFFFFFFFFF1846 : 5243                		addq.w	#1,d3
(1) 3057/FFFFFFFFFFFF1848 : DA46                		add.w	d6,d5
(1) 3058/FFFFFFFFFFFF184A : 4844                		swap	d4
(1) 3059/FFFFFFFFFFFF184C : 51CC FFE4           		dbf	d4,.y_loop
(1) 3060/FFFFFFFFFFFF1850 : DE7C 0002           		add.w	#2,d7
(1) 3061/FFFFFFFFFFFF1854 : 4245                		clr.w	d5
(1) 3062/FFFFFFFFFFFF1856 : 280C                		move.l	a4,d4
(1) 3063/FFFFFFFFFFFF1858 : 51CC FFD2           		dbf	d4,.x_loop
(1) 3064/FFFFFFFFFFFF185C :                     .bad_size:
(1) 3065/FFFFFFFFFFFF185C : 4CDF 70F8           		movem.l	(sp)+,d3-d7/a4-a6
(1) 3066/FFFFFFFFFFFF1860 : 4E75                		rts
(1) 3067/FFFFFFFFFFFF1862 :                     
(1) 3068/FFFFFFFFFFFF1862 :                     ; --------------------------------------------------------
(1) 3069/FFFFFFFFFFFF1862 :                     ; Video_MdMcd_StampSet
(1) 3070/FFFFFFFFFFFF1862 :                     ;
(1) 3071/FFFFFFFFFFFF1862 :                     ; Set or Make a Sega CD Stamp
(1) 3072/FFFFFFFFFFFF1862 :                     ;
(1) 3073/FFFFFFFFFFFF1862 :                     ; Input:
(1) 3074/FFFFFFFFFFFF1862 :                     ; a0   | Index slot (_SetStamp ONLY)
(1) 3075/FFFFFFFFFFFF1862 :                     ; a1   | Map slot to use
(1) 3076/FFFFFFFFFFFF1862 :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3077/FFFFFFFFFFFF1862 :                     ; d1.l | Rotation and Scale: splitw(rot,scale)
(1) 3078/FFFFFFFFFFFF1862 :                     ; d2.l | Width/Height: split(width,height)
(1) 3079/FFFFFFFFFFFF1862 :                     ; d3.l | Center X/Y: splitw(cx,cy)
(1) 3080/FFFFFFFFFFFF1862 :                     ;
(1) 3081/FFFFFFFFFFFF1862 :                     ; Returns:
(1) 3082/FFFFFFFFFFFF1862 :                     ; bcc | Wrote sucessfully
(1) 3083/FFFFFFFFFFFF1862 :                     ; bcs | Ran out of stamps
(1) 3084/FFFFFFFFFFFF1862 :                     ;
(1) 3085/FFFFFFFFFFFF1862 :                     ; Notes:
(1) 3086/FFFFFFFFFFFF1862 :                     ; - This resets the X/Y/Z position and rotations
(1) 3087/FFFFFFFFFFFF1862 :                     ; --------------------------------------------------------
(1) 3088/FFFFFFFFFFFF1862 :                     
(1) 3089/FFFFFFFFFFFF1862 :                     Video_MdMcd_SetStamp:
(1) 3090/FFFFFFFFFFFF1862 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3091/FFFFFFFFFFFF1866 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3092/FFFFFFFFFFFF186A : 2E08                		move.l	a0,d7
(1) 3093/FFFFFFFFFFFF186C : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3094/FFFFFFFFFFFF186E : 601E                		bra	vidMdMcd_MkStamp
(1) 3095/FFFFFFFFFFFF1870 :                     
(1) 3096/FFFFFFFFFFFF1870 :                     Video_MdMcd_MakeStamp:
(1) 3097/FFFFFFFFFFFF1870 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3098/FFFFFFFFFFFF1874 : 7E00                		moveq	#0,d7
(1) 3099/FFFFFFFFFFFF1876 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3100/FFFFFFFFFFFF187A : 7C1F                		moveq	#MAX_MCDSTAMPS-1,d6
(1) 3101/FFFFFFFFFFFF187C :                     .chk_free:
(1) 3102/FFFFFFFFFFFF187C : 4A16                		tst.b	cdstamp_flags(a6)
(1) 3103/FFFFFFFFFFFF187E : 670C                		beq.s	.mk_spr
(1) 3104/FFFFFFFFFFFF1880 : 5247                		addq.w	#1,d7
(1) 3105/FFFFFFFFFFFF1882 : DCFC 0020           		adda	#cdstamp_len,a6
(1) 3106/FFFFFFFFFFFF1886 : 51CE FFF4           		dbf	d6,.chk_free
(1) 3107/FFFFFFFFFFFF188A : 605C                		bra.s	vidMdMcd_CError
(1) 3108/FFFFFFFFFFFF188C :                     .mk_spr:
(1) 3109/FFFFFFFFFFFF188C : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3110/FFFFFFFFFFFF188E :                     
(1) 3111/FFFFFFFFFFFF188E :                     vidMdMcd_MkStamp:
(1) 3112/FFFFFFFFFFFF188E : 0247 00FF           		andi.w	#$FF,d7
(1) 3113/FFFFFFFFFFFF1892 : 0C47 0020           		cmpi.w	#MAX_MCDSTAMPS,d7
(1) 3114/FFFFFFFFFFFF1896 : 6C50                		bge.s	vidMdMcd_CError
(1) 3115/FFFFFFFFFFFF1898 : EB4F                		lsl.w	#5,d7
(1) 3116/FFFFFFFFFFFF189A : DCC7                		adda	d7,a6
(1) 3117/FFFFFFFFFFFF189C : 3E09                		move.w	a1,d7
(1) 3118/FFFFFFFFFFFF189E : 0247 00FF           		andi.w	#$FF,d7
(1) 3119/FFFFFFFFFFFF18A2 : 1D47 0001           		move.b	d7,cdstamp_map(a6)
(1) 3120/FFFFFFFFFFFF18A6 : 2E00                		move.l	d0,d7
(1) 3121/FFFFFFFFFFFF18A8 : 4847                		swap	d7
(1) 3122/FFFFFFFFFFFF18AA : 3D40 0008           		move.w  d0,cdstamp_y(a6)
(1) 3123/FFFFFFFFFFFF18AE : 3D47 0006           		move.w  d7,cdstamp_x(a6)
(1) 3124/FFFFFFFFFFFF18B2 : 2E02                		move.l	d2,d7
(1) 3125/FFFFFFFFFFFF18B4 : 4847                		swap	d7
(1) 3126/FFFFFFFFFFFF18B6 : 3D42 000C           		move.w  d2,cdstamp_hght(a6)
(1) 3127/FFFFFFFFFFFF18BA : 3D47 000A           		move.w  d7,cdstamp_wdth(a6)
(1) 3128/FFFFFFFFFFFF18BE : 2E03                		move.l	d3,d7
(1) 3129/FFFFFFFFFFFF18C0 : 4847                		swap	d7
(1) 3130/FFFFFFFFFFFF18C2 : 3D43 0004           		move.w  d3,cdstamp_cy(a6)
(1) 3131/FFFFFFFFFFFF18C6 : 3D47 0002           		move.w  d7,cdstamp_cx(a6)
(1) 3132/FFFFFFFFFFFF18CA :                     
(1) 3133/FFFFFFFFFFFF18CA : 2E01                		move.l	d1,d7
(1) 3134/FFFFFFFFFFFF18CC : 4847                		swap	d7
(1) 3135/FFFFFFFFFFFF18CE : 3D41 000E           		move.w	d1,cdstamp_scale(a6)
(1) 3136/FFFFFFFFFFFF18D2 : 3D47 0010           		move.w	d7,cdstamp_rot(a6)
(1) 3137/FFFFFFFFFFFF18D6 :                     
(1) 3138/FFFFFFFFFFFF18D6 : 3E3C 0080           		move.w	#$80,d7
(1) 3139/FFFFFFFFFFFF18DA : 8E46                		or.w	d6,d7
(1) 3140/FFFFFFFFFFFF18DC : 1C87                		move.b	d7,cdstamp_flags(a6)	; TODO: add the RPT bit ($01)
(1) 3141/FFFFFFFFFFFF18DE : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3142/FFFFFFFFFFFF18E2 : 023C 001E           		andi	#%11110,ccr
(1) 3143/FFFFFFFFFFFF18E6 : 4E75                		rts
(1) 3144/FFFFFFFFFFFF18E8 :                     ; Carry error
(1) 3145/FFFFFFFFFFFF18E8 :                     vidMdMcd_CError:
(1) 3146/FFFFFFFFFFFF18E8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3147/FFFFFFFFFFFF18EC : 003C 0001           		or	#1,ccr			; Return Error
(1) 3148/FFFFFFFFFFFF18F0 : 4E75                		rts
(1) 3149/FFFFFFFFFFFF18F2 :                     
(1) 3150/FFFFFFFFFFFF18F2 :                     ; --------------------------------------------------------
(1) 3151/FFFFFFFFFFFF18F2 :                     
(1) 3152/FFFFFFFFFFFF18F2 :                     vidMdMcd_RdStmpSlot:
(1) 3153/FFFFFFFFFFFF18F2 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3154/FFFFFFFFFFFF18F6 : 7E00                		moveq	#0,d7
(1) 3155/FFFFFFFFFFFF18F8 : 3E00                		move.w	d0,d7
(1) 3156/FFFFFFFFFFFF18FA :                     ; 		cmpi.w	#MAX_MCDSTAMPS,d0
(1) 3157/FFFFFFFFFFFF18FA :                     ; 		bge.s	.got_full
(1) 3158/FFFFFFFFFFFF18FA : EB4F                		lsl.w	#5,d7			; FIXED SIZE $20
(1) 3159/FFFFFFFFFFFF18FC : DCC7                		adda	d7,a6
(1) 3160/FFFFFFFFFFFF18FE :                     ; .got_full:
(1) 3161/FFFFFFFFFFFF18FE : 4E75                		rts
(1) 3162/FFFFFFFFFFFF1900 :                     
(1) 3163/FFFFFFFFFFFF1900 :                     ; --------------------------------------------------------
(1) 3164/FFFFFFFFFFFF1900 :                     ; Video_MdMcd_StampMap
(1) 3165/FFFFFFFFFFFF1900 :                     ; --------------------------------------------------------
(1) 3166/FFFFFFFFFFFF1900 :                     
(1) 3167/FFFFFFFFFFFF1900 :                     Video_MdMcd_StampMap:
(1) 3168/FFFFFFFFFFFF1900 : 4E75                		rts
(1) 3169/FFFFFFFFFFFF1902 :                     
(1) 3170/FFFFFFFFFFFF1902 :                     
(1) 3171/FFFFFFFFFFFF1902 :                     ; --------------------------------------------------------
(1) 3172/FFFFFFFFFFFF1902 :                     ; Video_MdMcd_StampReset
(1) 3173/FFFFFFFFFFFF1902 :                     ;
(1) 3174/FFFFFFFFFFFF1902 :                     ; Clear ALL Stamps
(1) 3175/FFFFFFFFFFFF1902 :                     ; --------------------------------------------------------
(1) 3176/FFFFFFFFFFFF1902 :                     
(1) 3177/FFFFFFFFFFFF1902 :                     Video_MdMcd_StampReset:
(1) 3179/FFFFFFFFFFFF1902 : 48E7 0102           		movem.l	d7/a6,-(sp)
(1) 3180/FFFFFFFFFFFF1906 : 4DF8 C800           		lea	(RAM_MdMcd_Stamps).w,a6
(1) 3181/FFFFFFFFFFFF190A : 3E3C 001F           		move.w	#MAX_MCDSTAMPS-1,d7
(1) 3182/FFFFFFFFFFFF190E :                     .clr_stamps:
(1) 3183/FFFFFFFFFFFF190E :                     	rept $20/4
(1) 3184/FFFFFFFFFFFF190E :                     		clr.l	(a6)+
(1) 3185/FFFFFFFFFFFF190E :                     	endm
(1) 3184/FFFFFFFFFFFF190E : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF1910 : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF1912 : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF1914 : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF1916 : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF1918 : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF191A : 429E                		clr.l	(a6)+
(1) 3184/FFFFFFFFFFFF191C : 429E                		clr.l	(a6)+
(1) 3186/FFFFFFFFFFFF191E : 51CF FFEE           		dbf	d7,.clr_stamps
(1) 3187/FFFFFFFFFFFF1922 : 4CDF 4080           		movem.l	(sp)+,d7/a6
(1) 3189/FFFFFFFFFFFF1926 : 4E75                		rts
(1) 3190/FFFFFFFFFFFF1928 :                     
(1) 3191/FFFFFFFFFFFF1928 :                     ; ====================================================================
(1) 3192/FFFFFFFFFFFF1928 :                     
(1) 3194/FFFFFFFFFFFF1928 :                     
(1) 3195/FFFFFFFFFFFF1928 :                     ; ====================================================================
(1) 3196/FFFFFFFFFFFF1928 :                     ; ----------------------------------------------------------------
(1) 3197/FFFFFFFFFFFF1928 :                     ; Video routines for 32X
(1) 3198/FFFFFFFFFFFF1928 :                     ; ----------------------------------------------------------------
(1) 3199/FFFFFFFFFFFF1928 :                     
(1) 3201/FFFFFFFFFFFF1928 :                     
(1) 3202/FFFFFFFFFFFF1928 :                     ; --------------------------------------------------------
(1) 3203/FFFFFFFFFFFF1928 :                     ; Video_MdMars_SetSync
(1) 3204/FFFFFFFFFFFF1928 :                     ;
(1) 3205/FFFFFFFFFFFF1928 :                     ; Set a bit to wait for DREQ-RAM swap
(1) 3206/FFFFFFFFFFFF1928 :                     ; --------------------------------------------------------
(1) 3207/FFFFFFFFFFFF1928 :                     
(1) 3208/FFFFFFFFFFFF1928 :                     Video_MdMars_SetSync:
(1) 3209/FFFFFFFFFFFF1928 : 08F9 0004 00A1      		bset	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF192E : 512D             
(1) 3210/FFFFFFFFFFFF1930 : 4E75                		rts
(1) 3211/FFFFFFFFFFFF1932 :                     
(1) 3212/FFFFFFFFFFFF1932 :                     ; --------------------------------------------------------
(1) 3213/FFFFFFFFFFFF1932 :                     ; Video_MdMars_WaitSync
(1) 3214/FFFFFFFFFFFF1932 :                     ;
(1) 3215/FFFFFFFFFFFF1932 :                     ; Wait if the DREQ-RAM buffer is ready to be
(1) 3216/FFFFFFFFFFFF1932 :                     ; rewritten.
(1) 3217/FFFFFFFFFFFF1932 :                     ; --------------------------------------------------------
(1) 3218/FFFFFFFFFFFF1932 :                     
(1) 3219/FFFFFFFFFFFF1932 :                     Video_MdMars_WaitSync:
(1) 3220/FFFFFFFFFFFF1932 : 0839 0004 00A1      		btst	#4,(sysmars_reg+comm12+1).l
         FFFFFFFFFFFF1938 : 512D             
(1) 3221/FFFFFFFFFFFF193A : 66F6                		bne.s	Video_MdMars_WaitSync
(1) 3222/FFFFFFFFFFFF193C : 4E75                		rts
(1) 3223/FFFFFFFFFFFF193E :                     
(1) 3224/FFFFFFFFFFFF193E :                     ; --------------------------------------------------------
(1) 3225/FFFFFFFFFFFF193E :                     ; Video_MdMars_WaitFrame
(1) 3226/FFFFFFFFFFFF193E :                     ; --------------------------------------------------------
(1) 3227/FFFFFFFFFFFF193E :                     
(1) 3228/FFFFFFFFFFFF193E :                     Video_MdMars_WaitFrame:
(1) 3229/FFFFFFFFFFFF193E : 61F2                		bsr	Video_MdMars_WaitSync
(1) 3230/FFFFFFFFFFFF1940 : 60E6                		bra	Video_MdMars_SetSync
(1) 3231/FFFFFFFFFFFF1942 :                     
(1) 3232/FFFFFFFFFFFF1942 :                     ; --------------------------------------------------------
(1) 3233/FFFFFFFFFFFF1942 :                     ; Video_MdMars_Cleanup
(1) 3234/FFFFFFFFFFFF1942 :                     ;
(1) 3235/FFFFFFFFFFFF1942 :                     ; Manual cleanup after sending current data to 32X
(1) 3236/FFFFFFFFFFFF1942 :                     ; --------------------------------------------------------
(1) 3237/FFFFFFFFFFFF1942 :                     
(1) 3238/FFFFFFFFFFFF1942 :                     Video_MdMars_Cleanup:
(1) 3240/FFFFFFFFFFFF1942 : 3E39 00A1 512C      		move.w	(sysmars_reg+comm12).l,d7	; Check current 32X video mode
(1) 3241/FFFFFFFFFFFF1948 : 0247 0007           		andi.w	#%00000111,d7
(1) 3242/FFFFFFFFFFFF194C : DE47                		add.w	d7,d7
(1) 3243/FFFFFFFFFFFF194E : 3E3B 7006           		move.w	.cleanlist(pc,d7.w),d7
(1) 3244/FFFFFFFFFFFF1952 : 4EFB 7002           		jmp	.cleanlist(pc,d7.w)
(1) 3245/FFFFFFFFFFFF1956 :                     ; --------------------------------------------------------
(1) 3246/FFFFFFFFFFFF1956 :                     .cleanlist:
(1) 3247/FFFFFFFFFFFF1956 : 0010                		dc.w .none-.cleanlist
(1) 3248/FFFFFFFFFFFF1958 : 0012                		dc.w .mode_2D-.cleanlist
(1) 3249/FFFFFFFFFFFF195A : 0046                		dc.w .mode_3D-.cleanlist
(1) 3250/FFFFFFFFFFFF195C : 0010                		dc.w .none-.cleanlist
(1) 3251/FFFFFFFFFFFF195E : 0010                		dc.w .none-.cleanlist
(1) 3252/FFFFFFFFFFFF1960 : 0010                		dc.w .none-.cleanlist
(1) 3253/FFFFFFFFFFFF1962 : 0010                		dc.w .none-.cleanlist
(1) 3254/FFFFFFFFFFFF1964 : 0010                		dc.w .none-.cleanlist
(1) 3255/FFFFFFFFFFFF1966 :                     ; --------------------------------------------------------
(1) 3256/FFFFFFFFFFFF1966 :                     .none:
(1) 3257/FFFFFFFFFFFF1966 : 4E75                		rts
(1) 3258/FFFFFFFFFFFF1968 :                     ; --------------------------------------------------------
(1) 3259/FFFFFFFFFFFF1968 :                     .mode_2D:
(1) 3260/FFFFFFFFFFFF1968 : 4DF8 D080           		lea	(RAM_MdMars_ScrlData).w,a6	; Clear the redraw bit here
(1) 3261/FFFFFFFFFFFF196C : 3E3C 01FF           		move.w	#((512/16)*(256/16))-1,d7
(1) 3262/FFFFFFFFFFFF1970 :                     .check_bit:
(1) 3263/FFFFFFFFFFFF1970 : 3C16                		move.w	(a6),d6
(1) 3264/FFFFFFFFFFFF1972 : 6A06                		bpl.s	.no_redraw
(1) 3265/FFFFFFFFFFFF1974 : 0246 7FFF           		andi.w	#$7FFF,d6
(1) 3266/FFFFFFFFFFFF1978 : 3C86                		move.w	d6,(a6)
(1) 3267/FFFFFFFFFFFF197A :                     .no_redraw:
(1) 3268/FFFFFFFFFFFF197A : DCFC 0002           		adda	#2,a6
(1) 3269/FFFFFFFFFFFF197E : 51CF FFF0           		dbf	d7,.check_bit
(1) 3270/FFFFFFFFFFFF1982 : 4DF8 D480           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3271/FFFFFFFFFFFF1986 : 7E1F                		moveq	#MAX_MARSSPR-1,d7
(1) 3272/FFFFFFFFFFFF1988 : 3C3C 0010           		move.w	#sspr_len,d6
(1) 3273/FFFFFFFFFFFF198C :                     .chk_spr:
(1) 3274/FFFFFFFFFFFF198C : 0816 0006           		btst	#6,sspr_flags(a6)
(1) 3275/FFFFFFFFFFFF1990 : 6702                		beq.s	.not_sprtemp
(1) 3276/FFFFFFFFFFFF1992 : 4216                		clr.b	sspr_flags(a6)
(1) 3277/FFFFFFFFFFFF1994 :                     .not_sprtemp:
(1) 3278/FFFFFFFFFFFF1994 : DCC6                		adda	d6,a6
(1) 3279/FFFFFFFFFFFF1996 : 51CF FFF4           		dbf	d7,.chk_spr
(1) 3280/FFFFFFFFFFFF199A :                     .no_freeze:
(1) 3281/FFFFFFFFFFFF199A : 4E75                		rts
(1) 3282/FFFFFFFFFFFF199C :                     
(1) 3283/FFFFFFFFFFFF199C :                     ; --------------------------------------------------------
(1) 3284/FFFFFFFFFFFF199C :                     
(1) 3285/FFFFFFFFFFFF199C :                     .mode_3D:
(1) 3286/FFFFFFFFFFFF199C : 4DF8 D080           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3287/FFFFFFFFFFFF19A0 : 7E17                		moveq	#MAX_MARSMSPR-1,d7
(1) 3288/FFFFFFFFFFFF19A2 : 3C3C 0020           		move.w	#mspr_len,d6
(1) 3289/FFFFFFFFFFFF19A6 :                     .chk_temp:
(1) 3290/FFFFFFFFFFFF19A6 : 0816 0006           		btst	#6,mspr_flags(a6)
(1) 3291/FFFFFFFFFFFF19AA : 6702                		beq.s	.not_temp
(1) 3292/FFFFFFFFFFFF19AC : 4216                		clr.b	mspr_flags(a6)
(1) 3293/FFFFFFFFFFFF19AE :                     .not_temp:
(1) 3294/FFFFFFFFFFFF19AE : DCC6                		adda	d6,a6
(1) 3295/FFFFFFFFFFFF19B0 : 51CF FFF4           		dbf	d7,.chk_temp
(1) 3296/FFFFFFFFFFFF19B4 :                     .no_mfreeze:
(1) 3298/FFFFFFFFFFFF19B4 : 4E75                		rts
(1) 3299/FFFFFFFFFFFF19B6 :                     
(1) 3300/FFFFFFFFFFFF19B6 :                     ; --------------------------------------------------------
(1) 3301/FFFFFFFFFFFF19B6 :                     ; Video_MdMars_PalBackup
(1) 3302/FFFFFFFFFFFF19B6 :                     ;
(1) 3303/FFFFFFFFFFFF19B6 :                     ; Backup routine to load 256-color palette to SVDP
(1) 3304/FFFFFFFFFFFF19B6 :                     ; when the SVDP permission is set to Genesis.
(1) 3305/FFFFFFFFFFFF19B6 :                     ;
(1) 3306/FFFFFFFFFFFF19B6 :                     ; Call this during VBlank ONLY.
(1) 3307/FFFFFFFFFFFF19B6 :                     ; --------------------------------------------------------
(1) 3308/FFFFFFFFFFFF19B6 :                     
(1) 3309/FFFFFFFFFFFF19B6 :                     Video_MdMars_PalBackup:
(1) 3311/FFFFFFFFFFFF19B6 : 1E39 00A1 5100      		move.b	(sysmars_reg).l,d7
(1) 3312/FFFFFFFFFFFF19BC : 0807 0007           		btst	#7,d7
(1) 3313/FFFFFFFFFFFF19C0 : 6624                		bne.s	.svdp_locked
(1) 3314/FFFFFFFFFFFF19C2 : 4DF9 FFFF CE60      		lea	(RAM_MdMars_CommBuff+Dreq_Palette).l,a6
(1) 3315/FFFFFFFFFFFF19C8 : 4BF9 00A1 5200      		lea	(sysmars_reg+$100).l,a5
(1) 3316/FFFFFFFFFFFF19CE : 3E3C 001F           		move.w	#((256/2)/4)-1,d7
(1) 3317/FFFFFFFFFFFF19D2 :                     .copy_it:
(1) 3318/FFFFFFFFFFFF19D2 :                     	rept 4
(1) 3319/FFFFFFFFFFFF19D2 :                     		move.l	(a6)+,d6
(1) 3320/FFFFFFFFFFFF19D2 :                     		move.l	d6,(a5)+
(1) 3321/FFFFFFFFFFFF19D2 :                     	endm
(1) 3319/FFFFFFFFFFFF19D2 : 2C1E                		move.l	(a6)+,d6
(1) 3320/FFFFFFFFFFFF19D4 : 2AC6                		move.l	d6,(a5)+
(1) 3319/FFFFFFFFFFFF19D6 : 2C1E                		move.l	(a6)+,d6
(1) 3320/FFFFFFFFFFFF19D8 : 2AC6                		move.l	d6,(a5)+
(1) 3319/FFFFFFFFFFFF19DA : 2C1E                		move.l	(a6)+,d6
(1) 3320/FFFFFFFFFFFF19DC : 2AC6                		move.l	d6,(a5)+
(1) 3319/FFFFFFFFFFFF19DE : 2C1E                		move.l	(a6)+,d6
(1) 3320/FFFFFFFFFFFF19E0 : 2AC6                		move.l	d6,(a5)+
(1) 3322/FFFFFFFFFFFF19E2 : 51CF FFEE           		dbf	d7,.copy_it
(1) 3323/FFFFFFFFFFFF19E6 :                     .svdp_locked:
(1) 3325/FFFFFFFFFFFF19E6 : 4E75                		rts
(1) 3326/FFFFFFFFFFFF19E8 :                     
(1) 3327/FFFFFFFFFFFF19E8 :                     ; ====================================================================
(1) 3328/FFFFFFFFFFFF19E8 :                     ; --------------------------------------------------------
(1) 3329/FFFFFFFFFFFF19E8 :                     ; Subroutines
(1) 3330/FFFFFFFFFFFF19E8 :                     ; --------------------------------------------------------
(1) 3331/FFFFFFFFFFFF19E8 :                     
(1) 3332/FFFFFFFFFFFF19E8 :                     ; --------------------------------------------------------
(1) 3333/FFFFFFFFFFFF19E8 :                     ; Video_MdMars_VideoMode
(1) 3334/FFFFFFFFFFFF19E8 :                     ;
(1) 3335/FFFFFFFFFFFF19E8 :                     ; Set the graphics mode on the 32X.
(1) 3336/FFFFFFFFFFFF19E8 :                     ;
(1) 3337/FFFFFFFFFFFF19E8 :                     ; Input:
(1) 3338/FFFFFFFFFFFF19E8 :                     ; d0.w | Mode number $00-$02
(1) 3339/FFFFFFFFFFFF19E8 :                     ;        - Write $00 to disable 32X visuals and
(1) 3340/FFFFFFFFFFFF19E8 :                     ;          get SVDP control.
(1) 3341/FFFFFFFFFFFF19E8 :                     ;
(1) 3342/FFFFFFFFFFFF19E8 :                     ; Notes:
(1) 3343/FFFFFFFFFFFF19E8 :                     ; - Setting mode to 0 (blank) does not clear the
(1) 3344/FFFFFFFFFFFF19E8 :                     ;   FRAMEBUFFER(s)
(1) 3345/FFFFFFFFFFFF19E8 :                     ;
(1) 3346/FFFFFFFFFFFF19E8 :                     ; Uses:
(1) 3347/FFFFFFFFFFFF19E8 :                     ; d0
(1) 3348/FFFFFFFFFFFF19E8 :                     ; --------------------------------------------------------
(1) 3349/FFFFFFFFFFFF19E8 :                     
(1) 3350/FFFFFFFFFFFF19E8 :                     Video_MdMars_VideoOff:
(1) 3351/FFFFFFFFFFFF19E8 : 7000                		moveq	#0,d0
(1) 3352/FFFFFFFFFFFF19EA :                     
(1) 3353/FFFFFFFFFFFF19EA :                     Video_MdMars_VideoMode:
(1) 3354/FFFFFFFFFFFF19EA : 3F07                		move.w	d7,-(sp)
(1) 3362/FFFFFFFFFFFF19EC : 6100 FF44           		bsr	Video_MdMars_WaitSync
(1) 3363/FFFFFFFFFFFF19F0 : 6100 0D94           		bsr	System_MdMars_Update
(1) 3364/FFFFFFFFFFFF19F4 : 6100 FF32           		bsr	Video_MdMars_SetSync
(1) 3362/FFFFFFFFFFFF19F8 : 6100 FF38           		bsr	Video_MdMars_WaitSync
(1) 3363/FFFFFFFFFFFF19FC : 6100 0D88           		bsr	System_MdMars_Update
(1) 3364/FFFFFFFFFFFF1A00 : 6100 FF26           		bsr	Video_MdMars_SetSync
(1) 3366/FFFFFFFFFFFF1A04 : 3E00                		move.w	d0,d7
(1) 3367/FFFFFFFFFFFF1A06 : 0247 0007           		andi.w	#%00000111,d7			; Bits allowed
(1) 3368/FFFFFFFFFFFF1A0A : 0047 00C0           		ori.w	#%11000000,d7			; Mode + Init bits
(1) 3369/FFFFFFFFFFFF1A0E : 13C7 00A1 512D      		move.b	d7,(sysmars_reg+(comm12+1)).l
(1) 3370/FFFFFFFFFFFF1A14 : 1E39 00A1 512D      .wait_finish:	move.b	(sysmars_reg+(comm12+1)).l,d7
(1) 3371/FFFFFFFFFFFF1A1A : 0247 00C0           		andi.w	#%11000000,d7
(1) 3372/FFFFFFFFFFFF1A1E : 66F4                		bne.s	.wait_finish
(1) 3373/FFFFFFFFFFFF1A20 :                     	rept 2
(1) 3374/FFFFFFFFFFFF1A20 :                     		bsr	Video_MdMars_WaitSync
(1) 3375/FFFFFFFFFFFF1A20 :                     		bsr	Video_MdMars_SetSync
(1) 3376/FFFFFFFFFFFF1A20 :                     	endm
(1) 3374/FFFFFFFFFFFF1A20 : 6100 FF10           		bsr	Video_MdMars_WaitSync
(1) 3375/FFFFFFFFFFFF1A24 : 6100 FF02           		bsr	Video_MdMars_SetSync
(1) 3374/FFFFFFFFFFFF1A28 : 6100 FF08           		bsr	Video_MdMars_WaitSync
(1) 3375/FFFFFFFFFFFF1A2C : 6100 FEFA           		bsr	Video_MdMars_SetSync
(1) 3377/FFFFFFFFFFFF1A30 : 3E1F                		move.w	(sp)+,d7
(1) 3378/FFFFFFFFFFFF1A32 : 4E75                		rts
(1) 3379/FFFFFFFFFFFF1A34 :                     
(1) 3380/FFFFFFFFFFFF1A34 :                     ; --------------------------------------------------------
(1) 3381/FFFFFFFFFFFF1A34 :                     ; Video_MdMars_LoadVram
(1) 3382/FFFFFFFFFFFF1A34 :                     ;
(1) 3383/FFFFFFFFFFFF1A34 :                     ; Loads graphics data into a special section
(1) 3384/FFFFFFFFFFFF1A34 :                     ; on the SDRAM area for the 2D and 3D modes.
(1) 3385/FFFFFFFFFFFF1A34 :                     ;
(1) 3386/FFFFFFFFFFFF1A34 :                     ; Input:
(1) 3387/FFFFFFFFFFFF1A34 :                     ; a0   | Graphics data
(1) 3388/FFFFFFFFFFFF1A34 :                     ; a1   | Output position
(1) 3389/FFFFFFFFFFFF1A34 :                     ; d0.l | Size, 8-byte aligned
(1) 3390/FFFFFFFFFFFF1A34 :                     ;
(1) 3391/FFFFFFFFFFFF1A34 :                     ; Uses:
(1) 3392/FFFFFFFFFFFF1A34 :                     ; ALL
(1) 3393/FFFFFFFFFFFF1A34 :                     ;
(1) 3394/FFFFFFFFFFFF1A34 :                     ; Notes:
(1) 3395/FFFFFFFFFFFF1A34 :                     ; - Careful using this if the SH2 side is in the
(1) 3396/FFFFFFFFFFFF1A34 :                     ;   middle of reading the graphics data.
(1) 3397/FFFFFFFFFFFF1A34 :                     ; --------------------------------------------------------
(1) 3398/FFFFFFFFFFFF1A34 :                     
(1) 3399/FFFFFFFFFFFF1A34 :                     Video_MdMars_LoadVram:
(1) 3400/FFFFFFFFFFFF1A34 : 48E7 81C0           		movem.l	d0/d7/a0-a1,-(sp)
(1) 3401/FFFFFFFFFFFF1A38 : 2E09                		move.l	a1,d7
(1) 3402/FFFFFFFFFFFF1A3A : DE80                		add.l	d0,d7
(1) 3403/FFFFFFFFFFFF1A3C : BEBC 0001 8000      		cmp.l	#MAX_MarsVram,d7
(1) 3404/FFFFFFFFFFFF1A42 : 6F0A                		ble.s	.good_sz
(1) 3405/FFFFFFFFFFFF1A44 : 9EBC 0001 8000      		sub.l	#MAX_MarsVram,d7
(1) 3406/FFFFFFFFFFFF1A4A : 6B0C                		bmi.s	.got_zero
(1) 3407/FFFFFFFFFFFF1A4C : 2007                		move.l	d7,d0
(1) 3408/FFFFFFFFFFFF1A4E :                     .good_sz:
(1) 3409/FFFFFFFFFFFF1A4E : D3FC 0600 FAE0      		addi.l	#RAM_Mars_VramData,a1	; *** EXTERNAL LABEL ***
(1) 3410/FFFFFFFFFFFF1A54 : 6100 0CF0           		bsr	System_MdMars_SendData
(1) 3411/FFFFFFFFFFFF1A58 :                     .got_zero:
(1) 3412/FFFFFFFFFFFF1A58 : 4CDF 0381           		movem.l	(sp)+,d0/d7/a0-a1
(1) 3413/FFFFFFFFFFFF1A5C : 4E75                		rts
(1) 3414/FFFFFFFFFFFF1A5E :                     
(1) 3415/FFFFFFFFFFFF1A5E :                     ; --------------------------------------------------------
(1) 3416/FFFFFFFFFFFF1A5E :                     ; Video_MdMars_LoadMap
(1) 3417/FFFFFFFFFFFF1A5E :                     ;
(1) 3418/FFFFFFFFFFFF1A5E :                     ; Loads map data for 32X's 2D-mode
(1) 3419/FFFFFFFFFFFF1A5E :                     ;
(1) 3420/FFFFFFFFFFFF1A5E :                     ; Input:
(1) 3421/FFFFFFFFFFFF1A5E :                     ; a0   | Map data
(1) 3422/FFFFFFFFFFFF1A5E :                     ; a1   | Graphics start location
(1) 3423/FFFFFFFFFFFF1A5E :                     ; d0.w | X start position
(1) 3424/FFFFFFFFFFFF1A5E :                     ; d1.w | Y start position
(1) 3425/FFFFFFFFFFFF1A5E :                     ; d2.w | Map width in blocks (width/16)
(1) 3426/FFFFFFFFFFFF1A5E :                     ; d3.w | Map height in blocks (height/16)
(1) 3427/FFFFFFFFFFFF1A5E :                     ; d4.w | Starting color index *LIMITED*
(1) 3428/FFFFFFFFFFFF1A5E :                     ;
(1) 3429/FFFFFFFFFFFF1A5E :                     ; Notes:
(1) 3430/FFFFFFFFFFFF1A5E :                     ; - To load the Graphics use Video_MdMars_LoadVram
(1) 3431/FFFFFFFFFFFF1A5E :                     ;   a1 only sets the location in SDRAM
(1) 3432/FFFFFFFFFFFF1A5E :                     ; --------------------------------------------------------
(1) 3433/FFFFFFFFFFFF1A5E :                     
(1) 3434/FFFFFFFFFFFF1A5E :                     ; CURRENT TILE FORMAT:
(1) 3435/FFFFFFFFFFFF1A5E :                     ; %Rppp pppt tttt tttt
(1) 3436/FFFFFFFFFFFF1A5E :                     ;
(1) 3437/FFFFFFFFFFFF1A5E :                     ; R - Reload block, cleared here later.
(1) 3438/FFFFFFFFFFFF1A5E :                     ; p - Palette index, limited by 4 color-sizes
(1) 3439/FFFFFFFFFFFF1A5E :                     ; t - 16x16 block number, 0 is blank
(1) 3440/FFFFFFFFFFFF1A5E :                     
(1) 3441/FFFFFFFFFFFF1A5E :                     Video_MdMars_LoadMap:
(1) 3442/FFFFFFFFFFFF1A5E : 48E7 0F1E           		movem.l	d4-d7/a3-a6,-(sp)
(1) 3443/FFFFFFFFFFFF1A62 : 4DF8 D060           		lea	(RAM_MdMars_ScrlSett).w,a6
(1) 3444/FFFFFFFFFFFF1A66 : 4BF8 D080           		lea	(RAM_MdMars_ScrlData).w,a5
(1) 3445/FFFFFFFFFFFF1A6A : 2D49 0008           		move.l	a1,sscrl_vram(a6)
(1) 3446/FFFFFFFFFFFF1A6E : 7A00                		moveq	#0,d5
(1) 3447/FFFFFFFFFFFF1A70 :                     
(1) 3448/FFFFFFFFFFFF1A70 :                     	; d4 - $7Exx
(1) 3449/FFFFFFFFFFFF1A70 :                     	; d5 - USED
(1) 3450/FFFFFFFFFFFF1A70 :                     	; d6 - free | Y pos copy
(1) 3451/FFFFFFFFFFFF1A70 :                     	; d7 - Y loop
(1) 3452/FFFFFFFFFFFF1A70 : 0244 00FC           		andi.w	#$FC,d4		; <-- d4
(1) 3453/FFFFFFFFFFFF1A74 : EF4C                		lsl.w	#7,d4
(1) 3454/FFFFFFFFFFFF1A76 : 2648                		move.l	a0,a3
(1) 3455/FFFFFFFFFFFF1A78 : 3C01                		move.w	d1,d6
(1) 3456/FFFFFFFFFFFF1A7A : 3E03                		move.w	d3,d7
(1) 3457/FFFFFFFFFFFF1A7C : 5347                		subq.w	#1,d7
(1) 3458/FFFFFFFFFFFF1A7E :                     .copy_y:
(1) 3459/FFFFFFFFFFFF1A7E : 284D                		move.l	a5,a4
(1) 3460/FFFFFFFFFFFF1A80 : 7A00                		moveq	#0,d5
(1) 3461/FFFFFFFFFFFF1A82 : 3A06                		move.w	d6,d5
(1) 3462/FFFFFFFFFFFF1A84 : ED4D                		lsl.w	#6,d5
(1) 3463/FFFFFFFFFFFF1A86 : D9C5                		add.l	d5,a4
(1) 3464/FFFFFFFFFFFF1A88 : 3A00                		move.w	d0,d5
(1) 3465/FFFFFFFFFFFF1A8A : DA45                		add.w	d5,d5
(1) 3466/FFFFFFFFFFFF1A8C : 4847                		swap	d7
(1) 3467/FFFFFFFFFFFF1A8E : 4846                		swap	d6
(1) 3468/FFFFFFFFFFFF1A90 : 3E02                		move.w	d2,d7
(1) 3469/FFFFFFFFFFFF1A92 : 5347                		subq.w	#1,d7
(1) 3470/FFFFFFFFFFFF1A94 :                     .copy_x:
(1) 3471/FFFFFFFFFFFF1A94 : 3C1B                		move.w	(a3)+,d6
(1) 3472/FFFFFFFFFFFF1A96 : DC44                		add.w	d4,d6
(1) 3473/FFFFFFFFFFFF1A98 : 8C7C 8000           		or.w	#$8000,d6
(1) 3474/FFFFFFFFFFFF1A9C : 3986 5000           		move.w	d6,(a4,d5.w)
(1) 3475/FFFFFFFFFFFF1AA0 : 5445                		addq.w	#1*2,d5
(1) 3476/FFFFFFFFFFFF1AA2 : 0245 003E           		andi.w	#((512/16)-1)*2,d5
(1) 3477/FFFFFFFFFFFF1AA6 : 51CF FFEC           		dbf	d7,.copy_x
(1) 3478/FFFFFFFFFFFF1AAA : 4846                		swap	d6
(1) 3479/FFFFFFFFFFFF1AAC : 4847                		swap	d7
(1) 3480/FFFFFFFFFFFF1AAE : 5246                		addq.w	#1,d6
(1) 3481/FFFFFFFFFFFF1AB0 : 0246 000F           		andi.w	#((256/16)-1),d6
(1) 3482/FFFFFFFFFFFF1AB4 : 51CF FFC8           		dbf	d7,.copy_y
(1) 3483/FFFFFFFFFFFF1AB8 : 4CDF 78F0           		movem.l	(sp)+,d4-d7/a3-a6
(1) 3484/FFFFFFFFFFFF1ABC : 4E75                		rts
(1) 3485/FFFFFFFFFFFF1ABE :                     
(1) 3486/FFFFFFFFFFFF1ABE :                     ; ====================================================================
(1) 3487/FFFFFFFFFFFF1ABE :                     ; --------------------------------------------------------
(1) 3488/FFFFFFFFFFFF1ABE :                     ; Video_MdMars_SetSpr2D, Video_MdMars_MakeSpr2D
(1) 3489/FFFFFFFFFFFF1ABE :                     ;
(1) 3490/FFFFFFFFFFFF1ABE :                     ; Set or Make a Super Sprite, 2D MODE ONLY.
(1) 3491/FFFFFFFFFFFF1ABE :                     ;
(1) 3492/FFFFFFFFFFFF1ABE :                     ; Input:
(1) 3493/FFFFFFFFFFFF1ABE :                     ; a0   | Index slot (_SetSpr2D ONLY)
(1) 3494/FFFFFFFFFFFF1ABE :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3495/FFFFFFFFFFFF1ABE :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3496/FFFFFFFFFFFF1ABE :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3497/FFFFFFFFFFFF1ABE :                     ; d2.w | Frame number $nnnn
(1) 3498/FFFFFFFFFFFF1ABE :                     ; d3.l | Width/Height: splitw(width,height)
(1) 3499/FFFFFFFFFFFF1ABE :                     ; d4.l | Texture full_width+index: splitw(width,index)
(1) 3500/FFFFFFFFFFFF1ABE :                     ;
(1) 3501/FFFFFFFFFFFF1ABE :                     ; Returns:
(1) 3502/FFFFFFFFFFFF1ABE :                     ; bcc | OK
(1) 3503/FFFFFFFFFFFF1ABE :                     ; bcs | Ran out of Super Sprites
(1) 3504/FFFFFFFFFFFF1ABE :                     ; --------------------------------------------------------
(1) 3505/FFFFFFFFFFFF1ABE :                     
(1) 3506/FFFFFFFFFFFF1ABE :                     Video_MdMars_SetSpr2D:
(1) 3507/FFFFFFFFFFFF1ABE : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3508/FFFFFFFFFFFF1AC2 : 2E08                		move.l	a0,d7
(1) 3509/FFFFFFFFFFFF1AC4 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3510/FFFFFFFFFFFF1AC6 : 601E                		bra	vidMdMars_MkSpr2D
(1) 3511/FFFFFFFFFFFF1AC8 :                     
(1) 3512/FFFFFFFFFFFF1AC8 :                     Video_MdMars_MakeSpr2D:
(1) 3513/FFFFFFFFFFFF1AC8 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3514/FFFFFFFFFFFF1ACC : 7E00                		moveq	#0,d7
(1) 3515/FFFFFFFFFFFF1ACE : 4DF8 D480           		lea	(RAM_MdMars_SuperSpr).w,a6
(1) 3516/FFFFFFFFFFFF1AD2 : 7C1F                		moveq	#MAX_MARSSPR-1,d6
(1) 3517/FFFFFFFFFFFF1AD4 :                     .chk_free:
(1) 3518/FFFFFFFFFFFF1AD4 : 4A16                		tst.b	sspr_flags(a6)
(1) 3519/FFFFFFFFFFFF1AD6 : 670C                		beq.s	.mk_spr
(1) 3520/FFFFFFFFFFFF1AD8 : 5247                		addq.w	#1,d7
(1) 3521/FFFFFFFFFFFF1ADA : DCFC 0010           		adda	#sspr_len,a6
(1) 3522/FFFFFFFFFFFF1ADE : 51CE FFF4           		dbf	d6,.chk_free
(1) 3523/FFFFFFFFFFFF1AE2 : 606C                		bra.s	vidMdMars_CError
(1) 3524/FFFFFFFFFFFF1AE4 :                     .mk_spr:
(1) 3525/FFFFFFFFFFFF1AE4 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3526/FFFFFFFFFFFF1AE6 :                     
(1) 3527/FFFFFFFFFFFF1AE6 :                     vidMdMars_MkSpr2D:
(1) 3528/FFFFFFFFFFFF1AE6 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3529/FFFFFFFFFFFF1AEC : BE7C 0020           		cmp.w	#MAX_MARSSPR,d7
(1) 3530/FFFFFFFFFFFF1AF0 : 6C5E                		bge.s	vidMdMars_CError
(1) 3531/FFFFFFFFFFFF1AF2 :                     ; 		mulu.w	#sspr_len,d7
(1) 3532/FFFFFFFFFFFF1AF2 : E98F                		lsl.l	#4,d7			; FIXED SIZE
(1) 3533/FFFFFFFFFFFF1AF4 : 0687 FFFF D480      		addi.l	#RAM_MdMars_SuperSpr,d7
(1) 3534/FFFFFFFFFFFF1AFA : 2C47                		move.l	d7,a6
(1) 3535/FFFFFFFFFFFF1AFC : 2D49 000C           		move.l	a1,sspr_vram(a6)
(1) 3536/FFFFFFFFFFFF1B00 : 2E00                		move.l	d0,d7
(1) 3537/FFFFFFFFFFFF1B02 : 4847                		swap	d7
(1) 3538/FFFFFFFFFFFF1B04 : 3D47 0008           		move.w	d7,sspr_x_pos(a6)
(1) 3539/FFFFFFFFFFFF1B08 : 3D40 000A           		move.w	d0,sspr_y_pos(a6)
(1) 3540/FFFFFFFFFFFF1B0C : 2E03                		move.l	d3,d7
(1) 3541/FFFFFFFFFFFF1B0E : E64F                		lsr.w	#3,d7
(1) 3542/FFFFFFFFFFFF1B10 : 5347                		subq.w	#1,d7
(1) 3543/FFFFFFFFFFFF1B12 : 1D47 0005           		move.b	d7,sspr_size+1(a6)
(1) 3544/FFFFFFFFFFFF1B16 : 4847                		swap	d7
(1) 3545/FFFFFFFFFFFF1B18 : E64F                		lsr.w	#3,d7
(1) 3546/FFFFFFFFFFFF1B1A : 5347                		subq.w	#1,d7
(1) 3547/FFFFFFFFFFFF1B1C : 1D47 0004           		move.b	d7,sspr_size(a6)
(1) 3548/FFFFFFFFFFFF1B20 : 3E04                		move.w	d4,d7
(1) 3549/FFFFFFFFFFFF1B22 : 0247 00FF           		andi.w	#$FF,d7
(1) 3550/FFFFFFFFFFFF1B26 : 3D47 0006           		move.w	d7,sspr_indx(a6)
(1) 3551/FFFFFFFFFFFF1B2A : 2E01                		move.l	d1,d7
(1) 3552/FFFFFFFFFFFF1B2C : 4847                		swap	d7
(1) 3553/FFFFFFFFFFFF1B2E : 4A47                		tst.w	d7
(1) 3554/FFFFFFFFFFFF1B30 : 0247 0003           		andi.w	#%00000011,d7
(1) 3555/FFFFFFFFFFFF1B34 : 8E3C 0080           		or.b	#$80,d7
(1) 3556/FFFFFFFFFFFF1B38 : 8E06                		or.b	d6,d7
(1) 3557/FFFFFFFFFFFF1B3A : 1C87                		move.b	d7,sspr_flags(a6)
(1) 3558/FFFFFFFFFFFF1B3C : 3E02                		move.w	d2,d7
(1) 3559/FFFFFFFFFFFF1B3E : 0247 00FF           		andi.w	#$FF,d7
(1) 3560/FFFFFFFFFFFF1B42 : 3D47 0002           		move.w	d7,sspr_frame(a6)
(1) 3561/FFFFFFFFFFFF1B46 :                     .on_freeze:
(1) 3562/FFFFFFFFFFFF1B46 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3563/FFFFFFFFFFFF1B4A : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3564/FFFFFFFFFFFF1B4E : 4E75                		rts
(1) 3565/FFFFFFFFFFFF1B50 :                     ; Carry error
(1) 3566/FFFFFFFFFFFF1B50 :                     vidMdMars_CError:
(1) 3567/FFFFFFFFFFFF1B50 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3568/FFFFFFFFFFFF1B54 : 003C 0001           		or	#1,ccr			; Return Error
(1) 3569/FFFFFFFFFFFF1B58 : 4E75                		rts
(1) 3570/FFFFFFFFFFFF1B5A :                     
(1) 3571/FFFFFFFFFFFF1B5A :                     ; --------------------------------------------------------
(1) 3572/FFFFFFFFFFFF1B5A :                     ; Video_MdMars_SetSpr3D, Video_MdMars_MakeSpr3D
(1) 3573/FFFFFFFFFFFF1B5A :                     ;
(1) 3574/FFFFFFFFFFFF1B5A :                     ; Set or Make a 3D Sprite, 3D MODE ONLY.
(1) 3575/FFFFFFFFFFFF1B5A :                     ;
(1) 3576/FFFFFFFFFFFF1B5A :                     ; Input:
(1) 3577/FFFFFFFFFFFF1B5A :                     ; a0   | Index slot (_SetSpr3D ONLY)
(1) 3578/FFFFFFFFFFFF1B5A :                     ; a1   | Texture pointer (0-MAX_MarsVram or CS1-ROM location)
(1) 3579/FFFFFFFFFFFF1B5A :                     ; d0.l | X/Y position: splitw(x_pos,y_pos)
(1) 3580/FFFFFFFFFFFF1B5A :                     ; d1.l | Flags and Z position: splitw(flags,z_pos)
(1) 3581/FFFFFFFFFFFF1B5A :                     ; d2.w | Frame number: $xxyy
(1) 3582/FFFFFFFFFFFF1B5A :                     ; d3.l | Width/Height: splitw(width,height)
(1) 3583/FFFFFFFFFFFF1B5A :                     ; d4.l | Texture full_width+index: splitw(width,index)
(1) 3584/FFFFFFFFFFFF1B5A :                     ;
(1) 3585/FFFFFFFFFFFF1B5A :                     ;        flags: %000000ff
(1) 3586/FFFFFFFFFFFF1B5A :                     ;        %00 - Normal 3D screen sprite
(1) 3587/FFFFFFFFFFFF1B5A :                     ;        %01 - Sprite is inside the 3D Field
(1) 3588/FFFFFFFFFFFF1B5A :                     ;        %11 - Same as %01, always face to the front
(1) 3589/FFFFFFFFFFFF1B5A :                     ;              of the camera
(1) 3590/FFFFFFFFFFFF1B5A :                     ;
(1) 3591/FFFFFFFFFFFF1B5A :                     ; Returns:
(1) 3592/FFFFFFFFFFFF1B5A :                     ; bcc | OK
(1) 3593/FFFFFFFFFFFF1B5A :                     ; bcs | Ran out of slots
(1) 3594/FFFFFFFFFFFF1B5A :                     ; --------------------------------------------------------
(1) 3595/FFFFFFFFFFFF1B5A :                     
(1) 3596/FFFFFFFFFFFF1B5A :                     Video_MdMars_SetSpr3D:
(1) 3597/FFFFFFFFFFFF1B5A : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3598/FFFFFFFFFFFF1B5E : 2E08                		move.l	a0,d7
(1) 3599/FFFFFFFFFFFF1B60 : 7C00                		moveq	#0,d6			; Disposable bit
(1) 3600/FFFFFFFFFFFF1B62 : 601E                		bra	vidMdMars_MkSpr3D
(1) 3601/FFFFFFFFFFFF1B64 :                     
(1) 3602/FFFFFFFFFFFF1B64 :                     Video_MdMars_MakeSpr3D:
(1) 3603/FFFFFFFFFFFF1B64 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1) 3604/FFFFFFFFFFFF1B68 :                     
(1) 3605/FFFFFFFFFFFF1B68 : 7E00                		moveq	#0,d7
(1) 3606/FFFFFFFFFFFF1B6A : 4DF8 D080           		lea	(RAM_MdMars_MSprites).w,a6
(1) 3607/FFFFFFFFFFFF1B6E : 7C17                		moveq	#MAX_MARSMSPR-1,d6
(1) 3608/FFFFFFFFFFFF1B70 :                     .chk_free:
(1) 3609/FFFFFFFFFFFF1B70 : 4A16                		tst.b	mspr_flags(a6)
(1) 3610/FFFFFFFFFFFF1B72 : 670C                		beq.s	.mk_spr
(1) 3611/FFFFFFFFFFFF1B74 : 5247                		addq.w	#1,d7
(1) 3612/FFFFFFFFFFFF1B76 : DCFC 0020           		adda	#mspr_len,a6
(1) 3613/FFFFFFFFFFFF1B7A : 51CE FFF4           		dbf	d6,.chk_free
(1) 3614/FFFFFFFFFFFF1B7E : 60D0                		bra.s	vidMdMars_CError
(1) 3615/FFFFFFFFFFFF1B80 :                     .mk_spr:
(1) 3616/FFFFFFFFFFFF1B80 : 7C40                		moveq	#$40,d6			; Disposable bit
(1) 3617/FFFFFFFFFFFF1B82 :                     
(1) 3618/FFFFFFFFFFFF1B82 :                     vidMdMars_MkSpr3D:
(1) 3619/FFFFFFFFFFFF1B82 : 0287 0000 00FF      		andi.l	#$FF,d7
(1) 3620/FFFFFFFFFFFF1B88 : BE7C 0018           		cmp.w	#MAX_MARSMSPR,d7
(1) 3621/FFFFFFFFFFFF1B8C : 6CC2                		bge.s	vidMdMars_CError
(1) 3622/FFFFFFFFFFFF1B8E :                     ; 		mulu.w	#mspr_len,d7
(1) 3623/FFFFFFFFFFFF1B8E : EB8F                		lsl.l	#5,d7			; FIXED SIZE
(1) 3624/FFFFFFFFFFFF1B90 : 0687 FFFF D080      		addi.l	#RAM_MdMars_MSprites,d7
(1) 3625/FFFFFFFFFFFF1B96 : 2C47                		move.l	d7,a6
(1) 3626/FFFFFFFFFFFF1B98 : 2D49 001C           		move.l	a1,mspr_vram(a6)	; a1
(1) 3627/FFFFFFFFFFFF1B9C : 2E00                		move.l	d0,d7
(1) 3628/FFFFFFFFFFFF1B9E : 4847                		swap	d7
(1) 3629/FFFFFFFFFFFF1BA0 : 3D47 0010           		move.w	d7,mspr_x_pos(a6)
(1) 3630/FFFFFFFFFFFF1BA4 : 3D40 0012           		move.w	d0,mspr_y_pos(a6)
(1) 3631/FFFFFFFFFFFF1BA8 : 2E01                		move.l	d1,d7
(1) 3632/FFFFFFFFFFFF1BAA : 4847                		swap	d7
(1) 3633/FFFFFFFFFFFF1BAC : 0247 0003           		andi.w	#%11,d7
(1) 3634/FFFFFFFFFFFF1BB0 : 8E7C 0080           		or.w	#$80,d7
(1) 3635/FFFFFFFFFFFF1BB4 : 8E46                		or.w	d6,d7
(1) 3636/FFFFFFFFFFFF1BB6 : 1C87                		move.b	d7,mspr_flags(a6)
(1) 3637/FFFFFFFFFFFF1BB8 : 3D41 0014           		move.w	d1,mspr_z_pos(a6)
(1) 3638/FFFFFFFFFFFF1BBC : 2E03                		move.l	d3,d7
(1) 3639/FFFFFFFFFFFF1BBE : 4847                		swap	d7
(1) 3640/FFFFFFFFFFFF1BC0 : 1D47 0002           		move.b	d7,mspr_size_w(a6)
(1) 3641/FFFFFFFFFFFF1BC4 : 1D43 0003           		move.b	d3,mspr_size_h(a6)
(1) 3642/FFFFFFFFFFFF1BC8 : 1D47 0004           		move.b	d7,mspr_src_w(a6)
(1) 3643/FFFFFFFFFFFF1BCC : 1D43 0005           		move.b	d3,mspr_src_h(a6)
(1) 3644/FFFFFFFFFFFF1BD0 : 2E04                		move.l	d4,d7
(1) 3645/FFFFFFFFFFFF1BD2 : 4847                		swap	d7
(1) 3646/FFFFFFFFFFFF1BD4 : 1D47 0006           		move.b	d7,mspr_srcwdth(a6)
(1) 3647/FFFFFFFFFFFF1BD8 : 1D44 0001           		move.b	d4,mspr_indx(a6)
(1) 3648/FFFFFFFFFFFF1BDC : 2E02                		move.l	d2,d7
(1) 3649/FFFFFFFFFFFF1BDE : 4847                		swap	d7
(1) 3650/FFFFFFFFFFFF1BE0 : 1D47 0007           		move.b	d7,mspr_frame_x(a6)
(1) 3651/FFFFFFFFFFFF1BE4 : 1D42 0008           		move.b	d2,mspr_frame_y(a6)
(1) 3652/FFFFFFFFFFFF1BE8 : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1) 3653/FFFFFFFFFFFF1BEC : 023C 001E           		and	#%11110,ccr		; Return OK
(1) 3654/FFFFFFFFFFFF1BF0 : 4E75                		rts
(1) 3655/FFFFFFFFFFFF1BF2 :                     
(1) 3656/FFFFFFFFFFFF1BF2 :                     ; ====================================================================
(1) 3657/FFFFFFFFFFFF1BF2 :                     ; ----------------------------------------------------------------
(1) 3658/FFFFFFFFFFFF1BF2 :                     ; SVDP Palette
(1) 3659/FFFFFFFFFFFF1BF2 :                     ; ----------------------------------------------------------------
(1) 3660/FFFFFFFFFFFF1BF2 :                     
(1) 3661/FFFFFFFFFFFF1BF2 :                     ; --------------------------------------------------------
(1) 3662/FFFFFFFFFFFF1BF2 :                     ; Video_MdMars_RunFade
(1) 3663/FFFFFFFFFFFF1BF2 :                     ;
(1) 3664/FFFFFFFFFFFF1BF2 :                     ; Process 1 step of palette fading, SVDP Palette.
(1) 3665/FFFFFFFFFFFF1BF2 :                     ;
(1) 3666/FFFFFFFFFFFF1BF2 :                     ; Use Video_WaitFade to wait for changes.
(1) 3667/FFFFFFFFFFFF1BF2 :                     ; --------------------------------------------------------
(1) 3668/FFFFFFFFFFFF1BF2 :                     
(1) 3669/FFFFFFFFFFFF1BF2 :                     Video_MdMars_RunFade:
(1) 3671/FFFFFFFFFFFF1BF2 : 4DF8 CE20           		lea	(RAM_MdMars_MPalFdList).w,a6
(1) 3672/FFFFFFFFFFFF1BF6 :                     .next_req:
(1) 3673/FFFFFFFFFFFF1BF6 : 1016                		move.b	palfd_req(a6),d0
(1) 3674/FFFFFFFFFFFF1BF8 : 6744                		beq.s	.no_req
(1) 3675/FFFFFFFFFFFF1BFA : 532E 0005           		subq.b	#1,palfd_timer(a6)
(1) 3676/FFFFFFFFFFFF1BFE : 6A38                		bpl.s	.busy_timer
(1) 3677/FFFFFFFFFFFF1C00 : 1D6E 0001 0005      		move.b	palfd_delay(a6),palfd_timer(a6)
(1) 3678/FFFFFFFFFFFF1C06 : 4BF8 CE60           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a5
(1) 3679/FFFFFFFFFFFF1C0A : 49F8 CC20           		lea	(RAM_MdMars_PalFd).w,a4
(1) 3680/FFFFFFFFFFFF1C0E : 7E00                		moveq	#0,d7
(1) 3681/FFFFFFFFFFFF1C10 : 1E2E 0002           		move.b	palfd_start(a6),d7
(1) 3682/FFFFFFFFFFFF1C14 : DE47                		add.w	d7,d7
(1) 3683/FFFFFFFFFFFF1C16 : DAC7                		adda	d7,a5
(1) 3684/FFFFFFFFFFFF1C18 : D8C7                		adda	d7,a4
(1) 3685/FFFFFFFFFFFF1C1A : 7E00                		moveq	#0,d7
(1) 3686/FFFFFFFFFFFF1C1C : 7C00                		moveq	#0,d6
(1) 3687/FFFFFFFFFFFF1C1E : 3E2E 0006           		move.w	palfd_num(a6),d7
(1) 3688/FFFFFFFFFFFF1C22 : 6714                		beq.s	.busy_timer
(1) 3689/FFFFFFFFFFFF1C24 : 1C2E 0003           		move.b	palfd_incr(a6),d6
(1) 3690/FFFFFFFFFFFF1C28 : 5347                		subq.w	#1,d7
(1) 3691/FFFFFFFFFFFF1C2A : 0240 00FF           		andi.w	#$FF,d0
(1) 3692/FFFFFFFFFFFF1C2E : D040                		add.w	d0,d0
(1) 3693/FFFFFFFFFFFF1C30 : 303B 0012           		move.w	.fade_list(pc,d0.w),d0
(1) 3694/FFFFFFFFFFFF1C34 : 4EBB 000E           		jsr	.fade_list(pc,d0.w)
(1) 3695/FFFFFFFFFFFF1C38 :                     .busy_timer:
(1) 3696/FFFFFFFFFFFF1C38 : DCFC 0008           		adda	#palfd_len,a6
(1) 3697/FFFFFFFFFFFF1C3C : 60B8                		bra.s	.next_req
(1) 3698/FFFFFFFFFFFF1C3E :                     .no_req:
(1) 3699/FFFFFFFFFFFF1C3E : 4278 CC1E           		clr.w	(RAM_MdMars_IndxPalFd).w
(1) 3701/FFFFFFFFFFFF1C42 : 4E75                		rts
(1) 3702/FFFFFFFFFFFF1C44 :                     
(1) 3703/FFFFFFFFFFFF1C44 :                     ; ------------------------------------------------
(1) 3704/FFFFFFFFFFFF1C44 :                     
(1) 3705/FFFFFFFFFFFF1C44 :                     .fade_list:
(1) 3706/FFFFFFFFFFFF1C44 : 0010                		dc.w .nothing-.fade_list	; $00
(1) 3707/FFFFFFFFFFFF1C46 : 0014                		dc.w .fade_out-.fade_list
(1) 3708/FFFFFFFFFFFF1C48 : 0080                		dc.w .fade_in-.fade_list
(1) 3709/FFFFFFFFFFFF1C4A : 0010                		dc.w .nothing-.fade_list
(1) 3710/FFFFFFFFFFFF1C4C : 0010                		dc.w .nothing-.fade_list	; $04
(1) 3711/FFFFFFFFFFFF1C4E : 0010                		dc.w .nothing-.fade_list
(1) 3712/FFFFFFFFFFFF1C50 : 0010                		dc.w .nothing-.fade_list
(1) 3713/FFFFFFFFFFFF1C52 : 0010                		dc.w .nothing-.fade_list
(1) 3714/FFFFFFFFFFFF1C54 :                     
(1) 3715/FFFFFFFFFFFF1C54 :                     ; ----------------------------------------------------
(1) 3716/FFFFFFFFFFFF1C54 :                     ; Fade request $00: Null/exit.
(1) 3717/FFFFFFFFFFFF1C54 :                     ; ----------------------------------------------------
(1) 3718/FFFFFFFFFFFF1C54 :                     
(1) 3719/FFFFFFFFFFFF1C54 :                     .nothing:
(1) 3720/FFFFFFFFFFFF1C54 : 4216                		clr.b	palfd_req(a6)
(1) 3721/FFFFFFFFFFFF1C56 : 4E75                		rts
(1) 3722/FFFFFFFFFFFF1C58 :                     
(1) 3723/FFFFFFFFFFFF1C58 :                     ; ----------------------------------------------------
(1) 3724/FFFFFFFFFFFF1C58 :                     ; Fade request $01: fade-out to black
(1) 3725/FFFFFFFFFFFF1C58 :                     ; Quick.
(1) 3726/FFFFFFFFFFFF1C58 :                     ;
(1) 3727/FFFFFFFFFFFF1C58 :                     ; d7 - Num colors
(1) 3728/FFFFFFFFFFFF1C58 :                     ; d6 - Increment*2
(1) 3729/FFFFFFFFFFFF1C58 :                     ; ----------------------------------------------------
(1) 3730/FFFFFFFFFFFF1C58 :                     
(1) 3731/FFFFFFFFFFFF1C58 :                     .fade_out:
(1) 3732/FFFFFFFFFFFF1C58 : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3733/FFFFFFFFFFFF1C5C : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3734/FFFFFFFFFFFF1C60 : 383C FFE0           		move.w	#%1111111111100000,d4	; d4 - Others filter + extra
(1) 3735/FFFFFFFFFFFF1C64 : 7600                		moveq	#0,d3			; d3 - Exit counter
(1) 3736/FFFFFFFFFFFF1C66 :                     .next_color:
(1) 3737/FFFFFFFFFFFF1C66 : 3015                		move.w	(a5),d0
(1) 3738/FFFFFFFFFFFF1C68 :                     	rept 3
(1) 3739/FFFFFFFFFFFF1C68 :                     		move.w	d0,d1
(1) 3740/FFFFFFFFFFFF1C68 :                     		and.w	d5,d1		; Filter TARGET
(1) 3741/FFFFFFFFFFFF1C68 :                     		beq.s	.no_chng
(1) 3742/FFFFFFFFFFFF1C68 :                     		and.w	d4,d0		; Filter OTHERS
(1) 3743/FFFFFFFFFFFF1C68 :                     		sub.w	d6,d1
(1) 3744/FFFFFFFFFFFF1C68 :                     		bpl.s	.too_blck
(1) 3745/FFFFFFFFFFFF1C68 :                     		clr.w	d1
(1) 3746/FFFFFFFFFFFF1C68 :                     .too_blck:
(1) 3747/FFFFFFFFFFFF1C68 :                     		addq.w	#1,d3		; Color changed
(1) 3748/FFFFFFFFFFFF1C68 :                     .no_chng:
(1) 3749/FFFFFFFFFFFF1C68 :                     		or.w	d1,d0
(1) 3750/FFFFFFFFFFFF1C68 :                     		rol.w	#5,d6		; next << color
(1) 3751/FFFFFFFFFFFF1C68 :                     		rol.w	#5,d5
(1) 3752/FFFFFFFFFFFF1C68 :                     		rol.w	#5,d4
(1) 3753/FFFFFFFFFFFF1C68 :                     	endm
(1) 3739/FFFFFFFFFFFF1C68 : 3200                		move.w	d0,d1
(1) 3740/FFFFFFFFFFFF1C6A : C245                		and.w	d5,d1		; Filter TARGET
(1) 3741/FFFFFFFFFFFF1C6C : 670A                		beq.s	.no_chng
(1) 3742/FFFFFFFFFFFF1C6E : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3743/FFFFFFFFFFFF1C70 : 9246                		sub.w	d6,d1
(1) 3744/FFFFFFFFFFFF1C72 : 6A02                		bpl.s	.too_blck
(1) 3745/FFFFFFFFFFFF1C74 : 4241                		clr.w	d1
(1) 3746/FFFFFFFFFFFF1C76 :                     .too_blck:
(1) 3747/FFFFFFFFFFFF1C76 : 5243                		addq.w	#1,d3		; Color changed
(1) 3748/FFFFFFFFFFFF1C78 :                     .no_chng:
(1) 3749/FFFFFFFFFFFF1C78 : 8041                		or.w	d1,d0
(1) 3750/FFFFFFFFFFFF1C7A : EB5E                		rol.w	#5,d6		; next << color
(1) 3751/FFFFFFFFFFFF1C7C : EB5D                		rol.w	#5,d5
(1) 3752/FFFFFFFFFFFF1C7E : EB5C                		rol.w	#5,d4
(1) 3739/FFFFFFFFFFFF1C80 : 3200                		move.w	d0,d1
(1) 3740/FFFFFFFFFFFF1C82 : C245                		and.w	d5,d1		; Filter TARGET
(1) 3741/FFFFFFFFFFFF1C84 : 670A                		beq.s	.no_chng
(1) 3742/FFFFFFFFFFFF1C86 : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3743/FFFFFFFFFFFF1C88 : 9246                		sub.w	d6,d1
(1) 3744/FFFFFFFFFFFF1C8A : 6A02                		bpl.s	.too_blck
(1) 3745/FFFFFFFFFFFF1C8C : 4241                		clr.w	d1
(1) 3746/FFFFFFFFFFFF1C8E :                     .too_blck:
(1) 3747/FFFFFFFFFFFF1C8E : 5243                		addq.w	#1,d3		; Color changed
(1) 3748/FFFFFFFFFFFF1C90 :                     .no_chng:
(1) 3749/FFFFFFFFFFFF1C90 : 8041                		or.w	d1,d0
(1) 3750/FFFFFFFFFFFF1C92 : EB5E                		rol.w	#5,d6		; next << color
(1) 3751/FFFFFFFFFFFF1C94 : EB5D                		rol.w	#5,d5
(1) 3752/FFFFFFFFFFFF1C96 : EB5C                		rol.w	#5,d4
(1) 3739/FFFFFFFFFFFF1C98 : 3200                		move.w	d0,d1
(1) 3740/FFFFFFFFFFFF1C9A : C245                		and.w	d5,d1		; Filter TARGET
(1) 3741/FFFFFFFFFFFF1C9C : 670A                		beq.s	.no_chng
(1) 3742/FFFFFFFFFFFF1C9E : C044                		and.w	d4,d0		; Filter OTHERS
(1) 3743/FFFFFFFFFFFF1CA0 : 9246                		sub.w	d6,d1
(1) 3744/FFFFFFFFFFFF1CA2 : 6A02                		bpl.s	.too_blck
(1) 3745/FFFFFFFFFFFF1CA4 : 4241                		clr.w	d1
(1) 3746/FFFFFFFFFFFF1CA6 :                     .too_blck:
(1) 3747/FFFFFFFFFFFF1CA6 : 5243                		addq.w	#1,d3		; Color changed
(1) 3748/FFFFFFFFFFFF1CA8 :                     .no_chng:
(1) 3749/FFFFFFFFFFFF1CA8 : 8041                		or.w	d1,d0
(1) 3750/FFFFFFFFFFFF1CAA : EB5E                		rol.w	#5,d6		; next << color
(1) 3751/FFFFFFFFFFFF1CAC : EB5D                		rol.w	#5,d5
(1) 3752/FFFFFFFFFFFF1CAE : EB5C                		rol.w	#5,d4
(1) 3754/FFFFFFFFFFFF1CB0 :                     	; returns to $Exxx, rotate to $xxxE:
(1) 3755/FFFFFFFFFFFF1CB0 : E35E                		rol.w	#1,d6
(1) 3756/FFFFFFFFFFFF1CB2 : E35D                		rol.w	#1,d5
(1) 3757/FFFFFFFFFFFF1CB4 : E35C                		rol.w	#1,d4
(1) 3758/FFFFFFFFFFFF1CB6 : 3AC0                		move.w	d0,(a5)+
(1) 3759/FFFFFFFFFFFF1CB8 :                     .all_black:
(1) 3760/FFFFFFFFFFFF1CB8 : 51CF FFAC           		dbf	d7,.next_color
(1) 3761/FFFFFFFFFFFF1CBC : 4A43                		tst.w	d3
(1) 3762/FFFFFFFFFFFF1CBE : 6602                		bne.s	.fdout_nend
(1) 3763/FFFFFFFFFFFF1CC0 : 4216                		clr.b	palfd_req(a6)
(1) 3764/FFFFFFFFFFFF1CC2 :                     .fdout_nend:
(1) 3765/FFFFFFFFFFFF1CC2 : 4E75                		rts
(1) 3766/FFFFFFFFFFFF1CC4 :                     
(1) 3767/FFFFFFFFFFFF1CC4 :                     ; ----------------------------------------------------
(1) 3768/FFFFFFFFFFFF1CC4 :                     ; Fade request $02
(1) 3769/FFFFFFFFFFFF1CC4 :                     ; Fade-in
(1) 3770/FFFFFFFFFFFF1CC4 :                     ; ----------------------------------------------------
(1) 3771/FFFFFFFFFFFF1CC4 :                     
(1) 3772/FFFFFFFFFFFF1CC4 :                     .fade_in:
(1) 3773/FFFFFFFFFFFF1CC4 : 0246 001F           		andi.w	#%0000000000011111,d6	; d6 - Max increment
(1) 3774/FFFFFFFFFFFF1CC8 : 3A3C 001F           		move.w	#%0000000000011111,d5	; d5 - Target filter
(1) 3775/FFFFFFFFFFFF1CCC : 383C 7FFF           		move.w	#$7FFF,d4		; d4 - Filter bits
(1) 3776/FFFFFFFFFFFF1CD0 :                     .next_in:
(1) 3777/FFFFFFFFFFFF1CD0 : 4847                		swap	d7
(1) 3778/FFFFFFFFFFFF1CD2 : 3015                		move.w	(a5),d0			; d0 - Current
(1) 3779/FFFFFFFFFFFF1CD4 : 3414                		move.w	(a4),d2			; d2 - Target
(1) 3780/FFFFFFFFFFFF1CD6 : 3602                		move.w	d2,d3
(1) 3781/FFFFFFFFFFFF1CD8 : 0243 8000           		andi.w	#$8000,d3
(1) 3782/FFFFFFFFFFFF1CDC : 4843                		swap	d3
(1) 3783/FFFFFFFFFFFF1CDE : C044                		and.w	d4,d0
(1) 3784/FFFFFFFFFFFF1CE0 : C444                		and.w	d4,d2
(1) 3785/FFFFFFFFFFFF1CE2 : B042                		cmp.w	d2,d0
(1) 3786/FFFFFFFFFFFF1CE4 : 6770                		beq.s	.set_prio
(1) 3787/FFFFFFFFFFFF1CE6 :                     	rept 3
(1) 3788/FFFFFFFFFFFF1CE6 :                     		move.w	d0,d1
(1) 3789/FFFFFFFFFFFF1CE6 :                     		move.w	d4,d3
(1) 3790/FFFFFFFFFFFF1CE6 :                     		eor.w	d5,d3
(1) 3791/FFFFFFFFFFFF1CE6 :                     		and.w	d3,d0
(1) 3792/FFFFFFFFFFFF1CE6 :                     		move.w	d2,d3
(1) 3793/FFFFFFFFFFFF1CE6 :                     		and.w	d5,d1		; filter CURRENT color
(1) 3794/FFFFFFFFFFFF1CE6 :                     		and.w	d5,d3		; filter TARGET color
(1) 3795/FFFFFFFFFFFF1CE6 :                     
(1) 3796/FFFFFFFFFFFF1CE6 :                     		add.w	d6,d1		; ADD to current
(1) 3797/FFFFFFFFFFFF1CE6 :                     		cmp.w	d3,d1
(1) 3798/FFFFFFFFFFFF1CE6 :                     		bcs.s	.max_out
(1) 3799/FFFFFFFFFFFF1CE6 :                     		move.w	d2,d1
(1) 3800/FFFFFFFFFFFF1CE6 :                     		andi.w	#$7FFF,d1
(1) 3801/FFFFFFFFFFFF1CE6 :                     		and.w	d5,d1
(1) 3802/FFFFFFFFFFFF1CE6 :                     .max_out:
(1) 3803/FFFFFFFFFFFF1CE6 :                     		addq.w	#1,d7
(1) 3804/FFFFFFFFFFFF1CE6 :                     		or.w	d1,d0
(1) 3805/FFFFFFFFFFFF1CE6 :                     		rol.w	#5,d6		; next << color
(1) 3806/FFFFFFFFFFFF1CE6 :                     		rol.w	#5,d5
(1) 3807/FFFFFFFFFFFF1CE6 :                     	endm
(1) 3788/FFFFFFFFFFFF1CE6 : 3200                		move.w	d0,d1
(1) 3789/FFFFFFFFFFFF1CE8 : 3604                		move.w	d4,d3
(1) 3790/FFFFFFFFFFFF1CEA : BB43                		eor.w	d5,d3
(1) 3791/FFFFFFFFFFFF1CEC : C043                		and.w	d3,d0
(1) 3792/FFFFFFFFFFFF1CEE : 3602                		move.w	d2,d3
(1) 3793/FFFFFFFFFFFF1CF0 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3794/FFFFFFFFFFFF1CF2 : C645                		and.w	d5,d3		; filter TARGET color
(1) 3795/FFFFFFFFFFFF1CF4 :                     
(1) 3796/FFFFFFFFFFFF1CF4 : D246                		add.w	d6,d1		; ADD to current
(1) 3797/FFFFFFFFFFFF1CF6 : B243                		cmp.w	d3,d1
(1) 3798/FFFFFFFFFFFF1CF8 : 6508                		bcs.s	.max_out
(1) 3799/FFFFFFFFFFFF1CFA : 3202                		move.w	d2,d1
(1) 3800/FFFFFFFFFFFF1CFC : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3801/FFFFFFFFFFFF1D00 : C245                		and.w	d5,d1
(1) 3802/FFFFFFFFFFFF1D02 :                     .max_out:
(1) 3803/FFFFFFFFFFFF1D02 : 5247                		addq.w	#1,d7
(1) 3804/FFFFFFFFFFFF1D04 : 8041                		or.w	d1,d0
(1) 3805/FFFFFFFFFFFF1D06 : EB5E                		rol.w	#5,d6		; next << color
(1) 3806/FFFFFFFFFFFF1D08 : EB5D                		rol.w	#5,d5
(1) 3788/FFFFFFFFFFFF1D0A : 3200                		move.w	d0,d1
(1) 3789/FFFFFFFFFFFF1D0C : 3604                		move.w	d4,d3
(1) 3790/FFFFFFFFFFFF1D0E : BB43                		eor.w	d5,d3
(1) 3791/FFFFFFFFFFFF1D10 : C043                		and.w	d3,d0
(1) 3792/FFFFFFFFFFFF1D12 : 3602                		move.w	d2,d3
(1) 3793/FFFFFFFFFFFF1D14 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3794/FFFFFFFFFFFF1D16 : C645                		and.w	d5,d3		; filter TARGET color
(1) 3795/FFFFFFFFFFFF1D18 :                     
(1) 3796/FFFFFFFFFFFF1D18 : D246                		add.w	d6,d1		; ADD to current
(1) 3797/FFFFFFFFFFFF1D1A : B243                		cmp.w	d3,d1
(1) 3798/FFFFFFFFFFFF1D1C : 6508                		bcs.s	.max_out
(1) 3799/FFFFFFFFFFFF1D1E : 3202                		move.w	d2,d1
(1) 3800/FFFFFFFFFFFF1D20 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3801/FFFFFFFFFFFF1D24 : C245                		and.w	d5,d1
(1) 3802/FFFFFFFFFFFF1D26 :                     .max_out:
(1) 3803/FFFFFFFFFFFF1D26 : 5247                		addq.w	#1,d7
(1) 3804/FFFFFFFFFFFF1D28 : 8041                		or.w	d1,d0
(1) 3805/FFFFFFFFFFFF1D2A : EB5E                		rol.w	#5,d6		; next << color
(1) 3806/FFFFFFFFFFFF1D2C : EB5D                		rol.w	#5,d5
(1) 3788/FFFFFFFFFFFF1D2E : 3200                		move.w	d0,d1
(1) 3789/FFFFFFFFFFFF1D30 : 3604                		move.w	d4,d3
(1) 3790/FFFFFFFFFFFF1D32 : BB43                		eor.w	d5,d3
(1) 3791/FFFFFFFFFFFF1D34 : C043                		and.w	d3,d0
(1) 3792/FFFFFFFFFFFF1D36 : 3602                		move.w	d2,d3
(1) 3793/FFFFFFFFFFFF1D38 : C245                		and.w	d5,d1		; filter CURRENT color
(1) 3794/FFFFFFFFFFFF1D3A : C645                		and.w	d5,d3		; filter TARGET color
(1) 3795/FFFFFFFFFFFF1D3C :                     
(1) 3796/FFFFFFFFFFFF1D3C : D246                		add.w	d6,d1		; ADD to current
(1) 3797/FFFFFFFFFFFF1D3E : B243                		cmp.w	d3,d1
(1) 3798/FFFFFFFFFFFF1D40 : 6508                		bcs.s	.max_out
(1) 3799/FFFFFFFFFFFF1D42 : 3202                		move.w	d2,d1
(1) 3800/FFFFFFFFFFFF1D44 : 0241 7FFF           		andi.w	#$7FFF,d1
(1) 3801/FFFFFFFFFFFF1D48 : C245                		and.w	d5,d1
(1) 3802/FFFFFFFFFFFF1D4A :                     .max_out:
(1) 3803/FFFFFFFFFFFF1D4A : 5247                		addq.w	#1,d7
(1) 3804/FFFFFFFFFFFF1D4C : 8041                		or.w	d1,d0
(1) 3805/FFFFFFFFFFFF1D4E : EB5E                		rol.w	#5,d6		; next << color
(1) 3806/FFFFFFFFFFFF1D50 : EB5D                		rol.w	#5,d5
(1) 3808/FFFFFFFFFFFF1D52 : E35E                		rol.w	#1,d6
(1) 3809/FFFFFFFFFFFF1D54 : E35D                		rol.w	#1,d5
(1) 3810/FFFFFFFFFFFF1D56 :                     .set_prio:
(1) 3811/FFFFFFFFFFFF1D56 : 4843                		swap	d3
(1) 3812/FFFFFFFFFFFF1D58 : 8043                		or.w	d3,d0
(1) 3813/FFFFFFFFFFFF1D5A : 3A80                		move.w	d0,(a5)
(1) 3814/FFFFFFFFFFFF1D5C :                     .same_in:
(1) 3815/FFFFFFFFFFFF1D5C : DAFC 0002           		adda	#2,a5		; Next color
(1) 3816/FFFFFFFFFFFF1D60 : D8FC 0002           		adda	#2,a4
(1) 3817/FFFFFFFFFFFF1D64 : 4847                		swap	d7
(1) 3818/FFFFFFFFFFFF1D66 : 51CF FF68           		dbf	d7,.next_in
(1) 3819/FFFFFFFFFFFF1D6A : 4847                		swap	d7
(1) 3820/FFFFFFFFFFFF1D6C : 4A47                		tst.w	d7
(1) 3821/FFFFFFFFFFFF1D6E : 6602                		bne.s	.fdin_nend
(1) 3822/FFFFFFFFFFFF1D70 : 4216                		clr.b	palfd_req(a6)
(1) 3823/FFFFFFFFFFFF1D72 :                     .fdin_nend:
(1) 3824/FFFFFFFFFFFF1D72 : 4E75                		rts
(1) 3825/FFFFFFFFFFFF1D74 :                     
(1) 3826/FFFFFFFFFFFF1D74 :                     ; --------------------------------------------------------
(1) 3827/FFFFFFFFFFFF1D74 :                     ; Video_MdMars_LoadPal, Video_MdMars_FadePal
(1) 3828/FFFFFFFFFFFF1D74 :                     ;
(1) 3829/FFFFFFFFFFFF1D74 :                     ; Loads SVDP 256-color palette data,
(1) 3830/FFFFFFFFFFFF1D74 :                     ; either current or for fading.
(1) 3831/FFFFFFFFFFFF1D74 :                     ;
(1) 3832/FFFFFFFFFFFF1D74 :                     ; Input:
(1) 3833/FFFFFFFFFFFF1D74 :                     ; a0   | 256-color Palette data
(1) 3834/FFFFFFFFFFFF1D74 :                     ; d0.w | Starting index
(1) 3835/FFFFFFFFFFFF1D74 :                     ; d1.w | Number of colors
(1) 3836/FFFFFFFFFFFF1D74 :                     ; d2.w | Priority bit 0 or 1
(1) 3837/FFFFFFFFFFFF1D74 :                     ;
(1) 3838/FFFFFFFFFFFF1D74 :                     ; Notes:
(1) 3839/FFFFFFFFFFFF1D74 :                     ; - Priority bit is skipped on the first color index
(1) 3840/FFFFFFFFFFFF1D74 :                     ; --------------------------------------------------------
(1) 3841/FFFFFFFFFFFF1D74 :                     
(1) 3842/FFFFFFFFFFFF1D74 :                     Video_MdMars_FadePal:
(1) 3843/FFFFFFFFFFFF1D74 : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3844/FFFFFFFFFFFF1D78 : 4DF8 CC20           		lea	(RAM_MdMars_PalFd).w,a6
(1) 3845/FFFFFFFFFFFF1D7C : 6008                		bra.s	vidMars_Pal
(1) 3846/FFFFFFFFFFFF1D7E :                     Video_MdMars_LoadPal:
(1) 3847/FFFFFFFFFFFF1D7E : 48E7 0706           		movem.l	d5-d7/a5-a6,-(sp)
(1) 3848/FFFFFFFFFFFF1D82 : 4DF8 CE60           		lea	(RAM_MdMars_CommBuff+Dreq_Palette).w,a6
(1) 3849/FFFFFFFFFFFF1D86 :                     ; 		bra.s	vidMars_Pal
(1) 3850/FFFFFFFFFFFF1D86 :                     vidMars_Pal:
(1) 3851/FFFFFFFFFFFF1D86 : 2A48                		move.l	a0,a5
(1) 3852/FFFFFFFFFFFF1D88 : 7E00                		moveq	#0,d7
(1) 3853/FFFFFFFFFFFF1D8A : 3E00                		move.w	d0,d7
(1) 3854/FFFFFFFFFFFF1D8C : 3A00                		move.w	d0,d5
(1) 3855/FFFFFFFFFFFF1D8E : DE47                		add.w	d7,d7
(1) 3856/FFFFFFFFFFFF1D90 : DCC7                		adda	d7,a6
(1) 3857/FFFFFFFFFFFF1D92 : 3E01                		move.w	d1,d7
(1) 3858/FFFFFFFFFFFF1D94 : 0447 0001           		subi.w	#1,d7
(1) 3859/FFFFFFFFFFFF1D98 : 3C02                		move.w	d2,d6
(1) 3860/FFFFFFFFFFFF1D9A : 0246 0001           		andi.w	#1,d6
(1) 3861/FFFFFFFFFFFF1D9E : E25E                		ror.w	#1,d6
(1) 3862/FFFFFFFFFFFF1DA0 :                     .loop:
(1) 3863/FFFFFFFFFFFF1DA0 : 4847                		swap	d7
(1) 3864/FFFFFFFFFFFF1DA2 : 3E1D                		move.w	(a5)+,d7
(1) 3865/FFFFFFFFFFFF1DA4 : 4A45                		tst.w	d5
(1) 3866/FFFFFFFFFFFF1DA6 : 670A                		beq.s	.trnspr
(1) 3867/FFFFFFFFFFFF1DA8 : BBFC FFFF CE60      		cmpa.l	#RAM_MdMars_CommBuff+Dreq_Palette,a5	; Skip first index
(1) 3868/FFFFFFFFFFFF1DAE : 6702                		beq.s	.trnspr
(1) 3869/FFFFFFFFFFFF1DB0 : 8E46                		or.w	d6,d7
(1) 3870/FFFFFFFFFFFF1DB2 :                     .trnspr:
(1) 3871/FFFFFFFFFFFF1DB2 : 3CC7                		move.w	d7,(a6)+
(1) 3872/FFFFFFFFFFFF1DB4 : 4847                		swap	d7
(1) 3873/FFFFFFFFFFFF1DB6 : 5245                		addq.w	#1,d5
(1) 3874/FFFFFFFFFFFF1DB8 : 51CF FFE6           		dbf	d7,.loop
(1) 3875/FFFFFFFFFFFF1DBC : 4CDF 60E0           		movem.l	(sp)+,d5-d7/a5-a6
(1) 3876/FFFFFFFFFFFF1DC0 : 4E75                		rts
(1) 3877/FFFFFFFFFFFF1DC2 :                     
(1) 3878/FFFFFFFFFFFF1DC2 :                     ; --------------------------------------------------------
(1) 3879/FFFFFFFFFFFF1DC2 :                     ; Video_LoadPal_List, Video_FadePal_List
(1) 3880/FFFFFFFFFFFF1DC2 :                     ;
(1) 3881/FFFFFFFFFFFF1DC2 :                     ; Loads palettes on bulk with a list
(1) 3882/FFFFFFFFFFFF1DC2 :                     ;
(1) 3883/FFFFFFFFFFFF1DC2 :                     ; Input:
(1) 3884/FFFFFFFFFFFF1DC2 :                     ; a0 | List of graphics to load:
(1) 3885/FFFFFFFFFFFF1DC2 :                     ;        dc.w numof_entries
(1) 3886/FFFFFFFFFFFF1DC2 :                     ;        dc.l palette_data
(1) 3887/FFFFFFFFFFFF1DC2 :                     ;        dc.w start_at
(1) 3888/FFFFFFFFFFFF1DC2 :                     ;        dc.w numof_colors
(1) 3889/FFFFFFFFFFFF1DC2 :                     ;        dc.w priority (0 or 1)
(1) 3890/FFFFFFFFFFFF1DC2 :                     ;        ; ...more entries
(1) 3891/FFFFFFFFFFFF1DC2 :                     ; --------------------------------------------------------
(1) 3892/FFFFFFFFFFFF1DC2 :                     
(1) 3893/FFFFFFFFFFFF1DC2 :                     Video_MdMars_LoadPal_List:
(1) 3894/FFFFFFFFFFFF1DC2 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3895/FFFFFFFFFFFF1DC6 : 2A48                		move.l	a0,a5
(1) 3896/FFFFFFFFFFFF1DC8 : 3E1D                		move.w	(a5)+,d7
(1) 3897/FFFFFFFFFFFF1DCA : 6712                		beq.s	.invalid
(1) 3898/FFFFFFFFFFFF1DCC : 6B10                		bmi.s	.invalid
(1) 3899/FFFFFFFFFFFF1DCE : 5347                		subq.w	#1,d7
(1) 3900/FFFFFFFFFFFF1DD0 :                     .next_one:
(1) 3901/FFFFFFFFFFFF1DD0 : 205D                		move.l	(a5)+,a0
(1) 3902/FFFFFFFFFFFF1DD2 : 301D                		move.w	(a5)+,d0
(1) 3903/FFFFFFFFFFFF1DD4 : 321D                		move.w	(a5)+,d1
(1) 3904/FFFFFFFFFFFF1DD6 : 341D                		move.w	(a5)+,d2
(1) 3905/FFFFFFFFFFFF1DD8 : 61A4                		bsr	Video_MdMars_LoadPal
(1) 3906/FFFFFFFFFFFF1DDA : 51CF FFF4           		dbf	d7,.next_one
(1) 3907/FFFFFFFFFFFF1DDE :                     .invalid:
(1) 3908/FFFFFFFFFFFF1DDE : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3909/FFFFFFFFFFFF1DE2 : 4E75                		rts
(1) 3910/FFFFFFFFFFFF1DE4 :                     
(1) 3911/FFFFFFFFFFFF1DE4 :                     Video_MdMars_FadePal_List:
(1) 3912/FFFFFFFFFFFF1DE4 : 48E7 0104           		movem.l	d7/a5,-(sp)
(1) 3913/FFFFFFFFFFFF1DE8 : 2A48                		move.l	a0,a5
(1) 3914/FFFFFFFFFFFF1DEA : 3E1D                		move.w	(a5)+,d7
(1) 3915/FFFFFFFFFFFF1DEC : 6714                		beq.s	.invalid
(1) 3916/FFFFFFFFFFFF1DEE : 6B12                		bmi.s	.invalid
(1) 3917/FFFFFFFFFFFF1DF0 : 5347                		subq.w	#1,d7
(1) 3918/FFFFFFFFFFFF1DF2 :                     .next_one:
(1) 3919/FFFFFFFFFFFF1DF2 : 205D                		move.l	(a5)+,a0
(1) 3920/FFFFFFFFFFFF1DF4 : 301D                		move.w	(a5)+,d0
(1) 3921/FFFFFFFFFFFF1DF6 : 321D                		move.w	(a5)+,d1
(1) 3922/FFFFFFFFFFFF1DF8 : 341D                		move.w	(a5)+,d2
(1) 3923/FFFFFFFFFFFF1DFA : 6100 FF78           		bsr	Video_MdMars_FadePal
(1) 3924/FFFFFFFFFFFF1DFE : 51CF FFF2           		dbf	d7,.next_one
(1) 3925/FFFFFFFFFFFF1E02 :                     .invalid:
(1) 3926/FFFFFFFFFFFF1E02 : 4CDF 2080           		movem.l	(sp)+,d7/a5
(1) 3927/FFFFFFFFFFFF1E06 : 4E75                		rts
(1) 3928/FFFFFFFFFFFF1E08 :                     
(1) 3929/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1) 3930/FFFFFFFFFFFF1E08 :                     
(1) 3932/FFFFFFFFFFFF1E08 :                     
     198/FFFFFFFFFFFF1E08 :                     		include	"nikona/md/system.asm"
(1)    1/FFFFFFFFFFFF1E08 :                     ; ===========================================================================
(1)    2/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)    3/FFFFFFFFFFFF1E08 :                     ; Genesis system routines
(1)    4/FFFFFFFFFFFF1E08 :                     ;
(1)    5/FFFFFFFFFFFF1E08 :                     ; including SCD, 32X and PICO.
(1)    6/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)    7/FFFFFFFFFFFF1E08 :                     
(1)    8/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1)    9/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)   10/FFFFFFFFFFFF1E08 :                     ; Settings
(1)   11/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF1E08 :                     
(1)   13/FFFFFFFFFFFF1E08 : =$28                 MAX_MDOBJ	equ 40		; Maximum Genesis objects
(1)   14/FFFFFFFFFFFF1E08 : ="SAVE"              TAG_SRAMDATA	equ "SAVE"	; 4-letter savefile id
(1)   15/FFFFFFFFFFFF1E08 :                     
(1)   16/FFFFFFFFFFFF1E08 :                     ; ===================================================================
(1)   17/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)   18/FFFFFFFFFFFF1E08 :                     ; Variables
(1)   19/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)   20/FFFFFFFFFFFF1E08 :                     
(1)   21/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   22/FFFFFFFFFFFF1E08 :                     ; Controller buffer data
(1)   23/FFFFFFFFFFFF1E08 :                     ;
(1)   24/FFFFFFFFFFFF1E08 :                     ; MUST call System_Input during VBlank
(1)   25/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   26/FFFFFFFFFFFF1E08 :                     
(1)   27/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   28/FFFFFFFFFFFF1E08 :                     ; pad_id
(1)   29/FFFFFFFFFFFF1E08 :                     ;
(1)   30/FFFFFFFFFFFF1E08 :                     ; JoyID_MD:
(1)   31/FFFFFFFFFFFF1E08 :                     ; Read pad_ver separately to check if controller
(1)   32/FFFFFFFFFFFF1E08 :                     ; is 3button(0) or 6button(1)
(1)   33/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   34/FFFFFFFFFFFF1E08 :                     
(1)   35/FFFFFFFFFFFF1E08 : =$3                  JoyID_Mouse	equ $03
(1)   36/FFFFFFFFFFFF1E08 : =$D                  JoyID_MD	equ $0D
(1)   37/FFFFFFFFFFFF1E08 : =$F                  JoyID_MS	equ $0F		; <-- Same ID for no controller
(1)   38/FFFFFFFFFFFF1E08 :                     
(1)   39/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   40/FFFFFFFFFFFF1E08 :                     ; Genesis controller
(1)   41/FFFFFFFFFFFF1E08 :                     ;
(1)   42/FFFFFFFFFFFF1E08 :                     ; Read these as WORD
(1)   43/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   44/FFFFFFFFFFFF1E08 :                     
(1)   45/FFFFFFFFFFFF1E08 :                     ; on_hold, on_press
(1)   46/FFFFFFFFFFFF1E08 : =$1                  JoyUp		equ $0001
(1)   47/FFFFFFFFFFFF1E08 : =$2                  JoyDown		equ $0002
(1)   48/FFFFFFFFFFFF1E08 : =$4                  JoyLeft		equ $0004
(1)   49/FFFFFFFFFFFF1E08 : =$8                  JoyRight	equ $0008
(1)   50/FFFFFFFFFFFF1E08 : =$10                 JoyB		equ $0010
(1)   51/FFFFFFFFFFFF1E08 : =$20                 JoyC		equ $0020
(1)   52/FFFFFFFFFFFF1E08 : =$40                 JoyA		equ $0040
(1)   53/FFFFFFFFFFFF1E08 : =$80                 JoyStart	equ $0080
(1)   54/FFFFFFFFFFFF1E08 : =$100                JoyZ		equ $0100
(1)   55/FFFFFFFFFFFF1E08 : =$200                JoyY		equ $0200
(1)   56/FFFFFFFFFFFF1E08 : =$400                JoyX		equ $0400
(1)   57/FFFFFFFFFFFF1E08 : =$800                JoyMode		equ $0800
(1)   58/FFFFFFFFFFFF1E08 : =$0                  bitJoyUp	equ 0
(1)   59/FFFFFFFFFFFF1E08 : =$1                  bitJoyDown	equ 1
(1)   60/FFFFFFFFFFFF1E08 : =$2                  bitJoyLeft	equ 2
(1)   61/FFFFFFFFFFFF1E08 : =$3                  bitJoyRight	equ 3
(1)   62/FFFFFFFFFFFF1E08 : =$4                  bitJoyB		equ 4
(1)   63/FFFFFFFFFFFF1E08 : =$5                  bitJoyC		equ 5
(1)   64/FFFFFFFFFFFF1E08 : =$6                  bitJoyA		equ 6
(1)   65/FFFFFFFFFFFF1E08 : =$7                  bitJoyStart	equ 7
(1)   66/FFFFFFFFFFFF1E08 : =$8                  bitJoyZ		equ 8
(1)   67/FFFFFFFFFFFF1E08 : =$9                  bitJoyY		equ 9
(1)   68/FFFFFFFFFFFF1E08 : =$A                  bitJoyX		equ 10
(1)   69/FFFFFFFFFFFF1E08 : =$B                  bitJoyMode	equ 11
(1)   70/FFFFFFFFFFFF1E08 :                     
(1)   71/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   72/FFFFFFFFFFFF1E08 :                     ; Mega Mouse ONLY
(1)   73/FFFFFFFFFFFF1E08 :                     ;
(1)   74/FFFFFFFFFFFF1E08 :                     ; mouse_x and mouse_y are speed increment values,
(1)   75/FFFFFFFFFFFF1E08 :                     ; NOT screen position.
(1)   76/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   77/FFFFFFFFFFFF1E08 :                     
(1)   78/FFFFFFFFFFFF1E08 : =$1                  ClickR		equ $0001
(1)   79/FFFFFFFFFFFF1E08 : =$2                  ClickL		equ $0002
(1)   80/FFFFFFFFFFFF1E08 : =$4                  ClickM		equ $0004		; US MOUSE ONLY
(1)   81/FFFFFFFFFFFF1E08 : =$8                  ClickS		equ $0008		; (Untested)
(1)   82/FFFFFFFFFFFF1E08 : =$0                  bitClickL	equ 0
(1)   83/FFFFFFFFFFFF1E08 : =$1                  bitClickR	equ 1
(1)   84/FFFFFFFFFFFF1E08 : =$2                  bitClickM	equ 2
(1)   85/FFFFFFFFFFFF1E08 : =$3                  bitClickS	equ 3
(1)   86/FFFFFFFFFFFF1E08 :                     
(1)   87/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   88/FFFFFFFFFFFF1E08 :                     ; Sega PICO
(1)   89/FFFFFFFFFFFF1E08 :                     ; Directons U/D/L/R use the same bits as Genesis.
(1)   90/FFFFFFFFFFFF1E08 :                     ;
(1)   91/FFFFFFFFFFFF1E08 :                     ; For reading the pen position use
(1)   92/FFFFFFFFFFFF1E08 :                     ; mouse_x and mouse_y
(1)   93/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)   94/FFFFFFFFFFFF1E08 :                     
(1)   95/FFFFFFFFFFFF1E08 : =$10                 JoyRED		equ $0010
(1)   96/FFFFFFFFFFFF1E08 : =$80                 JoyPEN		equ $0080
(1)   97/FFFFFFFFFFFF1E08 : =$4                  bitJoyRED	equ 4
(1)   98/FFFFFFFFFFFF1E08 : =$7                  bitJoyPEN	equ 7
(1)   99/FFFFFFFFFFFF1E08 :                     
(1)  100/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1)  101/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  102/FFFFFFFFFFFF1E08 :                     ; Structs
(1)  103/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  104/FFFFFFFFFFFF1E08 :                     
(1)  105/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)  106/FFFFFFFFFFFF1E08 :                     ; RAM_InputData
(1)  107/FFFFFFFFFFFF1E08 :                     
(1)  108/FFFFFFFFFFFF1E08 :                     ; *** MANUAL VARIABLES ***
(1)  109/FFFFFFFFFFFF1E08 : =$0                  pad_id		equ $00;ds.b 1			; Controller ID
(1)  110/FFFFFFFFFFFF1E08 : =$1                  pad_ver		equ $01;ds.b 1			; Controller type/revision
(1)  111/FFFFFFFFFFFF1E08 : =$2                  on_hold		equ $02;ds.w 1			; User HOLD bits
(1)  112/FFFFFFFFFFFF1E08 : =$4                  on_press	equ $04;ds.w 1			; User PRESSED bits
(1)  113/FFFFFFFFFFFF1E08 : =$6                  on_release	equ $06;ds.w 1			; User RELEASED bits
(1)  114/FFFFFFFFFFFF1E08 : =$8                  mouse_x		equ $08;ds.w 1			; Mouse/Pen X speed
(1)  115/FFFFFFFFFFFF1E08 : =$A                  mouse_y		equ $0A;ds.w 1			; Mouse/pen Y speed
(1)  116/FFFFFFFFFFFF1E08 : =$C                  ext_3		equ $0C;ds.w 1
(1)  117/FFFFFFFFFFFF1E08 : =$E                  ext_4		equ $0E;ds.w 1
(1)  118/FFFFFFFFFFFF1E08 : =$10                 sizeof_input	equ $10
(1)  119/FFFFFFFFFFFF1E08 :                     
(1)  120/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)  121/FFFFFFFFFFFF1E08 :                     ; RAM_Objects
(1)  122/FFFFFFFFFFFF1E08 :                     ;
(1)  123/FFFFFFFFFFFF1E08 :                     ; Size must end as even
(1)  124/FFFFFFFFFFFF1E08 :                     ; ------------------------------------------------
(1)  125/FFFFFFFFFFFF1E08 :                     
(1)  126/       0 :                     obj		struct
(1)  127/       0 :                     code		ds.l 1		; Object code, If 0 == blank slot
(1)  128/       4 :                     x		ds.l 1		; Object X Position $xxxx.0000
(1)  129/       8 :                     y		ds.l 1		; Object Y Position $yyyy.0000
(1)  130/       C :                     z		ds.l 1		; Object Z Position $zzzz.0000 (3D ONLY)
(1)  131/      10 :                     size_x		ds.w 1		; Object size Left/Right $llrr
(1)  132/      12 :                     size_y		ds.w 1		; Object size Up/Down $uudd
(1)  133/      14 :                     size_z		ds.w 1		; Object size Zback/Zfront $bbff starting from object's X/Y pointer in 10mm's (3D ONLY)
(1)  134/      16 :                     x_spd		ds.w 1		; Object X Speed $xx.00 (object_Speed)
(1)  135/      18 :                     y_spd		ds.w 1		; Object Y Speed $yy.00 ''
(1)  136/      1A :                     z_spd		ds.w 1		; Object Z Speed $zz.00 '' (3D ONLY)
(1)  137/      1C :                     index		ds.b 1		; Object current code index, mostly for init(0) and main(1)
(1)  138/      1D :                     subid		ds.b 1		; Object Sub-ID for custom placement settings
(1)  139/      1E :                     status		ds.b 1		; General purpose USER status: Falling, Floating, etc.
(1)  140/      1F :                     attr		ds.b 1		; Quick attribute bits for VRAM (depending of the type)
(1)  141/      20 :                     				; ** object_Animate ONLY:
(1)  142/      20 :                     frame		ds.w 1		; ** Current frame, object_Animate outputs here
(1)  143/      22 :                     anim_num	ds.w 1		; ** Animation number to use
(1)  144/      24 :                     anim_indx	ds.w 1		; ** Animation script index
(1)  145/      26 :                     anim_icur	ds.b 1		; ** Current animation id
(1)  146/      27 :                     anim_spd	ds.b 1		; ** Animation delay set on animation script
(1)  147/      28 :                     ram		ds.b $40	; Object's own RAM
(1)  148/      68 :                     ; obj_len	ds.l 0
(1)  149/FFFFFFFFFFFF1E08 : =$68                 		endstruct
(1)  150/FFFFFFFFFFFF1E08 :                     
(1)  151/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1)  152/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  153/FFFFFFFFFFFF1E08 :                     ; RAM section
(1)  154/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  155/FFFFFFFFFFFF1E08 :                     
(1)  156/FFFFFFFFFFFF1E08 : (MACRO)              			memory RAM_MdSystem
(1)  156/FFFFFFFFFFFF1E08 : =$FFFFFFFFFFFF1E08   GLBL_LASTPC     := *
(1)  156/    4956 :                                     dephase
(1)  156/FFFFFFFFFFFFE878 :                                     phase RAM_MDSYSTEM
(1)  156/FFFFFFFFFFFFE878 : =$FFFFFFFFFFFFE878   GLBL_LASTORG    := *
(1)  157/FFFFFFFFFFFFE878 :                     RAM_SaveData		ds.b SET_SRAMSIZE		; Read/Write of the SAVE data
(1)  158/FFFFFFFFFFFFEA78 :                     RAM_InputData		ds.b sizeof_input*4		; Input data section
(1)  159/FFFFFFFFFFFFEAB8 :                     RAM_Objects		ds.b obj_len*MAX_MDOBJ		; Objects buffer
(1)  160/FFFFFFFFFFFFFAF8 :                     RAM_SysRandVal		ds.l 1				; Random value
(1)  161/FFFFFFFFFFFFFAFC :                     RAM_SysRandom		ds.l 1				; Randomness seed
(1)  162/FFFFFFFFFFFFFB00 :                     RAM_SysLastBank		ds.l 1
(1)  163/FFFFFFFFFFFFFB04 :                     RAM_VBlankJump		ds.w 3				; VBlank jump (JMP xxxx xxxx)
(1)  164/FFFFFFFFFFFFFB0A :                     RAM_HBlankJump		ds.w 3				; HBlank jump (JMP xxxx xxxx)
(1)  165/FFFFFFFFFFFFFB10 :                     RAM_ExternalJump	ds.w 3				; External jump (JMP xxxx xxxx)
(1)  166/FFFFFFFFFFFFFB16 :                     RAM_SaveEnable		ds.w 1				; Flag to enable SAVE data
(1)  167/FFFFFFFFFFFFFB18 :                     RAM_ScreenMode		ds.w 1				; Current screen number
(1)  168/FFFFFFFFFFFFFB1A :                     RAM_ScreenOption	ds.w 1				; Current screen setting (OPTIONAL)
(1)  169/FFFFFFFFFFFFFB1C :                     RAM_McdExit		ds.w 1
(1)  170/FFFFFFFFFFFFFB1E :                     sizeof_mdsys		ds.l 0
(1)  171/FFFFFFFFFFFFFB24 : (MACRO)              			endmemory
(1)  171/    5C02 :                     .here:          dephase
(1)  171/    5C02 :                                     ds.b -(.here-GLBL_LASTORG)
(1)  171/FFFFFFFFFFFF1E08 :                                     phase GLBL_LASTPC
(1)  172/FFFFFFFFFFFF1E08 :                     
(1)  173/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1)  174/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  175/FFFFFFFFFFFF1E08 :                     ; Label aliases
(1)  176/FFFFFFFFFFFF1E08 :                     ; ----------------------------------------------------------------
(1)  177/FFFFFFFFFFFF1E08 :                     
(1)  178/FFFFFFFFFFFF1E08 : =$FFFFFFFFFFFFEA78   Controller_1		equ RAM_InputData
(1)  179/FFFFFFFFFFFF1E08 : =$FFFFFFFFFFFFEA88   Controller_2		equ RAM_InputData+sizeof_input
(1)  180/FFFFFFFFFFFF1E08 :                     
(1)  181/FFFFFFFFFFFF1E08 :                     ; ====================================================================
(1)  182/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)  183/FFFFFFFFFFFF1E08 :                     ; Init System
(1)  184/FFFFFFFFFFFF1E08 :                     ; 
(1)  185/FFFFFFFFFFFF1E08 :                     ; Uses:
(1)  186/FFFFFFFFFFFF1E08 :                     ; a0-a2,d0-d1
(1)  187/FFFFFFFFFFFF1E08 :                     ; --------------------------------------------------------
(1)  188/FFFFFFFFFFFF1E08 :                     
(1)  189/FFFFFFFFFFFF1E08 :                     System_Init:
(1)  190/FFFFFFFFFFFF1E08 : 007C 0700           		or.w	#$0700,sr
(1)  192/FFFFFFFFFFFF1E0C : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l	; Stop Z80
         FFFFFFFFFFFF1E12 : 1100             
(1)  193/FFFFFFFFFFFF1E14 :                     .wait:
(1)  194/FFFFFFFFFFFF1E14 : 0839 0000 00A1      		btst	#0,(z80_bus).l		; Wait Z80
         FFFFFFFFFFFF1E1A : 1100             
(1)  195/FFFFFFFFFFFF1E1C : 66F6                		bne.s	.wait
(1)  196/FFFFFFFFFFFF1E1E : 7040                		moveq	#%01000000,d0		; Init ports, TH=1
(1)  197/FFFFFFFFFFFF1E20 : 13C0 00A1 0009      		move.b	d0,(sys_ctrl_1).l	; Controller 1
(1)  198/FFFFFFFFFFFF1E26 : 13C0 00A1 000B      		move.b	d0,(sys_ctrl_2).l	; Controller 2
(1)  199/FFFFFFFFFFFF1E2C : 13C0 00A1 000D      		move.b	d0,(sys_ctrl_3).l	; Modem
(1)  200/FFFFFFFFFFFF1E32 : 33FC 0000 00A1      		move.w	#0,(z80_bus).l		; Enable Z80
         FFFFFFFFFFFF1E38 : 1100             
(1)  202/FFFFFFFFFFFF1E3A : 303C 4EF9           		move.w	#$4EF9,d0		; JMP opcode
(1)  203/FFFFFFFFFFFF1E3E : 31C0 FB04            		move.w	d0,(RAM_VBlankJump).w
(1)  204/FFFFFFFFFFFF1E42 : 31C0 FB0A           		move.w	d0,(RAM_HBlankJump).w
(1)  205/FFFFFFFFFFFF1E46 : 31C0 FB10           		move.w	d0,(RAM_ExternalJump).w
(1)  206/FFFFFFFFFFFF1E4A : 203C FFFF 22D8      		move.l	#VInt_Default,d0	; Set default interrupt jumps
(1)  207/FFFFFFFFFFFF1E50 : 223C FFFF 22DA      		move.l	#HInt_Default,d1
(1)  208/FFFFFFFFFFFF1E56 : 243C FFFF 22DC      		move.l	#ExtInt_Default,d2
(1)  209/FFFFFFFFFFFF1E5C : 6100 069C           		bsr	System_SetIntJumps
(1)  210/FFFFFFFFFFFF1E60 : 41F8 EA78           		lea	(RAM_InputData).w,a0	; Clear input data buffer
(1)  211/FFFFFFFFFFFF1E64 : 323C 0007           		move.w	#(sizeof_input/2)-1,d1
(1)  212/FFFFFFFFFFFF1E68 : 7000                		moveq	#0,d0
(1)  213/FFFFFFFFFFFF1E6A : 23C0 FFFF FB00      		move.l	d0,(RAM_SysLastBank).l
(1)  214/FFFFFFFFFFFF1E70 :                     .clrinput:
(1)  215/FFFFFFFFFFFF1E70 : 30C0                		move.w	d0,(a0)+
(1)  216/FFFFFFFFFFFF1E72 : 51C9 FFFC           		dbf	d1,.clrinput
(1)  218/FFFFFFFFFFFF1E76 : 6100 0298           		bsr	System_SramInit				; Init/Load SRAM
(1)  220/FFFFFFFFFFFF1E7A : 027C F8FF           		andi.w	#$F8FF,sr
(1)  221/FFFFFFFFFFFF1E7E : 4E75                		rts
(1)  222/FFFFFFFFFFFF1E80 :                     
(1)  223/FFFFFFFFFFFF1E80 :                     ; ====================================================================
(1)  224/FFFFFFFFFFFF1E80 :                     ; --------------------------------------------------------
(1)  225/FFFFFFFFFFFF1E80 :                     ; System_Render
(1)  226/FFFFFFFFFFFF1E80 :                     ;
(1)  227/FFFFFFFFFFFF1E80 :                     ; This will:
(1)  228/FFFFFFFFFFFF1E80 :                     ; - Drop a frame if we got late on VBlank
(1)  229/FFFFFFFFFFFF1E80 :                     ; - Process Palette fading buffers
(1)  230/FFFFFFFFFFFF1E80 :                     ;   (Video_MdMars_RunFade: CPU-INTENSIVE IF PROCESSING
(1)  231/FFFFFFFFFFFF1E80 :                     ;   BOTH VDP AND 32X SVDP Palettes)
(1)  232/FFFFFFFFFFFF1E80 :                     ; - Check the sound driver for any changes/requests
(1)  233/FFFFFFFFFFFF1E80 :                     ;   from Z80 (Sound_Update, several times)
(1)  234/FFFFFFFFFFFF1E80 :                     ; - 32X/CD32X only: Update the "DREQ RAM" section
(1)  235/FFFFFFFFFFFF1E80 :                     ;   to the SH2 using DREQ FIFO (System_MdMars_Update)
(1)  236/FFFFFFFFFFFF1E80 :                     ;
(1)  237/FFFFFFFFFFFF1E80 :                     ; Then during VBlank:
(1)  238/FFFFFFFFFFFF1E80 :                     ; - Read the Input data (System_Input)
(1)  239/FFFFFFFFFFFF1E80 :                     ; - Transfer the VDP Palette, Sprites and Scroll
(1)  240/FFFFFFFFFFFF1E80 :                     ;   from from RAM to VDP and process the DMA BLAST list.
(1)  241/FFFFFFFFFFFF1E80 :                     ;   (Video_Render)
(1)  242/FFFFFFFFFFFF1E80 :                     ;
(1)  243/FFFFFFFFFFFF1E80 :                     ; Notes:
(1)  244/FFFFFFFFFFFF1E80 :                     ; - If VDP Display is disabled all of this
(1)  245/FFFFFFFFFFFF1E80 :                     ;   will be skipped.
(1)  246/FFFFFFFFFFFF1E80 :                     ; --------------------------------------------------------
(1)  247/FFFFFFFFFFFF1E80 :                     
(1)  248/FFFFFFFFFFFF1E80 :                     System_Render:
(1)  249/FFFFFFFFFFFF1E80 : 3E38 E872           		move.w	(RAM_VdpRegSet1).w,d7
(1)  250/FFFFFFFFFFFF1E84 : 0807 0006           		btst	#bitDispEnbl,d7
(1)  251/FFFFFFFFFFFF1E88 : 676E                		beq	.forgot_disp
(1)  252/FFFFFFFFFFFF1E8A : 6100 EEAE           		bsr	Video_RunFade			; Process VDP palette fade
(1)  253/FFFFFFFFFFFF1E8E :                     .wait_early:
(1)  254/FFFFFFFFFFFF1E8E : 6100 00C0           		bsr	Sound_Update			; Update sound on wait
(1)  255/FFFFFFFFFFFF1E92 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  256/FFFFFFFFFFFF1E98 : 0807 0003           		btst	#bitVBlk,d7
(1)  257/FFFFFFFFFFFF1E9C : 66F0                		bne.s	.wait_early
(1)  258/FFFFFFFFFFFF1E9E :                     	; ----------------------------------------
(1)  259/FFFFFFFFFFFF1E9E :                     	; 32X/CD32X
(1)  261/FFFFFFFFFFFF1E9E : 6100 FD52           		bsr	Video_MdMars_RunFade		; Process SVDP palette fade
(1)  262/FFFFFFFFFFFF1EA2 : 4BF9 00A1 512C      		lea	(sysmars_reg+comm12).l,a5	; %SW00
(1)  263/FFFFFFFFFFFF1EA8 : 3E15                		move.w	(a5),d7				; SH2 allows framedropping?
(1)  264/FFFFFFFFFFFF1EAA : 0807 0003           		btst	#3,d7
(1)  265/FFFFFFFFFFFF1EAE : 6724                		beq.s	.mars_sync
(1)  266/FFFFFFFFFFFF1EB0 :                     ; ----------------------------------------
(1)  267/FFFFFFFFFFFF1EB0 :                     ; w/32X Framedrop
(1)  268/FFFFFFFFFFFF1EB0 :                     .mars_wait:
(1)  269/FFFFFFFFFFFF1EB0 : 6100 009E           		bsr	Sound_Update			; Update sound on wait
(1)  270/FFFFFFFFFFFF1EB4 : 3E15                		move.w	(a5),d7				; Sync bit cleared?
(1)  271/FFFFFFFFFFFF1EB6 : 0807 0004           		btst	#4,d7
(1)  272/FFFFFFFFFFFF1EBA : 671E                		beq.s	.mars_free
(1)  273/FFFFFFFFFFFF1EBC :                     .got_late:
(1)  274/FFFFFFFFFFFF1EBC : 6100 0092           		bsr	Sound_Update			; Update sound on wait
(1)  275/FFFFFFFFFFFF1EC0 : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  276/FFFFFFFFFFFF1EC6 : 0807 0003           		btst	#bitVBlk,d7
(1)  277/FFFFFFFFFFFF1ECA : 66F0                		bne.s	.got_late
(1)  278/FFFFFFFFFFFF1ECC : 6100 0082           		bsr	Sound_Update
(1)  279/FFFFFFFFFFFF1ED0 : 6128                		bsr	.wait_vblank
(1)  280/FFFFFFFFFFFF1ED2 : 6016                		bra.s	.from_late
(1)  281/FFFFFFFFFFFF1ED4 :                     ; ----------------------------------------
(1)  282/FFFFFFFFFFFF1ED4 :                     ; w/32X Sync
(1)  283/FFFFFFFFFFFF1ED4 :                     .mars_sync:
(1)  284/FFFFFFFFFFFF1ED4 : 6100 FA5C           		bsr	Video_MdMars_WaitSync		; Wait DREQ-RAM normally
(1)  285/FFFFFFFFFFFF1ED8 : 6176                		bsr	Sound_Update
(1)  286/FFFFFFFFFFFF1EDA :                     .mars_free:
(1)  287/FFFFFFFFFFFF1EDA : 6100 08AA           		bsr	System_MdMars_Update		; Send DREQ changes
(1)  289/FFFFFFFFFFFF1EDE :                     ; ----------------------------------------
(1)  290/FFFFFFFFFFFF1EDE : 611A                		bsr	.wait_vblank			; Genesis normal VBlank wait
(1)  291/FFFFFFFFFFFF1EE0 :                     ; ----------------------------------------
(1)  293/FFFFFFFFFFFF1EE0 : 616E                		bsr	Sound_Update
(1)  294/FFFFFFFFFFFF1EE2 : 6100 FAD2           		bsr	Video_MdMars_PalBackup		; backup SVDP palette transfer if set to us.
(1)  295/FFFFFFFFFFFF1EE6 : 6100 FA40           		bsr	Video_MdMars_SetSync		; Set bit to wait for DREQ-RAM swap
(1)  297/FFFFFFFFFFFF1EEA :                     .from_late:
(1)  299/FFFFFFFFFFFF1EEA : 6164                		bsr	Sound_Update
(1)  302/FFFFFFFFFFFF1EEC : 6162                		bsr	Sound_Update
(1)  303/FFFFFFFFFFFF1EEE : 6100 FA52           		bsr	Video_MdMars_Cleanup
(1)  305/FFFFFFFFFFFF1EF2 : 52B8 E85C           		addq.l	#1,(RAM_Framecount).w		; Count the frame.
(1)  306/FFFFFFFFFFFF1EF6 : 6158                		bsr	Sound_Update
(1)  307/FFFFFFFFFFFF1EF8 :                     .forgot_disp:
(1)  308/FFFFFFFFFFFF1EF8 : 4E75                		rts
(1)  309/FFFFFFFFFFFF1EFA :                     
(1)  310/FFFFFFFFFFFF1EFA :                     ; ----------------------------------------
(1)  311/FFFFFFFFFFFF1EFA :                     ; Wait until beam reaches VBlank
(1)  312/FFFFFFFFFFFF1EFA :                     ; ----------------------------------------
(1)  313/FFFFFFFFFFFF1EFA :                     
(1)  314/FFFFFFFFFFFF1EFA : 6154                .wait_vblank:	bsr	Sound_Update			; Update sound on wait
(1)  315/FFFFFFFFFFFF1EFC : 3E39 00C0 0004      		move.w	(vdp_ctrl).l,d7
(1)  316/FFFFFFFFFFFF1F02 : 0807 0003           		btst	#bitVBlk,d7
(1)  317/FFFFFFFFFFFF1F06 : 67F2                		beq.s	.wait_vblank
(1)  318/FFFFFFFFFFFF1F08 : 614E                		bsr	System_Input			; Read input data **FIRST**
(1)  319/FFFFFFFFFFFF1F0A : 6000 E472           		bra	Video_Render			; Render VDP Visuals
(1)  320/FFFFFFFFFFFF1F0E :                     
(1)  321/FFFFFFFFFFFF1F0E :                     ; ====================================================================
(1)  322/FFFFFFFFFFFF1F0E :                     ; --------------------------------------------------------
(1)  323/FFFFFFFFFFFF1F0E :                     ; System_DmaEnter_(from) and System_DmaEnter_(from)
(1)  324/FFFFFFFFFFFF1F0E :                     ; from ROM or RAM
(1)  325/FFFFFFFFFFFF1F0E :                     ;
(1)  326/FFFFFFFFFFFF1F0E :                     ; Call these labels BEFORE and AFTER your
(1)  327/FFFFFFFFFFFF1F0E :                     ; DMA-to-VDP transers, these are NOT needed for
(1)  328/FFFFFFFFFFFF1F0E :                     ; FILL or COPY.
(1)  329/FFFFFFFFFFFF1F0E :                     ;
(1)  330/FFFFFFFFFFFF1F0E :                     ; This is where you put your Sound driver's Z80 stop
(1)  331/FFFFFFFFFFFF1F0E :                     ; or pause calls here
(1)  332/FFFFFFFFFFFF1F0E :                     ; SAVE THE REGISTERS THAT YOU GONNA USE TO STACK.
(1)  333/FFFFFFFFFFFF1F0E :                     ; --------------------------------------------------------
(1)  334/FFFFFFFFFFFF1F0E :                     
(1)  335/FFFFFFFFFFFF1F0E :                     ; --------------------------------------------------------
(1)  336/FFFFFFFFFFFF1F0E :                     ; *** THESE ENABLE AND DISABLE THE RV BIT ***
(1)  337/FFFFFFFFFFFF1F0E :                     System_DmaEnter_ROM:
(1)  338/FFFFFFFFFFFF1F0E : 6138                		bsr	System_DmaEnter_RAM
(1)  346/FFFFFFFFFFFF1F10 : 4E75                		rts
(1)  347/FFFFFFFFFFFF1F12 :                     
(1)  348/FFFFFFFFFFFF1F12 :                     System_DmaExit_ROM:
(1)  356/FFFFFFFFFFFF1F12 : 6038                		bra	System_DmaExit_RAM
(1)  357/FFFFFFFFFFFF1F14 :                     
(1)  358/FFFFFFFFFFFF1F14 :                     ; ------------------------------------------------
(1)  359/FFFFFFFFFFFF1F14 :                     
(1)  360/FFFFFFFFFFFF1F14 :                     sys_MarsSlvCmd:
(1)  361/FFFFFFFFFFFF1F14 : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  362/FFFFFFFFFFFF1F1A : 66F8                		bne.s	sys_MarsSlvCmd
(1)  363/FFFFFFFFFFFF1F1C : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  364/FFFFFFFFFFFF1F22 : 8E06                		or.b	d6,d7
(1)  365/FFFFFFFFFFFF1F24 : 8E3C 0080           		or.b	#$80,d7				; We got first.
(1)  366/FFFFFFFFFFFF1F28 : 13C7 00A1 512E      		move.b	d7,(sysmars_reg+comm14).l
(1)  367/FFFFFFFFFFFF1F2E : 08F9 0001 00A1      		bset	#1,(sysmars_reg+standby).l	; Slave CMD request
         FFFFFFFFFFFF1F34 : 5103             
(1)  368/FFFFFFFFFFFF1F36 : 4E71                		nop
(1)  369/FFFFFFFFFFFF1F38 : 4E71                		nop
(1)  370/FFFFFFFFFFFF1F3A :                     .wait_exit:
(1)  371/FFFFFFFFFFFF1F3A : 4E71                		nop
(1)  372/FFFFFFFFFFFF1F3C : 4E71                		nop
(1)  373/FFFFFFFFFFFF1F3E : 1E39 00A1 512E      		move.b	(sysmars_reg+comm14).l,d7
(1)  374/FFFFFFFFFFFF1F44 : 66F4                		bne.s	.wait_exit
(1)  375/FFFFFFFFFFFF1F46 : 4E75                		rts
(1)  376/FFFFFFFFFFFF1F48 :                     
(1)  377/FFFFFFFFFFFF1F48 :                     ; --------------------------------------------------------
(1)  378/FFFFFFFFFFFF1F48 :                     ; *** EXTERNAL JUMPS ***
(1)  379/FFFFFFFFFFFF1F48 :                     ; --------------------------------------------------------
(1)  380/FFFFFFFFFFFF1F48 :                     
(1)  381/FFFFFFFFFFFF1F48 :                     System_DmaEnter_RAM:
(1)  382/FFFFFFFFFFFF1F48 : 6000 E22A           		bra	gemaDmaPause
(1)  383/FFFFFFFFFFFF1F4C :                     System_DmaExit_RAM:
(1)  384/FFFFFFFFFFFF1F4C : 6000 E244           		bra	gemaDmaResume
(1)  385/FFFFFFFFFFFF1F50 :                     
(1)  386/FFFFFFFFFFFF1F50 :                     ; ====================================================================
(1)  387/FFFFFFFFFFFF1F50 :                     ; --------------------------------------------------------
(1)  388/FFFFFFFFFFFF1F50 :                     ; Update sound/syncronize with the Z80
(1)  389/FFFFFFFFFFFF1F50 :                     ; --------------------------------------------------------
(1)  390/FFFFFFFFFFFF1F50 :                     
(1)  391/FFFFFFFFFFFF1F50 :                     Sound_Update:
(1)  392/FFFFFFFFFFFF1F50 : 6000 E154           		bra	gemaSendRam
(1)  393/FFFFFFFFFFFF1F54 :                     
(1)  394/FFFFFFFFFFFF1F54 :                     ; ====================================================================
(1)  395/FFFFFFFFFFFF1F54 :                     ; --------------------------------------------------------
(1)  396/FFFFFFFFFFFF1F54 :                     ; Init sound driver
(1)  397/FFFFFFFFFFFF1F54 :                     ; --------------------------------------------------------
(1)  398/FFFFFFFFFFFF1F54 :                     
(1)  399/FFFFFFFFFFFF1F54 :                     Sound_Init:
(1)  400/FFFFFFFFFFFF1F54 : 6000 E0AA           		bra	gemaInit
(1)  401/FFFFFFFFFFFF1F58 :                     
(1)  402/FFFFFFFFFFFF1F58 :                     ; ====================================================================
(1)  403/FFFFFFFFFFFF1F58 :                     ; --------------------------------------------------------
(1)  404/FFFFFFFFFFFF1F58 :                     ; System_Input
(1)  405/FFFFFFFFFFFF1F58 :                     ;
(1)  406/FFFFFFFFFFFF1F58 :                     ; Reads data from the Controller ports
(1)  407/FFFFFFFFFFFF1F58 :                     ;
(1)  408/FFFFFFFFFFFF1F58 :                     ; Call this during VBlank only once per frame,
(1)  409/FFFFFFFFFFFF1F58 :                     ; System_Render already calls this.
(1)  410/FFFFFFFFFFFF1F58 :                     ;
(1)  411/FFFFFFFFFFFF1F58 :                     ; Uses:
(1)  412/FFFFFFFFFFFF1F58 :                     ; d5-d7,a5-a6
(1)  413/FFFFFFFFFFFF1F58 :                     ; --------------------------------------------------------
(1)  414/FFFFFFFFFFFF1F58 :                     
(1)  415/FFFFFFFFFFFF1F58 :                     ; ----------------------------------------
(1)  416/FFFFFFFFFFFF1F58 :                     ; PICO input is hard-coded to
(1)  417/FFFFFFFFFFFF1F58 :                     ; Controller_1
(1)  418/FFFFFFFFFFFF1F58 :                     ;
(1)  419/FFFFFFFFFFFF1F58 :                     ; on_hold/on_press:
(1)  420/FFFFFFFFFFFF1F58 :                     ; %P00BRLDU
(1)  421/FFFFFFFFFFFF1F58 :                     ; UDLR - Arrows
(1)  422/FFFFFFFFFFFF1F58 :                     ;    B - BIG button red (JoyB)
(1)  423/FFFFFFFFFFFF1F58 :                     ;    P - Pen press/click (JoyStart)
(1)  424/FFFFFFFFFFFF1F58 :                     ;
(1)  425/FFFFFFFFFFFF1F58 :                     ; mouse_x/mouse_y:
(1)  426/FFFFFFFFFFFF1F58 :                     ; Pen X/Y position
(1)  427/FFFFFFFFFFFF1F58 :                     ; ----------------------------------------
(1)  428/FFFFFFFFFFFF1F58 :                     
(1)  429/FFFFFFFFFFFF1F58 :                     System_Input:
(1)  476/FFFFFFFFFFFF1F58 :                     
(1)  477/FFFFFFFFFFFF1F58 :                     	; ----------------------------------------
(1)  478/FFFFFFFFFFFF1F58 :                     	; Normal Genesis controls
(1)  479/FFFFFFFFFFFF1F58 : 4DF8 EA78           		lea	(RAM_InputData).w,a6	; a6 - Output
(1)  480/FFFFFFFFFFFF1F5C : 4BF9 00A1 0003      		lea	(sys_data_1),a5		; a5 - BASE Genesis Input regs area
(1)  481/FFFFFFFFFFFF1F62 : 6108                		bsr.s	.this_one
(1)  482/FFFFFFFFFFFF1F64 : DAFC 0002           		adda	#2,a5
(1)  483/FFFFFFFFFFFF1F68 : DCFC 0010           		adda	#sizeof_input,a6
(1)  484/FFFFFFFFFFFF1F6C :                     
(1)  485/FFFFFFFFFFFF1F6C :                     ; ----------------------------------------
(1)  486/FFFFFFFFFFFF1F6C :                     ; Read port
(1)  487/FFFFFFFFFFFF1F6C :                     ;
(1)  488/FFFFFFFFFFFF1F6C :                     ; a5 - Current port
(1)  489/FFFFFFFFFFFF1F6C :                     ; a6 - Output data
(1)  490/FFFFFFFFFFFF1F6C :                     ; ----------------------------------------
(1)  491/FFFFFFFFFFFF1F6C :                     
(1)  492/FFFFFFFFFFFF1F6C :                     .this_one:
(1)  493/FFFFFFFFFFFF1F6C : 611C                		bsr	.pick_id
(1)  494/FFFFFFFFFFFF1F6E : 1C87                		move.b	d7,pad_id(a6)
(1)  495/FFFFFFFFFFFF1F70 : 0C47 000F           		cmpi.w	#$0F,d7
(1)  496/FFFFFFFFFFFF1F74 : 670E                		beq.s	.exit
(1)  497/FFFFFFFFFFFF1F76 : 0247 000F           		andi.w	#$0F,d7
(1)  498/FFFFFFFFFFFF1F7A : DE47                		add.w	d7,d7
(1)  499/FFFFFFFFFFFF1F7C : 3C3B 703C           		move.w	.list(pc,d7.w),d6
(1)  500/FFFFFFFFFFFF1F80 : 4EFB 6038           		jmp	.list(pc,d6.w)
(1)  501/FFFFFFFFFFFF1F84 :                     .exit:
(1)  502/FFFFFFFFFFFF1F84 : 422E 0001           		clr.b	pad_ver(a6)
(1)  503/FFFFFFFFFFFF1F88 : 4E75                		rts
(1)  504/FFFFFFFFFFFF1F8A :                     
(1)  505/FFFFFFFFFFFF1F8A :                     ; ----------------------------------------
(1)  506/FFFFFFFFFFFF1F8A :                     ; Grab ID
(1)  507/FFFFFFFFFFFF1F8A :                     ; ----------------------------------------
(1)  508/FFFFFFFFFFFF1F8A :                     
(1)  509/FFFFFFFFFFFF1F8A :                     .pick_id:
(1)  510/FFFFFFFFFFFF1F8A : 7E00                		moveq	#0,d7
(1)  511/FFFFFFFFFFFF1F8C : 1ABC 0070           		move.b	#%01110000,(a5)		; TH=1,TR=1,TL=1
(1)  512/FFFFFFFFFFFF1F90 : 4E71                		nop
(1)  513/FFFFFFFFFFFF1F92 : 4E71                		nop
(1)  514/FFFFFFFFFFFF1F94 : 610A                		bsr	.read
(1)  515/FFFFFFFFFFFF1F96 : 1ABC 0030           		move.b	#%00110000,(a5)		; TH=0,TR=1,TL=1
(1)  516/FFFFFFFFFFFF1F9A : 4E71                		nop
(1)  517/FFFFFFFFFFFF1F9C : 4E71                		nop
(1)  518/FFFFFFFFFFFF1F9E : DE47                		add.w	d7,d7
(1)  519/FFFFFFFFFFFF1FA0 :                     .read:
(1)  520/FFFFFFFFFFFF1FA0 : 1A15                		move.b	(a5),d5
(1)  521/FFFFFFFFFFFF1FA2 : 1C05                		move.b	d5,d6
(1)  522/FFFFFFFFFFFF1FA4 : 0206 000C           		andi.b	#%1100,d6
(1)  523/FFFFFFFFFFFF1FA8 : 6702                		beq.s	.step_1
(1)  524/FFFFFFFFFFFF1FAA : 5247                		addq.w	#1,d7
(1)  525/FFFFFFFFFFFF1FAC :                     .step_1:
(1)  526/FFFFFFFFFFFF1FAC : DE47                		add.w	d7,d7
(1)  527/FFFFFFFFFFFF1FAE : 1C05                		move.b	d5,d6
(1)  528/FFFFFFFFFFFF1FB0 : 0246 0003           		andi.w	#%0011,d6
(1)  529/FFFFFFFFFFFF1FB4 : 6702                		beq.s	.step_2
(1)  530/FFFFFFFFFFFF1FB6 : 5247                		addq.w	#1,d7
(1)  531/FFFFFFFFFFFF1FB8 :                     .step_2:
(1)  532/FFFFFFFFFFFF1FB8 : 4E75                		rts
(1)  533/FFFFFFFFFFFF1FBA :                     
(1)  534/FFFFFFFFFFFF1FBA :                     ; ----------------------------------------
(1)  535/FFFFFFFFFFFF1FBA :                     ; Grab ID
(1)  536/FFFFFFFFFFFF1FBA :                     ; ----------------------------------------
(1)  537/FFFFFFFFFFFF1FBA :                     
(1)  538/FFFFFFFFFFFF1FBA :                     .list:
(1)  539/FFFFFFFFFFFF1FBA : FFCA                		dc.w .exit-.list	; $00
(1)  540/FFFFFFFFFFFF1FBC : FFCA                		dc.w .exit-.list
(1)  541/FFFFFFFFFFFF1FBE : FFCA                		dc.w .exit-.list
(1)  542/FFFFFFFFFFFF1FC0 : 0020                		dc.w .id_03-.list	; $03 - Mega Mouse
(1)  543/FFFFFFFFFFFF1FC2 : FFCA                		dc.w .exit-.list	; $04
(1)  544/FFFFFFFFFFFF1FC4 : FFCA                		dc.w .exit-.list
(1)  545/FFFFFFFFFFFF1FC6 : FFCA                		dc.w .exit-.list
(1)  546/FFFFFFFFFFFF1FC8 : FFCA                		dc.w .exit-.list
(1)  547/FFFFFFFFFFFF1FCA : FFCA                		dc.w .exit-.list	; $08
(1)  548/FFFFFFFFFFFF1FCC : FFCA                		dc.w .exit-.list
(1)  549/FFFFFFFFFFFF1FCE : FFCA                		dc.w .exit-.list
(1)  550/FFFFFFFFFFFF1FD0 : FFCA                		dc.w .exit-.list
(1)  551/FFFFFFFFFFFF1FD2 : FFCA                		dc.w .exit-.list	; $0C
(1)  552/FFFFFFFFFFFF1FD4 : 00CA                		dc.w .id_0D-.list	; $0D - Genesis controller 3 or 6 button
(1)  553/FFFFFFFFFFFF1FD6 : FFCA                		dc.w .exit-.list
(1)  554/FFFFFFFFFFFF1FD8 : FFCA                		dc.w .exit-.list	; $0F - No controller / Master System controller (Buttons 1 and 2)
(1)  555/FFFFFFFFFFFF1FDA :                     
(1)  556/FFFFFFFFFFFF1FDA :                     ; ----------------------------------------
(1)  557/FFFFFFFFFFFF1FDA :                     ; ID $03
(1)  558/FFFFFFFFFFFF1FDA :                     ;
(1)  559/FFFFFFFFFFFF1FDA :                     ; Mega Mouse
(1)  560/FFFFFFFFFFFF1FDA :                     ; ----------------------------------------
(1)  561/FFFFFFFFFFFF1FDA :                     
(1)  562/FFFFFFFFFFFF1FDA :                     ; *** NOT TESTED ON HARDWARE ***
(1)  563/FFFFFFFFFFFF1FDA :                     ; *** NO RELEASED BITS ***
(1)  564/FFFFFFFFFFFF1FDA :                     
(1)  565/FFFFFFFFFFFF1FDA :                     .id_03:
(1)  566/FFFFFFFFFFFF1FDA : 1ABC 0020           		move.b	#$20,(a5)
(1)  567/FFFFFFFFFFFF1FDE : 1B7C 0060 0006      		move.b	#$60,6(a5)
(1)  568/FFFFFFFFFFFF1FE4 : 0815 0004           		btst	#4,(a5)
(1)  569/FFFFFFFFFFFF1FE8 : 6700 0094           		beq.w	.invalid
(1)  570/FFFFFFFFFFFF1FEC : 1ABC 0000           		move.b	#$00,(a5)	; $0F
(1)  571/FFFFFFFFFFFF1FF0 : 4E71                		nop
(1)  572/FFFFFFFFFFFF1FF2 : 4E71                		nop
(1)  573/FFFFFFFFFFFF1FF4 : 1ABC 0020           		move.b	#$20,(a5)	; $0F
(1)  574/FFFFFFFFFFFF1FF8 : 4E71                		nop
(1)  575/FFFFFFFFFFFF1FFA : 4E71                		nop
(1)  576/FFFFFFFFFFFF1FFC : 1ABC 0000           		move.b	#$00,(a5)	; Yo | Xo | Ys | Xs
(1)  577/FFFFFFFFFFFF2000 : 4E71                		nop
(1)  578/FFFFFFFFFFFF2002 : 4E71                		nop
(1)  579/FFFFFFFFFFFF2004 : 1A15                		move.b	(a5),d5		; d5 - X/Y direction bits (Ys Xs)
(1)  580/FFFFFFFFFFFF2006 : 1ABC 0020           		move.b	#$20,(a5)	; C | M | R | L
(1)  581/FFFFFFFFFFFF200A : 4E71                		nop
(1)  582/FFFFFFFFFFFF200C : 4E71                		nop
(1)  583/FFFFFFFFFFFF200E : 1E15                		move.b	(a5),d7
(1)  584/FFFFFFFFFFFF2010 : 0247 000F            		andi.w	#%1111,d7
(1)  585/FFFFFFFFFFFF2014 : 3C2E 0002           		move.w	on_hold(a6),d6
(1)  586/FFFFFFFFFFFF2018 : BF46                		eor.w	d7,d6
(1)  587/FFFFFFFFFFFF201A : 3D47 0002           		move.w	d7,on_hold(a6)
(1)  588/FFFFFFFFFFFF201E : CC47                		and.w	d7,d6
(1)  589/FFFFFFFFFFFF2020 : 3D46 0004           		move.w	d6,on_press(a6)
(1)  590/FFFFFFFFFFFF2024 : 1ABC 0000           		move.b	#$00,(a5)	; X7 | X6 | X5 | X4
(1)  591/FFFFFFFFFFFF2028 : 4E71                		nop
(1)  592/FFFFFFFFFFFF202A : 4E71                		nop
(1)  593/FFFFFFFFFFFF202C : 1E15                		move.b	(a5),d7
(1)  594/FFFFFFFFFFFF202E : 1ABC 0020           		move.b	#$20,(a5)	; X3 | X2 | X1 | X0
(1)  595/FFFFFFFFFFFF2032 : 0247 000F           		andi.w	#%1111,d7
(1)  596/FFFFFFFFFFFF2036 : E94F                		lsl.w	#4,d7
(1)  597/FFFFFFFFFFFF2038 : 4E71                		nop
(1)  598/FFFFFFFFFFFF203A : 1C15                		move.b	(a5),d6
(1)  599/FFFFFFFFFFFF203C : 0246 000F           		andi.w	#%1111,d6
(1)  600/FFFFFFFFFFFF2040 : 8E46                		or.w	d6,d7
(1)  601/FFFFFFFFFFFF2042 : 0805 0000           		btst    #0,d5
(1)  602/FFFFFFFFFFFF2046 : 6704                		beq.s	.x_neg
(1)  603/FFFFFFFFFFFF2048 : 4407                		neg.b	d7
(1)  604/FFFFFFFFFFFF204A : 4447                		neg.w	d7
(1)  605/FFFFFFFFFFFF204C :                     .x_neg:
(1)  606/FFFFFFFFFFFF204C : 3D47 0008           		move.w	d7,mouse_x(a6)
(1)  607/FFFFFFFFFFFF2050 : 1ABC 0000           		move.b	#$00,(a5)	; Y7 | Y6 | Y5 | Y4
(1)  608/FFFFFFFFFFFF2054 : 4E71                		nop
(1)  609/FFFFFFFFFFFF2056 : 4E71                		nop
(1)  610/FFFFFFFFFFFF2058 : 1E15                		move.b	(a5),d7
(1)  611/FFFFFFFFFFFF205A : 1ABC 0020           		move.b	#$20,(a5)	; Y3 | Y2 | Y1 | Y0
(1)  612/FFFFFFFFFFFF205E : 0247 000F           		andi.w	#%1111,d7
(1)  613/FFFFFFFFFFFF2062 : E94F                		lsl.w	#4,d7
(1)  614/FFFFFFFFFFFF2064 : 4E71                		nop
(1)  615/FFFFFFFFFFFF2066 : 1C15                		move.b	(a5),d6
(1)  616/FFFFFFFFFFFF2068 : 0246 000F           		andi.w	#%1111,d6
(1)  617/FFFFFFFFFFFF206C : 8E46                		or.w	d6,d7
(1)  618/FFFFFFFFFFFF206E : 0805 0001           		btst    #1,d5
(1)  619/FFFFFFFFFFFF2072 : 6704                		beq.s	.y_neg
(1)  620/FFFFFFFFFFFF2074 : 4407                		neg.b	d7
(1)  621/FFFFFFFFFFFF2076 : 4447                		neg.w	d7
(1)  622/FFFFFFFFFFFF2078 :                     .y_neg:
(1)  623/FFFFFFFFFFFF2078 : 4447                		neg.w	d7		; Reverse Y
(1)  624/FFFFFFFFFFFF207A : 3D47 000A           		move.w	d7,mouse_y(a6)
(1)  625/FFFFFFFFFFFF207E :                     
(1)  626/FFFFFFFFFFFF207E :                     .invalid:
(1)  627/FFFFFFFFFFFF207E : 1ABC 0060           		move.b	#$60,(a5)
(1)  628/FFFFFFFFFFFF2082 : 4E75                		rts
(1)  629/FFFFFFFFFFFF2084 :                     
(1)  630/FFFFFFFFFFFF2084 :                     ; ----------------------------------------
(1)  631/FFFFFFFFFFFF2084 :                     ; ID $0D
(1)  632/FFFFFFFFFFFF2084 :                     ;
(1)  633/FFFFFFFFFFFF2084 :                     ; Normal controller: 3 button or 6 button.
(1)  634/FFFFFFFFFFFF2084 :                     ; ----------------------------------------
(1)  635/FFFFFFFFFFFF2084 :                     
(1)  636/FFFFFFFFFFFF2084 :                     .id_0D:
(1)  637/FFFFFFFFFFFF2084 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU
(1)  638/FFFFFFFFFFFF2088 : 4E71                		nop
(1)  639/FFFFFFFFFFFF208A : 4E71                		nop
(1)  640/FFFFFFFFFFFF208C : 1A15                		move.b	(a5),d5
(1)  641/FFFFFFFFFFFF208E : 0245 003F           		andi.w	#%00111111,d5
(1)  642/FFFFFFFFFFFF2092 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU
(1)  643/FFFFFFFFFFFF2096 : 4E71                		nop
(1)  644/FFFFFFFFFFFF2098 : 4E71                		nop
(1)  645/FFFFFFFFFFFF209A : 1E15                		move.b	(a5),d7
(1)  646/FFFFFFFFFFFF209C : E54F                		lsl.w	#2,d7
(1)  647/FFFFFFFFFFFF209E : 0247 00C0           		andi.w	#%11000000,d7
(1)  648/FFFFFFFFFFFF20A2 : 8E45                		or.w	d5,d7
(1)  649/FFFFFFFFFFFF20A4 : 1ABC 0040           		move.b	#$40,(a5)	; Show CB|RLDU (2)
(1)  650/FFFFFFFFFFFF20A8 : 4647                		not.w	d7
(1)  651/FFFFFFFFFFFF20AA : 1A2E 0003           		move.b	on_hold+1(a6),d5
(1)  652/FFFFFFFFFFFF20AE : 1805                		move.b	d5,d4
(1)  653/FFFFFFFFFFFF20B0 : 1ABC 0000           		move.b	#$00,(a5)	; Show SA|RLDU (3)
(1)  654/FFFFFFFFFFFF20B4 : BF05                		eor.b	d7,d5
(1)  655/FFFFFFFFFFFF20B6 : 1D47 0003           		move.b	d7,on_hold+1(a6)
(1)  656/FFFFFFFFFFFF20BA : CA07                		and.b	d7,d5
(1)  657/FFFFFFFFFFFF20BC : 1ABC 0040           		move.b	#$40,(a5)	; 6 button responds (4)
(1)  658/FFFFFFFFFFFF20C0 : 1D45 0005           		move.b	d5,on_press+1(a6)
(1)  659/FFFFFFFFFFFF20C4 : 1A07                		move.b	d7,d5
(1)  660/FFFFFFFFFFFF20C6 : 1E15                		move.b	(a5),d7		; Grab ??|MXYZ
(1)  661/FFFFFFFFFFFF20C8 : 1ABC 0000            		move.b	#$00,(a5)	; (5)
(1)  662/FFFFFFFFFFFF20CC : B905                		eor.b	d4,d5
(1)  663/FFFFFFFFFFFF20CE : CA04                		and.b	d4,d5
(1)  664/FFFFFFFFFFFF20D0 : 1C15                 		move.b	(a5),d6		; Type: $03 old, $0F new
(1)  665/FFFFFFFFFFFF20D2 : 1ABC 0040            		move.b	#$40,(a5)	; (6)
(1)  666/FFFFFFFFFFFF20D6 : 1D45 0007           		move.b	d5,on_release+1(a6)
(1)  667/FFFFFFFFFFFF20DA : 0246 000F           		andi.w	#$F,d6
(1)  668/FFFFFFFFFFFF20DE : E44E                		lsr.w	#2,d6
(1)  669/FFFFFFFFFFFF20E0 : 0246 0001           		andi.w	#1,d6
(1)  670/FFFFFFFFFFFF20E4 : 6724                		beq.s	.oldpad
(1)  671/FFFFFFFFFFFF20E6 : 4607                		not.b	d7
(1)  672/FFFFFFFFFFFF20E8 : 0247 000F            		andi.w	#%1111,d7
(1)  673/FFFFFFFFFFFF20EC : 1C07                 		move.b	d7,d6
(1)  674/FFFFFFFFFFFF20EE : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  675/FFFFFFFFFFFF20F2 : BB06                		eor.b	d5,d6
(1)  676/FFFFFFFFFFFF20F4 : CC05                		and.b	d5,d6
(1)  677/FFFFFFFFFFFF20F6 : 1D46 0006           		move.b	d6,on_release(a6)
(1)  678/FFFFFFFFFFFF20FA : 1A2E 0002           		move.b	on_hold(a6),d5
(1)  679/FFFFFFFFFFFF20FE : BF05                		eor.b	d7,d5
(1)  680/FFFFFFFFFFFF2100 : 1D47 0002           		move.b	d7,on_hold(a6)
(1)  681/FFFFFFFFFFFF2104 : CA07                		and.b	d7,d5
(1)  682/FFFFFFFFFFFF2106 : 1D45 0004           		move.b	d5,on_press(a6)
(1)  683/FFFFFFFFFFFF210A :                     .oldpad:
(1)  684/FFFFFFFFFFFF210A : 1D46 0001           		move.b	d6,pad_ver(a6)
(1)  685/FFFFFFFFFFFF210E : 4E75                		rts
(1)  687/FFFFFFFFFFFF2110 :                     
(1)  688/FFFFFFFFFFFF2110 :                     ; ============================================================
(1)  689/FFFFFFFFFFFF2110 :                     ; --------------------------------------------------------
(1)  690/FFFFFFFFFFFF2110 :                     ; System_SramInit
(1)  691/FFFFFFFFFFFF2110 :                     ;
(1)  692/FFFFFFFFFFFF2110 :                     ; Enable SRAM/BRAM support
(1)  693/FFFFFFFFFFFF2110 :                     ;
(1)  694/FFFFFFFFFFFF2110 :                     ; Input:
(1)  695/FFFFFFFFFFFF2110 :                     ; a0 | CD/CD32X ONLY: Save data settings for BRAM
(1)  696/FFFFFFFFFFFF2110 :                     ;      dc.b "SAVE_NAME__",0
(1)  697/FFFFFFFFFFFF2110 :                     ;      dc.w SET_SRAMSIZE/$40 ; (save_size/$20 if using
(1)  698/FFFFFFFFFFFF2110 :                     ;                            ; protection)
(1)  699/FFFFFFFFFFFF2110 :                     ;      dc.w flags:
(1)  700/FFFFFFFFFFFF2110 :                     ;            0 | Normal
(1)  701/FFFFFFFFFFFF2110 :                     ;           -1 | Save protection
(1)  702/FFFFFFFFFFFF2110 :                     ;
(1)  703/FFFFFFFFFFFF2110 :                     ;
(1)  704/FFFFFFFFFFFF2110 :                     ; Notes:
(1)  705/FFFFFFFFFFFF2110 :                     ; - ONLY use the RAM_SaveData section to modify
(1)  706/FFFFFFFFFFFF2110 :                     ;   your changes, then call System_SramSave to
(1)  707/FFFFFFFFFFFF2110 :                     ;   save it into SRAM/BRAM.
(1)  708/FFFFFFFFFFFF2110 :                     ;
(1)  709/FFFFFFFFFFFF2110 :                     ; CD/CD32X ONLY:
(1)  710/FFFFFFFFFFFF2110 :                     ; - Call gemaStopAll FIRST if any track uses
(1)  711/FFFFFFFFFFFF2110 :                     ;   PCM samples
(1)  712/FFFFFFFFFFFF2110 :                     ; - NO lowercase CHARACTERS, NO " "($20) SPACES.
(1)  713/FFFFFFFFFFFF2110 :                     ; - BE CAREFUL CHOOSING YOUR FILENAME as it can
(1)  714/FFFFFFFFFFFF2110 :                     ;   OVERWRITE without warning any other save.
(1)  715/FFFFFFFFFFFF2110 :                     ; --------------------------------------------------------
(1)  716/FFFFFFFFFFFF2110 :                     
(1)  717/FFFFFFFFFFFF2110 :                     System_SramInit:
(1)  721/FFFFFFFFFFFF2110 :                     	; ------------------------------------------------
(1)  722/FFFFFFFFFFFF2110 :                     	; CD BRAM
(1)  723/FFFFFFFFFFFF2110 :                     	; ------------------------------------------------
(1)  724/FFFFFFFFFFFF2110 : 4A78 FB16           		tst.w	(RAM_SaveEnable).w			; Already initialized?
(1)  725/FFFFFFFFFFFF2114 : 6668                		bne	.already_set
(1)  726/FFFFFFFFFFFF2116 :                     ; 	if MARSCD
(1)  727/FFFFFFFFFFFF2116 :                     ; 		bset	#0,(sysmars_reg+dreqctl+1).l		; Set RV=1
(1)  728/FFFFFFFFFFFF2116 :                     ; 	endif
(1)  729/FFFFFFFFFFFF2116 : 6100 040A           		bsr	System_MdMcd_SubWait
(1)  730/FFFFFFFFFFFF211A : 4BFA 0618           		lea	def_SaveInfo(pc),a5			; Init+Load SRAM/BRAM feature
(1)  731/FFFFFFFFFFFF211E : 4DF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a6		; Copy-paste info
(1)  732/FFFFFFFFFFFF2124 : 7E07                		moveq	#($10/2)-1,d7
(1)  733/FFFFFFFFFFFF2126 :                     .copy_paste:
(1)  734/FFFFFFFFFFFF2126 : 3CDD                		move.w	(a5)+,(a6)+
(1)  735/FFFFFFFFFFFF2128 : 51CF FFFC           		dbf	d7,.copy_paste
(1)  736/FFFFFFFFFFFF212C : 7008                		moveq	#$08,d0					; Init BRAM support
(1)  737/FFFFFFFFFFFF212E : 6100 040E           		bsr	System_MdMcd_SubTask
(1)  738/FFFFFFFFFFFF2132 : 6100 03EE           		bsr	System_MdMcd_SubWait
(1)  739/FFFFFFFFFFFF2136 :                     ; 	if MARSCD
(1)  740/FFFFFFFFFFFF2136 :                     ; 		bclr	#0,(sysmars_reg+dreqctl+1).l		; Set RV=0
(1)  741/FFFFFFFFFFFF2136 :                     ; 	endif
(1)  742/FFFFFFFFFFFF2136 : 31FC 0000 FB16      		move.w	#0,(RAM_SaveEnable).w			; Disable SAVE R/W
(1)  743/FFFFFFFFFFFF213C : 0C79 FFFE 00A1      		cmp.w	#-2,(sysmcd_reg+mcd_dcomm_s).l		; Got -2 No RAM / Unformatted?
         FFFFFFFFFFFF2142 : 2020             
(1)  744/FFFFFFFFFFFF2144 : 6734                		beq.s	.cont_save
(1)  745/FFFFFFFFFFFF2146 :                     .not_fail:
(1)  746/FFFFFFFFFFFF2146 : 31FC 0001 FB16      		move.w	#1,(RAM_SaveEnable).w			; Enable SAVE Read/Write
(1)  747/FFFFFFFFFFFF214C : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l		; Found the file?
         FFFFFFFFFFFF2152 : 2020             
(1)  748/FFFFFFFFFFFF2154 : 6624                		bne.s	.cont_save
(1)  749/FFFFFFFFFFFF2156 : 48E7 0302           		movem.l	d6-d7/a6,-(sp)
(1)  750/FFFFFFFFFFFF215A : 4DF8 E878           		lea	(RAM_SaveData).w,a6			; If NOT found, Make SAVE template
(1)  751/FFFFFFFFFFFF215E : 7C00                		moveq	#0,d6
(1)  752/FFFFFFFFFFFF2160 : 3E3C 01FF           		move.w	#SET_SRAMSIZE-1,d7
(1)  753/FFFFFFFFFFFF2164 :                     .clr_sram:
(1)  754/FFFFFFFFFFFF2164 : 1CC6                		move.b	d6,(a6)+
(1)  755/FFFFFFFFFFFF2166 : 51CF FFFC           		dbf	d7,.clr_sram
(1)  756/FFFFFFFFFFFF216A : 4CDF 40C0           		movem.l	(sp)+,d6-d7/a6
(1)  757/FFFFFFFFFFFF216E : 21FC 5341 5645      		move.l	#TAG_SRAMDATA,(RAM_SaveData).w		; Write SAVE template
         FFFFFFFFFFFF2174 : E878             
(1)  758/FFFFFFFFFFFF2176 : 6100 00AC           		bsr	System_SramSave
(1)  759/FFFFFFFFFFFF217A :                     .cont_save:
(1)  760/FFFFFFFFFFFF217A : 6104                		bsr	System_SramLoad				; Get data from BRAM
(1)  761/FFFFFFFFFFFF217C :                     	; ------------------------------------------------
(1)  786/FFFFFFFFFFFF217C :                     .cant_use:
(1)  787/FFFFFFFFFFFF217C : 6002                		bra	System_SramLoad
(1)  788/FFFFFFFFFFFF217E :                     .already_set:
(1)  789/FFFFFFFFFFFF217E : 4E75                		rts
(1)  790/FFFFFFFFFFFF2180 :                     
(1)  791/FFFFFFFFFFFF2180 :                     ; --------------------------------------------------------
(1)  792/FFFFFFFFFFFF2180 :                     ; System_SramLoad
(1)  793/FFFFFFFFFFFF2180 :                     ;
(1)  794/FFFFFFFFFFFF2180 :                     ; Load the SRAM/BRAM to the SAVE data buffer
(1)  795/FFFFFFFFFFFF2180 :                     ; --------------------------------------------------------
(1)  796/FFFFFFFFFFFF2180 :                     
(1)  797/FFFFFFFFFFFF2180 :                     System_SramLoad:
(1)  801/FFFFFFFFFFFF2180 :                     	; ------------------------------------------------
(1)  802/FFFFFFFFFFFF2180 :                     	; CD BRAM
(1)  803/FFFFFFFFFFFF2180 :                     	; ------------------------------------------------
(1)  804/FFFFFFFFFFFF2180 : 4A78 FB16           		tst.w	(RAM_SaveEnable).w
(1)  805/FFFFFFFFFFFF2184 : 6700 009C           		beq	.cant_use
(1)  806/FFFFFFFFFFFF2188 : 40E7                		move.w	sr,-(sp)
(1)  807/FFFFFFFFFFFF218A : 48E7 830E           		movem.l	d0/d6-d7/a4-a6,-(sp)
(1)  808/FFFFFFFFFFFF218E : 6100 0392           		bsr	System_MdMcd_SubWait
(1)  809/FFFFFFFFFFFF2192 : 7009                		moveq	#$09,d0
(1)  810/FFFFFFFFFFFF2194 : 6100 03A8           		bsr	System_MdMcd_SubTask
(1)  811/FFFFFFFFFFFF2198 : 44FC 0001           		move	#1,ccr
(1)  812/FFFFFFFFFFFF219C : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l	; Got -1
         FFFFFFFFFFFF21A2 : 2020             
(1)  813/FFFFFFFFFFFF21A4 : 6776                		beq.s	.set_bad
(1)  814/FFFFFFFFFFFF21A6 : 0839 0004 00A1      .wait_sub:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait clean SIGNAL
         FFFFFFFFFFFF21AC : 200F             
(1)  815/FFFFFFFFFFFF21AE : 66F6                		bne.s	.wait_sub
(1)  816/FFFFFFFFFFFF21B0 : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF21B6 : 200E             
(1)  817/FFFFFFFFFFFF21B8 : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; Set LOCK
         FFFFFFFFFFFF21BE : 200E             
(1)  818/FFFFFFFFFFFF21C0 : 4DF8 E878           		lea	(RAM_SaveData).w,a6
(1)  819/FFFFFFFFFFFF21C4 : 4BF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s).l,a5
(1)  820/FFFFFFFFFFFF21CA : 3E3C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d7
(1)  821/FFFFFFFFFFFF21CE : 0839 0007 00A1      .get_data:	btst	#7,(sysmcd_reg+mcd_comm_s).l	; SUB finished?
         FFFFFFFFFFFF21D4 : 200F             
(1)  822/FFFFFFFFFFFF21D6 : 6738                		beq.s	.exit_now
(1)  823/FFFFFFFFFFFF21D8 : 0839 0004 00A1      		btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL set
         FFFFFFFFFFFF21DE : 200F             
(1)  824/FFFFFFFFFFFF21E0 : 67EC                		beq.s	.get_data
(1)  825/FFFFFFFFFFFF21E2 : 284D                		move.l	a5,a4
(1)  826/FFFFFFFFFFFF21E4 : 3CDC                		move.w	(a4)+,(a6)+
(1)  827/FFFFFFFFFFFF21E6 : 3CDC                		move.w	(a4)+,(a6)+
(1)  828/FFFFFFFFFFFF21E8 : 3CDC                		move.w	(a4)+,(a6)+
(1)  829/FFFFFFFFFFFF21EA : 3CDC                		move.w	(a4)+,(a6)+
(1)  830/FFFFFFFFFFFF21EC : 3CDC                		move.w	(a4)+,(a6)+
(1)  831/FFFFFFFFFFFF21EE : 3CDC                		move.w	(a4)+,(a6)+
(1)  832/FFFFFFFFFFFF21F0 : 3CDC                		move.w	(a4)+,(a6)+
(1)  833/FFFFFFFFFFFF21F2 : 3CDC                		move.w	(a4)+,(a6)+
(1)  834/FFFFFFFFFFFF21F4 : 08F9 0004 00A1      		bset	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF21FA : 200E             
(1)  835/FFFFFFFFFFFF21FC : 0839 0004 00A1      .wait_signo:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL clear
         FFFFFFFFFFFF2202 : 200F             
(1)  836/FFFFFFFFFFFF2204 : 66F6                		bne.s	.wait_signo
(1)  837/FFFFFFFFFFFF2206 : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l	; Clear PASS
         FFFFFFFFFFFF220C : 200E             
(1)  838/FFFFFFFFFFFF220E : 60BE                		bra.s	.get_data
(1)  839/FFFFFFFFFFFF2210 :                     .exit_now:
(1)  840/FFFFFFFFFFFF2210 : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; Clear LOCK
         FFFFFFFFFFFF2216 : 200E             
(1)  841/FFFFFFFFFFFF2218 : 44FC 0000           		move	#0,ccr
(1)  842/FFFFFFFFFFFF221C :                     .set_bad:
(1)  843/FFFFFFFFFFFF221C : 4CDF 70C1           		movem.l	(sp)+,d0/d6-d7/a4-a6
(1)  844/FFFFFFFFFFFF2220 : 46DF                		move.w	(sp)+,sr
(1)  845/FFFFFFFFFFFF2222 :                     .cant_use:
(1)  846/FFFFFFFFFFFF2222 :                     	; ------------------------------------------------
(1)  879/FFFFFFFFFFFF2222 : 4E75                		rts
(1)  880/FFFFFFFFFFFF2224 :                     
(1)  881/FFFFFFFFFFFF2224 :                     ; --------------------------------------------------------
(1)  882/FFFFFFFFFFFF2224 :                     ; System_SramSave
(1)  883/FFFFFFFFFFFF2224 :                     ;
(1)  884/FFFFFFFFFFFF2224 :                     ; Write the SAVE data buffer to SRAM/BRAM
(1)  885/FFFFFFFFFFFF2224 :                     ;
(1)  886/FFFFFFFFFFFF2224 :                     ; NOTE SCD/CD32X:
(1)  887/FFFFFFFFFFFF2224 :                     ; Uses ALL mcd_dcomm_m PORTS
(1)  888/FFFFFFFFFFFF2224 :                     ;
(1)  889/FFFFFFFFFFFF2224 :                     ; Stop or Pause All GEMA Sequences that use PCM samples
(1)  890/FFFFFFFFFFFF2224 :                     ; before calling this (TODO: a PCM-block flag)
(1)  891/FFFFFFFFFFFF2224 :                     ; --------------------------------------------------------
(1)  892/FFFFFFFFFFFF2224 :                     
(1)  893/FFFFFFFFFFFF2224 :                     System_SramSave:
(1)  897/FFFFFFFFFFFF2224 :                     
(1)  898/FFFFFFFFFFFF2224 :                     	; ------------------------------------------------
(1)  899/FFFFFFFFFFFF2224 :                     	; CD BRAM
(1)  900/FFFFFFFFFFFF2224 :                     	; ------------------------------------------------
(1)  901/FFFFFFFFFFFF2224 : 4A78 FB16           		tst.w	(RAM_SaveEnable).w
(1)  902/FFFFFFFFFFFF2228 : 6700 008C           		beq	.cant_use
(1)  903/FFFFFFFFFFFF222C : 40E7                		move.w	sr,-(sp)
(1)  904/FFFFFFFFFFFF222E : 48E7 830E           		movem.l	d0/d6-d7/a4-a6,-(sp)
(1)  905/FFFFFFFFFFFF2232 : 6100 02EE           		bsr	System_MdMcd_SubWait
(1)  906/FFFFFFFFFFFF2236 : 700A                		moveq	#$0A,d0
(1)  907/FFFFFFFFFFFF2238 : 6100 0304           		bsr	System_MdMcd_SubTask
(1)  908/FFFFFFFFFFFF223C : 44FC 0001           		move	#1,ccr
(1)  909/FFFFFFFFFFFF2240 : 0C79 FFFF 00A1      		cmp.w	#-1,(sysmcd_reg+mcd_dcomm_s).l	; Got -1
         FFFFFFFFFFFF2246 : 2020             
(1)  910/FFFFFFFFFFFF2248 : 6766                		beq.s	.set_bad
(1)  911/FFFFFFFFFFFF224A : 0839 0004 00A1      .wait_sub:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait clean SIGNAL
         FFFFFFFFFFFF2250 : 200F             
(1)  912/FFFFFFFFFFFF2252 : 66F6                		bne.s	.wait_sub
(1)  913/FFFFFFFFFFFF2254 : 08F9 0007 00A1      		bset	#7,(sysmcd_reg+mcd_comm_m).l	; Set LOCK
         FFFFFFFFFFFF225A : 200E             
(1)  914/FFFFFFFFFFFF225C : 4DF8 E878           		lea	(RAM_SaveData).w,a6
(1)  915/FFFFFFFFFFFF2260 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1)  916/FFFFFFFFFFFF2266 : 3E3C 001F           		move.w	#(SET_SRAMSIZE/$10)-1,d7
(1)  917/FFFFFFFFFFFF226A : 284D                .send_data:	move.l	a5,a4
(1)  918/FFFFFFFFFFFF226C : 38DE                		move.w	(a6)+,(a4)+
(1)  919/FFFFFFFFFFFF226E : 38DE                		move.w	(a6)+,(a4)+
(1)  920/FFFFFFFFFFFF2270 : 38DE                		move.w	(a6)+,(a4)+
(1)  921/FFFFFFFFFFFF2272 : 38DE                		move.w	(a6)+,(a4)+
(1)  922/FFFFFFFFFFFF2274 : 38DE                		move.w	(a6)+,(a4)+
(1)  923/FFFFFFFFFFFF2276 : 38DE                		move.w	(a6)+,(a4)+
(1)  924/FFFFFFFFFFFF2278 : 38DE                		move.w	(a6)+,(a4)+
(1)  925/FFFFFFFFFFFF227A : 38DE                		move.w	(a6)+,(a4)+
(1)  926/FFFFFFFFFFFF227C : 08F9 0004 00A1      		bset	#4,(sysmcd_reg+mcd_comm_m).l	; Set PASS
         FFFFFFFFFFFF2282 : 200E             
(1)  927/FFFFFFFFFFFF2284 : 0839 0004 00A1      .wait_signi:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL set
         FFFFFFFFFFFF228A : 200F             
(1)  928/FFFFFFFFFFFF228C : 67F6                		beq.s	.wait_signi
(1)  929/FFFFFFFFFFFF228E : 08B9 0004 00A1      		bclr	#4,(sysmcd_reg+mcd_comm_m).l
         FFFFFFFFFFFF2294 : 200E             
(1)  930/FFFFFFFFFFFF2296 : 0839 0004 00A1      .wait_signo:	btst	#4,(sysmcd_reg+mcd_comm_s).l	; Wait SIGNAL clear
         FFFFFFFFFFFF229C : 200F             
(1)  931/FFFFFFFFFFFF229E : 66F6                		bne.s	.wait_signo
(1)  932/FFFFFFFFFFFF22A0 : 51CF FFC8           		dbf	d7,.send_data
(1)  933/FFFFFFFFFFFF22A4 : 08B9 0007 00A1      		bclr	#7,(sysmcd_reg+mcd_comm_m).l	; Clear LOCK
         FFFFFFFFFFFF22AA : 200E             
(1)  934/FFFFFFFFFFFF22AC : 44FC 0000           		move	#0,ccr
(1)  935/FFFFFFFFFFFF22B0 :                     .set_bad:
(1)  936/FFFFFFFFFFFF22B0 : 4CDF 70C1           		movem.l	(sp)+,d0/d6-d7/a4-a6
(1)  937/FFFFFFFFFFFF22B4 : 46DF                		move.w	(sp)+,sr
(1)  938/FFFFFFFFFFFF22B6 :                     .cant_use:
(1)  939/FFFFFFFFFFFF22B6 :                     	; ------------------------------------------------
(1)  969/FFFFFFFFFFFF22B6 : 4E75                		rts
(1)  970/FFFFFFFFFFFF22B8 :                     
(1)  971/FFFFFFFFFFFF22B8 :                     ; ============================================================
(1)  972/FFFFFFFFFFFF22B8 :                     ; --------------------------------------------------------
(1)  973/FFFFFFFFFFFF22B8 :                     ; System_Default
(1)  974/FFFFFFFFFFFF22B8 :                     ;
(1)  975/FFFFFFFFFFFF22B8 :                     ; Initializes current screen mode
(1)  976/FFFFFFFFFFFF22B8 :                     ;
(1)  977/FFFFFFFFFFFF22B8 :                     ; Uses:
(1)  978/FFFFFFFFFFFF22B8 :                     ; ALL
(1)  979/FFFFFFFFFFFF22B8 :                     ; --------------------------------------------------------
(1)  980/FFFFFFFFFFFF22B8 :                     
(1)  981/FFFFFFFFFFFF22B8 :                     System_Default:
(1)  982/FFFFFFFFFFFF22B8 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1)  983/FFFFFFFFFFFF22BC : 4DF8 B800           		lea	(RAM_ScrnBuff).w,a6
(1)  984/FFFFFFFFFFFF22C0 : 3E3C 0FFF           		move.w	#MAX_ScrnBuff-1,d7
(1)  985/FFFFFFFFFFFF22C4 : 7C00                		moveq	#0,d6
(1)  986/FFFFFFFFFFFF22C6 :                     .clr_loop:
(1)  987/FFFFFFFFFFFF22C6 : 1CC6                		move.b	d6,(a6)+
(1)  988/FFFFFFFFFFFF22C8 : 51CF FFFC           		dbf	d7,.clr_loop
(1)  989/FFFFFFFFFFFF22CC : 6100 E3BC           		bsr	Video_Clear
(1)  990/FFFFFFFFFFFF22D0 : 6100 E068           		bsr	Video_Default
(1)  991/FFFFFFFFFFFF22D4 : 6000 0580           		bra	Object_Init			; Reset all objects
(1)  992/FFFFFFFFFFFF22D8 :                     
(1)  993/FFFFFFFFFFFF22D8 :                     ; ====================================================================
(1)  994/FFFFFFFFFFFF22D8 :                     ; ----------------------------------------------------------------
(1)  995/FFFFFFFFFFFF22D8 :                     ; Default interrupts
(1)  996/FFFFFFFFFFFF22D8 :                     ; ----------------------------------------------------------------
(1)  997/FFFFFFFFFFFF22D8 :                     
(1)  998/FFFFFFFFFFFF22D8 :                     ; --------------------------------------------------------
(1)  999/FFFFFFFFFFFF22D8 :                     ; VBlank
(1) 1000/FFFFFFFFFFFF22D8 :                     ; --------------------------------------------------------
(1) 1001/FFFFFFFFFFFF22D8 :                     
(1) 1002/FFFFFFFFFFFF22D8 :                     VInt_Default:
(1) 1003/FFFFFFFFFFFF22D8 :                     ; 		movem.l	d0-a6,-(sp)
(1) 1004/FFFFFFFFFFFF22D8 :                     ; 		bsr	System_Input
(1) 1005/FFFFFFFFFFFF22D8 :                     ; 		addi.l	#1,(RAM_FrameCount).w
(1) 1006/FFFFFFFFFFFF22D8 :                     ; 		movem.l	(sp)+,d0-a6
(1) 1007/FFFFFFFFFFFF22D8 : 4E73                		rte
(1) 1008/FFFFFFFFFFFF22DA :                     
(1) 1009/FFFFFFFFFFFF22DA :                     ; --------------------------------------------------------
(1) 1010/FFFFFFFFFFFF22DA :                     ; HBlank
(1) 1011/FFFFFFFFFFFF22DA :                     ; --------------------------------------------------------
(1) 1012/FFFFFFFFFFFF22DA :                     
(1) 1013/FFFFFFFFFFFF22DA :                     HInt_Default:
(1) 1014/FFFFFFFFFFFF22DA : 4E73                		rte
(1) 1015/FFFFFFFFFFFF22DC :                     
(1) 1016/FFFFFFFFFFFF22DC :                     ; --------------------------------------------------------
(1) 1017/FFFFFFFFFFFF22DC :                     ; External interrupt
(1) 1018/FFFFFFFFFFFF22DC :                     ; --------------------------------------------------------
(1) 1019/FFFFFFFFFFFF22DC :                     
(1) 1020/FFFFFFFFFFFF22DC :                     ExtInt_Default:
(1) 1021/FFFFFFFFFFFF22DC : 4E73                		rte
(1) 1022/FFFFFFFFFFFF22DE :                     
(1) 1023/FFFFFFFFFFFF22DE :                     ; ====================================================================
(1) 1024/FFFFFFFFFFFF22DE :                     ; ------------------------------------------------------------
(1) 1025/FFFFFFFFFFFF22DE :                     ; Subroutines
(1) 1026/FFFFFFFFFFFF22DE :                     ; ------------------------------------------------------------
(1) 1027/FFFFFFFFFFFF22DE :                     
(1) 1028/FFFFFFFFFFFF22DE :                     ; --------------------------------------------------------
(1) 1029/FFFFFFFFFFFF22DE :                     ; System_Random, System_Random_Seed
(1) 1030/FFFFFFFFFFFF22DE :                     ;
(1) 1031/FFFFFFFFFFFF22DE :                     ; Generate random value
(1) 1032/FFFFFFFFFFFF22DE :                     ;
(1) 1033/FFFFFFFFFFFF22DE :                     ; Input:
(1) 1034/FFFFFFFFFFFF22DE :                     ; d0.l | Seed value (_Random_Seed ONLY)
(1) 1035/FFFFFFFFFFFF22DE :                     ;
(1) 1036/FFFFFFFFFFFF22DE :                     ; Returns:
(1) 1037/FFFFFFFFFFFF22DE :                     ; d0.l | Result value
(1) 1038/FFFFFFFFFFFF22DE :                     ; --------------------------------------------------------
(1) 1039/FFFFFFFFFFFF22DE :                     
(1) 1040/FFFFFFFFFFFF22DE :                     System_Random_Seed:
(1) 1041/FFFFFFFFFFFF22DE : 2F04                		move.l	d4,-(sp)
(1) 1042/FFFFFFFFFFFF22E0 : 2800                		move.l	d0,d4
(1) 1043/FFFFFFFFFFFF22E2 : 6114                		bsr	sysRnd_MkValue
(1) 1044/FFFFFFFFFFFF22E4 : 281F                		move.l	(sp)+,d4
(1) 1045/FFFFFFFFFFFF22E6 : 4E75                		rts
(1) 1046/FFFFFFFFFFFF22E8 :                     System_Random:
(1) 1047/FFFFFFFFFFFF22E8 : 2F04                		move.l	d4,-(sp)
(1) 1048/FFFFFFFFFFFF22EA : 2838 FAFC           		move.l	(RAM_SysRandom).w,d4
(1) 1049/FFFFFFFFFFFF22EE : 6108                		bsr	sysRnd_MkValue
(1) 1050/FFFFFFFFFFFF22F0 : 21C4 FAFC           		move.l	d4,(RAM_SysRandom).w
(1) 1051/FFFFFFFFFFFF22F4 : 281F                		move.l	(sp)+,d4
(1) 1052/FFFFFFFFFFFF22F6 : 4E75                		rts
(1) 1053/FFFFFFFFFFFF22F8 :                     sysRnd_MkValue:
(1) 1054/FFFFFFFFFFFF22F8 : 4A84                		tst.l	d4
(1) 1055/FFFFFFFFFFFF22FA : 660E                		bne.s	.has_seed
(1) 1056/FFFFFFFFFFFF22FC : 2838 E85C           		move.l	(RAM_FrameCount).w,d4
(1) 1057/FFFFFFFFFFFF2300 : E1BC                		rol.l	d0,d4
(1) 1058/FFFFFFFFFFFF2302 : E2BC                		ror.l	d1,d4
(1) 1059/FFFFFFFFFFFF2304 : D8BC 23B5 1947      		add.l	#$23B51947,d4		; Restart SEED if zero.
(1) 1060/FFFFFFFFFFFF230A :                     .has_seed:
(1) 1061/FFFFFFFFFFFF230A : 2004                		move.l	d4,d0
(1) 1062/FFFFFFFFFFFF230C : E484                		asr.l	#2,d4
(1) 1063/FFFFFFFFFFFF230E : D880                		add.l	d0,d4
(1) 1064/FFFFFFFFFFFF2310 : E79C                		rol.l	#3,d4
(1) 1065/FFFFFFFFFFFF2312 : D880                		add.l	d0,d4
(1) 1066/FFFFFFFFFFFF2314 : 3004                		move.w	d4,d0
(1) 1067/FFFFFFFFFFFF2316 : 4844                		swap	d4
(1) 1068/FFFFFFFFFFFF2318 : D044                		add.w	d4,d0
(1) 1069/FFFFFFFFFFFF231A : 3800                		move.w	d0,d4
(1) 1070/FFFFFFFFFFFF231C : E0BC                		ror.l	d0,d4
(1) 1071/FFFFFFFFFFFF231E : 4844                		swap	d4
(1) 1072/FFFFFFFFFFFF2320 : 4E75                		rts
(1) 1073/FFFFFFFFFFFF2322 :                     
(1) 1074/FFFFFFFFFFFF2322 :                     ; --------------------------------------------------------
(1) 1075/FFFFFFFFFFFF2322 :                     ; System_DiceRoll, System_DiceRoll_Seed
(1) 1076/FFFFFFFFFFFF2322 :                     ;
(1) 1077/FFFFFFFFFFFF2322 :                     ; Pick a random number using a maximum value,
(1) 1078/FFFFFFFFFFFF2322 :                     ; uses System_Random
(1) 1079/FFFFFFFFFFFF2322 :                     ;
(1) 1080/FFFFFFFFFFFF2322 :                     ; Input:
(1) 1081/FFFFFFFFFFFF2322 :                     ; d0.l | Maximum number to use + 1
(1) 1082/FFFFFFFFFFFF2322 :                     ; d1.l | Starting seed (_DiceRoll_Seed ONLY)
(1) 1083/FFFFFFFFFFFF2322 :                     ;
(1) 1084/FFFFFFFFFFFF2322 :                     ; Returns:
(1) 1085/FFFFFFFFFFFF2322 :                     ; d0.w | Output value
(1) 1086/FFFFFFFFFFFF2322 :                     ; --------------------------------------------------------
(1) 1087/FFFFFFFFFFFF2322 :                     
(1) 1088/FFFFFFFFFFFF2322 :                     System_DiceRoll_Seed:
(1) 1089/FFFFFFFFFFFF2322 : 48E7 0C00           		movem.l	d4-d5,-(sp)
(1) 1090/FFFFFFFFFFFF2326 : 2A00                		move.l	d0,d5
(1) 1091/FFFFFFFFFFFF2328 : 2801                		move.l	d1,d4
(1) 1092/FFFFFFFFFFFF232A : 61B2                		bsr	System_Random_Seed
(1) 1093/FFFFFFFFFFFF232C : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1094/FFFFFFFFFFFF2332 : C0C5                		mulu.w	d5,d0
(1) 1095/FFFFFFFFFFFF2334 : 4840                		swap	d0
(1) 1096/FFFFFFFFFFFF2336 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1097/FFFFFFFFFFFF233C : 4CDF 0030           		movem.l	(sp)+,d4-d5
(1) 1098/FFFFFFFFFFFF2340 : 4E75                		rts
(1) 1099/FFFFFFFFFFFF2342 :                     
(1) 1100/FFFFFFFFFFFF2342 :                     System_DiceRoll:
(1) 1101/FFFFFFFFFFFF2342 : 2F04                		move.l	d4,-(sp)
(1) 1102/FFFFFFFFFFFF2344 : 2800                		move.l	d0,d4
(1) 1103/FFFFFFFFFFFF2346 : 61A0                		bsr	System_Random
(1) 1104/FFFFFFFFFFFF2348 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1105/FFFFFFFFFFFF234E : C0C4                		mulu.w	d4,d0
(1) 1106/FFFFFFFFFFFF2350 : 4840                		swap	d0
(1) 1107/FFFFFFFFFFFF2352 : C0BC 0000 FFFF      		and.l	#$FFFF,d0
(1) 1108/FFFFFFFFFFFF2358 : 281F                		move.l	(sp)+,d4
(1) 1109/FFFFFFFFFFFF235A : 4E75                		rts
(1) 1110/FFFFFFFFFFFF235C :                     
(1) 1111/FFFFFFFFFFFF235C :                     ; --------------------------------------------------------
(1) 1112/FFFFFFFFFFFF235C :                     ; System_SineWave, System_SineWave_Cos
(1) 1113/FFFFFFFFFFFF235C :                     ;
(1) 1114/FFFFFFFFFFFF235C :                     ; Get Sine or Cosine value
(1) 1115/FFFFFFFFFFFF235C :                     ;
(1) 1116/FFFFFFFFFFFF235C :                     ; Input:
(1) 1117/FFFFFFFFFFFF235C :                     ; d0.w | Tan value: 0-511
(1) 1118/FFFFFFFFFFFF235C :                     ;
(1) 1119/FFFFFFFFFFFF235C :                     ; Returns:
(1) 1120/FFFFFFFFFFFF235C :                     ; d1.w | Result
(1) 1121/FFFFFFFFFFFF235C :                     ; --------------------------------------------------------
(1) 1122/FFFFFFFFFFFF235C :                     
(1) 1123/FFFFFFFFFFFF235C :                     System_SineWave_Cos:
(1) 1124/FFFFFFFFFFFF235C : 2F07                		move.l	d7,-(sp)
(1) 1125/FFFFFFFFFFFF235E : 3E00                		move.w	d0,d7
(1) 1126/FFFFFFFFFFFF2360 : 0647 0080           		addi.w  #$80,d7
(1) 1127/FFFFFFFFFFFF2364 : 6004                		bra	sys_SineWave
(1) 1128/FFFFFFFFFFFF2366 :                     System_SineWave:
(1) 1129/FFFFFFFFFFFF2366 : 2F07                		move.l	d7,-(sp)
(1) 1130/FFFFFFFFFFFF2368 : 3E00                		move.w	d0,d7
(1) 1131/FFFFFFFFFFFF236A :                     sys_SineWave:
(1) 1132/FFFFFFFFFFFF236A : 0247 01FF           		andi.w	#$1FF,d7
(1) 1133/FFFFFFFFFFFF236E : 3207                		move.w	d7,d1
(1) 1134/FFFFFFFFFFFF2370 : 0807 0007           		btst	#7,d7
(1) 1135/FFFFFFFFFFFF2374 : 6702                		beq.s	.loc_7EFA
(1) 1136/FFFFFFFFFFFF2376 : 4641                		not.w	d1
(1) 1137/FFFFFFFFFFFF2378 :                     .loc_7EFA:
(1) 1138/FFFFFFFFFFFF2378 : 0241 007F           		andi.w  #$7F,d1
(1) 1139/FFFFFFFFFFFF237C : D241                		add.w	d1,d1
(1) 1140/FFFFFFFFFFFF237E : 323B 1010           		move.w  .sine_data(pc,d1.w),d1
(1) 1141/FFFFFFFFFFFF2382 : 0807 0008           		btst    #8,d7
(1) 1142/FFFFFFFFFFFF2386 : 6702                		beq.s   .loc_7F0C
(1) 1143/FFFFFFFFFFFF2388 : 4441                		neg.w   d1
(1) 1144/FFFFFFFFFFFF238A :                     .loc_7F0C:
(1) 1145/FFFFFFFFFFFF238A : 48C1                		ext.l	d1
(1) 1146/FFFFFFFFFFFF238C : 2E1F                		move.l (sp)+,d7
(1) 1147/FFFFFFFFFFFF238E : 4E75                		rts
(1) 1148/FFFFFFFFFFFF2390 :                     
(1) 1149/FFFFFFFFFFFF2390 :                     .sine_data:
(1) 1150/FFFFFFFFFFFF2390 :                     		binclude "nikona/md/data/sine_data.bin"
(1) 1151/FFFFFFFFFFFF2490 :                     		align 2
(1) 1152/FFFFFFFFFFFF2492 :                     
(1) 1153/FFFFFFFFFFFF2492 :                     ; --------------------------------------------------------
(1) 1154/FFFFFFFFFFFF2492 :                     ; System_BCD_AddB, System_BCD_AddW, System_BCD_AddL
(1) 1155/FFFFFFFFFFFF2492 :                     ; System_BCD_SubB, System_BCD_SubW, System_BCD_SubL
(1) 1156/FFFFFFFFFFFF2492 :                     ;
(1) 1157/FFFFFFFFFFFF2492 :                     ; Increment/Decrement BCD value
(1) 1158/FFFFFFFFFFFF2492 :                     ; for Scores, Lives, and such.
(1) 1159/FFFFFFFFFFFF2492 :                     ;
(1) 1160/FFFFFFFFFFFF2492 :                     ; Input:
(1) 1161/FFFFFFFFFFFF2492 :                     ; d0.? | BCD value input
(1) 1162/FFFFFFFFFFFF2492 :                     ; d1.l | Increment/Decrement by
(1) 1163/FFFFFFFFFFFF2492 :                     ;
(1) 1164/FFFFFFFFFFFF2492 :                     ; Returns:
(1) 1165/FFFFFFFFFFFF2492 :                     ; d0.? | BCD value output
(1) 1166/FFFFFFFFFFFF2492 :                     ; --------------------------------------------------------
(1) 1167/FFFFFFFFFFFF2492 :                     
(1) 1168/FFFFFFFFFFFF2492 :                     ; TODO: An overflow check
(1) 1169/FFFFFFFFFFFF2492 :                     
(1) 1170/FFFFFFFFFFFF2492 :                     System_BCD_SubB:
(1) 1171/FFFFFFFFFFFF2492 : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1172/FFFFFFFFFFFF2498 : 6006                		bra.s	System_BCD_SubL
(1) 1173/FFFFFFFFFFFF249A :                     System_BCD_SubW:
(1) 1174/FFFFFFFFFFFF249A : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1175/FFFFFFFFFFFF24A0 :                     ; 		bra.s	System_BCD_SubL
(1) 1176/FFFFFFFFFFFF24A0 :                     System_BCD_SubL:
(1) 1177/FFFFFFFFFFFF24A0 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1178/FFFFFFFFFFFF24A4 : 613C                		bsr	sysBCD_SpOut
(1) 1179/FFFFFFFFFFFF24A6 : 023C 0000           		and	#0,ccr
(1) 1180/FFFFFFFFFFFF24AA : 8D0D                		sbcd	-(a5),-(a6)
(1) 1181/FFFFFFFFFFFF24AC : 8D0D                		sbcd	-(a5),-(a6)
(1) 1182/FFFFFFFFFFFF24AE : 8D0D                		sbcd	-(a5),-(a6)
(1) 1183/FFFFFFFFFFFF24B0 : 8D0D                		sbcd	-(a5),-(a6)
(1) 1184/FFFFFFFFFFFF24B2 : 2016                		move.l	(a6),d0
(1) 1185/FFFFFFFFFFFF24B4 : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1186/FFFFFFFFFFFF24B8 : 4E75                		rts
(1) 1187/FFFFFFFFFFFF24BA :                     System_BCD_AddB:
(1) 1188/FFFFFFFFFFFF24BA : 0280 0000 00FF      		andi.l	#$00FF,d0
(1) 1189/FFFFFFFFFFFF24C0 : 6006                		bra.s	System_BCD_AddL
(1) 1190/FFFFFFFFFFFF24C2 :                     System_BCD_AddW:
(1) 1191/FFFFFFFFFFFF24C2 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
(1) 1192/FFFFFFFFFFFF24C8 :                     ; 		bsr.s	System_BCD_AddL
(1) 1193/FFFFFFFFFFFF24C8 :                     System_BCD_AddL:
(1) 1194/FFFFFFFFFFFF24C8 : 48E7 0006           		movem.l	a5-a6,-(sp)
(1) 1195/FFFFFFFFFFFF24CC : 6114                		bsr	sysBCD_SpOut
(1) 1196/FFFFFFFFFFFF24CE : 023C 0000           		and	#0,ccr
(1) 1197/FFFFFFFFFFFF24D2 : CD0D                		abcd	-(a5),-(a6)
(1) 1198/FFFFFFFFFFFF24D4 : CD0D                		abcd	-(a5),-(a6)
(1) 1199/FFFFFFFFFFFF24D6 : CD0D                		abcd	-(a5),-(a6)
(1) 1200/FFFFFFFFFFFF24D8 : CD0D                		abcd	-(a5),-(a6)
(1) 1201/FFFFFFFFFFFF24DA : 2016                		move.l	(a6),d0
(1) 1202/FFFFFFFFFFFF24DC : 4CDF 6000           		movem.l	(sp)+,a5-a6
(1) 1203/FFFFFFFFFFFF24E0 : 4E75                		rts
(1) 1204/FFFFFFFFFFFF24E2 :                     sysBCD_SpOut:
(1) 1205/FFFFFFFFFFFF24E2 : 598F                		subq.l	#4,sp
(1) 1206/FFFFFFFFFFFF24E4 : 2C4F                		move.l	sp,a6
(1) 1207/FFFFFFFFFFFF24E6 : 598F                		subq.l	#4,sp
(1) 1208/FFFFFFFFFFFF24E8 : 2A4F                		move.l	sp,a5
(1) 1209/FFFFFFFFFFFF24EA : 2C80                		move.l	d0,(a6)
(1) 1210/FFFFFFFFFFFF24EC : 2A81                		move.l	d1,(a5)
(1) 1211/FFFFFFFFFFFF24EE : DCFC 0004           		adda	#4,a6
(1) 1212/FFFFFFFFFFFF24F2 : DAFC 0004           		adda	#4,a5
(1) 1213/FFFFFFFFFFFF24F6 : 508F                		addq.l	#8,sp
(1) 1214/FFFFFFFFFFFF24F8 : 4E75                		rts
(1) 1215/FFFFFFFFFFFF24FA :                     
(1) 1216/FFFFFFFFFFFF24FA :                     ; --------------------------------------------------------
(1) 1217/FFFFFFFFFFFF24FA :                     ; System_SetIntJumps
(1) 1218/FFFFFFFFFFFF24FA :                     ;
(1) 1219/FFFFFFFFFFFF24FA :                     ; Set new VBlank/HBlank/External Interrupt jumps
(1) 1220/FFFFFFFFFFFF24FA :                     ; generated by VDP
(1) 1221/FFFFFFFFFFFF24FA :                     ;
(1) 1222/FFFFFFFFFFFF24FA :                     ; Input:
(1) 1223/FFFFFFFFFFFF24FA :                     ; d0.l | New VBlank location
(1) 1224/FFFFFFFFFFFF24FA :                     ; d1.l | New HBlank location
(1) 1225/FFFFFFFFFFFF24FA :                     ; d2.l | New External location
(1) 1226/FFFFFFFFFFFF24FA :                     ;
(1) 1227/FFFFFFFFFFFF24FA :                     ; Notes:
(1) 1228/FFFFFFFFFFFF24FA :                     ; - Writing 0 to any of the INPUTs skips it
(1) 1229/FFFFFFFFFFFF24FA :                     ; - Use Video_IntEnable to enable/disable the interrupts
(1) 1230/FFFFFFFFFFFF24FA :                     ; --------------------------------------------------------
(1) 1231/FFFFFFFFFFFF24FA :                     
(1) 1232/FFFFFFFFFFFF24FA :                     System_SetIntJumps:
(1) 1233/FFFFFFFFFFFF24FA : 4A80                		tst.l	d0
(1) 1234/FFFFFFFFFFFF24FC : 6704                		beq.s	.no_vint
(1) 1236/FFFFFFFFFFFF24FE : 21C0 FD08           		move.l	d0,($FFFFFD06+2).w
(1) 1240/FFFFFFFFFFFF2502 :                     .no_vint:
(1) 1241/FFFFFFFFFFFF2502 : 4A81                		tst.l	d1
(1) 1242/FFFFFFFFFFFF2504 : 6704                		beq.s	.no_hint
(1) 1244/FFFFFFFFFFFF2506 : 21C1 FD0E           		move.l	d1,($FFFFFD0C+2).w
(1) 1248/FFFFFFFFFFFF250A :                     .no_hint:
(1) 1249/FFFFFFFFFFFF250A : 4A82                		tst.l	d2
(1) 1250/FFFFFFFFFFFF250C : 6704                		beq.s	.no_exint
(1) 1252/FFFFFFFFFFFF250E : 21C2 FD14           		move.l	d2,($FFFFFD12+2).w
(1) 1256/FFFFFFFFFFFF2512 :                     .no_exint:
(1) 1257/FFFFFFFFFFFF2512 : 4E75                		rts
(1) 1258/FFFFFFFFFFFF2514 :                     
(1) 1259/FFFFFFFFFFFF2514 :                     ; ====================================================================
(1) 1260/FFFFFFFFFFFF2514 :                     ; ----------------------------------------------------------------
(1) 1261/FFFFFFFFFFFF2514 :                     ; SCD / CD32X ONLY
(1) 1262/FFFFFFFFFFFF2514 :                     ; ----------------------------------------------------------------
(1) 1263/FFFFFFFFFFFF2514 :                     
(1) 1264/FFFFFFFFFFFF2514 :                     ; --------------------------------------------------------
(1) 1265/FFFFFFFFFFFF2514 :                     ; System_MdMcd_Interrupt
(1) 1266/FFFFFFFFFFFF2514 :                     ;
(1) 1267/FFFFFFFFFFFF2514 :                     ; Request an interrupt to Sub-CPU, call this during
(1) 1268/FFFFFFFFFFFF2514 :                     ; VBlank.
(1) 1269/FFFFFFFFFFFF2514 :                     ; --------------------------------------------------------
(1) 1270/FFFFFFFFFFFF2514 :                     
(1) 1271/FFFFFFFFFFFF2514 :                     System_MdMcd_Interrupt:
(1) 1272/FFFFFFFFFFFF2514 : 2F07                		move.l	d7,-(sp)
(1) 1273/FFFFFFFFFFFF2516 :                     ; .wait_first:
(1) 1274/FFFFFFFFFFFF2516 :                     ; 		bsr	System_MdMcd_SubWait
(1) 1275/FFFFFFFFFFFF2516 :                     ; 		move.b	(sysmcd_reg+mcd_comm_m).l,d7
(1) 1276/FFFFFFFFFFFF2516 :                     ; 		andi.w	#$C0,d7
(1) 1277/FFFFFFFFFFFF2516 :                     ; 		cmpi.w	#$C0,d7
(1) 1278/FFFFFFFFFFFF2516 :                     ; 		beq.s	.wait_first
(1) 1279/FFFFFFFFFFFF2516 :                     ; 		bset	#0,(sysmcd_reg).l
(1) 1280/FFFFFFFFFFFF2516 : 13FC 0081 00A1      		move.b	#%10000001,(sysmcd_reg).l		; Request Level 1
         FFFFFFFFFFFF251C : 2000             
(1) 1281/FFFFFFFFFFFF251E : 2E1F                		move.l	(sp)+,d7
(1) 1282/FFFFFFFFFFFF2520 : 4E75                		rts
(1) 1283/FFFFFFFFFFFF2522 :                     
(1) 1284/FFFFFFFFFFFF2522 :                     ; --------------------------------------------------------
(1) 1285/FFFFFFFFFFFF2522 :                     ; System_MdMcd_SubWait
(1) 1286/FFFFFFFFFFFF2522 :                     ;
(1) 1287/FFFFFFFFFFFF2522 :                     ; Waits until Sub-CPU finishes.
(1) 1288/FFFFFFFFFFFF2522 :                     ; --------------------------------------------------------
(1) 1289/FFFFFFFFFFFF2522 :                     
(1) 1290/FFFFFFFFFFFF2522 :                     System_MdMcd_SubWait:
(1) 1292/FFFFFFFFFFFF2522 : 3F07                		move.w	d7,-(sp)
(1) 1293/FFFFFFFFFFFF2524 : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1294/FFFFFFFFFFFF252A : 6BF8                		bmi.s	.wait_sub_o
(1) 1295/FFFFFFFFFFFF252C : 3E1F                		move.w	(sp)+,d7
(1) 1297/FFFFFFFFFFFF252E : 4E75                		rts
(1) 1298/FFFFFFFFFFFF2530 :                     
(1) 1299/FFFFFFFFFFFF2530 :                     ; --------------------------------------------------------
(1) 1300/FFFFFFFFFFFF2530 :                     ; System_MdMcd_SubEnter
(1) 1301/FFFFFFFFFFFF2530 :                     ;
(1) 1302/FFFFFFFFFFFF2530 :                     ; Waits until Sub-CPU starts.
(1) 1303/FFFFFFFFFFFF2530 :                     ; --------------------------------------------------------
(1) 1304/FFFFFFFFFFFF2530 :                     
(1) 1305/FFFFFFFFFFFF2530 :                     System_MdMcd_SubEnter:
(1) 1307/FFFFFFFFFFFF2530 : 3F07                		move.w	d7,-(sp)
(1) 1308/FFFFFFFFFFFF2532 : 1E39 00A1 200F      .wait_sub_o:	move.b	(sysmcd_reg+mcd_comm_s).l,d7
(1) 1309/FFFFFFFFFFFF2538 : 6AF8                		bpl.s	.wait_sub_o
(1) 1310/FFFFFFFFFFFF253A : 3E1F                		move.w	(sp)+,d7
(1) 1312/FFFFFFFFFFFF253C : 4E75                		rts
(1) 1313/FFFFFFFFFFFF253E :                     
(1) 1314/FFFFFFFFFFFF253E :                     ; --------------------------------------------------------
(1) 1315/FFFFFFFFFFFF253E :                     ; System_MdMcd_SubTask
(1) 1316/FFFFFFFFFFFF253E :                     ;
(1) 1317/FFFFFFFFFFFF253E :                     ; Request task to Sub-CPU
(1) 1318/FFFFFFFFFFFF253E :                     ;
(1) 1319/FFFFFFFFFFFF253E :                     ; Input:
(1) 1320/FFFFFFFFFFFF253E :                     ; d0.b | Task number
(1) 1321/FFFFFFFFFFFF253E :                     ;
(1) 1322/FFFFFFFFFFFF253E :                     ; Uses:
(1) 1323/FFFFFFFFFFFF253E :                     ; d7/a6
(1) 1324/FFFFFFFFFFFF253E :                     ;
(1) 1325/FFFFFFFFFFFF253E :                     ; Notes:
(1) 1326/FFFFFFFFFFFF253E :                     ; This exits without waiting SUB to finish,
(1) 1327/FFFFFFFFFFFF253E :                     ; call System_MdMcd_SubWait afterwards if required.
(1) 1328/FFFFFFFFFFFF253E :                     ; --------------------------------------------------------
(1) 1329/FFFFFFFFFFFF253E :                     
(1) 1330/FFFFFFFFFFFF253E :                     System_MdMcd_SubTask:
(1) 1332/FFFFFFFFFFFF253E : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1333/FFFFFFFFFFFF2542 : 4DF9 00A1 200E      		lea	(sysmcd_reg+mcd_comm_m).l,a6
(1) 1334/FFFFFFFFFFFF2548 :                     .wait_first:
(1) 1335/FFFFFFFFFFFF2548 : 61D8                		bsr	System_MdMcd_SubWait
(1) 1336/FFFFFFFFFFFF254A : 1E16                		move.b	(a6),d7
(1) 1337/FFFFFFFFFFFF254C : 0247 00C0           		andi.w	#%11000000,d7
(1) 1338/FFFFFFFFFFFF2550 : 0C47 00C0           		cmpi.w	#%11000000,d7
(1) 1339/FFFFFFFFFFFF2554 : 67F2                		beq.s	.wait_first
(1) 1340/FFFFFFFFFFFF2556 : 7C08                		moveq	#9-1,d6		; Retry times
(1) 1341/FFFFFFFFFFFF2558 : 1C80                		move.b	d0,(a6)		; Set this command
(1) 1342/FFFFFFFFFFFF255A :                     .make_sure:
(1) 1343/FFFFFFFFFFFF255A : 1E16                		move.b	(a6),d7
(1) 1344/FFFFFFFFFFFF255C : BE00                		cmp.b	d0,d7
(1) 1345/FFFFFFFFFFFF255E : 66E8                		bne.s	.wait_first
(1) 1346/FFFFFFFFFFFF2560 : 51CE FFF8           		dbf	d6,.make_sure
(1) 1347/FFFFFFFFFFFF2564 : 1E2E 0001           .wait_sub_i:	move.b	1(a6),d7	; Wait until SUB gets busy
(1) 1348/FFFFFFFFFFFF2568 : 6AFA                		bpl.s	.wait_sub_i
(1) 1349/FFFFFFFFFFFF256A : 0247 00C0           		andi.w	#%11000000,d7
(1) 1350/FFFFFFFFFFFF256E : BE7C 00C0           		cmp.w	#%11000000,d7
(1) 1351/FFFFFFFFFFFF2572 : 67D4                		beq.s	.wait_first
(1) 1352/FFFFFFFFFFFF2574 : 1CBC 0000           		move.b	#$00,(a6)
(1) 1353/FFFFFFFFFFFF2578 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1355/FFFFFFFFFFFF257C : 4E75                		rts
(1) 1356/FFFFFFFFFFFF257E :                     
(1) 1357/FFFFFFFFFFFF257E :                     ; --------------------------------------------------------
(1) 1358/FFFFFFFFFFFF257E :                     ; System_MdMcd_WaitWRAM
(1) 1359/FFFFFFFFFFFF257E :                     ;
(1) 1360/FFFFFFFFFFFF257E :                     ; Wait for Word-RAM permission.
(1) 1361/FFFFFFFFFFFF257E :                     ; --------------------------------------------------------
(1) 1362/FFFFFFFFFFFF257E :                     
(1) 1363/FFFFFFFFFFFF257E :                     System_MdMcd_WaitWRAM:
(1) 1364/FFFFFFFFFFFF257E : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF2584 : 2003             
(1) 1365/FFFFFFFFFFFF2586 : 67F6                		beq.s	System_MdMcd_WaitWRAM
(1) 1366/FFFFFFFFFFFF2588 : 4E75                		rts
(1) 1367/FFFFFFFFFFFF258A :                     
(1) 1368/FFFFFFFFFFFF258A :                     ; --------------------------------------------------------
(1) 1369/FFFFFFFFFFFF258A :                     ; System_MdMcd_CheckWRAM
(1) 1370/FFFFFFFFFFFF258A :                     ;
(1) 1371/FFFFFFFFFFFF258A :                     ; Checks if Word-RAM is set to MAIN in return, 2M
(1) 1372/FFFFFFFFFFFF258A :                     ;
(1) 1373/FFFFFFFFFFFF258A :                     ; Returns:
(1) 1374/FFFFFFFFFFFF258A :                     ; beq | Word-RAM is available
(1) 1375/FFFFFFFFFFFF258A :                     ; bne | Word-RAM is locked
(1) 1376/FFFFFFFFFFFF258A :                     ; --------------------------------------------------------
(1) 1377/FFFFFFFFFFFF258A :                     
(1) 1378/FFFFFFFFFFFF258A :                     System_MdMcd_CheckWRAM:
(1) 1379/FFFFFFFFFFFF258A : 0839 0000 00A1      		btst	#0,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF2590 : 2003             
(1) 1380/FFFFFFFFFFFF2592 : 6706                		beq.s	.no_ret
(1) 1381/FFFFFFFFFFFF2594 : 003C 0004           		or	#%00100,ccr	; beq
(1) 1382/FFFFFFFFFFFF2598 : 4E75                		rts
(1) 1383/FFFFFFFFFFFF259A :                     .no_ret:
(1) 1384/FFFFFFFFFFFF259A : 023C 001B           		and	#%11011,ccr	; bne
(1) 1385/FFFFFFFFFFFF259E : 4E75                		rts
(1) 1386/FFFFFFFFFFFF25A0 :                     
(1) 1387/FFFFFFFFFFFF25A0 :                     ; --------------------------------------------------------
(1) 1388/FFFFFFFFFFFF25A0 :                     ; System_MdMcd_GiveWRAM
(1) 1389/FFFFFFFFFFFF25A0 :                     ;
(1) 1390/FFFFFFFFFFFF25A0 :                     ; Give Word-RAM to SubCPU (DMNA), 2M
(1) 1391/FFFFFFFFFFFF25A0 :                     ; --------------------------------------------------------
(1) 1392/FFFFFFFFFFFF25A0 :                     
(1) 1393/FFFFFFFFFFFF25A0 :                     System_MdMcd_GiveWRAM:
(1) 1394/FFFFFFFFFFFF25A0 : 08F9 0001 00A1      		bset	#1,(sysmcd_reg+mcd_memory).l
         FFFFFFFFFFFF25A6 : 2003             
(1) 1395/FFFFFFFFFFFF25A8 : 67F6                		beq.s	System_MdMcd_GiveWRAM
(1) 1396/FFFFFFFFFFFF25AA : 4E75                		rts
(1) 1397/FFFFFFFFFFFF25AC :                     
(1) 1398/FFFFFFFFFFFF25AC :                     ; --------------------------------------------------------
(1) 1399/FFFFFFFFFFFF25AC :                     ; System_MdMcd_RdFile_RAM
(1) 1400/FFFFFFFFFFFF25AC :                     ;
(1) 1401/FFFFFFFFFFFF25AC :                     ; Read file from disc and transfers output the
(1) 1402/FFFFFFFFFFFF25AC :                     ; data to a1, uses communication ports.
(1) 1403/FFFFFFFFFFFF25AC :                     ;
(1) 1404/FFFFFFFFFFFF25AC :                     ; Input:
(1) 1405/FFFFFFFFFFFF25AC :                     ; a0   | Filename string: "FILENAME.BIN",0
(1) 1406/FFFFFFFFFFFF25AC :                     ; a1   | Output location in RAM
(1) 1407/FFFFFFFFFFFF25AC :                     ; d0.w | Size, $10-aligned sizes only
(1) 1408/FFFFFFFFFFFF25AC :                     ;
(1) 1409/FFFFFFFFFFFF25AC :                     ; Uses:
(1) 1410/FFFFFFFFFFFF25AC :                     ; d7,a0-a1,a5-a6
(1) 1411/FFFFFFFFFFFF25AC :                     ;
(1) 1412/FFFFFFFFFFFF25AC :                     ; Notes:
(1) 1413/FFFFFFFFFFFF25AC :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1414/FFFFFFFFFFFF25AC :                     ; --------------------------------------------------------
(1) 1415/FFFFFFFFFFFF25AC :                     
(1) 1416/FFFFFFFFFFFF25AC :                     System_MdMcd_RdFile_RAM:
(1) 1418/FFFFFFFFFFFF25AC : 48E7 C1C6           		movem.l	d0-d1/d7/a0-a1/a5-a6,-(sp)
(1) 1419/FFFFFFFFFFFF25B0 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m),a5
(1) 1420/FFFFFFFFFFFF25B6 : 3AD8                		move.w	(a0)+,(a5)+			; 0 copy filename
(1) 1421/FFFFFFFFFFFF25B8 : 3AD8                		move.w	(a0)+,(a5)+			; 2
(1) 1422/FFFFFFFFFFFF25BA : 3AD8                		move.w	(a0)+,(a5)+			; 4
(1) 1423/FFFFFFFFFFFF25BC : 3AD8                		move.w	(a0)+,(a5)+			; 6
(1) 1424/FFFFFFFFFFFF25BE : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1425/FFFFFFFFFFFF25C0 : 3AD8                		move.w	(a0)+,(a5)+			; 8
(1) 1426/FFFFFFFFFFFF25C2 : 3AFC 0000           		move.w	#0,(a5)+			; A <-- zero end
(1) 1427/FFFFFFFFFFFF25C6 : 3200                		move.w	d0,d1
(1) 1428/FFFFFFFFFFFF25C8 : 7001                		moveq	#$01,d0				; COMMAND: READ CD AND PASS DATA
(1) 1429/FFFFFFFFFFFF25CA : 6100 FF72           		bsr	System_MdMcd_SubTask
(1) 1430/FFFFFFFFFFFF25CE : 3001                		move.w	d1,d0
(1) 1431/FFFFFFFFFFFF25D0 :                     	; a0 - Output location
(1) 1432/FFFFFFFFFFFF25D0 :                     	; d0 - Number of $10-byte packets
(1) 1433/FFFFFFFFFFFF25D0 : E848                		lsr.w	#4,d0				; size >> 4
(1) 1434/FFFFFFFFFFFF25D2 : 5340                		subq.w	#1,d0				; -1
(1) 1435/FFFFFFFFFFFF25D4 : 4DF9 00A1 2020      		lea	(sysmcd_reg+mcd_dcomm_s),a6
(1) 1436/FFFFFFFFFFFF25DA : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; LOCK HERE
(1) 1437/FFFFFFFFFFFF25E0 : 08C7 0007           		bset	#7,d7
(1) 1438/FFFFFFFFFFFF25E4 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1439/FFFFFFFFFFFF25EA : 1E39 00A1 200F      .copy_ram:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait if sub PASSed the packet
(1) 1440/FFFFFFFFFFFF25F0 : 0807 0004           		btst	#4,d7
(1) 1441/FFFFFFFFFFFF25F4 : 67F4                		beq.s	.copy_ram
(1) 1442/FFFFFFFFFFFF25F6 : 2A4E                		move.l	a6,a5
(1) 1443/FFFFFFFFFFFF25F8 : 32DD                		move.w	(a5)+,(a1)+
(1) 1444/FFFFFFFFFFFF25FA : 32DD                		move.w	(a5)+,(a1)+
(1) 1445/FFFFFFFFFFFF25FC : 32DD                		move.w	(a5)+,(a1)+
(1) 1446/FFFFFFFFFFFF25FE : 32DD                		move.w	(a5)+,(a1)+
(1) 1447/FFFFFFFFFFFF2600 : 32DD                		move.w	(a5)+,(a1)+
(1) 1448/FFFFFFFFFFFF2602 : 32DD                		move.w	(a5)+,(a1)+
(1) 1449/FFFFFFFFFFFF2604 : 32DD                		move.w	(a5)+,(a1)+
(1) 1450/FFFFFFFFFFFF2606 : 32DD                		move.w	(a5)+,(a1)+
(1) 1451/FFFFFFFFFFFF2608 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; Tell SUB we got the pack
(1) 1452/FFFFFFFFFFFF260E : 08C7 0006           		bset	#6,d7
(1) 1453/FFFFFFFFFFFF2612 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1454/FFFFFFFFFFFF2618 : 1E39 00A1 200F      .wait_sub:	move.b	(sysmcd_reg+mcd_comm_s).l,d7	; Wait clear
(1) 1455/FFFFFFFFFFFF261E : 0807 0004           		btst	#4,d7
(1) 1456/FFFFFFFFFFFF2622 : 66F4                		bne.s	.wait_sub
(1) 1457/FFFFFFFFFFFF2624 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; and clear our bit too.
(1) 1458/FFFFFFFFFFFF262A : 0887 0006           		bclr	#6,d7
(1) 1459/FFFFFFFFFFFF262E : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1460/FFFFFFFFFFFF2634 : 51C8 FFB4           		dbf	d0,.copy_ram
(1) 1461/FFFFFFFFFFFF2638 : 1E39 00A1 200E      		move.b	(sysmcd_reg+mcd_comm_m).l,d7	; UNLOCK
(1) 1462/FFFFFFFFFFFF263E : 0887 0007           		bclr	#7,d7
(1) 1463/FFFFFFFFFFFF2642 : 13C7 00A1 200E      		move.b	d7,(sysmcd_reg+mcd_comm_m).l
(1) 1464/FFFFFFFFFFFF2648 : 4CDF 6383           		movem.l	(sp)+,d0-d1/d7/a0-a1/a5-a6
(1) 1466/FFFFFFFFFFFF264C : 4E75                		rts
(1) 1467/FFFFFFFFFFFF264E :                     
(1) 1468/FFFFFFFFFFFF264E :                     ; --------------------------------------------------------
(1) 1469/FFFFFFFFFFFF264E :                     ; System_MdMcd_Trnsfr_WRAM
(1) 1470/FFFFFFFFFFFF264E :                     ;
(1) 1471/FFFFFFFFFFFF264E :                     ; Read file from disc and sends it to WORD-RAM,
(1) 1472/FFFFFFFFFFFF264E :                     ; waits on finish.
(1) 1473/FFFFFFFFFFFF264E :                     ;
(1) 1474/FFFFFFFFFFFF264E :                     ; Input:
(1) 1475/FFFFFFFFFFFF264E :                     ; a0   | Filename string "FILENAME.BIN"
(1) 1476/FFFFFFFFFFFF264E :                     ; a1   | Output location
(1) 1477/FFFFFFFFFFFF264E :                     ;
(1) 1478/FFFFFFFFFFFF264E :                     ; Notes:
(1) 1479/FFFFFFFFFFFF264E :                     ; - STOP ALL tracks that use PCM samples (gemaStopAll)
(1) 1480/FFFFFFFFFFFF264E :                     ; --------------------------------------------------------
(1) 1481/FFFFFFFFFFFF264E :                     
(1) 1482/FFFFFFFFFFFF264E :                     System_MdMcd_RdFile_WRAM:
(1) 1484/FFFFFFFFFFFF264E : 48E7 0106           		movem.l	d7/a5-a6,-(sp)
(1) 1485/FFFFFFFFFFFF2652 : 6100 FECE           		bsr	System_MdMcd_SubWait
(1) 1486/FFFFFFFFFFFF2656 : 4BF9 00A1 2010      		lea	(sysmcd_reg+mcd_dcomm_m).l,a5
(1) 1487/FFFFFFFFFFFF265C : 3AD8                		move.w	(a0)+,(a5)+				; $00 copy filename
(1) 1488/FFFFFFFFFFFF265E : 3AD8                		move.w	(a0)+,(a5)+				; $02
(1) 1489/FFFFFFFFFFFF2660 : 3AD8                		move.w	(a0)+,(a5)+				; $04
(1) 1490/FFFFFFFFFFFF2662 : 3AD8                		move.w	(a0)+,(a5)+				; $06
(1) 1491/FFFFFFFFFFFF2664 : 3AD8                		move.w	(a0)+,(a5)+				; $08
(1) 1492/FFFFFFFFFFFF2666 : 3AD8                		move.w	(a0)+,(a5)+				; $0A
(1) 1493/FFFFFFFFFFFF2668 : 1AFC 0000           		move.b	#0,(a5)+				; $0C: always 0
(1) 1494/FFFFFFFFFFFF266C : 1AFC 0000           		move.b	#0,(a5)+				; $0D
(1) 1495/FFFFFFFFFFFF2670 : 1AFC 0000           		move.b	#0,(a5)+				; $0E
(1) 1496/FFFFFFFFFFFF2674 : 1AFC 0000           		move.b	#0,(a5)+				; $0F
(1) 1497/FFFFFFFFFFFF2678 : 6100 FF26           		bsr	System_MdMcd_GiveWRAM
(1) 1498/FFFFFFFFFFFF267C : 3F00                		move.w	d0,-(sp)
(1) 1499/FFFFFFFFFFFF267E : 303C 0002           		move.w	#$02,d0					; COMMAND $02
(1) 1500/FFFFFFFFFFFF2682 : 6100 FEBA           		bsr	System_MdMcd_SubTask
(1) 1501/FFFFFFFFFFFF2686 : 301F                		move.w	(sp)+,d0
(1) 1502/FFFFFFFFFFFF2688 : 6100 FE98           		bsr	System_MdMcd_SubWait
(1) 1503/FFFFFFFFFFFF268C : 6100 FEF0           		bsr	System_MdMcd_WaitWRAM
(1) 1504/FFFFFFFFFFFF2690 : 4CDF 6080           		movem.l	(sp)+,d7/a5-a6
(1) 1506/FFFFFFFFFFFF2694 : 4E75                		rts
(1) 1507/FFFFFFFFFFFF2696 :                     
(1) 1508/FFFFFFFFFFFF2696 :                     ; --------------------------------------------------------
(1) 1509/FFFFFFFFFFFF2696 :                     ; System_MdMcd_CheckHome
(1) 1510/FFFFFFFFFFFF2696 :                     ;
(1) 1511/FFFFFFFFFFFF2696 :                     ; Checks if the player is holding A, B, C and
(1) 1512/FFFFFFFFFFFF2696 :                     ; then presses the START button.
(1) 1513/FFFFFFFFFFFF2696 :                     ;
(1) 1514/FFFFFFFFFFFF2696 :                     ; Returns:
(1) 1515/FFFFFFFFFFFF2696 :                     ; bcc | Combo input not pressed
(1) 1516/FFFFFFFFFFFF2696 :                     ; bcs | User did the combo presses
(1) 1517/FFFFFFFFFFFF2696 :                     ;
(1) 1518/FFFFFFFFFFFF2696 :                     ; Notes:
(1) 1519/FFFFFFFFFFFF2696 :                     ; If you call this from your Title Screen:
(1) 1520/FFFFFFFFFFFF2696 :                     ; carry MUST JUMP to System_MdMcd_ExitShell,
(1) 1521/FFFFFFFFFFFF2696 :                     ; for other screen modes carry jumps to your
(1) 1522/FFFFFFFFFFFF2696 :                     ; Title Screen.
(1) 1523/FFFFFFFFFFFF2696 :                     ; --------------------------------------------------------
(1) 1524/FFFFFFFFFFFF2696 :                     
(1) 1525/FFFFFFFFFFFF2696 :                     System_MdMcd_CheckHome:
(1) 1526/FFFFFFFFFFFF2696 : 48A7 0300           		movem.w	d6-d7,-(sp)
(1) 1527/FFFFFFFFFFFF269A : 3E38 EA7C           		move.w	(Controller_1+on_press).w,d7
(1) 1528/FFFFFFFFFFFF269E : 3C38 EA7A           		move.w	(Controller_1+on_hold).w,d6
(1) 1529/FFFFFFFFFFFF26A2 : 0246 0070           		andi.w	#JoyA+JoyB+JoyC,d6
(1) 1530/FFFFFFFFFFFF26A6 : 0C46 0070           		cmpi.w	#JoyA+JoyB+JoyC,d6
(1) 1531/FFFFFFFFFFFF26AA : 6610                		bne.s	.not_press
(1) 1532/FFFFFFFFFFFF26AC : 0247 0080           		andi.w	#JoyStart,d7
(1) 1533/FFFFFFFFFFFF26B0 : 670A                		beq.s	.not_press
(1) 1534/FFFFFFFFFFFF26B2 : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1535/FFFFFFFFFFFF26B6 : 003C 0001           		or	#1,ccr
(1) 1536/FFFFFFFFFFFF26BA : 4E75                		rts
(1) 1537/FFFFFFFFFFFF26BC :                     .not_press:
(1) 1538/FFFFFFFFFFFF26BC : 4C9F 00C0           		movem.w	(sp)+,d6-d7
(1) 1539/FFFFFFFFFFFF26C0 : 023C 001E           		and	#%11110,ccr
(1) 1540/FFFFFFFFFFFF26C4 : 4E75                		rts
(1) 1541/FFFFFFFFFFFF26C6 :                     
(1) 1542/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1543/FFFFFFFFFFFF26C6 :                     ; System_MdMcd_ExitShell
(1) 1544/FFFFFFFFFFFF26C6 :                     ;
(1) 1545/FFFFFFFFFFFF26C6 :                     ; Exits the entire program and goes to
(1) 1546/FFFFFFFFFFFF26C6 :                     ; the BIOS/Shell.
(1) 1547/FFFFFFFFFFFF26C6 :                     ;
(1) 1548/FFFFFFFFFFFF26C6 :                     ; *** JUMP ONLY
(1) 1549/FFFFFFFFFFFF26C6 :                     ; --------------------------------------------------------
(1) 1550/FFFFFFFFFFFF26C6 :                     
(1) 1551/FFFFFFFFFFFF26C6 :                     ; jmp $0280: Hot restart, stops PSG and clears VDP
(1) 1552/FFFFFFFFFFFF26C6 :                     ; jmp $0284: Entry point
(1) 1553/FFFFFFFFFFFF26C6 :                     ; jmp $0288: CD player, keeps SP (unsafe)
(1) 1554/FFFFFFFFFFFF26C6 :                     ; jmp $028C: CD player, resets SP (official method)
(1) 1555/FFFFFFFFFFFF26C6 :                     
(1) 1556/FFFFFFFFFFFF26C6 :                     System_MdMcd_ExitShell:
(1) 1558/FFFFFFFFFFFF26C6 : 6100 F108           		bsr	Video_MdMcd_StampDisable
(1) 1559/FFFFFFFFFFFF26CA : 613C                		bsr	System_MdMcd_CddaStop
(1) 1561/FFFFFFFFFFFF26CC : 6100 F31A           		bsr	Video_MdMars_VideoOff
(1) 1563/FFFFFFFFFFFF26D0 : 6100 E022           		bsr	Video_DisplayOff
(1) 1564/FFFFFFFFFFFF26D4 : 4EF8 028C           		jmp	$028C		; Exit jump
(1) 1568/FFFFFFFFFFFF26D8 :                     
(1) 1569/FFFFFFFFFFFF26D8 :                     ; ------------------------------------------------------------
(1) 1570/FFFFFFFFFFFF26D8 :                     ; CDDA PLAYBACK
(1) 1571/FFFFFFFFFFFF26D8 :                     ; ------------------------------------------------------------
(1) 1572/FFFFFFFFFFFF26D8 :                     
(1) 1573/FFFFFFFFFFFF26D8 :                     ; --------------------------------------------------------
(1) 1574/FFFFFFFFFFFF26D8 :                     ; System_MdMcd_CddaPlay, System_MdMcd_CddaPlayL
(1) 1575/FFFFFFFFFFFF26D8 :                     ;
(1) 1576/FFFFFFFFFFFF26D8 :                     ; Play CDDA track, normal or looped.
(1) 1577/FFFFFFFFFFFF26D8 :                     ;
(1) 1578/FFFFFFFFFFFF26D8 :                     ; Input:
(1) 1579/FFFFFFFFFFFF26D8 :                     ; d0.w | CD track number
(1) 1580/FFFFFFFFFFFF26D8 :                     ;
(1) 1581/FFFFFFFFFFFF26D8 :                     ; This calls Sub-Task $10 for normal playback
(1) 1582/FFFFFFFFFFFF26D8 :                     ; and $11 for looped
(1) 1583/FFFFFFFFFFFF26D8 :                     ;
(1) 1584/FFFFFFFFFFFF26D8 :                     ; Notes:
(1) 1585/FFFFFFFFFFFF26D8 :                     ; Tracks $00, $01 and any negative values are ignored.
(1) 1586/FFFFFFFFFFFF26D8 :                     ; --------------------------------------------------------
(1) 1587/FFFFFFFFFFFF26D8 :                     
(1) 1588/FFFFFFFFFFFF26D8 :                     System_MdMcd_CddaPlay:
(1) 1589/FFFFFFFFFFFF26D8 : 48E7 8902           		movem.l	d0/d4/d7/a6,-(sp)
(1) 1590/FFFFFFFFFFFF26DC : 383C 0010           		move.w	#$0010,d4
(1) 1591/FFFFFFFFFFFF26E0 : 6008                		bra	sysMdMcd_SetCdda
(1) 1592/FFFFFFFFFFFF26E2 :                     System_MdMcd_CddaPlayL:
(1) 1593/FFFFFFFFFFFF26E2 : 48E7 8902           		movem.l	d0/d4/d7/a6,-(sp)
(1) 1594/FFFFFFFFFFFF26E6 : 383C 0011           		move.w	#$0011,d4
(1) 1595/FFFFFFFFFFFF26EA :                     sysMdMcd_SetCdda:
(1) 1597/FFFFFFFFFFFF26EA : 4A40                		tst.w	d0
(1) 1598/FFFFFFFFFFFF26EC : 6714                		beq.s	.fail_safe
(1) 1599/FFFFFFFFFFFF26EE : 6B12                		bmi.s	.fail_safe
(1) 1600/FFFFFFFFFFFF26F0 : B07C 0001           		cmp.w	#$0001,d0
(1) 1601/FFFFFFFFFFFF26F4 : 670C                		beq.s	.fail_safe
(1) 1602/FFFFFFFFFFFF26F6 : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1603/FFFFFFFFFFFF26FC : 3004                		move.w	d4,d0
(1) 1604/FFFFFFFFFFFF26FE : 6100 FE3E           		bsr	System_MdMcd_SubTask
(1) 1605/FFFFFFFFFFFF2702 :                     .fail_safe:
(1) 1607/FFFFFFFFFFFF2702 : 4CDF 4091           		movem.l	(sp)+,d0/d4/d7/a6
(1) 1608/FFFFFFFFFFFF2706 : 4E75                		rts
(1) 1609/FFFFFFFFFFFF2708 :                     
(1) 1610/FFFFFFFFFFFF2708 :                     ; --------------------------------------------------------
(1) 1611/FFFFFFFFFFFF2708 :                     ; System_MdMcd_CdStop
(1) 1612/FFFFFFFFFFFF2708 :                     ;
(1) 1613/FFFFFFFFFFFF2708 :                     ; Stop CDDA track
(1) 1614/FFFFFFFFFFFF2708 :                     ; --------------------------------------------------------
(1) 1615/FFFFFFFFFFFF2708 :                     
(1) 1616/FFFFFFFFFFFF2708 :                     System_MdMcd_CddaStop:
(1) 1618/FFFFFFFFFFFF2708 : 2F00                		move.l	d0,-(sp)
(1) 1619/FFFFFFFFFFFF270A : 303C 0014           		move.w	#$0014,d0
(1) 1620/FFFFFFFFFFFF270E : 6100 FE2E           		bsr	System_MdMcd_SubTask
(1) 1621/FFFFFFFFFFFF2712 : 201F                		move.l	(sp)+,d0
(1) 1623/FFFFFFFFFFFF2714 : 4E75                		rts
(1) 1624/FFFFFFFFFFFF2716 :                     
(1) 1625/FFFFFFFFFFFF2716 :                     ; --------------------------------------------------------
(1) 1626/FFFFFFFFFFFF2716 :                     ; System_MdMcd_CdFade
(1) 1627/FFFFFFFFFFFF2716 :                     ;
(1) 1628/FFFFFFFFFFFF2716 :                     ; Fade the CDDA Volume
(1) 1629/FFFFFFFFFFFF2716 :                     ;
(1) 1630/FFFFFFFFFFFF2716 :                     ; Input:
(1) 1631/FFFFFFFFFFFF2716 :                     ; d0.w | Target volume:
(1) 1632/FFFFFFFFFFFF2716 :                     ;        $000-$400 - Min to Max
(1) 1633/FFFFFFFFFFFF2716 :                     ; d1.w | Fading speed:
(1) 1634/FFFFFFFFFFFF2716 :                     ;        $001-$200 - Slow to Fast
(1) 1635/FFFFFFFFFFFF2716 :                     ;             $400 - Set quick
(1) 1636/FFFFFFFFFFFF2716 :                     ;
(1) 1637/FFFFFFFFFFFF2716 :                     ; This calls Sub-Task $16
(1) 1638/FFFFFFFFFFFF2716 :                     ; --------------------------------------------------------
(1) 1639/FFFFFFFFFFFF2716 :                     
(1) 1640/FFFFFFFFFFFF2716 :                     System_MdMcd_CddaFade:
(1) 1642/FFFFFFFFFFFF2716 : 48E7 C102           		movem.l	d0-d1/d7/a6,-(sp)
(1) 1643/FFFFFFFFFFFF271A : 33C0 00A1 2010      		move.w	d0,(sysmcd_reg+mcd_dcomm_m).l
(1) 1644/FFFFFFFFFFFF2720 : 33C1 00A1 2012      		move.w	d1,(sysmcd_reg+mcd_dcomm_m+2).l
(1) 1645/FFFFFFFFFFFF2726 : 303C 0016           		move.w	#$0016,d0
(1) 1646/FFFFFFFFFFFF272A : 6100 FE12           		bsr	System_MdMcd_SubTask
(1) 1647/FFFFFFFFFFFF272E : 4CDF 4083           		movem.l	(sp)+,d0-d1/d7/a6
(1) 1649/FFFFFFFFFFFF2732 : 4E75                		rts
(1) 1650/FFFFFFFFFFFF2734 :                     
(1) 1651/FFFFFFFFFFFF2734 :                     ; --------------------------------------------------------
(1) 1652/FFFFFFFFFFFF2734 :                     ; DEFAULT Save filename for SEGA CD / CD32X
(1) 1653/FFFFFFFFFFFF2734 :                     ; --------------------------------------------------------
(1) 1654/FFFFFFFFFFFF2734 :                     
(1) 1655/FFFFFFFFFFFF2734 :                     def_SaveInfo:
(1) 1657/FFFFFFFFFFFF2734 : 4E49 4B4F 4E41      		dc.b HTAG_MARSCDSAV,0
         FFFFFFFFFFFF273A : 4344 3332 5800    
(1) 1661/FFFFFFFFFFFF2740 : 0008                		dc.w (SET_SRAMSIZE/$40)
(1) 1662/FFFFFFFFFFFF2742 : 0000                		dc.w 0
(1) 1663/FFFFFFFFFFFF2744 :                     		align 2
(1) 1664/FFFFFFFFFFFF2746 :                     
(1) 1665/FFFFFFFFFFFF2746 :                     ; ====================================================================
(1) 1666/FFFFFFFFFFFF2746 :                     ; ----------------------------------------------------------------
(1) 1667/FFFFFFFFFFFF2746 :                     ; 32X and CD32X ONLY
(1) 1668/FFFFFFFFFFFF2746 :                     ; ----------------------------------------------------------------
(1) 1669/FFFFFFFFFFFF2746 :                     
(1) 1670/FFFFFFFFFFFF2746 :                     ; --------------------------------------------------------
(1) 1671/FFFFFFFFFFFF2746 :                     ; System_MdMars_SendData
(1) 1672/FFFFFFFFFFFF2746 :                     ;
(1) 1673/FFFFFFFFFFFF2746 :                     ; Transfers Genesis data to the 32X's SDRAM
(1) 1674/FFFFFFFFFFFF2746 :                     ; using DREQ
(1) 1675/FFFFFFFFFFFF2746 :                     ;
(1) 1676/FFFFFFFFFFFF2746 :                     ; Input:
(1) 1677/FFFFFFFFFFFF2746 :                     ; a0   | Source data
(1) 1678/FFFFFFFFFFFF2746 :                     ; a1.l | Destination in SH2's SDRAM area ($00xxxxxx)
(1) 1679/FFFFFFFFFFFF2746 :                     ; d0.l | Size, only 8-byte-aligned sizes allowed.
(1) 1680/FFFFFFFFFFFF2746 :                     ;
(1) 1681/FFFFFFFFFFFF2746 :                     ; Returns:
(1) 1682/FFFFFFFFFFFF2746 :                     ; a1   | New output SDRAM location
(1) 1683/FFFFFFFFFFFF2746 :                     ;
(1) 1684/FFFFFFFFFFFF2746 :                     ; Uses:
(1) 1685/FFFFFFFFFFFF2746 :                     ; d0/a4-a5,d5-d7
(1) 1686/FFFFFFFFFFFF2746 :                     ;
(1) 1687/FFFFFFFFFFFF2746 :                     ; Notes:
(1) 1688/FFFFFFFFFFFF2746 :                     ; - Call this during DISPLAY ONLY, NOT during VBlank.
(1) 1689/FFFFFFFFFFFF2746 :                     ; - MOST 32X EMULATORS WILL GET STUCK HERE
(1) 1690/FFFFFFFFFFFF2746 :                     ; --------------------------------------------------------
(1) 1691/FFFFFFFFFFFF2746 :                     
(1) 1692/FFFFFFFFFFFF2746 :                     System_MdMars_SendData:
(1) 1694/FFFFFFFFFFFF2746 : 48E7 1800           		movem.l	d3-d4,-(sp)
(1) 1695/FFFFFFFFFFFF274A : 263C 0000 FFF8      		move.l	#$00FFF8,d3	; Maximum packet sizes
(1) 1696/FFFFFFFFFFFF2750 : 78F8                		moveq	#-8,d4
(1) 1697/FFFFFFFFFFFF2752 : C084                		and.l	d4,d0
(1) 1698/FFFFFFFFFFFF2754 : 2800                		move.l	d0,d4
(1) 1699/FFFFFFFFFFFF2756 : B883                		cmp.l	d3,d4
(1) 1700/FFFFFFFFFFFF2758 : 6E04                		bgt.s	.large_pack
(1) 1701/FFFFFFFFFFFF275A : 611C                		bsr	sys_MSendData_0	; Small packet
(1) 1702/FFFFFFFFFFFF275C : 6014                		bra.s	.exit_now
(1) 1703/FFFFFFFFFFFF275E :                     .large_pack:
(1) 1704/FFFFFFFFFFFF275E : 3003                		move.w	d3,d0
(1) 1705/FFFFFFFFFFFF2760 : 6116                		bsr	sys_MSendData_0
(1) 1706/FFFFFFFFFFFF2762 : 9883                		sub.l	d3,d4
(1) 1707/FFFFFFFFFFFF2764 : B883                		cmp.l	d3,d4
(1) 1708/FFFFFFFFFFFF2766 : 6CF6                		bge.s	.large_pack
(1) 1709/FFFFFFFFFFFF2768 : 4A84                		tst.l	d4
(1) 1710/FFFFFFFFFFFF276A : 6706                		beq.s	.exit_now
(1) 1711/FFFFFFFFFFFF276C : 6B04                		bmi.s	.exit_now
(1) 1712/FFFFFFFFFFFF276E : 3004                		move.w	d4,d0
(1) 1713/FFFFFFFFFFFF2770 : 6106                		bsr	sys_MSendData_0
(1) 1714/FFFFFFFFFFFF2772 :                     .exit_now:
(1) 1715/FFFFFFFFFFFF2772 : 4CDF 0018           		movem.l	(sp)+,d3-d4
(1) 1716/FFFFFFFFFFFF2776 : 4E75                		rts
(1) 1717/FFFFFFFFFFFF2778 :                     
(1) 1718/FFFFFFFFFFFF2778 :                     ; ------------------------------------------------------------
(1) 1719/FFFFFFFFFFFF2778 :                     ; DREQ Genesis-to-32X code
(1) 1720/FFFFFFFFFFFF2778 :                     ; ------------------------------------------------------------
(1) 1721/FFFFFFFFFFFF2778 :                     
(1) 1722/FFFFFFFFFFFF2778 :                     sys_MSendData_0:
(1) 1723/FFFFFFFFFFFF2778 : 48E7 0706           		movem.l	a5-a6/d5-d7,-(sp)
(1) 1724/FFFFFFFFFFFF277C : 7C00                		moveq	#0,d6				; Mode 0: Normal data transfer
(1) 1725/FFFFFFFFFFFF277E : 6128                		bsr.s	sys_MSendData
(1) 1726/FFFFFFFFFFFF2780 : 4CDF 60E0           		movem.l	(sp)+,a5-a6/d5-d7
(1) 1727/FFFFFFFFFFFF2784 : 4E75                		rts
(1) 1729/FFFFFFFFFFFF2786 :                     
(1) 1730/FFFFFFFFFFFF2786 :                     ; --------------------------------------------------------
(1) 1731/FFFFFFFFFFFF2786 :                     ; System_MdMars_Update
(1) 1732/FFFFFFFFFFFF2786 :                     ;
(1) 1733/FFFFFFFFFFFF2786 :                     ; Send a section of MD RAM to 32X's SDRAM
(1) 1734/FFFFFFFFFFFF2786 :                     ;
(1) 1735/FFFFFFFFFFFF2786 :                     ; Notes:
(1) 1736/FFFFFFFFFFFF2786 :                     ; Call this during DISPLAY ONLY
(1) 1737/FFFFFFFFFFFF2786 :                     ; --------------------------------------------------------
(1) 1738/FFFFFFFFFFFF2786 :                     
(1) 1739/FFFFFFFFFFFF2786 :                     System_MdMars_Update:
(1) 1741/FFFFFFFFFFFF2786 : 48E7 0786           		movem.l	d5-d7/a0/a5-a6,-(sp)
(1) 1742/FFFFFFFFFFFF278A : 3F00                		move.w	d0,-(sp)
(1) 1743/FFFFFFFFFFFF278C : 41F8 CE60           		lea	(RAM_MdMars_CommBuff).w,a0
(1) 1744/FFFFFFFFFFFF2790 : 303C 0A20           		move.w	#Dreq_len,d0
(1) 1745/FFFFFFFFFFFF2794 : 7C01                		moveq	#1,d6				; Mode 1: Per-frame RAM send
(1) 1746/FFFFFFFFFFFF2796 : 6110                		bsr.s	sys_MSendData
(1) 1747/FFFFFFFFFFFF2798 : 301F                		move.w	(sp)+,d0
(1) 1748/FFFFFFFFFFFF279A : 4CDF 61E0           		movem.l	(sp)+,d5-d7/a0/a5-a6
(1) 1749/FFFFFFFFFFFF279E : 08F9 0005 00A1      		bset	#5,(sysmars_reg+comm12+1).l	; Swap DREQ-RAM buffer on SH2
         FFFFFFFFFFFF27A4 : 512D             
(1) 1750/FFFFFFFFFFFF27A6 : 4E75                		rts
(1) 1751/FFFFFFFFFFFF27A8 :                     ; --------------------------------------------------------
(1) 1752/FFFFFFFFFFFF27A8 :                     
(1) 1753/FFFFFFFFFFFF27A8 :                     ; updates a1
(1) 1754/FFFFFFFFFFFF27A8 :                     sys_MSendData:
(1) 1755/FFFFFFFFFFFF27A8 : 40C5                		move.w	sr,d5
(1) 1756/FFFFFFFFFFFF27AA : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
(1) 1757/FFFFFFFFFFFF27AE : 4DF9 00A1 5100      		lea	(sysmars_reg).l,a6		; a6 - sysmars_reg
(1) 1758/FFFFFFFFFFFF27B4 : 4BEE 0012           		lea	dreqfifo(a6),a5			; a5 - FIFO port
(1) 1759/FFFFFFFFFFFF27B8 : 7E00                		moveq	#0,d7
(1) 1760/FFFFFFFFFFFF27BA : 3E00                		move.w	d0,d7				; d7.l - Size
(1) 1761/FFFFFFFFFFFF27BC : 4A46                		tst.w	d6				; CMD mode 0?
(1) 1762/FFFFFFFFFFFF27BE : 6606                		bne.s	.no_src
(1) 1763/FFFFFFFFFFFF27C0 : 2D49 000C           		move.l	a1,dreqdest(a6)
(1) 1764/FFFFFFFFFFFF27C4 : D3C7                		add.l	d7,a1				; Update a1
(1) 1765/FFFFFFFFFFFF27C6 :                     .no_src:
(1) 1766/FFFFFFFFFFFF27C6 : 1D46 002C           		move.b	d6,comm12(a6)			; d6 - Set CMD mode (target output)
(1) 1767/FFFFFFFFFFFF27CA : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Reset 68S, RV off
(1) 1768/FFFFFFFFFFFF27D0 : E24F                		lsr.w	#1,d7				; length >> 2
(1) 1769/FFFFFFFFFFFF27D2 : 3D47 0010           		move.w	d7,dreqlen(a6)			; Set transfer lenght
(1) 1770/FFFFFFFFFFFF27D6 : E44F                		lsr.w	#2,d7				; lenght/2 >> 4
(1) 1771/FFFFFFFFFFFF27D8 : 0447 0001           		subi.w	#1,d7
(1) 1772/FFFFFFFFFFFF27DC : 08EE 0000 0003      		bset	#0,standby(a6)			; Call CMD interrupt to MASTER
(1) 1773/FFFFFFFFFFFF27E2 : 082E 0006 002C      .wait_bit:	btst	#6,comm12(a6)			; Wait ENTRANCE signal
(1) 1774/FFFFFFFFFFFF27E8 : 67F8                		beq.s	.wait_bit
(1) 1775/FFFFFFFFFFFF27EA : 3D7C 0004 0006      		move.w	#%100,dreqctl(a6)		; Enable 68S, RV off
(1) 1776/FFFFFFFFFFFF27F0 :                     	; *** CRITICAL PART ***
(1) 1777/FFFFFFFFFFFF27F0 :                     .loop_fifo:
(1) 1778/FFFFFFFFFFFF27F0 : 082E 0007 0006      		btst	#7,dreqctl(a6)			; FIFO full?
(1) 1779/FFFFFFFFFFFF27F6 : 66F8                		bne.s	.loop_fifo
(1) 1780/FFFFFFFFFFFF27F8 : 3A98                		move.w  (a0)+,(a5)
(1) 1781/FFFFFFFFFFFF27FA : 3A98                		move.w  (a0)+,(a5)
(1) 1782/FFFFFFFFFFFF27FC : 3A98                		move.w  (a0)+,(a5)
(1) 1783/FFFFFFFFFFFF27FE : 3A98                		move.w  (a0)+,(a5)
(1) 1784/FFFFFFFFFFFF2800 : 51CF FFEE           		dbf	d7,.loop_fifo
(1) 1789/FFFFFFFFFFFF2804 : 3D7C 0000 0006      		move.w	#%000,dreqctl(a6)		; Disable 68S, RV off
(1) 1790/FFFFFFFFFFFF280A : 46C5                		move.w	d5,sr				; Restore interrupts
(1) 1791/FFFFFFFFFFFF280C : 4E75                		rts
(1) 1793/FFFFFFFFFFFF280E :                     
(1) 1794/FFFFFFFFFFFF280E :                     ; ====================================================================
(1) 1795/FFFFFFFFFFFF280E :                     ; ----------------------------------------------------------------
(1) 1796/FFFFFFFFFFFF280E :                     ; SHARED for all
(1) 1797/FFFFFFFFFFFF280E :                     ; ----------------------------------------------------------------
(1) 1798/FFFFFFFFFFFF280E :                     
(1) 1799/FFFFFFFFFFFF280E :                     ; --------------------------------------------------------
(1) 1800/FFFFFFFFFFFF280E :                     ; System_SetDataBank
(1) 1801/FFFFFFFFFFFF280E :                     ;
(1) 1802/FFFFFFFFFFFF280E :                     ; Sets the current DATA bank depending of the system
(1) 1803/FFFFFFFFFFFF280E :                     ;
(1) 1804/FFFFFFFFFFFF280E :                     ; Input:
(1) 1805/FFFFFFFFFFFF280E :                     ; d0 | Data location
(1) 1806/FFFFFFFFFFFF280E :                     ;      SCD/CD32X: Data label for searching
(1) 1807/FFFFFFFFFFFF280E :                     ;      the ISO filename in incl_list.asm
(1) 1808/FFFFFFFFFFFF280E :                     ;
(1) 1809/FFFFFFFFFFFF280E :                     ; Returns:
(1) 1810/FFFFFFFFFFFF280E :                     ; bcc | Loaded bank without problem
(1) 1811/FFFFFFFFFFFF280E :                     ; bcs | Bank not found
(1) 1812/FFFFFFFFFFFF280E :                     ;
(1) 1813/FFFFFFFFFFFF280E :                     ; Uses:
(1) 1814/FFFFFFFFFFFF280E :                     ; a4-a5,d5-d7
(1) 1815/FFFFFFFFFFFF280E :                     ;
(1) 1816/FFFFFFFFFFFF280E :                     ; Notes:
(1) 1817/FFFFFFFFFFFF280E :                     ; - This code is shared to all systems, on CD/CD32X
(1) 1818/FFFFFFFFFFFF280E :                     ;   this will load from DISC so transfer will be
(1) 1819/FFFFFFFFFFFF280E :                     ;   slow.
(1) 1820/FFFFFFFFFFFF280E :                     ; - CD/CD32X: DO NOT USE THIS WHEN STAMPS ARE ACTIVE
(1) 1821/FFFFFFFFFFFF280E :                     ;   Load the stamp data with this BEFORE enabling them.
(1) 1822/FFFFFFFFFFFF280E :                     ; --------------------------------------------------------
(1) 1823/FFFFFFFFFFFF280E :                     
(1) 1824/FFFFFFFFFFFF280E :                     System_SetDataBank:
(1) 1825/FFFFFFFFFFFF280E :                     
(1) 1826/FFFFFFFFFFFF280E :                     	; CD/CD32X:
(1) 1828/FFFFFFFFFFFF280E : 48E7 0180           		movem.l	d7/a0,-(sp)
(1) 1829/FFFFFFFFFFFF2812 : 6100 FD0E           		bsr	System_MdMcd_SubWait
(1) 1830/FFFFFFFFFFFF2816 : B0B9 FFFF FB00      		cmp.l	(RAM_SysLastBank).l,d0
(1) 1831/FFFFFFFFFFFF281C : 672E                		beq.s	.same_bank
(1) 1832/FFFFFFFFFFFF281E : 23C0 FFFF FB00      		move.l	d0,(RAM_SysLastBank).l
(1) 1833/FFFFFFFFFFFF2824 : 41F9 FFFF 2BB8      		lea	(disc_banklist).l,a0
(1) 1834/FFFFFFFFFFFF282A :                     .srch_cdbank:
(1) 1835/FFFFFFFFFFFF282A : 2E10                		move.l	(a0),d7
(1) 1836/FFFFFFFFFFFF282C : BEBC FFFF FFFF      		cmp.l	#-1,d7
(1) 1837/FFFFFFFFFFFF2832 : 670A                		beq.s	.ran_out
(1) 1838/FFFFFFFFFFFF2834 : B087                		cmp.l	d7,d0
(1) 1839/FFFFFFFFFFFF2836 : 670C                		beq.s	.found_it
(1) 1840/FFFFFFFFFFFF2838 : D0FC 0010           		adda	#$10,a0
(1) 1841/FFFFFFFFFFFF283C : 60EC                		bra.s	.srch_cdbank
(1) 1842/FFFFFFFFFFFF283E :                     .ran_out:
(1) 1843/FFFFFFFFFFFF283E : 003C 0001           		or	#1,ccr
(1) 1844/FFFFFFFFFFFF2842 : 600C                		bra.s	.from_err
(1) 1845/FFFFFFFFFFFF2844 :                     .found_it:
(1) 1846/FFFFFFFFFFFF2844 : D0FC 0004           		adda	#4,a0
(1) 1847/FFFFFFFFFFFF2848 : 6100 FE04           		bsr	System_MdMcd_RdFile_WRAM
(1) 1848/FFFFFFFFFFFF284C :                     .same_bank:
(1) 1849/FFFFFFFFFFFF284C : 023C 001E           		and	#%11110,ccr
(1) 1850/FFFFFFFFFFFF2850 :                     .from_err:
(1) 1851/FFFFFFFFFFFF2850 : 4CDF 0180           		movem.l	(sp)+,d7/a0
(1) 1852/FFFFFFFFFFFF2854 :                     		; rts
(1) 1853/FFFFFFFFFFFF2854 :                     
(1) 1854/FFFFFFFFFFFF2854 :                     	; 32X ONLY
(1) 1870/FFFFFFFFFFFF2854 :                     
(1) 1871/FFFFFFFFFFFF2854 : 4E75                		rts			; *** KEEP THIS RTS ***
(1) 1872/FFFFFFFFFFFF2856 :                     
(1) 1873/FFFFFFFFFFFF2856 :                     ; ====================================================================
(1) 1874/FFFFFFFFFFFF2856 :                     ; ----------------------------------------------------------------
(1) 1875/FFFFFFFFFFFF2856 :                     ; Objects system
(1) 1876/FFFFFFFFFFFF2856 :                     ; ----------------------------------------------------------------
(1) 1877/FFFFFFFFFFFF2856 :                     
(1) 1878/FFFFFFFFFFFF2856 :                     ; --------------------------------------------------------
(1) 1879/FFFFFFFFFFFF2856 :                     ; Init/Clear Objects system
(1) 1880/FFFFFFFFFFFF2856 :                     ; --------------------------------------------------------
(1) 1881/FFFFFFFFFFFF2856 :                     
(1) 1882/FFFFFFFFFFFF2856 :                     Object_Init:
(1) 1883/FFFFFFFFFFFF2856 : 4DF8 EAB8           		lea	(RAM_Objects).w,a6
(1) 1884/FFFFFFFFFFFF285A : 3E3C 103F           		move.w	#(obj_len*MAX_MDOBJ)-1,d7
(1) 1885/FFFFFFFFFFFF285E :                     .clr:
(1) 1886/FFFFFFFFFFFF285E : 421E                		clr.b	(a6)+
(1) 1887/FFFFFFFFFFFF2860 : 51CF FFFC           		dbf	d7,.clr
(1) 1888/FFFFFFFFFFFF2864 : 4E75                		rts
(1) 1889/FFFFFFFFFFFF2866 :                     
(1) 1890/FFFFFFFFFFFF2866 :                     ; --------------------------------------------------------
(1) 1891/FFFFFFFFFFFF2866 :                     ; Process objects
(1) 1892/FFFFFFFFFFFF2866 :                     ;
(1) 1893/FFFFFFFFFFFF2866 :                     ; ONLY CALL THIS ONCE PER FRAME
(1) 1894/FFFFFFFFFFFF2866 :                     ; --------------------------------------------------------
(1) 1895/FFFFFFFFFFFF2866 :                     
(1) 1896/FFFFFFFFFFFF2866 :                     Object_Run:
(1) 1897/FFFFFFFFFFFF2866 : 4DF8 EAB8           		lea	(RAM_Objects).w,a6
(1) 1898/FFFFFFFFFFFF286A : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1899/FFFFFFFFFFFF286E :                     .next_one:
(1) 1900/FFFFFFFFFFFF286E : 2C16                		move.l	obj_code(a6),d6
(1) 1901/FFFFFFFFFFFF2870 : 6708                		beq.s	.no_code
(1) 1902/FFFFFFFFFFFF2872 : 2F07                		move.l	d7,-(sp)
(1) 1903/FFFFFFFFFFFF2874 : 2A46                		move.l	d6,a5
(1) 1904/FFFFFFFFFFFF2876 : 4E95                		jsr	(a5)
(1) 1905/FFFFFFFFFFFF2878 : 2E1F                		move.l	(sp)+,d7
(1) 1906/FFFFFFFFFFFF287A :                     .no_code:
(1) 1907/FFFFFFFFFFFF287A : DCFC 0068           		adda	#obj_len,a6
(1) 1908/FFFFFFFFFFFF287E : 51CF FFEE           		dbf	d7,.next_one
(1) 1909/FFFFFFFFFFFF2882 : 4E75                		rts
(1) 1910/FFFFFFFFFFFF2884 :                     
(1) 1911/FFFFFFFFFFFF2884 :                     ; --------------------------------------------------------
(1) 1912/FFFFFFFFFFFF2884 :                     ; Object_Set, Object_Make
(1) 1913/FFFFFFFFFFFF2884 :                     ;
(1) 1914/FFFFFFFFFFFF2884 :                     ; Set a new object into a specific slot.
(1) 1915/FFFFFFFFFFFF2884 :                     ;
(1) 1916/FFFFFFFFFFFF2884 :                     ; Input:
(1) 1917/FFFFFFFFFFFF2884 :                     ; d0.l | Object code pointer
(1) 1918/FFFFFFFFFFFF2884 :                     ;        If 0: DELETE the object including it's memory
(1) 1919/FFFFFFFFFFFF2884 :                     ; d1.b | Object sub-type (obj_subid)
(1) 1920/FFFFFFFFFFFF2884 :                     ; d2.w | Object slot
(1) 1921/FFFFFFFFFFFF2884 :                     ;        If -1: Auto-search starting from FIRST slot.
(1) 1922/FFFFFFFFFFFF2884 :                     ;
(1) 1923/FFFFFFFFFFFF2884 :                     ; Returns:
(1) 1924/FFFFFFFFFFFF2884 :                     ; bcc | Found free slot
(1) 1925/FFFFFFFFFFFF2884 :                     ; bcs | Ran-out of object slots
(1) 1926/FFFFFFFFFFFF2884 :                     ;
(1) 1927/FFFFFFFFFFFF2884 :                     ; Notes:
(1) 1928/FFFFFFFFFFFF2884 :                     ; If you are not using obj_subid you can ignore it,
(1) 1929/FFFFFFFFFFFF2884 :                     ; but it will contain the remains of d2 when you
(1) 1930/FFFFFFFFFFFF2884 :                     ; called this.
(1) 1931/FFFFFFFFFFFF2884 :                     ; --------------------------------------------------------
(1) 1932/FFFFFFFFFFFF2884 :                     
(1) 1933/FFFFFFFFFFFF2884 :                     Object_Set:
(1) 1934/FFFFFFFFFFFF2884 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1935/FFFFFFFFFFFF2888 : 4DF8 EAB8           		lea	(RAM_Objects).w,a6
(1) 1936/FFFFFFFFFFFF288C : 7E00                		moveq	#0,d7
(1) 1937/FFFFFFFFFFFF288E : 3E02                		move.w	d2,d7
(1) 1938/FFFFFFFFFFFF2890 : CEFC 0068           		mulu.w	#obj_len,d7
(1) 1939/FFFFFFFFFFFF2894 : DCC7                		adda	d7,a6
(1) 1940/FFFFFFFFFFFF2896 : 602C                		bra.s	objSet_Go
(1) 1941/FFFFFFFFFFFF2898 :                     
(1) 1942/FFFFFFFFFFFF2898 :                     Object_Make:
(1) 1943/FFFFFFFFFFFF2898 : 48E7 0306           		movem.l	d6-d7/a5-a6,-(sp)
(1) 1944/FFFFFFFFFFFF289C : 4DF8 EAB8           		lea	(RAM_Objects).w,a6
(1) 1945/FFFFFFFFFFFF28A0 : 3E3C 0027           		move.w	#MAX_MDOBJ-1,d7
(1) 1946/FFFFFFFFFFFF28A4 : 7C00                		moveq	#0,d6
(1) 1947/FFFFFFFFFFFF28A6 :                     .search:
(1) 1948/FFFFFFFFFFFF28A6 : BC7C 0028           		cmp.w	#MAX_MDOBJ,d6
(1) 1949/FFFFFFFFFFFF28AA : 6C0E                		bge.s	objSet_Error
(1) 1950/FFFFFFFFFFFF28AC : 4A96                		tst.l	obj_code(a6)
(1) 1951/FFFFFFFFFFFF28AE : 6714                		beq.s	objSet_Go
(1) 1952/FFFFFFFFFFFF28B0 : DCFC 0068           		adda	#obj_len,a6
(1) 1953/FFFFFFFFFFFF28B4 : 5246                		addq.w	#1,d6
(1) 1954/FFFFFFFFFFFF28B6 : 51CF FFEE           		dbf	d7,.search
(1) 1955/FFFFFFFFFFFF28BA :                     objSet_Error:
(1) 1956/FFFFFFFFFFFF28BA : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1957/FFFFFFFFFFFF28BE : 44FC 0001           		move	#1,ccr			; Return carry (No slots)
(1) 1958/FFFFFFFFFFFF28C2 : 4E75                		rts
(1) 1959/FFFFFFFFFFFF28C4 :                     
(1) 1960/FFFFFFFFFFFF28C4 :                     objSet_Go:
(1) 1961/FFFFFFFFFFFF28C4 : 4A80                		tst.l	d0
(1) 1962/FFFFFFFFFFFF28C6 : 670A                		beq.s	.from_del
(1) 1963/FFFFFFFFFFFF28C8 : 2E00                		move.l	d0,d7
(1) 1964/FFFFFFFFFFFF28CA : 2C87                		move.l	d7,obj_code(a6)
(1) 1965/FFFFFFFFFFFF28CC : 1D41 001D           		move.b	d1,obj_subid(a6)
(1) 1966/FFFFFFFFFFFF28D0 : 600C                		bra.s	.exit_this
(1) 1967/FFFFFFFFFFFF28D2 :                     .from_del:
(1) 1968/FFFFFFFFFFFF28D2 : 2A4E                		move.l	a6,a5			; Delete entire object
(1) 1969/FFFFFFFFFFFF28D4 : 3E3C 0067           		move.w	#obj_len-1,d7
(1) 1970/FFFFFFFFFFFF28D8 : 421D                .clr:		clr.b	(a5)+
(1) 1971/FFFFFFFFFFFF28DA : 51CF FFFC           		dbf	d7,.clr
(1) 1972/FFFFFFFFFFFF28DE :                     .exit_this:
(1) 1973/FFFFFFFFFFFF28DE : 4CDF 60C0           		movem.l	(sp)+,d6-d7/a5-a6
(1) 1974/FFFFFFFFFFFF28E2 : 003C 0001           		or	#1,ccr
(1) 1975/FFFFFFFFFFFF28E6 : 4E75                		rts
(1) 1976/FFFFFFFFFFFF28E8 :                     
(1) 1977/FFFFFFFFFFFF28E8 :                     ; ====================================================================
(1) 1978/FFFFFFFFFFFF28E8 :                     ; --------------------------------------------------------
(1) 1979/FFFFFFFFFFFF28E8 :                     ; Object subroutines
(1) 1980/FFFFFFFFFFFF28E8 :                     ;
(1) 1981/FFFFFFFFFFFF28E8 :                     ; These can ONLY be called on the current object's code
(1) 1982/FFFFFFFFFFFF28E8 :                     ; --------------------------------------------------------
(1) 1983/FFFFFFFFFFFF28E8 :                     
(1) 1984/FFFFFFFFFFFF28E8 :                     ; --------------------------------------------------------
(1) 1985/FFFFFFFFFFFF28E8 :                     ; object_ResetVars
(1) 1986/FFFFFFFFFFFF28E8 :                     ;
(1) 1987/FFFFFFFFFFFF28E8 :                     ; Resets the current object's memory, call this
(1) 1988/FFFFFFFFFFFF28E8 :                     ; at very beginning of your object's init code
(1) 1989/FFFFFFFFFFFF28E8 :                     ;
(1) 1990/FFFFFFFFFFFF28E8 :                     ; Input:
(1) 1991/FFFFFFFFFFFF28E8 :                     ; a6 | This object
(1) 1992/FFFFFFFFFFFF28E8 :                     ; --------------------------------------------------------
(1) 1993/FFFFFFFFFFFF28E8 :                     
(1) 1994/FFFFFFFFFFFF28E8 :                     object_ResetVars:
(1) 1995/FFFFFFFFFFFF28E8 : 48E7 0304           		movem.l	d6-d7/a5,-(sp)
(1) 1996/FFFFFFFFFFFF28EC : 4BEE 0028           		lea	obj_ram(a6),a5
(1) 1997/FFFFFFFFFFFF28F0 : 3C3C 003F           		move.w	#(obj_len-obj_ram)-1,d6
(1) 1998/FFFFFFFFFFFF28F4 : 7E00                		moveq	#0,d7
(1) 1999/FFFFFFFFFFFF28F6 : 1AC7                .clr_ram:	move.b	d7,(a5)+
(1) 2000/FFFFFFFFFFFF28F8 : 51CE FFFC           		dbf	d6,.clr_ram
(1) 2001/FFFFFFFFFFFF28FC : 4CDF 20C0           		movem.l	(sp)+,d6-d7/a5
(1) 2002/FFFFFFFFFFFF2900 : 4E75                		rts
(1) 2003/FFFFFFFFFFFF2902 :                     
(1) 2004/FFFFFFFFFFFF2902 :                     ; --------------------------------------------------------
(1) 2005/FFFFFFFFFFFF2902 :                     ; object_ResetAnim
(1) 2006/FFFFFFFFFFFF2902 :                     ;
(1) 2007/FFFFFFFFFFFF2902 :                     ; Reset animation variables
(1) 2008/FFFFFFFFFFFF2902 :                     ; call this BEFORE using object_Animate
(1) 2009/FFFFFFFFFFFF2902 :                     ;
(1) 2010/FFFFFFFFFFFF2902 :                     ; Input:
(1) 2011/FFFFFFFFFFFF2902 :                     ; a6 | This object
(1) 2012/FFFFFFFFFFFF2902 :                     ; --------------------------------------------------------
(1) 2013/FFFFFFFFFFFF2902 :                     
(1) 2014/FFFFFFFFFFFF2902 :                     object_ResetAnim:
(1) 2015/FFFFFFFFFFFF2902 :                     ;  		clr.w	obj_anim_indx(a6)
(1) 2016/FFFFFFFFFFFF2902 :                     ;  		clr.b	obj_anim_spd(a6)
(1) 2017/FFFFFFFFFFFF2902 : 1D7C 00FF 0026      		move.b	#-1,obj_anim_icur(a6)
(1) 2018/FFFFFFFFFFFF2908 : 4E75                		rts
(1) 2019/FFFFFFFFFFFF290A :                     
(1) 2020/FFFFFFFFFFFF290A :                     ; --------------------------------------------------------
(1) 2021/FFFFFFFFFFFF290A :                     ; object_Speed
(1) 2022/FFFFFFFFFFFF290A :                     ;
(1) 2023/FFFFFFFFFFFF290A :                     ; Moves the object using speed values set on
(1) 2024/FFFFFFFFFFFF290A :                     ; obj_x_spd and obj_y_spd, updates obj_x and obj_y
(1) 2025/FFFFFFFFFFFF290A :                     ;
(1) 2026/FFFFFFFFFFFF290A :                     ; Input:
(1) 2027/FFFFFFFFFFFF290A :                     ; a6 | This object
(1) 2028/FFFFFFFFFFFF290A :                     ; --------------------------------------------------------
(1) 2029/FFFFFFFFFFFF290A :                     
(1) 2030/FFFFFFFFFFFF290A :                     object_Speed:
(1) 2031/FFFFFFFFFFFF290A : 2F07                		move.l	d7,-(sp)
(1) 2032/FFFFFFFFFFFF290C : 7E00                		moveq	#0,d7
(1) 2033/FFFFFFFFFFFF290E : 3E2E 0016           		move.w	obj_x_spd(a6),d7
(1) 2034/FFFFFFFFFFFF2912 : 48C7                		ext.l	d7
(1) 2035/FFFFFFFFFFFF2914 : E187                		asl.l	#8,d7
(1) 2036/FFFFFFFFFFFF2916 : DFAE 0004           		add.l	d7,obj_x(a6)
(1) 2037/FFFFFFFFFFFF291A : 7E00                		moveq	#0,d7
(1) 2038/FFFFFFFFFFFF291C : 3E2E 0018           		move.w	obj_y_spd(a6),d7
(1) 2039/FFFFFFFFFFFF2920 : 48C7                		ext.l	d7
(1) 2040/FFFFFFFFFFFF2922 : E187                		asl.l	#8,d7
(1) 2041/FFFFFFFFFFFF2924 : DFAE 0008           		add.l	d7,obj_y(a6)
(1) 2042/FFFFFFFFFFFF2928 : 7E00                		moveq	#0,d7
(1) 2043/FFFFFFFFFFFF292A : 3E2E 001A           		move.w	obj_z_spd(a6),d7
(1) 2044/FFFFFFFFFFFF292E : 48C7                		ext.l	d7
(1) 2045/FFFFFFFFFFFF2930 : E187                		asl.l	#8,d7
(1) 2046/FFFFFFFFFFFF2932 : DFAE 000C           		add.l	d7,obj_z(a6)
(1) 2047/FFFFFFFFFFFF2936 : 2E1F                		move.l	(sp)+,d7
(1) 2048/FFFFFFFFFFFF2938 : 4E75                		rts
(1) 2049/FFFFFFFFFFFF293A :                     
(1) 2050/FFFFFFFFFFFF293A :                     ; --------------------------------------------------------
(1) 2051/FFFFFFFFFFFF293A :                     ; object_Animate
(1) 2052/FFFFFFFFFFFF293A :                     ;
(1) 2053/FFFFFFFFFFFF293A :                     ; Animates the sprite with a animation script,
(1) 2054/FFFFFFFFFFFF293A :                     ; modifies obj_frame with the frame to use
(1) 2055/FFFFFFFFFFFF293A :                     ;
(1) 2056/FFFFFFFFFFFF293A :                     ; Input:
(1) 2057/FFFFFFFFFFFF293A :                     ; a6 | This object
(1) 2058/FFFFFFFFFFFF293A :                     ; a0 | Animation data
(1) 2059/FFFFFFFFFFFF293A :                     ; --------------------------------------------------------
(1) 2060/FFFFFFFFFFFF293A :                     
(1) 2061/FFFFFFFFFFFF293A :                     ; anim_data:
(1) 2062/FFFFFFFFFFFF293A :                     ; 	dc.w .frame_1-anim_data
(1) 2063/FFFFFFFFFFFF293A :                     ; 	dc.w .frame_2-anim_data
(1) 2064/FFFFFFFFFFFF293A :                     ; 	;...
(1) 2065/FFFFFFFFFFFF293A :                     ;
(1) 2066/FFFFFFFFFFFF293A :                     ; .frame_num:
(1) 2067/FFFFFFFFFFFF293A :                     ; 	dc.w speed			; Animation speed/delay
(1) 2068/FFFFFFFFFFFF293A :                     ; 	dc.w frame_0,frame_1,...	; Frames list
(1) 2069/FFFFFFFFFFFF293A :                     ; 	dc.w command			; End-of-data command
(1) 2070/FFFFFFFFFFFF293A :                     ;
(1) 2071/FFFFFFFFFFFF293A :                     ; commands:
(1) 2072/FFFFFFFFFFFF293A :                     ; dc.w -1 		; Finish animation, stops at last frame.
(1) 2073/FFFFFFFFFFFF293A :                     ; dc.w -2 		; Loop animation, goes back to index 0
(1) 2074/FFFFFFFFFFFF293A :                     ; dc.w -3,to_indx	; Jump to index
(1) 2075/FFFFFFFFFFFF293A :                     
(1) 2076/FFFFFFFFFFFF293A :                     object_Animate:
(1) 2077/FFFFFFFFFFFF293A : 48E7 0780           		movem.l	a0/d5-d7,-(sp)
(1) 2078/FFFFFFFFFFFF293E : 7E00                		moveq	#0,d7
(1) 2079/FFFFFFFFFFFF2940 : 1E2E 0026            		move.b	obj_anim_icur(a6),d7
(1) 2080/FFFFFFFFFFFF2944 : BE6E 0022            		cmp.w	obj_anim_num(a6),d7
(1) 2081/FFFFFFFFFFFF2948 : 670E                 		beq.s	.sameThing
(1) 2082/FFFFFFFFFFFF294A : 1D6E 0023 0026       		move.b	obj_anim_num+1(a6),obj_anim_icur(a6)
(1) 2083/FFFFFFFFFFFF2950 : 426E 0024            		clr.w	obj_anim_indx(a6)
(1) 2084/FFFFFFFFFFFF2954 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2085/FFFFFFFFFFFF2958 :                     .sameThing:
(1) 2086/FFFFFFFFFFFF2958 : 3E2E 0022            		move.w	obj_anim_num(a6),d7
(1) 2087/FFFFFFFFFFFF295C : 0C07 00FF            		cmpi.b	#-1,d7
(1) 2088/FFFFFFFFFFFF2960 : 6748                 		beq.s	.return
(1) 2089/FFFFFFFFFFFF2962 : DE47                 		add.w	d7,d7
(1) 2090/FFFFFFFFFFFF2964 : 3E30 7000            		move.w	(a0,d7.w),d7
(1) 2091/FFFFFFFFFFFF2968 : 41F0 7000            		lea	(a0,d7.w),a0
(1) 2092/FFFFFFFFFFFF296C : 3E18                 		move.w	(a0)+,d7
(1) 2093/FFFFFFFFFFFF296E : 0C47 FFFF            		cmpi.w	#-1,d7
(1) 2094/FFFFFFFFFFFF2972 : 670C                 		beq.s	.keepspd
(1) 2095/FFFFFFFFFFFF2974 : 042E 0001 0027       		subi.b	#1,obj_anim_spd(a6)
(1) 2096/FFFFFFFFFFFF297A : 6A2E                 		bpl.s	.return
(1) 2097/FFFFFFFFFFFF297C : 1D47 0027           		move.b	d7,obj_anim_spd(a6)
(1) 2098/FFFFFFFFFFFF2980 :                     .keepspd:
(1) 2099/FFFFFFFFFFFF2980 : 7C00                 		moveq	#0,d6
(1) 2100/FFFFFFFFFFFF2982 : 3E2E 0024            		move.w	obj_anim_indx(a6),d7
(1) 2101/FFFFFFFFFFFF2986 : DE47                 		add.w	d7,d7
(1) 2102/FFFFFFFFFFFF2988 : 3C10                 		move.w	(a0),d6
(1) 2103/FFFFFFFFFFFF298A : D0C7                 		adda	d7,a0
(1) 2104/FFFFFFFFFFFF298C : 3A10                 		move.w	(a0),d5
(1) 2105/FFFFFFFFFFFF298E : 0C45 FFFF            		cmpi.w	#-1,d5
(1) 2106/FFFFFFFFFFFF2992 : 6730                 		beq.s	.lastFrame	; finish
(1) 2107/FFFFFFFFFFFF2994 : 0C45 FFFE            		cmpi.w	#-2,d5
(1) 2108/FFFFFFFFFFFF2998 : 6712                 		beq.s	.noAnim		; loop animation
(1) 2109/FFFFFFFFFFFF299A : 0C45 FFFD            		cmpi.w	#-3,d5
(1) 2110/FFFFFFFFFFFF299E : 671A                 		beq.s	.goToFrame
(1) 2111/FFFFFFFFFFFF29A0 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2112/FFFFFFFFFFFF29A4 : 066E 0001 0024       		add.w	#1,obj_anim_indx(a6)
(1) 2113/FFFFFFFFFFFF29AA :                     .return:
(1) 2114/FFFFFFFFFFFF29AA : 601C                 		bra.s	.exit_anim
(1) 2115/FFFFFFFFFFFF29AC :                     .noAnim:
(1) 2116/FFFFFFFFFFFF29AC : 3D7C 0001 0024       		move.w	#1,obj_anim_indx(a6)
(1) 2117/FFFFFFFFFFFF29B2 : 3A06                 		move.w	d6,d5
(1) 2118/FFFFFFFFFFFF29B4 : 3D45 0020            		move.w	d5,obj_frame(a6)
(1) 2119/FFFFFFFFFFFF29B8 : 600E                		bra.s	.exit_anim
(1) 2120/FFFFFFFFFFFF29BA :                     .goToFrame:
(1) 2121/FFFFFFFFFFFF29BA : 426E 0024           		clr.w	obj_anim_indx(a6)
(1) 2122/FFFFFFFFFFFF29BE : 3D68 0002 0024      		move.w	2(a0),obj_anim_indx(a6)
(1) 2123/FFFFFFFFFFFF29C4 :                     .lastFrame:
(1) 2124/FFFFFFFFFFFF29C4 : 422E 0027            		clr.b	obj_anim_spd(a6)
(1) 2125/FFFFFFFFFFFF29C8 :                     .exit_anim:
(1) 2126/FFFFFFFFFFFF29C8 : 4CDF 01E0           		movem.l	(sp)+,a0/d5-d7
(1) 2127/FFFFFFFFFFFF29CC : 4E75                		rts
(1) 2128/FFFFFFFFFFFF29CE :                     
(1) 2129/FFFFFFFFFFFF29CE :                     ; --------------------------------------------------------
(1) 2130/FFFFFFFFFFFF29CE :                     ; object_Touch
(1) 2131/FFFFFFFFFFFF29CE :                     ;
(1) 2132/FFFFFFFFFFFF29CE :                     ; Detects collision with another Object
(1) 2133/FFFFFFFFFFFF29CE :                     ; from the Object's list, reads TOP to BOTTOM
(1) 2134/FFFFFFFFFFFF29CE :                     ;
(1) 2135/FFFFFFFFFFFF29CE :                     ; Input:
(1) 2136/FFFFFFFFFFFF29CE :                     ; a6   | This object
(1) 2137/FFFFFFFFFFFF29CE :                     ; d0.w | Start from slot
(1) 2138/FFFFFFFFFFFF29CE :                     ;
(1) 2139/FFFFFFFFFFFF29CE :                     ; Returns:
(1) 2140/FFFFFFFFFFFF29CE :                     ; d0.l | If Nothing: 0
(1) 2141/FFFFFFFFFFFF29CE :                     ;        If Found:   The target's RAM location
(1) 2142/FFFFFFFFFFFF29CE :                     ; --------------------------------------------------------
(1) 2143/FFFFFFFFFFFF29CE :                     
(1) 2144/FFFFFFFFFFFF29CE :                     object_Touch:
(1) 2145/FFFFFFFFFFFF29CE : 48E7 7F04           		movem.l	d1-d7/a5,-(sp)
(1) 2146/FFFFFFFFFFFF29D2 : 7000                		moveq	#0,d0
(1) 2147/FFFFFFFFFFFF29D4 : 3C2E 0010           		move.w	obj_size_x(a6),d6	; Check if we have a valid size
(1) 2148/FFFFFFFFFFFF29D8 : 3A2E 0012           		move.w	obj_size_y(a6),d5
(1) 2149/FFFFFFFFFFFF29DC : 8C45                		or.w	d5,d6
(1) 2150/FFFFFFFFFFFF29DE : 672C                		beq	.exit_this
(1) 2151/FFFFFFFFFFFF29E0 : 4BF8 EAB8           		lea	(RAM_Objects).w,a5
(1) 2152/FFFFFFFFFFFF29E4 : 3C00                		move.w	d0,d6
(1) 2153/FFFFFFFFFFFF29E6 : CCFC 0068           		mulu.w	#obj_len,d6
(1) 2154/FFFFFFFFFFFF29EA : DAC6                		adda	d6,a5
(1) 2155/FFFFFFFFFFFF29EC : 3E00                		move.w	d0,d7
(1) 2156/FFFFFFFFFFFF29EE :                     .next:
(1) 2157/FFFFFFFFFFFF29EE : BE7C 0028           		cmp.w	#MAX_MDOBJ,d7
(1) 2158/FFFFFFFFFFFF29F2 : 6C16                		bge.s	.ran_out
(1) 2159/FFFFFFFFFFFF29F4 : BBCE                		cmp.l	a6,a5			; If reading THIS object, skip
(1) 2160/FFFFFFFFFFFF29F6 : 670A                		beq.s	.skip
(1) 2161/FFFFFFFFFFFF29F8 : 4A95                		tst.l	obj_code(a5)		; This object has code?
(1) 2162/FFFFFFFFFFFF29FA : 6706                		beq.s	.skip
(1) 2163/FFFFFFFFFFFF29FC : 6114                		bsr.s	.check_this
(1) 2164/FFFFFFFFFFFF29FE : 4A40                		tst.w	d0			; Exit if Found.
(1) 2165/FFFFFFFFFFFF2A00 : 660A                		bne.s	.exit_this
(1) 2166/FFFFFFFFFFFF2A02 : DAFC 0068           .skip:		adda	#obj_len,a5
(1) 2167/FFFFFFFFFFFF2A06 : 51CF FFE6           		dbf	d7,.next
(1) 2168/FFFFFFFFFFFF2A0A :                     .ran_out:
(1) 2169/FFFFFFFFFFFF2A0A : 7000                		moveq	#0,d0
(1) 2170/FFFFFFFFFFFF2A0C :                     .exit_this:
(1) 2171/FFFFFFFFFFFF2A0C : 4CDF 20FE           		movem.l	(sp)+,d1-d7/a5
(1) 2172/FFFFFFFFFFFF2A10 : 4E75                		rts
(1) 2173/FFFFFFFFFFFF2A12 :                     
(1) 2174/FFFFFFFFFFFF2A12 :                     ; main check
(1) 2175/FFFFFFFFFFFF2A12 :                     .check_this:
(1) 2176/FFFFFFFFFFFF2A12 : 7000                		moveq	#0,d0			; Reset Return
(1) 2177/FFFFFFFFFFFF2A14 :                     	; d6 - Y current top
(1) 2178/FFFFFFFFFFFF2A14 :                     	; d5 - Y current bottom
(1) 2179/FFFFFFFFFFFF2A14 :                     	; d4 - Y target top
(1) 2180/FFFFFFFFFFFF2A14 :                     	; d3 - Y target bottom
(1) 2181/FFFFFFFFFFFF2A14 :                     	; Check X
(1) 2182/FFFFFFFFFFFF2A14 : 322E 0010           		move.w	obj_size_x(a6),d1	; $LLRR
(1) 2183/FFFFFFFFFFFF2A18 : 6700 00B4           		beq	.not_ytop
(1) 2184/FFFFFFFFFFFF2A1C : 3C2E 0004           		move.w	obj_x(a6),d6		; d6 - Left point
(1) 2185/FFFFFFFFFFFF2A20 : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2186/FFFFFFFFFFFF2A22 : 3401                		move.w	d1,d2
(1) 2187/FFFFFFFFFFFF2A24 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2188/FFFFFFFFFFFF2A26 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2189/FFFFFFFFFFFF2A2A :                     ; 		lsl.w	#3,d1
(1) 2190/FFFFFFFFFFFF2A2A :                     ; 		lsl.w	#3,d2
(1) 2191/FFFFFFFFFFFF2A2A : 5342                		subq.w	#1,d2			; X right adjust
(1) 2192/FFFFFFFFFFFF2A2C : 9C41                		sub.w	d1,d6
(1) 2193/FFFFFFFFFFFF2A2E : DA42                		add.w	d2,d5
(1) 2194/FFFFFFFFFFFF2A30 : 322D 0010           		move.w	obj_size_x(a5),d1	; $LLRR
(1) 2195/FFFFFFFFFFFF2A34 : 6700 0098           		beq	.not_ytop
(1) 2196/FFFFFFFFFFFF2A38 : 382D 0004           		move.w	obj_x(a5),d4		; d4 - Left point
(1) 2197/FFFFFFFFFFFF2A3C : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2198/FFFFFFFFFFFF2A3E : 3401                		move.w	d1,d2
(1) 2199/FFFFFFFFFFFF2A40 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2200/FFFFFFFFFFFF2A42 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2201/FFFFFFFFFFFF2A46 :                     ; 		lsl.w	#3,d1
(1) 2202/FFFFFFFFFFFF2A46 :                     ; 		lsl.w	#3,d2
(1) 2203/FFFFFFFFFFFF2A46 : 5342                		subq.w	#1,d2
(1) 2204/FFFFFFFFFFFF2A48 : 9841                		sub.w	d1,d4
(1) 2205/FFFFFFFFFFFF2A4A : D642                		add.w	d2,d3
(1) 2206/FFFFFFFFFFFF2A4C : B646                		cmp.w	d6,d3
(1) 2207/FFFFFFFFFFFF2A4E : 6D7E                		blt	.not_ytop
(1) 2208/FFFFFFFFFFFF2A50 : B845                		cmp.w	d5,d4
(1) 2209/FFFFFFFFFFFF2A52 : 6C7A                		bge	.not_ytop
(1) 2210/FFFFFFFFFFFF2A54 :                     
(1) 2211/FFFFFFFFFFFF2A54 :                     	; Check Y
(1) 2212/FFFFFFFFFFFF2A54 : 322E 0012           		move.w	obj_size_y(a6),d1	; $LLRR
(1) 2213/FFFFFFFFFFFF2A58 : 6774                		beq	.not_ytop
(1) 2214/FFFFFFFFFFFF2A5A : 3C2E 0008           		move.w	obj_y(a6),d6		; d6 - Left point
(1) 2215/FFFFFFFFFFFF2A5E : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2216/FFFFFFFFFFFF2A60 : 3401                		move.w	d1,d2
(1) 2217/FFFFFFFFFFFF2A62 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2218/FFFFFFFFFFFF2A64 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2219/FFFFFFFFFFFF2A68 :                     ; 		lsl.w	#3,d1
(1) 2220/FFFFFFFFFFFF2A68 :                     ; 		lsl.w	#3,d2
(1) 2221/FFFFFFFFFFFF2A68 : 5342                		subq.w	#1,d2
(1) 2222/FFFFFFFFFFFF2A6A : 9C41                		sub.w	d1,d6
(1) 2223/FFFFFFFFFFFF2A6C : DA42                		add.w	d2,d5
(1) 2224/FFFFFFFFFFFF2A6E : 322D 0012           		move.w	obj_size_y(a5),d1	; $LLRR
(1) 2225/FFFFFFFFFFFF2A72 : 675A                		beq	.not_ytop
(1) 2226/FFFFFFFFFFFF2A74 : 382D 0008           		move.w	obj_y(a5),d4		; d4 - Left point
(1) 2227/FFFFFFFFFFFF2A78 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2228/FFFFFFFFFFFF2A7A : 3401                		move.w	d1,d2
(1) 2229/FFFFFFFFFFFF2A7C : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2230/FFFFFFFFFFFF2A7E : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2231/FFFFFFFFFFFF2A82 :                     ; 		lsl.w	#3,d1
(1) 2232/FFFFFFFFFFFF2A82 :                     ; 		lsl.w	#3,d2
(1) 2233/FFFFFFFFFFFF2A82 : 5342                		subq.w	#1,d2
(1) 2234/FFFFFFFFFFFF2A84 : 9841                		sub.w	d1,d4
(1) 2235/FFFFFFFFFFFF2A86 : D642                		add.w	d2,d3
(1) 2236/FFFFFFFFFFFF2A88 : B646                		cmp.w	d6,d3
(1) 2237/FFFFFFFFFFFF2A8A : 6D42                		blt.s	.not_ytop
(1) 2238/FFFFFFFFFFFF2A8C : B845                		cmp.w	d5,d4
(1) 2239/FFFFFFFFFFFF2A8E : 6C3E                		bge.s	.not_ytop
(1) 2240/FFFFFFFFFFFF2A90 :                     
(1) 2241/FFFFFFFFFFFF2A90 :                     	; Special Z check
(1) 2242/FFFFFFFFFFFF2A90 : 322E 0014           		move.w	obj_size_z(a6),d1	; $LLRR
(1) 2243/FFFFFFFFFFFF2A94 : 6736                		beq.s	.set_ok
(1) 2244/FFFFFFFFFFFF2A96 : 3C2E 000C           		move.w	obj_z(a6),d6		; d6 - Left point
(1) 2245/FFFFFFFFFFFF2A9A : 3A06                		move.w	d6,d5			; d5 - Right point
(1) 2246/FFFFFFFFFFFF2A9C : 3401                		move.w	d1,d2
(1) 2247/FFFFFFFFFFFF2A9E : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2248/FFFFFFFFFFFF2AA0 : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2249/FFFFFFFFFFFF2AA4 :                     ; 		lsl.w	#3,d1
(1) 2250/FFFFFFFFFFFF2AA4 :                     ; 		lsl.w	#3,d2
(1) 2251/FFFFFFFFFFFF2AA4 : 5342                		subq.w	#1,d2
(1) 2252/FFFFFFFFFFFF2AA6 : 9C41                		sub.w	d1,d6
(1) 2253/FFFFFFFFFFFF2AA8 : DA42                		add.w	d2,d5
(1) 2254/FFFFFFFFFFFF2AAA : 322D 0014           		move.w	obj_size_z(a5),d1	; $LLRR
(1) 2255/FFFFFFFFFFFF2AAE : 671C                		beq.s	.set_ok
(1) 2256/FFFFFFFFFFFF2AB0 : 382D 000C           		move.w	obj_z(a5),d4		; d4 - Left point
(1) 2257/FFFFFFFFFFFF2AB4 : 3604                		move.w	d4,d3			; d3 - Right point
(1) 2258/FFFFFFFFFFFF2AB6 : 3401                		move.w	d1,d2
(1) 2259/FFFFFFFFFFFF2AB8 : E049                		lsr.w	#8,d1			; d1 - Left size
(1) 2260/FFFFFFFFFFFF2ABA : 0242 00FF           		andi.w	#$FF,d2			; d2 - Right size
(1) 2261/FFFFFFFFFFFF2ABE :                     ; 		lsl.w	#3,d1
(1) 2262/FFFFFFFFFFFF2ABE :                     ; 		lsl.w	#3,d2
(1) 2263/FFFFFFFFFFFF2ABE : 5342                		subq.w	#1,d2
(1) 2264/FFFFFFFFFFFF2AC0 : 9841                		sub.w	d1,d4
(1) 2265/FFFFFFFFFFFF2AC2 : D642                		add.w	d2,d3
(1) 2266/FFFFFFFFFFFF2AC4 : B646                		cmp.w	d6,d3
(1) 2267/FFFFFFFFFFFF2AC6 : 6D06                		blt	.not_ytop
(1) 2268/FFFFFFFFFFFF2AC8 : B845                		cmp.w	d5,d4
(1) 2269/FFFFFFFFFFFF2ACA : 6C02                		bge	.not_ytop
(1) 2270/FFFFFFFFFFFF2ACC :                     .set_ok:
(1) 2271/FFFFFFFFFFFF2ACC : 200D                		move.l	a5,d0			; FOUND OBJECT
(1) 2272/FFFFFFFFFFFF2ACE :                     .not_ytop:
(1) 2273/FFFFFFFFFFFF2ACE : 4E75                		rts
(1) 2274/FFFFFFFFFFFF2AD0 :                     
(1) 2275/FFFFFFFFFFFF2AD0 :                     ; ============================================================
(1) 2276/FFFFFFFFFFFF2AD0 :                     ; --------------------------------------------------------
(1) 2277/FFFFFFFFFFFF2AD0 :                     ; object_MdMars_GetSprInfo
(1) 2278/FFFFFFFFFFFF2AD0 :                     ;
(1) 2279/FFFFFFFFFFFF2AD0 :                     ; Grabs info from the current object
(1) 2280/FFFFFFFFFFFF2AD0 :                     ; for Video_MdMars_MakeSpr2D and Video_MdMars_MakeSpr3D
(1) 2281/FFFFFFFFFFFF2AD0 :                     ;
(1) 2282/FFFFFFFFFFFF2AD0 :                     ; Input:
(1) 2283/FFFFFFFFFFFF2AD0 :                     ; a6   | This object
(1) 2284/FFFFFFFFFFFF2AD0 :                     ; d0.l | X/Y center: splitw(center_x,center_y)
(1) 2285/FFFFFFFFFFFF2AD0 :                     ;        Set to 0 for 3D Sprites
(1) 2286/FFFFFFFFFFFF2AD0 :                     ; d1.w | Flags
(1) 2287/FFFFFFFFFFFF2AD0 :                     ;
(1) 2288/FFFFFFFFFFFF2AD0 :                     ; Output:
(1) 2289/FFFFFFFFFFFF2AD0 :                     ; d0.l | X and Y position
(1) 2290/FFFFFFFFFFFF2AD0 :                     ; d1.l | Flags and Z Position
(1) 2291/FFFFFFFFFFFF2AD0 :                     ; d2.w | Current frame when using object_Animate
(1) 2292/FFFFFFFFFFFF2AD0 :                     ; --------------------------------------------------------
(1) 2293/FFFFFFFFFFFF2AD0 :                     
(1) 2294/FFFFFFFFFFFF2AD0 :                     object_MdMars_GetSprInfo:
(1) 2296/FFFFFFFFFFFF2AD0 : 4841                		swap	d1
(1) 2297/FFFFFFFFFFFF2AD2 : 322E 000C           		move.w	obj_z(a6),d1
(1) 2298/FFFFFFFFFFFF2AD6 : 4840                		swap	d0
(1) 2299/FFFFFFFFFFFF2AD8 : 382E 0004           		move.w	obj_x(a6),d4
(1) 2300/FFFFFFFFFFFF2ADC : 9840                		sub.w	d0,d4
(1) 2301/FFFFFFFFFFFF2ADE : 4844                		swap	d4
(1) 2302/FFFFFFFFFFFF2AE0 : 4840                		swap	d0
(1) 2303/FFFFFFFFFFFF2AE2 : 382E 0008           		move.w	obj_y(a6),d4		; d0 - Xpos | Ypos
(1) 2304/FFFFFFFFFFFF2AE6 : 9840                		sub.w	d0,d4
(1) 2305/FFFFFFFFFFFF2AE8 : C940                		exg.l	d4,d0
(1) 2306/FFFFFFFFFFFF2AEA : 7400                		moveq	#0,d2
(1) 2307/FFFFFFFFFFFF2AEC : 342E 0020           		move.w	obj_frame(a6),d2
(1) 2309/FFFFFFFFFFFF2AF0 : 4E75                		rts
(1) 2310/FFFFFFFFFFFF2AF2 :                     
     199/FFFFFFFFFFFF2AF2 :                     
     200/FFFFFFFFFFFF2AF2 :                     ; --------------------------------------------------------
     201/FFFFFFFFFFFF2AF2 :                     ; SCREEN MODE MAIN LOOP
     202/FFFFFFFFFFFF2AF2 :                     ;
     203/FFFFFFFFFFFF2AF2 :                     ;  MD/Pico: Direct ROM jump
     204/FFFFFFFFFFFF2AF2 :                     ; CD/CD32X: Reads file from DISC and
     205/FFFFFFFFFFFF2AF2 :                     ;           transfers code to RAM
     206/FFFFFFFFFFFF2AF2 :                     ;      32X: Code is stored on ROM but runs in
     207/FFFFFFFFFFFF2AF2 :                     ;           RAM to prevent conflicts with the
     208/FFFFFFFFFFFF2AF2 :                     ;           SH2
     209/FFFFFFFFFFFF2AF2 :                     ;
     210/FFFFFFFFFFFF2AF2 :                     ; - Returning(rts) in your current screen code return
     211/FFFFFFFFFFFF2AF2 :                     ;   here
     212/FFFFFFFFFFFF2AF2 :                     ; - CD/32X/CD32X:
     213/FFFFFFFFFFFF2AF2 :                     ;   This will turn OFF ALL special features
     214/FFFFFFFFFFFF2AF2 :                     ; --------------------------------------------------------
     215/FFFFFFFFFFFF2AF2 :                     
     216/FFFFFFFFFFFF2AF2 :                     Md_ReadModes:
     217/FFFFFFFFFFFF2AF2 : 007C 0700           		ori.w	#$0700,sr			; Disable interrupts
     219/FFFFFFFFFFFF2AF6 : 6100 ECD8           		bsr	Video_MdMcd_StampDisable	; Disable Stamps
     220/FFFFFFFFFFFF2AFA : 6100 FC0C           		bsr	System_MdMcd_CddaStop		; Stop CDDA
     223/FFFFFFFFFFFF2AFE : 6100 EEE8           		bsr	Video_MdMars_VideoOff		; Turn OFF all 32X visuals
     225/FFFFFFFFFFFF2B02 : 7000                		moveq	#0,d0
     226/FFFFFFFFFFFF2B04 : 3038 FB18           		move.w	(RAM_ScreenMode).w,d0		; Read current screen number
     227/FFFFFFFFFFFF2B08 : C07C 007F           		and.w	#$7F,d0				; <-- CURRENT LIMIT
     228/FFFFFFFFFFFF2B0C : E948                		lsl.w	#4,d0				; number * $10
     229/FFFFFFFFFFFF2B0E : 41FB 0024           		lea	.screen_list(pc,d0.w),a0		; Read list
     230/FFFFFFFFFFFF2B12 :                     	; SCD/CD32X
     232/FFFFFFFFFFFF2B12 : D0FC 0004           		adda	#4,a0				; a0 - Filename string
     233/FFFFFFFFFFFF2B16 : 6100 FA0A           		bsr	System_MdMcd_SubWait
     234/FFFFFFFFFFFF2B1A : 43F9 FFFF 2C00      		lea	(RAM_UserCode).l,a1		; a1 - Output location
     235/FFFFFFFFFFFF2B20 : 303C 8400           		move.w	#MAX_UserCode,d0		; Maximum code size
     236/FFFFFFFFFFFF2B24 : 6100 FA86           		bsr	System_MdMcd_RdFile_RAM		; Load CODE from disc
     237/FFFFFFFFFFFF2B28 : 6100 F9F8           		bsr	System_MdMcd_SubWait		; Wait Sub-CPU
     238/FFFFFFFFFFFF2B2C : 4EB9 FFFF 2C00      		jsr	(RAM_UserCode).l
     239/FFFFFFFFFFFF2B32 :                     	; 32X Cartridge
     253/FFFFFFFFFFFF2B32 : 60BE                		bra.s	Md_ReadModes			; Loop on rts
     254/FFFFFFFFFFFF2B34 :                     
     255/FFFFFFFFFFFF2B34 :                     ; ====================================================================
     256/FFFFFFFFFFFF2B34 :                     
     257/FFFFFFFFFFFF2B34 :                     		include "game/incl_list.asm"
(1)    1/FFFFFFFFFFFF2B34 :                     ; ============================================================
(1)    2/FFFFFFFFFFFF2B34 :                     ; --------------------------------------------------------
(1)    3/FFFFFFFFFFFF2B34 :                     ; SCREEN CODE jump-list sorted by ID (RAM_ScreenMode)
(1)    4/FFFFFFFFFFFF2B34 :                     ;
(1)    5/FFFFFFFFFFFF2B34 :                     ; - Screen CODE list: incl_code.asm
(1)    6/FFFFFFFFFFFF2B34 :                     ; - DATA Bank list: incl_data.asm
(1)    7/FFFFFFFFFFFF2B34 :                     ;
(1)    8/FFFFFFFFFFFF2B34 :                     ; ** For SCD/CD32X:
(1)    9/FFFFFFFFFFFF2B34 :                     ;    Go to iso_files.asm, include the label and
(1)   10/FFFFFFFFFFFF2B34 :                     ;    filename.
(1)   11/FFFFFFFFFFFF2B34 :                     ; --------------------------------------------------------
(1)   12/FFFFFFFFFFFF2B34 :                     
(1)   13/FFFFFFFFFFFF2B34 :                     .screen_list:
(1)   14/FFFFFFFFFFFF2B34 : 0003 6800           		dc.l Md_Screen00	; ROM label
(1)   15/FFFFFFFFFFFF2B38 : 5343 5245 454E      		dc.b "SCREEN00.BIN"	; ISO Filename
         FFFFFFFFFFFF2B3E : 3030 2E42 494E    
(1)   16/FFFFFFFFFFFF2B44 : 0003 6800           		dc.l Md_Screen00
(1)   17/FFFFFFFFFFFF2B48 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B4E : 3030 2E42 494E    
(1)   18/FFFFFFFFFFFF2B54 : 0003 6800           		dc.l Md_Screen00
(1)   19/FFFFFFFFFFFF2B58 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B5E : 3030 2E42 494E    
(1)   20/FFFFFFFFFFFF2B64 : 0003 6800           		dc.l Md_Screen00
(1)   21/FFFFFFFFFFFF2B68 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B6E : 3030 2E42 494E    
(1)   22/FFFFFFFFFFFF2B74 : 0003 6800           		dc.l Md_Screen00
(1)   23/FFFFFFFFFFFF2B78 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B7E : 3030 2E42 494E    
(1)   24/FFFFFFFFFFFF2B84 : 0003 6800           		dc.l Md_Screen00
(1)   25/FFFFFFFFFFFF2B88 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B8E : 3030 2E42 494E    
(1)   26/FFFFFFFFFFFF2B94 : 0003 6800           		dc.l Md_Screen00
(1)   27/FFFFFFFFFFFF2B98 : 5343 5245 454E      		dc.b "SCREEN00.BIN"
         FFFFFFFFFFFF2B9E : 3030 2E42 494E    
(1)   28/FFFFFFFFFFFF2BA4 : 0003 7000           		dc.l Md_Screen07
(1)   29/FFFFFFFFFFFF2BA8 : 5343 5245 454E      		dc.b "SCREEN07.BIN"
         FFFFFFFFFFFF2BAE : 3037 2E42 494E    
(1)   30/FFFFFFFFFFFF2BB4 : FFFF FFFF           		dc.l -1			; END-OF-LIST
(1)   31/FFFFFFFFFFFF2BB8 :                     
(1)   32/FFFFFFFFFFFF2BB8 :                     ; ============================================================
(1)   33/FFFFFFFFFFFF2BB8 :                     ; --------------------------------------------------------
(1)   34/FFFFFFFFFFFF2BB8 :                     ; SCD/CD32X ONLY:
(1)   35/FFFFFFFFFFFF2BB8 :                     ; Bank label redirects to ISO filename
(1)   36/FFFFFFFFFFFF2BB8 :                     ; --------------------------------------------------------
(1)   37/FFFFFFFFFFFF2BB8 :                     
(1)   38/FFFFFFFFFFFF2BB8 :                     disc_banklist:
(1)   39/FFFFFFFFFFFF2BB8 : 0003 8000           		dc.l DATA_BANK0		; Label
(1)   40/FFFFFFFFFFFF2BBC : 424E 4B5F 4D41      		dc.b "BNK_MAIN.BIN"	; ISO filename
         FFFFFFFFFFFF2BC2 : 494E 2E42 494E    
(1)   41/FFFFFFFFFFFF2BC8 : FFFF FFFF           		dc.l -1			; END-OF-LIST
(1)   42/FFFFFFFFFFFF2BCC :                     
     258/FFFFFFFFFFFF2BCC :                     		align 2
     259/FFFFFFFFFFFF2BCE :                     
     260/FFFFFFFFFFFF2BCE :                     ; ====================================================================
     261/FFFFFFFFFFFF2BCE :                     
     263/FFFFFFFFFFFF2BCE :                     .end:
     264/FFFFFFFFFFFF2BCE : (MACRO)              		erreport "NIKONA RAM-CODE",(.end-RAM_SystemCode),MAX_SysCode
     265/    571C :                     		dephase
     266/    571C :                     		phase (.end-RAM_SystemCode)+Md_SysCode
     268/    571C :                     
     269/    571C :                     Md_SysCode_e:
     270/    571C :                     		align 2
     271/    571C :                     
     272/    571C :                     ; ===========================================================================
     273/    571C :                     ; ----------------------------------------------------------------
     274/    571C :                     ; DATA section shared on both Cartridge or Disc
     275/    571C :                     ; ----------------------------------------------------------------
     276/    571C :                     
     277/    571C :                     ; --------------------------------------------------------
     278/    571C :                     ; CD/CD32X ISO header and files
     279/    571C :                     ; --------------------------------------------------------
     280/    571C :                     
     282/    571C :                     		align $8000
     283/    8000 :                     		binclude "nikona/mcd/fshead.bin"		; Pre-generated ISO header
     284/    B800 : (MACRO)              		fs_mkList 0,IsoFileList,IsoFileList_e		; TWO pointers to the filelist
     284/    B800 :                     .fstrt:
     284/    B800 : 22                                  dc.b .fend-.fstrt                               ; Block size
     284/    B801 : 00                                  dc.b 0                                          ; Zero
     284/    B802 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     284/    B804 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     284/    B806 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     284/    B80A : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     284/    B80C : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     284/    B80E : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     284/    B812 : 7E                                  dc.b (2025-1900)+1                              ; Year
     284/    B813 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     284/    B819 : 02                                  dc.b 2                                          ; File flags
     284/    B81A : 0000                                dc.b 0,0
     284/    B81C : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     284/    B81E : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     284/    B820 : 0100                                dc.b 1,0
     284/    B822 :                     .fend:
     285/    B822 : (MACRO)              		fs_mkList 1,IsoFileList,IsoFileList_e
     285/    B822 :                     .fstrt:
     285/    B822 : 22                                  dc.b .fend-.fstrt                               ; Block size
     285/    B823 : 00                                  dc.b 0                                          ; Zero
     285/    B824 : 1700                                dc.b (ISOFILELIST>>11&$FF),(ISOFILELIST>>19&$FF)            ; ISOFILELIST sector, little endian
     285/    B826 : 0000                                dc.b (ISOFILELIST>>27&$FF),(ISOFILELIST>>35&$FF)
     285/    B828 : 0000 0017                           dc.l ISOFILELIST>>11                                  ; ISOFILELIST sector, big endian
     285/    B82C : BC07                                dc.b ((ISOFILELIST_E-ISOFILELIST)&$FF),((ISOFILELIST_E-ISOFILELIST)>>8&$FF)     ; Filesize, little endian
     285/    B82E : 0000                                dc.b ((ISOFILELIST_E-ISOFILELIST)>>16&$FF),((ISOFILELIST_E-ISOFILELIST)>>24&$FF)
     285/    B830 : 0000 07BC                           dc.l ISOFILELIST_E-ISOFILELIST                                  ; Filesize, big endian
     285/    B834 : 7E                                  dc.b (2025-1900)+1                              ; Year
     285/    B835 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     285/    B83B : 02                                  dc.b 2                                          ; File flags
     285/    B83C : 0000                                dc.b 0,0
     285/    B83E : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     285/    B840 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     285/    B842 : 0101                                dc.b 1,1
     285/    B844 :                     .fend:
     286/    B844 :                     IsoFileList:
     287/    B844 :                     	; MAX 8 sectors of file pointers
     288/    B844 : (MACRO)              		fs_file "NKNA_SUB.BIN",MCD_SMPDATA,MCD_SMPDATA_e
     288/    B844 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     288/    B845 : 00                                  dc.b 0                                          ; zero
     288/    B846 : 1C00                                dc.b (MCD_SMPDATA>>11&$FF),(MCD_SMPDATA>>19&$FF)            ; MCD_SMPDATA sector, little
     288/    B848 : 0000                                dc.b (MCD_SMPDATA>>27&$FF),(MCD_SMPDATA>>35&$FF)
     288/    B84A : 0000 001C                           dc.l MCD_SMPDATA>>11                                  ; MCD_SMPDATA sector, big
     288/    B84E : 0008                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>8&$FF)     ; Filesize, little
     288/    B850 : 0000                                dc.b ((MCD_SMPDATA_E-MCD_SMPDATA)>>16&$FF),((MCD_SMPDATA_E-MCD_SMPDATA)>>24&$FF)
     288/    B852 : 0000 0800                           dc.l MCD_SMPDATA_E-MCD_SMPDATA                                  ; Filesize, big
     288/    B856 : 7E                                  dc.b (2025-1900)+1                              ; Year
     288/    B857 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     288/    B85D : 00                                  dc.b 0                                          ; File flags
     288/    B85E : 0000                                dc.b 0,0
     288/    B860 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     288/    B862 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     288/    B864 : 0E                                  dc.b .flend-.flen
     288/    B865 : 4E4B 4E41 5F53      .flen:          dc.b "NKNA_SUB.BIN",";1"
             B86B : 5542 2E42 494E 
             B871 : 3B31             
     288/    B873 : 00                  .flend:         dc.b 0
     288/    B874 :                     .fend:
     289/    B874 : (MACRO)              		fs_file "NKNAMARS.BIN",MARS_RAMCODE,MARS_RAMCODE_EOF
     289/    B874 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     289/    B875 : 00                                  dc.b 0                                          ; zero
     289/    B876 : 1D00                                dc.b (MARS_RAMCODE>>11&$FF),(MARS_RAMCODE>>19&$FF)            ; MARS_RAMCODE sector, little
     289/    B878 : 0000                                dc.b (MARS_RAMCODE>>27&$FF),(MARS_RAMCODE>>35&$FF)
     289/    B87A : 0000 001D                           dc.l MARS_RAMCODE>>11                                  ; MARS_RAMCODE sector, big
     289/    B87E : 0080                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>8&$FF)     ; Filesize, little
     289/    B880 : 0200                                dc.b ((MARS_RAMCODE_EOF-MARS_RAMCODE)>>16&$FF),((MARS_RAMCODE_EOF-MARS_RAMCODE)>>24&$FF)
     289/    B882 : 0002 8000                           dc.l MARS_RAMCODE_EOF-MARS_RAMCODE                                  ; Filesize, big
     289/    B886 : 7E                                  dc.b (2025-1900)+1                              ; Year
     289/    B887 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     289/    B88D : 00                                  dc.b 0                                          ; File flags
     289/    B88E : 0000                                dc.b 0,0
     289/    B890 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     289/    B892 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     289/    B894 : 0E                                  dc.b .flend-.flen
     289/    B895 : 4E4B 4E41 4D41      .flen:          dc.b "NKNAMARS.BIN",";1"
             B89B : 5253 2E42 494E 
             B8A1 : 3B31             
     289/    B8A3 : 00                  .flend:         dc.b 0
     289/    B8A4 :                     .fend:
     290/    B8A4 : (MACRO)              		fs_file "GEMA_Z80.BIN",Z80_CODE_FILE,Z80_CODE_EOF
     290/    B8A4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
     290/    B8A5 : 00                                  dc.b 0                                          ; zero
     290/    B8A6 : 1800                                dc.b (Z80_CODE_FILE>>11&$FF),(Z80_CODE_FILE>>19&$FF)            ; Z80_CODE_FILE sector, little
     290/    B8A8 : 0000                                dc.b (Z80_CODE_FILE>>27&$FF),(Z80_CODE_FILE>>35&$FF)
     290/    B8AA : 0000 0018                           dc.l Z80_CODE_FILE>>11                                  ; Z80_CODE_FILE sector, big
     290/    B8AE : 0020                                dc.b ((Z80_CODE_EOF-Z80_CODE_FILE)&$FF),((Z80_CODE_EOF-Z80_CODE_FILE)>>8&$FF)     ; Filesize, little
     290/    B8B0 : 0000                                dc.b ((Z80_CODE_EOF-Z80_CODE_FILE)>>16&$FF),((Z80_CODE_EOF-Z80_CODE_FILE)>>24&$FF)
     290/    B8B2 : 0000 2000                           dc.l Z80_CODE_EOF-Z80_CODE_FILE                                  ; Filesize, big
     290/    B8B6 : 7E                                  dc.b (2025-1900)+1                              ; Year
     290/    B8B7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
     290/    B8BD : 00                                  dc.b 0                                          ; File flags
     290/    B8BE : 0000                                dc.b 0,0
     290/    B8C0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
     290/    B8C2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
     290/    B8C4 : 0E                                  dc.b .flend-.flen
     290/    B8C5 : 4745 4D41 5F5A      .flen:          dc.b "GEMA_Z80.BIN",";1"
             B8CB : 3830 2E42 494E 
             B8D1 : 3B31             
     290/    B8D3 : 00                  .flend:         dc.b 0
     290/    B8D4 :                     .fend:
     291/    B8D4 :                     		include "game/iso_files.asm"			; User files
(1)    1/    B8D4 :                     ; ============================================================
(1)    2/    B8D4 :                     ; ----------------------------------------------------
(1)    3/    B8D4 :                     ; SCD/CD32X ONLY:
(1)    4/    B8D4 :                     ;
(1)    5/    B8D4 :                     ; Labels and filenames for the CODE and DATA banks
(1)    6/    B8D4 :                     ; ----------------------------------------------------
(1)    7/    B8D4 :                     
(1)    8/    B8D4 :                     	;fs_file "ISO_FILE.BIN",Label_Start,Lable_End
(1)    9/    B8D4 : (MACRO)              	fs_file "SCREEN00.BIN",Md_Screen00,Md_Screen00_e
(1)    9/    B8D4 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)    9/    B8D5 : 00                                  dc.b 0                                          ; zero
(1)    9/    B8D6 : 6D00                                dc.b (MD_SCREEN00>>11&$FF),(MD_SCREEN00>>19&$FF)            ; MD_SCREEN00 sector, little
(1)    9/    B8D8 : 0000                                dc.b (MD_SCREEN00>>27&$FF),(MD_SCREEN00>>35&$FF)
(1)    9/    B8DA : 0000 006D                           dc.l MD_SCREEN00>>11                                  ; MD_SCREEN00 sector, big
(1)    9/    B8DE : 0008                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>8&$FF)     ; Filesize, little
(1)    9/    B8E0 : 0000                                dc.b ((MD_SCREEN00_E-MD_SCREEN00)>>16&$FF),((MD_SCREEN00_E-MD_SCREEN00)>>24&$FF)
(1)    9/    B8E2 : 0000 0800                           dc.l MD_SCREEN00_E-MD_SCREEN00                                  ; Filesize, big
(1)    9/    B8E6 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)    9/    B8E7 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)    9/    B8ED : 00                                  dc.b 0                                          ; File flags
(1)    9/    B8EE : 0000                                dc.b 0,0
(1)    9/    B8F0 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)    9/    B8F2 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)    9/    B8F4 : 0E                                  dc.b .flend-.flen
(1)    9/    B8F5 : 5343 5245 454E      .flen:          dc.b "SCREEN00.BIN",";1"
             B8FB : 3030 2E42 494E 
             B901 : 3B31             
(1)    9/    B903 : 00                  .flend:         dc.b 0
(1)    9/    B904 :                     .fend:
(1)   10/    B904 : (MACRO)              	fs_file "SCREEN07.BIN",Md_Screen07,Md_Screen07_e
(1)   10/    B904 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   10/    B905 : 00                                  dc.b 0                                          ; zero
(1)   10/    B906 : 6E00                                dc.b (MD_SCREEN07>>11&$FF),(MD_SCREEN07>>19&$FF)            ; MD_SCREEN07 sector, little
(1)   10/    B908 : 0000                                dc.b (MD_SCREEN07>>27&$FF),(MD_SCREEN07>>35&$FF)
(1)   10/    B90A : 0000 006E                           dc.l MD_SCREEN07>>11                                  ; MD_SCREEN07 sector, big
(1)   10/    B90E : 0010                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>8&$FF)     ; Filesize, little
(1)   10/    B910 : 0000                                dc.b ((MD_SCREEN07_E-MD_SCREEN07)>>16&$FF),((MD_SCREEN07_E-MD_SCREEN07)>>24&$FF)
(1)   10/    B912 : 0000 1000                           dc.l MD_SCREEN07_E-MD_SCREEN07                                  ; Filesize, big
(1)   10/    B916 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)   10/    B917 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   10/    B91D : 00                                  dc.b 0                                          ; File flags
(1)   10/    B91E : 0000                                dc.b 0,0
(1)   10/    B920 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   10/    B922 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   10/    B924 : 0E                                  dc.b .flend-.flen
(1)   10/    B925 : 5343 5245 454E      .flen:          dc.b "SCREEN07.BIN",";1"
             B92B : 3037 2E42 494E 
             B931 : 3B31             
(1)   10/    B933 : 00                  .flend:         dc.b 0
(1)   10/    B934 :                     .fend:
(1)   11/    B934 : (MACRO)              	fs_file "BNK_MAIN.BIN",DATA_BANK0,DATA_BANK0_e
(1)   11/    B934 : 30                  .fstrt:         dc.b .fend-.fstrt                               ; Block size
(1)   11/    B935 : 00                                  dc.b 0                                          ; zero
(1)   11/    B936 : 7000                                dc.b (DATA_BANK0>>11&$FF),(DATA_BANK0>>19&$FF)            ; DATA_BANK0 sector, little
(1)   11/    B938 : 0000                                dc.b (DATA_BANK0>>27&$FF),(DATA_BANK0>>35&$FF)
(1)   11/    B93A : 0000 0070                           dc.l DATA_BANK0>>11                                  ; DATA_BANK0 sector, big
(1)   11/    B93E : 00B8                                dc.b ((DATA_BANK0_E-DATA_BANK0)&$FF),((DATA_BANK0_E-DATA_BANK0)>>8&$FF)     ; Filesize, little
(1)   11/    B940 : 0200                                dc.b ((DATA_BANK0_E-DATA_BANK0)>>16&$FF),((DATA_BANK0_E-DATA_BANK0)>>24&$FF)
(1)   11/    B942 : 0002 B800                           dc.l DATA_BANK0_E-DATA_BANK0                                  ; Filesize, big
(1)   11/    B946 : 7E                                  dc.b (2025-1900)+1                              ; Year
(1)   11/    B947 : 0000 0000 0000                      dc.b 0,0,0,0,0,0                                ; (filler)
(1)   11/    B94D : 00                                  dc.b 0                                          ; File flags
(1)   11/    B94E : 0000                                dc.b 0,0
(1)   11/    B950 : 0100                                dc.b 1,0                                        ; Volume sequence number, little
(1)   11/    B952 : 0001                                dc.b 0,1                                        ; Volume sequence number, big
(1)   11/    B954 : 0E                                  dc.b .flend-.flen
(1)   11/    B955 : 424E 4B5F 4D41      .flen:          dc.b "BNK_MAIN.BIN",";1"
             B95B : 494E 2E42 494E 
             B961 : 3B31             
(1)   11/    B963 : 00                  .flend:         dc.b 0
(1)   11/    B964 :                     .fend:
(1)   12/    B964 :                     
     292/    B964 :                     		align $800
     293/    C000 :                     IsoFileList_e:
     295/    C000 :                     
     296/    C000 :                     ; ===========================================================================
     297/    C000 :                     ; --------------------------------------------------------
     298/    C000 :                     ; Z80 driver include
     299/    C000 :                     ;
     300/    C000 :                     ; SCD/CD32X: Stored on DISC
     301/    C000 :                     ; --------------------------------------------------------
     302/    C000 :                     
     304/    C000 :                     		align $800
     305/    C000 :                     Z80_CODE_FILE:
     306/  200000 :                     		phase sysmcd_wram
     310/  200000 :                     Z80_CODE:
     314/  200000 :                     		include "sound/drv/gema_zdrv.asm"
(1)    1/  200000 :                     ; ===========================================================================
(1)    2/  200000 :                     ; -------------------------------------------------------------------
(1)    3/  200000 :                     ; GEMA Z80 code
(1)    4/  200000 :                     ; -------------------------------------------------------------------
(1)    5/  200000 :                     
(1)    6/       0 :                     		phase 0
(1)    7/       0 :                     		cpu Z80		; Enter Z80 CPU
(1)    8/       0 :                     
(1)    9/       0 :                     ; --------------------------------------------------------
(1)   10/       0 :                     ; SETTINGS
(1)   11/       0 :                     ; --------------------------------------------------------
(1)   12/       0 :                     
(1)   13/       0 :                     ; !! = HARDCODED
(1)   14/       0 : =9H                  MAX_TRFRPZ	equ 9		; !! Max readRom packets(bytes) **AFFECTS WAVE QUALITY**
(1)   15/       0 : =20H                 MAX_TRKCHN	equ 32		; !! Max internal shared tracker channel slots *** MSB alinged ***
(1)   16/       0 : =20H                 MAX_RCACH	equ 20h		; !! Max storage for ROM pattern data *** 1-BIT SIZES ONLY, MUST BE LSB ALIGNED ***
(1)   17/       0 : =8H                  MAX_BUFFNTRY	equ 4*2		; !! nikona_BuffList buffer entry size **HARDCODED
(1)   18/       0 : =3H                  MAX_SLOTS	equ 3		; !! Number of track buffers
(1)   19/       0 : =20H                 MAX_ZCMND	equ 20h		; !! Size of command array ** 1-bit SIZES ONLY ** (68k uses this label too)
(1)   20/       0 : =12H                 MAX_TBLSIZE	equ 12h		; Maximum size for chip table arrays
(1)   21/       0 : =1AH                 MAX_TRKINDX	equ 26		; Max channel indexes per buffer: 4PSG+6FM+8PCM+8PWM
(1)   22/       0 :                     
(1)   23/       0 :                     ; --------------------------------------------------------
(1)   24/       0 :                     ; Structs
(1)   25/       0 :                     ; --------------------------------------------------------
(1)   26/       0 :                     
(1)   27/       0 :                     ; trkBuff struct
(1)   28/       0 :                     ;
(1)   29/       0 :                     ; seq_Status: %ERP- V--0
(1)   30/       0 :                     ; E - enabled
(1)   31/       0 :                     ; R - Init|Restart track
(1)   32/       0 :                     ; P - refill-on-playback
(1)   33/       0 :                     ; V - volume change flag
(1)   34/       0 :                     ; 0 - Use global sub-beats
(1)   35/       0 : =0H                  seq_Status	equ 00h	; ** Slot Status and flags (MUST BE at 00h)
(1)   36/       0 : =1H                  seq_Num		equ 01h ; ** Sequence number
(1)   37/       0 : =2H                  seq_SetBlk	equ 02h	; ** Start on this block
(1)   38/       0 : =3H                  seq_TickSet	equ 03h	; ** Ticks for this track
(1)   39/       0 : =4H                  seq_Blocks	equ 04h ; ** [W] Current track's blocks
(1)   40/       0 : =6H                  seq_Patt	equ 06h ; ** [W] Current track's heads and patterns
(1)   41/       0 : =8H                  seq_Cach	equ 08h	; ** [W] Current track's cache notedata
(1)   42/       0 : =0AH                 seq_Read	equ 0Ah	; [W] Track current pattern read
(1)   43/       0 : =0CH                 seq_Rows	equ 0Ch	; [W] Track row counter
(1)   44/       0 : =0EH                 seq_VolMaster	equ 0Eh ; [W] Master volume for this track slot (00-max), +80h update
(1)   45/       0 : =10H                 seq_cachHalf	equ 10h ; ROM-cache halfcheck
(1)   46/       0 : =11H                 seq_rowPause	equ 11h	; Row-pause timer
(1)   47/       0 : =12H                 seq_TickTmr	equ 12h	; Ticks timer
(1)   48/       0 : =13H                 seq_currBlk	equ 13h	; Current block
(1)   49/       0 : =14H                 seq_Priority	equ 14h ; Priority level for this buffer
(1)   50/       0 : =15H                 seq_BankHeads	equ 15h ; Header bank
(1)   51/       0 : =16H                 seq_BankBlk	equ 16h	; Block bank
(1)   52/       0 : =17H                 seq_MaxChnl	equ 17h ; MAX channels used in this track
(1)   53/       0 : =18H                 seq_VolFdTarget	equ 18h	; Target fade volume
(1)   54/       0 : =19H                 seq_RomPattRead	equ 19h ; [3b] ROM current pattern data to be cache'd
(1)   55/       0 : =1CH                 seq_RomPatt	equ 1Ch ; [3b] ROM BASE pattern data
(1)   56/       0 : =1FH                 seq_RomInst	equ 1Fh ; [3b] ROM instrument data
(1)   57/       0 : =22H                 seq_RomBlks	equ 22h ; [3b] ROM blocks data
(1)   58/       0 : =25H                 seq_ChnIndx	equ 25h	; CHANNEL INDEXING START HERE
(1)   59/       0 :                     
(1)   60/       0 :                     ; chnBuff struct, 8 BYTES ONLY.
(1)   61/       0 :                     ;
(1)   62/       0 :                     ; chnl_Flags: E0LRevin
(1)   63/       0 :                     ; 	 E - Channel is active
(1)   64/       0 :                     ; 	LR - 1-bit Left/Right panning bits: 0-ON 1-OFF
(1)   65/       0 :                     ; 	 e - Effect*
(1)   66/       0 :                     ; 	 v - Volume*
(1)   67/       0 :                     ; 	 i - Intrument*
(1)   68/       0 :                     ; 	 n - Note*
(1)   69/       0 :                     
(1)   70/       0 : =0H                  chnl_Flags	equ 0	; !! Playback flags: %E0LRevin ** MUST BE LOCATED AT 0 **
(1)   71/       0 : =1H                  chnl_Chip	equ 1	; %ccccpppp c - Current Chip ID / p - Priority level
(1)   72/       0 : =2H                  chnl_Note	equ 2	; IT Music note or command
(1)   73/       0 : =3H                  chnl_Ins	equ 3	; IT Instrument starting from 1 (0 is invalid)
(1)   74/       0 : =4H                  chnl_Vol	equ 4	; IT Volume: MAX(64) to MIN(0)
(1)   75/       0 : =5H                  chnl_EffId	equ 5	; IT Effect number
(1)   76/       0 : =6H                  chnl_EffArg	equ 6	; IT Effect argument
(1)   77/       0 : =7H                  chnl_Type	equ 7	; Impulse type bits
(1)   78/       0 :                     
(1)   79/       0 :                     
(1)   80/       0 :                     ; Table struct
(1)   81/       0 : =0H                  ztbl_Link	equ 00h			; !! current linked channel in trkChnls
(1)   82/       0 : =2H                  ztbl_Priority	equ 02h			; !! 00h-7Fh: Priority level 0-15 + 80h+chipID Silence request
(1)   83/       0 : =3H                  ztbl_Chip	equ 03h			; !! Chip index (YM2612: direct index) *MUST BE ON THE LIST*
(1)   84/       0 : =4H                  ztbl_MasterVol	equ 04h			; MASTER volume for this channel
(1)   85/       0 : =5H                  ztbl_FreqIndx	equ 05h			; Frequency list index (YM2612: %oooiiiii oct|index)
(1)   86/       0 : =6H                  ztbl_PitchBend	equ 06h			; Pitchbend incr/decr
(1)   87/       0 : =7H                  ztbl_Volume	equ 07h			; Current Volume: 00-max
(1)   88/       0 : =8H                  ztbl_VolSlide	equ 08h			; Volume slide incr/decr
(1)   89/       0 : =0AH                 ztbl_InstCach	equ 0Ah			; <-- 8 bytes
(1)   90/       0 :                     
(1)   91/       0 :                     ; --------------------------------------------------------
(1)   92/       0 :                     ; Variables
(1)   93/       0 :                     ; --------------------------------------------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Z80 opcode labels for the wave playback routines
(1)   96/       0 : =0H                  zopcNop		equ 00h
(1)   97/       0 : =8H                  zopcEx		equ 08h
(1)   98/       0 : =0C9H                zopcRet		equ 0C9h
(1)   99/       0 : =0D9H                zopcExx		equ 0D9h		; (dac_me ONLY)
(1)  100/       0 : =0F5H                zopcPushAf	equ 0F5h		; (dac_fill ONLY)
(1)  101/       0 :                     
(1)  102/       0 :                     ; PSG
(1)  103/       0 : =0H                  COM		equ 0
(1)  104/       0 : =4H                  LEV		equ 4
(1)  105/       0 : =8H                  ATK		equ 8
(1)  106/       0 : =0CH                 DKY		equ 12
(1)  107/       0 : =10H                 SLV		equ 16
(1)  108/       0 : =14H                 RRT		equ 20
(1)  109/       0 : =18H                 MODE		equ 24
(1)  110/       0 : =1CH                 DTL		equ 28
(1)  111/       0 : =20H                 DTH		equ 32
(1)  112/       0 : =24H                 ALV		equ 36
(1)  113/       0 : =28H                 FLG		equ 40
(1)  114/       0 : =2CH                 ARP		equ 44
(1)  115/       0 : =30H                 MVOL		equ 48
(1)  116/       0 : =34H                 EFFV		equ 52
(1)  117/       0 : =38H                 PTMR		equ 56
(1)  118/       0 :                     
(1)  119/       0 :                     ; ====================================================================
(1)  120/       0 :                     ; --------------------------------------------------------
(1)  121/       0 :                     ; Code starts here
(1)  122/       0 :                     ; --------------------------------------------------------
(1)  123/       0 :                     
(1)  124/       0 : F3                  		di			; Disable interrupts
(1)  125/       1 : ED 56               		im	1		; Interrupt mode 1
(1)  126/       3 : 31 00 20            		ld	sp,2000h	; Set STACK at the end of Z80
(1)  127/       6 : 18 36               		jr	z80_init	; Jump to z80_init
(1)  128/       8 :                     
(1)  129/       8 :                     ; --------------------------------------------------------
(1)  130/       8 :                     ; RST 8 (dac_me)
(1)  131/       8 :                     ;
(1)  132/       8 :                     ; Writes wave data to DAC using data stored
(1)  133/       8 :                     ; on the wave buffer, call this routine every 6 or 8
(1)  134/       8 :                     ; instructions to keep the samplerate stable.
(1)  135/       8 :                     ;
(1)  136/       8 :                     ; Input (EXX):
(1)  137/       8 :                     ;  c - WAVE buffer MSB
(1)  138/       8 :                     ; de - Pitch (xx.00)
(1)  139/       8 :                     ; h  - WAVE buffer LSB (as xx.00)
(1)  140/       8 :                     ;
(1)  141/       8 :                     ; Uses (EXX):
(1)  142/       8 :                     ; b
(1)  143/       8 :                     ;
(1)  144/       8 :                     ; Notes:
(1)  145/       8 :                     ; ONLY USE dac_on and dac_off to turn OFF/ON
(1)  146/       8 :                     ; DAC playback
(1)  147/       8 :                     ;
(1)  148/       8 :                     ; Samplerate is 16000hz with minimal quality loss.
(1)  149/       8 :                     ; --------------------------------------------------------
(1)  150/       8 :                     
(1)  151/       8 :                     ; EXX set:
(1)  152/       8 :                     ; af - temporal
(1)  153/       8 :                     ; bc - l temporal | dWaveBuff MSB
(1)  154/       8 :                     ; de - pitch increment
(1)  155/       8 :                     ; hl - wave buffer position 00.00h
(1)  156/       8 :                     		org 8
(1)  157/       8 : D9                  dac_me:		exx			; * flip registers | Changes between EXX(play) and RET(stop)
(1)  158/       9 : 08                  		ex	af,af'		; Swap af
(1)  159/       A : 45                  		ld	b,l		; Save old hl buff
(1)  160/       B : 6C                  		ld	l,h		;
(1)  161/       C : 61                  		ld	h,c		; h - Set buffer MSB
(1)  162/       D : 3E 2A               		ld	a,2Ah		;
(1)  163/       F : 32 00 40            		ld	(Zym_ctrl_1),a	; Set YM Register 2Ah
(1)  164/      12 : 7E                  		ld	a,(hl)		; Read wave byte and
(1)  165/      13 : 32 01 40            		ld	(Zym_data_1),a	; write it to DAC
(1)  166/      16 : 65                  		ld	h,l		; Get hl buff back
(1)  167/      17 : 68                  		ld	l,b		;
(1)  168/      18 : 19                  		add	hl,de		; Pitch increment hl
(1)  169/      19 : 08                  		ex	af,af'		; Return af
(1)  170/      1A : D9                  		exx			; * return regs
(1)  171/      1B : C9                  		ret
(1)  172/      1C :                     
(1)  173/      1C :                     ; --------------------------------------------------------
(1)  174/      1C :                     ; 1Ch - Master tracklist pointer
(1)  175/      1C :                     gemaMstrListPos:
(1)  176/      1C : 00                  		db 0			; ** 32-bit 68k address **
(1)  177/      1D : 00                  		db 0
(1)  178/      1E : 00                  		db 0
(1)  179/      1F : 00                  		db 0
(1)  180/      20 :                     
(1)  181/      20 :                     ; --------------------------------------------------------
(1)  182/      20 :                     ; RST 20h (dac_me)
(1)  183/      20 :                     ; *** self-modifiable code ***
(1)  184/      20 :                     ;
(1)  185/      20 :                     ; Checks if the WAVE cache needs refilling to keep
(1)  186/      20 :                     ; it playing.
(1)  187/      20 :                     ; --------------------------------------------------------
(1)  188/      20 :                     
(1)  189/      20 :                     		org 20h
(1)  190/      20 : F5                  dac_fill:	push	af		; Save af | Changes between PUSH AF(play) and RET(stop)
(1)  191/      21 : 3A 37 00            		ld	a,(dDacFifoMid)	; a - Get half-way value
(1)  192/      24 : D9                  		exx			; * flip registers
(1)  193/      25 : AC                  		xor	h		; Grab LSB.00
(1)  194/      26 : D9                  		exx			; * restore regs
(1)  195/      27 : E6 80               		and	80h		; Check if LSB 7th bit changed
(1)  196/      29 : C4 73 14            		call	nz,dac_refill	; If yes, call refill and update LSB
(1)  197/      2C : F1                  		pop	af		; Restore af
(1)  198/      2D : C9                  		ret
(1)  199/      2E :                     
(1)  200/      2E :                     ; --------------------------------------------------------
(1)  201/      2E :                     ; 02Eh - User read/write values
(1)  202/      2E :                     
(1)  203/      2E : 00                  commZRead	db 0			; cmd fifo READ pointer (here)
(1)  204/      2F : 00                  psgHatMode	db 0			; Current PSGN mode
(1)  205/      30 : 00                  fmSpecial	db 0			; copy of FM3 enable bit
(1)  206/      31 : 00 00               sbeatAcc	dw 0			; Accumulates on each tick to trigger the sub beats
(1)  207/      33 : D6 00               sbeatPtck	dw 214			; Default global subbeats (this-32 for PAL) 214=125
(1)  208/      35 : 00                  x68ksrclsb	db 0			; readRom temporal LSB
(1)  209/      36 : 00                  x68ksrcmid	db 0			; readRom temporal MID
(1)  210/      37 : 00                  dDacFifoMid	db 0			; WAVE play halfway refill flag (00h/80h)
(1)  211/      38 :                     
(1)  212/      38 :                     ; --------------------------------------------------------
(1)  213/      38 :                     ; Z80 Interrupt at 0038h
(1)  214/      38 :                     ; --------------------------------------------------------
(1)  215/      38 :                     
(1)  216/      38 :                     		org 38h				; Align 38h
(1)  217/      38 : ED 73 F6 1C         		ld	(tickSpSet),sp		; Write TICK flag using current sp (read tickFlag only)
(1)  218/      3C : F3                  		di				; Disable interrupt
(1)  219/      3D : C9                  		ret
(1)  220/      3E :                     
(1)  221/      3E :                     ; --------------------------------------------------------
(1)  222/      3E :                     ; Initialize
(1)  223/      3E :                     ; --------------------------------------------------------
(1)  224/      3E :                     
(1)  225/      3E :                     z80_init:
(1)  226/      3E : CD 4B 11            		call	gema_init		; Init values
(1)  227/      41 :                     
(1)  228/      41 :                     ; --------------------------------------------------------
(1)  229/      41 :                     ; MAIN LOOP
(1)  230/      41 :                     ; --------------------------------------------------------
(1)  231/      41 :                     
(1)  232/      41 :                     drv_loop:
(1)  233/      41 : CF                  		rst	8
(1)  234/      42 : CD BD 11            		call	get_tick		; Check tick on VBlank
(1)  235/      45 : E7                  		rst	20h			; Refill wave here
(1)  236/      46 : CF                  		rst	8
(1)  237/      47 : 06 00               		ld	b,0			; b - Reset current flags (beat|tick)
(1)  238/      49 : 3A F8 1C            		ld	a,(tickCnt)		; Decrement tick counter
(1)  239/      4C : D6 01               		sub	1
(1)  240/      4E : 38 0B               		jr	c,.noticks		; If non-zero, no tick passed.
(1)  241/      50 : 32 F8 1C            		ld	(tickCnt),a
(1)  242/      53 : CD 95 12            		call	chip_env		; Process PSG and YM
(1)  243/      56 : CD BD 11            		call	get_tick		; Check for another tick
(1)  244/      59 : 06 01               		ld 	b,01b			; Set TICK and clear BEAT flags (01b)
(1)  245/      5B :                     .noticks:
(1)  246/      5B : 3A 32 00            		ld	a,(sbeatAcc+1)		; check beat counter (scaled by tempo)
(1)  247/      5E : D6 01               		sub	1
(1)  248/      60 : 38 06               		jr	c,.nobeats
(1)  249/      62 : CF                  		rst	8
(1)  250/      63 : 32 32 00            		ld	(sbeatAcc+1),a		; 1/24 beat passed.
(1)  251/      66 : CB C8               		set	1,b			; Set BEAT (10b) flag
(1)  252/      68 :                     .nobeats:
(1)  253/      68 : CF                  		rst	8
(1)  254/      69 : 78                  		ld	a,b			; Any beat/tick bits set?
(1)  255/      6A : B7                  		or	a
(1)  256/      6B : 28 15               		jr	z,.neither
(1)  257/      6D : 32 F9 1C            		ld	(currTickBits),a	; Save BEAT/TICK bits
(1)  258/      70 : E7                  		rst	20h
(1)  259/      71 : CF                  		rst	8
(1)  260/      72 : CD BD 11            		call	get_tick
(1)  261/      75 : CD FE 05            		call	set_chips		; Process sound chips
(1)  262/      78 : CD BD 11            		call	get_tick
(1)  263/      7B : CF                  		rst	8
(1)  264/      7C : CD 26 02            		call	upd_seq			; Read sequences
(1)  265/      7F : CD BD 11            		call	get_tick
(1)  266/      82 :                     .neither:
(1)  267/      82 : E7                  		rst	20h
(1)  269/      83 : CF                  		rst	8
(1)  270/      84 : CD 1D 10            		call	zmars_send		; External communication with SCD and 32X
(1)  271/      87 : CD BD 11            		call	get_tick
(1)  272/      8A : CF                  		rst	8
(1)  281/      8B :                     .next_cmd:
(1)  282/      8B : 3A 80 1F            		ld	a,(commZWrite)		; Check if commZ R/W indexes
(1)  283/      8E : 47                  		ld	b,a			; are in the same spot a == b
(1)  284/      8F : 3A 2E 00            		ld	a,(commZRead)
(1)  285/      92 : B8                  		cp	b			; If equal, no changes.
(1)  286/      93 : 28 AC               		jr	z,drv_loop
(1)  287/      95 : CF                  		rst	8
(1)  288/      96 : CD AE 00            		call	.grab_arg		; Get command start flag -1
(1)  289/      99 : FE FF               		cp	-1
(1)  290/      9B : 20 A4               		jr	nz,drv_loop		; If not, end of command
(1)  291/      9D : CD AE 00            		call	.grab_arg		; Read command number
(1)  292/      A0 : 87                  		add	a,a			; num*2
(1)  293/      A1 : 21 CD 00            		ld	hl,.list		; Index-jump
(1)  294/      A4 : 16 00               		ld	d,0
(1)  295/      A6 : 5F                  		ld	e,a
(1)  296/      A7 : 19                  		add	hl,de
(1)  297/      A8 : 7E                  		ld	a,(hl)
(1)  298/      A9 : 23                  		inc	hl
(1)  299/      AA : 66                  		ld	h,(hl)
(1)  300/      AB : CF                  		rst	8
(1)  301/      AC : 6F                  		ld	l,a
(1)  302/      AD : E9                  		jp	(hl)			; Jump to label
(1)  303/      AE :                     
(1)  304/      AE :                     ; --------------------------------------------------------
(1)  305/      AE :                     ; Read cmd byte
(1)  306/      AE :                     ; --------------------------------------------------------
(1)  307/      AE :                     
(1)  308/      AE :                     .grab_arg:
(1)  309/      AE : D5                  		push	de
(1)  310/      AF : E5                  		push	hl
(1)  311/      B0 :                     .getcbytel:
(1)  312/      B0 : 3A 80 1F            		ld	a,(commZWrite)
(1)  313/      B3 : 57                  		ld	d,a
(1)  314/      B4 : CF                  		rst	8
(1)  315/      B5 : 3A 2E 00            		ld	a,(commZRead)
(1)  316/      B8 : BA                  		cp	d			; commZ R/W indexes are the same?
(1)  317/      B9 : 28 F5               		jr	z,.getcbytel		; wait until these counters change.
(1)  318/      BB : 16 00               		ld	d,0
(1)  319/      BD : 5F                  		ld	e,a
(1)  320/      BE : 21 60 1F            		ld	hl,commZfifo		; Read commZ list + index
(1)  321/      C1 : 19                  		add	hl,de
(1)  322/      C2 : CF                  		rst	8
(1)  323/      C3 : 3C                  		inc	a
(1)  324/      C4 : E6 1F               		and	MAX_ZCMND-1		; ** commZ list buffer limit
(1)  325/      C6 : 32 2E 00            		ld	(commZRead),a
(1)  326/      C9 : 7E                  		ld	a,(hl)			; a - got this byte from the buffer
(1)  327/      CA : E1                  		pop	hl
(1)  328/      CB : D1                  		pop	de
(1)  329/      CC : C9                  		ret
(1)  330/      CD :                     
(1)  331/      CD :                     ; --------------------------------------------------------
(1)  332/      CD :                     
(1)  333/      CD :                     .list:
(1)  334/      CD : DD 00               		dw .cmnd_0		; 00h - TESTING
(1)  335/      CF : E0 00               		dw .cmnd_1		; 01h - Set Master tracklist
(1)  336/      D1 : F9 00               		dw .cmnd_2		; 02h - Play by track number
(1)  337/      D3 : 33 01               		dw .cmnd_3		; 03h - Stop by track number
(1)  338/      D5 : DD 00               		dw .cmnd_0		; 04h - (free)
(1)  339/      D7 : 71 01               		dw .cmnd_5		; 05h - Fade volume (FadeIn/FadeOut)
(1)  340/      D9 : AA 01               		dw .cmnd_6		; 06h - Set maximum volume to slot
(1)  341/      DB : E3 01               		dw .cmnd_7		; 07h - Set GLOBAL sub-beats
(1)  342/      DD :                     
(1)  343/      DD :                     ; --------------------------------------------------------
(1)  344/      DD :                     ; Command 00h
(1)  345/      DD :                     ;
(1)  346/      DD :                     ; Reserved for TESTING purposes.
(1)  347/      DD :                     ; --------------------------------------------------------
(1)  348/      DD :                     
(1)  349/      DD :                     .cmnd_0:
(1)  350/      DD : C3 8B 00            		jp	.next_cmd
(1)  351/      E0 :                     
(1)  352/      E0 :                     ; --------------------------------------------------------
(1)  353/      E0 :                     ; Command 01h:
(1)  354/      E0 :                     ;
(1)  355/      E0 :                     ; Set the Track MASTER-list.
(1)  356/      E0 :                     ; --------------------------------------------------------
(1)  357/      E0 :                     
(1)  358/      E0 :                     .cmnd_1:
(1)  359/      E0 : 21 1F 00            		ld	hl,gemaMstrListPos+3	; 32-bit big endian
(1)  360/      E3 : CD AE 00            		call	.grab_arg		; $000000xx
(1)  361/      E6 : 77                  		ld	(hl),a
(1)  362/      E7 : 2B                  		dec	hl
(1)  363/      E8 : CD AE 00            		call	.grab_arg		; $0000xx00
(1)  364/      EB : 77                  		ld	(hl),a
(1)  365/      EC : 2B                  		dec	hl
(1)  366/      ED : CD AE 00            		call	.grab_arg		; $00xx0000
(1)  367/      F0 : 77                  		ld	(hl),a
(1)  368/      F1 : 2B                  		dec	hl
(1)  369/      F2 : CD AE 00            		call	.grab_arg		; $xx000000 (filler)
(1)  370/      F5 : 77                  		ld	(hl),a
(1)  371/      F6 : C3 8B 00            		jp	.next_cmd
(1)  372/      F9 :                     
(1)  373/      F9 :                     ; --------------------------------------------------------
(1)  374/      F9 :                     ; Command 02h:
(1)  375/      F9 :                     ;
(1)  376/      F9 :                     ; Make new track by sequence number
(1)  377/      F9 :                     ;
(1)  378/      F9 :                     ; SeqID, BlockPos, SlotIndex(If -1 autofill)
(1)  379/      F9 :                     ; --------------------------------------------------------
(1)  380/      F9 :                     
(1)  381/      F9 :                     .cmnd_2:
(1)  382/      F9 : CD AE 00            		call	.grab_arg		; d1: Sequence ID
(1)  383/      FC : 4F                  		ld	c,a			; copy to c
(1)  384/      FD : CD AE 00            		call	.grab_arg		; d2: Block from
(1)  385/     100 : 47                  		ld	b,a			; copy to b
(1)  386/     101 : CF                  		rst	8
(1)  387/     102 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  388/     105 : FD 21 04 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  389/     109 : B7                  		or	a
(1)  390/     10A : FA 19 01            		jp	m,.srch_mode		; If negative, search for all with same ID
(1)  391/     10D : FE 03               		cp	MAX_SLOTS
(1)  392/     10F : D2 8B 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  393/     112 : CF                  		rst	8
(1)  394/     113 : CD 01 02            		call	.cmnd_rdslot
(1)  395/     116 : C3 28 01            		jp	.wrtto_slot
(1)  396/     119 :                     ; -1
(1)  397/     119 :                     .srch_mode:
(1)  398/     119 : CD 13 02            		call	.srch_slot		; Read this slot
(1)  399/     11C : FE FF               		cp	-1
(1)  400/     11E : CA 8B 00            		jp	z,.next_cmd		; if -1, exit.
(1)  401/     121 : CB 7E               		bit	7,(hl)			; Is this track active?
(1)  402/     123 : CA 28 01            		jp	z,.wrtto_slot
(1)  403/     126 : 18 F1               		jr	.srch_mode		; Check next one
(1)  404/     128 :                     .wrtto_slot:
(1)  405/     128 : 36 C0               		ld	(hl),11000000b		; ** Write seq_Status (Enable+FirstFill)
(1)  406/     12A : 23                  		inc	hl
(1)  407/     12B : CF                  		rst	8
(1)  408/     12C : 71                  		ld	(hl),c			; ** seq_Num
(1)  409/     12D : 23                  		inc	hl
(1)  410/     12E : 70                  		ld	(hl),b			; ** seq_SetBlk
(1)  411/     12F : 79                  		ld	a,c
(1)  412/     130 : C3 8B 00            		jp	.next_cmd
(1)  413/     133 :                     
(1)  414/     133 :                     ; --------------------------------------------------------
(1)  415/     133 :                     ; Command 03h:
(1)  416/     133 :                     ;
(1)  417/     133 :                     ; Stop track with the same sequence number
(1)  418/     133 :                     ;
(1)  419/     133 :                     ; SeqID,SlotIndex(If -1, stop all)
(1)  420/     133 :                     ; --------------------------------------------------------
(1)  421/     133 :                     
(1)  422/     133 :                     .cmnd_3:
(1)  423/     133 : CD AE 00            		call	.grab_arg		; d1: Sequence ID
(1)  424/     136 : 4F                  		ld	c,a			; copy to c
(1)  425/     137 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  426/     13A : FD 21 04 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  427/     13E : B7                  		or	a
(1)  428/     13F : FA 51 01            		jp	m,.srch_del		; If negative, search for all with same ID
(1)  429/     142 : FE 03               		cp	MAX_SLOTS
(1)  430/     144 : D2 8B 00            		jp	nc,.next_cmd		; Exit if maxed out slots
(1)  431/     147 : CF                  		rst	8
(1)  432/     148 : CD 01 02            		call	.cmnd_rdslot
(1)  433/     14B : CD 5E 01            		call	.wrtto_del
(1)  434/     14E : C3 8B 00            		jp	.next_cmd
(1)  435/     151 :                     ; -1
(1)  436/     151 :                     .srch_del:
(1)  437/     151 : CD 13 02            		call	.srch_slot		; Read this slot
(1)  438/     154 : FE FF               		cp	-1
(1)  439/     156 : CA 8B 00            		jp	z,.next_cmd		; if -1, exit.
(1)  440/     159 : CD 5E 01            		call	.wrtto_del
(1)  441/     15C : 18 F3               		jr	.srch_del
(1)  442/     15E :                     .wrtto_del:
(1)  443/     15E : CB 7E               		bit	7,(hl)			; Slot is active?
(1)  444/     160 : C8                  		ret	z
(1)  445/     161 : CB 79               		bit	7,c			; seq is -1? (lazy bit check)
(1)  446/     163 : 20 05               		jr	nz,.del_all
(1)  447/     165 : DD 7E 01            		ld	a,(ix+seq_Num)
(1)  448/     168 : B9                  		cp	c			; Is this the same seq?
(1)  449/     169 : C0                  		ret	nz			; Return if not.
(1)  450/     16A :                     .del_all:
(1)  451/     16A : 36 FF               		ld	(hl),-1			; stop channel and clear slot
(1)  452/     16C : 23                  		inc	hl
(1)  453/     16D : 36 FF               		ld	(hl),-1			; Reset seqId
(1)  454/     16F : CF                  		rst	8
(1)  455/     170 : C9                  		ret
(1)  456/     171 :                     
(1)  457/     171 :                     ; --------------------------------------------------------
(1)  458/     171 :                     ; Command 05h:
(1)  459/     171 :                     ;
(1)  460/     171 :                     ; Fade volume (FadeIn/FadeOut)
(1)  461/     171 :                     ;
(1)  462/     171 :                     ; Arguments:
(1)  463/     171 :                     ; TargetVol,SlotIndex(If -1 autofill)
(1)  464/     171 :                     ; --------------------------------------------------------
(1)  465/     171 :                     
(1)  466/     171 :                     .cmnd_5:
(1)  467/     171 : CD AE 00            		call	.grab_arg		; d1: Master volume
(1)  468/     174 : 4F                  		ld	c,a			; copy to c
(1)  469/     175 : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  470/     178 : FD 21 04 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  471/     17C : B7                  		or	a
(1)  472/     17D : FA 8F 01            		jp	m,.srch_fvol		; if -1, search for all with same ID
(1)  473/     180 : FE 03               		cp	MAX_SLOTS
(1)  474/     182 : D2 8B 00            		jp	nc,.next_cmd		; Exit If maxed out slots
(1)  475/     185 : CF                  		rst	8
(1)  476/     186 : CD 01 02            		call	.cmnd_rdslot
(1)  477/     189 : CD 9C 01            		call	.wrtto_fvol
(1)  478/     18C : C3 8B 00            		jp	.next_cmd
(1)  479/     18F :                     ; -1
(1)  480/     18F :                     .srch_fvol:
(1)  481/     18F : CD 13 02            		call	.srch_slot
(1)  482/     192 : FE FF               		cp	-1
(1)  483/     194 : CA 8B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  484/     197 : CD 9C 01            		call	.wrtto_fvol
(1)  485/     19A : 18 F3               		jr	.srch_fvol
(1)  486/     19C :                     .wrtto_fvol:
(1)  487/     19C : CB 7E               		bit	7,(hl)			; Active?
(1)  488/     19E : C8                  		ret	z
(1)  489/     19F : CB DE               		set	3,(hl)			; Volume update flag
(1)  490/     1A1 : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  491/     1A4 : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  492/     1A8 : CF                  		rst	8
(1)  493/     1A9 : C9                  		ret
(1)  494/     1AA :                     
(1)  495/     1AA :                     ; --------------------------------------------------------
(1)  496/     1AA :                     ; Command 06h:
(1)  497/     1AA :                     ;
(1)  498/     1AA :                     ; Set track's master volume
(1)  499/     1AA :                     ;
(1)  500/     1AA :                     ; Arguments:
(1)  501/     1AA :                     ; MasterVol,SlotIndex(If -1 autofill)
(1)  502/     1AA :                     ; --------------------------------------------------------
(1)  503/     1AA :                     
(1)  504/     1AA :                     .cmnd_6:
(1)  505/     1AA : CD AE 00            		call	.grab_arg		; d1: Master volume
(1)  506/     1AD : 4F                  		ld	c,a			; copy to c
(1)  507/     1AE : CD AE 00            		call	.grab_arg		; d0: Slot index
(1)  508/     1B1 : FD 21 04 1A         		ld	iy,nikona_BuffList	; iy - Slot buffer list
(1)  509/     1B5 : B7                  		or	a
(1)  510/     1B6 : FA C8 01            		jp	m,.srch_vol		; if -1, search for all with same ID
(1)  511/     1B9 : FE 03               		cp	MAX_SLOTS		; If maxed out slots
(1)  512/     1BB : D2 8B 00            		jp	nc,.next_cmd
(1)  513/     1BE : CF                  		rst	8
(1)  514/     1BF : CD 01 02            		call	.cmnd_rdslot
(1)  515/     1C2 : CD D5 01            		call	.wrtto_vol
(1)  516/     1C5 : C3 8B 00            		jp	.next_cmd
(1)  517/     1C8 :                     ; -1
(1)  518/     1C8 :                     .srch_vol:
(1)  519/     1C8 : CD 13 02            		call	.srch_slot
(1)  520/     1CB : FE FF               		cp	-1
(1)  521/     1CD : CA 8B 00            		jp	z,.next_cmd		; Then skip, no free slot.
(1)  522/     1D0 : CD D5 01            		call	.wrtto_vol
(1)  523/     1D3 : 18 F3               		jr	.srch_vol
(1)  524/     1D5 :                     .wrtto_vol:
(1)  525/     1D5 : CB DE               		set	3,(hl)			; Volume update flag
(1)  526/     1D7 : DD 71 0E            		ld	(ix+seq_VolMaster),c
(1)  527/     1DA : DD 71 18            		ld	(ix+seq_VolFdTarget),c
(1)  528/     1DD : DD 36 0F 00         		ld	(ix+seq_VolMaster+1),0
(1)  529/     1E1 : CF                  		rst	8
(1)  530/     1E2 : C9                  		ret
(1)  531/     1E3 :                     
(1)  532/     1E3 :                     ; --------------------------------------------------------
(1)  533/     1E3 :                     ; Command 07h:
(1)  534/     1E3 :                     ;
(1)  535/     1E3 :                     ; Set global sub-beats
(1)  536/     1E3 :                     ; --------------------------------------------------------
(1)  537/     1E3 :                     
(1)  538/     1E3 :                     .cmnd_7:
(1)  539/     1E3 : CD AE 00            		call	.grab_arg		; d0.w: $00xx
(1)  540/     1E6 : 4F                  		ld	c,a
(1)  541/     1E7 : CD AE 00            		call	.grab_arg		; d0.w: $xx00
(1)  542/     1EA : 67                  		ld	h,a
(1)  543/     1EB : 69                  		ld	l,c
(1)  544/     1EC : 3A 88 1F            		ld	a,(palMode)		; PAL speed mode?
(1)  545/     1EF : B7                  		or	a
(1)  546/     1F0 : 28 04               		jr	z,.not_pal
(1)  547/     1F2 : 11 28 00            		ld	de,40			; Add 40
(1)  548/     1F5 : 19                  		add	hl,de
(1)  549/     1F6 :                     .not_pal:
(1)  550/     1F6 : 7C                  		ld	a,h
(1)  551/     1F7 : 32 34 00            		ld	(sbeatPtck+1),a
(1)  552/     1FA : 7D                  		ld	a,l
(1)  553/     1FB : 32 33 00            		ld	(sbeatPtck),a
(1)  554/     1FE : C3 8B 00            		jp	.next_cmd
(1)  555/     201 :                     
(1)  556/     201 :                     ; --------------------------------------------------------
(1)  557/     201 :                     ; Shared subs
(1)  558/     201 :                     ; --------------------------------------------------------
(1)  559/     201 :                     
(1)  560/     201 :                     .cmnd_rdslot:
(1)  561/     201 : 87                  		add	a,a			; ** MANUAL MAX_BUFFNTRY
(1)  562/     202 : 87                  		add	a,a			; id*8
(1)  563/     203 : 87                  		add	a,a
(1)  564/     204 : 16 00               		ld	d,0
(1)  565/     206 : 5F                  		ld	e,a
(1)  566/     207 : FD 19               		add	iy,de
(1)  567/     209 : FD 6E 00            		ld	l,(iy)
(1)  568/     20C : FD 66 01            		ld	h,(iy+1)
(1)  569/     20F : E5                  		push	hl
(1)  570/     210 : DD E1               		pop	ix
(1)  571/     212 : C9                  		ret
(1)  572/     213 :                     
(1)  573/     213 :                     ; ------------------------------------------------
(1)  574/     213 :                     ; iy - nikona_BuffList
(1)  575/     213 :                     
(1)  576/     213 :                     .srch_slot:
(1)  577/     213 : FD 7E 00            		ld	a,(iy)
(1)  578/     216 : FE FF               		cp	-1			; End of list?
(1)  579/     218 : C8                  		ret	z
(1)  580/     219 : FD 66 01            		ld	h,(iy+1)		; hl - Current track slot
(1)  581/     21C : 6F                  		ld	l,a
(1)  582/     21D : E5                  		push	hl
(1)  583/     21E : DD E1               		pop	ix
(1)  584/     220 : 11 08 00            		ld	de,MAX_BUFFNTRY
(1)  585/     223 : FD 19               		add	iy,de			; Next entry for later
(1)  586/     225 : C9                  		ret
(1)  587/     226 :                     
(1)  588/     226 :                     ; ====================================================================
(1)  589/     226 :                     ; ----------------------------------------------------------------
(1)  590/     226 :                     ; MAIN Playback section
(1)  591/     226 :                     ; ----------------------------------------------------------------
(1)  592/     226 :                     
(1)  593/     226 :                     ; --------------------------------------------------------
(1)  594/     226 :                     ; Read mini-impulse-tracker data
(1)  595/     226 :                     ; --------------------------------------------------------
(1)  596/     226 :                     
(1)  597/     226 :                     upd_seq:
(1)  598/     226 : CD BD 11            		call	get_tick		; Check for tick flag
(1)  599/     229 : FD 21 15 19         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1)  600/     22D : CD 3B 02            		call	.read_seq
(1)  601/     230 : FD 21 54 19         		ld	iy,trkBuff_1
(1)  602/     234 : CD 3B 02            		call	.read_seq
(1)  603/     237 : FD 21 93 19         		ld	iy,trkBuff_2
(1)  604/     23B :                     
(1)  605/     23B :                     ; ----------------------------------------
(1)  606/     23B :                     ; Read sequence
(1)  607/     23B :                     ;
(1)  608/     23B :                     ; iy - Current sequence buffer
(1)  609/     23B :                     ; ----------------------------------------
(1)  610/     23B :                     
(1)  611/     23B :                     .read_seq:
(1)  612/     23B : FD 46 00            		ld	b,(iy+seq_Status)	; b - Track status and settings
(1)  613/     23E : CB 78               		bit	7,b			; bit7: Track active?
(1)  614/     240 : C8                  		ret	z			; Return if not.
(1)  615/     241 : 78                  		ld	a,b
(1)  616/     242 : FE FF               		cp	-1			; Status is -1?
(1)  617/     244 : C8                  		ret	z			; then skip this
(1)  618/     245 : CF                  		rst	8
(1)  619/     246 :                     	; ----------------------------------------
(1)  620/     246 :                     	; Track volume changes
(1)  621/     246 : FD 6E 0F            		ld	l,(iy+seq_VolMaster+1)
(1)  622/     249 : FD 66 0E            		ld	h,(iy+seq_VolMaster)
(1)  623/     24C : FD 4E 18            		ld	c,(iy+seq_VolFdTarget)
(1)  624/     24F : 11 00 01            		ld	de,0100h		; <-- Manual volfade speed MAX 0100h
(1)  625/     252 : 79                  		ld	a,c
(1)  626/     253 : BC                  		cp	h
(1)  627/     254 : 28 1E               		jr	z,.keep_vol
(1)  628/     256 : 30 06               		jr	nc,.fade_out
(1)  629/     258 : 11 80 FF            		ld	de,-80h
(1)  630/     25B : 19                  		add	hl,de
(1)  631/     25C : 18 0C               		jr	.too_much
(1)  632/     25E :                     .fade_out:
(1)  633/     25E : 19                  		add	hl,de
(1)  634/     25F : CF                  		rst	8
(1)  635/     260 : 7C                  		ld	a,h
(1)  636/     261 : B9                  		cp	c
(1)  637/     262 : 38 06               		jr	c,.too_much
(1)  638/     264 : 61                  		ld	h,c
(1)  639/     265 : 2E 00               		ld	l,0
(1)  640/     267 : FD 71 18            		ld	(iy+seq_VolFdTarget),c
(1)  641/     26A :                     .too_much:
(1)  642/     26A : FD CB 00 DE         		set	3,(iy+seq_Status)	; Volume update flag
(1)  643/     26E : FD 75 0F            		ld	(iy+seq_VolMaster+1),l
(1)  644/     271 : FD 74 0E            		ld	(iy+seq_VolMaster),h
(1)  645/     274 :                     .keep_vol:
(1)  646/     274 :                     	; ----------------------------------------
(1)  647/     274 : 3A F9 1C            		ld	a,(currTickBits)	; a - Tick/Beat bits
(1)  648/     277 : CB 40               		bit	0,b			; bit0: This seq uses Beats?
(1)  649/     279 : 28 03               		jr	z,.sfxmd
(1)  650/     27B : CB 4F               		bit	1,a			; BEAT passed?
(1)  651/     27D : C8                  		ret	z			; No BEAT.
(1)  652/     27E :                     .sfxmd:
(1)  653/     27E : CB 47               		bit	0,a			; TICK passed?
(1)  654/     280 : C8                  		ret	z			; No TICK.
(1)  655/     281 : CF                  		rst	8
(1)  656/     282 :                     	; ----------------------------------------
(1)  657/     282 :                     	; Start reading notes
(1)  658/     282 : CB 70               		bit	6,b			; bit6: Restart/First time?
(1)  659/     284 : C4 0F 05            		call	nz,.first_fill
(1)  660/     287 : CB 68               		bit	5,b			; bit5: FILL request by effect?
(1)  661/     289 : C4 08 05            		call	nz,.effect_fill
(1)  662/     28C : FD 7E 12            		ld	a,(iy+seq_TickTmr)	; TICK ex-timer for this seq
(1)  663/     28F : 3D                  		dec	a
(1)  664/     290 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  665/     293 : B7                  		or	a			; Check a
(1)  666/     294 : C0                  		ret	nz			; If Tick timer != 0, exit.
(1)  667/     295 : CF                  		rst	8
(1)  668/     296 : FD 7E 03            		ld	a,(iy+seq_TickSet)	; Set new tick timer
(1)  669/     299 : FD 77 12            		ld	(iy+seq_TickTmr),a
(1)  670/     29C :                     	; ----------------------------------------
(1)  671/     29C : FD 4E 0C            		ld	c,(iy+seq_Rows)		; bc - Set row counter
(1)  672/     29F : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  673/     2A2 : 79                  		ld	a,c			; Check rowcount
(1)  674/     2A3 : B0                  		or	b
(1)  675/     2A4 : 20 14               		jr	nz,.row_active		; If bc != 0: row is currenly playing.
(1)  676/     2A6 :                     	; ----------------------------------------
(1)  677/     2A6 :                     	; Read next block
(1)  678/     2A6 : CF                  		rst	8
(1)  679/     2A7 : FD 7E 13            		ld	a,(iy+seq_currBlk)	; Next block
(1)  680/     2AA : 3C                  		inc	a
(1)  681/     2AB : FD 77 13            		ld 	(iy+seq_currBlk),a
(1)  682/     2AE : CD 2B 04            		call	.set_track		; Read track data ** ROM ACCESS **
(1)  683/     2B1 : FE FF               		cp	-1			; Track finished?
(1)  684/     2B3 : C8                  		ret	z
(1)  685/     2B4 : FD 4E 0C            		ld	c,(iy+seq_Rows)		; Set new rowcount to bc
(1)  686/     2B7 : FD 46 0D            		ld	b,(iy+(seq_Rows+1))
(1)  687/     2BA :                     	; ----------------------------------------
(1)  688/     2BA :                     	; bc - Row count
(1)  689/     2BA :                     .row_active:
(1)  690/     2BA : CF                  		rst	8
(1)  691/     2BB : FD 6E 0A            		ld	l,(iy+seq_Read)		; hl - CURRENT pattern to read
(1)  692/     2BE : FD 66 0B            		ld	h,(iy+((seq_Read+1)))
(1)  693/     2C1 :                     
(1)  694/     2C1 :                     ; --------------------------------
(1)  695/     2C1 :                     ; Main read-loop
(1)  696/     2C1 :                     ; --------------------------------
(1)  697/     2C1 :                     
(1)  698/     2C1 :                     .next_note:
(1)  699/     2C1 : FD 7E 11            		ld	a,(iy+seq_rowPause)	; Check row timer
(1)  700/     2C4 : B7                  		or	a
(1)  701/     2C5 : 20 16               		jr	nz,.dec_row
(1)  702/     2C7 : 7E                  		ld	a,(hl)			; Check if byte is a timer or a note
(1)  703/     2C8 : B7                  		or	a
(1)  704/     2C9 : 28 06               		jr	z,.exit			; If == 00h: exit
(1)  705/     2CB : FA E8 02            		jp	m,.has_note		; If 80h-0FFh: Note data
(1)  706/     2CE : FD 77 11            		ld	(iy+seq_rowPause),a	; If 01h-07Fh: Row-pause timer
(1)  707/     2D1 :                     
(1)  708/     2D1 :                     ; --------------------------------
(1)  709/     2D1 :                     ; Exit
(1)  710/     2D1 :                     ; --------------------------------
(1)  711/     2D1 :                     
(1)  712/     2D1 :                     .exit:
(1)  713/     2D1 : CF                  		rst	8
(1)  714/     2D2 : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  715/     2D5 : FD 75 0A            		ld	(iy+seq_Read),l		; Update READ location
(1)  716/     2D8 : FD 74 0B            		ld	(iy+((seq_Read+1))),h
(1)  717/     2DB : 18 03               		jr	.dec_row_e
(1)  718/     2DD :                     .dec_row:
(1)  719/     2DD : FD 35 11            		dec	(iy+seq_rowPause)	; Decrement row-pause timer
(1)  720/     2E0 :                     .dec_row_e:
(1)  721/     2E0 : 0B                  		dec	bc			; Decrement rowcount
(1)  722/     2E1 : FD 71 0C            		ld	(iy+seq_Rows),c		; Write last row to memory
(1)  723/     2E4 : FD 70 0D            		ld	(iy+(seq_Rows+1)),b
(1)  724/     2E7 : C9                  		ret	; Exit sequence
(1)  725/     2E8 :                     
(1)  726/     2E8 :                     ; --------------------------------
(1)  727/     2E8 :                     ; New note request
(1)  728/     2E8 :                     ;
(1)  729/     2E8 :                     ; a - %1tcccccc
(1)  730/     2E8 :                     ;   | t - next byte has new type
(1)  731/     2E8 :                     ;   | c - channel
(1)  732/     2E8 :                     ; --------------------------------
(1)  733/     2E8 :                     
(1)  734/     2E8 :                     .has_note:
(1)  735/     2E8 : CF                  		rst	8
(1)  736/     2E9 : C5                  		push	bc			; Save rowcount
(1)  737/     2EA : 4F                  		ld	c,a			; Copy patt byte control to c
(1)  738/     2EB : CD F3 03            		call	.inc_cpatt		; * Increment patt pos
(1)  739/     2EE : E5                  		push	hl			; Save hl patt pos
(1)  740/     2EF : FD E5               		push	iy			; copy iy to hl
(1)  741/     2F1 : E1                  		pop	hl
(1)  742/     2F2 : DD 21 00 1E         		ld	ix,trkChnls		; ix - Channels playback list
(1)  743/     2F6 : 11 25 00            		ld	de,seq_ChnIndx		; <-- this clears d
(1)  744/     2F9 : CF                  		rst	8
(1)  745/     2FA : 19                  		add	hl,de			; hl - Track's index points buffer
(1)  746/     2FB : 79                  		ld	a,c			; Get patt note index
(1)  747/     2FC : E6 1F               		and	00011111b		; Filter bits
(1)  748/     2FE : 5F                  		ld	e,a			; Save as e
(1)  749/     2FF : 19                  		add	hl,de			; Increment more by this pos
(1)  750/     300 :                     	; hl - trkChnls+index
(1)  751/     300 : 7E                  		ld	a,(hl)			; Check if this index is occupied.
(1)  752/     301 : B7                  		or	a
(1)  753/     302 : 28 15               		jr	z,.srch_new		; If == 0, search new one
(1)  754/     304 : E6 1F               		and	00011111b		; If already taken, read that channel
(1)  755/     306 : 87                  		add	a,a
(1)  756/     307 : 87                  		add	a,a
(1)  757/     308 : 87                  		add	a,a
(1)  758/     309 : 5F                  		ld	e,a
(1)  759/     30A : DD 19               		add	ix,de
(1)  760/     30C : DD 7E 00            		ld	a,(ix)			; Check status (chnl_Flags)
(1)  761/     30F : B7                  		or	a
(1)  762/     310 : F2 15 03            		jp	p,.srch_reroll
(1)  763/     313 : 18 31               		jr	.cont_chnl
(1)  764/     315 :                     ; Make NEW channel
(1)  765/     315 :                     ; ix - channel list start
(1)  766/     315 :                     .srch_reroll:
(1)  767/     315 : DD 36 00 00         		ld	(ix),0
(1)  768/     319 :                     .srch_new:
(1)  769/     319 : CF                  		rst	8
(1)  770/     31A : 06 1F               		ld	b,MAX_TRKCHN-1		; Max channels to check - 1
(1)  771/     31C : 16 00               		ld	d,0			; Reset out index
(1)  772/     31E :                     .next_chnl:
(1)  773/     31E : DD 7E 00            		ld	a,(ix)			; Read chnl_Flags
(1)  774/     321 : B7                  		or	a			; If plus, track channel is free
(1)  775/     322 : F2 3C 03            		jp	p,.chnl_free
(1)  776/     325 : DD 23               		inc	ix			; Search next channel, increment by 8
(1)  777/     327 : DD 23               		inc	ix
(1)  778/     329 : DD 23               		inc	ix
(1)  779/     32B : CF                  		rst	8
(1)  780/     32C : DD 23               		inc	ix
(1)  781/     32E : DD 23               		inc	ix
(1)  782/     330 : DD 23               		inc	ix
(1)  783/     332 : DD 23               		inc	ix
(1)  784/     334 : DD 23               		inc	ix
(1)  785/     336 : CF                  		rst	8
(1)  786/     337 : 14                  		inc	d			; Increment out index
(1)  787/     338 : 00                  		nop
(1)  788/     339 : 00                  		nop
(1)  789/     33A : 10 E2               		djnz	.next_chnl
(1)  790/     33C :                     .chnl_free:
(1)  791/     33C : 7A                  		ld	a,d			; Read index we got
(1)  792/     33D : E6 1F               		and	00011111b		; Filter bits
(1)  793/     33F : F6 80               		or	10000000b		; and set as used
(1)  794/     341 : 77                  		ld	(hl),a			; Write index slot
(1)  795/     342 : DD CB 00 FE         		set	7,(ix+chnl_Flags)	; Enable channel on the list
(1)  796/     346 :                     .cont_chnl:
(1)  797/     346 : E1                  		pop	hl			; Recover patt pos
(1)  798/     347 : CF                  		rst	8
(1)  799/     348 : DD 46 07            		ld	b,(ix+chnl_Type)	; b - current TYPE byte
(1)  800/     34B :                     
(1)  801/     34B :                     	; ix - Current channel
(1)  802/     34B :                     	; c  - Channel and type bits (7-6)
(1)  803/     34B :                     	; b  - Flags: evinEVIN
(1)  804/     34B :                     	;      E-effect/V-volume/I-instrument/N-note
(1)  805/     34B :                     	;      evin: byte is already stored on track-channel buffer
(1)  806/     34B :                     	;      EVIN: next byte(s) contain a new value. for eff:2 bytes
(1)  807/     34B : CB 71               		bit	6,c			; This byte has new TYPE setting?
(1)  808/     34D : 28 08               		jr	z,.old_type
(1)  809/     34F : 7E                  		ld	a,(hl)
(1)  810/     350 : DD 77 07            		ld	(ix+chnl_Type),a	; Update TYPE byte
(1)  811/     353 : 47                  		ld	b,a			; Set to b
(1)  812/     354 : CD F3 03            		call	.inc_cpatt		; Next patt pos
(1)  813/     357 :                     .old_type:
(1)  814/     357 : CF                  		rst	8
(1)  815/     358 : CB 40               		bit	0,b			; New NOTE?
(1)  816/     35A : 28 07               		jr	z,.no_note
(1)  817/     35C : 7E                  		ld	a,(hl)			; Set NOTE and increment patt
(1)  818/     35D : DD 77 02            		ld	(ix+chnl_Note),a
(1)  819/     360 : CD F3 03            		call	.inc_cpatt
(1)  820/     363 :                     .no_note:
(1)  821/     363 : CB 48               		bit	1,b			; New INS?
(1)  822/     365 : 28 07               		jr	z,.no_ins
(1)  823/     367 : 7E                  		ld	a,(hl)			; Set INS and increment patt
(1)  824/     368 : DD 77 03            		ld	(ix+chnl_Ins),a
(1)  825/     36B : CD F3 03            		call	.inc_cpatt
(1)  826/     36E :                     .no_ins:
(1)  827/     36E : CF                  		rst	8
(1)  828/     36F : CB 50               		bit	2,b			; New VOL?
(1)  829/     371 : 28 07               		jr	z,.no_vol
(1)  830/     373 : 7E                  		ld	a,(hl)			; Set VOL and increment patt
(1)  831/     374 : DD 77 04            		ld	(ix+chnl_Vol),a
(1)  832/     377 : CD F3 03            		call	.inc_cpatt
(1)  833/     37A :                     .no_vol:
(1)  834/     37A : CB 58               		bit	3,b			; New EFFECT?
(1)  835/     37C : 28 0F               		jr	z,.no_eff
(1)  836/     37E : 7E                  		ld	a,(hl)			; Set EFFECT ID, incr patt
(1)  837/     37F : DD 77 05            		ld	(ix+chnl_EffId),a
(1)  838/     382 : CD F3 03            		call	.inc_cpatt
(1)  839/     385 : CF                  		rst	8
(1)  840/     386 : 7E                  		ld	a,(hl)			; Set EFFECT ARG, incr patt
(1)  841/     387 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1)  842/     38A : CD F3 03            		call	.inc_cpatt
(1)  843/     38D :                     .no_eff:
(1)  844/     38D : 78                  		ld	a,b			; Merge the Impulse evin bits into main EVIN bits
(1)  845/     38E : 0F                  		rrca
(1)  846/     38F : 0F                  		rrca
(1)  847/     390 : 0F                  		rrca
(1)  848/     391 : 0F                  		rrca
(1)  849/     392 : E6 0F               		and	00001111b		; Filter bits
(1)  850/     394 : 4F                  		ld	c,a			; Save as c
(1)  851/     395 : 78                  		ld	a,b
(1)  852/     396 : E6 0F               		and	00001111b		; Filter again
(1)  853/     398 : B1                  		or	c			; Merge c with a
(1)  854/     399 : CF                  		rst	8
(1)  855/     39A : 4F                  		ld	c,a			; Save bit flags
(1)  856/     39B : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  857/     39E : B1                  		or	c
(1)  858/     39F : DD 77 00            		ld	(ix+chnl_Flags),a
(1)  859/     3A2 : C1                  		pop	bc			; Restore rowcount
(1)  860/     3A3 :                     	; ----------------------------------------
(1)  861/     3A3 :                     	; Effects that affect internal playback
(1)  862/     3A3 : DD 7E 00            		ld	a,(ix+chnl_Flags)
(1)  863/     3A6 : E6 08               		and	1000b			; ONLY check for the EFFECT bit
(1)  864/     3A8 : CA C1 02            		jp	z,.next_note
(1)  865/     3AB : DD 7E 05            		ld	a,(ix+chnl_EffId)
(1)  866/     3AE : B7                  		or	a			; 00h = invalid effect
(1)  867/     3AF : CA C1 02            		jp	z,.next_note
(1)  868/     3B2 : FE 01               		cp	1			; Effect A: Tick set
(1)  869/     3B4 : 28 0B               		jr	z,.eff_A
(1)  870/     3B6 : FE 02               		cp	2			; Effect B: Position Jump
(1)  871/     3B8 : 28 18               		jr	z,.eff_B
(1)  872/     3BA : FE 03               		cp	3			; Effect C: Pattern break
(1)  873/     3BC : 28 32               		jr	z,.eff_C
(1)  874/     3BE : C3 C1 02            		jp	.next_note
(1)  875/     3C1 :                     
(1)  876/     3C1 :                     ; ----------------------------------------
(1)  877/     3C1 :                     ; Effect A: Set ticks
(1)  878/     3C1 :                     ; ----------------------------------------
(1)  879/     3C1 :                     
(1)  880/     3C1 :                     .eff_A:
(1)  881/     3C1 : CF                  		rst	8
(1)  882/     3C2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - ticks number
(1)  883/     3C5 : FD 73 03            		ld	(iy+seq_TickSet),e	; set for both Set and Timer.
(1)  884/     3C8 : FD 73 12            		ld	(iy+seq_TickTmr),e
(1)  885/     3CB : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  886/     3CF : C3 C1 02            		jp	.next_note
(1)  887/     3D2 :                     
(1)  888/     3D2 :                     ; ----------------------------------------
(1)  889/     3D2 :                     ; Effect B: jump to a new block
(1)  890/     3D2 :                     ; ----------------------------------------
(1)  891/     3D2 :                     
(1)  892/     3D2 :                     .eff_B:
(1)  893/     3D2 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - Block SLOT to jump
(1)  894/     3D5 : FD 73 13            		ld 	(iy+seq_currBlk),e
(1)  895/     3D8 : CF                  		rst	8
(1)  896/     3D9 : FD 36 11 00         		ld	(iy+seq_rowPause),0	; Reset rowpause
(1)  897/     3DD : DD CB 00 9E         		res	3,(ix+chnl_Flags)	; <-- Clear EFFECT bit
(1)  898/     3E1 : FD CB 00 EE         		set	5,(iy+seq_Status)	; set fill-from-effect flag on exit
(1)  899/     3E5 : 3E 80               		ld	a,80h
(1)  900/     3E7 : FD 77 15            		ld	(iy+seq_BankHeads),a
(1)  901/     3EA : FD 77 16            		ld	(iy+seq_BankBlk),a
(1)  902/     3ED : C3 C1 02            		jp	.next_note
(1)  903/     3F0 :                     
(1)  904/     3F0 :                     ; ----------------------------------------
(1)  905/     3F0 :                     ; Effect C: Pattern break/exit
(1)  906/     3F0 :                     ;
(1)  907/     3F0 :                     ; Only used on SFX, arguments ignored.
(1)  908/     3F0 :                     ; ----------------------------------------
(1)  909/     3F0 :                     
(1)  910/     3F0 :                     .eff_C:
(1)  911/     3F0 : C3 02 05            		jp	.track_end
(1)  912/     3F3 :                     
(1)  913/     3F3 :                     ; ----------------------------------------
(1)  914/     3F3 :                     ; Increment the current patt position
(1)  915/     3F3 :                     ; and recieve more data
(1)  916/     3F3 :                     ;
(1)  917/     3F3 :                     ; Breaks:
(1)  918/     3F3 :                     ; a,e
(1)  919/     3F3 :                     ; ----------------------------------------
(1)  920/     3F3 :                     
(1)  921/     3F3 :                     .inc_cpatt:
(1)  922/     3F3 : FD 5E 08            		ld	e,(iy+seq_Cach)		; Read curret cache LSB
(1)  923/     3F6 : 7D                  		ld	a,l
(1)  924/     3F7 : 3C                  		inc	a
(1)  925/     3F8 : E6 1F               		and	MAX_RCACH-1
(1)  926/     3FA : FE 1E               		cp	MAX_RCACH-2		; ALMOST RAN OUT of bytes?
(1)  927/     3FC : 30 03               		jr	nc,.ran_out
(1)  928/     3FE : B3                  		or	e
(1)  929/     3FF : 6F                  		ld	l,a
(1)  930/     400 : C9                  		ret
(1)  931/     401 :                     .ran_out:
(1)  932/     401 : FD 6E 08            		ld	l,(iy+seq_Cach)
(1)  933/     404 : E5                  		push	hl
(1)  934/     405 : C5                  		push	bc
(1)  935/     406 : 06 00               		ld	b,0
(1)  936/     408 : 4F                  		ld	c,a
(1)  937/     409 : CF                  		rst	8
(1)  938/     40A : 5D                  		ld	e,l
(1)  939/     40B : 54                  		ld	d,h
(1)  940/     40C : FD 6E 19            		ld	l,(iy+seq_RomPattRead)
(1)  941/     40F : FD 66 1A            		ld	h,(iy+(seq_RomPattRead+1))
(1)  942/     412 : FD 7E 1B            		ld	a,(iy+(seq_RomPattRead+2))
(1)  943/     415 : 09                  		add	hl,bc
(1)  944/     416 : CE 00               		adc	a,0
(1)  945/     418 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1)  946/     41B : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1)  947/     41E : CF                  		rst	8
(1)  948/     41F : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1)  949/     422 : 01 20 00            		ld	bc,MAX_RCACH
(1)  950/     425 : CD DE 11            		call	readRom		; *** ROM ACCESS ***
(1)  951/     428 : C1                  		pop	bc
(1)  952/     429 : E1                  		pop	hl
(1)  953/     42A : C9                  		ret
(1)  954/     42B :                     
(1)  955/     42B :                     ; ----------------------------------------
(1)  956/     42B :                     ; Set track pattern by seq_currBlk
(1)  957/     42B :                     ; ----------------------------------------
(1)  958/     42B :                     
(1)  959/     42B :                     .set_track:
(1)  960/     42B :                     	; ----------------------------------------
(1)  961/     42B :                     	; Make block id list
(1)  962/     42B : FD 5E 04            		ld	e,(iy+seq_Blocks)
(1)  963/     42E : FD 56 05            		ld	d,(iy+(seq_Blocks+1))
(1)  964/     431 : FD 7E 13            		ld	a,(iy+seq_currBlk)
(1)  965/     434 : 4F                  		ld	c,a
(1)  966/     435 : C5                  		push	bc
(1)  967/     436 : D5                  		push	de
(1)  968/     437 : CF                  		rst	8
(1)  969/     438 : 0F                  		rrca
(1)  970/     439 : 0F                  		rrca
(1)  971/     43A : 0F                  		rrca
(1)  972/     43B : E6 1F               		and	00011111b
(1)  973/     43D : FD 4E 16            		ld	c,(iy+seq_BankBlk)	; c - current block bank
(1)  974/     440 : CB 79               		bit	7,c			; First time?
(1)  975/     442 : 20 03               		jr	nz,.first_blk
(1)  976/     444 : B9                  		cp	c			; SAME instrument data?
(1)  977/     445 : 28 1C               		jr	z,.keep_blk
(1)  978/     447 :                     .first_blk:
(1)  979/     447 : CF                  		rst	8
(1)  980/     448 : FD 77 16            		ld	(iy+seq_BankBlk),a	; Save inst number
(1)  981/     44B : 07                  		rlca
(1)  982/     44C : 07                  		rlca
(1)  983/     44D : 07                  		rlca
(1)  984/     44E : 06 00               		ld	b,0
(1)  985/     450 : 4F                  		ld	c,a
(1)  986/     451 : FD 6E 22            		ld	l,(iy+seq_RomBlks)
(1)  987/     454 : FD 66 23            		ld	h,(iy+(seq_RomBlks+1))
(1)  988/     457 : FD 7E 24            		ld	a,(iy+(seq_RomBlks+2))
(1)  989/     45A : 09                  		add	hl,bc
(1)  990/     45B : CE 00               		adc	a,0
(1)  991/     45D : 01 08 00            		ld	bc,8			; 8 blocks stored
(1)  992/     460 : CD DE 11            		call	readRom			; ** ROM ACCESS **
(1)  993/     463 :                     .keep_blk:
(1)  994/     463 : E1                  		pop	hl
(1)  995/     464 : C1                  		pop	bc
(1)  996/     465 : 79                  		ld	a,c
(1)  997/     466 : E6 07               		and	00000111b
(1)  998/     468 : CF                  		rst	8
(1)  999/     469 : 16 00               		ld	d,0
(1) 1000/     46B : 5F                  		ld	e,a
(1) 1001/     46C : 19                  		add	hl,de
(1) 1002/     46D :                     	; ----------------------------------------
(1) 1003/     46D : 7E                  		ld	a,(hl)			; Read block byte
(1) 1004/     46E : FE FF               		cp	-1			; If block == -1, end track
(1) 1005/     470 : CA 02 05            		jp	z,.track_end
(1) 1006/     473 : CF                  		rst	8
(1) 1007/     474 :                     	; ----------------------------------------
(1) 1008/     474 : FD 5E 06            		ld	e,(iy+seq_Patt)		; Read CACHE patt heads
(1) 1009/     477 : FD 56 07            		ld	d,(iy+(seq_Patt+1))
(1) 1010/     47A : 4F                  		ld	c,a
(1) 1011/     47B : D5                  		push	de
(1) 1012/     47C : C5                  		push	bc
(1) 1013/     47D : CF                  		rst	8
(1) 1014/     47E : 0F                  		rrca
(1) 1015/     47F : 0F                  		rrca
(1) 1016/     480 : 0F                  		rrca
(1) 1017/     481 : E6 1F               		and	00011111b
(1) 1018/     483 : FD 4E 15            		ld	c,(iy+seq_BankHeads)	; c - current intrument loaded
(1) 1019/     486 : CB 79               		bit	7,c			; First time?
(1) 1020/     488 : 20 03               		jr	nz,.first_head
(1) 1021/     48A : B9                  		cp	c			; SAME instrument data?
(1) 1022/     48B : 28 26               		jr	z,.keep_it
(1) 1023/     48D :                     .first_head:
(1) 1024/     48D : CF                  		rst	8
(1) 1025/     48E : FD 77 15            		ld	(iy+seq_BankHeads),a	; Save inst number
(1) 1026/     491 : 47                  		ld	b,a
(1) 1027/     492 : 0F                  		rrca
(1) 1028/     493 : 0F                  		rrca
(1) 1029/     494 : 0F                  		rrca
(1) 1030/     495 : E6 E0               		and	11100000b
(1) 1031/     497 : 4F                  		ld	c,a
(1) 1032/     498 : 78                  		ld	a,b
(1) 1033/     499 : 0F                  		rrca
(1) 1034/     49A : 0F                  		rrca
(1) 1035/     49B : 0F                  		rrca
(1) 1036/     49C : E6 03               		and	00000011b
(1) 1037/     49E : 47                  		ld	b,a
(1) 1038/     49F :                     	; ----------------------------------------
(1) 1039/     49F : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1040/     4A2 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1041/     4A5 : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1042/     4A8 : E7                  		rst	20h
(1) 1043/     4A9 : CF                  		rst	8
(1) 1044/     4AA : 09                  		add	hl,bc
(1) 1045/     4AB : CE 00               		adc	a,0
(1) 1046/     4AD : 01 20 00            		ld	bc,4*8			; 8 heads stored
(1) 1047/     4B0 : CD DE 11            		call	readRom			; ** ROM ACCESS **
(1) 1048/     4B3 :                     .keep_it:
(1) 1049/     4B3 : C1                  		pop	bc
(1) 1050/     4B4 : 79                  		ld	a,c
(1) 1051/     4B5 : E6 07               		and	00000111b
(1) 1052/     4B7 : 87                  		add	a,a
(1) 1053/     4B8 : 87                  		add	a,a
(1) 1054/     4B9 : 57                  		ld	d,a
(1) 1055/     4BA : CF                  		rst	8
(1) 1056/     4BB : E6 FC               		and	11111100b
(1) 1057/     4BD : 5F                  		ld	e,a
(1) 1058/     4BE : 7A                  		ld	a,d
(1) 1059/     4BF : E6 03               		and	00000011b
(1) 1060/     4C1 : 57                  		ld	d,a
(1) 1061/     4C2 : E1                  		pop	hl
(1) 1062/     4C3 : 19                  		add	hl,de
(1) 1063/     4C4 : 5E                  		ld	e,(hl)			; de - Pos
(1) 1064/     4C5 : 23                  		inc	hl
(1) 1065/     4C6 : CF                  		rst	8
(1) 1066/     4C7 : 56                  		ld	d,(hl)
(1) 1067/     4C8 : 23                  		inc	hl
(1) 1068/     4C9 : 7E                  		ld	a,(hl)
(1) 1069/     4CA : 23                  		inc	hl
(1) 1070/     4CB : FD 77 0C            		ld	(iy+seq_Rows),a
(1) 1071/     4CE : 7E                  		ld	a,(hl)
(1) 1072/     4CF : 23                  		inc	hl
(1) 1073/     4D0 : FD 77 0D            		ld	(iy+(seq_Rows+1)),a
(1) 1074/     4D3 : FD 6E 1C            		ld	l,(iy+seq_RomPatt)	; Transfer FIRST patt
(1) 1075/     4D6 : FD 66 1D            		ld	h,(iy+(seq_RomPatt+1))	; packet
(1) 1076/     4D9 : CF                  		rst	8
(1) 1077/     4DA : FD 7E 1E            		ld	a,(iy+(seq_RomPatt+2))
(1) 1078/     4DD : 19                  		add	hl,de
(1) 1079/     4DE : CE 00               		adc	a,0
(1) 1080/     4E0 : FD 75 19            		ld	(iy+seq_RomPattRead),l
(1) 1081/     4E3 : FD 74 1A            		ld	(iy+(seq_RomPattRead+1)),h
(1) 1082/     4E6 : FD 77 1B            		ld	(iy+(seq_RomPattRead+2)),a
(1) 1083/     4E9 : FD 5E 08            		ld	e,(iy+seq_Cach)
(1) 1084/     4EC : FD 56 09            		ld	d,(iy+(seq_Cach+1))
(1) 1085/     4EF : FD 73 0A            		ld	(iy+seq_Read),e
(1) 1086/     4F2 : FD 72 0B            		ld	(iy+(seq_Read+1)),d
(1) 1087/     4F5 : 0E 20               		ld	c,MAX_RCACH
(1) 1088/     4F7 : FD 36 10 00         		ld	(iy+seq_cachHalf),0
(1) 1089/     4FB : FD 36 11 00         		ld	(iy+seq_rowPause),0
(1) 1090/     4FF : C3 DE 11            		jp	readRom			; ** ROM access **
(1) 1091/     502 :                     
(1) 1092/     502 :                     ; ----------------------------------------
(1) 1093/     502 :                     ; **JUMP ONLY**
(1) 1094/     502 :                     .track_end:
(1) 1095/     502 : CF                  		rst	8
(1) 1096/     503 : FD 36 00 FF         		ld	(iy+seq_Status),-1	; Disable track slot
(1) 1097/     507 : C9                  		ret
(1) 1098/     508 :                     
(1) 1099/     508 :                     ; ----------------------------------------
(1) 1100/     508 :                     ; Track refill
(1) 1101/     508 :                     ; ----------------------------------------
(1) 1102/     508 :                     
(1) 1103/     508 :                     .effect_fill:
(1) 1104/     508 : FD CB 00 AE         		res	5,(iy+seq_Status)	; Reset refill-from-effect flag
(1) 1105/     50C : C3 2B 04            		jp	.set_track
(1) 1106/     50F :                     
(1) 1107/     50F :                     ; ----------------------------------------
(1) 1108/     50F :                     ; Track Start/Reset
(1) 1109/     50F :                     ;
(1) 1110/     50F :                     ; iy - Track buffer
(1) 1111/     50F :                     ; ----------------------------------------
(1) 1112/     50F :                     
(1) 1113/     50F :                     .first_fill:
(1) 1114/     50F : FD CB 00 B6         		res	6,(iy+seq_Status)	; Clear FILL flag
(1) 1115/     513 : CD B0 05            		call	track_out
(1) 1116/     516 : FD 36 12 01         		ld	(iy+seq_TickTmr),1	; Reset tick timer
(1) 1117/     51A : FD 7E 02            		ld	a,(iy+seq_SetBlk)	; Make start block as current block
(1) 1118/     51D : CF                  		rst	8
(1) 1119/     51E : FD 77 13            		ld 	(iy+seq_currBlk),a	; block
(1) 1120/     521 : FD 7E 01            		ld	a,(iy+seq_Num)
(1) 1121/     524 : FE FF               		cp	-1			; Sequence -1?
(1) 1122/     526 : C8                  		ret	z
(1) 1123/     527 : 87                  		add	a,a
(1) 1124/     528 : 87                  		add	a,a
(1) 1125/     529 : 16 00               		ld	d,0
(1) 1126/     52B : 5F                  		ld	e,a
(1) 1127/     52C : 21 1C 00            		ld	hl,gemaMstrListPos
(1) 1128/     52F : 23                  		inc	hl
(1) 1129/     530 : 7E                  		ld	a,(hl)			; $00xx0000
(1) 1130/     531 : 23                  		inc	hl
(1) 1131/     532 : 4E                  		ld	c,(hl)			; $0000xx00
(1) 1132/     533 : 23                  		inc	hl
(1) 1133/     534 : 6E                  		ld	l,(hl)			; $000000xx
(1) 1134/     535 : CF                  		rst	8
(1) 1135/     536 : 61                  		ld	h,c
(1) 1136/     537 : 19                  		add	hl,de
(1) 1137/     538 : CE 00               		adc	a,0
(1) 1138/     53A : 11 8D 18            		ld	de,trkInfoCach
(1) 1139/     53D : D5                  		push	de
(1) 1140/     53E : 01 04 00            		ld	bc,4
(1) 1141/     541 : CD DE 11            		call	readRom			; *** ROM ACCESS ***
(1) 1142/     544 : E1                  		pop	hl
(1) 1143/     545 : 7E                  		ld	a,(hl)
(1) 1144/     546 : 23                  		inc	hl
(1) 1145/     547 : CB 7F               		bit	7,a
(1) 1146/     549 : 28 04               		jr	z,.no_glbl
(1) 1147/     54B : FD CB 00 C6         		set	0,(iy+seq_Status)	; Enable GLOBAL sub-beats
(1) 1148/     54F :                     .no_glbl:
(1) 1149/     54F : CF                  		rst	8
(1) 1150/     550 : E6 7F               		and	01111111b
(1) 1151/     552 : FD 77 03            		ld	(iy+seq_TickSet),a
(1) 1152/     555 : 7E                  		ld	a,(hl)			; Read and temporally
(1) 1153/     556 : 23                  		inc	hl			; grab it's pointers
(1) 1154/     557 : 4E                  		ld	c,(hl)
(1) 1155/     558 : 23                  		inc	hl
(1) 1156/     559 : 6E                  		ld	l,(hl)
(1) 1157/     55A : 61                  		ld	h,c
(1) 1158/     55B : 11 E6 19            		ld	de,headerOut
(1) 1159/     55E : 0E 0E               		ld	c,0Eh
(1) 1160/     560 : CD DE 11            		call	readRom		; ** ROM access **
(1) 1161/     563 :                     
(1) 1162/     563 :                     	; headerOut:
(1) 1163/     563 :                     	; dc.w numof_chnls
(1) 1164/     563 :                     	; dc.l .blk,.pat,.ins
(1) 1165/     563 :                     	; *** READING BACKWARDS
(1) 1166/     563 : DD 21 F3 19         		ld	ix,headerOut_e-1	; Read temp header BACKWARDS
(1) 1167/     567 : CD 9D 05            		call	.grab_rhead		; Instrument data
(1) 1168/     56A : FD 75 1F            		ld	(iy+seq_RomInst),l
(1) 1169/     56D : FD 74 20            		ld	(iy+(seq_RomInst+1)),h
(1) 1170/     570 : FD 70 21            		ld	(iy+(seq_RomInst+2)),b
(1) 1171/     573 : CD 9D 05            		call	.grab_rhead		; Pattern heads
(1) 1172/     576 : FD 75 1C            		ld	(iy+seq_RomPatt),l	; Save ROM patt base
(1) 1173/     579 : FD 74 1D            		ld	(iy+(seq_RomPatt+1)),h
(1) 1174/     57C : FD 70 1E            		ld	(iy+(seq_RomPatt+2)),b
(1) 1175/     57F : FD 36 15 80         		ld	(iy+seq_BankHeads),80h	; Reset pattern banking
(1) 1176/     583 : CD 9D 05            		call	.grab_rhead		; Block data
(1) 1177/     586 : FD 75 22            		ld	(iy+seq_RomBlks),l	; Save ROM patt base
(1) 1178/     589 : FD 74 23            		ld	(iy+(seq_RomBlks+1)),h
(1) 1179/     58C : FD 70 24            		ld	(iy+(seq_RomBlks+2)),b
(1) 1180/     58F : FD 36 16 80         		ld	(iy+seq_BankBlk),80h	; Reset pattern banking
(1) 1181/     593 : DD 7E 00            		ld	a,(ix)			; dc.w numof_chnls
(1) 1182/     596 : FD 77 17            		ld	(iy+seq_MaxChnl),a
(1) 1183/     599 : CF                  		rst	8
(1) 1184/     59A : C3 2B 04            		jp	.set_track
(1) 1185/     59D :                     
(1) 1186/     59D :                     ; Read 68K pointer:
(1) 1187/     59D :                     ; hl - 00xxxx
(1) 1188/     59D :                     ;  b - xx0000
(1) 1189/     59D :                     .grab_rhead:
(1) 1190/     59D : DD 6E 00            		ld	l,(ix)
(1) 1191/     5A0 : DD 2B               		dec	ix
(1) 1192/     5A2 : DD 66 00            		ld	h,(ix)
(1) 1193/     5A5 : CF                  		rst	8
(1) 1194/     5A6 : DD 2B               		dec	ix
(1) 1195/     5A8 : DD 46 00            		ld	b,(ix)
(1) 1196/     5AB : DD 2B               		dec	ix
(1) 1197/     5AD :                     ; 		ld	c,(ix)
(1) 1198/     5AD : DD 2B               		dec	ix
(1) 1199/     5AF : C9                  		ret
(1) 1200/     5B0 :                     
(1) 1201/     5B0 :                     ; ----------------------------------------
(1) 1202/     5B0 :                     ; Reset tracker channels
(1) 1203/     5B0 :                     ;
(1) 1204/     5B0 :                     ; iy - Track buffer
(1) 1205/     5B0 :                     ;
(1) 1206/     5B0 :                     ; Breaks:
(1) 1207/     5B0 :                     ; b ,de,hl,ix
(1) 1208/     5B0 :                     ; ----------------------------------------
(1) 1209/     5B0 :                     
(1) 1210/     5B0 :                     track_out:
(1) 1211/     5B0 : FD E5               		push	iy
(1) 1212/     5B2 : E1                  		pop	hl
(1) 1213/     5B3 : DD 21 00 1E         		ld	ix,trkChnls
(1) 1214/     5B7 : CF                  		rst	8
(1) 1215/     5B8 : 11 25 00            		ld	de,seq_ChnIndx
(1) 1216/     5BB : 19                  		add	hl,de
(1) 1217/     5BC : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1218/     5BF : B7                  		or	a
(1) 1219/     5C0 : 20 02               		jr	nz,.valid
(1) 1220/     5C2 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1221/     5C4 :                     .valid:
(1) 1222/     5C4 : 47                  		ld	b,a
(1) 1223/     5C5 :                     .indx_del:
(1) 1224/     5C5 : 7E                  		ld	a,(hl)
(1) 1225/     5C6 : B7                  		or	a
(1) 1226/     5C7 : 28 29               		jr	z,.nothin
(1) 1227/     5C9 : CF                  		rst	8
(1) 1228/     5CA : DD E5               		push	ix
(1) 1229/     5CC : E6 1F               		and	00011111b
(1) 1230/     5CE : 87                  		add	a,a
(1) 1231/     5CF : 87                  		add	a,a
(1) 1232/     5D0 : 87                  		add	a,a
(1) 1233/     5D1 : 5F                  		ld	e,a
(1) 1234/     5D2 : CF                  		rst	8
(1) 1235/     5D3 : DD 19               		add	ix,de
(1) 1236/     5D5 : AF                  		xor	a
(1) 1237/     5D6 : DD 36 02 FE         		ld	(ix+chnl_Note),-2
(1) 1238/     5DA : DD 36 00 01         		ld	(ix+chnl_Flags),1
(1) 1239/     5DE : DD 77 04            		ld	(ix+chnl_Vol),a
(1) 1240/     5E1 : DD 77 05            		ld	(ix+chnl_EffId),a
(1) 1241/     5E4 : DD 77 06            		ld	(ix+chnl_EffArg),a
(1) 1242/     5E7 : CF                  		rst	8
(1) 1243/     5E8 : DD 77 03            		ld	(ix+chnl_Ins),a
(1) 1244/     5EB : DD 77 07            		ld	(ix+chnl_Type),a
(1) 1245/     5EE : DD E1               		pop	ix
(1) 1246/     5F0 : 77                  		ld	(hl),a
(1) 1247/     5F1 : 00                  		nop
(1) 1248/     5F2 :                     .nothin:
(1) 1249/     5F2 : 23                  		inc	hl
(1) 1250/     5F3 : 10 D0               		djnz	.indx_del
(1) 1251/     5F5 : 3E 01               		ld	a,1
(1) 1252/     5F7 : 32 D8 19            		ld	(marsUpd),a
(1) 1253/     5FA : 32 D9 19            		ld	(mcdUpd),a
(1) 1254/     5FD : C9                  		ret
(1) 1255/     5FE :                     
(1) 1256/     5FE :                     ; ============================================================
(1) 1257/     5FE :                     ; --------------------------------------------------------
(1) 1258/     5FE :                     ; Process track channels to the sound chips
(1) 1259/     5FE :                     ; --------------------------------------------------------
(1) 1260/     5FE :                     
(1) 1261/     5FE :                     set_chips:
(1) 1262/     5FE : CD BD 11            		call	get_tick
(1) 1263/     601 : FD 21 15 19         		ld	iy,trkBuff_0		; ** MANUAL BUFFERS
(1) 1264/     605 : CD 3E 06            		call	tblbuff_read
(1) 1265/     608 : FD 21 54 19         		ld	iy,trkBuff_1
(1) 1266/     60C : CD 3E 06            		call	tblbuff_read
(1) 1267/     60F : FD 21 93 19         		ld	iy,trkBuff_2
(1) 1268/     613 : CD 3E 06            		call	tblbuff_read
(1) 1269/     616 : E7                  		rst	20h
(1) 1270/     617 : CD BD 11            		call	get_tick
(1) 1271/     61A : FD 21 46 1C         		ld	iy,tblPSGN		; PSG Noise
(1) 1272/     61E : CD 00 08            		call	dtbl_singl
(1) 1273/     621 : FD 21 0E 1C         		ld	iy,tblPSG		; PSG Squares
(1) 1274/     625 : CD EC 07            		call	dtbl_multi
(1) 1275/     628 : FD 21 A0 1B         		ld	iy,tblFM		; FM/FM3/DAC
(1) 1276/     62C : CD EC 07            		call	dtbl_multi
(1) 1277/     62F : E7                  		rst	20h
(1) 1278/     630 : FD 21 0E 1B         		ld	iy,tblPCM		; SEGA CD PCM
(1) 1279/     634 : CD EC 07            		call	dtbl_multi
(1) 1280/     637 : FD 21 58 1C         		ld	iy,tblPWM		; 32X PWM
(1) 1281/     63B : C3 EC 07            		jp	dtbl_multi
(1) 1282/     63E :                     
(1) 1283/     63E :                     ; ----------------------------------------
(1) 1284/     63E :                     ; Read current track
(1) 1285/     63E :                     ;
(1) 1286/     63E :                     ; iy - Buffer
(1) 1287/     63E :                     tblbuff_read:
(1) 1288/     63E : CF                  		rst	8
(1) 1289/     63F : FD 46 00            		ld	b,(iy+seq_Status)	; bit7: Track active?
(1) 1290/     642 : CB 78               		bit	7,b
(1) 1291/     644 : C8                  		ret	z
(1) 1292/     645 : 78                  		ld	a,b			; seq_Status == -1?
(1) 1293/     646 : FE FF               		cp	-1
(1) 1294/     648 : C2 56 06            		jp	nz,.track_cont
(1) 1295/     64B : CD B0 05            		call	track_out
(1) 1296/     64E : FD 36 00 00         		ld	(iy+seq_Status),0
(1) 1297/     652 : FD 36 01 FF         		ld	(iy+seq_Num),-1
(1) 1298/     656 :                     .track_cont:
(1) 1299/     656 : FD E5               		push	iy
(1) 1300/     658 : E1                  		pop	hl
(1) 1301/     659 : CF                  		rst	8
(1) 1302/     65A : DD 21 00 1E         		ld	ix,trkChnls
(1) 1303/     65E : 11 25 00            		ld	de,seq_ChnIndx
(1) 1304/     661 : 19                  		add	hl,de
(1) 1305/     662 : FD 7E 17            		ld	a,(iy+seq_MaxChnl)
(1) 1306/     665 : B7                  		or	a
(1) 1307/     666 : 20 02               		jr	nz,.valid
(1) 1308/     668 : 3E 1A               		ld	a,MAX_TRKINDX		; If zero, Read ALL channels
(1) 1309/     66A :                     .valid:
(1) 1310/     66A : CF                  		rst	8
(1) 1311/     66B : 47                  		ld	b,a
(1) 1312/     66C :                     .next_indx:
(1) 1313/     66C : 7E                  		ld	a,(hl)			; Read index
(1) 1314/     66D : B7                  		or	a
(1) 1315/     66E : 20 02               		jr	nz,.has_indx		; If non-zero: valid
(1) 1316/     670 : 18 1C               		jr	.no_indx
(1) 1317/     672 :                     .has_indx:
(1) 1318/     672 : E6 1F               		and	00011111b
(1) 1319/     674 : 87                  		add	a,a
(1) 1320/     675 : 87                  		add	a,a
(1) 1321/     676 : 87                  		add	a,a
(1) 1322/     677 : CF                  		rst	8
(1) 1323/     678 : 16 00               		ld	d,0
(1) 1324/     67A : 5F                  		ld	e,a
(1) 1325/     67B : C5                  		push	bc			; Save bc, hl and ix
(1) 1326/     67C : E5                  		push	hl
(1) 1327/     67D : DD E5               		push	ix
(1) 1328/     67F : DD 19               		add	ix,de
(1) 1329/     681 : DD 7E 00            		ld	a,(ix)			; Read 0000evin
(1) 1330/     684 : E6 0F               		and	00001111b
(1) 1331/     686 : C4 96 06            		call	nz,.do_chip		; Call if non-zero
(1) 1332/     689 : CF                  		rst	8
(1) 1333/     68A : DD E1               		pop	ix
(1) 1334/     68C : E1                  		pop	hl
(1) 1335/     68D : C1                  		pop	bc
(1) 1336/     68E :                     .no_indx:
(1) 1337/     68E : 23                  		inc	hl
(1) 1338/     68F : 10 DB               		djnz	.next_indx
(1) 1339/     691 : FD CB 00 9E         		res	3,(iy+seq_Status)	; RESET Volume update bit
(1) 1340/     695 : C9                  		ret
(1) 1341/     696 :                     
(1) 1342/     696 :                     ; ----------------------------------------
(1) 1343/     696 :                     ; iy - Track buffer
(1) 1344/     696 :                     ; ix - Current channel
(1) 1345/     696 :                     
(1) 1346/     696 :                     .do_chip:
(1) 1347/     696 : DD 7E 03            		ld	a,(ix+chnl_Ins)		; Check intrument type FIRST
(1) 1348/     699 : B7                  		or	a
(1) 1349/     69A : C8                  		ret	z			; If 0 == stop
(1) 1350/     69B : 3D                  		dec	a			; inst-1
(1) 1351/     69C : E6 7F               		and	01111111b
(1) 1352/     69E : 21 FC 19            		ld	hl,instListOut		; hl - Temporal storage for instrument
(1) 1353/     6A1 : E5                  		push	hl
(1) 1354/     6A2 : CF                  		rst	8
(1) 1355/     6A3 : 07                  		rlca
(1) 1356/     6A4 : 07                  		rlca
(1) 1357/     6A5 : 07                  		rlca
(1) 1358/     6A6 : 47                  		ld	b,a
(1) 1359/     6A7 : E6 F8               		and	11111000b
(1) 1360/     6A9 : 4F                  		ld	c,a
(1) 1361/     6AA : 78                  		ld	a,b
(1) 1362/     6AB : AF                  		xor	a
(1) 1363/     6AC : E6 03               		and	00000011b
(1) 1364/     6AE : CF                  		rst	8
(1) 1365/     6AF : 47                  		ld	b,a
(1) 1366/     6B0 : EB                  		ex	hl,de
(1) 1367/     6B1 : FD 6E 1F            		ld	l,(iy+seq_RomInst)
(1) 1368/     6B4 : FD 66 20            		ld	h,(iy+(seq_RomInst+1))
(1) 1369/     6B7 : FD 7E 21            		ld	a,(iy+(seq_RomInst+2))
(1) 1370/     6BA : 09                  		add	hl,bc
(1) 1371/     6BB : CE 00               		adc	a,0
(1) 1372/     6BD : 01 08 00            		ld	bc,8			; 8 bytes
(1) 1373/     6C0 : CD DE 11            		call	readRom			; ** ROM access **
(1) 1374/     6C3 : E1                  		pop	hl
(1) 1375/     6C4 : E5                  		push	hl			; <-- save hl
(1) 1376/     6C5 : CD E0 06            		call	.grab_link
(1) 1377/     6C8 : D1                  		pop	de			; --> recover as de
(1) 1378/     6C9 :                     	; hl - current table
(1) 1379/     6C9 :                     	; de - instrument data
(1) 1380/     6C9 : FE FF               		cp	-1			; Found any link?
(1) 1381/     6CB : C8                  		ret	z
(1) 1382/     6CC : 23                  		inc	hl			; MANUAL SETTING ztbl_MasterVol
(1) 1383/     6CD : 23                  		inc	hl
(1) 1384/     6CE : 23                  		inc	hl
(1) 1385/     6CF : 23                  		inc	hl
(1) 1386/     6D0 : CF                  		rst	8
(1) 1387/     6D1 : FD 7E 0E            		ld	a,(iy+seq_VolMaster)
(1) 1388/     6D4 : 77                  		ld	(hl),a
(1) 1389/     6D5 : 01 06 00            		ld	bc,ztbl_InstCach-4	; Move to instr data
(1) 1390/     6D8 : 09                  		add	hl,bc
(1) 1391/     6D9 : EB                  		ex	hl,de			; <-- swap for ldir
(1) 1392/     6DA : 01 08 00            		ld	bc,8
(1) 1393/     6DD : ED B0               		ldir				; COPYPASTE instr data from temporal
(1) 1394/     6DF : C9                  		ret
(1) 1395/     6E0 :                     
(1) 1396/     6E0 :                     ; ----------------------------------------
(1) 1397/     6E0 :                     ; Search for a linked channel on the
(1) 1398/     6E0 :                     ; chip table
(1) 1399/     6E0 :                     ;
(1) 1400/     6E0 :                     ; Input:
(1) 1401/     6E0 :                     ; iy - Track buffer
(1) 1402/     6E0 :                     ; ix - Current channel
(1) 1403/     6E0 :                     ; hl - Intrument data
(1) 1404/     6E0 :                     ;
(1) 1405/     6E0 :                     ; Returns:
(1) 1406/     6E0 :                     ; hl | Channel table to use
(1) 1407/     6E0 :                     ;  a | Return value:
(1) 1408/     6E0 :                     ;       0 | Found
(1) 1409/     6E0 :                     ;      -1 | Not found
(1) 1410/     6E0 :                     ; ----------------------------------------
(1) 1411/     6E0 :                     
(1) 1412/     6E0 :                     .grab_link:
(1) 1413/     6E0 : 7E                  		ld	a,(hl)
(1) 1414/     6E1 : E6 F0               		and	11110000b
(1) 1415/     6E3 : 5F                  		ld	e,a			; e - NEW chip
(1) 1416/     6E4 : DD 7E 01            		ld	a,(ix+chnl_Chip)	; a - CURRENT chip in this channel
(1) 1417/     6E7 : E6 F0               		and	11110000b
(1) 1418/     6E9 : 28 72               		jr	z,.new_chip		; If current is blank, it's a NEW chip
(1) 1419/     6EB : BB                  		cp 	e			; CURRENT chip is same as NEW?
(1) 1420/     6EC : 28 11               		jr	z,.same_link		; If yes, check linked channel.
(1) 1421/     6EE : CF                  		rst	8
(1) 1422/     6EF : 57                  		ld	d,a			; d - Chip to silence
(1) 1423/     6F0 : D5                  		push	de
(1) 1424/     6F1 : CD 0B 07            		call	.srch_link		; Search OLD link
(1) 1425/     6F4 : D1                  		pop	de
(1) 1426/     6F5 : FE FF               		cp	-1
(1) 1427/     6F7 : 28 03               		jr	z,.dont_res
(1) 1428/     6F9 : CD 0E 10            		call	tblz_clear
(1) 1429/     6FC :                     .dont_res:
(1) 1430/     6FC : CF                  		rst	8
(1) 1431/     6FD : 18 5E               		jr	.new_chip
(1) 1432/     6FF :                     .same_link:
(1) 1433/     6FF : CD 0B 07            		call	.srch_link		; Search link
(1) 1434/     702 : FE FF               		cp	-1
(1) 1435/     704 : C0                  		ret	nz
(1) 1436/     705 : DD 5E 01            		ld	e,(ix+chnl_Chip)
(1) 1437/     708 : CF                  		rst	8
(1) 1438/     709 : 18 52               		jr	.new_chip
(1) 1439/     70B :                     
(1) 1440/     70B :                     ; ----------------------------------------
(1) 1441/     70B :                     ; Search same link
(1) 1442/     70B :                     ;
(1) 1443/     70B :                     ; a - Chip to search for
(1) 1444/     70B :                     ; e - NEW chip
(1) 1445/     70B :                     ; ----------------------------------------
(1) 1446/     70B :                     
(1) 1447/     70B :                     .srch_link:
(1) 1448/     70B : CD D0 07            		call	.pick_tbl		; Pick chip table in hl
(1) 1449/     70E : DD E5               		push	ix			; Copy ix to bc for checking
(1) 1450/     710 : C1                  		pop	bc
(1) 1451/     711 : B7                  		or	a			; Single table?
(1) 1452/     712 : FA 29 07            		jp	m,.singl_link
(1) 1453/     715 :                     .srch_lloop:
(1) 1454/     715 : 7E                  		ld	a,(hl)			; Read Table's LSB
(1) 1455/     716 : FE FF               		cp	-1			; If -1 (EOL) also return -1
(1) 1456/     718 : 28 3F               		jr	z,.not_samel
(1) 1457/     71A : B9                  		cp	c			; Same link LSB?
(1) 1458/     71B : 20 07               		jr	nz,.invldl
(1) 1459/     71D : 23                  		inc	hl
(1) 1460/     71E : CF                  		rst	8
(1) 1461/     71F : 7E                  		ld	a,(hl)
(1) 1462/     720 : 2B                  		dec	hl
(1) 1463/     721 : B8                  		cp	b			; Same link MSB?
(1) 1464/     722 : 28 13               		jr	z,.got_link
(1) 1465/     724 :                     .invldl:
(1) 1466/     724 : CD C9 07            		call	.nextsrch_tbl
(1) 1467/     727 : 18 EC               		jr	.srch_lloop
(1) 1468/     729 :                     
(1) 1469/     729 :                     ; --------------------------------
(1) 1470/     729 :                     ; PSGN/FM3/FM6
(1) 1471/     729 :                     ; --------------------------------
(1) 1472/     729 :                     
(1) 1473/     729 :                     .singl_link:
(1) 1474/     729 : 23                  		inc	hl			; Read MSB first
(1) 1475/     72A : 7E                  		ld	a,(hl)
(1) 1476/     72B : 2B                  		dec	hl
(1) 1477/     72C : CF                  		rst	8
(1) 1478/     72D : B8                  		cp	b			; MSB match?
(1) 1479/     72E : 20 29               		jr	nz,.not_samel
(1) 1480/     730 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1481/     731 : B9                  		cp	c
(1) 1482/     732 : 20 25               		jr	nz,.not_samel
(1) 1483/     734 : C3 5B 07            		jp	.rnot_psg
(1) 1484/     737 :                     
(1) 1485/     737 :                     ; ----------------------------------------
(1) 1486/     737 :                     ; Got the link, do special checks
(1) 1487/     737 :                     ; ----------------------------------------
(1) 1488/     737 :                     
(1) 1489/     737 :                     .got_link:
(1) 1490/     737 : E5                  		push	hl
(1) 1491/     738 : 23                  		inc	hl
(1) 1492/     739 : 23                  		inc	hl
(1) 1493/     73A : 23                  		inc	hl		; <-- ztbl_Chip
(1) 1494/     73B : CF                  		rst	8
(1) 1495/     73C : 4E                  		ld	c,(hl)		; c - ID
(1) 1496/     73D : E1                  		pop	hl
(1) 1497/     73E :                     	; PSG3/PSGN check
(1) 1498/     73E : 7B                  		ld	a,e
(1) 1499/     73F : FE 80               		cp	80h		; PSG?
(1) 1500/     741 : 20 18               		jr	nz,.rnot_psg
(1) 1501/     743 : 3A 2F 00            		ld	a,(psgHatMode)	; Tone3 enabled?
(1) 1502/     746 : E6 03               		and	011b
(1) 1503/     748 : FE 03               		cp	011b
(1) 1504/     74A : 20 0F               		jr	nz,.rnot_psg
(1) 1505/     74C : 79                  		ld	a,c		; Channel 2? (PSG3)
(1) 1506/     74D : FE 02               		cp	2
(1) 1507/     74F : 20 0A               		jr	nz,.rnot_psg
(1) 1508/     751 : CF                  		rst	8
(1) 1509/     752 : D5                  		push	de
(1) 1510/     753 : 16 80               		ld	d,80h		; Force silence
(1) 1511/     755 : CD 0E 10            		call	tblz_clear
(1) 1512/     758 : D1                  		pop	de
(1) 1513/     759 :                     .not_samel:
(1) 1514/     759 : 18 52               		jr	.set_asfull
(1) 1515/     75B :                     .rnot_psg:
(1) 1516/     75B : AF                  		xor	a
(1) 1517/     75C : C9                  		ret
(1) 1518/     75D :                     
(1) 1519/     75D :                     ; ----------------------------------------
(1) 1520/     75D :                     ; *** NEW CHIP ***
(1) 1521/     75D :                     ;
(1) 1522/     75D :                     ; Input:
(1) 1523/     75D :                     ; e - Chip to set
(1) 1524/     75D :                     ; ----------------------------------------
(1) 1525/     75D :                     
(1) 1526/     75D :                     .new_chip:
(1) 1527/     75D : 7B                  		ld	a,e			; Read NEW chip
(1) 1528/     75E : B7                  		or	a
(1) 1529/     75F : F2 AD 07            		jp	p,.set_asfull		; If Null, mark as full
(1) 1530/     762 : CD D0 07            		call	.pick_tbl		; Pick chip table
(1) 1531/     765 : CF                  		rst	8
(1) 1532/     766 : FD 4E 14            		ld	c,(iy+seq_Priority)	; c - Seq priority level
(1) 1533/     769 : B7                  		or	a			; Chip is single?
(1) 1534/     76A : FA 98 07            		jp	m,.singl_free
(1) 1535/     76D : E5                  		push	hl			; Backup START table
(1) 1536/     76E :                     ; PASS 1
(1) 1537/     76E :                     .srch_free:
(1) 1538/     76E : 7E                  		ld	a,(hl)			; Read LSB
(1) 1539/     76F : FE FF               		cp	-1			; If -1, return -1
(1) 1540/     771 : 28 0F               		jr	z,.pass_2
(1) 1541/     773 : 23                  		inc	hl
(1) 1542/     774 : 46                  		ld	b,(hl)			; Read MSB
(1) 1543/     775 : 2B                  		dec	hl
(1) 1544/     776 : B0                  		or	b
(1) 1545/     777 : 28 05               		jr	z,.found_tnew
(1) 1546/     779 : CD C9 07            		call	.nextsrch_tbl
(1) 1547/     77C : 18 F0               		jr	.srch_free
(1) 1548/     77E :                     .found_tnew:
(1) 1549/     77E : 33                  		inc	sp			; skip backup
(1) 1550/     77F : 33                  		inc	sp
(1) 1551/     780 : 18 36               		jr	.new_link
(1) 1552/     782 :                     ; PASS 2
(1) 1553/     782 :                     .pass_2:
(1) 1554/     782 : E1                  		pop	hl			; Recover START
(1) 1555/     783 :                     .next_prio:
(1) 1556/     783 : 7E                  		ld	a,(hl)			; Read LSB
(1) 1557/     784 : FE FF               		cp	-1			; If -1, return -1
(1) 1558/     786 : C8                  		ret	z
(1) 1559/     787 : 23                  		inc	hl
(1) 1560/     788 : 23                  		inc	hl
(1) 1561/     789 : 7E                  		ld	a,(hl)			; Read priority
(1) 1562/     78A : 2B                  		dec	hl
(1) 1563/     78B : 2B                  		dec	hl
(1) 1564/     78C : B7                  		or	a			; Failsafe zero priority overwrite
(1) 1565/     78D : 28 21               		jr	z,.ovrw_link
(1) 1566/     78F : B9                  		cp	c
(1) 1567/     790 : 38 1E               		jr	c,.ovrw_link		; PRIORITY
(1) 1568/     792 : CF                  		rst	8
(1) 1569/     793 : CD C9 07            		call	.nextsrch_tbl
(1) 1570/     796 : 18 EB               		jr	.next_prio
(1) 1571/     798 :                     
(1) 1572/     798 :                     ; ----------------------------------------
(1) 1573/     798 :                     ; Single slot PSGN/FM3/FM6
(1) 1574/     798 :                     ;
(1) 1575/     798 :                     ; c - priority
(1) 1576/     798 :                     ; e - chip
(1) 1577/     798 :                     ; ----------------------------------------
(1) 1578/     798 :                     
(1) 1579/     798 :                     .singl_free:
(1) 1580/     798 : E5                  		push	hl
(1) 1581/     799 : 46                  		ld	b,(hl)
(1) 1582/     79A : 23                  		inc	hl
(1) 1583/     79B : 7E                  		ld	a,(hl)
(1) 1584/     79C : 23                  		inc	hl
(1) 1585/     79D : 56                  		ld	d,(hl)		; this prio
(1) 1586/     79E : E1                  		pop	hl
(1) 1587/     79F : B0                  		or	b
(1) 1588/     7A0 : 28 0E               		jr	z,.ovrw_link
(1) 1589/     7A2 : CF                  		rst	8
(1) 1590/     7A3 : 7A                  		ld	a,d
(1) 1591/     7A4 : B7                  		or	a
(1) 1592/     7A5 : 28 09               		jr	z,.ovrw_link
(1) 1593/     7A7 : B9                  		cp	c
(1) 1594/     7A8 : 38 06               		jr	c,.ovrw_link	; PRIORITY
(1) 1595/     7AA : 28 04               		jr	z,.ovrw_link	; <-- ALWAYS overwrite
(1) 1596/     7AC : CF                  		rst	8
(1) 1597/     7AD :                     .set_asfull:
(1) 1598/     7AD : 3E FF               		ld	a,-1		; Return -1
(1) 1599/     7AF : C9                  		ret
(1) 1600/     7B0 :                     
(1) 1601/     7B0 :                     ; ----------------------------------------
(1) 1602/     7B0 :                     
(1) 1603/     7B0 :                     .ovrw_link:
(1) 1604/     7B0 : E5                  		push	hl
(1) 1605/     7B1 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 1606/     7B4 : CD 0E 10            		call	tblz_clear
(1) 1607/     7B7 : E1                  		pop	hl
(1) 1608/     7B8 :                     .new_link:
(1) 1609/     7B8 : CF                  		rst	8
(1) 1610/     7B9 : 23                  		inc	hl
(1) 1611/     7BA : 23                  		inc	hl
(1) 1612/     7BB :                     ; hl+2
(1) 1613/     7BB :                     .l_hiprio:
(1) 1614/     7BB : DD 73 01            		ld	(ix+chnl_Chip),e
(1) 1615/     7BE : DD E5               		push	ix
(1) 1616/     7C0 : D1                  		pop	de
(1) 1617/     7C1 : 71                  		ld	(hl),c		; Write priority
(1) 1618/     7C2 : 2B                  		dec	hl
(1) 1619/     7C3 : CF                  		rst	8
(1) 1620/     7C4 : 72                  		ld 	(hl),d		; MSB
(1) 1621/     7C5 : 2B                  		dec	hl
(1) 1622/     7C6 : 73                  		ld	(hl),e		; LSB
(1) 1623/     7C7 : AF                  		xor	a		; Return OK
(1) 1624/     7C8 : C9                  		ret
(1) 1625/     7C9 :                     
(1) 1626/     7C9 :                     ; ----------------------------------------
(1) 1627/     7C9 :                     
(1) 1628/     7C9 :                     .nextsrch_tbl:
(1) 1629/     7C9 : D5                  		push	de
(1) 1630/     7CA : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1631/     7CD : 19                  		add	hl,de
(1) 1632/     7CE : D1                  		pop	de
(1) 1633/     7CF : C9                  		ret
(1) 1634/     7D0 :                     
(1) 1635/     7D0 :                     ; ----------------------------------------
(1) 1636/     7D0 :                     ; Pick chip table
(1) 1637/     7D0 :                     ;
(1) 1638/     7D0 :                     ; Input:
(1) 1639/     7D0 :                     ; a  - Chip ID
(1) 1640/     7D0 :                     ;
(1) 1641/     7D0 :                     ; Output:
(1) 1642/     7D0 :                     ; hl - Current table
(1) 1643/     7D0 :                     ; a  - bit 7 only: multi or single table
(1) 1644/     7D0 :                     ; ----------------------------------------
(1) 1645/     7D0 :                     
(1) 1646/     7D0 :                     .pick_tbl:
(1) 1647/     7D0 : D5                  		push	de
(1) 1648/     7D1 : 0F                  		rrca
(1) 1649/     7D2 : 0F                  		rrca
(1) 1650/     7D3 : 0F                  		rrca
(1) 1651/     7D4 : 0F                  		rrca
(1) 1652/     7D5 : E6 07               		and	00000111b
(1) 1653/     7D7 : 87                  		add	a,a
(1) 1654/     7D8 : 21 00 1B            		ld	hl,tblList
(1) 1655/     7DB : E5                  		push	hl
(1) 1656/     7DC : 16 00               		ld	d,0
(1) 1657/     7DE : 5F                  		ld	e,a
(1) 1658/     7DF : 19                  		add	hl,de
(1) 1659/     7E0 : 5E                  		ld	e,(hl)
(1) 1660/     7E1 : 23                  		inc	hl
(1) 1661/     7E2 : 7E                  		ld	a,(hl)
(1) 1662/     7E3 : 57                  		ld	d,a
(1) 1663/     7E4 : E6 80               		and	10000000b
(1) 1664/     7E6 : CB BA               		res	7,d
(1) 1665/     7E8 : E1                  		pop	hl
(1) 1666/     7E9 : 19                  		add	hl,de
(1) 1667/     7EA : D1                  		pop	de
(1) 1668/     7EB : C9                  		ret
(1) 1669/     7EC :                     
(1) 1670/     7EC :                     ; ============================================
(1) 1671/     7EC :                     ; ----------------------------------------
(1) 1672/     7EC :                     ; Process chip using it's table
(1) 1673/     7EC :                     ;
(1) 1674/     7EC :                     ; iy - table to read
(1) 1675/     7EC :                     ; ----------------------------------------
(1) 1676/     7EC :                     
(1) 1677/     7EC :                     dtbl_multi:
(1) 1678/     7EC : FD 7E 00            		ld	a,(iy)
(1) 1679/     7EF : FE FF               		cp	-1
(1) 1680/     7F1 : C8                  		ret	z
(1) 1681/     7F2 : CF                  		rst	8
(1) 1682/     7F3 : CD 00 08            		call	dtbl_singl
(1) 1683/     7F6 : 11 12 00            		ld	de,MAX_TBLSIZE
(1) 1684/     7F9 : FD 19               		add	iy,de
(1) 1685/     7FB : CF                  		rst	8
(1) 1686/     7FC : 00                  		nop
(1) 1687/     7FD : 00                  		nop
(1) 1688/     7FE : 18 EC               		jr	dtbl_multi
(1) 1689/     800 :                     dtbl_singl:
(1) 1690/     800 : FD 5E 00            		ld	e,(iy)			; Read link
(1) 1691/     803 : FD 56 01            		ld	d,(iy+1)
(1) 1692/     806 : 7A                  		ld	a,d			; If no-zero, active
(1) 1693/     807 : B3                  		or	e
(1) 1694/     808 : 20 60               		jr	nz,.linked
(1) 1695/     80A : FD 7E 02            		ld	a,(iy+ztbl_Priority)	; Silence request?
(1) 1696/     80D : B7                  		or	a
(1) 1697/     80E : F0                  		ret	p			; Return if not.
(1) 1698/     80F : CF                  		rst	8
(1) 1699/     810 : FD 36 02 00         		ld	(iy+ztbl_Priority),0	; Reset request on memory
(1) 1700/     814 :                     
(1) 1701/     814 :                     ; ----------------------------------------
(1) 1702/     814 :                     ; chip-silence request
(1) 1703/     814 :                     ; iy - Table
(1) 1704/     814 :                     
(1) 1705/     814 : 06 00               		ld	b,0
(1) 1706/     816 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 1707/     819 : E6 F0               		and	11110000b
(1) 1708/     81B : FE 80               		cp	80h
(1) 1709/     81D : 28 1E               		jr	z,.siln_psg
(1) 1710/     81F : FE 90               		cp	90h
(1) 1711/     821 : 28 16               		jr	z,.siln_psg_n
(1) 1712/     823 : FE A0               		cp	0A0h
(1) 1713/     825 : 28 3D               		jr	z,.siln_fm
(1) 1714/     827 : FE B0               		cp	0B0h
(1) 1715/     829 : 28 39               		jr	z,.siln_fm
(1) 1716/     82B : CF                  		rst	8
(1) 1717/     82C : FE C0               		cp	0C0h
(1) 1718/     82E : 28 31               		jr	z,.siln_dac
(1) 1719/     830 : FE D0               		cp	0D0h
(1) 1720/     832 : 28 0F               		jr	z,.siln_pcm
(1) 1721/     834 : FE E0               		cp	0E0h
(1) 1722/     836 : 28 1C               		jr	z,.siln_pwm
(1) 1723/     838 : C9                  		ret
(1) 1724/     839 :                     .siln_psg_n:
(1) 1725/     839 : AF                  		xor	a
(1) 1726/     83A : 32 2F 00            		ld	(psgHatMode),a
(1) 1727/     83D :                     .siln_psg:
(1) 1728/     83D : CF                  		rst	8
(1) 1729/     83E : 21 55 17            		ld	hl,psgcom
(1) 1730/     841 : 18 1A               		jr	.rcyl_com
(1) 1731/     843 :                     
(1) 1732/     843 :                     ; --------------------------------
(1) 1733/     843 :                     
(1) 1734/     843 :                     .siln_pcm:
(1) 1735/     843 : 3E 01               		ld	a,1
(1) 1736/     845 : 32 D9 19            		ld	(mcdUpd),a
(1) 1737/     848 : CF                  		rst	8
(1) 1738/     849 : 21 FD 16            		ld	hl,pcmcom+32
(1) 1739/     84C : 09                  		add	hl,bc
(1) 1740/     84D : 36 FF               		ld	(hl),-1
(1) 1741/     84F : 21 DD 16            		ld	hl,pcmcom
(1) 1742/     852 : 18 09               		jr	.rcyl_com
(1) 1743/     854 :                     .siln_pwm:
(1) 1744/     854 : 3E 01               		ld	a,1
(1) 1745/     856 : 32 D8 19            		ld	(marsUpd),a
(1) 1746/     859 : CF                  		rst	8
(1) 1747/     85A : 21 1D 17            		ld	hl,pwmcom
(1) 1748/     85D :                     .rcyl_com:
(1) 1749/     85D : 09                  		add	hl,bc
(1) 1750/     85E : 36 04               		ld	(hl),100b	; key-cut
(1) 1751/     860 : C9                  		ret
(1) 1752/     861 :                     
(1) 1753/     861 :                     ; --------------------------------
(1) 1754/     861 :                     
(1) 1755/     861 :                     .siln_dac:
(1) 1756/     861 : CD 2A 14            		call	dac_off
(1) 1757/     864 :                     .siln_fm:
(1) 1758/     864 : CD 6B 0A            		call	.fm_tloff
(1) 1759/     867 : C3 63 0A            		jp	.fm_keyoff
(1) 1760/     86A :                     
(1) 1761/     86A :                     ; ----------------------------------------
(1) 1762/     86A :                     ; Process channel now
(1) 1763/     86A :                     ; iy - Table
(1) 1764/     86A :                     ; ix - Tracker channel
(1) 1765/     86A :                     .linked:
(1) 1766/     86A : 1A                  		ld	a,(de)		; ** chnl_Flags
(1) 1767/     86B : 47                  		ld	b,a		; b - flags to check
(1) 1768/     86C : E6 0F               		and	00001111b	; evin flags?
(1) 1769/     86E : C8                  		ret	z
(1) 1770/     86F : 78                  		ld	a,b
(1) 1771/     870 : E6 F0               		and	11110000b	; Keep OTHER bits
(1) 1772/     872 : 12                  		ld	(de),a		; ** clear chnl_Flags
(1) 1773/     873 : CF                  		rst	8
(1) 1774/     874 : FD E5               		push	iy		; table+10h instrment data
(1) 1775/     876 : D5                  		push	de
(1) 1776/     877 : DD E1               		pop	ix
(1) 1777/     879 : E1                  		pop	hl
(1) 1778/     87A : 11 0A 00            		ld	de,ztbl_InstCach	; Go to stored inst data
(1) 1779/     87D : 19                  		add	hl,de
(1) 1780/     87E :                     	; --------------------------------
(1) 1781/     87E :                     	;  b - Flags LR00evin (Eff|Vol|Ins|Note)
(1) 1782/     87E :                     	; iy - Our chip table
(1) 1783/     87E :                     	; ix - Track channel
(1) 1784/     87E :                     	; hl - Intrument data
(1) 1785/     87E : 78                  		ld	a,b		; Note and/or Inst?
(1) 1786/     87F : E6 03               		and	0011b
(1) 1787/     881 : C4 AC 08            		call	nz,.reset_effc	; Reset effects
(1) 1788/     884 : CB 50               		bit	2,b		; Volume
(1) 1789/     886 : C4 1C 0E            		call	nz,.volu
(1) 1790/     889 : CF                  		rst	8
(1) 1791/     88A : CB 40               		bit	0,b		; Note
(1) 1792/     88C : C4 BB 0F            		call	nz,.note
(1) 1793/     88F : CB 48               		bit	1,b		; Intrument
(1) 1794/     891 : C4 25 0E            		call	nz,.inst
(1) 1795/     894 : CB 58               		bit	3,b		; Effect
(1) 1796/     896 : C4 31 0D            		call	nz,.effc
(1) 1797/     899 : 7E                  		ld	a,(hl)		; Read INS type
(1) 1798/     89A : E6 70               		and	01110000b	; Filter bits
(1) 1799/     89C : 0F                  		rrca
(1) 1800/     89D : CF                  		rst	8
(1) 1801/     89E : 0F                  		rrca
(1) 1802/     89F : 0F                  		rrca
(1) 1803/     8A0 : 16 00               		ld	d,0
(1) 1804/     8A2 : 5F                  		ld	e,a
(1) 1805/     8A3 : 21 B9 08            		ld	hl,.mk_list
(1) 1806/     8A6 : 19                  		add	hl,de
(1) 1807/     8A7 : 7E                  		ld	a,(hl)
(1) 1808/     8A8 : 23                  		inc	hl
(1) 1809/     8A9 : 66                  		ld	h,(hl)
(1) 1810/     8AA : 6F                  		ld	l,a
(1) 1811/     8AB : E9                  		jp	(hl)
(1) 1812/     8AC :                     .reset_effc:
(1) 1813/     8AC : FD 36 06 00         		ld	(iy+ztbl_PitchBend),0
(1) 1814/     8B0 : FD 36 08 00         		ld	(iy+ztbl_VolSlide),0
(1) 1815/     8B4 : FD 36 07 00         		ld	(iy+ztbl_Volume),0
(1) 1816/     8B8 : C9                  		ret
(1) 1817/     8B9 :                     
(1) 1818/     8B9 :                     ; --------------------------------
(1) 1819/     8B9 :                     .mk_list:
(1) 1820/     8B9 : C7 08               		dw .mk_psg
(1) 1821/     8BB : C7 08               		dw .mk_psg
(1) 1822/     8BD : 7A 09               		dw .mk_fm
(1) 1823/     8BF : FE 09               		dw .mk_fm_sp
(1) 1824/     8C1 : B2 0B               		dw .mk_dac
(1) 1825/     8C3 : 08 0C               		dw .mk_pcm
(1) 1826/     8C5 : 88 0C               		dw .mk_pwm
(1) 1827/     8C7 :                     
(1) 1828/     8C7 :                     ; --------------------------------
(1) 1829/     8C7 :                     ; PSG and PSGN
(1) 1830/     8C7 :                     ; --------------------------------
(1) 1831/     8C7 :                     
(1) 1832/     8C7 :                     .mk_psg:
(1) 1833/     8C7 : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Note
(1) 1834/     8CA : DD E5               		push	ix			; * Save ix
(1) 1835/     8CC : CF                  		rst	8
(1) 1836/     8CD : DD 21 55 17         		ld	ix,psgcom		; ix - psgcom
(1) 1837/     8D1 : 16 00               		ld	d,0
(1) 1838/     8D3 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 1839/     8D6 : DD 19               		add	ix,de			; Get com index
(1) 1840/     8D8 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 1841/     8D9 : E6 03               		and	0011b
(1) 1842/     8DB : 28 4A               		jr	z,.psgc_proc		; Process only
(1) 1843/     8DD : 79                  		ld	a,c			; c - Note
(1) 1844/     8DE : B7                  		or	a
(1) 1845/     8DF : C8                  		ret	z
(1) 1846/     8E0 : CF                  		rst	8
(1) 1847/     8E1 : FE FE               		cp	-2			; Key cut?
(1) 1848/     8E3 : 28 32               		jr	z,.kycut_psg
(1) 1849/     8E5 : FE FF               		cp	-1			; Key off?
(1) 1850/     8E7 : 28 22               		jr	z,.kyoff_psg
(1) 1851/     8E9 : DD 36 00 01         		ld	(ix+COM),001b		; Set Key ON
(1) 1852/     8ED : 7B                  		ld	a,e			; a - Channel 0-3
(1) 1853/     8EE : 11 00 00            		ld	de,0			; Clear de
(1) 1854/     8F1 : FE 03               		cp	3			; NOISE channel?
(1) 1855/     8F3 : 20 0E               		jr	nz,.not_ns
(1) 1856/     8F5 : CF                  		rst	8
(1) 1857/     8F6 : 3A 2F 00            		ld	a,(psgHatMode)		; Tone 3?
(1) 1858/     8F9 : E6 03               		and	011b
(1) 1859/     8FB : FE 03               		cp	011b
(1) 1860/     8FD : C2 4A 09            		jp	nz,.psg_keyon		; Normal
(1) 1861/     900 : 11 18 00            		ld	de,12*2			; Add octave to freq
(1) 1862/     903 :                     .not_ns:
(1) 1863/     903 : CD 65 09            		call	.psg_getfreq
(1) 1864/     906 : 18 26               		jr	.psgc_keyon
(1) 1865/     908 :                     
(1) 1866/     908 :                     ; --------------------------------
(1) 1867/     908 :                     ; -1
(1) 1868/     908 :                     .kyoff_psgn:
(1) 1869/     908 : CD 20 09            		call	.kypsgn_hatoff
(1) 1870/     90B :                     .kyoff_psg:
(1) 1871/     90B : DD 36 00 02         		ld	(ix),010b		; Write key off
(1) 1872/     90F : DD E1               		pop	ix			; * Restore ix
(1) 1873/     911 : C3 07 10            		jp	.chnl_ulnk
(1) 1874/     914 :                     
(1) 1875/     914 :                     ; --------------------------------
(1) 1876/     914 :                     ; -2
(1) 1877/     914 :                     .kycut_psgn:
(1) 1878/     914 : CD 20 09            		call	.kypsgn_hatoff
(1) 1879/     917 :                     .kycut_psg:
(1) 1880/     917 : DD 36 00 04         		ld	(ix),100b		; Write key cut
(1) 1881/     91B : DD E1               		pop	ix			; * Restore ix
(1) 1882/     91D : C3 07 10            		jp	.chnl_ulnk
(1) 1883/     920 :                     
(1) 1884/     920 :                     
(1) 1885/     920 :                     .kypsgn_hatoff:
(1) 1886/     920 : 3E 00               		ld	a,000b
(1) 1887/     922 : 32 2F 00            		ld	(psgHatMode),a		; ** GLOBAL SETTING
(1) 1888/     925 : CF                  		rst	8
(1) 1889/     926 : C9                  		ret
(1) 1890/     927 :                     
(1) 1891/     927 :                     ; --------------------------------
(1) 1892/     927 :                     ; hl - current freq
(1) 1893/     927 :                     ; ix - psgcom
(1) 1894/     927 :                     ; b - flags
(1) 1895/     927 :                     
(1) 1896/     927 :                     .psgc_proc:
(1) 1897/     927 : CF                  		rst	8
(1) 1898/     928 : DD 6E 1C            		ld	l,(ix+DTL)		; Read saved freq
(1) 1899/     92B : DD 66 20            		ld	h,(ix+DTH)
(1) 1900/     92E :                     .psgc_keyon:
(1) 1901/     92E : FD 7E 06            		ld	a,(iy+ztbl_PitchBend)	; pitchbend
(1) 1902/     931 : B7                  		or	a
(1) 1903/     932 : CA 44 09            		jp	z,.no_req
(1) 1904/     935 : ED 44               		neg	a
(1) 1905/     937 : 5F                  		ld	e,a
(1) 1906/     938 : 4F                  		ld	c,a
(1) 1907/     939 : AF                  		xor	a
(1) 1908/     93A : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 1909/     93D : 3F                  		ccf
(1) 1910/     93E : CB 21               		sla	c
(1) 1911/     940 : 9F                  		sbc	a,a
(1) 1912/     941 : 57                  		ld	d,a
(1) 1913/     942 : CF                  		rst	8
(1) 1914/     943 : 19                  		add	hl,de
(1) 1915/     944 :                     .no_req:
(1) 1916/     944 : DD 75 1C            		ld	(ix+DTL),l
(1) 1917/     947 : DD 74 20            		ld	(ix+DTH),h
(1) 1918/     94A :                     .psg_keyon:
(1) 1919/     94A : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 1920/     94D : 87                  		add	a,a
(1) 1921/     94E : 5F                  		ld	e,a
(1) 1922/     94F : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Set current Volume
(1) 1923/     952 : 93                  		sub	a,e
(1) 1924/     953 : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 1925/     956 : ED 44               		neg	a
(1) 1926/     958 : CF                  		rst	8
(1) 1927/     959 : 87                  		add	a,a
(1) 1928/     95A : 87                  		add	a,a
(1) 1929/     95B : 30 02               		jr	nc,.vmuch
(1) 1930/     95D : 3E FF               		ld	a,-1
(1) 1931/     95F :                     .vmuch:
(1) 1932/     95F : DD 77 30            		ld	(ix+MVOL),a
(1) 1933/     962 : DD E1               		pop	ix			; * Restore ix
(1) 1934/     964 : C9                  		ret
(1) 1935/     965 :                     
(1) 1936/     965 :                     ; --------------------------------
(1) 1937/     965 :                     ; de - increment
(1) 1938/     965 :                     
(1) 1939/     965 :                     .psg_getfreq:
(1) 1940/     965 : 21 13 15            		ld	hl,psgFreq_List-(36*2)
(1) 1941/     968 : 19                  		add	hl,de
(1) 1942/     969 : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)	; de - note*2
(1) 1943/     96C : 19                  		add	hl,de
(1) 1944/     96D : 7E                  		ld	a,(hl)
(1) 1945/     96E : 23                  		inc	hl
(1) 1946/     96F : CF                  		rst	8
(1) 1947/     970 : 66                  		ld	h,(hl)
(1) 1948/     971 : 6F                  		ld	l,a
(1) 1949/     972 : 3A 88 1F            		ld	a,(palMode)
(1) 1950/     975 : B7                  		or	a
(1) 1951/     976 : 28 01               		jr	z,.fnot_pal
(1) 1952/     978 : 2B                  		dec	hl
(1) 1953/     979 :                     .fnot_pal:
(1) 1954/     979 : C9                  		ret
(1) 1955/     97A :                     
(1) 1956/     97A :                     ; --------------------------------
(1) 1957/     97A :                     ; FM
(1) 1958/     97A :                     ; --------------------------------
(1) 1959/     97A :                     
(1) 1960/     97A :                     .mk_fm:
(1) 1961/     97A : FD 4E 03            		ld	c,(iy+ztbl_Chip)	; c - YM key
(1) 1962/     97D : 78                  		ld	a,b			; Get NOTE and/or INS?
(1) 1963/     97E : E6 03               		and	0011b
(1) 1964/     980 : 28 32               		jr	z,.mkfm_proc		; Process only
(1) 1965/     982 : DD 7E 02            		ld	a,(ix+chnl_Note)	; Get IT note
(1) 1966/     985 : B7                  		or	a
(1) 1967/     986 : C8                  		ret	z
(1) 1968/     987 : FE FE               		cp	-2			; Key-cut?
(1) 1969/     989 : CA 57 0A            		jp	z,.fm_cut
(1) 1970/     98C : CF                  		rst	8
(1) 1971/     98D : FE FF               		cp	-1			; Key-off?
(1) 1972/     98F : CA 4E 0A            		jp	z,.fm_off
(1) 1973/     992 : CD 63 0A            		call	.fm_keyoff		; Turn FM keys off
(1) 1974/     995 : 79                  		ld	a,c
(1) 1975/     996 : FE 06               		cp	6			; Check FM6
(1) 1976/     998 : 20 05               		jr	nz,.not_dac
(1) 1977/     99A : CD 2A 14            		call	dac_off			; Turn DAC off
(1) 1978/     99D : 18 15               		jr	.mkfm_proc
(1) 1979/     99F :                     .not_dac:
(1) 1980/     99F : FE 02               		cp	2			; Check FM3
(1) 1981/     9A1 : 20 11               		jr	nz,.mkfm_proc
(1) 1982/     9A3 : 3A 30 00            		ld	a,(fmSpecial)		; FM3 Special active?
(1) 1983/     9A6 : B7                  		or	a
(1) 1984/     9A7 : 28 0B               		jr	z,.mkfm_proc
(1) 1985/     9A9 : CF                  		rst	8
(1) 1986/     9AA : AF                  		xor	a
(1) 1987/     9AB : 32 30 00            		ld	(fmSpecial),a
(1) 1988/     9AE : 11 00 27            		ld	de,2700h		; Turn FM3 Special OFF
(1) 1989/     9B1 : CD FF 13            		call	fm_send_1
(1) 1990/     9B4 :                     .mkfm_proc:
(1) 1991/     9B4 : CF                  		rst	8
(1) 1992/     9B5 : C5                  		push	bc
(1) 1993/     9B6 : FD 7E 05            		ld	a,(iy+ztbl_FreqIndx)
(1) 1994/     9B9 : 47                  		ld	b,a
(1) 1995/     9BA : E6 1F               		and	00011111b
(1) 1996/     9BC : 5F                  		ld	e,a
(1) 1997/     9BD : 16 00               		ld	d,0
(1) 1998/     9BF : 21 43 15            		ld	hl,fmFreq_List
(1) 1999/     9C2 : 19                  		add	hl,de
(1) 2000/     9C3 : 7E                  		ld	a,(hl)
(1) 2001/     9C4 : CF                  		rst	8
(1) 2002/     9C5 : 23                  		inc	hl
(1) 2003/     9C6 : 66                  		ld	h,(hl)
(1) 2004/     9C7 : 6F                  		ld	l,a			; hl - Current FM freq
(1) 2005/     9C8 : 3A 88 1F            		ld	a,(palMode)		; PAL speed check
(1) 2006/     9CB : B7                  		or	a
(1) 2007/     9CC : 28 04               		jr	z,.not_pal
(1) 2008/     9CE : 11 04 00            		ld	de,4			; freq + 4
(1) 2009/     9D1 : 19                  		add	hl,de
(1) 2010/     9D2 :                     .not_pal:
(1) 2011/     9D2 : 78                  		ld	a,b
(1) 2012/     9D3 : E6 E0               		and	11100000b
(1) 2013/     9D5 : 0F                  		rrca
(1) 2014/     9D6 : 0F                  		rrca
(1) 2015/     9D7 : B4                  		or	h
(1) 2016/     9D8 : 67                  		ld	h,a
(1) 2017/     9D9 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; Get pitchbend effect
(1) 2018/     9DC : CF                  		rst	8
(1) 2019/     9DD : AF                  		xor	a			; clear high
(1) 2020/     9DE : 3F                  		ccf				; clear carry
(1) 2021/     9DF : CB 23               		sla	e			; pitchbend << 2
(1) 2022/     9E1 : 00                  		nop				; **
(1) 2023/     9E2 : 9F                  		sbc	a,a			; get carry MSB
(1) 2024/     9E3 : 57                  		ld	d,a
(1) 2025/     9E4 : 19                  		add	hl,de			; Pitchbend the freq
(1) 2026/     9E5 : 79                  		ld	a,c
(1) 2027/     9E6 : E6 03               		and	011b
(1) 2028/     9E8 : F6 A4               		or	0A4h
(1) 2029/     9EA : 57                  		ld	d,a
(1) 2030/     9EB : 5C                  		ld	e,h
(1) 2031/     9EC : CF                  		rst	8
(1) 2032/     9ED : CD FB 13            		call	fm_autoreg
(1) 2033/     9F0 : 79                  		ld	a,c
(1) 2034/     9F1 : E6 03               		and	011b
(1) 2035/     9F3 : F6 A0               		or	0A0h
(1) 2036/     9F5 : 57                  		ld	d,a
(1) 2037/     9F6 : 5D                  		ld	e,l
(1) 2038/     9F7 : CD FB 13            		call	fm_autoreg
(1) 2039/     9FA : C1                  		pop	bc
(1) 2040/     9FB : C3 99 0A            		jp	.mkfm_set
(1) 2041/     9FE :                     
(1) 2042/     9FE :                     ; --------------------------------
(1) 2043/     9FE :                     ; FM3 special
(1) 2044/     9FE :                     ; --------------------------------
(1) 2045/     9FE :                     
(1) 2046/     9FE :                     ; TODO: Do to PAL freq increment
(1) 2047/     9FE :                     
(1) 2048/     9FE :                     .mk_fm_sp:
(1) 2049/     9FE : 0E 02               		ld	c,010b			; ** FM3 special ID
(1) 2050/     A00 : 78                  		ld	a,b			; New NOTE and/or INS?
(1) 2051/     A01 : E6 03               		and	0011b
(1) 2052/     A03 : CA 99 0A            		jp	z,.mkfm_set		; Process only
(1) 2053/     A06 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2054/     A09 : B7                  		or	a
(1) 2055/     A0A : C8                  		ret	z
(1) 2056/     A0B : FE FE               		cp	-2
(1) 2057/     A0D : CA 57 0A            		jp	z,.fm_cut
(1) 2058/     A10 : FE FF               		cp	-1
(1) 2059/     A12 : CA 4E 0A            		jp	z,.fm_off
(1) 2060/     A15 : CD 63 0A            		call	.fm_keyoff
(1) 2061/     A18 : CF                  		rst	8
(1) 2062/     A19 : 21 E1 17            		ld	hl,fmcach_3		; DIRECT point to FM3 data
(1) 2063/     A1C : 11 20 00            		ld	de,20h			; point to regs
(1) 2064/     A1F : 19                  		add	hl,de
(1) 2065/     A20 : DD E5               		push	ix
(1) 2066/     A22 : DD 21 46 0A         		ld	ix,.this_regs
(1) 2067/     A26 : 06 08               		ld	b,8
(1) 2068/     A28 :                     .wr_spc:
(1) 2069/     A28 : DD 56 00            		ld	d,(ix)			; Manually write the FM3 freqs
(1) 2070/     A2B : 5E                  		ld	e,(hl)
(1) 2071/     A2C : CD FF 13            		call	fm_send_1
(1) 2072/     A2F : CF                  		rst	8
(1) 2073/     A30 : 23                  		inc	hl
(1) 2074/     A31 : DD 23               		inc	ix
(1) 2075/     A33 : 10 F3               		djnz	.wr_spc
(1) 2076/     A35 : DD E1               		pop	ix
(1) 2077/     A37 : CD 99 0A            		call	.mkfm_set
(1) 2078/     A3A : 11 40 27            		ld	de,2740h		; Turn FM3 Special mode
(1) 2079/     A3D : CD FF 13            		call	fm_send_1
(1) 2080/     A40 : 3E 01               		ld	a,1
(1) 2081/     A42 : 32 30 00            		ld	(fmSpecial),a
(1) 2082/     A45 : C9                  		ret
(1) 2083/     A46 :                     .this_regs:
(1) 2084/     A46 : AD A9               		db 0ADh,0A9h
(1) 2085/     A48 : AC A8               		db 0ACh,0A8h
(1) 2086/     A4A : AE AA               		db 0AEh,0AAh
(1) 2087/     A4C : A6 A2               		db 0A6h,0A2h
(1) 2088/     A4E :                     
(1) 2089/     A4E :                     ; ----------------------------------------
(1) 2090/     A4E :                     
(1) 2091/     A4E :                     .fm_off:
(1) 2092/     A4E : CD 82 0A            		call	.fm_clrrsave
(1) 2093/     A51 : CD 63 0A            		call	.fm_keyoff
(1) 2094/     A54 : C3 07 10            		jp	.chnl_ulnk
(1) 2095/     A57 :                     .fm_cut:
(1) 2096/     A57 : CD 82 0A            		call	.fm_clrrsave
(1) 2097/     A5A : CD 63 0A            		call	.fm_keyoff
(1) 2098/     A5D : CD 6B 0A            		call	.fm_tloff
(1) 2099/     A60 : C3 07 10            		jp	.chnl_ulnk
(1) 2100/     A63 :                     
(1) 2101/     A63 :                     ; ----------------------------------------
(1) 2102/     A63 :                     ; iy - current FM table
(1) 2103/     A63 :                     
(1) 2104/     A63 :                     .fm_keyoff:
(1) 2105/     A63 : 16 28               		ld	d,28h
(1) 2106/     A65 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2107/     A68 : C3 FF 13            		jp	fm_send_1
(1) 2108/     A6B :                     
(1) 2109/     A6B :                     .fm_tloff:
(1) 2110/     A6B : 06 04               		ld	b,4
(1) 2111/     A6D : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2112/     A70 : 79                  		ld	a,c
(1) 2113/     A71 : E6 03               		and	011b
(1) 2114/     A73 : F6 40               		or	40h		; TL regs
(1) 2115/     A75 : 1E 7F               		ld	e,7Fh
(1) 2116/     A77 :                     .tl_down:
(1) 2117/     A77 : 57                  		ld	d,a
(1) 2118/     A78 :                     		; e - 7Fh
(1) 2119/     A78 : CD FB 13            		call	fm_autoreg
(1) 2120/     A7B : CF                  		rst	8
(1) 2121/     A7C : 7A                  		ld	a,d
(1) 2122/     A7D : C6 04               		add	a,4
(1) 2123/     A7F : 10 F6               		djnz	.tl_down
(1) 2124/     A81 : C9                  		ret
(1) 2125/     A82 :                     
(1) 2126/     A82 :                     .fm_clrrsave:
(1) 2127/     A82 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2128/     A85 : E6 07               		and	0111b
(1) 2129/     A87 : 87                  		add	a,a
(1) 2130/     A88 : 87                  		add	a,a
(1) 2131/     A89 : 21 81 18            		ld	hl,fmlist_rsave
(1) 2132/     A8C : 16 00               		ld	d,0
(1) 2133/     A8E : 5F                  		ld	e,a
(1) 2134/     A8F : 19                  		add	hl,de
(1) 2135/     A90 : 36 00               		ld	(hl),0
(1) 2136/     A92 : 23                  		inc	hl
(1) 2137/     A93 : 36 00               		ld	(hl),0
(1) 2138/     A95 : 23                  		inc	hl
(1) 2139/     A96 : 36 00               		ld	(hl),0
(1) 2140/     A98 : C9                  		ret
(1) 2141/     A99 :                     
(1) 2142/     A99 :                     ; ----------------------------------------
(1) 2143/     A99 :                     
(1) 2144/     A99 :                     .mkfm_set:
(1) 2145/     A99 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2146/     A9C : CD A2 0B            		call	.get_fmcach
(1) 2147/     A9F : E5                  		push	hl			; Save TOP
(1) 2148/     AA0 : 11 1C 00            		ld	de,1Ch			; Go to 1Ch (regs B0, B4...)
(1) 2149/     AA3 : 19                  		add	hl,de
(1) 2150/     AA4 : 46                  		ld	b,(hl)			; b - 0B0h algorithm
(1) 2151/     AA5 : E1                  		pop	hl			; Recover TOP
(1) 2152/     AA6 : CF                  		rst	8
(1) 2153/     AA7 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2154/     AAA : 79                  		ld	a,c
(1) 2155/     AAB : E6 03               		and	011b
(1) 2156/     AAD : F6 30               		or	30h			; Start at reg 30h
(1) 2157/     AAF : 57                  		ld	d,a
(1) 2158/     AB0 :                     	; hl - reg data
(1) 2159/     AB0 :                     	; b  - 0B0h algorithm
(1) 2160/     AB0 :                     	;  c - current FM channel 0-6
(1) 2161/     AB0 :                     	; d  - Starting FM reg
(1) 2162/     AB0 : CD 02 0B            		call	.mkfm_wregs		; 30h+
(1) 2163/     AB3 : CD 2B 0B            		call	.mkfm_tlvol		; 40h+
(1) 2164/     AB6 : CD 02 0B            		call	.mkfm_wregs		; 50h+
(1) 2165/     AB9 : CD 02 0B            		call	.mkfm_wregs		; 60h+
(1) 2166/     ABC : CD 02 0B            		call	.mkfm_wregs		; 70h+
(1) 2167/     ABF : CD 02 0B            		call	.mkfm_wregs		; 80h+
(1) 2168/     AC2 : CD 02 0B            		call	.mkfm_wregs		; 90h+
(1) 2169/     AC5 : 78                  		ld	a,b			; 0B0h algorithm
(1) 2170/     AC6 : 23                  		inc	hl
(1) 2171/     AC7 : 5F                  		ld	e,a
(1) 2172/     AC8 : 79                  		ld	a,c
(1) 2173/     AC9 : E6 03               		and	011b
(1) 2174/     ACB : F6 B0               		or	0B0h
(1) 2175/     ACD : 57                  		ld	d,a
(1) 2176/     ACE : CD FB 13            		call	fm_autoreg		; Write algorithm
(1) 2177/     AD1 : CF                  		rst	8
(1) 2178/     AD2 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning bits
(1) 2179/     AD5 : 2F                  		cpl				; REVERSE bits
(1) 2180/     AD6 : E6 30               		and	00110000b
(1) 2181/     AD8 : 07                  		rlca				; << 2
(1) 2182/     AD9 : 07                  		rlca
(1) 2183/     ADA : 5F                  		ld	e,a			; save as e
(1) 2184/     ADB : 7E                  		ld	a,(hl)			; 0B4h %00aa0ppp
(1) 2185/     ADC : 23                  		inc	hl
(1) 2186/     ADD : E6 3F               		and	00111111b
(1) 2187/     ADF : B3                  		or	e			; Merge panning
(1) 2188/     AE0 : 5F                  		ld	e,a
(1) 2189/     AE1 : 79                  		ld	a,c
(1) 2190/     AE2 : CF                  		rst	8
(1) 2191/     AE3 : E6 03               		and	011b
(1) 2192/     AE5 : F6 B4               		or	0B4h
(1) 2193/     AE7 : 57                  		ld	d,a
(1) 2194/     AE8 : CD FB 13            		call	fm_autoreg
(1) 2195/     AEB : 7E                  		ld	a,(hl)			; 022h
(1) 2196/     AEC : 23                  		inc	hl
(1) 2197/     AED : CB 5F               		bit	3,a			; Intrument wants LFO?
(1) 2198/     AEF : 28 06               		jr	z,.no_lfo
(1) 2199/     AF1 : 5F                  		ld	e,a
(1) 2200/     AF2 : 16 22               		ld	d,22h
(1) 2201/     AF4 : CD FF 13            		call	fm_send_1
(1) 2202/     AF7 :                     .no_lfo:
(1) 2203/     AF7 :                     
(1) 2204/     AF7 :                     
(1) 2205/     AF7 : CF                  		rst	8
(1) 2206/     AF8 : 7E                  		ld	a,(hl)			; 028h
(1) 2207/     AF9 : E6 F0               		and	11110000b
(1) 2208/     AFB : B1                  		or	c			; Merge FM channel
(1) 2209/     AFC : 5F                  		ld	e,a
(1) 2210/     AFD : 16 28               		ld	d,28h
(1) 2211/     AFF : C3 FF 13            		jp	fm_send_1		; Set keys
(1) 2212/     B02 :                     
(1) 2213/     B02 :                     ; ----------------------------------------
(1) 2214/     B02 :                     
(1) 2215/     B02 :                     .mkfm_wregs:
(1) 2216/     B02 : CF                  		rst	8
(1) 2217/     B03 : 5E                  		ld	e,(hl)
(1) 2218/     B04 : 23                  		inc	hl
(1) 2219/     B05 : CD FB 13            		call	fm_autoreg
(1) 2220/     B08 : 14                  		inc	d
(1) 2221/     B09 : 14                  		inc	d
(1) 2222/     B0A : 14                  		inc	d
(1) 2223/     B0B : 14                  		inc	d
(1) 2224/     B0C : 5E                  		ld	e,(hl)
(1) 2225/     B0D : 23                  		inc	hl
(1) 2226/     B0E : CF                  		rst	8
(1) 2227/     B0F : CD FB 13            		call	fm_autoreg
(1) 2228/     B12 : 14                  		inc	d
(1) 2229/     B13 : 14                  		inc	d
(1) 2230/     B14 : 14                  		inc	d
(1) 2231/     B15 : 14                  		inc	d
(1) 2232/     B16 : 5E                  		ld	e,(hl)
(1) 2233/     B17 : 23                  		inc	hl
(1) 2234/     B18 : CD FB 13            		call	fm_autoreg
(1) 2235/     B1B : 14                  		inc	d
(1) 2236/     B1C : CF                  		rst	8
(1) 2237/     B1D : 14                  		inc	d
(1) 2238/     B1E : 14                  		inc	d
(1) 2239/     B1F : 14                  		inc	d
(1) 2240/     B20 : 5E                  		ld	e,(hl)
(1) 2241/     B21 : 23                  		inc	hl
(1) 2242/     B22 : CD FB 13            		call	fm_autoreg
(1) 2243/     B25 : 14                  		inc	d
(1) 2244/     B26 : 14                  		inc	d
(1) 2245/     B27 : 14                  		inc	d
(1) 2246/     B28 : 14                  		inc	d
(1) 2247/     B29 : CF                  		rst	8
(1) 2248/     B2A : C9                  		ret
(1) 2249/     B2B :                     
(1) 2250/     B2B :                     ; ----------------------------------------
(1) 2251/     B2B :                     ; Write 40+ TL w/volume
(1) 2252/     B2B :                     
(1) 2253/     B2B :                     ; hl - TL reg data
(1) 2254/     B2B :                     ; b - current 0B0h
(1) 2255/     B2B :                     ; d - 40h+
(1) 2256/     B2B :                     
(1) 2257/     B2B :                     .mkfm_tlvol:
(1) 2258/     B2B : 78                  		ld	a,b			; Read 0B0h copy
(1) 2259/     B2C : C5                  		push	bc
(1) 2260/     B2D : E5                  		push	hl
(1) 2261/     B2E : 21 9A 0B            		ld	hl,.fm_cindx		; hl - jump carry list
(1) 2262/     B31 : E6 07               		and	0111b
(1) 2263/     B33 : 06 00               		ld	b,0
(1) 2264/     B35 : 4F                  		ld	c,a
(1) 2265/     B36 : 09                  		add	hl,bc
(1) 2266/     B37 : CF                  		rst	8
(1) 2267/     B38 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2268/     B3B : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2269/     B3E : FD 96 04            		sub	a,(iy+ztbl_MasterVol)	; + MASTER vol
(1) 2270/     B41 : 4F                  		ld	c,a			; c - Current Volume
(1) 2271/     B42 : 46                  		ld	b,(hl)			; b - Current jump-carry byte
(1) 2272/     B43 : E1                  		pop	hl
(1) 2273/     B44 : CB 08               		rrc	b			; OP1
(1) 2274/     B46 : DC 7D 0B            		call	c,.write_tl
(1) 2275/     B49 : D4 8F 0B            		call	nc,.write_ntl
(1) 2276/     B4C : 23                  		inc	hl
(1) 2277/     B4D : 14                  		inc	d
(1) 2278/     B4E : 14                  		inc	d
(1) 2279/     B4F : CF                  		rst	8
(1) 2280/     B50 : 14                  		inc	d
(1) 2281/     B51 : 14                  		inc	d
(1) 2282/     B52 : CB 08               		rrc	b			; OP2
(1) 2283/     B54 : DC 7D 0B            		call	c,.write_tl
(1) 2284/     B57 : D4 8F 0B            		call	nc,.write_ntl
(1) 2285/     B5A : 23                  		inc	hl
(1) 2286/     B5B : 14                  		inc	d
(1) 2287/     B5C : 14                  		inc	d
(1) 2288/     B5D : 14                  		inc	d
(1) 2289/     B5E : 14                  		inc	d
(1) 2290/     B5F : CB 08               		rrc	b			; OP3
(1) 2291/     B61 : DC 7D 0B            		call	c,.write_tl
(1) 2292/     B64 : D4 8F 0B            		call	nc,.write_ntl
(1) 2293/     B67 : 23                  		inc	hl
(1) 2294/     B68 : CF                  		rst	8
(1) 2295/     B69 : 14                  		inc	d
(1) 2296/     B6A : 14                  		inc	d
(1) 2297/     B6B : 14                  		inc	d
(1) 2298/     B6C : 14                  		inc	d
(1) 2299/     B6D : CB 08               		rrc	b			; OP4
(1) 2300/     B6F : DC 7D 0B            		call	c,.write_tl
(1) 2301/     B72 : D4 8F 0B            		call	nc,.write_ntl
(1) 2302/     B75 : 23                  		inc	hl
(1) 2303/     B76 : 14                  		inc	d
(1) 2304/     B77 : 14                  		inc	d
(1) 2305/     B78 : 14                  		inc	d
(1) 2306/     B79 : 14                  		inc	d
(1) 2307/     B7A : CF                  		rst	8
(1) 2308/     B7B : C1                  		pop	bc
(1) 2309/     B7C : C9                  		ret
(1) 2310/     B7D :                     
(1) 2311/     B7D :                     ; --------------------------------
(1) 2312/     B7D :                     
(1) 2313/     B7D :                     .write_tl:
(1) 2314/     B7D : 7E                  		ld	a,(hl)
(1) 2315/     B7E : 91                  		sub	a,c			; reg - volume
(1) 2316/     B7F : F2 84 0B            		jp	p,.keep_tlmx
(1) 2317/     B82 : 3E 7F               		ld	a,7Fh			; <-- maximum TL
(1) 2318/     B84 :                     .keep_tlmx:
(1) 2319/     B84 : C5                  		push	bc
(1) 2320/     B85 : 5F                  		ld	e,a
(1) 2321/     B86 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2322/     B89 : CD FB 13            		call	fm_autoreg
(1) 2323/     B8C : CF                  		rst	8
(1) 2324/     B8D : C1                  		pop	bc
(1) 2325/     B8E : C9                  		ret
(1) 2326/     B8F :                     
(1) 2327/     B8F :                     .write_ntl:
(1) 2328/     B8F : C5                  		push	bc
(1) 2329/     B90 : 5E                  		ld	e,(hl)
(1) 2330/     B91 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 2331/     B94 : CD FB 13            		call	fm_autoreg
(1) 2332/     B97 : CF                  		rst	8
(1) 2333/     B98 : C1                  		pop	bc
(1) 2334/     B99 : C9                  		ret
(1) 2335/     B9A :                     
(1) 2336/     B9A :                     ; --------------------------------
(1) 2337/     B9A :                     ; Jump carry list
(1) 2338/     B9A :                     .fm_cindx:
(1) 2339/     B9A : 08                  		db 1000b
(1) 2340/     B9B : 08                  		db 1000b
(1) 2341/     B9C : 08                  		db 1000b
(1) 2342/     B9D : 08                  		db 1000b
(1) 2343/     B9E : 0C                  		db 1100b
(1) 2344/     B9F : 0E                  		db 1110b
(1) 2345/     BA0 : 0E                  		db 1110b
(1) 2346/     BA1 : 0F                  		db 1111b
(1) 2347/     BA2 :                     
(1) 2348/     BA2 :                     ; --------------------------------
(1) 2349/     BA2 :                     ; Input:
(1) 2350/     BA2 :                     ; a - FM id (0-2,4-6)
(1) 2351/     BA2 :                     ;
(1) 2352/     BA2 :                     ; Ouput:
(1) 2353/     BA2 :                     ; hl - instrument data
(1) 2354/     BA2 :                     ;
(1) 2355/     BA2 :                     ; Uses:
(1) 2356/     BA2 :                     ; de
(1) 2357/     BA2 :                     ; --------------------------------
(1) 2358/     BA2 :                     
(1) 2359/     BA2 :                     .get_fmcach:
(1) 2360/     BA2 : 21 D2 19            		ld	hl,fmcach_list
(1) 2361/     BA5 : E6 07               		and	0111b
(1) 2362/     BA7 : 16 00               		ld	d,0
(1) 2363/     BA9 : 87                  		add	a,a
(1) 2364/     BAA : 5F                  		ld	e,a
(1) 2365/     BAB : CF                  		rst	8
(1) 2366/     BAC : 19                  		add	hl,de
(1) 2367/     BAD : 7E                  		ld	a,(hl)
(1) 2368/     BAE : 23                  		inc	hl
(1) 2369/     BAF : 66                  		ld	h,(hl)
(1) 2370/     BB0 : 6F                  		ld	l,a
(1) 2371/     BB1 : C9                  		ret
(1) 2372/     BB2 :                     
(1) 2373/     BB2 :                     ; --------------------------------
(1) 2374/     BB2 :                     ; DAC
(1) 2375/     BB2 :                     ; --------------------------------
(1) 2376/     BB2 :                     
(1) 2377/     BB2 :                     .mk_dac:
(1) 2378/     BB2 : 78                  		ld	a,b
(1) 2379/     BB3 : E6 03               		and	0011b
(1) 2380/     BB5 : 28 21               		jr	z,.dac_proc
(1) 2381/     BB7 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 2382/     BBA : B7                  		or	a
(1) 2383/     BBB : C8                  		ret	z
(1) 2384/     BBC : FE FE               		cp	-2
(1) 2385/     BBE : CA CC 0B            		jp	z,.dac_cut
(1) 2386/     BC1 : FE FF               		cp	-1
(1) 2387/     BC3 : CA D2 0B            		jp	z,.dac_off
(1) 2388/     BC6 : CD D8 0B            		call	.dac_proc
(1) 2389/     BC9 : C3 3F 14            		jp	dac_play
(1) 2390/     BCC :                     .dac_cut:
(1) 2391/     BCC : CD 2A 14            		call	dac_off
(1) 2392/     BCF : C3 07 10            		jp	.chnl_ulnk
(1) 2393/     BD2 :                     .dac_off:
(1) 2394/     BD2 : CD 2A 14            		call	dac_off
(1) 2395/     BD5 : C3 07 10            		jp	.chnl_ulnk
(1) 2396/     BD8 :                     .dac_proc:
(1) 2397/     BD8 : 16 00               		ld	d,0			; Freq index
(1) 2398/     BDA : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2399/     BDD : 21 BB 15            		ld	hl,wavFreq_List-(2*36)
(1) 2400/     BE0 : 19                  		add	hl,de
(1) 2401/     BE1 : 7E                  		ld	a,(hl)
(1) 2402/     BE2 : 23                  		inc	hl
(1) 2403/     BE3 : 66                  		ld	h,(hl)
(1) 2404/     BE4 : 6F                  		ld	l,a
(1) 2405/     BE5 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2406/     BE8 : CF                  		rst	8
(1) 2407/     BE9 : AF                  		xor	a			; Clear high
(1) 2408/     BEA : 3F                  		ccf				; Clear carry
(1) 2409/     BEB : CB 23               		sla	e			; << 1
(1) 2410/     BED : 9F                  		sbc	a,a			; Get carry MSB
(1) 2411/     BEE : 57                  		ld	d,a
(1) 2412/     BEF : 19                  		add	hl,de
(1) 2413/     BF0 : 22 F3 1C            		ld	(wave_Pitch),hl
(1) 2414/     BF3 : D9                  		exx				; *
(1) 2415/     BF4 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; *
(1) 2416/     BF8 : D9                  		exx				; *
(1) 2417/     BF9 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Read panning
(1) 2418/     BFC : 2F                  		cpl				; REVERSE bits
(1) 2419/     BFD : E6 30               		and	00110000b
(1) 2420/     BFF : 07                  		rlca
(1) 2421/     C00 : 07                  		rlca
(1) 2422/     C01 : CF                  		rst	8
(1) 2423/     C02 : 5F                  		ld	e,a
(1) 2424/     C03 : 16 B6               		ld	d,0B6h			; Channel 6 panning
(1) 2425/     C05 : C3 0A 14            		jp	fm_send_2
(1) 2426/     C08 :                     
(1) 2427/     C08 :                     ; --------------------------------
(1) 2428/     C08 :                     ; PCM
(1) 2429/     C08 :                     ; --------------------------------
(1) 2430/     C08 :                     
(1) 2431/     C08 :                     .mk_pcm:
(1) 2433/     C08 : 16 00               		ld	d,0
(1) 2434/     C0A : FD 5E 03            		ld	e,(iy+ztbl_Chip)	; e - Channel ID
(1) 2435/     C0D : DD 4E 02            		ld	c,(ix+chnl_Note)	; c - Current note
(1) 2436/     C10 : DD E5               		push	ix
(1) 2437/     C12 : DD 21 DD 16         		ld	ix,pcmcom
(1) 2438/     C16 : DD 19               		add	ix,de
(1) 2439/     C18 : 1E 08               		ld	e,00001000b
(1) 2440/     C1A : CF                  		rst	8
(1) 2441/     C1B : 78                  		ld	a,b
(1) 2442/     C1C : E6 03               		and	0011b			; Note and Ins?
(1) 2443/     C1E : 28 11               		jr	z,.mkpcm_wrton
(1) 2444/     C20 : 79                  		ld	a,c
(1) 2445/     C21 : B7                  		or	a
(1) 2446/     C22 : C8                  		ret	z
(1) 2447/     C23 : FE FE               		cp	-2
(1) 2448/     C25 : CA 79 0C            		jp	z,.pcm_cut
(1) 2449/     C28 : FE FF               		cp	-1
(1) 2450/     C2A : CA 72 0C            		jp	z,.pcm_off
(1) 2451/     C2D : 18 00               		jr	.pcm_note
(1) 2452/     C2F :                     .pcm_note:
(1) 2453/     C2F :                     ; 		ld	(ix+32),-1
(1) 2454/     C2F : 1E 01               		ld	e,00000001b		; KeyON request
(1) 2455/     C31 :                     .mkpcm_wrton:
(1) 2456/     C31 : DD 73 00            		ld	(ix),e			; Write key-on bit
(1) 2457/     C34 : CD 13 0D            		call	.readfreq_pcm
(1) 2458/     C37 : 11 08 00            		ld	de,8			; Go to Pitch
(1) 2459/     C3A : DD 19               		add	ix,de
(1) 2460/     C3C : DD 74 00            		ld	(ix),h			; Set pitch
(1) 2461/     C3F : DD 19               		add	ix,de
(1) 2462/     C41 : DD 75 00            		ld	(ix),l
(1) 2463/     C44 : DD 19               		add	ix,de			; Go to volume
(1) 2464/     C46 :                     	; PCM volume
(1) 2465/     C46 : 0E FF               		ld	c,-1
(1) 2466/     C48 : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2467/     C4B : FE 40               		cp	40h
(1) 2468/     C4D : 28 14               		jr	z,.vpcm_siln
(1) 2469/     C4F : 30 12               		jr	nc,.vpcm_siln
(1) 2470/     C51 : B7                  		or	a
(1) 2471/     C52 : FA 63 0C            		jp	m,.vpcm_siln
(1) 2472/     C55 : 87                  		add	a,a
(1) 2473/     C56 : 47                  		ld	b,a
(1) 2474/     C57 : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current Volume
(1) 2475/     C5A : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2476/     C5D : 87                  		add	a,a			; * 2
(1) 2477/     C5E : 3F                  		ccf
(1) 2478/     C5F : 98                  		sbc	a,b			; + MASTER vol
(1) 2479/     C60 : 87                  		add	a,a			; *2
(1) 2480/     C61 : 38 03               		jr	c,.vpcm_carry
(1) 2481/     C63 :                     .vpcm_siln:
(1) 2482/     C63 : AF                  		xor	a
(1) 2483/     C64 : 18 01               		jr	.vpcm_zero
(1) 2484/     C66 :                     .vpcm_carry:
(1) 2485/     C66 : 81                  		add	a,c
(1) 2486/     C67 :                     .vpcm_zero:
(1) 2487/     C67 : DD 77 00            		ld	(ix),a
(1) 2488/     C6A : 3E 01               		ld	a,1
(1) 2489/     C6C : 32 D9 19            		ld	(mcdUpd),a
(1) 2490/     C6F : DD E1               		pop	ix
(1) 2491/     C71 : C9                  		ret
(1) 2492/     C72 :                     
(1) 2493/     C72 :                     ; --------------------------------
(1) 2494/     C72 :                     ; -1
(1) 2495/     C72 :                     .pcm_off:
(1) 2496/     C72 : CF                  		rst	8
(1) 2497/     C73 : DD 36 00 02         		ld	(ix),0010b
(1) 2498/     C77 : 18 05               		jr	.pcm_setcoff
(1) 2499/     C79 :                     ; -2
(1) 2500/     C79 :                     .pcm_cut:
(1) 2501/     C79 : CF                  		rst	8
(1) 2502/     C7A : DD 36 00 04         		ld	(ix),0100b
(1) 2503/     C7E :                     .pcm_setcoff:
(1) 2504/     C7E : 3E 01               		ld	a,1
(1) 2505/     C80 : 32 D9 19            		ld	(mcdUpd),a
(1) 2506/     C83 : DD E1               		pop	ix
(1) 2507/     C85 : C3 07 10            		jp	.chnl_ulnk
(1) 2511/     C88 :                     
(1) 2512/     C88 :                     ; --------------------------------
(1) 2513/     C88 :                     ; PWM
(1) 2514/     C88 :                     ; --------------------------------
(1) 2515/     C88 :                     
(1) 2516/     C88 :                     .mk_pwm:
(1) 2518/     C88 : DD 6E 02            		ld	l,(ix+chnl_Note)
(1) 2519/     C8B : DD 4E 00            		ld	c,(ix+chnl_Flags)	; c - Panning bits
(1) 2520/     C8E : 16 00               		ld	d,0
(1) 2521/     C90 : FD 5E 03            		ld	e,(iy+ztbl_Chip)	; e - Channel ID
(1) 2522/     C93 : DD E5               		push	ix
(1) 2523/     C95 : DD 21 1D 17         		ld	ix,pwmcom
(1) 2524/     C99 : DD 19               		add	ix,de
(1) 2525/     C9B : CF                  		rst	8
(1) 2526/     C9C : 78                  		ld	a,b
(1) 2527/     C9D : E6 03               		and	0011b			; Note and Ins?
(1) 2528/     C9F : 28 0F               		jr	z,.pw_effc
(1) 2529/     CA1 : 7D                  		ld	a,l
(1) 2530/     CA2 : B7                  		or	a
(1) 2531/     CA3 : C8                  		ret	z
(1) 2532/     CA4 : FE FE               		cp	-2
(1) 2533/     CA6 : CA 04 0D            		jp	z,.pwm_cut
(1) 2534/     CA9 : FE FF               		cp	-1
(1) 2535/     CAB : CA FD 0C            		jp	z,.pwm_off
(1) 2536/     CAE : 18 04               		jr	.pw_note
(1) 2537/     CB0 :                     .pw_effc:
(1) 2538/     CB0 : 1E 09               		ld	e,00001001b
(1) 2539/     CB2 : 18 02               		jr	.pw_send
(1) 2540/     CB4 :                     .pw_note:
(1) 2541/     CB4 : 1E 01               		ld	e,00000001b		; KeyON request
(1) 2542/     CB6 :                     .pw_send:
(1) 2543/     CB6 : DD 73 00            		ld	(ix),e			; Set command
(1) 2544/     CB9 : CD 18 0D            		call	.readfreq_pwm
(1) 2545/     CBC :                     	; hl - current freq
(1) 2546/     CBC : 79                  		ld	a,c			; Read panning bits
(1) 2547/     CBD : 2F                  		cpl				; Reverse and filter bits
(1) 2548/     CBE : E6 30               		and	00110000b
(1) 2549/     CC0 : CF                  		rst	8
(1) 2550/     CC1 : 5F                  		ld	e,a			; Save panning to e
(1) 2551/     CC2 : FD 7E 04            		ld	a,(iy+ztbl_MasterVol)
(1) 2552/     CC5 : FE 40               		cp	40h
(1) 2553/     CC7 : 28 0C               		jr	z,.vpwm_siln
(1) 2554/     CC9 : 30 0A               		jr	nc,.vpwm_siln
(1) 2555/     CCB : 4F                  		ld	c,a
(1) 2556/     CCC : FD 7E 07            		ld	a,(iy+ztbl_Volume)	; Read current volume
(1) 2557/     CCF : FD 96 08            		sub	a,(iy+ztbl_VolSlide)
(1) 2558/     CD2 : 91                  		sub	a,c			; + MASTER vol
(1) 2559/     CD3 : 18 02               		jr	.vpwm_much
(1) 2560/     CD5 :                     .vpwm_siln:
(1) 2561/     CD5 : 3E C0               		ld	a,-40h
(1) 2562/     CD7 :                     .vpwm_much:
(1) 2563/     CD7 : ED 44               		neg	a
(1) 2564/     CD9 : E6 FC               		and	11111100b
(1) 2565/     CDB : B4                  		or	h		; Merge MSB freq
(1) 2566/     CDC : 01 08 00            		ld	bc,8
(1) 2567/     CDF : DD 09               		add	ix,bc
(1) 2568/     CE1 : DD 77 00            		ld	(ix),a
(1) 2569/     CE4 : DD 09               		add	ix,bc
(1) 2570/     CE6 : DD 75 00            		ld	(ix),l
(1) 2571/     CE9 : DD 09               		add	ix,bc
(1) 2572/     CEB : CF                  		rst	8
(1) 2573/     CEC : DD 7E 00            		ld	a,(ix)
(1) 2574/     CEF : E6 CF               		and	11001111b
(1) 2575/     CF1 : B3                  		or	e		; Set panning bits
(1) 2576/     CF2 : DD 77 00            		ld	(ix),a
(1) 2577/     CF5 : 3E 01               		ld	a,1
(1) 2578/     CF7 : 32 D8 19            		ld	(marsUpd),a
(1) 2579/     CFA : DD E1               		pop	ix
(1) 2580/     CFC : C9                  		ret
(1) 2581/     CFD :                     
(1) 2582/     CFD :                     ; --------------------------------
(1) 2583/     CFD :                     ; -1
(1) 2584/     CFD :                     .pwm_off:
(1) 2585/     CFD : CF                  		rst	8
(1) 2586/     CFE : DD 36 00 02         		ld	(ix),010b
(1) 2587/     D02 : 18 05               		jr	.pwm_setcoff
(1) 2588/     D04 :                     ; -2
(1) 2589/     D04 :                     .pwm_cut:
(1) 2590/     D04 : CF                  		rst	8
(1) 2591/     D05 : DD 36 00 04         		ld	(ix),100b
(1) 2592/     D09 :                     .pwm_setcoff:
(1) 2593/     D09 : 3E 01               		ld	a,1
(1) 2594/     D0B : 32 D8 19            		ld	(marsUpd),a
(1) 2595/     D0E : DD E1               		pop	ix
(1) 2596/     D10 : C3 07 10            		jp	.chnl_ulnk
(1) 2600/     D13 :                     
(1) 2601/     D13 :                     ; --------------------------------
(1) 2602/     D13 :                     ; SHARED routine
(1) 2603/     D13 :                     
(1) 2604/     D13 :                     .readfreq_pcm:
(1) 2605/     D13 : 21 1D 16            		ld	hl,wavFreq_CdPcm-(2*36)	; <-- one octave lower
(1) 2606/     D16 : 18 03               		jr	.set_wavfreq
(1) 2607/     D18 :                     .readfreq_pwm:
(1) 2608/     D18 : 21 BB 15            		ld	hl,wavFreq_List-(2*36)
(1) 2609/     D1B :                     .set_wavfreq:
(1) 2610/     D1B : 16 00               		ld	d,0			; Freq index
(1) 2611/     D1D : FD 5E 05            		ld	e,(iy+ztbl_FreqIndx)
(1) 2612/     D20 : 19                  		add	hl,de
(1) 2613/     D21 : 7E                  		ld	a,(hl)
(1) 2614/     D22 : 23                  		inc	hl
(1) 2615/     D23 : 66                  		ld	h,(hl)
(1) 2616/     D24 : 6F                  		ld	l,a
(1) 2617/     D25 : FD 5E 06            		ld	e,(iy+ztbl_PitchBend)	; pitchbend
(1) 2618/     D28 : CF                  		rst	8
(1) 2619/     D29 : AF                  		xor	a			; Clear high
(1) 2620/     D2A : 3F                  		ccf				; Clear carry
(1) 2621/     D2B : CB 23               		sla	e			; Get carry MSB
(1) 2622/     D2D : 9F                  		sbc	a,a			; -1 if carry is set
(1) 2623/     D2E : 57                  		ld	d,a
(1) 2624/     D2F : 19                  		add	hl,de
(1) 2625/     D30 : C9                  		ret
(1) 2626/     D31 :                     
(1) 2627/     D31 :                     ; ----------------------------------------
(1) 2628/     D31 :                     ; NEW effect
(1) 2629/     D31 :                     ; ----------------------------------------
(1) 2630/     D31 :                     
(1) 2631/     D31 :                     .effc:
(1) 2632/     D31 : DD 5E 06            		ld	e,(ix+chnl_EffArg)	; e - effect data
(1) 2633/     D34 : DD 7E 05            		ld	a,(ix+chnl_EffId)	; d - effect id
(1) 2634/     D37 : 57                  		ld	d,a
(1) 2635/     D38 : CF                  		rst	8
(1) 2636/     D39 : FE 04               		cp	4			; Effect D?
(1) 2637/     D3B : 28 0F               		jr	z,.effc_D
(1) 2638/     D3D : FE 05               		cp	5			; Effect E?
(1) 2639/     D3F : 28 44               		jr	z,.effc_E
(1) 2640/     D41 : FE 06               		cp	6			; Effect F?
(1) 2641/     D43 : 28 4F               		jr	z,.effc_F
(1) 2642/     D45 : CF                  		rst	8
(1) 2643/     D46 : FE 18               		cp	24			; Effect X?
(1) 2644/     D48 : CA A5 0D            		jp	z,.effc_X
(1) 2645/     D4B : C9                  		ret
(1) 2646/     D4C :                     
(1) 2647/     D4C :                     ; ----------------------------------------
(1) 2648/     D4C :                     ; Effect D: Volume slide up/down
(1) 2649/     D4C :                     ;
(1) 2650/     D4C :                     ; 00h - DON'T USE HERE
(1) 2651/     D4C :                     ;       (Original: Keep effect)
(1) 2652/     D4C :                     ; 0xh - Slide down normal
(1) 2653/     D4C :                     ; Fxh - Slide down fine
(1) 2654/     D4C :                     ; xFh - Slide up normal
(1) 2655/     D4C :                     ; x0h - Slide up fine
(1) 2656/     D4C :                     ; ----------------------------------------
(1) 2657/     D4C :                     
(1) 2658/     D4C :                     .effc_D:
(1) 2659/     D4C : 7B                  		ld	a,e
(1) 2660/     D4D : 0F                  		rrca
(1) 2661/     D4E : 0F                  		rrca
(1) 2662/     D4F : 0F                  		rrca
(1) 2663/     D50 : 0F                  		rrca
(1) 2664/     D51 : E6 0F               		and	0Fh
(1) 2665/     D53 : 4F                  		ld	c,a
(1) 2666/     D54 :                     	; e - DOWN value: ????dddd
(1) 2667/     D54 :                     	; c - UP value:   0000uuuu
(1) 2668/     D54 :                     
(1) 2669/     D54 : 7B                  		ld	a,e
(1) 2670/     D55 : B7                  		or	a
(1) 2671/     D56 : C8                  		ret	z
(1) 2672/     D57 : E6 F0               		and	0F0h		; 0Xh
(1) 2673/     D59 : 28 1D               		jr	z,.D_down
(1) 2674/     D5B : FE F0               		cp	0F0h		; FXh
(1) 2675/     D5D : 28 14               		jr	z,.D_downhf
(1) 2676/     D5F : 7B                  		ld	a,e
(1) 2677/     D60 : E6 0F               		and	00Fh		; X0h
(1) 2678/     D62 : 28 06               		jr	z,.D_up
(1) 2679/     D64 : FE 0F               		cp	00Fh		; XFh
(1) 2680/     D66 : C0                  		ret	nz
(1) 2681/     D67 :                     ; 		jr	z,.D_uphf
(1) 2682/     D67 :                     ; Go UP
(1) 2683/     D67 :                     .D_uphf:
(1) 2684/     D67 : 79                  		ld	a,c
(1) 2685/     D68 : 18 02               		jr	.setefU_D
(1) 2686/     D6A :                     .D_up:
(1) 2687/     D6A : 79                  		ld	a,c
(1) 2688/     D6B : 87                  		add	a,a
(1) 2689/     D6C :                     .setefU_D:
(1) 2690/     D6C : 5F                  		ld	e,a
(1) 2691/     D6D : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2692/     D70 : 93                  		sub	a,e
(1) 2693/     D71 : 18 0E               		jr	.setef_mcD
(1) 2694/     D73 :                     ; Go DOWN
(1) 2695/     D73 :                     .D_downhf:
(1) 2696/     D73 : 7B                  		ld	a,e
(1) 2697/     D74 : E6 0F               		and	0Fh
(1) 2698/     D76 : 18 04               		jr	.setef_D
(1) 2699/     D78 :                     .D_down:
(1) 2700/     D78 : 7B                  		ld	a,e
(1) 2701/     D79 : E6 0F               		and	0Fh
(1) 2702/     D7B : 87                  		add	a,a
(1) 2703/     D7C :                     .setef_D:
(1) 2704/     D7C : 5F                  		ld	e,a
(1) 2705/     D7D : FD 7E 08            		ld	a,(iy+ztbl_VolSlide)
(1) 2706/     D80 : 83                  		add	a,e
(1) 2707/     D81 :                     ; 		jr	.setef_mcD
(1) 2708/     D81 :                     
(1) 2709/     D81 :                     ; Write slide
(1) 2710/     D81 :                     .setef_mcD:
(1) 2711/     D81 : FD 77 08            		ld	(iy+ztbl_VolSlide),a
(1) 2712/     D84 : C9                  		ret
(1) 2713/     D85 :                     
(1) 2714/     D85 :                     ; ----------------------------------------
(1) 2715/     D85 :                     ; Effect E
(1) 2716/     D85 :                     ; ----------------------------------------
(1) 2717/     D85 :                     
(1) 2718/     D85 :                     .effc_E:
(1) 2719/     D85 : 7B                  		ld	a,e
(1) 2720/     D86 : E6 F0               		and	0F0h
(1) 2721/     D88 : FE F0               		cp	0F0h
(1) 2722/     D8A : C8                  		ret	z
(1) 2723/     D8B : FE E0               		cp	0E0h
(1) 2724/     D8D : C8                  		ret	z
(1) 2725/     D8E : CF                  		rst	8
(1) 2726/     D8F : 7B                  		ld	a,e
(1) 2727/     D90 : ED 44               		neg	a
(1) 2728/     D92 : 18 0B               		jr	.wrt_EF
(1) 2729/     D94 :                     
(1) 2730/     D94 :                     ; ----------------------------------------
(1) 2731/     D94 :                     ; Effect F
(1) 2732/     D94 :                     ; ----------------------------------------
(1) 2733/     D94 :                     
(1) 2734/     D94 :                     .effc_F:
(1) 2735/     D94 : 7B                  		ld	a,e
(1) 2736/     D95 : E6 F0               		and	0F0h
(1) 2737/     D97 : FE F0               		cp	0F0h
(1) 2738/     D99 : C8                  		ret	z
(1) 2739/     D9A : FE E0               		cp	0E0h
(1) 2740/     D9C : C8                  		ret	z
(1) 2741/     D9D : CF                  		rst	8
(1) 2742/     D9E : 7B                  		ld	a,e
(1) 2743/     D9F :                     .wrt_EF:
(1) 2744/     D9F : 87                  		add	a,a
(1) 2745/     DA0 : 87                  		add	a,a
(1) 2746/     DA1 : FD 77 06            		ld	(iy+ztbl_PitchBend),a
(1) 2747/     DA4 : C9                  		ret
(1) 2748/     DA5 :                     
(1) 2749/     DA5 :                     ; ----------------------------------------
(1) 2750/     DA5 :                     ; Effect X
(1) 2751/     DA5 :                     ;
(1) 2752/     DA5 :                     ; Common panning values:
(1) 2753/     DA5 :                     ;  00h LEFT
(1) 2754/     DA5 :                     ;  80h MIDDLE
(1) 2755/     DA5 :                     ; 0FFh RIGHT
(1) 2756/     DA5 :                     ; ----------------------------------------
(1) 2757/     DA5 :                     
(1) 2758/     DA5 :                     .effc_X:
(1) 2759/     DA5 : 16 00               		ld	d,0
(1) 2760/     DA7 : 7E                  		ld	a,(hl)
(1) 2761/     DA8 : E6 F0               		and	11110000b
(1) 2762/     DAA : FE 80               		cp	80h		; PSG?
(1) 2763/     DAC : 28 19               		jr	z,.res_pan
(1) 2764/     DAE : FE 90               		cp	90h		; PSGN?
(1) 2765/     DB0 : 28 15               		jr	z,.res_pan
(1) 2766/     DB2 : FE D0               		cp	0D0h		; MCD: write separate PAN values
(1) 2767/     DB4 : CC D1 0D            		call	z,.pan_mcd	; <-- CALL, not JP
(1) 2768/     DB7 :                     
(1) 2769/     DB7 :                     	; ----------------------------------------
(1) 2770/     DB7 :                     	; Common panning bits: %00LR0000
(1) 2771/     DB7 :                     	; (REVERSE: 0-on 1-off)
(1) 2772/     DB7 : CF                  		rst	8
(1) 2773/     DB8 : E5                  		push	hl
(1) 2774/     DB9 : 21 F4 0D            		ld	hl,.comn_panlist
(1) 2775/     DBC : 7B                  		ld	a,e
(1) 2776/     DBD : 07                  		rlca
(1) 2777/     DBE : 07                  		rlca
(1) 2778/     DBF : 07                  		rlca
(1) 2779/     DC0 : E6 07               		and	0111b
(1) 2780/     DC2 :                     ; 		ld	d,0
(1) 2781/     DC2 : 5F                  		ld	e,a
(1) 2782/     DC3 : CF                  		rst	8
(1) 2783/     DC4 : 19                  		add	hl,de
(1) 2784/     DC5 : 56                  		ld	d,(hl)
(1) 2785/     DC6 : E1                  		pop	hl
(1) 2786/     DC7 :                     .res_pan:
(1) 2787/     DC7 : DD 7E 00            		ld	a,(ix+chnl_Flags)	; Save panning
(1) 2788/     DCA : E6 CF               		and	11001111b
(1) 2789/     DCC : B2                  		or	d
(1) 2790/     DCD : DD 77 00            		ld	(ix+chnl_Flags),a
(1) 2791/     DD0 : C9                  		ret
(1) 2792/     DD1 :                     
(1) 2793/     DD1 :                     	; ----------------------------------------
(1) 2794/     DD1 :                     	; MCD panning
(1) 2795/     DD1 :                     .pan_mcd:
(1) 2796/     DD1 : E5                  		push	hl
(1) 2797/     DD2 : D5                  		push	de
(1) 2798/     DD3 : 16 00               		ld	d,0
(1) 2799/     DD5 : 21 FC 0D            		ld	hl,.pcm_panlist
(1) 2800/     DD8 : 7B                  		ld	a,e
(1) 2801/     DD9 : E6 F8               		and	0F8h
(1) 2802/     DDB : 0F                  		rrca
(1) 2803/     DDC : 0F                  		rrca
(1) 2804/     DDD : 0F                  		rrca
(1) 2805/     DDE : 5F                  		ld	e,a
(1) 2806/     DDF : 19                  		add	hl,de
(1) 2807/     DE0 : 7E                  		ld	a,(hl)
(1) 2808/     DE1 : 21 FD 16            		ld	hl,pcmcom+32
(1) 2809/     DE4 : 16 00               		ld	d,0
(1) 2810/     DE6 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2811/     DE9 : 19                  		add	hl,de
(1) 2812/     DEA : 2F                  		cpl
(1) 2813/     DEB : 77                  		ld	(hl),a
(1) 2814/     DEC : D1                  		pop	de
(1) 2815/     DED : E1                  		pop	hl
(1) 2816/     DEE : 3E 01               		ld	a,1
(1) 2817/     DF0 : 32 D9 19            		ld	(mcdUpd),a
(1) 2818/     DF3 : C9                  		ret
(1) 2819/     DF4 :                     
(1) 2820/     DF4 :                     ; 0 - ENABLE, 1 - DISABLE
(1) 2821/     DF4 :                     ; 00LR0000b
(1) 2822/     DF4 :                     .comn_panlist:
(1) 2823/     DF4 : 10                  		db 00010000b
(1) 2824/     DF5 : 10                  		db 00010000b
(1) 2825/     DF6 : 10                  		db 00010000b
(1) 2826/     DF7 : 00                  		db 00000000b
(1) 2827/     DF8 : 00                  		db 00000000b
(1) 2828/     DF9 : 20                  		db 00100000b
(1) 2829/     DFA : 20                  		db 00100000b
(1) 2830/     DFB : 20                  		db 00100000b
(1) 2831/     DFC :                     
(1) 2832/     DFC :                     ; REVERSE OUTPUT BITS
(1) 2833/     DFC :                     ; RRRR | LLLL
(1) 2834/     DFC :                     .pcm_panlist:
(1) 2835/     DFC : F0                  		db 0F0h	; 00h
(1) 2836/     DFD : E0                  		db 0E0h
(1) 2837/     DFE : D0                  		db 0D0h	; 10h
(1) 2838/     DFF : C0                  		db 0C0h
(1) 2839/     E00 : B0                  		db 0B0h	; 20h
(1) 2840/     E01 : A0                  		db 0A0h
(1) 2841/     E02 : 90                  		db 090h	; 30h
(1) 2842/     E03 : 80                  		db 080h
(1) 2843/     E04 : 70                  		db 070h	; 40h
(1) 2844/     E05 : 60                  		db 060h
(1) 2845/     E06 : 50                  		db 050h	; 50h
(1) 2846/     E07 : 40                  		db 040h
(1) 2847/     E08 : 30                  		db 030h	; 60h
(1) 2848/     E09 : 20                  		db 020h
(1) 2849/     E0A : 10                  		db 010h	; 70h
(1) 2850/     E0B : 00                  		db 000h
(1) 2851/     E0C : 00                  		db 000h ; 80h
(1) 2852/     E0D : 01                  		db 001h
(1) 2853/     E0E : 02                  		db 002h ; 90h
(1) 2854/     E0F : 03                  		db 003h
(1) 2855/     E10 : 04                  		db 004h ; A0h
(1) 2856/     E11 : 05                  		db 005h
(1) 2857/     E12 : 06                  		db 006h ; B0h
(1) 2858/     E13 : 07                  		db 007h
(1) 2859/     E14 : 08                  		db 008h ; C0h
(1) 2860/     E15 : 09                  		db 009h
(1) 2861/     E16 : 0A                  		db 00Ah ; D0h
(1) 2862/     E17 : 0B                  		db 00Bh
(1) 2863/     E18 : 0C                  		db 00Ch ; E0h
(1) 2864/     E19 : 0D                  		db 00Dh
(1) 2865/     E1A : 0E                  		db 00Eh ; F0h
(1) 2866/     E1B : 0F                  		db 00Fh
(1) 2867/     E1C :                     
(1) 2868/     E1C :                     ; ----------------------------------------
(1) 2869/     E1C :                     ; NEW volume
(1) 2870/     E1C :                     ; ----------------------------------------
(1) 2871/     E1C :                     
(1) 2872/     E1C :                     .volu:
(1) 2873/     E1C : DD 7E 04            		ld	a,(ix+chnl_Vol)
(1) 2874/     E1F : D6 40               		sub	a,64
(1) 2875/     E21 : FD 77 07            		ld	(iy+ztbl_Volume),a	; BASE volume
(1) 2876/     E24 : C9                  		ret
(1) 2877/     E25 :                     
(1) 2878/     E25 :                     ; ----------------------------------------
(1) 2879/     E25 :                     ; NEW instrument
(1) 2880/     E25 :                     ; ----------------------------------------
(1) 2881/     E25 :                     
(1) 2882/     E25 :                     .inst:
(1) 2883/     E25 : 7E                  		ld	a,(hl)
(1) 2884/     E26 : E6 F0               		and	11110000b
(1) 2885/     E28 : FE 80               		cp	080h
(1) 2886/     E2A : 28 24               		jr	z,.ins_psg
(1) 2887/     E2C : FE 90               		cp	090h
(1) 2888/     E2E : 28 1A               		jr	z,.ins_psgn
(1) 2889/     E30 : FE A0               		cp	0A0h
(1) 2890/     E32 : 28 52               		jr	z,.ins_fm
(1) 2891/     E34 : CF                  		rst	8
(1) 2892/     E35 : FE B0               		cp	0B0h
(1) 2893/     E37 : 28 4D               		jr	z,.ins_fm
(1) 2894/     E39 : FE C0               		cp	0C0h
(1) 2895/     E3B : CA E2 0E            		jp	z,.ins_dac
(1) 2896/     E3E : FE D0               		cp	0D0h
(1) 2897/     E40 : CA 36 0F            		jp	z,.ins_pcm
(1) 2898/     E43 : FE E0               		cp	0E0h
(1) 2899/     E45 : CA 73 0F            		jp	z,.ins_pwm
(1) 2900/     E48 : CF                  		rst	8
(1) 2901/     E49 :                     .invl_ins:
(1) 2902/     E49 : C9                  		ret
(1) 2903/     E4A :                     
(1) 2904/     E4A :                     ; ----------------------------------------
(1) 2905/     E4A :                     ; PSG
(1) 2906/     E4A :                     
(1) 2907/     E4A :                     .ins_psgn:
(1) 2908/     E4A : 7E                  		ld	a,(hl)		; Grab noise setting
(1) 2909/     E4B : E6 07               		and	0111b
(1) 2910/     E4D : 32 2F 00            		ld	(psgHatMode),a	; ** GLOBAL SETTING
(1) 2911/     E50 :                     .ins_psg:
(1) 2912/     E50 : CF                  		rst	8
(1) 2913/     E51 : DD E5               		push	ix
(1) 2914/     E53 : E5                  		push	hl
(1) 2915/     E54 : 23                  		inc	hl		; Skip ID
(1) 2916/     E55 : DD 21 55 17         		ld	ix,psgcom	; Read psg control
(1) 2917/     E59 : FD 5E 03            		ld	e,(iy+ztbl_Chip)
(1) 2918/     E5C : 16 00               		ld	d,0
(1) 2919/     E5E : DD 19               		add	ix,de
(1) 2920/     E60 : 7E                  		ld	a,(hl)
(1) 2921/     E61 : CF                  		rst	8
(1) 2922/     E62 : 23                  		inc	hl
(1) 2923/     E63 : 7E                  		ld	a,(hl)
(1) 2924/     E64 : DD 77 24            		ld	(ix+ALV),a	; ALV
(1) 2925/     E67 : 23                  		inc	hl
(1) 2926/     E68 : 7E                  		ld	a,(hl)
(1) 2927/     E69 : DD 77 08            		ld	(ix+ATK),a	; ATK
(1) 2928/     E6C : 23                  		inc	hl
(1) 2929/     E6D : 7E                  		ld	a,(hl)
(1) 2930/     E6E : CF                  		rst	8
(1) 2931/     E6F : DD 77 10            		ld	(ix+SLV),a	; SLV
(1) 2932/     E72 : 23                  		inc	hl
(1) 2933/     E73 : 7E                  		ld	a,(hl)
(1) 2934/     E74 : DD 77 0C            		ld	(ix+DKY),a	; DKY
(1) 2935/     E77 : 23                  		inc	hl
(1) 2936/     E78 : 7E                  		ld	a,(hl)
(1) 2937/     E79 : DD 77 14            		ld	(ix+RRT),a	; RRT
(1) 2938/     E7C : 23                  		inc	hl
(1) 2939/     E7D : 7E                  		ld	a,(hl)
(1) 2940/     E7E : CF                  		rst	8
(1) 2941/     E7F : DD 77 2C            		ld	(ix+ARP),a	; ARP
(1) 2942/     E82 : E1                  		pop	hl
(1) 2943/     E83 : DD E1               		pop	ix
(1) 2944/     E85 : C9                  		ret
(1) 2945/     E86 :                     
(1) 2946/     E86 :                     ; ----------------------------------------
(1) 2947/     E86 :                     ; FM/FM3
(1) 2948/     E86 :                     
(1) 2949/     E86 :                     .ins_fm:
(1) 2950/     E86 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2951/     E89 : E6 07               		and	0111b
(1) 2952/     E8B : 16 00               		ld	d,0
(1) 2953/     E8D : 87                  		add	a,a
(1) 2954/     E8E : 5F                  		ld	e,a
(1) 2955/     E8F : DD E5               		push	ix
(1) 2956/     E91 : E5                  		push	hl
(1) 2957/     E92 : C5                  		push	bc
(1) 2958/     E93 : DD 21 D2 19         		ld	ix,fmcach_list
(1) 2959/     E97 : DD 19               		add	ix,de
(1) 2960/     E99 : CF                  		rst	8
(1) 2961/     E9A : DD 5E 00            		ld	e,(ix)
(1) 2962/     E9D : DD 23               		inc	ix
(1) 2963/     E9F : DD 56 00            		ld	d,(ix)
(1) 2964/     EA2 :                     
(1) 2965/     EA2 : DD 21 81 18         		ld	ix,fmlist_rsave
(1) 2966/     EA6 : FD 7E 03            		ld	a,(iy+ztbl_Chip)
(1) 2967/     EA9 : 87                  		add	a,a
(1) 2968/     EAA : 87                  		add	a,a
(1) 2969/     EAB : 06 00               		ld	b,0
(1) 2970/     EAD : 4F                  		ld	c,a
(1) 2971/     EAE : DD 09               		add	ix,bc
(1) 2972/     EB0 : 23                  		inc	hl			; Skip id and pitch
(1) 2973/     EB1 : 23                  		inc	hl
(1) 2974/     EB2 : 46                  		ld	b,(hl)
(1) 2975/     EB3 : 23                  		inc	hl
(1) 2976/     EB4 : 7E                  		ld	a,(hl)
(1) 2977/     EB5 : 23                  		inc	hl
(1) 2978/     EB6 : 6E                  		ld	l,(hl)
(1) 2979/     EB7 : 67                  		ld	h,a
(1) 2980/     EB8 :                     	;   ix - last MID and LOW bytes
(1) 2981/     EB8 :                     	;   de - current FM cache
(1) 2982/     EB8 :                     	; b,hl - 24-bit ROM address
(1) 2983/     EB8 : DD 7E 02            		ld	a,(ix+2)
(1) 2984/     EBB : B8                  		cp	b
(1) 2985/     EBC : 20 0E               		jr	nz,.new_romdat
(1) 2986/     EBE : CF                  		rst	8
(1) 2987/     EBF : DD 7E 01            		ld	a,(ix+1)
(1) 2988/     EC2 : BC                  		cp	h
(1) 2989/     EC3 : 20 07               		jr	nz,.new_romdat
(1) 2990/     EC5 : DD 7E 00            		ld	a,(ix)
(1) 2991/     EC8 : BD                  		cp	l
(1) 2992/     EC9 : 28 12               		jr	z,.same_patch
(1) 2993/     ECB : CF                  		rst	8
(1) 2994/     ECC :                     .new_romdat:
(1) 2995/     ECC : DD 70 02            		ld	(ix+2),b
(1) 2996/     ECF : DD 74 01            		ld	(ix+1),h
(1) 2997/     ED2 : DD 75 00            		ld	(ix),l
(1) 2998/     ED5 : E7                  		rst	20h			; TODO
(1) 2999/     ED6 : 78                  		ld	a,b
(1) 3000/     ED7 : 01 28 00            		ld	bc,28h			; <- size
(1) 3001/     EDA : CD DE 11            		call	readRom			; *** ROM ACCESS ***
(1) 3002/     EDD :                     .same_patch:
(1) 3003/     EDD : C1                  		pop	bc
(1) 3004/     EDE : E1                  		pop	hl
(1) 3005/     EDF : DD E1               		pop	ix
(1) 3006/     EE1 : C9                  		ret
(1) 3007/     EE2 :                     
(1) 3008/     EE2 :                     ; ----------------------------------------
(1) 3009/     EE2 :                     
(1) 3010/     EE2 :                     .ins_dac:
(1) 3011/     EE2 : E5                  		push	hl
(1) 3012/     EE3 : C5                  		push	bc
(1) 3013/     EE4 : CD 2A 14            		call	dac_off
(1) 3014/     EE7 : 7E                  		ld	a,(hl)
(1) 3015/     EE8 : E6 0F               		and	00001111b
(1) 3016/     EEA : 32 F5 1C            		ld	(wave_Flags),a
(1) 3017/     EED : CF                  		rst	8
(1) 3018/     EEE : 23                  		inc	hl
(1) 3019/     EEF : 23                  		inc	hl
(1) 3020/     EF0 : 5E                  		ld	e,(hl)
(1) 3021/     EF1 : 23                  		inc	hl
(1) 3022/     EF2 : 7E                  		ld	a,(hl)
(1) 3023/     EF3 : 23                  		inc	hl
(1) 3024/     EF4 : 6E                  		ld	l,(hl)
(1) 3025/     EF5 : 67                  		ld	h,a
(1) 3026/     EF6 : E5                  		push	hl
(1) 3027/     EF7 : 7B                  		ld	a,e
(1) 3028/     EF8 : 01 06 00            		ld	bc,6		; Skip head
(1) 3029/     EFB : 09                  		add	hl,bc
(1) 3030/     EFC : CE 00               		adc	a,0
(1) 3031/     EFE : 22 EA 1C            		ld	(wave_Start),hl	; Set START point
(1) 3032/     F01 : 32 EC 1C            		ld	(wave_Start+2),a
(1) 3033/     F04 : E1                  		pop	hl
(1) 3034/     F05 : 7B                  		ld	a,e
(1) 3035/     F06 : 11 F6 19            		ld	de,sampleHead
(1) 3036/     F09 : 01 06 00            		ld	bc,6
(1) 3037/     F0C : D5                  		push	de
(1) 3038/     F0D : CF                  		rst	8
(1) 3039/     F0E : CD DE 11            		call	readRom	; *** ROM ACCESS ***
(1) 3040/     F11 : E1                  		pop	hl
(1) 3041/     F12 :                     	; hl - temporal header
(1) 3042/     F12 : 5E                  		ld	e,(hl)
(1) 3043/     F13 : 23                  		inc	hl
(1) 3044/     F14 : 56                  		ld	d,(hl)
(1) 3045/     F15 : 23                  		inc	hl
(1) 3046/     F16 : 7E                  		ld	a,(hl)
(1) 3047/     F17 : 23                  		inc	hl
(1) 3048/     F18 : ED 53 ED 1C         		ld	(wave_Len),de	; LEN
(1) 3049/     F1C : 32 EF 1C            		ld	(wave_Len+2),a
(1) 3050/     F1F : 5E                  		ld	e,(hl)
(1) 3051/     F20 : 23                  		inc	hl
(1) 3052/     F21 : CF                  		rst	8
(1) 3053/     F22 : 56                  		ld	d,(hl)
(1) 3054/     F23 : 23                  		inc	hl
(1) 3055/     F24 : 7E                  		ld	a,(hl)
(1) 3056/     F25 : 23                  		inc	hl
(1) 3057/     F26 : ED 53 F0 1C         		ld	(wave_Loop),de	; LOOP
(1) 3058/     F2A : 32 F2 1C            		ld	(wave_Loop+2),a
(1) 3059/     F2D : 11 06 28            		ld	de,2806h	; keys off
(1) 3060/     F30 : CD FF 13            		call	fm_send_1
(1) 3061/     F33 : C1                  		pop	bc
(1) 3062/     F34 : E1                  		pop	hl
(1) 3063/     F35 :                     ; .same_dac:
(1) 3064/     F35 : C9                  		ret
(1) 3065/     F36 :                     
(1) 3066/     F36 :                     ; ----------------------------------------
(1) 3067/     F36 :                     
(1) 3068/     F36 :                     .ins_pcm:
(1) 3069/     F36 : DD E5               		push	ix
(1) 3070/     F38 : E5                  		push	hl
(1) 3071/     F39 : C5                  		push	bc
(1) 3072/     F3A : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3073/     F3B : E6 01               		and	00000001b	; Read loop bit
(1) 3074/     F3D : 0F                  		rrca			; Move to MSB
(1) 3075/     F3E : CF                  		rst	8
(1) 3076/     F3F : 23                  		inc	hl		; Skip ID and Pitch
(1) 3077/     F40 : 23                  		inc	hl
(1) 3078/     F41 : 5E                  		ld	e,(hl)		; Read 24-bit pointer
(1) 3079/     F42 : B3                  		or	e
(1) 3080/     F43 : 5F                  		ld	e,a
(1) 3081/     F44 : 23                  		inc	hl
(1) 3082/     F45 : 7E                  		ld	a,(hl)
(1) 3083/     F46 : 23                  		inc	hl
(1) 3084/     F47 : 6E                  		ld	l,(hl)
(1) 3085/     F48 : 67                  		ld	h,a
(1) 3086/     F49 :                     	; d    - Loop enable bit
(1) 3087/     F49 :                     	; e,hl - 24-bit pointer + loop bit
(1) 3088/     F49 : DD 21 DD 16         		ld	ix,pcmcom
(1) 3089/     F4D : 06 00               		ld	b,0
(1) 3090/     F4F : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3091/     F52 : DD 09               		add	ix,bc
(1) 3092/     F54 : 01 28 00            		ld	bc,40		; Go to 40
(1) 3093/     F57 : DD 09               		add	ix,bc
(1) 3094/     F59 : 01 08 00            		ld	bc,8
(1) 3095/     F5C : DD 73 00            		ld	(ix),e		; Write 24-bit pointer
(1) 3096/     F5F : DD 09               		add	ix,bc
(1) 3097/     F61 : DD 74 00            		ld	(ix),h
(1) 3098/     F64 : DD 09               		add	ix,bc
(1) 3099/     F66 : DD 75 00            		ld	(ix),l
(1) 3100/     F69 : C1                  		pop	bc
(1) 3101/     F6A : E1                  		pop	hl
(1) 3102/     F6B : DD E1               		pop	ix
(1) 3103/     F6D : 3E 01               		ld	a,1
(1) 3104/     F6F : 32 D9 19            		ld	(mcdUpd),a
(1) 3105/     F72 : C9                  		ret
(1) 3106/     F73 :                     
(1) 3107/     F73 :                     ; ----------------------------------------
(1) 3108/     F73 :                     
(1) 3109/     F73 :                     .ins_pwm:
(1) 3110/     F73 : DD E5               		push	ix
(1) 3111/     F75 : E5                  		push	hl
(1) 3112/     F76 : C5                  		push	bc
(1) 3113/     F77 : 7E                  		ld	a,(hl)		; Stereo|Loop bits
(1) 3114/     F78 : E6 03               		and	00000011b
(1) 3115/     F7A : 0F                  		rrca
(1) 3116/     F7B : 0F                  		rrca
(1) 3117/     F7C : 4F                  		ld	c,a
(1) 3118/     F7D : CF                  		rst	8
(1) 3119/     F7E : 23                  		inc	hl		; Skip ID and Pitch
(1) 3120/     F7F : 23                  		inc	hl
(1) 3121/     F80 : 56                  		ld	d,(hl)
(1) 3122/     F81 : 23                  		inc	hl
(1) 3123/     F82 : 5E                  		ld	e,(hl)
(1) 3124/     F83 : 23                  		inc	hl
(1) 3125/     F84 : 7E                  		ld	a,(hl)
(1) 3126/     F85 : 23                  		inc	hl
(1) 3127/     F86 : 6E                  		ld	l,(hl)
(1) 3128/     F87 : 67                  		ld	h,a
(1) 3129/     F88 : 79                  		ld	a,c
(1) 3130/     F89 : B2                  		or	d
(1) 3131/     F8A : 57                  		ld	d,a
(1) 3132/     F8B : CF                  		rst	8
(1) 3133/     F8C :                     	; de,hl - 32-bit PWM pointer
(1) 3134/     F8C : DD 21 1D 17         		ld	ix,pwmcom
(1) 3135/     F90 : 06 00               		ld	b,0
(1) 3136/     F92 : FD 4E 03            		ld	c,(iy+ztbl_Chip)
(1) 3137/     F95 : DD 09               		add	ix,bc
(1) 3138/     F97 : 01 18 00            		ld	bc,24
(1) 3139/     F9A : DD 09               		add	ix,bc		; Move to PWOUTF
(1) 3140/     F9C : 01 08 00            		ld	bc,8
(1) 3141/     F9F : DD 72 00            		ld	(ix),d
(1) 3142/     FA2 : DD 09               		add	ix,bc
(1) 3143/     FA4 : DD 73 00            		ld	(ix),e
(1) 3144/     FA7 : DD 09               		add	ix,bc
(1) 3145/     FA9 : DD 74 00            		ld	(ix),h
(1) 3146/     FAC : DD 09               		add	ix,bc
(1) 3147/     FAE : DD 75 00            		ld	(ix),l
(1) 3148/     FB1 : C1                  		pop	bc
(1) 3149/     FB2 : E1                  		pop	hl
(1) 3150/     FB3 : DD E1               		pop	ix
(1) 3151/     FB5 : 3E 01               		ld	a,1
(1) 3152/     FB7 : 32 D8 19            		ld	(marsUpd),a
(1) 3153/     FBA : C9                  		ret
(1) 3154/     FBB :                     
(1) 3155/     FBB :                     ; ----------------------------------------
(1) 3156/     FBB :                     ; NEW note
(1) 3157/     FBB :                     ; ----------------------------------------
(1) 3158/     FBB :                     
(1) 3159/     FBB :                     .note:
(1) 3160/     FBB : 78                  		ld	a,b			; Volume bit?
(1) 3161/     FBC : E6 04               		and	0100b
(1) 3162/     FBE : 20 05               		jr	nz,.fm_hasvol
(1) 3163/     FC0 : FD 36 07 00         		ld	(iy+ztbl_Volume),0	; Reset to default volume
(1) 3164/     FC4 : CF                  		rst	8
(1) 3165/     FC5 :                     .fm_hasvol:
(1) 3166/     FC5 : DD 7E 02            		ld	a,(ix+chnl_Note)
(1) 3167/     FC8 : 4F                  		ld	c,a
(1) 3168/     FC9 : FE FF               		cp	-1
(1) 3169/     FCB : C8                  		ret	z
(1) 3170/     FCC : FE FE               		cp	-2
(1) 3171/     FCE : C8                  		ret	z
(1) 3172/     FCF : CF                  		rst	8
(1) 3173/     FD0 : 7E                  		ld	a,(hl)
(1) 3174/     FD1 : E6 F0               		and	11110000b
(1) 3175/     FD3 : FE A0               		cp	0A0h
(1) 3176/     FD5 : 28 0B               		jr	z,.n_fm
(1) 3177/     FD7 :                     
(1) 3178/     FD7 :                     ; --------------------------------
(1) 3179/     FD7 :                     
(1) 3180/     FD7 :                     .n_indx:
(1) 3181/     FD7 : 79                  		ld	a,c
(1) 3182/     FD8 :                     .n_stfreq:
(1) 3183/     FD8 : 23                  		inc	hl			; Skip ID
(1) 3184/     FD9 : 5E                  		ld	e,(hl)			; Read pitch
(1) 3185/     FDA : 2B                  		dec	hl
(1) 3186/     FDB : 83                  		add	a,e			; Note + pitch
(1) 3187/     FDC : CF                  		rst	8
(1) 3188/     FDD : 87                  		add	a,a			; * 2
(1) 3189/     FDE : FD 77 05            		ld	(iy+ztbl_FreqIndx),a
(1) 3190/     FE1 : C9                  		ret
(1) 3191/     FE2 :                     
(1) 3192/     FE2 :                     ; --------------------------------
(1) 3193/     FE2 :                     ; FM custom search
(1) 3194/     FE2 :                     
(1) 3195/     FE2 :                     .n_fm:
(1) 3196/     FE2 : 79                  		ld	a,c
(1) 3197/     FE3 : 23                  		inc	hl		; Skip ID
(1) 3198/     FE4 : 5E                  		ld	e,(hl)		; Read pitch
(1) 3199/     FE5 : 2B                  		dec	hl
(1) 3200/     FE6 : CF                  		rst	8
(1) 3201/     FE7 : 83                  		add	a,e		; Note + pitch
(1) 3202/     FE8 :                     	; Search for octave and note...
(1) 3203/     FE8 : 0E 00               		ld	c,0		; c - octave
(1) 3204/     FEA : 16 07               		ld	d,7
(1) 3205/     FEC :                     .get_oct:
(1) 3206/     FEC : 5F                  		ld	e,a		; e - note
(1) 3207/     FED : D6 0C               		sub	12
(1) 3208/     FEF : FA F6 0F            		jp	m,.fnd_oct
(1) 3209/     FF2 : 0C                  		inc	c
(1) 3210/     FF3 : 15                  		dec	d
(1) 3211/     FF4 : 20 F6               		jr	nz,.get_oct
(1) 3212/     FF6 :                     .fnd_oct:
(1) 3213/     FF6 : CF                  		rst	8
(1) 3214/     FF7 : 7B                  		ld	a,e
(1) 3215/     FF8 : 87                  		add	a,a			; Note * 2
(1) 3216/     FF9 : E6 1F               		and	00011111b
(1) 3217/     FFB : CB 09               		rrc	c
(1) 3218/     FFD : CB 09               		rrc	c
(1) 3219/     FFF : CB 09               		rrc	c
(1) 3220/    1001 : CF                  		rst	8
(1) 3221/    1002 : B1                  		or	c
(1) 3222/    1003 : FD 77 05            		ld	(iy+ztbl_FreqIndx),a	; Save octave + index: OOOiiiiib
(1) 3223/    1006 : C9                  		ret
(1) 3224/    1007 :                     
(1) 3225/    1007 :                     ; ----------------------------------------
(1) 3226/    1007 :                     ; Unlock channel
(1) 3227/    1007 :                     ; ----------------------------------------
(1) 3228/    1007 :                     
(1) 3229/    1007 :                     .chnl_ulnk:
(1) 3230/    1007 : DD 56 01            		ld	d,(ix+chnl_Chip)
(1) 3231/    100A : CF                  		rst	8
(1) 3232/    100B : FD E5               		push	iy
(1) 3233/    100D : E1                  		pop	hl
(1) 3234/    100E :                     
(1) 3235/    100E :                     ; ----------------------------------------
(1) 3236/    100E :                     ; Reset all table
(1) 3237/    100E :                     ;
(1) 3238/    100E :                     ; Input:
(1) 3239/    100E :                     ; hl - Channel table
(1) 3240/    100E :                     ; d  - Silence chip
(1) 3241/    100E :                     ;
(1) 3242/    100E :                     ; Uses:
(1) 3243/    100E :                     ; b,de,hl
(1) 3244/    100E :                     ; ----------------------------------------
(1) 3245/    100E :                     
(1) 3246/    100E :                     tblz_clear:
(1) 3247/    100E : 06 0E               		ld	b,MAX_TBLSIZE-4
(1) 3248/    1010 : AF                  		xor	a
(1) 3249/    1011 : 77                  		ld	(hl),a			; 0 - Delete link
(1) 3250/    1012 : 23                  		inc	hl
(1) 3251/    1013 : 77                  		ld	(hl),a
(1) 3252/    1014 : 23                  		inc	hl
(1) 3253/    1015 : 72                  		ld	(hl),d			; 2 - Write silence request
(1) 3254/    1016 : 23                  		inc	hl
(1) 3255/    1017 : 23                  		inc	hl			; 3 - skip ID
(1) 3256/    1018 :                     .clr_all:
(1) 3257/    1018 : 77                  		ld	(hl),a
(1) 3258/    1019 : 23                  		inc	hl
(1) 3259/    101A : 10 FC               		djnz	.clr_all
(1) 3260/    101C : C9                  		ret
(1) 3261/    101D :                     
(1) 3262/    101D :                     ; ============================================================
(1) 3263/    101D :                     ; --------------------------------------------------------
(1) 3264/    101D :                     ; Communication with the SCD and 32X
(1) 3265/    101D :                     ;
(1) 3266/    101D :                     ; SCD: Sends a level2 interrupt to Sub-CPU
(1) 3267/    101D :                     ;    | Uses: commM,comm18-1F
(1) 3268/    101D :                     ;    |
(1) 3269/    101D :                     ; 32X: Interrupts Slave SH2
(1) 3270/    101D :                     ;    | Uses: comm8-comm11 (CMD request)
(1) 3271/    101D :                     ;    | two bits of comm14
(1) 3272/    101D :                     ; --------------------------------------------------------
(1) 3273/    101D :                     
(1) 3274/    101D :                     zmars_send:
(1) 3275/    101D :                     	; ----------------------------------------
(1) 3276/    101D :                     	; Send PCM table
(1) 3278/    101D : 3A 89 1F            		ld	a,(mcdBlock)	; Enable MARS requests?
(1) 3279/    1020 : B7                  		or	a
(1) 3280/    1021 : C2 9C 10            		jp	nz,.mcdt_blocked
(1) 3281/    1024 : FD 21 0E A0         		ld	iy,8000h|200Eh	; iy - command ports
(1) 3282/    1028 : CF                  		rst	8
(1) 3283/    1029 : 3A D9 19            		ld	a,(mcdUpd)	; NEW transfer?
(1) 3284/    102C : B7                  		or	a
(1) 3285/    102D : CA 9C 10            		jp	z,.mcdt_blocked
(1) 3286/    1030 : AF                  		xor	a
(1) 3287/    1031 : 32 D9 19            		ld	(mcdUpd),a
(1) 3288/    1034 : E7                  		rst	20h
(1) 3289/    1035 : CD 34 11            		call	.set_combank
(1) 3290/    1038 : DD 21 DD 16         		ld	ix,pcmcom
(1) 3291/    103C : 21 00 A0            		ld	hl,8000h|2000h
(1) 3292/    103F :                     .wait_in:
(1) 3293/    103F : FD 7E 01            		ld	a,(iy+1)	; SUB is busy?
(1) 3294/    1042 : B7                  		or	a
(1) 3295/    1043 : FA 3F 10            		jp	m,.wait_in
(1) 3296/    1046 : FD 7E 00            		ld	a,(iy)		; MAIN got first?
(1) 3297/    1049 : B7                  		or	a		; != 0
(1) 3298/    104A : 20 F3               		jr	nz,.wait_in
(1) 3299/    104C : 0E C0               		ld	c,0C0h
(1) 3300/    104E : FD 71 00            		ld	(iy),c		; Set our entrance ID
(1) 3301/    1051 : 06 0E               		ld	b,14		; Retry 14 times
(1) 3302/    1053 :                     .make_sure:
(1) 3303/    1053 : FD 7E 00            		ld	a,(iy)		; Check if did write
(1) 3304/    1056 : B9                  		cp	c
(1) 3305/    1057 : 20 E6               		jr	nz,.wait_in
(1) 3306/    1059 : 10 F8               		djnz	.make_sure
(1) 3307/    105B : 36 81               		ld	(hl),81h	; Request IRQ
(1) 3308/    105D : CF                  		rst	8
(1) 3309/    105E :                     .test_sub:
(1) 3310/    105E : FD 7E 01            		ld	a,(iy+1)	; Sub response?
(1) 3311/    1061 : E6 C0               		and	0C0h
(1) 3312/    1063 : FE C0               		cp	0C0h
(1) 3313/    1065 : 20 F7               		jr	nz,.test_sub
(1) 3314/    1067 : FD CB 00 EE         		set	5,(iy)		; "MAIN" lock
(1) 3315/    106B : CF                  		rst	8
(1) 3316/    106C : 11 18 00            		ld	de,10h+8	; ix - MAIN comm ports
(1) 3317/    106F : 19                  		add	hl,de
(1) 3318/    1070 :                     	; ix - table
(1) 3319/    1070 :                     	; hl - main data
(1) 3320/    1070 : 0E 08               		ld	c,40h/8		; c - Packets to send
(1) 3321/    1072 :                     .mcd_nextp:
(1) 3322/    1072 : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3323/    1076 : 20 FA               		jr	nz,.mcd_nextp
(1) 3324/    1078 : 06 08               		ld	b,8		; 2words to write
(1) 3325/    107A : E5                  		push	hl
(1) 3326/    107B :                     .copy_bytes:
(1) 3327/    107B : DD 7E 00            		ld	a,(ix)
(1) 3328/    107E : 77                  		ld	(hl),a
(1) 3329/    107F : DD 23               		inc	ix
(1) 3330/    1081 : 23                  		inc	hl
(1) 3331/    1082 : 10 F7               		djnz	.copy_bytes
(1) 3332/    1084 : E1                  		pop	hl
(1) 3333/    1085 : FD CB 00 E6         		set	4,(iy)		; PASS bit
(1) 3334/    1089 : CF                  		rst	8
(1) 3335/    108A :                     .wait_sub:
(1) 3336/    108A : FD CB 01 66         		bit	4,(iy+1)	; SUB is busy?
(1) 3337/    108E : 28 FA               		jr	z,.wait_sub
(1) 3338/    1090 : FD CB 00 A6         		res	4,(iy)		; Clear PASS bit
(1) 3339/    1094 : CF                  		rst	8
(1) 3340/    1095 : 0D                  		dec	c
(1) 3341/    1096 : 20 DA               		jr	nz,.mcd_nextp
(1) 3342/    1098 : FD 36 00 00         		ld	(iy),0		; "MAIN" unlock
(1) 3343/    109C :                     .mcdt_blocked:
(1) 3344/    109C : 21 DD 16            		ld	hl,pcmcom
(1) 3345/    109F : AF                  		xor	a
(1) 3346/    10A0 : 06 08               		ld	b,8		; MAX PCM channels
(1) 3347/    10A2 : CF                  		rst	8
(1) 3348/    10A3 :                     .clr_pcm:
(1) 3349/    10A3 : 77                  		ld	(hl),a
(1) 3350/    10A4 : 23                  		inc	hl
(1) 3351/    10A5 : 10 FC               		djnz	.clr_pcm
(1) 3352/    10A7 :                     .mcdt_noupd:
(1) 3353/    10A7 : 06 03               		ld	b,3
(1) 3354/    10A9 : 10 FE               		djnz	$
(1) 3355/    10AB : 00                  		nop
(1) 3356/    10AC : 00                  		nop
(1) 3357/    10AD : CF                  		rst	8
(1) 3358/    10AE : 00                  		nop
(1) 3359/    10AF : 00                  		nop
(1) 3360/    10B0 : 00                  		nop
(1) 3362/    10B1 :                     	; ----------------------------------------
(1) 3363/    10B1 :                     	; Send PWM table
(1) 3365/    10B1 : 3A 8A 1F            		ld	a,(marsBlock)	; Enable MARS requests?
(1) 3366/    10B4 : B7                  		or	a
(1) 3367/    10B5 : C2 21 11            		jp	nz,.blocked_m
(1) 3368/    10B8 : FD 21 00 D1         		ld	iy,8000h|5100h	; iy - mars sysreg
(1) 3369/    10BC : CF                  		rst	8
(1) 3370/    10BD : 3A D8 19            		ld	a,(marsUpd)	; NEW transfer?
(1) 3371/    10C0 : B7                  		or	a
(1) 3372/    10C1 : 28 5E               		jr	z,.blocked_m
(1) 3373/    10C3 : AF                  		xor	a
(1) 3374/    10C4 : 32 D8 19            		ld	(marsUpd),a
(1) 3375/    10C7 : E7                  		rst	20h
(1) 3376/    10C8 : CD 34 11            		call	.set_combank
(1) 3377/    10CB : DD 21 1D 17         		ld	ix,pwmcom
(1) 3378/    10CF :                     .wait_enter:
(1) 3379/    10CF : CF                  		rst	8
(1) 3380/    10D0 : FD 7E 2E            		ld	a,(iy+comm14)	; check if 68k got first.
(1) 3381/    10D3 : CB 7F               		bit	7,a
(1) 3382/    10D5 : 20 F8               		jr	nz,.wait_enter
(1) 3383/    10D7 : E6 F0               		and	11110000b
(1) 3384/    10D9 : F6 01               		or	1		; Set CMD task mode $01
(1) 3385/    10DB : FD 77 2E            		ld	(iy+comm14),a
(1) 3386/    10DE : CF                  		rst	8
(1) 3387/    10DF : E6 0F               		and	00001111b	; Did it write?
(1) 3388/    10E1 : FE 01               		cp	1
(1) 3389/    10E3 : 20 EA               		jr	nz,.wait_enter	; If not, retry
(1) 3390/    10E5 : FD CB 2E FE         		set	7,(iy+comm14)	; LOCK bit
(1) 3391/    10E9 : FD CB 03 CE         		set	1,(iy+standby)	; Request Slave CMD
(1) 3392/    10ED :                     ; .wait_cmd:
(1) 3393/    10ED :                     ; 		bit	1,(iy+standby)	; <-- unstable on HW
(1) 3394/    10ED :                     ; 		jr	nz,.wait_cmd
(1) 3395/    10ED : 0E 0E               		ld	c,14		; c - 14 words/2-byte
(1) 3396/    10EF :                     .next_packet:
(1) 3397/    10EF : CF                  		rst	8
(1) 3398/    10F0 : FD E5               		push	iy
(1) 3399/    10F2 : E1                  		pop	hl
(1) 3400/    10F3 : 11 28 00            		ld	de,comm8	; hl - comm8
(1) 3401/    10F6 : 19                  		add	hl,de
(1) 3402/    10F7 : 06 02               		ld	b,2
(1) 3403/    10F9 :                     .next_comm:
(1) 3404/    10F9 : DD 56 00            		ld	d,(ix)
(1) 3405/    10FC : DD 5E 01            		ld	e,(ix+1)
(1) 3406/    10FF : DD 23               		inc	ix
(1) 3407/    1101 : DD 23               		inc	ix
(1) 3408/    1103 : CF                  		rst	8
(1) 3409/    1104 : 72                  		ld	(hl),d
(1) 3410/    1105 : 23                  		inc	hl
(1) 3411/    1106 : 73                  		ld	(hl),e
(1) 3412/    1107 : 23                  		inc	hl
(1) 3413/    1108 : 10 EF               		djnz	.next_comm
(1) 3414/    110A : FD CB 2E F6         		set	6,(iy+comm14)	; PASS data bit
(1) 3415/    110E : CF                  		rst	8
(1) 3416/    110F :                     .w_pass2:
(1) 3417/    110F : 00                  		nop
(1) 3418/    1110 : FD CB 2E 76         		bit	6,(iy+comm14)	; PASS cleared?
(1) 3419/    1114 : 20 F9               		jr	nz,.w_pass2
(1) 3420/    1116 : 0D                  		dec	c
(1) 3421/    1117 : 20 D6               		jr	nz,.next_packet
(1) 3422/    1119 : FD CB 2E BE         		res	7,(iy+comm14)	; Break transfer loop
(1) 3423/    111D : FD CB 2E B6         		res	6,(iy+comm14)	; Clear PASS
(1) 3424/    1121 :                     ; Reset comm ports
(1) 3425/    1121 :                     .blocked_m:
(1) 3426/    1121 : AF                  		xor	a
(1) 3427/    1122 : 21 1D 17            		ld	hl,pwmcom
(1) 3428/    1125 : 06 08               		ld	b,8
(1) 3429/    1127 : CF                  		rst	8
(1) 3430/    1128 :                     .clr_pwm:
(1) 3431/    1128 : 77                  		ld	(hl),a		; Reset our COM bytes
(1) 3432/    1129 : 23                  		inc	hl
(1) 3433/    112A : 10 FC               		djnz	.clr_pwm
(1) 3434/    112C :                     .pwm_exit:
(1) 3435/    112C : CF                  		rst	8
(1) 3437/    112D : 06 01               		ld	b,1
(1) 3438/    112F : 10 FE               		djnz	$
(1) 3439/    1131 : 00                  		nop
(1) 3440/    1132 : 00                  		nop
(1) 3443/    1133 : C9                  		ret
(1) 3444/    1134 :                     
(1) 3445/    1134 :                     ; --------------------------------------------------------
(1) 3446/    1134 :                     ; Set bank to $A10000 area
(1) 3448/    1134 :                     .set_combank:
(1) 3449/    1134 : 21 00 60            		ld	hl,6000h
(1) 3450/    1137 : 36 00               		ld	(hl),0
(1) 3451/    1139 : 36 01               		ld	(hl),1
(1) 3452/    113B : 36 00               		ld	(hl),0
(1) 3453/    113D : 36 00               		ld	(hl),0
(1) 3454/    113F : CF                  		rst	8
(1) 3455/    1140 : 36 00               		ld	(hl),0
(1) 3456/    1142 : 36 00               		ld	(hl),0
(1) 3457/    1144 : 36 01               		ld	(hl),1
(1) 3458/    1146 : 36 00               		ld	(hl),0
(1) 3459/    1148 : 36 01               		ld	(hl),1
(1) 3460/    114A : C9                  		ret
(1) 3462/    114B :                     
(1) 3463/    114B :                     ; ====================================================================
(1) 3464/    114B :                     ; ----------------------------------------------------------------
(1) 3465/    114B :                     ; Subroutines
(1) 3466/    114B :                     ; ----------------------------------------------------------------
(1) 3467/    114B :                     
(1) 3468/    114B :                     ; --------------------------------------------------------
(1) 3469/    114B :                     ; Init sound engine
(1) 3470/    114B :                     ; --------------------------------------------------------
(1) 3471/    114B :                     
(1) 3472/    114B :                     gema_init:
(1) 3473/    114B : CD 39 15            		call	gema_lastbank		; Set last bank slot, solves problem with 32X
(1) 3474/    114E : CD 2A 14            		call	dac_off
(1) 3475/    1151 : AF                  		xor	a
(1) 3476/    1152 : 32 D8 19            		ld	(marsUpd),a
(1) 3477/    1155 : 32 D9 19            		ld	(mcdUpd),a
(1) 3478/    1158 : 32 87 1F            		ld	(cdRamLen),a
(1) 3479/    115B : FD 21 04 1A         		ld	iy,nikona_BuffList
(1) 3480/    115F : 0E 01               		ld	c,1			; Start at this priority
(1) 3481/    1161 :                     .setup_list:
(1) 3482/    1161 : FD 7E 00            		ld	a,(iy)
(1) 3483/    1164 : FE FF               		cp	-1
(1) 3484/    1166 : 28 24               		jr	z,.end_setup
(1) 3485/    1168 : FD 23               		inc	iy
(1) 3486/    116A : 6F                  		ld	l,a
(1) 3487/    116B : FD 66 00            		ld	h,(iy)
(1) 3488/    116E : E5                  		push	hl
(1) 3489/    116F : DD E1               		pop	ix
(1) 3490/    1171 : DD 71 14            		ld	(ix+seq_Priority),c
(1) 3491/    1174 : DD 36 01 FF         		ld	(ix+seq_Num),-1	; Reset sequence ID
(1) 3492/    1178 : FD 23               		inc	iy
(1) 3493/    117A :                     	; iy - src
(1) 3494/    117A :                     	; hl - dst
(1) 3495/    117A : 11 04 00            		ld	de,seq_Blocks
(1) 3496/    117D : 19                  		add	hl,de
(1) 3497/    117E : 06 06               		ld	b,MAX_BUFFNTRY-2
(1) 3498/    1180 :                     .st_copy:
(1) 3499/    1180 : FD 7E 00            		ld	a,(iy)
(1) 3500/    1183 : 77                  		ld	(hl),a
(1) 3501/    1184 : FD 23               		inc	iy
(1) 3502/    1186 : 23                  		inc	hl
(1) 3503/    1187 : 10 F7               		djnz	.st_copy
(1) 3504/    1189 : 0C                  		inc	c
(1) 3505/    118A : 18 D5               		jr	.setup_list
(1) 3506/    118C :                     .end_setup:
(1) 3507/    118C :                     
(1) 3508/    118C : 11 0B 22            		ld	de,2208h|03h	; Set Default LFO
(1) 3509/    118F : CD FF 13            		call	fm_send_1
(1) 3510/    1192 : 11 00 27            		ld	de,2700h	; CH3 special/timers OFF
(1) 3511/    1195 : CD FF 13            		call	fm_send_1
(1) 3512/    1198 :                     ; 		ld	de,2800h
(1) 3513/    1198 : 14                  		inc	d		; FM KEYS off
(1) 3514/    1199 : CD FF 13            		call	fm_send_1
(1) 3515/    119C : 1C                  		inc	e
(1) 3516/    119D : CD FF 13            		call	fm_send_1
(1) 3517/    11A0 : 1C                  		inc	e
(1) 3518/    11A1 : CD FF 13            		call	fm_send_1
(1) 3519/    11A4 : 1C                  		inc	e
(1) 3520/    11A5 : 1C                  		inc	e
(1) 3521/    11A6 : CD FF 13            		call	fm_send_1
(1) 3522/    11A9 : 1C                  		inc	e
(1) 3523/    11AA : CD FF 13            		call	fm_send_1
(1) 3524/    11AD : 1C                  		inc	e
(1) 3525/    11AE : CD FF 13            		call	fm_send_1
(1) 3526/    11B1 : 21 11 7F            		ld	hl,Zpsg_ctrl	; Silence PSG channels
(1) 3527/    11B4 : 36 9F               		ld	(hl),09Fh
(1) 3528/    11B6 : 36 BF               		ld	(hl),0BFh
(1) 3529/    11B8 : 36 DF               		ld	(hl),0DFh
(1) 3530/    11BA : 36 FF               		ld	(hl),0FFh
(1) 3531/    11BC : C9                  		ret
(1) 3532/    11BD :                     
(1) 3533/    11BD :                     ; --------------------------------------------------------
(1) 3534/    11BD :                     ; get_tick
(1) 3535/    11BD :                     ;
(1) 3536/    11BD :                     ; Checks if VBlank triggred a TICK
(1) 3537/    11BD :                     ; (1/150 NTSC, 1/120 PAL)
(1) 3538/    11BD :                     ; --------------------------------------------------------
(1) 3539/    11BD :                     
(1) 3540/    11BD :                     get_tick:
(1) 3541/    11BD : F3                  		di				; Disable ints
(1) 3542/    11BE : F5                  		push	af
(1) 3543/    11BF : E5                  		push	hl
(1) 3544/    11C0 : 21 F7 1C            		ld	hl,tickFlag		; read last TICK flag
(1) 3545/    11C3 : 7E                  		ld	a,(hl)			; non-zero value (1Fh)?
(1) 3546/    11C4 : B7                  		or 	a
(1) 3547/    11C5 : 28 13               		jr	z,.ctnotick
(1) 3548/    11C7 : 36 00               		ld	(hl),0			; Reset TICK flag
(1) 3549/    11C9 : 23                  		inc	hl			; Move to tickCnt
(1) 3550/    11CA : 34                  		inc	(hl)			; and increment
(1) 3551/    11CB : CF                  		rst	8
(1) 3552/    11CC : D5                  		push	de
(1) 3553/    11CD : 2A 31 00            		ld	hl,(sbeatAcc)		; Increment subbeats
(1) 3554/    11D0 : ED 5B 33 00         		ld	de,(sbeatPtck)
(1) 3555/    11D4 : CF                  		rst	8
(1) 3556/    11D5 : 19                  		add	hl,de
(1) 3557/    11D6 : 22 31 00            		ld	(sbeatAcc),hl
(1) 3558/    11D9 : D1                  		pop	de
(1) 3559/    11DA :                     .ctnotick:
(1) 3560/    11DA : E1                  		pop	hl
(1) 3561/    11DB : F1                  		pop	af
(1) 3562/    11DC : FB                  		ei				; Enable ints again
(1) 3563/    11DD : C9                  		ret
(1) 3564/    11DE :                     
(1) 3565/    11DE :                     ; --------------------------------------------------------
(1) 3566/    11DE :                     ; readRom
(1) 3567/    11DE :                     ;
(1) 3568/    11DE :                     ; Transfer bytes from ROM to Z80 RAM.
(1) 3569/    11DE :                     ; This also tells to 68k that we want to access ROM
(1) 3570/    11DE :                     ;
(1) 3571/    11DE :                     ; Input:
(1) 3572/    11DE :                     ; a  | 68K Address $xx0000
(1) 3573/    11DE :                     ;  c | Byte count (size 0 NOT allowed, MAX: 0FFh)
(1) 3574/    11DE :                     ; hl | 68K Address $00xxxx
(1) 3575/    11DE :                     ; de | Destination pointer
(1) 3576/    11DE :                     ;
(1) 3577/    11DE :                     ; Uses:
(1) 3578/    11DE :                     ; b
(1) 3579/    11DE :                     ;
(1) 3580/    11DE :                     ; Notes:
(1) 3581/    11DE :                     ; call RST 20h first, so the currenty playing DAC
(1) 3582/    11DE :                     ; sample has enough data before getting busy here.
(1) 3583/    11DE :                     ; --------------------------------------------------------
(1) 3584/    11DE :                     
(1) 3585/    11DE :                     readRom:
(1) 3586/    11DE : DD E5               		push	ix
(1) 3587/    11E0 : DD 21 81 1F         		ld	ix,commZRomBlk		; ix - rom read/block flags
(1) 3588/    11E4 : FE FF               		cp	0FFh			; Reading from 68k's RAM?
(1) 3589/    11E6 : 28 3D               		jr	z,.from_ram
(1) 3590/    11E8 : CF                  		rst	8
(1) 3591/    11E9 : 22 35 00            		ld	(x68ksrclsb),hl		; Backup midlow address
(1) 3592/    11EC : CB BC               		res	7,h			; Reset MSB bit 7
(1) 3593/    11EE : 06 00               		ld	b,0			; Clear b
(1) 3594/    11F0 : 0B                  		dec	bc			; len-1
(1) 3595/    11F1 : 09                  		add	hl,bc			; Add len to the mid and low to this temp address
(1) 3596/    11F2 : CB 7C               		bit	7,h			; Did it cross the bank?
(1) 3597/    11F4 : 20 0B               		jr	nz,.double		; Then it's a double transfer
(1) 3598/    11F6 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore hl
(1) 3599/    11F9 : 0C                  		inc	c			; len+1
(1) 3600/    11FA : 47                  		ld	b,a			; b - $xx0000
(1) 3601/    11FB : CD 45 12            		call	.transfer
(1) 3602/    11FE : DD E1               		pop	ix
(1) 3603/    1200 : C9                  		ret
(1) 3604/    1201 :                     .double:
(1) 3605/    1201 : CF                  		rst	8
(1) 3606/    1202 : 47                  		ld	b,a			; b - $xx0000
(1) 3607/    1203 : C5                  		push	bc			; Backup len and midlow address
(1) 3608/    1204 : E5                  		push	hl
(1) 3609/    1205 : 79                  		ld	a,c			; len - LSB
(1) 3610/    1206 : 95                  		sub	a,l
(1) 3611/    1207 : 4F                  		ld	c,a			; Save new size
(1) 3612/    1208 : 2A 35 00            		ld	hl,(x68ksrclsb)		; Restore TOP
(1) 3613/    120B : CD 45 12            		call	.transfer
(1) 3614/    120E : E1                  		pop	hl			; Restore len and midlow address
(1) 3615/    120F : C1                  		pop	bc
(1) 3616/    1210 : 4D                  		ld	c,l			; Get second len
(1) 3617/    1211 : 0C                  		inc	c
(1) 3618/    1212 : 3A 36 00            		ld	a,(x68ksrcmid)
(1) 3619/    1215 : E6 80               		and	80h
(1) 3620/    1217 : C6 80               		add	a,80h
(1) 3621/    1219 : 67                  		ld	h,a
(1) 3622/    121A : 2E 00               		ld	l,0
(1) 3623/    121C : 30 01               		jr	nc,.x68knocarry
(1) 3624/    121E : 04                  		inc	b			; Next $xx0000
(1) 3625/    121F :                     .x68knocarry:
(1) 3626/    121F : CD 45 12            		call	.transfer
(1) 3627/    1222 : DD E1               		pop	ix
(1) 3628/    1224 : C9                  		ret
(1) 3629/    1225 :                     
(1) 3630/    1225 :                     ; ------------------------------------------------
(1) 3631/    1225 :                     ; WORKAROUND FOR READING FROM $FF0000 RAM
(1) 3632/    1225 :                     ;
(1) 3633/    1225 :                     ; On the 68K side YOU MUST CALL
(1) 3634/    1225 :                     ; gemaSendRam manually and every time, normally
(1) 3635/    1225 :                     ; from a Vblank wait-loop.
(1) 3636/    1225 :                     ; ------------------------------------------------
(1) 3637/    1225 :                     
(1) 3638/    1225 :                     .from_ram:
(1) 3639/    1225 : ED 53 82 1F         		ld	(cdRamDst),de			; Show variables
(1) 3640/    1229 : 22 84 1F            		ld	(cdRamSrc),hl
(1) 3641/    122C : 32 86 1F            		ld	(cdRamSrcB),a
(1) 3642/    122F : CD 39 15            		call	gema_lastbank			; Set bank to $FF8000 area
(1) 3643/    1232 : CF                  		rst	8
(1) 3644/    1233 : 79                  		ld	a,c
(1) 3645/    1234 : 32 87 1F            		ld	(cdRamLen),a			; Show length
(1) 3646/    1237 : 21 00 FF            		ld	hl,RAM_ZCdFlagD&07FFFh+8000h	; ** 68K LABEL **
(1) 3647/    123A : 36 01               		ld	(hl),1				; WRITE flag
(1) 3648/    123C :                     .wait:
(1) 3649/    123C : 3A 87 1F            		ld	a,(cdRamLen)			; Wait until 68K clears
(1) 3650/    123F : B7                  		or	a
(1) 3651/    1240 : 20 FA               		jr	nz,.wait
(1) 3652/    1242 : DD E1               		pop	ix
(1) 3653/    1244 : C9                  		ret
(1) 3654/    1245 :                     
(1) 3655/    1245 :                     ; ------------------------------------------------
(1) 3656/    1245 :                     ; b  - Source ROM $xx0000
(1) 3657/    1245 :                     ;  c - Bytes to transfer (00h is invalid)
(1) 3658/    1245 :                     ; hl - Source ROM $00xxxx | 8000h
(1) 3659/    1245 :                     ; de - Output location
(1) 3660/    1245 :                     ; ix - ROM-block flag
(1) 3661/    1245 :                     ; ------------------------------------------------
(1) 3662/    1245 :                     
(1) 3663/    1245 :                     .transfer:
(1) 3664/    1245 : CF                  		rst	8
(1) 3665/    1246 : E5                  		push	hl
(1) 3666/    1247 : 7C                  		ld	a,h
(1) 3667/    1248 : 21 00 60            		ld	hl,6000h
(1) 3668/    124B : 07                  		rlca
(1) 3669/    124C : 77                  		ld	(hl),a
(1) 3670/    124D : 78                  		ld	a,b
(1) 3671/    124E : CF                  		rst	8
(1) 3672/    124F : 77                  		ld	(hl),a
(1) 3673/    1250 : 0F                  		rrca
(1) 3674/    1251 : 77                  		ld	(hl),a
(1) 3675/    1252 : 0F                  		rrca
(1) 3676/    1253 : 77                  		ld	(hl),a
(1) 3677/    1254 : 0F                  		rrca
(1) 3678/    1255 : 77                  		ld	(hl),a
(1) 3679/    1256 : 0F                  		rrca
(1) 3680/    1257 : CF                  		rst	8
(1) 3681/    1258 : 77                  		ld	(hl),a
(1) 3682/    1259 : 0F                  		rrca
(1) 3683/    125A : 77                  		ld	(hl),a
(1) 3684/    125B : 0F                  		rrca
(1) 3685/    125C : 77                  		ld	(hl),a
(1) 3686/    125D : 0F                  		rrca
(1) 3687/    125E : 77                  		ld	(hl),a
(1) 3688/    125F : E1                  		pop	hl
(1) 3689/    1260 : CB FC               		set	7,h
(1) 3690/    1262 : CF                  		rst	8
(1) 3691/    1263 :                     	; Transfer ROM data in packets
(1) 3692/    1263 :                     	; while playing the cache'd sample
(1) 3693/    1263 :                     	; *** CRITICAL PROCESS ***
(1) 3694/    1263 :                     	;
(1) 3695/    1263 :                     	; pseudo-ref for ldir:
(1) 3696/    1263 :                     	; ld (de),(hl)	; load memory (hl) to (de)
(1) 3697/    1263 :                     	; inc de	; incr de + 1
(1) 3698/    1263 :                     	; inc hl	; incr hl + 1
(1) 3699/    1263 :                     	; dec bc	; decr bc - 1
(1) 3700/    1263 : 06 00               		ld	b,0
(1) 3701/    1265 : 79                  		ld	a,c		; a - Size counter
(1) 3702/    1266 : D6 09               		sub	MAX_TRFRPZ	; Length lower than MAX_TRFRPZ?
(1) 3703/    1268 : 38 14               		jr	c,.x68klast	; Process single piece only
(1) 3704/    126A :                     .x68kloop:
(1) 3705/    126A : CF                  		rst	8
(1) 3706/    126B : 00                  		nop
(1) 3707/    126C : 0E 08               		ld	c,MAX_TRFRPZ-1
(1) 3708/    126E : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3709/    1272 : C4 8C 12            		call	nz,.x68klpwt
(1) 3710/    1275 : ED B0               		ldir			; (de) to (hl) until bc == 0
(1) 3711/    1277 : CF                  		rst	8
(1) 3712/    1278 : 00                  		nop
(1) 3713/    1279 : D6 08               		sub	a,MAX_TRFRPZ-1
(1) 3714/    127B : D2 6A 12            		jp	nc,.x68kloop
(1) 3715/    127E :                     ; last block
(1) 3716/    127E :                     .x68klast:
(1) 3717/    127E : C6 09               		add	a,MAX_TRFRPZ
(1) 3718/    1280 : 4F                  		ld	c,a
(1) 3719/    1281 : DD CB 00 46         		bit	0,(ix)		; Genesis blocks ROM?
(1) 3720/    1285 : C4 8C 12            		call	nz,.x68klpwt
(1) 3721/    1288 : ED B0               		ldir
(1) 3722/    128A : CF                  		rst	8
(1) 3723/    128B : C9                  		ret
(1) 3724/    128C :                     
(1) 3725/    128C :                     ; Wait here until Genesis unlocks ROM
(1) 3726/    128C :                     .x68klpwt:
(1) 3727/    128C : 00                  		nop
(1) 3728/    128D : CF                  		rst	8
(1) 3729/    128E : DD CB 00 46         		bit	0,(ix)		; 68k finished?
(1) 3730/    1292 : 20 F8               		jr	nz,.x68klpwt
(1) 3731/    1294 : C9                  		ret
(1) 3732/    1295 :                     
(1) 3733/    1295 :                     ; ====================================================================
(1) 3734/    1295 :                     ; ----------------------------------------------------------------
(1) 3735/    1295 :                     ; Sound chip routines
(1) 3736/    1295 :                     ; ----------------------------------------------------------------
(1) 3737/    1295 :                     
(1) 3738/    1295 :                     ; --------------------------------------------------------
(1) 3739/    1295 :                     ; chip_env
(1) 3740/    1295 :                     ;
(1) 3741/    1295 :                     ; Process the PSG
(1) 3742/    1295 :                     ; --------------------------------------------------------
(1) 3743/    1295 :                     
(1) 3744/    1295 :                     chip_env:
(1) 3746/    1295 : CD 39 15            		call	gema_lastbank		; Keep bank out of ROM before writing PSG
(1) 3748/    1298 : FD 21 58 17         		ld	iy,psgcom+3		; Start from NOISE first
(1) 3749/    129C : DD 21 11 7F         		ld	ix,Zpsg_ctrl
(1) 3750/    12A0 : 0E E0               		ld	c,0E0h			; c - PSG first ctrl command
(1) 3751/    12A2 : 06 04               		ld	b,4			; b - 4 channels
(1) 3752/    12A4 :                     .vloop:
(1) 3753/    12A4 : CF                  		rst	8
(1) 3754/    12A5 : FD 5E 00            		ld	e,(iy+COM)		; e - current command
(1) 3755/    12A8 : FD 36 00 00         		ld	(iy+COM),0
(1) 3756/    12AC :                     
(1) 3757/    12AC :                     	; ----------------------------
(1) 3758/    12AC :                     	; bit 2 - stop sound
(1) 3759/    12AC : CB 53               		bit	2,e
(1) 3760/    12AE : 28 0C               		jr	z,.ckof
(1) 3761/    12B0 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3762/    12B4 : FD 36 28 01         		ld	(iy+FLG),1		; and update
(1) 3763/    12B8 : FD 36 18 00         		ld	(iy+MODE),0		; envelope off
(1) 3764/    12BC :                     .ckof:
(1) 3765/    12BC :                     	; ----------------------------
(1) 3766/    12BC :                     	; bit 1 - key off
(1) 3767/    12BC : CB 4B               		bit	1,e
(1) 3768/    12BE : 28 0F               		jr      z,.ckon
(1) 3769/    12C0 : FD 7E 18            		ld	a,(iy+MODE)		; mode 0?
(1) 3770/    12C3 : B7                  		or	a
(1) 3771/    12C4 : 28 09               		jr	z,.ckon
(1) 3772/    12C6 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3773/    12CA : FD 36 18 04         		ld	(iy+MODE),100b		; set envelope mode 100b
(1) 3774/    12CE : CF                  		rst	8
(1) 3775/    12CF :                     .ckon:
(1) 3776/    12CF :                     	; ----------------------------
(1) 3777/    12CF :                     	; bit 0 - key on
(1) 3778/    12CF : CB 43               		bit	0,e
(1) 3779/    12D1 : 28 1A               		jr	z,.envproc
(1) 3780/    12D3 : FD 36 04 FF         		ld	(iy+LEV),-1		; reset level
(1) 3781/    12D7 : 78                  		ld	a,b
(1) 3782/    12D8 : FE 04               		cp	4			; NOISE channel?
(1) 3783/    12DA : 20 08               		jr	nz,.nskip
(1) 3784/    12DC : CF                  		rst	8			; Set NOISE mode
(1) 3785/    12DD : 3A 2F 00            		ld	a,(psgHatMode)		; write hat mode only.
(1) 3786/    12E0 : B1                  		or	c
(1) 3787/    12E1 : DD 77 00            		ld	(ix),a			; WRITE PSG
(1) 3788/    12E4 :                     .nskip:
(1) 3789/    12E4 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3790/    12E8 : CF                  		rst	8
(1) 3791/    12E9 : FD 36 18 01         		ld	(iy+MODE),001b		; set to attack mode
(1) 3792/    12ED :                     .nblock:
(1) 3793/    12ED :                     
(1) 3794/    12ED :                     	; ----------------------------
(1) 3795/    12ED :                     	; Process effects
(1) 3796/    12ED :                     	; ----------------------------
(1) 3797/    12ED :                     .envproc:
(1) 3798/    12ED : FD 7E 18            		ld	a,(iy+MODE)
(1) 3799/    12F0 : B7                  		or	a			; no modes
(1) 3800/    12F1 : CA 77 13            		jp	z,.vedlp
(1) 3801/    12F4 : FE 01               		cp 	001b			; Attack mode
(1) 3802/    12F6 : 20 2C               		jr	nz,.chk2
(1) 3803/    12F8 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3804/    12FC : FD 5E 24            		ld	e,(iy+ALV)
(1) 3805/    12FF : FD 7E 08            		ld	a,(iy+ATK)		; if ATK == 0, don't use
(1) 3806/    1302 : B7                  		or	a
(1) 3807/    1303 : 28 16               		jr	z,.atkend
(1) 3808/    1305 : 57                  		ld	d,a			; c - attack rate
(1) 3809/    1306 : 7B                  		ld	a,e			; a - attack level
(1) 3810/    1307 : CF                  		rst	8
(1) 3811/    1308 : FD 5E 24            		ld	e,(iy+ALV)		; b - OLD attack level
(1) 3812/    130B : 92                  		sub	a,d			; (attack rate) - (level)
(1) 3813/    130C : 38 0D               		jr	c,.atkend		; if carry: already finished
(1) 3814/    130E : 28 0B               		jr	z,.atkend		; if zero: no attack rate
(1) 3815/    1310 : BB                  		cp	e			; attack rate == level?
(1) 3816/    1311 : 38 08               		jr	c,.atkend
(1) 3817/    1313 : 28 06               		jr	z,.atkend
(1) 3818/    1315 : FD 77 04            		ld	(iy+LEV),a		; set new level
(1) 3819/    1318 : CF                  		rst	8
(1) 3820/    1319 : 18 5C               		jr	.vedlp
(1) 3821/    131B :                     .atkend:
(1) 3822/    131B : FD 73 04            		ld	(iy+LEV),e		; attack level = new level
(1) 3823/    131E :                     .atkzero:
(1) 3824/    131E : FD 36 18 02         		ld	(iy+MODE),010b		; set to decay mode
(1) 3825/    1322 : 18 53               		jr	.vedlp
(1) 3826/    1324 :                     .chk2:
(1) 3827/    1324 :                     
(1) 3828/    1324 : FE 02               		cp	010b			; Decay mode
(1) 3829/    1326 : 20 31               		jr	nz,.chk4
(1) 3830/    1328 :                     .dectmr:
(1) 3831/    1328 : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3832/    132C : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3833/    132F : FD 5E 10            		ld	e,(iy+SLV)		; b - Sustain
(1) 3834/    1332 : BB                  		cp	e
(1) 3835/    1333 : 38 0D               		jr	c,.dkadd		; if carry: add
(1) 3836/    1335 : 28 18               		jr	z,.dkyend		; if zero:  finish
(1) 3837/    1337 : CF                  		rst	8
(1) 3838/    1338 : FD 96 0C            		sub	(iy+DKY)		; substract decay rate
(1) 3839/    133B : 38 12               		jr	c,.dkyend		; finish if wraped.
(1) 3840/    133D : BB                  		cp	e			; compare level
(1) 3841/    133E : 38 0F               		jr	c,.dkyend		; and finish
(1) 3842/    1340 : 18 08               		jr	.dksav
(1) 3843/    1342 :                     .dkadd:
(1) 3844/    1342 : FD 86 0C            		add	a,(iy+DKY)		;  (level) + (decay rate)
(1) 3845/    1345 : 38 08               		jr	c,.dkyend		; finish if wraped.
(1) 3846/    1347 : BB                  		cp	e			; compare level
(1) 3847/    1348 : 30 05               		jr	nc,.dkyend
(1) 3848/    134A :                     .dksav:
(1) 3849/    134A : FD 77 04            		ld	(iy+LEV),a		; save new level
(1) 3850/    134D : 18 28               		jr	.vedlp
(1) 3851/    134F :                     .dkyend:
(1) 3852/    134F : CF                  		rst	8
(1) 3853/    1350 : FD 73 04            		ld	(iy+LEV),e		; save last attack
(1) 3854/    1353 : FD 36 18 04         		ld	(iy+MODE),100b		; and set to sustain
(1) 3855/    1357 : 18 1E               		jr	.vedlp
(1) 3856/    1359 :                     .chk4:
(1) 3857/    1359 : FE 04               		cp	100b			; Sustain phase
(1) 3858/    135B : 20 1A               		jr	nz,.vedlp
(1) 3859/    135D : FD 36 28 01         		ld	(iy+FLG),1		; psg update flag
(1) 3860/    1361 : FD 7E 04            		ld	a,(iy+LEV)		; a - Level
(1) 3861/    1364 : CF                  		rst	8
(1) 3862/    1365 : FD 86 14            		add 	a,(iy+RRT)		; add Release Rate
(1) 3863/    1368 : 38 05               		jr	c,.killenv		; release done
(1) 3864/    136A : FD 77 04            		ld	(iy+LEV),a		; set new Level
(1) 3865/    136D : 18 08               		jr	.vedlp
(1) 3866/    136F :                     .killenv:
(1) 3867/    136F : FD 36 04 FF         		ld	(iy+LEV),-1		; Silence this channel
(1) 3868/    1373 : FD 36 18 00         		ld	(iy+MODE),0		; Reset mode
(1) 3869/    1377 :                     .vedlp:
(1) 3870/    1377 :                     	; ----------------------------
(1) 3871/    1377 :                     	; PSG UPDATE
(1) 3872/    1377 :                     	; ----------------------------
(1) 3873/    1377 : FD 7E 28            		ld	a,(iy+FLG)
(1) 3874/    137A : B7                  		or	a
(1) 3875/    137B : 28 72               		jr	z,.noupd
(1) 3876/    137D : FD 36 28 00         		ld	(iy+FLG),0	; Reset until next one
(1) 3877/    1381 : 59                  		ld	e,c
(1) 3878/    1382 : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3879/    1385 : 57                  		ld	d,a
(1) 3880/    1386 : E6 03               		and	011b
(1) 3881/    1388 : FE 03               		cp	011b
(1) 3882/    138A : 20 1D               		jr	nz,.normal
(1) 3883/    138C : CF                  		rst	8
(1) 3884/    138D : 78                  		ld	a,b		; Channel 4?
(1) 3885/    138E : FE 03               		cp	3
(1) 3886/    1390 : 28 13               		jr	z,.silnc_3
(1) 3887/    1392 : FE 04               		cp	4
(1) 3888/    1394 : 20 18               		jr	nz,.do_nfreq
(1) 3889/    1396 : 3A 2F 00            		ld	a,(psgHatMode)
(1) 3890/    1399 : 57                  		ld	d,a
(1) 3891/    139A : E6 03               		and	011b
(1) 3892/    139C : CF                  		rst	8
(1) 3893/    139D : FE 03               		cp	011b
(1) 3894/    139F : 20 30               		jr	nz,.vonly
(1) 3895/    13A1 : 1E C0               		ld	e,0C0h
(1) 3896/    13A3 : 18 09               		jr	.do_nfreq
(1) 3897/    13A5 :                     .silnc_3:
(1) 3898/    13A5 : 3E FF               		ld	a,-1
(1) 3899/    13A7 : 18 32               		jr	.vlmuch
(1) 3900/    13A9 :                     .normal:
(1) 3901/    13A9 : 78                  		ld	a,b
(1) 3902/    13AA : FE 04               		cp	4
(1) 3903/    13AC : 28 23               		jr	z,.vonly
(1) 3904/    13AE :                     .do_nfreq:
(1) 3905/    13AE : FD 6E 1C            		ld	l,(iy+DTL)
(1) 3906/    13B1 : FD 66 20            		ld	h,(iy+DTH)
(1) 3907/    13B4 :                     	; freq effects go here
(1) 3908/    13B4 :                     	; (save e FIRST.)
(1) 3909/    13B4 :                     	;	push	de
(1) 3910/    13B4 :                     	;	pop	de
(1) 3911/    13B4 : 7D                  		ld	a,l		; Grab LSB 4 right bits
(1) 3912/    13B5 : E6 0F               		and	00001111b
(1) 3913/    13B7 : B3                  		or	e		; OR with channel set in e
(1) 3914/    13B8 : CF                  		rst	8
(1) 3915/    13B9 : DD 77 00            		ld	(ix),a		; write it
(1) 3916/    13BC : 7D                  		ld	a,l		; Grab LSB 4 left bits
(1) 3917/    13BD : 0F                  		rrca
(1) 3918/    13BE : 0F                  		rrca
(1) 3919/    13BF : 0F                  		rrca
(1) 3920/    13C0 : 0F                  		rrca
(1) 3921/    13C1 : E6 0F               		and	00001111b
(1) 3922/    13C3 : 5F                  		ld	e,a
(1) 3923/    13C4 : 7C                  		ld	a,h		; Grab MSB bits
(1) 3924/    13C5 : CF                  		rst	8
(1) 3925/    13C6 : 07                  		rlca
(1) 3926/    13C7 : 07                  		rlca
(1) 3927/    13C8 : 07                  		rlca
(1) 3928/    13C9 : 07                  		rlca
(1) 3929/    13CA : E6 30               		and	00110000b
(1) 3930/    13CC : B3                  		or	e
(1) 3931/    13CD : DD 77 00            		ld	(ix),a
(1) 3932/    13D0 : CF                  		rst	8
(1) 3933/    13D1 :                     .vonly:
(1) 3934/    13D1 : FD 7E 30            		ld	a,(iy+MVOL)		; c - Level
(1) 3935/    13D4 : FD 86 04            		add	a,(iy+LEV)		; Add MASTER volume
(1) 3936/    13D7 : 30 02               		jr	nc,.vlmuch
(1) 3937/    13D9 : 3E FF               		ld	a,-1
(1) 3938/    13DB :                     .vlmuch:
(1) 3939/    13DB : CB 3F               		srl	a			; (Level >> 4)
(1) 3940/    13DD : CB 3F               		srl	a
(1) 3941/    13DF : CB 3F               		srl	a
(1) 3942/    13E1 : CF                  		rst	8
(1) 3943/    13E2 : CB 3F               		srl	a
(1) 3944/    13E4 : E6 0F               		and	00001111b		; Filter volume value
(1) 3945/    13E6 : B1                  		or	c			; and OR with current channel
(1) 3946/    13E7 : F6 90               		or	90h			; Set volume-set mode
(1) 3947/    13E9 : DD 77 00            		ld	(ix),a			; *** WRITE volume
(1) 3948/    13EC : FD 34 38            		inc	(iy+PTMR)		; Update general timer
(1) 3949/    13EF :                     .noupd:
(1) 3950/    13EF :                     	; ----------------------------
(1) 3951/    13EF : FD 2B               		dec	iy			; next COM to check (backwards)
(1) 3952/    13F1 : 79                  		ld	a,c
(1) 3953/    13F2 : CF                  		rst	8
(1) 3954/    13F3 : D6 20               		sub	a,20h			; next PSG (backwards)
(1) 3955/    13F5 : 4F                  		ld	c,a
(1) 3956/    13F6 : 05                  		dec	b
(1) 3957/    13F7 : C2 A4 12            		jp	nz,.vloop
(1) 3958/    13FA : C9                  		ret
(1) 3959/    13FB :                     
(1) 3960/    13FB :                     ; ---------------------------------------------
(1) 3961/    13FB :                     ; FM register writes
(1) 3962/    13FB :                     ;
(1) 3963/    13FB :                     ; Input:
(1) 3964/    13FB :                     ; d - ctrl
(1) 3965/    13FB :                     ; e - data
(1) 3966/    13FB :                     ; ---------------------------------------------
(1) 3967/    13FB :                     
(1) 3968/    13FB :                     ; c - KeyID
(1) 3969/    13FB :                     fm_autoreg:
(1) 3970/    13FB : CB 51               		bit	2,c
(1) 3971/    13FD : 20 0B               		jr	nz,fm_send_2
(1) 3972/    13FF :                     
(1) 3973/    13FF :                     ; Channels 1-3 and global registers
(1) 3974/    13FF :                     fm_send_1:
(1) 3975/    13FF : 7A                  		ld	a,d
(1) 3976/    1400 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3977/    1403 : 00                  		nop
(1) 3978/    1404 : 7B                  		ld	a,e
(1) 3979/    1405 : 32 01 40            		ld	(Zym_data_1),a
(1) 3980/    1408 : 00                  		nop
(1) 3981/    1409 : C9                  		ret
(1) 3982/    140A :                     ; Channels 4-6
(1) 3983/    140A :                     fm_send_2:
(1) 3984/    140A : 7A                  		ld	a,d
(1) 3985/    140B : 32 02 40            		ld	(Zym_ctrl_2),a
(1) 3986/    140E : 00                  		nop
(1) 3987/    140F : 7B                  		ld	a,e
(1) 3988/    1410 : 32 03 40            		ld	(Zym_data_2),a
(1) 3989/    1413 : 00                  		nop
(1) 3990/    1414 : C9                  		ret
(1) 3991/    1415 :                     
(1) 3992/    1415 :                     ; --------------------------------------------------------
(1) 3993/    1415 :                     ; brute-force WAVE ON/OFF playback
(1) 3994/    1415 :                     ; --------------------------------------------------------
(1) 3995/    1415 :                     
(1) 3996/    1415 :                     dac_on:
(1) 3997/    1415 : 3E 2B               		ld	a,2Bh
(1) 3998/    1417 : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 3999/    141A : 3E 80               		ld	a,80h
(1) 4000/    141C : 32 01 40            		ld	(Zym_data_1),a
(1) 4001/    141F : 3E D9               		ld 	a,zopcExx
(1) 4002/    1421 : 32 08 00            		ld	(dac_me),a
(1) 4003/    1424 : 3E F5               		ld 	a,zopcPushAf
(1) 4004/    1426 : 32 20 00            		ld	(dac_fill),a
(1) 4005/    1429 : C9                  		ret
(1) 4006/    142A :                     dac_off:
(1) 4007/    142A : 3E 2B               		ld	a,2Bh
(1) 4008/    142C : 32 00 40            		ld	(Zym_ctrl_1),a
(1) 4009/    142F : 3E 00               		ld	a,00h
(1) 4010/    1431 : 32 01 40            		ld	(Zym_data_1),a
(1) 4011/    1434 : 3E C9               		ld 	a,zopcRet
(1) 4012/    1436 : 32 08 00            		ld	(dac_me),a
(1) 4013/    1439 : 3E C9               		ld 	a,zopcRet
(1) 4014/    143B : 32 20 00            		ld	(dac_fill),a
(1) 4015/    143E : C9                  		ret
(1) 4016/    143F :                     
(1) 4017/    143F :                     ; --------------------------------------------------------
(1) 4018/    143F :                     ; dac_play
(1) 4019/    143F :                     ;
(1) 4020/    143F :                     ; Plays a new sample
(1) 4021/    143F :                     ;
(1) 4022/    143F :                     ; NOTE:
(1) 4023/    143F :                     ; Set wave_Flags and wave_Pitch externally
(1) 4024/    143F :                     ; getting here.
(1) 4025/    143F :                     ; --------------------------------------------------------
(1) 4026/    143F :                     
(1) 4027/    143F :                     dac_play:
(1) 4028/    143F : F3                  		di
(1) 4029/    1440 : CD 2A 14            		call	dac_off
(1) 4030/    1443 : D9                  		exx				; flip exx regs
(1) 4031/    1444 : 01 1D 00            		ld	bc,dWaveBuff>>8		; bc - WAVFIFO MSB
(1) 4032/    1447 : ED 5B F3 1C         		ld	de,(wave_Pitch)		; de - Pitch
(1) 4033/    144B : 21 00 00            		ld	hl,(dWaveBuff&0FFh)<<8	; hl - WAVFIFO LSB pointer (xx.00)
(1) 4034/    144E : D9                  		exx				; move them back
(1) 4035/    144F : 2A EA 1C            		ld	hl,(wave_Start)		; copy Start and length
(1) 4036/    1452 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4037/    1455 : 22 E0 19            		ld	(dDacPntr),hl
(1) 4038/    1458 : 32 E2 19            		ld	(dDacPntr+2),a
(1) 4039/    145B : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4040/    145E : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4041/    1461 : 22 E3 19            		ld	(dDacCntr),hl
(1) 4042/    1464 : 32 E5 19            		ld	(dDacCntr+2),a
(1) 4043/    1467 : AF                  		xor	a
(1) 4044/    1468 : 32 37 00            		ld	(dDacFifoMid),a		; Reset half-way
(1) 4045/    146B : CD 73 14            		call	dac_refill
(1) 4046/    146E : CD 15 14            		call	dac_on
(1) 4047/    1471 : FB                  		ei
(1) 4048/    1472 : C9                  		ret
(1) 4049/    1473 :                     
(1) 4050/    1473 :                     ; --------------------------------------------------------
(1) 4051/    1473 :                     
(1) 4052/    1473 :                     dac_refill:
(1) 4053/    1473 : CF                  		rst	8
(1) 4054/    1474 : C5                  		push	bc
(1) 4055/    1475 : D5                  		push	de
(1) 4056/    1476 : E5                  		push	hl
(1) 4057/    1477 : 3A F5 1C            		ld	a,(wave_Flags)	; Already finished?
(1) 4058/    147A : FE 07               		cp	111b
(1) 4059/    147C : D2 32 15            		jp	nc,.dacfill_end
(1) 4060/    147F : 3A E5 19            		ld	a,(dDacCntr+2)	; Last bytes
(1) 4061/    1482 : 2A E3 19            		ld	hl,(dDacCntr)
(1) 4062/    1485 : 01 80 00            		ld	bc,80h
(1) 4063/    1488 : 37                  		scf
(1) 4064/    1489 : 3F                  		ccf
(1) 4065/    148A : ED 42               		sbc	hl,bc
(1) 4066/    148C : DE 00               		sbc	a,0
(1) 4067/    148E : 32 E5 19            		ld	(dDacCntr+2),a
(1) 4068/    1491 : 22 E3 19            		ld	(dDacCntr),hl
(1) 4069/    1494 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4070/    1496 : B7                  		or	a
(1) 4071/    1497 : FA C1 14            		jp	m,.dac_over
(1) 4072/    149A : 3A 37 00            		ld	a,(dDacFifoMid)	; Update halfway value
(1) 4073/    149D : 5F                  		ld	e,a
(1) 4074/    149E : C6 80               		add 	a,80h
(1) 4075/    14A0 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4076/    14A3 : 2A E0 19            		ld	hl,(dDacPntr)
(1) 4077/    14A6 : 3A E2 19            		ld	a,(dDacPntr+2)
(1) 4078/    14A9 : CD DE 11            		call	readRom	; *** ROM ACCESS ***
(1) 4079/    14AC : 2A E0 19            		ld	hl,(dDacPntr)
(1) 4080/    14AF : 3A E2 19            		ld	a,(dDacPntr+2)
(1) 4081/    14B2 : 01 80 00            		ld	bc,80h
(1) 4082/    14B5 : 09                  		add	hl,bc
(1) 4083/    14B6 : CE 00               		adc	a,0
(1) 4084/    14B8 : 22 E0 19            		ld	(dDacPntr),hl
(1) 4085/    14BB : 32 E2 19            		ld	(dDacPntr+2),a
(1) 4086/    14BE : C3 35 15            		jp	.dacfill_ret
(1) 4087/    14C1 :                     ; NOTE: This doesn't finish at the exact END point
(1) 4088/    14C1 :                     ; but the USER won't notice it.
(1) 4089/    14C1 :                     .dac_over:
(1) 4090/    14C1 : 16 1D               		ld	d,dWaveBuff>>8
(1) 4091/    14C3 : 3A F5 1C            		ld	a,(wave_Flags)	; LOOP enabled?
(1) 4092/    14C6 : E6 01               		and	001b
(1) 4093/    14C8 : C2 EB 14            		jp	nz,.dacfill_loop
(1) 4094/    14CB : 7D                  		ld	a,l
(1) 4095/    14CC : C6 80               		add	a,80h
(1) 4096/    14CE : 4F                  		ld	c,a
(1) 4097/    14CF : 06 00               		ld	b,0
(1) 4098/    14D1 : C5                  		push	bc
(1) 4099/    14D2 : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4100/    14D5 : 5F                  		ld	e,a
(1) 4101/    14D6 : C6 80               		add	a,80h
(1) 4102/    14D8 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4103/    14DB : C1                  		pop	bc
(1) 4104/    14DC : 79                  		ld	a,c
(1) 4105/    14DD : B0                  		or	b
(1) 4106/    14DE : 28 52               		jr	z,.dacfill_end
(1) 4107/    14E0 : 2A E0 19            		ld	hl,(dDacPntr)
(1) 4108/    14E3 : 3A E2 19            		ld	a,(dDacPntr+2)
(1) 4109/    14E6 : CD DE 11            		call	readRom	; *** ROM ACCESS ***
(1) 4110/    14E9 : 18 47               		jr	.dacfill_end
(1) 4111/    14EB :                     ; loop sample
(1) 4112/    14EB :                     .dacfill_loop:
(1) 4113/    14EB : C5                  		push	bc
(1) 4114/    14EC : D5                  		push	de
(1) 4115/    14ED : 3A F2 1C            		ld	a,(wave_Loop+2)
(1) 4116/    14F0 : 4F                  		ld	c,a
(1) 4117/    14F1 : ED 5B F0 1C         		ld	de,(wave_Loop)
(1) 4118/    14F5 : 2A EA 1C            		ld	hl,(wave_Start)
(1) 4119/    14F8 : 3A EC 1C            		ld 	a,(wave_Start+2)
(1) 4120/    14FB : 81                  		add	a,c
(1) 4121/    14FC : 19                  		add	hl,de
(1) 4122/    14FD : CE 00               		adc	a,0
(1) 4123/    14FF : 22 E0 19            		ld	(dDacPntr),hl
(1) 4124/    1502 : 32 E2 19            		ld	(dDacPntr+2),a
(1) 4125/    1505 : 2A ED 1C            		ld	hl,(wave_Len)
(1) 4126/    1508 : 3A EF 1C            		ld 	a,(wave_Len+2)
(1) 4127/    150B : 91                  		sub	a,c
(1) 4128/    150C : 37                  		scf
(1) 4129/    150D : 3F                  		ccf
(1) 4130/    150E : ED 52               		sbc	hl,de
(1) 4131/    1510 : DE 00               		sbc	a,0
(1) 4132/    1512 : 22 E3 19            		ld	(dDacCntr),hl
(1) 4133/    1515 : 32 E5 19            		ld	(dDacCntr+2),a
(1) 4134/    1518 : D1                  		pop	de
(1) 4135/    1519 : C1                  		pop	bc
(1) 4136/    151A : 78                  		ld	a,b
(1) 4137/    151B : B1                  		or	c
(1) 4138/    151C : 28 17               		jr	z,.dacfill_ret
(1) 4139/    151E : 3A 37 00            		ld	a,(dDacFifoMid)
(1) 4140/    1521 : 5F                  		ld	e,a
(1) 4141/    1522 : C6 80               		add	a,80h
(1) 4142/    1524 : 32 37 00            		ld	(dDacFifoMid),a
(1) 4143/    1527 : 2A E0 19            		ld	hl,(dDacPntr)
(1) 4144/    152A : 3A E2 19            		ld	a,(dDacPntr+2)
(1) 4145/    152D : CD DE 11            		call	readRom	; *** ROM ACCESS ***
(1) 4146/    1530 : 18 03               		jr	.dacfill_ret
(1) 4147/    1532 :                     .dacfill_end:
(1) 4148/    1532 : CD 2A 14            		call	dac_off		; DAC finished
(1) 4149/    1535 :                     .dacfill_ret:
(1) 4150/    1535 : E1                  		pop	hl
(1) 4151/    1536 : D1                  		pop	de
(1) 4152/    1537 : C1                  		pop	bc
(1) 4153/    1538 : C9                  		ret
(1) 4154/    1539 :                     
(1) 4155/    1539 :                     ; ----------------------------------------------------------------
(1) 4156/    1539 :                     ; gema_lastbank
(1) 4157/    1539 :                     ;
(1) 4158/    1539 :                     ; Two purposes:
(1) 4159/    1539 :                     ; - Set the BANK to the very last part of memory for the
(1) 4160/    1539 :                     ;   readRom to read from RAM
(1) 4161/    1539 :                     ; - On 32X this sets the bank out of the ROM-reading areas due
(1) 4162/    1539 :                     ;   to a conflict with the PSG according to a Tech Bulletin.
(1) 4163/    1539 :                     ;
(1) 4164/    1539 :                     ; Uses:
(1) 4165/    1539 :                     ; hl,b
(1) 4166/    1539 :                     ; ----------------------------------------------------------------
(1) 4167/    1539 :                     
(1) 4168/    1539 :                     gema_lastbank:
(1) 4169/    1539 : 21 00 60            		ld	hl,6000h
(1) 4170/    153C : 06 09               		ld	b,9		; 9 bits
(1) 4171/    153E :                     .write:
(1) 4172/    153E : 36 01               		ld	(hl),1
(1) 4173/    1540 : 10 FC               		djnz	.write
(1) 4174/    1542 : C9                  		ret
(1) 4175/    1543 :                     
(1) 4176/    1543 :                     ; ====================================================================
(1) 4177/    1543 :                     ; ----------------------------------------------------------------
(1) 4178/    1543 :                     ; Frequency tables
(1) 4179/    1543 :                     ; ----------------------------------------------------------------
(1) 4180/    1543 :                     
(1) 4181/    1543 : 84 02               fmFreq_List:	dw 644
(1) 4182/    1545 : A9 02               		dw 681
(1) 4183/    1547 : D2 02               		dw 722
(1) 4184/    1549 : FD 02               		dw 765
(1) 4185/    154B : 2A 03               		dw 810
(1) 4186/    154D : 5A 03               		dw 858
(1) 4187/    154F : 8E 03               		dw 910
(1) 4188/    1551 : C4 03               		dw 964
(1) 4189/    1553 : FD 03               		dw 1021
(1) 4190/    1555 : 39 04               		dw 1081
(1) 4191/    1557 : 7A 04               		dw 1146
(1) 4192/    1559 : BE 04               		dw 1214
(1) 4193/    155B :                     
(1) 4194/    155B :                     ; ----------------------------------------
(1) 4195/    155B :                     ; DAC and PWM
(1) 4196/    155B :                     ; ----------------------------------------
(1) 4197/    155B :                     
(1) 4198/    155B :                     psgFreq_List:
(1) 4199/    155B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-0
(1) 4200/    155B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-1
(1) 4201/    155B :                     ; 	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1	; x-2
(1) 4202/    155B : FF FF FF FF FF FF   	dw    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,03F8h,03BFh,0389h	; x-3
             1561 : FF FF FF FF FF FF 
             1567 : FF FF FF FF FF FF 
             156D : F8 03 BF 03 89 03 
(1) 4203/    1573 : 56 03 26 03 F9 02   	dw 0356h,0326h,02F9h,02CEh,02A5h,0280h,025Ch,023Ah,021Ah,01FBh,01DFh,01C4h	; x-4
             1579 : CE 02 A5 02 80 02 
             157F : 5C 02 3A 02 1A 02 
             1585 : FB 01 DF 01 C4 01 
(1) 4204/    158B : AB 01 93 01 7D 01   	dw 01ABh,0193h,017Dh,0167h,0153h,0140h,012Eh,011Dh,010Dh,00FEh,00EFh,00E2h	; x-5
             1591 : 67 01 53 01 40 01 
             1597 : 2E 01 1D 01 0D 01 
             159D : FE 00 EF 00 E2 00 
(1) 4205/    15A3 : D6 00 C9 00 BE 00   	dw 00D6h,00C9h,00BEh,00B4h,00A9h,00A0h,0097h,008Fh,0087h,007Fh,0078h,0071h	; x-6
             15A9 : B4 00 A9 00 A0 00 
             15AF : 97 00 8F 00 87 00 
             15B5 : 7F 00 78 00 71 00 
(1) 4206/    15BB : 6B 00 65 00 5F 00   	dw 006Bh,0065h,005Fh,005Ah,0055h,0050h,004Bh,0047h,0043h,0040h,003Ch,0039h	; x-7
             15C1 : 5A 00 55 00 50 00 
             15C7 : 4B 00 47 00 43 00 
             15CD : 40 00 3C 00 39 00 
(1) 4207/    15D3 : 36 00 33 00 30 00   	dw 0036h,0033h,0030h,002Dh,002Bh,0028h,0026h,0024h,0022h,0020h,001Fh,001Dh	; x-8 *UNTESTED*
             15D9 : 2D 00 2B 00 28 00 
             15DF : 26 00 24 00 22 00 
             15E5 : 20 00 1F 00 1D 00 
(1) 4208/    15EB : 1B 00 1A 00 18 00   	dw 001Bh,001Ah,0018h,0017h,0016h,0015h,0013h,0012h,0011h,0010h,0009h,0001h	; x-9 *RESERVED FOR NOISE* Set to +47
             15F1 : 17 00 16 00 15 00 
             15F7 : 13 00 12 00 11 00 
             15FD : 10 00 09 00 01 00 
(1) 4209/    1603 :                     
(1) 4210/    1603 :                     ; ----------------------------------------
(1) 4211/    1603 :                     ; DAC and PWM shared list
(1) 4212/    1603 :                     ; ----------------------------------------
(1) 4213/    1603 :                     
(1) 4214/    1603 :                     wavFreq_List:
(1) 4215/    1603 :                     	;   C     C#    D     D#    E     F     F#    G     G#    A     A#    B
(1) 4216/    1603 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-0
(1) 4217/    1603 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-1
(1) 4218/    1603 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0036h,003Bh	; x-2
(1) 4219/    1603 : 40 00 44 00 48 00   	dw 0040h,0044h,0048h,004Ch,0051h,0056h,005Bh,0060h,0066h,006Ch,0073h,0079h	; x-3 4000 ok
             1609 : 4C 00 51 00 56 00 
             160F : 5B 00 60 00 66 00 
             1615 : 6C 00 73 00 79 00 
(1) 4220/    161B : 80 00 88 00 90 00   	dw 0080h,0088h,0090h,0099h,00A2h,00ACh,00B6h,00C1h,00CCh,00D8h,00E5h,00F2h	; x-4 8000 ok
             1621 : 99 00 A2 00 AC 00 
             1627 : B6 00 C1 00 CC 00 
             162D : D8 00 E5 00 F2 00 
(1) 4221/    1633 : 00 01 10 01 20 01   	dw 0100h,0110h,0120h,0132h,0145h,0158h,016Ch,0182h,0198h,01AEh,01C7h,01E0h	; x-5 16000 ok
             1639 : 32 01 45 01 58 01 
             163F : 6C 01 82 01 98 01 
             1645 : AE 01 C7 01 E0 01 
(1) 4222/    164B : 00 02 20 02 40 02   	dw 0200h,0220h,0240h,0260h,0280h,02A0h,02D0h,02F8h,0328h,0352h,0390h,03C8h	; x-6 32000 bad/ok
             1651 : 60 02 80 02 A0 02 
             1657 : D0 02 F8 02 28 03 
             165D : 52 03 90 03 C8 03 
(1) 4223/    1663 : 00 04               	dw 0400h;,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-7
(1) 4224/    1665 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-8
(1) 4225/    1665 :                     ; 	dw 0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h,0100h	; x-9
(1) 4226/    1665 :                     
(1) 4227/    1665 :                     ; ----------------------------------------
(1) 4228/    1665 :                     ; SegaCD PCM
(1) 4229/    1665 :                     ; ----------------------------------------
(1) 4230/    1665 :                     wavFreq_CdPcm:
(1) 4231/    1665 :                     	;     C     C#     D      D#     E      F      F#     G      G#     A      A#     B
(1) 4232/    1665 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-0
(1) 4233/    1665 :                     ; 	dw  0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h, 0100h	; x-1
(1) 4234/    1665 : F8 00 08 01 1C 01   	dw  00F8h, 0108h, 011Ch, 0128h, 013Ch, 014Ch, 0160h, 017Ch, 0188h, 01AAh, 01BCh, 01DCh	; x-2  4000 ok
             166B : 28 01 3C 01 4C 01 
             1671 : 60 01 7C 01 88 01 
             1677 : AA 01 BC 01 DC 01 
(1) 4235/    167D : F8 01 14 02 3C 02   	dw  01F8h, 0214h, 023Ch, 0258h, 027Ch, 02A0h, 02C8h, 02FCh, 031Ch, 0354h, 037Ch, 03B8h	; x-3  8000 ok
             1683 : 58 02 7C 02 A0 02 
             1689 : C8 02 FC 02 1C 03 
             168F : 54 03 7C 03 B8 03 
(1) 4236/    1695 : F0 03 28 04 68 04   	dw  03F0h, 0428h, 0468h, 04ACh, 04ECh, 0540h, 0590h, 05E4h, 063Ch, 0698h, 0704h, 0760h	; x-4 16000 ok
             169B : AC 04 EC 04 40 05 
             16A1 : 90 05 E4 05 3C 06 
             16A7 : 98 06 04 07 60 07 
(1) 4237/    16AD : DC 07 48 08 D4 08   	dw  07DCh, 0848h, 08D4h, 0960h, 09F0h, 0A64h, 0B04h, 0BAAh, 0C60h, 0D18h, 0DE4h, 0EB8h	; x-5 32000 ok
             16B3 : 60 09 F0 09 64 0A 
             16B9 : 04 0B AA 0B 60 0C 
             16BF : 18 0D E4 0D B8 0E 
(1) 4238/    16C5 : B0 0F 74 10 84 11   	dw  0FB0h, 1074h, 1184h, 1280h, 139Ch, 14C8h, 1624h, 174Ch, 18DCh, 1A38h, 1BE0h, 1D94h	; x-6 64000 untested
             16CB : 80 12 9C 13 C8 14 
             16D1 : 24 16 4C 17 DC 18 
             16D7 : 38 1A E0 1B 94 1D 
(1) 4239/    16DD :                     ; 	dw  1F64h, 20FCh, 2330h, 2524h, 2750h, 29B4h, 2C63h, 2F63h, 31E0h, 347Bh, 377Bh, 3B41h	; x-7 128000 bad
(1) 4240/    16DD :                     ; 	dw  3EE8h, 4206h, 4684h, 4A5Ah, 4EB5h, 5379h, 58E1h, 5DE0h, 63C0h, 68FFh, 6EFFh, 783Ch	; x-8 256000 bad
(1) 4241/    16DD :                     ; 	dw  7FC2h, 83FCh, 8D14h, 9780h,0AA5Dh,0B1F9h,   -1 ,   -1 ,   -1 ,   -1 ,   -1 ,   -1 	; x-9 bad
(1) 4242/    16DD :                     
(1) 4243/    16DD :                     ; ====================================================================
(1) 4244/    16DD :                     ; ----------------------------------------------------------------
(1) 4245/    16DD :                     ; Chip buffers
(1) 4246/    16DD :                     ; ----------------------------------------------------------------
(1) 4247/    16DD :                     
(1) 4248/    16DD : 00 00 00 00 00 00   pcmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             16E3 : 00 00             
(1) 4249/    16E5 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Pitch MSB
             16EB : 00 00             
(1) 4250/    16ED : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             16F3 : 00 00             
(1) 4251/    16F5 : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 24 - Volume
             16FB : FF FF             
(1) 4252/    16FD : FF FF FF FF FF FF   	db -1,-1,-1,-1,-1,-1,-1,-1		; 32 - CURRENT Panning %RRRRLLLL
             1703 : FF FF             
(1) 4253/    1705 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 40 - 24-bit sample location in Sub-CPU area
             170B : 00 00             
(1) 4254/    170D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 48
             1713 : 00 00             
(1) 4255/    1715 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 56
             171B : 00 00             
(1) 4256/    171D :                     
(1) 4257/    171D : 00 00 00 00 00 00   pwmcom:	db 00h,00h,00h,00h,00h,00h,00h,00h	; 0 - Playback bits: %0000PCOK Pitchbend/keyCut/keyOff/KeyOn
             1723 : 00 00             
(1) 4258/    1725 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 8 - Volume | Pitch MSB
             172B : 00 00             
(1) 4259/    172D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 16 - Pitch LSB
             1733 : 00 00             
(1) 4260/    1735 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 24 - Flags+MSB bits of sample %SlLRxxxx Stereo/Loop/Left/Right
             173B : 00 00             
(1) 4261/    173D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h	; 32 - ''
             1743 : 00 00             
(1) 4262/    1745 : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             174B : 00 00             
(1) 4263/    174D : 00 00 00 00 00 00   	db 00h,00h,00h,00h,00h,00h,00h,00h
             1753 : 00 00             
(1) 4264/    1755 :                     
(1) 4265/    1755 : 00 00 00 00         psgcom:	db 00h,00h,00h,00h	;  0 - command 1 = key on, 2 = key off, 4 = stop snd
(1) 4266/    1759 : FF FF FF FF         	db -1, -1, -1, -1	;  4 - output level attenuation (%llll.0000, -1 = silent)
(1) 4267/    175D : 00 00 00 00         	db 00h,00h,00h,00h	;  8 - attack rate (START)
(1) 4268/    1761 : 00 00 00 00         	db 00h,00h,00h,00h	; 12 - decay rate
(1) 4269/    1765 : 00 00 00 00         	db 00h,00h,00h,00h	; 16 - sustain level attenuation (MAXIMUM)
(1) 4270/    1769 : 00 00 00 00         	db 00h,00h,00h,00h	; 20 - release rate
(1) 4271/    176D : 00 00 00 00         	db 00h,00h,00h,00h	; 24 - envelope mode 0 = off, 1 = attack, 2 = decay, 3 = sustain
(1) 4272/    1771 : 00 00 00 00         	db 00h,00h,00h,00h	; 28 - freq bottom 4 bits
(1) 4273/    1775 : 00 00 00 00         	db 00h,00h,00h,00h	; 32 - freq upper 6 bits
(1) 4274/    1779 : 00 00 00 00         	db 00h,00h,00h,00h	; 36 - attack level attenuation
(1) 4275/    177D : 00 00 00 00         	db 00h,00h,00h,00h	; 40 - flags to indicate hardware should be updated
(1) 4276/    1781 : 00 00 00 00         	db 00h,00h,00h,00h	; 44 - timer for sustain
(1) 4277/    1785 : 00 00 00 00         	db 00h,00h,00h,00h	; 48 - MAX Volume
(1) 4278/    1789 : 00 00 00 00         	db 00h,00h,00h,00h	; 52 - Vibrato value
(1) 4279/    178D : 00 00 00 00         	db 00h,00h,00h,00h	; 56 - General timer
(1) 4280/    1791 :                     
(1) 4281/    1791 :                     ; --------------------------------------------------------
(1) 4282/    1791 :                     fmcach_1	ds 28h
(1) 4283/    17B9 :                     fmcach_2	ds 28h
(1) 4284/    17E1 :                     fmcach_3	ds 28h
(1) 4285/    1809 :                     fmcach_4	ds 28h
(1) 4286/    1831 :                     fmcach_5	ds 28h
(1) 4287/    1859 :                     fmcach_6	ds 28h
(1) 4288/    1881 :                     fmlist_rsave	ds 4*3		; 4 bytes per channel: 0000h,00h,00h
(1) 4289/    188D :                     trkInfoCach	ds 4
(1) 4290/    1891 :                     		ds 4*3		; _rsave followup
(1) 4291/    189D :                     
(1) 4292/    189D :                     ; ====================================================================
(1) 4293/    189D :                     ; ----------------------------------------------------------------
(1) 4294/    189D :                     ; Track buffers
(1) 4295/    189D :                     ; ----------------------------------------------------------------
(1) 4296/    189D :                     
(1) 4297/    189D :                     trkHdrs_0	ds 8*4			; dw point,rowcntr
(1) 4298/    18BD :                     trkHdrs_1	ds 8*4
(1) 4299/    18DD :                     trkHdrs_2	ds 8*4
(1) 4300/    18FD :                     trkBlks_0	ds 8
(1) 4301/    1905 :                     trkBlks_1	ds 8
(1) 4302/    190D :                     trkBlks_2	ds 8
(1) 4303/    1915 :                     trkBuff_0	ds seq_ChnIndx+MAX_TRKINDX
(1) 4304/    1954 :                     trkBuff_1	ds seq_ChnIndx+MAX_TRKINDX
(1) 4305/    1993 :                     trkBuff_2	ds seq_ChnIndx+MAX_TRKINDX
(1) 4306/    19D2 : 91 17               fmcach_list:	dw fmcach_1
(1) 4307/    19D4 : B9 17               		dw fmcach_2
(1) 4308/    19D6 : E1 17               		dw fmcach_3
(1) 4309/    19D8 : 00                  marsUpd		db 0			; Flag to request a PWM transfer
(1) 4310/    19D9 : 00                  mcdUpd		db 0			; Flag to request a PCM transfer
(1) 4311/    19DA : 09 18               		dw fmcach_4		; Followup
(1) 4312/    19DC : 31 18               		dw fmcach_5
(1) 4313/    19DE : 59 18               		dw fmcach_6
(1) 4314/    19E0 : 00 00 00            dDacPntr	db 0,0,0	; WAVE play current ROM position
(1) 4315/    19E3 : 00 00 00            dDacCntr	db 0,0,0	; WAVE play length counter
(1) 4316/    19E6 :                     headerOut	ds 00Eh		; Temporal storage for 68k pointers
(1) 4317/    19F4 :                     headerOut_e	ds 2		; <-- reverse readpoint
(1) 4318/    19F6 :                     sampleHead	ds 006h
(1) 4319/    19FC :                     instListOut	ds 8
(1) 4320/    1A04 :                     
(1) 4321/    1A04 :                     ; ====================================================================
(1) 4322/    1A04 :                     ; --------------------------------------------------------
(1) 4323/    1A04 :                     ; MASTER buffers list
(1) 4324/    1A04 :                     ;
(1) 4325/    1A04 :                     ; dw track_buffer
(1) 4326/    1A04 :                     ; dw channel_list,block_cache,header_cache,track_cache*
(1) 4327/    1A04 :                     ;
(1) 4328/    1A04 :                     ; * Cache MUST be aligned and in 1-bit sizes
(1) 4329/    1A04 :                     ; --------------------------------------------------------
(1) 4330/    1A04 :                     
(1) 4331/    1A04 :                     nikona_BuffList:
(1) 4332/    1A04 : 15 19 FD 18 9D 18   	dw trkBuff_0,trkBlks_0,trkHdrs_0,trkCach_0
             1A0A : 00 1F             
(1) 4333/    1A0C : 54 19 05 19 BD 18   	dw trkBuff_1,trkBlks_1,trkHdrs_1,trkCach_1
             1A12 : 20 1F             
(1) 4334/    1A14 : 93 19 0D 19 DD 18   	dw trkBuff_2,trkBlks_2,trkHdrs_2,trkCach_2
             1A1A : 40 1F             
(1) 4335/    1A1C :                     nikona_BuffList_e:
(1) 4336/    1A1C : FF FF               	dw -1	; ENDOFLIST
(1) 4337/    1A1E :                     
(1) 4338/    1A1E :                     ; ====================================================================
(1) 4339/    1A1E :                     ; --------------------------------------------------------
(1) 4340/    1A1E :                     ; Channel tables
(1) 4341/    1A1E :                     ;
(1) 4342/    1A1E :                     ; PSG   80h
(1) 4343/    1A1E :                     ; PSGN  90h
(1) 4344/    1A1E :                     ; FM   0A0h
(1) 4345/    1A1E :                     ; FM3  0B0h
(1) 4346/    1A1E :                     ; DAC  0C0h
(1) 4347/    1A1E :                     ; PCM  0D0h
(1) 4348/    1A1E :                     ; PWM  0E0h
(1) 4349/    1A1E :                     ; --------------------------------------------------------
(1) 4350/    1A1E :                     
(1) 4351/    1B00 :                     		org 1B00h			; <-- MUST BE x0h ALIGNED
(1) 4352/    1B00 : 0E 01               tblList:	dw tblPSG-tblList		;  80h
(1) 4353/    1B02 : 46 81               		dw tblPSGN-tblList|8000h	;  90h *
(1) 4354/    1B04 : A0 00               		dw tblFM-tblList		; 0A0h
(1) 4355/    1B06 : E8 80               		dw tblFM3-tblList|8000h		; 0B0h *
(1) 4356/    1B08 : FA 80               		dw tblFM6-tblList|8000h		; 0C0h *
(1) 4357/    1B0A : 0E 00               		dw tblPCM-tblList		; 0D0h
(1) 4358/    1B0C : 58 01               		dw tblPWM-tblList		; 0E0h
(1) 4359/    1B0E :                     ; 		dw 0				; 0F0h
(1) 4360/    1B0E :                     ; --------------------------------------------------------
(1) 4361/    1B0E : 00 00 00 00 00 00   tblPCM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1B14 : 00 00 00 00       
(1) 4362/    1B18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B1E : 00 00             
(1) 4363/    1B20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1B26 : 00 00 00 00       
(1) 4364/    1B2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B30 : 00 00             
(1) 4365/    1B32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1B38 : 00 00 00 00       
(1) 4366/    1B3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B42 : 00 00             
(1) 4367/    1B44 : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1B4A : 00 00 00 00       
(1) 4368/    1B4E : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B54 : 00 00             
(1) 4369/    1B56 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1B5C : 00 00 00 00       
(1) 4370/    1B60 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B66 : 00 00             
(1) 4371/    1B68 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1B6E : 00 00 00 00       
(1) 4372/    1B72 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B78 : 00 00             
(1) 4373/    1B7A : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1B80 : 00 00 00 00       
(1) 4374/    1B84 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B8A : 00 00             
(1) 4375/    1B8C : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1B92 : 00 00 00 00       
(1) 4376/    1B96 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1B9C : 00 00             
(1) 4377/    1B9E : FF FF               		dw -1	; end-of-list
(1) 4378/    1BA0 : 00 00 00 00 00 00   tblFM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1BA6 : 00 00 00 00       
(1) 4379/    1BAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BB0 : 00 00             
(1) 4380/    1BB2 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1BB8 : 00 00 00 00       
(1) 4381/    1BBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BC2 : 00 00             
(1) 4382/    1BC4 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 4 <--
             1BCA : 00 00 00 00       
(1) 4383/    1BCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BD4 : 00 00             
(1) 4384/    1BD6 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 5
             1BDC : 00 00 00 00       
(1) 4385/    1BE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BE6 : 00 00             
(1) 4386/    1BE8 : 00 00 00 02 00 00   tblFM3:		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3 <--
             1BEE : 00 00 00 00       
(1) 4387/    1BF2 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1BF8 : 00 00             
(1) 4388/    1BFA : 00 00 00 06 00 00   tblFM6:		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 6 <--
             1C00 : 00 00 00 00       
(1) 4389/    1C04 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C0A : 00 00             
(1) 4390/    1C0C : FF FF               		dw -1	; end-of-list
(1) 4391/    1C0E : 00 00 00 00 00 00   tblPSG:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C14 : 00 00 00 00       
(1) 4392/    1C18 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C1E : 00 00             
(1) 4393/    1C20 : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C26 : 00 00 00 00       
(1) 4394/    1C2A : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C30 : 00 00             
(1) 4395/    1C32 : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C38 : 00 00 00 00       
(1) 4396/    1C3C : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C42 : 00 00             
(1) 4397/    1C44 : FF FF               		dw -1	; end-of-list
(1) 4398/    1C46 : 00 00 00 03 00 00   tblPSGN:	db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Noise
             1C4C : 00 00 00 00       
(1) 4399/    1C50 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C56 : 00 00             
(1) 4400/    1C58 : 00 00 00 00 00 00   tblPWM:		db 00h,00h,00h,00h,00h,00h,00h,00h,00h,00h	; Channel 1
             1C5E : 00 00 00 00       
(1) 4401/    1C62 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C68 : 00 00             
(1) 4402/    1C6A : 00 00 00 01 00 00   		db 00h,00h,00h,01h,00h,00h,00h,00h,00h,00h	; Channel 2
             1C70 : 00 00 00 00       
(1) 4403/    1C74 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C7A : 00 00             
(1) 4404/    1C7C : 00 00 00 02 00 00   		db 00h,00h,00h,02h,00h,00h,00h,00h,00h,00h	; Channel 3
             1C82 : 00 00 00 00       
(1) 4405/    1C86 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C8C : 00 00             
(1) 4406/    1C8E : 00 00 00 03 00 00   		db 00h,00h,00h,03h,00h,00h,00h,00h,00h,00h	; Channel 4
             1C94 : 00 00 00 00       
(1) 4407/    1C98 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1C9E : 00 00             
(1) 4408/    1CA0 : 00 00 00 04 00 00   		db 00h,00h,00h,04h,00h,00h,00h,00h,00h,00h	; Channel 5
             1CA6 : 00 00 00 00       
(1) 4409/    1CAA : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CB0 : 00 00             
(1) 4410/    1CB2 : 00 00 00 05 00 00   		db 00h,00h,00h,05h,00h,00h,00h,00h,00h,00h	; Channel 6
             1CB8 : 00 00 00 00       
(1) 4411/    1CBC : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CC2 : 00 00             
(1) 4412/    1CC4 : 00 00 00 06 00 00   		db 00h,00h,00h,06h,00h,00h,00h,00h,00h,00h	; Channel 7
             1CCA : 00 00 00 00       
(1) 4413/    1CCE : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CD4 : 00 00             
(1) 4414/    1CD6 : 00 00 00 07 00 00   		db 00h,00h,00h,07h,00h,00h,00h,00h,00h,00h	; Channel 8
             1CDC : 00 00 00 00       
(1) 4415/    1CE0 : 00 00 00 00 00 00   		db 00h,00h,00h,00h,00h,00h,00h,00h
             1CE6 : 00 00             
(1) 4416/    1CE8 : FF FF               		dw -1	; end-of-list
(1) 4417/    1CEA :                     ; ----------------------------------------------------------------
(1) 4418/    1CEA : 00 00               wave_Start	dw 0		; START: 68k 24-bit pointer
(1) 4419/    1CEC : 00                  		db 0
(1) 4420/    1CED : 00 00               wave_Len	dw 0		; LENGTH 24-bit
(1) 4421/    1CEF : 00                  		db 0
(1) 4422/    1CF0 : 00 00               wave_Loop	dw 0		; LOOP POINT 24-bit
(1) 4423/    1CF2 : 00                  		db 0
(1) 4424/    1CF3 : 00 01               wave_Pitch	dw 0100h	; 01.00h
(1) 4425/    1CF5 : 00                  wave_Flags	db 0		; WAVE playback flags (%10x: 1 loop / 0 no loop)
(1) 4426/    1CF6 :                     
(1) 4427/    1CF6 : 00                  tickSpSet	db 0		; **
(1) 4428/    1CF7 : 00                  tickFlag	db 0		; Tick flag from VBlank
(1) 4429/    1CF8 : 00                  tickCnt		db 0		; ** Tick counter (PUT THIS AFTER tickFlag)
(1) 4430/    1CF9 : 00                  currTickBits	db 0		; Current Tick/Subbeat flags (000000BTb B-beat, T-tick)
(1) 4431/    1CFA :                     
(1) 4432/    1CFA :                     ; ====================================================================
(1) 4433/    1CFA :                     ; ----------------------------------------------------------------
(1) 4434/    1CFA :                     ; Special aligned buffers
(1) 4435/    1CFA :                     ;
(1) 4436/    1CFA :                     ; Located at 1D00h
(1) 4437/    1CFA :                     ; ----------------------------------------------------------------
(1) 4438/    1CFA :                     
(1) 4439/    1D00 :                     		org 1D00h
(1) 4440/    1D00 :                     dWaveBuff	ds 100h				; WAVE data buffer: 100h bytes
(1) 4441/    1E00 :                     trkChnls	ds 8*MAX_TRKCHN
(1) 4442/    1F00 :                     trkCach_0	ds MAX_RCACH
(1) 4443/    1F20 :                     trkCach_1	ds MAX_RCACH
(1) 4444/    1F40 :                     trkCach_2	ds MAX_RCACH
(1) 4445/    1F60 :                     
(1) 4446/    1F60 :                     ; ====================================================================
(1) 4447/    1F60 :                     ; ----------------------------------------------------------------
(1) 4448/    1F60 :                     ; Control area
(1) 4449/    1F60 :                     ; * MANUAL ORDER, check gema.asm *
(1) 4450/    1F60 :                     ; ----------------------------------------------------------------
(1) 4451/    1F60 :                     
(1) 4452/    1F60 :                     		org 1F60h
(1) 4453/    1F60 :                     commZfifo	ds MAX_ZCMND			; Buffer for commands from 68k side
(1) 4454/    1F80 : 00                  commZWrite	db 0				; cmd fifo wptr (from 68k)
(1) 4455/    1F81 : 00                  commZRomBlk	db 0				; 68k ROM block flag
(1) 4456/    1F82 : 00 00               cdRamDst	db 0,0				; ** Z80 destination
(1) 4457/    1F84 : 00 00               cdRamSrc	db 0,0				; ** 68k 24-bit source
(1) 4458/    1F86 : 00                  cdRamSrcB	db 0				; **
(1) 4459/    1F87 : 00                  cdRamLen	db 0				; Size + status flag
(1) 4460/    1F88 : 00                  palMode		db 0				; PAL mode flag
(1) 4461/    1F89 : 00                  mcdBlock	db 0				; Flag to BLOCK PCM transfers.
(1) 4462/    1F8A : 00                  marsBlock	db 0				; Flag to BLOCK PWM transfers.
(1) 4463/    1F8B :                     
(1) 4464/    1F8B :                     ; --------------------------------------------------------
(1) 4465/  201F8B :                     		dephase
(1) 4466/  201F8B :                     		cpu 68000		; [AS] Return to 68k
(1) 4467/  201F8B :                     		padding off		; [AS] NO padding
(1) 4468/  201F8B :                     		align 2
(1) 4469/  201F8C :                     
     318/  201F8C :                     Z80_CODE_END:
     322/    DF8C :                     		dephase
     323/    DF8C :                     		align $800
     325/    E000 :                     Z80_CODE_EOF:
     326/    E000 :                     
     327/    E000 :                     ; ====================================================================
     328/    E000 :                     ; --------------------------------------------------------
     329/    E000 :                     ; SEGA CD SUB-CPU data
     330/    E000 :                     ; --------------------------------------------------------
     331/    E000 :                     
     333/    E000 :                     		align $800
     334/    E000 :                     MCD_SMPDATA:
     335/   40000 :                     		phase $40000				; <-- MANUAL location on Sub-CPU area
     336/   40000 :                     	; ------------------------------------------------
     337/   40000 :                     		include "sound/smpl_pcm.asm"		; PCM samples
(1)    1/   40000 :                     ; ===========================================================================
(1)    2/   40000 :                     ; -------------------------------------------------------------------
(1)    3/   40000 :                     ; GEMA/Nikona PCM instruments for SCD's PCM soundchip
(1)    4/   40000 :                     ;
(1)    5/   40000 :                     ; Stored on DISC and loaded to Sub-CPU on boot
(1)    6/   40000 :                     ;
(1)    7/   40000 :                     ; MACRO:
(1)    8/   40000 :                     ; gSmplData Label,"file_path",loop_start
(1)    9/   40000 :                     ; Set loop_start to 0 if not using it.
(1)   10/   40000 :                     ;
(1)   11/   40000 :                     ; BASE C-5 samplerate is 16000hz
(1)   12/   40000 :                     ; -------------------------------------------------------------------
(1)   13/   40000 :                     
(1)   14/   40000 :                     	align 4
(1)   15/   40000 :                     	;gSmplData Label,"file_path",loop_start
(1)   16/   40000 : 4649 4C4C 4552      	dc.b "FILLER"
(1)   17/   40006 :                     
     338/   40006 :                     	; ------------------------------------------------
     339/   40006 : (MACRO)              .here:		erreport "SUB-CPU DATA",.here,$60000
     340/    E006 :                     		dephase
     341/    E006 :                     		phase MCD_SMPDATA+(.here-$40000)
     342/    E006 :                     		align $800
     343/    E800 :                     MCD_SMPDATA_E:
     344/    E800 :                     		align $800
     346/    E800 :                     
     347/    E800 :                     ; ====================================================================
     348/    E800 :                     ; ----------------------------------------------------------------
     349/    E800 :                     ; SH2 code sent to SDRAM area
     350/    E800 :                     ; ----------------------------------------------------------------
     351/    E800 :                     
     353/    E800 :                     		align $800
     357/    E800 :                     MARS_RAMCODE:
     359/    E800 :                     	; ------------------------------------------------
     360/    E800 :                     		include "nikona/mars/code.asm"
(1)    1/    E800 :                     ; ===========================================================================
(1)    2/    E800 :                     ; -------------------------------------------------------------------
(1)    3/    E800 :                     ; MARS SH2 SDRAM section, CODE is shared for both SH2 CPUs
(1)    4/    E800 :                     ;
(1)    5/    E800 :                     ; comm port setup:
(1)    6/    E800 :                     ; comm0-comm7  | FREE to USE
(1)    7/    E800 :                     ;                If any ERROR occurs: the ports comm2 and comm4
(1)    8/    E800 :                     ;                will return the a error number and the CPU
(1)    9/    E800 :                     ;                who got the error.
(1)   10/    E800 :                     ; comm8-comm11 | Reserved to Z80 for reading the PWM table
(1)   11/    E800 :                     ; comm12       | Master CPU control (see master_loop)
(1)   12/    E800 :                     ; comm14       | Slave CPU control (see slave_loop)
(1)   13/    E800 :                     ; -------------------------------------------------------------------
(1)   14/    E800 :                     
(1)   15/ 6000000 :                     		phase CS3	; We are at SDRAM
(1)   16/ 6000000 :                     		cpu SH7600
(1)   17/ 6000000 :                     
(1)   18/ 6000000 :                     ; ====================================================================
(1)   19/ 6000000 :                     ; --------------------------------------------------------
(1)   20/ 6000000 :                     ; Settings
(1)   21/ 6000000 :                     ; --------------------------------------------------------
(1)   22/ 6000000 :                     
(1)   23/ 6000000 : =$1                  SH2_DEBUG		equ 1			; Set to 1 too see if CPUs are active using comm's 0 and 1
(1)   24/ 6000000 : =$C0000800           STACK_MSTR		equ $C0000800		; !! Master's STACK point (OLD: CS3|$40000)
(1)   25/ 6000000 : =$C0000800           STACK_SLV		equ $C0000800		; !! Slave's STACK point (OLD: CS3|$3F800)
(1)   26/ 6000000 :                     
(1)   27/ 6000000 :                     ; ====================================================================
(1)   28/ 6000000 :                     ; ----------------------------------------------------------------
(1)   29/ 6000000 :                     ; Macros
(1)   30/ 6000000 :                     ; ----------------------------------------------------------------
(1)   31/ 6000000 :                     
(1)   32/ 6000000 :                     cpu_me macro color
(1)   33/ 6000000 :                     	if MARSCD=0	; <-- Doesn't work on FUSION
(1)   34/ 6000000 :                     		mov	#color,r1
(1)   35/ 6000000 :                     		mov	#_vdpreg,r2
(1)   36/ 6000000 :                     		mov	#_vdpreg+bitmapmd,r3
(1)   37/ 6000000 :                     .hblk:		mov.b	@(vdpsts,r2),r0
(1)   38/ 6000000 :                     		tst	#HBLK,r0
(1)   39/ 6000000 :                     		bt	.hblk
(1)   40/ 6000000 :                     		mov.b	r1,@r3
(1)   41/ 6000000 :                     		nop
(1)   42/ 6000000 :                     	endif
(1)   43/ 6000000 :                     	endm
(1)   44/ 6000000 :                     
(1)   45/ 6000000 :                     ; ====================================================================
(1)   46/ 6000000 :                     ; ----------------------------------------------------------------
(1)   47/ 6000000 :                     ; MASTER CPU VECTOR LIST (vbr)
(1)   48/ 6000000 :                     ; ----------------------------------------------------------------
(1)   49/ 6000000 :                     
(1)   50/ 6000000 :                     		align 4
(1)   51/ 6000000 :                     SH2_Master:
(1)   52/ 6000000 : 0600 07AC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Power PC, Stack
          6000006 : 0800             
(1)   53/ 6000008 : 0600 07AC C000      		dc.l SH2_M_Entry,STACK_MSTR	; Reset PC, Stack
          600000E : 0800             
(1)   54/ 6000010 : 0600 0324           		dc.l SH2_M_ErrIllg		; Illegal instruction
(1)   55/ 6000014 : 0000 0000           		dc.l 0				; Reserved
(1)   56/ 6000018 : 0600 0328           		dc.l SH2_M_ErrInvl		; Invalid slot instruction
(1)   57/ 600001C : 2010 0400           		dc.l $20100400			; Reserved
(1)   58/ 6000020 : 2010 0420           		dc.l $20100420			; Reserved
(1)   59/ 6000024 : 0600 032C           		dc.l SH2_M_ErrAddr		; CPU address error
(1)   60/ 6000028 : 0600 0330           		dc.l SH2_M_ErrDma		; DMA address error
(1)   61/ 600002C : 0600 0334           		dc.l SH2_M_ErrNmi		; NMI vector
(1)   62/ 6000030 : 0600 0338           		dc.l SH2_M_ErrUser		; User break vector
(1)   63/ 6000034 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          600003A : 0000 0000 0000 
          6000040 : 0000 0000 0000 
          6000046 : 0000 0000 0000 
          600004C : 0000 0000 0000 
          6000052 : 0000 0000 0000    
(1)   64/ 6000058 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          600005E : 0000 0000 0000 
          6000064 : 0000 0000 0000 
          600006A : 0000 0000 0000 
          6000070 : 0000 0000 0000 
          6000076 : 0000 0000 0000    
(1)   65/ 600007C : 0000 0000           		dc.l 0
(1)   66/ 6000080 : 0600 0320           		dc.l SH2_M_Error		; Trap user vectors
(1)   67/ 6000084 : 0600 0320           		dc.l SH2_M_Error
(1)   68/ 6000088 : 0600 0320           		dc.l SH2_M_Error
(1)   69/ 600008C : 0600 0320           		dc.l SH2_M_Error
(1)   70/ 6000090 : 0600 0320           		dc.l SH2_M_Error
(1)   71/ 6000094 : 0600 0320           		dc.l SH2_M_Error
(1)   72/ 6000098 : 0600 0320           		dc.l SH2_M_Error
(1)   73/ 600009C : 0600 0320           		dc.l SH2_M_Error
(1)   74/ 60000A0 : 0600 0320           		dc.l SH2_M_Error
(1)   75/ 60000A4 : 0600 0320           		dc.l SH2_M_Error
(1)   76/ 60000A8 : 0600 0320           		dc.l SH2_M_Error
(1)   77/ 60000AC : 0600 0320           		dc.l SH2_M_Error
(1)   78/ 60000B0 : 0600 0320           		dc.l SH2_M_Error
(1)   79/ 60000B4 : 0600 0320           		dc.l SH2_M_Error
(1)   80/ 60000B8 : 0600 0320           		dc.l SH2_M_Error
(1)   81/ 60000BC : 0600 0320           		dc.l SH2_M_Error
(1)   82/ 60000C0 : 0600 0320           		dc.l SH2_M_Error
(1)   83/ 60000C4 : 0600 0320           		dc.l SH2_M_Error
(1)   84/ 60000C8 : 0600 0320           		dc.l SH2_M_Error
(1)   85/ 60000CC : 0600 0320           		dc.l SH2_M_Error
(1)   86/ 60000D0 : 0600 0320           		dc.l SH2_M_Error
(1)   87/ 60000D4 : 0600 0320           		dc.l SH2_M_Error
(1)   88/ 60000D8 : 0600 0320           		dc.l SH2_M_Error
(1)   89/ 60000DC : 0600 0320           		dc.l SH2_M_Error
(1)   90/ 60000E0 : 0600 0320           		dc.l SH2_M_Error
(1)   91/ 60000E4 : 0600 0320           		dc.l SH2_M_Error
(1)   92/ 60000E8 : 0600 0320           		dc.l SH2_M_Error
(1)   93/ 60000EC : 0600 0320           		dc.l SH2_M_Error
(1)   94/ 60000F0 : 0600 0320           		dc.l SH2_M_Error
(1)   95/ 60000F4 : 0600 0320           		dc.l SH2_M_Error
(1)   96/ 60000F8 : 0600 0320           		dc.l SH2_M_Error
(1)   97/ 60000FC : 0600 0320           		dc.l SH2_M_Error
(1)   98/ 6000100 : 0600 0250            		dc.l master_irq			; Level 0 & 1 IRQ
(1)   99/ 6000104 : 0600 0250           		dc.l master_irq			; Level 2 & 3 IRQ
(1)  100/ 6000108 : 0600 0250           		dc.l master_irq			; Level 4 & 5 IRQ
(1)  101/ 600010C : 0600 0250           		dc.l master_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  102/ 6000110 : 0600 0250           		dc.l master_irq			; Level 8 & 9 IRQ: Command interupt
(1)  103/ 6000114 : 0600 0250           		dc.l master_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  104/ 6000118 : 0600 0250           		dc.l master_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  105/ 600011C : 0600 0250           		dc.l master_irq			; Level 14 & 15 IRQ: Reset Button
(1)  106/ 6000120 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  107/ 6000120 : 0600 0250           		dc.l master_irq			; Watchdog
(1)  108/ 6000124 : 0600 0250           		dc.l master_irq			; DMA
(1)  109/ 6000128 :                     
(1)  110/ 6000128 :                     ; ====================================================================
(1)  111/ 6000128 :                     ; ----------------------------------------------------------------
(1)  112/ 6000128 :                     ; SLAVE CPU VECTOR LIST (vbr)
(1)  113/ 6000128 :                     ; ----------------------------------------------------------------
(1)  114/ 6000128 :                     
(1)  115/ 6000128 :                     		align 4
(1)  116/ 6000128 :                     SH2_Slave:
(1)  117/ 6000128 : 0600 0EA4 C000      		dc.l SH2_S_Entry,STACK_SLV	; Cold PC,SP
          600012E : 0800             
(1)  118/ 6000130 : 0600 0EA4 C000      		dc.l SH2_S_Entry,STACK_SLV	; Manual PC,SP
          6000136 : 0800             
(1)  119/ 6000138 : 0600 0350           		dc.l SH2_S_ErrIllg		; Illegal instruction
(1)  120/ 600013C : 0000 0000           		dc.l 0				; Reserved
(1)  121/ 6000140 : 0600 0354           		dc.l SH2_S_ErrInvl		; Invalid slot instruction
(1)  122/ 6000144 : 2010 0400           		dc.l $20100400			; Reserved
(1)  123/ 6000148 : 2010 0420           		dc.l $20100420			; Reserved
(1)  124/ 600014C : 0600 0358           		dc.l SH2_S_ErrAddr		; CPU address error
(1)  125/ 6000150 : 0600 035C           		dc.l SH2_S_ErrDma		; DMA address error
(1)  126/ 6000154 : 0600 0360           		dc.l SH2_S_ErrNmi		; NMI vector
(1)  127/ 6000158 : 0600 0364           		dc.l SH2_S_ErrUser		; User break vector
(1)  128/ 600015C : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0		; Reserved
          6000162 : 0000 0000 0000 
          6000168 : 0000 0000 0000 
          600016E : 0000 0000 0000 
          6000174 : 0000 0000 0000 
          600017A : 0000 0000 0000    
(1)  129/ 6000180 : 0000 0000 0000      		dc.l 0,0,0,0,0,0,0,0,0
          6000186 : 0000 0000 0000 
          600018C : 0000 0000 0000 
          6000192 : 0000 0000 0000 
          6000198 : 0000 0000 0000 
          600019E : 0000 0000 0000    
(1)  130/ 60001A4 : 0000 0000           		dc.l 0
(1)  131/ 60001A8 : 0600 034C           		dc.l SH2_S_Error		; Trap user vectors
(1)  132/ 60001AC : 0600 034C           		dc.l SH2_S_Error
(1)  133/ 60001B0 : 0600 034C           		dc.l SH2_S_Error
(1)  134/ 60001B4 : 0600 034C           		dc.l SH2_S_Error
(1)  135/ 60001B8 : 0600 034C           		dc.l SH2_S_Error
(1)  136/ 60001BC : 0600 034C           		dc.l SH2_S_Error
(1)  137/ 60001C0 : 0600 034C           		dc.l SH2_S_Error
(1)  138/ 60001C4 : 0600 034C           		dc.l SH2_S_Error
(1)  139/ 60001C8 : 0600 034C           		dc.l SH2_S_Error
(1)  140/ 60001CC : 0600 034C           		dc.l SH2_S_Error
(1)  141/ 60001D0 : 0600 034C           		dc.l SH2_S_Error
(1)  142/ 60001D4 : 0600 034C           		dc.l SH2_S_Error
(1)  143/ 60001D8 : 0600 034C           		dc.l SH2_S_Error
(1)  144/ 60001DC : 0600 034C           		dc.l SH2_S_Error
(1)  145/ 60001E0 : 0600 034C           		dc.l SH2_S_Error
(1)  146/ 60001E4 : 0600 034C           		dc.l SH2_S_Error
(1)  147/ 60001E8 : 0600 034C           		dc.l SH2_S_Error
(1)  148/ 60001EC : 0600 034C           		dc.l SH2_S_Error
(1)  149/ 60001F0 : 0600 034C           		dc.l SH2_S_Error
(1)  150/ 60001F4 : 0600 034C           		dc.l SH2_S_Error
(1)  151/ 60001F8 : 0600 034C           		dc.l SH2_S_Error
(1)  152/ 60001FC : 0600 034C           		dc.l SH2_S_Error
(1)  153/ 6000200 : 0600 034C           		dc.l SH2_S_Error
(1)  154/ 6000204 : 0600 034C           		dc.l SH2_S_Error
(1)  155/ 6000208 : 0600 034C           		dc.l SH2_S_Error
(1)  156/ 600020C : 0600 034C           		dc.l SH2_S_Error
(1)  157/ 6000210 : 0600 034C           		dc.l SH2_S_Error
(1)  158/ 6000214 : 0600 034C           		dc.l SH2_S_Error
(1)  159/ 6000218 : 0600 034C           		dc.l SH2_S_Error
(1)  160/ 600021C : 0600 034C           		dc.l SH2_S_Error
(1)  161/ 6000220 : 0600 034C           		dc.l SH2_S_Error
(1)  162/ 6000224 : 0600 034C           		dc.l SH2_S_Error
(1)  163/ 6000228 : 0600 0278            		dc.l slave_irq			; Level 0 & 1 IRQ
(1)  164/ 600022C : 0600 0278           		dc.l slave_irq			; Level 2 & 3 IRQ
(1)  165/ 6000230 : 0600 0278           		dc.l slave_irq			; Level 4 & 5 IRQ
(1)  166/ 6000234 : 0600 0278           		dc.l slave_irq			; Level 6 & 7 IRQ: PWM interupt
(1)  167/ 6000238 : 0600 0278           		dc.l slave_irq			; Level 8 & 9 IRQ: Command interupt
(1)  168/ 600023C : 0600 0278           		dc.l slave_irq			; Level 10 & 11 IRQ: H Blank interupt
(1)  169/ 6000240 : 0600 0278           		dc.l slave_irq			; Level 12 & 13 IRQ: V Blank interupt
(1)  170/ 6000244 : 0600 0278           		dc.l slave_irq			; Level 14 & 15 IRQ: Reset Button
(1)  171/ 6000248 :                     	; Extra ON-chip interrupts (vbr+$120)
(1)  172/ 6000248 : 0600 0278           		dc.l slave_irq			; Watchdog
(1)  173/ 600024C : 0600 0278           		dc.l slave_irq			; DMA
(1)  174/ 6000250 :                     
(1)  175/ 6000250 :                     ; ====================================================================
(1)  176/ 6000250 :                     ; ----------------------------------------------------------------
(1)  177/ 6000250 :                     ; IRQ on both SH2's
(1)  178/ 6000250 :                     ;
(1)  179/ 6000250 :                     ; r0-r1 are saved
(1)  180/ 6000250 :                     ; ----------------------------------------------------------------
(1)  181/ 6000250 :                     
(1)  182/ 6000250 :                     ; sr: %xxxxMQIIIIxxST
(1)  183/ 6000250 :                     
(1)  184/ 6000250 :                     		align 4
(1)  185/ 6000250 :                     master_irq:
(1)  186/ 6000250 : 2F06                		mov	r0,@-r15
(1)  187/ 6000252 : 2F16                		mov	r1,@-r15
(1)  188/ 6000254 : 4F22                		sts	pr,@-r15
(1)  189/ 6000256 : 0002                		stc	sr,r0
(1)  190/ 6000258 : 4009                		shlr2	r0
(1)  191/ 600025A : C93C                		and	#$3C,r0
(1)  192/ 600025C : 6103                		mov	r0,r1
(1)  193/ 600025E : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  194/ 6000260 : 600C                		extu.b	r0,r0
(1)  195/ 6000262 : 400E                		ldc	r0,sr
(1)  196/ 6000264 : C70E                		mova	int_m_list,r0
(1)  197/ 6000266 : 301C                		add	r1,r0
(1)  198/ 6000268 : 6102                		mov	@r0,r1
(1)  199/ 600026A : 410B                		jsr	@r1
(1)  200/ 600026C : 0009                		nop
(1)  201/ 600026E : 4F26                		lds	@r15+,pr
(1)  202/ 6000270 : 61F6                		mov	@r15+,r1
(1)  203/ 6000272 : 60F6                		mov	@r15+,r0
(1)  204/ 6000274 : 002B                		rte
(1)  205/ 6000276 : 0009                		nop
(1)  206/ 6000278 :                     		align 4
(1)  207/ 6000278 :                     
(1)  208/ 6000278 :                     ; ====================================================================
(1)  209/ 6000278 :                     
(1)  210/ 6000278 :                     slave_irq:
(1)  211/ 6000278 : 2F06                		mov	r0,@-r15
(1)  212/ 600027A : 2F16                		mov	r1,@-r15
(1)  213/ 600027C : 4F22                		sts	pr,@-r15
(1)  214/ 600027E : 0002                		stc	sr,r0
(1)  215/ 6000280 : 4009                		shlr2	r0
(1)  216/ 6000282 : C93C                		and	#$3C,r0
(1)  217/ 6000284 : 6103                		mov	r0,r1
(1)  218/ 6000286 : E0F0                		mov.b	#$F0,r0		; ** $F0
(1)  219/ 6000288 : 600C                		extu.b	r0,r0
(1)  220/ 600028A : 400E                		ldc	r0,sr
(1)  221/ 600028C : C714                		mova	int_s_list,r0
(1)  222/ 600028E : 301C                		add	r1,r0
(1)  223/ 6000290 : 6102                		mov	@r0,r1
(1)  224/ 6000292 : 410B                		jsr	@r1
(1)  225/ 6000294 : 0009                		nop
(1)  226/ 6000296 : 4F26                		lds	@r15+,pr
(1)  227/ 6000298 : 61F6                		mov	@r15+,r1
(1)  228/ 600029A : 60F6                		mov	@r15+,r0
(1)  229/ 600029C : 002B                		rte
(1)  230/ 600029E : 0009                		nop
(1)  231/ 60002A0 :                     		align 4
(1)  232/ 60002A0 :                     
(1)  233/ 60002A0 :                     ; ====================================================================
(1)  234/ 60002A0 :                     ; ------------------------------------------------
(1)  235/ 60002A0 :                     ; irq list
(1)  236/ 60002A0 :                     ; ------------------------------------------------
(1)  237/ 60002A0 :                     
(1)  238/ 60002A0 :                     		align 4
(1)  239/ 60002A0 :                     ;				  		  IRQ Level:
(1)  240/ 60002A0 :                     int_m_list:
(1)  241/ 60002A0 : 0600 0380           		dc.l m_irq_bad			; 0
(1)  242/ 60002A4 : 0600 0380           		dc.l m_irq_bad			; 1
(1)  243/ 60002A8 : 0600 0380           		dc.l m_irq_bad			; 2
(1)  244/ 60002AC : 0600 1A14           		dc.l m_irq_wdg			; 3 Watchdog
(1)  245/ 60002B0 : 0600 0380           		dc.l m_irq_bad			; 4
(1)  246/ 60002B4 : 0600 0398           		dc.l m_irq_dma			; 5 DMA exit
(1)  247/ 60002B8 : 0600 03C4           		dc.l m_irq_pwm			; 6
(1)  248/ 60002BC : 0600 03C4           		dc.l m_irq_pwm			; 7
(1)  249/ 60002C0 : 0600 03D4           		dc.l m_irq_cmd			; 8
(1)  250/ 60002C4 : 0600 03D4           		dc.l m_irq_cmd			; 9
(1)  251/ 60002C8 : 0600 0428           		dc.l m_irq_h			; A
(1)  252/ 60002CC : 0600 0428           		dc.l m_irq_h			; B
(1)  253/ 60002D0 : 0600 0438           		dc.l m_irq_v			; C
(1)  254/ 60002D4 : 0600 0438           		dc.l m_irq_v			; D
(1)  255/ 60002D8 : 0600 0454           		dc.l m_irq_vres			; E
(1)  256/ 60002DC : 0600 0454           		dc.l m_irq_vres			; F
(1)  257/ 60002E0 :                     int_s_list:
(1)  258/ 60002E0 : 0600 04D4           		dc.l s_irq_bad			; 0
(1)  259/ 60002E4 : 0600 04D4           		dc.l s_irq_bad			; 1
(1)  260/ 60002E8 : 0600 04D4           		dc.l s_irq_bad			; 2
(1)  261/ 60002EC : 0600 04D8           		dc.l s_irq_wdg			; 3 Watchdog
(1)  262/ 60002F0 : 0600 04D4           		dc.l s_irq_bad			; 4
(1)  263/ 60002F4 : 0600 04E4           		dc.l s_irq_dma			; 5 DMA exit
(1)  264/ 60002F8 : C000 0000           		dc.l s_irq_pwm|$C0000000	; 6 <-- Cache jump(s)
(1)  265/ 60002FC : C000 0000           		dc.l s_irq_pwm|$C0000000	; 7
(1)  266/ 6000300 : 0600 04F4           		dc.l s_irq_cmd			; 8
(1)  267/ 6000304 : 0600 04F4           		dc.l s_irq_cmd			; 9
(1)  268/ 6000308 : 0600 072A           		dc.l s_irq_h			; A
(1)  269/ 600030C : 0600 072A           		dc.l s_irq_h			; B
(1)  270/ 6000310 : 0600 073C           		dc.l s_irq_v			; C
(1)  271/ 6000314 : 0600 073C           		dc.l s_irq_v			; D
(1)  272/ 6000318 : 0600 074C           		dc.l s_irq_vres			; E
(1)  273/ 600031C : 0600 074C           		dc.l s_irq_vres			; F
(1)  274/ 6000320 :                     
(1)  275/ 6000320 :                     ; ====================================================================
(1)  276/ 6000320 :                     ; ----------------------------------------------------------------
(1)  277/ 6000320 :                     ; Error handler
(1)  278/ 6000320 :                     ; ----------------------------------------------------------------
(1)  279/ 6000320 :                     
(1)  280/ 6000320 :                     ; *** Only works on HARDWARE ***
(1)  281/ 6000320 :                     ;
(1)  282/ 6000320 :                     ; comm2: (CPU)(CODE)
(1)  283/ 6000320 :                     ; comm4: PC counter
(1)  284/ 6000320 :                     ;
(1)  285/ 6000320 :                     ;  CPU | The CPU who got the error:
(1)  286/ 6000320 :                     ;        $00 - Master
(1)  287/ 6000320 :                     ;        $01 - Slave
(1)  288/ 6000320 :                     ;
(1)  289/ 6000320 :                     ; CODE | Error type:
(1)  290/ 6000320 :                     ;	 $00: Unknown error
(1)  291/ 6000320 :                     ;	 $01: Illegal instruction
(1)  292/ 6000320 :                     ;	 $02: Invalid slot instruction
(1)  293/ 6000320 :                     ;	 $03: Address error
(1)  294/ 6000320 :                     ;	 $04: DMA error
(1)  295/ 6000320 :                     ;	 $05: NMI vector
(1)  296/ 6000320 :                     ;	 $06: User break
(1)  297/ 6000320 :                     
(1)  298/ 6000320 :                     SH2_M_Error:
(1)  299/ 6000320 : A00C                		bra	SH2_M_ErrCode
(1)  300/ 6000322 : E000                		mov	#0,r0
(1)  301/ 6000324 :                     SH2_M_ErrIllg:
(1)  302/ 6000324 : A00A                		bra	SH2_M_ErrCode
(1)  303/ 6000326 : E001                		mov	#1,r0
(1)  304/ 6000328 :                     SH2_M_ErrInvl:
(1)  305/ 6000328 : A008                		bra	SH2_M_ErrCode
(1)  306/ 600032A : E002                		mov	#2,r0
(1)  307/ 600032C :                     SH2_M_ErrAddr:
(1)  308/ 600032C : A006                		bra	SH2_M_ErrCode
(1)  309/ 600032E : E003                		mov	#3,r0
(1)  310/ 6000330 :                     SH2_M_ErrDma:
(1)  311/ 6000330 : A004                		bra	SH2_M_ErrCode
(1)  312/ 6000332 : E004                		mov	#4,r0
(1)  313/ 6000334 :                     SH2_M_ErrNmi:
(1)  314/ 6000334 : A002                		bra	SH2_M_ErrCode
(1)  315/ 6000336 : E005                		mov	#5,r0
(1)  316/ 6000338 :                     SH2_M_ErrUser:
(1)  317/ 6000338 : A000                		bra	SH2_M_ErrCode
(1)  318/ 600033A : E006                		mov	#6,r0
(1)  319/ 600033C :                     ; r0 - value
(1)  320/ 600033C :                     SH2_M_ErrCode:
(1)  321/ 600033C : D10E                		mov	#_sysreg+comm2,r1
(1)  322/ 600033E : 2101                		mov.w	r0,@r1
(1)  323/ 6000340 : D10E                		mov	#_sysreg+comm4,r1
(1)  324/ 6000342 : 60F2                		mov	@r15,r0
(1)  325/ 6000344 : 2102                		mov	r0,@r1
(1)  326/ 6000346 : AFFE                		bra	*
(1)  327/ 6000348 : 0009                		nop
(1)  328/ 600034A :                     		align 4
(1)  329/ 600034C :                     
(1)  330/ 600034C :                     ; ----------------------------------------------------
(1)  331/ 600034C :                     
(1)  332/ 600034C :                     SH2_S_Error:
(1)  333/ 600034C : A00C                		bra	SH2_S_ErrCode
(1)  334/ 600034E : E000                		mov	#0,r0
(1)  335/ 6000350 :                     SH2_S_ErrIllg:
(1)  336/ 6000350 : A00A                		bra	SH2_S_ErrCode
(1)  337/ 6000352 : E0FF                		mov	#-1,r0
(1)  338/ 6000354 :                     SH2_S_ErrInvl:
(1)  339/ 6000354 : A008                		bra	SH2_S_ErrCode
(1)  340/ 6000356 : E0FE                		mov	#-2,r0
(1)  341/ 6000358 :                     SH2_S_ErrAddr:
(1)  342/ 6000358 : A006                		bra	SH2_S_ErrCode
(1)  343/ 600035A : E0FD                		mov	#-3,r0
(1)  344/ 600035C :                     SH2_S_ErrDma:
(1)  345/ 600035C : A004                		bra	SH2_S_ErrCode
(1)  346/ 600035E : E0FC                		mov	#-4,r0
(1)  347/ 6000360 :                     SH2_S_ErrNmi:
(1)  348/ 6000360 : A002                		bra	SH2_S_ErrCode
(1)  349/ 6000362 : E0FB                		mov	#-5,r0
(1)  350/ 6000364 :                     SH2_S_ErrUser:
(1)  351/ 6000364 : A000                		bra	SH2_S_ErrCode
(1)  352/ 6000366 : E0FA                		mov	#-6,r0
(1)  353/ 6000368 :                     ; r0 - value
(1)  354/ 6000368 :                     SH2_S_ErrCode:
(1)  355/ 6000368 : D103                		mov	#_sysreg+comm2,r1
(1)  356/ 600036A : 2101                		mov.w	r0,@r1
(1)  357/ 600036C : D103                		mov	#_sysreg+comm4,r1
(1)  358/ 600036E : 60F2                		mov	@r15,r0
(1)  359/ 6000370 : 2102                		mov	r0,@r1
(1)  360/ 6000372 : AFFE                		bra	*
(1)  361/ 6000374 : 0009                		nop
(1)  362/ 6000376 :                     		align 4
(1)  363/ 6000378 : 2000 4022 2000      		ltorg
          600037E : 4024             
(1)  364/ 6000380 :                     
(1)  365/ 6000380 :                     ; ====================================================================
(1)  366/ 6000380 :                     ; ----------------------------------------------------------------
(1)  367/ 6000380 :                     ; Interrupts
(1)  368/ 6000380 :                     ; ----------------------------------------------------------------
(1)  369/ 6000380 :                     
(1)  370/ 6000380 :                     ; =================================================================
(1)  371/ 6000380 :                     ; ------------------------------------------------
(1)  372/ 6000380 :                     ; Master | Unused interrupt
(1)  373/ 6000380 :                     ; ------------------------------------------------
(1)  374/ 6000380 :                     
(1)  375/ 6000380 :                     		align 4
(1)  376/ 6000380 :                     m_irq_bad:
(1)  377/ 6000380 : 91A2                		mov	#_FRT,r1
(1)  378/ 6000382 : 8417                		mov.b	@(7,r1),r0
(1)  379/ 6000384 : CA02                		xor	#2,r0
(1)  380/ 6000386 : 8017                		mov.b	r0,@(7,r1)
(1)  381/ 6000388 : 0009                		nop
(1)  382/ 600038A : 0009                		nop
(1)  383/ 600038C : 0009                		nop
(1)  384/ 600038E : 0009                		nop
(1)  385/ 6000390 : 0009                		nop
(1)  386/ 6000392 : 000B                		rts
(1)  387/ 6000394 : 0009                		nop
(1)  388/ 6000396 :                     		align 4
(1)  389/ 6000398 :                     
(1)  390/ 6000398 :                     ; ; =================================================================
(1)  391/ 6000398 :                     ; ; ------------------------------------------------
(1)  392/ 6000398 :                     ; ; Master | Watchdog
(1)  393/ 6000398 :                     ; ; ------------------------------------------------
(1)  394/ 6000398 :                     ;
(1)  395/ 6000398 :                     ; MOVED TO video.asm
(1)  396/ 6000398 :                     ; m_irq_wdg:
(1)  397/ 6000398 :                     ; 		mov	#_FRT,r1
(1)  398/ 6000398 :                     ; 		mov.b	@(7,r1),r0
(1)  399/ 6000398 :                     ; 		xor	#2,r0
(1)  400/ 6000398 :                     ; 		mov.b	r0,@(7,r1)
(1)  401/ 6000398 :                     ; 		nop
(1)  402/ 6000398 :                     ; 		nop
(1)  403/ 6000398 :                     ; 		nop
(1)  404/ 6000398 :                     ; 		nop
(1)  405/ 6000398 :                     ; 		nop
(1)  406/ 6000398 :                     ; 		rts
(1)  407/ 6000398 :                     ; 		nop
(1)  408/ 6000398 :                     ; 		align 4
(1)  409/ 6000398 :                     
(1)  410/ 6000398 :                     ; =================================================================
(1)  411/ 6000398 :                     ; ------------------------------------------------
(1)  412/ 6000398 :                     ; Master | DMA Exit
(1)  413/ 6000398 :                     ; ------------------------------------------------
(1)  414/ 6000398 :                     
(1)  415/ 6000398 :                     m_irq_dma:
(1)  416/ 6000398 : 9196                		mov	#_FRT,r1
(1)  417/ 600039A : 8417                		mov.b	@(7,r1),r0
(1)  418/ 600039C : CA02                		xor	#2,r0
(1)  419/ 600039E : 8017                		mov.b	r0,@(7,r1)
(1)  420/ 60003A0 : E18C                		mov	#_DMACHANNEL0,r1
(1)  421/ 60003A2 : 6012                .wait_dma:	mov	@r1,r0				; <-- Fail-safe
(1)  422/ 60003A4 : C802                		tst	#%10,r0
(1)  423/ 60003A6 : 89FC                		bt	.wait_dma
(1)  424/ 60003A8 : 6012                		mov	@r1,r0				; Dummy read
(1)  425/ 60003AA : 908E                		mov	#%0100010011100000,r0
(1)  426/ 60003AC : 2102                		mov	r0,@r1				; Turn this DMA off.
(1)  427/ 60003AE : D13A                		mov	#_sysreg+comm12,r1
(1)  428/ 60003B0 : 6010                		mov.b	@r1,r0
(1)  429/ 60003B2 : C9BF                		and	#%10111111,r0			; Report EXIT status
(1)  430/ 60003B4 : 2100                		mov.b	r0,@r1
(1)  442/ 60003B6 : 0009                		nop
(1)  443/ 60003B8 : 0009                		nop
(1)  444/ 60003BA : 0009                		nop
(1)  445/ 60003BC : 0009                		nop
(1)  446/ 60003BE : 0009                		nop
(1)  447/ 60003C0 : 000B                		rts
(1)  448/ 60003C2 : 0009                		nop
(1)  449/ 60003C4 :                     		align 4
(1)  450/ 60003C4 :                     
(1)  451/ 60003C4 :                     ; =================================================================
(1)  452/ 60003C4 :                     ; ------------------------------------------------
(1)  453/ 60003C4 :                     ; Master | PWM Interrupt
(1)  454/ 60003C4 :                     ; ------------------------------------------------
(1)  455/ 60003C4 :                     
(1)  456/ 60003C4 :                     m_irq_pwm:
(1)  457/ 60003C4 : 9180                		mov	#_FRT,r1
(1)  458/ 60003C6 : 8417                		mov.b	@(7,r1),r0
(1)  459/ 60003C8 : CA02                		xor	#2,r0
(1)  460/ 60003CA : 8017                		mov.b	r0,@(7,r1)
(1)  461/ 60003CC : D133                		mov	#_sysreg+pwmintclr,r1
(1)  462/ 60003CE : 2101                		mov.w	r0,@r1
(1)  463/ 60003D0 : 000B                		rts
(1)  464/ 60003D2 : 0009                		nop
(1)  465/ 60003D4 :                     		align 4
(1)  466/ 60003D4 :                     
(1)  467/ 60003D4 :                     ; =================================================================
(1)  468/ 60003D4 :                     ; ------------------------------------------------
(1)  469/ 60003D4 :                     ; Master | CMD Interrupt
(1)  470/ 60003D4 :                     ; ------------------------------------------------
(1)  471/ 60003D4 :                     
(1)  472/ 60003D4 :                     m_irq_cmd:
(1)  473/ 60003D4 : 9178                		mov	#_FRT,r1
(1)  474/ 60003D6 : 8417                		mov.b	@(7,r1),r0
(1)  475/ 60003D8 : CA02                		xor	#2,r0
(1)  476/ 60003DA : 8017                		mov.b	r0,@(7,r1)
(1)  477/ 60003DC : D130                		mov	#_sysreg+cmdintclr,r1
(1)  478/ 60003DE : 2101                		mov.w	r0,@r1
(1)  479/ 60003E0 : 6011                		mov.w	@r1,r0
(1)  480/ 60003E2 : 2F26                		mov	r2,@-r15
(1)  481/ 60003E4 : 2F36                		mov	r3,@-r15
(1)  482/ 60003E6 : 2F46                		mov	r4,@-r15
(1)  483/ 60003E8 :                     	; --------------------------------
(1)  495/ 60003E8 :                     	; --------------------------------
(1)  496/ 60003E8 : D42E                		mov	#_sysreg,r4			; r4 - sysreg base
(1)  497/ 60003EA : E380                		mov	#_DMASOURCE0,r3			; r3 - DMA base register
(1)  498/ 60003EC : D22A                		mov	#_sysreg+comm12,r2		; r2 - comm to write the signal
(1)  499/ 60003EE : 906C                		mov	#%0100010011100000,r0		; Transfer mode + DMA enable OFF
(1)  500/ 60003F0 : 1303                		mov	r0,@($C,r3)
(1)  501/ 60003F2 : 6020                		mov.b	@r2,r0
(1)  502/ 60003F4 : C90F                		and	#%00001111,r0
(1)  503/ 60003F6 : 2008                		tst	r0,r0				; CMD mode $00?
(1)  504/ 60003F8 : 8B03                		bf	.dreq_ram
(1)  505/ 60003FA : 5043                		mov	@(dreqdest,r4),r0		; Set destination
(1)  506/ 60003FC : D12A                		mov	#CS3,r1
(1)  507/ 60003FE : A001                		bra	.dreq_setdest
(1)  508/ 6000400 : 201B                		or	r1,r0
(1)  509/ 6000402 :                     .dreq_ram:
(1)  510/ 6000402 : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Pick current WRITE buffer
(1)  511/ 6000404 :                     .dreq_setdest:
(1)  512/ 6000404 : D129                		mov	#TH,r1				; as Cache-thru
(1)  513/ 6000406 : 201B                		or	r1,r0
(1)  514/ 6000408 : 1301                		mov	r0,@(4,r3)			; Set Destination
(1)  515/ 600040A : 8548                		mov.w	@(dreqlen,r4),r0
(1)  516/ 600040C : 600D                		extu.w	r0,r0
(1)  517/ 600040E : 1302                		mov	r0,@(8,r3)			; Length set by 68k
(1)  518/ 6000410 : D127                		mov	#_sysreg+dreqfifo,r1
(1)  519/ 6000412 : 2312                		mov	r1,@r3				; Source point: DREQ FIFO
(1)  520/ 6000414 : 905A                		mov	#%0100010011100101,r0		; Transfer mode + DMA enable + Use DMA interrupt
(1)  521/ 6000416 :                     ; 		mov	#%0100010011100001,r0		; Transfer mode + DMA enable
(1)  522/ 6000416 : 1303                		mov	r0,@($C,r3)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  523/ 6000418 : 6020                		mov.b	@r2,r0
(1)  524/ 600041A : CB40                		or	#%01000000,r0			; Report ENTER status
(1)  525/ 600041C : 2200                		mov.b	r0,@r2
(1)  526/ 600041E :                     
(1)  527/ 600041E :                     	; ********************************
(1)  528/ 600041E :                     	; Wait here if NOT using
(1)  529/ 600041E :                     	; DMA interrupt
(1)  530/ 600041E :                     	; ********************************
(1)  531/ 600041E :                     ; 		mov	#_DMACHANNEL0,r1
(1)  532/ 600041E :                     ; .wait_dma:
(1)  533/ 600041E :                     ; 		mov	@r1,r0
(1)  534/ 600041E :                     ; 		tst	#%10,r0
(1)  535/ 600041E :                     ; 		bt	.wait_dma
(1)  536/ 600041E :                     ; 		mov	@r1,r0				; Dummy read
(1)  537/ 600041E :                     ; 		mov	#%0100010011100000,r0
(1)  538/ 600041E :                     ; 		mov	r0,@r1
(1)  539/ 600041E :                     ; 		mov	#_sysreg+comm12,r1
(1)  540/ 600041E :                     ; 		mov.b	@r1,r0
(1)  541/ 600041E :                     ; 		and	#%10111111,r0			; Report EXIT status
(1)  542/ 600041E :                     ; 		mov.b	r0,@r1
(1)  543/ 600041E :                     	; ********************************
(1)  544/ 600041E :                     
(1)  545/ 600041E :                     	; --------------------------------
(1)  546/ 600041E : 64F6                		mov	@r15+,r4
(1)  547/ 6000420 : 63F6                		mov	@r15+,r3
(1)  548/ 6000422 : 62F6                		mov	@r15+,r2
(1)  549/ 6000424 : 000B                		rts
(1)  550/ 6000426 : 0009                		nop
(1)  551/ 6000428 :                     		align 4
(1)  552/ 6000428 :                     
(1)  553/ 6000428 :                     ; =================================================================
(1)  554/ 6000428 :                     ; ------------------------------------------------
(1)  555/ 6000428 :                     ; Master | HBlank
(1)  556/ 6000428 :                     ; ------------------------------------------------
(1)  557/ 6000428 :                     
(1)  558/ 6000428 :                     m_irq_h:
(1)  559/ 6000428 : 914E                		mov	#_FRT,r1
(1)  560/ 600042A : 8417                		mov.b	@(7,r1),r0
(1)  561/ 600042C : CA02                		xor	#2,r0
(1)  562/ 600042E : 8017                		mov.b	r0,@(7,r1)
(1)  563/ 6000430 : D120                		mov	#_sysreg+hintclr,r1
(1)  564/ 6000432 : 2101                		mov.w	r0,@r1
(1)  565/ 6000434 : 000B                		rts
(1)  566/ 6000436 : 0009                		nop
(1)  567/ 6000438 :                     		align 4
(1)  568/ 6000438 :                     
(1)  569/ 6000438 :                     ; =================================================================
(1)  570/ 6000438 :                     ; ------------------------------------------------
(1)  571/ 6000438 :                     ; Master | VBlank
(1)  572/ 6000438 :                     ; ------------------------------------------------
(1)  573/ 6000438 :                     
(1)  574/ 6000438 :                     m_irq_v:
(1)  575/ 6000438 : 9146                		mov	#_FRT,r1
(1)  576/ 600043A : 8417                		mov.b	@(7,r1),r0
(1)  577/ 600043C : CA02                		xor	#2,r0
(1)  578/ 600043E : 8017                		mov.b	r0,@(7,r1)
(1)  579/ 6000440 : D11D                		mov	#_sysreg+vintclr,r1
(1)  580/ 6000442 : 2101                		mov.w	r0,@r1
(1)  581/ 6000444 : 0009                		nop
(1)  582/ 6000446 : 0009                		nop
(1)  583/ 6000448 : 0009                		nop
(1)  584/ 600044A : 0009                		nop
(1)  585/ 600044C : 0009                		nop
(1)  586/ 600044E : 000B                		rts
(1)  587/ 6000450 : 0009                		nop
(1)  588/ 6000452 :                     		align 4
(1)  589/ 6000454 :                     
(1)  590/ 6000454 :                     ; =================================================================
(1)  591/ 6000454 :                     ; ------------------------------------------------
(1)  592/ 6000454 :                     ; Master | VRES Interrupt (RESET button)
(1)  593/ 6000454 :                     ; ------------------------------------------------
(1)  594/ 6000454 :                     
(1)  595/ 6000454 :                     m_irq_vres:
(1)  596/ 6000454 : D113                		mov	#_sysreg,r1
(1)  597/ 6000456 : 60F3                		mov	r15,r0
(1)  598/ 6000458 : 811A                		mov.w	r0,@(vresintclr,r1)
(1)  599/ 600045A : 8513                		mov.w	@(dreqctl,r1),r0
(1)  600/ 600045C : C801                		tst	#1,r0
(1)  601/ 600045E : 8B15                		bf	.rv_busy
(1)  602/ 6000460 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1)  603/ 6000462 : 600C                		extu.b	r0,r0
(1)  604/ 6000464 : 400E                		ldc	r0,sr
(1)  605/ 6000466 : E000                		mov	#0,r0
(1)  606/ 6000468 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1)  607/ 600046A : 2102                		mov	r0,@r1
(1)  608/ 600046C : D10A                		mov	#_sysreg+comm12,r1	; Clear our comm
(1)  609/ 600046E : 2101                		mov.w	r0,@r1
(1)  610/ 6000470 : 912D                		mov.w	#$FE80,r1		; $FFFFFE80
(1)  611/ 6000472 : 902D                		mov.w	#$A518,r0		; Disable Watchdog
(1)  612/ 6000474 : 2101                		mov.w	r0,@r1
(1)  613/ 6000476 : DF11                		mov	#(STACK_MSTR)-8,r15	; Reset Master's STACK
(1)  614/ 6000478 : D011                		mov	#SH2_M_HotStart,r0	; Write return point and status
(1)  615/ 600047A : 2F02                		mov	r0,@r15
(1)  616/ 600047C : 9029                		mov.w   #$F0,r0
(1)  617/ 600047E : 1F01                		mov	r0,@(4,r15)
(1)  618/ 6000480 : D108                		mov	#_sysreg,r1		; Report Master as OK
(1)  619/ 6000482 : D010                		mov	#"M_OK",r0
(1)  620/ 6000484 : 1108                		mov	r0,@(comm0,r1)
(1)  621/ 6000486 : 002B                		rte
(1)  622/ 6000488 : 0009                		nop
(1)  623/ 600048A :                     		align 4
(1)  624/ 600048C :                     .rv_busy:
(1)  625/ 600048C : 911C                		mov	#_FRT,r1		; *** MASTER ONLY _FRT ***
(1)  626/ 600048E : 8417                		mov.b	@(7,r1),r0
(1)  627/ 6000490 : CB01                		or	#1,r0
(1)  628/ 6000492 : 8017                		mov.b	r0,@(7,r1)
(1)  629/ 6000494 : AFFE                		bra	*
(1)  630/ 6000496 : 0009                		nop
(1)  631/ 6000498 :                     		align 4
(1)  632/ 6000498 : 2000 402C 2000      		ltorg
          600049E : 401C 2000 401A 
          60004A4 : 2000 4000 0600 
          60004AA : 0000 2000 0000 
          60004B0 : 2000 4012 2000 
          60004B6 : 4018 2000 4016 
          60004BC : C000 07F8 0600 
          60004C2 : 0836 4D5F 4F4B 
          60004C8 : FE10 44E0 44E5 
          60004CE : FE80 A518 00F0    
(1)  633/ 60004D4 :                     
(1)  634/ 60004D4 :                     ; =================================================================
(1)  635/ 60004D4 :                     ; ------------------------------------------------
(1)  636/ 60004D4 :                     ; Slave | Unused Interrupt
(1)  637/ 60004D4 :                     ; ------------------------------------------------
(1)  638/ 60004D4 :                     
(1)  639/ 60004D4 :                     		align 4
(1)  640/ 60004D4 :                     s_irq_bad:
(1)  641/ 60004D4 : 000B                		rts
(1)  642/ 60004D6 : 0009                		nop
(1)  643/ 60004D8 :                     		align 4
(1)  644/ 60004D8 :                     
(1)  645/ 60004D8 :                     ; =================================================================
(1)  646/ 60004D8 :                     ; ------------------------------------------------
(1)  647/ 60004D8 :                     ; Slave | Watchdog
(1)  648/ 60004D8 :                     ; ------------------------------------------------
(1)  649/ 60004D8 :                     
(1)  650/ 60004D8 :                     s_irq_wdg:
(1)  651/ 60004D8 : 910A                		mov	#_FRT,r1
(1)  652/ 60004DA : 8417                		mov.b	@(7,r1),r0
(1)  653/ 60004DC : CA02                		xor	#2,r0
(1)  654/ 60004DE : 8017                		mov.b	r0,@(7,r1)
(1)  655/ 60004E0 : 000B                		rts
(1)  656/ 60004E2 : 0009                		nop
(1)  657/ 60004E4 :                     		align 4
(1)  658/ 60004E4 :                     
(1)  659/ 60004E4 :                     ; =================================================================
(1)  660/ 60004E4 :                     ; ------------------------------------------------
(1)  661/ 60004E4 :                     ; Slave | DMA Exit
(1)  662/ 60004E4 :                     ; ------------------------------------------------
(1)  663/ 60004E4 :                     
(1)  664/ 60004E4 :                     		align 4
(1)  665/ 60004E4 :                     s_irq_dma:
(1)  666/ 60004E4 : 9104                		mov	#_FRT,r1
(1)  667/ 60004E6 : 8417                		mov.b	@(7,r1),r0
(1)  668/ 60004E8 : CA02                		xor	#2,r0
(1)  669/ 60004EA : 8017                		mov.b	r0,@(7,r1)
(1)  670/ 60004EC : 000B                		rts
(1)  671/ 60004EE : 0009                		nop
(1)  672/ 60004F0 :                     		align 4
(1)  673/ 60004F0 :                     
(1)  674/ 60004F0 :                     ; =================================================================
(1)  675/ 60004F0 :                     ; ------------------------------------------------
(1)  676/ 60004F0 :                     ; Slave | PWM Interrupt
(1)  677/ 60004F0 :                     ; ------------------------------------------------
(1)  678/ 60004F0 :                     
(1)  679/ 60004F0 :                     ; located on cache/cache_slv.asm
(1)  680/ 60004F0 :                     ;
(1)  681/ 60004F0 :                     ; s_irq_pwm:
(1)  682/ 60004F0 : FE10                		ltorg	; Save literals
(1)  683/ 60004F2 :                     
(1)  684/ 60004F2 :                     ; =================================================================
(1)  685/ 60004F2 :                     ; ------------------------------------------------
(1)  686/ 60004F2 :                     ; Slave | CMD Interrupt
(1)  687/ 60004F2 :                     ; ------------------------------------------------
(1)  688/ 60004F2 :                     
(1)  689/ 60004F2 :                     		align 4
(1)  690/ 60004F4 :                     s_irq_cmd:
(1)  691/ 60004F4 : 911C                		mov	#_FRT,r1
(1)  692/ 60004F6 : 8417                		mov.b	@(7,r1),r0
(1)  693/ 60004F8 : CA02                		xor	#2,r0
(1)  694/ 60004FA : 8017                		mov.b	r0,@(7,r1)
(1)  695/ 60004FC : D10A                		mov	#_sysreg+cmdintclr,r1
(1)  696/ 60004FE : 2101                		mov.w	r0,@r1
(1)  697/ 6000500 : 6011                		mov.w	@r1,r0
(1)  698/ 6000502 :                     	; --------------------------------
(1)  699/ 6000502 : 2F26                		mov	r2,@-r15
(1)  700/ 6000504 : 2F36                		mov	r3,@-r15
(1)  701/ 6000506 : 2F46                		mov	r4,@-r15
(1)  702/ 6000508 : 2F56                		mov	r5,@-r15
(1)  703/ 600050A : 2F66                		mov	r6,@-r15
(1)  704/ 600050C : 2F76                		mov	r7,@-r15
(1)  705/ 600050E : 2F86                		mov	r8,@-r15
(1)  706/ 6000510 : 4F22                		sts	pr,@-r15
(1)  707/ 6000512 : D106                		mov	#_sysreg+comm14,r1
(1)  708/ 6000514 : 6010                		mov.b	@r1,r0
(1)  709/ 6000516 : C90F                		and	#%00001111,r0
(1)  710/ 6000518 : 4008                		shll2	r0
(1)  711/ 600051A : 6103                		mov	r0,r1
(1)  712/ 600051C : C705                		mova	scmd_tasks,r0
(1)  713/ 600051E : 301C                		add	r1,r0
(1)  714/ 6000520 : 6102                		mov	@r0,r1
(1)  715/ 6000522 : 412B                		jmp	@r1
(1)  716/ 6000524 : 0009                		nop
(1)  717/ 6000526 :                     		align 4
(1)  718/ 6000528 : 2000 401A 2000      		ltorg
          600052E : 402E FE10          
(1)  719/ 6000532 :                     
(1)  720/ 6000532 :                     ; --------------------------------
(1)  721/ 6000532 :                     
(1)  722/ 6000532 :                     		align 4
(1)  723/ 6000534 :                     scmd_tasks:
(1)  724/ 6000534 : 0600 0544           		dc.l .scmd_task00	; NULL
(1)  725/ 6000538 : 0600 05D4           		dc.l .scmd_task01	; PWM table transfer and update
(1)  726/ 600053C : 0600 0548           		dc.l .scmd_task02	; PWM RV backup
(1)  727/ 6000540 : 0600 05B4           		dc.l .scmd_task03	; PWM RV restore
(1)  728/ 6000544 :                     
(1)  729/ 6000544 :                     ; --------------------------------
(1)  730/ 6000544 :                     ; Task $00
(1)  731/ 6000544 :                     ; --------------------------------
(1)  732/ 6000544 :                     
(1)  733/ 6000544 :                     .scmd_task00:
(1)  734/ 6000544 : A0CB                		bra	.exit_scmd
(1)  735/ 6000546 : 0009                		nop
(1)  736/ 6000548 :                     
(1)  737/ 6000548 :                     ; --------------------------------
(1)  738/ 6000548 :                     ; Task $02
(1)  739/ 6000548 :                     ; --------------------------------
(1)  740/ 6000548 :                     
(1)  741/ 6000548 :                     .scmd_task02:
(1)  742/ 6000548 : D46B                		mov	#RAM_Mars_PwmBackup,r4
(1)  743/ 600054A : D86C                		mov	#RAM_Mars_PwmList,r8
(1)  744/ 600054C : 97E6                		mov	#MAX_PWMCHNL,r7
(1)  745/ 600054E : 95E6                		mov	#$200,r5
(1)  746/ 6000550 :                     .next_one:
(1)  747/ 6000550 : 5080                		mov	@(marspwm_enbl,r8),r0	; PWM active?
(1)  748/ 6000552 : C880                		tst	#$80,r0
(1)  749/ 6000554 : 8926                		bt	.no_chnl
(1)  750/ 6000556 :                     
(1)  751/ 6000556 : 5182                		mov	@(marspwm_bank,r8),r1
(1)  752/ 6000558 : D069                		mov	#CS1,r0
(1)  753/ 600055A : 3100                		cmp/eq	r0,r1
(1)  754/ 600055C : 8B22                		bf	.no_chnl
(1)  755/ 600055E : 5081                		mov	@(marspwm_read,r8),r0
(1)  756/ 6000560 : 6603                		mov	r0,r6			; Save last read
(1)  757/ 6000562 : 4019                		shlr8	r0
(1)  758/ 6000564 : 201B                		or	r1,r0
(1)  759/ 6000566 : E1FC                		mov	#-4,r1
(1)  760/ 6000568 : 2019                		and	r1,r0
(1)  761/ 600056A : 6103                		mov	r0,r1
(1)  762/ 600056C : 6243                		mov	r4,r2
(1)  763/ 600056E : 6353                		mov	r5,r3
(1)  764/ 6000570 : 4309                		shlr2	r3			; /4
(1)  765/ 6000572 : 4301                		shlr	r3			; /2
(1)  766/ 6000574 :                     .copy_data:
(1)  767/ 6000574 : 6016                		mov	@r1+,r0
(1)  768/ 6000576 : 2202                		mov	r0,@r2
(1)  769/ 6000578 : 7204                		add	#4,r2
(1)  770/ 600057A : 6016                		mov	@r1+,r0
(1)  771/ 600057C : 2202                		mov	r0,@r2
(1)  772/ 600057E : 4310                		dt	r3
(1)  773/ 6000580 : 8FF8                		bf/s	.copy_data
(1)  774/ 6000582 : 7204                		add	#4,r2
(1)  775/ 6000584 : 5381                		mov	@(marspwm_read,r8),r3
(1)  776/ 6000586 : 6063                		mov	r6,r0
(1)  777/ 6000588 : 4019                		shlr8	r0
(1)  778/ 600058A : C903                		and	#%11,r0
(1)  779/ 600058C : 4018                		shll8	r0
(1)  780/ 600058E : E2FC                		mov	#-4,r2
(1)  781/ 6000590 : 4218                		shll8	r2
(1)  782/ 6000592 : 3368                		sub	r6,r3
(1)  783/ 6000594 : 2329                		and	r2,r3
(1)  784/ 6000596 : 330C                		add	r0,r3
(1)  785/ 6000598 : 1839                		mov	r3,@(marspwm_cread,r8)
(1)  786/ 600059A :                     
(1)  787/ 600059A : 5080                		mov	@(marspwm_enbl,r8),r0	; Playback stopped here?
(1)  788/ 600059C : C880                		tst	#%10000000,r0
(1)  789/ 600059E : 8901                		bt	.no_chnl
(1)  790/ 60005A0 : CB40                		or	#%01000000,r0
(1)  791/ 60005A2 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  792/ 60005A4 :                     .no_chnl:
(1)  793/ 60005A4 : 90BC                		mov	#marspwm_len,r0
(1)  794/ 60005A6 : 380C                		add	r0,r8
(1)  795/ 60005A8 : 4710                		dt	r7
(1)  796/ 60005AA : 8FD1                		bf/s	.next_one
(1)  797/ 60005AC : 345C                		add	r5,r4
(1)  798/ 60005AE :                     
(1)  799/ 60005AE : A096                		bra	.exit_scmd
(1)  800/ 60005B0 : 0009                		nop
(1)  801/ 60005B2 :                     		align 4
(1)  802/ 60005B4 :                     
(1)  803/ 60005B4 :                     ; 		mov	#_DMASOURCE0,r7			; r4 - DMA base register
(1)  804/ 60005B4 :                     ; 		mov	@($C,r7),r0
(1)  805/ 60005B4 :                     ; 		mov	#%0101000011100000,r0		; Transfer mode + DMA enable OFF
(1)  806/ 60005B4 :                     ; 		mov	r0,@($C,r7)
(1)  807/ 60005B4 :                     ; 		mov	r1,@r7				; Source point: DREQ FIFO
(1)  808/ 60005B4 :                     ; 		mov	r2,@(4,r7)			; Set Destination
(1)  809/ 60005B4 :                     ; 		mov	r3,@(8,r7)			; Length set by 68k
(1)  810/ 60005B4 :                     ; 		mov	@($C,r7),r0
(1)  811/ 60005B4 :                     ; 		mov	#%0101000011100000|1,r0		; Transfer mode + DMA enable
(1)  812/ 60005B4 :                     ; 		mov	r0,@($C,r7)			; Dest:Incr(01) Src:Keep(00) Size:Word(01)
(1)  813/ 60005B4 :                     ; .wait_dma:
(1)  814/ 60005B4 :                     ; 		mov	@($C,r7),r0
(1)  815/ 60005B4 :                     ; 		tst	#%10,r0
(1)  816/ 60005B4 :                     ; 		bt	.wait_dma
(1)  817/ 60005B4 :                     ; 		mov	@($C,r7),r0			; Dummy read
(1)  818/ 60005B4 :                     ; 		mov	#%0101000011100000,r0
(1)  819/ 60005B4 :                     ; 		mov	r0,@($C,r7)
(1)  820/ 60005B4 :                     
(1)  821/ 60005B4 :                     ; --------------------------------
(1)  822/ 60005B4 :                     ; Task $03
(1)  823/ 60005B4 :                     ; --------------------------------
(1)  824/ 60005B4 :                     
(1)  825/ 60005B4 :                     .scmd_task03:
(1)  826/ 60005B4 : D853                		mov	#RAM_Mars_PwmList,r8
(1)  827/ 60005B6 : 97B4                		mov	#MAX_PWMCHNL,r7
(1)  828/ 60005B8 : 96B4                		mov	#marspwm_len,r6
(1)  829/ 60005BA :                     .next_out:
(1)  830/ 60005BA : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  831/ 60005BC : C880                		tst	#%10000000,r0
(1)  832/ 60005BE : 8904                		bt	.no_chnlo
(1)  833/ 60005C0 : C840                		tst	#%01000000,r0
(1)  834/ 60005C2 : 8902                		bt	.no_chnlo
(1)  835/ 60005C4 : 5080                		mov	@(marspwm_enbl,r8),r0
(1)  836/ 60005C6 : C9BF                		and	#%10111111,r0
(1)  837/ 60005C8 : 1800                		mov	r0,@(marspwm_enbl,r8)
(1)  838/ 60005CA :                     .no_chnlo:
(1)  839/ 60005CA : 4710                		dt	r7
(1)  840/ 60005CC : 8FF5                		bf/s	.next_out
(1)  841/ 60005CE : 386C                		add	r6,r8
(1)  842/ 60005D0 : A085                		bra	.exit_scmd
(1)  843/ 60005D2 : 0009                		nop
(1)  844/ 60005D4 :                     		align 4
(1)  845/ 60005D4 :                     
(1)  846/ 60005D4 :                     ; --------------------------------
(1)  847/ 60005D4 :                     ; Task $01
(1)  848/ 60005D4 :                     ; --------------------------------
(1)  849/ 60005D4 :                     
(1)  850/ 60005D4 :                     .scmd_task01:
(1)  851/ 60005D4 : D14C                		mov	#_sysreg+comm8,r1		; Input
(1)  852/ 60005D6 : D24D                		mov	#RAM_Mars_PwmTable,r2		; Output
(1)  853/ 60005D8 : D34D                		mov	#_sysreg+comm14,r3		; comm
(1)  854/ 60005DA : 0009                		nop
(1)  855/ 60005DC :                     .wait_1:
(1)  856/ 60005DC : 6030                		mov.b	@r3,r0
(1)  857/ 60005DE : C9C0                		and	#%11000000,r0
(1)  858/ 60005E0 : C880                		tst	#%10000000,r0			; LOCK exit?
(1)  859/ 60005E2 : 8908                		bt	.exit_c
(1)  860/ 60005E4 : C840                		tst	#%01000000,r0			; Wait PASS
(1)  861/ 60005E6 : 89F9                		bt	.wait_1
(1)  862/ 60005E8 :                     .copy_1:
(1)  863/ 60005E8 : 6012                		mov	@r1,r0				; Copy full longword
(1)  864/ 60005EA : 2202                		mov	r0,@r2
(1)  865/ 60005EC : 7204                		add	#4,r2				; Increment table pos
(1)  866/ 60005EE : 6030                		mov.b	@r3,r0
(1)  867/ 60005F0 : C9BF                		and	#%10111111,r0
(1)  868/ 60005F2 : AFF3                		bra	.wait_1
(1)  869/ 60005F4 : 2300                		mov.b	r0,@r3				; Clear PASS bit, Z80 loops
(1)  870/ 60005F6 :                     .exit_c:
(1)  871/ 60005F6 :                     
(1)  872/ 60005F6 :                     ; --------------------------------
(1)  873/ 60005F6 :                     ; Process table changes
(1)  874/ 60005F6 :                     ; --------------------------------
(1)  875/ 60005F6 :                     
(1)  876/ 60005F6 :                     .proc_pwm:
(1)  877/ 60005F6 : D847                		mov	#RAM_Mars_PwmTable,r8		; Input
(1)  878/ 60005F8 : D747                		mov	#RAM_Mars_PwmList,r7		; Output
(1)  879/ 60005FA : 9694                		mov	#MAX_PWMCHNL,r6
(1)  880/ 60005FC :                     .next_chnl:
(1)  881/ 60005FC : 6383                		mov	r8,r3				; r3 - current table column
(1)  882/ 60005FE : 6030                		mov.b	@r3,r0				; r0: %kfo o-on f-off k-cut
(1)  883/ 6000600 : C91F                		and	#%00011111,r0
(1)  884/ 6000602 : 2008                		tst	r0,r0
(1)  885/ 6000604 : 8966                		bt	.no_chng
(1)  886/ 6000606 :                     .no_keycut:
(1)  887/ 6000606 : C802                		tst	#%00000010,r0
(1)  888/ 6000608 : 8B62                		bf	.is_keycut
(1)  889/ 600060A : C804                		tst	#%00000100,r0
(1)  890/ 600060C : 8B60                		bf	.is_keycut
(1)  891/ 600060E : C801                		tst	#%00000001,r0
(1)  892/ 6000610 : 8960                		bt	.no_chng
(1)  893/ 6000612 :                     
(1)  894/ 6000612 : C808                		tst	#%00001000,r0
(1)  895/ 6000614 : 8910                		bt	.no_pitchbnd
(1)  896/ 6000616 : 5070                		mov	@(marspwm_enbl,r7),r0
(1)  897/ 6000618 : C880                		tst	#$80,r0
(1)  898/ 600061A : 895B                		bt	.no_chng
(1)  899/ 600061C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  900/ 600061E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  901/ 6000620 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  902/ 6000622 : C9FC                		and	#%11111100,r0
(1)  903/ 6000624 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  904/ 6000626 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  905/ 6000628 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  906/ 600062A : 611C                		extu.b	r1,r1
(1)  907/ 600062C : 6023                		mov	r2,r0
(1)  908/ 600062E : C903                		and	#%11,r0
(1)  909/ 6000630 : 4018                		shll8	r0
(1)  910/ 6000632 : 201B                		or	r1,r0
(1)  911/ 6000634 : A04E                		bra	.no_chng
(1)  912/ 6000636 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  913/ 6000638 :                     
(1)  914/ 6000638 :                     .no_pitchbnd:
(1)  915/ 6000638 : E000                		mov	#0,r0
(1)  916/ 600063A : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  917/ 600063C : 7308                		add	#8,r3			; Next: Volume and Pitch MSB
(1)  918/ 600063E : 6030                		mov.b	@r3,r0			; r0: %vvvvvvpp
(1)  919/ 6000640 : 6203                		mov	r0,r2			; Save pp-pitch
(1)  920/ 6000642 : C9FC                		and	#%11111100,r0
(1)  921/ 6000644 : 1707                		mov	r0,@(marspwm_vol,r7)
(1)  922/ 6000646 : 7308                		add	#8,r3			; Next: Pitch LSB
(1)  923/ 6000648 : 6130                		mov.b	@r3,r1			; r0: %pppppppp
(1)  924/ 600064A : 611C                		extu.b	r1,r1
(1)  925/ 600064C : 6023                		mov	r2,r0
(1)  926/ 600064E : C903                		and	#%11,r0
(1)  927/ 6000650 : 4018                		shll8	r0
(1)  928/ 6000652 : 201B                		or	r1,r0
(1)  929/ 6000654 : 1706                		mov	r0,@(marspwm_pitch,r7)
(1)  930/ 6000656 : 7308                		add	#8,r3			; Next: Stereo/Loop/Left/Right | 32-bit**
(1)  931/ 6000658 : 6030                		mov.b	@r3,r0			; r0: %SLlraaaa
(1)  932/ 600065A : 6103                		mov	r0,r1			; Save aaaa-address
(1)  933/ 600065C : C9F0                		and	#%11110000,r0
(1)  934/ 600065E : 4009                		shlr2	r0
(1)  935/ 6000660 : 4009                		shlr2	r0
(1)  936/ 6000662 : CB80                		or	#$80,r0			; Set as Enabled
(1)  937/ 6000664 : 6403                		mov	r0,r4
(1)  938/ 6000666 : 6013                		mov	r1,r0
(1)  939/ 6000668 : C90F                		and	#%00001111,r0
(1)  940/ 600066A : 4028                		shll16	r0
(1)  941/ 600066C : 4018                		shll8	r0
(1)  942/ 600066E : 1702                		mov	r0,@(marspwm_bank,r7)
(1)  943/ 6000670 : 6103                		mov	r0,r1			; r1 - BANK
(1)  944/ 6000672 : 7308                		add	#8,r3			; Next: Pointer $xx0000
(1)  945/ 6000674 : 6030                		mov.b	@r3,r0
(1)  946/ 6000676 : 600C                		extu.b	r0,r0
(1)  947/ 6000678 : 4028                		shll16	r0
(1)  948/ 600067A : 6203                		mov	r0,r2			; r2: $xx0000
(1)  949/ 600067C : 7308                		add	#8,r3			; Next: Pointer $00xx00
(1)  950/ 600067E : 6030                		mov.b	@r3,r0
(1)  951/ 6000680 : 600C                		extu.b	r0,r0
(1)  952/ 6000682 : 4018                		shll8	r0
(1)  953/ 6000684 : 220B                		or	r0,r2			; r2: $xxxx00
(1)  954/ 6000686 : 7308                		add	#8,r3			; Next: Pointer $0000xx
(1)  955/ 6000688 : 6030                		mov.b	@r3,r0
(1)  956/ 600068A : 600C                		extu.b	r0,r0
(1)  957/ 600068C : 202B                		or	r2,r0			; r0: $00xxxxxx
(1)  958/ 600068E : 310C                		add	r0,r1
(1)  959/ 6000690 :                     	; Read LEN and LOOP
(1)  960/ 6000690 : 6014                		mov.b	@r1+,r0
(1)  961/ 6000692 : 630C                		extu.b	r0,r3
(1)  962/ 6000694 : 6214                		mov.b	@r1+,r2
(1)  963/ 6000696 : 622C                		extu.b	r2,r2
(1)  964/ 6000698 : 4218                		shll8	r2
(1)  965/ 600069A : 232B                		or	r2,r3
(1)  966/ 600069C : 6214                		mov.b	@r1+,r2
(1)  967/ 600069E : 622C                		extu.b	r2,r2
(1)  968/ 60006A0 : 4228                		shll16	r2
(1)  969/ 60006A2 : 232B                		or	r2,r3
(1)  970/ 60006A4 : 6014                		mov.b	@r1+,r0
(1)  971/ 60006A6 : 600C                		extu.b	r0,r0
(1)  972/ 60006A8 : 6214                		mov.b	@r1+,r2
(1)  973/ 60006AA : 622C                		extu.b	r2,r2
(1)  974/ 60006AC : 4218                		shll8	r2
(1)  975/ 60006AE : 202B                		or	r2,r0
(1)  976/ 60006B0 : 6214                		mov.b	@r1+,r2
(1)  977/ 60006B2 : 622C                		extu.b	r2,r2
(1)  978/ 60006B4 : 4228                		shll16	r2
(1)  979/ 60006B6 : 202B                		or	r2,r0
(1)  980/ 60006B8 : 4018                		shll8	r0
(1)  981/ 60006BA : 1705                		mov	r0,@(marspwm_loop,r7)
(1)  982/ 60006BC : 6013                		mov	r1,r0
(1)  983/ 60006BE : 4018                		shll8	r0
(1)  984/ 60006C0 : 1703                		mov	r0,@(marspwm_start,r7)
(1)  985/ 60006C2 : 1701                		mov	r0,@(marspwm_read,r7)
(1)  986/ 60006C4 : 6013                		mov	r1,r0
(1)  987/ 60006C6 : 303C                		add	r3,r0
(1)  988/ 60006C8 : 4018                		shll8	r0
(1)  989/ 60006CA : 1704                		mov	r0,@(marspwm_length,r7)
(1)  990/ 60006CC : A002                		bra	.no_chng
(1)  991/ 60006CE : 1740                		mov	r4,@(marspwm_enbl,r7)
(1)  992/ 60006D0 :                     .is_keycut:
(1)  993/ 60006D0 : E000                		mov	#0,r0
(1)  994/ 60006D2 : 1700                		mov	r0,@(marspwm_enbl,r7)
(1)  995/ 60006D4 :                     .no_chng:
(1)  996/ 60006D4 : 9028                		mov	#marspwm_len,r0
(1)  997/ 60006D6 : 370C                		add	r0,r7
(1)  998/ 60006D8 : 4610                		dt	r6
(1)  999/ 60006DA : 8F8F                		bf/s	.next_chnl
(1) 1000/ 60006DC : 7801                		add	#1,r8
(1) 1001/ 60006DE :                     .exit_scmd:
(1) 1002/ 60006DE :                     	; --------------------------------
(1) 1003/ 60006DE : D10C                		mov	#_sysreg+comm14,r1	; Clear CMD task
(1) 1004/ 60006E0 : E000                		mov	#0,r0
(1) 1005/ 60006E2 : 2100                		mov.b	r0,@r1
(1) 1006/ 60006E4 : 4F26                		lds	@r15+,pr
(1) 1007/ 60006E6 : 68F6                		mov	@r15+,r8
(1) 1008/ 60006E8 : 67F6                		mov	@r15+,r7
(1) 1009/ 60006EA : 66F6                		mov	@r15+,r6
(1) 1010/ 60006EC : 65F6                		mov	@r15+,r5
(1) 1011/ 60006EE : 64F6                		mov	@r15+,r4
(1) 1012/ 60006F0 : 63F6                		mov	@r15+,r3
(1) 1013/ 60006F2 : 62F6                		mov	@r15+,r2
(1) 1014/ 60006F4 : 000B                		rts
(1) 1015/ 60006F6 : 0009                		nop
(1) 1016/ 60006F8 :                     		align 4
(1) 1017/ 60006F8 : 2600 62D0 2600      		ltorg
          60006FE : 6190 0200 0000 
          6000704 : 2600 6190 2000 
          600070A : 4028 2600 6150 
          6000710 : 2000 402E 2600 
          6000716 : 6150 2600 6190 
          600071C : 0008 0200 0028 
          6000722 : 0008 0028 0008 
          6000728 : 0028             
(1) 1018/ 600072A :                     
(1) 1019/ 600072A :                     ; =================================================================
(1) 1020/ 600072A :                     ; ------------------------------------------------
(1) 1021/ 600072A :                     ; Slave | HBlank
(1) 1022/ 600072A :                     ; ------------------------------------------------
(1) 1023/ 600072A :                     
(1) 1024/ 600072A :                     s_irq_h:
(1) 1025/ 600072A : 913B                		mov	#_FRT,r1
(1) 1026/ 600072C : 8417                		mov.b	@(7,r1),r0
(1) 1027/ 600072E : CA02                		xor	#2,r0
(1) 1028/ 6000730 : 8017                		mov.b	r0,@(7,r1)
(1) 1029/ 6000732 : D115                		mov	#_sysreg+hintclr,r1
(1) 1030/ 6000734 : 2101                		mov.w	r0,@r1
(1) 1031/ 6000736 : 000B                		rts
(1) 1032/ 6000738 : 0009                		nop
(1) 1033/ 600073A :                     		align 4
(1) 1034/ 600073C :                     
(1) 1035/ 600073C :                     ; =================================================================
(1) 1036/ 600073C :                     ; ------------------------------------------------
(1) 1037/ 600073C :                     ; Slave | VBlank
(1) 1038/ 600073C :                     ; ------------------------------------------------
(1) 1039/ 600073C :                     
(1) 1040/ 600073C :                     s_irq_v:
(1) 1041/ 600073C : 9132                		mov	#_FRT,r1
(1) 1042/ 600073E : 8417                		mov.b	@(7,r1),r0
(1) 1043/ 6000740 : CA02                		xor	#2,r0
(1) 1044/ 6000742 : 8017                		mov.b	r0,@(7,r1)
(1) 1045/ 6000744 : D111                		mov	#_sysreg+vintclr,r1
(1) 1046/ 6000746 : 2101                		mov.w	r0,@r1
(1) 1047/ 6000748 : 000B                		rts
(1) 1048/ 600074A : 0009                		nop
(1) 1049/ 600074C :                     		align 4
(1) 1050/ 600074C :                     
(1) 1051/ 600074C :                     ; =================================================================
(1) 1052/ 600074C :                     ; ------------------------------------------------
(1) 1053/ 600074C :                     ; Slave | VRES Interrupt (RESET button on Genesis)
(1) 1054/ 600074C :                     ; ------------------------------------------------
(1) 1055/ 600074C :                     
(1) 1056/ 600074C :                     s_irq_vres:
(1) 1057/ 600074C : D110                		mov	#_sysreg,r1
(1) 1058/ 600074E : 60F3                		mov	r15,r0
(1) 1059/ 6000750 : 811A                		mov.w	r0,@(vresintclr,r1)
(1) 1060/ 6000752 : 8513                		mov.w	@(dreqctl,r1),r0
(1) 1061/ 6000754 : C801                		tst	#1,r0
(1) 1062/ 6000756 : 8B15                		bf	.rv_busy
(1) 1063/ 6000758 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 1064/ 600075A : 600C                		extu.b	r0,r0
(1) 1065/ 600075C : 400E                		ldc	r0,sr
(1) 1066/ 600075E : E000                		mov	#0,r0
(1) 1067/ 6000760 : E1B0                		mov	#_DMAOPERATION,r1	; Quickly cancel DMA's
(1) 1068/ 6000762 : 2102                		mov	r0,@r1
(1) 1069/ 6000764 : D10B                		mov	#_sysreg+comm14,r1	; Clear our comm
(1) 1070/ 6000766 : 2101                		mov.w	r0,@r1
(1) 1071/ 6000768 : 911D                		mov.w	#$FE80,r1		; $FFFFFE80
(1) 1072/ 600076A : 901D                		mov.w	#$A518,r0		; Disable Watchdog
(1) 1073/ 600076C : 2101                		mov.w	r0,@r1
(1) 1074/ 600076E : DF0A                		mov	#(STACK_SLV)-8,r15	; Reset Slave's STACK
(1) 1075/ 6000770 : D00A                		mov	#SH2_S_HotStart,r0	; Write return point and status
(1) 1076/ 6000772 : 2F02                		mov	r0,@r15
(1) 1077/ 6000774 : 9019                		mov.w   #$F0,r0
(1) 1078/ 6000776 : 1F01                		mov	r0,@(4,r15)
(1) 1079/ 6000778 : D105                		mov	#_sysreg,r1
(1) 1080/ 600077A : D009                		mov	#"S_OK",r0		; Report Slave as OK
(1) 1081/ 600077C : 1109                		mov	r0,@(comm4,r1)
(1) 1082/ 600077E : 002B                		rte
(1) 1083/ 6000780 : 0009                		nop
(1) 1084/ 6000782 :                     		align 4
(1) 1085/ 6000784 :                     .rv_busy:
(1) 1086/ 6000784 : AFFE                		bra	*
(1) 1087/ 6000786 : 0009                		nop
(1) 1088/ 6000788 :                     		align 4
(1) 1089/ 6000788 :                     
(1) 1090/ 6000788 : 2000 4018 2000      		ltorg		; Save literals
          600078E : 4016 2000 4000 
          6000794 : 2000 402E C000 
          600079A : 07F8 0600 0F04 
          60007A0 : 535F 4F4B FE10 
          60007A6 : FE80 A518 00F0    
(1) 1091/ 60007AC :                     
(1) 1092/ 60007AC :                     ; ====================================================================
(1) 1093/ 60007AC :                     ; ----------------------------------------------------------------
(1) 1094/ 60007AC :                     ; Master entry point
(1) 1095/ 60007AC :                     ; ----------------------------------------------------------------
(1) 1096/ 60007AC :                     
(1) 1097/ 60007AC :                     		align 4
(1) 1098/ 60007AC :                     SH2_M_Entry:
(1) 1099/ 60007AC : E0F0                		mov.b	#$F0,r0				; ** $F0
(1) 1100/ 60007AE : 600C                		extu.b	r0,r0
(1) 1101/ 60007B0 : 400E                		ldc	r0,sr
(1) 1102/ 60007B2 : DF2D                		mov	#STACK_MSTR,r15			; Reset stack
(1) 1103/ 60007B4 : D02D                		mov	#SH2_Master,r0			; Reset vbr
(1) 1104/ 60007B6 : 402E                		ldc	r0,vbr
(1) 1105/ 60007B8 : 9170                		mov.l	#_FRT,r1
(1) 1106/ 60007BA : E000                		mov	#$00,r0
(1) 1107/ 60007BC : 8010                		mov.b	r0,@(0,r1)
(1) 1108/ 60007BE : E0E2                		mov.b	#$E2,r0
(1) 1109/ 60007C0 : 8017                		mov.b	r0,@(7,r1)
(1) 1110/ 60007C2 : E000                		mov	#$00,r0
(1) 1111/ 60007C4 : 8014                		mov.b	r0,@(4,r1)
(1) 1112/ 60007C6 : E001                		mov	#$01,r0
(1) 1113/ 60007C8 : 8015                		mov.b	r0,@(5,r1)
(1) 1114/ 60007CA : E000                		mov	#$00,r0
(1) 1115/ 60007CC : 8016                		mov.b	r0,@(6,r1)
(1) 1116/ 60007CE : E001                		mov	#$01,r0
(1) 1117/ 60007D0 : 8011                		mov.b	r0,@(1,r1)
(1) 1118/ 60007D2 : E000                		mov	#$00,r0
(1) 1119/ 60007D4 : 8013                		mov.b	r0,@(3,r1)
(1) 1120/ 60007D6 : 8012                		mov.b	r0,@(2,r1)
(1) 1121/ 60007D8 : E0F2                		mov.b	#$F2,r0				; ****
(1) 1122/ 60007DA : 8017                		mov.b	r0,@(7,r1)
(1) 1123/ 60007DC : E000                		mov	#0,r0
(1) 1124/ 60007DE : 8014                		mov.b	r0,@(4,r1)
(1) 1125/ 60007E0 : E001                		mov	#1,r0
(1) 1126/ 60007E2 : 8015                		mov.b	r0,@(5,r1)
(1) 1127/ 60007E4 : E0E2                		mov.b	#$E2,r0
(1) 1128/ 60007E6 : 8017                		mov.b	r0,@(7,r1)
(1) 1129/ 60007E8 :                     
(1) 1130/ 60007E8 :                     	; --------------------------------------------------------
(1) 1131/ 60007E8 :                     	; Extra interrupt settings
(1) 1132/ 60007E8 : 9059                		mov.w   #$FEE2,r0			; Extra interrupt priority levels ($FFFFFEE2)
(1) 1133/ 60007EA : 9159                		mov     #(3<<4)|(5<<8),r1		; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 1134/ 60007EC : 2011                		mov.w   r1,@r0
(1) 1135/ 60007EE : 9058                		mov.w   #$FEE4,r0			; Vector jump number for Watchdog ($FFFFFEE4)
(1) 1136/ 60007F0 : 9158                		mov     #($120/4)<<8,r1			; (vbr+POINTER)<<8
(1) 1137/ 60007F2 : 2011                		mov.w   r1,@r0
(1) 1138/ 60007F4 : E0A0                		mov.b	#$A0,r0				; Vector jump number for DMACHANNEL0 ($FFFFFFA0)
(1) 1139/ 60007F6 : E149                		mov     #($124/4),r1			; (vbr+POINTER)
(1) 1140/ 60007F8 : 2012                		mov	r1,@r0
(1) 1141/ 60007FA :                     	; --------------------------------------------------------
(1) 1142/ 60007FA :                     	; CD32X initialization
(1) 1143/ 60007FA :                     	;
(1) 1144/ 60007FA :                     	; *** FUSION: Framebuffer flipping fails if
(1) 1145/ 60007FA :                     	; bitmapmd is 0 ***
(1) 1146/ 60007FA :                     	; --------------------------------------------------------
(1) 1149/ 60007FA : D11D                		mov 	#_vdpreg,r1
(1) 1150/ 60007FC : E001                		mov	#1,r0
(1) 1151/ 60007FE : 8011                		mov.b	r0,@(bitmapmd,r1)	; Set bitmap to 1 for no reason.
(1) 1152/ 6000800 : 801B                		mov.b	r0,@(framectl,r1)	; Set Framebuffer frame 1
(1) 1153/ 6000802 : 841A                .waitl:		mov.b	@(vdpsts,r1),r0		; Wait blank
(1) 1154/ 6000804 : C880                		tst	#VBLK,r0
(1) 1155/ 6000806 : 89FC                		bt	.waitl
(1) 1156/ 6000808 : 841B                .wait_frm:	mov.b	@(framectl,r1),r0	; Framebuffer frame is 1?
(1) 1157/ 600080A : 8801                		cmp/eq	#1,r0
(1) 1158/ 600080C : 8BFC                		bf	.wait_frm
(1) 1176/ 600080E : E000                		mov	#0,r0
(1) 1177/ 6000810 : D218                		mov	#CS3+($20000-$38),r2		; FIRST Cleanup
(1) 1178/ 6000812 : D319                		mov	#CS3+($40000),r3
(1) 1179/ 6000814 :                     .clean_up:
(1) 1180/ 6000814 : 3233                		cmp/ge	r3,r2
(1) 1181/ 6000816 : 8902                		bt	.exit_clean
(1) 1182/ 6000818 : 2202                		mov	r0,@r2
(1) 1183/ 600081A : AFFB                		bra	.clean_up
(1) 1184/ 600081C : 7204                		add	#4,r2
(1) 1185/ 600081E :                     .exit_clean:
(1) 1186/ 600081E : D117                		mov	#_framebuffer,r1		; Copy the other half of SDRAM
(1) 1187/ 6000820 : D214                		mov	#CS3+($20000-$38),r2
(1) 1188/ 6000822 : D317                		mov	#CS3+(SH2_END&$3FFFFF),r3
(1) 1189/ 6000824 :                     .copy_new:
(1) 1190/ 6000824 : 3233                		cmp/ge	r3,r2
(1) 1191/ 6000826 : 8903                		bt	.exit_send
(1) 1192/ 6000828 : 6016                		mov	@r1+,r0
(1) 1193/ 600082A : 2202                		mov	r0,@r2
(1) 1194/ 600082C : AFFA                		bra	.copy_new
(1) 1195/ 600082E : 7204                		add	#4,r2
(1) 1196/ 6000830 :                     .exit_send:
(1) 1197/ 6000830 : D114                		mov	#_sysreg+comm0,r1
(1) 1198/ 6000832 : E000                		mov	#0,r0
(1) 1199/ 6000834 : 2102                		mov	r0,@r1
(1) 1201/ 6000836 :                     
(1) 1202/ 6000836 :                     ; ====================================================================
(1) 1203/ 6000836 :                     ; ----------------------------------------------------------------
(1) 1204/ 6000836 :                     ; Master MAIN code
(1) 1205/ 6000836 :                     ; ----------------------------------------------------------------
(1) 1206/ 6000836 :                     
(1) 1207/ 6000836 :                     SH2_M_HotStart:
(1) 1208/ 6000836 : D014                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 1209/ 6000838 : 401E                		ldc	r0,gbr
(1) 1210/ 600083A : D014                		mov	#RAM_Mars_DreqBuff_0,r0
(1) 1211/ 600083C : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1212/ 600083E : D014                		mov	#RAM_Mars_DreqBuff_1,r0
(1) 1213/ 6000840 : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1214/ 6000842 : B42B                		bsr	MarsVideo_Init
(1) 1215/ 6000844 : 0009                		nop
(1) 1216/ 6000846 : B3C3                		bsr	Mars_CachePurge
(1) 1217/ 6000848 : 0009                		nop
(1) 1218/ 600084A : D112                		mov	#_sysreg,r1
(1) 1219/ 600084C : 6011                		mov.w	@r1,r0
(1) 1220/ 600084E : CB02                		or	#CMDIRQ_ON,r0
(1) 1221/ 6000850 : 2101                		mov.w	r0,@r1
(1) 1222/ 6000852 : D111                		mov	#_sysreg+comm14,r1
(1) 1223/ 6000854 : 6011                .wait_slv:	mov.w	@r1,r0
(1) 1224/ 6000856 : 2008                		tst	r0,r0
(1) 1225/ 6000858 : 8BFC                		bf	.wait_slv
(1) 1226/ 600085A : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 1227/ 600085C : E001                		mov	#1,r0
(1) 1228/ 600085E : 2102                		mov	r0,@r1
(1) 1229/ 6000860 : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 1230/ 6000862 : 400E                		ldc	r0,sr
(1) 1231/ 6000864 : A020                		bra	master_loop
(1) 1232/ 6000866 : 0009                		nop
(1) 1233/ 6000868 :                     		align 4
(1) 1234/ 6000868 : C000 0800 0600      		ltorg
          600086E : 0000 2000 4100 
          6000874 : 0601 FFC8 0604 
          600087A : 0000 2400 0000 
          6000880 : 0602 7AE0 2000 
          6000886 : 4020 0600 4CB0 
          600088C : 2600 4D10 2600 
          6000892 : 5730 2000 4000 
          6000898 : 2000 402E FE10 
          600089E : FEE2 0530 FEE4 
          60008A4 : 4800             
(1) 1235/ 60008A6 :                     
(1) 1236/ 60008A6 :                     ; ----------------------------------------------------------------
(1) 1237/ 60008A6 :                     ; MASTER CPU loop
(1) 1238/ 60008A6 :                     ;
(1) 1239/ 60008A6 :                     ; comm12: %BD00cccc RRdflmmm
(1) 1240/ 60008A6 :                     
(1) 1241/ 60008A6 :                     ; B | This CPU's BUSY bit
(1) 1242/ 60008A6 :                     ; D | DREQ DMA active
(1) 1243/ 60008A6 :                     ; c | CMD task number
(1) 1244/ 60008A6 :                     ;
(1) 1245/ 60008A6 :                     ; R | Graphics mode init bits.
(1) 1246/ 60008A6 :                     ; d | DREQ-RAM flip request: Set to 1 after sending your RAM data
(1) 1247/ 60008A6 :                     ; f | CPU Syncronize bit, clears if drawing finishes
(1) 1248/ 60008A6 :                     ; l | Setting to skip frames (3D rendering)
(1) 1249/ 60008A6 :                     ; m | Graphics mode
(1) 1250/ 60008A6 :                     ; ----------------------------------------------------------------
(1) 1251/ 60008A6 :                     
(1) 1252/ 60008A6 :                     		align 4
(1) 1253/ 60008A8 :                     master_loop:
(1) 1255/ 60008A8 : D117                		mov	#_sysreg+comm0,r1		; DEBUG counter
(1) 1256/ 60008AA : 6010                		mov.b	@r1,r0
(1) 1257/ 60008AC : 7001                		add	#1,r0
(1) 1258/ 60008AE : 2100                		mov.b	r0,@r1
(1) 1260/ 60008B0 :                     	; ---------------------------------------
(1) 1261/ 60008B0 :                     	; Flip the DREQ Read/Write points
(1) 1262/ 60008B0 :                     	; ---------------------------------------
(1) 1263/ 60008B0 :                     
(1) 1271/ 60008B0 : 4F03                		stc	sr,@-r15
(1) 1272/ 60008B2 : E0F0                		mov.b	#$F0,r0				; Disable interrupts
(1) 1273/ 60008B4 : 600C                		extu.b	r0,r0				; ** $F0
(1) 1274/ 60008B6 : 400E                		ldc	r0,sr
(1) 1275/ 60008B8 : D214                		mov	#_sysreg+comm12+1,r2
(1) 1276/ 60008BA : 6020                		mov.b	@r2,r0
(1) 1277/ 60008BC : C820                		tst	#%00100000,r0
(1) 1278/ 60008BE : 8909                		bt	.keep_buff
(1) 1279/ 60008C0 : C609                		mov	@(marsGbl_DreqWrite,gbr),r0	; Flip DMA Read/Write buffers
(1) 1280/ 60008C2 : 6103                		mov	r0,r1
(1) 1281/ 60008C4 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1282/ 60008C6 : 0009                		nop
(1) 1283/ 60008C8 : C209                		mov	r0,@(marsGbl_DreqWrite,gbr)
(1) 1284/ 60008CA : 6013                		mov	r1,r0
(1) 1285/ 60008CC : C208                		mov	r0,@(marsGbl_DreqRead,gbr)
(1) 1286/ 60008CE : 6020                		mov.b	@r2,r0
(1) 1287/ 60008D0 : C9DF                		and	#%11011111,r0
(1) 1288/ 60008D2 : 2200                		mov.b	r0,@r2
(1) 1289/ 60008D4 :                     .keep_buff:
(1) 1290/ 60008D4 : 4F07                		ldc	@r15+,sr			; Enable interrupts
(1) 1291/ 60008D6 : D10D                		mov	#_sysreg+comm12+1,r1
(1) 1292/ 60008D8 : 6010                		mov.b	@r1,r0
(1) 1293/ 60008DA : C9EF                		and	#%11101111,r0			; Reset DREQ sync
(1) 1294/ 60008DC : 2100                		mov.b	r0,@r1
(1) 1295/ 60008DE : B377                		bsr	Mars_CachePurge			; Purge cache
(1) 1296/ 60008E0 : 0009                		nop
(1) 1297/ 60008E2 : 0009                		nop	; alignment
(1) 1298/ 60008E4 :                     	; ---------------------------------------
(1) 1299/ 60008E4 :                     	; Update SVDP in VBlank
(1) 1300/ 60008E4 :                     	; ---------------------------------------
(1) 1301/ 60008E4 : B036                		bsr	Mars_WaitVBlank
(1) 1302/ 60008E6 : 0009                		nop
(1) 1303/ 60008E8 :                     	; ---------------------------------------
(1) 1304/ 60008E8 :                     	; Jump into a screen mode
(1) 1305/ 60008E8 :                     	; ---------------------------------------
(1) 1306/ 60008E8 : C70A                		mova	mstr_list,r0
(1) 1307/ 60008EA : 6103                		mov	r0,r1
(1) 1308/ 60008EC : D208                		mov	#_sysreg+comm12,r2
(1) 1309/ 60008EE : 0009                		nop
(1) 1310/ 60008F0 : 6021                		mov.w	@r2,r0
(1) 1311/ 60008F2 : C8C0                		tst	#%11000000,r0
(1) 1312/ 60008F4 : 8900                		bt	.non_init
(1) 1313/ 60008F6 : 7104                		add	#4,r1
(1) 1314/ 60008F8 :                     .non_init:
(1) 1315/ 60008F8 : C907                		and	#%00000111,r0		; <-- Current limit
(1) 1316/ 60008FA : 4008                		shll2	r0
(1) 1317/ 60008FC : 4000                		shll	r0
(1) 1318/ 60008FE : 310C                		add	r0,r1
(1) 1319/ 6000900 : 6012                		mov	@r1,r0
(1) 1320/ 6000902 : 402B                		jmp	@r0
(1) 1321/ 6000904 : 0009                		nop
(1) 1322/ 6000906 :                     		align 4
(1) 1323/ 6000908 : 2000 4020 2000      		ltorg
          600090E : 402D 2000 402C    
(1) 1324/ 6000914 :                     
(1) 1325/ 6000914 :                     ; ====================================================================
(1) 1326/ 6000914 :                     ; ----------------------------------------------------------------
(1) 1327/ 6000914 :                     ; MODES LIST, MAXIMUM 7
(1) 1328/ 6000914 :                     ;
(1) 1329/ 6000914 :                     ; Mode number $00 sets the SVDP to Genesis.
(1) 1330/ 6000914 :                     ; ----------------------------------------------------------------
(1) 1331/ 6000914 :                     
(1) 1332/ 6000914 :                     		align 4
(1) 1333/ 6000914 :                     mstr_list:
(1) 1334/ 6000914 : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          600091A : 096C             
(1) 1335/ 600091C : 0600 0A84 0600      		dc.l MstrMode_2D,MstrMode_2D_i
          6000922 : 0A04             
(1) 1336/ 6000924 : 0600 0CD4 0600      		dc.l MstrMode_3D,MstrMode_3D_i
          600092A : 0C4C             
(1) 1337/ 600092C : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          6000932 : 096C             
(1) 1338/ 6000934 : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          600093A : 096C             
(1) 1339/ 600093C : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          6000942 : 096C             
(1) 1340/ 6000944 : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          600094A : 096C             
(1) 1341/ 600094C : 0600 096C 0600      		dc.l MstrMode_0,MstrMode_0
          6000952 : 096C             
(1) 1342/ 6000954 :                     
(1) 1343/ 6000954 :                     ; ====================================================================
(1) 1344/ 6000954 :                     ; ----------------------------------------------------------------
(1) 1345/ 6000954 :                     ; Wait VBlank
(1) 1346/ 6000954 :                     ; ----------------------------------------------------------------
(1) 1347/ 6000954 :                     
(1) 1348/ 6000954 :                     		align 4
(1) 1349/ 6000954 :                     Mars_WaitVBlank:
(1) 1350/ 6000954 : DE41                		mov	#_sysreg,r14
(1) 1351/ 6000956 : DD42                		mov	#_vdpreg,r13
(1) 1352/ 6000958 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1353/ 600095A : C880                  		tst	#FM,r0
(1) 1354/ 600095C : 8904                  		bt	.svdp_locked
(1) 1355/ 600095E : 84DA                .wait_v:	mov.b	@(vdpsts,r13),r0
(1) 1356/ 6000960 : C880                		tst	#VBLK,r0
(1) 1357/ 6000962 : 89FC                		bt	.wait_v
(1) 1358/ 6000964 : 000B                		rts
(1) 1359/ 6000966 : 0009                		nop
(1) 1360/ 6000968 :                     		align 4
(1) 1361/ 6000968 :                     .svdp_locked:
(1) 1362/ 6000968 : 000B                		rts
(1) 1363/ 600096A : 0009                		nop
(1) 1364/ 600096C :                     		align 4
(1) 1365/ 600096C :                     
(1) 1366/ 600096C :                     ; ====================================================================
(1) 1367/ 600096C :                     ; ----------------------------------------------------------------
(1) 1368/ 600096C :                     ; Blank screen mode, NOTHING.
(1) 1369/ 600096C :                     ;
(1) 1370/ 600096C :                     ; Setting this mode will also give the SVDP to the Genesis,
(1) 1371/ 600096C :                     ; CHECK FM BIT AFTER SETTING THIS MODE.
(1) 1372/ 600096C :                     ; ----------------------------------------------------------------
(1) 1373/ 600096C :                     
(1) 1374/ 600096C :                     		align 4
(1) 1375/ 600096C :                     MstrMode_0:
(1) 1376/ 600096C : BFF2                		bsr	Mars_WaitVBlank
(1) 1377/ 600096E : 0009                		nop
(1) 1378/ 6000970 :                     ; ---------------------------------------
(1) 1379/ 6000970 :                     ; Init
(1) 1380/ 6000970 :                     ;
(1) 1381/ 6000970 :                     ; Running from here...
(1) 1382/ 6000970 :                     ; ---------------------------------------
(1) 1383/ 6000970 : D13C                		mov	#_sysreg+comm12+1,r1
(1) 1384/ 6000972 : 6010                		mov.b	@r1,r0
(1) 1385/ 6000974 : C9C0                		and	#%11000000,r0
(1) 1386/ 6000976 : 2008                		tst	r0,r0
(1) 1387/ 6000978 : 8996                		bt	master_loop
(1) 1388/ 600097A : B329                		bsr	Mars_CachePurge
(1) 1389/ 600097C : 0009                		nop
(1) 1390/ 600097E : 917B                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1391/ 6000980 : 907B                		mov.w   #$A518,r0
(1) 1392/ 6000982 : 2101                		mov.w   r0,@r1
(1) 1393/ 6000984 : D138                		mov	#_sysreg+comm14,r1
(1) 1394/ 6000986 :                     .wait_slvn:
(1) 1395/ 6000986 : 6011                		mov.w	@r1,r0
(1) 1396/ 6000988 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1397/ 600098A : 2008                		tst	r0,r0
(1) 1398/ 600098C : 8BFB                		bf	.wait_slvn
(1) 1399/ 600098E : E000                		mov	#0,r0
(1) 1400/ 6000990 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1401/ 6000992 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1402/ 6000994 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1403/ 6000996 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1404/ 6000998 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1405/ 600099A : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1406/ 600099C : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1407/ 600099E : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1408/ 60009A0 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1409/ 60009A2 : DD2F                		mov 	#_vdpreg,r13
(1) 1410/ 60009A4 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 1411/ 60009A6 : C880                  		tst	#FM,r0
(1) 1412/ 60009A8 : 890C                  		bt	.still_locked
(1) 1413/ 60009AA : D230                		mov	#_framebuffer,r2
(1) 1414/ 60009AC : 9156                		mov	#(($20000)/4)/4,r1
(1) 1415/ 60009AE : E000                		mov	#0,r0
(1) 1416/ 60009B0 :                     .clr_manual:
(1) 1417/ 60009B0 :                     	rept 4-1
(1) 1418/ 60009B0 :                     		mov	r0,@r2
(1) 1419/ 60009B0 :                     		add	#4,r2
(1) 1420/ 60009B0 :                     	endm
(1) 1418/ 60009B0 : 2202                		mov	r0,@r2
(1) 1419/ 60009B2 : 7204                		add	#4,r2
(1) 1418/ 60009B4 : 2202                		mov	r0,@r2
(1) 1419/ 60009B6 : 7204                		add	#4,r2
(1) 1418/ 60009B8 : 2202                		mov	r0,@r2
(1) 1419/ 60009BA : 7204                		add	#4,r2
(1) 1421/ 60009BC : 2202                		mov	r0,@r2
(1) 1422/ 60009BE : 4110                		dt	r1
(1) 1423/ 60009C0 : 8FF6                		bf/s	.clr_manual
(1) 1424/ 60009C2 : 7204                		add	#4,r2
(1) 1425/ 60009C4 :                     .still_locked:
(1) 1426/ 60009C4 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1427/ 60009C6 : CA01                		xor	#1,r0
(1) 1428/ 60009C8 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1429/ 60009CA : D129                		mov	#_sysreg+comm12,r1
(1) 1430/ 60009CC : 6011                		mov.w	@r1,r0
(1) 1431/ 60009CE : C940                		and	#%01000000,r0
(1) 1432/ 60009D0 : 2008                		tst	r0,r0
(1) 1433/ 60009D2 : 8B0A                		bf	.not_yet
(1) 1434/ 60009D4 : DE21                		mov	#_sysreg,r14
(1) 1435/ 60009D6 : 9051                		mov	#FM,r0
(1) 1436/ 60009D8 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1437/ 60009DA : 0009                  		nop
(1) 1438/ 60009DC : 0009                  		nop
(1) 1439/ 60009DE : 0009                  		nop
(1) 1440/ 60009E0 : 0009                  		nop
(1) 1441/ 60009E2 : E000                		mov	#0,r0
(1) 1442/ 60009E4 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1443/ 60009E6 : E000                		mov	#$00,r0
(1) 1444/ 60009E8 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1445/ 60009EA :                     .not_yet:
(1) 1446/ 60009EA :                     
(1) 1447/ 60009EA : A000                		bra	MstrMode_InitExit
(1) 1448/ 60009EC : 0009                		nop
(1) 1449/ 60009EE :                     
(1) 1450/ 60009EE :                     ; ---------------------------------------
(1) 1451/ 60009EE :                     ; JUMP here at the end of the
(1) 1452/ 60009EE :                     ; Screen's INIT code.
(1) 1453/ 60009EE :                     
(1) 1454/ 60009EE :                     MstrMode_InitExit:
(1) 1455/ 60009EE : D31D                		mov	#_sysreg+comm12+1,r3
(1) 1456/ 60009F0 : 6030                		mov.b	@r3,r0
(1) 1457/ 60009F2 : 6103                		mov	r0,r1
(1) 1458/ 60009F4 : 9243                		mov	#%11000000,r2
(1) 1459/ 60009F6 : C93F                		and	#%00111111,r0
(1) 1460/ 60009F8 : 2129                		and	r2,r1
(1) 1461/ 60009FA : 4100                		shll	r1
(1) 1462/ 60009FC : 201B                		or	r1,r0
(1) 1463/ 60009FE : AF53                		bra	master_loop
(1) 1464/ 6000A00 : 2300                		mov.b	r0,@r3
(1) 1465/ 6000A02 :                     
(1) 1466/ 6000A02 :                     ; ====================================================================
(1) 1467/ 6000A02 :                     ; ----------------------------------------------------------------
(1) 1468/ 6000A02 :                     ; 256-color tiled scroll area with "Super" Sprites
(1) 1469/ 6000A02 :                     ;
(1) 1470/ 6000A02 :                     ; NOTES:
(1) 1471/ 6000A02 :                     ; - This will set SVDP permission to here.
(1) 1472/ 6000A02 :                     ; - MAXIMUM scrolling speed is 8 pixels
(1) 1473/ 6000A02 :                     ; ----------------------------------------------------------------
(1) 1474/ 6000A02 :                     
(1) 1475/ 6000A02 :                     ; ---------------------------------------
(1) 1476/ 6000A02 :                     ; Init
(1) 1477/ 6000A02 :                     ; ---------------------------------------
(1) 1478/ 6000A02 :                     
(1) 1479/ 6000A02 :                     		align 4
(1) 1480/ 6000A04 :                     MstrMode_2D_i:
(1) 1481/ 6000A04 : D11A                		mov	#_sysreg+comm12,r1
(1) 1482/ 6000A06 : 6011                		mov.w	@r1,r0
(1) 1483/ 6000A08 : C940                		and	#%01000000,r0
(1) 1484/ 6000A0A : 2008                		tst	r0,r0
(1) 1485/ 6000A0C : 8BEF                		bf	MstrMode_InitExit
(1) 1486/ 6000A0E : B2DF                		bsr	Mars_CachePurge
(1) 1487/ 6000A10 : 0009                		nop
(1) 1488/ 6000A12 : 9131                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1489/ 6000A14 : 9031                		mov.w   #$A518,r0
(1) 1490/ 6000A16 : 2101                		mov.w   r0,@r1
(1) 1491/ 6000A18 : D113                		mov	#_sysreg+comm14,r1
(1) 1492/ 6000A1A :                     .wait_slvn:
(1) 1493/ 6000A1A : 6011                		mov.w	@r1,r0
(1) 1494/ 6000A1C : C907                		and	#%00000111,r0			; Slave busy?
(1) 1495/ 6000A1E : 2008                		tst	r0,r0
(1) 1496/ 6000A20 : 8BFB                		bf	.wait_slvn
(1) 1497/ 6000A22 : E000                		mov	#0,r0
(1) 1498/ 6000A24 : D113                		mov 	#$C0000000,r1
(1) 1499/ 6000A26 : 922B                		mov	#$600/4,r2
(1) 1500/ 6000A28 :                     .clean_up:
(1) 1501/ 6000A28 : 2102                		mov	r0,@r1
(1) 1502/ 6000A2A : 4210                		dt	r2
(1) 1503/ 6000A2C : 8FFC                		bf/s	.clean_up
(1) 1504/ 6000A2E : 7104                		add	#4,r1
(1) 1505/ 6000A30 : DE0A                		mov	#_sysreg,r14
(1) 1506/ 6000A32 : DD0B                		mov	#_vdpreg,r13
(1) 1507/ 6000A34 : 9022                		mov	#FM,r0
(1) 1508/ 6000A36 : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1509/ 6000A38 : 9E23                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1510/ 6000A3A : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1511/ 6000A3C : 3E0C                		add	r0,r14
(1) 1512/ 6000A3E : 51E0                		mov	@(sscrl_x_pos,r14),r1
(1) 1513/ 6000A40 : 4129                		shlr16	r1
(1) 1514/ 6000A42 : 52E1                		mov	@(sscrl_y_pos,r14),r2
(1) 1515/ 6000A44 : 4229                		shlr16	r2
(1) 1516/ 6000A46 : 50E2                		mov	@(sscrl_vram,r14),r0
(1) 1517/ 6000A48 : DD05                		mov 	#_vdpreg,r13
(1) 1518/ 6000A4A : C213                		mov	r0,@(marsGbl_Scrl_Vram,gbr)
(1) 1519/ 6000A4C : 602F                		exts.w	r2,r0
(1) 1520/ 6000A4E : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1521/ 6000A50 : 601F                		exts.w	r1,r0
(1) 1522/ 6000A52 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1523/ 6000A54 : E001                		mov	#1,r0
(1) 1524/ 6000A56 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1525/ 6000A58 :                     ; 		add	#1,r0
(1) 1526/ 6000A58 :                     ; 		mov.w	r0,@(marsGbl_DrawAll,gbr)
(1) 1527/ 6000A58 : AFC9                		bra	MstrMode_InitExit
(1) 1528/ 6000A5A : 0009                		nop
(1) 1529/ 6000A5C :                     		align 4
(1) 1530/ 6000A5C : 2000 4000 2000      		ltorg
          6000A62 : 4100 2000 402D 
          6000A68 : 2000 402E 2400 
          6000A6E : 0000 2000 402C 
          6000A74 : C000 0000 FE80 
          6000A7A : A518 0080 00C0 
          6000A80 : 0180 0200          
(1) 1531/ 6000A84 :                     
(1) 1532/ 6000A84 :                     ; ---------------------------------------
(1) 1533/ 6000A84 :                     ; Loop
(1) 1534/ 6000A84 :                     ; ---------------------------------------
(1) 1535/ 6000A84 :                     
(1) 1536/ 6000A84 :                     		align 4
(1) 1537/ 6000A84 :                     MstrMode_2D:
(1) 1538/ 6000A84 :                     	; ---------------------------------------
(1) 1539/ 6000A84 :                     	; *** We are in VBLANK ***
(1) 1540/ 6000A84 : DE67                		mov	#_sysreg,r14			; r14 - _sysreg
(1) 1541/ 6000A86 : DD68                		mov	#_vdpreg,r13			; r13 - _vdpreg
(1) 1542/ 6000A88 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1543/ 6000A8A : C901                		and	#1,r0
(1) 1544/ 6000A8C : 80DB                		mov.b	r0,@(framectl,r13)		; Set current framebuffer
(1) 1545/ 6000A8E : C501                 		mov.w	@(marsGbl_XShift,gbr),r0
(1) 1546/ 6000A90 : C901                		and	#1,r0
(1) 1547/ 6000A92 : 81D1                		mov.w	r0,@(shift,r13)			; Set SHIFT bit (Xpos & 1)
(1) 1548/ 6000A94 : B0D6                		bsr	g_Mstr_CopyPalette		; Copy 256-color palette
(1) 1549/ 6000A96 : 0009                		nop
(1) 1550/ 6000A98 :                     	; ---------------------------------------
(1) 1551/ 6000A98 :                     	; Set scrolling varaibles
(1) 1552/ 6000A98 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1553/ 6000A9A : 9ECB                		mov	#Dreq_Buff0,r14			; ** DREQ READ **
(1) 1554/ 6000A9C : 3E0C                		add	r0,r14
(1) 1555/ 6000A9E : E100                		mov	#0,r1				; X increment
(1) 1556/ 6000AA0 : E200                		mov	#0,r2				; Y increment
(1) 1557/ 6000AA2 : E302                		mov	#2,r3				; Drawflags counter
(1) 1558/ 6000AA4 : 56E0                		mov	@(sscrl_x_pos,r14),r6
(1) 1559/ 6000AA6 : 94C6                		mov	#SET_MSCRLSIZE/2,r4		; Scroll speed limit
(1) 1560/ 6000AA8 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1561/ 6000AAA : 95C5                		mov	#-SET_MSCRLSIZE,r5		; -block_size
(1) 1562/ 6000AAC : 58E1                		mov	@(sscrl_y_pos,r14),r8
(1) 1563/ 6000AAE : 6703                		mov	r0,r7
(1) 1564/ 6000AB0 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1565/ 6000AB2 : 6903                		mov	r0,r9
(1) 1566/ 6000AB4 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1567/ 6000AB6 : 6073                		mov	r7,r0
(1) 1568/ 6000AB8 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1569/ 6000ABA : 4629                		shlr16	r6				; X >> 16
(1) 1570/ 6000ABC : 666F                		exts.w	r6,r6				; extend
(1) 1571/ 6000ABE : 4829                		shlr16	r8				; Y >> 16
(1) 1572/ 6000AC0 : 688F                		exts.w	r8,r8				; extend
(1) 1573/ 6000AC2 : 6163                		mov	r6,r1				; Make X increment
(1) 1574/ 6000AC4 : 3178                		sub	r7,r1
(1) 1575/ 6000AC6 : 6283                		mov	r8,r2				; Make Y increment
(1) 1576/ 6000AC8 : 3298                		sub	r9,r2
(1) 1577/ 6000ACA : 2118                		tst	r1,r1				; X changed?
(1) 1578/ 6000ACC : 8BFF                		bf	.x_patch
(1) 1579/ 6000ACE :                     .x_patch:
(1) 1580/ 6000ACE : 6083                		mov	r8,r0
(1) 1581/ 6000AD0 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1582/ 6000AD2 : 6063                		mov	r6,r0
(1) 1583/ 6000AD4 : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1584/ 6000AD6 : 611F                		exts.w	r1,r1
(1) 1585/ 6000AD8 : C101                		mov.w	r0,@(marsGbl_XShift,gbr)	; Write Xshift here
(1) 1586/ 6000ADA : 622F                		exts.w	r2,r2
(1) 1587/ 6000ADC :                     	; ---------------------------------------
(1) 1588/ 6000ADC :                     	; Increment FB draw TL and Y pos
(1) 1589/ 6000ADC :                     	; r1 - X increment
(1) 1590/ 6000ADC :                     	; r2 - Y increment
(1) 1591/ 6000ADC : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(1) 1592/ 6000ADE : 6803                		mov	r0,r8
(1) 1593/ 6000AE0 : C617                		mov	@(marsGbl_Scrl_FbX,gbr),r0
(1) 1594/ 6000AE2 : 6703                		mov	r0,r7
(1) 1595/ 6000AE4 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(1) 1596/ 6000AE6 : 6603                		mov	r0,r6
(1) 1597/ 6000AE8 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(1) 1598/ 6000AEA : 6503                		mov	r0,r5
(1) 1599/ 6000AEC : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(1) 1600/ 6000AEE : 6403                		mov	r0,r4
(1) 1601/ 6000AF0 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(1) 1602/ 6000AF2 : 301C                		add	r1,r0		; Add X
(1) 1603/ 6000AF4 : 4115                		cmp/pl	r1
(1) 1604/ 6000AF6 : 8B03                		bf	.yx_negtv
(1) 1605/ 6000AF8 : 3043                .yx_toptva:	cmp/ge	r4,r0
(1) 1606/ 6000AFA : 8B01                		bf	.yx_negtv
(1) 1607/ 6000AFC : AFFC                		bra	.yx_toptva
(1) 1608/ 6000AFE : 3048                		sub	r4,r0
(1) 1609/ 6000B00 :                     .yx_negtv:
(1) 1610/ 6000B00 : 4111                		cmp/pz	r1
(1) 1611/ 6000B02 : 8903                		bt	.yx_postv
(1) 1612/ 6000B04 : 4011                .yx_negtva:	cmp/pz	r0
(1) 1613/ 6000B06 : 8901                		bt	.yx_postv
(1) 1614/ 6000B08 : AFFC                		bra	.yx_negtva
(1) 1615/ 6000B0A : 304C                		add	r4,r0
(1) 1616/ 6000B0C :                     .yx_postv:
(1) 1617/ 6000B0C :                     
(1) 1618/ 6000B0C :                     	; Add Y
(1) 1619/ 6000B0C : 352C                		add	r2,r5
(1) 1620/ 6000B0E : 4215                		cmp/pl	r2
(1) 1621/ 6000B10 : 8B03                		bf	.ypu_negtv
(1) 1622/ 6000B12 : 3563                .yx_postva:	cmp/ge	r6,r5
(1) 1623/ 6000B14 : 8B01                		bf	.ypu_negtv
(1) 1624/ 6000B16 : AFFC                		bra	.yx_postva
(1) 1625/ 6000B18 : 3568                		sub	r6,r5
(1) 1626/ 6000B1A :                     .ypu_negtv:
(1) 1627/ 6000B1A : 4211                		cmp/pz	r2
(1) 1628/ 6000B1C : 8903                		bt	.ypu_postv
(1) 1629/ 6000B1E : 4511                .ypu_negtva:	cmp/pz	r5
(1) 1630/ 6000B20 : 8901                		bt	.ypu_postv
(1) 1631/ 6000B22 : AFFC                		bra	.ypu_negtva
(1) 1632/ 6000B24 : 356C                		add	r6,r5
(1) 1633/ 6000B26 :                     .ypu_postv:
(1) 1634/ 6000B26 :                     
(1) 1635/ 6000B26 :                     	; X special
(1) 1636/ 6000B26 :                     
(1) 1637/ 6000B26 : 371C                		add	r1,r7
(1) 1638/ 6000B28 : 4115                		cmp/pl	r1
(1) 1639/ 6000B2A : 8B03                		bf	.xpu_negtv
(1) 1640/ 6000B2C : 3783                .ypu_postva:	cmp/ge	r8,r7
(1) 1641/ 6000B2E : 8B01                		bf	.xpu_negtv
(1) 1642/ 6000B30 : AFFC                		bra	.ypu_postva
(1) 1643/ 6000B32 : 3788                		sub	r8,r7
(1) 1644/ 6000B34 :                     .xpu_negtv:
(1) 1645/ 6000B34 : 4111                		cmp/pz	r1
(1) 1646/ 6000B36 : 8903                		bt	.xpu_postv
(1) 1647/ 6000B38 : 4711                .xpu_negtva:	cmp/pz	r7
(1) 1648/ 6000B3A : 8901                		bt	.xpu_postv
(1) 1649/ 6000B3C : AFFC                		bra	.xpu_negtva
(1) 1650/ 6000B3E : 378C                		add	r8,r7
(1) 1651/ 6000B40 :                     .xpu_postv:
(1) 1652/ 6000B40 : 0009                		nop
(1) 1653/ 6000B42 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1654/ 6000B44 : 6053                		mov	r5,r0
(1) 1655/ 6000B46 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1656/ 6000B48 : 6073                		mov	r7,r0
(1) 1657/ 6000B4A : C217                		mov	r0,@(marsGbl_Scrl_FbX,gbr)
(1) 1658/ 6000B4C :                     
(1) 1659/ 6000B4C :                     	; ---------------------------------------
(1) 1660/ 6000B4C :                     	; Make refill timers on movement
(1) 1661/ 6000B4C :                     	; ---------------------------------------
(1) 1662/ 6000B4C : DE37                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(1) 1663/ 6000B4E : 9D74                		mov	#320,r13
(1) 1664/ 6000B50 : EC03                		mov	#%11,r12
(1) 1665/ 6000B52 : EBF0                		mov	#-16,r11
(1) 1666/ 6000B54 : 0009                		nop
(1) 1667/ 6000B56 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1668/ 6000B58 : 6903                		mov	r0,r9
(1) 1669/ 6000B5A : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1670/ 6000B5C : 6403                		mov	r0,r4
(1) 1671/ 6000B5E : C60E                		mov	@(marsGbl_Scrl_Xold,gbr),r0
(1) 1672/ 6000B60 : 24B9                		and	r11,r4
(1) 1673/ 6000B62 : 20B9                		and	r11,r0
(1) 1674/ 6000B64 : 3040                		cmp/eq	r4,r0
(1) 1675/ 6000B66 : 891A                		bt	.x_dont_scrl
(1) 1676/ 6000B68 : 2118                		tst	r1,r1
(1) 1677/ 6000B6A : 8918                		bt	.x_dont_scrl
(1) 1678/ 6000B6C : 6AE3                		mov	r14,r10
(1) 1679/ 6000B6E : 4115                		cmp/pl	r1
(1) 1680/ 6000B70 : 8B00                		bf	.x_scrl_l
(1) 1681/ 6000B72 : 34DC                		add	r13,r4
(1) 1682/ 6000B74 :                     .x_scrl_l:
(1) 1683/ 6000B74 : 9062                		mov	#512-1,r0
(1) 1684/ 6000B76 : 2409                		and	r0,r4
(1) 1685/ 6000B78 : 9061                		mov	#256-1,r0
(1) 1686/ 6000B7A : 2909                		and	r0,r9
(1) 1687/ 6000B7C : 4409                		shlr2	r4
(1) 1688/ 6000B7E : 4409                		shlr2	r4
(1) 1689/ 6000B80 : 4909                		shlr2	r9
(1) 1690/ 6000B82 : 4909                		shlr2	r9
(1) 1691/ 6000B84 : 4400                		shll	r4
(1) 1692/ 6000B86 : 3A4C                		add	r4,r10
(1) 1693/ 6000B88 : E710                		mov	#256/16,r7
(1) 1694/ 6000B8A :                     .x_sloop:
(1) 1695/ 6000B8A : 6093                		mov	r9,r0
(1) 1696/ 6000B8C : C90F                		and	#$0F,r0
(1) 1697/ 6000B8E : 4018                		shll8	r0
(1) 1698/ 6000B90 : 4009                		shlr2	r0
(1) 1699/ 6000B92 : 08AD                		mov.w	@(r10,r0),r8
(1) 1700/ 6000B94 : 28CB                		or	r12,r8
(1) 1701/ 6000B96 : 0A85                		mov.w	r8,@(r10,r0)
(1) 1702/ 6000B98 : 4710                		dt	r7
(1) 1703/ 6000B9A : 8FF6                		bf/s	.x_sloop
(1) 1704/ 6000B9C : 7901                		add	#1,r9
(1) 1705/ 6000B9E :                     .x_dont_scrl:
(1) 1706/ 6000B9E :                     ; 		mov	#224,r13
(1) 1707/ 6000B9E : 9D4F                		mov	#SET_MSCRLHGHT,r13			; Y draw
(1) 1708/ 6000BA0 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(1) 1709/ 6000BA2 : 6903                		mov	r0,r9
(1) 1710/ 6000BA4 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(1) 1711/ 6000BA6 : 6403                		mov	r0,r4
(1) 1712/ 6000BA8 : C60F                		mov	@(marsGbl_Scrl_Yold,gbr),r0
(1) 1713/ 6000BAA : 24B9                		and	r11,r4
(1) 1714/ 6000BAC : 20B9                		and	r11,r0
(1) 1715/ 6000BAE : 3040                		cmp/eq	r4,r0
(1) 1716/ 6000BB0 : 891A                		bt	.y_dont_scrl
(1) 1717/ 6000BB2 : 2228                		tst	r2,r2
(1) 1718/ 6000BB4 : 8918                		bt	.y_dont_scrl
(1) 1719/ 6000BB6 : 6AE3                		mov	r14,r10
(1) 1720/ 6000BB8 : 4215                		cmp/pl	r2
(1) 1721/ 6000BBA : 8B00                		bf	.y_scrl_l
(1) 1722/ 6000BBC : 34DC                		add	r13,r4
(1) 1723/ 6000BBE :                     .y_scrl_l:
(1) 1724/ 6000BBE : 903E                		mov	#256-1,r0
(1) 1725/ 6000BC0 : 2409                		and	r0,r4
(1) 1726/ 6000BC2 : 903B                		mov	#512-1,r0
(1) 1727/ 6000BC4 : 2909                		and	r0,r9
(1) 1728/ 6000BC6 : 4409                		shlr2	r4
(1) 1729/ 6000BC8 : 4409                		shlr2	r4
(1) 1730/ 6000BCA : 4909                		shlr2	r9
(1) 1731/ 6000BCC : 4909                		shlr2	r9
(1) 1732/ 6000BCE : 4418                		shll8	r4
(1) 1733/ 6000BD0 : 4409                		shlr2	r4
(1) 1734/ 6000BD2 : 3A4C                		add	r4,r10
(1) 1735/ 6000BD4 : E720                		mov	#512/16,r7
(1) 1736/ 6000BD6 :                     .y_sloop:
(1) 1737/ 6000BD6 : 6093                		mov	r9,r0
(1) 1738/ 6000BD8 : C91F                		and	#$1F,r0
(1) 1739/ 6000BDA : 4000                		shll	r0
(1) 1740/ 6000BDC : 08AD                		mov.w	@(r10,r0),r8
(1) 1741/ 6000BDE : 28CB                		or	r12,r8
(1) 1742/ 6000BE0 : 0A85                		mov.w	r8,@(r10,r0)
(1) 1743/ 6000BE2 : 4710                		dt	r7
(1) 1744/ 6000BE4 : 8FF7                		bf/s	.y_sloop
(1) 1745/ 6000BE6 : 7901                		add	#1,r9
(1) 1746/ 6000BE8 :                     .y_dont_scrl:
(1) 1747/ 6000BE8 :                     	; ---------------------------------------
(1) 1748/ 6000BE8 :                     	; Start drawing
(1) 1749/ 6000BE8 :                     	; ---------------------------------------
(1) 1750/ 6000BE8 : B1F2                 		bsr	Mars_CachePurge
(1) 1751/ 6000BEA : 0009                		nop
(1) 1752/ 6000BEC : B494                		bsr	MarsVideo_DrawFillBlk		; Redraw changes from Refill boxes
(1) 1753/ 6000BEE : 0009                		nop
(1) 1754/ 6000BF0 : B2DC                		bsr	MarsVideo_SuperSpr_Make
(1) 1755/ 6000BF2 : 0009                		nop
(1) 1756/ 6000BF4 : B1EC                		bsr	Mars_CachePurge
(1) 1757/ 6000BF6 : 0009                		nop
(1) 1758/ 6000BF8 : B408                		bsr	MarsVideo_MkFillBlk		; Build refill boxes
(1) 1759/ 6000BFA : 0009                		nop
(1) 1760/ 6000BFC : B336                		bsr	MarsVideo_SuperSpr_Draw
(1) 1761/ 6000BFE : 0009                		nop
(1) 1762/ 6000C00 :                     	; ---------------------------------------
(1) 1763/ 6000C00 :                     	; Make the scroll area visible and
(1) 1764/ 6000C00 :                     	; fix the broken lines.
(1) 1765/ 6000C00 : E100                		mov	#0,r1
(1) 1766/ 6000C02 : 921E                		mov	#240,r2				; Show scroll area 0 to 240
(1) 1767/ 6000C04 : B296                		bsr	MarsVideo_ShowScrlBg
(1) 1768/ 6000C06 : 0009                		nop
(1) 1769/ 6000C08 : B2BC                		bsr	marsScrl_CopyTopBot		; Bottom
(1) 1770/ 6000C0A : 0009                		nop
(1) 1771/ 6000C0C : 9219                		mov	#240,r2				; $xxFF patcher
(1) 1772/ 6000C0E : D308                		mov	#SET_FBVRAM_PATCH,r3
(1) 1773/ 6000C10 : B25A                		bsr	MarsVideo_FixTblShift
(1) 1774/ 6000C12 : E100                		mov	#0,r1
(1) 1775/ 6000C14 :                     
(1) 1776/ 6000C14 :                     	; ---------------------------------------
(1) 1777/ 6000C14 :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(1) 1778/ 6000C14 :                     ; 		mov	r0,r6
(1) 1779/ 6000C14 :                     ; .wait_wdg:	mov.w	@(marsGbl_SVdpQRead,gbr),r0
(1) 1780/ 6000C14 :                     ; 		cmp/ge	r6,r0
(1) 1781/ 6000C14 :                     ; 		bf	.wait_wdg
(1) 1782/ 6000C14 :                     ; 		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1783/ 6000C14 :                     ; 		mov.w   #$A518,r0
(1) 1784/ 6000C14 :                     ; 		mov.w   r0,@r1
(1) 1785/ 6000C14 : B1DC                		bsr	Mars_CachePurge
(1) 1786/ 6000C16 : 0009                		nop
(1) 1787/ 6000C18 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1788/ 6000C1A : CA01                		xor	#1,r0
(1) 1789/ 6000C1C : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1790/ 6000C1E : AE43                		bra	master_loop
(1) 1791/ 6000C20 : 0009                		nop
(1) 1792/ 6000C22 :                     		align 4
(1) 1793/ 6000C24 : 2000 4000 2000      		ltorg
          6000C2A : 4100 C000 0200 
          6000C30 : 0001 E000 0200 
          6000C36 : 0008 FFF0 0140 
          6000C3C : 01FF 00FF 00F0 
          6000C42 : 00F0             
(1) 1794/ 6000C44 :                     
(1) 1795/ 6000C44 :                     ; ----------------------------------------------------------------
(1) 1796/ 6000C44 :                     ; Halfway jumps...
(1) 1797/ 6000C44 :                     		align 4
(1) 1798/ 6000C44 :                     g_Mstr_CopyPalette:
(1) 1799/ 6000C44 : A0E6                		bra	Mstr_CopyPalette
(1) 1800/ 6000C46 : 0009                		nop
(1) 1801/ 6000C48 :                     		align 4
(1) 1802/ 6000C48 :                     g_MstrMode_InitExit:
(1) 1803/ 6000C48 : AED1                		bra	MstrMode_InitExit
(1) 1804/ 6000C4A : 0009                		nop
(1) 1805/ 6000C4C :                     
(1) 1806/ 6000C4C :                     ; ====================================================================
(1) 1807/ 6000C4C :                     ; ----------------------------------------------------------------
(1) 1808/ 6000C4C :                     ; 3D polygons mode, CPU INTENSIVE
(1) 1809/ 6000C4C :                     ;
(1) 1810/ 6000C4C :                     ; NOTES:
(1) 1811/ 6000C4C :                     ; - This will set SVDP permission to here.
(1) 1812/ 6000C4C :                     ; - Slave CPU will help a little.
(1) 1813/ 6000C4C :                     ; ----------------------------------------------------------------
(1) 1814/ 6000C4C :                     
(1) 1815/ 6000C4C :                     ; ---------------------------------------
(1) 1816/ 6000C4C :                     ; Init
(1) 1817/ 6000C4C :                     ; ---------------------------------------
(1) 1818/ 6000C4C :                     
(1) 1819/ 6000C4C :                     		align 4
(1) 1820/ 6000C4C :                     MstrMode_3D_i:
(1) 1821/ 6000C4C : D118                		mov	#_sysreg+comm12,r1
(1) 1822/ 6000C4E : 6011                		mov.w	@r1,r0
(1) 1823/ 6000C50 : C940                		and	#%01000000,r0
(1) 1824/ 6000C52 : 2008                		tst	r0,r0
(1) 1825/ 6000C54 : 8BF8                		bf	g_MstrMode_InitExit
(1) 1826/ 6000C56 : B1BB                		bsr	Mars_CachePurge
(1) 1827/ 6000C58 : 0009                		nop
(1) 1828/ 6000C5A : 9137                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 1829/ 6000C5C : 9037                		mov.w   #$A518,r0
(1) 1830/ 6000C5E : 2101                		mov.w   r0,@r1
(1) 1831/ 6000C60 : D114                		mov	#_sysreg+comm14,r1
(1) 1832/ 6000C62 :                     .wait_slvn:
(1) 1833/ 6000C62 : 6011                		mov.w	@r1,r0
(1) 1834/ 6000C64 : C907                		and	#%00000111,r0			; Slave busy?
(1) 1835/ 6000C66 : 2008                		tst	r0,r0
(1) 1836/ 6000C68 : 8BFB                		bf	.wait_slvn
(1) 1837/ 6000C6A : D113                		mov	#RAM_Mars_Buff3D_Start,r1
(1) 1838/ 6000C6C : D213                		mov	#RAM_Mars_Buff3D_End,r2
(1) 1839/ 6000C6E : E000                		mov	#0,r0
(1) 1840/ 6000C70 :                     .clr_me2d:
(1) 1841/ 6000C70 : 2102                		mov	r0,@r1
(1) 1842/ 6000C72 : 3123                		cmp/ge	r2,r1
(1) 1843/ 6000C74 : 8FFC                		bf/s	.clr_me2d
(1) 1844/ 6000C76 : 7104                		add	#4,r1
(1) 1845/ 6000C78 : DE11                		mov	#_sysreg,r14
(1) 1846/ 6000C7A : DD12                		mov	#_vdpreg,r13
(1) 1847/ 6000C7C : E000                		mov	#0,r0
(1) 1848/ 6000C7E : C20C                		mov	r0,@(marsGbl_Scrl_Xpos,gbr)
(1) 1849/ 6000C80 : C20D                		mov	r0,@(marsGbl_Scrl_Ypos,gbr)
(1) 1850/ 6000C82 : C20E                		mov	r0,@(marsGbl_Scrl_Xold,gbr)
(1) 1851/ 6000C84 : C20F                		mov	r0,@(marsGbl_Scrl_Yold,gbr)
(1) 1852/ 6000C86 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(1) 1853/ 6000C88 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(1) 1854/ 6000C8A : C101                		mov.w	r0,@(marsGbl_XShift,gbr)
(1) 1855/ 6000C8C : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(1) 1856/ 6000C8E : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)
(1) 1857/ 6000C90 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(1) 1858/ 6000C92 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1859/ 6000C94 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1860/ 6000C96 : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 1861/ 6000C98 : CA01                		xor	#1,r0
(1) 1862/ 6000C9A : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 1863/ 6000C9C : 9018                		mov	#FM,r0
(1) 1864/ 6000C9E : 80E0                  		mov.b	r0,@(adapter,r14)
(1) 1865/ 6000CA0 : E001                		mov	#1,r0
(1) 1866/ 6000CA2 : 80D1                		mov.b	r0,@(bitmapmd,r13)
(1) 1867/ 6000CA4 :                     	; **** TEMPORAL
(1) 1868/ 6000CA4 :                     ; 		mov	#TEST_MODEL,r0
(1) 1869/ 6000CA4 :                     ; 		mov	#RAM_Mars_Objects,r1
(1) 1870/ 6000CA4 :                     ; 		mov	r0,@(mdl_data,r1)
(1) 1871/ 6000CA4 :                     	; ****
(1) 1872/ 6000CA4 : D108                		mov	#_sysreg+comm12+1,r1	; Enable frame-dropping
(1) 1873/ 6000CA6 : 6010                		mov.b	@r1,r0
(1) 1874/ 6000CA8 : CB08                		or	#%00001000,r0
(1) 1875/ 6000CAA : 2100                		mov.b	r0,@r1
(1) 1876/ 6000CAC : AFCC                		bra	g_MstrMode_InitExit
(1) 1877/ 6000CAE : 0009                		nop
(1) 1878/ 6000CB0 :                     		align 4
(1) 1879/ 6000CB0 : 2000 402C 2000      		ltorg
          6000CB6 : 402E 0600 72E0 
          6000CBC : 0600 FB28 2000 
          6000CC2 : 4000 2000 4100 
          6000CC8 : 2000 402D FE80 
          6000CCE : A518 0080          
(1) 1880/ 6000CD2 :                     
(1) 1881/ 6000CD2 :                     ; ---------------------------------------
(1) 1882/ 6000CD2 :                     ; Loop
(1) 1883/ 6000CD2 :                     ; ---------------------------------------
(1) 1884/ 6000CD2 :                     
(1) 1885/ 6000CD2 :                     		align 4
(1) 1886/ 6000CD4 :                     MstrMode_3D:
(1) 1887/ 6000CD4 :                     	; ---------------------------------------
(1) 1888/ 6000CD4 :                     	; *** We are in VBLANK ***
(1) 1889/ 6000CD4 : DE5E                		mov	#_sysreg,r14
(1) 1890/ 6000CD6 : DD5F                		mov	#_vdpreg,r13
(1) 1891/ 6000CD8 : 85D5                .wait_sv:	mov.w	@(vdpsts,r13),r0			; Check if Framebuffer is locked
(1) 1892/ 6000CDA : C802                		tst	#%10,r0
(1) 1893/ 6000CDC : 8BFC                		bf	.wait_sv
(1) 1894/ 6000CDE : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0		; Set current Framebuffer
(1) 1895/ 6000CE0 : C901                		and	#1,r0
(1) 1896/ 6000CE2 : 80DB                		mov.b	r0,@(framectl,r13)
(1) 1897/ 6000CE4 : B096                		bsr	Mstr_CopyPalette
(1) 1898/ 6000CE6 : 0009                		nop
(1) 1899/ 6000CE8 :                     	; ---------------------------------------
(1) 1900/ 6000CE8 : D45B                		mov	#_sysreg+comm14,r4
(1) 1901/ 6000CEA :                     .wait_slvi:
(1) 1902/ 6000CEA : 6041                		mov.w	@r4,r0
(1) 1903/ 6000CEC : C907                		and	#%00000111,r0				; Slave busy?
(1) 1904/ 6000CEE : 2008                		tst	r0,r0
(1) 1905/ 6000CF0 : 8BFB                		bf	.wait_slvi
(1) 1906/ 6000CF2 : B16D                		bsr	Mars_CachePurge				; Purge cache
(1) 1907/ 6000CF4 : 0009                		nop
(1) 1908/ 6000CF6 :                     
(1) 1909/ 6000CF6 :                     	; Copy CAMERA and OBJECTS for Slave
(1) 1910/ 6000CF6 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 1911/ 6000CF8 : 6403                		mov	r0,r4
(1) 1912/ 6000CFA : 91C9                		mov	#Dreq_Buff1,r1
(1) 1913/ 6000CFC : 314C                		add	r4,r1
(1) 1914/ 6000CFE : D257                		mov	#RAM_Mars_SprPolygn,r2
(1) 1915/ 6000D00 : 93C7                		mov	#(mspr_len*MAX_MARSMSPR)/4,r3		; $400 bytes
(1) 1916/ 6000D02 :                     .copy_mspr:
(1) 1917/ 6000D02 : 6016                		mov	@r1+,r0
(1) 1918/ 6000D04 : 2202                		mov	r0,@r2
(1) 1919/ 6000D06 : 4310                		dt	r3
(1) 1920/ 6000D08 : 8FFB                		bf/s	.copy_mspr
(1) 1921/ 6000D0A : 7204                		add	#4,r2
(1) 1922/ 6000D0C : 91C2                		mov	#Dreq_Buff2,r1
(1) 1923/ 6000D0E : 314C                		add	r4,r1
(1) 1924/ 6000D10 : D253                		mov	#RAM_Mars_Objects,r2
(1) 1925/ 6000D12 : 93C0                		mov	#(mmdl_len*MAX_MARSOBJ)/4,r3		; $400 bytes
(1) 1926/ 6000D14 :                     .copy_obj:
(1) 1927/ 6000D14 : 6016                		mov	@r1+,r0
(1) 1928/ 6000D16 : 2202                		mov	r0,@r2
(1) 1929/ 6000D18 : 4310                		dt	r3
(1) 1930/ 6000D1A : 8FFB                		bf/s	.copy_obj
(1) 1931/ 6000D1C : 7204                		add	#4,r2
(1) 1932/ 6000D1E : 91BB                		mov	#Dreq_Buff0,r1
(1) 1933/ 6000D20 : 314C                		add	r4,r1
(1) 1934/ 6000D22 : D250                		mov	#RAM_Mars_ObjCamera,r2
(1) 1935/ 6000D24 : E310                		mov	#$40/4,r3				; $40 bytes
(1) 1936/ 6000D26 :                     .copy_cam:
(1) 1937/ 6000D26 : 6016                		mov	@r1+,r0
(1) 1938/ 6000D28 : 2202                		mov	r0,@r2
(1) 1939/ 6000D2A : 4310                		dt	r3
(1) 1940/ 6000D2C : 8FFB                		bf/s	.copy_cam
(1) 1941/ 6000D2E : 7204                		add	#4,r2
(1) 1942/ 6000D30 : D14D                		mov	#RAM_Mars_CurrPlgnPage,r1		; Swap polygon R/W sections
(1) 1943/ 6000D32 : 6012                		mov	@r1,r0
(1) 1944/ 6000D34 : CA01                		xor	#1,r0
(1) 1945/ 6000D36 : 6D03                		mov	r0,r13					; ** Current R/W page
(1) 1946/ 6000D38 : 2102                		mov	r0,@r1
(1) 1947/ 6000D3A : D44C                		mov	#_sysreg+comm14+1,r4			; Request Slave Task $01
(1) 1948/ 6000D3C : E001                		mov	#1,r0
(1) 1949/ 6000D3E : 2400                		mov.b	r0,@r4
(1) 1950/ 6000D40 :                     	; -------------------------------
(1) 1951/ 6000D40 :                     	; Start drawing the polygons
(1) 1952/ 6000D40 : D144                		mov	#_vdpreg,r1
(1) 1953/ 6000D42 : 90AA                		mov	#$A1,r0					; VDPFILL LEN: Pre-start at $A1
(1) 1954/ 6000D44 : 8113                		mov.w	r0,@(6,r1)
(1) 1955/ 6000D46 : D14A                		mov	#_framebuffer,r1
(1) 1956/ 6000D48 : 93A8                		mov	#240,r3
(1) 1957/ 6000D4A : E040                		mov	#$100>>2,r0
(1) 1958/ 6000D4C : 4008                		shll2	r0
(1) 1959/ 6000D4E : 6203                		mov	r0,r2
(1) 1960/ 6000D50 :                     .mk_table:
(1) 1961/ 6000D50 : 2101                		mov.w	r0,@r1
(1) 1962/ 6000D52 : 302C                		add	r2,r0
(1) 1963/ 6000D54 : 4310                		dt	r3
(1) 1964/ 6000D56 : 8FFB                		bf/s	.mk_table
(1) 1965/ 6000D58 : 7102                		add	#2,r1
(1) 1966/ 6000D5A :                     	; Prepare watchdog
(1) 1967/ 6000D5A : E000                		mov	#0,r0
(1) 1968/ 6000D5C : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(1) 1969/ 6000D5E : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(1) 1970/ 6000D60 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(1) 1971/ 6000D62 : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)
(1) 1972/ 6000D64 : 909A                		mov	#240,r0					; Lines to clear for WdgMode $07
(1) 1973/ 6000D66 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)
(1) 1974/ 6000D68 : E007                		mov	#7,r0
(1) 1975/ 6000D6A : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Start at the last mode
(1) 1976/ 6000D6C : B130                		bsr	Mars_CachePurge
(1) 1977/ 6000D6E : 0009                		nop
(1) 1978/ 6000D70 : E100                		mov	#0,r1
(1) 1979/ 6000D72 : E220                		mov	#$20,r2
(1) 1980/ 6000D74 : D03F                		mov	#Mars_SetWatchdog,r0
(1) 1981/ 6000D76 : 400B                		jsr	@r0
(1) 1982/ 6000D78 : 0009                		nop
(1) 1983/ 6000D7A :                     
(1) 1984/ 6000D7A :                     	; WATCHDOG IS ACTIVE
(1) 1985/ 6000D7A : 0009                		nop
(1) 1986/ 6000D7C : 60D3                		mov	r13,r0					; GET current page
(1) 1987/ 6000D7E : C801                		tst     #1,r0					; on this frame
(1) 1988/ 6000D80 : 8903                		bt	.page_2
(1) 1990/ 6000D82 : DE3D                		mov 	#RAM_Mars_PlgnList_0,r14
(1) 1991/ 6000D84 : DD3D                		mov	#RAM_Mars_PlgnNum_0,r13
(1) 1992/ 6000D86 : A004                		bra	.cont_plgn
(1) 1993/ 6000D88 : 0009                		nop
(1) 1999/ 6000D8A :                     .page_2:
(1) 2001/ 6000D8A : DE3D                		mov 	#RAM_Mars_PlgnList_1,r14
(1) 2002/ 6000D8C : DD3D                		mov	#RAM_Mars_PlgnNum_1,r13
(1) 2003/ 6000D8E : A000                		bra	.cont_plgn
(1) 2004/ 6000D90 : 0009                		nop
(1) 2010/ 6000D92 :                     .cont_plgn:
(1) 2011/ 6000D92 : 6DD2                		mov	@r13,r13	; Grab number of polygons
(1) 2012/ 6000D94 : 4D15                		cmp/pl	r13		; If < 0: leave
(1) 2013/ 6000D96 : 8B29                		bf	.skip
(1) 2014/ 6000D98 :                     
(1) 2015/ 6000D98 :                     	; ---------------------------------------
(1) 2016/ 6000D98 :                     	; Z sorting
(1) 2017/ 6000D98 : 6CE3                		mov	r14,r12		; r12 - PlgnList copy
(1) 2018/ 6000D9A : 6BD3                		mov	r13,r11		; r11 - PlgnNum copy
(1) 2019/ 6000D9C :                     .roll:
(1) 2020/ 6000D9C : 6AC3                		mov	r12,r10
(1) 2021/ 6000D9E : 67A2                		mov	@r10,r7		; r1 - Start value
(1) 2022/ 6000DA0 : 68A3                		mov	r10,r8		; Set Lower pointer
(1) 2023/ 6000DA2 : 69B3                		mov	r11,r9
(1) 2024/ 6000DA4 : 0009                		nop
(1) 2025/ 6000DA6 :                     .srch:
(1) 2026/ 6000DA6 : 60A2                		mov	@r10,r0
(1) 2027/ 6000DA8 : 3073                		cmp/ge	r7,r0
(1) 2028/ 6000DAA : 8901                		bt	.higher
(1) 2029/ 6000DAC : 6703                		mov	r0,r7		; Update LOW r1 value
(1) 2030/ 6000DAE : 68A3                		mov	r10,r8		; Save NEW Lower pointer
(1) 2031/ 6000DB0 :                     .higher:
(1) 2032/ 6000DB0 : 4910                		dt	r9
(1) 2033/ 6000DB2 : 8FF8                		bf/s	.srch
(1) 2034/ 6000DB4 : 7A08                		add	#8,r10
(1) 2035/ 6000DB6 : 6186                		mov	@r8+,r1		; Swap Z and pointers
(1) 2036/ 6000DB8 : 6286                		mov	@r8+,r2
(1) 2037/ 6000DBA : 63C6                		mov	@r12+,r3
(1) 2038/ 6000DBC : 64C6                		mov	@r12+,r4
(1) 2039/ 6000DBE : 2C26                		mov	r2,@-r12
(1) 2040/ 6000DC0 : 2C16                		mov	r1,@-r12
(1) 2041/ 6000DC2 : 2846                		mov	r4,@-r8
(1) 2042/ 6000DC4 : 2836                		mov	r3,@-r8
(1) 2043/ 6000DC6 : 4B10                		dt	r11
(1) 2044/ 6000DC8 : 8FE8                		bf/s	.roll
(1) 2045/ 6000DCA : 7C08                		add	#8,r12
(1) 2046/ 6000DCC :                     
(1) 2047/ 6000DCC :                     	; ---------------------------------------
(1) 2048/ 6000DCC :                     	; Slice polygon with the sorted list
(1) 2049/ 6000DCC :                     .loop:
(1) 2050/ 6000DCC : 50E1                		mov	@(4,r14),r0			; Grab current pointer
(1) 2051/ 6000DCE : 4015                		cmp/pl	r0				; Zero?
(1) 2052/ 6000DD0 : 8B09                		bf	.invalid
(1) 2053/ 6000DD2 : 2FE6                		mov	r14,@-r15
(1) 2054/ 6000DD4 : 6E03                		mov	r0,r14
(1) 2055/ 6000DD6 : D02C                		mov	#MarsVideo_SlicePlgn,r0
(1) 2056/ 6000DD8 : 400B                		jsr	@r0
(1) 2057/ 6000DDA :                     ; 		bsr	MarsVideo_SlicePlgn
(1) 2058/ 6000DDA : 2FD6                		mov	r13,@-r15
(1) 2059/ 6000DDC : 6DF6                		mov	@r15+,r13
(1) 2060/ 6000DDE : 6EF6                		mov	@r15+,r14
(1) 2061/ 6000DE0 : E000                		mov	#0,r0
(1) 2062/ 6000DE2 : 2E02                		mov	r0,@r14
(1) 2063/ 6000DE4 : 1E01                		mov	r0,@(4,r14)
(1) 2064/ 6000DE6 :                     .invalid:
(1) 2065/ 6000DE6 : 4D10                		dt	r13				; Decrement numof_polygons
(1) 2066/ 6000DE8 : 8FF0                		bf/s	.loop
(1) 2067/ 6000DEA : 7E08                		add	#8,r14				; Move to next entry
(1) 2068/ 6000DEC :                     .skip:
(1) 2069/ 6000DEC : E001                		mov	#1,r0				; Report to Watchdog that we
(1) 2070/ 6000DEE : C105                		mov.w	r0,@(marsGbl_WdgReady,gbr)	; finished slicing.
(1) 2071/ 6000DF0 :                     
(1) 2072/ 6000DF0 :                     	; ---------------------------------------
(1) 2073/ 6000DF0 : C506                .wait_pz: 	mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces remaining?
(1) 2074/ 6000DF2 : 2008                		tst	r0,r0
(1) 2075/ 6000DF4 : 8BFC                		bf	.wait_pz
(1) 2076/ 6000DF6 : C502                .wait_wdg:	mov.w	@(marsGbl_WdgTask,gbr),r0	; Watchdog finished?
(1) 2077/ 6000DF8 : 2008                		tst	r0,r0
(1) 2078/ 6000DFA : 8BFC                		bf	.wait_wdg
(1) 2079/ 6000DFC : E000                		mov	#0,r0
(1) 2080/ 6000DFE : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2081/ 6000E00 : 914D                		mov.w   #$FE80,r1			; Disable Watchdog
(1) 2082/ 6000E02 : 904D                		mov.w   #$A518,r0
(1) 2083/ 6000E04 : 2101                		mov.w   r0,@r1
(1) 2084/ 6000E06 : B0E3                		bsr	Mars_CachePurge
(1) 2085/ 6000E08 : 0009                		nop
(1) 2086/ 6000E0A : C500                		mov.w	@(marsGbl_ThisFrame,gbr),r0
(1) 2087/ 6000E0C : CA01                		xor	#1,r0
(1) 2088/ 6000E0E : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(1) 2089/ 6000E10 : AD4A                		bra	master_loop
(1) 2090/ 6000E12 : 0009                		nop
(1) 2091/ 6000E14 :                     		align 4
(1) 2092/ 6000E14 :                     
(1) 2093/ 6000E14 :                     ; ----------------------------------------------------------------
(1) 2094/ 6000E14 :                     
(1) 2095/ 6000E14 :                     		align 4
(1) 2096/ 6000E14 :                     Mstr_CopyPalette:
(1) 2097/ 6000E14 : DE0E                		mov	#_sysreg,r14
(1) 2098/ 6000E16 : 84E0                  		mov.b	@(adapter,r14),r0
(1) 2099/ 6000E18 : C880                  		tst	#FM,r0
(1) 2100/ 6000E1A : 8916                  		bt	.svdp_locked
(1) 2101/ 6000E1C : D21B                		mov	#_palette,r2
(1) 2102/ 6000E1E : E320                		mov	#(256/2)/4,r3
(1) 2103/ 6000E20 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(1) 2104/ 6000E22 : E100                		mov	#Dreq_Palette,r1		; PALETTE MUST BE AT THE TOP OF DREQ DATA,
(1) 2105/ 6000E24 :                     ; 		add	r0,r1				; so I don't need to add Dreq_Palette...
(1) 2106/ 6000E24 : 6103                		mov	r0,r1
(1) 2107/ 6000E26 :                     .copy_pal:
(1) 2108/ 6000E26 :                     	rept 4
(1) 2109/ 6000E26 :                     		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2110/ 6000E26 :                     		nop
(1) 2111/ 6000E26 :                     		mov	r0,@r2
(1) 2112/ 6000E26 :                     		add	#4,r2
(1) 2113/ 6000E26 :                     	endm
(1) 2109/ 6000E26 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2110/ 6000E28 : 0009                		nop
(1) 2111/ 6000E2A : 2202                		mov	r0,@r2
(1) 2112/ 6000E2C : 7204                		add	#4,r2
(1) 2109/ 6000E2E : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2110/ 6000E30 : 0009                		nop
(1) 2111/ 6000E32 : 2202                		mov	r0,@r2
(1) 2112/ 6000E34 : 7204                		add	#4,r2
(1) 2109/ 6000E36 : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2110/ 6000E38 : 0009                		nop
(1) 2111/ 6000E3A : 2202                		mov	r0,@r2
(1) 2112/ 6000E3C : 7204                		add	#4,r2
(1) 2109/ 6000E3E : 6016                		mov	@r1+,r0				; Copy 2 colors as LONGs
(1) 2110/ 6000E40 : 0009                		nop
(1) 2111/ 6000E42 : 2202                		mov	r0,@r2
(1) 2112/ 6000E44 : 7204                		add	#4,r2
(1) 2114/ 6000E46 : 4310                		dt	r3
(1) 2115/ 6000E48 : 8BED                		bf	.copy_pal
(1) 2116/ 6000E4A :                     .svdp_locked:
(1) 2117/ 6000E4A : 000B                		rts
(1) 2118/ 6000E4C : 0009                		nop
(1) 2119/ 6000E4E :                     		align 4
(1) 2120/ 6000E50 : 2000 4000 2000      		ltorg
          6000E56 : 4100 2000 402E 
          6000E5C : 0600 7820 0600 
          6000E62 : 7320 0600 72E0 
          6000E68 : 2600 72D0 2000 
          6000E6E : 402F 2400 0000 
          6000E74 : 0600 1028 0600 
          6000E7A : EB20 0600 FB20 
          6000E80 : 0600 F320 0600 
          6000E86 : FB24 0600 1708 
          6000E8C : 2000 4200 0220 
          6000E92 : 00C0 0620 0140 
          6000E98 : 0200 00A1 00F0 
          6000E9E : FE80 A518          
(1) 2121/ 6000EA2 :                     
(1) 2122/ 6000EA2 :                     ; ====================================================================
(1) 2123/ 6000EA2 :                     ; ----------------------------------------------------------------
(1) 2124/ 6000EA2 :                     ; Slave entry point
(1) 2125/ 6000EA2 :                     ; ----------------------------------------------------------------
(1) 2126/ 6000EA2 :                     
(1) 2127/ 6000EA2 :                     		align 4
(1) 2128/ 6000EA4 :                     SH2_S_Entry:
(1) 2129/ 6000EA4 : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2130/ 6000EA6 : 600C                		extu.b	r0,r0
(1) 2131/ 6000EA8 : 400E                		ldc	r0,sr
(1) 2132/ 6000EAA : DF22                		mov	#STACK_SLV,r15		; Reset stack
(1) 2133/ 6000EAC : D022                		mov	#SH2_Slave,r0		; Reset vbr
(1) 2134/ 6000EAE : 402E                		ldc	r0,vbr
(1) 2135/ 6000EB0 : 9150                		mov.l	#_FRT,r1		; Free-run timer settings
(1) 2136/ 6000EB2 : E000                		mov	#0,r0			; ** REQUIRED FOR REAL HARDWARE **
(1) 2137/ 6000EB4 : 8010                		mov.b	r0,@(0,r1)
(1) 2138/ 6000EB6 : E0E2                		mov.b	#$E2,r0
(1) 2139/ 6000EB8 : 8017                		mov.b	r0,@(7,r1)
(1) 2140/ 6000EBA : E000                		mov	#0,r0
(1) 2141/ 6000EBC : 8014                		mov.b	r0,@(4,r1)
(1) 2142/ 6000EBE : E001                		mov	#1,r0
(1) 2143/ 6000EC0 : 8015                		mov.b	r0,@(5,r1)
(1) 2144/ 6000EC2 : E000                		mov	#0,r0
(1) 2145/ 6000EC4 : 8016                		mov.b	r0,@(6,r1)
(1) 2146/ 6000EC6 : E001                		mov	#1,r0
(1) 2147/ 6000EC8 : 8011                		mov.b	r0,@(1,r1)
(1) 2148/ 6000ECA : E000                		mov	#0,r0
(1) 2149/ 6000ECC : 8013                		mov.b	r0,@(3,r1)
(1) 2150/ 6000ECE : 8012                		mov.b	r0,@(2,r1)
(1) 2151/ 6000ED0 : E0F2                		mov.b	#$F2,r0			; ****
(1) 2152/ 6000ED2 : 8017                		mov.b	r0,@(7,r1)
(1) 2153/ 6000ED4 : E000                		mov	#0,r0
(1) 2154/ 6000ED6 : 8014                		mov.b	r0,@(4,r1)
(1) 2155/ 6000ED8 : E001                		mov	#1,r0
(1) 2156/ 6000EDA : 8015                		mov.b	r0,@(5,r1)
(1) 2157/ 6000EDC : E0E2                		mov.b	#$E2,r0
(1) 2158/ 6000EDE : 8017                		mov.b	r0,@(7,r1)
(1) 2159/ 6000EE0 :                     
(1) 2160/ 6000EE0 :                     	; --------------------------------------------------------
(1) 2161/ 6000EE0 :                     	; Extra interrupt settings
(1) 2162/ 6000EE0 : 9039                		mov.w   #$FEE2,r0		; Extra interrupt priority levels ($FFFFFEE2)
(1) 2163/ 6000EE2 : 9139                		mov     #(3<<4)|(5<<8),r1	; (DMA_LVL<<8)|(WDG_LVL<<4) Current: WDG 3 DMA 5
(1) 2164/ 6000EE4 : 2011                		mov.w   r1,@r0
(1) 2165/ 6000EE6 : 9038                		mov.w   #$FEE4,r0		; Vector jump number for Watchdog ($FFFFFEE4)
(1) 2166/ 6000EE8 : 9138                		mov     #($120/4)<<8,r1		; (vbr+POINTER)<<8
(1) 2167/ 6000EEA : 2011                		mov.w   r1,@r0
(1) 2168/ 6000EEC : E0A8                		mov.b	#$A8,r0			; Vector jump number for DMACHANNEL1 ($FFFFFFA8)
(1) 2169/ 6000EEE : E149                		mov     #($124/4),r1		; (vbr+POINTER)
(1) 2170/ 6000EF0 : 2012                		mov	r1,@r0
(1) 2171/ 6000EF2 :                     	; --------------------------------------------------------
(1) 2172/ 6000EF2 :                     	; CD32X only:
(1) 2173/ 6000EF2 :                     	; --------------------------------------------------------
(1) 2175/ 6000EF2 : D112                		mov	#_sysreg+comm0,r1
(1) 2176/ 6000EF4 : 6012                .wait_mstr:	mov	@r1,r0
(1) 2177/ 6000EF6 : 2008                		tst	r0,r0
(1) 2178/ 6000EF8 : 8BFC                		bf	.wait_mstr
(1) 2179/ 6000EFA : 7104                		add	#4,r1
(1) 2180/ 6000EFC : E000                		mov	#0,r0				; clear comm4
(1) 2181/ 6000EFE : 2102                		mov	r0,@r1
(1) 2183/ 6000F00 : B0AA                		bsr	MarsSound_Init			; Init sound
(1) 2184/ 6000F02 : 0009                		nop
(1) 2185/ 6000F04 :                     
(1) 2186/ 6000F04 :                     ; ====================================================================
(1) 2187/ 6000F04 :                     ; ----------------------------------------------------------------
(1) 2188/ 6000F04 :                     ; Slave MAIN code
(1) 2189/ 6000F04 :                     ;
(1) 2190/ 6000F04 :                     ; *** NOTE ***
(1) 2191/ 6000F04 :                     ; On actual HW this CPU runs slower than MASTER because of
(1) 2192/ 6000F04 :                     ; priority of the SDRAM.
(1) 2193/ 6000F04 :                     ; The important code is stored on 2K Cache
(1) 2194/ 6000F04 :                     ; (see cache/cache_slv.asm)
(1) 2195/ 6000F04 :                     ; ----------------------------------------------------------------
(1) 2196/ 6000F04 :                     
(1) 2197/ 6000F04 :                     SH2_S_HotStart:
(1) 2198/ 6000F04 : D00E                		mov	#RAM_Mars_Global,r0		; Reset gbr
(1) 2199/ 6000F06 : 401E                		ldc	r0,gbr
(1) 2200/ 6000F08 : B062                		bsr	Mars_CachePurge
(1) 2201/ 6000F0A : 0009                		nop
(1) 2202/ 6000F0C : D10D                		mov	#CACHE_SLAVE,r1
(1) 2203/ 6000F0E : 9226                		mov	#CACHE_SLAVE_E-CACHE_SLAVE,r2
(1) 2204/ 6000F10 : D00D                		mov	#Mars_CacheRamCode,r0
(1) 2205/ 6000F12 : 400B                		jsr	@r0
(1) 2206/ 6000F14 : 0009                		nop
(1) 2207/ 6000F16 : D10D                		mov	#_sysreg,r1
(1) 2208/ 6000F18 : 6011                		mov.w	@r1,r0
(1) 2209/ 6000F1A : CB03                		or	#CMDIRQ_ON|PWMIRQ_ON,r0		; Enable these interrupts
(1) 2210/ 6000F1C :                     ; 		or	#CMDIRQ_ON,r0
(1) 2211/ 6000F1C : 2101                		mov.w	r0,@r1
(1) 2212/ 6000F1E : D10C                		mov	#_sysreg+comm12,r1
(1) 2213/ 6000F20 : 6011                .wait_mst:	mov.w	@r1,r0
(1) 2214/ 6000F22 : 2008                		tst	r0,r0
(1) 2215/ 6000F24 : 8BFC                		bf	.wait_mst
(1) 2216/ 6000F26 : E1B0                		mov	#_DMAOPERATION,r1		; Enable DMA operation
(1) 2217/ 6000F28 : E001                		mov	#1,r0
(1) 2218/ 6000F2A : 2102                		mov	r0,@r1
(1) 2219/ 6000F2C : E020                		mov.b	#$20,r0				; Interrupts ON
(1) 2220/ 6000F2E : 400E                		ldc	r0,sr
(1) 2221/ 6000F30 : A016                		bra	slave_loop
(1) 2222/ 6000F32 : 0009                		nop
(1) 2223/ 6000F34 :                     		align 4
(1) 2224/ 6000F34 : C000 0800 0600      		ltorg
          6000F3A : 0128 2000 4020 
          6000F40 : 0600 4CB0 0600 
          6000F46 : 1E18 0600 0FEC 
          6000F4C : 2000 4000 2000 
          6000F52 : 402C FE10 FEE2 
          6000F58 : 0530 FEE4 4800 
          6000F5E : 0694             
(1) 2225/ 6000F60 :                     
(1) 2226/ 6000F60 :                     ; ----------------------------------------------------------------
(1) 2227/ 6000F60 :                     ; SLAVE CPU loop
(1) 2228/ 6000F60 :                     ;
(1) 2229/ 6000F60 :                     ; comm14: %Bp00cccc 00000ttt
(1) 2230/ 6000F60 :                     
(1) 2231/ 6000F60 :                     ; B | This CPU's busy bit (CMD lock)
(1) 2232/ 6000F60 :                     ; p | DATA pass bit
(1) 2233/ 6000F60 :                     ; c | CMD task number
(1) 2234/ 6000F60 :                     ;
(1) 2235/ 6000F60 :                     ; t | Task number
(1) 2236/ 6000F60 :                     ; ----------------------------------------------------------------
(1) 2237/ 6000F60 :                     
(1) 2238/ 6000F60 :                     		align 4
(1) 2239/ 6000F60 :                     slave_loop:
(1) 2241/ 6000F60 : D115                		mov	#_sysreg+comm1,r1		; DEBUG counter
(1) 2242/ 6000F62 : 6010                		mov.b	@r1,r0
(1) 2243/ 6000F64 : 7001                		add	#1,r0
(1) 2244/ 6000F66 : 2100                		mov.b	r0,@r1
(1) 2246/ 6000F68 : D114                		mov	#_sysreg+comm14,r1
(1) 2247/ 6000F6A : 6011                		mov.w	@r1,r0
(1) 2248/ 6000F6C : C907                		and	#%00000111,r0
(1) 2249/ 6000F6E : 4008                		shll2	r0
(1) 2250/ 6000F70 : 6103                		mov	r0,r1
(1) 2251/ 6000F72 : C702                		mova	slv_list,r0
(1) 2252/ 6000F74 : 301C                		add	r1,r0
(1) 2253/ 6000F76 : 6102                		mov	@r0,r1
(1) 2254/ 6000F78 : 412B                		jmp	@r1
(1) 2255/ 6000F7A : 0009                		nop
(1) 2256/ 6000F7C :                     		align 4
(1) 2257/ 6000F7C :                     
(1) 2258/ 6000F7C :                     ; ====================================================================
(1) 2259/ 6000F7C :                     
(1) 2260/ 6000F7C :                     		align 4
(1) 2261/ 6000F7C :                     slv_list:
(1) 2262/ 6000F7C : 0600 0F9C           		dc.l SlvMode_00
(1) 2263/ 6000F80 : 0600 0FA0           		dc.l SlvMode_01
(1) 2264/ 6000F84 : 0600 0F9C           		dc.l SlvMode_00
(1) 2265/ 6000F88 : 0600 0F9C           		dc.l SlvMode_00
(1) 2266/ 6000F8C : 0600 0F9C           		dc.l SlvMode_00
(1) 2267/ 6000F90 : 0600 0F9C           		dc.l SlvMode_00
(1) 2268/ 6000F94 : 0600 0F9C           		dc.l SlvMode_00
(1) 2269/ 6000F98 : 0600 0F9C           		dc.l SlvMode_00
(1) 2270/ 6000F9C :                     
(1) 2271/ 6000F9C :                     ; ====================================================================
(1) 2272/ 6000F9C :                     ; ----------------------------------------------------------------
(1) 2273/ 6000F9C :                     ; NOTHING
(1) 2274/ 6000F9C :                     ; ----------------------------------------------------------------
(1) 2275/ 6000F9C :                     
(1) 2276/ 6000F9C :                     SlvMode_00:
(1) 2277/ 6000F9C : AFE0                		bra	slave_loop
(1) 2278/ 6000F9E : 0009                		nop
(1) 2279/ 6000FA0 :                     
(1) 2280/ 6000FA0 :                     ; ====================================================================
(1) 2281/ 6000FA0 :                     ; ----------------------------------------------------------------
(1) 2282/ 6000FA0 :                     ; Slave task 01
(1) 2283/ 6000FA0 :                     ; ----------------------------------------------------------------
(1) 2284/ 6000FA0 :                     
(1) 2285/ 6000FA0 :                     		align 4
(1) 2286/ 6000FA0 :                     SlvMode_01:
(1) 2287/ 6000FA0 : D107                		mov	#$C0000000|CachSlv_CurrPage,r1
(1) 2288/ 6000FA2 : D008                		mov	#RAM_Mars_CurrPlgnPage,r0
(1) 2289/ 6000FA4 : 6002                		mov	@r0,r0
(1) 2290/ 6000FA6 : 2102                		mov	r0,@r1
(1) 2291/ 6000FA8 : D007                		mov	#$C0000000|MarsMdl_MdlLoop,r0	; Cache jump
(1) 2292/ 6000FAA : 400B                		jsr	@r0
(1) 2293/ 6000FAC : 0009                		nop
(1) 2294/ 6000FAE : D107                		mov	#_sysreg+comm14+1,r1
(1) 2295/ 6000FB0 : E000                		mov	#0,r0
(1) 2296/ 6000FB2 : AFD5                		bra	slave_loop
(1) 2297/ 6000FB4 : 2100                		mov.b	r0,@r1
(1) 2298/ 6000FB6 :                     		align 4
(1) 2299/ 6000FB8 : 2000 4021 2000      		ltorg
          6000FBE : 402E C000 0690 
          6000FC4 : 2600 72D0 C000 
          6000FCA : 0158 2000 402F    
(1) 2300/ 6000FD0 :                     
(1) 2301/ 6000FD0 :                     ; ====================================================================
(1) 2302/ 6000FD0 :                     ; ----------------------------------------------------------------
(1) 2303/ 6000FD0 :                     ; Shared routines
(1) 2304/ 6000FD0 :                     ; ----------------------------------------------------------------
(1) 2305/ 6000FD0 :                     
(1) 2306/ 6000FD0 :                     ; --------------------------------------------------------
(1) 2307/ 6000FD0 :                     ; Mars_CachePurge, Mars_CachePurge_S
(1) 2308/ 6000FD0 :                     ;
(1) 2309/ 6000FD0 :                     ; Purges the internal cache, call this often.
(1) 2310/ 6000FD0 :                     ;
(1) 2311/ 6000FD0 :                     ; Breaks:
(1) 2312/ 6000FD0 :                     ; r0-r1
(1) 2313/ 6000FD0 :                     ; --------------------------------------------------------
(1) 2314/ 6000FD0 :                     
(1) 2315/ 6000FD0 :                     		align 4
(1) 2316/ 6000FD0 :                     Mars_CachePurge:
(1) 2317/ 6000FD0 : 9128                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(1) 2318/ 6000FD2 : E010                		mov	#%10000,r0
(1) 2319/ 6000FD4 : 2100                		mov.b	r0,@r1
(1) 2320/ 6000FD6 : 0009                		nop
(1) 2321/ 6000FD8 : 0009                		nop
(1) 2322/ 6000FDA : 0009                		nop
(1) 2323/ 6000FDC : 0009                		nop
(1) 2324/ 6000FDE : 0009                		nop
(1) 2325/ 6000FE0 : 0009                		nop
(1) 2326/ 6000FE2 : 0009                		nop
(1) 2327/ 6000FE4 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(1) 2328/ 6000FE6 : 000B                		rts
(1) 2329/ 6000FE8 : 2100                		mov.b	r0,@r1
(1) 2330/ 6000FEA :                     
(1) 2331/ 6000FEA :                     ; ----------------------------------------------------------------
(1) 2332/ 6000FEA :                     ; Mars_CacheRamCode
(1) 2333/ 6000FEA :                     ;
(1) 2334/ 6000FEA :                     ; Loads "fast code" into the SH2's cache, maximum size is
(1) 2335/ 6000FEA :                     ; $700 bytes aprox.
(1) 2336/ 6000FEA :                     ;
(1) 2337/ 6000FEA :                     ; Input:
(1) 2338/ 6000FEA :                     ; r1 | Code to send
(1) 2339/ 6000FEA :                     ; r2 | Size
(1) 2340/ 6000FEA :                     ;
(1) 2341/ 6000FEA :                     ; Breaks:
(1) 2342/ 6000FEA :                     ; r0/r3
(1) 2343/ 6000FEA :                     ; ----------------------------------------------------------------
(1) 2344/ 6000FEA :                     
(1) 2345/ 6000FEA :                     		align 4
(1) 2346/ 6000FEC :                     Mars_CacheRamCode:
(1) 2347/ 6000FEC : 4F03                		stc	sr,@-r15	; Interrupts OFF
(1) 2348/ 6000FEE : E0F0                		mov.b	#$F0,r0		; ** $F0
(1) 2349/ 6000FF0 : 600C                		extu.b	r0,r0
(1) 2350/ 6000FF2 : 400E                		ldc	r0,sr
(1) 2351/ 6000FF4 : 9316                		mov	#_CCR,r3
(1) 2352/ 6000FF6 : E010                		mov	#%00010000,r0	; Cache purge + Disable
(1) 2353/ 6000FF8 : 2301                		mov.w	r0,@r3
(1) 2354/ 6000FFA : 0009                		nop
(1) 2355/ 6000FFC : 0009                		nop
(1) 2356/ 6000FFE : 0009                		nop
(1) 2357/ 6001000 : 0009                		nop
(1) 2358/ 6001002 : 0009                		nop
(1) 2359/ 6001004 : 0009                		nop
(1) 2360/ 6001006 : 0009                		nop
(1) 2361/ 6001008 : 0009                		nop
(1) 2362/ 600100A : E009                		mov	#%00001001,r0	; Cache two-way mode + Enable
(1) 2363/ 600100C : 2301                		mov.w	r0,@r3
(1) 2364/ 600100E : D304                		mov 	#$C0000000,r3
(1) 2365/ 6001010 : 4209                		shlr2	r2
(1) 2366/ 6001012 :                     .copy:
(1) 2367/ 6001012 : 6016                		mov 	@r1+,r0
(1) 2368/ 6001014 : 2302                		mov 	r0,@r3
(1) 2369/ 6001016 : 4210                		dt	r2
(1) 2370/ 6001018 : 8FFB                		bf/s	.copy
(1) 2371/ 600101A : 7304                		add 	#4,r3
(1) 2372/ 600101C : 000B                		rts
(1) 2373/ 600101E : 4F07                		ldc	@r15+,sr
(1) 2374/ 6001020 :                     		align 4
(1) 2375/ 6001020 : C000 0000 FE92      		ltorg
(1) 2376/ 6001026 :                     
(1) 2377/ 6001026 :                     ; --------------------------------------------------------
(1) 2378/ 6001026 :                     ; Mars_SetWatchdog
(1) 2379/ 6001026 :                     ;
(1) 2380/ 6001026 :                     ; Prepares watchdog interrupt
(1) 2381/ 6001026 :                     ;
(1) 2382/ 6001026 :                     ; Input:
(1) 2383/ 6001026 :                     ; r1 | Watchdog CPU clock divider
(1) 2384/ 6001026 :                     ; r2 | Watchdog timer
(1) 2385/ 6001026 :                     ; --------------------------------------------------------
(1) 2386/ 6001026 :                     
(1) 2387/ 6001026 :                     		align 4
(1) 2388/ 6001028 :                     Mars_SetWatchdog:
(1) 2389/ 6001028 : 0402                		stc	sr,r4
(1) 2390/ 600102A : E0F0                		mov.b	#$F0,r0			; ** $F0
(1) 2391/ 600102C : 600C                		extu.b	r0,r0
(1) 2392/ 600102E : 400E                		ldc 	r0,sr
(1) 2393/ 6001030 : C108                		mov.w	r0,@(marsGbl_WdgActive,gbr)
(1) 2394/ 6001032 : 930D                		mov.l	#_CCR,r3		; Refresh Cache
(1) 2395/ 6001034 : E008                		mov	#%00001000,r0		; Two-way mode
(1) 2396/ 6001036 : 2301                		mov.w	r0,@r3
(1) 2397/ 6001038 : E019                		mov	#%00011001,r0		; Cache purge / Two-way mode / Cache ON
(1) 2398/ 600103A : 2301                		mov.w	r0,@r3
(1) 2399/ 600103C : 9309                		mov.w	#$FE80,r3		; $FFFFFE80
(1) 2400/ 600103E : 9009                		mov.w	#$5A00,r0		; Watchdog timer
(1) 2401/ 6001040 : 202B                		or	r2,r0
(1) 2402/ 6001042 : 2301                		mov.w	r0,@r3
(1) 2403/ 6001044 : 9007                		mov.w	#$A538,r0		; Enable Watchdog
(1) 2404/ 6001046 : 201B                		or	r1,r0
(1) 2405/ 6001048 : 2301                		mov.w	r0,@r3
(1) 2406/ 600104A : 440E                		ldc	r4,sr
(1) 2407/ 600104C : 000B                		rts
(1) 2408/ 600104E : 0009                		nop
(1) 2409/ 6001050 :                     		align 4
(1) 2410/ 6001050 : FE92 FE80 5A00      		ltorg
          6001056 : A538             
(1) 2411/ 6001058 :                     
(1) 2412/ 6001058 :                     ; ====================================================================
(1) 2413/ 6001058 :                     ; ----------------------------------------------------------------
(1) 2414/ 6001058 :                     ; Includes
(1) 2415/ 6001058 :                     ; ----------------------------------------------------------------
(1) 2416/ 6001058 :                     
(1) 2417/ 6001058 :                     		align 4
(1) 2418/ 6001058 :                     		include "nikona/mars/sound.asm"
(2)    1/ 6001058 :                     ; ===========================================================================
(2)    2/ 6001058 :                     ; -------------------------------------------------------------------
(2)    3/ 6001058 :                     ; 32X Sound, Slave CPU side
(2)    4/ 6001058 :                     ; -------------------------------------------------------------------
(2)    5/ 6001058 :                     
(2)    6/ 6001058 :                     ; --------------------------------------------------------
(2)    7/ 6001058 :                     ; Settings
(2)    8/ 6001058 :                     ; --------------------------------------------------------
(2)    9/ 6001058 :                     
(2)   10/ 6001058 : =$8                  MAX_PWMCHNL	equ 8		; Maximum channels to use
(2)   11/ 6001058 : =$3E80               SAMPLE_RATE	equ 16000
(2)   12/ 6001058 :                     
(2)   13/ 6001058 :                     ; --------------------------------------------------------
(2)   14/ 6001058 :                     ; Structs
(2)   15/ 6001058 :                     ; --------------------------------------------------------
(2)   16/ 6001058 :                     
(2)   17/ 6001058 :                     ; 32X sound channel
(2)   18/       0 :                     marspwm		struct
(2)   19/       0 :                     enbl		ds.l 1		; %EB00 SLlr | StereoEnable,Loop,left,right
(2)   20/       4 :                     read		ds.l 1		; READ point
(2)   21/       8 :                     bank		ds.l 1		; CS1 or CS3
(2)   22/       C :                     start		ds.l 1		; Start point $00xxxxxx << 8
(2)   23/      10 :                     length		ds.l 1		; Lenght << 8
(2)   24/      14 :                     loop		ds.l 1		; Loop point << 8
(2)   25/      18 :                     pitch		ds.l 1		; Pitch $xx.xx
(2)   26/      1C :                     vol		ds.l 1		; Volume ($0000-Max)
(2)   27/      20 :                     cbank		ds.l 1
(2)   28/      24 :                     cread		ds.l 1
(2)   29/      28 :                     ; len		ds.l 0
(2)   30/ 6001058 : =$28                 		endstruct
(2)   31/ 6001058 :                     
(2)   32/ 6001058 :                     ; ====================================================================
(2)   33/ 6001058 :                     ; --------------------------------------------------------
(2)   34/ 6001058 :                     ; Init Sound PWM
(2)   35/ 6001058 :                     ;
(2)   36/ 6001058 :                     ; Cycle register formulas:
(2)   37/ 6001058 :                     ; NTSC ((((23011361<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   38/ 6001058 :                     ; PAL  ((((22801467<<1)/SAMPLE_RATE+1)>>1)+1)
(2)   39/ 6001058 :                     ;
(2)   40/ 6001058 :                     ; NOTE: The CLICK sound after calling this is normal.
(2)   41/ 6001058 :                     ; --------------------------------------------------------
(2)   42/ 6001058 :                     
(2)   43/ 6001058 :                     		align 4
(2)   44/ 6001058 :                     MarsSound_Init:
(2)   45/ 6001058 : 4F13                		stc	gbr,@-r15
(2)   46/ 600105A : D00B                		mov	#_sysreg,r0
(2)   47/ 600105C : 401E                		ldc	r0,gbr
(2)   48/ 600105E : 9019                		mov	#$0105,r0					; Timing interval $01, Output L/R
(2)   49/ 6001060 : C118                		mov.w	r0,@(timerctl,gbr)
(2)   50/ 6001062 : 9018                		mov	#((((23011361<<1)/SAMPLE_RATE+1)>>1)+1),r0	; Sample rate
(2)   51/ 6001064 : C119                		mov.w	r0,@(cycle,gbr)
(2)   52/ 6001066 : E001                		mov	#1,r0
(2)   53/ 6001068 : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   54/ 600106A : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   55/ 600106C : C11C                		mov.w	r0,@(monowidth,gbr)
(2)   56/ 600106E : D407                		mov	#RAM_Mars_PwmList,r4
(2)   57/ 6001070 : E328                		mov	#marspwm_len,r3
(2)   58/ 6001072 : E208                		mov	#MAX_PWMCHNL,r2
(2)   59/ 6001074 : 9110                		mov	#$200,r1
(2)   60/ 6001076 : D006                		mov	#RAM_Mars_PwmBackup,r0
(2)   61/ 6001078 :                     .next_one:
(2)   62/ 6001078 : 1408                		mov	r0,@(marspwm_cbank,r4)
(2)   63/ 600107A : 343C                		add	r3,r4
(2)   64/ 600107C : 4210                		dt	r2
(2)   65/ 600107E : 8FFB                		bf/s	.next_one
(2)   66/ 6001080 : 301C                		add	r1,r0
(2)   67/ 6001082 :                     
(2)   68/ 6001082 : 4F17                		ldc	@r15+,gbr
(2)   69/ 6001084 : 000B                		rts
(2)   70/ 6001086 : 0009                		nop
(2)   71/ 6001088 :                     		align 4
(2)   72/ 6001088 :                     
(2)   73/ 6001088 :                     ; ====================================================================
(2)   74/ 6001088 :                     
(2)   75/ 6001088 :                     ; PWM playback code is located at cache_slv.asm
(2)   76/ 6001088 :                     
(2)   77/ 6001088 :                     ; ====================================================================
(2)   78/ 6001088 :                     
(2)   79/ 6001088 : 2000 4000 2600      		ltorg			; Save literals
          600108E : 6190 2600 62D0 
          6001094 : 0105 059F 0200    
(2)   80/ 600109A :                     
(1) 2419/ 600109A :                     		include "nikona/mars/video.asm"
(2)    1/ 600109A :                     ; ===========================================================================
(2)    2/ 600109A :                     ; ----------------------------------------------------------------
(2)    3/ 600109A :                     ; 32X Video, Master CPU side.
(2)    4/ 600109A :                     ; ----------------------------------------------------------------
(2)    5/ 600109A :                     
(2)    6/ 600109A :                     ; ====================================================================
(2)    7/ 600109A :                     ; --------------------------------------------------------
(2)    8/ 600109A :                     ; Settings
(2)    9/ 600109A :                     ; --------------------------------------------------------
(2)   10/ 600109A :                     
(2)   11/ 600109A : =$18000              MAX_MarsVram		equ $18000	; !! Maximum 32X graphics data stored on SDRAM for both 2D/3D
(2)   12/ 600109A :                     
(2)   13/ 600109A :                     ; ------------------------------------------------
(2)   14/ 600109A :                     ; 2D scrolling mode
(2)   15/ 600109A : =$10                 SET_MSCRLSIZE		equ 16		; !! Hard-coded, requires code modifications
(2)   16/ 600109A : =$150                SET_MSCRLWDTH		equ 320+16	; !! Affects 2D Scrolling, Super-Sprites and 3D Polygons
(2)   17/ 600109A : =$F0                 SET_MSCRLHGHT		equ 240		; !! ''
(2)   18/ 600109A : =$200                SET_TILEMAX		equ $0200	; Maximum block tiles to use (1-bit SIZES ONLY)
(2)   19/ 600109A : =$1E000              SET_FBVRAM_PATCH	equ $1E000	; Framebuffer location to store the affected XShift lines
(2)   20/ 600109A :                     ; SET_FBVRAM_BLANK	equ $1FD80	; Framebuffer location for the BLANK line
(2)   21/ 600109A :                     
(2)   22/ 600109A :                     ; ------------------------------------------------
(2)   23/ 600109A :                     ; 3D polygons mode
(2)   24/ 600109A :                     ; MAX_MOBJ		equ 64		; see system/shared.asm
(2)   25/ 600109A : =$140                SET_3DFIELD_WDTH	equ 320
(2)   26/ 600109A : =$E0                 SET_3DFIELD_HGHT	equ 224
(2)   27/ 600109A : =$100                MAX_FACES		equ 256		; Maximum 3D polygon faces to read
(2)   28/ 600109A : =$FFFFFFFFFFFFFD80   MAX_ZDIST		equ -$280	; Maximum 3D field distance (-value)
(2)   29/ 600109A :                     
(2)   30/ 600109A :                     ; --------------------------------------------------------
(2)   31/ 600109A :                     ; Variables
(2)   32/ 600109A :                     ; --------------------------------------------------------
(2)   33/ 600109A :                     
(2)   34/ 600109A : =$80                 PLGN_TEXURE		equ %10000000	; plypz_type (MSB)
(2)   35/ 600109A : =$40                 PLGN_TRI		equ %01000000
(2)   36/ 600109A :                     ; ** MORE variables system/shared.asm
(2)   37/ 600109A :                     
(2)   38/ 600109A :                     ; --------------------------------------------------------
(2)   39/ 600109A :                     ; Structs
(2)   40/ 600109A :                     ; --------------------------------------------------------
(2)   41/ 600109A :                     
(2)   42/ 600109A :                     ; FIXED SIZE: $40
(2)   43/       0 :                     plypz		struct
(2)   44/       0 :                     type		ds.l 1		; Type + Material settings (width + index add)
(2)   45/       4 :                     mtrl		ds.l 1		; Material data (ROM or SDRAM)
(2)   46/       8 :                     ytb		ds.l 1		; $YYYYyyyy: Y-Top Y / y-Bottom Y
(2)   47/       C :                     xl		ds.l 1		;  Screen X-Left | X-Right  16-bit
(2)   48/      10 :                     src_xl		ds.l 1		; Texture X-Left | X-Right  16-bit
(2)   49/      14 :                     src_yl		ds.l 1		; Texture Y-Top  | Y-Bottom 16-bit
(2)   50/      18 :                     xl_dx		ds.l 1		; 0000.0000
(2)   51/      1C :                     xr_dx		ds.l 1		; 0000.0000
(2)   52/      20 :                     src_xl_dx	ds.l 1
(2)   53/      24 :                     src_xr_dx	ds.l 1
(2)   54/      28 :                     src_yl_dx	ds.l 1
(2)   55/      2C :                     src_yr_dx	ds.l 1
(2)   56/ 600109A : =$30                 		endstruct
(2)   57/ 600109A :                     
(2)   58/ 600109A :                     ; ** MORE strcts on system/shared.asm
(2)   59/ 600109A :                     
(2)   60/ 600109A :                     ; ------------------------------------------------
(2)   61/ 600109A :                     ; Polygon
(2)   62/       0 :                     plygn		struct
(2)   63/       0 :                     type		ds.l 1		; %MTww wwww aaaa aaaa | m-Solid/Tex t-Triangle
(2)   64/       4 :                     mtrl		ds.l 1		; Material data: Color or VRAM position (RAM_Mars_VramData)
(2)   65/       8 :                     points		ds.l 4*2	; X/Y positions
(2)   66/      28 :                     srcpnts		ds.w 4*2	; X/Y texture points 16-bit, UNUSED on solid color
(2)   67/      38 :                     ; len		ds.l 0
(2)   68/ 600109A : =$38                 		endstruct
(2)   69/ 600109A :                     
(2)   70/ 600109A :                     ; ====================================================================
(2)   71/ 600109A :                     ; --------------------------------------------------------
(2)   72/ 600109A :                     ; Init MARS Video
(2)   73/ 600109A :                     ;
(2)   74/ 600109A :                     ; Breaks:
(2)   75/ 600109A :                     ; r1-r4
(2)   76/ 600109A :                     ; --------------------------------------------------------
(2)   77/ 600109A :                     
(2)   78/ 600109A :                     		align 4
(2)   79/ 600109C :                     MarsVideo_Init:
(2)   80/ 600109C : 9144                		mov	#SET_MSCRLWDTH+SET_MSCRLSIZE,r1	; Set scroll-area settings
(2)   81/ 600109E : 9244                		mov	#SET_MSCRLHGHT+SET_MSCRLSIZE,r2
(2)   82/ 60010A0 : 221E                		mulu	r1,r2
(2)   83/ 60010A2 : 6013                		mov	r1,r0
(2)   84/ 60010A4 : C211                		mov	r0,@(marsGbl_Scrl_Wdth,gbr)
(2)   85/ 60010A6 : 6023                		mov	r2,r0
(2)   86/ 60010A8 : C212                		mov	r0,@(marsGbl_Scrl_Hght,gbr)
(2)   87/ 60010AA : 001A                		sts	macl,r0
(2)   88/ 60010AC : C210                		mov	r0,@(marsGbl_Scrl_Size,gbr)
(2)   89/ 60010AE : 903D                		mov	#$200,r0
(2)   90/ 60010B0 : C214                		mov	r0,@(marsGbl_Scrl_FbOut,gbr)
(2)   91/ 60010B2 : E000                		mov	#0,r0
(2)   92/ 60010B4 : C100                		mov.w	r0,@(marsGbl_ThisFrame,gbr)
(2)   93/ 60010B6 : C216                		mov	r0,@(marsGbl_Scrl_FbY,gbr)
(2)   94/ 60010B8 : C215                		mov	r0,@(marsGbl_Scrl_FbTL,gbr)
(2)   95/ 60010BA : 9038                		mov	#SET_3DFIELD_WDTH,r0
(2)   96/ 60010BC : C206                		mov	r0,@(marsGbl_3D_OutWidth,gbr)
(2)   97/ 60010BE : 9037                		mov	#SET_3DFIELD_HGHT,r0
(2)   98/ 60010C0 : C207                		mov	r0,@(marsGbl_3D_OutHeight,gbr)
(2)   99/ 60010C2 : 000B                		rts
(2)  100/ 60010C4 : 0009                		nop
(2)  101/ 60010C6 :                     		align 4
(2)  102/ 60010C8 :                     
(2)  103/ 60010C8 :                     ; ====================================================================
(2)  104/ 60010C8 :                     ; ----------------------------------------------------------------
(2)  105/ 60010C8 :                     ; Subroutines
(2)  106/ 60010C8 :                     ; ----------------------------------------------------------------
(2)  107/ 60010C8 :                     
(2)  108/ 60010C8 :                     ; --------------------------------------------------------
(2)  109/ 60010C8 :                     ; MarsVideo_FixTblShift
(2)  110/ 60010C8 :                     ;
(2)  111/ 60010C8 :                     ; Fix the affected $xxFF lines (solve that HW errata),
(2)  112/ 60010C8 :                     ; Call this BEFORE flipping the Framebuffer.
(2)  113/ 60010C8 :                     ;
(2)  114/ 60010C8 :                     ; Input:
(2)  115/ 60010C8 :                     ; r1 | Start line
(2)  116/ 60010C8 :                     ; r2 | Number of lines
(2)  117/ 60010C8 :                     ; r3 | Location for the fixed lines
(2)  118/ 60010C8 :                     ;
(2)  119/ 60010C8 :                     ; Breaks:
(2)  120/ 60010C8 :                     ; r7-r14
(2)  121/ 60010C8 :                     ; --------------------------------------------------------
(2)  122/ 60010C8 :                     
(2)  123/ 60010C8 :                     		align 4
(2)  124/ 60010C8 :                     MarsVideo_FixTblShift:
(2)  125/ 60010C8 : DE15                		mov	#_vdpreg,r14
(2)  126/ 60010CA : 84E1                		mov.b	@(bitmapmd,r14),r0		; Check if we are on indexed mode
(2)  127/ 60010CC : C903                		and	#%11,r0
(2)  128/ 60010CE : 8801                		cmp/eq	#1,r0
(2)  129/ 60010D0 : 8B23                		bf	.ptchset
(2)  130/ 60010D2 : C501                		mov.w	@(marsGbl_XShift,gbr),r0	; XShift is set? (EXTERNAL value)
(2)  131/ 60010D4 : C901                		and	#1,r0
(2)  132/ 60010D6 : 2008                		tst	r0,r0
(2)  133/ 60010D8 : 891F                		bt	.ptchset
(2)  134/ 60010DA :                     
(2)  135/ 60010DA : DE12                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  136/ 60010DC : 6CE3                		mov	r14,r12				; r12 - Framebuffer output for the patched pixel lines
(2)  137/ 60010DE : 3C3C                		add	r3,r12
(2)  138/ 60010E0 : 6013                		mov	r1,r0
(2)  139/ 60010E2 : 4008                		shll2	r0
(2)  140/ 60010E4 : 3E0C                		add	r0,r14
(2)  141/ 60010E6 : 6DE3                		mov	r14,r13				; r13 - Framebuffer lines to check
(2)  142/ 60010E8 : 6B23                		mov	r2,r11				; r11 - Lines to check
(2)  143/ 60010EA : E0FF                		mov	#-1,r0
(2)  144/ 60010EC : 6A0C                		extu.b	r0,r10				; r10 - AND byte to check ($FF)
(2)  145/ 60010EE : 690D                		extu.w	r0,r9				;  r9 - AND word limit ($FFFF)
(2)  146/ 60010F0 :                     .loop:
(2)  147/ 60010F0 : 60D1                		mov.w	@r13,r0
(2)  148/ 60010F2 : 2099                		and	r9,r0
(2)  149/ 60010F4 : 6703                		mov	r0,r7
(2)  150/ 60010F6 : 20A9                		and	r10,r0
(2)  151/ 60010F8 : 30A0                		cmp/eq	r10,r0
(2)  152/ 60010FA : 8B0B                		bf	.tblexit
(2)  153/ 60010FC : 4700                		shll	r7
(2)  154/ 60010FE : 37EC                		add	r14,r7
(2)  155/ 6001100 : 60C3                		mov	r12,r0
(2)  156/ 6001102 : 4001                		shlr	r0
(2)  157/ 6001104 : 2D01                		mov.w	r0,@r13
(2)  158/ 6001106 : 9314                		mov	#(320+4)/2,r3
(2)  159/ 6001108 :                     .copy:
(2)  160/ 6001108 : 6071                		mov.w	@r7,r0
(2)  161/ 600110A : 2C01                		mov.w	r0,@r12
(2)  162/ 600110C : 7702                		add	#2,r7
(2)  163/ 600110E : 4310                		dt	r3
(2)  164/ 6001110 : 8FFA                		bf/s	.copy
(2)  165/ 6001112 : 7C02                		add	#2,r12
(2)  166/ 6001114 :                     .tblexit:
(2)  167/ 6001114 : 4B10                		dt	r11
(2)  168/ 6001116 : 8FEB                		bf/s	.loop
(2)  169/ 6001118 : 7D02                		add	#2,r13
(2)  170/ 600111A :                     .ptchset:
(2)  171/ 600111A : 000B                		rts
(2)  172/ 600111C : 0009                		nop
(2)  173/ 600111E :                     		align 4
(2)  174/ 6001120 : 2000 4100 2400      		ltorg
          6001126 : 0000 0160 0100 
          600112C : 0200 0140 00E0 
          6001132 : 00A2             
(2)  175/ 6001134 :                     
(2)  176/ 6001134 :                     ; ====================================================================
(2)  177/ 6001134 :                     ; ----------------------------------------------------------------
(2)  178/ 6001134 :                     ; 2D scrolling-area section
(2)  179/ 6001134 :                     ; ----------------------------------------------------------------
(2)  180/ 6001134 :                     
(2)  181/ 6001134 :                     ; --------------------------------------------------------
(2)  182/ 6001134 :                     ; MarsVideo_ShowScrlBg
(2)  183/ 6001134 :                     ;
(2)  184/ 6001134 :                     ; Make a visible section of any scrolling area
(2)  185/ 6001134 :                     ; into the current framebuffer.
(2)  186/ 6001134 :                     ;
(2)  187/ 6001134 :                     ; Input:
(2)  188/ 6001134 :                     ; r1 | Top Y
(2)  189/ 6001134 :                     ; r2 | Bottom Y
(2)  190/ 6001134 :                     ;
(2)  191/ 6001134 :                     ; Breaks:
(2)  192/ 6001134 :                     ; r4-r14
(2)  193/ 6001134 :                     ;
(2)  194/ 6001134 :                     ; NOTE:
(2)  195/ 6001134 :                     ; After endstrcting all your screens call
(2)  196/ 6001134 :                     ; MarsVideo_FixTblShift before doing frameswap
(2)  197/ 6001134 :                     ; --------------------------------------------------------
(2)  198/ 6001134 :                     
(2)  199/ 6001134 :                     		align 4
(2)  200/ 6001134 :                     MarsVideo_ShowScrlBg:
(2)  201/ 6001134 : DE1C                		mov	#_framebuffer,r14		; r14 - Framebuffer BASE
(2)  202/ 6001136 : EB00                		mov	#0,r11				; r11 - line counter
(2)  203/ 6001138 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0	; r13 - Framebuffer pixeldata position
(2)  204/ 600113A : 6D03                		mov	r0,r13
(2)  205/ 600113C : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0	; r12 - Full size of screen-scroll
(2)  206/ 600113E : 6C03                		mov	r0,r12
(2)  207/ 6001140 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  208/ 6001142 : 6A03                		mov	r0,r10
(2)  209/ 6001144 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  210/ 6001146 : 6903                		mov	r0,r9
(2)  211/ 6001148 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  212/ 600114A : 6803                		mov	r0,r8
(2)  213/ 600114C : 3120                		cmp/eq	r2,r1
(2)  214/ 600114E : 8916                		bt	.bad_y
(2)  215/ 6001150 : 3123                		cmp/ge	r2,r1
(2)  216/ 6001152 : 8914                		bt	.bad_y
(2)  217/ 6001154 : 6613                		mov	r1,r6
(2)  218/ 6001156 : 6013                		mov	r1,r0
(2)  219/ 6001158 : 4000                		shll	r0
(2)  220/ 600115A : 3E0C                		add	r0,r14
(2)  221/ 600115C : 28AE                		mulu	r10,r8
(2)  222/ 600115E : 001A                		sts	macl,r0
(2)  223/ 6001160 : 390C                		add	r0,r9
(2)  224/ 6001162 :                     .ln_loop:
(2)  225/ 6001162 : 6893                		mov	r9,r8
(2)  226/ 6001164 : 38C3                		cmp/ge	r12,r8
(2)  227/ 6001166 : 8B00                		bf	.xl_r
(2)  228/ 6001168 : 38C8                		sub	r12,r8
(2)  229/ 600116A :                     .xl_r:
(2)  230/ 600116A : 6983                		mov	r8,r9
(2)  231/ 600116C : 39AC                		add	r10,r9			; Add Y
(2)  232/ 600116E : 38DC                		add	r13,r8			; Add Framebuffer position
(2)  233/ 6001170 : 4801                		shlr	r8			; Divide by 2, use Xshift for the missing bit
(2)  234/ 6001172 : 2E81                		mov.w	r8,@r14			; Send to FB's table
(2)  235/ 6001174 : 7E02                		add	#2,r14
(2)  236/ 6001176 : 7601                		add	#1,r6
(2)  237/ 6001178 : 3620                		cmp/eq	r2,r6
(2)  238/ 600117A : 8FF2                		bf/s	.ln_loop
(2)  239/ 600117C : 7B02                		add	#2,r11
(2)  240/ 600117E :                     .bad_y:
(2)  241/ 600117E : 000B                		rts
(2)  242/ 6001180 : 0009                		nop
(2)  243/ 6001182 :                     		align 4
(2)  244/ 6001184 :                     
(2)  245/ 6001184 :                     ; --------------------------------------------------------
(2)  246/ 6001184 :                     ; Call this AFTER after drawing to the scrolling area.
(2)  247/ 6001184 :                     ; --------------------------------------------------------
(2)  248/ 6001184 :                     
(2)  249/ 6001184 :                     		align 4
(2)  250/ 6001184 :                     marsScrl_CopyTopBot:
(2)  251/ 6001184 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  252/ 6001186 : 6103                		mov	r0,r1
(2)  253/ 6001188 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  254/ 600118A : 6303                		mov	r0,r3
(2)  255/ 600118C : D006                		mov	#_framebuffer,r0
(2)  256/ 600118E : 310C                		add	r0,r1
(2)  257/ 6001190 : 6213                		mov	r1,r2
(2)  258/ 6001192 : 323C                		add	r3,r2
(2)  259/ 6001194 : E350                		mov	#320/4,r3
(2)  260/ 6001196 : 0009                		nop
(2)  261/ 6001198 :                     .copy_top:
(2)  262/ 6001198 : 6016                		mov	@r1+,r0
(2)  263/ 600119A : 0009                		nop
(2)  264/ 600119C : 2202                		mov	r0,@r2
(2)  265/ 600119E : 7204                		add	#4,r2
(2)  266/ 60011A0 : 4310                		dt	r3
(2)  267/ 60011A2 : 8BF9                		bf	.copy_top
(2)  268/ 60011A4 : 000B                		rts
(2)  269/ 60011A6 : 0009                		nop
(2)  270/ 60011A8 :                     		align 4
(2)  271/ 60011A8 : 2400 0000           		ltorg
(2)  272/ 60011AC :                     
(2)  273/ 60011AC :                     ; ====================================================================
(2)  274/ 60011AC :                     ; ----------------------------------------------------------------
(2)  275/ 60011AC :                     ; Super sprites
(2)  276/ 60011AC :                     ; ----------------------------------------------------------------
(2)  277/ 60011AC :                     
(2)  278/ 60011AC :                     ; --------------------------------------------------------
(2)  279/ 60011AC :                     ; MarsVideo_SuperSpr_Make
(2)  280/ 60011AC :                     ; --------------------------------------------------------
(2)  281/ 60011AC :                     
(2)  282/ 60011AC :                     		align 4
(2)  283/ 60011AC :                     MarsVideo_SuperSpr_Make:
(2)  284/ 60011AC : 4F22                		sts	pr,@-r15
(2)  285/ 60011AE : DE2C                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r14
(2)  286/ 60011B0 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  287/ 60011B2 : 6D03                		mov	r0,r13
(2)  288/ 60011B4 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  289/ 60011B6 : 6C03                		mov	r0,r12
(2)  290/ 60011B8 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  291/ 60011BA : 6B03                		mov	r0,r11
(2)  292/ 60011BC : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  293/ 60011BE : 6A03                		mov	r0,r10
(2)  294/ 60011C0 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  295/ 60011C2 : 6903                		mov	r0,r9
(2)  296/ 60011C4 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  297/ 60011C6 : 6203                		mov	r0,r2
(2)  298/ 60011C8 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  299/ 60011CA : 984D                		mov	#Dreq_Buff2,r8				; ** DREQ READ **
(2)  300/ 60011CC : 380C                		add	r0,r8
(2)  301/ 60011CE : 904C                		mov	#sspr_len*(MAX_MARSSPR-1),r0	; <-- LAZY REVERSE ORDER
(2)  302/ 60011D0 : 380C                		add	r0,r8					; <--
(2)  303/ 60011D2 :                     	; ----------------------------------------
(2)  304/ 60011D2 :                     	; r14 - Sprite draw list
(2)  305/ 60011D2 :                     	; r13 - Scroll size W*H
(2)  306/ 60011D2 :                     	; r12 - Scroll height
(2)  307/ 60011D2 :                     	; r11 - Scroll width
(2)  308/ 60011D2 :                     	; r10 - Scroll TL-pos read *
(2)  309/ 60011D2 :                     	;  r9 - Scroll Y-pos read *
(2)  310/ 60011D2 :                     	;  r8 - Current SuperSprite
(2)  311/ 60011D2 : E720                		mov	#MAX_MARSSPR,r7
(2)  312/ 60011D4 :                     .next_sspr:
(2)  313/ 60011D4 : 8480                		mov.b	@(sspr_flags,r8),r0
(2)  314/ 60011D6 : C880                		tst	#$80,r0
(2)  315/ 60011D8 : 893A                		bt	.off_sspr
(2)  316/ 60011DA : 660C                		extu.b	r0,r6
(2)  317/ 60011DC : 5083                		mov	@(sspr_vram,r8),r0
(2)  318/ 60011DE : 400A                		lds	r0,mach
(2)  319/ 60011E0 : 8583                		mov.w	@(sspr_indx,r8),r0
(2)  320/ 60011E2 : 600C                		extu.b	r0,r0
(2)  321/ 60011E4 : 4628                		shll16	r6
(2)  322/ 60011E6 : 260B                		or	r0,r6			; r6 - $000f00ii: f-Flags i-Index
(2)  323/ 60011E8 : 8582                		mov.w	@(sspr_size,r8),r0
(2)  324/ 60011EA : 650C                		extu.b	r0,r5			; Y size
(2)  325/ 60011EC : 4019                		shlr8	r0
(2)  326/ 60011EE : 640C                		extu.b	r0,r4			; X size
(2)  327/ 60011F0 : 8584                		mov.w	@(sspr_x_pos,r8),r0
(2)  328/ 60011F2 : 620F                		exts.w	r0,r2
(2)  329/ 60011F4 : 8585                		mov.w	@(sspr_y_pos,r8),r0
(2)  330/ 60011F6 : 630F                		exts.w	r0,r3
(2)  331/ 60011F8 : 7401                		add	#1,r4
(2)  332/ 60011FA : 7501                		add	#1,r5
(2)  333/ 60011FC : 4408                		shll2	r4			; Expand sizes to 8pixels(cells)
(2)  334/ 60011FE : 4508                		shll2	r5
(2)  335/ 6001200 : 4400                		shll	r4
(2)  336/ 6001202 : 4500                		shll	r5
(2)  337/ 6001204 : 6023                		mov	r2,r0			; Offscreen checks
(2)  338/ 6001206 : 304C                		add	r4,r0
(2)  339/ 6001208 : 4015                		cmp/pl	r0
(2)  340/ 600120A : 8B21                		bf	.off_sspr
(2)  341/ 600120C : 6033                		mov	r3,r0
(2)  342/ 600120E : 305C                		add	r5,r0
(2)  343/ 6001210 : 4015                		cmp/pl	r0
(2)  344/ 6001212 : 8B1D                		bf	.off_sspr
(2)  345/ 6001214 : E054                		mov	#SET_MSCRLWDTH>>2,r0
(2)  346/ 6001216 : 4008                		shll2	r0
(2)  347/ 6001218 : 3203                		cmp/ge	r0,r2
(2)  348/ 600121A : 8919                		bt	.off_sspr
(2)  349/ 600121C : E03C                		mov	#SET_MSCRLHGHT>>2,r0
(2)  350/ 600121E : 4008                		shll2	r0
(2)  351/ 6001220 : 3303                		cmp/ge	r0,r3
(2)  352/ 6001222 : 8915                		bt	.off_sspr
(2)  353/ 6001224 : 8581                		mov.w	@(sspr_frame,r8),r0
(2)  354/ 6001226 : 254F                		muls	r4,r5
(2)  355/ 6001228 : 011A                		sts	macl,r1
(2)  356/ 600122A : 210F                		muls	r0,r1
(2)  357/ 600122C : 001A                		sts	macl,r0
(2)  358/ 600122E : 010A                		sts	mach,r1
(2)  359/ 6001230 : 310C                		add	r0,r1
(2)  360/ 6001232 : E002                		mov	#CS1>>24,r0
(2)  361/ 6001234 : 4028                		shll16	r0
(2)  362/ 6001236 : 4018                		shll8	r0
(2)  363/ 6001238 : 3103                		cmp/ge	r0,r1
(2)  364/ 600123A : 8901                		bt	.from_rom
(2)  365/ 600123C : D009                		mov	#RAM_Mars_VramData,r0
(2)  366/ 600123E : 310C                		add	r0,r1
(2)  367/ 6001240 :                     .from_rom:
(2)  368/ 6001240 :                     	; r1 | Graphics data *
(2)  369/ 6001240 :                     	; r2 | Xpos *
(2)  370/ 6001240 :                     	; r3 | Ypos *
(2)  371/ 6001240 :                     	; r4 | Xsize *
(2)  372/ 6001240 :                     	; r5 | Ysize *
(2)  373/ 6001240 :                     	; r6 | Flags + Pixel increment *
(2)  374/ 6001240 : 7E10                		add	#$10,r14
(2)  375/ 6001242 : 60E3                		mov	r14,r0
(2)  376/ 6001244 : 2066                		mov	r6,@-r0
(2)  377/ 6001246 : 2055                		mov.w	r5,@-r0
(2)  378/ 6001248 : 2045                		mov.w	r4,@-r0
(2)  379/ 600124A : 2035                		mov.w	r3,@-r0
(2)  380/ 600124C : 2025                		mov.w	r2,@-r0
(2)  381/ 600124E : 2016                		mov	r1,@-r0
(2)  382/ 6001250 :                     .off_sspr:
(2)  383/ 6001250 : E010                		mov	#sspr_len,r0
(2)  384/ 6001252 : 4710                		dt	r7
(2)  385/ 6001254 : 8FBE                		bf/s	.next_sspr
(2)  386/ 6001256 : 3808                		sub	r0,r8			; <-- LAZY REVERSE ORDER
(2)  387/ 6001258 :                     .exit_sspr:
(2)  388/ 6001258 : 4F26                		lds	@r15+,pr
(2)  389/ 600125A : 000B                		rts
(2)  390/ 600125C : 0009                		nop
(2)  391/ 600125E :                     		align 4
(2)  392/ 6001260 : C000 0000 0600      		ltorg
          6001266 : FAE0 0620 01F0    
(2)  393/ 600126C :                     
(2)  394/ 600126C :                     ; --------------------------------------------------------
(2)  395/ 600126C :                     ; MarsVideo_SuperSpr_Draw
(2)  396/ 600126C :                     ; --------------------------------------------------------
(2)  397/ 600126C :                     
(2)  398/ 600126C :                     		align 4
(2)  399/ 600126C :                     MarsVideo_SuperSpr_Draw:
(2)  400/ 600126C : 4F22                		sts	pr,@-r15
(2)  401/ 600126E : DE65                		mov	#_overwrite,r14			; <--
(2)  402/ 6001270 : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  403/ 6001272 : 6D03                		mov	r0,r13
(2)  404/ 6001274 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  405/ 6001276 : 6C03                		mov	r0,r12
(2)  406/ 6001278 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  407/ 600127A : 6B03                		mov	r0,r11
(2)  408/ 600127C : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  409/ 600127E : 6A03                		mov	r0,r10
(2)  410/ 6001280 : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  411/ 6001282 : 6903                		mov	r0,r9
(2)  412/ 6001284 : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  413/ 6001286 : 6803                		mov	r0,r8
(2)  414/ 6001288 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  415/ 600128A : 3E8C                		add	r8,r14
(2)  416/ 600128C : D85E                		mov	#$C0000000|RAM_Mars_SVdpSprInfo,r8
(2)  417/ 600128E : E720                		mov	#MAX_MARSSPR,r7
(2)  418/ 6001290 :                     .next_piece:
(2)  419/ 6001290 : E000                		mov	#0,r0
(2)  420/ 6001292 : 6182                		mov	@r8,r1
(2)  421/ 6001294 : 2802                		mov	r0,@r8
(2)  422/ 6001296 : 2118                		tst	r1,r1
(2)  423/ 6001298 : 8907                		bt	.no_slot
(2)  424/ 600129A : 6083                		mov	r8,r0
(2)  425/ 600129C : 7004                		add	#4,r0
(2)  426/ 600129E : 6205                		mov.w	@r0+,r2
(2)  427/ 60012A0 : 6305                		mov.w	@r0+,r3
(2)  428/ 60012A2 : 6405                		mov.w	@r0+,r4
(2)  429/ 60012A4 : 6505                		mov.w	@r0+,r5
(2)  430/ 60012A6 : B007                		bsr	scrlDrw_SSprDraw
(2)  431/ 60012A8 : 6606                		mov	@r0+,r6
(2)  432/ 60012AA :                     .no_slot:
(2)  433/ 60012AA : 4710                		dt	r7
(2)  434/ 60012AC : 8FF0                		bf/s	.next_piece
(2)  435/ 60012AE : 7810                		add	#$10,r8
(2)  436/ 60012B0 : 4F26                		lds	@r15+,pr
(2)  437/ 60012B2 : 000B                		rts
(2)  438/ 60012B4 : 0009                		nop
(2)  439/ 60012B6 :                     		align 4
(2)  440/ 60012B8 :                     
(2)  441/ 60012B8 :                     ; 		mov	#_DMASOURCE1,r12
(2)  442/ 60012B8 :                     ; 		mov	#%0101001011100000,r0
(2)  443/ 60012B8 :                     ; 		mov	r0,@($0C,r12)
(2)  444/ 60012B8 :                     ; 		mov	#_overwrite+$200,r0
(2)  445/ 60012B8 :                     ; 		mov	r0,@($04,r12)
(2)  446/ 60012B8 :                     ; 		mov	#CS3,r0
(2)  447/ 60012B8 :                     ; 		mov	r0,@r12
(2)  448/ 60012B8 :                     ; 		mov	#320*96,r0
(2)  449/ 60012B8 :                     ; 		mov	r0,@($08,r12)
(2)  450/ 60012B8 :                     ; 		mov	#%0101001011100000|1,r0
(2)  451/ 60012B8 :                     ; 		mov	r0,@($0C,r12)
(2)  452/ 60012B8 :                     ; .wait_dma:	mov	@($C,r12),r0		; Still on DMA?
(2)  453/ 60012B8 :                     ; 		tst	#%10,r0
(2)  454/ 60012B8 :                     ; 		bt	.wait_dma
(2)  455/ 60012B8 :                     ; 		mov	#%0101001011100000,r0
(2)  456/ 60012B8 :                     ; 		mov	r0,@($C,r12)
(2)  457/ 60012B8 :                     
(2)  458/ 60012B8 :                     ; --------------------------------------------------------
(2)  459/ 60012B8 :                     ; scrlDrw_SSprDraw
(2)  460/ 60012B8 :                     ;
(2)  461/ 60012B8 :                     ; Inputs:
(2)  462/ 60012B8 :                     ; r1 | Graphics data *
(2)  463/ 60012B8 :                     ; r2 | Xpos *
(2)  464/ 60012B8 :                     ; r3 | Ypos *
(2)  465/ 60012B8 :                     ; r4 | Xsize *
(2)  466/ 60012B8 :                     ; r5 | Ysize *
(2)  467/ 60012B8 :                     ; r6 | Flags + Pixel increment *
(2)  468/ 60012B8 :                     ;
(2)  469/ 60012B8 :                     ; In Loop:
(2)  470/ 60012B8 :                     ; r14 - Framebuffer output
(2)  471/ 60012B8 :                     ; r13 - Scroll size W*H
(2)  472/ 60012B8 :                     ; r12 - Scroll height
(2)  473/ 60012B8 :                     ; r11 - Scroll width
(2)  474/ 60012B8 :                     ; r10 - Scroll TL-pos read
(2)  475/ 60012B8 :                     ;  r9 - Scroll Y-pos read
(2)  476/ 60012B8 :                     ;
(2)  477/ 60012B8 :                     ; Breaks:
(2)  478/ 60012B8 :                     ; r1-r6
(2)  479/ 60012B8 :                     ; --------------------------------------------------------
(2)  480/ 60012B8 :                     
(2)  481/ 60012B8 :                     		align 4
(2)  482/ 60012B8 :                     scrlDrw_SSprDraw:
(2)  483/ 60012B8 : 2F76                		mov	r7,@-r15
(2)  484/ 60012BA : 2F86                		mov	r8,@-r15
(2)  485/ 60012BC : 2F96                		mov	r9,@-r15
(2)  486/ 60012BE : 2FA6                		mov	r10,@-r15
(2)  487/ 60012C0 : 2FC6                		mov	r12,@-r15
(2)  488/ 60012C2 :                     	; Y limits
(2)  489/ 60012C2 : 6033                		mov	r3,r0
(2)  490/ 60012C4 : 4011                .y_low:		cmp/pz	r0
(2)  491/ 60012C6 : 8900                		bt	.y_mid
(2)  492/ 60012C8 : E000                		mov	#0,r0
(2)  493/ 60012CA : 30C3                .y_mid:		cmp/ge	r12,r0
(2)  494/ 60012CC : 8B01                		bf	.y_ok
(2)  495/ 60012CE : E03C                		mov	#SET_MSCRLHGHT>>2,r0	; 240
(2)  496/ 60012D0 : 4008                		shll2	r0
(2)  497/ 60012D2 :                     .y_ok:
(2)  498/ 60012D2 : 309C                		add	r9,r0
(2)  499/ 60012D4 : 20BF                		muls	r11,r0			; macl - Y pos
(2)  500/ 60012D6 :                     	; No X limits
(2)  501/ 60012D6 : 6C23                		mov	r2,r12			; X-pos
(2)  502/ 60012D8 : 3CAC                		add	r10,r12
(2)  503/ 60012DA : 001A                		sts	macl,r0
(2)  504/ 60012DC : 3C0C                		add	r0,r12
(2)  505/ 60012DE : 3CD3                .xy_xwrap:	cmp/ge	r13,r12
(2)  506/ 60012E0 : 8B01                		bf	.xy_flip
(2)  507/ 60012E2 : AFFC                		bra	.xy_xwrap
(2)  508/ 60012E4 : 3CD8                		sub	r13,r12
(2)  509/ 60012E6 :                     .xy_flip:
(2)  510/ 60012E6 : E0FC                		mov	#-4,r0
(2)  511/ 60012E8 : 2C09                		and	r0,r12
(2)  512/ 60012EA :                     	; ---------------------------------------
(2)  513/ 60012EA : 6069                		swap	r6,r0			; Y flip? start
(2)  514/ 60012EC : C802                		tst	#%10,r0
(2)  515/ 60012EE : 8903                		bt	.y_flip
(2)  516/ 60012F0 : 254F                		muls	r4,r5
(2)  517/ 60012F2 : 001A                		sts	macl,r0
(2)  518/ 60012F4 : 310C                		add	r0,r1			; Flip Y src
(2)  519/ 60012F6 : 3148                		sub	r4,r1
(2)  520/ 60012F8 :                     .y_flip:
(2)  521/ 60012F8 : E804                		mov	#4,r8
(2)  522/ 60012FA : 6069                		swap	r6,r0			; X flip?
(2)  523/ 60012FC : C801                		tst	#%01,r0
(2)  524/ 60012FE : 8903                		bt	.x_flip
(2)  525/ 6001300 : 688B                		neg	r8,r8
(2)  526/ 6001302 : 6043                		mov	r4,r0
(2)  527/ 6001304 : 70FC                		add	#-4,r0
(2)  528/ 6001306 : 310C                		add	r0,r1
(2)  529/ 6001308 :                     .x_flip:
(2)  530/ 6001308 : 4311                		cmp/pz	r3
(2)  531/ 600130A : 8909                		bt	.y_top
(2)  532/ 600130C : 353C                		add	r3,r5
(2)  533/ 600130E : 234F                		muls	r4,r3
(2)  534/ 6001310 : 6069                		swap	r6,r0
(2)  535/ 6001312 : C802                		tst	#%10,r0
(2)  536/ 6001314 : 8902                		bt	.y_rflip
(2)  537/ 6001316 : 001A                		sts	macl,r0
(2)  538/ 6001318 : A001                		bra	.y_rflipc
(2)  539/ 600131A : 600B                		neg	r0,r0
(2)  540/ 600131C :                     .y_rflip:
(2)  541/ 600131C : 001A                		sts	macl,r0
(2)  542/ 600131E :                     .y_rflipc:
(2)  543/ 600131E : 3108                		sub	r0,r1
(2)  544/ 6001320 :                     .y_top:
(2)  545/ 6001320 : 6033                		mov	r3,r0
(2)  546/ 6001322 : 305C                		add	r5,r0
(2)  547/ 6001324 : E93C                		mov	#SET_MSCRLHGHT>>2,r9	; 240
(2)  548/ 6001326 : 4908                		shll2	r9
(2)  549/ 6001328 : 3093                		cmp/ge	r9,r0
(2)  550/ 600132A : 8B01                		bf	.y_bot
(2)  551/ 600132C : 3098                		sub	r9,r0
(2)  552/ 600132E : 3508                		sub	r0,r5
(2)  553/ 6001330 :                     .y_bot:
(2)  554/ 6001330 : 0009                		nop
(2)  555/ 6001332 : 6923                		mov	r2,r9		; r9 - X size
(2)  556/ 6001334 : 394C                		add	r4,r9
(2)  557/ 6001336 : 6069                		swap	r6,r0		; Y flip? start
(2)  558/ 6001338 : C802                		tst	#%10,r0
(2)  559/ 600133A : 8900                		bt	.y_flipr
(2)  560/ 600133C : 644B                		neg	r4,r4
(2)  561/ 600133E :                     .y_flipr:
(2)  562/ 600133E : E0FC                		mov	#-4,r0
(2)  563/ 6001340 : 2109                		and	r0,r1
(2)  564/ 6001342 :                     
(2)  565/ 6001342 :                     	; ---------------------------------------
(2)  566/ 6001342 :                     	; LOOP
(2)  567/ 6001342 :                     	; ---------------------------------------
(2)  568/ 6001342 :                     	; r1 - Frame data line pos
(2)  569/ 6001342 :                     	; r2 - X pos read
(2)  570/ 6001342 :                     	; r3 -
(2)  571/ 6001342 :                     	; r4 - Y increment f/b
(2)  572/ 6001342 :                     	; r5 - Y lines / X current beam
(2)  573/ 6001342 :                     	; r6 - flags (X flip only) | pixel increment
(2)  574/ 6001342 :                     	; r7 - current TL pos
(2)  575/ 6001342 :                     	; r8 - X increment f/b
(2)  576/ 6001342 :                     	; r9 - X end
(2)  577/ 6001342 :                     	; r10 -
(2)  578/ 6001342 :                     	; r11
(2)  579/ 6001342 :                     	; r12
(2)  580/ 6001342 :                     .y_loop:
(2)  581/ 6001342 : 3CD3                		cmp/ge	r13,r12
(2)  582/ 6001344 : 8B00                		bf	.tl_snap
(2)  583/ 6001346 : 3CD8                		sub	r13,r12
(2)  584/ 6001348 :                     .tl_snap:
(2)  585/ 6001348 : 2F16                		mov	r1,@-r15
(2)  586/ 600134A : 2F26                		mov	r2,@-r15
(2)  587/ 600134C : 2F46                		mov	r4,@-r15
(2)  588/ 600134E : 2F56                		mov	r5,@-r15
(2)  589/ 6001350 : 2FC6                		mov	r12,@-r15
(2)  590/ 6001352 : E551                		mov	#(320+4)>>2,r5
(2)  591/ 6001354 : 4508                		shll2	r5
(2)  592/ 6001356 :                     
(2)  593/ 6001356 :                     ; ---------------------------------------
(2)  594/ 6001356 :                     
(2)  595/ 6001356 :                     .x_loop:
(2)  596/ 6001356 : 3CD3                		cmp/ge	r13,r12
(2)  597/ 6001358 : 8B00                		bf	.tl_x
(2)  598/ 600135A : 3CD8                		sub	r13,r12
(2)  599/ 600135C :                     .tl_x:
(2)  600/ 600135C : 6012                		mov	@r1,r0
(2)  601/ 600135E : 636C                		extu.b	r6,r3
(2)  602/ 6001360 : C8FF                		tst	#$FF,r0
(2)  603/ 6001362 : 8900                		bt	.z_0
(2)  604/ 6001364 : 303C                		add	r3,r0
(2)  605/ 6001366 : 6008                .z_0:		swap.b	r0,r0
(2)  606/ 6001368 : C8FF                		tst	#$FF,r0
(2)  607/ 600136A : 8900                		bt	.z_1
(2)  608/ 600136C : 303C                		add	r3,r0
(2)  609/ 600136E : 6009                .z_1:		swap.w	r0,r0
(2)  610/ 6001370 : C8FF                		tst	#$FF,r0
(2)  611/ 6001372 : 8900                		bt	.z_2
(2)  612/ 6001374 : 303C                		add	r3,r0
(2)  613/ 6001376 : 6008                .z_2:		swap.b	r0,r0
(2)  614/ 6001378 : C8FF                		tst	#$FF,r0
(2)  615/ 600137A : 8900                		bt	.z_3
(2)  616/ 600137C : 303C                		add	r3,r0
(2)  617/ 600137E : 6303                .z_3:		mov	r0,r3
(2)  618/ 6001380 : 6069                		swap	r6,r0
(2)  619/ 6001382 : C801                		tst	#%01,r0
(2)  620/ 6001384 : 8B02                		bf	.x_mswap	; <--
(2)  621/ 6001386 : 6338                		swap.b	r3,r3
(2)  622/ 6001388 : 6339                		swap.w	r3,r3
(2)  623/ 600138A : 6338                		swap.b	r3,r3
(2)  624/ 600138C :                     .x_mswap:
(2)  625/ 600138C : 6433                		mov	r3,r4
(2)  626/ 600138E :                     
(2)  627/ 600138E :                     	; r3 - left copy
(2)  628/ 600138E :                     	; r4 - right copy
(2)  629/ 600138E :                     	; 	1234 ----
(2)  630/ 600138E :                     	; 	-123 4---
(2)  631/ 600138E :                     	; 	--12 34--
(2)  632/ 600138E :                     	; 	---1 234-
(2)  633/ 600138E : 6023                		mov	r2,r0
(2)  634/ 6001390 : 30AC                		add	r10,r0
(2)  635/ 6001392 : C903                		and	#%11,r0
(2)  636/ 6001394 : 2008                		tst	r0,r0
(2)  637/ 6001396 : 8917                		bt	.wrt_0
(2)  638/ 6001398 : 8802                		cmp/eq	#2,r0
(2)  639/ 600139A : 8903                		bt	.half_2
(2)  640/ 600139C : 8803                		cmp/eq	#3,r0
(2)  641/ 600139E : 8903                		bt	.half_3
(2)  642/ 60013A0 : A003                		bra	.half_1
(2)  643/ 60013A2 : 4428                		shll16	r4
(2)  644/ 60013A4 :                     .half_2:
(2)  645/ 60013A4 : 4428                		shll16	r4
(2)  646/ 60013A6 : A002                		bra	.drw_half
(2)  647/ 60013A8 :                     .half_3:
(2)  648/ 60013A8 : 4329                		shlr16	r3
(2)  649/ 60013AA : 4319                .half_1:	shlr8	r3
(2)  650/ 60013AC : 4418                		shll8	r4
(2)  651/ 60013AE :                     .drw_half:
(2)  652/ 60013AE : 6023                		mov	r2,r0
(2)  653/ 60013B0 : 3053                		cmp/ge	r5,r0
(2)  654/ 60013B2 : 8909                		bt	.wrt_0
(2)  655/ 60013B4 : 7008                		add	#4+4,r0
(2)  656/ 60013B6 : 4011                		cmp/pz	r0
(2)  657/ 60013B8 : 8B06                		bf	.wrt_0
(2)  658/ 60013BA : 60C3                		mov	r12,r0		; Right half
(2)  659/ 60013BC : 7004                		add	#4,r0
(2)  660/ 60013BE : 30D3                		cmp/ge	r13,r0
(2)  661/ 60013C0 : 8B00                		bf	.tl_h
(2)  662/ 60013C2 : 30D8                		sub	r13,r0
(2)  663/ 60013C4 : 30EC                .tl_h:		add	r14,r0
(2)  664/ 60013C6 : 2042                		mov	r4,@r0
(2)  665/ 60013C8 :                     .wrt_0:
(2)  666/ 60013C8 : 6023                		mov	r2,r0
(2)  667/ 60013CA : 3053                		cmp/ge	r5,r0
(2)  668/ 60013CC : 890A                		bt	.x_giveup
(2)  669/ 60013CE : 7004                		add	#4,r0
(2)  670/ 60013D0 : 4011                		cmp/pz	r0
(2)  671/ 60013D2 : 8B02                		bf	.xr_left
(2)  672/ 60013D4 : 60C3                		mov	r12,r0
(2)  673/ 60013D6 : 30EC                		add	r14,r0
(2)  674/ 60013D8 : 2032                		mov	r3,@r0
(2)  675/ 60013DA :                     .xr_left:
(2)  676/ 60013DA : 318C                		add	r8,r1
(2)  677/ 60013DC : 7204                		add	#4,r2
(2)  678/ 60013DE : 3293                		cmp/ge	r9,r2
(2)  679/ 60013E0 : 8FB9                		bf/s	.x_loop
(2)  680/ 60013E2 : 7C04                		add	#4,r12
(2)  681/ 60013E4 :                     .x_giveup:
(2)  682/ 60013E4 :                     
(2)  683/ 60013E4 :                     ; ---------------------------------------
(2)  684/ 60013E4 : 6CF6                		mov	@r15+,r12
(2)  685/ 60013E6 : 65F6                		mov	@r15+,r5
(2)  686/ 60013E8 : 64F6                		mov	@r15+,r4
(2)  687/ 60013EA : 62F6                		mov	@r15+,r2
(2)  688/ 60013EC : 61F6                		mov	@r15+,r1
(2)  689/ 60013EE : 314C                		add	r4,r1		; Next line FOWARD
(2)  690/ 60013F0 : 4510                		dt	r5
(2)  691/ 60013F2 : 8FA6                		bf/s	.y_loop
(2)  692/ 60013F4 : 3CBC                		add	r11,r12
(2)  693/ 60013F6 :                     .y_last:
(2)  694/ 60013F6 :                     
(2)  695/ 60013F6 :                     .y_end:
(2)  696/ 60013F6 : 6CF6                		mov	@r15+,r12
(2)  697/ 60013F8 : 6AF6                		mov	@r15+,r10
(2)  698/ 60013FA : 69F6                		mov	@r15+,r9
(2)  699/ 60013FC : 68F6                		mov	@r15+,r8
(2)  700/ 60013FE : 67F6                		mov	@r15+,r7
(2)  701/ 6001400 : 000B                		rts
(2)  702/ 6001402 : 0009                		nop
(2)  703/ 6001404 :                     		align 4
(2)  704/ 6001404 : 2402 0000 C000      		ltorg
          600140A : 0000             
(2)  705/ 600140C :                     
(2)  706/ 600140C :                     ; 		align 4
(2)  707/ 600140C :                     ; 		ltorg
(2)  708/ 600140C :                     
(2)  709/ 600140C :                     ; MarsVideo_DmaDraw:
(2)  710/ 600140C :                     ; 		mov	#_DMASOURCE1,r4
(2)  711/ 600140C :                     ; 		mov	#%0101001011100000,r0
(2)  712/ 600140C :                     ; 		mov	r0,@($0C,r4)
(2)  713/ 600140C :                     ; 		mov	r1,r0
(2)  714/ 600140C :                     ; 		mov	r0,@r4
(2)  715/ 600140C :                     ; 		mov	r2,r0			; <-- point fbdata here
(2)  716/ 600140C :                     ; 		mov	r0,@($04,r4)
(2)  717/ 600140C :                     ; 		mov	r3,r0
(2)  718/ 600140C :                     ; 		mov	r0,@($08,r4)
(2)  719/ 600140C :                     ; 		mov	#%0101001011100000|1,r0
(2)  720/ 600140C :                     ; 		mov	r0,@($0C,r4)
(2)  721/ 600140C :                     ; .wait_dma:	mov	@($C,r4),r0		; Still on DMA?
(2)  722/ 600140C :                     ; 		tst	#%10,r0
(2)  723/ 600140C :                     ; 		bt	.wait_dma
(2)  724/ 600140C :                     ; 		mov	#%0101001011100000,r0
(2)  725/ 600140C :                     ; 		mov	r0,@($C,r4)
(2)  726/ 600140C :                     ; 		rts
(2)  727/ 600140C :                     ; 		nop
(2)  728/ 600140C :                     ; 		align 4
(2)  729/ 600140C :                     ; 		ltorg
(2)  730/ 600140C :                     
(2)  731/ 600140C :                     ; --------------------------------------------------------
(2)  732/ 600140C :                     ; MarsVideo_MkFillBlk
(2)  733/ 600140C :                     ;
(2)  734/ 600140C :                     ; Generate Block-Refill blocks to be processed on
(2)  735/ 600140C :                     ; the next frame
(2)  736/ 600140C :                     ;
(2)  737/ 600140C :                     ; 16x16 blocks.
(2)  738/ 600140C :                     ; --------------------------------------------------------
(2)  739/ 600140C :                     
(2)  740/ 600140C :                     		align 4
(2)  741/ 600140C :                     MarsVideo_MkFillBlk:
(2)  742/ 600140C : 4F22                		sts	pr,@-r15
(2)  743/ 600140E : DE3F                		mov	#$C0000000|RAM_Mars_ScrlRefill,r14
(2)  744/ 6001410 :                     
(2)  745/ 6001410 :                     	; First pass: Redraw bits from DREQ-RAM
(2)  746/ 6001410 : 62E3                		mov	r14,r2
(2)  747/ 6001412 : 917D                		mov	#Dreq_Buff1,r1			; ** DREQ READ **
(2)  748/ 6001414 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  749/ 6001416 : 310C                		add	r0,r1
(2)  750/ 6001418 : 947B                		mov	#(512/16)*(256/16),r4
(2)  751/ 600141A : E303                		mov	#%11,r3			; Write flag
(2)  752/ 600141C :                     .copy_bit:
(2)  753/ 600141C : 6015                		mov.w	@r1+,r0
(2)  754/ 600141E : 600F                		exts.w	r0,r0
(2)  755/ 6001420 : 4011                		cmp/pz	r0
(2)  756/ 6001422 : 8902                		bt	.no_flip
(2)  757/ 6001424 : 6021                		mov.w	@r2,r0
(2)  758/ 6001426 : 203B                		or	r3,r0
(2)  759/ 6001428 : 2201                		mov.w	r0,@r2
(2)  760/ 600142A :                     .no_flip:
(2)  761/ 600142A : 4410                		dt	r4
(2)  762/ 600142C : 8FF6                		bf/s	.copy_bit
(2)  763/ 600142E : 7202                		add	#2,r2
(2)  764/ 6001430 :                     
(2)  765/ 6001430 :                     	; Last pass: SuperSprites
(2)  766/ 6001430 :                     	; r14 is gone here
(2)  767/ 6001430 : 9D70                		mov	#Dreq_Buff2,r13			; ** DREQ READ **
(2)  768/ 6001432 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  769/ 6001434 : 3D0C                		add	r0,r13
(2)  770/ 6001436 : EC20                		mov	#MAX_MARSSPR,r12
(2)  771/ 6001438 :                     .next_sspr:
(2)  772/ 6001438 : 84D0                		mov.b	@(sspr_flags,r13),r0
(2)  773/ 600143A : C880                		tst	#$80,r0				; Sprite enabled?
(2)  774/ 600143C :                     ; 		bt	.exit_sspr			; end of list
(2)  775/ 600143C : 895E                		bt	.off_sspr			; sprite is off, keep checking
(2)  776/ 600143E : 0009                		nop
(2)  777/ 6001440 : 85D2                		mov.w	@(sspr_size,r13),r0
(2)  778/ 6001442 : 650C                		extu.b	r0,r5				; Y size
(2)  779/ 6001444 : 4019                		shlr8	r0
(2)  780/ 6001446 : 640C                		extu.b	r0,r4				; X size
(2)  781/ 6001448 : 4515                		cmp/pl	r5				; Y size <= 0?
(2)  782/ 600144A : 8B5B                		bf	.exit_sspr
(2)  783/ 600144C : 4415                		cmp/pl	r4				; X size <= 0?
(2)  784/ 600144E : 8B59                		bf	.exit_sspr
(2)  785/ 6001450 : 85D4                		mov.w	@(sspr_x_pos,r13),r0
(2)  786/ 6001452 : 620F                		exts.w	r0,r2
(2)  787/ 6001454 : 85D5                		mov.w	@(sspr_y_pos,r13),r0
(2)  788/ 6001456 : 630F                		exts.w	r0,r3
(2)  789/ 6001458 :                     
(2)  790/ 6001458 :                     	; off-screen checks
(2)  791/ 6001458 :                     ; 		mov	r4,r0
(2)  792/ 6001458 :                     ; 		shll2	r0
(2)  793/ 6001458 :                     ; 		shll2	r0
(2)  794/ 6001458 :                     ; 		add	r2,r0
(2)  795/ 6001458 :                     ; 		cmp/pz	r0
(2)  796/ 6001458 :                     ; 		bf	.exit_sspr
(2)  797/ 6001458 :                     ; 		mov	#SET_MSCRLWDTH>>2,r0
(2)  798/ 6001458 :                     ; 		shll2	r0
(2)  799/ 6001458 :                     ; 		cmp/ge	r0,r2
(2)  800/ 6001458 :                     ; 		bt	.exit_sspr
(2)  801/ 6001458 :                     ; 		mov	r5,r0
(2)  802/ 6001458 :                     ; 		shll2	r0
(2)  803/ 6001458 :                     ; 		shll	r0
(2)  804/ 6001458 :                     ; 		add	r3,r0
(2)  805/ 6001458 :                     ; 		cmp/pz	r0
(2)  806/ 6001458 :                     ; 		bf	.exit_sspr
(2)  807/ 6001458 :                     ; 		mov	#SET_MSCRLHGHT>>2,r0
(2)  808/ 6001458 :                     ; 		shll2	r0
(2)  809/ 6001458 :                     ; 		cmp/ge	r0,r3
(2)  810/ 6001458 :                     ; 		bt	.exit_sspr
(2)  811/ 6001458 :                     
(2)  812/ 6001458 : 4401                		shlr	r4			; /2 for 16x16
(2)  813/ 600145A : 4501                		shlr	r5
(2)  814/ 600145C : 7401                		add	#1,r4
(2)  815/ 600145E : 7501                		add	#1,r5
(2)  816/ 6001460 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  817/ 6001462 : 680F                		exts.w	r0,r8
(2)  818/ 6001464 : E60F                		mov	#16-1,r6		; MANUAL SIZE 16x16
(2)  819/ 6001466 : 0009                		nop
(2)  820/ 6001468 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  821/ 600146A : 690F                		exts.w	r0,r9
(2)  822/ 600146C : 6023                		mov	r2,r0
(2)  823/ 600146E : 308C                		add	r8,r0
(2)  824/ 6001470 : 2069                		and	r6,r0
(2)  825/ 6001472 : 2008                		tst	r0,r0
(2)  826/ 6001474 : 8900                		bt	.x_szex
(2)  827/ 6001476 : 7401                		add	#1,r4
(2)  828/ 6001478 :                     .x_szex:
(2)  829/ 6001478 : 6033                		mov	r3,r0
(2)  830/ 600147A : 309C                		add	r9,r0
(2)  831/ 600147C : 2069                		and	r6,r0
(2)  832/ 600147E : 2008                		tst	r0,r0
(2)  833/ 6001480 : 8900                		bt	.y_szex
(2)  834/ 6001482 : 7501                		add	#1,r5
(2)  835/ 6001484 :                     .y_szex:
(2)  836/ 6001484 : 4408                		shll2	r4		; Expand sizes to 16pixels
(2)  837/ 6001486 : 4408                		shll2	r4
(2)  838/ 6001488 : 4508                		shll2	r5
(2)  839/ 600148A : 4508                		shll2	r5
(2)  840/ 600148C : 342C                		add	r2,r4
(2)  841/ 600148E : 353C                		add	r3,r5
(2)  842/ 6001490 : E654                		mov	#SET_MSCRLWDTH>>2,r6
(2)  843/ 6001492 : E73C                		mov	#SET_MSCRLHGHT>>2,r7
(2)  844/ 6001494 : 4608                		shll2	r6
(2)  845/ 6001496 : 4708                		shll2	r7
(2)  846/ 6001498 :                     	; Off-screen limits
(2)  847/ 6001498 : 4415                		cmp/pl	r4
(2)  848/ 600149A : 8B2F                		bf	.off_sspr
(2)  849/ 600149C : 4515                		cmp/pl	r5
(2)  850/ 600149E : 8B2D                		bf	.off_sspr
(2)  851/ 60014A0 : 3263                		cmp/ge	r6,r2		; Xleft < 0?
(2)  852/ 60014A2 : 892B                		bt	.off_sspr
(2)  853/ 60014A4 : 3373                		cmp/ge	r7,r3		; Yup < 0?
(2)  854/ 60014A6 : 8929                		bt	.off_sspr
(2)  855/ 60014A8 :                     	; Squeeze screen coords
(2)  856/ 60014A8 : E010                		mov	#16,r0
(2)  857/ 60014AA : 360C                		add	r0,r6
(2)  858/ 60014AC : 370C                		add	r0,r7
(2)  859/ 60014AE : 4215                		cmp/pl	r2
(2)  860/ 60014B0 : 8900                		bt	.x_sqz
(2)  861/ 60014B2 : E200                		mov	#0,r2
(2)  862/ 60014B4 : 4315                .x_sqz:		cmp/pl	r3
(2)  863/ 60014B6 : 8900                		bt	.y_sqz
(2)  864/ 60014B8 : E300                		mov	#0,r3
(2)  865/ 60014BA : 3463                .y_sqz:		cmp/ge	r6,r4
(2)  866/ 60014BC : 8B00                		bf	.x_sqend
(2)  867/ 60014BE : 6463                		mov	r6,r4
(2)  868/ 60014C0 : 3573                .x_sqend:	cmp/ge	r7,r5
(2)  869/ 60014C2 : 8B00                		bf	.y_sqend
(2)  870/ 60014C4 : 6573                		mov	r7,r5
(2)  871/ 60014C6 :                     .y_sqend:
(2)  872/ 60014C6 :                     
(2)  873/ 60014C6 :                     	; r2 - X pos
(2)  874/ 60014C6 :                     	; r3 - Y pos
(2)  875/ 60014C6 :                     	; r4 - X end
(2)  876/ 60014C6 :                     	; r5 - Y end
(2)  877/ 60014C6 :                     .y_row:
(2)  878/ 60014C6 : 6623                		mov	r2,r6
(2)  879/ 60014C8 :                     .x_row:
(2)  880/ 60014C8 : 6033                		mov	r3,r0
(2)  881/ 60014CA : 309C                		add	r9,r0
(2)  882/ 60014CC : 4009                		shlr2	r0
(2)  883/ 60014CE : 4009                		shlr2	r0
(2)  884/ 60014D0 : C90F                		and	#(256/16)-1,r0
(2)  885/ 60014D2 : 4008                		shll2	r0
(2)  886/ 60014D4 : 4008                		shll2	r0
(2)  887/ 60014D6 : 4008                		shll2	r0
(2)  888/ 60014D8 : 6703                		mov	r0,r7
(2)  889/ 60014DA : 6063                		mov	r6,r0
(2)  890/ 60014DC : 308C                		add	r8,r0
(2)  891/ 60014DE : 4009                		shlr2	r0
(2)  892/ 60014E0 : 4009                		shlr2	r0
(2)  893/ 60014E2 : C91F                		and	#(512/16)-1,r0
(2)  894/ 60014E4 : 4000                		shll	r0
(2)  895/ 60014E6 : 370C                		add	r0,r7
(2)  896/ 60014E8 : 37EC                		add	r14,r7
(2)  897/ 60014EA : 6071                		mov.w	@r7,r0
(2)  898/ 60014EC : CB03                		or	#%11,r0
(2)  899/ 60014EE : 2701                		mov.w	r0,@r7
(2)  900/ 60014F0 : 7610                		add	#16,r6
(2)  901/ 60014F2 : 3643                		cmp/ge	r4,r6
(2)  902/ 60014F4 : 8BE8                		bf	.x_row
(2)  903/ 60014F6 : 7310                		add	#16,r3
(2)  904/ 60014F8 : 3353                		cmp/ge	r5,r3
(2)  905/ 60014FA : 8BE4                		bf	.y_row
(2)  906/ 60014FC :                     .off_sspr:
(2)  907/ 60014FC : E010                		mov	#sspr_len,r0
(2)  908/ 60014FE : 4C10                		dt	r12
(2)  909/ 6001500 : 8F9A                		bf/s	.next_sspr
(2)  910/ 6001502 : 3D0C                		add	r0,r13
(2)  911/ 6001504 :                     .exit_sspr:
(2)  912/ 6001504 : 4F26                		lds	@r15+,pr
(2)  913/ 6001506 : 000B                		rts
(2)  914/ 6001508 : 0009                		nop
(2)  915/ 600150A :                     		align 4
(2)  916/ 600150C : C000 0200 0220      		ltorg
          6001512 : 0200 0620          
(2)  917/ 6001516 :                     
(2)  918/ 6001516 :                     ; --------------------------------------------------------
(2)  919/ 6001516 :                     ; MarsVideo_DrawFillBlk
(2)  920/ 6001516 :                     ;
(2)  921/ 6001516 :                     ; r14 - Svdp queue base
(2)  922/ 6001516 :                     ; r13 - Scroll size W*H
(2)  923/ 6001516 :                     ; r12 - Scroll height
(2)  924/ 6001516 :                     ; r11 - Scroll width
(2)  925/ 6001516 :                     ; r10 - Scroll TL-pos read / 16 *
(2)  926/ 6001516 :                     ;  r9 - Scroll Y-pos read / 16 *
(2)  927/ 6001516 :                     ;  r8 - Graphics data
(2)  928/ 6001516 :                     ;  r7 - Map data
(2)  929/ 6001516 :                     ;  r6 - Map Y read index
(2)  930/ 6001516 :                     ;  r5 - Map X read index
(2)  931/ 6001516 :                     ; --------------------------------------------------------
(2)  932/ 6001516 :                     
(2)  933/ 6001516 :                     		align 4
(2)  934/ 6001518 :                     MarsVideo_DrawFillBlk:
(2)  935/ 6001518 : 4F22                		sts	pr,@-r15
(2)  936/ 600151A :                     
(2)  937/ 600151A : DE37                		mov	#_framebuffer,r14
(2)  938/ 600151C : C610                		mov	@(marsGbl_Scrl_Size,gbr),r0
(2)  939/ 600151E : 6D03                		mov	r0,r13
(2)  940/ 6001520 : C612                		mov	@(marsGbl_Scrl_Hght,gbr),r0
(2)  941/ 6001522 : 6C03                		mov	r0,r12
(2)  942/ 6001524 : C611                		mov	@(marsGbl_Scrl_Wdth,gbr),r0
(2)  943/ 6001526 : 6B03                		mov	r0,r11
(2)  944/ 6001528 : C615                		mov	@(marsGbl_Scrl_FbTL,gbr),r0
(2)  945/ 600152A : 6A03                		mov	r0,r10
(2)  946/ 600152C : C616                		mov	@(marsGbl_Scrl_FbY,gbr),r0
(2)  947/ 600152E : 6903                		mov	r0,r9
(2)  948/ 6001530 : C613                		mov	@(marsGbl_Scrl_Vram,gbr),r0
(2)  949/ 6001532 : 6603                		mov	r0,r6
(2)  950/ 6001534 : C60D                		mov	@(marsGbl_Scrl_Ypos,gbr),r0
(2)  951/ 6001536 : 6703                		mov	r0,r7
(2)  952/ 6001538 : C60C                		mov	@(marsGbl_Scrl_Xpos,gbr),r0
(2)  953/ 600153A : 6803                		mov	r0,r8
(2)  954/ 600153C : C614                		mov	@(marsGbl_Scrl_FbOut,gbr),r0
(2)  955/ 600153E : 3E0C                		add	r0,r14
(2)  956/ 6001540 : C608                		mov	@(marsGbl_DreqRead,gbr),r0
(2)  957/ 6001542 : 955F                		mov	#Dreq_Buff1,r5			; ** DREQ READ **
(2)  958/ 6001544 : 350C                		add	r0,r5
(2)  959/ 6001546 : D02D                		mov	#RAM_Mars_VramData,r0
(2)  960/ 6001548 : 360C                		add	r0,r6
(2)  961/ 600154A : E0F0                		mov	#-SET_MSCRLSIZE,r0		; -MSCRL_BLKSIZE
(2)  962/ 600154C : 2A09                		and	r0,r10				; Set FB top-left
(2)  963/ 600154E : 2909                		and	r0,r9
(2)  964/ 6001550 : D42B                		mov	#$C0000000|RAM_Mars_ScrlRefill,r4
(2)  965/ 6001552 :                     ; 		mov.w	@(marsGbl_DrawAll,gbr),r0
(2)  966/ 6001552 :                     ; 		tst	r0,r0
(2)  967/ 6001552 :                     ; 		bt	.keep_normal
(2)  968/ 6001552 :                     ; 		mov	#0,r4
(2)  969/ 6001552 :                     ; .keep_normal:
(2)  970/ 6001552 :                     
(2)  971/ 6001552 :                     	; r14 - Svdp queue base
(2)  972/ 6001552 :                     	; r13 - Scroll size W*H
(2)  973/ 6001552 :                     	; r12 - Scroll height
(2)  974/ 6001552 :                     	; r11 - Scroll width
(2)  975/ 6001552 :                     	; r10 - Scroll TL-pos read / 16 *
(2)  976/ 6001552 :                     	;  r9 - Scroll Y-pos read / 16 *
(2)  977/ 6001552 :                     	;  r8 - Map X read index
(2)  978/ 6001552 :                     	;  r7 - Map Y read index
(2)  979/ 6001552 :                     	;  r6 - Graphics data
(2)  980/ 6001552 :                     	;  r5 - Map data
(2)  981/ 6001552 :                     	;  r4 - Refill map
(2)  982/ 6001552 :                     	;  r3 -
(2)  983/ 6001552 : 2B9F                		muls	r9,r11
(2)  984/ 6001554 : 001A                		sts	macl,r0
(2)  985/ 6001556 : 3A0C                		add	r0,r10
(2)  986/ 6001558 : E1FC                		mov	#-4,r1
(2)  987/ 600155A : 2A19                		and	r1,r10
(2)  988/ 600155C : 63B3                		mov	r11,r3
(2)  989/ 600155E : 4309                		shlr2	r3
(2)  990/ 6001560 : 4309                		shlr2	r3
(2)  991/ 6001562 :                     .x_loop:
(2)  992/ 6001562 : 3AD3                		cmp/ge	r13,r10
(2)  993/ 6001564 : 8B00                		bf	.tl_snap_x
(2)  994/ 6001566 : 3AD8                		sub	r13,r10
(2)  995/ 6001568 :                     .tl_snap_x:
(2)  996/ 6001568 : 2F36                		mov	r3,@-r15
(2)  997/ 600156A : 2F76                		mov	r7,@-r15
(2)  998/ 600156C : 2FA6                		mov	r10,@-r15
(2)  999/ 600156E : 2FC6                		mov	r12,@-r15
(2) 1000/ 6001570 : 4C09                		shlr2	r12
(2) 1001/ 6001572 : 4C09                		shlr2	r12
(2) 1002/ 6001574 :                     .y_loop:
(2) 1003/ 6001574 : 3AD3                		cmp/ge	r13,r10
(2) 1004/ 6001576 : 8B00                		bf	.tl_snap_y
(2) 1005/ 6001578 : 3AD8                		sub	r13,r10
(2) 1006/ 600157A :                     .tl_snap_y:
(2) 1007/ 600157A : 62A3                		mov	r10,r2
(2) 1008/ 600157C : E00F                		mov	#(256/16)-1,r0
(2) 1009/ 600157E : 6373                		mov	r7,r3		; Y pos
(2) 1010/ 6001580 : 4309                		shlr2	r3
(2) 1011/ 6001582 : 4309                		shlr2	r3
(2) 1012/ 6001584 : 2309                		and	r0,r3
(2) 1013/ 6001586 : 4308                		shll2	r3
(2) 1014/ 6001588 : 4308                		shll2	r3
(2) 1015/ 600158A : 4300                		shll	r3
(2) 1016/ 600158C : E01F                		mov	#(512/16)-1,r0
(2) 1017/ 600158E : 6183                		mov	r8,r1		; X pos
(2) 1018/ 6001590 : 4109                		shlr2	r1
(2) 1019/ 6001592 : 4109                		shlr2	r1
(2) 1020/ 6001594 : 2109                		and	r0,r1
(2) 1021/ 6001596 : 313C                		add	r3,r1
(2) 1022/ 6001598 : 4100                		shll	r1
(2) 1023/ 600159A : 2448                		tst	r4,r4
(2) 1024/ 600159C : 8908                		bt	.always_on
(2) 1025/ 600159E : 411A                		lds	r1,macl
(2) 1026/ 60015A0 : 314C                		add	r4,r1
(2) 1027/ 60015A2 : 6011                		mov.w	@r1,r0
(2) 1028/ 60015A4 : 2008                		tst	r0,r0
(2) 1029/ 60015A6 : 8914                		bt	.no_flag
(2) 1030/ 60015A8 : 4001                		shlr	r0
(2) 1031/ 60015AA : 2008                		tst	r0,r0
(2) 1032/ 60015AC : 2101                		mov.w	r0,@r1
(2) 1033/ 60015AE : 011A                		sts	macl,r1
(2) 1034/ 60015B0 :                     .always_on:
(2) 1035/ 60015B0 : 315C                		add	r5,r1
(2) 1036/ 60015B2 : 440A                		lds	r4,mach
(2) 1037/ 60015B4 : 6011                		mov.w	@r1,r0
(2) 1038/ 60015B6 : 9126                		mov	#SET_TILEMAX-1,r1
(2) 1039/ 60015B8 : 6403                		mov	r0,r4
(2) 1040/ 60015BA : 2419                		and	r1,r4
(2) 1041/ 60015BC : E100                		mov	#0,r1
(2) 1042/ 60015BE : 2448                		tst	r4,r4
(2) 1043/ 60015C0 : 8903                		bt	.blank_req
(2) 1044/ 60015C2 : 4410                		dt	r4
(2) 1045/ 60015C4 : 4418                		shll8	r4			; 16x16
(2) 1046/ 60015C6 : 6143                		mov	r4,r1
(2) 1047/ 60015C8 : 316C                		add	r6,r1
(2) 1048/ 60015CA :                     .blank_req:
(2) 1049/ 60015CA : 040A                		sts	mach,r4
(2) 1050/ 60015CC :                     
(2) 1051/ 60015CC :                     ; 		mov	#0,r1			; TEMPORAL
(2) 1052/ 60015CC : B01C                		bsr	scrlDrw_DrawBlk
(2) 1053/ 60015CE : 2F36                		mov	r3,@-r15
(2) 1054/ 60015D0 : 63F6                		mov	@r15+,r3
(2) 1055/ 60015D2 :                     .no_flag:
(2) 1056/ 60015D2 : E010                		mov	#16,r0
(2) 1057/ 60015D4 : 20BE                		mulu	r11,r0
(2) 1058/ 60015D6 : 001A                		sts	macl,r0
(2) 1059/ 60015D8 : 3A0C                		add	r0,r10
(2) 1060/ 60015DA : 7710                		add	#16,r7
(2) 1061/ 60015DC : 4C10                		dt	r12
(2) 1062/ 60015DE : 8FC9                		bf/s	.y_loop
(2) 1063/ 60015E0 : 7910                		add	#16,r9
(2) 1064/ 60015E2 :                     
(2) 1065/ 60015E2 : 6CF6                		mov	@r15+,r12
(2) 1066/ 60015E4 : 6AF6                		mov	@r15+,r10
(2) 1067/ 60015E6 : 67F6                		mov	@r15+,r7
(2) 1068/ 60015E8 : 63F6                		mov	@r15+,r3
(2) 1069/ 60015EA : 7A10                		add	#16,r10
(2) 1070/ 60015EC : 4310                		dt	r3
(2) 1071/ 60015EE : 8FB8                		bf/s	.x_loop
(2) 1072/ 60015F0 : 7810                		add	#16,r8
(2) 1073/ 60015F2 :                     
(2) 1074/ 60015F2 :                     .exit_lr:
(2) 1075/ 60015F2 : 4F26                		lds	@r15+,pr
(2) 1076/ 60015F4 : 000B                		rts
(2) 1077/ 60015F6 : 0009                		nop
(2) 1078/ 60015F8 :                     		align 4
(2) 1079/ 60015F8 : 2400 0000 0600      		ltorg
          60015FE : FAE0 C000 0200 
          6001604 : 0220 01FF          
(2) 1080/ 6001608 :                     
(2) 1081/ 6001608 :                     ; --------------------------------------------------------
(2) 1082/ 6001608 :                     ; scrlDrw_DrawBlk
(2) 1083/ 6001608 :                     ;
(2) 1084/ 6001608 :                     ; Currents:
(2) 1085/ 6001608 :                     ; r0 - Block data
(2) 1086/ 6001608 :                     ; r1 - Graphics data, 0 = blank mode
(2) 1087/ 6001608 :                     ; r2 - FB TL position
(2) 1088/ 6001608 :                     ;
(2) 1089/ 6001608 :                     ; InLoop:
(2) 1090/ 6001608 :                     ; r14 - Framebuffer BASE
(2) 1091/ 6001608 :                     ; r13 - Scrl W*H
(2) 1092/ 6001608 :                     ; r11 - Scrl width
(2) 1093/ 6001608 :                     ;
(2) 1094/ 6001608 :                     ; Uses:
(2) 1095/ 6001608 :                     ; r2,macl,mach
(2) 1096/ 6001608 :                     ; --------------------------------------------------------
(2) 1097/ 6001608 :                     
(2) 1098/ 6001608 :                     		align 4
(2) 1099/ 6001608 :                     scrlDrw_DrawBlk:
(2) 1100/ 6001608 : 2118                		tst	r1,r1
(2) 1101/ 600160A : 8B13                		bf	.normal
(2) 1102/ 600160C : E310                		mov	#16,r3
(2) 1103/ 600160E :                     .next_zline:
(2) 1104/ 600160E : 32D3                		cmp/ge	r13,r2
(2) 1105/ 6001610 : 8B00                		bf	.tl_snapz
(2) 1106/ 6001612 : 32D8                		sub	r13,r2
(2) 1107/ 6001614 :                     .tl_snapz:
(2) 1108/ 6001614 : 421A                		lds	r2,macl
(2) 1109/ 6001616 : 32EC                		add	r14,r2
(2) 1110/ 6001618 :                     	rept 16/4
(2) 1111/ 6001618 :                     		mov	r1,@r2
(2) 1112/ 6001618 :                     		add	#4,r2
(2) 1113/ 6001618 :                     	endm
(2) 1111/ 6001618 : 2212                		mov	r1,@r2
(2) 1112/ 600161A : 7204                		add	#4,r2
(2) 1111/ 600161C : 2212                		mov	r1,@r2
(2) 1112/ 600161E : 7204                		add	#4,r2
(2) 1111/ 6001620 : 2212                		mov	r1,@r2
(2) 1112/ 6001622 : 7204                		add	#4,r2
(2) 1111/ 6001624 : 2212                		mov	r1,@r2
(2) 1112/ 6001626 : 7204                		add	#4,r2
(2) 1114/ 6001628 : 021A                		sts	macl,r2
(2) 1115/ 600162A : 4310                		dt	r3
(2) 1116/ 600162C : 8FEF                		bf/s	.next_zline
(2) 1117/ 600162E : 32BC                		add	r11,r2
(2) 1118/ 6001630 : 000B                		rts
(2) 1119/ 6001632 : 0009                		nop
(2) 1120/ 6001634 :                     		align 4
(2) 1121/ 6001634 :                     
(2) 1122/ 6001634 :                     ; ----------------------------------------------------
(2) 1123/ 6001634 :                     
(2) 1124/ 6001634 :                     .normal:
(2) 1125/ 6001634 : 440A                		lds	r4,mach
(2) 1126/ 6001636 : 4019                		shlr8	r0		; Get index increment
(2) 1127/ 6001638 : 4000                		shll	r0
(2) 1128/ 600163A : C9FC                		and	#$FC,r0		; Filter these bits only
(2) 1129/ 600163C : 6303                		mov	r0,r3
(2) 1130/ 600163E : E410                		mov	#16,r4
(2) 1131/ 6001640 :                     .next_line:
(2) 1132/ 6001640 : 32D3                		cmp/ge	r13,r2
(2) 1133/ 6001642 : 8B00                		bf	.tl_snap
(2) 1134/ 6001644 : 32D8                		sub	r13,r2
(2) 1135/ 6001646 :                     .tl_snap:
(2) 1136/ 6001646 : 421A                		lds	r2,macl
(2) 1137/ 6001648 : 32EC                		add	r14,r2
(2) 1138/ 600164A :                     	rept 16/4
(2) 1139/ 600164A :                     		mov	@r1,r0
(2) 1140/ 600164A :                     		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600164A :                     		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 600164A :                     		tst	#$FF,r0
(2) 1143/ 600164A :                     		bt	.z_0
(2) 1144/ 600164A :                     		add	r3,r0
(2) 1145/ 600164A :                     .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 600164A :                     		tst	#$FF,r0
(2) 1147/ 600164A :                     		bt	.z_1
(2) 1148/ 600164A :                     		add	r3,r0
(2) 1149/ 600164A :                     .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 600164A :                     		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600164A :                     		tst	#$FF,r0
(2) 1152/ 600164A :                     		bt	.z_2
(2) 1153/ 600164A :                     		add	r3,r0
(2) 1154/ 600164A :                     .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 600164A :                     		tst	#$FF,r0
(2) 1156/ 600164A :                     		bt	.z_3
(2) 1157/ 600164A :                     		add	r3,r0
(2) 1158/ 600164A :                     .z_3:
(2) 1159/ 600164A :                     		add	#4,r1		; <-- src incr
(2) 1160/ 600164A :                     		mov	r0,@r2
(2) 1161/ 600164A :                     		add	#4,r2
(2) 1162/ 600164A :                     	endm
(2) 1139/ 600164A : 6012                		mov	@r1,r0
(2) 1140/ 600164C : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600164E : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 6001650 : C8FF                		tst	#$FF,r0
(2) 1143/ 6001652 : 8900                		bt	.z_0
(2) 1144/ 6001654 : 303C                		add	r3,r0
(2) 1145/ 6001656 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001658 : C8FF                		tst	#$FF,r0
(2) 1147/ 600165A : 8900                		bt	.z_1
(2) 1148/ 600165C : 303C                		add	r3,r0
(2) 1149/ 600165E : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 6001660 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 6001662 : C8FF                		tst	#$FF,r0
(2) 1152/ 6001664 : 8900                		bt	.z_2
(2) 1153/ 6001666 : 303C                		add	r3,r0
(2) 1154/ 6001668 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 600166A : C8FF                		tst	#$FF,r0
(2) 1156/ 600166C : 8900                		bt	.z_3
(2) 1157/ 600166E : 303C                		add	r3,r0
(2) 1158/ 6001670 :                     .z_3:
(2) 1159/ 6001670 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 6001672 : 2202                		mov	r0,@r2
(2) 1161/ 6001674 : 7204                		add	#4,r2
(2) 1139/ 6001676 : 6012                		mov	@r1,r0
(2) 1140/ 6001678 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 600167A : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 600167C : C8FF                		tst	#$FF,r0
(2) 1143/ 600167E : 8900                		bt	.z_0
(2) 1144/ 6001680 : 303C                		add	r3,r0
(2) 1145/ 6001682 : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 6001684 : C8FF                		tst	#$FF,r0
(2) 1147/ 6001686 : 8900                		bt	.z_1
(2) 1148/ 6001688 : 303C                		add	r3,r0
(2) 1149/ 600168A : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 600168C : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 600168E : C8FF                		tst	#$FF,r0
(2) 1152/ 6001690 : 8900                		bt	.z_2
(2) 1153/ 6001692 : 303C                		add	r3,r0
(2) 1154/ 6001694 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 6001696 : C8FF                		tst	#$FF,r0
(2) 1156/ 6001698 : 8900                		bt	.z_3
(2) 1157/ 600169A : 303C                		add	r3,r0
(2) 1158/ 600169C :                     .z_3:
(2) 1159/ 600169C : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 600169E : 2202                		mov	r0,@r2
(2) 1161/ 60016A0 : 7204                		add	#4,r2
(2) 1139/ 60016A2 : 6012                		mov	@r1,r0
(2) 1140/ 60016A4 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 60016A6 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 60016A8 : C8FF                		tst	#$FF,r0
(2) 1143/ 60016AA : 8900                		bt	.z_0
(2) 1144/ 60016AC : 303C                		add	r3,r0
(2) 1145/ 60016AE : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 60016B0 : C8FF                		tst	#$FF,r0
(2) 1147/ 60016B2 : 8900                		bt	.z_1
(2) 1148/ 60016B4 : 303C                		add	r3,r0
(2) 1149/ 60016B6 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 60016B8 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 60016BA : C8FF                		tst	#$FF,r0
(2) 1152/ 60016BC : 8900                		bt	.z_2
(2) 1153/ 60016BE : 303C                		add	r3,r0
(2) 1154/ 60016C0 : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 60016C2 : C8FF                		tst	#$FF,r0
(2) 1156/ 60016C4 : 8900                		bt	.z_3
(2) 1157/ 60016C6 : 303C                		add	r3,r0
(2) 1158/ 60016C8 :                     .z_3:
(2) 1159/ 60016C8 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 60016CA : 2202                		mov	r0,@r2
(2) 1161/ 60016CC : 7204                		add	#4,r2
(2) 1139/ 60016CE : 6012                		mov	@r1,r0
(2) 1140/ 60016D0 : 6009                		swap.w	r0,r0		; 3 4 1 2
(2) 1141/ 60016D2 : 6008                		swap.b	r0,r0		; 3 4 2 1
(2) 1142/ 60016D4 : C8FF                		tst	#$FF,r0
(2) 1143/ 60016D6 : 8900                		bt	.z_0
(2) 1144/ 60016D8 : 303C                		add	r3,r0
(2) 1145/ 60016DA : 6008                .z_0:		swap.b	r0,r0		; 3 4 1 2
(2) 1146/ 60016DC : C8FF                		tst	#$FF,r0
(2) 1147/ 60016DE : 8900                		bt	.z_1
(2) 1148/ 60016E0 : 303C                		add	r3,r0
(2) 1149/ 60016E2 : 6009                .z_1:		swap.w	r0,r0		; 1 2 3 4
(2) 1150/ 60016E4 : 6008                		swap.b	r0,r0		; 1 2 4 3
(2) 1151/ 60016E6 : C8FF                		tst	#$FF,r0
(2) 1152/ 60016E8 : 8900                		bt	.z_2
(2) 1153/ 60016EA : 303C                		add	r3,r0
(2) 1154/ 60016EC : 6008                .z_2:		swap.b	r0,r0		; 1 2 3 4
(2) 1155/ 60016EE : C8FF                		tst	#$FF,r0
(2) 1156/ 60016F0 : 8900                		bt	.z_3
(2) 1157/ 60016F2 : 303C                		add	r3,r0
(2) 1158/ 60016F4 :                     .z_3:
(2) 1159/ 60016F4 : 7104                		add	#4,r1		; <-- src incr
(2) 1160/ 60016F6 : 2202                		mov	r0,@r2
(2) 1161/ 60016F8 : 7204                		add	#4,r2
(2) 1163/ 60016FA : 021A                		sts	macl,r2
(2) 1164/ 60016FC :                     
(2) 1165/ 60016FC : 4410                		dt	r4
(2) 1166/ 60016FE :                     ; 		bt	.end_line
(2) 1167/ 60016FE :                     ; 		bra	.next_line
(2) 1168/ 60016FE :                     ; 		nop
(2) 1169/ 60016FE : 8F9F                		bf/s	.next_line
(2) 1170/ 6001700 : 32BC                		add	r11,r2
(2) 1171/ 6001702 :                     .end_line:
(2) 1172/ 6001702 : 040A                		sts	mach,r4
(2) 1173/ 6001704 : 000B                		rts
(2) 1174/ 6001706 : 0009                		nop
(2) 1175/ 6001708 :                     		align 4
(2) 1176/ 6001708 :                     		ltorg
(2) 1177/ 6001708 :                     
(2) 1178/ 6001708 :                     ; ====================================================================
(2) 1179/ 6001708 :                     ; ----------------------------------------------------------------
(2) 1180/ 6001708 :                     ; Polygon rendering subroutines
(2) 1181/ 6001708 :                     ; ----------------------------------------------------------------
(2) 1182/ 6001708 :                     
(2) 1183/ 6001708 :                     ; ------------------------------------------------
(2) 1184/ 6001708 :                     ; MarsVideo_SlicePlgn
(2) 1185/ 6001708 :                     ;
(2) 1186/ 6001708 :                     ; This slices polygons into pieces.
(2) 1187/ 6001708 :                     ;
(2) 1188/ 6001708 :                     ; Input:
(2) 1189/ 6001708 :                     ; r14 | Polygon data to read
(2) 1190/ 6001708 :                     ; ------------------------------------------------
(2) 1191/ 6001708 :                     
(2) 1192/ 6001708 :                     		align 4
(2) 1193/ 6001708 :                     MarsVideo_SlicePlgn:
(2) 1194/ 6001708 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1195/ 600170A : 6203                		mov	r0,r2
(2) 1196/ 600170C : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1197/ 600170E : 3023                		cmp/ge	r2,r0
(2) 1198/ 6001710 : 8BFA                		bf	MarsVideo_SlicePlgn
(2) 1199/ 6001712 :                     
(2) 1200/ 6001712 : 4F22                		sts	pr,@-r15
(2) 1201/ 6001714 : DD3E                		mov	#$C0000000|Cach_DDA_Last,r13		; r13 - DDA last point
(2) 1202/ 6001716 : DC3F                		mov	#$C0000000|Cach_DDA_Top,r12		; r12 - DDA first point
(2) 1203/ 6001718 : 50E0                		mov	@(plygn_type,r14),r0			; Read type settings ($F000 0000)
(2) 1204/ 600171A : 4029                		shlr16	r0					; 0000 F000
(2) 1205/ 600171C : 4019                		shlr8	r0					; 0000 00F0
(2) 1206/ 600171E : C840                		tst	#PLGN_TRI,r0				; PLGN_TRI set?
(2) 1207/ 6001720 : 8B00                		bf	.tringl
(2) 1208/ 6001722 : 7D08                		add	#8,r13					; If quad: add 8
(2) 1209/ 6001724 :                     .tringl:
(2) 1210/ 6001724 : 61E3                		mov	r14,r1
(2) 1211/ 6001726 : 62C3                		mov	r12,r2
(2) 1212/ 6001728 : D33B                		mov	#$C0000000|Cach_DDA_Src,r3
(2) 1213/ 600172A : 7108                		add	#plygn_points,r1
(2) 1214/ 600172C : 400A                		lds	r0,mach
(2) 1215/ 600172E : 0009                		nop
(2) 1216/ 6001730 :                     
(2) 1217/ 6001730 :                     	; ----------------------------------------
(2) 1218/ 6001730 :                     	; Polygon points
(2) 1219/ 6001730 :                     	; ----------------------------------------
(2) 1220/ 6001730 :                     
(2) 1221/ 6001730 : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1222/ 6001732 : 4001                		shlr	r0
(2) 1223/ 6001734 : 6603                		mov	r0,r6
(2) 1224/ 6001736 : E804                		mov	#4,r8
(2) 1225/ 6001738 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1226/ 600173A : 4001                		shlr	r0
(2) 1227/ 600173C : 6703                		mov	r0,r7
(2) 1228/ 600173E : 0009                		nop
(2) 1229/ 6001740 :                     .setpnts:
(2) 1230/ 6001740 : 6416                		mov	@r1+,r4
(2) 1231/ 6001742 : 346C                		add	r6,r4			; X + width
(2) 1232/ 6001744 : 6516                		mov	@r1+,r5
(2) 1233/ 6001746 : 357C                		add	r7,r5			; Y + height
(2) 1234/ 6001748 : 2242                		mov	r4,@r2
(2) 1235/ 600174A : 0009                		nop
(2) 1236/ 600174C : 1251                		mov	r5,@(4,r2)
(2) 1237/ 600174E : 4810                		dt	r8
(2) 1238/ 6001750 : 8FF6                		bf/s	.setpnts
(2) 1239/ 6001752 : 7208                		add	#8,r2
(2) 1240/ 6001754 : E804                		mov	#4,r8			; Copy texture source points to Cache
(2) 1241/ 6001756 :                     .src_pnts:
(2) 1242/ 6001756 : 6416                		mov	@r1+,r4
(2) 1243/ 6001758 : 654D                		extu.w	r4,r5
(2) 1244/ 600175A : 4429                		shlr16	r4
(2) 1245/ 600175C : 644D                		extu.w	r4,r4
(2) 1246/ 600175E :                     ; 		mov.w	@r1+,r4
(2) 1247/ 600175E :                     ; 		mov.w	@r1+,r5
(2) 1248/ 600175E :                     ; 		extu.w	r4,r4
(2) 1249/ 600175E :                     ; 		extu.w	r5,r5
(2) 1250/ 600175E :                     
(2) 1251/ 600175E : 2342                		mov	r4,@r3
(2) 1252/ 6001760 : 1351                		mov	r5,@(4,r3)
(2) 1253/ 6001762 : 4810                		dt	r8
(2) 1254/ 6001764 : 8FF7                		bf/s	.src_pnts
(2) 1255/ 6001766 : 7308                		add	#8,r3
(2) 1256/ 6001768 :                     
(2) 1257/ 6001768 :                     	; Search for the lowest Y and highest Y
(2) 1258/ 6001768 :                     	; r10 - Top Y
(2) 1259/ 6001768 :                     	; r11 - Bottom Y
(2) 1260/ 6001768 : 000A                		sts	mach,r0
(2) 1261/ 600176A :                     .start_math:
(2) 1262/ 600176A : E903                		mov	#3,r9
(2) 1263/ 600176C : C840                		tst	#PLGN_TRI,r0		; PLGN_TRI set?
(2) 1264/ 600176E : 8B00                		bf	.ytringl
(2) 1265/ 6001770 : 7901                		add	#1,r9
(2) 1266/ 6001772 :                     .ytringl:
(2) 1267/ 6001772 : DA2A                		mov	#$7FFFFFFF,r10
(2) 1268/ 6001774 : EBFF                		mov	#-1,r11			; $FFFFFFFF
(2) 1269/ 6001776 : 67C3                		mov 	r12,r7
(2) 1270/ 6001778 : 68C3                		mov	r12,r8
(2) 1271/ 600177A :                     .find_top:
(2) 1272/ 600177A : 5071                		mov	@(4,r7),r0
(2) 1273/ 600177C : 30B7                		cmp/gt	r11,r0
(2) 1274/ 600177E : 8B00                		bf	.is_low
(2) 1275/ 6001780 : 6B03                		mov 	r0,r11
(2) 1276/ 6001782 :                     .is_low:
(2) 1277/ 6001782 : 5081                		mov	@(4,r8),r0
(2) 1278/ 6001784 : 30A7                		cmp/gt	r10,r0
(2) 1279/ 6001786 : 8901                		bt	.is_high
(2) 1280/ 6001788 : 6A03                		mov 	r0,r10
(2) 1281/ 600178A : 6183                		mov	r8,r1
(2) 1282/ 600178C :                     .is_high:
(2) 1283/ 600178C : 7708                		add 	#8,r7
(2) 1284/ 600178E : 4910                		dt	r9
(2) 1285/ 6001790 : 8FF3                		bf/s	.find_top
(2) 1286/ 6001792 : 7808                		add	#8,r8
(2) 1287/ 6001794 : 3AB3                		cmp/ge	r11,r10			; Top larger than Bottom?
(2) 1288/ 6001796 : 8938                		bt	.exit
(2) 1289/ 6001798 : 4B15                		cmp/pl	r11			; Bottom < 0?
(2) 1290/ 600179A : 8B36                		bf	.exit
(2) 1291/ 600179C :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; Top > 224?
(2) 1292/ 600179C :                     ; 		shll2	r0
(2) 1293/ 600179C : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1294/ 600179E : 3A03                		cmp/ge	r0,r10
(2) 1295/ 60017A0 : 8933                		bt	.exit
(2) 1296/ 60017A2 :                     
(2) 1297/ 60017A2 :                     	; r2 - Left DDA READ pointer
(2) 1298/ 60017A2 :                     	; r3 - Right DDA READ pointer
(2) 1299/ 60017A2 :                     	; r4 - Left X
(2) 1300/ 60017A2 :                     	; r5 - Left DX
(2) 1301/ 60017A2 :                     	; r6 - Right X
(2) 1302/ 60017A2 :                     	; r7 - Right DX
(2) 1303/ 60017A2 :                     	; r8 - Left width
(2) 1304/ 60017A2 :                     	; r9 - Right width
(2) 1305/ 60017A2 :                     	; r10 - Top Y, updates after calling put_piece
(2) 1306/ 60017A2 :                     	; r11 - Bottom Y
(2) 1307/ 60017A2 :                     	; r12 - First DST point
(2) 1308/ 60017A2 :                     	; r13 - Last DST point
(2) 1309/ 60017A2 : 6213                		mov	r1,r2				; r2 - X left to process
(2) 1310/ 60017A4 : B042                		bsr	set_left
(2) 1311/ 60017A6 : 6313                		mov	r1,r3				; r3 - X right to process
(2) 1312/ 60017A8 : B084                		bsr	set_right
(2) 1313/ 60017AA : 0009                		nop
(2) 1314/ 60017AC :                     
(2) 1315/ 60017AC :                     .next_pz:
(2) 1316/ 60017AC :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Current Y > 224?
(2) 1317/ 60017AC :                     ; 		shll2	r0
(2) 1318/ 60017AC : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1319/ 60017AE : 3A07                		cmp/gt	r0,r10
(2) 1320/ 60017B0 : 892B                		bt	.exit
(2) 1321/ 60017B2 : 3AB3                		cmp/ge	r11,r10				; Y top >= Y bottom?
(2) 1322/ 60017B4 : 8929                		bt	.exit
(2) 1323/ 60017B6 :                     
(2) 1324/ 60017B6 : D11A                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r1
(2) 1325/ 60017B8 : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1326/ 60017BA : C90F                		and	#16-1,r0
(2) 1327/ 60017BC : 4018                		shll8	r0
(2) 1328/ 60017BE : 4009                		shlr2	r0
(2) 1329/ 60017C0 : 310C                		add	r0,r1
(2) 1330/ 60017C2 : 5821                		mov	@(4,r2),r8
(2) 1331/ 60017C4 : 5931                		mov	@(4,r3),r9
(2) 1332/ 60017C6 : 38A8                		sub	r10,r8
(2) 1333/ 60017C8 : 39A8                		sub	r10,r9
(2) 1334/ 60017CA : 6083                		mov	r8,r0
(2) 1335/ 60017CC : 3983                		cmp/ge	r8,r9
(2) 1336/ 60017CE : 8900                		bt	.lefth
(2) 1337/ 60017D0 : 6093                		mov	r9,r0
(2) 1338/ 60017D2 :                     .lefth:
(2) 1339/ 60017D2 : D014                		mov	#$C0000000|Cach_Bkup_SPZ,r0
(2) 1340/ 60017D4 : 2026                		mov	r2,@-r0
(2) 1341/ 60017D6 : 2036                		mov	r3,@-r0
(2) 1342/ 60017D8 : 2056                		mov	r5,@-r0
(2) 1343/ 60017DA : 2076                		mov	r7,@-r0
(2) 1344/ 60017DC : 2086                		mov	r8,@-r0
(2) 1345/ 60017DE : 2096                		mov	r9,@-r0
(2) 1346/ 60017E0 : 20B6                		mov	r11,@-r0
(2) 1347/ 60017E2 : B0AB                		bsr	put_piece
(2) 1348/ 60017E4 : 0009                		nop
(2) 1349/ 60017E6 : D010                		mov	#$C0000000|Cach_Bkup_LPZ,r0
(2) 1350/ 60017E8 : 6B06                		mov	@r0+,r11
(2) 1351/ 60017EA : 6906                		mov	@r0+,r9
(2) 1352/ 60017EC : 6806                		mov	@r0+,r8
(2) 1353/ 60017EE : 6706                		mov	@r0+,r7
(2) 1354/ 60017F0 : 6506                		mov	@r0+,r5
(2) 1355/ 60017F2 : 6306                		mov	@r0+,r3
(2) 1356/ 60017F4 : 6206                		mov	@r0+,r2
(2) 1357/ 60017F6 :                     	; X direction update
(2) 1358/ 60017F6 : 3897                		cmp/gt	r9,r8				; Left width > Right width?
(2) 1359/ 60017F8 : 8B03                		bf	.lefth2
(2) 1360/ 60017FA : B05B                		bsr	set_right
(2) 1361/ 60017FC : 0009                		nop
(2) 1362/ 60017FE : AFD5                		bra	.next_pz
(2) 1363/ 6001800 : 0009                		nop
(2) 1364/ 6001802 :                     .lefth2:
(2) 1365/ 6001802 : B013                		bsr	set_left
(2) 1366/ 6001804 : 0009                		nop
(2) 1367/ 6001806 : AFD1                		bra	.next_pz
(2) 1368/ 6001808 : 0009                		nop
(2) 1369/ 600180A :                     .exit:
(2) 1370/ 600180A : 4F26                		lds	@r15+,pr
(2) 1371/ 600180C : 000B                		rts
(2) 1372/ 600180E : 0009                		nop
(2) 1373/ 6001810 :                     		align 4
(2) 1374/ 6001810 : C000 0410 C000      		ltorg
          6001816 : 0400 C000 0420 
          600181C : 7FFF FFFF C000 
          6001822 : 0000 C000 04E0 
          6001828 : C000 04C4          
(2) 1375/ 600182C :                     
(2) 1376/ 600182C :                     		align 4
(2) 1377/ 600182C :                     set_left:
(2) 1378/ 600182C : 6823                		mov	r2,r8				; Get a copy of Xleft pointer
(2) 1379/ 600182E : 7820                		add	#$20,r8				; To read Texture SRC points
(2) 1380/ 6001830 : 6482                		mov	@r8,r4
(2) 1381/ 6001832 : 5581                		mov	@(4,r8),r5
(2) 1382/ 6001834 : D86E                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1383/ 6001836 : 6043                		mov	r4,r0
(2) 1384/ 6001838 : 4028                		shll16	r0
(2) 1385/ 600183A : 2802                		mov	r0,@r8
(2) 1386/ 600183C : 6053                		mov	r5,r0
(2) 1387/ 600183E : 4028                		shll16	r0
(2) 1388/ 6001840 : 1802                		mov	r0,@(8,r8)
(2) 1389/ 6001842 : 6122                		mov	@r2,r1
(2) 1390/ 6001844 : 5821                		mov	@(4,r2),r8
(2) 1391/ 6001846 : 7208                		add	#8,r2
(2) 1392/ 6001848 : 32D7                		cmp/gt	r13,r2
(2) 1393/ 600184A : 8B00                		bf	.lft_ok
(2) 1394/ 600184C : 62C3                		mov 	r12,r2
(2) 1395/ 600184E :                     .lft_ok:
(2) 1396/ 600184E : 5021                		mov	@(4,r2),r0
(2) 1397/ 6001850 : 3088                		sub	r8,r0
(2) 1398/ 6001852 : 8800                		cmp/eq	#0,r0
(2) 1399/ 6001854 : 89EA                		bt	set_left
(2) 1400/ 6001856 : 4011                		cmp/pz	r0
(2) 1401/ 6001858 : 8B29                		bf	.lft_skip
(2) 1402/ 600185A : 400A                		lds	r0,mach
(2) 1403/ 600185C : 6823                		mov	r2,r8
(2) 1404/ 600185E : 7820                		add	#$20,r8
(2) 1405/ 6001860 : 6082                		mov 	@r8,r0
(2) 1406/ 6001862 : 3048                		sub 	r4,r0
(2) 1407/ 6001864 : 5481                		mov 	@(4,r8),r4
(2) 1408/ 6001866 : 3458                		sub 	r5,r4
(2) 1409/ 6001868 :                     
(2) 1410/ 6001868 : 6503                		mov	r0,r5
(2) 1411/ 600186A : 4418                		shll8	r4
(2) 1412/ 600186C : 4518                		shll8	r5
(2) 1413/ 600186E : E001                		mov	#1,r0
(2) 1414/ 6001870 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1415/ 6001872 : 080A                		sts	mach,r8
(2) 1416/ 6001874 : 90CC                		mov	#_JR,r0
(2) 1417/ 6001876 : 2082                		mov	r8,@r0
(2) 1418/ 6001878 : 1051                		mov	r5,@(4,r0)
(2) 1419/ 600187A : 0009                		nop
(2) 1420/ 600187C :                     ; 		mov	@(4,r0),r5
(2) 1421/ 600187C : 5505                		mov 	@($14,r0),r5
(2) 1422/ 600187E : 90C7                		mov	#_JR,r0
(2) 1423/ 6001880 : 2082                		mov	r8,@r0
(2) 1424/ 6001882 : 1041                		mov	r4,@(4,r0)
(2) 1425/ 6001884 : 0009                		nop
(2) 1426/ 6001886 :                     ; 		mov	@(4,r0),r4
(2) 1427/ 6001886 : 5405                		mov 	@($14,r0),r4
(2) 1428/ 6001888 : 4418                		shll8	r4
(2) 1429/ 600188A : 4518                		shll8	r5
(2) 1430/ 600188C : D059                		mov	#$C0000000|Cach_DDA_Src_L+$C,r0
(2) 1431/ 600188E : 2042                		mov	r4,@r0
(2) 1432/ 6001890 : D059                		mov	#$C0000000|Cach_DDA_Src_L+4,r0
(2) 1433/ 6001892 : 2052                		mov	r5,@r0
(2) 1434/ 6001894 : 6522                		mov	@r2,r5
(2) 1435/ 6001896 : 3518                		sub 	r1,r5
(2) 1436/ 6001898 : 6413                		mov 	r1,r4
(2) 1437/ 600189A : 4518                		shll8	r5
(2) 1438/ 600189C : 4428                		shll16	r4
(2) 1439/ 600189E : 90B7                		mov	#_JR,r0
(2) 1440/ 60018A0 : 2082                		mov	r8,@r0
(2) 1441/ 60018A2 : 1051                		mov	r5,@(4,r0)
(2) 1442/ 60018A4 : 0009                		nop
(2) 1443/ 60018A6 :                     ; 		mov	@(4,r0),r5
(2) 1444/ 60018A6 : 5505                		mov 	@($14,r0),r5
(2) 1445/ 60018A8 : 4518                		shll8	r5
(2) 1446/ 60018AA : E000                		mov	#0,r0
(2) 1447/ 60018AC : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1448/ 60018AE :                     .lft_skip:
(2) 1449/ 60018AE : 000B                		rts
(2) 1450/ 60018B0 : 0009                		nop
(2) 1451/ 60018B2 :                     		align 4
(2) 1452/ 60018B4 :                     
(2) 1453/ 60018B4 :                     ; --------------------------------------------------------
(2) 1454/ 60018B4 :                     
(2) 1455/ 60018B4 :                     set_right:
(2) 1456/ 60018B4 : 6933                		mov	r3,r9
(2) 1457/ 60018B6 : 7920                		add	#$20,r9
(2) 1458/ 60018B8 : 6692                		mov	@r9,r6
(2) 1459/ 60018BA : 5791                		mov	@(4,r9),r7
(2) 1460/ 60018BC : D94F                		mov	#$C0000000|Cach_DDA_Src_R,r9
(2) 1461/ 60018BE : 6063                		mov	r6,r0
(2) 1462/ 60018C0 : 4028                		shll16	r0
(2) 1463/ 60018C2 : 2902                		mov	r0,@r9
(2) 1464/ 60018C4 : 6073                		mov	r7,r0
(2) 1465/ 60018C6 : 4028                		shll16	r0
(2) 1466/ 60018C8 : 1902                		mov	r0,@(8,r9)
(2) 1467/ 60018CA :                     
(2) 1468/ 60018CA : 6132                		mov	@r3,r1
(2) 1469/ 60018CC : 5931                		mov	@(4,r3),r9
(2) 1470/ 60018CE : 73F8                		add	#-8,r3
(2) 1471/ 60018D0 : 33C3                		cmp/ge	r12,r3
(2) 1472/ 60018D2 : 8900                		bt	.rgt_ok
(2) 1473/ 60018D4 : 63D3                		mov 	r13,r3
(2) 1474/ 60018D6 :                     .rgt_ok:
(2) 1475/ 60018D6 : 5031                		mov	@(4,r3),r0
(2) 1476/ 60018D8 : 3098                		sub	r9,r0
(2) 1477/ 60018DA : 8800                		cmp/eq	#0,r0
(2) 1478/ 60018DC : 89EA                		bt	set_right
(2) 1479/ 60018DE : 4011                		cmp/pz	r0
(2) 1480/ 60018E0 : 8B29                		bf	.rgt_skip
(2) 1481/ 60018E2 : 400A                		lds	r0,mach
(2) 1482/ 60018E4 : 6933                		mov	r3,r9
(2) 1483/ 60018E6 : 7920                		add	#$20,r9
(2) 1484/ 60018E8 : 6092                		mov 	@r9,r0
(2) 1485/ 60018EA : 3068                		sub 	r6,r0
(2) 1486/ 60018EC : 5691                		mov 	@(4,r9),r6
(2) 1487/ 60018EE : 3678                		sub 	r7,r6
(2) 1488/ 60018F0 : 6703                		mov	r0,r7
(2) 1489/ 60018F2 : 4618                		shll8	r6
(2) 1490/ 60018F4 : 4718                		shll8	r7
(2) 1491/ 60018F6 : E001                		mov	#1,r0
(2) 1492/ 60018F8 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1493/ 60018FA : 090A                		sts	mach,r9
(2) 1494/ 60018FC : 9088                		mov	#_JR,r0
(2) 1495/ 60018FE : 2092                		mov	r9,@r0
(2) 1496/ 6001900 : 1071                		mov	r7,@(4,r0)
(2) 1497/ 6001902 : 0009                		nop
(2) 1498/ 6001904 :                     ; 		mov	@(4,r0),r7
(2) 1499/ 6001904 : 5705                		mov 	@($14,r0),r7
(2) 1500/ 6001906 : 9083                		mov	#_JR,r0
(2) 1501/ 6001908 : 2092                		mov	r9,@r0
(2) 1502/ 600190A : 1061                		mov	r6,@(4,r0)
(2) 1503/ 600190C : 0009                		nop
(2) 1504/ 600190E :                     ; 		mov	@(4,r0),r6
(2) 1505/ 600190E : 5605                		mov 	@($14,r0),r6
(2) 1506/ 6001910 : 4618                		shll8	r6
(2) 1507/ 6001912 : 4718                		shll8	r7
(2) 1508/ 6001914 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+4,r0
(2) 1509/ 6001916 : 2072                		mov	r7,@r0
(2) 1510/ 6001918 : D03A                		mov	#$C0000000|Cach_DDA_Src_R+$C,r0
(2) 1511/ 600191A : 2062                		mov	r6,@r0
(2) 1512/ 600191C : 6732                		mov	@r3,r7
(2) 1513/ 600191E : 3718                		sub 	r1,r7
(2) 1514/ 6001920 : 6613                		mov 	r1,r6
(2) 1515/ 6001922 : 4628                		shll16	r6
(2) 1516/ 6001924 : 4718                		shll8	r7
(2) 1517/ 6001926 : 9073                		mov	#_JR,r0
(2) 1518/ 6001928 : 2092                		mov	r9,@r0
(2) 1519/ 600192A : 1071                		mov	r7,@(4,r0)
(2) 1520/ 600192C : 0009                		nop
(2) 1521/ 600192E :                     ; 		mov	@(4,r0),r7
(2) 1522/ 600192E : 5705                		mov 	@($14,r0),r7
(2) 1523/ 6001930 : 4718                		shll8	r7
(2) 1524/ 6001932 : E000                		mov	#0,r0
(2) 1525/ 6001934 : C104                		mov.w	r0,@(marsGbl_WdgDivLock,gbr)
(2) 1526/ 6001936 :                     .rgt_skip:
(2) 1527/ 6001936 : 000B                		rts
(2) 1528/ 6001938 : 0009                		nop
(2) 1529/ 600193A :                     		align 4
(2) 1530/ 600193C :                     
(2) 1531/ 600193C :                     ; --------------------------------------------------------
(2) 1532/ 600193C :                     
(2) 1533/ 600193C :                     	; r2
(2) 1534/ 600193C :                     	; r3
(2) 1535/ 600193C :                     	; r4 - Left X
(2) 1536/ 600193C :                     	; r5
(2) 1537/ 600193C :                     	; r6 - Right X
(2) 1538/ 600193C :                     	; r7
(2) 1539/ 600193C :                     	; r8
(2) 1540/ 600193C :                     	; r9
(2) 1541/ 600193C :                     	; r10 - Top Y, gets updated after calling put_piece
(2) 1542/ 600193C :                     
(2) 1543/ 600193C :                     put_piece:
(2) 1544/ 600193C : E001                		mov	#1,r0
(2) 1545/ 600193E : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Tell watchdog we are mid-write
(2) 1546/ 6001940 : 5821                		mov	@(4,r2),r8			; Left DDA's Y
(2) 1547/ 6001942 : 5931                		mov	@(4,r3),r9			; Right DDA's Y
(2) 1548/ 6001944 : 38A8                		sub	r10,r8
(2) 1549/ 6001946 : 39A8                		sub	r10,r9
(2) 1550/ 6001948 : 3897                		cmp/gt	r9,r8
(2) 1551/ 600194A : 8900                		bt	.lefth
(2) 1552/ 600194C : 6983                		mov	r8,r9
(2) 1553/ 600194E :                     .lefth:
(2) 1554/ 600194E : 6843                		mov	r4,r8
(2) 1555/ 6001950 : 6063                		mov	r6,r0
(2) 1556/ 6001952 : 4829                		shlr16	r8
(2) 1557/ 6001954 : 208D                		xtrct	r8,r0
(2) 1558/ 6001956 : 1103                		mov	r0,@(plypz_xl,r1)
(2) 1559/ 6001958 : 1156                		mov 	r5,@(plypz_xl_dx,r1)
(2) 1560/ 600195A : 0597                		mul	r9,r5
(2) 1561/ 600195C : 1177                		mov 	r7,@(plypz_xr_dx,r1)
(2) 1562/ 600195E : 021A                		sts	macl,r2
(2) 1563/ 6001960 : 0797                		mul	r9,r7
(2) 1564/ 6001962 : 031A                		sts	macl,r3
(2) 1565/ 6001964 : 342C                		add 	r2,r4
(2) 1566/ 6001966 : 363C                		add	r3,r6
(2) 1567/ 6001968 : 62A3                		mov	r10,r2
(2) 1568/ 600196A : 3A9C                		add	r9,r10
(2) 1569/ 600196C : 6BA3                		mov	r10,r11
(2) 1570/ 600196E : 4228                		shll16	r2
(2) 1571/ 6001970 : 2B2B                		or	r2,r11
(2) 1572/ 6001972 : 11B2                		mov	r11,@(plypz_ytb,r1)
(2) 1573/ 6001974 :                     
(2) 1574/ 6001974 :                     	; r9 - Y multiply
(2) 1575/ 6001974 :                     	;
(2) 1576/ 6001974 :                     	; free:
(2) 1577/ 6001974 :                     	; r2,r3,r5,r7,r8,r11
(2) 1578/ 6001974 : D824                		mov	#$C0000000|Cach_DDA_Src_L,r8
(2) 1579/ 6001976 : D725                		mov	#$C0000000|Cach_DDA_Src_R,r7
(2) 1580/ 6001978 : 6282                		mov	@r8,r2
(2) 1581/ 600197A : 6372                		mov	@r7,r3
(2) 1582/ 600197C : 6523                		mov	r2,r5
(2) 1583/ 600197E : 6033                		mov	r3,r0
(2) 1584/ 6001980 : 4529                		shlr16	r5
(2) 1585/ 6001982 : 205D                		xtrct	r5,r0
(2) 1586/ 6001984 : 1104                		mov	r0,@(plypz_src_xl,r1)
(2) 1587/ 6001986 :                     ; 		mov	r2,@(plypz_src_xl,r1)
(2) 1588/ 6001986 :                     ; 		mov	r3,@(plypz_src_xr,r1)
(2) 1589/ 6001986 :                     
(2) 1590/ 6001986 : 5081                		mov	@(4,r8),r0
(2) 1591/ 6001988 : 5571                		mov	@(4,r7),r5
(2) 1592/ 600198A : 1108                		mov	r0,@(plypz_src_xl_dx,r1)
(2) 1593/ 600198C : 1159                		mov	r5,@(plypz_src_xr_dx,r1)
(2) 1594/ 600198E : 0097                		mul	r9,r0
(2) 1595/ 6001990 : 001A                		sts	macl,r0
(2) 1596/ 6001992 : 0597                		mul	r9,r5
(2) 1597/ 6001994 : 051A                		sts	macl,r5
(2) 1598/ 6001996 : 320C                		add 	r0,r2
(2) 1599/ 6001998 : 335C                		add	r5,r3
(2) 1600/ 600199A : 2822                		mov	r2,@r8
(2) 1601/ 600199C : 2732                		mov	r3,@r7
(2) 1602/ 600199E : 7808                		add	#8,r8	; Go to Y/DY
(2) 1603/ 60019A0 : 7708                		add	#8,r7
(2) 1604/ 60019A2 : 6282                		mov	@r8,r2
(2) 1605/ 60019A4 : 6372                		mov	@r7,r3
(2) 1606/ 60019A6 : 6523                		mov	r2,r5
(2) 1607/ 60019A8 : 6033                		mov	r3,r0
(2) 1608/ 60019AA : 4529                		shlr16	r5
(2) 1609/ 60019AC : 205D                		xtrct	r5,r0
(2) 1610/ 60019AE : 1105                		mov	r0,@(plypz_src_yl,r1)
(2) 1611/ 60019B0 :                     ; 		mov	r2,@(plypz_src_yl,r1)
(2) 1612/ 60019B0 :                     ; 		mov	r3,@(plypz_src_yr,r1)
(2) 1613/ 60019B0 :                     
(2) 1614/ 60019B0 : 5081                		mov	@(4,r8),r0
(2) 1615/ 60019B2 : 5571                		mov	@(4,r7),r5
(2) 1616/ 60019B4 : 110A                		mov	r0,@(plypz_src_yl_dx,r1)
(2) 1617/ 60019B6 : 115B                		mov	r5,@(plypz_src_yr_dx,r1)
(2) 1618/ 60019B8 : 0097                		mul	r9,r0
(2) 1619/ 60019BA : 001A                		sts	macl,r0
(2) 1620/ 60019BC : 0597                		mul	r9,r5
(2) 1621/ 60019BE : 051A                		sts	macl,r5
(2) 1622/ 60019C0 : 320C                		add 	r0,r2
(2) 1623/ 60019C2 : 335C                		add	r5,r3
(2) 1624/ 60019C4 : 2822                		mov	r2,@r8
(2) 1625/ 60019C6 : 2732                		mov	r3,@r7
(2) 1626/ 60019C8 : 4B15                		cmp/pl	r11			; TOP check, 2 steps
(2) 1627/ 60019CA : 8902                		bt	.top_neg
(2) 1628/ 60019CC : 4B28                		shll16	r11
(2) 1629/ 60019CE : 4B15                		cmp/pl	r11
(2) 1630/ 60019D0 : 8B09                		bf	.bad_piece
(2) 1631/ 60019D2 :                     .top_neg:
(2) 1632/ 60019D2 : 50E1                		mov	@(plygn_mtrl,r14),r0
(2) 1633/ 60019D4 : 1101                		mov 	r0,@(plypz_mtrl,r1)
(2) 1634/ 60019D6 : 50E0                		mov	@(plygn_type,r14),r0
(2) 1635/ 60019D8 : 1100                		mov 	r0,@(plypz_type,r1)
(2) 1636/ 60019DA : C60B                		mov	@(marsGbl_PlgnPzIndx_W,gbr),r0
(2) 1637/ 60019DC : 7001                		add	#1,r0
(2) 1638/ 60019DE : C20B                		mov	r0,@(marsGbl_PlgnPzIndx_W,gbr)
(2) 1639/ 60019E0 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0
(2) 1640/ 60019E2 : 7001                		add	#1,r0
(2) 1641/ 60019E4 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 1642/ 60019E6 :                     .bad_piece:
(2) 1643/ 60019E6 : E000                		mov	#0,r0
(2) 1644/ 60019E8 : C103                		mov.w	r0,@(marsGbl_WdgHold,gbr)	; Unlock.
(2) 1645/ 60019EA : 000B                		rts
(2) 1646/ 60019EC : 0009                		nop
(2) 1647/ 60019EE :                     		align 4
(2) 1648/ 60019F0 : C000 0440 C000      		ltorg
          60019F6 : 044C C000 0444 
          60019FC : C000 0450 C000 
          6001A02 : 0454 C000 045C 
          6001A08 : C000 0440 C000 
          6001A0E : 0450 FF00          
(2) 1649/ 6001A12 :                     
(2) 1650/ 6001A12 :                     ; =================================================================
(2) 1651/ 6001A12 :                     ; ------------------------------------------------
(2) 1652/ 6001A12 :                     ; WATCHDOG INTERRUPT
(2) 1653/ 6001A12 :                     ; ------------------------------------------------
(2) 1654/ 6001A12 :                     
(2) 1655/ 6001A12 :                     		align 4
(2) 1656/ 6001A14 :                     m_irq_wdg:
(2) 1657/ 6001A14 : 91A8                		mov	#_FRT,r1
(2) 1658/ 6001A16 : 8417                		mov.b	@(7,r1),r0
(2) 1659/ 6001A18 : CA02                		xor	#2,r0
(2) 1660/ 6001A1A : 8017                		mov.b	r0,@(7,r1)
(2) 1661/ 6001A1C : C503                		mov.w	@(marsGbl_WdgHold,gbr),r0
(2) 1662/ 6001A1E : 2008                		tst	r0,r0
(2) 1663/ 6001A20 : 8B16                		bf	.exit_wdg
(2) 1664/ 6001A22 :                     ; ------------------------------------------------
(2) 1665/ 6001A22 :                     
(2) 1666/ 6001A22 : C502                		mov.w	@(marsGbl_WdgTask,gbr),r0
(2) 1667/ 6001A24 : 8807                		cmp/eq	#7,r0
(2) 1668/ 6001A26 : 8B1B                		bf	.wdg_main
(2) 1669/ 6001A28 :                     
(2) 1670/ 6001A28 :                     ; ------------------------------------------------
(2) 1671/ 6001A28 :                     ; Special...
(2) 1672/ 6001A28 : D14B                		mov	#_vdpreg,r1
(2) 1673/ 6001A2A : 8515                .wait_fb:	mov.w   @($0A,r1),r0			; Framebuffer locked?
(2) 1674/ 6001A2C : C802                		tst     #%10,r0
(2) 1675/ 6001A2E : 8BFC                		bf      .wait_fb
(2) 1676/ 6001A30 : 8513                		mov.w   @(6,r1),r0			; SVDP-fill address
(2) 1677/ 6001A32 : 705F                		add     #$5F,r0				; Pre-increment
(2) 1678/ 6001A34 : 8113                		mov.w   r0,@(6,r1)
(2) 1679/ 6001A36 : 9098                		mov.w   #320/2,r0			; SVDP-fill size (320+ pixels)
(2) 1680/ 6001A38 : 8112                		mov.w   r0,@(4,r1)
(2) 1681/ 6001A3A : E000                		mov.w	#$0000,r0			; SVDP-fill pixel data
(2) 1682/ 6001A3C :                     ; 		mov.w	#$1000,r0
(2) 1683/ 6001A3C : 8114                		mov.w   r0,@(8,r1)			; now SVDP-fill is working.
(2) 1684/ 6001A3E : C507                		mov.w	@(marsGbl_WdgClLines,gbr),r0	; Decrement a line to progress
(2) 1685/ 6001A40 : 4010                		dt	r0
(2) 1686/ 6001A42 : 8F05                		bf/s	.exit_wdg
(2) 1687/ 6001A44 : C107                		mov.w	r0,@(marsGbl_WdgClLines,gbr)	; Write new value before branch
(2) 1688/ 6001A46 : E005                		mov	#5,r0				; Set watchdog task $05
(2) 1689/ 6001A48 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1690/ 6001A4A :                     .on_clr:
(2) 1691/ 6001A4A : 000B                		rts
(2) 1692/ 6001A4C : 0009                		nop
(2) 1693/ 6001A4E :                     		align 4
(2) 1694/ 6001A50 :                     .exit_wdg:
(2) 1695/ 6001A50 : 918C                		mov.w   #$FE80,r1
(2) 1696/ 6001A52 : 908C                		mov.w   #$A518,r0		; OFF
(2) 1697/ 6001A54 : 2101                		mov.w   r0,@r1
(2) 1698/ 6001A56 : CB20                		or      #$20,r0			; ON
(2) 1699/ 6001A58 : 2101                		mov.w   r0,@r1
(2) 1700/ 6001A5A : 9089                		mov.w   #$5A20,r0		; Wdg-timer: $20
(2) 1701/ 6001A5C : 000B                		rts
(2) 1702/ 6001A5E : 2101                		mov.w   r0,@r1
(2) 1703/ 6001A60 :                     		align 4
(2) 1704/ 6001A60 :                     
(2) 1705/ 6001A60 :                     ; ------------------------------------------------
(2) 1706/ 6001A60 :                     ; Process drawing now.
(2) 1707/ 6001A60 :                     .wdg_main:
(2) 1708/ 6001A60 : 4008                		shll2	r0
(2) 1709/ 6001A62 : D13E                		mov	#.list,r1
(2) 1710/ 6001A64 : 001E                		mov	@(r1,r0),r0
(2) 1711/ 6001A66 : 402B                		jmp	@r0
(2) 1712/ 6001A68 : 0009                		nop
(2) 1713/ 6001A6A :                     		align 4
(2) 1714/ 6001A6C :                     .list:
(2) 1715/ 6001A6C : 0600 1DCC           		dc.l slvplgn_00		; NULL task, exit.
(2) 1716/ 6001A70 : 0600 1A8C           		dc.l slvplgn_01		; 2D SVDP fast write
(2) 1717/ 6001A74 : 0600 1DCC           		dc.l slvplgn_00
(2) 1718/ 6001A78 : 0600 1DCC           		dc.l slvplgn_00
(2) 1719/ 6001A7C : 0600 1DCC           		dc.l slvplgn_00		; $04 -
(2) 1720/ 6001A80 : 0600 1AD4           		dc.l slvplgn_05		; Main drawing routine
(2) 1721/ 6001A84 : 0600 1A92           		dc.l slvplgn_06		; Resume from solid color
(2) 1722/ 6001A88 : 0600 1DCC           		dc.l slvplgn_00		; ***
(2) 1723/ 6001A8C :                     
(2) 1724/ 6001A8C :                     ; ------------------------------------------------
(2) 1725/ 6001A8C :                     ; 2D MODE
(2) 1726/ 6001A8C :                     ; ------------------------------------------------
(2) 1727/ 6001A8C :                     
(2) 1728/ 6001A8C :                     slvplgn_01:
(2) 1729/ 6001A8C : 2F26                		mov	r2,@-r15
(2) 1730/ 6001A8E :                     ; 		mov	r3,@-r15
(2) 1731/ 6001A8E :                     ; 		mov	r4,@-r15
(2) 1732/ 6001A8E :                     ; 		mov.w	@(marsGbl_SVdpQWrt,gbr),r0
(2) 1733/ 6001A8E :                     ; 		mov	r0,r1
(2) 1734/ 6001A8E :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1735/ 6001A8E :                     ; 		cmp/eq	r1,r0
(2) 1736/ 6001A8E :                     ; 		bt	.no_finish
(2) 1737/ 6001A8E :                     ; 		and	#%111111,r0
(2) 1738/ 6001A8E :                     ; 		shll2	r0
(2) 1739/ 6001A8E :                     ; 		shll	r0
(2) 1740/ 6001A8E :                     ; 		mov	#$C0000000|RAM_Mars_SVdpDrwList,r4
(2) 1741/ 6001A8E :                     ; 		mov	#_framebuffer,r3
(2) 1742/ 6001A8E :                     ; 		add	r0,r4
(2) 1743/ 6001A8E :                     ; 		mov	@r4+,r1		; Dest
(2) 1744/ 6001A8E :                     ; 		mov	@r4+,r2		; Data
(2) 1745/ 6001A8E :                     ; 		add	r3,r1
(2) 1746/ 6001A8E :                     ; 		mov	r2,@r1		; <--
(2) 1747/ 6001A8E :                     ; 		mov.w	@(marsGbl_SVdpQRead,gbr),r0
(2) 1748/ 6001A8E :                     ; 		add	#1,r0
(2) 1749/ 6001A8E :                     ; 		mov.w	r0,@(marsGbl_SVdpQRead,gbr)
(2) 1750/ 6001A8E :                     ; .no_finish:
(2) 1751/ 6001A8E :                     ; 		mov	#CS3+$40,r1
(2) 1752/ 6001A8E :                     ; 		mov	@r1,r0
(2) 1753/ 6001A8E :                     ; 		add	#1,r0
(2) 1754/ 6001A8E :                     ; 		mov	r0,@r1
(2) 1755/ 6001A8E :                     ; .no_queue:
(2) 1756/ 6001A8E :                     ; 		mov	@r15+,r4
(2) 1757/ 6001A8E :                     ; 		mov	@r15+,r3
(2) 1758/ 6001A8E : A1B0                		bra	drwtask_exit
(2) 1759/ 6001A90 : E220                		mov	#$20,r2
(2) 1760/ 6001A92 :                     
(2) 1761/ 6001A92 :                     ; ------------------------------------------------
(2) 1762/ 6001A92 :                     ; Task $06
(2) 1763/ 6001A92 :                     ;
(2) 1764/ 6001A92 :                     ; Resume from solid color
(2) 1765/ 6001A92 :                     ; ------------------------------------------------
(2) 1766/ 6001A92 :                     
(2) 1767/ 6001A92 :                     slvplgn_06:
(2) 1768/ 6001A92 : 2F26                		mov	r2,@-r15
(2) 1769/ 6001A94 : 2F36                		mov	r3,@-r15
(2) 1770/ 6001A96 : 2F46                		mov	r4,@-r15
(2) 1771/ 6001A98 : 2F56                		mov	r5,@-r15
(2) 1772/ 6001A9A : 2F66                		mov	r6,@-r15
(2) 1773/ 6001A9C : 2F76                		mov	r7,@-r15
(2) 1774/ 6001A9E : 2F86                		mov	r8,@-r15
(2) 1775/ 6001AA0 : 2F96                		mov	r9,@-r15
(2) 1776/ 6001AA2 : 2FA6                		mov	r10,@-r15
(2) 1777/ 6001AA4 : 2FB6                		mov	r11,@-r15
(2) 1778/ 6001AA6 : 2FC6                		mov	r12,@-r15
(2) 1779/ 6001AA8 : 2FD6                		mov	r13,@-r15
(2) 1780/ 6001AAA : 2FE6                		mov	r14,@-r15
(2) 1781/ 6001AAC : 4F12                		sts	macl,@-r15
(2) 1782/ 6001AAE : 4F02                		sts	mach,@-r15
(2) 1783/ 6001AB0 : D02B                		mov	#$C0000000|Cach_LnDrw_L,r0
(2) 1784/ 6001AB2 : 6E06                		mov	@r0+,r14
(2) 1785/ 6001AB4 : 6D06                		mov	@r0+,r13
(2) 1786/ 6001AB6 : 6C06                		mov	@r0+,r12
(2) 1787/ 6001AB8 : 6B06                		mov	@r0+,r11
(2) 1788/ 6001ABA : 6A06                		mov	@r0+,r10
(2) 1789/ 6001ABC : 6906                		mov	@r0+,r9
(2) 1790/ 6001ABE : 6806                		mov	@r0+,r8
(2) 1791/ 6001AC0 : 6706                		mov	@r0+,r7
(2) 1792/ 6001AC2 : 6606                		mov	@r0+,r6
(2) 1793/ 6001AC4 : 6506                		mov	@r0+,r5
(2) 1794/ 6001AC6 : 6406                		mov	@r0+,r4
(2) 1795/ 6001AC8 : 6306                		mov	@r0+,r3
(2) 1796/ 6001ACA : 6206                		mov	@r0+,r2
(2) 1797/ 6001ACC : 6106                		mov	@r0+,r1
(2) 1798/ 6001ACE : E005                		mov	#5,r0
(2) 1799/ 6001AD0 : A16C                		bra	drwsld_updline
(2) 1800/ 6001AD2 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)	; Set task $05
(2) 1801/ 6001AD4 :                     
(2) 1802/ 6001AD4 :                     ; ------------------------------------------------
(2) 1803/ 6001AD4 :                     ; Task $05
(2) 1804/ 6001AD4 :                     ;
(2) 1805/ 6001AD4 :                     ; Draw polygon piece
(2) 1806/ 6001AD4 :                     ; ------------------------------------------------
(2) 1807/ 6001AD4 :                     
(2) 1808/ 6001AD4 :                     slvplgn_05:
(2) 1809/ 6001AD4 : 2F26                		mov	r2,@-r15
(2) 1810/ 6001AD6 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Any pieces to draw?
(2) 1811/ 6001AD8 : 4015                		cmp/pl	r0
(2) 1812/ 6001ADA : 8907                		bt	.has_pz
(2) 1813/ 6001ADC : C505                		mov.w	@(marsGbl_WdgReady,gbr),r0	; Finished slicing?
(2) 1814/ 6001ADE : 2008                		tst	r0,r0
(2) 1815/ 6001AE0 : 8901                		bt	.exit
(2) 1816/ 6001AE2 : E000                		mov	#0,r0				; Watchdog out.
(2) 1817/ 6001AE4 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 1818/ 6001AE6 : A184                .exit:		bra	drwtask_exit
(2) 1819/ 6001AE8 : E220                		mov	#$20,r2				; Wdg-timer: $20
(2) 1820/ 6001AEA :                     		align 4
(2) 1821/ 6001AEC :                     .has_pz:
(2) 1822/ 6001AEC : 2F36                		mov	r3,@-r15			; Save all these regs
(2) 1823/ 6001AEE : 2F46                		mov	r4,@-r15
(2) 1824/ 6001AF0 : 2F56                		mov	r5,@-r15
(2) 1825/ 6001AF2 : 2F66                		mov	r6,@-r15
(2) 1826/ 6001AF4 : 2F76                		mov	r7,@-r15
(2) 1827/ 6001AF6 : 2F86                		mov	r8,@-r15
(2) 1828/ 6001AF8 : 2F96                		mov	r9,@-r15
(2) 1829/ 6001AFA : 2FA6                		mov	r10,@-r15
(2) 1830/ 6001AFC : 2FB6                		mov	r11,@-r15
(2) 1831/ 6001AFE : 2FC6                		mov	r12,@-r15
(2) 1832/ 6001B00 : 2FD6                		mov	r13,@-r15
(2) 1833/ 6001B02 : 2FE6                		mov	r14,@-r15
(2) 1834/ 6001B04 : 4F12                		sts	macl,@-r15
(2) 1835/ 6001B06 : 4F02                		sts	mach,@-r15
(2) 1836/ 6001B08 :                     drwtsk1_newpz:
(2) 1837/ 6001B08 : DE16                		mov	#$C0000000|RAM_Mars_SVdpDrwList,r14
(2) 1838/ 6001B0A : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 1839/ 6001B0C : C90F                		and	#16-1,r0
(2) 1840/ 6001B0E : 4018                		shll8	r0
(2) 1841/ 6001B10 : 4009                		shlr2	r0
(2) 1842/ 6001B12 : 3E0C                		add	r0,r14
(2) 1843/ 6001B14 : 59E2                		mov	@(plypz_ytb,r14),r9	; Start grabbing StartY/EndY positions
(2) 1844/ 6001B16 : 6A9F                		exts.w	r9,r10			; r10 - Bottom
(2) 1845/ 6001B18 : 4929                		shlr16	r9			;  r9 - Top
(2) 1846/ 6001B1A : 699F                		exts.w	r9,r9
(2) 1847/ 6001B1C : 3A90                		cmp/eq	r9,r10			; if Top == Bottom, exit
(2) 1848/ 6001B1E : 8908                		bt	.invld_y
(2) 1849/ 6001B20 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0	; if Top > 224, skip
(2) 1850/ 6001B20 :                     ; 		shll2	r0
(2) 1851/ 6001B20 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1852/ 6001B22 : 3903                		cmp/ge	r0,r9
(2) 1853/ 6001B24 : 8905                		bt	.invld_y		; if Bottom > 224, add max limit
(2) 1854/ 6001B26 : 3A07                		cmp/gt	r0,r10
(2) 1855/ 6001B28 : 8B00                		bf	.len_max
(2) 1856/ 6001B2A : 6A03                		mov	r0,r10
(2) 1857/ 6001B2C :                     .len_max:
(2) 1858/ 6001B2C : 3A98                		sub	r9,r10			; Turn r10 into line lenght (Bottom - Top)
(2) 1859/ 6001B2E : 4A15                		cmp/pl	r10
(2) 1860/ 6001B30 : 8904                		bt	.valid_y
(2) 1861/ 6001B32 :                     .invld_y:
(2) 1862/ 6001B32 : A140                		bra	drwsld_nextpz		; if LEN < 0 then check next one instead.
(2) 1863/ 6001B34 : 0009                		nop
(2) 1864/ 6001B36 :                     		align 4
(2) 1865/ 6001B38 :                     .no_pz:
(2) 1866/ 6001B38 : A15B                		bra	drwtask_exit
(2) 1867/ 6001B3A : E210                		mov	#$10,r2
(2) 1868/ 6001B3C :                     		align 4
(2) 1869/ 6001B3C :                     .valid_y:
(2) 1870/ 6001B3C : 51E3                		mov	@(plypz_xl,r14),r1
(2) 1871/ 6001B3E : 6313                		mov	r1,r3
(2) 1872/ 6001B40 : 52E6                		mov	@(plypz_xl_dx,r14),r2		; r2 - DX left
(2) 1873/ 6001B42 : 4129                		shlr16	r1
(2) 1874/ 6001B44 : 54E7                		mov	@(plypz_xr_dx,r14),r4		; r4 - DX right
(2) 1875/ 6001B46 : 4128                		shll16	r1
(2) 1876/ 6001B48 : 50E0                		mov	@(plypz_type,r14),r0		; Check material options
(2) 1877/ 6001B4A : 4328                		shll16	r3
(2) 1878/ 6001B4C : 4029                		shlr16	r0
(2) 1879/ 6001B4E : 4019                		shlr8	r0
(2) 1880/ 6001B50 : C880                 		tst	#PLGN_TEXURE,r0			; Texture mode?
(2) 1881/ 6001B52 : 8B13                 		bf	drwtsk_texmode
(2) 1882/ 6001B54 : A0D4                		bra	drwtsk_solidmode
(2) 1883/ 6001B56 : 0009                		nop
(2) 1884/ 6001B58 :                     		align 4
(2) 1885/ 6001B58 : 2000 4100 0600      		ltorg
          6001B5E : 1A6C C000 0460 
          6001B64 : C000 0000 FE10 
          6001B6A : 00A0 FE80 A518 
          6001B70 : 5A20             
(2) 1886/ 6001B72 :                     
(2) 1887/ 6001B72 :                     ; ------------------------------------
(2) 1888/ 6001B72 :                     ; Texture mode
(2) 1889/ 6001B72 :                     ;
(2) 1890/ 6001B72 :                     ; r1  - XL
(2) 1891/ 6001B72 :                     ; r2  - XL DX
(2) 1892/ 6001B72 :                     ; r3  - XR
(2) 1893/ 6001B72 :                     ; r4  - XR DX
(2) 1894/ 6001B72 :                     ; r5  - SRC XL
(2) 1895/ 6001B72 :                     ; r6  - SRC XR
(2) 1896/ 6001B72 :                     ; r7  - SRC YL
(2) 1897/ 6001B72 :                     ; r8  - SRC YR
(2) 1898/ 6001B72 :                     ; r9  - Y current
(2) 1899/ 6001B72 :                     ; r10  - Number of lines
(2) 1900/ 6001B72 :                     ; ------------------------------------
(2) 1901/ 6001B72 :                     
(2) 1902/ 6001B72 :                     		align 4
(2) 1903/ 6001B74 :                     go_drwsld_updline_tex:
(2) 1904/ 6001B74 : A0A8                		bra	drwsld_updline_tex
(2) 1905/ 6001B76 : 0009                		nop
(2) 1906/ 6001B78 :                     go_drwtex_gonxtpz:
(2) 1907/ 6001B78 : A11D                		bra	drwsld_nextpz
(2) 1908/ 6001B7A : 0009                		nop
(2) 1909/ 6001B7C :                     		align 4
(2) 1910/ 6001B7C :                     drwtsk_texmode:
(2) 1911/ 6001B7C : C504                		mov.w	@(marsGbl_WdgDivLock,gbr),r0	; Waste interrupt if MarsVideo_MakePolygon is in the
(2) 1912/ 6001B7E : 8801                		cmp/eq	#1,r0				; middle of HW-division
(2) 1913/ 6001B80 : 8B02                		bf	.tex_valid
(2) 1914/ 6001B82 : A128                		bra	drwtask_return
(2) 1915/ 6001B84 : E210                		mov	#$10,r2				; Exit Wdg-timer: $10 (comeback quickly)
(2) 1916/ 6001B86 :                     		align 4
(2) 1917/ 6001B88 :                     .tex_valid:
(2) 1918/ 6001B88 : 55E4                		mov	@(plypz_src_xl,r14),r5		; Texture X left/right
(2) 1919/ 6001B8A : 6653                		mov	r5,r6
(2) 1920/ 6001B8C : 57E5                		mov	@(plypz_src_yl,r14),r7		; Texture Y up/down
(2) 1921/ 6001B8E : 4529                		shlr16	r5
(2) 1922/ 6001B90 : 6873                		mov	r7,r8
(2) 1923/ 6001B92 : 4729                		shlr16	r7
(2) 1924/ 6001B94 :                     
(2) 1925/ 6001B94 : 4528                		shll16	r5
(2) 1926/ 6001B96 : 4628                		shll16	r6
(2) 1927/ 6001B98 : 4728                		shll16	r7
(2) 1928/ 6001B9A : 4828                		shll16	r8
(2) 1929/ 6001B9C :                     drwsld_nxtline_tex:
(2) 1930/ 6001B9C : 4911                		cmp/pz	r9				; Y Start below 0?
(2) 1931/ 6001B9E : 8BE9                		bf	go_drwsld_updline_tex
(2) 1932/ 6001BA0 :                     ; 		mov	#SET_3DFIELD_HGHT>>2,r0		; Y Start after 224?
(2) 1933/ 6001BA0 :                     ; 		shll2	r0
(2) 1934/ 6001BA0 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 1935/ 6001BA2 : 3903                		cmp/ge	r0,r9
(2) 1936/ 6001BA4 : 89E8                		bt	go_drwtex_gonxtpz
(2) 1937/ 6001BA6 :                     
(2) 1938/ 6001BA6 : D050                		mov	#$C0000000|Cach_Bkup_S,r0
(2) 1939/ 6001BA8 : 2016                		mov	r1,@-r0
(2) 1940/ 6001BAA : 2026                		mov	r2,@-r0
(2) 1941/ 6001BAC : 2036                		mov	r3,@-r0
(2) 1942/ 6001BAE : 2046                		mov	r4,@-r0
(2) 1943/ 6001BB0 : 2056                		mov	r5,@-r0
(2) 1944/ 6001BB2 : 2066                		mov	r6,@-r0
(2) 1945/ 6001BB4 : 2076                		mov	r7,@-r0
(2) 1946/ 6001BB6 : 2086                		mov	r8,@-r0
(2) 1947/ 6001BB8 : 2096                		mov	r9,@-r0
(2) 1948/ 6001BBA : 20A6                		mov	r10,@-r0
(2) 1949/ 6001BBC : 20B6                		mov	r11,@-r0
(2) 1950/ 6001BBE :                     	; r10-r11 are usable
(2) 1951/ 6001BBE : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 1952/ 6001BC0 : 6B03                		mov	r0,r11			; r11 - Width
(2) 1953/ 6001BC2 : 4129                		shlr16	r1
(2) 1954/ 6001BC4 : 4329                		shlr16	r3
(2) 1955/ 6001BC6 : 611F                		exts.w	r1,r1
(2) 1956/ 6001BC8 : 633F                		exts.w	r3,r3
(2) 1957/ 6001BCA : 6033                		mov	r3,r0			; r0: X Right - X Left
(2) 1958/ 6001BCC : 3018                		sub	r1,r0
(2) 1959/ 6001BCE : 4015                		cmp/pl	r0			; Line reversed?
(2) 1960/ 6001BD0 : 8908                		bt	.txrevers
(2) 1961/ 6001BD2 : 6033                		mov	r3,r0			; Swap XL and XR values
(2) 1962/ 6001BD4 : 6313                		mov	r1,r3
(2) 1963/ 6001BD6 : 6103                		mov	r0,r1
(2) 1964/ 6001BD8 : 6053                		mov	r5,r0
(2) 1965/ 6001BDA : 6563                		mov	r6,r5
(2) 1966/ 6001BDC : 6603                		mov	r0,r6
(2) 1967/ 6001BDE : 6073                		mov	r7,r0
(2) 1968/ 6001BE0 : 6783                		mov	r8,r7
(2) 1969/ 6001BE2 : 6803                		mov	r0,r8
(2) 1970/ 6001BE4 :                     .txrevers:
(2) 1971/ 6001BE4 : 3310                		cmp/eq	r1,r3				; Same X position?
(2) 1972/ 6001BE6 : 8962                		bt	.tex_skip_line
(2) 1973/ 6001BE8 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; Y Start after 224?
(2) 1974/ 6001BE8 :                     ; 		shll2	r0
(2) 1975/ 6001BE8 : 4311                		cmp/pz	r3
(2) 1976/ 6001BEA : 8B60                		bf	.tex_skip_line
(2) 1977/ 6001BEC : 31B7                		cmp/gt	r11,r1				; X left > 320?
(2) 1978/ 6001BEE : 895E                		bt	.tex_skip_line
(2) 1979/ 6001BF0 : 6233                		mov	r3,r2
(2) 1980/ 6001BF2 : 6013                		mov 	r1,r0
(2) 1981/ 6001BF4 : 3208                		sub 	r0,r2
(2) 1982/ 6001BF6 : 3658                		sub	r5,r6
(2) 1983/ 6001BF8 : 3878                		sub	r7,r8
(2) 1984/ 6001BFA :                     
(2) 1985/ 6001BFA :                     	; Calculate new DX values
(2) 1986/ 6001BFA :                     	; make sure DIV is not in use
(2) 1987/ 6001BFA :                     	; before getting here.
(2) 1988/ 6001BFA :                     	; (set marsGbl_WdgDivLock to 1)
(2) 1989/ 6001BFA : 907F                		mov	#_JR,r0				; r6 / r2
(2) 1990/ 6001BFC : 2022                		mov	r2,@r0
(2) 1991/ 6001BFE : 1061                		mov	r6,@(4,r0)
(2) 1992/ 6001C00 : 0009                		nop
(2) 1993/ 6001C02 :                     ; 		mov	@(4,r0),r6			; r8 / r2
(2) 1994/ 6001C02 : 5605                		mov 	@($14,r0),r6
(2) 1995/ 6001C04 : 2022                		mov	r2,@r0
(2) 1996/ 6001C06 : 1081                		mov	r8,@(4,r0)
(2) 1997/ 6001C08 : 0009                		nop
(2) 1998/ 6001C0A :                     ; 		mov	@(4,r0),r8
(2) 1999/ 6001C0A : 5805                		mov 	@($14,r0),r8
(2) 2000/ 6001C0C :                     	; Limit X destination points
(2) 2001/ 6001C0C :                     	; and correct the texture's X positions
(2) 2002/ 6001C0C :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0		; XR point > 320?
(2) 2003/ 6001C0C :                     ; 		shll2	r0
(2) 2004/ 6001C0C : 33B7                		cmp/gt	r11,r3
(2) 2005/ 6001C0E : 8B00                		bf	.tr_fix
(2) 2006/ 6001C10 : 63B3                		mov	r11,r3				; Force XR to 320
(2) 2007/ 6001C12 :                     .tr_fix:
(2) 2008/ 6001C12 : 4111                		cmp/pz	r1				; XL point < 0?
(2) 2009/ 6001C14 : 8907                		bt	.tl_fix
(2) 2010/ 6001C16 : 621B                		neg	r1,r2				; Fix texture positions
(2) 2011/ 6001C18 : 0267                		mul	r6,r2
(2) 2012/ 6001C1A : 001A                		sts	macl,r0
(2) 2013/ 6001C1C : 350C                		add	r0,r5
(2) 2014/ 6001C1E : 0287                		mul	r8,r2
(2) 2015/ 6001C20 : 001A                		sts	macl,r0
(2) 2016/ 6001C22 : 370C                		add	r0,r7
(2) 2017/ 6001C24 : 211A                		xor	r1,r1				; And reset XL to 0
(2) 2018/ 6001C26 :                     .tl_fix:
(2) 2019/ 6001C26 :                     
(2) 2020/ 6001C26 :                     	; Start
(2) 2021/ 6001C26 : E0FE                		mov	#-2,r0
(2) 2022/ 6001C28 : 2109                		and	r0,r1
(2) 2023/ 6001C2A : 2309                		and	r0,r3
(2) 2024/ 6001C2C : 7301                		add	#1,r3				; LAZY PATCH
(2) 2025/ 6001C2E : 3318                		sub 	r1,r3
(2) 2026/ 6001C30 : 4321                		shar	r3
(2) 2027/ 6001C32 : 4315                		cmp/pl	r3
(2) 2028/ 6001C34 : 8B3B                		bf	.tex_skip_line
(2) 2029/ 6001C36 :                     
(2) 2030/ 6001C36 : DA2D                		mov	#_overwrite+$200,r10
(2) 2031/ 6001C38 : 54E0                		mov	@(plypz_type,r14),r4		;  r4 - texture width|palinc
(2) 2032/ 6001C3A : 6D43                		mov	r4,r13
(2) 2033/ 6001C3C : 4429                		shlr16	r4
(2) 2034/ 6001C3E : 6DDC                		extu.b	r13,r13
(2) 2035/ 6001C40 : 925D                		mov	#$3FFF,r2
(2) 2036/ 6001C42 : 2429                		and	r2,r4
(2) 2037/ 6001C44 : 6093                		mov 	r9,r0				; Y position * $200
(2) 2038/ 6001C46 : 4018                		shll8	r0
(2) 2039/ 6001C48 : 4000                		shll	r0
(2) 2040/ 6001C4A : 3A0C                		add 	r0,r10				; Add Y
(2) 2041/ 6001C4C : 3A1C                		add 	r1,r10				; Add X
(2) 2042/ 6001C4E : 51E1                		mov	@(plypz_mtrl,r14),r1
(2) 2043/ 6001C50 : E002                		mov	#CS1>>24,r0
(2) 2044/ 6001C52 : 4028                		shll16	r0
(2) 2045/ 6001C54 : 4018                		shll8	r0
(2) 2046/ 6001C56 : 3103                		cmp/ge	r0,r1
(2) 2047/ 6001C58 : 8901                		bt	.from_rom
(2) 2048/ 6001C5A : D025                		mov	#RAM_Mars_VramData,r0		; <-- TEXTURE BUFFER
(2) 2049/ 6001C5C : 310C                		add	r0,r1
(2) 2050/ 6001C5E :                     .from_rom:
(2) 2051/ 6001C5E :                     
(2) 2052/ 6001C5E : D225                		mov	#_vdpreg,r2		; Any pending SVDP fill?
(2) 2053/ 6001C60 : 8525                .w_fb:		mov.w	@(vdpsts,r2),r0
(2) 2054/ 6001C62 : C802                		tst	#%10,r0
(2) 2055/ 6001C64 : 8BFC                		bf	.w_fb
(2) 2056/ 6001C66 :                     .tex_xloop:
(2) 2057/ 6001C66 : 6273                		mov	r7,r2
(2) 2058/ 6001C68 : 4229                		shlr16	r2
(2) 2059/ 6001C6A : 242F                		muls	r2,r4
(2) 2060/ 6001C6C : 6253                		mov	r5,r2	   		; Build column index
(2) 2061/ 6001C6E : 001A                		sts	macl,r0
(2) 2062/ 6001C70 : 4229                		shlr16	r2
(2) 2063/ 6001C72 : 302C                		add	r2,r0
(2) 2064/ 6001C74 : 001C                		mov.b	@(r0,r1),r0		; Read left pixel
(2) 2065/ 6001C76 : C8FF                		tst	#$FF,r0
(2) 2066/ 6001C78 : 8900                		bt	.trns_1
(2) 2067/ 6001C7A : 30DC                		add	r13,r0			; color-index increment
(2) 2068/ 6001C7C :                     .trns_1:
(2) 2069/ 6001C7C : 600C                		extu.b	r0,r0
(2) 2070/ 6001C7E : 4018                		shll8	r0
(2) 2071/ 6001C80 : 400A                		lds	r0,mach			; Save left pixel
(2) 2072/ 6001C82 : 356C                		add	r6,r5			; Next X
(2) 2073/ 6001C84 : 378C                		add	r8,r7			; Next Y
(2) 2074/ 6001C86 :                     
(2) 2075/ 6001C86 : 6273                		mov	r7,r2
(2) 2076/ 6001C88 : 4229                		shlr16	r2
(2) 2077/ 6001C8A : 242F                		muls	r2,r4
(2) 2078/ 6001C8C : 6253                		mov	r5,r2	   		; Build column index
(2) 2079/ 6001C8E : 001A                		sts	macl,r0
(2) 2080/ 6001C90 : 4229                		shlr16	r2
(2) 2081/ 6001C92 : 302C                		add	r2,r0
(2) 2082/ 6001C94 : 001C                		mov.b	@(r0,r1),r0		; Read right pixel
(2) 2083/ 6001C96 : C8FF                		tst	#$FF,r0
(2) 2084/ 6001C98 : 8900                		bt	.trns2
(2) 2085/ 6001C9A : 30DC                		add	r13,r0			; color-index increment
(2) 2086/ 6001C9C :                     .trns2:
(2) 2087/ 6001C9C : 600C                		extu.b	r0,r0
(2) 2088/ 6001C9E : 020A                		sts	mach,r2
(2) 2089/ 6001CA0 : 202B                		or	r2,r0
(2) 2090/ 6001CA2 :                     
(2) 2091/ 6001CA2 : 2A01                		mov.w	r0,@r10
(2) 2092/ 6001CA4 : 7A02                		add	#2,r10
(2) 2093/ 6001CA6 : 356C                		add	r6,r5			; Next X
(2) 2094/ 6001CA8 : 4310                		dt	r3
(2) 2095/ 6001CAA : 8FDC                		bf/s	.tex_xloop
(2) 2096/ 6001CAC : 378C                		add	r8,r7			; Next Y
(2) 2097/ 6001CAE :                     .tex_skip_line:
(2) 2098/ 6001CAE : D012                		mov	#$C0000000|Cach_Bkup_LB,r0
(2) 2099/ 6001CB0 : 6B06                		mov	@r0+,r11
(2) 2100/ 6001CB2 : 6A06                		mov	@r0+,r10
(2) 2101/ 6001CB4 : 6906                		mov	@r0+,r9
(2) 2102/ 6001CB6 : 6806                		mov	@r0+,r8
(2) 2103/ 6001CB8 : 6706                		mov	@r0+,r7
(2) 2104/ 6001CBA : 6606                		mov	@r0+,r6
(2) 2105/ 6001CBC : 6506                		mov	@r0+,r5
(2) 2106/ 6001CBE : 6406                		mov	@r0+,r4
(2) 2107/ 6001CC0 : 6306                		mov	@r0+,r3
(2) 2108/ 6001CC2 : 6206                		mov	@r0+,r2
(2) 2109/ 6001CC4 : 6106                		mov	@r0+,r1
(2) 2110/ 6001CC6 : 0009                		nop
(2) 2111/ 6001CC8 :                     drwsld_updline_tex:
(2) 2112/ 6001CC8 : 50E8                		mov	@(plypz_src_xl_dx,r14),r0	; Update DX postions
(2) 2113/ 6001CCA : 350C                		add	r0,r5
(2) 2114/ 6001CCC : 50E9                		mov	@(plypz_src_xr_dx,r14),r0
(2) 2115/ 6001CCE : 360C                		add	r0,r6
(2) 2116/ 6001CD0 : 50EA                		mov	@(plypz_src_yl_dx,r14),r0
(2) 2117/ 6001CD2 : 370C                		add	r0,r7
(2) 2118/ 6001CD4 : 50EB                		mov	@(plypz_src_yr_dx,r14),r0
(2) 2119/ 6001CD6 : 380C                		add	r0,r8
(2) 2120/ 6001CD8 : 312C                		add	r2,r1				; Update X postions
(2) 2121/ 6001CDA : 4A10                		dt	r10
(2) 2122/ 6001CDC : 8D02                		bt/s	drwtex_nextpz
(2) 2123/ 6001CDE : 334C                		add	r4,r3
(2) 2124/ 6001CE0 : AF5C                		bra	drwsld_nxtline_tex
(2) 2125/ 6001CE2 : 7901                		add	#1,r9
(2) 2126/ 6001CE4 :                     drwtex_nextpz:
(2) 2127/ 6001CE4 : A067                		bra	drwsld_nextpz
(2) 2128/ 6001CE6 : 0009                		nop
(2) 2129/ 6001CE8 :                     		align 4
(2) 2130/ 6001CE8 : C000 04C4 2402      		ltorg
          6001CEE : 0200 0600 FAE0 
          6001CF4 : 2000 4100 C000 
          6001CFA : 0498 FF00 3FFF    
(2) 2131/ 6001D00 :                     
(2) 2132/ 6001D00 :                     ; ------------------------------------
(2) 2133/ 6001D00 :                     ; Solid Color
(2) 2134/ 6001D00 :                     ;
(2) 2135/ 6001D00 :                     ; r1  - XL
(2) 2136/ 6001D00 :                     ; r2  - XL DX
(2) 2137/ 6001D00 :                     ; r3  - XR
(2) 2138/ 6001D00 :                     ; r4  - XR DX
(2) 2139/ 6001D00 :                     ; r9  - Y current
(2) 2140/ 6001D00 :                     ; r10  - Number of lines
(2) 2141/ 6001D00 :                     ; ------------------------------------
(2) 2142/ 6001D00 :                     
(2) 2143/ 6001D00 :                     drwtsk_solidmode:
(2) 2144/ 6001D00 :                     ; 		mov	#$FF,r0
(2) 2145/ 6001D00 : 56E1                		mov	@(plypz_mtrl,r14),r6
(2) 2146/ 6001D02 : 55E0                		mov	@(plypz_type,r14),r5
(2) 2147/ 6001D04 : 655C                		extu.b	r5,r5
(2) 2148/ 6001D06 : 666C                		extu.b	r6,r6
(2) 2149/ 6001D08 :                     ; 		and	r0,r5
(2) 2150/ 6001D08 :                     ; 		and	r0,r6
(2) 2151/ 6001D08 : 365C                		add	r5,r6
(2) 2152/ 6001D0A : DD3F                		mov	#_vdpreg,r13
(2) 2153/ 6001D0C : 85D5                .wait:		mov.w	@(10,r13),r0
(2) 2154/ 6001D0E : C802                		tst	#2,r0
(2) 2155/ 6001D10 : 8BFC                		bf	.wait
(2) 2156/ 6001D12 :                     drwsld_nxtline:
(2) 2157/ 6001D12 : 4911                		cmp/pz	r9			; Y pos < 0?
(2) 2158/ 6001D14 : 8B4A                		bf	drwsld_updline
(2) 2159/ 6001D16 :                     ; 		mov	#SET_3DFIELD_HGHT,r0	; Y pos > 224?
(2) 2160/ 6001D16 : C607                		mov	@(marsGbl_3D_OutHeight,gbr),r0
(2) 2161/ 6001D18 : 3907                		cmp/gt	r0,r9
(2) 2162/ 6001D1A : 894C                		bt	drwsld_nextpz
(2) 2163/ 6001D1C : 6093                		mov	r9,r0			; r10-r9 < 0?
(2) 2164/ 6001D1E : 30AC                		add	r10,r0
(2) 2165/ 6001D20 : 4015                		cmp/pl	r0
(2) 2166/ 6001D22 : 8B48                		bf	drwsld_nextpz
(2) 2167/ 6001D24 :                     
(2) 2168/ 6001D24 : 6B13                		mov	r1,r11
(2) 2169/ 6001D26 : 6C33                		mov	r3,r12
(2) 2170/ 6001D28 : 4B29                		shlr16	r11
(2) 2171/ 6001D2A : 4C29                		shlr16	r12
(2) 2172/ 6001D2C : 6BBF                		exts.w	r11,r11
(2) 2173/ 6001D2E : 6CCF                		exts.w	r12,r12
(2) 2174/ 6001D30 : E0FE                		mov	#-2,r0		; WORD align
(2) 2175/ 6001D32 : 2B09                		and	r0,r11
(2) 2176/ 6001D34 : 2C09                		and	r0,r12
(2) 2177/ 6001D36 : 60C3                		mov	r12,r0
(2) 2178/ 6001D38 : 30B8                		sub	r11,r0
(2) 2179/ 6001D3A : 4011                		cmp/pz	r0
(2) 2180/ 6001D3C : 8902                		bt	.revers
(2) 2181/ 6001D3E : 60C3                		mov	r12,r0
(2) 2182/ 6001D40 : 6CB3                		mov	r11,r12
(2) 2183/ 6001D42 : 6B03                		mov	r0,r11
(2) 2184/ 6001D44 :                     .revers:
(2) 2185/ 6001D44 :                     ; 		mov	#SET_3DFIELD_WDTH>>2,r0
(2) 2186/ 6001D44 :                     ; 		shll2	r0
(2) 2187/ 6001D44 : C606                		mov	@(marsGbl_3D_OutWidth,gbr),r0
(2) 2188/ 6001D46 : 4C15                		cmp/pl	r12		; XR < 0?
(2) 2189/ 6001D48 : 8B30                		bf	drwsld_updline
(2) 2190/ 6001D4A : 3B03                		cmp/ge	r0,r11		; XL > 320?
(2) 2191/ 6001D4C : 892E                		bt	drwsld_updline
(2) 2192/ 6001D4E : 3C03                		cmp/ge	r0,r12		; XR > 320?
(2) 2193/ 6001D50 : 8B00                		bf	.r_fix
(2) 2194/ 6001D52 : 6C03                		mov	r0,r12		; MAX XR
(2) 2195/ 6001D54 :                     .r_fix:
(2) 2196/ 6001D54 : 4B15                		cmp/pl	r11		; XL < 0?
(2) 2197/ 6001D56 : 8900                		bt	.l_fix
(2) 2198/ 6001D58 : 2BBA                		xor	r11,r11		; MIN XL
(2) 2199/ 6001D5A :                     .l_fix:
(2) 2200/ 6001D5A : 85D5                		mov.w	@(10,r13),r0	; Pending SVDP fill?
(2) 2201/ 6001D5C : C802                		tst	#%10,r0
(2) 2202/ 6001D5E : 8BFC                		bf	.l_fix
(2) 2203/ 6001D60 : 60C3                		mov	r12,r0
(2) 2204/ 6001D62 : 30B8                		sub	r11,r0
(2) 2205/ 6001D64 : 6C03                		mov	r0,r12
(2) 2206/ 6001D66 : 4001                		shlr	r0		; Len: (XR-XL)/2
(2) 2207/ 6001D68 : 81D2                		mov.w	r0,@(4,r13)	; Set SVDP-FILL len
(2) 2208/ 6001D6A : 60B3                		mov	r11,r0
(2) 2209/ 6001D6C : 4001                		shlr	r0
(2) 2210/ 6001D6E : 6593                		mov	r9,r5
(2) 2211/ 6001D70 : 7501                		add	#1,r5
(2) 2212/ 6001D72 : 4518                		shll8	r5
(2) 2213/ 6001D74 : 305C                		add	r5,r0		; Address: (XL/2)*((Y+1)*$200)/2
(2) 2214/ 6001D76 : 81D3                		mov.w	r0,@(6,r13)	; Set SVDP-FILL address
(2) 2215/ 6001D78 : 6063                		mov	r6,r0
(2) 2216/ 6001D7A : 4018                		shll8	r0
(2) 2217/ 6001D7C : 206B                		or	r6,r0		; Data: xxxx
(2) 2218/ 6001D7E : 81D4                		mov.w	r0,@(8,r13)	; Set pixels, SVDP-Fill begins
(2) 2219/ 6001D80 :                     ; .wait:	mov.w	@(10,r13),r0
(2) 2220/ 6001D80 :                     ; 		tst	#2,r0
(2) 2221/ 6001D80 :                     ; 		bf	.wait
(2) 2222/ 6001D80 :                     
(2) 2223/ 6001D80 :                     ; 	If the line is too large, leave it to VDP
(2) 2224/ 6001D80 :                     ; 	and exit watchdog, we will come back on
(2) 2225/ 6001D80 :                     ; 	next trigger.
(2) 2226/ 6001D80 : E028                		mov	#$28,r0					; If line > $28, leave the SVDP filling
(2) 2227/ 6001D82 : 3C07                		cmp/gt	r0,r12					; and wait for the next watchdog
(2) 2228/ 6001D84 : 8B12                		bf	drwsld_updline
(2) 2229/ 6001D86 : E006                		mov	#6,r0					; Set next mode on Resume
(2) 2230/ 6001D88 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)		; Task $06
(2) 2231/ 6001D8A : D020                		mov	#$C0000000|Cach_LnDrw_S,r0		; Save ALL these regs for comeback
(2) 2232/ 6001D8C : 2016                		mov	r1,@-r0
(2) 2233/ 6001D8E : 2026                		mov	r2,@-r0
(2) 2234/ 6001D90 : 2036                		mov	r3,@-r0
(2) 2235/ 6001D92 : 2046                		mov	r4,@-r0
(2) 2236/ 6001D94 : 2056                		mov	r5,@-r0
(2) 2237/ 6001D96 : 2066                		mov	r6,@-r0
(2) 2238/ 6001D98 : 2076                		mov	r7,@-r0
(2) 2239/ 6001D9A : 2086                		mov	r8,@-r0
(2) 2240/ 6001D9C : 2096                		mov	r9,@-r0
(2) 2241/ 6001D9E : 20A6                		mov	r10,@-r0
(2) 2242/ 6001DA0 : 20B6                		mov	r11,@-r0
(2) 2243/ 6001DA2 : 20C6                		mov	r12,@-r0
(2) 2244/ 6001DA4 : 20D6                		mov	r13,@-r0
(2) 2245/ 6001DA6 : 20E6                		mov	r14,@-r0
(2) 2246/ 6001DA8 : A015                		bra	drwtask_return
(2) 2247/ 6001DAA : E228                		mov	#$28,r2			; Exit timer $20
(2) 2248/ 6001DAC :                     ; otherwise...
(2) 2249/ 6001DAC :                     drwsld_updline:
(2) 2250/ 6001DAC : 312C                		add	r2,r1			; Next X dst
(2) 2251/ 6001DAE : 334C                		add	r4,r3			; Next Y dst
(2) 2252/ 6001DB0 : 4A10                		dt	r10
(2) 2253/ 6001DB2 : 8FAE                		bf/s	drwsld_nxtline
(2) 2254/ 6001DB4 : 7901                		add	#1,r9
(2) 2255/ 6001DB6 :                     
(2) 2256/ 6001DB6 :                     ; ------------------------------------
(2) 2257/ 6001DB6 :                     
(2) 2258/ 6001DB6 :                     drwsld_nextpz:
(2) 2259/ 6001DB6 : 200A                		xor	r0,r0
(2) 2260/ 6001DB8 : 1E00                		mov	r0,@(plypz_type,r14)
(2) 2261/ 6001DBA : 0009                		nop
(2) 2262/ 6001DBC : C60A                		mov	@(marsGbl_PlgnPzIndx_R,gbr),r0
(2) 2263/ 6001DBE : 7001                		add	#1,r0
(2) 2264/ 6001DC0 : C20A                		mov	r0,@(marsGbl_PlgnPzIndx_R,gbr)
(2) 2265/ 6001DC2 : C506                		mov.w	@(marsGbl_PlyPzCntr,gbr),r0	; Decrement piece counter
(2) 2266/ 6001DC4 : 70FF                		add	#-1,r0
(2) 2267/ 6001DC6 : C106                		mov.w	r0,@(marsGbl_PlyPzCntr,gbr)
(2) 2268/ 6001DC8 : A005                		bra	drwtask_purge
(2) 2269/ 6001DCA : E218                		mov	#$18,r2				; Exit Wdg-timer: $10
(2) 2270/ 6001DCC :                     
(2) 2271/ 6001DCC :                     ; --------------------------------
(2) 2272/ 6001DCC :                     ; Task $00
(2) 2273/ 6001DCC :                     ; --------------------------------
(2) 2274/ 6001DCC :                     
(2) 2275/ 6001DCC :                     slvplgn_00:
(2) 2276/ 6001DCC : 2F26                		mov	r2,@-r15
(2) 2277/ 6001DCE : E000                		mov	#0,r0
(2) 2278/ 6001DD0 : C102                		mov.w	r0,@(marsGbl_WdgTask,gbr)
(2) 2279/ 6001DD2 : A00E                		bra	drwtask_exit
(2) 2280/ 6001DD4 : E228                		mov	#$28,r2
(2) 2281/ 6001DD6 :                     drwtask_purge:
(2) 2282/ 6001DD6 :                     ; 		stc	sr,r3
(2) 2283/ 6001DD6 :                     ; 		mov.b	#$F0,r0			; ** $F0
(2) 2284/ 6001DD6 :                     ; 		extu.b	r0,r0
(2) 2285/ 6001DD6 :                     ; 		ldc	r0,sr
(2) 2286/ 6001DD6 :                     ; 		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2) 2287/ 6001DD6 :                     ; 		mov	#%10000,r0
(2) 2288/ 6001DD6 :                     ; 		mov.b	r0,@r1
(2) 2289/ 6001DD6 :                     ; 		nop
(2) 2290/ 6001DD6 :                     ; 		nop
(2) 2291/ 6001DD6 :                     ; 		nop
(2) 2292/ 6001DD6 :                     ; 		nop
(2) 2293/ 6001DD6 :                     ; 		nop
(2) 2294/ 6001DD6 :                     ; 		nop
(2) 2295/ 6001DD6 :                     ; 		nop
(2) 2296/ 6001DD6 :                     ; 		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2) 2297/ 6001DD6 :                     ; 		mov.b	r0,@r1
(2) 2298/ 6001DD6 :                     ; 		ldc	r3,sr
(2) 2299/ 6001DD6 :                     drwtask_return:
(2) 2300/ 6001DD6 : 4F06                		lds	@r15+,mach
(2) 2301/ 6001DD8 : 4F16                		lds	@r15+,macl
(2) 2302/ 6001DDA : 6EF6                		mov	@r15+,r14
(2) 2303/ 6001DDC : 6DF6                		mov	@r15+,r13
(2) 2304/ 6001DDE : 6CF6                		mov	@r15+,r12
(2) 2305/ 6001DE0 : 6BF6                		mov	@r15+,r11
(2) 2306/ 6001DE2 : 6AF6                		mov	@r15+,r10
(2) 2307/ 6001DE4 : 69F6                		mov	@r15+,r9
(2) 2308/ 6001DE6 : 68F6                		mov	@r15+,r8
(2) 2309/ 6001DE8 : 67F6                		mov	@r15+,r7
(2) 2310/ 6001DEA : 66F6                		mov	@r15+,r6
(2) 2311/ 6001DEC : 65F6                		mov	@r15+,r5
(2) 2312/ 6001DEE : 64F6                		mov	@r15+,r4
(2) 2313/ 6001DF0 : 63F6                		mov	@r15+,r3
(2) 2314/ 6001DF2 :                     drwtask_exit:
(2) 2315/ 6001DF2 : 910D                		mov.w   #$FE80,r1
(2) 2316/ 6001DF4 : 900D                		mov.w   #$A518,r0		; OFF
(2) 2317/ 6001DF6 : 2101                		mov.w   r0,@r1
(2) 2318/ 6001DF8 : CB20                		or      #$20,r0			; ON
(2) 2319/ 6001DFA : 2101                		mov.w   r0,@r1
(2) 2320/ 6001DFC : 900A                		mov.w   #$5A00,r0		; r2 - Timer
(2) 2321/ 6001DFE : 202B                		or	r2,r0
(2) 2322/ 6001E00 : 2101                		mov.w   r0,@r1
(2) 2323/ 6001E02 : 62F6                		mov	@r15+,r2
(2) 2324/ 6001E04 : 000B                		rts
(2) 2325/ 6001E06 : 0009                		nop
(2) 2326/ 6001E08 :                     		align 4
(2) 2327/ 6001E08 :                     
(2) 2328/ 6001E08 :                     ; ------------------------------------------------
(2) 2329/ 6001E08 :                     
(2) 2330/ 6001E08 : 2000 4100 C000      		ltorg
          6001E0E : 0498 FE80 A518 
          6001E14 : 5A00             
(2) 2331/ 6001E16 :                     
(1) 2420/ 6001E16 :                     		include "nikona/mars/cache/cache_mstr.asm"
(2)    1/ 6001E16 :                     ; ====================================================================
(2)    2/ 6001E16 :                     ; ----------------------------------------------------------------
(2)    3/ 6001E16 :                     ; CACHE code
(2)    4/ 6001E16 :                     ;
(2)    5/ 6001E16 :                     ; LIMIT: $600 bytes
(2)    6/ 6001E16 :                     ; ----------------------------------------------------------------
(2)    7/ 6001E16 :                     
(2)    8/ 6001E16 :                     ; WARNING: AS can't phase $C0000000, set the labels like this:
(2)    9/ 6001E16 :                     ; $C0000000|label
(2)   10/ 6001E16 :                     
(2)   11/ 6001E16 :                     		align 4
(2)   12/ 6001E18 :                     CACHE_MASTER:
(2)   13/ 6001E18 :                     
(2)   14/ 6001E18 :                     ; ====================================================================
(2)   15/ 6001E18 :                     ; ----------------------------------------------------------------
(2)   16/ 6001E18 :                     
(2)   17/ 6001E18 : (MACRO)              			memory 0
(2)   17/ 6001E18 : =$6001E18            GLBL_LASTPC     := *
(2)   17/   10618 :                                     dephase
(2)   17/       0 :                                     phase 0
(2)   17/       0 : =$0                  GLBL_LASTORG    := *
(2)   18/       0 :                     RAM_Mars_SVdpSprInfo	ds.b $10*MAX_MARSSPR
(2)   19/     200 :                     RAM_Mars_ScrlRefill	ds.w (512/SET_MSCRLSIZE)*(256/SET_MSCRLSIZE)
(2)   20/     600 : (MACRO)              			endmemory
(2)   20/   10C18 :                     .here:          dephase
(2)   20/   10C18 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   20/ 6001E18 :                                     phase GLBL_LASTPC
(2)   21/ 6001E18 :                     
(2)   22/ 6001E18 : (MACRO)              			memory 0
(2)   22/ 6001E18 : =$6001E18            GLBL_LASTPC     := *
(2)   22/   10618 :                                     dephase
(2)   22/       0 :                                     phase 0
(2)   22/       0 : =$0                  GLBL_LASTORG    := *
(2)   23/       0 :                     RAM_Mars_SVdpDrwList	ds.b $40*16			; Polygon pieces
(2)   24/     400 :                     Cach_DDA_Top		ds.l 2*2			; First 2 points
(2)   25/     410 :                     Cach_DDA_Last		ds.l 2*2			; Triangle or Quad (+8)
(2)   26/     420 :                     Cach_DDA_Src		ds.l 4*2
(2)   27/     440 :                     Cach_DDA_Src_L		ds.l 4				; X/DX/Y/DX result for textures
(2)   28/     450 :                     Cach_DDA_Src_R		ds.l 4
(2)   29/     460 :                     Cach_LnDrw_L		ds.l 14				;
(2)   30/     498 :                     Cach_LnDrw_S		ds.l 0				; <-- Reads backwards
(2)   31/     498 :                     Cach_Bkup_LB		ds.l 11
(2)   32/     4C4 :                     Cach_Bkup_S		ds.l 0				; <-- Reads backwards
(2)   33/     4C4 :                     Cach_Bkup_LPZ		ds.l 7
(2)   34/     4E0 :                     Cach_Bkup_SPZ		ds.l 0				; <-- Reads backwards
(2)   35/     4E0 : (MACRO)              			endmemory
(2)   35/   10AF8 :                     .here:          dephase
(2)   35/   10AF8 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   35/ 6001E18 :                                     phase GLBL_LASTPC
(2)   36/ 6001E18 :                     
(2)   37/ 6001E18 :                     ; ----------------------------------------------------------------
(2)   38/ 6001E18 :                     ; ====================================================================
(2)   39/ 6001E18 :                     
(2)   40/ 6001E18 :                     ; 		dephase
(2)   41/ 6001E18 :                     		align 4
(2)   42/ 6001E18 :                     CACHE_MASTER_E:
(2)   43/ 6001E18 : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_MASTER_E-CACHE_MASTER,$800
(2)   44/ 6001E18 :                     
(1) 2421/ 6001E18 :                     		include "nikona/mars/cache/cache_slv.asm"
(2)    1/ 6001E18 :                     ; ====================================================================
(2)    2/ 6001E18 :                     ; ----------------------------------------------------------------
(2)    3/ 6001E18 :                     ; CACHE code
(2)    4/ 6001E18 :                     ;
(2)    5/ 6001E18 :                     ; LIMIT: $600 bytes
(2)    6/ 6001E18 :                     ; ----------------------------------------------------------------
(2)    7/ 6001E18 :                     
(2)    8/ 6001E18 :                     ; WARNING: AS can't phase $C0000000, set the labels like this
(2)    9/ 6001E18 :                     ; $C0000000|label
(2)   10/ 6001E18 :                     
(2)   11/ 6001E18 :                     		align 4
(2)   12/ 6001E18 :                     CACHE_SLAVE:
(2)   13/       0 :                     		phase 0		; AS can't phase $C0000000
(2)   14/       0 :                     
(2)   15/       0 :                     ; ====================================================================
(2)   16/       0 :                     ; ----------------------------------------------------------------
(2)   17/       0 :                     ; PWM Interrupt
(2)   18/       0 :                     ; ----------------------------------------------------------------
(2)   19/       0 :                     
(2)   20/       0 :                     ; MarsPwm_Playback:
(2)   21/       0 :                     s_irq_pwm:
(2)   22/       0 : 91A6                		mov	#_FRT,r1
(2)   23/       2 : 8417                		mov.b	@(7,r1),r0
(2)   24/       4 : CA02                		xor	#2,r0
(2)   25/       6 : 8017                		mov.b	r0,@(7,r1)
(2)   26/       8 : D14C                		mov	#_sysreg+pwmintclr,r1
(2)   27/       A : 2101                		mov.w	r0,@r1
(2)   28/       C : 6011                		mov.w	@r1,r0
(2)   29/       E :                     ; 		mov	#_sysreg+comm6,r1	; **** TEMPORAL COUNTER
(2)   30/       E :                     ; 		mov.w	@r1,r0			; ****
(2)   31/       E :                     ; 		add	#1,r0			; ****
(2)   32/       E :                     ; 		mov.w	r0,@r1			; ****
(2)   33/       E :                     	; --------------------------------
(2)   34/       E : D14C                		mov	#_sysreg+monowidth,r1
(2)   35/      10 : 6011                		mov.w	@r1,r0
(2)   36/      12 : 4019                		shlr8	r0
(2)   37/      14 : C880                		tst	#$80,r0
(2)   38/      16 : 8901                		bt	.fifo_free
(2)   39/      18 : A08D                		bra	.pwm_full
(2)   40/      1A : 0009                		nop
(2)   41/      1C :                     
(2)   42/      1C :                     ; ------------------------------------------------
(2)   43/      1C :                     
(2)   44/      1C :                     .fifo_free:
(2)   45/      1C : 2F26                		mov	r2,@-r15
(2)   46/      1E : 2F36                		mov	r3,@-r15
(2)   47/      20 : 2F46                		mov	r4,@-r15
(2)   48/      22 : 2F56                		mov	r5,@-r15
(2)   49/      24 : 2F66                		mov	r6,@-r15
(2)   50/      26 : 2F76                		mov	r7,@-r15
(2)   51/      28 : 2F86                		mov	r8,@-r15
(2)   52/      2A : 2F96                		mov	r9,@-r15
(2)   53/      2C : 2FA6                		mov	r10,@-r15
(2)   54/      2E : 4F12                		sts	macl,@-r15
(2)   55/      30 : 4F02                		sts	mach,@-r15
(2)   56/      32 :                     .fifo_loop:
(2)   57/      32 : DA44                		mov	#RAM_Mars_PwmList,r10
(2)   58/      34 : E908                		mov	#MAX_PWMCHNL,r9
(2)   59/      36 : E600                		mov	#0,r6			; r6 - left
(2)   60/      38 : E700                		mov	#0,r7			; r7 - right
(2)   61/      3A :                     .next_chnl:
(2)   62/      3A : 50A0                		mov	@(marspwm_enbl,r10),r0
(2)   63/      3C : 401A                		lds	r0,macl
(2)   64/      3E : C880                		tst	#$80,r0
(2)   65/      40 : 8B02                		bf	.enabled
(2)   66/      42 : 9186                .chnl_siln:	mov	#$80,r1
(2)   67/      44 : A057                		bra	.chnl_off
(2)   68/      46 : 6213                		mov	r1,r2
(2)   69/      48 :                     .enabled:
(2)   70/      48 : 0009                		nop
(2)   71/      4A : 53A6                		mov	@(marspwm_pitch,r10),r3
(2)   72/      4C : C808                		tst	#%1000,r0
(2)   73/      4E : 8900                		bt	.st_pitch
(2)   74/      50 : 4300                		shll	r3
(2)   75/      52 :                     .st_pitch:
(2)   76/      52 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)   77/      54 : 353C                		add	r3,r5
(2)   78/      56 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)   79/      58 : 55A1                		mov	@(marspwm_read,r10),r5
(2)   80/      5A : 353C                		add	r3,r5
(2)   81/      5C : 50A4                		mov	@(marspwm_length,r10),r0
(2)   82/      5E : 3038                		sub	r3,r0
(2)   83/      60 : 3503                		cmp/ge	r0,r5
(2)   84/      62 : 8B08                		bf	.keep
(2)   85/      64 : 001A                		sts	macl,r0
(2)   86/      66 : C804                		tst	#%00000100,r0
(2)   87/      68 : 8B02                		bf	.loopit
(2)   88/      6A : C940                		and	#%01000000,r0
(2)   89/      6C : AFE9                		bra	.chnl_siln
(2)   90/      6E : 1A00                		mov	r0,@(marspwm_enbl,r10)
(2)   91/      70 :                     .loopit:
(2)   92/      70 : 55A3                		mov	@(marspwm_start,r10),r5
(2)   93/      72 : 54A5                		mov	@(marspwm_loop,r10),r4
(2)   94/      74 : 354C                		add	r4,r5
(2)   95/      76 :                     .keep:
(2)   96/      76 : 1A51                		mov	r5,@(marspwm_read,r10)
(2)   97/      78 :                     
(2)   98/      78 :                     	; Make wave address point
(2)   99/      78 :                     	; r5 - xxxxxx.00
(2)  100/      78 : 54A2                		mov	@(marspwm_bank,r10),r4
(2)  101/      7A : 001A                		sts	macl,r0
(2)  102/      7C : C840                		tst	#%01000000,r0
(2)  103/      7E : 8905                		bt	.not_backup
(2)  104/      80 : 55A9                		mov	@(marspwm_cread,r10),r5
(2)  105/      82 : 353C                		add	r3,r5
(2)  106/      84 : D030                		mov	#($200-1)<<8,r0
(2)  107/      86 : 2509                		and	r0,r5
(2)  108/      88 : 1A59                		mov	r5,@(marspwm_cread,r10)
(2)  109/      8A : 54A8                		mov	@(marspwm_cbank,r10),r4
(2)  110/      8C :                     .not_backup:
(2)  111/      8C : 4519                		shlr8	r5
(2)  112/      8E : 254B                		or	r4,r5
(2)  113/      90 :                     .read_wav:
(2)  114/      90 : C808                		tst	#%1000,r0		; Stereo sample?
(2)  115/      92 : 8901                		bt	.stand
(2)  116/      94 : E3FE                		mov	#-2,r3			; Limit to words
(2)  117/      96 : 2539                		and	r3,r5
(2)  118/      98 :                     .stand:
(2)  119/      98 : 6354                		mov.b	@r5+,r3			; Left wave
(2)  120/      9A : 633C                		extu.b	r3,r3
(2)  121/      9C : C808                		tst	#%1000,r0		; Stereo sample?
(2)  122/      9E : 8902                		bt	.do_mono		; Copy Left to Right
(2)  123/      A0 : 6454                		mov.b	@r5+,r4			; Right wave
(2)  124/      A2 : A001                		bra	.go_wave
(2)  125/      A4 : 644C                		extu.b	r4,r4
(2)  126/      A6 :                     .do_mono:
(2)  127/      A6 : 6433                		mov	r3,r4
(2)  128/      A8 :                     
(2)  129/      A8 :                     ; r3 - left byte
(2)  130/      A8 :                     ; r4 - right byte
(2)  131/      A8 :                     .go_wave:
(2)  132/      A8 : 7301                		add	#1,r3
(2)  133/      AA : 7401                		add	#1,r4
(2)  134/      AC : E180                		mov.b	#$80,r1
(2)  135/      AE : 611C                		extu.b	r1,r1
(2)  136/      B0 : 6213                		mov	r1,r2
(2)  137/      B2 : C802                .mnon_z:	tst	#%0010,r0
(2)  138/      B4 : 8900                		bt	.ml_out
(2)  139/      B6 : 6133                		mov	r3,r1
(2)  140/      B8 : C801                .ml_out:	tst	#%0001,r0
(2)  141/      BA : 8900                		bt	.do_vol
(2)  142/      BC : 6243                		mov	r4,r2
(2)  143/      BE :                     ; r1 - left
(2)  144/      BE :                     ; r2 - right
(2)  145/      BE :                     .do_vol:
(2)  146/      BE : 50A7                		mov	@(marspwm_vol,r10),r0
(2)  147/      C0 : 4015                		cmp/pl	r0
(2)  148/      C2 : 8B18                		bf	.chnl_off
(2)  149/      C4 : E440                		mov	#64,r4
(2)  150/      C6 : 3043                		cmp/ge	r4,r0
(2)  151/      C8 : 89BB                		bt	.chnl_siln
(2)  152/      CA : 7001                		add	#1,r0
(2)  153/      CC : 4008                		shll2	r0
(2)  154/      CE : 210E                		mulu	r0,r1
(2)  155/      D0 : 041A                		sts	macl,r4
(2)  156/      D2 : 4419                		shlr8	r4
(2)  157/      D4 : 3148                		sub	r4,r1
(2)  158/      D6 : 220E                		mulu	r0,r2
(2)  159/      D8 : 041A                		sts	macl,r4
(2)  160/      DA : 4419                		shlr8	r4
(2)  161/      DC : 3248                		sub	r4,r2
(2)  162/      DE : 4115                		cmp/pl	r1
(2)  163/      E0 : 8900                		bt	.l_low
(2)  164/      E2 : E100                		mov	#0,r1
(2)  165/      E4 : 4215                .l_low:		cmp/pl	r2
(2)  166/      E6 : 8900                		bt	.r_low
(2)  167/      E8 : E200                		mov	#0,r2
(2)  168/      EA : 9432                .r_low:		mov	#$80,r4		; <-- This prevents a click
(2)  169/      EC : 240E                		mulu	r0,r4
(2)  170/      EE : 001A                		sts	macl,r0
(2)  171/      F0 : 4019                		shlr8	r0
(2)  172/      F2 : 310C                		add	r0,r1
(2)  173/      F4 : 320C                		add	r0,r2
(2)  174/      F6 :                     .chnl_off:
(2)  175/      F6 : 361C                		add	r1,r6
(2)  176/      F8 : 372C                		add	r2,r7
(2)  177/      FA : 4910                		dt	r9
(2)  178/      FC : 8F9D                		bf/s	.next_chnl
(2)  179/      FE : 7A28                		add	#marspwm_len,r10
(2)  180/     100 : 9028                		mov	#$7FF,r0
(2)  181/     102 : 3603                		cmp/ge	r0,r6
(2)  182/     104 : 8B00                		bf	.l_max
(2)  183/     106 : 6603                		mov	r0,r6
(2)  184/     108 :                     .l_max:
(2)  185/     108 : 3703                		cmp/ge	r0,r7
(2)  186/     10A : 8B00                		bf	.r_max
(2)  187/     10C : 6703                		mov	r0,r7
(2)  188/     10E :                     .r_max:
(2)  189/     10E : 4628                		shll16	r6
(2)  190/     110 : 276B                		or	r6,r7
(2)  191/     112 : D00E                		mov	#_sysreg+lchwidth,r0
(2)  192/     114 : 2072                		mov	r7,@r0
(2)  193/     116 : D10A                		mov	#_sysreg+monowidth,r1
(2)  194/     118 : 6011                		mov.w	@r1,r0
(2)  195/     11A : 4019                		shlr8	r0
(2)  196/     11C : C880                		tst	#$80,r0
(2)  197/     11E : 8988                		bt	.fifo_loop
(2)  198/     120 :                     
(2)  199/     120 :                     ; ------------------------------------------------
(2)  200/     120 : 4F06                		lds	@r15+,mach
(2)  201/     122 : 4F16                		lds	@r15+,macl
(2)  202/     124 : 6AF6                		mov	@r15+,r10
(2)  203/     126 : 69F6                		mov	@r15+,r9
(2)  204/     128 : 68F6                		mov	@r15+,r8
(2)  205/     12A : 67F6                		mov	@r15+,r7
(2)  206/     12C : 66F6                		mov	@r15+,r6
(2)  207/     12E : 65F6                		mov	@r15+,r5
(2)  208/     130 : 64F6                		mov	@r15+,r4
(2)  209/     132 : 63F6                		mov	@r15+,r3
(2)  210/     134 : 62F6                		mov	@r15+,r2
(2)  211/     136 :                     .pwm_full:
(2)  212/     136 : 000B                		rts
(2)  213/     138 : 0009                		nop
(2)  214/     13A :                     		align 4
(2)  215/     13C : 2000 401C 2000      		ltorg
              142 : 4038 2600 6190 
              148 : 0001 FF00 2000 
              14E : 4034 FE10 0080 
              154 : 07FF             
(2)  216/     156 :                     
(2)  217/     156 :                     ; ====================================================================
(2)  218/     156 :                     ; ----------------------------------------------------------------
(2)  219/     156 :                     ; 3D Section
(2)  220/     156 :                     ; ----------------------------------------------------------------
(2)  221/     156 :                     
(2)  222/     156 :                     ; --------------------------------------------------------
(2)  223/     156 :                     ; MarsMdl_MdlLoop
(2)  224/     156 :                     ; --------------------------------------------------------
(2)  225/     156 :                     
(2)  226/     156 :                     		align 4
(2)  227/     158 :                     MarsMdl_MdlLoop:
(2)  228/     158 : 4F22                		sts	pr,@-r15
(2)  229/     15A : B27F                		bsr	Mars_CachePurge_S
(2)  230/     15C : 0009                		nop
(2)  231/     15E : EB00                		mov	#0,r11
(2)  232/     160 : DD16                		mov 	#RAM_Mars_Polygons_0,r13
(2)  233/     162 : DC17                		mov	#RAM_Mars_PlgnList_0,r12
(2)  234/     164 : D017                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  235/     166 : 6002                		mov	@r0,r0
(2)  236/     168 : C801                		tst     #1,r0
(2)  237/     16A : 8901                		bt	.go_mdl
(2)  238/     16C : DD16                		mov 	#RAM_Mars_Polygons_1,r13
(2)  239/     16E : DC17                		mov	#RAM_Mars_PlgnList_1,r12
(2)  240/     170 :                     .go_mdl:
(2)  241/     170 :                     
(2)  242/     170 :                     	; ------------------------------------------------
(2)  243/     170 :                     	; 3D Sprites
(2)  244/     170 : DE17                		mov	#RAM_Mars_SprPolygn,r14
(2)  245/     172 : EA18                		mov	#MAX_MARSMSPR,r10
(2)  246/     174 :                     .m_loop:
(2)  247/     174 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  248/     176 : C880                		tst	#$80,r0
(2)  249/     178 : 8905                		bt	.m_invlid
(2)  250/     17A : 9033                		mov	#MAX_FACES,r0
(2)  251/     17C : 3B07                		cmp/gt	r0,r11
(2)  252/     17E : 8910                		bt	.invlid
(2)  253/     180 : B032                		bsr	MarsMdl_MkSpr
(2)  254/     182 : 2FA6                		mov	r10,@-r15
(2)  255/     184 : 6AF6                		mov	@r15+,r10
(2)  256/     186 :                     .m_invlid:
(2)  257/     186 : 4A10                		dt	r10
(2)  258/     188 : 8FF4                		bf/s	.m_loop
(2)  259/     18A : 7E20                		add	#mspr_len,r14
(2)  260/     18C :                     	; ------------------------------------------------
(2)  261/     18C :                     	; 3D Models
(2)  262/     18C : DE11                		mov	#RAM_Mars_Objects,r14
(2)  263/     18E : EA28                		mov	#MAX_MARSOBJ,r10
(2)  264/     190 :                     .loop:
(2)  265/     190 : 50E1                		mov	@(mmdl_data,r14),r0		; Object model data == 0 or -1?
(2)  266/     192 : 4015                		cmp/pl	r0
(2)  267/     194 : 8B05                		bf	.invlid
(2)  268/     196 : 9025                		mov	#MAX_FACES,r0
(2)  269/     198 : 3B07                		cmp/gt	r0,r11
(2)  270/     19A : 8902                		bt	.invlid
(2)  271/     19C : B0FC                		bsr	MarsMdl_ReadModel
(2)  272/     19E : 2FA6                		mov	r10,@-r15
(2)  273/     1A0 : 6AF6                		mov	@r15+,r10
(2)  274/     1A2 :                     .invlid:
(2)  275/     1A2 : 4A10                		dt	r10
(2)  276/     1A4 : 8FF4                		bf/s	.loop
(2)  277/     1A6 : 7E20                		add	#mmdl_len,r14
(2)  278/     1A8 :                     	; ------------------------------------------------
(2)  279/     1A8 :                     .skip:
(2)  280/     1A8 : DC0B                		mov 	#RAM_Mars_PlgnNum_0,r12
(2)  281/     1AA : D00C                		mov	#$C0000000|CachSlv_CurrPage,r0
(2)  282/     1AC : 6002                		mov	@r0,r0
(2)  283/     1AE :                     ; 		mov.w   @(marsGbl_PlgnBuffNum,gbr),r0
(2)  284/     1AE : C801                		tst     #1,r0
(2)  285/     1B0 : 8900                		bt	.page_2
(2)  286/     1B2 : DC0B                		mov 	#RAM_Mars_PlgnNum_1,r12
(2)  287/     1B4 :                     .page_2:
(2)  288/     1B4 : 2CB2                		mov	r11,@r12			; Save faces counter
(2)  289/     1B6 : 4F26                		lds	@r15+,pr
(2)  290/     1B8 : 000B                		rts
(2)  291/     1BA : 0009                		nop
(2)  292/     1BC :                     		align 4
(2)  293/     1BC : 0600 7B20 0600      		ltorg
              1C2 : EB20 C000 0690 
              1C8 : 0600 B320 0600 
              1CE : F320 0600 7820 
              1D4 : 0600 7320 0600 
              1DA : FB20 C000 0690 
              1E0 : 0600 FB24 0100    
(2)  294/     1E6 :                     
(2)  295/     1E6 :                     ; ------------------------------------------------
(2)  296/     1E6 :                     ; Read model
(2)  297/     1E6 :                     ;
(2)  298/     1E6 :                     ; r14 - Current Msprite list
(2)  299/     1E6 :                     ; r13 - Current polygon
(2)  300/     1E6 :                     ; r12 - Z storage
(2)  301/     1E6 :                     ; r11 - Used faces counter
(2)  302/     1E6 :                     ; ------------------------------------------------
(2)  303/     1E6 :                     
(2)  304/     1E6 :                     		align 4
(2)  305/     1E8 :                     MarsMdl_MkSpr:
(2)  306/     1E8 : 4F22                		sts	pr,@-r15
(2)  307/     1EA : 84E1                		mov.b	@(mspr_indx,r14),r0
(2)  308/     1EC : 620C                		extu.b	r0,r2
(2)  309/     1EE : 84E6                		mov.b	@(mspr_srcwdth,r14),r0	; Texture file width
(2)  310/     1F0 : 630C                		extu.b	r0,r3
(2)  311/     1F2 : D046                		mov	#$8000,r0
(2)  312/     1F4 : 303C                		add	r3,r0
(2)  313/     1F6 : 51E7                		mov	@(mspr_vram,r14),r1	; Texture location
(2)  314/     1F8 : 4028                		shll16	r0
(2)  315/     1FA : 202B                		or	r2,r0
(2)  316/     1FC : 1D00                		mov	r0,@(plygn_type,r13)
(2)  317/     1FE : 0009                		nop
(2)  318/     200 : 1D11                		mov	r1,@(plygn_mtrl,r13)
(2)  319/     202 :                     
(2)  320/     202 :                     	; r1 | -X
(2)  321/     202 :                     	; r2 | +X
(2)  322/     202 :                     	; r3 | -Y
(2)  323/     202 :                     	; r4 | +Y
(2)  324/     202 : 84E4                		mov.b	@(mspr_src_w,r14),r0
(2)  325/     204 : 620C                		extu.b	r0,r2
(2)  326/     206 : 84E5                		mov.b	@(mspr_src_h,r14),r0
(2)  327/     208 : 640C                		extu.b	r0,r4
(2)  328/     20A : E100                		mov	#0,r1
(2)  329/     20C : E300                		mov	#0,r3
(2)  330/     20E : 84E7                		mov.b	@(mspr_frame_x,r14),r0
(2)  331/     210 : 650C                		extu.b	r0,r5
(2)  332/     212 : 84E8                		mov.b	@(mspr_frame_y,r14),r0
(2)  333/     214 : 660C                		extu.b	r0,r6
(2)  334/     216 : 264E                		mulu	r4,r6
(2)  335/     218 : 001A                		sts	macl,r0
(2)  336/     21A : 330C                		add	r0,r3
(2)  337/     21C : 340C                		add	r0,r4
(2)  338/     21E : 315C                		add	r5,r1
(2)  339/     220 : 325C                		add	r5,r2
(2)  340/     222 : 65D3                		mov	r13,r5
(2)  341/     224 : 7538                		add	#plygn_srcpnts+((4*2)*2),r5
(2)  342/     226 : 2545                		mov.w	r4,@-r5		;
(2)  343/     228 : 2525                		mov.w	r2,@-r5		; +X +Y
(2)  344/     22A : 2545                		mov.w	r4,@-r5		;
(2)  345/     22C : 2515                		mov.w	r1,@-r5		; -X +Y
(2)  346/     22E : 2535                		mov.w	r3,@-r5		;
(2)  347/     230 : 2515                		mov.w	r1,@-r5		; -X -Y
(2)  348/     232 : 2535                		mov.w	r3,@-r5		;
(2)  349/     234 : 2525                		mov.w	r2,@-r5		; +X -Y
(2)  350/     236 :                     
(2)  351/     236 :                     	; r1 | -X
(2)  352/     236 :                     	; r2 | +X
(2)  353/     236 :                     	; r3 | -Y
(2)  354/     236 :                     	; r4 | +Y
(2)  355/     236 : 84E2                		mov.b	@(mspr_size_w,r14),r0
(2)  356/     238 : 4000                		shll	r0
(2)  357/     23A : 620C                		extu.b	r0,r2
(2)  358/     23C : 612B                		neg	r2,r1
(2)  359/     23E : 84E3                		mov.b	@(mspr_size_h,r14),r0
(2)  360/     240 : 4000                		shll	r0
(2)  361/     242 : 640C                		extu.b	r0,r4
(2)  362/     244 : 634B                		neg	r4,r3
(2)  363/     246 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  364/     248 : C801                		tst	#%00000001,r0			; 3D flag?
(2)  365/     24A : 8B0F                		bf	.not_oldpos
(2)  366/     24C : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  367/     24E :                     ; 		shlr2	r0
(2)  368/     24E : 650F                		exts.w	r0,r5
(2)  369/     250 : 315C                		add	r5,r1
(2)  370/     252 : 325C                		add	r5,r2
(2)  371/     254 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  372/     256 :                     ; 		shlr2	r0
(2)  373/     256 : 660F                		exts.w	r0,r6
(2)  374/     258 : 336C                		add	r6,r3
(2)  375/     25A : 346C                		add	r6,r4
(2)  376/     25C : 4109                		shlr2	r1
(2)  377/     25E : 4209                		shlr2	r2
(2)  378/     260 : 4309                		shlr2	r3
(2)  379/     262 : 4409                		shlr2	r4
(2)  380/     264 : 611F                		exts.w	r1,r1
(2)  381/     266 : 622F                		exts.w	r2,r2
(2)  382/     268 : 633F                		exts.w	r3,r3
(2)  383/     26A : 644F                		exts.w	r4,r4
(2)  384/     26C :                     .not_oldpos:
(2)  385/     26C : 65D3                		mov	r13,r5
(2)  386/     26E : 7528                		add	#plygn_points+((4*2)*4),r5
(2)  387/     270 : 2546                		mov	r4,@-r5		;
(2)  388/     272 : 2526                		mov	r2,@-r5		; +X +Y
(2)  389/     274 : 2546                		mov	r4,@-r5		;
(2)  390/     276 : 2516                		mov	r1,@-r5		; -X +Y
(2)  391/     278 : 2536                		mov	r3,@-r5		;
(2)  392/     27A : 2516                		mov	r1,@-r5		; -X -Y
(2)  393/     27C : 2536                		mov	r3,@-r5		;
(2)  394/     27E : 2526                		mov	r2,@-r5		; +X -Y
(2)  395/     280 :                     
(2)  396/     280 :                     	; Inside 3D
(2)  397/     280 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  398/     282 : C801                		tst	#%00000001,r0		; 3D flag?
(2)  399/     284 : 8938                		bt	.not_plyfld
(2)  400/     286 : 61D3                		mov	r13,r1
(2)  401/     288 : 7108                		add	#plygn_points,r1
(2)  402/     28A : E504                		mov	#4,r5
(2)  403/     28C : E800                		mov	#0,r8
(2)  404/     28E :                     .mk_point:
(2)  405/     28E : 6212                		mov	@r1,r2
(2)  406/     290 : 4209                		shlr2	r2
(2)  407/     292 : 5311                		mov	@(4,r1),r3
(2)  408/     294 : 4309                		shlr2	r3
(2)  409/     296 : 622F                		exts.w	r2,r2
(2)  410/     298 : 633F                		exts.w	r3,r3
(2)  411/     29A : B03D                		bsr	mdlrd_setsppt
(2)  412/     29C : E400                		mov	#0,r4			; TEMPORAL Z
(2)  413/     29E : 2122                		mov	r2,@r1
(2)  414/     2A0 : 1131                		mov	r3,@(4,r1)
(2)  415/     2A2 : 3843                		cmp/ge	r4,r8
(2)  416/     2A4 : 8B00                		bf	.lower_z
(2)  417/     2A6 : 6843                		mov	r4,r8
(2)  418/     2A8 :                     .lower_z:
(2)  419/     2A8 : 4510                		dt	r5
(2)  420/     2AA : 8FF0                		bf/s	.mk_point
(2)  421/     2AC : 7108                		add	#8,r1
(2)  422/     2AE : 4811                		cmp/pz	r8
(2)  423/     2B0 : 8928                		bt	.bad_face
(2)  424/     2B2 : D717                		mov	#RAM_Mars_ObjCamera,r7
(2)  425/     2B4 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  426/     2B6 : 4009                		shlr2	r0
(2)  427/     2B8 : 600F                		exts.w	r0,r0
(2)  428/     2BA : 912B                		mov	#MAX_ZDIST>>2,r1
(2)  429/     2BC : 4108                		shll2	r1
(2)  430/     2BE : 4011                		cmp/pz	r0
(2)  431/     2C0 : 8B00                		bf	.z_plus
(2)  432/     2C2 : 600B                		neg	r0,r0
(2)  433/     2C4 :                     .z_plus:
(2)  434/     2C4 : 310C                		add	r0,r1
(2)  435/     2C6 : 3813                		cmp/ge	r1,r8
(2)  436/     2C8 : 8B1C                		bf	.bad_face
(2)  437/     2CA :                     	; X/Y checks
(2)  438/     2CA : 6AD3                		mov	r13,r10
(2)  439/     2CC : 7A08                		add	#plygn_points,r10
(2)  440/     2CE : 61A3                		mov	r10,r1
(2)  441/     2D0 : E4D6                		mov	#-(SET_MSCRLWDTH/2)>>2,r4
(2)  442/     2D2 : 4408                		shll2	r4
(2)  443/     2D4 : B132                		bsr	mdl_get_hilow
(2)  444/     2D6 : 654B                		neg	r4,r5
(2)  445/     2D8 : 3247                		cmp/gt	r4,r2
(2)  446/     2DA : 8B13                		bf	.bad_face
(2)  447/     2DC : 3353                		cmp/ge	r5,r3
(2)  448/     2DE : 8911                		bt	.bad_face
(2)  449/     2E0 : 61A3                		mov	r10,r1
(2)  450/     2E2 : 7104                		add	#4,r1
(2)  451/     2E4 : E4E4                		mov	#-(224/2)>>2,r4
(2)  452/     2E6 : 4408                		shll2	r4
(2)  453/     2E8 : B128                		bsr	mdl_get_hilow
(2)  454/     2EA : 654B                		neg	r4,r5
(2)  455/     2EC : 3247                		cmp/gt	r4,r2
(2)  456/     2EE : 8B09                		bf	.bad_face
(2)  457/     2F0 : 3353                		cmp/ge	r5,r3
(2)  458/     2F2 : 8907                		bt	.bad_face
(2)  459/     2F4 : A001                		bra	.mk_face
(2)  460/     2F6 : 0009                		nop
(2)  461/     2F8 :                     .not_plyfld:
(2)  462/     2F8 : E800                		mov	#0,r8			; TODO
(2)  463/     2FA :                     .mk_face:
(2)  464/     2FA : 2C82                		mov	r8,@r12			; Z position
(2)  465/     2FC : 1CD1                		mov	r13,@(4,r12)		; Polygon pointer
(2)  466/     2FE : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  467/     300 : 7C08                		add	#8,r12			; Next Z storage
(2)  468/     302 : 7B01                		add	#1,r11			; Mark as a valid face
(2)  469/     304 :                     
(2)  470/     304 :                     .bad_face:
(2)  471/     304 : 4F26                		lds	@r15+,pr
(2)  472/     306 : 000B                		rts
(2)  473/     308 : 0009                		nop
(2)  474/     30A :                     		align 4
(2)  475/     30C :                     
(2)  476/     30C :                     ; ----------------------------------------
(2)  477/     30C :                     
(2)  478/     30C : 0000 8000 0600      		ltorg
              312 : 72E0 FF60          
(2)  479/     316 :                     
(2)  480/     316 :                     ; ----------------------------------------
(2)  481/     316 :                     ; Modify position to current point
(2)  482/     316 :                     ; ----------------------------------------
(2)  483/     316 :                     
(2)  484/     316 :                     ; r2 - X
(2)  485/     316 :                     ; r3 - Y
(2)  486/     316 :                     ; r4 - Z
(2)  487/     316 :                     		align 4
(2)  488/     318 :                     mdlrd_setsppt:
(2)  489/     318 : 4F22                		sts	pr,@-r15
(2)  490/     31A : 2F56                		mov 	r5,@-r15
(2)  491/     31C : 2F66                		mov 	r6,@-r15
(2)  492/     31E : 2F76                		mov 	r7,@-r15
(2)  493/     320 : 2F86                		mov 	r8,@-r15
(2)  494/     322 : 2F96                		mov 	r9,@-r15
(2)  495/     324 : 2FA6                		mov 	r10,@-r15
(2)  496/     326 : 2FB6                		mov 	r11,@-r15
(2)  497/     328 :                     
(2)  498/     328 :                     	; Object rotation
(2)  499/     328 : 6523                		mov	r2,r5			; r5 - X
(2)  500/     32A : 6643                		mov	r4,r6			; r6 - Z
(2)  501/     32C : 85ED                  		mov.w 	@(mspr_y_rot,r14),r0
(2)  502/     32E : B179                		bsr	mdlrd_rotate
(2)  503/     330 : 4008                  		shll2	r0
(2)  504/     332 : 6273                   		mov	r7,r2
(2)  505/     334 : 6533                   		mov	r3,r5			; r5 - Y
(2)  506/     336 : 6683                  		mov	r8,r6
(2)  507/     338 : 85EB                  		mov.w 	@(mspr_x_rot,r14),r0
(2)  508/     33A : B173                		bsr	mdlrd_rotate
(2)  509/     33C : 4008                  		shll2	r0
(2)  510/     33E : 6483                   		mov	r8,r4			; UPDATE Z
(2)  511/     340 : 6523                		mov	r2,r5			; r5 - X
(2)  512/     342 : 6673                   		mov	r7,r6
(2)  513/     344 : 85EC                  		mov.w 	@(mspr_z_rot,r14),r0
(2)  514/     346 : B16D                		bsr	mdlrd_rotate
(2)  515/     348 : 4008                   		shll2	r0
(2)  516/     34A : 6273                   		mov	r7,r2			; UPDATE X
(2)  517/     34C : 6383                   		mov	r8,r3			; UPDATE Y
(2)  518/     34E :                     
(2)  519/     34E : 0009                   		nop
(2)  520/     350 : 84E0                		mov.b	@(mspr_flags,r14),r0
(2)  521/     352 : C802                		tst	#%00000010,r0
(2)  522/     354 : 8914                		bt	.no_facecam
(2)  523/     356 : DB0F                		mov	#RAM_Mars_ObjCamera,r11
(2)  524/     358 : 6523                		mov	r2,r5			; r5 - X
(2)  525/     35A : 6643                		mov	r4,r6			; r6 - Z
(2)  526/     35C : 50B4                  		mov	@(mcam_y_rot,r11),r0
(2)  527/     35E : 600B                  		neg	r0,r0
(2)  528/     360 : B160                		bsr	mdlrd_rotate
(2)  529/     362 : 4001                  		shlr	r0
(2)  530/     364 : 6273                   		mov	r7,r2
(2)  531/     366 : 6533                   		mov	r3,r5			; r5 - Y
(2)  532/     368 : 6683                  		mov	r8,r6
(2)  533/     36A : 50B3                  		mov	@(mcam_x_rot,r11),r0
(2)  534/     36C : 600B                  		neg	r0,r0
(2)  535/     36E : B159                		bsr	mdlrd_rotate
(2)  536/     370 : 4001                  		shlr	r0
(2)  537/     372 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  538/     374 : 6523                		mov	r2,r5			; r5 - X
(2)  539/     376 : 6673                   		mov	r7,r6
(2)  540/     378 : 50B5                  		mov	@(mcam_z_rot,r11),r0
(2)  541/     37A : 600B                  		neg	r0,r0
(2)  542/     37C : B152                		bsr	mdlrd_rotate
(2)  543/     37E : 4001                   		shlr	r0
(2)  544/     380 :                     .no_facecam:
(2)  545/     380 : 85E8                		mov.w	@(mspr_x_pos,r14),r0
(2)  546/     382 : 650F                		exts.w	r0,r5
(2)  547/     384 : 85E9                		mov.w	@(mspr_y_pos,r14),r0
(2)  548/     386 : 660F                		exts.w	r0,r6
(2)  549/     388 : 85EA                		mov.w	@(mspr_z_pos,r14),r0
(2)  550/     38A : 670F                		exts.w	r0,r7
(2)  551/     38C : 325C                		add 	r5,r2
(2)  552/     38E : 336C                		add 	r6,r3
(2)  553/     390 : A106                   		bra	mdlrd_persp
(2)  554/     392 : 347C                		add 	r7,r4
(2)  555/     394 :                        		align 4
(2)  556/     394 : 0600 72E0              		ltorg
(2)  557/     398 :                     
(2)  558/     398 :                     ; ------------------------------------------------
(2)  559/     398 :                     ; Read model
(2)  560/     398 :                     ;
(2)  561/     398 :                     ; r14 - Current model data
(2)  562/     398 :                     ; r13 - Current polygon
(2)  563/     398 :                     ; r12 - Z storage
(2)  564/     398 :                     ; r11 - Used faces counter
(2)  565/     398 :                     ; ------------------------------------------------
(2)  566/     398 :                     
(2)  567/     398 :                     ; Mdl_Object:
(2)  568/     398 :                     ; 		dc.w num_faces,num_vertex_old
(2)  569/     398 :                     ; 		dc.l .vert,.face,.vrtx,.mtrl
(2)  570/     398 :                     ; .vert:	binclude "data/mars/objects/mdl/test/vert.bin"
(2)  571/     398 :                     ; .face:	binclude "data/mars/objects/mdl/test/face.bin"
(2)  572/     398 :                     ; .vrtx:	binclude "data/mars/objects/mdl/test/vrtx.bin"
(2)  573/     398 :                     ; .mtrl:	include "data/mars/objects/mdl/test/mtrl.asm"
(2)  574/     398 :                     ;
(2)  575/     398 :                     		align 4
(2)  576/     398 :                     MarsMdl_ReadModel:
(2)  577/     398 : 4F22                		sts	pr,@-r15
(2)  578/     39A : 0009                		nop
(2)  579/     39C : 5AE1                		mov	@(mmdl_data,r14),r10	; r10 - Model header
(2)  580/     39E : 0009                		nop
(2)  581/     3A0 : 69A1                		mov.w	@r10,r9			;  r9 - Number of polygons of this model
(2)  582/     3A2 : 699D                		extu.w	r9,r9
(2)  583/     3A4 : 58A2                		mov 	@(8,r10),r8		;  r8 - face data
(2)  584/     3A6 : 38AC                		add	r10,r8
(2)  585/     3A8 : 57A1                		mov	@(4,r10),r7		;  r7 - Vertex data
(2)  586/     3AA : 37AC                		add	r10,r7
(2)  587/     3AC :                     .next_face:
(2)  588/     3AC : 90C4                		mov	#MAX_FACES,r0
(2)  589/     3AE : 3B03                		cmp/ge	r0,r11
(2)  590/     3B0 : 8B01                		bf	.valid
(2)  591/     3B2 : A0BB                		bra	.exit
(2)  592/     3B4 : 6B03                		mov	r0,r11
(2)  593/     3B6 :                     .valid:
(2)  594/     3B6 : 6085                		mov.w	@r8+,r0
(2)  595/     3B8 : 6503                		mov	r0,r5			; r5 - Face type
(2)  596/     3BA : E604                		mov	#4,r6			; r6 - number of vertex (quad or tri)
(2)  597/     3BC : 4019                		shlr8	r0			;
(2)  598/     3BE : C840                		tst	#PLGN_TRI,r0
(2)  599/     3C0 : 8900                		bt	.quad			; bit 0 = quad
(2)  600/     3C2 : 4610                		dt	r6
(2)  601/     3C4 :                     .quad:
(2)  602/     3C4 : 64D3                		mov	r13,r4
(2)  603/     3C6 : 4515                		cmp/pl	r5			; Solid or texture? ($8xxx)
(2)  604/     3C8 : 8B0A                		bf	.has_uv
(2)  605/     3CA :                     
(2)  606/     3CA :                     ; --------------------------------
(2)  607/     3CA :                     ; Face is solid color
(2)  608/     3CA : 6053                		mov	r5,r0
(2)  609/     3CC : 600C                		extu.b	r0,r0
(2)  610/     3CE : E360                		mov	#%01100000,r3
(2)  611/     3D0 : 4300                		shll	r3
(2)  612/     3D2 : 4318                		shll8	r3
(2)  613/     3D4 : 2539                		and	r3,r5
(2)  614/     3D6 : 4528                		shll16	r5
(2)  615/     3D8 : 1401                		mov	r0,@(plygn_mtrl,r4)
(2)  616/     3DA : A037                		bra	.mk_face
(2)  617/     3DC : 1450                		mov	r5,@(plygn_type,r4)
(2)  618/     3DE :                     		align 4
(2)  619/     3E0 :                     
(2)  620/     3E0 :                     ; --------------------------------
(2)  621/     3E0 :                     ; Face has UV settings
(2)  622/     3E0 :                     
(2)  623/     3E0 :                     .has_uv:
(2)  624/     3E0 : 51A3                		mov	@($C,r10),r1		; r1 - Grab UV points
(2)  625/     3E2 : 31AC                		add	r10,r1
(2)  626/     3E4 : 6063                		mov	r6,r0
(2)  627/     3E6 : 62D3                		mov	r13,r2			; r2 - Output to polygon
(2)  628/     3E8 : 7228                		add	#plygn_srcpnts,r2
(2)  629/     3EA : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  630/     3EC : 8906                		bt	.uv_tri
(2)  631/     3EE : 0009                		nop
(2)  632/     3F0 : 6085                		mov.w	@r8+,r0			; Do quad point
(2)  633/     3F2 : 600D                		extu.w	r0,r0
(2)  634/     3F4 : 4008                		shll2	r0
(2)  635/     3F6 : 001E                		mov	@(r1,r0),r0
(2)  636/     3F8 : 2202                		mov	r0,@r2
(2)  637/     3FA : 7204                		add	#4,r2
(2)  638/     3FC :                     .uv_tri:
(2)  639/     3FC :                     	rept 3					; Grab UV points 3 times
(2)  640/     3FC :                     		mov.w	@r8+,r0
(2)  641/     3FC :                     		extu.w	r0,r0
(2)  642/     3FC :                     		shll2	r0
(2)  643/     3FC :                     		mov	@(r1,r0),r0
(2)  644/     3FC :                     		mov	r0,@r2
(2)  645/     3FC :                     		add	#4,r2
(2)  646/     3FC :                     	endm
(2)  640/     3FC : 6085                		mov.w	@r8+,r0
(2)  641/     3FE : 600D                		extu.w	r0,r0
(2)  642/     400 : 4008                		shll2	r0
(2)  643/     402 : 001E                		mov	@(r1,r0),r0
(2)  644/     404 : 2202                		mov	r0,@r2
(2)  645/     406 : 7204                		add	#4,r2
(2)  640/     408 : 6085                		mov.w	@r8+,r0
(2)  641/     40A : 600D                		extu.w	r0,r0
(2)  642/     40C : 4008                		shll2	r0
(2)  643/     40E : 001E                		mov	@(r1,r0),r0
(2)  644/     410 : 2202                		mov	r0,@r2
(2)  645/     412 : 7204                		add	#4,r2
(2)  640/     414 : 6085                		mov.w	@r8+,r0
(2)  641/     416 : 600D                		extu.w	r0,r0
(2)  642/     418 : 4008                		shll2	r0
(2)  643/     41A : 001E                		mov	@(r1,r0),r0
(2)  644/     41C : 2202                		mov	r0,@r2
(2)  645/     41E : 7204                		add	#4,r2
(2)  647/     420 : 51A4                		mov	@($10,r10),r1		; r1 - Read material list
(2)  648/     422 : 31AC                		add	r10,r1
(2)  649/     424 : 6053                		mov	r5,r0			; r0 - Material slot
(2)  650/     426 : C9FF                		and	#$FF,r0
(2)  651/     428 : 4008                		shll2	r0			; *8
(2)  652/     42A : 4000                		shll	r0
(2)  653/     42C : 310C                		add	r0,r1			; Increment r1 into mtrl slot
(2)  654/     42E : E360                		mov	#%01100000,r3
(2)  655/     430 : 4300                		shll	r3
(2)  656/     432 : 4318                		shll8	r3			; r3 - $C0
(2)  657/     434 : 2539                		and	r3,r5			; Filter settings bits
(2)  658/     436 :                     
(2)  659/     436 :                     	; dc.l pointer
(2)  660/     436 :                     	; dc.w tex_wdth
(2)  661/     436 :                     	; dc.w indx
(2)  662/     436 : 5011                		mov	@(4,r1),r0		; r0 - Texture width
(2)  663/     438 : 6203                		mov	r0,r2
(2)  664/     43A : 600D                		extu.w	r0,r0
(2)  665/     43C :                     
(2)  666/     43C : 4229                		shlr16	r2
(2)  667/     43E : 252B                		or	r2,r5
(2)  668/     440 :                     ; 		or	r0,r5
(2)  669/     440 : 6312                		mov	@r1,r3			; r3 - Texture ROM pointer
(2)  670/     442 : 4528                		shll16	r5
(2)  671/     444 : 250B                		or	r0,r5
(2)  672/     446 :                     ; 		mov	@(mmdl_option,r14),r0
(2)  673/     446 :                     ; 		extu.b	r0,r0
(2)  674/     446 : 1431                		mov	r3,@(plygn_mtrl,r4)
(2)  675/     448 :                     ; 		or	r0,r5
(2)  676/     448 : 1450                		mov	r5,@(plygn_type,r4)
(2)  677/     44A : 0009                		nop
(2)  678/     44C :                     
(2)  679/     44C :                     .mk_face:
(2)  680/     44C : E500                		mov	#0,r5			; Z last pos
(2)  681/     44E :                     
(2)  682/     44E : 6143                		mov	r4,r1			; r1 - OUTPUT face (X/Y) points
(2)  683/     450 : 7108                		add 	#plygn_points,r1
(2)  684/     452 : 6063                		mov	r6,r0
(2)  685/     454 : 8803                		cmp/eq	#3,r0			; Polygon is tri?
(2)  686/     456 : 890D                		bt	.fc_tri
(2)  687/     458 : 6085                		mov.w 	@r8+,r0			; Do quad point
(2)  688/     45A : 600D                		extu.w	r0,r0
(2)  689/     45C : 6473                		mov	r7,r4
(2)  690/     45E : 340C                		add 	r0,r4
(2)  691/     460 : 6242                		mov	@r4,r2
(2)  692/     462 : 5341                		mov	@(4,r4),r3
(2)  693/     464 : B07A                		bsr	mdlrd_setpoint
(2)  694/     466 : 5442                		mov	@(8,r4),r4
(2)  695/     468 : 2122                		mov	r2,@r1
(2)  696/     46A : 1131                		mov	r3,@(4,r1)
(2)  697/     46C : 7108                		add	#8,r1
(2)  698/     46E : 3453                		cmp/ge	r5,r4			; Save LOWEST Z point
(2)  699/     470 : 8900                		bt	.fc_tri
(2)  700/     472 : 6543                		mov	r4,r5
(2)  701/     474 :                     .fc_tri:
(2)  702/     474 :                     	rept 3
(2)  703/     474 :                     		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     474 :                     		extu.w	r0,r0
(2)  705/     474 :                     		mov	r7,r4			; r2 - vertex data + index
(2)  706/     474 :                     		add 	r0,r4
(2)  707/     474 :                     		mov	@r4,r2
(2)  708/     474 :                     		mov	@(4,r4),r3
(2)  709/     474 :                     		bsr	mdlrd_setpoint
(2)  710/     474 :                     		mov	@(8,r4),r4
(2)  711/     474 :                     		mov	r2,@r1
(2)  712/     474 :                     		mov	r3,@(4,r1)
(2)  713/     474 :                     		add	#8,r1
(2)  714/     474 :                     		cmp/ge	r5,r4
(2)  715/     474 :                     		bt	.higher
(2)  716/     474 :                     		mov	r4,r5
(2)  717/     474 :                     .higher:
(2)  718/     474 :                     	endm
(2)  703/     474 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     476 : 600D                		extu.w	r0,r0
(2)  705/     478 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     47A : 340C                		add 	r0,r4
(2)  707/     47C : 6242                		mov	@r4,r2
(2)  708/     47E : 5341                		mov	@(4,r4),r3
(2)  709/     480 : B06C                		bsr	mdlrd_setpoint
(2)  710/     482 : 5442                		mov	@(8,r4),r4
(2)  711/     484 : 2122                		mov	r2,@r1
(2)  712/     486 : 1131                		mov	r3,@(4,r1)
(2)  713/     488 : 7108                		add	#8,r1
(2)  714/     48A : 3453                		cmp/ge	r5,r4
(2)  715/     48C : 8900                		bt	.higher
(2)  716/     48E : 6543                		mov	r4,r5
(2)  717/     490 :                     .higher:
(2)  703/     490 : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     492 : 600D                		extu.w	r0,r0
(2)  705/     494 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     496 : 340C                		add 	r0,r4
(2)  707/     498 : 6242                		mov	@r4,r2
(2)  708/     49A : 5341                		mov	@(4,r4),r3
(2)  709/     49C : B05E                		bsr	mdlrd_setpoint
(2)  710/     49E : 5442                		mov	@(8,r4),r4
(2)  711/     4A0 : 2122                		mov	r2,@r1
(2)  712/     4A2 : 1131                		mov	r3,@(4,r1)
(2)  713/     4A4 : 7108                		add	#8,r1
(2)  714/     4A6 : 3453                		cmp/ge	r5,r4
(2)  715/     4A8 : 8900                		bt	.higher
(2)  716/     4AA : 6543                		mov	r4,r5
(2)  717/     4AC :                     .higher:
(2)  703/     4AC : 6085                		mov.w 	@r8+,r0			; Grab face index 3 times
(2)  704/     4AE : 600D                		extu.w	r0,r0
(2)  705/     4B0 : 6473                		mov	r7,r4			; r2 - vertex data + index
(2)  706/     4B2 : 340C                		add 	r0,r4
(2)  707/     4B4 : 6242                		mov	@r4,r2
(2)  708/     4B6 : 5341                		mov	@(4,r4),r3
(2)  709/     4B8 : B050                		bsr	mdlrd_setpoint
(2)  710/     4BA : 5442                		mov	@(8,r4),r4
(2)  711/     4BC : 2122                		mov	r2,@r1
(2)  712/     4BE : 1131                		mov	r3,@(4,r1)
(2)  713/     4C0 : 7108                		add	#8,r1
(2)  714/     4C2 : 3453                		cmp/ge	r5,r4
(2)  715/     4C4 : 8900                		bt	.higher
(2)  716/     4C6 : 6543                		mov	r4,r5
(2)  717/     4C8 :                     .higher:
(2)  719/     4C8 :                     	; *** Z-offscreen check***
(2)  720/     4C8 : 470A                		lds	r7,mach
(2)  721/     4CA : 4511                		cmp/pz	r5
(2)  722/     4CC : 8928                		bt	.bad_face
(2)  723/     4CE : D719                		mov	#RAM_Mars_ObjCamera,r7
(2)  724/     4D0 : 5071                		mov	@(mcam_y_pos,r7),r0
(2)  725/     4D2 : 4009                		shlr2	r0
(2)  726/     4D4 : 600F                		exts.w	r0,r0
(2)  727/     4D6 : 9130                		mov	#MAX_ZDIST>>2,r1
(2)  728/     4D8 : 4108                		shll2	r1
(2)  729/     4DA : 4011                		cmp/pz	r0
(2)  730/     4DC : 8B00                		bf	.z_plus
(2)  731/     4DE : 600B                		neg	r0,r0
(2)  732/     4E0 :                     .z_plus:
(2)  733/     4E0 : 310C                		add	r0,r1
(2)  734/     4E2 : 3513                		cmp/ge	r1,r5
(2)  735/     4E4 : 8B1C                		bf	.bad_face
(2)  736/     4E6 : 451A                		lds	r5,macl
(2)  737/     4E8 :                     	; X/Y checks
(2)  738/     4E8 : 67D3                		mov	r13,r7
(2)  739/     4EA : 7708                		add	#plygn_points,r7
(2)  740/     4EC : 6173                		mov	r7,r1
(2)  741/     4EE : E52A                		mov	#(SET_MSCRLWDTH/2)>>2,r5
(2)  742/     4F0 : 4508                		shll2	r5
(2)  743/     4F2 : B023                		bsr	mdl_get_hilow
(2)  744/     4F4 : 645B                		neg	r5,r4
(2)  745/     4F6 : 3243                		cmp/ge	r4,r2
(2)  746/     4F8 : 8B12                		bf	.bad_face
(2)  747/     4FA : 3357                		cmp/gt	r5,r3
(2)  748/     4FC : 8910                		bt	.bad_face
(2)  749/     4FE : 6173                		mov	r7,r1
(2)  750/     500 : 7104                		add	#4,r1
(2)  751/     502 : E51E                		mov	#(SET_MSCRLHGHT/2)>>2,r5
(2)  752/     504 : 4508                		shll2	r5
(2)  753/     506 : B019                		bsr	mdl_get_hilow
(2)  754/     508 : 645B                		neg	r5,r4
(2)  755/     50A : 3243                		cmp/ge	r4,r2
(2)  756/     50C : 8B08                		bf	.bad_face
(2)  757/     50E : 3353                		cmp/ge	r5,r3
(2)  758/     510 : 8906                		bt	.bad_face
(2)  759/     512 :                     	; *** Valid face:
(2)  760/     512 : 001A                		sts	macl,r0
(2)  761/     514 : 2C02                		mov	r0,@r12
(2)  762/     516 : 1CD1                		mov	r13,@(4,r12)
(2)  763/     518 : 7D38                		add	#plygn_len,r13	; Next X/Y polygon
(2)  764/     51A : 7C08                		add	#8,r12			; Next Z storage
(2)  765/     51C : 7B01                		add	#1,r11			; Mark as a valid face
(2)  766/     51E : 0009                		nop
(2)  767/     520 :                     .bad_face:
(2)  768/     520 : 070A                		sts	mach,r7
(2)  769/     522 : 4910                		dt	r9
(2)  770/     524 : 8902                		bt	.exit
(2)  771/     526 : AF41                		bra	.next_face
(2)  772/     528 : 0009                		nop
(2)  773/     52A :                     		align 4
(2)  774/     52C :                     .exit:
(2)  775/     52C : 4F26                		lds	@r15+,pr
(2)  776/     52E : 000B                		rts
(2)  777/     530 : 0009                		nop
(2)  778/     532 :                     		align 4
(2)  779/     534 : 0600 72E0 0100      		ltorg
              53A : FF60             
(2)  780/     53C :                     
(2)  781/     53C :                     ; ----------------------------------------
(2)  782/     53C :                     ; X/Y off check
(2)  783/     53C :                     ; ----------------------------------------
(2)  784/     53C :                     
(2)  785/     53C :                     ; r1 - points
(2)  786/     53C :                     ; r4 - left maximum
(2)  787/     53C :                     ; r5 - right maximum
(2)  788/     53C :                     mdl_get_hilow:
(2)  789/     53C : E604                		mov	#4,r6
(2)  790/     53E : 6212                		mov	@r1,r2
(2)  791/     540 : 6323                		mov	r2,r3
(2)  792/     542 :                     .pick_next:
(2)  793/     542 : 6012                		mov	@r1,r0
(2)  794/     544 : 3047                		cmp/gt	r4,r0
(2)  795/     546 : 8B00                		bf	.x_l
(2)  796/     548 : 6203                		mov	r0,r2
(2)  797/     54A :                     .x_l:
(2)  798/     54A : 3053                		cmp/ge	r5,r0
(2)  799/     54C : 8900                		bt	.x_r
(2)  800/     54E : 6303                		mov	r0,r3
(2)  801/     550 :                     .x_r:
(2)  802/     550 : 4610                		dt	r6
(2)  803/     552 : 8FF6                		bf/s	.pick_next
(2)  804/     554 : 7108                		add	#8,r1
(2)  805/     556 : 000B                		rts
(2)  806/     558 : 0009                		nop
(2)  807/     55A :                     		align 4
(2)  808/     55C :                     
(2)  809/     55C :                     ; ----------------------------------------
(2)  810/     55C :                     ; Modify position to current point
(2)  811/     55C :                     ; ----------------------------------------
(2)  812/     55C :                     
(2)  813/     55C :                     ; r2 - X
(2)  814/     55C :                     ; r3 - Y
(2)  815/     55C :                     ; r4 - Z
(2)  816/     55C :                     		align 4
(2)  817/     55C :                     mdlrd_setpoint:
(2)  818/     55C : 4F22                		sts	pr,@-r15
(2)  819/     55E : 2F56                		mov 	r5,@-r15
(2)  820/     560 : 2F66                		mov 	r6,@-r15
(2)  821/     562 : 2F76                		mov 	r7,@-r15
(2)  822/     564 : 2F86                		mov 	r8,@-r15
(2)  823/     566 : 2F96                		mov 	r9,@-r15
(2)  824/     568 : 2FA6                		mov 	r10,@-r15
(2)  825/     56A : 2FB6                		mov 	r11,@-r15
(2)  826/     56C :                     	; Object rotation
(2)  827/     56C : 6523                		mov	r2,r5			; r5 - X
(2)  828/     56E : 6643                		mov	r4,r6			; r6 - Z
(2)  829/     570 : 50E7                  		mov	@(mmdl_y_rot,r14),r0
(2)  830/     572 : B057                  		bsr	mdlrd_rotate
(2)  831/     574 : 4021                  		shar	r0
(2)  832/     576 : 6273                   		mov	r7,r2
(2)  833/     578 : 6533                   		mov	r3,r5			; r5 - Y
(2)  834/     57A : 6683                  		mov	r8,r6
(2)  835/     57C : 50E5                  		mov	@(mmdl_x_rot,r14),r0
(2)  836/     57E : B051                  		bsr	mdlrd_rotate
(2)  837/     580 : 4021                  		shar	r0
(2)  838/     582 : 6483                   		mov	r8,r4			; UPDATE Z
(2)  839/     584 : 6523                		mov	r2,r5			; r5 - X
(2)  840/     586 : 6673                   		mov	r7,r6
(2)  841/     588 : 50E6                   		mov	@(mmdl_z_rot,r14),r0
(2)  842/     58A : B04B                  		bsr	mdlrd_rotate
(2)  843/     58C : 4021                  		shar	r0
(2)  844/     58E : 6273                   		mov	r7,r2			; UPDATE X
(2)  845/     590 : 6383                   		mov	r8,r3			; UPDATE Y
(2)  846/     592 : 0009                   		nop
(2)  847/     594 : 55E2                		mov	@(mmdl_x_pos,r14),r5
(2)  848/     596 : 325C                		add 	r5,r2
(2)  849/     598 : 56E3                		mov	@(mmdl_y_pos,r14),r6
(2)  850/     59A : 336C                		add 	r6,r3
(2)  851/     59C : 57E4                		mov	@(mmdl_z_pos,r14),r7
(2)  852/     59E : 347C                		add 	r7,r4
(2)  853/     5A0 :                     
(2)  854/     5A0 :                     ; 		mov	@(mmdl_x_pos,r14),r0
(2)  855/     5A0 :                     ; 		exts.w	r0,r5
(2)  856/     5A0 :                     ; 		mov	@(mmdl_y_pos,r14),r0
(2)  857/     5A0 :                     ; 		exts.w	r0,r6
(2)  858/     5A0 :                     ; 		mov	@(mmdl_z_pos,r14),r0
(2)  859/     5A0 :                     ; 		exts.w	r0,r7
(2)  860/     5A0 :                     ; 		add 	r5,r2
(2)  861/     5A0 :                     ; 		add 	r6,r3
(2)  862/     5A0 :                     ; 		add 	r7,r4
(2)  863/     5A0 :                     mdlrd_persp:
(2)  864/     5A0 :                     	; Include camera changes
(2)  865/     5A0 : DB35                		mov	#RAM_Mars_ObjCamera,r11
(2)  866/     5A2 : 55B0                		mov	@(mcam_x_pos,r11),r5
(2)  867/     5A4 : 56B1                		mov	@(mcam_y_pos,r11),r6
(2)  868/     5A6 : 57B2                		mov	@(mcam_z_pos,r11),r7
(2)  869/     5A8 : 3258                		sub 	r5,r2
(2)  870/     5AA : 3368                		sub 	r6,r3
(2)  871/     5AC : 3478                		sub 	r7,r4
(2)  872/     5AE : 6523                		mov	r2,r5
(2)  873/     5B0 : 6643                		mov	r4,r6
(2)  874/     5B2 : 50B4                  		mov 	@(mcam_y_rot,r11),r0
(2)  875/     5B4 : B036                  		bsr	mdlrd_rotate
(2)  876/     5B6 : 4001                  		shlr	r0
(2)  877/     5B8 : 6273                   		mov	r7,r2
(2)  878/     5BA : 6483                   		mov	r8,r4
(2)  879/     5BC : 6533                   		mov	r3,r5
(2)  880/     5BE : 6683                  		mov	r8,r6
(2)  881/     5C0 : 50B3                  		mov 	@(mcam_x_rot,r11),r0
(2)  882/     5C2 : B02F                  		bsr	mdlrd_rotate
(2)  883/     5C4 : 4001                  		shlr	r0
(2)  884/     5C6 : 6483                   		mov	r8,r4
(2)  885/     5C8 : 6523                   		mov	r2,r5
(2)  886/     5CA : 6673                   		mov	r7,r6
(2)  887/     5CC : 50B5                   		mov 	@(mcam_z_rot,r11),r0
(2)  888/     5CE : B029                  		bsr	mdlrd_rotate
(2)  889/     5D0 : 4001                  		shlr	r0
(2)  890/     5D2 : 6273                   		mov	r7,r2
(2)  891/     5D4 : 6383                   		mov	r8,r3
(2)  892/     5D6 :                     	; Do perspective
(2)  893/     5D6 : D729                		mov	#320<<15,r7
(2)  894/     5D8 : 684B                		neg	r4,r8		; reverse Z
(2)  895/     5DA : 4815                		cmp/pl	r8
(2)  896/     5DC : 8906                		bt	.inside
(2)  897/     5DE : 6043                		mov	r4,r0
(2)  898/     5E0 :                     .patchme:
(2)  899/     5E0 : 4028                		shll16	r0
(2)  900/     5E2 : 4000                		shll	r0
(2)  901/     5E4 : 370C                		add	r0,r7
(2)  902/     5E6 : 4709                		shlr2	r7
(2)  903/     5E8 : A00A                		bra	.zmulti
(2)  904/     5EA : 4709                		shlr2	r7
(2)  905/     5EC :                     .inside:
(2)  906/     5EC : E918                		mov	#24,r9
(2)  907/     5EE : 3893                		cmp/ge	r9,r8
(2)  908/     5F0 : 8901                		bt	.center
(2)  909/     5F2 : AFF5                		bra	.patchme
(2)  910/     5F4 : 6043                		mov	r4,r0
(2)  911/     5F6 :                     
(2)  912/     5F6 :                     .center:
(2)  913/     5F6 : 9947                		mov 	#_JR,r9
(2)  914/     5F8 : 2982                		mov 	r8,@r9
(2)  915/     5FA : 1971                		mov 	r7,@(4,r9)
(2)  916/     5FC : 0009                		nop
(2)  917/     5FE : 5795                		mov 	@($14,r9),r7
(2)  918/     600 :                     .zmulti:
(2)  919/     600 : 327D                		dmuls	r7,r2
(2)  920/     602 : 000A                		sts	mach,r0
(2)  921/     604 : 021A                		sts	macl,r2
(2)  922/     606 : 220D                		xtrct	r0,r2
(2)  923/     608 : 337D                		dmuls	r7,r3
(2)  924/     60A : 000A                		sts	mach,r0
(2)  925/     60C : 031A                		sts	macl,r3
(2)  926/     60E : 230D                		xtrct	r0,r3
(2)  927/     610 : 6BF6                		mov	@r15+,r11
(2)  928/     612 : 6AF6                		mov	@r15+,r10
(2)  929/     614 : 69F6                		mov	@r15+,r9
(2)  930/     616 : 68F6                		mov	@r15+,r8
(2)  931/     618 : 67F6                		mov	@r15+,r7
(2)  932/     61A : 66F6                		mov	@r15+,r6
(2)  933/     61C : 65F6                		mov	@r15+,r5
(2)  934/     61E : 4F26                		lds	@r15+,pr
(2)  935/     620 : 000B                		rts
(2)  936/     622 : 0009                		nop
(2)  937/     624 :                     		align 4
(2)  938/     624 :                     
(2)  939/     624 :                     ; ------------------------------
(2)  940/     624 :                     ; Rotate point
(2)  941/     624 :                     ;
(2)  942/     624 :                     ; Entry:
(2)  943/     624 :                     ; r5: x
(2)  944/     624 :                     ; r6: y
(2)  945/     624 :                     ; r0: theta
(2)  946/     624 :                     ;
(2)  947/     624 :                     ; Returns:
(2)  948/     624 :                     ; r7: (x  cos @) + (y sin @)
(2)  949/     624 :                     ; r8: (x -sin @) + (y cos @)
(2)  950/     624 :                     ; ------------------------------
(2)  951/     624 :                     
(2)  952/     624 :                     		align 4
(2)  953/     624 :                     mdlrd_rotate:
(2)  954/     624 : 9731                    		mov	#$7FF,r7
(2)  955/     626 : 2079                    		and	r7,r0
(2)  956/     628 : 4008                   		shll2	r0
(2)  957/     62A : D715                		mov	#sin_table,r7
(2)  958/     62C : D815                		mov	#sin_table+$800,r8
(2)  959/     62E : 097E                		mov	@(r0,r7),r9
(2)  960/     630 : 0A8E                		mov	@(r0,r8),r10
(2)  961/     632 : 3A5D                		dmuls	r5,r10		; x cos @
(2)  962/     634 : 071A                		sts	macl,r7
(2)  963/     636 : 000A                		sts	mach,r0
(2)  964/     638 : 270D                		xtrct	r0,r7
(2)  965/     63A : 396D                		dmuls	r6,r9		; y sin @
(2)  966/     63C : 081A                		sts	macl,r8
(2)  967/     63E : 000A                		sts	mach,r0
(2)  968/     640 : 280D                		xtrct	r0,r8
(2)  969/     642 : 378C                		add	r8,r7
(2)  970/     644 : 699B                		neg	r9,r9
(2)  971/     646 : 395D                		dmuls	r5,r9		; x -sin @
(2)  972/     648 : 081A                		sts	macl,r8
(2)  973/     64A : 000A                		sts	mach,r0
(2)  974/     64C : 280D                		xtrct	r0,r8
(2)  975/     64E : 3A6D                		dmuls	r6,r10		; y cos @
(2)  976/     650 : 091A                		sts	macl,r9
(2)  977/     652 : 000A                		sts	mach,r0
(2)  978/     654 : 290D                		xtrct	r0,r9
(2)  979/     656 : 389C                		add	r9,r8
(2)  980/     658 : 000B                 		rts
(2)  981/     65A : 0009                		nop
(2)  982/     65C :                     		align 4
(2)  983/     65C :                     
(2)  984/     65C :                     ; ====================================================================
(2)  985/     65C :                     
(2)  986/     65C :                     		align 4
(2)  987/     65C :                     Mars_CachePurge_S:
(2)  988/     65C : 9116                		mov.w	#_CCR&$FFFF,r1		; Purge ON, Cache OFF
(2)  989/     65E : E010                		mov	#%10000,r0
(2)  990/     660 : 2100                		mov.b	r0,@r1
(2)  991/     662 : 0009                		nop
(2)  992/     664 : 0009                		nop
(2)  993/     666 : 0009                		nop
(2)  994/     668 : 0009                		nop
(2)  995/     66A : 0009                		nop
(2)  996/     66C : 0009                		nop
(2)  997/     66E : 0009                		nop
(2)  998/     670 : E009                		mov	#%01001,r0		; Purge OFF, Two-Way mode, Cache ON
(2)  999/     672 : 000B                		rts
(2) 1000/     674 : 2100                		mov.b	r0,@r1
(2) 1001/     676 :                     		align 4
(2) 1002/     678 :                     
(2) 1003/     678 :                     ; ====================================================================
(2) 1004/     678 :                     
(2) 1005/     678 : 0600 72E0 00A0      		ltorg
              67E : 0000 0600 24AC 
              684 : 0600 2CAC FF00 
              68A : 07FF FE92          
(2) 1006/     68E :                     
(2) 1007/     68E :                     ; ====================================================================
(2) 1008/     68E :                     
(2) 1009/     68E :                     			align $10
(2) 1010/     690 :                     CachSlv_CurrPage	ds.l 1
(2) 1011/     694 :                     
(2) 1012/     694 :                     ; ------------------------------------------------
(2) 1013/ 60024AC :                     		dephase
(2) 1014/ 60024AC :                     ; .end:		phase CACHE_SLAVE+.end&$1FFF
(2) 1015/ 60024AC :                     
(2) 1016/ 60024AC :                     		align 4
(2) 1017/ 60024AC :                     CACHE_SLAVE_E:
(2) 1018/ 60024AC : (MACRO)              	erreport "SH2 SLAVE CACHE",CACHE_SLAVE_E-CACHE_SLAVE,$800
(2) 1019/ 60024AC :                     
(1) 2422/ 60024AC :                     
(1) 2423/ 60024AC :                     ; ====================================================================
(1) 2424/ 60024AC :                     ; ----------------------------------------------------------------
(1) 2425/ 60024AC :                     ; Data
(1) 2426/ 60024AC :                     ; ----------------------------------------------------------------
(1) 2427/ 60024AC :                     
(1) 2428/ 60024AC :                     		align 4
(1) 2429/ 60024AC :                     sin_table	binclude "nikona/mars/data/sinedata.bin"
(1) 2430/ 6004CAC :                     		align 4
(1) 2431/ 6004CAC :                     
(1) 2432/ 6004CAC :                     ; ====================================================================
(1) 2433/ 6004CAC :                     ; ----------------------------------------------------------------
(1) 2434/ 6004CAC :                     ; GLOBAL GBR Variables for MASTER
(1) 2435/ 6004CAC :                     ; ----------------------------------------------------------------
(1) 2436/ 6004CAC :                     
(1) 2437/ 6004CAC :                     		align $10
(1) 2438/ 6004CB0 :                     RAM_Mars_Global:
(1) 2439/       0 :                     marsGbl		struct
(1) 2440/       0 :                     ThisFrame	ds.w 1			; Current framebuffer number
(1) 2441/       2 :                     XShift		ds.w 1			; horizontal scroll & 1 bit (2D ONLY)
(1) 2442/       4 :                     WdgTask		ds.w 1			; Current Watchdog task
(1) 2443/       6 :                     WdgHold		ds.w 1			; Watchdog ignore (without turning it off)
(1) 2444/       8 :                     WdgDivLock	ds.w 1			; Watchdog division skip (for Textures only)
(1) 2445/       A :                     WdgReady	ds.w 1			; Flag to report that all polygons are finished slicing
(1) 2446/       C :                     PlyPzCntr	ds.w 1			; Number of polygon pieces to draw
(1) 2447/       E :                     WdgClLines	ds.w 1			; Number of lines to clear for WDG task $07
(1) 2448/      10 :                     WdgActive	ds.w 1
(1) 2449/      12 :                     		ds.w 1
(1) 2450/      14 :                     		ds.w 1
(1) 2451/      16 :                     DrawAll		ds.w 1
(1) 2452/      18 :                     3D_OutWidth	ds.l 1
(1) 2453/      1C :                     3D_OutHeight	ds.l 1
(1) 2454/      20 :                     DreqRead	ds.l 1			; **** RAM_Mars_DreqBuff_0|TH
(1) 2455/      24 :                     DreqWrite	ds.l 1			; RAM_Mars_DreqBuff_1|TH
(1) 2456/      28 :                     PlgnPzIndx_R	ds.l 1			; R/W piece indexes
(1) 2457/      2C :                     PlgnPzIndx_W	ds.l 1			;
(1) 2458/      30 :                     Scrl_Xpos	ds.l 1			; ****
(1) 2459/      34 :                     Scrl_Ypos	ds.l 1
(1) 2460/      38 :                     Scrl_Xold	ds.l 1
(1) 2461/      3C :                     Scrl_Yold	ds.l 1
(1) 2462/      40 :                     Scrl_Size	ds.l 1			; ****
(1) 2463/      44 :                     Scrl_Wdth	ds.l 1
(1) 2464/      48 :                     Scrl_Hght	ds.l 1
(1) 2465/      4C :                     Scrl_Vram	ds.l 1
(1) 2466/      50 :                     Scrl_FbOut	ds.l 1			; ****
(1) 2467/      54 :                     Scrl_FbTL	ds.l 1
(1) 2468/      58 :                     Scrl_FbY	ds.l 1
(1) 2469/      5C :                     Scrl_FbX	ds.l 1
(1) 2470/      60 :                     ; len		ds.l 0
(1) 2471/ 6004CB0 : =$60                 		endstruct
(1) 2472/ 6004CB0 :                     		ds.b marsGbl_len
(1) 2473/ 6004D10 :                     
(1) 2474/ 6004D10 :                     ; ====================================================================
(1) 2475/ 6004D10 :                     ; ----------------------------------------------------------------
(1) 2476/ 6004D10 :                     ; NON-CACHED RAM
(1) 2477/ 6004D10 :                     ; ----------------------------------------------------------------
(1) 2478/ 6004D10 :                     
(1) 2479/ 6004D10 :                     			align $10
(1) 2480/ 6004D10 :                     SH2_RAM_TH:
(1) 2481/26004D10 :                     			phase SH2_RAM_TH|TH
(1) 2482/26004D10 :                     RAM_Mars_DreqBuff_0	ds.b Dreq_len				; DREQ data from Genesis
(1) 2483/26005730 :                     RAM_Mars_DreqBuff_1	ds.b Dreq_len				; ****
(1) 2484/26006150 :                     RAM_Mars_PwmTable	ds.b 8*8				; GEMA Z80 table
(1) 2485/26006190 :                     RAM_Mars_PwmList	ds.b marspwm_len*MAX_PWMCHNL		; PWM list
(1) 2486/260062D0 :                     RAM_Mars_PwmBackup	ds.b $200*MAX_PWMCHNL			; RV PWM backup buffer
(1) 2487/260072D0 :                     RAM_Mars_CurrPlgnPage	ds.l 1
(1) 2488/ 60072D4 :                     			dephase
(1) 2489/ 60072D4 :                     
(1) 2490/ 60072D4 :                     ; ====================================================================
(1) 2491/ 60072D4 :                     ; ----------------------------------------------------------------
(1) 2492/ 60072D4 :                     ; CACHED RAM
(1) 2493/ 60072D4 :                     ;
(1) 2494/ 60072D4 :                     ; Flush the cache often when using this.
(1) 2495/ 60072D4 :                     ; ----------------------------------------------------------------
(1) 2496/ 60072D4 :                     
(1) 2497/ 60072D4 :                     			align $10
(1) 2498/ 60072E0 :                     SH2_RAM:
(1) 2499/ 60072E0 :                     			ds.b $8800				; <-- Maximum RAM for the fake-Video modes
(1) 2500/ 600FAE0 :                     RAM_Mars_VramData	ds.b MAX_MarsVram			; ** SHARED
(1) 2501/ 6027AE0 :                     			align $10
(1) 2502/ 6027AE0 :                     
(1) 2503/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2504/ 6027AE0 :                     ; RAM section for 2D
(1) 2505/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2506/ 6027AE0 :                     
(1) 2507/ 6027AE0 : (MACRO)              			memory SH2_RAM
(1) 2507/ 6027AE0 : =$6027AE0            GLBL_LASTPC     := *
(1) 2507/   362E0 :                                     dephase
(1) 2507/ 60072E0 :                                     phase SH2_RAM
(1) 2507/ 60072E0 : =$60072E0            GLBL_LASTORG    := *
(1) 2508/ 60072E0 :                     RAM_Mars_SprDrwCanvas	ds.b 320*92
(1) 2509/ 600E5E0 :                     sizeof_marsram_0	ds.l 0
(1) 2510/ 600E5E0 : (MACRO)              			endmemory
(1) 2510/   3D5E0 :                     .here:          dephase
(1) 2510/   3D5E0 :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2510/ 6027AE0 :                                     phase GLBL_LASTPC
(1) 2511/ 6027AE0 : (MACRO)              			erreport "2D section",sizeof_marsram_0-SH2_RAM,$8C00
(1) 2512/ 6027AE0 :                     
(1) 2513/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2514/ 6027AE0 :                     ; RAM section for 3D
(1) 2515/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2516/ 6027AE0 :                     
(1) 2517/ 6027AE0 : (MACRO)              			memory SH2_RAM
(1) 2517/ 6027AE0 : =$6027AE0            GLBL_LASTPC     := *
(1) 2517/   362E0 :                                     dephase
(1) 2517/ 60072E0 :                                     phase SH2_RAM
(1) 2517/ 60072E0 : =$60072E0            GLBL_LASTORG    := *
(1) 2518/ 60072E0 :                     RAM_Mars_Buff3D_Start	ds.l 0				; <-- ****
(1) 2519/ 60072E0 :                     RAM_Mars_ObjCamera	ds.b $40			; Object camera
(1) 2520/ 6007320 :                     RAM_Mars_Objects	ds.b mmdl_len*MAX_MARSOBJ	; Objects
(1) 2521/ 6007820 :                     RAM_Mars_SprPolygn	ds.b mspr_len*MAX_MARSMSPR
(1) 2522/ 6007B20 :                     RAM_Mars_Polygons_0	ds.b plygn_len*MAX_FACES	; Read/Write polygon data
(1) 2523/ 600B320 :                     RAM_Mars_Polygons_1	ds.b plygn_len*MAX_FACES
(1) 2524/ 600EB20 :                     RAM_Mars_PlgnList_0	ds.l MAX_FACES*2		; Polygon order list: Zpos, pointer
(1) 2525/ 600F320 :                     RAM_Mars_PlgnList_1	ds.l MAX_FACES*2
(1) 2526/ 600FB20 :                     RAM_Mars_PlgnNum_0	ds.l 1
(1) 2527/ 600FB24 :                     RAM_Mars_PlgnNum_1	ds.l 1
(1) 2528/ 600FB28 :                     RAM_Mars_Buff3D_End	ds.l 0				; <-- ****
(1) 2529/ 600FB28 :                     sizeof_marsram_1	ds.l 0
(1) 2530/ 600FB28 : (MACRO)              			endmemory
(1) 2530/   3EB28 :                     .here:          dephase
(1) 2530/   3EB28 :                                     ds.b -(.here-GLBL_LASTORG)
(1) 2530/ 6027AE0 :                                     phase GLBL_LASTPC
(1) 2531/ 6027AE0 : (MACRO)              			erreport "3D section",sizeof_marsram_1-SH2_RAM,$8C00
(1) 2532/ 6027AE0 :                     
(1) 2533/ 6027AE0 :                     ; ====================================================================
(1) 2534/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2535/ 6027AE0 :                     ; USER DATA GOES HERE
(1) 2536/ 6027AE0 :                     ; ----------------------------------------------------------------
(1) 2537/ 6027AE0 :                     
(1) 2538/ 6027AE0 :                     SH2_USER_DATA:
(1) 2539/ 6027AE0 :                     		include "sound/smpl_pwm.asm"			; GEMA: PWM samples
(2)    1/ 6027AE0 :                     ; ===========================================================================
(2)    2/ 6027AE0 :                     ; -------------------------------------------------------------------
(2)    3/ 6027AE0 :                     ; GEMA/Nikona PWM instruments located at SDRAM
(2)    4/ 6027AE0 :                     ;
(2)    5/ 6027AE0 :                     ; *** VERY LIMITED STORAGE ***
(2)    6/ 6027AE0 :                     ; If you are using CD32X consider using PCM samples instead.
(2)    7/ 6027AE0 :                     ;
(2)    8/ 6027AE0 :                     ; MACRO:
(2)    9/ 6027AE0 :                     ; gSmplData Label,"file_path",loop_start
(2)   10/ 6027AE0 :                     ; Set loop_start to 0 if not using it.
(2)   11/ 6027AE0 :                     ;
(2)   12/ 6027AE0 :                     ; BASE C-5 samplerate is 16000hz
(2)   13/ 6027AE0 :                     ; -------------------------------------------------------------------
(2)   14/ 6027AE0 :                     
(2)   15/ 6027AE0 :                     	align 4
(2)   16/ 6027AE0 :                     	;gSmplData Label,"file_path",loop_start
(2)   17/ 6027AE0 :                     
(2)   18/ 6027AE0 :                     
(2)   19/ 6027AE0 :                     
(1) 2540/ 6027AE0 :                     		include "game/data/mars/objects/list.asm"
(2)    1/ 6027AE0 :                     ; ===========================================================================
(2)    2/ 6027AE0 :                     ; ----------------------------------------------------------------
(2)    3/ 6027AE0 :                     ; Special include for the 3D models
(2)    4/ 6027AE0 :                     ;
(2)    5/ 6027AE0 :                     ; Data is available to both 32X Cartridge and CD32X
(2)    6/ 6027AE0 :                     ; ----------------------------------------------------------------
(2)    7/ 6027AE0 :                     
(2)    8/ 6027AE0 :                     ; 		include "game/data/mars/objects/test/head.asm"
(2)    9/ 6027AE0 :                     ; 		include "game/data/mars/objects/test_2/head.asm"
(2)   10/ 6027AE0 :                     ; 		include "game/data/mars/objects/test_3/head.asm"
(2)   11/ 6027AE0 :                     	;	include "game/data/mars/objects/rubia/head.asm"
(2)   12/ 6027AE0 :                     
(1) 2541/ 6027AE0 :                     
(1) 2542/ 6027AE0 :                     ; ====================================================================
(1) 2543/ 6027AE0 :                     
(1) 2544/ 6027AE0 :                     .end:
(1) 2545/ 6027AE0 : (MACRO)              		erreport "SH2 USER DATA",.end-SH2_USER_DATA,(CS3|$40000)-SH2_USER_DATA
(1) 2546/ 6027AE0 :                     
(1) 2547/ 6027AE0 :                     ; ====================================================================
(1) 2548/ 6027AE0 :                     		align $10
(1) 2549/ 6027AE0 :                     SH2_END:
(1) 2550/ 6027AE0 :                     		cpu 68000
(1) 2551/ 6027AE0 :                     		padding off
(1) 2552/   362E0 :                     		dephase
(1) 2553/   362E0 :                     		phase (SH2_END-SH2_Master)+MARS_RAMCODE
(1) 2554/   362E0 :                     		align 4
(1) 2555/   362E0 :                     
     361/   362E0 :                     	; ------------------------------------------------
     365/   362E0 :                     MARS_RAMCODE_E:
     367/   362E0 :                     		align $800
     368/   36800 :                     MARS_RAMCODE_EOF:
     370/   36800 :                     
     371/   36800 :                     ; ====================================================================
     372/   36800 :                     ; --------------------------------------------------------
     373/   36800 :                     ; CODE
     374/   36800 :                     ; --------------------------------------------------------
     375/   36800 :                     
     376/   36800 :                     		include "game/incl_code.asm"
(1)    1/   36800 :                     ; ============================================================
(1)    2/   36800 :                     ; --------------------------------------------------------
(1)    3/   36800 :                     ; CODE BANKS section
(1)    4/   36800 :                     ;
(1)    5/   36800 :                     ; Usage:
(1)    6/   36800 :                     ; screen_code START_LABEL,END_LABEL,CODE_PATH
(1)    7/   36800 :                     ;
(1)    8/   36800 :                     ; NOTES:
(1)    9/   36800 :                     ; - Screen order is at game/screens.asm
(1)   10/   36800 :                     ; - DATA banks are loaded separately inside the
(1)   11/   36800 :                     ;   screen's code
(1)   12/   36800 :                     ; --------------------------------------------------------
(1)   13/   36800 :                     
(1)   14/   36800 : (MACRO)              	screen_code Md_Screen00,Md_Screen00_e,"game/code/main.asm"
(1)   14/   36800 :                                     align $800              ; SCD/CD32X sector align
(1)   14/   36800 : =$36800              MD_SCREEN00 label *                        ; Register start label
(1)   14/   36800 :                     mctopscrn:
(1)   14/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; Phase code to RAM area
(1)   14/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   14/FFFFFFFFFFFF2C00 :                             include "game/code/main.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; SCREEN CODE
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Variables
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$4                  MAX_SC0_OPTIONS		equ 4
(2)   12/FFFFFFFFFFFF2C00 :                     
(2)   13/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   14/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   15/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   16/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   17/FFFFFFFFFFFF2C00 :                     
(2)   18/FFFFFFFFFFFF2C00 :                     ; 			memory 2
(2)   19/FFFFFFFFFFFF2C00 :                     ; 			ds.b 2
(2)   20/FFFFFFFFFFFF2C00 :                     ; thisVram_BG		ds.b $419
(2)   21/FFFFFFFFFFFF2C00 :                     ; thisVram_BG_e		ds.b 0
(2)   22/FFFFFFFFFFFF2C00 :                     ; 			endmemory
(2)   23/FFFFFFFFFFFF2C00 :                     
(2)   24/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   25/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   26/FFFFFFFFFFFF2C00 :                     ; This screen's RAM
(2)   27/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   28/FFFFFFFFFFFF2C00 :                     
(2)   29/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   29/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   29/   36800 :                                     dephase
(2)   29/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   29/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   30/FFFFFFFFFFFFB800 :                     RAM_SC0_CurrOption	ds.w 1
(2)   31/FFFFFFFFFFFFB802 :                     RAM_SC0_OldOption	ds.w 1
(2)   32/FFFFFFFFFFFFB804 :                     .sizeof_this		ds.l 0
(2)   33/FFFFFFFFFFFFB808 :  (MACRO-2)           			endmemory
(2)   33/   36808 :                     .here:          dephase
(2)   33/   36808 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   33/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   34/FFFFFFFFFFFF2C00 :  (MACRO-2)           			erreport "This screen",.sizeof_this-RAM_ScrnBuff,MAX_ScrnBuff
(2)   35/FFFFFFFFFFFF2C00 :                     
(2)   36/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   37/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   38/FFFFFFFFFFFF2C00 :                     ; Init
(2)   39/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   40/FFFFFFFFFFFF2C00 :                     
(2)   41/FFFFFFFFFFFF2C00 : 6100 DAF2           		bsr	Video_DisplayOff			; Disable VDP Display
(2)   42/FFFFFFFFFFFF2C04 : 6100 F6B2           		bsr	System_Default				; Default system settings
(2)   43/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   44/FFFFFFFFFFFF2C08 :                     	; Init/Load save
(2)   45/FFFFFFFFFFFF2C08 : 52B8 E87C           		addq.l	#1,(RAM_Save_Counter).w
(2)   46/FFFFFFFFFFFF2C0C : 6100 F616           		bsr	System_SramSave				; Save to SRAM/BRAM
(2)   47/FFFFFFFFFFFF2C10 :                     	; ----------------------------------------------
(2)   48/FFFFFFFFFFFF2C10 :                     	; Init Print
(2)   49/FFFFFFFFFFFF2C10 : 203C 0003 8000      		move.l	#DATA_BANK0,d0				; Load MAIN DATA bank
(2)   50/FFFFFFFFFFFF2C16 : 6100 FBF6           		bsr	System_SetDataBank
(2)   51/FFFFFFFFFFFF2C1A : 203C 0022 7CE4      		move.l	#ASCII_FONT,d0
(2)   52/FFFFFFFFFFFF2C20 : 323C 05A0           		move.w	#DEF_PrintVram,d1
(2)   53/FFFFFFFFFFFF2C24 : 6100 E3C4           		bsr	Video_PrintInit
(2)   54/FFFFFFFFFFFF2C28 : 203C 0022 88E4      		move.l	#ASCII_FONT_W,d0
(2)   55/FFFFFFFFFFFF2C2E : 323C 04E0           		move.w	#DEF_PrintVramW,d1
(2)   56/FFFFFFFFFFFF2C32 : 6100 E3B0           		bsr	Video_PrintInitW
(2)   57/FFFFFFFFFFFF2C36 : 6100 E3BC           		bsr	Video_PrintDefPal_Fade
(2)   58/FFFFFFFFFFFF2C3A :                     	; ----------------------------------------------
(2)   59/FFFFFFFFFFFF2C3A :                     ; 		move.l	#ART_TESTBG,d0
(2)   60/FFFFFFFFFFFF2C3A :                     ; 		move.w	#cell_num(thisVram_BG),d1
(2)   61/FFFFFFFFFFFF2C3A :                     ; 		move.w	#cell_num(thisVram_BG_e-thisVram_BG),d2
(2)   62/FFFFFFFFFFFF2C3A :                     ; 		bsr	Video_LoadArt
(2)   63/FFFFFFFFFFFF2C3A :                     ; 		lea	(MAP_TESTBG),a0
(2)   64/FFFFFFFFFFFF2C3A :                     ; 		move.l	#splitw(0,0),d0
(2)   65/FFFFFFFFFFFF2C3A :                     ; 		move.l	#splitw(320/8,224/8),d1
(2)   66/FFFFFFFFFFFF2C3A :                     ; 		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_BG),d2
(2)   67/FFFFFFFFFFFF2C3A :                     ; 		move.w	#thisVram_BG|$4000,d3
(2)   68/FFFFFFFFFFFF2C3A :                     ; 		bsr	Video_LoadMap
(2)   69/FFFFFFFFFFFF2C3A :                     ; 		lea	(PAL_TESTBG),a0
(2)   70/FFFFFFFFFFFF2C3A :                     ; 		moveq	#32,d0
(2)   71/FFFFFFFFFFFF2C3A :                     ; 		moveq	#16,d1
(2)   72/FFFFFFFFFFFF2C3A :                     ; 		bsr	Video_FadePal
(2)   73/FFFFFFFFFFFF2C3A :                     	; ----------------------------------------------
(2)   74/FFFFFFFFFFFF2C3A : 41FA 0084           		lea	str_MenuText(pc),a0
(2)   75/FFFFFFFFFFFF2C3E : 7001                		moveq	#1,d0					; X/Y position: 1,1
(2)   76/FFFFFFFFFFFF2C40 : 7201                		moveq	#1,d1
(2)   77/FFFFFFFFFFFF2C42 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; FG VRAM location
(2)   78/FFFFFFFFFFFF2C46 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; FG width
(2)   79/FFFFFFFFFFFF2C4C : 6100 E44E           		bsr	Video_PrintW
(2)   80/FFFFFFFFFFFF2C50 : 41F8 E87C           		lea	(RAM_Save_Counter).w,a0
(2)   81/FFFFFFFFFFFF2C54 : 227C 0000 0003      		move.l	#3,a1
(2)   82/FFFFFFFFFFFF2C5A : 7001                		moveq	#1,d0
(2)   83/FFFFFFFFFFFF2C5C : 7203                		moveq	#3,d1
(2)   84/FFFFFFFFFFFF2C5E : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)   85/FFFFFFFFFFFF2C62 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)   86/FFFFFFFFFFFF2C68 : 6100 E57C           		bsr	Video_PrintValW
(2)   87/FFFFFFFFFFFF2C6C : 612E                		bsr	.loop_print				; Draw counter
(2)   88/FFFFFFFFFFFF2C6E :                     	; ----------------------------------------------
(2)   89/FFFFFFFFFFFF2C6E : 6100 DA78           		bsr	Video_DisplayOn				; Enable VDP Display
(2)   90/FFFFFFFFFFFF2C72 : 6100 E260           		bsr	Video_FadeIn_Full			; Full fade-in w/Delay
(2)   91/FFFFFFFFFFFF2C76 :                     
(2)   92/FFFFFFFFFFFF2C76 :                     ; 		lea	($FFFFFDB4),a0
(2)   93/FFFFFFFFFFFF2C76 :                     ; 		move.w	#$100-1,d0
(2)   94/FFFFFFFFFFFF2C76 :                     ; .test:
(2)   95/FFFFFFFFFFFF2C76 :                     ; 		move.w	#0,(a0)+
(2)   96/FFFFFFFFFFFF2C76 :                     ; 		dbf	d0,.test
(2)   97/FFFFFFFFFFFF2C76 :                     
(2)   98/FFFFFFFFFFFF2C76 :                     ; ====================================================================
(2)   99/FFFFFFFFFFFF2C76 :                     ; ------------------------------------------------------
(2)  100/FFFFFFFFFFFF2C76 :                     ; Loop
(2)  101/FFFFFFFFFFFF2C76 :                     ; ------------------------------------------------------
(2)  102/FFFFFFFFFFFF2C76 :                     
(2)  103/FFFFFFFFFFFF2C76 :                     .loop:
(2)  104/FFFFFFFFFFFF2C76 : 6100 F208           		bsr	System_Render
(2)  105/FFFFFFFFFFFF2C7A : 6120                		bsr	.loop_print
(2)  106/FFFFFFFFFFFF2C7C :                     
(2)  107/FFFFFFFFFFFF2C7C :                     	; CD only, check ABC+Start "home" combo
(2)  109/FFFFFFFFFFFF2C7C : 6100 FA18           		bsr	System_MdMcd_CheckHome
(2)  110/FFFFFFFFFFFF2C80 : 6536                		bcs.s	.exit_shell
(2)  112/FFFFFFFFFFFF2C82 : 4DF8 EA78           		lea	(Controller_1).w,a6
(2)  113/FFFFFFFFFFFF2C86 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  114/FFFFFFFFFFFF2C8A : 0807 0007           		btst	#bitJoyStart,d7
(2)  115/FFFFFFFFFFFF2C8E : 67E6                		beq.s	.loop
(2)  116/FFFFFFFFFFFF2C90 : 6100 E264           		bsr	Video_FadeOut_Full
(2)  117/FFFFFFFFFFFF2C94 : 31FC 0007 FB18      		move.w	#7,(RAM_ScreenMode).w			; Go to Screen $07: GEMA tester
(2)  118/FFFFFFFFFFFF2C9A : 4E75                		rts
(2)  119/FFFFFFFFFFFF2C9C :                     
(2)  120/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  121/FFFFFFFFFFFF2C9C :                     ; Show framecounter and input
(2)  122/FFFFFFFFFFFF2C9C :                     ; ------------------------------------------------------
(2)  123/FFFFFFFFFFFF2C9C :                     
(2)  124/FFFFFFFFFFFF2C9C :                     .loop_print:
(2)  125/FFFFFFFFFFFF2C9C : 41F8 E85C           		lea	(RAM_Framecount),a0			; Memory location to print
(2)  126/FFFFFFFFFFFF2CA0 : 227C 0000 0003      		move.l	#3,a1					; Display type 3
(2)  127/FFFFFFFFFFFF2CA6 : 701F                		moveq	#31,d0
(2)  128/FFFFFFFFFFFF2CA8 : 7201                		moveq	#1,d1
(2)  129/FFFFFFFFFFFF2CAA : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2		; VRAM ascii location w/attr
(2)  130/FFFFFFFFFFFF2CAE : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3	; VRAM output location and width size
(2)  131/FFFFFFFFFFFF2CB4 : 6000 E530           		bra	Video_PrintValW
(2)  132/FFFFFFFFFFFF2CB8 :                     
(2)  133/FFFFFFFFFFFF2CB8 :                     ; ------------------------------------------------------
(2)  134/FFFFFFFFFFFF2CB8 :                     ; SCD ONLY
(2)  135/FFFFFFFFFFFF2CB8 :                     ; ------------------------------------------------------
(2)  136/FFFFFFFFFFFF2CB8 :                     
(2)  138/FFFFFFFFFFFF2CB8 :                     .exit_shell:
(2)  139/FFFFFFFFFFFF2CB8 : 6100 E23C           		bsr	Video_FadeOut_Full
(2)  140/FFFFFFFFFFFF2CBC : 6000 FA08           		bra	System_MdMcd_ExitShell
(2)  142/FFFFFFFFFFFF2CC0 :                     
(2)  143/FFFFFFFFFFFF2CC0 :                     ; ====================================================================
(2)  144/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  145/FFFFFFFFFFFF2CC0 :                     ; Objects
(2)  146/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  147/FFFFFFFFFFFF2CC0 :                     
(2)  148/FFFFFFFFFFFF2CC0 :                     ; ====================================================================
(2)  149/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  150/FFFFFFFFFFFF2CC0 :                     ; Custom VBlank
(2)  151/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  152/FFFFFFFFFFFF2CC0 :                     
(2)  153/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  154/FFFFFFFFFFFF2CC0 :                     ; Custom HBlank
(2)  155/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  156/FFFFFFFFFFFF2CC0 :                     
(2)  157/FFFFFFFFFFFF2CC0 :                     ; ====================================================================
(2)  158/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  159/FFFFFFFFFFFF2CC0 :                     ; Includes for this screen
(2)  160/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  161/FFFFFFFFFFFF2CC0 :                     
(2)  162/FFFFFFFFFFFF2CC0 :                     ; ====================================================================
(2)  163/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  164/FFFFFFFFFFFF2CC0 :                     ; Small data section
(2)  165/FFFFFFFFFFFF2CC0 :                     ; ------------------------------------------------------
(2)  166/FFFFFFFFFFFF2CC0 :                     
(2)  167/FFFFFFFFFFFF2CC0 :                     str_MenuText:
(2)  168/FFFFFFFFFFFF2CC0 : 4E69 6B6F 6E61      		dc.b "Nikona screen template",$0A
         FFFFFFFFFFFF2CC6 : 2073 6372 6565 
         FFFFFFFFFFFF2CCC : 6E20 7465 6D70 
         FFFFFFFFFFFF2CD2 : 6C61 7465 0A       
(2)  169/FFFFFFFFFFFF2CD7 : 00                  		dc.b 0
(2)  170/FFFFFFFFFFFF2CD8 :                     		align 2
(2)  171/FFFFFFFFFFFF2CDA :                     
(2)  172/FFFFFFFFFFFF2CDA :                     ; ====================================================================
(2)  173/FFFFFFFFFFFF2CDA :                     
(1)   14/FFFFFFFFFFFF2CDA :                     mcscrn_e:
(1)   14/   368DA :                                     dephase
(1)   14/   368DA :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode) ; Add the used bytes
(1)   14/   368DA :                                     align $800
(1)   14/   37000 : =$37000              MD_SCREEN00_E label *
(1)   14/   37000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN00",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   15/   37000 :                     ; 	screen_code Md_Screen01,Md_Screen01_e,"game/code/screen_1.asm"
(1)   16/   37000 :                     ; 	screen_code Md_Screen02,Md_Screen02_e,"game/code/screen_2.asm"
(1)   17/   37000 :                     ; 	screen_code Md_Screen03,Md_Screen03_e,"game/code/screen_3.asm"
(1)   18/   37000 :                     ; 	screen_code Md_Screen04,Md_Screen04_e,"game/code/screen_4.asm"
(1)   19/   37000 : (MACRO)              	screen_code Md_Screen07,Md_Screen07_e,"game/code/sound_test.asm"
(1)   19/   37000 :                                     align $800              ; SCD/CD32X sector align
(1)   19/   37000 : =$37000              MD_SCREEN07 label *                        ; Register start label
(1)   19/   37000 :                     mctopscrn:
(1)   19/FFFFFFFFFFFF2C00 :                                     phase RAM_UserCode      ; Phase code to RAM area
(1)   19/FFFFFFFFFFFF2C00 :                     mcscrn_s:
(1)   19/FFFFFFFFFFFF2C00 :                             include "game/code/sound_test.asm";"game/screenX/code.asm"
(2)    1/FFFFFFFFFFFF2C00 :                     ; ===========================================================================
(2)    2/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    3/FFFFFFFFFFFF2C00 :                     ; GEMA SOUND TESTER
(2)    4/FFFFFFFFFFFF2C00 :                     ; ----------------------------------------------------------------
(2)    5/FFFFFFFFFFFF2C00 :                     
(2)    6/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)    7/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)    8/FFFFFFFFFFFF2C00 :                     ; Settings
(2)    9/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   10/FFFFFFFFFFFF2C00 :                     
(2)   11/FFFFFFFFFFFF2C00 : =$0                  VIEW_GEMAINFO		equ False		; ** Using this causes loss of DAC quality **
(2)   12/FFFFFFFFFFFF2C00 : =$1                  VIEW_FAIRY		equ True		; Show status Dodo/Mifi/Fifi
(2)   13/FFFFFFFFFFFF2C00 :                     
(2)   14/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   15/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   16/FFFFFFFFFFFF2C00 :                     ; Variables
(2)   17/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   18/FFFFFFFFFFFF2C00 :                     
(2)   19/FFFFFFFFFFFF2C00 : =$7                  MAX_SNDPICK		equ 7
(2)   20/FFFFFFFFFFFF2C00 : =$10                 SET_SNDVIEWY		equ 16
(2)   21/FFFFFFFFFFFF2C00 :                     
(2)   22/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   23/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   24/FFFFFFFFFFFF2C00 :                     ; Structs
(2)   25/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   26/FFFFFFFFFFFF2C00 :                     
(2)   27/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory 2
(2)   27/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   27/   37000 :                                     dephase
(2)   27/       2 :                                     phase 2
(2)   27/       2 : =$2                  GLBL_LASTORG    := *
(2)   28/       2 :                     setVram_Dodo		ds.b $30
(2)   29/      32 :                     setVram_Mimi		ds.b $30
(2)   30/      62 :                     setVram_Fifi		ds.b $30
(2)   31/      92 :  (MACRO-2)           			endmemory
(2)   31/   37090 :                     .here:          dephase
(2)   31/   37090 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   31/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   32/FFFFFFFFFFFF2C00 :                     
(2)   33/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   34/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   35/FFFFFFFFFFFF2C00 :                     ; This mode's RAM
(2)   36/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   37/FFFFFFFFFFFF2C00 :                     
(2)   38/FFFFFFFFFFFF2C00 :  (MACRO-2)           			memory RAM_ScrnBuff
(2)   38/FFFFFFFFFFFF2C00 : =$FFFFFFFFFFFF2C00   GLBL_LASTPC     := *
(2)   38/   37000 :                                     dephase
(2)   38/FFFFFFFFFFFFB800 :                                     phase RAM_SCRNBUFF
(2)   38/FFFFFFFFFFFFB800 : =$FFFFFFFFFFFFB800   GLBL_LASTORG    := *
(2)   39/FFFFFFFFFFFFB800 :                     RAM_GemaCache_PSG	ds.l 3
(2)   40/FFFFFFFFFFFFB80C :                     RAM_GemaCache_PSGN	ds.l 1
(2)   41/FFFFFFFFFFFFB810 :                     RAM_GemaCache_FM	ds.l 4
(2)   42/FFFFFFFFFFFFB820 :                     RAM_GemaCache_FM3	ds.l 1
(2)   43/FFFFFFFFFFFFB824 :                     RAM_GemaCache_FM6	ds.l 1
(2)   44/FFFFFFFFFFFFB828 :                     RAM_GemaCache_PCM	ds.l 8
(2)   45/FFFFFFFFFFFFB848 :                     RAM_GemaCache_PWM	ds.l 8
(2)   46/FFFFFFFFFFFFB868 :                     
(2)   47/FFFFFFFFFFFFB868 :                     RAM_CurrPick		ds.w 1
(2)   48/FFFFFFFFFFFFB86A :                     RAM_LastPick		ds.w 1
(2)   49/FFFFFFFFFFFFB86C :                     RAM_GemaIndx		ds.w 1		; DONT MOVE
(2)   50/FFFFFFFFFFFFB86E :                     RAM_GemaSeq		ds.w 1		; ''
(2)   51/FFFFFFFFFFFFB870 :                     RAM_GemaBlk		ds.w 1		; ''
(2)   52/FFFFFFFFFFFFB872 :                     RAM_GemaStatus		ds.w 4
(2)   53/FFFFFFFFFFFFB87A :                     RAM_FairyVars		ds.w 1
(2)   54/FFFFFFFFFFFFB87C :                     RAM_CurrBeats		ds.w 1
(2)   55/FFFFFFFFFFFFB87E :                     RAM_Copy_fmSpecial	ds.w 1
(2)   56/FFFFFFFFFFFFB880 :                     RAM_Copy_HasDac		ds.w 1
(2)   57/FFFFFFFFFFFFB882 :                     
(2)   58/FFFFFFFFFFFFB882 :                     sizeof_thisbuff		ds.l 0
(2)   59/FFFFFFFFFFFFB888 :  (MACRO-2)           			endmemory
(2)   59/   37088 :                     .here:          dephase
(2)   59/   37088 :                                     ds.b -(.here-GLBL_LASTORG)
(2)   59/FFFFFFFFFFFF2C00 :                                     phase GLBL_LASTPC
(2)   60/FFFFFFFFFFFF2C00 :                     
(2)   61/FFFFFFFFFFFF2C00 :  (MACRO-2)           	erreport "THIS SCREEN",sizeof_thisbuff-RAM_ScrnBuff,MAX_ScrnBuff
(2)   62/FFFFFFFFFFFF2C00 :                     
(2)   63/FFFFFFFFFFFF2C00 :                     ; ====================================================================
(2)   64/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   65/FFFFFFFFFFFF2C00 :                     ; Init
(2)   66/FFFFFFFFFFFF2C00 :                     ; ------------------------------------------------------
(2)   67/FFFFFFFFFFFF2C00 :                     
(2)   68/FFFFFFFFFFFF2C00 : 6100 DAF2           		bsr	Video_DisplayOff
(2)   69/FFFFFFFFFFFF2C04 : 6100 F6B2           		bsr	System_Default
(2)   70/FFFFFFFFFFFF2C08 :                     	; ----------------------------------------------
(2)   71/FFFFFFFFFFFF2C08 :                     	; Load assets
(2)   72/FFFFFFFFFFFF2C08 : 203C 0003 8000      		move.l	#DATA_BANK0,d0
(2)   73/FFFFFFFFFFFF2C0E : 6100 FBFE           		bsr	System_SetDataBank
(2)   74/FFFFFFFFFFFF2C12 :                     	; ----------------------------------------------
(2)   75/FFFFFFFFFFFF2C12 : 203C 0022 7CE4      		move.l	#ASCII_FONT,d0			; Load and setup PRINT system
(2)   76/FFFFFFFFFFFF2C18 : 323C 65A0           		move.w	#DEF_PrintVram|$6000,d1
(2)   77/FFFFFFFFFFFF2C1C : 6100 E3CC           		bsr	Video_PrintInit
(2)   78/FFFFFFFFFFFF2C20 : 203C 0022 88E4      		move.l	#ASCII_FONT_W,d0
(2)   79/FFFFFFFFFFFF2C26 : 323C 64E0           		move.w	#DEF_PrintVramW|$6000,d1
(2)   80/FFFFFFFFFFFF2C2A : 6100 E3B8           		bsr	Video_PrintInitW
(2)   81/FFFFFFFFFFFF2C2E : 41F8 E690           		lea	(RAM_PaletteFade+$40).w,a0
(2)   82/FFFFFFFFFFFF2C32 : 30BC 0000           		move.w	#$0000,(a0)
(2)   83/FFFFFFFFFFFF2C36 : 317C 00E0 0002      		move.w	#$00E0,2(a0)
(2)   84/FFFFFFFFFFFF2C3C : 317C 00A0 0004      		move.w	#$00A0,4(a0)
(2)   85/FFFFFFFFFFFF2C42 : 317C 0080 0004      		move.w	#$0080,4(a0)
(2)   86/FFFFFFFFFFFF2C48 : D0FC 0020           		adda	#$20,a0
(2)   87/FFFFFFFFFFFF2C4C : 30BC 0000           		move.w	#$0000,(a0)
(2)   88/FFFFFFFFFFFF2C50 : 317C 0EEE 0002      		move.w	#$0EEE,2(a0)
(2)   89/FFFFFFFFFFFF2C56 : 317C 0AAA 0004      		move.w	#$0AAA,4(a0)
(2)   90/FFFFFFFFFFFF2C5C : 317C 0888 0004      		move.w	#$0888,4(a0)
(2)   91/FFFFFFFFFFFF2C62 : 41F9 0022 B266      		lea	(objPal_Dodo+2),a0
(2)   92/FFFFFFFFFFFF2C68 : 7001                		moveq	#1,d0
(2)   93/FFFFFFFFFFFF2C6A : 323C 000F           		move.w	#15,d1
(2)   94/FFFFFFFFFFFF2C6E : 6100 E2FE           		bsr	Video_FadePal
(2)   95/FFFFFFFFFFFF2C72 : 41FA 03EA           		lea	ArtList_Stuff(pc),a0
(2)   96/FFFFFFFFFFFF2C76 : 6100 DD64           		bsr	Video_LoadArt_List
(2)   97/FFFFFFFFFFFF2C7A :                     	; ----------------------------------------------
(2)   98/FFFFFFFFFFFF2C7A : 41FA 03FC           		lea	str_TesterTitle(pc),a0
(2)   99/FFFFFFFFFFFF2C7E : 700C                		moveq	#12,d0
(2)  100/FFFFFFFFFFFF2C80 : 7202                		moveq	#2,d1
(2)  101/FFFFFFFFFFFF2C82 : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  102/FFFFFFFFFFFF2C86 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  103/FFFFFFFFFFFF2C8C : 6100 E40E           		bsr	Video_PrintW
(2)  104/FFFFFFFFFFFF2C90 : 41FA 03F8           		lea	str_TesterInfo(pc),a0
(2)  106/FFFFFFFFFFFF2C94 : 7006                		moveq	#6,d0
(2)  110/FFFFFFFFFFFF2C96 : 7207                		moveq	#7,d1
(2)  111/FFFFFFFFFFFF2C98 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  112/FFFFFFFFFFFF2C9C : 6100 E374           		bsr	Video_Print
(2)  113/FFFFFFFFFFFF2CA0 : 41FA 0404           		lea	str_Instruc(pc),a0
(2)  114/FFFFFFFFFFFF2CA4 : 7002                		moveq	#2,d0
(2)  115/FFFFFFFFFFFF2CA6 : 7215                		moveq	#21,d1
(2)  116/FFFFFFFFFFFF2CA8 : 343C 45A0           		move.w	#DEF_PrintVram|$4000,d2
(2)  117/FFFFFFFFFFFF2CAC : 6100 E364           		bsr	Video_Print
(2)  118/FFFFFFFFFFFF2CB0 : 6100 017A           		bsr	.gema_viewinit
(2)  119/FFFFFFFFFFFF2CB4 :                     ; 		bsr	.show_cursor
(2)  120/FFFFFFFFFFFF2CB4 :                     	; ----------------------------------------------
(2)  121/FFFFFFFFFFFF2CB4 : 6100 D3BC           		bsr	gemaReset				; Load default GEMA sound data
(2)  122/FFFFFFFFFFFF2CB8 : 6100 0132           		bsr	.show_me
(2)  123/FFFFFFFFFFFF2CBC : 6100 0186           		bsr	.gema_view
(2)  124/FFFFFFFFFFFF2CC0 :                     ; 		bsr	.steal_vars
(2)  125/FFFFFFFFFFFF2CC0 :                     	; ----------------------------------------------
(2)  126/FFFFFFFFFFFF2CC0 : 6100 DA26           		bsr	Video_DisplayOn
(2)  127/FFFFFFFFFFFF2CC4 : 6100 FBA0           		bsr	Object_Run
(2)  128/FFFFFFFFFFFF2CC8 : 6100 D7B2           		bsr	Video_BuildSprites
(2)  129/FFFFFFFFFFFF2CCC : 6100 F1B2           		bsr	System_Render
(2)  130/FFFFFFFFFFFF2CD0 : 6100 E202           		bsr	Video_FadeIn_Full
(2)  131/FFFFFFFFFFFF2CD4 :                     
(2)  132/FFFFFFFFFFFF2CD4 :                     ; ====================================================================
(2)  133/FFFFFFFFFFFF2CD4 :                     ; ------------------------------------------------------
(2)  134/FFFFFFFFFFFF2CD4 :                     ; Loop
(2)  135/FFFFFFFFFFFF2CD4 :                     ; ------------------------------------------------------
(2)  136/FFFFFFFFFFFF2CD4 :                     
(2)  137/FFFFFFFFFFFF2CD4 :                     .loop:
(2)  138/FFFFFFFFFFFF2CD4 : 6100 F1AA           		bsr	System_Render
(2)  139/FFFFFFFFFFFF2CD8 :                     ; 		bsr	.show_cursor
(2)  140/FFFFFFFFFFFF2CD8 : 6100 016A           		bsr	.gema_view
(2)  141/FFFFFFFFFFFF2CDC : 6100 FB88           		bsr	Object_Run
(2)  142/FFFFFFFFFFFF2CE0 : 6100 D79A           		bsr	Video_BuildSprites
(2)  143/FFFFFFFFFFFF2CE4 :                     
(2)  144/FFFFFFFFFFFF2CE4 :                     	; NEW controls
(2)  145/FFFFFFFFFFFF2CE4 : 4DF8 EA78           		lea	(Controller_1).w,a6
(2)  146/FFFFFFFFFFFF2CE8 :                     	; LEFT/RIGHT
(2)  147/FFFFFFFFFFFF2CE8 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  148/FFFFFFFFFFFF2CEC : 3C07                		move.w	d7,d6
(2)  149/FFFFFFFFFFFF2CEE : 0246 0080           		andi.w	#JoyStart,d6
(2)  150/FFFFFFFFFFFF2CF2 : 6600 00C4           		bne	.exit_this
(2)  151/FFFFFFFFFFFF2CF6 : 0247 000C           		andi.w	#JoyLeft+JoyRight,d7
(2)  152/FFFFFFFFFFFF2CFA : 6718                		beq.s	.lr_seq
(2)  153/FFFFFFFFFFFF2CFC : 7001                		moveq	#1,d0
(2)  154/FFFFFFFFFFFF2CFE : 0247 0004           		andi.w	#JoyLeft,d7
(2)  155/FFFFFFFFFFFF2D02 : 6708                		beq.s	.lr_right
(2)  156/FFFFFFFFFFFF2D04 : 4A78 B86E           		tst.w	(RAM_GemaSeq).w
(2)  157/FFFFFFFFFFFF2D08 : 670A                		beq.s	.lr_seq
(2)  158/FFFFFFFFFFFF2D0A : 4440                		neg.w	d0
(2)  159/FFFFFFFFFFFF2D0C :                     .lr_right:
(2)  160/FFFFFFFFFFFF2D0C : D178 B86E           		add.w	d0,(RAM_GemaSeq).w
(2)  161/FFFFFFFFFFFF2D10 : 6100 00DA           		bsr	.show_me
(2)  162/FFFFFFFFFFFF2D14 :                     .lr_seq:
(2)  163/FFFFFFFFFFFF2D14 :                     
(2)  164/FFFFFFFFFFFF2D14 :                     	; UP/DOWN
(2)  165/FFFFFFFFFFFF2D14 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  166/FFFFFFFFFFFF2D18 : 0247 0003           		andi.w	#JoyUp+JoyDown,d7
(2)  167/FFFFFFFFFFFF2D1C : 6718                		beq.s	.ud_seq
(2)  168/FFFFFFFFFFFF2D1E : 7001                		moveq	#1,d0
(2)  169/FFFFFFFFFFFF2D20 :                     ; 		andi.w	#JoyUp,d7
(2)  170/FFFFFFFFFFFF2D20 : 0247 0001           		andi.w	#JoyUp,d7
(2)  171/FFFFFFFFFFFF2D24 : 6708                		beq.s	.ud_right
(2)  172/FFFFFFFFFFFF2D26 : 4A78 B870           		tst.w	(RAM_GemaBlk).w
(2)  173/FFFFFFFFFFFF2D2A : 670A                		beq.s	.ud_seq
(2)  174/FFFFFFFFFFFF2D2C : 4440                		neg.w	d0
(2)  175/FFFFFFFFFFFF2D2E :                     .ud_right:
(2)  176/FFFFFFFFFFFF2D2E : D178 B870           		add.w	d0,(RAM_GemaBlk).w
(2)  177/FFFFFFFFFFFF2D32 : 6100 00B8           		bsr	.show_me
(2)  178/FFFFFFFFFFFF2D36 :                     .ud_seq:
(2)  179/FFFFFFFFFFFF2D36 :                     
(2)  180/FFFFFFFFFFFF2D36 :                     	; X/Y
(2)  181/FFFFFFFFFFFF2D36 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  182/FFFFFFFFFFFF2D3A : 0247 0600           		andi.w	#JoyX+JoyY,d7
(2)  183/FFFFFFFFFFFF2D3E : 6718                		beq.s	.xy_seq
(2)  184/FFFFFFFFFFFF2D40 : 7001                		moveq	#1,d0
(2)  185/FFFFFFFFFFFF2D42 : 0247 0400           		andi.w	#JoyX,d7
(2)  186/FFFFFFFFFFFF2D46 : 6708                		beq.s	.xy_right
(2)  187/FFFFFFFFFFFF2D48 : 4A78 B86C           		tst.w	(RAM_GemaIndx).w
(2)  188/FFFFFFFFFFFF2D4C : 670A                		beq.s	.xy_seq
(2)  189/FFFFFFFFFFFF2D4E : 4440                		neg.w	d0
(2)  190/FFFFFFFFFFFF2D50 :                     .xy_right:
(2)  191/FFFFFFFFFFFF2D50 : D178 B86C           		add.w	d0,(RAM_GemaIndx).w
(2)  192/FFFFFFFFFFFF2D54 : 6100 0096           		bsr	.show_me
(2)  193/FFFFFFFFFFFF2D58 :                     .xy_seq:
(2)  194/FFFFFFFFFFFF2D58 :                     
(2)  195/FFFFFFFFFFFF2D58 :                     	; C BUTTON
(2)  196/FFFFFFFFFFFF2D58 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  197/FFFFFFFFFFFF2D5C : 0247 0120           		andi.w	#JoyC+JoyZ,d7
(2)  198/FFFFFFFFFFFF2D60 : 672E                		beq.s	.c_press
(2)  199/FFFFFFFFFFFF2D62 : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  200/FFFFFFFFFFFF2D66 :                     
(2)  201/FFFFFFFFFFFF2D66 : 341D                		move.w	(a5)+,d2
(2)  202/FFFFFFFFFFFF2D68 : 0247 0100           		andi.w	#JoyZ,d7
(2)  203/FFFFFFFFFFFF2D6C : 6702                		beq.s	.not_auto
(2)  204/FFFFFFFFFFFF2D6E : 74FF                		moveq	#-1,d2
(2)  205/FFFFFFFFFFFF2D70 :                     .not_auto:
(2)  206/FFFFFFFFFFFF2D70 : 301D                		move.w	(a5)+,d0
(2)  207/FFFFFFFFFFFF2D72 : 321D                		move.w	(a5)+,d1
(2)  208/FFFFFFFFFFFF2D74 : 6100 D45A           		bsr	gemaPlaySeq
(2)  209/FFFFFFFFFFFF2D78 :                     
(2)  210/FFFFFFFFFFFF2D78 : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  211/FFFFFFFFFFFF2D7C : 3200                		move.w	d0,d1
(2)  212/FFFFFFFFFFFF2D7E : D241                		add.w	d1,d1
(2)  213/FFFFFFFFFFFF2D80 : 41FA 02AC           		lea	exgema_beats(pc),a0
(2)  214/FFFFFFFFFFFF2D84 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  215/FFFFFFFFFFFF2D88 : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  216/FFFFFFFFFFFF2D8C : 6100 D4F2           		bsr	gemaSetBeats
(2)  217/FFFFFFFFFFFF2D90 :                     .c_press:
(2)  218/FFFFFFFFFFFF2D90 :                     	; B BUTTON
(2)  219/FFFFFFFFFFFF2D90 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  220/FFFFFFFFFFFF2D94 : 0247 0010           		andi.w	#JoyB,d7
(2)  221/FFFFFFFFFFFF2D98 : 670C                		beq.s	.b_press
(2)  222/FFFFFFFFFFFF2D9A : 4BF8 B86C           		lea	(RAM_GemaIndx).w,a5
(2)  223/FFFFFFFFFFFF2D9E : 321D                		move.w	(a5)+,d1
(2)  224/FFFFFFFFFFFF2DA0 : 301D                		move.w	(a5)+,d0
(2)  225/FFFFFFFFFFFF2DA2 : 6100 D46C           		bsr	gemaStopSeq
(2)  226/FFFFFFFFFFFF2DA6 :                     .b_press:
(2)  227/FFFFFFFFFFFF2DA6 : 3E2E 0004           		move.w	on_press(a6),d7
(2)  228/FFFFFFFFFFFF2DAA : 0247 0040           		andi.w	#JoyA,d7
(2)  229/FFFFFFFFFFFF2DAE : 6704                		beq.s	.a_press
(2)  230/FFFFFFFFFFFF2DB0 : 6100 D47A           		bsr	gemaStopAll
(2)  231/FFFFFFFFFFFF2DB4 :                     .a_press:
(2)  232/FFFFFFFFFFFF2DB4 :                     
(2)  233/FFFFFFFFFFFF2DB4 :                     
(2)  234/FFFFFFFFFFFF2DB4 :                     ; 		move.w	on_hold(a6),d7
(2)  235/FFFFFFFFFFFF2DB4 :                     ; 		andi.w	#JoyA+JoyB+JoyC,d7
(2)  236/FFFFFFFFFFFF2DB4 :                     ; 		bne.s	.n_up
(2)  237/FFFFFFFFFFFF2DB4 :                     ; 		move.w	on_press(a6),d7
(2)  238/FFFFFFFFFFFF2DB4 :                     ; 		btst	#bitJoyDown,d7
(2)  239/FFFFFFFFFFFF2DB4 :                     ; 		beq.s	.n_down
(2)  240/FFFFFFFFFFFF2DB4 :                     ; 		addq.w	#1,(a5)
(2)  241/FFFFFFFFFFFF2DB4 :                     ; 		cmp.w	#MAX_SNDPICK,(a5)		; MAX OPTIONS
(2)  242/FFFFFFFFFFFF2DB4 :                     ; 		ble.s	.n_downd
(2)  243/FFFFFFFFFFFF2DB4 :                     ; 		clr.w	(a5)
(2)  244/FFFFFFFFFFFF2DB4 :                     ; .n_downd:
(2)  245/FFFFFFFFFFFF2DB4 :                     ; 		bsr.s	.show_me
(2)  246/FFFFFFFFFFFF2DB4 :                     ; .n_down:
(2)  247/FFFFFFFFFFFF2DB4 :                     ; 		move.w	on_press(a6),d7
(2)  248/FFFFFFFFFFFF2DB4 :                     ; 		btst	#bitJoyUp,d7
(2)  249/FFFFFFFFFFFF2DB4 :                     ; 		beq.s	.n_up
(2)  250/FFFFFFFFFFFF2DB4 :                     ; 		subq.w	#1,(a5)
(2)  251/FFFFFFFFFFFF2DB4 :                     ; 		bpl.s	.n_ups
(2)  252/FFFFFFFFFFFF2DB4 :                     ; 		move.w	#MAX_SNDPICK,(a5)
(2)  253/FFFFFFFFFFFF2DB4 :                     ; .n_ups:
(2)  254/FFFFFFFFFFFF2DB4 :                     ; 		bsr.s	.show_me
(2)  255/FFFFFFFFFFFF2DB4 :                     ; .n_up:
(2)  256/FFFFFFFFFFFF2DB4 :                     ; 		move.w	(RAM_CurrPick).w,d7
(2)  257/FFFFFFFFFFFF2DB4 :                     ; 		lsl.w	#2,d7
(2)  258/FFFFFFFFFFFF2DB4 :                     ; 		jsr	.jump_list(pc,d7.w)
(2)  259/FFFFFFFFFFFF2DB4 :                     ; 		tst.w	(RAM_ScreenMode).w	; Check -1
(2)  260/FFFFFFFFFFFF2DB4 :                     ; 		bpl.s	.n_cbtn
(2)  261/FFFFFFFFFFFF2DB4 :                     
(2)  262/FFFFFFFFFFFF2DB4 :                     ; .n_cbtn:
(2)  263/FFFFFFFFFFFF2DB4 : 6000 FF1E           		bra	.loop
(2)  264/FFFFFFFFFFFF2DB8 :                     
(2)  265/FFFFFFFFFFFF2DB8 :                     .exit_this:
(2)  266/FFFFFFFFFFFF2DB8 : 6100 E13C           		bsr	Video_FadeOut_Full
(2)  267/FFFFFFFFFFFF2DBC :                     	; Stop ALL sequences
(2)  268/FFFFFFFFFFFF2DBC : 6100 D46E           		bsr	gemaStopAll
(2)  269/FFFFFFFFFFFF2DC0 :                     	rept 4
(2)  270/FFFFFFFFFFFF2DC0 :                     		bsr	System_Render		; Wait 4 frames...
(2)  271/FFFFFFFFFFFF2DC0 :                     	endm
(2)  270/FFFFFFFFFFFF2DC0 : 6100 F0BE           		bsr	System_Render		; Wait 4 frames...
(2)  270/FFFFFFFFFFFF2DC4 : 6100 F0BA           		bsr	System_Render		; Wait 4 frames...
(2)  270/FFFFFFFFFFFF2DC8 : 6100 F0B6           		bsr	System_Render		; Wait 4 frames...
(2)  270/FFFFFFFFFFFF2DCC : 6100 F0B2           		bsr	System_Render		; Wait 4 frames...
(2)  272/FFFFFFFFFFFF2DD0 : 31FC 0000 FB18      		move.w	#0,(RAM_ScreenMode).w	; Set Screen Mode $07
(2)  273/FFFFFFFFFFFF2DD6 : 4E75                		rts				; <-- RTS
(2)  274/FFFFFFFFFFFF2DD8 :                     
(2)  275/FFFFFFFFFFFF2DD8 :                     ; ------------------------------------------------------
(2)  276/FFFFFFFFFFFF2DD8 :                     
(2)  277/FFFFFFFFFFFF2DD8 :                     .exit_shell:
(2)  278/FFFFFFFFFFFF2DD8 : 6100 E11C           		bsr	Video_FadeOut_Full
(2)  279/FFFFFFFFFFFF2DDC : 6100 D44E           		bsr	gemaStopAll
(2)  280/FFFFFFFFFFFF2DE0 : 6100 F09E           		bsr	System_Render
(2)  281/FFFFFFFFFFFF2DE4 : 6100 F09A           		bsr	System_Render
(2)  282/FFFFFFFFFFFF2DE8 : 6000 F8DC           		bra	System_MdMcd_ExitShell
(2)  283/FFFFFFFFFFFF2DEC :                     
(2)  284/FFFFFFFFFFFF2DEC :                     ; ------------------------------------------------------
(2)  285/FFFFFFFFFFFF2DEC :                     
(2)  286/FFFFFFFFFFFF2DEC :                     .show_me:
(2)  287/FFFFFFFFFFFF2DEC : 3038 B86E           		move.w	(RAM_GemaSeq).w,d0	; External beats
(2)  288/FFFFFFFFFFFF2DF0 : 3200                		move.w	d0,d1
(2)  289/FFFFFFFFFFFF2DF2 : D241                		add.w	d1,d1
(2)  290/FFFFFFFFFFFF2DF4 : 41FA 0238           		lea	exgema_beats(pc),a0
(2)  291/FFFFFFFFFFFF2DF8 : 3030 1000           		move.w	(a0,d1.w),d0
(2)  292/FFFFFFFFFFFF2DFC : 31C0 B87C           		move.w	d0,(RAM_CurrBeats).w
(2)  293/FFFFFFFFFFFF2E00 :                     
(2)  294/FFFFFFFFFFFF2E00 : 41FA 069C           		lea	str_ShowBeats(pc),a0
(2)  296/FFFFFFFFFFFF2E04 : 700D                		moveq	#13,d0
(2)  300/FFFFFFFFFFFF2E06 : 720C                		moveq	#12,d1
(2)  301/FFFFFFFFFFFF2E08 : 343C 65A0           		move.w	#DEF_PrintVram|DEF_PrintPal,d2
(2)  302/FFFFFFFFFFFF2E0C : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  303/FFFFFFFFFFFF2E12 : 6100 E1FE           		bsr	Video_Print
(2)  304/FFFFFFFFFFFF2E16 : 41FA 0672           		lea	str_ShowVars(pc),a0
(2)  306/FFFFFFFFFFFF2E1A : 7007                		moveq	#7,d0
(2)  310/FFFFFFFFFFFF2E1C : 7209                		moveq	#9,d1
(2)  311/FFFFFFFFFFFF2E1E : 343C 64E0           		move.w	#DEF_PrintVramW|DEF_PrintPal,d2
(2)  312/FFFFFFFFFFFF2E22 : 263C 0080 C000      		move.l	#splitw(DEF_HSIZE_64,DEF_VRAM_FG),d3
(2)  313/FFFFFFFFFFFF2E28 : 6000 E272           		bra	Video_PrintW
(2)  314/FFFFFFFFFFFF2E2C :                     
(2)  315/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  316/FFFFFFFFFFFF2E2C :                     ;
(2)  317/FFFFFFFFFFFF2E2C :                     ; .jump_list:
(2)  318/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.nothing
(2)  319/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_1
(2)  320/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_2
(2)  321/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_3
(2)  322/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_4
(2)  323/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_5
(2)  324/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_6
(2)  325/FFFFFFFFFFFF2E2C :                     ; 		bra.w	.option_7
(2)  326/FFFFFFFFFFFF2E2C :                     ;
(2)  327/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  328/FFFFFFFFFFFF2E2C :                     ; ; OPTION 0
(2)  329/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  330/FFFFFFFFFFFF2E2C :                     ;
(2)  331/FFFFFFFFFFFF2E2C :                     ; .nothing:
(2)  332/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  333/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  334/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press
(2)  335/FFFFFFFFFFFF2E2C :                     ; 		bsr.s	.show_me
(2)  336/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaTest
(2)  337/FFFFFFFFFFFF2E2C :                     ; .no_press:
(2)  338/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  339/FFFFFFFFFFFF2E2C :                     ;
(2)  340/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  341/FFFFFFFFFFFF2E2C :                     ; OPTION 1
(2)  342/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  343/FFFFFFFFFFFF2E2C :                     
(2)  344/FFFFFFFFFFFF2E2C :                     ; 		bra.s	.show_me
(2)  345/FFFFFFFFFFFF2E2C :                     ; .option1_args:
(2)  346/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_hold(a6),d7
(2)  347/FFFFFFFFFFFF2E2C :                     ; 		move.w	d7,d6
(2)  348/FFFFFFFFFFFF2E2C :                     ; 		andi.w	#JoyA+JoyB+JoyC,d6
(2)  349/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press
(2)  350/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyB,d7
(2)  351/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.d2_opt
(2)  352/FFFFFFFFFFFF2E2C :                     ; 		adda	#2,a5
(2)  353/FFFFFFFFFFFF2E2C :                     ; .d2_opt:
(2)  354/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyC,d7
(2)  355/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.d3_opt
(2)  356/FFFFFFFFFFFF2E2C :                     ; 		adda	#4,a5
(2)  357/FFFFFFFFFFFF2E2C :                     ; .d3_opt:
(2)  358/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  359/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyRight,d7
(2)  360/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_right
(2)  361/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  362/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  363/FFFFFFFFFFFF2E2C :                     ; .op1_right:
(2)  364/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyLeft,d7
(2)  365/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_left
(2)  366/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  367/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  368/FFFFFFFFFFFF2E2C :                     ; .op1_left:
(2)  369/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_hold(a6),d7
(2)  370/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyUp,d7
(2)  371/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_down
(2)  372/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  373/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  374/FFFFFFFFFFFF2E2C :                     ; .op1_down:
(2)  375/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyDown,d7
(2)  376/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op1_up
(2)  377/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  378/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me
(2)  379/FFFFFFFFFFFF2E2C :                     ; .op1_up:
(2)  380/FFFFFFFFFFFF2E2C :                     ;
(2)  381/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  382/FFFFFFFFFFFF2E2C :                     ;
(2)  383/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  384/FFFFFFFFFFFF2E2C :                     ; ; OPTION 2
(2)  385/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  386/FFFFFFFFFFFF2E2C :                     ;
(2)  387/FFFFFFFFFFFF2E2C :                     ; .option_2:
(2)  388/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaIndx).w,a5
(2)  389/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  390/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  391/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.option1_args
(2)  392/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  393/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  394/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaStopSeq
(2)  395/FFFFFFFFFFFF2E2C :                     ;
(2)  396/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  397/FFFFFFFFFFFF2E2C :                     ; ; OPTION 3
(2)  398/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  399/FFFFFFFFFFFF2E2C :                     ;
(2)  400/FFFFFFFFFFFF2E2C :                     ; .option_3:
(2)  401/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  402/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  403/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  404/FFFFFFFFFFFF2E2C :                     ; 		beq	.option1_args
(2)  405/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  406/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  407/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaFadeSeq
(2)  408/FFFFFFFFFFFF2E2C :                     ;
(2)  409/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  410/FFFFFFFFFFFF2E2C :                     ; ; OPTION 4
(2)  411/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  412/FFFFFFFFFFFF2E2C :                     ;
(2)  413/FFFFFFFFFFFF2E2C :                     ; .option_4:
(2)  414/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg3).w,a5
(2)  415/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  416/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  417/FFFFFFFFFFFF2E2C :                     ; 		beq	.option1_args
(2)  418/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d0
(2)  419/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5)+,d1
(2)  420/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaSetSeqVol
(2)  421/FFFFFFFFFFFF2E2C :                     ;
(2)  422/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  423/FFFFFFFFFFFF2E2C :                     ; ; OPTION 5
(2)  424/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  425/FFFFFFFFFFFF2E2C :                     ;
(2)  426/FFFFFFFFFFFF2E2C :                     ; .option_5:
(2)  427/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  428/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  429/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  430/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me
(2)  431/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaStopAll
(2)  432/FFFFFFFFFFFF2E2C :                     ; .no_press2:
(2)  433/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  434/FFFFFFFFFFFF2E2C :                     ;
(2)  435/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  436/FFFFFFFFFFFF2E2C :                     ; ; OPTION 6
(2)  437/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  438/FFFFFFFFFFFF2E2C :                     ;
(2)  439/FFFFFFFFFFFF2E2C :                     ; .option_6:
(2)  440/FFFFFFFFFFFF2E2C :                     ; 		lea	(RAM_GemaArg6).w,a5
(2)  441/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_hold(a6),d7
(2)  442/FFFFFFFFFFFF2E2C :                     ; 		andi.w	#JoyA,d7
(2)  443/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  444/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  445/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyRight,d7
(2)  446/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_right
(2)  447/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  448/FFFFFFFFFFFF2E2C :                     ; 		bra	.show_me_2
(2)  449/FFFFFFFFFFFF2E2C :                     ; .op2_right:
(2)  450/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyLeft,d7
(2)  451/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_left
(2)  452/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  453/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  454/FFFFFFFFFFFF2E2C :                     ; .op2_left:
(2)  455/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_hold(a6),d7
(2)  456/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyDown,d7
(2)  457/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_down
(2)  458/FFFFFFFFFFFF2E2C :                     ; 		addq.w	#1,(a5)
(2)  459/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  460/FFFFFFFFFFFF2E2C :                     ; .op2_down:
(2)  461/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyUp,d7
(2)  462/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.op2_up
(2)  463/FFFFFFFFFFFF2E2C :                     ; 		subq.w	#1,(a5)
(2)  464/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me_2
(2)  465/FFFFFFFFFFFF2E2C :                     ; .op2_up:
(2)  466/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  467/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  468/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  469/FFFFFFFFFFFF2E2C :                     ; .show_me_2:
(2)  470/FFFFFFFFFFFF2E2C :                     ; 		bsr	.show_me
(2)  471/FFFFFFFFFFFF2E2C :                     ; 		move.w	(a5),d0
(2)  472/FFFFFFFFFFFF2E2C :                     ; 		bra	gemaSetBeats
(2)  473/FFFFFFFFFFFF2E2C :                     ;
(2)  474/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  475/FFFFFFFFFFFF2E2C :                     ; ; OPTION 7
(2)  476/FFFFFFFFFFFF2E2C :                     ; ; ------------------------------------------------------
(2)  477/FFFFFFFFFFFF2E2C :                     ;
(2)  478/FFFFFFFFFFFF2E2C :                     ; .option_7:
(2)  479/FFFFFFFFFFFF2E2C :                     ; 		move.w	on_press(a6),d7
(2)  480/FFFFFFFFFFFF2E2C :                     ; 		btst	#bitJoyStart,d7
(2)  481/FFFFFFFFFFFF2E2C :                     ; 		beq.s	.no_press2
(2)  482/FFFFFFFFFFFF2E2C :                     ; 		move.w	#-1,(RAM_ScreenMode).w	; risky but works.
(2)  483/FFFFFFFFFFFF2E2C :                     ; 		rts
(2)  484/FFFFFFFFFFFF2E2C :                     
(2)  485/FFFFFFFFFFFF2E2C :                     ; ------------------------------------------------------
(2)  486/FFFFFFFFFFFF2E2C :                     
(2)  487/FFFFFFFFFFFF2E2C :                     .gema_viewinit:
(2)  489/FFFFFFFFFFFF2E2C : 203C FFFF 2F0E      		move.l	#obj_Fairy,d0		; <-- If you don't like the fairies comment out or
(2)  490/FFFFFFFFFFFF2E32 : 7200                		moveq	#0,d1			; delete all of this
(2)  491/FFFFFFFFFFFF2E34 : 6100 FA62           		bsr	Object_Make		;
(2)  492/FFFFFFFFFFFF2E38 : 5241                		addq.w	#1,d1			;
(2)  493/FFFFFFFFFFFF2E3A : 6100 FA5C           		bsr	Object_Make		;
(2)  494/FFFFFFFFFFFF2E3E : 5241                		addq.w	#1,d1			;
(2)  495/FFFFFFFFFFFF2E40 : 6100 FA56           		bsr	Object_Make		; <-- until here
(2)  497/FFFFFFFFFFFF2E44 :                     
(2)  506/FFFFFFFFFFFF2E44 :                     
(2)  507/FFFFFFFFFFFF2E44 :                     .gema_view:
(2)  509/FFFFFFFFFFFF2E44 : 33FC 0100 00A1      		move.w	#$0100,(z80_bus).l
         FFFFFFFFFFFF2E4A : 1100             
(2)  510/FFFFFFFFFFFF2E4C : 43F8 B872           		lea	(RAM_GemaStatus),a1
(2)  511/FFFFFFFFFFFF2E50 : 7000                		moveq	#0,d0
(2)  512/FFFFFFFFFFFF2E52 : 7200                		moveq	#0,d1
(2)  513/FFFFFFFFFFFF2E54 : 7400                		moveq	#0,d2
(2)  514/FFFFFFFFFFFF2E56 : 0839 0000 00A1      .wait:		btst	#0,(z80_bus).l
         FFFFFFFFFFFF2E5C : 1100             
(2)  515/FFFFFFFFFFFF2E5E : 66F6                		bne.s	.wait
(2)  516/FFFFFFFFFFFF2E60 : 1039 00A0 1915      		move.b	(z80_cpu+trkBuff_0),d0
(2)  517/FFFFFFFFFFFF2E66 : 1239 00A0 1954      		move.b	(z80_cpu+trkBuff_1),d1
(2)  518/FFFFFFFFFFFF2E6C : 1439 00A0 1993      		move.b	(z80_cpu+trkBuff_2),d2
(2)  519/FFFFFFFFFFFF2E72 : 6100 D228           		bsr	sndUnlockZ80
(2)  520/FFFFFFFFFFFF2E76 : 32C0                		move.w	d0,(a1)+
(2)  521/FFFFFFFFFFFF2E78 : 32C1                		move.w	d1,(a1)+
(2)  522/FFFFFFFFFFFF2E7A : 32C2                		move.w	d2,(a1)+
(2)  524/FFFFFFFFFFFF2E7C :                     
(2)  554/FFFFFFFFFFFF2E7C :                     
(2)  615/FFFFFFFFFFFF2E7C :                     
(2)  616/FFFFFFFFFFFF2E7C : 4E75                		rts
(2)  617/FFFFFFFFFFFF2E7E :                     
(2)  618/FFFFFFFFFFFF2E7E :                     ; ----------------------------------------------
(2)  619/FFFFFFFFFFFF2E7E :                     
(2)  620/FFFFFFFFFFFF2E7E :                     .copy_me:
(2)  621/FFFFFFFFFFFF2E7E : 7200                		moveq	#0,d1
(2)  622/FFFFFFFFFFFF2E80 :                     ; 		bsr	sndLockZ80
(2)  623/FFFFFFFFFFFF2E80 : 1228 0005           		move.b	ztbl_FreqIndx(a0),d1
(2)  624/FFFFFFFFFFFF2E84 : 1428 0001           		move.b	ztbl_Link+1(a0),d2
(2)  625/FFFFFFFFFFFF2E88 : 1010                		move.b	ztbl_Link(a0),d0
(2)  626/FFFFFFFFFFFF2E8A :                     ; 		bsr	sndUnlockZ80
(2)  627/FFFFFFFFFFFF2E8A : 8002                		or.b	d2,d0
(2)  628/FFFFFFFFFFFF2E8C : 6602                		bne.s	.link_ok
(2)  629/FFFFFFFFFFFF2E8E : 72FF                		moveq	#-1,d1
(2)  630/FFFFFFFFFFFF2E90 :                     .link_ok:
(2)  631/FFFFFFFFFFFF2E90 : 3281                		move.w	d1,(a1)
(2)  632/FFFFFFFFFFFF2E92 : D0FC 0012           		adda	#MAX_TBLSIZE,a0		; *** EXTERNAL LABEL
(2)  633/FFFFFFFFFFFF2E96 : D2FC 0004           		adda	#4,a1
(2)  634/FFFFFFFFFFFF2E9A : 51CF FFE2           		dbf	d7,.copy_me
(2)  635/FFFFFFFFFFFF2E9E : 4E75                		rts
(2)  636/FFFFFFFFFFFF2EA0 :                     
(2)  637/FFFFFFFFFFFF2EA0 :                     ; ----------------------------------------------
(2)  638/FFFFFFFFFFFF2EA0 :                     
(2)  639/FFFFFFFFFFFF2EA0 :                     .show_table_fm:
(2)  640/FFFFFFFFFFFF2EA0 : 41F9 FFFF 342E      		lea	(strL_FmOnly),a0
(2)  641/FFFFFFFFFFFF2EA6 : 7C00                		moveq	#0,d6
(2)  642/FFFFFFFFFFFF2EA8 : 7A00                		moveq	#0,d5
(2)  643/FFFFFFFFFFFF2EAA : 3C13                		move.w	(a3),d6
(2)  644/FFFFFFFFFFFF2EAC : 6A06                		bpl.s	.is_fmgood
(2)  645/FFFFFFFFFFFF2EAE : 6100 E162           		bsr	Video_Print
(2)  646/FFFFFFFFFFFF2EB2 : 602A                		bra.s	.from_fmbad
(2)  647/FFFFFFFFFFFF2EB4 :                     .is_fmgood:
(2)  648/FFFFFFFFFFFF2EB4 : 3A06                		move.w	d6,d5
(2)  649/FFFFFFFFFFFF2EB6 : D0FC 0004           		adda	#4,a0
(2)  650/FFFFFFFFFFFF2EBA : 0246 001F           		andi.w	#%00011111,d6
(2)  651/FFFFFFFFFFFF2EBE : E34E                		lsl.w	#1,d6
(2)  652/FFFFFFFFFFFF2EC0 : D0C6                		adda	d6,a0
(2)  653/FFFFFFFFFFFF2EC2 : 6100 E14E           		bsr	Video_Print
(2)  654/FFFFFFFFFFFF2EC6 : 3800                		move.w	d0,d4
(2)  655/FFFFFFFFFFFF2EC8 : 5440                		addq.w	#2,d0
(2)  656/FFFFFFFFFFFF2ECA : 0245 00E0           		andi.w	#%11100000,d5
(2)  657/FFFFFFFFFFFF2ECE : E84D                		lsr.w	#4,d5
(2)  658/FFFFFFFFFFFF2ED0 : 41F9 FFFF 346E      		lea	(strL_LazyVal),a0
(2)  659/FFFFFFFFFFFF2ED6 : D0C5                		adda	d5,a0
(2)  660/FFFFFFFFFFFF2ED8 : 6100 E138           		bsr	Video_Print
(2)  661/FFFFFFFFFFFF2EDC : 3004                		move.w	d4,d0
(2)  662/FFFFFFFFFFFF2EDE :                     .from_fmbad:
(2)  663/FFFFFFFFFFFF2EDE :                     ; 		addq.w	#1,d1
(2)  664/FFFFFFFFFFFF2EDE : 5840                		addq.w	#4,d0
(2)  665/FFFFFFFFFFFF2EE0 : D6FC 0004           		adda	#4,a3
(2)  666/FFFFFFFFFFFF2EE4 : 51CF FFBA           		dbf	d7,.show_table_fm
(2)  667/FFFFFFFFFFFF2EE8 : 4E75                		rts
(2)  668/FFFFFFFFFFFF2EEA :                     
(2)  669/FFFFFFFFFFFF2EEA :                     .show_table:
(2)  670/FFFFFFFFFFFF2EEA : 41F9 FFFF 312A      		lea	(strL_NoteList),a0
(2)  671/FFFFFFFFFFFF2EF0 : 7C00                		moveq	#0,d6
(2)  672/FFFFFFFFFFFF2EF2 : 3C13                		move.w	(a3),d6
(2)  673/FFFFFFFFFFFF2EF4 : 6B08                		bmi.s	.val_bad
(2)  674/FFFFFFFFFFFF2EF6 : D0FC 0004           		adda	#4,a0
(2)  675/FFFFFFFFFFFF2EFA : DC46                		add.w	d6,d6
(2)  676/FFFFFFFFFFFF2EFC : D0C6                		adda	d6,a0
(2)  677/FFFFFFFFFFFF2EFE :                     .val_bad:
(2)  678/FFFFFFFFFFFF2EFE : 6100 E112           		bsr	Video_Print
(2)  679/FFFFFFFFFFFF2F02 :                     ; 		addq.w	#1,d1
(2)  680/FFFFFFFFFFFF2F02 : 5840                		addq.w	#4,d0
(2)  681/FFFFFFFFFFFF2F04 : D6FC 0004           		adda	#4,a3
(2)  682/FFFFFFFFFFFF2F08 : 51CF FFE0           		dbf	d7,.show_table
(2)  683/FFFFFFFFFFFF2F0C : 4E75                		rts
(2)  684/FFFFFFFFFFFF2F0E :                     
(2)  685/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  686/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  687/FFFFFFFFFFFF2F0E :                     ; Objects
(2)  688/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  689/FFFFFFFFFFFF2F0E :                     
(2)  690/FFFFFFFFFFFF2F0E :                     ; ====================================================================
(2)  691/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  692/FFFFFFFFFFFF2F0E :                     ; Objects
(2)  693/FFFFFFFFFFFF2F0E :                     ; ------------------------------------------------------
(2)  694/FFFFFFFFFFFF2F0E :                     
(2)  695/FFFFFFFFFFFF2F0E :                     ; --------------------------------------------------
(2)  696/FFFFFFFFFFFF2F0E :                     ; Sisi
(2)  697/FFFFFFFFFFFF2F0E :                     ; --------------------------------------------------
(2)  698/FFFFFFFFFFFF2F0E :                     
(2)  699/FFFFFFFFFFFF2F0E :                     obj_Fairy:
(2)  700/FFFFFFFFFFFF2F0E : 7000                		moveq	#0,d0
(2)  701/FFFFFFFFFFFF2F10 : 102E 001C           		move.b	obj_index(a6),d0
(2)  702/FFFFFFFFFFFF2F14 : D040                		add.w	d0,d0
(2)  703/FFFFFFFFFFFF2F16 : 323B 0006           		move.w	.list(pc,d0.w),d1
(2)  704/FFFFFFFFFFFF2F1A : 4EFB 1002           		jmp	.list(pc,d1.w)
(2)  705/FFFFFFFFFFFF2F1E :                     ; ----------------------------------------------
(2)  706/FFFFFFFFFFFF2F1E : 0004                .list:		dc.w .init-.list
(2)  707/FFFFFFFFFFFF2F20 : 003A                		dc.w .main-.list
(2)  708/FFFFFFFFFFFF2F22 :                     ; ----------------------------------------------
(2)  709/FFFFFFFFFFFF2F22 :                     .init:
(2)  710/FFFFFFFFFFFF2F22 : 1D7C 0001 001C      		move.b	#1,obj_index(a6)
(2)  711/FFFFFFFFFFFF2F28 : 426E 0020           		clr.w	obj_frame(a6)
(2)  712/FFFFFFFFFFFF2F2C : 6100 F9D4           		bsr	object_ResetAnim
(2)  713/FFFFFFFFFFFF2F30 :                     
(2)  714/FFFFFFFFFFFF2F30 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  715/FFFFFFFFFFFF2F34 : 3C07                		move.w	d7,d6
(2)  716/FFFFFFFFFFFF2F36 : E54E                		lsl.w	#2,d6
(2)  717/FFFFFFFFFFFF2F38 : 41FA 00E6           		lea	.fixd_pos(pc),a0
(2)  718/FFFFFFFFFFFF2F3C : 43EE 0028           		lea	obj_ram(a6),a1
(2)  719/FFFFFFFFFFFF2F40 : D0C6                		adda	d6,a0
(2)  720/FFFFFFFFFFFF2F42 : 32D8                		move.w	(a0)+,(a1)+
(2)  721/FFFFFFFFFFFF2F44 : 32D8                		move.w	(a0)+,(a1)+
(2)  722/FFFFFFFFFFFF2F46 :                     
(2)  723/FFFFFFFFFFFF2F46 : 1E2E 001D           		move.b	obj_subid(a6),d7
(2)  724/FFFFFFFFFFFF2F4A : CEFC 002A           		mulu.w	#42,d7
(2)  725/FFFFFFFFFFFF2F4E : EB4F                		lsl.w	#5,d7
(2)  726/FFFFFFFFFFFF2F50 : 2007                		move.l	d7,d0
(2)  727/FFFFFFFFFFFF2F52 : 6100 F3EE           		bsr	System_DiceRoll
(2)  728/FFFFFFFFFFFF2F56 :                     ; 		neg.w	d7
(2)  729/FFFFFFFFFFFF2F56 : 32C0                		move.w	d0,(a1)+
(2)  730/FFFFFFFFFFFF2F58 :                     
(2)  731/FFFFFFFFFFFF2F58 :                     ; ----------------------------------------------
(2)  732/FFFFFFFFFFFF2F58 :                     .main:
(2)  733/FFFFFFFFFFFF2F58 : 4BEE 0028           		lea	obj_ram(a6),a5
(2)  734/FFFFFFFFFFFF2F5C : 49F8 B872           		lea	(RAM_GemaStatus).w,a4
(2)  735/FFFFFFFFFFFF2F60 :                     	; a5
(2)  736/FFFFFFFFFFFF2F60 :                     	; 0 - X base
(2)  737/FFFFFFFFFFFF2F60 :                     	; 2 - Y base
(2)  738/FFFFFFFFFFFF2F60 :                     	; 4 - Tan
(2)  739/FFFFFFFFFFFF2F60 : 7600                		moveq	#0,d3
(2)  740/FFFFFFFFFFFF2F62 : 162E 001D           		move.b	obj_subid(a6),d3
(2)  741/FFFFFFFFFFFF2F66 : D643                		add.w	d3,d3
(2)  742/FFFFFFFFFFFF2F68 : D8C3                		adda	d3,a4
(2)  743/FFFFFFFFFFFF2F6A :                     ; 		lsl.w	#3,d3
(2)  744/FFFFFFFFFFFF2F6A : 3415                		move.w	(a5),d2
(2)  745/FFFFFFFFFFFF2F6C : 362D 0002           		move.w	2(a5),d3
(2)  746/FFFFFFFFFFFF2F70 : 383C 0002           		move.w	#2,d4			; Multiply
(2)  747/FFFFFFFFFFFF2F74 : 082C 0007 0001      		btst	#7,1(a4)
(2)  748/FFFFFFFFFFFF2F7A : 6704                		beq.s	.not_enbls
(2)  749/FFFFFFFFFFFF2F7C : 383C 0004           		move.w	#4,d4
(2)  750/FFFFFFFFFFFF2F80 :                     .not_enbls:
(2)  751/FFFFFFFFFFFF2F80 : 302D 0004           		move.w	4(a5),d0
(2)  752/FFFFFFFFFFFF2F84 : E848                		lsr.w	#4,d0
(2)  753/FFFFFFFFFFFF2F86 : 6100 F3DE           		bsr	System_SineWave
(2)  754/FFFFFFFFFFFF2F8A : C3C4                		muls.w	d4,d1
(2)  755/FFFFFFFFFFFF2F8C : E041                		asr.w	#8,d1
(2)  756/FFFFFFFFFFFF2F8E : 9441                		sub.w	d1,d2
(2)  757/FFFFFFFFFFFF2F90 : 302D 0004           		move.w	4(a5),d0
(2)  758/FFFFFFFFFFFF2F94 : E848                		lsr.w	#4,d0
(2)  759/FFFFFFFFFFFF2F96 : 082C 0000 0001      		btst	#0,1(a4)
(2)  760/FFFFFFFFFFFF2F9C : 6702                		beq.s	.not_enbl2
(2)  761/FFFFFFFFFFFF2F9E : D040                		add.w	d0,d0
(2)  762/FFFFFFFFFFFF2FA0 :                     .not_enbl2:
(2)  763/FFFFFFFFFFFF2FA0 : 6100 F3BA           		bsr	System_SineWave_Cos
(2)  764/FFFFFFFFFFFF2FA4 : C3C4                		muls.w	d4,d1
(2)  765/FFFFFFFFFFFF2FA6 : E041                		asr.w	#8,d1
(2)  766/FFFFFFFFFFFF2FA8 : 9641                		sub.w	d1,d3
(2)  767/FFFFFFFFFFFF2FAA :                     
(2)  768/FFFFFFFFFFFF2FAA : 383C 0040           		move.w	#$40,d4
(2)  769/FFFFFFFFFFFF2FAE : 082C 0007 0001      		btst	#7,1(a4)
(2)  770/FFFFFFFFFFFF2FB4 : 6704                		beq.s	.not_enbl
(2)  771/FFFFFFFFFFFF2FB6 : 383C 0090           		move.w	#$90,d4
(2)  772/FFFFFFFFFFFF2FBA :                     .not_enbl:
(2)  773/FFFFFFFFFFFF2FBA : D96D 0004           		addi.w	d4,4(a5)
(2)  774/FFFFFFFFFFFF2FBE : 3D42 0004           		move.w	d2,obj_x(a6)
(2)  775/FFFFFFFFFFFF2FC2 : 3D43 0008           		move.w	d3,obj_y(a6)
(2)  776/FFFFFFFFFFFF2FC6 :                     
(2)  777/FFFFFFFFFFFF2FC6 :                     .not_mouse:
(2)  778/FFFFFFFFFFFF2FC6 : 41FA 002E           		lea	.anim_data(pc),a0
(2)  779/FFFFFFFFFFFF2FCA : 6100 F96E           		bsr	object_Animate
(2)  780/FFFFFFFFFFFF2FCE :                     
(2)  781/FFFFFFFFFFFF2FCE : 7000                		moveq	#0,d0
(2)  782/FFFFFFFFFFFF2FD0 : 102E 001D           		move.b	obj_subid(a6),d0
(2)  783/FFFFFFFFFFFF2FD4 : E748                		lsl.w	#3,d0
(2)  784/FFFFFFFFFFFF2FD6 : 41FB 002E           		lea	.sub_ids(pc,d0.w),a0
(2)  785/FFFFFFFFFFFF2FDA : 3428 0004           		move.w	4(a0),d2
(2)  786/FFFFFFFFFFFF2FDE : 2250                		move.l	(a0),a1
(2)  787/FFFFFFFFFFFF2FE0 : 207C 0000 0000      		move.l	#0,a0
(2)  788/FFFFFFFFFFFF2FE6 : 302E 0004           		move.w	obj_x(a6),d0
(2)  789/FFFFFFFFFFFF2FEA : 322E 0008           		move.w	obj_y(a6),d1
(2)  790/FFFFFFFFFFFF2FEE : 362E 0020           		move.w	obj_frame(a6),d3
(2)  791/FFFFFFFFFFFF2FF2 : 6000 E45E           		bra	Video_MakeSprMap
(2)  792/FFFFFFFFFFFF2FF6 :                     
(2)  793/FFFFFFFFFFFF2FF6 :                     ; ----------------------------------------------
(2)  794/FFFFFFFFFFFF2FF6 :                     
(2)  795/FFFFFFFFFFFF2FF6 :                     .anim_data:
(2)  796/FFFFFFFFFFFF2FF6 : 0002                		dc.w .anim_00-.anim_data
(2)  797/FFFFFFFFFFFF2FF8 :                     .anim_00:
(2)  798/FFFFFFFFFFFF2FF8 : 0008                		dc.w 8
(2)  799/FFFFFFFFFFFF2FFA : 0000 0001 0002      		dc.w 0,1,2,1
         FFFFFFFFFFFF3000 : 0001             
(2)  800/FFFFFFFFFFFF3002 : FFFE                		dc.w -2
(2)  801/FFFFFFFFFFFF3004 :                     		align 2
(2)  802/FFFFFFFFFFFF3006 :                     .sub_ids:
(2)  803/FFFFFFFFFFFF3006 : 0022 B284           		dc.l objMap_Dodo
(2)  804/FFFFFFFFFFFF300A : 0002 0000           		dc.w setVram_Dodo,0
(2)  805/FFFFFFFFFFFF300E : 0022 B2A8           		dc.l objMap_Mimi
(2)  806/FFFFFFFFFFFF3012 : 0032 0000           		dc.w setVram_Mimi,0
(2)  807/FFFFFFFFFFFF3016 : 0022 B2CC           		dc.l objMap_Fifi
(2)  808/FFFFFFFFFFFF301A : 0062 0000           		dc.w setVram_Fifi,0
(2)  809/FFFFFFFFFFFF301E :                     		align 2
(2)  810/FFFFFFFFFFFF3020 :                     
(2)  811/FFFFFFFFFFFF3020 :                     .fixd_pos:
(2)  812/FFFFFFFFFFFF3020 : 00B8 0050           		dc.w $B8,$50
(2)  813/FFFFFFFFFFFF3024 : 00DC 0050           		dc.w $B8+$24,$50
(2)  814/FFFFFFFFFFFF3028 : 0100 0050           		dc.w $B8+$48,$50
(2)  815/FFFFFFFFFFFF302C :                     		align 2
(2)  816/FFFFFFFFFFFF302E :                     
(2)  817/FFFFFFFFFFFF302E :                     ; ====================================================================
(2)  818/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  819/FFFFFFFFFFFF302E :                     ; Subroutines
(2)  820/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  821/FFFFFFFFFFFF302E :                     
(2)  822/FFFFFFFFFFFF302E :                     ; ====================================================================
(2)  823/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  824/FFFFFFFFFFFF302E :                     ; Includes for this screen
(2)  825/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  826/FFFFFFFFFFFF302E :                     
(2)  827/FFFFFFFFFFFF302E :                     ; ====================================================================
(2)  828/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  829/FFFFFFFFFFFF302E :                     ; Custom VBlank
(2)  830/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  831/FFFFFFFFFFFF302E :                     
(2)  832/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  833/FFFFFFFFFFFF302E :                     ; Custom HBlank
(2)  834/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  835/FFFFFFFFFFFF302E :                     
(2)  836/FFFFFFFFFFFF302E :                     ; ====================================================================
(2)  837/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  838/FFFFFFFFFFFF302E :                     ; Small data section
(2)  839/FFFFFFFFFFFF302E :                     ; ------------------------------------------------------
(2)  840/FFFFFFFFFFFF302E :                     
(2)  841/FFFFFFFFFFFF302E :                     ; EXTERNAL BEATS FOR EACH TRACK
(2)  842/FFFFFFFFFFFF302E :                     exgema_beats:
(2)  843/FFFFFFFFFFFF302E : 00D6                	dc.w 214
(2)  844/FFFFFFFFFFFF3030 : 00D6                	dc.w 214
(2)  845/FFFFFFFFFFFF3032 : 00D6                	dc.w 214
(2)  846/FFFFFFFFFFFF3034 : 00C0                	dc.w 192
(2)  847/FFFFFFFFFFFF3036 : 00C0                	dc.w 192
(2)  848/FFFFFFFFFFFF3038 : 00D6                	dc.w 214
(2)  849/FFFFFFFFFFFF303A : 00B8                	dc.w $00B8
(2)  850/FFFFFFFFFFFF303C : 00C0                	dc.w 192
(2)  851/FFFFFFFFFFFF303E : 00C0                	dc.w 192
(2)  852/FFFFFFFFFFFF3040 : 00D6                	dc.w 214
(2)  853/FFFFFFFFFFFF3042 : 00D6                	dc.w 214
(2)  854/FFFFFFFFFFFF3044 : 00D6                	dc.w 214
(2)  855/FFFFFFFFFFFF3046 : 00D6                	dc.w 214
(2)  856/FFFFFFFFFFFF3048 : 00D6                	dc.w 214
(2)  857/FFFFFFFFFFFF304A : 00D6                	dc.w 214
(2)  858/FFFFFFFFFFFF304C : 00D6                	dc.w 214
(2)  859/FFFFFFFFFFFF304E : 00D6                	dc.w 214
(2)  860/FFFFFFFFFFFF3050 : 00D6                	dc.w 214
(2)  861/FFFFFFFFFFFF3052 : 00D6                	dc.w 214
(2)  862/FFFFFFFFFFFF3054 : 00D6                	dc.w 214
(2)  863/FFFFFFFFFFFF3056 : 00D6                	dc.w 214
(2)  864/FFFFFFFFFFFF3058 : 00D6                	dc.w 214
(2)  865/FFFFFFFFFFFF305A : 00D6                	dc.w 214
(2)  866/FFFFFFFFFFFF305C : 00D6                	dc.w 214
(2)  867/FFFFFFFFFFFF305E :                     
(2)  868/FFFFFFFFFFFF305E :                     ArtList_Stuff:
(2)  869/FFFFFFFFFFFF305E : 0003                		dc.w 3
(2)  870/FFFFFFFFFFFF3060 : 0022 A0E4           		dc.l Art_FairyDodo
(2)  871/FFFFFFFFFFFF3064 : 0040                		dc.w cell_num(setVram_Dodo)
(2)  872/FFFFFFFFFFFF3066 : 0600                		dc.w cell_num($30)
(2)  873/FFFFFFFFFFFF3068 : 0022 A6E4           		dc.l Art_FairyMimi
(2)  874/FFFFFFFFFFFF306C : 0640                		dc.w cell_num(setVram_Mimi)
(2)  875/FFFFFFFFFFFF306E : 0600                		dc.w cell_num($30)
(2)  876/FFFFFFFFFFFF3070 : 0022 ACE4           		dc.l Art_FairyFifi
(2)  877/FFFFFFFFFFFF3074 : 0C40                		dc.w cell_num(setVram_Fifi)
(2)  878/FFFFFFFFFFFF3076 : 0600                		dc.w cell_num($30)
(2)  879/FFFFFFFFFFFF3078 :                     
(2)  880/FFFFFFFFFFFF3078 :                     str_TesterTitle:
(2)  881/FFFFFFFFFFFF3078 : 4745 4D41 2053      		dc.b "GEMA Sound Test",0
         FFFFFFFFFFFF307E : 6F75 6E64 2054 
         FFFFFFFFFFFF3084 : 6573 7400          
(2)  882/FFFFFFFFFFFF3088 :                     		align 2
(2)  883/FFFFFFFFFFFF308A :                     str_TesterInfo:
(2)  884/FFFFFFFFFFFF308A : 5365 7123 2042      		dc.b "Seq# Blk# Indx",$0A
         FFFFFFFFFFFF3090 : 6C6B 2320 496E 
         FFFFFFFFFFFF3096 : 6478 0A          
(2)  885/FFFFFFFFFFFF3099 : 0A0A 0A0A           		dc.b $0A,$0A,$0A,$0A
(2)  886/FFFFFFFFFFFF309D : 4265 6174 733A 20   		dc.b "Beats: "
(2)  887/FFFFFFFFFFFF30A4 : 00                  		dc.b 0
(2)  888/FFFFFFFFFFFF30A5 :                     		align 2
(2)  889/FFFFFFFFFFFF30A6 :                     str_Instruc:
(2)  890/FFFFFFFFFFFF30A6 : 4C52 202D 2053      		dc.b "LR - Seq. Num#   XY - Track index",$0A
         FFFFFFFFFFFF30AC : 6571 2E20 4E75 
         FFFFFFFFFFFF30B2 : 6D23 2020 2058 
         FFFFFFFFFFFF30B8 : 5920 2D20 5472 
         FFFFFFFFFFFF30BE : 6163 6B20 696E 
         FFFFFFFFFFFF30C4 : 6465 780A          
(2)  891/FFFFFFFFFFFF30C8 : 5544 202D 2053      		dc.b "UD - Seq. Blk#",$0A
         FFFFFFFFFFFF30CE : 6571 2E20 426C 
         FFFFFFFFFFFF30D4 : 6B23 0A          
(2)  892/FFFFFFFFFFFF30D7 : 2041 202D 2053      		dc.b " A - STOP ALL",$0A
         FFFFFFFFFFFF30DD : 544F 5020 414C 
         FFFFFFFFFFFF30E3 : 4C0A             
(2)  893/FFFFFFFFFFFF30E5 : 2042 202D 2053      		dc.b " B - STOP Seq.",$0A
         FFFFFFFFFFFF30EB : 544F 5020 5365 
         FFFFFFFFFFFF30F1 : 712E 0A          
(2)  894/FFFFFFFFFFFF30F4 : 2043 202D 2050      		dc.b " C - PLAY Seq.    Z - PLAY auto-fill"
         FFFFFFFFFFFF30FA : 4C41 5920 5365 
         FFFFFFFFFFFF3100 : 712E 2020 2020 
         FFFFFFFFFFFF3106 : 5A20 2D20 504C 
         FFFFFFFFFFFF310C : 4159 2061 7574 
         FFFFFFFFFFFF3112 : 6F2D 6669 6C6C    
(2)  895/FFFFFFFFFFFF3118 : 00                  		dc.b 0
(2)  896/FFFFFFFFFFFF3119 :                     		align 2
(2)  897/FFFFFFFFFFFF311A :                     
(2)  898/FFFFFFFFFFFF311A :                     str_VmInfo:
(2)  899/FFFFFFFFFFFF311A : 5053 470A           		dc.b "PSG",$0A
(2)  900/FFFFFFFFFFFF311E : 464D 0A             		dc.b "FM",$0A
(2)  901/FFFFFFFFFFFF3121 : 5043 4D0A           		dc.b "PCM",$0A
(2)  902/FFFFFFFFFFFF3125 : 5057 4D             		dc.b "PWM"
(2)  903/FFFFFFFFFFFF3128 : 00                  		dc.b 0
(2)  904/FFFFFFFFFFFF3129 :                     		align 2
(2)  905/FFFFFFFFFFFF312A :                     
(2)  906/FFFFFFFFFFFF312A : 2D2D 2D00           strL_NoteList:	dc.b "---",0
(2)  907/FFFFFFFFFFFF312E : 432D 3000 4323      		dc.b "C-0",0,"C#0",0,"D-0",0,"D#0",0,"E-0",0,"F-0",0,"F#0",0,"G-0",0,"G#0",0,"A-0",0,"A#0",0,"B-0",0
         FFFFFFFFFFFF3134 : 3000 442D 3000 
         FFFFFFFFFFFF313A : 4423 3000 452D 
         FFFFFFFFFFFF3140 : 3000 462D 3000 
         FFFFFFFFFFFF3146 : 4623 3000 472D 
         FFFFFFFFFFFF314C : 3000 4723 3000 
         FFFFFFFFFFFF3152 : 412D 3000 4123 
         FFFFFFFFFFFF3158 : 3000 422D 3000    
(2)  908/FFFFFFFFFFFF315E : 432D 3100 4323      		dc.b "C-1",0,"C#1",0,"D-1",0,"D#1",0,"E-1",0,"F-1",0,"F#1",0,"G-1",0,"G#1",0,"A-1",0,"A#1",0,"B-1",0
         FFFFFFFFFFFF3164 : 3100 442D 3100 
         FFFFFFFFFFFF316A : 4423 3100 452D 
         FFFFFFFFFFFF3170 : 3100 462D 3100 
         FFFFFFFFFFFF3176 : 4623 3100 472D 
         FFFFFFFFFFFF317C : 3100 4723 3100 
         FFFFFFFFFFFF3182 : 412D 3100 4123 
         FFFFFFFFFFFF3188 : 3100 422D 3100    
(2)  909/FFFFFFFFFFFF318E : 432D 3200 4323      		dc.b "C-2",0,"C#2",0,"D-2",0,"D#2",0,"E-2",0,"F-2",0,"F#2",0,"G-2",0,"G#2",0,"A-2",0,"A#2",0,"B-2",0
         FFFFFFFFFFFF3194 : 3200 442D 3200 
         FFFFFFFFFFFF319A : 4423 3200 452D 
         FFFFFFFFFFFF31A0 : 3200 462D 3200 
         FFFFFFFFFFFF31A6 : 4623 3200 472D 
         FFFFFFFFFFFF31AC : 3200 4723 3200 
         FFFFFFFFFFFF31B2 : 412D 3200 4123 
         FFFFFFFFFFFF31B8 : 3200 422D 3200    
(2)  910/FFFFFFFFFFFF31BE : 432D 3300 4323      		dc.b "C-3",0,"C#3",0,"D-3",0,"D#3",0,"E-3",0,"F-3",0,"F#3",0,"G-3",0,"G#3",0,"A-3",0,"A#3",0,"B-3",0
         FFFFFFFFFFFF31C4 : 3300 442D 3300 
         FFFFFFFFFFFF31CA : 4423 3300 452D 
         FFFFFFFFFFFF31D0 : 3300 462D 3300 
         FFFFFFFFFFFF31D6 : 4623 3300 472D 
         FFFFFFFFFFFF31DC : 3300 4723 3300 
         FFFFFFFFFFFF31E2 : 412D 3300 4123 
         FFFFFFFFFFFF31E8 : 3300 422D 3300    
(2)  911/FFFFFFFFFFFF31EE : 432D 3400 4323      		dc.b "C-4",0,"C#4",0,"D-4",0,"D#4",0,"E-4",0,"F-4",0,"F#4",0,"G-4",0,"G#4",0,"A-4",0,"A#4",0,"B-4",0
         FFFFFFFFFFFF31F4 : 3400 442D 3400 
         FFFFFFFFFFFF31FA : 4423 3400 452D 
         FFFFFFFFFFFF3200 : 3400 462D 3400 
         FFFFFFFFFFFF3206 : 4623 3400 472D 
         FFFFFFFFFFFF320C : 3400 4723 3400 
         FFFFFFFFFFFF3212 : 412D 3400 4123 
         FFFFFFFFFFFF3218 : 3400 422D 3400    
(2)  912/FFFFFFFFFFFF321E : 432D 3500 4323      		dc.b "C-5",0,"C#5",0,"D-5",0,"D#5",0,"E-5",0,"F-5",0,"F#5",0,"G-5",0,"G#5",0,"A-5",0,"A#5",0,"B-5",0
         FFFFFFFFFFFF3224 : 3500 442D 3500 
         FFFFFFFFFFFF322A : 4423 3500 452D 
         FFFFFFFFFFFF3230 : 3500 462D 3500 
         FFFFFFFFFFFF3236 : 4623 3500 472D 
         FFFFFFFFFFFF323C : 3500 4723 3500 
         FFFFFFFFFFFF3242 : 412D 3500 4123 
         FFFFFFFFFFFF3248 : 3500 422D 3500    
(2)  913/FFFFFFFFFFFF324E : 432D 3600 4323      		dc.b "C-6",0,"C#6",0,"D-6",0,"D#6",0,"E-6",0,"F-6",0,"F#6",0,"G-6",0,"G#6",0,"A-6",0,"A#6",0,"B-6",0
         FFFFFFFFFFFF3254 : 3600 442D 3600 
         FFFFFFFFFFFF325A : 4423 3600 452D 
         FFFFFFFFFFFF3260 : 3600 462D 3600 
         FFFFFFFFFFFF3266 : 4623 3600 472D 
         FFFFFFFFFFFF326C : 3600 4723 3600 
         FFFFFFFFFFFF3272 : 412D 3600 4123 
         FFFFFFFFFFFF3278 : 3600 422D 3600    
(2)  914/FFFFFFFFFFFF327E : 432D 3700 4323      		dc.b "C-7",0,"C#7",0,"D-7",0,"D#7",0,"E-7",0,"F-7",0,"F#7",0,"G-7",0,"G#7",0,"A-7",0,"A#7",0,"B-7",0
         FFFFFFFFFFFF3284 : 3700 442D 3700 
         FFFFFFFFFFFF328A : 4423 3700 452D 
         FFFFFFFFFFFF3290 : 3700 462D 3700 
         FFFFFFFFFFFF3296 : 4623 3700 472D 
         FFFFFFFFFFFF329C : 3700 4723 3700 
         FFFFFFFFFFFF32A2 : 412D 3700 4123 
         FFFFFFFFFFFF32A8 : 3700 422D 3700    
(2)  915/FFFFFFFFFFFF32AE : 432D 3800 4323      		dc.b "C-8",0,"C#8",0,"D-8",0,"D#8",0,"E-8",0,"F-8",0,"F#8",0,"G-8",0,"G#8",0,"A-8",0,"A#8",0,"B-8",0
         FFFFFFFFFFFF32B4 : 3800 442D 3800 
         FFFFFFFFFFFF32BA : 4423 3800 452D 
         FFFFFFFFFFFF32C0 : 3800 462D 3800 
         FFFFFFFFFFFF32C6 : 4623 3800 472D 
         FFFFFFFFFFFF32CC : 3800 4723 3800 
         FFFFFFFFFFFF32D2 : 412D 3800 4123 
         FFFFFFFFFFFF32D8 : 3800 422D 3800    
(2)  916/FFFFFFFFFFFF32DE : 432D 3900 4323      		dc.b "C-9",0,"C#9",0,"D-9",0,"D#9",0,"E-9",0,"F-9",0,"F#9",0,"G-9",0,"G#9",0,"A-9",0,"A#9",0,"B-9",0
         FFFFFFFFFFFF32E4 : 3900 442D 3900 
         FFFFFFFFFFFF32EA : 4423 3900 452D 
         FFFFFFFFFFFF32F0 : 3900 462D 3900 
         FFFFFFFFFFFF32F6 : 4623 3900 472D 
         FFFFFFFFFFFF32FC : 3900 4723 3900 
         FFFFFFFFFFFF3302 : 412D 3900 4123 
         FFFFFFFFFFFF3308 : 3900 422D 3900    
(2)  917/FFFFFFFFFFFF330E : 3F2D 4100 3F2D      		dc.b "?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0,"?-A",0
         FFFFFFFFFFFF3314 : 4100 3F2D 4100 
         FFFFFFFFFFFF331A : 3F2D 4100 3F2D 
         FFFFFFFFFFFF3320 : 4100 3F2D 4100 
         FFFFFFFFFFFF3326 : 3F2D 4100 3F2D 
         FFFFFFFFFFFF332C : 4100 3F2D 4100 
         FFFFFFFFFFFF3332 : 3F2D 4100 3F2D 
         FFFFFFFFFFFF3338 : 4100 3F2D 4100    
(2)  918/FFFFFFFFFFFF333E : 3F2D 4200 3F2D      		dc.b "?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0,"?-B",0
         FFFFFFFFFFFF3344 : 4200 3F2D 4200 
         FFFFFFFFFFFF334A : 3F2D 4200 3F2D 
         FFFFFFFFFFFF3350 : 4200 3F2D 4200 
         FFFFFFFFFFFF3356 : 3F2D 4200 3F2D 
         FFFFFFFFFFFF335C : 4200 3F2D 4200 
         FFFFFFFFFFFF3362 : 3F2D 4200 3F2D 
         FFFFFFFFFFFF3368 : 4200 3F2D 4200    
(2)  919/FFFFFFFFFFFF336E : 3F2D 4300 3F2D      		dc.b "?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0,"?-C",0
         FFFFFFFFFFFF3374 : 4300 3F2D 4300 
         FFFFFFFFFFFF337A : 3F2D 4300 3F2D 
         FFFFFFFFFFFF3380 : 4300 3F2D 4300 
         FFFFFFFFFFFF3386 : 3F2D 4300 3F2D 
         FFFFFFFFFFFF338C : 4300 3F2D 4300 
         FFFFFFFFFFFF3392 : 3F2D 4300 3F2D 
         FFFFFFFFFFFF3398 : 4300 3F2D 4300    
(2)  920/FFFFFFFFFFFF339E : 3F2D 4400 3F2D      		dc.b "?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0,"?-D",0
         FFFFFFFFFFFF33A4 : 4400 3F2D 4400 
         FFFFFFFFFFFF33AA : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33B0 : 4400 3F2D 4400 
         FFFFFFFFFFFF33B6 : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33BC : 4400 3F2D 4400 
         FFFFFFFFFFFF33C2 : 3F2D 4400 3F2D 
         FFFFFFFFFFFF33C8 : 4400 3F2D 4400    
(2)  921/FFFFFFFFFFFF33CE : 3F2D 4500 3F2D      		dc.b "?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0,"?-E",0
         FFFFFFFFFFFF33D4 : 4500 3F2D 4500 
         FFFFFFFFFFFF33DA : 3F2D 4500 3F2D 
         FFFFFFFFFFFF33E0 : 4500 3F2D 4500 
         FFFFFFFFFFFF33E6 : 3F2D 4500 3F2D 
         FFFFFFFFFFFF33EC : 4500 3F2D 4500 
         FFFFFFFFFFFF33F2 : 3F2D 4500 3F2D 
         FFFFFFFFFFFF33F8 : 4500 3F2D 4500    
(2)  922/FFFFFFFFFFFF33FE : 3F2D 4600 3F2D      		dc.b "?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0,"?-F",0
         FFFFFFFFFFFF3404 : 4600 3F2D 4600 
         FFFFFFFFFFFF340A : 3F2D 4600 3F2D 
         FFFFFFFFFFFF3410 : 4600 3F2D 4600 
         FFFFFFFFFFFF3416 : 3F2D 4600 3F2D 
         FFFFFFFFFFFF341C : 4600 3F2D 4600 
         FFFFFFFFFFFF3422 : 3F2D 4600 3F2D 
         FFFFFFFFFFFF3428 : 4600 3F2D 4600    
(2)  923/FFFFFFFFFFFF342E : 2D2D 2D00           strL_FmOnly:	dc.b "---",0
(2)  924/FFFFFFFFFFFF3432 : 432D 2000 4323      		dc.b "C- ",0,"C# ",0,"D- ",0,"D# ",0,"E- ",0,"F- ",0,"F# ",0,"G- ",0,"G# ",0,"A- ",0,"A# ",0,"B- ",0
         FFFFFFFFFFFF3438 : 2000 442D 2000 
         FFFFFFFFFFFF343E : 4423 2000 452D 
         FFFFFFFFFFFF3444 : 2000 462D 2000 
         FFFFFFFFFFFF344A : 4623 2000 472D 
         FFFFFFFFFFFF3450 : 2000 4723 2000 
         FFFFFFFFFFFF3456 : 412D 2000 4123 
         FFFFFFFFFFFF345C : 2000 422D 2000    
(2)  925/FFFFFFFFFFFF3462 : 3F2D 2000 3F2D      		dc.b "?- ",0,"?- ",0,"?- ",0
         FFFFFFFFFFFF3468 : 2000 3F2D 2000    
(2)  926/FFFFFFFFFFFF346E : 3000 3100 3200      strL_LazyVal:	dc.b "0",0,"1",0,"2",0,"3",0,"4",0,"5",0,"6",0,"7",0,"8",0,"9",0
         FFFFFFFFFFFF3474 : 3300 3400 3500 
         FFFFFFFFFFFF347A : 3600 3700 3800 
         FFFFFFFFFFFF3480 : 3900             
(2)  927/FFFFFFFFFFFF3482 :                     
(2)  928/FFFFFFFFFFFF3482 : 464D 3300           str_Speci:	dc.b "FM3",0
(2)  929/FFFFFFFFFFFF3486 : 4441 4300           str_Sampl:	dc.b "DAC",0
(2)  930/FFFFFFFFFFFF348A :                     
(2)  931/FFFFFFFFFFFF348A :                     str_ShowVars:
(2)  932/FFFFFFFFFFFF348A : 80FF B86F           		dc.l pstr_mem(0,RAM_GemaSeq+1)
(2)  933/FFFFFFFFFFFF348E : 2020 20             		dc.b "   "
(2)  934/FFFFFFFFFFFF3491 : 80FF B871           		dc.l pstr_mem(0,RAM_GemaBlk+1)
(2)  935/FFFFFFFFFFFF3495 : 2020 20             		dc.b "   "
(2)  936/FFFFFFFFFFFF3498 : 80FF B86D           		dc.l pstr_mem(0,RAM_GemaIndx+1)
(2)  937/FFFFFFFFFFFF349C : 00                  		dc.b 0
(2)  938/FFFFFFFFFFFF349D :                     		align 2
(2)  939/FFFFFFFFFFFF349E :                     str_ShowBeats:
(2)  940/FFFFFFFFFFFF349E : 81FF B87C           		dc.l pstr_mem(1,RAM_CurrBeats)
(2)  941/FFFFFFFFFFFF34A2 : 00                  		dc.b 0
(2)  942/FFFFFFFFFFFF34A3 :                     		align 2
(2)  943/FFFFFFFFFFFF34A4 :                     
(2)  944/FFFFFFFFFFFF34A4 :                     str_Info:
(2)  945/FFFFFFFFFFFF34A4 : 83FF E85C           		dc.l pstr_mem(3,RAM_Framecount)
(2)  946/FFFFFFFFFFFF34A8 : 00                  		dc.b 0
(2)  947/FFFFFFFFFFFF34A9 :                     		align 2
(2)  948/FFFFFFFFFFFF34AA :                     
(1)   19/FFFFFFFFFFFF34AA :                     mcscrn_e:
(1)   19/   378AA :                                     dephase
(1)   19/   378AA :                                     phase mctopscrn+(mcscrn_e-RAM_UserCode) ; Add the used bytes
(1)   19/   378AA :                                     align $800
(1)   19/   38000 : =$38000              MD_SCREEN07_E label *
(1)   19/   38000 :  (MACRO-2)                   erreport "SCREEN CODE: MD_SCREEN07",mcscrn_e-mcscrn_s,MAX_UserCode
(1)   20/   38000 :                     
     377/   38000 :                     
     378/   38000 :                     ; ====================================================================
     379/   38000 :                     ; ----------------------------------------------------------------
     380/   38000 :                     ; DATA
     381/   38000 :                     ; ----------------------------------------------------------------
     382/   38000 :                     
     383/   38000 :                     		include "game/incl_data.asm"
(1)    1/   38000 :                     ; ===========================================================================
(1)    2/   38000 :                     ; ----------------------------------------------------------------
(1)    3/   38000 :                     ; DATA BANKS
(1)    4/   38000 :                     ;
(1)    5/   38000 :                     ; MACRO Usage:
(1)    6/   38000 :                     ;	data_bank LABEL_START
(1)    7/   38000 :                     ;	include "game/data/your_bank.asm"
(1)    8/   38000 :                     ;	dend_bank LABEL_END
(1)    9/   38000 :                     ;
(1)   10/   38000 :                     ; Then in incl_list.asm add an entry like this, this is only
(1)   11/   38000 :                     ; required for SCD and CD32X:
(1)   12/   38000 :                     ; 	dc.l DATA_BANK			; Label
(1)   13/   38000 :                     ; 	dc.b "BNK_MAIN.BIN"		; ISO filename
(1)   14/   38000 :                     ;
(1)   15/   38000 :                     ; In your screen code load banks with:
(1)   16/   38000 :                     ; 	move.l	#DATA_BANK,d0
(1)   17/   38000 :                     ; 	bsr	System_SetDataBank
(1)   18/   38000 :                     ;
(1)   19/   38000 :                     ; You MUST use the banks for compatibility to all systems
(1)   20/   38000 :                     ; even if the standard Genesis doesn't require it.
(1)   21/   38000 :                     ; DO note that on SCD and CD32X the DATA banks are stored
(1)   22/   38000 :                     ; on DISC, so loading will be take a lot.
(1)   23/   38000 :                     ; ----------------------------------------------------------------
(1)   24/   38000 :                     
(1)   25/   38000 : (MACRO)              	data_bank DATA_BANK0
(1)   25/   38000 :                                     align $800              ; Sector alignment
(1)   25/   38000 : =$38000              DATA_BANK0 label *                        ; Register label
(1)   25/  200000 :                                     phase sysmcd_wram
(1)   25/  200000 : =$200000             GLBL_MDATA_ST := *                      ; Save current pos globally
(1)   26/  200000 :                     	include "game/data/bank_main.asm"
(2)    1/  200000 :                     ; ===========================================================================
(2)    2/  200000 :                     ; ----------------------------------------------------------------
(2)    3/  200000 :                     ; BANK data
(2)    4/  200000 :                     ;
(2)    5/  200000 :                     ; Special macros:
(2)    6/  200000 :                     ;
(2)    7/  200000 :                     ; - VDP graphics:
(2)    8/  200000 :                     ;	binclude_dma   LABEL_START,"filename"		; For single label
(2)    9/  200000 :                     ;	binclude_dma_e LABEL_START,LABEL_END,"filename"	; Start and End labels
(2)   10/  200000 :                     ;
(2)   11/  200000 :                     ; - 32X SVDP graphics:
(2)   12/  200000 :                     ; 	mars_VramStart Label_test			; Set the Start label
(2)   13/  200000 :                     ; example_0:
(2)   14/  200000 :                     ; 	include "your_svdp_graphics.bin"
(2)   15/  200000 :                     ; 	align 4						; ** Don't forget to align by 4 at the end **
(2)   16/  200000 :                     ; example_1:
(2)   17/  200000 :                     ; 	include "more_svdp.bin"
(2)   18/  200000 :                     ;	align 4
(2)   19/  200000 :                     ;	mars_VramEnd Label_end				; Set the End label
(2)   20/  200000 :                     ; ----------------------------------------------------------------
(2)   21/  200000 :                     
(2)   22/  200000 :                     		include "sound/data.asm"		; GEMA sound data
(3)    1/  200000 :                     ; ===========================================================================
(3)    2/  200000 :                     ; -------------------------------------------------------------------
(3)    3/  200000 :                     ; Main sound data
(3)    4/  200000 :                     ; -------------------------------------------------------------------
(3)    5/  200000 :                     
(3)    6/  200000 :                     MainGemaSeqList:
(3)    7/  200000 : (MACRO)              	gemaTrk 1,3,gtrk_Test0
(3)    7/  200000 : 8320 0008                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST0&$FFFFFF)
(3)    8/  200004 : (MACRO)              	gemaTrk 1,3,gtrk_Test1	; $0F
(3)    8/  200004 : 8320 002C                   dc.l ((1&$01)<<31)|((3&$7F)<<24)|(GTRK_TEST1&$FFFFFF)
(3)    9/  200008 :                     
(3)   10/  200008 :                     ; ----------------------------------------------------
(3)   11/  200008 :                     gtrk_Test0:
(3)   12/  200008 : (MACRO)              	gemaHead .blk,.pat,.ins,10
(3)   12/  200008 : 000A                        dc.w 10
(3)   12/  20000A : 0020 0016                   dc.l .BLK
(3)   12/  20000E : 0020 0018                   dc.l .PAT
(3)   12/  200012 : 0020 0024                   dc.l .INS
(3)   13/  200016 :                     .blk:	binclude "sound/seq/test_blk.bin"
(3)   14/  200018 :                     .pat:	binclude "sound/seq/test_patt.bin"
(3)   15/  200024 :                     .ins:
(3)   16/  200024 : (MACRO)              	gInsDac 0,DacIns_TEST,1
(3)   16/  200024 : C100 20A7                   dc.b $C0|1,0,((DACINS_TEST>>16)&$FF),((DACINS_TEST>>8)&$FF)
(3)   16/  200028 : A800 0000                   dc.b DACINS_TEST&$FF,0,0,0
(3)   17/  20002C :                     ; 	gInsDac 0,DacIns_Snare_Rap,0
(3)   18/  20002C :                     
(3)   19/  20002C :                     ; ----------------------------------------------------
(3)   20/  20002C :                     gtrk_Test1:
(3)   21/  20002C : (MACRO)              	gemaHead .blk,.pat,.ins,10
(3)   21/  20002C : 000A                        dc.w 10
(3)   21/  20002E : 0020 003A                   dc.l .BLK
(3)   21/  200032 : 0020 0048                   dc.l .PAT
(3)   21/  200036 : 0020 4146                   dc.l .INS
(3)   22/  20003A :                     .blk:	binclude "sound/seq/axe_blk.bin"
(3)   23/  200048 :                     .pat:	binclude "sound/seq/axe_patt.bin"
(3)   24/  204146 :                     .ins:
(3)   25/  204146 : (MACRO)              	gInsFm 0,FmIns_Vibraphone_1
(3)   25/  204146 : A000 2045                   dc.b $A0,0,((FMINS_VIBRAPHONE_1>>16)&$FF),((FMINS_VIBRAPHONE_1>>8)&$FF)
(3)   25/  20414A : FE00 0000                   dc.b FMINS_VIBRAPHONE_1&$FF,$00,$00,$00
(3)   26/  20414E : (MACRO)              	gInsFm 0,FmIns_Organ_drawbar
(3)   26/  20414E : A000 2045                   dc.b $A0,0,((FMINS_ORGAN_DRAWBAR>>16)&$FF),((FMINS_ORGAN_DRAWBAR>>8)&$FF)
(3)   26/  204152 : 9E00 0000                   dc.b FMINS_ORGAN_DRAWBAR&$FF,$00,$00,$00
(3)   27/  204156 : (MACRO)              	gInsFm -12,FmIns_Bass_Groove_1
(3)   27/  204156 : A0F4 2043                   dc.b $A0,-12,((FMINS_BASS_GROOVE_1>>16)&$FF),((FMINS_BASS_GROOVE_1>>8)&$FF)
(3)   27/  20415A : 7E00 0000                   dc.b FMINS_BASS_GROOVE_1&$FF,$00,$00,$00
(3)   28/  20415E : (MACRO)              	gInsFm +12,FmIns_bass_italo
(3)   28/  20415E : A00C 204B                   dc.b $A0,+12,((FMINS_BASS_ITALO>>16)&$FF),((FMINS_BASS_ITALO>>8)&$FF)
(3)   28/  204162 : DE00 0000                   dc.b FMINS_BASS_ITALO&$FF,$00,$00,$00
(3)   29/  204166 : (MACRO)              	gInsDac 0,DacIns_conga,0
(3)   29/  204166 : C000 2059                   dc.b $C0|0,0,((DACINS_CONGA>>16)&$FF),((DACINS_CONGA>>8)&$FF)
(3)   29/  20416A : 7C00 0000                   dc.b DACINS_CONGA&$FF,0,0,0
(3)   30/  20416E : (MACRO)              	gInsDac 0,DacIns_conga_low,0
(3)   30/  20416E : C000 2064                   dc.b $C0|0,0,((DACINS_CONGA_LOW>>16)&$FF),((DACINS_CONGA_LOW>>8)&$FF)
(3)   30/  204172 : 5800 0000                   dc.b DACINS_CONGA_LOW&$FF,0,0,0
(3)   31/  204176 : (MACRO)              	gInsDac -12,DacIns_clap,0
(3)   31/  204176 : C0F4 2050                   dc.b $C0|0,-12,((DACINS_CLAP>>16)&$FF),((DACINS_CLAP>>8)&$FF)
(3)   31/  20417A : 0000 0000                   dc.b DACINS_CLAP&$FF,0,0,0
(3)   32/  20417E : (MACRO)              	gInsFm 0,FmIns_Flaute_1
(3)   32/  20417E : A000 2045                   dc.b $A0,0,((FMINS_FLAUTE_1>>16)&$FF),((FMINS_FLAUTE_1>>8)&$FF)
(3)   32/  204182 : BE00 0000                   dc.b FMINS_FLAUTE_1&$FF,$00,$00,$00
(3)   33/  204186 : (MACRO)              	gInsFm 0,FmIns_Hats_1
(3)   33/  204186 : A000 2046                   dc.b $A0,0,((FMINS_HATS_1>>16)&$FF),((FMINS_HATS_1>>8)&$FF)
(3)   33/  20418A : DE00 0000                   dc.b FMINS_HATS_1&$FF,$00,$00,$00
(3)   34/  20418E : (MACRO)              	gInsDac +24+2,DacIns_Kick_Strong,0
(3)   34/  20418E : C01A 2073                   dc.b $C0|0,+24+2,((DACINS_KICK_STRONG>>16)&$FF),((DACINS_KICK_STRONG>>8)&$FF)
(3)   34/  204192 : 3400 0000                   dc.b DACINS_KICK_STRONG&$FF,0,0,0
(3)   35/  204196 : (MACRO)              	gInsDac +12,DacIns_Snare,0
(3)   35/  204196 : C00C 208E                   dc.b $C0|0,+12,((DACINS_SNARE>>16)&$FF),((DACINS_SNARE>>8)&$FF)
(3)   35/  20419A : 0000 0000                   dc.b DACINS_SNARE&$FF,0,0,0
(3)   36/  20419E : (MACRO)              	gInsNull
(3)   36/  20419E : 0000 0000                   dc.b $00,$00,$00,$00
(3)   36/  2041A2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   37/  2041A6 : (MACRO)              	gInsPsg 0,$00,$00,$00,$00,$02,$00
(3)   37/  2041A6 : 8000 0000                   dc.b $80,0,$00,$00
(3)   37/  2041AA : 0000 0200                   dc.b $00,$00,$02,$00
(3)   38/  2041AE : (MACRO)              	gInsNull
(3)   38/  2041AE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   38/  2041B2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   39/  2041B6 : (MACRO)              	gInsNull
(3)   39/  2041B6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   39/  2041BA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   40/  2041BE : (MACRO)              	gInsNull
(3)   40/  2041BE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   40/  2041C2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   41/  2041C6 : (MACRO)              	gInsNull
(3)   41/  2041C6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   41/  2041CA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   42/  2041CE : (MACRO)              	gInsNull
(3)   42/  2041CE : 0000 0000                   dc.b $00,$00,$00,$00
(3)   42/  2041D2 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   43/  2041D6 : (MACRO)              	gInsNull
(3)   43/  2041D6 : 0000 0000                   dc.b $00,$00,$00,$00
(3)   43/  2041DA : 0000 0000                   dc.b $00,$00,$00,$00
(3)   44/  2041DE :                     
(3)   45/  2041DE :                     ; ===========================================================================
(3)   46/  2041DE :                     ; -------------------------------------------------------------------
(3)   47/  2041DE :                     ; GEMA/Nikona FM instruments
(3)   48/  2041DE :                     ; -------------------------------------------------------------------
(3)   49/  2041DE :                     
(3)   50/  2041DE :                     ; -----------------------------------------------------------
(3)   51/  2041DE :                     ; Normal FM Instruments
(3)   52/  2041DE :                     ; -----------------------------------------------------------
(3)   53/  2041DE :                     
(3)   54/  2041DE :                     FmIns_Bass_big_81:
(3)   55/  2041DE :                     		binclude "sound/ins/fm/bin/bass_big_82.bin"
(3)   56/  2041FE :                     FmIns_Bass_big_110:
(3)   57/  2041FE :                     		binclude "sound/ins/fm/bin/bass_big_110.bin"
(3)   58/  20421E :                     FmIns_Bass_big_114:
(3)   59/  20421E :                     		binclude "sound/ins/fm/bin/bass_big_114.bin"
(3)   60/  20423E :                     FmIns_Bass_big_122:
(3)   61/  20423E :                     		binclude "sound/ins/fm/bin/bass_big_122.bin"
(3)   62/  20425E :                     FmIns_Bass_cave_47:
(3)   63/  20425E :                     		binclude "sound/ins/fm/bin/bass_cave_47.bin"
(3)   64/  20427E :                     FmIns_Bass_club_108:
(3)   65/  20427E :                     		binclude "sound/ins/fm/bin/bass_club_108.bin"
(3)   66/  20429E :                     FmIns_Bass_foot_75:
(3)   67/  20429E :                     		binclude "sound/ins/fm/bin/bass_foot_75.bin"
(3)   68/  2042BE :                     FmIns_Bass_gem_26:
(3)   69/  2042BE :                     		binclude "sound/ins/fm/bin/bass_gem_26.bin"
(3)   70/  2042DE :                     FmIns_Bass_groove_119:
(3)   71/  2042DE :                     		binclude "sound/ins/fm/bin/bass_groove_119.bin"
(3)   72/  2042FE :                     FmIns_Bass_heavy_107:
(3)   73/  2042FE :                     		binclude "sound/ins/fm/bin/bass_heavy_107.bin"
(3)   74/  20431E :                     FmIns_Bass_heavy_118:
(3)   75/  20431E :                     		binclude "sound/ins/fm/bin/bass_heavy_118.bin"
(3)   76/  20433E :                     FmIns_Bass_loud_117:
(3)   77/  20433E :                     		binclude "sound/ins/fm/bin/bass_loud_117.bin"
(3)   78/  20435E :                     FmIns_bass_low_46:
(3)   79/  20435E :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(3)   80/  20437E :                     FmIns_Bass_Groove_1:
(3)   81/  20437E :                     		binclude "sound/ins/fm/bin/bass_groove_1.bin"
(3)   82/  20439E :                     FmIns_bass_low_81:
(3)   83/  20439E :                     		binclude "sound/ins/fm/bin/bass_low_81.bin"
(3)   84/  2043BE :                     FmIns_bass_low_103:
(3)   85/  2043BE :                     		binclude "sound/ins/fm/bin/bass_low_103.bin"
(3)   86/  2043DE :                     FmIns_bass_low_106:
(3)   87/  2043DE :                     		binclude "sound/ins/fm/bin/bass_low_106.bin"
(3)   88/  2043FE :                     FmIns_bass_low_126:
(3)   89/  2043FE :                     		binclude "sound/ins/fm/bin/bass_low_126.bin"
(3)   90/  20441E :                     FmIns_bass_mid_19:
(3)   91/  20441E :                     		binclude "sound/ins/fm/bin/bass_mid_19.bin"
(3)   92/  20443E :                     FmIns_bass_mid_80:
(3)   93/  20443E :                     		binclude "sound/ins/fm/bin/bass_mid_80.bin"
(3)   94/  20445E :                     FmIns_bass_mid_111:
(3)   95/  20445E :                     		binclude "sound/ins/fm/bin/bass_mid_111.bin"
(3)   96/  20447E :                     FmIns_bass_power_123:
(3)   97/  20447E :                     		binclude "sound/ins/fm/bin/bass_power_123.bin"
(3)   98/  20449E :                     FmIns_bass_silent_53:
(3)   99/  20449E :                     		binclude "sound/ins/fm/bin/bass_silent_53.bin"
(3)  100/  2044BE :                     FmIns_bass_slap_10:
(3)  101/  2044BE :                     		binclude "sound/ins/fm/bin/bass_slap_10.bin"
(3)  102/  2044DE :                     FmIns_bass_slap_105:
(3)  103/  2044DE :                     		binclude "sound/ins/fm/bin/bass_slap_105.bin"
(3)  104/  2044FE :                     FmIns_bass_synth_60:
(3)  105/  2044FE :                     		binclude "sound/ins/fm/bin/bass_synth_60.bin"
(3)  106/  20451E :                     FmIns_bass_synth_61:
(3)  107/  20451E :                     		binclude "sound/ins/fm/bin/bass_synth_61.bin"
(3)  108/  20453E :                     FmIns_bass_synth_72:
(3)  109/  20453E :                     		binclude "sound/ins/fm/bin/bass_synth_72.bin"
(3)  110/  20455E :                     FmIns_bass_synth_73:
(3)  111/  20455E :                     		binclude "sound/ins/fm/bin/bass_synth_73.bin"
(3)  112/  20457E :                     FmIns_bass_vlow_74:
(3)  113/  20457E :                     		binclude "sound/ins/fm/bin/bass_vlow_74.bin"
(3)  114/  20459E :                     FmIns_Organ_drawbar:
(3)  115/  20459E :                     		binclude "sound/ins/fm/bin/organ_drawbar.bin"
(3)  116/  2045BE :                     FmIns_Flaute_1:
(3)  117/  2045BE :                     		binclude "sound/ins/fm/bin/flaute_1.bin"
(3)  118/  2045DE :                     FmIns_Flaute_2:
(3)  119/  2045DE :                     		binclude "sound/ins/fm/bin/flaute_2.bin"
(3)  120/  2045FE :                     FmIns_Vibraphone_1:
(3)  121/  2045FE :                     		binclude "sound/ins/fm/bin/vibraphone_1.bin"
(3)  122/  20461E :                     FmIns_Vibraphone_2:
(3)  123/  20461E :                     		binclude "sound/ins/fm/bin/vibraphone_2.bin"
(3)  124/  20463E :                     FmIns_Xylophone:
(3)  125/  20463E :                     		binclude "sound/ins/fm/bin/xylophone2_43.bin"
(3)  126/  20465E :                     FmIns_Bass_low81:
(3)  127/  20465E :                     		binclude "sound/ins/fm/bin/bass_low_46.bin"
(3)  128/  20467E :                     FmIns_Trumpet_low:
(3)  129/  20467E :                     		binclude "sound/ins/fm/bin/trumpet_low.bin"
(3)  130/  20469E :                     FmIns_Trumpet_genie:
(3)  131/  20469E :                     		binclude "sound/ins/fm/bin/trumpet_genie.bin"
(3)  132/  2046BE :                     FmIns_Trumpet_bus:
(3)  133/  2046BE :                     		binclude "sound/ins/fm/bin/trumpet_bus.bin"
(3)  134/  2046DE :                     FmIns_Hats_1:
(3)  135/  2046DE :                     		binclude "sound/ins/fm/bin/hats_96.bin"
(3)  136/  2046FE :                     FmIns_Bell_mid36:
(3)  137/  2046FE :                     		binclude "sound/ins/fm/bin/bell_mid_36.bin"
(3)  138/  20471E :                     FmIns_Bell_62:
(3)  139/  20471E :                     		binclude "sound/ins/fm/bin/bell_62.bin"
(3)  140/  20473E :                     FmIns_Bell_93:
(3)  141/  20473E :                     		binclude "sound/ins/fm/bin/bell_93.bin"
(3)  142/  20475E :                     FmIns_Bell_low13:
(3)  143/  20475E :                     		binclude "sound/ins/fm/bin/bell_low_13.bin"
(3)  144/  20477E :                     
(3)  145/  20477E :                     FmIns_Drum_Kick:
(3)  146/  20477E :                     		binclude "sound/ins/fm/bin/kick_low.bin"
(3)  147/  20479E :                     FmIns_Tick:
(3)  148/  20479E :                     		binclude "sound/ins/fm/bin/tick_44.bin"
(3)  149/  2047BE :                     
(3)  150/  2047BE :                     ; -----------------------------------------------------------
(3)  151/  2047BE :                     ; Special FM3 Instruments
(3)  152/  2047BE :                     ; -----------------------------------------------------------
(3)  153/  2047BE :                     
(3)  154/  2047BE :                     FmSpIns_clack_1:
(3)  155/  2047BE :                     		binclude "sound/ins/fm/bin/fm3_clack_1.bin"
(3)  156/  2047E6 :                     FmSpIns_cowbell_h:
(3)  157/  2047E6 :                     		binclude "sound/ins/fm/bin/fm3_cowbell_h.bin"
(3)  158/  20480E :                     FmSpIns_cowbell_l:
(3)  159/  20480E :                     		binclude "sound/ins/fm/bin/fm3_cowbell_l.bin"
(3)  160/  204836 :                     FmSpIns_hats_hq:
(3)  161/  204836 :                     		binclude "sound/ins/fm/bin/fm3_hats_hq.bin"
(3)  162/  20485E :                     FmSpIns_sfx_alien:
(3)  163/  20485E :                     		binclude "sound/ins/fm/bin/fm3_sfx_alien.bin"
(3)  164/  204886 :                     FmSpIns_sfx_knckbuzz:
(3)  165/  204886 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knckbuzz.bin"
(3)  166/  2048AE :                     FmSpIns_sfx_knock_h:
(3)  167/  2048AE :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_h.bin"
(3)  168/  2048D6 :                     FmSpIns_sfx_knock_l:
(3)  169/  2048D6 :                     		binclude "sound/ins/fm/bin/fm3_sfx_knock_l.bin"
(3)  170/  2048FE :                     FmSpIns_sfx_laser:
(3)  171/  2048FE :                     		binclude "sound/ins/fm/bin/fm3_sfx_laser.bin"
(3)  172/  204926 :                     
(3)  173/  204926 :                     ; -----------------------------------------------------------
(3)  174/  204926 :                     ; FM sound effects
(3)  175/  204926 :                     ; -----------------------------------------------------------
(3)  176/  204926 :                     
(3)  177/  204926 :                     FmIns_sfx_punch:
(3)  178/  204926 :                     		binclude "sound/ins/fm/bin/sfx_punch.bin"
(3)  179/  204946 :                     FmIns_sfx_explode:
(3)  180/  204946 :                     		binclude "sound/ins/fm/bin/sfx_explode.bin"
(3)  181/  204966 :                     FmIns_sfx_slash:
(3)  182/  204966 :                     		binclude "sound/ins/fm/bin/sfx_slash.bin"
(3)  183/  204986 :                     FmIns_sfx_alien1:
(3)  184/  204986 :                     		binclude "sound/ins/fm/bin/sfx_alien_83.bin"
(3)  185/  2049A6 :                     FmIns_sfx_alien2:
(3)  186/  2049A6 :                     		binclude "sound/ins/fm/bin/sfx_alien_84.bin"
(3)  187/  2049C6 :                     
(3)  188/  2049C6 :                     ; ====================================================================
(3)  189/  2049C6 :                     
(3)  190/  2049C6 :                     ; FM3 Special
(3)  191/  2049C6 :                     FmIns_Sp_OpenHat:
(3)  192/  2049C6 :                     		binclude "sound/ins/fm/gsx/fm3_openhat.gsx",$2478,$28
(3)  193/  2049EE :                     FmIns_Sp_ClosedHat:
(3)  194/  2049EE :                     		binclude "sound/ins/fm/gsx/fm3_closedhat.gsx",$2478,$28
(3)  195/  204A16 :                     FmIns_Sp_Cowbell:
(3)  196/  204A16 :                     		binclude "sound/ins/fm/gsx/fm3_cowbell.gsx",$2478,$28
(3)  197/  204A3E :                     FmIns_Drums_Kick1:
(3)  198/  204A3E :                     		binclude "sound/ins/fm/gsx/drum_kick_gem.gsx",$2478,$20
(3)  199/  204A5E :                     FmIns_Piano_Aqua:
(3)  200/  204A5E :                     		binclude "sound/ins/fm/gsx/piano_aqua.gsx",$2478,$20
(3)  201/  204A7E :                     FmIns_HBeat_tom:
(3)  202/  204A7E :                     		binclude "sound/ins/fm/gsx/nadia_tom.gsx",$2478,$20
(3)  203/  204A9E :                     FmIns_Trumpet_1:
(3)  204/  204A9E :                     		binclude "sound/ins/fm/gsx/trumpet_1.gsx",$2478,$20
(3)  205/  204ABE :                     FmIns_Bass_duck:
(3)  206/  204ABE :                     		binclude "sound/ins/fm/gsx/bass_duck.gsx",$2478,$20
(3)  207/  204ADE :                     FmIns_ClosedHat:
(3)  208/  204ADE :                     		binclude "sound/ins/fm/gsx/hats_closed.gsx",$2478,$20
(3)  209/  204AFE :                     FmIns_Trumpet_carnival:
(3)  210/  204AFE :                     		binclude "sound/ins/fm/gsx/OLD_trumpet_carnivl.gsx",$2478,$20
(3)  211/  204B1E :                     FmIns_Bass_club:
(3)  212/  204B1E :                     		binclude "sound/ins/fm/gsx/OLD_bass_club.gsx",$2478,$20
(3)  213/  204B3E :                     FmIns_Bass_groove_2:
(3)  214/  204B3E :                     		binclude "sound/ins/fm/gsx/bass_groove_2.gsx",$2478,$20
(3)  215/  204B5E :                     FmIns_PSynth_plus:
(3)  216/  204B5E :                     		binclude "sound/ins/fm/gsx/psynth_plus.gsx",$2478,$20
(3)  217/  204B7E :                     FmIns_Brass_7:
(3)  218/  204B7E :                     		binclude "sound/ins/fm/gsx/brass_7.gsx",$2478,$20
(3)  219/  204B9E :                     
(3)  220/  204B9E :                     FmIns_sfx_punch_2:
(3)  221/  204B9E :                     		binclude "sound/ins/fm/gsx/fmsfx_punch.gsx",$2478,$20
(3)  222/  204BBE :                     FmIns_sfx_smash:
(3)  223/  204BBE :                     		binclude "sound/ins/fm/gsx/fmsfx_smash.gsx",$2478,$20
(3)  224/  204BDE :                     
(3)  225/  204BDE :                     FmIns_bass_italo:
(3)  226/  204BDE :                     		binclude "sound/ins/fm/gsx/bass_italo.gsx",$2478,$20
(3)  227/  204BFE :                     FmIns_Guitar_bball:
(3)  228/  204BFE :                     		binclude "sound/ins/fm/gsx/guitar_bball.gsx",$2478,$20
(3)  229/  204C1E :                     
(3)  230/  204C1E :                     ; ===========================================================================
(3)  231/  204C1E :                     ; -------------------------------------------------------------------
(3)  232/  204C1E :                     ; GEMA/Nikona DAC samples
(3)  233/  204C1E :                     ;
(3)  234/  204C1E :                     ; 16000hz base
(3)  235/  204C1E :                     ; -------------------------------------------------------------------
(3)  236/  204C1E :                     
(3)  237/  204C1E :                     		align $800
(3)  238/  205000 :                     		;gSmplData Label,"file_path",loop_start
(3)  239/  205000 : (MACRO)              		gSmplData DacIns_clap,"sound/ins/smpl/clap.wav",0
(3)  239/  205000 :                                     align 4
(3)  239/  205000 : =$205000             DACINS_CLAP    label *
(3)  239/  205000 : 7409 00                     dc.b ((DACINS_CLAP_e-DACINS_CLAP_s)&$FF),(((DACINS_CLAP_e-DACINS_CLAP_s)>>8)&$FF),(((DACINS_CLAP_e-DACINS_CLAP_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  239/  205003 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  239/  205006 :                     DACINS_CLAP_s:
(3)  239/  205006 :                             binclude "sound/ins/smpl/clap.wav",$2C       ; dc.b (data)
(3)  239/  20597A :                     DACINS_CLAP_e:
(3)  239/  20597A :                                     align 4
(3)  240/  20597C : (MACRO)              		gSmplData DacIns_conga,"sound/ins/smpl/conga.wav",0
(3)  240/  20597C :                                     align 4
(3)  240/  20597C : =$20597C             DACINS_CONGA    label *
(3)  240/  20597C : D40A 00                     dc.b ((DACINS_CONGA_e-DACINS_CONGA_s)&$FF),(((DACINS_CONGA_e-DACINS_CONGA_s)>>8)&$FF),(((DACINS_CONGA_e-DACINS_CONGA_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  240/  20597F : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  240/  205982 :                     DACINS_CONGA_s:
(3)  240/  205982 :                             binclude "sound/ins/smpl/conga.wav",$2C       ; dc.b (data)
(3)  240/  206456 :                     DACINS_CONGA_e:
(3)  240/  206456 :                                     align 4
(3)  241/  206458 : (MACRO)              		gSmplData DacIns_conga_low,"sound/ins/smpl/conga_low.wav",0
(3)  241/  206458 :                                     align 4
(3)  241/  206458 : =$206458             DACINS_CONGA_LOW    label *
(3)  241/  206458 : D40E 00                     dc.b ((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)&$FF),(((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)>>8)&$FF),(((DACINS_CONGA_LOW_e-DACINS_CONGA_LOW_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  241/  20645B : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  241/  20645E :                     DACINS_CONGA_LOW_s:
(3)  241/  20645E :                             binclude "sound/ins/smpl/conga_low.wav",$2C       ; dc.b (data)
(3)  241/  207332 :                     DACINS_CONGA_LOW_e:
(3)  241/  207332 :                                     align 4
(3)  242/  207334 : (MACRO)              		gSmplData DacIns_Kick_Strong,"sound/ins/smpl/kick_strong.wav",0
(3)  242/  207334 :                                     align 4
(3)  242/  207334 : =$207334             DACINS_KICK_STRONG    label *
(3)  242/  207334 : C41A 00                     dc.b ((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)&$FF),(((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)>>8)&$FF),(((DACINS_KICK_STRONG_e-DACINS_KICK_STRONG_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  242/  207337 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  242/  20733A :                     DACINS_KICK_STRONG_s:
(3)  242/  20733A :                             binclude "sound/ins/smpl/kick_strong.wav",$2C       ; dc.b (data)
(3)  242/  208DFE :                     DACINS_KICK_STRONG_e:
(3)  242/  208DFE :                                     align 4
(3)  243/  208E00 : (MACRO)              		gSmplData DacIns_Snare,"sound/ins/smpl/snare.wav",0
(3)  243/  208E00 :                                     align 4
(3)  243/  208E00 : =$208E00             DACINS_SNARE    label *
(3)  243/  208E00 : F40E 00                     dc.b ((DACINS_SNARE_e-DACINS_SNARE_s)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>8)&$FF),(((DACINS_SNARE_e-DACINS_SNARE_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  243/  208E03 : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  243/  208E06 :                     DACINS_SNARE_s:
(3)  243/  208E06 :                             binclude "sound/ins/smpl/snare.wav",$2C       ; dc.b (data)
(3)  243/  209CFA :                     DACINS_SNARE_e:
(3)  243/  209CFA :                                     align 4
(3)  244/  209CFC : (MACRO)              		gSmplData DacIns_Snare_Rap,"sound/ins/smpl/snare_rap.wav",0
(3)  244/  209CFC :                                     align 4
(3)  244/  209CFC : =$209CFC             DACINS_SNARE_RAP    label *
(3)  244/  209CFC : A40A 00                     dc.b ((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)&$FF),(((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)>>8)&$FF),(((DACINS_SNARE_RAP_e-DACINS_SNARE_RAP_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  244/  209CFF : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  244/  209D02 :                     DACINS_SNARE_RAP_s:
(3)  244/  209D02 :                             binclude "sound/ins/smpl/snare_rap.wav",$2C       ; dc.b (data)
(3)  244/  20A7A6 :                     DACINS_SNARE_RAP_e:
(3)  244/  20A7A6 :                                     align 4
(3)  245/  20A7A8 : (MACRO)              		gSmplData DacIns_TEST,"sound/ins/smpl/test.wav",0
(3)  245/  20A7A8 :                                     align 4
(3)  245/  20A7A8 : =$20A7A8             DACINS_TEST    label *
(3)  245/  20A7A8 : 34D5 01                     dc.b ((DACINS_TEST_e-DACINS_TEST_s)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>8)&$FF),(((DACINS_TEST_e-DACINS_TEST_s)>>16)&$FF)       ; dc.b 1,2,3 Length
(3)  245/  20A7AB : 0000 00                     dc.b ((0)&$FF),(((0)>>8)&$FF),(((0)>>16)&$FF)                                  ; dc.b 4,5,6 Start 0
(3)  245/  20A7AE :                     DACINS_TEST_s:
(3)  245/  20A7AE :                             binclude "sound/ins/smpl/test.wav",$2C       ; dc.b (data)
(3)  245/  227CE2 :                     DACINS_TEST_e:
(3)  245/  227CE2 :                                     align 4
(3)  246/  227CE4 :                     
(3)  247/  227CE4 :                     ; 		gSmplData DacIns_Kick_2,"sound/ins/smpl/kick_2.wav",0
(3)  248/  227CE4 :                     ; 		gSmplData DacIns_Snare_2,"sound/ins/smpl/snare_2.wav",0
(3)  249/  227CE4 :                     ; 		gSmplData DacIns_Timpani,"sound/ins/smpl/timpani.wav",0
(3)  250/  227CE4 :                     ; 		gSmplData DacIns_wegot_kick,"sound/ins/smpl/wegot_kick.wav",0
(3)  251/  227CE4 :                     ; 		gSmplData DacIns_wegot_crash,"sound/ins/smpl/wegot_crash.wav",0
(3)  252/  227CE4 :                     
(2)   23/  227CE4 : (MACRO)              		binclude_dma ASCII_FONT,"game/data/md/tilesets/font_8/art.bin"
(2)   23/  227CE4 :                             ; 32X: Temporally show ROM position
(2)   23/  227CE4 :                     
(2)   23/  227CE4 :                                     align 2
(2)   23/  227CE4 : =$227CE4             ASCII_FONT        label *
(2)   23/  227CE4 :                                     binclude "game/data/md/tilesets/font_8/art.bin"
(2)   23/  2288E4 :                                     align 2
(2)   23/  2288E4 :                             ; 32X: Return to last phase
(2)   24/  2288E4 : (MACRO)              		binclude_dma ASCII_FONT_W,"game/data/md/tilesets/font_16/art.bin"
(2)   24/  2288E4 :                             ; 32X: Temporally show ROM position
(2)   24/  2288E4 :                     
(2)   24/  2288E4 :                                     align 2
(2)   24/  2288E4 : =$2288E4             ASCII_FONT_W        label *
(2)   24/  2288E4 :                                     binclude "game/data/md/tilesets/font_16/art.bin"
(2)   24/  22A0E4 :                                     align 2
(2)   24/  22A0E4 :                             ; 32X: Return to last phase
(2)   25/  22A0E4 : (MACRO)              		binclude_dma Art_FairyDodo,"game/data/md/sprites/dodo/art.bin"
(2)   25/  22A0E4 :                             ; 32X: Temporally show ROM position
(2)   25/  22A0E4 :                     
(2)   25/  22A0E4 :                                     align 2
(2)   25/  22A0E4 : =$22A0E4             ART_FAIRYDODO        label *
(2)   25/  22A0E4 :                                     binclude "game/data/md/sprites/dodo/art.bin"
(2)   25/  22A6E4 :                                     align 2
(2)   25/  22A6E4 :                             ; 32X: Return to last phase
(2)   26/  22A6E4 : (MACRO)              		binclude_dma Art_FairyMimi,"game/data/md/sprites/mimi/art.bin"
(2)   26/  22A6E4 :                             ; 32X: Temporally show ROM position
(2)   26/  22A6E4 :                     
(2)   26/  22A6E4 :                                     align 2
(2)   26/  22A6E4 : =$22A6E4             ART_FAIRYMIMI        label *
(2)   26/  22A6E4 :                                     binclude "game/data/md/sprites/mimi/art.bin"
(2)   26/  22ACE4 :                                     align 2
(2)   26/  22ACE4 :                             ; 32X: Return to last phase
(2)   27/  22ACE4 : (MACRO)              		binclude_dma Art_FairyFifi,"game/data/md/sprites/fifi/art.bin"
(2)   27/  22ACE4 :                             ; 32X: Temporally show ROM position
(2)   27/  22ACE4 :                     
(2)   27/  22ACE4 :                                     align 2
(2)   27/  22ACE4 : =$22ACE4             ART_FAIRYFIFI        label *
(2)   27/  22ACE4 :                                     binclude "game/data/md/sprites/fifi/art.bin"
(2)   27/  22B264 :                                     align 2
(2)   27/  22B264 :                             ; 32X: Return to last phase
(2)   28/  22B264 :                     ; 		binclude_dma ART_TESTBG,"game/data/md/maps/test/art.bin"
(2)   29/  22B264 :                     ; PAL_TESTBG:	binclude "game/data/md/maps/test/pal.bin"
(2)   30/  22B264 :                     ; 		align 2
(2)   31/  22B264 :                     ; MAP_TESTBG:	binclude "game/data/md/maps/test/map.bin"
(2)   32/  22B264 :                     ; 		align 2
(2)   33/  22B264 :                     objPal_Dodo:	binclude "game/data/md/sprites/dodo/pal.bin"
(2)   34/  22B284 :                     		align 2
(2)   35/  22B284 :                     objMap_Dodo:	binclude "game/data/md/sprites/dodo/map.bin"
(2)   36/  22B2A8 :                     		align 2
(2)   37/  22B2A8 :                     objMap_Mimi:	binclude "game/data/md/sprites/mimi/map.bin"
(2)   38/  22B2CC :                     		align 2
(2)   39/  22B2CC :                     objMap_Fifi:	binclude "game/data/md/sprites/fifi/map.bin"
(2)   40/  22B308 :                     		align 2
(2)   41/  22B308 :                     
(1)   27/  22B308 : (MACRO)              	dend_bank DATA_BANK0_e
(1)   27/  22B308 : =$2B308              GLBL_MDATA_RP := *-GLBL_MDATA_ST        ; Get used size to report
(1)   27/  22B308 :                     
(1)   27/  22B308 :                             ; Set 32X bank end
(1)   27/   63308 :                                     dephase                 ; Dephase WRAM
(1)   27/   63308 : =$63308              mlastpos := *   ; <-- CD/CD32X ONLY
(1)   27/   63308 : =$63800              mpadlbl := (mlastpos&$FFF800)+$800      ; Fill sectors
(1)   27/   63308 :  (MACRO-2)                           rompad mpadlbl
(1)   27/   63308 : =$4F8                .this_sz := MPADLBL - *
(1)   27/   63308 : 0000 0000 0000                              dc.b [.this_sz]0
            6330E : 0000 0000 0000 
            63314 : 0000 0000 0000 
            6331A : 0000 0000 0000 
            63320 : 0000 0000 0000 
            63326 : 0000 0000 0000 
            6332C : 0000 0000 0000 
            63332 : 0000 0000 0000 
            63338 : 0000 0000 0000 
            6333E : 0000 0000 0000 
            63344 : 0000 0000 0000 
            6334A : 0000 0000 0000 
            63350 : 0000 0000 0000 
            63356 : 0000 0000 0000 
            6335C : 0000 0000 0000 
            63362 : 0000 0000 0000 
            63368 : 0000 0000 0000 
            6336E : 0000 0000 0000 
            63374 : 0000 0000 0000 
            6337A : 0000 0000 0000 
            63380 : 0000 0000 0000 
            63386 : 0000 0000 0000 
            6338C : 0000 0000 0000 
            63392 : 0000 0000 0000 
            63398 : 0000 0000 0000 
            6339E : 0000 0000 0000 
            633A4 : 0000 0000 0000 
            633AA : 0000 0000 0000 
            633B0 : 0000 0000 0000 
            633B6 : 0000 0000 0000 
            633BC : 0000 0000 0000 
            633C2 : 0000 0000 0000 
            633C8 : 0000 0000 0000 
            633CE : 0000 0000 0000 
            633D4 : 0000 0000 0000 
            633DA : 0000 0000 0000 
            633E0 : 0000 0000 0000 
            633E6 : 0000 0000 0000 
            633EC : 0000 0000 0000 
            633F2 : 0000 0000 0000 
            633F8 : 0000 0000 0000 
            633FE : 0000 0000 0000 
            63404 : 0000 0000 0000 
            6340A : 0000 0000 0000 
            63410 : 0000 0000 0000 
            63416 : 0000 0000 0000 
            6341C : 0000 0000 0000 
            63422 : 0000 0000 0000 
            63428 : 0000 0000 0000 
            6342E : 0000 0000 0000 
            63434 : 0000 0000 0000 
            6343A : 0000 0000 0000 
            63440 : 0000 0000 0000 
            63446 : 0000 0000 0000 
            6344C : 0000 0000 0000 
            63452 : 0000 0000 0000 
            63458 : 0000 0000 0000 
            6345E : 0000 0000 0000 
            63464 : 0000 0000 0000 
            6346A : 0000 0000 0000 
            63470 : 0000 0000 0000 
            63476 : 0000 0000 0000 
            6347C : 0000 0000 0000 
            63482 : 0000 0000 0000 
            63488 : 0000 0000 0000 
            6348E : 0000 0000 0000 
            63494 : 0000 0000 0000 
            6349A : 0000 0000 0000 
            634A0 : 0000 0000 0000 
            634A6 : 0000 0000 0000 
            634AC : 0000 0000 0000 
            634B2 : 0000 0000 0000 
            634B8 : 0000 0000 0000 
            634BE : 0000 0000 0000 
            634C4 : 0000 0000 0000 
            634CA : 0000 0000 0000 
            634D0 : 0000 0000 0000 
            634D6 : 0000 0000 0000 
            634DC : 0000 0000 0000 
            634E2 : 0000 0000 0000 
            634E8 : 0000 0000 0000 
            634EE : 0000 0000 0000 
            634F4 : 0000 0000 0000 
            634FA : 0000 0000 0000 
            63500 : 0000 0000 0000 
            63506 : 0000 0000 0000 
            6350C : 0000 0000 0000 
            63512 : 0000 0000 0000 
            63518 : 0000 0000 0000 
            6351E : 0000 0000 0000 
            63524 : 0000 0000 0000 
            6352A : 0000 0000 0000 
            63530 : 0000 0000 0000 
            63536 : 0000 0000 0000 
            6353C : 0000 0000 0000 
            63542 : 0000 0000 0000 
            63548 : 0000 0000 0000 
            6354E : 0000 0000 0000 
            63554 : 0000 0000 0000 
            6355A : 0000 0000 0000 
            63560 : 0000 0000 0000 
            63566 : 0000 0000 0000 
            6356C : 0000 0000 0000 
            63572 : 0000 0000 0000 
            63578 : 0000 0000 0000 
            6357E : 0000 0000 0000 
            63584 : 0000 0000 0000 
            6358A : 0000 0000 0000 
            63590 : 0000 0000 0000 
            63596 : 0000 0000 0000 
            6359C : 0000 0000 0000 
            635A2 : 0000 0000 0000 
            635A8 : 0000 0000 0000 
            635AE : 0000 0000 0000 
            635B4 : 0000 0000 0000 
            635BA : 0000 0000 0000 
            635C0 : 0000 0000 0000 
            635C6 : 0000 0000 0000 
            635CC : 0000 0000 0000 
            635D2 : 0000 0000 0000 
            635D8 : 0000 0000 0000 
            635DE : 0000 0000 0000 
            635E4 : 0000 0000 0000 
            635EA : 0000 0000 0000 
            635F0 : 0000 0000 0000 
            635F6 : 0000 0000 0000 
            635FC : 0000 0000 0000 
            63602 : 0000 0000 0000 
            63608 : 0000 0000 0000 
            6360E : 0000 0000 0000 
            63614 : 0000 0000 0000 
            6361A : 0000 0000 0000 
            63620 : 0000 0000 0000 
            63626 : 0000 0000 0000 
            6362C : 0000 0000 0000 
            63632 : 0000 0000 0000 
            63638 : 0000 0000 0000 
            6363E : 0000 0000 0000 
            63644 : 0000 0000 0000 
            6364A : 0000 0000 0000 
            63650 : 0000 0000 0000 
            63656 : 0000 0000 0000 
            6365C : 0000 0000 0000 
            63662 : 0000 0000 0000 
            63668 : 0000 0000 0000 
            6366E : 0000 0000 0000 
            63674 : 0000 0000 0000 
            6367A : 0000 0000 0000 
            63680 : 0000 0000 0000 
            63686 : 0000 0000 0000 
            6368C : 0000 0000 0000 
            63692 : 0000 0000 0000 
            63698 : 0000 0000 0000 
            6369E : 0000 0000 0000 
            636A4 : 0000 0000 0000 
            636AA : 0000 0000 0000 
            636B0 : 0000 0000 0000 
            636B6 : 0000 0000 0000 
            636BC : 0000 0000 0000 
            636C2 : 0000 0000 0000 
            636C8 : 0000 0000 0000 
            636CE : 0000 0000 0000 
            636D4 : 0000 0000 0000 
            636DA : 0000 0000 0000 
            636E0 : 0000 0000 0000 
            636E6 : 0000 0000 0000 
            636EC : 0000 0000 0000 
            636F2 : 0000 0000 0000 
            636F8 : 0000 0000 0000 
            636FE : 0000 0000 0000 
            63704 : 0000 0000 0000 
            6370A : 0000 0000 0000 
            63710 : 0000 0000 0000 
            63716 : 0000 0000 0000 
            6371C : 0000 0000 0000 
            63722 : 0000 0000 0000 
            63728 : 0000 0000 0000 
            6372E : 0000 0000 0000 
            63734 : 0000 0000 0000 
            6373A : 0000 0000 0000 
            63740 : 0000 0000 0000 
            63746 : 0000 0000 0000 
            6374C : 0000 0000 0000 
            63752 : 0000 0000 0000 
            63758 : 0000 0000 0000 
            6375E : 0000 0000 0000 
            63764 : 0000 0000 0000 
            6376A : 0000 0000 0000 
            63770 : 0000 0000 0000 
            63776 : 0000 0000 0000 
            6377C : 0000 0000 0000 
            63782 : 0000 0000 0000 
            63788 : 0000 0000 0000 
            6378E : 0000 0000 0000 
            63794 : 0000 0000 0000 
            6379A : 0000 0000 0000 
            637A0 : 0000 0000 0000 
            637A6 : 0000 0000 0000 
            637AC : 0000 0000 0000 
            637B2 : 0000 0000 0000 
            637B8 : 0000 0000 0000 
            637BE : 0000 0000 0000 
            637C4 : 0000 0000 0000 
            637CA : 0000 0000 0000 
            637D0 : 0000 0000 0000 
            637D6 : 0000 0000 0000 
            637DC : 0000 0000 0000 
            637E2 : 0000 0000 0000 
            637E8 : 0000 0000 0000 
            637EE : 0000 0000 0000 
            637F4 : 0000 0000 0000 
            637FA : 0000 0000 0000    
(1)   27/   63800 : =$63800              DATA_BANK0_E label *  ; <-- CD/CD32X ONLY
(1)   27/   63800 :                     
(1)   28/   63800 :                     
     384/   63800 :                     
     385/   63800 :                     ; ====================================================================
     386/   63800 :                     ; ----------------------------------------------------------------
     387/   63800 :                     ; Cartridge-ONLY Section, direct label access
     388/   63800 :                     ;
     389/   63800 :                     ; For Genesis, 32X Cartridge and Pico ONLY.
     390/   63800 :                     ; ----------------------------------------------------------------
     391/   63800 :                     
     424/   63800 :                     
     425/   63800 :                     ; ====================================================================
     426/   63800 :                     ; ------------------------------------------------
     427/   63800 :                     ; End
     428/   63800 :                     ; ------------------------------------------------
     429/   63800 :                     
     430/   63800 :                     ROM_END:
     431/   63800 : 00                  		dc.b 0
     432/   63801 :                     		align $8000
     433/   68000 :                     
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 2 - 01/04/2025 05:20:09 AM


  Symbol Table (* = unused):
  --------------------------

 ADAPTER :                        0 - | *ADEN :                           1 - |
 ALV :                           24 - | *ARCHITECTURE :      "x86_64-Linux" - |
 ARP :                           2C - |  ART_FAIRYDODO :             22A0E4 C |
 ART_FAIRYFIFI :             22ACE4 C |  ART_FAIRYMIMI :             22A6E4 C |
 ASCII_FONT :                227CE4 C |  ASCII_FONT_W :              2288E4 C |
 ATK :                            8 - | *ATTRH :                        800 - |
*ATTRPRIO :                    8000 - | *ATTRV :                       1000 - |
*BANKSET :                        4 - | *BIGENDIAN :                      0 - |
*BITATTRH :                       3 - | *BITATTRPRIO :                    7 - |
*BITATTRV :                       4 - | *BITCLICKL :                      0 - |
*BITCLICKM :                      2 - | *BITCLICKR :                      1 - |
*BITCLICKS :                      3 - |  BITDISPENBL :                    6 - |
 BITDMA :                         1 - |  BITDMAENBL :                     4 - |
*BITFIFOE :                       9 - | *BITFIFOF :                       8 - |
*BITHBLK :                        2 - | *BITHINTENBL :                    4 - |
*BITHVSTOP :                      1 - | *BITJOYA :                        6 - |
*BITJOYB :                        4 - | *BITJOYC :                        5 - |
*BITJOYDOWN :                     1 - | *BITJOYLEFT :                     2 - |
*BITJOYMODE :                     B - | *BITJOYPEN :                      7 - |
*BITJOYRED :                      4 - | *BITJOYRIGHT :                    3 - |
 BITJOYSTART :                    7 - | *BITJOYUP :                       0 - |
*BITJOYX :                        A - | *BITJOYY :                        9 - |
*BITJOYZ :                        8 - |  BITMAPMD :                       1 - |
*BITODD :                         4 - | *BITPAL :                         0 - |
*BITSPRCOL :                      5 - | *BITSPROVR :                      6 - |
*BITV30 :                         3 - |  BITVBLK :                        3 - |
*BITVINT :                        7 - | *BITVINTENBL :                    5 - |
*BITWRAMMODE :                    2 - | *BRANCHEXT :                      0 - |
*BRMDEL :                         5 - | *BRMDIR :                         7 - |
*BRMFORMAT :                      6 - |  BRMINIT :                        0 - |
 BRMREAD :                        3 - |  BRMSERCH :                       2 - |
 BRMSTAT :                        1 - | *BRMVERIFY :                      8 - |
 BRMWRITE :                       4 - | *CACHE_MASTER :             6001E18 C |
*CACHE_MASTER_E :           6001E18 C |  CACHE_SLAVE :              6001E18 C |
 CACHE_SLAVE_E :            60024AC C |  CACHSLV_CURRPAGE :             690 C |
 CACH_BKUP_LB :                 498 C |  CACH_BKUP_LPZ :                4C4 C |
 CACH_BKUP_S :                  4C4 C |  CACH_BKUP_SPZ :                4E0 C |
 CACH_DDA_LAST :                410 C |  CACH_DDA_SRC :                 420 C |
 CACH_DDA_SRC_L :               440 C |  CACH_DDA_SRC_R :               450 C |
 CACH_DDA_TOP :                 400 C |  CACH_LNDRW_L :                 460 C |
 CACH_LNDRW_S :                 498 C | *CASESENSITIVE :                  0 - |
*CBTCHKDISC :                     4 - | *CBTCHKSTAT :                     5 - |
*CBTINIT :                        0 - | *CBTINT :                         1 - |
*CBTIPDISC :                      6 - | *CBTIPSTAT :                      7 - |
*CBTOPENDISC :                    2 - | *CBTOPENSTAT :                    3 - |
*CBTSPDISC :                      8 - | *CBTSPSTAT :                      9 - |
*CDBCHK :                        80 - | *CDBPAUSE :                      84 - |
*CDBSTAT :                       81 - | *CDBTOCREAD :                    83 - |
*CDBTOCWRITE :                   82 - |  CDCACK :                        8D - |
 CDCREAD :                       8B - | *CDCSETMODE :                    96 - |
*CDCSTART :                      87 - | *CDCSTARTP :                     88 - |
 CDCSTAT :                       8A - |  CDCSTOP :                       89 - |
 CDCTRN :                        8C - |  CDPCM_CBLK :                    1A - |
 CDPCM_CLEN :                     E - |  CDPCM_COUT :                    1C - |
 CDPCM_CREAD :                   12 - |  CDPCM_ENV :                     1F - |
 CDPCM_FLAGS :                    1 - |  CDPCM_LEN :                     20 - |
 CDPCM_LENGTH :                   6 - |  CDPCM_LOOP :                     A - |
 CDPCM_PAN :                     1E - |  CDPCM_PITCH :                   18 - |
 CDPCM_START :                    2 - |  CDPCM_STATUS :                   0 - |
*CDPCM_STRMHALF :                16 - |  CDRAMDST :                    1F82 C |
 CDRAMLEN :                    1F87 C |  CDRAMSRC :                    1F84 C |
 CDRAMSRCB :                   1F86 C |  CDREGION :                       1 - |
 CDSTAMP_CX :                     2 - |  CDSTAMP_CY :                     4 - |
 CDSTAMP_FLAGS :                  0 - |  CDSTAMP_HGHT :                   C - |
 CDSTAMP_LEN :                   20 - |  CDSTAMP_MAP :                    1 - |
 CDSTAMP_ROT :                   10 - |  CDSTAMP_SCALE :                  E - |
 CDSTAMP_WDTH :                   A - |  CDSTAMP_X :                      6 - |
 CDSTAMP_Y :                      8 - |  CDSUB_PCM_INIT :              6C7E C |
 CDSUB_PCM_INIT.CLR_PWM :      6C98 C |  CDSUB_PCM_INIT.WR_END :       6CA6 C |
 CDSUB_PCM_PROCESS :           6CD8 C |  CDSUB_PCM_PROCESS.EXIT_NOW :  6D6E C |
 CDSUB_PCM_PROCESS.GET_TABLE : 6D0A C |
 CDSUB_PCM_PROCESS.NEXT_PACKET :                                       6D3A C |
*CDSUB_PCM_PROCESS.NOT_NOW :   6D7A C |  CDSUB_PCM_PROCESS.NO_REQ :    6D08 C |
*CDSUB_PCM_PROCESS.TRNSFR_MODE :                                       6D14 C |
 CDSUB_PCM_PROCESS.WAIT_MAIN : 6D5C C |
 CDSUB_PCM_PROCESS.WAIT_START :                                        6D24 C |
 CDSUB_PCM_READTABLE :         6D8E C |
 CDSUB_PCM_READTABLE.CDCOM_KEYCUT :                                    6EA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYOFF :                                    6EA2 C |
 CDSUB_PCM_READTABLE.CDCOM_KEYON :                                     6DE0 C |
 CDSUB_PCM_READTABLE.CONT_TLOOP :                                      6E8E C |
 CDSUB_PCM_READTABLE.GET_CHNLSET :                                     6EFA C |
 CDSUB_PCM_READTABLE.GET_TBL : 6DA4 C |  CDSUB_PCM_READTABLE.NO_COMM : 6DD0 C |
 CDSUB_PCM_READTABLE.NO_KEYCUT :                                       6DC8 C |
 CDSUB_PCM_READTABLE.NO_KEYOFF :                                       6DBE C |
 CDSUB_PCM_READTABLE.NO_UPDSET :                                       6DB4 C |
 CDSUB_PCM_READTABLE.SMALL_SAMPL :                                     6E74 C |
 CDSUB_PCM_READTABLE.UPDATE_SET :                                      6F1C C |
 CDSUB_PCM_STREAM :            6F5A C |  CDSUB_PCM_STREAM.END_POINT :  7034 C |
 CDSUB_PCM_STREAM.LAST_BYTES : 7046 C |  CDSUB_PCM_STREAM.LOOP_POINT : 7012 C |
 CDSUB_PCM_STREAM.MAKE_BLOCK : 6FEC C |  CDSUB_PCM_STREAM.MID_BLOCKS : 6F9E C |
 CDSUB_PCM_STREAM.NEXT_ONE :   6FD0 C |  CDSUB_PCM_STREAM.NOT_LAST :   6FB6 C |
 CDSUB_PCM_STREAM.NO_STRM :    6FDC C |
 CDSUB_PCM_STREAM.PICK_STREAM :                                        6F6E C |
 CDSUB_PCM_STREAM.STRLEN_IT :  7026 C |  CDSUB_PCM_STREAM.WAVE_LIST :  704E C |
 CDSUB_PCM_WAIT :              6D7C C |  CDSUB_SINEWAVE :              6B30 C |
 CDSUB_SINEWAVE.LOC_7EFA :     6B40 C |  CDSUB_SINEWAVE.LOC_7F0C :     6B52 C |
 CDSUB_SINEWAVE.SINE_DATA :    6B58 C |  CDSUB_SINEWAVE_COS :          6B2C C |
 CDSUB_STAMPDEFAULTS :         6C64 C |  CDSUB_STAMPRENDER :           65C6 C |
 CDSUB_STAMPRENDER.CLEAR_FRAME :                                       6AC8 C |
 CDSUB_STAMPRENDER.DOTC_0 :    6AF6 C |  CDSUB_STAMPRENDER.DOT_0 :     6A72 C |
 CDSUB_STAMPRENDER.EXIT_LAST : 66D4 C |
 CDSUB_STAMPRENDER.EXIT_RENDER :                                       6676 C |
 CDSUB_STAMPRENDER.FLIP_TURN : 662E C |  CDSUB_STAMPRENDER.INVALID :   692E C |
 CDSUB_STAMPRENDER.LOOP_LIST : 6688 C |  CDSUB_STAMPRENDER.MAKE_LIST : 667A C |
 CDSUB_STAMPRENDER.MAKE_STAMP :                                        66A0 C |
 CDSUB_STAMPRENDER.MAKE_TRACE :                                        67A4 C |
 CDSUB_STAMPRENDER.MK_VARS :   6934 C |  CDSUB_STAMPRENDER.NEXT_LINE : 684A C |
 CDSUB_STAMPRENDER.NO_BREAK :  65FA C |  CDSUB_STAMPRENDER.NO_STAMP :  6696 C |
 CDSUB_STAMPRENDER.NO_XL :     6828 C |  CDSUB_STAMPRENDER.NO_YL :     6830 C |
 CDSUB_STAMPRENDER.PROCESS_TRACE :                                     6A0A C |
 CDSUB_STAMPRENDER.RESET_OUT : 66DE C |  CDSUB_STAMPRENDER.RETRY :     66A4 C |
 CDSUB_STAMPRENDER.RETURN_RET :                                        6658 C |
 CDSUB_STAMPRENDER.SPLUS :     689C C |  CDSUB_STAMPRENDER.SPLUSV :    67F4 C |
 CDSUB_STAMPRENDER.TRACE_BLANK :                                       66D6 C |
 CDSUB_STAMPRENDER.WAIT_DONE : 65E4 C |  CDSUB_STAMPRENDER.WAIT_RET :  65EE C |
 CDSUB_STAMPRENDER.WAIT_RETE : 666C C |  CDSUB_STAMPRENDER.XL_P :      6906 C |
 CDSUB_STAMPRENDER.XR_P :      6912 C |  CDSUB_STAMPRENDER.YL_P :      690C C |
 CDSUB_STAMPRENDER.YR_P :      6918 C |  CDSUB_STAMPRESETVCELL :       6C58 C |
 CHIP_ENV :                    1295 C |  CHIP_ENV.ATKEND :             131B C |
*CHIP_ENV.ATKZERO :            131E C |  CHIP_ENV.CHK2 :               1324 C |
 CHIP_ENV.CHK4 :               1359 C |  CHIP_ENV.CKOF :               12BC C |
 CHIP_ENV.CKON :               12CF C | *CHIP_ENV.DECTMR :             1328 C |
 CHIP_ENV.DKADD :              1342 C |  CHIP_ENV.DKSAV :              134A C |
 CHIP_ENV.DKYEND :             134F C |  CHIP_ENV.DO_NFREQ :           13AE C |
 CHIP_ENV.ENVPROC :            12ED C |  CHIP_ENV.KILLENV :            136F C |
*CHIP_ENV.NBLOCK :             12ED C |  CHIP_ENV.NORMAL :             13A9 C |
 CHIP_ENV.NOUPD :              13EF C |  CHIP_ENV.NSKIP :              12E4 C |
 CHIP_ENV.SILNC_3 :            13A5 C |  CHIP_ENV.VEDLP :              1377 C |
 CHIP_ENV.VLMUCH :             13DB C |  CHIP_ENV.VLOOP :              12A4 C |
 CHIP_ENV.VONLY :              13D1 C |  CHNL_CHIP :                      1 - |
 CHNL_EFFARG :                    6 - |  CHNL_EFFID :                     5 - |
 CHNL_FLAGS :                     0 - |  CHNL_INS :                       3 - |
 CHNL_NOTE :                      2 - |  CHNL_TYPE :                      7 - |
 CHNL_VOL :                       4 - | *CLICKL :                         2 - |
*CLICKM :                         4 - | *CLICKR :                         1 - |
*CLICKS :                         8 - |  CMDINTCLR :                     1A - |
 CMDIRQ_ON :                      2 - |  COM :                            0 - |
 COMM0 :                         20 - |  COMM1 :                         21 - |
*COMM10 :                        2A - | *COMM11 :                        2B - |
 COMM12 :                        2C - | *COMM13 :                        2D - |
 COMM14 :                        2E - | *COMM15 :                        2F - |
 COMM2 :                         22 - | *COMM3 :                         23 - |
 COMM4 :                         24 - | *COMM5 :                         25 - |
*COMM6 :                         26 - | *COMM7 :                         27 - |
 COMM8 :                         28 - | *COMM9 :                         29 - |
 COMMZFIFO :                   1F60 C |  COMMZREAD :                     2E C |
 COMMZROMBLK :                 1F81 C |  COMMZWRITE :                  1F80 C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CONTROLLER_1 :    FFFFFFFFFFFFEA78 - | *CONTROLLER_2 :    FFFFFFFFFFFFEA88 - |
*CS0 :                            0 - |  CS1 :                      2000000 - |
 CS2 :                      4000000 - |  CS3 :                      6000000 - |
 CTREG :                          F - |  CURRTICKBITS :                1CF9 C |
*CUSTOM :                         0 - |  CYCLE :                         32 - |
 DACINS_CLAP :               205000 C |  DACINS_CONGA :              20597C C |
 DACINS_CONGA_LOW :          206458 C |  DACINS_KICK_STRONG :        207334 C |
 DACINS_SNARE :              208E00 C | *DACINS_SNARE_RAP :          209CFC C |
 DACINS_TEST :               20A7A8 C |  DAC_FILL :                      20 C |
 DAC_ME :                         8 C |  DAC_OFF :                     142A C |
 DAC_ON :                      1415 C |  DAC_PLAY :                    143F C |
 DAC_REFILL :                  1473 C |  DAC_REFILL.DACFILL_END :      1532 C |
 DAC_REFILL.DACFILL_LOOP :     14EB C |  DAC_REFILL.DACFILL_RET :      1535 C |
 DAC_REFILL.DAC_OVER :         14C1 C |  DATA_BANK0 :                 38000 C |
 DATA_BANK0_E :               63800 C | *DATE :                "01/04/2025" - |
 DDACCNTR :                    19E3 C |  DDACFIFOMID :                   37 C |
 DDACPNTR :                    19E0 C | *DEF_HSIZE_128 :                100 - |
*DEF_HSIZE_32 :                  40 - |  DEF_HSIZE_64 :                  80 - |
*DEF_MAXSTAMPCOUT :              60 - |  DEF_PRINTPAL :                6000 - |
 DEF_PRINTVRAM :                5A0 - |  DEF_PRINTVRAMW :               4E0 - |
 DEF_SAVEINFO :    FFFFFFFFFFFF2734 C |  DEF_VRAM_BG :                 E000 - |
 DEF_VRAM_FG :                 C000 - |  DEF_VRAM_HSCRL :              FC00 - |
 DEF_VRAM_SPR :                F800 - |  DEF_VRAM_WD :                 D000 - |
 DISC_BANKLIST :   FFFFFFFFFFFF2BB8 C |
 DISC_BANKLIST.END :                                       FFFFFFFFFFFF2BCE C |
*DISPENBL :                      40 - |  DKY :                            C - |
*DMAENBL :                       10 - |  DREQCTL :                        6 - |
 DREQDEST :                       C - |  DREQFIFO :                      12 - |
 DREQLEN :                       10 - | *DREQSOURCE :                     8 - |
 DREQ_BUFF0 :                   200 - |  DREQ_BUFF1 :                   220 - |
 DREQ_BUFF2 :                   620 - |  DREQ_LEN :                     A20 - |
 DREQ_PALETTE :                   0 - |  DRVINIT :                       10 - |
*DRVOPEN :                        A - |  DRV_LOOP :                      41 C |
 DRV_LOOP.CMND_0 :               DD C |  DRV_LOOP.CMND_1 :               E0 C |
 DRV_LOOP.CMND_2 :               F9 C |  DRV_LOOP.CMND_3 :              133 C |
 DRV_LOOP.CMND_5 :              171 C |  DRV_LOOP.CMND_6 :              1AA C |
 DRV_LOOP.CMND_7 :              1E3 C |  DRV_LOOP.CMND_RDSLOT :         201 C |
 DRV_LOOP.DEL_ALL :             16A C |  DRV_LOOP.GETCBYTEL :            B0 C |
 DRV_LOOP.GRAB_ARG :             AE C |  DRV_LOOP.LIST :                 CD C |
 DRV_LOOP.NEITHER :              82 C |  DRV_LOOP.NEXT_CMD :             8B C |
 DRV_LOOP.NOBEATS :              68 C |  DRV_LOOP.NOTICKS :              5B C |
 DRV_LOOP.NOT_PAL :             1F6 C |  DRV_LOOP.SRCH_DEL :            151 C |
 DRV_LOOP.SRCH_FVOL :           18F C |  DRV_LOOP.SRCH_MODE :           119 C |
 DRV_LOOP.SRCH_SLOT :           213 C |  DRV_LOOP.SRCH_VOL :            1C8 C |
 DRV_LOOP.WRTTO_DEL :           15E C |  DRV_LOOP.WRTTO_FVOL :          19C C |
 DRV_LOOP.WRTTO_SLOT :          128 C |  DRV_LOOP.WRTTO_VOL :           1D5 C |
 DRWSLD_NEXTPZ :            6001DB6 C |  DRWSLD_NXTLINE :           6001D12 C |
 DRWSLD_NXTLINE.L_FIX :     6001D5A C |  DRWSLD_NXTLINE.REVERS :    6001D44 C |
 DRWSLD_NXTLINE.R_FIX :     6001D54 C |  DRWSLD_NXTLINE_TEX :       6001B9C C |
 DRWSLD_NXTLINE_TEX.FROM_ROM :                                      6001C5E C |
 DRWSLD_NXTLINE_TEX.TEX_SKIP_LINE :                                 6001CAE C |
 DRWSLD_NXTLINE_TEX.TEX_XLOOP :                                     6001C66 C |
 DRWSLD_NXTLINE_TEX.TL_FIX :                                        6001C26 C |
 DRWSLD_NXTLINE_TEX.TRNS2 : 6001C9C C |
 DRWSLD_NXTLINE_TEX.TRNS_1 :                                        6001C7C C |
 DRWSLD_NXTLINE_TEX.TR_FIX :                                        6001C12 C |
 DRWSLD_NXTLINE_TEX.TXREVERS :                                      6001BE4 C |
 DRWSLD_NXTLINE_TEX.W_FB :  6001C60 C |  DRWSLD_UPDLINE :           6001DAC C |
 DRWSLD_UPDLINE_TEX :       6001CC8 C |  DRWTASK_EXIT :             6001DF2 C |
 DRWTASK_PURGE :            6001DD6 C |  DRWTASK_RETURN :           6001DD6 C |
 DRWTEX_NEXTPZ :            6001CE4 C | *DRWTSK1_NEWPZ :            6001B08 C |
 DRWTSK1_NEWPZ.INVLD_Y :    6001B32 C |  DRWTSK1_NEWPZ.LEN_MAX :    6001B2C C |
*DRWTSK1_NEWPZ.NO_PZ :      6001B38 C |  DRWTSK1_NEWPZ.VALID_Y :    6001B3C C |
 DRWTSK_SOLIDMODE :         6001D00 C |  DRWTSK_SOLIDMODE.WAIT :    6001D0C C |
 DRWTSK_TEXMODE :           6001B7C C |  DRWTSK_TEXMODE.TEX_VALID : 6001B88 C |
 DTBL_MULTI :                   7EC C |  DTBL_SINGL :                   800 C |
 DTBL_SINGL.CHNL_ULNK :        1007 C |  DTBL_SINGL.COMN_PANLIST :      DF4 C |
 DTBL_SINGL.DAC_CUT :           BCC C |  DTBL_SINGL.DAC_OFF :           BD2 C |
 DTBL_SINGL.DAC_PROC :          BD8 C |  DTBL_SINGL.D_DOWN :            D78 C |
 DTBL_SINGL.D_DOWNHF :          D73 C |  DTBL_SINGL.D_UP :              D6A C |
*DTBL_SINGL.D_UPHF :            D67 C |  DTBL_SINGL.EFFC :              D31 C |
 DTBL_SINGL.EFFC_D :            D4C C |  DTBL_SINGL.EFFC_E :            D85 C |
 DTBL_SINGL.EFFC_F :            D94 C |  DTBL_SINGL.EFFC_X :            DA5 C |
 DTBL_SINGL.FM_CINDX :          B9A C |  DTBL_SINGL.FM_CLRRSAVE :       A82 C |
 DTBL_SINGL.FM_CUT :            A57 C |  DTBL_SINGL.FM_HASVOL :         FC5 C |
 DTBL_SINGL.FM_KEYOFF :         A63 C |  DTBL_SINGL.FM_OFF :            A4E C |
 DTBL_SINGL.FM_TLOFF :          A6B C |  DTBL_SINGL.FND_OCT :           FF6 C |
 DTBL_SINGL.FNOT_PAL :          979 C |  DTBL_SINGL.GET_FMCACH :        BA2 C |
 DTBL_SINGL.GET_OCT :           FEC C |  DTBL_SINGL.INST :              E25 C |
 DTBL_SINGL.INS_DAC :           EE2 C |  DTBL_SINGL.INS_FM :            E86 C |
 DTBL_SINGL.INS_PCM :           F36 C |  DTBL_SINGL.INS_PSG :           E50 C |
 DTBL_SINGL.INS_PSGN :          E4A C |  DTBL_SINGL.INS_PWM :           F73 C |
*DTBL_SINGL.INVL_INS :          E49 C |  DTBL_SINGL.KEEP_TLMX :         B84 C |
 DTBL_SINGL.KYCUT_PSG :         917 C | *DTBL_SINGL.KYCUT_PSGN :        914 C |
 DTBL_SINGL.KYOFF_PSG :         90B C | *DTBL_SINGL.KYOFF_PSGN :        908 C |
 DTBL_SINGL.KYPSGN_HATOFF :     920 C |  DTBL_SINGL.LINKED :            86A C |
 DTBL_SINGL.MKFM_PROC :         9B4 C |  DTBL_SINGL.MKFM_SET :          A99 C |
 DTBL_SINGL.MKFM_TLVOL :        B2B C |  DTBL_SINGL.MKFM_WREGS :        B02 C |
 DTBL_SINGL.MKPCM_WRTON :       C31 C |  DTBL_SINGL.MK_DAC :            BB2 C |
 DTBL_SINGL.MK_FM :             97A C |  DTBL_SINGL.MK_FM_SP :          9FE C |
 DTBL_SINGL.MK_LIST :           8B9 C |  DTBL_SINGL.MK_PCM :            C08 C |
 DTBL_SINGL.MK_PSG :            8C7 C |  DTBL_SINGL.MK_PWM :            C88 C |
 DTBL_SINGL.NEW_ROMDAT :        ECC C |  DTBL_SINGL.NOTE :              FBB C |
 DTBL_SINGL.NOT_DAC :           99F C |  DTBL_SINGL.NOT_NS :            903 C |
 DTBL_SINGL.NOT_PAL :           9D2 C |  DTBL_SINGL.NO_LFO :            AF7 C |
 DTBL_SINGL.NO_REQ :            944 C |  DTBL_SINGL.N_FM :              FE2 C |
*DTBL_SINGL.N_INDX :            FD7 C | *DTBL_SINGL.N_STFREQ :          FD8 C |
 DTBL_SINGL.PAN_MCD :           DD1 C |  DTBL_SINGL.PCM_CUT :           C79 C |
 DTBL_SINGL.PCM_NOTE :          C2F C |  DTBL_SINGL.PCM_OFF :           C72 C |
 DTBL_SINGL.PCM_PANLIST :       DFC C |  DTBL_SINGL.PCM_SETCOFF :       C7E C |
 DTBL_SINGL.PSGC_KEYON :        92E C |  DTBL_SINGL.PSGC_PROC :         927 C |
 DTBL_SINGL.PSG_GETFREQ :       965 C |  DTBL_SINGL.PSG_KEYON :         94A C |
 DTBL_SINGL.PWM_CUT :           D04 C |  DTBL_SINGL.PWM_OFF :           CFD C |
 DTBL_SINGL.PWM_SETCOFF :       D09 C |  DTBL_SINGL.PW_EFFC :           CB0 C |
 DTBL_SINGL.PW_NOTE :           CB4 C |  DTBL_SINGL.PW_SEND :           CB6 C |
 DTBL_SINGL.RCYL_COM :          85D C |  DTBL_SINGL.READFREQ_PCM :      D13 C |
 DTBL_SINGL.READFREQ_PWM :      D18 C |  DTBL_SINGL.RESET_EFFC :        8AC C |
 DTBL_SINGL.RES_PAN :           DC7 C |  DTBL_SINGL.SAME_PATCH :        EDD C |
 DTBL_SINGL.SETEFU_D :          D6C C |  DTBL_SINGL.SETEF_D :           D7C C |
 DTBL_SINGL.SETEF_MCD :         D81 C |  DTBL_SINGL.SET_WAVFREQ :       D1B C |
 DTBL_SINGL.SILN_DAC :          861 C |  DTBL_SINGL.SILN_FM :           864 C |
 DTBL_SINGL.SILN_PCM :          843 C |  DTBL_SINGL.SILN_PSG :          83D C |
 DTBL_SINGL.SILN_PSG_N :        839 C |  DTBL_SINGL.SILN_PWM :          854 C |
 DTBL_SINGL.THIS_REGS :         A46 C |  DTBL_SINGL.TL_DOWN :           A77 C |
 DTBL_SINGL.VMUCH :             95F C |  DTBL_SINGL.VOLU :              E1C C |
 DTBL_SINGL.VPCM_CARRY :        C66 C |  DTBL_SINGL.VPCM_SILN :         C63 C |
 DTBL_SINGL.VPCM_ZERO :         C67 C |  DTBL_SINGL.VPWM_MUCH :         CD7 C |
 DTBL_SINGL.VPWM_SILN :         CD5 C |  DTBL_SINGL.WRITE_NTL :         B8F C |
 DTBL_SINGL.WRITE_TL :          B7D C |  DTBL_SINGL.WRT_EF :            D9F C |
 DTBL_SINGL.WR_SPC :            A28 C |  DTH :                           20 - |
 DTL :                           1C - |  DWAVEBUFF :                   1D00 C |
*EFFV :                          34 - |  EMU :                            1 - |
 ENV :                            1 - |  EXTINT_DEFAULT :  FFFFFFFFFFFF22DC C |
*EXT_3 :                          C - | *EXT_4 :                          E - |
 FALSE :                          0 - |  FDH :                            7 - |
 FDL :                            5 - |  FDRCHG :                        86 - |
 FDRSET :                        85 - | *FEN :                            2 - |
 FILEN_MARSCODE :              2B40 C |  FILEN_Z80FILE :               2B32 C |
*FILLDATA :                       8 - | *FILLLENGTH :                     4 - |
*FILLSTART :                      6 - |  FLG :                           28 - |
 FM :                            80 - |  FMCACH_1 :                    1791 C |
 FMCACH_2 :                    17B9 C |  FMCACH_3 :                    17E1 C |
 FMCACH_4 :                    1809 C |  FMCACH_5 :                    1831 C |
 FMCACH_6 :                    1859 C |  FMCACH_LIST :                 19D2 C |
 FMFREQ_LIST :                 1543 C | *FMINS_BASS_BIG_110 :        2041FE C |
*FMINS_BASS_BIG_114 :        20421E C | *FMINS_BASS_BIG_122 :        20423E C |
*FMINS_BASS_BIG_81 :         2041DE C | *FMINS_BASS_CAVE_47 :        20425E C |
*FMINS_BASS_CLUB :           204B1E C | *FMINS_BASS_CLUB_108 :       20427E C |
*FMINS_BASS_DUCK :           204ABE C | *FMINS_BASS_FOOT_75 :        20429E C |
*FMINS_BASS_GEM_26 :         2042BE C |  FMINS_BASS_GROOVE_1 :       20437E C |
*FMINS_BASS_GROOVE_119 :     2042DE C | *FMINS_BASS_GROOVE_2 :       204B3E C |
*FMINS_BASS_HEAVY_107 :      2042FE C | *FMINS_BASS_HEAVY_118 :      20431E C |
 FMINS_BASS_ITALO :          204BDE C | *FMINS_BASS_LOUD_117 :       20433E C |
*FMINS_BASS_LOW81 :          20465E C | *FMINS_BASS_LOW_103 :        2043BE C |
*FMINS_BASS_LOW_106 :        2043DE C | *FMINS_BASS_LOW_126 :        2043FE C |
*FMINS_BASS_LOW_46 :         20435E C | *FMINS_BASS_LOW_81 :         20439E C |
*FMINS_BASS_MID_111 :        20445E C | *FMINS_BASS_MID_19 :         20441E C |
*FMINS_BASS_MID_80 :         20443E C | *FMINS_BASS_POWER_123 :      20447E C |
*FMINS_BASS_SILENT_53 :      20449E C | *FMINS_BASS_SLAP_10 :        2044BE C |
*FMINS_BASS_SLAP_105 :       2044DE C | *FMINS_BASS_SYNTH_60 :       2044FE C |
*FMINS_BASS_SYNTH_61 :       20451E C | *FMINS_BASS_SYNTH_72 :       20453E C |
*FMINS_BASS_SYNTH_73 :       20455E C | *FMINS_BASS_VLOW_74 :        20457E C |
*FMINS_BELL_62 :             20471E C | *FMINS_BELL_93 :             20473E C |
*FMINS_BELL_LOW13 :          20475E C | *FMINS_BELL_MID36 :          2046FE C |
*FMINS_BRASS_7 :             204B7E C | *FMINS_CLOSEDHAT :           204ADE C |
*FMINS_DRUMS_KICK1 :         204A3E C | *FMINS_DRUM_KICK :           20477E C |
 FMINS_FLAUTE_1 :            2045BE C | *FMINS_FLAUTE_2 :            2045DE C |
*FMINS_GUITAR_BBALL :        204BFE C |  FMINS_HATS_1 :              2046DE C |
*FMINS_HBEAT_TOM :           204A7E C |  FMINS_ORGAN_DRAWBAR :       20459E C |
*FMINS_PIANO_AQUA :          204A5E C | *FMINS_PSYNTH_PLUS :         204B5E C |
*FMINS_SFX_ALIEN1 :          204986 C | *FMINS_SFX_ALIEN2 :          2049A6 C |
*FMINS_SFX_EXPLODE :         204946 C | *FMINS_SFX_PUNCH :           204926 C |
*FMINS_SFX_PUNCH_2 :         204B9E C | *FMINS_SFX_SLASH :           204966 C |
*FMINS_SFX_SMASH :           204BBE C | *FMINS_SP_CLOSEDHAT :        2049EE C |
*FMINS_SP_COWBELL :          204A16 C | *FMINS_SP_OPENHAT :          2049C6 C |
*FMINS_TICK :                20479E C | *FMINS_TRUMPET_1 :           204A9E C |
*FMINS_TRUMPET_BUS :         2046BE C | *FMINS_TRUMPET_CARNIVAL :    204AFE C |
*FMINS_TRUMPET_GENIE :       20469E C | *FMINS_TRUMPET_LOW :         20467E C |
 FMINS_VIBRAPHONE_1 :        2045FE C | *FMINS_VIBRAPHONE_2 :        20461E C |
*FMINS_XYLOPHONE :           20463E C |  FMLIST_RSAVE :                1881 C |
 FMSPECIAL :                     30 C | *FMSPINS_CLACK_1 :           2047BE C |
*FMSPINS_COWBELL_H :         2047E6 C | *FMSPINS_COWBELL_L :         20480E C |
*FMSPINS_HATS_HQ :           204836 C | *FMSPINS_SFX_ALIEN :         20485E C |
*FMSPINS_SFX_KNCKBUZZ :      204886 C | *FMSPINS_SFX_KNOCK_H :       2048AE C |
*FMSPINS_SFX_KNOCK_L :       2048D6 C | *FMSPINS_SFX_LASER :         2048FE C |
 FM_AUTOREG :                  13FB C |  FM_SEND_1 :                   13FF C |
 FM_SEND_2 :                   140A C |  FRAMECLEAR :                  2988 C |
 FRAMECLEAR.FEN0 :             29B2 C |  FRAMECLEAR.FILL0 :            29A8 C |
 FRAMECLEAR.FM1 :              2992 C |  FRAMECTL :                       B - |
*FS :                             1 - | *FULLPMMU :                       1 - |
 GEMADMAPAUSE :    FFFFFFFFFFFF0174 C |  GEMADMARESUME :   FFFFFFFFFFFF0192 C |
*GEMAFADESEQ :     FFFFFFFFFFFF0248 C |  GEMAINIT :        FFFFFFFFFFFF0000 C |
 GEMAINIT.CLEAR_REST :                                     FFFFFFFFFFFF0038 C |
 GEMAINIT.COPY_DRVR :                                      FFFFFFFFFFFF002E C |
 GEMAINIT.NOT_PAL :                                        FFFFFFFFFFFF005E C |
 GEMAINIT.WAIT :   FFFFFFFFFFFF001A C |  GEMAMSTRLISTPOS :               1C C |
 GEMAPLAYSEQ :     FFFFFFFFFFFF01D0 C | *GEMAPLAYSEQAUTO : FFFFFFFFFFFF01EE C |
 GEMARESET :       FFFFFFFFFFFF0072 C |  GEMASENDRAM :     FFFFFFFFFFFF00A6 C |
 GEMASENDRAM.COPY_BYTES :                                  FFFFFFFFFFFF00E4 C |
 GEMASENDRAM.NO_SIZE :                                     FFFFFFFFFFFF00F2 C |
 GEMASENDRAM.NO_TASK :                                     FFFFFFFFFFFF00F8 C |
 GEMASETBEATS :    FFFFFFFFFFFF0280 C |
 GEMASETMASTERLIST :                                       FFFFFFFFFFFF01BE C |
*GEMASETSEQVOL :   FFFFFFFFFFFF0264 C |  GEMASTOPALL :     FFFFFFFFFFFF022C C |
 GEMASTOPSEQ :     FFFFFFFFFFFF0210 C | *GEMATEST :        FFFFFFFFFFFF01B0 C |
 GEMA_INIT :                   114B C |  GEMA_INIT.END_SETUP :         118C C |
 GEMA_INIT.SETUP_LIST :        1161 C |  GEMA_INIT.ST_COPY :           1180 C |
 GEMA_LASTBANK :               1539 C |  GEMA_LASTBANK.WRITE :         153E C |
 GET_TICK :                    11BD C |  GET_TICK.CTNOTICK :           11DA C |
 GLBL_LASTORG :    FFFFFFFFFFFFB800 - |  GLBL_LASTPC :     FFFFFFFFFFFF2C00 - |
 GLBL_MDATA_RP :              2B308 - |  GLBL_MDATA_ST :             200000 - |
 GO_DRWSLD_UPDLINE_TEX :    6001B74 C |  GO_DRWTEX_GONXTPZ :        6001B78 C |
 GTRK_TEST0 :                200008 C |  GTRK_TEST0.BLK :            200016 C |
 GTRK_TEST0.INS :            200024 C |  GTRK_TEST0.PAT :            200018 C |
 GTRK_TEST1 :                20002C C |  GTRK_TEST1.BLK :            20003A C |
 GTRK_TEST1.INS :            204146 C |  GTRK_TEST1.PAT :            200048 C |
 G_MSTRMODE_INITEXIT :      6000C48 C |  G_MSTR_COPYPALETTE :       6000C44 C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*HBLK :                          40 - |  HEADEROUT :                   19E6 C |
 HEADEROUT_E :                 19F4 C |  HINTCLR :                       18 - |
*HINTENBL :                      10 - |  HINT_DEFAULT :    FFFFFFFFFFFF22DA C |
*HIRQ_ON :                        4 - |  HOT_START :                   2976 C |
*HTAG_CDSAVE :        "NIKONACD___" - |  HTAG_CDVER :                   102 - |
 HTAG_DATEINFO : "(C)GF64 2024.???" - | *HTAG_DISCID :        "NIKONACD   " - |
 HTAG_DISCID_M :      "NIKONACD32X" - |  HTAG_MARSCDSAV :     "NIKONACD32X" - |
*HTAG_NDM_MARS :         "Nikona SUPER32X                                 " - |
 HTAG_NDM_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NDM_MCD :          "Nikona MCD                                      " - |
*HTAG_NDM_MD :           "Nikona MD                                       " - |
*HTAG_NDM_PICO :         "Nikona PICO                                     " - |
*HTAG_NOV_MARS :         "Nikona 32X                                      " - |
 HTAG_NOV_MARSCD :       "Nikona CD32X                                    " - |
*HTAG_NOV_MCD :          "Nikona SCD                                      " - |
*HTAG_NOV_MD :           "Nikona GENESIS                                  " - |
*HTAG_NOV_PICO :         "Nikona PICO                                     " - |
 HTAG_REGIONS :  "F               " - |  HTAG_SERIAL :     "GM HOMEBREW-02" - |
 HTAG_SYSNAME :       "NIKONA-SDK " - | *HTAG_SYS_MARS : "SEGA 32X        " - |
*HTAG_SYS_MARSCD :                                       "SEGA GENESIS    " - |
 HTAG_SYS_MCD :  "SEGA GENESIS    " - | *HTAG_SYS_MD :   "SEGA GENESIS    " - |
*HTAG_SYS_PICO : "SEGA PICO       " - | *HVSTOP :                         2 - |
 ICDALLEND :                   29F0 C |  ICDALLEND.MASTER :            2A7E C |
 ICDALLEND.SEND_CODE :         2A5C C |  ICDALLEND.SEND_HALF :         2A26 C |
 ICDALLEND.SEND_HEAD :         2A4A C |  ICDALLEND.SLAVE :             2A88 C |
 ICDALLEND.SOFT_RESET :        2AA4 C |  ICDALLEND.WAIT_ADAPTER :      2A6A C |
 ICDALLEND.WAIT_CDFB :         2A62 C |  ICDALLEND.WAIT_F0 :           2A34 C |
 ICDALLEND.WAIT_F0FB :         2A2C C |  ICDALLEND.WAIT_F1 :           2A0C C |
 ICDALLEND.WAIT_F1FB :         2A04 C |  ICDALLEND.WAIT_FB :           29FE C |
 ICDALLEND.WAIT_MSTR :         2A92 C |  ICDALLEND.WAIT_SLV :          2A98 C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
 INSTLISTOUT :                 19FC C | *INSUPMODE :                      1 - |
*INTMASK :                        1 - |  INT_M_LIST :               60002A0 C |
 INT_S_LIST :               60002E0 C |  IP_END :                       800 C |
 IP_START :                     200 C |  IP_START.WAIT :                794 C |
 IP_START.WAIT_VINT :           7A4 C |  ISOFILELIST :                 B844 C |
 ISOFILELIST_E :               C000 C |  JOYA :                          40 - |
 JOYB :                          10 - |  JOYC :                          20 - |
 JOYDOWN :                        2 - | *JOYID_MD :                       D - |
*JOYID_MOUSE :                    3 - | *JOYID_MS :                       F - |
 JOYLEFT :                        4 - | *JOYMODE :                      800 - |
*JOYPEN :                        80 - | *JOYRED :                        10 - |
 JOYRIGHT :                       8 - |  JOYSTART :                      80 - |
 JOYUP :                          1 - |  JOYX :                         400 - |
 JOYY :                         200 - |  JOYZ :                         100 - |
 LCHWIDTH :                      34 - | *LEDSET :                        95 - |
 LEV :                            4 - | *LISTON :                         3 - |
 LITERAL_F_00000000_1 :     60004C0 C |  LITERAL_F_00000001_1 :     60006F8 C |
 LITERAL_F_00000002_1 :     60006FC C |  LITERAL_F_00000003_1 :     600071C C |
 LITERAL_F_00000004_1 :     6000720 C |  LITERAL_F_00000005_1 :     6000704 C |
 LITERAL_F_00000006_1 :     6000722 C |  LITERAL_F_00000007_1 :     6000724 C |
 LITERAL_F_00000008_1 :     600070C C |  LITERAL_F_00000009_1 :     6000714 C |
 LITERAL_F_0000000A_1 :     6000718 C |  LITERAL_F_0000000B_1 :     6000726 C |
 LITERAL_F_0000000C_1 :     6000728 C |  LITERAL_F_0000000D_1 :     600079C C |
 LITERAL_F_0000000E_1 :     6000880 C |  LITERAL_F_0000000F_1 :     6000888 C |
 LITERAL_F_00000010_1 :     600088C C |  LITERAL_F_00000011_1 :     6000890 C |
 LITERAL_F_00000012_1 :     6000C36 C |  LITERAL_F_00000013_1 :     6000C38 C |
 LITERAL_F_00000014_1 :     6000C2C C |  LITERAL_F_00000015_1 :     6000C40 C |
 LITERAL_F_00000016_1 :     6000C30 C |  LITERAL_F_00000017_1 :     6000CB8 C |
 LITERAL_F_00000018_1 :     6000CBC C |  LITERAL_F_00000019_1 :     6000E5C C |
 LITERAL_F_0000001A_1 :     6000E60 C |  LITERAL_F_0000001B_1 :     6000E64 C |
 LITERAL_F_0000001C_1 :     6000E68 C |  LITERAL_F_0000001D_1 :     6000E74 C |
 LITERAL_F_0000001E_1 :     6000E78 C |  LITERAL_F_0000001F_1 :     6000E7C C |
 LITERAL_F_00000020_1 :     6000E80 C |  LITERAL_F_00000021_1 :     6000E84 C |
 LITERAL_F_00000022_1 :     6000E88 C |  LITERAL_F_00000023_1 :     6000F40 C |
 LITERAL_F_00000024_1 :     6000F44 C |  LITERAL_F_00000025_1 :     6000F5E C |
 LITERAL_F_00000026_1 :     6000F48 C |  LITERAL_F_00000027_1 :     6000FC0 C |
 LITERAL_F_00000028_1 :     6000FC4 C |  LITERAL_F_00000029_1 :     6000FC8 C |
 LITERAL_F_0000002A_1 :     600108C C |  LITERAL_F_0000002B_1 :     6001090 C |
 LITERAL_F_0000002C_1 :     6001260 C |  LITERAL_F_0000002D_1 :     6001264 C |
 LITERAL_F_0000002E_1 :     6001408 C |  LITERAL_F_0000002F_1 :     600150C C |
 LITERAL_F_00000030_1 :     60015FC C |  LITERAL_F_00000031_1 :     6001600 C |
 LITERAL_F_00000032_1 :     6001810 C |  LITERAL_F_00000033_1 :     6001814 C |
 LITERAL_F_00000034_1 :     6001818 C |  LITERAL_F_00000035_1 :     6001820 C |
 LITERAL_F_00000036_1 :     6001824 C |  LITERAL_F_00000037_1 :     6001828 C |
 LITERAL_F_00000038_1 :     60019F0 C |  LITERAL_F_00000039_1 :     60019F4 C |
 LITERAL_F_0000003A_1 :     60019F8 C |  LITERAL_F_0000003B_1 :     60019FC C |
 LITERAL_F_0000003C_1 :     6001A00 C |  LITERAL_F_0000003D_1 :     6001A04 C |
 LITERAL_F_0000003E_1 :     6001A08 C |  LITERAL_F_0000003F_1 :     6001A0C C |
 LITERAL_F_00000040_1 :     6001B5C C |  LITERAL_F_00000041_1 :     6001B60 C |
 LITERAL_F_00000042_1 :     6001B64 C |  LITERAL_F_00000043_1 :     6001CE8 C |
 LITERAL_F_00000044_1 :     6001CF0 C |  LITERAL_F_00000045_1 :     6001CF8 C |
 LITERAL_F_00000046_1 :     6001E0C C |  LITERAL_F_00000047_1 :         144 C |
 LITERAL_F_00000048_1 :         1BC C |  LITERAL_F_00000049_1 :         1C0 C |
 LITERAL_F_0000004A_1 :         1C4 C |  LITERAL_F_0000004B_1 :         1C8 C |
 LITERAL_F_0000004C_1 :         1CC C |  LITERAL_F_0000004D_1 :         1D0 C |
 LITERAL_F_0000004E_1 :         1D4 C |  LITERAL_F_0000004F_1 :         1D8 C |
 LITERAL_F_00000050_1 :         1DC C |  LITERAL_F_00000051_1 :         1E0 C |
 LITERAL_F_00000052_1 :         310 C |  LITERAL_F_00000053_1 :         394 C |
 LITERAL_F_00000054_1 :         534 C |  LITERAL_F_00000055_1 :         678 C |
 LITERAL_F_00000056_1 :         680 C |  LITERAL_F_00000057_1 :         684 C |
 LITERAL_L_00008000_1 :         30C C |  LITERAL_L_0001FF00_1 :         148 C |
 LITERAL_L_00A00000_1 :         67C C |  LITERAL_L_02000000_1 :     6000700 C |
 LITERAL_L_06000000_1 :     60004A8 C |  LITERAL_L_06000000_2 :     600086C C |
 LITERAL_L_06000128_1 :     6000F38 C |  LITERAL_L_0601FFC8_1 :     6000874 C |
 LITERAL_L_06040000_1 :     6000878 C |  LITERAL_L_20000000_1 :     60004AC C |
 LITERAL_L_20004000_1 :     60004A4 C |  LITERAL_L_20004000_2 :     6000790 C |
 LITERAL_L_20004000_3 :     6000894 C |  LITERAL_L_20004000_4 :     6000A5C C |
 LITERAL_L_20004000_5 :     6000C24 C |  LITERAL_L_20004000_6 :     6000CC0 C |
 LITERAL_L_20004000_7 :     6000E50 C |  LITERAL_L_20004000_8 :     6000F4C C |
 LITERAL_L_20004000_9 :     6001088 C |  LITERAL_L_20004012_1 :     60004B0 C |
 LITERAL_L_20004016_1 :     60004B8 C |  LITERAL_L_20004016_2 :     600078C C |
 LITERAL_L_20004018_1 :     60004B4 C |  LITERAL_L_20004018_2 :     6000788 C |
 LITERAL_L_2000401A_1 :     60004A0 C |  LITERAL_L_2000401A_2 :     6000528 C |
 LITERAL_L_2000401C_1 :     600049C C |  LITERAL_L_2000401C_2 :         13C C |
 LITERAL_L_20004020_1 :     6000884 C |  LITERAL_L_20004020_2 :     6000908 C |
 LITERAL_L_20004020_3 :     6000F3C C |  LITERAL_L_20004021_1 :     6000FB8 C |
 LITERAL_L_20004022_1 :     6000378 C |  LITERAL_L_20004024_1 :     600037C C |
 LITERAL_L_20004028_1 :     6000708 C |  LITERAL_L_2000402C_1 :     6000498 C |
 LITERAL_L_2000402C_2 :     6000910 C |  LITERAL_L_2000402C_3 :     6000A70 C |
 LITERAL_L_2000402C_4 :     6000CB0 C |  LITERAL_L_2000402C_5 :     6000F50 C |
 LITERAL_L_2000402D_1 :     600090C C |  LITERAL_L_2000402D_2 :     6000A64 C |
 LITERAL_L_2000402D_3 :     6000CC8 C |  LITERAL_L_2000402E_1 :     600052C C |
 LITERAL_L_2000402E_2 :     6000710 C |  LITERAL_L_2000402E_3 :     6000794 C |
 LITERAL_L_2000402E_4 :     6000898 C |  LITERAL_L_2000402E_5 :     6000A68 C |
 LITERAL_L_2000402E_6 :     6000CB4 C |  LITERAL_L_2000402E_7 :     6000E58 C |
 LITERAL_L_2000402E_8 :     6000FBC C |  LITERAL_L_2000402F_1 :     6000E6C C |
 LITERAL_L_2000402F_2 :     6000FCC C |  LITERAL_L_20004034_1 :         14C C |
 LITERAL_L_20004038_1 :         140 C |  LITERAL_L_20004100_1 :     6000870 C |
 LITERAL_L_20004100_2 :     6000A60 C |  LITERAL_L_20004100_3 :     6000C28 C |
 LITERAL_L_20004100_4 :     6000CC4 C |  LITERAL_L_20004100_5 :     6000E54 C |
 LITERAL_L_20004100_6 :     6001120 C |  LITERAL_L_20004100_7 :     6001B58 C |
 LITERAL_L_20004100_8 :     6001CF4 C |  LITERAL_L_20004100_9 :     6001E08 C |
 LITERAL_L_20004200_1 :     6000E8C C |  LITERAL_L_24000000_1 :     600087C C |
 LITERAL_L_24000000_2 :     6000A6C C |  LITERAL_L_24000000_3 :     6000E70 C |
 LITERAL_L_24000000_4 :     6001124 C |  LITERAL_L_24000000_5 :     60011A8 C |
 LITERAL_L_24000000_6 :     60015F8 C |  LITERAL_L_24020000_1 :     6001404 C |
 LITERAL_L_24020200_1 :     6001CEC C |  LITERAL_L_4D5F4F4B_1 :     60004C4 C |
 LITERAL_L_535F4F4B_1 :     60007A0 C |  LITERAL_L_7FFFFFFF_1 :     600181C C |
 LITERAL_L_FFFFFFFFC0000000_1 :                                     6000A74 C |
 LITERAL_L_FFFFFFFFC0000000_2 :                                     6001020 C |
 LITERAL_L_FFFFFFFFC00007F8_1 :                                     60004BC C |
 LITERAL_L_FFFFFFFFC00007F8_2 :                                     6000798 C |
 LITERAL_L_FFFFFFFFC0000800_1 :                                     6000868 C |
 LITERAL_L_FFFFFFFFC0000800_2 :                                     6000F34 C |
 LITERAL_W_0080_1 :         6000A7C C |  LITERAL_W_0080_2 :         6000CD0 C |
 LITERAL_W_0080_3 :             152 C |  LITERAL_W_00A0_1 :         6001B6A C |
 LITERAL_W_00A1_1 :         6000E9A C |  LITERAL_W_00A2_1 :         6001132 C |
 LITERAL_W_00C0_1 :         6000A7E C |  LITERAL_W_00C0_2 :         6000E92 C |
 LITERAL_W_00E0_1 :         6001130 C |  LITERAL_W_00F0_1 :         60004D2 C |
 LITERAL_W_00F0_2 :         60007AA C |  LITERAL_W_00F0_3 :         6000C42 C |
 LITERAL_W_00F0_4 :         6000E9C C |  LITERAL_W_00FF_1 :         6000C3E C |
 LITERAL_W_0100_1 :         600112A C |  LITERAL_W_0100_2 :             1E4 C |
 LITERAL_W_0100_3 :             538 C |  LITERAL_W_0105_1 :         6001094 C |
 LITERAL_W_0140_1 :         6000C3A C |  LITERAL_W_0140_2 :         6000E96 C |
 LITERAL_W_0140_3 :         600112E C |  LITERAL_W_0160_1 :         6001128 C |
 LITERAL_W_0180_1 :         6000A80 C |  LITERAL_W_01F0_1 :         600126A C |
 LITERAL_W_01FF_1 :         6000C3C C |  LITERAL_W_01FF_2 :         6001606 C |
 LITERAL_W_0200_1 :         600071E C |  LITERAL_W_0200_2 :         6000A82 C |
 LITERAL_W_0200_3 :         6000C34 C |  LITERAL_W_0200_4 :         6000E98 C |
 LITERAL_W_0200_5 :         6001098 C |  LITERAL_W_0200_6 :         600112C C |
 LITERAL_W_0200_7 :         6001512 C |  LITERAL_W_0220_1 :         6000E90 C |
 LITERAL_W_0220_2 :         6001510 C |  LITERAL_W_0220_3 :         6001604 C |
 LITERAL_W_0530_1 :         60008A0 C |  LITERAL_W_0530_2 :         6000F58 C |
 LITERAL_W_059F_1 :         6001096 C |  LITERAL_W_0620_1 :         6000E94 C |
 LITERAL_W_0620_2 :         6001268 C |  LITERAL_W_0620_3 :         6001514 C |
 LITERAL_W_07FF_1 :             154 C |  LITERAL_W_07FF_2 :             68A C |
 LITERAL_W_3FFF_1 :         6001CFE C |  LITERAL_W_44E0_1 :         60004CA C |
 LITERAL_W_44E5_1 :         60004CC C |  LITERAL_W_4800_1 :         60008A4 C |
 LITERAL_W_4800_2 :         6000F5C C |  LITERAL_W_5A00_1 :         6001054 C |
 LITERAL_W_5A00_2 :         6001E14 C |  LITERAL_W_5A20_1 :         6001B70 C |
 LITERAL_W_A518_1 :         60004D0 C |  LITERAL_W_A518_2 :         60007A8 C |
 LITERAL_W_A518_3 :         6000A7A C |  LITERAL_W_A518_4 :         6000CCE C |
 LITERAL_W_A518_5 :         6000EA0 C |  LITERAL_W_A518_6 :         6001B6E C |
 LITERAL_W_A518_7 :         6001E12 C |  LITERAL_W_A538_1 :         6001056 C |
 LITERAL_W_FE10_1 :         60004C8 C |  LITERAL_W_FE10_2 :         60004F0 C |
 LITERAL_W_FE10_3 :         6000530 C |  LITERAL_W_FE10_4 :         60007A4 C |
 LITERAL_W_FE10_5 :         600089C C |  LITERAL_W_FE10_6 :         6000F54 C |
 LITERAL_W_FE10_7 :         6001B68 C |  LITERAL_W_FE10_8 :             150 C |
 LITERAL_W_FE80_1 :         60004CE C |  LITERAL_W_FE80_2 :         60007A6 C |
 LITERAL_W_FE80_3 :         6000A78 C |  LITERAL_W_FE80_4 :         6000CCC C |
 LITERAL_W_FE80_5 :         6000E9E C |  LITERAL_W_FE80_6 :         6001052 C |
 LITERAL_W_FE80_7 :         6001B6C C |  LITERAL_W_FE80_8 :         6001E10 C |
 LITERAL_W_FE92_1 :         6001024 C |  LITERAL_W_FE92_2 :         6001050 C |
 LITERAL_W_FE92_3 :             68C C |  LITERAL_W_FEE2_1 :         600089E C |
 LITERAL_W_FEE2_2 :         6000F56 C |  LITERAL_W_FEE4_1 :         60008A2 C |
 LITERAL_W_FEE4_2 :         6000F5A C |  LITERAL_W_FF00_1 :         6001A10 C |
 LITERAL_W_FF00_2 :         6001CFC C |  LITERAL_W_FF00_3 :             688 C |
 LITERAL_W_FF60_1 :             314 C |  LITERAL_W_FF60_2 :             53A C |
 LSH :                            B - |  LSL :                            9 - |
*MACEXP :                         7 - |  MAINGEMASEQLIST :           200000 C |
 MARS :                           0 - |  MARSBLOCK :                   1F8A C |
 MARSCD :                         1 - |  MARSERROR :                   2980 C |
 MARSGBL_3D_OUTHEIGHT :          1C - |  MARSGBL_3D_OUTWIDTH :           18 - |
*MARSGBL_DRAWALL :               16 - |  MARSGBL_DREQREAD :              20 - |
 MARSGBL_DREQWRITE :             24 - |  MARSGBL_LEN :                   60 - |
 MARSGBL_PLGNPZINDX_R :          28 - |  MARSGBL_PLGNPZINDX_W :          2C - |
 MARSGBL_PLYPZCNTR :              C - |  MARSGBL_SCRL_FBOUT :            50 - |
 MARSGBL_SCRL_FBTL :             54 - |  MARSGBL_SCRL_FBX :              5C - |
 MARSGBL_SCRL_FBY :              58 - |  MARSGBL_SCRL_HGHT :             48 - |
 MARSGBL_SCRL_SIZE :             40 - |  MARSGBL_SCRL_VRAM :             4C - |
 MARSGBL_SCRL_WDTH :             44 - |  MARSGBL_SCRL_XOLD :             38 - |
 MARSGBL_SCRL_XPOS :             30 - |  MARSGBL_SCRL_YOLD :             3C - |
 MARSGBL_SCRL_YPOS :             34 - |  MARSGBL_THISFRAME :              0 - |
 MARSGBL_WDGACTIVE :             10 - |  MARSGBL_WDGCLLINES :             E - |
 MARSGBL_WDGDIVLOCK :             8 - |  MARSGBL_WDGHOLD :                6 - |
 MARSGBL_WDGREADY :               A - |  MARSGBL_WDGTASK :                4 - |
 MARSGBL_XSHIFT :                 2 - |  MARSINITHEADER :              2AB2 C |
 MARSJUMPHERE :                2AEA C |  MARSJUMPHERE.LOOP_RAM :       2B08 C |
 MARSMDL_MDLLOOP :              158 C |  MARSMDL_MDLLOOP.GO_MDL :       170 C |
 MARSMDL_MDLLOOP.INVLID :       1A2 C |  MARSMDL_MDLLOOP.LOOP :         190 C |
 MARSMDL_MDLLOOP.M_INVLID :     186 C |  MARSMDL_MDLLOOP.M_LOOP :       174 C |
 MARSMDL_MDLLOOP.PAGE_2 :       1B4 C | *MARSMDL_MDLLOOP.SKIP :         1A8 C |
 MARSMDL_MKSPR :                1E8 C |  MARSMDL_MKSPR.BAD_FACE :       304 C |
 MARSMDL_MKSPR.LOWER_Z :        2A8 C |  MARSMDL_MKSPR.MK_FACE :        2FA C |
 MARSMDL_MKSPR.MK_POINT :       28E C |  MARSMDL_MKSPR.NOT_OLDPOS :     26C C |
 MARSMDL_MKSPR.NOT_PLYFLD :     2F8 C |  MARSMDL_MKSPR.Z_PLUS :         2C4 C |
 MARSMDL_READMODEL :            398 C |  MARSMDL_READMODEL.BAD_FACE :   520 C |
 MARSMDL_READMODEL.EXIT :       52C C |  MARSMDL_READMODEL.FC_TRI :     474 C |
 MARSMDL_READMODEL.HAS_UV :     3E0 C |  MARSMDL_READMODEL.MK_FACE :    44C C |
 MARSMDL_READMODEL.NEXT_FACE :  3AC C |  MARSMDL_READMODEL.QUAD :       3C4 C |
 MARSMDL_READMODEL.UV_TRI :     3FC C |  MARSMDL_READMODEL.VALID :      3B6 C |
 MARSMDL_READMODEL.Z_PLUS :     4E0 C |  MARSPWM_BANK :                   8 - |
 MARSPWM_CBANK :                 20 - |  MARSPWM_CREAD :                 24 - |
 MARSPWM_ENBL :                   0 - |  MARSPWM_LEN :                   28 - |
 MARSPWM_LENGTH :                10 - |  MARSPWM_LOOP :                  14 - |
 MARSPWM_PITCH :                 18 - |  MARSPWM_READ :                   4 - |
 MARSPWM_START :                  C - |  MARSPWM_VOL :                   1C - |
 MARSSCRL_COPYTOPBOT :      6001184 C |
 MARSSCRL_COPYTOPBOT.COPY_TOP :                                     6001198 C |
 MARSSOUND_INIT :           6001058 C |  MARSSOUND_INIT.NEXT_ONE :  6001078 C |
 MARSUPD :                     19D8 C |  MARSVIDEO_DRAWFILLBLK :    6001518 C |
 MARSVIDEO_DRAWFILLBLK.ALWAYS_ON :                                  60015B0 C |
 MARSVIDEO_DRAWFILLBLK.BLANK_REQ :                                  60015CA C |
*MARSVIDEO_DRAWFILLBLK.EXIT_LR :                                    60015F2 C |
 MARSVIDEO_DRAWFILLBLK.NO_FLAG :                                    60015D2 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_X :                                  6001568 C |
 MARSVIDEO_DRAWFILLBLK.TL_SNAP_Y :                                  600157A C |
 MARSVIDEO_DRAWFILLBLK.X_LOOP :                                     6001562 C |
 MARSVIDEO_DRAWFILLBLK.Y_LOOP :                                     6001574 C |
 MARSVIDEO_FIXTBLSHIFT :    60010C8 C |
 MARSVIDEO_FIXTBLSHIFT.COPY :                                       6001108 C |
 MARSVIDEO_FIXTBLSHIFT.LOOP :                                       60010F0 C |
 MARSVIDEO_FIXTBLSHIFT.PTCHSET :                                    600111A C |
 MARSVIDEO_FIXTBLSHIFT.TBLEXIT :                                    6001114 C |
 MARSVIDEO_INIT :           600109C C |  MARSVIDEO_MKFILLBLK :      600140C C |
 MARSVIDEO_MKFILLBLK.COPY_BIT :                                     600141C C |
 MARSVIDEO_MKFILLBLK.EXIT_SSPR :                                    6001504 C |
 MARSVIDEO_MKFILLBLK.NEXT_SSPR :                                    6001438 C |
 MARSVIDEO_MKFILLBLK.NO_FLIP :                                      600142A C |
 MARSVIDEO_MKFILLBLK.OFF_SSPR :                                     60014FC C |
 MARSVIDEO_MKFILLBLK.X_ROW :                                        60014C8 C |
 MARSVIDEO_MKFILLBLK.X_SQEND :                                      60014C0 C |
 MARSVIDEO_MKFILLBLK.X_SQZ :                                        60014B4 C |
 MARSVIDEO_MKFILLBLK.X_SZEX :                                       6001478 C |
 MARSVIDEO_MKFILLBLK.Y_ROW :                                        60014C6 C |
 MARSVIDEO_MKFILLBLK.Y_SQEND :                                      60014C6 C |
 MARSVIDEO_MKFILLBLK.Y_SQZ :                                        60014BA C |
 MARSVIDEO_MKFILLBLK.Y_SZEX :                                       6001484 C |
 MARSVIDEO_SHOWSCRLBG :     6001134 C |
 MARSVIDEO_SHOWSCRLBG.BAD_Y :                                       600117E C |
 MARSVIDEO_SHOWSCRLBG.LN_LOOP :                                     6001162 C |
 MARSVIDEO_SHOWSCRLBG.XL_R :                                        600116A C |
 MARSVIDEO_SLICEPLGN :      6001708 C |  MARSVIDEO_SLICEPLGN.EXIT : 600180A C |
 MARSVIDEO_SLICEPLGN.FIND_TOP :                                     600177A C |
 MARSVIDEO_SLICEPLGN.IS_HIGH :                                      600178C C |
 MARSVIDEO_SLICEPLGN.IS_LOW :                                       6001782 C |
 MARSVIDEO_SLICEPLGN.LEFTH :                                        60017D2 C |
 MARSVIDEO_SLICEPLGN.LEFTH2 :                                       6001802 C |
 MARSVIDEO_SLICEPLGN.NEXT_PZ :                                      60017AC C |
 MARSVIDEO_SLICEPLGN.SETPNTS :                                      6001740 C |
 MARSVIDEO_SLICEPLGN.SRC_PNTS :                                     6001756 C |
*MARSVIDEO_SLICEPLGN.START_MATH :                                   600176A C |
 MARSVIDEO_SLICEPLGN.TRINGL :                                       6001724 C |
 MARSVIDEO_SLICEPLGN.YTRINGL :                                      6001772 C |
 MARSVIDEO_SUPERSPR_DRAW :  600126C C |
 MARSVIDEO_SUPERSPR_DRAW.NEXT_PIECE :                               6001290 C |
 MARSVIDEO_SUPERSPR_DRAW.NO_SLOT :                                  60012AA C |
 MARSVIDEO_SUPERSPR_MAKE :  60011AC C |
*MARSVIDEO_SUPERSPR_MAKE.EXIT_SSPR :                                6001258 C |
 MARSVIDEO_SUPERSPR_MAKE.FROM_ROM :                                 6001240 C |
 MARSVIDEO_SUPERSPR_MAKE.NEXT_SSPR :                                60011D4 C |
 MARSVIDEO_SUPERSPR_MAKE.OFF_SSPR :                                 6001250 C |
 MARS_CACHEPURGE :          6000FD0 C |  MARS_CACHEPURGE_S :            65C C |
 MARS_CACHERAMCODE :        6000FEC C |  MARS_CACHERAMCODE.COPY :   6001012 C |
 MARS_RAMCODE :                E800 C | *MARS_RAMCODE_E :             362E0 C |
 MARS_RAMCODE_EOF :           36800 C |  MARS_SETWATCHDOG :         6001028 C |
 MARS_WAITVBLANK :          6000954 C |
 MARS_WAITVBLANK.SVDP_LOCKED :                                      6000968 C |
 MARS_WAITVBLANK.WAIT_V :   600095E C |  MASTER_IRQ :               6000250 C |
 MASTER_LOOP :              60008A8 C |  MASTER_LOOP.KEEP_BUFF :    60008D4 C |
 MASTER_LOOP.NON_INIT :     60008F8 C |  MAX_BUFFNTRY :                   8 - |
 MAX_FACES :                    100 - |  MAX_GLOBALS :                  800 - |
 MAX_MARSMSPR :                  18 - |  MAX_MARSOBJ :                   28 - |
 MAX_MARSSPR :                   20 - |  MAX_MARSVRAM :               18000 - |
 MAX_MCDSTAMPS :                 20 - |  MAX_MDDMATSK :                  18 - |
 MAX_MDMAPSPR :                  18 - |  MAX_MDOBJ :                     28 - |
 MAX_PALFDREQ :                   8 - |  MAX_PWMCHNL :                    8 - |
 MAX_RCACH :                     20 - | *MAX_SC0_OPTIONS :                4 - |
 MAX_SCRNBUFF :                1000 - |  MAX_SLOTS :                      3 - |
*MAX_SNDPICK :                    7 - | *MAX_STACKSIZE :                200 - |
 MAX_SYSCODE :                 2C00 - |  MAX_TBLSIZE :                   12 - |
 MAX_TRFRPZ :                     9 - |  MAX_TRKCHN :                    20 - |
 MAX_TRKINDX :                   1A - |  MAX_USERCODE :                8400 - |
 MAX_WRAMBANK :               3F800 - |  MAX_ZCMND :                     20 - |
 MAX_ZDIST :       FFFFFFFFFFFFFD80 - | *MCAM_LEN :                      18 - |
 MCAM_X_POS :                     0 - |  MCAM_X_ROT :                     C - |
 MCAM_Y_POS :                     4 - |  MCAM_Y_ROT :                    10 - |
 MCAM_Z_POS :                     8 - |  MCAM_Z_ROT :                    14 - |
 MCD :                            0 - |  MCDBLOCK :                    1F89 C |
 MCDUPD :                      19D9 C |  MCD_COMM_M :                     E - |
 MCD_COMM_S :                     F - |  MCD_DCOMM_M :                   10 - |
 MCD_DCOMM_S :                   20 - |  MCD_HINT :                       6 - |
*MCD_INTMASK :                   32 - |  MCD_MAIN :                    2800 C |
 MCD_MAIN.CLEANUP :            28A0 C | *MCD_MAIN.COLD_START :         28EC C |
 MCD_MAIN.COPY_CODE :          28B4 C |  MCD_MAIN.COPY_COLORS :        2818 C |
 MCD_MAIN.COPY_NEW :           2886 C |  MCD_MAIN.FADE_OUT :           281E C |
 MCD_MAIN.FM3 :                2908 C |  MCD_MAIN.FS0 :                293A C |
 MCD_MAIN.FS1 :                2944 C |  MCD_MAIN.NEXT_COLOR :         2830 C |
 MCD_MAIN.NOTHING :            2870 C |  MCD_MAIN.NO_BLUE :            286C C |
 MCD_MAIN.NO_GREEN :           2858 C |  MCD_MAIN.NO_RED :             2844 C |
 MCD_MAIN.RES_WAIT :           28F6 C |  MCD_MAIN.SH_WAIT :            28D8 C |
 MCD_MAIN.WAIT_NEXT :          288C C |  MCD_MEMORY :                     3 - |
 MCD_SMPDATA :                 E000 C |  MCD_SMPDATA.HERE :           40006 C |
 MCD_SMPDATA_E :               E800 C |  MDLRD_PERSP :                  5A0 C |
 MDLRD_PERSP.CENTER :           5F6 C |  MDLRD_PERSP.INSIDE :           5EC C |
 MDLRD_PERSP.PATCHME :          5E0 C |  MDLRD_PERSP.ZMULTI :           600 C |
 MDLRD_ROTATE :                 624 C |  MDLRD_SETPOINT :               55C C |
 MDLRD_SETSPPT :                318 C |  MDLRD_SETSPPT.NO_FACECAM :     380 C |
 MDL_GET_HILOW :                53C C |  MDL_GET_HILOW.PICK_NEXT :      542 C |
 MDL_GET_HILOW.X_L :            54A C |  MDL_GET_HILOW.X_R :            550 C |
 MDSTMP_BUFFINCR :               1A - |  MDSTMP_CELLSTORAGE :            12 - |
 MDSTMP_CURROUTFLIP :             E - | *MDSTMP_DOTINCR :                16 - |
*MDSTMP_FDROP :                  10 - |  MDSTMP_FLAGS :                   0 - |
 MDSTMP_LEN :                    1E - |  MDSTMP_STMPOUTB :                C - |
 MDSTMP_VRAMINCR :                A - |  MDSTMP_VRAMLEN :                 8 - |
 MDSTMP_VRAMMAIN :                2 - |  MDSTMP_VRAMSEC :                 4 - |
 MDSTMP_VRAMSIZE :                6 - | *MD_BANK_SRAM :              A130F1 - |
 MD_READMODES :    FFFFFFFFFFFF2AF2 C |
 MD_READMODES.SCREEN_LIST :                                FFFFFFFFFFFF2B34 C |
 MD_SCREEN00 :                36800 C |  MD_SCREEN00_E :              37000 C |
 MD_SCREEN07 :                37000 C |  MD_SCREEN07_E :              38000 C |
 MD_SYSCODE :                  2B4E C |  MD_SYSCODE_E :                571C C |
 MLASTPOS :                   63308 - |  MMDL_DATA :                      4 - |
 MMDL_LEN :                      20 - |  MMDL_X_POS :                     8 - |
 MMDL_X_ROT :                    14 - |  MMDL_Y_POS :                     C - |
 MMDL_Y_ROT :                    1C - |  MMDL_Z_POS :                    10 - |
 MMDL_Z_ROT :                    18 - |  MODE :                          18 - |
*MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
 MONOWIDTH :                     38 - |  MOUSE_X :                        8 - |
 MOUSE_Y :                        A - |  MPADLBL :                    63800 - |
 MPADLBL.THIS_SZ :              4F8 - | *MSCPAUSEOFF :                    4 - |
*MSCPAUSEON :                     3 - | *MSCPLAY :                       11 - |
 MSCPLAY1 :                      12 - |  MSCPLAYR :                      13 - |
*MSCPLAYT :                      14 - | *MSCSCANFF :                      5 - |
*MSCSCANFR :                      6 - | *MSCSCANOFF :                     7 - |
*MSCSEEK :                       15 - | *MSCSEEK1 :                      19 - |
*MSCSEEKT :                      16 - |  MSCSTOP :                        2 - |
 MSPR_FLAGS :                     0 - |  MSPR_FRAME_X :                   7 - |
 MSPR_FRAME_Y :                   8 - |  MSPR_INDX :                      1 - |
 MSPR_LEN :                      20 - |  MSPR_SIZE_H :                    3 - |
 MSPR_SIZE_W :                    2 - |  MSPR_SRCWDTH :                   6 - |
 MSPR_SRC_H :                     5 - |  MSPR_SRC_W :                     4 - |
 MSPR_VRAM :                     1C - |  MSPR_X_POS :                    10 - |
 MSPR_X_ROT :                    16 - |  MSPR_Y_POS :                    12 - |
 MSPR_Y_ROT :                    1A - |  MSPR_Z_POS :                    14 - |
 MSPR_Z_ROT :                    18 - |  MSTRMODE_0 :               600096C C |
 MSTRMODE_0.CLR_MANUAL :    60009B0 C |  MSTRMODE_0.NOT_YET :       60009EA C |
 MSTRMODE_0.STILL_LOCKED :  60009C4 C |  MSTRMODE_0.WAIT_SLVN :     6000986 C |
 MSTRMODE_2D :              6000A84 C |  MSTRMODE_2D.XPU_NEGTV :    6000B34 C |
 MSTRMODE_2D.XPU_NEGTVA :   6000B38 C |  MSTRMODE_2D.XPU_POSTV :    6000B40 C |
 MSTRMODE_2D.X_DONT_SCRL :  6000B9E C |  MSTRMODE_2D.X_PATCH :      6000ACE C |
 MSTRMODE_2D.X_SCRL_L :     6000B74 C |  MSTRMODE_2D.X_SLOOP :      6000B8A C |
 MSTRMODE_2D.YPU_NEGTV :    6000B1A C |  MSTRMODE_2D.YPU_NEGTVA :   6000B1E C |
 MSTRMODE_2D.YPU_POSTV :    6000B26 C |  MSTRMODE_2D.YPU_POSTVA :   6000B2C C |
 MSTRMODE_2D.YX_NEGTV :     6000B00 C |  MSTRMODE_2D.YX_NEGTVA :    6000B04 C |
 MSTRMODE_2D.YX_POSTV :     6000B0C C |  MSTRMODE_2D.YX_POSTVA :    6000B12 C |
 MSTRMODE_2D.YX_TOPTVA :    6000AF8 C |  MSTRMODE_2D.Y_DONT_SCRL :  6000BE8 C |
 MSTRMODE_2D.Y_SCRL_L :     6000BBE C |  MSTRMODE_2D.Y_SLOOP :      6000BD6 C |
 MSTRMODE_2D_I :            6000A04 C |  MSTRMODE_2D_I.CLEAN_UP :   6000A28 C |
 MSTRMODE_2D_I.WAIT_SLVN :  6000A1A C |  MSTRMODE_3D :              6000CD4 C |
 MSTRMODE_3D.CONT_PLGN :    6000D92 C |  MSTRMODE_3D.COPY_CAM :     6000D26 C |
 MSTRMODE_3D.COPY_MSPR :    6000D02 C |  MSTRMODE_3D.COPY_OBJ :     6000D14 C |
 MSTRMODE_3D.HIGHER :       6000DB0 C |  MSTRMODE_3D.INVALID :      6000DE6 C |
 MSTRMODE_3D.LOOP :         6000DCC C |  MSTRMODE_3D.MK_TABLE :     6000D50 C |
 MSTRMODE_3D.PAGE_2 :       6000D8A C |  MSTRMODE_3D.ROLL :         6000D9C C |
 MSTRMODE_3D.SKIP :         6000DEC C |  MSTRMODE_3D.SRCH :         6000DA6 C |
 MSTRMODE_3D.WAIT_PZ :      6000DF0 C |  MSTRMODE_3D.WAIT_SLVI :    6000CEA C |
 MSTRMODE_3D.WAIT_SV :      6000CD8 C |  MSTRMODE_3D.WAIT_WDG :     6000DF6 C |
 MSTRMODE_3D_I :            6000C4C C |  MSTRMODE_3D_I.CLR_ME2D :   6000C70 C |
 MSTRMODE_3D_I.WAIT_SLVN :  6000C62 C |  MSTRMODE_INITEXIT :        60009EE C |
 MSTR_COPYPALETTE :         6000E14 C |
 MSTR_COPYPALETTE.COPY_PAL :                                        6000E26 C |
 MSTR_COPYPALETTE.SVDP_LOCKED :                                     6000E4A C |
 MSTR_LIST :                6000914 C |  MVOL :                          30 - |
 M_IRQ_BAD :                6000380 C |  M_IRQ_CMD :                60003D4 C |
 M_IRQ_CMD.DREQ_RAM :       6000402 C |  M_IRQ_CMD.DREQ_SETDEST :   6000404 C |
 M_IRQ_DMA :                6000398 C |  M_IRQ_DMA.WAIT_DMA :       60003A2 C |
 M_IRQ_H :                  6000428 C |  M_IRQ_PWM :                60003C4 C |
 M_IRQ_V :                  6000438 C |  M_IRQ_VRES :               6000454 C |
 M_IRQ_VRES.RV_BUSY :       600048C C |  M_IRQ_WDG :                6001A14 C |
 M_IRQ_WDG.EXIT_WDG :       6001A50 C |  M_IRQ_WDG.LIST :           6001A6C C |
*M_IRQ_WDG.ON_CLR :         6001A4A C |  M_IRQ_WDG.WAIT_FB :        6001A2A C |
 M_IRQ_WDG.WDG_MAIN :       6001A60 C | *NESTMAX :                      100 - |
 NIKONA_BUFFLIST :             1A04 C | *NIKONA_BUFFLIST_E :           1A1C C |
 OBJECT_ANIMATE :  FFFFFFFFFFFF293A C |
 OBJECT_ANIMATE.EXIT_ANIM :                                FFFFFFFFFFFF29C8 C |
 OBJECT_ANIMATE.GOTOFRAME :                                FFFFFFFFFFFF29BA C |
 OBJECT_ANIMATE.KEEPSPD :                                  FFFFFFFFFFFF2980 C |
 OBJECT_ANIMATE.LASTFRAME :                                FFFFFFFFFFFF29C4 C |
 OBJECT_ANIMATE.NOANIM :                                   FFFFFFFFFFFF29AC C |
 OBJECT_ANIMATE.RETURN :                                   FFFFFFFFFFFF29AA C |
 OBJECT_ANIMATE.SAMETHING :                                FFFFFFFFFFFF2958 C |
 OBJECT_INIT :     FFFFFFFFFFFF2856 C |  OBJECT_INIT.CLR : FFFFFFFFFFFF285E C |
 OBJECT_MAKE :     FFFFFFFFFFFF2898 C |
 OBJECT_MAKE.SEARCH :                                      FFFFFFFFFFFF28A6 C |
*OBJECT_MDMARS_GETSPRINFO :                                FFFFFFFFFFFF2AD0 C |
 OBJECT_RESETANIM :                                        FFFFFFFFFFFF2902 C |
*OBJECT_RESETVARS :                                        FFFFFFFFFFFF28E8 C |
 OBJECT_RESETVARS.CLR_RAM :                                FFFFFFFFFFFF28F6 C |
 OBJECT_RUN :      FFFFFFFFFFFF2866 C |
 OBJECT_RUN.NEXT_ONE :                                     FFFFFFFFFFFF286E C |
 OBJECT_RUN.NO_CODE :                                      FFFFFFFFFFFF287A C |
*OBJECT_SET :      FFFFFFFFFFFF2884 C | *OBJECT_SPEED :    FFFFFFFFFFFF290A C |
*OBJECT_TOUCH :    FFFFFFFFFFFF29CE C |
 OBJECT_TOUCH.CHECK_THIS :                                 FFFFFFFFFFFF2A12 C |
 OBJECT_TOUCH.EXIT_THIS :                                  FFFFFFFFFFFF2A0C C |
 OBJECT_TOUCH.NEXT :                                       FFFFFFFFFFFF29EE C |
 OBJECT_TOUCH.NOT_YTOP :                                   FFFFFFFFFFFF2ACE C |
 OBJECT_TOUCH.RAN_OUT :                                    FFFFFFFFFFFF2A0A C |
 OBJECT_TOUCH.SET_OK :                                     FFFFFFFFFFFF2ACC C |
 OBJECT_TOUCH.SKIP :                                       FFFFFFFFFFFF2A02 C |
 OBJMAP_DODO :               22B284 C |  OBJMAP_FIFI :               22B2CC C |
 OBJMAP_MIMI :               22B2A8 C |  OBJPAL_DODO :               22B264 C |
 OBJSET_ERROR :    FFFFFFFFFFFF28BA C |  OBJSET_GO :       FFFFFFFFFFFF28C4 C |
 OBJSET_GO.CLR :   FFFFFFFFFFFF28D8 C |
 OBJSET_GO.EXIT_THIS :                                     FFFFFFFFFFFF28DE C |
 OBJSET_GO.FROM_DEL :                                      FFFFFFFFFFFF28D2 C |
 OBJ_ANIM_ICUR :                 26 - |  OBJ_ANIM_INDX :                 24 - |
 OBJ_ANIM_NUM :                  22 - |  OBJ_ANIM_SPD :                  27 - |
*OBJ_ATTR :                      1F - |  OBJ_CODE :                       0 - |
 OBJ_FRAME :                     20 - |  OBJ_INDEX :                     1C - |
 OBJ_LEN :                       68 - |  OBJ_RAM :                       28 - |
 OBJ_SIZE_X :                    10 - |  OBJ_SIZE_Y :                    12 - |
 OBJ_SIZE_Z :                    14 - | *OBJ_STATUS :                    1E - |
 OBJ_SUBID :                     1D - |  OBJ_X :                          4 - |
 OBJ_X_SPD :                     16 - |  OBJ_Y :                          8 - |
 OBJ_Y_SPD :                     18 - |  OBJ_Z :                          C - |
 OBJ_Z_SPD :                     1A - |  ONREG :                         11 - |
 ON_HOLD :                        2 - |  ON_PRESS :                       4 - |
 ON_RELEASE :                     6 - | *PACKING :                        0 - |
*PADDING :                        0 - |  PAD_ID :                         0 - |
 PAD_VER :                        1 - |  PALETTECLEAR :                29C8 C |
 PALETTECLEAR.FM2 :            29D2 C |  PALETTECLEAR.PL :             29DE C |
 PALFD_DELAY :                    1 - |  PALFD_INCR :                     3 - |
 PALFD_LEN :                      8 - |  PALFD_NUM :                      6 - |
 PALFD_REQ :                      0 - |  PALFD_START :                    2 - |
*PALFD_TARGET :                   4 - |  PALFD_TIMER :                    5 - |
 PALMODE :                     1F88 C |  PAN :                            3 - |
*PCM :                            0 - |  PCMCOM :                      16DD C |
*PEN :                           20 - |  PICO :                           0 - |
 PLGN_TEXURE :                   80 - |  PLGN_TRI :                      40 - |
 PLYGN_LEN :                     38 - |  PLYGN_MTRL :                     4 - |
 PLYGN_POINTS :                   8 - |  PLYGN_SRCPNTS :                 28 - |
 PLYGN_TYPE :                     0 - | *PLYPZ_LEN :                     30 - |
 PLYPZ_MTRL :                     4 - |  PLYPZ_SRC_XL :                  10 - |
 PLYPZ_SRC_XL_DX :               20 - |  PLYPZ_SRC_XR_DX :               24 - |
 PLYPZ_SRC_YL :                  14 - |  PLYPZ_SRC_YL_DX :               28 - |
 PLYPZ_SRC_YR_DX :               2C - |  PLYPZ_TYPE :                     0 - |
 PLYPZ_XL :                       C - |  PLYPZ_XL_DX :                   18 - |
 PLYPZ_XR_DX :                   1C - |  PLYPZ_YTB :                      8 - |
 PSGCOM :                      1755 C |  PSGFREQ_LIST :                155B C |
 PSGHATMODE :                    2F C | *PSG_CTRL :                  C00011 - |
 PTMR :                          38 - |  PUT_PIECE :                600193C C |
 PUT_PIECE.BAD_PIECE :      60019E6 C |  PUT_PIECE.LEFTH :          600194E C |
 PUT_PIECE.TOP_NEG :        60019D2 C |  PWMCOM :                      171D C |
*PWMCTL :                        31 - |  PWMINTCLR :                     1C - |
 PWMIRQ_ON :                      1 - |  RAM_CDSUB_BRAMSTRINGS :      14AE2 C |
 RAM_CDSUB_BRAMWORK :         144A2 C |  RAM_CDSUB_CURRSAVEINFO :     14492 C |
 RAM_CDSUB_DOTCLEARFLAG :      7190 C |  RAM_CDSUB_FSBUFF :           14412 C |
 RAM_CDSUB_GOTDATA :           BC12 C | *RAM_CDSUB_IRQINDEX :          7198 C |
 RAM_CDSUB_ISOFILES :          7412 C |  RAM_CDSUB_PCMBUFF :           72D2 C |
 RAM_CDSUB_PCMENBL :           719A C | *RAM_CDSUB_PCMMKNEW :          719D C |
 RAM_CDSUB_PCMREQUPD :         719B C |  RAM_CDSUB_PCMTABLE :          73D2 C |
 RAM_CDSUB_SRAMCOPY :         14AEE C |  RAM_CDSUB_STAMPBUSY :         7188 C |
 RAM_CDSUB_STAMPCBUFF :        7194 C |  RAM_CDSUB_STAMPENBL :         7186 C |
 RAM_CDSUB_STAMPH :            7184 C |  RAM_CDSUB_STAMPINDXW :        7192 C |
 RAM_CDSUB_STAMPLIST :         71D2 C |  RAM_CDSUB_STAMPNEXTRD :       718E C |
 RAM_CDSUB_STAMPNEXTWR :       718C C |  RAM_CDSUB_STAMPNUM :          7180 C |
 RAM_CDSUB_STAMPOUTBOX :       71C6 C | *RAM_CDSUB_STAMPPENDING :      7196 C |
 RAM_CDSUB_STAMPPROC :         719E C |  RAM_CDSUB_STAMPREQUPD :       719C C |
 RAM_CDSUB_STAMPSIZE :         718A C |  RAM_CDSUB_STAMPW :            7182 C |
 RAM_EXTERNALJUMP :                                        FFFFFFFFFFFFFB10 C |
 RAM_FRAMECOUNT :  FFFFFFFFFFFFE85C C |
*RAM_GLBL_EXAMPLE_B :                                      FFFFFFFFFFFFB006 C |
*RAM_GLBL_EXAMPLE_L :                                      FFFFFFFFFFFFB000 C |
*RAM_GLBL_EXAMPLE_W :                                      FFFFFFFFFFFFB004 C |
 RAM_HBLANKJUMP :  FFFFFFFFFFFFFB0A C |  RAM_HORSCROLL :   FFFFFFFFFFFFDCC0 C |
 RAM_INDXPALFADE : FFFFFFFFFFFFE860 C |  RAM_INPUTDATA :   FFFFFFFFFFFFEA78 C |
 RAM_MARS_BUFF3D_END :      600FB28 C |  RAM_MARS_BUFF3D_START :    60072E0 C |
 RAM_MARS_CURRPLGNPAGE :   260072D0 C |  RAM_MARS_DREQBUFF_0 :     26004D10 C |
 RAM_MARS_DREQBUFF_1 :     26005730 C |  RAM_MARS_GLOBAL :          6004CB0 C |
 RAM_MARS_OBJCAMERA :       60072E0 C |  RAM_MARS_OBJECTS :         6007320 C |
 RAM_MARS_PLGNLIST_0 :      600EB20 C |  RAM_MARS_PLGNLIST_1 :      600F320 C |
 RAM_MARS_PLGNNUM_0 :       600FB20 C |  RAM_MARS_PLGNNUM_1 :       600FB24 C |
 RAM_MARS_POLYGONS_0 :      6007B20 C |  RAM_MARS_POLYGONS_1 :      600B320 C |
 RAM_MARS_PWMBACKUP :      260062D0 C |  RAM_MARS_PWMLIST :        26006190 C |
 RAM_MARS_PWMTABLE :       26006150 C |  RAM_MARS_SCRLREFILL :          200 C |
*RAM_MARS_SPRDRWCANVAS :    60072E0 C |  RAM_MARS_SPRPOLYGN :       6007820 C |
 RAM_MARS_SVDPDRWLIST :           0 C |  RAM_MARS_SVDPSPRINFO :           0 C |
 RAM_MARS_VRAMDATA :        600FAE0 C | *RAM_MCDEXIT :     FFFFFFFFFFFFFB1C C |
 RAM_MDGLOBAL :    FFFFFFFFFFFFB000 C |
 RAM_MDMARS_COMMBUFF :                                     FFFFFFFFFFFFCE60 C |
 RAM_MDMARS_INDXPALFD :                                    FFFFFFFFFFFFCC1E C |
*RAM_MDMARS_MDLCAMERA :                                    FFFFFFFFFFFFD060 C |
*RAM_MDMARS_MODELS :                                       FFFFFFFFFFFFD380 C |
*RAM_MDMARS_MODELS.SIZEOF_THIS :                           FFFFFFFFFFFFD880 C |
 RAM_MDMARS_MPALFDLIST :                                   FFFFFFFFFFFFCE20 C |
 RAM_MDMARS_MSPRITES :                                     FFFFFFFFFFFFD080 C |
 RAM_MDMARS_PALFD :                                        FFFFFFFFFFFFCC20 C |
 RAM_MDMARS_SCRLDATA :                                     FFFFFFFFFFFFD080 C |
 RAM_MDMARS_SCRLSETT :                                     FFFFFFFFFFFFD060 C |
 RAM_MDMARS_SUPERSPR :                                     FFFFFFFFFFFFD480 C |
*RAM_MDMARS_SUPERSPR.SIZEOF_THIS :                         FFFFFFFFFFFFD680 C |
 RAM_MDMCD_STAMPS :                                        FFFFFFFFFFFFC800 C |
 RAM_MDMCD_STAMPSETT :                                     FFFFFFFFFFFFCC00 C |
 RAM_MDMISC :      FFFFFFFFFFFFC800 C |  RAM_MDSYSTEM :    FFFFFFFFFFFFE878 C |
 RAM_MDVIDCLR_E :  FFFFFFFFFFFFE6D8 C |  RAM_MDVIDEO :     FFFFFFFFFFFFD880 C |
 RAM_MEGACD :              FFFFFD00 - |  RAM_OBJECTS :     FFFFFFFFFFFFEAB8 C |
 RAM_PALETTE :     FFFFFFFFFFFFE5D0 C |  RAM_PALETTEFADE : FFFFFFFFFFFFE650 C |
 RAM_PALFADELIST : FFFFFFFFFFFFD880 C |  RAM_SAVEDATA :    FFFFFFFFFFFFE878 C |
 RAM_SAVEENABLE :  FFFFFFFFFFFFFB16 C |
 RAM_SAVE_COUNTER :                                        FFFFFFFFFFFFE87C C |
*RAM_SAVE_TAG :    FFFFFFFFFFFFE878 C |  RAM_SCREENMODE :  FFFFFFFFFFFFFB18 C |
*RAM_SCREENOPTION :                                        FFFFFFFFFFFFFB1A C |
 RAM_SCRNBUFF :    FFFFFFFFFFFFB800 C |  RAM_SOUNDBUFF :           FFFFFF00 - |
 RAM_SPRITES :     FFFFFFFFFFFFE0D0 C |  RAM_SPRLINKNUM :  FFFFFFFFFFFFE862 C |
 RAM_SPRMAPLIST :  FFFFFFFFFFFFD8C0 C |  RAM_SPROFFSETX :  FFFFFFFFFFFFE6D4 C |
 RAM_SPROFFSETY :  FFFFFFFFFFFFE6D6 C |  RAM_SPRPZLIST :   FFFFFFFFFFFFDA40 C |
*RAM_STACK :               FFFFFD00 - |  RAM_SYSLASTBANK : FFFFFFFFFFFFFB00 C |
 RAM_SYSRANDOM :   FFFFFFFFFFFFFAFC C | *RAM_SYSRANDVAL :  FFFFFFFFFFFFFAF8 C |
 RAM_SYSTEMCODE :  FFFFFFFFFFFF0000 C |  RAM_USERCODE :    FFFFFFFFFFFF2C00 C |
 RAM_USERCODE.END :                                        FFFFFFFFFFFFB000 C |
 RAM_VBLANKJUMP :  FFFFFFFFFFFFFB04 C |  RAM_VDPDMAINDX :  FFFFFFFFFFFFE6D0 C |
 RAM_VDPDMALIST :  FFFFFFFFFFFFE6DC C |  RAM_VDPDMAMOD :   FFFFFFFFFFFFE6D2 C |
 RAM_VDPMAPSIZE :  FFFFFFFFFFFFE86E C |  RAM_VDPREGSET0 :  FFFFFFFFFFFFE870 C |
 RAM_VDPREGSET1 :  FFFFFFFFFFFFE872 C |  RAM_VDPREGSETB :  FFFFFFFFFFFFE874 C |
 RAM_VDPREGSETC :  FFFFFFFFFFFFE876 C |  RAM_VDPVRAMBG :   FFFFFFFFFFFFE866 C |
 RAM_VDPVRAMFG :   FFFFFFFFFFFFE864 C |
 RAM_VDPVRAMHSCRL :                                        FFFFFFFFFFFFE86C C |
 RAM_VDPVRAMSPR :  FFFFFFFFFFFFE86A C |  RAM_VDPVRAMWD :   FFFFFFFFFFFFE868 C |
 RAM_VERSCROLL :   FFFFFFFFFFFFE080 C |  RAM_ZCDFLAGD :            FFFFFF00 - |
*RCHWIDTH :                      36 - |  READROM :                     11DE C |
 READROM.DOUBLE :              1201 C |  READROM.FROM_RAM :            1225 C |
 READROM.TRANSFER :            1245 C |  READROM.WAIT :                123C C |
 READROM.X68KLAST :            127E C |  READROM.X68KLOOP :            126A C |
 READROM.X68KLPWT :            128C C |  READROM.X68KNOCARRY :         121F C |
*RELAXED :                        0 - | *RES :                            2 - |
*ROMPAUSEOFF :                    9 - | *ROMPAUSEON :                     8 - |
*ROMREAD :                       17 - | *ROMREADE :                      21 - |
 ROMREADN :                      20 - | *ROMSEEK :                       18 - |
*ROM_END :                    63800 C |  RRT :                           14 - |
 SAMPLEHEAD :                  19F6 C |  SAMPLE_RATE :                 3E80 - |
 SBEATACC :                      31 C |  SBEATPTCK :                     33 C |
*SCDINIT :                       8E - | *SCDPQ :                         93 - |
*SCDPQL :                        94 - | *SCDREAD :                       92 - |
*SCDSTART :                      8F - | *SCDSTAT :                       91 - |
*SCDSTOP :                       90 - |  SCMD_TASKS :               6000534 C |
*SCMD_TASKS.COPY_1 :        60005E8 C |  SCMD_TASKS.COPY_DATA :     6000574 C |
 SCMD_TASKS.EXIT_C :        60005F6 C |  SCMD_TASKS.EXIT_SCMD :     60006DE C |
 SCMD_TASKS.IS_KEYCUT :     60006D0 C |  SCMD_TASKS.NEXT_CHNL :     60005FC C |
 SCMD_TASKS.NEXT_ONE :      6000550 C |  SCMD_TASKS.NEXT_OUT :      60005BA C |
 SCMD_TASKS.NO_CHNG :       60006D4 C |  SCMD_TASKS.NO_CHNL :       60005A4 C |
 SCMD_TASKS.NO_CHNLO :      60005CA C | *SCMD_TASKS.NO_KEYCUT :     6000606 C |
 SCMD_TASKS.NO_PITCHBND :   6000638 C | *SCMD_TASKS.PROC_PWM :      60005F6 C |
 SCMD_TASKS.SCMD_TASK00 :   6000544 C |  SCMD_TASKS.SCMD_TASK01 :   60005D4 C |
 SCMD_TASKS.SCMD_TASK02 :   6000548 C |  SCMD_TASKS.SCMD_TASK03 :   60005B4 C |
 SCMD_TASKS.WAIT_1 :        60005DC C | *SCPU_BRAM :               FFFE8000 - |
 SCPU_CMDLIST :                6104 C |  SCPU_DATA :                  40000 C |
 SCPU_INIT :                   602A C |  SCPU_INIT.CLR_RAM :           6064 C |
 SCPU_INIT.DRV_INIT :          6094 C |  SCPU_INIT.SUB_FILE :          6096 C |
 SCPU_IRQ :                    60AA C |  SCPU_IRQ.NOT_REQ :            60C8 C |
 SCPU_IRQ.NOT_SOUND :          60BE C |  SCPU_MAIN :                   60CE C |
 SCPU_PCM :                FFFF0000 - |  SCPU_RAM :                    7180 C |
 SCPU_REG :                FFFF8000 - |  SCPU_STAMP :                  60A4 C |
 SCPU_TIMER :                  60CA C |  SCPU_USER :                   60CC C |
 SCPU_WRAM :                  80000 - |  SCRLDRW_DRAWBLK :          6001608 C |
*SCRLDRW_DRAWBLK.END_LINE : 6001702 C |
 SCRLDRW_DRAWBLK.NEXT_LINE :                                        6001640 C |
 SCRLDRW_DRAWBLK.NEXT_ZLINE :                                       600160E C |
 SCRLDRW_DRAWBLK.NORMAL :   6001634 C |  SCRLDRW_DRAWBLK.TL_SNAP :  6001646 C |
 SCRLDRW_DRAWBLK.TL_SNAPZ : 6001614 C |  SCRLDRW_SSPRDRAW :         60012B8 C |
 SCRLDRW_SSPRDRAW.DRW_HALF :                                        60013AE C |
 SCRLDRW_SSPRDRAW.HALF_1 :  60013AA C |  SCRLDRW_SSPRDRAW.HALF_2 :  60013A4 C |
 SCRLDRW_SSPRDRAW.HALF_3 :  60013A8 C |  SCRLDRW_SSPRDRAW.TL_H :    60013C4 C |
 SCRLDRW_SSPRDRAW.TL_SNAP : 6001348 C |  SCRLDRW_SSPRDRAW.TL_X :    600135C C |
 SCRLDRW_SSPRDRAW.WRT_0 :   60013C8 C |  SCRLDRW_SSPRDRAW.XR_LEFT : 60013DA C |
 SCRLDRW_SSPRDRAW.XY_FLIP : 60012E6 C |
 SCRLDRW_SSPRDRAW.XY_XWRAP :                                        60012DE C |
 SCRLDRW_SSPRDRAW.X_FLIP :  6001308 C |
 SCRLDRW_SSPRDRAW.X_GIVEUP :                                        60013E4 C |
 SCRLDRW_SSPRDRAW.X_LOOP :  6001356 C |  SCRLDRW_SSPRDRAW.X_MSWAP : 600138C C |
 SCRLDRW_SSPRDRAW.Y_BOT :   6001330 C | *SCRLDRW_SSPRDRAW.Y_END :   60013F6 C |
 SCRLDRW_SSPRDRAW.Y_FLIP :  60012F8 C |  SCRLDRW_SSPRDRAW.Y_FLIPR : 600133E C |
*SCRLDRW_SSPRDRAW.Y_LAST :  60013F6 C |  SCRLDRW_SSPRDRAW.Y_LOOP :  6001342 C |
*SCRLDRW_SSPRDRAW.Y_LOW :   60012C4 C |  SCRLDRW_SSPRDRAW.Y_MID :   60012CA C |
 SCRLDRW_SSPRDRAW.Y_OK :    60012D2 C |  SCRLDRW_SSPRDRAW.Y_RFLIP : 600131C C |
 SCRLDRW_SSPRDRAW.Y_RFLIPC :                                        600131E C |
 SCRLDRW_SSPRDRAW.Y_TOP :   6001320 C |  SCRLDRW_SSPRDRAW.Z_0 :     6001366 C |
 SCRLDRW_SSPRDRAW.Z_1 :     600136E C |  SCRLDRW_SSPRDRAW.Z_2 :     6001376 C |
 SCRLDRW_SSPRDRAW.Z_3 :     600137E C |  SEQ_BANKBLK :                   16 - |
 SEQ_BANKHEADS :                 15 - |  SEQ_BLOCKS :                     4 - |
 SEQ_CACH :                       8 - |  SEQ_CACHHALF :                  10 - |
 SEQ_CHNINDX :                   25 - |  SEQ_CURRBLK :                   13 - |
 SEQ_MAXCHNL :                   17 - |  SEQ_NUM :                        1 - |
 SEQ_PATT :                       6 - |  SEQ_PRIORITY :                  14 - |
 SEQ_READ :                       A - |  SEQ_ROMBLKS :                   22 - |
 SEQ_ROMINST :                   1F - |  SEQ_ROMPATT :                   1C - |
 SEQ_ROMPATTREAD :               19 - |  SEQ_ROWPAUSE :                  11 - |
 SEQ_ROWS :                       C - |  SEQ_SETBLK :                     2 - |
 SEQ_STATUS :                     0 - |  SEQ_TICKSET :                    3 - |
 SEQ_TICKTMR :                   12 - |  SEQ_VOLFDTARGET :               18 - |
 SEQ_VOLMASTER :                  E - |  SET_3DFIELD_HGHT :              E0 - |
 SET_3DFIELD_WDTH :             140 - |  SET_CHIPS :                    5FE C |
*SET_DEFAUTODMA :               480 - |  SET_ENBLSAVE :                   1 - |
 SET_FBVRAM_PATCH :           1E000 - |  SET_FIRSTSCRN :                  0 - |
 SET_LEFT :                 600182C C |  SET_LEFT.LFT_OK :          600184E C |
 SET_LEFT.LFT_SKIP :        60018AE C |  SET_MSCRLHGHT :                 F0 - |
 SET_MSCRLSIZE :                 10 - |  SET_MSCRLWDTH :                150 - |
 SET_NULLVRAM :                 7FE - |  SET_PCMBLK :                   100 - |
 SET_PCMLAST :                  F00 - |  SET_RAMLIMIT :              FFFC00 - |
 SET_RIGHT :                60018B4 C |  SET_RIGHT.RGT_OK :         60018D6 C |
 SET_RIGHT.RGT_SKIP :       6001936 C | *SET_SNDVIEWY :                  10 - |
 SET_SRAMSIZE :                 200 - |  SET_STAMPPOV :                 100 - |
 SET_TILEMAX :                  200 - |  SH2_DEBUG :                      1 - |
 SH2_END :                  6027AE0 C |  SH2_MASTER :               6000000 C |
 SH2_M_ENTRY :              60007AC C |  SH2_M_ENTRY.CLEAN_UP :     6000814 C |
 SH2_M_ENTRY.COPY_NEW :     6000824 C |  SH2_M_ENTRY.EXIT_CLEAN :   600081E C |
 SH2_M_ENTRY.EXIT_SEND :    6000830 C |  SH2_M_ENTRY.WAITL :        6000802 C |
 SH2_M_ENTRY.WAIT_FRM :     6000808 C |  SH2_M_ERRADDR :            600032C C |
 SH2_M_ERRCODE :            600033C C |  SH2_M_ERRDMA :             6000330 C |
 SH2_M_ERRILLG :            6000324 C |  SH2_M_ERRINVL :            6000328 C |
 SH2_M_ERRNMI :             6000334 C |  SH2_M_ERROR :              6000320 C |
 SH2_M_ERRUSER :            6000338 C |  SH2_M_HOTSTART :           6000836 C |
 SH2_M_HOTSTART.WAIT_SLV :  6000854 C |  SH2_RAM :                  60072E0 C |
 SH2_RAM_TH :               6004D10 C |  SH2_SLAVE :                6000128 C |
 SH2_S_ENTRY :              6000EA4 C |  SH2_S_ENTRY.WAIT_MSTR :    6000EF4 C |
 SH2_S_ERRADDR :            6000358 C |  SH2_S_ERRCODE :            6000368 C |
 SH2_S_ERRDMA :             600035C C |  SH2_S_ERRILLG :            6000350 C |
 SH2_S_ERRINVL :            6000354 C |  SH2_S_ERRNMI :             6000360 C |
 SH2_S_ERROR :              600034C C |  SH2_S_ERRUSER :            6000364 C |
 SH2_S_HOTSTART :           6000F04 C |  SH2_S_HOTSTART.WAIT_MST :  6000F20 C |
*SH2_USER_DATA :            6027AE0 C | *SH2_USER_DATA.END :        6027AE0 C |
 SHIFT :                          2 - |  SIN_TABLE :                60024AC C |
 SIZEOF_INPUT :                  10 - | *SIZEOF_MARSRAM_0 :         600E5E0 C |
*SIZEOF_MARSRAM_1 :         600FB28 C |  SIZEOF_MDGLBL :   FFFFFFFFFFFFB008 C |
 SIZEOF_MDMISC :   FFFFFFFFFFFFD880 C |  SIZEOF_MDRAM :    FFFFFFFFFFFFFB1E C |
 SIZEOF_MDSYS :    FFFFFFFFFFFFFB1E C |  SIZEOF_MDVID :    FFFFFFFFFFFFE878 C |
 SIZEOF_SAVEINFO : FFFFFFFFFFFFE882 C | *SIZEOF_SUBCPU :              14CEE C |
 SLAVE_IRQ :                6000278 C |  SLAVE_LOOP :               6000F60 C |
 SLV :                           10 - |  SLVMODE_00 :               6000F9C C |
 SLVMODE_01 :               6000FA0 C |  SLVPLGN_00 :               6001DCC C |
 SLVPLGN_01 :               6001A8C C |  SLVPLGN_05 :               6001AD4 C |
 SLVPLGN_05.EXIT :          6001AE6 C |  SLVPLGN_05.HAS_PZ :        6001AEC C |
 SLVPLGN_06 :               6001A92 C |  SLV_LIST :                 6000F7C C |
 SNDLOCKZ80 :      FFFFFFFFFFFF0088 C |  SNDLOCKZ80.WAIT : FFFFFFFFFFFF0090 C |
 SNDREQ_ENTER :    FFFFFFFFFFFF00FA C |
 SNDREQ_ENTER.WAIT :                                       FFFFFFFFFFFF0120 C |
 SNDREQ_EXIT :     FFFFFFFFFFFF0130 C | *SNDREQ_SADDR :    FFFFFFFFFFFF015E C |
 SNDREQ_SBYTE :    FFFFFFFFFFFF0166 C |  SNDREQ_SCMD :     FFFFFFFFFFFF014C C |
 SNDREQ_SLONG :    FFFFFFFFFFFF015A C |  SNDREQ_SWORD :    FFFFFFFFFFFF0162 C |
 SNDUNLOCKZ80 :    FFFFFFFFFFFF009C C |  SOUND_INIT :      FFFFFFFFFFFF1F54 C |
 SOUND_UPDATE :    FFFFFFFFFFFF1F50 C |  SPCDDA_RESETVOLUME :          6428 C |
 SPINITFS :                    6536 C |  SPREADSECTORSN :              64AE C |
 SPREADSECTORSN.WAITTRANSFER : 650A C |  SPREADSECTORSN.WAIT_READ :    64F4 C |
 SPREADSECTORSN.WAIT_STAT :    64E2 C |  SPSEARCHFILE :                6572 C |
 SPSEARCHFILE.CHK_STR :        659C C |  SPSEARCHFILE.FAILED_SRCH :    65C0 C |
 SPSEARCHFILE.FOUND_FILE :     65AC C |  SPSEARCHFILE.NEXT_FILE :      657E C |
 SPSEARCHFILE.NON_FILE :       65A8 C |  SP_END :                      2180 C |
 SP_START :                    1000 C | *SSCRL_LEN :                      C - |
 SSCRL_VRAM :                     8 - |  SSCRL_X_POS :                    0 - |
 SSCRL_Y_POS :                    4 - |  SSPR_FLAGS :                     0 - |
 SSPR_FRAME :                     2 - |  SSPR_INDX :                      6 - |
 SSPR_LEN :                      10 - |  SSPR_SIZE :                      4 - |
 SSPR_VRAM :                      C - |  SSPR_X_POS :                     8 - |
 SSPR_Y_POS :                     A - |  ST :                             D - |
 STACK_MSTR :              C0000800 - |  STACK_SLV :               C0000800 - |
 STANDBY :                        3 - | *STMPC_DX :                       C - |
*STMPC_DY :                      10 - |  STMPC_LEN :                     28 - |
 STMPC_ROT_COS :                 26 - |  STMPC_ROT_SIN :                 24 - |
 STMPC_TX :                      14 - |  STMPC_TY :                      18 - |
 STMPC_X :                        4 - |  STMPC_XC :                       0 - |
 STMPC_XMUL :                    1C - |  STMPC_Y :                        8 - |
 STMPC_YC :                       2 - |  STMPC_ZMUL :                    1E - |
 STMPC_ZMUL_COS :                22 - |  STMPC_ZMUL_SIN :                20 - |
*STMPI_FLAGS :                    A - |  STMPI_LEN :                      C - |
 STMPI_MAP :                      0 - |  STMPI_X :                        2 - |
 STMPI_XR :                       6 - |  STMPI_Y :                        4 - |
 STMPI_YD :                       8 - |  SUBTASK_CMND00 :              6144 C |
 SUBTASK_CMND01 :              6146 C |  SUBTASK_CMND01.EXIT_NOW :     61B0 C |
 SUBTASK_CMND01.NEXT_PACKET :  616A C |  SUBTASK_CMND01.WAIT_MAIN :    6188 C |
 SUBTASK_CMND01.WAIT_MAIN_O :  61A4 C |  SUBTASK_CMND02 :              61B8 C |
 SUBTASK_CMND02.WAIT_RET :     61EC C |  SUBTASK_CMND04 :              61F8 C |
 SUBTASK_CMND04.EXIT_NOW :     6266 C |  SUBTASK_CMND04.NEXT_PACKET :  6228 C |
 SUBTASK_CMND04.WAIT_ENTER :   6204 C |  SUBTASK_CMND04.WAIT_MAIN :    624E C |
 SUBTASK_CMND07 :              6268 C |  SUBTASK_CMND08 :              6274 C |
 SUBTASK_CMND08.BIG_FAIL :     62C8 C |  SUBTASK_CMND08.COPY_PASTE :   6286 C |
 SUBTASK_CMND09 :              62D6 C |  SUBTASK_CMND09.SEND_DATA :    631A C |
 SUBTASK_CMND09.WAIT_LOCK :    6304 C |  SUBTASK_CMND09.WAIT_SIGNI :   6332 C |
 SUBTASK_CMND09.WAIT_SIGNO :   6340 C |  SUBTASK_CMND0A :              634E C |
 SUBTASK_CMND0A.EXIT_NOW :     63A8 C |  SUBTASK_CMND0A.MAIN_LOOP :    6370 C |
 SUBTASK_CMND0A.WAIT_LOCK :    635E C |  SUBTASK_CMND0A.WAIT_PASS :    6398 C |
 SUBTASK_CMND10 :              63E4 C |  SUBTASK_CMND11 :              63FA C |
 SUBTASK_CMND14 :              6410 C |  SUBTASK_CMND16 :              641A C |
 SUBTASK_CMND17 :              6428 C |  SUBTASK_CMND18 :              644A C |
 SUBTASK_CMND19 :              647E C |  SUBTASK_CMND19.SET_RET :      64A4 C |
 SUBTASK_RETERR_NOFILE :       63DC C |  SUBTSK_BRAMCALL :             63C2 C |
 SUBTSK_RETURNFAIL :           63D4 C |  SYSBCD_SPOUT :    FFFFFFFFFFFF24E2 C |
*SYSMARS_FRAMEBUFFER :       840000 - |  SYSMARS_ID :                A130EC - |
*SYSMARS_OVERWRITE :         860000 - |  SYSMARS_REG :               A15100 - |
*SYSMARS_SVDP :              A15180 - |  SYSMCD_REG :                A12000 - |
 SYSMCD_WRAM :               200000 - |
 SYSMDMCD_SETCDDA :                                        FFFFFFFFFFFF26EA C |
 SYSMDMCD_SETCDDA.FAIL_SAFE :                              FFFFFFFFFFFF2702 C |
 SYSRND_MKVALUE :  FFFFFFFFFFFF22F8 C |
 SYSRND_MKVALUE.HAS_SEED :                                 FFFFFFFFFFFF230A C |
*SYSTEM_BCD_ADDB : FFFFFFFFFFFF24BA C |  SYSTEM_BCD_ADDL : FFFFFFFFFFFF24C8 C |
*SYSTEM_BCD_ADDW : FFFFFFFFFFFF24C2 C | *SYSTEM_BCD_SUBB : FFFFFFFFFFFF2492 C |
 SYSTEM_BCD_SUBL : FFFFFFFFFFFF24A0 C | *SYSTEM_BCD_SUBW : FFFFFFFFFFFF249A C |
 SYSTEM_DEFAULT :  FFFFFFFFFFFF22B8 C |
 SYSTEM_DEFAULT.CLR_LOOP :                                 FFFFFFFFFFFF22C6 C |
 SYSTEM_DICEROLL : FFFFFFFFFFFF2342 C |
*SYSTEM_DICEROLL_SEED :                                    FFFFFFFFFFFF2322 C |
 SYSTEM_DMAENTER_RAM :                                     FFFFFFFFFFFF1F48 C |
 SYSTEM_DMAENTER_ROM :                                     FFFFFFFFFFFF1F0E C |
 SYSTEM_DMAEXIT_RAM :                                      FFFFFFFFFFFF1F4C C |
 SYSTEM_DMAEXIT_ROM :                                      FFFFFFFFFFFF1F12 C |
 SYSTEM_INIT :     FFFFFFFFFFFF1E08 C |
 SYSTEM_INIT.CLRINPUT :                                    FFFFFFFFFFFF1E70 C |
 SYSTEM_INIT.WAIT :                                        FFFFFFFFFFFF1E14 C |
 SYSTEM_INPUT :    FFFFFFFFFFFF1F58 C |
 SYSTEM_INPUT.EXIT :                                       FFFFFFFFFFFF1F84 C |
 SYSTEM_INPUT.ID_03 :                                      FFFFFFFFFFFF1FDA C |
 SYSTEM_INPUT.ID_0D :                                      FFFFFFFFFFFF2084 C |
 SYSTEM_INPUT.INVALID :                                    FFFFFFFFFFFF207E C |
 SYSTEM_INPUT.LIST :                                       FFFFFFFFFFFF1FBA C |
 SYSTEM_INPUT.OLDPAD :                                     FFFFFFFFFFFF210A C |
 SYSTEM_INPUT.PICK_ID :                                    FFFFFFFFFFFF1F8A C |
 SYSTEM_INPUT.READ :                                       FFFFFFFFFFFF1FA0 C |
 SYSTEM_INPUT.STEP_1 :                                     FFFFFFFFFFFF1FAC C |
 SYSTEM_INPUT.STEP_2 :                                     FFFFFFFFFFFF1FB8 C |
 SYSTEM_INPUT.THIS_ONE :                                   FFFFFFFFFFFF1F6C C |
 SYSTEM_INPUT.X_NEG :                                      FFFFFFFFFFFF204C C |
 SYSTEM_INPUT.Y_NEG :                                      FFFFFFFFFFFF2078 C |
 SYSTEM_MDMARS_SENDDATA :                                  FFFFFFFFFFFF2746 C |
 SYSTEM_MDMARS_SENDDATA.EXIT_NOW :                         FFFFFFFFFFFF2772 C |
 SYSTEM_MDMARS_SENDDATA.LARGE_PACK :                       FFFFFFFFFFFF275E C |
 SYSTEM_MDMARS_UPDATE :                                    FFFFFFFFFFFF2786 C |
*SYSTEM_MDMCD_CDDAFADE :                                   FFFFFFFFFFFF2716 C |
*SYSTEM_MDMCD_CDDAPLAY :                                   FFFFFFFFFFFF26D8 C |
*SYSTEM_MDMCD_CDDAPLAYL :                                  FFFFFFFFFFFF26E2 C |
 SYSTEM_MDMCD_CDDASTOP :                                   FFFFFFFFFFFF2708 C |
 SYSTEM_MDMCD_CHECKHOME :                                  FFFFFFFFFFFF2696 C |
 SYSTEM_MDMCD_CHECKHOME.NOT_PRESS :                        FFFFFFFFFFFF26BC C |
 SYSTEM_MDMCD_CHECKWRAM :                                  FFFFFFFFFFFF258A C |
 SYSTEM_MDMCD_CHECKWRAM.NO_RET :                           FFFFFFFFFFFF259A C |
 SYSTEM_MDMCD_EXITSHELL :                                  FFFFFFFFFFFF26C6 C |
 SYSTEM_MDMCD_GIVEWRAM :                                   FFFFFFFFFFFF25A0 C |
 SYSTEM_MDMCD_INTERRUPT :                                  FFFFFFFFFFFF2514 C |
 SYSTEM_MDMCD_RDFILE_RAM :                                 FFFFFFFFFFFF25AC C |
 SYSTEM_MDMCD_RDFILE_RAM.COPY_RAM :                        FFFFFFFFFFFF25EA C |
 SYSTEM_MDMCD_RDFILE_RAM.WAIT_SUB :                        FFFFFFFFFFFF2618 C |
 SYSTEM_MDMCD_RDFILE_WRAM :                                FFFFFFFFFFFF264E C |
*SYSTEM_MDMCD_SUBENTER :                                   FFFFFFFFFFFF2530 C |
 SYSTEM_MDMCD_SUBENTER.WAIT_SUB_O :                        FFFFFFFFFFFF2532 C |
 SYSTEM_MDMCD_SUBTASK :                                    FFFFFFFFFFFF253E C |
 SYSTEM_MDMCD_SUBTASK.MAKE_SURE :                          FFFFFFFFFFFF255A C |
 SYSTEM_MDMCD_SUBTASK.WAIT_FIRST :                         FFFFFFFFFFFF2548 C |
 SYSTEM_MDMCD_SUBTASK.WAIT_SUB_I :                         FFFFFFFFFFFF2564 C |
 SYSTEM_MDMCD_SUBWAIT :                                    FFFFFFFFFFFF2522 C |
 SYSTEM_MDMCD_SUBWAIT.WAIT_SUB_O :                         FFFFFFFFFFFF2524 C |
 SYSTEM_MDMCD_WAITWRAM :                                   FFFFFFFFFFFF257E C |
 SYSTEM_RANDOM :   FFFFFFFFFFFF22E8 C |
 SYSTEM_RANDOM_SEED :                                      FFFFFFFFFFFF22DE C |
 SYSTEM_RENDER :   FFFFFFFFFFFF1E80 C |
 SYSTEM_RENDER.FORGOT_DISP :                               FFFFFFFFFFFF1EF8 C |
 SYSTEM_RENDER.FROM_LATE :                                 FFFFFFFFFFFF1EEA C |
 SYSTEM_RENDER.GOT_LATE :                                  FFFFFFFFFFFF1EBC C |
 SYSTEM_RENDER.MARS_FREE :                                 FFFFFFFFFFFF1EDA C |
 SYSTEM_RENDER.MARS_SYNC :                                 FFFFFFFFFFFF1ED4 C |
*SYSTEM_RENDER.MARS_WAIT :                                 FFFFFFFFFFFF1EB0 C |
 SYSTEM_RENDER.WAIT_EARLY :                                FFFFFFFFFFFF1E8E C |
 SYSTEM_RENDER.WAIT_VBLANK :                               FFFFFFFFFFFF1EFA C |
 SYSTEM_SETDATABANK :                                      FFFFFFFFFFFF280E C |
 SYSTEM_SETDATABANK.FOUND_IT :                             FFFFFFFFFFFF2844 C |
 SYSTEM_SETDATABANK.FROM_ERR :                             FFFFFFFFFFFF2850 C |
 SYSTEM_SETDATABANK.RAN_OUT :                              FFFFFFFFFFFF283E C |
 SYSTEM_SETDATABANK.SAME_BANK :                            FFFFFFFFFFFF284C C |
 SYSTEM_SETDATABANK.SRCH_CDBANK :                          FFFFFFFFFFFF282A C |
 SYSTEM_SETINTJUMPS :                                      FFFFFFFFFFFF24FA C |
 SYSTEM_SETINTJUMPS.NO_EXINT :                             FFFFFFFFFFFF2512 C |
 SYSTEM_SETINTJUMPS.NO_HINT :                              FFFFFFFFFFFF250A C |
 SYSTEM_SETINTJUMPS.NO_VINT :                              FFFFFFFFFFFF2502 C |
 SYSTEM_SINEWAVE : FFFFFFFFFFFF2366 C |
 SYSTEM_SINEWAVE_COS :                                     FFFFFFFFFFFF235C C |
 SYSTEM_SRAMINIT : FFFFFFFFFFFF2110 C |
 SYSTEM_SRAMINIT.ALREADY_SET :                             FFFFFFFFFFFF217E C |
*SYSTEM_SRAMINIT.CANT_USE :                                FFFFFFFFFFFF217C C |
 SYSTEM_SRAMINIT.CLR_SRAM :                                FFFFFFFFFFFF2164 C |
 SYSTEM_SRAMINIT.CONT_SAVE :                               FFFFFFFFFFFF217A C |
 SYSTEM_SRAMINIT.COPY_PASTE :                              FFFFFFFFFFFF2126 C |
*SYSTEM_SRAMINIT.NOT_FAIL :                                FFFFFFFFFFFF2146 C |
 SYSTEM_SRAMLOAD : FFFFFFFFFFFF2180 C |
 SYSTEM_SRAMLOAD.CANT_USE :                                FFFFFFFFFFFF2222 C |
 SYSTEM_SRAMLOAD.EXIT_NOW :                                FFFFFFFFFFFF2210 C |
 SYSTEM_SRAMLOAD.GET_DATA :                                FFFFFFFFFFFF21CE C |
 SYSTEM_SRAMLOAD.SET_BAD :                                 FFFFFFFFFFFF221C C |
 SYSTEM_SRAMLOAD.WAIT_SIGNO :                              FFFFFFFFFFFF21FC C |
 SYSTEM_SRAMLOAD.WAIT_SUB :                                FFFFFFFFFFFF21A6 C |
 SYSTEM_SRAMSAVE : FFFFFFFFFFFF2224 C |
 SYSTEM_SRAMSAVE.CANT_USE :                                FFFFFFFFFFFF22B6 C |
 SYSTEM_SRAMSAVE.SEND_DATA :                               FFFFFFFFFFFF226A C |
 SYSTEM_SRAMSAVE.SET_BAD :                                 FFFFFFFFFFFF22B0 C |
 SYSTEM_SRAMSAVE.WAIT_SIGNI :                              FFFFFFFFFFFF2284 C |
 SYSTEM_SRAMSAVE.WAIT_SIGNO :                              FFFFFFFFFFFF2296 C |
 SYSTEM_SRAMSAVE.WAIT_SUB :                                FFFFFFFFFFFF224A C |
 SYS_CTRL_1 :                A10009 - |  SYS_CTRL_2 :                A1000B - |
 SYS_CTRL_3 :                A1000D - |  SYS_DATA_1 :                A10003 - |
*SYS_DATA_2 :                A10005 - | *SYS_DATA_3 :                A10007 - |
 SYS_IO :                    A10001 - |  SYS_MARSSLVCMD :  FFFFFFFFFFFF1F14 C |
 SYS_MARSSLVCMD.WAIT_EXIT :                                FFFFFFFFFFFF1F3A C |
 SYS_MSENDDATA :   FFFFFFFFFFFF27A8 C |
 SYS_MSENDDATA.LOOP_FIFO :                                 FFFFFFFFFFFF27F0 C |
 SYS_MSENDDATA.NO_SRC :                                    FFFFFFFFFFFF27C6 C |
 SYS_MSENDDATA.WAIT_BIT :                                  FFFFFFFFFFFF27E2 C |
 SYS_MSENDDATA_0 : FFFFFFFFFFFF2778 C |  SYS_SINEWAVE :    FFFFFFFFFFFF236A C |
 SYS_SINEWAVE.LOC_7EFA :                                   FFFFFFFFFFFF2378 C |
 SYS_SINEWAVE.LOC_7F0C :                                   FFFFFFFFFFFF238A C |
 SYS_SINEWAVE.SINE_DATA :                                  FFFFFFFFFFFF2390 C |
*SYS_SRAM :                  200000 - | *SYS_TMSS :                  A14000 - |
 S_IRQ_BAD :                60004D4 C |  S_IRQ_CMD :                60004F4 C |
 S_IRQ_DMA :                60004E4 C |  S_IRQ_H :                  600072A C |
 S_IRQ_PWM :                      0 C |  S_IRQ_PWM.CHNL_OFF :            F6 C |
 S_IRQ_PWM.CHNL_SILN :           42 C |  S_IRQ_PWM.DO_MONO :             A6 C |
 S_IRQ_PWM.DO_VOL :              BE C |  S_IRQ_PWM.ENABLED :             48 C |
 S_IRQ_PWM.FIFO_FREE :           1C C |  S_IRQ_PWM.FIFO_LOOP :           32 C |
 S_IRQ_PWM.GO_WAVE :             A8 C |  S_IRQ_PWM.KEEP :                76 C |
 S_IRQ_PWM.LOOPIT :              70 C |  S_IRQ_PWM.L_LOW :               E4 C |
 S_IRQ_PWM.L_MAX :              108 C |  S_IRQ_PWM.ML_OUT :              B8 C |
*S_IRQ_PWM.MNON_Z :              B2 C |  S_IRQ_PWM.NEXT_CHNL :           3A C |
 S_IRQ_PWM.NOT_BACKUP :          8C C |  S_IRQ_PWM.PWM_FULL :           136 C |
*S_IRQ_PWM.READ_WAV :            90 C |  S_IRQ_PWM.R_LOW :               EA C |
 S_IRQ_PWM.R_MAX :              10E C |  S_IRQ_PWM.STAND :               98 C |
 S_IRQ_PWM.ST_PITCH :            52 C |  S_IRQ_V :                  600073C C |
 S_IRQ_VRES :               600074C C |  S_IRQ_VRES.RV_BUSY :       6000784 C |
 S_IRQ_WDG :                60004D8 C |  TAG_SRAMDATA :              "SAVE" - |
 TBLBUFF_READ :                 63E C |  TBLBUFF_READ.DONT_RES :        6FC C |
 TBLBUFF_READ.DO_CHIP :         696 C |  TBLBUFF_READ.FOUND_TNEW :      77E C |
 TBLBUFF_READ.GOT_LINK :        737 C |  TBLBUFF_READ.GRAB_LINK :       6E0 C |
 TBLBUFF_READ.HAS_INDX :        672 C |  TBLBUFF_READ.INVLDL :          724 C |
*TBLBUFF_READ.L_HIPRIO :        7BB C |  TBLBUFF_READ.NEW_CHIP :        75D C |
 TBLBUFF_READ.NEW_LINK :        7B8 C |  TBLBUFF_READ.NEXTSRCH_TBL :    7C9 C |
 TBLBUFF_READ.NEXT_INDX :       66C C |  TBLBUFF_READ.NEXT_PRIO :       783 C |
 TBLBUFF_READ.NOT_SAMEL :       759 C |  TBLBUFF_READ.NO_INDX :         68E C |
 TBLBUFF_READ.OVRW_LINK :       7B0 C |  TBLBUFF_READ.PASS_2 :          782 C |
 TBLBUFF_READ.PICK_TBL :        7D0 C |  TBLBUFF_READ.RNOT_PSG :        75B C |
 TBLBUFF_READ.SAME_LINK :       6FF C |  TBLBUFF_READ.SET_ASFULL :      7AD C |
 TBLBUFF_READ.SINGL_FREE :      798 C |  TBLBUFF_READ.SINGL_LINK :      729 C |
 TBLBUFF_READ.SRCH_FREE :       76E C |  TBLBUFF_READ.SRCH_LINK :       70B C |
 TBLBUFF_READ.SRCH_LLOOP :      715 C |  TBLBUFF_READ.TRACK_CONT :      656 C |
 TBLBUFF_READ.VALID :           66A C |  TBLFM :                       1BA0 C |
 TBLFM3 :                      1BE8 C |  TBLFM6 :                      1BFA C |
 TBLLIST :                     1B00 C |  TBLPCM :                      1B0E C |
 TBLPSG :                      1C0E C |  TBLPSGN :                     1C46 C |
 TBLPWM :                      1C58 C |  TBLZ_CLEAR :                  100E C |
 TBLZ_CLEAR.CLR_ALL :          1018 C | *TESTENTRY :                     1E - |
*TESTENTRYLOOP :                 1F - |  TH :                      20000000 - |
 TICKCNT :                     1CF8 C |  TICKFLAG :                    1CF7 C |
 TICKSPSET :                   1CF6 C | *TIME :               "05:20:08 AM" - |
 TIMERCTL :                      30 - |  TRACK_OUT :                    5B0 C |
 TRACK_OUT.INDX_DEL :           5C5 C |  TRACK_OUT.NOTHIN :             5F2 C |
 TRACK_OUT.VALID :              5C4 C |  TRKBLKS_0 :                   18FD C |
 TRKBLKS_1 :                   1905 C |  TRKBLKS_2 :                   190D C |
 TRKBUFF_0 :                   1915 C |  TRKBUFF_1 :                   1954 C |
 TRKBUFF_2 :                   1993 C |  TRKCACH_0 :                   1F00 C |
 TRKCACH_1 :                   1F20 C |  TRKCACH_2 :                   1F40 C |
 TRKCHNLS :                    1E00 C |  TRKHDRS_0 :                   189D C |
 TRKHDRS_1 :                   18BD C |  TRKHDRS_2 :                   18DD C |
 TRKINFOCACH :                 188D C |  TRUE :                           1 - |
*TVMODE :                         0 - |  UPD_SEQ :                      226 C |
 UPD_SEQ.CHNL_FREE :            33C C |  UPD_SEQ.CONT_CHNL :            346 C |
 UPD_SEQ.DEC_ROW :              2DD C |  UPD_SEQ.DEC_ROW_E :            2E0 C |
 UPD_SEQ.EFFECT_FILL :          508 C |  UPD_SEQ.EFF_A :                3C1 C |
 UPD_SEQ.EFF_B :                3D2 C |  UPD_SEQ.EFF_C :                3F0 C |
 UPD_SEQ.EXIT :                 2D1 C |  UPD_SEQ.FADE_OUT :             25E C |
 UPD_SEQ.FIRST_BLK :            447 C |  UPD_SEQ.FIRST_FILL :           50F C |
 UPD_SEQ.FIRST_HEAD :           48D C |  UPD_SEQ.GRAB_RHEAD :           59D C |
 UPD_SEQ.HAS_NOTE :             2E8 C |  UPD_SEQ.INC_CPATT :            3F3 C |
 UPD_SEQ.KEEP_BLK :             463 C |  UPD_SEQ.KEEP_IT :              4B3 C |
 UPD_SEQ.KEEP_VOL :             274 C |  UPD_SEQ.NEXT_CHNL :            31E C |
 UPD_SEQ.NEXT_NOTE :            2C1 C |  UPD_SEQ.NO_EFF :               38D C |
 UPD_SEQ.NO_GLBL :              54F C |  UPD_SEQ.NO_INS :               36E C |
 UPD_SEQ.NO_NOTE :              363 C |  UPD_SEQ.NO_VOL :               37A C |
 UPD_SEQ.OLD_TYPE :             357 C |  UPD_SEQ.RAN_OUT :              401 C |
 UPD_SEQ.READ_SEQ :             23B C |  UPD_SEQ.ROW_ACTIVE :           2BA C |
 UPD_SEQ.SET_TRACK :            42B C |  UPD_SEQ.SFXMD :                27E C |
 UPD_SEQ.SRCH_NEW :             319 C |  UPD_SEQ.SRCH_REROLL :          315 C |
 UPD_SEQ.TOO_MUCH :             26A C |  UPD_SEQ.TRACK_END :            502 C |
*VATTR_FLIPH :                  800 - | *VATTR_FLIPV :                 1000 - |
*VATTR_HI :                    8000 - | *VATTR_PAL1 :                  2000 - |
*VATTR_PAL2 :                  4000 - | *VATTR_PAL3 :                  6000 - |
 VBLK :                          80 - |  VDPSTS :                         A - |
 VDP_CTRL :                  C00004 - |  VDP_DATA :                  C00000 - |
*VERSION :                     142F - |
 VIDEO_BUILDSPRITES :                                      FFFFFFFFFFFF047C C |
 VIDEO_BUILDSPRITES.CHK_SPR_MR :                           FFFFFFFFFFFF063C C |
 VIDEO_BUILDSPRITES.CHK_SPR_R :                            FFFFFFFFFFFF061A C |
 VIDEO_BUILDSPRITES.DONT_ADD :                             FFFFFFFFFFFF05EE C |
 VIDEO_BUILDSPRITES.EX_VRAM :                              FFFFFFFFFFFF0532 C |
 VIDEO_BUILDSPRITES.EX_VRAMS :                             FFFFFFFFFFFF0556 C |
 VIDEO_BUILDSPRITES.EX_YEXT :                              FFFFFFFFFFFF05C2 C |
 VIDEO_BUILDSPRITES.FIRST_SPR :                            FFFFFFFFFFFF049C C |
 VIDEO_BUILDSPRITES.MK_PZ :                                FFFFFFFFFFFF0508 C |
 VIDEO_BUILDSPRITES.NEXT :                                 FFFFFFFFFFFF04E4 C |
 VIDEO_BUILDSPRITES.NEXT_PZ :                              FFFFFFFFFFFF04A4 C |
 VIDEO_BUILDSPRITES.NO_MAP :                               FFFFFFFFFFFF0602 C |
 VIDEO_BUILDSPRITES.NO_PZ :                                FFFFFFFFFFFF05FE C |
*VIDEO_BUILDSPRITES.NO_SLOT :                              FFFFFFFFFFFF0608 C |
 VIDEO_BUILDSPRITES.NO_SLOT_MR :                           FFFFFFFFFFFF0650 C |
 VIDEO_BUILDSPRITES.NO_SLOT_R :                            FFFFFFFFFFFF062E C |
 VIDEO_BUILDSPRITES.NO_SLOT_S :                            FFFFFFFFFFFF04D4 C |
 VIDEO_BUILDSPRITES.STOP_ALL :                             FFFFFFFFFFFF060C C |
 VIDEO_BUILDSPRITES.VRAM_H :                               FFFFFFFFFFFF0586 C |
 VIDEO_BUILDSPRITES.VRAM_V :                               FFFFFFFFFFFF056E C |
 VIDEO_CLEAR :     FFFFFFFFFFFF068A C |
 VIDEO_CLEAR.CLR_ME :                                      FFFFFFFFFFFF06A4 C |
 VIDEO_CLEAR.PMNEXT :                                      FFFFFFFFFFFF0694 C |
*VIDEO_CLEARSCREEN :                                       FFFFFFFFFFFF06BA C |
 VIDEO_CLEARSCREEN.NOT_SMALL :                             FFFFFFFFFFFF06E0 C |
*VIDEO_COPY :      FFFFFFFFFFFF0A74 C |  VIDEO_COPY.DMAW : FFFFFFFFFFFF0A7E C |
 VIDEO_COPY.DMA_W :                                        FFFFFFFFFFFF0ADA C |
 VIDEO_DEFAULT :   FFFFFFFFFFFF033A C |
 VIDEO_DISPLAYOFF :                                        FFFFFFFFFFFF06F4 C |
 VIDEO_DISPLAYON : FFFFFFFFFFFF06E8 C |  VIDEO_DMAOFF :    FFFFFFFFFFFF070C C |
 VIDEO_DMAON :     FFFFFFFFFFFF0700 C |
 VIDEO_FADEIN_FULL :                                       FFFFFFFFFFFF0ED4 C |
 VIDEO_FADEOUT_FULL :                                      FFFFFFFFFFFF0EF6 C |
 VIDEO_FADEPAL :   FFFFFFFFFFFF0F6E C |
*VIDEO_FADEPAL_LIST :                                      FFFFFFFFFFFF0FC4 C |
 VIDEO_FADEPAL_LIST.INVALID :                              FFFFFFFFFFFF0FDE C |
 VIDEO_FADEPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0FD2 C |
 VIDEO_FILL :      FFFFFFFFFFFF09FC C |  VIDEO_INIT :      FFFFFFFFFFFF0296 C |
 VIDEO_INIT.CLR_D :                                        FFFFFFFFFFFF02CC C |
 VIDEO_INIT.CLR_MREQ :                                     FFFFFFFFFFFF02F8 C |
 VIDEO_INIT.CLR_PREQ :                                     FFFFFFFFFFFF02E4 C |
 VIDEO_INIT.CLR_RAM :                                      FFFFFFFFFFFF02A0 C |
 VIDEO_INIT.COPY_DMA :                                     FFFFFFFFFFFF02B2 C |
 VIDEO_INIT.DEF_REGSET :                                   FFFFFFFFFFFF0330 C |
 VIDEO_INIT.DMA_ENTRY :                                    FFFFFFFFFFFF031E C |
*VIDEO_INTENABLE : FFFFFFFFFFFF0724 C |  VIDEO_LOADART :   FFFFFFFFFFFF08A6 C |
 VIDEO_LOADART.BAD_SIZE :                                  FFFFFFFFFFFF0984 C |
 VIDEO_LOADART.LAST_SET :                                  FFFFFFFFFFFF08F6 C |
 VIDEO_LOADART.MK_SET :                                    FFFFFFFFFFFF08FE C |
 VIDEO_LOADART.NON_WRAM :                                  FFFFFFFFFFFF0928 C |
 VIDEO_LOADART.NON_WRAM_L :                                FFFFFFFFFFFF0984 C |
 VIDEO_LOADART.NORMAL :                                    FFFFFFFFFFFF08F0 C |
 VIDEO_LOADART.RAM_WRITE :                                 FFFFFFFFFFFF0986 C |
 VIDEO_LOADART.SHARED_SETUP :                              FFFFFFFFFFFF099A C |
 VIDEO_LOADART_LIST :                                      FFFFFFFFFFFF09DC C |
 VIDEO_LOADART_LIST.INVALID :                              FFFFFFFFFFFF09F6 C |
 VIDEO_LOADART_LIST.NEXT_ONE :                             FFFFFFFFFFFF09E8 C |
*VIDEO_LOADMAP :   FFFFFFFFFFFF0BD6 C |
 VIDEO_LOADMAP.BAD_SIZE :                                  FFFFFFFFFFFF0C46 C |
 VIDEO_LOADMAP.MK_CELL :                                   FFFFFFFFFFFF0C36 C |
 VIDEO_LOADMAP.NON_BLANK :                                 FFFFFFFFFFFF0C34 C |
 VIDEO_LOADMAP.X_LOOP :                                    FFFFFFFFFFFF0C24 C |
 VIDEO_LOADMAP.Y_LOOP :                                    FFFFFFFFFFFF0C10 C |
*VIDEO_LOADMAPV :  FFFFFFFFFFFF0C4C C |
 VIDEO_LOADMAPV.BAD_SIZE :                                 FFFFFFFFFFFF0CCE C |
 VIDEO_LOADMAPV.BAD_SIZE_D :                               FFFFFFFFFFFF0D36 C |
 VIDEO_LOADMAPV.DBLE_MODE :                                FFFFFFFFFFFF0CD4 C |
 VIDEO_LOADMAPV.MK_CELL :                                  FFFFFFFFFFFF0CB8 C |
 VIDEO_LOADMAPV.MK_CELL_D :                                FFFFFFFFFFFF0D20 C |
 VIDEO_LOADMAPV.NON_BLANK :                                FFFFFFFFFFFF0CB6 C |
 VIDEO_LOADMAPV.NON_BLANK_D :                              FFFFFFFFFFFF0D18 C |
 VIDEO_LOADMAPV.X_LOOP :                                   FFFFFFFFFFFF0C90 C |
 VIDEO_LOADMAPV.X_LOOP_D :                                 FFFFFFFFFFFF0CEE C |
 VIDEO_LOADMAPV.Y_LOOP :                                   FFFFFFFFFFFF0C96 C |
 VIDEO_LOADMAPV.Y_LOOP_D :                                 FFFFFFFFFFFF0CF4 C |
 VIDEO_LOADPAL :   FFFFFFFFFFFF0F78 C |
*VIDEO_LOADPAL_LIST :                                      FFFFFFFFFFFF0FA4 C |
 VIDEO_LOADPAL_LIST.INVALID :                              FFFFFFFFFFFF0FBE C |
 VIDEO_LOADPAL_LIST.NEXT_ONE :                             FFFFFFFFFFFF0FB2 C |
 VIDEO_MAKEDMAENTRY :                                      FFFFFFFFFFFF0AF0 C |
 VIDEO_MAKEDMAENTRY.LAST_SET :                             FFFFFFFFFFFF0B40 C |
 VIDEO_MAKEDMAENTRY.MK_SET :                               FFFFFFFFFFFF0B48 C |
 VIDEO_MAKEDMAENTRY.NORMAL :                               FFFFFFFFFFFF0B3A C |
 VIDEO_MAKEDMAENTRY.NOT_WRAM :                             FFFFFFFFFFFF0B94 C |
 VIDEO_MAKEDMAENTRY.RAN_OUT :                              FFFFFFFFFFFF0BD4 C |
 VIDEO_MAKEFADE :  FFFFFFFFFFFF0F30 C | *VIDEO_MAKESPR :   FFFFFFFFFFFF13A2 C |
 VIDEO_MAKESPR.CHK_FREE :                                  FFFFFFFFFFFF13AE C |
 VIDEO_MAKESPR.MK_SPR :                                    FFFFFFFFFFFF13C0 C |
 VIDEO_MAKESPRMAP :                                        FFFFFFFFFFFF1452 C |
 VIDEO_MAKESPRMAP.CHK_FREE :                               FFFFFFFFFFFF145E C |
 VIDEO_MAKESPRMAP.MK_SPR :                                 FFFFFFFFFFFF146E C |
*VIDEO_MAKESPRMAP_DMA :                                    FFFFFFFFFFFF143A C |
 VIDEO_MDMARS_CLEANUP :                                    FFFFFFFFFFFF1942 C |
 VIDEO_MDMARS_CLEANUP.CHECK_BIT :                          FFFFFFFFFFFF1970 C |
 VIDEO_MDMARS_CLEANUP.CHK_SPR :                            FFFFFFFFFFFF198C C |
 VIDEO_MDMARS_CLEANUP.CHK_TEMP :                           FFFFFFFFFFFF19A6 C |
 VIDEO_MDMARS_CLEANUP.CLEANLIST :                          FFFFFFFFFFFF1956 C |
 VIDEO_MDMARS_CLEANUP.MODE_2D :                            FFFFFFFFFFFF1968 C |
 VIDEO_MDMARS_CLEANUP.MODE_3D :                            FFFFFFFFFFFF199C C |
 VIDEO_MDMARS_CLEANUP.NONE :                               FFFFFFFFFFFF1966 C |
 VIDEO_MDMARS_CLEANUP.NOT_SPRTEMP :                        FFFFFFFFFFFF1994 C |
 VIDEO_MDMARS_CLEANUP.NOT_TEMP :                           FFFFFFFFFFFF19AE C |
*VIDEO_MDMARS_CLEANUP.NO_FREEZE :                          FFFFFFFFFFFF199A C |
*VIDEO_MDMARS_CLEANUP.NO_MFREEZE :                         FFFFFFFFFFFF19B4 C |
 VIDEO_MDMARS_CLEANUP.NO_REDRAW :                          FFFFFFFFFFFF197A C |
 VIDEO_MDMARS_FADEPAL :                                    FFFFFFFFFFFF1D74 C |
*VIDEO_MDMARS_FADEPAL_LIST :                               FFFFFFFFFFFF1DE4 C |
 VIDEO_MDMARS_FADEPAL_LIST.INVALID :                       FFFFFFFFFFFF1E02 C |
 VIDEO_MDMARS_FADEPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1DF2 C |
*VIDEO_MDMARS_LOADMAP :                                    FFFFFFFFFFFF1A5E C |
 VIDEO_MDMARS_LOADMAP.COPY_X :                             FFFFFFFFFFFF1A94 C |
 VIDEO_MDMARS_LOADMAP.COPY_Y :                             FFFFFFFFFFFF1A7E C |
 VIDEO_MDMARS_LOADPAL :                                    FFFFFFFFFFFF1D7E C |
*VIDEO_MDMARS_LOADPAL_LIST :                               FFFFFFFFFFFF1DC2 C |
 VIDEO_MDMARS_LOADPAL_LIST.INVALID :                       FFFFFFFFFFFF1DDE C |
 VIDEO_MDMARS_LOADPAL_LIST.NEXT_ONE :                      FFFFFFFFFFFF1DD0 C |
*VIDEO_MDMARS_LOADVRAM :                                   FFFFFFFFFFFF1A34 C |
 VIDEO_MDMARS_LOADVRAM.GOOD_SZ :                           FFFFFFFFFFFF1A4E C |
 VIDEO_MDMARS_LOADVRAM.GOT_ZERO :                          FFFFFFFFFFFF1A58 C |
 VIDEO_MDMARS_MAKEFADE :                                   FFFFFFFFFFFF0F18 C |
*VIDEO_MDMARS_MAKESPR2D :                                  FFFFFFFFFFFF1AC8 C |
 VIDEO_MDMARS_MAKESPR2D.CHK_FREE :                         FFFFFFFFFFFF1AD4 C |
 VIDEO_MDMARS_MAKESPR2D.MK_SPR :                           FFFFFFFFFFFF1AE4 C |
*VIDEO_MDMARS_MAKESPR3D :                                  FFFFFFFFFFFF1B64 C |
 VIDEO_MDMARS_MAKESPR3D.CHK_FREE :                         FFFFFFFFFFFF1B70 C |
 VIDEO_MDMARS_MAKESPR3D.MK_SPR :                           FFFFFFFFFFFF1B80 C |
 VIDEO_MDMARS_PALBACKUP :                                  FFFFFFFFFFFF19B6 C |
 VIDEO_MDMARS_PALBACKUP.COPY_IT :                          FFFFFFFFFFFF19D2 C |
 VIDEO_MDMARS_PALBACKUP.SVDP_LOCKED :                      FFFFFFFFFFFF19E6 C |
 VIDEO_MDMARS_RUNFADE :                                    FFFFFFFFFFFF1BF2 C |
*VIDEO_MDMARS_RUNFADE.ALL_BLACK :                          FFFFFFFFFFFF1CB8 C |
 VIDEO_MDMARS_RUNFADE.BUSY_TIMER :                         FFFFFFFFFFFF1C38 C |
 VIDEO_MDMARS_RUNFADE.FADE_IN :                            FFFFFFFFFFFF1CC4 C |
 VIDEO_MDMARS_RUNFADE.FADE_LIST :                          FFFFFFFFFFFF1C44 C |
 VIDEO_MDMARS_RUNFADE.FADE_OUT :                           FFFFFFFFFFFF1C58 C |
 VIDEO_MDMARS_RUNFADE.FDIN_NEND :                          FFFFFFFFFFFF1D72 C |
 VIDEO_MDMARS_RUNFADE.FDOUT_NEND :                         FFFFFFFFFFFF1CC2 C |
 VIDEO_MDMARS_RUNFADE.NEXT_COLOR :                         FFFFFFFFFFFF1C66 C |
 VIDEO_MDMARS_RUNFADE.NEXT_IN :                            FFFFFFFFFFFF1CD0 C |
 VIDEO_MDMARS_RUNFADE.NEXT_REQ :                           FFFFFFFFFFFF1BF6 C |
 VIDEO_MDMARS_RUNFADE.NOTHING :                            FFFFFFFFFFFF1C54 C |
 VIDEO_MDMARS_RUNFADE.NO_REQ :                             FFFFFFFFFFFF1C3E C |
*VIDEO_MDMARS_RUNFADE.SAME_IN :                            FFFFFFFFFFFF1D5C C |
 VIDEO_MDMARS_RUNFADE.SET_PRIO :                           FFFFFFFFFFFF1D56 C |
*VIDEO_MDMARS_SETSPR2D :                                   FFFFFFFFFFFF1ABE C |
*VIDEO_MDMARS_SETSPR3D :                                   FFFFFFFFFFFF1B5A C |
 VIDEO_MDMARS_SETSYNC :                                    FFFFFFFFFFFF1928 C |
*VIDEO_MDMARS_VIDEOMODE :                                  FFFFFFFFFFFF19EA C |
 VIDEO_MDMARS_VIDEOMODE.WAIT_FINISH :                      FFFFFFFFFFFF1A14 C |
 VIDEO_MDMARS_VIDEOOFF :                                   FFFFFFFFFFFF19E8 C |
*VIDEO_MDMARS_WAITFRAME :                                  FFFFFFFFFFFF193E C |
 VIDEO_MDMARS_WAITSYNC :                                   FFFFFFFFFFFF1932 C |
*VIDEO_MDMCD_MAKESTAMP :                                   FFFFFFFFFFFF1870 C |
 VIDEO_MDMCD_MAKESTAMP.CHK_FREE :                          FFFFFFFFFFFF187C C |
 VIDEO_MDMCD_MAKESTAMP.MK_SPR :                            FFFFFFFFFFFF188C C |
*VIDEO_MDMCD_SETSTAMP :                                    FFFFFFFFFFFF1862 C |
 VIDEO_MDMCD_STAMPDISABLE :                                FFFFFFFFFFFF17D0 C |
*VIDEO_MDMCD_STAMPDOTMAP :                                 FFFFFFFFFFFF17F0 C |
 VIDEO_MDMCD_STAMPDOTMAP.BAD_SIZE :                        FFFFFFFFFFFF185C C |
 VIDEO_MDMCD_STAMPDOTMAP.X_LOOP :                          FFFFFFFFFFFF182C C |
 VIDEO_MDMCD_STAMPDOTMAP.Y_LOOP :                          FFFFFFFFFFFF1832 C |
*VIDEO_MDMCD_STAMPENABLE :                                 FFFFFFFFFFFF175E C |
 VIDEO_MDMCD_STAMPENABLE.CLR_SETT :                        FFFFFFFFFFFF176E C |
 VIDEO_MDMCD_STAMPENABLE.DONT_USE :                        FFFFFFFFFFFF17A6 C |
*VIDEO_MDMCD_STAMPINIT :                                   FFFFFFFFFFFF14FC C |
 VIDEO_MDMCD_STAMPINIT.EXIT_NOW :                          FFFFFFFFFFFF1530 C |
 VIDEO_MDMCD_STAMPINIT.MK_INITBUFF :                       FFFFFFFFFFFF151E C |
 VIDEO_MDMCD_STAMPINIT.WAIT_FINISH :                       FFFFFFFFFFFF1524 C |
*VIDEO_MDMCD_STAMPMAP :                                    FFFFFFFFFFFF1900 C |
 VIDEO_MDMCD_STAMPRENDER :                                 FFFFFFFFFFFF1534 C |
 VIDEO_MDMCD_STAMPRENDER.COPY_LSB :                        FFFFFFFFFFFF1710 C |
 VIDEO_MDMCD_STAMPRENDER.COPY_MID :                        FFFFFFFFFFFF165E C |
 VIDEO_MDMCD_STAMPRENDER.DRAW_CELLS :                      FFFFFFFFFFFF158C C |
 VIDEO_MDMCD_STAMPRENDER.EXACT_SIZE :                      FFFFFFFFFFFF15FC C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_ONE :                       FFFFFFFFFFFF15E6 C |
 VIDEO_MDMCD_STAMPRENDER.FIRST_STEP :                      FFFFFFFFFFFF159E C |
 VIDEO_MDMCD_STAMPRENDER.MAKE_CELLBUFF :                   FFFFFFFFFFFF162C C |
 VIDEO_MDMCD_STAMPRENDER.MAXIMUM :                         FFFFFFFFFFFF1604 C |
 VIDEO_MDMCD_STAMPRENDER.MKDMA_BUFF :                      FFFFFFFFFFFF15CC C |
 VIDEO_MDMCD_STAMPRENDER.NOT_DONE :                        FFFFFFFFFFFF1618 C |
 VIDEO_MDMCD_STAMPRENDER.NOT_YET :                         FFFFFFFFFFFF15C2 C |
 VIDEO_MDMCD_STAMPRENDER.NO_LSB :                          FFFFFFFFFFFF1720 C |
 VIDEO_MDMCD_STAMPRENDER.OUT_LOCS :                        FFFFFFFFFFFF1624 C |
 VIDEO_MDMCD_STAMPRENDER.WAIT_WRAM :                       FFFFFFFFFFFF1590 C |
*VIDEO_MDMCD_STAMPRESET :                                  FFFFFFFFFFFF1902 C |
 VIDEO_MDMCD_STAMPRESET.CLR_STAMPS :                       FFFFFFFFFFFF190E C |
 VIDEO_PRINT :     FFFFFFFFFFFF1012 C |
 VIDEO_PRINT.EXIT :                                        FFFFFFFFFFFF107E C |
 VIDEO_PRINT.LOOP :                                        FFFFFFFFFFFF1046 C |
 VIDEO_PRINT.NEXT :                                        FFFFFFFFFFFF1078 C |
 VIDEO_PRINT.Q_LOOP :                                      FFFFFFFFFFFF105C C |
 VIDEO_PRINT.SPECIAL :                                     FFFFFFFFFFFF1084 C |
*VIDEO_PRINTDEFPAL :                                       FFFFFFFFFFFF0FFC C |
 VIDEO_PRINTDEFPAL_FADE :                                  FFFFFFFFFFFF0FF4 C |
 VIDEO_PRINTINIT : FFFFFFFFFFFF0FEA C |
 VIDEO_PRINTINITW :                                        FFFFFFFFFFFF0FE4 C |
*VIDEO_PRINTVAL :  FFFFFFFFFFFF1190 C |
*VIDEO_PRINTVAL.LOOP :                                     FFFFFFFFFFFF11C4 C |
*VIDEO_PRINTVAL.Q_LOOP :                                   FFFFFFFFFFFF11DA C |
 VIDEO_PRINTVALW : FFFFFFFFFFFF11E6 C |
*VIDEO_PRINTVALW.LOOP :                                    FFFFFFFFFFFF123A C |
 VIDEO_PRINTVALW.NO_DBLE_Y :                               FFFFFFFFFFFF120E C |
 VIDEO_PRINTW :    FFFFFFFFFFFF109C C |
 VIDEO_PRINTW.EXIT :                                       FFFFFFFFFFFF1170 C |
 VIDEO_PRINTW.LOOP :                                       FFFFFFFFFFFF10F0 C |
 VIDEO_PRINTW.NEXT :                                       FFFFFFFFFFFF1168 C |
 VIDEO_PRINTW.NO_DBLE_Y :                                  FFFFFFFFFFFF10C4 C |
 VIDEO_PRINTW.SPECIAL :                                    FFFFFFFFFFFF1176 C |
 VIDEO_PRINTW.VER_CONT :                                   FFFFFFFFFFFF1162 C |
 VIDEO_PRINTW.VER_NORMAL :                                 FFFFFFFFFFFF1130 C |
 VIDEO_RENDER :    FFFFFFFFFFFF037E C |
 VIDEO_RENDER.END :                                        FFFFFFFFFFFF0470 C |
 VIDEO_RENDER.EXIT :                                       FFFFFFFFFFFF047A C |
 VIDEO_RENDER.NEXT :                                       FFFFFFFFFFFF0448 C |
 VIDEO_RESOLUTION :                                        FFFFFFFFFFFF0776 C |
 VIDEO_RESOLUTION.EX_BIT :                                 FFFFFFFFFFFF07AA C |
 VIDEO_RUNFADE :   FFFFFFFFFFFF0D3A C |
 VIDEO_RUNFADE.ALL_BLACK :                                 FFFFFFFFFFFF0E06 C |
 VIDEO_RUNFADE.BUSY_TIMER :                                FFFFFFFFFFFF0D80 C |
 VIDEO_RUNFADE.FADE_IN :                                   FFFFFFFFFFFF0E14 C |
 VIDEO_RUNFADE.FADE_LIST :                                 FFFFFFFFFFFF0D8C C |
 VIDEO_RUNFADE.FADE_OUT :                                  FFFFFFFFFFFF0DA4 C |
*VIDEO_RUNFADE.FDIN_NEND :                                 FFFFFFFFFFFF0EAA C |
*VIDEO_RUNFADE.FDOUT_NEND :                                FFFFFFFFFFFF0E12 C |
 VIDEO_RUNFADE.NEXT_COLOR :                                FFFFFFFFFFFF0DB2 C |
 VIDEO_RUNFADE.NEXT_IN :                                   FFFFFFFFFFFF0E20 C |
 VIDEO_RUNFADE.NEXT_REQ :                                  FFFFFFFFFFFF0D3E C |
 VIDEO_RUNFADE.NOTHING :                                   FFFFFFFFFFFF0D9C C |
 VIDEO_RUNFADE.NO_REQ :                                    FFFFFFFFFFFF0D86 C |
 VIDEO_RUNFADE.PFADE_DEL :                                 FFFFFFFFFFFF0D9C C |
 VIDEO_RUNFADE.SAME_IN :                                   FFFFFFFFFFFF0E94 C |
 VIDEO_SETMAPSIZE :                                        FFFFFFFFFFFF0852 C |
 VIDEO_SETMAPSIZE.SIZE_TBL :                               FFFFFFFFFFFF0886 C |
*VIDEO_SETSPR :    FFFFFFFFFFFF1398 C |  VIDEO_SETSPRMAP : FFFFFFFFFFFF1430 C |
*VIDEO_SETSPRMAP_DMA :                                     FFFFFFFFFFFF1426 C |
 VIDEO_UPDMAPVRAM :                                        FFFFFFFFFFFF07C6 C |
 VIDEO_UPDSPRHVRAM :                                       FFFFFFFFFFFF0818 C |
 VIDEO_WAITFADE :  FFFFFFFFFFFF0EAC C |
 VIDEO_WAITFADE.LOOP :                                     FFFFFFFFFFFF0EAC C |
 VIDEO_WAITFADE.NEXT_ONE :                                 FFFFFFFFFFFF0EBE C |
 VIDMARS_PAL :     FFFFFFFFFFFF1D86 C |
 VIDMARS_PAL.LOOP :                                        FFFFFFFFFFFF1DA0 C |
 VIDMARS_PAL.TRNSPR :                                      FFFFFFFFFFFF1DB2 C |
 VIDMDMARS_CERROR :                                        FFFFFFFFFFFF1B50 C |
 VIDMDMARS_MKSPR2D :                                       FFFFFFFFFFFF1AE6 C |
*VIDMDMARS_MKSPR2D.ON_FREEZE :                             FFFFFFFFFFFF1B46 C |
 VIDMDMARS_MKSPR3D :                                       FFFFFFFFFFFF1B82 C |
 VIDMDMCD_CERROR : FFFFFFFFFFFF18E8 C |
 VIDMDMCD_MKSTAMP :                                        FFFFFFFFFFFF188E C |
*VIDMDMCD_RDSTMPSLOT :                                     FFFFFFFFFFFF18F2 C |
 VIDMDMCD_SENDSTAMPINFO :                                  FFFFFFFFFFFF1724 C |
 VIDMDMCD_SENDSTAMPINFO.CHK_SPR :                          FFFFFFFFFFFF174C C |
 VIDMDMCD_SENDSTAMPINFO.COPY_TOWRAM :                      FFFFFFFFFFFF1732 C |
 VIDMDMCD_SENDSTAMPINFO.NOT_SPRTEMP :                      FFFFFFFFFFFF1754 C |
 VIDMDSPR_MKSPR :  FFFFFFFFFFFF13C2 C |
 VIDMDSPR_MKSPR.DONT_ADD :                                 FFFFFFFFFFFF13EC C |
 VIDMDSPR_MKSPRMAP :                                       FFFFFFFFFFFF1470 C |
 VIDMD_CERROR :    FFFFFFFFFFFF141C C | *VIDMD_CFREEZE :   FFFFFFFFFFFF1424 C |
 VIDMD_PAL :       FFFFFFFFFFFF0F80 C |  VIDMD_PAL.BAD :   FFFFFFFFFFFF0F9E C |
 VIDMD_PAL.LOOP :  FFFFFFFFFFFF0F98 C |  VIDMKFADE_GO :    FFFFFFFFFFFF0F48 C |
 VIDPRINT_INIT :   FFFFFFFFFFFF0FEE C |
 VID_CHECKLASTSPR :                                        FFFFFFFFFFFF0658 C |
 VID_CHECKLASTSPR.BLNK_FIRST :                             FFFFFFFFFFFF0672 C |
 VID_CHECKLASTSPR.LAST_ONE :                               FFFFFFFFFFFF0678 C |
 VID_CHECKLASTSPR.SPR_EXIT :                               FFFFFFFFFFFF0688 C |
*VID_FILLGO :      FFFFFFFFFFFF0A04 C |  VID_FILLGO.DMAW : FFFFFFFFFFFF0A0A C |
 VID_FILLGO.DMA_W :                                        FFFFFFFFFFFF0A5E C |
 VID_FONTDEFPAL :  FFFFFFFFFFFF1002 C |  VID_MKDMACARRY :  FFFFFFFFFFFF144C C |
 VID_MKDMANEXT :   FFFFFFFFFFFF1442 C |  VID_MKMAPDMA :    FFFFFFFFFFFF14AC C |
 VID_MKMAPDMA.NEXT_PZ :                                    FFFFFFFFFFFF14CC C |
 VID_MKMAPDMA.NO_DMA :                                     FFFFFFFFFFFF14F6 C |
 VID_PRINTTVAL :   FFFFFFFFFFFF124E C |
 VID_PRINTTVAL.HEX_INCR :                                  FFFFFFFFFFFF12A8 C |
 VID_PRINTTVAL.MK_VALUE :                                  FFFFFFFFFFFF1286 C |
 VID_PRINTTVAL.SHOW_24 :                                   FFFFFFFFFFFF127A C |
*VID_PRINTTVAL.SHOW_BYTE :                                 FFFFFFFFFFFF126A C |
 VID_PRINTTVAL.SHOW_LONG :                                 FFFFFFFFFFFF1282 C |
 VID_PRINTTVAL.SHOW_NIBBL :                                FFFFFFFFFFFF1298 C |
 VID_PRINTTVAL.SHOW_WORD :                                 FFFFFFFFFFFF1272 C |
 VID_PRINTTVALW :  FFFFFFFFFFFF12BA C |
 VID_PRINTTVALW.GET_PREVAL :                               FFFFFFFFFFFF1384 C |
 VID_PRINTTVALW.HEX_INCR :                                 FFFFFFFFFFFF1392 C |
 VID_PRINTTVALW.MK_VALUE :                                 FFFFFFFFFFFF12F6 C |
 VID_PRINTTVALW.MK_VALUE_IN :                              FFFFFFFFFFFF12F2 C |
 VID_PRINTTVALW.NIBBL_CONT :                               FFFFFFFFFFFF137C C |
 VID_PRINTTVALW.NIBBL_NORM :                               FFFFFFFFFFFF1346 C |
 VID_PRINTTVALW.SHOW_24 :                                  FFFFFFFFFFFF12E6 C |
*VID_PRINTTVALW.SHOW_BYTE :                                FFFFFFFFFFFF12D6 C |
 VID_PRINTTVALW.SHOW_LONG :                                FFFFFFFFFFFF12EE C |
 VID_PRINTTVALW.SHOW_NIBBL :                               FFFFFFFFFFFF1308 C |
 VID_PRINTTVALW.SHOW_WORD :                                FFFFFFFFFFFF12DE C |
 VID_WRTREG01 :    FFFFFFFFFFFF0716 C |  VIEW_FAIRY :                     1 - |
 VIEW_GEMAINFO :                  0 - |  VINTCLR :                       16 - |
*VINTENBL :                      20 - |  VINT_DEFAULT :    FFFFFFFFFFFF22D8 C |
*VIRQ_ON :                        8 - |  VRESINTCLR :                    14 - |
 WAVE_FLAGS :                  1CF5 C |  WAVE_LEN :                    1CED C |
 WAVE_LOOP :                   1CF0 C |  WAVE_PITCH :                  1CF3 C |
 WAVE_START :                  1CEA C |  WAVFREQ_CDPCM :               1665 C |
 WAVFREQ_LIST :                1603 C | *WONDERCHK :                     98 - |
*WONDERREQ :                     97 - |  WRAM_DOTOUTPUT_0 :           20000 - |
 WRAM_DOTOUTPUT_1 :           28000 - |  WRAM_MDMAPTABLE :            30000 - |
 WRAM_MDSTAMPLIST :           3A000 - |  WRAM_STAMPCURRFLIP :         3BFFE - |
 WRAM_STAMPSDONE :            3BFFC - |  WRAM_TRACEBUFF :             3B000 - |
 X68KSRCLSB :                    35 C |  X68KSRCMID :                    36 C |
*YM_CTRL_1 :                 A04000 - | *YM_CTRL_2 :                 A04002 - |
*YM_DATA_1 :                 A04001 - | *YM_DATA_2 :                 A04003 - |
*Z80SYNTAX :                      0 - |  Z80_BUS :                   A11100 - |
 Z80_CODE :                  200000 C |  Z80_CODE_END :              201F8C C |
 Z80_CODE_EOF :                E000 C |  Z80_CODE_FILE :               C000 C |
 Z80_CPU :                   A00000 - |  Z80_INIT :                      3E C |
 Z80_RESET :                 A11200 - | *ZBANK :                       6000 - |
 ZDRVFIFO :                    1F60 - |  ZDRVFWRT :                    1F80 - |
*ZDRVMARSBLK :                 1F89 - |  ZDRVMAXCMND :                   20 - |
*ZDRVMCDBLK :                  1F8A - |  ZDRVPALMODE :                 1F88 - |
 ZDRVRAMLEN :                  1F87 - |  ZDRVRAMSRC :                  1F86 - |
 ZDRVROMBLK :                  1F81 - |  ZMARS_SEND :                  101D C |
 ZMARS_SEND.BLOCKED_M :        1121 C |  ZMARS_SEND.CLR_PCM :          10A3 C |
 ZMARS_SEND.CLR_PWM :          1128 C |  ZMARS_SEND.COPY_BYTES :       107B C |
 ZMARS_SEND.MAKE_SURE :        1053 C |  ZMARS_SEND.MCDT_BLOCKED :     109C C |
*ZMARS_SEND.MCDT_NOUPD :       10A7 C |  ZMARS_SEND.MCD_NEXTP :        1072 C |
 ZMARS_SEND.NEXT_COMM :        10F9 C |  ZMARS_SEND.NEXT_PACKET :      10EF C |
*ZMARS_SEND.PWM_EXIT :         112C C |  ZMARS_SEND.SET_COMBANK :      1134 C |
 ZMARS_SEND.TEST_SUB :         105E C |  ZMARS_SEND.WAIT_ENTER :       10CF C |
 ZMARS_SEND.WAIT_IN :          103F C |  ZMARS_SEND.WAIT_SUB :         108A C |
 ZMARS_SEND.W_PASS2 :          110F C | *ZOPCEX :                         8 - |
 ZOPCEXX :                       D9 - | *ZOPCNOP :                        0 - |
 ZOPCPUSHAF :                    F5 - |  ZOPCRET :                       C9 - |
 ZPSG_CTRL :                   7F11 - |  ZTBL_CHIP :                      3 - |
 ZTBL_FREQINDX :                  5 - |  ZTBL_INSTCACH :                  A - |
 ZTBL_LINK :                      0 - |  ZTBL_MASTERVOL :                 4 - |
 ZTBL_PITCHBEND :                 6 - |  ZTBL_PRIORITY :                  2 - |
 ZTBL_VOLSLIDE :                  8 - |  ZTBL_VOLUME :                    7 - |
 ZYM_CTRL_1 :                  4000 - |  ZYM_CTRL_2 :                  4002 - |
 ZYM_DATA_1 :                  4001 - |  ZYM_DATA_2 :                  4003 - |
*_ADRERR :                     5F40 - | *_BOOTSTAT :                   5EA0 - |
 _BURAM :                      5F16 - |  _CCR :                    FFFFFE92 - |
 _CDBIOS :                     5F22 - | *_CDBOOT :                     5F1C - |
*_CDSTAT :                     5E80 - | *_CHKERR :                     5F52 - |
*_CODERR :                     5F46 - | *_DEVERR :                     5F4C - |
 _DMACHANNEL0 :            FFFFFF8C - | *_DMACHANNEL1 :            FFFFFF9C - |
*_DMACOUNT0 :              FFFFFF88 - | *_DMACOUNT1 :              FFFFFF98 - |
*_DMADEST0 :               FFFFFF84 - | *_DMADEST1 :               FFFFFF94 - |
 _DMAOPERATION :           FFFFFFB0 - | *_DMAREQACK0 :             FFFFFFB4 - |
*_DMAREQACK1 :             FFFFFFB8 - |  _DMASOURCE0 :             FFFFFF80 - |
*_DMASOURCE1 :             FFFFFF90 - | *_DMAVECTORE0 :            FFFFFFA4 - |
*_DMAVECTORE1 :            FFFFFFAC - | *_DMAVECTORN0 :            FFFFFFA0 - |
*_DMAVECTORN1 :            FFFFFFA8 - |  _FRAMEBUFFER :            24000000 - |
*_FRC_H :                         2 - | *_FRC_L :                         3 - |
 _FRT :                    FFFFFE10 - | *_HRH :                    FFFFFF10 - |
*_HRL :                    FFFFFF14 - | *_HRL32 :                  FFFFFF04 - |
 _JR :                     FFFFFF00 - |  _LEVEL1 :                     5F76 - |
*_LEVEL2 :                     5F7C - |  _LEVEL3 :                     5F82 - |
*_LEVEL4 :                     5F88 - | *_LEVEL5 :                     5F8E - |
*_LEVEL6 :                     5F94 - | *_LEVEL7 :                     5F9A - |
*_NOCOD0 :                     5F6A - | *_NOCOD1 :                     5F70 - |
*_OCR_H :                         4 - | *_OCR_L :                         5 - |
 _OVERWRITE :              24020000 - |  _PALETTE :                20004200 - |
*_SERIAL :                 FFFFFE00 - | *_SETJMPTBL :                  5F0A - |
*_SPVERR :                     5F5E - |  _SYSREG :                 20004000 - |
*_TCR :                           6 - | *_TCSR :                          1 - |
*_TIER :                          0 - | *_TOCR :                          7 - |
*_TRACE :                      5F64 - | *_TRAP00 :                     5FA0 - |
*_TRAP01 :                     5FA6 - | *_TRAP02 :                     5FAC - |
*_TRAP03 :                     5FB2 - | *_TRAP04 :                     5FB8 - |
*_TRAP05 :                     5FBE - | *_TRAP06 :                     5FC4 - |
*_TRAP07 :                     5FCA - | *_TRAP08 :                     5FD0 - |
*_TRAP09 :                     5FD6 - | *_TRAP10 :                     5FDC - |
*_TRAP11 :                     5FE2 - | *_TRAP12 :                     5FE8 - |
*_TRAP13 :                     5FEE - | *_TRAP14 :                     5FF4 - |
*_TRAP15 :                     5FFA - | *_TRPERR :                     5F58 - |
*_USERCALL0 :                  5F28 - | *_USERCALL1 :                  5F2E - |
*_USERCALL2 :                  5F34 - | *_USERCALL3 :                  5F3A - |
*_USERMODE :                   5EA6 - |  _VDPREG :                 20004100 - |
*_WAITVSYNC :                  5F10 - |  _WAITVSYNC.TABLE :            6020 C |

   2700 symbols
    486 unused symbols

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 3 - 01/04/2025 05:20:09 AM


  Defined Macros:
  ---------------

BINCLUDE_DMA                          | BINCLUDE_DMA_E                       
CPU_ME                                | DATA_BANK                            
DEND_BANK                             | ENDMEMORY                            
ERREPORT                              | FILLSECTORS                          
FS_FILE                               | FS_MKLIST                            
GEMAHEAD                              | GEMATRK                              
GINSDAC                               | GINSFM                               
GINSFM3                               | GINSNULL                             
GINSPCM                               | GINSPSG                              
GINSPSGN                              | GINSPWM                              
GSMPLDATA                             | GSMPLRAW                             
MARSVRAMDATA                          | MARSVRAMDEND                         
MCDSTAMPDATA                          | MCDSTAMPDEND                         
MEMORY                                | REPORT                               
ROMPAD                                | SCREEN_CODE                          
VDP_SHOWME                            |

     31 macros

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 4 - 01/04/2025 05:20:09 AM


  Defined Structures/Unions:
  --------------------------

CDPCM
  0      (I8) STATUS
  1      (I8) FLAGS
  2      (I32) START
  6      (I32) LENGTH
  A      (I32) LOOP
  E      (I32) CLEN
 12      (I32) CREAD
 16      (I16) STRMHALF
 18      (I16) PITCH
 1A      (I16) CBLK
 1C      (I16) COUT
 1E      (I8) PAN
 1F      (I8) ENV

CDSTAMP
  0      (I8) FLAGS
  1      (I8) MAP
  2      (I16) CX
  4      (I16) CY
  6      (I16) X
  8      (I16) Y
  A      (I16) WDTH
  C      (I16) HGHT
  E      (I16) SCALE
 10      (I16) ROT

DREQ
  0      (I16) PALETTE
200      (I8) BUFF0
220      (I8) BUFF1
620      (I8) BUFF2

MARSGBL
  0      (I16) THISFRAME
  2      (I16) XSHIFT
  4      (I16) WDGTASK
  6      (I16) WDGHOLD
  8      (I16) WDGDIVLOCK
  A      (I16) WDGREADY
  C      (I16) PLYPZCNTR
  E      (I16) WDGCLLINES
 10      (I16) WDGACTIVE
 16      (I16) DRAWALL
 18      (I32) 3D_OUTWIDTH
 1C      (I32) 3D_OUTHEIGHT
 20      (I32) DREQREAD
 24      (I32) DREQWRITE
 28      (I32) PLGNPZINDX_R
 2C      (I32) PLGNPZINDX_W
 30      (I32) SCRL_XPOS
 34      (I32) SCRL_YPOS
 38      (I32) SCRL_XOLD
 3C      (I32) SCRL_YOLD
 40      (I32) SCRL_SIZE
 44      (I32) SCRL_WDTH
 48      (I32) SCRL_HGHT
 4C      (I32) SCRL_VRAM
 50      (I32) SCRL_FBOUT
 54      (I32) SCRL_FBTL
 58      (I32) SCRL_FBY
 5C      (I32) SCRL_FBX

MARSPWM
  0      (I32) ENBL
  4      (I32) READ
  8      (I32) BANK
  C      (I32) START
 10      (I32) LENGTH
 14      (I32) LOOP
 18      (I32) PITCH
 1C      (I32) VOL
 20      (I32) CBANK
 24      (I32) CREAD

MCAM
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) Z_POS
  C      (I32) X_ROT
 10      (I32) Y_ROT
 14      (I32) Z_ROT

MDSTMP
  0      (I16) FLAGS
  2      (I16) VRAMMAIN
  4      (I16) VRAMSEC
  6      (I16) VRAMSIZE
  8      (I16) VRAMLEN
  A      (I16) VRAMINCR
  C      (I16) STMPOUTB
  E      (I16) CURROUTFLIP
 10      (I16) FDROP
 12      (I32) CELLSTORAGE
 16      (I32) DOTINCR
 1A      (I32) BUFFINCR

MMDL
  4      (I32) DATA
  8      (I32) X_POS
  C      (I32) Y_POS
 10      (I32) Z_POS
 14      (I32) X_ROT
 18      (I32) Z_ROT
 1C      (I32) Y_ROT

MSPR
  0      (I8) FLAGS
  1      (I8) INDX
  2      (I8) SIZE_W
  3      (I8) SIZE_H
  4      (I8) SRC_W
  5      (I8) SRC_H
  6      (I8) SRCWDTH
  7      (I8) FRAME_X
  8      (I8) FRAME_Y
 10      (I16) X_POS
 12      (I16) Y_POS
 14      (I16) Z_POS
 16      (I16) X_ROT
 18      (I16) Z_ROT
 1A      (I16) Y_ROT
 1C      (I32) VRAM

OBJ
  0      (I32) CODE
  4      (I32) X
  8      (I32) Y
  C      (I32) Z
 10      (I16) SIZE_X
 12      (I16) SIZE_Y
 14      (I16) SIZE_Z
 16      (I16) X_SPD
 18      (I16) Y_SPD
 1A      (I16) Z_SPD
 1C      (I8) INDEX
 1D      (I8) SUBID
 1E      (I8) STATUS
 1F      (I8) ATTR
 20      (I16) FRAME
 22      (I16) ANIM_NUM
 24      (I16) ANIM_INDX
 26      (I8) ANIM_ICUR
 27      (I8) ANIM_SPD
 28      (I8) RAM

PALFD
  0      (I8) REQ
  1      (I8) DELAY
  2      (I8) START
  3      (I8) INCR
  4      (I8) TARGET
  5      (I8) TIMER
  6      (I16) NUM

PLYGN
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) POINTS
 28      (I16) SRCPNTS

PLYPZ
  0      (I32) TYPE
  4      (I32) MTRL
  8      (I32) YTB
  C      (I32) XL
 10      (I32) SRC_XL
 14      (I32) SRC_YL
 18      (I32) XL_DX
 1C      (I32) XR_DX
 20      (I32) SRC_XL_DX
 24      (I32) SRC_XR_DX
 28      (I32) SRC_YL_DX
 2C      (I32) SRC_YR_DX

SSCRL
  0      (I32) X_POS
  4      (I32) Y_POS
  8      (I32) VRAM

SSPR
  0      (I8) FLAGS
  2      (I16) FRAME
  4      (I16) SIZE
  6      (I16) INDX
  8      (I16) X_POS
  A      (I16) Y_POS
  C      (I32) VRAM

STMPC
  0      (I16) XC
  2      (I16) YC
  4      (I32) X
  8      (I32) Y
  C      (I32) DX
 10      (I32) DY
 14      (I32) TX
 18      (I32) TY
 1C      (I16) XMUL
 1E      (I16) ZMUL
 20      (I16) ZMUL_SIN
 22      (I16) ZMUL_COS
 24      (I16) ROT_SIN
 26      (I16) ROT_COS

STMPI
  0      (I16) MAP
  2      (I16) X
  4      (I16) Y
  6      (I16) XR
  8      (I16) YD
  A      (I16) FLAGS
17 structures
 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 5 - 01/04/2025 05:20:09 AM


  Defined Functions:
  ------------------

FULL_LOC                              | PSTR_MEM                             
COLOR_INDX                            | CELL_NUM                             
SPLITW                                |

 AS V1.42 Beta [Bld 212] - Source File main.asm - Page 6 - 01/04/2025 05:20:09 AM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.40 seconds assembly time

  23065 lines source file
  24180 lines incl. macro expansions
      6 passes
      0 errors
      0 warnings
